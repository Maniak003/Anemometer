
Anemometer.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bb78  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000049c  0800bc88  0800bc88  0001bc88  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c124  0800c124  000200bc  2**0
                  CONTENTS
  4 .ARM          00000000  0800c124  0800c124  000200bc  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800c124  0800c124  000200bc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c124  0800c124  0001c124  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c128  0800c128  0001c128  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000bc  20000000  0800c12c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003d4  200000c0  0800c1e8  000200c0  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20000494  0800c1e8  00020494  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000200bc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001612b  00000000  00000000  000200e5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000314d  00000000  00000000  00036210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001450  00000000  00000000  00039360  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001378  00000000  00000000  0003a7b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019f2a  00000000  00000000  0003bb28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00016050  00000000  00000000  00055a52  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00094434  00000000  00000000  0006baa2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000ffed6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005f88  00000000  00000000  000fff2c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200000c0 	.word	0x200000c0
 800012c:	00000000 	.word	0x00000000
 8000130:	0800bc70 	.word	0x0800bc70

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200000c4 	.word	0x200000c4
 800014c:	0800bc70 	.word	0x0800bc70

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__clear_cache>:
 8000a38:	4770      	bx	lr
 8000a3a:	bf00      	nop

08000a3c <default_ip_assign>:
/* Parse message as OFFER and ACK and NACK from DHCP server.*/
int8_t   parseDHCPCMSG(void);

/* The default handler of ip assign first */
void default_ip_assign(void)
{
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	af00      	add	r7, sp, #0
   setSIPR(DHCP_allocated_ip);
 8000a40:	2204      	movs	r2, #4
 8000a42:	4909      	ldr	r1, [pc, #36]	; (8000a68 <default_ip_assign+0x2c>)
 8000a44:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 8000a48:	f004 fdde 	bl	8005608 <WIZCHIP_WRITE_BUF>
   setSUBR(DHCP_allocated_sn);
 8000a4c:	2204      	movs	r2, #4
 8000a4e:	4907      	ldr	r1, [pc, #28]	; (8000a6c <default_ip_assign+0x30>)
 8000a50:	f44f 60a0 	mov.w	r0, #1280	; 0x500
 8000a54:	f004 fdd8 	bl	8005608 <WIZCHIP_WRITE_BUF>
   setGAR (DHCP_allocated_gw);
 8000a58:	2204      	movs	r2, #4
 8000a5a:	4905      	ldr	r1, [pc, #20]	; (8000a70 <default_ip_assign+0x34>)
 8000a5c:	f44f 7080 	mov.w	r0, #256	; 0x100
 8000a60:	f004 fdd2 	bl	8005608 <WIZCHIP_WRITE_BUF>
}
 8000a64:	bf00      	nop
 8000a66:	bd80      	pop	{r7, pc}
 8000a68:	200000e0 	.word	0x200000e0
 8000a6c:	200000e8 	.word	0x200000e8
 8000a70:	200000e4 	.word	0x200000e4

08000a74 <default_ip_update>:

/* The default handler of ip changed */
void default_ip_update(void)
{
 8000a74:	b580      	push	{r7, lr}
 8000a76:	af00      	add	r7, sp, #0
	/* WIZchip Software Reset */
   setMR(MR_RST);
 8000a78:	2180      	movs	r1, #128	; 0x80
 8000a7a:	2000      	movs	r0, #0
 8000a7c:	f004 fd16 	bl	80054ac <WIZCHIP_WRITE>
   getMR(); // for delay
 8000a80:	2000      	movs	r0, #0
 8000a82:	f004 fcc7 	bl	8005414 <WIZCHIP_READ>
   default_ip_assign();
 8000a86:	f7ff ffd9 	bl	8000a3c <default_ip_assign>
   setSHAR(DHCP_CHADDR);
 8000a8a:	2206      	movs	r2, #6
 8000a8c:	4903      	ldr	r1, [pc, #12]	; (8000a9c <default_ip_update+0x28>)
 8000a8e:	f44f 6010 	mov.w	r0, #2304	; 0x900
 8000a92:	f004 fdb9 	bl	8005608 <WIZCHIP_WRITE_BUF>
}
 8000a96:	bf00      	nop
 8000a98:	bd80      	pop	{r7, pc}
 8000a9a:	bf00      	nop
 8000a9c:	20000190 	.word	0x20000190

08000aa0 <default_ip_conflict>:

/* The default handler of ip changed */
void default_ip_conflict(void)
{
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	af00      	add	r7, sp, #0
	// WIZchip Software Reset
	setMR(MR_RST);
 8000aa4:	2180      	movs	r1, #128	; 0x80
 8000aa6:	2000      	movs	r0, #0
 8000aa8:	f004 fd00 	bl	80054ac <WIZCHIP_WRITE>
	getMR(); // for delay
 8000aac:	2000      	movs	r0, #0
 8000aae:	f004 fcb1 	bl	8005414 <WIZCHIP_READ>
	setSHAR(DHCP_CHADDR);
 8000ab2:	2206      	movs	r2, #6
 8000ab4:	4903      	ldr	r1, [pc, #12]	; (8000ac4 <default_ip_conflict+0x24>)
 8000ab6:	f44f 6010 	mov.w	r0, #2304	; 0x900
 8000aba:	f004 fda5 	bl	8005608 <WIZCHIP_WRITE_BUF>
}
 8000abe:	bf00      	nop
 8000ac0:	bd80      	pop	{r7, pc}
 8000ac2:	bf00      	nop
 8000ac4:	20000190 	.word	0x20000190

08000ac8 <reg_dhcp_cbfunc>:

/* register the call back func. */
void reg_dhcp_cbfunc(void(*ip_assign)(void), void(*ip_update)(void), void(*ip_conflict)(void))
{
 8000ac8:	b480      	push	{r7}
 8000aca:	b085      	sub	sp, #20
 8000acc:	af00      	add	r7, sp, #0
 8000ace:	60f8      	str	r0, [r7, #12]
 8000ad0:	60b9      	str	r1, [r7, #8]
 8000ad2:	607a      	str	r2, [r7, #4]
   dhcp_ip_assign   = default_ip_assign;
 8000ad4:	4b0f      	ldr	r3, [pc, #60]	; (8000b14 <reg_dhcp_cbfunc+0x4c>)
 8000ad6:	4a10      	ldr	r2, [pc, #64]	; (8000b18 <reg_dhcp_cbfunc+0x50>)
 8000ad8:	601a      	str	r2, [r3, #0]
   dhcp_ip_update   = default_ip_update;
 8000ada:	4b10      	ldr	r3, [pc, #64]	; (8000b1c <reg_dhcp_cbfunc+0x54>)
 8000adc:	4a10      	ldr	r2, [pc, #64]	; (8000b20 <reg_dhcp_cbfunc+0x58>)
 8000ade:	601a      	str	r2, [r3, #0]
   dhcp_ip_conflict = default_ip_conflict;
 8000ae0:	4b10      	ldr	r3, [pc, #64]	; (8000b24 <reg_dhcp_cbfunc+0x5c>)
 8000ae2:	4a11      	ldr	r2, [pc, #68]	; (8000b28 <reg_dhcp_cbfunc+0x60>)
 8000ae4:	601a      	str	r2, [r3, #0]
   if(ip_assign)   dhcp_ip_assign = ip_assign;
 8000ae6:	68fb      	ldr	r3, [r7, #12]
 8000ae8:	2b00      	cmp	r3, #0
 8000aea:	d002      	beq.n	8000af2 <reg_dhcp_cbfunc+0x2a>
 8000aec:	4a09      	ldr	r2, [pc, #36]	; (8000b14 <reg_dhcp_cbfunc+0x4c>)
 8000aee:	68fb      	ldr	r3, [r7, #12]
 8000af0:	6013      	str	r3, [r2, #0]
   if(ip_update)   dhcp_ip_update = ip_update;
 8000af2:	68bb      	ldr	r3, [r7, #8]
 8000af4:	2b00      	cmp	r3, #0
 8000af6:	d002      	beq.n	8000afe <reg_dhcp_cbfunc+0x36>
 8000af8:	4a08      	ldr	r2, [pc, #32]	; (8000b1c <reg_dhcp_cbfunc+0x54>)
 8000afa:	68bb      	ldr	r3, [r7, #8]
 8000afc:	6013      	str	r3, [r2, #0]
   if(ip_conflict) dhcp_ip_conflict = ip_conflict;
 8000afe:	687b      	ldr	r3, [r7, #4]
 8000b00:	2b00      	cmp	r3, #0
 8000b02:	d002      	beq.n	8000b0a <reg_dhcp_cbfunc+0x42>
 8000b04:	4a07      	ldr	r2, [pc, #28]	; (8000b24 <reg_dhcp_cbfunc+0x5c>)
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	6013      	str	r3, [r2, #0]
}
 8000b0a:	bf00      	nop
 8000b0c:	3714      	adds	r7, #20
 8000b0e:	46bd      	mov	sp, r7
 8000b10:	bc80      	pop	{r7}
 8000b12:	4770      	bx	lr
 8000b14:	20000010 	.word	0x20000010
 8000b18:	08000a3d 	.word	0x08000a3d
 8000b1c:	20000014 	.word	0x20000014
 8000b20:	08000a75 	.word	0x08000a75
 8000b24:	20000018 	.word	0x20000018
 8000b28:	08000aa1 	.word	0x08000aa1

08000b2c <makeDHCPMSG>:

/* make the common DHCP message */
void makeDHCPMSG(void)
{
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	b084      	sub	sp, #16
 8000b30:	af00      	add	r7, sp, #0
   uint8_t  bk_mac[6];
   uint8_t* ptmp;
   uint8_t  i;
   getSHAR(bk_mac);
 8000b32:	463b      	mov	r3, r7
 8000b34:	2206      	movs	r2, #6
 8000b36:	4619      	mov	r1, r3
 8000b38:	f44f 6010 	mov.w	r0, #2304	; 0x900
 8000b3c:	f004 fd04 	bl	8005548 <WIZCHIP_READ_BUF>
	pDHCPMSG->op      = DHCP_BOOTREQUEST;
 8000b40:	4b72      	ldr	r3, [pc, #456]	; (8000d0c <makeDHCPMSG+0x1e0>)
 8000b42:	681b      	ldr	r3, [r3, #0]
 8000b44:	2201      	movs	r2, #1
 8000b46:	701a      	strb	r2, [r3, #0]
	pDHCPMSG->htype   = DHCP_HTYPE10MB;
 8000b48:	4b70      	ldr	r3, [pc, #448]	; (8000d0c <makeDHCPMSG+0x1e0>)
 8000b4a:	681b      	ldr	r3, [r3, #0]
 8000b4c:	2201      	movs	r2, #1
 8000b4e:	705a      	strb	r2, [r3, #1]
	pDHCPMSG->hlen    = DHCP_HLENETHERNET;
 8000b50:	4b6e      	ldr	r3, [pc, #440]	; (8000d0c <makeDHCPMSG+0x1e0>)
 8000b52:	681b      	ldr	r3, [r3, #0]
 8000b54:	2206      	movs	r2, #6
 8000b56:	709a      	strb	r2, [r3, #2]
	pDHCPMSG->hops    = DHCP_HOPS;
 8000b58:	4b6c      	ldr	r3, [pc, #432]	; (8000d0c <makeDHCPMSG+0x1e0>)
 8000b5a:	681b      	ldr	r3, [r3, #0]
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	70da      	strb	r2, [r3, #3]
	ptmp              = (uint8_t*)(&pDHCPMSG->xid);
 8000b60:	4b6a      	ldr	r3, [pc, #424]	; (8000d0c <makeDHCPMSG+0x1e0>)
 8000b62:	681b      	ldr	r3, [r3, #0]
 8000b64:	3304      	adds	r3, #4
 8000b66:	60bb      	str	r3, [r7, #8]
	*(ptmp+0)         = (uint8_t)((DHCP_XID & 0xFF000000) >> 24);
 8000b68:	4b69      	ldr	r3, [pc, #420]	; (8000d10 <makeDHCPMSG+0x1e4>)
 8000b6a:	681b      	ldr	r3, [r3, #0]
 8000b6c:	0e1b      	lsrs	r3, r3, #24
 8000b6e:	b2da      	uxtb	r2, r3
 8000b70:	68bb      	ldr	r3, [r7, #8]
 8000b72:	701a      	strb	r2, [r3, #0]
	*(ptmp+1)         = (uint8_t)((DHCP_XID & 0x00FF0000) >> 16);
 8000b74:	4b66      	ldr	r3, [pc, #408]	; (8000d10 <makeDHCPMSG+0x1e4>)
 8000b76:	681b      	ldr	r3, [r3, #0]
 8000b78:	0c1a      	lsrs	r2, r3, #16
 8000b7a:	68bb      	ldr	r3, [r7, #8]
 8000b7c:	3301      	adds	r3, #1
 8000b7e:	b2d2      	uxtb	r2, r2
 8000b80:	701a      	strb	r2, [r3, #0]
   *(ptmp+2)         = (uint8_t)((DHCP_XID & 0x0000FF00) >>  8);
 8000b82:	4b63      	ldr	r3, [pc, #396]	; (8000d10 <makeDHCPMSG+0x1e4>)
 8000b84:	681b      	ldr	r3, [r3, #0]
 8000b86:	0a1a      	lsrs	r2, r3, #8
 8000b88:	68bb      	ldr	r3, [r7, #8]
 8000b8a:	3302      	adds	r3, #2
 8000b8c:	b2d2      	uxtb	r2, r2
 8000b8e:	701a      	strb	r2, [r3, #0]
	*(ptmp+3)         = (uint8_t)((DHCP_XID & 0x000000FF) >>  0);   
 8000b90:	4b5f      	ldr	r3, [pc, #380]	; (8000d10 <makeDHCPMSG+0x1e4>)
 8000b92:	681a      	ldr	r2, [r3, #0]
 8000b94:	68bb      	ldr	r3, [r7, #8]
 8000b96:	3303      	adds	r3, #3
 8000b98:	b2d2      	uxtb	r2, r2
 8000b9a:	701a      	strb	r2, [r3, #0]
	pDHCPMSG->secs    = DHCP_SECS;
 8000b9c:	4b5b      	ldr	r3, [pc, #364]	; (8000d0c <makeDHCPMSG+0x1e0>)
 8000b9e:	681b      	ldr	r3, [r3, #0]
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	811a      	strh	r2, [r3, #8]
	ptmp              = (uint8_t*)(&pDHCPMSG->flags);	
 8000ba4:	4b59      	ldr	r3, [pc, #356]	; (8000d0c <makeDHCPMSG+0x1e0>)
 8000ba6:	681b      	ldr	r3, [r3, #0]
 8000ba8:	330a      	adds	r3, #10
 8000baa:	60bb      	str	r3, [r7, #8]
	*(ptmp+0)         = (uint8_t)((DHCP_FLAGSBROADCAST & 0xFF00) >> 8);
 8000bac:	68bb      	ldr	r3, [r7, #8]
 8000bae:	2280      	movs	r2, #128	; 0x80
 8000bb0:	701a      	strb	r2, [r3, #0]
	*(ptmp+1)         = (uint8_t)((DHCP_FLAGSBROADCAST & 0x00FF) >> 0);
 8000bb2:	68bb      	ldr	r3, [r7, #8]
 8000bb4:	3301      	adds	r3, #1
 8000bb6:	2200      	movs	r2, #0
 8000bb8:	701a      	strb	r2, [r3, #0]

	pDHCPMSG->ciaddr[0] = 0;
 8000bba:	4b54      	ldr	r3, [pc, #336]	; (8000d0c <makeDHCPMSG+0x1e0>)
 8000bbc:	681b      	ldr	r3, [r3, #0]
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	731a      	strb	r2, [r3, #12]
	pDHCPMSG->ciaddr[1] = 0;
 8000bc2:	4b52      	ldr	r3, [pc, #328]	; (8000d0c <makeDHCPMSG+0x1e0>)
 8000bc4:	681b      	ldr	r3, [r3, #0]
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	735a      	strb	r2, [r3, #13]
	pDHCPMSG->ciaddr[2] = 0;
 8000bca:	4b50      	ldr	r3, [pc, #320]	; (8000d0c <makeDHCPMSG+0x1e0>)
 8000bcc:	681b      	ldr	r3, [r3, #0]
 8000bce:	2200      	movs	r2, #0
 8000bd0:	739a      	strb	r2, [r3, #14]
	pDHCPMSG->ciaddr[3] = 0;
 8000bd2:	4b4e      	ldr	r3, [pc, #312]	; (8000d0c <makeDHCPMSG+0x1e0>)
 8000bd4:	681b      	ldr	r3, [r3, #0]
 8000bd6:	2200      	movs	r2, #0
 8000bd8:	73da      	strb	r2, [r3, #15]

	pDHCPMSG->yiaddr[0] = 0;
 8000bda:	4b4c      	ldr	r3, [pc, #304]	; (8000d0c <makeDHCPMSG+0x1e0>)
 8000bdc:	681b      	ldr	r3, [r3, #0]
 8000bde:	2200      	movs	r2, #0
 8000be0:	741a      	strb	r2, [r3, #16]
	pDHCPMSG->yiaddr[1] = 0;
 8000be2:	4b4a      	ldr	r3, [pc, #296]	; (8000d0c <makeDHCPMSG+0x1e0>)
 8000be4:	681b      	ldr	r3, [r3, #0]
 8000be6:	2200      	movs	r2, #0
 8000be8:	745a      	strb	r2, [r3, #17]
	pDHCPMSG->yiaddr[2] = 0;
 8000bea:	4b48      	ldr	r3, [pc, #288]	; (8000d0c <makeDHCPMSG+0x1e0>)
 8000bec:	681b      	ldr	r3, [r3, #0]
 8000bee:	2200      	movs	r2, #0
 8000bf0:	749a      	strb	r2, [r3, #18]
	pDHCPMSG->yiaddr[3] = 0;
 8000bf2:	4b46      	ldr	r3, [pc, #280]	; (8000d0c <makeDHCPMSG+0x1e0>)
 8000bf4:	681b      	ldr	r3, [r3, #0]
 8000bf6:	2200      	movs	r2, #0
 8000bf8:	74da      	strb	r2, [r3, #19]

	pDHCPMSG->siaddr[0] = 0;
 8000bfa:	4b44      	ldr	r3, [pc, #272]	; (8000d0c <makeDHCPMSG+0x1e0>)
 8000bfc:	681b      	ldr	r3, [r3, #0]
 8000bfe:	2200      	movs	r2, #0
 8000c00:	751a      	strb	r2, [r3, #20]
	pDHCPMSG->siaddr[1] = 0;
 8000c02:	4b42      	ldr	r3, [pc, #264]	; (8000d0c <makeDHCPMSG+0x1e0>)
 8000c04:	681b      	ldr	r3, [r3, #0]
 8000c06:	2200      	movs	r2, #0
 8000c08:	755a      	strb	r2, [r3, #21]
	pDHCPMSG->siaddr[2] = 0;
 8000c0a:	4b40      	ldr	r3, [pc, #256]	; (8000d0c <makeDHCPMSG+0x1e0>)
 8000c0c:	681b      	ldr	r3, [r3, #0]
 8000c0e:	2200      	movs	r2, #0
 8000c10:	759a      	strb	r2, [r3, #22]
	pDHCPMSG->siaddr[3] = 0;
 8000c12:	4b3e      	ldr	r3, [pc, #248]	; (8000d0c <makeDHCPMSG+0x1e0>)
 8000c14:	681b      	ldr	r3, [r3, #0]
 8000c16:	2200      	movs	r2, #0
 8000c18:	75da      	strb	r2, [r3, #23]

	pDHCPMSG->giaddr[0] = 0;
 8000c1a:	4b3c      	ldr	r3, [pc, #240]	; (8000d0c <makeDHCPMSG+0x1e0>)
 8000c1c:	681b      	ldr	r3, [r3, #0]
 8000c1e:	2200      	movs	r2, #0
 8000c20:	761a      	strb	r2, [r3, #24]
	pDHCPMSG->giaddr[1] = 0;
 8000c22:	4b3a      	ldr	r3, [pc, #232]	; (8000d0c <makeDHCPMSG+0x1e0>)
 8000c24:	681b      	ldr	r3, [r3, #0]
 8000c26:	2200      	movs	r2, #0
 8000c28:	765a      	strb	r2, [r3, #25]
	pDHCPMSG->giaddr[2] = 0;
 8000c2a:	4b38      	ldr	r3, [pc, #224]	; (8000d0c <makeDHCPMSG+0x1e0>)
 8000c2c:	681b      	ldr	r3, [r3, #0]
 8000c2e:	2200      	movs	r2, #0
 8000c30:	769a      	strb	r2, [r3, #26]
	pDHCPMSG->giaddr[3] = 0;
 8000c32:	4b36      	ldr	r3, [pc, #216]	; (8000d0c <makeDHCPMSG+0x1e0>)
 8000c34:	681b      	ldr	r3, [r3, #0]
 8000c36:	2200      	movs	r2, #0
 8000c38:	76da      	strb	r2, [r3, #27]

	pDHCPMSG->chaddr[0] = DHCP_CHADDR[0];
 8000c3a:	4b34      	ldr	r3, [pc, #208]	; (8000d0c <makeDHCPMSG+0x1e0>)
 8000c3c:	681b      	ldr	r3, [r3, #0]
 8000c3e:	4a35      	ldr	r2, [pc, #212]	; (8000d14 <makeDHCPMSG+0x1e8>)
 8000c40:	7812      	ldrb	r2, [r2, #0]
 8000c42:	771a      	strb	r2, [r3, #28]
	pDHCPMSG->chaddr[1] = DHCP_CHADDR[1];
 8000c44:	4b31      	ldr	r3, [pc, #196]	; (8000d0c <makeDHCPMSG+0x1e0>)
 8000c46:	681b      	ldr	r3, [r3, #0]
 8000c48:	4a32      	ldr	r2, [pc, #200]	; (8000d14 <makeDHCPMSG+0x1e8>)
 8000c4a:	7852      	ldrb	r2, [r2, #1]
 8000c4c:	775a      	strb	r2, [r3, #29]
	pDHCPMSG->chaddr[2] = DHCP_CHADDR[2];
 8000c4e:	4b2f      	ldr	r3, [pc, #188]	; (8000d0c <makeDHCPMSG+0x1e0>)
 8000c50:	681b      	ldr	r3, [r3, #0]
 8000c52:	4a30      	ldr	r2, [pc, #192]	; (8000d14 <makeDHCPMSG+0x1e8>)
 8000c54:	7892      	ldrb	r2, [r2, #2]
 8000c56:	779a      	strb	r2, [r3, #30]
	pDHCPMSG->chaddr[3] = DHCP_CHADDR[3];
 8000c58:	4b2c      	ldr	r3, [pc, #176]	; (8000d0c <makeDHCPMSG+0x1e0>)
 8000c5a:	681b      	ldr	r3, [r3, #0]
 8000c5c:	4a2d      	ldr	r2, [pc, #180]	; (8000d14 <makeDHCPMSG+0x1e8>)
 8000c5e:	78d2      	ldrb	r2, [r2, #3]
 8000c60:	77da      	strb	r2, [r3, #31]
	pDHCPMSG->chaddr[4] = DHCP_CHADDR[4];
 8000c62:	4b2a      	ldr	r3, [pc, #168]	; (8000d0c <makeDHCPMSG+0x1e0>)
 8000c64:	681b      	ldr	r3, [r3, #0]
 8000c66:	4a2b      	ldr	r2, [pc, #172]	; (8000d14 <makeDHCPMSG+0x1e8>)
 8000c68:	7912      	ldrb	r2, [r2, #4]
 8000c6a:	f883 2020 	strb.w	r2, [r3, #32]
	pDHCPMSG->chaddr[5] = DHCP_CHADDR[5];
 8000c6e:	4b27      	ldr	r3, [pc, #156]	; (8000d0c <makeDHCPMSG+0x1e0>)
 8000c70:	681b      	ldr	r3, [r3, #0]
 8000c72:	4a28      	ldr	r2, [pc, #160]	; (8000d14 <makeDHCPMSG+0x1e8>)
 8000c74:	7952      	ldrb	r2, [r2, #5]
 8000c76:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

	for (i = 6; i < 16; i++)  pDHCPMSG->chaddr[i] = 0;
 8000c7a:	2306      	movs	r3, #6
 8000c7c:	73fb      	strb	r3, [r7, #15]
 8000c7e:	e008      	b.n	8000c92 <makeDHCPMSG+0x166>
 8000c80:	4b22      	ldr	r3, [pc, #136]	; (8000d0c <makeDHCPMSG+0x1e0>)
 8000c82:	681a      	ldr	r2, [r3, #0]
 8000c84:	7bfb      	ldrb	r3, [r7, #15]
 8000c86:	4413      	add	r3, r2
 8000c88:	2200      	movs	r2, #0
 8000c8a:	771a      	strb	r2, [r3, #28]
 8000c8c:	7bfb      	ldrb	r3, [r7, #15]
 8000c8e:	3301      	adds	r3, #1
 8000c90:	73fb      	strb	r3, [r7, #15]
 8000c92:	7bfb      	ldrb	r3, [r7, #15]
 8000c94:	2b0f      	cmp	r3, #15
 8000c96:	d9f3      	bls.n	8000c80 <makeDHCPMSG+0x154>
	for (i = 0; i < 64; i++)  pDHCPMSG->sname[i]  = 0;
 8000c98:	2300      	movs	r3, #0
 8000c9a:	73fb      	strb	r3, [r7, #15]
 8000c9c:	e009      	b.n	8000cb2 <makeDHCPMSG+0x186>
 8000c9e:	4b1b      	ldr	r3, [pc, #108]	; (8000d0c <makeDHCPMSG+0x1e0>)
 8000ca0:	681a      	ldr	r2, [r3, #0]
 8000ca2:	7bfb      	ldrb	r3, [r7, #15]
 8000ca4:	4413      	add	r3, r2
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
 8000cac:	7bfb      	ldrb	r3, [r7, #15]
 8000cae:	3301      	adds	r3, #1
 8000cb0:	73fb      	strb	r3, [r7, #15]
 8000cb2:	7bfb      	ldrb	r3, [r7, #15]
 8000cb4:	2b3f      	cmp	r3, #63	; 0x3f
 8000cb6:	d9f2      	bls.n	8000c9e <makeDHCPMSG+0x172>
	for (i = 0; i < 128; i++) pDHCPMSG->file[i]   = 0;
 8000cb8:	2300      	movs	r3, #0
 8000cba:	73fb      	strb	r3, [r7, #15]
 8000cbc:	e009      	b.n	8000cd2 <makeDHCPMSG+0x1a6>
 8000cbe:	4b13      	ldr	r3, [pc, #76]	; (8000d0c <makeDHCPMSG+0x1e0>)
 8000cc0:	681a      	ldr	r2, [r3, #0]
 8000cc2:	7bfb      	ldrb	r3, [r7, #15]
 8000cc4:	4413      	add	r3, r2
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
 8000ccc:	7bfb      	ldrb	r3, [r7, #15]
 8000cce:	3301      	adds	r3, #1
 8000cd0:	73fb      	strb	r3, [r7, #15]
 8000cd2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000cd6:	2b00      	cmp	r3, #0
 8000cd8:	daf1      	bge.n	8000cbe <makeDHCPMSG+0x192>

	// MAGIC_COOKIE
	pDHCPMSG->OPT[0] = (uint8_t)((MAGIC_COOKIE & 0xFF000000) >> 24);
 8000cda:	4b0c      	ldr	r3, [pc, #48]	; (8000d0c <makeDHCPMSG+0x1e0>)
 8000cdc:	681b      	ldr	r3, [r3, #0]
 8000cde:	2263      	movs	r2, #99	; 0x63
 8000ce0:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[1] = (uint8_t)((MAGIC_COOKIE & 0x00FF0000) >> 16);
 8000ce4:	4b09      	ldr	r3, [pc, #36]	; (8000d0c <makeDHCPMSG+0x1e0>)
 8000ce6:	681b      	ldr	r3, [r3, #0]
 8000ce8:	2282      	movs	r2, #130	; 0x82
 8000cea:	f883 20ed 	strb.w	r2, [r3, #237]	; 0xed
	pDHCPMSG->OPT[2] = (uint8_t)((MAGIC_COOKIE & 0x0000FF00) >>  8);
 8000cee:	4b07      	ldr	r3, [pc, #28]	; (8000d0c <makeDHCPMSG+0x1e0>)
 8000cf0:	681b      	ldr	r3, [r3, #0]
 8000cf2:	2253      	movs	r2, #83	; 0x53
 8000cf4:	f883 20ee 	strb.w	r2, [r3, #238]	; 0xee
	pDHCPMSG->OPT[3] = (uint8_t) (MAGIC_COOKIE & 0x000000FF) >>  0;
 8000cf8:	4b04      	ldr	r3, [pc, #16]	; (8000d0c <makeDHCPMSG+0x1e0>)
 8000cfa:	681b      	ldr	r3, [r3, #0]
 8000cfc:	2263      	movs	r2, #99	; 0x63
 8000cfe:	f883 20ef 	strb.w	r2, [r3, #239]	; 0xef
}
 8000d02:	bf00      	nop
 8000d04:	3710      	adds	r7, #16
 8000d06:	46bd      	mov	sp, r7
 8000d08:	bd80      	pop	{r7, pc}
 8000d0a:	bf00      	nop
 8000d0c:	200001a4 	.word	0x200001a4
 8000d10:	20000198 	.word	0x20000198
 8000d14:	20000190 	.word	0x20000190

08000d18 <send_DHCP_DISCOVER>:

/* SEND DHCP DISCOVER */
void send_DHCP_DISCOVER(void)
{
 8000d18:	b5b0      	push	{r4, r5, r7, lr}
 8000d1a:	b084      	sub	sp, #16
 8000d1c:	af02      	add	r7, sp, #8
	uint16_t i;
	uint8_t ip[4];
	uint16_t k = 0;
 8000d1e:	2300      	movs	r3, #0
 8000d20:	80bb      	strh	r3, [r7, #4]
   
   makeDHCPMSG();
 8000d22:	f7ff ff03 	bl	8000b2c <makeDHCPMSG>
   DHCP_SIP[0]=0;
 8000d26:	4b56      	ldr	r3, [pc, #344]	; (8000e80 <send_DHCP_DISCOVER+0x168>)
 8000d28:	2200      	movs	r2, #0
 8000d2a:	701a      	strb	r2, [r3, #0]
   DHCP_SIP[1]=0;
 8000d2c:	4b54      	ldr	r3, [pc, #336]	; (8000e80 <send_DHCP_DISCOVER+0x168>)
 8000d2e:	2200      	movs	r2, #0
 8000d30:	705a      	strb	r2, [r3, #1]
   DHCP_SIP[2]=0;
 8000d32:	4b53      	ldr	r3, [pc, #332]	; (8000e80 <send_DHCP_DISCOVER+0x168>)
 8000d34:	2200      	movs	r2, #0
 8000d36:	709a      	strb	r2, [r3, #2]
   DHCP_SIP[3]=0;
 8000d38:	4b51      	ldr	r3, [pc, #324]	; (8000e80 <send_DHCP_DISCOVER+0x168>)
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	70da      	strb	r2, [r3, #3]
   DHCP_REAL_SIP[0]=0;
 8000d3e:	4b51      	ldr	r3, [pc, #324]	; (8000e84 <send_DHCP_DISCOVER+0x16c>)
 8000d40:	2200      	movs	r2, #0
 8000d42:	701a      	strb	r2, [r3, #0]
   DHCP_REAL_SIP[1]=0;
 8000d44:	4b4f      	ldr	r3, [pc, #316]	; (8000e84 <send_DHCP_DISCOVER+0x16c>)
 8000d46:	2200      	movs	r2, #0
 8000d48:	705a      	strb	r2, [r3, #1]
   DHCP_REAL_SIP[2]=0;
 8000d4a:	4b4e      	ldr	r3, [pc, #312]	; (8000e84 <send_DHCP_DISCOVER+0x16c>)
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	709a      	strb	r2, [r3, #2]
   DHCP_REAL_SIP[3]=0;
 8000d50:	4b4c      	ldr	r3, [pc, #304]	; (8000e84 <send_DHCP_DISCOVER+0x16c>)
 8000d52:	2200      	movs	r2, #0
 8000d54:	70da      	strb	r2, [r3, #3]

   k = 4;     // because MAGIC_COOKIE already made by makeDHCPMSG()
 8000d56:	2304      	movs	r3, #4
 8000d58:	80bb      	strh	r3, [r7, #4]
   
	// Option Request Param
	pDHCPMSG->OPT[k++] = dhcpMessageType;
 8000d5a:	4b4b      	ldr	r3, [pc, #300]	; (8000e88 <send_DHCP_DISCOVER+0x170>)
 8000d5c:	681a      	ldr	r2, [r3, #0]
 8000d5e:	88bb      	ldrh	r3, [r7, #4]
 8000d60:	1c59      	adds	r1, r3, #1
 8000d62:	80b9      	strh	r1, [r7, #4]
 8000d64:	4413      	add	r3, r2
 8000d66:	2235      	movs	r2, #53	; 0x35
 8000d68:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = 0x01;
 8000d6c:	4b46      	ldr	r3, [pc, #280]	; (8000e88 <send_DHCP_DISCOVER+0x170>)
 8000d6e:	681a      	ldr	r2, [r3, #0]
 8000d70:	88bb      	ldrh	r3, [r7, #4]
 8000d72:	1c59      	adds	r1, r3, #1
 8000d74:	80b9      	strh	r1, [r7, #4]
 8000d76:	4413      	add	r3, r2
 8000d78:	2201      	movs	r2, #1
 8000d7a:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_DISCOVER;
 8000d7e:	4b42      	ldr	r3, [pc, #264]	; (8000e88 <send_DHCP_DISCOVER+0x170>)
 8000d80:	681a      	ldr	r2, [r3, #0]
 8000d82:	88bb      	ldrh	r3, [r7, #4]
 8000d84:	1c59      	adds	r1, r3, #1
 8000d86:	80b9      	strh	r1, [r7, #4]
 8000d88:	4413      	add	r3, r2
 8000d8a:	2201      	movs	r2, #1
 8000d8c:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	
	// Client identifier
	pDHCPMSG->OPT[k++] = dhcpClientIdentifier;
 8000d90:	4b3d      	ldr	r3, [pc, #244]	; (8000e88 <send_DHCP_DISCOVER+0x170>)
 8000d92:	681a      	ldr	r2, [r3, #0]
 8000d94:	88bb      	ldrh	r3, [r7, #4]
 8000d96:	1c59      	adds	r1, r3, #1
 8000d98:	80b9      	strh	r1, [r7, #4]
 8000d9a:	4413      	add	r3, r2
 8000d9c:	223d      	movs	r2, #61	; 0x3d
 8000d9e:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = 0x07;
 8000da2:	4b39      	ldr	r3, [pc, #228]	; (8000e88 <send_DHCP_DISCOVER+0x170>)
 8000da4:	681a      	ldr	r2, [r3, #0]
 8000da6:	88bb      	ldrh	r3, [r7, #4]
 8000da8:	1c59      	adds	r1, r3, #1
 8000daa:	80b9      	strh	r1, [r7, #4]
 8000dac:	4413      	add	r3, r2
 8000dae:	2207      	movs	r2, #7
 8000db0:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = 0x01;
 8000db4:	4b34      	ldr	r3, [pc, #208]	; (8000e88 <send_DHCP_DISCOVER+0x170>)
 8000db6:	681a      	ldr	r2, [r3, #0]
 8000db8:	88bb      	ldrh	r3, [r7, #4]
 8000dba:	1c59      	adds	r1, r3, #1
 8000dbc:	80b9      	strh	r1, [r7, #4]
 8000dbe:	4413      	add	r3, r2
 8000dc0:	2201      	movs	r2, #1
 8000dc2:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[0];
 8000dc6:	4b30      	ldr	r3, [pc, #192]	; (8000e88 <send_DHCP_DISCOVER+0x170>)
 8000dc8:	681a      	ldr	r2, [r3, #0]
 8000dca:	88bb      	ldrh	r3, [r7, #4]
 8000dcc:	1c59      	adds	r1, r3, #1
 8000dce:	80b9      	strh	r1, [r7, #4]
 8000dd0:	4618      	mov	r0, r3
 8000dd2:	4b2e      	ldr	r3, [pc, #184]	; (8000e8c <send_DHCP_DISCOVER+0x174>)
 8000dd4:	7819      	ldrb	r1, [r3, #0]
 8000dd6:	1813      	adds	r3, r2, r0
 8000dd8:	460a      	mov	r2, r1
 8000dda:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[1];
 8000dde:	4b2a      	ldr	r3, [pc, #168]	; (8000e88 <send_DHCP_DISCOVER+0x170>)
 8000de0:	681a      	ldr	r2, [r3, #0]
 8000de2:	88bb      	ldrh	r3, [r7, #4]
 8000de4:	1c59      	adds	r1, r3, #1
 8000de6:	80b9      	strh	r1, [r7, #4]
 8000de8:	4618      	mov	r0, r3
 8000dea:	4b28      	ldr	r3, [pc, #160]	; (8000e8c <send_DHCP_DISCOVER+0x174>)
 8000dec:	7859      	ldrb	r1, [r3, #1]
 8000dee:	1813      	adds	r3, r2, r0
 8000df0:	460a      	mov	r2, r1
 8000df2:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[2];
 8000df6:	4b24      	ldr	r3, [pc, #144]	; (8000e88 <send_DHCP_DISCOVER+0x170>)
 8000df8:	681a      	ldr	r2, [r3, #0]
 8000dfa:	88bb      	ldrh	r3, [r7, #4]
 8000dfc:	1c59      	adds	r1, r3, #1
 8000dfe:	80b9      	strh	r1, [r7, #4]
 8000e00:	4618      	mov	r0, r3
 8000e02:	4b22      	ldr	r3, [pc, #136]	; (8000e8c <send_DHCP_DISCOVER+0x174>)
 8000e04:	7899      	ldrb	r1, [r3, #2]
 8000e06:	1813      	adds	r3, r2, r0
 8000e08:	460a      	mov	r2, r1
 8000e0a:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[3];
 8000e0e:	4b1e      	ldr	r3, [pc, #120]	; (8000e88 <send_DHCP_DISCOVER+0x170>)
 8000e10:	681a      	ldr	r2, [r3, #0]
 8000e12:	88bb      	ldrh	r3, [r7, #4]
 8000e14:	1c59      	adds	r1, r3, #1
 8000e16:	80b9      	strh	r1, [r7, #4]
 8000e18:	4618      	mov	r0, r3
 8000e1a:	4b1c      	ldr	r3, [pc, #112]	; (8000e8c <send_DHCP_DISCOVER+0x174>)
 8000e1c:	78d9      	ldrb	r1, [r3, #3]
 8000e1e:	1813      	adds	r3, r2, r0
 8000e20:	460a      	mov	r2, r1
 8000e22:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[4];
 8000e26:	4b18      	ldr	r3, [pc, #96]	; (8000e88 <send_DHCP_DISCOVER+0x170>)
 8000e28:	681a      	ldr	r2, [r3, #0]
 8000e2a:	88bb      	ldrh	r3, [r7, #4]
 8000e2c:	1c59      	adds	r1, r3, #1
 8000e2e:	80b9      	strh	r1, [r7, #4]
 8000e30:	4618      	mov	r0, r3
 8000e32:	4b16      	ldr	r3, [pc, #88]	; (8000e8c <send_DHCP_DISCOVER+0x174>)
 8000e34:	7919      	ldrb	r1, [r3, #4]
 8000e36:	1813      	adds	r3, r2, r0
 8000e38:	460a      	mov	r2, r1
 8000e3a:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[5];
 8000e3e:	4b12      	ldr	r3, [pc, #72]	; (8000e88 <send_DHCP_DISCOVER+0x170>)
 8000e40:	681a      	ldr	r2, [r3, #0]
 8000e42:	88bb      	ldrh	r3, [r7, #4]
 8000e44:	1c59      	adds	r1, r3, #1
 8000e46:	80b9      	strh	r1, [r7, #4]
 8000e48:	4618      	mov	r0, r3
 8000e4a:	4b10      	ldr	r3, [pc, #64]	; (8000e8c <send_DHCP_DISCOVER+0x174>)
 8000e4c:	7959      	ldrb	r1, [r3, #5]
 8000e4e:	1813      	adds	r3, r2, r0
 8000e50:	460a      	mov	r2, r1
 8000e52:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	
	// host name
	pDHCPMSG->OPT[k++] = hostName;
 8000e56:	4b0c      	ldr	r3, [pc, #48]	; (8000e88 <send_DHCP_DISCOVER+0x170>)
 8000e58:	681a      	ldr	r2, [r3, #0]
 8000e5a:	88bb      	ldrh	r3, [r7, #4]
 8000e5c:	1c59      	adds	r1, r3, #1
 8000e5e:	80b9      	strh	r1, [r7, #4]
 8000e60:	4413      	add	r3, r2
 8000e62:	220c      	movs	r2, #12
 8000e64:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = 0;          // fill zero length of hostname 
 8000e68:	4b07      	ldr	r3, [pc, #28]	; (8000e88 <send_DHCP_DISCOVER+0x170>)
 8000e6a:	681a      	ldr	r2, [r3, #0]
 8000e6c:	88bb      	ldrh	r3, [r7, #4]
 8000e6e:	1c59      	adds	r1, r3, #1
 8000e70:	80b9      	strh	r1, [r7, #4]
 8000e72:	4413      	add	r3, r2
 8000e74:	2200      	movs	r2, #0
 8000e76:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	for(i = 0 ; HOST_NAME[i] != 0; i++)
 8000e7a:	2300      	movs	r3, #0
 8000e7c:	80fb      	strh	r3, [r7, #6]
 8000e7e:	e017      	b.n	8000eb0 <send_DHCP_DISCOVER+0x198>
 8000e80:	200001a0 	.word	0x200001a0
 8000e84:	2000019c 	.word	0x2000019c
 8000e88:	200001a4 	.word	0x200001a4
 8000e8c:	20000190 	.word	0x20000190
   	pDHCPMSG->OPT[k++] = HOST_NAME[i];
 8000e90:	88f9      	ldrh	r1, [r7, #6]
 8000e92:	4b80      	ldr	r3, [pc, #512]	; (8001094 <send_DHCP_DISCOVER+0x37c>)
 8000e94:	681a      	ldr	r2, [r3, #0]
 8000e96:	88bb      	ldrh	r3, [r7, #4]
 8000e98:	1c58      	adds	r0, r3, #1
 8000e9a:	80b8      	strh	r0, [r7, #4]
 8000e9c:	4618      	mov	r0, r3
 8000e9e:	4b7e      	ldr	r3, [pc, #504]	; (8001098 <send_DHCP_DISCOVER+0x380>)
 8000ea0:	5c59      	ldrb	r1, [r3, r1]
 8000ea2:	1813      	adds	r3, r2, r0
 8000ea4:	460a      	mov	r2, r1
 8000ea6:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	for(i = 0 ; HOST_NAME[i] != 0; i++)
 8000eaa:	88fb      	ldrh	r3, [r7, #6]
 8000eac:	3301      	adds	r3, #1
 8000eae:	80fb      	strh	r3, [r7, #6]
 8000eb0:	88fb      	ldrh	r3, [r7, #6]
 8000eb2:	4a79      	ldr	r2, [pc, #484]	; (8001098 <send_DHCP_DISCOVER+0x380>)
 8000eb4:	5cd3      	ldrb	r3, [r2, r3]
 8000eb6:	2b00      	cmp	r3, #0
 8000eb8:	d1ea      	bne.n	8000e90 <send_DHCP_DISCOVER+0x178>
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[3] >> 4); 
 8000eba:	4b78      	ldr	r3, [pc, #480]	; (800109c <send_DHCP_DISCOVER+0x384>)
 8000ebc:	78db      	ldrb	r3, [r3, #3]
 8000ebe:	091b      	lsrs	r3, r3, #4
 8000ec0:	b2da      	uxtb	r2, r3
 8000ec2:	4b74      	ldr	r3, [pc, #464]	; (8001094 <send_DHCP_DISCOVER+0x37c>)
 8000ec4:	681c      	ldr	r4, [r3, #0]
 8000ec6:	88bb      	ldrh	r3, [r7, #4]
 8000ec8:	1c59      	adds	r1, r3, #1
 8000eca:	80b9      	strh	r1, [r7, #4]
 8000ecc:	461d      	mov	r5, r3
 8000ece:	4610      	mov	r0, r2
 8000ed0:	f001 f9c6 	bl	8002260 <NibbleToHex>
 8000ed4:	4603      	mov	r3, r0
 8000ed6:	461a      	mov	r2, r3
 8000ed8:	1963      	adds	r3, r4, r5
 8000eda:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[3]);
 8000ede:	4b6f      	ldr	r3, [pc, #444]	; (800109c <send_DHCP_DISCOVER+0x384>)
 8000ee0:	78da      	ldrb	r2, [r3, #3]
 8000ee2:	4b6c      	ldr	r3, [pc, #432]	; (8001094 <send_DHCP_DISCOVER+0x37c>)
 8000ee4:	681c      	ldr	r4, [r3, #0]
 8000ee6:	88bb      	ldrh	r3, [r7, #4]
 8000ee8:	1c59      	adds	r1, r3, #1
 8000eea:	80b9      	strh	r1, [r7, #4]
 8000eec:	461d      	mov	r5, r3
 8000eee:	4610      	mov	r0, r2
 8000ef0:	f001 f9b6 	bl	8002260 <NibbleToHex>
 8000ef4:	4603      	mov	r3, r0
 8000ef6:	461a      	mov	r2, r3
 8000ef8:	1963      	adds	r3, r4, r5
 8000efa:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[4] >> 4); 
 8000efe:	4b67      	ldr	r3, [pc, #412]	; (800109c <send_DHCP_DISCOVER+0x384>)
 8000f00:	791b      	ldrb	r3, [r3, #4]
 8000f02:	091b      	lsrs	r3, r3, #4
 8000f04:	b2da      	uxtb	r2, r3
 8000f06:	4b63      	ldr	r3, [pc, #396]	; (8001094 <send_DHCP_DISCOVER+0x37c>)
 8000f08:	681c      	ldr	r4, [r3, #0]
 8000f0a:	88bb      	ldrh	r3, [r7, #4]
 8000f0c:	1c59      	adds	r1, r3, #1
 8000f0e:	80b9      	strh	r1, [r7, #4]
 8000f10:	461d      	mov	r5, r3
 8000f12:	4610      	mov	r0, r2
 8000f14:	f001 f9a4 	bl	8002260 <NibbleToHex>
 8000f18:	4603      	mov	r3, r0
 8000f1a:	461a      	mov	r2, r3
 8000f1c:	1963      	adds	r3, r4, r5
 8000f1e:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[4]);
 8000f22:	4b5e      	ldr	r3, [pc, #376]	; (800109c <send_DHCP_DISCOVER+0x384>)
 8000f24:	791a      	ldrb	r2, [r3, #4]
 8000f26:	4b5b      	ldr	r3, [pc, #364]	; (8001094 <send_DHCP_DISCOVER+0x37c>)
 8000f28:	681c      	ldr	r4, [r3, #0]
 8000f2a:	88bb      	ldrh	r3, [r7, #4]
 8000f2c:	1c59      	adds	r1, r3, #1
 8000f2e:	80b9      	strh	r1, [r7, #4]
 8000f30:	461d      	mov	r5, r3
 8000f32:	4610      	mov	r0, r2
 8000f34:	f001 f994 	bl	8002260 <NibbleToHex>
 8000f38:	4603      	mov	r3, r0
 8000f3a:	461a      	mov	r2, r3
 8000f3c:	1963      	adds	r3, r4, r5
 8000f3e:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[5] >> 4); 
 8000f42:	4b56      	ldr	r3, [pc, #344]	; (800109c <send_DHCP_DISCOVER+0x384>)
 8000f44:	795b      	ldrb	r3, [r3, #5]
 8000f46:	091b      	lsrs	r3, r3, #4
 8000f48:	b2da      	uxtb	r2, r3
 8000f4a:	4b52      	ldr	r3, [pc, #328]	; (8001094 <send_DHCP_DISCOVER+0x37c>)
 8000f4c:	681c      	ldr	r4, [r3, #0]
 8000f4e:	88bb      	ldrh	r3, [r7, #4]
 8000f50:	1c59      	adds	r1, r3, #1
 8000f52:	80b9      	strh	r1, [r7, #4]
 8000f54:	461d      	mov	r5, r3
 8000f56:	4610      	mov	r0, r2
 8000f58:	f001 f982 	bl	8002260 <NibbleToHex>
 8000f5c:	4603      	mov	r3, r0
 8000f5e:	461a      	mov	r2, r3
 8000f60:	1963      	adds	r3, r4, r5
 8000f62:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[5]);
 8000f66:	4b4d      	ldr	r3, [pc, #308]	; (800109c <send_DHCP_DISCOVER+0x384>)
 8000f68:	795a      	ldrb	r2, [r3, #5]
 8000f6a:	4b4a      	ldr	r3, [pc, #296]	; (8001094 <send_DHCP_DISCOVER+0x37c>)
 8000f6c:	681c      	ldr	r4, [r3, #0]
 8000f6e:	88bb      	ldrh	r3, [r7, #4]
 8000f70:	1c59      	adds	r1, r3, #1
 8000f72:	80b9      	strh	r1, [r7, #4]
 8000f74:	461d      	mov	r5, r3
 8000f76:	4610      	mov	r0, r2
 8000f78:	f001 f972 	bl	8002260 <NibbleToHex>
 8000f7c:	4603      	mov	r3, r0
 8000f7e:	461a      	mov	r2, r3
 8000f80:	1963      	adds	r3, r4, r5
 8000f82:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k - (i+6+1)] = i+6; // length of hostname
 8000f86:	88fb      	ldrh	r3, [r7, #6]
 8000f88:	b2d9      	uxtb	r1, r3
 8000f8a:	4b42      	ldr	r3, [pc, #264]	; (8001094 <send_DHCP_DISCOVER+0x37c>)
 8000f8c:	681a      	ldr	r2, [r3, #0]
 8000f8e:	88b8      	ldrh	r0, [r7, #4]
 8000f90:	88fb      	ldrh	r3, [r7, #6]
 8000f92:	3307      	adds	r3, #7
 8000f94:	1ac3      	subs	r3, r0, r3
 8000f96:	3106      	adds	r1, #6
 8000f98:	b2c9      	uxtb	r1, r1
 8000f9a:	4413      	add	r3, r2
 8000f9c:	460a      	mov	r2, r1
 8000f9e:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec

	pDHCPMSG->OPT[k++] = dhcpParamRequest;
 8000fa2:	4b3c      	ldr	r3, [pc, #240]	; (8001094 <send_DHCP_DISCOVER+0x37c>)
 8000fa4:	681a      	ldr	r2, [r3, #0]
 8000fa6:	88bb      	ldrh	r3, [r7, #4]
 8000fa8:	1c59      	adds	r1, r3, #1
 8000faa:	80b9      	strh	r1, [r7, #4]
 8000fac:	4413      	add	r3, r2
 8000fae:	2237      	movs	r2, #55	; 0x37
 8000fb0:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = 0x06;	// length of request
 8000fb4:	4b37      	ldr	r3, [pc, #220]	; (8001094 <send_DHCP_DISCOVER+0x37c>)
 8000fb6:	681a      	ldr	r2, [r3, #0]
 8000fb8:	88bb      	ldrh	r3, [r7, #4]
 8000fba:	1c59      	adds	r1, r3, #1
 8000fbc:	80b9      	strh	r1, [r7, #4]
 8000fbe:	4413      	add	r3, r2
 8000fc0:	2206      	movs	r2, #6
 8000fc2:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = subnetMask;
 8000fc6:	4b33      	ldr	r3, [pc, #204]	; (8001094 <send_DHCP_DISCOVER+0x37c>)
 8000fc8:	681a      	ldr	r2, [r3, #0]
 8000fca:	88bb      	ldrh	r3, [r7, #4]
 8000fcc:	1c59      	adds	r1, r3, #1
 8000fce:	80b9      	strh	r1, [r7, #4]
 8000fd0:	4413      	add	r3, r2
 8000fd2:	2201      	movs	r2, #1
 8000fd4:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = routersOnSubnet;
 8000fd8:	4b2e      	ldr	r3, [pc, #184]	; (8001094 <send_DHCP_DISCOVER+0x37c>)
 8000fda:	681a      	ldr	r2, [r3, #0]
 8000fdc:	88bb      	ldrh	r3, [r7, #4]
 8000fde:	1c59      	adds	r1, r3, #1
 8000fe0:	80b9      	strh	r1, [r7, #4]
 8000fe2:	4413      	add	r3, r2
 8000fe4:	2203      	movs	r2, #3
 8000fe6:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = dns;
 8000fea:	4b2a      	ldr	r3, [pc, #168]	; (8001094 <send_DHCP_DISCOVER+0x37c>)
 8000fec:	681a      	ldr	r2, [r3, #0]
 8000fee:	88bb      	ldrh	r3, [r7, #4]
 8000ff0:	1c59      	adds	r1, r3, #1
 8000ff2:	80b9      	strh	r1, [r7, #4]
 8000ff4:	4413      	add	r3, r2
 8000ff6:	2206      	movs	r2, #6
 8000ff8:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = domainName;
 8000ffc:	4b25      	ldr	r3, [pc, #148]	; (8001094 <send_DHCP_DISCOVER+0x37c>)
 8000ffe:	681a      	ldr	r2, [r3, #0]
 8001000:	88bb      	ldrh	r3, [r7, #4]
 8001002:	1c59      	adds	r1, r3, #1
 8001004:	80b9      	strh	r1, [r7, #4]
 8001006:	4413      	add	r3, r2
 8001008:	220f      	movs	r2, #15
 800100a:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = dhcpT1value;
 800100e:	4b21      	ldr	r3, [pc, #132]	; (8001094 <send_DHCP_DISCOVER+0x37c>)
 8001010:	681a      	ldr	r2, [r3, #0]
 8001012:	88bb      	ldrh	r3, [r7, #4]
 8001014:	1c59      	adds	r1, r3, #1
 8001016:	80b9      	strh	r1, [r7, #4]
 8001018:	4413      	add	r3, r2
 800101a:	223a      	movs	r2, #58	; 0x3a
 800101c:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = dhcpT2value;
 8001020:	4b1c      	ldr	r3, [pc, #112]	; (8001094 <send_DHCP_DISCOVER+0x37c>)
 8001022:	681a      	ldr	r2, [r3, #0]
 8001024:	88bb      	ldrh	r3, [r7, #4]
 8001026:	1c59      	adds	r1, r3, #1
 8001028:	80b9      	strh	r1, [r7, #4]
 800102a:	4413      	add	r3, r2
 800102c:	223b      	movs	r2, #59	; 0x3b
 800102e:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = endOption;
 8001032:	4b18      	ldr	r3, [pc, #96]	; (8001094 <send_DHCP_DISCOVER+0x37c>)
 8001034:	681a      	ldr	r2, [r3, #0]
 8001036:	88bb      	ldrh	r3, [r7, #4]
 8001038:	1c59      	adds	r1, r3, #1
 800103a:	80b9      	strh	r1, [r7, #4]
 800103c:	4413      	add	r3, r2
 800103e:	22ff      	movs	r2, #255	; 0xff
 8001040:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec

	for (i = k; i < OPT_SIZE; i++) pDHCPMSG->OPT[i] = 0;
 8001044:	88bb      	ldrh	r3, [r7, #4]
 8001046:	80fb      	strh	r3, [r7, #6]
 8001048:	e009      	b.n	800105e <send_DHCP_DISCOVER+0x346>
 800104a:	4b12      	ldr	r3, [pc, #72]	; (8001094 <send_DHCP_DISCOVER+0x37c>)
 800104c:	681a      	ldr	r2, [r3, #0]
 800104e:	88fb      	ldrh	r3, [r7, #6]
 8001050:	4413      	add	r3, r2
 8001052:	2200      	movs	r2, #0
 8001054:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
 8001058:	88fb      	ldrh	r3, [r7, #6]
 800105a:	3301      	adds	r3, #1
 800105c:	80fb      	strh	r3, [r7, #6]
 800105e:	88fb      	ldrh	r3, [r7, #6]
 8001060:	f5b3 7f9c 	cmp.w	r3, #312	; 0x138
 8001064:	d3f1      	bcc.n	800104a <send_DHCP_DISCOVER+0x332>

	// send broadcasting packet
	ip[0] = 255;
 8001066:	23ff      	movs	r3, #255	; 0xff
 8001068:	703b      	strb	r3, [r7, #0]
	ip[1] = 255;
 800106a:	23ff      	movs	r3, #255	; 0xff
 800106c:	707b      	strb	r3, [r7, #1]
	ip[2] = 255;
 800106e:	23ff      	movs	r3, #255	; 0xff
 8001070:	70bb      	strb	r3, [r7, #2]
	ip[3] = 255;
 8001072:	23ff      	movs	r3, #255	; 0xff
 8001074:	70fb      	strb	r3, [r7, #3]

#ifdef _DHCP_DEBUG_
	printf("> Send DHCP_DISCOVER\r\n");
#endif

	sendto(DHCP_SOCKET, (uint8_t *)pDHCPMSG, RIP_MSG_SIZE, ip, DHCP_SERVER_PORT);
 8001076:	4b0a      	ldr	r3, [pc, #40]	; (80010a0 <send_DHCP_DISCOVER+0x388>)
 8001078:	7818      	ldrb	r0, [r3, #0]
 800107a:	4b06      	ldr	r3, [pc, #24]	; (8001094 <send_DHCP_DISCOVER+0x37c>)
 800107c:	6819      	ldr	r1, [r3, #0]
 800107e:	463b      	mov	r3, r7
 8001080:	2243      	movs	r2, #67	; 0x43
 8001082:	9200      	str	r2, [sp, #0]
 8001084:	f44f 7209 	mov.w	r2, #548	; 0x224
 8001088:	f003 fa3e 	bl	8004508 <sendto>
}
 800108c:	bf00      	nop
 800108e:	3708      	adds	r7, #8
 8001090:	46bd      	mov	sp, r7
 8001092:	bdb0      	pop	{r4, r5, r7, pc}
 8001094:	200001a4 	.word	0x200001a4
 8001098:	20000008 	.word	0x20000008
 800109c:	20000190 	.word	0x20000190
 80010a0:	200001a8 	.word	0x200001a8

080010a4 <send_DHCP_REQUEST>:

/* SEND DHCP REQUEST */
void send_DHCP_REQUEST(void)
{
 80010a4:	b5b0      	push	{r4, r5, r7, lr}
 80010a6:	b086      	sub	sp, #24
 80010a8:	af02      	add	r7, sp, #8
	int i;
	uint8_t ip[4];
	uint16_t k = 0;
 80010aa:	2300      	movs	r3, #0
 80010ac:	817b      	strh	r3, [r7, #10]

   makeDHCPMSG();
 80010ae:	f7ff fd3d 	bl	8000b2c <makeDHCPMSG>

   if(dhcp_state == STATE_DHCP_LEASED || dhcp_state == STATE_DHCP_REREQUEST)
 80010b2:	4b1b      	ldr	r3, [pc, #108]	; (8001120 <send_DHCP_REQUEST+0x7c>)
 80010b4:	f993 3000 	ldrsb.w	r3, [r3]
 80010b8:	2b03      	cmp	r3, #3
 80010ba:	d004      	beq.n	80010c6 <send_DHCP_REQUEST+0x22>
 80010bc:	4b18      	ldr	r3, [pc, #96]	; (8001120 <send_DHCP_REQUEST+0x7c>)
 80010be:	f993 3000 	ldrsb.w	r3, [r3]
 80010c2:	2b04      	cmp	r3, #4
 80010c4:	d134      	bne.n	8001130 <send_DHCP_REQUEST+0x8c>
   {
   	*((uint8_t*)(&pDHCPMSG->flags))   = ((DHCP_FLAGSUNICAST & 0xFF00)>> 8);
 80010c6:	4b17      	ldr	r3, [pc, #92]	; (8001124 <send_DHCP_REQUEST+0x80>)
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	330a      	adds	r3, #10
 80010cc:	2200      	movs	r2, #0
 80010ce:	701a      	strb	r2, [r3, #0]
   	*((uint8_t*)(&pDHCPMSG->flags)+1) = (DHCP_FLAGSUNICAST & 0x00FF);
 80010d0:	4b14      	ldr	r3, [pc, #80]	; (8001124 <send_DHCP_REQUEST+0x80>)
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	330a      	adds	r3, #10
 80010d6:	3301      	adds	r3, #1
 80010d8:	2200      	movs	r2, #0
 80010da:	701a      	strb	r2, [r3, #0]
   	pDHCPMSG->ciaddr[0] = DHCP_allocated_ip[0];
 80010dc:	4b11      	ldr	r3, [pc, #68]	; (8001124 <send_DHCP_REQUEST+0x80>)
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	4a11      	ldr	r2, [pc, #68]	; (8001128 <send_DHCP_REQUEST+0x84>)
 80010e2:	7812      	ldrb	r2, [r2, #0]
 80010e4:	731a      	strb	r2, [r3, #12]
   	pDHCPMSG->ciaddr[1] = DHCP_allocated_ip[1];
 80010e6:	4b0f      	ldr	r3, [pc, #60]	; (8001124 <send_DHCP_REQUEST+0x80>)
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	4a0f      	ldr	r2, [pc, #60]	; (8001128 <send_DHCP_REQUEST+0x84>)
 80010ec:	7852      	ldrb	r2, [r2, #1]
 80010ee:	735a      	strb	r2, [r3, #13]
   	pDHCPMSG->ciaddr[2] = DHCP_allocated_ip[2];
 80010f0:	4b0c      	ldr	r3, [pc, #48]	; (8001124 <send_DHCP_REQUEST+0x80>)
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	4a0c      	ldr	r2, [pc, #48]	; (8001128 <send_DHCP_REQUEST+0x84>)
 80010f6:	7892      	ldrb	r2, [r2, #2]
 80010f8:	739a      	strb	r2, [r3, #14]
   	pDHCPMSG->ciaddr[3] = DHCP_allocated_ip[3];
 80010fa:	4b0a      	ldr	r3, [pc, #40]	; (8001124 <send_DHCP_REQUEST+0x80>)
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	4a0a      	ldr	r2, [pc, #40]	; (8001128 <send_DHCP_REQUEST+0x84>)
 8001100:	78d2      	ldrb	r2, [r2, #3]
 8001102:	73da      	strb	r2, [r3, #15]
   	ip[0] = DHCP_SIP[0];
 8001104:	4b09      	ldr	r3, [pc, #36]	; (800112c <send_DHCP_REQUEST+0x88>)
 8001106:	781b      	ldrb	r3, [r3, #0]
 8001108:	713b      	strb	r3, [r7, #4]
   	ip[1] = DHCP_SIP[1];
 800110a:	4b08      	ldr	r3, [pc, #32]	; (800112c <send_DHCP_REQUEST+0x88>)
 800110c:	785b      	ldrb	r3, [r3, #1]
 800110e:	717b      	strb	r3, [r7, #5]
   	ip[2] = DHCP_SIP[2];
 8001110:	4b06      	ldr	r3, [pc, #24]	; (800112c <send_DHCP_REQUEST+0x88>)
 8001112:	789b      	ldrb	r3, [r3, #2]
 8001114:	71bb      	strb	r3, [r7, #6]
   	ip[3] = DHCP_SIP[3];   	   	   	
 8001116:	4b05      	ldr	r3, [pc, #20]	; (800112c <send_DHCP_REQUEST+0x88>)
 8001118:	78db      	ldrb	r3, [r3, #3]
 800111a:	71fb      	strb	r3, [r7, #7]
 800111c:	e010      	b.n	8001140 <send_DHCP_REQUEST+0x9c>
 800111e:	bf00      	nop
 8001120:	200000f0 	.word	0x200000f0
 8001124:	200001a4 	.word	0x200001a4
 8001128:	200000e0 	.word	0x200000e0
 800112c:	200001a0 	.word	0x200001a0
   }
   else
   {
   	ip[0] = 255;
 8001130:	23ff      	movs	r3, #255	; 0xff
 8001132:	713b      	strb	r3, [r7, #4]
   	ip[1] = 255;
 8001134:	23ff      	movs	r3, #255	; 0xff
 8001136:	717b      	strb	r3, [r7, #5]
   	ip[2] = 255;
 8001138:	23ff      	movs	r3, #255	; 0xff
 800113a:	71bb      	strb	r3, [r7, #6]
   	ip[3] = 255;   	   	   	
 800113c:	23ff      	movs	r3, #255	; 0xff
 800113e:	71fb      	strb	r3, [r7, #7]
   }
   
   k = 4;      // because MAGIC_COOKIE already made by makeDHCPMSG()
 8001140:	2304      	movs	r3, #4
 8001142:	817b      	strh	r3, [r7, #10]
	
	// Option Request Param.
	pDHCPMSG->OPT[k++] = dhcpMessageType;
 8001144:	4b8d      	ldr	r3, [pc, #564]	; (800137c <send_DHCP_REQUEST+0x2d8>)
 8001146:	681a      	ldr	r2, [r3, #0]
 8001148:	897b      	ldrh	r3, [r7, #10]
 800114a:	1c59      	adds	r1, r3, #1
 800114c:	8179      	strh	r1, [r7, #10]
 800114e:	4413      	add	r3, r2
 8001150:	2235      	movs	r2, #53	; 0x35
 8001152:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = 0x01;
 8001156:	4b89      	ldr	r3, [pc, #548]	; (800137c <send_DHCP_REQUEST+0x2d8>)
 8001158:	681a      	ldr	r2, [r3, #0]
 800115a:	897b      	ldrh	r3, [r7, #10]
 800115c:	1c59      	adds	r1, r3, #1
 800115e:	8179      	strh	r1, [r7, #10]
 8001160:	4413      	add	r3, r2
 8001162:	2201      	movs	r2, #1
 8001164:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_REQUEST;
 8001168:	4b84      	ldr	r3, [pc, #528]	; (800137c <send_DHCP_REQUEST+0x2d8>)
 800116a:	681a      	ldr	r2, [r3, #0]
 800116c:	897b      	ldrh	r3, [r7, #10]
 800116e:	1c59      	adds	r1, r3, #1
 8001170:	8179      	strh	r1, [r7, #10]
 8001172:	4413      	add	r3, r2
 8001174:	2203      	movs	r2, #3
 8001176:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec

	pDHCPMSG->OPT[k++] = dhcpClientIdentifier;
 800117a:	4b80      	ldr	r3, [pc, #512]	; (800137c <send_DHCP_REQUEST+0x2d8>)
 800117c:	681a      	ldr	r2, [r3, #0]
 800117e:	897b      	ldrh	r3, [r7, #10]
 8001180:	1c59      	adds	r1, r3, #1
 8001182:	8179      	strh	r1, [r7, #10]
 8001184:	4413      	add	r3, r2
 8001186:	223d      	movs	r2, #61	; 0x3d
 8001188:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = 0x07;
 800118c:	4b7b      	ldr	r3, [pc, #492]	; (800137c <send_DHCP_REQUEST+0x2d8>)
 800118e:	681a      	ldr	r2, [r3, #0]
 8001190:	897b      	ldrh	r3, [r7, #10]
 8001192:	1c59      	adds	r1, r3, #1
 8001194:	8179      	strh	r1, [r7, #10]
 8001196:	4413      	add	r3, r2
 8001198:	2207      	movs	r2, #7
 800119a:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = 0x01;
 800119e:	4b77      	ldr	r3, [pc, #476]	; (800137c <send_DHCP_REQUEST+0x2d8>)
 80011a0:	681a      	ldr	r2, [r3, #0]
 80011a2:	897b      	ldrh	r3, [r7, #10]
 80011a4:	1c59      	adds	r1, r3, #1
 80011a6:	8179      	strh	r1, [r7, #10]
 80011a8:	4413      	add	r3, r2
 80011aa:	2201      	movs	r2, #1
 80011ac:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[0];
 80011b0:	4b72      	ldr	r3, [pc, #456]	; (800137c <send_DHCP_REQUEST+0x2d8>)
 80011b2:	681a      	ldr	r2, [r3, #0]
 80011b4:	897b      	ldrh	r3, [r7, #10]
 80011b6:	1c59      	adds	r1, r3, #1
 80011b8:	8179      	strh	r1, [r7, #10]
 80011ba:	4618      	mov	r0, r3
 80011bc:	4b70      	ldr	r3, [pc, #448]	; (8001380 <send_DHCP_REQUEST+0x2dc>)
 80011be:	7819      	ldrb	r1, [r3, #0]
 80011c0:	1813      	adds	r3, r2, r0
 80011c2:	460a      	mov	r2, r1
 80011c4:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[1];
 80011c8:	4b6c      	ldr	r3, [pc, #432]	; (800137c <send_DHCP_REQUEST+0x2d8>)
 80011ca:	681a      	ldr	r2, [r3, #0]
 80011cc:	897b      	ldrh	r3, [r7, #10]
 80011ce:	1c59      	adds	r1, r3, #1
 80011d0:	8179      	strh	r1, [r7, #10]
 80011d2:	4618      	mov	r0, r3
 80011d4:	4b6a      	ldr	r3, [pc, #424]	; (8001380 <send_DHCP_REQUEST+0x2dc>)
 80011d6:	7859      	ldrb	r1, [r3, #1]
 80011d8:	1813      	adds	r3, r2, r0
 80011da:	460a      	mov	r2, r1
 80011dc:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[2];
 80011e0:	4b66      	ldr	r3, [pc, #408]	; (800137c <send_DHCP_REQUEST+0x2d8>)
 80011e2:	681a      	ldr	r2, [r3, #0]
 80011e4:	897b      	ldrh	r3, [r7, #10]
 80011e6:	1c59      	adds	r1, r3, #1
 80011e8:	8179      	strh	r1, [r7, #10]
 80011ea:	4618      	mov	r0, r3
 80011ec:	4b64      	ldr	r3, [pc, #400]	; (8001380 <send_DHCP_REQUEST+0x2dc>)
 80011ee:	7899      	ldrb	r1, [r3, #2]
 80011f0:	1813      	adds	r3, r2, r0
 80011f2:	460a      	mov	r2, r1
 80011f4:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[3];
 80011f8:	4b60      	ldr	r3, [pc, #384]	; (800137c <send_DHCP_REQUEST+0x2d8>)
 80011fa:	681a      	ldr	r2, [r3, #0]
 80011fc:	897b      	ldrh	r3, [r7, #10]
 80011fe:	1c59      	adds	r1, r3, #1
 8001200:	8179      	strh	r1, [r7, #10]
 8001202:	4618      	mov	r0, r3
 8001204:	4b5e      	ldr	r3, [pc, #376]	; (8001380 <send_DHCP_REQUEST+0x2dc>)
 8001206:	78d9      	ldrb	r1, [r3, #3]
 8001208:	1813      	adds	r3, r2, r0
 800120a:	460a      	mov	r2, r1
 800120c:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[4];
 8001210:	4b5a      	ldr	r3, [pc, #360]	; (800137c <send_DHCP_REQUEST+0x2d8>)
 8001212:	681a      	ldr	r2, [r3, #0]
 8001214:	897b      	ldrh	r3, [r7, #10]
 8001216:	1c59      	adds	r1, r3, #1
 8001218:	8179      	strh	r1, [r7, #10]
 800121a:	4618      	mov	r0, r3
 800121c:	4b58      	ldr	r3, [pc, #352]	; (8001380 <send_DHCP_REQUEST+0x2dc>)
 800121e:	7919      	ldrb	r1, [r3, #4]
 8001220:	1813      	adds	r3, r2, r0
 8001222:	460a      	mov	r2, r1
 8001224:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[5];
 8001228:	4b54      	ldr	r3, [pc, #336]	; (800137c <send_DHCP_REQUEST+0x2d8>)
 800122a:	681a      	ldr	r2, [r3, #0]
 800122c:	897b      	ldrh	r3, [r7, #10]
 800122e:	1c59      	adds	r1, r3, #1
 8001230:	8179      	strh	r1, [r7, #10]
 8001232:	4618      	mov	r0, r3
 8001234:	4b52      	ldr	r3, [pc, #328]	; (8001380 <send_DHCP_REQUEST+0x2dc>)
 8001236:	7959      	ldrb	r1, [r3, #5]
 8001238:	1813      	adds	r3, r2, r0
 800123a:	460a      	mov	r2, r1
 800123c:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec

   if(ip[3] == 255)  // if(dchp_state == STATE_DHCP_LEASED || dchp_state == DHCP_REREQUEST_STATE)
 8001240:	79fb      	ldrb	r3, [r7, #7]
 8001242:	2bff      	cmp	r3, #255	; 0xff
 8001244:	f040 8084 	bne.w	8001350 <send_DHCP_REQUEST+0x2ac>
   {
		pDHCPMSG->OPT[k++] = dhcpRequestedIPaddr;
 8001248:	4b4c      	ldr	r3, [pc, #304]	; (800137c <send_DHCP_REQUEST+0x2d8>)
 800124a:	681a      	ldr	r2, [r3, #0]
 800124c:	897b      	ldrh	r3, [r7, #10]
 800124e:	1c59      	adds	r1, r3, #1
 8001250:	8179      	strh	r1, [r7, #10]
 8001252:	4413      	add	r3, r2
 8001254:	2232      	movs	r2, #50	; 0x32
 8001256:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
		pDHCPMSG->OPT[k++] = 0x04;
 800125a:	4b48      	ldr	r3, [pc, #288]	; (800137c <send_DHCP_REQUEST+0x2d8>)
 800125c:	681a      	ldr	r2, [r3, #0]
 800125e:	897b      	ldrh	r3, [r7, #10]
 8001260:	1c59      	adds	r1, r3, #1
 8001262:	8179      	strh	r1, [r7, #10]
 8001264:	4413      	add	r3, r2
 8001266:	2204      	movs	r2, #4
 8001268:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
		pDHCPMSG->OPT[k++] = DHCP_allocated_ip[0];
 800126c:	4b43      	ldr	r3, [pc, #268]	; (800137c <send_DHCP_REQUEST+0x2d8>)
 800126e:	681a      	ldr	r2, [r3, #0]
 8001270:	897b      	ldrh	r3, [r7, #10]
 8001272:	1c59      	adds	r1, r3, #1
 8001274:	8179      	strh	r1, [r7, #10]
 8001276:	4618      	mov	r0, r3
 8001278:	4b42      	ldr	r3, [pc, #264]	; (8001384 <send_DHCP_REQUEST+0x2e0>)
 800127a:	7819      	ldrb	r1, [r3, #0]
 800127c:	1813      	adds	r3, r2, r0
 800127e:	460a      	mov	r2, r1
 8001280:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
		pDHCPMSG->OPT[k++] = DHCP_allocated_ip[1];
 8001284:	4b3d      	ldr	r3, [pc, #244]	; (800137c <send_DHCP_REQUEST+0x2d8>)
 8001286:	681a      	ldr	r2, [r3, #0]
 8001288:	897b      	ldrh	r3, [r7, #10]
 800128a:	1c59      	adds	r1, r3, #1
 800128c:	8179      	strh	r1, [r7, #10]
 800128e:	4618      	mov	r0, r3
 8001290:	4b3c      	ldr	r3, [pc, #240]	; (8001384 <send_DHCP_REQUEST+0x2e0>)
 8001292:	7859      	ldrb	r1, [r3, #1]
 8001294:	1813      	adds	r3, r2, r0
 8001296:	460a      	mov	r2, r1
 8001298:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
		pDHCPMSG->OPT[k++] = DHCP_allocated_ip[2];
 800129c:	4b37      	ldr	r3, [pc, #220]	; (800137c <send_DHCP_REQUEST+0x2d8>)
 800129e:	681a      	ldr	r2, [r3, #0]
 80012a0:	897b      	ldrh	r3, [r7, #10]
 80012a2:	1c59      	adds	r1, r3, #1
 80012a4:	8179      	strh	r1, [r7, #10]
 80012a6:	4618      	mov	r0, r3
 80012a8:	4b36      	ldr	r3, [pc, #216]	; (8001384 <send_DHCP_REQUEST+0x2e0>)
 80012aa:	7899      	ldrb	r1, [r3, #2]
 80012ac:	1813      	adds	r3, r2, r0
 80012ae:	460a      	mov	r2, r1
 80012b0:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
		pDHCPMSG->OPT[k++] = DHCP_allocated_ip[3];
 80012b4:	4b31      	ldr	r3, [pc, #196]	; (800137c <send_DHCP_REQUEST+0x2d8>)
 80012b6:	681a      	ldr	r2, [r3, #0]
 80012b8:	897b      	ldrh	r3, [r7, #10]
 80012ba:	1c59      	adds	r1, r3, #1
 80012bc:	8179      	strh	r1, [r7, #10]
 80012be:	4618      	mov	r0, r3
 80012c0:	4b30      	ldr	r3, [pc, #192]	; (8001384 <send_DHCP_REQUEST+0x2e0>)
 80012c2:	78d9      	ldrb	r1, [r3, #3]
 80012c4:	1813      	adds	r3, r2, r0
 80012c6:	460a      	mov	r2, r1
 80012c8:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	
		pDHCPMSG->OPT[k++] = dhcpServerIdentifier;
 80012cc:	4b2b      	ldr	r3, [pc, #172]	; (800137c <send_DHCP_REQUEST+0x2d8>)
 80012ce:	681a      	ldr	r2, [r3, #0]
 80012d0:	897b      	ldrh	r3, [r7, #10]
 80012d2:	1c59      	adds	r1, r3, #1
 80012d4:	8179      	strh	r1, [r7, #10]
 80012d6:	4413      	add	r3, r2
 80012d8:	2236      	movs	r2, #54	; 0x36
 80012da:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
		pDHCPMSG->OPT[k++] = 0x04;
 80012de:	4b27      	ldr	r3, [pc, #156]	; (800137c <send_DHCP_REQUEST+0x2d8>)
 80012e0:	681a      	ldr	r2, [r3, #0]
 80012e2:	897b      	ldrh	r3, [r7, #10]
 80012e4:	1c59      	adds	r1, r3, #1
 80012e6:	8179      	strh	r1, [r7, #10]
 80012e8:	4413      	add	r3, r2
 80012ea:	2204      	movs	r2, #4
 80012ec:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
		pDHCPMSG->OPT[k++] = DHCP_SIP[0];
 80012f0:	4b22      	ldr	r3, [pc, #136]	; (800137c <send_DHCP_REQUEST+0x2d8>)
 80012f2:	681a      	ldr	r2, [r3, #0]
 80012f4:	897b      	ldrh	r3, [r7, #10]
 80012f6:	1c59      	adds	r1, r3, #1
 80012f8:	8179      	strh	r1, [r7, #10]
 80012fa:	4618      	mov	r0, r3
 80012fc:	4b22      	ldr	r3, [pc, #136]	; (8001388 <send_DHCP_REQUEST+0x2e4>)
 80012fe:	7819      	ldrb	r1, [r3, #0]
 8001300:	1813      	adds	r3, r2, r0
 8001302:	460a      	mov	r2, r1
 8001304:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
		pDHCPMSG->OPT[k++] = DHCP_SIP[1];
 8001308:	4b1c      	ldr	r3, [pc, #112]	; (800137c <send_DHCP_REQUEST+0x2d8>)
 800130a:	681a      	ldr	r2, [r3, #0]
 800130c:	897b      	ldrh	r3, [r7, #10]
 800130e:	1c59      	adds	r1, r3, #1
 8001310:	8179      	strh	r1, [r7, #10]
 8001312:	4618      	mov	r0, r3
 8001314:	4b1c      	ldr	r3, [pc, #112]	; (8001388 <send_DHCP_REQUEST+0x2e4>)
 8001316:	7859      	ldrb	r1, [r3, #1]
 8001318:	1813      	adds	r3, r2, r0
 800131a:	460a      	mov	r2, r1
 800131c:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
		pDHCPMSG->OPT[k++] = DHCP_SIP[2];
 8001320:	4b16      	ldr	r3, [pc, #88]	; (800137c <send_DHCP_REQUEST+0x2d8>)
 8001322:	681a      	ldr	r2, [r3, #0]
 8001324:	897b      	ldrh	r3, [r7, #10]
 8001326:	1c59      	adds	r1, r3, #1
 8001328:	8179      	strh	r1, [r7, #10]
 800132a:	4618      	mov	r0, r3
 800132c:	4b16      	ldr	r3, [pc, #88]	; (8001388 <send_DHCP_REQUEST+0x2e4>)
 800132e:	7899      	ldrb	r1, [r3, #2]
 8001330:	1813      	adds	r3, r2, r0
 8001332:	460a      	mov	r2, r1
 8001334:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
		pDHCPMSG->OPT[k++] = DHCP_SIP[3];
 8001338:	4b10      	ldr	r3, [pc, #64]	; (800137c <send_DHCP_REQUEST+0x2d8>)
 800133a:	681a      	ldr	r2, [r3, #0]
 800133c:	897b      	ldrh	r3, [r7, #10]
 800133e:	1c59      	adds	r1, r3, #1
 8001340:	8179      	strh	r1, [r7, #10]
 8001342:	4618      	mov	r0, r3
 8001344:	4b10      	ldr	r3, [pc, #64]	; (8001388 <send_DHCP_REQUEST+0x2e4>)
 8001346:	78d9      	ldrb	r1, [r3, #3]
 8001348:	1813      	adds	r3, r2, r0
 800134a:	460a      	mov	r2, r1
 800134c:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	}

	// host name
	pDHCPMSG->OPT[k++] = hostName;
 8001350:	4b0a      	ldr	r3, [pc, #40]	; (800137c <send_DHCP_REQUEST+0x2d8>)
 8001352:	681a      	ldr	r2, [r3, #0]
 8001354:	897b      	ldrh	r3, [r7, #10]
 8001356:	1c59      	adds	r1, r3, #1
 8001358:	8179      	strh	r1, [r7, #10]
 800135a:	4413      	add	r3, r2
 800135c:	220c      	movs	r2, #12
 800135e:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = 0; // length of hostname
 8001362:	4b06      	ldr	r3, [pc, #24]	; (800137c <send_DHCP_REQUEST+0x2d8>)
 8001364:	681a      	ldr	r2, [r3, #0]
 8001366:	897b      	ldrh	r3, [r7, #10]
 8001368:	1c59      	adds	r1, r3, #1
 800136a:	8179      	strh	r1, [r7, #10]
 800136c:	4413      	add	r3, r2
 800136e:	2200      	movs	r2, #0
 8001370:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	for(i = 0 ; HOST_NAME[i] != 0; i++)
 8001374:	2300      	movs	r3, #0
 8001376:	60fb      	str	r3, [r7, #12]
 8001378:	e019      	b.n	80013ae <send_DHCP_REQUEST+0x30a>
 800137a:	bf00      	nop
 800137c:	200001a4 	.word	0x200001a4
 8001380:	20000190 	.word	0x20000190
 8001384:	200000e0 	.word	0x200000e0
 8001388:	200001a0 	.word	0x200001a0
   	pDHCPMSG->OPT[k++] = HOST_NAME[i];
 800138c:	4b86      	ldr	r3, [pc, #536]	; (80015a8 <send_DHCP_REQUEST+0x504>)
 800138e:	681a      	ldr	r2, [r3, #0]
 8001390:	897b      	ldrh	r3, [r7, #10]
 8001392:	1c59      	adds	r1, r3, #1
 8001394:	8179      	strh	r1, [r7, #10]
 8001396:	4618      	mov	r0, r3
 8001398:	4984      	ldr	r1, [pc, #528]	; (80015ac <send_DHCP_REQUEST+0x508>)
 800139a:	68fb      	ldr	r3, [r7, #12]
 800139c:	440b      	add	r3, r1
 800139e:	7819      	ldrb	r1, [r3, #0]
 80013a0:	1813      	adds	r3, r2, r0
 80013a2:	460a      	mov	r2, r1
 80013a4:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	for(i = 0 ; HOST_NAME[i] != 0; i++)
 80013a8:	68fb      	ldr	r3, [r7, #12]
 80013aa:	3301      	adds	r3, #1
 80013ac:	60fb      	str	r3, [r7, #12]
 80013ae:	4a7f      	ldr	r2, [pc, #508]	; (80015ac <send_DHCP_REQUEST+0x508>)
 80013b0:	68fb      	ldr	r3, [r7, #12]
 80013b2:	4413      	add	r3, r2
 80013b4:	781b      	ldrb	r3, [r3, #0]
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d1e8      	bne.n	800138c <send_DHCP_REQUEST+0x2e8>
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[3] >> 4); 
 80013ba:	4b7d      	ldr	r3, [pc, #500]	; (80015b0 <send_DHCP_REQUEST+0x50c>)
 80013bc:	78db      	ldrb	r3, [r3, #3]
 80013be:	091b      	lsrs	r3, r3, #4
 80013c0:	b2da      	uxtb	r2, r3
 80013c2:	4b79      	ldr	r3, [pc, #484]	; (80015a8 <send_DHCP_REQUEST+0x504>)
 80013c4:	681c      	ldr	r4, [r3, #0]
 80013c6:	897b      	ldrh	r3, [r7, #10]
 80013c8:	1c59      	adds	r1, r3, #1
 80013ca:	8179      	strh	r1, [r7, #10]
 80013cc:	461d      	mov	r5, r3
 80013ce:	4610      	mov	r0, r2
 80013d0:	f000 ff46 	bl	8002260 <NibbleToHex>
 80013d4:	4603      	mov	r3, r0
 80013d6:	461a      	mov	r2, r3
 80013d8:	1963      	adds	r3, r4, r5
 80013da:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[3]);
 80013de:	4b74      	ldr	r3, [pc, #464]	; (80015b0 <send_DHCP_REQUEST+0x50c>)
 80013e0:	78da      	ldrb	r2, [r3, #3]
 80013e2:	4b71      	ldr	r3, [pc, #452]	; (80015a8 <send_DHCP_REQUEST+0x504>)
 80013e4:	681c      	ldr	r4, [r3, #0]
 80013e6:	897b      	ldrh	r3, [r7, #10]
 80013e8:	1c59      	adds	r1, r3, #1
 80013ea:	8179      	strh	r1, [r7, #10]
 80013ec:	461d      	mov	r5, r3
 80013ee:	4610      	mov	r0, r2
 80013f0:	f000 ff36 	bl	8002260 <NibbleToHex>
 80013f4:	4603      	mov	r3, r0
 80013f6:	461a      	mov	r2, r3
 80013f8:	1963      	adds	r3, r4, r5
 80013fa:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[4] >> 4); 
 80013fe:	4b6c      	ldr	r3, [pc, #432]	; (80015b0 <send_DHCP_REQUEST+0x50c>)
 8001400:	791b      	ldrb	r3, [r3, #4]
 8001402:	091b      	lsrs	r3, r3, #4
 8001404:	b2da      	uxtb	r2, r3
 8001406:	4b68      	ldr	r3, [pc, #416]	; (80015a8 <send_DHCP_REQUEST+0x504>)
 8001408:	681c      	ldr	r4, [r3, #0]
 800140a:	897b      	ldrh	r3, [r7, #10]
 800140c:	1c59      	adds	r1, r3, #1
 800140e:	8179      	strh	r1, [r7, #10]
 8001410:	461d      	mov	r5, r3
 8001412:	4610      	mov	r0, r2
 8001414:	f000 ff24 	bl	8002260 <NibbleToHex>
 8001418:	4603      	mov	r3, r0
 800141a:	461a      	mov	r2, r3
 800141c:	1963      	adds	r3, r4, r5
 800141e:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[4]);
 8001422:	4b63      	ldr	r3, [pc, #396]	; (80015b0 <send_DHCP_REQUEST+0x50c>)
 8001424:	791a      	ldrb	r2, [r3, #4]
 8001426:	4b60      	ldr	r3, [pc, #384]	; (80015a8 <send_DHCP_REQUEST+0x504>)
 8001428:	681c      	ldr	r4, [r3, #0]
 800142a:	897b      	ldrh	r3, [r7, #10]
 800142c:	1c59      	adds	r1, r3, #1
 800142e:	8179      	strh	r1, [r7, #10]
 8001430:	461d      	mov	r5, r3
 8001432:	4610      	mov	r0, r2
 8001434:	f000 ff14 	bl	8002260 <NibbleToHex>
 8001438:	4603      	mov	r3, r0
 800143a:	461a      	mov	r2, r3
 800143c:	1963      	adds	r3, r4, r5
 800143e:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[5] >> 4); 
 8001442:	4b5b      	ldr	r3, [pc, #364]	; (80015b0 <send_DHCP_REQUEST+0x50c>)
 8001444:	795b      	ldrb	r3, [r3, #5]
 8001446:	091b      	lsrs	r3, r3, #4
 8001448:	b2da      	uxtb	r2, r3
 800144a:	4b57      	ldr	r3, [pc, #348]	; (80015a8 <send_DHCP_REQUEST+0x504>)
 800144c:	681c      	ldr	r4, [r3, #0]
 800144e:	897b      	ldrh	r3, [r7, #10]
 8001450:	1c59      	adds	r1, r3, #1
 8001452:	8179      	strh	r1, [r7, #10]
 8001454:	461d      	mov	r5, r3
 8001456:	4610      	mov	r0, r2
 8001458:	f000 ff02 	bl	8002260 <NibbleToHex>
 800145c:	4603      	mov	r3, r0
 800145e:	461a      	mov	r2, r3
 8001460:	1963      	adds	r3, r4, r5
 8001462:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[5]);
 8001466:	4b52      	ldr	r3, [pc, #328]	; (80015b0 <send_DHCP_REQUEST+0x50c>)
 8001468:	795a      	ldrb	r2, [r3, #5]
 800146a:	4b4f      	ldr	r3, [pc, #316]	; (80015a8 <send_DHCP_REQUEST+0x504>)
 800146c:	681c      	ldr	r4, [r3, #0]
 800146e:	897b      	ldrh	r3, [r7, #10]
 8001470:	1c59      	adds	r1, r3, #1
 8001472:	8179      	strh	r1, [r7, #10]
 8001474:	461d      	mov	r5, r3
 8001476:	4610      	mov	r0, r2
 8001478:	f000 fef2 	bl	8002260 <NibbleToHex>
 800147c:	4603      	mov	r3, r0
 800147e:	461a      	mov	r2, r3
 8001480:	1963      	adds	r3, r4, r5
 8001482:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k - (i+6+1)] = i+6; // length of hostname
 8001486:	68fb      	ldr	r3, [r7, #12]
 8001488:	b2d9      	uxtb	r1, r3
 800148a:	4b47      	ldr	r3, [pc, #284]	; (80015a8 <send_DHCP_REQUEST+0x504>)
 800148c:	681a      	ldr	r2, [r3, #0]
 800148e:	8978      	ldrh	r0, [r7, #10]
 8001490:	68fb      	ldr	r3, [r7, #12]
 8001492:	3307      	adds	r3, #7
 8001494:	1ac3      	subs	r3, r0, r3
 8001496:	3106      	adds	r1, #6
 8001498:	b2c9      	uxtb	r1, r1
 800149a:	4413      	add	r3, r2
 800149c:	460a      	mov	r2, r1
 800149e:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	
	pDHCPMSG->OPT[k++] = dhcpParamRequest;
 80014a2:	4b41      	ldr	r3, [pc, #260]	; (80015a8 <send_DHCP_REQUEST+0x504>)
 80014a4:	681a      	ldr	r2, [r3, #0]
 80014a6:	897b      	ldrh	r3, [r7, #10]
 80014a8:	1c59      	adds	r1, r3, #1
 80014aa:	8179      	strh	r1, [r7, #10]
 80014ac:	4413      	add	r3, r2
 80014ae:	2237      	movs	r2, #55	; 0x37
 80014b0:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = 0x08;
 80014b4:	4b3c      	ldr	r3, [pc, #240]	; (80015a8 <send_DHCP_REQUEST+0x504>)
 80014b6:	681a      	ldr	r2, [r3, #0]
 80014b8:	897b      	ldrh	r3, [r7, #10]
 80014ba:	1c59      	adds	r1, r3, #1
 80014bc:	8179      	strh	r1, [r7, #10]
 80014be:	4413      	add	r3, r2
 80014c0:	2208      	movs	r2, #8
 80014c2:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = subnetMask;
 80014c6:	4b38      	ldr	r3, [pc, #224]	; (80015a8 <send_DHCP_REQUEST+0x504>)
 80014c8:	681a      	ldr	r2, [r3, #0]
 80014ca:	897b      	ldrh	r3, [r7, #10]
 80014cc:	1c59      	adds	r1, r3, #1
 80014ce:	8179      	strh	r1, [r7, #10]
 80014d0:	4413      	add	r3, r2
 80014d2:	2201      	movs	r2, #1
 80014d4:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = routersOnSubnet;
 80014d8:	4b33      	ldr	r3, [pc, #204]	; (80015a8 <send_DHCP_REQUEST+0x504>)
 80014da:	681a      	ldr	r2, [r3, #0]
 80014dc:	897b      	ldrh	r3, [r7, #10]
 80014de:	1c59      	adds	r1, r3, #1
 80014e0:	8179      	strh	r1, [r7, #10]
 80014e2:	4413      	add	r3, r2
 80014e4:	2203      	movs	r2, #3
 80014e6:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = dns;
 80014ea:	4b2f      	ldr	r3, [pc, #188]	; (80015a8 <send_DHCP_REQUEST+0x504>)
 80014ec:	681a      	ldr	r2, [r3, #0]
 80014ee:	897b      	ldrh	r3, [r7, #10]
 80014f0:	1c59      	adds	r1, r3, #1
 80014f2:	8179      	strh	r1, [r7, #10]
 80014f4:	4413      	add	r3, r2
 80014f6:	2206      	movs	r2, #6
 80014f8:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = domainName;
 80014fc:	4b2a      	ldr	r3, [pc, #168]	; (80015a8 <send_DHCP_REQUEST+0x504>)
 80014fe:	681a      	ldr	r2, [r3, #0]
 8001500:	897b      	ldrh	r3, [r7, #10]
 8001502:	1c59      	adds	r1, r3, #1
 8001504:	8179      	strh	r1, [r7, #10]
 8001506:	4413      	add	r3, r2
 8001508:	220f      	movs	r2, #15
 800150a:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = dhcpT1value;
 800150e:	4b26      	ldr	r3, [pc, #152]	; (80015a8 <send_DHCP_REQUEST+0x504>)
 8001510:	681a      	ldr	r2, [r3, #0]
 8001512:	897b      	ldrh	r3, [r7, #10]
 8001514:	1c59      	adds	r1, r3, #1
 8001516:	8179      	strh	r1, [r7, #10]
 8001518:	4413      	add	r3, r2
 800151a:	223a      	movs	r2, #58	; 0x3a
 800151c:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = dhcpT2value;
 8001520:	4b21      	ldr	r3, [pc, #132]	; (80015a8 <send_DHCP_REQUEST+0x504>)
 8001522:	681a      	ldr	r2, [r3, #0]
 8001524:	897b      	ldrh	r3, [r7, #10]
 8001526:	1c59      	adds	r1, r3, #1
 8001528:	8179      	strh	r1, [r7, #10]
 800152a:	4413      	add	r3, r2
 800152c:	223b      	movs	r2, #59	; 0x3b
 800152e:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = performRouterDiscovery;
 8001532:	4b1d      	ldr	r3, [pc, #116]	; (80015a8 <send_DHCP_REQUEST+0x504>)
 8001534:	681a      	ldr	r2, [r3, #0]
 8001536:	897b      	ldrh	r3, [r7, #10]
 8001538:	1c59      	adds	r1, r3, #1
 800153a:	8179      	strh	r1, [r7, #10]
 800153c:	4413      	add	r3, r2
 800153e:	221f      	movs	r2, #31
 8001540:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = staticRoute;
 8001544:	4b18      	ldr	r3, [pc, #96]	; (80015a8 <send_DHCP_REQUEST+0x504>)
 8001546:	681a      	ldr	r2, [r3, #0]
 8001548:	897b      	ldrh	r3, [r7, #10]
 800154a:	1c59      	adds	r1, r3, #1
 800154c:	8179      	strh	r1, [r7, #10]
 800154e:	4413      	add	r3, r2
 8001550:	2221      	movs	r2, #33	; 0x21
 8001552:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = endOption;
 8001556:	4b14      	ldr	r3, [pc, #80]	; (80015a8 <send_DHCP_REQUEST+0x504>)
 8001558:	681a      	ldr	r2, [r3, #0]
 800155a:	897b      	ldrh	r3, [r7, #10]
 800155c:	1c59      	adds	r1, r3, #1
 800155e:	8179      	strh	r1, [r7, #10]
 8001560:	4413      	add	r3, r2
 8001562:	22ff      	movs	r2, #255	; 0xff
 8001564:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec

	for (i = k; i < OPT_SIZE; i++) pDHCPMSG->OPT[i] = 0;
 8001568:	897b      	ldrh	r3, [r7, #10]
 800156a:	60fb      	str	r3, [r7, #12]
 800156c:	e009      	b.n	8001582 <send_DHCP_REQUEST+0x4de>
 800156e:	4b0e      	ldr	r3, [pc, #56]	; (80015a8 <send_DHCP_REQUEST+0x504>)
 8001570:	681a      	ldr	r2, [r3, #0]
 8001572:	68fb      	ldr	r3, [r7, #12]
 8001574:	4413      	add	r3, r2
 8001576:	33ec      	adds	r3, #236	; 0xec
 8001578:	2200      	movs	r2, #0
 800157a:	701a      	strb	r2, [r3, #0]
 800157c:	68fb      	ldr	r3, [r7, #12]
 800157e:	3301      	adds	r3, #1
 8001580:	60fb      	str	r3, [r7, #12]
 8001582:	68fb      	ldr	r3, [r7, #12]
 8001584:	f5b3 7f9c 	cmp.w	r3, #312	; 0x138
 8001588:	dbf1      	blt.n	800156e <send_DHCP_REQUEST+0x4ca>

#ifdef _DHCP_DEBUG_
	printf("> Send DHCP_REQUEST\r\n");
#endif
	
	sendto(DHCP_SOCKET, (uint8_t *)pDHCPMSG, RIP_MSG_SIZE, ip, DHCP_SERVER_PORT);
 800158a:	4b0a      	ldr	r3, [pc, #40]	; (80015b4 <send_DHCP_REQUEST+0x510>)
 800158c:	7818      	ldrb	r0, [r3, #0]
 800158e:	4b06      	ldr	r3, [pc, #24]	; (80015a8 <send_DHCP_REQUEST+0x504>)
 8001590:	6819      	ldr	r1, [r3, #0]
 8001592:	1d3b      	adds	r3, r7, #4
 8001594:	2243      	movs	r2, #67	; 0x43
 8001596:	9200      	str	r2, [sp, #0]
 8001598:	f44f 7209 	mov.w	r2, #548	; 0x224
 800159c:	f002 ffb4 	bl	8004508 <sendto>

}
 80015a0:	bf00      	nop
 80015a2:	3710      	adds	r7, #16
 80015a4:	46bd      	mov	sp, r7
 80015a6:	bdb0      	pop	{r4, r5, r7, pc}
 80015a8:	200001a4 	.word	0x200001a4
 80015ac:	20000008 	.word	0x20000008
 80015b0:	20000190 	.word	0x20000190
 80015b4:	200001a8 	.word	0x200001a8

080015b8 <send_DHCP_DECLINE>:

/* SEND DHCP DHCPDECLINE */
void send_DHCP_DECLINE(void)
{
 80015b8:	b580      	push	{r7, lr}
 80015ba:	b086      	sub	sp, #24
 80015bc:	af02      	add	r7, sp, #8
	int i;
	uint8_t ip[4];
	uint16_t k = 0;
 80015be:	2300      	movs	r3, #0
 80015c0:	817b      	strh	r3, [r7, #10]
	
	makeDHCPMSG();
 80015c2:	f7ff fab3 	bl	8000b2c <makeDHCPMSG>

   k = 4;      // because MAGIC_COOKIE already made by makeDHCPMSG()
 80015c6:	2304      	movs	r3, #4
 80015c8:	817b      	strh	r3, [r7, #10]
   
	*((uint8_t*)(&pDHCPMSG->flags))   = ((DHCP_FLAGSUNICAST & 0xFF00)>> 8);
 80015ca:	4b9f      	ldr	r3, [pc, #636]	; (8001848 <send_DHCP_DECLINE+0x290>)
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	330a      	adds	r3, #10
 80015d0:	2200      	movs	r2, #0
 80015d2:	701a      	strb	r2, [r3, #0]
	*((uint8_t*)(&pDHCPMSG->flags)+1) = (DHCP_FLAGSUNICAST & 0x00FF);
 80015d4:	4b9c      	ldr	r3, [pc, #624]	; (8001848 <send_DHCP_DECLINE+0x290>)
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	330a      	adds	r3, #10
 80015da:	3301      	adds	r3, #1
 80015dc:	2200      	movs	r2, #0
 80015de:	701a      	strb	r2, [r3, #0]

	// Option Request Param.
	pDHCPMSG->OPT[k++] = dhcpMessageType;
 80015e0:	4b99      	ldr	r3, [pc, #612]	; (8001848 <send_DHCP_DECLINE+0x290>)
 80015e2:	681a      	ldr	r2, [r3, #0]
 80015e4:	897b      	ldrh	r3, [r7, #10]
 80015e6:	1c59      	adds	r1, r3, #1
 80015e8:	8179      	strh	r1, [r7, #10]
 80015ea:	4413      	add	r3, r2
 80015ec:	2235      	movs	r2, #53	; 0x35
 80015ee:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = 0x01;
 80015f2:	4b95      	ldr	r3, [pc, #596]	; (8001848 <send_DHCP_DECLINE+0x290>)
 80015f4:	681a      	ldr	r2, [r3, #0]
 80015f6:	897b      	ldrh	r3, [r7, #10]
 80015f8:	1c59      	adds	r1, r3, #1
 80015fa:	8179      	strh	r1, [r7, #10]
 80015fc:	4413      	add	r3, r2
 80015fe:	2201      	movs	r2, #1
 8001600:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_DECLINE;
 8001604:	4b90      	ldr	r3, [pc, #576]	; (8001848 <send_DHCP_DECLINE+0x290>)
 8001606:	681a      	ldr	r2, [r3, #0]
 8001608:	897b      	ldrh	r3, [r7, #10]
 800160a:	1c59      	adds	r1, r3, #1
 800160c:	8179      	strh	r1, [r7, #10]
 800160e:	4413      	add	r3, r2
 8001610:	2204      	movs	r2, #4
 8001612:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec

	pDHCPMSG->OPT[k++] = dhcpClientIdentifier;
 8001616:	4b8c      	ldr	r3, [pc, #560]	; (8001848 <send_DHCP_DECLINE+0x290>)
 8001618:	681a      	ldr	r2, [r3, #0]
 800161a:	897b      	ldrh	r3, [r7, #10]
 800161c:	1c59      	adds	r1, r3, #1
 800161e:	8179      	strh	r1, [r7, #10]
 8001620:	4413      	add	r3, r2
 8001622:	223d      	movs	r2, #61	; 0x3d
 8001624:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = 0x07;
 8001628:	4b87      	ldr	r3, [pc, #540]	; (8001848 <send_DHCP_DECLINE+0x290>)
 800162a:	681a      	ldr	r2, [r3, #0]
 800162c:	897b      	ldrh	r3, [r7, #10]
 800162e:	1c59      	adds	r1, r3, #1
 8001630:	8179      	strh	r1, [r7, #10]
 8001632:	4413      	add	r3, r2
 8001634:	2207      	movs	r2, #7
 8001636:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = 0x01;
 800163a:	4b83      	ldr	r3, [pc, #524]	; (8001848 <send_DHCP_DECLINE+0x290>)
 800163c:	681a      	ldr	r2, [r3, #0]
 800163e:	897b      	ldrh	r3, [r7, #10]
 8001640:	1c59      	adds	r1, r3, #1
 8001642:	8179      	strh	r1, [r7, #10]
 8001644:	4413      	add	r3, r2
 8001646:	2201      	movs	r2, #1
 8001648:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[0];
 800164c:	4b7e      	ldr	r3, [pc, #504]	; (8001848 <send_DHCP_DECLINE+0x290>)
 800164e:	681a      	ldr	r2, [r3, #0]
 8001650:	897b      	ldrh	r3, [r7, #10]
 8001652:	1c59      	adds	r1, r3, #1
 8001654:	8179      	strh	r1, [r7, #10]
 8001656:	4618      	mov	r0, r3
 8001658:	4b7c      	ldr	r3, [pc, #496]	; (800184c <send_DHCP_DECLINE+0x294>)
 800165a:	7819      	ldrb	r1, [r3, #0]
 800165c:	1813      	adds	r3, r2, r0
 800165e:	460a      	mov	r2, r1
 8001660:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[1];
 8001664:	4b78      	ldr	r3, [pc, #480]	; (8001848 <send_DHCP_DECLINE+0x290>)
 8001666:	681a      	ldr	r2, [r3, #0]
 8001668:	897b      	ldrh	r3, [r7, #10]
 800166a:	1c59      	adds	r1, r3, #1
 800166c:	8179      	strh	r1, [r7, #10]
 800166e:	4618      	mov	r0, r3
 8001670:	4b76      	ldr	r3, [pc, #472]	; (800184c <send_DHCP_DECLINE+0x294>)
 8001672:	7859      	ldrb	r1, [r3, #1]
 8001674:	1813      	adds	r3, r2, r0
 8001676:	460a      	mov	r2, r1
 8001678:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[2];
 800167c:	4b72      	ldr	r3, [pc, #456]	; (8001848 <send_DHCP_DECLINE+0x290>)
 800167e:	681a      	ldr	r2, [r3, #0]
 8001680:	897b      	ldrh	r3, [r7, #10]
 8001682:	1c59      	adds	r1, r3, #1
 8001684:	8179      	strh	r1, [r7, #10]
 8001686:	4618      	mov	r0, r3
 8001688:	4b70      	ldr	r3, [pc, #448]	; (800184c <send_DHCP_DECLINE+0x294>)
 800168a:	7899      	ldrb	r1, [r3, #2]
 800168c:	1813      	adds	r3, r2, r0
 800168e:	460a      	mov	r2, r1
 8001690:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[3];
 8001694:	4b6c      	ldr	r3, [pc, #432]	; (8001848 <send_DHCP_DECLINE+0x290>)
 8001696:	681a      	ldr	r2, [r3, #0]
 8001698:	897b      	ldrh	r3, [r7, #10]
 800169a:	1c59      	adds	r1, r3, #1
 800169c:	8179      	strh	r1, [r7, #10]
 800169e:	4618      	mov	r0, r3
 80016a0:	4b6a      	ldr	r3, [pc, #424]	; (800184c <send_DHCP_DECLINE+0x294>)
 80016a2:	78d9      	ldrb	r1, [r3, #3]
 80016a4:	1813      	adds	r3, r2, r0
 80016a6:	460a      	mov	r2, r1
 80016a8:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[4];
 80016ac:	4b66      	ldr	r3, [pc, #408]	; (8001848 <send_DHCP_DECLINE+0x290>)
 80016ae:	681a      	ldr	r2, [r3, #0]
 80016b0:	897b      	ldrh	r3, [r7, #10]
 80016b2:	1c59      	adds	r1, r3, #1
 80016b4:	8179      	strh	r1, [r7, #10]
 80016b6:	4618      	mov	r0, r3
 80016b8:	4b64      	ldr	r3, [pc, #400]	; (800184c <send_DHCP_DECLINE+0x294>)
 80016ba:	7919      	ldrb	r1, [r3, #4]
 80016bc:	1813      	adds	r3, r2, r0
 80016be:	460a      	mov	r2, r1
 80016c0:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[5];
 80016c4:	4b60      	ldr	r3, [pc, #384]	; (8001848 <send_DHCP_DECLINE+0x290>)
 80016c6:	681a      	ldr	r2, [r3, #0]
 80016c8:	897b      	ldrh	r3, [r7, #10]
 80016ca:	1c59      	adds	r1, r3, #1
 80016cc:	8179      	strh	r1, [r7, #10]
 80016ce:	4618      	mov	r0, r3
 80016d0:	4b5e      	ldr	r3, [pc, #376]	; (800184c <send_DHCP_DECLINE+0x294>)
 80016d2:	7959      	ldrb	r1, [r3, #5]
 80016d4:	1813      	adds	r3, r2, r0
 80016d6:	460a      	mov	r2, r1
 80016d8:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec

	pDHCPMSG->OPT[k++] = dhcpRequestedIPaddr;
 80016dc:	4b5a      	ldr	r3, [pc, #360]	; (8001848 <send_DHCP_DECLINE+0x290>)
 80016de:	681a      	ldr	r2, [r3, #0]
 80016e0:	897b      	ldrh	r3, [r7, #10]
 80016e2:	1c59      	adds	r1, r3, #1
 80016e4:	8179      	strh	r1, [r7, #10]
 80016e6:	4413      	add	r3, r2
 80016e8:	2232      	movs	r2, #50	; 0x32
 80016ea:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = 0x04;
 80016ee:	4b56      	ldr	r3, [pc, #344]	; (8001848 <send_DHCP_DECLINE+0x290>)
 80016f0:	681a      	ldr	r2, [r3, #0]
 80016f2:	897b      	ldrh	r3, [r7, #10]
 80016f4:	1c59      	adds	r1, r3, #1
 80016f6:	8179      	strh	r1, [r7, #10]
 80016f8:	4413      	add	r3, r2
 80016fa:	2204      	movs	r2, #4
 80016fc:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_allocated_ip[0];
 8001700:	4b51      	ldr	r3, [pc, #324]	; (8001848 <send_DHCP_DECLINE+0x290>)
 8001702:	681a      	ldr	r2, [r3, #0]
 8001704:	897b      	ldrh	r3, [r7, #10]
 8001706:	1c59      	adds	r1, r3, #1
 8001708:	8179      	strh	r1, [r7, #10]
 800170a:	4618      	mov	r0, r3
 800170c:	4b50      	ldr	r3, [pc, #320]	; (8001850 <send_DHCP_DECLINE+0x298>)
 800170e:	7819      	ldrb	r1, [r3, #0]
 8001710:	1813      	adds	r3, r2, r0
 8001712:	460a      	mov	r2, r1
 8001714:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_allocated_ip[1];
 8001718:	4b4b      	ldr	r3, [pc, #300]	; (8001848 <send_DHCP_DECLINE+0x290>)
 800171a:	681a      	ldr	r2, [r3, #0]
 800171c:	897b      	ldrh	r3, [r7, #10]
 800171e:	1c59      	adds	r1, r3, #1
 8001720:	8179      	strh	r1, [r7, #10]
 8001722:	4618      	mov	r0, r3
 8001724:	4b4a      	ldr	r3, [pc, #296]	; (8001850 <send_DHCP_DECLINE+0x298>)
 8001726:	7859      	ldrb	r1, [r3, #1]
 8001728:	1813      	adds	r3, r2, r0
 800172a:	460a      	mov	r2, r1
 800172c:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_allocated_ip[2];
 8001730:	4b45      	ldr	r3, [pc, #276]	; (8001848 <send_DHCP_DECLINE+0x290>)
 8001732:	681a      	ldr	r2, [r3, #0]
 8001734:	897b      	ldrh	r3, [r7, #10]
 8001736:	1c59      	adds	r1, r3, #1
 8001738:	8179      	strh	r1, [r7, #10]
 800173a:	4618      	mov	r0, r3
 800173c:	4b44      	ldr	r3, [pc, #272]	; (8001850 <send_DHCP_DECLINE+0x298>)
 800173e:	7899      	ldrb	r1, [r3, #2]
 8001740:	1813      	adds	r3, r2, r0
 8001742:	460a      	mov	r2, r1
 8001744:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_allocated_ip[3];
 8001748:	4b3f      	ldr	r3, [pc, #252]	; (8001848 <send_DHCP_DECLINE+0x290>)
 800174a:	681a      	ldr	r2, [r3, #0]
 800174c:	897b      	ldrh	r3, [r7, #10]
 800174e:	1c59      	adds	r1, r3, #1
 8001750:	8179      	strh	r1, [r7, #10]
 8001752:	4618      	mov	r0, r3
 8001754:	4b3e      	ldr	r3, [pc, #248]	; (8001850 <send_DHCP_DECLINE+0x298>)
 8001756:	78d9      	ldrb	r1, [r3, #3]
 8001758:	1813      	adds	r3, r2, r0
 800175a:	460a      	mov	r2, r1
 800175c:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec

	pDHCPMSG->OPT[k++] = dhcpServerIdentifier;
 8001760:	4b39      	ldr	r3, [pc, #228]	; (8001848 <send_DHCP_DECLINE+0x290>)
 8001762:	681a      	ldr	r2, [r3, #0]
 8001764:	897b      	ldrh	r3, [r7, #10]
 8001766:	1c59      	adds	r1, r3, #1
 8001768:	8179      	strh	r1, [r7, #10]
 800176a:	4413      	add	r3, r2
 800176c:	2236      	movs	r2, #54	; 0x36
 800176e:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = 0x04;
 8001772:	4b35      	ldr	r3, [pc, #212]	; (8001848 <send_DHCP_DECLINE+0x290>)
 8001774:	681a      	ldr	r2, [r3, #0]
 8001776:	897b      	ldrh	r3, [r7, #10]
 8001778:	1c59      	adds	r1, r3, #1
 800177a:	8179      	strh	r1, [r7, #10]
 800177c:	4413      	add	r3, r2
 800177e:	2204      	movs	r2, #4
 8001780:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_SIP[0];
 8001784:	4b30      	ldr	r3, [pc, #192]	; (8001848 <send_DHCP_DECLINE+0x290>)
 8001786:	681a      	ldr	r2, [r3, #0]
 8001788:	897b      	ldrh	r3, [r7, #10]
 800178a:	1c59      	adds	r1, r3, #1
 800178c:	8179      	strh	r1, [r7, #10]
 800178e:	4618      	mov	r0, r3
 8001790:	4b30      	ldr	r3, [pc, #192]	; (8001854 <send_DHCP_DECLINE+0x29c>)
 8001792:	7819      	ldrb	r1, [r3, #0]
 8001794:	1813      	adds	r3, r2, r0
 8001796:	460a      	mov	r2, r1
 8001798:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_SIP[1];
 800179c:	4b2a      	ldr	r3, [pc, #168]	; (8001848 <send_DHCP_DECLINE+0x290>)
 800179e:	681a      	ldr	r2, [r3, #0]
 80017a0:	897b      	ldrh	r3, [r7, #10]
 80017a2:	1c59      	adds	r1, r3, #1
 80017a4:	8179      	strh	r1, [r7, #10]
 80017a6:	4618      	mov	r0, r3
 80017a8:	4b2a      	ldr	r3, [pc, #168]	; (8001854 <send_DHCP_DECLINE+0x29c>)
 80017aa:	7859      	ldrb	r1, [r3, #1]
 80017ac:	1813      	adds	r3, r2, r0
 80017ae:	460a      	mov	r2, r1
 80017b0:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_SIP[2];
 80017b4:	4b24      	ldr	r3, [pc, #144]	; (8001848 <send_DHCP_DECLINE+0x290>)
 80017b6:	681a      	ldr	r2, [r3, #0]
 80017b8:	897b      	ldrh	r3, [r7, #10]
 80017ba:	1c59      	adds	r1, r3, #1
 80017bc:	8179      	strh	r1, [r7, #10]
 80017be:	4618      	mov	r0, r3
 80017c0:	4b24      	ldr	r3, [pc, #144]	; (8001854 <send_DHCP_DECLINE+0x29c>)
 80017c2:	7899      	ldrb	r1, [r3, #2]
 80017c4:	1813      	adds	r3, r2, r0
 80017c6:	460a      	mov	r2, r1
 80017c8:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_SIP[3];
 80017cc:	4b1e      	ldr	r3, [pc, #120]	; (8001848 <send_DHCP_DECLINE+0x290>)
 80017ce:	681a      	ldr	r2, [r3, #0]
 80017d0:	897b      	ldrh	r3, [r7, #10]
 80017d2:	1c59      	adds	r1, r3, #1
 80017d4:	8179      	strh	r1, [r7, #10]
 80017d6:	4618      	mov	r0, r3
 80017d8:	4b1e      	ldr	r3, [pc, #120]	; (8001854 <send_DHCP_DECLINE+0x29c>)
 80017da:	78d9      	ldrb	r1, [r3, #3]
 80017dc:	1813      	adds	r3, r2, r0
 80017de:	460a      	mov	r2, r1
 80017e0:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec

	pDHCPMSG->OPT[k++] = endOption;
 80017e4:	4b18      	ldr	r3, [pc, #96]	; (8001848 <send_DHCP_DECLINE+0x290>)
 80017e6:	681a      	ldr	r2, [r3, #0]
 80017e8:	897b      	ldrh	r3, [r7, #10]
 80017ea:	1c59      	adds	r1, r3, #1
 80017ec:	8179      	strh	r1, [r7, #10]
 80017ee:	4413      	add	r3, r2
 80017f0:	22ff      	movs	r2, #255	; 0xff
 80017f2:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec

	for (i = k; i < OPT_SIZE; i++) pDHCPMSG->OPT[i] = 0;
 80017f6:	897b      	ldrh	r3, [r7, #10]
 80017f8:	60fb      	str	r3, [r7, #12]
 80017fa:	e009      	b.n	8001810 <send_DHCP_DECLINE+0x258>
 80017fc:	4b12      	ldr	r3, [pc, #72]	; (8001848 <send_DHCP_DECLINE+0x290>)
 80017fe:	681a      	ldr	r2, [r3, #0]
 8001800:	68fb      	ldr	r3, [r7, #12]
 8001802:	4413      	add	r3, r2
 8001804:	33ec      	adds	r3, #236	; 0xec
 8001806:	2200      	movs	r2, #0
 8001808:	701a      	strb	r2, [r3, #0]
 800180a:	68fb      	ldr	r3, [r7, #12]
 800180c:	3301      	adds	r3, #1
 800180e:	60fb      	str	r3, [r7, #12]
 8001810:	68fb      	ldr	r3, [r7, #12]
 8001812:	f5b3 7f9c 	cmp.w	r3, #312	; 0x138
 8001816:	dbf1      	blt.n	80017fc <send_DHCP_DECLINE+0x244>

	//send broadcasting packet
	ip[0] = 0xFF;
 8001818:	23ff      	movs	r3, #255	; 0xff
 800181a:	713b      	strb	r3, [r7, #4]
	ip[1] = 0xFF;
 800181c:	23ff      	movs	r3, #255	; 0xff
 800181e:	717b      	strb	r3, [r7, #5]
	ip[2] = 0xFF;
 8001820:	23ff      	movs	r3, #255	; 0xff
 8001822:	71bb      	strb	r3, [r7, #6]
	ip[3] = 0xFF;
 8001824:	23ff      	movs	r3, #255	; 0xff
 8001826:	71fb      	strb	r3, [r7, #7]

#ifdef _DHCP_DEBUG_
	printf("\r\n> Send DHCP_DECLINE\r\n");
#endif

	sendto(DHCP_SOCKET, (uint8_t *)pDHCPMSG, RIP_MSG_SIZE, ip, DHCP_SERVER_PORT);
 8001828:	4b0b      	ldr	r3, [pc, #44]	; (8001858 <send_DHCP_DECLINE+0x2a0>)
 800182a:	7818      	ldrb	r0, [r3, #0]
 800182c:	4b06      	ldr	r3, [pc, #24]	; (8001848 <send_DHCP_DECLINE+0x290>)
 800182e:	6819      	ldr	r1, [r3, #0]
 8001830:	1d3b      	adds	r3, r7, #4
 8001832:	2243      	movs	r2, #67	; 0x43
 8001834:	9200      	str	r2, [sp, #0]
 8001836:	f44f 7209 	mov.w	r2, #548	; 0x224
 800183a:	f002 fe65 	bl	8004508 <sendto>
}
 800183e:	bf00      	nop
 8001840:	3710      	adds	r7, #16
 8001842:	46bd      	mov	sp, r7
 8001844:	bd80      	pop	{r7, pc}
 8001846:	bf00      	nop
 8001848:	200001a4 	.word	0x200001a4
 800184c:	20000190 	.word	0x20000190
 8001850:	200000e0 	.word	0x200000e0
 8001854:	200001a0 	.word	0x200001a0
 8001858:	200001a8 	.word	0x200001a8

0800185c <parseDHCPMSG>:

/* PARSE REPLY pDHCPMSG */
int8_t parseDHCPMSG(void)
{
 800185c:	b590      	push	{r4, r7, lr}
 800185e:	b089      	sub	sp, #36	; 0x24
 8001860:	af02      	add	r7, sp, #8
	uint16_t  svr_port;
	uint16_t len;

	uint8_t * p;
	uint8_t * e;
	uint8_t type = 0;
 8001862:	2300      	movs	r3, #0
 8001864:	74fb      	strb	r3, [r7, #19]
	uint8_t opt_len;
   
   if((len = getSn_RX_RSR(DHCP_SOCKET)) > 0)
 8001866:	4ba1      	ldr	r3, [pc, #644]	; (8001aec <parseDHCPMSG+0x290>)
 8001868:	781b      	ldrb	r3, [r3, #0]
 800186a:	4618      	mov	r0, r3
 800186c:	f003 ff77 	bl	800575e <getSn_RX_RSR>
 8001870:	4603      	mov	r3, r0
 8001872:	823b      	strh	r3, [r7, #16]
 8001874:	8a3b      	ldrh	r3, [r7, #16]
 8001876:	2b00      	cmp	r3, #0
 8001878:	d011      	beq.n	800189e <parseDHCPMSG+0x42>
   {
   	len = recvfrom(DHCP_SOCKET, (uint8_t *)pDHCPMSG, len, svr_addr, &svr_port);
 800187a:	4b9c      	ldr	r3, [pc, #624]	; (8001aec <parseDHCPMSG+0x290>)
 800187c:	7818      	ldrb	r0, [r3, #0]
 800187e:	4b9c      	ldr	r3, [pc, #624]	; (8001af0 <parseDHCPMSG+0x294>)
 8001880:	6819      	ldr	r1, [r3, #0]
 8001882:	1d3c      	adds	r4, r7, #4
 8001884:	8a3a      	ldrh	r2, [r7, #16]
 8001886:	1cbb      	adds	r3, r7, #2
 8001888:	9300      	str	r3, [sp, #0]
 800188a:	4623      	mov	r3, r4
 800188c:	f002 ff72 	bl	8004774 <recvfrom>
 8001890:	4603      	mov	r3, r0
 8001892:	823b      	strh	r3, [r7, #16]
   #ifdef _DHCP_DEBUG_   
      printf("DHCP message : %d.%d.%d.%d(%d) %d received. \r\n",svr_addr[0],svr_addr[1],svr_addr[2], svr_addr[3],svr_port, len);
   #endif   
   }
   else return 0;
	if (svr_port == DHCP_SERVER_PORT) {
 8001894:	887b      	ldrh	r3, [r7, #2]
 8001896:	2b43      	cmp	r3, #67	; 0x43
 8001898:	f040 81ed 	bne.w	8001c76 <parseDHCPMSG+0x41a>
 800189c:	e001      	b.n	80018a2 <parseDHCPMSG+0x46>
   else return 0;
 800189e:	2300      	movs	r3, #0
 80018a0:	e1eb      	b.n	8001c7a <parseDHCPMSG+0x41e>
      // compare mac address
		if ( (pDHCPMSG->chaddr[0] != DHCP_CHADDR[0]) || (pDHCPMSG->chaddr[1] != DHCP_CHADDR[1]) ||
 80018a2:	4b93      	ldr	r3, [pc, #588]	; (8001af0 <parseDHCPMSG+0x294>)
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	7f1a      	ldrb	r2, [r3, #28]
 80018a8:	4b92      	ldr	r3, [pc, #584]	; (8001af4 <parseDHCPMSG+0x298>)
 80018aa:	781b      	ldrb	r3, [r3, #0]
 80018ac:	429a      	cmp	r2, r3
 80018ae:	d124      	bne.n	80018fa <parseDHCPMSG+0x9e>
 80018b0:	4b8f      	ldr	r3, [pc, #572]	; (8001af0 <parseDHCPMSG+0x294>)
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	7f5a      	ldrb	r2, [r3, #29]
 80018b6:	4b8f      	ldr	r3, [pc, #572]	; (8001af4 <parseDHCPMSG+0x298>)
 80018b8:	785b      	ldrb	r3, [r3, #1]
 80018ba:	429a      	cmp	r2, r3
 80018bc:	d11d      	bne.n	80018fa <parseDHCPMSG+0x9e>
		     (pDHCPMSG->chaddr[2] != DHCP_CHADDR[2]) || (pDHCPMSG->chaddr[3] != DHCP_CHADDR[3]) ||
 80018be:	4b8c      	ldr	r3, [pc, #560]	; (8001af0 <parseDHCPMSG+0x294>)
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	7f9a      	ldrb	r2, [r3, #30]
 80018c4:	4b8b      	ldr	r3, [pc, #556]	; (8001af4 <parseDHCPMSG+0x298>)
 80018c6:	789b      	ldrb	r3, [r3, #2]
		if ( (pDHCPMSG->chaddr[0] != DHCP_CHADDR[0]) || (pDHCPMSG->chaddr[1] != DHCP_CHADDR[1]) ||
 80018c8:	429a      	cmp	r2, r3
 80018ca:	d116      	bne.n	80018fa <parseDHCPMSG+0x9e>
		     (pDHCPMSG->chaddr[2] != DHCP_CHADDR[2]) || (pDHCPMSG->chaddr[3] != DHCP_CHADDR[3]) ||
 80018cc:	4b88      	ldr	r3, [pc, #544]	; (8001af0 <parseDHCPMSG+0x294>)
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	7fda      	ldrb	r2, [r3, #31]
 80018d2:	4b88      	ldr	r3, [pc, #544]	; (8001af4 <parseDHCPMSG+0x298>)
 80018d4:	78db      	ldrb	r3, [r3, #3]
 80018d6:	429a      	cmp	r2, r3
 80018d8:	d10f      	bne.n	80018fa <parseDHCPMSG+0x9e>
		     (pDHCPMSG->chaddr[4] != DHCP_CHADDR[4]) || (pDHCPMSG->chaddr[5] != DHCP_CHADDR[5])   )
 80018da:	4b85      	ldr	r3, [pc, #532]	; (8001af0 <parseDHCPMSG+0x294>)
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	f893 2020 	ldrb.w	r2, [r3, #32]
 80018e2:	4b84      	ldr	r3, [pc, #528]	; (8001af4 <parseDHCPMSG+0x298>)
 80018e4:	791b      	ldrb	r3, [r3, #4]
		     (pDHCPMSG->chaddr[2] != DHCP_CHADDR[2]) || (pDHCPMSG->chaddr[3] != DHCP_CHADDR[3]) ||
 80018e6:	429a      	cmp	r2, r3
 80018e8:	d107      	bne.n	80018fa <parseDHCPMSG+0x9e>
		     (pDHCPMSG->chaddr[4] != DHCP_CHADDR[4]) || (pDHCPMSG->chaddr[5] != DHCP_CHADDR[5])   )
 80018ea:	4b81      	ldr	r3, [pc, #516]	; (8001af0 <parseDHCPMSG+0x294>)
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 80018f2:	4b80      	ldr	r3, [pc, #512]	; (8001af4 <parseDHCPMSG+0x298>)
 80018f4:	795b      	ldrb	r3, [r3, #5]
 80018f6:	429a      	cmp	r2, r3
 80018f8:	d001      	beq.n	80018fe <parseDHCPMSG+0xa2>
		{
#ifdef _DHCP_DEBUG_
            printf("No My DHCP Message. This message is ignored.\r\n");
#endif
         return 0;
 80018fa:	2300      	movs	r3, #0
 80018fc:	e1bd      	b.n	8001c7a <parseDHCPMSG+0x41e>
		}
        //compare DHCP server ip address
        if((DHCP_SIP[0]!=0) || (DHCP_SIP[1]!=0) || (DHCP_SIP[2]!=0) || (DHCP_SIP[3]!=0)){
 80018fe:	4b7e      	ldr	r3, [pc, #504]	; (8001af8 <parseDHCPMSG+0x29c>)
 8001900:	781b      	ldrb	r3, [r3, #0]
 8001902:	2b00      	cmp	r3, #0
 8001904:	d10b      	bne.n	800191e <parseDHCPMSG+0xc2>
 8001906:	4b7c      	ldr	r3, [pc, #496]	; (8001af8 <parseDHCPMSG+0x29c>)
 8001908:	785b      	ldrb	r3, [r3, #1]
 800190a:	2b00      	cmp	r3, #0
 800190c:	d107      	bne.n	800191e <parseDHCPMSG+0xc2>
 800190e:	4b7a      	ldr	r3, [pc, #488]	; (8001af8 <parseDHCPMSG+0x29c>)
 8001910:	789b      	ldrb	r3, [r3, #2]
 8001912:	2b00      	cmp	r3, #0
 8001914:	d103      	bne.n	800191e <parseDHCPMSG+0xc2>
 8001916:	4b78      	ldr	r3, [pc, #480]	; (8001af8 <parseDHCPMSG+0x29c>)
 8001918:	78db      	ldrb	r3, [r3, #3]
 800191a:	2b00      	cmp	r3, #0
 800191c:	d029      	beq.n	8001972 <parseDHCPMSG+0x116>
            if( ((svr_addr[0]!=DHCP_SIP[0])|| (svr_addr[1]!=DHCP_SIP[1])|| (svr_addr[2]!=DHCP_SIP[2])|| (svr_addr[3]!=DHCP_SIP[3])) &&
 800191e:	793a      	ldrb	r2, [r7, #4]
 8001920:	4b75      	ldr	r3, [pc, #468]	; (8001af8 <parseDHCPMSG+0x29c>)
 8001922:	781b      	ldrb	r3, [r3, #0]
 8001924:	429a      	cmp	r2, r3
 8001926:	d10e      	bne.n	8001946 <parseDHCPMSG+0xea>
 8001928:	797a      	ldrb	r2, [r7, #5]
 800192a:	4b73      	ldr	r3, [pc, #460]	; (8001af8 <parseDHCPMSG+0x29c>)
 800192c:	785b      	ldrb	r3, [r3, #1]
 800192e:	429a      	cmp	r2, r3
 8001930:	d109      	bne.n	8001946 <parseDHCPMSG+0xea>
 8001932:	79ba      	ldrb	r2, [r7, #6]
 8001934:	4b70      	ldr	r3, [pc, #448]	; (8001af8 <parseDHCPMSG+0x29c>)
 8001936:	789b      	ldrb	r3, [r3, #2]
 8001938:	429a      	cmp	r2, r3
 800193a:	d104      	bne.n	8001946 <parseDHCPMSG+0xea>
 800193c:	79fa      	ldrb	r2, [r7, #7]
 800193e:	4b6e      	ldr	r3, [pc, #440]	; (8001af8 <parseDHCPMSG+0x29c>)
 8001940:	78db      	ldrb	r3, [r3, #3]
 8001942:	429a      	cmp	r2, r3
 8001944:	d015      	beq.n	8001972 <parseDHCPMSG+0x116>
                ((svr_addr[0]!=DHCP_REAL_SIP[0])|| (svr_addr[1]!=DHCP_REAL_SIP[1])|| (svr_addr[2]!=DHCP_REAL_SIP[2])|| (svr_addr[3]!=DHCP_REAL_SIP[3]))  )
 8001946:	793a      	ldrb	r2, [r7, #4]
 8001948:	4b6c      	ldr	r3, [pc, #432]	; (8001afc <parseDHCPMSG+0x2a0>)
 800194a:	781b      	ldrb	r3, [r3, #0]
            if( ((svr_addr[0]!=DHCP_SIP[0])|| (svr_addr[1]!=DHCP_SIP[1])|| (svr_addr[2]!=DHCP_SIP[2])|| (svr_addr[3]!=DHCP_SIP[3])) &&
 800194c:	429a      	cmp	r2, r3
 800194e:	d10e      	bne.n	800196e <parseDHCPMSG+0x112>
                ((svr_addr[0]!=DHCP_REAL_SIP[0])|| (svr_addr[1]!=DHCP_REAL_SIP[1])|| (svr_addr[2]!=DHCP_REAL_SIP[2])|| (svr_addr[3]!=DHCP_REAL_SIP[3]))  )
 8001950:	797a      	ldrb	r2, [r7, #5]
 8001952:	4b6a      	ldr	r3, [pc, #424]	; (8001afc <parseDHCPMSG+0x2a0>)
 8001954:	785b      	ldrb	r3, [r3, #1]
 8001956:	429a      	cmp	r2, r3
 8001958:	d109      	bne.n	800196e <parseDHCPMSG+0x112>
 800195a:	79ba      	ldrb	r2, [r7, #6]
 800195c:	4b67      	ldr	r3, [pc, #412]	; (8001afc <parseDHCPMSG+0x2a0>)
 800195e:	789b      	ldrb	r3, [r3, #2]
 8001960:	429a      	cmp	r2, r3
 8001962:	d104      	bne.n	800196e <parseDHCPMSG+0x112>
 8001964:	79fa      	ldrb	r2, [r7, #7]
 8001966:	4b65      	ldr	r3, [pc, #404]	; (8001afc <parseDHCPMSG+0x2a0>)
 8001968:	78db      	ldrb	r3, [r3, #3]
 800196a:	429a      	cmp	r2, r3
 800196c:	d001      	beq.n	8001972 <parseDHCPMSG+0x116>
            {
#ifdef _DHCP_DEBUG_
                printf("Another DHCP sever send a response message. This is ignored.\r\n");
#endif
                return 0;
 800196e:	2300      	movs	r3, #0
 8001970:	e183      	b.n	8001c7a <parseDHCPMSG+0x41e>
            }
        }
		p = (uint8_t *)(&pDHCPMSG->op);
 8001972:	4b5f      	ldr	r3, [pc, #380]	; (8001af0 <parseDHCPMSG+0x294>)
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	617b      	str	r3, [r7, #20]
		p = p + 240;      // 240 = sizeof(RIP_MSG) + MAGIC_COOKIE size in RIP_MSG.opt - sizeof(RIP_MSG.opt)
 8001978:	697b      	ldr	r3, [r7, #20]
 800197a:	33f0      	adds	r3, #240	; 0xf0
 800197c:	617b      	str	r3, [r7, #20]
		e = p + (len - 240);
 800197e:	8a3b      	ldrh	r3, [r7, #16]
 8001980:	3bf0      	subs	r3, #240	; 0xf0
 8001982:	697a      	ldr	r2, [r7, #20]
 8001984:	4413      	add	r3, r2
 8001986:	60fb      	str	r3, [r7, #12]

		while ( p < e ) {
 8001988:	e170      	b.n	8001c6c <parseDHCPMSG+0x410>

			switch ( *p ) {
 800198a:	697b      	ldr	r3, [r7, #20]
 800198c:	781b      	ldrb	r3, [r3, #0]
 800198e:	2b36      	cmp	r3, #54	; 0x36
 8001990:	dc76      	bgt.n	8001a80 <parseDHCPMSG+0x224>
 8001992:	2b00      	cmp	r3, #0
 8001994:	f2c0 815d 	blt.w	8001c52 <parseDHCPMSG+0x3f6>
 8001998:	2b36      	cmp	r3, #54	; 0x36
 800199a:	f200 815a 	bhi.w	8001c52 <parseDHCPMSG+0x3f6>
 800199e:	a201      	add	r2, pc, #4	; (adr r2, 80019a4 <parseDHCPMSG+0x148>)
 80019a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80019a4:	08001a8d 	.word	0x08001a8d
 80019a8:	08001aad 	.word	0x08001aad
 80019ac:	08001c53 	.word	0x08001c53
 80019b0:	08001b05 	.word	0x08001b05
 80019b4:	08001c53 	.word	0x08001c53
 80019b8:	08001c53 	.word	0x08001c53
 80019bc:	08001b51 	.word	0x08001b51
 80019c0:	08001c53 	.word	0x08001c53
 80019c4:	08001c53 	.word	0x08001c53
 80019c8:	08001c53 	.word	0x08001c53
 80019cc:	08001c53 	.word	0x08001c53
 80019d0:	08001c53 	.word	0x08001c53
 80019d4:	08001c53 	.word	0x08001c53
 80019d8:	08001c53 	.word	0x08001c53
 80019dc:	08001c53 	.word	0x08001c53
 80019e0:	08001c53 	.word	0x08001c53
 80019e4:	08001c53 	.word	0x08001c53
 80019e8:	08001c53 	.word	0x08001c53
 80019ec:	08001c53 	.word	0x08001c53
 80019f0:	08001c53 	.word	0x08001c53
 80019f4:	08001c53 	.word	0x08001c53
 80019f8:	08001c53 	.word	0x08001c53
 80019fc:	08001c53 	.word	0x08001c53
 8001a00:	08001c53 	.word	0x08001c53
 8001a04:	08001c53 	.word	0x08001c53
 8001a08:	08001c53 	.word	0x08001c53
 8001a0c:	08001c53 	.word	0x08001c53
 8001a10:	08001c53 	.word	0x08001c53
 8001a14:	08001c53 	.word	0x08001c53
 8001a18:	08001c53 	.word	0x08001c53
 8001a1c:	08001c53 	.word	0x08001c53
 8001a20:	08001c53 	.word	0x08001c53
 8001a24:	08001c53 	.word	0x08001c53
 8001a28:	08001c53 	.word	0x08001c53
 8001a2c:	08001c53 	.word	0x08001c53
 8001a30:	08001c53 	.word	0x08001c53
 8001a34:	08001c53 	.word	0x08001c53
 8001a38:	08001c53 	.word	0x08001c53
 8001a3c:	08001c53 	.word	0x08001c53
 8001a40:	08001c53 	.word	0x08001c53
 8001a44:	08001c53 	.word	0x08001c53
 8001a48:	08001c53 	.word	0x08001c53
 8001a4c:	08001c53 	.word	0x08001c53
 8001a50:	08001c53 	.word	0x08001c53
 8001a54:	08001c53 	.word	0x08001c53
 8001a58:	08001c53 	.word	0x08001c53
 8001a5c:	08001c53 	.word	0x08001c53
 8001a60:	08001c53 	.word	0x08001c53
 8001a64:	08001c53 	.word	0x08001c53
 8001a68:	08001c53 	.word	0x08001c53
 8001a6c:	08001c53 	.word	0x08001c53
 8001a70:	08001b9d 	.word	0x08001b9d
 8001a74:	08001c53 	.word	0x08001c53
 8001a78:	08001a95 	.word	0x08001a95
 8001a7c:	08001bf9 	.word	0x08001bf9
 8001a80:	2bff      	cmp	r3, #255	; 0xff
 8001a82:	f040 80e6 	bne.w	8001c52 <parseDHCPMSG+0x3f6>

   			case endOption :
   			   p = e;   // for break while(p < e)
 8001a86:	68fb      	ldr	r3, [r7, #12]
 8001a88:	617b      	str	r3, [r7, #20]
   				break;
 8001a8a:	e0ef      	b.n	8001c6c <parseDHCPMSG+0x410>
            case padOption :
   				p++;
 8001a8c:	697b      	ldr	r3, [r7, #20]
 8001a8e:	3301      	adds	r3, #1
 8001a90:	617b      	str	r3, [r7, #20]
   				break;
 8001a92:	e0eb      	b.n	8001c6c <parseDHCPMSG+0x410>
   			case dhcpMessageType :
   				p++;
 8001a94:	697b      	ldr	r3, [r7, #20]
 8001a96:	3301      	adds	r3, #1
 8001a98:	617b      	str	r3, [r7, #20]
   				p++;
 8001a9a:	697b      	ldr	r3, [r7, #20]
 8001a9c:	3301      	adds	r3, #1
 8001a9e:	617b      	str	r3, [r7, #20]
   				type = *p++;
 8001aa0:	697b      	ldr	r3, [r7, #20]
 8001aa2:	1c5a      	adds	r2, r3, #1
 8001aa4:	617a      	str	r2, [r7, #20]
 8001aa6:	781b      	ldrb	r3, [r3, #0]
 8001aa8:	74fb      	strb	r3, [r7, #19]
   				break;
 8001aaa:	e0df      	b.n	8001c6c <parseDHCPMSG+0x410>
   			case subnetMask :
   				p++;
 8001aac:	697b      	ldr	r3, [r7, #20]
 8001aae:	3301      	adds	r3, #1
 8001ab0:	617b      	str	r3, [r7, #20]
   				p++;
 8001ab2:	697b      	ldr	r3, [r7, #20]
 8001ab4:	3301      	adds	r3, #1
 8001ab6:	617b      	str	r3, [r7, #20]
   				DHCP_allocated_sn[0] = *p++;
 8001ab8:	697b      	ldr	r3, [r7, #20]
 8001aba:	1c5a      	adds	r2, r3, #1
 8001abc:	617a      	str	r2, [r7, #20]
 8001abe:	781a      	ldrb	r2, [r3, #0]
 8001ac0:	4b0f      	ldr	r3, [pc, #60]	; (8001b00 <parseDHCPMSG+0x2a4>)
 8001ac2:	701a      	strb	r2, [r3, #0]
   				DHCP_allocated_sn[1] = *p++;
 8001ac4:	697b      	ldr	r3, [r7, #20]
 8001ac6:	1c5a      	adds	r2, r3, #1
 8001ac8:	617a      	str	r2, [r7, #20]
 8001aca:	781a      	ldrb	r2, [r3, #0]
 8001acc:	4b0c      	ldr	r3, [pc, #48]	; (8001b00 <parseDHCPMSG+0x2a4>)
 8001ace:	705a      	strb	r2, [r3, #1]
   				DHCP_allocated_sn[2] = *p++;
 8001ad0:	697b      	ldr	r3, [r7, #20]
 8001ad2:	1c5a      	adds	r2, r3, #1
 8001ad4:	617a      	str	r2, [r7, #20]
 8001ad6:	781a      	ldrb	r2, [r3, #0]
 8001ad8:	4b09      	ldr	r3, [pc, #36]	; (8001b00 <parseDHCPMSG+0x2a4>)
 8001ada:	709a      	strb	r2, [r3, #2]
   				DHCP_allocated_sn[3] = *p++;
 8001adc:	697b      	ldr	r3, [r7, #20]
 8001ade:	1c5a      	adds	r2, r3, #1
 8001ae0:	617a      	str	r2, [r7, #20]
 8001ae2:	781a      	ldrb	r2, [r3, #0]
 8001ae4:	4b06      	ldr	r3, [pc, #24]	; (8001b00 <parseDHCPMSG+0x2a4>)
 8001ae6:	70da      	strb	r2, [r3, #3]
   				break;
 8001ae8:	e0c0      	b.n	8001c6c <parseDHCPMSG+0x410>
 8001aea:	bf00      	nop
 8001aec:	200001a8 	.word	0x200001a8
 8001af0:	200001a4 	.word	0x200001a4
 8001af4:	20000190 	.word	0x20000190
 8001af8:	200001a0 	.word	0x200001a0
 8001afc:	2000019c 	.word	0x2000019c
 8001b00:	200000e8 	.word	0x200000e8
   			case routersOnSubnet :
   				p++;
 8001b04:	697b      	ldr	r3, [r7, #20]
 8001b06:	3301      	adds	r3, #1
 8001b08:	617b      	str	r3, [r7, #20]
   				opt_len = *p++;       
 8001b0a:	697b      	ldr	r3, [r7, #20]
 8001b0c:	1c5a      	adds	r2, r3, #1
 8001b0e:	617a      	str	r2, [r7, #20]
 8001b10:	781b      	ldrb	r3, [r3, #0]
 8001b12:	72fb      	strb	r3, [r7, #11]
   				DHCP_allocated_gw[0] = *p++;
 8001b14:	697b      	ldr	r3, [r7, #20]
 8001b16:	1c5a      	adds	r2, r3, #1
 8001b18:	617a      	str	r2, [r7, #20]
 8001b1a:	781a      	ldrb	r2, [r3, #0]
 8001b1c:	4b59      	ldr	r3, [pc, #356]	; (8001c84 <parseDHCPMSG+0x428>)
 8001b1e:	701a      	strb	r2, [r3, #0]
   				DHCP_allocated_gw[1] = *p++;
 8001b20:	697b      	ldr	r3, [r7, #20]
 8001b22:	1c5a      	adds	r2, r3, #1
 8001b24:	617a      	str	r2, [r7, #20]
 8001b26:	781a      	ldrb	r2, [r3, #0]
 8001b28:	4b56      	ldr	r3, [pc, #344]	; (8001c84 <parseDHCPMSG+0x428>)
 8001b2a:	705a      	strb	r2, [r3, #1]
   				DHCP_allocated_gw[2] = *p++;
 8001b2c:	697b      	ldr	r3, [r7, #20]
 8001b2e:	1c5a      	adds	r2, r3, #1
 8001b30:	617a      	str	r2, [r7, #20]
 8001b32:	781a      	ldrb	r2, [r3, #0]
 8001b34:	4b53      	ldr	r3, [pc, #332]	; (8001c84 <parseDHCPMSG+0x428>)
 8001b36:	709a      	strb	r2, [r3, #2]
   				DHCP_allocated_gw[3] = *p++;
 8001b38:	697b      	ldr	r3, [r7, #20]
 8001b3a:	1c5a      	adds	r2, r3, #1
 8001b3c:	617a      	str	r2, [r7, #20]
 8001b3e:	781a      	ldrb	r2, [r3, #0]
 8001b40:	4b50      	ldr	r3, [pc, #320]	; (8001c84 <parseDHCPMSG+0x428>)
 8001b42:	70da      	strb	r2, [r3, #3]
   				p = p + (opt_len - 4);
 8001b44:	7afb      	ldrb	r3, [r7, #11]
 8001b46:	3b04      	subs	r3, #4
 8001b48:	697a      	ldr	r2, [r7, #20]
 8001b4a:	4413      	add	r3, r2
 8001b4c:	617b      	str	r3, [r7, #20]
   				break;
 8001b4e:	e08d      	b.n	8001c6c <parseDHCPMSG+0x410>
   			case dns :
   				p++;                  
 8001b50:	697b      	ldr	r3, [r7, #20]
 8001b52:	3301      	adds	r3, #1
 8001b54:	617b      	str	r3, [r7, #20]
   				opt_len = *p++;       
 8001b56:	697b      	ldr	r3, [r7, #20]
 8001b58:	1c5a      	adds	r2, r3, #1
 8001b5a:	617a      	str	r2, [r7, #20]
 8001b5c:	781b      	ldrb	r3, [r3, #0]
 8001b5e:	72fb      	strb	r3, [r7, #11]
   				DHCP_allocated_dns[0] = *p++;
 8001b60:	697b      	ldr	r3, [r7, #20]
 8001b62:	1c5a      	adds	r2, r3, #1
 8001b64:	617a      	str	r2, [r7, #20]
 8001b66:	781a      	ldrb	r2, [r3, #0]
 8001b68:	4b47      	ldr	r3, [pc, #284]	; (8001c88 <parseDHCPMSG+0x42c>)
 8001b6a:	701a      	strb	r2, [r3, #0]
   				DHCP_allocated_dns[1] = *p++;
 8001b6c:	697b      	ldr	r3, [r7, #20]
 8001b6e:	1c5a      	adds	r2, r3, #1
 8001b70:	617a      	str	r2, [r7, #20]
 8001b72:	781a      	ldrb	r2, [r3, #0]
 8001b74:	4b44      	ldr	r3, [pc, #272]	; (8001c88 <parseDHCPMSG+0x42c>)
 8001b76:	705a      	strb	r2, [r3, #1]
   				DHCP_allocated_dns[2] = *p++;
 8001b78:	697b      	ldr	r3, [r7, #20]
 8001b7a:	1c5a      	adds	r2, r3, #1
 8001b7c:	617a      	str	r2, [r7, #20]
 8001b7e:	781a      	ldrb	r2, [r3, #0]
 8001b80:	4b41      	ldr	r3, [pc, #260]	; (8001c88 <parseDHCPMSG+0x42c>)
 8001b82:	709a      	strb	r2, [r3, #2]
   				DHCP_allocated_dns[3] = *p++;
 8001b84:	697b      	ldr	r3, [r7, #20]
 8001b86:	1c5a      	adds	r2, r3, #1
 8001b88:	617a      	str	r2, [r7, #20]
 8001b8a:	781a      	ldrb	r2, [r3, #0]
 8001b8c:	4b3e      	ldr	r3, [pc, #248]	; (8001c88 <parseDHCPMSG+0x42c>)
 8001b8e:	70da      	strb	r2, [r3, #3]
   				p = p + (opt_len - 4);
 8001b90:	7afb      	ldrb	r3, [r7, #11]
 8001b92:	3b04      	subs	r3, #4
 8001b94:	697a      	ldr	r2, [r7, #20]
 8001b96:	4413      	add	r3, r2
 8001b98:	617b      	str	r3, [r7, #20]
   				break;
 8001b9a:	e067      	b.n	8001c6c <parseDHCPMSG+0x410>
   			case dhcpIPaddrLeaseTime :
   				p++;
 8001b9c:	697b      	ldr	r3, [r7, #20]
 8001b9e:	3301      	adds	r3, #1
 8001ba0:	617b      	str	r3, [r7, #20]
   				opt_len = *p++;
 8001ba2:	697b      	ldr	r3, [r7, #20]
 8001ba4:	1c5a      	adds	r2, r3, #1
 8001ba6:	617a      	str	r2, [r7, #20]
 8001ba8:	781b      	ldrb	r3, [r3, #0]
 8001baa:	72fb      	strb	r3, [r7, #11]
   				dhcp_lease_time  = *p++;
 8001bac:	697b      	ldr	r3, [r7, #20]
 8001bae:	1c5a      	adds	r2, r3, #1
 8001bb0:	617a      	str	r2, [r7, #20]
 8001bb2:	781b      	ldrb	r3, [r3, #0]
 8001bb4:	461a      	mov	r2, r3
 8001bb6:	4b35      	ldr	r3, [pc, #212]	; (8001c8c <parseDHCPMSG+0x430>)
 8001bb8:	601a      	str	r2, [r3, #0]
   				dhcp_lease_time  = (dhcp_lease_time << 8) + *p++;
 8001bba:	4b34      	ldr	r3, [pc, #208]	; (8001c8c <parseDHCPMSG+0x430>)
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	021a      	lsls	r2, r3, #8
 8001bc0:	697b      	ldr	r3, [r7, #20]
 8001bc2:	1c59      	adds	r1, r3, #1
 8001bc4:	6179      	str	r1, [r7, #20]
 8001bc6:	781b      	ldrb	r3, [r3, #0]
 8001bc8:	4413      	add	r3, r2
 8001bca:	4a30      	ldr	r2, [pc, #192]	; (8001c8c <parseDHCPMSG+0x430>)
 8001bcc:	6013      	str	r3, [r2, #0]
   				dhcp_lease_time  = (dhcp_lease_time << 8) + *p++;
 8001bce:	4b2f      	ldr	r3, [pc, #188]	; (8001c8c <parseDHCPMSG+0x430>)
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	021a      	lsls	r2, r3, #8
 8001bd4:	697b      	ldr	r3, [r7, #20]
 8001bd6:	1c59      	adds	r1, r3, #1
 8001bd8:	6179      	str	r1, [r7, #20]
 8001bda:	781b      	ldrb	r3, [r3, #0]
 8001bdc:	4413      	add	r3, r2
 8001bde:	4a2b      	ldr	r2, [pc, #172]	; (8001c8c <parseDHCPMSG+0x430>)
 8001be0:	6013      	str	r3, [r2, #0]
   				dhcp_lease_time  = (dhcp_lease_time << 8) + *p++;
 8001be2:	4b2a      	ldr	r3, [pc, #168]	; (8001c8c <parseDHCPMSG+0x430>)
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	021a      	lsls	r2, r3, #8
 8001be8:	697b      	ldr	r3, [r7, #20]
 8001bea:	1c59      	adds	r1, r3, #1
 8001bec:	6179      	str	r1, [r7, #20]
 8001bee:	781b      	ldrb	r3, [r3, #0]
 8001bf0:	4413      	add	r3, r2
 8001bf2:	4a26      	ldr	r2, [pc, #152]	; (8001c8c <parseDHCPMSG+0x430>)
 8001bf4:	6013      	str	r3, [r2, #0]
            #ifdef _DHCP_DEBUG_  
               dhcp_lease_time = 10;
 				#endif
   				break;
 8001bf6:	e039      	b.n	8001c6c <parseDHCPMSG+0x410>
   			case dhcpServerIdentifier :
   				p++;
 8001bf8:	697b      	ldr	r3, [r7, #20]
 8001bfa:	3301      	adds	r3, #1
 8001bfc:	617b      	str	r3, [r7, #20]
   				opt_len = *p++;
 8001bfe:	697b      	ldr	r3, [r7, #20]
 8001c00:	1c5a      	adds	r2, r3, #1
 8001c02:	617a      	str	r2, [r7, #20]
 8001c04:	781b      	ldrb	r3, [r3, #0]
 8001c06:	72fb      	strb	r3, [r7, #11]
   				DHCP_SIP[0] = *p++;
 8001c08:	697b      	ldr	r3, [r7, #20]
 8001c0a:	1c5a      	adds	r2, r3, #1
 8001c0c:	617a      	str	r2, [r7, #20]
 8001c0e:	781a      	ldrb	r2, [r3, #0]
 8001c10:	4b1f      	ldr	r3, [pc, #124]	; (8001c90 <parseDHCPMSG+0x434>)
 8001c12:	701a      	strb	r2, [r3, #0]
   				DHCP_SIP[1] = *p++;
 8001c14:	697b      	ldr	r3, [r7, #20]
 8001c16:	1c5a      	adds	r2, r3, #1
 8001c18:	617a      	str	r2, [r7, #20]
 8001c1a:	781a      	ldrb	r2, [r3, #0]
 8001c1c:	4b1c      	ldr	r3, [pc, #112]	; (8001c90 <parseDHCPMSG+0x434>)
 8001c1e:	705a      	strb	r2, [r3, #1]
   				DHCP_SIP[2] = *p++;
 8001c20:	697b      	ldr	r3, [r7, #20]
 8001c22:	1c5a      	adds	r2, r3, #1
 8001c24:	617a      	str	r2, [r7, #20]
 8001c26:	781a      	ldrb	r2, [r3, #0]
 8001c28:	4b19      	ldr	r3, [pc, #100]	; (8001c90 <parseDHCPMSG+0x434>)
 8001c2a:	709a      	strb	r2, [r3, #2]
   				DHCP_SIP[3] = *p++;
 8001c2c:	697b      	ldr	r3, [r7, #20]
 8001c2e:	1c5a      	adds	r2, r3, #1
 8001c30:	617a      	str	r2, [r7, #20]
 8001c32:	781a      	ldrb	r2, [r3, #0]
 8001c34:	4b16      	ldr	r3, [pc, #88]	; (8001c90 <parseDHCPMSG+0x434>)
 8001c36:	70da      	strb	r2, [r3, #3]
                DHCP_REAL_SIP[0]=svr_addr[0];
 8001c38:	793a      	ldrb	r2, [r7, #4]
 8001c3a:	4b16      	ldr	r3, [pc, #88]	; (8001c94 <parseDHCPMSG+0x438>)
 8001c3c:	701a      	strb	r2, [r3, #0]
                DHCP_REAL_SIP[1]=svr_addr[1];
 8001c3e:	797a      	ldrb	r2, [r7, #5]
 8001c40:	4b14      	ldr	r3, [pc, #80]	; (8001c94 <parseDHCPMSG+0x438>)
 8001c42:	705a      	strb	r2, [r3, #1]
                DHCP_REAL_SIP[2]=svr_addr[2];
 8001c44:	79ba      	ldrb	r2, [r7, #6]
 8001c46:	4b13      	ldr	r3, [pc, #76]	; (8001c94 <parseDHCPMSG+0x438>)
 8001c48:	709a      	strb	r2, [r3, #2]
                DHCP_REAL_SIP[3]=svr_addr[3];
 8001c4a:	79fa      	ldrb	r2, [r7, #7]
 8001c4c:	4b11      	ldr	r3, [pc, #68]	; (8001c94 <parseDHCPMSG+0x438>)
 8001c4e:	70da      	strb	r2, [r3, #3]
   				break;
 8001c50:	e00c      	b.n	8001c6c <parseDHCPMSG+0x410>
   			default :
   				p++;
 8001c52:	697b      	ldr	r3, [r7, #20]
 8001c54:	3301      	adds	r3, #1
 8001c56:	617b      	str	r3, [r7, #20]
   				opt_len = *p++;
 8001c58:	697b      	ldr	r3, [r7, #20]
 8001c5a:	1c5a      	adds	r2, r3, #1
 8001c5c:	617a      	str	r2, [r7, #20]
 8001c5e:	781b      	ldrb	r3, [r3, #0]
 8001c60:	72fb      	strb	r3, [r7, #11]
   				p += opt_len;
 8001c62:	7afb      	ldrb	r3, [r7, #11]
 8001c64:	697a      	ldr	r2, [r7, #20]
 8001c66:	4413      	add	r3, r2
 8001c68:	617b      	str	r3, [r7, #20]
   				break;
 8001c6a:	bf00      	nop
		while ( p < e ) {
 8001c6c:	697a      	ldr	r2, [r7, #20]
 8001c6e:	68fb      	ldr	r3, [r7, #12]
 8001c70:	429a      	cmp	r2, r3
 8001c72:	f4ff ae8a 	bcc.w	800198a <parseDHCPMSG+0x12e>
			} // switch
		} // while
	} // if
	return	type;
 8001c76:	f997 3013 	ldrsb.w	r3, [r7, #19]
}
 8001c7a:	4618      	mov	r0, r3
 8001c7c:	371c      	adds	r7, #28
 8001c7e:	46bd      	mov	sp, r7
 8001c80:	bd90      	pop	{r4, r7, pc}
 8001c82:	bf00      	nop
 8001c84:	200000e4 	.word	0x200000e4
 8001c88:	200000ec 	.word	0x200000ec
 8001c8c:	20000000 	.word	0x20000000
 8001c90:	200001a0 	.word	0x200001a0
 8001c94:	2000019c 	.word	0x2000019c

08001c98 <DHCP_run>:

uint8_t DHCP_run(void)
{
 8001c98:	b580      	push	{r7, lr}
 8001c9a:	b082      	sub	sp, #8
 8001c9c:	af00      	add	r7, sp, #0
	uint8_t  type;
	uint8_t  ret;

	if(dhcp_state == STATE_DHCP_STOP) return DHCP_STOPPED;
 8001c9e:	4b7f      	ldr	r3, [pc, #508]	; (8001e9c <DHCP_run+0x204>)
 8001ca0:	f993 3000 	ldrsb.w	r3, [r3]
 8001ca4:	2b06      	cmp	r3, #6
 8001ca6:	d101      	bne.n	8001cac <DHCP_run+0x14>
 8001ca8:	2305      	movs	r3, #5
 8001caa:	e0f3      	b.n	8001e94 <DHCP_run+0x1fc>

	if(getSn_SR(DHCP_SOCKET) != SOCK_UDP)
 8001cac:	4b7c      	ldr	r3, [pc, #496]	; (8001ea0 <DHCP_run+0x208>)
 8001cae:	781b      	ldrb	r3, [r3, #0]
 8001cb0:	009b      	lsls	r3, r3, #2
 8001cb2:	3301      	adds	r3, #1
 8001cb4:	00db      	lsls	r3, r3, #3
 8001cb6:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8001cba:	4618      	mov	r0, r3
 8001cbc:	f003 fbaa 	bl	8005414 <WIZCHIP_READ>
 8001cc0:	4603      	mov	r3, r0
 8001cc2:	2b22      	cmp	r3, #34	; 0x22
 8001cc4:	d006      	beq.n	8001cd4 <DHCP_run+0x3c>
	   socket(DHCP_SOCKET, Sn_MR_UDP, DHCP_CLIENT_PORT, 0x00);
 8001cc6:	4b76      	ldr	r3, [pc, #472]	; (8001ea0 <DHCP_run+0x208>)
 8001cc8:	7818      	ldrb	r0, [r3, #0]
 8001cca:	2300      	movs	r3, #0
 8001ccc:	2244      	movs	r2, #68	; 0x44
 8001cce:	2102      	movs	r1, #2
 8001cd0:	f002 f80a 	bl	8003ce8 <socket>

	ret = DHCP_RUNNING;
 8001cd4:	2301      	movs	r3, #1
 8001cd6:	71fb      	strb	r3, [r7, #7]
	type = parseDHCPMSG();
 8001cd8:	f7ff fdc0 	bl	800185c <parseDHCPMSG>
 8001cdc:	4603      	mov	r3, r0
 8001cde:	71bb      	strb	r3, [r7, #6]

	switch ( dhcp_state ) {
 8001ce0:	4b6e      	ldr	r3, [pc, #440]	; (8001e9c <DHCP_run+0x204>)
 8001ce2:	f993 3000 	ldrsb.w	r3, [r3]
 8001ce6:	2b04      	cmp	r3, #4
 8001ce8:	f200 80d0 	bhi.w	8001e8c <DHCP_run+0x1f4>
 8001cec:	a201      	add	r2, pc, #4	; (adr r2, 8001cf4 <DHCP_run+0x5c>)
 8001cee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001cf2:	bf00      	nop
 8001cf4:	08001d09 	.word	0x08001d09
 8001cf8:	08001d2d 	.word	0x08001d2d
 8001cfc:	08001d71 	.word	0x08001d71
 8001d00:	08001dc1 	.word	0x08001dc1
 8001d04:	08001e1b 	.word	0x08001e1b
	   case STATE_DHCP_INIT     :
         DHCP_allocated_ip[0] = 0;
 8001d08:	4b66      	ldr	r3, [pc, #408]	; (8001ea4 <DHCP_run+0x20c>)
 8001d0a:	2200      	movs	r2, #0
 8001d0c:	701a      	strb	r2, [r3, #0]
         DHCP_allocated_ip[1] = 0;
 8001d0e:	4b65      	ldr	r3, [pc, #404]	; (8001ea4 <DHCP_run+0x20c>)
 8001d10:	2200      	movs	r2, #0
 8001d12:	705a      	strb	r2, [r3, #1]
         DHCP_allocated_ip[2] = 0;
 8001d14:	4b63      	ldr	r3, [pc, #396]	; (8001ea4 <DHCP_run+0x20c>)
 8001d16:	2200      	movs	r2, #0
 8001d18:	709a      	strb	r2, [r3, #2]
         DHCP_allocated_ip[3] = 0;
 8001d1a:	4b62      	ldr	r3, [pc, #392]	; (8001ea4 <DHCP_run+0x20c>)
 8001d1c:	2200      	movs	r2, #0
 8001d1e:	70da      	strb	r2, [r3, #3]
   		send_DHCP_DISCOVER();
 8001d20:	f7fe fffa 	bl	8000d18 <send_DHCP_DISCOVER>
   		dhcp_state = STATE_DHCP_DISCOVER;
 8001d24:	4b5d      	ldr	r3, [pc, #372]	; (8001e9c <DHCP_run+0x204>)
 8001d26:	2201      	movs	r2, #1
 8001d28:	701a      	strb	r2, [r3, #0]
   		break;
 8001d2a:	e0b2      	b.n	8001e92 <DHCP_run+0x1fa>
		case STATE_DHCP_DISCOVER :
			if (type == DHCP_OFFER){
 8001d2c:	79bb      	ldrb	r3, [r7, #6]
 8001d2e:	2b02      	cmp	r3, #2
 8001d30:	d119      	bne.n	8001d66 <DHCP_run+0xce>
#ifdef _DHCP_DEBUG_
				printf("> Receive DHCP_OFFER\r\n");
#endif
            DHCP_allocated_ip[0] = pDHCPMSG->yiaddr[0];
 8001d32:	4b5d      	ldr	r3, [pc, #372]	; (8001ea8 <DHCP_run+0x210>)
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	7c1a      	ldrb	r2, [r3, #16]
 8001d38:	4b5a      	ldr	r3, [pc, #360]	; (8001ea4 <DHCP_run+0x20c>)
 8001d3a:	701a      	strb	r2, [r3, #0]
            DHCP_allocated_ip[1] = pDHCPMSG->yiaddr[1];
 8001d3c:	4b5a      	ldr	r3, [pc, #360]	; (8001ea8 <DHCP_run+0x210>)
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	7c5a      	ldrb	r2, [r3, #17]
 8001d42:	4b58      	ldr	r3, [pc, #352]	; (8001ea4 <DHCP_run+0x20c>)
 8001d44:	705a      	strb	r2, [r3, #1]
            DHCP_allocated_ip[2] = pDHCPMSG->yiaddr[2];
 8001d46:	4b58      	ldr	r3, [pc, #352]	; (8001ea8 <DHCP_run+0x210>)
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	7c9a      	ldrb	r2, [r3, #18]
 8001d4c:	4b55      	ldr	r3, [pc, #340]	; (8001ea4 <DHCP_run+0x20c>)
 8001d4e:	709a      	strb	r2, [r3, #2]
            DHCP_allocated_ip[3] = pDHCPMSG->yiaddr[3];
 8001d50:	4b55      	ldr	r3, [pc, #340]	; (8001ea8 <DHCP_run+0x210>)
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	7cda      	ldrb	r2, [r3, #19]
 8001d56:	4b53      	ldr	r3, [pc, #332]	; (8001ea4 <DHCP_run+0x20c>)
 8001d58:	70da      	strb	r2, [r3, #3]

				send_DHCP_REQUEST();
 8001d5a:	f7ff f9a3 	bl	80010a4 <send_DHCP_REQUEST>
				dhcp_state = STATE_DHCP_REQUEST;
 8001d5e:	4b4f      	ldr	r3, [pc, #316]	; (8001e9c <DHCP_run+0x204>)
 8001d60:	2202      	movs	r2, #2
 8001d62:	701a      	strb	r2, [r3, #0]
			} else ret = check_DHCP_timeout();
         break;
 8001d64:	e095      	b.n	8001e92 <DHCP_run+0x1fa>
			} else ret = check_DHCP_timeout();
 8001d66:	f000 f8b1 	bl	8001ecc <check_DHCP_timeout>
 8001d6a:	4603      	mov	r3, r0
 8001d6c:	71fb      	strb	r3, [r7, #7]
         break;
 8001d6e:	e090      	b.n	8001e92 <DHCP_run+0x1fa>

		case STATE_DHCP_REQUEST :
			if (type == DHCP_ACK) {
 8001d70:	79bb      	ldrb	r3, [r7, #6]
 8001d72:	2b05      	cmp	r3, #5
 8001d74:	d116      	bne.n	8001da4 <DHCP_run+0x10c>

#ifdef _DHCP_DEBUG_
				printf("> Receive DHCP_ACK\r\n");
#endif
				if (check_DHCP_leasedIP()) {
 8001d76:	f000 f909 	bl	8001f8c <check_DHCP_leasedIP>
 8001d7a:	4603      	mov	r3, r0
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d008      	beq.n	8001d92 <DHCP_run+0xfa>
					// Network info assignment from DHCP
					dhcp_ip_assign();
 8001d80:	4b4a      	ldr	r3, [pc, #296]	; (8001eac <DHCP_run+0x214>)
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	4798      	blx	r3
					reset_DHCP_timeout();
 8001d86:	f000 f9d3 	bl	8002130 <reset_DHCP_timeout>

					dhcp_state = STATE_DHCP_LEASED;
 8001d8a:	4b44      	ldr	r3, [pc, #272]	; (8001e9c <DHCP_run+0x204>)
 8001d8c:	2203      	movs	r2, #3
 8001d8e:	701a      	strb	r2, [r3, #0]

				reset_DHCP_timeout();

				dhcp_state = STATE_DHCP_DISCOVER;
			} else ret = check_DHCP_timeout();
		break;
 8001d90:	e07f      	b.n	8001e92 <DHCP_run+0x1fa>
					reset_DHCP_timeout();
 8001d92:	f000 f9cd 	bl	8002130 <reset_DHCP_timeout>
					dhcp_ip_conflict();
 8001d96:	4b46      	ldr	r3, [pc, #280]	; (8001eb0 <DHCP_run+0x218>)
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	4798      	blx	r3
				    dhcp_state = STATE_DHCP_INIT;
 8001d9c:	4b3f      	ldr	r3, [pc, #252]	; (8001e9c <DHCP_run+0x204>)
 8001d9e:	2200      	movs	r2, #0
 8001da0:	701a      	strb	r2, [r3, #0]
		break;
 8001da2:	e076      	b.n	8001e92 <DHCP_run+0x1fa>
			} else if (type == DHCP_NAK) {
 8001da4:	79bb      	ldrb	r3, [r7, #6]
 8001da6:	2b06      	cmp	r3, #6
 8001da8:	d105      	bne.n	8001db6 <DHCP_run+0x11e>
				reset_DHCP_timeout();
 8001daa:	f000 f9c1 	bl	8002130 <reset_DHCP_timeout>
				dhcp_state = STATE_DHCP_DISCOVER;
 8001dae:	4b3b      	ldr	r3, [pc, #236]	; (8001e9c <DHCP_run+0x204>)
 8001db0:	2201      	movs	r2, #1
 8001db2:	701a      	strb	r2, [r3, #0]
		break;
 8001db4:	e06d      	b.n	8001e92 <DHCP_run+0x1fa>
			} else ret = check_DHCP_timeout();
 8001db6:	f000 f889 	bl	8001ecc <check_DHCP_timeout>
 8001dba:	4603      	mov	r3, r0
 8001dbc:	71fb      	strb	r3, [r7, #7]
		break;
 8001dbe:	e068      	b.n	8001e92 <DHCP_run+0x1fa>

		case STATE_DHCP_LEASED :
		   ret = DHCP_IP_LEASED;
 8001dc0:	2304      	movs	r3, #4
 8001dc2:	71fb      	strb	r3, [r7, #7]
			if ((dhcp_lease_time != INFINITE_LEASETIME) && ((dhcp_lease_time/2) < dhcp_tick_1s)) {
 8001dc4:	4b3b      	ldr	r3, [pc, #236]	; (8001eb4 <DHCP_run+0x21c>)
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001dcc:	d060      	beq.n	8001e90 <DHCP_run+0x1f8>
 8001dce:	4b39      	ldr	r3, [pc, #228]	; (8001eb4 <DHCP_run+0x21c>)
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	085a      	lsrs	r2, r3, #1
 8001dd4:	4b38      	ldr	r3, [pc, #224]	; (8001eb8 <DHCP_run+0x220>)
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	429a      	cmp	r2, r3
 8001dda:	d259      	bcs.n	8001e90 <DHCP_run+0x1f8>
				
#ifdef _DHCP_DEBUG_
 				printf("> Maintains the IP address \r\n");
#endif

				type = 0;
 8001ddc:	2300      	movs	r3, #0
 8001dde:	71bb      	strb	r3, [r7, #6]
				OLD_allocated_ip[0] = DHCP_allocated_ip[0];
 8001de0:	4b30      	ldr	r3, [pc, #192]	; (8001ea4 <DHCP_run+0x20c>)
 8001de2:	781a      	ldrb	r2, [r3, #0]
 8001de4:	4b35      	ldr	r3, [pc, #212]	; (8001ebc <DHCP_run+0x224>)
 8001de6:	701a      	strb	r2, [r3, #0]
				OLD_allocated_ip[1] = DHCP_allocated_ip[1];
 8001de8:	4b2e      	ldr	r3, [pc, #184]	; (8001ea4 <DHCP_run+0x20c>)
 8001dea:	785a      	ldrb	r2, [r3, #1]
 8001dec:	4b33      	ldr	r3, [pc, #204]	; (8001ebc <DHCP_run+0x224>)
 8001dee:	705a      	strb	r2, [r3, #1]
				OLD_allocated_ip[2] = DHCP_allocated_ip[2];
 8001df0:	4b2c      	ldr	r3, [pc, #176]	; (8001ea4 <DHCP_run+0x20c>)
 8001df2:	789a      	ldrb	r2, [r3, #2]
 8001df4:	4b31      	ldr	r3, [pc, #196]	; (8001ebc <DHCP_run+0x224>)
 8001df6:	709a      	strb	r2, [r3, #2]
				OLD_allocated_ip[3] = DHCP_allocated_ip[3];
 8001df8:	4b2a      	ldr	r3, [pc, #168]	; (8001ea4 <DHCP_run+0x20c>)
 8001dfa:	78da      	ldrb	r2, [r3, #3]
 8001dfc:	4b2f      	ldr	r3, [pc, #188]	; (8001ebc <DHCP_run+0x224>)
 8001dfe:	70da      	strb	r2, [r3, #3]
				
				DHCP_XID++;
 8001e00:	4b2f      	ldr	r3, [pc, #188]	; (8001ec0 <DHCP_run+0x228>)
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	3301      	adds	r3, #1
 8001e06:	4a2e      	ldr	r2, [pc, #184]	; (8001ec0 <DHCP_run+0x228>)
 8001e08:	6013      	str	r3, [r2, #0]

				send_DHCP_REQUEST();
 8001e0a:	f7ff f94b 	bl	80010a4 <send_DHCP_REQUEST>

				reset_DHCP_timeout();
 8001e0e:	f000 f98f 	bl	8002130 <reset_DHCP_timeout>

				dhcp_state = STATE_DHCP_REREQUEST;
 8001e12:	4b22      	ldr	r3, [pc, #136]	; (8001e9c <DHCP_run+0x204>)
 8001e14:	2204      	movs	r2, #4
 8001e16:	701a      	strb	r2, [r3, #0]
			}
		break;
 8001e18:	e03a      	b.n	8001e90 <DHCP_run+0x1f8>

		case STATE_DHCP_REREQUEST :
		   ret = DHCP_IP_LEASED;
 8001e1a:	2304      	movs	r3, #4
 8001e1c:	71fb      	strb	r3, [r7, #7]
			if (type == DHCP_ACK) {
 8001e1e:	79bb      	ldrb	r3, [r7, #6]
 8001e20:	2b05      	cmp	r3, #5
 8001e22:	d125      	bne.n	8001e70 <DHCP_run+0x1d8>
				dhcp_retry_count = 0;
 8001e24:	4b27      	ldr	r3, [pc, #156]	; (8001ec4 <DHCP_run+0x22c>)
 8001e26:	2200      	movs	r2, #0
 8001e28:	701a      	strb	r2, [r3, #0]
				if (OLD_allocated_ip[0] != DHCP_allocated_ip[0] || 
 8001e2a:	4b24      	ldr	r3, [pc, #144]	; (8001ebc <DHCP_run+0x224>)
 8001e2c:	781a      	ldrb	r2, [r3, #0]
 8001e2e:	4b1d      	ldr	r3, [pc, #116]	; (8001ea4 <DHCP_run+0x20c>)
 8001e30:	781b      	ldrb	r3, [r3, #0]
 8001e32:	429a      	cmp	r2, r3
 8001e34:	d111      	bne.n	8001e5a <DHCP_run+0x1c2>
				    OLD_allocated_ip[1] != DHCP_allocated_ip[1] ||
 8001e36:	4b21      	ldr	r3, [pc, #132]	; (8001ebc <DHCP_run+0x224>)
 8001e38:	785a      	ldrb	r2, [r3, #1]
 8001e3a:	4b1a      	ldr	r3, [pc, #104]	; (8001ea4 <DHCP_run+0x20c>)
 8001e3c:	785b      	ldrb	r3, [r3, #1]
				if (OLD_allocated_ip[0] != DHCP_allocated_ip[0] || 
 8001e3e:	429a      	cmp	r2, r3
 8001e40:	d10b      	bne.n	8001e5a <DHCP_run+0x1c2>
				    OLD_allocated_ip[2] != DHCP_allocated_ip[2] ||
 8001e42:	4b1e      	ldr	r3, [pc, #120]	; (8001ebc <DHCP_run+0x224>)
 8001e44:	789a      	ldrb	r2, [r3, #2]
 8001e46:	4b17      	ldr	r3, [pc, #92]	; (8001ea4 <DHCP_run+0x20c>)
 8001e48:	789b      	ldrb	r3, [r3, #2]
				    OLD_allocated_ip[1] != DHCP_allocated_ip[1] ||
 8001e4a:	429a      	cmp	r2, r3
 8001e4c:	d105      	bne.n	8001e5a <DHCP_run+0x1c2>
				    OLD_allocated_ip[3] != DHCP_allocated_ip[3]) 
 8001e4e:	4b1b      	ldr	r3, [pc, #108]	; (8001ebc <DHCP_run+0x224>)
 8001e50:	78da      	ldrb	r2, [r3, #3]
 8001e52:	4b14      	ldr	r3, [pc, #80]	; (8001ea4 <DHCP_run+0x20c>)
 8001e54:	78db      	ldrb	r3, [r3, #3]
				    OLD_allocated_ip[2] != DHCP_allocated_ip[2] ||
 8001e56:	429a      	cmp	r2, r3
 8001e58:	d004      	beq.n	8001e64 <DHCP_run+0x1cc>
				{
					ret = DHCP_IP_CHANGED;
 8001e5a:	2303      	movs	r3, #3
 8001e5c:	71fb      	strb	r3, [r7, #7]
					dhcp_ip_update();
 8001e5e:	4b1a      	ldr	r3, [pc, #104]	; (8001ec8 <DHCP_run+0x230>)
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	4798      	blx	r3
					
				}
         #ifdef _DHCP_DEBUG_
            else printf(">IP is continued.\r\n");
         #endif            				
				reset_DHCP_timeout();
 8001e64:	f000 f964 	bl	8002130 <reset_DHCP_timeout>
				dhcp_state = STATE_DHCP_LEASED;
 8001e68:	4b0c      	ldr	r3, [pc, #48]	; (8001e9c <DHCP_run+0x204>)
 8001e6a:	2203      	movs	r2, #3
 8001e6c:	701a      	strb	r2, [r3, #0]

				reset_DHCP_timeout();

				dhcp_state = STATE_DHCP_DISCOVER;
			} else ret = check_DHCP_timeout();
	   	break;
 8001e6e:	e010      	b.n	8001e92 <DHCP_run+0x1fa>
			} else if (type == DHCP_NAK) {
 8001e70:	79bb      	ldrb	r3, [r7, #6]
 8001e72:	2b06      	cmp	r3, #6
 8001e74:	d105      	bne.n	8001e82 <DHCP_run+0x1ea>
				reset_DHCP_timeout();
 8001e76:	f000 f95b 	bl	8002130 <reset_DHCP_timeout>
				dhcp_state = STATE_DHCP_DISCOVER;
 8001e7a:	4b08      	ldr	r3, [pc, #32]	; (8001e9c <DHCP_run+0x204>)
 8001e7c:	2201      	movs	r2, #1
 8001e7e:	701a      	strb	r2, [r3, #0]
	   	break;
 8001e80:	e007      	b.n	8001e92 <DHCP_run+0x1fa>
			} else ret = check_DHCP_timeout();
 8001e82:	f000 f823 	bl	8001ecc <check_DHCP_timeout>
 8001e86:	4603      	mov	r3, r0
 8001e88:	71fb      	strb	r3, [r7, #7]
	   	break;
 8001e8a:	e002      	b.n	8001e92 <DHCP_run+0x1fa>
		default :
   		break;
 8001e8c:	bf00      	nop
 8001e8e:	e000      	b.n	8001e92 <DHCP_run+0x1fa>
		break;
 8001e90:	bf00      	nop
	}

	return ret;
 8001e92:	79fb      	ldrb	r3, [r7, #7]
}
 8001e94:	4618      	mov	r0, r3
 8001e96:	3708      	adds	r7, #8
 8001e98:	46bd      	mov	sp, r7
 8001e9a:	bd80      	pop	{r7, pc}
 8001e9c:	200000f0 	.word	0x200000f0
 8001ea0:	200001a8 	.word	0x200001a8
 8001ea4:	200000e0 	.word	0x200000e0
 8001ea8:	200001a4 	.word	0x200001a4
 8001eac:	20000010 	.word	0x20000010
 8001eb0:	20000018 	.word	0x20000018
 8001eb4:	20000000 	.word	0x20000000
 8001eb8:	200000f4 	.word	0x200000f4
 8001ebc:	200000dc 	.word	0x200000dc
 8001ec0:	20000198 	.word	0x20000198
 8001ec4:	200000f1 	.word	0x200000f1
 8001ec8:	20000014 	.word	0x20000014

08001ecc <check_DHCP_timeout>:
   close(DHCP_SOCKET);
   dhcp_state = STATE_DHCP_STOP;
}

uint8_t check_DHCP_timeout(void)
{
 8001ecc:	b580      	push	{r7, lr}
 8001ece:	b082      	sub	sp, #8
 8001ed0:	af00      	add	r7, sp, #0
	uint8_t ret = DHCP_RUNNING;
 8001ed2:	2301      	movs	r3, #1
 8001ed4:	71fb      	strb	r3, [r7, #7]
	
	if (dhcp_retry_count < MAX_DHCP_RETRY) {
 8001ed6:	4b29      	ldr	r3, [pc, #164]	; (8001f7c <check_DHCP_timeout+0xb0>)
 8001ed8:	f993 3000 	ldrsb.w	r3, [r3]
 8001edc:	2b01      	cmp	r3, #1
 8001ede:	dc2d      	bgt.n	8001f3c <check_DHCP_timeout+0x70>
		if (dhcp_tick_next < dhcp_tick_1s) {
 8001ee0:	4b27      	ldr	r3, [pc, #156]	; (8001f80 <check_DHCP_timeout+0xb4>)
 8001ee2:	681a      	ldr	r2, [r3, #0]
 8001ee4:	4b27      	ldr	r3, [pc, #156]	; (8001f84 <check_DHCP_timeout+0xb8>)
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	429a      	cmp	r2, r3
 8001eea:	d242      	bcs.n	8001f72 <check_DHCP_timeout+0xa6>

			switch ( dhcp_state ) {
 8001eec:	4b26      	ldr	r3, [pc, #152]	; (8001f88 <check_DHCP_timeout+0xbc>)
 8001eee:	f993 3000 	ldrsb.w	r3, [r3]
 8001ef2:	2b04      	cmp	r3, #4
 8001ef4:	d00c      	beq.n	8001f10 <check_DHCP_timeout+0x44>
 8001ef6:	2b04      	cmp	r3, #4
 8001ef8:	dc0d      	bgt.n	8001f16 <check_DHCP_timeout+0x4a>
 8001efa:	2b01      	cmp	r3, #1
 8001efc:	d002      	beq.n	8001f04 <check_DHCP_timeout+0x38>
 8001efe:	2b02      	cmp	r3, #2
 8001f00:	d003      	beq.n	8001f0a <check_DHCP_timeout+0x3e>
					
					send_DHCP_REQUEST();
				break;
		
				default :
				break;
 8001f02:	e008      	b.n	8001f16 <check_DHCP_timeout+0x4a>
					send_DHCP_DISCOVER();
 8001f04:	f7fe ff08 	bl	8000d18 <send_DHCP_DISCOVER>
				break;
 8001f08:	e006      	b.n	8001f18 <check_DHCP_timeout+0x4c>
					send_DHCP_REQUEST();
 8001f0a:	f7ff f8cb 	bl	80010a4 <send_DHCP_REQUEST>
				break;
 8001f0e:	e003      	b.n	8001f18 <check_DHCP_timeout+0x4c>
					send_DHCP_REQUEST();
 8001f10:	f7ff f8c8 	bl	80010a4 <send_DHCP_REQUEST>
				break;
 8001f14:	e000      	b.n	8001f18 <check_DHCP_timeout+0x4c>
				break;
 8001f16:	bf00      	nop
			}

			dhcp_tick_1s = 0;
 8001f18:	4b1a      	ldr	r3, [pc, #104]	; (8001f84 <check_DHCP_timeout+0xb8>)
 8001f1a:	2200      	movs	r2, #0
 8001f1c:	601a      	str	r2, [r3, #0]
			dhcp_tick_next = dhcp_tick_1s + DHCP_WAIT_TIME;
 8001f1e:	4b19      	ldr	r3, [pc, #100]	; (8001f84 <check_DHCP_timeout+0xb8>)
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	330a      	adds	r3, #10
 8001f24:	4a16      	ldr	r2, [pc, #88]	; (8001f80 <check_DHCP_timeout+0xb4>)
 8001f26:	6013      	str	r3, [r2, #0]
			dhcp_retry_count++;
 8001f28:	4b14      	ldr	r3, [pc, #80]	; (8001f7c <check_DHCP_timeout+0xb0>)
 8001f2a:	f993 3000 	ldrsb.w	r3, [r3]
 8001f2e:	b2db      	uxtb	r3, r3
 8001f30:	3301      	adds	r3, #1
 8001f32:	b2db      	uxtb	r3, r3
 8001f34:	b25a      	sxtb	r2, r3
 8001f36:	4b11      	ldr	r3, [pc, #68]	; (8001f7c <check_DHCP_timeout+0xb0>)
 8001f38:	701a      	strb	r2, [r3, #0]
 8001f3a:	e01a      	b.n	8001f72 <check_DHCP_timeout+0xa6>
		}
	} else { // timeout occurred

		switch(dhcp_state) {
 8001f3c:	4b12      	ldr	r3, [pc, #72]	; (8001f88 <check_DHCP_timeout+0xbc>)
 8001f3e:	f993 3000 	ldrsb.w	r3, [r3]
 8001f42:	2b04      	cmp	r3, #4
 8001f44:	d00c      	beq.n	8001f60 <check_DHCP_timeout+0x94>
 8001f46:	2b04      	cmp	r3, #4
 8001f48:	dc10      	bgt.n	8001f6c <check_DHCP_timeout+0xa0>
 8001f4a:	2b01      	cmp	r3, #1
 8001f4c:	d002      	beq.n	8001f54 <check_DHCP_timeout+0x88>
 8001f4e:	2b02      	cmp	r3, #2
 8001f50:	d006      	beq.n	8001f60 <check_DHCP_timeout+0x94>
			case STATE_DHCP_REREQUEST:
				send_DHCP_DISCOVER();
				dhcp_state = STATE_DHCP_DISCOVER;
				break;
			default :
				break;
 8001f52:	e00b      	b.n	8001f6c <check_DHCP_timeout+0xa0>
				dhcp_state = STATE_DHCP_INIT;
 8001f54:	4b0c      	ldr	r3, [pc, #48]	; (8001f88 <check_DHCP_timeout+0xbc>)
 8001f56:	2200      	movs	r2, #0
 8001f58:	701a      	strb	r2, [r3, #0]
				ret = DHCP_FAILED;
 8001f5a:	2300      	movs	r3, #0
 8001f5c:	71fb      	strb	r3, [r7, #7]
				break;
 8001f5e:	e006      	b.n	8001f6e <check_DHCP_timeout+0xa2>
				send_DHCP_DISCOVER();
 8001f60:	f7fe feda 	bl	8000d18 <send_DHCP_DISCOVER>
				dhcp_state = STATE_DHCP_DISCOVER;
 8001f64:	4b08      	ldr	r3, [pc, #32]	; (8001f88 <check_DHCP_timeout+0xbc>)
 8001f66:	2201      	movs	r2, #1
 8001f68:	701a      	strb	r2, [r3, #0]
				break;
 8001f6a:	e000      	b.n	8001f6e <check_DHCP_timeout+0xa2>
				break;
 8001f6c:	bf00      	nop
		}
		reset_DHCP_timeout();
 8001f6e:	f000 f8df 	bl	8002130 <reset_DHCP_timeout>
	}
	return ret;
 8001f72:	79fb      	ldrb	r3, [r7, #7]
}
 8001f74:	4618      	mov	r0, r3
 8001f76:	3708      	adds	r7, #8
 8001f78:	46bd      	mov	sp, r7
 8001f7a:	bd80      	pop	{r7, pc}
 8001f7c:	200000f1 	.word	0x200000f1
 8001f80:	20000004 	.word	0x20000004
 8001f84:	200000f4 	.word	0x200000f4
 8001f88:	200000f0 	.word	0x200000f0

08001f8c <check_DHCP_leasedIP>:

int8_t check_DHCP_leasedIP(void)
{
 8001f8c:	b580      	push	{r7, lr}
 8001f8e:	b084      	sub	sp, #16
 8001f90:	af02      	add	r7, sp, #8
	uint8_t tmp;
	int32_t ret;

	//WIZchip RCR value changed for ARP Timeout count control
	tmp = getRCR();
 8001f92:	f44f 50d8 	mov.w	r0, #6912	; 0x1b00
 8001f96:	f003 fa3d 	bl	8005414 <WIZCHIP_READ>
 8001f9a:	4603      	mov	r3, r0
 8001f9c:	71fb      	strb	r3, [r7, #7]
	setRCR(0x03);
 8001f9e:	2103      	movs	r1, #3
 8001fa0:	f44f 50d8 	mov.w	r0, #6912	; 0x1b00
 8001fa4:	f003 fa82 	bl	80054ac <WIZCHIP_WRITE>

	// IP conflict detection : ARP request - ARP reply
	// Broadcasting ARP Request for check the IP conflict using UDP sendto() function
	ret = sendto(DHCP_SOCKET, (uint8_t *)"CHECK_IP_CONFLICT", 17, DHCP_allocated_ip, 5000);
 8001fa8:	4b13      	ldr	r3, [pc, #76]	; (8001ff8 <check_DHCP_leasedIP+0x6c>)
 8001faa:	7818      	ldrb	r0, [r3, #0]
 8001fac:	f241 3388 	movw	r3, #5000	; 0x1388
 8001fb0:	9300      	str	r3, [sp, #0]
 8001fb2:	4b12      	ldr	r3, [pc, #72]	; (8001ffc <check_DHCP_leasedIP+0x70>)
 8001fb4:	2211      	movs	r2, #17
 8001fb6:	4912      	ldr	r1, [pc, #72]	; (8002000 <check_DHCP_leasedIP+0x74>)
 8001fb8:	f002 faa6 	bl	8004508 <sendto>
 8001fbc:	6038      	str	r0, [r7, #0]

	// RCR value restore
	setRCR(tmp);
 8001fbe:	79fb      	ldrb	r3, [r7, #7]
 8001fc0:	4619      	mov	r1, r3
 8001fc2:	f44f 50d8 	mov.w	r0, #6912	; 0x1b00
 8001fc6:	f003 fa71 	bl	80054ac <WIZCHIP_WRITE>

	if(ret == SOCKERR_TIMEOUT) {
 8001fca:	683b      	ldr	r3, [r7, #0]
 8001fcc:	f113 0f0d 	cmn.w	r3, #13
 8001fd0:	d101      	bne.n	8001fd6 <check_DHCP_leasedIP+0x4a>

#ifdef _DHCP_DEBUG_
		printf("\r\n> Check leased IP - OK\r\n");
#endif

		return 1;
 8001fd2:	2301      	movs	r3, #1
 8001fd4:	e00c      	b.n	8001ff0 <check_DHCP_leasedIP+0x64>
	} else {
		// Received ARP reply or etc : IP address conflict occur, DHCP Failed
		send_DHCP_DECLINE();
 8001fd6:	f7ff faef 	bl	80015b8 <send_DHCP_DECLINE>

		ret = dhcp_tick_1s;
 8001fda:	4b0a      	ldr	r3, [pc, #40]	; (8002004 <check_DHCP_leasedIP+0x78>)
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	603b      	str	r3, [r7, #0]
		while((dhcp_tick_1s - ret) < 2) ;   // wait for 1s over; wait to complete to send DECLINE message;
 8001fe0:	bf00      	nop
 8001fe2:	4b08      	ldr	r3, [pc, #32]	; (8002004 <check_DHCP_leasedIP+0x78>)
 8001fe4:	681a      	ldr	r2, [r3, #0]
 8001fe6:	683b      	ldr	r3, [r7, #0]
 8001fe8:	1ad3      	subs	r3, r2, r3
 8001fea:	2b01      	cmp	r3, #1
 8001fec:	d9f9      	bls.n	8001fe2 <check_DHCP_leasedIP+0x56>

		return 0;
 8001fee:	2300      	movs	r3, #0
	}
}	
 8001ff0:	4618      	mov	r0, r3
 8001ff2:	3708      	adds	r7, #8
 8001ff4:	46bd      	mov	sp, r7
 8001ff6:	bd80      	pop	{r7, pc}
 8001ff8:	200001a8 	.word	0x200001a8
 8001ffc:	200000e0 	.word	0x200000e0
 8002000:	0800bc88 	.word	0x0800bc88
 8002004:	200000f4 	.word	0x200000f4

08002008 <DHCP_init>:

void DHCP_init(uint8_t s, uint8_t * buf)
{
 8002008:	b580      	push	{r7, lr}
 800200a:	b084      	sub	sp, #16
 800200c:	af00      	add	r7, sp, #0
 800200e:	4603      	mov	r3, r0
 8002010:	6039      	str	r1, [r7, #0]
 8002012:	71fb      	strb	r3, [r7, #7]
   uint8_t zeroip[4] = {0,0,0,0};
 8002014:	2300      	movs	r3, #0
 8002016:	60fb      	str	r3, [r7, #12]
   getSHAR(DHCP_CHADDR);
 8002018:	2206      	movs	r2, #6
 800201a:	493f      	ldr	r1, [pc, #252]	; (8002118 <DHCP_init+0x110>)
 800201c:	f44f 6010 	mov.w	r0, #2304	; 0x900
 8002020:	f003 fa92 	bl	8005548 <WIZCHIP_READ_BUF>
   if((DHCP_CHADDR[0] | DHCP_CHADDR[1]  | DHCP_CHADDR[2] | DHCP_CHADDR[3] | DHCP_CHADDR[4] | DHCP_CHADDR[5]) == 0x00)
 8002024:	4b3c      	ldr	r3, [pc, #240]	; (8002118 <DHCP_init+0x110>)
 8002026:	781a      	ldrb	r2, [r3, #0]
 8002028:	4b3b      	ldr	r3, [pc, #236]	; (8002118 <DHCP_init+0x110>)
 800202a:	785b      	ldrb	r3, [r3, #1]
 800202c:	4313      	orrs	r3, r2
 800202e:	b2da      	uxtb	r2, r3
 8002030:	4b39      	ldr	r3, [pc, #228]	; (8002118 <DHCP_init+0x110>)
 8002032:	789b      	ldrb	r3, [r3, #2]
 8002034:	4313      	orrs	r3, r2
 8002036:	b2da      	uxtb	r2, r3
 8002038:	4b37      	ldr	r3, [pc, #220]	; (8002118 <DHCP_init+0x110>)
 800203a:	78db      	ldrb	r3, [r3, #3]
 800203c:	4313      	orrs	r3, r2
 800203e:	b2da      	uxtb	r2, r3
 8002040:	4b35      	ldr	r3, [pc, #212]	; (8002118 <DHCP_init+0x110>)
 8002042:	791b      	ldrb	r3, [r3, #4]
 8002044:	4313      	orrs	r3, r2
 8002046:	b2da      	uxtb	r2, r3
 8002048:	4b33      	ldr	r3, [pc, #204]	; (8002118 <DHCP_init+0x110>)
 800204a:	795b      	ldrb	r3, [r3, #5]
 800204c:	4313      	orrs	r3, r2
 800204e:	b2db      	uxtb	r3, r3
 8002050:	2b00      	cmp	r3, #0
 8002052:	d117      	bne.n	8002084 <DHCP_init+0x7c>
   {
      // assigning temporary mac address, you should be set SHAR before call this function. 
      DHCP_CHADDR[0] = 0x00;
 8002054:	4b30      	ldr	r3, [pc, #192]	; (8002118 <DHCP_init+0x110>)
 8002056:	2200      	movs	r2, #0
 8002058:	701a      	strb	r2, [r3, #0]
      DHCP_CHADDR[1] = 0x08;
 800205a:	4b2f      	ldr	r3, [pc, #188]	; (8002118 <DHCP_init+0x110>)
 800205c:	2208      	movs	r2, #8
 800205e:	705a      	strb	r2, [r3, #1]
      DHCP_CHADDR[2] = 0xdc;      
 8002060:	4b2d      	ldr	r3, [pc, #180]	; (8002118 <DHCP_init+0x110>)
 8002062:	22dc      	movs	r2, #220	; 0xdc
 8002064:	709a      	strb	r2, [r3, #2]
      DHCP_CHADDR[3] = 0x00;
 8002066:	4b2c      	ldr	r3, [pc, #176]	; (8002118 <DHCP_init+0x110>)
 8002068:	2200      	movs	r2, #0
 800206a:	70da      	strb	r2, [r3, #3]
      DHCP_CHADDR[4] = 0x00;
 800206c:	4b2a      	ldr	r3, [pc, #168]	; (8002118 <DHCP_init+0x110>)
 800206e:	2200      	movs	r2, #0
 8002070:	711a      	strb	r2, [r3, #4]
      DHCP_CHADDR[5] = 0x00; 
 8002072:	4b29      	ldr	r3, [pc, #164]	; (8002118 <DHCP_init+0x110>)
 8002074:	2200      	movs	r2, #0
 8002076:	715a      	strb	r2, [r3, #5]
      setSHAR(DHCP_CHADDR);     
 8002078:	2206      	movs	r2, #6
 800207a:	4927      	ldr	r1, [pc, #156]	; (8002118 <DHCP_init+0x110>)
 800207c:	f44f 6010 	mov.w	r0, #2304	; 0x900
 8002080:	f003 fac2 	bl	8005608 <WIZCHIP_WRITE_BUF>
   }

	DHCP_SOCKET = s; // SOCK_DHCP
 8002084:	4a25      	ldr	r2, [pc, #148]	; (800211c <DHCP_init+0x114>)
 8002086:	79fb      	ldrb	r3, [r7, #7]
 8002088:	7013      	strb	r3, [r2, #0]
	pDHCPMSG = (RIP_MSG*)buf;
 800208a:	4a25      	ldr	r2, [pc, #148]	; (8002120 <DHCP_init+0x118>)
 800208c:	683b      	ldr	r3, [r7, #0]
 800208e:	6013      	str	r3, [r2, #0]
	DHCP_XID = 0x12345678;
 8002090:	4b24      	ldr	r3, [pc, #144]	; (8002124 <DHCP_init+0x11c>)
 8002092:	4a25      	ldr	r2, [pc, #148]	; (8002128 <DHCP_init+0x120>)
 8002094:	601a      	str	r2, [r3, #0]
	{
		DHCP_XID += DHCP_CHADDR[3];
 8002096:	4b20      	ldr	r3, [pc, #128]	; (8002118 <DHCP_init+0x110>)
 8002098:	78db      	ldrb	r3, [r3, #3]
 800209a:	461a      	mov	r2, r3
 800209c:	4b21      	ldr	r3, [pc, #132]	; (8002124 <DHCP_init+0x11c>)
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	4413      	add	r3, r2
 80020a2:	4a20      	ldr	r2, [pc, #128]	; (8002124 <DHCP_init+0x11c>)
 80020a4:	6013      	str	r3, [r2, #0]
		DHCP_XID += DHCP_CHADDR[4];
 80020a6:	4b1c      	ldr	r3, [pc, #112]	; (8002118 <DHCP_init+0x110>)
 80020a8:	791b      	ldrb	r3, [r3, #4]
 80020aa:	461a      	mov	r2, r3
 80020ac:	4b1d      	ldr	r3, [pc, #116]	; (8002124 <DHCP_init+0x11c>)
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	4413      	add	r3, r2
 80020b2:	4a1c      	ldr	r2, [pc, #112]	; (8002124 <DHCP_init+0x11c>)
 80020b4:	6013      	str	r3, [r2, #0]
		DHCP_XID += DHCP_CHADDR[5];
 80020b6:	4b18      	ldr	r3, [pc, #96]	; (8002118 <DHCP_init+0x110>)
 80020b8:	795b      	ldrb	r3, [r3, #5]
 80020ba:	461a      	mov	r2, r3
 80020bc:	4b19      	ldr	r3, [pc, #100]	; (8002124 <DHCP_init+0x11c>)
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	4413      	add	r3, r2
 80020c2:	4a18      	ldr	r2, [pc, #96]	; (8002124 <DHCP_init+0x11c>)
 80020c4:	6013      	str	r3, [r2, #0]
		DHCP_XID += (DHCP_CHADDR[3] ^ DHCP_CHADDR[4] ^ DHCP_CHADDR[5]);
 80020c6:	4b14      	ldr	r3, [pc, #80]	; (8002118 <DHCP_init+0x110>)
 80020c8:	78da      	ldrb	r2, [r3, #3]
 80020ca:	4b13      	ldr	r3, [pc, #76]	; (8002118 <DHCP_init+0x110>)
 80020cc:	791b      	ldrb	r3, [r3, #4]
 80020ce:	4053      	eors	r3, r2
 80020d0:	b2da      	uxtb	r2, r3
 80020d2:	4b11      	ldr	r3, [pc, #68]	; (8002118 <DHCP_init+0x110>)
 80020d4:	795b      	ldrb	r3, [r3, #5]
 80020d6:	4053      	eors	r3, r2
 80020d8:	b2db      	uxtb	r3, r3
 80020da:	461a      	mov	r2, r3
 80020dc:	4b11      	ldr	r3, [pc, #68]	; (8002124 <DHCP_init+0x11c>)
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	4413      	add	r3, r2
 80020e2:	4a10      	ldr	r2, [pc, #64]	; (8002124 <DHCP_init+0x11c>)
 80020e4:	6013      	str	r3, [r2, #0]
	}
	// WIZchip Netinfo Clear
	setSIPR(zeroip);
 80020e6:	f107 030c 	add.w	r3, r7, #12
 80020ea:	2204      	movs	r2, #4
 80020ec:	4619      	mov	r1, r3
 80020ee:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 80020f2:	f003 fa89 	bl	8005608 <WIZCHIP_WRITE_BUF>
	setGAR(zeroip);
 80020f6:	f107 030c 	add.w	r3, r7, #12
 80020fa:	2204      	movs	r2, #4
 80020fc:	4619      	mov	r1, r3
 80020fe:	f44f 7080 	mov.w	r0, #256	; 0x100
 8002102:	f003 fa81 	bl	8005608 <WIZCHIP_WRITE_BUF>

	reset_DHCP_timeout();
 8002106:	f000 f813 	bl	8002130 <reset_DHCP_timeout>
	dhcp_state = STATE_DHCP_INIT;
 800210a:	4b08      	ldr	r3, [pc, #32]	; (800212c <DHCP_init+0x124>)
 800210c:	2200      	movs	r2, #0
 800210e:	701a      	strb	r2, [r3, #0]
}
 8002110:	bf00      	nop
 8002112:	3710      	adds	r7, #16
 8002114:	46bd      	mov	sp, r7
 8002116:	bd80      	pop	{r7, pc}
 8002118:	20000190 	.word	0x20000190
 800211c:	200001a8 	.word	0x200001a8
 8002120:	200001a4 	.word	0x200001a4
 8002124:	20000198 	.word	0x20000198
 8002128:	12345678 	.word	0x12345678
 800212c:	200000f0 	.word	0x200000f0

08002130 <reset_DHCP_timeout>:


/* Reset the DHCP timeout count and retry count. */
void reset_DHCP_timeout(void)
{
 8002130:	b480      	push	{r7}
 8002132:	af00      	add	r7, sp, #0
	dhcp_tick_1s = 0;
 8002134:	4b06      	ldr	r3, [pc, #24]	; (8002150 <reset_DHCP_timeout+0x20>)
 8002136:	2200      	movs	r2, #0
 8002138:	601a      	str	r2, [r3, #0]
	dhcp_tick_next = DHCP_WAIT_TIME;
 800213a:	4b06      	ldr	r3, [pc, #24]	; (8002154 <reset_DHCP_timeout+0x24>)
 800213c:	220a      	movs	r2, #10
 800213e:	601a      	str	r2, [r3, #0]
	dhcp_retry_count = 0;
 8002140:	4b05      	ldr	r3, [pc, #20]	; (8002158 <reset_DHCP_timeout+0x28>)
 8002142:	2200      	movs	r2, #0
 8002144:	701a      	strb	r2, [r3, #0]
}
 8002146:	bf00      	nop
 8002148:	46bd      	mov	sp, r7
 800214a:	bc80      	pop	{r7}
 800214c:	4770      	bx	lr
 800214e:	bf00      	nop
 8002150:	200000f4 	.word	0x200000f4
 8002154:	20000004 	.word	0x20000004
 8002158:	200000f1 	.word	0x200000f1

0800215c <getIPfromDHCP>:
{
	dhcp_tick_1s++;
}

void getIPfromDHCP(uint8_t* ip)
{
 800215c:	b480      	push	{r7}
 800215e:	b083      	sub	sp, #12
 8002160:	af00      	add	r7, sp, #0
 8002162:	6078      	str	r0, [r7, #4]
	ip[0] = DHCP_allocated_ip[0];
 8002164:	4b0b      	ldr	r3, [pc, #44]	; (8002194 <getIPfromDHCP+0x38>)
 8002166:	781a      	ldrb	r2, [r3, #0]
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	701a      	strb	r2, [r3, #0]
	ip[1] = DHCP_allocated_ip[1];
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	3301      	adds	r3, #1
 8002170:	4a08      	ldr	r2, [pc, #32]	; (8002194 <getIPfromDHCP+0x38>)
 8002172:	7852      	ldrb	r2, [r2, #1]
 8002174:	701a      	strb	r2, [r3, #0]
	ip[2] = DHCP_allocated_ip[2];	
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	3302      	adds	r3, #2
 800217a:	4a06      	ldr	r2, [pc, #24]	; (8002194 <getIPfromDHCP+0x38>)
 800217c:	7892      	ldrb	r2, [r2, #2]
 800217e:	701a      	strb	r2, [r3, #0]
	ip[3] = DHCP_allocated_ip[3];
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	3303      	adds	r3, #3
 8002184:	4a03      	ldr	r2, [pc, #12]	; (8002194 <getIPfromDHCP+0x38>)
 8002186:	78d2      	ldrb	r2, [r2, #3]
 8002188:	701a      	strb	r2, [r3, #0]
}
 800218a:	bf00      	nop
 800218c:	370c      	adds	r7, #12
 800218e:	46bd      	mov	sp, r7
 8002190:	bc80      	pop	{r7}
 8002192:	4770      	bx	lr
 8002194:	200000e0 	.word	0x200000e0

08002198 <getGWfromDHCP>:

void getGWfromDHCP(uint8_t* ip)
{
 8002198:	b480      	push	{r7}
 800219a:	b083      	sub	sp, #12
 800219c:	af00      	add	r7, sp, #0
 800219e:	6078      	str	r0, [r7, #4]
	ip[0] =DHCP_allocated_gw[0];
 80021a0:	4b0b      	ldr	r3, [pc, #44]	; (80021d0 <getGWfromDHCP+0x38>)
 80021a2:	781a      	ldrb	r2, [r3, #0]
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	701a      	strb	r2, [r3, #0]
	ip[1] =DHCP_allocated_gw[1];
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	3301      	adds	r3, #1
 80021ac:	4a08      	ldr	r2, [pc, #32]	; (80021d0 <getGWfromDHCP+0x38>)
 80021ae:	7852      	ldrb	r2, [r2, #1]
 80021b0:	701a      	strb	r2, [r3, #0]
	ip[2] =DHCP_allocated_gw[2];
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	3302      	adds	r3, #2
 80021b6:	4a06      	ldr	r2, [pc, #24]	; (80021d0 <getGWfromDHCP+0x38>)
 80021b8:	7892      	ldrb	r2, [r2, #2]
 80021ba:	701a      	strb	r2, [r3, #0]
	ip[3] =DHCP_allocated_gw[3];			
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	3303      	adds	r3, #3
 80021c0:	4a03      	ldr	r2, [pc, #12]	; (80021d0 <getGWfromDHCP+0x38>)
 80021c2:	78d2      	ldrb	r2, [r2, #3]
 80021c4:	701a      	strb	r2, [r3, #0]
}
 80021c6:	bf00      	nop
 80021c8:	370c      	adds	r7, #12
 80021ca:	46bd      	mov	sp, r7
 80021cc:	bc80      	pop	{r7}
 80021ce:	4770      	bx	lr
 80021d0:	200000e4 	.word	0x200000e4

080021d4 <getSNfromDHCP>:

void getSNfromDHCP(uint8_t* ip)
{
 80021d4:	b480      	push	{r7}
 80021d6:	b083      	sub	sp, #12
 80021d8:	af00      	add	r7, sp, #0
 80021da:	6078      	str	r0, [r7, #4]
   ip[0] = DHCP_allocated_sn[0];
 80021dc:	4b0b      	ldr	r3, [pc, #44]	; (800220c <getSNfromDHCP+0x38>)
 80021de:	781a      	ldrb	r2, [r3, #0]
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	701a      	strb	r2, [r3, #0]
   ip[1] = DHCP_allocated_sn[1];
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	3301      	adds	r3, #1
 80021e8:	4a08      	ldr	r2, [pc, #32]	; (800220c <getSNfromDHCP+0x38>)
 80021ea:	7852      	ldrb	r2, [r2, #1]
 80021ec:	701a      	strb	r2, [r3, #0]
   ip[2] = DHCP_allocated_sn[2];
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	3302      	adds	r3, #2
 80021f2:	4a06      	ldr	r2, [pc, #24]	; (800220c <getSNfromDHCP+0x38>)
 80021f4:	7892      	ldrb	r2, [r2, #2]
 80021f6:	701a      	strb	r2, [r3, #0]
   ip[3] = DHCP_allocated_sn[3];         
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	3303      	adds	r3, #3
 80021fc:	4a03      	ldr	r2, [pc, #12]	; (800220c <getSNfromDHCP+0x38>)
 80021fe:	78d2      	ldrb	r2, [r2, #3]
 8002200:	701a      	strb	r2, [r3, #0]
}
 8002202:	bf00      	nop
 8002204:	370c      	adds	r7, #12
 8002206:	46bd      	mov	sp, r7
 8002208:	bc80      	pop	{r7}
 800220a:	4770      	bx	lr
 800220c:	200000e8 	.word	0x200000e8

08002210 <getDNSfromDHCP>:

void getDNSfromDHCP(uint8_t* ip)
{
 8002210:	b480      	push	{r7}
 8002212:	b083      	sub	sp, #12
 8002214:	af00      	add	r7, sp, #0
 8002216:	6078      	str	r0, [r7, #4]
   ip[0] = DHCP_allocated_dns[0];
 8002218:	4b0b      	ldr	r3, [pc, #44]	; (8002248 <getDNSfromDHCP+0x38>)
 800221a:	781a      	ldrb	r2, [r3, #0]
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	701a      	strb	r2, [r3, #0]
   ip[1] = DHCP_allocated_dns[1];
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	3301      	adds	r3, #1
 8002224:	4a08      	ldr	r2, [pc, #32]	; (8002248 <getDNSfromDHCP+0x38>)
 8002226:	7852      	ldrb	r2, [r2, #1]
 8002228:	701a      	strb	r2, [r3, #0]
   ip[2] = DHCP_allocated_dns[2];
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	3302      	adds	r3, #2
 800222e:	4a06      	ldr	r2, [pc, #24]	; (8002248 <getDNSfromDHCP+0x38>)
 8002230:	7892      	ldrb	r2, [r2, #2]
 8002232:	701a      	strb	r2, [r3, #0]
   ip[3] = DHCP_allocated_dns[3];         
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	3303      	adds	r3, #3
 8002238:	4a03      	ldr	r2, [pc, #12]	; (8002248 <getDNSfromDHCP+0x38>)
 800223a:	78d2      	ldrb	r2, [r2, #3]
 800223c:	701a      	strb	r2, [r3, #0]
}
 800223e:	bf00      	nop
 8002240:	370c      	adds	r7, #12
 8002242:	46bd      	mov	sp, r7
 8002244:	bc80      	pop	{r7}
 8002246:	4770      	bx	lr
 8002248:	200000ec 	.word	0x200000ec

0800224c <getDHCPLeasetime>:

uint32_t getDHCPLeasetime(void)
{
 800224c:	b480      	push	{r7}
 800224e:	af00      	add	r7, sp, #0
	return dhcp_lease_time;
 8002250:	4b02      	ldr	r3, [pc, #8]	; (800225c <getDHCPLeasetime+0x10>)
 8002252:	681b      	ldr	r3, [r3, #0]
}
 8002254:	4618      	mov	r0, r3
 8002256:	46bd      	mov	sp, r7
 8002258:	bc80      	pop	{r7}
 800225a:	4770      	bx	lr
 800225c:	20000000 	.word	0x20000000

08002260 <NibbleToHex>:

char NibbleToHex(uint8_t nibble)
{
 8002260:	b480      	push	{r7}
 8002262:	b083      	sub	sp, #12
 8002264:	af00      	add	r7, sp, #0
 8002266:	4603      	mov	r3, r0
 8002268:	71fb      	strb	r3, [r7, #7]
  nibble &= 0x0F;
 800226a:	79fb      	ldrb	r3, [r7, #7]
 800226c:	f003 030f 	and.w	r3, r3, #15
 8002270:	71fb      	strb	r3, [r7, #7]
  if (nibble <= 9)
 8002272:	79fb      	ldrb	r3, [r7, #7]
 8002274:	2b09      	cmp	r3, #9
 8002276:	d803      	bhi.n	8002280 <NibbleToHex+0x20>
    return nibble + '0';
 8002278:	79fb      	ldrb	r3, [r7, #7]
 800227a:	3330      	adds	r3, #48	; 0x30
 800227c:	b2db      	uxtb	r3, r3
 800227e:	e002      	b.n	8002286 <NibbleToHex+0x26>
  else 
    return nibble + ('A'-0x0A);
 8002280:	79fb      	ldrb	r3, [r7, #7]
 8002282:	3337      	adds	r3, #55	; 0x37
 8002284:	b2db      	uxtb	r3, r3
}
 8002286:	4618      	mov	r0, r3
 8002288:	370c      	adds	r7, #12
 800228a:	46bd      	mov	sp, r7
 800228c:	bc80      	pop	{r7}
 800228e:	4770      	bx	lr

08002290 <get16>:
uint32_t dns_1s_tick;   // for timout of DNS processing
static uint8_t retry_count;

/* converts uint16_t from network buffer to a host byte order integer. */
uint16_t get16(uint8_t * s)
{
 8002290:	b480      	push	{r7}
 8002292:	b085      	sub	sp, #20
 8002294:	af00      	add	r7, sp, #0
 8002296:	6078      	str	r0, [r7, #4]
	uint16_t i;
	i = *s++ << 8;
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	1c5a      	adds	r2, r3, #1
 800229c:	607a      	str	r2, [r7, #4]
 800229e:	781b      	ldrb	r3, [r3, #0]
 80022a0:	b29b      	uxth	r3, r3
 80022a2:	021b      	lsls	r3, r3, #8
 80022a4:	81fb      	strh	r3, [r7, #14]
	i = i + *s;
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	781b      	ldrb	r3, [r3, #0]
 80022aa:	b29a      	uxth	r2, r3
 80022ac:	89fb      	ldrh	r3, [r7, #14]
 80022ae:	4413      	add	r3, r2
 80022b0:	81fb      	strh	r3, [r7, #14]
	return i;
 80022b2:	89fb      	ldrh	r3, [r7, #14]
}
 80022b4:	4618      	mov	r0, r3
 80022b6:	3714      	adds	r7, #20
 80022b8:	46bd      	mov	sp, r7
 80022ba:	bc80      	pop	{r7}
 80022bc:	4770      	bx	lr

080022be <put16>:

/* copies uint16_t to the network buffer with network byte order. */
uint8_t * put16(uint8_t * s, uint16_t i)
{
 80022be:	b480      	push	{r7}
 80022c0:	b083      	sub	sp, #12
 80022c2:	af00      	add	r7, sp, #0
 80022c4:	6078      	str	r0, [r7, #4]
 80022c6:	460b      	mov	r3, r1
 80022c8:	807b      	strh	r3, [r7, #2]
	*s++ = i >> 8;
 80022ca:	887b      	ldrh	r3, [r7, #2]
 80022cc:	0a1b      	lsrs	r3, r3, #8
 80022ce:	b299      	uxth	r1, r3
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	1c5a      	adds	r2, r3, #1
 80022d4:	607a      	str	r2, [r7, #4]
 80022d6:	b2ca      	uxtb	r2, r1
 80022d8:	701a      	strb	r2, [r3, #0]
	*s++ = i;
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	1c5a      	adds	r2, r3, #1
 80022de:	607a      	str	r2, [r7, #4]
 80022e0:	887a      	ldrh	r2, [r7, #2]
 80022e2:	b2d2      	uxtb	r2, r2
 80022e4:	701a      	strb	r2, [r3, #0]
	return s;
 80022e6:	687b      	ldr	r3, [r7, #4]
}
 80022e8:	4618      	mov	r0, r3
 80022ea:	370c      	adds	r7, #12
 80022ec:	46bd      	mov	sp, r7
 80022ee:	bc80      	pop	{r7}
 80022f0:	4770      	bx	lr

080022f2 <parse_name>:
 *               buf        - is a pointer to the buffer for the human-readable form name.
 *               len        - is the MAX. size of buffer.
 * Returns     : the length of compressed message
 */
int parse_name(uint8_t * msg, uint8_t * compressed, char * buf, int16_t len)
{
 80022f2:	b480      	push	{r7}
 80022f4:	b08b      	sub	sp, #44	; 0x2c
 80022f6:	af00      	add	r7, sp, #0
 80022f8:	60f8      	str	r0, [r7, #12]
 80022fa:	60b9      	str	r1, [r7, #8]
 80022fc:	607a      	str	r2, [r7, #4]
 80022fe:	807b      	strh	r3, [r7, #2]
	uint16_t slen;		/* Length of current segment */
	uint8_t * cp;
	int clen = 0;		/* Total length of compressed name */
 8002300:	2300      	movs	r3, #0
 8002302:	61fb      	str	r3, [r7, #28]
	int indirect = 0;	/* Set if indirection encountered */
 8002304:	2300      	movs	r3, #0
 8002306:	61bb      	str	r3, [r7, #24]
	int nseg = 0;		/* Total number of segments in name */
 8002308:	2300      	movs	r3, #0
 800230a:	617b      	str	r3, [r7, #20]

	cp = compressed;
 800230c:	68bb      	ldr	r3, [r7, #8]
 800230e:	623b      	str	r3, [r7, #32]

	for (;;)
	{
		slen = *cp++;	/* Length of this segment */
 8002310:	6a3b      	ldr	r3, [r7, #32]
 8002312:	1c5a      	adds	r2, r3, #1
 8002314:	623a      	str	r2, [r7, #32]
 8002316:	781b      	ldrb	r3, [r3, #0]
 8002318:	84fb      	strh	r3, [r7, #38]	; 0x26

		if (!indirect) clen++;
 800231a:	69bb      	ldr	r3, [r7, #24]
 800231c:	2b00      	cmp	r3, #0
 800231e:	d102      	bne.n	8002326 <parse_name+0x34>
 8002320:	69fb      	ldr	r3, [r7, #28]
 8002322:	3301      	adds	r3, #1
 8002324:	61fb      	str	r3, [r7, #28]

		if ((slen & 0xc0) == 0xc0)
 8002326:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8002328:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800232c:	2bc0      	cmp	r3, #192	; 0xc0
 800232e:	d117      	bne.n	8002360 <parse_name+0x6e>
		{
			if (!indirect)
 8002330:	69bb      	ldr	r3, [r7, #24]
 8002332:	2b00      	cmp	r3, #0
 8002334:	d102      	bne.n	800233c <parse_name+0x4a>
				clen++;
 8002336:	69fb      	ldr	r3, [r7, #28]
 8002338:	3301      	adds	r3, #1
 800233a:	61fb      	str	r3, [r7, #28]
			indirect = 1;
 800233c:	2301      	movs	r3, #1
 800233e:	61bb      	str	r3, [r7, #24]
			/* Follow indirection */
			cp = &msg[((slen & 0x3f)<<8) + *cp];
 8002340:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8002342:	021b      	lsls	r3, r3, #8
 8002344:	f403 537c 	and.w	r3, r3, #16128	; 0x3f00
 8002348:	6a3a      	ldr	r2, [r7, #32]
 800234a:	7812      	ldrb	r2, [r2, #0]
 800234c:	4413      	add	r3, r2
 800234e:	461a      	mov	r2, r3
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	4413      	add	r3, r2
 8002354:	623b      	str	r3, [r7, #32]
			slen = *cp++;
 8002356:	6a3b      	ldr	r3, [r7, #32]
 8002358:	1c5a      	adds	r2, r3, #1
 800235a:	623a      	str	r2, [r7, #32]
 800235c:	781b      	ldrb	r3, [r3, #0]
 800235e:	84fb      	strh	r3, [r7, #38]	; 0x26
		}

		if (slen == 0)	/* zero length == all done */
 8002360:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8002362:	2b00      	cmp	r3, #0
 8002364:	d02b      	beq.n	80023be <parse_name+0xcc>
			break;

		len -= slen + 1;
 8002366:	887a      	ldrh	r2, [r7, #2]
 8002368:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800236a:	1ad3      	subs	r3, r2, r3
 800236c:	b29b      	uxth	r3, r3
 800236e:	3b01      	subs	r3, #1
 8002370:	b29b      	uxth	r3, r3
 8002372:	807b      	strh	r3, [r7, #2]

		if (len < 0) return -1;
 8002374:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8002378:	2b00      	cmp	r3, #0
 800237a:	da02      	bge.n	8002382 <parse_name+0x90>
 800237c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002380:	e038      	b.n	80023f4 <parse_name+0x102>

		if (!indirect) clen += slen;
 8002382:	69bb      	ldr	r3, [r7, #24]
 8002384:	2b00      	cmp	r3, #0
 8002386:	d10c      	bne.n	80023a2 <parse_name+0xb0>
 8002388:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800238a:	69fa      	ldr	r2, [r7, #28]
 800238c:	4413      	add	r3, r2
 800238e:	61fb      	str	r3, [r7, #28]

		while (slen-- != 0) *buf++ = (char)*cp++;
 8002390:	e007      	b.n	80023a2 <parse_name+0xb0>
 8002392:	6a3a      	ldr	r2, [r7, #32]
 8002394:	1c53      	adds	r3, r2, #1
 8002396:	623b      	str	r3, [r7, #32]
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	1c59      	adds	r1, r3, #1
 800239c:	6079      	str	r1, [r7, #4]
 800239e:	7812      	ldrb	r2, [r2, #0]
 80023a0:	701a      	strb	r2, [r3, #0]
 80023a2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80023a4:	1e5a      	subs	r2, r3, #1
 80023a6:	84fa      	strh	r2, [r7, #38]	; 0x26
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d1f2      	bne.n	8002392 <parse_name+0xa0>
		*buf++ = '.';
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	1c5a      	adds	r2, r3, #1
 80023b0:	607a      	str	r2, [r7, #4]
 80023b2:	222e      	movs	r2, #46	; 0x2e
 80023b4:	701a      	strb	r2, [r3, #0]
		nseg++;
 80023b6:	697b      	ldr	r3, [r7, #20]
 80023b8:	3301      	adds	r3, #1
 80023ba:	617b      	str	r3, [r7, #20]
		slen = *cp++;	/* Length of this segment */
 80023bc:	e7a8      	b.n	8002310 <parse_name+0x1e>
			break;
 80023be:	bf00      	nop
	}

	if (nseg == 0)
 80023c0:	697b      	ldr	r3, [r7, #20]
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d10a      	bne.n	80023dc <parse_name+0xea>
	{
		/* Root name; represent as single dot */
		*buf++ = '.';
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	1c5a      	adds	r2, r3, #1
 80023ca:	607a      	str	r2, [r7, #4]
 80023cc:	222e      	movs	r2, #46	; 0x2e
 80023ce:	701a      	strb	r2, [r3, #0]
		len--;
 80023d0:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80023d4:	b29b      	uxth	r3, r3
 80023d6:	3b01      	subs	r3, #1
 80023d8:	b29b      	uxth	r3, r3
 80023da:	807b      	strh	r3, [r7, #2]
	}

	*buf++ = '\0';
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	1c5a      	adds	r2, r3, #1
 80023e0:	607a      	str	r2, [r7, #4]
 80023e2:	2200      	movs	r2, #0
 80023e4:	701a      	strb	r2, [r3, #0]
	len--;
 80023e6:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80023ea:	b29b      	uxth	r3, r3
 80023ec:	3b01      	subs	r3, #1
 80023ee:	b29b      	uxth	r3, r3
 80023f0:	807b      	strh	r3, [r7, #2]

	return clen;	/* Length of compressed message */
 80023f2:	69fb      	ldr	r3, [r7, #28]
}
 80023f4:	4618      	mov	r0, r3
 80023f6:	372c      	adds	r7, #44	; 0x2c
 80023f8:	46bd      	mov	sp, r7
 80023fa:	bc80      	pop	{r7}
 80023fc:	4770      	bx	lr

080023fe <dns_question>:
 * Arguments   : msg - is a pointer to the reply message
 *               cp  - is a pointer to the qeustion record.
 * Returns     : a pointer the to next record.
 */
uint8_t * dns_question(uint8_t * msg, uint8_t * cp)
{
 80023fe:	b580      	push	{r7, lr}
 8002400:	b0b4      	sub	sp, #208	; 0xd0
 8002402:	af00      	add	r7, sp, #0
 8002404:	6078      	str	r0, [r7, #4]
 8002406:	6039      	str	r1, [r7, #0]
	int len;
	char name[MAXCNAME];

	len = parse_name(msg, cp, name, MAXCNAME);
 8002408:	f107 020c 	add.w	r2, r7, #12
 800240c:	23c0      	movs	r3, #192	; 0xc0
 800240e:	6839      	ldr	r1, [r7, #0]
 8002410:	6878      	ldr	r0, [r7, #4]
 8002412:	f7ff ff6e 	bl	80022f2 <parse_name>
 8002416:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc


	if (len == -1) return 0;
 800241a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800241e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002422:	d101      	bne.n	8002428 <dns_question+0x2a>
 8002424:	2300      	movs	r3, #0
 8002426:	e00b      	b.n	8002440 <dns_question+0x42>

	cp += len;
 8002428:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800242c:	683a      	ldr	r2, [r7, #0]
 800242e:	4413      	add	r3, r2
 8002430:	603b      	str	r3, [r7, #0]
	cp += 2;		/* type */
 8002432:	683b      	ldr	r3, [r7, #0]
 8002434:	3302      	adds	r3, #2
 8002436:	603b      	str	r3, [r7, #0]
	cp += 2;		/* class */
 8002438:	683b      	ldr	r3, [r7, #0]
 800243a:	3302      	adds	r3, #2
 800243c:	603b      	str	r3, [r7, #0]

	return cp;
 800243e:	683b      	ldr	r3, [r7, #0]
}
 8002440:	4618      	mov	r0, r3
 8002442:	37d0      	adds	r7, #208	; 0xd0
 8002444:	46bd      	mov	sp, r7
 8002446:	bd80      	pop	{r7, pc}

08002448 <dns_answer>:
 * Arguments   : msg - is a pointer to the reply message
 *               cp  - is a pointer to the answer record.
 * Returns     : a pointer the to next record.
 */
uint8_t * dns_answer(uint8_t * msg, uint8_t * cp, uint8_t * ip_from_dns)
{
 8002448:	b580      	push	{r7, lr}
 800244a:	b0b6      	sub	sp, #216	; 0xd8
 800244c:	af00      	add	r7, sp, #0
 800244e:	60f8      	str	r0, [r7, #12]
 8002450:	60b9      	str	r1, [r7, #8]
 8002452:	607a      	str	r2, [r7, #4]
	int len, type;
	char name[MAXCNAME];

	len = parse_name(msg, cp, name, MAXCNAME);
 8002454:	f107 0210 	add.w	r2, r7, #16
 8002458:	23c0      	movs	r3, #192	; 0xc0
 800245a:	68b9      	ldr	r1, [r7, #8]
 800245c:	68f8      	ldr	r0, [r7, #12]
 800245e:	f7ff ff48 	bl	80022f2 <parse_name>
 8002462:	f8c7 00d4 	str.w	r0, [r7, #212]	; 0xd4

	if (len == -1) return 0;
 8002466:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800246a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800246e:	d101      	bne.n	8002474 <dns_answer+0x2c>
 8002470:	2300      	movs	r3, #0
 8002472:	e0dd      	b.n	8002630 <dns_answer+0x1e8>

	cp += len;
 8002474:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002478:	68ba      	ldr	r2, [r7, #8]
 800247a:	4413      	add	r3, r2
 800247c:	60bb      	str	r3, [r7, #8]
	type = get16(cp);
 800247e:	68b8      	ldr	r0, [r7, #8]
 8002480:	f7ff ff06 	bl	8002290 <get16>
 8002484:	4603      	mov	r3, r0
 8002486:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
	cp += 2;		/* type */
 800248a:	68bb      	ldr	r3, [r7, #8]
 800248c:	3302      	adds	r3, #2
 800248e:	60bb      	str	r3, [r7, #8]
	cp += 2;		/* class */
 8002490:	68bb      	ldr	r3, [r7, #8]
 8002492:	3302      	adds	r3, #2
 8002494:	60bb      	str	r3, [r7, #8]
	cp += 4;		/* ttl */
 8002496:	68bb      	ldr	r3, [r7, #8]
 8002498:	3304      	adds	r3, #4
 800249a:	60bb      	str	r3, [r7, #8]
	cp += 2;		/* len */
 800249c:	68bb      	ldr	r3, [r7, #8]
 800249e:	3302      	adds	r3, #2
 80024a0:	60bb      	str	r3, [r7, #8]
 80024a2:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80024a6:	3b01      	subs	r3, #1
 80024a8:	2b0f      	cmp	r3, #15
 80024aa:	f200 80bf 	bhi.w	800262c <dns_answer+0x1e4>
 80024ae:	a201      	add	r2, pc, #4	; (adr r2, 80024b4 <dns_answer+0x6c>)
 80024b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80024b4:	080024f5 	.word	0x080024f5
 80024b8:	0800252d 	.word	0x0800252d
 80024bc:	0800262d 	.word	0x0800262d
 80024c0:	0800262d 	.word	0x0800262d
 80024c4:	0800252d 	.word	0x0800252d
 80024c8:	080025b9 	.word	0x080025b9
 80024cc:	0800252d 	.word	0x0800252d
 80024d0:	0800252d 	.word	0x0800252d
 80024d4:	0800252d 	.word	0x0800252d
 80024d8:	0800262d 	.word	0x0800262d
 80024dc:	0800262d 	.word	0x0800262d
 80024e0:	0800252d 	.word	0x0800252d
 80024e4:	08002559 	.word	0x08002559
 80024e8:	0800262d 	.word	0x0800262d
 80024ec:	08002587 	.word	0x08002587
 80024f0:	0800262d 	.word	0x0800262d

	switch (type)
	{
	case TYPE_A:
		/* Just read the address directly into the structure */
		ip_from_dns[0] = *cp++;
 80024f4:	68bb      	ldr	r3, [r7, #8]
 80024f6:	1c5a      	adds	r2, r3, #1
 80024f8:	60ba      	str	r2, [r7, #8]
 80024fa:	781a      	ldrb	r2, [r3, #0]
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	701a      	strb	r2, [r3, #0]
		ip_from_dns[1] = *cp++;
 8002500:	68bb      	ldr	r3, [r7, #8]
 8002502:	1c5a      	adds	r2, r3, #1
 8002504:	60ba      	str	r2, [r7, #8]
 8002506:	687a      	ldr	r2, [r7, #4]
 8002508:	3201      	adds	r2, #1
 800250a:	781b      	ldrb	r3, [r3, #0]
 800250c:	7013      	strb	r3, [r2, #0]
		ip_from_dns[2] = *cp++;
 800250e:	68bb      	ldr	r3, [r7, #8]
 8002510:	1c5a      	adds	r2, r3, #1
 8002512:	60ba      	str	r2, [r7, #8]
 8002514:	687a      	ldr	r2, [r7, #4]
 8002516:	3202      	adds	r2, #2
 8002518:	781b      	ldrb	r3, [r3, #0]
 800251a:	7013      	strb	r3, [r2, #0]
		ip_from_dns[3] = *cp++;
 800251c:	68bb      	ldr	r3, [r7, #8]
 800251e:	1c5a      	adds	r2, r3, #1
 8002520:	60ba      	str	r2, [r7, #8]
 8002522:	687a      	ldr	r2, [r7, #4]
 8002524:	3203      	adds	r2, #3
 8002526:	781b      	ldrb	r3, [r3, #0]
 8002528:	7013      	strb	r3, [r2, #0]
		break;
 800252a:	e080      	b.n	800262e <dns_answer+0x1e6>
	case TYPE_MR:
	case TYPE_NS:
	case TYPE_PTR:
		/* These types all consist of a single domain name */
		/* convert it to ascii format */
		len = parse_name(msg, cp, name, MAXCNAME);
 800252c:	f107 0210 	add.w	r2, r7, #16
 8002530:	23c0      	movs	r3, #192	; 0xc0
 8002532:	68b9      	ldr	r1, [r7, #8]
 8002534:	68f8      	ldr	r0, [r7, #12]
 8002536:	f7ff fedc 	bl	80022f2 <parse_name>
 800253a:	f8c7 00d4 	str.w	r0, [r7, #212]	; 0xd4
		if (len == -1) return 0;
 800253e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002542:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002546:	d101      	bne.n	800254c <dns_answer+0x104>
 8002548:	2300      	movs	r3, #0
 800254a:	e071      	b.n	8002630 <dns_answer+0x1e8>

		cp += len;
 800254c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002550:	68ba      	ldr	r2, [r7, #8]
 8002552:	4413      	add	r3, r2
 8002554:	60bb      	str	r3, [r7, #8]
		break;
 8002556:	e06a      	b.n	800262e <dns_answer+0x1e6>
	case TYPE_HINFO:
		len = *cp++;
 8002558:	68bb      	ldr	r3, [r7, #8]
 800255a:	1c5a      	adds	r2, r3, #1
 800255c:	60ba      	str	r2, [r7, #8]
 800255e:	781b      	ldrb	r3, [r3, #0]
 8002560:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
		cp += len;
 8002564:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002568:	68ba      	ldr	r2, [r7, #8]
 800256a:	4413      	add	r3, r2
 800256c:	60bb      	str	r3, [r7, #8]

		len = *cp++;
 800256e:	68bb      	ldr	r3, [r7, #8]
 8002570:	1c5a      	adds	r2, r3, #1
 8002572:	60ba      	str	r2, [r7, #8]
 8002574:	781b      	ldrb	r3, [r3, #0]
 8002576:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
		cp += len;
 800257a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800257e:	68ba      	ldr	r2, [r7, #8]
 8002580:	4413      	add	r3, r2
 8002582:	60bb      	str	r3, [r7, #8]
		break;
 8002584:	e053      	b.n	800262e <dns_answer+0x1e6>
	case TYPE_MX:
		cp += 2;
 8002586:	68bb      	ldr	r3, [r7, #8]
 8002588:	3302      	adds	r3, #2
 800258a:	60bb      	str	r3, [r7, #8]
		/* Get domain name of exchanger */
		len = parse_name(msg, cp, name, MAXCNAME);
 800258c:	f107 0210 	add.w	r2, r7, #16
 8002590:	23c0      	movs	r3, #192	; 0xc0
 8002592:	68b9      	ldr	r1, [r7, #8]
 8002594:	68f8      	ldr	r0, [r7, #12]
 8002596:	f7ff feac 	bl	80022f2 <parse_name>
 800259a:	f8c7 00d4 	str.w	r0, [r7, #212]	; 0xd4
		if (len == -1) return 0;
 800259e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80025a2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80025a6:	d101      	bne.n	80025ac <dns_answer+0x164>
 80025a8:	2300      	movs	r3, #0
 80025aa:	e041      	b.n	8002630 <dns_answer+0x1e8>

		cp += len;
 80025ac:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80025b0:	68ba      	ldr	r2, [r7, #8]
 80025b2:	4413      	add	r3, r2
 80025b4:	60bb      	str	r3, [r7, #8]
		break;
 80025b6:	e03a      	b.n	800262e <dns_answer+0x1e6>
	case TYPE_SOA:
		/* Get domain name of name server */
		len = parse_name(msg, cp, name, MAXCNAME);
 80025b8:	f107 0210 	add.w	r2, r7, #16
 80025bc:	23c0      	movs	r3, #192	; 0xc0
 80025be:	68b9      	ldr	r1, [r7, #8]
 80025c0:	68f8      	ldr	r0, [r7, #12]
 80025c2:	f7ff fe96 	bl	80022f2 <parse_name>
 80025c6:	f8c7 00d4 	str.w	r0, [r7, #212]	; 0xd4
		if (len == -1) return 0;
 80025ca:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80025ce:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80025d2:	d101      	bne.n	80025d8 <dns_answer+0x190>
 80025d4:	2300      	movs	r3, #0
 80025d6:	e02b      	b.n	8002630 <dns_answer+0x1e8>

		cp += len;
 80025d8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80025dc:	68ba      	ldr	r2, [r7, #8]
 80025de:	4413      	add	r3, r2
 80025e0:	60bb      	str	r3, [r7, #8]

		/* Get domain name of responsible person */
		len = parse_name(msg, cp, name, MAXCNAME);
 80025e2:	f107 0210 	add.w	r2, r7, #16
 80025e6:	23c0      	movs	r3, #192	; 0xc0
 80025e8:	68b9      	ldr	r1, [r7, #8]
 80025ea:	68f8      	ldr	r0, [r7, #12]
 80025ec:	f7ff fe81 	bl	80022f2 <parse_name>
 80025f0:	f8c7 00d4 	str.w	r0, [r7, #212]	; 0xd4
		if (len == -1) return 0;
 80025f4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80025f8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80025fc:	d101      	bne.n	8002602 <dns_answer+0x1ba>
 80025fe:	2300      	movs	r3, #0
 8002600:	e016      	b.n	8002630 <dns_answer+0x1e8>

		cp += len;
 8002602:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002606:	68ba      	ldr	r2, [r7, #8]
 8002608:	4413      	add	r3, r2
 800260a:	60bb      	str	r3, [r7, #8]

		cp += 4;
 800260c:	68bb      	ldr	r3, [r7, #8]
 800260e:	3304      	adds	r3, #4
 8002610:	60bb      	str	r3, [r7, #8]
		cp += 4;
 8002612:	68bb      	ldr	r3, [r7, #8]
 8002614:	3304      	adds	r3, #4
 8002616:	60bb      	str	r3, [r7, #8]
		cp += 4;
 8002618:	68bb      	ldr	r3, [r7, #8]
 800261a:	3304      	adds	r3, #4
 800261c:	60bb      	str	r3, [r7, #8]
		cp += 4;
 800261e:	68bb      	ldr	r3, [r7, #8]
 8002620:	3304      	adds	r3, #4
 8002622:	60bb      	str	r3, [r7, #8]
		cp += 4;
 8002624:	68bb      	ldr	r3, [r7, #8]
 8002626:	3304      	adds	r3, #4
 8002628:	60bb      	str	r3, [r7, #8]
		break;
 800262a:	e000      	b.n	800262e <dns_answer+0x1e6>
	case TYPE_TXT:
		/* Just stash */
		break;
	default:
		/* Ignore */
		break;
 800262c:	bf00      	nop
	}

	return cp;
 800262e:	68bb      	ldr	r3, [r7, #8]
}
 8002630:	4618      	mov	r0, r3
 8002632:	37d8      	adds	r7, #216	; 0xd8
 8002634:	46bd      	mov	sp, r7
 8002636:	bd80      	pop	{r7, pc}

08002638 <parseDNSMSG>:
 * Returns     : -1 - Domain name lenght is too big
 *                0 - Fail (Timout or parse error)
 *                1 - Success,
 */
int8_t parseDNSMSG(struct dhdr * pdhdr, uint8_t * pbuf, uint8_t * ip_from_dns)
{
 8002638:	b580      	push	{r7, lr}
 800263a:	b088      	sub	sp, #32
 800263c:	af00      	add	r7, sp, #0
 800263e:	60f8      	str	r0, [r7, #12]
 8002640:	60b9      	str	r1, [r7, #8]
 8002642:	607a      	str	r2, [r7, #4]
	uint16_t tmp;
	uint16_t i;
	uint8_t * msg;
	uint8_t * cp;

	msg = pbuf;
 8002644:	68bb      	ldr	r3, [r7, #8]
 8002646:	617b      	str	r3, [r7, #20]
	memset(pdhdr, 0, sizeof(*pdhdr));
 8002648:	2212      	movs	r2, #18
 800264a:	2100      	movs	r1, #0
 800264c:	68f8      	ldr	r0, [r7, #12]
 800264e:	f008 fe6b 	bl	800b328 <memset>

	pdhdr->id = get16(&msg[0]);
 8002652:	6978      	ldr	r0, [r7, #20]
 8002654:	f7ff fe1c 	bl	8002290 <get16>
 8002658:	4603      	mov	r3, r0
 800265a:	461a      	mov	r2, r3
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	801a      	strh	r2, [r3, #0]
	tmp = get16(&msg[2]);
 8002660:	697b      	ldr	r3, [r7, #20]
 8002662:	3302      	adds	r3, #2
 8002664:	4618      	mov	r0, r3
 8002666:	f7ff fe13 	bl	8002290 <get16>
 800266a:	4603      	mov	r3, r0
 800266c:	827b      	strh	r3, [r7, #18]
	if (tmp & 0x8000) pdhdr->qr = 1;
 800266e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8002672:	2b00      	cmp	r3, #0
 8002674:	da02      	bge.n	800267c <parseDNSMSG+0x44>
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	2201      	movs	r2, #1
 800267a:	709a      	strb	r2, [r3, #2]

	pdhdr->opcode = (tmp >> 11) & 0xf;
 800267c:	8a7b      	ldrh	r3, [r7, #18]
 800267e:	0adb      	lsrs	r3, r3, #11
 8002680:	b29b      	uxth	r3, r3
 8002682:	b2db      	uxtb	r3, r3
 8002684:	f003 030f 	and.w	r3, r3, #15
 8002688:	b2da      	uxtb	r2, r3
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	70da      	strb	r2, [r3, #3]

	if (tmp & 0x0400) pdhdr->aa = 1;
 800268e:	8a7b      	ldrh	r3, [r7, #18]
 8002690:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002694:	2b00      	cmp	r3, #0
 8002696:	d002      	beq.n	800269e <parseDNSMSG+0x66>
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	2201      	movs	r2, #1
 800269c:	711a      	strb	r2, [r3, #4]
	if (tmp & 0x0200) pdhdr->tc = 1;
 800269e:	8a7b      	ldrh	r3, [r7, #18]
 80026a0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d002      	beq.n	80026ae <parseDNSMSG+0x76>
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	2201      	movs	r2, #1
 80026ac:	715a      	strb	r2, [r3, #5]
	if (tmp & 0x0100) pdhdr->rd = 1;
 80026ae:	8a7b      	ldrh	r3, [r7, #18]
 80026b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d002      	beq.n	80026be <parseDNSMSG+0x86>
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	2201      	movs	r2, #1
 80026bc:	719a      	strb	r2, [r3, #6]
	if (tmp & 0x0080) pdhdr->ra = 1;
 80026be:	8a7b      	ldrh	r3, [r7, #18]
 80026c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d002      	beq.n	80026ce <parseDNSMSG+0x96>
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	2201      	movs	r2, #1
 80026cc:	71da      	strb	r2, [r3, #7]

	pdhdr->rcode = tmp & 0xf;
 80026ce:	8a7b      	ldrh	r3, [r7, #18]
 80026d0:	b2db      	uxtb	r3, r3
 80026d2:	f003 030f 	and.w	r3, r3, #15
 80026d6:	b2da      	uxtb	r2, r3
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	721a      	strb	r2, [r3, #8]
	pdhdr->qdcount = get16(&msg[4]);
 80026dc:	697b      	ldr	r3, [r7, #20]
 80026de:	3304      	adds	r3, #4
 80026e0:	4618      	mov	r0, r3
 80026e2:	f7ff fdd5 	bl	8002290 <get16>
 80026e6:	4603      	mov	r3, r0
 80026e8:	461a      	mov	r2, r3
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	815a      	strh	r2, [r3, #10]
	pdhdr->ancount = get16(&msg[6]);
 80026ee:	697b      	ldr	r3, [r7, #20]
 80026f0:	3306      	adds	r3, #6
 80026f2:	4618      	mov	r0, r3
 80026f4:	f7ff fdcc 	bl	8002290 <get16>
 80026f8:	4603      	mov	r3, r0
 80026fa:	461a      	mov	r2, r3
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	819a      	strh	r2, [r3, #12]
	pdhdr->nscount = get16(&msg[8]);
 8002700:	697b      	ldr	r3, [r7, #20]
 8002702:	3308      	adds	r3, #8
 8002704:	4618      	mov	r0, r3
 8002706:	f7ff fdc3 	bl	8002290 <get16>
 800270a:	4603      	mov	r3, r0
 800270c:	461a      	mov	r2, r3
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	81da      	strh	r2, [r3, #14]
	pdhdr->arcount = get16(&msg[10]);
 8002712:	697b      	ldr	r3, [r7, #20]
 8002714:	330a      	adds	r3, #10
 8002716:	4618      	mov	r0, r3
 8002718:	f7ff fdba 	bl	8002290 <get16>
 800271c:	4603      	mov	r3, r0
 800271e:	461a      	mov	r2, r3
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	821a      	strh	r2, [r3, #16]


	/* Now parse the variable length sections */
	cp = &msg[12];
 8002724:	697b      	ldr	r3, [r7, #20]
 8002726:	330c      	adds	r3, #12
 8002728:	61bb      	str	r3, [r7, #24]

	/* Question section */
	for (i = 0; i < pdhdr->qdcount; i++)
 800272a:	2300      	movs	r3, #0
 800272c:	83fb      	strh	r3, [r7, #30]
 800272e:	e00d      	b.n	800274c <parseDNSMSG+0x114>
	{
		cp = dns_question(msg, cp);
 8002730:	69b9      	ldr	r1, [r7, #24]
 8002732:	6978      	ldr	r0, [r7, #20]
 8002734:	f7ff fe63 	bl	80023fe <dns_question>
 8002738:	61b8      	str	r0, [r7, #24]
   #ifdef _DNS_DEUBG_
      printf("MAX_DOMAIN_NAME is too small, it should be redfine in dns.h");
   #endif
		if(!cp) return -1;
 800273a:	69bb      	ldr	r3, [r7, #24]
 800273c:	2b00      	cmp	r3, #0
 800273e:	d102      	bne.n	8002746 <parseDNSMSG+0x10e>
 8002740:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002744:	e03b      	b.n	80027be <parseDNSMSG+0x186>
	for (i = 0; i < pdhdr->qdcount; i++)
 8002746:	8bfb      	ldrh	r3, [r7, #30]
 8002748:	3301      	adds	r3, #1
 800274a:	83fb      	strh	r3, [r7, #30]
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	895b      	ldrh	r3, [r3, #10]
 8002750:	8bfa      	ldrh	r2, [r7, #30]
 8002752:	429a      	cmp	r2, r3
 8002754:	d3ec      	bcc.n	8002730 <parseDNSMSG+0xf8>
	}

	/* Answer section */
	for (i = 0; i < pdhdr->ancount; i++)
 8002756:	2300      	movs	r3, #0
 8002758:	83fb      	strh	r3, [r7, #30]
 800275a:	e00e      	b.n	800277a <parseDNSMSG+0x142>
	{
		cp = dns_answer(msg, cp, ip_from_dns);
 800275c:	687a      	ldr	r2, [r7, #4]
 800275e:	69b9      	ldr	r1, [r7, #24]
 8002760:	6978      	ldr	r0, [r7, #20]
 8002762:	f7ff fe71 	bl	8002448 <dns_answer>
 8002766:	61b8      	str	r0, [r7, #24]
   #ifdef _DNS_DEUBG_
      printf("MAX_DOMAIN_NAME is too small, it should be redfine in dns.h");
   #endif
		if(!cp) return -1;
 8002768:	69bb      	ldr	r3, [r7, #24]
 800276a:	2b00      	cmp	r3, #0
 800276c:	d102      	bne.n	8002774 <parseDNSMSG+0x13c>
 800276e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002772:	e024      	b.n	80027be <parseDNSMSG+0x186>
	for (i = 0; i < pdhdr->ancount; i++)
 8002774:	8bfb      	ldrh	r3, [r7, #30]
 8002776:	3301      	adds	r3, #1
 8002778:	83fb      	strh	r3, [r7, #30]
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	899b      	ldrh	r3, [r3, #12]
 800277e:	8bfa      	ldrh	r2, [r7, #30]
 8002780:	429a      	cmp	r2, r3
 8002782:	d3eb      	bcc.n	800275c <parseDNSMSG+0x124>
	}

	/* Name server (authority) section */
	for (i = 0; i < pdhdr->nscount; i++)
 8002784:	2300      	movs	r3, #0
 8002786:	83fb      	strh	r3, [r7, #30]
 8002788:	e002      	b.n	8002790 <parseDNSMSG+0x158>
 800278a:	8bfb      	ldrh	r3, [r7, #30]
 800278c:	3301      	adds	r3, #1
 800278e:	83fb      	strh	r3, [r7, #30]
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	89db      	ldrh	r3, [r3, #14]
 8002794:	8bfa      	ldrh	r2, [r7, #30]
 8002796:	429a      	cmp	r2, r3
 8002798:	d3f7      	bcc.n	800278a <parseDNSMSG+0x152>
	{
		;
	}

	/* Additional section */
	for (i = 0; i < pdhdr->arcount; i++)
 800279a:	2300      	movs	r3, #0
 800279c:	83fb      	strh	r3, [r7, #30]
 800279e:	e002      	b.n	80027a6 <parseDNSMSG+0x16e>
 80027a0:	8bfb      	ldrh	r3, [r7, #30]
 80027a2:	3301      	adds	r3, #1
 80027a4:	83fb      	strh	r3, [r7, #30]
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	8a1b      	ldrh	r3, [r3, #16]
 80027aa:	8bfa      	ldrh	r2, [r7, #30]
 80027ac:	429a      	cmp	r2, r3
 80027ae:	d3f7      	bcc.n	80027a0 <parseDNSMSG+0x168>
	{
		;
	}

	if(pdhdr->rcode == 0) return 1;		// No error
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	7a1b      	ldrb	r3, [r3, #8]
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d101      	bne.n	80027bc <parseDNSMSG+0x184>
 80027b8:	2301      	movs	r3, #1
 80027ba:	e000      	b.n	80027be <parseDNSMSG+0x186>
	else return 0;
 80027bc:	2300      	movs	r3, #0
}
 80027be:	4618      	mov	r0, r3
 80027c0:	3720      	adds	r7, #32
 80027c2:	46bd      	mov	sp, r7
 80027c4:	bd80      	pop	{r7, pc}
	...

080027c8 <dns_makequery>:
 *               buf  - is a pointer to the buffer for DNS message.
 *               len  - is the MAX. size of buffer.
 * Returns     : the pointer to the DNS message.
 */
int16_t dns_makequery(uint16_t op, char * name, uint8_t * buf, uint16_t len)
{
 80027c8:	b580      	push	{r7, lr}
 80027ca:	b0b8      	sub	sp, #224	; 0xe0
 80027cc:	af00      	add	r7, sp, #0
 80027ce:	60b9      	str	r1, [r7, #8]
 80027d0:	607a      	str	r2, [r7, #4]
 80027d2:	461a      	mov	r2, r3
 80027d4:	4603      	mov	r3, r0
 80027d6:	81fb      	strh	r3, [r7, #14]
 80027d8:	4613      	mov	r3, r2
 80027da:	81bb      	strh	r3, [r7, #12]
	char sname[MAXCNAME];
	char *dname;
	uint16_t p;
	uint16_t dlen;

	cp = buf;
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

	DNS_MSGID++;
 80027e2:	4b57      	ldr	r3, [pc, #348]	; (8002940 <dns_makequery+0x178>)
 80027e4:	881b      	ldrh	r3, [r3, #0]
 80027e6:	3301      	adds	r3, #1
 80027e8:	b29a      	uxth	r2, r3
 80027ea:	4b55      	ldr	r3, [pc, #340]	; (8002940 <dns_makequery+0x178>)
 80027ec:	801a      	strh	r2, [r3, #0]
	cp = put16(cp, DNS_MSGID);
 80027ee:	4b54      	ldr	r3, [pc, #336]	; (8002940 <dns_makequery+0x178>)
 80027f0:	881b      	ldrh	r3, [r3, #0]
 80027f2:	4619      	mov	r1, r3
 80027f4:	f8d7 00dc 	ldr.w	r0, [r7, #220]	; 0xdc
 80027f8:	f7ff fd61 	bl	80022be <put16>
 80027fc:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc
	p = (op << 11) | 0x0100;			/* Recursion desired */
 8002800:	89fb      	ldrh	r3, [r7, #14]
 8002802:	02db      	lsls	r3, r3, #11
 8002804:	b21b      	sxth	r3, r3
 8002806:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800280a:	b21b      	sxth	r3, r3
 800280c:	f8a7 30d4 	strh.w	r3, [r7, #212]	; 0xd4
	cp = put16(cp, p);
 8002810:	f8b7 30d4 	ldrh.w	r3, [r7, #212]	; 0xd4
 8002814:	4619      	mov	r1, r3
 8002816:	f8d7 00dc 	ldr.w	r0, [r7, #220]	; 0xdc
 800281a:	f7ff fd50 	bl	80022be <put16>
 800281e:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc
	cp = put16(cp, 1);
 8002822:	2101      	movs	r1, #1
 8002824:	f8d7 00dc 	ldr.w	r0, [r7, #220]	; 0xdc
 8002828:	f7ff fd49 	bl	80022be <put16>
 800282c:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc
	cp = put16(cp, 0);
 8002830:	2100      	movs	r1, #0
 8002832:	f8d7 00dc 	ldr.w	r0, [r7, #220]	; 0xdc
 8002836:	f7ff fd42 	bl	80022be <put16>
 800283a:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc
	cp = put16(cp, 0);
 800283e:	2100      	movs	r1, #0
 8002840:	f8d7 00dc 	ldr.w	r0, [r7, #220]	; 0xdc
 8002844:	f7ff fd3b 	bl	80022be <put16>
 8002848:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc
	cp = put16(cp, 0);
 800284c:	2100      	movs	r1, #0
 800284e:	f8d7 00dc 	ldr.w	r0, [r7, #220]	; 0xdc
 8002852:	f7ff fd34 	bl	80022be <put16>
 8002856:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc

	strcpy(sname, name);
 800285a:	f107 0310 	add.w	r3, r7, #16
 800285e:	68b9      	ldr	r1, [r7, #8]
 8002860:	4618      	mov	r0, r3
 8002862:	f008 fd96 	bl	800b392 <strcpy>
	dname = sname;
 8002866:	f107 0310 	add.w	r3, r7, #16
 800286a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
	dlen = strlen(dname);
 800286e:	f8d7 00d8 	ldr.w	r0, [r7, #216]	; 0xd8
 8002872:	f7fd fc6d 	bl	8000150 <strlen>
 8002876:	4603      	mov	r3, r0
 8002878:	f8a7 30d6 	strh.w	r3, [r7, #214]	; 0xd6
	for (;;)
	{
		/* Look for next dot */
		cp1 = strchr(dname, '.');
 800287c:	212e      	movs	r1, #46	; 0x2e
 800287e:	f8d7 00d8 	ldr.w	r0, [r7, #216]	; 0xd8
 8002882:	f008 fd79 	bl	800b378 <strchr>
 8002886:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0

		if (cp1 != NULL) len = cp1 - dname;	/* More to come */
 800288a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800288e:	2b00      	cmp	r3, #0
 8002890:	d006      	beq.n	80028a0 <dns_makequery+0xd8>
 8002892:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8002896:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800289a:	1ad3      	subs	r3, r2, r3
 800289c:	81bb      	strh	r3, [r7, #12]
 800289e:	e002      	b.n	80028a6 <dns_makequery+0xde>
		else len = dlen;			/* Last component */
 80028a0:	f8b7 30d6 	ldrh.w	r3, [r7, #214]	; 0xd6
 80028a4:	81bb      	strh	r3, [r7, #12]

		*cp++ = len;				/* Write length of component */
 80028a6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80028aa:	1c5a      	adds	r2, r3, #1
 80028ac:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80028b0:	89ba      	ldrh	r2, [r7, #12]
 80028b2:	b2d2      	uxtb	r2, r2
 80028b4:	701a      	strb	r2, [r3, #0]
		if (len == 0) break;
 80028b6:	89bb      	ldrh	r3, [r7, #12]
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d029      	beq.n	8002910 <dns_makequery+0x148>

		/* Copy component up to (but not including) dot */
		strncpy((char *)cp, dname, len);
 80028bc:	89bb      	ldrh	r3, [r7, #12]
 80028be:	461a      	mov	r2, r3
 80028c0:	f8d7 10d8 	ldr.w	r1, [r7, #216]	; 0xd8
 80028c4:	f8d7 00dc 	ldr.w	r0, [r7, #220]	; 0xdc
 80028c8:	f008 fd6b 	bl	800b3a2 <strncpy>
		cp += len;
 80028cc:	89bb      	ldrh	r3, [r7, #12]
 80028ce:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 80028d2:	4413      	add	r3, r2
 80028d4:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
		if (cp1 == NULL)
 80028d8:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d107      	bne.n	80028f0 <dns_makequery+0x128>
		{
			*cp++ = 0;			/* Last one; write null and finish */
 80028e0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80028e4:	1c5a      	adds	r2, r3, #1
 80028e6:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80028ea:	2200      	movs	r2, #0
 80028ec:	701a      	strb	r2, [r3, #0]
			break;
 80028ee:	e010      	b.n	8002912 <dns_makequery+0x14a>
		}
		dname += len+1;
 80028f0:	89bb      	ldrh	r3, [r7, #12]
 80028f2:	3301      	adds	r3, #1
 80028f4:	f8d7 20d8 	ldr.w	r2, [r7, #216]	; 0xd8
 80028f8:	4413      	add	r3, r2
 80028fa:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
		dlen -= len+1;
 80028fe:	f8b7 20d6 	ldrh.w	r2, [r7, #214]	; 0xd6
 8002902:	89bb      	ldrh	r3, [r7, #12]
 8002904:	1ad3      	subs	r3, r2, r3
 8002906:	b29b      	uxth	r3, r3
 8002908:	3b01      	subs	r3, #1
 800290a:	f8a7 30d6 	strh.w	r3, [r7, #214]	; 0xd6
		cp1 = strchr(dname, '.');
 800290e:	e7b5      	b.n	800287c <dns_makequery+0xb4>
		if (len == 0) break;
 8002910:	bf00      	nop
	}

	cp = put16(cp, 0x0001);				/* type */
 8002912:	2101      	movs	r1, #1
 8002914:	f8d7 00dc 	ldr.w	r0, [r7, #220]	; 0xdc
 8002918:	f7ff fcd1 	bl	80022be <put16>
 800291c:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc
	cp = put16(cp, 0x0001);				/* class */
 8002920:	2101      	movs	r1, #1
 8002922:	f8d7 00dc 	ldr.w	r0, [r7, #220]	; 0xdc
 8002926:	f7ff fcca 	bl	80022be <put16>
 800292a:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc

	return ((int16_t)((uint32_t)(cp) - (uint32_t)(buf)));
 800292e:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	1ad3      	subs	r3, r2, r3
 8002936:	b21b      	sxth	r3, r3
}
 8002938:	4618      	mov	r0, r3
 800293a:	37e0      	adds	r7, #224	; 0xe0
 800293c:	46bd      	mov	sp, r7
 800293e:	bd80      	pop	{r7, pc}
 8002940:	200001b8 	.word	0x200001b8

08002944 <check_DNS_timeout>:
 * Returns     : -1 - timeout occurred, 0 - timer over, but no timeout, 1 - no timer over, no timeout occur
 * Note        : timeout : retry count and timer both over.
 */

int8_t check_DNS_timeout(void)
{
 8002944:	b480      	push	{r7}
 8002946:	af00      	add	r7, sp, #0

	if(dns_1s_tick >= DNS_WAIT_TIME)
 8002948:	4b0e      	ldr	r3, [pc, #56]	; (8002984 <check_DNS_timeout+0x40>)
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	2b02      	cmp	r3, #2
 800294e:	d914      	bls.n	800297a <check_DNS_timeout+0x36>
	{
		dns_1s_tick = 0;
 8002950:	4b0c      	ldr	r3, [pc, #48]	; (8002984 <check_DNS_timeout+0x40>)
 8002952:	2200      	movs	r2, #0
 8002954:	601a      	str	r2, [r3, #0]
		if(retry_count >= MAX_DNS_RETRY) {
 8002956:	4b0c      	ldr	r3, [pc, #48]	; (8002988 <check_DNS_timeout+0x44>)
 8002958:	781b      	ldrb	r3, [r3, #0]
 800295a:	2b01      	cmp	r3, #1
 800295c:	d905      	bls.n	800296a <check_DNS_timeout+0x26>
			retry_count = 0;
 800295e:	4b0a      	ldr	r3, [pc, #40]	; (8002988 <check_DNS_timeout+0x44>)
 8002960:	2200      	movs	r2, #0
 8002962:	701a      	strb	r2, [r3, #0]
			return -1; // timeout occurred
 8002964:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002968:	e008      	b.n	800297c <check_DNS_timeout+0x38>
		}
		retry_count++;
 800296a:	4b07      	ldr	r3, [pc, #28]	; (8002988 <check_DNS_timeout+0x44>)
 800296c:	781b      	ldrb	r3, [r3, #0]
 800296e:	3301      	adds	r3, #1
 8002970:	b2da      	uxtb	r2, r3
 8002972:	4b05      	ldr	r3, [pc, #20]	; (8002988 <check_DNS_timeout+0x44>)
 8002974:	701a      	strb	r2, [r3, #0]
		return 0; // timer over, but no timeout
 8002976:	2300      	movs	r3, #0
 8002978:	e000      	b.n	800297c <check_DNS_timeout+0x38>
	}

	return 1; // no timer over, no timeout occur
 800297a:	2301      	movs	r3, #1
}
 800297c:	4618      	mov	r0, r3
 800297e:	46bd      	mov	sp, r7
 8002980:	bc80      	pop	{r7}
 8002982:	4770      	bx	lr
 8002984:	200001b0 	.word	0x200001b0
 8002988:	200000f8 	.word	0x200000f8

0800298c <DNS_init>:



/* DNS CLIENT INIT */
void DNS_init(uint8_t s, uint8_t * buf)
{
 800298c:	b480      	push	{r7}
 800298e:	b083      	sub	sp, #12
 8002990:	af00      	add	r7, sp, #0
 8002992:	4603      	mov	r3, r0
 8002994:	6039      	str	r1, [r7, #0]
 8002996:	71fb      	strb	r3, [r7, #7]
	DNS_SOCKET = s; // SOCK_DNS
 8002998:	4a07      	ldr	r2, [pc, #28]	; (80029b8 <DNS_init+0x2c>)
 800299a:	79fb      	ldrb	r3, [r7, #7]
 800299c:	7013      	strb	r3, [r2, #0]
	pDNSMSG = buf; // User's shared buffer
 800299e:	4a07      	ldr	r2, [pc, #28]	; (80029bc <DNS_init+0x30>)
 80029a0:	683b      	ldr	r3, [r7, #0]
 80029a2:	6013      	str	r3, [r2, #0]
	DNS_MSGID = DNS_MSG_ID;
 80029a4:	4b06      	ldr	r3, [pc, #24]	; (80029c0 <DNS_init+0x34>)
 80029a6:	f241 1222 	movw	r2, #4386	; 0x1122
 80029aa:	801a      	strh	r2, [r3, #0]
}
 80029ac:	bf00      	nop
 80029ae:	370c      	adds	r7, #12
 80029b0:	46bd      	mov	sp, r7
 80029b2:	bc80      	pop	{r7}
 80029b4:	4770      	bx	lr
 80029b6:	bf00      	nop
 80029b8:	200001ac 	.word	0x200001ac
 80029bc:	200001b4 	.word	0x200001b4
 80029c0:	200001b8 	.word	0x200001b8

080029c4 <DNS_run>:

/* DNS CLIENT RUN */
int8_t DNS_run(uint8_t * dns_ip, uint8_t * name, uint8_t * ip_from_dns)
{
 80029c4:	b590      	push	{r4, r7, lr}
 80029c6:	b08f      	sub	sp, #60	; 0x3c
 80029c8:	af02      	add	r7, sp, #8
 80029ca:	60f8      	str	r0, [r7, #12]
 80029cc:	60b9      	str	r1, [r7, #8]
 80029ce:	607a      	str	r2, [r7, #4]
	struct dhdr dhp;
	uint8_t ip[4];
	uint16_t len, port;
	int8_t ret_check_timeout;

	retry_count = 0;
 80029d0:	4b3b      	ldr	r3, [pc, #236]	; (8002ac0 <DNS_run+0xfc>)
 80029d2:	2200      	movs	r2, #0
 80029d4:	701a      	strb	r2, [r3, #0]
	dns_1s_tick = 0;
 80029d6:	4b3b      	ldr	r3, [pc, #236]	; (8002ac4 <DNS_run+0x100>)
 80029d8:	2200      	movs	r2, #0
 80029da:	601a      	str	r2, [r3, #0]

   // Socket open
   socket(DNS_SOCKET, Sn_MR_UDP, 0, 0);
 80029dc:	4b3a      	ldr	r3, [pc, #232]	; (8002ac8 <DNS_run+0x104>)
 80029de:	7818      	ldrb	r0, [r3, #0]
 80029e0:	2300      	movs	r3, #0
 80029e2:	2200      	movs	r2, #0
 80029e4:	2102      	movs	r1, #2
 80029e6:	f001 f97f 	bl	8003ce8 <socket>

#ifdef _DNS_DEBUG_
	printf("> DNS Query to DNS Server : %d.%d.%d.%d\r\n", dns_ip[0], dns_ip[1], dns_ip[2], dns_ip[3]);
#endif

	len = dns_makequery(0, (char *)name, pDNSMSG, MAX_DNS_BUF_SIZE);
 80029ea:	4b38      	ldr	r3, [pc, #224]	; (8002acc <DNS_run+0x108>)
 80029ec:	681a      	ldr	r2, [r3, #0]
 80029ee:	f44f 7380 	mov.w	r3, #256	; 0x100
 80029f2:	68b9      	ldr	r1, [r7, #8]
 80029f4:	2000      	movs	r0, #0
 80029f6:	f7ff fee7 	bl	80027c8 <dns_makequery>
 80029fa:	4603      	mov	r3, r0
 80029fc:	85fb      	strh	r3, [r7, #46]	; 0x2e
	sendto(DNS_SOCKET, pDNSMSG, len, dns_ip, IPPORT_DOMAIN);
 80029fe:	4b32      	ldr	r3, [pc, #200]	; (8002ac8 <DNS_run+0x104>)
 8002a00:	7818      	ldrb	r0, [r3, #0]
 8002a02:	4b32      	ldr	r3, [pc, #200]	; (8002acc <DNS_run+0x108>)
 8002a04:	6819      	ldr	r1, [r3, #0]
 8002a06:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8002a08:	2335      	movs	r3, #53	; 0x35
 8002a0a:	9300      	str	r3, [sp, #0]
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	f001 fd7b 	bl	8004508 <sendto>

	while (1)
	{
		if ((len = getSn_RX_RSR(DNS_SOCKET)) > 0)
 8002a12:	4b2d      	ldr	r3, [pc, #180]	; (8002ac8 <DNS_run+0x104>)
 8002a14:	781b      	ldrb	r3, [r3, #0]
 8002a16:	4618      	mov	r0, r3
 8002a18:	f002 fea1 	bl	800575e <getSn_RX_RSR>
 8002a1c:	4603      	mov	r3, r0
 8002a1e:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8002a20:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d029      	beq.n	8002a7a <DNS_run+0xb6>
		{
			if (len > MAX_DNS_BUF_SIZE) len = MAX_DNS_BUF_SIZE;
 8002a26:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002a28:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002a2c:	d902      	bls.n	8002a34 <DNS_run+0x70>
 8002a2e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002a32:	85fb      	strh	r3, [r7, #46]	; 0x2e
			len = recvfrom(DNS_SOCKET, pDNSMSG, len, ip, &port);
 8002a34:	4b24      	ldr	r3, [pc, #144]	; (8002ac8 <DNS_run+0x104>)
 8002a36:	7818      	ldrb	r0, [r3, #0]
 8002a38:	4b24      	ldr	r3, [pc, #144]	; (8002acc <DNS_run+0x108>)
 8002a3a:	6819      	ldr	r1, [r3, #0]
 8002a3c:	f107 0414 	add.w	r4, r7, #20
 8002a40:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8002a42:	f107 0312 	add.w	r3, r7, #18
 8002a46:	9300      	str	r3, [sp, #0]
 8002a48:	4623      	mov	r3, r4
 8002a4a:	f001 fe93 	bl	8004774 <recvfrom>
 8002a4e:	4603      	mov	r3, r0
 8002a50:	85fb      	strh	r3, [r7, #46]	; 0x2e
      #ifdef _DNS_DEBUG_
	      printf("> Receive DNS message from %d.%d.%d.%d(%d). len = %d\r\n", ip[0], ip[1], ip[2], ip[3],port,len);
      #endif
         ret = parseDNSMSG(&dhp, pDNSMSG, ip_from_dns);
 8002a52:	4b1e      	ldr	r3, [pc, #120]	; (8002acc <DNS_run+0x108>)
 8002a54:	6819      	ldr	r1, [r3, #0]
 8002a56:	f107 0318 	add.w	r3, r7, #24
 8002a5a:	687a      	ldr	r2, [r7, #4]
 8002a5c:	4618      	mov	r0, r3
 8002a5e:	f7ff fdeb 	bl	8002638 <parseDNSMSG>
 8002a62:	4603      	mov	r3, r0
 8002a64:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
			break;
 8002a68:	bf00      	nop
			printf("> DNS Timeout\r\n");
#endif
			sendto(DNS_SOCKET, pDNSMSG, len, dns_ip, IPPORT_DOMAIN);
		}
	}
	close(DNS_SOCKET);
 8002a6a:	4b17      	ldr	r3, [pc, #92]	; (8002ac8 <DNS_run+0x104>)
 8002a6c:	781b      	ldrb	r3, [r3, #0]
 8002a6e:	4618      	mov	r0, r3
 8002a70:	f001 fa50 	bl	8003f14 <close>
	// Return value
	// 0 > :  failed / 1 - success
	return ret;
 8002a74:	f997 302c 	ldrsb.w	r3, [r7, #44]	; 0x2c
 8002a78:	e01e      	b.n	8002ab8 <DNS_run+0xf4>
		ret_check_timeout = check_DNS_timeout();
 8002a7a:	f7ff ff63 	bl	8002944 <check_DNS_timeout>
 8002a7e:	4603      	mov	r3, r0
 8002a80:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
		if (ret_check_timeout < 0) {
 8002a84:	f997 302d 	ldrsb.w	r3, [r7, #45]	; 0x2d
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	da06      	bge.n	8002a9a <DNS_run+0xd6>
			close(DNS_SOCKET);
 8002a8c:	4b0e      	ldr	r3, [pc, #56]	; (8002ac8 <DNS_run+0x104>)
 8002a8e:	781b      	ldrb	r3, [r3, #0]
 8002a90:	4618      	mov	r0, r3
 8002a92:	f001 fa3f 	bl	8003f14 <close>
			return 0; // timeout occurred
 8002a96:	2300      	movs	r3, #0
 8002a98:	e00e      	b.n	8002ab8 <DNS_run+0xf4>
		else if (ret_check_timeout == 0) {
 8002a9a:	f997 302d 	ldrsb.w	r3, [r7, #45]	; 0x2d
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d1b7      	bne.n	8002a12 <DNS_run+0x4e>
			sendto(DNS_SOCKET, pDNSMSG, len, dns_ip, IPPORT_DOMAIN);
 8002aa2:	4b09      	ldr	r3, [pc, #36]	; (8002ac8 <DNS_run+0x104>)
 8002aa4:	7818      	ldrb	r0, [r3, #0]
 8002aa6:	4b09      	ldr	r3, [pc, #36]	; (8002acc <DNS_run+0x108>)
 8002aa8:	6819      	ldr	r1, [r3, #0]
 8002aaa:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8002aac:	2335      	movs	r3, #53	; 0x35
 8002aae:	9300      	str	r3, [sp, #0]
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	f001 fd29 	bl	8004508 <sendto>
		if ((len = getSn_RX_RSR(DNS_SOCKET)) > 0)
 8002ab6:	e7ac      	b.n	8002a12 <DNS_run+0x4e>
}
 8002ab8:	4618      	mov	r0, r3
 8002aba:	3734      	adds	r7, #52	; 0x34
 8002abc:	46bd      	mov	sp, r7
 8002abe:	bd90      	pop	{r4, r7, pc}
 8002ac0:	200000f8 	.word	0x200000f8
 8002ac4:	200001b0 	.word	0x200001b0
 8002ac8:	200001ac 	.word	0x200001ac
 8002acc:	200001b4 	.word	0x200001b4

08002ad0 <UART_Printf.8399>:
  */
int main(void)
{
  /* USER CODE BEGIN 1 */

void UART_Printf(const char* fmt, ...) {
 8002ad0:	b40f      	push	{r0, r1, r2, r3}
 8002ad2:	b580      	push	{r7, lr}
 8002ad4:	b0c4      	sub	sp, #272	; 0x110
 8002ad6:	af00      	add	r7, sp, #0
 8002ad8:	1d3b      	adds	r3, r7, #4
 8002ada:	f8c3 c000 	str.w	ip, [r3]
	char buff[256];
	va_list args;
	va_start(args, fmt);
 8002ade:	f507 728e 	add.w	r2, r7, #284	; 0x11c
 8002ae2:	f107 030c 	add.w	r3, r7, #12
 8002ae6:	601a      	str	r2, [r3, #0]
	vsnprintf(buff, sizeof(buff), fmt, args);
 8002ae8:	f107 030c 	add.w	r3, r7, #12
 8002aec:	f107 0010 	add.w	r0, r7, #16
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8002af6:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002afa:	f008 fc91 	bl	800b420 <vsniprintf>
	HAL_UART_Transmit(&huart1, (uint8_t*)buff, strlen(buff), HAL_MAX_DELAY);
 8002afe:	f107 0310 	add.w	r3, r7, #16
 8002b02:	4618      	mov	r0, r3
 8002b04:	f7fd fb24 	bl	8000150 <strlen>
 8002b08:	4603      	mov	r3, r0
 8002b0a:	b29a      	uxth	r2, r3
 8002b0c:	f107 0110 	add.w	r1, r7, #16
 8002b10:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002b14:	4805      	ldr	r0, [pc, #20]	; (8002b2c <UART_Printf.8399+0x5c>)
 8002b16:	f007 f83d 	bl	8009b94 <HAL_UART_Transmit>
	va_end(args);
}
 8002b1a:	bf00      	nop
 8002b1c:	f507 7788 	add.w	r7, r7, #272	; 0x110
 8002b20:	46bd      	mov	sp, r7
 8002b22:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002b26:	b004      	add	sp, #16
 8002b28:	4770      	bx	lr
 8002b2a:	bf00      	nop
 8002b2c:	20000388 	.word	0x20000388

08002b30 <main>:
{
 8002b30:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002b34:	f6ad 0da4 	subw	sp, sp, #2212	; 0x8a4
 8002b38:	af06      	add	r7, sp, #24
int main(void)
 8002b3a:	f607 02a8 	addw	r2, r7, #2216	; 0x8a8
 8002b3e:	463b      	mov	r3, r7
 8002b40:	f8c3 2884 	str.w	r2, [r3, #2180]	; 0x884
 8002b44:	463b      	mov	r3, r7
 8002b46:	f603 0474 	addw	r4, r3, #2164	; 0x874
 8002b4a:	463d      	mov	r5, r7
 8002b4c:	4b8d      	ldr	r3, [pc, #564]	; (8002d84 <main+0x254>)
 8002b4e:	4626      	mov	r6, r4
 8002b50:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002b52:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
 8002b56:	60a5      	str	r5, [r4, #8]
 8002b58:	4b8b      	ldr	r3, [pc, #556]	; (8002d88 <main+0x258>)
 8002b5a:	60e3      	str	r3, [r4, #12]
 8002b5c:	f104 0310 	add.w	r3, r4, #16
 8002b60:	4619      	mov	r1, r3
 8002b62:	4620      	mov	r0, r4
 8002b64:	f7fd ff68 	bl	8000a38 <__clear_cache>
 8002b68:	463b      	mov	r3, r7
 8002b6a:	f603 0464 	addw	r4, r3, #2148	; 0x864
 8002b6e:	463d      	mov	r5, r7
 8002b70:	4b84      	ldr	r3, [pc, #528]	; (8002d84 <main+0x254>)
 8002b72:	4626      	mov	r6, r4
 8002b74:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002b76:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
 8002b7a:	60a5      	str	r5, [r4, #8]
 8002b7c:	4b83      	ldr	r3, [pc, #524]	; (8002d8c <main+0x25c>)
 8002b7e:	60e3      	str	r3, [r4, #12]
 8002b80:	f104 0310 	add.w	r3, r4, #16
 8002b84:	4619      	mov	r1, r3
 8002b86:	4620      	mov	r0, r4
 8002b88:	f7fd ff56 	bl	8000a38 <__clear_cache>
 8002b8c:	463b      	mov	r3, r7
 8002b8e:	f603 0434 	addw	r4, r3, #2100	; 0x834
 8002b92:	463d      	mov	r5, r7
 8002b94:	4b7b      	ldr	r3, [pc, #492]	; (8002d84 <main+0x254>)
 8002b96:	4626      	mov	r6, r4
 8002b98:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002b9a:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
 8002b9e:	60a5      	str	r5, [r4, #8]
 8002ba0:	4b7b      	ldr	r3, [pc, #492]	; (8002d90 <main+0x260>)
 8002ba2:	60e3      	str	r3, [r4, #12]
 8002ba4:	f104 0310 	add.w	r3, r4, #16
 8002ba8:	4619      	mov	r1, r3
 8002baa:	4620      	mov	r0, r4
 8002bac:	f7fd ff44 	bl	8000a38 <__clear_cache>
 8002bb0:	463b      	mov	r3, r7
 8002bb2:	f603 0424 	addw	r4, r3, #2084	; 0x824
 8002bb6:	463d      	mov	r5, r7
 8002bb8:	4b72      	ldr	r3, [pc, #456]	; (8002d84 <main+0x254>)
 8002bba:	4626      	mov	r6, r4
 8002bbc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002bbe:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
 8002bc2:	60a5      	str	r5, [r4, #8]
 8002bc4:	4b73      	ldr	r3, [pc, #460]	; (8002d94 <main+0x264>)
 8002bc6:	60e3      	str	r3, [r4, #12]
 8002bc8:	f104 0310 	add.w	r3, r4, #16
 8002bcc:	4619      	mov	r1, r3
 8002bce:	4620      	mov	r0, r4
 8002bd0:	f7fd ff32 	bl	8000a38 <__clear_cache>
 8002bd4:	463b      	mov	r3, r7
 8002bd6:	f603 0454 	addw	r4, r3, #2132	; 0x854
 8002bda:	463d      	mov	r5, r7
 8002bdc:	4b69      	ldr	r3, [pc, #420]	; (8002d84 <main+0x254>)
 8002bde:	4626      	mov	r6, r4
 8002be0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002be2:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
 8002be6:	60a5      	str	r5, [r4, #8]
 8002be8:	4b6b      	ldr	r3, [pc, #428]	; (8002d98 <main+0x268>)
 8002bea:	60e3      	str	r3, [r4, #12]
 8002bec:	f104 0310 	add.w	r3, r4, #16
 8002bf0:	4619      	mov	r1, r3
 8002bf2:	4620      	mov	r0, r4
 8002bf4:	f7fd ff20 	bl	8000a38 <__clear_cache>
 8002bf8:	463b      	mov	r3, r7
 8002bfa:	f603 0444 	addw	r4, r3, #2116	; 0x844
 8002bfe:	463d      	mov	r5, r7
 8002c00:	4b60      	ldr	r3, [pc, #384]	; (8002d84 <main+0x254>)
 8002c02:	4626      	mov	r6, r4
 8002c04:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002c06:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
 8002c0a:	60a5      	str	r5, [r4, #8]
 8002c0c:	4b63      	ldr	r3, [pc, #396]	; (8002d9c <main+0x26c>)
 8002c0e:	60e3      	str	r3, [r4, #12]
 8002c10:	f104 0310 	add.w	r3, r4, #16
 8002c14:	4619      	mov	r1, r3
 8002c16:	4620      	mov	r0, r4
 8002c18:	f7fd ff0e 	bl	8000a38 <__clear_cache>
 8002c1c:	463b      	mov	r3, r7
 8002c1e:	f603 0414 	addw	r4, r3, #2068	; 0x814
 8002c22:	463d      	mov	r5, r7
 8002c24:	4b57      	ldr	r3, [pc, #348]	; (8002d84 <main+0x254>)
 8002c26:	4626      	mov	r6, r4
 8002c28:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002c2a:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
 8002c2e:	60a5      	str	r5, [r4, #8]
 8002c30:	4b5b      	ldr	r3, [pc, #364]	; (8002da0 <main+0x270>)
 8002c32:	60e3      	str	r3, [r4, #12]
 8002c34:	f104 0310 	add.w	r3, r4, #16
 8002c38:	4619      	mov	r1, r3
 8002c3a:	4620      	mov	r0, r4
 8002c3c:	f7fd fefc 	bl	8000a38 <__clear_cache>
 8002c40:	463b      	mov	r3, r7
 8002c42:	f603 0404 	addw	r4, r3, #2052	; 0x804
 8002c46:	463d      	mov	r5, r7
 8002c48:	4b4e      	ldr	r3, [pc, #312]	; (8002d84 <main+0x254>)
 8002c4a:	4626      	mov	r6, r4
 8002c4c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002c4e:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
 8002c52:	60a5      	str	r5, [r4, #8]
 8002c54:	4b53      	ldr	r3, [pc, #332]	; (8002da4 <main+0x274>)
 8002c56:	60e3      	str	r3, [r4, #12]
 8002c58:	f104 0310 	add.w	r3, r4, #16
 8002c5c:	4619      	mov	r1, r3
 8002c5e:	4620      	mov	r0, r4
 8002c60:	f7fd feea 	bl	8000a38 <__clear_cache>

void W5500_WriteByte(uint8_t byte) {
	W5500_WriteBuff(&byte, sizeof(byte));
}

volatile bool ip_assigned = false;
 8002c64:	2200      	movs	r2, #0
 8002c66:	463b      	mov	r3, r7
 8002c68:	f883 2800 	strb.w	r2, [r3, #2048]	; 0x800
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002c6c:	f003 f8d6 	bl	8005e1c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002c70:	f000 fc92 	bl	8003598 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002c74:	f000 ffc0 	bl	8003bf8 <MX_GPIO_Init>
  MX_DMA_Init();
 8002c78:	f000 ffa0 	bl	8003bbc <MX_DMA_Init>
  MX_TIM1_Init();
 8002c7c:	f000 fd36 	bl	80036ec <MX_TIM1_Init>
  MX_USART1_UART_Init();
 8002c80:	f000 ff72 	bl	8003b68 <MX_USART1_UART_Init>
  MX_TIM2_Init();
 8002c84:	f000 fe08 	bl	8003898 <MX_TIM2_Init>
  MX_TIM4_Init();
 8002c88:	f000 ff20 	bl	8003acc <MX_TIM4_Init>
  MX_TIM3_Init();
 8002c8c:	f000 fe8a 	bl	80039a4 <MX_TIM3_Init>
  MX_I2C1_Init();
 8002c90:	f000 fcc8 	bl	8003624 <MX_I2C1_Init>
  MX_SPI2_Init();
 8002c94:	f000 fcf4 	bl	8003680 <MX_SPI2_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  sumCounter2 = 0;
 8002c98:	4b43      	ldr	r3, [pc, #268]	; (8002da8 <main+0x278>)
 8002c9a:	2200      	movs	r2, #0
 8002c9c:	601a      	str	r2, [r3, #0]
  /* Turn off all multiplexer */
  GPIOB->ODR &= ~((1 << Z1Receive) | (1 << Z2Receive) | (1 << Z3Receive) | (1 << Z4Receive));
 8002c9e:	4b43      	ldr	r3, [pc, #268]	; (8002dac <main+0x27c>)
 8002ca0:	68db      	ldr	r3, [r3, #12]
 8002ca2:	4a42      	ldr	r2, [pc, #264]	; (8002dac <main+0x27c>)
 8002ca4:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8002ca8:	f023 0306 	bic.w	r3, r3, #6
 8002cac:	60d3      	str	r3, [r2, #12]
   * 4 - Z3 >> Z4
   * 5 - Z4 >> Z3
   * 6 - Z4 >> Z1
   * 7 - Z1 >> Z4
   */
  sprintf(SndBuffer, "\rAnemometer start.\r\n");
 8002cae:	4940      	ldr	r1, [pc, #256]	; (8002db0 <main+0x280>)
 8002cb0:	4840      	ldr	r0, [pc, #256]	; (8002db4 <main+0x284>)
 8002cb2:	f008 fb41 	bl	800b338 <siprintf>
  HAL_UART_Transmit(&huart1, (uint8_t *) SndBuffer, sizeof(SndBuffer), 1000);
 8002cb6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002cba:	2264      	movs	r2, #100	; 0x64
 8002cbc:	493d      	ldr	r1, [pc, #244]	; (8002db4 <main+0x284>)
 8002cbe:	483e      	ldr	r0, [pc, #248]	; (8002db8 <main+0x288>)
 8002cc0:	f006 ff68 	bl	8009b94 <HAL_UART_Transmit>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);	// Reset W5500
 8002cc4:	2200      	movs	r2, #0
 8002cc6:	2110      	movs	r1, #16
 8002cc8:	4838      	ldr	r0, [pc, #224]	; (8002dac <main+0x27c>)
 8002cca:	f003 fe23 	bl	8006914 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_SET);
 8002cce:	2201      	movs	r2, #1
 8002cd0:	2110      	movs	r1, #16
 8002cd2:	4836      	ldr	r0, [pc, #216]	; (8002dac <main+0x27c>)
 8002cd4:	f003 fe1e 	bl	8006914 <HAL_GPIO_WritePin>
  //HAL_GPIO_WritePin(GPIOB, W5500_CS_Pin, GPIO_PIN_RESET);
  HAL_Delay(3000);
 8002cd8:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8002cdc:	f003 f900 	bl	8005ee0 <HAL_Delay>
  init_w5500();
 8002ce0:	463b      	mov	r3, r7
 8002ce2:	469c      	mov	ip, r3
 8002ce4:	f000 fa00 	bl	80030e8 <init_w5500.8434>
  sprintf(SndBuffer, "Init finish.\r\n");
 8002ce8:	4934      	ldr	r1, [pc, #208]	; (8002dbc <main+0x28c>)
 8002cea:	4832      	ldr	r0, [pc, #200]	; (8002db4 <main+0x284>)
 8002cec:	f008 fb24 	bl	800b338 <siprintf>
  HAL_UART_Transmit(&huart1, (uint8_t *) SndBuffer, sizeof(SndBuffer), 1000);
 8002cf0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002cf4:	2264      	movs	r2, #100	; 0x64
 8002cf6:	492f      	ldr	r1, [pc, #188]	; (8002db4 <main+0x284>)
 8002cf8:	482f      	ldr	r0, [pc, #188]	; (8002db8 <main+0x288>)
 8002cfa:	f006 ff4b 	bl	8009b94 <HAL_UART_Transmit>

  currentMode = 0;
 8002cfe:	4b30      	ldr	r3, [pc, #192]	; (8002dc0 <main+0x290>)
 8002d00:	2200      	movs	r2, #0
 8002d02:	801a      	strh	r2, [r3, #0]
  HAL_TIM_Base_Start_IT(&htim4);
 8002d04:	482f      	ldr	r0, [pc, #188]	; (8002dc4 <main+0x294>)
 8002d06:	f005 f937 	bl	8007f78 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim3);
 8002d0a:	482f      	ldr	r0, [pc, #188]	; (8002dc8 <main+0x298>)
 8002d0c:	f005 f934 	bl	8007f78 <HAL_TIM_Base_Start_IT>
  HAL_TIM_IC_Stop_DMA(&htim2, TIM_CHANNEL_1);
 8002d10:	2100      	movs	r1, #0
 8002d12:	482e      	ldr	r0, [pc, #184]	; (8002dcc <main+0x29c>)
 8002d14:	f005 fcc2 	bl	800869c <HAL_TIM_IC_Stop_DMA>
  measCount = MEASSURE_COUNT;
 8002d18:	4b2d      	ldr	r3, [pc, #180]	; (8002dd0 <main+0x2a0>)
 8002d1a:	220a      	movs	r2, #10
 8002d1c:	801a      	strh	r2, [r3, #0]
  Xsum = 0;
 8002d1e:	492d      	ldr	r1, [pc, #180]	; (8002dd4 <main+0x2a4>)
 8002d20:	f04f 0200 	mov.w	r2, #0
 8002d24:	f04f 0300 	mov.w	r3, #0
 8002d28:	e9c1 2300 	strd	r2, r3, [r1]
  Ysum = 0;
 8002d2c:	492a      	ldr	r1, [pc, #168]	; (8002dd8 <main+0x2a8>)
 8002d2e:	f04f 0200 	mov.w	r2, #0
 8002d32:	f04f 0300 	mov.w	r3, #0
 8002d36:	e9c1 2300 	strd	r2, r3, [r1]

  while (1) {
	  //__HAL_TIM_SET_COUNTER(&htim2, 0x0000);
	  HAL_Delay(1);
 8002d3a:	2001      	movs	r0, #1
 8002d3c:	f003 f8d0 	bl	8005ee0 <HAL_Delay>
	  if (readyFlag) {
 8002d40:	4b26      	ldr	r3, [pc, #152]	; (8002ddc <main+0x2ac>)
 8002d42:	781b      	ldrb	r3, [r3, #0]
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d0f8      	beq.n	8002d3a <main+0x20a>
		  if (Z12 != 0 && Z21 != 0) {
 8002d48:	4b25      	ldr	r3, [pc, #148]	; (8002de0 <main+0x2b0>)
 8002d4a:	881b      	ldrh	r3, [r3, #0]
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d0f4      	beq.n	8002d3a <main+0x20a>
 8002d50:	4b24      	ldr	r3, [pc, #144]	; (8002de4 <main+0x2b4>)
 8002d52:	881b      	ldrh	r3, [r3, #0]
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d0f0      	beq.n	8002d3a <main+0x20a>
			  /* Коррекция для тестирования */
			  //X = X + 145;
			  //Y = Y + 55;
			  //sprintf(SndBuffer, "Z14:%7d, Z41:%7d, Z23:%7d, Z32:%7d   \r", Z14, Z41, Z23, Z32);

			  if (measCount-- != 0) {
 8002d58:	4b1d      	ldr	r3, [pc, #116]	; (8002dd0 <main+0x2a0>)
 8002d5a:	881b      	ldrh	r3, [r3, #0]
 8002d5c:	1e5a      	subs	r2, r3, #1
 8002d5e:	b291      	uxth	r1, r2
 8002d60:	4a1b      	ldr	r2, [pc, #108]	; (8002dd0 <main+0x2a0>)
 8002d62:	8011      	strh	r1, [r2, #0]
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d043      	beq.n	8002df0 <main+0x2c0>
				  Xsum =+ X;
 8002d68:	4b1f      	ldr	r3, [pc, #124]	; (8002de8 <main+0x2b8>)
 8002d6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d6e:	4919      	ldr	r1, [pc, #100]	; (8002dd4 <main+0x2a4>)
 8002d70:	e9c1 2300 	strd	r2, r3, [r1]
				  Ysum =+ Y;
 8002d74:	4b1d      	ldr	r3, [pc, #116]	; (8002dec <main+0x2bc>)
 8002d76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d7a:	4917      	ldr	r1, [pc, #92]	; (8002dd8 <main+0x2a8>)
 8002d7c:	e9c1 2300 	strd	r2, r3, [r1]
 8002d80:	e0f1      	b.n	8002f66 <main+0x436>
 8002d82:	bf00      	nop
 8002d84:	0800bc9c 	.word	0x0800bc9c
 8002d88:	08002fb1 	.word	0x08002fb1
 8002d8c:	08002fd5 	.word	0x08002fd5
 8002d90:	08002ff9 	.word	0x08002ff9
 8002d94:	08003025 	.word	0x08003025
 8002d98:	08003051 	.word	0x08003051
 8002d9c:	08003075 	.word	0x08003075
 8002da0:	08003099 	.word	0x08003099
 8002da4:	080030c9 	.word	0x080030c9
 8002da8:	2000032c 	.word	0x2000032c
 8002dac:	40010c00 	.word	0x40010c00
 8002db0:	0800bcac 	.word	0x0800bcac
 8002db4:	200000fc 	.word	0x200000fc
 8002db8:	20000388 	.word	0x20000388
 8002dbc:	0800bcc4 	.word	0x0800bcc4
 8002dc0:	20000426 	.word	0x20000426
 8002dc4:	2000026c 	.word	0x2000026c
 8002dc8:	20000330 	.word	0x20000330
 8002dcc:	2000042c 	.word	0x2000042c
 8002dd0:	200002b6 	.word	0x200002b6
 8002dd4:	200003d0 	.word	0x200003d0
 8002dd8:	200001c8 	.word	0x200001c8
 8002ddc:	200001c0 	.word	0x200001c0
 8002de0:	200003ce 	.word	0x200003ce
 8002de4:	20000318 	.word	0x20000318
 8002de8:	20000478 	.word	0x20000478
 8002dec:	20000320 	.word	0x20000320
			  } else {
				  measCount = MEASSURE_COUNT;
 8002df0:	4b63      	ldr	r3, [pc, #396]	; (8002f80 <main+0x450>)
 8002df2:	220a      	movs	r2, #10
 8002df4:	801a      	strh	r2, [r3, #0]
				  Xsum = Xsum / MEASSURE_COUNT;
 8002df6:	4b63      	ldr	r3, [pc, #396]	; (8002f84 <main+0x454>)
 8002df8:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002dfc:	f04f 0200 	mov.w	r2, #0
 8002e00:	4b61      	ldr	r3, [pc, #388]	; (8002f88 <main+0x458>)
 8002e02:	f7fd fc93 	bl	800072c <__aeabi_ddiv>
 8002e06:	4602      	mov	r2, r0
 8002e08:	460b      	mov	r3, r1
 8002e0a:	495e      	ldr	r1, [pc, #376]	; (8002f84 <main+0x454>)
 8002e0c:	e9c1 2300 	strd	r2, r3, [r1]
				  Ysum = Ysum / MEASSURE_COUNT
 8002e10:	4b5e      	ldr	r3, [pc, #376]	; (8002f8c <main+0x45c>)
 8002e12:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002e16:	f04f 0200 	mov.w	r2, #0
 8002e1a:	4b5b      	ldr	r3, [pc, #364]	; (8002f88 <main+0x458>)
 8002e1c:	f7fd fc86 	bl	800072c <__aeabi_ddiv>
 8002e20:	4602      	mov	r2, r0
 8002e22:	460b      	mov	r3, r1
 8002e24:	4959      	ldr	r1, [pc, #356]	; (8002f8c <main+0x45c>)
 8002e26:	e9c1 2300 	strd	r2, r3, [r1]
				  V = sqrt(pow(Xsum, 2) + pow(Ysum, 2));  // Скорость
 8002e2a:	4b56      	ldr	r3, [pc, #344]	; (8002f84 <main+0x454>)
 8002e2c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002e30:	f04f 0200 	mov.w	r2, #0
 8002e34:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002e38:	f007 f844 	bl	8009ec4 <pow>
 8002e3c:	4604      	mov	r4, r0
 8002e3e:	460d      	mov	r5, r1
 8002e40:	4b52      	ldr	r3, [pc, #328]	; (8002f8c <main+0x45c>)
 8002e42:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002e46:	f04f 0200 	mov.w	r2, #0
 8002e4a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002e4e:	f007 f839 	bl	8009ec4 <pow>
 8002e52:	4602      	mov	r2, r0
 8002e54:	460b      	mov	r3, r1
 8002e56:	4620      	mov	r0, r4
 8002e58:	4629      	mov	r1, r5
 8002e5a:	f7fd f987 	bl	800016c <__adddf3>
 8002e5e:	4602      	mov	r2, r0
 8002e60:	460b      	mov	r3, r1
 8002e62:	4610      	mov	r0, r2
 8002e64:	4619      	mov	r1, r3
 8002e66:	f007 f8d9 	bl	800a01c <sqrt>
 8002e6a:	4602      	mov	r2, r0
 8002e6c:	460b      	mov	r3, r1
 8002e6e:	4948      	ldr	r1, [pc, #288]	; (8002f90 <main+0x460>)
 8002e70:	e9c1 2300 	strd	r2, r3, [r1]
				  if ( V != 0 ) {
 8002e74:	4b46      	ldr	r3, [pc, #280]	; (8002f90 <main+0x460>)
 8002e76:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002e7a:	f04f 0200 	mov.w	r2, #0
 8002e7e:	f04f 0300 	mov.w	r3, #0
 8002e82:	f7fd fd91 	bl	80009a8 <__aeabi_dcmpeq>
 8002e86:	4603      	mov	r3, r0
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d13a      	bne.n	8002f02 <main+0x3d2>
					  A = acos( Xsum / V ) * 180 / 3.1415926; // Угол
 8002e8c:	4b3d      	ldr	r3, [pc, #244]	; (8002f84 <main+0x454>)
 8002e8e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002e92:	4b3f      	ldr	r3, [pc, #252]	; (8002f90 <main+0x460>)
 8002e94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e98:	f7fd fc48 	bl	800072c <__aeabi_ddiv>
 8002e9c:	4602      	mov	r2, r0
 8002e9e:	460b      	mov	r3, r1
 8002ea0:	4610      	mov	r0, r2
 8002ea2:	4619      	mov	r1, r3
 8002ea4:	f006 ffe0 	bl	8009e68 <acos>
 8002ea8:	f04f 0200 	mov.w	r2, #0
 8002eac:	4b39      	ldr	r3, [pc, #228]	; (8002f94 <main+0x464>)
 8002eae:	f7fd fb13 	bl	80004d8 <__aeabi_dmul>
 8002eb2:	4602      	mov	r2, r0
 8002eb4:	460b      	mov	r3, r1
 8002eb6:	4610      	mov	r0, r2
 8002eb8:	4619      	mov	r1, r3
 8002eba:	a32d      	add	r3, pc, #180	; (adr r3, 8002f70 <main+0x440>)
 8002ebc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ec0:	f7fd fc34 	bl	800072c <__aeabi_ddiv>
 8002ec4:	4602      	mov	r2, r0
 8002ec6:	460b      	mov	r3, r1
 8002ec8:	4933      	ldr	r1, [pc, #204]	; (8002f98 <main+0x468>)
 8002eca:	e9c1 2300 	strd	r2, r3, [r1]
					  if (Ysum < 0) {
 8002ece:	4b2f      	ldr	r3, [pc, #188]	; (8002f8c <main+0x45c>)
 8002ed0:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002ed4:	f04f 0200 	mov.w	r2, #0
 8002ed8:	f04f 0300 	mov.w	r3, #0
 8002edc:	f7fd fd6e 	bl	80009bc <__aeabi_dcmplt>
 8002ee0:	4603      	mov	r3, r0
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d014      	beq.n	8002f10 <main+0x3e0>
						  A = 360 - A; // III, IV квадранты
 8002ee6:	4b2c      	ldr	r3, [pc, #176]	; (8002f98 <main+0x468>)
 8002ee8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002eec:	f04f 0000 	mov.w	r0, #0
 8002ef0:	492a      	ldr	r1, [pc, #168]	; (8002f9c <main+0x46c>)
 8002ef2:	f7fd f939 	bl	8000168 <__aeabi_dsub>
 8002ef6:	4602      	mov	r2, r0
 8002ef8:	460b      	mov	r3, r1
 8002efa:	4927      	ldr	r1, [pc, #156]	; (8002f98 <main+0x468>)
 8002efc:	e9c1 2300 	strd	r2, r3, [r1]
 8002f00:	e006      	b.n	8002f10 <main+0x3e0>
					  }
				  } else {
					  A = 0;
 8002f02:	4925      	ldr	r1, [pc, #148]	; (8002f98 <main+0x468>)
 8002f04:	f04f 0200 	mov.w	r2, #0
 8002f08:	f04f 0300 	mov.w	r3, #0
 8002f0c:	e9c1 2300 	strd	r2, r3, [r1]
				  }
				  V = V / SPEED_CALIBRATE;
 8002f10:	4b1f      	ldr	r3, [pc, #124]	; (8002f90 <main+0x460>)
 8002f12:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002f16:	a318      	add	r3, pc, #96	; (adr r3, 8002f78 <main+0x448>)
 8002f18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f1c:	f7fd fc06 	bl	800072c <__aeabi_ddiv>
 8002f20:	4602      	mov	r2, r0
 8002f22:	460b      	mov	r3, r1
 8002f24:	491a      	ldr	r1, [pc, #104]	; (8002f90 <main+0x460>)
 8002f26:	e9c1 2300 	strd	r2, r3, [r1]
				  sprintf(SndBuffer, "X:%7.0f, Y:%7.0f, V:%8.1f, A:%4.0f   \r", Xsum, Ysum, V, A);
 8002f2a:	4b16      	ldr	r3, [pc, #88]	; (8002f84 <main+0x454>)
 8002f2c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8002f30:	4b16      	ldr	r3, [pc, #88]	; (8002f8c <main+0x45c>)
 8002f32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f36:	4916      	ldr	r1, [pc, #88]	; (8002f90 <main+0x460>)
 8002f38:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002f3c:	4c16      	ldr	r4, [pc, #88]	; (8002f98 <main+0x468>)
 8002f3e:	cc30      	ldmia	r4, {r4, r5}
 8002f40:	e9cd 4504 	strd	r4, r5, [sp, #16]
 8002f44:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8002f48:	e9cd 2300 	strd	r2, r3, [sp]
 8002f4c:	4642      	mov	r2, r8
 8002f4e:	464b      	mov	r3, r9
 8002f50:	4913      	ldr	r1, [pc, #76]	; (8002fa0 <main+0x470>)
 8002f52:	4814      	ldr	r0, [pc, #80]	; (8002fa4 <main+0x474>)
 8002f54:	f008 f9f0 	bl	800b338 <siprintf>
				  HAL_UART_Transmit(&huart1, (uint8_t *) SndBuffer, sizeof(SndBuffer), 1000);
 8002f58:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002f5c:	2264      	movs	r2, #100	; 0x64
 8002f5e:	4911      	ldr	r1, [pc, #68]	; (8002fa4 <main+0x474>)
 8002f60:	4811      	ldr	r0, [pc, #68]	; (8002fa8 <main+0x478>)
 8002f62:	f006 fe17 	bl	8009b94 <HAL_UART_Transmit>
			  }
			  readyFlag = FALSE;
 8002f66:	4b11      	ldr	r3, [pc, #68]	; (8002fac <main+0x47c>)
 8002f68:	2200      	movs	r2, #0
 8002f6a:	701a      	strb	r2, [r3, #0]
	  HAL_Delay(1);
 8002f6c:	e6e5      	b.n	8002d3a <main+0x20a>
 8002f6e:	bf00      	nop
 8002f70:	4d12d84a 	.word	0x4d12d84a
 8002f74:	400921fb 	.word	0x400921fb
 8002f78:	66666666 	.word	0x66666666
 8002f7c:	40146666 	.word	0x40146666
 8002f80:	200002b6 	.word	0x200002b6
 8002f84:	200003d0 	.word	0x200003d0
 8002f88:	40240000 	.word	0x40240000
 8002f8c:	200001c8 	.word	0x200001c8
 8002f90:	20000380 	.word	0x20000380
 8002f94:	40668000 	.word	0x40668000
 8002f98:	20000310 	.word	0x20000310
 8002f9c:	40768000 	.word	0x40768000
 8002fa0:	0800bcd4 	.word	0x0800bcd4
 8002fa4:	200000fc 	.word	0x200000fc
 8002fa8:	20000388 	.word	0x20000388
 8002fac:	200001c0 	.word	0x200001c0

08002fb0 <W5500_Select.8405>:
void W5500_Select(void) {
 8002fb0:	b580      	push	{r7, lr}
 8002fb2:	b082      	sub	sp, #8
 8002fb4:	af00      	add	r7, sp, #0
 8002fb6:	f8c7 c004 	str.w	ip, [r7, #4]
	HAL_GPIO_WritePin(GPIOB, W5500_CS_Pin, GPIO_PIN_RESET);
 8002fba:	2200      	movs	r2, #0
 8002fbc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002fc0:	4803      	ldr	r0, [pc, #12]	; (8002fd0 <W5500_Select.8405+0x20>)
 8002fc2:	f003 fca7 	bl	8006914 <HAL_GPIO_WritePin>
}
 8002fc6:	bf00      	nop
 8002fc8:	3708      	adds	r7, #8
 8002fca:	46bd      	mov	sp, r7
 8002fcc:	bd80      	pop	{r7, pc}
 8002fce:	bf00      	nop
 8002fd0:	40010c00 	.word	0x40010c00

08002fd4 <W5500_Unselect.8408>:
void W5500_Unselect(void) {
 8002fd4:	b580      	push	{r7, lr}
 8002fd6:	b082      	sub	sp, #8
 8002fd8:	af00      	add	r7, sp, #0
 8002fda:	f8c7 c004 	str.w	ip, [r7, #4]
	HAL_GPIO_WritePin(GPIOB, W5500_CS_Pin, GPIO_PIN_SET);
 8002fde:	2201      	movs	r2, #1
 8002fe0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002fe4:	4803      	ldr	r0, [pc, #12]	; (8002ff4 <W5500_Unselect.8408+0x20>)
 8002fe6:	f003 fc95 	bl	8006914 <HAL_GPIO_WritePin>
}
 8002fea:	bf00      	nop
 8002fec:	3708      	adds	r7, #8
 8002fee:	46bd      	mov	sp, r7
 8002ff0:	bd80      	pop	{r7, pc}
 8002ff2:	bf00      	nop
 8002ff4:	40010c00 	.word	0x40010c00

08002ff8 <W5500_ReadBuff.8412>:
void W5500_ReadBuff(uint8_t* buff, uint16_t len) {
 8002ff8:	b580      	push	{r7, lr}
 8002ffa:	b084      	sub	sp, #16
 8002ffc:	af00      	add	r7, sp, #0
 8002ffe:	60f8      	str	r0, [r7, #12]
 8003000:	460b      	mov	r3, r1
 8003002:	817b      	strh	r3, [r7, #10]
 8003004:	f8c7 c004 	str.w	ip, [r7, #4]
	HAL_SPI_Receive(&hspi2, buff, len, HAL_MAX_DELAY);
 8003008:	897a      	ldrh	r2, [r7, #10]
 800300a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800300e:	68f9      	ldr	r1, [r7, #12]
 8003010:	4803      	ldr	r0, [pc, #12]	; (8003020 <W5500_ReadBuff.8412+0x28>)
 8003012:	f004 fbb5 	bl	8007780 <HAL_SPI_Receive>
}
 8003016:	bf00      	nop
 8003018:	3710      	adds	r7, #16
 800301a:	46bd      	mov	sp, r7
 800301c:	bd80      	pop	{r7, pc}
 800301e:	bf00      	nop
 8003020:	20000214 	.word	0x20000214

08003024 <W5500_WriteBuff.8416>:
void W5500_WriteBuff(uint8_t* buff, uint16_t len) {
 8003024:	b580      	push	{r7, lr}
 8003026:	b084      	sub	sp, #16
 8003028:	af00      	add	r7, sp, #0
 800302a:	60f8      	str	r0, [r7, #12]
 800302c:	460b      	mov	r3, r1
 800302e:	817b      	strh	r3, [r7, #10]
 8003030:	f8c7 c004 	str.w	ip, [r7, #4]
	HAL_SPI_Transmit(&hspi2, buff, len, HAL_MAX_DELAY);
 8003034:	897a      	ldrh	r2, [r7, #10]
 8003036:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800303a:	68f9      	ldr	r1, [r7, #12]
 800303c:	4803      	ldr	r0, [pc, #12]	; (800304c <W5500_WriteBuff.8416+0x28>)
 800303e:	f004 fa63 	bl	8007508 <HAL_SPI_Transmit>
}
 8003042:	bf00      	nop
 8003044:	3710      	adds	r7, #16
 8003046:	46bd      	mov	sp, r7
 8003048:	bd80      	pop	{r7, pc}
 800304a:	bf00      	nop
 800304c:	20000214 	.word	0x20000214

08003050 <W5500_ReadByte.8419>:
uint8_t W5500_ReadByte(void) {
 8003050:	b580      	push	{r7, lr}
 8003052:	b084      	sub	sp, #16
 8003054:	af00      	add	r7, sp, #0
 8003056:	4662      	mov	r2, ip
 8003058:	f8c7 c004 	str.w	ip, [r7, #4]
	W5500_ReadBuff(&byte, sizeof(byte));
 800305c:	f107 030f 	add.w	r3, r7, #15
 8003060:	4694      	mov	ip, r2
 8003062:	2101      	movs	r1, #1
 8003064:	4618      	mov	r0, r3
 8003066:	f7ff ffc7 	bl	8002ff8 <W5500_ReadBuff.8412>
	return byte;
 800306a:	7bfb      	ldrb	r3, [r7, #15]
}
 800306c:	4618      	mov	r0, r3
 800306e:	3710      	adds	r7, #16
 8003070:	46bd      	mov	sp, r7
 8003072:	bd80      	pop	{r7, pc}

08003074 <W5500_WriteByte.8423>:
void W5500_WriteByte(uint8_t byte) {
 8003074:	b580      	push	{r7, lr}
 8003076:	b082      	sub	sp, #8
 8003078:	af00      	add	r7, sp, #0
 800307a:	4603      	mov	r3, r0
 800307c:	71fb      	strb	r3, [r7, #7]
 800307e:	4662      	mov	r2, ip
 8003080:	f8c7 c000 	str.w	ip, [r7]
	W5500_WriteBuff(&byte, sizeof(byte));
 8003084:	1dfb      	adds	r3, r7, #7
 8003086:	4694      	mov	ip, r2
 8003088:	2101      	movs	r1, #1
 800308a:	4618      	mov	r0, r3
 800308c:	f7ff ffca 	bl	8003024 <W5500_WriteBuff.8416>
}
 8003090:	bf00      	nop
 8003092:	3708      	adds	r7, #8
 8003094:	46bd      	mov	sp, r7
 8003096:	bd80      	pop	{r7, pc}

08003098 <Callback_IPAssigned.8427>:
void Callback_IPAssigned(void) {
 8003098:	b590      	push	{r4, r7, lr}
 800309a:	b083      	sub	sp, #12
 800309c:	af00      	add	r7, sp, #0
 800309e:	4664      	mov	r4, ip
 80030a0:	f8c7 c004 	str.w	ip, [r7, #4]
    UART_Printf("Callback: IP assigned! Leased time: %d sec\r\n", getDHCPLeasetime());
 80030a4:	f7ff f8d2 	bl	800224c <getDHCPLeasetime>
 80030a8:	4603      	mov	r3, r0
 80030aa:	46a4      	mov	ip, r4
 80030ac:	4619      	mov	r1, r3
 80030ae:	4805      	ldr	r0, [pc, #20]	; (80030c4 <Callback_IPAssigned.8427+0x2c>)
 80030b0:	f7ff fd0e 	bl	8002ad0 <UART_Printf.8399>
    ip_assigned = true;
 80030b4:	2301      	movs	r3, #1
 80030b6:	f884 3800 	strb.w	r3, [r4, #2048]	; 0x800
}
 80030ba:	bf00      	nop
 80030bc:	370c      	adds	r7, #12
 80030be:	46bd      	mov	sp, r7
 80030c0:	bd90      	pop	{r4, r7, pc}
 80030c2:	bf00      	nop
 80030c4:	0800bcfc 	.word	0x0800bcfc

080030c8 <Callback_IPConflict.8430>:
void Callback_IPConflict(void) {
 80030c8:	b580      	push	{r7, lr}
 80030ca:	b082      	sub	sp, #8
 80030cc:	af00      	add	r7, sp, #0
 80030ce:	4663      	mov	r3, ip
 80030d0:	f8c7 c004 	str.w	ip, [r7, #4]
    UART_Printf("Callback: IP conflict!\r\n");
 80030d4:	469c      	mov	ip, r3
 80030d6:	4803      	ldr	r0, [pc, #12]	; (80030e4 <Callback_IPConflict.8430+0x1c>)
 80030d8:	f7ff fcfa 	bl	8002ad0 <UART_Printf.8399>
}
 80030dc:	bf00      	nop
 80030de:	3708      	adds	r7, #8
 80030e0:	46bd      	mov	sp, r7
 80030e2:	bd80      	pop	{r7, pc}
 80030e4:	0800bd2c 	.word	0x0800bd2c

080030e8 <init_w5500.8434>:
void init_w5500() {
 80030e8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80030ec:	b0b3      	sub	sp, #204	; 0xcc
 80030ee:	af0e      	add	r7, sp, #56	; 0x38
 80030f0:	4666      	mov	r6, ip
 80030f2:	f8c7 c01c 	str.w	ip, [r7, #28]
    UART_Printf("\r\ninit() called!\r\n");
 80030f6:	46b4      	mov	ip, r6
 80030f8:	48d4      	ldr	r0, [pc, #848]	; (800344c <init_w5500.8434+0x364>)
 80030fa:	f7ff fce9 	bl	8002ad0 <UART_Printf.8399>
    UART_Printf("Registering W5500 callbacks...\r\n");
 80030fe:	46b4      	mov	ip, r6
 8003100:	48d3      	ldr	r0, [pc, #844]	; (8003450 <init_w5500.8434+0x368>)
 8003102:	f7ff fce5 	bl	8002ad0 <UART_Printf.8399>
    reg_wizchip_cs_cbfunc(W5500_Select, W5500_Unselect);
 8003106:	f606 0374 	addw	r3, r6, #2164	; 0x874
 800310a:	f043 0301 	orr.w	r3, r3, #1
 800310e:	461a      	mov	r2, r3
 8003110:	f606 0364 	addw	r3, r6, #2148	; 0x864
 8003114:	f043 0301 	orr.w	r3, r3, #1
 8003118:	4619      	mov	r1, r3
 800311a:	4610      	mov	r0, r2
 800311c:	f002 fcc4 	bl	8005aa8 <reg_wizchip_cs_cbfunc>
    reg_wizchip_spi_cbfunc(W5500_ReadByte, W5500_WriteByte);
 8003120:	f606 0354 	addw	r3, r6, #2132	; 0x854
 8003124:	f043 0301 	orr.w	r3, r3, #1
 8003128:	461a      	mov	r2, r3
 800312a:	f606 0344 	addw	r3, r6, #2116	; 0x844
 800312e:	f043 0301 	orr.w	r3, r3, #1
 8003132:	4619      	mov	r1, r3
 8003134:	4610      	mov	r0, r2
 8003136:	f002 fcdb 	bl	8005af0 <reg_wizchip_spi_cbfunc>
    reg_wizchip_spiburst_cbfunc(W5500_ReadBuff, W5500_WriteBuff);
 800313a:	f606 0334 	addw	r3, r6, #2100	; 0x834
 800313e:	f043 0301 	orr.w	r3, r3, #1
 8003142:	461a      	mov	r2, r3
 8003144:	f606 0324 	addw	r3, r6, #2084	; 0x824
 8003148:	f043 0301 	orr.w	r3, r3, #1
 800314c:	4619      	mov	r1, r3
 800314e:	4610      	mov	r0, r2
 8003150:	f002 fcfa 	bl	8005b48 <reg_wizchip_spiburst_cbfunc>
    UART_Printf("Calling wizchip_init()...\r\n");
 8003154:	46b4      	mov	ip, r6
 8003156:	48bf      	ldr	r0, [pc, #764]	; (8003454 <init_w5500.8434+0x36c>)
 8003158:	f7ff fcba 	bl	8002ad0 <UART_Printf.8399>
    uint8_t rx_tx_buff_sizes[] = {2, 2, 2, 2, 2, 2, 2, 2};
 800315c:	4abe      	ldr	r2, [pc, #760]	; (8003458 <init_w5500.8434+0x370>)
 800315e:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8003162:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003166:	e883 0003 	stmia.w	r3, {r0, r1}
    wizchip_init(rx_tx_buff_sizes, rx_tx_buff_sizes);
 800316a:	f107 0270 	add.w	r2, r7, #112	; 0x70
 800316e:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8003172:	4611      	mov	r1, r2
 8003174:	4618      	mov	r0, r3
 8003176:	f002 fd5f 	bl	8005c38 <wizchip_init>
    UART_Printf("Calling DHCP_init()...\r\n");
 800317a:	46b4      	mov	ip, r6
 800317c:	48b7      	ldr	r0, [pc, #732]	; (800345c <init_w5500.8434+0x374>)
 800317e:	f7ff fca7 	bl	8002ad0 <UART_Printf.8399>
    wiz_NetInfo net_info = {
 8003182:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8003186:	2200      	movs	r2, #0
 8003188:	601a      	str	r2, [r3, #0]
 800318a:	605a      	str	r2, [r3, #4]
 800318c:	609a      	str	r2, [r3, #8]
 800318e:	60da      	str	r2, [r3, #12]
 8003190:	611a      	str	r2, [r3, #16]
 8003192:	f8c3 2013 	str.w	r2, [r3, #19]
 8003196:	4ab2      	ldr	r2, [pc, #712]	; (8003460 <init_w5500.8434+0x378>)
 8003198:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800319c:	e892 0003 	ldmia.w	r2, {r0, r1}
 80031a0:	6018      	str	r0, [r3, #0]
 80031a2:	3304      	adds	r3, #4
 80031a4:	8019      	strh	r1, [r3, #0]
 80031a6:	2302      	movs	r3, #2
 80031a8:	f887 306e 	strb.w	r3, [r7, #110]	; 0x6e
    setSHAR(net_info.mac);
 80031ac:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80031b0:	2206      	movs	r2, #6
 80031b2:	4619      	mov	r1, r3
 80031b4:	f44f 6010 	mov.w	r0, #2304	; 0x900
 80031b8:	f002 fa26 	bl	8005608 <WIZCHIP_WRITE_BUF>
    DHCP_init(DHCP_SOCKET, dhcp_buffer);
 80031bc:	f506 6380 	add.w	r3, r6, #1024	; 0x400
 80031c0:	4619      	mov	r1, r3
 80031c2:	2000      	movs	r0, #0
 80031c4:	f7fe ff20 	bl	8002008 <DHCP_init>
    UART_Printf("Registering DHCP callbacks...\r\n");
 80031c8:	46b4      	mov	ip, r6
 80031ca:	48a6      	ldr	r0, [pc, #664]	; (8003464 <init_w5500.8434+0x37c>)
 80031cc:	f7ff fc80 	bl	8002ad0 <UART_Printf.8399>
    reg_dhcp_cbfunc(
 80031d0:	f606 0314 	addw	r3, r6, #2068	; 0x814
 80031d4:	f043 0301 	orr.w	r3, r3, #1
 80031d8:	4618      	mov	r0, r3
 80031da:	f606 0314 	addw	r3, r6, #2068	; 0x814
 80031de:	f043 0301 	orr.w	r3, r3, #1
 80031e2:	4619      	mov	r1, r3
 80031e4:	f606 0304 	addw	r3, r6, #2052	; 0x804
 80031e8:	f043 0301 	orr.w	r3, r3, #1
 80031ec:	461a      	mov	r2, r3
 80031ee:	f7fd fc6b 	bl	8000ac8 <reg_dhcp_cbfunc>
    UART_Printf("Calling DHCP_run()...\r\n");
 80031f2:	46b4      	mov	ip, r6
 80031f4:	489c      	ldr	r0, [pc, #624]	; (8003468 <init_w5500.8434+0x380>)
 80031f6:	f7ff fc6b 	bl	8002ad0 <UART_Printf.8399>
    uint32_t ctr = 10000;
 80031fa:	f242 7310 	movw	r3, #10000	; 0x2710
 80031fe:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    while((!ip_assigned) && (ctr > 0)) {
 8003202:	e006      	b.n	8003212 <init_w5500.8434+0x12a>
        DHCP_run();
 8003204:	f7fe fd48 	bl	8001c98 <DHCP_run>
        ctr--;
 8003208:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800320c:	3b01      	subs	r3, #1
 800320e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    while((!ip_assigned) && (ctr > 0)) {
 8003212:	f896 3800 	ldrb.w	r3, [r6, #2048]	; 0x800
 8003216:	b2db      	uxtb	r3, r3
 8003218:	f083 0301 	eor.w	r3, r3, #1
 800321c:	b2db      	uxtb	r3, r3
 800321e:	2b00      	cmp	r3, #0
 8003220:	d003      	beq.n	800322a <init_w5500.8434+0x142>
 8003222:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003226:	2b00      	cmp	r3, #0
 8003228:	d1ec      	bne.n	8003204 <init_w5500.8434+0x11c>
    if(!ip_assigned) {
 800322a:	f896 3800 	ldrb.w	r3, [r6, #2048]	; 0x800
 800322e:	b2db      	uxtb	r3, r3
 8003230:	f083 0301 	eor.w	r3, r3, #1
 8003234:	b2db      	uxtb	r3, r3
 8003236:	2b00      	cmp	r3, #0
 8003238:	d004      	beq.n	8003244 <init_w5500.8434+0x15c>
        UART_Printf("\r\nIP was not assigned :(\r\n");
 800323a:	46b4      	mov	ip, r6
 800323c:	488b      	ldr	r0, [pc, #556]	; (800346c <init_w5500.8434+0x384>)
 800323e:	f7ff fc47 	bl	8002ad0 <UART_Printf.8399>
        return;
 8003242:	e194      	b.n	800356e <init_w5500.8434+0x486>
    getIPfromDHCP(net_info.ip);
 8003244:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8003248:	3306      	adds	r3, #6
 800324a:	4618      	mov	r0, r3
 800324c:	f7fe ff86 	bl	800215c <getIPfromDHCP>
    getGWfromDHCP(net_info.gw);
 8003250:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8003254:	330e      	adds	r3, #14
 8003256:	4618      	mov	r0, r3
 8003258:	f7fe ff9e 	bl	8002198 <getGWfromDHCP>
    getSNfromDHCP(net_info.sn);
 800325c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8003260:	330a      	adds	r3, #10
 8003262:	4618      	mov	r0, r3
 8003264:	f7fe ffb6 	bl	80021d4 <getSNfromDHCP>
    getDNSfromDHCP(dns);
 8003268:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800326c:	4618      	mov	r0, r3
 800326e:	f7fe ffcf 	bl	8002210 <getDNSfromDHCP>
        net_info.ip[0], net_info.ip[1], net_info.ip[2], net_info.ip[3],
 8003272:	f897 305e 	ldrb.w	r3, [r7, #94]	; 0x5e
    UART_Printf("IP:  %d.%d.%d.%d\r\nGW:  %d.%d.%d.%d\r\nNet: %d.%d.%d.%d\r\nDNS: %d.%d.%d.%d\r\n",
 8003276:	469e      	mov	lr, r3
        net_info.ip[0], net_info.ip[1], net_info.ip[2], net_info.ip[3],
 8003278:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
    UART_Printf("IP:  %d.%d.%d.%d\r\nGW:  %d.%d.%d.%d\r\nNet: %d.%d.%d.%d\r\nDNS: %d.%d.%d.%d\r\n",
 800327c:	4698      	mov	r8, r3
        net_info.ip[0], net_info.ip[1], net_info.ip[2], net_info.ip[3],
 800327e:	f897 3060 	ldrb.w	r3, [r7, #96]	; 0x60
    UART_Printf("IP:  %d.%d.%d.%d\r\nGW:  %d.%d.%d.%d\r\nNet: %d.%d.%d.%d\r\nDNS: %d.%d.%d.%d\r\n",
 8003282:	4699      	mov	r9, r3
        net_info.ip[0], net_info.ip[1], net_info.ip[2], net_info.ip[3],
 8003284:	f897 3061 	ldrb.w	r3, [r7, #97]	; 0x61
    UART_Printf("IP:  %d.%d.%d.%d\r\nGW:  %d.%d.%d.%d\r\nNet: %d.%d.%d.%d\r\nDNS: %d.%d.%d.%d\r\n",
 8003288:	461c      	mov	r4, r3
        net_info.gw[0], net_info.gw[1], net_info.gw[2], net_info.gw[3],
 800328a:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
    UART_Printf("IP:  %d.%d.%d.%d\r\nGW:  %d.%d.%d.%d\r\nNet: %d.%d.%d.%d\r\nDNS: %d.%d.%d.%d\r\n",
 800328e:	461d      	mov	r5, r3
        net_info.gw[0], net_info.gw[1], net_info.gw[2], net_info.gw[3],
 8003290:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
    UART_Printf("IP:  %d.%d.%d.%d\r\nGW:  %d.%d.%d.%d\r\nNet: %d.%d.%d.%d\r\nDNS: %d.%d.%d.%d\r\n",
 8003294:	61bb      	str	r3, [r7, #24]
        net_info.gw[0], net_info.gw[1], net_info.gw[2], net_info.gw[3],
 8003296:	f897 3068 	ldrb.w	r3, [r7, #104]	; 0x68
    UART_Printf("IP:  %d.%d.%d.%d\r\nGW:  %d.%d.%d.%d\r\nNet: %d.%d.%d.%d\r\nDNS: %d.%d.%d.%d\r\n",
 800329a:	617b      	str	r3, [r7, #20]
        net_info.gw[0], net_info.gw[1], net_info.gw[2], net_info.gw[3],
 800329c:	f897 3069 	ldrb.w	r3, [r7, #105]	; 0x69
    UART_Printf("IP:  %d.%d.%d.%d\r\nGW:  %d.%d.%d.%d\r\nNet: %d.%d.%d.%d\r\nDNS: %d.%d.%d.%d\r\n",
 80032a0:	613b      	str	r3, [r7, #16]
        net_info.sn[0], net_info.sn[1], net_info.sn[2], net_info.sn[3],
 80032a2:	f897 3062 	ldrb.w	r3, [r7, #98]	; 0x62
    UART_Printf("IP:  %d.%d.%d.%d\r\nGW:  %d.%d.%d.%d\r\nNet: %d.%d.%d.%d\r\nDNS: %d.%d.%d.%d\r\n",
 80032a6:	60fb      	str	r3, [r7, #12]
        net_info.sn[0], net_info.sn[1], net_info.sn[2], net_info.sn[3],
 80032a8:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
    UART_Printf("IP:  %d.%d.%d.%d\r\nGW:  %d.%d.%d.%d\r\nNet: %d.%d.%d.%d\r\nDNS: %d.%d.%d.%d\r\n",
 80032ac:	60bb      	str	r3, [r7, #8]
        net_info.sn[0], net_info.sn[1], net_info.sn[2], net_info.sn[3],
 80032ae:	f897 3064 	ldrb.w	r3, [r7, #100]	; 0x64
    UART_Printf("IP:  %d.%d.%d.%d\r\nGW:  %d.%d.%d.%d\r\nNet: %d.%d.%d.%d\r\nDNS: %d.%d.%d.%d\r\n",
 80032b2:	607b      	str	r3, [r7, #4]
        net_info.sn[0], net_info.sn[1], net_info.sn[2], net_info.sn[3],
 80032b4:	f897 3065 	ldrb.w	r3, [r7, #101]	; 0x65
    UART_Printf("IP:  %d.%d.%d.%d\r\nGW:  %d.%d.%d.%d\r\nNet: %d.%d.%d.%d\r\nDNS: %d.%d.%d.%d\r\n",
 80032b8:	603b      	str	r3, [r7, #0]
        dns[0], dns[1], dns[2], dns[3]
 80032ba:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
    UART_Printf("IP:  %d.%d.%d.%d\r\nGW:  %d.%d.%d.%d\r\nNet: %d.%d.%d.%d\r\nDNS: %d.%d.%d.%d\r\n",
 80032be:	4618      	mov	r0, r3
        dns[0], dns[1], dns[2], dns[3]
 80032c0:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
    UART_Printf("IP:  %d.%d.%d.%d\r\nGW:  %d.%d.%d.%d\r\nNet: %d.%d.%d.%d\r\nDNS: %d.%d.%d.%d\r\n",
 80032c4:	4619      	mov	r1, r3
        dns[0], dns[1], dns[2], dns[3]
 80032c6:	f897 3056 	ldrb.w	r3, [r7, #86]	; 0x56
    UART_Printf("IP:  %d.%d.%d.%d\r\nGW:  %d.%d.%d.%d\r\nNet: %d.%d.%d.%d\r\nDNS: %d.%d.%d.%d\r\n",
 80032ca:	461a      	mov	r2, r3
        dns[0], dns[1], dns[2], dns[3]
 80032cc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
    UART_Printf("IP:  %d.%d.%d.%d\r\nGW:  %d.%d.%d.%d\r\nNet: %d.%d.%d.%d\r\nDNS: %d.%d.%d.%d\r\n",
 80032d0:	930c      	str	r3, [sp, #48]	; 0x30
 80032d2:	920b      	str	r2, [sp, #44]	; 0x2c
 80032d4:	910a      	str	r1, [sp, #40]	; 0x28
 80032d6:	9009      	str	r0, [sp, #36]	; 0x24
 80032d8:	683a      	ldr	r2, [r7, #0]
 80032da:	9208      	str	r2, [sp, #32]
 80032dc:	687a      	ldr	r2, [r7, #4]
 80032de:	9207      	str	r2, [sp, #28]
 80032e0:	68ba      	ldr	r2, [r7, #8]
 80032e2:	9206      	str	r2, [sp, #24]
 80032e4:	68fa      	ldr	r2, [r7, #12]
 80032e6:	9205      	str	r2, [sp, #20]
 80032e8:	693a      	ldr	r2, [r7, #16]
 80032ea:	9204      	str	r2, [sp, #16]
 80032ec:	697a      	ldr	r2, [r7, #20]
 80032ee:	9203      	str	r2, [sp, #12]
 80032f0:	69bb      	ldr	r3, [r7, #24]
 80032f2:	9302      	str	r3, [sp, #8]
 80032f4:	9501      	str	r5, [sp, #4]
 80032f6:	9400      	str	r4, [sp, #0]
 80032f8:	46b4      	mov	ip, r6
 80032fa:	464b      	mov	r3, r9
 80032fc:	4642      	mov	r2, r8
 80032fe:	4671      	mov	r1, lr
 8003300:	485b      	ldr	r0, [pc, #364]	; (8003470 <init_w5500.8434+0x388>)
 8003302:	f7ff fbe5 	bl	8002ad0 <UART_Printf.8399>
    UART_Printf("Calling wizchip_setnetinfo()...\r\n");
 8003306:	46b4      	mov	ip, r6
 8003308:	485a      	ldr	r0, [pc, #360]	; (8003474 <init_w5500.8434+0x38c>)
 800330a:	f7ff fbe1 	bl	8002ad0 <UART_Printf.8399>
    wizchip_setnetinfo(&net_info);
 800330e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8003312:	4618      	mov	r0, r3
 8003314:	f002 fd1c 	bl	8005d50 <wizchip_setnetinfo>
    UART_Printf("Calling DNS_init()...\r\n");
 8003318:	46b4      	mov	ip, r6
 800331a:	4857      	ldr	r0, [pc, #348]	; (8003478 <init_w5500.8434+0x390>)
 800331c:	f7ff fbd8 	bl	8002ad0 <UART_Printf.8399>
    DNS_init(DNS_SOCKET, dns_buffer);
 8003320:	4633      	mov	r3, r6
 8003322:	4619      	mov	r1, r3
 8003324:	2001      	movs	r0, #1
 8003326:	f7ff fb31 	bl	800298c <DNS_init>
        char domain_name[] = "eax.me";
 800332a:	4a54      	ldr	r2, [pc, #336]	; (800347c <init_w5500.8434+0x394>)
 800332c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003330:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003334:	6018      	str	r0, [r3, #0]
 8003336:	3304      	adds	r3, #4
 8003338:	8019      	strh	r1, [r3, #0]
 800333a:	3302      	adds	r3, #2
 800333c:	0c0a      	lsrs	r2, r1, #16
 800333e:	701a      	strb	r2, [r3, #0]
        UART_Printf("Resolving domain name \"%s\"...\r\n", domain_name);
 8003340:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003344:	46b4      	mov	ip, r6
 8003346:	4619      	mov	r1, r3
 8003348:	484d      	ldr	r0, [pc, #308]	; (8003480 <init_w5500.8434+0x398>)
 800334a:	f7ff fbc1 	bl	8002ad0 <UART_Printf.8399>
        int8_t res = DNS_run(dns, (uint8_t*)&domain_name, addr);
 800334e:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8003352:	f107 0148 	add.w	r1, r7, #72	; 0x48
 8003356:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800335a:	4618      	mov	r0, r3
 800335c:	f7ff fb32 	bl	80029c4 <DNS_run>
 8003360:	4603      	mov	r3, r0
 8003362:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89
        if(res != 1) {
 8003366:	f997 3089 	ldrsb.w	r3, [r7, #137]	; 0x89
 800336a:	2b01      	cmp	r3, #1
 800336c:	d007      	beq.n	800337e <init_w5500.8434+0x296>
            UART_Printf("DNS_run() failed, res = %d", res);
 800336e:	f997 3089 	ldrsb.w	r3, [r7, #137]	; 0x89
 8003372:	46b4      	mov	ip, r6
 8003374:	4619      	mov	r1, r3
 8003376:	4843      	ldr	r0, [pc, #268]	; (8003484 <init_w5500.8434+0x39c>)
 8003378:	f7ff fbaa 	bl	8002ad0 <UART_Printf.8399>
 800337c:	e0f7      	b.n	800356e <init_w5500.8434+0x486>
        UART_Printf("Result: %d.%d.%d.%d\r\n", addr[0], addr[1], addr[2], addr[3]);
 800337e:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 8003382:	4619      	mov	r1, r3
 8003384:	f897 3051 	ldrb.w	r3, [r7, #81]	; 0x51
 8003388:	461a      	mov	r2, r3
 800338a:	f897 3052 	ldrb.w	r3, [r7, #82]	; 0x52
 800338e:	4618      	mov	r0, r3
 8003390:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 8003394:	9300      	str	r3, [sp, #0]
 8003396:	46b4      	mov	ip, r6
 8003398:	4603      	mov	r3, r0
 800339a:	483b      	ldr	r0, [pc, #236]	; (8003488 <init_w5500.8434+0x3a0>)
 800339c:	f7ff fb98 	bl	8002ad0 <UART_Printf.8399>
    UART_Printf("Creating socket...\r\n");
 80033a0:	46b4      	mov	ip, r6
 80033a2:	483a      	ldr	r0, [pc, #232]	; (800348c <init_w5500.8434+0x3a4>)
 80033a4:	f7ff fb94 	bl	8002ad0 <UART_Printf.8399>
    uint8_t http_socket = HTTP_SOCKET;
 80033a8:	2302      	movs	r3, #2
 80033aa:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
    uint8_t code = socket(http_socket, Sn_MR_TCP, 10888, 0);
 80033ae:	f897 0088 	ldrb.w	r0, [r7, #136]	; 0x88
 80033b2:	2300      	movs	r3, #0
 80033b4:	f642 2288 	movw	r2, #10888	; 0x2a88
 80033b8:	2101      	movs	r1, #1
 80033ba:	f000 fc95 	bl	8003ce8 <socket>
 80033be:	4603      	mov	r3, r0
 80033c0:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
    if(code != http_socket) {
 80033c4:	f897 2087 	ldrb.w	r2, [r7, #135]	; 0x87
 80033c8:	f897 3088 	ldrb.w	r3, [r7, #136]	; 0x88
 80033cc:	429a      	cmp	r2, r3
 80033ce:	d007      	beq.n	80033e0 <init_w5500.8434+0x2f8>
        UART_Printf("socket() failed, code = %d\r\n", code);
 80033d0:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 80033d4:	46b4      	mov	ip, r6
 80033d6:	4619      	mov	r1, r3
 80033d8:	482d      	ldr	r0, [pc, #180]	; (8003490 <init_w5500.8434+0x3a8>)
 80033da:	f7ff fb79 	bl	8002ad0 <UART_Printf.8399>
        return;
 80033de:	e0c6      	b.n	800356e <init_w5500.8434+0x486>
    UART_Printf("Socket created, connecting...\r\n");
 80033e0:	46b4      	mov	ip, r6
 80033e2:	482c      	ldr	r0, [pc, #176]	; (8003494 <init_w5500.8434+0x3ac>)
 80033e4:	f7ff fb74 	bl	8002ad0 <UART_Printf.8399>
    code = connect(http_socket, addr, 80);
 80033e8:	f107 0150 	add.w	r1, r7, #80	; 0x50
 80033ec:	f897 3088 	ldrb.w	r3, [r7, #136]	; 0x88
 80033f0:	2250      	movs	r2, #80	; 0x50
 80033f2:	4618      	mov	r0, r3
 80033f4:	f000 fdfc 	bl	8003ff0 <connect>
 80033f8:	4603      	mov	r3, r0
 80033fa:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
    if(code != SOCK_OK) {
 80033fe:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8003402:	2b01      	cmp	r3, #1
 8003404:	d00c      	beq.n	8003420 <init_w5500.8434+0x338>
        UART_Printf("connect() failed, code = %d\r\n", code);
 8003406:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 800340a:	46b4      	mov	ip, r6
 800340c:	4619      	mov	r1, r3
 800340e:	4822      	ldr	r0, [pc, #136]	; (8003498 <init_w5500.8434+0x3b0>)
 8003410:	f7ff fb5e 	bl	8002ad0 <UART_Printf.8399>
        close(http_socket);
 8003414:	f897 3088 	ldrb.w	r3, [r7, #136]	; 0x88
 8003418:	4618      	mov	r0, r3
 800341a:	f000 fd7b 	bl	8003f14 <close>
        return;
 800341e:	e0a6      	b.n	800356e <init_w5500.8434+0x486>
    UART_Printf("Connected, sending HTTP request...\r\n");
 8003420:	46b4      	mov	ip, r6
 8003422:	481e      	ldr	r0, [pc, #120]	; (800349c <init_w5500.8434+0x3b4>)
 8003424:	f7ff fb54 	bl	8002ad0 <UART_Printf.8399>
        char req[] = "GET / HTTP/1.0\r\nHost: eax.me\r\n\r\n";
 8003428:	4b1d      	ldr	r3, [pc, #116]	; (80034a0 <init_w5500.8434+0x3b8>)
 800342a:	f107 0424 	add.w	r4, r7, #36	; 0x24
 800342e:	461d      	mov	r5, r3
 8003430:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003432:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003434:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003436:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003438:	682b      	ldr	r3, [r5, #0]
 800343a:	7023      	strb	r3, [r4, #0]
        uint16_t len = sizeof(req) - 1;
 800343c:	2320      	movs	r3, #32
 800343e:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
        uint8_t* buff = (uint8_t*)&req;
 8003442:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003446:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
        while(len > 0) {
 800344a:	e056      	b.n	80034fa <init_w5500.8434+0x412>
 800344c:	0800bd48 	.word	0x0800bd48
 8003450:	0800bd5c 	.word	0x0800bd5c
 8003454:	0800bd80 	.word	0x0800bd80
 8003458:	0800c048 	.word	0x0800c048
 800345c:	0800bd9c 	.word	0x0800bd9c
 8003460:	0800c050 	.word	0x0800c050
 8003464:	0800bdb8 	.word	0x0800bdb8
 8003468:	0800bdd8 	.word	0x0800bdd8
 800346c:	0800bdf0 	.word	0x0800bdf0
 8003470:	0800be0c 	.word	0x0800be0c
 8003474:	0800be58 	.word	0x0800be58
 8003478:	0800be7c 	.word	0x0800be7c
 800347c:	0800c058 	.word	0x0800c058
 8003480:	0800be94 	.word	0x0800be94
 8003484:	0800beb4 	.word	0x0800beb4
 8003488:	0800bed0 	.word	0x0800bed0
 800348c:	0800bee8 	.word	0x0800bee8
 8003490:	0800bf00 	.word	0x0800bf00
 8003494:	0800bf20 	.word	0x0800bf20
 8003498:	0800bf40 	.word	0x0800bf40
 800349c:	0800bf60 	.word	0x0800bf60
 80034a0:	0800c060 	.word	0x0800c060
            UART_Printf("Sending %d bytes...\r\n", len);
 80034a4:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 80034a8:	46b4      	mov	ip, r6
 80034aa:	4619      	mov	r1, r3
 80034ac:	4832      	ldr	r0, [pc, #200]	; (8003578 <init_w5500.8434+0x490>)
 80034ae:	f7ff fb0f 	bl	8002ad0 <UART_Printf.8399>
            int32_t nbytes = send(http_socket, buff, len);
 80034b2:	f8b7 208a 	ldrh.w	r2, [r7, #138]	; 0x8a
 80034b6:	f897 3088 	ldrb.w	r3, [r7, #136]	; 0x88
 80034ba:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 80034be:	4618      	mov	r0, r3
 80034c0:	f000 fe72 	bl	80041a8 <send>
 80034c4:	67b8      	str	r0, [r7, #120]	; 0x78
            if(nbytes <= 0) {
 80034c6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	dc0a      	bgt.n	80034e2 <init_w5500.8434+0x3fa>
                UART_Printf("send() failed, %d returned\r\n", nbytes);
 80034cc:	46b4      	mov	ip, r6
 80034ce:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 80034d0:	482a      	ldr	r0, [pc, #168]	; (800357c <init_w5500.8434+0x494>)
 80034d2:	f7ff fafd 	bl	8002ad0 <UART_Printf.8399>
                close(http_socket);
 80034d6:	f897 3088 	ldrb.w	r3, [r7, #136]	; 0x88
 80034da:	4618      	mov	r0, r3
 80034dc:	f000 fd1a 	bl	8003f14 <close>
 80034e0:	e045      	b.n	800356e <init_w5500.8434+0x486>
            UART_Printf("%d bytes sent!\r\n", nbytes);
 80034e2:	46b4      	mov	ip, r6
 80034e4:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 80034e6:	4826      	ldr	r0, [pc, #152]	; (8003580 <init_w5500.8434+0x498>)
 80034e8:	f7ff faf2 	bl	8002ad0 <UART_Printf.8399>
            len -= nbytes;
 80034ec:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80034ee:	b29b      	uxth	r3, r3
 80034f0:	f8b7 208a 	ldrh.w	r2, [r7, #138]	; 0x8a
 80034f4:	1ad3      	subs	r3, r2, r3
 80034f6:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
        while(len > 0) {
 80034fa:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d1d0      	bne.n	80034a4 <init_w5500.8434+0x3bc>
    UART_Printf("Request sent. Reading response...\r\n");
 8003502:	46b4      	mov	ip, r6
 8003504:	481f      	ldr	r0, [pc, #124]	; (8003584 <init_w5500.8434+0x49c>)
 8003506:	f7ff fae3 	bl	8002ad0 <UART_Printf.8399>
            int32_t nbytes = recv(http_socket, (uint8_t*)&buff, sizeof(buff)-1);
 800350a:	f107 0124 	add.w	r1, r7, #36	; 0x24
 800350e:	f897 3088 	ldrb.w	r3, [r7, #136]	; 0x88
 8003512:	221f      	movs	r2, #31
 8003514:	4618      	mov	r0, r3
 8003516:	f000 ff41 	bl	800439c <recv>
 800351a:	67f8      	str	r0, [r7, #124]	; 0x7c
            if(nbytes == SOCKERR_SOCKSTATUS) {
 800351c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800351e:	f113 0f07 	cmn.w	r3, #7
 8003522:	d104      	bne.n	800352e <init_w5500.8434+0x446>
                UART_Printf("\r\nConnection closed.\r\n");
 8003524:	46b4      	mov	ip, r6
 8003526:	4818      	ldr	r0, [pc, #96]	; (8003588 <init_w5500.8434+0x4a0>)
 8003528:	f7ff fad2 	bl	8002ad0 <UART_Printf.8399>
                break;
 800352c:	e016      	b.n	800355c <init_w5500.8434+0x474>
            if(nbytes <= 0) {
 800352e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003530:	2b00      	cmp	r3, #0
 8003532:	dc05      	bgt.n	8003540 <init_w5500.8434+0x458>
                UART_Printf("\r\nrecv() failed, %d returned\r\n", nbytes);
 8003534:	46b4      	mov	ip, r6
 8003536:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8003538:	4814      	ldr	r0, [pc, #80]	; (800358c <init_w5500.8434+0x4a4>)
 800353a:	f7ff fac9 	bl	8002ad0 <UART_Printf.8399>
                break;
 800353e:	e00d      	b.n	800355c <init_w5500.8434+0x474>
            buff[nbytes] = '\0';
 8003540:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8003544:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003546:	4413      	add	r3, r2
 8003548:	2200      	movs	r2, #0
 800354a:	701a      	strb	r2, [r3, #0]
            UART_Printf("%s", buff);
 800354c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003550:	46b4      	mov	ip, r6
 8003552:	4619      	mov	r1, r3
 8003554:	480e      	ldr	r0, [pc, #56]	; (8003590 <init_w5500.8434+0x4a8>)
 8003556:	f7ff fabb 	bl	8002ad0 <UART_Printf.8399>
        for(;;) {
 800355a:	e7d6      	b.n	800350a <init_w5500.8434+0x422>
    UART_Printf("Closing socket.\r\n");
 800355c:	46b4      	mov	ip, r6
 800355e:	480d      	ldr	r0, [pc, #52]	; (8003594 <init_w5500.8434+0x4ac>)
 8003560:	f7ff fab6 	bl	8002ad0 <UART_Printf.8399>
    close(http_socket);
 8003564:	f897 3088 	ldrb.w	r3, [r7, #136]	; 0x88
 8003568:	4618      	mov	r0, r3
 800356a:	f000 fcd3 	bl	8003f14 <close>
}
 800356e:	3794      	adds	r7, #148	; 0x94
 8003570:	46bd      	mov	sp, r7
 8003572:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003576:	bf00      	nop
 8003578:	0800bf88 	.word	0x0800bf88
 800357c:	0800bfa0 	.word	0x0800bfa0
 8003580:	0800bfc0 	.word	0x0800bfc0
 8003584:	0800bfd4 	.word	0x0800bfd4
 8003588:	0800bff8 	.word	0x0800bff8
 800358c:	0800c010 	.word	0x0800c010
 8003590:	0800c030 	.word	0x0800c030
 8003594:	0800c034 	.word	0x0800c034

08003598 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003598:	b580      	push	{r7, lr}
 800359a:	b090      	sub	sp, #64	; 0x40
 800359c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800359e:	f107 0318 	add.w	r3, r7, #24
 80035a2:	2228      	movs	r2, #40	; 0x28
 80035a4:	2100      	movs	r1, #0
 80035a6:	4618      	mov	r0, r3
 80035a8:	f007 febe 	bl	800b328 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80035ac:	1d3b      	adds	r3, r7, #4
 80035ae:	2200      	movs	r2, #0
 80035b0:	601a      	str	r2, [r3, #0]
 80035b2:	605a      	str	r2, [r3, #4]
 80035b4:	609a      	str	r2, [r3, #8]
 80035b6:	60da      	str	r2, [r3, #12]
 80035b8:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80035ba:	2301      	movs	r3, #1
 80035bc:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80035be:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80035c2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80035c4:	2300      	movs	r3, #0
 80035c6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80035c8:	2301      	movs	r3, #1
 80035ca:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80035cc:	2302      	movs	r3, #2
 80035ce:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80035d0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80035d4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL8;
 80035d6:	f44f 13c0 	mov.w	r3, #1572864	; 0x180000
 80035da:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80035dc:	f107 0318 	add.w	r3, r7, #24
 80035e0:	4618      	mov	r0, r3
 80035e2:	f003 faf3 	bl	8006bcc <HAL_RCC_OscConfig>
 80035e6:	4603      	mov	r3, r0
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d001      	beq.n	80035f0 <SystemClock_Config+0x58>
  {
    Error_Handler();
 80035ec:	f000 fb76 	bl	8003cdc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80035f0:	230f      	movs	r3, #15
 80035f2:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80035f4:	2302      	movs	r3, #2
 80035f6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80035f8:	2300      	movs	r3, #0
 80035fa:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80035fc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003600:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003602:	2300      	movs	r3, #0
 8003604:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8003606:	1d3b      	adds	r3, r7, #4
 8003608:	2102      	movs	r1, #2
 800360a:	4618      	mov	r0, r3
 800360c:	f003 fd5e 	bl	80070cc <HAL_RCC_ClockConfig>
 8003610:	4603      	mov	r3, r0
 8003612:	2b00      	cmp	r3, #0
 8003614:	d001      	beq.n	800361a <SystemClock_Config+0x82>
  {
    Error_Handler();
 8003616:	f000 fb61 	bl	8003cdc <Error_Handler>
  }
}
 800361a:	bf00      	nop
 800361c:	3740      	adds	r7, #64	; 0x40
 800361e:	46bd      	mov	sp, r7
 8003620:	bd80      	pop	{r7, pc}
	...

08003624 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8003624:	b580      	push	{r7, lr}
 8003626:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8003628:	4b12      	ldr	r3, [pc, #72]	; (8003674 <MX_I2C1_Init+0x50>)
 800362a:	4a13      	ldr	r2, [pc, #76]	; (8003678 <MX_I2C1_Init+0x54>)
 800362c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800362e:	4b11      	ldr	r3, [pc, #68]	; (8003674 <MX_I2C1_Init+0x50>)
 8003630:	4a12      	ldr	r2, [pc, #72]	; (800367c <MX_I2C1_Init+0x58>)
 8003632:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8003634:	4b0f      	ldr	r3, [pc, #60]	; (8003674 <MX_I2C1_Init+0x50>)
 8003636:	2200      	movs	r2, #0
 8003638:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800363a:	4b0e      	ldr	r3, [pc, #56]	; (8003674 <MX_I2C1_Init+0x50>)
 800363c:	2200      	movs	r2, #0
 800363e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003640:	4b0c      	ldr	r3, [pc, #48]	; (8003674 <MX_I2C1_Init+0x50>)
 8003642:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003646:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003648:	4b0a      	ldr	r3, [pc, #40]	; (8003674 <MX_I2C1_Init+0x50>)
 800364a:	2200      	movs	r2, #0
 800364c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800364e:	4b09      	ldr	r3, [pc, #36]	; (8003674 <MX_I2C1_Init+0x50>)
 8003650:	2200      	movs	r2, #0
 8003652:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003654:	4b07      	ldr	r3, [pc, #28]	; (8003674 <MX_I2C1_Init+0x50>)
 8003656:	2200      	movs	r2, #0
 8003658:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800365a:	4b06      	ldr	r3, [pc, #24]	; (8003674 <MX_I2C1_Init+0x50>)
 800365c:	2200      	movs	r2, #0
 800365e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8003660:	4804      	ldr	r0, [pc, #16]	; (8003674 <MX_I2C1_Init+0x50>)
 8003662:	f003 f96f 	bl	8006944 <HAL_I2C_Init>
 8003666:	4603      	mov	r3, r0
 8003668:	2b00      	cmp	r3, #0
 800366a:	d001      	beq.n	8003670 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800366c:	f000 fb36 	bl	8003cdc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8003670:	bf00      	nop
 8003672:	bd80      	pop	{r7, pc}
 8003674:	200002b8 	.word	0x200002b8
 8003678:	40005400 	.word	0x40005400
 800367c:	000186a0 	.word	0x000186a0

08003680 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8003680:	b580      	push	{r7, lr}
 8003682:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8003684:	4b17      	ldr	r3, [pc, #92]	; (80036e4 <MX_SPI2_Init+0x64>)
 8003686:	4a18      	ldr	r2, [pc, #96]	; (80036e8 <MX_SPI2_Init+0x68>)
 8003688:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800368a:	4b16      	ldr	r3, [pc, #88]	; (80036e4 <MX_SPI2_Init+0x64>)
 800368c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8003690:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8003692:	4b14      	ldr	r3, [pc, #80]	; (80036e4 <MX_SPI2_Init+0x64>)
 8003694:	2200      	movs	r2, #0
 8003696:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8003698:	4b12      	ldr	r3, [pc, #72]	; (80036e4 <MX_SPI2_Init+0x64>)
 800369a:	2200      	movs	r2, #0
 800369c:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800369e:	4b11      	ldr	r3, [pc, #68]	; (80036e4 <MX_SPI2_Init+0x64>)
 80036a0:	2200      	movs	r2, #0
 80036a2:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80036a4:	4b0f      	ldr	r3, [pc, #60]	; (80036e4 <MX_SPI2_Init+0x64>)
 80036a6:	2200      	movs	r2, #0
 80036a8:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80036aa:	4b0e      	ldr	r3, [pc, #56]	; (80036e4 <MX_SPI2_Init+0x64>)
 80036ac:	f44f 7200 	mov.w	r2, #512	; 0x200
 80036b0:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80036b2:	4b0c      	ldr	r3, [pc, #48]	; (80036e4 <MX_SPI2_Init+0x64>)
 80036b4:	2200      	movs	r2, #0
 80036b6:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80036b8:	4b0a      	ldr	r3, [pc, #40]	; (80036e4 <MX_SPI2_Init+0x64>)
 80036ba:	2200      	movs	r2, #0
 80036bc:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80036be:	4b09      	ldr	r3, [pc, #36]	; (80036e4 <MX_SPI2_Init+0x64>)
 80036c0:	2200      	movs	r2, #0
 80036c2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80036c4:	4b07      	ldr	r3, [pc, #28]	; (80036e4 <MX_SPI2_Init+0x64>)
 80036c6:	2200      	movs	r2, #0
 80036c8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 80036ca:	4b06      	ldr	r3, [pc, #24]	; (80036e4 <MX_SPI2_Init+0x64>)
 80036cc:	220a      	movs	r2, #10
 80036ce:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80036d0:	4804      	ldr	r0, [pc, #16]	; (80036e4 <MX_SPI2_Init+0x64>)
 80036d2:	f003 fe95 	bl	8007400 <HAL_SPI_Init>
 80036d6:	4603      	mov	r3, r0
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d001      	beq.n	80036e0 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 80036dc:	f000 fafe 	bl	8003cdc <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80036e0:	bf00      	nop
 80036e2:	bd80      	pop	{r7, pc}
 80036e4:	20000214 	.word	0x20000214
 80036e8:	40003800 	.word	0x40003800

080036ec <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80036ec:	b580      	push	{r7, lr}
 80036ee:	b096      	sub	sp, #88	; 0x58
 80036f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80036f2:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80036f6:	2200      	movs	r2, #0
 80036f8:	601a      	str	r2, [r3, #0]
 80036fa:	605a      	str	r2, [r3, #4]
 80036fc:	609a      	str	r2, [r3, #8]
 80036fe:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003700:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8003704:	2200      	movs	r2, #0
 8003706:	601a      	str	r2, [r3, #0]
 8003708:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800370a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800370e:	2200      	movs	r2, #0
 8003710:	601a      	str	r2, [r3, #0]
 8003712:	605a      	str	r2, [r3, #4]
 8003714:	609a      	str	r2, [r3, #8]
 8003716:	60da      	str	r2, [r3, #12]
 8003718:	611a      	str	r2, [r3, #16]
 800371a:	615a      	str	r2, [r3, #20]
 800371c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800371e:	1d3b      	adds	r3, r7, #4
 8003720:	2220      	movs	r2, #32
 8003722:	2100      	movs	r1, #0
 8003724:	4618      	mov	r0, r3
 8003726:	f007 fdff 	bl	800b328 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800372a:	4b59      	ldr	r3, [pc, #356]	; (8003890 <MX_TIM1_Init+0x1a4>)
 800372c:	4a59      	ldr	r2, [pc, #356]	; (8003894 <MX_TIM1_Init+0x1a8>)
 800372e:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8003730:	4b57      	ldr	r3, [pc, #348]	; (8003890 <MX_TIM1_Init+0x1a4>)
 8003732:	2200      	movs	r2, #0
 8003734:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003736:	4b56      	ldr	r3, [pc, #344]	; (8003890 <MX_TIM1_Init+0x1a4>)
 8003738:	2200      	movs	r2, #0
 800373a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 799;
 800373c:	4b54      	ldr	r3, [pc, #336]	; (8003890 <MX_TIM1_Init+0x1a4>)
 800373e:	f240 321f 	movw	r2, #799	; 0x31f
 8003742:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003744:	4b52      	ldr	r3, [pc, #328]	; (8003890 <MX_TIM1_Init+0x1a4>)
 8003746:	2200      	movs	r2, #0
 8003748:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 7;
 800374a:	4b51      	ldr	r3, [pc, #324]	; (8003890 <MX_TIM1_Init+0x1a4>)
 800374c:	2207      	movs	r2, #7
 800374e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8003750:	4b4f      	ldr	r3, [pc, #316]	; (8003890 <MX_TIM1_Init+0x1a4>)
 8003752:	2280      	movs	r2, #128	; 0x80
 8003754:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8003756:	484e      	ldr	r0, [pc, #312]	; (8003890 <MX_TIM1_Init+0x1a4>)
 8003758:	f004 fbbe 	bl	8007ed8 <HAL_TIM_Base_Init>
 800375c:	4603      	mov	r3, r0
 800375e:	2b00      	cmp	r3, #0
 8003760:	d001      	beq.n	8003766 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8003762:	f000 fabb 	bl	8003cdc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003766:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800376a:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800376c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003770:	4619      	mov	r1, r3
 8003772:	4847      	ldr	r0, [pc, #284]	; (8003890 <MX_TIM1_Init+0x1a4>)
 8003774:	f005 fa9a 	bl	8008cac <HAL_TIM_ConfigClockSource>
 8003778:	4603      	mov	r3, r0
 800377a:	2b00      	cmp	r3, #0
 800377c:	d001      	beq.n	8003782 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 800377e:	f000 faad 	bl	8003cdc <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim1) != HAL_OK)
 8003782:	4843      	ldr	r0, [pc, #268]	; (8003890 <MX_TIM1_Init+0x1a4>)
 8003784:	f004 fc4a 	bl	800801c <HAL_TIM_OC_Init>
 8003788:	4603      	mov	r3, r0
 800378a:	2b00      	cmp	r3, #0
 800378c:	d001      	beq.n	8003792 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 800378e:	f000 faa5 	bl	8003cdc <Error_Handler>
  }
  if (HAL_TIM_OnePulse_Init(&htim1, TIM_OPMODE_SINGLE) != HAL_OK)
 8003792:	2108      	movs	r1, #8
 8003794:	483e      	ldr	r0, [pc, #248]	; (8003890 <MX_TIM1_Init+0x1a4>)
 8003796:	f005 f83b 	bl	8008810 <HAL_TIM_OnePulse_Init>
 800379a:	4603      	mov	r3, r0
 800379c:	2b00      	cmp	r3, #0
 800379e:	d001      	beq.n	80037a4 <MX_TIM1_Init+0xb8>
  {
    Error_Handler();
 80037a0:	f000 fa9c 	bl	8003cdc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC1;
 80037a4:	2330      	movs	r3, #48	; 0x30
 80037a6:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_ENABLE;
 80037a8:	2380      	movs	r3, #128	; 0x80
 80037aa:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80037ac:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80037b0:	4619      	mov	r1, r3
 80037b2:	4837      	ldr	r0, [pc, #220]	; (8003890 <MX_TIM1_Init+0x1a4>)
 80037b4:	f006 f8e0 	bl	8009978 <HAL_TIMEx_MasterConfigSynchronization>
 80037b8:	4603      	mov	r3, r0
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d001      	beq.n	80037c2 <MX_TIM1_Init+0xd6>
  {
    Error_Handler();
 80037be:	f000 fa8d 	bl	8003cdc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TOGGLE;
 80037c2:	2330      	movs	r3, #48	; 0x30
 80037c4:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 80037c6:	2300      	movs	r3, #0
 80037c8:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80037ca:	2300      	movs	r3, #0
 80037cc:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80037ce:	2300      	movs	r3, #0
 80037d0:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80037d2:	2300      	movs	r3, #0
 80037d4:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80037d6:	2300      	movs	r3, #0
 80037d8:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80037da:	2300      	movs	r3, #0
 80037dc:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80037de:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80037e2:	2200      	movs	r2, #0
 80037e4:	4619      	mov	r1, r3
 80037e6:	482a      	ldr	r0, [pc, #168]	; (8003890 <MX_TIM1_Init+0x1a4>)
 80037e8:	f005 f974 	bl	8008ad4 <HAL_TIM_OC_ConfigChannel>
 80037ec:	4603      	mov	r3, r0
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d001      	beq.n	80037f6 <MX_TIM1_Init+0x10a>
  {
    Error_Handler();
 80037f2:	f000 fa73 	bl	8003cdc <Error_Handler>
  }
  __HAL_TIM_ENABLE_OCxPRELOAD(&htim1, TIM_CHANNEL_1);
 80037f6:	4b26      	ldr	r3, [pc, #152]	; (8003890 <MX_TIM1_Init+0x1a4>)
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	699a      	ldr	r2, [r3, #24]
 80037fc:	4b24      	ldr	r3, [pc, #144]	; (8003890 <MX_TIM1_Init+0x1a4>)
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	f042 0208 	orr.w	r2, r2, #8
 8003804:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8003806:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800380a:	2204      	movs	r2, #4
 800380c:	4619      	mov	r1, r3
 800380e:	4820      	ldr	r0, [pc, #128]	; (8003890 <MX_TIM1_Init+0x1a4>)
 8003810:	f005 f960 	bl	8008ad4 <HAL_TIM_OC_ConfigChannel>
 8003814:	4603      	mov	r3, r0
 8003816:	2b00      	cmp	r3, #0
 8003818:	d001      	beq.n	800381e <MX_TIM1_Init+0x132>
  {
    Error_Handler();
 800381a:	f000 fa5f 	bl	8003cdc <Error_Handler>
  }
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800381e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003822:	2208      	movs	r2, #8
 8003824:	4619      	mov	r1, r3
 8003826:	481a      	ldr	r0, [pc, #104]	; (8003890 <MX_TIM1_Init+0x1a4>)
 8003828:	f005 f954 	bl	8008ad4 <HAL_TIM_OC_ConfigChannel>
 800382c:	4603      	mov	r3, r0
 800382e:	2b00      	cmp	r3, #0
 8003830:	d001      	beq.n	8003836 <MX_TIM1_Init+0x14a>
  {
    Error_Handler();
 8003832:	f000 fa53 	bl	8003cdc <Error_Handler>
  }
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8003836:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800383a:	220c      	movs	r2, #12
 800383c:	4619      	mov	r1, r3
 800383e:	4814      	ldr	r0, [pc, #80]	; (8003890 <MX_TIM1_Init+0x1a4>)
 8003840:	f005 f948 	bl	8008ad4 <HAL_TIM_OC_ConfigChannel>
 8003844:	4603      	mov	r3, r0
 8003846:	2b00      	cmp	r3, #0
 8003848:	d001      	beq.n	800384e <MX_TIM1_Init+0x162>
  {
    Error_Handler();
 800384a:	f000 fa47 	bl	8003cdc <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800384e:	2300      	movs	r3, #0
 8003850:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8003852:	2300      	movs	r3, #0
 8003854:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8003856:	2300      	movs	r3, #0
 8003858:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800385a:	2300      	movs	r3, #0
 800385c:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800385e:	2300      	movs	r3, #0
 8003860:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8003862:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003866:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8003868:	2300      	movs	r3, #0
 800386a:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800386c:	1d3b      	adds	r3, r7, #4
 800386e:	4619      	mov	r1, r3
 8003870:	4807      	ldr	r0, [pc, #28]	; (8003890 <MX_TIM1_Init+0x1a4>)
 8003872:	f006 f8df 	bl	8009a34 <HAL_TIMEx_ConfigBreakDeadTime>
 8003876:	4603      	mov	r3, r0
 8003878:	2b00      	cmp	r3, #0
 800387a:	d001      	beq.n	8003880 <MX_TIM1_Init+0x194>
  {
    Error_Handler();
 800387c:	f000 fa2e 	bl	8003cdc <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8003880:	4803      	ldr	r0, [pc, #12]	; (8003890 <MX_TIM1_Init+0x1a4>)
 8003882:	f001 fae7 	bl	8004e54 <HAL_TIM_MspPostInit>

}
 8003886:	bf00      	nop
 8003888:	3758      	adds	r7, #88	; 0x58
 800388a:	46bd      	mov	sp, r7
 800388c:	bd80      	pop	{r7, pc}
 800388e:	bf00      	nop
 8003890:	200003dc 	.word	0x200003dc
 8003894:	40012c00 	.word	0x40012c00

08003898 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8003898:	b580      	push	{r7, lr}
 800389a:	b090      	sub	sp, #64	; 0x40
 800389c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800389e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80038a2:	2200      	movs	r2, #0
 80038a4:	601a      	str	r2, [r3, #0]
 80038a6:	605a      	str	r2, [r3, #4]
 80038a8:	609a      	str	r2, [r3, #8]
 80038aa:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 80038ac:	f107 031c 	add.w	r3, r7, #28
 80038b0:	2200      	movs	r2, #0
 80038b2:	601a      	str	r2, [r3, #0]
 80038b4:	605a      	str	r2, [r3, #4]
 80038b6:	609a      	str	r2, [r3, #8]
 80038b8:	60da      	str	r2, [r3, #12]
 80038ba:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80038bc:	f107 0314 	add.w	r3, r7, #20
 80038c0:	2200      	movs	r2, #0
 80038c2:	601a      	str	r2, [r3, #0]
 80038c4:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80038c6:	1d3b      	adds	r3, r7, #4
 80038c8:	2200      	movs	r2, #0
 80038ca:	601a      	str	r2, [r3, #0]
 80038cc:	605a      	str	r2, [r3, #4]
 80038ce:	609a      	str	r2, [r3, #8]
 80038d0:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80038d2:	4b33      	ldr	r3, [pc, #204]	; (80039a0 <MX_TIM2_Init+0x108>)
 80038d4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80038d8:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80038da:	4b31      	ldr	r3, [pc, #196]	; (80039a0 <MX_TIM2_Init+0x108>)
 80038dc:	2200      	movs	r2, #0
 80038de:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80038e0:	4b2f      	ldr	r3, [pc, #188]	; (80039a0 <MX_TIM2_Init+0x108>)
 80038e2:	2200      	movs	r2, #0
 80038e4:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 80038e6:	4b2e      	ldr	r3, [pc, #184]	; (80039a0 <MX_TIM2_Init+0x108>)
 80038e8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80038ec:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80038ee:	4b2c      	ldr	r3, [pc, #176]	; (80039a0 <MX_TIM2_Init+0x108>)
 80038f0:	2200      	movs	r2, #0
 80038f2:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80038f4:	4b2a      	ldr	r3, [pc, #168]	; (80039a0 <MX_TIM2_Init+0x108>)
 80038f6:	2280      	movs	r2, #128	; 0x80
 80038f8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80038fa:	4829      	ldr	r0, [pc, #164]	; (80039a0 <MX_TIM2_Init+0x108>)
 80038fc:	f004 faec 	bl	8007ed8 <HAL_TIM_Base_Init>
 8003900:	4603      	mov	r3, r0
 8003902:	2b00      	cmp	r3, #0
 8003904:	d001      	beq.n	800390a <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8003906:	f000 f9e9 	bl	8003cdc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800390a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800390e:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8003910:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003914:	4619      	mov	r1, r3
 8003916:	4822      	ldr	r0, [pc, #136]	; (80039a0 <MX_TIM2_Init+0x108>)
 8003918:	f005 f9c8 	bl	8008cac <HAL_TIM_ConfigClockSource>
 800391c:	4603      	mov	r3, r0
 800391e:	2b00      	cmp	r3, #0
 8003920:	d001      	beq.n	8003926 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8003922:	f000 f9db 	bl	8003cdc <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 8003926:	481e      	ldr	r0, [pc, #120]	; (80039a0 <MX_TIM2_Init+0x108>)
 8003928:	f004 fcd6 	bl	80082d8 <HAL_TIM_IC_Init>
 800392c:	4603      	mov	r3, r0
 800392e:	2b00      	cmp	r3, #0
 8003930:	d001      	beq.n	8003936 <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 8003932:	f000 f9d3 	bl	8003cdc <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 8003936:	2304      	movs	r3, #4
 8003938:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.InputTrigger = TIM_TS_ITR2;
 800393a:	2320      	movs	r3, #32
 800393c:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_SlaveConfigSynchro(&htim2, &sSlaveConfig) != HAL_OK)
 800393e:	f107 031c 	add.w	r3, r7, #28
 8003942:	4619      	mov	r1, r3
 8003944:	4816      	ldr	r0, [pc, #88]	; (80039a0 <MX_TIM2_Init+0x108>)
 8003946:	f005 fa75 	bl	8008e34 <HAL_TIM_SlaveConfigSynchro>
 800394a:	4603      	mov	r3, r0
 800394c:	2b00      	cmp	r3, #0
 800394e:	d001      	beq.n	8003954 <MX_TIM2_Init+0xbc>
  {
    Error_Handler();
 8003950:	f000 f9c4 	bl	8003cdc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003954:	2300      	movs	r3, #0
 8003956:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003958:	2300      	movs	r3, #0
 800395a:	61bb      	str	r3, [r7, #24]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800395c:	f107 0314 	add.w	r3, r7, #20
 8003960:	4619      	mov	r1, r3
 8003962:	480f      	ldr	r0, [pc, #60]	; (80039a0 <MX_TIM2_Init+0x108>)
 8003964:	f006 f808 	bl	8009978 <HAL_TIMEx_MasterConfigSynchronization>
 8003968:	4603      	mov	r3, r0
 800396a:	2b00      	cmp	r3, #0
 800396c:	d001      	beq.n	8003972 <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 800396e:	f000 f9b5 	bl	8003cdc <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8003972:	2300      	movs	r3, #0
 8003974:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8003976:	2301      	movs	r3, #1
 8003978:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 800397a:	2300      	movs	r3, #0
 800397c:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 800397e:	2300      	movs	r3, #0
 8003980:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8003982:	1d3b      	adds	r3, r7, #4
 8003984:	2200      	movs	r2, #0
 8003986:	4619      	mov	r1, r3
 8003988:	4805      	ldr	r0, [pc, #20]	; (80039a0 <MX_TIM2_Init+0x108>)
 800398a:	f005 f8fb 	bl	8008b84 <HAL_TIM_IC_ConfigChannel>
 800398e:	4603      	mov	r3, r0
 8003990:	2b00      	cmp	r3, #0
 8003992:	d001      	beq.n	8003998 <MX_TIM2_Init+0x100>
  {
    Error_Handler();
 8003994:	f000 f9a2 	bl	8003cdc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8003998:	bf00      	nop
 800399a:	3740      	adds	r7, #64	; 0x40
 800399c:	46bd      	mov	sp, r7
 800399e:	bd80      	pop	{r7, pc}
 80039a0:	2000042c 	.word	0x2000042c

080039a4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80039a4:	b580      	push	{r7, lr}
 80039a6:	b092      	sub	sp, #72	; 0x48
 80039a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80039aa:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80039ae:	2200      	movs	r2, #0
 80039b0:	601a      	str	r2, [r3, #0]
 80039b2:	605a      	str	r2, [r3, #4]
 80039b4:	609a      	str	r2, [r3, #8]
 80039b6:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 80039b8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80039bc:	2200      	movs	r2, #0
 80039be:	601a      	str	r2, [r3, #0]
 80039c0:	605a      	str	r2, [r3, #4]
 80039c2:	609a      	str	r2, [r3, #8]
 80039c4:	60da      	str	r2, [r3, #12]
 80039c6:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80039c8:	f107 031c 	add.w	r3, r7, #28
 80039cc:	2200      	movs	r2, #0
 80039ce:	601a      	str	r2, [r3, #0]
 80039d0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80039d2:	463b      	mov	r3, r7
 80039d4:	2200      	movs	r2, #0
 80039d6:	601a      	str	r2, [r3, #0]
 80039d8:	605a      	str	r2, [r3, #4]
 80039da:	609a      	str	r2, [r3, #8]
 80039dc:	60da      	str	r2, [r3, #12]
 80039de:	611a      	str	r2, [r3, #16]
 80039e0:	615a      	str	r2, [r3, #20]
 80039e2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80039e4:	4b37      	ldr	r3, [pc, #220]	; (8003ac4 <MX_TIM3_Init+0x120>)
 80039e6:	4a38      	ldr	r2, [pc, #224]	; (8003ac8 <MX_TIM3_Init+0x124>)
 80039e8:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80039ea:	4b36      	ldr	r3, [pc, #216]	; (8003ac4 <MX_TIM3_Init+0x120>)
 80039ec:	2200      	movs	r2, #0
 80039ee:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80039f0:	4b34      	ldr	r3, [pc, #208]	; (8003ac4 <MX_TIM3_Init+0x120>)
 80039f2:	2200      	movs	r2, #0
 80039f4:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 30400;
 80039f6:	4b33      	ldr	r3, [pc, #204]	; (8003ac4 <MX_TIM3_Init+0x120>)
 80039f8:	f247 62c0 	movw	r2, #30400	; 0x76c0
 80039fc:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80039fe:	4b31      	ldr	r3, [pc, #196]	; (8003ac4 <MX_TIM3_Init+0x120>)
 8003a00:	2200      	movs	r2, #0
 8003a02:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8003a04:	4b2f      	ldr	r3, [pc, #188]	; (8003ac4 <MX_TIM3_Init+0x120>)
 8003a06:	2280      	movs	r2, #128	; 0x80
 8003a08:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8003a0a:	482e      	ldr	r0, [pc, #184]	; (8003ac4 <MX_TIM3_Init+0x120>)
 8003a0c:	f004 fa64 	bl	8007ed8 <HAL_TIM_Base_Init>
 8003a10:	4603      	mov	r3, r0
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d001      	beq.n	8003a1a <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 8003a16:	f000 f961 	bl	8003cdc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003a1a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003a1e:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8003a20:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8003a24:	4619      	mov	r1, r3
 8003a26:	4827      	ldr	r0, [pc, #156]	; (8003ac4 <MX_TIM3_Init+0x120>)
 8003a28:	f005 f940 	bl	8008cac <HAL_TIM_ConfigClockSource>
 8003a2c:	4603      	mov	r3, r0
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d001      	beq.n	8003a36 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8003a32:	f000 f953 	bl	8003cdc <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim3) != HAL_OK)
 8003a36:	4823      	ldr	r0, [pc, #140]	; (8003ac4 <MX_TIM3_Init+0x120>)
 8003a38:	f004 faf0 	bl	800801c <HAL_TIM_OC_Init>
 8003a3c:	4603      	mov	r3, r0
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d001      	beq.n	8003a46 <MX_TIM3_Init+0xa2>
  {
    Error_Handler();
 8003a42:	f000 f94b 	bl	8003cdc <Error_Handler>
  }
  if (HAL_TIM_OnePulse_Init(&htim3, TIM_OPMODE_SINGLE) != HAL_OK)
 8003a46:	2108      	movs	r1, #8
 8003a48:	481e      	ldr	r0, [pc, #120]	; (8003ac4 <MX_TIM3_Init+0x120>)
 8003a4a:	f004 fee1 	bl	8008810 <HAL_TIM_OnePulse_Init>
 8003a4e:	4603      	mov	r3, r0
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d001      	beq.n	8003a58 <MX_TIM3_Init+0xb4>
  {
    Error_Handler();
 8003a54:	f000 f942 	bl	8003cdc <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_TRIGGER;
 8003a58:	2306      	movs	r3, #6
 8003a5a:	627b      	str	r3, [r7, #36]	; 0x24
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 8003a5c:	2300      	movs	r3, #0
 8003a5e:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_SlaveConfigSynchro(&htim3, &sSlaveConfig) != HAL_OK)
 8003a60:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003a64:	4619      	mov	r1, r3
 8003a66:	4817      	ldr	r0, [pc, #92]	; (8003ac4 <MX_TIM3_Init+0x120>)
 8003a68:	f005 f9e4 	bl	8008e34 <HAL_TIM_SlaveConfigSynchro>
 8003a6c:	4603      	mov	r3, r0
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d001      	beq.n	8003a76 <MX_TIM3_Init+0xd2>
  {
    Error_Handler();
 8003a72:	f000 f933 	bl	8003cdc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC1;
 8003a76:	2330      	movs	r3, #48	; 0x30
 8003a78:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_ENABLE;
 8003a7a:	2380      	movs	r3, #128	; 0x80
 8003a7c:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8003a7e:	f107 031c 	add.w	r3, r7, #28
 8003a82:	4619      	mov	r1, r3
 8003a84:	480f      	ldr	r0, [pc, #60]	; (8003ac4 <MX_TIM3_Init+0x120>)
 8003a86:	f005 ff77 	bl	8009978 <HAL_TIMEx_MasterConfigSynchronization>
 8003a8a:	4603      	mov	r3, r0
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d001      	beq.n	8003a94 <MX_TIM3_Init+0xf0>
  {
    Error_Handler();
 8003a90:	f000 f924 	bl	8003cdc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_ACTIVE;
 8003a94:	2310      	movs	r3, #16
 8003a96:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8003a98:	2300      	movs	r3, #0
 8003a9a:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003a9c:	2300      	movs	r3, #0
 8003a9e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003aa0:	2300      	movs	r3, #0
 8003aa2:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_OC_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003aa4:	463b      	mov	r3, r7
 8003aa6:	2200      	movs	r2, #0
 8003aa8:	4619      	mov	r1, r3
 8003aaa:	4806      	ldr	r0, [pc, #24]	; (8003ac4 <MX_TIM3_Init+0x120>)
 8003aac:	f005 f812 	bl	8008ad4 <HAL_TIM_OC_ConfigChannel>
 8003ab0:	4603      	mov	r3, r0
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d001      	beq.n	8003aba <MX_TIM3_Init+0x116>
  {
    Error_Handler();
 8003ab6:	f000 f911 	bl	8003cdc <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8003aba:	bf00      	nop
 8003abc:	3748      	adds	r7, #72	; 0x48
 8003abe:	46bd      	mov	sp, r7
 8003ac0:	bd80      	pop	{r7, pc}
 8003ac2:	bf00      	nop
 8003ac4:	20000330 	.word	0x20000330
 8003ac8:	40000400 	.word	0x40000400

08003acc <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8003acc:	b580      	push	{r7, lr}
 8003ace:	b086      	sub	sp, #24
 8003ad0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003ad2:	f107 0308 	add.w	r3, r7, #8
 8003ad6:	2200      	movs	r2, #0
 8003ad8:	601a      	str	r2, [r3, #0]
 8003ada:	605a      	str	r2, [r3, #4]
 8003adc:	609a      	str	r2, [r3, #8]
 8003ade:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003ae0:	463b      	mov	r3, r7
 8003ae2:	2200      	movs	r2, #0
 8003ae4:	601a      	str	r2, [r3, #0]
 8003ae6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8003ae8:	4b1d      	ldr	r3, [pc, #116]	; (8003b60 <MX_TIM4_Init+0x94>)
 8003aea:	4a1e      	ldr	r2, [pc, #120]	; (8003b64 <MX_TIM4_Init+0x98>)
 8003aec:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 2;
 8003aee:	4b1c      	ldr	r3, [pc, #112]	; (8003b60 <MX_TIM4_Init+0x94>)
 8003af0:	2202      	movs	r2, #2
 8003af2:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003af4:	4b1a      	ldr	r3, [pc, #104]	; (8003b60 <MX_TIM4_Init+0x94>)
 8003af6:	2200      	movs	r2, #0
 8003af8:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8003afa:	4b19      	ldr	r3, [pc, #100]	; (8003b60 <MX_TIM4_Init+0x94>)
 8003afc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003b00:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003b02:	4b17      	ldr	r3, [pc, #92]	; (8003b60 <MX_TIM4_Init+0x94>)
 8003b04:	2200      	movs	r2, #0
 8003b06:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8003b08:	4b15      	ldr	r3, [pc, #84]	; (8003b60 <MX_TIM4_Init+0x94>)
 8003b0a:	2280      	movs	r2, #128	; 0x80
 8003b0c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8003b0e:	4814      	ldr	r0, [pc, #80]	; (8003b60 <MX_TIM4_Init+0x94>)
 8003b10:	f004 f9e2 	bl	8007ed8 <HAL_TIM_Base_Init>
 8003b14:	4603      	mov	r3, r0
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d001      	beq.n	8003b1e <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 8003b1a:	f000 f8df 	bl	8003cdc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003b1e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003b22:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8003b24:	f107 0308 	add.w	r3, r7, #8
 8003b28:	4619      	mov	r1, r3
 8003b2a:	480d      	ldr	r0, [pc, #52]	; (8003b60 <MX_TIM4_Init+0x94>)
 8003b2c:	f005 f8be 	bl	8008cac <HAL_TIM_ConfigClockSource>
 8003b30:	4603      	mov	r3, r0
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d001      	beq.n	8003b3a <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 8003b36:	f000 f8d1 	bl	8003cdc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8003b3a:	2320      	movs	r3, #32
 8003b3c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003b3e:	2300      	movs	r3, #0
 8003b40:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8003b42:	463b      	mov	r3, r7
 8003b44:	4619      	mov	r1, r3
 8003b46:	4806      	ldr	r0, [pc, #24]	; (8003b60 <MX_TIM4_Init+0x94>)
 8003b48:	f005 ff16 	bl	8009978 <HAL_TIMEx_MasterConfigSynchronization>
 8003b4c:	4603      	mov	r3, r0
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d001      	beq.n	8003b56 <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 8003b52:	f000 f8c3 	bl	8003cdc <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8003b56:	bf00      	nop
 8003b58:	3718      	adds	r7, #24
 8003b5a:	46bd      	mov	sp, r7
 8003b5c:	bd80      	pop	{r7, pc}
 8003b5e:	bf00      	nop
 8003b60:	2000026c 	.word	0x2000026c
 8003b64:	40000800 	.word	0x40000800

08003b68 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8003b68:	b580      	push	{r7, lr}
 8003b6a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8003b6c:	4b11      	ldr	r3, [pc, #68]	; (8003bb4 <MX_USART1_UART_Init+0x4c>)
 8003b6e:	4a12      	ldr	r2, [pc, #72]	; (8003bb8 <MX_USART1_UART_Init+0x50>)
 8003b70:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8003b72:	4b10      	ldr	r3, [pc, #64]	; (8003bb4 <MX_USART1_UART_Init+0x4c>)
 8003b74:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003b78:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8003b7a:	4b0e      	ldr	r3, [pc, #56]	; (8003bb4 <MX_USART1_UART_Init+0x4c>)
 8003b7c:	2200      	movs	r2, #0
 8003b7e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8003b80:	4b0c      	ldr	r3, [pc, #48]	; (8003bb4 <MX_USART1_UART_Init+0x4c>)
 8003b82:	2200      	movs	r2, #0
 8003b84:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8003b86:	4b0b      	ldr	r3, [pc, #44]	; (8003bb4 <MX_USART1_UART_Init+0x4c>)
 8003b88:	2200      	movs	r2, #0
 8003b8a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8003b8c:	4b09      	ldr	r3, [pc, #36]	; (8003bb4 <MX_USART1_UART_Init+0x4c>)
 8003b8e:	220c      	movs	r2, #12
 8003b90:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003b92:	4b08      	ldr	r3, [pc, #32]	; (8003bb4 <MX_USART1_UART_Init+0x4c>)
 8003b94:	2200      	movs	r2, #0
 8003b96:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8003b98:	4b06      	ldr	r3, [pc, #24]	; (8003bb4 <MX_USART1_UART_Init+0x4c>)
 8003b9a:	2200      	movs	r2, #0
 8003b9c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8003b9e:	4805      	ldr	r0, [pc, #20]	; (8003bb4 <MX_USART1_UART_Init+0x4c>)
 8003ba0:	f005 ffab 	bl	8009afa <HAL_UART_Init>
 8003ba4:	4603      	mov	r3, r0
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d001      	beq.n	8003bae <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8003baa:	f000 f897 	bl	8003cdc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8003bae:	bf00      	nop
 8003bb0:	bd80      	pop	{r7, pc}
 8003bb2:	bf00      	nop
 8003bb4:	20000388 	.word	0x20000388
 8003bb8:	40013800 	.word	0x40013800

08003bbc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8003bbc:	b580      	push	{r7, lr}
 8003bbe:	b082      	sub	sp, #8
 8003bc0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8003bc2:	4b0c      	ldr	r3, [pc, #48]	; (8003bf4 <MX_DMA_Init+0x38>)
 8003bc4:	695b      	ldr	r3, [r3, #20]
 8003bc6:	4a0b      	ldr	r2, [pc, #44]	; (8003bf4 <MX_DMA_Init+0x38>)
 8003bc8:	f043 0301 	orr.w	r3, r3, #1
 8003bcc:	6153      	str	r3, [r2, #20]
 8003bce:	4b09      	ldr	r3, [pc, #36]	; (8003bf4 <MX_DMA_Init+0x38>)
 8003bd0:	695b      	ldr	r3, [r3, #20]
 8003bd2:	f003 0301 	and.w	r3, r3, #1
 8003bd6:	607b      	str	r3, [r7, #4]
 8003bd8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 8003bda:	2200      	movs	r2, #0
 8003bdc:	2100      	movs	r1, #0
 8003bde:	200f      	movs	r0, #15
 8003be0:	f002 fa79 	bl	80060d6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8003be4:	200f      	movs	r0, #15
 8003be6:	f002 fa92 	bl	800610e <HAL_NVIC_EnableIRQ>

}
 8003bea:	bf00      	nop
 8003bec:	3708      	adds	r7, #8
 8003bee:	46bd      	mov	sp, r7
 8003bf0:	bd80      	pop	{r7, pc}
 8003bf2:	bf00      	nop
 8003bf4:	40021000 	.word	0x40021000

08003bf8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003bf8:	b580      	push	{r7, lr}
 8003bfa:	b088      	sub	sp, #32
 8003bfc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003bfe:	f107 0310 	add.w	r3, r7, #16
 8003c02:	2200      	movs	r2, #0
 8003c04:	601a      	str	r2, [r3, #0]
 8003c06:	605a      	str	r2, [r3, #4]
 8003c08:	609a      	str	r2, [r3, #8]
 8003c0a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003c0c:	4b30      	ldr	r3, [pc, #192]	; (8003cd0 <MX_GPIO_Init+0xd8>)
 8003c0e:	699b      	ldr	r3, [r3, #24]
 8003c10:	4a2f      	ldr	r2, [pc, #188]	; (8003cd0 <MX_GPIO_Init+0xd8>)
 8003c12:	f043 0320 	orr.w	r3, r3, #32
 8003c16:	6193      	str	r3, [r2, #24]
 8003c18:	4b2d      	ldr	r3, [pc, #180]	; (8003cd0 <MX_GPIO_Init+0xd8>)
 8003c1a:	699b      	ldr	r3, [r3, #24]
 8003c1c:	f003 0320 	and.w	r3, r3, #32
 8003c20:	60fb      	str	r3, [r7, #12]
 8003c22:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003c24:	4b2a      	ldr	r3, [pc, #168]	; (8003cd0 <MX_GPIO_Init+0xd8>)
 8003c26:	699b      	ldr	r3, [r3, #24]
 8003c28:	4a29      	ldr	r2, [pc, #164]	; (8003cd0 <MX_GPIO_Init+0xd8>)
 8003c2a:	f043 0304 	orr.w	r3, r3, #4
 8003c2e:	6193      	str	r3, [r2, #24]
 8003c30:	4b27      	ldr	r3, [pc, #156]	; (8003cd0 <MX_GPIO_Init+0xd8>)
 8003c32:	699b      	ldr	r3, [r3, #24]
 8003c34:	f003 0304 	and.w	r3, r3, #4
 8003c38:	60bb      	str	r3, [r7, #8]
 8003c3a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003c3c:	4b24      	ldr	r3, [pc, #144]	; (8003cd0 <MX_GPIO_Init+0xd8>)
 8003c3e:	699b      	ldr	r3, [r3, #24]
 8003c40:	4a23      	ldr	r2, [pc, #140]	; (8003cd0 <MX_GPIO_Init+0xd8>)
 8003c42:	f043 0308 	orr.w	r3, r3, #8
 8003c46:	6193      	str	r3, [r2, #24]
 8003c48:	4b21      	ldr	r3, [pc, #132]	; (8003cd0 <MX_GPIO_Init+0xd8>)
 8003c4a:	699b      	ldr	r3, [r3, #24]
 8003c4c:	f003 0308 	and.w	r3, r3, #8
 8003c50:	607b      	str	r3, [r7, #4]
 8003c52:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, Z1Receive_Pin|Z2Receive_Pin|Z3Receive_Pin|Z4Receive_Pin
 8003c54:	2200      	movs	r2, #0
 8003c56:	f641 411e 	movw	r1, #7198	; 0x1c1e
 8003c5a:	481e      	ldr	r0, [pc, #120]	; (8003cd4 <MX_GPIO_Init+0xdc>)
 8003c5c:	f002 fe5a 	bl	8006914 <HAL_GPIO_WritePin>
                          |Eth_CS_Pin|Eth_int_Pin|Eth_rst_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8003c60:	2200      	movs	r2, #0
 8003c62:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003c66:	481c      	ldr	r0, [pc, #112]	; (8003cd8 <MX_GPIO_Init+0xe0>)
 8003c68:	f002 fe54 	bl	8006914 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : Z1Receive_Pin Z2Receive_Pin Z3Receive_Pin Z4Receive_Pin */
  GPIO_InitStruct.Pin = Z1Receive_Pin|Z2Receive_Pin|Z3Receive_Pin|Z4Receive_Pin;
 8003c6c:	f640 4306 	movw	r3, #3078	; 0xc06
 8003c70:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003c72:	2301      	movs	r3, #1
 8003c74:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c76:	2300      	movs	r3, #0
 8003c78:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003c7a:	2303      	movs	r3, #3
 8003c7c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003c7e:	f107 0310 	add.w	r3, r7, #16
 8003c82:	4619      	mov	r1, r3
 8003c84:	4813      	ldr	r0, [pc, #76]	; (8003cd4 <MX_GPIO_Init+0xdc>)
 8003c86:	f002 fcc1 	bl	800660c <HAL_GPIO_Init>

  /*Configure GPIO pins : Eth_CS_Pin Eth_int_Pin Eth_rst_Pin */
  GPIO_InitStruct.Pin = Eth_CS_Pin|Eth_int_Pin|Eth_rst_Pin;
 8003c8a:	f241 0318 	movw	r3, #4120	; 0x1018
 8003c8e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003c90:	2301      	movs	r3, #1
 8003c92:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c94:	2300      	movs	r3, #0
 8003c96:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003c98:	2302      	movs	r3, #2
 8003c9a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003c9c:	f107 0310 	add.w	r3, r7, #16
 8003ca0:	4619      	mov	r1, r3
 8003ca2:	480c      	ldr	r0, [pc, #48]	; (8003cd4 <MX_GPIO_Init+0xdc>)
 8003ca4:	f002 fcb2 	bl	800660c <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8003ca8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003cac:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003cae:	2301      	movs	r3, #1
 8003cb0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003cb2:	2300      	movs	r3, #0
 8003cb4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003cb6:	2302      	movs	r3, #2
 8003cb8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8003cba:	f107 0310 	add.w	r3, r7, #16
 8003cbe:	4619      	mov	r1, r3
 8003cc0:	4805      	ldr	r0, [pc, #20]	; (8003cd8 <MX_GPIO_Init+0xe0>)
 8003cc2:	f002 fca3 	bl	800660c <HAL_GPIO_Init>

}
 8003cc6:	bf00      	nop
 8003cc8:	3720      	adds	r7, #32
 8003cca:	46bd      	mov	sp, r7
 8003ccc:	bd80      	pop	{r7, pc}
 8003cce:	bf00      	nop
 8003cd0:	40021000 	.word	0x40021000
 8003cd4:	40010c00 	.word	0x40010c00
 8003cd8:	40010800 	.word	0x40010800

08003cdc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003cdc:	b480      	push	{r7}
 8003cde:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003ce0:	b672      	cpsid	i
}
 8003ce2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003ce4:	e7fe      	b.n	8003ce4 <Error_Handler+0x8>
	...

08003ce8 <socket>:
   }while(0);              \



int8_t socket(uint8_t sn, uint8_t protocol, uint16_t port, uint8_t flag)
{
 8003ce8:	b590      	push	{r4, r7, lr}
 8003cea:	b085      	sub	sp, #20
 8003cec:	af00      	add	r7, sp, #0
 8003cee:	4604      	mov	r4, r0
 8003cf0:	4608      	mov	r0, r1
 8003cf2:	4611      	mov	r1, r2
 8003cf4:	461a      	mov	r2, r3
 8003cf6:	4623      	mov	r3, r4
 8003cf8:	71fb      	strb	r3, [r7, #7]
 8003cfa:	4603      	mov	r3, r0
 8003cfc:	71bb      	strb	r3, [r7, #6]
 8003cfe:	460b      	mov	r3, r1
 8003d00:	80bb      	strh	r3, [r7, #4]
 8003d02:	4613      	mov	r3, r2
 8003d04:	70fb      	strb	r3, [r7, #3]
	CHECK_SOCKNUM();
 8003d06:	79fb      	ldrb	r3, [r7, #7]
 8003d08:	2b08      	cmp	r3, #8
 8003d0a:	d902      	bls.n	8003d12 <socket+0x2a>
 8003d0c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003d10:	e0f2      	b.n	8003ef8 <socket+0x210>
	switch(protocol)
 8003d12:	79bb      	ldrb	r3, [r7, #6]
 8003d14:	2b01      	cmp	r3, #1
 8003d16:	d005      	beq.n	8003d24 <socket+0x3c>
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	dd11      	ble.n	8003d40 <socket+0x58>
 8003d1c:	3b02      	subs	r3, #2
 8003d1e:	2b02      	cmp	r3, #2
 8003d20:	d80e      	bhi.n	8003d40 <socket+0x58>
	    break;
         }
      case Sn_MR_UDP :
      case Sn_MR_MACRAW :
	  case Sn_MR_IPRAW :
         break;
 8003d22:	e011      	b.n	8003d48 <socket+0x60>
            getSIPR((uint8_t*)&taddr);
 8003d24:	f107 030c 	add.w	r3, r7, #12
 8003d28:	2204      	movs	r2, #4
 8003d2a:	4619      	mov	r1, r3
 8003d2c:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 8003d30:	f001 fc0a 	bl	8005548 <WIZCHIP_READ_BUF>
            if(taddr == 0) return SOCKERR_SOCKINIT;
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d105      	bne.n	8003d46 <socket+0x5e>
 8003d3a:	f06f 0302 	mvn.w	r3, #2
 8003d3e:	e0db      	b.n	8003ef8 <socket+0x210>
   #if ( _WIZCHIP_ < 5200 )
      case Sn_MR_PPPoE :
         break;
   #endif
      default :
         return SOCKERR_SOCKMODE;
 8003d40:	f06f 0304 	mvn.w	r3, #4
 8003d44:	e0d8      	b.n	8003ef8 <socket+0x210>
	    break;
 8003d46:	bf00      	nop
	}
	//M20150601 : For SF_TCP_ALIGN & W5300
	//if((flag & 0x06) != 0) return SOCKERR_SOCKFLAG;
	if((flag & 0x04) != 0) return SOCKERR_SOCKFLAG;
 8003d48:	78fb      	ldrb	r3, [r7, #3]
 8003d4a:	f003 0304 	and.w	r3, r3, #4
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d002      	beq.n	8003d58 <socket+0x70>
 8003d52:	f06f 0305 	mvn.w	r3, #5
 8003d56:	e0cf      	b.n	8003ef8 <socket+0x210>
#if _WIZCHIP_ == 5200
   if(flag & 0x10) return SOCKERR_SOCKFLAG;
#endif
	   
	if(flag != 0)
 8003d58:	78fb      	ldrb	r3, [r7, #3]
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d025      	beq.n	8003daa <socket+0xc2>
	{
   	switch(protocol)
 8003d5e:	79bb      	ldrb	r3, [r7, #6]
 8003d60:	2b01      	cmp	r3, #1
 8003d62:	d002      	beq.n	8003d6a <socket+0x82>
 8003d64:	2b02      	cmp	r3, #2
 8003d66:	d008      	beq.n	8003d7a <socket+0x92>
      	         if((flag & SF_MULTI_ENABLE) == 0) return SOCKERR_SOCKFLAG;
      	      }
   	      #endif
   	      break;
   	   default:
   	      break;
 8003d68:	e024      	b.n	8003db4 <socket+0xcc>
   		     if((flag & (SF_TCP_NODELAY|SF_IO_NONBLOCK))==0) return SOCKERR_SOCKFLAG;
 8003d6a:	78fb      	ldrb	r3, [r7, #3]
 8003d6c:	f003 0321 	and.w	r3, r3, #33	; 0x21
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d11c      	bne.n	8003dae <socket+0xc6>
 8003d74:	f06f 0305 	mvn.w	r3, #5
 8003d78:	e0be      	b.n	8003ef8 <socket+0x210>
   	      if(flag & SF_IGMP_VER2)
 8003d7a:	78fb      	ldrb	r3, [r7, #3]
 8003d7c:	f003 0320 	and.w	r3, r3, #32
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d006      	beq.n	8003d92 <socket+0xaa>
   	         if((flag & SF_MULTI_ENABLE)==0) return SOCKERR_SOCKFLAG;
 8003d84:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	db02      	blt.n	8003d92 <socket+0xaa>
 8003d8c:	f06f 0305 	mvn.w	r3, #5
 8003d90:	e0b2      	b.n	8003ef8 <socket+0x210>
      	      if(flag & SF_UNI_BLOCK)
 8003d92:	78fb      	ldrb	r3, [r7, #3]
 8003d94:	f003 0310 	and.w	r3, r3, #16
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d00a      	beq.n	8003db2 <socket+0xca>
      	         if((flag & SF_MULTI_ENABLE) == 0) return SOCKERR_SOCKFLAG;
 8003d9c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	db06      	blt.n	8003db2 <socket+0xca>
 8003da4:	f06f 0305 	mvn.w	r3, #5
 8003da8:	e0a6      	b.n	8003ef8 <socket+0x210>
   	}
   }
 8003daa:	bf00      	nop
 8003dac:	e002      	b.n	8003db4 <socket+0xcc>
   	      break;
 8003dae:	bf00      	nop
 8003db0:	e000      	b.n	8003db4 <socket+0xcc>
   	      break;
 8003db2:	bf00      	nop
	close(sn);
 8003db4:	79fb      	ldrb	r3, [r7, #7]
 8003db6:	4618      	mov	r0, r3
 8003db8:	f000 f8ac 	bl	8003f14 <close>
	//M20150601
	#if _WIZCHIP_ == 5300
	   setSn_MR(sn, ((uint16_t)(protocol | (flag & 0xF0))) | (((uint16_t)(flag & 0x02)) << 7) );
    #else
	   setSn_MR(sn, (protocol | (flag & 0xF0)));
 8003dbc:	79fb      	ldrb	r3, [r7, #7]
 8003dbe:	009b      	lsls	r3, r3, #2
 8003dc0:	3301      	adds	r3, #1
 8003dc2:	00db      	lsls	r3, r3, #3
 8003dc4:	4618      	mov	r0, r3
 8003dc6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003dca:	f023 030f 	bic.w	r3, r3, #15
 8003dce:	b25a      	sxtb	r2, r3
 8003dd0:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8003dd4:	4313      	orrs	r3, r2
 8003dd6:	b25b      	sxtb	r3, r3
 8003dd8:	b2db      	uxtb	r3, r3
 8003dda:	4619      	mov	r1, r3
 8003ddc:	f001 fb66 	bl	80054ac <WIZCHIP_WRITE>
    #endif
	if(!port)
 8003de0:	88bb      	ldrh	r3, [r7, #4]
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d110      	bne.n	8003e08 <socket+0x120>
	{
	   port = sock_any_port++;
 8003de6:	4b46      	ldr	r3, [pc, #280]	; (8003f00 <socket+0x218>)
 8003de8:	881b      	ldrh	r3, [r3, #0]
 8003dea:	1c5a      	adds	r2, r3, #1
 8003dec:	b291      	uxth	r1, r2
 8003dee:	4a44      	ldr	r2, [pc, #272]	; (8003f00 <socket+0x218>)
 8003df0:	8011      	strh	r1, [r2, #0]
 8003df2:	80bb      	strh	r3, [r7, #4]
	   if(sock_any_port == 0xFFF0) sock_any_port = SOCK_ANY_PORT_NUM;
 8003df4:	4b42      	ldr	r3, [pc, #264]	; (8003f00 <socket+0x218>)
 8003df6:	881b      	ldrh	r3, [r3, #0]
 8003df8:	f64f 72f0 	movw	r2, #65520	; 0xfff0
 8003dfc:	4293      	cmp	r3, r2
 8003dfe:	d103      	bne.n	8003e08 <socket+0x120>
 8003e00:	4b3f      	ldr	r3, [pc, #252]	; (8003f00 <socket+0x218>)
 8003e02:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 8003e06:	801a      	strh	r2, [r3, #0]
	}
   setSn_PORT(sn,port);	
 8003e08:	79fb      	ldrb	r3, [r7, #7]
 8003e0a:	009b      	lsls	r3, r3, #2
 8003e0c:	3301      	adds	r3, #1
 8003e0e:	00db      	lsls	r3, r3, #3
 8003e10:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003e14:	461a      	mov	r2, r3
 8003e16:	88bb      	ldrh	r3, [r7, #4]
 8003e18:	0a1b      	lsrs	r3, r3, #8
 8003e1a:	b29b      	uxth	r3, r3
 8003e1c:	b2db      	uxtb	r3, r3
 8003e1e:	4619      	mov	r1, r3
 8003e20:	4610      	mov	r0, r2
 8003e22:	f001 fb43 	bl	80054ac <WIZCHIP_WRITE>
 8003e26:	79fb      	ldrb	r3, [r7, #7]
 8003e28:	009b      	lsls	r3, r3, #2
 8003e2a:	3301      	adds	r3, #1
 8003e2c:	00db      	lsls	r3, r3, #3
 8003e2e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003e32:	461a      	mov	r2, r3
 8003e34:	88bb      	ldrh	r3, [r7, #4]
 8003e36:	b2db      	uxtb	r3, r3
 8003e38:	4619      	mov	r1, r3
 8003e3a:	4610      	mov	r0, r2
 8003e3c:	f001 fb36 	bl	80054ac <WIZCHIP_WRITE>
   setSn_CR(sn,Sn_CR_OPEN);
 8003e40:	79fb      	ldrb	r3, [r7, #7]
 8003e42:	009b      	lsls	r3, r3, #2
 8003e44:	3301      	adds	r3, #1
 8003e46:	00db      	lsls	r3, r3, #3
 8003e48:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8003e4c:	2101      	movs	r1, #1
 8003e4e:	4618      	mov	r0, r3
 8003e50:	f001 fb2c 	bl	80054ac <WIZCHIP_WRITE>
   while(getSn_CR(sn));
 8003e54:	bf00      	nop
 8003e56:	79fb      	ldrb	r3, [r7, #7]
 8003e58:	009b      	lsls	r3, r3, #2
 8003e5a:	3301      	adds	r3, #1
 8003e5c:	00db      	lsls	r3, r3, #3
 8003e5e:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8003e62:	4618      	mov	r0, r3
 8003e64:	f001 fad6 	bl	8005414 <WIZCHIP_READ>
 8003e68:	4603      	mov	r3, r0
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d1f3      	bne.n	8003e56 <socket+0x16e>
   //A20150401 : For release the previous sock_io_mode
   sock_io_mode &= ~(1 <<sn);
 8003e6e:	79fb      	ldrb	r3, [r7, #7]
 8003e70:	2201      	movs	r2, #1
 8003e72:	fa02 f303 	lsl.w	r3, r2, r3
 8003e76:	b21b      	sxth	r3, r3
 8003e78:	43db      	mvns	r3, r3
 8003e7a:	b21a      	sxth	r2, r3
 8003e7c:	4b21      	ldr	r3, [pc, #132]	; (8003f04 <socket+0x21c>)
 8003e7e:	881b      	ldrh	r3, [r3, #0]
 8003e80:	b21b      	sxth	r3, r3
 8003e82:	4013      	ands	r3, r2
 8003e84:	b21b      	sxth	r3, r3
 8003e86:	b29a      	uxth	r2, r3
 8003e88:	4b1e      	ldr	r3, [pc, #120]	; (8003f04 <socket+0x21c>)
 8003e8a:	801a      	strh	r2, [r3, #0]
   //
	sock_io_mode |= ((flag & SF_IO_NONBLOCK) << sn);   
 8003e8c:	78fb      	ldrb	r3, [r7, #3]
 8003e8e:	f003 0201 	and.w	r2, r3, #1
 8003e92:	79fb      	ldrb	r3, [r7, #7]
 8003e94:	fa02 f303 	lsl.w	r3, r2, r3
 8003e98:	b21a      	sxth	r2, r3
 8003e9a:	4b1a      	ldr	r3, [pc, #104]	; (8003f04 <socket+0x21c>)
 8003e9c:	881b      	ldrh	r3, [r3, #0]
 8003e9e:	b21b      	sxth	r3, r3
 8003ea0:	4313      	orrs	r3, r2
 8003ea2:	b21b      	sxth	r3, r3
 8003ea4:	b29a      	uxth	r2, r3
 8003ea6:	4b17      	ldr	r3, [pc, #92]	; (8003f04 <socket+0x21c>)
 8003ea8:	801a      	strh	r2, [r3, #0]
   sock_is_sending &= ~(1<<sn);
 8003eaa:	79fb      	ldrb	r3, [r7, #7]
 8003eac:	2201      	movs	r2, #1
 8003eae:	fa02 f303 	lsl.w	r3, r2, r3
 8003eb2:	b21b      	sxth	r3, r3
 8003eb4:	43db      	mvns	r3, r3
 8003eb6:	b21a      	sxth	r2, r3
 8003eb8:	4b13      	ldr	r3, [pc, #76]	; (8003f08 <socket+0x220>)
 8003eba:	881b      	ldrh	r3, [r3, #0]
 8003ebc:	b21b      	sxth	r3, r3
 8003ebe:	4013      	ands	r3, r2
 8003ec0:	b21b      	sxth	r3, r3
 8003ec2:	b29a      	uxth	r2, r3
 8003ec4:	4b10      	ldr	r3, [pc, #64]	; (8003f08 <socket+0x220>)
 8003ec6:	801a      	strh	r2, [r3, #0]
   sock_remained_size[sn] = 0;
 8003ec8:	79fb      	ldrb	r3, [r7, #7]
 8003eca:	4a10      	ldr	r2, [pc, #64]	; (8003f0c <socket+0x224>)
 8003ecc:	2100      	movs	r1, #0
 8003ece:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
   //M20150601 : repalce 0 with PACK_COMPLETED
   //sock_pack_info[sn] = 0;
   sock_pack_info[sn] = PACK_COMPLETED;
 8003ed2:	79fb      	ldrb	r3, [r7, #7]
 8003ed4:	4a0e      	ldr	r2, [pc, #56]	; (8003f10 <socket+0x228>)
 8003ed6:	2100      	movs	r1, #0
 8003ed8:	54d1      	strb	r1, [r2, r3]
   //
   while(getSn_SR(sn) == SOCK_CLOSED);
 8003eda:	bf00      	nop
 8003edc:	79fb      	ldrb	r3, [r7, #7]
 8003ede:	009b      	lsls	r3, r3, #2
 8003ee0:	3301      	adds	r3, #1
 8003ee2:	00db      	lsls	r3, r3, #3
 8003ee4:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8003ee8:	4618      	mov	r0, r3
 8003eea:	f001 fa93 	bl	8005414 <WIZCHIP_READ>
 8003eee:	4603      	mov	r3, r0
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d0f3      	beq.n	8003edc <socket+0x1f4>
   return (int8_t)sn;
 8003ef4:	f997 3007 	ldrsb.w	r3, [r7, #7]
}	   
 8003ef8:	4618      	mov	r0, r3
 8003efa:	3714      	adds	r7, #20
 8003efc:	46bd      	mov	sp, r7
 8003efe:	bd90      	pop	{r4, r7, pc}
 8003f00:	2000001c 	.word	0x2000001c
 8003f04:	20000160 	.word	0x20000160
 8003f08:	20000162 	.word	0x20000162
 8003f0c:	20000164 	.word	0x20000164
 8003f10:	20000174 	.word	0x20000174

08003f14 <close>:

int8_t close(uint8_t sn)
{
 8003f14:	b580      	push	{r7, lr}
 8003f16:	b082      	sub	sp, #8
 8003f18:	af00      	add	r7, sp, #0
 8003f1a:	4603      	mov	r3, r0
 8003f1c:	71fb      	strb	r3, [r7, #7]
	CHECK_SOCKNUM();
 8003f1e:	79fb      	ldrb	r3, [r7, #7]
 8003f20:	2b08      	cmp	r3, #8
 8003f22:	d902      	bls.n	8003f2a <close+0x16>
 8003f24:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003f28:	e055      	b.n	8003fd6 <close+0xc2>
      while(getSn_CR(sn) != 0);
      while(getSn_SR(sn) != SOCK_UDP);
      sendto(sn,destip,1,destip,0x3000); // send the dummy data to an unknown destination(0.0.0.1).
   };   
#endif 
	setSn_CR(sn,Sn_CR_CLOSE);
 8003f2a:	79fb      	ldrb	r3, [r7, #7]
 8003f2c:	009b      	lsls	r3, r3, #2
 8003f2e:	3301      	adds	r3, #1
 8003f30:	00db      	lsls	r3, r3, #3
 8003f32:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8003f36:	2110      	movs	r1, #16
 8003f38:	4618      	mov	r0, r3
 8003f3a:	f001 fab7 	bl	80054ac <WIZCHIP_WRITE>
   /* wait to process the command... */
	while( getSn_CR(sn) );
 8003f3e:	bf00      	nop
 8003f40:	79fb      	ldrb	r3, [r7, #7]
 8003f42:	009b      	lsls	r3, r3, #2
 8003f44:	3301      	adds	r3, #1
 8003f46:	00db      	lsls	r3, r3, #3
 8003f48:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8003f4c:	4618      	mov	r0, r3
 8003f4e:	f001 fa61 	bl	8005414 <WIZCHIP_READ>
 8003f52:	4603      	mov	r3, r0
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d1f3      	bne.n	8003f40 <close+0x2c>
	/* clear all interrupt of the socket. */
	setSn_IR(sn, 0xFF);
 8003f58:	79fb      	ldrb	r3, [r7, #7]
 8003f5a:	009b      	lsls	r3, r3, #2
 8003f5c:	3301      	adds	r3, #1
 8003f5e:	00db      	lsls	r3, r3, #3
 8003f60:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8003f64:	211f      	movs	r1, #31
 8003f66:	4618      	mov	r0, r3
 8003f68:	f001 faa0 	bl	80054ac <WIZCHIP_WRITE>
	//A20150401 : Release the sock_io_mode of socket n.
	sock_io_mode &= ~(1<<sn);
 8003f6c:	79fb      	ldrb	r3, [r7, #7]
 8003f6e:	2201      	movs	r2, #1
 8003f70:	fa02 f303 	lsl.w	r3, r2, r3
 8003f74:	b21b      	sxth	r3, r3
 8003f76:	43db      	mvns	r3, r3
 8003f78:	b21a      	sxth	r2, r3
 8003f7a:	4b19      	ldr	r3, [pc, #100]	; (8003fe0 <close+0xcc>)
 8003f7c:	881b      	ldrh	r3, [r3, #0]
 8003f7e:	b21b      	sxth	r3, r3
 8003f80:	4013      	ands	r3, r2
 8003f82:	b21b      	sxth	r3, r3
 8003f84:	b29a      	uxth	r2, r3
 8003f86:	4b16      	ldr	r3, [pc, #88]	; (8003fe0 <close+0xcc>)
 8003f88:	801a      	strh	r2, [r3, #0]
	//
	sock_is_sending &= ~(1<<sn);
 8003f8a:	79fb      	ldrb	r3, [r7, #7]
 8003f8c:	2201      	movs	r2, #1
 8003f8e:	fa02 f303 	lsl.w	r3, r2, r3
 8003f92:	b21b      	sxth	r3, r3
 8003f94:	43db      	mvns	r3, r3
 8003f96:	b21a      	sxth	r2, r3
 8003f98:	4b12      	ldr	r3, [pc, #72]	; (8003fe4 <close+0xd0>)
 8003f9a:	881b      	ldrh	r3, [r3, #0]
 8003f9c:	b21b      	sxth	r3, r3
 8003f9e:	4013      	ands	r3, r2
 8003fa0:	b21b      	sxth	r3, r3
 8003fa2:	b29a      	uxth	r2, r3
 8003fa4:	4b0f      	ldr	r3, [pc, #60]	; (8003fe4 <close+0xd0>)
 8003fa6:	801a      	strh	r2, [r3, #0]
	sock_remained_size[sn] = 0;
 8003fa8:	79fb      	ldrb	r3, [r7, #7]
 8003faa:	4a0f      	ldr	r2, [pc, #60]	; (8003fe8 <close+0xd4>)
 8003fac:	2100      	movs	r1, #0
 8003fae:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	sock_pack_info[sn] = 0;
 8003fb2:	79fb      	ldrb	r3, [r7, #7]
 8003fb4:	4a0d      	ldr	r2, [pc, #52]	; (8003fec <close+0xd8>)
 8003fb6:	2100      	movs	r1, #0
 8003fb8:	54d1      	strb	r1, [r2, r3]
	while(getSn_SR(sn) != SOCK_CLOSED);
 8003fba:	bf00      	nop
 8003fbc:	79fb      	ldrb	r3, [r7, #7]
 8003fbe:	009b      	lsls	r3, r3, #2
 8003fc0:	3301      	adds	r3, #1
 8003fc2:	00db      	lsls	r3, r3, #3
 8003fc4:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8003fc8:	4618      	mov	r0, r3
 8003fca:	f001 fa23 	bl	8005414 <WIZCHIP_READ>
 8003fce:	4603      	mov	r3, r0
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d1f3      	bne.n	8003fbc <close+0xa8>
	return SOCK_OK;
 8003fd4:	2301      	movs	r3, #1
}
 8003fd6:	4618      	mov	r0, r3
 8003fd8:	3708      	adds	r7, #8
 8003fda:	46bd      	mov	sp, r7
 8003fdc:	bd80      	pop	{r7, pc}
 8003fde:	bf00      	nop
 8003fe0:	20000160 	.word	0x20000160
 8003fe4:	20000162 	.word	0x20000162
 8003fe8:	20000164 	.word	0x20000164
 8003fec:	20000174 	.word	0x20000174

08003ff0 <connect>:
   return SOCK_OK;
}


int8_t connect(uint8_t sn, uint8_t * addr, uint16_t port)
{
 8003ff0:	b580      	push	{r7, lr}
 8003ff2:	b084      	sub	sp, #16
 8003ff4:	af00      	add	r7, sp, #0
 8003ff6:	4603      	mov	r3, r0
 8003ff8:	6039      	str	r1, [r7, #0]
 8003ffa:	71fb      	strb	r3, [r7, #7]
 8003ffc:	4613      	mov	r3, r2
 8003ffe:	80bb      	strh	r3, [r7, #4]
   CHECK_SOCKNUM();
 8004000:	79fb      	ldrb	r3, [r7, #7]
 8004002:	2b08      	cmp	r3, #8
 8004004:	d902      	bls.n	800400c <connect+0x1c>
 8004006:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800400a:	e0c6      	b.n	800419a <connect+0x1aa>
   CHECK_SOCKMODE(Sn_MR_TCP);
 800400c:	79fb      	ldrb	r3, [r7, #7]
 800400e:	009b      	lsls	r3, r3, #2
 8004010:	3301      	adds	r3, #1
 8004012:	00db      	lsls	r3, r3, #3
 8004014:	4618      	mov	r0, r3
 8004016:	f001 f9fd 	bl	8005414 <WIZCHIP_READ>
 800401a:	4603      	mov	r3, r0
 800401c:	f003 030f 	and.w	r3, r3, #15
 8004020:	2b01      	cmp	r3, #1
 8004022:	d002      	beq.n	800402a <connect+0x3a>
 8004024:	f06f 0304 	mvn.w	r3, #4
 8004028:	e0b7      	b.n	800419a <connect+0x1aa>
   CHECK_SOCKINIT();
 800402a:	79fb      	ldrb	r3, [r7, #7]
 800402c:	009b      	lsls	r3, r3, #2
 800402e:	3301      	adds	r3, #1
 8004030:	00db      	lsls	r3, r3, #3
 8004032:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8004036:	4618      	mov	r0, r3
 8004038:	f001 f9ec 	bl	8005414 <WIZCHIP_READ>
 800403c:	4603      	mov	r3, r0
 800403e:	2b13      	cmp	r3, #19
 8004040:	d002      	beq.n	8004048 <connect+0x58>
 8004042:	f06f 0302 	mvn.w	r3, #2
 8004046:	e0a8      	b.n	800419a <connect+0x1aa>
   //M20140501 : For avoiding fatal error on memory align mismatched
   //if( *((uint32_t*)addr) == 0xFFFFFFFF || *((uint32_t*)addr) == 0) return SOCKERR_IPINVALID;
   {
      uint32_t taddr;
      taddr = ((uint32_t)addr[0] & 0x000000FF);
 8004048:	683b      	ldr	r3, [r7, #0]
 800404a:	781b      	ldrb	r3, [r3, #0]
 800404c:	60fb      	str	r3, [r7, #12]
      taddr = (taddr << 8) + ((uint32_t)addr[1] & 0x000000FF);
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	021b      	lsls	r3, r3, #8
 8004052:	683a      	ldr	r2, [r7, #0]
 8004054:	3201      	adds	r2, #1
 8004056:	7812      	ldrb	r2, [r2, #0]
 8004058:	4413      	add	r3, r2
 800405a:	60fb      	str	r3, [r7, #12]
      taddr = (taddr << 8) + ((uint32_t)addr[2] & 0x000000FF);
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	021b      	lsls	r3, r3, #8
 8004060:	683a      	ldr	r2, [r7, #0]
 8004062:	3202      	adds	r2, #2
 8004064:	7812      	ldrb	r2, [r2, #0]
 8004066:	4413      	add	r3, r2
 8004068:	60fb      	str	r3, [r7, #12]
      taddr = (taddr << 8) + ((uint32_t)addr[3] & 0x000000FF);
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	021b      	lsls	r3, r3, #8
 800406e:	683a      	ldr	r2, [r7, #0]
 8004070:	3203      	adds	r2, #3
 8004072:	7812      	ldrb	r2, [r2, #0]
 8004074:	4413      	add	r3, r2
 8004076:	60fb      	str	r3, [r7, #12]
      if( taddr == 0xFFFFFFFF || taddr == 0) return SOCKERR_IPINVALID;
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800407e:	d002      	beq.n	8004086 <connect+0x96>
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	2b00      	cmp	r3, #0
 8004084:	d102      	bne.n	800408c <connect+0x9c>
 8004086:	f06f 030b 	mvn.w	r3, #11
 800408a:	e086      	b.n	800419a <connect+0x1aa>
   }
   //
	
	if(port == 0) return SOCKERR_PORTZERO;
 800408c:	88bb      	ldrh	r3, [r7, #4]
 800408e:	2b00      	cmp	r3, #0
 8004090:	d102      	bne.n	8004098 <connect+0xa8>
 8004092:	f06f 030a 	mvn.w	r3, #10
 8004096:	e080      	b.n	800419a <connect+0x1aa>
	setSn_DIPR(sn,addr);
 8004098:	79fb      	ldrb	r3, [r7, #7]
 800409a:	009b      	lsls	r3, r3, #2
 800409c:	3301      	adds	r3, #1
 800409e:	00db      	lsls	r3, r3, #3
 80040a0:	f503 6340 	add.w	r3, r3, #3072	; 0xc00
 80040a4:	2204      	movs	r2, #4
 80040a6:	6839      	ldr	r1, [r7, #0]
 80040a8:	4618      	mov	r0, r3
 80040aa:	f001 faad 	bl	8005608 <WIZCHIP_WRITE_BUF>
	setSn_DPORT(sn,port);
 80040ae:	79fb      	ldrb	r3, [r7, #7]
 80040b0:	009b      	lsls	r3, r3, #2
 80040b2:	3301      	adds	r3, #1
 80040b4:	00db      	lsls	r3, r3, #3
 80040b6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80040ba:	461a      	mov	r2, r3
 80040bc:	88bb      	ldrh	r3, [r7, #4]
 80040be:	0a1b      	lsrs	r3, r3, #8
 80040c0:	b29b      	uxth	r3, r3
 80040c2:	b2db      	uxtb	r3, r3
 80040c4:	4619      	mov	r1, r3
 80040c6:	4610      	mov	r0, r2
 80040c8:	f001 f9f0 	bl	80054ac <WIZCHIP_WRITE>
 80040cc:	79fb      	ldrb	r3, [r7, #7]
 80040ce:	009b      	lsls	r3, r3, #2
 80040d0:	3301      	adds	r3, #1
 80040d2:	00db      	lsls	r3, r3, #3
 80040d4:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 80040d8:	461a      	mov	r2, r3
 80040da:	88bb      	ldrh	r3, [r7, #4]
 80040dc:	b2db      	uxtb	r3, r3
 80040de:	4619      	mov	r1, r3
 80040e0:	4610      	mov	r0, r2
 80040e2:	f001 f9e3 	bl	80054ac <WIZCHIP_WRITE>
	setSn_CR(sn,Sn_CR_CONNECT);
 80040e6:	79fb      	ldrb	r3, [r7, #7]
 80040e8:	009b      	lsls	r3, r3, #2
 80040ea:	3301      	adds	r3, #1
 80040ec:	00db      	lsls	r3, r3, #3
 80040ee:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80040f2:	2104      	movs	r1, #4
 80040f4:	4618      	mov	r0, r3
 80040f6:	f001 f9d9 	bl	80054ac <WIZCHIP_WRITE>
   while(getSn_CR(sn));
 80040fa:	bf00      	nop
 80040fc:	79fb      	ldrb	r3, [r7, #7]
 80040fe:	009b      	lsls	r3, r3, #2
 8004100:	3301      	adds	r3, #1
 8004102:	00db      	lsls	r3, r3, #3
 8004104:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8004108:	4618      	mov	r0, r3
 800410a:	f001 f983 	bl	8005414 <WIZCHIP_READ>
 800410e:	4603      	mov	r3, r0
 8004110:	2b00      	cmp	r3, #0
 8004112:	d1f3      	bne.n	80040fc <connect+0x10c>
   if(sock_io_mode & (1<<sn)) return SOCK_BUSY;
 8004114:	4b23      	ldr	r3, [pc, #140]	; (80041a4 <connect+0x1b4>)
 8004116:	881b      	ldrh	r3, [r3, #0]
 8004118:	461a      	mov	r2, r3
 800411a:	79fb      	ldrb	r3, [r7, #7]
 800411c:	fa42 f303 	asr.w	r3, r2, r3
 8004120:	f003 0301 	and.w	r3, r3, #1
 8004124:	2b00      	cmp	r3, #0
 8004126:	d02b      	beq.n	8004180 <connect+0x190>
 8004128:	2300      	movs	r3, #0
 800412a:	e036      	b.n	800419a <connect+0x1aa>
   while(getSn_SR(sn) != SOCK_ESTABLISHED)
   {
		if (getSn_IR(sn) & Sn_IR_TIMEOUT)
 800412c:	79fb      	ldrb	r3, [r7, #7]
 800412e:	009b      	lsls	r3, r3, #2
 8004130:	3301      	adds	r3, #1
 8004132:	00db      	lsls	r3, r3, #3
 8004134:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8004138:	4618      	mov	r0, r3
 800413a:	f001 f96b 	bl	8005414 <WIZCHIP_READ>
 800413e:	4603      	mov	r3, r0
 8004140:	f003 0308 	and.w	r3, r3, #8
 8004144:	2b00      	cmp	r3, #0
 8004146:	d00c      	beq.n	8004162 <connect+0x172>
		{
			setSn_IR(sn, Sn_IR_TIMEOUT);
 8004148:	79fb      	ldrb	r3, [r7, #7]
 800414a:	009b      	lsls	r3, r3, #2
 800414c:	3301      	adds	r3, #1
 800414e:	00db      	lsls	r3, r3, #3
 8004150:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8004154:	2108      	movs	r1, #8
 8004156:	4618      	mov	r0, r3
 8004158:	f001 f9a8 	bl	80054ac <WIZCHIP_WRITE>
            return SOCKERR_TIMEOUT;
 800415c:	f06f 030c 	mvn.w	r3, #12
 8004160:	e01b      	b.n	800419a <connect+0x1aa>
		}

		if (getSn_SR(sn) == SOCK_CLOSED)
 8004162:	79fb      	ldrb	r3, [r7, #7]
 8004164:	009b      	lsls	r3, r3, #2
 8004166:	3301      	adds	r3, #1
 8004168:	00db      	lsls	r3, r3, #3
 800416a:	f503 7340 	add.w	r3, r3, #768	; 0x300
 800416e:	4618      	mov	r0, r3
 8004170:	f001 f950 	bl	8005414 <WIZCHIP_READ>
 8004174:	4603      	mov	r3, r0
 8004176:	2b00      	cmp	r3, #0
 8004178:	d102      	bne.n	8004180 <connect+0x190>
		{
			return SOCKERR_SOCKCLOSED;
 800417a:	f06f 0303 	mvn.w	r3, #3
 800417e:	e00c      	b.n	800419a <connect+0x1aa>
   while(getSn_SR(sn) != SOCK_ESTABLISHED)
 8004180:	79fb      	ldrb	r3, [r7, #7]
 8004182:	009b      	lsls	r3, r3, #2
 8004184:	3301      	adds	r3, #1
 8004186:	00db      	lsls	r3, r3, #3
 8004188:	f503 7340 	add.w	r3, r3, #768	; 0x300
 800418c:	4618      	mov	r0, r3
 800418e:	f001 f941 	bl	8005414 <WIZCHIP_READ>
 8004192:	4603      	mov	r3, r0
 8004194:	2b17      	cmp	r3, #23
 8004196:	d1c9      	bne.n	800412c <connect+0x13c>
		}
	}
   
   return SOCK_OK;
 8004198:	2301      	movs	r3, #1
}
 800419a:	4618      	mov	r0, r3
 800419c:	3710      	adds	r7, #16
 800419e:	46bd      	mov	sp, r7
 80041a0:	bd80      	pop	{r7, pc}
 80041a2:	bf00      	nop
 80041a4:	20000160 	.word	0x20000160

080041a8 <send>:
	}
	return SOCK_OK;
}

int32_t send(uint8_t sn, uint8_t * buf, uint16_t len)
{
 80041a8:	b580      	push	{r7, lr}
 80041aa:	b084      	sub	sp, #16
 80041ac:	af00      	add	r7, sp, #0
 80041ae:	4603      	mov	r3, r0
 80041b0:	6039      	str	r1, [r7, #0]
 80041b2:	71fb      	strb	r3, [r7, #7]
 80041b4:	4613      	mov	r3, r2
 80041b6:	80bb      	strh	r3, [r7, #4]
   uint8_t tmp=0;
 80041b8:	2300      	movs	r3, #0
 80041ba:	73fb      	strb	r3, [r7, #15]
   uint16_t freesize=0;
 80041bc:	2300      	movs	r3, #0
 80041be:	81bb      	strh	r3, [r7, #12]
   
   CHECK_SOCKNUM();
 80041c0:	79fb      	ldrb	r3, [r7, #7]
 80041c2:	2b08      	cmp	r3, #8
 80041c4:	d902      	bls.n	80041cc <send+0x24>
 80041c6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80041ca:	e0de      	b.n	800438a <send+0x1e2>
   CHECK_SOCKMODE(Sn_MR_TCP);
 80041cc:	79fb      	ldrb	r3, [r7, #7]
 80041ce:	009b      	lsls	r3, r3, #2
 80041d0:	3301      	adds	r3, #1
 80041d2:	00db      	lsls	r3, r3, #3
 80041d4:	4618      	mov	r0, r3
 80041d6:	f001 f91d 	bl	8005414 <WIZCHIP_READ>
 80041da:	4603      	mov	r3, r0
 80041dc:	f003 030f 	and.w	r3, r3, #15
 80041e0:	2b01      	cmp	r3, #1
 80041e2:	d002      	beq.n	80041ea <send+0x42>
 80041e4:	f06f 0304 	mvn.w	r3, #4
 80041e8:	e0cf      	b.n	800438a <send+0x1e2>
   CHECK_SOCKDATA();
 80041ea:	88bb      	ldrh	r3, [r7, #4]
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d102      	bne.n	80041f6 <send+0x4e>
 80041f0:	f06f 030d 	mvn.w	r3, #13
 80041f4:	e0c9      	b.n	800438a <send+0x1e2>
   tmp = getSn_SR(sn);
 80041f6:	79fb      	ldrb	r3, [r7, #7]
 80041f8:	009b      	lsls	r3, r3, #2
 80041fa:	3301      	adds	r3, #1
 80041fc:	00db      	lsls	r3, r3, #3
 80041fe:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8004202:	4618      	mov	r0, r3
 8004204:	f001 f906 	bl	8005414 <WIZCHIP_READ>
 8004208:	4603      	mov	r3, r0
 800420a:	73fb      	strb	r3, [r7, #15]
   if(tmp != SOCK_ESTABLISHED && tmp != SOCK_CLOSE_WAIT) return SOCKERR_SOCKSTATUS;
 800420c:	7bfb      	ldrb	r3, [r7, #15]
 800420e:	2b17      	cmp	r3, #23
 8004210:	d005      	beq.n	800421e <send+0x76>
 8004212:	7bfb      	ldrb	r3, [r7, #15]
 8004214:	2b1c      	cmp	r3, #28
 8004216:	d002      	beq.n	800421e <send+0x76>
 8004218:	f06f 0306 	mvn.w	r3, #6
 800421c:	e0b5      	b.n	800438a <send+0x1e2>
   if( sock_is_sending & (1<<sn) )
 800421e:	4b5d      	ldr	r3, [pc, #372]	; (8004394 <send+0x1ec>)
 8004220:	881b      	ldrh	r3, [r3, #0]
 8004222:	461a      	mov	r2, r3
 8004224:	79fb      	ldrb	r3, [r7, #7]
 8004226:	fa42 f303 	asr.w	r3, r2, r3
 800422a:	f003 0301 	and.w	r3, r3, #1
 800422e:	2b00      	cmp	r3, #0
 8004230:	d039      	beq.n	80042a6 <send+0xfe>
   {
      tmp = getSn_IR(sn);
 8004232:	79fb      	ldrb	r3, [r7, #7]
 8004234:	009b      	lsls	r3, r3, #2
 8004236:	3301      	adds	r3, #1
 8004238:	00db      	lsls	r3, r3, #3
 800423a:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800423e:	4618      	mov	r0, r3
 8004240:	f001 f8e8 	bl	8005414 <WIZCHIP_READ>
 8004244:	4603      	mov	r3, r0
 8004246:	f003 031f 	and.w	r3, r3, #31
 800424a:	73fb      	strb	r3, [r7, #15]
      if(tmp & Sn_IR_SENDOK)
 800424c:	7bfb      	ldrb	r3, [r7, #15]
 800424e:	f003 0310 	and.w	r3, r3, #16
 8004252:	2b00      	cmp	r3, #0
 8004254:	d019      	beq.n	800428a <send+0xe2>
      {
         setSn_IR(sn, Sn_IR_SENDOK);
 8004256:	79fb      	ldrb	r3, [r7, #7]
 8004258:	009b      	lsls	r3, r3, #2
 800425a:	3301      	adds	r3, #1
 800425c:	00db      	lsls	r3, r3, #3
 800425e:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8004262:	2110      	movs	r1, #16
 8004264:	4618      	mov	r0, r3
 8004266:	f001 f921 	bl	80054ac <WIZCHIP_WRITE>
               setSn_CR(sn,Sn_CR_SEND);
               while(getSn_CR(sn));
               return SOCK_BUSY;
            }
         #endif
         sock_is_sending &= ~(1<<sn);         
 800426a:	79fb      	ldrb	r3, [r7, #7]
 800426c:	2201      	movs	r2, #1
 800426e:	fa02 f303 	lsl.w	r3, r2, r3
 8004272:	b21b      	sxth	r3, r3
 8004274:	43db      	mvns	r3, r3
 8004276:	b21a      	sxth	r2, r3
 8004278:	4b46      	ldr	r3, [pc, #280]	; (8004394 <send+0x1ec>)
 800427a:	881b      	ldrh	r3, [r3, #0]
 800427c:	b21b      	sxth	r3, r3
 800427e:	4013      	ands	r3, r2
 8004280:	b21b      	sxth	r3, r3
 8004282:	b29a      	uxth	r2, r3
 8004284:	4b43      	ldr	r3, [pc, #268]	; (8004394 <send+0x1ec>)
 8004286:	801a      	strh	r2, [r3, #0]
 8004288:	e00d      	b.n	80042a6 <send+0xfe>
      }
      else if(tmp & Sn_IR_TIMEOUT)
 800428a:	7bfb      	ldrb	r3, [r7, #15]
 800428c:	f003 0308 	and.w	r3, r3, #8
 8004290:	2b00      	cmp	r3, #0
 8004292:	d006      	beq.n	80042a2 <send+0xfa>
      {
         close(sn);
 8004294:	79fb      	ldrb	r3, [r7, #7]
 8004296:	4618      	mov	r0, r3
 8004298:	f7ff fe3c 	bl	8003f14 <close>
         return SOCKERR_TIMEOUT;
 800429c:	f06f 030c 	mvn.w	r3, #12
 80042a0:	e073      	b.n	800438a <send+0x1e2>
      }
      else return SOCK_BUSY;
 80042a2:	2300      	movs	r3, #0
 80042a4:	e071      	b.n	800438a <send+0x1e2>
   }
   freesize = getSn_TxMAX(sn);
 80042a6:	79fb      	ldrb	r3, [r7, #7]
 80042a8:	009b      	lsls	r3, r3, #2
 80042aa:	3301      	adds	r3, #1
 80042ac:	00db      	lsls	r3, r3, #3
 80042ae:	f503 53f8 	add.w	r3, r3, #7936	; 0x1f00
 80042b2:	4618      	mov	r0, r3
 80042b4:	f001 f8ae 	bl	8005414 <WIZCHIP_READ>
 80042b8:	4603      	mov	r3, r0
 80042ba:	b29b      	uxth	r3, r3
 80042bc:	029b      	lsls	r3, r3, #10
 80042be:	81bb      	strh	r3, [r7, #12]
   if (len > freesize) len = freesize; // check size not to exceed MAX size.
 80042c0:	88ba      	ldrh	r2, [r7, #4]
 80042c2:	89bb      	ldrh	r3, [r7, #12]
 80042c4:	429a      	cmp	r2, r3
 80042c6:	d901      	bls.n	80042cc <send+0x124>
 80042c8:	89bb      	ldrh	r3, [r7, #12]
 80042ca:	80bb      	strh	r3, [r7, #4]
   while(1)
   {
      freesize = getSn_TX_FSR(sn);
 80042cc:	79fb      	ldrb	r3, [r7, #7]
 80042ce:	4618      	mov	r0, r3
 80042d0:	f001 f9fa 	bl	80056c8 <getSn_TX_FSR>
 80042d4:	4603      	mov	r3, r0
 80042d6:	81bb      	strh	r3, [r7, #12]
      tmp = getSn_SR(sn);
 80042d8:	79fb      	ldrb	r3, [r7, #7]
 80042da:	009b      	lsls	r3, r3, #2
 80042dc:	3301      	adds	r3, #1
 80042de:	00db      	lsls	r3, r3, #3
 80042e0:	f503 7340 	add.w	r3, r3, #768	; 0x300
 80042e4:	4618      	mov	r0, r3
 80042e6:	f001 f895 	bl	8005414 <WIZCHIP_READ>
 80042ea:	4603      	mov	r3, r0
 80042ec:	73fb      	strb	r3, [r7, #15]
      if ((tmp != SOCK_ESTABLISHED) && (tmp != SOCK_CLOSE_WAIT))
 80042ee:	7bfb      	ldrb	r3, [r7, #15]
 80042f0:	2b17      	cmp	r3, #23
 80042f2:	d009      	beq.n	8004308 <send+0x160>
 80042f4:	7bfb      	ldrb	r3, [r7, #15]
 80042f6:	2b1c      	cmp	r3, #28
 80042f8:	d006      	beq.n	8004308 <send+0x160>
      {
         close(sn);
 80042fa:	79fb      	ldrb	r3, [r7, #7]
 80042fc:	4618      	mov	r0, r3
 80042fe:	f7ff fe09 	bl	8003f14 <close>
         return SOCKERR_SOCKSTATUS;
 8004302:	f06f 0306 	mvn.w	r3, #6
 8004306:	e040      	b.n	800438a <send+0x1e2>
      }
      if( (sock_io_mode & (1<<sn)) && (len > freesize) ) return SOCK_BUSY;
 8004308:	4b23      	ldr	r3, [pc, #140]	; (8004398 <send+0x1f0>)
 800430a:	881b      	ldrh	r3, [r3, #0]
 800430c:	461a      	mov	r2, r3
 800430e:	79fb      	ldrb	r3, [r7, #7]
 8004310:	fa42 f303 	asr.w	r3, r2, r3
 8004314:	f003 0301 	and.w	r3, r3, #1
 8004318:	2b00      	cmp	r3, #0
 800431a:	d005      	beq.n	8004328 <send+0x180>
 800431c:	88ba      	ldrh	r2, [r7, #4]
 800431e:	89bb      	ldrh	r3, [r7, #12]
 8004320:	429a      	cmp	r2, r3
 8004322:	d901      	bls.n	8004328 <send+0x180>
 8004324:	2300      	movs	r3, #0
 8004326:	e030      	b.n	800438a <send+0x1e2>
      if(len <= freesize) break;
 8004328:	88ba      	ldrh	r2, [r7, #4]
 800432a:	89bb      	ldrh	r3, [r7, #12]
 800432c:	429a      	cmp	r2, r3
 800432e:	d900      	bls.n	8004332 <send+0x18a>
      freesize = getSn_TX_FSR(sn);
 8004330:	e7cc      	b.n	80042cc <send+0x124>
      if(len <= freesize) break;
 8004332:	bf00      	nop
   }
   wiz_send_data(sn, buf, len);
 8004334:	88ba      	ldrh	r2, [r7, #4]
 8004336:	79fb      	ldrb	r3, [r7, #7]
 8004338:	6839      	ldr	r1, [r7, #0]
 800433a:	4618      	mov	r0, r3
 800433c:	f001 fa5a 	bl	80057f4 <wiz_send_data>

   #if _WIZCHIP_ == 5300
      setSn_TX_WRSR(sn,len);
   #endif
   
   setSn_CR(sn,Sn_CR_SEND);
 8004340:	79fb      	ldrb	r3, [r7, #7]
 8004342:	009b      	lsls	r3, r3, #2
 8004344:	3301      	adds	r3, #1
 8004346:	00db      	lsls	r3, r3, #3
 8004348:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800434c:	2120      	movs	r1, #32
 800434e:	4618      	mov	r0, r3
 8004350:	f001 f8ac 	bl	80054ac <WIZCHIP_WRITE>
   /* wait to process the command... */
   while(getSn_CR(sn));
 8004354:	bf00      	nop
 8004356:	79fb      	ldrb	r3, [r7, #7]
 8004358:	009b      	lsls	r3, r3, #2
 800435a:	3301      	adds	r3, #1
 800435c:	00db      	lsls	r3, r3, #3
 800435e:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8004362:	4618      	mov	r0, r3
 8004364:	f001 f856 	bl	8005414 <WIZCHIP_READ>
 8004368:	4603      	mov	r3, r0
 800436a:	2b00      	cmp	r3, #0
 800436c:	d1f3      	bne.n	8004356 <send+0x1ae>
   sock_is_sending |= (1 << sn);
 800436e:	79fb      	ldrb	r3, [r7, #7]
 8004370:	2201      	movs	r2, #1
 8004372:	fa02 f303 	lsl.w	r3, r2, r3
 8004376:	b21a      	sxth	r2, r3
 8004378:	4b06      	ldr	r3, [pc, #24]	; (8004394 <send+0x1ec>)
 800437a:	881b      	ldrh	r3, [r3, #0]
 800437c:	b21b      	sxth	r3, r3
 800437e:	4313      	orrs	r3, r2
 8004380:	b21b      	sxth	r3, r3
 8004382:	b29a      	uxth	r2, r3
 8004384:	4b03      	ldr	r3, [pc, #12]	; (8004394 <send+0x1ec>)
 8004386:	801a      	strh	r2, [r3, #0]
   //M20150409 : Explicit Type Casting
   //return len;
   return (int32_t)len;
 8004388:	88bb      	ldrh	r3, [r7, #4]
}
 800438a:	4618      	mov	r0, r3
 800438c:	3710      	adds	r7, #16
 800438e:	46bd      	mov	sp, r7
 8004390:	bd80      	pop	{r7, pc}
 8004392:	bf00      	nop
 8004394:	20000162 	.word	0x20000162
 8004398:	20000160 	.word	0x20000160

0800439c <recv>:


int32_t recv(uint8_t sn, uint8_t * buf, uint16_t len)
{
 800439c:	b590      	push	{r4, r7, lr}
 800439e:	b085      	sub	sp, #20
 80043a0:	af00      	add	r7, sp, #0
 80043a2:	4603      	mov	r3, r0
 80043a4:	6039      	str	r1, [r7, #0]
 80043a6:	71fb      	strb	r3, [r7, #7]
 80043a8:	4613      	mov	r3, r2
 80043aa:	80bb      	strh	r3, [r7, #4]
   uint8_t  tmp = 0;
 80043ac:	2300      	movs	r3, #0
 80043ae:	73fb      	strb	r3, [r7, #15]
   uint16_t recvsize = 0;
 80043b0:	2300      	movs	r3, #0
 80043b2:	81bb      	strh	r3, [r7, #12]
#if   _WIZCHIP_ == 5300
   uint8_t head[2];
   uint16_t mr;
#endif
//
   CHECK_SOCKNUM();
 80043b4:	79fb      	ldrb	r3, [r7, #7]
 80043b6:	2b08      	cmp	r3, #8
 80043b8:	d902      	bls.n	80043c0 <recv+0x24>
 80043ba:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80043be:	e09c      	b.n	80044fa <recv+0x15e>
   CHECK_SOCKMODE(Sn_MR_TCP);
 80043c0:	79fb      	ldrb	r3, [r7, #7]
 80043c2:	009b      	lsls	r3, r3, #2
 80043c4:	3301      	adds	r3, #1
 80043c6:	00db      	lsls	r3, r3, #3
 80043c8:	4618      	mov	r0, r3
 80043ca:	f001 f823 	bl	8005414 <WIZCHIP_READ>
 80043ce:	4603      	mov	r3, r0
 80043d0:	f003 030f 	and.w	r3, r3, #15
 80043d4:	2b01      	cmp	r3, #1
 80043d6:	d002      	beq.n	80043de <recv+0x42>
 80043d8:	f06f 0304 	mvn.w	r3, #4
 80043dc:	e08d      	b.n	80044fa <recv+0x15e>
   CHECK_SOCKDATA();
 80043de:	88bb      	ldrh	r3, [r7, #4]
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d102      	bne.n	80043ea <recv+0x4e>
 80043e4:	f06f 030d 	mvn.w	r3, #13
 80043e8:	e087      	b.n	80044fa <recv+0x15e>
   
   recvsize = getSn_RxMAX(sn);
 80043ea:	79fb      	ldrb	r3, [r7, #7]
 80043ec:	009b      	lsls	r3, r3, #2
 80043ee:	3301      	adds	r3, #1
 80043f0:	00db      	lsls	r3, r3, #3
 80043f2:	f503 53f0 	add.w	r3, r3, #7680	; 0x1e00
 80043f6:	4618      	mov	r0, r3
 80043f8:	f001 f80c 	bl	8005414 <WIZCHIP_READ>
 80043fc:	4603      	mov	r3, r0
 80043fe:	b29b      	uxth	r3, r3
 8004400:	029b      	lsls	r3, r3, #10
 8004402:	81bb      	strh	r3, [r7, #12]
   if(recvsize < len) len = recvsize;
 8004404:	89ba      	ldrh	r2, [r7, #12]
 8004406:	88bb      	ldrh	r3, [r7, #4]
 8004408:	429a      	cmp	r2, r3
 800440a:	d201      	bcs.n	8004410 <recv+0x74>
 800440c:	89bb      	ldrh	r3, [r7, #12]
 800440e:	80bb      	strh	r3, [r7, #4]
   {
#endif
//
      while(1)
      {
         recvsize = getSn_RX_RSR(sn);
 8004410:	79fb      	ldrb	r3, [r7, #7]
 8004412:	4618      	mov	r0, r3
 8004414:	f001 f9a3 	bl	800575e <getSn_RX_RSR>
 8004418:	4603      	mov	r3, r0
 800441a:	81bb      	strh	r3, [r7, #12]
         tmp = getSn_SR(sn);
 800441c:	79fb      	ldrb	r3, [r7, #7]
 800441e:	009b      	lsls	r3, r3, #2
 8004420:	3301      	adds	r3, #1
 8004422:	00db      	lsls	r3, r3, #3
 8004424:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8004428:	4618      	mov	r0, r3
 800442a:	f000 fff3 	bl	8005414 <WIZCHIP_READ>
 800442e:	4603      	mov	r3, r0
 8004430:	73fb      	strb	r3, [r7, #15]
         if (tmp != SOCK_ESTABLISHED)
 8004432:	7bfb      	ldrb	r3, [r7, #15]
 8004434:	2b17      	cmp	r3, #23
 8004436:	d026      	beq.n	8004486 <recv+0xea>
         {
            if(tmp == SOCK_CLOSE_WAIT)
 8004438:	7bfb      	ldrb	r3, [r7, #15]
 800443a:	2b1c      	cmp	r3, #28
 800443c:	d11c      	bne.n	8004478 <recv+0xdc>
            {
               if(recvsize != 0) break;
 800443e:	89bb      	ldrh	r3, [r7, #12]
 8004440:	2b00      	cmp	r3, #0
 8004442:	d133      	bne.n	80044ac <recv+0x110>
               else if(getSn_TX_FSR(sn) == getSn_TxMAX(sn))
 8004444:	79fb      	ldrb	r3, [r7, #7]
 8004446:	4618      	mov	r0, r3
 8004448:	f001 f93e 	bl	80056c8 <getSn_TX_FSR>
 800444c:	4603      	mov	r3, r0
 800444e:	461c      	mov	r4, r3
 8004450:	79fb      	ldrb	r3, [r7, #7]
 8004452:	009b      	lsls	r3, r3, #2
 8004454:	3301      	adds	r3, #1
 8004456:	00db      	lsls	r3, r3, #3
 8004458:	f503 53f8 	add.w	r3, r3, #7936	; 0x1f00
 800445c:	4618      	mov	r0, r3
 800445e:	f000 ffd9 	bl	8005414 <WIZCHIP_READ>
 8004462:	4603      	mov	r3, r0
 8004464:	029b      	lsls	r3, r3, #10
 8004466:	429c      	cmp	r4, r3
 8004468:	d10d      	bne.n	8004486 <recv+0xea>
               {
                  close(sn);
 800446a:	79fb      	ldrb	r3, [r7, #7]
 800446c:	4618      	mov	r0, r3
 800446e:	f7ff fd51 	bl	8003f14 <close>
                  return SOCKERR_SOCKSTATUS;
 8004472:	f06f 0306 	mvn.w	r3, #6
 8004476:	e040      	b.n	80044fa <recv+0x15e>
               }
            }
            else
            {
               close(sn);
 8004478:	79fb      	ldrb	r3, [r7, #7]
 800447a:	4618      	mov	r0, r3
 800447c:	f7ff fd4a 	bl	8003f14 <close>
               return SOCKERR_SOCKSTATUS;
 8004480:	f06f 0306 	mvn.w	r3, #6
 8004484:	e039      	b.n	80044fa <recv+0x15e>
            }
         }
         if((sock_io_mode & (1<<sn)) && (recvsize == 0)) return SOCK_BUSY;
 8004486:	4b1f      	ldr	r3, [pc, #124]	; (8004504 <recv+0x168>)
 8004488:	881b      	ldrh	r3, [r3, #0]
 800448a:	461a      	mov	r2, r3
 800448c:	79fb      	ldrb	r3, [r7, #7]
 800448e:	fa42 f303 	asr.w	r3, r2, r3
 8004492:	f003 0301 	and.w	r3, r3, #1
 8004496:	2b00      	cmp	r3, #0
 8004498:	d004      	beq.n	80044a4 <recv+0x108>
 800449a:	89bb      	ldrh	r3, [r7, #12]
 800449c:	2b00      	cmp	r3, #0
 800449e:	d101      	bne.n	80044a4 <recv+0x108>
 80044a0:	2300      	movs	r3, #0
 80044a2:	e02a      	b.n	80044fa <recv+0x15e>
         if(recvsize != 0) break;
 80044a4:	89bb      	ldrh	r3, [r7, #12]
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d102      	bne.n	80044b0 <recv+0x114>
         recvsize = getSn_RX_RSR(sn);
 80044aa:	e7b1      	b.n	8004410 <recv+0x74>
               if(recvsize != 0) break;
 80044ac:	bf00      	nop
 80044ae:	e000      	b.n	80044b2 <recv+0x116>
         if(recvsize != 0) break;
 80044b0:	bf00      	nop
   }
   else sock_pack_info[sn] = PACK_COMPLETED;
   if(getSn_MR(sn) & Sn_MR_ALIGN) sock_remained_size[sn] = 0;
   //len = recvsize;
#else   
   if(recvsize < len) len = recvsize;   
 80044b2:	89ba      	ldrh	r2, [r7, #12]
 80044b4:	88bb      	ldrh	r3, [r7, #4]
 80044b6:	429a      	cmp	r2, r3
 80044b8:	d201      	bcs.n	80044be <recv+0x122>
 80044ba:	89bb      	ldrh	r3, [r7, #12]
 80044bc:	80bb      	strh	r3, [r7, #4]
   wiz_recv_data(sn, buf, len);
 80044be:	88ba      	ldrh	r2, [r7, #4]
 80044c0:	79fb      	ldrb	r3, [r7, #7]
 80044c2:	6839      	ldr	r1, [r7, #0]
 80044c4:	4618      	mov	r0, r3
 80044c6:	f001 f9f1 	bl	80058ac <wiz_recv_data>
   setSn_CR(sn,Sn_CR_RECV);
 80044ca:	79fb      	ldrb	r3, [r7, #7]
 80044cc:	009b      	lsls	r3, r3, #2
 80044ce:	3301      	adds	r3, #1
 80044d0:	00db      	lsls	r3, r3, #3
 80044d2:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80044d6:	2140      	movs	r1, #64	; 0x40
 80044d8:	4618      	mov	r0, r3
 80044da:	f000 ffe7 	bl	80054ac <WIZCHIP_WRITE>
   while(getSn_CR(sn));
 80044de:	bf00      	nop
 80044e0:	79fb      	ldrb	r3, [r7, #7]
 80044e2:	009b      	lsls	r3, r3, #2
 80044e4:	3301      	adds	r3, #1
 80044e6:	00db      	lsls	r3, r3, #3
 80044e8:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80044ec:	4618      	mov	r0, r3
 80044ee:	f000 ff91 	bl	8005414 <WIZCHIP_READ>
 80044f2:	4603      	mov	r3, r0
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d1f3      	bne.n	80044e0 <recv+0x144>
#endif
     
   //M20150409 : Explicit Type Casting
   //return len;
   return (int32_t)len;
 80044f8:	88bb      	ldrh	r3, [r7, #4]
}
 80044fa:	4618      	mov	r0, r3
 80044fc:	3714      	adds	r7, #20
 80044fe:	46bd      	mov	sp, r7
 8004500:	bd90      	pop	{r4, r7, pc}
 8004502:	bf00      	nop
 8004504:	20000160 	.word	0x20000160

08004508 <sendto>:

int32_t sendto(uint8_t sn, uint8_t * buf, uint16_t len, uint8_t * addr, uint16_t port)
{
 8004508:	b580      	push	{r7, lr}
 800450a:	b086      	sub	sp, #24
 800450c:	af00      	add	r7, sp, #0
 800450e:	60b9      	str	r1, [r7, #8]
 8004510:	607b      	str	r3, [r7, #4]
 8004512:	4603      	mov	r3, r0
 8004514:	73fb      	strb	r3, [r7, #15]
 8004516:	4613      	mov	r3, r2
 8004518:	81bb      	strh	r3, [r7, #12]
   uint8_t tmp = 0;
 800451a:	2300      	movs	r3, #0
 800451c:	75fb      	strb	r3, [r7, #23]
   uint16_t freesize = 0;
 800451e:	2300      	movs	r3, #0
 8004520:	82bb      	strh	r3, [r7, #20]
   uint32_t taddr;

   CHECK_SOCKNUM();
 8004522:	7bfb      	ldrb	r3, [r7, #15]
 8004524:	2b08      	cmp	r3, #8
 8004526:	d902      	bls.n	800452e <sendto+0x26>
 8004528:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800452c:	e11b      	b.n	8004766 <sendto+0x25e>
   switch(getSn_MR(sn) & 0x0F)
 800452e:	7bfb      	ldrb	r3, [r7, #15]
 8004530:	009b      	lsls	r3, r3, #2
 8004532:	3301      	adds	r3, #1
 8004534:	00db      	lsls	r3, r3, #3
 8004536:	4618      	mov	r0, r3
 8004538:	f000 ff6c 	bl	8005414 <WIZCHIP_READ>
 800453c:	4603      	mov	r3, r0
 800453e:	f003 030f 	and.w	r3, r3, #15
 8004542:	3b02      	subs	r3, #2
 8004544:	2b02      	cmp	r3, #2
 8004546:	d902      	bls.n	800454e <sendto+0x46>
//   #if ( _WIZCHIP_ < 5200 )
      case Sn_MR_IPRAW:
         break;
//   #endif
      default:
         return SOCKERR_SOCKMODE;
 8004548:	f06f 0304 	mvn.w	r3, #4
 800454c:	e10b      	b.n	8004766 <sendto+0x25e>
         break;
 800454e:	bf00      	nop
   }
   CHECK_SOCKDATA();
 8004550:	89bb      	ldrh	r3, [r7, #12]
 8004552:	2b00      	cmp	r3, #0
 8004554:	d102      	bne.n	800455c <sendto+0x54>
 8004556:	f06f 030d 	mvn.w	r3, #13
 800455a:	e104      	b.n	8004766 <sendto+0x25e>
   //M20140501 : For avoiding fatal error on memory align mismatched
   //if(*((uint32_t*)addr) == 0) return SOCKERR_IPINVALID;
   //{
      //uint32_t taddr;
      taddr = ((uint32_t)addr[0]) & 0x000000FF;
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	781b      	ldrb	r3, [r3, #0]
 8004560:	613b      	str	r3, [r7, #16]
      taddr = (taddr << 8) + ((uint32_t)addr[1] & 0x000000FF);
 8004562:	693b      	ldr	r3, [r7, #16]
 8004564:	021b      	lsls	r3, r3, #8
 8004566:	687a      	ldr	r2, [r7, #4]
 8004568:	3201      	adds	r2, #1
 800456a:	7812      	ldrb	r2, [r2, #0]
 800456c:	4413      	add	r3, r2
 800456e:	613b      	str	r3, [r7, #16]
      taddr = (taddr << 8) + ((uint32_t)addr[2] & 0x000000FF);
 8004570:	693b      	ldr	r3, [r7, #16]
 8004572:	021b      	lsls	r3, r3, #8
 8004574:	687a      	ldr	r2, [r7, #4]
 8004576:	3202      	adds	r2, #2
 8004578:	7812      	ldrb	r2, [r2, #0]
 800457a:	4413      	add	r3, r2
 800457c:	613b      	str	r3, [r7, #16]
      taddr = (taddr << 8) + ((uint32_t)addr[3] & 0x000000FF);
 800457e:	693b      	ldr	r3, [r7, #16]
 8004580:	021b      	lsls	r3, r3, #8
 8004582:	687a      	ldr	r2, [r7, #4]
 8004584:	3203      	adds	r2, #3
 8004586:	7812      	ldrb	r2, [r2, #0]
 8004588:	4413      	add	r3, r2
 800458a:	613b      	str	r3, [r7, #16]
   //}
   //
   //if(*((uint32_t*)addr) == 0) return SOCKERR_IPINVALID;
   if((taddr == 0) && ((getSn_MR(sn)&Sn_MR_MACRAW) != Sn_MR_MACRAW)) return SOCKERR_IPINVALID;
 800458c:	693b      	ldr	r3, [r7, #16]
 800458e:	2b00      	cmp	r3, #0
 8004590:	d10e      	bne.n	80045b0 <sendto+0xa8>
 8004592:	7bfb      	ldrb	r3, [r7, #15]
 8004594:	009b      	lsls	r3, r3, #2
 8004596:	3301      	adds	r3, #1
 8004598:	00db      	lsls	r3, r3, #3
 800459a:	4618      	mov	r0, r3
 800459c:	f000 ff3a 	bl	8005414 <WIZCHIP_READ>
 80045a0:	4603      	mov	r3, r0
 80045a2:	f003 0304 	and.w	r3, r3, #4
 80045a6:	2b04      	cmp	r3, #4
 80045a8:	d002      	beq.n	80045b0 <sendto+0xa8>
 80045aa:	f06f 030b 	mvn.w	r3, #11
 80045ae:	e0da      	b.n	8004766 <sendto+0x25e>
   if((port  == 0) && ((getSn_MR(sn)&Sn_MR_MACRAW) != Sn_MR_MACRAW)) return SOCKERR_PORTZERO;
 80045b0:	8c3b      	ldrh	r3, [r7, #32]
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d10e      	bne.n	80045d4 <sendto+0xcc>
 80045b6:	7bfb      	ldrb	r3, [r7, #15]
 80045b8:	009b      	lsls	r3, r3, #2
 80045ba:	3301      	adds	r3, #1
 80045bc:	00db      	lsls	r3, r3, #3
 80045be:	4618      	mov	r0, r3
 80045c0:	f000 ff28 	bl	8005414 <WIZCHIP_READ>
 80045c4:	4603      	mov	r3, r0
 80045c6:	f003 0304 	and.w	r3, r3, #4
 80045ca:	2b04      	cmp	r3, #4
 80045cc:	d002      	beq.n	80045d4 <sendto+0xcc>
 80045ce:	f06f 030a 	mvn.w	r3, #10
 80045d2:	e0c8      	b.n	8004766 <sendto+0x25e>
   tmp = getSn_SR(sn);
 80045d4:	7bfb      	ldrb	r3, [r7, #15]
 80045d6:	009b      	lsls	r3, r3, #2
 80045d8:	3301      	adds	r3, #1
 80045da:	00db      	lsls	r3, r3, #3
 80045dc:	f503 7340 	add.w	r3, r3, #768	; 0x300
 80045e0:	4618      	mov	r0, r3
 80045e2:	f000 ff17 	bl	8005414 <WIZCHIP_READ>
 80045e6:	4603      	mov	r3, r0
 80045e8:	75fb      	strb	r3, [r7, #23]
//#if ( _WIZCHIP_ < 5200 )
   if((tmp != SOCK_MACRAW) && (tmp != SOCK_UDP) && (tmp != SOCK_IPRAW)) return SOCKERR_SOCKSTATUS;
 80045ea:	7dfb      	ldrb	r3, [r7, #23]
 80045ec:	2b42      	cmp	r3, #66	; 0x42
 80045ee:	d008      	beq.n	8004602 <sendto+0xfa>
 80045f0:	7dfb      	ldrb	r3, [r7, #23]
 80045f2:	2b22      	cmp	r3, #34	; 0x22
 80045f4:	d005      	beq.n	8004602 <sendto+0xfa>
 80045f6:	7dfb      	ldrb	r3, [r7, #23]
 80045f8:	2b32      	cmp	r3, #50	; 0x32
 80045fa:	d002      	beq.n	8004602 <sendto+0xfa>
 80045fc:	f06f 0306 	mvn.w	r3, #6
 8004600:	e0b1      	b.n	8004766 <sendto+0x25e>
//#else
//   if(tmp != SOCK_MACRAW && tmp != SOCK_UDP) return SOCKERR_SOCKSTATUS;
//#endif
      
   setSn_DIPR(sn,addr);
 8004602:	7bfb      	ldrb	r3, [r7, #15]
 8004604:	009b      	lsls	r3, r3, #2
 8004606:	3301      	adds	r3, #1
 8004608:	00db      	lsls	r3, r3, #3
 800460a:	f503 6340 	add.w	r3, r3, #3072	; 0xc00
 800460e:	2204      	movs	r2, #4
 8004610:	6879      	ldr	r1, [r7, #4]
 8004612:	4618      	mov	r0, r3
 8004614:	f000 fff8 	bl	8005608 <WIZCHIP_WRITE_BUF>
   setSn_DPORT(sn,port);      
 8004618:	7bfb      	ldrb	r3, [r7, #15]
 800461a:	009b      	lsls	r3, r3, #2
 800461c:	3301      	adds	r3, #1
 800461e:	00db      	lsls	r3, r3, #3
 8004620:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004624:	461a      	mov	r2, r3
 8004626:	8c3b      	ldrh	r3, [r7, #32]
 8004628:	0a1b      	lsrs	r3, r3, #8
 800462a:	b29b      	uxth	r3, r3
 800462c:	b2db      	uxtb	r3, r3
 800462e:	4619      	mov	r1, r3
 8004630:	4610      	mov	r0, r2
 8004632:	f000 ff3b 	bl	80054ac <WIZCHIP_WRITE>
 8004636:	7bfb      	ldrb	r3, [r7, #15]
 8004638:	009b      	lsls	r3, r3, #2
 800463a:	3301      	adds	r3, #1
 800463c:	00db      	lsls	r3, r3, #3
 800463e:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 8004642:	461a      	mov	r2, r3
 8004644:	8c3b      	ldrh	r3, [r7, #32]
 8004646:	b2db      	uxtb	r3, r3
 8004648:	4619      	mov	r1, r3
 800464a:	4610      	mov	r0, r2
 800464c:	f000 ff2e 	bl	80054ac <WIZCHIP_WRITE>
   freesize = getSn_TxMAX(sn);
 8004650:	7bfb      	ldrb	r3, [r7, #15]
 8004652:	009b      	lsls	r3, r3, #2
 8004654:	3301      	adds	r3, #1
 8004656:	00db      	lsls	r3, r3, #3
 8004658:	f503 53f8 	add.w	r3, r3, #7936	; 0x1f00
 800465c:	4618      	mov	r0, r3
 800465e:	f000 fed9 	bl	8005414 <WIZCHIP_READ>
 8004662:	4603      	mov	r3, r0
 8004664:	b29b      	uxth	r3, r3
 8004666:	029b      	lsls	r3, r3, #10
 8004668:	82bb      	strh	r3, [r7, #20]
   if (len > freesize) len = freesize; // check size not to exceed MAX size.
 800466a:	89ba      	ldrh	r2, [r7, #12]
 800466c:	8abb      	ldrh	r3, [r7, #20]
 800466e:	429a      	cmp	r2, r3
 8004670:	d901      	bls.n	8004676 <sendto+0x16e>
 8004672:	8abb      	ldrh	r3, [r7, #20]
 8004674:	81bb      	strh	r3, [r7, #12]
   while(1)
   {
      freesize = getSn_TX_FSR(sn);
 8004676:	7bfb      	ldrb	r3, [r7, #15]
 8004678:	4618      	mov	r0, r3
 800467a:	f001 f825 	bl	80056c8 <getSn_TX_FSR>
 800467e:	4603      	mov	r3, r0
 8004680:	82bb      	strh	r3, [r7, #20]
      if(getSn_SR(sn) == SOCK_CLOSED) return SOCKERR_SOCKCLOSED;
 8004682:	7bfb      	ldrb	r3, [r7, #15]
 8004684:	009b      	lsls	r3, r3, #2
 8004686:	3301      	adds	r3, #1
 8004688:	00db      	lsls	r3, r3, #3
 800468a:	f503 7340 	add.w	r3, r3, #768	; 0x300
 800468e:	4618      	mov	r0, r3
 8004690:	f000 fec0 	bl	8005414 <WIZCHIP_READ>
 8004694:	4603      	mov	r3, r0
 8004696:	2b00      	cmp	r3, #0
 8004698:	d102      	bne.n	80046a0 <sendto+0x198>
 800469a:	f06f 0303 	mvn.w	r3, #3
 800469e:	e062      	b.n	8004766 <sendto+0x25e>
      if( (sock_io_mode & (1<<sn)) && (len > freesize) ) return SOCK_BUSY;
 80046a0:	4b33      	ldr	r3, [pc, #204]	; (8004770 <sendto+0x268>)
 80046a2:	881b      	ldrh	r3, [r3, #0]
 80046a4:	461a      	mov	r2, r3
 80046a6:	7bfb      	ldrb	r3, [r7, #15]
 80046a8:	fa42 f303 	asr.w	r3, r2, r3
 80046ac:	f003 0301 	and.w	r3, r3, #1
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d005      	beq.n	80046c0 <sendto+0x1b8>
 80046b4:	89ba      	ldrh	r2, [r7, #12]
 80046b6:	8abb      	ldrh	r3, [r7, #20]
 80046b8:	429a      	cmp	r2, r3
 80046ba:	d901      	bls.n	80046c0 <sendto+0x1b8>
 80046bc:	2300      	movs	r3, #0
 80046be:	e052      	b.n	8004766 <sendto+0x25e>
      if(len <= freesize) break;
 80046c0:	89ba      	ldrh	r2, [r7, #12]
 80046c2:	8abb      	ldrh	r3, [r7, #20]
 80046c4:	429a      	cmp	r2, r3
 80046c6:	d900      	bls.n	80046ca <sendto+0x1c2>
      freesize = getSn_TX_FSR(sn);
 80046c8:	e7d5      	b.n	8004676 <sendto+0x16e>
      if(len <= freesize) break;
 80046ca:	bf00      	nop
   };
	wiz_send_data(sn, buf, len);
 80046cc:	89ba      	ldrh	r2, [r7, #12]
 80046ce:	7bfb      	ldrb	r3, [r7, #15]
 80046d0:	68b9      	ldr	r1, [r7, #8]
 80046d2:	4618      	mov	r0, r3
 80046d4:	f001 f88e 	bl	80057f4 <wiz_send_data>
//A20150601 : For W5300
#if _WIZCHIP_ == 5300
   setSn_TX_WRSR(sn, len);
#endif
//   
	setSn_CR(sn,Sn_CR_SEND);
 80046d8:	7bfb      	ldrb	r3, [r7, #15]
 80046da:	009b      	lsls	r3, r3, #2
 80046dc:	3301      	adds	r3, #1
 80046de:	00db      	lsls	r3, r3, #3
 80046e0:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80046e4:	2120      	movs	r1, #32
 80046e6:	4618      	mov	r0, r3
 80046e8:	f000 fee0 	bl	80054ac <WIZCHIP_WRITE>
	/* wait to process the command... */
	while(getSn_CR(sn));
 80046ec:	bf00      	nop
 80046ee:	7bfb      	ldrb	r3, [r7, #15]
 80046f0:	009b      	lsls	r3, r3, #2
 80046f2:	3301      	adds	r3, #1
 80046f4:	00db      	lsls	r3, r3, #3
 80046f6:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80046fa:	4618      	mov	r0, r3
 80046fc:	f000 fe8a 	bl	8005414 <WIZCHIP_READ>
 8004700:	4603      	mov	r3, r0
 8004702:	2b00      	cmp	r3, #0
 8004704:	d1f3      	bne.n	80046ee <sendto+0x1e6>
   while(1)
   {
      tmp = getSn_IR(sn);
 8004706:	7bfb      	ldrb	r3, [r7, #15]
 8004708:	009b      	lsls	r3, r3, #2
 800470a:	3301      	adds	r3, #1
 800470c:	00db      	lsls	r3, r3, #3
 800470e:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8004712:	4618      	mov	r0, r3
 8004714:	f000 fe7e 	bl	8005414 <WIZCHIP_READ>
 8004718:	4603      	mov	r3, r0
 800471a:	f003 031f 	and.w	r3, r3, #31
 800471e:	75fb      	strb	r3, [r7, #23]
      if(tmp & Sn_IR_SENDOK)
 8004720:	7dfb      	ldrb	r3, [r7, #23]
 8004722:	f003 0310 	and.w	r3, r3, #16
 8004726:	2b00      	cmp	r3, #0
 8004728:	d00c      	beq.n	8004744 <sendto+0x23c>
      {
         setSn_IR(sn, Sn_IR_SENDOK);
 800472a:	7bfb      	ldrb	r3, [r7, #15]
 800472c:	009b      	lsls	r3, r3, #2
 800472e:	3301      	adds	r3, #1
 8004730:	00db      	lsls	r3, r3, #3
 8004732:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8004736:	2110      	movs	r1, #16
 8004738:	4618      	mov	r0, r3
 800473a:	f000 feb7 	bl	80054ac <WIZCHIP_WRITE>
         break;
 800473e:	bf00      	nop
   #if _WIZCHIP_ < 5500   //M20150401 : for WIZCHIP Errata #4, #5 (ARP errata)
      if(taddr) setSUBR((uint8_t*)&taddr);
   #endif
   //M20150409 : Explicit Type Casting
   //return len;
   return (int32_t)len;
 8004740:	89bb      	ldrh	r3, [r7, #12]
 8004742:	e010      	b.n	8004766 <sendto+0x25e>
      else if(tmp & Sn_IR_TIMEOUT)
 8004744:	7dfb      	ldrb	r3, [r7, #23]
 8004746:	f003 0308 	and.w	r3, r3, #8
 800474a:	2b00      	cmp	r3, #0
 800474c:	d0db      	beq.n	8004706 <sendto+0x1fe>
         setSn_IR(sn, Sn_IR_TIMEOUT);
 800474e:	7bfb      	ldrb	r3, [r7, #15]
 8004750:	009b      	lsls	r3, r3, #2
 8004752:	3301      	adds	r3, #1
 8004754:	00db      	lsls	r3, r3, #3
 8004756:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800475a:	2108      	movs	r1, #8
 800475c:	4618      	mov	r0, r3
 800475e:	f000 fea5 	bl	80054ac <WIZCHIP_WRITE>
         return SOCKERR_TIMEOUT;
 8004762:	f06f 030c 	mvn.w	r3, #12
}
 8004766:	4618      	mov	r0, r3
 8004768:	3718      	adds	r7, #24
 800476a:	46bd      	mov	sp, r7
 800476c:	bd80      	pop	{r7, pc}
 800476e:	bf00      	nop
 8004770:	20000160 	.word	0x20000160

08004774 <recvfrom>:



int32_t recvfrom(uint8_t sn, uint8_t * buf, uint16_t len, uint8_t * addr, uint16_t *port)
{
 8004774:	b580      	push	{r7, lr}
 8004776:	b088      	sub	sp, #32
 8004778:	af00      	add	r7, sp, #0
 800477a:	60b9      	str	r1, [r7, #8]
 800477c:	607b      	str	r3, [r7, #4]
 800477e:	4603      	mov	r3, r0
 8004780:	73fb      	strb	r3, [r7, #15]
 8004782:	4613      	mov	r3, r2
 8004784:	81bb      	strh	r3, [r7, #12]
#else   
   uint8_t  mr;
#endif
//   
   uint8_t  head[8];
	uint16_t pack_len=0;
 8004786:	2300      	movs	r3, #0
 8004788:	83fb      	strh	r3, [r7, #30]

   CHECK_SOCKNUM();
 800478a:	7bfb      	ldrb	r3, [r7, #15]
 800478c:	2b08      	cmp	r3, #8
 800478e:	d902      	bls.n	8004796 <recvfrom+0x22>
 8004790:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004794:	e1d4      	b.n	8004b40 <recvfrom+0x3cc>
//A20150601
#if _WIZCHIP_ == 5300
   mr1 = getMR();
#endif   

   switch((mr=getSn_MR(sn)) & 0x0F)
 8004796:	7bfb      	ldrb	r3, [r7, #15]
 8004798:	009b      	lsls	r3, r3, #2
 800479a:	3301      	adds	r3, #1
 800479c:	00db      	lsls	r3, r3, #3
 800479e:	4618      	mov	r0, r3
 80047a0:	f000 fe38 	bl	8005414 <WIZCHIP_READ>
 80047a4:	4603      	mov	r3, r0
 80047a6:	777b      	strb	r3, [r7, #29]
 80047a8:	7f7b      	ldrb	r3, [r7, #29]
 80047aa:	f003 030f 	and.w	r3, r3, #15
 80047ae:	3b02      	subs	r3, #2
 80047b0:	2b02      	cmp	r3, #2
 80047b2:	d902      	bls.n	80047ba <recvfrom+0x46>
   #if ( _WIZCHIP_ < 5200 )         
      case Sn_MR_PPPoE:
         break;
   #endif
      default:
         return SOCKERR_SOCKMODE;
 80047b4:	f06f 0304 	mvn.w	r3, #4
 80047b8:	e1c2      	b.n	8004b40 <recvfrom+0x3cc>
         break;
 80047ba:	bf00      	nop
   }
   CHECK_SOCKDATA();
 80047bc:	89bb      	ldrh	r3, [r7, #12]
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d102      	bne.n	80047c8 <recvfrom+0x54>
 80047c2:	f06f 030d 	mvn.w	r3, #13
 80047c6:	e1bb      	b.n	8004b40 <recvfrom+0x3cc>
   if(sock_remained_size[sn] == 0)
 80047c8:	7bfb      	ldrb	r3, [r7, #15]
 80047ca:	4a88      	ldr	r2, [pc, #544]	; (80049ec <recvfrom+0x278>)
 80047cc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d128      	bne.n	8004826 <recvfrom+0xb2>
   {
      while(1)
      {
         pack_len = getSn_RX_RSR(sn);
 80047d4:	7bfb      	ldrb	r3, [r7, #15]
 80047d6:	4618      	mov	r0, r3
 80047d8:	f000 ffc1 	bl	800575e <getSn_RX_RSR>
 80047dc:	4603      	mov	r3, r0
 80047de:	83fb      	strh	r3, [r7, #30]
         if(getSn_SR(sn) == SOCK_CLOSED) return SOCKERR_SOCKCLOSED;
 80047e0:	7bfb      	ldrb	r3, [r7, #15]
 80047e2:	009b      	lsls	r3, r3, #2
 80047e4:	3301      	adds	r3, #1
 80047e6:	00db      	lsls	r3, r3, #3
 80047e8:	f503 7340 	add.w	r3, r3, #768	; 0x300
 80047ec:	4618      	mov	r0, r3
 80047ee:	f000 fe11 	bl	8005414 <WIZCHIP_READ>
 80047f2:	4603      	mov	r3, r0
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d102      	bne.n	80047fe <recvfrom+0x8a>
 80047f8:	f06f 0303 	mvn.w	r3, #3
 80047fc:	e1a0      	b.n	8004b40 <recvfrom+0x3cc>
         if( (sock_io_mode & (1<<sn)) && (pack_len == 0) ) return SOCK_BUSY;
 80047fe:	4b7c      	ldr	r3, [pc, #496]	; (80049f0 <recvfrom+0x27c>)
 8004800:	881b      	ldrh	r3, [r3, #0]
 8004802:	461a      	mov	r2, r3
 8004804:	7bfb      	ldrb	r3, [r7, #15]
 8004806:	fa42 f303 	asr.w	r3, r2, r3
 800480a:	f003 0301 	and.w	r3, r3, #1
 800480e:	2b00      	cmp	r3, #0
 8004810:	d004      	beq.n	800481c <recvfrom+0xa8>
 8004812:	8bfb      	ldrh	r3, [r7, #30]
 8004814:	2b00      	cmp	r3, #0
 8004816:	d101      	bne.n	800481c <recvfrom+0xa8>
 8004818:	2300      	movs	r3, #0
 800481a:	e191      	b.n	8004b40 <recvfrom+0x3cc>
         if(pack_len != 0) break;
 800481c:	8bfb      	ldrh	r3, [r7, #30]
 800481e:	2b00      	cmp	r3, #0
 8004820:	d100      	bne.n	8004824 <recvfrom+0xb0>
         pack_len = getSn_RX_RSR(sn);
 8004822:	e7d7      	b.n	80047d4 <recvfrom+0x60>
         if(pack_len != 0) break;
 8004824:	bf00      	nop
      };
   }
//D20150601 : Move it to bottom
// sock_pack_info[sn] = PACK_COMPLETED;
	switch (mr & 0x07)
 8004826:	7f7b      	ldrb	r3, [r7, #29]
 8004828:	f003 0307 	and.w	r3, r3, #7
 800482c:	2b04      	cmp	r3, #4
 800482e:	d079      	beq.n	8004924 <recvfrom+0x1b0>
 8004830:	2b04      	cmp	r3, #4
 8004832:	f300 8142 	bgt.w	8004aba <recvfrom+0x346>
 8004836:	2b02      	cmp	r3, #2
 8004838:	d003      	beq.n	8004842 <recvfrom+0xce>
 800483a:	2b03      	cmp	r3, #3
 800483c:	f000 80dc 	beq.w	80049f8 <recvfrom+0x284>
 8004840:	e13b      	b.n	8004aba <recvfrom+0x346>
	{
	   case Sn_MR_UDP :
	      if(sock_remained_size[sn] == 0)
 8004842:	7bfb      	ldrb	r3, [r7, #15]
 8004844:	4a69      	ldr	r2, [pc, #420]	; (80049ec <recvfrom+0x278>)
 8004846:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800484a:	2b00      	cmp	r3, #0
 800484c:	d152      	bne.n	80048f4 <recvfrom+0x180>
	      {
   			wiz_recv_data(sn, head, 8);
 800484e:	f107 0114 	add.w	r1, r7, #20
 8004852:	7bfb      	ldrb	r3, [r7, #15]
 8004854:	2208      	movs	r2, #8
 8004856:	4618      	mov	r0, r3
 8004858:	f001 f828 	bl	80058ac <wiz_recv_data>
   			setSn_CR(sn,Sn_CR_RECV);
 800485c:	7bfb      	ldrb	r3, [r7, #15]
 800485e:	009b      	lsls	r3, r3, #2
 8004860:	3301      	adds	r3, #1
 8004862:	00db      	lsls	r3, r3, #3
 8004864:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8004868:	2140      	movs	r1, #64	; 0x40
 800486a:	4618      	mov	r0, r3
 800486c:	f000 fe1e 	bl	80054ac <WIZCHIP_WRITE>
   			while(getSn_CR(sn));
 8004870:	bf00      	nop
 8004872:	7bfb      	ldrb	r3, [r7, #15]
 8004874:	009b      	lsls	r3, r3, #2
 8004876:	3301      	adds	r3, #1
 8004878:	00db      	lsls	r3, r3, #3
 800487a:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800487e:	4618      	mov	r0, r3
 8004880:	f000 fdc8 	bl	8005414 <WIZCHIP_READ>
 8004884:	4603      	mov	r3, r0
 8004886:	2b00      	cmp	r3, #0
 8004888:	d1f3      	bne.n	8004872 <recvfrom+0xfe>
      			sock_remained_size[sn] = (sock_remained_size[sn] << 8) + head[6];
   		   }
            else
            {
         #endif
               addr[0] = head[0];
 800488a:	7d3a      	ldrb	r2, [r7, #20]
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	701a      	strb	r2, [r3, #0]
      			addr[1] = head[1];
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	3301      	adds	r3, #1
 8004894:	7d7a      	ldrb	r2, [r7, #21]
 8004896:	701a      	strb	r2, [r3, #0]
      			addr[2] = head[2];
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	3302      	adds	r3, #2
 800489c:	7dba      	ldrb	r2, [r7, #22]
 800489e:	701a      	strb	r2, [r3, #0]
      			addr[3] = head[3];
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	3303      	adds	r3, #3
 80048a4:	7dfa      	ldrb	r2, [r7, #23]
 80048a6:	701a      	strb	r2, [r3, #0]
      			*port = head[4];
 80048a8:	7e3b      	ldrb	r3, [r7, #24]
 80048aa:	b29a      	uxth	r2, r3
 80048ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048ae:	801a      	strh	r2, [r3, #0]
      			*port = (*port << 8) + head[5];
 80048b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048b2:	881b      	ldrh	r3, [r3, #0]
 80048b4:	021b      	lsls	r3, r3, #8
 80048b6:	b29a      	uxth	r2, r3
 80048b8:	7e7b      	ldrb	r3, [r7, #25]
 80048ba:	b29b      	uxth	r3, r3
 80048bc:	4413      	add	r3, r2
 80048be:	b29a      	uxth	r2, r3
 80048c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048c2:	801a      	strh	r2, [r3, #0]
      			sock_remained_size[sn] = head[6];
 80048c4:	7eba      	ldrb	r2, [r7, #26]
 80048c6:	7bfb      	ldrb	r3, [r7, #15]
 80048c8:	b291      	uxth	r1, r2
 80048ca:	4a48      	ldr	r2, [pc, #288]	; (80049ec <recvfrom+0x278>)
 80048cc:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
      			sock_remained_size[sn] = (sock_remained_size[sn] << 8) + head[7];
 80048d0:	7bfb      	ldrb	r3, [r7, #15]
 80048d2:	4a46      	ldr	r2, [pc, #280]	; (80049ec <recvfrom+0x278>)
 80048d4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80048d8:	021b      	lsls	r3, r3, #8
 80048da:	b299      	uxth	r1, r3
 80048dc:	7efb      	ldrb	r3, [r7, #27]
 80048de:	b29a      	uxth	r2, r3
 80048e0:	7bfb      	ldrb	r3, [r7, #15]
 80048e2:	440a      	add	r2, r1
 80048e4:	b291      	uxth	r1, r2
 80048e6:	4a41      	ldr	r2, [pc, #260]	; (80049ec <recvfrom+0x278>)
 80048e8:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
         #if _WIZCHIP_ == 5300
            }
         #endif
   			sock_pack_info[sn] = PACK_FIRST;
 80048ec:	7bfb      	ldrb	r3, [r7, #15]
 80048ee:	4a41      	ldr	r2, [pc, #260]	; (80049f4 <recvfrom+0x280>)
 80048f0:	2180      	movs	r1, #128	; 0x80
 80048f2:	54d1      	strb	r1, [r2, r3]
   	   }
			if(len < sock_remained_size[sn]) pack_len = len;
 80048f4:	7bfb      	ldrb	r3, [r7, #15]
 80048f6:	4a3d      	ldr	r2, [pc, #244]	; (80049ec <recvfrom+0x278>)
 80048f8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80048fc:	89ba      	ldrh	r2, [r7, #12]
 80048fe:	429a      	cmp	r2, r3
 8004900:	d202      	bcs.n	8004908 <recvfrom+0x194>
 8004902:	89bb      	ldrh	r3, [r7, #12]
 8004904:	83fb      	strh	r3, [r7, #30]
 8004906:	e004      	b.n	8004912 <recvfrom+0x19e>
			else pack_len = sock_remained_size[sn];
 8004908:	7bfb      	ldrb	r3, [r7, #15]
 800490a:	4a38      	ldr	r2, [pc, #224]	; (80049ec <recvfrom+0x278>)
 800490c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004910:	83fb      	strh	r3, [r7, #30]
			//A20150601 : For W5300
			len = pack_len;
 8004912:	8bfb      	ldrh	r3, [r7, #30]
 8004914:	81bb      	strh	r3, [r7, #12]
			   }
			#endif
			//
			// Need to packet length check (default 1472)
			//
   		wiz_recv_data(sn, buf, pack_len); // data copy.
 8004916:	8bfa      	ldrh	r2, [r7, #30]
 8004918:	7bfb      	ldrb	r3, [r7, #15]
 800491a:	68b9      	ldr	r1, [r7, #8]
 800491c:	4618      	mov	r0, r3
 800491e:	f000 ffc5 	bl	80058ac <wiz_recv_data>
			break;
 8004922:	e0d6      	b.n	8004ad2 <recvfrom+0x35e>
	   case Sn_MR_MACRAW :
	      if(sock_remained_size[sn] == 0)
 8004924:	7bfb      	ldrb	r3, [r7, #15]
 8004926:	4a31      	ldr	r2, [pc, #196]	; (80049ec <recvfrom+0x278>)
 8004928:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800492c:	2b00      	cmp	r3, #0
 800492e:	d146      	bne.n	80049be <recvfrom+0x24a>
	      {
   			wiz_recv_data(sn, head, 2);
 8004930:	f107 0114 	add.w	r1, r7, #20
 8004934:	7bfb      	ldrb	r3, [r7, #15]
 8004936:	2202      	movs	r2, #2
 8004938:	4618      	mov	r0, r3
 800493a:	f000 ffb7 	bl	80058ac <wiz_recv_data>
   			setSn_CR(sn,Sn_CR_RECV);
 800493e:	7bfb      	ldrb	r3, [r7, #15]
 8004940:	009b      	lsls	r3, r3, #2
 8004942:	3301      	adds	r3, #1
 8004944:	00db      	lsls	r3, r3, #3
 8004946:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800494a:	2140      	movs	r1, #64	; 0x40
 800494c:	4618      	mov	r0, r3
 800494e:	f000 fdad 	bl	80054ac <WIZCHIP_WRITE>
   			while(getSn_CR(sn));
 8004952:	bf00      	nop
 8004954:	7bfb      	ldrb	r3, [r7, #15]
 8004956:	009b      	lsls	r3, r3, #2
 8004958:	3301      	adds	r3, #1
 800495a:	00db      	lsls	r3, r3, #3
 800495c:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8004960:	4618      	mov	r0, r3
 8004962:	f000 fd57 	bl	8005414 <WIZCHIP_READ>
 8004966:	4603      	mov	r3, r0
 8004968:	2b00      	cmp	r3, #0
 800496a:	d1f3      	bne.n	8004954 <recvfrom+0x1e0>
   			// read peer's IP address, port number & packet length
    			sock_remained_size[sn] = head[0];
 800496c:	7d3a      	ldrb	r2, [r7, #20]
 800496e:	7bfb      	ldrb	r3, [r7, #15]
 8004970:	b291      	uxth	r1, r2
 8004972:	4a1e      	ldr	r2, [pc, #120]	; (80049ec <recvfrom+0x278>)
 8004974:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
   			sock_remained_size[sn] = (sock_remained_size[sn] <<8) + head[1] -2;
 8004978:	7bfb      	ldrb	r3, [r7, #15]
 800497a:	4a1c      	ldr	r2, [pc, #112]	; (80049ec <recvfrom+0x278>)
 800497c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004980:	021b      	lsls	r3, r3, #8
 8004982:	b29a      	uxth	r2, r3
 8004984:	7d7b      	ldrb	r3, [r7, #21]
 8004986:	b29b      	uxth	r3, r3
 8004988:	4413      	add	r3, r2
 800498a:	b29a      	uxth	r2, r3
 800498c:	7bfb      	ldrb	r3, [r7, #15]
 800498e:	3a02      	subs	r2, #2
 8004990:	b291      	uxth	r1, r2
 8004992:	4a16      	ldr	r2, [pc, #88]	; (80049ec <recvfrom+0x278>)
 8004994:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
   			if(sock_remained_size[sn] & 0x01)
   				sock_remained_size[sn] = sock_remained_size[sn] + 1 - 4;
   			else
   				sock_remained_size[sn] -= 4;
			#endif
   			if(sock_remained_size[sn] > 1514) 
 8004998:	7bfb      	ldrb	r3, [r7, #15]
 800499a:	4a14      	ldr	r2, [pc, #80]	; (80049ec <recvfrom+0x278>)
 800499c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80049a0:	f240 52ea 	movw	r2, #1514	; 0x5ea
 80049a4:	4293      	cmp	r3, r2
 80049a6:	d906      	bls.n	80049b6 <recvfrom+0x242>
   			{
   			   close(sn);
 80049a8:	7bfb      	ldrb	r3, [r7, #15]
 80049aa:	4618      	mov	r0, r3
 80049ac:	f7ff fab2 	bl	8003f14 <close>
   			   return SOCKFATAL_PACKLEN;
 80049b0:	f46f 737a 	mvn.w	r3, #1000	; 0x3e8
 80049b4:	e0c4      	b.n	8004b40 <recvfrom+0x3cc>
   			}
   			sock_pack_info[sn] = PACK_FIRST;
 80049b6:	7bfb      	ldrb	r3, [r7, #15]
 80049b8:	4a0e      	ldr	r2, [pc, #56]	; (80049f4 <recvfrom+0x280>)
 80049ba:	2180      	movs	r1, #128	; 0x80
 80049bc:	54d1      	strb	r1, [r2, r3]
   	   }
			if(len < sock_remained_size[sn]) pack_len = len;
 80049be:	7bfb      	ldrb	r3, [r7, #15]
 80049c0:	4a0a      	ldr	r2, [pc, #40]	; (80049ec <recvfrom+0x278>)
 80049c2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80049c6:	89ba      	ldrh	r2, [r7, #12]
 80049c8:	429a      	cmp	r2, r3
 80049ca:	d202      	bcs.n	80049d2 <recvfrom+0x25e>
 80049cc:	89bb      	ldrh	r3, [r7, #12]
 80049ce:	83fb      	strh	r3, [r7, #30]
 80049d0:	e004      	b.n	80049dc <recvfrom+0x268>
			else pack_len = sock_remained_size[sn];
 80049d2:	7bfb      	ldrb	r3, [r7, #15]
 80049d4:	4a05      	ldr	r2, [pc, #20]	; (80049ec <recvfrom+0x278>)
 80049d6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80049da:	83fb      	strh	r3, [r7, #30]
			wiz_recv_data(sn,buf,pack_len);
 80049dc:	8bfa      	ldrh	r2, [r7, #30]
 80049de:	7bfb      	ldrb	r3, [r7, #15]
 80049e0:	68b9      	ldr	r1, [r7, #8]
 80049e2:	4618      	mov	r0, r3
 80049e4:	f000 ff62 	bl	80058ac <wiz_recv_data>
		   break;
 80049e8:	e073      	b.n	8004ad2 <recvfrom+0x35e>
 80049ea:	bf00      	nop
 80049ec:	20000164 	.word	0x20000164
 80049f0:	20000160 	.word	0x20000160
 80049f4:	20000174 	.word	0x20000174
   //#if ( _WIZCHIP_ < 5200 )
		case Sn_MR_IPRAW:
		   if(sock_remained_size[sn] == 0)
 80049f8:	7bfb      	ldrb	r3, [r7, #15]
 80049fa:	4a53      	ldr	r2, [pc, #332]	; (8004b48 <recvfrom+0x3d4>)
 80049fc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d144      	bne.n	8004a8e <recvfrom+0x31a>
		   {
   			wiz_recv_data(sn, head, 6);
 8004a04:	f107 0114 	add.w	r1, r7, #20
 8004a08:	7bfb      	ldrb	r3, [r7, #15]
 8004a0a:	2206      	movs	r2, #6
 8004a0c:	4618      	mov	r0, r3
 8004a0e:	f000 ff4d 	bl	80058ac <wiz_recv_data>
   			setSn_CR(sn,Sn_CR_RECV);
 8004a12:	7bfb      	ldrb	r3, [r7, #15]
 8004a14:	009b      	lsls	r3, r3, #2
 8004a16:	3301      	adds	r3, #1
 8004a18:	00db      	lsls	r3, r3, #3
 8004a1a:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8004a1e:	2140      	movs	r1, #64	; 0x40
 8004a20:	4618      	mov	r0, r3
 8004a22:	f000 fd43 	bl	80054ac <WIZCHIP_WRITE>
   			while(getSn_CR(sn));
 8004a26:	bf00      	nop
 8004a28:	7bfb      	ldrb	r3, [r7, #15]
 8004a2a:	009b      	lsls	r3, r3, #2
 8004a2c:	3301      	adds	r3, #1
 8004a2e:	00db      	lsls	r3, r3, #3
 8004a30:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8004a34:	4618      	mov	r0, r3
 8004a36:	f000 fced 	bl	8005414 <WIZCHIP_READ>
 8004a3a:	4603      	mov	r3, r0
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d1f3      	bne.n	8004a28 <recvfrom+0x2b4>
   			addr[0] = head[0];
 8004a40:	7d3a      	ldrb	r2, [r7, #20]
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	701a      	strb	r2, [r3, #0]
   			addr[1] = head[1];
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	3301      	adds	r3, #1
 8004a4a:	7d7a      	ldrb	r2, [r7, #21]
 8004a4c:	701a      	strb	r2, [r3, #0]
   			addr[2] = head[2];
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	3302      	adds	r3, #2
 8004a52:	7dba      	ldrb	r2, [r7, #22]
 8004a54:	701a      	strb	r2, [r3, #0]
   			addr[3] = head[3];
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	3303      	adds	r3, #3
 8004a5a:	7dfa      	ldrb	r2, [r7, #23]
 8004a5c:	701a      	strb	r2, [r3, #0]
   			sock_remained_size[sn] = head[4];
 8004a5e:	7e3a      	ldrb	r2, [r7, #24]
 8004a60:	7bfb      	ldrb	r3, [r7, #15]
 8004a62:	b291      	uxth	r1, r2
 8004a64:	4a38      	ldr	r2, [pc, #224]	; (8004b48 <recvfrom+0x3d4>)
 8004a66:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
   			//M20150401 : For Typing Error
   			//sock_remaiend_size[sn] = (sock_remained_size[sn] << 8) + head[5];
   			sock_remained_size[sn] = (sock_remained_size[sn] << 8) + head[5];
 8004a6a:	7bfb      	ldrb	r3, [r7, #15]
 8004a6c:	4a36      	ldr	r2, [pc, #216]	; (8004b48 <recvfrom+0x3d4>)
 8004a6e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004a72:	021b      	lsls	r3, r3, #8
 8004a74:	b299      	uxth	r1, r3
 8004a76:	7e7b      	ldrb	r3, [r7, #25]
 8004a78:	b29a      	uxth	r2, r3
 8004a7a:	7bfb      	ldrb	r3, [r7, #15]
 8004a7c:	440a      	add	r2, r1
 8004a7e:	b291      	uxth	r1, r2
 8004a80:	4a31      	ldr	r2, [pc, #196]	; (8004b48 <recvfrom+0x3d4>)
 8004a82:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
   			sock_pack_info[sn] = PACK_FIRST;
 8004a86:	7bfb      	ldrb	r3, [r7, #15]
 8004a88:	4a30      	ldr	r2, [pc, #192]	; (8004b4c <recvfrom+0x3d8>)
 8004a8a:	2180      	movs	r1, #128	; 0x80
 8004a8c:	54d1      	strb	r1, [r2, r3]
         }
			//
			// Need to packet length check
			//
			if(len < sock_remained_size[sn]) pack_len = len;
 8004a8e:	7bfb      	ldrb	r3, [r7, #15]
 8004a90:	4a2d      	ldr	r2, [pc, #180]	; (8004b48 <recvfrom+0x3d4>)
 8004a92:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004a96:	89ba      	ldrh	r2, [r7, #12]
 8004a98:	429a      	cmp	r2, r3
 8004a9a:	d202      	bcs.n	8004aa2 <recvfrom+0x32e>
 8004a9c:	89bb      	ldrh	r3, [r7, #12]
 8004a9e:	83fb      	strh	r3, [r7, #30]
 8004aa0:	e004      	b.n	8004aac <recvfrom+0x338>
			else pack_len = sock_remained_size[sn];
 8004aa2:	7bfb      	ldrb	r3, [r7, #15]
 8004aa4:	4a28      	ldr	r2, [pc, #160]	; (8004b48 <recvfrom+0x3d4>)
 8004aa6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004aaa:	83fb      	strh	r3, [r7, #30]
   		wiz_recv_data(sn, buf, pack_len); // data copy.
 8004aac:	8bfa      	ldrh	r2, [r7, #30]
 8004aae:	7bfb      	ldrb	r3, [r7, #15]
 8004ab0:	68b9      	ldr	r1, [r7, #8]
 8004ab2:	4618      	mov	r0, r3
 8004ab4:	f000 fefa 	bl	80058ac <wiz_recv_data>
			break;
 8004ab8:	e00b      	b.n	8004ad2 <recvfrom+0x35e>
   //#endif
      default:
         wiz_recv_ignore(sn, pack_len); // data copy.
 8004aba:	8bfa      	ldrh	r2, [r7, #30]
 8004abc:	7bfb      	ldrb	r3, [r7, #15]
 8004abe:	4611      	mov	r1, r2
 8004ac0:	4618      	mov	r0, r3
 8004ac2:	f000 ff4f 	bl	8005964 <wiz_recv_ignore>
         sock_remained_size[sn] = pack_len;
 8004ac6:	7bfb      	ldrb	r3, [r7, #15]
 8004ac8:	491f      	ldr	r1, [pc, #124]	; (8004b48 <recvfrom+0x3d4>)
 8004aca:	8bfa      	ldrh	r2, [r7, #30]
 8004acc:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
         break;
 8004ad0:	bf00      	nop
   }
	setSn_CR(sn,Sn_CR_RECV);
 8004ad2:	7bfb      	ldrb	r3, [r7, #15]
 8004ad4:	009b      	lsls	r3, r3, #2
 8004ad6:	3301      	adds	r3, #1
 8004ad8:	00db      	lsls	r3, r3, #3
 8004ada:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8004ade:	2140      	movs	r1, #64	; 0x40
 8004ae0:	4618      	mov	r0, r3
 8004ae2:	f000 fce3 	bl	80054ac <WIZCHIP_WRITE>
	/* wait to process the command... */
	while(getSn_CR(sn)) ;
 8004ae6:	bf00      	nop
 8004ae8:	7bfb      	ldrb	r3, [r7, #15]
 8004aea:	009b      	lsls	r3, r3, #2
 8004aec:	3301      	adds	r3, #1
 8004aee:	00db      	lsls	r3, r3, #3
 8004af0:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8004af4:	4618      	mov	r0, r3
 8004af6:	f000 fc8d 	bl	8005414 <WIZCHIP_READ>
 8004afa:	4603      	mov	r3, r0
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d1f3      	bne.n	8004ae8 <recvfrom+0x374>
	sock_remained_size[sn] -= pack_len;
 8004b00:	7bfb      	ldrb	r3, [r7, #15]
 8004b02:	4a11      	ldr	r2, [pc, #68]	; (8004b48 <recvfrom+0x3d4>)
 8004b04:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8004b08:	7bfb      	ldrb	r3, [r7, #15]
 8004b0a:	8bfa      	ldrh	r2, [r7, #30]
 8004b0c:	1a8a      	subs	r2, r1, r2
 8004b0e:	b291      	uxth	r1, r2
 8004b10:	4a0d      	ldr	r2, [pc, #52]	; (8004b48 <recvfrom+0x3d4>)
 8004b12:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	//M20150601 : 
	//if(sock_remained_size[sn] != 0) sock_pack_info[sn] |= 0x01;
	if(sock_remained_size[sn] != 0)
 8004b16:	7bfb      	ldrb	r3, [r7, #15]
 8004b18:	4a0b      	ldr	r2, [pc, #44]	; (8004b48 <recvfrom+0x3d4>)
 8004b1a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d009      	beq.n	8004b36 <recvfrom+0x3c2>
	{
	   sock_pack_info[sn] |= PACK_REMAINED;
 8004b22:	7bfb      	ldrb	r3, [r7, #15]
 8004b24:	4a09      	ldr	r2, [pc, #36]	; (8004b4c <recvfrom+0x3d8>)
 8004b26:	5cd2      	ldrb	r2, [r2, r3]
 8004b28:	7bfb      	ldrb	r3, [r7, #15]
 8004b2a:	f042 0201 	orr.w	r2, r2, #1
 8004b2e:	b2d1      	uxtb	r1, r2
 8004b30:	4a06      	ldr	r2, [pc, #24]	; (8004b4c <recvfrom+0x3d8>)
 8004b32:	54d1      	strb	r1, [r2, r3]
 8004b34:	e003      	b.n	8004b3e <recvfrom+0x3ca>
   #if _WIZCHIP_ == 5300	   
	   if(pack_len & 0x01) sock_pack_info[sn] |= PACK_FIFOBYTE;
   #endif	      
	}
	else sock_pack_info[sn] = PACK_COMPLETED;
 8004b36:	7bfb      	ldrb	r3, [r7, #15]
 8004b38:	4a04      	ldr	r2, [pc, #16]	; (8004b4c <recvfrom+0x3d8>)
 8004b3a:	2100      	movs	r1, #0
 8004b3c:	54d1      	strb	r1, [r2, r3]
   pack_len = len;
#endif
   //
   //M20150409 : Explicit Type Casting
   //return pack_len;
   return (int32_t)pack_len;
 8004b3e:	8bfb      	ldrh	r3, [r7, #30]
}
 8004b40:	4618      	mov	r0, r3
 8004b42:	3720      	adds	r7, #32
 8004b44:	46bd      	mov	sp, r7
 8004b46:	bd80      	pop	{r7, pc}
 8004b48:	20000164 	.word	0x20000164
 8004b4c:	20000174 	.word	0x20000174

08004b50 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004b50:	b480      	push	{r7}
 8004b52:	b085      	sub	sp, #20
 8004b54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8004b56:	4b15      	ldr	r3, [pc, #84]	; (8004bac <HAL_MspInit+0x5c>)
 8004b58:	699b      	ldr	r3, [r3, #24]
 8004b5a:	4a14      	ldr	r2, [pc, #80]	; (8004bac <HAL_MspInit+0x5c>)
 8004b5c:	f043 0301 	orr.w	r3, r3, #1
 8004b60:	6193      	str	r3, [r2, #24]
 8004b62:	4b12      	ldr	r3, [pc, #72]	; (8004bac <HAL_MspInit+0x5c>)
 8004b64:	699b      	ldr	r3, [r3, #24]
 8004b66:	f003 0301 	and.w	r3, r3, #1
 8004b6a:	60bb      	str	r3, [r7, #8]
 8004b6c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004b6e:	4b0f      	ldr	r3, [pc, #60]	; (8004bac <HAL_MspInit+0x5c>)
 8004b70:	69db      	ldr	r3, [r3, #28]
 8004b72:	4a0e      	ldr	r2, [pc, #56]	; (8004bac <HAL_MspInit+0x5c>)
 8004b74:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004b78:	61d3      	str	r3, [r2, #28]
 8004b7a:	4b0c      	ldr	r3, [pc, #48]	; (8004bac <HAL_MspInit+0x5c>)
 8004b7c:	69db      	ldr	r3, [r3, #28]
 8004b7e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004b82:	607b      	str	r3, [r7, #4]
 8004b84:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 8004b86:	4b0a      	ldr	r3, [pc, #40]	; (8004bb0 <HAL_MspInit+0x60>)
 8004b88:	685b      	ldr	r3, [r3, #4]
 8004b8a:	60fb      	str	r3, [r7, #12]
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8004b92:	60fb      	str	r3, [r7, #12]
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004b9a:	60fb      	str	r3, [r7, #12]
 8004b9c:	4a04      	ldr	r2, [pc, #16]	; (8004bb0 <HAL_MspInit+0x60>)
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004ba2:	bf00      	nop
 8004ba4:	3714      	adds	r7, #20
 8004ba6:	46bd      	mov	sp, r7
 8004ba8:	bc80      	pop	{r7}
 8004baa:	4770      	bx	lr
 8004bac:	40021000 	.word	0x40021000
 8004bb0:	40010000 	.word	0x40010000

08004bb4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8004bb4:	b580      	push	{r7, lr}
 8004bb6:	b08a      	sub	sp, #40	; 0x28
 8004bb8:	af00      	add	r7, sp, #0
 8004bba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004bbc:	f107 0314 	add.w	r3, r7, #20
 8004bc0:	2200      	movs	r2, #0
 8004bc2:	601a      	str	r2, [r3, #0]
 8004bc4:	605a      	str	r2, [r3, #4]
 8004bc6:	609a      	str	r2, [r3, #8]
 8004bc8:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	4a1d      	ldr	r2, [pc, #116]	; (8004c44 <HAL_I2C_MspInit+0x90>)
 8004bd0:	4293      	cmp	r3, r2
 8004bd2:	d132      	bne.n	8004c3a <HAL_I2C_MspInit+0x86>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004bd4:	4b1c      	ldr	r3, [pc, #112]	; (8004c48 <HAL_I2C_MspInit+0x94>)
 8004bd6:	699b      	ldr	r3, [r3, #24]
 8004bd8:	4a1b      	ldr	r2, [pc, #108]	; (8004c48 <HAL_I2C_MspInit+0x94>)
 8004bda:	f043 0308 	orr.w	r3, r3, #8
 8004bde:	6193      	str	r3, [r2, #24]
 8004be0:	4b19      	ldr	r3, [pc, #100]	; (8004c48 <HAL_I2C_MspInit+0x94>)
 8004be2:	699b      	ldr	r3, [r3, #24]
 8004be4:	f003 0308 	and.w	r3, r3, #8
 8004be8:	613b      	str	r3, [r7, #16]
 8004bea:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = TMP117_SCL_Pin|TMP117_SDA_Pin;
 8004bec:	f44f 7340 	mov.w	r3, #768	; 0x300
 8004bf0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004bf2:	2312      	movs	r3, #18
 8004bf4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004bf6:	2303      	movs	r3, #3
 8004bf8:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004bfa:	f107 0314 	add.w	r3, r7, #20
 8004bfe:	4619      	mov	r1, r3
 8004c00:	4812      	ldr	r0, [pc, #72]	; (8004c4c <HAL_I2C_MspInit+0x98>)
 8004c02:	f001 fd03 	bl	800660c <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_I2C1_ENABLE();
 8004c06:	4b12      	ldr	r3, [pc, #72]	; (8004c50 <HAL_I2C_MspInit+0x9c>)
 8004c08:	685b      	ldr	r3, [r3, #4]
 8004c0a:	627b      	str	r3, [r7, #36]	; 0x24
 8004c0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c0e:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8004c12:	627b      	str	r3, [r7, #36]	; 0x24
 8004c14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c16:	f043 0302 	orr.w	r3, r3, #2
 8004c1a:	627b      	str	r3, [r7, #36]	; 0x24
 8004c1c:	4a0c      	ldr	r2, [pc, #48]	; (8004c50 <HAL_I2C_MspInit+0x9c>)
 8004c1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c20:	6053      	str	r3, [r2, #4]

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8004c22:	4b09      	ldr	r3, [pc, #36]	; (8004c48 <HAL_I2C_MspInit+0x94>)
 8004c24:	69db      	ldr	r3, [r3, #28]
 8004c26:	4a08      	ldr	r2, [pc, #32]	; (8004c48 <HAL_I2C_MspInit+0x94>)
 8004c28:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004c2c:	61d3      	str	r3, [r2, #28]
 8004c2e:	4b06      	ldr	r3, [pc, #24]	; (8004c48 <HAL_I2C_MspInit+0x94>)
 8004c30:	69db      	ldr	r3, [r3, #28]
 8004c32:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004c36:	60fb      	str	r3, [r7, #12]
 8004c38:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8004c3a:	bf00      	nop
 8004c3c:	3728      	adds	r7, #40	; 0x28
 8004c3e:	46bd      	mov	sp, r7
 8004c40:	bd80      	pop	{r7, pc}
 8004c42:	bf00      	nop
 8004c44:	40005400 	.word	0x40005400
 8004c48:	40021000 	.word	0x40021000
 8004c4c:	40010c00 	.word	0x40010c00
 8004c50:	40010000 	.word	0x40010000

08004c54 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8004c54:	b580      	push	{r7, lr}
 8004c56:	b088      	sub	sp, #32
 8004c58:	af00      	add	r7, sp, #0
 8004c5a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004c5c:	f107 0310 	add.w	r3, r7, #16
 8004c60:	2200      	movs	r2, #0
 8004c62:	601a      	str	r2, [r3, #0]
 8004c64:	605a      	str	r2, [r3, #4]
 8004c66:	609a      	str	r2, [r3, #8]
 8004c68:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI2)
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	4a1c      	ldr	r2, [pc, #112]	; (8004ce0 <HAL_SPI_MspInit+0x8c>)
 8004c70:	4293      	cmp	r3, r2
 8004c72:	d131      	bne.n	8004cd8 <HAL_SPI_MspInit+0x84>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8004c74:	4b1b      	ldr	r3, [pc, #108]	; (8004ce4 <HAL_SPI_MspInit+0x90>)
 8004c76:	69db      	ldr	r3, [r3, #28]
 8004c78:	4a1a      	ldr	r2, [pc, #104]	; (8004ce4 <HAL_SPI_MspInit+0x90>)
 8004c7a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004c7e:	61d3      	str	r3, [r2, #28]
 8004c80:	4b18      	ldr	r3, [pc, #96]	; (8004ce4 <HAL_SPI_MspInit+0x90>)
 8004c82:	69db      	ldr	r3, [r3, #28]
 8004c84:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004c88:	60fb      	str	r3, [r7, #12]
 8004c8a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004c8c:	4b15      	ldr	r3, [pc, #84]	; (8004ce4 <HAL_SPI_MspInit+0x90>)
 8004c8e:	699b      	ldr	r3, [r3, #24]
 8004c90:	4a14      	ldr	r2, [pc, #80]	; (8004ce4 <HAL_SPI_MspInit+0x90>)
 8004c92:	f043 0308 	orr.w	r3, r3, #8
 8004c96:	6193      	str	r3, [r2, #24]
 8004c98:	4b12      	ldr	r3, [pc, #72]	; (8004ce4 <HAL_SPI_MspInit+0x90>)
 8004c9a:	699b      	ldr	r3, [r3, #24]
 8004c9c:	f003 0308 	and.w	r3, r3, #8
 8004ca0:	60bb      	str	r3, [r7, #8]
 8004ca2:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 8004ca4:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 8004ca8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004caa:	2302      	movs	r3, #2
 8004cac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004cae:	2303      	movs	r3, #3
 8004cb0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004cb2:	f107 0310 	add.w	r3, r7, #16
 8004cb6:	4619      	mov	r1, r3
 8004cb8:	480b      	ldr	r0, [pc, #44]	; (8004ce8 <HAL_SPI_MspInit+0x94>)
 8004cba:	f001 fca7 	bl	800660c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8004cbe:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004cc2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004cc4:	2300      	movs	r3, #0
 8004cc6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004cc8:	2300      	movs	r3, #0
 8004cca:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004ccc:	f107 0310 	add.w	r3, r7, #16
 8004cd0:	4619      	mov	r1, r3
 8004cd2:	4805      	ldr	r0, [pc, #20]	; (8004ce8 <HAL_SPI_MspInit+0x94>)
 8004cd4:	f001 fc9a 	bl	800660c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8004cd8:	bf00      	nop
 8004cda:	3720      	adds	r7, #32
 8004cdc:	46bd      	mov	sp, r7
 8004cde:	bd80      	pop	{r7, pc}
 8004ce0:	40003800 	.word	0x40003800
 8004ce4:	40021000 	.word	0x40021000
 8004ce8:	40010c00 	.word	0x40010c00

08004cec <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8004cec:	b580      	push	{r7, lr}
 8004cee:	b08c      	sub	sp, #48	; 0x30
 8004cf0:	af00      	add	r7, sp, #0
 8004cf2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004cf4:	f107 0320 	add.w	r3, r7, #32
 8004cf8:	2200      	movs	r2, #0
 8004cfa:	601a      	str	r2, [r3, #0]
 8004cfc:	605a      	str	r2, [r3, #4]
 8004cfe:	609a      	str	r2, [r3, #8]
 8004d00:	60da      	str	r2, [r3, #12]
  if(htim_base->Instance==TIM1)
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	4a4c      	ldr	r2, [pc, #304]	; (8004e38 <HAL_TIM_Base_MspInit+0x14c>)
 8004d08:	4293      	cmp	r3, r2
 8004d0a:	d10c      	bne.n	8004d26 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8004d0c:	4b4b      	ldr	r3, [pc, #300]	; (8004e3c <HAL_TIM_Base_MspInit+0x150>)
 8004d0e:	699b      	ldr	r3, [r3, #24]
 8004d10:	4a4a      	ldr	r2, [pc, #296]	; (8004e3c <HAL_TIM_Base_MspInit+0x150>)
 8004d12:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8004d16:	6193      	str	r3, [r2, #24]
 8004d18:	4b48      	ldr	r3, [pc, #288]	; (8004e3c <HAL_TIM_Base_MspInit+0x150>)
 8004d1a:	699b      	ldr	r3, [r3, #24]
 8004d1c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004d20:	61fb      	str	r3, [r7, #28]
 8004d22:	69fb      	ldr	r3, [r7, #28]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8004d24:	e084      	b.n	8004e30 <HAL_TIM_Base_MspInit+0x144>
  else if(htim_base->Instance==TIM2)
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004d2e:	d14c      	bne.n	8004dca <HAL_TIM_Base_MspInit+0xde>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8004d30:	4b42      	ldr	r3, [pc, #264]	; (8004e3c <HAL_TIM_Base_MspInit+0x150>)
 8004d32:	69db      	ldr	r3, [r3, #28]
 8004d34:	4a41      	ldr	r2, [pc, #260]	; (8004e3c <HAL_TIM_Base_MspInit+0x150>)
 8004d36:	f043 0301 	orr.w	r3, r3, #1
 8004d3a:	61d3      	str	r3, [r2, #28]
 8004d3c:	4b3f      	ldr	r3, [pc, #252]	; (8004e3c <HAL_TIM_Base_MspInit+0x150>)
 8004d3e:	69db      	ldr	r3, [r3, #28]
 8004d40:	f003 0301 	and.w	r3, r3, #1
 8004d44:	61bb      	str	r3, [r7, #24]
 8004d46:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004d48:	4b3c      	ldr	r3, [pc, #240]	; (8004e3c <HAL_TIM_Base_MspInit+0x150>)
 8004d4a:	699b      	ldr	r3, [r3, #24]
 8004d4c:	4a3b      	ldr	r2, [pc, #236]	; (8004e3c <HAL_TIM_Base_MspInit+0x150>)
 8004d4e:	f043 0304 	orr.w	r3, r3, #4
 8004d52:	6193      	str	r3, [r2, #24]
 8004d54:	4b39      	ldr	r3, [pc, #228]	; (8004e3c <HAL_TIM_Base_MspInit+0x150>)
 8004d56:	699b      	ldr	r3, [r3, #24]
 8004d58:	f003 0304 	and.w	r3, r3, #4
 8004d5c:	617b      	str	r3, [r7, #20]
 8004d5e:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = senserInput_Pin;
 8004d60:	2301      	movs	r3, #1
 8004d62:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004d64:	2300      	movs	r3, #0
 8004d66:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004d68:	2300      	movs	r3, #0
 8004d6a:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(senserInput_GPIO_Port, &GPIO_InitStruct);
 8004d6c:	f107 0320 	add.w	r3, r7, #32
 8004d70:	4619      	mov	r1, r3
 8004d72:	4833      	ldr	r0, [pc, #204]	; (8004e40 <HAL_TIM_Base_MspInit+0x154>)
 8004d74:	f001 fc4a 	bl	800660c <HAL_GPIO_Init>
    hdma_tim2_ch1.Instance = DMA1_Channel5;
 8004d78:	4b32      	ldr	r3, [pc, #200]	; (8004e44 <HAL_TIM_Base_MspInit+0x158>)
 8004d7a:	4a33      	ldr	r2, [pc, #204]	; (8004e48 <HAL_TIM_Base_MspInit+0x15c>)
 8004d7c:	601a      	str	r2, [r3, #0]
    hdma_tim2_ch1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004d7e:	4b31      	ldr	r3, [pc, #196]	; (8004e44 <HAL_TIM_Base_MspInit+0x158>)
 8004d80:	2200      	movs	r2, #0
 8004d82:	605a      	str	r2, [r3, #4]
    hdma_tim2_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8004d84:	4b2f      	ldr	r3, [pc, #188]	; (8004e44 <HAL_TIM_Base_MspInit+0x158>)
 8004d86:	2200      	movs	r2, #0
 8004d88:	609a      	str	r2, [r3, #8]
    hdma_tim2_ch1.Init.MemInc = DMA_MINC_DISABLE;
 8004d8a:	4b2e      	ldr	r3, [pc, #184]	; (8004e44 <HAL_TIM_Base_MspInit+0x158>)
 8004d8c:	2200      	movs	r2, #0
 8004d8e:	60da      	str	r2, [r3, #12]
    hdma_tim2_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8004d90:	4b2c      	ldr	r3, [pc, #176]	; (8004e44 <HAL_TIM_Base_MspInit+0x158>)
 8004d92:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004d96:	611a      	str	r2, [r3, #16]
    hdma_tim2_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8004d98:	4b2a      	ldr	r3, [pc, #168]	; (8004e44 <HAL_TIM_Base_MspInit+0x158>)
 8004d9a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004d9e:	615a      	str	r2, [r3, #20]
    hdma_tim2_ch1.Init.Mode = DMA_CIRCULAR;
 8004da0:	4b28      	ldr	r3, [pc, #160]	; (8004e44 <HAL_TIM_Base_MspInit+0x158>)
 8004da2:	2220      	movs	r2, #32
 8004da4:	619a      	str	r2, [r3, #24]
    hdma_tim2_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8004da6:	4b27      	ldr	r3, [pc, #156]	; (8004e44 <HAL_TIM_Base_MspInit+0x158>)
 8004da8:	2200      	movs	r2, #0
 8004daa:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_tim2_ch1) != HAL_OK)
 8004dac:	4825      	ldr	r0, [pc, #148]	; (8004e44 <HAL_TIM_Base_MspInit+0x158>)
 8004dae:	f001 f9c9 	bl	8006144 <HAL_DMA_Init>
 8004db2:	4603      	mov	r3, r0
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d001      	beq.n	8004dbc <HAL_TIM_Base_MspInit+0xd0>
      Error_Handler();
 8004db8:	f7fe ff90 	bl	8003cdc <Error_Handler>
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC1],hdma_tim2_ch1);
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	4a21      	ldr	r2, [pc, #132]	; (8004e44 <HAL_TIM_Base_MspInit+0x158>)
 8004dc0:	625a      	str	r2, [r3, #36]	; 0x24
 8004dc2:	4a20      	ldr	r2, [pc, #128]	; (8004e44 <HAL_TIM_Base_MspInit+0x158>)
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	6253      	str	r3, [r2, #36]	; 0x24
}
 8004dc8:	e032      	b.n	8004e30 <HAL_TIM_Base_MspInit+0x144>
  else if(htim_base->Instance==TIM3)
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	4a1f      	ldr	r2, [pc, #124]	; (8004e4c <HAL_TIM_Base_MspInit+0x160>)
 8004dd0:	4293      	cmp	r3, r2
 8004dd2:	d114      	bne.n	8004dfe <HAL_TIM_Base_MspInit+0x112>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8004dd4:	4b19      	ldr	r3, [pc, #100]	; (8004e3c <HAL_TIM_Base_MspInit+0x150>)
 8004dd6:	69db      	ldr	r3, [r3, #28]
 8004dd8:	4a18      	ldr	r2, [pc, #96]	; (8004e3c <HAL_TIM_Base_MspInit+0x150>)
 8004dda:	f043 0302 	orr.w	r3, r3, #2
 8004dde:	61d3      	str	r3, [r2, #28]
 8004de0:	4b16      	ldr	r3, [pc, #88]	; (8004e3c <HAL_TIM_Base_MspInit+0x150>)
 8004de2:	69db      	ldr	r3, [r3, #28]
 8004de4:	f003 0302 	and.w	r3, r3, #2
 8004de8:	613b      	str	r3, [r7, #16]
 8004dea:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8004dec:	2200      	movs	r2, #0
 8004dee:	2100      	movs	r1, #0
 8004df0:	201d      	movs	r0, #29
 8004df2:	f001 f970 	bl	80060d6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8004df6:	201d      	movs	r0, #29
 8004df8:	f001 f989 	bl	800610e <HAL_NVIC_EnableIRQ>
}
 8004dfc:	e018      	b.n	8004e30 <HAL_TIM_Base_MspInit+0x144>
  else if(htim_base->Instance==TIM4)
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	4a13      	ldr	r2, [pc, #76]	; (8004e50 <HAL_TIM_Base_MspInit+0x164>)
 8004e04:	4293      	cmp	r3, r2
 8004e06:	d113      	bne.n	8004e30 <HAL_TIM_Base_MspInit+0x144>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8004e08:	4b0c      	ldr	r3, [pc, #48]	; (8004e3c <HAL_TIM_Base_MspInit+0x150>)
 8004e0a:	69db      	ldr	r3, [r3, #28]
 8004e0c:	4a0b      	ldr	r2, [pc, #44]	; (8004e3c <HAL_TIM_Base_MspInit+0x150>)
 8004e0e:	f043 0304 	orr.w	r3, r3, #4
 8004e12:	61d3      	str	r3, [r2, #28]
 8004e14:	4b09      	ldr	r3, [pc, #36]	; (8004e3c <HAL_TIM_Base_MspInit+0x150>)
 8004e16:	69db      	ldr	r3, [r3, #28]
 8004e18:	f003 0304 	and.w	r3, r3, #4
 8004e1c:	60fb      	str	r3, [r7, #12]
 8004e1e:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8004e20:	2200      	movs	r2, #0
 8004e22:	2100      	movs	r1, #0
 8004e24:	201e      	movs	r0, #30
 8004e26:	f001 f956 	bl	80060d6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8004e2a:	201e      	movs	r0, #30
 8004e2c:	f001 f96f 	bl	800610e <HAL_NVIC_EnableIRQ>
}
 8004e30:	bf00      	nop
 8004e32:	3730      	adds	r7, #48	; 0x30
 8004e34:	46bd      	mov	sp, r7
 8004e36:	bd80      	pop	{r7, pc}
 8004e38:	40012c00 	.word	0x40012c00
 8004e3c:	40021000 	.word	0x40021000
 8004e40:	40010800 	.word	0x40010800
 8004e44:	200001d0 	.word	0x200001d0
 8004e48:	40020058 	.word	0x40020058
 8004e4c:	40000400 	.word	0x40000400
 8004e50:	40000800 	.word	0x40000800

08004e54 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8004e54:	b580      	push	{r7, lr}
 8004e56:	b088      	sub	sp, #32
 8004e58:	af00      	add	r7, sp, #0
 8004e5a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004e5c:	f107 0310 	add.w	r3, r7, #16
 8004e60:	2200      	movs	r2, #0
 8004e62:	601a      	str	r2, [r3, #0]
 8004e64:	605a      	str	r2, [r3, #4]
 8004e66:	609a      	str	r2, [r3, #8]
 8004e68:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM1)
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	4a10      	ldr	r2, [pc, #64]	; (8004eb0 <HAL_TIM_MspPostInit+0x5c>)
 8004e70:	4293      	cmp	r3, r2
 8004e72:	d118      	bne.n	8004ea6 <HAL_TIM_MspPostInit+0x52>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004e74:	4b0f      	ldr	r3, [pc, #60]	; (8004eb4 <HAL_TIM_MspPostInit+0x60>)
 8004e76:	699b      	ldr	r3, [r3, #24]
 8004e78:	4a0e      	ldr	r2, [pc, #56]	; (8004eb4 <HAL_TIM_MspPostInit+0x60>)
 8004e7a:	f043 0304 	orr.w	r3, r3, #4
 8004e7e:	6193      	str	r3, [r2, #24]
 8004e80:	4b0c      	ldr	r3, [pc, #48]	; (8004eb4 <HAL_TIM_MspPostInit+0x60>)
 8004e82:	699b      	ldr	r3, [r3, #24]
 8004e84:	f003 0304 	and.w	r3, r3, #4
 8004e88:	60fb      	str	r3, [r7, #12]
 8004e8a:	68fb      	ldr	r3, [r7, #12]
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    PA11     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = Z1_Pin|Z2_Pin|Z3_Pin|Z4_Pin;
 8004e8c:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8004e90:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004e92:	2302      	movs	r3, #2
 8004e94:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004e96:	2303      	movs	r3, #3
 8004e98:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004e9a:	f107 0310 	add.w	r3, r7, #16
 8004e9e:	4619      	mov	r1, r3
 8004ea0:	4805      	ldr	r0, [pc, #20]	; (8004eb8 <HAL_TIM_MspPostInit+0x64>)
 8004ea2:	f001 fbb3 	bl	800660c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8004ea6:	bf00      	nop
 8004ea8:	3720      	adds	r7, #32
 8004eaa:	46bd      	mov	sp, r7
 8004eac:	bd80      	pop	{r7, pc}
 8004eae:	bf00      	nop
 8004eb0:	40012c00 	.word	0x40012c00
 8004eb4:	40021000 	.word	0x40021000
 8004eb8:	40010800 	.word	0x40010800

08004ebc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8004ebc:	b580      	push	{r7, lr}
 8004ebe:	b08a      	sub	sp, #40	; 0x28
 8004ec0:	af00      	add	r7, sp, #0
 8004ec2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004ec4:	f107 0314 	add.w	r3, r7, #20
 8004ec8:	2200      	movs	r2, #0
 8004eca:	601a      	str	r2, [r3, #0]
 8004ecc:	605a      	str	r2, [r3, #4]
 8004ece:	609a      	str	r2, [r3, #8]
 8004ed0:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	4a22      	ldr	r2, [pc, #136]	; (8004f60 <HAL_UART_MspInit+0xa4>)
 8004ed8:	4293      	cmp	r3, r2
 8004eda:	d13d      	bne.n	8004f58 <HAL_UART_MspInit+0x9c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8004edc:	4b21      	ldr	r3, [pc, #132]	; (8004f64 <HAL_UART_MspInit+0xa8>)
 8004ede:	699b      	ldr	r3, [r3, #24]
 8004ee0:	4a20      	ldr	r2, [pc, #128]	; (8004f64 <HAL_UART_MspInit+0xa8>)
 8004ee2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004ee6:	6193      	str	r3, [r2, #24]
 8004ee8:	4b1e      	ldr	r3, [pc, #120]	; (8004f64 <HAL_UART_MspInit+0xa8>)
 8004eea:	699b      	ldr	r3, [r3, #24]
 8004eec:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004ef0:	613b      	str	r3, [r7, #16]
 8004ef2:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004ef4:	4b1b      	ldr	r3, [pc, #108]	; (8004f64 <HAL_UART_MspInit+0xa8>)
 8004ef6:	699b      	ldr	r3, [r3, #24]
 8004ef8:	4a1a      	ldr	r2, [pc, #104]	; (8004f64 <HAL_UART_MspInit+0xa8>)
 8004efa:	f043 0308 	orr.w	r3, r3, #8
 8004efe:	6193      	str	r3, [r2, #24]
 8004f00:	4b18      	ldr	r3, [pc, #96]	; (8004f64 <HAL_UART_MspInit+0xa8>)
 8004f02:	699b      	ldr	r3, [r3, #24]
 8004f04:	f003 0308 	and.w	r3, r3, #8
 8004f08:	60fb      	str	r3, [r7, #12]
 8004f0a:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8004f0c:	2340      	movs	r3, #64	; 0x40
 8004f0e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004f10:	2302      	movs	r3, #2
 8004f12:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004f14:	2303      	movs	r3, #3
 8004f16:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004f18:	f107 0314 	add.w	r3, r7, #20
 8004f1c:	4619      	mov	r1, r3
 8004f1e:	4812      	ldr	r0, [pc, #72]	; (8004f68 <HAL_UART_MspInit+0xac>)
 8004f20:	f001 fb74 	bl	800660c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8004f24:	2380      	movs	r3, #128	; 0x80
 8004f26:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004f28:	2300      	movs	r3, #0
 8004f2a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004f2c:	2300      	movs	r3, #0
 8004f2e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004f30:	f107 0314 	add.w	r3, r7, #20
 8004f34:	4619      	mov	r1, r3
 8004f36:	480c      	ldr	r0, [pc, #48]	; (8004f68 <HAL_UART_MspInit+0xac>)
 8004f38:	f001 fb68 	bl	800660c <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_USART1_ENABLE();
 8004f3c:	4b0b      	ldr	r3, [pc, #44]	; (8004f6c <HAL_UART_MspInit+0xb0>)
 8004f3e:	685b      	ldr	r3, [r3, #4]
 8004f40:	627b      	str	r3, [r7, #36]	; 0x24
 8004f42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f44:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8004f48:	627b      	str	r3, [r7, #36]	; 0x24
 8004f4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f4c:	f043 0304 	orr.w	r3, r3, #4
 8004f50:	627b      	str	r3, [r7, #36]	; 0x24
 8004f52:	4a06      	ldr	r2, [pc, #24]	; (8004f6c <HAL_UART_MspInit+0xb0>)
 8004f54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f56:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8004f58:	bf00      	nop
 8004f5a:	3728      	adds	r7, #40	; 0x28
 8004f5c:	46bd      	mov	sp, r7
 8004f5e:	bd80      	pop	{r7, pc}
 8004f60:	40013800 	.word	0x40013800
 8004f64:	40021000 	.word	0x40021000
 8004f68:	40010c00 	.word	0x40010c00
 8004f6c:	40010000 	.word	0x40010000

08004f70 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004f70:	b480      	push	{r7}
 8004f72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8004f74:	e7fe      	b.n	8004f74 <NMI_Handler+0x4>

08004f76 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004f76:	b480      	push	{r7}
 8004f78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004f7a:	e7fe      	b.n	8004f7a <HardFault_Handler+0x4>

08004f7c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004f7c:	b480      	push	{r7}
 8004f7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004f80:	e7fe      	b.n	8004f80 <MemManage_Handler+0x4>

08004f82 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004f82:	b480      	push	{r7}
 8004f84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004f86:	e7fe      	b.n	8004f86 <BusFault_Handler+0x4>

08004f88 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004f88:	b480      	push	{r7}
 8004f8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004f8c:	e7fe      	b.n	8004f8c <UsageFault_Handler+0x4>

08004f8e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004f8e:	b480      	push	{r7}
 8004f90:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004f92:	bf00      	nop
 8004f94:	46bd      	mov	sp, r7
 8004f96:	bc80      	pop	{r7}
 8004f98:	4770      	bx	lr

08004f9a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004f9a:	b480      	push	{r7}
 8004f9c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004f9e:	bf00      	nop
 8004fa0:	46bd      	mov	sp, r7
 8004fa2:	bc80      	pop	{r7}
 8004fa4:	4770      	bx	lr

08004fa6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004fa6:	b480      	push	{r7}
 8004fa8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004faa:	bf00      	nop
 8004fac:	46bd      	mov	sp, r7
 8004fae:	bc80      	pop	{r7}
 8004fb0:	4770      	bx	lr

08004fb2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004fb2:	b580      	push	{r7, lr}
 8004fb4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004fb6:	f000 ff77 	bl	8005ea8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004fba:	bf00      	nop
 8004fbc:	bd80      	pop	{r7, pc}
	...

08004fc0 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8004fc0:	b580      	push	{r7, lr}
 8004fc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */
	if (runFlag) {
 8004fc4:	4b34      	ldr	r3, [pc, #208]	; (8005098 <DMA1_Channel5_IRQHandler+0xd8>)
 8004fc6:	781b      	ldrb	r3, [r3, #0]
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d05f      	beq.n	800508c <DMA1_Channel5_IRQHandler+0xcc>
			HAL_TIM_IC_Stop_DMA(&htim2, TIM_CHANNEL_1);
 8004fcc:	2100      	movs	r1, #0
 8004fce:	4833      	ldr	r0, [pc, #204]	; (800509c <DMA1_Channel5_IRQHandler+0xdc>)
 8004fd0:	f003 fb64 	bl	800869c <HAL_TIM_IC_Stop_DMA>
			/* Turn off all multiplexer */
			GPIOB->ODR &= ~((1 << Z1Receive) | (1 << Z2Receive) | (1 << Z3Receive) | (1 << Z4Receive));
 8004fd4:	4b32      	ldr	r3, [pc, #200]	; (80050a0 <DMA1_Channel5_IRQHandler+0xe0>)
 8004fd6:	68db      	ldr	r3, [r3, #12]
 8004fd8:	4a31      	ldr	r2, [pc, #196]	; (80050a0 <DMA1_Channel5_IRQHandler+0xe0>)
 8004fda:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8004fde:	f023 0306 	bic.w	r3, r3, #6
 8004fe2:	60d3      	str	r3, [r2, #12]
			switch (currentMode) {
 8004fe4:	4b2f      	ldr	r3, [pc, #188]	; (80050a4 <DMA1_Channel5_IRQHandler+0xe4>)
 8004fe6:	881b      	ldrh	r3, [r3, #0]
 8004fe8:	3b01      	subs	r3, #1
 8004fea:	2b07      	cmp	r3, #7
 8004fec:	d842      	bhi.n	8005074 <DMA1_Channel5_IRQHandler+0xb4>
 8004fee:	a201      	add	r2, pc, #4	; (adr r2, 8004ff4 <DMA1_Channel5_IRQHandler+0x34>)
 8004ff0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ff4:	08005015 	.word	0x08005015
 8004ff8:	08005021 	.word	0x08005021
 8004ffc:	0800502d 	.word	0x0800502d
 8005000:	08005039 	.word	0x08005039
 8005004:	08005045 	.word	0x08005045
 8005008:	08005051 	.word	0x08005051
 800500c:	0800505d 	.word	0x0800505d
 8005010:	08005069 	.word	0x08005069
				case 1: { // Z1 > Z2
					Z12 = fastCounter & 0x0FFFF;
 8005014:	4b24      	ldr	r3, [pc, #144]	; (80050a8 <DMA1_Channel5_IRQHandler+0xe8>)
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	b29a      	uxth	r2, r3
 800501a:	4b24      	ldr	r3, [pc, #144]	; (80050ac <DMA1_Channel5_IRQHandler+0xec>)
 800501c:	801a      	strh	r2, [r3, #0]
					break;
 800501e:	e029      	b.n	8005074 <DMA1_Channel5_IRQHandler+0xb4>
				}
				case 2: { // Z2 > Z1
					Z21 = fastCounter & 0x0FFFF;
 8005020:	4b21      	ldr	r3, [pc, #132]	; (80050a8 <DMA1_Channel5_IRQHandler+0xe8>)
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	b29a      	uxth	r2, r3
 8005026:	4b22      	ldr	r3, [pc, #136]	; (80050b0 <DMA1_Channel5_IRQHandler+0xf0>)
 8005028:	801a      	strh	r2, [r3, #0]
					break;
 800502a:	e023      	b.n	8005074 <DMA1_Channel5_IRQHandler+0xb4>
				}
				case 3: { // Z2 > Z3
					Z23 = fastCounter & 0x0FFFF;
 800502c:	4b1e      	ldr	r3, [pc, #120]	; (80050a8 <DMA1_Channel5_IRQHandler+0xe8>)
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	b29a      	uxth	r2, r3
 8005032:	4b20      	ldr	r3, [pc, #128]	; (80050b4 <DMA1_Channel5_IRQHandler+0xf4>)
 8005034:	801a      	strh	r2, [r3, #0]
					break;
 8005036:	e01d      	b.n	8005074 <DMA1_Channel5_IRQHandler+0xb4>
				}
				case 4: { // Z3 > Z2
					Z32 = fastCounter & 0x0FFFF;
 8005038:	4b1b      	ldr	r3, [pc, #108]	; (80050a8 <DMA1_Channel5_IRQHandler+0xe8>)
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	b29a      	uxth	r2, r3
 800503e:	4b1e      	ldr	r3, [pc, #120]	; (80050b8 <DMA1_Channel5_IRQHandler+0xf8>)
 8005040:	801a      	strh	r2, [r3, #0]
					break;
 8005042:	e017      	b.n	8005074 <DMA1_Channel5_IRQHandler+0xb4>
				}
				case 5: { // Z3 > Z4
					Z34 = fastCounter & 0x0FFFF;
 8005044:	4b18      	ldr	r3, [pc, #96]	; (80050a8 <DMA1_Channel5_IRQHandler+0xe8>)
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	b29a      	uxth	r2, r3
 800504a:	4b1c      	ldr	r3, [pc, #112]	; (80050bc <DMA1_Channel5_IRQHandler+0xfc>)
 800504c:	801a      	strh	r2, [r3, #0]
					break;
 800504e:	e011      	b.n	8005074 <DMA1_Channel5_IRQHandler+0xb4>
				}
				case 6: { // Z4 > Z3
					Z43 = fastCounter & 0x0FFFF;
 8005050:	4b15      	ldr	r3, [pc, #84]	; (80050a8 <DMA1_Channel5_IRQHandler+0xe8>)
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	b29a      	uxth	r2, r3
 8005056:	4b1a      	ldr	r3, [pc, #104]	; (80050c0 <DMA1_Channel5_IRQHandler+0x100>)
 8005058:	801a      	strh	r2, [r3, #0]
					break;
 800505a:	e00b      	b.n	8005074 <DMA1_Channel5_IRQHandler+0xb4>
				}
				case 7: { // Z4 > Z1
					Z41 = fastCounter & 0x0FFFF;
 800505c:	4b12      	ldr	r3, [pc, #72]	; (80050a8 <DMA1_Channel5_IRQHandler+0xe8>)
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	b29a      	uxth	r2, r3
 8005062:	4b18      	ldr	r3, [pc, #96]	; (80050c4 <DMA1_Channel5_IRQHandler+0x104>)
 8005064:	801a      	strh	r2, [r3, #0]
					break;
 8005066:	e005      	b.n	8005074 <DMA1_Channel5_IRQHandler+0xb4>
				}
				case 8: { // Z1 > Z4
					Z14 = fastCounter & 0x0FFFF;
 8005068:	4b0f      	ldr	r3, [pc, #60]	; (80050a8 <DMA1_Channel5_IRQHandler+0xe8>)
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	b29a      	uxth	r2, r3
 800506e:	4b16      	ldr	r3, [pc, #88]	; (80050c8 <DMA1_Channel5_IRQHandler+0x108>)
 8005070:	801a      	strh	r2, [r3, #0]
					break;
 8005072:	bf00      	nop
				}
			}
			HAL_GPIO_WritePin(GPIOA, LED_Pin, GPIO_PIN_SET);
 8005074:	2201      	movs	r2, #1
 8005076:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800507a:	4814      	ldr	r0, [pc, #80]	; (80050cc <DMA1_Channel5_IRQHandler+0x10c>)
 800507c:	f001 fc4a 	bl	8006914 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, LED_Pin, GPIO_PIN_RESET);
 8005080:	2200      	movs	r2, #0
 8005082:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8005086:	4811      	ldr	r0, [pc, #68]	; (80050cc <DMA1_Channel5_IRQHandler+0x10c>)
 8005088:	f001 fc44 	bl	8006914 <HAL_GPIO_WritePin>
		}

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim2_ch1);
 800508c:	4810      	ldr	r0, [pc, #64]	; (80050d0 <DMA1_Channel5_IRQHandler+0x110>)
 800508e:	f001 f989 	bl	80063a4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 8005092:	bf00      	nop
 8005094:	bd80      	pop	{r7, pc}
 8005096:	bf00      	nop
 8005098:	200003cc 	.word	0x200003cc
 800509c:	2000042c 	.word	0x2000042c
 80050a0:	40010c00 	.word	0x40010c00
 80050a4:	20000426 	.word	0x20000426
 80050a8:	20000378 	.word	0x20000378
 80050ac:	200003ce 	.word	0x200003ce
 80050b0:	20000318 	.word	0x20000318
 80050b4:	20000428 	.word	0x20000428
 80050b8:	20000424 	.word	0x20000424
 80050bc:	20000328 	.word	0x20000328
 80050c0:	200003d8 	.word	0x200003d8
 80050c4:	2000031a 	.word	0x2000031a
 80050c8:	200002b4 	.word	0x200002b4
 80050cc:	40010800 	.word	0x40010800
 80050d0:	200001d0 	.word	0x200001d0

080050d4 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80050d4:	b580      	push	{r7, lr}
 80050d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */
	//HAL_GPIO_WritePin(GPIOA, LED_Pin, GPIO_PIN_SET);
	//HAL_GPIO_WritePin(GPIOA, LED_Pin, GPIO_PIN_RESET);
//	if (startCount-- == 0) {
		runFlag = TRUE;
 80050d8:	4b09      	ldr	r3, [pc, #36]	; (8005100 <TIM3_IRQHandler+0x2c>)
 80050da:	2201      	movs	r2, #1
 80050dc:	701a      	strb	r2, [r3, #0]
		HAL_GPIO_WritePin(GPIOA, LED_Pin, GPIO_PIN_SET);
 80050de:	2201      	movs	r2, #1
 80050e0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80050e4:	4807      	ldr	r0, [pc, #28]	; (8005104 <TIM3_IRQHandler+0x30>)
 80050e6:	f001 fc15 	bl	8006914 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, LED_Pin, GPIO_PIN_RESET);
 80050ea:	2200      	movs	r2, #0
 80050ec:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80050f0:	4804      	ldr	r0, [pc, #16]	; (8005104 <TIM3_IRQHandler+0x30>)
 80050f2:	f001 fc0f 	bl	8006914 <HAL_GPIO_WritePin>
//	}

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80050f6:	4804      	ldr	r0, [pc, #16]	; (8005108 <TIM3_IRQHandler+0x34>)
 80050f8:	f003 fbe3 	bl	80088c2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80050fc:	bf00      	nop
 80050fe:	bd80      	pop	{r7, pc}
 8005100:	200003cc 	.word	0x200003cc
 8005104:	40010800 	.word	0x40010800
 8005108:	20000330 	.word	0x20000330

0800510c <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 800510c:	b580      	push	{r7, lr}
 800510e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

	  /* Turn off all multiplexer */
	  GPIOB->ODR &= ~((1 << Z1Receive) | (1 << Z2Receive) | (1 << Z3Receive) | (1 << Z4Receive));
 8005110:	4b8f      	ldr	r3, [pc, #572]	; (8005350 <TIM4_IRQHandler+0x244>)
 8005112:	68db      	ldr	r3, [r3, #12]
 8005114:	4a8e      	ldr	r2, [pc, #568]	; (8005350 <TIM4_IRQHandler+0x244>)
 8005116:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800511a:	f023 0306 	bic.w	r3, r3, #6
 800511e:	60d3      	str	r3, [r2, #12]

	  HAL_TIM_IC_Stop_DMA(&htim2, TIM_CHANNEL_1);	// If not stop in DMA callback.
 8005120:	2100      	movs	r1, #0
 8005122:	488c      	ldr	r0, [pc, #560]	; (8005354 <TIM4_IRQHandler+0x248>)
 8005124:	f003 faba 	bl	800869c <HAL_TIM_IC_Stop_DMA>
	  /* Restart timers */
	  HAL_TIM_OC_Stop(&htim1, TIM_CHANNEL_1);
 8005128:	2100      	movs	r1, #0
 800512a:	488b      	ldr	r0, [pc, #556]	; (8005358 <TIM4_IRQHandler+0x24c>)
 800512c:	f003 f870 	bl	8008210 <HAL_TIM_OC_Stop>
	  HAL_TIM_OC_Stop(&htim1, TIM_CHANNEL_2);
 8005130:	2104      	movs	r1, #4
 8005132:	4889      	ldr	r0, [pc, #548]	; (8005358 <TIM4_IRQHandler+0x24c>)
 8005134:	f003 f86c 	bl	8008210 <HAL_TIM_OC_Stop>
	  HAL_TIM_OC_Stop(&htim1, TIM_CHANNEL_3);
 8005138:	2108      	movs	r1, #8
 800513a:	4887      	ldr	r0, [pc, #540]	; (8005358 <TIM4_IRQHandler+0x24c>)
 800513c:	f003 f868 	bl	8008210 <HAL_TIM_OC_Stop>
	  HAL_TIM_OC_Stop(&htim1, TIM_CHANNEL_4);
 8005140:	210c      	movs	r1, #12
 8005142:	4885      	ldr	r0, [pc, #532]	; (8005358 <TIM4_IRQHandler+0x24c>)
 8005144:	f003 f864 	bl	8008210 <HAL_TIM_OC_Stop>

	  /* Set all timer channels for input mode */
	  GPIOA->CRH = (GPIOA->CRH & ~(GPIO_CRH_CNF8 | GPIO_CRH_MODE8
 8005148:	4b84      	ldr	r3, [pc, #528]	; (800535c <TIM4_IRQHandler+0x250>)
 800514a:	685b      	ldr	r3, [r3, #4]
 800514c:	0c1b      	lsrs	r3, r3, #16
 800514e:	041b      	lsls	r3, r3, #16
 8005150:	4a82      	ldr	r2, [pc, #520]	; (800535c <TIM4_IRQHandler+0x250>)
			  	  | GPIO_CRH_CNF9 | GPIO_CRH_MODE9
				  | GPIO_CRH_CNF10 | GPIO_CRH_MODE10
				  | GPIO_CRH_CNF11 | GPIO_CRH_MODE11))
				  | (GPIO_CRH_CNF8_0 | GPIO_CRH_CNF9_0 | GPIO_CRH_CNF10_0 | GPIO_CRH_CNF11_0);
 8005152:	f443 4388 	orr.w	r3, r3, #17408	; 0x4400
 8005156:	f043 0344 	orr.w	r3, r3, #68	; 0x44
	  GPIOA->CRH = (GPIOA->CRH & ~(GPIO_CRH_CNF8 | GPIO_CRH_MODE8
 800515a:	6053      	str	r3, [r2, #4]

	  switch (currentMode++) {
 800515c:	4b80      	ldr	r3, [pc, #512]	; (8005360 <TIM4_IRQHandler+0x254>)
 800515e:	881b      	ldrh	r3, [r3, #0]
 8005160:	1c5a      	adds	r2, r3, #1
 8005162:	b291      	uxth	r1, r2
 8005164:	4a7e      	ldr	r2, [pc, #504]	; (8005360 <TIM4_IRQHandler+0x254>)
 8005166:	8011      	strh	r1, [r2, #0]
 8005168:	2b08      	cmp	r3, #8
 800516a:	f200 80e2 	bhi.w	8005332 <TIM4_IRQHandler+0x226>
 800516e:	a201      	add	r2, pc, #4	; (adr r2, 8005174 <TIM4_IRQHandler+0x68>)
 8005170:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005174:	08005199 	.word	0x08005199
 8005178:	080051bf 	.word	0x080051bf
 800517c:	080051e5 	.word	0x080051e5
 8005180:	0800520b 	.word	0x0800520b
 8005184:	08005231 	.word	0x08005231
 8005188:	08005257 	.word	0x08005257
 800518c:	0800527d 	.word	0x0800527d
 8005190:	080052a3 	.word	0x080052a3
 8005194:	080052c9 	.word	0x080052c9
		  case 0: { // Z1 (transmit) > Z2 (receive)
			  setZ1transmit; // Set Z1 port to output mode
 8005198:	4b70      	ldr	r3, [pc, #448]	; (800535c <TIM4_IRQHandler+0x250>)
 800519a:	685b      	ldr	r3, [r3, #4]
 800519c:	f023 030e 	bic.w	r3, r3, #14
 80051a0:	4a6e      	ldr	r2, [pc, #440]	; (800535c <TIM4_IRQHandler+0x250>)
 80051a2:	f043 030a 	orr.w	r3, r3, #10
 80051a6:	6053      	str	r3, [r2, #4]
			  GPIOB->ODR |= (1 << Z2Receive); 				// Turn on multiplexer for input Z2 channel.
 80051a8:	4b69      	ldr	r3, [pc, #420]	; (8005350 <TIM4_IRQHandler+0x244>)
 80051aa:	68db      	ldr	r3, [r3, #12]
 80051ac:	4a68      	ldr	r2, [pc, #416]	; (8005350 <TIM4_IRQHandler+0x244>)
 80051ae:	f043 0304 	orr.w	r3, r3, #4
 80051b2:	60d3      	str	r3, [r2, #12]
			  HAL_TIM_OC_Start(&htim1, TIM_CHANNEL_1);
 80051b4:	2100      	movs	r1, #0
 80051b6:	4868      	ldr	r0, [pc, #416]	; (8005358 <TIM4_IRQHandler+0x24c>)
 80051b8:	f002 ff88 	bl	80080cc <HAL_TIM_OC_Start>
			  break;
 80051bc:	e0b9      	b.n	8005332 <TIM4_IRQHandler+0x226>
		  }
		  case 1: { // Z2 (transmit) > Z1 (receive)
			  setZ2transmit; // Set Z2 port to output mode
 80051be:	4b67      	ldr	r3, [pc, #412]	; (800535c <TIM4_IRQHandler+0x250>)
 80051c0:	685b      	ldr	r3, [r3, #4]
 80051c2:	f023 03e0 	bic.w	r3, r3, #224	; 0xe0
 80051c6:	4a65      	ldr	r2, [pc, #404]	; (800535c <TIM4_IRQHandler+0x250>)
 80051c8:	f043 03a0 	orr.w	r3, r3, #160	; 0xa0
 80051cc:	6053      	str	r3, [r2, #4]
			  GPIOB->ODR |= (1 << Z1Receive); 				// Turn on multiplexer for input Z1 channel.
 80051ce:	4b60      	ldr	r3, [pc, #384]	; (8005350 <TIM4_IRQHandler+0x244>)
 80051d0:	68db      	ldr	r3, [r3, #12]
 80051d2:	4a5f      	ldr	r2, [pc, #380]	; (8005350 <TIM4_IRQHandler+0x244>)
 80051d4:	f043 0302 	orr.w	r3, r3, #2
 80051d8:	60d3      	str	r3, [r2, #12]
			  HAL_TIM_OC_Start(&htim1, TIM_CHANNEL_2);
 80051da:	2104      	movs	r1, #4
 80051dc:	485e      	ldr	r0, [pc, #376]	; (8005358 <TIM4_IRQHandler+0x24c>)
 80051de:	f002 ff75 	bl	80080cc <HAL_TIM_OC_Start>
			  break;
 80051e2:	e0a6      	b.n	8005332 <TIM4_IRQHandler+0x226>
		  }
		  case 2: { // Z2 (transmit) > Z3 (receive)
			  //TIM3->ARR = 31000;
			  setZ2transmit; // Set Z2 port to output mode
 80051e4:	4b5d      	ldr	r3, [pc, #372]	; (800535c <TIM4_IRQHandler+0x250>)
 80051e6:	685b      	ldr	r3, [r3, #4]
 80051e8:	f023 03e0 	bic.w	r3, r3, #224	; 0xe0
 80051ec:	4a5b      	ldr	r2, [pc, #364]	; (800535c <TIM4_IRQHandler+0x250>)
 80051ee:	f043 03a0 	orr.w	r3, r3, #160	; 0xa0
 80051f2:	6053      	str	r3, [r2, #4]
			  GPIOB->ODR |= (1 << Z3Receive); 				// Turn on multiplexer for input Z3 channel.
 80051f4:	4b56      	ldr	r3, [pc, #344]	; (8005350 <TIM4_IRQHandler+0x244>)
 80051f6:	68db      	ldr	r3, [r3, #12]
 80051f8:	4a55      	ldr	r2, [pc, #340]	; (8005350 <TIM4_IRQHandler+0x244>)
 80051fa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80051fe:	60d3      	str	r3, [r2, #12]
			  HAL_TIM_OC_Start(&htim1, TIM_CHANNEL_2);
 8005200:	2104      	movs	r1, #4
 8005202:	4855      	ldr	r0, [pc, #340]	; (8005358 <TIM4_IRQHandler+0x24c>)
 8005204:	f002 ff62 	bl	80080cc <HAL_TIM_OC_Start>
			  break;
 8005208:	e093      	b.n	8005332 <TIM4_IRQHandler+0x226>
		  }
		  case 3: { // Z3 (transmit) > Z2 (receive)
			  //TIM3->ARR = 31000;
			  setZ3transmit; // Set Z3 port to output mode
 800520a:	4b54      	ldr	r3, [pc, #336]	; (800535c <TIM4_IRQHandler+0x250>)
 800520c:	685b      	ldr	r3, [r3, #4]
 800520e:	f423 6360 	bic.w	r3, r3, #3584	; 0xe00
 8005212:	4a52      	ldr	r2, [pc, #328]	; (800535c <TIM4_IRQHandler+0x250>)
 8005214:	f443 6320 	orr.w	r3, r3, #2560	; 0xa00
 8005218:	6053      	str	r3, [r2, #4]
			  GPIOB->ODR |= (1 << Z2Receive); 				// Turn on multiplexer for input Z2 channel.
 800521a:	4b4d      	ldr	r3, [pc, #308]	; (8005350 <TIM4_IRQHandler+0x244>)
 800521c:	68db      	ldr	r3, [r3, #12]
 800521e:	4a4c      	ldr	r2, [pc, #304]	; (8005350 <TIM4_IRQHandler+0x244>)
 8005220:	f043 0304 	orr.w	r3, r3, #4
 8005224:	60d3      	str	r3, [r2, #12]
			  HAL_TIM_OC_Start(&htim1, TIM_CHANNEL_3);
 8005226:	2108      	movs	r1, #8
 8005228:	484b      	ldr	r0, [pc, #300]	; (8005358 <TIM4_IRQHandler+0x24c>)
 800522a:	f002 ff4f 	bl	80080cc <HAL_TIM_OC_Start>
			  break;
 800522e:	e080      	b.n	8005332 <TIM4_IRQHandler+0x226>
		  }
		  case 4: { // Z3 (transmit) > Z4 (receive)
			  setZ3transmit; // Set Z3 port to output mode
 8005230:	4b4a      	ldr	r3, [pc, #296]	; (800535c <TIM4_IRQHandler+0x250>)
 8005232:	685b      	ldr	r3, [r3, #4]
 8005234:	f423 6360 	bic.w	r3, r3, #3584	; 0xe00
 8005238:	4a48      	ldr	r2, [pc, #288]	; (800535c <TIM4_IRQHandler+0x250>)
 800523a:	f443 6320 	orr.w	r3, r3, #2560	; 0xa00
 800523e:	6053      	str	r3, [r2, #4]
			  GPIOB->ODR |= (uint16_t) (1 << Z4Receive); 	// Turn on multiplexer for input Z4 channel.
 8005240:	4b43      	ldr	r3, [pc, #268]	; (8005350 <TIM4_IRQHandler+0x244>)
 8005242:	68db      	ldr	r3, [r3, #12]
 8005244:	4a42      	ldr	r2, [pc, #264]	; (8005350 <TIM4_IRQHandler+0x244>)
 8005246:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800524a:	60d3      	str	r3, [r2, #12]
			  HAL_TIM_OC_Start(&htim1, TIM_CHANNEL_3);
 800524c:	2108      	movs	r1, #8
 800524e:	4842      	ldr	r0, [pc, #264]	; (8005358 <TIM4_IRQHandler+0x24c>)
 8005250:	f002 ff3c 	bl	80080cc <HAL_TIM_OC_Start>
			  break;
 8005254:	e06d      	b.n	8005332 <TIM4_IRQHandler+0x226>
		  }
		  case 5: { // Z4 (transmit) > Z3 (receive)
			  setZ4transmit; // Set Z4 port to output mode
 8005256:	4b41      	ldr	r3, [pc, #260]	; (800535c <TIM4_IRQHandler+0x250>)
 8005258:	685b      	ldr	r3, [r3, #4]
 800525a:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 800525e:	4a3f      	ldr	r2, [pc, #252]	; (800535c <TIM4_IRQHandler+0x250>)
 8005260:	f443 4320 	orr.w	r3, r3, #40960	; 0xa000
 8005264:	6053      	str	r3, [r2, #4]
			  GPIOB->ODR |= (1 << Z3Receive); 				// Turn on multiplexer for input Z3 channel.
 8005266:	4b3a      	ldr	r3, [pc, #232]	; (8005350 <TIM4_IRQHandler+0x244>)
 8005268:	68db      	ldr	r3, [r3, #12]
 800526a:	4a39      	ldr	r2, [pc, #228]	; (8005350 <TIM4_IRQHandler+0x244>)
 800526c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005270:	60d3      	str	r3, [r2, #12]
			  HAL_TIM_OC_Start(&htim1, TIM_CHANNEL_4);
 8005272:	210c      	movs	r1, #12
 8005274:	4838      	ldr	r0, [pc, #224]	; (8005358 <TIM4_IRQHandler+0x24c>)
 8005276:	f002 ff29 	bl	80080cc <HAL_TIM_OC_Start>
			  break;
 800527a:	e05a      	b.n	8005332 <TIM4_IRQHandler+0x226>
		  }
		  case 6: { // Z4 (transmit) > Z1 (receive)
			  //TIM3->ARR = 30400;
			  setZ4transmit;	// Set Z4 port to output mode
 800527c:	4b37      	ldr	r3, [pc, #220]	; (800535c <TIM4_IRQHandler+0x250>)
 800527e:	685b      	ldr	r3, [r3, #4]
 8005280:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8005284:	4a35      	ldr	r2, [pc, #212]	; (800535c <TIM4_IRQHandler+0x250>)
 8005286:	f443 4320 	orr.w	r3, r3, #40960	; 0xa000
 800528a:	6053      	str	r3, [r2, #4]
			  GPIOB->ODR |= (1 << Z1Receive); 				// Turn on multiplexer for input Z1 channel.
 800528c:	4b30      	ldr	r3, [pc, #192]	; (8005350 <TIM4_IRQHandler+0x244>)
 800528e:	68db      	ldr	r3, [r3, #12]
 8005290:	4a2f      	ldr	r2, [pc, #188]	; (8005350 <TIM4_IRQHandler+0x244>)
 8005292:	f043 0302 	orr.w	r3, r3, #2
 8005296:	60d3      	str	r3, [r2, #12]
			  HAL_TIM_OC_Start(&htim1, TIM_CHANNEL_4);
 8005298:	210c      	movs	r1, #12
 800529a:	482f      	ldr	r0, [pc, #188]	; (8005358 <TIM4_IRQHandler+0x24c>)
 800529c:	f002 ff16 	bl	80080cc <HAL_TIM_OC_Start>
			  break;
 80052a0:	e047      	b.n	8005332 <TIM4_IRQHandler+0x226>
		  }
		  case 7: { // Z1 (transmit) > Z4 (receive)
			  //TIM3->ARR = 30400;
			  setZ1transmit;	// Set Z1 port to output mode
 80052a2:	4b2e      	ldr	r3, [pc, #184]	; (800535c <TIM4_IRQHandler+0x250>)
 80052a4:	685b      	ldr	r3, [r3, #4]
 80052a6:	f023 030e 	bic.w	r3, r3, #14
 80052aa:	4a2c      	ldr	r2, [pc, #176]	; (800535c <TIM4_IRQHandler+0x250>)
 80052ac:	f043 030a 	orr.w	r3, r3, #10
 80052b0:	6053      	str	r3, [r2, #4]
			  GPIOB->ODR |= (1 << Z4Receive); 				// Turn on multiplexer for input Z4 channel.
 80052b2:	4b27      	ldr	r3, [pc, #156]	; (8005350 <TIM4_IRQHandler+0x244>)
 80052b4:	68db      	ldr	r3, [r3, #12]
 80052b6:	4a26      	ldr	r2, [pc, #152]	; (8005350 <TIM4_IRQHandler+0x244>)
 80052b8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80052bc:	60d3      	str	r3, [r2, #12]
			  HAL_TIM_OC_Start(&htim1, TIM_CHANNEL_1);
 80052be:	2100      	movs	r1, #0
 80052c0:	4825      	ldr	r0, [pc, #148]	; (8005358 <TIM4_IRQHandler+0x24c>)
 80052c2:	f002 ff03 	bl	80080cc <HAL_TIM_OC_Start>
			  break;
 80052c6:	e034      	b.n	8005332 <TIM4_IRQHandler+0x226>
		  }
		  case 8: { // All data complete.
			  readyFlag = TRUE;
 80052c8:	4b26      	ldr	r3, [pc, #152]	; (8005364 <TIM4_IRQHandler+0x258>)
 80052ca:	2201      	movs	r2, #1
 80052cc:	701a      	strb	r2, [r3, #0]
			  X = (Z12 - Z21 + Z43 - Z34) / 2;
 80052ce:	4b26      	ldr	r3, [pc, #152]	; (8005368 <TIM4_IRQHandler+0x25c>)
 80052d0:	881b      	ldrh	r3, [r3, #0]
 80052d2:	461a      	mov	r2, r3
 80052d4:	4b25      	ldr	r3, [pc, #148]	; (800536c <TIM4_IRQHandler+0x260>)
 80052d6:	881b      	ldrh	r3, [r3, #0]
 80052d8:	1ad3      	subs	r3, r2, r3
 80052da:	4a25      	ldr	r2, [pc, #148]	; (8005370 <TIM4_IRQHandler+0x264>)
 80052dc:	8812      	ldrh	r2, [r2, #0]
 80052de:	4413      	add	r3, r2
 80052e0:	4a24      	ldr	r2, [pc, #144]	; (8005374 <TIM4_IRQHandler+0x268>)
 80052e2:	8812      	ldrh	r2, [r2, #0]
 80052e4:	1a9b      	subs	r3, r3, r2
 80052e6:	0fda      	lsrs	r2, r3, #31
 80052e8:	4413      	add	r3, r2
 80052ea:	105b      	asrs	r3, r3, #1
 80052ec:	4618      	mov	r0, r3
 80052ee:	f7fb f889 	bl	8000404 <__aeabi_i2d>
 80052f2:	4602      	mov	r2, r0
 80052f4:	460b      	mov	r3, r1
 80052f6:	4920      	ldr	r1, [pc, #128]	; (8005378 <TIM4_IRQHandler+0x26c>)
 80052f8:	e9c1 2300 	strd	r2, r3, [r1]
			  Y = (Z23 - Z32 + Z14 - Z41) / 2;
 80052fc:	4b1f      	ldr	r3, [pc, #124]	; (800537c <TIM4_IRQHandler+0x270>)
 80052fe:	881b      	ldrh	r3, [r3, #0]
 8005300:	461a      	mov	r2, r3
 8005302:	4b1f      	ldr	r3, [pc, #124]	; (8005380 <TIM4_IRQHandler+0x274>)
 8005304:	881b      	ldrh	r3, [r3, #0]
 8005306:	1ad3      	subs	r3, r2, r3
 8005308:	4a1e      	ldr	r2, [pc, #120]	; (8005384 <TIM4_IRQHandler+0x278>)
 800530a:	8812      	ldrh	r2, [r2, #0]
 800530c:	4413      	add	r3, r2
 800530e:	4a1e      	ldr	r2, [pc, #120]	; (8005388 <TIM4_IRQHandler+0x27c>)
 8005310:	8812      	ldrh	r2, [r2, #0]
 8005312:	1a9b      	subs	r3, r3, r2
 8005314:	0fda      	lsrs	r2, r3, #31
 8005316:	4413      	add	r3, r2
 8005318:	105b      	asrs	r3, r3, #1
 800531a:	4618      	mov	r0, r3
 800531c:	f7fb f872 	bl	8000404 <__aeabi_i2d>
 8005320:	4602      	mov	r2, r0
 8005322:	460b      	mov	r3, r1
 8005324:	4919      	ldr	r1, [pc, #100]	; (800538c <TIM4_IRQHandler+0x280>)
 8005326:	e9c1 2300 	strd	r2, r3, [r1]
			  currentMode = 0;
 800532a:	4b0d      	ldr	r3, [pc, #52]	; (8005360 <TIM4_IRQHandler+0x254>)
 800532c:	2200      	movs	r2, #0
 800532e:	801a      	strh	r2, [r3, #0]
			  break;
 8005330:	bf00      	nop
		  }
	  }
	  runFlag = FALSE;
 8005332:	4b17      	ldr	r3, [pc, #92]	; (8005390 <TIM4_IRQHandler+0x284>)
 8005334:	2200      	movs	r2, #0
 8005336:	701a      	strb	r2, [r3, #0]
	  HAL_TIM_IC_Start_DMA(&htim2, TIM_CHANNEL_1, (uint32_t*) &fastCounter, 1);
 8005338:	2301      	movs	r3, #1
 800533a:	4a16      	ldr	r2, [pc, #88]	; (8005394 <TIM4_IRQHandler+0x288>)
 800533c:	2100      	movs	r1, #0
 800533e:	4805      	ldr	r0, [pc, #20]	; (8005354 <TIM4_IRQHandler+0x248>)
 8005340:	f003 f822 	bl	8008388 <HAL_TIM_IC_Start_DMA>

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8005344:	4814      	ldr	r0, [pc, #80]	; (8005398 <TIM4_IRQHandler+0x28c>)
 8005346:	f003 fabc 	bl	80088c2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 800534a:	bf00      	nop
 800534c:	bd80      	pop	{r7, pc}
 800534e:	bf00      	nop
 8005350:	40010c00 	.word	0x40010c00
 8005354:	2000042c 	.word	0x2000042c
 8005358:	200003dc 	.word	0x200003dc
 800535c:	40010800 	.word	0x40010800
 8005360:	20000426 	.word	0x20000426
 8005364:	200001c0 	.word	0x200001c0
 8005368:	200003ce 	.word	0x200003ce
 800536c:	20000318 	.word	0x20000318
 8005370:	200003d8 	.word	0x200003d8
 8005374:	20000328 	.word	0x20000328
 8005378:	20000478 	.word	0x20000478
 800537c:	20000428 	.word	0x20000428
 8005380:	20000424 	.word	0x20000424
 8005384:	200002b4 	.word	0x200002b4
 8005388:	2000031a 	.word	0x2000031a
 800538c:	20000320 	.word	0x20000320
 8005390:	200003cc 	.word	0x200003cc
 8005394:	20000378 	.word	0x20000378
 8005398:	2000026c 	.word	0x2000026c

0800539c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800539c:	b580      	push	{r7, lr}
 800539e:	b086      	sub	sp, #24
 80053a0:	af00      	add	r7, sp, #0
 80053a2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80053a4:	4a14      	ldr	r2, [pc, #80]	; (80053f8 <_sbrk+0x5c>)
 80053a6:	4b15      	ldr	r3, [pc, #84]	; (80053fc <_sbrk+0x60>)
 80053a8:	1ad3      	subs	r3, r2, r3
 80053aa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80053ac:	697b      	ldr	r3, [r7, #20]
 80053ae:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80053b0:	4b13      	ldr	r3, [pc, #76]	; (8005400 <_sbrk+0x64>)
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	d102      	bne.n	80053be <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80053b8:	4b11      	ldr	r3, [pc, #68]	; (8005400 <_sbrk+0x64>)
 80053ba:	4a12      	ldr	r2, [pc, #72]	; (8005404 <_sbrk+0x68>)
 80053bc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80053be:	4b10      	ldr	r3, [pc, #64]	; (8005400 <_sbrk+0x64>)
 80053c0:	681a      	ldr	r2, [r3, #0]
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	4413      	add	r3, r2
 80053c6:	693a      	ldr	r2, [r7, #16]
 80053c8:	429a      	cmp	r2, r3
 80053ca:	d207      	bcs.n	80053dc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80053cc:	f005 ff82 	bl	800b2d4 <__errno>
 80053d0:	4603      	mov	r3, r0
 80053d2:	220c      	movs	r2, #12
 80053d4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80053d6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80053da:	e009      	b.n	80053f0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80053dc:	4b08      	ldr	r3, [pc, #32]	; (8005400 <_sbrk+0x64>)
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80053e2:	4b07      	ldr	r3, [pc, #28]	; (8005400 <_sbrk+0x64>)
 80053e4:	681a      	ldr	r2, [r3, #0]
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	4413      	add	r3, r2
 80053ea:	4a05      	ldr	r2, [pc, #20]	; (8005400 <_sbrk+0x64>)
 80053ec:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80053ee:	68fb      	ldr	r3, [r7, #12]
}
 80053f0:	4618      	mov	r0, r3
 80053f2:	3718      	adds	r7, #24
 80053f4:	46bd      	mov	sp, r7
 80053f6:	bd80      	pop	{r7, pc}
 80053f8:	20005000 	.word	0x20005000
 80053fc:	00000400 	.word	0x00000400
 8005400:	2000017c 	.word	0x2000017c
 8005404:	20000498 	.word	0x20000498

08005408 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8005408:	b480      	push	{r7}
 800540a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800540c:	bf00      	nop
 800540e:	46bd      	mov	sp, r7
 8005410:	bc80      	pop	{r7}
 8005412:	4770      	bx	lr

08005414 <WIZCHIP_READ>:

#if   (_WIZCHIP_ == 5500)
////////////////////////////////////////////////////

uint8_t  WIZCHIP_READ(uint32_t AddrSel)
{
 8005414:	b580      	push	{r7, lr}
 8005416:	b084      	sub	sp, #16
 8005418:	af00      	add	r7, sp, #0
 800541a:	6078      	str	r0, [r7, #4]
   uint8_t ret;
   uint8_t spi_data[3];

   WIZCHIP_CRITICAL_ENTER();
 800541c:	4b22      	ldr	r3, [pc, #136]	; (80054a8 <WIZCHIP_READ+0x94>)
 800541e:	68db      	ldr	r3, [r3, #12]
 8005420:	4798      	blx	r3
   WIZCHIP.CS._select();
 8005422:	4b21      	ldr	r3, [pc, #132]	; (80054a8 <WIZCHIP_READ+0x94>)
 8005424:	695b      	ldr	r3, [r3, #20]
 8005426:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_READ_ | _W5500_SPI_VDM_OP_);

   if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
 8005428:	4b1f      	ldr	r3, [pc, #124]	; (80054a8 <WIZCHIP_READ+0x94>)
 800542a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800542c:	2b00      	cmp	r3, #0
 800542e:	d003      	beq.n	8005438 <WIZCHIP_READ+0x24>
 8005430:	4b1d      	ldr	r3, [pc, #116]	; (80054a8 <WIZCHIP_READ+0x94>)
 8005432:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005434:	2b00      	cmp	r3, #0
 8005436:	d114      	bne.n	8005462 <WIZCHIP_READ+0x4e>
   {
	   WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 8005438:	4b1b      	ldr	r3, [pc, #108]	; (80054a8 <WIZCHIP_READ+0x94>)
 800543a:	6a1b      	ldr	r3, [r3, #32]
 800543c:	687a      	ldr	r2, [r7, #4]
 800543e:	0c12      	lsrs	r2, r2, #16
 8005440:	b2d2      	uxtb	r2, r2
 8005442:	4610      	mov	r0, r2
 8005444:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 8005446:	4b18      	ldr	r3, [pc, #96]	; (80054a8 <WIZCHIP_READ+0x94>)
 8005448:	6a1b      	ldr	r3, [r3, #32]
 800544a:	687a      	ldr	r2, [r7, #4]
 800544c:	0a12      	lsrs	r2, r2, #8
 800544e:	b2d2      	uxtb	r2, r2
 8005450:	4610      	mov	r0, r2
 8005452:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 8005454:	4b14      	ldr	r3, [pc, #80]	; (80054a8 <WIZCHIP_READ+0x94>)
 8005456:	6a1b      	ldr	r3, [r3, #32]
 8005458:	687a      	ldr	r2, [r7, #4]
 800545a:	b2d2      	uxtb	r2, r2
 800545c:	4610      	mov	r0, r2
 800545e:	4798      	blx	r3
 8005460:	e011      	b.n	8005486 <WIZCHIP_READ+0x72>
   }
   else																// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	0c1b      	lsrs	r3, r3, #16
 8005466:	b2db      	uxtb	r3, r3
 8005468:	733b      	strb	r3, [r7, #12]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	0a1b      	lsrs	r3, r3, #8
 800546e:	b2db      	uxtb	r3, r3
 8005470:	737b      	strb	r3, [r7, #13]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	b2db      	uxtb	r3, r3
 8005476:	73bb      	strb	r3, [r7, #14]
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
 8005478:	4b0b      	ldr	r3, [pc, #44]	; (80054a8 <WIZCHIP_READ+0x94>)
 800547a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800547c:	f107 020c 	add.w	r2, r7, #12
 8005480:	2103      	movs	r1, #3
 8005482:	4610      	mov	r0, r2
 8005484:	4798      	blx	r3
   }
   ret = WIZCHIP.IF.SPI._read_byte();
 8005486:	4b08      	ldr	r3, [pc, #32]	; (80054a8 <WIZCHIP_READ+0x94>)
 8005488:	69db      	ldr	r3, [r3, #28]
 800548a:	4798      	blx	r3
 800548c:	4603      	mov	r3, r0
 800548e:	73fb      	strb	r3, [r7, #15]

   WIZCHIP.CS._deselect();
 8005490:	4b05      	ldr	r3, [pc, #20]	; (80054a8 <WIZCHIP_READ+0x94>)
 8005492:	699b      	ldr	r3, [r3, #24]
 8005494:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 8005496:	4b04      	ldr	r3, [pc, #16]	; (80054a8 <WIZCHIP_READ+0x94>)
 8005498:	691b      	ldr	r3, [r3, #16]
 800549a:	4798      	blx	r3
   return ret;
 800549c:	7bfb      	ldrb	r3, [r7, #15]
}
 800549e:	4618      	mov	r0, r3
 80054a0:	3710      	adds	r7, #16
 80054a2:	46bd      	mov	sp, r7
 80054a4:	bd80      	pop	{r7, pc}
 80054a6:	bf00      	nop
 80054a8:	20000024 	.word	0x20000024

080054ac <WIZCHIP_WRITE>:

void     WIZCHIP_WRITE(uint32_t AddrSel, uint8_t wb )
{
 80054ac:	b580      	push	{r7, lr}
 80054ae:	b084      	sub	sp, #16
 80054b0:	af00      	add	r7, sp, #0
 80054b2:	6078      	str	r0, [r7, #4]
 80054b4:	460b      	mov	r3, r1
 80054b6:	70fb      	strb	r3, [r7, #3]
   uint8_t spi_data[4];

   WIZCHIP_CRITICAL_ENTER();
 80054b8:	4b22      	ldr	r3, [pc, #136]	; (8005544 <WIZCHIP_WRITE+0x98>)
 80054ba:	68db      	ldr	r3, [r3, #12]
 80054bc:	4798      	blx	r3
   WIZCHIP.CS._select();
 80054be:	4b21      	ldr	r3, [pc, #132]	; (8005544 <WIZCHIP_WRITE+0x98>)
 80054c0:	695b      	ldr	r3, [r3, #20]
 80054c2:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_WRITE_ | _W5500_SPI_VDM_OP_);
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	f043 0304 	orr.w	r3, r3, #4
 80054ca:	607b      	str	r3, [r7, #4]

   //if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
   if(!WIZCHIP.IF.SPI._write_burst) 	// byte operation
 80054cc:	4b1d      	ldr	r3, [pc, #116]	; (8005544 <WIZCHIP_WRITE+0x98>)
 80054ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	d119      	bne.n	8005508 <WIZCHIP_WRITE+0x5c>
   {
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 80054d4:	4b1b      	ldr	r3, [pc, #108]	; (8005544 <WIZCHIP_WRITE+0x98>)
 80054d6:	6a1b      	ldr	r3, [r3, #32]
 80054d8:	687a      	ldr	r2, [r7, #4]
 80054da:	0c12      	lsrs	r2, r2, #16
 80054dc:	b2d2      	uxtb	r2, r2
 80054de:	4610      	mov	r0, r2
 80054e0:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 80054e2:	4b18      	ldr	r3, [pc, #96]	; (8005544 <WIZCHIP_WRITE+0x98>)
 80054e4:	6a1b      	ldr	r3, [r3, #32]
 80054e6:	687a      	ldr	r2, [r7, #4]
 80054e8:	0a12      	lsrs	r2, r2, #8
 80054ea:	b2d2      	uxtb	r2, r2
 80054ec:	4610      	mov	r0, r2
 80054ee:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 80054f0:	4b14      	ldr	r3, [pc, #80]	; (8005544 <WIZCHIP_WRITE+0x98>)
 80054f2:	6a1b      	ldr	r3, [r3, #32]
 80054f4:	687a      	ldr	r2, [r7, #4]
 80054f6:	b2d2      	uxtb	r2, r2
 80054f8:	4610      	mov	r0, r2
 80054fa:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte(wb);
 80054fc:	4b11      	ldr	r3, [pc, #68]	; (8005544 <WIZCHIP_WRITE+0x98>)
 80054fe:	6a1b      	ldr	r3, [r3, #32]
 8005500:	78fa      	ldrb	r2, [r7, #3]
 8005502:	4610      	mov	r0, r2
 8005504:	4798      	blx	r3
 8005506:	e013      	b.n	8005530 <WIZCHIP_WRITE+0x84>
   }
   else									// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	0c1b      	lsrs	r3, r3, #16
 800550c:	b2db      	uxtb	r3, r3
 800550e:	733b      	strb	r3, [r7, #12]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	0a1b      	lsrs	r3, r3, #8
 8005514:	b2db      	uxtb	r3, r3
 8005516:	737b      	strb	r3, [r7, #13]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	b2db      	uxtb	r3, r3
 800551c:	73bb      	strb	r3, [r7, #14]
		spi_data[3] = wb;
 800551e:	78fb      	ldrb	r3, [r7, #3]
 8005520:	73fb      	strb	r3, [r7, #15]
		WIZCHIP.IF.SPI._write_burst(spi_data, 4);
 8005522:	4b08      	ldr	r3, [pc, #32]	; (8005544 <WIZCHIP_WRITE+0x98>)
 8005524:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005526:	f107 020c 	add.w	r2, r7, #12
 800552a:	2104      	movs	r1, #4
 800552c:	4610      	mov	r0, r2
 800552e:	4798      	blx	r3
   }

   WIZCHIP.CS._deselect();
 8005530:	4b04      	ldr	r3, [pc, #16]	; (8005544 <WIZCHIP_WRITE+0x98>)
 8005532:	699b      	ldr	r3, [r3, #24]
 8005534:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 8005536:	4b03      	ldr	r3, [pc, #12]	; (8005544 <WIZCHIP_WRITE+0x98>)
 8005538:	691b      	ldr	r3, [r3, #16]
 800553a:	4798      	blx	r3
}
 800553c:	bf00      	nop
 800553e:	3710      	adds	r7, #16
 8005540:	46bd      	mov	sp, r7
 8005542:	bd80      	pop	{r7, pc}
 8005544:	20000024 	.word	0x20000024

08005548 <WIZCHIP_READ_BUF>:
         
void     WIZCHIP_READ_BUF (uint32_t AddrSel, uint8_t* pBuf, uint16_t len)
{
 8005548:	b590      	push	{r4, r7, lr}
 800554a:	b087      	sub	sp, #28
 800554c:	af00      	add	r7, sp, #0
 800554e:	60f8      	str	r0, [r7, #12]
 8005550:	60b9      	str	r1, [r7, #8]
 8005552:	4613      	mov	r3, r2
 8005554:	80fb      	strh	r3, [r7, #6]
   uint8_t spi_data[3];
   uint16_t i;

   WIZCHIP_CRITICAL_ENTER();
 8005556:	4b2b      	ldr	r3, [pc, #172]	; (8005604 <WIZCHIP_READ_BUF+0xbc>)
 8005558:	68db      	ldr	r3, [r3, #12]
 800555a:	4798      	blx	r3
   WIZCHIP.CS._select();
 800555c:	4b29      	ldr	r3, [pc, #164]	; (8005604 <WIZCHIP_READ_BUF+0xbc>)
 800555e:	695b      	ldr	r3, [r3, #20]
 8005560:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_READ_ | _W5500_SPI_VDM_OP_);

   if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
 8005562:	4b28      	ldr	r3, [pc, #160]	; (8005604 <WIZCHIP_READ_BUF+0xbc>)
 8005564:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005566:	2b00      	cmp	r3, #0
 8005568:	d003      	beq.n	8005572 <WIZCHIP_READ_BUF+0x2a>
 800556a:	4b26      	ldr	r3, [pc, #152]	; (8005604 <WIZCHIP_READ_BUF+0xbc>)
 800556c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800556e:	2b00      	cmp	r3, #0
 8005570:	d126      	bne.n	80055c0 <WIZCHIP_READ_BUF+0x78>
   {
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 8005572:	4b24      	ldr	r3, [pc, #144]	; (8005604 <WIZCHIP_READ_BUF+0xbc>)
 8005574:	6a1b      	ldr	r3, [r3, #32]
 8005576:	68fa      	ldr	r2, [r7, #12]
 8005578:	0c12      	lsrs	r2, r2, #16
 800557a:	b2d2      	uxtb	r2, r2
 800557c:	4610      	mov	r0, r2
 800557e:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 8005580:	4b20      	ldr	r3, [pc, #128]	; (8005604 <WIZCHIP_READ_BUF+0xbc>)
 8005582:	6a1b      	ldr	r3, [r3, #32]
 8005584:	68fa      	ldr	r2, [r7, #12]
 8005586:	0a12      	lsrs	r2, r2, #8
 8005588:	b2d2      	uxtb	r2, r2
 800558a:	4610      	mov	r0, r2
 800558c:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 800558e:	4b1d      	ldr	r3, [pc, #116]	; (8005604 <WIZCHIP_READ_BUF+0xbc>)
 8005590:	6a1b      	ldr	r3, [r3, #32]
 8005592:	68fa      	ldr	r2, [r7, #12]
 8005594:	b2d2      	uxtb	r2, r2
 8005596:	4610      	mov	r0, r2
 8005598:	4798      	blx	r3
		for(i = 0; i < len; i++)
 800559a:	2300      	movs	r3, #0
 800559c:	82fb      	strh	r3, [r7, #22]
 800559e:	e00a      	b.n	80055b6 <WIZCHIP_READ_BUF+0x6e>
		   pBuf[i] = WIZCHIP.IF.SPI._read_byte();
 80055a0:	4b18      	ldr	r3, [pc, #96]	; (8005604 <WIZCHIP_READ_BUF+0xbc>)
 80055a2:	69db      	ldr	r3, [r3, #28]
 80055a4:	8afa      	ldrh	r2, [r7, #22]
 80055a6:	68b9      	ldr	r1, [r7, #8]
 80055a8:	188c      	adds	r4, r1, r2
 80055aa:	4798      	blx	r3
 80055ac:	4603      	mov	r3, r0
 80055ae:	7023      	strb	r3, [r4, #0]
		for(i = 0; i < len; i++)
 80055b0:	8afb      	ldrh	r3, [r7, #22]
 80055b2:	3301      	adds	r3, #1
 80055b4:	82fb      	strh	r3, [r7, #22]
 80055b6:	8afa      	ldrh	r2, [r7, #22]
 80055b8:	88fb      	ldrh	r3, [r7, #6]
 80055ba:	429a      	cmp	r2, r3
 80055bc:	d3f0      	bcc.n	80055a0 <WIZCHIP_READ_BUF+0x58>
   if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
 80055be:	e017      	b.n	80055f0 <WIZCHIP_READ_BUF+0xa8>
   }
   else																// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	0c1b      	lsrs	r3, r3, #16
 80055c4:	b2db      	uxtb	r3, r3
 80055c6:	743b      	strb	r3, [r7, #16]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	0a1b      	lsrs	r3, r3, #8
 80055cc:	b2db      	uxtb	r3, r3
 80055ce:	747b      	strb	r3, [r7, #17]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	b2db      	uxtb	r3, r3
 80055d4:	74bb      	strb	r3, [r7, #18]
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
 80055d6:	4b0b      	ldr	r3, [pc, #44]	; (8005604 <WIZCHIP_READ_BUF+0xbc>)
 80055d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055da:	f107 0210 	add.w	r2, r7, #16
 80055de:	2103      	movs	r1, #3
 80055e0:	4610      	mov	r0, r2
 80055e2:	4798      	blx	r3
		WIZCHIP.IF.SPI._read_burst(pBuf, len);
 80055e4:	4b07      	ldr	r3, [pc, #28]	; (8005604 <WIZCHIP_READ_BUF+0xbc>)
 80055e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055e8:	88fa      	ldrh	r2, [r7, #6]
 80055ea:	4611      	mov	r1, r2
 80055ec:	68b8      	ldr	r0, [r7, #8]
 80055ee:	4798      	blx	r3
   }

   WIZCHIP.CS._deselect();
 80055f0:	4b04      	ldr	r3, [pc, #16]	; (8005604 <WIZCHIP_READ_BUF+0xbc>)
 80055f2:	699b      	ldr	r3, [r3, #24]
 80055f4:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 80055f6:	4b03      	ldr	r3, [pc, #12]	; (8005604 <WIZCHIP_READ_BUF+0xbc>)
 80055f8:	691b      	ldr	r3, [r3, #16]
 80055fa:	4798      	blx	r3
}
 80055fc:	bf00      	nop
 80055fe:	371c      	adds	r7, #28
 8005600:	46bd      	mov	sp, r7
 8005602:	bd90      	pop	{r4, r7, pc}
 8005604:	20000024 	.word	0x20000024

08005608 <WIZCHIP_WRITE_BUF>:

void     WIZCHIP_WRITE_BUF(uint32_t AddrSel, uint8_t* pBuf, uint16_t len)
{
 8005608:	b580      	push	{r7, lr}
 800560a:	b086      	sub	sp, #24
 800560c:	af00      	add	r7, sp, #0
 800560e:	60f8      	str	r0, [r7, #12]
 8005610:	60b9      	str	r1, [r7, #8]
 8005612:	4613      	mov	r3, r2
 8005614:	80fb      	strh	r3, [r7, #6]
   uint8_t spi_data[3];
   uint16_t i;

   WIZCHIP_CRITICAL_ENTER();
 8005616:	4b2b      	ldr	r3, [pc, #172]	; (80056c4 <WIZCHIP_WRITE_BUF+0xbc>)
 8005618:	68db      	ldr	r3, [r3, #12]
 800561a:	4798      	blx	r3
   WIZCHIP.CS._select();
 800561c:	4b29      	ldr	r3, [pc, #164]	; (80056c4 <WIZCHIP_WRITE_BUF+0xbc>)
 800561e:	695b      	ldr	r3, [r3, #20]
 8005620:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_WRITE_ | _W5500_SPI_VDM_OP_);
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	f043 0304 	orr.w	r3, r3, #4
 8005628:	60fb      	str	r3, [r7, #12]

   if(!WIZCHIP.IF.SPI._write_burst) 	// byte operation
 800562a:	4b26      	ldr	r3, [pc, #152]	; (80056c4 <WIZCHIP_WRITE_BUF+0xbc>)
 800562c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800562e:	2b00      	cmp	r3, #0
 8005630:	d126      	bne.n	8005680 <WIZCHIP_WRITE_BUF+0x78>
   {
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 8005632:	4b24      	ldr	r3, [pc, #144]	; (80056c4 <WIZCHIP_WRITE_BUF+0xbc>)
 8005634:	6a1b      	ldr	r3, [r3, #32]
 8005636:	68fa      	ldr	r2, [r7, #12]
 8005638:	0c12      	lsrs	r2, r2, #16
 800563a:	b2d2      	uxtb	r2, r2
 800563c:	4610      	mov	r0, r2
 800563e:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 8005640:	4b20      	ldr	r3, [pc, #128]	; (80056c4 <WIZCHIP_WRITE_BUF+0xbc>)
 8005642:	6a1b      	ldr	r3, [r3, #32]
 8005644:	68fa      	ldr	r2, [r7, #12]
 8005646:	0a12      	lsrs	r2, r2, #8
 8005648:	b2d2      	uxtb	r2, r2
 800564a:	4610      	mov	r0, r2
 800564c:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 800564e:	4b1d      	ldr	r3, [pc, #116]	; (80056c4 <WIZCHIP_WRITE_BUF+0xbc>)
 8005650:	6a1b      	ldr	r3, [r3, #32]
 8005652:	68fa      	ldr	r2, [r7, #12]
 8005654:	b2d2      	uxtb	r2, r2
 8005656:	4610      	mov	r0, r2
 8005658:	4798      	blx	r3
		for(i = 0; i < len; i++)
 800565a:	2300      	movs	r3, #0
 800565c:	82fb      	strh	r3, [r7, #22]
 800565e:	e00a      	b.n	8005676 <WIZCHIP_WRITE_BUF+0x6e>
			WIZCHIP.IF.SPI._write_byte(pBuf[i]);
 8005660:	4b18      	ldr	r3, [pc, #96]	; (80056c4 <WIZCHIP_WRITE_BUF+0xbc>)
 8005662:	6a1b      	ldr	r3, [r3, #32]
 8005664:	8afa      	ldrh	r2, [r7, #22]
 8005666:	68b9      	ldr	r1, [r7, #8]
 8005668:	440a      	add	r2, r1
 800566a:	7812      	ldrb	r2, [r2, #0]
 800566c:	4610      	mov	r0, r2
 800566e:	4798      	blx	r3
		for(i = 0; i < len; i++)
 8005670:	8afb      	ldrh	r3, [r7, #22]
 8005672:	3301      	adds	r3, #1
 8005674:	82fb      	strh	r3, [r7, #22]
 8005676:	8afa      	ldrh	r2, [r7, #22]
 8005678:	88fb      	ldrh	r3, [r7, #6]
 800567a:	429a      	cmp	r2, r3
 800567c:	d3f0      	bcc.n	8005660 <WIZCHIP_WRITE_BUF+0x58>
 800567e:	e017      	b.n	80056b0 <WIZCHIP_WRITE_BUF+0xa8>
   }
   else									// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	0c1b      	lsrs	r3, r3, #16
 8005684:	b2db      	uxtb	r3, r3
 8005686:	743b      	strb	r3, [r7, #16]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	0a1b      	lsrs	r3, r3, #8
 800568c:	b2db      	uxtb	r3, r3
 800568e:	747b      	strb	r3, [r7, #17]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	b2db      	uxtb	r3, r3
 8005694:	74bb      	strb	r3, [r7, #18]
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
 8005696:	4b0b      	ldr	r3, [pc, #44]	; (80056c4 <WIZCHIP_WRITE_BUF+0xbc>)
 8005698:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800569a:	f107 0210 	add.w	r2, r7, #16
 800569e:	2103      	movs	r1, #3
 80056a0:	4610      	mov	r0, r2
 80056a2:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_burst(pBuf, len);
 80056a4:	4b07      	ldr	r3, [pc, #28]	; (80056c4 <WIZCHIP_WRITE_BUF+0xbc>)
 80056a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056a8:	88fa      	ldrh	r2, [r7, #6]
 80056aa:	4611      	mov	r1, r2
 80056ac:	68b8      	ldr	r0, [r7, #8]
 80056ae:	4798      	blx	r3
   }

   WIZCHIP.CS._deselect();
 80056b0:	4b04      	ldr	r3, [pc, #16]	; (80056c4 <WIZCHIP_WRITE_BUF+0xbc>)
 80056b2:	699b      	ldr	r3, [r3, #24]
 80056b4:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 80056b6:	4b03      	ldr	r3, [pc, #12]	; (80056c4 <WIZCHIP_WRITE_BUF+0xbc>)
 80056b8:	691b      	ldr	r3, [r3, #16]
 80056ba:	4798      	blx	r3
}
 80056bc:	bf00      	nop
 80056be:	3718      	adds	r7, #24
 80056c0:	46bd      	mov	sp, r7
 80056c2:	bd80      	pop	{r7, pc}
 80056c4:	20000024 	.word	0x20000024

080056c8 <getSn_TX_FSR>:


uint16_t getSn_TX_FSR(uint8_t sn)
{
 80056c8:	b590      	push	{r4, r7, lr}
 80056ca:	b085      	sub	sp, #20
 80056cc:	af00      	add	r7, sp, #0
 80056ce:	4603      	mov	r3, r0
 80056d0:	71fb      	strb	r3, [r7, #7]
   uint16_t val=0,val1=0;
 80056d2:	2300      	movs	r3, #0
 80056d4:	81fb      	strh	r3, [r7, #14]
 80056d6:	2300      	movs	r3, #0
 80056d8:	81bb      	strh	r3, [r7, #12]

   do
   {
      val1 = WIZCHIP_READ(Sn_TX_FSR(sn));
 80056da:	79fb      	ldrb	r3, [r7, #7]
 80056dc:	009b      	lsls	r3, r3, #2
 80056de:	3301      	adds	r3, #1
 80056e0:	00db      	lsls	r3, r3, #3
 80056e2:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80056e6:	4618      	mov	r0, r3
 80056e8:	f7ff fe94 	bl	8005414 <WIZCHIP_READ>
 80056ec:	4603      	mov	r3, r0
 80056ee:	81bb      	strh	r3, [r7, #12]
      val1 = (val1 << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_TX_FSR(sn),1));
 80056f0:	89bb      	ldrh	r3, [r7, #12]
 80056f2:	021b      	lsls	r3, r3, #8
 80056f4:	b29c      	uxth	r4, r3
 80056f6:	79fb      	ldrb	r3, [r7, #7]
 80056f8:	009b      	lsls	r3, r3, #2
 80056fa:	3301      	adds	r3, #1
 80056fc:	00db      	lsls	r3, r3, #3
 80056fe:	f503 5304 	add.w	r3, r3, #8448	; 0x2100
 8005702:	4618      	mov	r0, r3
 8005704:	f7ff fe86 	bl	8005414 <WIZCHIP_READ>
 8005708:	4603      	mov	r3, r0
 800570a:	b29b      	uxth	r3, r3
 800570c:	4423      	add	r3, r4
 800570e:	81bb      	strh	r3, [r7, #12]
      if (val1 != 0)
 8005710:	89bb      	ldrh	r3, [r7, #12]
 8005712:	2b00      	cmp	r3, #0
 8005714:	d01a      	beq.n	800574c <getSn_TX_FSR+0x84>
      {
        val = WIZCHIP_READ(Sn_TX_FSR(sn));
 8005716:	79fb      	ldrb	r3, [r7, #7]
 8005718:	009b      	lsls	r3, r3, #2
 800571a:	3301      	adds	r3, #1
 800571c:	00db      	lsls	r3, r3, #3
 800571e:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8005722:	4618      	mov	r0, r3
 8005724:	f7ff fe76 	bl	8005414 <WIZCHIP_READ>
 8005728:	4603      	mov	r3, r0
 800572a:	81fb      	strh	r3, [r7, #14]
        val = (val << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_TX_FSR(sn),1));
 800572c:	89fb      	ldrh	r3, [r7, #14]
 800572e:	021b      	lsls	r3, r3, #8
 8005730:	b29c      	uxth	r4, r3
 8005732:	79fb      	ldrb	r3, [r7, #7]
 8005734:	009b      	lsls	r3, r3, #2
 8005736:	3301      	adds	r3, #1
 8005738:	00db      	lsls	r3, r3, #3
 800573a:	f503 5304 	add.w	r3, r3, #8448	; 0x2100
 800573e:	4618      	mov	r0, r3
 8005740:	f7ff fe68 	bl	8005414 <WIZCHIP_READ>
 8005744:	4603      	mov	r3, r0
 8005746:	b29b      	uxth	r3, r3
 8005748:	4423      	add	r3, r4
 800574a:	81fb      	strh	r3, [r7, #14]
      }
   }while (val != val1);
 800574c:	89fa      	ldrh	r2, [r7, #14]
 800574e:	89bb      	ldrh	r3, [r7, #12]
 8005750:	429a      	cmp	r2, r3
 8005752:	d1c2      	bne.n	80056da <getSn_TX_FSR+0x12>
   return val;
 8005754:	89fb      	ldrh	r3, [r7, #14]
}
 8005756:	4618      	mov	r0, r3
 8005758:	3714      	adds	r7, #20
 800575a:	46bd      	mov	sp, r7
 800575c:	bd90      	pop	{r4, r7, pc}

0800575e <getSn_RX_RSR>:


uint16_t getSn_RX_RSR(uint8_t sn)
{
 800575e:	b590      	push	{r4, r7, lr}
 8005760:	b085      	sub	sp, #20
 8005762:	af00      	add	r7, sp, #0
 8005764:	4603      	mov	r3, r0
 8005766:	71fb      	strb	r3, [r7, #7]
   uint16_t val=0,val1=0;
 8005768:	2300      	movs	r3, #0
 800576a:	81fb      	strh	r3, [r7, #14]
 800576c:	2300      	movs	r3, #0
 800576e:	81bb      	strh	r3, [r7, #12]

   do
   {
      val1 = WIZCHIP_READ(Sn_RX_RSR(sn));
 8005770:	79fb      	ldrb	r3, [r7, #7]
 8005772:	009b      	lsls	r3, r3, #2
 8005774:	3301      	adds	r3, #1
 8005776:	00db      	lsls	r3, r3, #3
 8005778:	f503 5318 	add.w	r3, r3, #9728	; 0x2600
 800577c:	4618      	mov	r0, r3
 800577e:	f7ff fe49 	bl	8005414 <WIZCHIP_READ>
 8005782:	4603      	mov	r3, r0
 8005784:	81bb      	strh	r3, [r7, #12]
      val1 = (val1 << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_RX_RSR(sn),1));
 8005786:	89bb      	ldrh	r3, [r7, #12]
 8005788:	021b      	lsls	r3, r3, #8
 800578a:	b29c      	uxth	r4, r3
 800578c:	79fb      	ldrb	r3, [r7, #7]
 800578e:	009b      	lsls	r3, r3, #2
 8005790:	3301      	adds	r3, #1
 8005792:	00db      	lsls	r3, r3, #3
 8005794:	f503 531c 	add.w	r3, r3, #9984	; 0x2700
 8005798:	4618      	mov	r0, r3
 800579a:	f7ff fe3b 	bl	8005414 <WIZCHIP_READ>
 800579e:	4603      	mov	r3, r0
 80057a0:	b29b      	uxth	r3, r3
 80057a2:	4423      	add	r3, r4
 80057a4:	81bb      	strh	r3, [r7, #12]
      if (val1 != 0)
 80057a6:	89bb      	ldrh	r3, [r7, #12]
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d01a      	beq.n	80057e2 <getSn_RX_RSR+0x84>
      {
        val = WIZCHIP_READ(Sn_RX_RSR(sn));
 80057ac:	79fb      	ldrb	r3, [r7, #7]
 80057ae:	009b      	lsls	r3, r3, #2
 80057b0:	3301      	adds	r3, #1
 80057b2:	00db      	lsls	r3, r3, #3
 80057b4:	f503 5318 	add.w	r3, r3, #9728	; 0x2600
 80057b8:	4618      	mov	r0, r3
 80057ba:	f7ff fe2b 	bl	8005414 <WIZCHIP_READ>
 80057be:	4603      	mov	r3, r0
 80057c0:	81fb      	strh	r3, [r7, #14]
        val = (val << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_RX_RSR(sn),1));
 80057c2:	89fb      	ldrh	r3, [r7, #14]
 80057c4:	021b      	lsls	r3, r3, #8
 80057c6:	b29c      	uxth	r4, r3
 80057c8:	79fb      	ldrb	r3, [r7, #7]
 80057ca:	009b      	lsls	r3, r3, #2
 80057cc:	3301      	adds	r3, #1
 80057ce:	00db      	lsls	r3, r3, #3
 80057d0:	f503 531c 	add.w	r3, r3, #9984	; 0x2700
 80057d4:	4618      	mov	r0, r3
 80057d6:	f7ff fe1d 	bl	8005414 <WIZCHIP_READ>
 80057da:	4603      	mov	r3, r0
 80057dc:	b29b      	uxth	r3, r3
 80057de:	4423      	add	r3, r4
 80057e0:	81fb      	strh	r3, [r7, #14]
      }
   }while (val != val1);
 80057e2:	89fa      	ldrh	r2, [r7, #14]
 80057e4:	89bb      	ldrh	r3, [r7, #12]
 80057e6:	429a      	cmp	r2, r3
 80057e8:	d1c2      	bne.n	8005770 <getSn_RX_RSR+0x12>
   return val;
 80057ea:	89fb      	ldrh	r3, [r7, #14]
}
 80057ec:	4618      	mov	r0, r3
 80057ee:	3714      	adds	r7, #20
 80057f0:	46bd      	mov	sp, r7
 80057f2:	bd90      	pop	{r4, r7, pc}

080057f4 <wiz_send_data>:

void wiz_send_data(uint8_t sn, uint8_t *wizdata, uint16_t len)
{
 80057f4:	b590      	push	{r4, r7, lr}
 80057f6:	b085      	sub	sp, #20
 80057f8:	af00      	add	r7, sp, #0
 80057fa:	4603      	mov	r3, r0
 80057fc:	6039      	str	r1, [r7, #0]
 80057fe:	71fb      	strb	r3, [r7, #7]
 8005800:	4613      	mov	r3, r2
 8005802:	80bb      	strh	r3, [r7, #4]
   uint16_t ptr = 0;
 8005804:	2300      	movs	r3, #0
 8005806:	81fb      	strh	r3, [r7, #14]
   uint32_t addrsel = 0;
 8005808:	2300      	movs	r3, #0
 800580a:	60bb      	str	r3, [r7, #8]

   if(len == 0)  return;
 800580c:	88bb      	ldrh	r3, [r7, #4]
 800580e:	2b00      	cmp	r3, #0
 8005810:	d048      	beq.n	80058a4 <wiz_send_data+0xb0>
   ptr = getSn_TX_WR(sn);
 8005812:	79fb      	ldrb	r3, [r7, #7]
 8005814:	009b      	lsls	r3, r3, #2
 8005816:	3301      	adds	r3, #1
 8005818:	00db      	lsls	r3, r3, #3
 800581a:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 800581e:	4618      	mov	r0, r3
 8005820:	f7ff fdf8 	bl	8005414 <WIZCHIP_READ>
 8005824:	4603      	mov	r3, r0
 8005826:	b29b      	uxth	r3, r3
 8005828:	021b      	lsls	r3, r3, #8
 800582a:	b29c      	uxth	r4, r3
 800582c:	79fb      	ldrb	r3, [r7, #7]
 800582e:	009b      	lsls	r3, r3, #2
 8005830:	3301      	adds	r3, #1
 8005832:	00db      	lsls	r3, r3, #3
 8005834:	f503 5314 	add.w	r3, r3, #9472	; 0x2500
 8005838:	4618      	mov	r0, r3
 800583a:	f7ff fdeb 	bl	8005414 <WIZCHIP_READ>
 800583e:	4603      	mov	r3, r0
 8005840:	b29b      	uxth	r3, r3
 8005842:	4423      	add	r3, r4
 8005844:	81fb      	strh	r3, [r7, #14]
   //M20140501 : implict type casting -> explict type casting
   //addrsel = (ptr << 8) + (WIZCHIP_TXBUF_BLOCK(sn) << 3);
   addrsel = ((uint32_t)ptr << 8) + (WIZCHIP_TXBUF_BLOCK(sn) << 3);
 8005846:	89fb      	ldrh	r3, [r7, #14]
 8005848:	021b      	lsls	r3, r3, #8
 800584a:	79fa      	ldrb	r2, [r7, #7]
 800584c:	0092      	lsls	r2, r2, #2
 800584e:	3202      	adds	r2, #2
 8005850:	00d2      	lsls	r2, r2, #3
 8005852:	4413      	add	r3, r2
 8005854:	60bb      	str	r3, [r7, #8]
   //
   WIZCHIP_WRITE_BUF(addrsel,wizdata, len);
 8005856:	88bb      	ldrh	r3, [r7, #4]
 8005858:	461a      	mov	r2, r3
 800585a:	6839      	ldr	r1, [r7, #0]
 800585c:	68b8      	ldr	r0, [r7, #8]
 800585e:	f7ff fed3 	bl	8005608 <WIZCHIP_WRITE_BUF>
   
   ptr += len;
 8005862:	89fa      	ldrh	r2, [r7, #14]
 8005864:	88bb      	ldrh	r3, [r7, #4]
 8005866:	4413      	add	r3, r2
 8005868:	81fb      	strh	r3, [r7, #14]
   setSn_TX_WR(sn,ptr);
 800586a:	79fb      	ldrb	r3, [r7, #7]
 800586c:	009b      	lsls	r3, r3, #2
 800586e:	3301      	adds	r3, #1
 8005870:	00db      	lsls	r3, r3, #3
 8005872:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 8005876:	461a      	mov	r2, r3
 8005878:	89fb      	ldrh	r3, [r7, #14]
 800587a:	0a1b      	lsrs	r3, r3, #8
 800587c:	b29b      	uxth	r3, r3
 800587e:	b2db      	uxtb	r3, r3
 8005880:	4619      	mov	r1, r3
 8005882:	4610      	mov	r0, r2
 8005884:	f7ff fe12 	bl	80054ac <WIZCHIP_WRITE>
 8005888:	79fb      	ldrb	r3, [r7, #7]
 800588a:	009b      	lsls	r3, r3, #2
 800588c:	3301      	adds	r3, #1
 800588e:	00db      	lsls	r3, r3, #3
 8005890:	f503 5314 	add.w	r3, r3, #9472	; 0x2500
 8005894:	461a      	mov	r2, r3
 8005896:	89fb      	ldrh	r3, [r7, #14]
 8005898:	b2db      	uxtb	r3, r3
 800589a:	4619      	mov	r1, r3
 800589c:	4610      	mov	r0, r2
 800589e:	f7ff fe05 	bl	80054ac <WIZCHIP_WRITE>
 80058a2:	e000      	b.n	80058a6 <wiz_send_data+0xb2>
   if(len == 0)  return;
 80058a4:	bf00      	nop
}
 80058a6:	3714      	adds	r7, #20
 80058a8:	46bd      	mov	sp, r7
 80058aa:	bd90      	pop	{r4, r7, pc}

080058ac <wiz_recv_data>:

void wiz_recv_data(uint8_t sn, uint8_t *wizdata, uint16_t len)
{
 80058ac:	b590      	push	{r4, r7, lr}
 80058ae:	b085      	sub	sp, #20
 80058b0:	af00      	add	r7, sp, #0
 80058b2:	4603      	mov	r3, r0
 80058b4:	6039      	str	r1, [r7, #0]
 80058b6:	71fb      	strb	r3, [r7, #7]
 80058b8:	4613      	mov	r3, r2
 80058ba:	80bb      	strh	r3, [r7, #4]
   uint16_t ptr = 0;
 80058bc:	2300      	movs	r3, #0
 80058be:	81fb      	strh	r3, [r7, #14]
   uint32_t addrsel = 0;
 80058c0:	2300      	movs	r3, #0
 80058c2:	60bb      	str	r3, [r7, #8]
   
   if(len == 0) return;
 80058c4:	88bb      	ldrh	r3, [r7, #4]
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d048      	beq.n	800595c <wiz_recv_data+0xb0>
   ptr = getSn_RX_RD(sn);
 80058ca:	79fb      	ldrb	r3, [r7, #7]
 80058cc:	009b      	lsls	r3, r3, #2
 80058ce:	3301      	adds	r3, #1
 80058d0:	00db      	lsls	r3, r3, #3
 80058d2:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 80058d6:	4618      	mov	r0, r3
 80058d8:	f7ff fd9c 	bl	8005414 <WIZCHIP_READ>
 80058dc:	4603      	mov	r3, r0
 80058de:	b29b      	uxth	r3, r3
 80058e0:	021b      	lsls	r3, r3, #8
 80058e2:	b29c      	uxth	r4, r3
 80058e4:	79fb      	ldrb	r3, [r7, #7]
 80058e6:	009b      	lsls	r3, r3, #2
 80058e8:	3301      	adds	r3, #1
 80058ea:	00db      	lsls	r3, r3, #3
 80058ec:	f503 5324 	add.w	r3, r3, #10496	; 0x2900
 80058f0:	4618      	mov	r0, r3
 80058f2:	f7ff fd8f 	bl	8005414 <WIZCHIP_READ>
 80058f6:	4603      	mov	r3, r0
 80058f8:	b29b      	uxth	r3, r3
 80058fa:	4423      	add	r3, r4
 80058fc:	81fb      	strh	r3, [r7, #14]
   //M20140501 : implict type casting -> explict type casting
   //addrsel = ((ptr << 8) + (WIZCHIP_RXBUF_BLOCK(sn) << 3);
   addrsel = ((uint32_t)ptr << 8) + (WIZCHIP_RXBUF_BLOCK(sn) << 3);
 80058fe:	89fb      	ldrh	r3, [r7, #14]
 8005900:	021b      	lsls	r3, r3, #8
 8005902:	79fa      	ldrb	r2, [r7, #7]
 8005904:	0092      	lsls	r2, r2, #2
 8005906:	3203      	adds	r2, #3
 8005908:	00d2      	lsls	r2, r2, #3
 800590a:	4413      	add	r3, r2
 800590c:	60bb      	str	r3, [r7, #8]
   //
   WIZCHIP_READ_BUF(addrsel, wizdata, len);
 800590e:	88bb      	ldrh	r3, [r7, #4]
 8005910:	461a      	mov	r2, r3
 8005912:	6839      	ldr	r1, [r7, #0]
 8005914:	68b8      	ldr	r0, [r7, #8]
 8005916:	f7ff fe17 	bl	8005548 <WIZCHIP_READ_BUF>
   ptr += len;
 800591a:	89fa      	ldrh	r2, [r7, #14]
 800591c:	88bb      	ldrh	r3, [r7, #4]
 800591e:	4413      	add	r3, r2
 8005920:	81fb      	strh	r3, [r7, #14]
   
   setSn_RX_RD(sn,ptr);
 8005922:	79fb      	ldrb	r3, [r7, #7]
 8005924:	009b      	lsls	r3, r3, #2
 8005926:	3301      	adds	r3, #1
 8005928:	00db      	lsls	r3, r3, #3
 800592a:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 800592e:	461a      	mov	r2, r3
 8005930:	89fb      	ldrh	r3, [r7, #14]
 8005932:	0a1b      	lsrs	r3, r3, #8
 8005934:	b29b      	uxth	r3, r3
 8005936:	b2db      	uxtb	r3, r3
 8005938:	4619      	mov	r1, r3
 800593a:	4610      	mov	r0, r2
 800593c:	f7ff fdb6 	bl	80054ac <WIZCHIP_WRITE>
 8005940:	79fb      	ldrb	r3, [r7, #7]
 8005942:	009b      	lsls	r3, r3, #2
 8005944:	3301      	adds	r3, #1
 8005946:	00db      	lsls	r3, r3, #3
 8005948:	f503 5324 	add.w	r3, r3, #10496	; 0x2900
 800594c:	461a      	mov	r2, r3
 800594e:	89fb      	ldrh	r3, [r7, #14]
 8005950:	b2db      	uxtb	r3, r3
 8005952:	4619      	mov	r1, r3
 8005954:	4610      	mov	r0, r2
 8005956:	f7ff fda9 	bl	80054ac <WIZCHIP_WRITE>
 800595a:	e000      	b.n	800595e <wiz_recv_data+0xb2>
   if(len == 0) return;
 800595c:	bf00      	nop
}
 800595e:	3714      	adds	r7, #20
 8005960:	46bd      	mov	sp, r7
 8005962:	bd90      	pop	{r4, r7, pc}

08005964 <wiz_recv_ignore>:


void wiz_recv_ignore(uint8_t sn, uint16_t len)
{
 8005964:	b590      	push	{r4, r7, lr}
 8005966:	b085      	sub	sp, #20
 8005968:	af00      	add	r7, sp, #0
 800596a:	4603      	mov	r3, r0
 800596c:	460a      	mov	r2, r1
 800596e:	71fb      	strb	r3, [r7, #7]
 8005970:	4613      	mov	r3, r2
 8005972:	80bb      	strh	r3, [r7, #4]
   uint16_t ptr = 0;
 8005974:	2300      	movs	r3, #0
 8005976:	81fb      	strh	r3, [r7, #14]

   ptr = getSn_RX_RD(sn);
 8005978:	79fb      	ldrb	r3, [r7, #7]
 800597a:	009b      	lsls	r3, r3, #2
 800597c:	3301      	adds	r3, #1
 800597e:	00db      	lsls	r3, r3, #3
 8005980:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 8005984:	4618      	mov	r0, r3
 8005986:	f7ff fd45 	bl	8005414 <WIZCHIP_READ>
 800598a:	4603      	mov	r3, r0
 800598c:	b29b      	uxth	r3, r3
 800598e:	021b      	lsls	r3, r3, #8
 8005990:	b29c      	uxth	r4, r3
 8005992:	79fb      	ldrb	r3, [r7, #7]
 8005994:	009b      	lsls	r3, r3, #2
 8005996:	3301      	adds	r3, #1
 8005998:	00db      	lsls	r3, r3, #3
 800599a:	f503 5324 	add.w	r3, r3, #10496	; 0x2900
 800599e:	4618      	mov	r0, r3
 80059a0:	f7ff fd38 	bl	8005414 <WIZCHIP_READ>
 80059a4:	4603      	mov	r3, r0
 80059a6:	b29b      	uxth	r3, r3
 80059a8:	4423      	add	r3, r4
 80059aa:	81fb      	strh	r3, [r7, #14]
   ptr += len;
 80059ac:	89fa      	ldrh	r2, [r7, #14]
 80059ae:	88bb      	ldrh	r3, [r7, #4]
 80059b0:	4413      	add	r3, r2
 80059b2:	81fb      	strh	r3, [r7, #14]
   setSn_RX_RD(sn,ptr);
 80059b4:	79fb      	ldrb	r3, [r7, #7]
 80059b6:	009b      	lsls	r3, r3, #2
 80059b8:	3301      	adds	r3, #1
 80059ba:	00db      	lsls	r3, r3, #3
 80059bc:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 80059c0:	461a      	mov	r2, r3
 80059c2:	89fb      	ldrh	r3, [r7, #14]
 80059c4:	0a1b      	lsrs	r3, r3, #8
 80059c6:	b29b      	uxth	r3, r3
 80059c8:	b2db      	uxtb	r3, r3
 80059ca:	4619      	mov	r1, r3
 80059cc:	4610      	mov	r0, r2
 80059ce:	f7ff fd6d 	bl	80054ac <WIZCHIP_WRITE>
 80059d2:	79fb      	ldrb	r3, [r7, #7]
 80059d4:	009b      	lsls	r3, r3, #2
 80059d6:	3301      	adds	r3, #1
 80059d8:	00db      	lsls	r3, r3, #3
 80059da:	f503 5324 	add.w	r3, r3, #10496	; 0x2900
 80059de:	461a      	mov	r2, r3
 80059e0:	89fb      	ldrh	r3, [r7, #14]
 80059e2:	b2db      	uxtb	r3, r3
 80059e4:	4619      	mov	r1, r3
 80059e6:	4610      	mov	r0, r2
 80059e8:	f7ff fd60 	bl	80054ac <WIZCHIP_WRITE>
}
 80059ec:	bf00      	nop
 80059ee:	3714      	adds	r7, #20
 80059f0:	46bd      	mov	sp, r7
 80059f2:	bd90      	pop	{r4, r7, pc}

080059f4 <wizchip_cris_enter>:
 * @brief Default function to enable interrupt.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	  wizchip_cris_enter(void)           {};
void 	  wizchip_cris_enter(void)           {}
 80059f4:	b480      	push	{r7}
 80059f6:	af00      	add	r7, sp, #0
 80059f8:	bf00      	nop
 80059fa:	46bd      	mov	sp, r7
 80059fc:	bc80      	pop	{r7}
 80059fe:	4770      	bx	lr

08005a00 <wizchip_cris_exit>:
 * @brief Default function to disable interrupt.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	  wizchip_cris_exit(void)          {};
void 	  wizchip_cris_exit(void)          {}
 8005a00:	b480      	push	{r7}
 8005a02:	af00      	add	r7, sp, #0
 8005a04:	bf00      	nop
 8005a06:	46bd      	mov	sp, r7
 8005a08:	bc80      	pop	{r7}
 8005a0a:	4770      	bx	lr

08005a0c <wizchip_cs_select>:
 * @brief Default function to select chip.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_cs_select(void)            {};
void 	wizchip_cs_select(void)            {}
 8005a0c:	b480      	push	{r7}
 8005a0e:	af00      	add	r7, sp, #0
 8005a10:	bf00      	nop
 8005a12:	46bd      	mov	sp, r7
 8005a14:	bc80      	pop	{r7}
 8005a16:	4770      	bx	lr

08005a18 <wizchip_cs_deselect>:
 * @brief Default function to deselect chip.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_cs_deselect(void)          {};
void 	wizchip_cs_deselect(void)          {}
 8005a18:	b480      	push	{r7}
 8005a1a:	af00      	add	r7, sp, #0
 8005a1c:	bf00      	nop
 8005a1e:	46bd      	mov	sp, r7
 8005a20:	bc80      	pop	{r7}
 8005a22:	4770      	bx	lr

08005a24 <wizchip_bus_readdata>:
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
 //M20150601 : Rename the function for integrating with W5300
//uint8_t wizchip_bus_readbyte(uint32_t AddrSel) { return * ((volatile uint8_t *)((ptrdiff_t) AddrSel)); }
iodata_t wizchip_bus_readdata(uint32_t AddrSel) { return * ((volatile iodata_t *)((ptrdiff_t) AddrSel)); }
 8005a24:	b480      	push	{r7}
 8005a26:	b083      	sub	sp, #12
 8005a28:	af00      	add	r7, sp, #0
 8005a2a:	6078      	str	r0, [r7, #4]
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	781b      	ldrb	r3, [r3, #0]
 8005a30:	b2db      	uxtb	r3, r3
 8005a32:	4618      	mov	r0, r3
 8005a34:	370c      	adds	r7, #12
 8005a36:	46bd      	mov	sp, r7
 8005a38:	bc80      	pop	{r7}
 8005a3a:	4770      	bx	lr

08005a3c <wizchip_bus_writedata>:
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//M20150601 : Rename the function for integrating with W5300
//void 	wizchip_bus_writebyte(uint32_t AddrSel, uint8_t wb)  { *((volatile uint8_t*)((ptrdiff_t)AddrSel)) = wb; }
void 	wizchip_bus_writedata(uint32_t AddrSel, iodata_t wb)  { *((volatile iodata_t*)((ptrdiff_t)AddrSel)) = wb; }
 8005a3c:	b480      	push	{r7}
 8005a3e:	b083      	sub	sp, #12
 8005a40:	af00      	add	r7, sp, #0
 8005a42:	6078      	str	r0, [r7, #4]
 8005a44:	460b      	mov	r3, r1
 8005a46:	70fb      	strb	r3, [r7, #3]
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	78fa      	ldrb	r2, [r7, #3]
 8005a4c:	701a      	strb	r2, [r3, #0]
 8005a4e:	bf00      	nop
 8005a50:	370c      	adds	r7, #12
 8005a52:	46bd      	mov	sp, r7
 8005a54:	bc80      	pop	{r7}
 8005a56:	4770      	bx	lr

08005a58 <wizchip_spi_readbyte>:
 * @brief Default function to read in SPI interface.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//uint8_t wizchip_spi_readbyte(void)        {return 0;};
uint8_t wizchip_spi_readbyte(void)        {return 0;}
 8005a58:	b480      	push	{r7}
 8005a5a:	af00      	add	r7, sp, #0
 8005a5c:	2300      	movs	r3, #0
 8005a5e:	4618      	mov	r0, r3
 8005a60:	46bd      	mov	sp, r7
 8005a62:	bc80      	pop	{r7}
 8005a64:	4770      	bx	lr

08005a66 <wizchip_spi_writebyte>:
 * @brief Default function to write in SPI interface.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_spi_writebyte(uint8_t wb) {};
void 	wizchip_spi_writebyte(uint8_t wb) {}
 8005a66:	b480      	push	{r7}
 8005a68:	b083      	sub	sp, #12
 8005a6a:	af00      	add	r7, sp, #0
 8005a6c:	4603      	mov	r3, r0
 8005a6e:	71fb      	strb	r3, [r7, #7]
 8005a70:	bf00      	nop
 8005a72:	370c      	adds	r7, #12
 8005a74:	46bd      	mov	sp, r7
 8005a76:	bc80      	pop	{r7}
 8005a78:	4770      	bx	lr

08005a7a <wizchip_spi_readburst>:
 * @brief Default function to burst read in SPI interface.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_spi_readburst(uint8_t* pBuf, uint16_t len) 	{}; 
void 	wizchip_spi_readburst(uint8_t* pBuf, uint16_t len) 	{}
 8005a7a:	b480      	push	{r7}
 8005a7c:	b083      	sub	sp, #12
 8005a7e:	af00      	add	r7, sp, #0
 8005a80:	6078      	str	r0, [r7, #4]
 8005a82:	460b      	mov	r3, r1
 8005a84:	807b      	strh	r3, [r7, #2]
 8005a86:	bf00      	nop
 8005a88:	370c      	adds	r7, #12
 8005a8a:	46bd      	mov	sp, r7
 8005a8c:	bc80      	pop	{r7}
 8005a8e:	4770      	bx	lr

08005a90 <wizchip_spi_writeburst>:
 * @brief Default function to burst write in SPI interface.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_spi_writeburst(uint8_t* pBuf, uint16_t len) {};
void 	wizchip_spi_writeburst(uint8_t* pBuf, uint16_t len) {}
 8005a90:	b480      	push	{r7}
 8005a92:	b083      	sub	sp, #12
 8005a94:	af00      	add	r7, sp, #0
 8005a96:	6078      	str	r0, [r7, #4]
 8005a98:	460b      	mov	r3, r1
 8005a9a:	807b      	strh	r3, [r7, #2]
 8005a9c:	bf00      	nop
 8005a9e:	370c      	adds	r7, #12
 8005aa0:	46bd      	mov	sp, r7
 8005aa2:	bc80      	pop	{r7}
 8005aa4:	4770      	bx	lr
	...

08005aa8 <reg_wizchip_cs_cbfunc>:
      WIZCHIP.CRIS._exit  = cris_ex;
   }
}

void reg_wizchip_cs_cbfunc(void(*cs_sel)(void), void(*cs_desel)(void))
{
 8005aa8:	b480      	push	{r7}
 8005aaa:	b083      	sub	sp, #12
 8005aac:	af00      	add	r7, sp, #0
 8005aae:	6078      	str	r0, [r7, #4]
 8005ab0:	6039      	str	r1, [r7, #0]
   if(!cs_sel || !cs_desel)
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	d002      	beq.n	8005abe <reg_wizchip_cs_cbfunc+0x16>
 8005ab8:	683b      	ldr	r3, [r7, #0]
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	d106      	bne.n	8005acc <reg_wizchip_cs_cbfunc+0x24>
   {
      WIZCHIP.CS._select   = wizchip_cs_select;
 8005abe:	4b09      	ldr	r3, [pc, #36]	; (8005ae4 <reg_wizchip_cs_cbfunc+0x3c>)
 8005ac0:	4a09      	ldr	r2, [pc, #36]	; (8005ae8 <reg_wizchip_cs_cbfunc+0x40>)
 8005ac2:	615a      	str	r2, [r3, #20]
      WIZCHIP.CS._deselect = wizchip_cs_deselect;
 8005ac4:	4b07      	ldr	r3, [pc, #28]	; (8005ae4 <reg_wizchip_cs_cbfunc+0x3c>)
 8005ac6:	4a09      	ldr	r2, [pc, #36]	; (8005aec <reg_wizchip_cs_cbfunc+0x44>)
 8005ac8:	619a      	str	r2, [r3, #24]
 8005aca:	e006      	b.n	8005ada <reg_wizchip_cs_cbfunc+0x32>
   }
   else
   {
      WIZCHIP.CS._select   = cs_sel;
 8005acc:	4a05      	ldr	r2, [pc, #20]	; (8005ae4 <reg_wizchip_cs_cbfunc+0x3c>)
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	6153      	str	r3, [r2, #20]
      WIZCHIP.CS._deselect = cs_desel;
 8005ad2:	4a04      	ldr	r2, [pc, #16]	; (8005ae4 <reg_wizchip_cs_cbfunc+0x3c>)
 8005ad4:	683b      	ldr	r3, [r7, #0]
 8005ad6:	6193      	str	r3, [r2, #24]
   }
}
 8005ad8:	bf00      	nop
 8005ada:	bf00      	nop
 8005adc:	370c      	adds	r7, #12
 8005ade:	46bd      	mov	sp, r7
 8005ae0:	bc80      	pop	{r7}
 8005ae2:	4770      	bx	lr
 8005ae4:	20000024 	.word	0x20000024
 8005ae8:	08005a0d 	.word	0x08005a0d
 8005aec:	08005a19 	.word	0x08005a19

08005af0 <reg_wizchip_spi_cbfunc>:
      WIZCHIP.IF.BUS._write_data  = bus_wb;
   }
}

void reg_wizchip_spi_cbfunc(uint8_t (*spi_rb)(void), void (*spi_wb)(uint8_t wb))
{
 8005af0:	b480      	push	{r7}
 8005af2:	b083      	sub	sp, #12
 8005af4:	af00      	add	r7, sp, #0
 8005af6:	6078      	str	r0, [r7, #4]
 8005af8:	6039      	str	r1, [r7, #0]
   while(!(WIZCHIP.if_mode & _WIZCHIP_IO_MODE_SPI_));
 8005afa:	bf00      	nop
 8005afc:	4b0f      	ldr	r3, [pc, #60]	; (8005b3c <reg_wizchip_spi_cbfunc+0x4c>)
 8005afe:	881b      	ldrh	r3, [r3, #0]
 8005b00:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	d0f9      	beq.n	8005afc <reg_wizchip_spi_cbfunc+0xc>
   
   if(!spi_rb || !spi_wb)
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	d002      	beq.n	8005b14 <reg_wizchip_spi_cbfunc+0x24>
 8005b0e:	683b      	ldr	r3, [r7, #0]
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	d106      	bne.n	8005b22 <reg_wizchip_spi_cbfunc+0x32>
   {
      WIZCHIP.IF.SPI._read_byte   = wizchip_spi_readbyte;
 8005b14:	4b09      	ldr	r3, [pc, #36]	; (8005b3c <reg_wizchip_spi_cbfunc+0x4c>)
 8005b16:	4a0a      	ldr	r2, [pc, #40]	; (8005b40 <reg_wizchip_spi_cbfunc+0x50>)
 8005b18:	61da      	str	r2, [r3, #28]
      WIZCHIP.IF.SPI._write_byte  = wizchip_spi_writebyte;
 8005b1a:	4b08      	ldr	r3, [pc, #32]	; (8005b3c <reg_wizchip_spi_cbfunc+0x4c>)
 8005b1c:	4a09      	ldr	r2, [pc, #36]	; (8005b44 <reg_wizchip_spi_cbfunc+0x54>)
 8005b1e:	621a      	str	r2, [r3, #32]
 8005b20:	e006      	b.n	8005b30 <reg_wizchip_spi_cbfunc+0x40>
   }
   else
   {
      WIZCHIP.IF.SPI._read_byte   = spi_rb;
 8005b22:	4a06      	ldr	r2, [pc, #24]	; (8005b3c <reg_wizchip_spi_cbfunc+0x4c>)
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	61d3      	str	r3, [r2, #28]
      WIZCHIP.IF.SPI._write_byte  = spi_wb;
 8005b28:	4a04      	ldr	r2, [pc, #16]	; (8005b3c <reg_wizchip_spi_cbfunc+0x4c>)
 8005b2a:	683b      	ldr	r3, [r7, #0]
 8005b2c:	6213      	str	r3, [r2, #32]
   }
}
 8005b2e:	bf00      	nop
 8005b30:	bf00      	nop
 8005b32:	370c      	adds	r7, #12
 8005b34:	46bd      	mov	sp, r7
 8005b36:	bc80      	pop	{r7}
 8005b38:	4770      	bx	lr
 8005b3a:	bf00      	nop
 8005b3c:	20000024 	.word	0x20000024
 8005b40:	08005a59 	.word	0x08005a59
 8005b44:	08005a67 	.word	0x08005a67

08005b48 <reg_wizchip_spiburst_cbfunc>:

// 20140626 Eric Added for SPI burst operations
void reg_wizchip_spiburst_cbfunc(void (*spi_rb)(uint8_t* pBuf, uint16_t len), void (*spi_wb)(uint8_t* pBuf, uint16_t len))
{
 8005b48:	b480      	push	{r7}
 8005b4a:	b083      	sub	sp, #12
 8005b4c:	af00      	add	r7, sp, #0
 8005b4e:	6078      	str	r0, [r7, #4]
 8005b50:	6039      	str	r1, [r7, #0]
   while(!(WIZCHIP.if_mode & _WIZCHIP_IO_MODE_SPI_));
 8005b52:	bf00      	nop
 8005b54:	4b0f      	ldr	r3, [pc, #60]	; (8005b94 <reg_wizchip_spiburst_cbfunc+0x4c>)
 8005b56:	881b      	ldrh	r3, [r3, #0]
 8005b58:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	d0f9      	beq.n	8005b54 <reg_wizchip_spiburst_cbfunc+0xc>

   if(!spi_rb || !spi_wb)
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	d002      	beq.n	8005b6c <reg_wizchip_spiburst_cbfunc+0x24>
 8005b66:	683b      	ldr	r3, [r7, #0]
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	d106      	bne.n	8005b7a <reg_wizchip_spiburst_cbfunc+0x32>
   {
      WIZCHIP.IF.SPI._read_burst   = wizchip_spi_readburst;
 8005b6c:	4b09      	ldr	r3, [pc, #36]	; (8005b94 <reg_wizchip_spiburst_cbfunc+0x4c>)
 8005b6e:	4a0a      	ldr	r2, [pc, #40]	; (8005b98 <reg_wizchip_spiburst_cbfunc+0x50>)
 8005b70:	625a      	str	r2, [r3, #36]	; 0x24
      WIZCHIP.IF.SPI._write_burst  = wizchip_spi_writeburst;
 8005b72:	4b08      	ldr	r3, [pc, #32]	; (8005b94 <reg_wizchip_spiburst_cbfunc+0x4c>)
 8005b74:	4a09      	ldr	r2, [pc, #36]	; (8005b9c <reg_wizchip_spiburst_cbfunc+0x54>)
 8005b76:	629a      	str	r2, [r3, #40]	; 0x28
 8005b78:	e006      	b.n	8005b88 <reg_wizchip_spiburst_cbfunc+0x40>
   }
   else
   {
      WIZCHIP.IF.SPI._read_burst   = spi_rb;
 8005b7a:	4a06      	ldr	r2, [pc, #24]	; (8005b94 <reg_wizchip_spiburst_cbfunc+0x4c>)
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	6253      	str	r3, [r2, #36]	; 0x24
      WIZCHIP.IF.SPI._write_burst  = spi_wb;
 8005b80:	4a04      	ldr	r2, [pc, #16]	; (8005b94 <reg_wizchip_spiburst_cbfunc+0x4c>)
 8005b82:	683b      	ldr	r3, [r7, #0]
 8005b84:	6293      	str	r3, [r2, #40]	; 0x28
   }
}
 8005b86:	bf00      	nop
 8005b88:	bf00      	nop
 8005b8a:	370c      	adds	r7, #12
 8005b8c:	46bd      	mov	sp, r7
 8005b8e:	bc80      	pop	{r7}
 8005b90:	4770      	bx	lr
 8005b92:	bf00      	nop
 8005b94:	20000024 	.word	0x20000024
 8005b98:	08005a7b 	.word	0x08005a7b
 8005b9c:	08005a91 	.word	0x08005a91

08005ba0 <wizchip_sw_reset>:
   }
   return 0;
}

void wizchip_sw_reset(void)
{
 8005ba0:	b580      	push	{r7, lr}
 8005ba2:	b086      	sub	sp, #24
 8005ba4:	af00      	add	r7, sp, #0
#if _WIZCHIP_IO_MODE_  == _WIZCHIP_IO_MODE_BUS_INDIR_
   uint16_t mr = (uint16_t)getMR();
   setMR(mr | MR_IND);
#endif
//
   getSHAR(mac);
 8005ba6:	1d3b      	adds	r3, r7, #4
 8005ba8:	2206      	movs	r2, #6
 8005baa:	4619      	mov	r1, r3
 8005bac:	f44f 6010 	mov.w	r0, #2304	; 0x900
 8005bb0:	f7ff fcca 	bl	8005548 <WIZCHIP_READ_BUF>
   getGAR(gw);  getSUBR(sn);  getSIPR(sip);
 8005bb4:	f107 0314 	add.w	r3, r7, #20
 8005bb8:	2204      	movs	r2, #4
 8005bba:	4619      	mov	r1, r3
 8005bbc:	f44f 7080 	mov.w	r0, #256	; 0x100
 8005bc0:	f7ff fcc2 	bl	8005548 <WIZCHIP_READ_BUF>
 8005bc4:	f107 0310 	add.w	r3, r7, #16
 8005bc8:	2204      	movs	r2, #4
 8005bca:	4619      	mov	r1, r3
 8005bcc:	f44f 60a0 	mov.w	r0, #1280	; 0x500
 8005bd0:	f7ff fcba 	bl	8005548 <WIZCHIP_READ_BUF>
 8005bd4:	f107 030c 	add.w	r3, r7, #12
 8005bd8:	2204      	movs	r2, #4
 8005bda:	4619      	mov	r1, r3
 8005bdc:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 8005be0:	f7ff fcb2 	bl	8005548 <WIZCHIP_READ_BUF>
   setMR(MR_RST);
 8005be4:	2180      	movs	r1, #128	; 0x80
 8005be6:	2000      	movs	r0, #0
 8005be8:	f7ff fc60 	bl	80054ac <WIZCHIP_WRITE>
   getMR(); // for delay
 8005bec:	2000      	movs	r0, #0
 8005bee:	f7ff fc11 	bl	8005414 <WIZCHIP_READ>
//A2015051 : For indirect bus mode 
#if _WIZCHIP_IO_MODE_  == _WIZCHIP_IO_MODE_BUS_INDIR_
   setMR(mr | MR_IND);
#endif
//
   setSHAR(mac);
 8005bf2:	1d3b      	adds	r3, r7, #4
 8005bf4:	2206      	movs	r2, #6
 8005bf6:	4619      	mov	r1, r3
 8005bf8:	f44f 6010 	mov.w	r0, #2304	; 0x900
 8005bfc:	f7ff fd04 	bl	8005608 <WIZCHIP_WRITE_BUF>
   setGAR(gw);
 8005c00:	f107 0314 	add.w	r3, r7, #20
 8005c04:	2204      	movs	r2, #4
 8005c06:	4619      	mov	r1, r3
 8005c08:	f44f 7080 	mov.w	r0, #256	; 0x100
 8005c0c:	f7ff fcfc 	bl	8005608 <WIZCHIP_WRITE_BUF>
   setSUBR(sn);
 8005c10:	f107 0310 	add.w	r3, r7, #16
 8005c14:	2204      	movs	r2, #4
 8005c16:	4619      	mov	r1, r3
 8005c18:	f44f 60a0 	mov.w	r0, #1280	; 0x500
 8005c1c:	f7ff fcf4 	bl	8005608 <WIZCHIP_WRITE_BUF>
   setSIPR(sip);
 8005c20:	f107 030c 	add.w	r3, r7, #12
 8005c24:	2204      	movs	r2, #4
 8005c26:	4619      	mov	r1, r3
 8005c28:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 8005c2c:	f7ff fcec 	bl	8005608 <WIZCHIP_WRITE_BUF>
}
 8005c30:	bf00      	nop
 8005c32:	3718      	adds	r7, #24
 8005c34:	46bd      	mov	sp, r7
 8005c36:	bd80      	pop	{r7, pc}

08005c38 <wizchip_init>:

int8_t wizchip_init(uint8_t* txsize, uint8_t* rxsize)
{
 8005c38:	b580      	push	{r7, lr}
 8005c3a:	b084      	sub	sp, #16
 8005c3c:	af00      	add	r7, sp, #0
 8005c3e:	6078      	str	r0, [r7, #4]
 8005c40:	6039      	str	r1, [r7, #0]
   int8_t i;
#if _WIZCHIP_ < W5200
   int8_t j;
#endif
   int8_t tmp = 0;
 8005c42:	2300      	movs	r3, #0
 8005c44:	73bb      	strb	r3, [r7, #14]
   wizchip_sw_reset();
 8005c46:	f7ff ffab 	bl	8005ba0 <wizchip_sw_reset>
   if(txsize)
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	d03b      	beq.n	8005cc8 <wizchip_init+0x90>
   {
      tmp = 0;
 8005c50:	2300      	movs	r3, #0
 8005c52:	73bb      	strb	r3, [r7, #14]
			tmp += txsize[i];
			if(tmp > 128) return -1;
		}
		if(tmp % 8) return -1;
   #else
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8005c54:	2300      	movs	r3, #0
 8005c56:	73fb      	strb	r3, [r7, #15]
 8005c58:	e015      	b.n	8005c86 <wizchip_init+0x4e>
		{
			tmp += txsize[i];
 8005c5a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005c5e:	687a      	ldr	r2, [r7, #4]
 8005c60:	4413      	add	r3, r2
 8005c62:	781a      	ldrb	r2, [r3, #0]
 8005c64:	7bbb      	ldrb	r3, [r7, #14]
 8005c66:	4413      	add	r3, r2
 8005c68:	b2db      	uxtb	r3, r3
 8005c6a:	73bb      	strb	r3, [r7, #14]

		#if _WIZCHIP_ < W5200	//2016.10.28 peter add condition for w5100 and w5100s
			if(tmp > 8) return -1;
		#else
			if(tmp > 16) return -1;
 8005c6c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005c70:	2b10      	cmp	r3, #16
 8005c72:	dd02      	ble.n	8005c7a <wizchip_init+0x42>
 8005c74:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005c78:	e066      	b.n	8005d48 <wizchip_init+0x110>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8005c7a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005c7e:	b2db      	uxtb	r3, r3
 8005c80:	3301      	adds	r3, #1
 8005c82:	b2db      	uxtb	r3, r3
 8005c84:	73fb      	strb	r3, [r7, #15]
 8005c86:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005c8a:	2b07      	cmp	r3, #7
 8005c8c:	dde5      	ble.n	8005c5a <wizchip_init+0x22>
		#endif
		}
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8005c8e:	2300      	movs	r3, #0
 8005c90:	73fb      	strb	r3, [r7, #15]
 8005c92:	e015      	b.n	8005cc0 <wizchip_init+0x88>
		#if _WIZCHIP_ < W5200	//2016.10.28 peter add condition for w5100
			j = 0;
			while((txsize[i] >> j != 1)&&(txsize[i] !=0)){j++;}
			setSn_TXBUF_SIZE(i, j);
		#else
			setSn_TXBUF_SIZE(i, txsize[i]);
 8005c94:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005c98:	009b      	lsls	r3, r3, #2
 8005c9a:	3301      	adds	r3, #1
 8005c9c:	00db      	lsls	r3, r3, #3
 8005c9e:	f503 53f8 	add.w	r3, r3, #7936	; 0x1f00
 8005ca2:	4618      	mov	r0, r3
 8005ca4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005ca8:	687a      	ldr	r2, [r7, #4]
 8005caa:	4413      	add	r3, r2
 8005cac:	781b      	ldrb	r3, [r3, #0]
 8005cae:	4619      	mov	r1, r3
 8005cb0:	f7ff fbfc 	bl	80054ac <WIZCHIP_WRITE>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8005cb4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005cb8:	b2db      	uxtb	r3, r3
 8005cba:	3301      	adds	r3, #1
 8005cbc:	b2db      	uxtb	r3, r3
 8005cbe:	73fb      	strb	r3, [r7, #15]
 8005cc0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005cc4:	2b07      	cmp	r3, #7
 8005cc6:	dde5      	ble.n	8005c94 <wizchip_init+0x5c>
		}

	#endif
   }

   if(rxsize)
 8005cc8:	683b      	ldr	r3, [r7, #0]
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	d03b      	beq.n	8005d46 <wizchip_init+0x10e>
   {
      tmp = 0;
 8005cce:	2300      	movs	r3, #0
 8005cd0:	73bb      	strb	r3, [r7, #14]
			tmp += rxsize[i];
			if(tmp > 128) return -1;
		}
		if(tmp % 8) return -1;
   #else
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8005cd2:	2300      	movs	r3, #0
 8005cd4:	73fb      	strb	r3, [r7, #15]
 8005cd6:	e015      	b.n	8005d04 <wizchip_init+0xcc>
		{
			tmp += rxsize[i];
 8005cd8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005cdc:	683a      	ldr	r2, [r7, #0]
 8005cde:	4413      	add	r3, r2
 8005ce0:	781a      	ldrb	r2, [r3, #0]
 8005ce2:	7bbb      	ldrb	r3, [r7, #14]
 8005ce4:	4413      	add	r3, r2
 8005ce6:	b2db      	uxtb	r3, r3
 8005ce8:	73bb      	strb	r3, [r7, #14]
		#if _WIZCHIP_ < W5200	//2016.10.28 peter add condition for w5100 and w5100s
			if(tmp > 8) return -1;
		#else
			if(tmp > 16) return -1;
 8005cea:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005cee:	2b10      	cmp	r3, #16
 8005cf0:	dd02      	ble.n	8005cf8 <wizchip_init+0xc0>
 8005cf2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005cf6:	e027      	b.n	8005d48 <wizchip_init+0x110>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8005cf8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005cfc:	b2db      	uxtb	r3, r3
 8005cfe:	3301      	adds	r3, #1
 8005d00:	b2db      	uxtb	r3, r3
 8005d02:	73fb      	strb	r3, [r7, #15]
 8005d04:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005d08:	2b07      	cmp	r3, #7
 8005d0a:	dde5      	ble.n	8005cd8 <wizchip_init+0xa0>
		#endif
		}

		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8005d0c:	2300      	movs	r3, #0
 8005d0e:	73fb      	strb	r3, [r7, #15]
 8005d10:	e015      	b.n	8005d3e <wizchip_init+0x106>
		#if _WIZCHIP_ < W5200	// add condition for w5100
			j = 0;
			while((rxsize[i] >> j != 1)&&(txsize[i] !=0)){j++;}
			setSn_RXBUF_SIZE(i, j);
		#else
			setSn_RXBUF_SIZE(i, rxsize[i]);
 8005d12:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005d16:	009b      	lsls	r3, r3, #2
 8005d18:	3301      	adds	r3, #1
 8005d1a:	00db      	lsls	r3, r3, #3
 8005d1c:	f503 53f0 	add.w	r3, r3, #7680	; 0x1e00
 8005d20:	4618      	mov	r0, r3
 8005d22:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005d26:	683a      	ldr	r2, [r7, #0]
 8005d28:	4413      	add	r3, r2
 8005d2a:	781b      	ldrb	r3, [r3, #0]
 8005d2c:	4619      	mov	r1, r3
 8005d2e:	f7ff fbbd 	bl	80054ac <WIZCHIP_WRITE>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8005d32:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005d36:	b2db      	uxtb	r3, r3
 8005d38:	3301      	adds	r3, #1
 8005d3a:	b2db      	uxtb	r3, r3
 8005d3c:	73fb      	strb	r3, [r7, #15]
 8005d3e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005d42:	2b07      	cmp	r3, #7
 8005d44:	dde5      	ble.n	8005d12 <wizchip_init+0xda>
		#endif
		}
	#endif
   }
   return 0;
 8005d46:	2300      	movs	r3, #0
}
 8005d48:	4618      	mov	r0, r3
 8005d4a:	3710      	adds	r7, #16
 8005d4c:	46bd      	mov	sp, r7
 8005d4e:	bd80      	pop	{r7, pc}

08005d50 <wizchip_setnetinfo>:
}
#endif


void wizchip_setnetinfo(wiz_NetInfo* pnetinfo)
{
 8005d50:	b580      	push	{r7, lr}
 8005d52:	b082      	sub	sp, #8
 8005d54:	af00      	add	r7, sp, #0
 8005d56:	6078      	str	r0, [r7, #4]
   setSHAR(pnetinfo->mac);
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	2206      	movs	r2, #6
 8005d5c:	4619      	mov	r1, r3
 8005d5e:	f44f 6010 	mov.w	r0, #2304	; 0x900
 8005d62:	f7ff fc51 	bl	8005608 <WIZCHIP_WRITE_BUF>
   setGAR(pnetinfo->gw);
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	330e      	adds	r3, #14
 8005d6a:	2204      	movs	r2, #4
 8005d6c:	4619      	mov	r1, r3
 8005d6e:	f44f 7080 	mov.w	r0, #256	; 0x100
 8005d72:	f7ff fc49 	bl	8005608 <WIZCHIP_WRITE_BUF>
   setSUBR(pnetinfo->sn);
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	330a      	adds	r3, #10
 8005d7a:	2204      	movs	r2, #4
 8005d7c:	4619      	mov	r1, r3
 8005d7e:	f44f 60a0 	mov.w	r0, #1280	; 0x500
 8005d82:	f7ff fc41 	bl	8005608 <WIZCHIP_WRITE_BUF>
   setSIPR(pnetinfo->ip);
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	3306      	adds	r3, #6
 8005d8a:	2204      	movs	r2, #4
 8005d8c:	4619      	mov	r1, r3
 8005d8e:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 8005d92:	f7ff fc39 	bl	8005608 <WIZCHIP_WRITE_BUF>
   _DNS_[0] = pnetinfo->dns[0];
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	7c9a      	ldrb	r2, [r3, #18]
 8005d9a:	4b0b      	ldr	r3, [pc, #44]	; (8005dc8 <wizchip_setnetinfo+0x78>)
 8005d9c:	701a      	strb	r2, [r3, #0]
   _DNS_[1] = pnetinfo->dns[1];
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	7cda      	ldrb	r2, [r3, #19]
 8005da2:	4b09      	ldr	r3, [pc, #36]	; (8005dc8 <wizchip_setnetinfo+0x78>)
 8005da4:	705a      	strb	r2, [r3, #1]
   _DNS_[2] = pnetinfo->dns[2];
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	7d1a      	ldrb	r2, [r3, #20]
 8005daa:	4b07      	ldr	r3, [pc, #28]	; (8005dc8 <wizchip_setnetinfo+0x78>)
 8005dac:	709a      	strb	r2, [r3, #2]
   _DNS_[3] = pnetinfo->dns[3];
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	7d5a      	ldrb	r2, [r3, #21]
 8005db2:	4b05      	ldr	r3, [pc, #20]	; (8005dc8 <wizchip_setnetinfo+0x78>)
 8005db4:	70da      	strb	r2, [r3, #3]
   _DHCP_   = pnetinfo->dhcp;
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	7d9a      	ldrb	r2, [r3, #22]
 8005dba:	4b04      	ldr	r3, [pc, #16]	; (8005dcc <wizchip_setnetinfo+0x7c>)
 8005dbc:	701a      	strb	r2, [r3, #0]
}
 8005dbe:	bf00      	nop
 8005dc0:	3708      	adds	r7, #8
 8005dc2:	46bd      	mov	sp, r7
 8005dc4:	bd80      	pop	{r7, pc}
 8005dc6:	bf00      	nop
 8005dc8:	20000180 	.word	0x20000180
 8005dcc:	20000184 	.word	0x20000184

08005dd0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8005dd0:	480c      	ldr	r0, [pc, #48]	; (8005e04 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8005dd2:	490d      	ldr	r1, [pc, #52]	; (8005e08 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8005dd4:	4a0d      	ldr	r2, [pc, #52]	; (8005e0c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8005dd6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8005dd8:	e002      	b.n	8005de0 <LoopCopyDataInit>

08005dda <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8005dda:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8005ddc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8005dde:	3304      	adds	r3, #4

08005de0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8005de0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8005de2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8005de4:	d3f9      	bcc.n	8005dda <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8005de6:	4a0a      	ldr	r2, [pc, #40]	; (8005e10 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8005de8:	4c0a      	ldr	r4, [pc, #40]	; (8005e14 <LoopFillZerobss+0x22>)
  movs r3, #0
 8005dea:	2300      	movs	r3, #0
  b LoopFillZerobss
 8005dec:	e001      	b.n	8005df2 <LoopFillZerobss>

08005dee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8005dee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8005df0:	3204      	adds	r2, #4

08005df2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8005df2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8005df4:	d3fb      	bcc.n	8005dee <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8005df6:	f7ff fb07 	bl	8005408 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8005dfa:	f005 fa71 	bl	800b2e0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8005dfe:	f7fc fe97 	bl	8002b30 <main>
  bx lr
 8005e02:	4770      	bx	lr
  ldr r0, =_sdata
 8005e04:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8005e08:	200000bc 	.word	0x200000bc
  ldr r2, =_sidata
 8005e0c:	0800c12c 	.word	0x0800c12c
  ldr r2, =_sbss
 8005e10:	200000c0 	.word	0x200000c0
  ldr r4, =_ebss
 8005e14:	20000494 	.word	0x20000494

08005e18 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8005e18:	e7fe      	b.n	8005e18 <ADC1_2_IRQHandler>
	...

08005e1c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005e1c:	b580      	push	{r7, lr}
 8005e1e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8005e20:	4b08      	ldr	r3, [pc, #32]	; (8005e44 <HAL_Init+0x28>)
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	4a07      	ldr	r2, [pc, #28]	; (8005e44 <HAL_Init+0x28>)
 8005e26:	f043 0310 	orr.w	r3, r3, #16
 8005e2a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005e2c:	2003      	movs	r0, #3
 8005e2e:	f000 f947 	bl	80060c0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8005e32:	2000      	movs	r0, #0
 8005e34:	f000 f808 	bl	8005e48 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8005e38:	f7fe fe8a 	bl	8004b50 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8005e3c:	2300      	movs	r3, #0
}
 8005e3e:	4618      	mov	r0, r3
 8005e40:	bd80      	pop	{r7, pc}
 8005e42:	bf00      	nop
 8005e44:	40022000 	.word	0x40022000

08005e48 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005e48:	b580      	push	{r7, lr}
 8005e4a:	b082      	sub	sp, #8
 8005e4c:	af00      	add	r7, sp, #0
 8005e4e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8005e50:	4b12      	ldr	r3, [pc, #72]	; (8005e9c <HAL_InitTick+0x54>)
 8005e52:	681a      	ldr	r2, [r3, #0]
 8005e54:	4b12      	ldr	r3, [pc, #72]	; (8005ea0 <HAL_InitTick+0x58>)
 8005e56:	781b      	ldrb	r3, [r3, #0]
 8005e58:	4619      	mov	r1, r3
 8005e5a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005e5e:	fbb3 f3f1 	udiv	r3, r3, r1
 8005e62:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e66:	4618      	mov	r0, r3
 8005e68:	f000 f95f 	bl	800612a <HAL_SYSTICK_Config>
 8005e6c:	4603      	mov	r3, r0
 8005e6e:	2b00      	cmp	r3, #0
 8005e70:	d001      	beq.n	8005e76 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8005e72:	2301      	movs	r3, #1
 8005e74:	e00e      	b.n	8005e94 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	2b0f      	cmp	r3, #15
 8005e7a:	d80a      	bhi.n	8005e92 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8005e7c:	2200      	movs	r2, #0
 8005e7e:	6879      	ldr	r1, [r7, #4]
 8005e80:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005e84:	f000 f927 	bl	80060d6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8005e88:	4a06      	ldr	r2, [pc, #24]	; (8005ea4 <HAL_InitTick+0x5c>)
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8005e8e:	2300      	movs	r3, #0
 8005e90:	e000      	b.n	8005e94 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8005e92:	2301      	movs	r3, #1
}
 8005e94:	4618      	mov	r0, r3
 8005e96:	3708      	adds	r7, #8
 8005e98:	46bd      	mov	sp, r7
 8005e9a:	bd80      	pop	{r7, pc}
 8005e9c:	20000020 	.word	0x20000020
 8005ea0:	20000054 	.word	0x20000054
 8005ea4:	20000050 	.word	0x20000050

08005ea8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005ea8:	b480      	push	{r7}
 8005eaa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8005eac:	4b05      	ldr	r3, [pc, #20]	; (8005ec4 <HAL_IncTick+0x1c>)
 8005eae:	781b      	ldrb	r3, [r3, #0]
 8005eb0:	461a      	mov	r2, r3
 8005eb2:	4b05      	ldr	r3, [pc, #20]	; (8005ec8 <HAL_IncTick+0x20>)
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	4413      	add	r3, r2
 8005eb8:	4a03      	ldr	r2, [pc, #12]	; (8005ec8 <HAL_IncTick+0x20>)
 8005eba:	6013      	str	r3, [r2, #0]
}
 8005ebc:	bf00      	nop
 8005ebe:	46bd      	mov	sp, r7
 8005ec0:	bc80      	pop	{r7}
 8005ec2:	4770      	bx	lr
 8005ec4:	20000054 	.word	0x20000054
 8005ec8:	20000480 	.word	0x20000480

08005ecc <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005ecc:	b480      	push	{r7}
 8005ece:	af00      	add	r7, sp, #0
  return uwTick;
 8005ed0:	4b02      	ldr	r3, [pc, #8]	; (8005edc <HAL_GetTick+0x10>)
 8005ed2:	681b      	ldr	r3, [r3, #0]
}
 8005ed4:	4618      	mov	r0, r3
 8005ed6:	46bd      	mov	sp, r7
 8005ed8:	bc80      	pop	{r7}
 8005eda:	4770      	bx	lr
 8005edc:	20000480 	.word	0x20000480

08005ee0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005ee0:	b580      	push	{r7, lr}
 8005ee2:	b084      	sub	sp, #16
 8005ee4:	af00      	add	r7, sp, #0
 8005ee6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8005ee8:	f7ff fff0 	bl	8005ecc <HAL_GetTick>
 8005eec:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005ef8:	d005      	beq.n	8005f06 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8005efa:	4b0a      	ldr	r3, [pc, #40]	; (8005f24 <HAL_Delay+0x44>)
 8005efc:	781b      	ldrb	r3, [r3, #0]
 8005efe:	461a      	mov	r2, r3
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	4413      	add	r3, r2
 8005f04:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8005f06:	bf00      	nop
 8005f08:	f7ff ffe0 	bl	8005ecc <HAL_GetTick>
 8005f0c:	4602      	mov	r2, r0
 8005f0e:	68bb      	ldr	r3, [r7, #8]
 8005f10:	1ad3      	subs	r3, r2, r3
 8005f12:	68fa      	ldr	r2, [r7, #12]
 8005f14:	429a      	cmp	r2, r3
 8005f16:	d8f7      	bhi.n	8005f08 <HAL_Delay+0x28>
  {
  }
}
 8005f18:	bf00      	nop
 8005f1a:	bf00      	nop
 8005f1c:	3710      	adds	r7, #16
 8005f1e:	46bd      	mov	sp, r7
 8005f20:	bd80      	pop	{r7, pc}
 8005f22:	bf00      	nop
 8005f24:	20000054 	.word	0x20000054

08005f28 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005f28:	b480      	push	{r7}
 8005f2a:	b085      	sub	sp, #20
 8005f2c:	af00      	add	r7, sp, #0
 8005f2e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	f003 0307 	and.w	r3, r3, #7
 8005f36:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005f38:	4b0c      	ldr	r3, [pc, #48]	; (8005f6c <__NVIC_SetPriorityGrouping+0x44>)
 8005f3a:	68db      	ldr	r3, [r3, #12]
 8005f3c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005f3e:	68ba      	ldr	r2, [r7, #8]
 8005f40:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005f44:	4013      	ands	r3, r2
 8005f46:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005f4c:	68bb      	ldr	r3, [r7, #8]
 8005f4e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005f50:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8005f54:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005f58:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005f5a:	4a04      	ldr	r2, [pc, #16]	; (8005f6c <__NVIC_SetPriorityGrouping+0x44>)
 8005f5c:	68bb      	ldr	r3, [r7, #8]
 8005f5e:	60d3      	str	r3, [r2, #12]
}
 8005f60:	bf00      	nop
 8005f62:	3714      	adds	r7, #20
 8005f64:	46bd      	mov	sp, r7
 8005f66:	bc80      	pop	{r7}
 8005f68:	4770      	bx	lr
 8005f6a:	bf00      	nop
 8005f6c:	e000ed00 	.word	0xe000ed00

08005f70 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005f70:	b480      	push	{r7}
 8005f72:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005f74:	4b04      	ldr	r3, [pc, #16]	; (8005f88 <__NVIC_GetPriorityGrouping+0x18>)
 8005f76:	68db      	ldr	r3, [r3, #12]
 8005f78:	0a1b      	lsrs	r3, r3, #8
 8005f7a:	f003 0307 	and.w	r3, r3, #7
}
 8005f7e:	4618      	mov	r0, r3
 8005f80:	46bd      	mov	sp, r7
 8005f82:	bc80      	pop	{r7}
 8005f84:	4770      	bx	lr
 8005f86:	bf00      	nop
 8005f88:	e000ed00 	.word	0xe000ed00

08005f8c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005f8c:	b480      	push	{r7}
 8005f8e:	b083      	sub	sp, #12
 8005f90:	af00      	add	r7, sp, #0
 8005f92:	4603      	mov	r3, r0
 8005f94:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005f96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	db0b      	blt.n	8005fb6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005f9e:	79fb      	ldrb	r3, [r7, #7]
 8005fa0:	f003 021f 	and.w	r2, r3, #31
 8005fa4:	4906      	ldr	r1, [pc, #24]	; (8005fc0 <__NVIC_EnableIRQ+0x34>)
 8005fa6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005faa:	095b      	lsrs	r3, r3, #5
 8005fac:	2001      	movs	r0, #1
 8005fae:	fa00 f202 	lsl.w	r2, r0, r2
 8005fb2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8005fb6:	bf00      	nop
 8005fb8:	370c      	adds	r7, #12
 8005fba:	46bd      	mov	sp, r7
 8005fbc:	bc80      	pop	{r7}
 8005fbe:	4770      	bx	lr
 8005fc0:	e000e100 	.word	0xe000e100

08005fc4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005fc4:	b480      	push	{r7}
 8005fc6:	b083      	sub	sp, #12
 8005fc8:	af00      	add	r7, sp, #0
 8005fca:	4603      	mov	r3, r0
 8005fcc:	6039      	str	r1, [r7, #0]
 8005fce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005fd0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005fd4:	2b00      	cmp	r3, #0
 8005fd6:	db0a      	blt.n	8005fee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005fd8:	683b      	ldr	r3, [r7, #0]
 8005fda:	b2da      	uxtb	r2, r3
 8005fdc:	490c      	ldr	r1, [pc, #48]	; (8006010 <__NVIC_SetPriority+0x4c>)
 8005fde:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005fe2:	0112      	lsls	r2, r2, #4
 8005fe4:	b2d2      	uxtb	r2, r2
 8005fe6:	440b      	add	r3, r1
 8005fe8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005fec:	e00a      	b.n	8006004 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005fee:	683b      	ldr	r3, [r7, #0]
 8005ff0:	b2da      	uxtb	r2, r3
 8005ff2:	4908      	ldr	r1, [pc, #32]	; (8006014 <__NVIC_SetPriority+0x50>)
 8005ff4:	79fb      	ldrb	r3, [r7, #7]
 8005ff6:	f003 030f 	and.w	r3, r3, #15
 8005ffa:	3b04      	subs	r3, #4
 8005ffc:	0112      	lsls	r2, r2, #4
 8005ffe:	b2d2      	uxtb	r2, r2
 8006000:	440b      	add	r3, r1
 8006002:	761a      	strb	r2, [r3, #24]
}
 8006004:	bf00      	nop
 8006006:	370c      	adds	r7, #12
 8006008:	46bd      	mov	sp, r7
 800600a:	bc80      	pop	{r7}
 800600c:	4770      	bx	lr
 800600e:	bf00      	nop
 8006010:	e000e100 	.word	0xe000e100
 8006014:	e000ed00 	.word	0xe000ed00

08006018 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006018:	b480      	push	{r7}
 800601a:	b089      	sub	sp, #36	; 0x24
 800601c:	af00      	add	r7, sp, #0
 800601e:	60f8      	str	r0, [r7, #12]
 8006020:	60b9      	str	r1, [r7, #8]
 8006022:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	f003 0307 	and.w	r3, r3, #7
 800602a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800602c:	69fb      	ldr	r3, [r7, #28]
 800602e:	f1c3 0307 	rsb	r3, r3, #7
 8006032:	2b04      	cmp	r3, #4
 8006034:	bf28      	it	cs
 8006036:	2304      	movcs	r3, #4
 8006038:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800603a:	69fb      	ldr	r3, [r7, #28]
 800603c:	3304      	adds	r3, #4
 800603e:	2b06      	cmp	r3, #6
 8006040:	d902      	bls.n	8006048 <NVIC_EncodePriority+0x30>
 8006042:	69fb      	ldr	r3, [r7, #28]
 8006044:	3b03      	subs	r3, #3
 8006046:	e000      	b.n	800604a <NVIC_EncodePriority+0x32>
 8006048:	2300      	movs	r3, #0
 800604a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800604c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006050:	69bb      	ldr	r3, [r7, #24]
 8006052:	fa02 f303 	lsl.w	r3, r2, r3
 8006056:	43da      	mvns	r2, r3
 8006058:	68bb      	ldr	r3, [r7, #8]
 800605a:	401a      	ands	r2, r3
 800605c:	697b      	ldr	r3, [r7, #20]
 800605e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006060:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8006064:	697b      	ldr	r3, [r7, #20]
 8006066:	fa01 f303 	lsl.w	r3, r1, r3
 800606a:	43d9      	mvns	r1, r3
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006070:	4313      	orrs	r3, r2
         );
}
 8006072:	4618      	mov	r0, r3
 8006074:	3724      	adds	r7, #36	; 0x24
 8006076:	46bd      	mov	sp, r7
 8006078:	bc80      	pop	{r7}
 800607a:	4770      	bx	lr

0800607c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800607c:	b580      	push	{r7, lr}
 800607e:	b082      	sub	sp, #8
 8006080:	af00      	add	r7, sp, #0
 8006082:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	3b01      	subs	r3, #1
 8006088:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800608c:	d301      	bcc.n	8006092 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800608e:	2301      	movs	r3, #1
 8006090:	e00f      	b.n	80060b2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8006092:	4a0a      	ldr	r2, [pc, #40]	; (80060bc <SysTick_Config+0x40>)
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	3b01      	subs	r3, #1
 8006098:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800609a:	210f      	movs	r1, #15
 800609c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80060a0:	f7ff ff90 	bl	8005fc4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80060a4:	4b05      	ldr	r3, [pc, #20]	; (80060bc <SysTick_Config+0x40>)
 80060a6:	2200      	movs	r2, #0
 80060a8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80060aa:	4b04      	ldr	r3, [pc, #16]	; (80060bc <SysTick_Config+0x40>)
 80060ac:	2207      	movs	r2, #7
 80060ae:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80060b0:	2300      	movs	r3, #0
}
 80060b2:	4618      	mov	r0, r3
 80060b4:	3708      	adds	r7, #8
 80060b6:	46bd      	mov	sp, r7
 80060b8:	bd80      	pop	{r7, pc}
 80060ba:	bf00      	nop
 80060bc:	e000e010 	.word	0xe000e010

080060c0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80060c0:	b580      	push	{r7, lr}
 80060c2:	b082      	sub	sp, #8
 80060c4:	af00      	add	r7, sp, #0
 80060c6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80060c8:	6878      	ldr	r0, [r7, #4]
 80060ca:	f7ff ff2d 	bl	8005f28 <__NVIC_SetPriorityGrouping>
}
 80060ce:	bf00      	nop
 80060d0:	3708      	adds	r7, #8
 80060d2:	46bd      	mov	sp, r7
 80060d4:	bd80      	pop	{r7, pc}

080060d6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80060d6:	b580      	push	{r7, lr}
 80060d8:	b086      	sub	sp, #24
 80060da:	af00      	add	r7, sp, #0
 80060dc:	4603      	mov	r3, r0
 80060de:	60b9      	str	r1, [r7, #8]
 80060e0:	607a      	str	r2, [r7, #4]
 80060e2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80060e4:	2300      	movs	r3, #0
 80060e6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80060e8:	f7ff ff42 	bl	8005f70 <__NVIC_GetPriorityGrouping>
 80060ec:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80060ee:	687a      	ldr	r2, [r7, #4]
 80060f0:	68b9      	ldr	r1, [r7, #8]
 80060f2:	6978      	ldr	r0, [r7, #20]
 80060f4:	f7ff ff90 	bl	8006018 <NVIC_EncodePriority>
 80060f8:	4602      	mov	r2, r0
 80060fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80060fe:	4611      	mov	r1, r2
 8006100:	4618      	mov	r0, r3
 8006102:	f7ff ff5f 	bl	8005fc4 <__NVIC_SetPriority>
}
 8006106:	bf00      	nop
 8006108:	3718      	adds	r7, #24
 800610a:	46bd      	mov	sp, r7
 800610c:	bd80      	pop	{r7, pc}

0800610e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800610e:	b580      	push	{r7, lr}
 8006110:	b082      	sub	sp, #8
 8006112:	af00      	add	r7, sp, #0
 8006114:	4603      	mov	r3, r0
 8006116:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8006118:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800611c:	4618      	mov	r0, r3
 800611e:	f7ff ff35 	bl	8005f8c <__NVIC_EnableIRQ>
}
 8006122:	bf00      	nop
 8006124:	3708      	adds	r7, #8
 8006126:	46bd      	mov	sp, r7
 8006128:	bd80      	pop	{r7, pc}

0800612a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800612a:	b580      	push	{r7, lr}
 800612c:	b082      	sub	sp, #8
 800612e:	af00      	add	r7, sp, #0
 8006130:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8006132:	6878      	ldr	r0, [r7, #4]
 8006134:	f7ff ffa2 	bl	800607c <SysTick_Config>
 8006138:	4603      	mov	r3, r0
}
 800613a:	4618      	mov	r0, r3
 800613c:	3708      	adds	r7, #8
 800613e:	46bd      	mov	sp, r7
 8006140:	bd80      	pop	{r7, pc}
	...

08006144 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8006144:	b480      	push	{r7}
 8006146:	b085      	sub	sp, #20
 8006148:	af00      	add	r7, sp, #0
 800614a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800614c:	2300      	movs	r3, #0
 800614e:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	2b00      	cmp	r3, #0
 8006154:	d101      	bne.n	800615a <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8006156:	2301      	movs	r3, #1
 8006158:	e043      	b.n	80061e2 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	461a      	mov	r2, r3
 8006160:	4b22      	ldr	r3, [pc, #136]	; (80061ec <HAL_DMA_Init+0xa8>)
 8006162:	4413      	add	r3, r2
 8006164:	4a22      	ldr	r2, [pc, #136]	; (80061f0 <HAL_DMA_Init+0xac>)
 8006166:	fba2 2303 	umull	r2, r3, r2, r3
 800616a:	091b      	lsrs	r3, r3, #4
 800616c:	009a      	lsls	r2, r3, #2
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	4a1f      	ldr	r2, [pc, #124]	; (80061f4 <HAL_DMA_Init+0xb0>)
 8006176:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	2202      	movs	r2, #2
 800617c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 800618e:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8006192:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 800619c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	68db      	ldr	r3, [r3, #12]
 80061a2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80061a8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	695b      	ldr	r3, [r3, #20]
 80061ae:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80061b4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	69db      	ldr	r3, [r3, #28]
 80061ba:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80061bc:	68fa      	ldr	r2, [r7, #12]
 80061be:	4313      	orrs	r3, r2
 80061c0:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	68fa      	ldr	r2, [r7, #12]
 80061c8:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	2200      	movs	r2, #0
 80061ce:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	2201      	movs	r2, #1
 80061d4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	2200      	movs	r2, #0
 80061dc:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 80061e0:	2300      	movs	r3, #0
}
 80061e2:	4618      	mov	r0, r3
 80061e4:	3714      	adds	r7, #20
 80061e6:	46bd      	mov	sp, r7
 80061e8:	bc80      	pop	{r7}
 80061ea:	4770      	bx	lr
 80061ec:	bffdfff8 	.word	0xbffdfff8
 80061f0:	cccccccd 	.word	0xcccccccd
 80061f4:	40020000 	.word	0x40020000

080061f8 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80061f8:	b580      	push	{r7, lr}
 80061fa:	b086      	sub	sp, #24
 80061fc:	af00      	add	r7, sp, #0
 80061fe:	60f8      	str	r0, [r7, #12]
 8006200:	60b9      	str	r1, [r7, #8]
 8006202:	607a      	str	r2, [r7, #4]
 8006204:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006206:	2300      	movs	r3, #0
 8006208:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006210:	2b01      	cmp	r3, #1
 8006212:	d101      	bne.n	8006218 <HAL_DMA_Start_IT+0x20>
 8006214:	2302      	movs	r3, #2
 8006216:	e04a      	b.n	80062ae <HAL_DMA_Start_IT+0xb6>
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	2201      	movs	r2, #1
 800621c:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8006226:	2b01      	cmp	r3, #1
 8006228:	d13a      	bne.n	80062a0 <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	2202      	movs	r2, #2
 800622e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	2200      	movs	r2, #0
 8006236:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	681a      	ldr	r2, [r3, #0]
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	f022 0201 	bic.w	r2, r2, #1
 8006246:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8006248:	683b      	ldr	r3, [r7, #0]
 800624a:	687a      	ldr	r2, [r7, #4]
 800624c:	68b9      	ldr	r1, [r7, #8]
 800624e:	68f8      	ldr	r0, [r7, #12]
 8006250:	f000 f9ae 	bl	80065b0 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006258:	2b00      	cmp	r3, #0
 800625a:	d008      	beq.n	800626e <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	681a      	ldr	r2, [r3, #0]
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	f042 020e 	orr.w	r2, r2, #14
 800626a:	601a      	str	r2, [r3, #0]
 800626c:	e00f      	b.n	800628e <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	681a      	ldr	r2, [r3, #0]
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	f022 0204 	bic.w	r2, r2, #4
 800627c:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	681a      	ldr	r2, [r3, #0]
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	f042 020a 	orr.w	r2, r2, #10
 800628c:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	681a      	ldr	r2, [r3, #0]
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	f042 0201 	orr.w	r2, r2, #1
 800629c:	601a      	str	r2, [r3, #0]
 800629e:	e005      	b.n	80062ac <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	2200      	movs	r2, #0
 80062a4:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 80062a8:	2302      	movs	r3, #2
 80062aa:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 80062ac:	7dfb      	ldrb	r3, [r7, #23]
}
 80062ae:	4618      	mov	r0, r3
 80062b0:	3718      	adds	r7, #24
 80062b2:	46bd      	mov	sp, r7
 80062b4:	bd80      	pop	{r7, pc}
	...

080062b8 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80062b8:	b580      	push	{r7, lr}
 80062ba:	b084      	sub	sp, #16
 80062bc:	af00      	add	r7, sp, #0
 80062be:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80062c0:	2300      	movs	r3, #0
 80062c2:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80062ca:	2b02      	cmp	r3, #2
 80062cc:	d005      	beq.n	80062da <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	2204      	movs	r2, #4
 80062d2:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 80062d4:	2301      	movs	r3, #1
 80062d6:	73fb      	strb	r3, [r7, #15]
 80062d8:	e051      	b.n	800637e <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	681a      	ldr	r2, [r3, #0]
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	f022 020e 	bic.w	r2, r2, #14
 80062e8:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	681a      	ldr	r2, [r3, #0]
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	f022 0201 	bic.w	r2, r2, #1
 80062f8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	4a22      	ldr	r2, [pc, #136]	; (8006388 <HAL_DMA_Abort_IT+0xd0>)
 8006300:	4293      	cmp	r3, r2
 8006302:	d029      	beq.n	8006358 <HAL_DMA_Abort_IT+0xa0>
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	4a20      	ldr	r2, [pc, #128]	; (800638c <HAL_DMA_Abort_IT+0xd4>)
 800630a:	4293      	cmp	r3, r2
 800630c:	d022      	beq.n	8006354 <HAL_DMA_Abort_IT+0x9c>
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	4a1f      	ldr	r2, [pc, #124]	; (8006390 <HAL_DMA_Abort_IT+0xd8>)
 8006314:	4293      	cmp	r3, r2
 8006316:	d01a      	beq.n	800634e <HAL_DMA_Abort_IT+0x96>
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	4a1d      	ldr	r2, [pc, #116]	; (8006394 <HAL_DMA_Abort_IT+0xdc>)
 800631e:	4293      	cmp	r3, r2
 8006320:	d012      	beq.n	8006348 <HAL_DMA_Abort_IT+0x90>
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	4a1c      	ldr	r2, [pc, #112]	; (8006398 <HAL_DMA_Abort_IT+0xe0>)
 8006328:	4293      	cmp	r3, r2
 800632a:	d00a      	beq.n	8006342 <HAL_DMA_Abort_IT+0x8a>
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	4a1a      	ldr	r2, [pc, #104]	; (800639c <HAL_DMA_Abort_IT+0xe4>)
 8006332:	4293      	cmp	r3, r2
 8006334:	d102      	bne.n	800633c <HAL_DMA_Abort_IT+0x84>
 8006336:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800633a:	e00e      	b.n	800635a <HAL_DMA_Abort_IT+0xa2>
 800633c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006340:	e00b      	b.n	800635a <HAL_DMA_Abort_IT+0xa2>
 8006342:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8006346:	e008      	b.n	800635a <HAL_DMA_Abort_IT+0xa2>
 8006348:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800634c:	e005      	b.n	800635a <HAL_DMA_Abort_IT+0xa2>
 800634e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006352:	e002      	b.n	800635a <HAL_DMA_Abort_IT+0xa2>
 8006354:	2310      	movs	r3, #16
 8006356:	e000      	b.n	800635a <HAL_DMA_Abort_IT+0xa2>
 8006358:	2301      	movs	r3, #1
 800635a:	4a11      	ldr	r2, [pc, #68]	; (80063a0 <HAL_DMA_Abort_IT+0xe8>)
 800635c:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	2201      	movs	r2, #1
 8006362:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	2200      	movs	r2, #0
 800636a:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006372:	2b00      	cmp	r3, #0
 8006374:	d003      	beq.n	800637e <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800637a:	6878      	ldr	r0, [r7, #4]
 800637c:	4798      	blx	r3
    } 
  }
  return status;
 800637e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006380:	4618      	mov	r0, r3
 8006382:	3710      	adds	r7, #16
 8006384:	46bd      	mov	sp, r7
 8006386:	bd80      	pop	{r7, pc}
 8006388:	40020008 	.word	0x40020008
 800638c:	4002001c 	.word	0x4002001c
 8006390:	40020030 	.word	0x40020030
 8006394:	40020044 	.word	0x40020044
 8006398:	40020058 	.word	0x40020058
 800639c:	4002006c 	.word	0x4002006c
 80063a0:	40020000 	.word	0x40020000

080063a4 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80063a4:	b580      	push	{r7, lr}
 80063a6:	b084      	sub	sp, #16
 80063a8:	af00      	add	r7, sp, #0
 80063aa:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063c0:	2204      	movs	r2, #4
 80063c2:	409a      	lsls	r2, r3
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	4013      	ands	r3, r2
 80063c8:	2b00      	cmp	r3, #0
 80063ca:	d04f      	beq.n	800646c <HAL_DMA_IRQHandler+0xc8>
 80063cc:	68bb      	ldr	r3, [r7, #8]
 80063ce:	f003 0304 	and.w	r3, r3, #4
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	d04a      	beq.n	800646c <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	f003 0320 	and.w	r3, r3, #32
 80063e0:	2b00      	cmp	r3, #0
 80063e2:	d107      	bne.n	80063f4 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	681a      	ldr	r2, [r3, #0]
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	f022 0204 	bic.w	r2, r2, #4
 80063f2:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	4a66      	ldr	r2, [pc, #408]	; (8006594 <HAL_DMA_IRQHandler+0x1f0>)
 80063fa:	4293      	cmp	r3, r2
 80063fc:	d029      	beq.n	8006452 <HAL_DMA_IRQHandler+0xae>
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	4a65      	ldr	r2, [pc, #404]	; (8006598 <HAL_DMA_IRQHandler+0x1f4>)
 8006404:	4293      	cmp	r3, r2
 8006406:	d022      	beq.n	800644e <HAL_DMA_IRQHandler+0xaa>
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	4a63      	ldr	r2, [pc, #396]	; (800659c <HAL_DMA_IRQHandler+0x1f8>)
 800640e:	4293      	cmp	r3, r2
 8006410:	d01a      	beq.n	8006448 <HAL_DMA_IRQHandler+0xa4>
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	4a62      	ldr	r2, [pc, #392]	; (80065a0 <HAL_DMA_IRQHandler+0x1fc>)
 8006418:	4293      	cmp	r3, r2
 800641a:	d012      	beq.n	8006442 <HAL_DMA_IRQHandler+0x9e>
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	4a60      	ldr	r2, [pc, #384]	; (80065a4 <HAL_DMA_IRQHandler+0x200>)
 8006422:	4293      	cmp	r3, r2
 8006424:	d00a      	beq.n	800643c <HAL_DMA_IRQHandler+0x98>
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	4a5f      	ldr	r2, [pc, #380]	; (80065a8 <HAL_DMA_IRQHandler+0x204>)
 800642c:	4293      	cmp	r3, r2
 800642e:	d102      	bne.n	8006436 <HAL_DMA_IRQHandler+0x92>
 8006430:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8006434:	e00e      	b.n	8006454 <HAL_DMA_IRQHandler+0xb0>
 8006436:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800643a:	e00b      	b.n	8006454 <HAL_DMA_IRQHandler+0xb0>
 800643c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8006440:	e008      	b.n	8006454 <HAL_DMA_IRQHandler+0xb0>
 8006442:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8006446:	e005      	b.n	8006454 <HAL_DMA_IRQHandler+0xb0>
 8006448:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800644c:	e002      	b.n	8006454 <HAL_DMA_IRQHandler+0xb0>
 800644e:	2340      	movs	r3, #64	; 0x40
 8006450:	e000      	b.n	8006454 <HAL_DMA_IRQHandler+0xb0>
 8006452:	2304      	movs	r3, #4
 8006454:	4a55      	ldr	r2, [pc, #340]	; (80065ac <HAL_DMA_IRQHandler+0x208>)
 8006456:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800645c:	2b00      	cmp	r3, #0
 800645e:	f000 8094 	beq.w	800658a <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006466:	6878      	ldr	r0, [r7, #4]
 8006468:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 800646a:	e08e      	b.n	800658a <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006470:	2202      	movs	r2, #2
 8006472:	409a      	lsls	r2, r3
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	4013      	ands	r3, r2
 8006478:	2b00      	cmp	r3, #0
 800647a:	d056      	beq.n	800652a <HAL_DMA_IRQHandler+0x186>
 800647c:	68bb      	ldr	r3, [r7, #8]
 800647e:	f003 0302 	and.w	r3, r3, #2
 8006482:	2b00      	cmp	r3, #0
 8006484:	d051      	beq.n	800652a <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	f003 0320 	and.w	r3, r3, #32
 8006490:	2b00      	cmp	r3, #0
 8006492:	d10b      	bne.n	80064ac <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	681a      	ldr	r2, [r3, #0]
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	f022 020a 	bic.w	r2, r2, #10
 80064a2:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	2201      	movs	r2, #1
 80064a8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	4a38      	ldr	r2, [pc, #224]	; (8006594 <HAL_DMA_IRQHandler+0x1f0>)
 80064b2:	4293      	cmp	r3, r2
 80064b4:	d029      	beq.n	800650a <HAL_DMA_IRQHandler+0x166>
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	4a37      	ldr	r2, [pc, #220]	; (8006598 <HAL_DMA_IRQHandler+0x1f4>)
 80064bc:	4293      	cmp	r3, r2
 80064be:	d022      	beq.n	8006506 <HAL_DMA_IRQHandler+0x162>
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	4a35      	ldr	r2, [pc, #212]	; (800659c <HAL_DMA_IRQHandler+0x1f8>)
 80064c6:	4293      	cmp	r3, r2
 80064c8:	d01a      	beq.n	8006500 <HAL_DMA_IRQHandler+0x15c>
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	4a34      	ldr	r2, [pc, #208]	; (80065a0 <HAL_DMA_IRQHandler+0x1fc>)
 80064d0:	4293      	cmp	r3, r2
 80064d2:	d012      	beq.n	80064fa <HAL_DMA_IRQHandler+0x156>
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	4a32      	ldr	r2, [pc, #200]	; (80065a4 <HAL_DMA_IRQHandler+0x200>)
 80064da:	4293      	cmp	r3, r2
 80064dc:	d00a      	beq.n	80064f4 <HAL_DMA_IRQHandler+0x150>
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	4a31      	ldr	r2, [pc, #196]	; (80065a8 <HAL_DMA_IRQHandler+0x204>)
 80064e4:	4293      	cmp	r3, r2
 80064e6:	d102      	bne.n	80064ee <HAL_DMA_IRQHandler+0x14a>
 80064e8:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80064ec:	e00e      	b.n	800650c <HAL_DMA_IRQHandler+0x168>
 80064ee:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80064f2:	e00b      	b.n	800650c <HAL_DMA_IRQHandler+0x168>
 80064f4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80064f8:	e008      	b.n	800650c <HAL_DMA_IRQHandler+0x168>
 80064fa:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80064fe:	e005      	b.n	800650c <HAL_DMA_IRQHandler+0x168>
 8006500:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006504:	e002      	b.n	800650c <HAL_DMA_IRQHandler+0x168>
 8006506:	2320      	movs	r3, #32
 8006508:	e000      	b.n	800650c <HAL_DMA_IRQHandler+0x168>
 800650a:	2302      	movs	r3, #2
 800650c:	4a27      	ldr	r2, [pc, #156]	; (80065ac <HAL_DMA_IRQHandler+0x208>)
 800650e:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	2200      	movs	r2, #0
 8006514:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800651c:	2b00      	cmp	r3, #0
 800651e:	d034      	beq.n	800658a <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006524:	6878      	ldr	r0, [r7, #4]
 8006526:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8006528:	e02f      	b.n	800658a <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800652e:	2208      	movs	r2, #8
 8006530:	409a      	lsls	r2, r3
 8006532:	68fb      	ldr	r3, [r7, #12]
 8006534:	4013      	ands	r3, r2
 8006536:	2b00      	cmp	r3, #0
 8006538:	d028      	beq.n	800658c <HAL_DMA_IRQHandler+0x1e8>
 800653a:	68bb      	ldr	r3, [r7, #8]
 800653c:	f003 0308 	and.w	r3, r3, #8
 8006540:	2b00      	cmp	r3, #0
 8006542:	d023      	beq.n	800658c <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	681a      	ldr	r2, [r3, #0]
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	f022 020e 	bic.w	r2, r2, #14
 8006552:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800655c:	2101      	movs	r1, #1
 800655e:	fa01 f202 	lsl.w	r2, r1, r2
 8006562:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	2201      	movs	r2, #1
 8006568:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	2201      	movs	r2, #1
 800656e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	2200      	movs	r2, #0
 8006576:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800657e:	2b00      	cmp	r3, #0
 8006580:	d004      	beq.n	800658c <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006586:	6878      	ldr	r0, [r7, #4]
 8006588:	4798      	blx	r3
    }
  }
  return;
 800658a:	bf00      	nop
 800658c:	bf00      	nop
}
 800658e:	3710      	adds	r7, #16
 8006590:	46bd      	mov	sp, r7
 8006592:	bd80      	pop	{r7, pc}
 8006594:	40020008 	.word	0x40020008
 8006598:	4002001c 	.word	0x4002001c
 800659c:	40020030 	.word	0x40020030
 80065a0:	40020044 	.word	0x40020044
 80065a4:	40020058 	.word	0x40020058
 80065a8:	4002006c 	.word	0x4002006c
 80065ac:	40020000 	.word	0x40020000

080065b0 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80065b0:	b480      	push	{r7}
 80065b2:	b085      	sub	sp, #20
 80065b4:	af00      	add	r7, sp, #0
 80065b6:	60f8      	str	r0, [r7, #12]
 80065b8:	60b9      	str	r1, [r7, #8]
 80065ba:	607a      	str	r2, [r7, #4]
 80065bc:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80065c2:	68fb      	ldr	r3, [r7, #12]
 80065c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80065c6:	2101      	movs	r1, #1
 80065c8:	fa01 f202 	lsl.w	r2, r1, r2
 80065cc:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	683a      	ldr	r2, [r7, #0]
 80065d4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	685b      	ldr	r3, [r3, #4]
 80065da:	2b10      	cmp	r3, #16
 80065dc:	d108      	bne.n	80065f0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80065de:	68fb      	ldr	r3, [r7, #12]
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	687a      	ldr	r2, [r7, #4]
 80065e4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	68ba      	ldr	r2, [r7, #8]
 80065ec:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80065ee:	e007      	b.n	8006600 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	68ba      	ldr	r2, [r7, #8]
 80065f6:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	687a      	ldr	r2, [r7, #4]
 80065fe:	60da      	str	r2, [r3, #12]
}
 8006600:	bf00      	nop
 8006602:	3714      	adds	r7, #20
 8006604:	46bd      	mov	sp, r7
 8006606:	bc80      	pop	{r7}
 8006608:	4770      	bx	lr
	...

0800660c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800660c:	b480      	push	{r7}
 800660e:	b08b      	sub	sp, #44	; 0x2c
 8006610:	af00      	add	r7, sp, #0
 8006612:	6078      	str	r0, [r7, #4]
 8006614:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8006616:	2300      	movs	r3, #0
 8006618:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800661a:	2300      	movs	r3, #0
 800661c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800661e:	e169      	b.n	80068f4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8006620:	2201      	movs	r2, #1
 8006622:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006624:	fa02 f303 	lsl.w	r3, r2, r3
 8006628:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800662a:	683b      	ldr	r3, [r7, #0]
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	69fa      	ldr	r2, [r7, #28]
 8006630:	4013      	ands	r3, r2
 8006632:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8006634:	69ba      	ldr	r2, [r7, #24]
 8006636:	69fb      	ldr	r3, [r7, #28]
 8006638:	429a      	cmp	r2, r3
 800663a:	f040 8158 	bne.w	80068ee <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800663e:	683b      	ldr	r3, [r7, #0]
 8006640:	685b      	ldr	r3, [r3, #4]
 8006642:	4a9a      	ldr	r2, [pc, #616]	; (80068ac <HAL_GPIO_Init+0x2a0>)
 8006644:	4293      	cmp	r3, r2
 8006646:	d05e      	beq.n	8006706 <HAL_GPIO_Init+0xfa>
 8006648:	4a98      	ldr	r2, [pc, #608]	; (80068ac <HAL_GPIO_Init+0x2a0>)
 800664a:	4293      	cmp	r3, r2
 800664c:	d875      	bhi.n	800673a <HAL_GPIO_Init+0x12e>
 800664e:	4a98      	ldr	r2, [pc, #608]	; (80068b0 <HAL_GPIO_Init+0x2a4>)
 8006650:	4293      	cmp	r3, r2
 8006652:	d058      	beq.n	8006706 <HAL_GPIO_Init+0xfa>
 8006654:	4a96      	ldr	r2, [pc, #600]	; (80068b0 <HAL_GPIO_Init+0x2a4>)
 8006656:	4293      	cmp	r3, r2
 8006658:	d86f      	bhi.n	800673a <HAL_GPIO_Init+0x12e>
 800665a:	4a96      	ldr	r2, [pc, #600]	; (80068b4 <HAL_GPIO_Init+0x2a8>)
 800665c:	4293      	cmp	r3, r2
 800665e:	d052      	beq.n	8006706 <HAL_GPIO_Init+0xfa>
 8006660:	4a94      	ldr	r2, [pc, #592]	; (80068b4 <HAL_GPIO_Init+0x2a8>)
 8006662:	4293      	cmp	r3, r2
 8006664:	d869      	bhi.n	800673a <HAL_GPIO_Init+0x12e>
 8006666:	4a94      	ldr	r2, [pc, #592]	; (80068b8 <HAL_GPIO_Init+0x2ac>)
 8006668:	4293      	cmp	r3, r2
 800666a:	d04c      	beq.n	8006706 <HAL_GPIO_Init+0xfa>
 800666c:	4a92      	ldr	r2, [pc, #584]	; (80068b8 <HAL_GPIO_Init+0x2ac>)
 800666e:	4293      	cmp	r3, r2
 8006670:	d863      	bhi.n	800673a <HAL_GPIO_Init+0x12e>
 8006672:	4a92      	ldr	r2, [pc, #584]	; (80068bc <HAL_GPIO_Init+0x2b0>)
 8006674:	4293      	cmp	r3, r2
 8006676:	d046      	beq.n	8006706 <HAL_GPIO_Init+0xfa>
 8006678:	4a90      	ldr	r2, [pc, #576]	; (80068bc <HAL_GPIO_Init+0x2b0>)
 800667a:	4293      	cmp	r3, r2
 800667c:	d85d      	bhi.n	800673a <HAL_GPIO_Init+0x12e>
 800667e:	2b12      	cmp	r3, #18
 8006680:	d82a      	bhi.n	80066d8 <HAL_GPIO_Init+0xcc>
 8006682:	2b12      	cmp	r3, #18
 8006684:	d859      	bhi.n	800673a <HAL_GPIO_Init+0x12e>
 8006686:	a201      	add	r2, pc, #4	; (adr r2, 800668c <HAL_GPIO_Init+0x80>)
 8006688:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800668c:	08006707 	.word	0x08006707
 8006690:	080066e1 	.word	0x080066e1
 8006694:	080066f3 	.word	0x080066f3
 8006698:	08006735 	.word	0x08006735
 800669c:	0800673b 	.word	0x0800673b
 80066a0:	0800673b 	.word	0x0800673b
 80066a4:	0800673b 	.word	0x0800673b
 80066a8:	0800673b 	.word	0x0800673b
 80066ac:	0800673b 	.word	0x0800673b
 80066b0:	0800673b 	.word	0x0800673b
 80066b4:	0800673b 	.word	0x0800673b
 80066b8:	0800673b 	.word	0x0800673b
 80066bc:	0800673b 	.word	0x0800673b
 80066c0:	0800673b 	.word	0x0800673b
 80066c4:	0800673b 	.word	0x0800673b
 80066c8:	0800673b 	.word	0x0800673b
 80066cc:	0800673b 	.word	0x0800673b
 80066d0:	080066e9 	.word	0x080066e9
 80066d4:	080066fd 	.word	0x080066fd
 80066d8:	4a79      	ldr	r2, [pc, #484]	; (80068c0 <HAL_GPIO_Init+0x2b4>)
 80066da:	4293      	cmp	r3, r2
 80066dc:	d013      	beq.n	8006706 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80066de:	e02c      	b.n	800673a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80066e0:	683b      	ldr	r3, [r7, #0]
 80066e2:	68db      	ldr	r3, [r3, #12]
 80066e4:	623b      	str	r3, [r7, #32]
          break;
 80066e6:	e029      	b.n	800673c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80066e8:	683b      	ldr	r3, [r7, #0]
 80066ea:	68db      	ldr	r3, [r3, #12]
 80066ec:	3304      	adds	r3, #4
 80066ee:	623b      	str	r3, [r7, #32]
          break;
 80066f0:	e024      	b.n	800673c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80066f2:	683b      	ldr	r3, [r7, #0]
 80066f4:	68db      	ldr	r3, [r3, #12]
 80066f6:	3308      	adds	r3, #8
 80066f8:	623b      	str	r3, [r7, #32]
          break;
 80066fa:	e01f      	b.n	800673c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80066fc:	683b      	ldr	r3, [r7, #0]
 80066fe:	68db      	ldr	r3, [r3, #12]
 8006700:	330c      	adds	r3, #12
 8006702:	623b      	str	r3, [r7, #32]
          break;
 8006704:	e01a      	b.n	800673c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8006706:	683b      	ldr	r3, [r7, #0]
 8006708:	689b      	ldr	r3, [r3, #8]
 800670a:	2b00      	cmp	r3, #0
 800670c:	d102      	bne.n	8006714 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800670e:	2304      	movs	r3, #4
 8006710:	623b      	str	r3, [r7, #32]
          break;
 8006712:	e013      	b.n	800673c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8006714:	683b      	ldr	r3, [r7, #0]
 8006716:	689b      	ldr	r3, [r3, #8]
 8006718:	2b01      	cmp	r3, #1
 800671a:	d105      	bne.n	8006728 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800671c:	2308      	movs	r3, #8
 800671e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	69fa      	ldr	r2, [r7, #28]
 8006724:	611a      	str	r2, [r3, #16]
          break;
 8006726:	e009      	b.n	800673c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8006728:	2308      	movs	r3, #8
 800672a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	69fa      	ldr	r2, [r7, #28]
 8006730:	615a      	str	r2, [r3, #20]
          break;
 8006732:	e003      	b.n	800673c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8006734:	2300      	movs	r3, #0
 8006736:	623b      	str	r3, [r7, #32]
          break;
 8006738:	e000      	b.n	800673c <HAL_GPIO_Init+0x130>
          break;
 800673a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800673c:	69bb      	ldr	r3, [r7, #24]
 800673e:	2bff      	cmp	r3, #255	; 0xff
 8006740:	d801      	bhi.n	8006746 <HAL_GPIO_Init+0x13a>
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	e001      	b.n	800674a <HAL_GPIO_Init+0x13e>
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	3304      	adds	r3, #4
 800674a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800674c:	69bb      	ldr	r3, [r7, #24]
 800674e:	2bff      	cmp	r3, #255	; 0xff
 8006750:	d802      	bhi.n	8006758 <HAL_GPIO_Init+0x14c>
 8006752:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006754:	009b      	lsls	r3, r3, #2
 8006756:	e002      	b.n	800675e <HAL_GPIO_Init+0x152>
 8006758:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800675a:	3b08      	subs	r3, #8
 800675c:	009b      	lsls	r3, r3, #2
 800675e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8006760:	697b      	ldr	r3, [r7, #20]
 8006762:	681a      	ldr	r2, [r3, #0]
 8006764:	210f      	movs	r1, #15
 8006766:	693b      	ldr	r3, [r7, #16]
 8006768:	fa01 f303 	lsl.w	r3, r1, r3
 800676c:	43db      	mvns	r3, r3
 800676e:	401a      	ands	r2, r3
 8006770:	6a39      	ldr	r1, [r7, #32]
 8006772:	693b      	ldr	r3, [r7, #16]
 8006774:	fa01 f303 	lsl.w	r3, r1, r3
 8006778:	431a      	orrs	r2, r3
 800677a:	697b      	ldr	r3, [r7, #20]
 800677c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800677e:	683b      	ldr	r3, [r7, #0]
 8006780:	685b      	ldr	r3, [r3, #4]
 8006782:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006786:	2b00      	cmp	r3, #0
 8006788:	f000 80b1 	beq.w	80068ee <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800678c:	4b4d      	ldr	r3, [pc, #308]	; (80068c4 <HAL_GPIO_Init+0x2b8>)
 800678e:	699b      	ldr	r3, [r3, #24]
 8006790:	4a4c      	ldr	r2, [pc, #304]	; (80068c4 <HAL_GPIO_Init+0x2b8>)
 8006792:	f043 0301 	orr.w	r3, r3, #1
 8006796:	6193      	str	r3, [r2, #24]
 8006798:	4b4a      	ldr	r3, [pc, #296]	; (80068c4 <HAL_GPIO_Init+0x2b8>)
 800679a:	699b      	ldr	r3, [r3, #24]
 800679c:	f003 0301 	and.w	r3, r3, #1
 80067a0:	60bb      	str	r3, [r7, #8]
 80067a2:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80067a4:	4a48      	ldr	r2, [pc, #288]	; (80068c8 <HAL_GPIO_Init+0x2bc>)
 80067a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067a8:	089b      	lsrs	r3, r3, #2
 80067aa:	3302      	adds	r3, #2
 80067ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80067b0:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80067b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067b4:	f003 0303 	and.w	r3, r3, #3
 80067b8:	009b      	lsls	r3, r3, #2
 80067ba:	220f      	movs	r2, #15
 80067bc:	fa02 f303 	lsl.w	r3, r2, r3
 80067c0:	43db      	mvns	r3, r3
 80067c2:	68fa      	ldr	r2, [r7, #12]
 80067c4:	4013      	ands	r3, r2
 80067c6:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	4a40      	ldr	r2, [pc, #256]	; (80068cc <HAL_GPIO_Init+0x2c0>)
 80067cc:	4293      	cmp	r3, r2
 80067ce:	d013      	beq.n	80067f8 <HAL_GPIO_Init+0x1ec>
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	4a3f      	ldr	r2, [pc, #252]	; (80068d0 <HAL_GPIO_Init+0x2c4>)
 80067d4:	4293      	cmp	r3, r2
 80067d6:	d00d      	beq.n	80067f4 <HAL_GPIO_Init+0x1e8>
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	4a3e      	ldr	r2, [pc, #248]	; (80068d4 <HAL_GPIO_Init+0x2c8>)
 80067dc:	4293      	cmp	r3, r2
 80067de:	d007      	beq.n	80067f0 <HAL_GPIO_Init+0x1e4>
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	4a3d      	ldr	r2, [pc, #244]	; (80068d8 <HAL_GPIO_Init+0x2cc>)
 80067e4:	4293      	cmp	r3, r2
 80067e6:	d101      	bne.n	80067ec <HAL_GPIO_Init+0x1e0>
 80067e8:	2303      	movs	r3, #3
 80067ea:	e006      	b.n	80067fa <HAL_GPIO_Init+0x1ee>
 80067ec:	2304      	movs	r3, #4
 80067ee:	e004      	b.n	80067fa <HAL_GPIO_Init+0x1ee>
 80067f0:	2302      	movs	r3, #2
 80067f2:	e002      	b.n	80067fa <HAL_GPIO_Init+0x1ee>
 80067f4:	2301      	movs	r3, #1
 80067f6:	e000      	b.n	80067fa <HAL_GPIO_Init+0x1ee>
 80067f8:	2300      	movs	r3, #0
 80067fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80067fc:	f002 0203 	and.w	r2, r2, #3
 8006800:	0092      	lsls	r2, r2, #2
 8006802:	4093      	lsls	r3, r2
 8006804:	68fa      	ldr	r2, [r7, #12]
 8006806:	4313      	orrs	r3, r2
 8006808:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800680a:	492f      	ldr	r1, [pc, #188]	; (80068c8 <HAL_GPIO_Init+0x2bc>)
 800680c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800680e:	089b      	lsrs	r3, r3, #2
 8006810:	3302      	adds	r3, #2
 8006812:	68fa      	ldr	r2, [r7, #12]
 8006814:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8006818:	683b      	ldr	r3, [r7, #0]
 800681a:	685b      	ldr	r3, [r3, #4]
 800681c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006820:	2b00      	cmp	r3, #0
 8006822:	d006      	beq.n	8006832 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8006824:	4b2d      	ldr	r3, [pc, #180]	; (80068dc <HAL_GPIO_Init+0x2d0>)
 8006826:	681a      	ldr	r2, [r3, #0]
 8006828:	492c      	ldr	r1, [pc, #176]	; (80068dc <HAL_GPIO_Init+0x2d0>)
 800682a:	69bb      	ldr	r3, [r7, #24]
 800682c:	4313      	orrs	r3, r2
 800682e:	600b      	str	r3, [r1, #0]
 8006830:	e006      	b.n	8006840 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8006832:	4b2a      	ldr	r3, [pc, #168]	; (80068dc <HAL_GPIO_Init+0x2d0>)
 8006834:	681a      	ldr	r2, [r3, #0]
 8006836:	69bb      	ldr	r3, [r7, #24]
 8006838:	43db      	mvns	r3, r3
 800683a:	4928      	ldr	r1, [pc, #160]	; (80068dc <HAL_GPIO_Init+0x2d0>)
 800683c:	4013      	ands	r3, r2
 800683e:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8006840:	683b      	ldr	r3, [r7, #0]
 8006842:	685b      	ldr	r3, [r3, #4]
 8006844:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006848:	2b00      	cmp	r3, #0
 800684a:	d006      	beq.n	800685a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800684c:	4b23      	ldr	r3, [pc, #140]	; (80068dc <HAL_GPIO_Init+0x2d0>)
 800684e:	685a      	ldr	r2, [r3, #4]
 8006850:	4922      	ldr	r1, [pc, #136]	; (80068dc <HAL_GPIO_Init+0x2d0>)
 8006852:	69bb      	ldr	r3, [r7, #24]
 8006854:	4313      	orrs	r3, r2
 8006856:	604b      	str	r3, [r1, #4]
 8006858:	e006      	b.n	8006868 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800685a:	4b20      	ldr	r3, [pc, #128]	; (80068dc <HAL_GPIO_Init+0x2d0>)
 800685c:	685a      	ldr	r2, [r3, #4]
 800685e:	69bb      	ldr	r3, [r7, #24]
 8006860:	43db      	mvns	r3, r3
 8006862:	491e      	ldr	r1, [pc, #120]	; (80068dc <HAL_GPIO_Init+0x2d0>)
 8006864:	4013      	ands	r3, r2
 8006866:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8006868:	683b      	ldr	r3, [r7, #0]
 800686a:	685b      	ldr	r3, [r3, #4]
 800686c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006870:	2b00      	cmp	r3, #0
 8006872:	d006      	beq.n	8006882 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8006874:	4b19      	ldr	r3, [pc, #100]	; (80068dc <HAL_GPIO_Init+0x2d0>)
 8006876:	689a      	ldr	r2, [r3, #8]
 8006878:	4918      	ldr	r1, [pc, #96]	; (80068dc <HAL_GPIO_Init+0x2d0>)
 800687a:	69bb      	ldr	r3, [r7, #24]
 800687c:	4313      	orrs	r3, r2
 800687e:	608b      	str	r3, [r1, #8]
 8006880:	e006      	b.n	8006890 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8006882:	4b16      	ldr	r3, [pc, #88]	; (80068dc <HAL_GPIO_Init+0x2d0>)
 8006884:	689a      	ldr	r2, [r3, #8]
 8006886:	69bb      	ldr	r3, [r7, #24]
 8006888:	43db      	mvns	r3, r3
 800688a:	4914      	ldr	r1, [pc, #80]	; (80068dc <HAL_GPIO_Init+0x2d0>)
 800688c:	4013      	ands	r3, r2
 800688e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8006890:	683b      	ldr	r3, [r7, #0]
 8006892:	685b      	ldr	r3, [r3, #4]
 8006894:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006898:	2b00      	cmp	r3, #0
 800689a:	d021      	beq.n	80068e0 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800689c:	4b0f      	ldr	r3, [pc, #60]	; (80068dc <HAL_GPIO_Init+0x2d0>)
 800689e:	68da      	ldr	r2, [r3, #12]
 80068a0:	490e      	ldr	r1, [pc, #56]	; (80068dc <HAL_GPIO_Init+0x2d0>)
 80068a2:	69bb      	ldr	r3, [r7, #24]
 80068a4:	4313      	orrs	r3, r2
 80068a6:	60cb      	str	r3, [r1, #12]
 80068a8:	e021      	b.n	80068ee <HAL_GPIO_Init+0x2e2>
 80068aa:	bf00      	nop
 80068ac:	10320000 	.word	0x10320000
 80068b0:	10310000 	.word	0x10310000
 80068b4:	10220000 	.word	0x10220000
 80068b8:	10210000 	.word	0x10210000
 80068bc:	10120000 	.word	0x10120000
 80068c0:	10110000 	.word	0x10110000
 80068c4:	40021000 	.word	0x40021000
 80068c8:	40010000 	.word	0x40010000
 80068cc:	40010800 	.word	0x40010800
 80068d0:	40010c00 	.word	0x40010c00
 80068d4:	40011000 	.word	0x40011000
 80068d8:	40011400 	.word	0x40011400
 80068dc:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80068e0:	4b0b      	ldr	r3, [pc, #44]	; (8006910 <HAL_GPIO_Init+0x304>)
 80068e2:	68da      	ldr	r2, [r3, #12]
 80068e4:	69bb      	ldr	r3, [r7, #24]
 80068e6:	43db      	mvns	r3, r3
 80068e8:	4909      	ldr	r1, [pc, #36]	; (8006910 <HAL_GPIO_Init+0x304>)
 80068ea:	4013      	ands	r3, r2
 80068ec:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80068ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068f0:	3301      	adds	r3, #1
 80068f2:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80068f4:	683b      	ldr	r3, [r7, #0]
 80068f6:	681a      	ldr	r2, [r3, #0]
 80068f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068fa:	fa22 f303 	lsr.w	r3, r2, r3
 80068fe:	2b00      	cmp	r3, #0
 8006900:	f47f ae8e 	bne.w	8006620 <HAL_GPIO_Init+0x14>
  }
}
 8006904:	bf00      	nop
 8006906:	bf00      	nop
 8006908:	372c      	adds	r7, #44	; 0x2c
 800690a:	46bd      	mov	sp, r7
 800690c:	bc80      	pop	{r7}
 800690e:	4770      	bx	lr
 8006910:	40010400 	.word	0x40010400

08006914 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006914:	b480      	push	{r7}
 8006916:	b083      	sub	sp, #12
 8006918:	af00      	add	r7, sp, #0
 800691a:	6078      	str	r0, [r7, #4]
 800691c:	460b      	mov	r3, r1
 800691e:	807b      	strh	r3, [r7, #2]
 8006920:	4613      	mov	r3, r2
 8006922:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8006924:	787b      	ldrb	r3, [r7, #1]
 8006926:	2b00      	cmp	r3, #0
 8006928:	d003      	beq.n	8006932 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800692a:	887a      	ldrh	r2, [r7, #2]
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8006930:	e003      	b.n	800693a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8006932:	887b      	ldrh	r3, [r7, #2]
 8006934:	041a      	lsls	r2, r3, #16
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	611a      	str	r2, [r3, #16]
}
 800693a:	bf00      	nop
 800693c:	370c      	adds	r7, #12
 800693e:	46bd      	mov	sp, r7
 8006940:	bc80      	pop	{r7}
 8006942:	4770      	bx	lr

08006944 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8006944:	b580      	push	{r7, lr}
 8006946:	b084      	sub	sp, #16
 8006948:	af00      	add	r7, sp, #0
 800694a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	2b00      	cmp	r3, #0
 8006950:	d101      	bne.n	8006956 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8006952:	2301      	movs	r3, #1
 8006954:	e12b      	b.n	8006bae <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800695c:	b2db      	uxtb	r3, r3
 800695e:	2b00      	cmp	r3, #0
 8006960:	d106      	bne.n	8006970 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	2200      	movs	r2, #0
 8006966:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800696a:	6878      	ldr	r0, [r7, #4]
 800696c:	f7fe f922 	bl	8004bb4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	2224      	movs	r2, #36	; 0x24
 8006974:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	681a      	ldr	r2, [r3, #0]
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	f022 0201 	bic.w	r2, r2, #1
 8006986:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	681a      	ldr	r2, [r3, #0]
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006996:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	681a      	ldr	r2, [r3, #0]
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80069a6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80069a8:	f000 fce4 	bl	8007374 <HAL_RCC_GetPCLK1Freq>
 80069ac:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	685b      	ldr	r3, [r3, #4]
 80069b2:	4a81      	ldr	r2, [pc, #516]	; (8006bb8 <HAL_I2C_Init+0x274>)
 80069b4:	4293      	cmp	r3, r2
 80069b6:	d807      	bhi.n	80069c8 <HAL_I2C_Init+0x84>
 80069b8:	68fb      	ldr	r3, [r7, #12]
 80069ba:	4a80      	ldr	r2, [pc, #512]	; (8006bbc <HAL_I2C_Init+0x278>)
 80069bc:	4293      	cmp	r3, r2
 80069be:	bf94      	ite	ls
 80069c0:	2301      	movls	r3, #1
 80069c2:	2300      	movhi	r3, #0
 80069c4:	b2db      	uxtb	r3, r3
 80069c6:	e006      	b.n	80069d6 <HAL_I2C_Init+0x92>
 80069c8:	68fb      	ldr	r3, [r7, #12]
 80069ca:	4a7d      	ldr	r2, [pc, #500]	; (8006bc0 <HAL_I2C_Init+0x27c>)
 80069cc:	4293      	cmp	r3, r2
 80069ce:	bf94      	ite	ls
 80069d0:	2301      	movls	r3, #1
 80069d2:	2300      	movhi	r3, #0
 80069d4:	b2db      	uxtb	r3, r3
 80069d6:	2b00      	cmp	r3, #0
 80069d8:	d001      	beq.n	80069de <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80069da:	2301      	movs	r3, #1
 80069dc:	e0e7      	b.n	8006bae <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80069de:	68fb      	ldr	r3, [r7, #12]
 80069e0:	4a78      	ldr	r2, [pc, #480]	; (8006bc4 <HAL_I2C_Init+0x280>)
 80069e2:	fba2 2303 	umull	r2, r3, r2, r3
 80069e6:	0c9b      	lsrs	r3, r3, #18
 80069e8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	685b      	ldr	r3, [r3, #4]
 80069f0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	68ba      	ldr	r2, [r7, #8]
 80069fa:	430a      	orrs	r2, r1
 80069fc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	6a1b      	ldr	r3, [r3, #32]
 8006a04:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	685b      	ldr	r3, [r3, #4]
 8006a0c:	4a6a      	ldr	r2, [pc, #424]	; (8006bb8 <HAL_I2C_Init+0x274>)
 8006a0e:	4293      	cmp	r3, r2
 8006a10:	d802      	bhi.n	8006a18 <HAL_I2C_Init+0xd4>
 8006a12:	68bb      	ldr	r3, [r7, #8]
 8006a14:	3301      	adds	r3, #1
 8006a16:	e009      	b.n	8006a2c <HAL_I2C_Init+0xe8>
 8006a18:	68bb      	ldr	r3, [r7, #8]
 8006a1a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8006a1e:	fb02 f303 	mul.w	r3, r2, r3
 8006a22:	4a69      	ldr	r2, [pc, #420]	; (8006bc8 <HAL_I2C_Init+0x284>)
 8006a24:	fba2 2303 	umull	r2, r3, r2, r3
 8006a28:	099b      	lsrs	r3, r3, #6
 8006a2a:	3301      	adds	r3, #1
 8006a2c:	687a      	ldr	r2, [r7, #4]
 8006a2e:	6812      	ldr	r2, [r2, #0]
 8006a30:	430b      	orrs	r3, r1
 8006a32:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	69db      	ldr	r3, [r3, #28]
 8006a3a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8006a3e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	685b      	ldr	r3, [r3, #4]
 8006a46:	495c      	ldr	r1, [pc, #368]	; (8006bb8 <HAL_I2C_Init+0x274>)
 8006a48:	428b      	cmp	r3, r1
 8006a4a:	d819      	bhi.n	8006a80 <HAL_I2C_Init+0x13c>
 8006a4c:	68fb      	ldr	r3, [r7, #12]
 8006a4e:	1e59      	subs	r1, r3, #1
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	685b      	ldr	r3, [r3, #4]
 8006a54:	005b      	lsls	r3, r3, #1
 8006a56:	fbb1 f3f3 	udiv	r3, r1, r3
 8006a5a:	1c59      	adds	r1, r3, #1
 8006a5c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8006a60:	400b      	ands	r3, r1
 8006a62:	2b00      	cmp	r3, #0
 8006a64:	d00a      	beq.n	8006a7c <HAL_I2C_Init+0x138>
 8006a66:	68fb      	ldr	r3, [r7, #12]
 8006a68:	1e59      	subs	r1, r3, #1
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	685b      	ldr	r3, [r3, #4]
 8006a6e:	005b      	lsls	r3, r3, #1
 8006a70:	fbb1 f3f3 	udiv	r3, r1, r3
 8006a74:	3301      	adds	r3, #1
 8006a76:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006a7a:	e051      	b.n	8006b20 <HAL_I2C_Init+0x1dc>
 8006a7c:	2304      	movs	r3, #4
 8006a7e:	e04f      	b.n	8006b20 <HAL_I2C_Init+0x1dc>
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	689b      	ldr	r3, [r3, #8]
 8006a84:	2b00      	cmp	r3, #0
 8006a86:	d111      	bne.n	8006aac <HAL_I2C_Init+0x168>
 8006a88:	68fb      	ldr	r3, [r7, #12]
 8006a8a:	1e58      	subs	r0, r3, #1
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	6859      	ldr	r1, [r3, #4]
 8006a90:	460b      	mov	r3, r1
 8006a92:	005b      	lsls	r3, r3, #1
 8006a94:	440b      	add	r3, r1
 8006a96:	fbb0 f3f3 	udiv	r3, r0, r3
 8006a9a:	3301      	adds	r3, #1
 8006a9c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006aa0:	2b00      	cmp	r3, #0
 8006aa2:	bf0c      	ite	eq
 8006aa4:	2301      	moveq	r3, #1
 8006aa6:	2300      	movne	r3, #0
 8006aa8:	b2db      	uxtb	r3, r3
 8006aaa:	e012      	b.n	8006ad2 <HAL_I2C_Init+0x18e>
 8006aac:	68fb      	ldr	r3, [r7, #12]
 8006aae:	1e58      	subs	r0, r3, #1
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	6859      	ldr	r1, [r3, #4]
 8006ab4:	460b      	mov	r3, r1
 8006ab6:	009b      	lsls	r3, r3, #2
 8006ab8:	440b      	add	r3, r1
 8006aba:	0099      	lsls	r1, r3, #2
 8006abc:	440b      	add	r3, r1
 8006abe:	fbb0 f3f3 	udiv	r3, r0, r3
 8006ac2:	3301      	adds	r3, #1
 8006ac4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006ac8:	2b00      	cmp	r3, #0
 8006aca:	bf0c      	ite	eq
 8006acc:	2301      	moveq	r3, #1
 8006ace:	2300      	movne	r3, #0
 8006ad0:	b2db      	uxtb	r3, r3
 8006ad2:	2b00      	cmp	r3, #0
 8006ad4:	d001      	beq.n	8006ada <HAL_I2C_Init+0x196>
 8006ad6:	2301      	movs	r3, #1
 8006ad8:	e022      	b.n	8006b20 <HAL_I2C_Init+0x1dc>
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	689b      	ldr	r3, [r3, #8]
 8006ade:	2b00      	cmp	r3, #0
 8006ae0:	d10e      	bne.n	8006b00 <HAL_I2C_Init+0x1bc>
 8006ae2:	68fb      	ldr	r3, [r7, #12]
 8006ae4:	1e58      	subs	r0, r3, #1
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	6859      	ldr	r1, [r3, #4]
 8006aea:	460b      	mov	r3, r1
 8006aec:	005b      	lsls	r3, r3, #1
 8006aee:	440b      	add	r3, r1
 8006af0:	fbb0 f3f3 	udiv	r3, r0, r3
 8006af4:	3301      	adds	r3, #1
 8006af6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006afa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006afe:	e00f      	b.n	8006b20 <HAL_I2C_Init+0x1dc>
 8006b00:	68fb      	ldr	r3, [r7, #12]
 8006b02:	1e58      	subs	r0, r3, #1
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	6859      	ldr	r1, [r3, #4]
 8006b08:	460b      	mov	r3, r1
 8006b0a:	009b      	lsls	r3, r3, #2
 8006b0c:	440b      	add	r3, r1
 8006b0e:	0099      	lsls	r1, r3, #2
 8006b10:	440b      	add	r3, r1
 8006b12:	fbb0 f3f3 	udiv	r3, r0, r3
 8006b16:	3301      	adds	r3, #1
 8006b18:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006b1c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006b20:	6879      	ldr	r1, [r7, #4]
 8006b22:	6809      	ldr	r1, [r1, #0]
 8006b24:	4313      	orrs	r3, r2
 8006b26:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	69da      	ldr	r2, [r3, #28]
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	6a1b      	ldr	r3, [r3, #32]
 8006b3a:	431a      	orrs	r2, r3
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	430a      	orrs	r2, r1
 8006b42:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	689b      	ldr	r3, [r3, #8]
 8006b4a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8006b4e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8006b52:	687a      	ldr	r2, [r7, #4]
 8006b54:	6911      	ldr	r1, [r2, #16]
 8006b56:	687a      	ldr	r2, [r7, #4]
 8006b58:	68d2      	ldr	r2, [r2, #12]
 8006b5a:	4311      	orrs	r1, r2
 8006b5c:	687a      	ldr	r2, [r7, #4]
 8006b5e:	6812      	ldr	r2, [r2, #0]
 8006b60:	430b      	orrs	r3, r1
 8006b62:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	68db      	ldr	r3, [r3, #12]
 8006b6a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	695a      	ldr	r2, [r3, #20]
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	699b      	ldr	r3, [r3, #24]
 8006b76:	431a      	orrs	r2, r3
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	430a      	orrs	r2, r1
 8006b7e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	681a      	ldr	r2, [r3, #0]
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	f042 0201 	orr.w	r2, r2, #1
 8006b8e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	2200      	movs	r2, #0
 8006b94:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	2220      	movs	r2, #32
 8006b9a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	2200      	movs	r2, #0
 8006ba2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	2200      	movs	r2, #0
 8006ba8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8006bac:	2300      	movs	r3, #0
}
 8006bae:	4618      	mov	r0, r3
 8006bb0:	3710      	adds	r7, #16
 8006bb2:	46bd      	mov	sp, r7
 8006bb4:	bd80      	pop	{r7, pc}
 8006bb6:	bf00      	nop
 8006bb8:	000186a0 	.word	0x000186a0
 8006bbc:	001e847f 	.word	0x001e847f
 8006bc0:	003d08ff 	.word	0x003d08ff
 8006bc4:	431bde83 	.word	0x431bde83
 8006bc8:	10624dd3 	.word	0x10624dd3

08006bcc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006bcc:	b580      	push	{r7, lr}
 8006bce:	b086      	sub	sp, #24
 8006bd0:	af00      	add	r7, sp, #0
 8006bd2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	2b00      	cmp	r3, #0
 8006bd8:	d101      	bne.n	8006bde <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006bda:	2301      	movs	r3, #1
 8006bdc:	e26c      	b.n	80070b8 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	f003 0301 	and.w	r3, r3, #1
 8006be6:	2b00      	cmp	r3, #0
 8006be8:	f000 8087 	beq.w	8006cfa <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8006bec:	4b92      	ldr	r3, [pc, #584]	; (8006e38 <HAL_RCC_OscConfig+0x26c>)
 8006bee:	685b      	ldr	r3, [r3, #4]
 8006bf0:	f003 030c 	and.w	r3, r3, #12
 8006bf4:	2b04      	cmp	r3, #4
 8006bf6:	d00c      	beq.n	8006c12 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8006bf8:	4b8f      	ldr	r3, [pc, #572]	; (8006e38 <HAL_RCC_OscConfig+0x26c>)
 8006bfa:	685b      	ldr	r3, [r3, #4]
 8006bfc:	f003 030c 	and.w	r3, r3, #12
 8006c00:	2b08      	cmp	r3, #8
 8006c02:	d112      	bne.n	8006c2a <HAL_RCC_OscConfig+0x5e>
 8006c04:	4b8c      	ldr	r3, [pc, #560]	; (8006e38 <HAL_RCC_OscConfig+0x26c>)
 8006c06:	685b      	ldr	r3, [r3, #4]
 8006c08:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006c0c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006c10:	d10b      	bne.n	8006c2a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006c12:	4b89      	ldr	r3, [pc, #548]	; (8006e38 <HAL_RCC_OscConfig+0x26c>)
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006c1a:	2b00      	cmp	r3, #0
 8006c1c:	d06c      	beq.n	8006cf8 <HAL_RCC_OscConfig+0x12c>
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	685b      	ldr	r3, [r3, #4]
 8006c22:	2b00      	cmp	r3, #0
 8006c24:	d168      	bne.n	8006cf8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8006c26:	2301      	movs	r3, #1
 8006c28:	e246      	b.n	80070b8 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	685b      	ldr	r3, [r3, #4]
 8006c2e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006c32:	d106      	bne.n	8006c42 <HAL_RCC_OscConfig+0x76>
 8006c34:	4b80      	ldr	r3, [pc, #512]	; (8006e38 <HAL_RCC_OscConfig+0x26c>)
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	4a7f      	ldr	r2, [pc, #508]	; (8006e38 <HAL_RCC_OscConfig+0x26c>)
 8006c3a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006c3e:	6013      	str	r3, [r2, #0]
 8006c40:	e02e      	b.n	8006ca0 <HAL_RCC_OscConfig+0xd4>
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	685b      	ldr	r3, [r3, #4]
 8006c46:	2b00      	cmp	r3, #0
 8006c48:	d10c      	bne.n	8006c64 <HAL_RCC_OscConfig+0x98>
 8006c4a:	4b7b      	ldr	r3, [pc, #492]	; (8006e38 <HAL_RCC_OscConfig+0x26c>)
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	4a7a      	ldr	r2, [pc, #488]	; (8006e38 <HAL_RCC_OscConfig+0x26c>)
 8006c50:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006c54:	6013      	str	r3, [r2, #0]
 8006c56:	4b78      	ldr	r3, [pc, #480]	; (8006e38 <HAL_RCC_OscConfig+0x26c>)
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	4a77      	ldr	r2, [pc, #476]	; (8006e38 <HAL_RCC_OscConfig+0x26c>)
 8006c5c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006c60:	6013      	str	r3, [r2, #0]
 8006c62:	e01d      	b.n	8006ca0 <HAL_RCC_OscConfig+0xd4>
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	685b      	ldr	r3, [r3, #4]
 8006c68:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006c6c:	d10c      	bne.n	8006c88 <HAL_RCC_OscConfig+0xbc>
 8006c6e:	4b72      	ldr	r3, [pc, #456]	; (8006e38 <HAL_RCC_OscConfig+0x26c>)
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	4a71      	ldr	r2, [pc, #452]	; (8006e38 <HAL_RCC_OscConfig+0x26c>)
 8006c74:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006c78:	6013      	str	r3, [r2, #0]
 8006c7a:	4b6f      	ldr	r3, [pc, #444]	; (8006e38 <HAL_RCC_OscConfig+0x26c>)
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	4a6e      	ldr	r2, [pc, #440]	; (8006e38 <HAL_RCC_OscConfig+0x26c>)
 8006c80:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006c84:	6013      	str	r3, [r2, #0]
 8006c86:	e00b      	b.n	8006ca0 <HAL_RCC_OscConfig+0xd4>
 8006c88:	4b6b      	ldr	r3, [pc, #428]	; (8006e38 <HAL_RCC_OscConfig+0x26c>)
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	4a6a      	ldr	r2, [pc, #424]	; (8006e38 <HAL_RCC_OscConfig+0x26c>)
 8006c8e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006c92:	6013      	str	r3, [r2, #0]
 8006c94:	4b68      	ldr	r3, [pc, #416]	; (8006e38 <HAL_RCC_OscConfig+0x26c>)
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	4a67      	ldr	r2, [pc, #412]	; (8006e38 <HAL_RCC_OscConfig+0x26c>)
 8006c9a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006c9e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	685b      	ldr	r3, [r3, #4]
 8006ca4:	2b00      	cmp	r3, #0
 8006ca6:	d013      	beq.n	8006cd0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006ca8:	f7ff f910 	bl	8005ecc <HAL_GetTick>
 8006cac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006cae:	e008      	b.n	8006cc2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006cb0:	f7ff f90c 	bl	8005ecc <HAL_GetTick>
 8006cb4:	4602      	mov	r2, r0
 8006cb6:	693b      	ldr	r3, [r7, #16]
 8006cb8:	1ad3      	subs	r3, r2, r3
 8006cba:	2b64      	cmp	r3, #100	; 0x64
 8006cbc:	d901      	bls.n	8006cc2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8006cbe:	2303      	movs	r3, #3
 8006cc0:	e1fa      	b.n	80070b8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006cc2:	4b5d      	ldr	r3, [pc, #372]	; (8006e38 <HAL_RCC_OscConfig+0x26c>)
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006cca:	2b00      	cmp	r3, #0
 8006ccc:	d0f0      	beq.n	8006cb0 <HAL_RCC_OscConfig+0xe4>
 8006cce:	e014      	b.n	8006cfa <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006cd0:	f7ff f8fc 	bl	8005ecc <HAL_GetTick>
 8006cd4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006cd6:	e008      	b.n	8006cea <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006cd8:	f7ff f8f8 	bl	8005ecc <HAL_GetTick>
 8006cdc:	4602      	mov	r2, r0
 8006cde:	693b      	ldr	r3, [r7, #16]
 8006ce0:	1ad3      	subs	r3, r2, r3
 8006ce2:	2b64      	cmp	r3, #100	; 0x64
 8006ce4:	d901      	bls.n	8006cea <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8006ce6:	2303      	movs	r3, #3
 8006ce8:	e1e6      	b.n	80070b8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006cea:	4b53      	ldr	r3, [pc, #332]	; (8006e38 <HAL_RCC_OscConfig+0x26c>)
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006cf2:	2b00      	cmp	r3, #0
 8006cf4:	d1f0      	bne.n	8006cd8 <HAL_RCC_OscConfig+0x10c>
 8006cf6:	e000      	b.n	8006cfa <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006cf8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	f003 0302 	and.w	r3, r3, #2
 8006d02:	2b00      	cmp	r3, #0
 8006d04:	d063      	beq.n	8006dce <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8006d06:	4b4c      	ldr	r3, [pc, #304]	; (8006e38 <HAL_RCC_OscConfig+0x26c>)
 8006d08:	685b      	ldr	r3, [r3, #4]
 8006d0a:	f003 030c 	and.w	r3, r3, #12
 8006d0e:	2b00      	cmp	r3, #0
 8006d10:	d00b      	beq.n	8006d2a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8006d12:	4b49      	ldr	r3, [pc, #292]	; (8006e38 <HAL_RCC_OscConfig+0x26c>)
 8006d14:	685b      	ldr	r3, [r3, #4]
 8006d16:	f003 030c 	and.w	r3, r3, #12
 8006d1a:	2b08      	cmp	r3, #8
 8006d1c:	d11c      	bne.n	8006d58 <HAL_RCC_OscConfig+0x18c>
 8006d1e:	4b46      	ldr	r3, [pc, #280]	; (8006e38 <HAL_RCC_OscConfig+0x26c>)
 8006d20:	685b      	ldr	r3, [r3, #4]
 8006d22:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006d26:	2b00      	cmp	r3, #0
 8006d28:	d116      	bne.n	8006d58 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006d2a:	4b43      	ldr	r3, [pc, #268]	; (8006e38 <HAL_RCC_OscConfig+0x26c>)
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	f003 0302 	and.w	r3, r3, #2
 8006d32:	2b00      	cmp	r3, #0
 8006d34:	d005      	beq.n	8006d42 <HAL_RCC_OscConfig+0x176>
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	691b      	ldr	r3, [r3, #16]
 8006d3a:	2b01      	cmp	r3, #1
 8006d3c:	d001      	beq.n	8006d42 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8006d3e:	2301      	movs	r3, #1
 8006d40:	e1ba      	b.n	80070b8 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006d42:	4b3d      	ldr	r3, [pc, #244]	; (8006e38 <HAL_RCC_OscConfig+0x26c>)
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	695b      	ldr	r3, [r3, #20]
 8006d4e:	00db      	lsls	r3, r3, #3
 8006d50:	4939      	ldr	r1, [pc, #228]	; (8006e38 <HAL_RCC_OscConfig+0x26c>)
 8006d52:	4313      	orrs	r3, r2
 8006d54:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006d56:	e03a      	b.n	8006dce <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	691b      	ldr	r3, [r3, #16]
 8006d5c:	2b00      	cmp	r3, #0
 8006d5e:	d020      	beq.n	8006da2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006d60:	4b36      	ldr	r3, [pc, #216]	; (8006e3c <HAL_RCC_OscConfig+0x270>)
 8006d62:	2201      	movs	r2, #1
 8006d64:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006d66:	f7ff f8b1 	bl	8005ecc <HAL_GetTick>
 8006d6a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006d6c:	e008      	b.n	8006d80 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006d6e:	f7ff f8ad 	bl	8005ecc <HAL_GetTick>
 8006d72:	4602      	mov	r2, r0
 8006d74:	693b      	ldr	r3, [r7, #16]
 8006d76:	1ad3      	subs	r3, r2, r3
 8006d78:	2b02      	cmp	r3, #2
 8006d7a:	d901      	bls.n	8006d80 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8006d7c:	2303      	movs	r3, #3
 8006d7e:	e19b      	b.n	80070b8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006d80:	4b2d      	ldr	r3, [pc, #180]	; (8006e38 <HAL_RCC_OscConfig+0x26c>)
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	f003 0302 	and.w	r3, r3, #2
 8006d88:	2b00      	cmp	r3, #0
 8006d8a:	d0f0      	beq.n	8006d6e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006d8c:	4b2a      	ldr	r3, [pc, #168]	; (8006e38 <HAL_RCC_OscConfig+0x26c>)
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	695b      	ldr	r3, [r3, #20]
 8006d98:	00db      	lsls	r3, r3, #3
 8006d9a:	4927      	ldr	r1, [pc, #156]	; (8006e38 <HAL_RCC_OscConfig+0x26c>)
 8006d9c:	4313      	orrs	r3, r2
 8006d9e:	600b      	str	r3, [r1, #0]
 8006da0:	e015      	b.n	8006dce <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006da2:	4b26      	ldr	r3, [pc, #152]	; (8006e3c <HAL_RCC_OscConfig+0x270>)
 8006da4:	2200      	movs	r2, #0
 8006da6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006da8:	f7ff f890 	bl	8005ecc <HAL_GetTick>
 8006dac:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006dae:	e008      	b.n	8006dc2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006db0:	f7ff f88c 	bl	8005ecc <HAL_GetTick>
 8006db4:	4602      	mov	r2, r0
 8006db6:	693b      	ldr	r3, [r7, #16]
 8006db8:	1ad3      	subs	r3, r2, r3
 8006dba:	2b02      	cmp	r3, #2
 8006dbc:	d901      	bls.n	8006dc2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8006dbe:	2303      	movs	r3, #3
 8006dc0:	e17a      	b.n	80070b8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006dc2:	4b1d      	ldr	r3, [pc, #116]	; (8006e38 <HAL_RCC_OscConfig+0x26c>)
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	f003 0302 	and.w	r3, r3, #2
 8006dca:	2b00      	cmp	r3, #0
 8006dcc:	d1f0      	bne.n	8006db0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	f003 0308 	and.w	r3, r3, #8
 8006dd6:	2b00      	cmp	r3, #0
 8006dd8:	d03a      	beq.n	8006e50 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	699b      	ldr	r3, [r3, #24]
 8006dde:	2b00      	cmp	r3, #0
 8006de0:	d019      	beq.n	8006e16 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006de2:	4b17      	ldr	r3, [pc, #92]	; (8006e40 <HAL_RCC_OscConfig+0x274>)
 8006de4:	2201      	movs	r2, #1
 8006de6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006de8:	f7ff f870 	bl	8005ecc <HAL_GetTick>
 8006dec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006dee:	e008      	b.n	8006e02 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006df0:	f7ff f86c 	bl	8005ecc <HAL_GetTick>
 8006df4:	4602      	mov	r2, r0
 8006df6:	693b      	ldr	r3, [r7, #16]
 8006df8:	1ad3      	subs	r3, r2, r3
 8006dfa:	2b02      	cmp	r3, #2
 8006dfc:	d901      	bls.n	8006e02 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8006dfe:	2303      	movs	r3, #3
 8006e00:	e15a      	b.n	80070b8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006e02:	4b0d      	ldr	r3, [pc, #52]	; (8006e38 <HAL_RCC_OscConfig+0x26c>)
 8006e04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e06:	f003 0302 	and.w	r3, r3, #2
 8006e0a:	2b00      	cmp	r3, #0
 8006e0c:	d0f0      	beq.n	8006df0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8006e0e:	2001      	movs	r0, #1
 8006e10:	f000 fad8 	bl	80073c4 <RCC_Delay>
 8006e14:	e01c      	b.n	8006e50 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006e16:	4b0a      	ldr	r3, [pc, #40]	; (8006e40 <HAL_RCC_OscConfig+0x274>)
 8006e18:	2200      	movs	r2, #0
 8006e1a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006e1c:	f7ff f856 	bl	8005ecc <HAL_GetTick>
 8006e20:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006e22:	e00f      	b.n	8006e44 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006e24:	f7ff f852 	bl	8005ecc <HAL_GetTick>
 8006e28:	4602      	mov	r2, r0
 8006e2a:	693b      	ldr	r3, [r7, #16]
 8006e2c:	1ad3      	subs	r3, r2, r3
 8006e2e:	2b02      	cmp	r3, #2
 8006e30:	d908      	bls.n	8006e44 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8006e32:	2303      	movs	r3, #3
 8006e34:	e140      	b.n	80070b8 <HAL_RCC_OscConfig+0x4ec>
 8006e36:	bf00      	nop
 8006e38:	40021000 	.word	0x40021000
 8006e3c:	42420000 	.word	0x42420000
 8006e40:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006e44:	4b9e      	ldr	r3, [pc, #632]	; (80070c0 <HAL_RCC_OscConfig+0x4f4>)
 8006e46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e48:	f003 0302 	and.w	r3, r3, #2
 8006e4c:	2b00      	cmp	r3, #0
 8006e4e:	d1e9      	bne.n	8006e24 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	f003 0304 	and.w	r3, r3, #4
 8006e58:	2b00      	cmp	r3, #0
 8006e5a:	f000 80a6 	beq.w	8006faa <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006e5e:	2300      	movs	r3, #0
 8006e60:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006e62:	4b97      	ldr	r3, [pc, #604]	; (80070c0 <HAL_RCC_OscConfig+0x4f4>)
 8006e64:	69db      	ldr	r3, [r3, #28]
 8006e66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006e6a:	2b00      	cmp	r3, #0
 8006e6c:	d10d      	bne.n	8006e8a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006e6e:	4b94      	ldr	r3, [pc, #592]	; (80070c0 <HAL_RCC_OscConfig+0x4f4>)
 8006e70:	69db      	ldr	r3, [r3, #28]
 8006e72:	4a93      	ldr	r2, [pc, #588]	; (80070c0 <HAL_RCC_OscConfig+0x4f4>)
 8006e74:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006e78:	61d3      	str	r3, [r2, #28]
 8006e7a:	4b91      	ldr	r3, [pc, #580]	; (80070c0 <HAL_RCC_OscConfig+0x4f4>)
 8006e7c:	69db      	ldr	r3, [r3, #28]
 8006e7e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006e82:	60bb      	str	r3, [r7, #8]
 8006e84:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006e86:	2301      	movs	r3, #1
 8006e88:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006e8a:	4b8e      	ldr	r3, [pc, #568]	; (80070c4 <HAL_RCC_OscConfig+0x4f8>)
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006e92:	2b00      	cmp	r3, #0
 8006e94:	d118      	bne.n	8006ec8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006e96:	4b8b      	ldr	r3, [pc, #556]	; (80070c4 <HAL_RCC_OscConfig+0x4f8>)
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	4a8a      	ldr	r2, [pc, #552]	; (80070c4 <HAL_RCC_OscConfig+0x4f8>)
 8006e9c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006ea0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006ea2:	f7ff f813 	bl	8005ecc <HAL_GetTick>
 8006ea6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006ea8:	e008      	b.n	8006ebc <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006eaa:	f7ff f80f 	bl	8005ecc <HAL_GetTick>
 8006eae:	4602      	mov	r2, r0
 8006eb0:	693b      	ldr	r3, [r7, #16]
 8006eb2:	1ad3      	subs	r3, r2, r3
 8006eb4:	2b64      	cmp	r3, #100	; 0x64
 8006eb6:	d901      	bls.n	8006ebc <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8006eb8:	2303      	movs	r3, #3
 8006eba:	e0fd      	b.n	80070b8 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006ebc:	4b81      	ldr	r3, [pc, #516]	; (80070c4 <HAL_RCC_OscConfig+0x4f8>)
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006ec4:	2b00      	cmp	r3, #0
 8006ec6:	d0f0      	beq.n	8006eaa <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	68db      	ldr	r3, [r3, #12]
 8006ecc:	2b01      	cmp	r3, #1
 8006ece:	d106      	bne.n	8006ede <HAL_RCC_OscConfig+0x312>
 8006ed0:	4b7b      	ldr	r3, [pc, #492]	; (80070c0 <HAL_RCC_OscConfig+0x4f4>)
 8006ed2:	6a1b      	ldr	r3, [r3, #32]
 8006ed4:	4a7a      	ldr	r2, [pc, #488]	; (80070c0 <HAL_RCC_OscConfig+0x4f4>)
 8006ed6:	f043 0301 	orr.w	r3, r3, #1
 8006eda:	6213      	str	r3, [r2, #32]
 8006edc:	e02d      	b.n	8006f3a <HAL_RCC_OscConfig+0x36e>
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	68db      	ldr	r3, [r3, #12]
 8006ee2:	2b00      	cmp	r3, #0
 8006ee4:	d10c      	bne.n	8006f00 <HAL_RCC_OscConfig+0x334>
 8006ee6:	4b76      	ldr	r3, [pc, #472]	; (80070c0 <HAL_RCC_OscConfig+0x4f4>)
 8006ee8:	6a1b      	ldr	r3, [r3, #32]
 8006eea:	4a75      	ldr	r2, [pc, #468]	; (80070c0 <HAL_RCC_OscConfig+0x4f4>)
 8006eec:	f023 0301 	bic.w	r3, r3, #1
 8006ef0:	6213      	str	r3, [r2, #32]
 8006ef2:	4b73      	ldr	r3, [pc, #460]	; (80070c0 <HAL_RCC_OscConfig+0x4f4>)
 8006ef4:	6a1b      	ldr	r3, [r3, #32]
 8006ef6:	4a72      	ldr	r2, [pc, #456]	; (80070c0 <HAL_RCC_OscConfig+0x4f4>)
 8006ef8:	f023 0304 	bic.w	r3, r3, #4
 8006efc:	6213      	str	r3, [r2, #32]
 8006efe:	e01c      	b.n	8006f3a <HAL_RCC_OscConfig+0x36e>
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	68db      	ldr	r3, [r3, #12]
 8006f04:	2b05      	cmp	r3, #5
 8006f06:	d10c      	bne.n	8006f22 <HAL_RCC_OscConfig+0x356>
 8006f08:	4b6d      	ldr	r3, [pc, #436]	; (80070c0 <HAL_RCC_OscConfig+0x4f4>)
 8006f0a:	6a1b      	ldr	r3, [r3, #32]
 8006f0c:	4a6c      	ldr	r2, [pc, #432]	; (80070c0 <HAL_RCC_OscConfig+0x4f4>)
 8006f0e:	f043 0304 	orr.w	r3, r3, #4
 8006f12:	6213      	str	r3, [r2, #32]
 8006f14:	4b6a      	ldr	r3, [pc, #424]	; (80070c0 <HAL_RCC_OscConfig+0x4f4>)
 8006f16:	6a1b      	ldr	r3, [r3, #32]
 8006f18:	4a69      	ldr	r2, [pc, #420]	; (80070c0 <HAL_RCC_OscConfig+0x4f4>)
 8006f1a:	f043 0301 	orr.w	r3, r3, #1
 8006f1e:	6213      	str	r3, [r2, #32]
 8006f20:	e00b      	b.n	8006f3a <HAL_RCC_OscConfig+0x36e>
 8006f22:	4b67      	ldr	r3, [pc, #412]	; (80070c0 <HAL_RCC_OscConfig+0x4f4>)
 8006f24:	6a1b      	ldr	r3, [r3, #32]
 8006f26:	4a66      	ldr	r2, [pc, #408]	; (80070c0 <HAL_RCC_OscConfig+0x4f4>)
 8006f28:	f023 0301 	bic.w	r3, r3, #1
 8006f2c:	6213      	str	r3, [r2, #32]
 8006f2e:	4b64      	ldr	r3, [pc, #400]	; (80070c0 <HAL_RCC_OscConfig+0x4f4>)
 8006f30:	6a1b      	ldr	r3, [r3, #32]
 8006f32:	4a63      	ldr	r2, [pc, #396]	; (80070c0 <HAL_RCC_OscConfig+0x4f4>)
 8006f34:	f023 0304 	bic.w	r3, r3, #4
 8006f38:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	68db      	ldr	r3, [r3, #12]
 8006f3e:	2b00      	cmp	r3, #0
 8006f40:	d015      	beq.n	8006f6e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006f42:	f7fe ffc3 	bl	8005ecc <HAL_GetTick>
 8006f46:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006f48:	e00a      	b.n	8006f60 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006f4a:	f7fe ffbf 	bl	8005ecc <HAL_GetTick>
 8006f4e:	4602      	mov	r2, r0
 8006f50:	693b      	ldr	r3, [r7, #16]
 8006f52:	1ad3      	subs	r3, r2, r3
 8006f54:	f241 3288 	movw	r2, #5000	; 0x1388
 8006f58:	4293      	cmp	r3, r2
 8006f5a:	d901      	bls.n	8006f60 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8006f5c:	2303      	movs	r3, #3
 8006f5e:	e0ab      	b.n	80070b8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006f60:	4b57      	ldr	r3, [pc, #348]	; (80070c0 <HAL_RCC_OscConfig+0x4f4>)
 8006f62:	6a1b      	ldr	r3, [r3, #32]
 8006f64:	f003 0302 	and.w	r3, r3, #2
 8006f68:	2b00      	cmp	r3, #0
 8006f6a:	d0ee      	beq.n	8006f4a <HAL_RCC_OscConfig+0x37e>
 8006f6c:	e014      	b.n	8006f98 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006f6e:	f7fe ffad 	bl	8005ecc <HAL_GetTick>
 8006f72:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006f74:	e00a      	b.n	8006f8c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006f76:	f7fe ffa9 	bl	8005ecc <HAL_GetTick>
 8006f7a:	4602      	mov	r2, r0
 8006f7c:	693b      	ldr	r3, [r7, #16]
 8006f7e:	1ad3      	subs	r3, r2, r3
 8006f80:	f241 3288 	movw	r2, #5000	; 0x1388
 8006f84:	4293      	cmp	r3, r2
 8006f86:	d901      	bls.n	8006f8c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8006f88:	2303      	movs	r3, #3
 8006f8a:	e095      	b.n	80070b8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006f8c:	4b4c      	ldr	r3, [pc, #304]	; (80070c0 <HAL_RCC_OscConfig+0x4f4>)
 8006f8e:	6a1b      	ldr	r3, [r3, #32]
 8006f90:	f003 0302 	and.w	r3, r3, #2
 8006f94:	2b00      	cmp	r3, #0
 8006f96:	d1ee      	bne.n	8006f76 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8006f98:	7dfb      	ldrb	r3, [r7, #23]
 8006f9a:	2b01      	cmp	r3, #1
 8006f9c:	d105      	bne.n	8006faa <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006f9e:	4b48      	ldr	r3, [pc, #288]	; (80070c0 <HAL_RCC_OscConfig+0x4f4>)
 8006fa0:	69db      	ldr	r3, [r3, #28]
 8006fa2:	4a47      	ldr	r2, [pc, #284]	; (80070c0 <HAL_RCC_OscConfig+0x4f4>)
 8006fa4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006fa8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	69db      	ldr	r3, [r3, #28]
 8006fae:	2b00      	cmp	r3, #0
 8006fb0:	f000 8081 	beq.w	80070b6 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006fb4:	4b42      	ldr	r3, [pc, #264]	; (80070c0 <HAL_RCC_OscConfig+0x4f4>)
 8006fb6:	685b      	ldr	r3, [r3, #4]
 8006fb8:	f003 030c 	and.w	r3, r3, #12
 8006fbc:	2b08      	cmp	r3, #8
 8006fbe:	d061      	beq.n	8007084 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	69db      	ldr	r3, [r3, #28]
 8006fc4:	2b02      	cmp	r3, #2
 8006fc6:	d146      	bne.n	8007056 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006fc8:	4b3f      	ldr	r3, [pc, #252]	; (80070c8 <HAL_RCC_OscConfig+0x4fc>)
 8006fca:	2200      	movs	r2, #0
 8006fcc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006fce:	f7fe ff7d 	bl	8005ecc <HAL_GetTick>
 8006fd2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006fd4:	e008      	b.n	8006fe8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006fd6:	f7fe ff79 	bl	8005ecc <HAL_GetTick>
 8006fda:	4602      	mov	r2, r0
 8006fdc:	693b      	ldr	r3, [r7, #16]
 8006fde:	1ad3      	subs	r3, r2, r3
 8006fe0:	2b02      	cmp	r3, #2
 8006fe2:	d901      	bls.n	8006fe8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8006fe4:	2303      	movs	r3, #3
 8006fe6:	e067      	b.n	80070b8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006fe8:	4b35      	ldr	r3, [pc, #212]	; (80070c0 <HAL_RCC_OscConfig+0x4f4>)
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006ff0:	2b00      	cmp	r3, #0
 8006ff2:	d1f0      	bne.n	8006fd6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	6a1b      	ldr	r3, [r3, #32]
 8006ff8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006ffc:	d108      	bne.n	8007010 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8006ffe:	4b30      	ldr	r3, [pc, #192]	; (80070c0 <HAL_RCC_OscConfig+0x4f4>)
 8007000:	685b      	ldr	r3, [r3, #4]
 8007002:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	689b      	ldr	r3, [r3, #8]
 800700a:	492d      	ldr	r1, [pc, #180]	; (80070c0 <HAL_RCC_OscConfig+0x4f4>)
 800700c:	4313      	orrs	r3, r2
 800700e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007010:	4b2b      	ldr	r3, [pc, #172]	; (80070c0 <HAL_RCC_OscConfig+0x4f4>)
 8007012:	685b      	ldr	r3, [r3, #4]
 8007014:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	6a19      	ldr	r1, [r3, #32]
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007020:	430b      	orrs	r3, r1
 8007022:	4927      	ldr	r1, [pc, #156]	; (80070c0 <HAL_RCC_OscConfig+0x4f4>)
 8007024:	4313      	orrs	r3, r2
 8007026:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007028:	4b27      	ldr	r3, [pc, #156]	; (80070c8 <HAL_RCC_OscConfig+0x4fc>)
 800702a:	2201      	movs	r2, #1
 800702c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800702e:	f7fe ff4d 	bl	8005ecc <HAL_GetTick>
 8007032:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8007034:	e008      	b.n	8007048 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007036:	f7fe ff49 	bl	8005ecc <HAL_GetTick>
 800703a:	4602      	mov	r2, r0
 800703c:	693b      	ldr	r3, [r7, #16]
 800703e:	1ad3      	subs	r3, r2, r3
 8007040:	2b02      	cmp	r3, #2
 8007042:	d901      	bls.n	8007048 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8007044:	2303      	movs	r3, #3
 8007046:	e037      	b.n	80070b8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8007048:	4b1d      	ldr	r3, [pc, #116]	; (80070c0 <HAL_RCC_OscConfig+0x4f4>)
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007050:	2b00      	cmp	r3, #0
 8007052:	d0f0      	beq.n	8007036 <HAL_RCC_OscConfig+0x46a>
 8007054:	e02f      	b.n	80070b6 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007056:	4b1c      	ldr	r3, [pc, #112]	; (80070c8 <HAL_RCC_OscConfig+0x4fc>)
 8007058:	2200      	movs	r2, #0
 800705a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800705c:	f7fe ff36 	bl	8005ecc <HAL_GetTick>
 8007060:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8007062:	e008      	b.n	8007076 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007064:	f7fe ff32 	bl	8005ecc <HAL_GetTick>
 8007068:	4602      	mov	r2, r0
 800706a:	693b      	ldr	r3, [r7, #16]
 800706c:	1ad3      	subs	r3, r2, r3
 800706e:	2b02      	cmp	r3, #2
 8007070:	d901      	bls.n	8007076 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8007072:	2303      	movs	r3, #3
 8007074:	e020      	b.n	80070b8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8007076:	4b12      	ldr	r3, [pc, #72]	; (80070c0 <HAL_RCC_OscConfig+0x4f4>)
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800707e:	2b00      	cmp	r3, #0
 8007080:	d1f0      	bne.n	8007064 <HAL_RCC_OscConfig+0x498>
 8007082:	e018      	b.n	80070b6 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	69db      	ldr	r3, [r3, #28]
 8007088:	2b01      	cmp	r3, #1
 800708a:	d101      	bne.n	8007090 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 800708c:	2301      	movs	r3, #1
 800708e:	e013      	b.n	80070b8 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8007090:	4b0b      	ldr	r3, [pc, #44]	; (80070c0 <HAL_RCC_OscConfig+0x4f4>)
 8007092:	685b      	ldr	r3, [r3, #4]
 8007094:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007096:	68fb      	ldr	r3, [r7, #12]
 8007098:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	6a1b      	ldr	r3, [r3, #32]
 80070a0:	429a      	cmp	r2, r3
 80070a2:	d106      	bne.n	80070b2 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80070a4:	68fb      	ldr	r3, [r7, #12]
 80070a6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80070ae:	429a      	cmp	r2, r3
 80070b0:	d001      	beq.n	80070b6 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80070b2:	2301      	movs	r3, #1
 80070b4:	e000      	b.n	80070b8 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80070b6:	2300      	movs	r3, #0
}
 80070b8:	4618      	mov	r0, r3
 80070ba:	3718      	adds	r7, #24
 80070bc:	46bd      	mov	sp, r7
 80070be:	bd80      	pop	{r7, pc}
 80070c0:	40021000 	.word	0x40021000
 80070c4:	40007000 	.word	0x40007000
 80070c8:	42420060 	.word	0x42420060

080070cc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80070cc:	b580      	push	{r7, lr}
 80070ce:	b084      	sub	sp, #16
 80070d0:	af00      	add	r7, sp, #0
 80070d2:	6078      	str	r0, [r7, #4]
 80070d4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	2b00      	cmp	r3, #0
 80070da:	d101      	bne.n	80070e0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80070dc:	2301      	movs	r3, #1
 80070de:	e0d0      	b.n	8007282 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80070e0:	4b6a      	ldr	r3, [pc, #424]	; (800728c <HAL_RCC_ClockConfig+0x1c0>)
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	f003 0307 	and.w	r3, r3, #7
 80070e8:	683a      	ldr	r2, [r7, #0]
 80070ea:	429a      	cmp	r2, r3
 80070ec:	d910      	bls.n	8007110 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80070ee:	4b67      	ldr	r3, [pc, #412]	; (800728c <HAL_RCC_ClockConfig+0x1c0>)
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	f023 0207 	bic.w	r2, r3, #7
 80070f6:	4965      	ldr	r1, [pc, #404]	; (800728c <HAL_RCC_ClockConfig+0x1c0>)
 80070f8:	683b      	ldr	r3, [r7, #0]
 80070fa:	4313      	orrs	r3, r2
 80070fc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80070fe:	4b63      	ldr	r3, [pc, #396]	; (800728c <HAL_RCC_ClockConfig+0x1c0>)
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	f003 0307 	and.w	r3, r3, #7
 8007106:	683a      	ldr	r2, [r7, #0]
 8007108:	429a      	cmp	r2, r3
 800710a:	d001      	beq.n	8007110 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800710c:	2301      	movs	r3, #1
 800710e:	e0b8      	b.n	8007282 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	f003 0302 	and.w	r3, r3, #2
 8007118:	2b00      	cmp	r3, #0
 800711a:	d020      	beq.n	800715e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	f003 0304 	and.w	r3, r3, #4
 8007124:	2b00      	cmp	r3, #0
 8007126:	d005      	beq.n	8007134 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007128:	4b59      	ldr	r3, [pc, #356]	; (8007290 <HAL_RCC_ClockConfig+0x1c4>)
 800712a:	685b      	ldr	r3, [r3, #4]
 800712c:	4a58      	ldr	r2, [pc, #352]	; (8007290 <HAL_RCC_ClockConfig+0x1c4>)
 800712e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8007132:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	f003 0308 	and.w	r3, r3, #8
 800713c:	2b00      	cmp	r3, #0
 800713e:	d005      	beq.n	800714c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007140:	4b53      	ldr	r3, [pc, #332]	; (8007290 <HAL_RCC_ClockConfig+0x1c4>)
 8007142:	685b      	ldr	r3, [r3, #4]
 8007144:	4a52      	ldr	r2, [pc, #328]	; (8007290 <HAL_RCC_ClockConfig+0x1c4>)
 8007146:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800714a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800714c:	4b50      	ldr	r3, [pc, #320]	; (8007290 <HAL_RCC_ClockConfig+0x1c4>)
 800714e:	685b      	ldr	r3, [r3, #4]
 8007150:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	689b      	ldr	r3, [r3, #8]
 8007158:	494d      	ldr	r1, [pc, #308]	; (8007290 <HAL_RCC_ClockConfig+0x1c4>)
 800715a:	4313      	orrs	r3, r2
 800715c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	681b      	ldr	r3, [r3, #0]
 8007162:	f003 0301 	and.w	r3, r3, #1
 8007166:	2b00      	cmp	r3, #0
 8007168:	d040      	beq.n	80071ec <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	685b      	ldr	r3, [r3, #4]
 800716e:	2b01      	cmp	r3, #1
 8007170:	d107      	bne.n	8007182 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007172:	4b47      	ldr	r3, [pc, #284]	; (8007290 <HAL_RCC_ClockConfig+0x1c4>)
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800717a:	2b00      	cmp	r3, #0
 800717c:	d115      	bne.n	80071aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800717e:	2301      	movs	r3, #1
 8007180:	e07f      	b.n	8007282 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	685b      	ldr	r3, [r3, #4]
 8007186:	2b02      	cmp	r3, #2
 8007188:	d107      	bne.n	800719a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800718a:	4b41      	ldr	r3, [pc, #260]	; (8007290 <HAL_RCC_ClockConfig+0x1c4>)
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007192:	2b00      	cmp	r3, #0
 8007194:	d109      	bne.n	80071aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007196:	2301      	movs	r3, #1
 8007198:	e073      	b.n	8007282 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800719a:	4b3d      	ldr	r3, [pc, #244]	; (8007290 <HAL_RCC_ClockConfig+0x1c4>)
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	f003 0302 	and.w	r3, r3, #2
 80071a2:	2b00      	cmp	r3, #0
 80071a4:	d101      	bne.n	80071aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80071a6:	2301      	movs	r3, #1
 80071a8:	e06b      	b.n	8007282 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80071aa:	4b39      	ldr	r3, [pc, #228]	; (8007290 <HAL_RCC_ClockConfig+0x1c4>)
 80071ac:	685b      	ldr	r3, [r3, #4]
 80071ae:	f023 0203 	bic.w	r2, r3, #3
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	685b      	ldr	r3, [r3, #4]
 80071b6:	4936      	ldr	r1, [pc, #216]	; (8007290 <HAL_RCC_ClockConfig+0x1c4>)
 80071b8:	4313      	orrs	r3, r2
 80071ba:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80071bc:	f7fe fe86 	bl	8005ecc <HAL_GetTick>
 80071c0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80071c2:	e00a      	b.n	80071da <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80071c4:	f7fe fe82 	bl	8005ecc <HAL_GetTick>
 80071c8:	4602      	mov	r2, r0
 80071ca:	68fb      	ldr	r3, [r7, #12]
 80071cc:	1ad3      	subs	r3, r2, r3
 80071ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80071d2:	4293      	cmp	r3, r2
 80071d4:	d901      	bls.n	80071da <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80071d6:	2303      	movs	r3, #3
 80071d8:	e053      	b.n	8007282 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80071da:	4b2d      	ldr	r3, [pc, #180]	; (8007290 <HAL_RCC_ClockConfig+0x1c4>)
 80071dc:	685b      	ldr	r3, [r3, #4]
 80071de:	f003 020c 	and.w	r2, r3, #12
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	685b      	ldr	r3, [r3, #4]
 80071e6:	009b      	lsls	r3, r3, #2
 80071e8:	429a      	cmp	r2, r3
 80071ea:	d1eb      	bne.n	80071c4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80071ec:	4b27      	ldr	r3, [pc, #156]	; (800728c <HAL_RCC_ClockConfig+0x1c0>)
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	f003 0307 	and.w	r3, r3, #7
 80071f4:	683a      	ldr	r2, [r7, #0]
 80071f6:	429a      	cmp	r2, r3
 80071f8:	d210      	bcs.n	800721c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80071fa:	4b24      	ldr	r3, [pc, #144]	; (800728c <HAL_RCC_ClockConfig+0x1c0>)
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	f023 0207 	bic.w	r2, r3, #7
 8007202:	4922      	ldr	r1, [pc, #136]	; (800728c <HAL_RCC_ClockConfig+0x1c0>)
 8007204:	683b      	ldr	r3, [r7, #0]
 8007206:	4313      	orrs	r3, r2
 8007208:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800720a:	4b20      	ldr	r3, [pc, #128]	; (800728c <HAL_RCC_ClockConfig+0x1c0>)
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	f003 0307 	and.w	r3, r3, #7
 8007212:	683a      	ldr	r2, [r7, #0]
 8007214:	429a      	cmp	r2, r3
 8007216:	d001      	beq.n	800721c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8007218:	2301      	movs	r3, #1
 800721a:	e032      	b.n	8007282 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	f003 0304 	and.w	r3, r3, #4
 8007224:	2b00      	cmp	r3, #0
 8007226:	d008      	beq.n	800723a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007228:	4b19      	ldr	r3, [pc, #100]	; (8007290 <HAL_RCC_ClockConfig+0x1c4>)
 800722a:	685b      	ldr	r3, [r3, #4]
 800722c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	68db      	ldr	r3, [r3, #12]
 8007234:	4916      	ldr	r1, [pc, #88]	; (8007290 <HAL_RCC_ClockConfig+0x1c4>)
 8007236:	4313      	orrs	r3, r2
 8007238:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	f003 0308 	and.w	r3, r3, #8
 8007242:	2b00      	cmp	r3, #0
 8007244:	d009      	beq.n	800725a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8007246:	4b12      	ldr	r3, [pc, #72]	; (8007290 <HAL_RCC_ClockConfig+0x1c4>)
 8007248:	685b      	ldr	r3, [r3, #4]
 800724a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	691b      	ldr	r3, [r3, #16]
 8007252:	00db      	lsls	r3, r3, #3
 8007254:	490e      	ldr	r1, [pc, #56]	; (8007290 <HAL_RCC_ClockConfig+0x1c4>)
 8007256:	4313      	orrs	r3, r2
 8007258:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800725a:	f000 f821 	bl	80072a0 <HAL_RCC_GetSysClockFreq>
 800725e:	4602      	mov	r2, r0
 8007260:	4b0b      	ldr	r3, [pc, #44]	; (8007290 <HAL_RCC_ClockConfig+0x1c4>)
 8007262:	685b      	ldr	r3, [r3, #4]
 8007264:	091b      	lsrs	r3, r3, #4
 8007266:	f003 030f 	and.w	r3, r3, #15
 800726a:	490a      	ldr	r1, [pc, #40]	; (8007294 <HAL_RCC_ClockConfig+0x1c8>)
 800726c:	5ccb      	ldrb	r3, [r1, r3]
 800726e:	fa22 f303 	lsr.w	r3, r2, r3
 8007272:	4a09      	ldr	r2, [pc, #36]	; (8007298 <HAL_RCC_ClockConfig+0x1cc>)
 8007274:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8007276:	4b09      	ldr	r3, [pc, #36]	; (800729c <HAL_RCC_ClockConfig+0x1d0>)
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	4618      	mov	r0, r3
 800727c:	f7fe fde4 	bl	8005e48 <HAL_InitTick>

  return HAL_OK;
 8007280:	2300      	movs	r3, #0
}
 8007282:	4618      	mov	r0, r3
 8007284:	3710      	adds	r7, #16
 8007286:	46bd      	mov	sp, r7
 8007288:	bd80      	pop	{r7, pc}
 800728a:	bf00      	nop
 800728c:	40022000 	.word	0x40022000
 8007290:	40021000 	.word	0x40021000
 8007294:	0800c094 	.word	0x0800c094
 8007298:	20000020 	.word	0x20000020
 800729c:	20000050 	.word	0x20000050

080072a0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80072a0:	b490      	push	{r4, r7}
 80072a2:	b08a      	sub	sp, #40	; 0x28
 80072a4:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80072a6:	4b2a      	ldr	r3, [pc, #168]	; (8007350 <HAL_RCC_GetSysClockFreq+0xb0>)
 80072a8:	1d3c      	adds	r4, r7, #4
 80072aa:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80072ac:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80072b0:	f240 2301 	movw	r3, #513	; 0x201
 80072b4:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80072b6:	2300      	movs	r3, #0
 80072b8:	61fb      	str	r3, [r7, #28]
 80072ba:	2300      	movs	r3, #0
 80072bc:	61bb      	str	r3, [r7, #24]
 80072be:	2300      	movs	r3, #0
 80072c0:	627b      	str	r3, [r7, #36]	; 0x24
 80072c2:	2300      	movs	r3, #0
 80072c4:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80072c6:	2300      	movs	r3, #0
 80072c8:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80072ca:	4b22      	ldr	r3, [pc, #136]	; (8007354 <HAL_RCC_GetSysClockFreq+0xb4>)
 80072cc:	685b      	ldr	r3, [r3, #4]
 80072ce:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80072d0:	69fb      	ldr	r3, [r7, #28]
 80072d2:	f003 030c 	and.w	r3, r3, #12
 80072d6:	2b04      	cmp	r3, #4
 80072d8:	d002      	beq.n	80072e0 <HAL_RCC_GetSysClockFreq+0x40>
 80072da:	2b08      	cmp	r3, #8
 80072dc:	d003      	beq.n	80072e6 <HAL_RCC_GetSysClockFreq+0x46>
 80072de:	e02d      	b.n	800733c <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80072e0:	4b1d      	ldr	r3, [pc, #116]	; (8007358 <HAL_RCC_GetSysClockFreq+0xb8>)
 80072e2:	623b      	str	r3, [r7, #32]
      break;
 80072e4:	e02d      	b.n	8007342 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80072e6:	69fb      	ldr	r3, [r7, #28]
 80072e8:	0c9b      	lsrs	r3, r3, #18
 80072ea:	f003 030f 	and.w	r3, r3, #15
 80072ee:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80072f2:	4413      	add	r3, r2
 80072f4:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80072f8:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80072fa:	69fb      	ldr	r3, [r7, #28]
 80072fc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007300:	2b00      	cmp	r3, #0
 8007302:	d013      	beq.n	800732c <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8007304:	4b13      	ldr	r3, [pc, #76]	; (8007354 <HAL_RCC_GetSysClockFreq+0xb4>)
 8007306:	685b      	ldr	r3, [r3, #4]
 8007308:	0c5b      	lsrs	r3, r3, #17
 800730a:	f003 0301 	and.w	r3, r3, #1
 800730e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8007312:	4413      	add	r3, r2
 8007314:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8007318:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800731a:	697b      	ldr	r3, [r7, #20]
 800731c:	4a0e      	ldr	r2, [pc, #56]	; (8007358 <HAL_RCC_GetSysClockFreq+0xb8>)
 800731e:	fb02 f203 	mul.w	r2, r2, r3
 8007322:	69bb      	ldr	r3, [r7, #24]
 8007324:	fbb2 f3f3 	udiv	r3, r2, r3
 8007328:	627b      	str	r3, [r7, #36]	; 0x24
 800732a:	e004      	b.n	8007336 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800732c:	697b      	ldr	r3, [r7, #20]
 800732e:	4a0b      	ldr	r2, [pc, #44]	; (800735c <HAL_RCC_GetSysClockFreq+0xbc>)
 8007330:	fb02 f303 	mul.w	r3, r2, r3
 8007334:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8007336:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007338:	623b      	str	r3, [r7, #32]
      break;
 800733a:	e002      	b.n	8007342 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800733c:	4b06      	ldr	r3, [pc, #24]	; (8007358 <HAL_RCC_GetSysClockFreq+0xb8>)
 800733e:	623b      	str	r3, [r7, #32]
      break;
 8007340:	bf00      	nop
    }
  }
  return sysclockfreq;
 8007342:	6a3b      	ldr	r3, [r7, #32]
}
 8007344:	4618      	mov	r0, r3
 8007346:	3728      	adds	r7, #40	; 0x28
 8007348:	46bd      	mov	sp, r7
 800734a:	bc90      	pop	{r4, r7}
 800734c:	4770      	bx	lr
 800734e:	bf00      	nop
 8007350:	0800c084 	.word	0x0800c084
 8007354:	40021000 	.word	0x40021000
 8007358:	007a1200 	.word	0x007a1200
 800735c:	003d0900 	.word	0x003d0900

08007360 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007360:	b480      	push	{r7}
 8007362:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007364:	4b02      	ldr	r3, [pc, #8]	; (8007370 <HAL_RCC_GetHCLKFreq+0x10>)
 8007366:	681b      	ldr	r3, [r3, #0]
}
 8007368:	4618      	mov	r0, r3
 800736a:	46bd      	mov	sp, r7
 800736c:	bc80      	pop	{r7}
 800736e:	4770      	bx	lr
 8007370:	20000020 	.word	0x20000020

08007374 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007374:	b580      	push	{r7, lr}
 8007376:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8007378:	f7ff fff2 	bl	8007360 <HAL_RCC_GetHCLKFreq>
 800737c:	4602      	mov	r2, r0
 800737e:	4b05      	ldr	r3, [pc, #20]	; (8007394 <HAL_RCC_GetPCLK1Freq+0x20>)
 8007380:	685b      	ldr	r3, [r3, #4]
 8007382:	0a1b      	lsrs	r3, r3, #8
 8007384:	f003 0307 	and.w	r3, r3, #7
 8007388:	4903      	ldr	r1, [pc, #12]	; (8007398 <HAL_RCC_GetPCLK1Freq+0x24>)
 800738a:	5ccb      	ldrb	r3, [r1, r3]
 800738c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007390:	4618      	mov	r0, r3
 8007392:	bd80      	pop	{r7, pc}
 8007394:	40021000 	.word	0x40021000
 8007398:	0800c0a4 	.word	0x0800c0a4

0800739c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800739c:	b580      	push	{r7, lr}
 800739e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80073a0:	f7ff ffde 	bl	8007360 <HAL_RCC_GetHCLKFreq>
 80073a4:	4602      	mov	r2, r0
 80073a6:	4b05      	ldr	r3, [pc, #20]	; (80073bc <HAL_RCC_GetPCLK2Freq+0x20>)
 80073a8:	685b      	ldr	r3, [r3, #4]
 80073aa:	0adb      	lsrs	r3, r3, #11
 80073ac:	f003 0307 	and.w	r3, r3, #7
 80073b0:	4903      	ldr	r1, [pc, #12]	; (80073c0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80073b2:	5ccb      	ldrb	r3, [r1, r3]
 80073b4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80073b8:	4618      	mov	r0, r3
 80073ba:	bd80      	pop	{r7, pc}
 80073bc:	40021000 	.word	0x40021000
 80073c0:	0800c0a4 	.word	0x0800c0a4

080073c4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80073c4:	b480      	push	{r7}
 80073c6:	b085      	sub	sp, #20
 80073c8:	af00      	add	r7, sp, #0
 80073ca:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80073cc:	4b0a      	ldr	r3, [pc, #40]	; (80073f8 <RCC_Delay+0x34>)
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	4a0a      	ldr	r2, [pc, #40]	; (80073fc <RCC_Delay+0x38>)
 80073d2:	fba2 2303 	umull	r2, r3, r2, r3
 80073d6:	0a5b      	lsrs	r3, r3, #9
 80073d8:	687a      	ldr	r2, [r7, #4]
 80073da:	fb02 f303 	mul.w	r3, r2, r3
 80073de:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80073e0:	bf00      	nop
  }
  while (Delay --);
 80073e2:	68fb      	ldr	r3, [r7, #12]
 80073e4:	1e5a      	subs	r2, r3, #1
 80073e6:	60fa      	str	r2, [r7, #12]
 80073e8:	2b00      	cmp	r3, #0
 80073ea:	d1f9      	bne.n	80073e0 <RCC_Delay+0x1c>
}
 80073ec:	bf00      	nop
 80073ee:	bf00      	nop
 80073f0:	3714      	adds	r7, #20
 80073f2:	46bd      	mov	sp, r7
 80073f4:	bc80      	pop	{r7}
 80073f6:	4770      	bx	lr
 80073f8:	20000020 	.word	0x20000020
 80073fc:	10624dd3 	.word	0x10624dd3

08007400 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007400:	b580      	push	{r7, lr}
 8007402:	b082      	sub	sp, #8
 8007404:	af00      	add	r7, sp, #0
 8007406:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	2b00      	cmp	r3, #0
 800740c:	d101      	bne.n	8007412 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800740e:	2301      	movs	r3, #1
 8007410:	e076      	b.n	8007500 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007416:	2b00      	cmp	r3, #0
 8007418:	d108      	bne.n	800742c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	685b      	ldr	r3, [r3, #4]
 800741e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007422:	d009      	beq.n	8007438 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	2200      	movs	r2, #0
 8007428:	61da      	str	r2, [r3, #28]
 800742a:	e005      	b.n	8007438 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	2200      	movs	r2, #0
 8007430:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	2200      	movs	r2, #0
 8007436:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	2200      	movs	r2, #0
 800743c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007444:	b2db      	uxtb	r3, r3
 8007446:	2b00      	cmp	r3, #0
 8007448:	d106      	bne.n	8007458 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	2200      	movs	r2, #0
 800744e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8007452:	6878      	ldr	r0, [r7, #4]
 8007454:	f7fd fbfe 	bl	8004c54 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	2202      	movs	r2, #2
 800745c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	681a      	ldr	r2, [r3, #0]
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800746e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	685b      	ldr	r3, [r3, #4]
 8007474:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	689b      	ldr	r3, [r3, #8]
 800747c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8007480:	431a      	orrs	r2, r3
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	68db      	ldr	r3, [r3, #12]
 8007486:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800748a:	431a      	orrs	r2, r3
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	691b      	ldr	r3, [r3, #16]
 8007490:	f003 0302 	and.w	r3, r3, #2
 8007494:	431a      	orrs	r2, r3
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	695b      	ldr	r3, [r3, #20]
 800749a:	f003 0301 	and.w	r3, r3, #1
 800749e:	431a      	orrs	r2, r3
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	699b      	ldr	r3, [r3, #24]
 80074a4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80074a8:	431a      	orrs	r2, r3
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	69db      	ldr	r3, [r3, #28]
 80074ae:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80074b2:	431a      	orrs	r2, r3
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	6a1b      	ldr	r3, [r3, #32]
 80074b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80074bc:	ea42 0103 	orr.w	r1, r2, r3
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80074c4:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	430a      	orrs	r2, r1
 80074ce:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	699b      	ldr	r3, [r3, #24]
 80074d4:	0c1a      	lsrs	r2, r3, #16
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	f002 0204 	and.w	r2, r2, #4
 80074de:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	69da      	ldr	r2, [r3, #28]
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80074ee:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	2200      	movs	r2, #0
 80074f4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	2201      	movs	r2, #1
 80074fa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80074fe:	2300      	movs	r3, #0
}
 8007500:	4618      	mov	r0, r3
 8007502:	3708      	adds	r7, #8
 8007504:	46bd      	mov	sp, r7
 8007506:	bd80      	pop	{r7, pc}

08007508 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007508:	b580      	push	{r7, lr}
 800750a:	b088      	sub	sp, #32
 800750c:	af00      	add	r7, sp, #0
 800750e:	60f8      	str	r0, [r7, #12]
 8007510:	60b9      	str	r1, [r7, #8]
 8007512:	603b      	str	r3, [r7, #0]
 8007514:	4613      	mov	r3, r2
 8007516:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8007518:	2300      	movs	r3, #0
 800751a:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800751c:	68fb      	ldr	r3, [r7, #12]
 800751e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8007522:	2b01      	cmp	r3, #1
 8007524:	d101      	bne.n	800752a <HAL_SPI_Transmit+0x22>
 8007526:	2302      	movs	r3, #2
 8007528:	e126      	b.n	8007778 <HAL_SPI_Transmit+0x270>
 800752a:	68fb      	ldr	r3, [r7, #12]
 800752c:	2201      	movs	r2, #1
 800752e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007532:	f7fe fccb 	bl	8005ecc <HAL_GetTick>
 8007536:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8007538:	88fb      	ldrh	r3, [r7, #6]
 800753a:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800753c:	68fb      	ldr	r3, [r7, #12]
 800753e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007542:	b2db      	uxtb	r3, r3
 8007544:	2b01      	cmp	r3, #1
 8007546:	d002      	beq.n	800754e <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8007548:	2302      	movs	r3, #2
 800754a:	77fb      	strb	r3, [r7, #31]
    goto error;
 800754c:	e10b      	b.n	8007766 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 800754e:	68bb      	ldr	r3, [r7, #8]
 8007550:	2b00      	cmp	r3, #0
 8007552:	d002      	beq.n	800755a <HAL_SPI_Transmit+0x52>
 8007554:	88fb      	ldrh	r3, [r7, #6]
 8007556:	2b00      	cmp	r3, #0
 8007558:	d102      	bne.n	8007560 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800755a:	2301      	movs	r3, #1
 800755c:	77fb      	strb	r3, [r7, #31]
    goto error;
 800755e:	e102      	b.n	8007766 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8007560:	68fb      	ldr	r3, [r7, #12]
 8007562:	2203      	movs	r2, #3
 8007564:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007568:	68fb      	ldr	r3, [r7, #12]
 800756a:	2200      	movs	r2, #0
 800756c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800756e:	68fb      	ldr	r3, [r7, #12]
 8007570:	68ba      	ldr	r2, [r7, #8]
 8007572:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8007574:	68fb      	ldr	r3, [r7, #12]
 8007576:	88fa      	ldrh	r2, [r7, #6]
 8007578:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800757a:	68fb      	ldr	r3, [r7, #12]
 800757c:	88fa      	ldrh	r2, [r7, #6]
 800757e:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8007580:	68fb      	ldr	r3, [r7, #12]
 8007582:	2200      	movs	r2, #0
 8007584:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8007586:	68fb      	ldr	r3, [r7, #12]
 8007588:	2200      	movs	r2, #0
 800758a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800758c:	68fb      	ldr	r3, [r7, #12]
 800758e:	2200      	movs	r2, #0
 8007590:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8007592:	68fb      	ldr	r3, [r7, #12]
 8007594:	2200      	movs	r2, #0
 8007596:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8007598:	68fb      	ldr	r3, [r7, #12]
 800759a:	2200      	movs	r2, #0
 800759c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800759e:	68fb      	ldr	r3, [r7, #12]
 80075a0:	689b      	ldr	r3, [r3, #8]
 80075a2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80075a6:	d10f      	bne.n	80075c8 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80075a8:	68fb      	ldr	r3, [r7, #12]
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	681a      	ldr	r2, [r3, #0]
 80075ae:	68fb      	ldr	r3, [r7, #12]
 80075b0:	681b      	ldr	r3, [r3, #0]
 80075b2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80075b6:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80075b8:	68fb      	ldr	r3, [r7, #12]
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	681a      	ldr	r2, [r3, #0]
 80075be:	68fb      	ldr	r3, [r7, #12]
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80075c6:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80075c8:	68fb      	ldr	r3, [r7, #12]
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	681b      	ldr	r3, [r3, #0]
 80075ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80075d2:	2b40      	cmp	r3, #64	; 0x40
 80075d4:	d007      	beq.n	80075e6 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80075d6:	68fb      	ldr	r3, [r7, #12]
 80075d8:	681b      	ldr	r3, [r3, #0]
 80075da:	681a      	ldr	r2, [r3, #0]
 80075dc:	68fb      	ldr	r3, [r7, #12]
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80075e4:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80075e6:	68fb      	ldr	r3, [r7, #12]
 80075e8:	68db      	ldr	r3, [r3, #12]
 80075ea:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80075ee:	d14b      	bne.n	8007688 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80075f0:	68fb      	ldr	r3, [r7, #12]
 80075f2:	685b      	ldr	r3, [r3, #4]
 80075f4:	2b00      	cmp	r3, #0
 80075f6:	d002      	beq.n	80075fe <HAL_SPI_Transmit+0xf6>
 80075f8:	8afb      	ldrh	r3, [r7, #22]
 80075fa:	2b01      	cmp	r3, #1
 80075fc:	d13e      	bne.n	800767c <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80075fe:	68fb      	ldr	r3, [r7, #12]
 8007600:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007602:	881a      	ldrh	r2, [r3, #0]
 8007604:	68fb      	ldr	r3, [r7, #12]
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800760a:	68fb      	ldr	r3, [r7, #12]
 800760c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800760e:	1c9a      	adds	r2, r3, #2
 8007610:	68fb      	ldr	r3, [r7, #12]
 8007612:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8007614:	68fb      	ldr	r3, [r7, #12]
 8007616:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007618:	b29b      	uxth	r3, r3
 800761a:	3b01      	subs	r3, #1
 800761c:	b29a      	uxth	r2, r3
 800761e:	68fb      	ldr	r3, [r7, #12]
 8007620:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8007622:	e02b      	b.n	800767c <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8007624:	68fb      	ldr	r3, [r7, #12]
 8007626:	681b      	ldr	r3, [r3, #0]
 8007628:	689b      	ldr	r3, [r3, #8]
 800762a:	f003 0302 	and.w	r3, r3, #2
 800762e:	2b02      	cmp	r3, #2
 8007630:	d112      	bne.n	8007658 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007632:	68fb      	ldr	r3, [r7, #12]
 8007634:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007636:	881a      	ldrh	r2, [r3, #0]
 8007638:	68fb      	ldr	r3, [r7, #12]
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800763e:	68fb      	ldr	r3, [r7, #12]
 8007640:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007642:	1c9a      	adds	r2, r3, #2
 8007644:	68fb      	ldr	r3, [r7, #12]
 8007646:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8007648:	68fb      	ldr	r3, [r7, #12]
 800764a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800764c:	b29b      	uxth	r3, r3
 800764e:	3b01      	subs	r3, #1
 8007650:	b29a      	uxth	r2, r3
 8007652:	68fb      	ldr	r3, [r7, #12]
 8007654:	86da      	strh	r2, [r3, #54]	; 0x36
 8007656:	e011      	b.n	800767c <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007658:	f7fe fc38 	bl	8005ecc <HAL_GetTick>
 800765c:	4602      	mov	r2, r0
 800765e:	69bb      	ldr	r3, [r7, #24]
 8007660:	1ad3      	subs	r3, r2, r3
 8007662:	683a      	ldr	r2, [r7, #0]
 8007664:	429a      	cmp	r2, r3
 8007666:	d803      	bhi.n	8007670 <HAL_SPI_Transmit+0x168>
 8007668:	683b      	ldr	r3, [r7, #0]
 800766a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800766e:	d102      	bne.n	8007676 <HAL_SPI_Transmit+0x16e>
 8007670:	683b      	ldr	r3, [r7, #0]
 8007672:	2b00      	cmp	r3, #0
 8007674:	d102      	bne.n	800767c <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8007676:	2303      	movs	r3, #3
 8007678:	77fb      	strb	r3, [r7, #31]
          goto error;
 800767a:	e074      	b.n	8007766 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800767c:	68fb      	ldr	r3, [r7, #12]
 800767e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007680:	b29b      	uxth	r3, r3
 8007682:	2b00      	cmp	r3, #0
 8007684:	d1ce      	bne.n	8007624 <HAL_SPI_Transmit+0x11c>
 8007686:	e04c      	b.n	8007722 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007688:	68fb      	ldr	r3, [r7, #12]
 800768a:	685b      	ldr	r3, [r3, #4]
 800768c:	2b00      	cmp	r3, #0
 800768e:	d002      	beq.n	8007696 <HAL_SPI_Transmit+0x18e>
 8007690:	8afb      	ldrh	r3, [r7, #22]
 8007692:	2b01      	cmp	r3, #1
 8007694:	d140      	bne.n	8007718 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007696:	68fb      	ldr	r3, [r7, #12]
 8007698:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800769a:	68fb      	ldr	r3, [r7, #12]
 800769c:	681b      	ldr	r3, [r3, #0]
 800769e:	330c      	adds	r3, #12
 80076a0:	7812      	ldrb	r2, [r2, #0]
 80076a2:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80076a4:	68fb      	ldr	r3, [r7, #12]
 80076a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80076a8:	1c5a      	adds	r2, r3, #1
 80076aa:	68fb      	ldr	r3, [r7, #12]
 80076ac:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80076ae:	68fb      	ldr	r3, [r7, #12]
 80076b0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80076b2:	b29b      	uxth	r3, r3
 80076b4:	3b01      	subs	r3, #1
 80076b6:	b29a      	uxth	r2, r3
 80076b8:	68fb      	ldr	r3, [r7, #12]
 80076ba:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80076bc:	e02c      	b.n	8007718 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80076be:	68fb      	ldr	r3, [r7, #12]
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	689b      	ldr	r3, [r3, #8]
 80076c4:	f003 0302 	and.w	r3, r3, #2
 80076c8:	2b02      	cmp	r3, #2
 80076ca:	d113      	bne.n	80076f4 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80076cc:	68fb      	ldr	r3, [r7, #12]
 80076ce:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80076d0:	68fb      	ldr	r3, [r7, #12]
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	330c      	adds	r3, #12
 80076d6:	7812      	ldrb	r2, [r2, #0]
 80076d8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80076da:	68fb      	ldr	r3, [r7, #12]
 80076dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80076de:	1c5a      	adds	r2, r3, #1
 80076e0:	68fb      	ldr	r3, [r7, #12]
 80076e2:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80076e4:	68fb      	ldr	r3, [r7, #12]
 80076e6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80076e8:	b29b      	uxth	r3, r3
 80076ea:	3b01      	subs	r3, #1
 80076ec:	b29a      	uxth	r2, r3
 80076ee:	68fb      	ldr	r3, [r7, #12]
 80076f0:	86da      	strh	r2, [r3, #54]	; 0x36
 80076f2:	e011      	b.n	8007718 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80076f4:	f7fe fbea 	bl	8005ecc <HAL_GetTick>
 80076f8:	4602      	mov	r2, r0
 80076fa:	69bb      	ldr	r3, [r7, #24]
 80076fc:	1ad3      	subs	r3, r2, r3
 80076fe:	683a      	ldr	r2, [r7, #0]
 8007700:	429a      	cmp	r2, r3
 8007702:	d803      	bhi.n	800770c <HAL_SPI_Transmit+0x204>
 8007704:	683b      	ldr	r3, [r7, #0]
 8007706:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800770a:	d102      	bne.n	8007712 <HAL_SPI_Transmit+0x20a>
 800770c:	683b      	ldr	r3, [r7, #0]
 800770e:	2b00      	cmp	r3, #0
 8007710:	d102      	bne.n	8007718 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8007712:	2303      	movs	r3, #3
 8007714:	77fb      	strb	r3, [r7, #31]
          goto error;
 8007716:	e026      	b.n	8007766 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8007718:	68fb      	ldr	r3, [r7, #12]
 800771a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800771c:	b29b      	uxth	r3, r3
 800771e:	2b00      	cmp	r3, #0
 8007720:	d1cd      	bne.n	80076be <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007722:	69ba      	ldr	r2, [r7, #24]
 8007724:	6839      	ldr	r1, [r7, #0]
 8007726:	68f8      	ldr	r0, [r7, #12]
 8007728:	f000 fbb8 	bl	8007e9c <SPI_EndRxTxTransaction>
 800772c:	4603      	mov	r3, r0
 800772e:	2b00      	cmp	r3, #0
 8007730:	d002      	beq.n	8007738 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007732:	68fb      	ldr	r3, [r7, #12]
 8007734:	2220      	movs	r2, #32
 8007736:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007738:	68fb      	ldr	r3, [r7, #12]
 800773a:	689b      	ldr	r3, [r3, #8]
 800773c:	2b00      	cmp	r3, #0
 800773e:	d10a      	bne.n	8007756 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007740:	2300      	movs	r3, #0
 8007742:	613b      	str	r3, [r7, #16]
 8007744:	68fb      	ldr	r3, [r7, #12]
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	68db      	ldr	r3, [r3, #12]
 800774a:	613b      	str	r3, [r7, #16]
 800774c:	68fb      	ldr	r3, [r7, #12]
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	689b      	ldr	r3, [r3, #8]
 8007752:	613b      	str	r3, [r7, #16]
 8007754:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007756:	68fb      	ldr	r3, [r7, #12]
 8007758:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800775a:	2b00      	cmp	r3, #0
 800775c:	d002      	beq.n	8007764 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 800775e:	2301      	movs	r3, #1
 8007760:	77fb      	strb	r3, [r7, #31]
 8007762:	e000      	b.n	8007766 <HAL_SPI_Transmit+0x25e>
  }

error:
 8007764:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8007766:	68fb      	ldr	r3, [r7, #12]
 8007768:	2201      	movs	r2, #1
 800776a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800776e:	68fb      	ldr	r3, [r7, #12]
 8007770:	2200      	movs	r2, #0
 8007772:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8007776:	7ffb      	ldrb	r3, [r7, #31]
}
 8007778:	4618      	mov	r0, r3
 800777a:	3720      	adds	r7, #32
 800777c:	46bd      	mov	sp, r7
 800777e:	bd80      	pop	{r7, pc}

08007780 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007780:	b580      	push	{r7, lr}
 8007782:	b088      	sub	sp, #32
 8007784:	af02      	add	r7, sp, #8
 8007786:	60f8      	str	r0, [r7, #12]
 8007788:	60b9      	str	r1, [r7, #8]
 800778a:	603b      	str	r3, [r7, #0]
 800778c:	4613      	mov	r3, r2
 800778e:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8007790:	2300      	movs	r3, #0
 8007792:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8007794:	68fb      	ldr	r3, [r7, #12]
 8007796:	685b      	ldr	r3, [r3, #4]
 8007798:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800779c:	d112      	bne.n	80077c4 <HAL_SPI_Receive+0x44>
 800779e:	68fb      	ldr	r3, [r7, #12]
 80077a0:	689b      	ldr	r3, [r3, #8]
 80077a2:	2b00      	cmp	r3, #0
 80077a4:	d10e      	bne.n	80077c4 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80077a6:	68fb      	ldr	r3, [r7, #12]
 80077a8:	2204      	movs	r2, #4
 80077aa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80077ae:	88fa      	ldrh	r2, [r7, #6]
 80077b0:	683b      	ldr	r3, [r7, #0]
 80077b2:	9300      	str	r3, [sp, #0]
 80077b4:	4613      	mov	r3, r2
 80077b6:	68ba      	ldr	r2, [r7, #8]
 80077b8:	68b9      	ldr	r1, [r7, #8]
 80077ba:	68f8      	ldr	r0, [r7, #12]
 80077bc:	f000 f8f1 	bl	80079a2 <HAL_SPI_TransmitReceive>
 80077c0:	4603      	mov	r3, r0
 80077c2:	e0ea      	b.n	800799a <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80077c4:	68fb      	ldr	r3, [r7, #12]
 80077c6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80077ca:	2b01      	cmp	r3, #1
 80077cc:	d101      	bne.n	80077d2 <HAL_SPI_Receive+0x52>
 80077ce:	2302      	movs	r3, #2
 80077d0:	e0e3      	b.n	800799a <HAL_SPI_Receive+0x21a>
 80077d2:	68fb      	ldr	r3, [r7, #12]
 80077d4:	2201      	movs	r2, #1
 80077d6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80077da:	f7fe fb77 	bl	8005ecc <HAL_GetTick>
 80077de:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 80077e0:	68fb      	ldr	r3, [r7, #12]
 80077e2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80077e6:	b2db      	uxtb	r3, r3
 80077e8:	2b01      	cmp	r3, #1
 80077ea:	d002      	beq.n	80077f2 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 80077ec:	2302      	movs	r3, #2
 80077ee:	75fb      	strb	r3, [r7, #23]
    goto error;
 80077f0:	e0ca      	b.n	8007988 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 80077f2:	68bb      	ldr	r3, [r7, #8]
 80077f4:	2b00      	cmp	r3, #0
 80077f6:	d002      	beq.n	80077fe <HAL_SPI_Receive+0x7e>
 80077f8:	88fb      	ldrh	r3, [r7, #6]
 80077fa:	2b00      	cmp	r3, #0
 80077fc:	d102      	bne.n	8007804 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 80077fe:	2301      	movs	r3, #1
 8007800:	75fb      	strb	r3, [r7, #23]
    goto error;
 8007802:	e0c1      	b.n	8007988 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8007804:	68fb      	ldr	r3, [r7, #12]
 8007806:	2204      	movs	r2, #4
 8007808:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800780c:	68fb      	ldr	r3, [r7, #12]
 800780e:	2200      	movs	r2, #0
 8007810:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8007812:	68fb      	ldr	r3, [r7, #12]
 8007814:	68ba      	ldr	r2, [r7, #8]
 8007816:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8007818:	68fb      	ldr	r3, [r7, #12]
 800781a:	88fa      	ldrh	r2, [r7, #6]
 800781c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 800781e:	68fb      	ldr	r3, [r7, #12]
 8007820:	88fa      	ldrh	r2, [r7, #6]
 8007822:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8007824:	68fb      	ldr	r3, [r7, #12]
 8007826:	2200      	movs	r2, #0
 8007828:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 800782a:	68fb      	ldr	r3, [r7, #12]
 800782c:	2200      	movs	r2, #0
 800782e:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8007830:	68fb      	ldr	r3, [r7, #12]
 8007832:	2200      	movs	r2, #0
 8007834:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8007836:	68fb      	ldr	r3, [r7, #12]
 8007838:	2200      	movs	r2, #0
 800783a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800783c:	68fb      	ldr	r3, [r7, #12]
 800783e:	2200      	movs	r2, #0
 8007840:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007842:	68fb      	ldr	r3, [r7, #12]
 8007844:	689b      	ldr	r3, [r3, #8]
 8007846:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800784a:	d10f      	bne.n	800786c <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800784c:	68fb      	ldr	r3, [r7, #12]
 800784e:	681b      	ldr	r3, [r3, #0]
 8007850:	681a      	ldr	r2, [r3, #0]
 8007852:	68fb      	ldr	r3, [r7, #12]
 8007854:	681b      	ldr	r3, [r3, #0]
 8007856:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800785a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800785c:	68fb      	ldr	r3, [r7, #12]
 800785e:	681b      	ldr	r3, [r3, #0]
 8007860:	681a      	ldr	r2, [r3, #0]
 8007862:	68fb      	ldr	r3, [r7, #12]
 8007864:	681b      	ldr	r3, [r3, #0]
 8007866:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800786a:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800786c:	68fb      	ldr	r3, [r7, #12]
 800786e:	681b      	ldr	r3, [r3, #0]
 8007870:	681b      	ldr	r3, [r3, #0]
 8007872:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007876:	2b40      	cmp	r3, #64	; 0x40
 8007878:	d007      	beq.n	800788a <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800787a:	68fb      	ldr	r3, [r7, #12]
 800787c:	681b      	ldr	r3, [r3, #0]
 800787e:	681a      	ldr	r2, [r3, #0]
 8007880:	68fb      	ldr	r3, [r7, #12]
 8007882:	681b      	ldr	r3, [r3, #0]
 8007884:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007888:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 800788a:	68fb      	ldr	r3, [r7, #12]
 800788c:	68db      	ldr	r3, [r3, #12]
 800788e:	2b00      	cmp	r3, #0
 8007890:	d162      	bne.n	8007958 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8007892:	e02e      	b.n	80078f2 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8007894:	68fb      	ldr	r3, [r7, #12]
 8007896:	681b      	ldr	r3, [r3, #0]
 8007898:	689b      	ldr	r3, [r3, #8]
 800789a:	f003 0301 	and.w	r3, r3, #1
 800789e:	2b01      	cmp	r3, #1
 80078a0:	d115      	bne.n	80078ce <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80078a2:	68fb      	ldr	r3, [r7, #12]
 80078a4:	681b      	ldr	r3, [r3, #0]
 80078a6:	f103 020c 	add.w	r2, r3, #12
 80078aa:	68fb      	ldr	r3, [r7, #12]
 80078ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80078ae:	7812      	ldrb	r2, [r2, #0]
 80078b0:	b2d2      	uxtb	r2, r2
 80078b2:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80078b4:	68fb      	ldr	r3, [r7, #12]
 80078b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80078b8:	1c5a      	adds	r2, r3, #1
 80078ba:	68fb      	ldr	r3, [r7, #12]
 80078bc:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80078be:	68fb      	ldr	r3, [r7, #12]
 80078c0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80078c2:	b29b      	uxth	r3, r3
 80078c4:	3b01      	subs	r3, #1
 80078c6:	b29a      	uxth	r2, r3
 80078c8:	68fb      	ldr	r3, [r7, #12]
 80078ca:	87da      	strh	r2, [r3, #62]	; 0x3e
 80078cc:	e011      	b.n	80078f2 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80078ce:	f7fe fafd 	bl	8005ecc <HAL_GetTick>
 80078d2:	4602      	mov	r2, r0
 80078d4:	693b      	ldr	r3, [r7, #16]
 80078d6:	1ad3      	subs	r3, r2, r3
 80078d8:	683a      	ldr	r2, [r7, #0]
 80078da:	429a      	cmp	r2, r3
 80078dc:	d803      	bhi.n	80078e6 <HAL_SPI_Receive+0x166>
 80078de:	683b      	ldr	r3, [r7, #0]
 80078e0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80078e4:	d102      	bne.n	80078ec <HAL_SPI_Receive+0x16c>
 80078e6:	683b      	ldr	r3, [r7, #0]
 80078e8:	2b00      	cmp	r3, #0
 80078ea:	d102      	bne.n	80078f2 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 80078ec:	2303      	movs	r3, #3
 80078ee:	75fb      	strb	r3, [r7, #23]
          goto error;
 80078f0:	e04a      	b.n	8007988 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 80078f2:	68fb      	ldr	r3, [r7, #12]
 80078f4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80078f6:	b29b      	uxth	r3, r3
 80078f8:	2b00      	cmp	r3, #0
 80078fa:	d1cb      	bne.n	8007894 <HAL_SPI_Receive+0x114>
 80078fc:	e031      	b.n	8007962 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80078fe:	68fb      	ldr	r3, [r7, #12]
 8007900:	681b      	ldr	r3, [r3, #0]
 8007902:	689b      	ldr	r3, [r3, #8]
 8007904:	f003 0301 	and.w	r3, r3, #1
 8007908:	2b01      	cmp	r3, #1
 800790a:	d113      	bne.n	8007934 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800790c:	68fb      	ldr	r3, [r7, #12]
 800790e:	681b      	ldr	r3, [r3, #0]
 8007910:	68da      	ldr	r2, [r3, #12]
 8007912:	68fb      	ldr	r3, [r7, #12]
 8007914:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007916:	b292      	uxth	r2, r2
 8007918:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800791a:	68fb      	ldr	r3, [r7, #12]
 800791c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800791e:	1c9a      	adds	r2, r3, #2
 8007920:	68fb      	ldr	r3, [r7, #12]
 8007922:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8007924:	68fb      	ldr	r3, [r7, #12]
 8007926:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007928:	b29b      	uxth	r3, r3
 800792a:	3b01      	subs	r3, #1
 800792c:	b29a      	uxth	r2, r3
 800792e:	68fb      	ldr	r3, [r7, #12]
 8007930:	87da      	strh	r2, [r3, #62]	; 0x3e
 8007932:	e011      	b.n	8007958 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007934:	f7fe faca 	bl	8005ecc <HAL_GetTick>
 8007938:	4602      	mov	r2, r0
 800793a:	693b      	ldr	r3, [r7, #16]
 800793c:	1ad3      	subs	r3, r2, r3
 800793e:	683a      	ldr	r2, [r7, #0]
 8007940:	429a      	cmp	r2, r3
 8007942:	d803      	bhi.n	800794c <HAL_SPI_Receive+0x1cc>
 8007944:	683b      	ldr	r3, [r7, #0]
 8007946:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800794a:	d102      	bne.n	8007952 <HAL_SPI_Receive+0x1d2>
 800794c:	683b      	ldr	r3, [r7, #0]
 800794e:	2b00      	cmp	r3, #0
 8007950:	d102      	bne.n	8007958 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8007952:	2303      	movs	r3, #3
 8007954:	75fb      	strb	r3, [r7, #23]
          goto error;
 8007956:	e017      	b.n	8007988 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8007958:	68fb      	ldr	r3, [r7, #12]
 800795a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800795c:	b29b      	uxth	r3, r3
 800795e:	2b00      	cmp	r3, #0
 8007960:	d1cd      	bne.n	80078fe <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007962:	693a      	ldr	r2, [r7, #16]
 8007964:	6839      	ldr	r1, [r7, #0]
 8007966:	68f8      	ldr	r0, [r7, #12]
 8007968:	f000 fa46 	bl	8007df8 <SPI_EndRxTransaction>
 800796c:	4603      	mov	r3, r0
 800796e:	2b00      	cmp	r3, #0
 8007970:	d002      	beq.n	8007978 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007972:	68fb      	ldr	r3, [r7, #12]
 8007974:	2220      	movs	r2, #32
 8007976:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007978:	68fb      	ldr	r3, [r7, #12]
 800797a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800797c:	2b00      	cmp	r3, #0
 800797e:	d002      	beq.n	8007986 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8007980:	2301      	movs	r3, #1
 8007982:	75fb      	strb	r3, [r7, #23]
 8007984:	e000      	b.n	8007988 <HAL_SPI_Receive+0x208>
  }

error :
 8007986:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8007988:	68fb      	ldr	r3, [r7, #12]
 800798a:	2201      	movs	r2, #1
 800798c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8007990:	68fb      	ldr	r3, [r7, #12]
 8007992:	2200      	movs	r2, #0
 8007994:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8007998:	7dfb      	ldrb	r3, [r7, #23]
}
 800799a:	4618      	mov	r0, r3
 800799c:	3718      	adds	r7, #24
 800799e:	46bd      	mov	sp, r7
 80079a0:	bd80      	pop	{r7, pc}

080079a2 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80079a2:	b580      	push	{r7, lr}
 80079a4:	b08c      	sub	sp, #48	; 0x30
 80079a6:	af00      	add	r7, sp, #0
 80079a8:	60f8      	str	r0, [r7, #12]
 80079aa:	60b9      	str	r1, [r7, #8]
 80079ac:	607a      	str	r2, [r7, #4]
 80079ae:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80079b0:	2301      	movs	r3, #1
 80079b2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80079b4:	2300      	movs	r3, #0
 80079b6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80079ba:	68fb      	ldr	r3, [r7, #12]
 80079bc:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80079c0:	2b01      	cmp	r3, #1
 80079c2:	d101      	bne.n	80079c8 <HAL_SPI_TransmitReceive+0x26>
 80079c4:	2302      	movs	r3, #2
 80079c6:	e18a      	b.n	8007cde <HAL_SPI_TransmitReceive+0x33c>
 80079c8:	68fb      	ldr	r3, [r7, #12]
 80079ca:	2201      	movs	r2, #1
 80079cc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80079d0:	f7fe fa7c 	bl	8005ecc <HAL_GetTick>
 80079d4:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80079d6:	68fb      	ldr	r3, [r7, #12]
 80079d8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80079dc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80079e0:	68fb      	ldr	r3, [r7, #12]
 80079e2:	685b      	ldr	r3, [r3, #4]
 80079e4:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80079e6:	887b      	ldrh	r3, [r7, #2]
 80079e8:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80079ea:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80079ee:	2b01      	cmp	r3, #1
 80079f0:	d00f      	beq.n	8007a12 <HAL_SPI_TransmitReceive+0x70>
 80079f2:	69fb      	ldr	r3, [r7, #28]
 80079f4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80079f8:	d107      	bne.n	8007a0a <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80079fa:	68fb      	ldr	r3, [r7, #12]
 80079fc:	689b      	ldr	r3, [r3, #8]
 80079fe:	2b00      	cmp	r3, #0
 8007a00:	d103      	bne.n	8007a0a <HAL_SPI_TransmitReceive+0x68>
 8007a02:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007a06:	2b04      	cmp	r3, #4
 8007a08:	d003      	beq.n	8007a12 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8007a0a:	2302      	movs	r3, #2
 8007a0c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8007a10:	e15b      	b.n	8007cca <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8007a12:	68bb      	ldr	r3, [r7, #8]
 8007a14:	2b00      	cmp	r3, #0
 8007a16:	d005      	beq.n	8007a24 <HAL_SPI_TransmitReceive+0x82>
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	2b00      	cmp	r3, #0
 8007a1c:	d002      	beq.n	8007a24 <HAL_SPI_TransmitReceive+0x82>
 8007a1e:	887b      	ldrh	r3, [r7, #2]
 8007a20:	2b00      	cmp	r3, #0
 8007a22:	d103      	bne.n	8007a2c <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8007a24:	2301      	movs	r3, #1
 8007a26:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8007a2a:	e14e      	b.n	8007cca <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8007a2c:	68fb      	ldr	r3, [r7, #12]
 8007a2e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007a32:	b2db      	uxtb	r3, r3
 8007a34:	2b04      	cmp	r3, #4
 8007a36:	d003      	beq.n	8007a40 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8007a38:	68fb      	ldr	r3, [r7, #12]
 8007a3a:	2205      	movs	r2, #5
 8007a3c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007a40:	68fb      	ldr	r3, [r7, #12]
 8007a42:	2200      	movs	r2, #0
 8007a44:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8007a46:	68fb      	ldr	r3, [r7, #12]
 8007a48:	687a      	ldr	r2, [r7, #4]
 8007a4a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8007a4c:	68fb      	ldr	r3, [r7, #12]
 8007a4e:	887a      	ldrh	r2, [r7, #2]
 8007a50:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8007a52:	68fb      	ldr	r3, [r7, #12]
 8007a54:	887a      	ldrh	r2, [r7, #2]
 8007a56:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8007a58:	68fb      	ldr	r3, [r7, #12]
 8007a5a:	68ba      	ldr	r2, [r7, #8]
 8007a5c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8007a5e:	68fb      	ldr	r3, [r7, #12]
 8007a60:	887a      	ldrh	r2, [r7, #2]
 8007a62:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8007a64:	68fb      	ldr	r3, [r7, #12]
 8007a66:	887a      	ldrh	r2, [r7, #2]
 8007a68:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8007a6a:	68fb      	ldr	r3, [r7, #12]
 8007a6c:	2200      	movs	r2, #0
 8007a6e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8007a70:	68fb      	ldr	r3, [r7, #12]
 8007a72:	2200      	movs	r2, #0
 8007a74:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007a76:	68fb      	ldr	r3, [r7, #12]
 8007a78:	681b      	ldr	r3, [r3, #0]
 8007a7a:	681b      	ldr	r3, [r3, #0]
 8007a7c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007a80:	2b40      	cmp	r3, #64	; 0x40
 8007a82:	d007      	beq.n	8007a94 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007a84:	68fb      	ldr	r3, [r7, #12]
 8007a86:	681b      	ldr	r3, [r3, #0]
 8007a88:	681a      	ldr	r2, [r3, #0]
 8007a8a:	68fb      	ldr	r3, [r7, #12]
 8007a8c:	681b      	ldr	r3, [r3, #0]
 8007a8e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007a92:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8007a94:	68fb      	ldr	r3, [r7, #12]
 8007a96:	68db      	ldr	r3, [r3, #12]
 8007a98:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007a9c:	d178      	bne.n	8007b90 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007a9e:	68fb      	ldr	r3, [r7, #12]
 8007aa0:	685b      	ldr	r3, [r3, #4]
 8007aa2:	2b00      	cmp	r3, #0
 8007aa4:	d002      	beq.n	8007aac <HAL_SPI_TransmitReceive+0x10a>
 8007aa6:	8b7b      	ldrh	r3, [r7, #26]
 8007aa8:	2b01      	cmp	r3, #1
 8007aaa:	d166      	bne.n	8007b7a <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007aac:	68fb      	ldr	r3, [r7, #12]
 8007aae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ab0:	881a      	ldrh	r2, [r3, #0]
 8007ab2:	68fb      	ldr	r3, [r7, #12]
 8007ab4:	681b      	ldr	r3, [r3, #0]
 8007ab6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007ab8:	68fb      	ldr	r3, [r7, #12]
 8007aba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007abc:	1c9a      	adds	r2, r3, #2
 8007abe:	68fb      	ldr	r3, [r7, #12]
 8007ac0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8007ac2:	68fb      	ldr	r3, [r7, #12]
 8007ac4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007ac6:	b29b      	uxth	r3, r3
 8007ac8:	3b01      	subs	r3, #1
 8007aca:	b29a      	uxth	r2, r3
 8007acc:	68fb      	ldr	r3, [r7, #12]
 8007ace:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007ad0:	e053      	b.n	8007b7a <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007ad2:	68fb      	ldr	r3, [r7, #12]
 8007ad4:	681b      	ldr	r3, [r3, #0]
 8007ad6:	689b      	ldr	r3, [r3, #8]
 8007ad8:	f003 0302 	and.w	r3, r3, #2
 8007adc:	2b02      	cmp	r3, #2
 8007ade:	d11b      	bne.n	8007b18 <HAL_SPI_TransmitReceive+0x176>
 8007ae0:	68fb      	ldr	r3, [r7, #12]
 8007ae2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007ae4:	b29b      	uxth	r3, r3
 8007ae6:	2b00      	cmp	r3, #0
 8007ae8:	d016      	beq.n	8007b18 <HAL_SPI_TransmitReceive+0x176>
 8007aea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007aec:	2b01      	cmp	r3, #1
 8007aee:	d113      	bne.n	8007b18 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007af0:	68fb      	ldr	r3, [r7, #12]
 8007af2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007af4:	881a      	ldrh	r2, [r3, #0]
 8007af6:	68fb      	ldr	r3, [r7, #12]
 8007af8:	681b      	ldr	r3, [r3, #0]
 8007afa:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007afc:	68fb      	ldr	r3, [r7, #12]
 8007afe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b00:	1c9a      	adds	r2, r3, #2
 8007b02:	68fb      	ldr	r3, [r7, #12]
 8007b04:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8007b06:	68fb      	ldr	r3, [r7, #12]
 8007b08:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007b0a:	b29b      	uxth	r3, r3
 8007b0c:	3b01      	subs	r3, #1
 8007b0e:	b29a      	uxth	r2, r3
 8007b10:	68fb      	ldr	r3, [r7, #12]
 8007b12:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007b14:	2300      	movs	r3, #0
 8007b16:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007b18:	68fb      	ldr	r3, [r7, #12]
 8007b1a:	681b      	ldr	r3, [r3, #0]
 8007b1c:	689b      	ldr	r3, [r3, #8]
 8007b1e:	f003 0301 	and.w	r3, r3, #1
 8007b22:	2b01      	cmp	r3, #1
 8007b24:	d119      	bne.n	8007b5a <HAL_SPI_TransmitReceive+0x1b8>
 8007b26:	68fb      	ldr	r3, [r7, #12]
 8007b28:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007b2a:	b29b      	uxth	r3, r3
 8007b2c:	2b00      	cmp	r3, #0
 8007b2e:	d014      	beq.n	8007b5a <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007b30:	68fb      	ldr	r3, [r7, #12]
 8007b32:	681b      	ldr	r3, [r3, #0]
 8007b34:	68da      	ldr	r2, [r3, #12]
 8007b36:	68fb      	ldr	r3, [r7, #12]
 8007b38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b3a:	b292      	uxth	r2, r2
 8007b3c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007b3e:	68fb      	ldr	r3, [r7, #12]
 8007b40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b42:	1c9a      	adds	r2, r3, #2
 8007b44:	68fb      	ldr	r3, [r7, #12]
 8007b46:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8007b48:	68fb      	ldr	r3, [r7, #12]
 8007b4a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007b4c:	b29b      	uxth	r3, r3
 8007b4e:	3b01      	subs	r3, #1
 8007b50:	b29a      	uxth	r2, r3
 8007b52:	68fb      	ldr	r3, [r7, #12]
 8007b54:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007b56:	2301      	movs	r3, #1
 8007b58:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8007b5a:	f7fe f9b7 	bl	8005ecc <HAL_GetTick>
 8007b5e:	4602      	mov	r2, r0
 8007b60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b62:	1ad3      	subs	r3, r2, r3
 8007b64:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007b66:	429a      	cmp	r2, r3
 8007b68:	d807      	bhi.n	8007b7a <HAL_SPI_TransmitReceive+0x1d8>
 8007b6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b6c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007b70:	d003      	beq.n	8007b7a <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8007b72:	2303      	movs	r3, #3
 8007b74:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8007b78:	e0a7      	b.n	8007cca <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007b7a:	68fb      	ldr	r3, [r7, #12]
 8007b7c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007b7e:	b29b      	uxth	r3, r3
 8007b80:	2b00      	cmp	r3, #0
 8007b82:	d1a6      	bne.n	8007ad2 <HAL_SPI_TransmitReceive+0x130>
 8007b84:	68fb      	ldr	r3, [r7, #12]
 8007b86:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007b88:	b29b      	uxth	r3, r3
 8007b8a:	2b00      	cmp	r3, #0
 8007b8c:	d1a1      	bne.n	8007ad2 <HAL_SPI_TransmitReceive+0x130>
 8007b8e:	e07c      	b.n	8007c8a <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007b90:	68fb      	ldr	r3, [r7, #12]
 8007b92:	685b      	ldr	r3, [r3, #4]
 8007b94:	2b00      	cmp	r3, #0
 8007b96:	d002      	beq.n	8007b9e <HAL_SPI_TransmitReceive+0x1fc>
 8007b98:	8b7b      	ldrh	r3, [r7, #26]
 8007b9a:	2b01      	cmp	r3, #1
 8007b9c:	d16b      	bne.n	8007c76 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007b9e:	68fb      	ldr	r3, [r7, #12]
 8007ba0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007ba2:	68fb      	ldr	r3, [r7, #12]
 8007ba4:	681b      	ldr	r3, [r3, #0]
 8007ba6:	330c      	adds	r3, #12
 8007ba8:	7812      	ldrb	r2, [r2, #0]
 8007baa:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8007bac:	68fb      	ldr	r3, [r7, #12]
 8007bae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007bb0:	1c5a      	adds	r2, r3, #1
 8007bb2:	68fb      	ldr	r3, [r7, #12]
 8007bb4:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8007bb6:	68fb      	ldr	r3, [r7, #12]
 8007bb8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007bba:	b29b      	uxth	r3, r3
 8007bbc:	3b01      	subs	r3, #1
 8007bbe:	b29a      	uxth	r2, r3
 8007bc0:	68fb      	ldr	r3, [r7, #12]
 8007bc2:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007bc4:	e057      	b.n	8007c76 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007bc6:	68fb      	ldr	r3, [r7, #12]
 8007bc8:	681b      	ldr	r3, [r3, #0]
 8007bca:	689b      	ldr	r3, [r3, #8]
 8007bcc:	f003 0302 	and.w	r3, r3, #2
 8007bd0:	2b02      	cmp	r3, #2
 8007bd2:	d11c      	bne.n	8007c0e <HAL_SPI_TransmitReceive+0x26c>
 8007bd4:	68fb      	ldr	r3, [r7, #12]
 8007bd6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007bd8:	b29b      	uxth	r3, r3
 8007bda:	2b00      	cmp	r3, #0
 8007bdc:	d017      	beq.n	8007c0e <HAL_SPI_TransmitReceive+0x26c>
 8007bde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007be0:	2b01      	cmp	r3, #1
 8007be2:	d114      	bne.n	8007c0e <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8007be4:	68fb      	ldr	r3, [r7, #12]
 8007be6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007be8:	68fb      	ldr	r3, [r7, #12]
 8007bea:	681b      	ldr	r3, [r3, #0]
 8007bec:	330c      	adds	r3, #12
 8007bee:	7812      	ldrb	r2, [r2, #0]
 8007bf0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8007bf2:	68fb      	ldr	r3, [r7, #12]
 8007bf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007bf6:	1c5a      	adds	r2, r3, #1
 8007bf8:	68fb      	ldr	r3, [r7, #12]
 8007bfa:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8007bfc:	68fb      	ldr	r3, [r7, #12]
 8007bfe:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007c00:	b29b      	uxth	r3, r3
 8007c02:	3b01      	subs	r3, #1
 8007c04:	b29a      	uxth	r2, r3
 8007c06:	68fb      	ldr	r3, [r7, #12]
 8007c08:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007c0a:	2300      	movs	r3, #0
 8007c0c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007c0e:	68fb      	ldr	r3, [r7, #12]
 8007c10:	681b      	ldr	r3, [r3, #0]
 8007c12:	689b      	ldr	r3, [r3, #8]
 8007c14:	f003 0301 	and.w	r3, r3, #1
 8007c18:	2b01      	cmp	r3, #1
 8007c1a:	d119      	bne.n	8007c50 <HAL_SPI_TransmitReceive+0x2ae>
 8007c1c:	68fb      	ldr	r3, [r7, #12]
 8007c1e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007c20:	b29b      	uxth	r3, r3
 8007c22:	2b00      	cmp	r3, #0
 8007c24:	d014      	beq.n	8007c50 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8007c26:	68fb      	ldr	r3, [r7, #12]
 8007c28:	681b      	ldr	r3, [r3, #0]
 8007c2a:	68da      	ldr	r2, [r3, #12]
 8007c2c:	68fb      	ldr	r3, [r7, #12]
 8007c2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c30:	b2d2      	uxtb	r2, r2
 8007c32:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8007c34:	68fb      	ldr	r3, [r7, #12]
 8007c36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c38:	1c5a      	adds	r2, r3, #1
 8007c3a:	68fb      	ldr	r3, [r7, #12]
 8007c3c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8007c3e:	68fb      	ldr	r3, [r7, #12]
 8007c40:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007c42:	b29b      	uxth	r3, r3
 8007c44:	3b01      	subs	r3, #1
 8007c46:	b29a      	uxth	r2, r3
 8007c48:	68fb      	ldr	r3, [r7, #12]
 8007c4a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007c4c:	2301      	movs	r3, #1
 8007c4e:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8007c50:	f7fe f93c 	bl	8005ecc <HAL_GetTick>
 8007c54:	4602      	mov	r2, r0
 8007c56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c58:	1ad3      	subs	r3, r2, r3
 8007c5a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007c5c:	429a      	cmp	r2, r3
 8007c5e:	d803      	bhi.n	8007c68 <HAL_SPI_TransmitReceive+0x2c6>
 8007c60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c62:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007c66:	d102      	bne.n	8007c6e <HAL_SPI_TransmitReceive+0x2cc>
 8007c68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c6a:	2b00      	cmp	r3, #0
 8007c6c:	d103      	bne.n	8007c76 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8007c6e:	2303      	movs	r3, #3
 8007c70:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8007c74:	e029      	b.n	8007cca <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007c76:	68fb      	ldr	r3, [r7, #12]
 8007c78:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007c7a:	b29b      	uxth	r3, r3
 8007c7c:	2b00      	cmp	r3, #0
 8007c7e:	d1a2      	bne.n	8007bc6 <HAL_SPI_TransmitReceive+0x224>
 8007c80:	68fb      	ldr	r3, [r7, #12]
 8007c82:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007c84:	b29b      	uxth	r3, r3
 8007c86:	2b00      	cmp	r3, #0
 8007c88:	d19d      	bne.n	8007bc6 <HAL_SPI_TransmitReceive+0x224>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007c8a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007c8c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007c8e:	68f8      	ldr	r0, [r7, #12]
 8007c90:	f000 f904 	bl	8007e9c <SPI_EndRxTxTransaction>
 8007c94:	4603      	mov	r3, r0
 8007c96:	2b00      	cmp	r3, #0
 8007c98:	d006      	beq.n	8007ca8 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8007c9a:	2301      	movs	r3, #1
 8007c9c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007ca0:	68fb      	ldr	r3, [r7, #12]
 8007ca2:	2220      	movs	r2, #32
 8007ca4:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8007ca6:	e010      	b.n	8007cca <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007ca8:	68fb      	ldr	r3, [r7, #12]
 8007caa:	689b      	ldr	r3, [r3, #8]
 8007cac:	2b00      	cmp	r3, #0
 8007cae:	d10b      	bne.n	8007cc8 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007cb0:	2300      	movs	r3, #0
 8007cb2:	617b      	str	r3, [r7, #20]
 8007cb4:	68fb      	ldr	r3, [r7, #12]
 8007cb6:	681b      	ldr	r3, [r3, #0]
 8007cb8:	68db      	ldr	r3, [r3, #12]
 8007cba:	617b      	str	r3, [r7, #20]
 8007cbc:	68fb      	ldr	r3, [r7, #12]
 8007cbe:	681b      	ldr	r3, [r3, #0]
 8007cc0:	689b      	ldr	r3, [r3, #8]
 8007cc2:	617b      	str	r3, [r7, #20]
 8007cc4:	697b      	ldr	r3, [r7, #20]
 8007cc6:	e000      	b.n	8007cca <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8007cc8:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8007cca:	68fb      	ldr	r3, [r7, #12]
 8007ccc:	2201      	movs	r2, #1
 8007cce:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8007cd2:	68fb      	ldr	r3, [r7, #12]
 8007cd4:	2200      	movs	r2, #0
 8007cd6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8007cda:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8007cde:	4618      	mov	r0, r3
 8007ce0:	3730      	adds	r7, #48	; 0x30
 8007ce2:	46bd      	mov	sp, r7
 8007ce4:	bd80      	pop	{r7, pc}
	...

08007ce8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007ce8:	b580      	push	{r7, lr}
 8007cea:	b088      	sub	sp, #32
 8007cec:	af00      	add	r7, sp, #0
 8007cee:	60f8      	str	r0, [r7, #12]
 8007cf0:	60b9      	str	r1, [r7, #8]
 8007cf2:	603b      	str	r3, [r7, #0]
 8007cf4:	4613      	mov	r3, r2
 8007cf6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8007cf8:	f7fe f8e8 	bl	8005ecc <HAL_GetTick>
 8007cfc:	4602      	mov	r2, r0
 8007cfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d00:	1a9b      	subs	r3, r3, r2
 8007d02:	683a      	ldr	r2, [r7, #0]
 8007d04:	4413      	add	r3, r2
 8007d06:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8007d08:	f7fe f8e0 	bl	8005ecc <HAL_GetTick>
 8007d0c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8007d0e:	4b39      	ldr	r3, [pc, #228]	; (8007df4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8007d10:	681b      	ldr	r3, [r3, #0]
 8007d12:	015b      	lsls	r3, r3, #5
 8007d14:	0d1b      	lsrs	r3, r3, #20
 8007d16:	69fa      	ldr	r2, [r7, #28]
 8007d18:	fb02 f303 	mul.w	r3, r2, r3
 8007d1c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007d1e:	e054      	b.n	8007dca <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8007d20:	683b      	ldr	r3, [r7, #0]
 8007d22:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007d26:	d050      	beq.n	8007dca <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007d28:	f7fe f8d0 	bl	8005ecc <HAL_GetTick>
 8007d2c:	4602      	mov	r2, r0
 8007d2e:	69bb      	ldr	r3, [r7, #24]
 8007d30:	1ad3      	subs	r3, r2, r3
 8007d32:	69fa      	ldr	r2, [r7, #28]
 8007d34:	429a      	cmp	r2, r3
 8007d36:	d902      	bls.n	8007d3e <SPI_WaitFlagStateUntilTimeout+0x56>
 8007d38:	69fb      	ldr	r3, [r7, #28]
 8007d3a:	2b00      	cmp	r3, #0
 8007d3c:	d13d      	bne.n	8007dba <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007d3e:	68fb      	ldr	r3, [r7, #12]
 8007d40:	681b      	ldr	r3, [r3, #0]
 8007d42:	685a      	ldr	r2, [r3, #4]
 8007d44:	68fb      	ldr	r3, [r7, #12]
 8007d46:	681b      	ldr	r3, [r3, #0]
 8007d48:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8007d4c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007d4e:	68fb      	ldr	r3, [r7, #12]
 8007d50:	685b      	ldr	r3, [r3, #4]
 8007d52:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007d56:	d111      	bne.n	8007d7c <SPI_WaitFlagStateUntilTimeout+0x94>
 8007d58:	68fb      	ldr	r3, [r7, #12]
 8007d5a:	689b      	ldr	r3, [r3, #8]
 8007d5c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007d60:	d004      	beq.n	8007d6c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007d62:	68fb      	ldr	r3, [r7, #12]
 8007d64:	689b      	ldr	r3, [r3, #8]
 8007d66:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007d6a:	d107      	bne.n	8007d7c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007d6c:	68fb      	ldr	r3, [r7, #12]
 8007d6e:	681b      	ldr	r3, [r3, #0]
 8007d70:	681a      	ldr	r2, [r3, #0]
 8007d72:	68fb      	ldr	r3, [r7, #12]
 8007d74:	681b      	ldr	r3, [r3, #0]
 8007d76:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007d7a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007d7c:	68fb      	ldr	r3, [r7, #12]
 8007d7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d80:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007d84:	d10f      	bne.n	8007da6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8007d86:	68fb      	ldr	r3, [r7, #12]
 8007d88:	681b      	ldr	r3, [r3, #0]
 8007d8a:	681a      	ldr	r2, [r3, #0]
 8007d8c:	68fb      	ldr	r3, [r7, #12]
 8007d8e:	681b      	ldr	r3, [r3, #0]
 8007d90:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007d94:	601a      	str	r2, [r3, #0]
 8007d96:	68fb      	ldr	r3, [r7, #12]
 8007d98:	681b      	ldr	r3, [r3, #0]
 8007d9a:	681a      	ldr	r2, [r3, #0]
 8007d9c:	68fb      	ldr	r3, [r7, #12]
 8007d9e:	681b      	ldr	r3, [r3, #0]
 8007da0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007da4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007da6:	68fb      	ldr	r3, [r7, #12]
 8007da8:	2201      	movs	r2, #1
 8007daa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007dae:	68fb      	ldr	r3, [r7, #12]
 8007db0:	2200      	movs	r2, #0
 8007db2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8007db6:	2303      	movs	r3, #3
 8007db8:	e017      	b.n	8007dea <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8007dba:	697b      	ldr	r3, [r7, #20]
 8007dbc:	2b00      	cmp	r3, #0
 8007dbe:	d101      	bne.n	8007dc4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8007dc0:	2300      	movs	r3, #0
 8007dc2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8007dc4:	697b      	ldr	r3, [r7, #20]
 8007dc6:	3b01      	subs	r3, #1
 8007dc8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007dca:	68fb      	ldr	r3, [r7, #12]
 8007dcc:	681b      	ldr	r3, [r3, #0]
 8007dce:	689a      	ldr	r2, [r3, #8]
 8007dd0:	68bb      	ldr	r3, [r7, #8]
 8007dd2:	4013      	ands	r3, r2
 8007dd4:	68ba      	ldr	r2, [r7, #8]
 8007dd6:	429a      	cmp	r2, r3
 8007dd8:	bf0c      	ite	eq
 8007dda:	2301      	moveq	r3, #1
 8007ddc:	2300      	movne	r3, #0
 8007dde:	b2db      	uxtb	r3, r3
 8007de0:	461a      	mov	r2, r3
 8007de2:	79fb      	ldrb	r3, [r7, #7]
 8007de4:	429a      	cmp	r2, r3
 8007de6:	d19b      	bne.n	8007d20 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8007de8:	2300      	movs	r3, #0
}
 8007dea:	4618      	mov	r0, r3
 8007dec:	3720      	adds	r7, #32
 8007dee:	46bd      	mov	sp, r7
 8007df0:	bd80      	pop	{r7, pc}
 8007df2:	bf00      	nop
 8007df4:	20000020 	.word	0x20000020

08007df8 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8007df8:	b580      	push	{r7, lr}
 8007dfa:	b086      	sub	sp, #24
 8007dfc:	af02      	add	r7, sp, #8
 8007dfe:	60f8      	str	r0, [r7, #12]
 8007e00:	60b9      	str	r1, [r7, #8]
 8007e02:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007e04:	68fb      	ldr	r3, [r7, #12]
 8007e06:	685b      	ldr	r3, [r3, #4]
 8007e08:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007e0c:	d111      	bne.n	8007e32 <SPI_EndRxTransaction+0x3a>
 8007e0e:	68fb      	ldr	r3, [r7, #12]
 8007e10:	689b      	ldr	r3, [r3, #8]
 8007e12:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007e16:	d004      	beq.n	8007e22 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007e18:	68fb      	ldr	r3, [r7, #12]
 8007e1a:	689b      	ldr	r3, [r3, #8]
 8007e1c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007e20:	d107      	bne.n	8007e32 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8007e22:	68fb      	ldr	r3, [r7, #12]
 8007e24:	681b      	ldr	r3, [r3, #0]
 8007e26:	681a      	ldr	r2, [r3, #0]
 8007e28:	68fb      	ldr	r3, [r7, #12]
 8007e2a:	681b      	ldr	r3, [r3, #0]
 8007e2c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007e30:	601a      	str	r2, [r3, #0]
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 8007e32:	68fb      	ldr	r3, [r7, #12]
 8007e34:	685b      	ldr	r3, [r3, #4]
 8007e36:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007e3a:	d117      	bne.n	8007e6c <SPI_EndRxTransaction+0x74>
 8007e3c:	68fb      	ldr	r3, [r7, #12]
 8007e3e:	689b      	ldr	r3, [r3, #8]
 8007e40:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007e44:	d112      	bne.n	8007e6c <SPI_EndRxTransaction+0x74>
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	9300      	str	r3, [sp, #0]
 8007e4a:	68bb      	ldr	r3, [r7, #8]
 8007e4c:	2200      	movs	r2, #0
 8007e4e:	2101      	movs	r1, #1
 8007e50:	68f8      	ldr	r0, [r7, #12]
 8007e52:	f7ff ff49 	bl	8007ce8 <SPI_WaitFlagStateUntilTimeout>
 8007e56:	4603      	mov	r3, r0
 8007e58:	2b00      	cmp	r3, #0
 8007e5a:	d01a      	beq.n	8007e92 <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007e5c:	68fb      	ldr	r3, [r7, #12]
 8007e5e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007e60:	f043 0220 	orr.w	r2, r3, #32
 8007e64:	68fb      	ldr	r3, [r7, #12]
 8007e66:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8007e68:	2303      	movs	r3, #3
 8007e6a:	e013      	b.n	8007e94 <SPI_EndRxTransaction+0x9c>
    }
  }
  else
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	9300      	str	r3, [sp, #0]
 8007e70:	68bb      	ldr	r3, [r7, #8]
 8007e72:	2200      	movs	r2, #0
 8007e74:	2180      	movs	r1, #128	; 0x80
 8007e76:	68f8      	ldr	r0, [r7, #12]
 8007e78:	f7ff ff36 	bl	8007ce8 <SPI_WaitFlagStateUntilTimeout>
 8007e7c:	4603      	mov	r3, r0
 8007e7e:	2b00      	cmp	r3, #0
 8007e80:	d007      	beq.n	8007e92 <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007e82:	68fb      	ldr	r3, [r7, #12]
 8007e84:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007e86:	f043 0220 	orr.w	r2, r3, #32
 8007e8a:	68fb      	ldr	r3, [r7, #12]
 8007e8c:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8007e8e:	2303      	movs	r3, #3
 8007e90:	e000      	b.n	8007e94 <SPI_EndRxTransaction+0x9c>
    }
  }
  return HAL_OK;
 8007e92:	2300      	movs	r3, #0
}
 8007e94:	4618      	mov	r0, r3
 8007e96:	3710      	adds	r7, #16
 8007e98:	46bd      	mov	sp, r7
 8007e9a:	bd80      	pop	{r7, pc}

08007e9c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8007e9c:	b580      	push	{r7, lr}
 8007e9e:	b086      	sub	sp, #24
 8007ea0:	af02      	add	r7, sp, #8
 8007ea2:	60f8      	str	r0, [r7, #12]
 8007ea4:	60b9      	str	r1, [r7, #8]
 8007ea6:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	9300      	str	r3, [sp, #0]
 8007eac:	68bb      	ldr	r3, [r7, #8]
 8007eae:	2200      	movs	r2, #0
 8007eb0:	2180      	movs	r1, #128	; 0x80
 8007eb2:	68f8      	ldr	r0, [r7, #12]
 8007eb4:	f7ff ff18 	bl	8007ce8 <SPI_WaitFlagStateUntilTimeout>
 8007eb8:	4603      	mov	r3, r0
 8007eba:	2b00      	cmp	r3, #0
 8007ebc:	d007      	beq.n	8007ece <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007ebe:	68fb      	ldr	r3, [r7, #12]
 8007ec0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007ec2:	f043 0220 	orr.w	r2, r3, #32
 8007ec6:	68fb      	ldr	r3, [r7, #12]
 8007ec8:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8007eca:	2303      	movs	r3, #3
 8007ecc:	e000      	b.n	8007ed0 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8007ece:	2300      	movs	r3, #0
}
 8007ed0:	4618      	mov	r0, r3
 8007ed2:	3710      	adds	r7, #16
 8007ed4:	46bd      	mov	sp, r7
 8007ed6:	bd80      	pop	{r7, pc}

08007ed8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007ed8:	b580      	push	{r7, lr}
 8007eda:	b082      	sub	sp, #8
 8007edc:	af00      	add	r7, sp, #0
 8007ede:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	2b00      	cmp	r3, #0
 8007ee4:	d101      	bne.n	8007eea <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007ee6:	2301      	movs	r3, #1
 8007ee8:	e041      	b.n	8007f6e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007ef0:	b2db      	uxtb	r3, r3
 8007ef2:	2b00      	cmp	r3, #0
 8007ef4:	d106      	bne.n	8007f04 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	2200      	movs	r2, #0
 8007efa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007efe:	6878      	ldr	r0, [r7, #4]
 8007f00:	f7fc fef4 	bl	8004cec <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	2202      	movs	r2, #2
 8007f08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	681a      	ldr	r2, [r3, #0]
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	3304      	adds	r3, #4
 8007f14:	4619      	mov	r1, r3
 8007f16:	4610      	mov	r0, r2
 8007f18:	f001 f8ee 	bl	80090f8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	2201      	movs	r2, #1
 8007f20:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	2201      	movs	r2, #1
 8007f28:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	2201      	movs	r2, #1
 8007f30:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	2201      	movs	r2, #1
 8007f38:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	2201      	movs	r2, #1
 8007f40:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	2201      	movs	r2, #1
 8007f48:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	2201      	movs	r2, #1
 8007f50:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	2201      	movs	r2, #1
 8007f58:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	2201      	movs	r2, #1
 8007f60:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	2201      	movs	r2, #1
 8007f68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007f6c:	2300      	movs	r3, #0
}
 8007f6e:	4618      	mov	r0, r3
 8007f70:	3708      	adds	r7, #8
 8007f72:	46bd      	mov	sp, r7
 8007f74:	bd80      	pop	{r7, pc}
	...

08007f78 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007f78:	b480      	push	{r7}
 8007f7a:	b085      	sub	sp, #20
 8007f7c:	af00      	add	r7, sp, #0
 8007f7e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007f86:	b2db      	uxtb	r3, r3
 8007f88:	2b01      	cmp	r3, #1
 8007f8a:	d001      	beq.n	8007f90 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007f8c:	2301      	movs	r3, #1
 8007f8e:	e03a      	b.n	8008006 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	2202      	movs	r2, #2
 8007f94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	681b      	ldr	r3, [r3, #0]
 8007f9c:	68da      	ldr	r2, [r3, #12]
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	681b      	ldr	r3, [r3, #0]
 8007fa2:	f042 0201 	orr.w	r2, r2, #1
 8007fa6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	681b      	ldr	r3, [r3, #0]
 8007fac:	4a18      	ldr	r2, [pc, #96]	; (8008010 <HAL_TIM_Base_Start_IT+0x98>)
 8007fae:	4293      	cmp	r3, r2
 8007fb0:	d00e      	beq.n	8007fd0 <HAL_TIM_Base_Start_IT+0x58>
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	681b      	ldr	r3, [r3, #0]
 8007fb6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007fba:	d009      	beq.n	8007fd0 <HAL_TIM_Base_Start_IT+0x58>
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	681b      	ldr	r3, [r3, #0]
 8007fc0:	4a14      	ldr	r2, [pc, #80]	; (8008014 <HAL_TIM_Base_Start_IT+0x9c>)
 8007fc2:	4293      	cmp	r3, r2
 8007fc4:	d004      	beq.n	8007fd0 <HAL_TIM_Base_Start_IT+0x58>
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	681b      	ldr	r3, [r3, #0]
 8007fca:	4a13      	ldr	r2, [pc, #76]	; (8008018 <HAL_TIM_Base_Start_IT+0xa0>)
 8007fcc:	4293      	cmp	r3, r2
 8007fce:	d111      	bne.n	8007ff4 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	681b      	ldr	r3, [r3, #0]
 8007fd4:	689b      	ldr	r3, [r3, #8]
 8007fd6:	f003 0307 	and.w	r3, r3, #7
 8007fda:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007fdc:	68fb      	ldr	r3, [r7, #12]
 8007fde:	2b06      	cmp	r3, #6
 8007fe0:	d010      	beq.n	8008004 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	681b      	ldr	r3, [r3, #0]
 8007fe6:	681a      	ldr	r2, [r3, #0]
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	681b      	ldr	r3, [r3, #0]
 8007fec:	f042 0201 	orr.w	r2, r2, #1
 8007ff0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007ff2:	e007      	b.n	8008004 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	681b      	ldr	r3, [r3, #0]
 8007ff8:	681a      	ldr	r2, [r3, #0]
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	681b      	ldr	r3, [r3, #0]
 8007ffe:	f042 0201 	orr.w	r2, r2, #1
 8008002:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008004:	2300      	movs	r3, #0
}
 8008006:	4618      	mov	r0, r3
 8008008:	3714      	adds	r7, #20
 800800a:	46bd      	mov	sp, r7
 800800c:	bc80      	pop	{r7}
 800800e:	4770      	bx	lr
 8008010:	40012c00 	.word	0x40012c00
 8008014:	40000400 	.word	0x40000400
 8008018:	40000800 	.word	0x40000800

0800801c <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 800801c:	b580      	push	{r7, lr}
 800801e:	b082      	sub	sp, #8
 8008020:	af00      	add	r7, sp, #0
 8008022:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	2b00      	cmp	r3, #0
 8008028:	d101      	bne.n	800802e <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 800802a:	2301      	movs	r3, #1
 800802c:	e041      	b.n	80080b2 <HAL_TIM_OC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008034:	b2db      	uxtb	r3, r3
 8008036:	2b00      	cmp	r3, #0
 8008038:	d106      	bne.n	8008048 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	2200      	movs	r2, #0
 800803e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8008042:	6878      	ldr	r0, [r7, #4]
 8008044:	f000 f839 	bl	80080ba <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	2202      	movs	r2, #2
 800804c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	681a      	ldr	r2, [r3, #0]
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	3304      	adds	r3, #4
 8008058:	4619      	mov	r1, r3
 800805a:	4610      	mov	r0, r2
 800805c:	f001 f84c 	bl	80090f8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	2201      	movs	r2, #1
 8008064:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	2201      	movs	r2, #1
 800806c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	2201      	movs	r2, #1
 8008074:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	2201      	movs	r2, #1
 800807c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	2201      	movs	r2, #1
 8008084:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	2201      	movs	r2, #1
 800808c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	2201      	movs	r2, #1
 8008094:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	2201      	movs	r2, #1
 800809c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	2201      	movs	r2, #1
 80080a4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	2201      	movs	r2, #1
 80080ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80080b0:	2300      	movs	r3, #0
}
 80080b2:	4618      	mov	r0, r3
 80080b4:	3708      	adds	r7, #8
 80080b6:	46bd      	mov	sp, r7
 80080b8:	bd80      	pop	{r7, pc}

080080ba <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 80080ba:	b480      	push	{r7}
 80080bc:	b083      	sub	sp, #12
 80080be:	af00      	add	r7, sp, #0
 80080c0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 80080c2:	bf00      	nop
 80080c4:	370c      	adds	r7, #12
 80080c6:	46bd      	mov	sp, r7
 80080c8:	bc80      	pop	{r7}
 80080ca:	4770      	bx	lr

080080cc <HAL_TIM_OC_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80080cc:	b580      	push	{r7, lr}
 80080ce:	b084      	sub	sp, #16
 80080d0:	af00      	add	r7, sp, #0
 80080d2:	6078      	str	r0, [r7, #4]
 80080d4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80080d6:	683b      	ldr	r3, [r7, #0]
 80080d8:	2b00      	cmp	r3, #0
 80080da:	d109      	bne.n	80080f0 <HAL_TIM_OC_Start+0x24>
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80080e2:	b2db      	uxtb	r3, r3
 80080e4:	2b01      	cmp	r3, #1
 80080e6:	bf14      	ite	ne
 80080e8:	2301      	movne	r3, #1
 80080ea:	2300      	moveq	r3, #0
 80080ec:	b2db      	uxtb	r3, r3
 80080ee:	e022      	b.n	8008136 <HAL_TIM_OC_Start+0x6a>
 80080f0:	683b      	ldr	r3, [r7, #0]
 80080f2:	2b04      	cmp	r3, #4
 80080f4:	d109      	bne.n	800810a <HAL_TIM_OC_Start+0x3e>
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80080fc:	b2db      	uxtb	r3, r3
 80080fe:	2b01      	cmp	r3, #1
 8008100:	bf14      	ite	ne
 8008102:	2301      	movne	r3, #1
 8008104:	2300      	moveq	r3, #0
 8008106:	b2db      	uxtb	r3, r3
 8008108:	e015      	b.n	8008136 <HAL_TIM_OC_Start+0x6a>
 800810a:	683b      	ldr	r3, [r7, #0]
 800810c:	2b08      	cmp	r3, #8
 800810e:	d109      	bne.n	8008124 <HAL_TIM_OC_Start+0x58>
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008116:	b2db      	uxtb	r3, r3
 8008118:	2b01      	cmp	r3, #1
 800811a:	bf14      	ite	ne
 800811c:	2301      	movne	r3, #1
 800811e:	2300      	moveq	r3, #0
 8008120:	b2db      	uxtb	r3, r3
 8008122:	e008      	b.n	8008136 <HAL_TIM_OC_Start+0x6a>
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800812a:	b2db      	uxtb	r3, r3
 800812c:	2b01      	cmp	r3, #1
 800812e:	bf14      	ite	ne
 8008130:	2301      	movne	r3, #1
 8008132:	2300      	moveq	r3, #0
 8008134:	b2db      	uxtb	r3, r3
 8008136:	2b00      	cmp	r3, #0
 8008138:	d001      	beq.n	800813e <HAL_TIM_OC_Start+0x72>
  {
    return HAL_ERROR;
 800813a:	2301      	movs	r3, #1
 800813c:	e05e      	b.n	80081fc <HAL_TIM_OC_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800813e:	683b      	ldr	r3, [r7, #0]
 8008140:	2b00      	cmp	r3, #0
 8008142:	d104      	bne.n	800814e <HAL_TIM_OC_Start+0x82>
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	2202      	movs	r2, #2
 8008148:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800814c:	e013      	b.n	8008176 <HAL_TIM_OC_Start+0xaa>
 800814e:	683b      	ldr	r3, [r7, #0]
 8008150:	2b04      	cmp	r3, #4
 8008152:	d104      	bne.n	800815e <HAL_TIM_OC_Start+0x92>
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	2202      	movs	r2, #2
 8008158:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800815c:	e00b      	b.n	8008176 <HAL_TIM_OC_Start+0xaa>
 800815e:	683b      	ldr	r3, [r7, #0]
 8008160:	2b08      	cmp	r3, #8
 8008162:	d104      	bne.n	800816e <HAL_TIM_OC_Start+0xa2>
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	2202      	movs	r2, #2
 8008168:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800816c:	e003      	b.n	8008176 <HAL_TIM_OC_Start+0xaa>
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	2202      	movs	r2, #2
 8008172:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Output compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	681b      	ldr	r3, [r3, #0]
 800817a:	2201      	movs	r2, #1
 800817c:	6839      	ldr	r1, [r7, #0]
 800817e:	4618      	mov	r0, r3
 8008180:	f001 fbd5 	bl	800992e <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	681b      	ldr	r3, [r3, #0]
 8008188:	4a1e      	ldr	r2, [pc, #120]	; (8008204 <HAL_TIM_OC_Start+0x138>)
 800818a:	4293      	cmp	r3, r2
 800818c:	d107      	bne.n	800819e <HAL_TIM_OC_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	681b      	ldr	r3, [r3, #0]
 8008192:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	681b      	ldr	r3, [r3, #0]
 8008198:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800819c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	681b      	ldr	r3, [r3, #0]
 80081a2:	4a18      	ldr	r2, [pc, #96]	; (8008204 <HAL_TIM_OC_Start+0x138>)
 80081a4:	4293      	cmp	r3, r2
 80081a6:	d00e      	beq.n	80081c6 <HAL_TIM_OC_Start+0xfa>
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	681b      	ldr	r3, [r3, #0]
 80081ac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80081b0:	d009      	beq.n	80081c6 <HAL_TIM_OC_Start+0xfa>
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	681b      	ldr	r3, [r3, #0]
 80081b6:	4a14      	ldr	r2, [pc, #80]	; (8008208 <HAL_TIM_OC_Start+0x13c>)
 80081b8:	4293      	cmp	r3, r2
 80081ba:	d004      	beq.n	80081c6 <HAL_TIM_OC_Start+0xfa>
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	681b      	ldr	r3, [r3, #0]
 80081c0:	4a12      	ldr	r2, [pc, #72]	; (800820c <HAL_TIM_OC_Start+0x140>)
 80081c2:	4293      	cmp	r3, r2
 80081c4:	d111      	bne.n	80081ea <HAL_TIM_OC_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	681b      	ldr	r3, [r3, #0]
 80081ca:	689b      	ldr	r3, [r3, #8]
 80081cc:	f003 0307 	and.w	r3, r3, #7
 80081d0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80081d2:	68fb      	ldr	r3, [r7, #12]
 80081d4:	2b06      	cmp	r3, #6
 80081d6:	d010      	beq.n	80081fa <HAL_TIM_OC_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	681b      	ldr	r3, [r3, #0]
 80081dc:	681a      	ldr	r2, [r3, #0]
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	681b      	ldr	r3, [r3, #0]
 80081e2:	f042 0201 	orr.w	r2, r2, #1
 80081e6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80081e8:	e007      	b.n	80081fa <HAL_TIM_OC_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	681b      	ldr	r3, [r3, #0]
 80081ee:	681a      	ldr	r2, [r3, #0]
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	681b      	ldr	r3, [r3, #0]
 80081f4:	f042 0201 	orr.w	r2, r2, #1
 80081f8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80081fa:	2300      	movs	r3, #0
}
 80081fc:	4618      	mov	r0, r3
 80081fe:	3710      	adds	r7, #16
 8008200:	46bd      	mov	sp, r7
 8008202:	bd80      	pop	{r7, pc}
 8008204:	40012c00 	.word	0x40012c00
 8008208:	40000400 	.word	0x40000400
 800820c:	40000800 	.word	0x40000800

08008210 <HAL_TIM_OC_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008210:	b580      	push	{r7, lr}
 8008212:	b082      	sub	sp, #8
 8008214:	af00      	add	r7, sp, #0
 8008216:	6078      	str	r0, [r7, #4]
 8008218:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Output compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	681b      	ldr	r3, [r3, #0]
 800821e:	2200      	movs	r2, #0
 8008220:	6839      	ldr	r1, [r7, #0]
 8008222:	4618      	mov	r0, r3
 8008224:	f001 fb83 	bl	800992e <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	681b      	ldr	r3, [r3, #0]
 800822c:	4a29      	ldr	r2, [pc, #164]	; (80082d4 <HAL_TIM_OC_Stop+0xc4>)
 800822e:	4293      	cmp	r3, r2
 8008230:	d117      	bne.n	8008262 <HAL_TIM_OC_Stop+0x52>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	681b      	ldr	r3, [r3, #0]
 8008236:	6a1a      	ldr	r2, [r3, #32]
 8008238:	f241 1311 	movw	r3, #4369	; 0x1111
 800823c:	4013      	ands	r3, r2
 800823e:	2b00      	cmp	r3, #0
 8008240:	d10f      	bne.n	8008262 <HAL_TIM_OC_Stop+0x52>
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	681b      	ldr	r3, [r3, #0]
 8008246:	6a1a      	ldr	r2, [r3, #32]
 8008248:	f240 4344 	movw	r3, #1092	; 0x444
 800824c:	4013      	ands	r3, r2
 800824e:	2b00      	cmp	r3, #0
 8008250:	d107      	bne.n	8008262 <HAL_TIM_OC_Stop+0x52>
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	681b      	ldr	r3, [r3, #0]
 8008256:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	681b      	ldr	r3, [r3, #0]
 800825c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8008260:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	681b      	ldr	r3, [r3, #0]
 8008266:	6a1a      	ldr	r2, [r3, #32]
 8008268:	f241 1311 	movw	r3, #4369	; 0x1111
 800826c:	4013      	ands	r3, r2
 800826e:	2b00      	cmp	r3, #0
 8008270:	d10f      	bne.n	8008292 <HAL_TIM_OC_Stop+0x82>
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	681b      	ldr	r3, [r3, #0]
 8008276:	6a1a      	ldr	r2, [r3, #32]
 8008278:	f240 4344 	movw	r3, #1092	; 0x444
 800827c:	4013      	ands	r3, r2
 800827e:	2b00      	cmp	r3, #0
 8008280:	d107      	bne.n	8008292 <HAL_TIM_OC_Stop+0x82>
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	681b      	ldr	r3, [r3, #0]
 8008286:	681a      	ldr	r2, [r3, #0]
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	681b      	ldr	r3, [r3, #0]
 800828c:	f022 0201 	bic.w	r2, r2, #1
 8008290:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8008292:	683b      	ldr	r3, [r7, #0]
 8008294:	2b00      	cmp	r3, #0
 8008296:	d104      	bne.n	80082a2 <HAL_TIM_OC_Stop+0x92>
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	2201      	movs	r2, #1
 800829c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80082a0:	e013      	b.n	80082ca <HAL_TIM_OC_Stop+0xba>
 80082a2:	683b      	ldr	r3, [r7, #0]
 80082a4:	2b04      	cmp	r3, #4
 80082a6:	d104      	bne.n	80082b2 <HAL_TIM_OC_Stop+0xa2>
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	2201      	movs	r2, #1
 80082ac:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80082b0:	e00b      	b.n	80082ca <HAL_TIM_OC_Stop+0xba>
 80082b2:	683b      	ldr	r3, [r7, #0]
 80082b4:	2b08      	cmp	r3, #8
 80082b6:	d104      	bne.n	80082c2 <HAL_TIM_OC_Stop+0xb2>
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	2201      	movs	r2, #1
 80082bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80082c0:	e003      	b.n	80082ca <HAL_TIM_OC_Stop+0xba>
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	2201      	movs	r2, #1
 80082c6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Return function status */
  return HAL_OK;
 80082ca:	2300      	movs	r3, #0
}
 80082cc:	4618      	mov	r0, r3
 80082ce:	3708      	adds	r7, #8
 80082d0:	46bd      	mov	sp, r7
 80082d2:	bd80      	pop	{r7, pc}
 80082d4:	40012c00 	.word	0x40012c00

080082d8 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 80082d8:	b580      	push	{r7, lr}
 80082da:	b082      	sub	sp, #8
 80082dc:	af00      	add	r7, sp, #0
 80082de:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	2b00      	cmp	r3, #0
 80082e4:	d101      	bne.n	80082ea <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 80082e6:	2301      	movs	r3, #1
 80082e8:	e041      	b.n	800836e <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80082f0:	b2db      	uxtb	r3, r3
 80082f2:	2b00      	cmp	r3, #0
 80082f4:	d106      	bne.n	8008304 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	2200      	movs	r2, #0
 80082fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 80082fe:	6878      	ldr	r0, [r7, #4]
 8008300:	f000 f839 	bl	8008376 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	2202      	movs	r2, #2
 8008308:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	681a      	ldr	r2, [r3, #0]
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	3304      	adds	r3, #4
 8008314:	4619      	mov	r1, r3
 8008316:	4610      	mov	r0, r2
 8008318:	f000 feee 	bl	80090f8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	2201      	movs	r2, #1
 8008320:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	2201      	movs	r2, #1
 8008328:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	2201      	movs	r2, #1
 8008330:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	2201      	movs	r2, #1
 8008338:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	2201      	movs	r2, #1
 8008340:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	2201      	movs	r2, #1
 8008348:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	2201      	movs	r2, #1
 8008350:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	2201      	movs	r2, #1
 8008358:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	2201      	movs	r2, #1
 8008360:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	2201      	movs	r2, #1
 8008368:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800836c:	2300      	movs	r3, #0
}
 800836e:	4618      	mov	r0, r3
 8008370:	3708      	adds	r7, #8
 8008372:	46bd      	mov	sp, r7
 8008374:	bd80      	pop	{r7, pc}

08008376 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8008376:	b480      	push	{r7}
 8008378:	b083      	sub	sp, #12
 800837a:	af00      	add	r7, sp, #0
 800837c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 800837e:	bf00      	nop
 8008380:	370c      	adds	r7, #12
 8008382:	46bd      	mov	sp, r7
 8008384:	bc80      	pop	{r7}
 8008386:	4770      	bx	lr

08008388 <HAL_TIM_IC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from TIM peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, uint32_t *pData, uint16_t Length)
{
 8008388:	b580      	push	{r7, lr}
 800838a:	b086      	sub	sp, #24
 800838c:	af00      	add	r7, sp, #0
 800838e:	60f8      	str	r0, [r7, #12]
 8008390:	60b9      	str	r1, [r7, #8]
 8008392:	607a      	str	r2, [r7, #4]
 8008394:	807b      	strh	r3, [r7, #2]
  uint32_t tmpsmcr;
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8008396:	68bb      	ldr	r3, [r7, #8]
 8008398:	2b00      	cmp	r3, #0
 800839a:	d104      	bne.n	80083a6 <HAL_TIM_IC_Start_DMA+0x1e>
 800839c:	68fb      	ldr	r3, [r7, #12]
 800839e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80083a2:	b2db      	uxtb	r3, r3
 80083a4:	e013      	b.n	80083ce <HAL_TIM_IC_Start_DMA+0x46>
 80083a6:	68bb      	ldr	r3, [r7, #8]
 80083a8:	2b04      	cmp	r3, #4
 80083aa:	d104      	bne.n	80083b6 <HAL_TIM_IC_Start_DMA+0x2e>
 80083ac:	68fb      	ldr	r3, [r7, #12]
 80083ae:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80083b2:	b2db      	uxtb	r3, r3
 80083b4:	e00b      	b.n	80083ce <HAL_TIM_IC_Start_DMA+0x46>
 80083b6:	68bb      	ldr	r3, [r7, #8]
 80083b8:	2b08      	cmp	r3, #8
 80083ba:	d104      	bne.n	80083c6 <HAL_TIM_IC_Start_DMA+0x3e>
 80083bc:	68fb      	ldr	r3, [r7, #12]
 80083be:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80083c2:	b2db      	uxtb	r3, r3
 80083c4:	e003      	b.n	80083ce <HAL_TIM_IC_Start_DMA+0x46>
 80083c6:	68fb      	ldr	r3, [r7, #12]
 80083c8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80083cc:	b2db      	uxtb	r3, r3
 80083ce:	75fb      	strb	r3, [r7, #23]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 80083d0:	68bb      	ldr	r3, [r7, #8]
 80083d2:	2b00      	cmp	r3, #0
 80083d4:	d104      	bne.n	80083e0 <HAL_TIM_IC_Start_DMA+0x58>
 80083d6:	68fb      	ldr	r3, [r7, #12]
 80083d8:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80083dc:	b2db      	uxtb	r3, r3
 80083de:	e013      	b.n	8008408 <HAL_TIM_IC_Start_DMA+0x80>
 80083e0:	68bb      	ldr	r3, [r7, #8]
 80083e2:	2b04      	cmp	r3, #4
 80083e4:	d104      	bne.n	80083f0 <HAL_TIM_IC_Start_DMA+0x68>
 80083e6:	68fb      	ldr	r3, [r7, #12]
 80083e8:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80083ec:	b2db      	uxtb	r3, r3
 80083ee:	e00b      	b.n	8008408 <HAL_TIM_IC_Start_DMA+0x80>
 80083f0:	68bb      	ldr	r3, [r7, #8]
 80083f2:	2b08      	cmp	r3, #8
 80083f4:	d104      	bne.n	8008400 <HAL_TIM_IC_Start_DMA+0x78>
 80083f6:	68fb      	ldr	r3, [r7, #12]
 80083f8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80083fc:	b2db      	uxtb	r3, r3
 80083fe:	e003      	b.n	8008408 <HAL_TIM_IC_Start_DMA+0x80>
 8008400:	68fb      	ldr	r3, [r7, #12]
 8008402:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008406:	b2db      	uxtb	r3, r3
 8008408:	75bb      	strb	r3, [r7, #22]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
  assert_param(IS_TIM_DMA_CC_INSTANCE(htim->Instance));

  /* Set the TIM channel state */
  if ((channel_state == HAL_TIM_CHANNEL_STATE_BUSY)
 800840a:	7dfb      	ldrb	r3, [r7, #23]
 800840c:	2b02      	cmp	r3, #2
 800840e:	d002      	beq.n	8008416 <HAL_TIM_IC_Start_DMA+0x8e>
      || (complementary_channel_state == HAL_TIM_CHANNEL_STATE_BUSY))
 8008410:	7dbb      	ldrb	r3, [r7, #22]
 8008412:	2b02      	cmp	r3, #2
 8008414:	d101      	bne.n	800841a <HAL_TIM_IC_Start_DMA+0x92>
  {
    return HAL_BUSY;
 8008416:	2302      	movs	r3, #2
 8008418:	e130      	b.n	800867c <HAL_TIM_IC_Start_DMA+0x2f4>
  }
  else if ((channel_state == HAL_TIM_CHANNEL_STATE_READY)
 800841a:	7dfb      	ldrb	r3, [r7, #23]
 800841c:	2b01      	cmp	r3, #1
 800841e:	d143      	bne.n	80084a8 <HAL_TIM_IC_Start_DMA+0x120>
           && (complementary_channel_state == HAL_TIM_CHANNEL_STATE_READY))
 8008420:	7dbb      	ldrb	r3, [r7, #22]
 8008422:	2b01      	cmp	r3, #1
 8008424:	d140      	bne.n	80084a8 <HAL_TIM_IC_Start_DMA+0x120>
  {
    if ((pData == NULL) && (Length > 0U))
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	2b00      	cmp	r3, #0
 800842a:	d104      	bne.n	8008436 <HAL_TIM_IC_Start_DMA+0xae>
 800842c:	887b      	ldrh	r3, [r7, #2]
 800842e:	2b00      	cmp	r3, #0
 8008430:	d001      	beq.n	8008436 <HAL_TIM_IC_Start_DMA+0xae>
    {
      return HAL_ERROR;
 8008432:	2301      	movs	r3, #1
 8008434:	e122      	b.n	800867c <HAL_TIM_IC_Start_DMA+0x2f4>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8008436:	68bb      	ldr	r3, [r7, #8]
 8008438:	2b00      	cmp	r3, #0
 800843a:	d104      	bne.n	8008446 <HAL_TIM_IC_Start_DMA+0xbe>
 800843c:	68fb      	ldr	r3, [r7, #12]
 800843e:	2202      	movs	r2, #2
 8008440:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008444:	e013      	b.n	800846e <HAL_TIM_IC_Start_DMA+0xe6>
 8008446:	68bb      	ldr	r3, [r7, #8]
 8008448:	2b04      	cmp	r3, #4
 800844a:	d104      	bne.n	8008456 <HAL_TIM_IC_Start_DMA+0xce>
 800844c:	68fb      	ldr	r3, [r7, #12]
 800844e:	2202      	movs	r2, #2
 8008450:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008454:	e00b      	b.n	800846e <HAL_TIM_IC_Start_DMA+0xe6>
 8008456:	68bb      	ldr	r3, [r7, #8]
 8008458:	2b08      	cmp	r3, #8
 800845a:	d104      	bne.n	8008466 <HAL_TIM_IC_Start_DMA+0xde>
 800845c:	68fb      	ldr	r3, [r7, #12]
 800845e:	2202      	movs	r2, #2
 8008460:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008464:	e003      	b.n	800846e <HAL_TIM_IC_Start_DMA+0xe6>
 8008466:	68fb      	ldr	r3, [r7, #12]
 8008468:	2202      	movs	r2, #2
 800846a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800846e:	68bb      	ldr	r3, [r7, #8]
 8008470:	2b00      	cmp	r3, #0
 8008472:	d104      	bne.n	800847e <HAL_TIM_IC_Start_DMA+0xf6>
 8008474:	68fb      	ldr	r3, [r7, #12]
 8008476:	2202      	movs	r2, #2
 8008478:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    if ((pData == NULL) && (Length > 0U))
 800847c:	e016      	b.n	80084ac <HAL_TIM_IC_Start_DMA+0x124>
      TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800847e:	68bb      	ldr	r3, [r7, #8]
 8008480:	2b04      	cmp	r3, #4
 8008482:	d104      	bne.n	800848e <HAL_TIM_IC_Start_DMA+0x106>
 8008484:	68fb      	ldr	r3, [r7, #12]
 8008486:	2202      	movs	r2, #2
 8008488:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    if ((pData == NULL) && (Length > 0U))
 800848c:	e00e      	b.n	80084ac <HAL_TIM_IC_Start_DMA+0x124>
      TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800848e:	68bb      	ldr	r3, [r7, #8]
 8008490:	2b08      	cmp	r3, #8
 8008492:	d104      	bne.n	800849e <HAL_TIM_IC_Start_DMA+0x116>
 8008494:	68fb      	ldr	r3, [r7, #12]
 8008496:	2202      	movs	r2, #2
 8008498:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    if ((pData == NULL) && (Length > 0U))
 800849c:	e006      	b.n	80084ac <HAL_TIM_IC_Start_DMA+0x124>
      TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800849e:	68fb      	ldr	r3, [r7, #12]
 80084a0:	2202      	movs	r2, #2
 80084a2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    if ((pData == NULL) && (Length > 0U))
 80084a6:	e001      	b.n	80084ac <HAL_TIM_IC_Start_DMA+0x124>
    }
  }
  else
  {
    return HAL_ERROR;
 80084a8:	2301      	movs	r3, #1
 80084aa:	e0e7      	b.n	800867c <HAL_TIM_IC_Start_DMA+0x2f4>
  }

  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80084ac:	68fb      	ldr	r3, [r7, #12]
 80084ae:	681b      	ldr	r3, [r3, #0]
 80084b0:	2201      	movs	r2, #1
 80084b2:	68b9      	ldr	r1, [r7, #8]
 80084b4:	4618      	mov	r0, r3
 80084b6:	f001 fa3a 	bl	800992e <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80084ba:	68fb      	ldr	r3, [r7, #12]
 80084bc:	681b      	ldr	r3, [r3, #0]
 80084be:	4a71      	ldr	r2, [pc, #452]	; (8008684 <HAL_TIM_IC_Start_DMA+0x2fc>)
 80084c0:	4293      	cmp	r3, r2
 80084c2:	d00e      	beq.n	80084e2 <HAL_TIM_IC_Start_DMA+0x15a>
 80084c4:	68fb      	ldr	r3, [r7, #12]
 80084c6:	681b      	ldr	r3, [r3, #0]
 80084c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80084cc:	d009      	beq.n	80084e2 <HAL_TIM_IC_Start_DMA+0x15a>
 80084ce:	68fb      	ldr	r3, [r7, #12]
 80084d0:	681b      	ldr	r3, [r3, #0]
 80084d2:	4a6d      	ldr	r2, [pc, #436]	; (8008688 <HAL_TIM_IC_Start_DMA+0x300>)
 80084d4:	4293      	cmp	r3, r2
 80084d6:	d004      	beq.n	80084e2 <HAL_TIM_IC_Start_DMA+0x15a>
 80084d8:	68fb      	ldr	r3, [r7, #12]
 80084da:	681b      	ldr	r3, [r3, #0]
 80084dc:	4a6b      	ldr	r2, [pc, #428]	; (800868c <HAL_TIM_IC_Start_DMA+0x304>)
 80084de:	4293      	cmp	r3, r2
 80084e0:	d111      	bne.n	8008506 <HAL_TIM_IC_Start_DMA+0x17e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80084e2:	68fb      	ldr	r3, [r7, #12]
 80084e4:	681b      	ldr	r3, [r3, #0]
 80084e6:	689b      	ldr	r3, [r3, #8]
 80084e8:	f003 0307 	and.w	r3, r3, #7
 80084ec:	613b      	str	r3, [r7, #16]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80084ee:	693b      	ldr	r3, [r7, #16]
 80084f0:	2b06      	cmp	r3, #6
 80084f2:	d010      	beq.n	8008516 <HAL_TIM_IC_Start_DMA+0x18e>
    {
      __HAL_TIM_ENABLE(htim);
 80084f4:	68fb      	ldr	r3, [r7, #12]
 80084f6:	681b      	ldr	r3, [r3, #0]
 80084f8:	681a      	ldr	r2, [r3, #0]
 80084fa:	68fb      	ldr	r3, [r7, #12]
 80084fc:	681b      	ldr	r3, [r3, #0]
 80084fe:	f042 0201 	orr.w	r2, r2, #1
 8008502:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008504:	e007      	b.n	8008516 <HAL_TIM_IC_Start_DMA+0x18e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008506:	68fb      	ldr	r3, [r7, #12]
 8008508:	681b      	ldr	r3, [r3, #0]
 800850a:	681a      	ldr	r2, [r3, #0]
 800850c:	68fb      	ldr	r3, [r7, #12]
 800850e:	681b      	ldr	r3, [r3, #0]
 8008510:	f042 0201 	orr.w	r2, r2, #1
 8008514:	601a      	str	r2, [r3, #0]
 8008516:	68bb      	ldr	r3, [r7, #8]
 8008518:	2b0c      	cmp	r3, #12
 800851a:	f200 80ad 	bhi.w	8008678 <HAL_TIM_IC_Start_DMA+0x2f0>
 800851e:	a201      	add	r2, pc, #4	; (adr r2, 8008524 <HAL_TIM_IC_Start_DMA+0x19c>)
 8008520:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008524:	08008559 	.word	0x08008559
 8008528:	08008679 	.word	0x08008679
 800852c:	08008679 	.word	0x08008679
 8008530:	08008679 	.word	0x08008679
 8008534:	080085a1 	.word	0x080085a1
 8008538:	08008679 	.word	0x08008679
 800853c:	08008679 	.word	0x08008679
 8008540:	08008679 	.word	0x08008679
 8008544:	080085e9 	.word	0x080085e9
 8008548:	08008679 	.word	0x08008679
 800854c:	08008679 	.word	0x08008679
 8008550:	08008679 	.word	0x08008679
 8008554:	08008631 	.word	0x08008631
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA capture callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMACaptureCplt;
 8008558:	68fb      	ldr	r3, [r7, #12]
 800855a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800855c:	4a4c      	ldr	r2, [pc, #304]	; (8008690 <HAL_TIM_IC_Start_DMA+0x308>)
 800855e:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 8008560:	68fb      	ldr	r3, [r7, #12]
 8008562:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008564:	4a4b      	ldr	r2, [pc, #300]	; (8008694 <HAL_TIM_IC_Start_DMA+0x30c>)
 8008566:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8008568:	68fb      	ldr	r3, [r7, #12]
 800856a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800856c:	4a4a      	ldr	r2, [pc, #296]	; (8008698 <HAL_TIM_IC_Start_DMA+0x310>)
 800856e:	631a      	str	r2, [r3, #48]	; 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)&htim->Instance->CCR1, (uint32_t)pData,
 8008570:	68fb      	ldr	r3, [r7, #12]
 8008572:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8008574:	68fb      	ldr	r3, [r7, #12]
 8008576:	681b      	ldr	r3, [r3, #0]
 8008578:	3334      	adds	r3, #52	; 0x34
 800857a:	4619      	mov	r1, r3
 800857c:	687a      	ldr	r2, [r7, #4]
 800857e:	887b      	ldrh	r3, [r7, #2]
 8008580:	f7fd fe3a 	bl	80061f8 <HAL_DMA_Start_IT>
 8008584:	4603      	mov	r3, r0
 8008586:	2b00      	cmp	r3, #0
 8008588:	d001      	beq.n	800858e <HAL_TIM_IC_Start_DMA+0x206>
                         Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800858a:	2301      	movs	r3, #1
 800858c:	e076      	b.n	800867c <HAL_TIM_IC_Start_DMA+0x2f4>
      }
      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 800858e:	68fb      	ldr	r3, [r7, #12]
 8008590:	681b      	ldr	r3, [r3, #0]
 8008592:	68da      	ldr	r2, [r3, #12]
 8008594:	68fb      	ldr	r3, [r7, #12]
 8008596:	681b      	ldr	r3, [r3, #0]
 8008598:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800859c:	60da      	str	r2, [r3, #12]
      break;
 800859e:	e06c      	b.n	800867a <HAL_TIM_IC_Start_DMA+0x2f2>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA capture callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMACaptureCplt;
 80085a0:	68fb      	ldr	r3, [r7, #12]
 80085a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80085a4:	4a3a      	ldr	r2, [pc, #232]	; (8008690 <HAL_TIM_IC_Start_DMA+0x308>)
 80085a6:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 80085a8:	68fb      	ldr	r3, [r7, #12]
 80085aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80085ac:	4a39      	ldr	r2, [pc, #228]	; (8008694 <HAL_TIM_IC_Start_DMA+0x30c>)
 80085ae:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 80085b0:	68fb      	ldr	r3, [r7, #12]
 80085b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80085b4:	4a38      	ldr	r2, [pc, #224]	; (8008698 <HAL_TIM_IC_Start_DMA+0x310>)
 80085b6:	631a      	str	r2, [r3, #48]	; 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)&htim->Instance->CCR2, (uint32_t)pData,
 80085b8:	68fb      	ldr	r3, [r7, #12]
 80085ba:	6a98      	ldr	r0, [r3, #40]	; 0x28
 80085bc:	68fb      	ldr	r3, [r7, #12]
 80085be:	681b      	ldr	r3, [r3, #0]
 80085c0:	3338      	adds	r3, #56	; 0x38
 80085c2:	4619      	mov	r1, r3
 80085c4:	687a      	ldr	r2, [r7, #4]
 80085c6:	887b      	ldrh	r3, [r7, #2]
 80085c8:	f7fd fe16 	bl	80061f8 <HAL_DMA_Start_IT>
 80085cc:	4603      	mov	r3, r0
 80085ce:	2b00      	cmp	r3, #0
 80085d0:	d001      	beq.n	80085d6 <HAL_TIM_IC_Start_DMA+0x24e>
                         Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80085d2:	2301      	movs	r3, #1
 80085d4:	e052      	b.n	800867c <HAL_TIM_IC_Start_DMA+0x2f4>
      }
      /* Enable the TIM Capture/Compare 2  DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 80085d6:	68fb      	ldr	r3, [r7, #12]
 80085d8:	681b      	ldr	r3, [r3, #0]
 80085da:	68da      	ldr	r2, [r3, #12]
 80085dc:	68fb      	ldr	r3, [r7, #12]
 80085de:	681b      	ldr	r3, [r3, #0]
 80085e0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80085e4:	60da      	str	r2, [r3, #12]
      break;
 80085e6:	e048      	b.n	800867a <HAL_TIM_IC_Start_DMA+0x2f2>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA capture callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMACaptureCplt;
 80085e8:	68fb      	ldr	r3, [r7, #12]
 80085ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80085ec:	4a28      	ldr	r2, [pc, #160]	; (8008690 <HAL_TIM_IC_Start_DMA+0x308>)
 80085ee:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 80085f0:	68fb      	ldr	r3, [r7, #12]
 80085f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80085f4:	4a27      	ldr	r2, [pc, #156]	; (8008694 <HAL_TIM_IC_Start_DMA+0x30c>)
 80085f6:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 80085f8:	68fb      	ldr	r3, [r7, #12]
 80085fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80085fc:	4a26      	ldr	r2, [pc, #152]	; (8008698 <HAL_TIM_IC_Start_DMA+0x310>)
 80085fe:	631a      	str	r2, [r3, #48]	; 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)&htim->Instance->CCR3, (uint32_t)pData,
 8008600:	68fb      	ldr	r3, [r7, #12]
 8008602:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8008604:	68fb      	ldr	r3, [r7, #12]
 8008606:	681b      	ldr	r3, [r3, #0]
 8008608:	333c      	adds	r3, #60	; 0x3c
 800860a:	4619      	mov	r1, r3
 800860c:	687a      	ldr	r2, [r7, #4]
 800860e:	887b      	ldrh	r3, [r7, #2]
 8008610:	f7fd fdf2 	bl	80061f8 <HAL_DMA_Start_IT>
 8008614:	4603      	mov	r3, r0
 8008616:	2b00      	cmp	r3, #0
 8008618:	d001      	beq.n	800861e <HAL_TIM_IC_Start_DMA+0x296>
                         Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800861a:	2301      	movs	r3, #1
 800861c:	e02e      	b.n	800867c <HAL_TIM_IC_Start_DMA+0x2f4>
      }
      /* Enable the TIM Capture/Compare 3  DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 800861e:	68fb      	ldr	r3, [r7, #12]
 8008620:	681b      	ldr	r3, [r3, #0]
 8008622:	68da      	ldr	r2, [r3, #12]
 8008624:	68fb      	ldr	r3, [r7, #12]
 8008626:	681b      	ldr	r3, [r3, #0]
 8008628:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800862c:	60da      	str	r2, [r3, #12]
      break;
 800862e:	e024      	b.n	800867a <HAL_TIM_IC_Start_DMA+0x2f2>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA capture callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMACaptureCplt;
 8008630:	68fb      	ldr	r3, [r7, #12]
 8008632:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008634:	4a16      	ldr	r2, [pc, #88]	; (8008690 <HAL_TIM_IC_Start_DMA+0x308>)
 8008636:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 8008638:	68fb      	ldr	r3, [r7, #12]
 800863a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800863c:	4a15      	ldr	r2, [pc, #84]	; (8008694 <HAL_TIM_IC_Start_DMA+0x30c>)
 800863e:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 8008640:	68fb      	ldr	r3, [r7, #12]
 8008642:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008644:	4a14      	ldr	r2, [pc, #80]	; (8008698 <HAL_TIM_IC_Start_DMA+0x310>)
 8008646:	631a      	str	r2, [r3, #48]	; 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)&htim->Instance->CCR4, (uint32_t)pData,
 8008648:	68fb      	ldr	r3, [r7, #12]
 800864a:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800864c:	68fb      	ldr	r3, [r7, #12]
 800864e:	681b      	ldr	r3, [r3, #0]
 8008650:	3340      	adds	r3, #64	; 0x40
 8008652:	4619      	mov	r1, r3
 8008654:	687a      	ldr	r2, [r7, #4]
 8008656:	887b      	ldrh	r3, [r7, #2]
 8008658:	f7fd fdce 	bl	80061f8 <HAL_DMA_Start_IT>
 800865c:	4603      	mov	r3, r0
 800865e:	2b00      	cmp	r3, #0
 8008660:	d001      	beq.n	8008666 <HAL_TIM_IC_Start_DMA+0x2de>
                         Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8008662:	2301      	movs	r3, #1
 8008664:	e00a      	b.n	800867c <HAL_TIM_IC_Start_DMA+0x2f4>
      }
      /* Enable the TIM Capture/Compare 4  DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 8008666:	68fb      	ldr	r3, [r7, #12]
 8008668:	681b      	ldr	r3, [r3, #0]
 800866a:	68da      	ldr	r2, [r3, #12]
 800866c:	68fb      	ldr	r3, [r7, #12]
 800866e:	681b      	ldr	r3, [r3, #0]
 8008670:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8008674:	60da      	str	r2, [r3, #12]
      break;
 8008676:	e000      	b.n	800867a <HAL_TIM_IC_Start_DMA+0x2f2>
    }

    default:
      break;
 8008678:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800867a:	2300      	movs	r3, #0
}
 800867c:	4618      	mov	r0, r3
 800867e:	3718      	adds	r7, #24
 8008680:	46bd      	mov	sp, r7
 8008682:	bd80      	pop	{r7, pc}
 8008684:	40012c00 	.word	0x40012c00
 8008688:	40000400 	.word	0x40000400
 800868c:	40000800 	.word	0x40000800
 8008690:	08008fc9 	.word	0x08008fc9
 8008694:	08009091 	.word	0x08009091
 8008698:	08008f37 	.word	0x08008f37

0800869c <HAL_TIM_IC_Stop_DMA>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800869c:	b580      	push	{r7, lr}
 800869e:	b082      	sub	sp, #8
 80086a0:	af00      	add	r7, sp, #0
 80086a2:	6078      	str	r0, [r7, #4]
 80086a4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
  assert_param(IS_TIM_DMA_CC_INSTANCE(htim->Instance));

  /* Disable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	681b      	ldr	r3, [r3, #0]
 80086aa:	2200      	movs	r2, #0
 80086ac:	6839      	ldr	r1, [r7, #0]
 80086ae:	4618      	mov	r0, r3
 80086b0:	f001 f93d 	bl	800992e <TIM_CCxChannelCmd>
 80086b4:	683b      	ldr	r3, [r7, #0]
 80086b6:	2b0c      	cmp	r3, #12
 80086b8:	d854      	bhi.n	8008764 <HAL_TIM_IC_Stop_DMA+0xc8>
 80086ba:	a201      	add	r2, pc, #4	; (adr r2, 80086c0 <HAL_TIM_IC_Stop_DMA+0x24>)
 80086bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80086c0:	080086f5 	.word	0x080086f5
 80086c4:	08008765 	.word	0x08008765
 80086c8:	08008765 	.word	0x08008765
 80086cc:	08008765 	.word	0x08008765
 80086d0:	08008711 	.word	0x08008711
 80086d4:	08008765 	.word	0x08008765
 80086d8:	08008765 	.word	0x08008765
 80086dc:	08008765 	.word	0x08008765
 80086e0:	0800872d 	.word	0x0800872d
 80086e4:	08008765 	.word	0x08008765
 80086e8:	08008765 	.word	0x08008765
 80086ec:	08008765 	.word	0x08008765
 80086f0:	08008749 	.word	0x08008749
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	681b      	ldr	r3, [r3, #0]
 80086f8:	68da      	ldr	r2, [r3, #12]
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	681b      	ldr	r3, [r3, #0]
 80086fe:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8008702:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008708:	4618      	mov	r0, r3
 800870a:	f7fd fdd5 	bl	80062b8 <HAL_DMA_Abort_IT>
      break;
 800870e:	e02a      	b.n	8008766 <HAL_TIM_IC_Stop_DMA+0xca>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	681b      	ldr	r3, [r3, #0]
 8008714:	68da      	ldr	r2, [r3, #12]
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	681b      	ldr	r3, [r3, #0]
 800871a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800871e:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008724:	4618      	mov	r0, r3
 8008726:	f7fd fdc7 	bl	80062b8 <HAL_DMA_Abort_IT>
      break;
 800872a:	e01c      	b.n	8008766 <HAL_TIM_IC_Stop_DMA+0xca>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3  DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	681b      	ldr	r3, [r3, #0]
 8008730:	68da      	ldr	r2, [r3, #12]
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	681b      	ldr	r3, [r3, #0]
 8008736:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800873a:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008740:	4618      	mov	r0, r3
 8008742:	f7fd fdb9 	bl	80062b8 <HAL_DMA_Abort_IT>
      break;
 8008746:	e00e      	b.n	8008766 <HAL_TIM_IC_Stop_DMA+0xca>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4  DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	681b      	ldr	r3, [r3, #0]
 800874c:	68da      	ldr	r2, [r3, #12]
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	681b      	ldr	r3, [r3, #0]
 8008752:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8008756:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800875c:	4618      	mov	r0, r3
 800875e:	f7fd fdab 	bl	80062b8 <HAL_DMA_Abort_IT>
      break;
 8008762:	e000      	b.n	8008766 <HAL_TIM_IC_Stop_DMA+0xca>
    }

    default:
      break;
 8008764:	bf00      	nop
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	681b      	ldr	r3, [r3, #0]
 800876a:	6a1a      	ldr	r2, [r3, #32]
 800876c:	f241 1311 	movw	r3, #4369	; 0x1111
 8008770:	4013      	ands	r3, r2
 8008772:	2b00      	cmp	r3, #0
 8008774:	d10f      	bne.n	8008796 <HAL_TIM_IC_Stop_DMA+0xfa>
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	681b      	ldr	r3, [r3, #0]
 800877a:	6a1a      	ldr	r2, [r3, #32]
 800877c:	f240 4344 	movw	r3, #1092	; 0x444
 8008780:	4013      	ands	r3, r2
 8008782:	2b00      	cmp	r3, #0
 8008784:	d107      	bne.n	8008796 <HAL_TIM_IC_Stop_DMA+0xfa>
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	681b      	ldr	r3, [r3, #0]
 800878a:	681a      	ldr	r2, [r3, #0]
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	681b      	ldr	r3, [r3, #0]
 8008790:	f022 0201 	bic.w	r2, r2, #1
 8008794:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8008796:	683b      	ldr	r3, [r7, #0]
 8008798:	2b00      	cmp	r3, #0
 800879a:	d104      	bne.n	80087a6 <HAL_TIM_IC_Stop_DMA+0x10a>
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	2201      	movs	r2, #1
 80087a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80087a4:	e013      	b.n	80087ce <HAL_TIM_IC_Stop_DMA+0x132>
 80087a6:	683b      	ldr	r3, [r7, #0]
 80087a8:	2b04      	cmp	r3, #4
 80087aa:	d104      	bne.n	80087b6 <HAL_TIM_IC_Stop_DMA+0x11a>
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	2201      	movs	r2, #1
 80087b0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80087b4:	e00b      	b.n	80087ce <HAL_TIM_IC_Stop_DMA+0x132>
 80087b6:	683b      	ldr	r3, [r7, #0]
 80087b8:	2b08      	cmp	r3, #8
 80087ba:	d104      	bne.n	80087c6 <HAL_TIM_IC_Stop_DMA+0x12a>
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	2201      	movs	r2, #1
 80087c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80087c4:	e003      	b.n	80087ce <HAL_TIM_IC_Stop_DMA+0x132>
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	2201      	movs	r2, #1
 80087ca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80087ce:	683b      	ldr	r3, [r7, #0]
 80087d0:	2b00      	cmp	r3, #0
 80087d2:	d104      	bne.n	80087de <HAL_TIM_IC_Stop_DMA+0x142>
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	2201      	movs	r2, #1
 80087d8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80087dc:	e013      	b.n	8008806 <HAL_TIM_IC_Stop_DMA+0x16a>
 80087de:	683b      	ldr	r3, [r7, #0]
 80087e0:	2b04      	cmp	r3, #4
 80087e2:	d104      	bne.n	80087ee <HAL_TIM_IC_Stop_DMA+0x152>
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	2201      	movs	r2, #1
 80087e8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80087ec:	e00b      	b.n	8008806 <HAL_TIM_IC_Stop_DMA+0x16a>
 80087ee:	683b      	ldr	r3, [r7, #0]
 80087f0:	2b08      	cmp	r3, #8
 80087f2:	d104      	bne.n	80087fe <HAL_TIM_IC_Stop_DMA+0x162>
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	2201      	movs	r2, #1
 80087f8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80087fc:	e003      	b.n	8008806 <HAL_TIM_IC_Stop_DMA+0x16a>
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	2201      	movs	r2, #1
 8008802:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Return function status */
  return HAL_OK;
 8008806:	2300      	movs	r3, #0
}
 8008808:	4618      	mov	r0, r3
 800880a:	3708      	adds	r7, #8
 800880c:	46bd      	mov	sp, r7
 800880e:	bd80      	pop	{r7, pc}

08008810 <HAL_TIM_OnePulse_Init>:
  *            @arg TIM_OPMODE_SINGLE: Only one pulse will be generated.
  *            @arg TIM_OPMODE_REPETITIVE: Repetitive pulses will be generated.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Init(TIM_HandleTypeDef *htim, uint32_t OnePulseMode)
{
 8008810:	b580      	push	{r7, lr}
 8008812:	b082      	sub	sp, #8
 8008814:	af00      	add	r7, sp, #0
 8008816:	6078      	str	r0, [r7, #4]
 8008818:	6039      	str	r1, [r7, #0]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	2b00      	cmp	r3, #0
 800881e:	d101      	bne.n	8008824 <HAL_TIM_OnePulse_Init+0x14>
  {
    return HAL_ERROR;
 8008820:	2301      	movs	r3, #1
 8008822:	e041      	b.n	80088a8 <HAL_TIM_OnePulse_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_OPM_MODE(OnePulseMode));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800882a:	b2db      	uxtb	r3, r3
 800882c:	2b00      	cmp	r3, #0
 800882e:	d106      	bne.n	800883e <HAL_TIM_OnePulse_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	2200      	movs	r2, #0
 8008834:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OnePulse_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OnePulse_MspInit(htim);
 8008838:	6878      	ldr	r0, [r7, #4]
 800883a:	f000 f839 	bl	80088b0 <HAL_TIM_OnePulse_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	2202      	movs	r2, #2
 8008842:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Configure the Time base in the One Pulse Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	681a      	ldr	r2, [r3, #0]
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	3304      	adds	r3, #4
 800884e:	4619      	mov	r1, r3
 8008850:	4610      	mov	r0, r2
 8008852:	f000 fc51 	bl	80090f8 <TIM_Base_SetConfig>

  /* Reset the OPM Bit */
  htim->Instance->CR1 &= ~TIM_CR1_OPM;
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	681b      	ldr	r3, [r3, #0]
 800885a:	681a      	ldr	r2, [r3, #0]
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	681b      	ldr	r3, [r3, #0]
 8008860:	f022 0208 	bic.w	r2, r2, #8
 8008864:	601a      	str	r2, [r3, #0]

  /* Configure the OPM Mode */
  htim->Instance->CR1 |= OnePulseMode;
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	681b      	ldr	r3, [r3, #0]
 800886a:	6819      	ldr	r1, [r3, #0]
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	681b      	ldr	r3, [r3, #0]
 8008870:	683a      	ldr	r2, [r7, #0]
 8008872:	430a      	orrs	r2, r1
 8008874:	601a      	str	r2, [r3, #0]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	2201      	movs	r2, #1
 800887a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	2201      	movs	r2, #1
 8008882:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	2201      	movs	r2, #1
 800888a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	2201      	movs	r2, #1
 8008892:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	2201      	movs	r2, #1
 800889a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	2201      	movs	r2, #1
 80088a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80088a6:	2300      	movs	r3, #0
}
 80088a8:	4618      	mov	r0, r3
 80088aa:	3708      	adds	r7, #8
 80088ac:	46bd      	mov	sp, r7
 80088ae:	bd80      	pop	{r7, pc}

080088b0 <HAL_TIM_OnePulse_MspInit>:
  * @brief  Initializes the TIM One Pulse MSP.
  * @param  htim TIM One Pulse handle
  * @retval None
  */
__weak void HAL_TIM_OnePulse_MspInit(TIM_HandleTypeDef *htim)
{
 80088b0:	b480      	push	{r7}
 80088b2:	b083      	sub	sp, #12
 80088b4:	af00      	add	r7, sp, #0
 80088b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OnePulse_MspInit could be implemented in the user file
   */
}
 80088b8:	bf00      	nop
 80088ba:	370c      	adds	r7, #12
 80088bc:	46bd      	mov	sp, r7
 80088be:	bc80      	pop	{r7}
 80088c0:	4770      	bx	lr

080088c2 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80088c2:	b580      	push	{r7, lr}
 80088c4:	b082      	sub	sp, #8
 80088c6:	af00      	add	r7, sp, #0
 80088c8:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	681b      	ldr	r3, [r3, #0]
 80088ce:	691b      	ldr	r3, [r3, #16]
 80088d0:	f003 0302 	and.w	r3, r3, #2
 80088d4:	2b02      	cmp	r3, #2
 80088d6:	d122      	bne.n	800891e <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	681b      	ldr	r3, [r3, #0]
 80088dc:	68db      	ldr	r3, [r3, #12]
 80088de:	f003 0302 	and.w	r3, r3, #2
 80088e2:	2b02      	cmp	r3, #2
 80088e4:	d11b      	bne.n	800891e <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	681b      	ldr	r3, [r3, #0]
 80088ea:	f06f 0202 	mvn.w	r2, #2
 80088ee:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	2201      	movs	r2, #1
 80088f4:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	681b      	ldr	r3, [r3, #0]
 80088fa:	699b      	ldr	r3, [r3, #24]
 80088fc:	f003 0303 	and.w	r3, r3, #3
 8008900:	2b00      	cmp	r3, #0
 8008902:	d003      	beq.n	800890c <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008904:	6878      	ldr	r0, [r7, #4]
 8008906:	f000 fae9 	bl	8008edc <HAL_TIM_IC_CaptureCallback>
 800890a:	e005      	b.n	8008918 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800890c:	6878      	ldr	r0, [r7, #4]
 800890e:	f000 fadc 	bl	8008eca <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008912:	6878      	ldr	r0, [r7, #4]
 8008914:	f000 faf4 	bl	8008f00 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	2200      	movs	r2, #0
 800891c:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	681b      	ldr	r3, [r3, #0]
 8008922:	691b      	ldr	r3, [r3, #16]
 8008924:	f003 0304 	and.w	r3, r3, #4
 8008928:	2b04      	cmp	r3, #4
 800892a:	d122      	bne.n	8008972 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	681b      	ldr	r3, [r3, #0]
 8008930:	68db      	ldr	r3, [r3, #12]
 8008932:	f003 0304 	and.w	r3, r3, #4
 8008936:	2b04      	cmp	r3, #4
 8008938:	d11b      	bne.n	8008972 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	681b      	ldr	r3, [r3, #0]
 800893e:	f06f 0204 	mvn.w	r2, #4
 8008942:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	2202      	movs	r2, #2
 8008948:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	681b      	ldr	r3, [r3, #0]
 800894e:	699b      	ldr	r3, [r3, #24]
 8008950:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008954:	2b00      	cmp	r3, #0
 8008956:	d003      	beq.n	8008960 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008958:	6878      	ldr	r0, [r7, #4]
 800895a:	f000 fabf 	bl	8008edc <HAL_TIM_IC_CaptureCallback>
 800895e:	e005      	b.n	800896c <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008960:	6878      	ldr	r0, [r7, #4]
 8008962:	f000 fab2 	bl	8008eca <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008966:	6878      	ldr	r0, [r7, #4]
 8008968:	f000 faca 	bl	8008f00 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	2200      	movs	r2, #0
 8008970:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	681b      	ldr	r3, [r3, #0]
 8008976:	691b      	ldr	r3, [r3, #16]
 8008978:	f003 0308 	and.w	r3, r3, #8
 800897c:	2b08      	cmp	r3, #8
 800897e:	d122      	bne.n	80089c6 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	681b      	ldr	r3, [r3, #0]
 8008984:	68db      	ldr	r3, [r3, #12]
 8008986:	f003 0308 	and.w	r3, r3, #8
 800898a:	2b08      	cmp	r3, #8
 800898c:	d11b      	bne.n	80089c6 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	681b      	ldr	r3, [r3, #0]
 8008992:	f06f 0208 	mvn.w	r2, #8
 8008996:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	2204      	movs	r2, #4
 800899c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	681b      	ldr	r3, [r3, #0]
 80089a2:	69db      	ldr	r3, [r3, #28]
 80089a4:	f003 0303 	and.w	r3, r3, #3
 80089a8:	2b00      	cmp	r3, #0
 80089aa:	d003      	beq.n	80089b4 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80089ac:	6878      	ldr	r0, [r7, #4]
 80089ae:	f000 fa95 	bl	8008edc <HAL_TIM_IC_CaptureCallback>
 80089b2:	e005      	b.n	80089c0 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80089b4:	6878      	ldr	r0, [r7, #4]
 80089b6:	f000 fa88 	bl	8008eca <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80089ba:	6878      	ldr	r0, [r7, #4]
 80089bc:	f000 faa0 	bl	8008f00 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	2200      	movs	r2, #0
 80089c4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	681b      	ldr	r3, [r3, #0]
 80089ca:	691b      	ldr	r3, [r3, #16]
 80089cc:	f003 0310 	and.w	r3, r3, #16
 80089d0:	2b10      	cmp	r3, #16
 80089d2:	d122      	bne.n	8008a1a <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	681b      	ldr	r3, [r3, #0]
 80089d8:	68db      	ldr	r3, [r3, #12]
 80089da:	f003 0310 	and.w	r3, r3, #16
 80089de:	2b10      	cmp	r3, #16
 80089e0:	d11b      	bne.n	8008a1a <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	681b      	ldr	r3, [r3, #0]
 80089e6:	f06f 0210 	mvn.w	r2, #16
 80089ea:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	2208      	movs	r2, #8
 80089f0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	681b      	ldr	r3, [r3, #0]
 80089f6:	69db      	ldr	r3, [r3, #28]
 80089f8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80089fc:	2b00      	cmp	r3, #0
 80089fe:	d003      	beq.n	8008a08 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008a00:	6878      	ldr	r0, [r7, #4]
 8008a02:	f000 fa6b 	bl	8008edc <HAL_TIM_IC_CaptureCallback>
 8008a06:	e005      	b.n	8008a14 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008a08:	6878      	ldr	r0, [r7, #4]
 8008a0a:	f000 fa5e 	bl	8008eca <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008a0e:	6878      	ldr	r0, [r7, #4]
 8008a10:	f000 fa76 	bl	8008f00 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	2200      	movs	r2, #0
 8008a18:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	681b      	ldr	r3, [r3, #0]
 8008a1e:	691b      	ldr	r3, [r3, #16]
 8008a20:	f003 0301 	and.w	r3, r3, #1
 8008a24:	2b01      	cmp	r3, #1
 8008a26:	d10e      	bne.n	8008a46 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	681b      	ldr	r3, [r3, #0]
 8008a2c:	68db      	ldr	r3, [r3, #12]
 8008a2e:	f003 0301 	and.w	r3, r3, #1
 8008a32:	2b01      	cmp	r3, #1
 8008a34:	d107      	bne.n	8008a46 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	681b      	ldr	r3, [r3, #0]
 8008a3a:	f06f 0201 	mvn.w	r2, #1
 8008a3e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8008a40:	6878      	ldr	r0, [r7, #4]
 8008a42:	f000 fa39 	bl	8008eb8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	681b      	ldr	r3, [r3, #0]
 8008a4a:	691b      	ldr	r3, [r3, #16]
 8008a4c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008a50:	2b80      	cmp	r3, #128	; 0x80
 8008a52:	d10e      	bne.n	8008a72 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	681b      	ldr	r3, [r3, #0]
 8008a58:	68db      	ldr	r3, [r3, #12]
 8008a5a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008a5e:	2b80      	cmp	r3, #128	; 0x80
 8008a60:	d107      	bne.n	8008a72 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	681b      	ldr	r3, [r3, #0]
 8008a66:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8008a6a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008a6c:	6878      	ldr	r0, [r7, #4]
 8008a6e:	f001 f83b 	bl	8009ae8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	681b      	ldr	r3, [r3, #0]
 8008a76:	691b      	ldr	r3, [r3, #16]
 8008a78:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008a7c:	2b40      	cmp	r3, #64	; 0x40
 8008a7e:	d10e      	bne.n	8008a9e <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	681b      	ldr	r3, [r3, #0]
 8008a84:	68db      	ldr	r3, [r3, #12]
 8008a86:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008a8a:	2b40      	cmp	r3, #64	; 0x40
 8008a8c:	d107      	bne.n	8008a9e <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	681b      	ldr	r3, [r3, #0]
 8008a92:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8008a96:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008a98:	6878      	ldr	r0, [r7, #4]
 8008a9a:	f000 fa3a 	bl	8008f12 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	681b      	ldr	r3, [r3, #0]
 8008aa2:	691b      	ldr	r3, [r3, #16]
 8008aa4:	f003 0320 	and.w	r3, r3, #32
 8008aa8:	2b20      	cmp	r3, #32
 8008aaa:	d10e      	bne.n	8008aca <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	681b      	ldr	r3, [r3, #0]
 8008ab0:	68db      	ldr	r3, [r3, #12]
 8008ab2:	f003 0320 	and.w	r3, r3, #32
 8008ab6:	2b20      	cmp	r3, #32
 8008ab8:	d107      	bne.n	8008aca <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	681b      	ldr	r3, [r3, #0]
 8008abe:	f06f 0220 	mvn.w	r2, #32
 8008ac2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008ac4:	6878      	ldr	r0, [r7, #4]
 8008ac6:	f001 f806 	bl	8009ad6 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008aca:	bf00      	nop
 8008acc:	3708      	adds	r7, #8
 8008ace:	46bd      	mov	sp, r7
 8008ad0:	bd80      	pop	{r7, pc}
	...

08008ad4 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8008ad4:	b580      	push	{r7, lr}
 8008ad6:	b084      	sub	sp, #16
 8008ad8:	af00      	add	r7, sp, #0
 8008ada:	60f8      	str	r0, [r7, #12]
 8008adc:	60b9      	str	r1, [r7, #8]
 8008ade:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8008ae0:	68fb      	ldr	r3, [r7, #12]
 8008ae2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008ae6:	2b01      	cmp	r3, #1
 8008ae8:	d101      	bne.n	8008aee <HAL_TIM_OC_ConfigChannel+0x1a>
 8008aea:	2302      	movs	r3, #2
 8008aec:	e046      	b.n	8008b7c <HAL_TIM_OC_ConfigChannel+0xa8>
 8008aee:	68fb      	ldr	r3, [r7, #12]
 8008af0:	2201      	movs	r2, #1
 8008af2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	2b0c      	cmp	r3, #12
 8008afa:	d839      	bhi.n	8008b70 <HAL_TIM_OC_ConfigChannel+0x9c>
 8008afc:	a201      	add	r2, pc, #4	; (adr r2, 8008b04 <HAL_TIM_OC_ConfigChannel+0x30>)
 8008afe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b02:	bf00      	nop
 8008b04:	08008b39 	.word	0x08008b39
 8008b08:	08008b71 	.word	0x08008b71
 8008b0c:	08008b71 	.word	0x08008b71
 8008b10:	08008b71 	.word	0x08008b71
 8008b14:	08008b47 	.word	0x08008b47
 8008b18:	08008b71 	.word	0x08008b71
 8008b1c:	08008b71 	.word	0x08008b71
 8008b20:	08008b71 	.word	0x08008b71
 8008b24:	08008b55 	.word	0x08008b55
 8008b28:	08008b71 	.word	0x08008b71
 8008b2c:	08008b71 	.word	0x08008b71
 8008b30:	08008b71 	.word	0x08008b71
 8008b34:	08008b63 	.word	0x08008b63
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8008b38:	68fb      	ldr	r3, [r7, #12]
 8008b3a:	681b      	ldr	r3, [r3, #0]
 8008b3c:	68b9      	ldr	r1, [r7, #8]
 8008b3e:	4618      	mov	r0, r3
 8008b40:	f000 fb3c 	bl	80091bc <TIM_OC1_SetConfig>
      break;
 8008b44:	e015      	b.n	8008b72 <HAL_TIM_OC_ConfigChannel+0x9e>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8008b46:	68fb      	ldr	r3, [r7, #12]
 8008b48:	681b      	ldr	r3, [r3, #0]
 8008b4a:	68b9      	ldr	r1, [r7, #8]
 8008b4c:	4618      	mov	r0, r3
 8008b4e:	f000 fb9b 	bl	8009288 <TIM_OC2_SetConfig>
      break;
 8008b52:	e00e      	b.n	8008b72 <HAL_TIM_OC_ConfigChannel+0x9e>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8008b54:	68fb      	ldr	r3, [r7, #12]
 8008b56:	681b      	ldr	r3, [r3, #0]
 8008b58:	68b9      	ldr	r1, [r7, #8]
 8008b5a:	4618      	mov	r0, r3
 8008b5c:	f000 fbfe 	bl	800935c <TIM_OC3_SetConfig>
      break;
 8008b60:	e007      	b.n	8008b72 <HAL_TIM_OC_ConfigChannel+0x9e>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8008b62:	68fb      	ldr	r3, [r7, #12]
 8008b64:	681b      	ldr	r3, [r3, #0]
 8008b66:	68b9      	ldr	r1, [r7, #8]
 8008b68:	4618      	mov	r0, r3
 8008b6a:	f000 fc61 	bl	8009430 <TIM_OC4_SetConfig>
      break;
 8008b6e:	e000      	b.n	8008b72 <HAL_TIM_OC_ConfigChannel+0x9e>
    }

    default:
      break;
 8008b70:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8008b72:	68fb      	ldr	r3, [r7, #12]
 8008b74:	2200      	movs	r2, #0
 8008b76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008b7a:	2300      	movs	r3, #0
}
 8008b7c:	4618      	mov	r0, r3
 8008b7e:	3710      	adds	r7, #16
 8008b80:	46bd      	mov	sp, r7
 8008b82:	bd80      	pop	{r7, pc}

08008b84 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8008b84:	b580      	push	{r7, lr}
 8008b86:	b084      	sub	sp, #16
 8008b88:	af00      	add	r7, sp, #0
 8008b8a:	60f8      	str	r0, [r7, #12]
 8008b8c:	60b9      	str	r1, [r7, #8]
 8008b8e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8008b90:	68fb      	ldr	r3, [r7, #12]
 8008b92:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008b96:	2b01      	cmp	r3, #1
 8008b98:	d101      	bne.n	8008b9e <HAL_TIM_IC_ConfigChannel+0x1a>
 8008b9a:	2302      	movs	r3, #2
 8008b9c:	e082      	b.n	8008ca4 <HAL_TIM_IC_ConfigChannel+0x120>
 8008b9e:	68fb      	ldr	r3, [r7, #12]
 8008ba0:	2201      	movs	r2, #1
 8008ba2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	2b00      	cmp	r3, #0
 8008baa:	d11b      	bne.n	8008be4 <HAL_TIM_IC_ConfigChannel+0x60>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8008bac:	68fb      	ldr	r3, [r7, #12]
 8008bae:	6818      	ldr	r0, [r3, #0]
 8008bb0:	68bb      	ldr	r3, [r7, #8]
 8008bb2:	6819      	ldr	r1, [r3, #0]
 8008bb4:	68bb      	ldr	r3, [r7, #8]
 8008bb6:	685a      	ldr	r2, [r3, #4]
 8008bb8:	68bb      	ldr	r3, [r7, #8]
 8008bba:	68db      	ldr	r3, [r3, #12]
 8008bbc:	f000 fd14 	bl	80095e8 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8008bc0:	68fb      	ldr	r3, [r7, #12]
 8008bc2:	681b      	ldr	r3, [r3, #0]
 8008bc4:	699a      	ldr	r2, [r3, #24]
 8008bc6:	68fb      	ldr	r3, [r7, #12]
 8008bc8:	681b      	ldr	r3, [r3, #0]
 8008bca:	f022 020c 	bic.w	r2, r2, #12
 8008bce:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8008bd0:	68fb      	ldr	r3, [r7, #12]
 8008bd2:	681b      	ldr	r3, [r3, #0]
 8008bd4:	6999      	ldr	r1, [r3, #24]
 8008bd6:	68bb      	ldr	r3, [r7, #8]
 8008bd8:	689a      	ldr	r2, [r3, #8]
 8008bda:	68fb      	ldr	r3, [r7, #12]
 8008bdc:	681b      	ldr	r3, [r3, #0]
 8008bde:	430a      	orrs	r2, r1
 8008be0:	619a      	str	r2, [r3, #24]
 8008be2:	e05a      	b.n	8008c9a <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_2)
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	2b04      	cmp	r3, #4
 8008be8:	d11c      	bne.n	8008c24 <HAL_TIM_IC_ConfigChannel+0xa0>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8008bea:	68fb      	ldr	r3, [r7, #12]
 8008bec:	6818      	ldr	r0, [r3, #0]
 8008bee:	68bb      	ldr	r3, [r7, #8]
 8008bf0:	6819      	ldr	r1, [r3, #0]
 8008bf2:	68bb      	ldr	r3, [r7, #8]
 8008bf4:	685a      	ldr	r2, [r3, #4]
 8008bf6:	68bb      	ldr	r3, [r7, #8]
 8008bf8:	68db      	ldr	r3, [r3, #12]
 8008bfa:	f000 fd7d 	bl	80096f8 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8008bfe:	68fb      	ldr	r3, [r7, #12]
 8008c00:	681b      	ldr	r3, [r3, #0]
 8008c02:	699a      	ldr	r2, [r3, #24]
 8008c04:	68fb      	ldr	r3, [r7, #12]
 8008c06:	681b      	ldr	r3, [r3, #0]
 8008c08:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8008c0c:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8008c0e:	68fb      	ldr	r3, [r7, #12]
 8008c10:	681b      	ldr	r3, [r3, #0]
 8008c12:	6999      	ldr	r1, [r3, #24]
 8008c14:	68bb      	ldr	r3, [r7, #8]
 8008c16:	689b      	ldr	r3, [r3, #8]
 8008c18:	021a      	lsls	r2, r3, #8
 8008c1a:	68fb      	ldr	r3, [r7, #12]
 8008c1c:	681b      	ldr	r3, [r3, #0]
 8008c1e:	430a      	orrs	r2, r1
 8008c20:	619a      	str	r2, [r3, #24]
 8008c22:	e03a      	b.n	8008c9a <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_3)
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	2b08      	cmp	r3, #8
 8008c28:	d11b      	bne.n	8008c62 <HAL_TIM_IC_ConfigChannel+0xde>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8008c2a:	68fb      	ldr	r3, [r7, #12]
 8008c2c:	6818      	ldr	r0, [r3, #0]
 8008c2e:	68bb      	ldr	r3, [r7, #8]
 8008c30:	6819      	ldr	r1, [r3, #0]
 8008c32:	68bb      	ldr	r3, [r7, #8]
 8008c34:	685a      	ldr	r2, [r3, #4]
 8008c36:	68bb      	ldr	r3, [r7, #8]
 8008c38:	68db      	ldr	r3, [r3, #12]
 8008c3a:	f000 fdc8 	bl	80097ce <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8008c3e:	68fb      	ldr	r3, [r7, #12]
 8008c40:	681b      	ldr	r3, [r3, #0]
 8008c42:	69da      	ldr	r2, [r3, #28]
 8008c44:	68fb      	ldr	r3, [r7, #12]
 8008c46:	681b      	ldr	r3, [r3, #0]
 8008c48:	f022 020c 	bic.w	r2, r2, #12
 8008c4c:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8008c4e:	68fb      	ldr	r3, [r7, #12]
 8008c50:	681b      	ldr	r3, [r3, #0]
 8008c52:	69d9      	ldr	r1, [r3, #28]
 8008c54:	68bb      	ldr	r3, [r7, #8]
 8008c56:	689a      	ldr	r2, [r3, #8]
 8008c58:	68fb      	ldr	r3, [r7, #12]
 8008c5a:	681b      	ldr	r3, [r3, #0]
 8008c5c:	430a      	orrs	r2, r1
 8008c5e:	61da      	str	r2, [r3, #28]
 8008c60:	e01b      	b.n	8008c9a <HAL_TIM_IC_ConfigChannel+0x116>
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8008c62:	68fb      	ldr	r3, [r7, #12]
 8008c64:	6818      	ldr	r0, [r3, #0]
 8008c66:	68bb      	ldr	r3, [r7, #8]
 8008c68:	6819      	ldr	r1, [r3, #0]
 8008c6a:	68bb      	ldr	r3, [r7, #8]
 8008c6c:	685a      	ldr	r2, [r3, #4]
 8008c6e:	68bb      	ldr	r3, [r7, #8]
 8008c70:	68db      	ldr	r3, [r3, #12]
 8008c72:	f000 fde7 	bl	8009844 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8008c76:	68fb      	ldr	r3, [r7, #12]
 8008c78:	681b      	ldr	r3, [r3, #0]
 8008c7a:	69da      	ldr	r2, [r3, #28]
 8008c7c:	68fb      	ldr	r3, [r7, #12]
 8008c7e:	681b      	ldr	r3, [r3, #0]
 8008c80:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8008c84:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8008c86:	68fb      	ldr	r3, [r7, #12]
 8008c88:	681b      	ldr	r3, [r3, #0]
 8008c8a:	69d9      	ldr	r1, [r3, #28]
 8008c8c:	68bb      	ldr	r3, [r7, #8]
 8008c8e:	689b      	ldr	r3, [r3, #8]
 8008c90:	021a      	lsls	r2, r3, #8
 8008c92:	68fb      	ldr	r3, [r7, #12]
 8008c94:	681b      	ldr	r3, [r3, #0]
 8008c96:	430a      	orrs	r2, r1
 8008c98:	61da      	str	r2, [r3, #28]
  }

  __HAL_UNLOCK(htim);
 8008c9a:	68fb      	ldr	r3, [r7, #12]
 8008c9c:	2200      	movs	r2, #0
 8008c9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008ca2:	2300      	movs	r3, #0
}
 8008ca4:	4618      	mov	r0, r3
 8008ca6:	3710      	adds	r7, #16
 8008ca8:	46bd      	mov	sp, r7
 8008caa:	bd80      	pop	{r7, pc}

08008cac <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8008cac:	b580      	push	{r7, lr}
 8008cae:	b084      	sub	sp, #16
 8008cb0:	af00      	add	r7, sp, #0
 8008cb2:	6078      	str	r0, [r7, #4]
 8008cb4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008cbc:	2b01      	cmp	r3, #1
 8008cbe:	d101      	bne.n	8008cc4 <HAL_TIM_ConfigClockSource+0x18>
 8008cc0:	2302      	movs	r3, #2
 8008cc2:	e0b3      	b.n	8008e2c <HAL_TIM_ConfigClockSource+0x180>
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	2201      	movs	r2, #1
 8008cc8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	2202      	movs	r2, #2
 8008cd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	681b      	ldr	r3, [r3, #0]
 8008cd8:	689b      	ldr	r3, [r3, #8]
 8008cda:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8008cdc:	68fb      	ldr	r3, [r7, #12]
 8008cde:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8008ce2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008ce4:	68fb      	ldr	r3, [r7, #12]
 8008ce6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008cea:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	681b      	ldr	r3, [r3, #0]
 8008cf0:	68fa      	ldr	r2, [r7, #12]
 8008cf2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8008cf4:	683b      	ldr	r3, [r7, #0]
 8008cf6:	681b      	ldr	r3, [r3, #0]
 8008cf8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008cfc:	d03e      	beq.n	8008d7c <HAL_TIM_ConfigClockSource+0xd0>
 8008cfe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008d02:	f200 8087 	bhi.w	8008e14 <HAL_TIM_ConfigClockSource+0x168>
 8008d06:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008d0a:	f000 8085 	beq.w	8008e18 <HAL_TIM_ConfigClockSource+0x16c>
 8008d0e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008d12:	d87f      	bhi.n	8008e14 <HAL_TIM_ConfigClockSource+0x168>
 8008d14:	2b70      	cmp	r3, #112	; 0x70
 8008d16:	d01a      	beq.n	8008d4e <HAL_TIM_ConfigClockSource+0xa2>
 8008d18:	2b70      	cmp	r3, #112	; 0x70
 8008d1a:	d87b      	bhi.n	8008e14 <HAL_TIM_ConfigClockSource+0x168>
 8008d1c:	2b60      	cmp	r3, #96	; 0x60
 8008d1e:	d050      	beq.n	8008dc2 <HAL_TIM_ConfigClockSource+0x116>
 8008d20:	2b60      	cmp	r3, #96	; 0x60
 8008d22:	d877      	bhi.n	8008e14 <HAL_TIM_ConfigClockSource+0x168>
 8008d24:	2b50      	cmp	r3, #80	; 0x50
 8008d26:	d03c      	beq.n	8008da2 <HAL_TIM_ConfigClockSource+0xf6>
 8008d28:	2b50      	cmp	r3, #80	; 0x50
 8008d2a:	d873      	bhi.n	8008e14 <HAL_TIM_ConfigClockSource+0x168>
 8008d2c:	2b40      	cmp	r3, #64	; 0x40
 8008d2e:	d058      	beq.n	8008de2 <HAL_TIM_ConfigClockSource+0x136>
 8008d30:	2b40      	cmp	r3, #64	; 0x40
 8008d32:	d86f      	bhi.n	8008e14 <HAL_TIM_ConfigClockSource+0x168>
 8008d34:	2b30      	cmp	r3, #48	; 0x30
 8008d36:	d064      	beq.n	8008e02 <HAL_TIM_ConfigClockSource+0x156>
 8008d38:	2b30      	cmp	r3, #48	; 0x30
 8008d3a:	d86b      	bhi.n	8008e14 <HAL_TIM_ConfigClockSource+0x168>
 8008d3c:	2b20      	cmp	r3, #32
 8008d3e:	d060      	beq.n	8008e02 <HAL_TIM_ConfigClockSource+0x156>
 8008d40:	2b20      	cmp	r3, #32
 8008d42:	d867      	bhi.n	8008e14 <HAL_TIM_ConfigClockSource+0x168>
 8008d44:	2b00      	cmp	r3, #0
 8008d46:	d05c      	beq.n	8008e02 <HAL_TIM_ConfigClockSource+0x156>
 8008d48:	2b10      	cmp	r3, #16
 8008d4a:	d05a      	beq.n	8008e02 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8008d4c:	e062      	b.n	8008e14 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	6818      	ldr	r0, [r3, #0]
 8008d52:	683b      	ldr	r3, [r7, #0]
 8008d54:	6899      	ldr	r1, [r3, #8]
 8008d56:	683b      	ldr	r3, [r7, #0]
 8008d58:	685a      	ldr	r2, [r3, #4]
 8008d5a:	683b      	ldr	r3, [r7, #0]
 8008d5c:	68db      	ldr	r3, [r3, #12]
 8008d5e:	f000 fdc7 	bl	80098f0 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	681b      	ldr	r3, [r3, #0]
 8008d66:	689b      	ldr	r3, [r3, #8]
 8008d68:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8008d6a:	68fb      	ldr	r3, [r7, #12]
 8008d6c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8008d70:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	681b      	ldr	r3, [r3, #0]
 8008d76:	68fa      	ldr	r2, [r7, #12]
 8008d78:	609a      	str	r2, [r3, #8]
      break;
 8008d7a:	e04e      	b.n	8008e1a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	6818      	ldr	r0, [r3, #0]
 8008d80:	683b      	ldr	r3, [r7, #0]
 8008d82:	6899      	ldr	r1, [r3, #8]
 8008d84:	683b      	ldr	r3, [r7, #0]
 8008d86:	685a      	ldr	r2, [r3, #4]
 8008d88:	683b      	ldr	r3, [r7, #0]
 8008d8a:	68db      	ldr	r3, [r3, #12]
 8008d8c:	f000 fdb0 	bl	80098f0 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	681b      	ldr	r3, [r3, #0]
 8008d94:	689a      	ldr	r2, [r3, #8]
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	681b      	ldr	r3, [r3, #0]
 8008d9a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008d9e:	609a      	str	r2, [r3, #8]
      break;
 8008da0:	e03b      	b.n	8008e1a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	6818      	ldr	r0, [r3, #0]
 8008da6:	683b      	ldr	r3, [r7, #0]
 8008da8:	6859      	ldr	r1, [r3, #4]
 8008daa:	683b      	ldr	r3, [r7, #0]
 8008dac:	68db      	ldr	r3, [r3, #12]
 8008dae:	461a      	mov	r2, r3
 8008db0:	f000 fc74 	bl	800969c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	681b      	ldr	r3, [r3, #0]
 8008db8:	2150      	movs	r1, #80	; 0x50
 8008dba:	4618      	mov	r0, r3
 8008dbc:	f000 fd7e 	bl	80098bc <TIM_ITRx_SetConfig>
      break;
 8008dc0:	e02b      	b.n	8008e1a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	6818      	ldr	r0, [r3, #0]
 8008dc6:	683b      	ldr	r3, [r7, #0]
 8008dc8:	6859      	ldr	r1, [r3, #4]
 8008dca:	683b      	ldr	r3, [r7, #0]
 8008dcc:	68db      	ldr	r3, [r3, #12]
 8008dce:	461a      	mov	r2, r3
 8008dd0:	f000 fcce 	bl	8009770 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	681b      	ldr	r3, [r3, #0]
 8008dd8:	2160      	movs	r1, #96	; 0x60
 8008dda:	4618      	mov	r0, r3
 8008ddc:	f000 fd6e 	bl	80098bc <TIM_ITRx_SetConfig>
      break;
 8008de0:	e01b      	b.n	8008e1a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	6818      	ldr	r0, [r3, #0]
 8008de6:	683b      	ldr	r3, [r7, #0]
 8008de8:	6859      	ldr	r1, [r3, #4]
 8008dea:	683b      	ldr	r3, [r7, #0]
 8008dec:	68db      	ldr	r3, [r3, #12]
 8008dee:	461a      	mov	r2, r3
 8008df0:	f000 fc54 	bl	800969c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	681b      	ldr	r3, [r3, #0]
 8008df8:	2140      	movs	r1, #64	; 0x40
 8008dfa:	4618      	mov	r0, r3
 8008dfc:	f000 fd5e 	bl	80098bc <TIM_ITRx_SetConfig>
      break;
 8008e00:	e00b      	b.n	8008e1a <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	681a      	ldr	r2, [r3, #0]
 8008e06:	683b      	ldr	r3, [r7, #0]
 8008e08:	681b      	ldr	r3, [r3, #0]
 8008e0a:	4619      	mov	r1, r3
 8008e0c:	4610      	mov	r0, r2
 8008e0e:	f000 fd55 	bl	80098bc <TIM_ITRx_SetConfig>
        break;
 8008e12:	e002      	b.n	8008e1a <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8008e14:	bf00      	nop
 8008e16:	e000      	b.n	8008e1a <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8008e18:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	2201      	movs	r2, #1
 8008e1e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	2200      	movs	r2, #0
 8008e26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008e2a:	2300      	movs	r3, #0
}
 8008e2c:	4618      	mov	r0, r3
 8008e2e:	3710      	adds	r7, #16
 8008e30:	46bd      	mov	sp, r7
 8008e32:	bd80      	pop	{r7, pc}

08008e34 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8008e34:	b580      	push	{r7, lr}
 8008e36:	b082      	sub	sp, #8
 8008e38:	af00      	add	r7, sp, #0
 8008e3a:	6078      	str	r0, [r7, #4]
 8008e3c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008e44:	2b01      	cmp	r3, #1
 8008e46:	d101      	bne.n	8008e4c <HAL_TIM_SlaveConfigSynchro+0x18>
 8008e48:	2302      	movs	r3, #2
 8008e4a:	e031      	b.n	8008eb0 <HAL_TIM_SlaveConfigSynchro+0x7c>
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	2201      	movs	r2, #1
 8008e50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	2202      	movs	r2, #2
 8008e58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8008e5c:	6839      	ldr	r1, [r7, #0]
 8008e5e:	6878      	ldr	r0, [r7, #4]
 8008e60:	f000 fb34 	bl	80094cc <TIM_SlaveTimer_SetConfig>
 8008e64:	4603      	mov	r3, r0
 8008e66:	2b00      	cmp	r3, #0
 8008e68:	d009      	beq.n	8008e7e <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	2201      	movs	r2, #1
 8008e6e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	2200      	movs	r2, #0
 8008e76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 8008e7a:	2301      	movs	r3, #1
 8008e7c:	e018      	b.n	8008eb0 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	681b      	ldr	r3, [r3, #0]
 8008e82:	68da      	ldr	r2, [r3, #12]
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	681b      	ldr	r3, [r3, #0]
 8008e88:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008e8c:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	681b      	ldr	r3, [r3, #0]
 8008e92:	68da      	ldr	r2, [r3, #12]
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	681b      	ldr	r3, [r3, #0]
 8008e98:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8008e9c:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	2201      	movs	r2, #1
 8008ea2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	2200      	movs	r2, #0
 8008eaa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008eae:	2300      	movs	r3, #0
}
 8008eb0:	4618      	mov	r0, r3
 8008eb2:	3708      	adds	r7, #8
 8008eb4:	46bd      	mov	sp, r7
 8008eb6:	bd80      	pop	{r7, pc}

08008eb8 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008eb8:	b480      	push	{r7}
 8008eba:	b083      	sub	sp, #12
 8008ebc:	af00      	add	r7, sp, #0
 8008ebe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8008ec0:	bf00      	nop
 8008ec2:	370c      	adds	r7, #12
 8008ec4:	46bd      	mov	sp, r7
 8008ec6:	bc80      	pop	{r7}
 8008ec8:	4770      	bx	lr

08008eca <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008eca:	b480      	push	{r7}
 8008ecc:	b083      	sub	sp, #12
 8008ece:	af00      	add	r7, sp, #0
 8008ed0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008ed2:	bf00      	nop
 8008ed4:	370c      	adds	r7, #12
 8008ed6:	46bd      	mov	sp, r7
 8008ed8:	bc80      	pop	{r7}
 8008eda:	4770      	bx	lr

08008edc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008edc:	b480      	push	{r7}
 8008ede:	b083      	sub	sp, #12
 8008ee0:	af00      	add	r7, sp, #0
 8008ee2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008ee4:	bf00      	nop
 8008ee6:	370c      	adds	r7, #12
 8008ee8:	46bd      	mov	sp, r7
 8008eea:	bc80      	pop	{r7}
 8008eec:	4770      	bx	lr

08008eee <HAL_TIM_IC_CaptureHalfCpltCallback>:
  * @brief  Input Capture half complete callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8008eee:	b480      	push	{r7}
 8008ef0:	b083      	sub	sp, #12
 8008ef2:	af00      	add	r7, sp, #0
 8008ef4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureHalfCpltCallback could be implemented in the user file
   */
}
 8008ef6:	bf00      	nop
 8008ef8:	370c      	adds	r7, #12
 8008efa:	46bd      	mov	sp, r7
 8008efc:	bc80      	pop	{r7}
 8008efe:	4770      	bx	lr

08008f00 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008f00:	b480      	push	{r7}
 8008f02:	b083      	sub	sp, #12
 8008f04:	af00      	add	r7, sp, #0
 8008f06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008f08:	bf00      	nop
 8008f0a:	370c      	adds	r7, #12
 8008f0c:	46bd      	mov	sp, r7
 8008f0e:	bc80      	pop	{r7}
 8008f10:	4770      	bx	lr

08008f12 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008f12:	b480      	push	{r7}
 8008f14:	b083      	sub	sp, #12
 8008f16:	af00      	add	r7, sp, #0
 8008f18:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008f1a:	bf00      	nop
 8008f1c:	370c      	adds	r7, #12
 8008f1e:	46bd      	mov	sp, r7
 8008f20:	bc80      	pop	{r7}
 8008f22:	4770      	bx	lr

08008f24 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8008f24:	b480      	push	{r7}
 8008f26:	b083      	sub	sp, #12
 8008f28:	af00      	add	r7, sp, #0
 8008f2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8008f2c:	bf00      	nop
 8008f2e:	370c      	adds	r7, #12
 8008f30:	46bd      	mov	sp, r7
 8008f32:	bc80      	pop	{r7}
 8008f34:	4770      	bx	lr

08008f36 <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 8008f36:	b580      	push	{r7, lr}
 8008f38:	b084      	sub	sp, #16
 8008f3a:	af00      	add	r7, sp, #0
 8008f3c:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f42:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8008f44:	68fb      	ldr	r3, [r7, #12]
 8008f46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f48:	687a      	ldr	r2, [r7, #4]
 8008f4a:	429a      	cmp	r2, r3
 8008f4c:	d107      	bne.n	8008f5e <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008f4e:	68fb      	ldr	r3, [r7, #12]
 8008f50:	2201      	movs	r2, #1
 8008f52:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8008f54:	68fb      	ldr	r3, [r7, #12]
 8008f56:	2201      	movs	r2, #1
 8008f58:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008f5c:	e02a      	b.n	8008fb4 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8008f5e:	68fb      	ldr	r3, [r7, #12]
 8008f60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008f62:	687a      	ldr	r2, [r7, #4]
 8008f64:	429a      	cmp	r2, r3
 8008f66:	d107      	bne.n	8008f78 <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008f68:	68fb      	ldr	r3, [r7, #12]
 8008f6a:	2202      	movs	r2, #2
 8008f6c:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8008f6e:	68fb      	ldr	r3, [r7, #12]
 8008f70:	2201      	movs	r2, #1
 8008f72:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008f76:	e01d      	b.n	8008fb4 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8008f78:	68fb      	ldr	r3, [r7, #12]
 8008f7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f7c:	687a      	ldr	r2, [r7, #4]
 8008f7e:	429a      	cmp	r2, r3
 8008f80:	d107      	bne.n	8008f92 <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008f82:	68fb      	ldr	r3, [r7, #12]
 8008f84:	2204      	movs	r2, #4
 8008f86:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8008f88:	68fb      	ldr	r3, [r7, #12]
 8008f8a:	2201      	movs	r2, #1
 8008f8c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008f90:	e010      	b.n	8008fb4 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8008f92:	68fb      	ldr	r3, [r7, #12]
 8008f94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008f96:	687a      	ldr	r2, [r7, #4]
 8008f98:	429a      	cmp	r2, r3
 8008f9a:	d107      	bne.n	8008fac <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008f9c:	68fb      	ldr	r3, [r7, #12]
 8008f9e:	2208      	movs	r2, #8
 8008fa0:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8008fa2:	68fb      	ldr	r3, [r7, #12]
 8008fa4:	2201      	movs	r2, #1
 8008fa6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8008faa:	e003      	b.n	8008fb4 <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 8008fac:	68fb      	ldr	r3, [r7, #12]
 8008fae:	2201      	movs	r2, #1
 8008fb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 8008fb4:	68f8      	ldr	r0, [r7, #12]
 8008fb6:	f7ff ffb5 	bl	8008f24 <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008fba:	68fb      	ldr	r3, [r7, #12]
 8008fbc:	2200      	movs	r2, #0
 8008fbe:	771a      	strb	r2, [r3, #28]
}
 8008fc0:	bf00      	nop
 8008fc2:	3710      	adds	r7, #16
 8008fc4:	46bd      	mov	sp, r7
 8008fc6:	bd80      	pop	{r7, pc}

08008fc8 <TIM_DMACaptureCplt>:
  * @brief  TIM DMA Capture complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMACaptureCplt(DMA_HandleTypeDef *hdma)
{
 8008fc8:	b580      	push	{r7, lr}
 8008fca:	b084      	sub	sp, #16
 8008fcc:	af00      	add	r7, sp, #0
 8008fce:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008fd4:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8008fd6:	68fb      	ldr	r3, [r7, #12]
 8008fd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008fda:	687a      	ldr	r2, [r7, #4]
 8008fdc:	429a      	cmp	r2, r3
 8008fde:	d10f      	bne.n	8009000 <TIM_DMACaptureCplt+0x38>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008fe0:	68fb      	ldr	r3, [r7, #12]
 8008fe2:	2201      	movs	r2, #1
 8008fe4:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	699b      	ldr	r3, [r3, #24]
 8008fea:	2b00      	cmp	r3, #0
 8008fec:	d146      	bne.n	800907c <TIM_DMACaptureCplt+0xb4>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8008fee:	68fb      	ldr	r3, [r7, #12]
 8008ff0:	2201      	movs	r2, #1
 8008ff2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8008ff6:	68fb      	ldr	r3, [r7, #12]
 8008ff8:	2201      	movs	r2, #1
 8008ffa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008ffe:	e03d      	b.n	800907c <TIM_DMACaptureCplt+0xb4>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8009000:	68fb      	ldr	r3, [r7, #12]
 8009002:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009004:	687a      	ldr	r2, [r7, #4]
 8009006:	429a      	cmp	r2, r3
 8009008:	d10f      	bne.n	800902a <TIM_DMACaptureCplt+0x62>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800900a:	68fb      	ldr	r3, [r7, #12]
 800900c:	2202      	movs	r2, #2
 800900e:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	699b      	ldr	r3, [r3, #24]
 8009014:	2b00      	cmp	r3, #0
 8009016:	d131      	bne.n	800907c <TIM_DMACaptureCplt+0xb4>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8009018:	68fb      	ldr	r3, [r7, #12]
 800901a:	2201      	movs	r2, #1
 800901c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8009020:	68fb      	ldr	r3, [r7, #12]
 8009022:	2201      	movs	r2, #1
 8009024:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8009028:	e028      	b.n	800907c <TIM_DMACaptureCplt+0xb4>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800902a:	68fb      	ldr	r3, [r7, #12]
 800902c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800902e:	687a      	ldr	r2, [r7, #4]
 8009030:	429a      	cmp	r2, r3
 8009032:	d10f      	bne.n	8009054 <TIM_DMACaptureCplt+0x8c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009034:	68fb      	ldr	r3, [r7, #12]
 8009036:	2204      	movs	r2, #4
 8009038:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	699b      	ldr	r3, [r3, #24]
 800903e:	2b00      	cmp	r3, #0
 8009040:	d11c      	bne.n	800907c <TIM_DMACaptureCplt+0xb4>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8009042:	68fb      	ldr	r3, [r7, #12]
 8009044:	2201      	movs	r2, #1
 8009046:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 800904a:	68fb      	ldr	r3, [r7, #12]
 800904c:	2201      	movs	r2, #1
 800904e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009052:	e013      	b.n	800907c <TIM_DMACaptureCplt+0xb4>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8009054:	68fb      	ldr	r3, [r7, #12]
 8009056:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009058:	687a      	ldr	r2, [r7, #4]
 800905a:	429a      	cmp	r2, r3
 800905c:	d10e      	bne.n	800907c <TIM_DMACaptureCplt+0xb4>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800905e:	68fb      	ldr	r3, [r7, #12]
 8009060:	2208      	movs	r2, #8
 8009062:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	699b      	ldr	r3, [r3, #24]
 8009068:	2b00      	cmp	r3, #0
 800906a:	d107      	bne.n	800907c <TIM_DMACaptureCplt+0xb4>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 800906c:	68fb      	ldr	r3, [r7, #12]
 800906e:	2201      	movs	r2, #1
 8009070:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8009074:	68fb      	ldr	r3, [r7, #12]
 8009076:	2201      	movs	r2, #1
 8009078:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->IC_CaptureCallback(htim);
#else
  HAL_TIM_IC_CaptureCallback(htim);
 800907c:	68f8      	ldr	r0, [r7, #12]
 800907e:	f7ff ff2d 	bl	8008edc <HAL_TIM_IC_CaptureCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009082:	68fb      	ldr	r3, [r7, #12]
 8009084:	2200      	movs	r2, #0
 8009086:	771a      	strb	r2, [r3, #28]
}
 8009088:	bf00      	nop
 800908a:	3710      	adds	r7, #16
 800908c:	46bd      	mov	sp, r7
 800908e:	bd80      	pop	{r7, pc}

08009090 <TIM_DMACaptureHalfCplt>:
  * @brief  TIM DMA Capture half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMACaptureHalfCplt(DMA_HandleTypeDef *hdma)
{
 8009090:	b580      	push	{r7, lr}
 8009092:	b084      	sub	sp, #16
 8009094:	af00      	add	r7, sp, #0
 8009096:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800909c:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800909e:	68fb      	ldr	r3, [r7, #12]
 80090a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80090a2:	687a      	ldr	r2, [r7, #4]
 80090a4:	429a      	cmp	r2, r3
 80090a6:	d103      	bne.n	80090b0 <TIM_DMACaptureHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80090a8:	68fb      	ldr	r3, [r7, #12]
 80090aa:	2201      	movs	r2, #1
 80090ac:	771a      	strb	r2, [r3, #28]
 80090ae:	e019      	b.n	80090e4 <TIM_DMACaptureHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 80090b0:	68fb      	ldr	r3, [r7, #12]
 80090b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80090b4:	687a      	ldr	r2, [r7, #4]
 80090b6:	429a      	cmp	r2, r3
 80090b8:	d103      	bne.n	80090c2 <TIM_DMACaptureHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80090ba:	68fb      	ldr	r3, [r7, #12]
 80090bc:	2202      	movs	r2, #2
 80090be:	771a      	strb	r2, [r3, #28]
 80090c0:	e010      	b.n	80090e4 <TIM_DMACaptureHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80090c2:	68fb      	ldr	r3, [r7, #12]
 80090c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80090c6:	687a      	ldr	r2, [r7, #4]
 80090c8:	429a      	cmp	r2, r3
 80090ca:	d103      	bne.n	80090d4 <TIM_DMACaptureHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80090cc:	68fb      	ldr	r3, [r7, #12]
 80090ce:	2204      	movs	r2, #4
 80090d0:	771a      	strb	r2, [r3, #28]
 80090d2:	e007      	b.n	80090e4 <TIM_DMACaptureHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 80090d4:	68fb      	ldr	r3, [r7, #12]
 80090d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80090d8:	687a      	ldr	r2, [r7, #4]
 80090da:	429a      	cmp	r2, r3
 80090dc:	d102      	bne.n	80090e4 <TIM_DMACaptureHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80090de:	68fb      	ldr	r3, [r7, #12]
 80090e0:	2208      	movs	r2, #8
 80090e2:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->IC_CaptureHalfCpltCallback(htim);
#else
  HAL_TIM_IC_CaptureHalfCpltCallback(htim);
 80090e4:	68f8      	ldr	r0, [r7, #12]
 80090e6:	f7ff ff02 	bl	8008eee <HAL_TIM_IC_CaptureHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80090ea:	68fb      	ldr	r3, [r7, #12]
 80090ec:	2200      	movs	r2, #0
 80090ee:	771a      	strb	r2, [r3, #28]
}
 80090f0:	bf00      	nop
 80090f2:	3710      	adds	r7, #16
 80090f4:	46bd      	mov	sp, r7
 80090f6:	bd80      	pop	{r7, pc}

080090f8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80090f8:	b480      	push	{r7}
 80090fa:	b085      	sub	sp, #20
 80090fc:	af00      	add	r7, sp, #0
 80090fe:	6078      	str	r0, [r7, #4]
 8009100:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009102:	687b      	ldr	r3, [r7, #4]
 8009104:	681b      	ldr	r3, [r3, #0]
 8009106:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	4a29      	ldr	r2, [pc, #164]	; (80091b0 <TIM_Base_SetConfig+0xb8>)
 800910c:	4293      	cmp	r3, r2
 800910e:	d00b      	beq.n	8009128 <TIM_Base_SetConfig+0x30>
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009116:	d007      	beq.n	8009128 <TIM_Base_SetConfig+0x30>
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	4a26      	ldr	r2, [pc, #152]	; (80091b4 <TIM_Base_SetConfig+0xbc>)
 800911c:	4293      	cmp	r3, r2
 800911e:	d003      	beq.n	8009128 <TIM_Base_SetConfig+0x30>
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	4a25      	ldr	r2, [pc, #148]	; (80091b8 <TIM_Base_SetConfig+0xc0>)
 8009124:	4293      	cmp	r3, r2
 8009126:	d108      	bne.n	800913a <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009128:	68fb      	ldr	r3, [r7, #12]
 800912a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800912e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009130:	683b      	ldr	r3, [r7, #0]
 8009132:	685b      	ldr	r3, [r3, #4]
 8009134:	68fa      	ldr	r2, [r7, #12]
 8009136:	4313      	orrs	r3, r2
 8009138:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	4a1c      	ldr	r2, [pc, #112]	; (80091b0 <TIM_Base_SetConfig+0xb8>)
 800913e:	4293      	cmp	r3, r2
 8009140:	d00b      	beq.n	800915a <TIM_Base_SetConfig+0x62>
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009148:	d007      	beq.n	800915a <TIM_Base_SetConfig+0x62>
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	4a19      	ldr	r2, [pc, #100]	; (80091b4 <TIM_Base_SetConfig+0xbc>)
 800914e:	4293      	cmp	r3, r2
 8009150:	d003      	beq.n	800915a <TIM_Base_SetConfig+0x62>
 8009152:	687b      	ldr	r3, [r7, #4]
 8009154:	4a18      	ldr	r2, [pc, #96]	; (80091b8 <TIM_Base_SetConfig+0xc0>)
 8009156:	4293      	cmp	r3, r2
 8009158:	d108      	bne.n	800916c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800915a:	68fb      	ldr	r3, [r7, #12]
 800915c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009160:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009162:	683b      	ldr	r3, [r7, #0]
 8009164:	68db      	ldr	r3, [r3, #12]
 8009166:	68fa      	ldr	r2, [r7, #12]
 8009168:	4313      	orrs	r3, r2
 800916a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800916c:	68fb      	ldr	r3, [r7, #12]
 800916e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8009172:	683b      	ldr	r3, [r7, #0]
 8009174:	695b      	ldr	r3, [r3, #20]
 8009176:	4313      	orrs	r3, r2
 8009178:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	68fa      	ldr	r2, [r7, #12]
 800917e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009180:	683b      	ldr	r3, [r7, #0]
 8009182:	689a      	ldr	r2, [r3, #8]
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009188:	683b      	ldr	r3, [r7, #0]
 800918a:	681a      	ldr	r2, [r3, #0]
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	4a07      	ldr	r2, [pc, #28]	; (80091b0 <TIM_Base_SetConfig+0xb8>)
 8009194:	4293      	cmp	r3, r2
 8009196:	d103      	bne.n	80091a0 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009198:	683b      	ldr	r3, [r7, #0]
 800919a:	691a      	ldr	r2, [r3, #16]
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	2201      	movs	r2, #1
 80091a4:	615a      	str	r2, [r3, #20]
}
 80091a6:	bf00      	nop
 80091a8:	3714      	adds	r7, #20
 80091aa:	46bd      	mov	sp, r7
 80091ac:	bc80      	pop	{r7}
 80091ae:	4770      	bx	lr
 80091b0:	40012c00 	.word	0x40012c00
 80091b4:	40000400 	.word	0x40000400
 80091b8:	40000800 	.word	0x40000800

080091bc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80091bc:	b480      	push	{r7}
 80091be:	b087      	sub	sp, #28
 80091c0:	af00      	add	r7, sp, #0
 80091c2:	6078      	str	r0, [r7, #4]
 80091c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	6a1b      	ldr	r3, [r3, #32]
 80091ca:	f023 0201 	bic.w	r2, r3, #1
 80091ce:	687b      	ldr	r3, [r7, #4]
 80091d0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	6a1b      	ldr	r3, [r3, #32]
 80091d6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	685b      	ldr	r3, [r3, #4]
 80091dc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80091de:	687b      	ldr	r3, [r7, #4]
 80091e0:	699b      	ldr	r3, [r3, #24]
 80091e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80091e4:	68fb      	ldr	r3, [r7, #12]
 80091e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80091ea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80091ec:	68fb      	ldr	r3, [r7, #12]
 80091ee:	f023 0303 	bic.w	r3, r3, #3
 80091f2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80091f4:	683b      	ldr	r3, [r7, #0]
 80091f6:	681b      	ldr	r3, [r3, #0]
 80091f8:	68fa      	ldr	r2, [r7, #12]
 80091fa:	4313      	orrs	r3, r2
 80091fc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80091fe:	697b      	ldr	r3, [r7, #20]
 8009200:	f023 0302 	bic.w	r3, r3, #2
 8009204:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8009206:	683b      	ldr	r3, [r7, #0]
 8009208:	689b      	ldr	r3, [r3, #8]
 800920a:	697a      	ldr	r2, [r7, #20]
 800920c:	4313      	orrs	r3, r2
 800920e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	4a1c      	ldr	r2, [pc, #112]	; (8009284 <TIM_OC1_SetConfig+0xc8>)
 8009214:	4293      	cmp	r3, r2
 8009216:	d10c      	bne.n	8009232 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8009218:	697b      	ldr	r3, [r7, #20]
 800921a:	f023 0308 	bic.w	r3, r3, #8
 800921e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8009220:	683b      	ldr	r3, [r7, #0]
 8009222:	68db      	ldr	r3, [r3, #12]
 8009224:	697a      	ldr	r2, [r7, #20]
 8009226:	4313      	orrs	r3, r2
 8009228:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800922a:	697b      	ldr	r3, [r7, #20]
 800922c:	f023 0304 	bic.w	r3, r3, #4
 8009230:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	4a13      	ldr	r2, [pc, #76]	; (8009284 <TIM_OC1_SetConfig+0xc8>)
 8009236:	4293      	cmp	r3, r2
 8009238:	d111      	bne.n	800925e <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800923a:	693b      	ldr	r3, [r7, #16]
 800923c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009240:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8009242:	693b      	ldr	r3, [r7, #16]
 8009244:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009248:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800924a:	683b      	ldr	r3, [r7, #0]
 800924c:	695b      	ldr	r3, [r3, #20]
 800924e:	693a      	ldr	r2, [r7, #16]
 8009250:	4313      	orrs	r3, r2
 8009252:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8009254:	683b      	ldr	r3, [r7, #0]
 8009256:	699b      	ldr	r3, [r3, #24]
 8009258:	693a      	ldr	r2, [r7, #16]
 800925a:	4313      	orrs	r3, r2
 800925c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800925e:	687b      	ldr	r3, [r7, #4]
 8009260:	693a      	ldr	r2, [r7, #16]
 8009262:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	68fa      	ldr	r2, [r7, #12]
 8009268:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800926a:	683b      	ldr	r3, [r7, #0]
 800926c:	685a      	ldr	r2, [r3, #4]
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	697a      	ldr	r2, [r7, #20]
 8009276:	621a      	str	r2, [r3, #32]
}
 8009278:	bf00      	nop
 800927a:	371c      	adds	r7, #28
 800927c:	46bd      	mov	sp, r7
 800927e:	bc80      	pop	{r7}
 8009280:	4770      	bx	lr
 8009282:	bf00      	nop
 8009284:	40012c00 	.word	0x40012c00

08009288 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009288:	b480      	push	{r7}
 800928a:	b087      	sub	sp, #28
 800928c:	af00      	add	r7, sp, #0
 800928e:	6078      	str	r0, [r7, #4]
 8009290:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	6a1b      	ldr	r3, [r3, #32]
 8009296:	f023 0210 	bic.w	r2, r3, #16
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800929e:	687b      	ldr	r3, [r7, #4]
 80092a0:	6a1b      	ldr	r3, [r3, #32]
 80092a2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	685b      	ldr	r3, [r3, #4]
 80092a8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	699b      	ldr	r3, [r3, #24]
 80092ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80092b0:	68fb      	ldr	r3, [r7, #12]
 80092b2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80092b6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80092b8:	68fb      	ldr	r3, [r7, #12]
 80092ba:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80092be:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80092c0:	683b      	ldr	r3, [r7, #0]
 80092c2:	681b      	ldr	r3, [r3, #0]
 80092c4:	021b      	lsls	r3, r3, #8
 80092c6:	68fa      	ldr	r2, [r7, #12]
 80092c8:	4313      	orrs	r3, r2
 80092ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80092cc:	697b      	ldr	r3, [r7, #20]
 80092ce:	f023 0320 	bic.w	r3, r3, #32
 80092d2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80092d4:	683b      	ldr	r3, [r7, #0]
 80092d6:	689b      	ldr	r3, [r3, #8]
 80092d8:	011b      	lsls	r3, r3, #4
 80092da:	697a      	ldr	r2, [r7, #20]
 80092dc:	4313      	orrs	r3, r2
 80092de:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	4a1d      	ldr	r2, [pc, #116]	; (8009358 <TIM_OC2_SetConfig+0xd0>)
 80092e4:	4293      	cmp	r3, r2
 80092e6:	d10d      	bne.n	8009304 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80092e8:	697b      	ldr	r3, [r7, #20]
 80092ea:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80092ee:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80092f0:	683b      	ldr	r3, [r7, #0]
 80092f2:	68db      	ldr	r3, [r3, #12]
 80092f4:	011b      	lsls	r3, r3, #4
 80092f6:	697a      	ldr	r2, [r7, #20]
 80092f8:	4313      	orrs	r3, r2
 80092fa:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80092fc:	697b      	ldr	r3, [r7, #20]
 80092fe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009302:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	4a14      	ldr	r2, [pc, #80]	; (8009358 <TIM_OC2_SetConfig+0xd0>)
 8009308:	4293      	cmp	r3, r2
 800930a:	d113      	bne.n	8009334 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800930c:	693b      	ldr	r3, [r7, #16]
 800930e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009312:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8009314:	693b      	ldr	r3, [r7, #16]
 8009316:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800931a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800931c:	683b      	ldr	r3, [r7, #0]
 800931e:	695b      	ldr	r3, [r3, #20]
 8009320:	009b      	lsls	r3, r3, #2
 8009322:	693a      	ldr	r2, [r7, #16]
 8009324:	4313      	orrs	r3, r2
 8009326:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8009328:	683b      	ldr	r3, [r7, #0]
 800932a:	699b      	ldr	r3, [r3, #24]
 800932c:	009b      	lsls	r3, r3, #2
 800932e:	693a      	ldr	r2, [r7, #16]
 8009330:	4313      	orrs	r3, r2
 8009332:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	693a      	ldr	r2, [r7, #16]
 8009338:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800933a:	687b      	ldr	r3, [r7, #4]
 800933c:	68fa      	ldr	r2, [r7, #12]
 800933e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8009340:	683b      	ldr	r3, [r7, #0]
 8009342:	685a      	ldr	r2, [r3, #4]
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	697a      	ldr	r2, [r7, #20]
 800934c:	621a      	str	r2, [r3, #32]
}
 800934e:	bf00      	nop
 8009350:	371c      	adds	r7, #28
 8009352:	46bd      	mov	sp, r7
 8009354:	bc80      	pop	{r7}
 8009356:	4770      	bx	lr
 8009358:	40012c00 	.word	0x40012c00

0800935c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800935c:	b480      	push	{r7}
 800935e:	b087      	sub	sp, #28
 8009360:	af00      	add	r7, sp, #0
 8009362:	6078      	str	r0, [r7, #4]
 8009364:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8009366:	687b      	ldr	r3, [r7, #4]
 8009368:	6a1b      	ldr	r3, [r3, #32]
 800936a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	6a1b      	ldr	r3, [r3, #32]
 8009376:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	685b      	ldr	r3, [r3, #4]
 800937c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800937e:	687b      	ldr	r3, [r7, #4]
 8009380:	69db      	ldr	r3, [r3, #28]
 8009382:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8009384:	68fb      	ldr	r3, [r7, #12]
 8009386:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800938a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800938c:	68fb      	ldr	r3, [r7, #12]
 800938e:	f023 0303 	bic.w	r3, r3, #3
 8009392:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009394:	683b      	ldr	r3, [r7, #0]
 8009396:	681b      	ldr	r3, [r3, #0]
 8009398:	68fa      	ldr	r2, [r7, #12]
 800939a:	4313      	orrs	r3, r2
 800939c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800939e:	697b      	ldr	r3, [r7, #20]
 80093a0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80093a4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80093a6:	683b      	ldr	r3, [r7, #0]
 80093a8:	689b      	ldr	r3, [r3, #8]
 80093aa:	021b      	lsls	r3, r3, #8
 80093ac:	697a      	ldr	r2, [r7, #20]
 80093ae:	4313      	orrs	r3, r2
 80093b0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	4a1d      	ldr	r2, [pc, #116]	; (800942c <TIM_OC3_SetConfig+0xd0>)
 80093b6:	4293      	cmp	r3, r2
 80093b8:	d10d      	bne.n	80093d6 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80093ba:	697b      	ldr	r3, [r7, #20]
 80093bc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80093c0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80093c2:	683b      	ldr	r3, [r7, #0]
 80093c4:	68db      	ldr	r3, [r3, #12]
 80093c6:	021b      	lsls	r3, r3, #8
 80093c8:	697a      	ldr	r2, [r7, #20]
 80093ca:	4313      	orrs	r3, r2
 80093cc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80093ce:	697b      	ldr	r3, [r7, #20]
 80093d0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80093d4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	4a14      	ldr	r2, [pc, #80]	; (800942c <TIM_OC3_SetConfig+0xd0>)
 80093da:	4293      	cmp	r3, r2
 80093dc:	d113      	bne.n	8009406 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80093de:	693b      	ldr	r3, [r7, #16]
 80093e0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80093e4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80093e6:	693b      	ldr	r3, [r7, #16]
 80093e8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80093ec:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80093ee:	683b      	ldr	r3, [r7, #0]
 80093f0:	695b      	ldr	r3, [r3, #20]
 80093f2:	011b      	lsls	r3, r3, #4
 80093f4:	693a      	ldr	r2, [r7, #16]
 80093f6:	4313      	orrs	r3, r2
 80093f8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80093fa:	683b      	ldr	r3, [r7, #0]
 80093fc:	699b      	ldr	r3, [r3, #24]
 80093fe:	011b      	lsls	r3, r3, #4
 8009400:	693a      	ldr	r2, [r7, #16]
 8009402:	4313      	orrs	r3, r2
 8009404:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	693a      	ldr	r2, [r7, #16]
 800940a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	68fa      	ldr	r2, [r7, #12]
 8009410:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8009412:	683b      	ldr	r3, [r7, #0]
 8009414:	685a      	ldr	r2, [r3, #4]
 8009416:	687b      	ldr	r3, [r7, #4]
 8009418:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	697a      	ldr	r2, [r7, #20]
 800941e:	621a      	str	r2, [r3, #32]
}
 8009420:	bf00      	nop
 8009422:	371c      	adds	r7, #28
 8009424:	46bd      	mov	sp, r7
 8009426:	bc80      	pop	{r7}
 8009428:	4770      	bx	lr
 800942a:	bf00      	nop
 800942c:	40012c00 	.word	0x40012c00

08009430 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009430:	b480      	push	{r7}
 8009432:	b087      	sub	sp, #28
 8009434:	af00      	add	r7, sp, #0
 8009436:	6078      	str	r0, [r7, #4]
 8009438:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800943a:	687b      	ldr	r3, [r7, #4]
 800943c:	6a1b      	ldr	r3, [r3, #32]
 800943e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8009442:	687b      	ldr	r3, [r7, #4]
 8009444:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	6a1b      	ldr	r3, [r3, #32]
 800944a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	685b      	ldr	r3, [r3, #4]
 8009450:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	69db      	ldr	r3, [r3, #28]
 8009456:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8009458:	68fb      	ldr	r3, [r7, #12]
 800945a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800945e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8009460:	68fb      	ldr	r3, [r7, #12]
 8009462:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009466:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009468:	683b      	ldr	r3, [r7, #0]
 800946a:	681b      	ldr	r3, [r3, #0]
 800946c:	021b      	lsls	r3, r3, #8
 800946e:	68fa      	ldr	r2, [r7, #12]
 8009470:	4313      	orrs	r3, r2
 8009472:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8009474:	693b      	ldr	r3, [r7, #16]
 8009476:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800947a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800947c:	683b      	ldr	r3, [r7, #0]
 800947e:	689b      	ldr	r3, [r3, #8]
 8009480:	031b      	lsls	r3, r3, #12
 8009482:	693a      	ldr	r2, [r7, #16]
 8009484:	4313      	orrs	r3, r2
 8009486:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	4a0f      	ldr	r2, [pc, #60]	; (80094c8 <TIM_OC4_SetConfig+0x98>)
 800948c:	4293      	cmp	r3, r2
 800948e:	d109      	bne.n	80094a4 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8009490:	697b      	ldr	r3, [r7, #20]
 8009492:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009496:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8009498:	683b      	ldr	r3, [r7, #0]
 800949a:	695b      	ldr	r3, [r3, #20]
 800949c:	019b      	lsls	r3, r3, #6
 800949e:	697a      	ldr	r2, [r7, #20]
 80094a0:	4313      	orrs	r3, r2
 80094a2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	697a      	ldr	r2, [r7, #20]
 80094a8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	68fa      	ldr	r2, [r7, #12]
 80094ae:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80094b0:	683b      	ldr	r3, [r7, #0]
 80094b2:	685a      	ldr	r2, [r3, #4]
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	693a      	ldr	r2, [r7, #16]
 80094bc:	621a      	str	r2, [r3, #32]
}
 80094be:	bf00      	nop
 80094c0:	371c      	adds	r7, #28
 80094c2:	46bd      	mov	sp, r7
 80094c4:	bc80      	pop	{r7}
 80094c6:	4770      	bx	lr
 80094c8:	40012c00 	.word	0x40012c00

080094cc <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 80094cc:	b580      	push	{r7, lr}
 80094ce:	b086      	sub	sp, #24
 80094d0:	af00      	add	r7, sp, #0
 80094d2:	6078      	str	r0, [r7, #4]
 80094d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	681b      	ldr	r3, [r3, #0]
 80094da:	689b      	ldr	r3, [r3, #8]
 80094dc:	617b      	str	r3, [r7, #20]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80094de:	697b      	ldr	r3, [r7, #20]
 80094e0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80094e4:	617b      	str	r3, [r7, #20]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 80094e6:	683b      	ldr	r3, [r7, #0]
 80094e8:	685b      	ldr	r3, [r3, #4]
 80094ea:	697a      	ldr	r2, [r7, #20]
 80094ec:	4313      	orrs	r3, r2
 80094ee:	617b      	str	r3, [r7, #20]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 80094f0:	697b      	ldr	r3, [r7, #20]
 80094f2:	f023 0307 	bic.w	r3, r3, #7
 80094f6:	617b      	str	r3, [r7, #20]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 80094f8:	683b      	ldr	r3, [r7, #0]
 80094fa:	681b      	ldr	r3, [r3, #0]
 80094fc:	697a      	ldr	r2, [r7, #20]
 80094fe:	4313      	orrs	r3, r2
 8009500:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	681b      	ldr	r3, [r3, #0]
 8009506:	697a      	ldr	r2, [r7, #20]
 8009508:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 800950a:	683b      	ldr	r3, [r7, #0]
 800950c:	685b      	ldr	r3, [r3, #4]
 800950e:	2b70      	cmp	r3, #112	; 0x70
 8009510:	d01a      	beq.n	8009548 <TIM_SlaveTimer_SetConfig+0x7c>
 8009512:	2b70      	cmp	r3, #112	; 0x70
 8009514:	d860      	bhi.n	80095d8 <TIM_SlaveTimer_SetConfig+0x10c>
 8009516:	2b60      	cmp	r3, #96	; 0x60
 8009518:	d054      	beq.n	80095c4 <TIM_SlaveTimer_SetConfig+0xf8>
 800951a:	2b60      	cmp	r3, #96	; 0x60
 800951c:	d85c      	bhi.n	80095d8 <TIM_SlaveTimer_SetConfig+0x10c>
 800951e:	2b50      	cmp	r3, #80	; 0x50
 8009520:	d046      	beq.n	80095b0 <TIM_SlaveTimer_SetConfig+0xe4>
 8009522:	2b50      	cmp	r3, #80	; 0x50
 8009524:	d858      	bhi.n	80095d8 <TIM_SlaveTimer_SetConfig+0x10c>
 8009526:	2b40      	cmp	r3, #64	; 0x40
 8009528:	d019      	beq.n	800955e <TIM_SlaveTimer_SetConfig+0x92>
 800952a:	2b40      	cmp	r3, #64	; 0x40
 800952c:	d854      	bhi.n	80095d8 <TIM_SlaveTimer_SetConfig+0x10c>
 800952e:	2b30      	cmp	r3, #48	; 0x30
 8009530:	d054      	beq.n	80095dc <TIM_SlaveTimer_SetConfig+0x110>
 8009532:	2b30      	cmp	r3, #48	; 0x30
 8009534:	d850      	bhi.n	80095d8 <TIM_SlaveTimer_SetConfig+0x10c>
 8009536:	2b20      	cmp	r3, #32
 8009538:	d050      	beq.n	80095dc <TIM_SlaveTimer_SetConfig+0x110>
 800953a:	2b20      	cmp	r3, #32
 800953c:	d84c      	bhi.n	80095d8 <TIM_SlaveTimer_SetConfig+0x10c>
 800953e:	2b00      	cmp	r3, #0
 8009540:	d04c      	beq.n	80095dc <TIM_SlaveTimer_SetConfig+0x110>
 8009542:	2b10      	cmp	r3, #16
 8009544:	d04a      	beq.n	80095dc <TIM_SlaveTimer_SetConfig+0x110>
        assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
        break;
      }

    default:
      break;
 8009546:	e047      	b.n	80095d8 <TIM_SlaveTimer_SetConfig+0x10c>
      TIM_ETR_SetConfig(htim->Instance,
 8009548:	687b      	ldr	r3, [r7, #4]
 800954a:	6818      	ldr	r0, [r3, #0]
 800954c:	683b      	ldr	r3, [r7, #0]
 800954e:	68d9      	ldr	r1, [r3, #12]
 8009550:	683b      	ldr	r3, [r7, #0]
 8009552:	689a      	ldr	r2, [r3, #8]
 8009554:	683b      	ldr	r3, [r7, #0]
 8009556:	691b      	ldr	r3, [r3, #16]
 8009558:	f000 f9ca 	bl	80098f0 <TIM_ETR_SetConfig>
      break;
 800955c:	e03f      	b.n	80095de <TIM_SlaveTimer_SetConfig+0x112>
      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 800955e:	683b      	ldr	r3, [r7, #0]
 8009560:	681b      	ldr	r3, [r3, #0]
 8009562:	2b05      	cmp	r3, #5
 8009564:	d101      	bne.n	800956a <TIM_SlaveTimer_SetConfig+0x9e>
        return HAL_ERROR;
 8009566:	2301      	movs	r3, #1
 8009568:	e03a      	b.n	80095e0 <TIM_SlaveTimer_SetConfig+0x114>
      tmpccer = htim->Instance->CCER;
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	681b      	ldr	r3, [r3, #0]
 800956e:	6a1b      	ldr	r3, [r3, #32]
 8009570:	613b      	str	r3, [r7, #16]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8009572:	687b      	ldr	r3, [r7, #4]
 8009574:	681b      	ldr	r3, [r3, #0]
 8009576:	6a1a      	ldr	r2, [r3, #32]
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	681b      	ldr	r3, [r3, #0]
 800957c:	f022 0201 	bic.w	r2, r2, #1
 8009580:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8009582:	687b      	ldr	r3, [r7, #4]
 8009584:	681b      	ldr	r3, [r3, #0]
 8009586:	699b      	ldr	r3, [r3, #24]
 8009588:	60fb      	str	r3, [r7, #12]
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800958a:	68fb      	ldr	r3, [r7, #12]
 800958c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009590:	60fb      	str	r3, [r7, #12]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8009592:	683b      	ldr	r3, [r7, #0]
 8009594:	691b      	ldr	r3, [r3, #16]
 8009596:	011b      	lsls	r3, r3, #4
 8009598:	68fa      	ldr	r2, [r7, #12]
 800959a:	4313      	orrs	r3, r2
 800959c:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCMR1 = tmpccmr1;
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	681b      	ldr	r3, [r3, #0]
 80095a2:	68fa      	ldr	r2, [r7, #12]
 80095a4:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	681b      	ldr	r3, [r3, #0]
 80095aa:	693a      	ldr	r2, [r7, #16]
 80095ac:	621a      	str	r2, [r3, #32]
      break;
 80095ae:	e016      	b.n	80095de <TIM_SlaveTimer_SetConfig+0x112>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	6818      	ldr	r0, [r3, #0]
 80095b4:	683b      	ldr	r3, [r7, #0]
 80095b6:	6899      	ldr	r1, [r3, #8]
 80095b8:	683b      	ldr	r3, [r7, #0]
 80095ba:	691b      	ldr	r3, [r3, #16]
 80095bc:	461a      	mov	r2, r3
 80095be:	f000 f86d 	bl	800969c <TIM_TI1_ConfigInputStage>
      break;
 80095c2:	e00c      	b.n	80095de <TIM_SlaveTimer_SetConfig+0x112>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	6818      	ldr	r0, [r3, #0]
 80095c8:	683b      	ldr	r3, [r7, #0]
 80095ca:	6899      	ldr	r1, [r3, #8]
 80095cc:	683b      	ldr	r3, [r7, #0]
 80095ce:	691b      	ldr	r3, [r3, #16]
 80095d0:	461a      	mov	r2, r3
 80095d2:	f000 f8cd 	bl	8009770 <TIM_TI2_ConfigInputStage>
      break;
 80095d6:	e002      	b.n	80095de <TIM_SlaveTimer_SetConfig+0x112>
      break;
 80095d8:	bf00      	nop
 80095da:	e000      	b.n	80095de <TIM_SlaveTimer_SetConfig+0x112>
        break;
 80095dc:	bf00      	nop
  }
  return HAL_OK;
 80095de:	2300      	movs	r3, #0
}
 80095e0:	4618      	mov	r0, r3
 80095e2:	3718      	adds	r7, #24
 80095e4:	46bd      	mov	sp, r7
 80095e6:	bd80      	pop	{r7, pc}

080095e8 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 80095e8:	b480      	push	{r7}
 80095ea:	b087      	sub	sp, #28
 80095ec:	af00      	add	r7, sp, #0
 80095ee:	60f8      	str	r0, [r7, #12]
 80095f0:	60b9      	str	r1, [r7, #8]
 80095f2:	607a      	str	r2, [r7, #4]
 80095f4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80095f6:	68fb      	ldr	r3, [r7, #12]
 80095f8:	6a1b      	ldr	r3, [r3, #32]
 80095fa:	f023 0201 	bic.w	r2, r3, #1
 80095fe:	68fb      	ldr	r3, [r7, #12]
 8009600:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009602:	68fb      	ldr	r3, [r7, #12]
 8009604:	699b      	ldr	r3, [r3, #24]
 8009606:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8009608:	68fb      	ldr	r3, [r7, #12]
 800960a:	6a1b      	ldr	r3, [r3, #32]
 800960c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800960e:	68fb      	ldr	r3, [r7, #12]
 8009610:	4a1f      	ldr	r2, [pc, #124]	; (8009690 <TIM_TI1_SetConfig+0xa8>)
 8009612:	4293      	cmp	r3, r2
 8009614:	d00b      	beq.n	800962e <TIM_TI1_SetConfig+0x46>
 8009616:	68fb      	ldr	r3, [r7, #12]
 8009618:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800961c:	d007      	beq.n	800962e <TIM_TI1_SetConfig+0x46>
 800961e:	68fb      	ldr	r3, [r7, #12]
 8009620:	4a1c      	ldr	r2, [pc, #112]	; (8009694 <TIM_TI1_SetConfig+0xac>)
 8009622:	4293      	cmp	r3, r2
 8009624:	d003      	beq.n	800962e <TIM_TI1_SetConfig+0x46>
 8009626:	68fb      	ldr	r3, [r7, #12]
 8009628:	4a1b      	ldr	r2, [pc, #108]	; (8009698 <TIM_TI1_SetConfig+0xb0>)
 800962a:	4293      	cmp	r3, r2
 800962c:	d101      	bne.n	8009632 <TIM_TI1_SetConfig+0x4a>
 800962e:	2301      	movs	r3, #1
 8009630:	e000      	b.n	8009634 <TIM_TI1_SetConfig+0x4c>
 8009632:	2300      	movs	r3, #0
 8009634:	2b00      	cmp	r3, #0
 8009636:	d008      	beq.n	800964a <TIM_TI1_SetConfig+0x62>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8009638:	697b      	ldr	r3, [r7, #20]
 800963a:	f023 0303 	bic.w	r3, r3, #3
 800963e:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8009640:	697a      	ldr	r2, [r7, #20]
 8009642:	687b      	ldr	r3, [r7, #4]
 8009644:	4313      	orrs	r3, r2
 8009646:	617b      	str	r3, [r7, #20]
 8009648:	e003      	b.n	8009652 <TIM_TI1_SetConfig+0x6a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800964a:	697b      	ldr	r3, [r7, #20]
 800964c:	f043 0301 	orr.w	r3, r3, #1
 8009650:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009652:	697b      	ldr	r3, [r7, #20]
 8009654:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009658:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800965a:	683b      	ldr	r3, [r7, #0]
 800965c:	011b      	lsls	r3, r3, #4
 800965e:	b2db      	uxtb	r3, r3
 8009660:	697a      	ldr	r2, [r7, #20]
 8009662:	4313      	orrs	r3, r2
 8009664:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8009666:	693b      	ldr	r3, [r7, #16]
 8009668:	f023 030a 	bic.w	r3, r3, #10
 800966c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800966e:	68bb      	ldr	r3, [r7, #8]
 8009670:	f003 030a 	and.w	r3, r3, #10
 8009674:	693a      	ldr	r2, [r7, #16]
 8009676:	4313      	orrs	r3, r2
 8009678:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800967a:	68fb      	ldr	r3, [r7, #12]
 800967c:	697a      	ldr	r2, [r7, #20]
 800967e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009680:	68fb      	ldr	r3, [r7, #12]
 8009682:	693a      	ldr	r2, [r7, #16]
 8009684:	621a      	str	r2, [r3, #32]
}
 8009686:	bf00      	nop
 8009688:	371c      	adds	r7, #28
 800968a:	46bd      	mov	sp, r7
 800968c:	bc80      	pop	{r7}
 800968e:	4770      	bx	lr
 8009690:	40012c00 	.word	0x40012c00
 8009694:	40000400 	.word	0x40000400
 8009698:	40000800 	.word	0x40000800

0800969c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800969c:	b480      	push	{r7}
 800969e:	b087      	sub	sp, #28
 80096a0:	af00      	add	r7, sp, #0
 80096a2:	60f8      	str	r0, [r7, #12]
 80096a4:	60b9      	str	r1, [r7, #8]
 80096a6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80096a8:	68fb      	ldr	r3, [r7, #12]
 80096aa:	6a1b      	ldr	r3, [r3, #32]
 80096ac:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80096ae:	68fb      	ldr	r3, [r7, #12]
 80096b0:	6a1b      	ldr	r3, [r3, #32]
 80096b2:	f023 0201 	bic.w	r2, r3, #1
 80096b6:	68fb      	ldr	r3, [r7, #12]
 80096b8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80096ba:	68fb      	ldr	r3, [r7, #12]
 80096bc:	699b      	ldr	r3, [r3, #24]
 80096be:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80096c0:	693b      	ldr	r3, [r7, #16]
 80096c2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80096c6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	011b      	lsls	r3, r3, #4
 80096cc:	693a      	ldr	r2, [r7, #16]
 80096ce:	4313      	orrs	r3, r2
 80096d0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80096d2:	697b      	ldr	r3, [r7, #20]
 80096d4:	f023 030a 	bic.w	r3, r3, #10
 80096d8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80096da:	697a      	ldr	r2, [r7, #20]
 80096dc:	68bb      	ldr	r3, [r7, #8]
 80096de:	4313      	orrs	r3, r2
 80096e0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80096e2:	68fb      	ldr	r3, [r7, #12]
 80096e4:	693a      	ldr	r2, [r7, #16]
 80096e6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80096e8:	68fb      	ldr	r3, [r7, #12]
 80096ea:	697a      	ldr	r2, [r7, #20]
 80096ec:	621a      	str	r2, [r3, #32]
}
 80096ee:	bf00      	nop
 80096f0:	371c      	adds	r7, #28
 80096f2:	46bd      	mov	sp, r7
 80096f4:	bc80      	pop	{r7}
 80096f6:	4770      	bx	lr

080096f8 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80096f8:	b480      	push	{r7}
 80096fa:	b087      	sub	sp, #28
 80096fc:	af00      	add	r7, sp, #0
 80096fe:	60f8      	str	r0, [r7, #12]
 8009700:	60b9      	str	r1, [r7, #8]
 8009702:	607a      	str	r2, [r7, #4]
 8009704:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009706:	68fb      	ldr	r3, [r7, #12]
 8009708:	6a1b      	ldr	r3, [r3, #32]
 800970a:	f023 0210 	bic.w	r2, r3, #16
 800970e:	68fb      	ldr	r3, [r7, #12]
 8009710:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009712:	68fb      	ldr	r3, [r7, #12]
 8009714:	699b      	ldr	r3, [r3, #24]
 8009716:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8009718:	68fb      	ldr	r3, [r7, #12]
 800971a:	6a1b      	ldr	r3, [r3, #32]
 800971c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 800971e:	697b      	ldr	r3, [r7, #20]
 8009720:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009724:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8009726:	687b      	ldr	r3, [r7, #4]
 8009728:	021b      	lsls	r3, r3, #8
 800972a:	697a      	ldr	r2, [r7, #20]
 800972c:	4313      	orrs	r3, r2
 800972e:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8009730:	697b      	ldr	r3, [r7, #20]
 8009732:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8009736:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8009738:	683b      	ldr	r3, [r7, #0]
 800973a:	031b      	lsls	r3, r3, #12
 800973c:	b29b      	uxth	r3, r3
 800973e:	697a      	ldr	r2, [r7, #20]
 8009740:	4313      	orrs	r3, r2
 8009742:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8009744:	693b      	ldr	r3, [r7, #16]
 8009746:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800974a:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800974c:	68bb      	ldr	r3, [r7, #8]
 800974e:	011b      	lsls	r3, r3, #4
 8009750:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8009754:	693a      	ldr	r2, [r7, #16]
 8009756:	4313      	orrs	r3, r2
 8009758:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800975a:	68fb      	ldr	r3, [r7, #12]
 800975c:	697a      	ldr	r2, [r7, #20]
 800975e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009760:	68fb      	ldr	r3, [r7, #12]
 8009762:	693a      	ldr	r2, [r7, #16]
 8009764:	621a      	str	r2, [r3, #32]
}
 8009766:	bf00      	nop
 8009768:	371c      	adds	r7, #28
 800976a:	46bd      	mov	sp, r7
 800976c:	bc80      	pop	{r7}
 800976e:	4770      	bx	lr

08009770 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009770:	b480      	push	{r7}
 8009772:	b087      	sub	sp, #28
 8009774:	af00      	add	r7, sp, #0
 8009776:	60f8      	str	r0, [r7, #12]
 8009778:	60b9      	str	r1, [r7, #8]
 800977a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800977c:	68fb      	ldr	r3, [r7, #12]
 800977e:	6a1b      	ldr	r3, [r3, #32]
 8009780:	f023 0210 	bic.w	r2, r3, #16
 8009784:	68fb      	ldr	r3, [r7, #12]
 8009786:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009788:	68fb      	ldr	r3, [r7, #12]
 800978a:	699b      	ldr	r3, [r3, #24]
 800978c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800978e:	68fb      	ldr	r3, [r7, #12]
 8009790:	6a1b      	ldr	r3, [r3, #32]
 8009792:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8009794:	697b      	ldr	r3, [r7, #20]
 8009796:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800979a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800979c:	687b      	ldr	r3, [r7, #4]
 800979e:	031b      	lsls	r3, r3, #12
 80097a0:	697a      	ldr	r2, [r7, #20]
 80097a2:	4313      	orrs	r3, r2
 80097a4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80097a6:	693b      	ldr	r3, [r7, #16]
 80097a8:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80097ac:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80097ae:	68bb      	ldr	r3, [r7, #8]
 80097b0:	011b      	lsls	r3, r3, #4
 80097b2:	693a      	ldr	r2, [r7, #16]
 80097b4:	4313      	orrs	r3, r2
 80097b6:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80097b8:	68fb      	ldr	r3, [r7, #12]
 80097ba:	697a      	ldr	r2, [r7, #20]
 80097bc:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80097be:	68fb      	ldr	r3, [r7, #12]
 80097c0:	693a      	ldr	r2, [r7, #16]
 80097c2:	621a      	str	r2, [r3, #32]
}
 80097c4:	bf00      	nop
 80097c6:	371c      	adds	r7, #28
 80097c8:	46bd      	mov	sp, r7
 80097ca:	bc80      	pop	{r7}
 80097cc:	4770      	bx	lr

080097ce <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80097ce:	b480      	push	{r7}
 80097d0:	b087      	sub	sp, #28
 80097d2:	af00      	add	r7, sp, #0
 80097d4:	60f8      	str	r0, [r7, #12]
 80097d6:	60b9      	str	r1, [r7, #8]
 80097d8:	607a      	str	r2, [r7, #4]
 80097da:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80097dc:	68fb      	ldr	r3, [r7, #12]
 80097de:	6a1b      	ldr	r3, [r3, #32]
 80097e0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80097e4:	68fb      	ldr	r3, [r7, #12]
 80097e6:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80097e8:	68fb      	ldr	r3, [r7, #12]
 80097ea:	69db      	ldr	r3, [r3, #28]
 80097ec:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80097ee:	68fb      	ldr	r3, [r7, #12]
 80097f0:	6a1b      	ldr	r3, [r3, #32]
 80097f2:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 80097f4:	697b      	ldr	r3, [r7, #20]
 80097f6:	f023 0303 	bic.w	r3, r3, #3
 80097fa:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 80097fc:	697a      	ldr	r2, [r7, #20]
 80097fe:	687b      	ldr	r3, [r7, #4]
 8009800:	4313      	orrs	r3, r2
 8009802:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8009804:	697b      	ldr	r3, [r7, #20]
 8009806:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800980a:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800980c:	683b      	ldr	r3, [r7, #0]
 800980e:	011b      	lsls	r3, r3, #4
 8009810:	b2db      	uxtb	r3, r3
 8009812:	697a      	ldr	r2, [r7, #20]
 8009814:	4313      	orrs	r3, r2
 8009816:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P);
 8009818:	693b      	ldr	r3, [r7, #16]
 800981a:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800981e:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & TIM_CCER_CC3P);
 8009820:	68bb      	ldr	r3, [r7, #8]
 8009822:	021b      	lsls	r3, r3, #8
 8009824:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009828:	693a      	ldr	r2, [r7, #16]
 800982a:	4313      	orrs	r3, r2
 800982c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800982e:	68fb      	ldr	r3, [r7, #12]
 8009830:	697a      	ldr	r2, [r7, #20]
 8009832:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8009834:	68fb      	ldr	r3, [r7, #12]
 8009836:	693a      	ldr	r2, [r7, #16]
 8009838:	621a      	str	r2, [r3, #32]
}
 800983a:	bf00      	nop
 800983c:	371c      	adds	r7, #28
 800983e:	46bd      	mov	sp, r7
 8009840:	bc80      	pop	{r7}
 8009842:	4770      	bx	lr

08009844 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8009844:	b480      	push	{r7}
 8009846:	b087      	sub	sp, #28
 8009848:	af00      	add	r7, sp, #0
 800984a:	60f8      	str	r0, [r7, #12]
 800984c:	60b9      	str	r1, [r7, #8]
 800984e:	607a      	str	r2, [r7, #4]
 8009850:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8009852:	68fb      	ldr	r3, [r7, #12]
 8009854:	6a1b      	ldr	r3, [r3, #32]
 8009856:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800985a:	68fb      	ldr	r3, [r7, #12]
 800985c:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800985e:	68fb      	ldr	r3, [r7, #12]
 8009860:	69db      	ldr	r3, [r3, #28]
 8009862:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8009864:	68fb      	ldr	r3, [r7, #12]
 8009866:	6a1b      	ldr	r3, [r3, #32]
 8009868:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800986a:	697b      	ldr	r3, [r7, #20]
 800986c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009870:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8009872:	687b      	ldr	r3, [r7, #4]
 8009874:	021b      	lsls	r3, r3, #8
 8009876:	697a      	ldr	r2, [r7, #20]
 8009878:	4313      	orrs	r3, r2
 800987a:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 800987c:	697b      	ldr	r3, [r7, #20]
 800987e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8009882:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8009884:	683b      	ldr	r3, [r7, #0]
 8009886:	031b      	lsls	r3, r3, #12
 8009888:	b29b      	uxth	r3, r3
 800988a:	697a      	ldr	r2, [r7, #20]
 800988c:	4313      	orrs	r3, r2
 800988e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P);
 8009890:	693b      	ldr	r3, [r7, #16]
 8009892:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8009896:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & TIM_CCER_CC4P);
 8009898:	68bb      	ldr	r3, [r7, #8]
 800989a:	031b      	lsls	r3, r3, #12
 800989c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80098a0:	693a      	ldr	r2, [r7, #16]
 80098a2:	4313      	orrs	r3, r2
 80098a4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80098a6:	68fb      	ldr	r3, [r7, #12]
 80098a8:	697a      	ldr	r2, [r7, #20]
 80098aa:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 80098ac:	68fb      	ldr	r3, [r7, #12]
 80098ae:	693a      	ldr	r2, [r7, #16]
 80098b0:	621a      	str	r2, [r3, #32]
}
 80098b2:	bf00      	nop
 80098b4:	371c      	adds	r7, #28
 80098b6:	46bd      	mov	sp, r7
 80098b8:	bc80      	pop	{r7}
 80098ba:	4770      	bx	lr

080098bc <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80098bc:	b480      	push	{r7}
 80098be:	b085      	sub	sp, #20
 80098c0:	af00      	add	r7, sp, #0
 80098c2:	6078      	str	r0, [r7, #4]
 80098c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	689b      	ldr	r3, [r3, #8]
 80098ca:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80098cc:	68fb      	ldr	r3, [r7, #12]
 80098ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80098d2:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80098d4:	683a      	ldr	r2, [r7, #0]
 80098d6:	68fb      	ldr	r3, [r7, #12]
 80098d8:	4313      	orrs	r3, r2
 80098da:	f043 0307 	orr.w	r3, r3, #7
 80098de:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80098e0:	687b      	ldr	r3, [r7, #4]
 80098e2:	68fa      	ldr	r2, [r7, #12]
 80098e4:	609a      	str	r2, [r3, #8]
}
 80098e6:	bf00      	nop
 80098e8:	3714      	adds	r7, #20
 80098ea:	46bd      	mov	sp, r7
 80098ec:	bc80      	pop	{r7}
 80098ee:	4770      	bx	lr

080098f0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80098f0:	b480      	push	{r7}
 80098f2:	b087      	sub	sp, #28
 80098f4:	af00      	add	r7, sp, #0
 80098f6:	60f8      	str	r0, [r7, #12]
 80098f8:	60b9      	str	r1, [r7, #8]
 80098fa:	607a      	str	r2, [r7, #4]
 80098fc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80098fe:	68fb      	ldr	r3, [r7, #12]
 8009900:	689b      	ldr	r3, [r3, #8]
 8009902:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009904:	697b      	ldr	r3, [r7, #20]
 8009906:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800990a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800990c:	683b      	ldr	r3, [r7, #0]
 800990e:	021a      	lsls	r2, r3, #8
 8009910:	687b      	ldr	r3, [r7, #4]
 8009912:	431a      	orrs	r2, r3
 8009914:	68bb      	ldr	r3, [r7, #8]
 8009916:	4313      	orrs	r3, r2
 8009918:	697a      	ldr	r2, [r7, #20]
 800991a:	4313      	orrs	r3, r2
 800991c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800991e:	68fb      	ldr	r3, [r7, #12]
 8009920:	697a      	ldr	r2, [r7, #20]
 8009922:	609a      	str	r2, [r3, #8]
}
 8009924:	bf00      	nop
 8009926:	371c      	adds	r7, #28
 8009928:	46bd      	mov	sp, r7
 800992a:	bc80      	pop	{r7}
 800992c:	4770      	bx	lr

0800992e <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800992e:	b480      	push	{r7}
 8009930:	b087      	sub	sp, #28
 8009932:	af00      	add	r7, sp, #0
 8009934:	60f8      	str	r0, [r7, #12]
 8009936:	60b9      	str	r1, [r7, #8]
 8009938:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800993a:	68bb      	ldr	r3, [r7, #8]
 800993c:	f003 031f 	and.w	r3, r3, #31
 8009940:	2201      	movs	r2, #1
 8009942:	fa02 f303 	lsl.w	r3, r2, r3
 8009946:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8009948:	68fb      	ldr	r3, [r7, #12]
 800994a:	6a1a      	ldr	r2, [r3, #32]
 800994c:	697b      	ldr	r3, [r7, #20]
 800994e:	43db      	mvns	r3, r3
 8009950:	401a      	ands	r2, r3
 8009952:	68fb      	ldr	r3, [r7, #12]
 8009954:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8009956:	68fb      	ldr	r3, [r7, #12]
 8009958:	6a1a      	ldr	r2, [r3, #32]
 800995a:	68bb      	ldr	r3, [r7, #8]
 800995c:	f003 031f 	and.w	r3, r3, #31
 8009960:	6879      	ldr	r1, [r7, #4]
 8009962:	fa01 f303 	lsl.w	r3, r1, r3
 8009966:	431a      	orrs	r2, r3
 8009968:	68fb      	ldr	r3, [r7, #12]
 800996a:	621a      	str	r2, [r3, #32]
}
 800996c:	bf00      	nop
 800996e:	371c      	adds	r7, #28
 8009970:	46bd      	mov	sp, r7
 8009972:	bc80      	pop	{r7}
 8009974:	4770      	bx	lr
	...

08009978 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009978:	b480      	push	{r7}
 800997a:	b085      	sub	sp, #20
 800997c:	af00      	add	r7, sp, #0
 800997e:	6078      	str	r0, [r7, #4]
 8009980:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8009982:	687b      	ldr	r3, [r7, #4]
 8009984:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009988:	2b01      	cmp	r3, #1
 800998a:	d101      	bne.n	8009990 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800998c:	2302      	movs	r3, #2
 800998e:	e046      	b.n	8009a1e <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8009990:	687b      	ldr	r3, [r7, #4]
 8009992:	2201      	movs	r2, #1
 8009994:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	2202      	movs	r2, #2
 800999c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80099a0:	687b      	ldr	r3, [r7, #4]
 80099a2:	681b      	ldr	r3, [r3, #0]
 80099a4:	685b      	ldr	r3, [r3, #4]
 80099a6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80099a8:	687b      	ldr	r3, [r7, #4]
 80099aa:	681b      	ldr	r3, [r3, #0]
 80099ac:	689b      	ldr	r3, [r3, #8]
 80099ae:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80099b0:	68fb      	ldr	r3, [r7, #12]
 80099b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80099b6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80099b8:	683b      	ldr	r3, [r7, #0]
 80099ba:	681b      	ldr	r3, [r3, #0]
 80099bc:	68fa      	ldr	r2, [r7, #12]
 80099be:	4313      	orrs	r3, r2
 80099c0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80099c2:	687b      	ldr	r3, [r7, #4]
 80099c4:	681b      	ldr	r3, [r3, #0]
 80099c6:	68fa      	ldr	r2, [r7, #12]
 80099c8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80099ca:	687b      	ldr	r3, [r7, #4]
 80099cc:	681b      	ldr	r3, [r3, #0]
 80099ce:	4a16      	ldr	r2, [pc, #88]	; (8009a28 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80099d0:	4293      	cmp	r3, r2
 80099d2:	d00e      	beq.n	80099f2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80099d4:	687b      	ldr	r3, [r7, #4]
 80099d6:	681b      	ldr	r3, [r3, #0]
 80099d8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80099dc:	d009      	beq.n	80099f2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80099de:	687b      	ldr	r3, [r7, #4]
 80099e0:	681b      	ldr	r3, [r3, #0]
 80099e2:	4a12      	ldr	r2, [pc, #72]	; (8009a2c <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80099e4:	4293      	cmp	r3, r2
 80099e6:	d004      	beq.n	80099f2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80099e8:	687b      	ldr	r3, [r7, #4]
 80099ea:	681b      	ldr	r3, [r3, #0]
 80099ec:	4a10      	ldr	r2, [pc, #64]	; (8009a30 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80099ee:	4293      	cmp	r3, r2
 80099f0:	d10c      	bne.n	8009a0c <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80099f2:	68bb      	ldr	r3, [r7, #8]
 80099f4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80099f8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80099fa:	683b      	ldr	r3, [r7, #0]
 80099fc:	685b      	ldr	r3, [r3, #4]
 80099fe:	68ba      	ldr	r2, [r7, #8]
 8009a00:	4313      	orrs	r3, r2
 8009a02:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009a04:	687b      	ldr	r3, [r7, #4]
 8009a06:	681b      	ldr	r3, [r3, #0]
 8009a08:	68ba      	ldr	r2, [r7, #8]
 8009a0a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009a0c:	687b      	ldr	r3, [r7, #4]
 8009a0e:	2201      	movs	r2, #1
 8009a10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009a14:	687b      	ldr	r3, [r7, #4]
 8009a16:	2200      	movs	r2, #0
 8009a18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009a1c:	2300      	movs	r3, #0
}
 8009a1e:	4618      	mov	r0, r3
 8009a20:	3714      	adds	r7, #20
 8009a22:	46bd      	mov	sp, r7
 8009a24:	bc80      	pop	{r7}
 8009a26:	4770      	bx	lr
 8009a28:	40012c00 	.word	0x40012c00
 8009a2c:	40000400 	.word	0x40000400
 8009a30:	40000800 	.word	0x40000800

08009a34 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8009a34:	b480      	push	{r7}
 8009a36:	b085      	sub	sp, #20
 8009a38:	af00      	add	r7, sp, #0
 8009a3a:	6078      	str	r0, [r7, #4]
 8009a3c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8009a3e:	2300      	movs	r3, #0
 8009a40:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8009a42:	687b      	ldr	r3, [r7, #4]
 8009a44:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009a48:	2b01      	cmp	r3, #1
 8009a4a:	d101      	bne.n	8009a50 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8009a4c:	2302      	movs	r3, #2
 8009a4e:	e03d      	b.n	8009acc <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8009a50:	687b      	ldr	r3, [r7, #4]
 8009a52:	2201      	movs	r2, #1
 8009a54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8009a58:	68fb      	ldr	r3, [r7, #12]
 8009a5a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8009a5e:	683b      	ldr	r3, [r7, #0]
 8009a60:	68db      	ldr	r3, [r3, #12]
 8009a62:	4313      	orrs	r3, r2
 8009a64:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8009a66:	68fb      	ldr	r3, [r7, #12]
 8009a68:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8009a6c:	683b      	ldr	r3, [r7, #0]
 8009a6e:	689b      	ldr	r3, [r3, #8]
 8009a70:	4313      	orrs	r3, r2
 8009a72:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8009a74:	68fb      	ldr	r3, [r7, #12]
 8009a76:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8009a7a:	683b      	ldr	r3, [r7, #0]
 8009a7c:	685b      	ldr	r3, [r3, #4]
 8009a7e:	4313      	orrs	r3, r2
 8009a80:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8009a82:	68fb      	ldr	r3, [r7, #12]
 8009a84:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8009a88:	683b      	ldr	r3, [r7, #0]
 8009a8a:	681b      	ldr	r3, [r3, #0]
 8009a8c:	4313      	orrs	r3, r2
 8009a8e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8009a90:	68fb      	ldr	r3, [r7, #12]
 8009a92:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8009a96:	683b      	ldr	r3, [r7, #0]
 8009a98:	691b      	ldr	r3, [r3, #16]
 8009a9a:	4313      	orrs	r3, r2
 8009a9c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8009a9e:	68fb      	ldr	r3, [r7, #12]
 8009aa0:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8009aa4:	683b      	ldr	r3, [r7, #0]
 8009aa6:	695b      	ldr	r3, [r3, #20]
 8009aa8:	4313      	orrs	r3, r2
 8009aaa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8009aac:	68fb      	ldr	r3, [r7, #12]
 8009aae:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8009ab2:	683b      	ldr	r3, [r7, #0]
 8009ab4:	69db      	ldr	r3, [r3, #28]
 8009ab6:	4313      	orrs	r3, r2
 8009ab8:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8009aba:	687b      	ldr	r3, [r7, #4]
 8009abc:	681b      	ldr	r3, [r3, #0]
 8009abe:	68fa      	ldr	r2, [r7, #12]
 8009ac0:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8009ac2:	687b      	ldr	r3, [r7, #4]
 8009ac4:	2200      	movs	r2, #0
 8009ac6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009aca:	2300      	movs	r3, #0
}
 8009acc:	4618      	mov	r0, r3
 8009ace:	3714      	adds	r7, #20
 8009ad0:	46bd      	mov	sp, r7
 8009ad2:	bc80      	pop	{r7}
 8009ad4:	4770      	bx	lr

08009ad6 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009ad6:	b480      	push	{r7}
 8009ad8:	b083      	sub	sp, #12
 8009ada:	af00      	add	r7, sp, #0
 8009adc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009ade:	bf00      	nop
 8009ae0:	370c      	adds	r7, #12
 8009ae2:	46bd      	mov	sp, r7
 8009ae4:	bc80      	pop	{r7}
 8009ae6:	4770      	bx	lr

08009ae8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8009ae8:	b480      	push	{r7}
 8009aea:	b083      	sub	sp, #12
 8009aec:	af00      	add	r7, sp, #0
 8009aee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8009af0:	bf00      	nop
 8009af2:	370c      	adds	r7, #12
 8009af4:	46bd      	mov	sp, r7
 8009af6:	bc80      	pop	{r7}
 8009af8:	4770      	bx	lr

08009afa <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009afa:	b580      	push	{r7, lr}
 8009afc:	b082      	sub	sp, #8
 8009afe:	af00      	add	r7, sp, #0
 8009b00:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009b02:	687b      	ldr	r3, [r7, #4]
 8009b04:	2b00      	cmp	r3, #0
 8009b06:	d101      	bne.n	8009b0c <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009b08:	2301      	movs	r3, #1
 8009b0a:	e03f      	b.n	8009b8c <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8009b0c:	687b      	ldr	r3, [r7, #4]
 8009b0e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009b12:	b2db      	uxtb	r3, r3
 8009b14:	2b00      	cmp	r3, #0
 8009b16:	d106      	bne.n	8009b26 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009b18:	687b      	ldr	r3, [r7, #4]
 8009b1a:	2200      	movs	r2, #0
 8009b1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009b20:	6878      	ldr	r0, [r7, #4]
 8009b22:	f7fb f9cb 	bl	8004ebc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009b26:	687b      	ldr	r3, [r7, #4]
 8009b28:	2224      	movs	r2, #36	; 0x24
 8009b2a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8009b2e:	687b      	ldr	r3, [r7, #4]
 8009b30:	681b      	ldr	r3, [r3, #0]
 8009b32:	68da      	ldr	r2, [r3, #12]
 8009b34:	687b      	ldr	r3, [r7, #4]
 8009b36:	681b      	ldr	r3, [r3, #0]
 8009b38:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8009b3c:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8009b3e:	6878      	ldr	r0, [r7, #4]
 8009b40:	f000 f904 	bl	8009d4c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009b44:	687b      	ldr	r3, [r7, #4]
 8009b46:	681b      	ldr	r3, [r3, #0]
 8009b48:	691a      	ldr	r2, [r3, #16]
 8009b4a:	687b      	ldr	r3, [r7, #4]
 8009b4c:	681b      	ldr	r3, [r3, #0]
 8009b4e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8009b52:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009b54:	687b      	ldr	r3, [r7, #4]
 8009b56:	681b      	ldr	r3, [r3, #0]
 8009b58:	695a      	ldr	r2, [r3, #20]
 8009b5a:	687b      	ldr	r3, [r7, #4]
 8009b5c:	681b      	ldr	r3, [r3, #0]
 8009b5e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8009b62:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8009b64:	687b      	ldr	r3, [r7, #4]
 8009b66:	681b      	ldr	r3, [r3, #0]
 8009b68:	68da      	ldr	r2, [r3, #12]
 8009b6a:	687b      	ldr	r3, [r7, #4]
 8009b6c:	681b      	ldr	r3, [r3, #0]
 8009b6e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8009b72:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009b74:	687b      	ldr	r3, [r7, #4]
 8009b76:	2200      	movs	r2, #0
 8009b78:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8009b7a:	687b      	ldr	r3, [r7, #4]
 8009b7c:	2220      	movs	r2, #32
 8009b7e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8009b82:	687b      	ldr	r3, [r7, #4]
 8009b84:	2220      	movs	r2, #32
 8009b86:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8009b8a:	2300      	movs	r3, #0
}
 8009b8c:	4618      	mov	r0, r3
 8009b8e:	3708      	adds	r7, #8
 8009b90:	46bd      	mov	sp, r7
 8009b92:	bd80      	pop	{r7, pc}

08009b94 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009b94:	b580      	push	{r7, lr}
 8009b96:	b08a      	sub	sp, #40	; 0x28
 8009b98:	af02      	add	r7, sp, #8
 8009b9a:	60f8      	str	r0, [r7, #12]
 8009b9c:	60b9      	str	r1, [r7, #8]
 8009b9e:	603b      	str	r3, [r7, #0]
 8009ba0:	4613      	mov	r3, r2
 8009ba2:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8009ba4:	2300      	movs	r3, #0
 8009ba6:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8009ba8:	68fb      	ldr	r3, [r7, #12]
 8009baa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009bae:	b2db      	uxtb	r3, r3
 8009bb0:	2b20      	cmp	r3, #32
 8009bb2:	d17c      	bne.n	8009cae <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8009bb4:	68bb      	ldr	r3, [r7, #8]
 8009bb6:	2b00      	cmp	r3, #0
 8009bb8:	d002      	beq.n	8009bc0 <HAL_UART_Transmit+0x2c>
 8009bba:	88fb      	ldrh	r3, [r7, #6]
 8009bbc:	2b00      	cmp	r3, #0
 8009bbe:	d101      	bne.n	8009bc4 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8009bc0:	2301      	movs	r3, #1
 8009bc2:	e075      	b.n	8009cb0 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8009bc4:	68fb      	ldr	r3, [r7, #12]
 8009bc6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009bca:	2b01      	cmp	r3, #1
 8009bcc:	d101      	bne.n	8009bd2 <HAL_UART_Transmit+0x3e>
 8009bce:	2302      	movs	r3, #2
 8009bd0:	e06e      	b.n	8009cb0 <HAL_UART_Transmit+0x11c>
 8009bd2:	68fb      	ldr	r3, [r7, #12]
 8009bd4:	2201      	movs	r2, #1
 8009bd6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009bda:	68fb      	ldr	r3, [r7, #12]
 8009bdc:	2200      	movs	r2, #0
 8009bde:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8009be0:	68fb      	ldr	r3, [r7, #12]
 8009be2:	2221      	movs	r2, #33	; 0x21
 8009be4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8009be8:	f7fc f970 	bl	8005ecc <HAL_GetTick>
 8009bec:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8009bee:	68fb      	ldr	r3, [r7, #12]
 8009bf0:	88fa      	ldrh	r2, [r7, #6]
 8009bf2:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8009bf4:	68fb      	ldr	r3, [r7, #12]
 8009bf6:	88fa      	ldrh	r2, [r7, #6]
 8009bf8:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009bfa:	68fb      	ldr	r3, [r7, #12]
 8009bfc:	689b      	ldr	r3, [r3, #8]
 8009bfe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009c02:	d108      	bne.n	8009c16 <HAL_UART_Transmit+0x82>
 8009c04:	68fb      	ldr	r3, [r7, #12]
 8009c06:	691b      	ldr	r3, [r3, #16]
 8009c08:	2b00      	cmp	r3, #0
 8009c0a:	d104      	bne.n	8009c16 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8009c0c:	2300      	movs	r3, #0
 8009c0e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8009c10:	68bb      	ldr	r3, [r7, #8]
 8009c12:	61bb      	str	r3, [r7, #24]
 8009c14:	e003      	b.n	8009c1e <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8009c16:	68bb      	ldr	r3, [r7, #8]
 8009c18:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8009c1a:	2300      	movs	r3, #0
 8009c1c:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8009c1e:	68fb      	ldr	r3, [r7, #12]
 8009c20:	2200      	movs	r2, #0
 8009c22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8009c26:	e02a      	b.n	8009c7e <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8009c28:	683b      	ldr	r3, [r7, #0]
 8009c2a:	9300      	str	r3, [sp, #0]
 8009c2c:	697b      	ldr	r3, [r7, #20]
 8009c2e:	2200      	movs	r2, #0
 8009c30:	2180      	movs	r1, #128	; 0x80
 8009c32:	68f8      	ldr	r0, [r7, #12]
 8009c34:	f000 f840 	bl	8009cb8 <UART_WaitOnFlagUntilTimeout>
 8009c38:	4603      	mov	r3, r0
 8009c3a:	2b00      	cmp	r3, #0
 8009c3c:	d001      	beq.n	8009c42 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8009c3e:	2303      	movs	r3, #3
 8009c40:	e036      	b.n	8009cb0 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8009c42:	69fb      	ldr	r3, [r7, #28]
 8009c44:	2b00      	cmp	r3, #0
 8009c46:	d10b      	bne.n	8009c60 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8009c48:	69bb      	ldr	r3, [r7, #24]
 8009c4a:	881b      	ldrh	r3, [r3, #0]
 8009c4c:	461a      	mov	r2, r3
 8009c4e:	68fb      	ldr	r3, [r7, #12]
 8009c50:	681b      	ldr	r3, [r3, #0]
 8009c52:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009c56:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8009c58:	69bb      	ldr	r3, [r7, #24]
 8009c5a:	3302      	adds	r3, #2
 8009c5c:	61bb      	str	r3, [r7, #24]
 8009c5e:	e007      	b.n	8009c70 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8009c60:	69fb      	ldr	r3, [r7, #28]
 8009c62:	781a      	ldrb	r2, [r3, #0]
 8009c64:	68fb      	ldr	r3, [r7, #12]
 8009c66:	681b      	ldr	r3, [r3, #0]
 8009c68:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8009c6a:	69fb      	ldr	r3, [r7, #28]
 8009c6c:	3301      	adds	r3, #1
 8009c6e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8009c70:	68fb      	ldr	r3, [r7, #12]
 8009c72:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8009c74:	b29b      	uxth	r3, r3
 8009c76:	3b01      	subs	r3, #1
 8009c78:	b29a      	uxth	r2, r3
 8009c7a:	68fb      	ldr	r3, [r7, #12]
 8009c7c:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8009c7e:	68fb      	ldr	r3, [r7, #12]
 8009c80:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8009c82:	b29b      	uxth	r3, r3
 8009c84:	2b00      	cmp	r3, #0
 8009c86:	d1cf      	bne.n	8009c28 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8009c88:	683b      	ldr	r3, [r7, #0]
 8009c8a:	9300      	str	r3, [sp, #0]
 8009c8c:	697b      	ldr	r3, [r7, #20]
 8009c8e:	2200      	movs	r2, #0
 8009c90:	2140      	movs	r1, #64	; 0x40
 8009c92:	68f8      	ldr	r0, [r7, #12]
 8009c94:	f000 f810 	bl	8009cb8 <UART_WaitOnFlagUntilTimeout>
 8009c98:	4603      	mov	r3, r0
 8009c9a:	2b00      	cmp	r3, #0
 8009c9c:	d001      	beq.n	8009ca2 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8009c9e:	2303      	movs	r3, #3
 8009ca0:	e006      	b.n	8009cb0 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8009ca2:	68fb      	ldr	r3, [r7, #12]
 8009ca4:	2220      	movs	r2, #32
 8009ca6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8009caa:	2300      	movs	r3, #0
 8009cac:	e000      	b.n	8009cb0 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8009cae:	2302      	movs	r3, #2
  }
}
 8009cb0:	4618      	mov	r0, r3
 8009cb2:	3720      	adds	r7, #32
 8009cb4:	46bd      	mov	sp, r7
 8009cb6:	bd80      	pop	{r7, pc}

08009cb8 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8009cb8:	b580      	push	{r7, lr}
 8009cba:	b084      	sub	sp, #16
 8009cbc:	af00      	add	r7, sp, #0
 8009cbe:	60f8      	str	r0, [r7, #12]
 8009cc0:	60b9      	str	r1, [r7, #8]
 8009cc2:	603b      	str	r3, [r7, #0]
 8009cc4:	4613      	mov	r3, r2
 8009cc6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009cc8:	e02c      	b.n	8009d24 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009cca:	69bb      	ldr	r3, [r7, #24]
 8009ccc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009cd0:	d028      	beq.n	8009d24 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8009cd2:	69bb      	ldr	r3, [r7, #24]
 8009cd4:	2b00      	cmp	r3, #0
 8009cd6:	d007      	beq.n	8009ce8 <UART_WaitOnFlagUntilTimeout+0x30>
 8009cd8:	f7fc f8f8 	bl	8005ecc <HAL_GetTick>
 8009cdc:	4602      	mov	r2, r0
 8009cde:	683b      	ldr	r3, [r7, #0]
 8009ce0:	1ad3      	subs	r3, r2, r3
 8009ce2:	69ba      	ldr	r2, [r7, #24]
 8009ce4:	429a      	cmp	r2, r3
 8009ce6:	d21d      	bcs.n	8009d24 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8009ce8:	68fb      	ldr	r3, [r7, #12]
 8009cea:	681b      	ldr	r3, [r3, #0]
 8009cec:	68da      	ldr	r2, [r3, #12]
 8009cee:	68fb      	ldr	r3, [r7, #12]
 8009cf0:	681b      	ldr	r3, [r3, #0]
 8009cf2:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8009cf6:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009cf8:	68fb      	ldr	r3, [r7, #12]
 8009cfa:	681b      	ldr	r3, [r3, #0]
 8009cfc:	695a      	ldr	r2, [r3, #20]
 8009cfe:	68fb      	ldr	r3, [r7, #12]
 8009d00:	681b      	ldr	r3, [r3, #0]
 8009d02:	f022 0201 	bic.w	r2, r2, #1
 8009d06:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8009d08:	68fb      	ldr	r3, [r7, #12]
 8009d0a:	2220      	movs	r2, #32
 8009d0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8009d10:	68fb      	ldr	r3, [r7, #12]
 8009d12:	2220      	movs	r2, #32
 8009d14:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8009d18:	68fb      	ldr	r3, [r7, #12]
 8009d1a:	2200      	movs	r2, #0
 8009d1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8009d20:	2303      	movs	r3, #3
 8009d22:	e00f      	b.n	8009d44 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009d24:	68fb      	ldr	r3, [r7, #12]
 8009d26:	681b      	ldr	r3, [r3, #0]
 8009d28:	681a      	ldr	r2, [r3, #0]
 8009d2a:	68bb      	ldr	r3, [r7, #8]
 8009d2c:	4013      	ands	r3, r2
 8009d2e:	68ba      	ldr	r2, [r7, #8]
 8009d30:	429a      	cmp	r2, r3
 8009d32:	bf0c      	ite	eq
 8009d34:	2301      	moveq	r3, #1
 8009d36:	2300      	movne	r3, #0
 8009d38:	b2db      	uxtb	r3, r3
 8009d3a:	461a      	mov	r2, r3
 8009d3c:	79fb      	ldrb	r3, [r7, #7]
 8009d3e:	429a      	cmp	r2, r3
 8009d40:	d0c3      	beq.n	8009cca <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8009d42:	2300      	movs	r3, #0
}
 8009d44:	4618      	mov	r0, r3
 8009d46:	3710      	adds	r7, #16
 8009d48:	46bd      	mov	sp, r7
 8009d4a:	bd80      	pop	{r7, pc}

08009d4c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009d4c:	b580      	push	{r7, lr}
 8009d4e:	b084      	sub	sp, #16
 8009d50:	af00      	add	r7, sp, #0
 8009d52:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009d54:	687b      	ldr	r3, [r7, #4]
 8009d56:	681b      	ldr	r3, [r3, #0]
 8009d58:	691b      	ldr	r3, [r3, #16]
 8009d5a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8009d5e:	687b      	ldr	r3, [r7, #4]
 8009d60:	68da      	ldr	r2, [r3, #12]
 8009d62:	687b      	ldr	r3, [r7, #4]
 8009d64:	681b      	ldr	r3, [r3, #0]
 8009d66:	430a      	orrs	r2, r1
 8009d68:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8009d6a:	687b      	ldr	r3, [r7, #4]
 8009d6c:	689a      	ldr	r2, [r3, #8]
 8009d6e:	687b      	ldr	r3, [r7, #4]
 8009d70:	691b      	ldr	r3, [r3, #16]
 8009d72:	431a      	orrs	r2, r3
 8009d74:	687b      	ldr	r3, [r7, #4]
 8009d76:	695b      	ldr	r3, [r3, #20]
 8009d78:	4313      	orrs	r3, r2
 8009d7a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8009d7c:	687b      	ldr	r3, [r7, #4]
 8009d7e:	681b      	ldr	r3, [r3, #0]
 8009d80:	68db      	ldr	r3, [r3, #12]
 8009d82:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8009d86:	f023 030c 	bic.w	r3, r3, #12
 8009d8a:	687a      	ldr	r2, [r7, #4]
 8009d8c:	6812      	ldr	r2, [r2, #0]
 8009d8e:	68b9      	ldr	r1, [r7, #8]
 8009d90:	430b      	orrs	r3, r1
 8009d92:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8009d94:	687b      	ldr	r3, [r7, #4]
 8009d96:	681b      	ldr	r3, [r3, #0]
 8009d98:	695b      	ldr	r3, [r3, #20]
 8009d9a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8009d9e:	687b      	ldr	r3, [r7, #4]
 8009da0:	699a      	ldr	r2, [r3, #24]
 8009da2:	687b      	ldr	r3, [r7, #4]
 8009da4:	681b      	ldr	r3, [r3, #0]
 8009da6:	430a      	orrs	r2, r1
 8009da8:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8009daa:	687b      	ldr	r3, [r7, #4]
 8009dac:	681b      	ldr	r3, [r3, #0]
 8009dae:	4a2c      	ldr	r2, [pc, #176]	; (8009e60 <UART_SetConfig+0x114>)
 8009db0:	4293      	cmp	r3, r2
 8009db2:	d103      	bne.n	8009dbc <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8009db4:	f7fd faf2 	bl	800739c <HAL_RCC_GetPCLK2Freq>
 8009db8:	60f8      	str	r0, [r7, #12]
 8009dba:	e002      	b.n	8009dc2 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8009dbc:	f7fd fada 	bl	8007374 <HAL_RCC_GetPCLK1Freq>
 8009dc0:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8009dc2:	68fa      	ldr	r2, [r7, #12]
 8009dc4:	4613      	mov	r3, r2
 8009dc6:	009b      	lsls	r3, r3, #2
 8009dc8:	4413      	add	r3, r2
 8009dca:	009a      	lsls	r2, r3, #2
 8009dcc:	441a      	add	r2, r3
 8009dce:	687b      	ldr	r3, [r7, #4]
 8009dd0:	685b      	ldr	r3, [r3, #4]
 8009dd2:	009b      	lsls	r3, r3, #2
 8009dd4:	fbb2 f3f3 	udiv	r3, r2, r3
 8009dd8:	4a22      	ldr	r2, [pc, #136]	; (8009e64 <UART_SetConfig+0x118>)
 8009dda:	fba2 2303 	umull	r2, r3, r2, r3
 8009dde:	095b      	lsrs	r3, r3, #5
 8009de0:	0119      	lsls	r1, r3, #4
 8009de2:	68fa      	ldr	r2, [r7, #12]
 8009de4:	4613      	mov	r3, r2
 8009de6:	009b      	lsls	r3, r3, #2
 8009de8:	4413      	add	r3, r2
 8009dea:	009a      	lsls	r2, r3, #2
 8009dec:	441a      	add	r2, r3
 8009dee:	687b      	ldr	r3, [r7, #4]
 8009df0:	685b      	ldr	r3, [r3, #4]
 8009df2:	009b      	lsls	r3, r3, #2
 8009df4:	fbb2 f2f3 	udiv	r2, r2, r3
 8009df8:	4b1a      	ldr	r3, [pc, #104]	; (8009e64 <UART_SetConfig+0x118>)
 8009dfa:	fba3 0302 	umull	r0, r3, r3, r2
 8009dfe:	095b      	lsrs	r3, r3, #5
 8009e00:	2064      	movs	r0, #100	; 0x64
 8009e02:	fb00 f303 	mul.w	r3, r0, r3
 8009e06:	1ad3      	subs	r3, r2, r3
 8009e08:	011b      	lsls	r3, r3, #4
 8009e0a:	3332      	adds	r3, #50	; 0x32
 8009e0c:	4a15      	ldr	r2, [pc, #84]	; (8009e64 <UART_SetConfig+0x118>)
 8009e0e:	fba2 2303 	umull	r2, r3, r2, r3
 8009e12:	095b      	lsrs	r3, r3, #5
 8009e14:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009e18:	4419      	add	r1, r3
 8009e1a:	68fa      	ldr	r2, [r7, #12]
 8009e1c:	4613      	mov	r3, r2
 8009e1e:	009b      	lsls	r3, r3, #2
 8009e20:	4413      	add	r3, r2
 8009e22:	009a      	lsls	r2, r3, #2
 8009e24:	441a      	add	r2, r3
 8009e26:	687b      	ldr	r3, [r7, #4]
 8009e28:	685b      	ldr	r3, [r3, #4]
 8009e2a:	009b      	lsls	r3, r3, #2
 8009e2c:	fbb2 f2f3 	udiv	r2, r2, r3
 8009e30:	4b0c      	ldr	r3, [pc, #48]	; (8009e64 <UART_SetConfig+0x118>)
 8009e32:	fba3 0302 	umull	r0, r3, r3, r2
 8009e36:	095b      	lsrs	r3, r3, #5
 8009e38:	2064      	movs	r0, #100	; 0x64
 8009e3a:	fb00 f303 	mul.w	r3, r0, r3
 8009e3e:	1ad3      	subs	r3, r2, r3
 8009e40:	011b      	lsls	r3, r3, #4
 8009e42:	3332      	adds	r3, #50	; 0x32
 8009e44:	4a07      	ldr	r2, [pc, #28]	; (8009e64 <UART_SetConfig+0x118>)
 8009e46:	fba2 2303 	umull	r2, r3, r2, r3
 8009e4a:	095b      	lsrs	r3, r3, #5
 8009e4c:	f003 020f 	and.w	r2, r3, #15
 8009e50:	687b      	ldr	r3, [r7, #4]
 8009e52:	681b      	ldr	r3, [r3, #0]
 8009e54:	440a      	add	r2, r1
 8009e56:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8009e58:	bf00      	nop
 8009e5a:	3710      	adds	r7, #16
 8009e5c:	46bd      	mov	sp, r7
 8009e5e:	bd80      	pop	{r7, pc}
 8009e60:	40013800 	.word	0x40013800
 8009e64:	51eb851f 	.word	0x51eb851f

08009e68 <acos>:
 8009e68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009e6a:	4604      	mov	r4, r0
 8009e6c:	460d      	mov	r5, r1
 8009e6e:	f000 f903 	bl	800a078 <__ieee754_acos>
 8009e72:	4b11      	ldr	r3, [pc, #68]	; (8009eb8 <acos+0x50>)
 8009e74:	4606      	mov	r6, r0
 8009e76:	f993 3000 	ldrsb.w	r3, [r3]
 8009e7a:	460f      	mov	r7, r1
 8009e7c:	3301      	adds	r3, #1
 8009e7e:	d018      	beq.n	8009eb2 <acos+0x4a>
 8009e80:	4622      	mov	r2, r4
 8009e82:	462b      	mov	r3, r5
 8009e84:	4620      	mov	r0, r4
 8009e86:	4629      	mov	r1, r5
 8009e88:	f7f6 fdc0 	bl	8000a0c <__aeabi_dcmpun>
 8009e8c:	b988      	cbnz	r0, 8009eb2 <acos+0x4a>
 8009e8e:	4620      	mov	r0, r4
 8009e90:	4629      	mov	r1, r5
 8009e92:	f001 f8ff 	bl	800b094 <fabs>
 8009e96:	2200      	movs	r2, #0
 8009e98:	4b08      	ldr	r3, [pc, #32]	; (8009ebc <acos+0x54>)
 8009e9a:	f7f6 fdad 	bl	80009f8 <__aeabi_dcmpgt>
 8009e9e:	b140      	cbz	r0, 8009eb2 <acos+0x4a>
 8009ea0:	f001 fa18 	bl	800b2d4 <__errno>
 8009ea4:	2321      	movs	r3, #33	; 0x21
 8009ea6:	6003      	str	r3, [r0, #0]
 8009ea8:	4805      	ldr	r0, [pc, #20]	; (8009ec0 <acos+0x58>)
 8009eaa:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8009eae:	f001 b8fb 	b.w	800b0a8 <nan>
 8009eb2:	4630      	mov	r0, r6
 8009eb4:	4639      	mov	r1, r7
 8009eb6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009eb8:	20000055 	.word	0x20000055
 8009ebc:	3ff00000 	.word	0x3ff00000
 8009ec0:	0800c0f5 	.word	0x0800c0f5

08009ec4 <pow>:
 8009ec4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009ec8:	461f      	mov	r7, r3
 8009eca:	4680      	mov	r8, r0
 8009ecc:	4689      	mov	r9, r1
 8009ece:	4616      	mov	r6, r2
 8009ed0:	f000 fb1e 	bl	800a510 <__ieee754_pow>
 8009ed4:	4b4d      	ldr	r3, [pc, #308]	; (800a00c <pow+0x148>)
 8009ed6:	4604      	mov	r4, r0
 8009ed8:	f993 3000 	ldrsb.w	r3, [r3]
 8009edc:	460d      	mov	r5, r1
 8009ede:	3301      	adds	r3, #1
 8009ee0:	d015      	beq.n	8009f0e <pow+0x4a>
 8009ee2:	4632      	mov	r2, r6
 8009ee4:	463b      	mov	r3, r7
 8009ee6:	4630      	mov	r0, r6
 8009ee8:	4639      	mov	r1, r7
 8009eea:	f7f6 fd8f 	bl	8000a0c <__aeabi_dcmpun>
 8009eee:	b970      	cbnz	r0, 8009f0e <pow+0x4a>
 8009ef0:	4642      	mov	r2, r8
 8009ef2:	464b      	mov	r3, r9
 8009ef4:	4640      	mov	r0, r8
 8009ef6:	4649      	mov	r1, r9
 8009ef8:	f7f6 fd88 	bl	8000a0c <__aeabi_dcmpun>
 8009efc:	2200      	movs	r2, #0
 8009efe:	2300      	movs	r3, #0
 8009f00:	b148      	cbz	r0, 8009f16 <pow+0x52>
 8009f02:	4630      	mov	r0, r6
 8009f04:	4639      	mov	r1, r7
 8009f06:	f7f6 fd4f 	bl	80009a8 <__aeabi_dcmpeq>
 8009f0a:	2800      	cmp	r0, #0
 8009f0c:	d17b      	bne.n	800a006 <pow+0x142>
 8009f0e:	4620      	mov	r0, r4
 8009f10:	4629      	mov	r1, r5
 8009f12:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009f16:	4640      	mov	r0, r8
 8009f18:	4649      	mov	r1, r9
 8009f1a:	f7f6 fd45 	bl	80009a8 <__aeabi_dcmpeq>
 8009f1e:	b1e0      	cbz	r0, 8009f5a <pow+0x96>
 8009f20:	2200      	movs	r2, #0
 8009f22:	2300      	movs	r3, #0
 8009f24:	4630      	mov	r0, r6
 8009f26:	4639      	mov	r1, r7
 8009f28:	f7f6 fd3e 	bl	80009a8 <__aeabi_dcmpeq>
 8009f2c:	2800      	cmp	r0, #0
 8009f2e:	d16a      	bne.n	800a006 <pow+0x142>
 8009f30:	4630      	mov	r0, r6
 8009f32:	4639      	mov	r1, r7
 8009f34:	f001 f8b1 	bl	800b09a <finite>
 8009f38:	2800      	cmp	r0, #0
 8009f3a:	d0e8      	beq.n	8009f0e <pow+0x4a>
 8009f3c:	2200      	movs	r2, #0
 8009f3e:	2300      	movs	r3, #0
 8009f40:	4630      	mov	r0, r6
 8009f42:	4639      	mov	r1, r7
 8009f44:	f7f6 fd3a 	bl	80009bc <__aeabi_dcmplt>
 8009f48:	2800      	cmp	r0, #0
 8009f4a:	d0e0      	beq.n	8009f0e <pow+0x4a>
 8009f4c:	f001 f9c2 	bl	800b2d4 <__errno>
 8009f50:	2321      	movs	r3, #33	; 0x21
 8009f52:	2400      	movs	r4, #0
 8009f54:	6003      	str	r3, [r0, #0]
 8009f56:	4d2e      	ldr	r5, [pc, #184]	; (800a010 <pow+0x14c>)
 8009f58:	e7d9      	b.n	8009f0e <pow+0x4a>
 8009f5a:	4620      	mov	r0, r4
 8009f5c:	4629      	mov	r1, r5
 8009f5e:	f001 f89c 	bl	800b09a <finite>
 8009f62:	bba8      	cbnz	r0, 8009fd0 <pow+0x10c>
 8009f64:	4640      	mov	r0, r8
 8009f66:	4649      	mov	r1, r9
 8009f68:	f001 f897 	bl	800b09a <finite>
 8009f6c:	b380      	cbz	r0, 8009fd0 <pow+0x10c>
 8009f6e:	4630      	mov	r0, r6
 8009f70:	4639      	mov	r1, r7
 8009f72:	f001 f892 	bl	800b09a <finite>
 8009f76:	b358      	cbz	r0, 8009fd0 <pow+0x10c>
 8009f78:	4622      	mov	r2, r4
 8009f7a:	462b      	mov	r3, r5
 8009f7c:	4620      	mov	r0, r4
 8009f7e:	4629      	mov	r1, r5
 8009f80:	f7f6 fd44 	bl	8000a0c <__aeabi_dcmpun>
 8009f84:	b160      	cbz	r0, 8009fa0 <pow+0xdc>
 8009f86:	f001 f9a5 	bl	800b2d4 <__errno>
 8009f8a:	2321      	movs	r3, #33	; 0x21
 8009f8c:	2200      	movs	r2, #0
 8009f8e:	6003      	str	r3, [r0, #0]
 8009f90:	2300      	movs	r3, #0
 8009f92:	4610      	mov	r0, r2
 8009f94:	4619      	mov	r1, r3
 8009f96:	f7f6 fbc9 	bl	800072c <__aeabi_ddiv>
 8009f9a:	4604      	mov	r4, r0
 8009f9c:	460d      	mov	r5, r1
 8009f9e:	e7b6      	b.n	8009f0e <pow+0x4a>
 8009fa0:	f001 f998 	bl	800b2d4 <__errno>
 8009fa4:	2322      	movs	r3, #34	; 0x22
 8009fa6:	2200      	movs	r2, #0
 8009fa8:	6003      	str	r3, [r0, #0]
 8009faa:	4649      	mov	r1, r9
 8009fac:	2300      	movs	r3, #0
 8009fae:	4640      	mov	r0, r8
 8009fb0:	f7f6 fd04 	bl	80009bc <__aeabi_dcmplt>
 8009fb4:	2400      	movs	r4, #0
 8009fb6:	b148      	cbz	r0, 8009fcc <pow+0x108>
 8009fb8:	4630      	mov	r0, r6
 8009fba:	4639      	mov	r1, r7
 8009fbc:	f001 f87a 	bl	800b0b4 <rint>
 8009fc0:	4632      	mov	r2, r6
 8009fc2:	463b      	mov	r3, r7
 8009fc4:	f7f6 fcf0 	bl	80009a8 <__aeabi_dcmpeq>
 8009fc8:	2800      	cmp	r0, #0
 8009fca:	d0c4      	beq.n	8009f56 <pow+0x92>
 8009fcc:	4d11      	ldr	r5, [pc, #68]	; (800a014 <pow+0x150>)
 8009fce:	e79e      	b.n	8009f0e <pow+0x4a>
 8009fd0:	2200      	movs	r2, #0
 8009fd2:	2300      	movs	r3, #0
 8009fd4:	4620      	mov	r0, r4
 8009fd6:	4629      	mov	r1, r5
 8009fd8:	f7f6 fce6 	bl	80009a8 <__aeabi_dcmpeq>
 8009fdc:	2800      	cmp	r0, #0
 8009fde:	d096      	beq.n	8009f0e <pow+0x4a>
 8009fe0:	4640      	mov	r0, r8
 8009fe2:	4649      	mov	r1, r9
 8009fe4:	f001 f859 	bl	800b09a <finite>
 8009fe8:	2800      	cmp	r0, #0
 8009fea:	d090      	beq.n	8009f0e <pow+0x4a>
 8009fec:	4630      	mov	r0, r6
 8009fee:	4639      	mov	r1, r7
 8009ff0:	f001 f853 	bl	800b09a <finite>
 8009ff4:	2800      	cmp	r0, #0
 8009ff6:	d08a      	beq.n	8009f0e <pow+0x4a>
 8009ff8:	f001 f96c 	bl	800b2d4 <__errno>
 8009ffc:	2322      	movs	r3, #34	; 0x22
 8009ffe:	2400      	movs	r4, #0
 800a000:	2500      	movs	r5, #0
 800a002:	6003      	str	r3, [r0, #0]
 800a004:	e783      	b.n	8009f0e <pow+0x4a>
 800a006:	2400      	movs	r4, #0
 800a008:	4d03      	ldr	r5, [pc, #12]	; (800a018 <pow+0x154>)
 800a00a:	e780      	b.n	8009f0e <pow+0x4a>
 800a00c:	20000055 	.word	0x20000055
 800a010:	fff00000 	.word	0xfff00000
 800a014:	7ff00000 	.word	0x7ff00000
 800a018:	3ff00000 	.word	0x3ff00000

0800a01c <sqrt>:
 800a01c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a01e:	4606      	mov	r6, r0
 800a020:	460f      	mov	r7, r1
 800a022:	f000 ff8b 	bl	800af3c <__ieee754_sqrt>
 800a026:	4b12      	ldr	r3, [pc, #72]	; (800a070 <sqrt+0x54>)
 800a028:	4604      	mov	r4, r0
 800a02a:	f993 3000 	ldrsb.w	r3, [r3]
 800a02e:	460d      	mov	r5, r1
 800a030:	3301      	adds	r3, #1
 800a032:	d019      	beq.n	800a068 <sqrt+0x4c>
 800a034:	4632      	mov	r2, r6
 800a036:	463b      	mov	r3, r7
 800a038:	4630      	mov	r0, r6
 800a03a:	4639      	mov	r1, r7
 800a03c:	f7f6 fce6 	bl	8000a0c <__aeabi_dcmpun>
 800a040:	b990      	cbnz	r0, 800a068 <sqrt+0x4c>
 800a042:	2200      	movs	r2, #0
 800a044:	2300      	movs	r3, #0
 800a046:	4630      	mov	r0, r6
 800a048:	4639      	mov	r1, r7
 800a04a:	f7f6 fcb7 	bl	80009bc <__aeabi_dcmplt>
 800a04e:	b158      	cbz	r0, 800a068 <sqrt+0x4c>
 800a050:	f001 f940 	bl	800b2d4 <__errno>
 800a054:	2321      	movs	r3, #33	; 0x21
 800a056:	2200      	movs	r2, #0
 800a058:	6003      	str	r3, [r0, #0]
 800a05a:	2300      	movs	r3, #0
 800a05c:	4610      	mov	r0, r2
 800a05e:	4619      	mov	r1, r3
 800a060:	f7f6 fb64 	bl	800072c <__aeabi_ddiv>
 800a064:	4604      	mov	r4, r0
 800a066:	460d      	mov	r5, r1
 800a068:	4620      	mov	r0, r4
 800a06a:	4629      	mov	r1, r5
 800a06c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a06e:	bf00      	nop
 800a070:	20000055 	.word	0x20000055
 800a074:	00000000 	.word	0x00000000

0800a078 <__ieee754_acos>:
 800a078:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a07c:	4cb2      	ldr	r4, [pc, #712]	; (800a348 <__ieee754_acos+0x2d0>)
 800a07e:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800a082:	42a3      	cmp	r3, r4
 800a084:	4607      	mov	r7, r0
 800a086:	460e      	mov	r6, r1
 800a088:	dd16      	ble.n	800a0b8 <__ieee754_acos+0x40>
 800a08a:	f103 4340 	add.w	r3, r3, #3221225472	; 0xc0000000
 800a08e:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800a092:	4303      	orrs	r3, r0
 800a094:	d107      	bne.n	800a0a6 <__ieee754_acos+0x2e>
 800a096:	2900      	cmp	r1, #0
 800a098:	f300 8202 	bgt.w	800a4a0 <__ieee754_acos+0x428>
 800a09c:	a190      	add	r1, pc, #576	; (adr r1, 800a2e0 <__ieee754_acos+0x268>)
 800a09e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a0a2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a0a6:	4602      	mov	r2, r0
 800a0a8:	460b      	mov	r3, r1
 800a0aa:	f7f6 f85d 	bl	8000168 <__aeabi_dsub>
 800a0ae:	4602      	mov	r2, r0
 800a0b0:	460b      	mov	r3, r1
 800a0b2:	f7f6 fb3b 	bl	800072c <__aeabi_ddiv>
 800a0b6:	e7f4      	b.n	800a0a2 <__ieee754_acos+0x2a>
 800a0b8:	4ca4      	ldr	r4, [pc, #656]	; (800a34c <__ieee754_acos+0x2d4>)
 800a0ba:	42a3      	cmp	r3, r4
 800a0bc:	f300 8083 	bgt.w	800a1c6 <__ieee754_acos+0x14e>
 800a0c0:	4aa3      	ldr	r2, [pc, #652]	; (800a350 <__ieee754_acos+0x2d8>)
 800a0c2:	4293      	cmp	r3, r2
 800a0c4:	f340 81ef 	ble.w	800a4a6 <__ieee754_acos+0x42e>
 800a0c8:	4602      	mov	r2, r0
 800a0ca:	460b      	mov	r3, r1
 800a0cc:	f7f6 fa04 	bl	80004d8 <__aeabi_dmul>
 800a0d0:	a385      	add	r3, pc, #532	; (adr r3, 800a2e8 <__ieee754_acos+0x270>)
 800a0d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0d6:	4604      	mov	r4, r0
 800a0d8:	460d      	mov	r5, r1
 800a0da:	f7f6 f9fd 	bl	80004d8 <__aeabi_dmul>
 800a0de:	a384      	add	r3, pc, #528	; (adr r3, 800a2f0 <__ieee754_acos+0x278>)
 800a0e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0e4:	f7f6 f842 	bl	800016c <__adddf3>
 800a0e8:	4622      	mov	r2, r4
 800a0ea:	462b      	mov	r3, r5
 800a0ec:	f7f6 f9f4 	bl	80004d8 <__aeabi_dmul>
 800a0f0:	a381      	add	r3, pc, #516	; (adr r3, 800a2f8 <__ieee754_acos+0x280>)
 800a0f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0f6:	f7f6 f837 	bl	8000168 <__aeabi_dsub>
 800a0fa:	4622      	mov	r2, r4
 800a0fc:	462b      	mov	r3, r5
 800a0fe:	f7f6 f9eb 	bl	80004d8 <__aeabi_dmul>
 800a102:	a37f      	add	r3, pc, #508	; (adr r3, 800a300 <__ieee754_acos+0x288>)
 800a104:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a108:	f7f6 f830 	bl	800016c <__adddf3>
 800a10c:	4622      	mov	r2, r4
 800a10e:	462b      	mov	r3, r5
 800a110:	f7f6 f9e2 	bl	80004d8 <__aeabi_dmul>
 800a114:	a37c      	add	r3, pc, #496	; (adr r3, 800a308 <__ieee754_acos+0x290>)
 800a116:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a11a:	f7f6 f825 	bl	8000168 <__aeabi_dsub>
 800a11e:	4622      	mov	r2, r4
 800a120:	462b      	mov	r3, r5
 800a122:	f7f6 f9d9 	bl	80004d8 <__aeabi_dmul>
 800a126:	a37a      	add	r3, pc, #488	; (adr r3, 800a310 <__ieee754_acos+0x298>)
 800a128:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a12c:	f7f6 f81e 	bl	800016c <__adddf3>
 800a130:	4622      	mov	r2, r4
 800a132:	462b      	mov	r3, r5
 800a134:	f7f6 f9d0 	bl	80004d8 <__aeabi_dmul>
 800a138:	a377      	add	r3, pc, #476	; (adr r3, 800a318 <__ieee754_acos+0x2a0>)
 800a13a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a13e:	4680      	mov	r8, r0
 800a140:	4689      	mov	r9, r1
 800a142:	4620      	mov	r0, r4
 800a144:	4629      	mov	r1, r5
 800a146:	f7f6 f9c7 	bl	80004d8 <__aeabi_dmul>
 800a14a:	a375      	add	r3, pc, #468	; (adr r3, 800a320 <__ieee754_acos+0x2a8>)
 800a14c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a150:	f7f6 f80a 	bl	8000168 <__aeabi_dsub>
 800a154:	4622      	mov	r2, r4
 800a156:	462b      	mov	r3, r5
 800a158:	f7f6 f9be 	bl	80004d8 <__aeabi_dmul>
 800a15c:	a372      	add	r3, pc, #456	; (adr r3, 800a328 <__ieee754_acos+0x2b0>)
 800a15e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a162:	f7f6 f803 	bl	800016c <__adddf3>
 800a166:	4622      	mov	r2, r4
 800a168:	462b      	mov	r3, r5
 800a16a:	f7f6 f9b5 	bl	80004d8 <__aeabi_dmul>
 800a16e:	a370      	add	r3, pc, #448	; (adr r3, 800a330 <__ieee754_acos+0x2b8>)
 800a170:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a174:	f7f5 fff8 	bl	8000168 <__aeabi_dsub>
 800a178:	4622      	mov	r2, r4
 800a17a:	462b      	mov	r3, r5
 800a17c:	f7f6 f9ac 	bl	80004d8 <__aeabi_dmul>
 800a180:	2200      	movs	r2, #0
 800a182:	4b74      	ldr	r3, [pc, #464]	; (800a354 <__ieee754_acos+0x2dc>)
 800a184:	f7f5 fff2 	bl	800016c <__adddf3>
 800a188:	4602      	mov	r2, r0
 800a18a:	460b      	mov	r3, r1
 800a18c:	4640      	mov	r0, r8
 800a18e:	4649      	mov	r1, r9
 800a190:	f7f6 facc 	bl	800072c <__aeabi_ddiv>
 800a194:	463a      	mov	r2, r7
 800a196:	4633      	mov	r3, r6
 800a198:	f7f6 f99e 	bl	80004d8 <__aeabi_dmul>
 800a19c:	4602      	mov	r2, r0
 800a19e:	460b      	mov	r3, r1
 800a1a0:	a165      	add	r1, pc, #404	; (adr r1, 800a338 <__ieee754_acos+0x2c0>)
 800a1a2:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a1a6:	f7f5 ffdf 	bl	8000168 <__aeabi_dsub>
 800a1aa:	4602      	mov	r2, r0
 800a1ac:	460b      	mov	r3, r1
 800a1ae:	4638      	mov	r0, r7
 800a1b0:	4631      	mov	r1, r6
 800a1b2:	f7f5 ffd9 	bl	8000168 <__aeabi_dsub>
 800a1b6:	4602      	mov	r2, r0
 800a1b8:	460b      	mov	r3, r1
 800a1ba:	a161      	add	r1, pc, #388	; (adr r1, 800a340 <__ieee754_acos+0x2c8>)
 800a1bc:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a1c0:	f7f5 ffd2 	bl	8000168 <__aeabi_dsub>
 800a1c4:	e76d      	b.n	800a0a2 <__ieee754_acos+0x2a>
 800a1c6:	2900      	cmp	r1, #0
 800a1c8:	f280 80c8 	bge.w	800a35c <__ieee754_acos+0x2e4>
 800a1cc:	2200      	movs	r2, #0
 800a1ce:	4b61      	ldr	r3, [pc, #388]	; (800a354 <__ieee754_acos+0x2dc>)
 800a1d0:	f7f5 ffcc 	bl	800016c <__adddf3>
 800a1d4:	2200      	movs	r2, #0
 800a1d6:	4b60      	ldr	r3, [pc, #384]	; (800a358 <__ieee754_acos+0x2e0>)
 800a1d8:	f7f6 f97e 	bl	80004d8 <__aeabi_dmul>
 800a1dc:	a342      	add	r3, pc, #264	; (adr r3, 800a2e8 <__ieee754_acos+0x270>)
 800a1de:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a1e2:	4604      	mov	r4, r0
 800a1e4:	460d      	mov	r5, r1
 800a1e6:	f7f6 f977 	bl	80004d8 <__aeabi_dmul>
 800a1ea:	a341      	add	r3, pc, #260	; (adr r3, 800a2f0 <__ieee754_acos+0x278>)
 800a1ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a1f0:	f7f5 ffbc 	bl	800016c <__adddf3>
 800a1f4:	4622      	mov	r2, r4
 800a1f6:	462b      	mov	r3, r5
 800a1f8:	f7f6 f96e 	bl	80004d8 <__aeabi_dmul>
 800a1fc:	a33e      	add	r3, pc, #248	; (adr r3, 800a2f8 <__ieee754_acos+0x280>)
 800a1fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a202:	f7f5 ffb1 	bl	8000168 <__aeabi_dsub>
 800a206:	4622      	mov	r2, r4
 800a208:	462b      	mov	r3, r5
 800a20a:	f7f6 f965 	bl	80004d8 <__aeabi_dmul>
 800a20e:	a33c      	add	r3, pc, #240	; (adr r3, 800a300 <__ieee754_acos+0x288>)
 800a210:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a214:	f7f5 ffaa 	bl	800016c <__adddf3>
 800a218:	4622      	mov	r2, r4
 800a21a:	462b      	mov	r3, r5
 800a21c:	f7f6 f95c 	bl	80004d8 <__aeabi_dmul>
 800a220:	a339      	add	r3, pc, #228	; (adr r3, 800a308 <__ieee754_acos+0x290>)
 800a222:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a226:	f7f5 ff9f 	bl	8000168 <__aeabi_dsub>
 800a22a:	4622      	mov	r2, r4
 800a22c:	462b      	mov	r3, r5
 800a22e:	f7f6 f953 	bl	80004d8 <__aeabi_dmul>
 800a232:	a337      	add	r3, pc, #220	; (adr r3, 800a310 <__ieee754_acos+0x298>)
 800a234:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a238:	f7f5 ff98 	bl	800016c <__adddf3>
 800a23c:	4622      	mov	r2, r4
 800a23e:	462b      	mov	r3, r5
 800a240:	f7f6 f94a 	bl	80004d8 <__aeabi_dmul>
 800a244:	4680      	mov	r8, r0
 800a246:	4689      	mov	r9, r1
 800a248:	4620      	mov	r0, r4
 800a24a:	4629      	mov	r1, r5
 800a24c:	f000 fe76 	bl	800af3c <__ieee754_sqrt>
 800a250:	a331      	add	r3, pc, #196	; (adr r3, 800a318 <__ieee754_acos+0x2a0>)
 800a252:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a256:	4606      	mov	r6, r0
 800a258:	460f      	mov	r7, r1
 800a25a:	4620      	mov	r0, r4
 800a25c:	4629      	mov	r1, r5
 800a25e:	f7f6 f93b 	bl	80004d8 <__aeabi_dmul>
 800a262:	a32f      	add	r3, pc, #188	; (adr r3, 800a320 <__ieee754_acos+0x2a8>)
 800a264:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a268:	f7f5 ff7e 	bl	8000168 <__aeabi_dsub>
 800a26c:	4622      	mov	r2, r4
 800a26e:	462b      	mov	r3, r5
 800a270:	f7f6 f932 	bl	80004d8 <__aeabi_dmul>
 800a274:	a32c      	add	r3, pc, #176	; (adr r3, 800a328 <__ieee754_acos+0x2b0>)
 800a276:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a27a:	f7f5 ff77 	bl	800016c <__adddf3>
 800a27e:	4622      	mov	r2, r4
 800a280:	462b      	mov	r3, r5
 800a282:	f7f6 f929 	bl	80004d8 <__aeabi_dmul>
 800a286:	a32a      	add	r3, pc, #168	; (adr r3, 800a330 <__ieee754_acos+0x2b8>)
 800a288:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a28c:	f7f5 ff6c 	bl	8000168 <__aeabi_dsub>
 800a290:	4622      	mov	r2, r4
 800a292:	462b      	mov	r3, r5
 800a294:	f7f6 f920 	bl	80004d8 <__aeabi_dmul>
 800a298:	2200      	movs	r2, #0
 800a29a:	4b2e      	ldr	r3, [pc, #184]	; (800a354 <__ieee754_acos+0x2dc>)
 800a29c:	f7f5 ff66 	bl	800016c <__adddf3>
 800a2a0:	4602      	mov	r2, r0
 800a2a2:	460b      	mov	r3, r1
 800a2a4:	4640      	mov	r0, r8
 800a2a6:	4649      	mov	r1, r9
 800a2a8:	f7f6 fa40 	bl	800072c <__aeabi_ddiv>
 800a2ac:	4632      	mov	r2, r6
 800a2ae:	463b      	mov	r3, r7
 800a2b0:	f7f6 f912 	bl	80004d8 <__aeabi_dmul>
 800a2b4:	a320      	add	r3, pc, #128	; (adr r3, 800a338 <__ieee754_acos+0x2c0>)
 800a2b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2ba:	f7f5 ff55 	bl	8000168 <__aeabi_dsub>
 800a2be:	4632      	mov	r2, r6
 800a2c0:	463b      	mov	r3, r7
 800a2c2:	f7f5 ff53 	bl	800016c <__adddf3>
 800a2c6:	4602      	mov	r2, r0
 800a2c8:	460b      	mov	r3, r1
 800a2ca:	f7f5 ff4f 	bl	800016c <__adddf3>
 800a2ce:	4602      	mov	r2, r0
 800a2d0:	460b      	mov	r3, r1
 800a2d2:	a103      	add	r1, pc, #12	; (adr r1, 800a2e0 <__ieee754_acos+0x268>)
 800a2d4:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a2d8:	e772      	b.n	800a1c0 <__ieee754_acos+0x148>
 800a2da:	bf00      	nop
 800a2dc:	f3af 8000 	nop.w
 800a2e0:	54442d18 	.word	0x54442d18
 800a2e4:	400921fb 	.word	0x400921fb
 800a2e8:	0dfdf709 	.word	0x0dfdf709
 800a2ec:	3f023de1 	.word	0x3f023de1
 800a2f0:	7501b288 	.word	0x7501b288
 800a2f4:	3f49efe0 	.word	0x3f49efe0
 800a2f8:	b5688f3b 	.word	0xb5688f3b
 800a2fc:	3fa48228 	.word	0x3fa48228
 800a300:	0e884455 	.word	0x0e884455
 800a304:	3fc9c155 	.word	0x3fc9c155
 800a308:	03eb6f7d 	.word	0x03eb6f7d
 800a30c:	3fd4d612 	.word	0x3fd4d612
 800a310:	55555555 	.word	0x55555555
 800a314:	3fc55555 	.word	0x3fc55555
 800a318:	b12e9282 	.word	0xb12e9282
 800a31c:	3fb3b8c5 	.word	0x3fb3b8c5
 800a320:	1b8d0159 	.word	0x1b8d0159
 800a324:	3fe6066c 	.word	0x3fe6066c
 800a328:	9c598ac8 	.word	0x9c598ac8
 800a32c:	40002ae5 	.word	0x40002ae5
 800a330:	1c8a2d4b 	.word	0x1c8a2d4b
 800a334:	40033a27 	.word	0x40033a27
 800a338:	33145c07 	.word	0x33145c07
 800a33c:	3c91a626 	.word	0x3c91a626
 800a340:	54442d18 	.word	0x54442d18
 800a344:	3ff921fb 	.word	0x3ff921fb
 800a348:	3fefffff 	.word	0x3fefffff
 800a34c:	3fdfffff 	.word	0x3fdfffff
 800a350:	3c600000 	.word	0x3c600000
 800a354:	3ff00000 	.word	0x3ff00000
 800a358:	3fe00000 	.word	0x3fe00000
 800a35c:	4602      	mov	r2, r0
 800a35e:	460b      	mov	r3, r1
 800a360:	2000      	movs	r0, #0
 800a362:	4969      	ldr	r1, [pc, #420]	; (800a508 <__ieee754_acos+0x490>)
 800a364:	f7f5 ff00 	bl	8000168 <__aeabi_dsub>
 800a368:	2200      	movs	r2, #0
 800a36a:	4b68      	ldr	r3, [pc, #416]	; (800a50c <__ieee754_acos+0x494>)
 800a36c:	f7f6 f8b4 	bl	80004d8 <__aeabi_dmul>
 800a370:	4604      	mov	r4, r0
 800a372:	460d      	mov	r5, r1
 800a374:	f000 fde2 	bl	800af3c <__ieee754_sqrt>
 800a378:	a34d      	add	r3, pc, #308	; (adr r3, 800a4b0 <__ieee754_acos+0x438>)
 800a37a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a37e:	4689      	mov	r9, r1
 800a380:	4680      	mov	r8, r0
 800a382:	4629      	mov	r1, r5
 800a384:	4620      	mov	r0, r4
 800a386:	f7f6 f8a7 	bl	80004d8 <__aeabi_dmul>
 800a38a:	a34b      	add	r3, pc, #300	; (adr r3, 800a4b8 <__ieee754_acos+0x440>)
 800a38c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a390:	f7f5 feec 	bl	800016c <__adddf3>
 800a394:	4622      	mov	r2, r4
 800a396:	462b      	mov	r3, r5
 800a398:	f7f6 f89e 	bl	80004d8 <__aeabi_dmul>
 800a39c:	a348      	add	r3, pc, #288	; (adr r3, 800a4c0 <__ieee754_acos+0x448>)
 800a39e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3a2:	f7f5 fee1 	bl	8000168 <__aeabi_dsub>
 800a3a6:	4622      	mov	r2, r4
 800a3a8:	462b      	mov	r3, r5
 800a3aa:	f7f6 f895 	bl	80004d8 <__aeabi_dmul>
 800a3ae:	a346      	add	r3, pc, #280	; (adr r3, 800a4c8 <__ieee754_acos+0x450>)
 800a3b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3b4:	f7f5 feda 	bl	800016c <__adddf3>
 800a3b8:	4622      	mov	r2, r4
 800a3ba:	462b      	mov	r3, r5
 800a3bc:	f7f6 f88c 	bl	80004d8 <__aeabi_dmul>
 800a3c0:	a343      	add	r3, pc, #268	; (adr r3, 800a4d0 <__ieee754_acos+0x458>)
 800a3c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3c6:	f7f5 fecf 	bl	8000168 <__aeabi_dsub>
 800a3ca:	4622      	mov	r2, r4
 800a3cc:	462b      	mov	r3, r5
 800a3ce:	f7f6 f883 	bl	80004d8 <__aeabi_dmul>
 800a3d2:	a341      	add	r3, pc, #260	; (adr r3, 800a4d8 <__ieee754_acos+0x460>)
 800a3d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3d8:	f7f5 fec8 	bl	800016c <__adddf3>
 800a3dc:	4622      	mov	r2, r4
 800a3de:	462b      	mov	r3, r5
 800a3e0:	f7f6 f87a 	bl	80004d8 <__aeabi_dmul>
 800a3e4:	a33e      	add	r3, pc, #248	; (adr r3, 800a4e0 <__ieee754_acos+0x468>)
 800a3e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3ea:	4682      	mov	sl, r0
 800a3ec:	468b      	mov	fp, r1
 800a3ee:	4620      	mov	r0, r4
 800a3f0:	4629      	mov	r1, r5
 800a3f2:	f7f6 f871 	bl	80004d8 <__aeabi_dmul>
 800a3f6:	a33c      	add	r3, pc, #240	; (adr r3, 800a4e8 <__ieee754_acos+0x470>)
 800a3f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3fc:	f7f5 feb4 	bl	8000168 <__aeabi_dsub>
 800a400:	4622      	mov	r2, r4
 800a402:	462b      	mov	r3, r5
 800a404:	f7f6 f868 	bl	80004d8 <__aeabi_dmul>
 800a408:	a339      	add	r3, pc, #228	; (adr r3, 800a4f0 <__ieee754_acos+0x478>)
 800a40a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a40e:	f7f5 fead 	bl	800016c <__adddf3>
 800a412:	4622      	mov	r2, r4
 800a414:	462b      	mov	r3, r5
 800a416:	f7f6 f85f 	bl	80004d8 <__aeabi_dmul>
 800a41a:	a337      	add	r3, pc, #220	; (adr r3, 800a4f8 <__ieee754_acos+0x480>)
 800a41c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a420:	f7f5 fea2 	bl	8000168 <__aeabi_dsub>
 800a424:	4622      	mov	r2, r4
 800a426:	462b      	mov	r3, r5
 800a428:	f7f6 f856 	bl	80004d8 <__aeabi_dmul>
 800a42c:	2200      	movs	r2, #0
 800a42e:	4b36      	ldr	r3, [pc, #216]	; (800a508 <__ieee754_acos+0x490>)
 800a430:	f7f5 fe9c 	bl	800016c <__adddf3>
 800a434:	4602      	mov	r2, r0
 800a436:	460b      	mov	r3, r1
 800a438:	4650      	mov	r0, sl
 800a43a:	4659      	mov	r1, fp
 800a43c:	f7f6 f976 	bl	800072c <__aeabi_ddiv>
 800a440:	4642      	mov	r2, r8
 800a442:	464b      	mov	r3, r9
 800a444:	f7f6 f848 	bl	80004d8 <__aeabi_dmul>
 800a448:	2600      	movs	r6, #0
 800a44a:	4682      	mov	sl, r0
 800a44c:	468b      	mov	fp, r1
 800a44e:	4632      	mov	r2, r6
 800a450:	464b      	mov	r3, r9
 800a452:	4630      	mov	r0, r6
 800a454:	4649      	mov	r1, r9
 800a456:	f7f6 f83f 	bl	80004d8 <__aeabi_dmul>
 800a45a:	4602      	mov	r2, r0
 800a45c:	460b      	mov	r3, r1
 800a45e:	4620      	mov	r0, r4
 800a460:	4629      	mov	r1, r5
 800a462:	f7f5 fe81 	bl	8000168 <__aeabi_dsub>
 800a466:	4632      	mov	r2, r6
 800a468:	4604      	mov	r4, r0
 800a46a:	460d      	mov	r5, r1
 800a46c:	464b      	mov	r3, r9
 800a46e:	4640      	mov	r0, r8
 800a470:	4649      	mov	r1, r9
 800a472:	f7f5 fe7b 	bl	800016c <__adddf3>
 800a476:	4602      	mov	r2, r0
 800a478:	460b      	mov	r3, r1
 800a47a:	4620      	mov	r0, r4
 800a47c:	4629      	mov	r1, r5
 800a47e:	f7f6 f955 	bl	800072c <__aeabi_ddiv>
 800a482:	4602      	mov	r2, r0
 800a484:	460b      	mov	r3, r1
 800a486:	4650      	mov	r0, sl
 800a488:	4659      	mov	r1, fp
 800a48a:	f7f5 fe6f 	bl	800016c <__adddf3>
 800a48e:	4632      	mov	r2, r6
 800a490:	464b      	mov	r3, r9
 800a492:	f7f5 fe6b 	bl	800016c <__adddf3>
 800a496:	4602      	mov	r2, r0
 800a498:	460b      	mov	r3, r1
 800a49a:	f7f5 fe67 	bl	800016c <__adddf3>
 800a49e:	e600      	b.n	800a0a2 <__ieee754_acos+0x2a>
 800a4a0:	2000      	movs	r0, #0
 800a4a2:	2100      	movs	r1, #0
 800a4a4:	e5fd      	b.n	800a0a2 <__ieee754_acos+0x2a>
 800a4a6:	a116      	add	r1, pc, #88	; (adr r1, 800a500 <__ieee754_acos+0x488>)
 800a4a8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a4ac:	e5f9      	b.n	800a0a2 <__ieee754_acos+0x2a>
 800a4ae:	bf00      	nop
 800a4b0:	0dfdf709 	.word	0x0dfdf709
 800a4b4:	3f023de1 	.word	0x3f023de1
 800a4b8:	7501b288 	.word	0x7501b288
 800a4bc:	3f49efe0 	.word	0x3f49efe0
 800a4c0:	b5688f3b 	.word	0xb5688f3b
 800a4c4:	3fa48228 	.word	0x3fa48228
 800a4c8:	0e884455 	.word	0x0e884455
 800a4cc:	3fc9c155 	.word	0x3fc9c155
 800a4d0:	03eb6f7d 	.word	0x03eb6f7d
 800a4d4:	3fd4d612 	.word	0x3fd4d612
 800a4d8:	55555555 	.word	0x55555555
 800a4dc:	3fc55555 	.word	0x3fc55555
 800a4e0:	b12e9282 	.word	0xb12e9282
 800a4e4:	3fb3b8c5 	.word	0x3fb3b8c5
 800a4e8:	1b8d0159 	.word	0x1b8d0159
 800a4ec:	3fe6066c 	.word	0x3fe6066c
 800a4f0:	9c598ac8 	.word	0x9c598ac8
 800a4f4:	40002ae5 	.word	0x40002ae5
 800a4f8:	1c8a2d4b 	.word	0x1c8a2d4b
 800a4fc:	40033a27 	.word	0x40033a27
 800a500:	54442d18 	.word	0x54442d18
 800a504:	3ff921fb 	.word	0x3ff921fb
 800a508:	3ff00000 	.word	0x3ff00000
 800a50c:	3fe00000 	.word	0x3fe00000

0800a510 <__ieee754_pow>:
 800a510:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a514:	b093      	sub	sp, #76	; 0x4c
 800a516:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800a51a:	e9dd 2602 	ldrd	r2, r6, [sp, #8]
 800a51e:	f026 4500 	bic.w	r5, r6, #2147483648	; 0x80000000
 800a522:	ea55 0302 	orrs.w	r3, r5, r2
 800a526:	4607      	mov	r7, r0
 800a528:	4688      	mov	r8, r1
 800a52a:	f000 84bf 	beq.w	800aeac <__ieee754_pow+0x99c>
 800a52e:	4b7e      	ldr	r3, [pc, #504]	; (800a728 <__ieee754_pow+0x218>)
 800a530:	f021 4400 	bic.w	r4, r1, #2147483648	; 0x80000000
 800a534:	429c      	cmp	r4, r3
 800a536:	4689      	mov	r9, r1
 800a538:	4682      	mov	sl, r0
 800a53a:	dc09      	bgt.n	800a550 <__ieee754_pow+0x40>
 800a53c:	d103      	bne.n	800a546 <__ieee754_pow+0x36>
 800a53e:	b978      	cbnz	r0, 800a560 <__ieee754_pow+0x50>
 800a540:	42a5      	cmp	r5, r4
 800a542:	dd02      	ble.n	800a54a <__ieee754_pow+0x3a>
 800a544:	e00c      	b.n	800a560 <__ieee754_pow+0x50>
 800a546:	429d      	cmp	r5, r3
 800a548:	dc02      	bgt.n	800a550 <__ieee754_pow+0x40>
 800a54a:	429d      	cmp	r5, r3
 800a54c:	d10e      	bne.n	800a56c <__ieee754_pow+0x5c>
 800a54e:	b16a      	cbz	r2, 800a56c <__ieee754_pow+0x5c>
 800a550:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800a554:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800a558:	ea54 030a 	orrs.w	r3, r4, sl
 800a55c:	f000 84a6 	beq.w	800aeac <__ieee754_pow+0x99c>
 800a560:	4872      	ldr	r0, [pc, #456]	; (800a72c <__ieee754_pow+0x21c>)
 800a562:	b013      	add	sp, #76	; 0x4c
 800a564:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a568:	f000 bd9e 	b.w	800b0a8 <nan>
 800a56c:	f1b9 0f00 	cmp.w	r9, #0
 800a570:	da39      	bge.n	800a5e6 <__ieee754_pow+0xd6>
 800a572:	4b6f      	ldr	r3, [pc, #444]	; (800a730 <__ieee754_pow+0x220>)
 800a574:	429d      	cmp	r5, r3
 800a576:	dc54      	bgt.n	800a622 <__ieee754_pow+0x112>
 800a578:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 800a57c:	429d      	cmp	r5, r3
 800a57e:	f340 84a6 	ble.w	800aece <__ieee754_pow+0x9be>
 800a582:	152b      	asrs	r3, r5, #20
 800a584:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800a588:	2b14      	cmp	r3, #20
 800a58a:	dd0f      	ble.n	800a5ac <__ieee754_pow+0x9c>
 800a58c:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 800a590:	fa22 f103 	lsr.w	r1, r2, r3
 800a594:	fa01 f303 	lsl.w	r3, r1, r3
 800a598:	4293      	cmp	r3, r2
 800a59a:	f040 8498 	bne.w	800aece <__ieee754_pow+0x9be>
 800a59e:	f001 0101 	and.w	r1, r1, #1
 800a5a2:	f1c1 0302 	rsb	r3, r1, #2
 800a5a6:	9300      	str	r3, [sp, #0]
 800a5a8:	b182      	cbz	r2, 800a5cc <__ieee754_pow+0xbc>
 800a5aa:	e05e      	b.n	800a66a <__ieee754_pow+0x15a>
 800a5ac:	2a00      	cmp	r2, #0
 800a5ae:	d15a      	bne.n	800a666 <__ieee754_pow+0x156>
 800a5b0:	f1c3 0314 	rsb	r3, r3, #20
 800a5b4:	fa45 f103 	asr.w	r1, r5, r3
 800a5b8:	fa01 f303 	lsl.w	r3, r1, r3
 800a5bc:	42ab      	cmp	r3, r5
 800a5be:	f040 8483 	bne.w	800aec8 <__ieee754_pow+0x9b8>
 800a5c2:	f001 0101 	and.w	r1, r1, #1
 800a5c6:	f1c1 0302 	rsb	r3, r1, #2
 800a5ca:	9300      	str	r3, [sp, #0]
 800a5cc:	4b59      	ldr	r3, [pc, #356]	; (800a734 <__ieee754_pow+0x224>)
 800a5ce:	429d      	cmp	r5, r3
 800a5d0:	d130      	bne.n	800a634 <__ieee754_pow+0x124>
 800a5d2:	2e00      	cmp	r6, #0
 800a5d4:	f280 8474 	bge.w	800aec0 <__ieee754_pow+0x9b0>
 800a5d8:	463a      	mov	r2, r7
 800a5da:	4643      	mov	r3, r8
 800a5dc:	2000      	movs	r0, #0
 800a5de:	4955      	ldr	r1, [pc, #340]	; (800a734 <__ieee754_pow+0x224>)
 800a5e0:	f7f6 f8a4 	bl	800072c <__aeabi_ddiv>
 800a5e4:	e02f      	b.n	800a646 <__ieee754_pow+0x136>
 800a5e6:	2300      	movs	r3, #0
 800a5e8:	9300      	str	r3, [sp, #0]
 800a5ea:	2a00      	cmp	r2, #0
 800a5ec:	d13d      	bne.n	800a66a <__ieee754_pow+0x15a>
 800a5ee:	4b4e      	ldr	r3, [pc, #312]	; (800a728 <__ieee754_pow+0x218>)
 800a5f0:	429d      	cmp	r5, r3
 800a5f2:	d1eb      	bne.n	800a5cc <__ieee754_pow+0xbc>
 800a5f4:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 800a5f8:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800a5fc:	ea53 030a 	orrs.w	r3, r3, sl
 800a600:	f000 8454 	beq.w	800aeac <__ieee754_pow+0x99c>
 800a604:	4b4c      	ldr	r3, [pc, #304]	; (800a738 <__ieee754_pow+0x228>)
 800a606:	429c      	cmp	r4, r3
 800a608:	dd0d      	ble.n	800a626 <__ieee754_pow+0x116>
 800a60a:	2e00      	cmp	r6, #0
 800a60c:	f280 8454 	bge.w	800aeb8 <__ieee754_pow+0x9a8>
 800a610:	f04f 0b00 	mov.w	fp, #0
 800a614:	f04f 0c00 	mov.w	ip, #0
 800a618:	4658      	mov	r0, fp
 800a61a:	4661      	mov	r1, ip
 800a61c:	b013      	add	sp, #76	; 0x4c
 800a61e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a622:	2302      	movs	r3, #2
 800a624:	e7e0      	b.n	800a5e8 <__ieee754_pow+0xd8>
 800a626:	2e00      	cmp	r6, #0
 800a628:	daf2      	bge.n	800a610 <__ieee754_pow+0x100>
 800a62a:	e9dd b302 	ldrd	fp, r3, [sp, #8]
 800a62e:	f103 4c00 	add.w	ip, r3, #2147483648	; 0x80000000
 800a632:	e7f1      	b.n	800a618 <__ieee754_pow+0x108>
 800a634:	f1b6 4f80 	cmp.w	r6, #1073741824	; 0x40000000
 800a638:	d108      	bne.n	800a64c <__ieee754_pow+0x13c>
 800a63a:	463a      	mov	r2, r7
 800a63c:	4643      	mov	r3, r8
 800a63e:	4638      	mov	r0, r7
 800a640:	4641      	mov	r1, r8
 800a642:	f7f5 ff49 	bl	80004d8 <__aeabi_dmul>
 800a646:	4683      	mov	fp, r0
 800a648:	468c      	mov	ip, r1
 800a64a:	e7e5      	b.n	800a618 <__ieee754_pow+0x108>
 800a64c:	4b3b      	ldr	r3, [pc, #236]	; (800a73c <__ieee754_pow+0x22c>)
 800a64e:	429e      	cmp	r6, r3
 800a650:	d10b      	bne.n	800a66a <__ieee754_pow+0x15a>
 800a652:	f1b9 0f00 	cmp.w	r9, #0
 800a656:	db08      	blt.n	800a66a <__ieee754_pow+0x15a>
 800a658:	4638      	mov	r0, r7
 800a65a:	4641      	mov	r1, r8
 800a65c:	b013      	add	sp, #76	; 0x4c
 800a65e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a662:	f000 bc6b 	b.w	800af3c <__ieee754_sqrt>
 800a666:	2300      	movs	r3, #0
 800a668:	9300      	str	r3, [sp, #0]
 800a66a:	4638      	mov	r0, r7
 800a66c:	4641      	mov	r1, r8
 800a66e:	f000 fd11 	bl	800b094 <fabs>
 800a672:	4683      	mov	fp, r0
 800a674:	468c      	mov	ip, r1
 800a676:	f1ba 0f00 	cmp.w	sl, #0
 800a67a:	d129      	bne.n	800a6d0 <__ieee754_pow+0x1c0>
 800a67c:	b124      	cbz	r4, 800a688 <__ieee754_pow+0x178>
 800a67e:	4b2d      	ldr	r3, [pc, #180]	; (800a734 <__ieee754_pow+0x224>)
 800a680:	f029 4240 	bic.w	r2, r9, #3221225472	; 0xc0000000
 800a684:	429a      	cmp	r2, r3
 800a686:	d123      	bne.n	800a6d0 <__ieee754_pow+0x1c0>
 800a688:	2e00      	cmp	r6, #0
 800a68a:	da07      	bge.n	800a69c <__ieee754_pow+0x18c>
 800a68c:	465a      	mov	r2, fp
 800a68e:	4663      	mov	r3, ip
 800a690:	2000      	movs	r0, #0
 800a692:	4928      	ldr	r1, [pc, #160]	; (800a734 <__ieee754_pow+0x224>)
 800a694:	f7f6 f84a 	bl	800072c <__aeabi_ddiv>
 800a698:	4683      	mov	fp, r0
 800a69a:	468c      	mov	ip, r1
 800a69c:	f1b9 0f00 	cmp.w	r9, #0
 800a6a0:	daba      	bge.n	800a618 <__ieee754_pow+0x108>
 800a6a2:	9b00      	ldr	r3, [sp, #0]
 800a6a4:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800a6a8:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800a6ac:	4323      	orrs	r3, r4
 800a6ae:	d108      	bne.n	800a6c2 <__ieee754_pow+0x1b2>
 800a6b0:	465a      	mov	r2, fp
 800a6b2:	4663      	mov	r3, ip
 800a6b4:	4658      	mov	r0, fp
 800a6b6:	4661      	mov	r1, ip
 800a6b8:	f7f5 fd56 	bl	8000168 <__aeabi_dsub>
 800a6bc:	4602      	mov	r2, r0
 800a6be:	460b      	mov	r3, r1
 800a6c0:	e78e      	b.n	800a5e0 <__ieee754_pow+0xd0>
 800a6c2:	9b00      	ldr	r3, [sp, #0]
 800a6c4:	2b01      	cmp	r3, #1
 800a6c6:	d1a7      	bne.n	800a618 <__ieee754_pow+0x108>
 800a6c8:	f10c 4300 	add.w	r3, ip, #2147483648	; 0x80000000
 800a6cc:	469c      	mov	ip, r3
 800a6ce:	e7a3      	b.n	800a618 <__ieee754_pow+0x108>
 800a6d0:	ea4f 73d9 	mov.w	r3, r9, lsr #31
 800a6d4:	3b01      	subs	r3, #1
 800a6d6:	930c      	str	r3, [sp, #48]	; 0x30
 800a6d8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a6da:	9b00      	ldr	r3, [sp, #0]
 800a6dc:	4313      	orrs	r3, r2
 800a6de:	d104      	bne.n	800a6ea <__ieee754_pow+0x1da>
 800a6e0:	463a      	mov	r2, r7
 800a6e2:	4643      	mov	r3, r8
 800a6e4:	4638      	mov	r0, r7
 800a6e6:	4641      	mov	r1, r8
 800a6e8:	e7e6      	b.n	800a6b8 <__ieee754_pow+0x1a8>
 800a6ea:	4b15      	ldr	r3, [pc, #84]	; (800a740 <__ieee754_pow+0x230>)
 800a6ec:	429d      	cmp	r5, r3
 800a6ee:	f340 80f9 	ble.w	800a8e4 <__ieee754_pow+0x3d4>
 800a6f2:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 800a6f6:	429d      	cmp	r5, r3
 800a6f8:	4b0f      	ldr	r3, [pc, #60]	; (800a738 <__ieee754_pow+0x228>)
 800a6fa:	dd09      	ble.n	800a710 <__ieee754_pow+0x200>
 800a6fc:	429c      	cmp	r4, r3
 800a6fe:	dc0c      	bgt.n	800a71a <__ieee754_pow+0x20a>
 800a700:	2e00      	cmp	r6, #0
 800a702:	da85      	bge.n	800a610 <__ieee754_pow+0x100>
 800a704:	a306      	add	r3, pc, #24	; (adr r3, 800a720 <__ieee754_pow+0x210>)
 800a706:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a70a:	4610      	mov	r0, r2
 800a70c:	4619      	mov	r1, r3
 800a70e:	e798      	b.n	800a642 <__ieee754_pow+0x132>
 800a710:	429c      	cmp	r4, r3
 800a712:	dbf5      	blt.n	800a700 <__ieee754_pow+0x1f0>
 800a714:	4b07      	ldr	r3, [pc, #28]	; (800a734 <__ieee754_pow+0x224>)
 800a716:	429c      	cmp	r4, r3
 800a718:	dd14      	ble.n	800a744 <__ieee754_pow+0x234>
 800a71a:	2e00      	cmp	r6, #0
 800a71c:	dcf2      	bgt.n	800a704 <__ieee754_pow+0x1f4>
 800a71e:	e777      	b.n	800a610 <__ieee754_pow+0x100>
 800a720:	8800759c 	.word	0x8800759c
 800a724:	7e37e43c 	.word	0x7e37e43c
 800a728:	7ff00000 	.word	0x7ff00000
 800a72c:	0800c0f5 	.word	0x0800c0f5
 800a730:	433fffff 	.word	0x433fffff
 800a734:	3ff00000 	.word	0x3ff00000
 800a738:	3fefffff 	.word	0x3fefffff
 800a73c:	3fe00000 	.word	0x3fe00000
 800a740:	41e00000 	.word	0x41e00000
 800a744:	4661      	mov	r1, ip
 800a746:	2200      	movs	r2, #0
 800a748:	4658      	mov	r0, fp
 800a74a:	4b61      	ldr	r3, [pc, #388]	; (800a8d0 <__ieee754_pow+0x3c0>)
 800a74c:	f7f5 fd0c 	bl	8000168 <__aeabi_dsub>
 800a750:	a355      	add	r3, pc, #340	; (adr r3, 800a8a8 <__ieee754_pow+0x398>)
 800a752:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a756:	4604      	mov	r4, r0
 800a758:	460d      	mov	r5, r1
 800a75a:	f7f5 febd 	bl	80004d8 <__aeabi_dmul>
 800a75e:	a354      	add	r3, pc, #336	; (adr r3, 800a8b0 <__ieee754_pow+0x3a0>)
 800a760:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a764:	4606      	mov	r6, r0
 800a766:	460f      	mov	r7, r1
 800a768:	4620      	mov	r0, r4
 800a76a:	4629      	mov	r1, r5
 800a76c:	f7f5 feb4 	bl	80004d8 <__aeabi_dmul>
 800a770:	2200      	movs	r2, #0
 800a772:	4682      	mov	sl, r0
 800a774:	468b      	mov	fp, r1
 800a776:	4620      	mov	r0, r4
 800a778:	4629      	mov	r1, r5
 800a77a:	4b56      	ldr	r3, [pc, #344]	; (800a8d4 <__ieee754_pow+0x3c4>)
 800a77c:	f7f5 feac 	bl	80004d8 <__aeabi_dmul>
 800a780:	4602      	mov	r2, r0
 800a782:	460b      	mov	r3, r1
 800a784:	a14c      	add	r1, pc, #304	; (adr r1, 800a8b8 <__ieee754_pow+0x3a8>)
 800a786:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a78a:	f7f5 fced 	bl	8000168 <__aeabi_dsub>
 800a78e:	4622      	mov	r2, r4
 800a790:	462b      	mov	r3, r5
 800a792:	f7f5 fea1 	bl	80004d8 <__aeabi_dmul>
 800a796:	4602      	mov	r2, r0
 800a798:	460b      	mov	r3, r1
 800a79a:	2000      	movs	r0, #0
 800a79c:	494e      	ldr	r1, [pc, #312]	; (800a8d8 <__ieee754_pow+0x3c8>)
 800a79e:	f7f5 fce3 	bl	8000168 <__aeabi_dsub>
 800a7a2:	4622      	mov	r2, r4
 800a7a4:	462b      	mov	r3, r5
 800a7a6:	4680      	mov	r8, r0
 800a7a8:	4689      	mov	r9, r1
 800a7aa:	4620      	mov	r0, r4
 800a7ac:	4629      	mov	r1, r5
 800a7ae:	f7f5 fe93 	bl	80004d8 <__aeabi_dmul>
 800a7b2:	4602      	mov	r2, r0
 800a7b4:	460b      	mov	r3, r1
 800a7b6:	4640      	mov	r0, r8
 800a7b8:	4649      	mov	r1, r9
 800a7ba:	f7f5 fe8d 	bl	80004d8 <__aeabi_dmul>
 800a7be:	a340      	add	r3, pc, #256	; (adr r3, 800a8c0 <__ieee754_pow+0x3b0>)
 800a7c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a7c4:	f7f5 fe88 	bl	80004d8 <__aeabi_dmul>
 800a7c8:	4602      	mov	r2, r0
 800a7ca:	460b      	mov	r3, r1
 800a7cc:	4650      	mov	r0, sl
 800a7ce:	4659      	mov	r1, fp
 800a7d0:	f7f5 fcca 	bl	8000168 <__aeabi_dsub>
 800a7d4:	f04f 0a00 	mov.w	sl, #0
 800a7d8:	4602      	mov	r2, r0
 800a7da:	460b      	mov	r3, r1
 800a7dc:	4604      	mov	r4, r0
 800a7de:	460d      	mov	r5, r1
 800a7e0:	4630      	mov	r0, r6
 800a7e2:	4639      	mov	r1, r7
 800a7e4:	f7f5 fcc2 	bl	800016c <__adddf3>
 800a7e8:	4632      	mov	r2, r6
 800a7ea:	463b      	mov	r3, r7
 800a7ec:	4650      	mov	r0, sl
 800a7ee:	468b      	mov	fp, r1
 800a7f0:	f7f5 fcba 	bl	8000168 <__aeabi_dsub>
 800a7f4:	4602      	mov	r2, r0
 800a7f6:	460b      	mov	r3, r1
 800a7f8:	4620      	mov	r0, r4
 800a7fa:	4629      	mov	r1, r5
 800a7fc:	f7f5 fcb4 	bl	8000168 <__aeabi_dsub>
 800a800:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800a804:	9b00      	ldr	r3, [sp, #0]
 800a806:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a808:	3b01      	subs	r3, #1
 800a80a:	4313      	orrs	r3, r2
 800a80c:	f04f 0600 	mov.w	r6, #0
 800a810:	f04f 0200 	mov.w	r2, #0
 800a814:	bf0c      	ite	eq
 800a816:	4b31      	ldreq	r3, [pc, #196]	; (800a8dc <__ieee754_pow+0x3cc>)
 800a818:	4b2d      	ldrne	r3, [pc, #180]	; (800a8d0 <__ieee754_pow+0x3c0>)
 800a81a:	4604      	mov	r4, r0
 800a81c:	460d      	mov	r5, r1
 800a81e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a822:	e9cd 2300 	strd	r2, r3, [sp]
 800a826:	4632      	mov	r2, r6
 800a828:	463b      	mov	r3, r7
 800a82a:	f7f5 fc9d 	bl	8000168 <__aeabi_dsub>
 800a82e:	4652      	mov	r2, sl
 800a830:	465b      	mov	r3, fp
 800a832:	f7f5 fe51 	bl	80004d8 <__aeabi_dmul>
 800a836:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a83a:	4680      	mov	r8, r0
 800a83c:	4689      	mov	r9, r1
 800a83e:	4620      	mov	r0, r4
 800a840:	4629      	mov	r1, r5
 800a842:	f7f5 fe49 	bl	80004d8 <__aeabi_dmul>
 800a846:	4602      	mov	r2, r0
 800a848:	460b      	mov	r3, r1
 800a84a:	4640      	mov	r0, r8
 800a84c:	4649      	mov	r1, r9
 800a84e:	f7f5 fc8d 	bl	800016c <__adddf3>
 800a852:	4632      	mov	r2, r6
 800a854:	463b      	mov	r3, r7
 800a856:	4680      	mov	r8, r0
 800a858:	4689      	mov	r9, r1
 800a85a:	4650      	mov	r0, sl
 800a85c:	4659      	mov	r1, fp
 800a85e:	f7f5 fe3b 	bl	80004d8 <__aeabi_dmul>
 800a862:	4604      	mov	r4, r0
 800a864:	460d      	mov	r5, r1
 800a866:	460b      	mov	r3, r1
 800a868:	4602      	mov	r2, r0
 800a86a:	4649      	mov	r1, r9
 800a86c:	4640      	mov	r0, r8
 800a86e:	e9cd 4502 	strd	r4, r5, [sp, #8]
 800a872:	f7f5 fc7b 	bl	800016c <__adddf3>
 800a876:	4b1a      	ldr	r3, [pc, #104]	; (800a8e0 <__ieee754_pow+0x3d0>)
 800a878:	4682      	mov	sl, r0
 800a87a:	4299      	cmp	r1, r3
 800a87c:	460f      	mov	r7, r1
 800a87e:	460e      	mov	r6, r1
 800a880:	f340 82ed 	ble.w	800ae5e <__ieee754_pow+0x94e>
 800a884:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 800a888:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800a88c:	4303      	orrs	r3, r0
 800a88e:	f000 81e7 	beq.w	800ac60 <__ieee754_pow+0x750>
 800a892:	a30d      	add	r3, pc, #52	; (adr r3, 800a8c8 <__ieee754_pow+0x3b8>)
 800a894:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a898:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a89c:	f7f5 fe1c 	bl	80004d8 <__aeabi_dmul>
 800a8a0:	a309      	add	r3, pc, #36	; (adr r3, 800a8c8 <__ieee754_pow+0x3b8>)
 800a8a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a8a6:	e6cc      	b.n	800a642 <__ieee754_pow+0x132>
 800a8a8:	60000000 	.word	0x60000000
 800a8ac:	3ff71547 	.word	0x3ff71547
 800a8b0:	f85ddf44 	.word	0xf85ddf44
 800a8b4:	3e54ae0b 	.word	0x3e54ae0b
 800a8b8:	55555555 	.word	0x55555555
 800a8bc:	3fd55555 	.word	0x3fd55555
 800a8c0:	652b82fe 	.word	0x652b82fe
 800a8c4:	3ff71547 	.word	0x3ff71547
 800a8c8:	8800759c 	.word	0x8800759c
 800a8cc:	7e37e43c 	.word	0x7e37e43c
 800a8d0:	3ff00000 	.word	0x3ff00000
 800a8d4:	3fd00000 	.word	0x3fd00000
 800a8d8:	3fe00000 	.word	0x3fe00000
 800a8dc:	bff00000 	.word	0xbff00000
 800a8e0:	408fffff 	.word	0x408fffff
 800a8e4:	4bd4      	ldr	r3, [pc, #848]	; (800ac38 <__ieee754_pow+0x728>)
 800a8e6:	2200      	movs	r2, #0
 800a8e8:	ea09 0303 	and.w	r3, r9, r3
 800a8ec:	b943      	cbnz	r3, 800a900 <__ieee754_pow+0x3f0>
 800a8ee:	4658      	mov	r0, fp
 800a8f0:	4661      	mov	r1, ip
 800a8f2:	4bd2      	ldr	r3, [pc, #840]	; (800ac3c <__ieee754_pow+0x72c>)
 800a8f4:	f7f5 fdf0 	bl	80004d8 <__aeabi_dmul>
 800a8f8:	f06f 0234 	mvn.w	r2, #52	; 0x34
 800a8fc:	4683      	mov	fp, r0
 800a8fe:	460c      	mov	r4, r1
 800a900:	1523      	asrs	r3, r4, #20
 800a902:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800a906:	4413      	add	r3, r2
 800a908:	930b      	str	r3, [sp, #44]	; 0x2c
 800a90a:	4bcd      	ldr	r3, [pc, #820]	; (800ac40 <__ieee754_pow+0x730>)
 800a90c:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800a910:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 800a914:	429c      	cmp	r4, r3
 800a916:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800a91a:	dd08      	ble.n	800a92e <__ieee754_pow+0x41e>
 800a91c:	4bc9      	ldr	r3, [pc, #804]	; (800ac44 <__ieee754_pow+0x734>)
 800a91e:	429c      	cmp	r4, r3
 800a920:	f340 819c 	ble.w	800ac5c <__ieee754_pow+0x74c>
 800a924:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a926:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 800a92a:	3301      	adds	r3, #1
 800a92c:	930b      	str	r3, [sp, #44]	; 0x2c
 800a92e:	2600      	movs	r6, #0
 800a930:	00f3      	lsls	r3, r6, #3
 800a932:	930d      	str	r3, [sp, #52]	; 0x34
 800a934:	4bc4      	ldr	r3, [pc, #784]	; (800ac48 <__ieee754_pow+0x738>)
 800a936:	4658      	mov	r0, fp
 800a938:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800a93c:	e9d3 3400 	ldrd	r3, r4, [r3]
 800a940:	4629      	mov	r1, r5
 800a942:	461a      	mov	r2, r3
 800a944:	e9cd 3408 	strd	r3, r4, [sp, #32]
 800a948:	4623      	mov	r3, r4
 800a94a:	f7f5 fc0d 	bl	8000168 <__aeabi_dsub>
 800a94e:	46da      	mov	sl, fp
 800a950:	462b      	mov	r3, r5
 800a952:	4652      	mov	r2, sl
 800a954:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 800a958:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800a95c:	f7f5 fc06 	bl	800016c <__adddf3>
 800a960:	4602      	mov	r2, r0
 800a962:	460b      	mov	r3, r1
 800a964:	2000      	movs	r0, #0
 800a966:	49b9      	ldr	r1, [pc, #740]	; (800ac4c <__ieee754_pow+0x73c>)
 800a968:	f7f5 fee0 	bl	800072c <__aeabi_ddiv>
 800a96c:	4602      	mov	r2, r0
 800a96e:	460b      	mov	r3, r1
 800a970:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800a974:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800a978:	f7f5 fdae 	bl	80004d8 <__aeabi_dmul>
 800a97c:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800a980:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
 800a984:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800a988:	2300      	movs	r3, #0
 800a98a:	2200      	movs	r2, #0
 800a98c:	46ab      	mov	fp, r5
 800a98e:	106d      	asrs	r5, r5, #1
 800a990:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 800a994:	9304      	str	r3, [sp, #16]
 800a996:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 800a99a:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 800a99e:	eb05 4386 	add.w	r3, r5, r6, lsl #18
 800a9a2:	4640      	mov	r0, r8
 800a9a4:	4649      	mov	r1, r9
 800a9a6:	4614      	mov	r4, r2
 800a9a8:	461d      	mov	r5, r3
 800a9aa:	f7f5 fd95 	bl	80004d8 <__aeabi_dmul>
 800a9ae:	4602      	mov	r2, r0
 800a9b0:	460b      	mov	r3, r1
 800a9b2:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800a9b6:	f7f5 fbd7 	bl	8000168 <__aeabi_dsub>
 800a9ba:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800a9be:	4606      	mov	r6, r0
 800a9c0:	460f      	mov	r7, r1
 800a9c2:	4620      	mov	r0, r4
 800a9c4:	4629      	mov	r1, r5
 800a9c6:	f7f5 fbcf 	bl	8000168 <__aeabi_dsub>
 800a9ca:	4602      	mov	r2, r0
 800a9cc:	460b      	mov	r3, r1
 800a9ce:	4650      	mov	r0, sl
 800a9d0:	4659      	mov	r1, fp
 800a9d2:	f7f5 fbc9 	bl	8000168 <__aeabi_dsub>
 800a9d6:	4642      	mov	r2, r8
 800a9d8:	464b      	mov	r3, r9
 800a9da:	f7f5 fd7d 	bl	80004d8 <__aeabi_dmul>
 800a9de:	4602      	mov	r2, r0
 800a9e0:	460b      	mov	r3, r1
 800a9e2:	4630      	mov	r0, r6
 800a9e4:	4639      	mov	r1, r7
 800a9e6:	f7f5 fbbf 	bl	8000168 <__aeabi_dsub>
 800a9ea:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800a9ee:	f7f5 fd73 	bl	80004d8 <__aeabi_dmul>
 800a9f2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a9f6:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800a9fa:	4610      	mov	r0, r2
 800a9fc:	4619      	mov	r1, r3
 800a9fe:	f7f5 fd6b 	bl	80004d8 <__aeabi_dmul>
 800aa02:	a37b      	add	r3, pc, #492	; (adr r3, 800abf0 <__ieee754_pow+0x6e0>)
 800aa04:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa08:	4604      	mov	r4, r0
 800aa0a:	460d      	mov	r5, r1
 800aa0c:	f7f5 fd64 	bl	80004d8 <__aeabi_dmul>
 800aa10:	a379      	add	r3, pc, #484	; (adr r3, 800abf8 <__ieee754_pow+0x6e8>)
 800aa12:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa16:	f7f5 fba9 	bl	800016c <__adddf3>
 800aa1a:	4622      	mov	r2, r4
 800aa1c:	462b      	mov	r3, r5
 800aa1e:	f7f5 fd5b 	bl	80004d8 <__aeabi_dmul>
 800aa22:	a377      	add	r3, pc, #476	; (adr r3, 800ac00 <__ieee754_pow+0x6f0>)
 800aa24:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa28:	f7f5 fba0 	bl	800016c <__adddf3>
 800aa2c:	4622      	mov	r2, r4
 800aa2e:	462b      	mov	r3, r5
 800aa30:	f7f5 fd52 	bl	80004d8 <__aeabi_dmul>
 800aa34:	a374      	add	r3, pc, #464	; (adr r3, 800ac08 <__ieee754_pow+0x6f8>)
 800aa36:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa3a:	f7f5 fb97 	bl	800016c <__adddf3>
 800aa3e:	4622      	mov	r2, r4
 800aa40:	462b      	mov	r3, r5
 800aa42:	f7f5 fd49 	bl	80004d8 <__aeabi_dmul>
 800aa46:	a372      	add	r3, pc, #456	; (adr r3, 800ac10 <__ieee754_pow+0x700>)
 800aa48:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa4c:	f7f5 fb8e 	bl	800016c <__adddf3>
 800aa50:	4622      	mov	r2, r4
 800aa52:	462b      	mov	r3, r5
 800aa54:	f7f5 fd40 	bl	80004d8 <__aeabi_dmul>
 800aa58:	a36f      	add	r3, pc, #444	; (adr r3, 800ac18 <__ieee754_pow+0x708>)
 800aa5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa5e:	f7f5 fb85 	bl	800016c <__adddf3>
 800aa62:	4622      	mov	r2, r4
 800aa64:	4606      	mov	r6, r0
 800aa66:	460f      	mov	r7, r1
 800aa68:	462b      	mov	r3, r5
 800aa6a:	4620      	mov	r0, r4
 800aa6c:	4629      	mov	r1, r5
 800aa6e:	f7f5 fd33 	bl	80004d8 <__aeabi_dmul>
 800aa72:	4602      	mov	r2, r0
 800aa74:	460b      	mov	r3, r1
 800aa76:	4630      	mov	r0, r6
 800aa78:	4639      	mov	r1, r7
 800aa7a:	f7f5 fd2d 	bl	80004d8 <__aeabi_dmul>
 800aa7e:	4604      	mov	r4, r0
 800aa80:	460d      	mov	r5, r1
 800aa82:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800aa86:	4642      	mov	r2, r8
 800aa88:	464b      	mov	r3, r9
 800aa8a:	f7f5 fb6f 	bl	800016c <__adddf3>
 800aa8e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800aa92:	f7f5 fd21 	bl	80004d8 <__aeabi_dmul>
 800aa96:	4622      	mov	r2, r4
 800aa98:	462b      	mov	r3, r5
 800aa9a:	f7f5 fb67 	bl	800016c <__adddf3>
 800aa9e:	4642      	mov	r2, r8
 800aaa0:	4606      	mov	r6, r0
 800aaa2:	460f      	mov	r7, r1
 800aaa4:	464b      	mov	r3, r9
 800aaa6:	4640      	mov	r0, r8
 800aaa8:	4649      	mov	r1, r9
 800aaaa:	f7f5 fd15 	bl	80004d8 <__aeabi_dmul>
 800aaae:	2200      	movs	r2, #0
 800aab0:	4b67      	ldr	r3, [pc, #412]	; (800ac50 <__ieee754_pow+0x740>)
 800aab2:	4682      	mov	sl, r0
 800aab4:	468b      	mov	fp, r1
 800aab6:	f7f5 fb59 	bl	800016c <__adddf3>
 800aaba:	4632      	mov	r2, r6
 800aabc:	463b      	mov	r3, r7
 800aabe:	f7f5 fb55 	bl	800016c <__adddf3>
 800aac2:	9c04      	ldr	r4, [sp, #16]
 800aac4:	460d      	mov	r5, r1
 800aac6:	4622      	mov	r2, r4
 800aac8:	460b      	mov	r3, r1
 800aaca:	4640      	mov	r0, r8
 800aacc:	4649      	mov	r1, r9
 800aace:	f7f5 fd03 	bl	80004d8 <__aeabi_dmul>
 800aad2:	2200      	movs	r2, #0
 800aad4:	4680      	mov	r8, r0
 800aad6:	4689      	mov	r9, r1
 800aad8:	4620      	mov	r0, r4
 800aada:	4629      	mov	r1, r5
 800aadc:	4b5c      	ldr	r3, [pc, #368]	; (800ac50 <__ieee754_pow+0x740>)
 800aade:	f7f5 fb43 	bl	8000168 <__aeabi_dsub>
 800aae2:	4652      	mov	r2, sl
 800aae4:	465b      	mov	r3, fp
 800aae6:	f7f5 fb3f 	bl	8000168 <__aeabi_dsub>
 800aaea:	4602      	mov	r2, r0
 800aaec:	460b      	mov	r3, r1
 800aaee:	4630      	mov	r0, r6
 800aaf0:	4639      	mov	r1, r7
 800aaf2:	f7f5 fb39 	bl	8000168 <__aeabi_dsub>
 800aaf6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800aafa:	f7f5 fced 	bl	80004d8 <__aeabi_dmul>
 800aafe:	4622      	mov	r2, r4
 800ab00:	4606      	mov	r6, r0
 800ab02:	460f      	mov	r7, r1
 800ab04:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800ab08:	462b      	mov	r3, r5
 800ab0a:	f7f5 fce5 	bl	80004d8 <__aeabi_dmul>
 800ab0e:	4602      	mov	r2, r0
 800ab10:	460b      	mov	r3, r1
 800ab12:	4630      	mov	r0, r6
 800ab14:	4639      	mov	r1, r7
 800ab16:	f7f5 fb29 	bl	800016c <__adddf3>
 800ab1a:	4606      	mov	r6, r0
 800ab1c:	460f      	mov	r7, r1
 800ab1e:	4602      	mov	r2, r0
 800ab20:	460b      	mov	r3, r1
 800ab22:	4640      	mov	r0, r8
 800ab24:	4649      	mov	r1, r9
 800ab26:	f7f5 fb21 	bl	800016c <__adddf3>
 800ab2a:	a33d      	add	r3, pc, #244	; (adr r3, 800ac20 <__ieee754_pow+0x710>)
 800ab2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab30:	9c04      	ldr	r4, [sp, #16]
 800ab32:	460d      	mov	r5, r1
 800ab34:	4620      	mov	r0, r4
 800ab36:	f7f5 fccf 	bl	80004d8 <__aeabi_dmul>
 800ab3a:	4642      	mov	r2, r8
 800ab3c:	464b      	mov	r3, r9
 800ab3e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800ab42:	4620      	mov	r0, r4
 800ab44:	4629      	mov	r1, r5
 800ab46:	f7f5 fb0f 	bl	8000168 <__aeabi_dsub>
 800ab4a:	4602      	mov	r2, r0
 800ab4c:	460b      	mov	r3, r1
 800ab4e:	4630      	mov	r0, r6
 800ab50:	4639      	mov	r1, r7
 800ab52:	f7f5 fb09 	bl	8000168 <__aeabi_dsub>
 800ab56:	a334      	add	r3, pc, #208	; (adr r3, 800ac28 <__ieee754_pow+0x718>)
 800ab58:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab5c:	f7f5 fcbc 	bl	80004d8 <__aeabi_dmul>
 800ab60:	a333      	add	r3, pc, #204	; (adr r3, 800ac30 <__ieee754_pow+0x720>)
 800ab62:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab66:	4606      	mov	r6, r0
 800ab68:	460f      	mov	r7, r1
 800ab6a:	4620      	mov	r0, r4
 800ab6c:	4629      	mov	r1, r5
 800ab6e:	f7f5 fcb3 	bl	80004d8 <__aeabi_dmul>
 800ab72:	4602      	mov	r2, r0
 800ab74:	460b      	mov	r3, r1
 800ab76:	4630      	mov	r0, r6
 800ab78:	4639      	mov	r1, r7
 800ab7a:	f7f5 faf7 	bl	800016c <__adddf3>
 800ab7e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800ab80:	4b34      	ldr	r3, [pc, #208]	; (800ac54 <__ieee754_pow+0x744>)
 800ab82:	4413      	add	r3, r2
 800ab84:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab88:	f7f5 faf0 	bl	800016c <__adddf3>
 800ab8c:	4680      	mov	r8, r0
 800ab8e:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800ab90:	4689      	mov	r9, r1
 800ab92:	f7f5 fc37 	bl	8000404 <__aeabi_i2d>
 800ab96:	4604      	mov	r4, r0
 800ab98:	460d      	mov	r5, r1
 800ab9a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800ab9c:	4b2e      	ldr	r3, [pc, #184]	; (800ac58 <__ieee754_pow+0x748>)
 800ab9e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800aba2:	4413      	add	r3, r2
 800aba4:	e9d3 6700 	ldrd	r6, r7, [r3]
 800aba8:	4642      	mov	r2, r8
 800abaa:	464b      	mov	r3, r9
 800abac:	f7f5 fade 	bl	800016c <__adddf3>
 800abb0:	4632      	mov	r2, r6
 800abb2:	463b      	mov	r3, r7
 800abb4:	f7f5 fada 	bl	800016c <__adddf3>
 800abb8:	4622      	mov	r2, r4
 800abba:	462b      	mov	r3, r5
 800abbc:	f7f5 fad6 	bl	800016c <__adddf3>
 800abc0:	f8dd a010 	ldr.w	sl, [sp, #16]
 800abc4:	4622      	mov	r2, r4
 800abc6:	462b      	mov	r3, r5
 800abc8:	4650      	mov	r0, sl
 800abca:	468b      	mov	fp, r1
 800abcc:	f7f5 facc 	bl	8000168 <__aeabi_dsub>
 800abd0:	4632      	mov	r2, r6
 800abd2:	463b      	mov	r3, r7
 800abd4:	f7f5 fac8 	bl	8000168 <__aeabi_dsub>
 800abd8:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800abdc:	f7f5 fac4 	bl	8000168 <__aeabi_dsub>
 800abe0:	4602      	mov	r2, r0
 800abe2:	460b      	mov	r3, r1
 800abe4:	4640      	mov	r0, r8
 800abe6:	4649      	mov	r1, r9
 800abe8:	e608      	b.n	800a7fc <__ieee754_pow+0x2ec>
 800abea:	bf00      	nop
 800abec:	f3af 8000 	nop.w
 800abf0:	4a454eef 	.word	0x4a454eef
 800abf4:	3fca7e28 	.word	0x3fca7e28
 800abf8:	93c9db65 	.word	0x93c9db65
 800abfc:	3fcd864a 	.word	0x3fcd864a
 800ac00:	a91d4101 	.word	0xa91d4101
 800ac04:	3fd17460 	.word	0x3fd17460
 800ac08:	518f264d 	.word	0x518f264d
 800ac0c:	3fd55555 	.word	0x3fd55555
 800ac10:	db6fabff 	.word	0xdb6fabff
 800ac14:	3fdb6db6 	.word	0x3fdb6db6
 800ac18:	33333303 	.word	0x33333303
 800ac1c:	3fe33333 	.word	0x3fe33333
 800ac20:	e0000000 	.word	0xe0000000
 800ac24:	3feec709 	.word	0x3feec709
 800ac28:	dc3a03fd 	.word	0xdc3a03fd
 800ac2c:	3feec709 	.word	0x3feec709
 800ac30:	145b01f5 	.word	0x145b01f5
 800ac34:	be3e2fe0 	.word	0xbe3e2fe0
 800ac38:	7ff00000 	.word	0x7ff00000
 800ac3c:	43400000 	.word	0x43400000
 800ac40:	0003988e 	.word	0x0003988e
 800ac44:	000bb679 	.word	0x000bb679
 800ac48:	0800c0b0 	.word	0x0800c0b0
 800ac4c:	3ff00000 	.word	0x3ff00000
 800ac50:	40080000 	.word	0x40080000
 800ac54:	0800c0d0 	.word	0x0800c0d0
 800ac58:	0800c0c0 	.word	0x0800c0c0
 800ac5c:	2601      	movs	r6, #1
 800ac5e:	e667      	b.n	800a930 <__ieee754_pow+0x420>
 800ac60:	a39d      	add	r3, pc, #628	; (adr r3, 800aed8 <__ieee754_pow+0x9c8>)
 800ac62:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac66:	4640      	mov	r0, r8
 800ac68:	4649      	mov	r1, r9
 800ac6a:	f7f5 fa7f 	bl	800016c <__adddf3>
 800ac6e:	4622      	mov	r2, r4
 800ac70:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800ac74:	462b      	mov	r3, r5
 800ac76:	4650      	mov	r0, sl
 800ac78:	4639      	mov	r1, r7
 800ac7a:	f7f5 fa75 	bl	8000168 <__aeabi_dsub>
 800ac7e:	4602      	mov	r2, r0
 800ac80:	460b      	mov	r3, r1
 800ac82:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800ac86:	f7f5 feb7 	bl	80009f8 <__aeabi_dcmpgt>
 800ac8a:	2800      	cmp	r0, #0
 800ac8c:	f47f ae01 	bne.w	800a892 <__ieee754_pow+0x382>
 800ac90:	4aa5      	ldr	r2, [pc, #660]	; (800af28 <__ieee754_pow+0xa18>)
 800ac92:	f026 4300 	bic.w	r3, r6, #2147483648	; 0x80000000
 800ac96:	4293      	cmp	r3, r2
 800ac98:	f340 8103 	ble.w	800aea2 <__ieee754_pow+0x992>
 800ac9c:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 800aca0:	2000      	movs	r0, #0
 800aca2:	151b      	asrs	r3, r3, #20
 800aca4:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 800aca8:	fa4a f303 	asr.w	r3, sl, r3
 800acac:	4433      	add	r3, r6
 800acae:	f3c3 520a 	ubfx	r2, r3, #20, #11
 800acb2:	4f9e      	ldr	r7, [pc, #632]	; (800af2c <__ieee754_pow+0xa1c>)
 800acb4:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 800acb8:	4117      	asrs	r7, r2
 800acba:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 800acbe:	ea23 0107 	bic.w	r1, r3, r7
 800acc2:	f1c2 0214 	rsb	r2, r2, #20
 800acc6:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 800acca:	460b      	mov	r3, r1
 800accc:	fa4a fa02 	asr.w	sl, sl, r2
 800acd0:	2e00      	cmp	r6, #0
 800acd2:	4602      	mov	r2, r0
 800acd4:	4629      	mov	r1, r5
 800acd6:	4620      	mov	r0, r4
 800acd8:	bfb8      	it	lt
 800acda:	f1ca 0a00 	rsblt	sl, sl, #0
 800acde:	f7f5 fa43 	bl	8000168 <__aeabi_dsub>
 800ace2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ace6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800acea:	2400      	movs	r4, #0
 800acec:	4642      	mov	r2, r8
 800acee:	464b      	mov	r3, r9
 800acf0:	f7f5 fa3c 	bl	800016c <__adddf3>
 800acf4:	a37a      	add	r3, pc, #488	; (adr r3, 800aee0 <__ieee754_pow+0x9d0>)
 800acf6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800acfa:	4620      	mov	r0, r4
 800acfc:	460d      	mov	r5, r1
 800acfe:	f7f5 fbeb 	bl	80004d8 <__aeabi_dmul>
 800ad02:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800ad06:	4606      	mov	r6, r0
 800ad08:	460f      	mov	r7, r1
 800ad0a:	4620      	mov	r0, r4
 800ad0c:	4629      	mov	r1, r5
 800ad0e:	f7f5 fa2b 	bl	8000168 <__aeabi_dsub>
 800ad12:	4602      	mov	r2, r0
 800ad14:	460b      	mov	r3, r1
 800ad16:	4640      	mov	r0, r8
 800ad18:	4649      	mov	r1, r9
 800ad1a:	f7f5 fa25 	bl	8000168 <__aeabi_dsub>
 800ad1e:	a372      	add	r3, pc, #456	; (adr r3, 800aee8 <__ieee754_pow+0x9d8>)
 800ad20:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad24:	f7f5 fbd8 	bl	80004d8 <__aeabi_dmul>
 800ad28:	a371      	add	r3, pc, #452	; (adr r3, 800aef0 <__ieee754_pow+0x9e0>)
 800ad2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad2e:	4680      	mov	r8, r0
 800ad30:	4689      	mov	r9, r1
 800ad32:	4620      	mov	r0, r4
 800ad34:	4629      	mov	r1, r5
 800ad36:	f7f5 fbcf 	bl	80004d8 <__aeabi_dmul>
 800ad3a:	4602      	mov	r2, r0
 800ad3c:	460b      	mov	r3, r1
 800ad3e:	4640      	mov	r0, r8
 800ad40:	4649      	mov	r1, r9
 800ad42:	f7f5 fa13 	bl	800016c <__adddf3>
 800ad46:	4604      	mov	r4, r0
 800ad48:	460d      	mov	r5, r1
 800ad4a:	4602      	mov	r2, r0
 800ad4c:	460b      	mov	r3, r1
 800ad4e:	4630      	mov	r0, r6
 800ad50:	4639      	mov	r1, r7
 800ad52:	f7f5 fa0b 	bl	800016c <__adddf3>
 800ad56:	4632      	mov	r2, r6
 800ad58:	463b      	mov	r3, r7
 800ad5a:	4680      	mov	r8, r0
 800ad5c:	4689      	mov	r9, r1
 800ad5e:	f7f5 fa03 	bl	8000168 <__aeabi_dsub>
 800ad62:	4602      	mov	r2, r0
 800ad64:	460b      	mov	r3, r1
 800ad66:	4620      	mov	r0, r4
 800ad68:	4629      	mov	r1, r5
 800ad6a:	f7f5 f9fd 	bl	8000168 <__aeabi_dsub>
 800ad6e:	4642      	mov	r2, r8
 800ad70:	4606      	mov	r6, r0
 800ad72:	460f      	mov	r7, r1
 800ad74:	464b      	mov	r3, r9
 800ad76:	4640      	mov	r0, r8
 800ad78:	4649      	mov	r1, r9
 800ad7a:	f7f5 fbad 	bl	80004d8 <__aeabi_dmul>
 800ad7e:	a35e      	add	r3, pc, #376	; (adr r3, 800aef8 <__ieee754_pow+0x9e8>)
 800ad80:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad84:	4604      	mov	r4, r0
 800ad86:	460d      	mov	r5, r1
 800ad88:	f7f5 fba6 	bl	80004d8 <__aeabi_dmul>
 800ad8c:	a35c      	add	r3, pc, #368	; (adr r3, 800af00 <__ieee754_pow+0x9f0>)
 800ad8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad92:	f7f5 f9e9 	bl	8000168 <__aeabi_dsub>
 800ad96:	4622      	mov	r2, r4
 800ad98:	462b      	mov	r3, r5
 800ad9a:	f7f5 fb9d 	bl	80004d8 <__aeabi_dmul>
 800ad9e:	a35a      	add	r3, pc, #360	; (adr r3, 800af08 <__ieee754_pow+0x9f8>)
 800ada0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ada4:	f7f5 f9e2 	bl	800016c <__adddf3>
 800ada8:	4622      	mov	r2, r4
 800adaa:	462b      	mov	r3, r5
 800adac:	f7f5 fb94 	bl	80004d8 <__aeabi_dmul>
 800adb0:	a357      	add	r3, pc, #348	; (adr r3, 800af10 <__ieee754_pow+0xa00>)
 800adb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800adb6:	f7f5 f9d7 	bl	8000168 <__aeabi_dsub>
 800adba:	4622      	mov	r2, r4
 800adbc:	462b      	mov	r3, r5
 800adbe:	f7f5 fb8b 	bl	80004d8 <__aeabi_dmul>
 800adc2:	a355      	add	r3, pc, #340	; (adr r3, 800af18 <__ieee754_pow+0xa08>)
 800adc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800adc8:	f7f5 f9d0 	bl	800016c <__adddf3>
 800adcc:	4622      	mov	r2, r4
 800adce:	462b      	mov	r3, r5
 800add0:	f7f5 fb82 	bl	80004d8 <__aeabi_dmul>
 800add4:	4602      	mov	r2, r0
 800add6:	460b      	mov	r3, r1
 800add8:	4640      	mov	r0, r8
 800adda:	4649      	mov	r1, r9
 800addc:	f7f5 f9c4 	bl	8000168 <__aeabi_dsub>
 800ade0:	4604      	mov	r4, r0
 800ade2:	460d      	mov	r5, r1
 800ade4:	4602      	mov	r2, r0
 800ade6:	460b      	mov	r3, r1
 800ade8:	4640      	mov	r0, r8
 800adea:	4649      	mov	r1, r9
 800adec:	f7f5 fb74 	bl	80004d8 <__aeabi_dmul>
 800adf0:	2200      	movs	r2, #0
 800adf2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800adf6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800adfa:	4620      	mov	r0, r4
 800adfc:	4629      	mov	r1, r5
 800adfe:	f7f5 f9b3 	bl	8000168 <__aeabi_dsub>
 800ae02:	4602      	mov	r2, r0
 800ae04:	460b      	mov	r3, r1
 800ae06:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ae0a:	f7f5 fc8f 	bl	800072c <__aeabi_ddiv>
 800ae0e:	4632      	mov	r2, r6
 800ae10:	4604      	mov	r4, r0
 800ae12:	460d      	mov	r5, r1
 800ae14:	463b      	mov	r3, r7
 800ae16:	4640      	mov	r0, r8
 800ae18:	4649      	mov	r1, r9
 800ae1a:	f7f5 fb5d 	bl	80004d8 <__aeabi_dmul>
 800ae1e:	4632      	mov	r2, r6
 800ae20:	463b      	mov	r3, r7
 800ae22:	f7f5 f9a3 	bl	800016c <__adddf3>
 800ae26:	4602      	mov	r2, r0
 800ae28:	460b      	mov	r3, r1
 800ae2a:	4620      	mov	r0, r4
 800ae2c:	4629      	mov	r1, r5
 800ae2e:	f7f5 f99b 	bl	8000168 <__aeabi_dsub>
 800ae32:	4642      	mov	r2, r8
 800ae34:	464b      	mov	r3, r9
 800ae36:	f7f5 f997 	bl	8000168 <__aeabi_dsub>
 800ae3a:	4602      	mov	r2, r0
 800ae3c:	460b      	mov	r3, r1
 800ae3e:	2000      	movs	r0, #0
 800ae40:	493b      	ldr	r1, [pc, #236]	; (800af30 <__ieee754_pow+0xa20>)
 800ae42:	f7f5 f991 	bl	8000168 <__aeabi_dsub>
 800ae46:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 800ae4a:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 800ae4e:	da2b      	bge.n	800aea8 <__ieee754_pow+0x998>
 800ae50:	4652      	mov	r2, sl
 800ae52:	f000 f9b9 	bl	800b1c8 <scalbn>
 800ae56:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ae5a:	f7ff bbf2 	b.w	800a642 <__ieee754_pow+0x132>
 800ae5e:	4b35      	ldr	r3, [pc, #212]	; (800af34 <__ieee754_pow+0xa24>)
 800ae60:	f021 4700 	bic.w	r7, r1, #2147483648	; 0x80000000
 800ae64:	429f      	cmp	r7, r3
 800ae66:	f77f af13 	ble.w	800ac90 <__ieee754_pow+0x780>
 800ae6a:	4b33      	ldr	r3, [pc, #204]	; (800af38 <__ieee754_pow+0xa28>)
 800ae6c:	440b      	add	r3, r1
 800ae6e:	4303      	orrs	r3, r0
 800ae70:	d00b      	beq.n	800ae8a <__ieee754_pow+0x97a>
 800ae72:	a32b      	add	r3, pc, #172	; (adr r3, 800af20 <__ieee754_pow+0xa10>)
 800ae74:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae78:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ae7c:	f7f5 fb2c 	bl	80004d8 <__aeabi_dmul>
 800ae80:	a327      	add	r3, pc, #156	; (adr r3, 800af20 <__ieee754_pow+0xa10>)
 800ae82:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae86:	f7ff bbdc 	b.w	800a642 <__ieee754_pow+0x132>
 800ae8a:	4622      	mov	r2, r4
 800ae8c:	462b      	mov	r3, r5
 800ae8e:	f7f5 f96b 	bl	8000168 <__aeabi_dsub>
 800ae92:	4642      	mov	r2, r8
 800ae94:	464b      	mov	r3, r9
 800ae96:	f7f5 fda5 	bl	80009e4 <__aeabi_dcmpge>
 800ae9a:	2800      	cmp	r0, #0
 800ae9c:	f43f aef8 	beq.w	800ac90 <__ieee754_pow+0x780>
 800aea0:	e7e7      	b.n	800ae72 <__ieee754_pow+0x962>
 800aea2:	f04f 0a00 	mov.w	sl, #0
 800aea6:	e71e      	b.n	800ace6 <__ieee754_pow+0x7d6>
 800aea8:	4621      	mov	r1, r4
 800aeaa:	e7d4      	b.n	800ae56 <__ieee754_pow+0x946>
 800aeac:	f04f 0b00 	mov.w	fp, #0
 800aeb0:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800af30 <__ieee754_pow+0xa20>
 800aeb4:	f7ff bbb0 	b.w	800a618 <__ieee754_pow+0x108>
 800aeb8:	e9dd bc02 	ldrd	fp, ip, [sp, #8]
 800aebc:	f7ff bbac 	b.w	800a618 <__ieee754_pow+0x108>
 800aec0:	4638      	mov	r0, r7
 800aec2:	4641      	mov	r1, r8
 800aec4:	f7ff bbbf 	b.w	800a646 <__ieee754_pow+0x136>
 800aec8:	9200      	str	r2, [sp, #0]
 800aeca:	f7ff bb7f 	b.w	800a5cc <__ieee754_pow+0xbc>
 800aece:	2300      	movs	r3, #0
 800aed0:	f7ff bb69 	b.w	800a5a6 <__ieee754_pow+0x96>
 800aed4:	f3af 8000 	nop.w
 800aed8:	652b82fe 	.word	0x652b82fe
 800aedc:	3c971547 	.word	0x3c971547
 800aee0:	00000000 	.word	0x00000000
 800aee4:	3fe62e43 	.word	0x3fe62e43
 800aee8:	fefa39ef 	.word	0xfefa39ef
 800aeec:	3fe62e42 	.word	0x3fe62e42
 800aef0:	0ca86c39 	.word	0x0ca86c39
 800aef4:	be205c61 	.word	0xbe205c61
 800aef8:	72bea4d0 	.word	0x72bea4d0
 800aefc:	3e663769 	.word	0x3e663769
 800af00:	c5d26bf1 	.word	0xc5d26bf1
 800af04:	3ebbbd41 	.word	0x3ebbbd41
 800af08:	af25de2c 	.word	0xaf25de2c
 800af0c:	3f11566a 	.word	0x3f11566a
 800af10:	16bebd93 	.word	0x16bebd93
 800af14:	3f66c16c 	.word	0x3f66c16c
 800af18:	5555553e 	.word	0x5555553e
 800af1c:	3fc55555 	.word	0x3fc55555
 800af20:	c2f8f359 	.word	0xc2f8f359
 800af24:	01a56e1f 	.word	0x01a56e1f
 800af28:	3fe00000 	.word	0x3fe00000
 800af2c:	000fffff 	.word	0x000fffff
 800af30:	3ff00000 	.word	0x3ff00000
 800af34:	4090cbff 	.word	0x4090cbff
 800af38:	3f6f3400 	.word	0x3f6f3400

0800af3c <__ieee754_sqrt>:
 800af3c:	f8df c150 	ldr.w	ip, [pc, #336]	; 800b090 <__ieee754_sqrt+0x154>
 800af40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800af44:	ea3c 0c01 	bics.w	ip, ip, r1
 800af48:	460b      	mov	r3, r1
 800af4a:	4606      	mov	r6, r0
 800af4c:	460d      	mov	r5, r1
 800af4e:	460a      	mov	r2, r1
 800af50:	4607      	mov	r7, r0
 800af52:	4604      	mov	r4, r0
 800af54:	d10e      	bne.n	800af74 <__ieee754_sqrt+0x38>
 800af56:	4602      	mov	r2, r0
 800af58:	f7f5 fabe 	bl	80004d8 <__aeabi_dmul>
 800af5c:	4602      	mov	r2, r0
 800af5e:	460b      	mov	r3, r1
 800af60:	4630      	mov	r0, r6
 800af62:	4629      	mov	r1, r5
 800af64:	f7f5 f902 	bl	800016c <__adddf3>
 800af68:	4606      	mov	r6, r0
 800af6a:	460d      	mov	r5, r1
 800af6c:	4630      	mov	r0, r6
 800af6e:	4629      	mov	r1, r5
 800af70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800af74:	2900      	cmp	r1, #0
 800af76:	dc0d      	bgt.n	800af94 <__ieee754_sqrt+0x58>
 800af78:	f021 4c00 	bic.w	ip, r1, #2147483648	; 0x80000000
 800af7c:	ea5c 0707 	orrs.w	r7, ip, r7
 800af80:	d0f4      	beq.n	800af6c <__ieee754_sqrt+0x30>
 800af82:	b139      	cbz	r1, 800af94 <__ieee754_sqrt+0x58>
 800af84:	4602      	mov	r2, r0
 800af86:	f7f5 f8ef 	bl	8000168 <__aeabi_dsub>
 800af8a:	4602      	mov	r2, r0
 800af8c:	460b      	mov	r3, r1
 800af8e:	f7f5 fbcd 	bl	800072c <__aeabi_ddiv>
 800af92:	e7e9      	b.n	800af68 <__ieee754_sqrt+0x2c>
 800af94:	1512      	asrs	r2, r2, #20
 800af96:	d074      	beq.n	800b082 <__ieee754_sqrt+0x146>
 800af98:	2000      	movs	r0, #0
 800af9a:	07d5      	lsls	r5, r2, #31
 800af9c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800afa0:	f443 1180 	orr.w	r1, r3, #1048576	; 0x100000
 800afa4:	bf5e      	ittt	pl
 800afa6:	0fe3      	lsrpl	r3, r4, #31
 800afa8:	0064      	lslpl	r4, r4, #1
 800afaa:	eb03 0141 	addpl.w	r1, r3, r1, lsl #1
 800afae:	0fe3      	lsrs	r3, r4, #31
 800afb0:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 800afb4:	eb03 0341 	add.w	r3, r3, r1, lsl #1
 800afb8:	2516      	movs	r5, #22
 800afba:	4601      	mov	r1, r0
 800afbc:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800afc0:	1076      	asrs	r6, r6, #1
 800afc2:	0064      	lsls	r4, r4, #1
 800afc4:	188f      	adds	r7, r1, r2
 800afc6:	429f      	cmp	r7, r3
 800afc8:	bfde      	ittt	le
 800afca:	1bdb      	suble	r3, r3, r7
 800afcc:	18b9      	addle	r1, r7, r2
 800afce:	1880      	addle	r0, r0, r2
 800afd0:	005b      	lsls	r3, r3, #1
 800afd2:	3d01      	subs	r5, #1
 800afd4:	eb03 73d4 	add.w	r3, r3, r4, lsr #31
 800afd8:	ea4f 0252 	mov.w	r2, r2, lsr #1
 800afdc:	ea4f 0444 	mov.w	r4, r4, lsl #1
 800afe0:	d1f0      	bne.n	800afc4 <__ieee754_sqrt+0x88>
 800afe2:	462a      	mov	r2, r5
 800afe4:	f04f 0e20 	mov.w	lr, #32
 800afe8:	f04f 4700 	mov.w	r7, #2147483648	; 0x80000000
 800afec:	428b      	cmp	r3, r1
 800afee:	eb07 0c05 	add.w	ip, r7, r5
 800aff2:	dc02      	bgt.n	800affa <__ieee754_sqrt+0xbe>
 800aff4:	d113      	bne.n	800b01e <__ieee754_sqrt+0xe2>
 800aff6:	45a4      	cmp	ip, r4
 800aff8:	d811      	bhi.n	800b01e <__ieee754_sqrt+0xe2>
 800affa:	f1bc 0f00 	cmp.w	ip, #0
 800affe:	eb0c 0507 	add.w	r5, ip, r7
 800b002:	da43      	bge.n	800b08c <__ieee754_sqrt+0x150>
 800b004:	2d00      	cmp	r5, #0
 800b006:	db41      	blt.n	800b08c <__ieee754_sqrt+0x150>
 800b008:	f101 0801 	add.w	r8, r1, #1
 800b00c:	1a5b      	subs	r3, r3, r1
 800b00e:	4641      	mov	r1, r8
 800b010:	45a4      	cmp	ip, r4
 800b012:	bf88      	it	hi
 800b014:	f103 33ff 	addhi.w	r3, r3, #4294967295	; 0xffffffff
 800b018:	eba4 040c 	sub.w	r4, r4, ip
 800b01c:	443a      	add	r2, r7
 800b01e:	005b      	lsls	r3, r3, #1
 800b020:	f1be 0e01 	subs.w	lr, lr, #1
 800b024:	eb03 73d4 	add.w	r3, r3, r4, lsr #31
 800b028:	ea4f 0757 	mov.w	r7, r7, lsr #1
 800b02c:	ea4f 0444 	mov.w	r4, r4, lsl #1
 800b030:	d1dc      	bne.n	800afec <__ieee754_sqrt+0xb0>
 800b032:	4323      	orrs	r3, r4
 800b034:	d006      	beq.n	800b044 <__ieee754_sqrt+0x108>
 800b036:	1c54      	adds	r4, r2, #1
 800b038:	bf0b      	itete	eq
 800b03a:	4672      	moveq	r2, lr
 800b03c:	3201      	addne	r2, #1
 800b03e:	3001      	addeq	r0, #1
 800b040:	f022 0201 	bicne.w	r2, r2, #1
 800b044:	1043      	asrs	r3, r0, #1
 800b046:	07c1      	lsls	r1, r0, #31
 800b048:	ea4f 0252 	mov.w	r2, r2, lsr #1
 800b04c:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800b050:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800b054:	bf48      	it	mi
 800b056:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 800b05a:	4610      	mov	r0, r2
 800b05c:	eb03 5106 	add.w	r1, r3, r6, lsl #20
 800b060:	e782      	b.n	800af68 <__ieee754_sqrt+0x2c>
 800b062:	0ae3      	lsrs	r3, r4, #11
 800b064:	3915      	subs	r1, #21
 800b066:	0564      	lsls	r4, r4, #21
 800b068:	2b00      	cmp	r3, #0
 800b06a:	d0fa      	beq.n	800b062 <__ieee754_sqrt+0x126>
 800b06c:	02de      	lsls	r6, r3, #11
 800b06e:	d50a      	bpl.n	800b086 <__ieee754_sqrt+0x14a>
 800b070:	f1c2 0020 	rsb	r0, r2, #32
 800b074:	fa24 f000 	lsr.w	r0, r4, r0
 800b078:	1e55      	subs	r5, r2, #1
 800b07a:	4094      	lsls	r4, r2
 800b07c:	4303      	orrs	r3, r0
 800b07e:	1b4a      	subs	r2, r1, r5
 800b080:	e78a      	b.n	800af98 <__ieee754_sqrt+0x5c>
 800b082:	4611      	mov	r1, r2
 800b084:	e7f0      	b.n	800b068 <__ieee754_sqrt+0x12c>
 800b086:	005b      	lsls	r3, r3, #1
 800b088:	3201      	adds	r2, #1
 800b08a:	e7ef      	b.n	800b06c <__ieee754_sqrt+0x130>
 800b08c:	4688      	mov	r8, r1
 800b08e:	e7bd      	b.n	800b00c <__ieee754_sqrt+0xd0>
 800b090:	7ff00000 	.word	0x7ff00000

0800b094 <fabs>:
 800b094:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800b098:	4770      	bx	lr

0800b09a <finite>:
 800b09a:	f041 4000 	orr.w	r0, r1, #2147483648	; 0x80000000
 800b09e:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800b0a2:	0fc0      	lsrs	r0, r0, #31
 800b0a4:	4770      	bx	lr
	...

0800b0a8 <nan>:
 800b0a8:	2000      	movs	r0, #0
 800b0aa:	4901      	ldr	r1, [pc, #4]	; (800b0b0 <nan+0x8>)
 800b0ac:	4770      	bx	lr
 800b0ae:	bf00      	nop
 800b0b0:	7ff80000 	.word	0x7ff80000

0800b0b4 <rint>:
 800b0b4:	f3c1 5c0a 	ubfx	ip, r1, #20, #11
 800b0b8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b0ba:	f2ac 37ff 	subw	r7, ip, #1023	; 0x3ff
 800b0be:	2f13      	cmp	r7, #19
 800b0c0:	4602      	mov	r2, r0
 800b0c2:	460b      	mov	r3, r1
 800b0c4:	460c      	mov	r4, r1
 800b0c6:	4605      	mov	r5, r0
 800b0c8:	ea4f 76d1 	mov.w	r6, r1, lsr #31
 800b0cc:	dc59      	bgt.n	800b182 <rint+0xce>
 800b0ce:	2f00      	cmp	r7, #0
 800b0d0:	da2a      	bge.n	800b128 <rint+0x74>
 800b0d2:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800b0d6:	4301      	orrs	r1, r0
 800b0d8:	d022      	beq.n	800b120 <rint+0x6c>
 800b0da:	f3c3 0113 	ubfx	r1, r3, #0, #20
 800b0de:	4301      	orrs	r1, r0
 800b0e0:	424d      	negs	r5, r1
 800b0e2:	430d      	orrs	r5, r1
 800b0e4:	4936      	ldr	r1, [pc, #216]	; (800b1c0 <rint+0x10c>)
 800b0e6:	0c5c      	lsrs	r4, r3, #17
 800b0e8:	0b2d      	lsrs	r5, r5, #12
 800b0ea:	f405 2500 	and.w	r5, r5, #524288	; 0x80000
 800b0ee:	0464      	lsls	r4, r4, #17
 800b0f0:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800b0f4:	ea45 0304 	orr.w	r3, r5, r4
 800b0f8:	e9d1 4500 	ldrd	r4, r5, [r1]
 800b0fc:	4620      	mov	r0, r4
 800b0fe:	4629      	mov	r1, r5
 800b100:	f7f5 f834 	bl	800016c <__adddf3>
 800b104:	e9cd 0100 	strd	r0, r1, [sp]
 800b108:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b10c:	462b      	mov	r3, r5
 800b10e:	4622      	mov	r2, r4
 800b110:	f7f5 f82a 	bl	8000168 <__aeabi_dsub>
 800b114:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800b118:	ea43 71c6 	orr.w	r1, r3, r6, lsl #31
 800b11c:	4602      	mov	r2, r0
 800b11e:	460b      	mov	r3, r1
 800b120:	4610      	mov	r0, r2
 800b122:	4619      	mov	r1, r3
 800b124:	b003      	add	sp, #12
 800b126:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b128:	4926      	ldr	r1, [pc, #152]	; (800b1c4 <rint+0x110>)
 800b12a:	4139      	asrs	r1, r7
 800b12c:	ea03 0001 	and.w	r0, r3, r1
 800b130:	4310      	orrs	r0, r2
 800b132:	d0f5      	beq.n	800b120 <rint+0x6c>
 800b134:	084b      	lsrs	r3, r1, #1
 800b136:	ea04 0151 	and.w	r1, r4, r1, lsr #1
 800b13a:	ea52 0501 	orrs.w	r5, r2, r1
 800b13e:	d00c      	beq.n	800b15a <rint+0xa6>
 800b140:	ea24 0303 	bic.w	r3, r4, r3
 800b144:	f44f 2480 	mov.w	r4, #262144	; 0x40000
 800b148:	2f13      	cmp	r7, #19
 800b14a:	bf0c      	ite	eq
 800b14c:	f04f 4500 	moveq.w	r5, #2147483648	; 0x80000000
 800b150:	2500      	movne	r5, #0
 800b152:	fa44 f707 	asr.w	r7, r4, r7
 800b156:	ea43 0407 	orr.w	r4, r3, r7
 800b15a:	4919      	ldr	r1, [pc, #100]	; (800b1c0 <rint+0x10c>)
 800b15c:	4623      	mov	r3, r4
 800b15e:	eb01 06c6 	add.w	r6, r1, r6, lsl #3
 800b162:	462a      	mov	r2, r5
 800b164:	e9d6 4500 	ldrd	r4, r5, [r6]
 800b168:	4620      	mov	r0, r4
 800b16a:	4629      	mov	r1, r5
 800b16c:	f7f4 fffe 	bl	800016c <__adddf3>
 800b170:	e9cd 0100 	strd	r0, r1, [sp]
 800b174:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b178:	4622      	mov	r2, r4
 800b17a:	462b      	mov	r3, r5
 800b17c:	f7f4 fff4 	bl	8000168 <__aeabi_dsub>
 800b180:	e7cc      	b.n	800b11c <rint+0x68>
 800b182:	2f33      	cmp	r7, #51	; 0x33
 800b184:	dd05      	ble.n	800b192 <rint+0xde>
 800b186:	f5b7 6f80 	cmp.w	r7, #1024	; 0x400
 800b18a:	d1c9      	bne.n	800b120 <rint+0x6c>
 800b18c:	f7f4 ffee 	bl	800016c <__adddf3>
 800b190:	e7c4      	b.n	800b11c <rint+0x68>
 800b192:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800b196:	f2ac 4c13 	subw	ip, ip, #1043	; 0x413
 800b19a:	fa21 f10c 	lsr.w	r1, r1, ip
 800b19e:	4208      	tst	r0, r1
 800b1a0:	d0be      	beq.n	800b120 <rint+0x6c>
 800b1a2:	ea10 0251 	ands.w	r2, r0, r1, lsr #1
 800b1a6:	bf18      	it	ne
 800b1a8:	f04f 4580 	movne.w	r5, #1073741824	; 0x40000000
 800b1ac:	ea4f 0351 	mov.w	r3, r1, lsr #1
 800b1b0:	bf1e      	ittt	ne
 800b1b2:	ea20 0303 	bicne.w	r3, r0, r3
 800b1b6:	fa45 fc0c 	asrne.w	ip, r5, ip
 800b1ba:	ea43 050c 	orrne.w	r5, r3, ip
 800b1be:	e7cc      	b.n	800b15a <rint+0xa6>
 800b1c0:	0800c0e0 	.word	0x0800c0e0
 800b1c4:	000fffff 	.word	0x000fffff

0800b1c8 <scalbn>:
 800b1c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b1ca:	f3c1 560a 	ubfx	r6, r1, #20, #11
 800b1ce:	4604      	mov	r4, r0
 800b1d0:	460d      	mov	r5, r1
 800b1d2:	4617      	mov	r7, r2
 800b1d4:	460b      	mov	r3, r1
 800b1d6:	b996      	cbnz	r6, 800b1fe <scalbn+0x36>
 800b1d8:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800b1dc:	4303      	orrs	r3, r0
 800b1de:	d039      	beq.n	800b254 <scalbn+0x8c>
 800b1e0:	4b35      	ldr	r3, [pc, #212]	; (800b2b8 <scalbn+0xf0>)
 800b1e2:	2200      	movs	r2, #0
 800b1e4:	f7f5 f978 	bl	80004d8 <__aeabi_dmul>
 800b1e8:	4b34      	ldr	r3, [pc, #208]	; (800b2bc <scalbn+0xf4>)
 800b1ea:	4604      	mov	r4, r0
 800b1ec:	429f      	cmp	r7, r3
 800b1ee:	460d      	mov	r5, r1
 800b1f0:	da0f      	bge.n	800b212 <scalbn+0x4a>
 800b1f2:	a32d      	add	r3, pc, #180	; (adr r3, 800b2a8 <scalbn+0xe0>)
 800b1f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b1f8:	f7f5 f96e 	bl	80004d8 <__aeabi_dmul>
 800b1fc:	e006      	b.n	800b20c <scalbn+0x44>
 800b1fe:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800b202:	4296      	cmp	r6, r2
 800b204:	d10a      	bne.n	800b21c <scalbn+0x54>
 800b206:	4602      	mov	r2, r0
 800b208:	f7f4 ffb0 	bl	800016c <__adddf3>
 800b20c:	4604      	mov	r4, r0
 800b20e:	460d      	mov	r5, r1
 800b210:	e020      	b.n	800b254 <scalbn+0x8c>
 800b212:	460b      	mov	r3, r1
 800b214:	f3c1 510a 	ubfx	r1, r1, #20, #11
 800b218:	f1a1 0636 	sub.w	r6, r1, #54	; 0x36
 800b21c:	f240 72fe 	movw	r2, #2046	; 0x7fe
 800b220:	19b9      	adds	r1, r7, r6
 800b222:	4291      	cmp	r1, r2
 800b224:	dd0e      	ble.n	800b244 <scalbn+0x7c>
 800b226:	a322      	add	r3, pc, #136	; (adr r3, 800b2b0 <scalbn+0xe8>)
 800b228:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b22c:	f005 4400 	and.w	r4, r5, #2147483648	; 0x80000000
 800b230:	f044 41fc 	orr.w	r1, r4, #2113929216	; 0x7e000000
 800b234:	f441 115f 	orr.w	r1, r1, #3653632	; 0x37c000
 800b238:	f441 5110 	orr.w	r1, r1, #9216	; 0x2400
 800b23c:	4820      	ldr	r0, [pc, #128]	; (800b2c0 <scalbn+0xf8>)
 800b23e:	f041 013c 	orr.w	r1, r1, #60	; 0x3c
 800b242:	e7d9      	b.n	800b1f8 <scalbn+0x30>
 800b244:	2900      	cmp	r1, #0
 800b246:	dd08      	ble.n	800b25a <scalbn+0x92>
 800b248:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800b24c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800b250:	ea43 5501 	orr.w	r5, r3, r1, lsl #20
 800b254:	4620      	mov	r0, r4
 800b256:	4629      	mov	r1, r5
 800b258:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b25a:	f111 0f35 	cmn.w	r1, #53	; 0x35
 800b25e:	da16      	bge.n	800b28e <scalbn+0xc6>
 800b260:	f24c 3350 	movw	r3, #50000	; 0xc350
 800b264:	429f      	cmp	r7, r3
 800b266:	ea4f 73d5 	mov.w	r3, r5, lsr #31
 800b26a:	dd08      	ble.n	800b27e <scalbn+0xb6>
 800b26c:	4c15      	ldr	r4, [pc, #84]	; (800b2c4 <scalbn+0xfc>)
 800b26e:	4814      	ldr	r0, [pc, #80]	; (800b2c0 <scalbn+0xf8>)
 800b270:	f363 74df 	bfi	r4, r3, #31, #1
 800b274:	a30e      	add	r3, pc, #56	; (adr r3, 800b2b0 <scalbn+0xe8>)
 800b276:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b27a:	4621      	mov	r1, r4
 800b27c:	e7bc      	b.n	800b1f8 <scalbn+0x30>
 800b27e:	4c12      	ldr	r4, [pc, #72]	; (800b2c8 <scalbn+0x100>)
 800b280:	4812      	ldr	r0, [pc, #72]	; (800b2cc <scalbn+0x104>)
 800b282:	f363 74df 	bfi	r4, r3, #31, #1
 800b286:	a308      	add	r3, pc, #32	; (adr r3, 800b2a8 <scalbn+0xe0>)
 800b288:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b28c:	e7f5      	b.n	800b27a <scalbn+0xb2>
 800b28e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800b292:	3136      	adds	r1, #54	; 0x36
 800b294:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800b298:	ea43 5501 	orr.w	r5, r3, r1, lsl #20
 800b29c:	4620      	mov	r0, r4
 800b29e:	4629      	mov	r1, r5
 800b2a0:	2200      	movs	r2, #0
 800b2a2:	4b0b      	ldr	r3, [pc, #44]	; (800b2d0 <scalbn+0x108>)
 800b2a4:	e7a8      	b.n	800b1f8 <scalbn+0x30>
 800b2a6:	bf00      	nop
 800b2a8:	c2f8f359 	.word	0xc2f8f359
 800b2ac:	01a56e1f 	.word	0x01a56e1f
 800b2b0:	8800759c 	.word	0x8800759c
 800b2b4:	7e37e43c 	.word	0x7e37e43c
 800b2b8:	43500000 	.word	0x43500000
 800b2bc:	ffff3cb0 	.word	0xffff3cb0
 800b2c0:	8800759c 	.word	0x8800759c
 800b2c4:	7e37e43c 	.word	0x7e37e43c
 800b2c8:	01a56e1f 	.word	0x01a56e1f
 800b2cc:	c2f8f359 	.word	0xc2f8f359
 800b2d0:	3c900000 	.word	0x3c900000

0800b2d4 <__errno>:
 800b2d4:	4b01      	ldr	r3, [pc, #4]	; (800b2dc <__errno+0x8>)
 800b2d6:	6818      	ldr	r0, [r3, #0]
 800b2d8:	4770      	bx	lr
 800b2da:	bf00      	nop
 800b2dc:	20000058 	.word	0x20000058

0800b2e0 <__libc_init_array>:
 800b2e0:	b570      	push	{r4, r5, r6, lr}
 800b2e2:	2600      	movs	r6, #0
 800b2e4:	4d0c      	ldr	r5, [pc, #48]	; (800b318 <__libc_init_array+0x38>)
 800b2e6:	4c0d      	ldr	r4, [pc, #52]	; (800b31c <__libc_init_array+0x3c>)
 800b2e8:	1b64      	subs	r4, r4, r5
 800b2ea:	10a4      	asrs	r4, r4, #2
 800b2ec:	42a6      	cmp	r6, r4
 800b2ee:	d109      	bne.n	800b304 <__libc_init_array+0x24>
 800b2f0:	f000 fcbe 	bl	800bc70 <_init>
 800b2f4:	2600      	movs	r6, #0
 800b2f6:	4d0a      	ldr	r5, [pc, #40]	; (800b320 <__libc_init_array+0x40>)
 800b2f8:	4c0a      	ldr	r4, [pc, #40]	; (800b324 <__libc_init_array+0x44>)
 800b2fa:	1b64      	subs	r4, r4, r5
 800b2fc:	10a4      	asrs	r4, r4, #2
 800b2fe:	42a6      	cmp	r6, r4
 800b300:	d105      	bne.n	800b30e <__libc_init_array+0x2e>
 800b302:	bd70      	pop	{r4, r5, r6, pc}
 800b304:	f855 3b04 	ldr.w	r3, [r5], #4
 800b308:	4798      	blx	r3
 800b30a:	3601      	adds	r6, #1
 800b30c:	e7ee      	b.n	800b2ec <__libc_init_array+0xc>
 800b30e:	f855 3b04 	ldr.w	r3, [r5], #4
 800b312:	4798      	blx	r3
 800b314:	3601      	adds	r6, #1
 800b316:	e7f2      	b.n	800b2fe <__libc_init_array+0x1e>
 800b318:	0800c124 	.word	0x0800c124
 800b31c:	0800c124 	.word	0x0800c124
 800b320:	0800c124 	.word	0x0800c124
 800b324:	0800c128 	.word	0x0800c128

0800b328 <memset>:
 800b328:	4603      	mov	r3, r0
 800b32a:	4402      	add	r2, r0
 800b32c:	4293      	cmp	r3, r2
 800b32e:	d100      	bne.n	800b332 <memset+0xa>
 800b330:	4770      	bx	lr
 800b332:	f803 1b01 	strb.w	r1, [r3], #1
 800b336:	e7f9      	b.n	800b32c <memset+0x4>

0800b338 <siprintf>:
 800b338:	b40e      	push	{r1, r2, r3}
 800b33a:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800b33e:	b500      	push	{lr}
 800b340:	b09c      	sub	sp, #112	; 0x70
 800b342:	ab1d      	add	r3, sp, #116	; 0x74
 800b344:	9002      	str	r0, [sp, #8]
 800b346:	9006      	str	r0, [sp, #24]
 800b348:	9107      	str	r1, [sp, #28]
 800b34a:	9104      	str	r1, [sp, #16]
 800b34c:	4808      	ldr	r0, [pc, #32]	; (800b370 <siprintf+0x38>)
 800b34e:	4909      	ldr	r1, [pc, #36]	; (800b374 <siprintf+0x3c>)
 800b350:	f853 2b04 	ldr.w	r2, [r3], #4
 800b354:	9105      	str	r1, [sp, #20]
 800b356:	6800      	ldr	r0, [r0, #0]
 800b358:	a902      	add	r1, sp, #8
 800b35a:	9301      	str	r3, [sp, #4]
 800b35c:	f000 f8ca 	bl	800b4f4 <_svfiprintf_r>
 800b360:	2200      	movs	r2, #0
 800b362:	9b02      	ldr	r3, [sp, #8]
 800b364:	701a      	strb	r2, [r3, #0]
 800b366:	b01c      	add	sp, #112	; 0x70
 800b368:	f85d eb04 	ldr.w	lr, [sp], #4
 800b36c:	b003      	add	sp, #12
 800b36e:	4770      	bx	lr
 800b370:	20000058 	.word	0x20000058
 800b374:	ffff0208 	.word	0xffff0208

0800b378 <strchr>:
 800b378:	4603      	mov	r3, r0
 800b37a:	b2c9      	uxtb	r1, r1
 800b37c:	4618      	mov	r0, r3
 800b37e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b382:	b112      	cbz	r2, 800b38a <strchr+0x12>
 800b384:	428a      	cmp	r2, r1
 800b386:	d1f9      	bne.n	800b37c <strchr+0x4>
 800b388:	4770      	bx	lr
 800b38a:	2900      	cmp	r1, #0
 800b38c:	bf18      	it	ne
 800b38e:	2000      	movne	r0, #0
 800b390:	4770      	bx	lr

0800b392 <strcpy>:
 800b392:	4603      	mov	r3, r0
 800b394:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b398:	f803 2b01 	strb.w	r2, [r3], #1
 800b39c:	2a00      	cmp	r2, #0
 800b39e:	d1f9      	bne.n	800b394 <strcpy+0x2>
 800b3a0:	4770      	bx	lr

0800b3a2 <strncpy>:
 800b3a2:	4603      	mov	r3, r0
 800b3a4:	b510      	push	{r4, lr}
 800b3a6:	3901      	subs	r1, #1
 800b3a8:	b132      	cbz	r2, 800b3b8 <strncpy+0x16>
 800b3aa:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800b3ae:	3a01      	subs	r2, #1
 800b3b0:	f803 4b01 	strb.w	r4, [r3], #1
 800b3b4:	2c00      	cmp	r4, #0
 800b3b6:	d1f7      	bne.n	800b3a8 <strncpy+0x6>
 800b3b8:	2100      	movs	r1, #0
 800b3ba:	441a      	add	r2, r3
 800b3bc:	4293      	cmp	r3, r2
 800b3be:	d100      	bne.n	800b3c2 <strncpy+0x20>
 800b3c0:	bd10      	pop	{r4, pc}
 800b3c2:	f803 1b01 	strb.w	r1, [r3], #1
 800b3c6:	e7f9      	b.n	800b3bc <strncpy+0x1a>

0800b3c8 <_vsniprintf_r>:
 800b3c8:	b530      	push	{r4, r5, lr}
 800b3ca:	1e14      	subs	r4, r2, #0
 800b3cc:	4605      	mov	r5, r0
 800b3ce:	b09b      	sub	sp, #108	; 0x6c
 800b3d0:	4618      	mov	r0, r3
 800b3d2:	da05      	bge.n	800b3e0 <_vsniprintf_r+0x18>
 800b3d4:	238b      	movs	r3, #139	; 0x8b
 800b3d6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b3da:	602b      	str	r3, [r5, #0]
 800b3dc:	b01b      	add	sp, #108	; 0x6c
 800b3de:	bd30      	pop	{r4, r5, pc}
 800b3e0:	f44f 7302 	mov.w	r3, #520	; 0x208
 800b3e4:	f8ad 300c 	strh.w	r3, [sp, #12]
 800b3e8:	bf0c      	ite	eq
 800b3ea:	4623      	moveq	r3, r4
 800b3ec:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 800b3f0:	9302      	str	r3, [sp, #8]
 800b3f2:	9305      	str	r3, [sp, #20]
 800b3f4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800b3f8:	4602      	mov	r2, r0
 800b3fa:	9100      	str	r1, [sp, #0]
 800b3fc:	9104      	str	r1, [sp, #16]
 800b3fe:	f8ad 300e 	strh.w	r3, [sp, #14]
 800b402:	4669      	mov	r1, sp
 800b404:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800b406:	4628      	mov	r0, r5
 800b408:	f000 f874 	bl	800b4f4 <_svfiprintf_r>
 800b40c:	1c43      	adds	r3, r0, #1
 800b40e:	bfbc      	itt	lt
 800b410:	238b      	movlt	r3, #139	; 0x8b
 800b412:	602b      	strlt	r3, [r5, #0]
 800b414:	2c00      	cmp	r4, #0
 800b416:	d0e1      	beq.n	800b3dc <_vsniprintf_r+0x14>
 800b418:	2200      	movs	r2, #0
 800b41a:	9b00      	ldr	r3, [sp, #0]
 800b41c:	701a      	strb	r2, [r3, #0]
 800b41e:	e7dd      	b.n	800b3dc <_vsniprintf_r+0x14>

0800b420 <vsniprintf>:
 800b420:	b507      	push	{r0, r1, r2, lr}
 800b422:	9300      	str	r3, [sp, #0]
 800b424:	4613      	mov	r3, r2
 800b426:	460a      	mov	r2, r1
 800b428:	4601      	mov	r1, r0
 800b42a:	4803      	ldr	r0, [pc, #12]	; (800b438 <vsniprintf+0x18>)
 800b42c:	6800      	ldr	r0, [r0, #0]
 800b42e:	f7ff ffcb 	bl	800b3c8 <_vsniprintf_r>
 800b432:	b003      	add	sp, #12
 800b434:	f85d fb04 	ldr.w	pc, [sp], #4
 800b438:	20000058 	.word	0x20000058

0800b43c <__ssputs_r>:
 800b43c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b440:	688e      	ldr	r6, [r1, #8]
 800b442:	4682      	mov	sl, r0
 800b444:	429e      	cmp	r6, r3
 800b446:	460c      	mov	r4, r1
 800b448:	4690      	mov	r8, r2
 800b44a:	461f      	mov	r7, r3
 800b44c:	d838      	bhi.n	800b4c0 <__ssputs_r+0x84>
 800b44e:	898a      	ldrh	r2, [r1, #12]
 800b450:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800b454:	d032      	beq.n	800b4bc <__ssputs_r+0x80>
 800b456:	6825      	ldr	r5, [r4, #0]
 800b458:	6909      	ldr	r1, [r1, #16]
 800b45a:	3301      	adds	r3, #1
 800b45c:	eba5 0901 	sub.w	r9, r5, r1
 800b460:	6965      	ldr	r5, [r4, #20]
 800b462:	444b      	add	r3, r9
 800b464:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b468:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b46c:	106d      	asrs	r5, r5, #1
 800b46e:	429d      	cmp	r5, r3
 800b470:	bf38      	it	cc
 800b472:	461d      	movcc	r5, r3
 800b474:	0553      	lsls	r3, r2, #21
 800b476:	d531      	bpl.n	800b4dc <__ssputs_r+0xa0>
 800b478:	4629      	mov	r1, r5
 800b47a:	f000 fb53 	bl	800bb24 <_malloc_r>
 800b47e:	4606      	mov	r6, r0
 800b480:	b950      	cbnz	r0, 800b498 <__ssputs_r+0x5c>
 800b482:	230c      	movs	r3, #12
 800b484:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b488:	f8ca 3000 	str.w	r3, [sl]
 800b48c:	89a3      	ldrh	r3, [r4, #12]
 800b48e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b492:	81a3      	strh	r3, [r4, #12]
 800b494:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b498:	464a      	mov	r2, r9
 800b49a:	6921      	ldr	r1, [r4, #16]
 800b49c:	f000 face 	bl	800ba3c <memcpy>
 800b4a0:	89a3      	ldrh	r3, [r4, #12]
 800b4a2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800b4a6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b4aa:	81a3      	strh	r3, [r4, #12]
 800b4ac:	6126      	str	r6, [r4, #16]
 800b4ae:	444e      	add	r6, r9
 800b4b0:	6026      	str	r6, [r4, #0]
 800b4b2:	463e      	mov	r6, r7
 800b4b4:	6165      	str	r5, [r4, #20]
 800b4b6:	eba5 0509 	sub.w	r5, r5, r9
 800b4ba:	60a5      	str	r5, [r4, #8]
 800b4bc:	42be      	cmp	r6, r7
 800b4be:	d900      	bls.n	800b4c2 <__ssputs_r+0x86>
 800b4c0:	463e      	mov	r6, r7
 800b4c2:	4632      	mov	r2, r6
 800b4c4:	4641      	mov	r1, r8
 800b4c6:	6820      	ldr	r0, [r4, #0]
 800b4c8:	f000 fac6 	bl	800ba58 <memmove>
 800b4cc:	68a3      	ldr	r3, [r4, #8]
 800b4ce:	6822      	ldr	r2, [r4, #0]
 800b4d0:	1b9b      	subs	r3, r3, r6
 800b4d2:	4432      	add	r2, r6
 800b4d4:	2000      	movs	r0, #0
 800b4d6:	60a3      	str	r3, [r4, #8]
 800b4d8:	6022      	str	r2, [r4, #0]
 800b4da:	e7db      	b.n	800b494 <__ssputs_r+0x58>
 800b4dc:	462a      	mov	r2, r5
 800b4de:	f000 fb7b 	bl	800bbd8 <_realloc_r>
 800b4e2:	4606      	mov	r6, r0
 800b4e4:	2800      	cmp	r0, #0
 800b4e6:	d1e1      	bne.n	800b4ac <__ssputs_r+0x70>
 800b4e8:	4650      	mov	r0, sl
 800b4ea:	6921      	ldr	r1, [r4, #16]
 800b4ec:	f000 face 	bl	800ba8c <_free_r>
 800b4f0:	e7c7      	b.n	800b482 <__ssputs_r+0x46>
	...

0800b4f4 <_svfiprintf_r>:
 800b4f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b4f8:	4698      	mov	r8, r3
 800b4fa:	898b      	ldrh	r3, [r1, #12]
 800b4fc:	4607      	mov	r7, r0
 800b4fe:	061b      	lsls	r3, r3, #24
 800b500:	460d      	mov	r5, r1
 800b502:	4614      	mov	r4, r2
 800b504:	b09d      	sub	sp, #116	; 0x74
 800b506:	d50e      	bpl.n	800b526 <_svfiprintf_r+0x32>
 800b508:	690b      	ldr	r3, [r1, #16]
 800b50a:	b963      	cbnz	r3, 800b526 <_svfiprintf_r+0x32>
 800b50c:	2140      	movs	r1, #64	; 0x40
 800b50e:	f000 fb09 	bl	800bb24 <_malloc_r>
 800b512:	6028      	str	r0, [r5, #0]
 800b514:	6128      	str	r0, [r5, #16]
 800b516:	b920      	cbnz	r0, 800b522 <_svfiprintf_r+0x2e>
 800b518:	230c      	movs	r3, #12
 800b51a:	603b      	str	r3, [r7, #0]
 800b51c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b520:	e0d1      	b.n	800b6c6 <_svfiprintf_r+0x1d2>
 800b522:	2340      	movs	r3, #64	; 0x40
 800b524:	616b      	str	r3, [r5, #20]
 800b526:	2300      	movs	r3, #0
 800b528:	9309      	str	r3, [sp, #36]	; 0x24
 800b52a:	2320      	movs	r3, #32
 800b52c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b530:	2330      	movs	r3, #48	; 0x30
 800b532:	f04f 0901 	mov.w	r9, #1
 800b536:	f8cd 800c 	str.w	r8, [sp, #12]
 800b53a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800b6e0 <_svfiprintf_r+0x1ec>
 800b53e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b542:	4623      	mov	r3, r4
 800b544:	469a      	mov	sl, r3
 800b546:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b54a:	b10a      	cbz	r2, 800b550 <_svfiprintf_r+0x5c>
 800b54c:	2a25      	cmp	r2, #37	; 0x25
 800b54e:	d1f9      	bne.n	800b544 <_svfiprintf_r+0x50>
 800b550:	ebba 0b04 	subs.w	fp, sl, r4
 800b554:	d00b      	beq.n	800b56e <_svfiprintf_r+0x7a>
 800b556:	465b      	mov	r3, fp
 800b558:	4622      	mov	r2, r4
 800b55a:	4629      	mov	r1, r5
 800b55c:	4638      	mov	r0, r7
 800b55e:	f7ff ff6d 	bl	800b43c <__ssputs_r>
 800b562:	3001      	adds	r0, #1
 800b564:	f000 80aa 	beq.w	800b6bc <_svfiprintf_r+0x1c8>
 800b568:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b56a:	445a      	add	r2, fp
 800b56c:	9209      	str	r2, [sp, #36]	; 0x24
 800b56e:	f89a 3000 	ldrb.w	r3, [sl]
 800b572:	2b00      	cmp	r3, #0
 800b574:	f000 80a2 	beq.w	800b6bc <_svfiprintf_r+0x1c8>
 800b578:	2300      	movs	r3, #0
 800b57a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b57e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b582:	f10a 0a01 	add.w	sl, sl, #1
 800b586:	9304      	str	r3, [sp, #16]
 800b588:	9307      	str	r3, [sp, #28]
 800b58a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b58e:	931a      	str	r3, [sp, #104]	; 0x68
 800b590:	4654      	mov	r4, sl
 800b592:	2205      	movs	r2, #5
 800b594:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b598:	4851      	ldr	r0, [pc, #324]	; (800b6e0 <_svfiprintf_r+0x1ec>)
 800b59a:	f000 fa41 	bl	800ba20 <memchr>
 800b59e:	9a04      	ldr	r2, [sp, #16]
 800b5a0:	b9d8      	cbnz	r0, 800b5da <_svfiprintf_r+0xe6>
 800b5a2:	06d0      	lsls	r0, r2, #27
 800b5a4:	bf44      	itt	mi
 800b5a6:	2320      	movmi	r3, #32
 800b5a8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b5ac:	0711      	lsls	r1, r2, #28
 800b5ae:	bf44      	itt	mi
 800b5b0:	232b      	movmi	r3, #43	; 0x2b
 800b5b2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b5b6:	f89a 3000 	ldrb.w	r3, [sl]
 800b5ba:	2b2a      	cmp	r3, #42	; 0x2a
 800b5bc:	d015      	beq.n	800b5ea <_svfiprintf_r+0xf6>
 800b5be:	4654      	mov	r4, sl
 800b5c0:	2000      	movs	r0, #0
 800b5c2:	f04f 0c0a 	mov.w	ip, #10
 800b5c6:	9a07      	ldr	r2, [sp, #28]
 800b5c8:	4621      	mov	r1, r4
 800b5ca:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b5ce:	3b30      	subs	r3, #48	; 0x30
 800b5d0:	2b09      	cmp	r3, #9
 800b5d2:	d94e      	bls.n	800b672 <_svfiprintf_r+0x17e>
 800b5d4:	b1b0      	cbz	r0, 800b604 <_svfiprintf_r+0x110>
 800b5d6:	9207      	str	r2, [sp, #28]
 800b5d8:	e014      	b.n	800b604 <_svfiprintf_r+0x110>
 800b5da:	eba0 0308 	sub.w	r3, r0, r8
 800b5de:	fa09 f303 	lsl.w	r3, r9, r3
 800b5e2:	4313      	orrs	r3, r2
 800b5e4:	46a2      	mov	sl, r4
 800b5e6:	9304      	str	r3, [sp, #16]
 800b5e8:	e7d2      	b.n	800b590 <_svfiprintf_r+0x9c>
 800b5ea:	9b03      	ldr	r3, [sp, #12]
 800b5ec:	1d19      	adds	r1, r3, #4
 800b5ee:	681b      	ldr	r3, [r3, #0]
 800b5f0:	9103      	str	r1, [sp, #12]
 800b5f2:	2b00      	cmp	r3, #0
 800b5f4:	bfbb      	ittet	lt
 800b5f6:	425b      	neglt	r3, r3
 800b5f8:	f042 0202 	orrlt.w	r2, r2, #2
 800b5fc:	9307      	strge	r3, [sp, #28]
 800b5fe:	9307      	strlt	r3, [sp, #28]
 800b600:	bfb8      	it	lt
 800b602:	9204      	strlt	r2, [sp, #16]
 800b604:	7823      	ldrb	r3, [r4, #0]
 800b606:	2b2e      	cmp	r3, #46	; 0x2e
 800b608:	d10c      	bne.n	800b624 <_svfiprintf_r+0x130>
 800b60a:	7863      	ldrb	r3, [r4, #1]
 800b60c:	2b2a      	cmp	r3, #42	; 0x2a
 800b60e:	d135      	bne.n	800b67c <_svfiprintf_r+0x188>
 800b610:	9b03      	ldr	r3, [sp, #12]
 800b612:	3402      	adds	r4, #2
 800b614:	1d1a      	adds	r2, r3, #4
 800b616:	681b      	ldr	r3, [r3, #0]
 800b618:	9203      	str	r2, [sp, #12]
 800b61a:	2b00      	cmp	r3, #0
 800b61c:	bfb8      	it	lt
 800b61e:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800b622:	9305      	str	r3, [sp, #20]
 800b624:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800b6f0 <_svfiprintf_r+0x1fc>
 800b628:	2203      	movs	r2, #3
 800b62a:	4650      	mov	r0, sl
 800b62c:	7821      	ldrb	r1, [r4, #0]
 800b62e:	f000 f9f7 	bl	800ba20 <memchr>
 800b632:	b140      	cbz	r0, 800b646 <_svfiprintf_r+0x152>
 800b634:	2340      	movs	r3, #64	; 0x40
 800b636:	eba0 000a 	sub.w	r0, r0, sl
 800b63a:	fa03 f000 	lsl.w	r0, r3, r0
 800b63e:	9b04      	ldr	r3, [sp, #16]
 800b640:	3401      	adds	r4, #1
 800b642:	4303      	orrs	r3, r0
 800b644:	9304      	str	r3, [sp, #16]
 800b646:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b64a:	2206      	movs	r2, #6
 800b64c:	4825      	ldr	r0, [pc, #148]	; (800b6e4 <_svfiprintf_r+0x1f0>)
 800b64e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b652:	f000 f9e5 	bl	800ba20 <memchr>
 800b656:	2800      	cmp	r0, #0
 800b658:	d038      	beq.n	800b6cc <_svfiprintf_r+0x1d8>
 800b65a:	4b23      	ldr	r3, [pc, #140]	; (800b6e8 <_svfiprintf_r+0x1f4>)
 800b65c:	bb1b      	cbnz	r3, 800b6a6 <_svfiprintf_r+0x1b2>
 800b65e:	9b03      	ldr	r3, [sp, #12]
 800b660:	3307      	adds	r3, #7
 800b662:	f023 0307 	bic.w	r3, r3, #7
 800b666:	3308      	adds	r3, #8
 800b668:	9303      	str	r3, [sp, #12]
 800b66a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b66c:	4433      	add	r3, r6
 800b66e:	9309      	str	r3, [sp, #36]	; 0x24
 800b670:	e767      	b.n	800b542 <_svfiprintf_r+0x4e>
 800b672:	460c      	mov	r4, r1
 800b674:	2001      	movs	r0, #1
 800b676:	fb0c 3202 	mla	r2, ip, r2, r3
 800b67a:	e7a5      	b.n	800b5c8 <_svfiprintf_r+0xd4>
 800b67c:	2300      	movs	r3, #0
 800b67e:	f04f 0c0a 	mov.w	ip, #10
 800b682:	4619      	mov	r1, r3
 800b684:	3401      	adds	r4, #1
 800b686:	9305      	str	r3, [sp, #20]
 800b688:	4620      	mov	r0, r4
 800b68a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b68e:	3a30      	subs	r2, #48	; 0x30
 800b690:	2a09      	cmp	r2, #9
 800b692:	d903      	bls.n	800b69c <_svfiprintf_r+0x1a8>
 800b694:	2b00      	cmp	r3, #0
 800b696:	d0c5      	beq.n	800b624 <_svfiprintf_r+0x130>
 800b698:	9105      	str	r1, [sp, #20]
 800b69a:	e7c3      	b.n	800b624 <_svfiprintf_r+0x130>
 800b69c:	4604      	mov	r4, r0
 800b69e:	2301      	movs	r3, #1
 800b6a0:	fb0c 2101 	mla	r1, ip, r1, r2
 800b6a4:	e7f0      	b.n	800b688 <_svfiprintf_r+0x194>
 800b6a6:	ab03      	add	r3, sp, #12
 800b6a8:	9300      	str	r3, [sp, #0]
 800b6aa:	462a      	mov	r2, r5
 800b6ac:	4638      	mov	r0, r7
 800b6ae:	4b0f      	ldr	r3, [pc, #60]	; (800b6ec <_svfiprintf_r+0x1f8>)
 800b6b0:	a904      	add	r1, sp, #16
 800b6b2:	f3af 8000 	nop.w
 800b6b6:	1c42      	adds	r2, r0, #1
 800b6b8:	4606      	mov	r6, r0
 800b6ba:	d1d6      	bne.n	800b66a <_svfiprintf_r+0x176>
 800b6bc:	89ab      	ldrh	r3, [r5, #12]
 800b6be:	065b      	lsls	r3, r3, #25
 800b6c0:	f53f af2c 	bmi.w	800b51c <_svfiprintf_r+0x28>
 800b6c4:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b6c6:	b01d      	add	sp, #116	; 0x74
 800b6c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b6cc:	ab03      	add	r3, sp, #12
 800b6ce:	9300      	str	r3, [sp, #0]
 800b6d0:	462a      	mov	r2, r5
 800b6d2:	4638      	mov	r0, r7
 800b6d4:	4b05      	ldr	r3, [pc, #20]	; (800b6ec <_svfiprintf_r+0x1f8>)
 800b6d6:	a904      	add	r1, sp, #16
 800b6d8:	f000 f87c 	bl	800b7d4 <_printf_i>
 800b6dc:	e7eb      	b.n	800b6b6 <_svfiprintf_r+0x1c2>
 800b6de:	bf00      	nop
 800b6e0:	0800c0f0 	.word	0x0800c0f0
 800b6e4:	0800c0fa 	.word	0x0800c0fa
 800b6e8:	00000000 	.word	0x00000000
 800b6ec:	0800b43d 	.word	0x0800b43d
 800b6f0:	0800c0f6 	.word	0x0800c0f6

0800b6f4 <_printf_common>:
 800b6f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b6f8:	4616      	mov	r6, r2
 800b6fa:	4699      	mov	r9, r3
 800b6fc:	688a      	ldr	r2, [r1, #8]
 800b6fe:	690b      	ldr	r3, [r1, #16]
 800b700:	4607      	mov	r7, r0
 800b702:	4293      	cmp	r3, r2
 800b704:	bfb8      	it	lt
 800b706:	4613      	movlt	r3, r2
 800b708:	6033      	str	r3, [r6, #0]
 800b70a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800b70e:	460c      	mov	r4, r1
 800b710:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800b714:	b10a      	cbz	r2, 800b71a <_printf_common+0x26>
 800b716:	3301      	adds	r3, #1
 800b718:	6033      	str	r3, [r6, #0]
 800b71a:	6823      	ldr	r3, [r4, #0]
 800b71c:	0699      	lsls	r1, r3, #26
 800b71e:	bf42      	ittt	mi
 800b720:	6833      	ldrmi	r3, [r6, #0]
 800b722:	3302      	addmi	r3, #2
 800b724:	6033      	strmi	r3, [r6, #0]
 800b726:	6825      	ldr	r5, [r4, #0]
 800b728:	f015 0506 	ands.w	r5, r5, #6
 800b72c:	d106      	bne.n	800b73c <_printf_common+0x48>
 800b72e:	f104 0a19 	add.w	sl, r4, #25
 800b732:	68e3      	ldr	r3, [r4, #12]
 800b734:	6832      	ldr	r2, [r6, #0]
 800b736:	1a9b      	subs	r3, r3, r2
 800b738:	42ab      	cmp	r3, r5
 800b73a:	dc28      	bgt.n	800b78e <_printf_common+0x9a>
 800b73c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800b740:	1e13      	subs	r3, r2, #0
 800b742:	6822      	ldr	r2, [r4, #0]
 800b744:	bf18      	it	ne
 800b746:	2301      	movne	r3, #1
 800b748:	0692      	lsls	r2, r2, #26
 800b74a:	d42d      	bmi.n	800b7a8 <_printf_common+0xb4>
 800b74c:	4649      	mov	r1, r9
 800b74e:	4638      	mov	r0, r7
 800b750:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800b754:	47c0      	blx	r8
 800b756:	3001      	adds	r0, #1
 800b758:	d020      	beq.n	800b79c <_printf_common+0xa8>
 800b75a:	6823      	ldr	r3, [r4, #0]
 800b75c:	68e5      	ldr	r5, [r4, #12]
 800b75e:	f003 0306 	and.w	r3, r3, #6
 800b762:	2b04      	cmp	r3, #4
 800b764:	bf18      	it	ne
 800b766:	2500      	movne	r5, #0
 800b768:	6832      	ldr	r2, [r6, #0]
 800b76a:	f04f 0600 	mov.w	r6, #0
 800b76e:	68a3      	ldr	r3, [r4, #8]
 800b770:	bf08      	it	eq
 800b772:	1aad      	subeq	r5, r5, r2
 800b774:	6922      	ldr	r2, [r4, #16]
 800b776:	bf08      	it	eq
 800b778:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b77c:	4293      	cmp	r3, r2
 800b77e:	bfc4      	itt	gt
 800b780:	1a9b      	subgt	r3, r3, r2
 800b782:	18ed      	addgt	r5, r5, r3
 800b784:	341a      	adds	r4, #26
 800b786:	42b5      	cmp	r5, r6
 800b788:	d11a      	bne.n	800b7c0 <_printf_common+0xcc>
 800b78a:	2000      	movs	r0, #0
 800b78c:	e008      	b.n	800b7a0 <_printf_common+0xac>
 800b78e:	2301      	movs	r3, #1
 800b790:	4652      	mov	r2, sl
 800b792:	4649      	mov	r1, r9
 800b794:	4638      	mov	r0, r7
 800b796:	47c0      	blx	r8
 800b798:	3001      	adds	r0, #1
 800b79a:	d103      	bne.n	800b7a4 <_printf_common+0xb0>
 800b79c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b7a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b7a4:	3501      	adds	r5, #1
 800b7a6:	e7c4      	b.n	800b732 <_printf_common+0x3e>
 800b7a8:	2030      	movs	r0, #48	; 0x30
 800b7aa:	18e1      	adds	r1, r4, r3
 800b7ac:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800b7b0:	1c5a      	adds	r2, r3, #1
 800b7b2:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800b7b6:	4422      	add	r2, r4
 800b7b8:	3302      	adds	r3, #2
 800b7ba:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800b7be:	e7c5      	b.n	800b74c <_printf_common+0x58>
 800b7c0:	2301      	movs	r3, #1
 800b7c2:	4622      	mov	r2, r4
 800b7c4:	4649      	mov	r1, r9
 800b7c6:	4638      	mov	r0, r7
 800b7c8:	47c0      	blx	r8
 800b7ca:	3001      	adds	r0, #1
 800b7cc:	d0e6      	beq.n	800b79c <_printf_common+0xa8>
 800b7ce:	3601      	adds	r6, #1
 800b7d0:	e7d9      	b.n	800b786 <_printf_common+0x92>
	...

0800b7d4 <_printf_i>:
 800b7d4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b7d8:	460c      	mov	r4, r1
 800b7da:	7e27      	ldrb	r7, [r4, #24]
 800b7dc:	4691      	mov	r9, r2
 800b7de:	2f78      	cmp	r7, #120	; 0x78
 800b7e0:	4680      	mov	r8, r0
 800b7e2:	469a      	mov	sl, r3
 800b7e4:	990c      	ldr	r1, [sp, #48]	; 0x30
 800b7e6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800b7ea:	d807      	bhi.n	800b7fc <_printf_i+0x28>
 800b7ec:	2f62      	cmp	r7, #98	; 0x62
 800b7ee:	d80a      	bhi.n	800b806 <_printf_i+0x32>
 800b7f0:	2f00      	cmp	r7, #0
 800b7f2:	f000 80d9 	beq.w	800b9a8 <_printf_i+0x1d4>
 800b7f6:	2f58      	cmp	r7, #88	; 0x58
 800b7f8:	f000 80a4 	beq.w	800b944 <_printf_i+0x170>
 800b7fc:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800b800:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800b804:	e03a      	b.n	800b87c <_printf_i+0xa8>
 800b806:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800b80a:	2b15      	cmp	r3, #21
 800b80c:	d8f6      	bhi.n	800b7fc <_printf_i+0x28>
 800b80e:	a001      	add	r0, pc, #4	; (adr r0, 800b814 <_printf_i+0x40>)
 800b810:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800b814:	0800b86d 	.word	0x0800b86d
 800b818:	0800b881 	.word	0x0800b881
 800b81c:	0800b7fd 	.word	0x0800b7fd
 800b820:	0800b7fd 	.word	0x0800b7fd
 800b824:	0800b7fd 	.word	0x0800b7fd
 800b828:	0800b7fd 	.word	0x0800b7fd
 800b82c:	0800b881 	.word	0x0800b881
 800b830:	0800b7fd 	.word	0x0800b7fd
 800b834:	0800b7fd 	.word	0x0800b7fd
 800b838:	0800b7fd 	.word	0x0800b7fd
 800b83c:	0800b7fd 	.word	0x0800b7fd
 800b840:	0800b98f 	.word	0x0800b98f
 800b844:	0800b8b1 	.word	0x0800b8b1
 800b848:	0800b971 	.word	0x0800b971
 800b84c:	0800b7fd 	.word	0x0800b7fd
 800b850:	0800b7fd 	.word	0x0800b7fd
 800b854:	0800b9b1 	.word	0x0800b9b1
 800b858:	0800b7fd 	.word	0x0800b7fd
 800b85c:	0800b8b1 	.word	0x0800b8b1
 800b860:	0800b7fd 	.word	0x0800b7fd
 800b864:	0800b7fd 	.word	0x0800b7fd
 800b868:	0800b979 	.word	0x0800b979
 800b86c:	680b      	ldr	r3, [r1, #0]
 800b86e:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800b872:	1d1a      	adds	r2, r3, #4
 800b874:	681b      	ldr	r3, [r3, #0]
 800b876:	600a      	str	r2, [r1, #0]
 800b878:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800b87c:	2301      	movs	r3, #1
 800b87e:	e0a4      	b.n	800b9ca <_printf_i+0x1f6>
 800b880:	6825      	ldr	r5, [r4, #0]
 800b882:	6808      	ldr	r0, [r1, #0]
 800b884:	062e      	lsls	r6, r5, #24
 800b886:	f100 0304 	add.w	r3, r0, #4
 800b88a:	d50a      	bpl.n	800b8a2 <_printf_i+0xce>
 800b88c:	6805      	ldr	r5, [r0, #0]
 800b88e:	600b      	str	r3, [r1, #0]
 800b890:	2d00      	cmp	r5, #0
 800b892:	da03      	bge.n	800b89c <_printf_i+0xc8>
 800b894:	232d      	movs	r3, #45	; 0x2d
 800b896:	426d      	negs	r5, r5
 800b898:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b89c:	230a      	movs	r3, #10
 800b89e:	485e      	ldr	r0, [pc, #376]	; (800ba18 <_printf_i+0x244>)
 800b8a0:	e019      	b.n	800b8d6 <_printf_i+0x102>
 800b8a2:	f015 0f40 	tst.w	r5, #64	; 0x40
 800b8a6:	6805      	ldr	r5, [r0, #0]
 800b8a8:	600b      	str	r3, [r1, #0]
 800b8aa:	bf18      	it	ne
 800b8ac:	b22d      	sxthne	r5, r5
 800b8ae:	e7ef      	b.n	800b890 <_printf_i+0xbc>
 800b8b0:	680b      	ldr	r3, [r1, #0]
 800b8b2:	6825      	ldr	r5, [r4, #0]
 800b8b4:	1d18      	adds	r0, r3, #4
 800b8b6:	6008      	str	r0, [r1, #0]
 800b8b8:	0628      	lsls	r0, r5, #24
 800b8ba:	d501      	bpl.n	800b8c0 <_printf_i+0xec>
 800b8bc:	681d      	ldr	r5, [r3, #0]
 800b8be:	e002      	b.n	800b8c6 <_printf_i+0xf2>
 800b8c0:	0669      	lsls	r1, r5, #25
 800b8c2:	d5fb      	bpl.n	800b8bc <_printf_i+0xe8>
 800b8c4:	881d      	ldrh	r5, [r3, #0]
 800b8c6:	2f6f      	cmp	r7, #111	; 0x6f
 800b8c8:	bf0c      	ite	eq
 800b8ca:	2308      	moveq	r3, #8
 800b8cc:	230a      	movne	r3, #10
 800b8ce:	4852      	ldr	r0, [pc, #328]	; (800ba18 <_printf_i+0x244>)
 800b8d0:	2100      	movs	r1, #0
 800b8d2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800b8d6:	6866      	ldr	r6, [r4, #4]
 800b8d8:	2e00      	cmp	r6, #0
 800b8da:	bfa8      	it	ge
 800b8dc:	6821      	ldrge	r1, [r4, #0]
 800b8de:	60a6      	str	r6, [r4, #8]
 800b8e0:	bfa4      	itt	ge
 800b8e2:	f021 0104 	bicge.w	r1, r1, #4
 800b8e6:	6021      	strge	r1, [r4, #0]
 800b8e8:	b90d      	cbnz	r5, 800b8ee <_printf_i+0x11a>
 800b8ea:	2e00      	cmp	r6, #0
 800b8ec:	d04d      	beq.n	800b98a <_printf_i+0x1b6>
 800b8ee:	4616      	mov	r6, r2
 800b8f0:	fbb5 f1f3 	udiv	r1, r5, r3
 800b8f4:	fb03 5711 	mls	r7, r3, r1, r5
 800b8f8:	5dc7      	ldrb	r7, [r0, r7]
 800b8fa:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800b8fe:	462f      	mov	r7, r5
 800b900:	42bb      	cmp	r3, r7
 800b902:	460d      	mov	r5, r1
 800b904:	d9f4      	bls.n	800b8f0 <_printf_i+0x11c>
 800b906:	2b08      	cmp	r3, #8
 800b908:	d10b      	bne.n	800b922 <_printf_i+0x14e>
 800b90a:	6823      	ldr	r3, [r4, #0]
 800b90c:	07df      	lsls	r7, r3, #31
 800b90e:	d508      	bpl.n	800b922 <_printf_i+0x14e>
 800b910:	6923      	ldr	r3, [r4, #16]
 800b912:	6861      	ldr	r1, [r4, #4]
 800b914:	4299      	cmp	r1, r3
 800b916:	bfde      	ittt	le
 800b918:	2330      	movle	r3, #48	; 0x30
 800b91a:	f806 3c01 	strble.w	r3, [r6, #-1]
 800b91e:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 800b922:	1b92      	subs	r2, r2, r6
 800b924:	6122      	str	r2, [r4, #16]
 800b926:	464b      	mov	r3, r9
 800b928:	4621      	mov	r1, r4
 800b92a:	4640      	mov	r0, r8
 800b92c:	f8cd a000 	str.w	sl, [sp]
 800b930:	aa03      	add	r2, sp, #12
 800b932:	f7ff fedf 	bl	800b6f4 <_printf_common>
 800b936:	3001      	adds	r0, #1
 800b938:	d14c      	bne.n	800b9d4 <_printf_i+0x200>
 800b93a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b93e:	b004      	add	sp, #16
 800b940:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b944:	4834      	ldr	r0, [pc, #208]	; (800ba18 <_printf_i+0x244>)
 800b946:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800b94a:	680e      	ldr	r6, [r1, #0]
 800b94c:	6823      	ldr	r3, [r4, #0]
 800b94e:	f856 5b04 	ldr.w	r5, [r6], #4
 800b952:	061f      	lsls	r7, r3, #24
 800b954:	600e      	str	r6, [r1, #0]
 800b956:	d514      	bpl.n	800b982 <_printf_i+0x1ae>
 800b958:	07d9      	lsls	r1, r3, #31
 800b95a:	bf44      	itt	mi
 800b95c:	f043 0320 	orrmi.w	r3, r3, #32
 800b960:	6023      	strmi	r3, [r4, #0]
 800b962:	b91d      	cbnz	r5, 800b96c <_printf_i+0x198>
 800b964:	6823      	ldr	r3, [r4, #0]
 800b966:	f023 0320 	bic.w	r3, r3, #32
 800b96a:	6023      	str	r3, [r4, #0]
 800b96c:	2310      	movs	r3, #16
 800b96e:	e7af      	b.n	800b8d0 <_printf_i+0xfc>
 800b970:	6823      	ldr	r3, [r4, #0]
 800b972:	f043 0320 	orr.w	r3, r3, #32
 800b976:	6023      	str	r3, [r4, #0]
 800b978:	2378      	movs	r3, #120	; 0x78
 800b97a:	4828      	ldr	r0, [pc, #160]	; (800ba1c <_printf_i+0x248>)
 800b97c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800b980:	e7e3      	b.n	800b94a <_printf_i+0x176>
 800b982:	065e      	lsls	r6, r3, #25
 800b984:	bf48      	it	mi
 800b986:	b2ad      	uxthmi	r5, r5
 800b988:	e7e6      	b.n	800b958 <_printf_i+0x184>
 800b98a:	4616      	mov	r6, r2
 800b98c:	e7bb      	b.n	800b906 <_printf_i+0x132>
 800b98e:	680b      	ldr	r3, [r1, #0]
 800b990:	6826      	ldr	r6, [r4, #0]
 800b992:	1d1d      	adds	r5, r3, #4
 800b994:	6960      	ldr	r0, [r4, #20]
 800b996:	600d      	str	r5, [r1, #0]
 800b998:	0635      	lsls	r5, r6, #24
 800b99a:	681b      	ldr	r3, [r3, #0]
 800b99c:	d501      	bpl.n	800b9a2 <_printf_i+0x1ce>
 800b99e:	6018      	str	r0, [r3, #0]
 800b9a0:	e002      	b.n	800b9a8 <_printf_i+0x1d4>
 800b9a2:	0671      	lsls	r1, r6, #25
 800b9a4:	d5fb      	bpl.n	800b99e <_printf_i+0x1ca>
 800b9a6:	8018      	strh	r0, [r3, #0]
 800b9a8:	2300      	movs	r3, #0
 800b9aa:	4616      	mov	r6, r2
 800b9ac:	6123      	str	r3, [r4, #16]
 800b9ae:	e7ba      	b.n	800b926 <_printf_i+0x152>
 800b9b0:	680b      	ldr	r3, [r1, #0]
 800b9b2:	1d1a      	adds	r2, r3, #4
 800b9b4:	600a      	str	r2, [r1, #0]
 800b9b6:	681e      	ldr	r6, [r3, #0]
 800b9b8:	2100      	movs	r1, #0
 800b9ba:	4630      	mov	r0, r6
 800b9bc:	6862      	ldr	r2, [r4, #4]
 800b9be:	f000 f82f 	bl	800ba20 <memchr>
 800b9c2:	b108      	cbz	r0, 800b9c8 <_printf_i+0x1f4>
 800b9c4:	1b80      	subs	r0, r0, r6
 800b9c6:	6060      	str	r0, [r4, #4]
 800b9c8:	6863      	ldr	r3, [r4, #4]
 800b9ca:	6123      	str	r3, [r4, #16]
 800b9cc:	2300      	movs	r3, #0
 800b9ce:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b9d2:	e7a8      	b.n	800b926 <_printf_i+0x152>
 800b9d4:	4632      	mov	r2, r6
 800b9d6:	4649      	mov	r1, r9
 800b9d8:	4640      	mov	r0, r8
 800b9da:	6923      	ldr	r3, [r4, #16]
 800b9dc:	47d0      	blx	sl
 800b9de:	3001      	adds	r0, #1
 800b9e0:	d0ab      	beq.n	800b93a <_printf_i+0x166>
 800b9e2:	6823      	ldr	r3, [r4, #0]
 800b9e4:	079b      	lsls	r3, r3, #30
 800b9e6:	d413      	bmi.n	800ba10 <_printf_i+0x23c>
 800b9e8:	68e0      	ldr	r0, [r4, #12]
 800b9ea:	9b03      	ldr	r3, [sp, #12]
 800b9ec:	4298      	cmp	r0, r3
 800b9ee:	bfb8      	it	lt
 800b9f0:	4618      	movlt	r0, r3
 800b9f2:	e7a4      	b.n	800b93e <_printf_i+0x16a>
 800b9f4:	2301      	movs	r3, #1
 800b9f6:	4632      	mov	r2, r6
 800b9f8:	4649      	mov	r1, r9
 800b9fa:	4640      	mov	r0, r8
 800b9fc:	47d0      	blx	sl
 800b9fe:	3001      	adds	r0, #1
 800ba00:	d09b      	beq.n	800b93a <_printf_i+0x166>
 800ba02:	3501      	adds	r5, #1
 800ba04:	68e3      	ldr	r3, [r4, #12]
 800ba06:	9903      	ldr	r1, [sp, #12]
 800ba08:	1a5b      	subs	r3, r3, r1
 800ba0a:	42ab      	cmp	r3, r5
 800ba0c:	dcf2      	bgt.n	800b9f4 <_printf_i+0x220>
 800ba0e:	e7eb      	b.n	800b9e8 <_printf_i+0x214>
 800ba10:	2500      	movs	r5, #0
 800ba12:	f104 0619 	add.w	r6, r4, #25
 800ba16:	e7f5      	b.n	800ba04 <_printf_i+0x230>
 800ba18:	0800c101 	.word	0x0800c101
 800ba1c:	0800c112 	.word	0x0800c112

0800ba20 <memchr>:
 800ba20:	4603      	mov	r3, r0
 800ba22:	b510      	push	{r4, lr}
 800ba24:	b2c9      	uxtb	r1, r1
 800ba26:	4402      	add	r2, r0
 800ba28:	4293      	cmp	r3, r2
 800ba2a:	4618      	mov	r0, r3
 800ba2c:	d101      	bne.n	800ba32 <memchr+0x12>
 800ba2e:	2000      	movs	r0, #0
 800ba30:	e003      	b.n	800ba3a <memchr+0x1a>
 800ba32:	7804      	ldrb	r4, [r0, #0]
 800ba34:	3301      	adds	r3, #1
 800ba36:	428c      	cmp	r4, r1
 800ba38:	d1f6      	bne.n	800ba28 <memchr+0x8>
 800ba3a:	bd10      	pop	{r4, pc}

0800ba3c <memcpy>:
 800ba3c:	440a      	add	r2, r1
 800ba3e:	4291      	cmp	r1, r2
 800ba40:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800ba44:	d100      	bne.n	800ba48 <memcpy+0xc>
 800ba46:	4770      	bx	lr
 800ba48:	b510      	push	{r4, lr}
 800ba4a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ba4e:	4291      	cmp	r1, r2
 800ba50:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ba54:	d1f9      	bne.n	800ba4a <memcpy+0xe>
 800ba56:	bd10      	pop	{r4, pc}

0800ba58 <memmove>:
 800ba58:	4288      	cmp	r0, r1
 800ba5a:	b510      	push	{r4, lr}
 800ba5c:	eb01 0402 	add.w	r4, r1, r2
 800ba60:	d902      	bls.n	800ba68 <memmove+0x10>
 800ba62:	4284      	cmp	r4, r0
 800ba64:	4623      	mov	r3, r4
 800ba66:	d807      	bhi.n	800ba78 <memmove+0x20>
 800ba68:	1e43      	subs	r3, r0, #1
 800ba6a:	42a1      	cmp	r1, r4
 800ba6c:	d008      	beq.n	800ba80 <memmove+0x28>
 800ba6e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ba72:	f803 2f01 	strb.w	r2, [r3, #1]!
 800ba76:	e7f8      	b.n	800ba6a <memmove+0x12>
 800ba78:	4601      	mov	r1, r0
 800ba7a:	4402      	add	r2, r0
 800ba7c:	428a      	cmp	r2, r1
 800ba7e:	d100      	bne.n	800ba82 <memmove+0x2a>
 800ba80:	bd10      	pop	{r4, pc}
 800ba82:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800ba86:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800ba8a:	e7f7      	b.n	800ba7c <memmove+0x24>

0800ba8c <_free_r>:
 800ba8c:	b538      	push	{r3, r4, r5, lr}
 800ba8e:	4605      	mov	r5, r0
 800ba90:	2900      	cmp	r1, #0
 800ba92:	d043      	beq.n	800bb1c <_free_r+0x90>
 800ba94:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ba98:	1f0c      	subs	r4, r1, #4
 800ba9a:	2b00      	cmp	r3, #0
 800ba9c:	bfb8      	it	lt
 800ba9e:	18e4      	addlt	r4, r4, r3
 800baa0:	f000 f8d0 	bl	800bc44 <__malloc_lock>
 800baa4:	4a1e      	ldr	r2, [pc, #120]	; (800bb20 <_free_r+0x94>)
 800baa6:	6813      	ldr	r3, [r2, #0]
 800baa8:	4610      	mov	r0, r2
 800baaa:	b933      	cbnz	r3, 800baba <_free_r+0x2e>
 800baac:	6063      	str	r3, [r4, #4]
 800baae:	6014      	str	r4, [r2, #0]
 800bab0:	4628      	mov	r0, r5
 800bab2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800bab6:	f000 b8cb 	b.w	800bc50 <__malloc_unlock>
 800baba:	42a3      	cmp	r3, r4
 800babc:	d90a      	bls.n	800bad4 <_free_r+0x48>
 800babe:	6821      	ldr	r1, [r4, #0]
 800bac0:	1862      	adds	r2, r4, r1
 800bac2:	4293      	cmp	r3, r2
 800bac4:	bf01      	itttt	eq
 800bac6:	681a      	ldreq	r2, [r3, #0]
 800bac8:	685b      	ldreq	r3, [r3, #4]
 800baca:	1852      	addeq	r2, r2, r1
 800bacc:	6022      	streq	r2, [r4, #0]
 800bace:	6063      	str	r3, [r4, #4]
 800bad0:	6004      	str	r4, [r0, #0]
 800bad2:	e7ed      	b.n	800bab0 <_free_r+0x24>
 800bad4:	461a      	mov	r2, r3
 800bad6:	685b      	ldr	r3, [r3, #4]
 800bad8:	b10b      	cbz	r3, 800bade <_free_r+0x52>
 800bada:	42a3      	cmp	r3, r4
 800badc:	d9fa      	bls.n	800bad4 <_free_r+0x48>
 800bade:	6811      	ldr	r1, [r2, #0]
 800bae0:	1850      	adds	r0, r2, r1
 800bae2:	42a0      	cmp	r0, r4
 800bae4:	d10b      	bne.n	800bafe <_free_r+0x72>
 800bae6:	6820      	ldr	r0, [r4, #0]
 800bae8:	4401      	add	r1, r0
 800baea:	1850      	adds	r0, r2, r1
 800baec:	4283      	cmp	r3, r0
 800baee:	6011      	str	r1, [r2, #0]
 800baf0:	d1de      	bne.n	800bab0 <_free_r+0x24>
 800baf2:	6818      	ldr	r0, [r3, #0]
 800baf4:	685b      	ldr	r3, [r3, #4]
 800baf6:	4401      	add	r1, r0
 800baf8:	6011      	str	r1, [r2, #0]
 800bafa:	6053      	str	r3, [r2, #4]
 800bafc:	e7d8      	b.n	800bab0 <_free_r+0x24>
 800bafe:	d902      	bls.n	800bb06 <_free_r+0x7a>
 800bb00:	230c      	movs	r3, #12
 800bb02:	602b      	str	r3, [r5, #0]
 800bb04:	e7d4      	b.n	800bab0 <_free_r+0x24>
 800bb06:	6820      	ldr	r0, [r4, #0]
 800bb08:	1821      	adds	r1, r4, r0
 800bb0a:	428b      	cmp	r3, r1
 800bb0c:	bf01      	itttt	eq
 800bb0e:	6819      	ldreq	r1, [r3, #0]
 800bb10:	685b      	ldreq	r3, [r3, #4]
 800bb12:	1809      	addeq	r1, r1, r0
 800bb14:	6021      	streq	r1, [r4, #0]
 800bb16:	6063      	str	r3, [r4, #4]
 800bb18:	6054      	str	r4, [r2, #4]
 800bb1a:	e7c9      	b.n	800bab0 <_free_r+0x24>
 800bb1c:	bd38      	pop	{r3, r4, r5, pc}
 800bb1e:	bf00      	nop
 800bb20:	20000188 	.word	0x20000188

0800bb24 <_malloc_r>:
 800bb24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bb26:	1ccd      	adds	r5, r1, #3
 800bb28:	f025 0503 	bic.w	r5, r5, #3
 800bb2c:	3508      	adds	r5, #8
 800bb2e:	2d0c      	cmp	r5, #12
 800bb30:	bf38      	it	cc
 800bb32:	250c      	movcc	r5, #12
 800bb34:	2d00      	cmp	r5, #0
 800bb36:	4606      	mov	r6, r0
 800bb38:	db01      	blt.n	800bb3e <_malloc_r+0x1a>
 800bb3a:	42a9      	cmp	r1, r5
 800bb3c:	d903      	bls.n	800bb46 <_malloc_r+0x22>
 800bb3e:	230c      	movs	r3, #12
 800bb40:	6033      	str	r3, [r6, #0]
 800bb42:	2000      	movs	r0, #0
 800bb44:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bb46:	f000 f87d 	bl	800bc44 <__malloc_lock>
 800bb4a:	4921      	ldr	r1, [pc, #132]	; (800bbd0 <_malloc_r+0xac>)
 800bb4c:	680a      	ldr	r2, [r1, #0]
 800bb4e:	4614      	mov	r4, r2
 800bb50:	b99c      	cbnz	r4, 800bb7a <_malloc_r+0x56>
 800bb52:	4f20      	ldr	r7, [pc, #128]	; (800bbd4 <_malloc_r+0xb0>)
 800bb54:	683b      	ldr	r3, [r7, #0]
 800bb56:	b923      	cbnz	r3, 800bb62 <_malloc_r+0x3e>
 800bb58:	4621      	mov	r1, r4
 800bb5a:	4630      	mov	r0, r6
 800bb5c:	f000 f862 	bl	800bc24 <_sbrk_r>
 800bb60:	6038      	str	r0, [r7, #0]
 800bb62:	4629      	mov	r1, r5
 800bb64:	4630      	mov	r0, r6
 800bb66:	f000 f85d 	bl	800bc24 <_sbrk_r>
 800bb6a:	1c43      	adds	r3, r0, #1
 800bb6c:	d123      	bne.n	800bbb6 <_malloc_r+0x92>
 800bb6e:	230c      	movs	r3, #12
 800bb70:	4630      	mov	r0, r6
 800bb72:	6033      	str	r3, [r6, #0]
 800bb74:	f000 f86c 	bl	800bc50 <__malloc_unlock>
 800bb78:	e7e3      	b.n	800bb42 <_malloc_r+0x1e>
 800bb7a:	6823      	ldr	r3, [r4, #0]
 800bb7c:	1b5b      	subs	r3, r3, r5
 800bb7e:	d417      	bmi.n	800bbb0 <_malloc_r+0x8c>
 800bb80:	2b0b      	cmp	r3, #11
 800bb82:	d903      	bls.n	800bb8c <_malloc_r+0x68>
 800bb84:	6023      	str	r3, [r4, #0]
 800bb86:	441c      	add	r4, r3
 800bb88:	6025      	str	r5, [r4, #0]
 800bb8a:	e004      	b.n	800bb96 <_malloc_r+0x72>
 800bb8c:	6863      	ldr	r3, [r4, #4]
 800bb8e:	42a2      	cmp	r2, r4
 800bb90:	bf0c      	ite	eq
 800bb92:	600b      	streq	r3, [r1, #0]
 800bb94:	6053      	strne	r3, [r2, #4]
 800bb96:	4630      	mov	r0, r6
 800bb98:	f000 f85a 	bl	800bc50 <__malloc_unlock>
 800bb9c:	f104 000b 	add.w	r0, r4, #11
 800bba0:	1d23      	adds	r3, r4, #4
 800bba2:	f020 0007 	bic.w	r0, r0, #7
 800bba6:	1ac2      	subs	r2, r0, r3
 800bba8:	d0cc      	beq.n	800bb44 <_malloc_r+0x20>
 800bbaa:	1a1b      	subs	r3, r3, r0
 800bbac:	50a3      	str	r3, [r4, r2]
 800bbae:	e7c9      	b.n	800bb44 <_malloc_r+0x20>
 800bbb0:	4622      	mov	r2, r4
 800bbb2:	6864      	ldr	r4, [r4, #4]
 800bbb4:	e7cc      	b.n	800bb50 <_malloc_r+0x2c>
 800bbb6:	1cc4      	adds	r4, r0, #3
 800bbb8:	f024 0403 	bic.w	r4, r4, #3
 800bbbc:	42a0      	cmp	r0, r4
 800bbbe:	d0e3      	beq.n	800bb88 <_malloc_r+0x64>
 800bbc0:	1a21      	subs	r1, r4, r0
 800bbc2:	4630      	mov	r0, r6
 800bbc4:	f000 f82e 	bl	800bc24 <_sbrk_r>
 800bbc8:	3001      	adds	r0, #1
 800bbca:	d1dd      	bne.n	800bb88 <_malloc_r+0x64>
 800bbcc:	e7cf      	b.n	800bb6e <_malloc_r+0x4a>
 800bbce:	bf00      	nop
 800bbd0:	20000188 	.word	0x20000188
 800bbd4:	2000018c 	.word	0x2000018c

0800bbd8 <_realloc_r>:
 800bbd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bbda:	4607      	mov	r7, r0
 800bbdc:	4614      	mov	r4, r2
 800bbde:	460e      	mov	r6, r1
 800bbe0:	b921      	cbnz	r1, 800bbec <_realloc_r+0x14>
 800bbe2:	4611      	mov	r1, r2
 800bbe4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800bbe8:	f7ff bf9c 	b.w	800bb24 <_malloc_r>
 800bbec:	b922      	cbnz	r2, 800bbf8 <_realloc_r+0x20>
 800bbee:	f7ff ff4d 	bl	800ba8c <_free_r>
 800bbf2:	4625      	mov	r5, r4
 800bbf4:	4628      	mov	r0, r5
 800bbf6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bbf8:	f000 f830 	bl	800bc5c <_malloc_usable_size_r>
 800bbfc:	42a0      	cmp	r0, r4
 800bbfe:	d20f      	bcs.n	800bc20 <_realloc_r+0x48>
 800bc00:	4621      	mov	r1, r4
 800bc02:	4638      	mov	r0, r7
 800bc04:	f7ff ff8e 	bl	800bb24 <_malloc_r>
 800bc08:	4605      	mov	r5, r0
 800bc0a:	2800      	cmp	r0, #0
 800bc0c:	d0f2      	beq.n	800bbf4 <_realloc_r+0x1c>
 800bc0e:	4631      	mov	r1, r6
 800bc10:	4622      	mov	r2, r4
 800bc12:	f7ff ff13 	bl	800ba3c <memcpy>
 800bc16:	4631      	mov	r1, r6
 800bc18:	4638      	mov	r0, r7
 800bc1a:	f7ff ff37 	bl	800ba8c <_free_r>
 800bc1e:	e7e9      	b.n	800bbf4 <_realloc_r+0x1c>
 800bc20:	4635      	mov	r5, r6
 800bc22:	e7e7      	b.n	800bbf4 <_realloc_r+0x1c>

0800bc24 <_sbrk_r>:
 800bc24:	b538      	push	{r3, r4, r5, lr}
 800bc26:	2300      	movs	r3, #0
 800bc28:	4d05      	ldr	r5, [pc, #20]	; (800bc40 <_sbrk_r+0x1c>)
 800bc2a:	4604      	mov	r4, r0
 800bc2c:	4608      	mov	r0, r1
 800bc2e:	602b      	str	r3, [r5, #0]
 800bc30:	f7f9 fbb4 	bl	800539c <_sbrk>
 800bc34:	1c43      	adds	r3, r0, #1
 800bc36:	d102      	bne.n	800bc3e <_sbrk_r+0x1a>
 800bc38:	682b      	ldr	r3, [r5, #0]
 800bc3a:	b103      	cbz	r3, 800bc3e <_sbrk_r+0x1a>
 800bc3c:	6023      	str	r3, [r4, #0]
 800bc3e:	bd38      	pop	{r3, r4, r5, pc}
 800bc40:	20000484 	.word	0x20000484

0800bc44 <__malloc_lock>:
 800bc44:	4801      	ldr	r0, [pc, #4]	; (800bc4c <__malloc_lock+0x8>)
 800bc46:	f000 b811 	b.w	800bc6c <__retarget_lock_acquire_recursive>
 800bc4a:	bf00      	nop
 800bc4c:	2000048c 	.word	0x2000048c

0800bc50 <__malloc_unlock>:
 800bc50:	4801      	ldr	r0, [pc, #4]	; (800bc58 <__malloc_unlock+0x8>)
 800bc52:	f000 b80c 	b.w	800bc6e <__retarget_lock_release_recursive>
 800bc56:	bf00      	nop
 800bc58:	2000048c 	.word	0x2000048c

0800bc5c <_malloc_usable_size_r>:
 800bc5c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bc60:	1f18      	subs	r0, r3, #4
 800bc62:	2b00      	cmp	r3, #0
 800bc64:	bfbc      	itt	lt
 800bc66:	580b      	ldrlt	r3, [r1, r0]
 800bc68:	18c0      	addlt	r0, r0, r3
 800bc6a:	4770      	bx	lr

0800bc6c <__retarget_lock_acquire_recursive>:
 800bc6c:	4770      	bx	lr

0800bc6e <__retarget_lock_release_recursive>:
 800bc6e:	4770      	bx	lr

0800bc70 <_init>:
 800bc70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bc72:	bf00      	nop
 800bc74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bc76:	bc08      	pop	{r3}
 800bc78:	469e      	mov	lr, r3
 800bc7a:	4770      	bx	lr

0800bc7c <_fini>:
 800bc7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bc7e:	bf00      	nop
 800bc80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bc82:	bc08      	pop	{r3}
 800bc84:	469e      	mov	lr, r3
 800bc86:	4770      	bx	lr
