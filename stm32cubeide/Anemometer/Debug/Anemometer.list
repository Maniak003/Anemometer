
Anemometer.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000048bc  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000068  080049c8  080049c8  000149c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004a30  08004a30  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08004a30  08004a30  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004a30  08004a30  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004a30  08004a30  00014a30  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004a34  08004a34  00014a34  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08004a38  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000220  20000070  08004aa8  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000290  08004aa8  00020290  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d3ae  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001da2  00000000  00000000  0002d447  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c08  00000000  00000000  0002f1f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000b60  00000000  00000000  0002fdf8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017e95  00000000  00000000  00030958  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c705  00000000  00000000  000487ed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008ac78  00000000  00000000  00054ef2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000dfb6a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003628  00000000  00000000  000dfbc0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000070 	.word	0x20000070
 8000128:	00000000 	.word	0x00000000
 800012c:	080049b0 	.word	0x080049b0

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000074 	.word	0x20000074
 8000148:	080049b0 	.word	0x080049b0

0800014c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000150:	f000 fe4c 	bl	8000dec <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000154:	f000 f85a 	bl	800020c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000158:	f000 fa8c 	bl	8000674 <MX_GPIO_Init>
  MX_DMA_Init();
 800015c:	f000 fa6c 	bl	8000638 <MX_DMA_Init>
  MX_TIM1_Init();
 8000160:	f000 f896 	bl	8000290 <MX_TIM1_Init>
  MX_USART1_UART_Init();
 8000164:	f000 fa3e 	bl	80005e4 <MX_USART1_UART_Init>
  MX_TIM2_Init();
 8000168:	f000 f968 	bl	800043c <MX_TIM2_Init>
  MX_TIM4_Init();
 800016c:	f000 f9ec 	bl	8000548 <MX_TIM4_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  countPulse = MeassureCount;
 8000170:	4b1b      	ldr	r3, [pc, #108]	; (80001e0 <main+0x94>)
 8000172:	220a      	movs	r2, #10
 8000174:	801a      	strh	r2, [r3, #0]
  sumCounter2 = 0;
 8000176:	4b1b      	ldr	r3, [pc, #108]	; (80001e4 <main+0x98>)
 8000178:	2200      	movs	r2, #0
 800017a:	601a      	str	r2, [r3, #0]
  /* Turn off all multiplexer */
  GPIOB->ODR &= ~((1 << Z1Receive) | (1 << Z2Receive) | (1 << Z3Receive) | (1 << Z4Receive));
 800017c:	4b1a      	ldr	r3, [pc, #104]	; (80001e8 <main+0x9c>)
 800017e:	68db      	ldr	r3, [r3, #12]
 8000180:	4a19      	ldr	r2, [pc, #100]	; (80001e8 <main+0x9c>)
 8000182:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8000186:	f023 0306 	bic.w	r3, r3, #6
 800018a:	60d3      	str	r3, [r2, #12]
   * 4 - Z3 >> Z4
   * 5 - Z4 >> Z3
   * 6 - Z4 >> Z1
   * 7 - Z1 >> Z4
   */
  currentMode = 0;
 800018c:	4b17      	ldr	r3, [pc, #92]	; (80001ec <main+0xa0>)
 800018e:	2200      	movs	r2, #0
 8000190:	801a      	strh	r2, [r3, #0]
  HAL_TIM_Base_Start_IT(&htim4);
 8000192:	4817      	ldr	r0, [pc, #92]	; (80001f0 <main+0xa4>)
 8000194:	f002 f828 	bl	80021e8 <HAL_TIM_Base_Start_IT>
  while (1) {
	  //__HAL_TIM_SET_COUNTER(&htim2, 0x0000);
	  HAL_Delay(1);
 8000198:	2001      	movs	r0, #1
 800019a:	f000 fe89 	bl	8000eb0 <HAL_Delay>
	  if (readyFlag) {
 800019e:	4b15      	ldr	r3, [pc, #84]	; (80001f4 <main+0xa8>)
 80001a0:	781b      	ldrb	r3, [r3, #0]
 80001a2:	2b00      	cmp	r3, #0
 80001a4:	d0f8      	beq.n	8000198 <main+0x4c>
		  //sprintf(SndBuffer, "Z12: %d, Z21: %d, Z23: %d, Z32: %d, Z34: %d, Z43: %d, Z41: %d, Z14: %d\r\n"
		  //		, Z12 % 1600, Z21 % 1600, Z23 % 1600, Z32 % 1600, Z34 % 1600, Z43 % 1600, Z41 % 1600, Z14 % 1600 );
		  sprintf(SndBuffer, "Z12: %d\r\n", Z12 % 1600);
 80001a6:	4b14      	ldr	r3, [pc, #80]	; (80001f8 <main+0xac>)
 80001a8:	881b      	ldrh	r3, [r3, #0]
 80001aa:	4a14      	ldr	r2, [pc, #80]	; (80001fc <main+0xb0>)
 80001ac:	fba2 1203 	umull	r1, r2, r2, r3
 80001b0:	0a52      	lsrs	r2, r2, #9
 80001b2:	f44f 61c8 	mov.w	r1, #1600	; 0x640
 80001b6:	fb01 f202 	mul.w	r2, r1, r2
 80001ba:	1a9b      	subs	r3, r3, r2
 80001bc:	b29b      	uxth	r3, r3
 80001be:	461a      	mov	r2, r3
 80001c0:	490f      	ldr	r1, [pc, #60]	; (8000200 <main+0xb4>)
 80001c2:	4810      	ldr	r0, [pc, #64]	; (8000204 <main+0xb8>)
 80001c4:	f003 ffba 	bl	800413c <siprintf>
		  HAL_UART_Transmit(&huart1, (uint8_t *) SndBuffer, sizeof(SndBuffer), 1000);
 80001c8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80001cc:	2264      	movs	r2, #100	; 0x64
 80001ce:	490d      	ldr	r1, [pc, #52]	; (8000204 <main+0xb8>)
 80001d0:	480d      	ldr	r0, [pc, #52]	; (8000208 <main+0xbc>)
 80001d2:	f003 fe17 	bl	8003e04 <HAL_UART_Transmit>
		  readyFlag = FALSE;
 80001d6:	4b07      	ldr	r3, [pc, #28]	; (80001f4 <main+0xa8>)
 80001d8:	2200      	movs	r2, #0
 80001da:	701a      	strb	r2, [r3, #0]
	  HAL_Delay(1);
 80001dc:	e7dc      	b.n	8000198 <main+0x4c>
 80001de:	bf00      	nop
 80001e0:	200000fc 	.word	0x200000fc
 80001e4:	20000194 	.word	0x20000194
 80001e8:	40010c00 	.word	0x40010c00
 80001ec:	2000022e 	.word	0x2000022e
 80001f0:	20000144 	.word	0x20000144
 80001f4:	200000fe 	.word	0x200000fe
 80001f8:	200001e0 	.word	0x200001e0
 80001fc:	51eb851f 	.word	0x51eb851f
 8000200:	080049c8 	.word	0x080049c8
 8000204:	2000008c 	.word	0x2000008c
 8000208:	2000019c 	.word	0x2000019c

0800020c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800020c:	b580      	push	{r7, lr}
 800020e:	b090      	sub	sp, #64	; 0x40
 8000210:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000212:	f107 0318 	add.w	r3, r7, #24
 8000216:	2228      	movs	r2, #40	; 0x28
 8000218:	2100      	movs	r1, #0
 800021a:	4618      	mov	r0, r3
 800021c:	f003 ff86 	bl	800412c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000220:	1d3b      	adds	r3, r7, #4
 8000222:	2200      	movs	r2, #0
 8000224:	601a      	str	r2, [r3, #0]
 8000226:	605a      	str	r2, [r3, #4]
 8000228:	609a      	str	r2, [r3, #8]
 800022a:	60da      	str	r2, [r3, #12]
 800022c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800022e:	2302      	movs	r3, #2
 8000230:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000232:	2301      	movs	r3, #1
 8000234:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000236:	2310      	movs	r3, #16
 8000238:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800023a:	2302      	movs	r3, #2
 800023c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 800023e:	2300      	movs	r3, #0
 8000240:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8000242:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 8000246:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000248:	f107 0318 	add.w	r3, r7, #24
 800024c:	4618      	mov	r0, r3
 800024e:	f001 fb61 	bl	8001914 <HAL_RCC_OscConfig>
 8000252:	4603      	mov	r3, r0
 8000254:	2b00      	cmp	r3, #0
 8000256:	d001      	beq.n	800025c <SystemClock_Config+0x50>
  {
    Error_Handler();
 8000258:	f000 fa62 	bl	8000720 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800025c:	230f      	movs	r3, #15
 800025e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000260:	2302      	movs	r3, #2
 8000262:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000264:	2300      	movs	r3, #0
 8000266:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000268:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800026c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800026e:	2300      	movs	r3, #0
 8000270:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000272:	1d3b      	adds	r3, r7, #4
 8000274:	2102      	movs	r1, #2
 8000276:	4618      	mov	r0, r3
 8000278:	f001 fdcc 	bl	8001e14 <HAL_RCC_ClockConfig>
 800027c:	4603      	mov	r3, r0
 800027e:	2b00      	cmp	r3, #0
 8000280:	d001      	beq.n	8000286 <SystemClock_Config+0x7a>
  {
    Error_Handler();
 8000282:	f000 fa4d 	bl	8000720 <Error_Handler>
  }
}
 8000286:	bf00      	nop
 8000288:	3740      	adds	r7, #64	; 0x40
 800028a:	46bd      	mov	sp, r7
 800028c:	bd80      	pop	{r7, pc}
	...

08000290 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000290:	b580      	push	{r7, lr}
 8000292:	b096      	sub	sp, #88	; 0x58
 8000294:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000296:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800029a:	2200      	movs	r2, #0
 800029c:	601a      	str	r2, [r3, #0]
 800029e:	605a      	str	r2, [r3, #4]
 80002a0:	609a      	str	r2, [r3, #8]
 80002a2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80002a4:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80002a8:	2200      	movs	r2, #0
 80002aa:	601a      	str	r2, [r3, #0]
 80002ac:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80002ae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80002b2:	2200      	movs	r2, #0
 80002b4:	601a      	str	r2, [r3, #0]
 80002b6:	605a      	str	r2, [r3, #4]
 80002b8:	609a      	str	r2, [r3, #8]
 80002ba:	60da      	str	r2, [r3, #12]
 80002bc:	611a      	str	r2, [r3, #16]
 80002be:	615a      	str	r2, [r3, #20]
 80002c0:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80002c2:	1d3b      	adds	r3, r7, #4
 80002c4:	2220      	movs	r2, #32
 80002c6:	2100      	movs	r1, #0
 80002c8:	4618      	mov	r0, r3
 80002ca:	f003 ff2f 	bl	800412c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80002ce:	4b59      	ldr	r3, [pc, #356]	; (8000434 <MX_TIM1_Init+0x1a4>)
 80002d0:	4a59      	ldr	r2, [pc, #356]	; (8000438 <MX_TIM1_Init+0x1a8>)
 80002d2:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80002d4:	4b57      	ldr	r3, [pc, #348]	; (8000434 <MX_TIM1_Init+0x1a4>)
 80002d6:	2200      	movs	r2, #0
 80002d8:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80002da:	4b56      	ldr	r3, [pc, #344]	; (8000434 <MX_TIM1_Init+0x1a4>)
 80002dc:	2200      	movs	r2, #0
 80002de:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 799;
 80002e0:	4b54      	ldr	r3, [pc, #336]	; (8000434 <MX_TIM1_Init+0x1a4>)
 80002e2:	f240 321f 	movw	r2, #799	; 0x31f
 80002e6:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80002e8:	4b52      	ldr	r3, [pc, #328]	; (8000434 <MX_TIM1_Init+0x1a4>)
 80002ea:	2200      	movs	r2, #0
 80002ec:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 7;
 80002ee:	4b51      	ldr	r3, [pc, #324]	; (8000434 <MX_TIM1_Init+0x1a4>)
 80002f0:	2207      	movs	r2, #7
 80002f2:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80002f4:	4b4f      	ldr	r3, [pc, #316]	; (8000434 <MX_TIM1_Init+0x1a4>)
 80002f6:	2280      	movs	r2, #128	; 0x80
 80002f8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80002fa:	484e      	ldr	r0, [pc, #312]	; (8000434 <MX_TIM1_Init+0x1a4>)
 80002fc:	f001 ff24 	bl	8002148 <HAL_TIM_Base_Init>
 8000300:	4603      	mov	r3, r0
 8000302:	2b00      	cmp	r3, #0
 8000304:	d001      	beq.n	800030a <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8000306:	f000 fa0b 	bl	8000720 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800030a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800030e:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000310:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000314:	4619      	mov	r1, r3
 8000316:	4847      	ldr	r0, [pc, #284]	; (8000434 <MX_TIM1_Init+0x1a4>)
 8000318:	f002 fe00 	bl	8002f1c <HAL_TIM_ConfigClockSource>
 800031c:	4603      	mov	r3, r0
 800031e:	2b00      	cmp	r3, #0
 8000320:	d001      	beq.n	8000326 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8000322:	f000 f9fd 	bl	8000720 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim1) != HAL_OK)
 8000326:	4843      	ldr	r0, [pc, #268]	; (8000434 <MX_TIM1_Init+0x1a4>)
 8000328:	f001 ffb0 	bl	800228c <HAL_TIM_OC_Init>
 800032c:	4603      	mov	r3, r0
 800032e:	2b00      	cmp	r3, #0
 8000330:	d001      	beq.n	8000336 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8000332:	f000 f9f5 	bl	8000720 <Error_Handler>
  }
  if (HAL_TIM_OnePulse_Init(&htim1, TIM_OPMODE_SINGLE) != HAL_OK)
 8000336:	2108      	movs	r1, #8
 8000338:	483e      	ldr	r0, [pc, #248]	; (8000434 <MX_TIM1_Init+0x1a4>)
 800033a:	f002 fba1 	bl	8002a80 <HAL_TIM_OnePulse_Init>
 800033e:	4603      	mov	r3, r0
 8000340:	2b00      	cmp	r3, #0
 8000342:	d001      	beq.n	8000348 <MX_TIM1_Init+0xb8>
  {
    Error_Handler();
 8000344:	f000 f9ec 	bl	8000720 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_ENABLE;
 8000348:	2310      	movs	r3, #16
 800034a:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_ENABLE;
 800034c:	2380      	movs	r3, #128	; 0x80
 800034e:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000350:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000354:	4619      	mov	r1, r3
 8000356:	4837      	ldr	r0, [pc, #220]	; (8000434 <MX_TIM1_Init+0x1a4>)
 8000358:	f003 fc46 	bl	8003be8 <HAL_TIMEx_MasterConfigSynchronization>
 800035c:	4603      	mov	r3, r0
 800035e:	2b00      	cmp	r3, #0
 8000360:	d001      	beq.n	8000366 <MX_TIM1_Init+0xd6>
  {
    Error_Handler();
 8000362:	f000 f9dd 	bl	8000720 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TOGGLE;
 8000366:	2330      	movs	r3, #48	; 0x30
 8000368:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 800036a:	2300      	movs	r3, #0
 800036c:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800036e:	2300      	movs	r3, #0
 8000370:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000372:	2300      	movs	r3, #0
 8000374:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000376:	2300      	movs	r3, #0
 8000378:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800037a:	2300      	movs	r3, #0
 800037c:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800037e:	2300      	movs	r3, #0
 8000380:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000382:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000386:	2200      	movs	r2, #0
 8000388:	4619      	mov	r1, r3
 800038a:	482a      	ldr	r0, [pc, #168]	; (8000434 <MX_TIM1_Init+0x1a4>)
 800038c:	f002 fcda 	bl	8002d44 <HAL_TIM_OC_ConfigChannel>
 8000390:	4603      	mov	r3, r0
 8000392:	2b00      	cmp	r3, #0
 8000394:	d001      	beq.n	800039a <MX_TIM1_Init+0x10a>
  {
    Error_Handler();
 8000396:	f000 f9c3 	bl	8000720 <Error_Handler>
  }
  __HAL_TIM_ENABLE_OCxPRELOAD(&htim1, TIM_CHANNEL_1);
 800039a:	4b26      	ldr	r3, [pc, #152]	; (8000434 <MX_TIM1_Init+0x1a4>)
 800039c:	681b      	ldr	r3, [r3, #0]
 800039e:	699a      	ldr	r2, [r3, #24]
 80003a0:	4b24      	ldr	r3, [pc, #144]	; (8000434 <MX_TIM1_Init+0x1a4>)
 80003a2:	681b      	ldr	r3, [r3, #0]
 80003a4:	f042 0208 	orr.w	r2, r2, #8
 80003a8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80003aa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80003ae:	2204      	movs	r2, #4
 80003b0:	4619      	mov	r1, r3
 80003b2:	4820      	ldr	r0, [pc, #128]	; (8000434 <MX_TIM1_Init+0x1a4>)
 80003b4:	f002 fcc6 	bl	8002d44 <HAL_TIM_OC_ConfigChannel>
 80003b8:	4603      	mov	r3, r0
 80003ba:	2b00      	cmp	r3, #0
 80003bc:	d001      	beq.n	80003c2 <MX_TIM1_Init+0x132>
  {
    Error_Handler();
 80003be:	f000 f9af 	bl	8000720 <Error_Handler>
  }
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80003c2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80003c6:	2208      	movs	r2, #8
 80003c8:	4619      	mov	r1, r3
 80003ca:	481a      	ldr	r0, [pc, #104]	; (8000434 <MX_TIM1_Init+0x1a4>)
 80003cc:	f002 fcba 	bl	8002d44 <HAL_TIM_OC_ConfigChannel>
 80003d0:	4603      	mov	r3, r0
 80003d2:	2b00      	cmp	r3, #0
 80003d4:	d001      	beq.n	80003da <MX_TIM1_Init+0x14a>
  {
    Error_Handler();
 80003d6:	f000 f9a3 	bl	8000720 <Error_Handler>
  }
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80003da:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80003de:	220c      	movs	r2, #12
 80003e0:	4619      	mov	r1, r3
 80003e2:	4814      	ldr	r0, [pc, #80]	; (8000434 <MX_TIM1_Init+0x1a4>)
 80003e4:	f002 fcae 	bl	8002d44 <HAL_TIM_OC_ConfigChannel>
 80003e8:	4603      	mov	r3, r0
 80003ea:	2b00      	cmp	r3, #0
 80003ec:	d001      	beq.n	80003f2 <MX_TIM1_Init+0x162>
  {
    Error_Handler();
 80003ee:	f000 f997 	bl	8000720 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80003f2:	2300      	movs	r3, #0
 80003f4:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80003f6:	2300      	movs	r3, #0
 80003f8:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80003fa:	2300      	movs	r3, #0
 80003fc:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80003fe:	2300      	movs	r3, #0
 8000400:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000402:	2300      	movs	r3, #0
 8000404:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000406:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800040a:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800040c:	2300      	movs	r3, #0
 800040e:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000410:	1d3b      	adds	r3, r7, #4
 8000412:	4619      	mov	r1, r3
 8000414:	4807      	ldr	r0, [pc, #28]	; (8000434 <MX_TIM1_Init+0x1a4>)
 8000416:	f003 fc45 	bl	8003ca4 <HAL_TIMEx_ConfigBreakDeadTime>
 800041a:	4603      	mov	r3, r0
 800041c:	2b00      	cmp	r3, #0
 800041e:	d001      	beq.n	8000424 <MX_TIM1_Init+0x194>
  {
    Error_Handler();
 8000420:	f000 f97e 	bl	8000720 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000424:	4803      	ldr	r0, [pc, #12]	; (8000434 <MX_TIM1_Init+0x1a4>)
 8000426:	f000 fa4b 	bl	80008c0 <HAL_TIM_MspPostInit>

}
 800042a:	bf00      	nop
 800042c:	3758      	adds	r7, #88	; 0x58
 800042e:	46bd      	mov	sp, r7
 8000430:	bd80      	pop	{r7, pc}
 8000432:	bf00      	nop
 8000434:	200001e4 	.word	0x200001e4
 8000438:	40012c00 	.word	0x40012c00

0800043c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800043c:	b580      	push	{r7, lr}
 800043e:	b090      	sub	sp, #64	; 0x40
 8000440:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000442:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000446:	2200      	movs	r2, #0
 8000448:	601a      	str	r2, [r3, #0]
 800044a:	605a      	str	r2, [r3, #4]
 800044c:	609a      	str	r2, [r3, #8]
 800044e:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8000450:	f107 031c 	add.w	r3, r7, #28
 8000454:	2200      	movs	r2, #0
 8000456:	601a      	str	r2, [r3, #0]
 8000458:	605a      	str	r2, [r3, #4]
 800045a:	609a      	str	r2, [r3, #8]
 800045c:	60da      	str	r2, [r3, #12]
 800045e:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000460:	f107 0314 	add.w	r3, r7, #20
 8000464:	2200      	movs	r2, #0
 8000466:	601a      	str	r2, [r3, #0]
 8000468:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 800046a:	1d3b      	adds	r3, r7, #4
 800046c:	2200      	movs	r2, #0
 800046e:	601a      	str	r2, [r3, #0]
 8000470:	605a      	str	r2, [r3, #4]
 8000472:	609a      	str	r2, [r3, #8]
 8000474:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000476:	4b33      	ldr	r3, [pc, #204]	; (8000544 <MX_TIM2_Init+0x108>)
 8000478:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800047c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800047e:	4b31      	ldr	r3, [pc, #196]	; (8000544 <MX_TIM2_Init+0x108>)
 8000480:	2200      	movs	r2, #0
 8000482:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000484:	4b2f      	ldr	r3, [pc, #188]	; (8000544 <MX_TIM2_Init+0x108>)
 8000486:	2200      	movs	r2, #0
 8000488:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 800048a:	4b2e      	ldr	r3, [pc, #184]	; (8000544 <MX_TIM2_Init+0x108>)
 800048c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000490:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000492:	4b2c      	ldr	r3, [pc, #176]	; (8000544 <MX_TIM2_Init+0x108>)
 8000494:	2200      	movs	r2, #0
 8000496:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000498:	4b2a      	ldr	r3, [pc, #168]	; (8000544 <MX_TIM2_Init+0x108>)
 800049a:	2280      	movs	r2, #128	; 0x80
 800049c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800049e:	4829      	ldr	r0, [pc, #164]	; (8000544 <MX_TIM2_Init+0x108>)
 80004a0:	f001 fe52 	bl	8002148 <HAL_TIM_Base_Init>
 80004a4:	4603      	mov	r3, r0
 80004a6:	2b00      	cmp	r3, #0
 80004a8:	d001      	beq.n	80004ae <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 80004aa:	f000 f939 	bl	8000720 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80004ae:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80004b2:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80004b4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80004b8:	4619      	mov	r1, r3
 80004ba:	4822      	ldr	r0, [pc, #136]	; (8000544 <MX_TIM2_Init+0x108>)
 80004bc:	f002 fd2e 	bl	8002f1c <HAL_TIM_ConfigClockSource>
 80004c0:	4603      	mov	r3, r0
 80004c2:	2b00      	cmp	r3, #0
 80004c4:	d001      	beq.n	80004ca <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 80004c6:	f000 f92b 	bl	8000720 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 80004ca:	481e      	ldr	r0, [pc, #120]	; (8000544 <MX_TIM2_Init+0x108>)
 80004cc:	f002 f83c 	bl	8002548 <HAL_TIM_IC_Init>
 80004d0:	4603      	mov	r3, r0
 80004d2:	2b00      	cmp	r3, #0
 80004d4:	d001      	beq.n	80004da <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 80004d6:	f000 f923 	bl	8000720 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 80004da:	2304      	movs	r3, #4
 80004dc:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 80004de:	2300      	movs	r3, #0
 80004e0:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_SlaveConfigSynchro(&htim2, &sSlaveConfig) != HAL_OK)
 80004e2:	f107 031c 	add.w	r3, r7, #28
 80004e6:	4619      	mov	r1, r3
 80004e8:	4816      	ldr	r0, [pc, #88]	; (8000544 <MX_TIM2_Init+0x108>)
 80004ea:	f002 fddb 	bl	80030a4 <HAL_TIM_SlaveConfigSynchro>
 80004ee:	4603      	mov	r3, r0
 80004f0:	2b00      	cmp	r3, #0
 80004f2:	d001      	beq.n	80004f8 <MX_TIM2_Init+0xbc>
  {
    Error_Handler();
 80004f4:	f000 f914 	bl	8000720 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80004f8:	2300      	movs	r3, #0
 80004fa:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80004fc:	2300      	movs	r3, #0
 80004fe:	61bb      	str	r3, [r7, #24]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000500:	f107 0314 	add.w	r3, r7, #20
 8000504:	4619      	mov	r1, r3
 8000506:	480f      	ldr	r0, [pc, #60]	; (8000544 <MX_TIM2_Init+0x108>)
 8000508:	f003 fb6e 	bl	8003be8 <HAL_TIMEx_MasterConfigSynchronization>
 800050c:	4603      	mov	r3, r0
 800050e:	2b00      	cmp	r3, #0
 8000510:	d001      	beq.n	8000516 <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 8000512:	f000 f905 	bl	8000720 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000516:	2300      	movs	r3, #0
 8000518:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 800051a:	2301      	movs	r3, #1
 800051c:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV8;
 800051e:	230c      	movs	r3, #12
 8000520:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 8000522:	2300      	movs	r3, #0
 8000524:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8000526:	1d3b      	adds	r3, r7, #4
 8000528:	2200      	movs	r2, #0
 800052a:	4619      	mov	r1, r3
 800052c:	4805      	ldr	r0, [pc, #20]	; (8000544 <MX_TIM2_Init+0x108>)
 800052e:	f002 fc61 	bl	8002df4 <HAL_TIM_IC_ConfigChannel>
 8000532:	4603      	mov	r3, r0
 8000534:	2b00      	cmp	r3, #0
 8000536:	d001      	beq.n	800053c <MX_TIM2_Init+0x100>
  {
    Error_Handler();
 8000538:	f000 f8f2 	bl	8000720 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800053c:	bf00      	nop
 800053e:	3740      	adds	r7, #64	; 0x40
 8000540:	46bd      	mov	sp, r7
 8000542:	bd80      	pop	{r7, pc}
 8000544:	20000234 	.word	0x20000234

08000548 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000548:	b580      	push	{r7, lr}
 800054a:	b086      	sub	sp, #24
 800054c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800054e:	f107 0308 	add.w	r3, r7, #8
 8000552:	2200      	movs	r2, #0
 8000554:	601a      	str	r2, [r3, #0]
 8000556:	605a      	str	r2, [r3, #4]
 8000558:	609a      	str	r2, [r3, #8]
 800055a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800055c:	463b      	mov	r3, r7
 800055e:	2200      	movs	r2, #0
 8000560:	601a      	str	r2, [r3, #0]
 8000562:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000564:	4b1d      	ldr	r3, [pc, #116]	; (80005dc <MX_TIM4_Init+0x94>)
 8000566:	4a1e      	ldr	r2, [pc, #120]	; (80005e0 <MX_TIM4_Init+0x98>)
 8000568:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 4;
 800056a:	4b1c      	ldr	r3, [pc, #112]	; (80005dc <MX_TIM4_Init+0x94>)
 800056c:	2204      	movs	r2, #4
 800056e:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000570:	4b1a      	ldr	r3, [pc, #104]	; (80005dc <MX_TIM4_Init+0x94>)
 8000572:	2200      	movs	r2, #0
 8000574:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8000576:	4b19      	ldr	r3, [pc, #100]	; (80005dc <MX_TIM4_Init+0x94>)
 8000578:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800057c:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800057e:	4b17      	ldr	r3, [pc, #92]	; (80005dc <MX_TIM4_Init+0x94>)
 8000580:	2200      	movs	r2, #0
 8000582:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000584:	4b15      	ldr	r3, [pc, #84]	; (80005dc <MX_TIM4_Init+0x94>)
 8000586:	2280      	movs	r2, #128	; 0x80
 8000588:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 800058a:	4814      	ldr	r0, [pc, #80]	; (80005dc <MX_TIM4_Init+0x94>)
 800058c:	f001 fddc 	bl	8002148 <HAL_TIM_Base_Init>
 8000590:	4603      	mov	r3, r0
 8000592:	2b00      	cmp	r3, #0
 8000594:	d001      	beq.n	800059a <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 8000596:	f000 f8c3 	bl	8000720 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800059a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800059e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80005a0:	f107 0308 	add.w	r3, r7, #8
 80005a4:	4619      	mov	r1, r3
 80005a6:	480d      	ldr	r0, [pc, #52]	; (80005dc <MX_TIM4_Init+0x94>)
 80005a8:	f002 fcb8 	bl	8002f1c <HAL_TIM_ConfigClockSource>
 80005ac:	4603      	mov	r3, r0
 80005ae:	2b00      	cmp	r3, #0
 80005b0:	d001      	beq.n	80005b6 <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 80005b2:	f000 f8b5 	bl	8000720 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80005b6:	2320      	movs	r3, #32
 80005b8:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80005ba:	2300      	movs	r3, #0
 80005bc:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80005be:	463b      	mov	r3, r7
 80005c0:	4619      	mov	r1, r3
 80005c2:	4806      	ldr	r0, [pc, #24]	; (80005dc <MX_TIM4_Init+0x94>)
 80005c4:	f003 fb10 	bl	8003be8 <HAL_TIMEx_MasterConfigSynchronization>
 80005c8:	4603      	mov	r3, r0
 80005ca:	2b00      	cmp	r3, #0
 80005cc:	d001      	beq.n	80005d2 <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 80005ce:	f000 f8a7 	bl	8000720 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80005d2:	bf00      	nop
 80005d4:	3718      	adds	r7, #24
 80005d6:	46bd      	mov	sp, r7
 80005d8:	bd80      	pop	{r7, pc}
 80005da:	bf00      	nop
 80005dc:	20000144 	.word	0x20000144
 80005e0:	40000800 	.word	0x40000800

080005e4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80005e4:	b580      	push	{r7, lr}
 80005e6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80005e8:	4b11      	ldr	r3, [pc, #68]	; (8000630 <MX_USART1_UART_Init+0x4c>)
 80005ea:	4a12      	ldr	r2, [pc, #72]	; (8000634 <MX_USART1_UART_Init+0x50>)
 80005ec:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80005ee:	4b10      	ldr	r3, [pc, #64]	; (8000630 <MX_USART1_UART_Init+0x4c>)
 80005f0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80005f4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80005f6:	4b0e      	ldr	r3, [pc, #56]	; (8000630 <MX_USART1_UART_Init+0x4c>)
 80005f8:	2200      	movs	r2, #0
 80005fa:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80005fc:	4b0c      	ldr	r3, [pc, #48]	; (8000630 <MX_USART1_UART_Init+0x4c>)
 80005fe:	2200      	movs	r2, #0
 8000600:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000602:	4b0b      	ldr	r3, [pc, #44]	; (8000630 <MX_USART1_UART_Init+0x4c>)
 8000604:	2200      	movs	r2, #0
 8000606:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000608:	4b09      	ldr	r3, [pc, #36]	; (8000630 <MX_USART1_UART_Init+0x4c>)
 800060a:	220c      	movs	r2, #12
 800060c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800060e:	4b08      	ldr	r3, [pc, #32]	; (8000630 <MX_USART1_UART_Init+0x4c>)
 8000610:	2200      	movs	r2, #0
 8000612:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000614:	4b06      	ldr	r3, [pc, #24]	; (8000630 <MX_USART1_UART_Init+0x4c>)
 8000616:	2200      	movs	r2, #0
 8000618:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800061a:	4805      	ldr	r0, [pc, #20]	; (8000630 <MX_USART1_UART_Init+0x4c>)
 800061c:	f003 fba5 	bl	8003d6a <HAL_UART_Init>
 8000620:	4603      	mov	r3, r0
 8000622:	2b00      	cmp	r3, #0
 8000624:	d001      	beq.n	800062a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000626:	f000 f87b 	bl	8000720 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800062a:	bf00      	nop
 800062c:	bd80      	pop	{r7, pc}
 800062e:	bf00      	nop
 8000630:	2000019c 	.word	0x2000019c
 8000634:	40013800 	.word	0x40013800

08000638 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000638:	b580      	push	{r7, lr}
 800063a:	b082      	sub	sp, #8
 800063c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800063e:	4b0c      	ldr	r3, [pc, #48]	; (8000670 <MX_DMA_Init+0x38>)
 8000640:	695b      	ldr	r3, [r3, #20]
 8000642:	4a0b      	ldr	r2, [pc, #44]	; (8000670 <MX_DMA_Init+0x38>)
 8000644:	f043 0301 	orr.w	r3, r3, #1
 8000648:	6153      	str	r3, [r2, #20]
 800064a:	4b09      	ldr	r3, [pc, #36]	; (8000670 <MX_DMA_Init+0x38>)
 800064c:	695b      	ldr	r3, [r3, #20]
 800064e:	f003 0301 	and.w	r3, r3, #1
 8000652:	607b      	str	r3, [r7, #4]
 8000654:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 8000656:	2200      	movs	r2, #0
 8000658:	2100      	movs	r1, #0
 800065a:	200f      	movs	r0, #15
 800065c:	f000 fd23 	bl	80010a6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8000660:	200f      	movs	r0, #15
 8000662:	f000 fd3c 	bl	80010de <HAL_NVIC_EnableIRQ>

}
 8000666:	bf00      	nop
 8000668:	3708      	adds	r7, #8
 800066a:	46bd      	mov	sp, r7
 800066c:	bd80      	pop	{r7, pc}
 800066e:	bf00      	nop
 8000670:	40021000 	.word	0x40021000

08000674 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000674:	b580      	push	{r7, lr}
 8000676:	b086      	sub	sp, #24
 8000678:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800067a:	f107 0308 	add.w	r3, r7, #8
 800067e:	2200      	movs	r2, #0
 8000680:	601a      	str	r2, [r3, #0]
 8000682:	605a      	str	r2, [r3, #4]
 8000684:	609a      	str	r2, [r3, #8]
 8000686:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000688:	4b22      	ldr	r3, [pc, #136]	; (8000714 <MX_GPIO_Init+0xa0>)
 800068a:	699b      	ldr	r3, [r3, #24]
 800068c:	4a21      	ldr	r2, [pc, #132]	; (8000714 <MX_GPIO_Init+0xa0>)
 800068e:	f043 0304 	orr.w	r3, r3, #4
 8000692:	6193      	str	r3, [r2, #24]
 8000694:	4b1f      	ldr	r3, [pc, #124]	; (8000714 <MX_GPIO_Init+0xa0>)
 8000696:	699b      	ldr	r3, [r3, #24]
 8000698:	f003 0304 	and.w	r3, r3, #4
 800069c:	607b      	str	r3, [r7, #4]
 800069e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006a0:	4b1c      	ldr	r3, [pc, #112]	; (8000714 <MX_GPIO_Init+0xa0>)
 80006a2:	699b      	ldr	r3, [r3, #24]
 80006a4:	4a1b      	ldr	r2, [pc, #108]	; (8000714 <MX_GPIO_Init+0xa0>)
 80006a6:	f043 0308 	orr.w	r3, r3, #8
 80006aa:	6193      	str	r3, [r2, #24]
 80006ac:	4b19      	ldr	r3, [pc, #100]	; (8000714 <MX_GPIO_Init+0xa0>)
 80006ae:	699b      	ldr	r3, [r3, #24]
 80006b0:	f003 0308 	and.w	r3, r3, #8
 80006b4:	603b      	str	r3, [r7, #0]
 80006b6:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, Z1Receive_Pin|Z2Receive_Pin|Z3Receive_Pin|Z4Receive_Pin, GPIO_PIN_RESET);
 80006b8:	2200      	movs	r2, #0
 80006ba:	f640 4106 	movw	r1, #3078	; 0xc06
 80006be:	4816      	ldr	r0, [pc, #88]	; (8000718 <MX_GPIO_Init+0xa4>)
 80006c0:	f001 f910 	bl	80018e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 80006c4:	2200      	movs	r2, #0
 80006c6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80006ca:	4814      	ldr	r0, [pc, #80]	; (800071c <MX_GPIO_Init+0xa8>)
 80006cc:	f001 f90a 	bl	80018e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : Z1Receive_Pin Z2Receive_Pin Z3Receive_Pin Z4Receive_Pin */
  GPIO_InitStruct.Pin = Z1Receive_Pin|Z2Receive_Pin|Z3Receive_Pin|Z4Receive_Pin;
 80006d0:	f640 4306 	movw	r3, #3078	; 0xc06
 80006d4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006d6:	2301      	movs	r3, #1
 80006d8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006da:	2300      	movs	r3, #0
 80006dc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006de:	2302      	movs	r3, #2
 80006e0:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006e2:	f107 0308 	add.w	r3, r7, #8
 80006e6:	4619      	mov	r1, r3
 80006e8:	480b      	ldr	r0, [pc, #44]	; (8000718 <MX_GPIO_Init+0xa4>)
 80006ea:	f000 ff77 	bl	80015dc <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 80006ee:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006f2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006f4:	2301      	movs	r3, #1
 80006f6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006f8:	2300      	movs	r3, #0
 80006fa:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006fc:	2302      	movs	r3, #2
 80006fe:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8000700:	f107 0308 	add.w	r3, r7, #8
 8000704:	4619      	mov	r1, r3
 8000706:	4805      	ldr	r0, [pc, #20]	; (800071c <MX_GPIO_Init+0xa8>)
 8000708:	f000 ff68 	bl	80015dc <HAL_GPIO_Init>

}
 800070c:	bf00      	nop
 800070e:	3718      	adds	r7, #24
 8000710:	46bd      	mov	sp, r7
 8000712:	bd80      	pop	{r7, pc}
 8000714:	40021000 	.word	0x40021000
 8000718:	40010c00 	.word	0x40010c00
 800071c:	40010800 	.word	0x40010800

08000720 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000720:	b480      	push	{r7}
 8000722:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000724:	b672      	cpsid	i
}
 8000726:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000728:	e7fe      	b.n	8000728 <Error_Handler+0x8>
	...

0800072c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800072c:	b480      	push	{r7}
 800072e:	b085      	sub	sp, #20
 8000730:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000732:	4b15      	ldr	r3, [pc, #84]	; (8000788 <HAL_MspInit+0x5c>)
 8000734:	699b      	ldr	r3, [r3, #24]
 8000736:	4a14      	ldr	r2, [pc, #80]	; (8000788 <HAL_MspInit+0x5c>)
 8000738:	f043 0301 	orr.w	r3, r3, #1
 800073c:	6193      	str	r3, [r2, #24]
 800073e:	4b12      	ldr	r3, [pc, #72]	; (8000788 <HAL_MspInit+0x5c>)
 8000740:	699b      	ldr	r3, [r3, #24]
 8000742:	f003 0301 	and.w	r3, r3, #1
 8000746:	60bb      	str	r3, [r7, #8]
 8000748:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800074a:	4b0f      	ldr	r3, [pc, #60]	; (8000788 <HAL_MspInit+0x5c>)
 800074c:	69db      	ldr	r3, [r3, #28]
 800074e:	4a0e      	ldr	r2, [pc, #56]	; (8000788 <HAL_MspInit+0x5c>)
 8000750:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000754:	61d3      	str	r3, [r2, #28]
 8000756:	4b0c      	ldr	r3, [pc, #48]	; (8000788 <HAL_MspInit+0x5c>)
 8000758:	69db      	ldr	r3, [r3, #28]
 800075a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800075e:	607b      	str	r3, [r7, #4]
 8000760:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 8000762:	4b0a      	ldr	r3, [pc, #40]	; (800078c <HAL_MspInit+0x60>)
 8000764:	685b      	ldr	r3, [r3, #4]
 8000766:	60fb      	str	r3, [r7, #12]
 8000768:	68fb      	ldr	r3, [r7, #12]
 800076a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800076e:	60fb      	str	r3, [r7, #12]
 8000770:	68fb      	ldr	r3, [r7, #12]
 8000772:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000776:	60fb      	str	r3, [r7, #12]
 8000778:	4a04      	ldr	r2, [pc, #16]	; (800078c <HAL_MspInit+0x60>)
 800077a:	68fb      	ldr	r3, [r7, #12]
 800077c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800077e:	bf00      	nop
 8000780:	3714      	adds	r7, #20
 8000782:	46bd      	mov	sp, r7
 8000784:	bc80      	pop	{r7}
 8000786:	4770      	bx	lr
 8000788:	40021000 	.word	0x40021000
 800078c:	40010000 	.word	0x40010000

08000790 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000790:	b580      	push	{r7, lr}
 8000792:	b08a      	sub	sp, #40	; 0x28
 8000794:	af00      	add	r7, sp, #0
 8000796:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000798:	f107 0318 	add.w	r3, r7, #24
 800079c:	2200      	movs	r2, #0
 800079e:	601a      	str	r2, [r3, #0]
 80007a0:	605a      	str	r2, [r3, #4]
 80007a2:	609a      	str	r2, [r3, #8]
 80007a4:	60da      	str	r2, [r3, #12]
  if(htim_base->Instance==TIM1)
 80007a6:	687b      	ldr	r3, [r7, #4]
 80007a8:	681b      	ldr	r3, [r3, #0]
 80007aa:	4a3f      	ldr	r2, [pc, #252]	; (80008a8 <HAL_TIM_Base_MspInit+0x118>)
 80007ac:	4293      	cmp	r3, r2
 80007ae:	d10c      	bne.n	80007ca <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80007b0:	4b3e      	ldr	r3, [pc, #248]	; (80008ac <HAL_TIM_Base_MspInit+0x11c>)
 80007b2:	699b      	ldr	r3, [r3, #24]
 80007b4:	4a3d      	ldr	r2, [pc, #244]	; (80008ac <HAL_TIM_Base_MspInit+0x11c>)
 80007b6:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80007ba:	6193      	str	r3, [r2, #24]
 80007bc:	4b3b      	ldr	r3, [pc, #236]	; (80008ac <HAL_TIM_Base_MspInit+0x11c>)
 80007be:	699b      	ldr	r3, [r3, #24]
 80007c0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80007c4:	617b      	str	r3, [r7, #20]
 80007c6:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 80007c8:	e06a      	b.n	80008a0 <HAL_TIM_Base_MspInit+0x110>
  else if(htim_base->Instance==TIM2)
 80007ca:	687b      	ldr	r3, [r7, #4]
 80007cc:	681b      	ldr	r3, [r3, #0]
 80007ce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80007d2:	d14c      	bne.n	800086e <HAL_TIM_Base_MspInit+0xde>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80007d4:	4b35      	ldr	r3, [pc, #212]	; (80008ac <HAL_TIM_Base_MspInit+0x11c>)
 80007d6:	69db      	ldr	r3, [r3, #28]
 80007d8:	4a34      	ldr	r2, [pc, #208]	; (80008ac <HAL_TIM_Base_MspInit+0x11c>)
 80007da:	f043 0301 	orr.w	r3, r3, #1
 80007de:	61d3      	str	r3, [r2, #28]
 80007e0:	4b32      	ldr	r3, [pc, #200]	; (80008ac <HAL_TIM_Base_MspInit+0x11c>)
 80007e2:	69db      	ldr	r3, [r3, #28]
 80007e4:	f003 0301 	and.w	r3, r3, #1
 80007e8:	613b      	str	r3, [r7, #16]
 80007ea:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80007ec:	4b2f      	ldr	r3, [pc, #188]	; (80008ac <HAL_TIM_Base_MspInit+0x11c>)
 80007ee:	699b      	ldr	r3, [r3, #24]
 80007f0:	4a2e      	ldr	r2, [pc, #184]	; (80008ac <HAL_TIM_Base_MspInit+0x11c>)
 80007f2:	f043 0304 	orr.w	r3, r3, #4
 80007f6:	6193      	str	r3, [r2, #24]
 80007f8:	4b2c      	ldr	r3, [pc, #176]	; (80008ac <HAL_TIM_Base_MspInit+0x11c>)
 80007fa:	699b      	ldr	r3, [r3, #24]
 80007fc:	f003 0304 	and.w	r3, r3, #4
 8000800:	60fb      	str	r3, [r7, #12]
 8000802:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = SensOut_Pin;
 8000804:	2301      	movs	r3, #1
 8000806:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000808:	2300      	movs	r3, #0
 800080a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800080c:	2300      	movs	r3, #0
 800080e:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(SensOut_GPIO_Port, &GPIO_InitStruct);
 8000810:	f107 0318 	add.w	r3, r7, #24
 8000814:	4619      	mov	r1, r3
 8000816:	4826      	ldr	r0, [pc, #152]	; (80008b0 <HAL_TIM_Base_MspInit+0x120>)
 8000818:	f000 fee0 	bl	80015dc <HAL_GPIO_Init>
    hdma_tim2_ch1.Instance = DMA1_Channel5;
 800081c:	4b25      	ldr	r3, [pc, #148]	; (80008b4 <HAL_TIM_Base_MspInit+0x124>)
 800081e:	4a26      	ldr	r2, [pc, #152]	; (80008b8 <HAL_TIM_Base_MspInit+0x128>)
 8000820:	601a      	str	r2, [r3, #0]
    hdma_tim2_ch1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000822:	4b24      	ldr	r3, [pc, #144]	; (80008b4 <HAL_TIM_Base_MspInit+0x124>)
 8000824:	2200      	movs	r2, #0
 8000826:	605a      	str	r2, [r3, #4]
    hdma_tim2_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000828:	4b22      	ldr	r3, [pc, #136]	; (80008b4 <HAL_TIM_Base_MspInit+0x124>)
 800082a:	2200      	movs	r2, #0
 800082c:	609a      	str	r2, [r3, #8]
    hdma_tim2_ch1.Init.MemInc = DMA_MINC_ENABLE;
 800082e:	4b21      	ldr	r3, [pc, #132]	; (80008b4 <HAL_TIM_Base_MspInit+0x124>)
 8000830:	2280      	movs	r2, #128	; 0x80
 8000832:	60da      	str	r2, [r3, #12]
    hdma_tim2_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000834:	4b1f      	ldr	r3, [pc, #124]	; (80008b4 <HAL_TIM_Base_MspInit+0x124>)
 8000836:	f44f 7280 	mov.w	r2, #256	; 0x100
 800083a:	611a      	str	r2, [r3, #16]
    hdma_tim2_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800083c:	4b1d      	ldr	r3, [pc, #116]	; (80008b4 <HAL_TIM_Base_MspInit+0x124>)
 800083e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000842:	615a      	str	r2, [r3, #20]
    hdma_tim2_ch1.Init.Mode = DMA_CIRCULAR;
 8000844:	4b1b      	ldr	r3, [pc, #108]	; (80008b4 <HAL_TIM_Base_MspInit+0x124>)
 8000846:	2220      	movs	r2, #32
 8000848:	619a      	str	r2, [r3, #24]
    hdma_tim2_ch1.Init.Priority = DMA_PRIORITY_LOW;
 800084a:	4b1a      	ldr	r3, [pc, #104]	; (80008b4 <HAL_TIM_Base_MspInit+0x124>)
 800084c:	2200      	movs	r2, #0
 800084e:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_tim2_ch1) != HAL_OK)
 8000850:	4818      	ldr	r0, [pc, #96]	; (80008b4 <HAL_TIM_Base_MspInit+0x124>)
 8000852:	f000 fc5f 	bl	8001114 <HAL_DMA_Init>
 8000856:	4603      	mov	r3, r0
 8000858:	2b00      	cmp	r3, #0
 800085a:	d001      	beq.n	8000860 <HAL_TIM_Base_MspInit+0xd0>
      Error_Handler();
 800085c:	f7ff ff60 	bl	8000720 <Error_Handler>
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC1],hdma_tim2_ch1);
 8000860:	687b      	ldr	r3, [r7, #4]
 8000862:	4a14      	ldr	r2, [pc, #80]	; (80008b4 <HAL_TIM_Base_MspInit+0x124>)
 8000864:	625a      	str	r2, [r3, #36]	; 0x24
 8000866:	4a13      	ldr	r2, [pc, #76]	; (80008b4 <HAL_TIM_Base_MspInit+0x124>)
 8000868:	687b      	ldr	r3, [r7, #4]
 800086a:	6253      	str	r3, [r2, #36]	; 0x24
}
 800086c:	e018      	b.n	80008a0 <HAL_TIM_Base_MspInit+0x110>
  else if(htim_base->Instance==TIM4)
 800086e:	687b      	ldr	r3, [r7, #4]
 8000870:	681b      	ldr	r3, [r3, #0]
 8000872:	4a12      	ldr	r2, [pc, #72]	; (80008bc <HAL_TIM_Base_MspInit+0x12c>)
 8000874:	4293      	cmp	r3, r2
 8000876:	d113      	bne.n	80008a0 <HAL_TIM_Base_MspInit+0x110>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8000878:	4b0c      	ldr	r3, [pc, #48]	; (80008ac <HAL_TIM_Base_MspInit+0x11c>)
 800087a:	69db      	ldr	r3, [r3, #28]
 800087c:	4a0b      	ldr	r2, [pc, #44]	; (80008ac <HAL_TIM_Base_MspInit+0x11c>)
 800087e:	f043 0304 	orr.w	r3, r3, #4
 8000882:	61d3      	str	r3, [r2, #28]
 8000884:	4b09      	ldr	r3, [pc, #36]	; (80008ac <HAL_TIM_Base_MspInit+0x11c>)
 8000886:	69db      	ldr	r3, [r3, #28]
 8000888:	f003 0304 	and.w	r3, r3, #4
 800088c:	60bb      	str	r3, [r7, #8]
 800088e:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8000890:	2200      	movs	r2, #0
 8000892:	2100      	movs	r1, #0
 8000894:	201e      	movs	r0, #30
 8000896:	f000 fc06 	bl	80010a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 800089a:	201e      	movs	r0, #30
 800089c:	f000 fc1f 	bl	80010de <HAL_NVIC_EnableIRQ>
}
 80008a0:	bf00      	nop
 80008a2:	3728      	adds	r7, #40	; 0x28
 80008a4:	46bd      	mov	sp, r7
 80008a6:	bd80      	pop	{r7, pc}
 80008a8:	40012c00 	.word	0x40012c00
 80008ac:	40021000 	.word	0x40021000
 80008b0:	40010800 	.word	0x40010800
 80008b4:	20000100 	.word	0x20000100
 80008b8:	40020058 	.word	0x40020058
 80008bc:	40000800 	.word	0x40000800

080008c0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80008c0:	b580      	push	{r7, lr}
 80008c2:	b088      	sub	sp, #32
 80008c4:	af00      	add	r7, sp, #0
 80008c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008c8:	f107 0310 	add.w	r3, r7, #16
 80008cc:	2200      	movs	r2, #0
 80008ce:	601a      	str	r2, [r3, #0]
 80008d0:	605a      	str	r2, [r3, #4]
 80008d2:	609a      	str	r2, [r3, #8]
 80008d4:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM1)
 80008d6:	687b      	ldr	r3, [r7, #4]
 80008d8:	681b      	ldr	r3, [r3, #0]
 80008da:	4a10      	ldr	r2, [pc, #64]	; (800091c <HAL_TIM_MspPostInit+0x5c>)
 80008dc:	4293      	cmp	r3, r2
 80008de:	d118      	bne.n	8000912 <HAL_TIM_MspPostInit+0x52>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008e0:	4b0f      	ldr	r3, [pc, #60]	; (8000920 <HAL_TIM_MspPostInit+0x60>)
 80008e2:	699b      	ldr	r3, [r3, #24]
 80008e4:	4a0e      	ldr	r2, [pc, #56]	; (8000920 <HAL_TIM_MspPostInit+0x60>)
 80008e6:	f043 0304 	orr.w	r3, r3, #4
 80008ea:	6193      	str	r3, [r2, #24]
 80008ec:	4b0c      	ldr	r3, [pc, #48]	; (8000920 <HAL_TIM_MspPostInit+0x60>)
 80008ee:	699b      	ldr	r3, [r3, #24]
 80008f0:	f003 0304 	and.w	r3, r3, #4
 80008f4:	60fb      	str	r3, [r7, #12]
 80008f6:	68fb      	ldr	r3, [r7, #12]
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    PA11     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = Z1_Pin|Z2_Pin|Z3_Pin|Z4_Pin;
 80008f8:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 80008fc:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008fe:	2302      	movs	r3, #2
 8000900:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000902:	2302      	movs	r3, #2
 8000904:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000906:	f107 0310 	add.w	r3, r7, #16
 800090a:	4619      	mov	r1, r3
 800090c:	4805      	ldr	r0, [pc, #20]	; (8000924 <HAL_TIM_MspPostInit+0x64>)
 800090e:	f000 fe65 	bl	80015dc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8000912:	bf00      	nop
 8000914:	3720      	adds	r7, #32
 8000916:	46bd      	mov	sp, r7
 8000918:	bd80      	pop	{r7, pc}
 800091a:	bf00      	nop
 800091c:	40012c00 	.word	0x40012c00
 8000920:	40021000 	.word	0x40021000
 8000924:	40010800 	.word	0x40010800

08000928 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000928:	b580      	push	{r7, lr}
 800092a:	b08a      	sub	sp, #40	; 0x28
 800092c:	af00      	add	r7, sp, #0
 800092e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000930:	f107 0314 	add.w	r3, r7, #20
 8000934:	2200      	movs	r2, #0
 8000936:	601a      	str	r2, [r3, #0]
 8000938:	605a      	str	r2, [r3, #4]
 800093a:	609a      	str	r2, [r3, #8]
 800093c:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 800093e:	687b      	ldr	r3, [r7, #4]
 8000940:	681b      	ldr	r3, [r3, #0]
 8000942:	4a22      	ldr	r2, [pc, #136]	; (80009cc <HAL_UART_MspInit+0xa4>)
 8000944:	4293      	cmp	r3, r2
 8000946:	d13d      	bne.n	80009c4 <HAL_UART_MspInit+0x9c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000948:	4b21      	ldr	r3, [pc, #132]	; (80009d0 <HAL_UART_MspInit+0xa8>)
 800094a:	699b      	ldr	r3, [r3, #24]
 800094c:	4a20      	ldr	r2, [pc, #128]	; (80009d0 <HAL_UART_MspInit+0xa8>)
 800094e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000952:	6193      	str	r3, [r2, #24]
 8000954:	4b1e      	ldr	r3, [pc, #120]	; (80009d0 <HAL_UART_MspInit+0xa8>)
 8000956:	699b      	ldr	r3, [r3, #24]
 8000958:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800095c:	613b      	str	r3, [r7, #16]
 800095e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000960:	4b1b      	ldr	r3, [pc, #108]	; (80009d0 <HAL_UART_MspInit+0xa8>)
 8000962:	699b      	ldr	r3, [r3, #24]
 8000964:	4a1a      	ldr	r2, [pc, #104]	; (80009d0 <HAL_UART_MspInit+0xa8>)
 8000966:	f043 0308 	orr.w	r3, r3, #8
 800096a:	6193      	str	r3, [r2, #24]
 800096c:	4b18      	ldr	r3, [pc, #96]	; (80009d0 <HAL_UART_MspInit+0xa8>)
 800096e:	699b      	ldr	r3, [r3, #24]
 8000970:	f003 0308 	and.w	r3, r3, #8
 8000974:	60fb      	str	r3, [r7, #12]
 8000976:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000978:	2340      	movs	r3, #64	; 0x40
 800097a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800097c:	2302      	movs	r3, #2
 800097e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000980:	2303      	movs	r3, #3
 8000982:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000984:	f107 0314 	add.w	r3, r7, #20
 8000988:	4619      	mov	r1, r3
 800098a:	4812      	ldr	r0, [pc, #72]	; (80009d4 <HAL_UART_MspInit+0xac>)
 800098c:	f000 fe26 	bl	80015dc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000990:	2380      	movs	r3, #128	; 0x80
 8000992:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000994:	2300      	movs	r3, #0
 8000996:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000998:	2300      	movs	r3, #0
 800099a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800099c:	f107 0314 	add.w	r3, r7, #20
 80009a0:	4619      	mov	r1, r3
 80009a2:	480c      	ldr	r0, [pc, #48]	; (80009d4 <HAL_UART_MspInit+0xac>)
 80009a4:	f000 fe1a 	bl	80015dc <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_USART1_ENABLE();
 80009a8:	4b0b      	ldr	r3, [pc, #44]	; (80009d8 <HAL_UART_MspInit+0xb0>)
 80009aa:	685b      	ldr	r3, [r3, #4]
 80009ac:	627b      	str	r3, [r7, #36]	; 0x24
 80009ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009b0:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 80009b4:	627b      	str	r3, [r7, #36]	; 0x24
 80009b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009b8:	f043 0304 	orr.w	r3, r3, #4
 80009bc:	627b      	str	r3, [r7, #36]	; 0x24
 80009be:	4a06      	ldr	r2, [pc, #24]	; (80009d8 <HAL_UART_MspInit+0xb0>)
 80009c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009c2:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80009c4:	bf00      	nop
 80009c6:	3728      	adds	r7, #40	; 0x28
 80009c8:	46bd      	mov	sp, r7
 80009ca:	bd80      	pop	{r7, pc}
 80009cc:	40013800 	.word	0x40013800
 80009d0:	40021000 	.word	0x40021000
 80009d4:	40010c00 	.word	0x40010c00
 80009d8:	40010000 	.word	0x40010000

080009dc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009dc:	b480      	push	{r7}
 80009de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80009e0:	e7fe      	b.n	80009e0 <NMI_Handler+0x4>

080009e2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009e2:	b480      	push	{r7}
 80009e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009e6:	e7fe      	b.n	80009e6 <HardFault_Handler+0x4>

080009e8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80009e8:	b480      	push	{r7}
 80009ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80009ec:	e7fe      	b.n	80009ec <MemManage_Handler+0x4>

080009ee <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80009ee:	b480      	push	{r7}
 80009f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80009f2:	e7fe      	b.n	80009f2 <BusFault_Handler+0x4>

080009f4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80009f4:	b480      	push	{r7}
 80009f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80009f8:	e7fe      	b.n	80009f8 <UsageFault_Handler+0x4>

080009fa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80009fa:	b480      	push	{r7}
 80009fc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80009fe:	bf00      	nop
 8000a00:	46bd      	mov	sp, r7
 8000a02:	bc80      	pop	{r7}
 8000a04:	4770      	bx	lr

08000a06 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a06:	b480      	push	{r7}
 8000a08:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a0a:	bf00      	nop
 8000a0c:	46bd      	mov	sp, r7
 8000a0e:	bc80      	pop	{r7}
 8000a10:	4770      	bx	lr

08000a12 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a12:	b480      	push	{r7}
 8000a14:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a16:	bf00      	nop
 8000a18:	46bd      	mov	sp, r7
 8000a1a:	bc80      	pop	{r7}
 8000a1c:	4770      	bx	lr

08000a1e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a1e:	b580      	push	{r7, lr}
 8000a20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a22:	f000 fa29 	bl	8000e78 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a26:	bf00      	nop
 8000a28:	bd80      	pop	{r7, pc}
	...

08000a2c <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8000a2c:	b580      	push	{r7, lr}
 8000a2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */
	if (noise_count-- == 0) {
 8000a30:	4b30      	ldr	r3, [pc, #192]	; (8000af4 <DMA1_Channel5_IRQHandler+0xc8>)
 8000a32:	881b      	ldrh	r3, [r3, #0]
 8000a34:	1e5a      	subs	r2, r3, #1
 8000a36:	b291      	uxth	r1, r2
 8000a38:	4a2e      	ldr	r2, [pc, #184]	; (8000af4 <DMA1_Channel5_IRQHandler+0xc8>)
 8000a3a:	8011      	strh	r1, [r2, #0]
 8000a3c:	2b00      	cmp	r3, #0
 8000a3e:	d154      	bne.n	8000aea <DMA1_Channel5_IRQHandler+0xbe>
		switch (currentMode) {
 8000a40:	4b2d      	ldr	r3, [pc, #180]	; (8000af8 <DMA1_Channel5_IRQHandler+0xcc>)
 8000a42:	881b      	ldrh	r3, [r3, #0]
 8000a44:	3b01      	subs	r3, #1
 8000a46:	2b07      	cmp	r3, #7
 8000a48:	d845      	bhi.n	8000ad6 <DMA1_Channel5_IRQHandler+0xaa>
 8000a4a:	a201      	add	r2, pc, #4	; (adr r2, 8000a50 <DMA1_Channel5_IRQHandler+0x24>)
 8000a4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000a50:	08000a71 	.word	0x08000a71
 8000a54:	08000a83 	.word	0x08000a83
 8000a58:	08000a8f 	.word	0x08000a8f
 8000a5c:	08000a9b 	.word	0x08000a9b
 8000a60:	08000aa7 	.word	0x08000aa7
 8000a64:	08000ab3 	.word	0x08000ab3
 8000a68:	08000abf 	.word	0x08000abf
 8000a6c:	08000acb 	.word	0x08000acb
			case 1: { // Z1 > Z2
				Z12 = fastCounter & 0x0FFFF;
 8000a70:	4b22      	ldr	r3, [pc, #136]	; (8000afc <DMA1_Channel5_IRQHandler+0xd0>)
 8000a72:	681b      	ldr	r3, [r3, #0]
 8000a74:	b29a      	uxth	r2, r3
 8000a76:	4b22      	ldr	r3, [pc, #136]	; (8000b00 <DMA1_Channel5_IRQHandler+0xd4>)
 8000a78:	801a      	strh	r2, [r3, #0]
				readyFlag = TRUE;
 8000a7a:	4b22      	ldr	r3, [pc, #136]	; (8000b04 <DMA1_Channel5_IRQHandler+0xd8>)
 8000a7c:	2201      	movs	r2, #1
 8000a7e:	701a      	strb	r2, [r3, #0]
				break;
 8000a80:	e029      	b.n	8000ad6 <DMA1_Channel5_IRQHandler+0xaa>
			}
			case 2: { // Z2 > Z1
				Z21 = fastCounter & 0x0FFFF;
 8000a82:	4b1e      	ldr	r3, [pc, #120]	; (8000afc <DMA1_Channel5_IRQHandler+0xd0>)
 8000a84:	681b      	ldr	r3, [r3, #0]
 8000a86:	b29a      	uxth	r2, r3
 8000a88:	4b1f      	ldr	r3, [pc, #124]	; (8000b08 <DMA1_Channel5_IRQHandler+0xdc>)
 8000a8a:	801a      	strh	r2, [r3, #0]
				break;
 8000a8c:	e023      	b.n	8000ad6 <DMA1_Channel5_IRQHandler+0xaa>
			}
			case 3: { // Z2 > Z3
				Z23 = fastCounter & 0x0FFFF;
 8000a8e:	4b1b      	ldr	r3, [pc, #108]	; (8000afc <DMA1_Channel5_IRQHandler+0xd0>)
 8000a90:	681b      	ldr	r3, [r3, #0]
 8000a92:	b29a      	uxth	r2, r3
 8000a94:	4b1d      	ldr	r3, [pc, #116]	; (8000b0c <DMA1_Channel5_IRQHandler+0xe0>)
 8000a96:	801a      	strh	r2, [r3, #0]
				break;
 8000a98:	e01d      	b.n	8000ad6 <DMA1_Channel5_IRQHandler+0xaa>
			}
			case 4: { // Z3 > Z2
				Z32 = fastCounter & 0x0FFFF;
 8000a9a:	4b18      	ldr	r3, [pc, #96]	; (8000afc <DMA1_Channel5_IRQHandler+0xd0>)
 8000a9c:	681b      	ldr	r3, [r3, #0]
 8000a9e:	b29a      	uxth	r2, r3
 8000aa0:	4b1b      	ldr	r3, [pc, #108]	; (8000b10 <DMA1_Channel5_IRQHandler+0xe4>)
 8000aa2:	801a      	strh	r2, [r3, #0]
				break;
 8000aa4:	e017      	b.n	8000ad6 <DMA1_Channel5_IRQHandler+0xaa>
			}
			case 5: { // Z3 > Z4
				Z34 = fastCounter & 0x0FFFF;
 8000aa6:	4b15      	ldr	r3, [pc, #84]	; (8000afc <DMA1_Channel5_IRQHandler+0xd0>)
 8000aa8:	681b      	ldr	r3, [r3, #0]
 8000aaa:	b29a      	uxth	r2, r3
 8000aac:	4b19      	ldr	r3, [pc, #100]	; (8000b14 <DMA1_Channel5_IRQHandler+0xe8>)
 8000aae:	801a      	strh	r2, [r3, #0]
				break;
 8000ab0:	e011      	b.n	8000ad6 <DMA1_Channel5_IRQHandler+0xaa>
			}
			case 6: { // Z4 > Z3
				Z43 = fastCounter & 0x0FFFF;
 8000ab2:	4b12      	ldr	r3, [pc, #72]	; (8000afc <DMA1_Channel5_IRQHandler+0xd0>)
 8000ab4:	681b      	ldr	r3, [r3, #0]
 8000ab6:	b29a      	uxth	r2, r3
 8000ab8:	4b17      	ldr	r3, [pc, #92]	; (8000b18 <DMA1_Channel5_IRQHandler+0xec>)
 8000aba:	801a      	strh	r2, [r3, #0]
				break;
 8000abc:	e00b      	b.n	8000ad6 <DMA1_Channel5_IRQHandler+0xaa>
			}
			case 7: { // Z4 > Z1
				Z41 = fastCounter & 0x0FFFF;
 8000abe:	4b0f      	ldr	r3, [pc, #60]	; (8000afc <DMA1_Channel5_IRQHandler+0xd0>)
 8000ac0:	681b      	ldr	r3, [r3, #0]
 8000ac2:	b29a      	uxth	r2, r3
 8000ac4:	4b15      	ldr	r3, [pc, #84]	; (8000b1c <DMA1_Channel5_IRQHandler+0xf0>)
 8000ac6:	801a      	strh	r2, [r3, #0]
				break;
 8000ac8:	e005      	b.n	8000ad6 <DMA1_Channel5_IRQHandler+0xaa>
			}
			case 8: { // Z1 > Z4
				Z14 = fastCounter & 0x0FFFF;
 8000aca:	4b0c      	ldr	r3, [pc, #48]	; (8000afc <DMA1_Channel5_IRQHandler+0xd0>)
 8000acc:	681b      	ldr	r3, [r3, #0]
 8000ace:	b29a      	uxth	r2, r3
 8000ad0:	4b13      	ldr	r3, [pc, #76]	; (8000b20 <DMA1_Channel5_IRQHandler+0xf4>)
 8000ad2:	801a      	strh	r2, [r3, #0]
				break;
 8000ad4:	bf00      	nop
			}
		}
		HAL_TIM_IC_Stop_DMA(&htim2, TIM_CHANNEL_1);
 8000ad6:	2100      	movs	r1, #0
 8000ad8:	4812      	ldr	r0, [pc, #72]	; (8000b24 <DMA1_Channel5_IRQHandler+0xf8>)
 8000ada:	f001 ff17 	bl	800290c <HAL_TIM_IC_Stop_DMA>
		//__HAL_TIM_SET_COUNTER(&htim2, 0x0000);
		//HAL_GPIO_TogglePin(GPIOA, LED_Pin);
		HAL_GPIO_WritePin(GPIOA, LED_Pin, GPIO_PIN_RESET);
 8000ade:	2200      	movs	r2, #0
 8000ae0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000ae4:	4810      	ldr	r0, [pc, #64]	; (8000b28 <DMA1_Channel5_IRQHandler+0xfc>)
 8000ae6:	f000 fefd 	bl	80018e4 <HAL_GPIO_WritePin>
	}

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim2_ch1);
 8000aea:	4810      	ldr	r0, [pc, #64]	; (8000b2c <DMA1_Channel5_IRQHandler+0x100>)
 8000aec:	f000 fc42 	bl	8001374 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 8000af0:	bf00      	nop
 8000af2:	bd80      	pop	{r7, pc}
 8000af4:	20000232 	.word	0x20000232
 8000af8:	2000022e 	.word	0x2000022e
 8000afc:	20000198 	.word	0x20000198
 8000b00:	200001e0 	.word	0x200001e0
 8000b04:	200000fe 	.word	0x200000fe
 8000b08:	2000018e 	.word	0x2000018e
 8000b0c:	20000230 	.word	0x20000230
 8000b10:	2000022c 	.word	0x2000022c
 8000b14:	20000192 	.word	0x20000192
 8000b18:	200001e2 	.word	0x200001e2
 8000b1c:	20000190 	.word	0x20000190
 8000b20:	2000018c 	.word	0x2000018c
 8000b24:	20000234 	.word	0x20000234
 8000b28:	40010800 	.word	0x40010800
 8000b2c:	20000100 	.word	0x20000100

08000b30 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8000b30:	b580      	push	{r7, lr}
 8000b32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

	  HAL_GPIO_WritePin(GPIOA, LED_Pin, GPIO_PIN_SET);
 8000b34:	2201      	movs	r2, #1
 8000b36:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000b3a:	4872      	ldr	r0, [pc, #456]	; (8000d04 <TIM4_IRQHandler+0x1d4>)
 8000b3c:	f000 fed2 	bl	80018e4 <HAL_GPIO_WritePin>
	  readyFlag = FALSE;
 8000b40:	4b71      	ldr	r3, [pc, #452]	; (8000d08 <TIM4_IRQHandler+0x1d8>)
 8000b42:	2200      	movs	r2, #0
 8000b44:	701a      	strb	r2, [r3, #0]
	  noise_count = 2;
 8000b46:	4b71      	ldr	r3, [pc, #452]	; (8000d0c <TIM4_IRQHandler+0x1dc>)
 8000b48:	2202      	movs	r2, #2
 8000b4a:	801a      	strh	r2, [r3, #0]
	  /* Turn off all multiplexer */
	  GPIOB->ODR &= ~((1 << Z1Receive) | (1 << Z2Receive) | (1 << Z3Receive) | (1 << Z4Receive));
 8000b4c:	4b70      	ldr	r3, [pc, #448]	; (8000d10 <TIM4_IRQHandler+0x1e0>)
 8000b4e:	68db      	ldr	r3, [r3, #12]
 8000b50:	4a6f      	ldr	r2, [pc, #444]	; (8000d10 <TIM4_IRQHandler+0x1e0>)
 8000b52:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8000b56:	f023 0306 	bic.w	r3, r3, #6
 8000b5a:	60d3      	str	r3, [r2, #12]

	  /* Restart timers */
	  HAL_TIM_IC_Start_DMA(&htim2, TIM_CHANNEL_1, (uint32_t*) &fastCounter, 1);
 8000b5c:	2301      	movs	r3, #1
 8000b5e:	4a6d      	ldr	r2, [pc, #436]	; (8000d14 <TIM4_IRQHandler+0x1e4>)
 8000b60:	2100      	movs	r1, #0
 8000b62:	486d      	ldr	r0, [pc, #436]	; (8000d18 <TIM4_IRQHandler+0x1e8>)
 8000b64:	f001 fd48 	bl	80025f8 <HAL_TIM_IC_Start_DMA>
	  HAL_TIM_OC_Stop(&htim1, TIM_CHANNEL_1);
 8000b68:	2100      	movs	r1, #0
 8000b6a:	486c      	ldr	r0, [pc, #432]	; (8000d1c <TIM4_IRQHandler+0x1ec>)
 8000b6c:	f001 fc88 	bl	8002480 <HAL_TIM_OC_Stop>
	  HAL_TIM_OC_Stop(&htim1, TIM_CHANNEL_2);
 8000b70:	2104      	movs	r1, #4
 8000b72:	486a      	ldr	r0, [pc, #424]	; (8000d1c <TIM4_IRQHandler+0x1ec>)
 8000b74:	f001 fc84 	bl	8002480 <HAL_TIM_OC_Stop>
	  HAL_TIM_OC_Stop(&htim1, TIM_CHANNEL_3);
 8000b78:	2108      	movs	r1, #8
 8000b7a:	4868      	ldr	r0, [pc, #416]	; (8000d1c <TIM4_IRQHandler+0x1ec>)
 8000b7c:	f001 fc80 	bl	8002480 <HAL_TIM_OC_Stop>
	  HAL_TIM_OC_Stop(&htim1, TIM_CHANNEL_4);
 8000b80:	210c      	movs	r1, #12
 8000b82:	4866      	ldr	r0, [pc, #408]	; (8000d1c <TIM4_IRQHandler+0x1ec>)
 8000b84:	f001 fc7c 	bl	8002480 <HAL_TIM_OC_Stop>

	  /* Set all timer channels for output */
	  GPIOA->CRH &= ~(GPIO_CRH_CNF8 | GPIO_CRH_MODE8
 8000b88:	4b5e      	ldr	r3, [pc, #376]	; (8000d04 <TIM4_IRQHandler+0x1d4>)
 8000b8a:	685b      	ldr	r3, [r3, #4]
 8000b8c:	4a5d      	ldr	r2, [pc, #372]	; (8000d04 <TIM4_IRQHandler+0x1d4>)
 8000b8e:	0c1b      	lsrs	r3, r3, #16
 8000b90:	041b      	lsls	r3, r3, #16
 8000b92:	6053      	str	r3, [r2, #4]
			  | GPIO_CRH_CNF9 | GPIO_CRH_MODE9
			  | GPIO_CRH_CNF10 | GPIO_CRH_MODE10
			  | GPIO_CRH_CNF11 | GPIO_CRH_MODE11);
	  GPIOA->CRH |= (GPIO_CRH_CNF8_1 | GPIO_CRH_MODE8_1
 8000b94:	4b5b      	ldr	r3, [pc, #364]	; (8000d04 <TIM4_IRQHandler+0x1d4>)
 8000b96:	685b      	ldr	r3, [r3, #4]
 8000b98:	4a5a      	ldr	r2, [pc, #360]	; (8000d04 <TIM4_IRQHandler+0x1d4>)
 8000b9a:	f443 432a 	orr.w	r3, r3, #43520	; 0xaa00
 8000b9e:	f043 03aa 	orr.w	r3, r3, #170	; 0xaa
 8000ba2:	6053      	str	r3, [r2, #4]
			  | GPIO_CRH_CNF9_1 | GPIO_CRH_MODE9_1
			  | GPIO_CRH_CNF10_1 | GPIO_CRH_MODE10_1
			  | GPIO_CRH_CNF11_1 | GPIO_CRH_MODE11_1);

	  switch (currentMode++) {
 8000ba4:	4b5e      	ldr	r3, [pc, #376]	; (8000d20 <TIM4_IRQHandler+0x1f0>)
 8000ba6:	881b      	ldrh	r3, [r3, #0]
 8000ba8:	1c5a      	adds	r2, r3, #1
 8000baa:	b291      	uxth	r1, r2
 8000bac:	4a5c      	ldr	r2, [pc, #368]	; (8000d20 <TIM4_IRQHandler+0x1f0>)
 8000bae:	8011      	strh	r1, [r2, #0]
 8000bb0:	2b08      	cmp	r3, #8
 8000bb2:	f200 80a1 	bhi.w	8000cf8 <TIM4_IRQHandler+0x1c8>
 8000bb6:	a201      	add	r2, pc, #4	; (adr r2, 8000bbc <TIM4_IRQHandler+0x8c>)
 8000bb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000bbc:	08000be1 	.word	0x08000be1
 8000bc0:	08000c03 	.word	0x08000c03
 8000bc4:	08000c25 	.word	0x08000c25
 8000bc8:	08000c47 	.word	0x08000c47
 8000bcc:	08000c69 	.word	0x08000c69
 8000bd0:	08000c8b 	.word	0x08000c8b
 8000bd4:	08000cad 	.word	0x08000cad
 8000bd8:	08000ccf 	.word	0x08000ccf
 8000bdc:	08000cf1 	.word	0x08000cf1
		  case 0: { // Z1 (transmit) > Z2 (receive)
			  GPIOA->CRH &= ~(GPIO_CRH_CNF9 | GPIO_CRH_MODE9 ); // Set Z2 port to input mode
 8000be0:	4b48      	ldr	r3, [pc, #288]	; (8000d04 <TIM4_IRQHandler+0x1d4>)
 8000be2:	685b      	ldr	r3, [r3, #4]
 8000be4:	4a47      	ldr	r2, [pc, #284]	; (8000d04 <TIM4_IRQHandler+0x1d4>)
 8000be6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8000bea:	6053      	str	r3, [r2, #4]
			  GPIOB->ODR |= (1 << Z2Receive); // Turn on multiplexer for input Z2 channel.
 8000bec:	4b48      	ldr	r3, [pc, #288]	; (8000d10 <TIM4_IRQHandler+0x1e0>)
 8000bee:	68db      	ldr	r3, [r3, #12]
 8000bf0:	4a47      	ldr	r2, [pc, #284]	; (8000d10 <TIM4_IRQHandler+0x1e0>)
 8000bf2:	f043 0304 	orr.w	r3, r3, #4
 8000bf6:	60d3      	str	r3, [r2, #12]
			  HAL_TIM_OC_Start(&htim1, TIM_CHANNEL_1);
 8000bf8:	2100      	movs	r1, #0
 8000bfa:	4848      	ldr	r0, [pc, #288]	; (8000d1c <TIM4_IRQHandler+0x1ec>)
 8000bfc:	f001 fb9e 	bl	800233c <HAL_TIM_OC_Start>
			  break;
 8000c00:	e07a      	b.n	8000cf8 <TIM4_IRQHandler+0x1c8>
		  }
		  case 1: { // Z2 (transmit) > Z1 (receive)
			  GPIOA->CRH &= ~(GPIO_CRH_CNF8 | GPIO_CRH_MODE8 ); // Set Z1 port to input mode
 8000c02:	4b40      	ldr	r3, [pc, #256]	; (8000d04 <TIM4_IRQHandler+0x1d4>)
 8000c04:	685b      	ldr	r3, [r3, #4]
 8000c06:	4a3f      	ldr	r2, [pc, #252]	; (8000d04 <TIM4_IRQHandler+0x1d4>)
 8000c08:	f023 030f 	bic.w	r3, r3, #15
 8000c0c:	6053      	str	r3, [r2, #4]
			  GPIOB->ODR |= (1 << Z1Receive); // Turn on multiplexer for input Z1 channel.
 8000c0e:	4b40      	ldr	r3, [pc, #256]	; (8000d10 <TIM4_IRQHandler+0x1e0>)
 8000c10:	68db      	ldr	r3, [r3, #12]
 8000c12:	4a3f      	ldr	r2, [pc, #252]	; (8000d10 <TIM4_IRQHandler+0x1e0>)
 8000c14:	f043 0302 	orr.w	r3, r3, #2
 8000c18:	60d3      	str	r3, [r2, #12]
			  HAL_TIM_OC_Start(&htim1, TIM_CHANNEL_2);
 8000c1a:	2104      	movs	r1, #4
 8000c1c:	483f      	ldr	r0, [pc, #252]	; (8000d1c <TIM4_IRQHandler+0x1ec>)
 8000c1e:	f001 fb8d 	bl	800233c <HAL_TIM_OC_Start>
			  break;
 8000c22:	e069      	b.n	8000cf8 <TIM4_IRQHandler+0x1c8>
		  }
		  case 2: { // Z2 (transmit) > Z3 (receive)
			  GPIOA->CRH &= ~(GPIO_CRH_CNF10 | GPIO_CRH_MODE10 ); // Set Z3 port to input mode
 8000c24:	4b37      	ldr	r3, [pc, #220]	; (8000d04 <TIM4_IRQHandler+0x1d4>)
 8000c26:	685b      	ldr	r3, [r3, #4]
 8000c28:	4a36      	ldr	r2, [pc, #216]	; (8000d04 <TIM4_IRQHandler+0x1d4>)
 8000c2a:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8000c2e:	6053      	str	r3, [r2, #4]
			  GPIOB->ODR |= (1 << Z3Receive); // Turn on multiplexer for input Z3 channel.
 8000c30:	4b37      	ldr	r3, [pc, #220]	; (8000d10 <TIM4_IRQHandler+0x1e0>)
 8000c32:	68db      	ldr	r3, [r3, #12]
 8000c34:	4a36      	ldr	r2, [pc, #216]	; (8000d10 <TIM4_IRQHandler+0x1e0>)
 8000c36:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000c3a:	60d3      	str	r3, [r2, #12]
			  HAL_TIM_OC_Start(&htim1, TIM_CHANNEL_2);
 8000c3c:	2104      	movs	r1, #4
 8000c3e:	4837      	ldr	r0, [pc, #220]	; (8000d1c <TIM4_IRQHandler+0x1ec>)
 8000c40:	f001 fb7c 	bl	800233c <HAL_TIM_OC_Start>
			  break;
 8000c44:	e058      	b.n	8000cf8 <TIM4_IRQHandler+0x1c8>
		  }
		  case 3: { // Z3 (transmit) > Z2 (receive)
			  GPIOA->CRH &= ~(GPIO_CRH_CNF9 | GPIO_CRH_MODE9 ); // Set Z2 port to input mode
 8000c46:	4b2f      	ldr	r3, [pc, #188]	; (8000d04 <TIM4_IRQHandler+0x1d4>)
 8000c48:	685b      	ldr	r3, [r3, #4]
 8000c4a:	4a2e      	ldr	r2, [pc, #184]	; (8000d04 <TIM4_IRQHandler+0x1d4>)
 8000c4c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8000c50:	6053      	str	r3, [r2, #4]
			  GPIOB->ODR |= (1 << Z2Receive); // Turn on multiplexer for input Z2 channel.
 8000c52:	4b2f      	ldr	r3, [pc, #188]	; (8000d10 <TIM4_IRQHandler+0x1e0>)
 8000c54:	68db      	ldr	r3, [r3, #12]
 8000c56:	4a2e      	ldr	r2, [pc, #184]	; (8000d10 <TIM4_IRQHandler+0x1e0>)
 8000c58:	f043 0304 	orr.w	r3, r3, #4
 8000c5c:	60d3      	str	r3, [r2, #12]
			  HAL_TIM_OC_Start(&htim1, TIM_CHANNEL_3);
 8000c5e:	2108      	movs	r1, #8
 8000c60:	482e      	ldr	r0, [pc, #184]	; (8000d1c <TIM4_IRQHandler+0x1ec>)
 8000c62:	f001 fb6b 	bl	800233c <HAL_TIM_OC_Start>
			  break;
 8000c66:	e047      	b.n	8000cf8 <TIM4_IRQHandler+0x1c8>
		  }
		  case 4: { // Z3 (transmit) > Z4 (receive)
			  GPIOA->CRH &= ~(GPIO_CRH_CNF11 | GPIO_CRH_MODE11 ); // Set Z4 port to input mode
 8000c68:	4b26      	ldr	r3, [pc, #152]	; (8000d04 <TIM4_IRQHandler+0x1d4>)
 8000c6a:	685b      	ldr	r3, [r3, #4]
 8000c6c:	4a25      	ldr	r2, [pc, #148]	; (8000d04 <TIM4_IRQHandler+0x1d4>)
 8000c6e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8000c72:	6053      	str	r3, [r2, #4]
			  GPIOB->ODR |= (uint16_t) (1 << Z4Receive); // Turn on multiplexer for input Z4 channel.
 8000c74:	4b26      	ldr	r3, [pc, #152]	; (8000d10 <TIM4_IRQHandler+0x1e0>)
 8000c76:	68db      	ldr	r3, [r3, #12]
 8000c78:	4a25      	ldr	r2, [pc, #148]	; (8000d10 <TIM4_IRQHandler+0x1e0>)
 8000c7a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000c7e:	60d3      	str	r3, [r2, #12]
			  HAL_TIM_OC_Start(&htim1, TIM_CHANNEL_3);
 8000c80:	2108      	movs	r1, #8
 8000c82:	4826      	ldr	r0, [pc, #152]	; (8000d1c <TIM4_IRQHandler+0x1ec>)
 8000c84:	f001 fb5a 	bl	800233c <HAL_TIM_OC_Start>
			  break;
 8000c88:	e036      	b.n	8000cf8 <TIM4_IRQHandler+0x1c8>
		  }
		  case 5: { // Z4 (transmit) > Z3 (receive)
			  GPIOA->CRH &= ~(GPIO_CRH_CNF10 | GPIO_CRH_MODE10 ); // Set Z3 port to input mode
 8000c8a:	4b1e      	ldr	r3, [pc, #120]	; (8000d04 <TIM4_IRQHandler+0x1d4>)
 8000c8c:	685b      	ldr	r3, [r3, #4]
 8000c8e:	4a1d      	ldr	r2, [pc, #116]	; (8000d04 <TIM4_IRQHandler+0x1d4>)
 8000c90:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8000c94:	6053      	str	r3, [r2, #4]
			  GPIOB->ODR |= (1 << Z3Receive); // Turn on multiplexer for input Z4 channel.
 8000c96:	4b1e      	ldr	r3, [pc, #120]	; (8000d10 <TIM4_IRQHandler+0x1e0>)
 8000c98:	68db      	ldr	r3, [r3, #12]
 8000c9a:	4a1d      	ldr	r2, [pc, #116]	; (8000d10 <TIM4_IRQHandler+0x1e0>)
 8000c9c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000ca0:	60d3      	str	r3, [r2, #12]
			  HAL_TIM_OC_Start(&htim1, TIM_CHANNEL_4);
 8000ca2:	210c      	movs	r1, #12
 8000ca4:	481d      	ldr	r0, [pc, #116]	; (8000d1c <TIM4_IRQHandler+0x1ec>)
 8000ca6:	f001 fb49 	bl	800233c <HAL_TIM_OC_Start>
			  break;
 8000caa:	e025      	b.n	8000cf8 <TIM4_IRQHandler+0x1c8>
		  }
		  case 6: { // Z4 (transmit) > Z1 (receive)
			  GPIOA->CRH &= ~(GPIO_CRH_CNF8 | GPIO_CRH_MODE8 ); // Set Z1 port to input mode
 8000cac:	4b15      	ldr	r3, [pc, #84]	; (8000d04 <TIM4_IRQHandler+0x1d4>)
 8000cae:	685b      	ldr	r3, [r3, #4]
 8000cb0:	4a14      	ldr	r2, [pc, #80]	; (8000d04 <TIM4_IRQHandler+0x1d4>)
 8000cb2:	f023 030f 	bic.w	r3, r3, #15
 8000cb6:	6053      	str	r3, [r2, #4]
			  GPIOB->ODR |= (1 << Z1Receive); // Turn on multiplexer for input Z4 channel.
 8000cb8:	4b15      	ldr	r3, [pc, #84]	; (8000d10 <TIM4_IRQHandler+0x1e0>)
 8000cba:	68db      	ldr	r3, [r3, #12]
 8000cbc:	4a14      	ldr	r2, [pc, #80]	; (8000d10 <TIM4_IRQHandler+0x1e0>)
 8000cbe:	f043 0302 	orr.w	r3, r3, #2
 8000cc2:	60d3      	str	r3, [r2, #12]
			  HAL_TIM_OC_Start(&htim1, TIM_CHANNEL_4);
 8000cc4:	210c      	movs	r1, #12
 8000cc6:	4815      	ldr	r0, [pc, #84]	; (8000d1c <TIM4_IRQHandler+0x1ec>)
 8000cc8:	f001 fb38 	bl	800233c <HAL_TIM_OC_Start>
			  break;
 8000ccc:	e014      	b.n	8000cf8 <TIM4_IRQHandler+0x1c8>
		  }
		  case 7: { // Z1 (transmit) > Z4 (receive)
			  GPIOA->CRH &= ~(GPIO_CRH_CNF11 | GPIO_CRH_MODE11 ); // Set Z4 port to input mode
 8000cce:	4b0d      	ldr	r3, [pc, #52]	; (8000d04 <TIM4_IRQHandler+0x1d4>)
 8000cd0:	685b      	ldr	r3, [r3, #4]
 8000cd2:	4a0c      	ldr	r2, [pc, #48]	; (8000d04 <TIM4_IRQHandler+0x1d4>)
 8000cd4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8000cd8:	6053      	str	r3, [r2, #4]
			  GPIOB->ODR |= (1 << Z4Receive); // Turn on multiplexer for input Z4 channel.
 8000cda:	4b0d      	ldr	r3, [pc, #52]	; (8000d10 <TIM4_IRQHandler+0x1e0>)
 8000cdc:	68db      	ldr	r3, [r3, #12]
 8000cde:	4a0c      	ldr	r2, [pc, #48]	; (8000d10 <TIM4_IRQHandler+0x1e0>)
 8000ce0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000ce4:	60d3      	str	r3, [r2, #12]
			  HAL_TIM_OC_Start(&htim1, TIM_CHANNEL_1);
 8000ce6:	2100      	movs	r1, #0
 8000ce8:	480c      	ldr	r0, [pc, #48]	; (8000d1c <TIM4_IRQHandler+0x1ec>)
 8000cea:	f001 fb27 	bl	800233c <HAL_TIM_OC_Start>
			  break;
 8000cee:	e003      	b.n	8000cf8 <TIM4_IRQHandler+0x1c8>
		  }
		  case 8: { // All data complite.
			  currentMode = 0;
 8000cf0:	4b0b      	ldr	r3, [pc, #44]	; (8000d20 <TIM4_IRQHandler+0x1f0>)
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	801a      	strh	r2, [r3, #0]
			  break;
 8000cf6:	bf00      	nop
		  }
	  }

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8000cf8:	480a      	ldr	r0, [pc, #40]	; (8000d24 <TIM4_IRQHandler+0x1f4>)
 8000cfa:	f001 ff1a 	bl	8002b32 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8000cfe:	bf00      	nop
 8000d00:	bd80      	pop	{r7, pc}
 8000d02:	bf00      	nop
 8000d04:	40010800 	.word	0x40010800
 8000d08:	200000fe 	.word	0x200000fe
 8000d0c:	20000232 	.word	0x20000232
 8000d10:	40010c00 	.word	0x40010c00
 8000d14:	20000198 	.word	0x20000198
 8000d18:	20000234 	.word	0x20000234
 8000d1c:	200001e4 	.word	0x200001e4
 8000d20:	2000022e 	.word	0x2000022e
 8000d24:	20000144 	.word	0x20000144

08000d28 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	b086      	sub	sp, #24
 8000d2c:	af00      	add	r7, sp, #0
 8000d2e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000d30:	4a14      	ldr	r2, [pc, #80]	; (8000d84 <_sbrk+0x5c>)
 8000d32:	4b15      	ldr	r3, [pc, #84]	; (8000d88 <_sbrk+0x60>)
 8000d34:	1ad3      	subs	r3, r2, r3
 8000d36:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000d38:	697b      	ldr	r3, [r7, #20]
 8000d3a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000d3c:	4b13      	ldr	r3, [pc, #76]	; (8000d8c <_sbrk+0x64>)
 8000d3e:	681b      	ldr	r3, [r3, #0]
 8000d40:	2b00      	cmp	r3, #0
 8000d42:	d102      	bne.n	8000d4a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000d44:	4b11      	ldr	r3, [pc, #68]	; (8000d8c <_sbrk+0x64>)
 8000d46:	4a12      	ldr	r2, [pc, #72]	; (8000d90 <_sbrk+0x68>)
 8000d48:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000d4a:	4b10      	ldr	r3, [pc, #64]	; (8000d8c <_sbrk+0x64>)
 8000d4c:	681a      	ldr	r2, [r3, #0]
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	4413      	add	r3, r2
 8000d52:	693a      	ldr	r2, [r7, #16]
 8000d54:	429a      	cmp	r2, r3
 8000d56:	d207      	bcs.n	8000d68 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000d58:	f003 f9be 	bl	80040d8 <__errno>
 8000d5c:	4603      	mov	r3, r0
 8000d5e:	220c      	movs	r2, #12
 8000d60:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000d62:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000d66:	e009      	b.n	8000d7c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000d68:	4b08      	ldr	r3, [pc, #32]	; (8000d8c <_sbrk+0x64>)
 8000d6a:	681b      	ldr	r3, [r3, #0]
 8000d6c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000d6e:	4b07      	ldr	r3, [pc, #28]	; (8000d8c <_sbrk+0x64>)
 8000d70:	681a      	ldr	r2, [r3, #0]
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	4413      	add	r3, r2
 8000d76:	4a05      	ldr	r2, [pc, #20]	; (8000d8c <_sbrk+0x64>)
 8000d78:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000d7a:	68fb      	ldr	r3, [r7, #12]
}
 8000d7c:	4618      	mov	r0, r3
 8000d7e:	3718      	adds	r7, #24
 8000d80:	46bd      	mov	sp, r7
 8000d82:	bd80      	pop	{r7, pc}
 8000d84:	20005000 	.word	0x20005000
 8000d88:	00000400 	.word	0x00000400
 8000d8c:	200000f0 	.word	0x200000f0
 8000d90:	20000290 	.word	0x20000290

08000d94 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000d94:	b480      	push	{r7}
 8000d96:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d98:	bf00      	nop
 8000d9a:	46bd      	mov	sp, r7
 8000d9c:	bc80      	pop	{r7}
 8000d9e:	4770      	bx	lr

08000da0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000da0:	480c      	ldr	r0, [pc, #48]	; (8000dd4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000da2:	490d      	ldr	r1, [pc, #52]	; (8000dd8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000da4:	4a0d      	ldr	r2, [pc, #52]	; (8000ddc <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000da6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000da8:	e002      	b.n	8000db0 <LoopCopyDataInit>

08000daa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000daa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000dac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000dae:	3304      	adds	r3, #4

08000db0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000db0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000db2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000db4:	d3f9      	bcc.n	8000daa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000db6:	4a0a      	ldr	r2, [pc, #40]	; (8000de0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000db8:	4c0a      	ldr	r4, [pc, #40]	; (8000de4 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000dba:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000dbc:	e001      	b.n	8000dc2 <LoopFillZerobss>

08000dbe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000dbe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000dc0:	3204      	adds	r2, #4

08000dc2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000dc2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000dc4:	d3fb      	bcc.n	8000dbe <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000dc6:	f7ff ffe5 	bl	8000d94 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000dca:	f003 f98b 	bl	80040e4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000dce:	f7ff f9bd 	bl	800014c <main>
  bx lr
 8000dd2:	4770      	bx	lr
  ldr r0, =_sdata
 8000dd4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000dd8:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000ddc:	08004a38 	.word	0x08004a38
  ldr r2, =_sbss
 8000de0:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000de4:	20000290 	.word	0x20000290

08000de8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000de8:	e7fe      	b.n	8000de8 <ADC1_2_IRQHandler>
	...

08000dec <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000dec:	b580      	push	{r7, lr}
 8000dee:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000df0:	4b08      	ldr	r3, [pc, #32]	; (8000e14 <HAL_Init+0x28>)
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	4a07      	ldr	r2, [pc, #28]	; (8000e14 <HAL_Init+0x28>)
 8000df6:	f043 0310 	orr.w	r3, r3, #16
 8000dfa:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000dfc:	2003      	movs	r0, #3
 8000dfe:	f000 f947 	bl	8001090 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e02:	2000      	movs	r0, #0
 8000e04:	f000 f808 	bl	8000e18 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e08:	f7ff fc90 	bl	800072c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e0c:	2300      	movs	r3, #0
}
 8000e0e:	4618      	mov	r0, r3
 8000e10:	bd80      	pop	{r7, pc}
 8000e12:	bf00      	nop
 8000e14:	40022000 	.word	0x40022000

08000e18 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	b082      	sub	sp, #8
 8000e1c:	af00      	add	r7, sp, #0
 8000e1e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000e20:	4b12      	ldr	r3, [pc, #72]	; (8000e6c <HAL_InitTick+0x54>)
 8000e22:	681a      	ldr	r2, [r3, #0]
 8000e24:	4b12      	ldr	r3, [pc, #72]	; (8000e70 <HAL_InitTick+0x58>)
 8000e26:	781b      	ldrb	r3, [r3, #0]
 8000e28:	4619      	mov	r1, r3
 8000e2a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e2e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e32:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e36:	4618      	mov	r0, r3
 8000e38:	f000 f95f 	bl	80010fa <HAL_SYSTICK_Config>
 8000e3c:	4603      	mov	r3, r0
 8000e3e:	2b00      	cmp	r3, #0
 8000e40:	d001      	beq.n	8000e46 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000e42:	2301      	movs	r3, #1
 8000e44:	e00e      	b.n	8000e64 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	2b0f      	cmp	r3, #15
 8000e4a:	d80a      	bhi.n	8000e62 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e4c:	2200      	movs	r2, #0
 8000e4e:	6879      	ldr	r1, [r7, #4]
 8000e50:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000e54:	f000 f927 	bl	80010a6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000e58:	4a06      	ldr	r2, [pc, #24]	; (8000e74 <HAL_InitTick+0x5c>)
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000e5e:	2300      	movs	r3, #0
 8000e60:	e000      	b.n	8000e64 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000e62:	2301      	movs	r3, #1
}
 8000e64:	4618      	mov	r0, r3
 8000e66:	3708      	adds	r7, #8
 8000e68:	46bd      	mov	sp, r7
 8000e6a:	bd80      	pop	{r7, pc}
 8000e6c:	20000000 	.word	0x20000000
 8000e70:	20000008 	.word	0x20000008
 8000e74:	20000004 	.word	0x20000004

08000e78 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e78:	b480      	push	{r7}
 8000e7a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e7c:	4b05      	ldr	r3, [pc, #20]	; (8000e94 <HAL_IncTick+0x1c>)
 8000e7e:	781b      	ldrb	r3, [r3, #0]
 8000e80:	461a      	mov	r2, r3
 8000e82:	4b05      	ldr	r3, [pc, #20]	; (8000e98 <HAL_IncTick+0x20>)
 8000e84:	681b      	ldr	r3, [r3, #0]
 8000e86:	4413      	add	r3, r2
 8000e88:	4a03      	ldr	r2, [pc, #12]	; (8000e98 <HAL_IncTick+0x20>)
 8000e8a:	6013      	str	r3, [r2, #0]
}
 8000e8c:	bf00      	nop
 8000e8e:	46bd      	mov	sp, r7
 8000e90:	bc80      	pop	{r7}
 8000e92:	4770      	bx	lr
 8000e94:	20000008 	.word	0x20000008
 8000e98:	2000027c 	.word	0x2000027c

08000e9c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e9c:	b480      	push	{r7}
 8000e9e:	af00      	add	r7, sp, #0
  return uwTick;
 8000ea0:	4b02      	ldr	r3, [pc, #8]	; (8000eac <HAL_GetTick+0x10>)
 8000ea2:	681b      	ldr	r3, [r3, #0]
}
 8000ea4:	4618      	mov	r0, r3
 8000ea6:	46bd      	mov	sp, r7
 8000ea8:	bc80      	pop	{r7}
 8000eaa:	4770      	bx	lr
 8000eac:	2000027c 	.word	0x2000027c

08000eb0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	b084      	sub	sp, #16
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000eb8:	f7ff fff0 	bl	8000e9c <HAL_GetTick>
 8000ebc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000ec2:	68fb      	ldr	r3, [r7, #12]
 8000ec4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000ec8:	d005      	beq.n	8000ed6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000eca:	4b0a      	ldr	r3, [pc, #40]	; (8000ef4 <HAL_Delay+0x44>)
 8000ecc:	781b      	ldrb	r3, [r3, #0]
 8000ece:	461a      	mov	r2, r3
 8000ed0:	68fb      	ldr	r3, [r7, #12]
 8000ed2:	4413      	add	r3, r2
 8000ed4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000ed6:	bf00      	nop
 8000ed8:	f7ff ffe0 	bl	8000e9c <HAL_GetTick>
 8000edc:	4602      	mov	r2, r0
 8000ede:	68bb      	ldr	r3, [r7, #8]
 8000ee0:	1ad3      	subs	r3, r2, r3
 8000ee2:	68fa      	ldr	r2, [r7, #12]
 8000ee4:	429a      	cmp	r2, r3
 8000ee6:	d8f7      	bhi.n	8000ed8 <HAL_Delay+0x28>
  {
  }
}
 8000ee8:	bf00      	nop
 8000eea:	bf00      	nop
 8000eec:	3710      	adds	r7, #16
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	bd80      	pop	{r7, pc}
 8000ef2:	bf00      	nop
 8000ef4:	20000008 	.word	0x20000008

08000ef8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ef8:	b480      	push	{r7}
 8000efa:	b085      	sub	sp, #20
 8000efc:	af00      	add	r7, sp, #0
 8000efe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	f003 0307 	and.w	r3, r3, #7
 8000f06:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f08:	4b0c      	ldr	r3, [pc, #48]	; (8000f3c <__NVIC_SetPriorityGrouping+0x44>)
 8000f0a:	68db      	ldr	r3, [r3, #12]
 8000f0c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f0e:	68ba      	ldr	r2, [r7, #8]
 8000f10:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000f14:	4013      	ands	r3, r2
 8000f16:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000f18:	68fb      	ldr	r3, [r7, #12]
 8000f1a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f1c:	68bb      	ldr	r3, [r7, #8]
 8000f1e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f20:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000f24:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f28:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f2a:	4a04      	ldr	r2, [pc, #16]	; (8000f3c <__NVIC_SetPriorityGrouping+0x44>)
 8000f2c:	68bb      	ldr	r3, [r7, #8]
 8000f2e:	60d3      	str	r3, [r2, #12]
}
 8000f30:	bf00      	nop
 8000f32:	3714      	adds	r7, #20
 8000f34:	46bd      	mov	sp, r7
 8000f36:	bc80      	pop	{r7}
 8000f38:	4770      	bx	lr
 8000f3a:	bf00      	nop
 8000f3c:	e000ed00 	.word	0xe000ed00

08000f40 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f40:	b480      	push	{r7}
 8000f42:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f44:	4b04      	ldr	r3, [pc, #16]	; (8000f58 <__NVIC_GetPriorityGrouping+0x18>)
 8000f46:	68db      	ldr	r3, [r3, #12]
 8000f48:	0a1b      	lsrs	r3, r3, #8
 8000f4a:	f003 0307 	and.w	r3, r3, #7
}
 8000f4e:	4618      	mov	r0, r3
 8000f50:	46bd      	mov	sp, r7
 8000f52:	bc80      	pop	{r7}
 8000f54:	4770      	bx	lr
 8000f56:	bf00      	nop
 8000f58:	e000ed00 	.word	0xe000ed00

08000f5c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f5c:	b480      	push	{r7}
 8000f5e:	b083      	sub	sp, #12
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	4603      	mov	r3, r0
 8000f64:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	db0b      	blt.n	8000f86 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f6e:	79fb      	ldrb	r3, [r7, #7]
 8000f70:	f003 021f 	and.w	r2, r3, #31
 8000f74:	4906      	ldr	r1, [pc, #24]	; (8000f90 <__NVIC_EnableIRQ+0x34>)
 8000f76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f7a:	095b      	lsrs	r3, r3, #5
 8000f7c:	2001      	movs	r0, #1
 8000f7e:	fa00 f202 	lsl.w	r2, r0, r2
 8000f82:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000f86:	bf00      	nop
 8000f88:	370c      	adds	r7, #12
 8000f8a:	46bd      	mov	sp, r7
 8000f8c:	bc80      	pop	{r7}
 8000f8e:	4770      	bx	lr
 8000f90:	e000e100 	.word	0xe000e100

08000f94 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f94:	b480      	push	{r7}
 8000f96:	b083      	sub	sp, #12
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	4603      	mov	r3, r0
 8000f9c:	6039      	str	r1, [r7, #0]
 8000f9e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fa0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fa4:	2b00      	cmp	r3, #0
 8000fa6:	db0a      	blt.n	8000fbe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fa8:	683b      	ldr	r3, [r7, #0]
 8000faa:	b2da      	uxtb	r2, r3
 8000fac:	490c      	ldr	r1, [pc, #48]	; (8000fe0 <__NVIC_SetPriority+0x4c>)
 8000fae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fb2:	0112      	lsls	r2, r2, #4
 8000fb4:	b2d2      	uxtb	r2, r2
 8000fb6:	440b      	add	r3, r1
 8000fb8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000fbc:	e00a      	b.n	8000fd4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fbe:	683b      	ldr	r3, [r7, #0]
 8000fc0:	b2da      	uxtb	r2, r3
 8000fc2:	4908      	ldr	r1, [pc, #32]	; (8000fe4 <__NVIC_SetPriority+0x50>)
 8000fc4:	79fb      	ldrb	r3, [r7, #7]
 8000fc6:	f003 030f 	and.w	r3, r3, #15
 8000fca:	3b04      	subs	r3, #4
 8000fcc:	0112      	lsls	r2, r2, #4
 8000fce:	b2d2      	uxtb	r2, r2
 8000fd0:	440b      	add	r3, r1
 8000fd2:	761a      	strb	r2, [r3, #24]
}
 8000fd4:	bf00      	nop
 8000fd6:	370c      	adds	r7, #12
 8000fd8:	46bd      	mov	sp, r7
 8000fda:	bc80      	pop	{r7}
 8000fdc:	4770      	bx	lr
 8000fde:	bf00      	nop
 8000fe0:	e000e100 	.word	0xe000e100
 8000fe4:	e000ed00 	.word	0xe000ed00

08000fe8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000fe8:	b480      	push	{r7}
 8000fea:	b089      	sub	sp, #36	; 0x24
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	60f8      	str	r0, [r7, #12]
 8000ff0:	60b9      	str	r1, [r7, #8]
 8000ff2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ff4:	68fb      	ldr	r3, [r7, #12]
 8000ff6:	f003 0307 	and.w	r3, r3, #7
 8000ffa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ffc:	69fb      	ldr	r3, [r7, #28]
 8000ffe:	f1c3 0307 	rsb	r3, r3, #7
 8001002:	2b04      	cmp	r3, #4
 8001004:	bf28      	it	cs
 8001006:	2304      	movcs	r3, #4
 8001008:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800100a:	69fb      	ldr	r3, [r7, #28]
 800100c:	3304      	adds	r3, #4
 800100e:	2b06      	cmp	r3, #6
 8001010:	d902      	bls.n	8001018 <NVIC_EncodePriority+0x30>
 8001012:	69fb      	ldr	r3, [r7, #28]
 8001014:	3b03      	subs	r3, #3
 8001016:	e000      	b.n	800101a <NVIC_EncodePriority+0x32>
 8001018:	2300      	movs	r3, #0
 800101a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800101c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001020:	69bb      	ldr	r3, [r7, #24]
 8001022:	fa02 f303 	lsl.w	r3, r2, r3
 8001026:	43da      	mvns	r2, r3
 8001028:	68bb      	ldr	r3, [r7, #8]
 800102a:	401a      	ands	r2, r3
 800102c:	697b      	ldr	r3, [r7, #20]
 800102e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001030:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001034:	697b      	ldr	r3, [r7, #20]
 8001036:	fa01 f303 	lsl.w	r3, r1, r3
 800103a:	43d9      	mvns	r1, r3
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001040:	4313      	orrs	r3, r2
         );
}
 8001042:	4618      	mov	r0, r3
 8001044:	3724      	adds	r7, #36	; 0x24
 8001046:	46bd      	mov	sp, r7
 8001048:	bc80      	pop	{r7}
 800104a:	4770      	bx	lr

0800104c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800104c:	b580      	push	{r7, lr}
 800104e:	b082      	sub	sp, #8
 8001050:	af00      	add	r7, sp, #0
 8001052:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	3b01      	subs	r3, #1
 8001058:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800105c:	d301      	bcc.n	8001062 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800105e:	2301      	movs	r3, #1
 8001060:	e00f      	b.n	8001082 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001062:	4a0a      	ldr	r2, [pc, #40]	; (800108c <SysTick_Config+0x40>)
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	3b01      	subs	r3, #1
 8001068:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800106a:	210f      	movs	r1, #15
 800106c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001070:	f7ff ff90 	bl	8000f94 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001074:	4b05      	ldr	r3, [pc, #20]	; (800108c <SysTick_Config+0x40>)
 8001076:	2200      	movs	r2, #0
 8001078:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800107a:	4b04      	ldr	r3, [pc, #16]	; (800108c <SysTick_Config+0x40>)
 800107c:	2207      	movs	r2, #7
 800107e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001080:	2300      	movs	r3, #0
}
 8001082:	4618      	mov	r0, r3
 8001084:	3708      	adds	r7, #8
 8001086:	46bd      	mov	sp, r7
 8001088:	bd80      	pop	{r7, pc}
 800108a:	bf00      	nop
 800108c:	e000e010 	.word	0xe000e010

08001090 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001090:	b580      	push	{r7, lr}
 8001092:	b082      	sub	sp, #8
 8001094:	af00      	add	r7, sp, #0
 8001096:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001098:	6878      	ldr	r0, [r7, #4]
 800109a:	f7ff ff2d 	bl	8000ef8 <__NVIC_SetPriorityGrouping>
}
 800109e:	bf00      	nop
 80010a0:	3708      	adds	r7, #8
 80010a2:	46bd      	mov	sp, r7
 80010a4:	bd80      	pop	{r7, pc}

080010a6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80010a6:	b580      	push	{r7, lr}
 80010a8:	b086      	sub	sp, #24
 80010aa:	af00      	add	r7, sp, #0
 80010ac:	4603      	mov	r3, r0
 80010ae:	60b9      	str	r1, [r7, #8]
 80010b0:	607a      	str	r2, [r7, #4]
 80010b2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80010b4:	2300      	movs	r3, #0
 80010b6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80010b8:	f7ff ff42 	bl	8000f40 <__NVIC_GetPriorityGrouping>
 80010bc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80010be:	687a      	ldr	r2, [r7, #4]
 80010c0:	68b9      	ldr	r1, [r7, #8]
 80010c2:	6978      	ldr	r0, [r7, #20]
 80010c4:	f7ff ff90 	bl	8000fe8 <NVIC_EncodePriority>
 80010c8:	4602      	mov	r2, r0
 80010ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80010ce:	4611      	mov	r1, r2
 80010d0:	4618      	mov	r0, r3
 80010d2:	f7ff ff5f 	bl	8000f94 <__NVIC_SetPriority>
}
 80010d6:	bf00      	nop
 80010d8:	3718      	adds	r7, #24
 80010da:	46bd      	mov	sp, r7
 80010dc:	bd80      	pop	{r7, pc}

080010de <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010de:	b580      	push	{r7, lr}
 80010e0:	b082      	sub	sp, #8
 80010e2:	af00      	add	r7, sp, #0
 80010e4:	4603      	mov	r3, r0
 80010e6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80010e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010ec:	4618      	mov	r0, r3
 80010ee:	f7ff ff35 	bl	8000f5c <__NVIC_EnableIRQ>
}
 80010f2:	bf00      	nop
 80010f4:	3708      	adds	r7, #8
 80010f6:	46bd      	mov	sp, r7
 80010f8:	bd80      	pop	{r7, pc}

080010fa <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80010fa:	b580      	push	{r7, lr}
 80010fc:	b082      	sub	sp, #8
 80010fe:	af00      	add	r7, sp, #0
 8001100:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001102:	6878      	ldr	r0, [r7, #4]
 8001104:	f7ff ffa2 	bl	800104c <SysTick_Config>
 8001108:	4603      	mov	r3, r0
}
 800110a:	4618      	mov	r0, r3
 800110c:	3708      	adds	r7, #8
 800110e:	46bd      	mov	sp, r7
 8001110:	bd80      	pop	{r7, pc}
	...

08001114 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001114:	b480      	push	{r7}
 8001116:	b085      	sub	sp, #20
 8001118:	af00      	add	r7, sp, #0
 800111a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800111c:	2300      	movs	r3, #0
 800111e:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	2b00      	cmp	r3, #0
 8001124:	d101      	bne.n	800112a <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8001126:	2301      	movs	r3, #1
 8001128:	e043      	b.n	80011b2 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	461a      	mov	r2, r3
 8001130:	4b22      	ldr	r3, [pc, #136]	; (80011bc <HAL_DMA_Init+0xa8>)
 8001132:	4413      	add	r3, r2
 8001134:	4a22      	ldr	r2, [pc, #136]	; (80011c0 <HAL_DMA_Init+0xac>)
 8001136:	fba2 2303 	umull	r2, r3, r2, r3
 800113a:	091b      	lsrs	r3, r3, #4
 800113c:	009a      	lsls	r2, r3, #2
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	4a1f      	ldr	r2, [pc, #124]	; (80011c4 <HAL_DMA_Init+0xb0>)
 8001146:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	2202      	movs	r2, #2
 800114c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001158:	68fb      	ldr	r3, [r7, #12]
 800115a:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 800115e:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8001162:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 800116c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	68db      	ldr	r3, [r3, #12]
 8001172:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001178:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	695b      	ldr	r3, [r3, #20]
 800117e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001184:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	69db      	ldr	r3, [r3, #28]
 800118a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800118c:	68fa      	ldr	r2, [r7, #12]
 800118e:	4313      	orrs	r3, r2
 8001190:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	68fa      	ldr	r2, [r7, #12]
 8001198:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	2200      	movs	r2, #0
 800119e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	2201      	movs	r2, #1
 80011a4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	2200      	movs	r2, #0
 80011ac:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 80011b0:	2300      	movs	r3, #0
}
 80011b2:	4618      	mov	r0, r3
 80011b4:	3714      	adds	r7, #20
 80011b6:	46bd      	mov	sp, r7
 80011b8:	bc80      	pop	{r7}
 80011ba:	4770      	bx	lr
 80011bc:	bffdfff8 	.word	0xbffdfff8
 80011c0:	cccccccd 	.word	0xcccccccd
 80011c4:	40020000 	.word	0x40020000

080011c8 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80011c8:	b580      	push	{r7, lr}
 80011ca:	b086      	sub	sp, #24
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	60f8      	str	r0, [r7, #12]
 80011d0:	60b9      	str	r1, [r7, #8]
 80011d2:	607a      	str	r2, [r7, #4]
 80011d4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80011d6:	2300      	movs	r3, #0
 80011d8:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80011da:	68fb      	ldr	r3, [r7, #12]
 80011dc:	f893 3020 	ldrb.w	r3, [r3, #32]
 80011e0:	2b01      	cmp	r3, #1
 80011e2:	d101      	bne.n	80011e8 <HAL_DMA_Start_IT+0x20>
 80011e4:	2302      	movs	r3, #2
 80011e6:	e04a      	b.n	800127e <HAL_DMA_Start_IT+0xb6>
 80011e8:	68fb      	ldr	r3, [r7, #12]
 80011ea:	2201      	movs	r2, #1
 80011ec:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80011f0:	68fb      	ldr	r3, [r7, #12]
 80011f2:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80011f6:	2b01      	cmp	r3, #1
 80011f8:	d13a      	bne.n	8001270 <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80011fa:	68fb      	ldr	r3, [r7, #12]
 80011fc:	2202      	movs	r2, #2
 80011fe:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001202:	68fb      	ldr	r3, [r7, #12]
 8001204:	2200      	movs	r2, #0
 8001206:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001208:	68fb      	ldr	r3, [r7, #12]
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	681a      	ldr	r2, [r3, #0]
 800120e:	68fb      	ldr	r3, [r7, #12]
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	f022 0201 	bic.w	r2, r2, #1
 8001216:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001218:	683b      	ldr	r3, [r7, #0]
 800121a:	687a      	ldr	r2, [r7, #4]
 800121c:	68b9      	ldr	r1, [r7, #8]
 800121e:	68f8      	ldr	r0, [r7, #12]
 8001220:	f000 f9ae 	bl	8001580 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8001224:	68fb      	ldr	r3, [r7, #12]
 8001226:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001228:	2b00      	cmp	r3, #0
 800122a:	d008      	beq.n	800123e <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800122c:	68fb      	ldr	r3, [r7, #12]
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	681a      	ldr	r2, [r3, #0]
 8001232:	68fb      	ldr	r3, [r7, #12]
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	f042 020e 	orr.w	r2, r2, #14
 800123a:	601a      	str	r2, [r3, #0]
 800123c:	e00f      	b.n	800125e <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800123e:	68fb      	ldr	r3, [r7, #12]
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	681a      	ldr	r2, [r3, #0]
 8001244:	68fb      	ldr	r3, [r7, #12]
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	f022 0204 	bic.w	r2, r2, #4
 800124c:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800124e:	68fb      	ldr	r3, [r7, #12]
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	681a      	ldr	r2, [r3, #0]
 8001254:	68fb      	ldr	r3, [r7, #12]
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	f042 020a 	orr.w	r2, r2, #10
 800125c:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800125e:	68fb      	ldr	r3, [r7, #12]
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	681a      	ldr	r2, [r3, #0]
 8001264:	68fb      	ldr	r3, [r7, #12]
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	f042 0201 	orr.w	r2, r2, #1
 800126c:	601a      	str	r2, [r3, #0]
 800126e:	e005      	b.n	800127c <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8001270:	68fb      	ldr	r3, [r7, #12]
 8001272:	2200      	movs	r2, #0
 8001274:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8001278:	2302      	movs	r3, #2
 800127a:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 800127c:	7dfb      	ldrb	r3, [r7, #23]
}
 800127e:	4618      	mov	r0, r3
 8001280:	3718      	adds	r7, #24
 8001282:	46bd      	mov	sp, r7
 8001284:	bd80      	pop	{r7, pc}
	...

08001288 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001288:	b580      	push	{r7, lr}
 800128a:	b084      	sub	sp, #16
 800128c:	af00      	add	r7, sp, #0
 800128e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001290:	2300      	movs	r3, #0
 8001292:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800129a:	2b02      	cmp	r3, #2
 800129c:	d005      	beq.n	80012aa <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	2204      	movs	r2, #4
 80012a2:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 80012a4:	2301      	movs	r3, #1
 80012a6:	73fb      	strb	r3, [r7, #15]
 80012a8:	e051      	b.n	800134e <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	681a      	ldr	r2, [r3, #0]
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	f022 020e 	bic.w	r2, r2, #14
 80012b8:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	681a      	ldr	r2, [r3, #0]
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	f022 0201 	bic.w	r2, r2, #1
 80012c8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	4a22      	ldr	r2, [pc, #136]	; (8001358 <HAL_DMA_Abort_IT+0xd0>)
 80012d0:	4293      	cmp	r3, r2
 80012d2:	d029      	beq.n	8001328 <HAL_DMA_Abort_IT+0xa0>
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	4a20      	ldr	r2, [pc, #128]	; (800135c <HAL_DMA_Abort_IT+0xd4>)
 80012da:	4293      	cmp	r3, r2
 80012dc:	d022      	beq.n	8001324 <HAL_DMA_Abort_IT+0x9c>
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	4a1f      	ldr	r2, [pc, #124]	; (8001360 <HAL_DMA_Abort_IT+0xd8>)
 80012e4:	4293      	cmp	r3, r2
 80012e6:	d01a      	beq.n	800131e <HAL_DMA_Abort_IT+0x96>
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	4a1d      	ldr	r2, [pc, #116]	; (8001364 <HAL_DMA_Abort_IT+0xdc>)
 80012ee:	4293      	cmp	r3, r2
 80012f0:	d012      	beq.n	8001318 <HAL_DMA_Abort_IT+0x90>
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	4a1c      	ldr	r2, [pc, #112]	; (8001368 <HAL_DMA_Abort_IT+0xe0>)
 80012f8:	4293      	cmp	r3, r2
 80012fa:	d00a      	beq.n	8001312 <HAL_DMA_Abort_IT+0x8a>
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	4a1a      	ldr	r2, [pc, #104]	; (800136c <HAL_DMA_Abort_IT+0xe4>)
 8001302:	4293      	cmp	r3, r2
 8001304:	d102      	bne.n	800130c <HAL_DMA_Abort_IT+0x84>
 8001306:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800130a:	e00e      	b.n	800132a <HAL_DMA_Abort_IT+0xa2>
 800130c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001310:	e00b      	b.n	800132a <HAL_DMA_Abort_IT+0xa2>
 8001312:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001316:	e008      	b.n	800132a <HAL_DMA_Abort_IT+0xa2>
 8001318:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800131c:	e005      	b.n	800132a <HAL_DMA_Abort_IT+0xa2>
 800131e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001322:	e002      	b.n	800132a <HAL_DMA_Abort_IT+0xa2>
 8001324:	2310      	movs	r3, #16
 8001326:	e000      	b.n	800132a <HAL_DMA_Abort_IT+0xa2>
 8001328:	2301      	movs	r3, #1
 800132a:	4a11      	ldr	r2, [pc, #68]	; (8001370 <HAL_DMA_Abort_IT+0xe8>)
 800132c:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	2201      	movs	r2, #1
 8001332:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	2200      	movs	r2, #0
 800133a:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001342:	2b00      	cmp	r3, #0
 8001344:	d003      	beq.n	800134e <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800134a:	6878      	ldr	r0, [r7, #4]
 800134c:	4798      	blx	r3
    } 
  }
  return status;
 800134e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001350:	4618      	mov	r0, r3
 8001352:	3710      	adds	r7, #16
 8001354:	46bd      	mov	sp, r7
 8001356:	bd80      	pop	{r7, pc}
 8001358:	40020008 	.word	0x40020008
 800135c:	4002001c 	.word	0x4002001c
 8001360:	40020030 	.word	0x40020030
 8001364:	40020044 	.word	0x40020044
 8001368:	40020058 	.word	0x40020058
 800136c:	4002006c 	.word	0x4002006c
 8001370:	40020000 	.word	0x40020000

08001374 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001374:	b580      	push	{r7, lr}
 8001376:	b084      	sub	sp, #16
 8001378:	af00      	add	r7, sp, #0
 800137a:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001390:	2204      	movs	r2, #4
 8001392:	409a      	lsls	r2, r3
 8001394:	68fb      	ldr	r3, [r7, #12]
 8001396:	4013      	ands	r3, r2
 8001398:	2b00      	cmp	r3, #0
 800139a:	d04f      	beq.n	800143c <HAL_DMA_IRQHandler+0xc8>
 800139c:	68bb      	ldr	r3, [r7, #8]
 800139e:	f003 0304 	and.w	r3, r3, #4
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d04a      	beq.n	800143c <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	f003 0320 	and.w	r3, r3, #32
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d107      	bne.n	80013c4 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	681a      	ldr	r2, [r3, #0]
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	f022 0204 	bic.w	r2, r2, #4
 80013c2:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	4a66      	ldr	r2, [pc, #408]	; (8001564 <HAL_DMA_IRQHandler+0x1f0>)
 80013ca:	4293      	cmp	r3, r2
 80013cc:	d029      	beq.n	8001422 <HAL_DMA_IRQHandler+0xae>
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	4a65      	ldr	r2, [pc, #404]	; (8001568 <HAL_DMA_IRQHandler+0x1f4>)
 80013d4:	4293      	cmp	r3, r2
 80013d6:	d022      	beq.n	800141e <HAL_DMA_IRQHandler+0xaa>
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	4a63      	ldr	r2, [pc, #396]	; (800156c <HAL_DMA_IRQHandler+0x1f8>)
 80013de:	4293      	cmp	r3, r2
 80013e0:	d01a      	beq.n	8001418 <HAL_DMA_IRQHandler+0xa4>
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	4a62      	ldr	r2, [pc, #392]	; (8001570 <HAL_DMA_IRQHandler+0x1fc>)
 80013e8:	4293      	cmp	r3, r2
 80013ea:	d012      	beq.n	8001412 <HAL_DMA_IRQHandler+0x9e>
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	4a60      	ldr	r2, [pc, #384]	; (8001574 <HAL_DMA_IRQHandler+0x200>)
 80013f2:	4293      	cmp	r3, r2
 80013f4:	d00a      	beq.n	800140c <HAL_DMA_IRQHandler+0x98>
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	4a5f      	ldr	r2, [pc, #380]	; (8001578 <HAL_DMA_IRQHandler+0x204>)
 80013fc:	4293      	cmp	r3, r2
 80013fe:	d102      	bne.n	8001406 <HAL_DMA_IRQHandler+0x92>
 8001400:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001404:	e00e      	b.n	8001424 <HAL_DMA_IRQHandler+0xb0>
 8001406:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800140a:	e00b      	b.n	8001424 <HAL_DMA_IRQHandler+0xb0>
 800140c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8001410:	e008      	b.n	8001424 <HAL_DMA_IRQHandler+0xb0>
 8001412:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001416:	e005      	b.n	8001424 <HAL_DMA_IRQHandler+0xb0>
 8001418:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800141c:	e002      	b.n	8001424 <HAL_DMA_IRQHandler+0xb0>
 800141e:	2340      	movs	r3, #64	; 0x40
 8001420:	e000      	b.n	8001424 <HAL_DMA_IRQHandler+0xb0>
 8001422:	2304      	movs	r3, #4
 8001424:	4a55      	ldr	r2, [pc, #340]	; (800157c <HAL_DMA_IRQHandler+0x208>)
 8001426:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800142c:	2b00      	cmp	r3, #0
 800142e:	f000 8094 	beq.w	800155a <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001436:	6878      	ldr	r0, [r7, #4]
 8001438:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 800143a:	e08e      	b.n	800155a <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001440:	2202      	movs	r2, #2
 8001442:	409a      	lsls	r2, r3
 8001444:	68fb      	ldr	r3, [r7, #12]
 8001446:	4013      	ands	r3, r2
 8001448:	2b00      	cmp	r3, #0
 800144a:	d056      	beq.n	80014fa <HAL_DMA_IRQHandler+0x186>
 800144c:	68bb      	ldr	r3, [r7, #8]
 800144e:	f003 0302 	and.w	r3, r3, #2
 8001452:	2b00      	cmp	r3, #0
 8001454:	d051      	beq.n	80014fa <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	f003 0320 	and.w	r3, r3, #32
 8001460:	2b00      	cmp	r3, #0
 8001462:	d10b      	bne.n	800147c <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	681a      	ldr	r2, [r3, #0]
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	f022 020a 	bic.w	r2, r2, #10
 8001472:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	2201      	movs	r2, #1
 8001478:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	4a38      	ldr	r2, [pc, #224]	; (8001564 <HAL_DMA_IRQHandler+0x1f0>)
 8001482:	4293      	cmp	r3, r2
 8001484:	d029      	beq.n	80014da <HAL_DMA_IRQHandler+0x166>
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	4a37      	ldr	r2, [pc, #220]	; (8001568 <HAL_DMA_IRQHandler+0x1f4>)
 800148c:	4293      	cmp	r3, r2
 800148e:	d022      	beq.n	80014d6 <HAL_DMA_IRQHandler+0x162>
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	4a35      	ldr	r2, [pc, #212]	; (800156c <HAL_DMA_IRQHandler+0x1f8>)
 8001496:	4293      	cmp	r3, r2
 8001498:	d01a      	beq.n	80014d0 <HAL_DMA_IRQHandler+0x15c>
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	4a34      	ldr	r2, [pc, #208]	; (8001570 <HAL_DMA_IRQHandler+0x1fc>)
 80014a0:	4293      	cmp	r3, r2
 80014a2:	d012      	beq.n	80014ca <HAL_DMA_IRQHandler+0x156>
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	4a32      	ldr	r2, [pc, #200]	; (8001574 <HAL_DMA_IRQHandler+0x200>)
 80014aa:	4293      	cmp	r3, r2
 80014ac:	d00a      	beq.n	80014c4 <HAL_DMA_IRQHandler+0x150>
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	4a31      	ldr	r2, [pc, #196]	; (8001578 <HAL_DMA_IRQHandler+0x204>)
 80014b4:	4293      	cmp	r3, r2
 80014b6:	d102      	bne.n	80014be <HAL_DMA_IRQHandler+0x14a>
 80014b8:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80014bc:	e00e      	b.n	80014dc <HAL_DMA_IRQHandler+0x168>
 80014be:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80014c2:	e00b      	b.n	80014dc <HAL_DMA_IRQHandler+0x168>
 80014c4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80014c8:	e008      	b.n	80014dc <HAL_DMA_IRQHandler+0x168>
 80014ca:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80014ce:	e005      	b.n	80014dc <HAL_DMA_IRQHandler+0x168>
 80014d0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80014d4:	e002      	b.n	80014dc <HAL_DMA_IRQHandler+0x168>
 80014d6:	2320      	movs	r3, #32
 80014d8:	e000      	b.n	80014dc <HAL_DMA_IRQHandler+0x168>
 80014da:	2302      	movs	r3, #2
 80014dc:	4a27      	ldr	r2, [pc, #156]	; (800157c <HAL_DMA_IRQHandler+0x208>)
 80014de:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	2200      	movs	r2, #0
 80014e4:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d034      	beq.n	800155a <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014f4:	6878      	ldr	r0, [r7, #4]
 80014f6:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80014f8:	e02f      	b.n	800155a <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014fe:	2208      	movs	r2, #8
 8001500:	409a      	lsls	r2, r3
 8001502:	68fb      	ldr	r3, [r7, #12]
 8001504:	4013      	ands	r3, r2
 8001506:	2b00      	cmp	r3, #0
 8001508:	d028      	beq.n	800155c <HAL_DMA_IRQHandler+0x1e8>
 800150a:	68bb      	ldr	r3, [r7, #8]
 800150c:	f003 0308 	and.w	r3, r3, #8
 8001510:	2b00      	cmp	r3, #0
 8001512:	d023      	beq.n	800155c <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	681a      	ldr	r2, [r3, #0]
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	f022 020e 	bic.w	r2, r2, #14
 8001522:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800152c:	2101      	movs	r1, #1
 800152e:	fa01 f202 	lsl.w	r2, r1, r2
 8001532:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	2201      	movs	r2, #1
 8001538:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	2201      	movs	r2, #1
 800153e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	2200      	movs	r2, #0
 8001546:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800154e:	2b00      	cmp	r3, #0
 8001550:	d004      	beq.n	800155c <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001556:	6878      	ldr	r0, [r7, #4]
 8001558:	4798      	blx	r3
    }
  }
  return;
 800155a:	bf00      	nop
 800155c:	bf00      	nop
}
 800155e:	3710      	adds	r7, #16
 8001560:	46bd      	mov	sp, r7
 8001562:	bd80      	pop	{r7, pc}
 8001564:	40020008 	.word	0x40020008
 8001568:	4002001c 	.word	0x4002001c
 800156c:	40020030 	.word	0x40020030
 8001570:	40020044 	.word	0x40020044
 8001574:	40020058 	.word	0x40020058
 8001578:	4002006c 	.word	0x4002006c
 800157c:	40020000 	.word	0x40020000

08001580 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001580:	b480      	push	{r7}
 8001582:	b085      	sub	sp, #20
 8001584:	af00      	add	r7, sp, #0
 8001586:	60f8      	str	r0, [r7, #12]
 8001588:	60b9      	str	r1, [r7, #8]
 800158a:	607a      	str	r2, [r7, #4]
 800158c:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800158e:	68fb      	ldr	r3, [r7, #12]
 8001590:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001592:	68fb      	ldr	r3, [r7, #12]
 8001594:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001596:	2101      	movs	r1, #1
 8001598:	fa01 f202 	lsl.w	r2, r1, r2
 800159c:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800159e:	68fb      	ldr	r3, [r7, #12]
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	683a      	ldr	r2, [r7, #0]
 80015a4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80015a6:	68fb      	ldr	r3, [r7, #12]
 80015a8:	685b      	ldr	r3, [r3, #4]
 80015aa:	2b10      	cmp	r3, #16
 80015ac:	d108      	bne.n	80015c0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80015ae:	68fb      	ldr	r3, [r7, #12]
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	687a      	ldr	r2, [r7, #4]
 80015b4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80015b6:	68fb      	ldr	r3, [r7, #12]
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	68ba      	ldr	r2, [r7, #8]
 80015bc:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80015be:	e007      	b.n	80015d0 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 80015c0:	68fb      	ldr	r3, [r7, #12]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	68ba      	ldr	r2, [r7, #8]
 80015c6:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80015c8:	68fb      	ldr	r3, [r7, #12]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	687a      	ldr	r2, [r7, #4]
 80015ce:	60da      	str	r2, [r3, #12]
}
 80015d0:	bf00      	nop
 80015d2:	3714      	adds	r7, #20
 80015d4:	46bd      	mov	sp, r7
 80015d6:	bc80      	pop	{r7}
 80015d8:	4770      	bx	lr
	...

080015dc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80015dc:	b480      	push	{r7}
 80015de:	b08b      	sub	sp, #44	; 0x2c
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	6078      	str	r0, [r7, #4]
 80015e4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80015e6:	2300      	movs	r3, #0
 80015e8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80015ea:	2300      	movs	r3, #0
 80015ec:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80015ee:	e169      	b.n	80018c4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80015f0:	2201      	movs	r2, #1
 80015f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015f4:	fa02 f303 	lsl.w	r3, r2, r3
 80015f8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80015fa:	683b      	ldr	r3, [r7, #0]
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	69fa      	ldr	r2, [r7, #28]
 8001600:	4013      	ands	r3, r2
 8001602:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001604:	69ba      	ldr	r2, [r7, #24]
 8001606:	69fb      	ldr	r3, [r7, #28]
 8001608:	429a      	cmp	r2, r3
 800160a:	f040 8158 	bne.w	80018be <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800160e:	683b      	ldr	r3, [r7, #0]
 8001610:	685b      	ldr	r3, [r3, #4]
 8001612:	4a9a      	ldr	r2, [pc, #616]	; (800187c <HAL_GPIO_Init+0x2a0>)
 8001614:	4293      	cmp	r3, r2
 8001616:	d05e      	beq.n	80016d6 <HAL_GPIO_Init+0xfa>
 8001618:	4a98      	ldr	r2, [pc, #608]	; (800187c <HAL_GPIO_Init+0x2a0>)
 800161a:	4293      	cmp	r3, r2
 800161c:	d875      	bhi.n	800170a <HAL_GPIO_Init+0x12e>
 800161e:	4a98      	ldr	r2, [pc, #608]	; (8001880 <HAL_GPIO_Init+0x2a4>)
 8001620:	4293      	cmp	r3, r2
 8001622:	d058      	beq.n	80016d6 <HAL_GPIO_Init+0xfa>
 8001624:	4a96      	ldr	r2, [pc, #600]	; (8001880 <HAL_GPIO_Init+0x2a4>)
 8001626:	4293      	cmp	r3, r2
 8001628:	d86f      	bhi.n	800170a <HAL_GPIO_Init+0x12e>
 800162a:	4a96      	ldr	r2, [pc, #600]	; (8001884 <HAL_GPIO_Init+0x2a8>)
 800162c:	4293      	cmp	r3, r2
 800162e:	d052      	beq.n	80016d6 <HAL_GPIO_Init+0xfa>
 8001630:	4a94      	ldr	r2, [pc, #592]	; (8001884 <HAL_GPIO_Init+0x2a8>)
 8001632:	4293      	cmp	r3, r2
 8001634:	d869      	bhi.n	800170a <HAL_GPIO_Init+0x12e>
 8001636:	4a94      	ldr	r2, [pc, #592]	; (8001888 <HAL_GPIO_Init+0x2ac>)
 8001638:	4293      	cmp	r3, r2
 800163a:	d04c      	beq.n	80016d6 <HAL_GPIO_Init+0xfa>
 800163c:	4a92      	ldr	r2, [pc, #584]	; (8001888 <HAL_GPIO_Init+0x2ac>)
 800163e:	4293      	cmp	r3, r2
 8001640:	d863      	bhi.n	800170a <HAL_GPIO_Init+0x12e>
 8001642:	4a92      	ldr	r2, [pc, #584]	; (800188c <HAL_GPIO_Init+0x2b0>)
 8001644:	4293      	cmp	r3, r2
 8001646:	d046      	beq.n	80016d6 <HAL_GPIO_Init+0xfa>
 8001648:	4a90      	ldr	r2, [pc, #576]	; (800188c <HAL_GPIO_Init+0x2b0>)
 800164a:	4293      	cmp	r3, r2
 800164c:	d85d      	bhi.n	800170a <HAL_GPIO_Init+0x12e>
 800164e:	2b12      	cmp	r3, #18
 8001650:	d82a      	bhi.n	80016a8 <HAL_GPIO_Init+0xcc>
 8001652:	2b12      	cmp	r3, #18
 8001654:	d859      	bhi.n	800170a <HAL_GPIO_Init+0x12e>
 8001656:	a201      	add	r2, pc, #4	; (adr r2, 800165c <HAL_GPIO_Init+0x80>)
 8001658:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800165c:	080016d7 	.word	0x080016d7
 8001660:	080016b1 	.word	0x080016b1
 8001664:	080016c3 	.word	0x080016c3
 8001668:	08001705 	.word	0x08001705
 800166c:	0800170b 	.word	0x0800170b
 8001670:	0800170b 	.word	0x0800170b
 8001674:	0800170b 	.word	0x0800170b
 8001678:	0800170b 	.word	0x0800170b
 800167c:	0800170b 	.word	0x0800170b
 8001680:	0800170b 	.word	0x0800170b
 8001684:	0800170b 	.word	0x0800170b
 8001688:	0800170b 	.word	0x0800170b
 800168c:	0800170b 	.word	0x0800170b
 8001690:	0800170b 	.word	0x0800170b
 8001694:	0800170b 	.word	0x0800170b
 8001698:	0800170b 	.word	0x0800170b
 800169c:	0800170b 	.word	0x0800170b
 80016a0:	080016b9 	.word	0x080016b9
 80016a4:	080016cd 	.word	0x080016cd
 80016a8:	4a79      	ldr	r2, [pc, #484]	; (8001890 <HAL_GPIO_Init+0x2b4>)
 80016aa:	4293      	cmp	r3, r2
 80016ac:	d013      	beq.n	80016d6 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80016ae:	e02c      	b.n	800170a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80016b0:	683b      	ldr	r3, [r7, #0]
 80016b2:	68db      	ldr	r3, [r3, #12]
 80016b4:	623b      	str	r3, [r7, #32]
          break;
 80016b6:	e029      	b.n	800170c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80016b8:	683b      	ldr	r3, [r7, #0]
 80016ba:	68db      	ldr	r3, [r3, #12]
 80016bc:	3304      	adds	r3, #4
 80016be:	623b      	str	r3, [r7, #32]
          break;
 80016c0:	e024      	b.n	800170c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80016c2:	683b      	ldr	r3, [r7, #0]
 80016c4:	68db      	ldr	r3, [r3, #12]
 80016c6:	3308      	adds	r3, #8
 80016c8:	623b      	str	r3, [r7, #32]
          break;
 80016ca:	e01f      	b.n	800170c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80016cc:	683b      	ldr	r3, [r7, #0]
 80016ce:	68db      	ldr	r3, [r3, #12]
 80016d0:	330c      	adds	r3, #12
 80016d2:	623b      	str	r3, [r7, #32]
          break;
 80016d4:	e01a      	b.n	800170c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80016d6:	683b      	ldr	r3, [r7, #0]
 80016d8:	689b      	ldr	r3, [r3, #8]
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d102      	bne.n	80016e4 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80016de:	2304      	movs	r3, #4
 80016e0:	623b      	str	r3, [r7, #32]
          break;
 80016e2:	e013      	b.n	800170c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80016e4:	683b      	ldr	r3, [r7, #0]
 80016e6:	689b      	ldr	r3, [r3, #8]
 80016e8:	2b01      	cmp	r3, #1
 80016ea:	d105      	bne.n	80016f8 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80016ec:	2308      	movs	r3, #8
 80016ee:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	69fa      	ldr	r2, [r7, #28]
 80016f4:	611a      	str	r2, [r3, #16]
          break;
 80016f6:	e009      	b.n	800170c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80016f8:	2308      	movs	r3, #8
 80016fa:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	69fa      	ldr	r2, [r7, #28]
 8001700:	615a      	str	r2, [r3, #20]
          break;
 8001702:	e003      	b.n	800170c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001704:	2300      	movs	r3, #0
 8001706:	623b      	str	r3, [r7, #32]
          break;
 8001708:	e000      	b.n	800170c <HAL_GPIO_Init+0x130>
          break;
 800170a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800170c:	69bb      	ldr	r3, [r7, #24]
 800170e:	2bff      	cmp	r3, #255	; 0xff
 8001710:	d801      	bhi.n	8001716 <HAL_GPIO_Init+0x13a>
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	e001      	b.n	800171a <HAL_GPIO_Init+0x13e>
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	3304      	adds	r3, #4
 800171a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800171c:	69bb      	ldr	r3, [r7, #24]
 800171e:	2bff      	cmp	r3, #255	; 0xff
 8001720:	d802      	bhi.n	8001728 <HAL_GPIO_Init+0x14c>
 8001722:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001724:	009b      	lsls	r3, r3, #2
 8001726:	e002      	b.n	800172e <HAL_GPIO_Init+0x152>
 8001728:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800172a:	3b08      	subs	r3, #8
 800172c:	009b      	lsls	r3, r3, #2
 800172e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001730:	697b      	ldr	r3, [r7, #20]
 8001732:	681a      	ldr	r2, [r3, #0]
 8001734:	210f      	movs	r1, #15
 8001736:	693b      	ldr	r3, [r7, #16]
 8001738:	fa01 f303 	lsl.w	r3, r1, r3
 800173c:	43db      	mvns	r3, r3
 800173e:	401a      	ands	r2, r3
 8001740:	6a39      	ldr	r1, [r7, #32]
 8001742:	693b      	ldr	r3, [r7, #16]
 8001744:	fa01 f303 	lsl.w	r3, r1, r3
 8001748:	431a      	orrs	r2, r3
 800174a:	697b      	ldr	r3, [r7, #20]
 800174c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800174e:	683b      	ldr	r3, [r7, #0]
 8001750:	685b      	ldr	r3, [r3, #4]
 8001752:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001756:	2b00      	cmp	r3, #0
 8001758:	f000 80b1 	beq.w	80018be <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800175c:	4b4d      	ldr	r3, [pc, #308]	; (8001894 <HAL_GPIO_Init+0x2b8>)
 800175e:	699b      	ldr	r3, [r3, #24]
 8001760:	4a4c      	ldr	r2, [pc, #304]	; (8001894 <HAL_GPIO_Init+0x2b8>)
 8001762:	f043 0301 	orr.w	r3, r3, #1
 8001766:	6193      	str	r3, [r2, #24]
 8001768:	4b4a      	ldr	r3, [pc, #296]	; (8001894 <HAL_GPIO_Init+0x2b8>)
 800176a:	699b      	ldr	r3, [r3, #24]
 800176c:	f003 0301 	and.w	r3, r3, #1
 8001770:	60bb      	str	r3, [r7, #8]
 8001772:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001774:	4a48      	ldr	r2, [pc, #288]	; (8001898 <HAL_GPIO_Init+0x2bc>)
 8001776:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001778:	089b      	lsrs	r3, r3, #2
 800177a:	3302      	adds	r3, #2
 800177c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001780:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001782:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001784:	f003 0303 	and.w	r3, r3, #3
 8001788:	009b      	lsls	r3, r3, #2
 800178a:	220f      	movs	r2, #15
 800178c:	fa02 f303 	lsl.w	r3, r2, r3
 8001790:	43db      	mvns	r3, r3
 8001792:	68fa      	ldr	r2, [r7, #12]
 8001794:	4013      	ands	r3, r2
 8001796:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	4a40      	ldr	r2, [pc, #256]	; (800189c <HAL_GPIO_Init+0x2c0>)
 800179c:	4293      	cmp	r3, r2
 800179e:	d013      	beq.n	80017c8 <HAL_GPIO_Init+0x1ec>
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	4a3f      	ldr	r2, [pc, #252]	; (80018a0 <HAL_GPIO_Init+0x2c4>)
 80017a4:	4293      	cmp	r3, r2
 80017a6:	d00d      	beq.n	80017c4 <HAL_GPIO_Init+0x1e8>
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	4a3e      	ldr	r2, [pc, #248]	; (80018a4 <HAL_GPIO_Init+0x2c8>)
 80017ac:	4293      	cmp	r3, r2
 80017ae:	d007      	beq.n	80017c0 <HAL_GPIO_Init+0x1e4>
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	4a3d      	ldr	r2, [pc, #244]	; (80018a8 <HAL_GPIO_Init+0x2cc>)
 80017b4:	4293      	cmp	r3, r2
 80017b6:	d101      	bne.n	80017bc <HAL_GPIO_Init+0x1e0>
 80017b8:	2303      	movs	r3, #3
 80017ba:	e006      	b.n	80017ca <HAL_GPIO_Init+0x1ee>
 80017bc:	2304      	movs	r3, #4
 80017be:	e004      	b.n	80017ca <HAL_GPIO_Init+0x1ee>
 80017c0:	2302      	movs	r3, #2
 80017c2:	e002      	b.n	80017ca <HAL_GPIO_Init+0x1ee>
 80017c4:	2301      	movs	r3, #1
 80017c6:	e000      	b.n	80017ca <HAL_GPIO_Init+0x1ee>
 80017c8:	2300      	movs	r3, #0
 80017ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80017cc:	f002 0203 	and.w	r2, r2, #3
 80017d0:	0092      	lsls	r2, r2, #2
 80017d2:	4093      	lsls	r3, r2
 80017d4:	68fa      	ldr	r2, [r7, #12]
 80017d6:	4313      	orrs	r3, r2
 80017d8:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80017da:	492f      	ldr	r1, [pc, #188]	; (8001898 <HAL_GPIO_Init+0x2bc>)
 80017dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017de:	089b      	lsrs	r3, r3, #2
 80017e0:	3302      	adds	r3, #2
 80017e2:	68fa      	ldr	r2, [r7, #12]
 80017e4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80017e8:	683b      	ldr	r3, [r7, #0]
 80017ea:	685b      	ldr	r3, [r3, #4]
 80017ec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d006      	beq.n	8001802 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80017f4:	4b2d      	ldr	r3, [pc, #180]	; (80018ac <HAL_GPIO_Init+0x2d0>)
 80017f6:	681a      	ldr	r2, [r3, #0]
 80017f8:	492c      	ldr	r1, [pc, #176]	; (80018ac <HAL_GPIO_Init+0x2d0>)
 80017fa:	69bb      	ldr	r3, [r7, #24]
 80017fc:	4313      	orrs	r3, r2
 80017fe:	600b      	str	r3, [r1, #0]
 8001800:	e006      	b.n	8001810 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001802:	4b2a      	ldr	r3, [pc, #168]	; (80018ac <HAL_GPIO_Init+0x2d0>)
 8001804:	681a      	ldr	r2, [r3, #0]
 8001806:	69bb      	ldr	r3, [r7, #24]
 8001808:	43db      	mvns	r3, r3
 800180a:	4928      	ldr	r1, [pc, #160]	; (80018ac <HAL_GPIO_Init+0x2d0>)
 800180c:	4013      	ands	r3, r2
 800180e:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001810:	683b      	ldr	r3, [r7, #0]
 8001812:	685b      	ldr	r3, [r3, #4]
 8001814:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001818:	2b00      	cmp	r3, #0
 800181a:	d006      	beq.n	800182a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800181c:	4b23      	ldr	r3, [pc, #140]	; (80018ac <HAL_GPIO_Init+0x2d0>)
 800181e:	685a      	ldr	r2, [r3, #4]
 8001820:	4922      	ldr	r1, [pc, #136]	; (80018ac <HAL_GPIO_Init+0x2d0>)
 8001822:	69bb      	ldr	r3, [r7, #24]
 8001824:	4313      	orrs	r3, r2
 8001826:	604b      	str	r3, [r1, #4]
 8001828:	e006      	b.n	8001838 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800182a:	4b20      	ldr	r3, [pc, #128]	; (80018ac <HAL_GPIO_Init+0x2d0>)
 800182c:	685a      	ldr	r2, [r3, #4]
 800182e:	69bb      	ldr	r3, [r7, #24]
 8001830:	43db      	mvns	r3, r3
 8001832:	491e      	ldr	r1, [pc, #120]	; (80018ac <HAL_GPIO_Init+0x2d0>)
 8001834:	4013      	ands	r3, r2
 8001836:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001838:	683b      	ldr	r3, [r7, #0]
 800183a:	685b      	ldr	r3, [r3, #4]
 800183c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001840:	2b00      	cmp	r3, #0
 8001842:	d006      	beq.n	8001852 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001844:	4b19      	ldr	r3, [pc, #100]	; (80018ac <HAL_GPIO_Init+0x2d0>)
 8001846:	689a      	ldr	r2, [r3, #8]
 8001848:	4918      	ldr	r1, [pc, #96]	; (80018ac <HAL_GPIO_Init+0x2d0>)
 800184a:	69bb      	ldr	r3, [r7, #24]
 800184c:	4313      	orrs	r3, r2
 800184e:	608b      	str	r3, [r1, #8]
 8001850:	e006      	b.n	8001860 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001852:	4b16      	ldr	r3, [pc, #88]	; (80018ac <HAL_GPIO_Init+0x2d0>)
 8001854:	689a      	ldr	r2, [r3, #8]
 8001856:	69bb      	ldr	r3, [r7, #24]
 8001858:	43db      	mvns	r3, r3
 800185a:	4914      	ldr	r1, [pc, #80]	; (80018ac <HAL_GPIO_Init+0x2d0>)
 800185c:	4013      	ands	r3, r2
 800185e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001860:	683b      	ldr	r3, [r7, #0]
 8001862:	685b      	ldr	r3, [r3, #4]
 8001864:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001868:	2b00      	cmp	r3, #0
 800186a:	d021      	beq.n	80018b0 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800186c:	4b0f      	ldr	r3, [pc, #60]	; (80018ac <HAL_GPIO_Init+0x2d0>)
 800186e:	68da      	ldr	r2, [r3, #12]
 8001870:	490e      	ldr	r1, [pc, #56]	; (80018ac <HAL_GPIO_Init+0x2d0>)
 8001872:	69bb      	ldr	r3, [r7, #24]
 8001874:	4313      	orrs	r3, r2
 8001876:	60cb      	str	r3, [r1, #12]
 8001878:	e021      	b.n	80018be <HAL_GPIO_Init+0x2e2>
 800187a:	bf00      	nop
 800187c:	10320000 	.word	0x10320000
 8001880:	10310000 	.word	0x10310000
 8001884:	10220000 	.word	0x10220000
 8001888:	10210000 	.word	0x10210000
 800188c:	10120000 	.word	0x10120000
 8001890:	10110000 	.word	0x10110000
 8001894:	40021000 	.word	0x40021000
 8001898:	40010000 	.word	0x40010000
 800189c:	40010800 	.word	0x40010800
 80018a0:	40010c00 	.word	0x40010c00
 80018a4:	40011000 	.word	0x40011000
 80018a8:	40011400 	.word	0x40011400
 80018ac:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80018b0:	4b0b      	ldr	r3, [pc, #44]	; (80018e0 <HAL_GPIO_Init+0x304>)
 80018b2:	68da      	ldr	r2, [r3, #12]
 80018b4:	69bb      	ldr	r3, [r7, #24]
 80018b6:	43db      	mvns	r3, r3
 80018b8:	4909      	ldr	r1, [pc, #36]	; (80018e0 <HAL_GPIO_Init+0x304>)
 80018ba:	4013      	ands	r3, r2
 80018bc:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80018be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018c0:	3301      	adds	r3, #1
 80018c2:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80018c4:	683b      	ldr	r3, [r7, #0]
 80018c6:	681a      	ldr	r2, [r3, #0]
 80018c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018ca:	fa22 f303 	lsr.w	r3, r2, r3
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	f47f ae8e 	bne.w	80015f0 <HAL_GPIO_Init+0x14>
  }
}
 80018d4:	bf00      	nop
 80018d6:	bf00      	nop
 80018d8:	372c      	adds	r7, #44	; 0x2c
 80018da:	46bd      	mov	sp, r7
 80018dc:	bc80      	pop	{r7}
 80018de:	4770      	bx	lr
 80018e0:	40010400 	.word	0x40010400

080018e4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80018e4:	b480      	push	{r7}
 80018e6:	b083      	sub	sp, #12
 80018e8:	af00      	add	r7, sp, #0
 80018ea:	6078      	str	r0, [r7, #4]
 80018ec:	460b      	mov	r3, r1
 80018ee:	807b      	strh	r3, [r7, #2]
 80018f0:	4613      	mov	r3, r2
 80018f2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80018f4:	787b      	ldrb	r3, [r7, #1]
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d003      	beq.n	8001902 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80018fa:	887a      	ldrh	r2, [r7, #2]
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001900:	e003      	b.n	800190a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001902:	887b      	ldrh	r3, [r7, #2]
 8001904:	041a      	lsls	r2, r3, #16
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	611a      	str	r2, [r3, #16]
}
 800190a:	bf00      	nop
 800190c:	370c      	adds	r7, #12
 800190e:	46bd      	mov	sp, r7
 8001910:	bc80      	pop	{r7}
 8001912:	4770      	bx	lr

08001914 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001914:	b580      	push	{r7, lr}
 8001916:	b086      	sub	sp, #24
 8001918:	af00      	add	r7, sp, #0
 800191a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	2b00      	cmp	r3, #0
 8001920:	d101      	bne.n	8001926 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001922:	2301      	movs	r3, #1
 8001924:	e26c      	b.n	8001e00 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	f003 0301 	and.w	r3, r3, #1
 800192e:	2b00      	cmp	r3, #0
 8001930:	f000 8087 	beq.w	8001a42 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001934:	4b92      	ldr	r3, [pc, #584]	; (8001b80 <HAL_RCC_OscConfig+0x26c>)
 8001936:	685b      	ldr	r3, [r3, #4]
 8001938:	f003 030c 	and.w	r3, r3, #12
 800193c:	2b04      	cmp	r3, #4
 800193e:	d00c      	beq.n	800195a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001940:	4b8f      	ldr	r3, [pc, #572]	; (8001b80 <HAL_RCC_OscConfig+0x26c>)
 8001942:	685b      	ldr	r3, [r3, #4]
 8001944:	f003 030c 	and.w	r3, r3, #12
 8001948:	2b08      	cmp	r3, #8
 800194a:	d112      	bne.n	8001972 <HAL_RCC_OscConfig+0x5e>
 800194c:	4b8c      	ldr	r3, [pc, #560]	; (8001b80 <HAL_RCC_OscConfig+0x26c>)
 800194e:	685b      	ldr	r3, [r3, #4]
 8001950:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001954:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001958:	d10b      	bne.n	8001972 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800195a:	4b89      	ldr	r3, [pc, #548]	; (8001b80 <HAL_RCC_OscConfig+0x26c>)
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001962:	2b00      	cmp	r3, #0
 8001964:	d06c      	beq.n	8001a40 <HAL_RCC_OscConfig+0x12c>
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	685b      	ldr	r3, [r3, #4]
 800196a:	2b00      	cmp	r3, #0
 800196c:	d168      	bne.n	8001a40 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800196e:	2301      	movs	r3, #1
 8001970:	e246      	b.n	8001e00 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	685b      	ldr	r3, [r3, #4]
 8001976:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800197a:	d106      	bne.n	800198a <HAL_RCC_OscConfig+0x76>
 800197c:	4b80      	ldr	r3, [pc, #512]	; (8001b80 <HAL_RCC_OscConfig+0x26c>)
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	4a7f      	ldr	r2, [pc, #508]	; (8001b80 <HAL_RCC_OscConfig+0x26c>)
 8001982:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001986:	6013      	str	r3, [r2, #0]
 8001988:	e02e      	b.n	80019e8 <HAL_RCC_OscConfig+0xd4>
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	685b      	ldr	r3, [r3, #4]
 800198e:	2b00      	cmp	r3, #0
 8001990:	d10c      	bne.n	80019ac <HAL_RCC_OscConfig+0x98>
 8001992:	4b7b      	ldr	r3, [pc, #492]	; (8001b80 <HAL_RCC_OscConfig+0x26c>)
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	4a7a      	ldr	r2, [pc, #488]	; (8001b80 <HAL_RCC_OscConfig+0x26c>)
 8001998:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800199c:	6013      	str	r3, [r2, #0]
 800199e:	4b78      	ldr	r3, [pc, #480]	; (8001b80 <HAL_RCC_OscConfig+0x26c>)
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	4a77      	ldr	r2, [pc, #476]	; (8001b80 <HAL_RCC_OscConfig+0x26c>)
 80019a4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80019a8:	6013      	str	r3, [r2, #0]
 80019aa:	e01d      	b.n	80019e8 <HAL_RCC_OscConfig+0xd4>
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	685b      	ldr	r3, [r3, #4]
 80019b0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80019b4:	d10c      	bne.n	80019d0 <HAL_RCC_OscConfig+0xbc>
 80019b6:	4b72      	ldr	r3, [pc, #456]	; (8001b80 <HAL_RCC_OscConfig+0x26c>)
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	4a71      	ldr	r2, [pc, #452]	; (8001b80 <HAL_RCC_OscConfig+0x26c>)
 80019bc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80019c0:	6013      	str	r3, [r2, #0]
 80019c2:	4b6f      	ldr	r3, [pc, #444]	; (8001b80 <HAL_RCC_OscConfig+0x26c>)
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	4a6e      	ldr	r2, [pc, #440]	; (8001b80 <HAL_RCC_OscConfig+0x26c>)
 80019c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80019cc:	6013      	str	r3, [r2, #0]
 80019ce:	e00b      	b.n	80019e8 <HAL_RCC_OscConfig+0xd4>
 80019d0:	4b6b      	ldr	r3, [pc, #428]	; (8001b80 <HAL_RCC_OscConfig+0x26c>)
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	4a6a      	ldr	r2, [pc, #424]	; (8001b80 <HAL_RCC_OscConfig+0x26c>)
 80019d6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80019da:	6013      	str	r3, [r2, #0]
 80019dc:	4b68      	ldr	r3, [pc, #416]	; (8001b80 <HAL_RCC_OscConfig+0x26c>)
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	4a67      	ldr	r2, [pc, #412]	; (8001b80 <HAL_RCC_OscConfig+0x26c>)
 80019e2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80019e6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	685b      	ldr	r3, [r3, #4]
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d013      	beq.n	8001a18 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019f0:	f7ff fa54 	bl	8000e9c <HAL_GetTick>
 80019f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80019f6:	e008      	b.n	8001a0a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80019f8:	f7ff fa50 	bl	8000e9c <HAL_GetTick>
 80019fc:	4602      	mov	r2, r0
 80019fe:	693b      	ldr	r3, [r7, #16]
 8001a00:	1ad3      	subs	r3, r2, r3
 8001a02:	2b64      	cmp	r3, #100	; 0x64
 8001a04:	d901      	bls.n	8001a0a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001a06:	2303      	movs	r3, #3
 8001a08:	e1fa      	b.n	8001e00 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a0a:	4b5d      	ldr	r3, [pc, #372]	; (8001b80 <HAL_RCC_OscConfig+0x26c>)
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d0f0      	beq.n	80019f8 <HAL_RCC_OscConfig+0xe4>
 8001a16:	e014      	b.n	8001a42 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a18:	f7ff fa40 	bl	8000e9c <HAL_GetTick>
 8001a1c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001a1e:	e008      	b.n	8001a32 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001a20:	f7ff fa3c 	bl	8000e9c <HAL_GetTick>
 8001a24:	4602      	mov	r2, r0
 8001a26:	693b      	ldr	r3, [r7, #16]
 8001a28:	1ad3      	subs	r3, r2, r3
 8001a2a:	2b64      	cmp	r3, #100	; 0x64
 8001a2c:	d901      	bls.n	8001a32 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001a2e:	2303      	movs	r3, #3
 8001a30:	e1e6      	b.n	8001e00 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001a32:	4b53      	ldr	r3, [pc, #332]	; (8001b80 <HAL_RCC_OscConfig+0x26c>)
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d1f0      	bne.n	8001a20 <HAL_RCC_OscConfig+0x10c>
 8001a3e:	e000      	b.n	8001a42 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a40:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	f003 0302 	and.w	r3, r3, #2
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d063      	beq.n	8001b16 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001a4e:	4b4c      	ldr	r3, [pc, #304]	; (8001b80 <HAL_RCC_OscConfig+0x26c>)
 8001a50:	685b      	ldr	r3, [r3, #4]
 8001a52:	f003 030c 	and.w	r3, r3, #12
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d00b      	beq.n	8001a72 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001a5a:	4b49      	ldr	r3, [pc, #292]	; (8001b80 <HAL_RCC_OscConfig+0x26c>)
 8001a5c:	685b      	ldr	r3, [r3, #4]
 8001a5e:	f003 030c 	and.w	r3, r3, #12
 8001a62:	2b08      	cmp	r3, #8
 8001a64:	d11c      	bne.n	8001aa0 <HAL_RCC_OscConfig+0x18c>
 8001a66:	4b46      	ldr	r3, [pc, #280]	; (8001b80 <HAL_RCC_OscConfig+0x26c>)
 8001a68:	685b      	ldr	r3, [r3, #4]
 8001a6a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d116      	bne.n	8001aa0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001a72:	4b43      	ldr	r3, [pc, #268]	; (8001b80 <HAL_RCC_OscConfig+0x26c>)
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	f003 0302 	and.w	r3, r3, #2
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d005      	beq.n	8001a8a <HAL_RCC_OscConfig+0x176>
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	691b      	ldr	r3, [r3, #16]
 8001a82:	2b01      	cmp	r3, #1
 8001a84:	d001      	beq.n	8001a8a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001a86:	2301      	movs	r3, #1
 8001a88:	e1ba      	b.n	8001e00 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a8a:	4b3d      	ldr	r3, [pc, #244]	; (8001b80 <HAL_RCC_OscConfig+0x26c>)
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	695b      	ldr	r3, [r3, #20]
 8001a96:	00db      	lsls	r3, r3, #3
 8001a98:	4939      	ldr	r1, [pc, #228]	; (8001b80 <HAL_RCC_OscConfig+0x26c>)
 8001a9a:	4313      	orrs	r3, r2
 8001a9c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001a9e:	e03a      	b.n	8001b16 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	691b      	ldr	r3, [r3, #16]
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d020      	beq.n	8001aea <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001aa8:	4b36      	ldr	r3, [pc, #216]	; (8001b84 <HAL_RCC_OscConfig+0x270>)
 8001aaa:	2201      	movs	r2, #1
 8001aac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001aae:	f7ff f9f5 	bl	8000e9c <HAL_GetTick>
 8001ab2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ab4:	e008      	b.n	8001ac8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001ab6:	f7ff f9f1 	bl	8000e9c <HAL_GetTick>
 8001aba:	4602      	mov	r2, r0
 8001abc:	693b      	ldr	r3, [r7, #16]
 8001abe:	1ad3      	subs	r3, r2, r3
 8001ac0:	2b02      	cmp	r3, #2
 8001ac2:	d901      	bls.n	8001ac8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001ac4:	2303      	movs	r3, #3
 8001ac6:	e19b      	b.n	8001e00 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ac8:	4b2d      	ldr	r3, [pc, #180]	; (8001b80 <HAL_RCC_OscConfig+0x26c>)
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	f003 0302 	and.w	r3, r3, #2
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d0f0      	beq.n	8001ab6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ad4:	4b2a      	ldr	r3, [pc, #168]	; (8001b80 <HAL_RCC_OscConfig+0x26c>)
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	695b      	ldr	r3, [r3, #20]
 8001ae0:	00db      	lsls	r3, r3, #3
 8001ae2:	4927      	ldr	r1, [pc, #156]	; (8001b80 <HAL_RCC_OscConfig+0x26c>)
 8001ae4:	4313      	orrs	r3, r2
 8001ae6:	600b      	str	r3, [r1, #0]
 8001ae8:	e015      	b.n	8001b16 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001aea:	4b26      	ldr	r3, [pc, #152]	; (8001b84 <HAL_RCC_OscConfig+0x270>)
 8001aec:	2200      	movs	r2, #0
 8001aee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001af0:	f7ff f9d4 	bl	8000e9c <HAL_GetTick>
 8001af4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001af6:	e008      	b.n	8001b0a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001af8:	f7ff f9d0 	bl	8000e9c <HAL_GetTick>
 8001afc:	4602      	mov	r2, r0
 8001afe:	693b      	ldr	r3, [r7, #16]
 8001b00:	1ad3      	subs	r3, r2, r3
 8001b02:	2b02      	cmp	r3, #2
 8001b04:	d901      	bls.n	8001b0a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001b06:	2303      	movs	r3, #3
 8001b08:	e17a      	b.n	8001e00 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b0a:	4b1d      	ldr	r3, [pc, #116]	; (8001b80 <HAL_RCC_OscConfig+0x26c>)
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	f003 0302 	and.w	r3, r3, #2
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d1f0      	bne.n	8001af8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	f003 0308 	and.w	r3, r3, #8
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d03a      	beq.n	8001b98 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	699b      	ldr	r3, [r3, #24]
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d019      	beq.n	8001b5e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001b2a:	4b17      	ldr	r3, [pc, #92]	; (8001b88 <HAL_RCC_OscConfig+0x274>)
 8001b2c:	2201      	movs	r2, #1
 8001b2e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b30:	f7ff f9b4 	bl	8000e9c <HAL_GetTick>
 8001b34:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001b36:	e008      	b.n	8001b4a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001b38:	f7ff f9b0 	bl	8000e9c <HAL_GetTick>
 8001b3c:	4602      	mov	r2, r0
 8001b3e:	693b      	ldr	r3, [r7, #16]
 8001b40:	1ad3      	subs	r3, r2, r3
 8001b42:	2b02      	cmp	r3, #2
 8001b44:	d901      	bls.n	8001b4a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001b46:	2303      	movs	r3, #3
 8001b48:	e15a      	b.n	8001e00 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001b4a:	4b0d      	ldr	r3, [pc, #52]	; (8001b80 <HAL_RCC_OscConfig+0x26c>)
 8001b4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b4e:	f003 0302 	and.w	r3, r3, #2
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d0f0      	beq.n	8001b38 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001b56:	2001      	movs	r0, #1
 8001b58:	f000 fad8 	bl	800210c <RCC_Delay>
 8001b5c:	e01c      	b.n	8001b98 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001b5e:	4b0a      	ldr	r3, [pc, #40]	; (8001b88 <HAL_RCC_OscConfig+0x274>)
 8001b60:	2200      	movs	r2, #0
 8001b62:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b64:	f7ff f99a 	bl	8000e9c <HAL_GetTick>
 8001b68:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001b6a:	e00f      	b.n	8001b8c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001b6c:	f7ff f996 	bl	8000e9c <HAL_GetTick>
 8001b70:	4602      	mov	r2, r0
 8001b72:	693b      	ldr	r3, [r7, #16]
 8001b74:	1ad3      	subs	r3, r2, r3
 8001b76:	2b02      	cmp	r3, #2
 8001b78:	d908      	bls.n	8001b8c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001b7a:	2303      	movs	r3, #3
 8001b7c:	e140      	b.n	8001e00 <HAL_RCC_OscConfig+0x4ec>
 8001b7e:	bf00      	nop
 8001b80:	40021000 	.word	0x40021000
 8001b84:	42420000 	.word	0x42420000
 8001b88:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001b8c:	4b9e      	ldr	r3, [pc, #632]	; (8001e08 <HAL_RCC_OscConfig+0x4f4>)
 8001b8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b90:	f003 0302 	and.w	r3, r3, #2
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d1e9      	bne.n	8001b6c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	f003 0304 	and.w	r3, r3, #4
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	f000 80a6 	beq.w	8001cf2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001ba6:	2300      	movs	r3, #0
 8001ba8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001baa:	4b97      	ldr	r3, [pc, #604]	; (8001e08 <HAL_RCC_OscConfig+0x4f4>)
 8001bac:	69db      	ldr	r3, [r3, #28]
 8001bae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d10d      	bne.n	8001bd2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001bb6:	4b94      	ldr	r3, [pc, #592]	; (8001e08 <HAL_RCC_OscConfig+0x4f4>)
 8001bb8:	69db      	ldr	r3, [r3, #28]
 8001bba:	4a93      	ldr	r2, [pc, #588]	; (8001e08 <HAL_RCC_OscConfig+0x4f4>)
 8001bbc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001bc0:	61d3      	str	r3, [r2, #28]
 8001bc2:	4b91      	ldr	r3, [pc, #580]	; (8001e08 <HAL_RCC_OscConfig+0x4f4>)
 8001bc4:	69db      	ldr	r3, [r3, #28]
 8001bc6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bca:	60bb      	str	r3, [r7, #8]
 8001bcc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001bce:	2301      	movs	r3, #1
 8001bd0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001bd2:	4b8e      	ldr	r3, [pc, #568]	; (8001e0c <HAL_RCC_OscConfig+0x4f8>)
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d118      	bne.n	8001c10 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001bde:	4b8b      	ldr	r3, [pc, #556]	; (8001e0c <HAL_RCC_OscConfig+0x4f8>)
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	4a8a      	ldr	r2, [pc, #552]	; (8001e0c <HAL_RCC_OscConfig+0x4f8>)
 8001be4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001be8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001bea:	f7ff f957 	bl	8000e9c <HAL_GetTick>
 8001bee:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001bf0:	e008      	b.n	8001c04 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001bf2:	f7ff f953 	bl	8000e9c <HAL_GetTick>
 8001bf6:	4602      	mov	r2, r0
 8001bf8:	693b      	ldr	r3, [r7, #16]
 8001bfa:	1ad3      	subs	r3, r2, r3
 8001bfc:	2b64      	cmp	r3, #100	; 0x64
 8001bfe:	d901      	bls.n	8001c04 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001c00:	2303      	movs	r3, #3
 8001c02:	e0fd      	b.n	8001e00 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c04:	4b81      	ldr	r3, [pc, #516]	; (8001e0c <HAL_RCC_OscConfig+0x4f8>)
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d0f0      	beq.n	8001bf2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	68db      	ldr	r3, [r3, #12]
 8001c14:	2b01      	cmp	r3, #1
 8001c16:	d106      	bne.n	8001c26 <HAL_RCC_OscConfig+0x312>
 8001c18:	4b7b      	ldr	r3, [pc, #492]	; (8001e08 <HAL_RCC_OscConfig+0x4f4>)
 8001c1a:	6a1b      	ldr	r3, [r3, #32]
 8001c1c:	4a7a      	ldr	r2, [pc, #488]	; (8001e08 <HAL_RCC_OscConfig+0x4f4>)
 8001c1e:	f043 0301 	orr.w	r3, r3, #1
 8001c22:	6213      	str	r3, [r2, #32]
 8001c24:	e02d      	b.n	8001c82 <HAL_RCC_OscConfig+0x36e>
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	68db      	ldr	r3, [r3, #12]
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d10c      	bne.n	8001c48 <HAL_RCC_OscConfig+0x334>
 8001c2e:	4b76      	ldr	r3, [pc, #472]	; (8001e08 <HAL_RCC_OscConfig+0x4f4>)
 8001c30:	6a1b      	ldr	r3, [r3, #32]
 8001c32:	4a75      	ldr	r2, [pc, #468]	; (8001e08 <HAL_RCC_OscConfig+0x4f4>)
 8001c34:	f023 0301 	bic.w	r3, r3, #1
 8001c38:	6213      	str	r3, [r2, #32]
 8001c3a:	4b73      	ldr	r3, [pc, #460]	; (8001e08 <HAL_RCC_OscConfig+0x4f4>)
 8001c3c:	6a1b      	ldr	r3, [r3, #32]
 8001c3e:	4a72      	ldr	r2, [pc, #456]	; (8001e08 <HAL_RCC_OscConfig+0x4f4>)
 8001c40:	f023 0304 	bic.w	r3, r3, #4
 8001c44:	6213      	str	r3, [r2, #32]
 8001c46:	e01c      	b.n	8001c82 <HAL_RCC_OscConfig+0x36e>
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	68db      	ldr	r3, [r3, #12]
 8001c4c:	2b05      	cmp	r3, #5
 8001c4e:	d10c      	bne.n	8001c6a <HAL_RCC_OscConfig+0x356>
 8001c50:	4b6d      	ldr	r3, [pc, #436]	; (8001e08 <HAL_RCC_OscConfig+0x4f4>)
 8001c52:	6a1b      	ldr	r3, [r3, #32]
 8001c54:	4a6c      	ldr	r2, [pc, #432]	; (8001e08 <HAL_RCC_OscConfig+0x4f4>)
 8001c56:	f043 0304 	orr.w	r3, r3, #4
 8001c5a:	6213      	str	r3, [r2, #32]
 8001c5c:	4b6a      	ldr	r3, [pc, #424]	; (8001e08 <HAL_RCC_OscConfig+0x4f4>)
 8001c5e:	6a1b      	ldr	r3, [r3, #32]
 8001c60:	4a69      	ldr	r2, [pc, #420]	; (8001e08 <HAL_RCC_OscConfig+0x4f4>)
 8001c62:	f043 0301 	orr.w	r3, r3, #1
 8001c66:	6213      	str	r3, [r2, #32]
 8001c68:	e00b      	b.n	8001c82 <HAL_RCC_OscConfig+0x36e>
 8001c6a:	4b67      	ldr	r3, [pc, #412]	; (8001e08 <HAL_RCC_OscConfig+0x4f4>)
 8001c6c:	6a1b      	ldr	r3, [r3, #32]
 8001c6e:	4a66      	ldr	r2, [pc, #408]	; (8001e08 <HAL_RCC_OscConfig+0x4f4>)
 8001c70:	f023 0301 	bic.w	r3, r3, #1
 8001c74:	6213      	str	r3, [r2, #32]
 8001c76:	4b64      	ldr	r3, [pc, #400]	; (8001e08 <HAL_RCC_OscConfig+0x4f4>)
 8001c78:	6a1b      	ldr	r3, [r3, #32]
 8001c7a:	4a63      	ldr	r2, [pc, #396]	; (8001e08 <HAL_RCC_OscConfig+0x4f4>)
 8001c7c:	f023 0304 	bic.w	r3, r3, #4
 8001c80:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	68db      	ldr	r3, [r3, #12]
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d015      	beq.n	8001cb6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c8a:	f7ff f907 	bl	8000e9c <HAL_GetTick>
 8001c8e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c90:	e00a      	b.n	8001ca8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c92:	f7ff f903 	bl	8000e9c <HAL_GetTick>
 8001c96:	4602      	mov	r2, r0
 8001c98:	693b      	ldr	r3, [r7, #16]
 8001c9a:	1ad3      	subs	r3, r2, r3
 8001c9c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ca0:	4293      	cmp	r3, r2
 8001ca2:	d901      	bls.n	8001ca8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001ca4:	2303      	movs	r3, #3
 8001ca6:	e0ab      	b.n	8001e00 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ca8:	4b57      	ldr	r3, [pc, #348]	; (8001e08 <HAL_RCC_OscConfig+0x4f4>)
 8001caa:	6a1b      	ldr	r3, [r3, #32]
 8001cac:	f003 0302 	and.w	r3, r3, #2
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d0ee      	beq.n	8001c92 <HAL_RCC_OscConfig+0x37e>
 8001cb4:	e014      	b.n	8001ce0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001cb6:	f7ff f8f1 	bl	8000e9c <HAL_GetTick>
 8001cba:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001cbc:	e00a      	b.n	8001cd4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001cbe:	f7ff f8ed 	bl	8000e9c <HAL_GetTick>
 8001cc2:	4602      	mov	r2, r0
 8001cc4:	693b      	ldr	r3, [r7, #16]
 8001cc6:	1ad3      	subs	r3, r2, r3
 8001cc8:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ccc:	4293      	cmp	r3, r2
 8001cce:	d901      	bls.n	8001cd4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001cd0:	2303      	movs	r3, #3
 8001cd2:	e095      	b.n	8001e00 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001cd4:	4b4c      	ldr	r3, [pc, #304]	; (8001e08 <HAL_RCC_OscConfig+0x4f4>)
 8001cd6:	6a1b      	ldr	r3, [r3, #32]
 8001cd8:	f003 0302 	and.w	r3, r3, #2
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d1ee      	bne.n	8001cbe <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001ce0:	7dfb      	ldrb	r3, [r7, #23]
 8001ce2:	2b01      	cmp	r3, #1
 8001ce4:	d105      	bne.n	8001cf2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001ce6:	4b48      	ldr	r3, [pc, #288]	; (8001e08 <HAL_RCC_OscConfig+0x4f4>)
 8001ce8:	69db      	ldr	r3, [r3, #28]
 8001cea:	4a47      	ldr	r2, [pc, #284]	; (8001e08 <HAL_RCC_OscConfig+0x4f4>)
 8001cec:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001cf0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	69db      	ldr	r3, [r3, #28]
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	f000 8081 	beq.w	8001dfe <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001cfc:	4b42      	ldr	r3, [pc, #264]	; (8001e08 <HAL_RCC_OscConfig+0x4f4>)
 8001cfe:	685b      	ldr	r3, [r3, #4]
 8001d00:	f003 030c 	and.w	r3, r3, #12
 8001d04:	2b08      	cmp	r3, #8
 8001d06:	d061      	beq.n	8001dcc <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	69db      	ldr	r3, [r3, #28]
 8001d0c:	2b02      	cmp	r3, #2
 8001d0e:	d146      	bne.n	8001d9e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d10:	4b3f      	ldr	r3, [pc, #252]	; (8001e10 <HAL_RCC_OscConfig+0x4fc>)
 8001d12:	2200      	movs	r2, #0
 8001d14:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d16:	f7ff f8c1 	bl	8000e9c <HAL_GetTick>
 8001d1a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001d1c:	e008      	b.n	8001d30 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d1e:	f7ff f8bd 	bl	8000e9c <HAL_GetTick>
 8001d22:	4602      	mov	r2, r0
 8001d24:	693b      	ldr	r3, [r7, #16]
 8001d26:	1ad3      	subs	r3, r2, r3
 8001d28:	2b02      	cmp	r3, #2
 8001d2a:	d901      	bls.n	8001d30 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001d2c:	2303      	movs	r3, #3
 8001d2e:	e067      	b.n	8001e00 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001d30:	4b35      	ldr	r3, [pc, #212]	; (8001e08 <HAL_RCC_OscConfig+0x4f4>)
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d1f0      	bne.n	8001d1e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	6a1b      	ldr	r3, [r3, #32]
 8001d40:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001d44:	d108      	bne.n	8001d58 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001d46:	4b30      	ldr	r3, [pc, #192]	; (8001e08 <HAL_RCC_OscConfig+0x4f4>)
 8001d48:	685b      	ldr	r3, [r3, #4]
 8001d4a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	689b      	ldr	r3, [r3, #8]
 8001d52:	492d      	ldr	r1, [pc, #180]	; (8001e08 <HAL_RCC_OscConfig+0x4f4>)
 8001d54:	4313      	orrs	r3, r2
 8001d56:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001d58:	4b2b      	ldr	r3, [pc, #172]	; (8001e08 <HAL_RCC_OscConfig+0x4f4>)
 8001d5a:	685b      	ldr	r3, [r3, #4]
 8001d5c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	6a19      	ldr	r1, [r3, #32]
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d68:	430b      	orrs	r3, r1
 8001d6a:	4927      	ldr	r1, [pc, #156]	; (8001e08 <HAL_RCC_OscConfig+0x4f4>)
 8001d6c:	4313      	orrs	r3, r2
 8001d6e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001d70:	4b27      	ldr	r3, [pc, #156]	; (8001e10 <HAL_RCC_OscConfig+0x4fc>)
 8001d72:	2201      	movs	r2, #1
 8001d74:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d76:	f7ff f891 	bl	8000e9c <HAL_GetTick>
 8001d7a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001d7c:	e008      	b.n	8001d90 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d7e:	f7ff f88d 	bl	8000e9c <HAL_GetTick>
 8001d82:	4602      	mov	r2, r0
 8001d84:	693b      	ldr	r3, [r7, #16]
 8001d86:	1ad3      	subs	r3, r2, r3
 8001d88:	2b02      	cmp	r3, #2
 8001d8a:	d901      	bls.n	8001d90 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001d8c:	2303      	movs	r3, #3
 8001d8e:	e037      	b.n	8001e00 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001d90:	4b1d      	ldr	r3, [pc, #116]	; (8001e08 <HAL_RCC_OscConfig+0x4f4>)
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d0f0      	beq.n	8001d7e <HAL_RCC_OscConfig+0x46a>
 8001d9c:	e02f      	b.n	8001dfe <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d9e:	4b1c      	ldr	r3, [pc, #112]	; (8001e10 <HAL_RCC_OscConfig+0x4fc>)
 8001da0:	2200      	movs	r2, #0
 8001da2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001da4:	f7ff f87a 	bl	8000e9c <HAL_GetTick>
 8001da8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001daa:	e008      	b.n	8001dbe <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001dac:	f7ff f876 	bl	8000e9c <HAL_GetTick>
 8001db0:	4602      	mov	r2, r0
 8001db2:	693b      	ldr	r3, [r7, #16]
 8001db4:	1ad3      	subs	r3, r2, r3
 8001db6:	2b02      	cmp	r3, #2
 8001db8:	d901      	bls.n	8001dbe <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001dba:	2303      	movs	r3, #3
 8001dbc:	e020      	b.n	8001e00 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001dbe:	4b12      	ldr	r3, [pc, #72]	; (8001e08 <HAL_RCC_OscConfig+0x4f4>)
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d1f0      	bne.n	8001dac <HAL_RCC_OscConfig+0x498>
 8001dca:	e018      	b.n	8001dfe <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	69db      	ldr	r3, [r3, #28]
 8001dd0:	2b01      	cmp	r3, #1
 8001dd2:	d101      	bne.n	8001dd8 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8001dd4:	2301      	movs	r3, #1
 8001dd6:	e013      	b.n	8001e00 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001dd8:	4b0b      	ldr	r3, [pc, #44]	; (8001e08 <HAL_RCC_OscConfig+0x4f4>)
 8001dda:	685b      	ldr	r3, [r3, #4]
 8001ddc:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	6a1b      	ldr	r3, [r3, #32]
 8001de8:	429a      	cmp	r2, r3
 8001dea:	d106      	bne.n	8001dfa <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001df6:	429a      	cmp	r2, r3
 8001df8:	d001      	beq.n	8001dfe <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8001dfa:	2301      	movs	r3, #1
 8001dfc:	e000      	b.n	8001e00 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8001dfe:	2300      	movs	r3, #0
}
 8001e00:	4618      	mov	r0, r3
 8001e02:	3718      	adds	r7, #24
 8001e04:	46bd      	mov	sp, r7
 8001e06:	bd80      	pop	{r7, pc}
 8001e08:	40021000 	.word	0x40021000
 8001e0c:	40007000 	.word	0x40007000
 8001e10:	42420060 	.word	0x42420060

08001e14 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001e14:	b580      	push	{r7, lr}
 8001e16:	b084      	sub	sp, #16
 8001e18:	af00      	add	r7, sp, #0
 8001e1a:	6078      	str	r0, [r7, #4]
 8001e1c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d101      	bne.n	8001e28 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001e24:	2301      	movs	r3, #1
 8001e26:	e0d0      	b.n	8001fca <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001e28:	4b6a      	ldr	r3, [pc, #424]	; (8001fd4 <HAL_RCC_ClockConfig+0x1c0>)
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	f003 0307 	and.w	r3, r3, #7
 8001e30:	683a      	ldr	r2, [r7, #0]
 8001e32:	429a      	cmp	r2, r3
 8001e34:	d910      	bls.n	8001e58 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e36:	4b67      	ldr	r3, [pc, #412]	; (8001fd4 <HAL_RCC_ClockConfig+0x1c0>)
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	f023 0207 	bic.w	r2, r3, #7
 8001e3e:	4965      	ldr	r1, [pc, #404]	; (8001fd4 <HAL_RCC_ClockConfig+0x1c0>)
 8001e40:	683b      	ldr	r3, [r7, #0]
 8001e42:	4313      	orrs	r3, r2
 8001e44:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e46:	4b63      	ldr	r3, [pc, #396]	; (8001fd4 <HAL_RCC_ClockConfig+0x1c0>)
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	f003 0307 	and.w	r3, r3, #7
 8001e4e:	683a      	ldr	r2, [r7, #0]
 8001e50:	429a      	cmp	r2, r3
 8001e52:	d001      	beq.n	8001e58 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001e54:	2301      	movs	r3, #1
 8001e56:	e0b8      	b.n	8001fca <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	f003 0302 	and.w	r3, r3, #2
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d020      	beq.n	8001ea6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	f003 0304 	and.w	r3, r3, #4
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d005      	beq.n	8001e7c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001e70:	4b59      	ldr	r3, [pc, #356]	; (8001fd8 <HAL_RCC_ClockConfig+0x1c4>)
 8001e72:	685b      	ldr	r3, [r3, #4]
 8001e74:	4a58      	ldr	r2, [pc, #352]	; (8001fd8 <HAL_RCC_ClockConfig+0x1c4>)
 8001e76:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001e7a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	f003 0308 	and.w	r3, r3, #8
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d005      	beq.n	8001e94 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001e88:	4b53      	ldr	r3, [pc, #332]	; (8001fd8 <HAL_RCC_ClockConfig+0x1c4>)
 8001e8a:	685b      	ldr	r3, [r3, #4]
 8001e8c:	4a52      	ldr	r2, [pc, #328]	; (8001fd8 <HAL_RCC_ClockConfig+0x1c4>)
 8001e8e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001e92:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001e94:	4b50      	ldr	r3, [pc, #320]	; (8001fd8 <HAL_RCC_ClockConfig+0x1c4>)
 8001e96:	685b      	ldr	r3, [r3, #4]
 8001e98:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	689b      	ldr	r3, [r3, #8]
 8001ea0:	494d      	ldr	r1, [pc, #308]	; (8001fd8 <HAL_RCC_ClockConfig+0x1c4>)
 8001ea2:	4313      	orrs	r3, r2
 8001ea4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	f003 0301 	and.w	r3, r3, #1
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d040      	beq.n	8001f34 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	685b      	ldr	r3, [r3, #4]
 8001eb6:	2b01      	cmp	r3, #1
 8001eb8:	d107      	bne.n	8001eca <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001eba:	4b47      	ldr	r3, [pc, #284]	; (8001fd8 <HAL_RCC_ClockConfig+0x1c4>)
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d115      	bne.n	8001ef2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001ec6:	2301      	movs	r3, #1
 8001ec8:	e07f      	b.n	8001fca <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	685b      	ldr	r3, [r3, #4]
 8001ece:	2b02      	cmp	r3, #2
 8001ed0:	d107      	bne.n	8001ee2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001ed2:	4b41      	ldr	r3, [pc, #260]	; (8001fd8 <HAL_RCC_ClockConfig+0x1c4>)
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d109      	bne.n	8001ef2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001ede:	2301      	movs	r3, #1
 8001ee0:	e073      	b.n	8001fca <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ee2:	4b3d      	ldr	r3, [pc, #244]	; (8001fd8 <HAL_RCC_ClockConfig+0x1c4>)
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	f003 0302 	and.w	r3, r3, #2
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d101      	bne.n	8001ef2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001eee:	2301      	movs	r3, #1
 8001ef0:	e06b      	b.n	8001fca <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001ef2:	4b39      	ldr	r3, [pc, #228]	; (8001fd8 <HAL_RCC_ClockConfig+0x1c4>)
 8001ef4:	685b      	ldr	r3, [r3, #4]
 8001ef6:	f023 0203 	bic.w	r2, r3, #3
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	685b      	ldr	r3, [r3, #4]
 8001efe:	4936      	ldr	r1, [pc, #216]	; (8001fd8 <HAL_RCC_ClockConfig+0x1c4>)
 8001f00:	4313      	orrs	r3, r2
 8001f02:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001f04:	f7fe ffca 	bl	8000e9c <HAL_GetTick>
 8001f08:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f0a:	e00a      	b.n	8001f22 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f0c:	f7fe ffc6 	bl	8000e9c <HAL_GetTick>
 8001f10:	4602      	mov	r2, r0
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	1ad3      	subs	r3, r2, r3
 8001f16:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f1a:	4293      	cmp	r3, r2
 8001f1c:	d901      	bls.n	8001f22 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001f1e:	2303      	movs	r3, #3
 8001f20:	e053      	b.n	8001fca <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f22:	4b2d      	ldr	r3, [pc, #180]	; (8001fd8 <HAL_RCC_ClockConfig+0x1c4>)
 8001f24:	685b      	ldr	r3, [r3, #4]
 8001f26:	f003 020c 	and.w	r2, r3, #12
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	685b      	ldr	r3, [r3, #4]
 8001f2e:	009b      	lsls	r3, r3, #2
 8001f30:	429a      	cmp	r2, r3
 8001f32:	d1eb      	bne.n	8001f0c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001f34:	4b27      	ldr	r3, [pc, #156]	; (8001fd4 <HAL_RCC_ClockConfig+0x1c0>)
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	f003 0307 	and.w	r3, r3, #7
 8001f3c:	683a      	ldr	r2, [r7, #0]
 8001f3e:	429a      	cmp	r2, r3
 8001f40:	d210      	bcs.n	8001f64 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f42:	4b24      	ldr	r3, [pc, #144]	; (8001fd4 <HAL_RCC_ClockConfig+0x1c0>)
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	f023 0207 	bic.w	r2, r3, #7
 8001f4a:	4922      	ldr	r1, [pc, #136]	; (8001fd4 <HAL_RCC_ClockConfig+0x1c0>)
 8001f4c:	683b      	ldr	r3, [r7, #0]
 8001f4e:	4313      	orrs	r3, r2
 8001f50:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f52:	4b20      	ldr	r3, [pc, #128]	; (8001fd4 <HAL_RCC_ClockConfig+0x1c0>)
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	f003 0307 	and.w	r3, r3, #7
 8001f5a:	683a      	ldr	r2, [r7, #0]
 8001f5c:	429a      	cmp	r2, r3
 8001f5e:	d001      	beq.n	8001f64 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001f60:	2301      	movs	r3, #1
 8001f62:	e032      	b.n	8001fca <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	f003 0304 	and.w	r3, r3, #4
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d008      	beq.n	8001f82 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001f70:	4b19      	ldr	r3, [pc, #100]	; (8001fd8 <HAL_RCC_ClockConfig+0x1c4>)
 8001f72:	685b      	ldr	r3, [r3, #4]
 8001f74:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	68db      	ldr	r3, [r3, #12]
 8001f7c:	4916      	ldr	r1, [pc, #88]	; (8001fd8 <HAL_RCC_ClockConfig+0x1c4>)
 8001f7e:	4313      	orrs	r3, r2
 8001f80:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	f003 0308 	and.w	r3, r3, #8
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d009      	beq.n	8001fa2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001f8e:	4b12      	ldr	r3, [pc, #72]	; (8001fd8 <HAL_RCC_ClockConfig+0x1c4>)
 8001f90:	685b      	ldr	r3, [r3, #4]
 8001f92:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	691b      	ldr	r3, [r3, #16]
 8001f9a:	00db      	lsls	r3, r3, #3
 8001f9c:	490e      	ldr	r1, [pc, #56]	; (8001fd8 <HAL_RCC_ClockConfig+0x1c4>)
 8001f9e:	4313      	orrs	r3, r2
 8001fa0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001fa2:	f000 f821 	bl	8001fe8 <HAL_RCC_GetSysClockFreq>
 8001fa6:	4602      	mov	r2, r0
 8001fa8:	4b0b      	ldr	r3, [pc, #44]	; (8001fd8 <HAL_RCC_ClockConfig+0x1c4>)
 8001faa:	685b      	ldr	r3, [r3, #4]
 8001fac:	091b      	lsrs	r3, r3, #4
 8001fae:	f003 030f 	and.w	r3, r3, #15
 8001fb2:	490a      	ldr	r1, [pc, #40]	; (8001fdc <HAL_RCC_ClockConfig+0x1c8>)
 8001fb4:	5ccb      	ldrb	r3, [r1, r3]
 8001fb6:	fa22 f303 	lsr.w	r3, r2, r3
 8001fba:	4a09      	ldr	r2, [pc, #36]	; (8001fe0 <HAL_RCC_ClockConfig+0x1cc>)
 8001fbc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001fbe:	4b09      	ldr	r3, [pc, #36]	; (8001fe4 <HAL_RCC_ClockConfig+0x1d0>)
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	4618      	mov	r0, r3
 8001fc4:	f7fe ff28 	bl	8000e18 <HAL_InitTick>

  return HAL_OK;
 8001fc8:	2300      	movs	r3, #0
}
 8001fca:	4618      	mov	r0, r3
 8001fcc:	3710      	adds	r7, #16
 8001fce:	46bd      	mov	sp, r7
 8001fd0:	bd80      	pop	{r7, pc}
 8001fd2:	bf00      	nop
 8001fd4:	40022000 	.word	0x40022000
 8001fd8:	40021000 	.word	0x40021000
 8001fdc:	080049e4 	.word	0x080049e4
 8001fe0:	20000000 	.word	0x20000000
 8001fe4:	20000004 	.word	0x20000004

08001fe8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001fe8:	b490      	push	{r4, r7}
 8001fea:	b08a      	sub	sp, #40	; 0x28
 8001fec:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001fee:	4b2a      	ldr	r3, [pc, #168]	; (8002098 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001ff0:	1d3c      	adds	r4, r7, #4
 8001ff2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001ff4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001ff8:	f240 2301 	movw	r3, #513	; 0x201
 8001ffc:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001ffe:	2300      	movs	r3, #0
 8002000:	61fb      	str	r3, [r7, #28]
 8002002:	2300      	movs	r3, #0
 8002004:	61bb      	str	r3, [r7, #24]
 8002006:	2300      	movs	r3, #0
 8002008:	627b      	str	r3, [r7, #36]	; 0x24
 800200a:	2300      	movs	r3, #0
 800200c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800200e:	2300      	movs	r3, #0
 8002010:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002012:	4b22      	ldr	r3, [pc, #136]	; (800209c <HAL_RCC_GetSysClockFreq+0xb4>)
 8002014:	685b      	ldr	r3, [r3, #4]
 8002016:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002018:	69fb      	ldr	r3, [r7, #28]
 800201a:	f003 030c 	and.w	r3, r3, #12
 800201e:	2b04      	cmp	r3, #4
 8002020:	d002      	beq.n	8002028 <HAL_RCC_GetSysClockFreq+0x40>
 8002022:	2b08      	cmp	r3, #8
 8002024:	d003      	beq.n	800202e <HAL_RCC_GetSysClockFreq+0x46>
 8002026:	e02d      	b.n	8002084 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002028:	4b1d      	ldr	r3, [pc, #116]	; (80020a0 <HAL_RCC_GetSysClockFreq+0xb8>)
 800202a:	623b      	str	r3, [r7, #32]
      break;
 800202c:	e02d      	b.n	800208a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800202e:	69fb      	ldr	r3, [r7, #28]
 8002030:	0c9b      	lsrs	r3, r3, #18
 8002032:	f003 030f 	and.w	r3, r3, #15
 8002036:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800203a:	4413      	add	r3, r2
 800203c:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002040:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002042:	69fb      	ldr	r3, [r7, #28]
 8002044:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002048:	2b00      	cmp	r3, #0
 800204a:	d013      	beq.n	8002074 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800204c:	4b13      	ldr	r3, [pc, #76]	; (800209c <HAL_RCC_GetSysClockFreq+0xb4>)
 800204e:	685b      	ldr	r3, [r3, #4]
 8002050:	0c5b      	lsrs	r3, r3, #17
 8002052:	f003 0301 	and.w	r3, r3, #1
 8002056:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800205a:	4413      	add	r3, r2
 800205c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002060:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002062:	697b      	ldr	r3, [r7, #20]
 8002064:	4a0e      	ldr	r2, [pc, #56]	; (80020a0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002066:	fb02 f203 	mul.w	r2, r2, r3
 800206a:	69bb      	ldr	r3, [r7, #24]
 800206c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002070:	627b      	str	r3, [r7, #36]	; 0x24
 8002072:	e004      	b.n	800207e <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002074:	697b      	ldr	r3, [r7, #20]
 8002076:	4a0b      	ldr	r2, [pc, #44]	; (80020a4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002078:	fb02 f303 	mul.w	r3, r2, r3
 800207c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800207e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002080:	623b      	str	r3, [r7, #32]
      break;
 8002082:	e002      	b.n	800208a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002084:	4b06      	ldr	r3, [pc, #24]	; (80020a0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002086:	623b      	str	r3, [r7, #32]
      break;
 8002088:	bf00      	nop
    }
  }
  return sysclockfreq;
 800208a:	6a3b      	ldr	r3, [r7, #32]
}
 800208c:	4618      	mov	r0, r3
 800208e:	3728      	adds	r7, #40	; 0x28
 8002090:	46bd      	mov	sp, r7
 8002092:	bc90      	pop	{r4, r7}
 8002094:	4770      	bx	lr
 8002096:	bf00      	nop
 8002098:	080049d4 	.word	0x080049d4
 800209c:	40021000 	.word	0x40021000
 80020a0:	007a1200 	.word	0x007a1200
 80020a4:	003d0900 	.word	0x003d0900

080020a8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80020a8:	b480      	push	{r7}
 80020aa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80020ac:	4b02      	ldr	r3, [pc, #8]	; (80020b8 <HAL_RCC_GetHCLKFreq+0x10>)
 80020ae:	681b      	ldr	r3, [r3, #0]
}
 80020b0:	4618      	mov	r0, r3
 80020b2:	46bd      	mov	sp, r7
 80020b4:	bc80      	pop	{r7}
 80020b6:	4770      	bx	lr
 80020b8:	20000000 	.word	0x20000000

080020bc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80020bc:	b580      	push	{r7, lr}
 80020be:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80020c0:	f7ff fff2 	bl	80020a8 <HAL_RCC_GetHCLKFreq>
 80020c4:	4602      	mov	r2, r0
 80020c6:	4b05      	ldr	r3, [pc, #20]	; (80020dc <HAL_RCC_GetPCLK1Freq+0x20>)
 80020c8:	685b      	ldr	r3, [r3, #4]
 80020ca:	0a1b      	lsrs	r3, r3, #8
 80020cc:	f003 0307 	and.w	r3, r3, #7
 80020d0:	4903      	ldr	r1, [pc, #12]	; (80020e0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80020d2:	5ccb      	ldrb	r3, [r1, r3]
 80020d4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80020d8:	4618      	mov	r0, r3
 80020da:	bd80      	pop	{r7, pc}
 80020dc:	40021000 	.word	0x40021000
 80020e0:	080049f4 	.word	0x080049f4

080020e4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80020e4:	b580      	push	{r7, lr}
 80020e6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80020e8:	f7ff ffde 	bl	80020a8 <HAL_RCC_GetHCLKFreq>
 80020ec:	4602      	mov	r2, r0
 80020ee:	4b05      	ldr	r3, [pc, #20]	; (8002104 <HAL_RCC_GetPCLK2Freq+0x20>)
 80020f0:	685b      	ldr	r3, [r3, #4]
 80020f2:	0adb      	lsrs	r3, r3, #11
 80020f4:	f003 0307 	and.w	r3, r3, #7
 80020f8:	4903      	ldr	r1, [pc, #12]	; (8002108 <HAL_RCC_GetPCLK2Freq+0x24>)
 80020fa:	5ccb      	ldrb	r3, [r1, r3]
 80020fc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002100:	4618      	mov	r0, r3
 8002102:	bd80      	pop	{r7, pc}
 8002104:	40021000 	.word	0x40021000
 8002108:	080049f4 	.word	0x080049f4

0800210c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800210c:	b480      	push	{r7}
 800210e:	b085      	sub	sp, #20
 8002110:	af00      	add	r7, sp, #0
 8002112:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002114:	4b0a      	ldr	r3, [pc, #40]	; (8002140 <RCC_Delay+0x34>)
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	4a0a      	ldr	r2, [pc, #40]	; (8002144 <RCC_Delay+0x38>)
 800211a:	fba2 2303 	umull	r2, r3, r2, r3
 800211e:	0a5b      	lsrs	r3, r3, #9
 8002120:	687a      	ldr	r2, [r7, #4]
 8002122:	fb02 f303 	mul.w	r3, r2, r3
 8002126:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002128:	bf00      	nop
  }
  while (Delay --);
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	1e5a      	subs	r2, r3, #1
 800212e:	60fa      	str	r2, [r7, #12]
 8002130:	2b00      	cmp	r3, #0
 8002132:	d1f9      	bne.n	8002128 <RCC_Delay+0x1c>
}
 8002134:	bf00      	nop
 8002136:	bf00      	nop
 8002138:	3714      	adds	r7, #20
 800213a:	46bd      	mov	sp, r7
 800213c:	bc80      	pop	{r7}
 800213e:	4770      	bx	lr
 8002140:	20000000 	.word	0x20000000
 8002144:	10624dd3 	.word	0x10624dd3

08002148 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002148:	b580      	push	{r7, lr}
 800214a:	b082      	sub	sp, #8
 800214c:	af00      	add	r7, sp, #0
 800214e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	2b00      	cmp	r3, #0
 8002154:	d101      	bne.n	800215a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002156:	2301      	movs	r3, #1
 8002158:	e041      	b.n	80021de <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002160:	b2db      	uxtb	r3, r3
 8002162:	2b00      	cmp	r3, #0
 8002164:	d106      	bne.n	8002174 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	2200      	movs	r2, #0
 800216a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800216e:	6878      	ldr	r0, [r7, #4]
 8002170:	f7fe fb0e 	bl	8000790 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	2202      	movs	r2, #2
 8002178:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681a      	ldr	r2, [r3, #0]
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	3304      	adds	r3, #4
 8002184:	4619      	mov	r1, r3
 8002186:	4610      	mov	r0, r2
 8002188:	f001 f8ee 	bl	8003368 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	2201      	movs	r2, #1
 8002190:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	2201      	movs	r2, #1
 8002198:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	2201      	movs	r2, #1
 80021a0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	2201      	movs	r2, #1
 80021a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	2201      	movs	r2, #1
 80021b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	2201      	movs	r2, #1
 80021b8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	2201      	movs	r2, #1
 80021c0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	2201      	movs	r2, #1
 80021c8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	2201      	movs	r2, #1
 80021d0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	2201      	movs	r2, #1
 80021d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80021dc:	2300      	movs	r3, #0
}
 80021de:	4618      	mov	r0, r3
 80021e0:	3708      	adds	r7, #8
 80021e2:	46bd      	mov	sp, r7
 80021e4:	bd80      	pop	{r7, pc}
	...

080021e8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80021e8:	b480      	push	{r7}
 80021ea:	b085      	sub	sp, #20
 80021ec:	af00      	add	r7, sp, #0
 80021ee:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80021f6:	b2db      	uxtb	r3, r3
 80021f8:	2b01      	cmp	r3, #1
 80021fa:	d001      	beq.n	8002200 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80021fc:	2301      	movs	r3, #1
 80021fe:	e03a      	b.n	8002276 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	2202      	movs	r2, #2
 8002204:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	68da      	ldr	r2, [r3, #12]
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	f042 0201 	orr.w	r2, r2, #1
 8002216:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	4a18      	ldr	r2, [pc, #96]	; (8002280 <HAL_TIM_Base_Start_IT+0x98>)
 800221e:	4293      	cmp	r3, r2
 8002220:	d00e      	beq.n	8002240 <HAL_TIM_Base_Start_IT+0x58>
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800222a:	d009      	beq.n	8002240 <HAL_TIM_Base_Start_IT+0x58>
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	4a14      	ldr	r2, [pc, #80]	; (8002284 <HAL_TIM_Base_Start_IT+0x9c>)
 8002232:	4293      	cmp	r3, r2
 8002234:	d004      	beq.n	8002240 <HAL_TIM_Base_Start_IT+0x58>
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	4a13      	ldr	r2, [pc, #76]	; (8002288 <HAL_TIM_Base_Start_IT+0xa0>)
 800223c:	4293      	cmp	r3, r2
 800223e:	d111      	bne.n	8002264 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	689b      	ldr	r3, [r3, #8]
 8002246:	f003 0307 	and.w	r3, r3, #7
 800224a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	2b06      	cmp	r3, #6
 8002250:	d010      	beq.n	8002274 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	681a      	ldr	r2, [r3, #0]
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	f042 0201 	orr.w	r2, r2, #1
 8002260:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002262:	e007      	b.n	8002274 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	681a      	ldr	r2, [r3, #0]
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	f042 0201 	orr.w	r2, r2, #1
 8002272:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002274:	2300      	movs	r3, #0
}
 8002276:	4618      	mov	r0, r3
 8002278:	3714      	adds	r7, #20
 800227a:	46bd      	mov	sp, r7
 800227c:	bc80      	pop	{r7}
 800227e:	4770      	bx	lr
 8002280:	40012c00 	.word	0x40012c00
 8002284:	40000400 	.word	0x40000400
 8002288:	40000800 	.word	0x40000800

0800228c <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 800228c:	b580      	push	{r7, lr}
 800228e:	b082      	sub	sp, #8
 8002290:	af00      	add	r7, sp, #0
 8002292:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	2b00      	cmp	r3, #0
 8002298:	d101      	bne.n	800229e <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 800229a:	2301      	movs	r3, #1
 800229c:	e041      	b.n	8002322 <HAL_TIM_OC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80022a4:	b2db      	uxtb	r3, r3
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d106      	bne.n	80022b8 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	2200      	movs	r2, #0
 80022ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 80022b2:	6878      	ldr	r0, [r7, #4]
 80022b4:	f000 f839 	bl	800232a <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	2202      	movs	r2, #2
 80022bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681a      	ldr	r2, [r3, #0]
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	3304      	adds	r3, #4
 80022c8:	4619      	mov	r1, r3
 80022ca:	4610      	mov	r0, r2
 80022cc:	f001 f84c 	bl	8003368 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	2201      	movs	r2, #1
 80022d4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	2201      	movs	r2, #1
 80022dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	2201      	movs	r2, #1
 80022e4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	2201      	movs	r2, #1
 80022ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	2201      	movs	r2, #1
 80022f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	2201      	movs	r2, #1
 80022fc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	2201      	movs	r2, #1
 8002304:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	2201      	movs	r2, #1
 800230c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	2201      	movs	r2, #1
 8002314:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	2201      	movs	r2, #1
 800231c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002320:	2300      	movs	r3, #0
}
 8002322:	4618      	mov	r0, r3
 8002324:	3708      	adds	r7, #8
 8002326:	46bd      	mov	sp, r7
 8002328:	bd80      	pop	{r7, pc}

0800232a <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 800232a:	b480      	push	{r7}
 800232c:	b083      	sub	sp, #12
 800232e:	af00      	add	r7, sp, #0
 8002330:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8002332:	bf00      	nop
 8002334:	370c      	adds	r7, #12
 8002336:	46bd      	mov	sp, r7
 8002338:	bc80      	pop	{r7}
 800233a:	4770      	bx	lr

0800233c <HAL_TIM_OC_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800233c:	b580      	push	{r7, lr}
 800233e:	b084      	sub	sp, #16
 8002340:	af00      	add	r7, sp, #0
 8002342:	6078      	str	r0, [r7, #4]
 8002344:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002346:	683b      	ldr	r3, [r7, #0]
 8002348:	2b00      	cmp	r3, #0
 800234a:	d109      	bne.n	8002360 <HAL_TIM_OC_Start+0x24>
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002352:	b2db      	uxtb	r3, r3
 8002354:	2b01      	cmp	r3, #1
 8002356:	bf14      	ite	ne
 8002358:	2301      	movne	r3, #1
 800235a:	2300      	moveq	r3, #0
 800235c:	b2db      	uxtb	r3, r3
 800235e:	e022      	b.n	80023a6 <HAL_TIM_OC_Start+0x6a>
 8002360:	683b      	ldr	r3, [r7, #0]
 8002362:	2b04      	cmp	r3, #4
 8002364:	d109      	bne.n	800237a <HAL_TIM_OC_Start+0x3e>
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800236c:	b2db      	uxtb	r3, r3
 800236e:	2b01      	cmp	r3, #1
 8002370:	bf14      	ite	ne
 8002372:	2301      	movne	r3, #1
 8002374:	2300      	moveq	r3, #0
 8002376:	b2db      	uxtb	r3, r3
 8002378:	e015      	b.n	80023a6 <HAL_TIM_OC_Start+0x6a>
 800237a:	683b      	ldr	r3, [r7, #0]
 800237c:	2b08      	cmp	r3, #8
 800237e:	d109      	bne.n	8002394 <HAL_TIM_OC_Start+0x58>
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002386:	b2db      	uxtb	r3, r3
 8002388:	2b01      	cmp	r3, #1
 800238a:	bf14      	ite	ne
 800238c:	2301      	movne	r3, #1
 800238e:	2300      	moveq	r3, #0
 8002390:	b2db      	uxtb	r3, r3
 8002392:	e008      	b.n	80023a6 <HAL_TIM_OC_Start+0x6a>
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800239a:	b2db      	uxtb	r3, r3
 800239c:	2b01      	cmp	r3, #1
 800239e:	bf14      	ite	ne
 80023a0:	2301      	movne	r3, #1
 80023a2:	2300      	moveq	r3, #0
 80023a4:	b2db      	uxtb	r3, r3
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d001      	beq.n	80023ae <HAL_TIM_OC_Start+0x72>
  {
    return HAL_ERROR;
 80023aa:	2301      	movs	r3, #1
 80023ac:	e05e      	b.n	800246c <HAL_TIM_OC_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80023ae:	683b      	ldr	r3, [r7, #0]
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d104      	bne.n	80023be <HAL_TIM_OC_Start+0x82>
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	2202      	movs	r2, #2
 80023b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80023bc:	e013      	b.n	80023e6 <HAL_TIM_OC_Start+0xaa>
 80023be:	683b      	ldr	r3, [r7, #0]
 80023c0:	2b04      	cmp	r3, #4
 80023c2:	d104      	bne.n	80023ce <HAL_TIM_OC_Start+0x92>
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	2202      	movs	r2, #2
 80023c8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80023cc:	e00b      	b.n	80023e6 <HAL_TIM_OC_Start+0xaa>
 80023ce:	683b      	ldr	r3, [r7, #0]
 80023d0:	2b08      	cmp	r3, #8
 80023d2:	d104      	bne.n	80023de <HAL_TIM_OC_Start+0xa2>
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	2202      	movs	r2, #2
 80023d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80023dc:	e003      	b.n	80023e6 <HAL_TIM_OC_Start+0xaa>
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	2202      	movs	r2, #2
 80023e2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Output compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	2201      	movs	r2, #1
 80023ec:	6839      	ldr	r1, [r7, #0]
 80023ee:	4618      	mov	r0, r3
 80023f0:	f001 fbd5 	bl	8003b9e <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	4a1e      	ldr	r2, [pc, #120]	; (8002474 <HAL_TIM_OC_Start+0x138>)
 80023fa:	4293      	cmp	r3, r2
 80023fc:	d107      	bne.n	800240e <HAL_TIM_OC_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800240c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	4a18      	ldr	r2, [pc, #96]	; (8002474 <HAL_TIM_OC_Start+0x138>)
 8002414:	4293      	cmp	r3, r2
 8002416:	d00e      	beq.n	8002436 <HAL_TIM_OC_Start+0xfa>
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002420:	d009      	beq.n	8002436 <HAL_TIM_OC_Start+0xfa>
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	4a14      	ldr	r2, [pc, #80]	; (8002478 <HAL_TIM_OC_Start+0x13c>)
 8002428:	4293      	cmp	r3, r2
 800242a:	d004      	beq.n	8002436 <HAL_TIM_OC_Start+0xfa>
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	4a12      	ldr	r2, [pc, #72]	; (800247c <HAL_TIM_OC_Start+0x140>)
 8002432:	4293      	cmp	r3, r2
 8002434:	d111      	bne.n	800245a <HAL_TIM_OC_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	689b      	ldr	r3, [r3, #8]
 800243c:	f003 0307 	and.w	r3, r3, #7
 8002440:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	2b06      	cmp	r3, #6
 8002446:	d010      	beq.n	800246a <HAL_TIM_OC_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	681a      	ldr	r2, [r3, #0]
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	f042 0201 	orr.w	r2, r2, #1
 8002456:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002458:	e007      	b.n	800246a <HAL_TIM_OC_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	681a      	ldr	r2, [r3, #0]
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	f042 0201 	orr.w	r2, r2, #1
 8002468:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800246a:	2300      	movs	r3, #0
}
 800246c:	4618      	mov	r0, r3
 800246e:	3710      	adds	r7, #16
 8002470:	46bd      	mov	sp, r7
 8002472:	bd80      	pop	{r7, pc}
 8002474:	40012c00 	.word	0x40012c00
 8002478:	40000400 	.word	0x40000400
 800247c:	40000800 	.word	0x40000800

08002480 <HAL_TIM_OC_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002480:	b580      	push	{r7, lr}
 8002482:	b082      	sub	sp, #8
 8002484:	af00      	add	r7, sp, #0
 8002486:	6078      	str	r0, [r7, #4]
 8002488:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Output compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	2200      	movs	r2, #0
 8002490:	6839      	ldr	r1, [r7, #0]
 8002492:	4618      	mov	r0, r3
 8002494:	f001 fb83 	bl	8003b9e <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	4a29      	ldr	r2, [pc, #164]	; (8002544 <HAL_TIM_OC_Stop+0xc4>)
 800249e:	4293      	cmp	r3, r2
 80024a0:	d117      	bne.n	80024d2 <HAL_TIM_OC_Stop+0x52>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	6a1a      	ldr	r2, [r3, #32]
 80024a8:	f241 1311 	movw	r3, #4369	; 0x1111
 80024ac:	4013      	ands	r3, r2
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d10f      	bne.n	80024d2 <HAL_TIM_OC_Stop+0x52>
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	6a1a      	ldr	r2, [r3, #32]
 80024b8:	f240 4344 	movw	r3, #1092	; 0x444
 80024bc:	4013      	ands	r3, r2
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d107      	bne.n	80024d2 <HAL_TIM_OC_Stop+0x52>
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80024d0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	6a1a      	ldr	r2, [r3, #32]
 80024d8:	f241 1311 	movw	r3, #4369	; 0x1111
 80024dc:	4013      	ands	r3, r2
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d10f      	bne.n	8002502 <HAL_TIM_OC_Stop+0x82>
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	6a1a      	ldr	r2, [r3, #32]
 80024e8:	f240 4344 	movw	r3, #1092	; 0x444
 80024ec:	4013      	ands	r3, r2
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d107      	bne.n	8002502 <HAL_TIM_OC_Stop+0x82>
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	681a      	ldr	r2, [r3, #0]
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	f022 0201 	bic.w	r2, r2, #1
 8002500:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8002502:	683b      	ldr	r3, [r7, #0]
 8002504:	2b00      	cmp	r3, #0
 8002506:	d104      	bne.n	8002512 <HAL_TIM_OC_Stop+0x92>
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	2201      	movs	r2, #1
 800250c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002510:	e013      	b.n	800253a <HAL_TIM_OC_Stop+0xba>
 8002512:	683b      	ldr	r3, [r7, #0]
 8002514:	2b04      	cmp	r3, #4
 8002516:	d104      	bne.n	8002522 <HAL_TIM_OC_Stop+0xa2>
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	2201      	movs	r2, #1
 800251c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002520:	e00b      	b.n	800253a <HAL_TIM_OC_Stop+0xba>
 8002522:	683b      	ldr	r3, [r7, #0]
 8002524:	2b08      	cmp	r3, #8
 8002526:	d104      	bne.n	8002532 <HAL_TIM_OC_Stop+0xb2>
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	2201      	movs	r2, #1
 800252c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002530:	e003      	b.n	800253a <HAL_TIM_OC_Stop+0xba>
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	2201      	movs	r2, #1
 8002536:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Return function status */
  return HAL_OK;
 800253a:	2300      	movs	r3, #0
}
 800253c:	4618      	mov	r0, r3
 800253e:	3708      	adds	r7, #8
 8002540:	46bd      	mov	sp, r7
 8002542:	bd80      	pop	{r7, pc}
 8002544:	40012c00 	.word	0x40012c00

08002548 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8002548:	b580      	push	{r7, lr}
 800254a:	b082      	sub	sp, #8
 800254c:	af00      	add	r7, sp, #0
 800254e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	2b00      	cmp	r3, #0
 8002554:	d101      	bne.n	800255a <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8002556:	2301      	movs	r3, #1
 8002558:	e041      	b.n	80025de <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002560:	b2db      	uxtb	r3, r3
 8002562:	2b00      	cmp	r3, #0
 8002564:	d106      	bne.n	8002574 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	2200      	movs	r2, #0
 800256a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 800256e:	6878      	ldr	r0, [r7, #4]
 8002570:	f000 f839 	bl	80025e6 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	2202      	movs	r2, #2
 8002578:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681a      	ldr	r2, [r3, #0]
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	3304      	adds	r3, #4
 8002584:	4619      	mov	r1, r3
 8002586:	4610      	mov	r0, r2
 8002588:	f000 feee 	bl	8003368 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	2201      	movs	r2, #1
 8002590:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	2201      	movs	r2, #1
 8002598:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	2201      	movs	r2, #1
 80025a0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	2201      	movs	r2, #1
 80025a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	2201      	movs	r2, #1
 80025b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	2201      	movs	r2, #1
 80025b8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	2201      	movs	r2, #1
 80025c0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	2201      	movs	r2, #1
 80025c8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	2201      	movs	r2, #1
 80025d0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	2201      	movs	r2, #1
 80025d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80025dc:	2300      	movs	r3, #0
}
 80025de:	4618      	mov	r0, r3
 80025e0:	3708      	adds	r7, #8
 80025e2:	46bd      	mov	sp, r7
 80025e4:	bd80      	pop	{r7, pc}

080025e6 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 80025e6:	b480      	push	{r7}
 80025e8:	b083      	sub	sp, #12
 80025ea:	af00      	add	r7, sp, #0
 80025ec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 80025ee:	bf00      	nop
 80025f0:	370c      	adds	r7, #12
 80025f2:	46bd      	mov	sp, r7
 80025f4:	bc80      	pop	{r7}
 80025f6:	4770      	bx	lr

080025f8 <HAL_TIM_IC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from TIM peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, uint32_t *pData, uint16_t Length)
{
 80025f8:	b580      	push	{r7, lr}
 80025fa:	b086      	sub	sp, #24
 80025fc:	af00      	add	r7, sp, #0
 80025fe:	60f8      	str	r0, [r7, #12]
 8002600:	60b9      	str	r1, [r7, #8]
 8002602:	607a      	str	r2, [r7, #4]
 8002604:	807b      	strh	r3, [r7, #2]
  uint32_t tmpsmcr;
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8002606:	68bb      	ldr	r3, [r7, #8]
 8002608:	2b00      	cmp	r3, #0
 800260a:	d104      	bne.n	8002616 <HAL_TIM_IC_Start_DMA+0x1e>
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002612:	b2db      	uxtb	r3, r3
 8002614:	e013      	b.n	800263e <HAL_TIM_IC_Start_DMA+0x46>
 8002616:	68bb      	ldr	r3, [r7, #8]
 8002618:	2b04      	cmp	r3, #4
 800261a:	d104      	bne.n	8002626 <HAL_TIM_IC_Start_DMA+0x2e>
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002622:	b2db      	uxtb	r3, r3
 8002624:	e00b      	b.n	800263e <HAL_TIM_IC_Start_DMA+0x46>
 8002626:	68bb      	ldr	r3, [r7, #8]
 8002628:	2b08      	cmp	r3, #8
 800262a:	d104      	bne.n	8002636 <HAL_TIM_IC_Start_DMA+0x3e>
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002632:	b2db      	uxtb	r3, r3
 8002634:	e003      	b.n	800263e <HAL_TIM_IC_Start_DMA+0x46>
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800263c:	b2db      	uxtb	r3, r3
 800263e:	75fb      	strb	r3, [r7, #23]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8002640:	68bb      	ldr	r3, [r7, #8]
 8002642:	2b00      	cmp	r3, #0
 8002644:	d104      	bne.n	8002650 <HAL_TIM_IC_Start_DMA+0x58>
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800264c:	b2db      	uxtb	r3, r3
 800264e:	e013      	b.n	8002678 <HAL_TIM_IC_Start_DMA+0x80>
 8002650:	68bb      	ldr	r3, [r7, #8]
 8002652:	2b04      	cmp	r3, #4
 8002654:	d104      	bne.n	8002660 <HAL_TIM_IC_Start_DMA+0x68>
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800265c:	b2db      	uxtb	r3, r3
 800265e:	e00b      	b.n	8002678 <HAL_TIM_IC_Start_DMA+0x80>
 8002660:	68bb      	ldr	r3, [r7, #8]
 8002662:	2b08      	cmp	r3, #8
 8002664:	d104      	bne.n	8002670 <HAL_TIM_IC_Start_DMA+0x78>
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800266c:	b2db      	uxtb	r3, r3
 800266e:	e003      	b.n	8002678 <HAL_TIM_IC_Start_DMA+0x80>
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002676:	b2db      	uxtb	r3, r3
 8002678:	75bb      	strb	r3, [r7, #22]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
  assert_param(IS_TIM_DMA_CC_INSTANCE(htim->Instance));

  /* Set the TIM channel state */
  if ((channel_state == HAL_TIM_CHANNEL_STATE_BUSY)
 800267a:	7dfb      	ldrb	r3, [r7, #23]
 800267c:	2b02      	cmp	r3, #2
 800267e:	d002      	beq.n	8002686 <HAL_TIM_IC_Start_DMA+0x8e>
      || (complementary_channel_state == HAL_TIM_CHANNEL_STATE_BUSY))
 8002680:	7dbb      	ldrb	r3, [r7, #22]
 8002682:	2b02      	cmp	r3, #2
 8002684:	d101      	bne.n	800268a <HAL_TIM_IC_Start_DMA+0x92>
  {
    return HAL_BUSY;
 8002686:	2302      	movs	r3, #2
 8002688:	e130      	b.n	80028ec <HAL_TIM_IC_Start_DMA+0x2f4>
  }
  else if ((channel_state == HAL_TIM_CHANNEL_STATE_READY)
 800268a:	7dfb      	ldrb	r3, [r7, #23]
 800268c:	2b01      	cmp	r3, #1
 800268e:	d143      	bne.n	8002718 <HAL_TIM_IC_Start_DMA+0x120>
           && (complementary_channel_state == HAL_TIM_CHANNEL_STATE_READY))
 8002690:	7dbb      	ldrb	r3, [r7, #22]
 8002692:	2b01      	cmp	r3, #1
 8002694:	d140      	bne.n	8002718 <HAL_TIM_IC_Start_DMA+0x120>
  {
    if ((pData == NULL) && (Length > 0U))
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	2b00      	cmp	r3, #0
 800269a:	d104      	bne.n	80026a6 <HAL_TIM_IC_Start_DMA+0xae>
 800269c:	887b      	ldrh	r3, [r7, #2]
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d001      	beq.n	80026a6 <HAL_TIM_IC_Start_DMA+0xae>
    {
      return HAL_ERROR;
 80026a2:	2301      	movs	r3, #1
 80026a4:	e122      	b.n	80028ec <HAL_TIM_IC_Start_DMA+0x2f4>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80026a6:	68bb      	ldr	r3, [r7, #8]
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d104      	bne.n	80026b6 <HAL_TIM_IC_Start_DMA+0xbe>
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	2202      	movs	r2, #2
 80026b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80026b4:	e013      	b.n	80026de <HAL_TIM_IC_Start_DMA+0xe6>
 80026b6:	68bb      	ldr	r3, [r7, #8]
 80026b8:	2b04      	cmp	r3, #4
 80026ba:	d104      	bne.n	80026c6 <HAL_TIM_IC_Start_DMA+0xce>
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	2202      	movs	r2, #2
 80026c0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80026c4:	e00b      	b.n	80026de <HAL_TIM_IC_Start_DMA+0xe6>
 80026c6:	68bb      	ldr	r3, [r7, #8]
 80026c8:	2b08      	cmp	r3, #8
 80026ca:	d104      	bne.n	80026d6 <HAL_TIM_IC_Start_DMA+0xde>
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	2202      	movs	r2, #2
 80026d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80026d4:	e003      	b.n	80026de <HAL_TIM_IC_Start_DMA+0xe6>
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	2202      	movs	r2, #2
 80026da:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80026de:	68bb      	ldr	r3, [r7, #8]
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d104      	bne.n	80026ee <HAL_TIM_IC_Start_DMA+0xf6>
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	2202      	movs	r2, #2
 80026e8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    if ((pData == NULL) && (Length > 0U))
 80026ec:	e016      	b.n	800271c <HAL_TIM_IC_Start_DMA+0x124>
      TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80026ee:	68bb      	ldr	r3, [r7, #8]
 80026f0:	2b04      	cmp	r3, #4
 80026f2:	d104      	bne.n	80026fe <HAL_TIM_IC_Start_DMA+0x106>
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	2202      	movs	r2, #2
 80026f8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    if ((pData == NULL) && (Length > 0U))
 80026fc:	e00e      	b.n	800271c <HAL_TIM_IC_Start_DMA+0x124>
      TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80026fe:	68bb      	ldr	r3, [r7, #8]
 8002700:	2b08      	cmp	r3, #8
 8002702:	d104      	bne.n	800270e <HAL_TIM_IC_Start_DMA+0x116>
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	2202      	movs	r2, #2
 8002708:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    if ((pData == NULL) && (Length > 0U))
 800270c:	e006      	b.n	800271c <HAL_TIM_IC_Start_DMA+0x124>
      TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	2202      	movs	r2, #2
 8002712:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    if ((pData == NULL) && (Length > 0U))
 8002716:	e001      	b.n	800271c <HAL_TIM_IC_Start_DMA+0x124>
    }
  }
  else
  {
    return HAL_ERROR;
 8002718:	2301      	movs	r3, #1
 800271a:	e0e7      	b.n	80028ec <HAL_TIM_IC_Start_DMA+0x2f4>
  }

  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	2201      	movs	r2, #1
 8002722:	68b9      	ldr	r1, [r7, #8]
 8002724:	4618      	mov	r0, r3
 8002726:	f001 fa3a 	bl	8003b9e <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	4a71      	ldr	r2, [pc, #452]	; (80028f4 <HAL_TIM_IC_Start_DMA+0x2fc>)
 8002730:	4293      	cmp	r3, r2
 8002732:	d00e      	beq.n	8002752 <HAL_TIM_IC_Start_DMA+0x15a>
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800273c:	d009      	beq.n	8002752 <HAL_TIM_IC_Start_DMA+0x15a>
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	4a6d      	ldr	r2, [pc, #436]	; (80028f8 <HAL_TIM_IC_Start_DMA+0x300>)
 8002744:	4293      	cmp	r3, r2
 8002746:	d004      	beq.n	8002752 <HAL_TIM_IC_Start_DMA+0x15a>
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	4a6b      	ldr	r2, [pc, #428]	; (80028fc <HAL_TIM_IC_Start_DMA+0x304>)
 800274e:	4293      	cmp	r3, r2
 8002750:	d111      	bne.n	8002776 <HAL_TIM_IC_Start_DMA+0x17e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	689b      	ldr	r3, [r3, #8]
 8002758:	f003 0307 	and.w	r3, r3, #7
 800275c:	613b      	str	r3, [r7, #16]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800275e:	693b      	ldr	r3, [r7, #16]
 8002760:	2b06      	cmp	r3, #6
 8002762:	d010      	beq.n	8002786 <HAL_TIM_IC_Start_DMA+0x18e>
    {
      __HAL_TIM_ENABLE(htim);
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	681a      	ldr	r2, [r3, #0]
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	f042 0201 	orr.w	r2, r2, #1
 8002772:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002774:	e007      	b.n	8002786 <HAL_TIM_IC_Start_DMA+0x18e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	681a      	ldr	r2, [r3, #0]
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	f042 0201 	orr.w	r2, r2, #1
 8002784:	601a      	str	r2, [r3, #0]
 8002786:	68bb      	ldr	r3, [r7, #8]
 8002788:	2b0c      	cmp	r3, #12
 800278a:	f200 80ad 	bhi.w	80028e8 <HAL_TIM_IC_Start_DMA+0x2f0>
 800278e:	a201      	add	r2, pc, #4	; (adr r2, 8002794 <HAL_TIM_IC_Start_DMA+0x19c>)
 8002790:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002794:	080027c9 	.word	0x080027c9
 8002798:	080028e9 	.word	0x080028e9
 800279c:	080028e9 	.word	0x080028e9
 80027a0:	080028e9 	.word	0x080028e9
 80027a4:	08002811 	.word	0x08002811
 80027a8:	080028e9 	.word	0x080028e9
 80027ac:	080028e9 	.word	0x080028e9
 80027b0:	080028e9 	.word	0x080028e9
 80027b4:	08002859 	.word	0x08002859
 80027b8:	080028e9 	.word	0x080028e9
 80027bc:	080028e9 	.word	0x080028e9
 80027c0:	080028e9 	.word	0x080028e9
 80027c4:	080028a1 	.word	0x080028a1
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA capture callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMACaptureCplt;
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027cc:	4a4c      	ldr	r2, [pc, #304]	; (8002900 <HAL_TIM_IC_Start_DMA+0x308>)
 80027ce:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027d4:	4a4b      	ldr	r2, [pc, #300]	; (8002904 <HAL_TIM_IC_Start_DMA+0x30c>)
 80027d6:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027dc:	4a4a      	ldr	r2, [pc, #296]	; (8002908 <HAL_TIM_IC_Start_DMA+0x310>)
 80027de:	631a      	str	r2, [r3, #48]	; 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)&htim->Instance->CCR1, (uint32_t)pData,
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	6a58      	ldr	r0, [r3, #36]	; 0x24
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	3334      	adds	r3, #52	; 0x34
 80027ea:	4619      	mov	r1, r3
 80027ec:	687a      	ldr	r2, [r7, #4]
 80027ee:	887b      	ldrh	r3, [r7, #2]
 80027f0:	f7fe fcea 	bl	80011c8 <HAL_DMA_Start_IT>
 80027f4:	4603      	mov	r3, r0
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d001      	beq.n	80027fe <HAL_TIM_IC_Start_DMA+0x206>
                         Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80027fa:	2301      	movs	r3, #1
 80027fc:	e076      	b.n	80028ec <HAL_TIM_IC_Start_DMA+0x2f4>
      }
      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	68da      	ldr	r2, [r3, #12]
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800280c:	60da      	str	r2, [r3, #12]
      break;
 800280e:	e06c      	b.n	80028ea <HAL_TIM_IC_Start_DMA+0x2f2>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA capture callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMACaptureCplt;
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002814:	4a3a      	ldr	r2, [pc, #232]	; (8002900 <HAL_TIM_IC_Start_DMA+0x308>)
 8002816:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800281c:	4a39      	ldr	r2, [pc, #228]	; (8002904 <HAL_TIM_IC_Start_DMA+0x30c>)
 800281e:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002824:	4a38      	ldr	r2, [pc, #224]	; (8002908 <HAL_TIM_IC_Start_DMA+0x310>)
 8002826:	631a      	str	r2, [r3, #48]	; 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)&htim->Instance->CCR2, (uint32_t)pData,
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	6a98      	ldr	r0, [r3, #40]	; 0x28
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	3338      	adds	r3, #56	; 0x38
 8002832:	4619      	mov	r1, r3
 8002834:	687a      	ldr	r2, [r7, #4]
 8002836:	887b      	ldrh	r3, [r7, #2]
 8002838:	f7fe fcc6 	bl	80011c8 <HAL_DMA_Start_IT>
 800283c:	4603      	mov	r3, r0
 800283e:	2b00      	cmp	r3, #0
 8002840:	d001      	beq.n	8002846 <HAL_TIM_IC_Start_DMA+0x24e>
                         Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8002842:	2301      	movs	r3, #1
 8002844:	e052      	b.n	80028ec <HAL_TIM_IC_Start_DMA+0x2f4>
      }
      /* Enable the TIM Capture/Compare 2  DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	68da      	ldr	r2, [r3, #12]
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002854:	60da      	str	r2, [r3, #12]
      break;
 8002856:	e048      	b.n	80028ea <HAL_TIM_IC_Start_DMA+0x2f2>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA capture callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMACaptureCplt;
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800285c:	4a28      	ldr	r2, [pc, #160]	; (8002900 <HAL_TIM_IC_Start_DMA+0x308>)
 800285e:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002864:	4a27      	ldr	r2, [pc, #156]	; (8002904 <HAL_TIM_IC_Start_DMA+0x30c>)
 8002866:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800286c:	4a26      	ldr	r2, [pc, #152]	; (8002908 <HAL_TIM_IC_Start_DMA+0x310>)
 800286e:	631a      	str	r2, [r3, #48]	; 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)&htim->Instance->CCR3, (uint32_t)pData,
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	333c      	adds	r3, #60	; 0x3c
 800287a:	4619      	mov	r1, r3
 800287c:	687a      	ldr	r2, [r7, #4]
 800287e:	887b      	ldrh	r3, [r7, #2]
 8002880:	f7fe fca2 	bl	80011c8 <HAL_DMA_Start_IT>
 8002884:	4603      	mov	r3, r0
 8002886:	2b00      	cmp	r3, #0
 8002888:	d001      	beq.n	800288e <HAL_TIM_IC_Start_DMA+0x296>
                         Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800288a:	2301      	movs	r3, #1
 800288c:	e02e      	b.n	80028ec <HAL_TIM_IC_Start_DMA+0x2f4>
      }
      /* Enable the TIM Capture/Compare 3  DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	68da      	ldr	r2, [r3, #12]
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800289c:	60da      	str	r2, [r3, #12]
      break;
 800289e:	e024      	b.n	80028ea <HAL_TIM_IC_Start_DMA+0x2f2>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA capture callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMACaptureCplt;
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028a4:	4a16      	ldr	r2, [pc, #88]	; (8002900 <HAL_TIM_IC_Start_DMA+0x308>)
 80028a6:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028ac:	4a15      	ldr	r2, [pc, #84]	; (8002904 <HAL_TIM_IC_Start_DMA+0x30c>)
 80028ae:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028b4:	4a14      	ldr	r2, [pc, #80]	; (8002908 <HAL_TIM_IC_Start_DMA+0x310>)
 80028b6:	631a      	str	r2, [r3, #48]	; 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)&htim->Instance->CCR4, (uint32_t)pData,
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	3340      	adds	r3, #64	; 0x40
 80028c2:	4619      	mov	r1, r3
 80028c4:	687a      	ldr	r2, [r7, #4]
 80028c6:	887b      	ldrh	r3, [r7, #2]
 80028c8:	f7fe fc7e 	bl	80011c8 <HAL_DMA_Start_IT>
 80028cc:	4603      	mov	r3, r0
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d001      	beq.n	80028d6 <HAL_TIM_IC_Start_DMA+0x2de>
                         Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80028d2:	2301      	movs	r3, #1
 80028d4:	e00a      	b.n	80028ec <HAL_TIM_IC_Start_DMA+0x2f4>
      }
      /* Enable the TIM Capture/Compare 4  DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	68da      	ldr	r2, [r3, #12]
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80028e4:	60da      	str	r2, [r3, #12]
      break;
 80028e6:	e000      	b.n	80028ea <HAL_TIM_IC_Start_DMA+0x2f2>
    }

    default:
      break;
 80028e8:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80028ea:	2300      	movs	r3, #0
}
 80028ec:	4618      	mov	r0, r3
 80028ee:	3718      	adds	r7, #24
 80028f0:	46bd      	mov	sp, r7
 80028f2:	bd80      	pop	{r7, pc}
 80028f4:	40012c00 	.word	0x40012c00
 80028f8:	40000400 	.word	0x40000400
 80028fc:	40000800 	.word	0x40000800
 8002900:	08003239 	.word	0x08003239
 8002904:	08003301 	.word	0x08003301
 8002908:	080031a7 	.word	0x080031a7

0800290c <HAL_TIM_IC_Stop_DMA>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800290c:	b580      	push	{r7, lr}
 800290e:	b082      	sub	sp, #8
 8002910:	af00      	add	r7, sp, #0
 8002912:	6078      	str	r0, [r7, #4]
 8002914:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
  assert_param(IS_TIM_DMA_CC_INSTANCE(htim->Instance));

  /* Disable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	2200      	movs	r2, #0
 800291c:	6839      	ldr	r1, [r7, #0]
 800291e:	4618      	mov	r0, r3
 8002920:	f001 f93d 	bl	8003b9e <TIM_CCxChannelCmd>
 8002924:	683b      	ldr	r3, [r7, #0]
 8002926:	2b0c      	cmp	r3, #12
 8002928:	d854      	bhi.n	80029d4 <HAL_TIM_IC_Stop_DMA+0xc8>
 800292a:	a201      	add	r2, pc, #4	; (adr r2, 8002930 <HAL_TIM_IC_Stop_DMA+0x24>)
 800292c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002930:	08002965 	.word	0x08002965
 8002934:	080029d5 	.word	0x080029d5
 8002938:	080029d5 	.word	0x080029d5
 800293c:	080029d5 	.word	0x080029d5
 8002940:	08002981 	.word	0x08002981
 8002944:	080029d5 	.word	0x080029d5
 8002948:	080029d5 	.word	0x080029d5
 800294c:	080029d5 	.word	0x080029d5
 8002950:	0800299d 	.word	0x0800299d
 8002954:	080029d5 	.word	0x080029d5
 8002958:	080029d5 	.word	0x080029d5
 800295c:	080029d5 	.word	0x080029d5
 8002960:	080029b9 	.word	0x080029b9
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	68da      	ldr	r2, [r3, #12]
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002972:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002978:	4618      	mov	r0, r3
 800297a:	f7fe fc85 	bl	8001288 <HAL_DMA_Abort_IT>
      break;
 800297e:	e02a      	b.n	80029d6 <HAL_TIM_IC_Stop_DMA+0xca>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	68da      	ldr	r2, [r3, #12]
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800298e:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002994:	4618      	mov	r0, r3
 8002996:	f7fe fc77 	bl	8001288 <HAL_DMA_Abort_IT>
      break;
 800299a:	e01c      	b.n	80029d6 <HAL_TIM_IC_Stop_DMA+0xca>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3  DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	68da      	ldr	r2, [r3, #12]
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80029aa:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029b0:	4618      	mov	r0, r3
 80029b2:	f7fe fc69 	bl	8001288 <HAL_DMA_Abort_IT>
      break;
 80029b6:	e00e      	b.n	80029d6 <HAL_TIM_IC_Stop_DMA+0xca>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4  DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	68da      	ldr	r2, [r3, #12]
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80029c6:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029cc:	4618      	mov	r0, r3
 80029ce:	f7fe fc5b 	bl	8001288 <HAL_DMA_Abort_IT>
      break;
 80029d2:	e000      	b.n	80029d6 <HAL_TIM_IC_Stop_DMA+0xca>
    }

    default:
      break;
 80029d4:	bf00      	nop
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	6a1a      	ldr	r2, [r3, #32]
 80029dc:	f241 1311 	movw	r3, #4369	; 0x1111
 80029e0:	4013      	ands	r3, r2
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d10f      	bne.n	8002a06 <HAL_TIM_IC_Stop_DMA+0xfa>
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	6a1a      	ldr	r2, [r3, #32]
 80029ec:	f240 4344 	movw	r3, #1092	; 0x444
 80029f0:	4013      	ands	r3, r2
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d107      	bne.n	8002a06 <HAL_TIM_IC_Stop_DMA+0xfa>
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	681a      	ldr	r2, [r3, #0]
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	f022 0201 	bic.w	r2, r2, #1
 8002a04:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8002a06:	683b      	ldr	r3, [r7, #0]
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d104      	bne.n	8002a16 <HAL_TIM_IC_Stop_DMA+0x10a>
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	2201      	movs	r2, #1
 8002a10:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002a14:	e013      	b.n	8002a3e <HAL_TIM_IC_Stop_DMA+0x132>
 8002a16:	683b      	ldr	r3, [r7, #0]
 8002a18:	2b04      	cmp	r3, #4
 8002a1a:	d104      	bne.n	8002a26 <HAL_TIM_IC_Stop_DMA+0x11a>
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	2201      	movs	r2, #1
 8002a20:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002a24:	e00b      	b.n	8002a3e <HAL_TIM_IC_Stop_DMA+0x132>
 8002a26:	683b      	ldr	r3, [r7, #0]
 8002a28:	2b08      	cmp	r3, #8
 8002a2a:	d104      	bne.n	8002a36 <HAL_TIM_IC_Stop_DMA+0x12a>
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	2201      	movs	r2, #1
 8002a30:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002a34:	e003      	b.n	8002a3e <HAL_TIM_IC_Stop_DMA+0x132>
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	2201      	movs	r2, #1
 8002a3a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8002a3e:	683b      	ldr	r3, [r7, #0]
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d104      	bne.n	8002a4e <HAL_TIM_IC_Stop_DMA+0x142>
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	2201      	movs	r2, #1
 8002a48:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002a4c:	e013      	b.n	8002a76 <HAL_TIM_IC_Stop_DMA+0x16a>
 8002a4e:	683b      	ldr	r3, [r7, #0]
 8002a50:	2b04      	cmp	r3, #4
 8002a52:	d104      	bne.n	8002a5e <HAL_TIM_IC_Stop_DMA+0x152>
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	2201      	movs	r2, #1
 8002a58:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002a5c:	e00b      	b.n	8002a76 <HAL_TIM_IC_Stop_DMA+0x16a>
 8002a5e:	683b      	ldr	r3, [r7, #0]
 8002a60:	2b08      	cmp	r3, #8
 8002a62:	d104      	bne.n	8002a6e <HAL_TIM_IC_Stop_DMA+0x162>
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	2201      	movs	r2, #1
 8002a68:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002a6c:	e003      	b.n	8002a76 <HAL_TIM_IC_Stop_DMA+0x16a>
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	2201      	movs	r2, #1
 8002a72:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Return function status */
  return HAL_OK;
 8002a76:	2300      	movs	r3, #0
}
 8002a78:	4618      	mov	r0, r3
 8002a7a:	3708      	adds	r7, #8
 8002a7c:	46bd      	mov	sp, r7
 8002a7e:	bd80      	pop	{r7, pc}

08002a80 <HAL_TIM_OnePulse_Init>:
  *            @arg TIM_OPMODE_SINGLE: Only one pulse will be generated.
  *            @arg TIM_OPMODE_REPETITIVE: Repetitive pulses will be generated.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Init(TIM_HandleTypeDef *htim, uint32_t OnePulseMode)
{
 8002a80:	b580      	push	{r7, lr}
 8002a82:	b082      	sub	sp, #8
 8002a84:	af00      	add	r7, sp, #0
 8002a86:	6078      	str	r0, [r7, #4]
 8002a88:	6039      	str	r1, [r7, #0]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d101      	bne.n	8002a94 <HAL_TIM_OnePulse_Init+0x14>
  {
    return HAL_ERROR;
 8002a90:	2301      	movs	r3, #1
 8002a92:	e041      	b.n	8002b18 <HAL_TIM_OnePulse_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_OPM_MODE(OnePulseMode));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a9a:	b2db      	uxtb	r3, r3
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d106      	bne.n	8002aae <HAL_TIM_OnePulse_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	2200      	movs	r2, #0
 8002aa4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OnePulse_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OnePulse_MspInit(htim);
 8002aa8:	6878      	ldr	r0, [r7, #4]
 8002aaa:	f000 f839 	bl	8002b20 <HAL_TIM_OnePulse_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	2202      	movs	r2, #2
 8002ab2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Configure the Time base in the One Pulse Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681a      	ldr	r2, [r3, #0]
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	3304      	adds	r3, #4
 8002abe:	4619      	mov	r1, r3
 8002ac0:	4610      	mov	r0, r2
 8002ac2:	f000 fc51 	bl	8003368 <TIM_Base_SetConfig>

  /* Reset the OPM Bit */
  htim->Instance->CR1 &= ~TIM_CR1_OPM;
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	681a      	ldr	r2, [r3, #0]
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	f022 0208 	bic.w	r2, r2, #8
 8002ad4:	601a      	str	r2, [r3, #0]

  /* Configure the OPM Mode */
  htim->Instance->CR1 |= OnePulseMode;
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	6819      	ldr	r1, [r3, #0]
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	683a      	ldr	r2, [r7, #0]
 8002ae2:	430a      	orrs	r2, r1
 8002ae4:	601a      	str	r2, [r3, #0]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	2201      	movs	r2, #1
 8002aea:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	2201      	movs	r2, #1
 8002af2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	2201      	movs	r2, #1
 8002afa:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	2201      	movs	r2, #1
 8002b02:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	2201      	movs	r2, #1
 8002b0a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	2201      	movs	r2, #1
 8002b12:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002b16:	2300      	movs	r3, #0
}
 8002b18:	4618      	mov	r0, r3
 8002b1a:	3708      	adds	r7, #8
 8002b1c:	46bd      	mov	sp, r7
 8002b1e:	bd80      	pop	{r7, pc}

08002b20 <HAL_TIM_OnePulse_MspInit>:
  * @brief  Initializes the TIM One Pulse MSP.
  * @param  htim TIM One Pulse handle
  * @retval None
  */
__weak void HAL_TIM_OnePulse_MspInit(TIM_HandleTypeDef *htim)
{
 8002b20:	b480      	push	{r7}
 8002b22:	b083      	sub	sp, #12
 8002b24:	af00      	add	r7, sp, #0
 8002b26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OnePulse_MspInit could be implemented in the user file
   */
}
 8002b28:	bf00      	nop
 8002b2a:	370c      	adds	r7, #12
 8002b2c:	46bd      	mov	sp, r7
 8002b2e:	bc80      	pop	{r7}
 8002b30:	4770      	bx	lr

08002b32 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002b32:	b580      	push	{r7, lr}
 8002b34:	b082      	sub	sp, #8
 8002b36:	af00      	add	r7, sp, #0
 8002b38:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	691b      	ldr	r3, [r3, #16]
 8002b40:	f003 0302 	and.w	r3, r3, #2
 8002b44:	2b02      	cmp	r3, #2
 8002b46:	d122      	bne.n	8002b8e <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	68db      	ldr	r3, [r3, #12]
 8002b4e:	f003 0302 	and.w	r3, r3, #2
 8002b52:	2b02      	cmp	r3, #2
 8002b54:	d11b      	bne.n	8002b8e <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	f06f 0202 	mvn.w	r2, #2
 8002b5e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	2201      	movs	r2, #1
 8002b64:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	699b      	ldr	r3, [r3, #24]
 8002b6c:	f003 0303 	and.w	r3, r3, #3
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d003      	beq.n	8002b7c <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002b74:	6878      	ldr	r0, [r7, #4]
 8002b76:	f000 fae9 	bl	800314c <HAL_TIM_IC_CaptureCallback>
 8002b7a:	e005      	b.n	8002b88 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b7c:	6878      	ldr	r0, [r7, #4]
 8002b7e:	f000 fadc 	bl	800313a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b82:	6878      	ldr	r0, [r7, #4]
 8002b84:	f000 faf4 	bl	8003170 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	2200      	movs	r2, #0
 8002b8c:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	691b      	ldr	r3, [r3, #16]
 8002b94:	f003 0304 	and.w	r3, r3, #4
 8002b98:	2b04      	cmp	r3, #4
 8002b9a:	d122      	bne.n	8002be2 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	68db      	ldr	r3, [r3, #12]
 8002ba2:	f003 0304 	and.w	r3, r3, #4
 8002ba6:	2b04      	cmp	r3, #4
 8002ba8:	d11b      	bne.n	8002be2 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	f06f 0204 	mvn.w	r2, #4
 8002bb2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	2202      	movs	r2, #2
 8002bb8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	699b      	ldr	r3, [r3, #24]
 8002bc0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d003      	beq.n	8002bd0 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002bc8:	6878      	ldr	r0, [r7, #4]
 8002bca:	f000 fabf 	bl	800314c <HAL_TIM_IC_CaptureCallback>
 8002bce:	e005      	b.n	8002bdc <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002bd0:	6878      	ldr	r0, [r7, #4]
 8002bd2:	f000 fab2 	bl	800313a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002bd6:	6878      	ldr	r0, [r7, #4]
 8002bd8:	f000 faca 	bl	8003170 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	2200      	movs	r2, #0
 8002be0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	691b      	ldr	r3, [r3, #16]
 8002be8:	f003 0308 	and.w	r3, r3, #8
 8002bec:	2b08      	cmp	r3, #8
 8002bee:	d122      	bne.n	8002c36 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	68db      	ldr	r3, [r3, #12]
 8002bf6:	f003 0308 	and.w	r3, r3, #8
 8002bfa:	2b08      	cmp	r3, #8
 8002bfc:	d11b      	bne.n	8002c36 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	f06f 0208 	mvn.w	r2, #8
 8002c06:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	2204      	movs	r2, #4
 8002c0c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	69db      	ldr	r3, [r3, #28]
 8002c14:	f003 0303 	and.w	r3, r3, #3
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d003      	beq.n	8002c24 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002c1c:	6878      	ldr	r0, [r7, #4]
 8002c1e:	f000 fa95 	bl	800314c <HAL_TIM_IC_CaptureCallback>
 8002c22:	e005      	b.n	8002c30 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002c24:	6878      	ldr	r0, [r7, #4]
 8002c26:	f000 fa88 	bl	800313a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002c2a:	6878      	ldr	r0, [r7, #4]
 8002c2c:	f000 faa0 	bl	8003170 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	2200      	movs	r2, #0
 8002c34:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	691b      	ldr	r3, [r3, #16]
 8002c3c:	f003 0310 	and.w	r3, r3, #16
 8002c40:	2b10      	cmp	r3, #16
 8002c42:	d122      	bne.n	8002c8a <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	68db      	ldr	r3, [r3, #12]
 8002c4a:	f003 0310 	and.w	r3, r3, #16
 8002c4e:	2b10      	cmp	r3, #16
 8002c50:	d11b      	bne.n	8002c8a <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	f06f 0210 	mvn.w	r2, #16
 8002c5a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	2208      	movs	r2, #8
 8002c60:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	69db      	ldr	r3, [r3, #28]
 8002c68:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d003      	beq.n	8002c78 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002c70:	6878      	ldr	r0, [r7, #4]
 8002c72:	f000 fa6b 	bl	800314c <HAL_TIM_IC_CaptureCallback>
 8002c76:	e005      	b.n	8002c84 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002c78:	6878      	ldr	r0, [r7, #4]
 8002c7a:	f000 fa5e 	bl	800313a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002c7e:	6878      	ldr	r0, [r7, #4]
 8002c80:	f000 fa76 	bl	8003170 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	2200      	movs	r2, #0
 8002c88:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	691b      	ldr	r3, [r3, #16]
 8002c90:	f003 0301 	and.w	r3, r3, #1
 8002c94:	2b01      	cmp	r3, #1
 8002c96:	d10e      	bne.n	8002cb6 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	68db      	ldr	r3, [r3, #12]
 8002c9e:	f003 0301 	and.w	r3, r3, #1
 8002ca2:	2b01      	cmp	r3, #1
 8002ca4:	d107      	bne.n	8002cb6 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	f06f 0201 	mvn.w	r2, #1
 8002cae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002cb0:	6878      	ldr	r0, [r7, #4]
 8002cb2:	f000 fa39 	bl	8003128 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	691b      	ldr	r3, [r3, #16]
 8002cbc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002cc0:	2b80      	cmp	r3, #128	; 0x80
 8002cc2:	d10e      	bne.n	8002ce2 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	68db      	ldr	r3, [r3, #12]
 8002cca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002cce:	2b80      	cmp	r3, #128	; 0x80
 8002cd0:	d107      	bne.n	8002ce2 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002cda:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002cdc:	6878      	ldr	r0, [r7, #4]
 8002cde:	f001 f83b 	bl	8003d58 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	691b      	ldr	r3, [r3, #16]
 8002ce8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002cec:	2b40      	cmp	r3, #64	; 0x40
 8002cee:	d10e      	bne.n	8002d0e <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	68db      	ldr	r3, [r3, #12]
 8002cf6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002cfa:	2b40      	cmp	r3, #64	; 0x40
 8002cfc:	d107      	bne.n	8002d0e <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002d06:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002d08:	6878      	ldr	r0, [r7, #4]
 8002d0a:	f000 fa3a 	bl	8003182 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	691b      	ldr	r3, [r3, #16]
 8002d14:	f003 0320 	and.w	r3, r3, #32
 8002d18:	2b20      	cmp	r3, #32
 8002d1a:	d10e      	bne.n	8002d3a <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	68db      	ldr	r3, [r3, #12]
 8002d22:	f003 0320 	and.w	r3, r3, #32
 8002d26:	2b20      	cmp	r3, #32
 8002d28:	d107      	bne.n	8002d3a <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	f06f 0220 	mvn.w	r2, #32
 8002d32:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002d34:	6878      	ldr	r0, [r7, #4]
 8002d36:	f001 f806 	bl	8003d46 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002d3a:	bf00      	nop
 8002d3c:	3708      	adds	r7, #8
 8002d3e:	46bd      	mov	sp, r7
 8002d40:	bd80      	pop	{r7, pc}
	...

08002d44 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8002d44:	b580      	push	{r7, lr}
 8002d46:	b084      	sub	sp, #16
 8002d48:	af00      	add	r7, sp, #0
 8002d4a:	60f8      	str	r0, [r7, #12]
 8002d4c:	60b9      	str	r1, [r7, #8]
 8002d4e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002d56:	2b01      	cmp	r3, #1
 8002d58:	d101      	bne.n	8002d5e <HAL_TIM_OC_ConfigChannel+0x1a>
 8002d5a:	2302      	movs	r3, #2
 8002d5c:	e046      	b.n	8002dec <HAL_TIM_OC_ConfigChannel+0xa8>
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	2201      	movs	r2, #1
 8002d62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	2b0c      	cmp	r3, #12
 8002d6a:	d839      	bhi.n	8002de0 <HAL_TIM_OC_ConfigChannel+0x9c>
 8002d6c:	a201      	add	r2, pc, #4	; (adr r2, 8002d74 <HAL_TIM_OC_ConfigChannel+0x30>)
 8002d6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d72:	bf00      	nop
 8002d74:	08002da9 	.word	0x08002da9
 8002d78:	08002de1 	.word	0x08002de1
 8002d7c:	08002de1 	.word	0x08002de1
 8002d80:	08002de1 	.word	0x08002de1
 8002d84:	08002db7 	.word	0x08002db7
 8002d88:	08002de1 	.word	0x08002de1
 8002d8c:	08002de1 	.word	0x08002de1
 8002d90:	08002de1 	.word	0x08002de1
 8002d94:	08002dc5 	.word	0x08002dc5
 8002d98:	08002de1 	.word	0x08002de1
 8002d9c:	08002de1 	.word	0x08002de1
 8002da0:	08002de1 	.word	0x08002de1
 8002da4:	08002dd3 	.word	0x08002dd3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	68b9      	ldr	r1, [r7, #8]
 8002dae:	4618      	mov	r0, r3
 8002db0:	f000 fb3c 	bl	800342c <TIM_OC1_SetConfig>
      break;
 8002db4:	e015      	b.n	8002de2 <HAL_TIM_OC_ConfigChannel+0x9e>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	68b9      	ldr	r1, [r7, #8]
 8002dbc:	4618      	mov	r0, r3
 8002dbe:	f000 fb9b 	bl	80034f8 <TIM_OC2_SetConfig>
      break;
 8002dc2:	e00e      	b.n	8002de2 <HAL_TIM_OC_ConfigChannel+0x9e>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	68b9      	ldr	r1, [r7, #8]
 8002dca:	4618      	mov	r0, r3
 8002dcc:	f000 fbfe 	bl	80035cc <TIM_OC3_SetConfig>
      break;
 8002dd0:	e007      	b.n	8002de2 <HAL_TIM_OC_ConfigChannel+0x9e>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	68b9      	ldr	r1, [r7, #8]
 8002dd8:	4618      	mov	r0, r3
 8002dda:	f000 fc61 	bl	80036a0 <TIM_OC4_SetConfig>
      break;
 8002dde:	e000      	b.n	8002de2 <HAL_TIM_OC_ConfigChannel+0x9e>
    }

    default:
      break;
 8002de0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	2200      	movs	r2, #0
 8002de6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002dea:	2300      	movs	r3, #0
}
 8002dec:	4618      	mov	r0, r3
 8002dee:	3710      	adds	r7, #16
 8002df0:	46bd      	mov	sp, r7
 8002df2:	bd80      	pop	{r7, pc}

08002df4 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8002df4:	b580      	push	{r7, lr}
 8002df6:	b084      	sub	sp, #16
 8002df8:	af00      	add	r7, sp, #0
 8002dfa:	60f8      	str	r0, [r7, #12]
 8002dfc:	60b9      	str	r1, [r7, #8]
 8002dfe:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002e06:	2b01      	cmp	r3, #1
 8002e08:	d101      	bne.n	8002e0e <HAL_TIM_IC_ConfigChannel+0x1a>
 8002e0a:	2302      	movs	r3, #2
 8002e0c:	e082      	b.n	8002f14 <HAL_TIM_IC_ConfigChannel+0x120>
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	2201      	movs	r2, #1
 8002e12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d11b      	bne.n	8002e54 <HAL_TIM_IC_ConfigChannel+0x60>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	6818      	ldr	r0, [r3, #0]
 8002e20:	68bb      	ldr	r3, [r7, #8]
 8002e22:	6819      	ldr	r1, [r3, #0]
 8002e24:	68bb      	ldr	r3, [r7, #8]
 8002e26:	685a      	ldr	r2, [r3, #4]
 8002e28:	68bb      	ldr	r3, [r7, #8]
 8002e2a:	68db      	ldr	r3, [r3, #12]
 8002e2c:	f000 fd14 	bl	8003858 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	699a      	ldr	r2, [r3, #24]
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	f022 020c 	bic.w	r2, r2, #12
 8002e3e:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	6999      	ldr	r1, [r3, #24]
 8002e46:	68bb      	ldr	r3, [r7, #8]
 8002e48:	689a      	ldr	r2, [r3, #8]
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	430a      	orrs	r2, r1
 8002e50:	619a      	str	r2, [r3, #24]
 8002e52:	e05a      	b.n	8002f0a <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_2)
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	2b04      	cmp	r3, #4
 8002e58:	d11c      	bne.n	8002e94 <HAL_TIM_IC_ConfigChannel+0xa0>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	6818      	ldr	r0, [r3, #0]
 8002e5e:	68bb      	ldr	r3, [r7, #8]
 8002e60:	6819      	ldr	r1, [r3, #0]
 8002e62:	68bb      	ldr	r3, [r7, #8]
 8002e64:	685a      	ldr	r2, [r3, #4]
 8002e66:	68bb      	ldr	r3, [r7, #8]
 8002e68:	68db      	ldr	r3, [r3, #12]
 8002e6a:	f000 fd7d 	bl	8003968 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	699a      	ldr	r2, [r3, #24]
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8002e7c:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	6999      	ldr	r1, [r3, #24]
 8002e84:	68bb      	ldr	r3, [r7, #8]
 8002e86:	689b      	ldr	r3, [r3, #8]
 8002e88:	021a      	lsls	r2, r3, #8
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	430a      	orrs	r2, r1
 8002e90:	619a      	str	r2, [r3, #24]
 8002e92:	e03a      	b.n	8002f0a <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_3)
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	2b08      	cmp	r3, #8
 8002e98:	d11b      	bne.n	8002ed2 <HAL_TIM_IC_ConfigChannel+0xde>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	6818      	ldr	r0, [r3, #0]
 8002e9e:	68bb      	ldr	r3, [r7, #8]
 8002ea0:	6819      	ldr	r1, [r3, #0]
 8002ea2:	68bb      	ldr	r3, [r7, #8]
 8002ea4:	685a      	ldr	r2, [r3, #4]
 8002ea6:	68bb      	ldr	r3, [r7, #8]
 8002ea8:	68db      	ldr	r3, [r3, #12]
 8002eaa:	f000 fdc8 	bl	8003a3e <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	69da      	ldr	r2, [r3, #28]
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	f022 020c 	bic.w	r2, r2, #12
 8002ebc:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	69d9      	ldr	r1, [r3, #28]
 8002ec4:	68bb      	ldr	r3, [r7, #8]
 8002ec6:	689a      	ldr	r2, [r3, #8]
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	430a      	orrs	r2, r1
 8002ece:	61da      	str	r2, [r3, #28]
 8002ed0:	e01b      	b.n	8002f0a <HAL_TIM_IC_ConfigChannel+0x116>
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	6818      	ldr	r0, [r3, #0]
 8002ed6:	68bb      	ldr	r3, [r7, #8]
 8002ed8:	6819      	ldr	r1, [r3, #0]
 8002eda:	68bb      	ldr	r3, [r7, #8]
 8002edc:	685a      	ldr	r2, [r3, #4]
 8002ede:	68bb      	ldr	r3, [r7, #8]
 8002ee0:	68db      	ldr	r3, [r3, #12]
 8002ee2:	f000 fde7 	bl	8003ab4 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	69da      	ldr	r2, [r3, #28]
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8002ef4:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	69d9      	ldr	r1, [r3, #28]
 8002efc:	68bb      	ldr	r3, [r7, #8]
 8002efe:	689b      	ldr	r3, [r3, #8]
 8002f00:	021a      	lsls	r2, r3, #8
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	430a      	orrs	r2, r1
 8002f08:	61da      	str	r2, [r3, #28]
  }

  __HAL_UNLOCK(htim);
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	2200      	movs	r2, #0
 8002f0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002f12:	2300      	movs	r3, #0
}
 8002f14:	4618      	mov	r0, r3
 8002f16:	3710      	adds	r7, #16
 8002f18:	46bd      	mov	sp, r7
 8002f1a:	bd80      	pop	{r7, pc}

08002f1c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002f1c:	b580      	push	{r7, lr}
 8002f1e:	b084      	sub	sp, #16
 8002f20:	af00      	add	r7, sp, #0
 8002f22:	6078      	str	r0, [r7, #4]
 8002f24:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002f2c:	2b01      	cmp	r3, #1
 8002f2e:	d101      	bne.n	8002f34 <HAL_TIM_ConfigClockSource+0x18>
 8002f30:	2302      	movs	r3, #2
 8002f32:	e0b3      	b.n	800309c <HAL_TIM_ConfigClockSource+0x180>
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	2201      	movs	r2, #1
 8002f38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	2202      	movs	r2, #2
 8002f40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	689b      	ldr	r3, [r3, #8]
 8002f4a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002f52:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002f5a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	68fa      	ldr	r2, [r7, #12]
 8002f62:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002f64:	683b      	ldr	r3, [r7, #0]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002f6c:	d03e      	beq.n	8002fec <HAL_TIM_ConfigClockSource+0xd0>
 8002f6e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002f72:	f200 8087 	bhi.w	8003084 <HAL_TIM_ConfigClockSource+0x168>
 8002f76:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002f7a:	f000 8085 	beq.w	8003088 <HAL_TIM_ConfigClockSource+0x16c>
 8002f7e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002f82:	d87f      	bhi.n	8003084 <HAL_TIM_ConfigClockSource+0x168>
 8002f84:	2b70      	cmp	r3, #112	; 0x70
 8002f86:	d01a      	beq.n	8002fbe <HAL_TIM_ConfigClockSource+0xa2>
 8002f88:	2b70      	cmp	r3, #112	; 0x70
 8002f8a:	d87b      	bhi.n	8003084 <HAL_TIM_ConfigClockSource+0x168>
 8002f8c:	2b60      	cmp	r3, #96	; 0x60
 8002f8e:	d050      	beq.n	8003032 <HAL_TIM_ConfigClockSource+0x116>
 8002f90:	2b60      	cmp	r3, #96	; 0x60
 8002f92:	d877      	bhi.n	8003084 <HAL_TIM_ConfigClockSource+0x168>
 8002f94:	2b50      	cmp	r3, #80	; 0x50
 8002f96:	d03c      	beq.n	8003012 <HAL_TIM_ConfigClockSource+0xf6>
 8002f98:	2b50      	cmp	r3, #80	; 0x50
 8002f9a:	d873      	bhi.n	8003084 <HAL_TIM_ConfigClockSource+0x168>
 8002f9c:	2b40      	cmp	r3, #64	; 0x40
 8002f9e:	d058      	beq.n	8003052 <HAL_TIM_ConfigClockSource+0x136>
 8002fa0:	2b40      	cmp	r3, #64	; 0x40
 8002fa2:	d86f      	bhi.n	8003084 <HAL_TIM_ConfigClockSource+0x168>
 8002fa4:	2b30      	cmp	r3, #48	; 0x30
 8002fa6:	d064      	beq.n	8003072 <HAL_TIM_ConfigClockSource+0x156>
 8002fa8:	2b30      	cmp	r3, #48	; 0x30
 8002faa:	d86b      	bhi.n	8003084 <HAL_TIM_ConfigClockSource+0x168>
 8002fac:	2b20      	cmp	r3, #32
 8002fae:	d060      	beq.n	8003072 <HAL_TIM_ConfigClockSource+0x156>
 8002fb0:	2b20      	cmp	r3, #32
 8002fb2:	d867      	bhi.n	8003084 <HAL_TIM_ConfigClockSource+0x168>
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d05c      	beq.n	8003072 <HAL_TIM_ConfigClockSource+0x156>
 8002fb8:	2b10      	cmp	r3, #16
 8002fba:	d05a      	beq.n	8003072 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8002fbc:	e062      	b.n	8003084 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	6818      	ldr	r0, [r3, #0]
 8002fc2:	683b      	ldr	r3, [r7, #0]
 8002fc4:	6899      	ldr	r1, [r3, #8]
 8002fc6:	683b      	ldr	r3, [r7, #0]
 8002fc8:	685a      	ldr	r2, [r3, #4]
 8002fca:	683b      	ldr	r3, [r7, #0]
 8002fcc:	68db      	ldr	r3, [r3, #12]
 8002fce:	f000 fdc7 	bl	8003b60 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	689b      	ldr	r3, [r3, #8]
 8002fd8:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002fe0:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	68fa      	ldr	r2, [r7, #12]
 8002fe8:	609a      	str	r2, [r3, #8]
      break;
 8002fea:	e04e      	b.n	800308a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	6818      	ldr	r0, [r3, #0]
 8002ff0:	683b      	ldr	r3, [r7, #0]
 8002ff2:	6899      	ldr	r1, [r3, #8]
 8002ff4:	683b      	ldr	r3, [r7, #0]
 8002ff6:	685a      	ldr	r2, [r3, #4]
 8002ff8:	683b      	ldr	r3, [r7, #0]
 8002ffa:	68db      	ldr	r3, [r3, #12]
 8002ffc:	f000 fdb0 	bl	8003b60 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	689a      	ldr	r2, [r3, #8]
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800300e:	609a      	str	r2, [r3, #8]
      break;
 8003010:	e03b      	b.n	800308a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	6818      	ldr	r0, [r3, #0]
 8003016:	683b      	ldr	r3, [r7, #0]
 8003018:	6859      	ldr	r1, [r3, #4]
 800301a:	683b      	ldr	r3, [r7, #0]
 800301c:	68db      	ldr	r3, [r3, #12]
 800301e:	461a      	mov	r2, r3
 8003020:	f000 fc74 	bl	800390c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	2150      	movs	r1, #80	; 0x50
 800302a:	4618      	mov	r0, r3
 800302c:	f000 fd7e 	bl	8003b2c <TIM_ITRx_SetConfig>
      break;
 8003030:	e02b      	b.n	800308a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	6818      	ldr	r0, [r3, #0]
 8003036:	683b      	ldr	r3, [r7, #0]
 8003038:	6859      	ldr	r1, [r3, #4]
 800303a:	683b      	ldr	r3, [r7, #0]
 800303c:	68db      	ldr	r3, [r3, #12]
 800303e:	461a      	mov	r2, r3
 8003040:	f000 fcce 	bl	80039e0 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	2160      	movs	r1, #96	; 0x60
 800304a:	4618      	mov	r0, r3
 800304c:	f000 fd6e 	bl	8003b2c <TIM_ITRx_SetConfig>
      break;
 8003050:	e01b      	b.n	800308a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	6818      	ldr	r0, [r3, #0]
 8003056:	683b      	ldr	r3, [r7, #0]
 8003058:	6859      	ldr	r1, [r3, #4]
 800305a:	683b      	ldr	r3, [r7, #0]
 800305c:	68db      	ldr	r3, [r3, #12]
 800305e:	461a      	mov	r2, r3
 8003060:	f000 fc54 	bl	800390c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	2140      	movs	r1, #64	; 0x40
 800306a:	4618      	mov	r0, r3
 800306c:	f000 fd5e 	bl	8003b2c <TIM_ITRx_SetConfig>
      break;
 8003070:	e00b      	b.n	800308a <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681a      	ldr	r2, [r3, #0]
 8003076:	683b      	ldr	r3, [r7, #0]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	4619      	mov	r1, r3
 800307c:	4610      	mov	r0, r2
 800307e:	f000 fd55 	bl	8003b2c <TIM_ITRx_SetConfig>
        break;
 8003082:	e002      	b.n	800308a <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8003084:	bf00      	nop
 8003086:	e000      	b.n	800308a <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8003088:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	2201      	movs	r2, #1
 800308e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	2200      	movs	r2, #0
 8003096:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800309a:	2300      	movs	r3, #0
}
 800309c:	4618      	mov	r0, r3
 800309e:	3710      	adds	r7, #16
 80030a0:	46bd      	mov	sp, r7
 80030a2:	bd80      	pop	{r7, pc}

080030a4 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 80030a4:	b580      	push	{r7, lr}
 80030a6:	b082      	sub	sp, #8
 80030a8:	af00      	add	r7, sp, #0
 80030aa:	6078      	str	r0, [r7, #4]
 80030ac:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80030b4:	2b01      	cmp	r3, #1
 80030b6:	d101      	bne.n	80030bc <HAL_TIM_SlaveConfigSynchro+0x18>
 80030b8:	2302      	movs	r3, #2
 80030ba:	e031      	b.n	8003120 <HAL_TIM_SlaveConfigSynchro+0x7c>
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	2201      	movs	r2, #1
 80030c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	2202      	movs	r2, #2
 80030c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 80030cc:	6839      	ldr	r1, [r7, #0]
 80030ce:	6878      	ldr	r0, [r7, #4]
 80030d0:	f000 fb34 	bl	800373c <TIM_SlaveTimer_SetConfig>
 80030d4:	4603      	mov	r3, r0
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d009      	beq.n	80030ee <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	2201      	movs	r2, #1
 80030de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	2200      	movs	r2, #0
 80030e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 80030ea:	2301      	movs	r3, #1
 80030ec:	e018      	b.n	8003120 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	68da      	ldr	r2, [r3, #12]
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80030fc:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	68da      	ldr	r2, [r3, #12]
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800310c:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	2201      	movs	r2, #1
 8003112:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	2200      	movs	r2, #0
 800311a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800311e:	2300      	movs	r3, #0
}
 8003120:	4618      	mov	r0, r3
 8003122:	3708      	adds	r7, #8
 8003124:	46bd      	mov	sp, r7
 8003126:	bd80      	pop	{r7, pc}

08003128 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003128:	b480      	push	{r7}
 800312a:	b083      	sub	sp, #12
 800312c:	af00      	add	r7, sp, #0
 800312e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8003130:	bf00      	nop
 8003132:	370c      	adds	r7, #12
 8003134:	46bd      	mov	sp, r7
 8003136:	bc80      	pop	{r7}
 8003138:	4770      	bx	lr

0800313a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800313a:	b480      	push	{r7}
 800313c:	b083      	sub	sp, #12
 800313e:	af00      	add	r7, sp, #0
 8003140:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003142:	bf00      	nop
 8003144:	370c      	adds	r7, #12
 8003146:	46bd      	mov	sp, r7
 8003148:	bc80      	pop	{r7}
 800314a:	4770      	bx	lr

0800314c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800314c:	b480      	push	{r7}
 800314e:	b083      	sub	sp, #12
 8003150:	af00      	add	r7, sp, #0
 8003152:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003154:	bf00      	nop
 8003156:	370c      	adds	r7, #12
 8003158:	46bd      	mov	sp, r7
 800315a:	bc80      	pop	{r7}
 800315c:	4770      	bx	lr

0800315e <HAL_TIM_IC_CaptureHalfCpltCallback>:
  * @brief  Input Capture half complete callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800315e:	b480      	push	{r7}
 8003160:	b083      	sub	sp, #12
 8003162:	af00      	add	r7, sp, #0
 8003164:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureHalfCpltCallback could be implemented in the user file
   */
}
 8003166:	bf00      	nop
 8003168:	370c      	adds	r7, #12
 800316a:	46bd      	mov	sp, r7
 800316c:	bc80      	pop	{r7}
 800316e:	4770      	bx	lr

08003170 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003170:	b480      	push	{r7}
 8003172:	b083      	sub	sp, #12
 8003174:	af00      	add	r7, sp, #0
 8003176:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003178:	bf00      	nop
 800317a:	370c      	adds	r7, #12
 800317c:	46bd      	mov	sp, r7
 800317e:	bc80      	pop	{r7}
 8003180:	4770      	bx	lr

08003182 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003182:	b480      	push	{r7}
 8003184:	b083      	sub	sp, #12
 8003186:	af00      	add	r7, sp, #0
 8003188:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800318a:	bf00      	nop
 800318c:	370c      	adds	r7, #12
 800318e:	46bd      	mov	sp, r7
 8003190:	bc80      	pop	{r7}
 8003192:	4770      	bx	lr

08003194 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8003194:	b480      	push	{r7}
 8003196:	b083      	sub	sp, #12
 8003198:	af00      	add	r7, sp, #0
 800319a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 800319c:	bf00      	nop
 800319e:	370c      	adds	r7, #12
 80031a0:	46bd      	mov	sp, r7
 80031a2:	bc80      	pop	{r7}
 80031a4:	4770      	bx	lr

080031a6 <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 80031a6:	b580      	push	{r7, lr}
 80031a8:	b084      	sub	sp, #16
 80031aa:	af00      	add	r7, sp, #0
 80031ac:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031b2:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031b8:	687a      	ldr	r2, [r7, #4]
 80031ba:	429a      	cmp	r2, r3
 80031bc:	d107      	bne.n	80031ce <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	2201      	movs	r2, #1
 80031c2:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	2201      	movs	r2, #1
 80031c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80031cc:	e02a      	b.n	8003224 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031d2:	687a      	ldr	r2, [r7, #4]
 80031d4:	429a      	cmp	r2, r3
 80031d6:	d107      	bne.n	80031e8 <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	2202      	movs	r2, #2
 80031dc:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	2201      	movs	r2, #1
 80031e2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80031e6:	e01d      	b.n	8003224 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031ec:	687a      	ldr	r2, [r7, #4]
 80031ee:	429a      	cmp	r2, r3
 80031f0:	d107      	bne.n	8003202 <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	2204      	movs	r2, #4
 80031f6:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	2201      	movs	r2, #1
 80031fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003200:	e010      	b.n	8003224 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003206:	687a      	ldr	r2, [r7, #4]
 8003208:	429a      	cmp	r2, r3
 800320a:	d107      	bne.n	800321c <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	2208      	movs	r2, #8
 8003210:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	2201      	movs	r2, #1
 8003216:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800321a:	e003      	b.n	8003224 <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	2201      	movs	r2, #1
 8003220:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 8003224:	68f8      	ldr	r0, [r7, #12]
 8003226:	f7ff ffb5 	bl	8003194 <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	2200      	movs	r2, #0
 800322e:	771a      	strb	r2, [r3, #28]
}
 8003230:	bf00      	nop
 8003232:	3710      	adds	r7, #16
 8003234:	46bd      	mov	sp, r7
 8003236:	bd80      	pop	{r7, pc}

08003238 <TIM_DMACaptureCplt>:
  * @brief  TIM DMA Capture complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMACaptureCplt(DMA_HandleTypeDef *hdma)
{
 8003238:	b580      	push	{r7, lr}
 800323a:	b084      	sub	sp, #16
 800323c:	af00      	add	r7, sp, #0
 800323e:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003244:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800324a:	687a      	ldr	r2, [r7, #4]
 800324c:	429a      	cmp	r2, r3
 800324e:	d10f      	bne.n	8003270 <TIM_DMACaptureCplt+0x38>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	2201      	movs	r2, #1
 8003254:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	699b      	ldr	r3, [r3, #24]
 800325a:	2b00      	cmp	r3, #0
 800325c:	d146      	bne.n	80032ec <TIM_DMACaptureCplt+0xb4>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	2201      	movs	r2, #1
 8003262:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	2201      	movs	r2, #1
 800326a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800326e:	e03d      	b.n	80032ec <TIM_DMACaptureCplt+0xb4>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003274:	687a      	ldr	r2, [r7, #4]
 8003276:	429a      	cmp	r2, r3
 8003278:	d10f      	bne.n	800329a <TIM_DMACaptureCplt+0x62>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	2202      	movs	r2, #2
 800327e:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	699b      	ldr	r3, [r3, #24]
 8003284:	2b00      	cmp	r3, #0
 8003286:	d131      	bne.n	80032ec <TIM_DMACaptureCplt+0xb4>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	2201      	movs	r2, #1
 800328c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	2201      	movs	r2, #1
 8003294:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003298:	e028      	b.n	80032ec <TIM_DMACaptureCplt+0xb4>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800329e:	687a      	ldr	r2, [r7, #4]
 80032a0:	429a      	cmp	r2, r3
 80032a2:	d10f      	bne.n	80032c4 <TIM_DMACaptureCplt+0x8c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	2204      	movs	r2, #4
 80032a8:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	699b      	ldr	r3, [r3, #24]
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d11c      	bne.n	80032ec <TIM_DMACaptureCplt+0xb4>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	2201      	movs	r2, #1
 80032b6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	2201      	movs	r2, #1
 80032be:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80032c2:	e013      	b.n	80032ec <TIM_DMACaptureCplt+0xb4>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032c8:	687a      	ldr	r2, [r7, #4]
 80032ca:	429a      	cmp	r2, r3
 80032cc:	d10e      	bne.n	80032ec <TIM_DMACaptureCplt+0xb4>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	2208      	movs	r2, #8
 80032d2:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	699b      	ldr	r3, [r3, #24]
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d107      	bne.n	80032ec <TIM_DMACaptureCplt+0xb4>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	2201      	movs	r2, #1
 80032e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	2201      	movs	r2, #1
 80032e8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->IC_CaptureCallback(htim);
#else
  HAL_TIM_IC_CaptureCallback(htim);
 80032ec:	68f8      	ldr	r0, [r7, #12]
 80032ee:	f7ff ff2d 	bl	800314c <HAL_TIM_IC_CaptureCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	2200      	movs	r2, #0
 80032f6:	771a      	strb	r2, [r3, #28]
}
 80032f8:	bf00      	nop
 80032fa:	3710      	adds	r7, #16
 80032fc:	46bd      	mov	sp, r7
 80032fe:	bd80      	pop	{r7, pc}

08003300 <TIM_DMACaptureHalfCplt>:
  * @brief  TIM DMA Capture half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMACaptureHalfCplt(DMA_HandleTypeDef *hdma)
{
 8003300:	b580      	push	{r7, lr}
 8003302:	b084      	sub	sp, #16
 8003304:	af00      	add	r7, sp, #0
 8003306:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800330c:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003312:	687a      	ldr	r2, [r7, #4]
 8003314:	429a      	cmp	r2, r3
 8003316:	d103      	bne.n	8003320 <TIM_DMACaptureHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	2201      	movs	r2, #1
 800331c:	771a      	strb	r2, [r3, #28]
 800331e:	e019      	b.n	8003354 <TIM_DMACaptureHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003324:	687a      	ldr	r2, [r7, #4]
 8003326:	429a      	cmp	r2, r3
 8003328:	d103      	bne.n	8003332 <TIM_DMACaptureHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	2202      	movs	r2, #2
 800332e:	771a      	strb	r2, [r3, #28]
 8003330:	e010      	b.n	8003354 <TIM_DMACaptureHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003336:	687a      	ldr	r2, [r7, #4]
 8003338:	429a      	cmp	r2, r3
 800333a:	d103      	bne.n	8003344 <TIM_DMACaptureHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	2204      	movs	r2, #4
 8003340:	771a      	strb	r2, [r3, #28]
 8003342:	e007      	b.n	8003354 <TIM_DMACaptureHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003348:	687a      	ldr	r2, [r7, #4]
 800334a:	429a      	cmp	r2, r3
 800334c:	d102      	bne.n	8003354 <TIM_DMACaptureHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	2208      	movs	r2, #8
 8003352:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->IC_CaptureHalfCpltCallback(htim);
#else
  HAL_TIM_IC_CaptureHalfCpltCallback(htim);
 8003354:	68f8      	ldr	r0, [r7, #12]
 8003356:	f7ff ff02 	bl	800315e <HAL_TIM_IC_CaptureHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	2200      	movs	r2, #0
 800335e:	771a      	strb	r2, [r3, #28]
}
 8003360:	bf00      	nop
 8003362:	3710      	adds	r7, #16
 8003364:	46bd      	mov	sp, r7
 8003366:	bd80      	pop	{r7, pc}

08003368 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003368:	b480      	push	{r7}
 800336a:	b085      	sub	sp, #20
 800336c:	af00      	add	r7, sp, #0
 800336e:	6078      	str	r0, [r7, #4]
 8003370:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	4a29      	ldr	r2, [pc, #164]	; (8003420 <TIM_Base_SetConfig+0xb8>)
 800337c:	4293      	cmp	r3, r2
 800337e:	d00b      	beq.n	8003398 <TIM_Base_SetConfig+0x30>
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003386:	d007      	beq.n	8003398 <TIM_Base_SetConfig+0x30>
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	4a26      	ldr	r2, [pc, #152]	; (8003424 <TIM_Base_SetConfig+0xbc>)
 800338c:	4293      	cmp	r3, r2
 800338e:	d003      	beq.n	8003398 <TIM_Base_SetConfig+0x30>
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	4a25      	ldr	r2, [pc, #148]	; (8003428 <TIM_Base_SetConfig+0xc0>)
 8003394:	4293      	cmp	r3, r2
 8003396:	d108      	bne.n	80033aa <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800339e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80033a0:	683b      	ldr	r3, [r7, #0]
 80033a2:	685b      	ldr	r3, [r3, #4]
 80033a4:	68fa      	ldr	r2, [r7, #12]
 80033a6:	4313      	orrs	r3, r2
 80033a8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	4a1c      	ldr	r2, [pc, #112]	; (8003420 <TIM_Base_SetConfig+0xb8>)
 80033ae:	4293      	cmp	r3, r2
 80033b0:	d00b      	beq.n	80033ca <TIM_Base_SetConfig+0x62>
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80033b8:	d007      	beq.n	80033ca <TIM_Base_SetConfig+0x62>
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	4a19      	ldr	r2, [pc, #100]	; (8003424 <TIM_Base_SetConfig+0xbc>)
 80033be:	4293      	cmp	r3, r2
 80033c0:	d003      	beq.n	80033ca <TIM_Base_SetConfig+0x62>
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	4a18      	ldr	r2, [pc, #96]	; (8003428 <TIM_Base_SetConfig+0xc0>)
 80033c6:	4293      	cmp	r3, r2
 80033c8:	d108      	bne.n	80033dc <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80033d0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80033d2:	683b      	ldr	r3, [r7, #0]
 80033d4:	68db      	ldr	r3, [r3, #12]
 80033d6:	68fa      	ldr	r2, [r7, #12]
 80033d8:	4313      	orrs	r3, r2
 80033da:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80033e2:	683b      	ldr	r3, [r7, #0]
 80033e4:	695b      	ldr	r3, [r3, #20]
 80033e6:	4313      	orrs	r3, r2
 80033e8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	68fa      	ldr	r2, [r7, #12]
 80033ee:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80033f0:	683b      	ldr	r3, [r7, #0]
 80033f2:	689a      	ldr	r2, [r3, #8]
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80033f8:	683b      	ldr	r3, [r7, #0]
 80033fa:	681a      	ldr	r2, [r3, #0]
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	4a07      	ldr	r2, [pc, #28]	; (8003420 <TIM_Base_SetConfig+0xb8>)
 8003404:	4293      	cmp	r3, r2
 8003406:	d103      	bne.n	8003410 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003408:	683b      	ldr	r3, [r7, #0]
 800340a:	691a      	ldr	r2, [r3, #16]
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	2201      	movs	r2, #1
 8003414:	615a      	str	r2, [r3, #20]
}
 8003416:	bf00      	nop
 8003418:	3714      	adds	r7, #20
 800341a:	46bd      	mov	sp, r7
 800341c:	bc80      	pop	{r7}
 800341e:	4770      	bx	lr
 8003420:	40012c00 	.word	0x40012c00
 8003424:	40000400 	.word	0x40000400
 8003428:	40000800 	.word	0x40000800

0800342c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800342c:	b480      	push	{r7}
 800342e:	b087      	sub	sp, #28
 8003430:	af00      	add	r7, sp, #0
 8003432:	6078      	str	r0, [r7, #4]
 8003434:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	6a1b      	ldr	r3, [r3, #32]
 800343a:	f023 0201 	bic.w	r2, r3, #1
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	6a1b      	ldr	r3, [r3, #32]
 8003446:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	685b      	ldr	r3, [r3, #4]
 800344c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	699b      	ldr	r3, [r3, #24]
 8003452:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800345a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	f023 0303 	bic.w	r3, r3, #3
 8003462:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003464:	683b      	ldr	r3, [r7, #0]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	68fa      	ldr	r2, [r7, #12]
 800346a:	4313      	orrs	r3, r2
 800346c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800346e:	697b      	ldr	r3, [r7, #20]
 8003470:	f023 0302 	bic.w	r3, r3, #2
 8003474:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003476:	683b      	ldr	r3, [r7, #0]
 8003478:	689b      	ldr	r3, [r3, #8]
 800347a:	697a      	ldr	r2, [r7, #20]
 800347c:	4313      	orrs	r3, r2
 800347e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	4a1c      	ldr	r2, [pc, #112]	; (80034f4 <TIM_OC1_SetConfig+0xc8>)
 8003484:	4293      	cmp	r3, r2
 8003486:	d10c      	bne.n	80034a2 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003488:	697b      	ldr	r3, [r7, #20]
 800348a:	f023 0308 	bic.w	r3, r3, #8
 800348e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003490:	683b      	ldr	r3, [r7, #0]
 8003492:	68db      	ldr	r3, [r3, #12]
 8003494:	697a      	ldr	r2, [r7, #20]
 8003496:	4313      	orrs	r3, r2
 8003498:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800349a:	697b      	ldr	r3, [r7, #20]
 800349c:	f023 0304 	bic.w	r3, r3, #4
 80034a0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	4a13      	ldr	r2, [pc, #76]	; (80034f4 <TIM_OC1_SetConfig+0xc8>)
 80034a6:	4293      	cmp	r3, r2
 80034a8:	d111      	bne.n	80034ce <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80034aa:	693b      	ldr	r3, [r7, #16]
 80034ac:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80034b0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80034b2:	693b      	ldr	r3, [r7, #16]
 80034b4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80034b8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80034ba:	683b      	ldr	r3, [r7, #0]
 80034bc:	695b      	ldr	r3, [r3, #20]
 80034be:	693a      	ldr	r2, [r7, #16]
 80034c0:	4313      	orrs	r3, r2
 80034c2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80034c4:	683b      	ldr	r3, [r7, #0]
 80034c6:	699b      	ldr	r3, [r3, #24]
 80034c8:	693a      	ldr	r2, [r7, #16]
 80034ca:	4313      	orrs	r3, r2
 80034cc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	693a      	ldr	r2, [r7, #16]
 80034d2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	68fa      	ldr	r2, [r7, #12]
 80034d8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80034da:	683b      	ldr	r3, [r7, #0]
 80034dc:	685a      	ldr	r2, [r3, #4]
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	697a      	ldr	r2, [r7, #20]
 80034e6:	621a      	str	r2, [r3, #32]
}
 80034e8:	bf00      	nop
 80034ea:	371c      	adds	r7, #28
 80034ec:	46bd      	mov	sp, r7
 80034ee:	bc80      	pop	{r7}
 80034f0:	4770      	bx	lr
 80034f2:	bf00      	nop
 80034f4:	40012c00 	.word	0x40012c00

080034f8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80034f8:	b480      	push	{r7}
 80034fa:	b087      	sub	sp, #28
 80034fc:	af00      	add	r7, sp, #0
 80034fe:	6078      	str	r0, [r7, #4]
 8003500:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	6a1b      	ldr	r3, [r3, #32]
 8003506:	f023 0210 	bic.w	r2, r3, #16
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	6a1b      	ldr	r3, [r3, #32]
 8003512:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	685b      	ldr	r3, [r3, #4]
 8003518:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	699b      	ldr	r3, [r3, #24]
 800351e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003526:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800352e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003530:	683b      	ldr	r3, [r7, #0]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	021b      	lsls	r3, r3, #8
 8003536:	68fa      	ldr	r2, [r7, #12]
 8003538:	4313      	orrs	r3, r2
 800353a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800353c:	697b      	ldr	r3, [r7, #20]
 800353e:	f023 0320 	bic.w	r3, r3, #32
 8003542:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003544:	683b      	ldr	r3, [r7, #0]
 8003546:	689b      	ldr	r3, [r3, #8]
 8003548:	011b      	lsls	r3, r3, #4
 800354a:	697a      	ldr	r2, [r7, #20]
 800354c:	4313      	orrs	r3, r2
 800354e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	4a1d      	ldr	r2, [pc, #116]	; (80035c8 <TIM_OC2_SetConfig+0xd0>)
 8003554:	4293      	cmp	r3, r2
 8003556:	d10d      	bne.n	8003574 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003558:	697b      	ldr	r3, [r7, #20]
 800355a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800355e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003560:	683b      	ldr	r3, [r7, #0]
 8003562:	68db      	ldr	r3, [r3, #12]
 8003564:	011b      	lsls	r3, r3, #4
 8003566:	697a      	ldr	r2, [r7, #20]
 8003568:	4313      	orrs	r3, r2
 800356a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800356c:	697b      	ldr	r3, [r7, #20]
 800356e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003572:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	4a14      	ldr	r2, [pc, #80]	; (80035c8 <TIM_OC2_SetConfig+0xd0>)
 8003578:	4293      	cmp	r3, r2
 800357a:	d113      	bne.n	80035a4 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800357c:	693b      	ldr	r3, [r7, #16]
 800357e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003582:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003584:	693b      	ldr	r3, [r7, #16]
 8003586:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800358a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800358c:	683b      	ldr	r3, [r7, #0]
 800358e:	695b      	ldr	r3, [r3, #20]
 8003590:	009b      	lsls	r3, r3, #2
 8003592:	693a      	ldr	r2, [r7, #16]
 8003594:	4313      	orrs	r3, r2
 8003596:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003598:	683b      	ldr	r3, [r7, #0]
 800359a:	699b      	ldr	r3, [r3, #24]
 800359c:	009b      	lsls	r3, r3, #2
 800359e:	693a      	ldr	r2, [r7, #16]
 80035a0:	4313      	orrs	r3, r2
 80035a2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	693a      	ldr	r2, [r7, #16]
 80035a8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	68fa      	ldr	r2, [r7, #12]
 80035ae:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80035b0:	683b      	ldr	r3, [r7, #0]
 80035b2:	685a      	ldr	r2, [r3, #4]
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	697a      	ldr	r2, [r7, #20]
 80035bc:	621a      	str	r2, [r3, #32]
}
 80035be:	bf00      	nop
 80035c0:	371c      	adds	r7, #28
 80035c2:	46bd      	mov	sp, r7
 80035c4:	bc80      	pop	{r7}
 80035c6:	4770      	bx	lr
 80035c8:	40012c00 	.word	0x40012c00

080035cc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80035cc:	b480      	push	{r7}
 80035ce:	b087      	sub	sp, #28
 80035d0:	af00      	add	r7, sp, #0
 80035d2:	6078      	str	r0, [r7, #4]
 80035d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	6a1b      	ldr	r3, [r3, #32]
 80035da:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	6a1b      	ldr	r3, [r3, #32]
 80035e6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	685b      	ldr	r3, [r3, #4]
 80035ec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	69db      	ldr	r3, [r3, #28]
 80035f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80035fa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	f023 0303 	bic.w	r3, r3, #3
 8003602:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003604:	683b      	ldr	r3, [r7, #0]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	68fa      	ldr	r2, [r7, #12]
 800360a:	4313      	orrs	r3, r2
 800360c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800360e:	697b      	ldr	r3, [r7, #20]
 8003610:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003614:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003616:	683b      	ldr	r3, [r7, #0]
 8003618:	689b      	ldr	r3, [r3, #8]
 800361a:	021b      	lsls	r3, r3, #8
 800361c:	697a      	ldr	r2, [r7, #20]
 800361e:	4313      	orrs	r3, r2
 8003620:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	4a1d      	ldr	r2, [pc, #116]	; (800369c <TIM_OC3_SetConfig+0xd0>)
 8003626:	4293      	cmp	r3, r2
 8003628:	d10d      	bne.n	8003646 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800362a:	697b      	ldr	r3, [r7, #20]
 800362c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003630:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003632:	683b      	ldr	r3, [r7, #0]
 8003634:	68db      	ldr	r3, [r3, #12]
 8003636:	021b      	lsls	r3, r3, #8
 8003638:	697a      	ldr	r2, [r7, #20]
 800363a:	4313      	orrs	r3, r2
 800363c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800363e:	697b      	ldr	r3, [r7, #20]
 8003640:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003644:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	4a14      	ldr	r2, [pc, #80]	; (800369c <TIM_OC3_SetConfig+0xd0>)
 800364a:	4293      	cmp	r3, r2
 800364c:	d113      	bne.n	8003676 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800364e:	693b      	ldr	r3, [r7, #16]
 8003650:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003654:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003656:	693b      	ldr	r3, [r7, #16]
 8003658:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800365c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800365e:	683b      	ldr	r3, [r7, #0]
 8003660:	695b      	ldr	r3, [r3, #20]
 8003662:	011b      	lsls	r3, r3, #4
 8003664:	693a      	ldr	r2, [r7, #16]
 8003666:	4313      	orrs	r3, r2
 8003668:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800366a:	683b      	ldr	r3, [r7, #0]
 800366c:	699b      	ldr	r3, [r3, #24]
 800366e:	011b      	lsls	r3, r3, #4
 8003670:	693a      	ldr	r2, [r7, #16]
 8003672:	4313      	orrs	r3, r2
 8003674:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	693a      	ldr	r2, [r7, #16]
 800367a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	68fa      	ldr	r2, [r7, #12]
 8003680:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003682:	683b      	ldr	r3, [r7, #0]
 8003684:	685a      	ldr	r2, [r3, #4]
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	697a      	ldr	r2, [r7, #20]
 800368e:	621a      	str	r2, [r3, #32]
}
 8003690:	bf00      	nop
 8003692:	371c      	adds	r7, #28
 8003694:	46bd      	mov	sp, r7
 8003696:	bc80      	pop	{r7}
 8003698:	4770      	bx	lr
 800369a:	bf00      	nop
 800369c:	40012c00 	.word	0x40012c00

080036a0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80036a0:	b480      	push	{r7}
 80036a2:	b087      	sub	sp, #28
 80036a4:	af00      	add	r7, sp, #0
 80036a6:	6078      	str	r0, [r7, #4]
 80036a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	6a1b      	ldr	r3, [r3, #32]
 80036ae:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	6a1b      	ldr	r3, [r3, #32]
 80036ba:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	685b      	ldr	r3, [r3, #4]
 80036c0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	69db      	ldr	r3, [r3, #28]
 80036c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80036ce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80036d6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80036d8:	683b      	ldr	r3, [r7, #0]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	021b      	lsls	r3, r3, #8
 80036de:	68fa      	ldr	r2, [r7, #12]
 80036e0:	4313      	orrs	r3, r2
 80036e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80036e4:	693b      	ldr	r3, [r7, #16]
 80036e6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80036ea:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80036ec:	683b      	ldr	r3, [r7, #0]
 80036ee:	689b      	ldr	r3, [r3, #8]
 80036f0:	031b      	lsls	r3, r3, #12
 80036f2:	693a      	ldr	r2, [r7, #16]
 80036f4:	4313      	orrs	r3, r2
 80036f6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	4a0f      	ldr	r2, [pc, #60]	; (8003738 <TIM_OC4_SetConfig+0x98>)
 80036fc:	4293      	cmp	r3, r2
 80036fe:	d109      	bne.n	8003714 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003700:	697b      	ldr	r3, [r7, #20]
 8003702:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003706:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003708:	683b      	ldr	r3, [r7, #0]
 800370a:	695b      	ldr	r3, [r3, #20]
 800370c:	019b      	lsls	r3, r3, #6
 800370e:	697a      	ldr	r2, [r7, #20]
 8003710:	4313      	orrs	r3, r2
 8003712:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	697a      	ldr	r2, [r7, #20]
 8003718:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	68fa      	ldr	r2, [r7, #12]
 800371e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003720:	683b      	ldr	r3, [r7, #0]
 8003722:	685a      	ldr	r2, [r3, #4]
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	693a      	ldr	r2, [r7, #16]
 800372c:	621a      	str	r2, [r3, #32]
}
 800372e:	bf00      	nop
 8003730:	371c      	adds	r7, #28
 8003732:	46bd      	mov	sp, r7
 8003734:	bc80      	pop	{r7}
 8003736:	4770      	bx	lr
 8003738:	40012c00 	.word	0x40012c00

0800373c <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 800373c:	b580      	push	{r7, lr}
 800373e:	b086      	sub	sp, #24
 8003740:	af00      	add	r7, sp, #0
 8003742:	6078      	str	r0, [r7, #4]
 8003744:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	689b      	ldr	r3, [r3, #8]
 800374c:	617b      	str	r3, [r7, #20]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800374e:	697b      	ldr	r3, [r7, #20]
 8003750:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003754:	617b      	str	r3, [r7, #20]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8003756:	683b      	ldr	r3, [r7, #0]
 8003758:	685b      	ldr	r3, [r3, #4]
 800375a:	697a      	ldr	r2, [r7, #20]
 800375c:	4313      	orrs	r3, r2
 800375e:	617b      	str	r3, [r7, #20]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8003760:	697b      	ldr	r3, [r7, #20]
 8003762:	f023 0307 	bic.w	r3, r3, #7
 8003766:	617b      	str	r3, [r7, #20]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8003768:	683b      	ldr	r3, [r7, #0]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	697a      	ldr	r2, [r7, #20]
 800376e:	4313      	orrs	r3, r2
 8003770:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	697a      	ldr	r2, [r7, #20]
 8003778:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 800377a:	683b      	ldr	r3, [r7, #0]
 800377c:	685b      	ldr	r3, [r3, #4]
 800377e:	2b70      	cmp	r3, #112	; 0x70
 8003780:	d01a      	beq.n	80037b8 <TIM_SlaveTimer_SetConfig+0x7c>
 8003782:	2b70      	cmp	r3, #112	; 0x70
 8003784:	d860      	bhi.n	8003848 <TIM_SlaveTimer_SetConfig+0x10c>
 8003786:	2b60      	cmp	r3, #96	; 0x60
 8003788:	d054      	beq.n	8003834 <TIM_SlaveTimer_SetConfig+0xf8>
 800378a:	2b60      	cmp	r3, #96	; 0x60
 800378c:	d85c      	bhi.n	8003848 <TIM_SlaveTimer_SetConfig+0x10c>
 800378e:	2b50      	cmp	r3, #80	; 0x50
 8003790:	d046      	beq.n	8003820 <TIM_SlaveTimer_SetConfig+0xe4>
 8003792:	2b50      	cmp	r3, #80	; 0x50
 8003794:	d858      	bhi.n	8003848 <TIM_SlaveTimer_SetConfig+0x10c>
 8003796:	2b40      	cmp	r3, #64	; 0x40
 8003798:	d019      	beq.n	80037ce <TIM_SlaveTimer_SetConfig+0x92>
 800379a:	2b40      	cmp	r3, #64	; 0x40
 800379c:	d854      	bhi.n	8003848 <TIM_SlaveTimer_SetConfig+0x10c>
 800379e:	2b30      	cmp	r3, #48	; 0x30
 80037a0:	d054      	beq.n	800384c <TIM_SlaveTimer_SetConfig+0x110>
 80037a2:	2b30      	cmp	r3, #48	; 0x30
 80037a4:	d850      	bhi.n	8003848 <TIM_SlaveTimer_SetConfig+0x10c>
 80037a6:	2b20      	cmp	r3, #32
 80037a8:	d050      	beq.n	800384c <TIM_SlaveTimer_SetConfig+0x110>
 80037aa:	2b20      	cmp	r3, #32
 80037ac:	d84c      	bhi.n	8003848 <TIM_SlaveTimer_SetConfig+0x10c>
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d04c      	beq.n	800384c <TIM_SlaveTimer_SetConfig+0x110>
 80037b2:	2b10      	cmp	r3, #16
 80037b4:	d04a      	beq.n	800384c <TIM_SlaveTimer_SetConfig+0x110>
        assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
        break;
      }

    default:
      break;
 80037b6:	e047      	b.n	8003848 <TIM_SlaveTimer_SetConfig+0x10c>
      TIM_ETR_SetConfig(htim->Instance,
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	6818      	ldr	r0, [r3, #0]
 80037bc:	683b      	ldr	r3, [r7, #0]
 80037be:	68d9      	ldr	r1, [r3, #12]
 80037c0:	683b      	ldr	r3, [r7, #0]
 80037c2:	689a      	ldr	r2, [r3, #8]
 80037c4:	683b      	ldr	r3, [r7, #0]
 80037c6:	691b      	ldr	r3, [r3, #16]
 80037c8:	f000 f9ca 	bl	8003b60 <TIM_ETR_SetConfig>
      break;
 80037cc:	e03f      	b.n	800384e <TIM_SlaveTimer_SetConfig+0x112>
      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 80037ce:	683b      	ldr	r3, [r7, #0]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	2b05      	cmp	r3, #5
 80037d4:	d101      	bne.n	80037da <TIM_SlaveTimer_SetConfig+0x9e>
        return HAL_ERROR;
 80037d6:	2301      	movs	r3, #1
 80037d8:	e03a      	b.n	8003850 <TIM_SlaveTimer_SetConfig+0x114>
      tmpccer = htim->Instance->CCER;
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	6a1b      	ldr	r3, [r3, #32]
 80037e0:	613b      	str	r3, [r7, #16]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	6a1a      	ldr	r2, [r3, #32]
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	f022 0201 	bic.w	r2, r2, #1
 80037f0:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	699b      	ldr	r3, [r3, #24]
 80037f8:	60fb      	str	r3, [r7, #12]
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003800:	60fb      	str	r3, [r7, #12]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8003802:	683b      	ldr	r3, [r7, #0]
 8003804:	691b      	ldr	r3, [r3, #16]
 8003806:	011b      	lsls	r3, r3, #4
 8003808:	68fa      	ldr	r2, [r7, #12]
 800380a:	4313      	orrs	r3, r2
 800380c:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCMR1 = tmpccmr1;
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	68fa      	ldr	r2, [r7, #12]
 8003814:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	693a      	ldr	r2, [r7, #16]
 800381c:	621a      	str	r2, [r3, #32]
      break;
 800381e:	e016      	b.n	800384e <TIM_SlaveTimer_SetConfig+0x112>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	6818      	ldr	r0, [r3, #0]
 8003824:	683b      	ldr	r3, [r7, #0]
 8003826:	6899      	ldr	r1, [r3, #8]
 8003828:	683b      	ldr	r3, [r7, #0]
 800382a:	691b      	ldr	r3, [r3, #16]
 800382c:	461a      	mov	r2, r3
 800382e:	f000 f86d 	bl	800390c <TIM_TI1_ConfigInputStage>
      break;
 8003832:	e00c      	b.n	800384e <TIM_SlaveTimer_SetConfig+0x112>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	6818      	ldr	r0, [r3, #0]
 8003838:	683b      	ldr	r3, [r7, #0]
 800383a:	6899      	ldr	r1, [r3, #8]
 800383c:	683b      	ldr	r3, [r7, #0]
 800383e:	691b      	ldr	r3, [r3, #16]
 8003840:	461a      	mov	r2, r3
 8003842:	f000 f8cd 	bl	80039e0 <TIM_TI2_ConfigInputStage>
      break;
 8003846:	e002      	b.n	800384e <TIM_SlaveTimer_SetConfig+0x112>
      break;
 8003848:	bf00      	nop
 800384a:	e000      	b.n	800384e <TIM_SlaveTimer_SetConfig+0x112>
        break;
 800384c:	bf00      	nop
  }
  return HAL_OK;
 800384e:	2300      	movs	r3, #0
}
 8003850:	4618      	mov	r0, r3
 8003852:	3718      	adds	r7, #24
 8003854:	46bd      	mov	sp, r7
 8003856:	bd80      	pop	{r7, pc}

08003858 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8003858:	b480      	push	{r7}
 800385a:	b087      	sub	sp, #28
 800385c:	af00      	add	r7, sp, #0
 800385e:	60f8      	str	r0, [r7, #12]
 8003860:	60b9      	str	r1, [r7, #8]
 8003862:	607a      	str	r2, [r7, #4]
 8003864:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	6a1b      	ldr	r3, [r3, #32]
 800386a:	f023 0201 	bic.w	r2, r3, #1
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	699b      	ldr	r3, [r3, #24]
 8003876:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	6a1b      	ldr	r3, [r3, #32]
 800387c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	4a1f      	ldr	r2, [pc, #124]	; (8003900 <TIM_TI1_SetConfig+0xa8>)
 8003882:	4293      	cmp	r3, r2
 8003884:	d00b      	beq.n	800389e <TIM_TI1_SetConfig+0x46>
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800388c:	d007      	beq.n	800389e <TIM_TI1_SetConfig+0x46>
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	4a1c      	ldr	r2, [pc, #112]	; (8003904 <TIM_TI1_SetConfig+0xac>)
 8003892:	4293      	cmp	r3, r2
 8003894:	d003      	beq.n	800389e <TIM_TI1_SetConfig+0x46>
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	4a1b      	ldr	r2, [pc, #108]	; (8003908 <TIM_TI1_SetConfig+0xb0>)
 800389a:	4293      	cmp	r3, r2
 800389c:	d101      	bne.n	80038a2 <TIM_TI1_SetConfig+0x4a>
 800389e:	2301      	movs	r3, #1
 80038a0:	e000      	b.n	80038a4 <TIM_TI1_SetConfig+0x4c>
 80038a2:	2300      	movs	r3, #0
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d008      	beq.n	80038ba <TIM_TI1_SetConfig+0x62>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 80038a8:	697b      	ldr	r3, [r7, #20]
 80038aa:	f023 0303 	bic.w	r3, r3, #3
 80038ae:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 80038b0:	697a      	ldr	r2, [r7, #20]
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	4313      	orrs	r3, r2
 80038b6:	617b      	str	r3, [r7, #20]
 80038b8:	e003      	b.n	80038c2 <TIM_TI1_SetConfig+0x6a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 80038ba:	697b      	ldr	r3, [r7, #20]
 80038bc:	f043 0301 	orr.w	r3, r3, #1
 80038c0:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80038c2:	697b      	ldr	r3, [r7, #20]
 80038c4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80038c8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 80038ca:	683b      	ldr	r3, [r7, #0]
 80038cc:	011b      	lsls	r3, r3, #4
 80038ce:	b2db      	uxtb	r3, r3
 80038d0:	697a      	ldr	r2, [r7, #20]
 80038d2:	4313      	orrs	r3, r2
 80038d4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80038d6:	693b      	ldr	r3, [r7, #16]
 80038d8:	f023 030a 	bic.w	r3, r3, #10
 80038dc:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 80038de:	68bb      	ldr	r3, [r7, #8]
 80038e0:	f003 030a 	and.w	r3, r3, #10
 80038e4:	693a      	ldr	r2, [r7, #16]
 80038e6:	4313      	orrs	r3, r2
 80038e8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	697a      	ldr	r2, [r7, #20]
 80038ee:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	693a      	ldr	r2, [r7, #16]
 80038f4:	621a      	str	r2, [r3, #32]
}
 80038f6:	bf00      	nop
 80038f8:	371c      	adds	r7, #28
 80038fa:	46bd      	mov	sp, r7
 80038fc:	bc80      	pop	{r7}
 80038fe:	4770      	bx	lr
 8003900:	40012c00 	.word	0x40012c00
 8003904:	40000400 	.word	0x40000400
 8003908:	40000800 	.word	0x40000800

0800390c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800390c:	b480      	push	{r7}
 800390e:	b087      	sub	sp, #28
 8003910:	af00      	add	r7, sp, #0
 8003912:	60f8      	str	r0, [r7, #12]
 8003914:	60b9      	str	r1, [r7, #8]
 8003916:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	6a1b      	ldr	r3, [r3, #32]
 800391c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	6a1b      	ldr	r3, [r3, #32]
 8003922:	f023 0201 	bic.w	r2, r3, #1
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	699b      	ldr	r3, [r3, #24]
 800392e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003930:	693b      	ldr	r3, [r7, #16]
 8003932:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003936:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	011b      	lsls	r3, r3, #4
 800393c:	693a      	ldr	r2, [r7, #16]
 800393e:	4313      	orrs	r3, r2
 8003940:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003942:	697b      	ldr	r3, [r7, #20]
 8003944:	f023 030a 	bic.w	r3, r3, #10
 8003948:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800394a:	697a      	ldr	r2, [r7, #20]
 800394c:	68bb      	ldr	r3, [r7, #8]
 800394e:	4313      	orrs	r3, r2
 8003950:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	693a      	ldr	r2, [r7, #16]
 8003956:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	697a      	ldr	r2, [r7, #20]
 800395c:	621a      	str	r2, [r3, #32]
}
 800395e:	bf00      	nop
 8003960:	371c      	adds	r7, #28
 8003962:	46bd      	mov	sp, r7
 8003964:	bc80      	pop	{r7}
 8003966:	4770      	bx	lr

08003968 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8003968:	b480      	push	{r7}
 800396a:	b087      	sub	sp, #28
 800396c:	af00      	add	r7, sp, #0
 800396e:	60f8      	str	r0, [r7, #12]
 8003970:	60b9      	str	r1, [r7, #8]
 8003972:	607a      	str	r2, [r7, #4]
 8003974:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	6a1b      	ldr	r3, [r3, #32]
 800397a:	f023 0210 	bic.w	r2, r3, #16
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	699b      	ldr	r3, [r3, #24]
 8003986:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	6a1b      	ldr	r3, [r3, #32]
 800398c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 800398e:	697b      	ldr	r3, [r7, #20]
 8003990:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003994:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	021b      	lsls	r3, r3, #8
 800399a:	697a      	ldr	r2, [r7, #20]
 800399c:	4313      	orrs	r3, r2
 800399e:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80039a0:	697b      	ldr	r3, [r7, #20]
 80039a2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80039a6:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 80039a8:	683b      	ldr	r3, [r7, #0]
 80039aa:	031b      	lsls	r3, r3, #12
 80039ac:	b29b      	uxth	r3, r3
 80039ae:	697a      	ldr	r2, [r7, #20]
 80039b0:	4313      	orrs	r3, r2
 80039b2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80039b4:	693b      	ldr	r3, [r7, #16]
 80039b6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80039ba:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 80039bc:	68bb      	ldr	r3, [r7, #8]
 80039be:	011b      	lsls	r3, r3, #4
 80039c0:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 80039c4:	693a      	ldr	r2, [r7, #16]
 80039c6:	4313      	orrs	r3, r2
 80039c8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	697a      	ldr	r2, [r7, #20]
 80039ce:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	693a      	ldr	r2, [r7, #16]
 80039d4:	621a      	str	r2, [r3, #32]
}
 80039d6:	bf00      	nop
 80039d8:	371c      	adds	r7, #28
 80039da:	46bd      	mov	sp, r7
 80039dc:	bc80      	pop	{r7}
 80039de:	4770      	bx	lr

080039e0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80039e0:	b480      	push	{r7}
 80039e2:	b087      	sub	sp, #28
 80039e4:	af00      	add	r7, sp, #0
 80039e6:	60f8      	str	r0, [r7, #12]
 80039e8:	60b9      	str	r1, [r7, #8]
 80039ea:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	6a1b      	ldr	r3, [r3, #32]
 80039f0:	f023 0210 	bic.w	r2, r3, #16
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	699b      	ldr	r3, [r3, #24]
 80039fc:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	6a1b      	ldr	r3, [r3, #32]
 8003a02:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003a04:	697b      	ldr	r3, [r7, #20]
 8003a06:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003a0a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	031b      	lsls	r3, r3, #12
 8003a10:	697a      	ldr	r2, [r7, #20]
 8003a12:	4313      	orrs	r3, r2
 8003a14:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003a16:	693b      	ldr	r3, [r7, #16]
 8003a18:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003a1c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003a1e:	68bb      	ldr	r3, [r7, #8]
 8003a20:	011b      	lsls	r3, r3, #4
 8003a22:	693a      	ldr	r2, [r7, #16]
 8003a24:	4313      	orrs	r3, r2
 8003a26:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	697a      	ldr	r2, [r7, #20]
 8003a2c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	693a      	ldr	r2, [r7, #16]
 8003a32:	621a      	str	r2, [r3, #32]
}
 8003a34:	bf00      	nop
 8003a36:	371c      	adds	r7, #28
 8003a38:	46bd      	mov	sp, r7
 8003a3a:	bc80      	pop	{r7}
 8003a3c:	4770      	bx	lr

08003a3e <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8003a3e:	b480      	push	{r7}
 8003a40:	b087      	sub	sp, #28
 8003a42:	af00      	add	r7, sp, #0
 8003a44:	60f8      	str	r0, [r7, #12]
 8003a46:	60b9      	str	r1, [r7, #8]
 8003a48:	607a      	str	r2, [r7, #4]
 8003a4a:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	6a1b      	ldr	r3, [r3, #32]
 8003a50:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	69db      	ldr	r3, [r3, #28]
 8003a5c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	6a1b      	ldr	r3, [r3, #32]
 8003a62:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8003a64:	697b      	ldr	r3, [r7, #20]
 8003a66:	f023 0303 	bic.w	r3, r3, #3
 8003a6a:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8003a6c:	697a      	ldr	r2, [r7, #20]
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	4313      	orrs	r3, r2
 8003a72:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8003a74:	697b      	ldr	r3, [r7, #20]
 8003a76:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003a7a:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8003a7c:	683b      	ldr	r3, [r7, #0]
 8003a7e:	011b      	lsls	r3, r3, #4
 8003a80:	b2db      	uxtb	r3, r3
 8003a82:	697a      	ldr	r2, [r7, #20]
 8003a84:	4313      	orrs	r3, r2
 8003a86:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P);
 8003a88:	693b      	ldr	r3, [r7, #16]
 8003a8a:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003a8e:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & TIM_CCER_CC3P);
 8003a90:	68bb      	ldr	r3, [r7, #8]
 8003a92:	021b      	lsls	r3, r3, #8
 8003a94:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003a98:	693a      	ldr	r2, [r7, #16]
 8003a9a:	4313      	orrs	r3, r2
 8003a9c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	697a      	ldr	r2, [r7, #20]
 8003aa2:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	693a      	ldr	r2, [r7, #16]
 8003aa8:	621a      	str	r2, [r3, #32]
}
 8003aaa:	bf00      	nop
 8003aac:	371c      	adds	r7, #28
 8003aae:	46bd      	mov	sp, r7
 8003ab0:	bc80      	pop	{r7}
 8003ab2:	4770      	bx	lr

08003ab4 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8003ab4:	b480      	push	{r7}
 8003ab6:	b087      	sub	sp, #28
 8003ab8:	af00      	add	r7, sp, #0
 8003aba:	60f8      	str	r0, [r7, #12]
 8003abc:	60b9      	str	r1, [r7, #8]
 8003abe:	607a      	str	r2, [r7, #4]
 8003ac0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	6a1b      	ldr	r3, [r3, #32]
 8003ac6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	69db      	ldr	r3, [r3, #28]
 8003ad2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	6a1b      	ldr	r3, [r3, #32]
 8003ad8:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8003ada:	697b      	ldr	r3, [r7, #20]
 8003adc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003ae0:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	021b      	lsls	r3, r3, #8
 8003ae6:	697a      	ldr	r2, [r7, #20]
 8003ae8:	4313      	orrs	r3, r2
 8003aea:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8003aec:	697b      	ldr	r3, [r7, #20]
 8003aee:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003af2:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8003af4:	683b      	ldr	r3, [r7, #0]
 8003af6:	031b      	lsls	r3, r3, #12
 8003af8:	b29b      	uxth	r3, r3
 8003afa:	697a      	ldr	r2, [r7, #20]
 8003afc:	4313      	orrs	r3, r2
 8003afe:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P);
 8003b00:	693b      	ldr	r3, [r7, #16]
 8003b02:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003b06:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & TIM_CCER_CC4P);
 8003b08:	68bb      	ldr	r3, [r7, #8]
 8003b0a:	031b      	lsls	r3, r3, #12
 8003b0c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003b10:	693a      	ldr	r2, [r7, #16]
 8003b12:	4313      	orrs	r3, r2
 8003b14:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	697a      	ldr	r2, [r7, #20]
 8003b1a:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	693a      	ldr	r2, [r7, #16]
 8003b20:	621a      	str	r2, [r3, #32]
}
 8003b22:	bf00      	nop
 8003b24:	371c      	adds	r7, #28
 8003b26:	46bd      	mov	sp, r7
 8003b28:	bc80      	pop	{r7}
 8003b2a:	4770      	bx	lr

08003b2c <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003b2c:	b480      	push	{r7}
 8003b2e:	b085      	sub	sp, #20
 8003b30:	af00      	add	r7, sp, #0
 8003b32:	6078      	str	r0, [r7, #4]
 8003b34:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	689b      	ldr	r3, [r3, #8]
 8003b3a:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b42:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003b44:	683a      	ldr	r2, [r7, #0]
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	4313      	orrs	r3, r2
 8003b4a:	f043 0307 	orr.w	r3, r3, #7
 8003b4e:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	68fa      	ldr	r2, [r7, #12]
 8003b54:	609a      	str	r2, [r3, #8]
}
 8003b56:	bf00      	nop
 8003b58:	3714      	adds	r7, #20
 8003b5a:	46bd      	mov	sp, r7
 8003b5c:	bc80      	pop	{r7}
 8003b5e:	4770      	bx	lr

08003b60 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003b60:	b480      	push	{r7}
 8003b62:	b087      	sub	sp, #28
 8003b64:	af00      	add	r7, sp, #0
 8003b66:	60f8      	str	r0, [r7, #12]
 8003b68:	60b9      	str	r1, [r7, #8]
 8003b6a:	607a      	str	r2, [r7, #4]
 8003b6c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	689b      	ldr	r3, [r3, #8]
 8003b72:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003b74:	697b      	ldr	r3, [r7, #20]
 8003b76:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003b7a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003b7c:	683b      	ldr	r3, [r7, #0]
 8003b7e:	021a      	lsls	r2, r3, #8
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	431a      	orrs	r2, r3
 8003b84:	68bb      	ldr	r3, [r7, #8]
 8003b86:	4313      	orrs	r3, r2
 8003b88:	697a      	ldr	r2, [r7, #20]
 8003b8a:	4313      	orrs	r3, r2
 8003b8c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	697a      	ldr	r2, [r7, #20]
 8003b92:	609a      	str	r2, [r3, #8]
}
 8003b94:	bf00      	nop
 8003b96:	371c      	adds	r7, #28
 8003b98:	46bd      	mov	sp, r7
 8003b9a:	bc80      	pop	{r7}
 8003b9c:	4770      	bx	lr

08003b9e <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003b9e:	b480      	push	{r7}
 8003ba0:	b087      	sub	sp, #28
 8003ba2:	af00      	add	r7, sp, #0
 8003ba4:	60f8      	str	r0, [r7, #12]
 8003ba6:	60b9      	str	r1, [r7, #8]
 8003ba8:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003baa:	68bb      	ldr	r3, [r7, #8]
 8003bac:	f003 031f 	and.w	r3, r3, #31
 8003bb0:	2201      	movs	r2, #1
 8003bb2:	fa02 f303 	lsl.w	r3, r2, r3
 8003bb6:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	6a1a      	ldr	r2, [r3, #32]
 8003bbc:	697b      	ldr	r3, [r7, #20]
 8003bbe:	43db      	mvns	r3, r3
 8003bc0:	401a      	ands	r2, r3
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	6a1a      	ldr	r2, [r3, #32]
 8003bca:	68bb      	ldr	r3, [r7, #8]
 8003bcc:	f003 031f 	and.w	r3, r3, #31
 8003bd0:	6879      	ldr	r1, [r7, #4]
 8003bd2:	fa01 f303 	lsl.w	r3, r1, r3
 8003bd6:	431a      	orrs	r2, r3
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	621a      	str	r2, [r3, #32]
}
 8003bdc:	bf00      	nop
 8003bde:	371c      	adds	r7, #28
 8003be0:	46bd      	mov	sp, r7
 8003be2:	bc80      	pop	{r7}
 8003be4:	4770      	bx	lr
	...

08003be8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003be8:	b480      	push	{r7}
 8003bea:	b085      	sub	sp, #20
 8003bec:	af00      	add	r7, sp, #0
 8003bee:	6078      	str	r0, [r7, #4]
 8003bf0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003bf8:	2b01      	cmp	r3, #1
 8003bfa:	d101      	bne.n	8003c00 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003bfc:	2302      	movs	r3, #2
 8003bfe:	e046      	b.n	8003c8e <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	2201      	movs	r2, #1
 8003c04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	2202      	movs	r2, #2
 8003c0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	685b      	ldr	r3, [r3, #4]
 8003c16:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	689b      	ldr	r3, [r3, #8]
 8003c1e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c26:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003c28:	683b      	ldr	r3, [r7, #0]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	68fa      	ldr	r2, [r7, #12]
 8003c2e:	4313      	orrs	r3, r2
 8003c30:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	68fa      	ldr	r2, [r7, #12]
 8003c38:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	4a16      	ldr	r2, [pc, #88]	; (8003c98 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8003c40:	4293      	cmp	r3, r2
 8003c42:	d00e      	beq.n	8003c62 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003c4c:	d009      	beq.n	8003c62 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	4a12      	ldr	r2, [pc, #72]	; (8003c9c <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8003c54:	4293      	cmp	r3, r2
 8003c56:	d004      	beq.n	8003c62 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	4a10      	ldr	r2, [pc, #64]	; (8003ca0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8003c5e:	4293      	cmp	r3, r2
 8003c60:	d10c      	bne.n	8003c7c <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003c62:	68bb      	ldr	r3, [r7, #8]
 8003c64:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003c68:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003c6a:	683b      	ldr	r3, [r7, #0]
 8003c6c:	685b      	ldr	r3, [r3, #4]
 8003c6e:	68ba      	ldr	r2, [r7, #8]
 8003c70:	4313      	orrs	r3, r2
 8003c72:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	68ba      	ldr	r2, [r7, #8]
 8003c7a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	2201      	movs	r2, #1
 8003c80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	2200      	movs	r2, #0
 8003c88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003c8c:	2300      	movs	r3, #0
}
 8003c8e:	4618      	mov	r0, r3
 8003c90:	3714      	adds	r7, #20
 8003c92:	46bd      	mov	sp, r7
 8003c94:	bc80      	pop	{r7}
 8003c96:	4770      	bx	lr
 8003c98:	40012c00 	.word	0x40012c00
 8003c9c:	40000400 	.word	0x40000400
 8003ca0:	40000800 	.word	0x40000800

08003ca4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8003ca4:	b480      	push	{r7}
 8003ca6:	b085      	sub	sp, #20
 8003ca8:	af00      	add	r7, sp, #0
 8003caa:	6078      	str	r0, [r7, #4]
 8003cac:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8003cae:	2300      	movs	r3, #0
 8003cb0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003cb8:	2b01      	cmp	r3, #1
 8003cba:	d101      	bne.n	8003cc0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8003cbc:	2302      	movs	r3, #2
 8003cbe:	e03d      	b.n	8003d3c <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	2201      	movs	r2, #1
 8003cc4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8003cce:	683b      	ldr	r3, [r7, #0]
 8003cd0:	68db      	ldr	r3, [r3, #12]
 8003cd2:	4313      	orrs	r3, r2
 8003cd4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003cdc:	683b      	ldr	r3, [r7, #0]
 8003cde:	689b      	ldr	r3, [r3, #8]
 8003ce0:	4313      	orrs	r3, r2
 8003ce2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8003cea:	683b      	ldr	r3, [r7, #0]
 8003cec:	685b      	ldr	r3, [r3, #4]
 8003cee:	4313      	orrs	r3, r2
 8003cf0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8003cf8:	683b      	ldr	r3, [r7, #0]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	4313      	orrs	r3, r2
 8003cfe:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003d06:	683b      	ldr	r3, [r7, #0]
 8003d08:	691b      	ldr	r3, [r3, #16]
 8003d0a:	4313      	orrs	r3, r2
 8003d0c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8003d14:	683b      	ldr	r3, [r7, #0]
 8003d16:	695b      	ldr	r3, [r3, #20]
 8003d18:	4313      	orrs	r3, r2
 8003d1a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8003d22:	683b      	ldr	r3, [r7, #0]
 8003d24:	69db      	ldr	r3, [r3, #28]
 8003d26:	4313      	orrs	r3, r2
 8003d28:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	68fa      	ldr	r2, [r7, #12]
 8003d30:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	2200      	movs	r2, #0
 8003d36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003d3a:	2300      	movs	r3, #0
}
 8003d3c:	4618      	mov	r0, r3
 8003d3e:	3714      	adds	r7, #20
 8003d40:	46bd      	mov	sp, r7
 8003d42:	bc80      	pop	{r7}
 8003d44:	4770      	bx	lr

08003d46 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003d46:	b480      	push	{r7}
 8003d48:	b083      	sub	sp, #12
 8003d4a:	af00      	add	r7, sp, #0
 8003d4c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003d4e:	bf00      	nop
 8003d50:	370c      	adds	r7, #12
 8003d52:	46bd      	mov	sp, r7
 8003d54:	bc80      	pop	{r7}
 8003d56:	4770      	bx	lr

08003d58 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003d58:	b480      	push	{r7}
 8003d5a:	b083      	sub	sp, #12
 8003d5c:	af00      	add	r7, sp, #0
 8003d5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003d60:	bf00      	nop
 8003d62:	370c      	adds	r7, #12
 8003d64:	46bd      	mov	sp, r7
 8003d66:	bc80      	pop	{r7}
 8003d68:	4770      	bx	lr

08003d6a <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003d6a:	b580      	push	{r7, lr}
 8003d6c:	b082      	sub	sp, #8
 8003d6e:	af00      	add	r7, sp, #0
 8003d70:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d101      	bne.n	8003d7c <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003d78:	2301      	movs	r3, #1
 8003d7a:	e03f      	b.n	8003dfc <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d82:	b2db      	uxtb	r3, r3
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d106      	bne.n	8003d96 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	2200      	movs	r2, #0
 8003d8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003d90:	6878      	ldr	r0, [r7, #4]
 8003d92:	f7fc fdc9 	bl	8000928 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	2224      	movs	r2, #36	; 0x24
 8003d9a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	68da      	ldr	r2, [r3, #12]
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003dac:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003dae:	6878      	ldr	r0, [r7, #4]
 8003db0:	f000 f904 	bl	8003fbc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	691a      	ldr	r2, [r3, #16]
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003dc2:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	695a      	ldr	r2, [r3, #20]
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003dd2:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	68da      	ldr	r2, [r3, #12]
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003de2:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	2200      	movs	r2, #0
 8003de8:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	2220      	movs	r2, #32
 8003dee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	2220      	movs	r2, #32
 8003df6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003dfa:	2300      	movs	r3, #0
}
 8003dfc:	4618      	mov	r0, r3
 8003dfe:	3708      	adds	r7, #8
 8003e00:	46bd      	mov	sp, r7
 8003e02:	bd80      	pop	{r7, pc}

08003e04 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003e04:	b580      	push	{r7, lr}
 8003e06:	b08a      	sub	sp, #40	; 0x28
 8003e08:	af02      	add	r7, sp, #8
 8003e0a:	60f8      	str	r0, [r7, #12]
 8003e0c:	60b9      	str	r1, [r7, #8]
 8003e0e:	603b      	str	r3, [r7, #0]
 8003e10:	4613      	mov	r3, r2
 8003e12:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003e14:	2300      	movs	r3, #0
 8003e16:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e1e:	b2db      	uxtb	r3, r3
 8003e20:	2b20      	cmp	r3, #32
 8003e22:	d17c      	bne.n	8003f1e <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003e24:	68bb      	ldr	r3, [r7, #8]
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d002      	beq.n	8003e30 <HAL_UART_Transmit+0x2c>
 8003e2a:	88fb      	ldrh	r3, [r7, #6]
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d101      	bne.n	8003e34 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003e30:	2301      	movs	r3, #1
 8003e32:	e075      	b.n	8003f20 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003e3a:	2b01      	cmp	r3, #1
 8003e3c:	d101      	bne.n	8003e42 <HAL_UART_Transmit+0x3e>
 8003e3e:	2302      	movs	r3, #2
 8003e40:	e06e      	b.n	8003f20 <HAL_UART_Transmit+0x11c>
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	2201      	movs	r2, #1
 8003e46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	2200      	movs	r2, #0
 8003e4e:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	2221      	movs	r2, #33	; 0x21
 8003e54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003e58:	f7fd f820 	bl	8000e9c <HAL_GetTick>
 8003e5c:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	88fa      	ldrh	r2, [r7, #6]
 8003e62:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	88fa      	ldrh	r2, [r7, #6]
 8003e68:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	689b      	ldr	r3, [r3, #8]
 8003e6e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003e72:	d108      	bne.n	8003e86 <HAL_UART_Transmit+0x82>
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	691b      	ldr	r3, [r3, #16]
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d104      	bne.n	8003e86 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8003e7c:	2300      	movs	r3, #0
 8003e7e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003e80:	68bb      	ldr	r3, [r7, #8]
 8003e82:	61bb      	str	r3, [r7, #24]
 8003e84:	e003      	b.n	8003e8e <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003e86:	68bb      	ldr	r3, [r7, #8]
 8003e88:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003e8a:	2300      	movs	r3, #0
 8003e8c:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	2200      	movs	r2, #0
 8003e92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8003e96:	e02a      	b.n	8003eee <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003e98:	683b      	ldr	r3, [r7, #0]
 8003e9a:	9300      	str	r3, [sp, #0]
 8003e9c:	697b      	ldr	r3, [r7, #20]
 8003e9e:	2200      	movs	r2, #0
 8003ea0:	2180      	movs	r1, #128	; 0x80
 8003ea2:	68f8      	ldr	r0, [r7, #12]
 8003ea4:	f000 f840 	bl	8003f28 <UART_WaitOnFlagUntilTimeout>
 8003ea8:	4603      	mov	r3, r0
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d001      	beq.n	8003eb2 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003eae:	2303      	movs	r3, #3
 8003eb0:	e036      	b.n	8003f20 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003eb2:	69fb      	ldr	r3, [r7, #28]
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d10b      	bne.n	8003ed0 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003eb8:	69bb      	ldr	r3, [r7, #24]
 8003eba:	881b      	ldrh	r3, [r3, #0]
 8003ebc:	461a      	mov	r2, r3
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003ec6:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003ec8:	69bb      	ldr	r3, [r7, #24]
 8003eca:	3302      	adds	r3, #2
 8003ecc:	61bb      	str	r3, [r7, #24]
 8003ece:	e007      	b.n	8003ee0 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003ed0:	69fb      	ldr	r3, [r7, #28]
 8003ed2:	781a      	ldrb	r2, [r3, #0]
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003eda:	69fb      	ldr	r3, [r7, #28]
 8003edc:	3301      	adds	r3, #1
 8003ede:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003ee4:	b29b      	uxth	r3, r3
 8003ee6:	3b01      	subs	r3, #1
 8003ee8:	b29a      	uxth	r2, r3
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003ef2:	b29b      	uxth	r3, r3
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d1cf      	bne.n	8003e98 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003ef8:	683b      	ldr	r3, [r7, #0]
 8003efa:	9300      	str	r3, [sp, #0]
 8003efc:	697b      	ldr	r3, [r7, #20]
 8003efe:	2200      	movs	r2, #0
 8003f00:	2140      	movs	r1, #64	; 0x40
 8003f02:	68f8      	ldr	r0, [r7, #12]
 8003f04:	f000 f810 	bl	8003f28 <UART_WaitOnFlagUntilTimeout>
 8003f08:	4603      	mov	r3, r0
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d001      	beq.n	8003f12 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003f0e:	2303      	movs	r3, #3
 8003f10:	e006      	b.n	8003f20 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	2220      	movs	r2, #32
 8003f16:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003f1a:	2300      	movs	r3, #0
 8003f1c:	e000      	b.n	8003f20 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003f1e:	2302      	movs	r3, #2
  }
}
 8003f20:	4618      	mov	r0, r3
 8003f22:	3720      	adds	r7, #32
 8003f24:	46bd      	mov	sp, r7
 8003f26:	bd80      	pop	{r7, pc}

08003f28 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8003f28:	b580      	push	{r7, lr}
 8003f2a:	b084      	sub	sp, #16
 8003f2c:	af00      	add	r7, sp, #0
 8003f2e:	60f8      	str	r0, [r7, #12]
 8003f30:	60b9      	str	r1, [r7, #8]
 8003f32:	603b      	str	r3, [r7, #0]
 8003f34:	4613      	mov	r3, r2
 8003f36:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003f38:	e02c      	b.n	8003f94 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003f3a:	69bb      	ldr	r3, [r7, #24]
 8003f3c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003f40:	d028      	beq.n	8003f94 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003f42:	69bb      	ldr	r3, [r7, #24]
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d007      	beq.n	8003f58 <UART_WaitOnFlagUntilTimeout+0x30>
 8003f48:	f7fc ffa8 	bl	8000e9c <HAL_GetTick>
 8003f4c:	4602      	mov	r2, r0
 8003f4e:	683b      	ldr	r3, [r7, #0]
 8003f50:	1ad3      	subs	r3, r2, r3
 8003f52:	69ba      	ldr	r2, [r7, #24]
 8003f54:	429a      	cmp	r2, r3
 8003f56:	d21d      	bcs.n	8003f94 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	68da      	ldr	r2, [r3, #12]
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003f66:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	695a      	ldr	r2, [r3, #20]
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	f022 0201 	bic.w	r2, r2, #1
 8003f76:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	2220      	movs	r2, #32
 8003f7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	2220      	movs	r2, #32
 8003f84:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	2200      	movs	r2, #0
 8003f8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8003f90:	2303      	movs	r3, #3
 8003f92:	e00f      	b.n	8003fb4 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	681a      	ldr	r2, [r3, #0]
 8003f9a:	68bb      	ldr	r3, [r7, #8]
 8003f9c:	4013      	ands	r3, r2
 8003f9e:	68ba      	ldr	r2, [r7, #8]
 8003fa0:	429a      	cmp	r2, r3
 8003fa2:	bf0c      	ite	eq
 8003fa4:	2301      	moveq	r3, #1
 8003fa6:	2300      	movne	r3, #0
 8003fa8:	b2db      	uxtb	r3, r3
 8003faa:	461a      	mov	r2, r3
 8003fac:	79fb      	ldrb	r3, [r7, #7]
 8003fae:	429a      	cmp	r2, r3
 8003fb0:	d0c3      	beq.n	8003f3a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003fb2:	2300      	movs	r3, #0
}
 8003fb4:	4618      	mov	r0, r3
 8003fb6:	3710      	adds	r7, #16
 8003fb8:	46bd      	mov	sp, r7
 8003fba:	bd80      	pop	{r7, pc}

08003fbc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003fbc:	b580      	push	{r7, lr}
 8003fbe:	b084      	sub	sp, #16
 8003fc0:	af00      	add	r7, sp, #0
 8003fc2:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	691b      	ldr	r3, [r3, #16]
 8003fca:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	68da      	ldr	r2, [r3, #12]
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	430a      	orrs	r2, r1
 8003fd8:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	689a      	ldr	r2, [r3, #8]
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	691b      	ldr	r3, [r3, #16]
 8003fe2:	431a      	orrs	r2, r3
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	695b      	ldr	r3, [r3, #20]
 8003fe8:	4313      	orrs	r3, r2
 8003fea:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	68db      	ldr	r3, [r3, #12]
 8003ff2:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8003ff6:	f023 030c 	bic.w	r3, r3, #12
 8003ffa:	687a      	ldr	r2, [r7, #4]
 8003ffc:	6812      	ldr	r2, [r2, #0]
 8003ffe:	68b9      	ldr	r1, [r7, #8]
 8004000:	430b      	orrs	r3, r1
 8004002:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	695b      	ldr	r3, [r3, #20]
 800400a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	699a      	ldr	r2, [r3, #24]
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	430a      	orrs	r2, r1
 8004018:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	4a2c      	ldr	r2, [pc, #176]	; (80040d0 <UART_SetConfig+0x114>)
 8004020:	4293      	cmp	r3, r2
 8004022:	d103      	bne.n	800402c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8004024:	f7fe f85e 	bl	80020e4 <HAL_RCC_GetPCLK2Freq>
 8004028:	60f8      	str	r0, [r7, #12]
 800402a:	e002      	b.n	8004032 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800402c:	f7fe f846 	bl	80020bc <HAL_RCC_GetPCLK1Freq>
 8004030:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004032:	68fa      	ldr	r2, [r7, #12]
 8004034:	4613      	mov	r3, r2
 8004036:	009b      	lsls	r3, r3, #2
 8004038:	4413      	add	r3, r2
 800403a:	009a      	lsls	r2, r3, #2
 800403c:	441a      	add	r2, r3
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	685b      	ldr	r3, [r3, #4]
 8004042:	009b      	lsls	r3, r3, #2
 8004044:	fbb2 f3f3 	udiv	r3, r2, r3
 8004048:	4a22      	ldr	r2, [pc, #136]	; (80040d4 <UART_SetConfig+0x118>)
 800404a:	fba2 2303 	umull	r2, r3, r2, r3
 800404e:	095b      	lsrs	r3, r3, #5
 8004050:	0119      	lsls	r1, r3, #4
 8004052:	68fa      	ldr	r2, [r7, #12]
 8004054:	4613      	mov	r3, r2
 8004056:	009b      	lsls	r3, r3, #2
 8004058:	4413      	add	r3, r2
 800405a:	009a      	lsls	r2, r3, #2
 800405c:	441a      	add	r2, r3
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	685b      	ldr	r3, [r3, #4]
 8004062:	009b      	lsls	r3, r3, #2
 8004064:	fbb2 f2f3 	udiv	r2, r2, r3
 8004068:	4b1a      	ldr	r3, [pc, #104]	; (80040d4 <UART_SetConfig+0x118>)
 800406a:	fba3 0302 	umull	r0, r3, r3, r2
 800406e:	095b      	lsrs	r3, r3, #5
 8004070:	2064      	movs	r0, #100	; 0x64
 8004072:	fb00 f303 	mul.w	r3, r0, r3
 8004076:	1ad3      	subs	r3, r2, r3
 8004078:	011b      	lsls	r3, r3, #4
 800407a:	3332      	adds	r3, #50	; 0x32
 800407c:	4a15      	ldr	r2, [pc, #84]	; (80040d4 <UART_SetConfig+0x118>)
 800407e:	fba2 2303 	umull	r2, r3, r2, r3
 8004082:	095b      	lsrs	r3, r3, #5
 8004084:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004088:	4419      	add	r1, r3
 800408a:	68fa      	ldr	r2, [r7, #12]
 800408c:	4613      	mov	r3, r2
 800408e:	009b      	lsls	r3, r3, #2
 8004090:	4413      	add	r3, r2
 8004092:	009a      	lsls	r2, r3, #2
 8004094:	441a      	add	r2, r3
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	685b      	ldr	r3, [r3, #4]
 800409a:	009b      	lsls	r3, r3, #2
 800409c:	fbb2 f2f3 	udiv	r2, r2, r3
 80040a0:	4b0c      	ldr	r3, [pc, #48]	; (80040d4 <UART_SetConfig+0x118>)
 80040a2:	fba3 0302 	umull	r0, r3, r3, r2
 80040a6:	095b      	lsrs	r3, r3, #5
 80040a8:	2064      	movs	r0, #100	; 0x64
 80040aa:	fb00 f303 	mul.w	r3, r0, r3
 80040ae:	1ad3      	subs	r3, r2, r3
 80040b0:	011b      	lsls	r3, r3, #4
 80040b2:	3332      	adds	r3, #50	; 0x32
 80040b4:	4a07      	ldr	r2, [pc, #28]	; (80040d4 <UART_SetConfig+0x118>)
 80040b6:	fba2 2303 	umull	r2, r3, r2, r3
 80040ba:	095b      	lsrs	r3, r3, #5
 80040bc:	f003 020f 	and.w	r2, r3, #15
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	440a      	add	r2, r1
 80040c6:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80040c8:	bf00      	nop
 80040ca:	3710      	adds	r7, #16
 80040cc:	46bd      	mov	sp, r7
 80040ce:	bd80      	pop	{r7, pc}
 80040d0:	40013800 	.word	0x40013800
 80040d4:	51eb851f 	.word	0x51eb851f

080040d8 <__errno>:
 80040d8:	4b01      	ldr	r3, [pc, #4]	; (80040e0 <__errno+0x8>)
 80040da:	6818      	ldr	r0, [r3, #0]
 80040dc:	4770      	bx	lr
 80040de:	bf00      	nop
 80040e0:	2000000c 	.word	0x2000000c

080040e4 <__libc_init_array>:
 80040e4:	b570      	push	{r4, r5, r6, lr}
 80040e6:	2600      	movs	r6, #0
 80040e8:	4d0c      	ldr	r5, [pc, #48]	; (800411c <__libc_init_array+0x38>)
 80040ea:	4c0d      	ldr	r4, [pc, #52]	; (8004120 <__libc_init_array+0x3c>)
 80040ec:	1b64      	subs	r4, r4, r5
 80040ee:	10a4      	asrs	r4, r4, #2
 80040f0:	42a6      	cmp	r6, r4
 80040f2:	d109      	bne.n	8004108 <__libc_init_array+0x24>
 80040f4:	f000 fc5c 	bl	80049b0 <_init>
 80040f8:	2600      	movs	r6, #0
 80040fa:	4d0a      	ldr	r5, [pc, #40]	; (8004124 <__libc_init_array+0x40>)
 80040fc:	4c0a      	ldr	r4, [pc, #40]	; (8004128 <__libc_init_array+0x44>)
 80040fe:	1b64      	subs	r4, r4, r5
 8004100:	10a4      	asrs	r4, r4, #2
 8004102:	42a6      	cmp	r6, r4
 8004104:	d105      	bne.n	8004112 <__libc_init_array+0x2e>
 8004106:	bd70      	pop	{r4, r5, r6, pc}
 8004108:	f855 3b04 	ldr.w	r3, [r5], #4
 800410c:	4798      	blx	r3
 800410e:	3601      	adds	r6, #1
 8004110:	e7ee      	b.n	80040f0 <__libc_init_array+0xc>
 8004112:	f855 3b04 	ldr.w	r3, [r5], #4
 8004116:	4798      	blx	r3
 8004118:	3601      	adds	r6, #1
 800411a:	e7f2      	b.n	8004102 <__libc_init_array+0x1e>
 800411c:	08004a30 	.word	0x08004a30
 8004120:	08004a30 	.word	0x08004a30
 8004124:	08004a30 	.word	0x08004a30
 8004128:	08004a34 	.word	0x08004a34

0800412c <memset>:
 800412c:	4603      	mov	r3, r0
 800412e:	4402      	add	r2, r0
 8004130:	4293      	cmp	r3, r2
 8004132:	d100      	bne.n	8004136 <memset+0xa>
 8004134:	4770      	bx	lr
 8004136:	f803 1b01 	strb.w	r1, [r3], #1
 800413a:	e7f9      	b.n	8004130 <memset+0x4>

0800413c <siprintf>:
 800413c:	b40e      	push	{r1, r2, r3}
 800413e:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004142:	b500      	push	{lr}
 8004144:	b09c      	sub	sp, #112	; 0x70
 8004146:	ab1d      	add	r3, sp, #116	; 0x74
 8004148:	9002      	str	r0, [sp, #8]
 800414a:	9006      	str	r0, [sp, #24]
 800414c:	9107      	str	r1, [sp, #28]
 800414e:	9104      	str	r1, [sp, #16]
 8004150:	4808      	ldr	r0, [pc, #32]	; (8004174 <siprintf+0x38>)
 8004152:	4909      	ldr	r1, [pc, #36]	; (8004178 <siprintf+0x3c>)
 8004154:	f853 2b04 	ldr.w	r2, [r3], #4
 8004158:	9105      	str	r1, [sp, #20]
 800415a:	6800      	ldr	r0, [r0, #0]
 800415c:	a902      	add	r1, sp, #8
 800415e:	9301      	str	r3, [sp, #4]
 8004160:	f000 f868 	bl	8004234 <_svfiprintf_r>
 8004164:	2200      	movs	r2, #0
 8004166:	9b02      	ldr	r3, [sp, #8]
 8004168:	701a      	strb	r2, [r3, #0]
 800416a:	b01c      	add	sp, #112	; 0x70
 800416c:	f85d eb04 	ldr.w	lr, [sp], #4
 8004170:	b003      	add	sp, #12
 8004172:	4770      	bx	lr
 8004174:	2000000c 	.word	0x2000000c
 8004178:	ffff0208 	.word	0xffff0208

0800417c <__ssputs_r>:
 800417c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004180:	688e      	ldr	r6, [r1, #8]
 8004182:	4682      	mov	sl, r0
 8004184:	429e      	cmp	r6, r3
 8004186:	460c      	mov	r4, r1
 8004188:	4690      	mov	r8, r2
 800418a:	461f      	mov	r7, r3
 800418c:	d838      	bhi.n	8004200 <__ssputs_r+0x84>
 800418e:	898a      	ldrh	r2, [r1, #12]
 8004190:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004194:	d032      	beq.n	80041fc <__ssputs_r+0x80>
 8004196:	6825      	ldr	r5, [r4, #0]
 8004198:	6909      	ldr	r1, [r1, #16]
 800419a:	3301      	adds	r3, #1
 800419c:	eba5 0901 	sub.w	r9, r5, r1
 80041a0:	6965      	ldr	r5, [r4, #20]
 80041a2:	444b      	add	r3, r9
 80041a4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80041a8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80041ac:	106d      	asrs	r5, r5, #1
 80041ae:	429d      	cmp	r5, r3
 80041b0:	bf38      	it	cc
 80041b2:	461d      	movcc	r5, r3
 80041b4:	0553      	lsls	r3, r2, #21
 80041b6:	d531      	bpl.n	800421c <__ssputs_r+0xa0>
 80041b8:	4629      	mov	r1, r5
 80041ba:	f000 fb53 	bl	8004864 <_malloc_r>
 80041be:	4606      	mov	r6, r0
 80041c0:	b950      	cbnz	r0, 80041d8 <__ssputs_r+0x5c>
 80041c2:	230c      	movs	r3, #12
 80041c4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80041c8:	f8ca 3000 	str.w	r3, [sl]
 80041cc:	89a3      	ldrh	r3, [r4, #12]
 80041ce:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80041d2:	81a3      	strh	r3, [r4, #12]
 80041d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80041d8:	464a      	mov	r2, r9
 80041da:	6921      	ldr	r1, [r4, #16]
 80041dc:	f000 face 	bl	800477c <memcpy>
 80041e0:	89a3      	ldrh	r3, [r4, #12]
 80041e2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80041e6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80041ea:	81a3      	strh	r3, [r4, #12]
 80041ec:	6126      	str	r6, [r4, #16]
 80041ee:	444e      	add	r6, r9
 80041f0:	6026      	str	r6, [r4, #0]
 80041f2:	463e      	mov	r6, r7
 80041f4:	6165      	str	r5, [r4, #20]
 80041f6:	eba5 0509 	sub.w	r5, r5, r9
 80041fa:	60a5      	str	r5, [r4, #8]
 80041fc:	42be      	cmp	r6, r7
 80041fe:	d900      	bls.n	8004202 <__ssputs_r+0x86>
 8004200:	463e      	mov	r6, r7
 8004202:	4632      	mov	r2, r6
 8004204:	4641      	mov	r1, r8
 8004206:	6820      	ldr	r0, [r4, #0]
 8004208:	f000 fac6 	bl	8004798 <memmove>
 800420c:	68a3      	ldr	r3, [r4, #8]
 800420e:	6822      	ldr	r2, [r4, #0]
 8004210:	1b9b      	subs	r3, r3, r6
 8004212:	4432      	add	r2, r6
 8004214:	2000      	movs	r0, #0
 8004216:	60a3      	str	r3, [r4, #8]
 8004218:	6022      	str	r2, [r4, #0]
 800421a:	e7db      	b.n	80041d4 <__ssputs_r+0x58>
 800421c:	462a      	mov	r2, r5
 800421e:	f000 fb7b 	bl	8004918 <_realloc_r>
 8004222:	4606      	mov	r6, r0
 8004224:	2800      	cmp	r0, #0
 8004226:	d1e1      	bne.n	80041ec <__ssputs_r+0x70>
 8004228:	4650      	mov	r0, sl
 800422a:	6921      	ldr	r1, [r4, #16]
 800422c:	f000 face 	bl	80047cc <_free_r>
 8004230:	e7c7      	b.n	80041c2 <__ssputs_r+0x46>
	...

08004234 <_svfiprintf_r>:
 8004234:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004238:	4698      	mov	r8, r3
 800423a:	898b      	ldrh	r3, [r1, #12]
 800423c:	4607      	mov	r7, r0
 800423e:	061b      	lsls	r3, r3, #24
 8004240:	460d      	mov	r5, r1
 8004242:	4614      	mov	r4, r2
 8004244:	b09d      	sub	sp, #116	; 0x74
 8004246:	d50e      	bpl.n	8004266 <_svfiprintf_r+0x32>
 8004248:	690b      	ldr	r3, [r1, #16]
 800424a:	b963      	cbnz	r3, 8004266 <_svfiprintf_r+0x32>
 800424c:	2140      	movs	r1, #64	; 0x40
 800424e:	f000 fb09 	bl	8004864 <_malloc_r>
 8004252:	6028      	str	r0, [r5, #0]
 8004254:	6128      	str	r0, [r5, #16]
 8004256:	b920      	cbnz	r0, 8004262 <_svfiprintf_r+0x2e>
 8004258:	230c      	movs	r3, #12
 800425a:	603b      	str	r3, [r7, #0]
 800425c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004260:	e0d1      	b.n	8004406 <_svfiprintf_r+0x1d2>
 8004262:	2340      	movs	r3, #64	; 0x40
 8004264:	616b      	str	r3, [r5, #20]
 8004266:	2300      	movs	r3, #0
 8004268:	9309      	str	r3, [sp, #36]	; 0x24
 800426a:	2320      	movs	r3, #32
 800426c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004270:	2330      	movs	r3, #48	; 0x30
 8004272:	f04f 0901 	mov.w	r9, #1
 8004276:	f8cd 800c 	str.w	r8, [sp, #12]
 800427a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8004420 <_svfiprintf_r+0x1ec>
 800427e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004282:	4623      	mov	r3, r4
 8004284:	469a      	mov	sl, r3
 8004286:	f813 2b01 	ldrb.w	r2, [r3], #1
 800428a:	b10a      	cbz	r2, 8004290 <_svfiprintf_r+0x5c>
 800428c:	2a25      	cmp	r2, #37	; 0x25
 800428e:	d1f9      	bne.n	8004284 <_svfiprintf_r+0x50>
 8004290:	ebba 0b04 	subs.w	fp, sl, r4
 8004294:	d00b      	beq.n	80042ae <_svfiprintf_r+0x7a>
 8004296:	465b      	mov	r3, fp
 8004298:	4622      	mov	r2, r4
 800429a:	4629      	mov	r1, r5
 800429c:	4638      	mov	r0, r7
 800429e:	f7ff ff6d 	bl	800417c <__ssputs_r>
 80042a2:	3001      	adds	r0, #1
 80042a4:	f000 80aa 	beq.w	80043fc <_svfiprintf_r+0x1c8>
 80042a8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80042aa:	445a      	add	r2, fp
 80042ac:	9209      	str	r2, [sp, #36]	; 0x24
 80042ae:	f89a 3000 	ldrb.w	r3, [sl]
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	f000 80a2 	beq.w	80043fc <_svfiprintf_r+0x1c8>
 80042b8:	2300      	movs	r3, #0
 80042ba:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80042be:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80042c2:	f10a 0a01 	add.w	sl, sl, #1
 80042c6:	9304      	str	r3, [sp, #16]
 80042c8:	9307      	str	r3, [sp, #28]
 80042ca:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80042ce:	931a      	str	r3, [sp, #104]	; 0x68
 80042d0:	4654      	mov	r4, sl
 80042d2:	2205      	movs	r2, #5
 80042d4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80042d8:	4851      	ldr	r0, [pc, #324]	; (8004420 <_svfiprintf_r+0x1ec>)
 80042da:	f000 fa41 	bl	8004760 <memchr>
 80042de:	9a04      	ldr	r2, [sp, #16]
 80042e0:	b9d8      	cbnz	r0, 800431a <_svfiprintf_r+0xe6>
 80042e2:	06d0      	lsls	r0, r2, #27
 80042e4:	bf44      	itt	mi
 80042e6:	2320      	movmi	r3, #32
 80042e8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80042ec:	0711      	lsls	r1, r2, #28
 80042ee:	bf44      	itt	mi
 80042f0:	232b      	movmi	r3, #43	; 0x2b
 80042f2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80042f6:	f89a 3000 	ldrb.w	r3, [sl]
 80042fa:	2b2a      	cmp	r3, #42	; 0x2a
 80042fc:	d015      	beq.n	800432a <_svfiprintf_r+0xf6>
 80042fe:	4654      	mov	r4, sl
 8004300:	2000      	movs	r0, #0
 8004302:	f04f 0c0a 	mov.w	ip, #10
 8004306:	9a07      	ldr	r2, [sp, #28]
 8004308:	4621      	mov	r1, r4
 800430a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800430e:	3b30      	subs	r3, #48	; 0x30
 8004310:	2b09      	cmp	r3, #9
 8004312:	d94e      	bls.n	80043b2 <_svfiprintf_r+0x17e>
 8004314:	b1b0      	cbz	r0, 8004344 <_svfiprintf_r+0x110>
 8004316:	9207      	str	r2, [sp, #28]
 8004318:	e014      	b.n	8004344 <_svfiprintf_r+0x110>
 800431a:	eba0 0308 	sub.w	r3, r0, r8
 800431e:	fa09 f303 	lsl.w	r3, r9, r3
 8004322:	4313      	orrs	r3, r2
 8004324:	46a2      	mov	sl, r4
 8004326:	9304      	str	r3, [sp, #16]
 8004328:	e7d2      	b.n	80042d0 <_svfiprintf_r+0x9c>
 800432a:	9b03      	ldr	r3, [sp, #12]
 800432c:	1d19      	adds	r1, r3, #4
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	9103      	str	r1, [sp, #12]
 8004332:	2b00      	cmp	r3, #0
 8004334:	bfbb      	ittet	lt
 8004336:	425b      	neglt	r3, r3
 8004338:	f042 0202 	orrlt.w	r2, r2, #2
 800433c:	9307      	strge	r3, [sp, #28]
 800433e:	9307      	strlt	r3, [sp, #28]
 8004340:	bfb8      	it	lt
 8004342:	9204      	strlt	r2, [sp, #16]
 8004344:	7823      	ldrb	r3, [r4, #0]
 8004346:	2b2e      	cmp	r3, #46	; 0x2e
 8004348:	d10c      	bne.n	8004364 <_svfiprintf_r+0x130>
 800434a:	7863      	ldrb	r3, [r4, #1]
 800434c:	2b2a      	cmp	r3, #42	; 0x2a
 800434e:	d135      	bne.n	80043bc <_svfiprintf_r+0x188>
 8004350:	9b03      	ldr	r3, [sp, #12]
 8004352:	3402      	adds	r4, #2
 8004354:	1d1a      	adds	r2, r3, #4
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	9203      	str	r2, [sp, #12]
 800435a:	2b00      	cmp	r3, #0
 800435c:	bfb8      	it	lt
 800435e:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8004362:	9305      	str	r3, [sp, #20]
 8004364:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8004430 <_svfiprintf_r+0x1fc>
 8004368:	2203      	movs	r2, #3
 800436a:	4650      	mov	r0, sl
 800436c:	7821      	ldrb	r1, [r4, #0]
 800436e:	f000 f9f7 	bl	8004760 <memchr>
 8004372:	b140      	cbz	r0, 8004386 <_svfiprintf_r+0x152>
 8004374:	2340      	movs	r3, #64	; 0x40
 8004376:	eba0 000a 	sub.w	r0, r0, sl
 800437a:	fa03 f000 	lsl.w	r0, r3, r0
 800437e:	9b04      	ldr	r3, [sp, #16]
 8004380:	3401      	adds	r4, #1
 8004382:	4303      	orrs	r3, r0
 8004384:	9304      	str	r3, [sp, #16]
 8004386:	f814 1b01 	ldrb.w	r1, [r4], #1
 800438a:	2206      	movs	r2, #6
 800438c:	4825      	ldr	r0, [pc, #148]	; (8004424 <_svfiprintf_r+0x1f0>)
 800438e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004392:	f000 f9e5 	bl	8004760 <memchr>
 8004396:	2800      	cmp	r0, #0
 8004398:	d038      	beq.n	800440c <_svfiprintf_r+0x1d8>
 800439a:	4b23      	ldr	r3, [pc, #140]	; (8004428 <_svfiprintf_r+0x1f4>)
 800439c:	bb1b      	cbnz	r3, 80043e6 <_svfiprintf_r+0x1b2>
 800439e:	9b03      	ldr	r3, [sp, #12]
 80043a0:	3307      	adds	r3, #7
 80043a2:	f023 0307 	bic.w	r3, r3, #7
 80043a6:	3308      	adds	r3, #8
 80043a8:	9303      	str	r3, [sp, #12]
 80043aa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80043ac:	4433      	add	r3, r6
 80043ae:	9309      	str	r3, [sp, #36]	; 0x24
 80043b0:	e767      	b.n	8004282 <_svfiprintf_r+0x4e>
 80043b2:	460c      	mov	r4, r1
 80043b4:	2001      	movs	r0, #1
 80043b6:	fb0c 3202 	mla	r2, ip, r2, r3
 80043ba:	e7a5      	b.n	8004308 <_svfiprintf_r+0xd4>
 80043bc:	2300      	movs	r3, #0
 80043be:	f04f 0c0a 	mov.w	ip, #10
 80043c2:	4619      	mov	r1, r3
 80043c4:	3401      	adds	r4, #1
 80043c6:	9305      	str	r3, [sp, #20]
 80043c8:	4620      	mov	r0, r4
 80043ca:	f810 2b01 	ldrb.w	r2, [r0], #1
 80043ce:	3a30      	subs	r2, #48	; 0x30
 80043d0:	2a09      	cmp	r2, #9
 80043d2:	d903      	bls.n	80043dc <_svfiprintf_r+0x1a8>
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d0c5      	beq.n	8004364 <_svfiprintf_r+0x130>
 80043d8:	9105      	str	r1, [sp, #20]
 80043da:	e7c3      	b.n	8004364 <_svfiprintf_r+0x130>
 80043dc:	4604      	mov	r4, r0
 80043de:	2301      	movs	r3, #1
 80043e0:	fb0c 2101 	mla	r1, ip, r1, r2
 80043e4:	e7f0      	b.n	80043c8 <_svfiprintf_r+0x194>
 80043e6:	ab03      	add	r3, sp, #12
 80043e8:	9300      	str	r3, [sp, #0]
 80043ea:	462a      	mov	r2, r5
 80043ec:	4638      	mov	r0, r7
 80043ee:	4b0f      	ldr	r3, [pc, #60]	; (800442c <_svfiprintf_r+0x1f8>)
 80043f0:	a904      	add	r1, sp, #16
 80043f2:	f3af 8000 	nop.w
 80043f6:	1c42      	adds	r2, r0, #1
 80043f8:	4606      	mov	r6, r0
 80043fa:	d1d6      	bne.n	80043aa <_svfiprintf_r+0x176>
 80043fc:	89ab      	ldrh	r3, [r5, #12]
 80043fe:	065b      	lsls	r3, r3, #25
 8004400:	f53f af2c 	bmi.w	800425c <_svfiprintf_r+0x28>
 8004404:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004406:	b01d      	add	sp, #116	; 0x74
 8004408:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800440c:	ab03      	add	r3, sp, #12
 800440e:	9300      	str	r3, [sp, #0]
 8004410:	462a      	mov	r2, r5
 8004412:	4638      	mov	r0, r7
 8004414:	4b05      	ldr	r3, [pc, #20]	; (800442c <_svfiprintf_r+0x1f8>)
 8004416:	a904      	add	r1, sp, #16
 8004418:	f000 f87c 	bl	8004514 <_printf_i>
 800441c:	e7eb      	b.n	80043f6 <_svfiprintf_r+0x1c2>
 800441e:	bf00      	nop
 8004420:	080049fc 	.word	0x080049fc
 8004424:	08004a06 	.word	0x08004a06
 8004428:	00000000 	.word	0x00000000
 800442c:	0800417d 	.word	0x0800417d
 8004430:	08004a02 	.word	0x08004a02

08004434 <_printf_common>:
 8004434:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004438:	4616      	mov	r6, r2
 800443a:	4699      	mov	r9, r3
 800443c:	688a      	ldr	r2, [r1, #8]
 800443e:	690b      	ldr	r3, [r1, #16]
 8004440:	4607      	mov	r7, r0
 8004442:	4293      	cmp	r3, r2
 8004444:	bfb8      	it	lt
 8004446:	4613      	movlt	r3, r2
 8004448:	6033      	str	r3, [r6, #0]
 800444a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800444e:	460c      	mov	r4, r1
 8004450:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004454:	b10a      	cbz	r2, 800445a <_printf_common+0x26>
 8004456:	3301      	adds	r3, #1
 8004458:	6033      	str	r3, [r6, #0]
 800445a:	6823      	ldr	r3, [r4, #0]
 800445c:	0699      	lsls	r1, r3, #26
 800445e:	bf42      	ittt	mi
 8004460:	6833      	ldrmi	r3, [r6, #0]
 8004462:	3302      	addmi	r3, #2
 8004464:	6033      	strmi	r3, [r6, #0]
 8004466:	6825      	ldr	r5, [r4, #0]
 8004468:	f015 0506 	ands.w	r5, r5, #6
 800446c:	d106      	bne.n	800447c <_printf_common+0x48>
 800446e:	f104 0a19 	add.w	sl, r4, #25
 8004472:	68e3      	ldr	r3, [r4, #12]
 8004474:	6832      	ldr	r2, [r6, #0]
 8004476:	1a9b      	subs	r3, r3, r2
 8004478:	42ab      	cmp	r3, r5
 800447a:	dc28      	bgt.n	80044ce <_printf_common+0x9a>
 800447c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004480:	1e13      	subs	r3, r2, #0
 8004482:	6822      	ldr	r2, [r4, #0]
 8004484:	bf18      	it	ne
 8004486:	2301      	movne	r3, #1
 8004488:	0692      	lsls	r2, r2, #26
 800448a:	d42d      	bmi.n	80044e8 <_printf_common+0xb4>
 800448c:	4649      	mov	r1, r9
 800448e:	4638      	mov	r0, r7
 8004490:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004494:	47c0      	blx	r8
 8004496:	3001      	adds	r0, #1
 8004498:	d020      	beq.n	80044dc <_printf_common+0xa8>
 800449a:	6823      	ldr	r3, [r4, #0]
 800449c:	68e5      	ldr	r5, [r4, #12]
 800449e:	f003 0306 	and.w	r3, r3, #6
 80044a2:	2b04      	cmp	r3, #4
 80044a4:	bf18      	it	ne
 80044a6:	2500      	movne	r5, #0
 80044a8:	6832      	ldr	r2, [r6, #0]
 80044aa:	f04f 0600 	mov.w	r6, #0
 80044ae:	68a3      	ldr	r3, [r4, #8]
 80044b0:	bf08      	it	eq
 80044b2:	1aad      	subeq	r5, r5, r2
 80044b4:	6922      	ldr	r2, [r4, #16]
 80044b6:	bf08      	it	eq
 80044b8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80044bc:	4293      	cmp	r3, r2
 80044be:	bfc4      	itt	gt
 80044c0:	1a9b      	subgt	r3, r3, r2
 80044c2:	18ed      	addgt	r5, r5, r3
 80044c4:	341a      	adds	r4, #26
 80044c6:	42b5      	cmp	r5, r6
 80044c8:	d11a      	bne.n	8004500 <_printf_common+0xcc>
 80044ca:	2000      	movs	r0, #0
 80044cc:	e008      	b.n	80044e0 <_printf_common+0xac>
 80044ce:	2301      	movs	r3, #1
 80044d0:	4652      	mov	r2, sl
 80044d2:	4649      	mov	r1, r9
 80044d4:	4638      	mov	r0, r7
 80044d6:	47c0      	blx	r8
 80044d8:	3001      	adds	r0, #1
 80044da:	d103      	bne.n	80044e4 <_printf_common+0xb0>
 80044dc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80044e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80044e4:	3501      	adds	r5, #1
 80044e6:	e7c4      	b.n	8004472 <_printf_common+0x3e>
 80044e8:	2030      	movs	r0, #48	; 0x30
 80044ea:	18e1      	adds	r1, r4, r3
 80044ec:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80044f0:	1c5a      	adds	r2, r3, #1
 80044f2:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80044f6:	4422      	add	r2, r4
 80044f8:	3302      	adds	r3, #2
 80044fa:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80044fe:	e7c5      	b.n	800448c <_printf_common+0x58>
 8004500:	2301      	movs	r3, #1
 8004502:	4622      	mov	r2, r4
 8004504:	4649      	mov	r1, r9
 8004506:	4638      	mov	r0, r7
 8004508:	47c0      	blx	r8
 800450a:	3001      	adds	r0, #1
 800450c:	d0e6      	beq.n	80044dc <_printf_common+0xa8>
 800450e:	3601      	adds	r6, #1
 8004510:	e7d9      	b.n	80044c6 <_printf_common+0x92>
	...

08004514 <_printf_i>:
 8004514:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004518:	460c      	mov	r4, r1
 800451a:	7e27      	ldrb	r7, [r4, #24]
 800451c:	4691      	mov	r9, r2
 800451e:	2f78      	cmp	r7, #120	; 0x78
 8004520:	4680      	mov	r8, r0
 8004522:	469a      	mov	sl, r3
 8004524:	990c      	ldr	r1, [sp, #48]	; 0x30
 8004526:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800452a:	d807      	bhi.n	800453c <_printf_i+0x28>
 800452c:	2f62      	cmp	r7, #98	; 0x62
 800452e:	d80a      	bhi.n	8004546 <_printf_i+0x32>
 8004530:	2f00      	cmp	r7, #0
 8004532:	f000 80d9 	beq.w	80046e8 <_printf_i+0x1d4>
 8004536:	2f58      	cmp	r7, #88	; 0x58
 8004538:	f000 80a4 	beq.w	8004684 <_printf_i+0x170>
 800453c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004540:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004544:	e03a      	b.n	80045bc <_printf_i+0xa8>
 8004546:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800454a:	2b15      	cmp	r3, #21
 800454c:	d8f6      	bhi.n	800453c <_printf_i+0x28>
 800454e:	a001      	add	r0, pc, #4	; (adr r0, 8004554 <_printf_i+0x40>)
 8004550:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8004554:	080045ad 	.word	0x080045ad
 8004558:	080045c1 	.word	0x080045c1
 800455c:	0800453d 	.word	0x0800453d
 8004560:	0800453d 	.word	0x0800453d
 8004564:	0800453d 	.word	0x0800453d
 8004568:	0800453d 	.word	0x0800453d
 800456c:	080045c1 	.word	0x080045c1
 8004570:	0800453d 	.word	0x0800453d
 8004574:	0800453d 	.word	0x0800453d
 8004578:	0800453d 	.word	0x0800453d
 800457c:	0800453d 	.word	0x0800453d
 8004580:	080046cf 	.word	0x080046cf
 8004584:	080045f1 	.word	0x080045f1
 8004588:	080046b1 	.word	0x080046b1
 800458c:	0800453d 	.word	0x0800453d
 8004590:	0800453d 	.word	0x0800453d
 8004594:	080046f1 	.word	0x080046f1
 8004598:	0800453d 	.word	0x0800453d
 800459c:	080045f1 	.word	0x080045f1
 80045a0:	0800453d 	.word	0x0800453d
 80045a4:	0800453d 	.word	0x0800453d
 80045a8:	080046b9 	.word	0x080046b9
 80045ac:	680b      	ldr	r3, [r1, #0]
 80045ae:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80045b2:	1d1a      	adds	r2, r3, #4
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	600a      	str	r2, [r1, #0]
 80045b8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80045bc:	2301      	movs	r3, #1
 80045be:	e0a4      	b.n	800470a <_printf_i+0x1f6>
 80045c0:	6825      	ldr	r5, [r4, #0]
 80045c2:	6808      	ldr	r0, [r1, #0]
 80045c4:	062e      	lsls	r6, r5, #24
 80045c6:	f100 0304 	add.w	r3, r0, #4
 80045ca:	d50a      	bpl.n	80045e2 <_printf_i+0xce>
 80045cc:	6805      	ldr	r5, [r0, #0]
 80045ce:	600b      	str	r3, [r1, #0]
 80045d0:	2d00      	cmp	r5, #0
 80045d2:	da03      	bge.n	80045dc <_printf_i+0xc8>
 80045d4:	232d      	movs	r3, #45	; 0x2d
 80045d6:	426d      	negs	r5, r5
 80045d8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80045dc:	230a      	movs	r3, #10
 80045de:	485e      	ldr	r0, [pc, #376]	; (8004758 <_printf_i+0x244>)
 80045e0:	e019      	b.n	8004616 <_printf_i+0x102>
 80045e2:	f015 0f40 	tst.w	r5, #64	; 0x40
 80045e6:	6805      	ldr	r5, [r0, #0]
 80045e8:	600b      	str	r3, [r1, #0]
 80045ea:	bf18      	it	ne
 80045ec:	b22d      	sxthne	r5, r5
 80045ee:	e7ef      	b.n	80045d0 <_printf_i+0xbc>
 80045f0:	680b      	ldr	r3, [r1, #0]
 80045f2:	6825      	ldr	r5, [r4, #0]
 80045f4:	1d18      	adds	r0, r3, #4
 80045f6:	6008      	str	r0, [r1, #0]
 80045f8:	0628      	lsls	r0, r5, #24
 80045fa:	d501      	bpl.n	8004600 <_printf_i+0xec>
 80045fc:	681d      	ldr	r5, [r3, #0]
 80045fe:	e002      	b.n	8004606 <_printf_i+0xf2>
 8004600:	0669      	lsls	r1, r5, #25
 8004602:	d5fb      	bpl.n	80045fc <_printf_i+0xe8>
 8004604:	881d      	ldrh	r5, [r3, #0]
 8004606:	2f6f      	cmp	r7, #111	; 0x6f
 8004608:	bf0c      	ite	eq
 800460a:	2308      	moveq	r3, #8
 800460c:	230a      	movne	r3, #10
 800460e:	4852      	ldr	r0, [pc, #328]	; (8004758 <_printf_i+0x244>)
 8004610:	2100      	movs	r1, #0
 8004612:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004616:	6866      	ldr	r6, [r4, #4]
 8004618:	2e00      	cmp	r6, #0
 800461a:	bfa8      	it	ge
 800461c:	6821      	ldrge	r1, [r4, #0]
 800461e:	60a6      	str	r6, [r4, #8]
 8004620:	bfa4      	itt	ge
 8004622:	f021 0104 	bicge.w	r1, r1, #4
 8004626:	6021      	strge	r1, [r4, #0]
 8004628:	b90d      	cbnz	r5, 800462e <_printf_i+0x11a>
 800462a:	2e00      	cmp	r6, #0
 800462c:	d04d      	beq.n	80046ca <_printf_i+0x1b6>
 800462e:	4616      	mov	r6, r2
 8004630:	fbb5 f1f3 	udiv	r1, r5, r3
 8004634:	fb03 5711 	mls	r7, r3, r1, r5
 8004638:	5dc7      	ldrb	r7, [r0, r7]
 800463a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800463e:	462f      	mov	r7, r5
 8004640:	42bb      	cmp	r3, r7
 8004642:	460d      	mov	r5, r1
 8004644:	d9f4      	bls.n	8004630 <_printf_i+0x11c>
 8004646:	2b08      	cmp	r3, #8
 8004648:	d10b      	bne.n	8004662 <_printf_i+0x14e>
 800464a:	6823      	ldr	r3, [r4, #0]
 800464c:	07df      	lsls	r7, r3, #31
 800464e:	d508      	bpl.n	8004662 <_printf_i+0x14e>
 8004650:	6923      	ldr	r3, [r4, #16]
 8004652:	6861      	ldr	r1, [r4, #4]
 8004654:	4299      	cmp	r1, r3
 8004656:	bfde      	ittt	le
 8004658:	2330      	movle	r3, #48	; 0x30
 800465a:	f806 3c01 	strble.w	r3, [r6, #-1]
 800465e:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 8004662:	1b92      	subs	r2, r2, r6
 8004664:	6122      	str	r2, [r4, #16]
 8004666:	464b      	mov	r3, r9
 8004668:	4621      	mov	r1, r4
 800466a:	4640      	mov	r0, r8
 800466c:	f8cd a000 	str.w	sl, [sp]
 8004670:	aa03      	add	r2, sp, #12
 8004672:	f7ff fedf 	bl	8004434 <_printf_common>
 8004676:	3001      	adds	r0, #1
 8004678:	d14c      	bne.n	8004714 <_printf_i+0x200>
 800467a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800467e:	b004      	add	sp, #16
 8004680:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004684:	4834      	ldr	r0, [pc, #208]	; (8004758 <_printf_i+0x244>)
 8004686:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800468a:	680e      	ldr	r6, [r1, #0]
 800468c:	6823      	ldr	r3, [r4, #0]
 800468e:	f856 5b04 	ldr.w	r5, [r6], #4
 8004692:	061f      	lsls	r7, r3, #24
 8004694:	600e      	str	r6, [r1, #0]
 8004696:	d514      	bpl.n	80046c2 <_printf_i+0x1ae>
 8004698:	07d9      	lsls	r1, r3, #31
 800469a:	bf44      	itt	mi
 800469c:	f043 0320 	orrmi.w	r3, r3, #32
 80046a0:	6023      	strmi	r3, [r4, #0]
 80046a2:	b91d      	cbnz	r5, 80046ac <_printf_i+0x198>
 80046a4:	6823      	ldr	r3, [r4, #0]
 80046a6:	f023 0320 	bic.w	r3, r3, #32
 80046aa:	6023      	str	r3, [r4, #0]
 80046ac:	2310      	movs	r3, #16
 80046ae:	e7af      	b.n	8004610 <_printf_i+0xfc>
 80046b0:	6823      	ldr	r3, [r4, #0]
 80046b2:	f043 0320 	orr.w	r3, r3, #32
 80046b6:	6023      	str	r3, [r4, #0]
 80046b8:	2378      	movs	r3, #120	; 0x78
 80046ba:	4828      	ldr	r0, [pc, #160]	; (800475c <_printf_i+0x248>)
 80046bc:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80046c0:	e7e3      	b.n	800468a <_printf_i+0x176>
 80046c2:	065e      	lsls	r6, r3, #25
 80046c4:	bf48      	it	mi
 80046c6:	b2ad      	uxthmi	r5, r5
 80046c8:	e7e6      	b.n	8004698 <_printf_i+0x184>
 80046ca:	4616      	mov	r6, r2
 80046cc:	e7bb      	b.n	8004646 <_printf_i+0x132>
 80046ce:	680b      	ldr	r3, [r1, #0]
 80046d0:	6826      	ldr	r6, [r4, #0]
 80046d2:	1d1d      	adds	r5, r3, #4
 80046d4:	6960      	ldr	r0, [r4, #20]
 80046d6:	600d      	str	r5, [r1, #0]
 80046d8:	0635      	lsls	r5, r6, #24
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	d501      	bpl.n	80046e2 <_printf_i+0x1ce>
 80046de:	6018      	str	r0, [r3, #0]
 80046e0:	e002      	b.n	80046e8 <_printf_i+0x1d4>
 80046e2:	0671      	lsls	r1, r6, #25
 80046e4:	d5fb      	bpl.n	80046de <_printf_i+0x1ca>
 80046e6:	8018      	strh	r0, [r3, #0]
 80046e8:	2300      	movs	r3, #0
 80046ea:	4616      	mov	r6, r2
 80046ec:	6123      	str	r3, [r4, #16]
 80046ee:	e7ba      	b.n	8004666 <_printf_i+0x152>
 80046f0:	680b      	ldr	r3, [r1, #0]
 80046f2:	1d1a      	adds	r2, r3, #4
 80046f4:	600a      	str	r2, [r1, #0]
 80046f6:	681e      	ldr	r6, [r3, #0]
 80046f8:	2100      	movs	r1, #0
 80046fa:	4630      	mov	r0, r6
 80046fc:	6862      	ldr	r2, [r4, #4]
 80046fe:	f000 f82f 	bl	8004760 <memchr>
 8004702:	b108      	cbz	r0, 8004708 <_printf_i+0x1f4>
 8004704:	1b80      	subs	r0, r0, r6
 8004706:	6060      	str	r0, [r4, #4]
 8004708:	6863      	ldr	r3, [r4, #4]
 800470a:	6123      	str	r3, [r4, #16]
 800470c:	2300      	movs	r3, #0
 800470e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004712:	e7a8      	b.n	8004666 <_printf_i+0x152>
 8004714:	4632      	mov	r2, r6
 8004716:	4649      	mov	r1, r9
 8004718:	4640      	mov	r0, r8
 800471a:	6923      	ldr	r3, [r4, #16]
 800471c:	47d0      	blx	sl
 800471e:	3001      	adds	r0, #1
 8004720:	d0ab      	beq.n	800467a <_printf_i+0x166>
 8004722:	6823      	ldr	r3, [r4, #0]
 8004724:	079b      	lsls	r3, r3, #30
 8004726:	d413      	bmi.n	8004750 <_printf_i+0x23c>
 8004728:	68e0      	ldr	r0, [r4, #12]
 800472a:	9b03      	ldr	r3, [sp, #12]
 800472c:	4298      	cmp	r0, r3
 800472e:	bfb8      	it	lt
 8004730:	4618      	movlt	r0, r3
 8004732:	e7a4      	b.n	800467e <_printf_i+0x16a>
 8004734:	2301      	movs	r3, #1
 8004736:	4632      	mov	r2, r6
 8004738:	4649      	mov	r1, r9
 800473a:	4640      	mov	r0, r8
 800473c:	47d0      	blx	sl
 800473e:	3001      	adds	r0, #1
 8004740:	d09b      	beq.n	800467a <_printf_i+0x166>
 8004742:	3501      	adds	r5, #1
 8004744:	68e3      	ldr	r3, [r4, #12]
 8004746:	9903      	ldr	r1, [sp, #12]
 8004748:	1a5b      	subs	r3, r3, r1
 800474a:	42ab      	cmp	r3, r5
 800474c:	dcf2      	bgt.n	8004734 <_printf_i+0x220>
 800474e:	e7eb      	b.n	8004728 <_printf_i+0x214>
 8004750:	2500      	movs	r5, #0
 8004752:	f104 0619 	add.w	r6, r4, #25
 8004756:	e7f5      	b.n	8004744 <_printf_i+0x230>
 8004758:	08004a0d 	.word	0x08004a0d
 800475c:	08004a1e 	.word	0x08004a1e

08004760 <memchr>:
 8004760:	4603      	mov	r3, r0
 8004762:	b510      	push	{r4, lr}
 8004764:	b2c9      	uxtb	r1, r1
 8004766:	4402      	add	r2, r0
 8004768:	4293      	cmp	r3, r2
 800476a:	4618      	mov	r0, r3
 800476c:	d101      	bne.n	8004772 <memchr+0x12>
 800476e:	2000      	movs	r0, #0
 8004770:	e003      	b.n	800477a <memchr+0x1a>
 8004772:	7804      	ldrb	r4, [r0, #0]
 8004774:	3301      	adds	r3, #1
 8004776:	428c      	cmp	r4, r1
 8004778:	d1f6      	bne.n	8004768 <memchr+0x8>
 800477a:	bd10      	pop	{r4, pc}

0800477c <memcpy>:
 800477c:	440a      	add	r2, r1
 800477e:	4291      	cmp	r1, r2
 8004780:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8004784:	d100      	bne.n	8004788 <memcpy+0xc>
 8004786:	4770      	bx	lr
 8004788:	b510      	push	{r4, lr}
 800478a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800478e:	4291      	cmp	r1, r2
 8004790:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004794:	d1f9      	bne.n	800478a <memcpy+0xe>
 8004796:	bd10      	pop	{r4, pc}

08004798 <memmove>:
 8004798:	4288      	cmp	r0, r1
 800479a:	b510      	push	{r4, lr}
 800479c:	eb01 0402 	add.w	r4, r1, r2
 80047a0:	d902      	bls.n	80047a8 <memmove+0x10>
 80047a2:	4284      	cmp	r4, r0
 80047a4:	4623      	mov	r3, r4
 80047a6:	d807      	bhi.n	80047b8 <memmove+0x20>
 80047a8:	1e43      	subs	r3, r0, #1
 80047aa:	42a1      	cmp	r1, r4
 80047ac:	d008      	beq.n	80047c0 <memmove+0x28>
 80047ae:	f811 2b01 	ldrb.w	r2, [r1], #1
 80047b2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80047b6:	e7f8      	b.n	80047aa <memmove+0x12>
 80047b8:	4601      	mov	r1, r0
 80047ba:	4402      	add	r2, r0
 80047bc:	428a      	cmp	r2, r1
 80047be:	d100      	bne.n	80047c2 <memmove+0x2a>
 80047c0:	bd10      	pop	{r4, pc}
 80047c2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80047c6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80047ca:	e7f7      	b.n	80047bc <memmove+0x24>

080047cc <_free_r>:
 80047cc:	b538      	push	{r3, r4, r5, lr}
 80047ce:	4605      	mov	r5, r0
 80047d0:	2900      	cmp	r1, #0
 80047d2:	d043      	beq.n	800485c <_free_r+0x90>
 80047d4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80047d8:	1f0c      	subs	r4, r1, #4
 80047da:	2b00      	cmp	r3, #0
 80047dc:	bfb8      	it	lt
 80047de:	18e4      	addlt	r4, r4, r3
 80047e0:	f000 f8d0 	bl	8004984 <__malloc_lock>
 80047e4:	4a1e      	ldr	r2, [pc, #120]	; (8004860 <_free_r+0x94>)
 80047e6:	6813      	ldr	r3, [r2, #0]
 80047e8:	4610      	mov	r0, r2
 80047ea:	b933      	cbnz	r3, 80047fa <_free_r+0x2e>
 80047ec:	6063      	str	r3, [r4, #4]
 80047ee:	6014      	str	r4, [r2, #0]
 80047f0:	4628      	mov	r0, r5
 80047f2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80047f6:	f000 b8cb 	b.w	8004990 <__malloc_unlock>
 80047fa:	42a3      	cmp	r3, r4
 80047fc:	d90a      	bls.n	8004814 <_free_r+0x48>
 80047fe:	6821      	ldr	r1, [r4, #0]
 8004800:	1862      	adds	r2, r4, r1
 8004802:	4293      	cmp	r3, r2
 8004804:	bf01      	itttt	eq
 8004806:	681a      	ldreq	r2, [r3, #0]
 8004808:	685b      	ldreq	r3, [r3, #4]
 800480a:	1852      	addeq	r2, r2, r1
 800480c:	6022      	streq	r2, [r4, #0]
 800480e:	6063      	str	r3, [r4, #4]
 8004810:	6004      	str	r4, [r0, #0]
 8004812:	e7ed      	b.n	80047f0 <_free_r+0x24>
 8004814:	461a      	mov	r2, r3
 8004816:	685b      	ldr	r3, [r3, #4]
 8004818:	b10b      	cbz	r3, 800481e <_free_r+0x52>
 800481a:	42a3      	cmp	r3, r4
 800481c:	d9fa      	bls.n	8004814 <_free_r+0x48>
 800481e:	6811      	ldr	r1, [r2, #0]
 8004820:	1850      	adds	r0, r2, r1
 8004822:	42a0      	cmp	r0, r4
 8004824:	d10b      	bne.n	800483e <_free_r+0x72>
 8004826:	6820      	ldr	r0, [r4, #0]
 8004828:	4401      	add	r1, r0
 800482a:	1850      	adds	r0, r2, r1
 800482c:	4283      	cmp	r3, r0
 800482e:	6011      	str	r1, [r2, #0]
 8004830:	d1de      	bne.n	80047f0 <_free_r+0x24>
 8004832:	6818      	ldr	r0, [r3, #0]
 8004834:	685b      	ldr	r3, [r3, #4]
 8004836:	4401      	add	r1, r0
 8004838:	6011      	str	r1, [r2, #0]
 800483a:	6053      	str	r3, [r2, #4]
 800483c:	e7d8      	b.n	80047f0 <_free_r+0x24>
 800483e:	d902      	bls.n	8004846 <_free_r+0x7a>
 8004840:	230c      	movs	r3, #12
 8004842:	602b      	str	r3, [r5, #0]
 8004844:	e7d4      	b.n	80047f0 <_free_r+0x24>
 8004846:	6820      	ldr	r0, [r4, #0]
 8004848:	1821      	adds	r1, r4, r0
 800484a:	428b      	cmp	r3, r1
 800484c:	bf01      	itttt	eq
 800484e:	6819      	ldreq	r1, [r3, #0]
 8004850:	685b      	ldreq	r3, [r3, #4]
 8004852:	1809      	addeq	r1, r1, r0
 8004854:	6021      	streq	r1, [r4, #0]
 8004856:	6063      	str	r3, [r4, #4]
 8004858:	6054      	str	r4, [r2, #4]
 800485a:	e7c9      	b.n	80047f0 <_free_r+0x24>
 800485c:	bd38      	pop	{r3, r4, r5, pc}
 800485e:	bf00      	nop
 8004860:	200000f4 	.word	0x200000f4

08004864 <_malloc_r>:
 8004864:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004866:	1ccd      	adds	r5, r1, #3
 8004868:	f025 0503 	bic.w	r5, r5, #3
 800486c:	3508      	adds	r5, #8
 800486e:	2d0c      	cmp	r5, #12
 8004870:	bf38      	it	cc
 8004872:	250c      	movcc	r5, #12
 8004874:	2d00      	cmp	r5, #0
 8004876:	4606      	mov	r6, r0
 8004878:	db01      	blt.n	800487e <_malloc_r+0x1a>
 800487a:	42a9      	cmp	r1, r5
 800487c:	d903      	bls.n	8004886 <_malloc_r+0x22>
 800487e:	230c      	movs	r3, #12
 8004880:	6033      	str	r3, [r6, #0]
 8004882:	2000      	movs	r0, #0
 8004884:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004886:	f000 f87d 	bl	8004984 <__malloc_lock>
 800488a:	4921      	ldr	r1, [pc, #132]	; (8004910 <_malloc_r+0xac>)
 800488c:	680a      	ldr	r2, [r1, #0]
 800488e:	4614      	mov	r4, r2
 8004890:	b99c      	cbnz	r4, 80048ba <_malloc_r+0x56>
 8004892:	4f20      	ldr	r7, [pc, #128]	; (8004914 <_malloc_r+0xb0>)
 8004894:	683b      	ldr	r3, [r7, #0]
 8004896:	b923      	cbnz	r3, 80048a2 <_malloc_r+0x3e>
 8004898:	4621      	mov	r1, r4
 800489a:	4630      	mov	r0, r6
 800489c:	f000 f862 	bl	8004964 <_sbrk_r>
 80048a0:	6038      	str	r0, [r7, #0]
 80048a2:	4629      	mov	r1, r5
 80048a4:	4630      	mov	r0, r6
 80048a6:	f000 f85d 	bl	8004964 <_sbrk_r>
 80048aa:	1c43      	adds	r3, r0, #1
 80048ac:	d123      	bne.n	80048f6 <_malloc_r+0x92>
 80048ae:	230c      	movs	r3, #12
 80048b0:	4630      	mov	r0, r6
 80048b2:	6033      	str	r3, [r6, #0]
 80048b4:	f000 f86c 	bl	8004990 <__malloc_unlock>
 80048b8:	e7e3      	b.n	8004882 <_malloc_r+0x1e>
 80048ba:	6823      	ldr	r3, [r4, #0]
 80048bc:	1b5b      	subs	r3, r3, r5
 80048be:	d417      	bmi.n	80048f0 <_malloc_r+0x8c>
 80048c0:	2b0b      	cmp	r3, #11
 80048c2:	d903      	bls.n	80048cc <_malloc_r+0x68>
 80048c4:	6023      	str	r3, [r4, #0]
 80048c6:	441c      	add	r4, r3
 80048c8:	6025      	str	r5, [r4, #0]
 80048ca:	e004      	b.n	80048d6 <_malloc_r+0x72>
 80048cc:	6863      	ldr	r3, [r4, #4]
 80048ce:	42a2      	cmp	r2, r4
 80048d0:	bf0c      	ite	eq
 80048d2:	600b      	streq	r3, [r1, #0]
 80048d4:	6053      	strne	r3, [r2, #4]
 80048d6:	4630      	mov	r0, r6
 80048d8:	f000 f85a 	bl	8004990 <__malloc_unlock>
 80048dc:	f104 000b 	add.w	r0, r4, #11
 80048e0:	1d23      	adds	r3, r4, #4
 80048e2:	f020 0007 	bic.w	r0, r0, #7
 80048e6:	1ac2      	subs	r2, r0, r3
 80048e8:	d0cc      	beq.n	8004884 <_malloc_r+0x20>
 80048ea:	1a1b      	subs	r3, r3, r0
 80048ec:	50a3      	str	r3, [r4, r2]
 80048ee:	e7c9      	b.n	8004884 <_malloc_r+0x20>
 80048f0:	4622      	mov	r2, r4
 80048f2:	6864      	ldr	r4, [r4, #4]
 80048f4:	e7cc      	b.n	8004890 <_malloc_r+0x2c>
 80048f6:	1cc4      	adds	r4, r0, #3
 80048f8:	f024 0403 	bic.w	r4, r4, #3
 80048fc:	42a0      	cmp	r0, r4
 80048fe:	d0e3      	beq.n	80048c8 <_malloc_r+0x64>
 8004900:	1a21      	subs	r1, r4, r0
 8004902:	4630      	mov	r0, r6
 8004904:	f000 f82e 	bl	8004964 <_sbrk_r>
 8004908:	3001      	adds	r0, #1
 800490a:	d1dd      	bne.n	80048c8 <_malloc_r+0x64>
 800490c:	e7cf      	b.n	80048ae <_malloc_r+0x4a>
 800490e:	bf00      	nop
 8004910:	200000f4 	.word	0x200000f4
 8004914:	200000f8 	.word	0x200000f8

08004918 <_realloc_r>:
 8004918:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800491a:	4607      	mov	r7, r0
 800491c:	4614      	mov	r4, r2
 800491e:	460e      	mov	r6, r1
 8004920:	b921      	cbnz	r1, 800492c <_realloc_r+0x14>
 8004922:	4611      	mov	r1, r2
 8004924:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8004928:	f7ff bf9c 	b.w	8004864 <_malloc_r>
 800492c:	b922      	cbnz	r2, 8004938 <_realloc_r+0x20>
 800492e:	f7ff ff4d 	bl	80047cc <_free_r>
 8004932:	4625      	mov	r5, r4
 8004934:	4628      	mov	r0, r5
 8004936:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004938:	f000 f830 	bl	800499c <_malloc_usable_size_r>
 800493c:	42a0      	cmp	r0, r4
 800493e:	d20f      	bcs.n	8004960 <_realloc_r+0x48>
 8004940:	4621      	mov	r1, r4
 8004942:	4638      	mov	r0, r7
 8004944:	f7ff ff8e 	bl	8004864 <_malloc_r>
 8004948:	4605      	mov	r5, r0
 800494a:	2800      	cmp	r0, #0
 800494c:	d0f2      	beq.n	8004934 <_realloc_r+0x1c>
 800494e:	4631      	mov	r1, r6
 8004950:	4622      	mov	r2, r4
 8004952:	f7ff ff13 	bl	800477c <memcpy>
 8004956:	4631      	mov	r1, r6
 8004958:	4638      	mov	r0, r7
 800495a:	f7ff ff37 	bl	80047cc <_free_r>
 800495e:	e7e9      	b.n	8004934 <_realloc_r+0x1c>
 8004960:	4635      	mov	r5, r6
 8004962:	e7e7      	b.n	8004934 <_realloc_r+0x1c>

08004964 <_sbrk_r>:
 8004964:	b538      	push	{r3, r4, r5, lr}
 8004966:	2300      	movs	r3, #0
 8004968:	4d05      	ldr	r5, [pc, #20]	; (8004980 <_sbrk_r+0x1c>)
 800496a:	4604      	mov	r4, r0
 800496c:	4608      	mov	r0, r1
 800496e:	602b      	str	r3, [r5, #0]
 8004970:	f7fc f9da 	bl	8000d28 <_sbrk>
 8004974:	1c43      	adds	r3, r0, #1
 8004976:	d102      	bne.n	800497e <_sbrk_r+0x1a>
 8004978:	682b      	ldr	r3, [r5, #0]
 800497a:	b103      	cbz	r3, 800497e <_sbrk_r+0x1a>
 800497c:	6023      	str	r3, [r4, #0]
 800497e:	bd38      	pop	{r3, r4, r5, pc}
 8004980:	20000280 	.word	0x20000280

08004984 <__malloc_lock>:
 8004984:	4801      	ldr	r0, [pc, #4]	; (800498c <__malloc_lock+0x8>)
 8004986:	f000 b811 	b.w	80049ac <__retarget_lock_acquire_recursive>
 800498a:	bf00      	nop
 800498c:	20000288 	.word	0x20000288

08004990 <__malloc_unlock>:
 8004990:	4801      	ldr	r0, [pc, #4]	; (8004998 <__malloc_unlock+0x8>)
 8004992:	f000 b80c 	b.w	80049ae <__retarget_lock_release_recursive>
 8004996:	bf00      	nop
 8004998:	20000288 	.word	0x20000288

0800499c <_malloc_usable_size_r>:
 800499c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80049a0:	1f18      	subs	r0, r3, #4
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	bfbc      	itt	lt
 80049a6:	580b      	ldrlt	r3, [r1, r0]
 80049a8:	18c0      	addlt	r0, r0, r3
 80049aa:	4770      	bx	lr

080049ac <__retarget_lock_acquire_recursive>:
 80049ac:	4770      	bx	lr

080049ae <__retarget_lock_release_recursive>:
 80049ae:	4770      	bx	lr

080049b0 <_init>:
 80049b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80049b2:	bf00      	nop
 80049b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80049b6:	bc08      	pop	{r3}
 80049b8:	469e      	mov	lr, r3
 80049ba:	4770      	bx	lr

080049bc <_fini>:
 80049bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80049be:	bf00      	nop
 80049c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80049c2:	bc08      	pop	{r3}
 80049c4:	469e      	mov	lr, r3
 80049c6:	4770      	bx	lr
