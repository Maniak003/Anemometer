
Anemometer.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e194  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000084c  0800e2a8  0800e2a8  0001e2a8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800eaf4  0800eaf4  00020228  2**0
                  CONTENTS
  4 .ARM          00000000  0800eaf4  0800eaf4  00020228  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800eaf4  0800eaf4  00020228  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800eaf4  0800eaf4  0001eaf4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800eaf8  0800eaf8  0001eaf8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000228  20000000  0800eafc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003d4  20000228  0800ed24  00020228  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  200005fc  0800ed24  000205fc  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020228  2**0
                  CONTENTS, READONLY
 12 .debug_info   000170d3  00000000  00000000  00020251  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000033d3  00000000  00000000  00037324  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000014f8  00000000  00000000  0003a6f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001410  00000000  00000000  0003bbf0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a7f1  00000000  00000000  0003d000  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00016825  00000000  00000000  000577f1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000955f6  00000000  00000000  0006e016  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0010360c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006de4  00000000  00000000  00103660  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000228 	.word	0x20000228
 800012c:	00000000 	.word	0x00000000
 8000130:	0800e28c 	.word	0x0800e28c

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	2000022c 	.word	0x2000022c
 800014c:	0800e28c 	.word	0x0800e28c

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__clear_cache>:
 8000a88:	4770      	bx	lr
 8000a8a:	bf00      	nop

08000a8c <default_ip_assign>:
/* Parse message as OFFER and ACK and NACK from DHCP server.*/
int8_t   parseDHCPCMSG(void);

/* The default handler of ip assign first */
void default_ip_assign(void)
{
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	af00      	add	r7, sp, #0
   setSIPR(DHCP_allocated_ip);
 8000a90:	2204      	movs	r2, #4
 8000a92:	4909      	ldr	r1, [pc, #36]	; (8000ab8 <default_ip_assign+0x2c>)
 8000a94:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 8000a98:	f004 fe68 	bl	800576c <WIZCHIP_WRITE_BUF>
   setSUBR(DHCP_allocated_sn);
 8000a9c:	2204      	movs	r2, #4
 8000a9e:	4907      	ldr	r1, [pc, #28]	; (8000abc <default_ip_assign+0x30>)
 8000aa0:	f44f 60a0 	mov.w	r0, #1280	; 0x500
 8000aa4:	f004 fe62 	bl	800576c <WIZCHIP_WRITE_BUF>
   setGAR (DHCP_allocated_gw);
 8000aa8:	2204      	movs	r2, #4
 8000aaa:	4905      	ldr	r1, [pc, #20]	; (8000ac0 <default_ip_assign+0x34>)
 8000aac:	f44f 7080 	mov.w	r0, #256	; 0x100
 8000ab0:	f004 fe5c 	bl	800576c <WIZCHIP_WRITE_BUF>
}
 8000ab4:	bf00      	nop
 8000ab6:	bd80      	pop	{r7, pc}
 8000ab8:	20000248 	.word	0x20000248
 8000abc:	20000250 	.word	0x20000250
 8000ac0:	2000024c 	.word	0x2000024c

08000ac4 <default_ip_update>:

/* The default handler of ip changed */
void default_ip_update(void)
{
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	af00      	add	r7, sp, #0
	/* WIZchip Software Reset */
   setMR(MR_RST);
 8000ac8:	2180      	movs	r1, #128	; 0x80
 8000aca:	2000      	movs	r0, #0
 8000acc:	f004 fda0 	bl	8005610 <WIZCHIP_WRITE>
   getMR(); // for delay
 8000ad0:	2000      	movs	r0, #0
 8000ad2:	f004 fd51 	bl	8005578 <WIZCHIP_READ>
   default_ip_assign();
 8000ad6:	f7ff ffd9 	bl	8000a8c <default_ip_assign>
   setSHAR(DHCP_CHADDR);
 8000ada:	2206      	movs	r2, #6
 8000adc:	4903      	ldr	r1, [pc, #12]	; (8000aec <default_ip_update+0x28>)
 8000ade:	f44f 6010 	mov.w	r0, #2304	; 0x900
 8000ae2:	f004 fe43 	bl	800576c <WIZCHIP_WRITE_BUF>
}
 8000ae6:	bf00      	nop
 8000ae8:	bd80      	pop	{r7, pc}
 8000aea:	bf00      	nop
 8000aec:	200002f8 	.word	0x200002f8

08000af0 <default_ip_conflict>:

/* The default handler of ip changed */
void default_ip_conflict(void)
{
 8000af0:	b580      	push	{r7, lr}
 8000af2:	af00      	add	r7, sp, #0
	// WIZchip Software Reset
	setMR(MR_RST);
 8000af4:	2180      	movs	r1, #128	; 0x80
 8000af6:	2000      	movs	r0, #0
 8000af8:	f004 fd8a 	bl	8005610 <WIZCHIP_WRITE>
	getMR(); // for delay
 8000afc:	2000      	movs	r0, #0
 8000afe:	f004 fd3b 	bl	8005578 <WIZCHIP_READ>
	setSHAR(DHCP_CHADDR);
 8000b02:	2206      	movs	r2, #6
 8000b04:	4903      	ldr	r1, [pc, #12]	; (8000b14 <default_ip_conflict+0x24>)
 8000b06:	f44f 6010 	mov.w	r0, #2304	; 0x900
 8000b0a:	f004 fe2f 	bl	800576c <WIZCHIP_WRITE_BUF>
}
 8000b0e:	bf00      	nop
 8000b10:	bd80      	pop	{r7, pc}
 8000b12:	bf00      	nop
 8000b14:	200002f8 	.word	0x200002f8

08000b18 <reg_dhcp_cbfunc>:

/* register the call back func. */
void reg_dhcp_cbfunc(void(*ip_assign)(void), void(*ip_update)(void), void(*ip_conflict)(void))
{
 8000b18:	b480      	push	{r7}
 8000b1a:	b085      	sub	sp, #20
 8000b1c:	af00      	add	r7, sp, #0
 8000b1e:	60f8      	str	r0, [r7, #12]
 8000b20:	60b9      	str	r1, [r7, #8]
 8000b22:	607a      	str	r2, [r7, #4]
   dhcp_ip_assign   = default_ip_assign;
 8000b24:	4b0f      	ldr	r3, [pc, #60]	; (8000b64 <reg_dhcp_cbfunc+0x4c>)
 8000b26:	4a10      	ldr	r2, [pc, #64]	; (8000b68 <reg_dhcp_cbfunc+0x50>)
 8000b28:	601a      	str	r2, [r3, #0]
   dhcp_ip_update   = default_ip_update;
 8000b2a:	4b10      	ldr	r3, [pc, #64]	; (8000b6c <reg_dhcp_cbfunc+0x54>)
 8000b2c:	4a10      	ldr	r2, [pc, #64]	; (8000b70 <reg_dhcp_cbfunc+0x58>)
 8000b2e:	601a      	str	r2, [r3, #0]
   dhcp_ip_conflict = default_ip_conflict;
 8000b30:	4b10      	ldr	r3, [pc, #64]	; (8000b74 <reg_dhcp_cbfunc+0x5c>)
 8000b32:	4a11      	ldr	r2, [pc, #68]	; (8000b78 <reg_dhcp_cbfunc+0x60>)
 8000b34:	601a      	str	r2, [r3, #0]
   if(ip_assign)   dhcp_ip_assign = ip_assign;
 8000b36:	68fb      	ldr	r3, [r7, #12]
 8000b38:	2b00      	cmp	r3, #0
 8000b3a:	d002      	beq.n	8000b42 <reg_dhcp_cbfunc+0x2a>
 8000b3c:	4a09      	ldr	r2, [pc, #36]	; (8000b64 <reg_dhcp_cbfunc+0x4c>)
 8000b3e:	68fb      	ldr	r3, [r7, #12]
 8000b40:	6013      	str	r3, [r2, #0]
   if(ip_update)   dhcp_ip_update = ip_update;
 8000b42:	68bb      	ldr	r3, [r7, #8]
 8000b44:	2b00      	cmp	r3, #0
 8000b46:	d002      	beq.n	8000b4e <reg_dhcp_cbfunc+0x36>
 8000b48:	4a08      	ldr	r2, [pc, #32]	; (8000b6c <reg_dhcp_cbfunc+0x54>)
 8000b4a:	68bb      	ldr	r3, [r7, #8]
 8000b4c:	6013      	str	r3, [r2, #0]
   if(ip_conflict) dhcp_ip_conflict = ip_conflict;
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	2b00      	cmp	r3, #0
 8000b52:	d002      	beq.n	8000b5a <reg_dhcp_cbfunc+0x42>
 8000b54:	4a07      	ldr	r2, [pc, #28]	; (8000b74 <reg_dhcp_cbfunc+0x5c>)
 8000b56:	687b      	ldr	r3, [r7, #4]
 8000b58:	6013      	str	r3, [r2, #0]
}
 8000b5a:	bf00      	nop
 8000b5c:	3714      	adds	r7, #20
 8000b5e:	46bd      	mov	sp, r7
 8000b60:	bc80      	pop	{r7}
 8000b62:	4770      	bx	lr
 8000b64:	20000010 	.word	0x20000010
 8000b68:	08000a8d 	.word	0x08000a8d
 8000b6c:	20000014 	.word	0x20000014
 8000b70:	08000ac5 	.word	0x08000ac5
 8000b74:	20000018 	.word	0x20000018
 8000b78:	08000af1 	.word	0x08000af1

08000b7c <makeDHCPMSG>:

/* make the common DHCP message */
void makeDHCPMSG(void)
{
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	b084      	sub	sp, #16
 8000b80:	af00      	add	r7, sp, #0
   uint8_t  bk_mac[6];
   uint8_t* ptmp;
   uint8_t  i;
   getSHAR(bk_mac);
 8000b82:	463b      	mov	r3, r7
 8000b84:	2206      	movs	r2, #6
 8000b86:	4619      	mov	r1, r3
 8000b88:	f44f 6010 	mov.w	r0, #2304	; 0x900
 8000b8c:	f004 fd8e 	bl	80056ac <WIZCHIP_READ_BUF>
	pDHCPMSG->op      = DHCP_BOOTREQUEST;
 8000b90:	4b72      	ldr	r3, [pc, #456]	; (8000d5c <makeDHCPMSG+0x1e0>)
 8000b92:	681b      	ldr	r3, [r3, #0]
 8000b94:	2201      	movs	r2, #1
 8000b96:	701a      	strb	r2, [r3, #0]
	pDHCPMSG->htype   = DHCP_HTYPE10MB;
 8000b98:	4b70      	ldr	r3, [pc, #448]	; (8000d5c <makeDHCPMSG+0x1e0>)
 8000b9a:	681b      	ldr	r3, [r3, #0]
 8000b9c:	2201      	movs	r2, #1
 8000b9e:	705a      	strb	r2, [r3, #1]
	pDHCPMSG->hlen    = DHCP_HLENETHERNET;
 8000ba0:	4b6e      	ldr	r3, [pc, #440]	; (8000d5c <makeDHCPMSG+0x1e0>)
 8000ba2:	681b      	ldr	r3, [r3, #0]
 8000ba4:	2206      	movs	r2, #6
 8000ba6:	709a      	strb	r2, [r3, #2]
	pDHCPMSG->hops    = DHCP_HOPS;
 8000ba8:	4b6c      	ldr	r3, [pc, #432]	; (8000d5c <makeDHCPMSG+0x1e0>)
 8000baa:	681b      	ldr	r3, [r3, #0]
 8000bac:	2200      	movs	r2, #0
 8000bae:	70da      	strb	r2, [r3, #3]
	ptmp              = (uint8_t*)(&pDHCPMSG->xid);
 8000bb0:	4b6a      	ldr	r3, [pc, #424]	; (8000d5c <makeDHCPMSG+0x1e0>)
 8000bb2:	681b      	ldr	r3, [r3, #0]
 8000bb4:	3304      	adds	r3, #4
 8000bb6:	60bb      	str	r3, [r7, #8]
	*(ptmp+0)         = (uint8_t)((DHCP_XID & 0xFF000000) >> 24);
 8000bb8:	4b69      	ldr	r3, [pc, #420]	; (8000d60 <makeDHCPMSG+0x1e4>)
 8000bba:	681b      	ldr	r3, [r3, #0]
 8000bbc:	0e1b      	lsrs	r3, r3, #24
 8000bbe:	b2da      	uxtb	r2, r3
 8000bc0:	68bb      	ldr	r3, [r7, #8]
 8000bc2:	701a      	strb	r2, [r3, #0]
	*(ptmp+1)         = (uint8_t)((DHCP_XID & 0x00FF0000) >> 16);
 8000bc4:	4b66      	ldr	r3, [pc, #408]	; (8000d60 <makeDHCPMSG+0x1e4>)
 8000bc6:	681b      	ldr	r3, [r3, #0]
 8000bc8:	0c1a      	lsrs	r2, r3, #16
 8000bca:	68bb      	ldr	r3, [r7, #8]
 8000bcc:	3301      	adds	r3, #1
 8000bce:	b2d2      	uxtb	r2, r2
 8000bd0:	701a      	strb	r2, [r3, #0]
   *(ptmp+2)         = (uint8_t)((DHCP_XID & 0x0000FF00) >>  8);
 8000bd2:	4b63      	ldr	r3, [pc, #396]	; (8000d60 <makeDHCPMSG+0x1e4>)
 8000bd4:	681b      	ldr	r3, [r3, #0]
 8000bd6:	0a1a      	lsrs	r2, r3, #8
 8000bd8:	68bb      	ldr	r3, [r7, #8]
 8000bda:	3302      	adds	r3, #2
 8000bdc:	b2d2      	uxtb	r2, r2
 8000bde:	701a      	strb	r2, [r3, #0]
	*(ptmp+3)         = (uint8_t)((DHCP_XID & 0x000000FF) >>  0);   
 8000be0:	4b5f      	ldr	r3, [pc, #380]	; (8000d60 <makeDHCPMSG+0x1e4>)
 8000be2:	681a      	ldr	r2, [r3, #0]
 8000be4:	68bb      	ldr	r3, [r7, #8]
 8000be6:	3303      	adds	r3, #3
 8000be8:	b2d2      	uxtb	r2, r2
 8000bea:	701a      	strb	r2, [r3, #0]
	pDHCPMSG->secs    = DHCP_SECS;
 8000bec:	4b5b      	ldr	r3, [pc, #364]	; (8000d5c <makeDHCPMSG+0x1e0>)
 8000bee:	681b      	ldr	r3, [r3, #0]
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	811a      	strh	r2, [r3, #8]
	ptmp              = (uint8_t*)(&pDHCPMSG->flags);	
 8000bf4:	4b59      	ldr	r3, [pc, #356]	; (8000d5c <makeDHCPMSG+0x1e0>)
 8000bf6:	681b      	ldr	r3, [r3, #0]
 8000bf8:	330a      	adds	r3, #10
 8000bfa:	60bb      	str	r3, [r7, #8]
	*(ptmp+0)         = (uint8_t)((DHCP_FLAGSBROADCAST & 0xFF00) >> 8);
 8000bfc:	68bb      	ldr	r3, [r7, #8]
 8000bfe:	2280      	movs	r2, #128	; 0x80
 8000c00:	701a      	strb	r2, [r3, #0]
	*(ptmp+1)         = (uint8_t)((DHCP_FLAGSBROADCAST & 0x00FF) >> 0);
 8000c02:	68bb      	ldr	r3, [r7, #8]
 8000c04:	3301      	adds	r3, #1
 8000c06:	2200      	movs	r2, #0
 8000c08:	701a      	strb	r2, [r3, #0]

	pDHCPMSG->ciaddr[0] = 0;
 8000c0a:	4b54      	ldr	r3, [pc, #336]	; (8000d5c <makeDHCPMSG+0x1e0>)
 8000c0c:	681b      	ldr	r3, [r3, #0]
 8000c0e:	2200      	movs	r2, #0
 8000c10:	731a      	strb	r2, [r3, #12]
	pDHCPMSG->ciaddr[1] = 0;
 8000c12:	4b52      	ldr	r3, [pc, #328]	; (8000d5c <makeDHCPMSG+0x1e0>)
 8000c14:	681b      	ldr	r3, [r3, #0]
 8000c16:	2200      	movs	r2, #0
 8000c18:	735a      	strb	r2, [r3, #13]
	pDHCPMSG->ciaddr[2] = 0;
 8000c1a:	4b50      	ldr	r3, [pc, #320]	; (8000d5c <makeDHCPMSG+0x1e0>)
 8000c1c:	681b      	ldr	r3, [r3, #0]
 8000c1e:	2200      	movs	r2, #0
 8000c20:	739a      	strb	r2, [r3, #14]
	pDHCPMSG->ciaddr[3] = 0;
 8000c22:	4b4e      	ldr	r3, [pc, #312]	; (8000d5c <makeDHCPMSG+0x1e0>)
 8000c24:	681b      	ldr	r3, [r3, #0]
 8000c26:	2200      	movs	r2, #0
 8000c28:	73da      	strb	r2, [r3, #15]

	pDHCPMSG->yiaddr[0] = 0;
 8000c2a:	4b4c      	ldr	r3, [pc, #304]	; (8000d5c <makeDHCPMSG+0x1e0>)
 8000c2c:	681b      	ldr	r3, [r3, #0]
 8000c2e:	2200      	movs	r2, #0
 8000c30:	741a      	strb	r2, [r3, #16]
	pDHCPMSG->yiaddr[1] = 0;
 8000c32:	4b4a      	ldr	r3, [pc, #296]	; (8000d5c <makeDHCPMSG+0x1e0>)
 8000c34:	681b      	ldr	r3, [r3, #0]
 8000c36:	2200      	movs	r2, #0
 8000c38:	745a      	strb	r2, [r3, #17]
	pDHCPMSG->yiaddr[2] = 0;
 8000c3a:	4b48      	ldr	r3, [pc, #288]	; (8000d5c <makeDHCPMSG+0x1e0>)
 8000c3c:	681b      	ldr	r3, [r3, #0]
 8000c3e:	2200      	movs	r2, #0
 8000c40:	749a      	strb	r2, [r3, #18]
	pDHCPMSG->yiaddr[3] = 0;
 8000c42:	4b46      	ldr	r3, [pc, #280]	; (8000d5c <makeDHCPMSG+0x1e0>)
 8000c44:	681b      	ldr	r3, [r3, #0]
 8000c46:	2200      	movs	r2, #0
 8000c48:	74da      	strb	r2, [r3, #19]

	pDHCPMSG->siaddr[0] = 0;
 8000c4a:	4b44      	ldr	r3, [pc, #272]	; (8000d5c <makeDHCPMSG+0x1e0>)
 8000c4c:	681b      	ldr	r3, [r3, #0]
 8000c4e:	2200      	movs	r2, #0
 8000c50:	751a      	strb	r2, [r3, #20]
	pDHCPMSG->siaddr[1] = 0;
 8000c52:	4b42      	ldr	r3, [pc, #264]	; (8000d5c <makeDHCPMSG+0x1e0>)
 8000c54:	681b      	ldr	r3, [r3, #0]
 8000c56:	2200      	movs	r2, #0
 8000c58:	755a      	strb	r2, [r3, #21]
	pDHCPMSG->siaddr[2] = 0;
 8000c5a:	4b40      	ldr	r3, [pc, #256]	; (8000d5c <makeDHCPMSG+0x1e0>)
 8000c5c:	681b      	ldr	r3, [r3, #0]
 8000c5e:	2200      	movs	r2, #0
 8000c60:	759a      	strb	r2, [r3, #22]
	pDHCPMSG->siaddr[3] = 0;
 8000c62:	4b3e      	ldr	r3, [pc, #248]	; (8000d5c <makeDHCPMSG+0x1e0>)
 8000c64:	681b      	ldr	r3, [r3, #0]
 8000c66:	2200      	movs	r2, #0
 8000c68:	75da      	strb	r2, [r3, #23]

	pDHCPMSG->giaddr[0] = 0;
 8000c6a:	4b3c      	ldr	r3, [pc, #240]	; (8000d5c <makeDHCPMSG+0x1e0>)
 8000c6c:	681b      	ldr	r3, [r3, #0]
 8000c6e:	2200      	movs	r2, #0
 8000c70:	761a      	strb	r2, [r3, #24]
	pDHCPMSG->giaddr[1] = 0;
 8000c72:	4b3a      	ldr	r3, [pc, #232]	; (8000d5c <makeDHCPMSG+0x1e0>)
 8000c74:	681b      	ldr	r3, [r3, #0]
 8000c76:	2200      	movs	r2, #0
 8000c78:	765a      	strb	r2, [r3, #25]
	pDHCPMSG->giaddr[2] = 0;
 8000c7a:	4b38      	ldr	r3, [pc, #224]	; (8000d5c <makeDHCPMSG+0x1e0>)
 8000c7c:	681b      	ldr	r3, [r3, #0]
 8000c7e:	2200      	movs	r2, #0
 8000c80:	769a      	strb	r2, [r3, #26]
	pDHCPMSG->giaddr[3] = 0;
 8000c82:	4b36      	ldr	r3, [pc, #216]	; (8000d5c <makeDHCPMSG+0x1e0>)
 8000c84:	681b      	ldr	r3, [r3, #0]
 8000c86:	2200      	movs	r2, #0
 8000c88:	76da      	strb	r2, [r3, #27]

	pDHCPMSG->chaddr[0] = DHCP_CHADDR[0];
 8000c8a:	4b34      	ldr	r3, [pc, #208]	; (8000d5c <makeDHCPMSG+0x1e0>)
 8000c8c:	681b      	ldr	r3, [r3, #0]
 8000c8e:	4a35      	ldr	r2, [pc, #212]	; (8000d64 <makeDHCPMSG+0x1e8>)
 8000c90:	7812      	ldrb	r2, [r2, #0]
 8000c92:	771a      	strb	r2, [r3, #28]
	pDHCPMSG->chaddr[1] = DHCP_CHADDR[1];
 8000c94:	4b31      	ldr	r3, [pc, #196]	; (8000d5c <makeDHCPMSG+0x1e0>)
 8000c96:	681b      	ldr	r3, [r3, #0]
 8000c98:	4a32      	ldr	r2, [pc, #200]	; (8000d64 <makeDHCPMSG+0x1e8>)
 8000c9a:	7852      	ldrb	r2, [r2, #1]
 8000c9c:	775a      	strb	r2, [r3, #29]
	pDHCPMSG->chaddr[2] = DHCP_CHADDR[2];
 8000c9e:	4b2f      	ldr	r3, [pc, #188]	; (8000d5c <makeDHCPMSG+0x1e0>)
 8000ca0:	681b      	ldr	r3, [r3, #0]
 8000ca2:	4a30      	ldr	r2, [pc, #192]	; (8000d64 <makeDHCPMSG+0x1e8>)
 8000ca4:	7892      	ldrb	r2, [r2, #2]
 8000ca6:	779a      	strb	r2, [r3, #30]
	pDHCPMSG->chaddr[3] = DHCP_CHADDR[3];
 8000ca8:	4b2c      	ldr	r3, [pc, #176]	; (8000d5c <makeDHCPMSG+0x1e0>)
 8000caa:	681b      	ldr	r3, [r3, #0]
 8000cac:	4a2d      	ldr	r2, [pc, #180]	; (8000d64 <makeDHCPMSG+0x1e8>)
 8000cae:	78d2      	ldrb	r2, [r2, #3]
 8000cb0:	77da      	strb	r2, [r3, #31]
	pDHCPMSG->chaddr[4] = DHCP_CHADDR[4];
 8000cb2:	4b2a      	ldr	r3, [pc, #168]	; (8000d5c <makeDHCPMSG+0x1e0>)
 8000cb4:	681b      	ldr	r3, [r3, #0]
 8000cb6:	4a2b      	ldr	r2, [pc, #172]	; (8000d64 <makeDHCPMSG+0x1e8>)
 8000cb8:	7912      	ldrb	r2, [r2, #4]
 8000cba:	f883 2020 	strb.w	r2, [r3, #32]
	pDHCPMSG->chaddr[5] = DHCP_CHADDR[5];
 8000cbe:	4b27      	ldr	r3, [pc, #156]	; (8000d5c <makeDHCPMSG+0x1e0>)
 8000cc0:	681b      	ldr	r3, [r3, #0]
 8000cc2:	4a28      	ldr	r2, [pc, #160]	; (8000d64 <makeDHCPMSG+0x1e8>)
 8000cc4:	7952      	ldrb	r2, [r2, #5]
 8000cc6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

	for (i = 6; i < 16; i++)  pDHCPMSG->chaddr[i] = 0;
 8000cca:	2306      	movs	r3, #6
 8000ccc:	73fb      	strb	r3, [r7, #15]
 8000cce:	e008      	b.n	8000ce2 <makeDHCPMSG+0x166>
 8000cd0:	4b22      	ldr	r3, [pc, #136]	; (8000d5c <makeDHCPMSG+0x1e0>)
 8000cd2:	681a      	ldr	r2, [r3, #0]
 8000cd4:	7bfb      	ldrb	r3, [r7, #15]
 8000cd6:	4413      	add	r3, r2
 8000cd8:	2200      	movs	r2, #0
 8000cda:	771a      	strb	r2, [r3, #28]
 8000cdc:	7bfb      	ldrb	r3, [r7, #15]
 8000cde:	3301      	adds	r3, #1
 8000ce0:	73fb      	strb	r3, [r7, #15]
 8000ce2:	7bfb      	ldrb	r3, [r7, #15]
 8000ce4:	2b0f      	cmp	r3, #15
 8000ce6:	d9f3      	bls.n	8000cd0 <makeDHCPMSG+0x154>
	for (i = 0; i < 64; i++)  pDHCPMSG->sname[i]  = 0;
 8000ce8:	2300      	movs	r3, #0
 8000cea:	73fb      	strb	r3, [r7, #15]
 8000cec:	e009      	b.n	8000d02 <makeDHCPMSG+0x186>
 8000cee:	4b1b      	ldr	r3, [pc, #108]	; (8000d5c <makeDHCPMSG+0x1e0>)
 8000cf0:	681a      	ldr	r2, [r3, #0]
 8000cf2:	7bfb      	ldrb	r3, [r7, #15]
 8000cf4:	4413      	add	r3, r2
 8000cf6:	2200      	movs	r2, #0
 8000cf8:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
 8000cfc:	7bfb      	ldrb	r3, [r7, #15]
 8000cfe:	3301      	adds	r3, #1
 8000d00:	73fb      	strb	r3, [r7, #15]
 8000d02:	7bfb      	ldrb	r3, [r7, #15]
 8000d04:	2b3f      	cmp	r3, #63	; 0x3f
 8000d06:	d9f2      	bls.n	8000cee <makeDHCPMSG+0x172>
	for (i = 0; i < 128; i++) pDHCPMSG->file[i]   = 0;
 8000d08:	2300      	movs	r3, #0
 8000d0a:	73fb      	strb	r3, [r7, #15]
 8000d0c:	e009      	b.n	8000d22 <makeDHCPMSG+0x1a6>
 8000d0e:	4b13      	ldr	r3, [pc, #76]	; (8000d5c <makeDHCPMSG+0x1e0>)
 8000d10:	681a      	ldr	r2, [r3, #0]
 8000d12:	7bfb      	ldrb	r3, [r7, #15]
 8000d14:	4413      	add	r3, r2
 8000d16:	2200      	movs	r2, #0
 8000d18:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
 8000d1c:	7bfb      	ldrb	r3, [r7, #15]
 8000d1e:	3301      	adds	r3, #1
 8000d20:	73fb      	strb	r3, [r7, #15]
 8000d22:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d26:	2b00      	cmp	r3, #0
 8000d28:	daf1      	bge.n	8000d0e <makeDHCPMSG+0x192>

	// MAGIC_COOKIE
	pDHCPMSG->OPT[0] = (uint8_t)((MAGIC_COOKIE & 0xFF000000) >> 24);
 8000d2a:	4b0c      	ldr	r3, [pc, #48]	; (8000d5c <makeDHCPMSG+0x1e0>)
 8000d2c:	681b      	ldr	r3, [r3, #0]
 8000d2e:	2263      	movs	r2, #99	; 0x63
 8000d30:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[1] = (uint8_t)((MAGIC_COOKIE & 0x00FF0000) >> 16);
 8000d34:	4b09      	ldr	r3, [pc, #36]	; (8000d5c <makeDHCPMSG+0x1e0>)
 8000d36:	681b      	ldr	r3, [r3, #0]
 8000d38:	2282      	movs	r2, #130	; 0x82
 8000d3a:	f883 20ed 	strb.w	r2, [r3, #237]	; 0xed
	pDHCPMSG->OPT[2] = (uint8_t)((MAGIC_COOKIE & 0x0000FF00) >>  8);
 8000d3e:	4b07      	ldr	r3, [pc, #28]	; (8000d5c <makeDHCPMSG+0x1e0>)
 8000d40:	681b      	ldr	r3, [r3, #0]
 8000d42:	2253      	movs	r2, #83	; 0x53
 8000d44:	f883 20ee 	strb.w	r2, [r3, #238]	; 0xee
	pDHCPMSG->OPT[3] = (uint8_t) (MAGIC_COOKIE & 0x000000FF) >>  0;
 8000d48:	4b04      	ldr	r3, [pc, #16]	; (8000d5c <makeDHCPMSG+0x1e0>)
 8000d4a:	681b      	ldr	r3, [r3, #0]
 8000d4c:	2263      	movs	r2, #99	; 0x63
 8000d4e:	f883 20ef 	strb.w	r2, [r3, #239]	; 0xef
}
 8000d52:	bf00      	nop
 8000d54:	3710      	adds	r7, #16
 8000d56:	46bd      	mov	sp, r7
 8000d58:	bd80      	pop	{r7, pc}
 8000d5a:	bf00      	nop
 8000d5c:	2000030c 	.word	0x2000030c
 8000d60:	20000300 	.word	0x20000300
 8000d64:	200002f8 	.word	0x200002f8

08000d68 <send_DHCP_DISCOVER>:

/* SEND DHCP DISCOVER */
void send_DHCP_DISCOVER(void)
{
 8000d68:	b5b0      	push	{r4, r5, r7, lr}
 8000d6a:	b084      	sub	sp, #16
 8000d6c:	af02      	add	r7, sp, #8
	uint16_t i;
	uint8_t ip[4];
	uint16_t k = 0;
 8000d6e:	2300      	movs	r3, #0
 8000d70:	80bb      	strh	r3, [r7, #4]
   
   makeDHCPMSG();
 8000d72:	f7ff ff03 	bl	8000b7c <makeDHCPMSG>
   DHCP_SIP[0]=0;
 8000d76:	4b56      	ldr	r3, [pc, #344]	; (8000ed0 <send_DHCP_DISCOVER+0x168>)
 8000d78:	2200      	movs	r2, #0
 8000d7a:	701a      	strb	r2, [r3, #0]
   DHCP_SIP[1]=0;
 8000d7c:	4b54      	ldr	r3, [pc, #336]	; (8000ed0 <send_DHCP_DISCOVER+0x168>)
 8000d7e:	2200      	movs	r2, #0
 8000d80:	705a      	strb	r2, [r3, #1]
   DHCP_SIP[2]=0;
 8000d82:	4b53      	ldr	r3, [pc, #332]	; (8000ed0 <send_DHCP_DISCOVER+0x168>)
 8000d84:	2200      	movs	r2, #0
 8000d86:	709a      	strb	r2, [r3, #2]
   DHCP_SIP[3]=0;
 8000d88:	4b51      	ldr	r3, [pc, #324]	; (8000ed0 <send_DHCP_DISCOVER+0x168>)
 8000d8a:	2200      	movs	r2, #0
 8000d8c:	70da      	strb	r2, [r3, #3]
   DHCP_REAL_SIP[0]=0;
 8000d8e:	4b51      	ldr	r3, [pc, #324]	; (8000ed4 <send_DHCP_DISCOVER+0x16c>)
 8000d90:	2200      	movs	r2, #0
 8000d92:	701a      	strb	r2, [r3, #0]
   DHCP_REAL_SIP[1]=0;
 8000d94:	4b4f      	ldr	r3, [pc, #316]	; (8000ed4 <send_DHCP_DISCOVER+0x16c>)
 8000d96:	2200      	movs	r2, #0
 8000d98:	705a      	strb	r2, [r3, #1]
   DHCP_REAL_SIP[2]=0;
 8000d9a:	4b4e      	ldr	r3, [pc, #312]	; (8000ed4 <send_DHCP_DISCOVER+0x16c>)
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	709a      	strb	r2, [r3, #2]
   DHCP_REAL_SIP[3]=0;
 8000da0:	4b4c      	ldr	r3, [pc, #304]	; (8000ed4 <send_DHCP_DISCOVER+0x16c>)
 8000da2:	2200      	movs	r2, #0
 8000da4:	70da      	strb	r2, [r3, #3]

   k = 4;     // because MAGIC_COOKIE already made by makeDHCPMSG()
 8000da6:	2304      	movs	r3, #4
 8000da8:	80bb      	strh	r3, [r7, #4]
   
	// Option Request Param
	pDHCPMSG->OPT[k++] = dhcpMessageType;
 8000daa:	4b4b      	ldr	r3, [pc, #300]	; (8000ed8 <send_DHCP_DISCOVER+0x170>)
 8000dac:	681a      	ldr	r2, [r3, #0]
 8000dae:	88bb      	ldrh	r3, [r7, #4]
 8000db0:	1c59      	adds	r1, r3, #1
 8000db2:	80b9      	strh	r1, [r7, #4]
 8000db4:	4413      	add	r3, r2
 8000db6:	2235      	movs	r2, #53	; 0x35
 8000db8:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = 0x01;
 8000dbc:	4b46      	ldr	r3, [pc, #280]	; (8000ed8 <send_DHCP_DISCOVER+0x170>)
 8000dbe:	681a      	ldr	r2, [r3, #0]
 8000dc0:	88bb      	ldrh	r3, [r7, #4]
 8000dc2:	1c59      	adds	r1, r3, #1
 8000dc4:	80b9      	strh	r1, [r7, #4]
 8000dc6:	4413      	add	r3, r2
 8000dc8:	2201      	movs	r2, #1
 8000dca:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_DISCOVER;
 8000dce:	4b42      	ldr	r3, [pc, #264]	; (8000ed8 <send_DHCP_DISCOVER+0x170>)
 8000dd0:	681a      	ldr	r2, [r3, #0]
 8000dd2:	88bb      	ldrh	r3, [r7, #4]
 8000dd4:	1c59      	adds	r1, r3, #1
 8000dd6:	80b9      	strh	r1, [r7, #4]
 8000dd8:	4413      	add	r3, r2
 8000dda:	2201      	movs	r2, #1
 8000ddc:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	
	// Client identifier
	pDHCPMSG->OPT[k++] = dhcpClientIdentifier;
 8000de0:	4b3d      	ldr	r3, [pc, #244]	; (8000ed8 <send_DHCP_DISCOVER+0x170>)
 8000de2:	681a      	ldr	r2, [r3, #0]
 8000de4:	88bb      	ldrh	r3, [r7, #4]
 8000de6:	1c59      	adds	r1, r3, #1
 8000de8:	80b9      	strh	r1, [r7, #4]
 8000dea:	4413      	add	r3, r2
 8000dec:	223d      	movs	r2, #61	; 0x3d
 8000dee:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = 0x07;
 8000df2:	4b39      	ldr	r3, [pc, #228]	; (8000ed8 <send_DHCP_DISCOVER+0x170>)
 8000df4:	681a      	ldr	r2, [r3, #0]
 8000df6:	88bb      	ldrh	r3, [r7, #4]
 8000df8:	1c59      	adds	r1, r3, #1
 8000dfa:	80b9      	strh	r1, [r7, #4]
 8000dfc:	4413      	add	r3, r2
 8000dfe:	2207      	movs	r2, #7
 8000e00:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = 0x01;
 8000e04:	4b34      	ldr	r3, [pc, #208]	; (8000ed8 <send_DHCP_DISCOVER+0x170>)
 8000e06:	681a      	ldr	r2, [r3, #0]
 8000e08:	88bb      	ldrh	r3, [r7, #4]
 8000e0a:	1c59      	adds	r1, r3, #1
 8000e0c:	80b9      	strh	r1, [r7, #4]
 8000e0e:	4413      	add	r3, r2
 8000e10:	2201      	movs	r2, #1
 8000e12:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[0];
 8000e16:	4b30      	ldr	r3, [pc, #192]	; (8000ed8 <send_DHCP_DISCOVER+0x170>)
 8000e18:	681a      	ldr	r2, [r3, #0]
 8000e1a:	88bb      	ldrh	r3, [r7, #4]
 8000e1c:	1c59      	adds	r1, r3, #1
 8000e1e:	80b9      	strh	r1, [r7, #4]
 8000e20:	4618      	mov	r0, r3
 8000e22:	4b2e      	ldr	r3, [pc, #184]	; (8000edc <send_DHCP_DISCOVER+0x174>)
 8000e24:	7819      	ldrb	r1, [r3, #0]
 8000e26:	1813      	adds	r3, r2, r0
 8000e28:	460a      	mov	r2, r1
 8000e2a:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[1];
 8000e2e:	4b2a      	ldr	r3, [pc, #168]	; (8000ed8 <send_DHCP_DISCOVER+0x170>)
 8000e30:	681a      	ldr	r2, [r3, #0]
 8000e32:	88bb      	ldrh	r3, [r7, #4]
 8000e34:	1c59      	adds	r1, r3, #1
 8000e36:	80b9      	strh	r1, [r7, #4]
 8000e38:	4618      	mov	r0, r3
 8000e3a:	4b28      	ldr	r3, [pc, #160]	; (8000edc <send_DHCP_DISCOVER+0x174>)
 8000e3c:	7859      	ldrb	r1, [r3, #1]
 8000e3e:	1813      	adds	r3, r2, r0
 8000e40:	460a      	mov	r2, r1
 8000e42:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[2];
 8000e46:	4b24      	ldr	r3, [pc, #144]	; (8000ed8 <send_DHCP_DISCOVER+0x170>)
 8000e48:	681a      	ldr	r2, [r3, #0]
 8000e4a:	88bb      	ldrh	r3, [r7, #4]
 8000e4c:	1c59      	adds	r1, r3, #1
 8000e4e:	80b9      	strh	r1, [r7, #4]
 8000e50:	4618      	mov	r0, r3
 8000e52:	4b22      	ldr	r3, [pc, #136]	; (8000edc <send_DHCP_DISCOVER+0x174>)
 8000e54:	7899      	ldrb	r1, [r3, #2]
 8000e56:	1813      	adds	r3, r2, r0
 8000e58:	460a      	mov	r2, r1
 8000e5a:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[3];
 8000e5e:	4b1e      	ldr	r3, [pc, #120]	; (8000ed8 <send_DHCP_DISCOVER+0x170>)
 8000e60:	681a      	ldr	r2, [r3, #0]
 8000e62:	88bb      	ldrh	r3, [r7, #4]
 8000e64:	1c59      	adds	r1, r3, #1
 8000e66:	80b9      	strh	r1, [r7, #4]
 8000e68:	4618      	mov	r0, r3
 8000e6a:	4b1c      	ldr	r3, [pc, #112]	; (8000edc <send_DHCP_DISCOVER+0x174>)
 8000e6c:	78d9      	ldrb	r1, [r3, #3]
 8000e6e:	1813      	adds	r3, r2, r0
 8000e70:	460a      	mov	r2, r1
 8000e72:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[4];
 8000e76:	4b18      	ldr	r3, [pc, #96]	; (8000ed8 <send_DHCP_DISCOVER+0x170>)
 8000e78:	681a      	ldr	r2, [r3, #0]
 8000e7a:	88bb      	ldrh	r3, [r7, #4]
 8000e7c:	1c59      	adds	r1, r3, #1
 8000e7e:	80b9      	strh	r1, [r7, #4]
 8000e80:	4618      	mov	r0, r3
 8000e82:	4b16      	ldr	r3, [pc, #88]	; (8000edc <send_DHCP_DISCOVER+0x174>)
 8000e84:	7919      	ldrb	r1, [r3, #4]
 8000e86:	1813      	adds	r3, r2, r0
 8000e88:	460a      	mov	r2, r1
 8000e8a:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[5];
 8000e8e:	4b12      	ldr	r3, [pc, #72]	; (8000ed8 <send_DHCP_DISCOVER+0x170>)
 8000e90:	681a      	ldr	r2, [r3, #0]
 8000e92:	88bb      	ldrh	r3, [r7, #4]
 8000e94:	1c59      	adds	r1, r3, #1
 8000e96:	80b9      	strh	r1, [r7, #4]
 8000e98:	4618      	mov	r0, r3
 8000e9a:	4b10      	ldr	r3, [pc, #64]	; (8000edc <send_DHCP_DISCOVER+0x174>)
 8000e9c:	7959      	ldrb	r1, [r3, #5]
 8000e9e:	1813      	adds	r3, r2, r0
 8000ea0:	460a      	mov	r2, r1
 8000ea2:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	
	// host name
	pDHCPMSG->OPT[k++] = hostName;
 8000ea6:	4b0c      	ldr	r3, [pc, #48]	; (8000ed8 <send_DHCP_DISCOVER+0x170>)
 8000ea8:	681a      	ldr	r2, [r3, #0]
 8000eaa:	88bb      	ldrh	r3, [r7, #4]
 8000eac:	1c59      	adds	r1, r3, #1
 8000eae:	80b9      	strh	r1, [r7, #4]
 8000eb0:	4413      	add	r3, r2
 8000eb2:	220c      	movs	r2, #12
 8000eb4:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = 0;          // fill zero length of hostname 
 8000eb8:	4b07      	ldr	r3, [pc, #28]	; (8000ed8 <send_DHCP_DISCOVER+0x170>)
 8000eba:	681a      	ldr	r2, [r3, #0]
 8000ebc:	88bb      	ldrh	r3, [r7, #4]
 8000ebe:	1c59      	adds	r1, r3, #1
 8000ec0:	80b9      	strh	r1, [r7, #4]
 8000ec2:	4413      	add	r3, r2
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	for(i = 0 ; HOST_NAME[i] != 0; i++)
 8000eca:	2300      	movs	r3, #0
 8000ecc:	80fb      	strh	r3, [r7, #6]
 8000ece:	e017      	b.n	8000f00 <send_DHCP_DISCOVER+0x198>
 8000ed0:	20000308 	.word	0x20000308
 8000ed4:	20000304 	.word	0x20000304
 8000ed8:	2000030c 	.word	0x2000030c
 8000edc:	200002f8 	.word	0x200002f8
   	pDHCPMSG->OPT[k++] = HOST_NAME[i];
 8000ee0:	88f9      	ldrh	r1, [r7, #6]
 8000ee2:	4b80      	ldr	r3, [pc, #512]	; (80010e4 <send_DHCP_DISCOVER+0x37c>)
 8000ee4:	681a      	ldr	r2, [r3, #0]
 8000ee6:	88bb      	ldrh	r3, [r7, #4]
 8000ee8:	1c58      	adds	r0, r3, #1
 8000eea:	80b8      	strh	r0, [r7, #4]
 8000eec:	4618      	mov	r0, r3
 8000eee:	4b7e      	ldr	r3, [pc, #504]	; (80010e8 <send_DHCP_DISCOVER+0x380>)
 8000ef0:	5c59      	ldrb	r1, [r3, r1]
 8000ef2:	1813      	adds	r3, r2, r0
 8000ef4:	460a      	mov	r2, r1
 8000ef6:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	for(i = 0 ; HOST_NAME[i] != 0; i++)
 8000efa:	88fb      	ldrh	r3, [r7, #6]
 8000efc:	3301      	adds	r3, #1
 8000efe:	80fb      	strh	r3, [r7, #6]
 8000f00:	88fb      	ldrh	r3, [r7, #6]
 8000f02:	4a79      	ldr	r2, [pc, #484]	; (80010e8 <send_DHCP_DISCOVER+0x380>)
 8000f04:	5cd3      	ldrb	r3, [r2, r3]
 8000f06:	2b00      	cmp	r3, #0
 8000f08:	d1ea      	bne.n	8000ee0 <send_DHCP_DISCOVER+0x178>
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[3] >> 4); 
 8000f0a:	4b78      	ldr	r3, [pc, #480]	; (80010ec <send_DHCP_DISCOVER+0x384>)
 8000f0c:	78db      	ldrb	r3, [r3, #3]
 8000f0e:	091b      	lsrs	r3, r3, #4
 8000f10:	b2da      	uxtb	r2, r3
 8000f12:	4b74      	ldr	r3, [pc, #464]	; (80010e4 <send_DHCP_DISCOVER+0x37c>)
 8000f14:	681c      	ldr	r4, [r3, #0]
 8000f16:	88bb      	ldrh	r3, [r7, #4]
 8000f18:	1c59      	adds	r1, r3, #1
 8000f1a:	80b9      	strh	r1, [r7, #4]
 8000f1c:	461d      	mov	r5, r3
 8000f1e:	4610      	mov	r0, r2
 8000f20:	f001 f9c6 	bl	80022b0 <NibbleToHex>
 8000f24:	4603      	mov	r3, r0
 8000f26:	461a      	mov	r2, r3
 8000f28:	1963      	adds	r3, r4, r5
 8000f2a:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[3]);
 8000f2e:	4b6f      	ldr	r3, [pc, #444]	; (80010ec <send_DHCP_DISCOVER+0x384>)
 8000f30:	78da      	ldrb	r2, [r3, #3]
 8000f32:	4b6c      	ldr	r3, [pc, #432]	; (80010e4 <send_DHCP_DISCOVER+0x37c>)
 8000f34:	681c      	ldr	r4, [r3, #0]
 8000f36:	88bb      	ldrh	r3, [r7, #4]
 8000f38:	1c59      	adds	r1, r3, #1
 8000f3a:	80b9      	strh	r1, [r7, #4]
 8000f3c:	461d      	mov	r5, r3
 8000f3e:	4610      	mov	r0, r2
 8000f40:	f001 f9b6 	bl	80022b0 <NibbleToHex>
 8000f44:	4603      	mov	r3, r0
 8000f46:	461a      	mov	r2, r3
 8000f48:	1963      	adds	r3, r4, r5
 8000f4a:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[4] >> 4); 
 8000f4e:	4b67      	ldr	r3, [pc, #412]	; (80010ec <send_DHCP_DISCOVER+0x384>)
 8000f50:	791b      	ldrb	r3, [r3, #4]
 8000f52:	091b      	lsrs	r3, r3, #4
 8000f54:	b2da      	uxtb	r2, r3
 8000f56:	4b63      	ldr	r3, [pc, #396]	; (80010e4 <send_DHCP_DISCOVER+0x37c>)
 8000f58:	681c      	ldr	r4, [r3, #0]
 8000f5a:	88bb      	ldrh	r3, [r7, #4]
 8000f5c:	1c59      	adds	r1, r3, #1
 8000f5e:	80b9      	strh	r1, [r7, #4]
 8000f60:	461d      	mov	r5, r3
 8000f62:	4610      	mov	r0, r2
 8000f64:	f001 f9a4 	bl	80022b0 <NibbleToHex>
 8000f68:	4603      	mov	r3, r0
 8000f6a:	461a      	mov	r2, r3
 8000f6c:	1963      	adds	r3, r4, r5
 8000f6e:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[4]);
 8000f72:	4b5e      	ldr	r3, [pc, #376]	; (80010ec <send_DHCP_DISCOVER+0x384>)
 8000f74:	791a      	ldrb	r2, [r3, #4]
 8000f76:	4b5b      	ldr	r3, [pc, #364]	; (80010e4 <send_DHCP_DISCOVER+0x37c>)
 8000f78:	681c      	ldr	r4, [r3, #0]
 8000f7a:	88bb      	ldrh	r3, [r7, #4]
 8000f7c:	1c59      	adds	r1, r3, #1
 8000f7e:	80b9      	strh	r1, [r7, #4]
 8000f80:	461d      	mov	r5, r3
 8000f82:	4610      	mov	r0, r2
 8000f84:	f001 f994 	bl	80022b0 <NibbleToHex>
 8000f88:	4603      	mov	r3, r0
 8000f8a:	461a      	mov	r2, r3
 8000f8c:	1963      	adds	r3, r4, r5
 8000f8e:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[5] >> 4); 
 8000f92:	4b56      	ldr	r3, [pc, #344]	; (80010ec <send_DHCP_DISCOVER+0x384>)
 8000f94:	795b      	ldrb	r3, [r3, #5]
 8000f96:	091b      	lsrs	r3, r3, #4
 8000f98:	b2da      	uxtb	r2, r3
 8000f9a:	4b52      	ldr	r3, [pc, #328]	; (80010e4 <send_DHCP_DISCOVER+0x37c>)
 8000f9c:	681c      	ldr	r4, [r3, #0]
 8000f9e:	88bb      	ldrh	r3, [r7, #4]
 8000fa0:	1c59      	adds	r1, r3, #1
 8000fa2:	80b9      	strh	r1, [r7, #4]
 8000fa4:	461d      	mov	r5, r3
 8000fa6:	4610      	mov	r0, r2
 8000fa8:	f001 f982 	bl	80022b0 <NibbleToHex>
 8000fac:	4603      	mov	r3, r0
 8000fae:	461a      	mov	r2, r3
 8000fb0:	1963      	adds	r3, r4, r5
 8000fb2:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[5]);
 8000fb6:	4b4d      	ldr	r3, [pc, #308]	; (80010ec <send_DHCP_DISCOVER+0x384>)
 8000fb8:	795a      	ldrb	r2, [r3, #5]
 8000fba:	4b4a      	ldr	r3, [pc, #296]	; (80010e4 <send_DHCP_DISCOVER+0x37c>)
 8000fbc:	681c      	ldr	r4, [r3, #0]
 8000fbe:	88bb      	ldrh	r3, [r7, #4]
 8000fc0:	1c59      	adds	r1, r3, #1
 8000fc2:	80b9      	strh	r1, [r7, #4]
 8000fc4:	461d      	mov	r5, r3
 8000fc6:	4610      	mov	r0, r2
 8000fc8:	f001 f972 	bl	80022b0 <NibbleToHex>
 8000fcc:	4603      	mov	r3, r0
 8000fce:	461a      	mov	r2, r3
 8000fd0:	1963      	adds	r3, r4, r5
 8000fd2:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k - (i+6+1)] = i+6; // length of hostname
 8000fd6:	88fb      	ldrh	r3, [r7, #6]
 8000fd8:	b2d9      	uxtb	r1, r3
 8000fda:	4b42      	ldr	r3, [pc, #264]	; (80010e4 <send_DHCP_DISCOVER+0x37c>)
 8000fdc:	681a      	ldr	r2, [r3, #0]
 8000fde:	88b8      	ldrh	r0, [r7, #4]
 8000fe0:	88fb      	ldrh	r3, [r7, #6]
 8000fe2:	3307      	adds	r3, #7
 8000fe4:	1ac3      	subs	r3, r0, r3
 8000fe6:	3106      	adds	r1, #6
 8000fe8:	b2c9      	uxtb	r1, r1
 8000fea:	4413      	add	r3, r2
 8000fec:	460a      	mov	r2, r1
 8000fee:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec

	pDHCPMSG->OPT[k++] = dhcpParamRequest;
 8000ff2:	4b3c      	ldr	r3, [pc, #240]	; (80010e4 <send_DHCP_DISCOVER+0x37c>)
 8000ff4:	681a      	ldr	r2, [r3, #0]
 8000ff6:	88bb      	ldrh	r3, [r7, #4]
 8000ff8:	1c59      	adds	r1, r3, #1
 8000ffa:	80b9      	strh	r1, [r7, #4]
 8000ffc:	4413      	add	r3, r2
 8000ffe:	2237      	movs	r2, #55	; 0x37
 8001000:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = 0x06;	// length of request
 8001004:	4b37      	ldr	r3, [pc, #220]	; (80010e4 <send_DHCP_DISCOVER+0x37c>)
 8001006:	681a      	ldr	r2, [r3, #0]
 8001008:	88bb      	ldrh	r3, [r7, #4]
 800100a:	1c59      	adds	r1, r3, #1
 800100c:	80b9      	strh	r1, [r7, #4]
 800100e:	4413      	add	r3, r2
 8001010:	2206      	movs	r2, #6
 8001012:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = subnetMask;
 8001016:	4b33      	ldr	r3, [pc, #204]	; (80010e4 <send_DHCP_DISCOVER+0x37c>)
 8001018:	681a      	ldr	r2, [r3, #0]
 800101a:	88bb      	ldrh	r3, [r7, #4]
 800101c:	1c59      	adds	r1, r3, #1
 800101e:	80b9      	strh	r1, [r7, #4]
 8001020:	4413      	add	r3, r2
 8001022:	2201      	movs	r2, #1
 8001024:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = routersOnSubnet;
 8001028:	4b2e      	ldr	r3, [pc, #184]	; (80010e4 <send_DHCP_DISCOVER+0x37c>)
 800102a:	681a      	ldr	r2, [r3, #0]
 800102c:	88bb      	ldrh	r3, [r7, #4]
 800102e:	1c59      	adds	r1, r3, #1
 8001030:	80b9      	strh	r1, [r7, #4]
 8001032:	4413      	add	r3, r2
 8001034:	2203      	movs	r2, #3
 8001036:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = dns;
 800103a:	4b2a      	ldr	r3, [pc, #168]	; (80010e4 <send_DHCP_DISCOVER+0x37c>)
 800103c:	681a      	ldr	r2, [r3, #0]
 800103e:	88bb      	ldrh	r3, [r7, #4]
 8001040:	1c59      	adds	r1, r3, #1
 8001042:	80b9      	strh	r1, [r7, #4]
 8001044:	4413      	add	r3, r2
 8001046:	2206      	movs	r2, #6
 8001048:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = domainName;
 800104c:	4b25      	ldr	r3, [pc, #148]	; (80010e4 <send_DHCP_DISCOVER+0x37c>)
 800104e:	681a      	ldr	r2, [r3, #0]
 8001050:	88bb      	ldrh	r3, [r7, #4]
 8001052:	1c59      	adds	r1, r3, #1
 8001054:	80b9      	strh	r1, [r7, #4]
 8001056:	4413      	add	r3, r2
 8001058:	220f      	movs	r2, #15
 800105a:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = dhcpT1value;
 800105e:	4b21      	ldr	r3, [pc, #132]	; (80010e4 <send_DHCP_DISCOVER+0x37c>)
 8001060:	681a      	ldr	r2, [r3, #0]
 8001062:	88bb      	ldrh	r3, [r7, #4]
 8001064:	1c59      	adds	r1, r3, #1
 8001066:	80b9      	strh	r1, [r7, #4]
 8001068:	4413      	add	r3, r2
 800106a:	223a      	movs	r2, #58	; 0x3a
 800106c:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = dhcpT2value;
 8001070:	4b1c      	ldr	r3, [pc, #112]	; (80010e4 <send_DHCP_DISCOVER+0x37c>)
 8001072:	681a      	ldr	r2, [r3, #0]
 8001074:	88bb      	ldrh	r3, [r7, #4]
 8001076:	1c59      	adds	r1, r3, #1
 8001078:	80b9      	strh	r1, [r7, #4]
 800107a:	4413      	add	r3, r2
 800107c:	223b      	movs	r2, #59	; 0x3b
 800107e:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = endOption;
 8001082:	4b18      	ldr	r3, [pc, #96]	; (80010e4 <send_DHCP_DISCOVER+0x37c>)
 8001084:	681a      	ldr	r2, [r3, #0]
 8001086:	88bb      	ldrh	r3, [r7, #4]
 8001088:	1c59      	adds	r1, r3, #1
 800108a:	80b9      	strh	r1, [r7, #4]
 800108c:	4413      	add	r3, r2
 800108e:	22ff      	movs	r2, #255	; 0xff
 8001090:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec

	for (i = k; i < OPT_SIZE; i++) pDHCPMSG->OPT[i] = 0;
 8001094:	88bb      	ldrh	r3, [r7, #4]
 8001096:	80fb      	strh	r3, [r7, #6]
 8001098:	e009      	b.n	80010ae <send_DHCP_DISCOVER+0x346>
 800109a:	4b12      	ldr	r3, [pc, #72]	; (80010e4 <send_DHCP_DISCOVER+0x37c>)
 800109c:	681a      	ldr	r2, [r3, #0]
 800109e:	88fb      	ldrh	r3, [r7, #6]
 80010a0:	4413      	add	r3, r2
 80010a2:	2200      	movs	r2, #0
 80010a4:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
 80010a8:	88fb      	ldrh	r3, [r7, #6]
 80010aa:	3301      	adds	r3, #1
 80010ac:	80fb      	strh	r3, [r7, #6]
 80010ae:	88fb      	ldrh	r3, [r7, #6]
 80010b0:	f5b3 7f9c 	cmp.w	r3, #312	; 0x138
 80010b4:	d3f1      	bcc.n	800109a <send_DHCP_DISCOVER+0x332>

	// send broadcasting packet
	ip[0] = 255;
 80010b6:	23ff      	movs	r3, #255	; 0xff
 80010b8:	703b      	strb	r3, [r7, #0]
	ip[1] = 255;
 80010ba:	23ff      	movs	r3, #255	; 0xff
 80010bc:	707b      	strb	r3, [r7, #1]
	ip[2] = 255;
 80010be:	23ff      	movs	r3, #255	; 0xff
 80010c0:	70bb      	strb	r3, [r7, #2]
	ip[3] = 255;
 80010c2:	23ff      	movs	r3, #255	; 0xff
 80010c4:	70fb      	strb	r3, [r7, #3]

#ifdef _DHCP_DEBUG_
	printf("> Send DHCP_DISCOVER\r\n");
#endif

	sendto(DHCP_SOCKET, (uint8_t *)pDHCPMSG, RIP_MSG_SIZE, ip, DHCP_SERVER_PORT);
 80010c6:	4b0a      	ldr	r3, [pc, #40]	; (80010f0 <send_DHCP_DISCOVER+0x388>)
 80010c8:	7818      	ldrb	r0, [r3, #0]
 80010ca:	4b06      	ldr	r3, [pc, #24]	; (80010e4 <send_DHCP_DISCOVER+0x37c>)
 80010cc:	6819      	ldr	r1, [r3, #0]
 80010ce:	463b      	mov	r3, r7
 80010d0:	2243      	movs	r2, #67	; 0x43
 80010d2:	9200      	str	r2, [sp, #0]
 80010d4:	f44f 7209 	mov.w	r2, #548	; 0x224
 80010d8:	f003 fa3e 	bl	8004558 <sendto>
}
 80010dc:	bf00      	nop
 80010de:	3708      	adds	r7, #8
 80010e0:	46bd      	mov	sp, r7
 80010e2:	bdb0      	pop	{r4, r5, r7, pc}
 80010e4:	2000030c 	.word	0x2000030c
 80010e8:	20000008 	.word	0x20000008
 80010ec:	200002f8 	.word	0x200002f8
 80010f0:	20000310 	.word	0x20000310

080010f4 <send_DHCP_REQUEST>:

/* SEND DHCP REQUEST */
void send_DHCP_REQUEST(void)
{
 80010f4:	b5b0      	push	{r4, r5, r7, lr}
 80010f6:	b086      	sub	sp, #24
 80010f8:	af02      	add	r7, sp, #8
	int i;
	uint8_t ip[4];
	uint16_t k = 0;
 80010fa:	2300      	movs	r3, #0
 80010fc:	817b      	strh	r3, [r7, #10]

   makeDHCPMSG();
 80010fe:	f7ff fd3d 	bl	8000b7c <makeDHCPMSG>

   if(dhcp_state == STATE_DHCP_LEASED || dhcp_state == STATE_DHCP_REREQUEST)
 8001102:	4b1b      	ldr	r3, [pc, #108]	; (8001170 <send_DHCP_REQUEST+0x7c>)
 8001104:	f993 3000 	ldrsb.w	r3, [r3]
 8001108:	2b03      	cmp	r3, #3
 800110a:	d004      	beq.n	8001116 <send_DHCP_REQUEST+0x22>
 800110c:	4b18      	ldr	r3, [pc, #96]	; (8001170 <send_DHCP_REQUEST+0x7c>)
 800110e:	f993 3000 	ldrsb.w	r3, [r3]
 8001112:	2b04      	cmp	r3, #4
 8001114:	d134      	bne.n	8001180 <send_DHCP_REQUEST+0x8c>
   {
   	*((uint8_t*)(&pDHCPMSG->flags))   = ((DHCP_FLAGSUNICAST & 0xFF00)>> 8);
 8001116:	4b17      	ldr	r3, [pc, #92]	; (8001174 <send_DHCP_REQUEST+0x80>)
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	330a      	adds	r3, #10
 800111c:	2200      	movs	r2, #0
 800111e:	701a      	strb	r2, [r3, #0]
   	*((uint8_t*)(&pDHCPMSG->flags)+1) = (DHCP_FLAGSUNICAST & 0x00FF);
 8001120:	4b14      	ldr	r3, [pc, #80]	; (8001174 <send_DHCP_REQUEST+0x80>)
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	330a      	adds	r3, #10
 8001126:	3301      	adds	r3, #1
 8001128:	2200      	movs	r2, #0
 800112a:	701a      	strb	r2, [r3, #0]
   	pDHCPMSG->ciaddr[0] = DHCP_allocated_ip[0];
 800112c:	4b11      	ldr	r3, [pc, #68]	; (8001174 <send_DHCP_REQUEST+0x80>)
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	4a11      	ldr	r2, [pc, #68]	; (8001178 <send_DHCP_REQUEST+0x84>)
 8001132:	7812      	ldrb	r2, [r2, #0]
 8001134:	731a      	strb	r2, [r3, #12]
   	pDHCPMSG->ciaddr[1] = DHCP_allocated_ip[1];
 8001136:	4b0f      	ldr	r3, [pc, #60]	; (8001174 <send_DHCP_REQUEST+0x80>)
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	4a0f      	ldr	r2, [pc, #60]	; (8001178 <send_DHCP_REQUEST+0x84>)
 800113c:	7852      	ldrb	r2, [r2, #1]
 800113e:	735a      	strb	r2, [r3, #13]
   	pDHCPMSG->ciaddr[2] = DHCP_allocated_ip[2];
 8001140:	4b0c      	ldr	r3, [pc, #48]	; (8001174 <send_DHCP_REQUEST+0x80>)
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	4a0c      	ldr	r2, [pc, #48]	; (8001178 <send_DHCP_REQUEST+0x84>)
 8001146:	7892      	ldrb	r2, [r2, #2]
 8001148:	739a      	strb	r2, [r3, #14]
   	pDHCPMSG->ciaddr[3] = DHCP_allocated_ip[3];
 800114a:	4b0a      	ldr	r3, [pc, #40]	; (8001174 <send_DHCP_REQUEST+0x80>)
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	4a0a      	ldr	r2, [pc, #40]	; (8001178 <send_DHCP_REQUEST+0x84>)
 8001150:	78d2      	ldrb	r2, [r2, #3]
 8001152:	73da      	strb	r2, [r3, #15]
   	ip[0] = DHCP_SIP[0];
 8001154:	4b09      	ldr	r3, [pc, #36]	; (800117c <send_DHCP_REQUEST+0x88>)
 8001156:	781b      	ldrb	r3, [r3, #0]
 8001158:	713b      	strb	r3, [r7, #4]
   	ip[1] = DHCP_SIP[1];
 800115a:	4b08      	ldr	r3, [pc, #32]	; (800117c <send_DHCP_REQUEST+0x88>)
 800115c:	785b      	ldrb	r3, [r3, #1]
 800115e:	717b      	strb	r3, [r7, #5]
   	ip[2] = DHCP_SIP[2];
 8001160:	4b06      	ldr	r3, [pc, #24]	; (800117c <send_DHCP_REQUEST+0x88>)
 8001162:	789b      	ldrb	r3, [r3, #2]
 8001164:	71bb      	strb	r3, [r7, #6]
   	ip[3] = DHCP_SIP[3];   	   	   	
 8001166:	4b05      	ldr	r3, [pc, #20]	; (800117c <send_DHCP_REQUEST+0x88>)
 8001168:	78db      	ldrb	r3, [r3, #3]
 800116a:	71fb      	strb	r3, [r7, #7]
 800116c:	e010      	b.n	8001190 <send_DHCP_REQUEST+0x9c>
 800116e:	bf00      	nop
 8001170:	20000258 	.word	0x20000258
 8001174:	2000030c 	.word	0x2000030c
 8001178:	20000248 	.word	0x20000248
 800117c:	20000308 	.word	0x20000308
   }
   else
   {
   	ip[0] = 255;
 8001180:	23ff      	movs	r3, #255	; 0xff
 8001182:	713b      	strb	r3, [r7, #4]
   	ip[1] = 255;
 8001184:	23ff      	movs	r3, #255	; 0xff
 8001186:	717b      	strb	r3, [r7, #5]
   	ip[2] = 255;
 8001188:	23ff      	movs	r3, #255	; 0xff
 800118a:	71bb      	strb	r3, [r7, #6]
   	ip[3] = 255;   	   	   	
 800118c:	23ff      	movs	r3, #255	; 0xff
 800118e:	71fb      	strb	r3, [r7, #7]
   }
   
   k = 4;      // because MAGIC_COOKIE already made by makeDHCPMSG()
 8001190:	2304      	movs	r3, #4
 8001192:	817b      	strh	r3, [r7, #10]
	
	// Option Request Param.
	pDHCPMSG->OPT[k++] = dhcpMessageType;
 8001194:	4b8d      	ldr	r3, [pc, #564]	; (80013cc <send_DHCP_REQUEST+0x2d8>)
 8001196:	681a      	ldr	r2, [r3, #0]
 8001198:	897b      	ldrh	r3, [r7, #10]
 800119a:	1c59      	adds	r1, r3, #1
 800119c:	8179      	strh	r1, [r7, #10]
 800119e:	4413      	add	r3, r2
 80011a0:	2235      	movs	r2, #53	; 0x35
 80011a2:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = 0x01;
 80011a6:	4b89      	ldr	r3, [pc, #548]	; (80013cc <send_DHCP_REQUEST+0x2d8>)
 80011a8:	681a      	ldr	r2, [r3, #0]
 80011aa:	897b      	ldrh	r3, [r7, #10]
 80011ac:	1c59      	adds	r1, r3, #1
 80011ae:	8179      	strh	r1, [r7, #10]
 80011b0:	4413      	add	r3, r2
 80011b2:	2201      	movs	r2, #1
 80011b4:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_REQUEST;
 80011b8:	4b84      	ldr	r3, [pc, #528]	; (80013cc <send_DHCP_REQUEST+0x2d8>)
 80011ba:	681a      	ldr	r2, [r3, #0]
 80011bc:	897b      	ldrh	r3, [r7, #10]
 80011be:	1c59      	adds	r1, r3, #1
 80011c0:	8179      	strh	r1, [r7, #10]
 80011c2:	4413      	add	r3, r2
 80011c4:	2203      	movs	r2, #3
 80011c6:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec

	pDHCPMSG->OPT[k++] = dhcpClientIdentifier;
 80011ca:	4b80      	ldr	r3, [pc, #512]	; (80013cc <send_DHCP_REQUEST+0x2d8>)
 80011cc:	681a      	ldr	r2, [r3, #0]
 80011ce:	897b      	ldrh	r3, [r7, #10]
 80011d0:	1c59      	adds	r1, r3, #1
 80011d2:	8179      	strh	r1, [r7, #10]
 80011d4:	4413      	add	r3, r2
 80011d6:	223d      	movs	r2, #61	; 0x3d
 80011d8:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = 0x07;
 80011dc:	4b7b      	ldr	r3, [pc, #492]	; (80013cc <send_DHCP_REQUEST+0x2d8>)
 80011de:	681a      	ldr	r2, [r3, #0]
 80011e0:	897b      	ldrh	r3, [r7, #10]
 80011e2:	1c59      	adds	r1, r3, #1
 80011e4:	8179      	strh	r1, [r7, #10]
 80011e6:	4413      	add	r3, r2
 80011e8:	2207      	movs	r2, #7
 80011ea:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = 0x01;
 80011ee:	4b77      	ldr	r3, [pc, #476]	; (80013cc <send_DHCP_REQUEST+0x2d8>)
 80011f0:	681a      	ldr	r2, [r3, #0]
 80011f2:	897b      	ldrh	r3, [r7, #10]
 80011f4:	1c59      	adds	r1, r3, #1
 80011f6:	8179      	strh	r1, [r7, #10]
 80011f8:	4413      	add	r3, r2
 80011fa:	2201      	movs	r2, #1
 80011fc:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[0];
 8001200:	4b72      	ldr	r3, [pc, #456]	; (80013cc <send_DHCP_REQUEST+0x2d8>)
 8001202:	681a      	ldr	r2, [r3, #0]
 8001204:	897b      	ldrh	r3, [r7, #10]
 8001206:	1c59      	adds	r1, r3, #1
 8001208:	8179      	strh	r1, [r7, #10]
 800120a:	4618      	mov	r0, r3
 800120c:	4b70      	ldr	r3, [pc, #448]	; (80013d0 <send_DHCP_REQUEST+0x2dc>)
 800120e:	7819      	ldrb	r1, [r3, #0]
 8001210:	1813      	adds	r3, r2, r0
 8001212:	460a      	mov	r2, r1
 8001214:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[1];
 8001218:	4b6c      	ldr	r3, [pc, #432]	; (80013cc <send_DHCP_REQUEST+0x2d8>)
 800121a:	681a      	ldr	r2, [r3, #0]
 800121c:	897b      	ldrh	r3, [r7, #10]
 800121e:	1c59      	adds	r1, r3, #1
 8001220:	8179      	strh	r1, [r7, #10]
 8001222:	4618      	mov	r0, r3
 8001224:	4b6a      	ldr	r3, [pc, #424]	; (80013d0 <send_DHCP_REQUEST+0x2dc>)
 8001226:	7859      	ldrb	r1, [r3, #1]
 8001228:	1813      	adds	r3, r2, r0
 800122a:	460a      	mov	r2, r1
 800122c:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[2];
 8001230:	4b66      	ldr	r3, [pc, #408]	; (80013cc <send_DHCP_REQUEST+0x2d8>)
 8001232:	681a      	ldr	r2, [r3, #0]
 8001234:	897b      	ldrh	r3, [r7, #10]
 8001236:	1c59      	adds	r1, r3, #1
 8001238:	8179      	strh	r1, [r7, #10]
 800123a:	4618      	mov	r0, r3
 800123c:	4b64      	ldr	r3, [pc, #400]	; (80013d0 <send_DHCP_REQUEST+0x2dc>)
 800123e:	7899      	ldrb	r1, [r3, #2]
 8001240:	1813      	adds	r3, r2, r0
 8001242:	460a      	mov	r2, r1
 8001244:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[3];
 8001248:	4b60      	ldr	r3, [pc, #384]	; (80013cc <send_DHCP_REQUEST+0x2d8>)
 800124a:	681a      	ldr	r2, [r3, #0]
 800124c:	897b      	ldrh	r3, [r7, #10]
 800124e:	1c59      	adds	r1, r3, #1
 8001250:	8179      	strh	r1, [r7, #10]
 8001252:	4618      	mov	r0, r3
 8001254:	4b5e      	ldr	r3, [pc, #376]	; (80013d0 <send_DHCP_REQUEST+0x2dc>)
 8001256:	78d9      	ldrb	r1, [r3, #3]
 8001258:	1813      	adds	r3, r2, r0
 800125a:	460a      	mov	r2, r1
 800125c:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[4];
 8001260:	4b5a      	ldr	r3, [pc, #360]	; (80013cc <send_DHCP_REQUEST+0x2d8>)
 8001262:	681a      	ldr	r2, [r3, #0]
 8001264:	897b      	ldrh	r3, [r7, #10]
 8001266:	1c59      	adds	r1, r3, #1
 8001268:	8179      	strh	r1, [r7, #10]
 800126a:	4618      	mov	r0, r3
 800126c:	4b58      	ldr	r3, [pc, #352]	; (80013d0 <send_DHCP_REQUEST+0x2dc>)
 800126e:	7919      	ldrb	r1, [r3, #4]
 8001270:	1813      	adds	r3, r2, r0
 8001272:	460a      	mov	r2, r1
 8001274:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[5];
 8001278:	4b54      	ldr	r3, [pc, #336]	; (80013cc <send_DHCP_REQUEST+0x2d8>)
 800127a:	681a      	ldr	r2, [r3, #0]
 800127c:	897b      	ldrh	r3, [r7, #10]
 800127e:	1c59      	adds	r1, r3, #1
 8001280:	8179      	strh	r1, [r7, #10]
 8001282:	4618      	mov	r0, r3
 8001284:	4b52      	ldr	r3, [pc, #328]	; (80013d0 <send_DHCP_REQUEST+0x2dc>)
 8001286:	7959      	ldrb	r1, [r3, #5]
 8001288:	1813      	adds	r3, r2, r0
 800128a:	460a      	mov	r2, r1
 800128c:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec

   if(ip[3] == 255)  // if(dchp_state == STATE_DHCP_LEASED || dchp_state == DHCP_REREQUEST_STATE)
 8001290:	79fb      	ldrb	r3, [r7, #7]
 8001292:	2bff      	cmp	r3, #255	; 0xff
 8001294:	f040 8084 	bne.w	80013a0 <send_DHCP_REQUEST+0x2ac>
   {
		pDHCPMSG->OPT[k++] = dhcpRequestedIPaddr;
 8001298:	4b4c      	ldr	r3, [pc, #304]	; (80013cc <send_DHCP_REQUEST+0x2d8>)
 800129a:	681a      	ldr	r2, [r3, #0]
 800129c:	897b      	ldrh	r3, [r7, #10]
 800129e:	1c59      	adds	r1, r3, #1
 80012a0:	8179      	strh	r1, [r7, #10]
 80012a2:	4413      	add	r3, r2
 80012a4:	2232      	movs	r2, #50	; 0x32
 80012a6:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
		pDHCPMSG->OPT[k++] = 0x04;
 80012aa:	4b48      	ldr	r3, [pc, #288]	; (80013cc <send_DHCP_REQUEST+0x2d8>)
 80012ac:	681a      	ldr	r2, [r3, #0]
 80012ae:	897b      	ldrh	r3, [r7, #10]
 80012b0:	1c59      	adds	r1, r3, #1
 80012b2:	8179      	strh	r1, [r7, #10]
 80012b4:	4413      	add	r3, r2
 80012b6:	2204      	movs	r2, #4
 80012b8:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
		pDHCPMSG->OPT[k++] = DHCP_allocated_ip[0];
 80012bc:	4b43      	ldr	r3, [pc, #268]	; (80013cc <send_DHCP_REQUEST+0x2d8>)
 80012be:	681a      	ldr	r2, [r3, #0]
 80012c0:	897b      	ldrh	r3, [r7, #10]
 80012c2:	1c59      	adds	r1, r3, #1
 80012c4:	8179      	strh	r1, [r7, #10]
 80012c6:	4618      	mov	r0, r3
 80012c8:	4b42      	ldr	r3, [pc, #264]	; (80013d4 <send_DHCP_REQUEST+0x2e0>)
 80012ca:	7819      	ldrb	r1, [r3, #0]
 80012cc:	1813      	adds	r3, r2, r0
 80012ce:	460a      	mov	r2, r1
 80012d0:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
		pDHCPMSG->OPT[k++] = DHCP_allocated_ip[1];
 80012d4:	4b3d      	ldr	r3, [pc, #244]	; (80013cc <send_DHCP_REQUEST+0x2d8>)
 80012d6:	681a      	ldr	r2, [r3, #0]
 80012d8:	897b      	ldrh	r3, [r7, #10]
 80012da:	1c59      	adds	r1, r3, #1
 80012dc:	8179      	strh	r1, [r7, #10]
 80012de:	4618      	mov	r0, r3
 80012e0:	4b3c      	ldr	r3, [pc, #240]	; (80013d4 <send_DHCP_REQUEST+0x2e0>)
 80012e2:	7859      	ldrb	r1, [r3, #1]
 80012e4:	1813      	adds	r3, r2, r0
 80012e6:	460a      	mov	r2, r1
 80012e8:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
		pDHCPMSG->OPT[k++] = DHCP_allocated_ip[2];
 80012ec:	4b37      	ldr	r3, [pc, #220]	; (80013cc <send_DHCP_REQUEST+0x2d8>)
 80012ee:	681a      	ldr	r2, [r3, #0]
 80012f0:	897b      	ldrh	r3, [r7, #10]
 80012f2:	1c59      	adds	r1, r3, #1
 80012f4:	8179      	strh	r1, [r7, #10]
 80012f6:	4618      	mov	r0, r3
 80012f8:	4b36      	ldr	r3, [pc, #216]	; (80013d4 <send_DHCP_REQUEST+0x2e0>)
 80012fa:	7899      	ldrb	r1, [r3, #2]
 80012fc:	1813      	adds	r3, r2, r0
 80012fe:	460a      	mov	r2, r1
 8001300:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
		pDHCPMSG->OPT[k++] = DHCP_allocated_ip[3];
 8001304:	4b31      	ldr	r3, [pc, #196]	; (80013cc <send_DHCP_REQUEST+0x2d8>)
 8001306:	681a      	ldr	r2, [r3, #0]
 8001308:	897b      	ldrh	r3, [r7, #10]
 800130a:	1c59      	adds	r1, r3, #1
 800130c:	8179      	strh	r1, [r7, #10]
 800130e:	4618      	mov	r0, r3
 8001310:	4b30      	ldr	r3, [pc, #192]	; (80013d4 <send_DHCP_REQUEST+0x2e0>)
 8001312:	78d9      	ldrb	r1, [r3, #3]
 8001314:	1813      	adds	r3, r2, r0
 8001316:	460a      	mov	r2, r1
 8001318:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	
		pDHCPMSG->OPT[k++] = dhcpServerIdentifier;
 800131c:	4b2b      	ldr	r3, [pc, #172]	; (80013cc <send_DHCP_REQUEST+0x2d8>)
 800131e:	681a      	ldr	r2, [r3, #0]
 8001320:	897b      	ldrh	r3, [r7, #10]
 8001322:	1c59      	adds	r1, r3, #1
 8001324:	8179      	strh	r1, [r7, #10]
 8001326:	4413      	add	r3, r2
 8001328:	2236      	movs	r2, #54	; 0x36
 800132a:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
		pDHCPMSG->OPT[k++] = 0x04;
 800132e:	4b27      	ldr	r3, [pc, #156]	; (80013cc <send_DHCP_REQUEST+0x2d8>)
 8001330:	681a      	ldr	r2, [r3, #0]
 8001332:	897b      	ldrh	r3, [r7, #10]
 8001334:	1c59      	adds	r1, r3, #1
 8001336:	8179      	strh	r1, [r7, #10]
 8001338:	4413      	add	r3, r2
 800133a:	2204      	movs	r2, #4
 800133c:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
		pDHCPMSG->OPT[k++] = DHCP_SIP[0];
 8001340:	4b22      	ldr	r3, [pc, #136]	; (80013cc <send_DHCP_REQUEST+0x2d8>)
 8001342:	681a      	ldr	r2, [r3, #0]
 8001344:	897b      	ldrh	r3, [r7, #10]
 8001346:	1c59      	adds	r1, r3, #1
 8001348:	8179      	strh	r1, [r7, #10]
 800134a:	4618      	mov	r0, r3
 800134c:	4b22      	ldr	r3, [pc, #136]	; (80013d8 <send_DHCP_REQUEST+0x2e4>)
 800134e:	7819      	ldrb	r1, [r3, #0]
 8001350:	1813      	adds	r3, r2, r0
 8001352:	460a      	mov	r2, r1
 8001354:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
		pDHCPMSG->OPT[k++] = DHCP_SIP[1];
 8001358:	4b1c      	ldr	r3, [pc, #112]	; (80013cc <send_DHCP_REQUEST+0x2d8>)
 800135a:	681a      	ldr	r2, [r3, #0]
 800135c:	897b      	ldrh	r3, [r7, #10]
 800135e:	1c59      	adds	r1, r3, #1
 8001360:	8179      	strh	r1, [r7, #10]
 8001362:	4618      	mov	r0, r3
 8001364:	4b1c      	ldr	r3, [pc, #112]	; (80013d8 <send_DHCP_REQUEST+0x2e4>)
 8001366:	7859      	ldrb	r1, [r3, #1]
 8001368:	1813      	adds	r3, r2, r0
 800136a:	460a      	mov	r2, r1
 800136c:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
		pDHCPMSG->OPT[k++] = DHCP_SIP[2];
 8001370:	4b16      	ldr	r3, [pc, #88]	; (80013cc <send_DHCP_REQUEST+0x2d8>)
 8001372:	681a      	ldr	r2, [r3, #0]
 8001374:	897b      	ldrh	r3, [r7, #10]
 8001376:	1c59      	adds	r1, r3, #1
 8001378:	8179      	strh	r1, [r7, #10]
 800137a:	4618      	mov	r0, r3
 800137c:	4b16      	ldr	r3, [pc, #88]	; (80013d8 <send_DHCP_REQUEST+0x2e4>)
 800137e:	7899      	ldrb	r1, [r3, #2]
 8001380:	1813      	adds	r3, r2, r0
 8001382:	460a      	mov	r2, r1
 8001384:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
		pDHCPMSG->OPT[k++] = DHCP_SIP[3];
 8001388:	4b10      	ldr	r3, [pc, #64]	; (80013cc <send_DHCP_REQUEST+0x2d8>)
 800138a:	681a      	ldr	r2, [r3, #0]
 800138c:	897b      	ldrh	r3, [r7, #10]
 800138e:	1c59      	adds	r1, r3, #1
 8001390:	8179      	strh	r1, [r7, #10]
 8001392:	4618      	mov	r0, r3
 8001394:	4b10      	ldr	r3, [pc, #64]	; (80013d8 <send_DHCP_REQUEST+0x2e4>)
 8001396:	78d9      	ldrb	r1, [r3, #3]
 8001398:	1813      	adds	r3, r2, r0
 800139a:	460a      	mov	r2, r1
 800139c:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	}

	// host name
	pDHCPMSG->OPT[k++] = hostName;
 80013a0:	4b0a      	ldr	r3, [pc, #40]	; (80013cc <send_DHCP_REQUEST+0x2d8>)
 80013a2:	681a      	ldr	r2, [r3, #0]
 80013a4:	897b      	ldrh	r3, [r7, #10]
 80013a6:	1c59      	adds	r1, r3, #1
 80013a8:	8179      	strh	r1, [r7, #10]
 80013aa:	4413      	add	r3, r2
 80013ac:	220c      	movs	r2, #12
 80013ae:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = 0; // length of hostname
 80013b2:	4b06      	ldr	r3, [pc, #24]	; (80013cc <send_DHCP_REQUEST+0x2d8>)
 80013b4:	681a      	ldr	r2, [r3, #0]
 80013b6:	897b      	ldrh	r3, [r7, #10]
 80013b8:	1c59      	adds	r1, r3, #1
 80013ba:	8179      	strh	r1, [r7, #10]
 80013bc:	4413      	add	r3, r2
 80013be:	2200      	movs	r2, #0
 80013c0:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	for(i = 0 ; HOST_NAME[i] != 0; i++)
 80013c4:	2300      	movs	r3, #0
 80013c6:	60fb      	str	r3, [r7, #12]
 80013c8:	e019      	b.n	80013fe <send_DHCP_REQUEST+0x30a>
 80013ca:	bf00      	nop
 80013cc:	2000030c 	.word	0x2000030c
 80013d0:	200002f8 	.word	0x200002f8
 80013d4:	20000248 	.word	0x20000248
 80013d8:	20000308 	.word	0x20000308
   	pDHCPMSG->OPT[k++] = HOST_NAME[i];
 80013dc:	4b86      	ldr	r3, [pc, #536]	; (80015f8 <send_DHCP_REQUEST+0x504>)
 80013de:	681a      	ldr	r2, [r3, #0]
 80013e0:	897b      	ldrh	r3, [r7, #10]
 80013e2:	1c59      	adds	r1, r3, #1
 80013e4:	8179      	strh	r1, [r7, #10]
 80013e6:	4618      	mov	r0, r3
 80013e8:	4984      	ldr	r1, [pc, #528]	; (80015fc <send_DHCP_REQUEST+0x508>)
 80013ea:	68fb      	ldr	r3, [r7, #12]
 80013ec:	440b      	add	r3, r1
 80013ee:	7819      	ldrb	r1, [r3, #0]
 80013f0:	1813      	adds	r3, r2, r0
 80013f2:	460a      	mov	r2, r1
 80013f4:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	for(i = 0 ; HOST_NAME[i] != 0; i++)
 80013f8:	68fb      	ldr	r3, [r7, #12]
 80013fa:	3301      	adds	r3, #1
 80013fc:	60fb      	str	r3, [r7, #12]
 80013fe:	4a7f      	ldr	r2, [pc, #508]	; (80015fc <send_DHCP_REQUEST+0x508>)
 8001400:	68fb      	ldr	r3, [r7, #12]
 8001402:	4413      	add	r3, r2
 8001404:	781b      	ldrb	r3, [r3, #0]
 8001406:	2b00      	cmp	r3, #0
 8001408:	d1e8      	bne.n	80013dc <send_DHCP_REQUEST+0x2e8>
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[3] >> 4); 
 800140a:	4b7d      	ldr	r3, [pc, #500]	; (8001600 <send_DHCP_REQUEST+0x50c>)
 800140c:	78db      	ldrb	r3, [r3, #3]
 800140e:	091b      	lsrs	r3, r3, #4
 8001410:	b2da      	uxtb	r2, r3
 8001412:	4b79      	ldr	r3, [pc, #484]	; (80015f8 <send_DHCP_REQUEST+0x504>)
 8001414:	681c      	ldr	r4, [r3, #0]
 8001416:	897b      	ldrh	r3, [r7, #10]
 8001418:	1c59      	adds	r1, r3, #1
 800141a:	8179      	strh	r1, [r7, #10]
 800141c:	461d      	mov	r5, r3
 800141e:	4610      	mov	r0, r2
 8001420:	f000 ff46 	bl	80022b0 <NibbleToHex>
 8001424:	4603      	mov	r3, r0
 8001426:	461a      	mov	r2, r3
 8001428:	1963      	adds	r3, r4, r5
 800142a:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[3]);
 800142e:	4b74      	ldr	r3, [pc, #464]	; (8001600 <send_DHCP_REQUEST+0x50c>)
 8001430:	78da      	ldrb	r2, [r3, #3]
 8001432:	4b71      	ldr	r3, [pc, #452]	; (80015f8 <send_DHCP_REQUEST+0x504>)
 8001434:	681c      	ldr	r4, [r3, #0]
 8001436:	897b      	ldrh	r3, [r7, #10]
 8001438:	1c59      	adds	r1, r3, #1
 800143a:	8179      	strh	r1, [r7, #10]
 800143c:	461d      	mov	r5, r3
 800143e:	4610      	mov	r0, r2
 8001440:	f000 ff36 	bl	80022b0 <NibbleToHex>
 8001444:	4603      	mov	r3, r0
 8001446:	461a      	mov	r2, r3
 8001448:	1963      	adds	r3, r4, r5
 800144a:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[4] >> 4); 
 800144e:	4b6c      	ldr	r3, [pc, #432]	; (8001600 <send_DHCP_REQUEST+0x50c>)
 8001450:	791b      	ldrb	r3, [r3, #4]
 8001452:	091b      	lsrs	r3, r3, #4
 8001454:	b2da      	uxtb	r2, r3
 8001456:	4b68      	ldr	r3, [pc, #416]	; (80015f8 <send_DHCP_REQUEST+0x504>)
 8001458:	681c      	ldr	r4, [r3, #0]
 800145a:	897b      	ldrh	r3, [r7, #10]
 800145c:	1c59      	adds	r1, r3, #1
 800145e:	8179      	strh	r1, [r7, #10]
 8001460:	461d      	mov	r5, r3
 8001462:	4610      	mov	r0, r2
 8001464:	f000 ff24 	bl	80022b0 <NibbleToHex>
 8001468:	4603      	mov	r3, r0
 800146a:	461a      	mov	r2, r3
 800146c:	1963      	adds	r3, r4, r5
 800146e:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[4]);
 8001472:	4b63      	ldr	r3, [pc, #396]	; (8001600 <send_DHCP_REQUEST+0x50c>)
 8001474:	791a      	ldrb	r2, [r3, #4]
 8001476:	4b60      	ldr	r3, [pc, #384]	; (80015f8 <send_DHCP_REQUEST+0x504>)
 8001478:	681c      	ldr	r4, [r3, #0]
 800147a:	897b      	ldrh	r3, [r7, #10]
 800147c:	1c59      	adds	r1, r3, #1
 800147e:	8179      	strh	r1, [r7, #10]
 8001480:	461d      	mov	r5, r3
 8001482:	4610      	mov	r0, r2
 8001484:	f000 ff14 	bl	80022b0 <NibbleToHex>
 8001488:	4603      	mov	r3, r0
 800148a:	461a      	mov	r2, r3
 800148c:	1963      	adds	r3, r4, r5
 800148e:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[5] >> 4); 
 8001492:	4b5b      	ldr	r3, [pc, #364]	; (8001600 <send_DHCP_REQUEST+0x50c>)
 8001494:	795b      	ldrb	r3, [r3, #5]
 8001496:	091b      	lsrs	r3, r3, #4
 8001498:	b2da      	uxtb	r2, r3
 800149a:	4b57      	ldr	r3, [pc, #348]	; (80015f8 <send_DHCP_REQUEST+0x504>)
 800149c:	681c      	ldr	r4, [r3, #0]
 800149e:	897b      	ldrh	r3, [r7, #10]
 80014a0:	1c59      	adds	r1, r3, #1
 80014a2:	8179      	strh	r1, [r7, #10]
 80014a4:	461d      	mov	r5, r3
 80014a6:	4610      	mov	r0, r2
 80014a8:	f000 ff02 	bl	80022b0 <NibbleToHex>
 80014ac:	4603      	mov	r3, r0
 80014ae:	461a      	mov	r2, r3
 80014b0:	1963      	adds	r3, r4, r5
 80014b2:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[5]);
 80014b6:	4b52      	ldr	r3, [pc, #328]	; (8001600 <send_DHCP_REQUEST+0x50c>)
 80014b8:	795a      	ldrb	r2, [r3, #5]
 80014ba:	4b4f      	ldr	r3, [pc, #316]	; (80015f8 <send_DHCP_REQUEST+0x504>)
 80014bc:	681c      	ldr	r4, [r3, #0]
 80014be:	897b      	ldrh	r3, [r7, #10]
 80014c0:	1c59      	adds	r1, r3, #1
 80014c2:	8179      	strh	r1, [r7, #10]
 80014c4:	461d      	mov	r5, r3
 80014c6:	4610      	mov	r0, r2
 80014c8:	f000 fef2 	bl	80022b0 <NibbleToHex>
 80014cc:	4603      	mov	r3, r0
 80014ce:	461a      	mov	r2, r3
 80014d0:	1963      	adds	r3, r4, r5
 80014d2:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k - (i+6+1)] = i+6; // length of hostname
 80014d6:	68fb      	ldr	r3, [r7, #12]
 80014d8:	b2d9      	uxtb	r1, r3
 80014da:	4b47      	ldr	r3, [pc, #284]	; (80015f8 <send_DHCP_REQUEST+0x504>)
 80014dc:	681a      	ldr	r2, [r3, #0]
 80014de:	8978      	ldrh	r0, [r7, #10]
 80014e0:	68fb      	ldr	r3, [r7, #12]
 80014e2:	3307      	adds	r3, #7
 80014e4:	1ac3      	subs	r3, r0, r3
 80014e6:	3106      	adds	r1, #6
 80014e8:	b2c9      	uxtb	r1, r1
 80014ea:	4413      	add	r3, r2
 80014ec:	460a      	mov	r2, r1
 80014ee:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	
	pDHCPMSG->OPT[k++] = dhcpParamRequest;
 80014f2:	4b41      	ldr	r3, [pc, #260]	; (80015f8 <send_DHCP_REQUEST+0x504>)
 80014f4:	681a      	ldr	r2, [r3, #0]
 80014f6:	897b      	ldrh	r3, [r7, #10]
 80014f8:	1c59      	adds	r1, r3, #1
 80014fa:	8179      	strh	r1, [r7, #10]
 80014fc:	4413      	add	r3, r2
 80014fe:	2237      	movs	r2, #55	; 0x37
 8001500:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = 0x08;
 8001504:	4b3c      	ldr	r3, [pc, #240]	; (80015f8 <send_DHCP_REQUEST+0x504>)
 8001506:	681a      	ldr	r2, [r3, #0]
 8001508:	897b      	ldrh	r3, [r7, #10]
 800150a:	1c59      	adds	r1, r3, #1
 800150c:	8179      	strh	r1, [r7, #10]
 800150e:	4413      	add	r3, r2
 8001510:	2208      	movs	r2, #8
 8001512:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = subnetMask;
 8001516:	4b38      	ldr	r3, [pc, #224]	; (80015f8 <send_DHCP_REQUEST+0x504>)
 8001518:	681a      	ldr	r2, [r3, #0]
 800151a:	897b      	ldrh	r3, [r7, #10]
 800151c:	1c59      	adds	r1, r3, #1
 800151e:	8179      	strh	r1, [r7, #10]
 8001520:	4413      	add	r3, r2
 8001522:	2201      	movs	r2, #1
 8001524:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = routersOnSubnet;
 8001528:	4b33      	ldr	r3, [pc, #204]	; (80015f8 <send_DHCP_REQUEST+0x504>)
 800152a:	681a      	ldr	r2, [r3, #0]
 800152c:	897b      	ldrh	r3, [r7, #10]
 800152e:	1c59      	adds	r1, r3, #1
 8001530:	8179      	strh	r1, [r7, #10]
 8001532:	4413      	add	r3, r2
 8001534:	2203      	movs	r2, #3
 8001536:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = dns;
 800153a:	4b2f      	ldr	r3, [pc, #188]	; (80015f8 <send_DHCP_REQUEST+0x504>)
 800153c:	681a      	ldr	r2, [r3, #0]
 800153e:	897b      	ldrh	r3, [r7, #10]
 8001540:	1c59      	adds	r1, r3, #1
 8001542:	8179      	strh	r1, [r7, #10]
 8001544:	4413      	add	r3, r2
 8001546:	2206      	movs	r2, #6
 8001548:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = domainName;
 800154c:	4b2a      	ldr	r3, [pc, #168]	; (80015f8 <send_DHCP_REQUEST+0x504>)
 800154e:	681a      	ldr	r2, [r3, #0]
 8001550:	897b      	ldrh	r3, [r7, #10]
 8001552:	1c59      	adds	r1, r3, #1
 8001554:	8179      	strh	r1, [r7, #10]
 8001556:	4413      	add	r3, r2
 8001558:	220f      	movs	r2, #15
 800155a:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = dhcpT1value;
 800155e:	4b26      	ldr	r3, [pc, #152]	; (80015f8 <send_DHCP_REQUEST+0x504>)
 8001560:	681a      	ldr	r2, [r3, #0]
 8001562:	897b      	ldrh	r3, [r7, #10]
 8001564:	1c59      	adds	r1, r3, #1
 8001566:	8179      	strh	r1, [r7, #10]
 8001568:	4413      	add	r3, r2
 800156a:	223a      	movs	r2, #58	; 0x3a
 800156c:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = dhcpT2value;
 8001570:	4b21      	ldr	r3, [pc, #132]	; (80015f8 <send_DHCP_REQUEST+0x504>)
 8001572:	681a      	ldr	r2, [r3, #0]
 8001574:	897b      	ldrh	r3, [r7, #10]
 8001576:	1c59      	adds	r1, r3, #1
 8001578:	8179      	strh	r1, [r7, #10]
 800157a:	4413      	add	r3, r2
 800157c:	223b      	movs	r2, #59	; 0x3b
 800157e:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = performRouterDiscovery;
 8001582:	4b1d      	ldr	r3, [pc, #116]	; (80015f8 <send_DHCP_REQUEST+0x504>)
 8001584:	681a      	ldr	r2, [r3, #0]
 8001586:	897b      	ldrh	r3, [r7, #10]
 8001588:	1c59      	adds	r1, r3, #1
 800158a:	8179      	strh	r1, [r7, #10]
 800158c:	4413      	add	r3, r2
 800158e:	221f      	movs	r2, #31
 8001590:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = staticRoute;
 8001594:	4b18      	ldr	r3, [pc, #96]	; (80015f8 <send_DHCP_REQUEST+0x504>)
 8001596:	681a      	ldr	r2, [r3, #0]
 8001598:	897b      	ldrh	r3, [r7, #10]
 800159a:	1c59      	adds	r1, r3, #1
 800159c:	8179      	strh	r1, [r7, #10]
 800159e:	4413      	add	r3, r2
 80015a0:	2221      	movs	r2, #33	; 0x21
 80015a2:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = endOption;
 80015a6:	4b14      	ldr	r3, [pc, #80]	; (80015f8 <send_DHCP_REQUEST+0x504>)
 80015a8:	681a      	ldr	r2, [r3, #0]
 80015aa:	897b      	ldrh	r3, [r7, #10]
 80015ac:	1c59      	adds	r1, r3, #1
 80015ae:	8179      	strh	r1, [r7, #10]
 80015b0:	4413      	add	r3, r2
 80015b2:	22ff      	movs	r2, #255	; 0xff
 80015b4:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec

	for (i = k; i < OPT_SIZE; i++) pDHCPMSG->OPT[i] = 0;
 80015b8:	897b      	ldrh	r3, [r7, #10]
 80015ba:	60fb      	str	r3, [r7, #12]
 80015bc:	e009      	b.n	80015d2 <send_DHCP_REQUEST+0x4de>
 80015be:	4b0e      	ldr	r3, [pc, #56]	; (80015f8 <send_DHCP_REQUEST+0x504>)
 80015c0:	681a      	ldr	r2, [r3, #0]
 80015c2:	68fb      	ldr	r3, [r7, #12]
 80015c4:	4413      	add	r3, r2
 80015c6:	33ec      	adds	r3, #236	; 0xec
 80015c8:	2200      	movs	r2, #0
 80015ca:	701a      	strb	r2, [r3, #0]
 80015cc:	68fb      	ldr	r3, [r7, #12]
 80015ce:	3301      	adds	r3, #1
 80015d0:	60fb      	str	r3, [r7, #12]
 80015d2:	68fb      	ldr	r3, [r7, #12]
 80015d4:	f5b3 7f9c 	cmp.w	r3, #312	; 0x138
 80015d8:	dbf1      	blt.n	80015be <send_DHCP_REQUEST+0x4ca>

#ifdef _DHCP_DEBUG_
	printf("> Send DHCP_REQUEST\r\n");
#endif
	
	sendto(DHCP_SOCKET, (uint8_t *)pDHCPMSG, RIP_MSG_SIZE, ip, DHCP_SERVER_PORT);
 80015da:	4b0a      	ldr	r3, [pc, #40]	; (8001604 <send_DHCP_REQUEST+0x510>)
 80015dc:	7818      	ldrb	r0, [r3, #0]
 80015de:	4b06      	ldr	r3, [pc, #24]	; (80015f8 <send_DHCP_REQUEST+0x504>)
 80015e0:	6819      	ldr	r1, [r3, #0]
 80015e2:	1d3b      	adds	r3, r7, #4
 80015e4:	2243      	movs	r2, #67	; 0x43
 80015e6:	9200      	str	r2, [sp, #0]
 80015e8:	f44f 7209 	mov.w	r2, #548	; 0x224
 80015ec:	f002 ffb4 	bl	8004558 <sendto>

}
 80015f0:	bf00      	nop
 80015f2:	3710      	adds	r7, #16
 80015f4:	46bd      	mov	sp, r7
 80015f6:	bdb0      	pop	{r4, r5, r7, pc}
 80015f8:	2000030c 	.word	0x2000030c
 80015fc:	20000008 	.word	0x20000008
 8001600:	200002f8 	.word	0x200002f8
 8001604:	20000310 	.word	0x20000310

08001608 <send_DHCP_DECLINE>:

/* SEND DHCP DHCPDECLINE */
void send_DHCP_DECLINE(void)
{
 8001608:	b580      	push	{r7, lr}
 800160a:	b086      	sub	sp, #24
 800160c:	af02      	add	r7, sp, #8
	int i;
	uint8_t ip[4];
	uint16_t k = 0;
 800160e:	2300      	movs	r3, #0
 8001610:	817b      	strh	r3, [r7, #10]
	
	makeDHCPMSG();
 8001612:	f7ff fab3 	bl	8000b7c <makeDHCPMSG>

   k = 4;      // because MAGIC_COOKIE already made by makeDHCPMSG()
 8001616:	2304      	movs	r3, #4
 8001618:	817b      	strh	r3, [r7, #10]
   
	*((uint8_t*)(&pDHCPMSG->flags))   = ((DHCP_FLAGSUNICAST & 0xFF00)>> 8);
 800161a:	4b9f      	ldr	r3, [pc, #636]	; (8001898 <send_DHCP_DECLINE+0x290>)
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	330a      	adds	r3, #10
 8001620:	2200      	movs	r2, #0
 8001622:	701a      	strb	r2, [r3, #0]
	*((uint8_t*)(&pDHCPMSG->flags)+1) = (DHCP_FLAGSUNICAST & 0x00FF);
 8001624:	4b9c      	ldr	r3, [pc, #624]	; (8001898 <send_DHCP_DECLINE+0x290>)
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	330a      	adds	r3, #10
 800162a:	3301      	adds	r3, #1
 800162c:	2200      	movs	r2, #0
 800162e:	701a      	strb	r2, [r3, #0]

	// Option Request Param.
	pDHCPMSG->OPT[k++] = dhcpMessageType;
 8001630:	4b99      	ldr	r3, [pc, #612]	; (8001898 <send_DHCP_DECLINE+0x290>)
 8001632:	681a      	ldr	r2, [r3, #0]
 8001634:	897b      	ldrh	r3, [r7, #10]
 8001636:	1c59      	adds	r1, r3, #1
 8001638:	8179      	strh	r1, [r7, #10]
 800163a:	4413      	add	r3, r2
 800163c:	2235      	movs	r2, #53	; 0x35
 800163e:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = 0x01;
 8001642:	4b95      	ldr	r3, [pc, #596]	; (8001898 <send_DHCP_DECLINE+0x290>)
 8001644:	681a      	ldr	r2, [r3, #0]
 8001646:	897b      	ldrh	r3, [r7, #10]
 8001648:	1c59      	adds	r1, r3, #1
 800164a:	8179      	strh	r1, [r7, #10]
 800164c:	4413      	add	r3, r2
 800164e:	2201      	movs	r2, #1
 8001650:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_DECLINE;
 8001654:	4b90      	ldr	r3, [pc, #576]	; (8001898 <send_DHCP_DECLINE+0x290>)
 8001656:	681a      	ldr	r2, [r3, #0]
 8001658:	897b      	ldrh	r3, [r7, #10]
 800165a:	1c59      	adds	r1, r3, #1
 800165c:	8179      	strh	r1, [r7, #10]
 800165e:	4413      	add	r3, r2
 8001660:	2204      	movs	r2, #4
 8001662:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec

	pDHCPMSG->OPT[k++] = dhcpClientIdentifier;
 8001666:	4b8c      	ldr	r3, [pc, #560]	; (8001898 <send_DHCP_DECLINE+0x290>)
 8001668:	681a      	ldr	r2, [r3, #0]
 800166a:	897b      	ldrh	r3, [r7, #10]
 800166c:	1c59      	adds	r1, r3, #1
 800166e:	8179      	strh	r1, [r7, #10]
 8001670:	4413      	add	r3, r2
 8001672:	223d      	movs	r2, #61	; 0x3d
 8001674:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = 0x07;
 8001678:	4b87      	ldr	r3, [pc, #540]	; (8001898 <send_DHCP_DECLINE+0x290>)
 800167a:	681a      	ldr	r2, [r3, #0]
 800167c:	897b      	ldrh	r3, [r7, #10]
 800167e:	1c59      	adds	r1, r3, #1
 8001680:	8179      	strh	r1, [r7, #10]
 8001682:	4413      	add	r3, r2
 8001684:	2207      	movs	r2, #7
 8001686:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = 0x01;
 800168a:	4b83      	ldr	r3, [pc, #524]	; (8001898 <send_DHCP_DECLINE+0x290>)
 800168c:	681a      	ldr	r2, [r3, #0]
 800168e:	897b      	ldrh	r3, [r7, #10]
 8001690:	1c59      	adds	r1, r3, #1
 8001692:	8179      	strh	r1, [r7, #10]
 8001694:	4413      	add	r3, r2
 8001696:	2201      	movs	r2, #1
 8001698:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[0];
 800169c:	4b7e      	ldr	r3, [pc, #504]	; (8001898 <send_DHCP_DECLINE+0x290>)
 800169e:	681a      	ldr	r2, [r3, #0]
 80016a0:	897b      	ldrh	r3, [r7, #10]
 80016a2:	1c59      	adds	r1, r3, #1
 80016a4:	8179      	strh	r1, [r7, #10]
 80016a6:	4618      	mov	r0, r3
 80016a8:	4b7c      	ldr	r3, [pc, #496]	; (800189c <send_DHCP_DECLINE+0x294>)
 80016aa:	7819      	ldrb	r1, [r3, #0]
 80016ac:	1813      	adds	r3, r2, r0
 80016ae:	460a      	mov	r2, r1
 80016b0:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[1];
 80016b4:	4b78      	ldr	r3, [pc, #480]	; (8001898 <send_DHCP_DECLINE+0x290>)
 80016b6:	681a      	ldr	r2, [r3, #0]
 80016b8:	897b      	ldrh	r3, [r7, #10]
 80016ba:	1c59      	adds	r1, r3, #1
 80016bc:	8179      	strh	r1, [r7, #10]
 80016be:	4618      	mov	r0, r3
 80016c0:	4b76      	ldr	r3, [pc, #472]	; (800189c <send_DHCP_DECLINE+0x294>)
 80016c2:	7859      	ldrb	r1, [r3, #1]
 80016c4:	1813      	adds	r3, r2, r0
 80016c6:	460a      	mov	r2, r1
 80016c8:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[2];
 80016cc:	4b72      	ldr	r3, [pc, #456]	; (8001898 <send_DHCP_DECLINE+0x290>)
 80016ce:	681a      	ldr	r2, [r3, #0]
 80016d0:	897b      	ldrh	r3, [r7, #10]
 80016d2:	1c59      	adds	r1, r3, #1
 80016d4:	8179      	strh	r1, [r7, #10]
 80016d6:	4618      	mov	r0, r3
 80016d8:	4b70      	ldr	r3, [pc, #448]	; (800189c <send_DHCP_DECLINE+0x294>)
 80016da:	7899      	ldrb	r1, [r3, #2]
 80016dc:	1813      	adds	r3, r2, r0
 80016de:	460a      	mov	r2, r1
 80016e0:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[3];
 80016e4:	4b6c      	ldr	r3, [pc, #432]	; (8001898 <send_DHCP_DECLINE+0x290>)
 80016e6:	681a      	ldr	r2, [r3, #0]
 80016e8:	897b      	ldrh	r3, [r7, #10]
 80016ea:	1c59      	adds	r1, r3, #1
 80016ec:	8179      	strh	r1, [r7, #10]
 80016ee:	4618      	mov	r0, r3
 80016f0:	4b6a      	ldr	r3, [pc, #424]	; (800189c <send_DHCP_DECLINE+0x294>)
 80016f2:	78d9      	ldrb	r1, [r3, #3]
 80016f4:	1813      	adds	r3, r2, r0
 80016f6:	460a      	mov	r2, r1
 80016f8:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[4];
 80016fc:	4b66      	ldr	r3, [pc, #408]	; (8001898 <send_DHCP_DECLINE+0x290>)
 80016fe:	681a      	ldr	r2, [r3, #0]
 8001700:	897b      	ldrh	r3, [r7, #10]
 8001702:	1c59      	adds	r1, r3, #1
 8001704:	8179      	strh	r1, [r7, #10]
 8001706:	4618      	mov	r0, r3
 8001708:	4b64      	ldr	r3, [pc, #400]	; (800189c <send_DHCP_DECLINE+0x294>)
 800170a:	7919      	ldrb	r1, [r3, #4]
 800170c:	1813      	adds	r3, r2, r0
 800170e:	460a      	mov	r2, r1
 8001710:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[5];
 8001714:	4b60      	ldr	r3, [pc, #384]	; (8001898 <send_DHCP_DECLINE+0x290>)
 8001716:	681a      	ldr	r2, [r3, #0]
 8001718:	897b      	ldrh	r3, [r7, #10]
 800171a:	1c59      	adds	r1, r3, #1
 800171c:	8179      	strh	r1, [r7, #10]
 800171e:	4618      	mov	r0, r3
 8001720:	4b5e      	ldr	r3, [pc, #376]	; (800189c <send_DHCP_DECLINE+0x294>)
 8001722:	7959      	ldrb	r1, [r3, #5]
 8001724:	1813      	adds	r3, r2, r0
 8001726:	460a      	mov	r2, r1
 8001728:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec

	pDHCPMSG->OPT[k++] = dhcpRequestedIPaddr;
 800172c:	4b5a      	ldr	r3, [pc, #360]	; (8001898 <send_DHCP_DECLINE+0x290>)
 800172e:	681a      	ldr	r2, [r3, #0]
 8001730:	897b      	ldrh	r3, [r7, #10]
 8001732:	1c59      	adds	r1, r3, #1
 8001734:	8179      	strh	r1, [r7, #10]
 8001736:	4413      	add	r3, r2
 8001738:	2232      	movs	r2, #50	; 0x32
 800173a:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = 0x04;
 800173e:	4b56      	ldr	r3, [pc, #344]	; (8001898 <send_DHCP_DECLINE+0x290>)
 8001740:	681a      	ldr	r2, [r3, #0]
 8001742:	897b      	ldrh	r3, [r7, #10]
 8001744:	1c59      	adds	r1, r3, #1
 8001746:	8179      	strh	r1, [r7, #10]
 8001748:	4413      	add	r3, r2
 800174a:	2204      	movs	r2, #4
 800174c:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_allocated_ip[0];
 8001750:	4b51      	ldr	r3, [pc, #324]	; (8001898 <send_DHCP_DECLINE+0x290>)
 8001752:	681a      	ldr	r2, [r3, #0]
 8001754:	897b      	ldrh	r3, [r7, #10]
 8001756:	1c59      	adds	r1, r3, #1
 8001758:	8179      	strh	r1, [r7, #10]
 800175a:	4618      	mov	r0, r3
 800175c:	4b50      	ldr	r3, [pc, #320]	; (80018a0 <send_DHCP_DECLINE+0x298>)
 800175e:	7819      	ldrb	r1, [r3, #0]
 8001760:	1813      	adds	r3, r2, r0
 8001762:	460a      	mov	r2, r1
 8001764:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_allocated_ip[1];
 8001768:	4b4b      	ldr	r3, [pc, #300]	; (8001898 <send_DHCP_DECLINE+0x290>)
 800176a:	681a      	ldr	r2, [r3, #0]
 800176c:	897b      	ldrh	r3, [r7, #10]
 800176e:	1c59      	adds	r1, r3, #1
 8001770:	8179      	strh	r1, [r7, #10]
 8001772:	4618      	mov	r0, r3
 8001774:	4b4a      	ldr	r3, [pc, #296]	; (80018a0 <send_DHCP_DECLINE+0x298>)
 8001776:	7859      	ldrb	r1, [r3, #1]
 8001778:	1813      	adds	r3, r2, r0
 800177a:	460a      	mov	r2, r1
 800177c:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_allocated_ip[2];
 8001780:	4b45      	ldr	r3, [pc, #276]	; (8001898 <send_DHCP_DECLINE+0x290>)
 8001782:	681a      	ldr	r2, [r3, #0]
 8001784:	897b      	ldrh	r3, [r7, #10]
 8001786:	1c59      	adds	r1, r3, #1
 8001788:	8179      	strh	r1, [r7, #10]
 800178a:	4618      	mov	r0, r3
 800178c:	4b44      	ldr	r3, [pc, #272]	; (80018a0 <send_DHCP_DECLINE+0x298>)
 800178e:	7899      	ldrb	r1, [r3, #2]
 8001790:	1813      	adds	r3, r2, r0
 8001792:	460a      	mov	r2, r1
 8001794:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_allocated_ip[3];
 8001798:	4b3f      	ldr	r3, [pc, #252]	; (8001898 <send_DHCP_DECLINE+0x290>)
 800179a:	681a      	ldr	r2, [r3, #0]
 800179c:	897b      	ldrh	r3, [r7, #10]
 800179e:	1c59      	adds	r1, r3, #1
 80017a0:	8179      	strh	r1, [r7, #10]
 80017a2:	4618      	mov	r0, r3
 80017a4:	4b3e      	ldr	r3, [pc, #248]	; (80018a0 <send_DHCP_DECLINE+0x298>)
 80017a6:	78d9      	ldrb	r1, [r3, #3]
 80017a8:	1813      	adds	r3, r2, r0
 80017aa:	460a      	mov	r2, r1
 80017ac:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec

	pDHCPMSG->OPT[k++] = dhcpServerIdentifier;
 80017b0:	4b39      	ldr	r3, [pc, #228]	; (8001898 <send_DHCP_DECLINE+0x290>)
 80017b2:	681a      	ldr	r2, [r3, #0]
 80017b4:	897b      	ldrh	r3, [r7, #10]
 80017b6:	1c59      	adds	r1, r3, #1
 80017b8:	8179      	strh	r1, [r7, #10]
 80017ba:	4413      	add	r3, r2
 80017bc:	2236      	movs	r2, #54	; 0x36
 80017be:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = 0x04;
 80017c2:	4b35      	ldr	r3, [pc, #212]	; (8001898 <send_DHCP_DECLINE+0x290>)
 80017c4:	681a      	ldr	r2, [r3, #0]
 80017c6:	897b      	ldrh	r3, [r7, #10]
 80017c8:	1c59      	adds	r1, r3, #1
 80017ca:	8179      	strh	r1, [r7, #10]
 80017cc:	4413      	add	r3, r2
 80017ce:	2204      	movs	r2, #4
 80017d0:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_SIP[0];
 80017d4:	4b30      	ldr	r3, [pc, #192]	; (8001898 <send_DHCP_DECLINE+0x290>)
 80017d6:	681a      	ldr	r2, [r3, #0]
 80017d8:	897b      	ldrh	r3, [r7, #10]
 80017da:	1c59      	adds	r1, r3, #1
 80017dc:	8179      	strh	r1, [r7, #10]
 80017de:	4618      	mov	r0, r3
 80017e0:	4b30      	ldr	r3, [pc, #192]	; (80018a4 <send_DHCP_DECLINE+0x29c>)
 80017e2:	7819      	ldrb	r1, [r3, #0]
 80017e4:	1813      	adds	r3, r2, r0
 80017e6:	460a      	mov	r2, r1
 80017e8:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_SIP[1];
 80017ec:	4b2a      	ldr	r3, [pc, #168]	; (8001898 <send_DHCP_DECLINE+0x290>)
 80017ee:	681a      	ldr	r2, [r3, #0]
 80017f0:	897b      	ldrh	r3, [r7, #10]
 80017f2:	1c59      	adds	r1, r3, #1
 80017f4:	8179      	strh	r1, [r7, #10]
 80017f6:	4618      	mov	r0, r3
 80017f8:	4b2a      	ldr	r3, [pc, #168]	; (80018a4 <send_DHCP_DECLINE+0x29c>)
 80017fa:	7859      	ldrb	r1, [r3, #1]
 80017fc:	1813      	adds	r3, r2, r0
 80017fe:	460a      	mov	r2, r1
 8001800:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_SIP[2];
 8001804:	4b24      	ldr	r3, [pc, #144]	; (8001898 <send_DHCP_DECLINE+0x290>)
 8001806:	681a      	ldr	r2, [r3, #0]
 8001808:	897b      	ldrh	r3, [r7, #10]
 800180a:	1c59      	adds	r1, r3, #1
 800180c:	8179      	strh	r1, [r7, #10]
 800180e:	4618      	mov	r0, r3
 8001810:	4b24      	ldr	r3, [pc, #144]	; (80018a4 <send_DHCP_DECLINE+0x29c>)
 8001812:	7899      	ldrb	r1, [r3, #2]
 8001814:	1813      	adds	r3, r2, r0
 8001816:	460a      	mov	r2, r1
 8001818:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_SIP[3];
 800181c:	4b1e      	ldr	r3, [pc, #120]	; (8001898 <send_DHCP_DECLINE+0x290>)
 800181e:	681a      	ldr	r2, [r3, #0]
 8001820:	897b      	ldrh	r3, [r7, #10]
 8001822:	1c59      	adds	r1, r3, #1
 8001824:	8179      	strh	r1, [r7, #10]
 8001826:	4618      	mov	r0, r3
 8001828:	4b1e      	ldr	r3, [pc, #120]	; (80018a4 <send_DHCP_DECLINE+0x29c>)
 800182a:	78d9      	ldrb	r1, [r3, #3]
 800182c:	1813      	adds	r3, r2, r0
 800182e:	460a      	mov	r2, r1
 8001830:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec

	pDHCPMSG->OPT[k++] = endOption;
 8001834:	4b18      	ldr	r3, [pc, #96]	; (8001898 <send_DHCP_DECLINE+0x290>)
 8001836:	681a      	ldr	r2, [r3, #0]
 8001838:	897b      	ldrh	r3, [r7, #10]
 800183a:	1c59      	adds	r1, r3, #1
 800183c:	8179      	strh	r1, [r7, #10]
 800183e:	4413      	add	r3, r2
 8001840:	22ff      	movs	r2, #255	; 0xff
 8001842:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec

	for (i = k; i < OPT_SIZE; i++) pDHCPMSG->OPT[i] = 0;
 8001846:	897b      	ldrh	r3, [r7, #10]
 8001848:	60fb      	str	r3, [r7, #12]
 800184a:	e009      	b.n	8001860 <send_DHCP_DECLINE+0x258>
 800184c:	4b12      	ldr	r3, [pc, #72]	; (8001898 <send_DHCP_DECLINE+0x290>)
 800184e:	681a      	ldr	r2, [r3, #0]
 8001850:	68fb      	ldr	r3, [r7, #12]
 8001852:	4413      	add	r3, r2
 8001854:	33ec      	adds	r3, #236	; 0xec
 8001856:	2200      	movs	r2, #0
 8001858:	701a      	strb	r2, [r3, #0]
 800185a:	68fb      	ldr	r3, [r7, #12]
 800185c:	3301      	adds	r3, #1
 800185e:	60fb      	str	r3, [r7, #12]
 8001860:	68fb      	ldr	r3, [r7, #12]
 8001862:	f5b3 7f9c 	cmp.w	r3, #312	; 0x138
 8001866:	dbf1      	blt.n	800184c <send_DHCP_DECLINE+0x244>

	//send broadcasting packet
	ip[0] = 0xFF;
 8001868:	23ff      	movs	r3, #255	; 0xff
 800186a:	713b      	strb	r3, [r7, #4]
	ip[1] = 0xFF;
 800186c:	23ff      	movs	r3, #255	; 0xff
 800186e:	717b      	strb	r3, [r7, #5]
	ip[2] = 0xFF;
 8001870:	23ff      	movs	r3, #255	; 0xff
 8001872:	71bb      	strb	r3, [r7, #6]
	ip[3] = 0xFF;
 8001874:	23ff      	movs	r3, #255	; 0xff
 8001876:	71fb      	strb	r3, [r7, #7]

#ifdef _DHCP_DEBUG_
	printf("\r\n> Send DHCP_DECLINE\r\n");
#endif

	sendto(DHCP_SOCKET, (uint8_t *)pDHCPMSG, RIP_MSG_SIZE, ip, DHCP_SERVER_PORT);
 8001878:	4b0b      	ldr	r3, [pc, #44]	; (80018a8 <send_DHCP_DECLINE+0x2a0>)
 800187a:	7818      	ldrb	r0, [r3, #0]
 800187c:	4b06      	ldr	r3, [pc, #24]	; (8001898 <send_DHCP_DECLINE+0x290>)
 800187e:	6819      	ldr	r1, [r3, #0]
 8001880:	1d3b      	adds	r3, r7, #4
 8001882:	2243      	movs	r2, #67	; 0x43
 8001884:	9200      	str	r2, [sp, #0]
 8001886:	f44f 7209 	mov.w	r2, #548	; 0x224
 800188a:	f002 fe65 	bl	8004558 <sendto>
}
 800188e:	bf00      	nop
 8001890:	3710      	adds	r7, #16
 8001892:	46bd      	mov	sp, r7
 8001894:	bd80      	pop	{r7, pc}
 8001896:	bf00      	nop
 8001898:	2000030c 	.word	0x2000030c
 800189c:	200002f8 	.word	0x200002f8
 80018a0:	20000248 	.word	0x20000248
 80018a4:	20000308 	.word	0x20000308
 80018a8:	20000310 	.word	0x20000310

080018ac <parseDHCPMSG>:

/* PARSE REPLY pDHCPMSG */
int8_t parseDHCPMSG(void)
{
 80018ac:	b590      	push	{r4, r7, lr}
 80018ae:	b089      	sub	sp, #36	; 0x24
 80018b0:	af02      	add	r7, sp, #8
	uint16_t  svr_port;
	uint16_t len;

	uint8_t * p;
	uint8_t * e;
	uint8_t type = 0;
 80018b2:	2300      	movs	r3, #0
 80018b4:	74fb      	strb	r3, [r7, #19]
	uint8_t opt_len;
   
   if((len = getSn_RX_RSR(DHCP_SOCKET)) > 0)
 80018b6:	4ba1      	ldr	r3, [pc, #644]	; (8001b3c <parseDHCPMSG+0x290>)
 80018b8:	781b      	ldrb	r3, [r3, #0]
 80018ba:	4618      	mov	r0, r3
 80018bc:	f004 f801 	bl	80058c2 <getSn_RX_RSR>
 80018c0:	4603      	mov	r3, r0
 80018c2:	823b      	strh	r3, [r7, #16]
 80018c4:	8a3b      	ldrh	r3, [r7, #16]
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d011      	beq.n	80018ee <parseDHCPMSG+0x42>
   {
   	len = recvfrom(DHCP_SOCKET, (uint8_t *)pDHCPMSG, len, svr_addr, &svr_port);
 80018ca:	4b9c      	ldr	r3, [pc, #624]	; (8001b3c <parseDHCPMSG+0x290>)
 80018cc:	7818      	ldrb	r0, [r3, #0]
 80018ce:	4b9c      	ldr	r3, [pc, #624]	; (8001b40 <parseDHCPMSG+0x294>)
 80018d0:	6819      	ldr	r1, [r3, #0]
 80018d2:	1d3c      	adds	r4, r7, #4
 80018d4:	8a3a      	ldrh	r2, [r7, #16]
 80018d6:	1cbb      	adds	r3, r7, #2
 80018d8:	9300      	str	r3, [sp, #0]
 80018da:	4623      	mov	r3, r4
 80018dc:	f002 ff72 	bl	80047c4 <recvfrom>
 80018e0:	4603      	mov	r3, r0
 80018e2:	823b      	strh	r3, [r7, #16]
   #ifdef _DHCP_DEBUG_   
      printf("DHCP message : %d.%d.%d.%d(%d) %d received. \r\n",svr_addr[0],svr_addr[1],svr_addr[2], svr_addr[3],svr_port, len);
   #endif   
   }
   else return 0;
	if (svr_port == DHCP_SERVER_PORT) {
 80018e4:	887b      	ldrh	r3, [r7, #2]
 80018e6:	2b43      	cmp	r3, #67	; 0x43
 80018e8:	f040 81ed 	bne.w	8001cc6 <parseDHCPMSG+0x41a>
 80018ec:	e001      	b.n	80018f2 <parseDHCPMSG+0x46>
   else return 0;
 80018ee:	2300      	movs	r3, #0
 80018f0:	e1eb      	b.n	8001cca <parseDHCPMSG+0x41e>
      // compare mac address
		if ( (pDHCPMSG->chaddr[0] != DHCP_CHADDR[0]) || (pDHCPMSG->chaddr[1] != DHCP_CHADDR[1]) ||
 80018f2:	4b93      	ldr	r3, [pc, #588]	; (8001b40 <parseDHCPMSG+0x294>)
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	7f1a      	ldrb	r2, [r3, #28]
 80018f8:	4b92      	ldr	r3, [pc, #584]	; (8001b44 <parseDHCPMSG+0x298>)
 80018fa:	781b      	ldrb	r3, [r3, #0]
 80018fc:	429a      	cmp	r2, r3
 80018fe:	d124      	bne.n	800194a <parseDHCPMSG+0x9e>
 8001900:	4b8f      	ldr	r3, [pc, #572]	; (8001b40 <parseDHCPMSG+0x294>)
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	7f5a      	ldrb	r2, [r3, #29]
 8001906:	4b8f      	ldr	r3, [pc, #572]	; (8001b44 <parseDHCPMSG+0x298>)
 8001908:	785b      	ldrb	r3, [r3, #1]
 800190a:	429a      	cmp	r2, r3
 800190c:	d11d      	bne.n	800194a <parseDHCPMSG+0x9e>
		     (pDHCPMSG->chaddr[2] != DHCP_CHADDR[2]) || (pDHCPMSG->chaddr[3] != DHCP_CHADDR[3]) ||
 800190e:	4b8c      	ldr	r3, [pc, #560]	; (8001b40 <parseDHCPMSG+0x294>)
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	7f9a      	ldrb	r2, [r3, #30]
 8001914:	4b8b      	ldr	r3, [pc, #556]	; (8001b44 <parseDHCPMSG+0x298>)
 8001916:	789b      	ldrb	r3, [r3, #2]
		if ( (pDHCPMSG->chaddr[0] != DHCP_CHADDR[0]) || (pDHCPMSG->chaddr[1] != DHCP_CHADDR[1]) ||
 8001918:	429a      	cmp	r2, r3
 800191a:	d116      	bne.n	800194a <parseDHCPMSG+0x9e>
		     (pDHCPMSG->chaddr[2] != DHCP_CHADDR[2]) || (pDHCPMSG->chaddr[3] != DHCP_CHADDR[3]) ||
 800191c:	4b88      	ldr	r3, [pc, #544]	; (8001b40 <parseDHCPMSG+0x294>)
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	7fda      	ldrb	r2, [r3, #31]
 8001922:	4b88      	ldr	r3, [pc, #544]	; (8001b44 <parseDHCPMSG+0x298>)
 8001924:	78db      	ldrb	r3, [r3, #3]
 8001926:	429a      	cmp	r2, r3
 8001928:	d10f      	bne.n	800194a <parseDHCPMSG+0x9e>
		     (pDHCPMSG->chaddr[4] != DHCP_CHADDR[4]) || (pDHCPMSG->chaddr[5] != DHCP_CHADDR[5])   )
 800192a:	4b85      	ldr	r3, [pc, #532]	; (8001b40 <parseDHCPMSG+0x294>)
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	f893 2020 	ldrb.w	r2, [r3, #32]
 8001932:	4b84      	ldr	r3, [pc, #528]	; (8001b44 <parseDHCPMSG+0x298>)
 8001934:	791b      	ldrb	r3, [r3, #4]
		     (pDHCPMSG->chaddr[2] != DHCP_CHADDR[2]) || (pDHCPMSG->chaddr[3] != DHCP_CHADDR[3]) ||
 8001936:	429a      	cmp	r2, r3
 8001938:	d107      	bne.n	800194a <parseDHCPMSG+0x9e>
		     (pDHCPMSG->chaddr[4] != DHCP_CHADDR[4]) || (pDHCPMSG->chaddr[5] != DHCP_CHADDR[5])   )
 800193a:	4b81      	ldr	r3, [pc, #516]	; (8001b40 <parseDHCPMSG+0x294>)
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 8001942:	4b80      	ldr	r3, [pc, #512]	; (8001b44 <parseDHCPMSG+0x298>)
 8001944:	795b      	ldrb	r3, [r3, #5]
 8001946:	429a      	cmp	r2, r3
 8001948:	d001      	beq.n	800194e <parseDHCPMSG+0xa2>
		{
#ifdef _DHCP_DEBUG_
            printf("No My DHCP Message. This message is ignored.\r\n");
#endif
         return 0;
 800194a:	2300      	movs	r3, #0
 800194c:	e1bd      	b.n	8001cca <parseDHCPMSG+0x41e>
		}
        //compare DHCP server ip address
        if((DHCP_SIP[0]!=0) || (DHCP_SIP[1]!=0) || (DHCP_SIP[2]!=0) || (DHCP_SIP[3]!=0)){
 800194e:	4b7e      	ldr	r3, [pc, #504]	; (8001b48 <parseDHCPMSG+0x29c>)
 8001950:	781b      	ldrb	r3, [r3, #0]
 8001952:	2b00      	cmp	r3, #0
 8001954:	d10b      	bne.n	800196e <parseDHCPMSG+0xc2>
 8001956:	4b7c      	ldr	r3, [pc, #496]	; (8001b48 <parseDHCPMSG+0x29c>)
 8001958:	785b      	ldrb	r3, [r3, #1]
 800195a:	2b00      	cmp	r3, #0
 800195c:	d107      	bne.n	800196e <parseDHCPMSG+0xc2>
 800195e:	4b7a      	ldr	r3, [pc, #488]	; (8001b48 <parseDHCPMSG+0x29c>)
 8001960:	789b      	ldrb	r3, [r3, #2]
 8001962:	2b00      	cmp	r3, #0
 8001964:	d103      	bne.n	800196e <parseDHCPMSG+0xc2>
 8001966:	4b78      	ldr	r3, [pc, #480]	; (8001b48 <parseDHCPMSG+0x29c>)
 8001968:	78db      	ldrb	r3, [r3, #3]
 800196a:	2b00      	cmp	r3, #0
 800196c:	d029      	beq.n	80019c2 <parseDHCPMSG+0x116>
            if( ((svr_addr[0]!=DHCP_SIP[0])|| (svr_addr[1]!=DHCP_SIP[1])|| (svr_addr[2]!=DHCP_SIP[2])|| (svr_addr[3]!=DHCP_SIP[3])) &&
 800196e:	793a      	ldrb	r2, [r7, #4]
 8001970:	4b75      	ldr	r3, [pc, #468]	; (8001b48 <parseDHCPMSG+0x29c>)
 8001972:	781b      	ldrb	r3, [r3, #0]
 8001974:	429a      	cmp	r2, r3
 8001976:	d10e      	bne.n	8001996 <parseDHCPMSG+0xea>
 8001978:	797a      	ldrb	r2, [r7, #5]
 800197a:	4b73      	ldr	r3, [pc, #460]	; (8001b48 <parseDHCPMSG+0x29c>)
 800197c:	785b      	ldrb	r3, [r3, #1]
 800197e:	429a      	cmp	r2, r3
 8001980:	d109      	bne.n	8001996 <parseDHCPMSG+0xea>
 8001982:	79ba      	ldrb	r2, [r7, #6]
 8001984:	4b70      	ldr	r3, [pc, #448]	; (8001b48 <parseDHCPMSG+0x29c>)
 8001986:	789b      	ldrb	r3, [r3, #2]
 8001988:	429a      	cmp	r2, r3
 800198a:	d104      	bne.n	8001996 <parseDHCPMSG+0xea>
 800198c:	79fa      	ldrb	r2, [r7, #7]
 800198e:	4b6e      	ldr	r3, [pc, #440]	; (8001b48 <parseDHCPMSG+0x29c>)
 8001990:	78db      	ldrb	r3, [r3, #3]
 8001992:	429a      	cmp	r2, r3
 8001994:	d015      	beq.n	80019c2 <parseDHCPMSG+0x116>
                ((svr_addr[0]!=DHCP_REAL_SIP[0])|| (svr_addr[1]!=DHCP_REAL_SIP[1])|| (svr_addr[2]!=DHCP_REAL_SIP[2])|| (svr_addr[3]!=DHCP_REAL_SIP[3]))  )
 8001996:	793a      	ldrb	r2, [r7, #4]
 8001998:	4b6c      	ldr	r3, [pc, #432]	; (8001b4c <parseDHCPMSG+0x2a0>)
 800199a:	781b      	ldrb	r3, [r3, #0]
            if( ((svr_addr[0]!=DHCP_SIP[0])|| (svr_addr[1]!=DHCP_SIP[1])|| (svr_addr[2]!=DHCP_SIP[2])|| (svr_addr[3]!=DHCP_SIP[3])) &&
 800199c:	429a      	cmp	r2, r3
 800199e:	d10e      	bne.n	80019be <parseDHCPMSG+0x112>
                ((svr_addr[0]!=DHCP_REAL_SIP[0])|| (svr_addr[1]!=DHCP_REAL_SIP[1])|| (svr_addr[2]!=DHCP_REAL_SIP[2])|| (svr_addr[3]!=DHCP_REAL_SIP[3]))  )
 80019a0:	797a      	ldrb	r2, [r7, #5]
 80019a2:	4b6a      	ldr	r3, [pc, #424]	; (8001b4c <parseDHCPMSG+0x2a0>)
 80019a4:	785b      	ldrb	r3, [r3, #1]
 80019a6:	429a      	cmp	r2, r3
 80019a8:	d109      	bne.n	80019be <parseDHCPMSG+0x112>
 80019aa:	79ba      	ldrb	r2, [r7, #6]
 80019ac:	4b67      	ldr	r3, [pc, #412]	; (8001b4c <parseDHCPMSG+0x2a0>)
 80019ae:	789b      	ldrb	r3, [r3, #2]
 80019b0:	429a      	cmp	r2, r3
 80019b2:	d104      	bne.n	80019be <parseDHCPMSG+0x112>
 80019b4:	79fa      	ldrb	r2, [r7, #7]
 80019b6:	4b65      	ldr	r3, [pc, #404]	; (8001b4c <parseDHCPMSG+0x2a0>)
 80019b8:	78db      	ldrb	r3, [r3, #3]
 80019ba:	429a      	cmp	r2, r3
 80019bc:	d001      	beq.n	80019c2 <parseDHCPMSG+0x116>
            {
#ifdef _DHCP_DEBUG_
                printf("Another DHCP sever send a response message. This is ignored.\r\n");
#endif
                return 0;
 80019be:	2300      	movs	r3, #0
 80019c0:	e183      	b.n	8001cca <parseDHCPMSG+0x41e>
            }
        }
		p = (uint8_t *)(&pDHCPMSG->op);
 80019c2:	4b5f      	ldr	r3, [pc, #380]	; (8001b40 <parseDHCPMSG+0x294>)
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	617b      	str	r3, [r7, #20]
		p = p + 240;      // 240 = sizeof(RIP_MSG) + MAGIC_COOKIE size in RIP_MSG.opt - sizeof(RIP_MSG.opt)
 80019c8:	697b      	ldr	r3, [r7, #20]
 80019ca:	33f0      	adds	r3, #240	; 0xf0
 80019cc:	617b      	str	r3, [r7, #20]
		e = p + (len - 240);
 80019ce:	8a3b      	ldrh	r3, [r7, #16]
 80019d0:	3bf0      	subs	r3, #240	; 0xf0
 80019d2:	697a      	ldr	r2, [r7, #20]
 80019d4:	4413      	add	r3, r2
 80019d6:	60fb      	str	r3, [r7, #12]

		while ( p < e ) {
 80019d8:	e170      	b.n	8001cbc <parseDHCPMSG+0x410>

			switch ( *p ) {
 80019da:	697b      	ldr	r3, [r7, #20]
 80019dc:	781b      	ldrb	r3, [r3, #0]
 80019de:	2b36      	cmp	r3, #54	; 0x36
 80019e0:	dc76      	bgt.n	8001ad0 <parseDHCPMSG+0x224>
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	f2c0 815d 	blt.w	8001ca2 <parseDHCPMSG+0x3f6>
 80019e8:	2b36      	cmp	r3, #54	; 0x36
 80019ea:	f200 815a 	bhi.w	8001ca2 <parseDHCPMSG+0x3f6>
 80019ee:	a201      	add	r2, pc, #4	; (adr r2, 80019f4 <parseDHCPMSG+0x148>)
 80019f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80019f4:	08001add 	.word	0x08001add
 80019f8:	08001afd 	.word	0x08001afd
 80019fc:	08001ca3 	.word	0x08001ca3
 8001a00:	08001b55 	.word	0x08001b55
 8001a04:	08001ca3 	.word	0x08001ca3
 8001a08:	08001ca3 	.word	0x08001ca3
 8001a0c:	08001ba1 	.word	0x08001ba1
 8001a10:	08001ca3 	.word	0x08001ca3
 8001a14:	08001ca3 	.word	0x08001ca3
 8001a18:	08001ca3 	.word	0x08001ca3
 8001a1c:	08001ca3 	.word	0x08001ca3
 8001a20:	08001ca3 	.word	0x08001ca3
 8001a24:	08001ca3 	.word	0x08001ca3
 8001a28:	08001ca3 	.word	0x08001ca3
 8001a2c:	08001ca3 	.word	0x08001ca3
 8001a30:	08001ca3 	.word	0x08001ca3
 8001a34:	08001ca3 	.word	0x08001ca3
 8001a38:	08001ca3 	.word	0x08001ca3
 8001a3c:	08001ca3 	.word	0x08001ca3
 8001a40:	08001ca3 	.word	0x08001ca3
 8001a44:	08001ca3 	.word	0x08001ca3
 8001a48:	08001ca3 	.word	0x08001ca3
 8001a4c:	08001ca3 	.word	0x08001ca3
 8001a50:	08001ca3 	.word	0x08001ca3
 8001a54:	08001ca3 	.word	0x08001ca3
 8001a58:	08001ca3 	.word	0x08001ca3
 8001a5c:	08001ca3 	.word	0x08001ca3
 8001a60:	08001ca3 	.word	0x08001ca3
 8001a64:	08001ca3 	.word	0x08001ca3
 8001a68:	08001ca3 	.word	0x08001ca3
 8001a6c:	08001ca3 	.word	0x08001ca3
 8001a70:	08001ca3 	.word	0x08001ca3
 8001a74:	08001ca3 	.word	0x08001ca3
 8001a78:	08001ca3 	.word	0x08001ca3
 8001a7c:	08001ca3 	.word	0x08001ca3
 8001a80:	08001ca3 	.word	0x08001ca3
 8001a84:	08001ca3 	.word	0x08001ca3
 8001a88:	08001ca3 	.word	0x08001ca3
 8001a8c:	08001ca3 	.word	0x08001ca3
 8001a90:	08001ca3 	.word	0x08001ca3
 8001a94:	08001ca3 	.word	0x08001ca3
 8001a98:	08001ca3 	.word	0x08001ca3
 8001a9c:	08001ca3 	.word	0x08001ca3
 8001aa0:	08001ca3 	.word	0x08001ca3
 8001aa4:	08001ca3 	.word	0x08001ca3
 8001aa8:	08001ca3 	.word	0x08001ca3
 8001aac:	08001ca3 	.word	0x08001ca3
 8001ab0:	08001ca3 	.word	0x08001ca3
 8001ab4:	08001ca3 	.word	0x08001ca3
 8001ab8:	08001ca3 	.word	0x08001ca3
 8001abc:	08001ca3 	.word	0x08001ca3
 8001ac0:	08001bed 	.word	0x08001bed
 8001ac4:	08001ca3 	.word	0x08001ca3
 8001ac8:	08001ae5 	.word	0x08001ae5
 8001acc:	08001c49 	.word	0x08001c49
 8001ad0:	2bff      	cmp	r3, #255	; 0xff
 8001ad2:	f040 80e6 	bne.w	8001ca2 <parseDHCPMSG+0x3f6>

   			case endOption :
   			   p = e;   // for break while(p < e)
 8001ad6:	68fb      	ldr	r3, [r7, #12]
 8001ad8:	617b      	str	r3, [r7, #20]
   				break;
 8001ada:	e0ef      	b.n	8001cbc <parseDHCPMSG+0x410>
            case padOption :
   				p++;
 8001adc:	697b      	ldr	r3, [r7, #20]
 8001ade:	3301      	adds	r3, #1
 8001ae0:	617b      	str	r3, [r7, #20]
   				break;
 8001ae2:	e0eb      	b.n	8001cbc <parseDHCPMSG+0x410>
   			case dhcpMessageType :
   				p++;
 8001ae4:	697b      	ldr	r3, [r7, #20]
 8001ae6:	3301      	adds	r3, #1
 8001ae8:	617b      	str	r3, [r7, #20]
   				p++;
 8001aea:	697b      	ldr	r3, [r7, #20]
 8001aec:	3301      	adds	r3, #1
 8001aee:	617b      	str	r3, [r7, #20]
   				type = *p++;
 8001af0:	697b      	ldr	r3, [r7, #20]
 8001af2:	1c5a      	adds	r2, r3, #1
 8001af4:	617a      	str	r2, [r7, #20]
 8001af6:	781b      	ldrb	r3, [r3, #0]
 8001af8:	74fb      	strb	r3, [r7, #19]
   				break;
 8001afa:	e0df      	b.n	8001cbc <parseDHCPMSG+0x410>
   			case subnetMask :
   				p++;
 8001afc:	697b      	ldr	r3, [r7, #20]
 8001afe:	3301      	adds	r3, #1
 8001b00:	617b      	str	r3, [r7, #20]
   				p++;
 8001b02:	697b      	ldr	r3, [r7, #20]
 8001b04:	3301      	adds	r3, #1
 8001b06:	617b      	str	r3, [r7, #20]
   				DHCP_allocated_sn[0] = *p++;
 8001b08:	697b      	ldr	r3, [r7, #20]
 8001b0a:	1c5a      	adds	r2, r3, #1
 8001b0c:	617a      	str	r2, [r7, #20]
 8001b0e:	781a      	ldrb	r2, [r3, #0]
 8001b10:	4b0f      	ldr	r3, [pc, #60]	; (8001b50 <parseDHCPMSG+0x2a4>)
 8001b12:	701a      	strb	r2, [r3, #0]
   				DHCP_allocated_sn[1] = *p++;
 8001b14:	697b      	ldr	r3, [r7, #20]
 8001b16:	1c5a      	adds	r2, r3, #1
 8001b18:	617a      	str	r2, [r7, #20]
 8001b1a:	781a      	ldrb	r2, [r3, #0]
 8001b1c:	4b0c      	ldr	r3, [pc, #48]	; (8001b50 <parseDHCPMSG+0x2a4>)
 8001b1e:	705a      	strb	r2, [r3, #1]
   				DHCP_allocated_sn[2] = *p++;
 8001b20:	697b      	ldr	r3, [r7, #20]
 8001b22:	1c5a      	adds	r2, r3, #1
 8001b24:	617a      	str	r2, [r7, #20]
 8001b26:	781a      	ldrb	r2, [r3, #0]
 8001b28:	4b09      	ldr	r3, [pc, #36]	; (8001b50 <parseDHCPMSG+0x2a4>)
 8001b2a:	709a      	strb	r2, [r3, #2]
   				DHCP_allocated_sn[3] = *p++;
 8001b2c:	697b      	ldr	r3, [r7, #20]
 8001b2e:	1c5a      	adds	r2, r3, #1
 8001b30:	617a      	str	r2, [r7, #20]
 8001b32:	781a      	ldrb	r2, [r3, #0]
 8001b34:	4b06      	ldr	r3, [pc, #24]	; (8001b50 <parseDHCPMSG+0x2a4>)
 8001b36:	70da      	strb	r2, [r3, #3]
   				break;
 8001b38:	e0c0      	b.n	8001cbc <parseDHCPMSG+0x410>
 8001b3a:	bf00      	nop
 8001b3c:	20000310 	.word	0x20000310
 8001b40:	2000030c 	.word	0x2000030c
 8001b44:	200002f8 	.word	0x200002f8
 8001b48:	20000308 	.word	0x20000308
 8001b4c:	20000304 	.word	0x20000304
 8001b50:	20000250 	.word	0x20000250
   			case routersOnSubnet :
   				p++;
 8001b54:	697b      	ldr	r3, [r7, #20]
 8001b56:	3301      	adds	r3, #1
 8001b58:	617b      	str	r3, [r7, #20]
   				opt_len = *p++;       
 8001b5a:	697b      	ldr	r3, [r7, #20]
 8001b5c:	1c5a      	adds	r2, r3, #1
 8001b5e:	617a      	str	r2, [r7, #20]
 8001b60:	781b      	ldrb	r3, [r3, #0]
 8001b62:	72fb      	strb	r3, [r7, #11]
   				DHCP_allocated_gw[0] = *p++;
 8001b64:	697b      	ldr	r3, [r7, #20]
 8001b66:	1c5a      	adds	r2, r3, #1
 8001b68:	617a      	str	r2, [r7, #20]
 8001b6a:	781a      	ldrb	r2, [r3, #0]
 8001b6c:	4b59      	ldr	r3, [pc, #356]	; (8001cd4 <parseDHCPMSG+0x428>)
 8001b6e:	701a      	strb	r2, [r3, #0]
   				DHCP_allocated_gw[1] = *p++;
 8001b70:	697b      	ldr	r3, [r7, #20]
 8001b72:	1c5a      	adds	r2, r3, #1
 8001b74:	617a      	str	r2, [r7, #20]
 8001b76:	781a      	ldrb	r2, [r3, #0]
 8001b78:	4b56      	ldr	r3, [pc, #344]	; (8001cd4 <parseDHCPMSG+0x428>)
 8001b7a:	705a      	strb	r2, [r3, #1]
   				DHCP_allocated_gw[2] = *p++;
 8001b7c:	697b      	ldr	r3, [r7, #20]
 8001b7e:	1c5a      	adds	r2, r3, #1
 8001b80:	617a      	str	r2, [r7, #20]
 8001b82:	781a      	ldrb	r2, [r3, #0]
 8001b84:	4b53      	ldr	r3, [pc, #332]	; (8001cd4 <parseDHCPMSG+0x428>)
 8001b86:	709a      	strb	r2, [r3, #2]
   				DHCP_allocated_gw[3] = *p++;
 8001b88:	697b      	ldr	r3, [r7, #20]
 8001b8a:	1c5a      	adds	r2, r3, #1
 8001b8c:	617a      	str	r2, [r7, #20]
 8001b8e:	781a      	ldrb	r2, [r3, #0]
 8001b90:	4b50      	ldr	r3, [pc, #320]	; (8001cd4 <parseDHCPMSG+0x428>)
 8001b92:	70da      	strb	r2, [r3, #3]
   				p = p + (opt_len - 4);
 8001b94:	7afb      	ldrb	r3, [r7, #11]
 8001b96:	3b04      	subs	r3, #4
 8001b98:	697a      	ldr	r2, [r7, #20]
 8001b9a:	4413      	add	r3, r2
 8001b9c:	617b      	str	r3, [r7, #20]
   				break;
 8001b9e:	e08d      	b.n	8001cbc <parseDHCPMSG+0x410>
   			case dns :
   				p++;                  
 8001ba0:	697b      	ldr	r3, [r7, #20]
 8001ba2:	3301      	adds	r3, #1
 8001ba4:	617b      	str	r3, [r7, #20]
   				opt_len = *p++;       
 8001ba6:	697b      	ldr	r3, [r7, #20]
 8001ba8:	1c5a      	adds	r2, r3, #1
 8001baa:	617a      	str	r2, [r7, #20]
 8001bac:	781b      	ldrb	r3, [r3, #0]
 8001bae:	72fb      	strb	r3, [r7, #11]
   				DHCP_allocated_dns[0] = *p++;
 8001bb0:	697b      	ldr	r3, [r7, #20]
 8001bb2:	1c5a      	adds	r2, r3, #1
 8001bb4:	617a      	str	r2, [r7, #20]
 8001bb6:	781a      	ldrb	r2, [r3, #0]
 8001bb8:	4b47      	ldr	r3, [pc, #284]	; (8001cd8 <parseDHCPMSG+0x42c>)
 8001bba:	701a      	strb	r2, [r3, #0]
   				DHCP_allocated_dns[1] = *p++;
 8001bbc:	697b      	ldr	r3, [r7, #20]
 8001bbe:	1c5a      	adds	r2, r3, #1
 8001bc0:	617a      	str	r2, [r7, #20]
 8001bc2:	781a      	ldrb	r2, [r3, #0]
 8001bc4:	4b44      	ldr	r3, [pc, #272]	; (8001cd8 <parseDHCPMSG+0x42c>)
 8001bc6:	705a      	strb	r2, [r3, #1]
   				DHCP_allocated_dns[2] = *p++;
 8001bc8:	697b      	ldr	r3, [r7, #20]
 8001bca:	1c5a      	adds	r2, r3, #1
 8001bcc:	617a      	str	r2, [r7, #20]
 8001bce:	781a      	ldrb	r2, [r3, #0]
 8001bd0:	4b41      	ldr	r3, [pc, #260]	; (8001cd8 <parseDHCPMSG+0x42c>)
 8001bd2:	709a      	strb	r2, [r3, #2]
   				DHCP_allocated_dns[3] = *p++;
 8001bd4:	697b      	ldr	r3, [r7, #20]
 8001bd6:	1c5a      	adds	r2, r3, #1
 8001bd8:	617a      	str	r2, [r7, #20]
 8001bda:	781a      	ldrb	r2, [r3, #0]
 8001bdc:	4b3e      	ldr	r3, [pc, #248]	; (8001cd8 <parseDHCPMSG+0x42c>)
 8001bde:	70da      	strb	r2, [r3, #3]
   				p = p + (opt_len - 4);
 8001be0:	7afb      	ldrb	r3, [r7, #11]
 8001be2:	3b04      	subs	r3, #4
 8001be4:	697a      	ldr	r2, [r7, #20]
 8001be6:	4413      	add	r3, r2
 8001be8:	617b      	str	r3, [r7, #20]
   				break;
 8001bea:	e067      	b.n	8001cbc <parseDHCPMSG+0x410>
   			case dhcpIPaddrLeaseTime :
   				p++;
 8001bec:	697b      	ldr	r3, [r7, #20]
 8001bee:	3301      	adds	r3, #1
 8001bf0:	617b      	str	r3, [r7, #20]
   				opt_len = *p++;
 8001bf2:	697b      	ldr	r3, [r7, #20]
 8001bf4:	1c5a      	adds	r2, r3, #1
 8001bf6:	617a      	str	r2, [r7, #20]
 8001bf8:	781b      	ldrb	r3, [r3, #0]
 8001bfa:	72fb      	strb	r3, [r7, #11]
   				dhcp_lease_time  = *p++;
 8001bfc:	697b      	ldr	r3, [r7, #20]
 8001bfe:	1c5a      	adds	r2, r3, #1
 8001c00:	617a      	str	r2, [r7, #20]
 8001c02:	781b      	ldrb	r3, [r3, #0]
 8001c04:	461a      	mov	r2, r3
 8001c06:	4b35      	ldr	r3, [pc, #212]	; (8001cdc <parseDHCPMSG+0x430>)
 8001c08:	601a      	str	r2, [r3, #0]
   				dhcp_lease_time  = (dhcp_lease_time << 8) + *p++;
 8001c0a:	4b34      	ldr	r3, [pc, #208]	; (8001cdc <parseDHCPMSG+0x430>)
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	021a      	lsls	r2, r3, #8
 8001c10:	697b      	ldr	r3, [r7, #20]
 8001c12:	1c59      	adds	r1, r3, #1
 8001c14:	6179      	str	r1, [r7, #20]
 8001c16:	781b      	ldrb	r3, [r3, #0]
 8001c18:	4413      	add	r3, r2
 8001c1a:	4a30      	ldr	r2, [pc, #192]	; (8001cdc <parseDHCPMSG+0x430>)
 8001c1c:	6013      	str	r3, [r2, #0]
   				dhcp_lease_time  = (dhcp_lease_time << 8) + *p++;
 8001c1e:	4b2f      	ldr	r3, [pc, #188]	; (8001cdc <parseDHCPMSG+0x430>)
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	021a      	lsls	r2, r3, #8
 8001c24:	697b      	ldr	r3, [r7, #20]
 8001c26:	1c59      	adds	r1, r3, #1
 8001c28:	6179      	str	r1, [r7, #20]
 8001c2a:	781b      	ldrb	r3, [r3, #0]
 8001c2c:	4413      	add	r3, r2
 8001c2e:	4a2b      	ldr	r2, [pc, #172]	; (8001cdc <parseDHCPMSG+0x430>)
 8001c30:	6013      	str	r3, [r2, #0]
   				dhcp_lease_time  = (dhcp_lease_time << 8) + *p++;
 8001c32:	4b2a      	ldr	r3, [pc, #168]	; (8001cdc <parseDHCPMSG+0x430>)
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	021a      	lsls	r2, r3, #8
 8001c38:	697b      	ldr	r3, [r7, #20]
 8001c3a:	1c59      	adds	r1, r3, #1
 8001c3c:	6179      	str	r1, [r7, #20]
 8001c3e:	781b      	ldrb	r3, [r3, #0]
 8001c40:	4413      	add	r3, r2
 8001c42:	4a26      	ldr	r2, [pc, #152]	; (8001cdc <parseDHCPMSG+0x430>)
 8001c44:	6013      	str	r3, [r2, #0]
            #ifdef _DHCP_DEBUG_  
               dhcp_lease_time = 10;
 				#endif
   				break;
 8001c46:	e039      	b.n	8001cbc <parseDHCPMSG+0x410>
   			case dhcpServerIdentifier :
   				p++;
 8001c48:	697b      	ldr	r3, [r7, #20]
 8001c4a:	3301      	adds	r3, #1
 8001c4c:	617b      	str	r3, [r7, #20]
   				opt_len = *p++;
 8001c4e:	697b      	ldr	r3, [r7, #20]
 8001c50:	1c5a      	adds	r2, r3, #1
 8001c52:	617a      	str	r2, [r7, #20]
 8001c54:	781b      	ldrb	r3, [r3, #0]
 8001c56:	72fb      	strb	r3, [r7, #11]
   				DHCP_SIP[0] = *p++;
 8001c58:	697b      	ldr	r3, [r7, #20]
 8001c5a:	1c5a      	adds	r2, r3, #1
 8001c5c:	617a      	str	r2, [r7, #20]
 8001c5e:	781a      	ldrb	r2, [r3, #0]
 8001c60:	4b1f      	ldr	r3, [pc, #124]	; (8001ce0 <parseDHCPMSG+0x434>)
 8001c62:	701a      	strb	r2, [r3, #0]
   				DHCP_SIP[1] = *p++;
 8001c64:	697b      	ldr	r3, [r7, #20]
 8001c66:	1c5a      	adds	r2, r3, #1
 8001c68:	617a      	str	r2, [r7, #20]
 8001c6a:	781a      	ldrb	r2, [r3, #0]
 8001c6c:	4b1c      	ldr	r3, [pc, #112]	; (8001ce0 <parseDHCPMSG+0x434>)
 8001c6e:	705a      	strb	r2, [r3, #1]
   				DHCP_SIP[2] = *p++;
 8001c70:	697b      	ldr	r3, [r7, #20]
 8001c72:	1c5a      	adds	r2, r3, #1
 8001c74:	617a      	str	r2, [r7, #20]
 8001c76:	781a      	ldrb	r2, [r3, #0]
 8001c78:	4b19      	ldr	r3, [pc, #100]	; (8001ce0 <parseDHCPMSG+0x434>)
 8001c7a:	709a      	strb	r2, [r3, #2]
   				DHCP_SIP[3] = *p++;
 8001c7c:	697b      	ldr	r3, [r7, #20]
 8001c7e:	1c5a      	adds	r2, r3, #1
 8001c80:	617a      	str	r2, [r7, #20]
 8001c82:	781a      	ldrb	r2, [r3, #0]
 8001c84:	4b16      	ldr	r3, [pc, #88]	; (8001ce0 <parseDHCPMSG+0x434>)
 8001c86:	70da      	strb	r2, [r3, #3]
                DHCP_REAL_SIP[0]=svr_addr[0];
 8001c88:	793a      	ldrb	r2, [r7, #4]
 8001c8a:	4b16      	ldr	r3, [pc, #88]	; (8001ce4 <parseDHCPMSG+0x438>)
 8001c8c:	701a      	strb	r2, [r3, #0]
                DHCP_REAL_SIP[1]=svr_addr[1];
 8001c8e:	797a      	ldrb	r2, [r7, #5]
 8001c90:	4b14      	ldr	r3, [pc, #80]	; (8001ce4 <parseDHCPMSG+0x438>)
 8001c92:	705a      	strb	r2, [r3, #1]
                DHCP_REAL_SIP[2]=svr_addr[2];
 8001c94:	79ba      	ldrb	r2, [r7, #6]
 8001c96:	4b13      	ldr	r3, [pc, #76]	; (8001ce4 <parseDHCPMSG+0x438>)
 8001c98:	709a      	strb	r2, [r3, #2]
                DHCP_REAL_SIP[3]=svr_addr[3];
 8001c9a:	79fa      	ldrb	r2, [r7, #7]
 8001c9c:	4b11      	ldr	r3, [pc, #68]	; (8001ce4 <parseDHCPMSG+0x438>)
 8001c9e:	70da      	strb	r2, [r3, #3]
   				break;
 8001ca0:	e00c      	b.n	8001cbc <parseDHCPMSG+0x410>
   			default :
   				p++;
 8001ca2:	697b      	ldr	r3, [r7, #20]
 8001ca4:	3301      	adds	r3, #1
 8001ca6:	617b      	str	r3, [r7, #20]
   				opt_len = *p++;
 8001ca8:	697b      	ldr	r3, [r7, #20]
 8001caa:	1c5a      	adds	r2, r3, #1
 8001cac:	617a      	str	r2, [r7, #20]
 8001cae:	781b      	ldrb	r3, [r3, #0]
 8001cb0:	72fb      	strb	r3, [r7, #11]
   				p += opt_len;
 8001cb2:	7afb      	ldrb	r3, [r7, #11]
 8001cb4:	697a      	ldr	r2, [r7, #20]
 8001cb6:	4413      	add	r3, r2
 8001cb8:	617b      	str	r3, [r7, #20]
   				break;
 8001cba:	bf00      	nop
		while ( p < e ) {
 8001cbc:	697a      	ldr	r2, [r7, #20]
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	429a      	cmp	r2, r3
 8001cc2:	f4ff ae8a 	bcc.w	80019da <parseDHCPMSG+0x12e>
			} // switch
		} // while
	} // if
	return	type;
 8001cc6:	f997 3013 	ldrsb.w	r3, [r7, #19]
}
 8001cca:	4618      	mov	r0, r3
 8001ccc:	371c      	adds	r7, #28
 8001cce:	46bd      	mov	sp, r7
 8001cd0:	bd90      	pop	{r4, r7, pc}
 8001cd2:	bf00      	nop
 8001cd4:	2000024c 	.word	0x2000024c
 8001cd8:	20000254 	.word	0x20000254
 8001cdc:	20000000 	.word	0x20000000
 8001ce0:	20000308 	.word	0x20000308
 8001ce4:	20000304 	.word	0x20000304

08001ce8 <DHCP_run>:

uint8_t DHCP_run(void)
{
 8001ce8:	b580      	push	{r7, lr}
 8001cea:	b082      	sub	sp, #8
 8001cec:	af00      	add	r7, sp, #0
	uint8_t  type;
	uint8_t  ret;

	if(dhcp_state == STATE_DHCP_STOP) return DHCP_STOPPED;
 8001cee:	4b7f      	ldr	r3, [pc, #508]	; (8001eec <DHCP_run+0x204>)
 8001cf0:	f993 3000 	ldrsb.w	r3, [r3]
 8001cf4:	2b06      	cmp	r3, #6
 8001cf6:	d101      	bne.n	8001cfc <DHCP_run+0x14>
 8001cf8:	2305      	movs	r3, #5
 8001cfa:	e0f3      	b.n	8001ee4 <DHCP_run+0x1fc>

	if(getSn_SR(DHCP_SOCKET) != SOCK_UDP)
 8001cfc:	4b7c      	ldr	r3, [pc, #496]	; (8001ef0 <DHCP_run+0x208>)
 8001cfe:	781b      	ldrb	r3, [r3, #0]
 8001d00:	009b      	lsls	r3, r3, #2
 8001d02:	3301      	adds	r3, #1
 8001d04:	00db      	lsls	r3, r3, #3
 8001d06:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8001d0a:	4618      	mov	r0, r3
 8001d0c:	f003 fc34 	bl	8005578 <WIZCHIP_READ>
 8001d10:	4603      	mov	r3, r0
 8001d12:	2b22      	cmp	r3, #34	; 0x22
 8001d14:	d006      	beq.n	8001d24 <DHCP_run+0x3c>
	   socket(DHCP_SOCKET, Sn_MR_UDP, DHCP_CLIENT_PORT, 0x00);
 8001d16:	4b76      	ldr	r3, [pc, #472]	; (8001ef0 <DHCP_run+0x208>)
 8001d18:	7818      	ldrb	r0, [r3, #0]
 8001d1a:	2300      	movs	r3, #0
 8001d1c:	2244      	movs	r2, #68	; 0x44
 8001d1e:	2102      	movs	r1, #2
 8001d20:	f002 f80a 	bl	8003d38 <socket>

	ret = DHCP_RUNNING;
 8001d24:	2301      	movs	r3, #1
 8001d26:	71fb      	strb	r3, [r7, #7]
	type = parseDHCPMSG();
 8001d28:	f7ff fdc0 	bl	80018ac <parseDHCPMSG>
 8001d2c:	4603      	mov	r3, r0
 8001d2e:	71bb      	strb	r3, [r7, #6]

	switch ( dhcp_state ) {
 8001d30:	4b6e      	ldr	r3, [pc, #440]	; (8001eec <DHCP_run+0x204>)
 8001d32:	f993 3000 	ldrsb.w	r3, [r3]
 8001d36:	2b04      	cmp	r3, #4
 8001d38:	f200 80d0 	bhi.w	8001edc <DHCP_run+0x1f4>
 8001d3c:	a201      	add	r2, pc, #4	; (adr r2, 8001d44 <DHCP_run+0x5c>)
 8001d3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d42:	bf00      	nop
 8001d44:	08001d59 	.word	0x08001d59
 8001d48:	08001d7d 	.word	0x08001d7d
 8001d4c:	08001dc1 	.word	0x08001dc1
 8001d50:	08001e11 	.word	0x08001e11
 8001d54:	08001e6b 	.word	0x08001e6b
	   case STATE_DHCP_INIT     :
         DHCP_allocated_ip[0] = 0;
 8001d58:	4b66      	ldr	r3, [pc, #408]	; (8001ef4 <DHCP_run+0x20c>)
 8001d5a:	2200      	movs	r2, #0
 8001d5c:	701a      	strb	r2, [r3, #0]
         DHCP_allocated_ip[1] = 0;
 8001d5e:	4b65      	ldr	r3, [pc, #404]	; (8001ef4 <DHCP_run+0x20c>)
 8001d60:	2200      	movs	r2, #0
 8001d62:	705a      	strb	r2, [r3, #1]
         DHCP_allocated_ip[2] = 0;
 8001d64:	4b63      	ldr	r3, [pc, #396]	; (8001ef4 <DHCP_run+0x20c>)
 8001d66:	2200      	movs	r2, #0
 8001d68:	709a      	strb	r2, [r3, #2]
         DHCP_allocated_ip[3] = 0;
 8001d6a:	4b62      	ldr	r3, [pc, #392]	; (8001ef4 <DHCP_run+0x20c>)
 8001d6c:	2200      	movs	r2, #0
 8001d6e:	70da      	strb	r2, [r3, #3]
   		send_DHCP_DISCOVER();
 8001d70:	f7fe fffa 	bl	8000d68 <send_DHCP_DISCOVER>
   		dhcp_state = STATE_DHCP_DISCOVER;
 8001d74:	4b5d      	ldr	r3, [pc, #372]	; (8001eec <DHCP_run+0x204>)
 8001d76:	2201      	movs	r2, #1
 8001d78:	701a      	strb	r2, [r3, #0]
   		break;
 8001d7a:	e0b2      	b.n	8001ee2 <DHCP_run+0x1fa>
		case STATE_DHCP_DISCOVER :
			if (type == DHCP_OFFER){
 8001d7c:	79bb      	ldrb	r3, [r7, #6]
 8001d7e:	2b02      	cmp	r3, #2
 8001d80:	d119      	bne.n	8001db6 <DHCP_run+0xce>
#ifdef _DHCP_DEBUG_
				printf("> Receive DHCP_OFFER\r\n");
#endif
            DHCP_allocated_ip[0] = pDHCPMSG->yiaddr[0];
 8001d82:	4b5d      	ldr	r3, [pc, #372]	; (8001ef8 <DHCP_run+0x210>)
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	7c1a      	ldrb	r2, [r3, #16]
 8001d88:	4b5a      	ldr	r3, [pc, #360]	; (8001ef4 <DHCP_run+0x20c>)
 8001d8a:	701a      	strb	r2, [r3, #0]
            DHCP_allocated_ip[1] = pDHCPMSG->yiaddr[1];
 8001d8c:	4b5a      	ldr	r3, [pc, #360]	; (8001ef8 <DHCP_run+0x210>)
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	7c5a      	ldrb	r2, [r3, #17]
 8001d92:	4b58      	ldr	r3, [pc, #352]	; (8001ef4 <DHCP_run+0x20c>)
 8001d94:	705a      	strb	r2, [r3, #1]
            DHCP_allocated_ip[2] = pDHCPMSG->yiaddr[2];
 8001d96:	4b58      	ldr	r3, [pc, #352]	; (8001ef8 <DHCP_run+0x210>)
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	7c9a      	ldrb	r2, [r3, #18]
 8001d9c:	4b55      	ldr	r3, [pc, #340]	; (8001ef4 <DHCP_run+0x20c>)
 8001d9e:	709a      	strb	r2, [r3, #2]
            DHCP_allocated_ip[3] = pDHCPMSG->yiaddr[3];
 8001da0:	4b55      	ldr	r3, [pc, #340]	; (8001ef8 <DHCP_run+0x210>)
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	7cda      	ldrb	r2, [r3, #19]
 8001da6:	4b53      	ldr	r3, [pc, #332]	; (8001ef4 <DHCP_run+0x20c>)
 8001da8:	70da      	strb	r2, [r3, #3]

				send_DHCP_REQUEST();
 8001daa:	f7ff f9a3 	bl	80010f4 <send_DHCP_REQUEST>
				dhcp_state = STATE_DHCP_REQUEST;
 8001dae:	4b4f      	ldr	r3, [pc, #316]	; (8001eec <DHCP_run+0x204>)
 8001db0:	2202      	movs	r2, #2
 8001db2:	701a      	strb	r2, [r3, #0]
			} else ret = check_DHCP_timeout();
         break;
 8001db4:	e095      	b.n	8001ee2 <DHCP_run+0x1fa>
			} else ret = check_DHCP_timeout();
 8001db6:	f000 f8b1 	bl	8001f1c <check_DHCP_timeout>
 8001dba:	4603      	mov	r3, r0
 8001dbc:	71fb      	strb	r3, [r7, #7]
         break;
 8001dbe:	e090      	b.n	8001ee2 <DHCP_run+0x1fa>

		case STATE_DHCP_REQUEST :
			if (type == DHCP_ACK) {
 8001dc0:	79bb      	ldrb	r3, [r7, #6]
 8001dc2:	2b05      	cmp	r3, #5
 8001dc4:	d116      	bne.n	8001df4 <DHCP_run+0x10c>

#ifdef _DHCP_DEBUG_
				printf("> Receive DHCP_ACK\r\n");
#endif
				if (check_DHCP_leasedIP()) {
 8001dc6:	f000 f909 	bl	8001fdc <check_DHCP_leasedIP>
 8001dca:	4603      	mov	r3, r0
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d008      	beq.n	8001de2 <DHCP_run+0xfa>
					// Network info assignment from DHCP
					dhcp_ip_assign();
 8001dd0:	4b4a      	ldr	r3, [pc, #296]	; (8001efc <DHCP_run+0x214>)
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	4798      	blx	r3
					reset_DHCP_timeout();
 8001dd6:	f000 f9d3 	bl	8002180 <reset_DHCP_timeout>

					dhcp_state = STATE_DHCP_LEASED;
 8001dda:	4b44      	ldr	r3, [pc, #272]	; (8001eec <DHCP_run+0x204>)
 8001ddc:	2203      	movs	r2, #3
 8001dde:	701a      	strb	r2, [r3, #0]

				reset_DHCP_timeout();

				dhcp_state = STATE_DHCP_DISCOVER;
			} else ret = check_DHCP_timeout();
		break;
 8001de0:	e07f      	b.n	8001ee2 <DHCP_run+0x1fa>
					reset_DHCP_timeout();
 8001de2:	f000 f9cd 	bl	8002180 <reset_DHCP_timeout>
					dhcp_ip_conflict();
 8001de6:	4b46      	ldr	r3, [pc, #280]	; (8001f00 <DHCP_run+0x218>)
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	4798      	blx	r3
				    dhcp_state = STATE_DHCP_INIT;
 8001dec:	4b3f      	ldr	r3, [pc, #252]	; (8001eec <DHCP_run+0x204>)
 8001dee:	2200      	movs	r2, #0
 8001df0:	701a      	strb	r2, [r3, #0]
		break;
 8001df2:	e076      	b.n	8001ee2 <DHCP_run+0x1fa>
			} else if (type == DHCP_NAK) {
 8001df4:	79bb      	ldrb	r3, [r7, #6]
 8001df6:	2b06      	cmp	r3, #6
 8001df8:	d105      	bne.n	8001e06 <DHCP_run+0x11e>
				reset_DHCP_timeout();
 8001dfa:	f000 f9c1 	bl	8002180 <reset_DHCP_timeout>
				dhcp_state = STATE_DHCP_DISCOVER;
 8001dfe:	4b3b      	ldr	r3, [pc, #236]	; (8001eec <DHCP_run+0x204>)
 8001e00:	2201      	movs	r2, #1
 8001e02:	701a      	strb	r2, [r3, #0]
		break;
 8001e04:	e06d      	b.n	8001ee2 <DHCP_run+0x1fa>
			} else ret = check_DHCP_timeout();
 8001e06:	f000 f889 	bl	8001f1c <check_DHCP_timeout>
 8001e0a:	4603      	mov	r3, r0
 8001e0c:	71fb      	strb	r3, [r7, #7]
		break;
 8001e0e:	e068      	b.n	8001ee2 <DHCP_run+0x1fa>

		case STATE_DHCP_LEASED :
		   ret = DHCP_IP_LEASED;
 8001e10:	2304      	movs	r3, #4
 8001e12:	71fb      	strb	r3, [r7, #7]
			if ((dhcp_lease_time != INFINITE_LEASETIME) && ((dhcp_lease_time/2) < dhcp_tick_1s)) {
 8001e14:	4b3b      	ldr	r3, [pc, #236]	; (8001f04 <DHCP_run+0x21c>)
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001e1c:	d060      	beq.n	8001ee0 <DHCP_run+0x1f8>
 8001e1e:	4b39      	ldr	r3, [pc, #228]	; (8001f04 <DHCP_run+0x21c>)
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	085a      	lsrs	r2, r3, #1
 8001e24:	4b38      	ldr	r3, [pc, #224]	; (8001f08 <DHCP_run+0x220>)
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	429a      	cmp	r2, r3
 8001e2a:	d259      	bcs.n	8001ee0 <DHCP_run+0x1f8>
				
#ifdef _DHCP_DEBUG_
 				printf("> Maintains the IP address \r\n");
#endif

				type = 0;
 8001e2c:	2300      	movs	r3, #0
 8001e2e:	71bb      	strb	r3, [r7, #6]
				OLD_allocated_ip[0] = DHCP_allocated_ip[0];
 8001e30:	4b30      	ldr	r3, [pc, #192]	; (8001ef4 <DHCP_run+0x20c>)
 8001e32:	781a      	ldrb	r2, [r3, #0]
 8001e34:	4b35      	ldr	r3, [pc, #212]	; (8001f0c <DHCP_run+0x224>)
 8001e36:	701a      	strb	r2, [r3, #0]
				OLD_allocated_ip[1] = DHCP_allocated_ip[1];
 8001e38:	4b2e      	ldr	r3, [pc, #184]	; (8001ef4 <DHCP_run+0x20c>)
 8001e3a:	785a      	ldrb	r2, [r3, #1]
 8001e3c:	4b33      	ldr	r3, [pc, #204]	; (8001f0c <DHCP_run+0x224>)
 8001e3e:	705a      	strb	r2, [r3, #1]
				OLD_allocated_ip[2] = DHCP_allocated_ip[2];
 8001e40:	4b2c      	ldr	r3, [pc, #176]	; (8001ef4 <DHCP_run+0x20c>)
 8001e42:	789a      	ldrb	r2, [r3, #2]
 8001e44:	4b31      	ldr	r3, [pc, #196]	; (8001f0c <DHCP_run+0x224>)
 8001e46:	709a      	strb	r2, [r3, #2]
				OLD_allocated_ip[3] = DHCP_allocated_ip[3];
 8001e48:	4b2a      	ldr	r3, [pc, #168]	; (8001ef4 <DHCP_run+0x20c>)
 8001e4a:	78da      	ldrb	r2, [r3, #3]
 8001e4c:	4b2f      	ldr	r3, [pc, #188]	; (8001f0c <DHCP_run+0x224>)
 8001e4e:	70da      	strb	r2, [r3, #3]
				
				DHCP_XID++;
 8001e50:	4b2f      	ldr	r3, [pc, #188]	; (8001f10 <DHCP_run+0x228>)
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	3301      	adds	r3, #1
 8001e56:	4a2e      	ldr	r2, [pc, #184]	; (8001f10 <DHCP_run+0x228>)
 8001e58:	6013      	str	r3, [r2, #0]

				send_DHCP_REQUEST();
 8001e5a:	f7ff f94b 	bl	80010f4 <send_DHCP_REQUEST>

				reset_DHCP_timeout();
 8001e5e:	f000 f98f 	bl	8002180 <reset_DHCP_timeout>

				dhcp_state = STATE_DHCP_REREQUEST;
 8001e62:	4b22      	ldr	r3, [pc, #136]	; (8001eec <DHCP_run+0x204>)
 8001e64:	2204      	movs	r2, #4
 8001e66:	701a      	strb	r2, [r3, #0]
			}
		break;
 8001e68:	e03a      	b.n	8001ee0 <DHCP_run+0x1f8>

		case STATE_DHCP_REREQUEST :
		   ret = DHCP_IP_LEASED;
 8001e6a:	2304      	movs	r3, #4
 8001e6c:	71fb      	strb	r3, [r7, #7]
			if (type == DHCP_ACK) {
 8001e6e:	79bb      	ldrb	r3, [r7, #6]
 8001e70:	2b05      	cmp	r3, #5
 8001e72:	d125      	bne.n	8001ec0 <DHCP_run+0x1d8>
				dhcp_retry_count = 0;
 8001e74:	4b27      	ldr	r3, [pc, #156]	; (8001f14 <DHCP_run+0x22c>)
 8001e76:	2200      	movs	r2, #0
 8001e78:	701a      	strb	r2, [r3, #0]
				if (OLD_allocated_ip[0] != DHCP_allocated_ip[0] || 
 8001e7a:	4b24      	ldr	r3, [pc, #144]	; (8001f0c <DHCP_run+0x224>)
 8001e7c:	781a      	ldrb	r2, [r3, #0]
 8001e7e:	4b1d      	ldr	r3, [pc, #116]	; (8001ef4 <DHCP_run+0x20c>)
 8001e80:	781b      	ldrb	r3, [r3, #0]
 8001e82:	429a      	cmp	r2, r3
 8001e84:	d111      	bne.n	8001eaa <DHCP_run+0x1c2>
				    OLD_allocated_ip[1] != DHCP_allocated_ip[1] ||
 8001e86:	4b21      	ldr	r3, [pc, #132]	; (8001f0c <DHCP_run+0x224>)
 8001e88:	785a      	ldrb	r2, [r3, #1]
 8001e8a:	4b1a      	ldr	r3, [pc, #104]	; (8001ef4 <DHCP_run+0x20c>)
 8001e8c:	785b      	ldrb	r3, [r3, #1]
				if (OLD_allocated_ip[0] != DHCP_allocated_ip[0] || 
 8001e8e:	429a      	cmp	r2, r3
 8001e90:	d10b      	bne.n	8001eaa <DHCP_run+0x1c2>
				    OLD_allocated_ip[2] != DHCP_allocated_ip[2] ||
 8001e92:	4b1e      	ldr	r3, [pc, #120]	; (8001f0c <DHCP_run+0x224>)
 8001e94:	789a      	ldrb	r2, [r3, #2]
 8001e96:	4b17      	ldr	r3, [pc, #92]	; (8001ef4 <DHCP_run+0x20c>)
 8001e98:	789b      	ldrb	r3, [r3, #2]
				    OLD_allocated_ip[1] != DHCP_allocated_ip[1] ||
 8001e9a:	429a      	cmp	r2, r3
 8001e9c:	d105      	bne.n	8001eaa <DHCP_run+0x1c2>
				    OLD_allocated_ip[3] != DHCP_allocated_ip[3]) 
 8001e9e:	4b1b      	ldr	r3, [pc, #108]	; (8001f0c <DHCP_run+0x224>)
 8001ea0:	78da      	ldrb	r2, [r3, #3]
 8001ea2:	4b14      	ldr	r3, [pc, #80]	; (8001ef4 <DHCP_run+0x20c>)
 8001ea4:	78db      	ldrb	r3, [r3, #3]
				    OLD_allocated_ip[2] != DHCP_allocated_ip[2] ||
 8001ea6:	429a      	cmp	r2, r3
 8001ea8:	d004      	beq.n	8001eb4 <DHCP_run+0x1cc>
				{
					ret = DHCP_IP_CHANGED;
 8001eaa:	2303      	movs	r3, #3
 8001eac:	71fb      	strb	r3, [r7, #7]
					dhcp_ip_update();
 8001eae:	4b1a      	ldr	r3, [pc, #104]	; (8001f18 <DHCP_run+0x230>)
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	4798      	blx	r3
					
				}
         #ifdef _DHCP_DEBUG_
            else printf(">IP is continued.\r\n");
         #endif            				
				reset_DHCP_timeout();
 8001eb4:	f000 f964 	bl	8002180 <reset_DHCP_timeout>
				dhcp_state = STATE_DHCP_LEASED;
 8001eb8:	4b0c      	ldr	r3, [pc, #48]	; (8001eec <DHCP_run+0x204>)
 8001eba:	2203      	movs	r2, #3
 8001ebc:	701a      	strb	r2, [r3, #0]

				reset_DHCP_timeout();

				dhcp_state = STATE_DHCP_DISCOVER;
			} else ret = check_DHCP_timeout();
	   	break;
 8001ebe:	e010      	b.n	8001ee2 <DHCP_run+0x1fa>
			} else if (type == DHCP_NAK) {
 8001ec0:	79bb      	ldrb	r3, [r7, #6]
 8001ec2:	2b06      	cmp	r3, #6
 8001ec4:	d105      	bne.n	8001ed2 <DHCP_run+0x1ea>
				reset_DHCP_timeout();
 8001ec6:	f000 f95b 	bl	8002180 <reset_DHCP_timeout>
				dhcp_state = STATE_DHCP_DISCOVER;
 8001eca:	4b08      	ldr	r3, [pc, #32]	; (8001eec <DHCP_run+0x204>)
 8001ecc:	2201      	movs	r2, #1
 8001ece:	701a      	strb	r2, [r3, #0]
	   	break;
 8001ed0:	e007      	b.n	8001ee2 <DHCP_run+0x1fa>
			} else ret = check_DHCP_timeout();
 8001ed2:	f000 f823 	bl	8001f1c <check_DHCP_timeout>
 8001ed6:	4603      	mov	r3, r0
 8001ed8:	71fb      	strb	r3, [r7, #7]
	   	break;
 8001eda:	e002      	b.n	8001ee2 <DHCP_run+0x1fa>
		default :
   		break;
 8001edc:	bf00      	nop
 8001ede:	e000      	b.n	8001ee2 <DHCP_run+0x1fa>
		break;
 8001ee0:	bf00      	nop
	}

	return ret;
 8001ee2:	79fb      	ldrb	r3, [r7, #7]
}
 8001ee4:	4618      	mov	r0, r3
 8001ee6:	3708      	adds	r7, #8
 8001ee8:	46bd      	mov	sp, r7
 8001eea:	bd80      	pop	{r7, pc}
 8001eec:	20000258 	.word	0x20000258
 8001ef0:	20000310 	.word	0x20000310
 8001ef4:	20000248 	.word	0x20000248
 8001ef8:	2000030c 	.word	0x2000030c
 8001efc:	20000010 	.word	0x20000010
 8001f00:	20000018 	.word	0x20000018
 8001f04:	20000000 	.word	0x20000000
 8001f08:	2000025c 	.word	0x2000025c
 8001f0c:	20000244 	.word	0x20000244
 8001f10:	20000300 	.word	0x20000300
 8001f14:	20000259 	.word	0x20000259
 8001f18:	20000014 	.word	0x20000014

08001f1c <check_DHCP_timeout>:
   close(DHCP_SOCKET);
   dhcp_state = STATE_DHCP_STOP;
}

uint8_t check_DHCP_timeout(void)
{
 8001f1c:	b580      	push	{r7, lr}
 8001f1e:	b082      	sub	sp, #8
 8001f20:	af00      	add	r7, sp, #0
	uint8_t ret = DHCP_RUNNING;
 8001f22:	2301      	movs	r3, #1
 8001f24:	71fb      	strb	r3, [r7, #7]
	
	if (dhcp_retry_count < MAX_DHCP_RETRY) {
 8001f26:	4b29      	ldr	r3, [pc, #164]	; (8001fcc <check_DHCP_timeout+0xb0>)
 8001f28:	f993 3000 	ldrsb.w	r3, [r3]
 8001f2c:	2b01      	cmp	r3, #1
 8001f2e:	dc2d      	bgt.n	8001f8c <check_DHCP_timeout+0x70>
		if (dhcp_tick_next < dhcp_tick_1s) {
 8001f30:	4b27      	ldr	r3, [pc, #156]	; (8001fd0 <check_DHCP_timeout+0xb4>)
 8001f32:	681a      	ldr	r2, [r3, #0]
 8001f34:	4b27      	ldr	r3, [pc, #156]	; (8001fd4 <check_DHCP_timeout+0xb8>)
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	429a      	cmp	r2, r3
 8001f3a:	d242      	bcs.n	8001fc2 <check_DHCP_timeout+0xa6>

			switch ( dhcp_state ) {
 8001f3c:	4b26      	ldr	r3, [pc, #152]	; (8001fd8 <check_DHCP_timeout+0xbc>)
 8001f3e:	f993 3000 	ldrsb.w	r3, [r3]
 8001f42:	2b04      	cmp	r3, #4
 8001f44:	d00c      	beq.n	8001f60 <check_DHCP_timeout+0x44>
 8001f46:	2b04      	cmp	r3, #4
 8001f48:	dc0d      	bgt.n	8001f66 <check_DHCP_timeout+0x4a>
 8001f4a:	2b01      	cmp	r3, #1
 8001f4c:	d002      	beq.n	8001f54 <check_DHCP_timeout+0x38>
 8001f4e:	2b02      	cmp	r3, #2
 8001f50:	d003      	beq.n	8001f5a <check_DHCP_timeout+0x3e>
					
					send_DHCP_REQUEST();
				break;
		
				default :
				break;
 8001f52:	e008      	b.n	8001f66 <check_DHCP_timeout+0x4a>
					send_DHCP_DISCOVER();
 8001f54:	f7fe ff08 	bl	8000d68 <send_DHCP_DISCOVER>
				break;
 8001f58:	e006      	b.n	8001f68 <check_DHCP_timeout+0x4c>
					send_DHCP_REQUEST();
 8001f5a:	f7ff f8cb 	bl	80010f4 <send_DHCP_REQUEST>
				break;
 8001f5e:	e003      	b.n	8001f68 <check_DHCP_timeout+0x4c>
					send_DHCP_REQUEST();
 8001f60:	f7ff f8c8 	bl	80010f4 <send_DHCP_REQUEST>
				break;
 8001f64:	e000      	b.n	8001f68 <check_DHCP_timeout+0x4c>
				break;
 8001f66:	bf00      	nop
			}

			dhcp_tick_1s = 0;
 8001f68:	4b1a      	ldr	r3, [pc, #104]	; (8001fd4 <check_DHCP_timeout+0xb8>)
 8001f6a:	2200      	movs	r2, #0
 8001f6c:	601a      	str	r2, [r3, #0]
			dhcp_tick_next = dhcp_tick_1s + DHCP_WAIT_TIME;
 8001f6e:	4b19      	ldr	r3, [pc, #100]	; (8001fd4 <check_DHCP_timeout+0xb8>)
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	330a      	adds	r3, #10
 8001f74:	4a16      	ldr	r2, [pc, #88]	; (8001fd0 <check_DHCP_timeout+0xb4>)
 8001f76:	6013      	str	r3, [r2, #0]
			dhcp_retry_count++;
 8001f78:	4b14      	ldr	r3, [pc, #80]	; (8001fcc <check_DHCP_timeout+0xb0>)
 8001f7a:	f993 3000 	ldrsb.w	r3, [r3]
 8001f7e:	b2db      	uxtb	r3, r3
 8001f80:	3301      	adds	r3, #1
 8001f82:	b2db      	uxtb	r3, r3
 8001f84:	b25a      	sxtb	r2, r3
 8001f86:	4b11      	ldr	r3, [pc, #68]	; (8001fcc <check_DHCP_timeout+0xb0>)
 8001f88:	701a      	strb	r2, [r3, #0]
 8001f8a:	e01a      	b.n	8001fc2 <check_DHCP_timeout+0xa6>
		}
	} else { // timeout occurred

		switch(dhcp_state) {
 8001f8c:	4b12      	ldr	r3, [pc, #72]	; (8001fd8 <check_DHCP_timeout+0xbc>)
 8001f8e:	f993 3000 	ldrsb.w	r3, [r3]
 8001f92:	2b04      	cmp	r3, #4
 8001f94:	d00c      	beq.n	8001fb0 <check_DHCP_timeout+0x94>
 8001f96:	2b04      	cmp	r3, #4
 8001f98:	dc10      	bgt.n	8001fbc <check_DHCP_timeout+0xa0>
 8001f9a:	2b01      	cmp	r3, #1
 8001f9c:	d002      	beq.n	8001fa4 <check_DHCP_timeout+0x88>
 8001f9e:	2b02      	cmp	r3, #2
 8001fa0:	d006      	beq.n	8001fb0 <check_DHCP_timeout+0x94>
			case STATE_DHCP_REREQUEST:
				send_DHCP_DISCOVER();
				dhcp_state = STATE_DHCP_DISCOVER;
				break;
			default :
				break;
 8001fa2:	e00b      	b.n	8001fbc <check_DHCP_timeout+0xa0>
				dhcp_state = STATE_DHCP_INIT;
 8001fa4:	4b0c      	ldr	r3, [pc, #48]	; (8001fd8 <check_DHCP_timeout+0xbc>)
 8001fa6:	2200      	movs	r2, #0
 8001fa8:	701a      	strb	r2, [r3, #0]
				ret = DHCP_FAILED;
 8001faa:	2300      	movs	r3, #0
 8001fac:	71fb      	strb	r3, [r7, #7]
				break;
 8001fae:	e006      	b.n	8001fbe <check_DHCP_timeout+0xa2>
				send_DHCP_DISCOVER();
 8001fb0:	f7fe feda 	bl	8000d68 <send_DHCP_DISCOVER>
				dhcp_state = STATE_DHCP_DISCOVER;
 8001fb4:	4b08      	ldr	r3, [pc, #32]	; (8001fd8 <check_DHCP_timeout+0xbc>)
 8001fb6:	2201      	movs	r2, #1
 8001fb8:	701a      	strb	r2, [r3, #0]
				break;
 8001fba:	e000      	b.n	8001fbe <check_DHCP_timeout+0xa2>
				break;
 8001fbc:	bf00      	nop
		}
		reset_DHCP_timeout();
 8001fbe:	f000 f8df 	bl	8002180 <reset_DHCP_timeout>
	}
	return ret;
 8001fc2:	79fb      	ldrb	r3, [r7, #7]
}
 8001fc4:	4618      	mov	r0, r3
 8001fc6:	3708      	adds	r7, #8
 8001fc8:	46bd      	mov	sp, r7
 8001fca:	bd80      	pop	{r7, pc}
 8001fcc:	20000259 	.word	0x20000259
 8001fd0:	20000004 	.word	0x20000004
 8001fd4:	2000025c 	.word	0x2000025c
 8001fd8:	20000258 	.word	0x20000258

08001fdc <check_DHCP_leasedIP>:

int8_t check_DHCP_leasedIP(void)
{
 8001fdc:	b580      	push	{r7, lr}
 8001fde:	b084      	sub	sp, #16
 8001fe0:	af02      	add	r7, sp, #8
	uint8_t tmp;
	int32_t ret;

	//WIZchip RCR value changed for ARP Timeout count control
	tmp = getRCR();
 8001fe2:	f44f 50d8 	mov.w	r0, #6912	; 0x1b00
 8001fe6:	f003 fac7 	bl	8005578 <WIZCHIP_READ>
 8001fea:	4603      	mov	r3, r0
 8001fec:	71fb      	strb	r3, [r7, #7]
	setRCR(0x03);
 8001fee:	2103      	movs	r1, #3
 8001ff0:	f44f 50d8 	mov.w	r0, #6912	; 0x1b00
 8001ff4:	f003 fb0c 	bl	8005610 <WIZCHIP_WRITE>

	// IP conflict detection : ARP request - ARP reply
	// Broadcasting ARP Request for check the IP conflict using UDP sendto() function
	ret = sendto(DHCP_SOCKET, (uint8_t *)"CHECK_IP_CONFLICT", 17, DHCP_allocated_ip, 5000);
 8001ff8:	4b13      	ldr	r3, [pc, #76]	; (8002048 <check_DHCP_leasedIP+0x6c>)
 8001ffa:	7818      	ldrb	r0, [r3, #0]
 8001ffc:	f241 3388 	movw	r3, #5000	; 0x1388
 8002000:	9300      	str	r3, [sp, #0]
 8002002:	4b12      	ldr	r3, [pc, #72]	; (800204c <check_DHCP_leasedIP+0x70>)
 8002004:	2211      	movs	r2, #17
 8002006:	4912      	ldr	r1, [pc, #72]	; (8002050 <check_DHCP_leasedIP+0x74>)
 8002008:	f002 faa6 	bl	8004558 <sendto>
 800200c:	6038      	str	r0, [r7, #0]

	// RCR value restore
	setRCR(tmp);
 800200e:	79fb      	ldrb	r3, [r7, #7]
 8002010:	4619      	mov	r1, r3
 8002012:	f44f 50d8 	mov.w	r0, #6912	; 0x1b00
 8002016:	f003 fafb 	bl	8005610 <WIZCHIP_WRITE>

	if(ret == SOCKERR_TIMEOUT) {
 800201a:	683b      	ldr	r3, [r7, #0]
 800201c:	f113 0f0d 	cmn.w	r3, #13
 8002020:	d101      	bne.n	8002026 <check_DHCP_leasedIP+0x4a>

#ifdef _DHCP_DEBUG_
		printf("\r\n> Check leased IP - OK\r\n");
#endif

		return 1;
 8002022:	2301      	movs	r3, #1
 8002024:	e00c      	b.n	8002040 <check_DHCP_leasedIP+0x64>
	} else {
		// Received ARP reply or etc : IP address conflict occur, DHCP Failed
		send_DHCP_DECLINE();
 8002026:	f7ff faef 	bl	8001608 <send_DHCP_DECLINE>

		ret = dhcp_tick_1s;
 800202a:	4b0a      	ldr	r3, [pc, #40]	; (8002054 <check_DHCP_leasedIP+0x78>)
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	603b      	str	r3, [r7, #0]
		while((dhcp_tick_1s - ret) < 2) ;   // wait for 1s over; wait to complete to send DECLINE message;
 8002030:	bf00      	nop
 8002032:	4b08      	ldr	r3, [pc, #32]	; (8002054 <check_DHCP_leasedIP+0x78>)
 8002034:	681a      	ldr	r2, [r3, #0]
 8002036:	683b      	ldr	r3, [r7, #0]
 8002038:	1ad3      	subs	r3, r2, r3
 800203a:	2b01      	cmp	r3, #1
 800203c:	d9f9      	bls.n	8002032 <check_DHCP_leasedIP+0x56>

		return 0;
 800203e:	2300      	movs	r3, #0
	}
}	
 8002040:	4618      	mov	r0, r3
 8002042:	3708      	adds	r7, #8
 8002044:	46bd      	mov	sp, r7
 8002046:	bd80      	pop	{r7, pc}
 8002048:	20000310 	.word	0x20000310
 800204c:	20000248 	.word	0x20000248
 8002050:	0800e2a8 	.word	0x0800e2a8
 8002054:	2000025c 	.word	0x2000025c

08002058 <DHCP_init>:

void DHCP_init(uint8_t s, uint8_t * buf)
{
 8002058:	b580      	push	{r7, lr}
 800205a:	b084      	sub	sp, #16
 800205c:	af00      	add	r7, sp, #0
 800205e:	4603      	mov	r3, r0
 8002060:	6039      	str	r1, [r7, #0]
 8002062:	71fb      	strb	r3, [r7, #7]
   uint8_t zeroip[4] = {0,0,0,0};
 8002064:	2300      	movs	r3, #0
 8002066:	60fb      	str	r3, [r7, #12]
   getSHAR(DHCP_CHADDR);
 8002068:	2206      	movs	r2, #6
 800206a:	493f      	ldr	r1, [pc, #252]	; (8002168 <DHCP_init+0x110>)
 800206c:	f44f 6010 	mov.w	r0, #2304	; 0x900
 8002070:	f003 fb1c 	bl	80056ac <WIZCHIP_READ_BUF>
   if((DHCP_CHADDR[0] | DHCP_CHADDR[1]  | DHCP_CHADDR[2] | DHCP_CHADDR[3] | DHCP_CHADDR[4] | DHCP_CHADDR[5]) == 0x00)
 8002074:	4b3c      	ldr	r3, [pc, #240]	; (8002168 <DHCP_init+0x110>)
 8002076:	781a      	ldrb	r2, [r3, #0]
 8002078:	4b3b      	ldr	r3, [pc, #236]	; (8002168 <DHCP_init+0x110>)
 800207a:	785b      	ldrb	r3, [r3, #1]
 800207c:	4313      	orrs	r3, r2
 800207e:	b2da      	uxtb	r2, r3
 8002080:	4b39      	ldr	r3, [pc, #228]	; (8002168 <DHCP_init+0x110>)
 8002082:	789b      	ldrb	r3, [r3, #2]
 8002084:	4313      	orrs	r3, r2
 8002086:	b2da      	uxtb	r2, r3
 8002088:	4b37      	ldr	r3, [pc, #220]	; (8002168 <DHCP_init+0x110>)
 800208a:	78db      	ldrb	r3, [r3, #3]
 800208c:	4313      	orrs	r3, r2
 800208e:	b2da      	uxtb	r2, r3
 8002090:	4b35      	ldr	r3, [pc, #212]	; (8002168 <DHCP_init+0x110>)
 8002092:	791b      	ldrb	r3, [r3, #4]
 8002094:	4313      	orrs	r3, r2
 8002096:	b2da      	uxtb	r2, r3
 8002098:	4b33      	ldr	r3, [pc, #204]	; (8002168 <DHCP_init+0x110>)
 800209a:	795b      	ldrb	r3, [r3, #5]
 800209c:	4313      	orrs	r3, r2
 800209e:	b2db      	uxtb	r3, r3
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d117      	bne.n	80020d4 <DHCP_init+0x7c>
   {
      // assigning temporary mac address, you should be set SHAR before call this function. 
      DHCP_CHADDR[0] = 0x00;
 80020a4:	4b30      	ldr	r3, [pc, #192]	; (8002168 <DHCP_init+0x110>)
 80020a6:	2200      	movs	r2, #0
 80020a8:	701a      	strb	r2, [r3, #0]
      DHCP_CHADDR[1] = 0x08;
 80020aa:	4b2f      	ldr	r3, [pc, #188]	; (8002168 <DHCP_init+0x110>)
 80020ac:	2208      	movs	r2, #8
 80020ae:	705a      	strb	r2, [r3, #1]
      DHCP_CHADDR[2] = 0xdc;      
 80020b0:	4b2d      	ldr	r3, [pc, #180]	; (8002168 <DHCP_init+0x110>)
 80020b2:	22dc      	movs	r2, #220	; 0xdc
 80020b4:	709a      	strb	r2, [r3, #2]
      DHCP_CHADDR[3] = 0x00;
 80020b6:	4b2c      	ldr	r3, [pc, #176]	; (8002168 <DHCP_init+0x110>)
 80020b8:	2200      	movs	r2, #0
 80020ba:	70da      	strb	r2, [r3, #3]
      DHCP_CHADDR[4] = 0x00;
 80020bc:	4b2a      	ldr	r3, [pc, #168]	; (8002168 <DHCP_init+0x110>)
 80020be:	2200      	movs	r2, #0
 80020c0:	711a      	strb	r2, [r3, #4]
      DHCP_CHADDR[5] = 0x00; 
 80020c2:	4b29      	ldr	r3, [pc, #164]	; (8002168 <DHCP_init+0x110>)
 80020c4:	2200      	movs	r2, #0
 80020c6:	715a      	strb	r2, [r3, #5]
      setSHAR(DHCP_CHADDR);     
 80020c8:	2206      	movs	r2, #6
 80020ca:	4927      	ldr	r1, [pc, #156]	; (8002168 <DHCP_init+0x110>)
 80020cc:	f44f 6010 	mov.w	r0, #2304	; 0x900
 80020d0:	f003 fb4c 	bl	800576c <WIZCHIP_WRITE_BUF>
   }

	DHCP_SOCKET = s; // SOCK_DHCP
 80020d4:	4a25      	ldr	r2, [pc, #148]	; (800216c <DHCP_init+0x114>)
 80020d6:	79fb      	ldrb	r3, [r7, #7]
 80020d8:	7013      	strb	r3, [r2, #0]
	pDHCPMSG = (RIP_MSG*)buf;
 80020da:	4a25      	ldr	r2, [pc, #148]	; (8002170 <DHCP_init+0x118>)
 80020dc:	683b      	ldr	r3, [r7, #0]
 80020de:	6013      	str	r3, [r2, #0]
	DHCP_XID = 0x12345678;
 80020e0:	4b24      	ldr	r3, [pc, #144]	; (8002174 <DHCP_init+0x11c>)
 80020e2:	4a25      	ldr	r2, [pc, #148]	; (8002178 <DHCP_init+0x120>)
 80020e4:	601a      	str	r2, [r3, #0]
	{
		DHCP_XID += DHCP_CHADDR[3];
 80020e6:	4b20      	ldr	r3, [pc, #128]	; (8002168 <DHCP_init+0x110>)
 80020e8:	78db      	ldrb	r3, [r3, #3]
 80020ea:	461a      	mov	r2, r3
 80020ec:	4b21      	ldr	r3, [pc, #132]	; (8002174 <DHCP_init+0x11c>)
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	4413      	add	r3, r2
 80020f2:	4a20      	ldr	r2, [pc, #128]	; (8002174 <DHCP_init+0x11c>)
 80020f4:	6013      	str	r3, [r2, #0]
		DHCP_XID += DHCP_CHADDR[4];
 80020f6:	4b1c      	ldr	r3, [pc, #112]	; (8002168 <DHCP_init+0x110>)
 80020f8:	791b      	ldrb	r3, [r3, #4]
 80020fa:	461a      	mov	r2, r3
 80020fc:	4b1d      	ldr	r3, [pc, #116]	; (8002174 <DHCP_init+0x11c>)
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	4413      	add	r3, r2
 8002102:	4a1c      	ldr	r2, [pc, #112]	; (8002174 <DHCP_init+0x11c>)
 8002104:	6013      	str	r3, [r2, #0]
		DHCP_XID += DHCP_CHADDR[5];
 8002106:	4b18      	ldr	r3, [pc, #96]	; (8002168 <DHCP_init+0x110>)
 8002108:	795b      	ldrb	r3, [r3, #5]
 800210a:	461a      	mov	r2, r3
 800210c:	4b19      	ldr	r3, [pc, #100]	; (8002174 <DHCP_init+0x11c>)
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	4413      	add	r3, r2
 8002112:	4a18      	ldr	r2, [pc, #96]	; (8002174 <DHCP_init+0x11c>)
 8002114:	6013      	str	r3, [r2, #0]
		DHCP_XID += (DHCP_CHADDR[3] ^ DHCP_CHADDR[4] ^ DHCP_CHADDR[5]);
 8002116:	4b14      	ldr	r3, [pc, #80]	; (8002168 <DHCP_init+0x110>)
 8002118:	78da      	ldrb	r2, [r3, #3]
 800211a:	4b13      	ldr	r3, [pc, #76]	; (8002168 <DHCP_init+0x110>)
 800211c:	791b      	ldrb	r3, [r3, #4]
 800211e:	4053      	eors	r3, r2
 8002120:	b2da      	uxtb	r2, r3
 8002122:	4b11      	ldr	r3, [pc, #68]	; (8002168 <DHCP_init+0x110>)
 8002124:	795b      	ldrb	r3, [r3, #5]
 8002126:	4053      	eors	r3, r2
 8002128:	b2db      	uxtb	r3, r3
 800212a:	461a      	mov	r2, r3
 800212c:	4b11      	ldr	r3, [pc, #68]	; (8002174 <DHCP_init+0x11c>)
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	4413      	add	r3, r2
 8002132:	4a10      	ldr	r2, [pc, #64]	; (8002174 <DHCP_init+0x11c>)
 8002134:	6013      	str	r3, [r2, #0]
	}
	// WIZchip Netinfo Clear
	setSIPR(zeroip);
 8002136:	f107 030c 	add.w	r3, r7, #12
 800213a:	2204      	movs	r2, #4
 800213c:	4619      	mov	r1, r3
 800213e:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 8002142:	f003 fb13 	bl	800576c <WIZCHIP_WRITE_BUF>
	setGAR(zeroip);
 8002146:	f107 030c 	add.w	r3, r7, #12
 800214a:	2204      	movs	r2, #4
 800214c:	4619      	mov	r1, r3
 800214e:	f44f 7080 	mov.w	r0, #256	; 0x100
 8002152:	f003 fb0b 	bl	800576c <WIZCHIP_WRITE_BUF>

	reset_DHCP_timeout();
 8002156:	f000 f813 	bl	8002180 <reset_DHCP_timeout>
	dhcp_state = STATE_DHCP_INIT;
 800215a:	4b08      	ldr	r3, [pc, #32]	; (800217c <DHCP_init+0x124>)
 800215c:	2200      	movs	r2, #0
 800215e:	701a      	strb	r2, [r3, #0]
}
 8002160:	bf00      	nop
 8002162:	3710      	adds	r7, #16
 8002164:	46bd      	mov	sp, r7
 8002166:	bd80      	pop	{r7, pc}
 8002168:	200002f8 	.word	0x200002f8
 800216c:	20000310 	.word	0x20000310
 8002170:	2000030c 	.word	0x2000030c
 8002174:	20000300 	.word	0x20000300
 8002178:	12345678 	.word	0x12345678
 800217c:	20000258 	.word	0x20000258

08002180 <reset_DHCP_timeout>:


/* Reset the DHCP timeout count and retry count. */
void reset_DHCP_timeout(void)
{
 8002180:	b480      	push	{r7}
 8002182:	af00      	add	r7, sp, #0
	dhcp_tick_1s = 0;
 8002184:	4b06      	ldr	r3, [pc, #24]	; (80021a0 <reset_DHCP_timeout+0x20>)
 8002186:	2200      	movs	r2, #0
 8002188:	601a      	str	r2, [r3, #0]
	dhcp_tick_next = DHCP_WAIT_TIME;
 800218a:	4b06      	ldr	r3, [pc, #24]	; (80021a4 <reset_DHCP_timeout+0x24>)
 800218c:	220a      	movs	r2, #10
 800218e:	601a      	str	r2, [r3, #0]
	dhcp_retry_count = 0;
 8002190:	4b05      	ldr	r3, [pc, #20]	; (80021a8 <reset_DHCP_timeout+0x28>)
 8002192:	2200      	movs	r2, #0
 8002194:	701a      	strb	r2, [r3, #0]
}
 8002196:	bf00      	nop
 8002198:	46bd      	mov	sp, r7
 800219a:	bc80      	pop	{r7}
 800219c:	4770      	bx	lr
 800219e:	bf00      	nop
 80021a0:	2000025c 	.word	0x2000025c
 80021a4:	20000004 	.word	0x20000004
 80021a8:	20000259 	.word	0x20000259

080021ac <getIPfromDHCP>:
{
	dhcp_tick_1s++;
}

void getIPfromDHCP(uint8_t* ip)
{
 80021ac:	b480      	push	{r7}
 80021ae:	b083      	sub	sp, #12
 80021b0:	af00      	add	r7, sp, #0
 80021b2:	6078      	str	r0, [r7, #4]
	ip[0] = DHCP_allocated_ip[0];
 80021b4:	4b0b      	ldr	r3, [pc, #44]	; (80021e4 <getIPfromDHCP+0x38>)
 80021b6:	781a      	ldrb	r2, [r3, #0]
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	701a      	strb	r2, [r3, #0]
	ip[1] = DHCP_allocated_ip[1];
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	3301      	adds	r3, #1
 80021c0:	4a08      	ldr	r2, [pc, #32]	; (80021e4 <getIPfromDHCP+0x38>)
 80021c2:	7852      	ldrb	r2, [r2, #1]
 80021c4:	701a      	strb	r2, [r3, #0]
	ip[2] = DHCP_allocated_ip[2];	
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	3302      	adds	r3, #2
 80021ca:	4a06      	ldr	r2, [pc, #24]	; (80021e4 <getIPfromDHCP+0x38>)
 80021cc:	7892      	ldrb	r2, [r2, #2]
 80021ce:	701a      	strb	r2, [r3, #0]
	ip[3] = DHCP_allocated_ip[3];
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	3303      	adds	r3, #3
 80021d4:	4a03      	ldr	r2, [pc, #12]	; (80021e4 <getIPfromDHCP+0x38>)
 80021d6:	78d2      	ldrb	r2, [r2, #3]
 80021d8:	701a      	strb	r2, [r3, #0]
}
 80021da:	bf00      	nop
 80021dc:	370c      	adds	r7, #12
 80021de:	46bd      	mov	sp, r7
 80021e0:	bc80      	pop	{r7}
 80021e2:	4770      	bx	lr
 80021e4:	20000248 	.word	0x20000248

080021e8 <getGWfromDHCP>:

void getGWfromDHCP(uint8_t* ip)
{
 80021e8:	b480      	push	{r7}
 80021ea:	b083      	sub	sp, #12
 80021ec:	af00      	add	r7, sp, #0
 80021ee:	6078      	str	r0, [r7, #4]
	ip[0] =DHCP_allocated_gw[0];
 80021f0:	4b0b      	ldr	r3, [pc, #44]	; (8002220 <getGWfromDHCP+0x38>)
 80021f2:	781a      	ldrb	r2, [r3, #0]
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	701a      	strb	r2, [r3, #0]
	ip[1] =DHCP_allocated_gw[1];
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	3301      	adds	r3, #1
 80021fc:	4a08      	ldr	r2, [pc, #32]	; (8002220 <getGWfromDHCP+0x38>)
 80021fe:	7852      	ldrb	r2, [r2, #1]
 8002200:	701a      	strb	r2, [r3, #0]
	ip[2] =DHCP_allocated_gw[2];
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	3302      	adds	r3, #2
 8002206:	4a06      	ldr	r2, [pc, #24]	; (8002220 <getGWfromDHCP+0x38>)
 8002208:	7892      	ldrb	r2, [r2, #2]
 800220a:	701a      	strb	r2, [r3, #0]
	ip[3] =DHCP_allocated_gw[3];			
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	3303      	adds	r3, #3
 8002210:	4a03      	ldr	r2, [pc, #12]	; (8002220 <getGWfromDHCP+0x38>)
 8002212:	78d2      	ldrb	r2, [r2, #3]
 8002214:	701a      	strb	r2, [r3, #0]
}
 8002216:	bf00      	nop
 8002218:	370c      	adds	r7, #12
 800221a:	46bd      	mov	sp, r7
 800221c:	bc80      	pop	{r7}
 800221e:	4770      	bx	lr
 8002220:	2000024c 	.word	0x2000024c

08002224 <getSNfromDHCP>:

void getSNfromDHCP(uint8_t* ip)
{
 8002224:	b480      	push	{r7}
 8002226:	b083      	sub	sp, #12
 8002228:	af00      	add	r7, sp, #0
 800222a:	6078      	str	r0, [r7, #4]
   ip[0] = DHCP_allocated_sn[0];
 800222c:	4b0b      	ldr	r3, [pc, #44]	; (800225c <getSNfromDHCP+0x38>)
 800222e:	781a      	ldrb	r2, [r3, #0]
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	701a      	strb	r2, [r3, #0]
   ip[1] = DHCP_allocated_sn[1];
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	3301      	adds	r3, #1
 8002238:	4a08      	ldr	r2, [pc, #32]	; (800225c <getSNfromDHCP+0x38>)
 800223a:	7852      	ldrb	r2, [r2, #1]
 800223c:	701a      	strb	r2, [r3, #0]
   ip[2] = DHCP_allocated_sn[2];
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	3302      	adds	r3, #2
 8002242:	4a06      	ldr	r2, [pc, #24]	; (800225c <getSNfromDHCP+0x38>)
 8002244:	7892      	ldrb	r2, [r2, #2]
 8002246:	701a      	strb	r2, [r3, #0]
   ip[3] = DHCP_allocated_sn[3];         
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	3303      	adds	r3, #3
 800224c:	4a03      	ldr	r2, [pc, #12]	; (800225c <getSNfromDHCP+0x38>)
 800224e:	78d2      	ldrb	r2, [r2, #3]
 8002250:	701a      	strb	r2, [r3, #0]
}
 8002252:	bf00      	nop
 8002254:	370c      	adds	r7, #12
 8002256:	46bd      	mov	sp, r7
 8002258:	bc80      	pop	{r7}
 800225a:	4770      	bx	lr
 800225c:	20000250 	.word	0x20000250

08002260 <getDNSfromDHCP>:

void getDNSfromDHCP(uint8_t* ip)
{
 8002260:	b480      	push	{r7}
 8002262:	b083      	sub	sp, #12
 8002264:	af00      	add	r7, sp, #0
 8002266:	6078      	str	r0, [r7, #4]
   ip[0] = DHCP_allocated_dns[0];
 8002268:	4b0b      	ldr	r3, [pc, #44]	; (8002298 <getDNSfromDHCP+0x38>)
 800226a:	781a      	ldrb	r2, [r3, #0]
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	701a      	strb	r2, [r3, #0]
   ip[1] = DHCP_allocated_dns[1];
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	3301      	adds	r3, #1
 8002274:	4a08      	ldr	r2, [pc, #32]	; (8002298 <getDNSfromDHCP+0x38>)
 8002276:	7852      	ldrb	r2, [r2, #1]
 8002278:	701a      	strb	r2, [r3, #0]
   ip[2] = DHCP_allocated_dns[2];
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	3302      	adds	r3, #2
 800227e:	4a06      	ldr	r2, [pc, #24]	; (8002298 <getDNSfromDHCP+0x38>)
 8002280:	7892      	ldrb	r2, [r2, #2]
 8002282:	701a      	strb	r2, [r3, #0]
   ip[3] = DHCP_allocated_dns[3];         
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	3303      	adds	r3, #3
 8002288:	4a03      	ldr	r2, [pc, #12]	; (8002298 <getDNSfromDHCP+0x38>)
 800228a:	78d2      	ldrb	r2, [r2, #3]
 800228c:	701a      	strb	r2, [r3, #0]
}
 800228e:	bf00      	nop
 8002290:	370c      	adds	r7, #12
 8002292:	46bd      	mov	sp, r7
 8002294:	bc80      	pop	{r7}
 8002296:	4770      	bx	lr
 8002298:	20000254 	.word	0x20000254

0800229c <getDHCPLeasetime>:

uint32_t getDHCPLeasetime(void)
{
 800229c:	b480      	push	{r7}
 800229e:	af00      	add	r7, sp, #0
	return dhcp_lease_time;
 80022a0:	4b02      	ldr	r3, [pc, #8]	; (80022ac <getDHCPLeasetime+0x10>)
 80022a2:	681b      	ldr	r3, [r3, #0]
}
 80022a4:	4618      	mov	r0, r3
 80022a6:	46bd      	mov	sp, r7
 80022a8:	bc80      	pop	{r7}
 80022aa:	4770      	bx	lr
 80022ac:	20000000 	.word	0x20000000

080022b0 <NibbleToHex>:

char NibbleToHex(uint8_t nibble)
{
 80022b0:	b480      	push	{r7}
 80022b2:	b083      	sub	sp, #12
 80022b4:	af00      	add	r7, sp, #0
 80022b6:	4603      	mov	r3, r0
 80022b8:	71fb      	strb	r3, [r7, #7]
  nibble &= 0x0F;
 80022ba:	79fb      	ldrb	r3, [r7, #7]
 80022bc:	f003 030f 	and.w	r3, r3, #15
 80022c0:	71fb      	strb	r3, [r7, #7]
  if (nibble <= 9)
 80022c2:	79fb      	ldrb	r3, [r7, #7]
 80022c4:	2b09      	cmp	r3, #9
 80022c6:	d803      	bhi.n	80022d0 <NibbleToHex+0x20>
    return nibble + '0';
 80022c8:	79fb      	ldrb	r3, [r7, #7]
 80022ca:	3330      	adds	r3, #48	; 0x30
 80022cc:	b2db      	uxtb	r3, r3
 80022ce:	e002      	b.n	80022d6 <NibbleToHex+0x26>
  else 
    return nibble + ('A'-0x0A);
 80022d0:	79fb      	ldrb	r3, [r7, #7]
 80022d2:	3337      	adds	r3, #55	; 0x37
 80022d4:	b2db      	uxtb	r3, r3
}
 80022d6:	4618      	mov	r0, r3
 80022d8:	370c      	adds	r7, #12
 80022da:	46bd      	mov	sp, r7
 80022dc:	bc80      	pop	{r7}
 80022de:	4770      	bx	lr

080022e0 <get16>:
uint32_t dns_1s_tick;   // for timout of DNS processing
static uint8_t retry_count;

/* converts uint16_t from network buffer to a host byte order integer. */
uint16_t get16(uint8_t * s)
{
 80022e0:	b480      	push	{r7}
 80022e2:	b085      	sub	sp, #20
 80022e4:	af00      	add	r7, sp, #0
 80022e6:	6078      	str	r0, [r7, #4]
	uint16_t i;
	i = *s++ << 8;
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	1c5a      	adds	r2, r3, #1
 80022ec:	607a      	str	r2, [r7, #4]
 80022ee:	781b      	ldrb	r3, [r3, #0]
 80022f0:	b29b      	uxth	r3, r3
 80022f2:	021b      	lsls	r3, r3, #8
 80022f4:	81fb      	strh	r3, [r7, #14]
	i = i + *s;
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	781b      	ldrb	r3, [r3, #0]
 80022fa:	b29a      	uxth	r2, r3
 80022fc:	89fb      	ldrh	r3, [r7, #14]
 80022fe:	4413      	add	r3, r2
 8002300:	81fb      	strh	r3, [r7, #14]
	return i;
 8002302:	89fb      	ldrh	r3, [r7, #14]
}
 8002304:	4618      	mov	r0, r3
 8002306:	3714      	adds	r7, #20
 8002308:	46bd      	mov	sp, r7
 800230a:	bc80      	pop	{r7}
 800230c:	4770      	bx	lr

0800230e <put16>:

/* copies uint16_t to the network buffer with network byte order. */
uint8_t * put16(uint8_t * s, uint16_t i)
{
 800230e:	b480      	push	{r7}
 8002310:	b083      	sub	sp, #12
 8002312:	af00      	add	r7, sp, #0
 8002314:	6078      	str	r0, [r7, #4]
 8002316:	460b      	mov	r3, r1
 8002318:	807b      	strh	r3, [r7, #2]
	*s++ = i >> 8;
 800231a:	887b      	ldrh	r3, [r7, #2]
 800231c:	0a1b      	lsrs	r3, r3, #8
 800231e:	b299      	uxth	r1, r3
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	1c5a      	adds	r2, r3, #1
 8002324:	607a      	str	r2, [r7, #4]
 8002326:	b2ca      	uxtb	r2, r1
 8002328:	701a      	strb	r2, [r3, #0]
	*s++ = i;
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	1c5a      	adds	r2, r3, #1
 800232e:	607a      	str	r2, [r7, #4]
 8002330:	887a      	ldrh	r2, [r7, #2]
 8002332:	b2d2      	uxtb	r2, r2
 8002334:	701a      	strb	r2, [r3, #0]
	return s;
 8002336:	687b      	ldr	r3, [r7, #4]
}
 8002338:	4618      	mov	r0, r3
 800233a:	370c      	adds	r7, #12
 800233c:	46bd      	mov	sp, r7
 800233e:	bc80      	pop	{r7}
 8002340:	4770      	bx	lr

08002342 <parse_name>:
 *               buf        - is a pointer to the buffer for the human-readable form name.
 *               len        - is the MAX. size of buffer.
 * Returns     : the length of compressed message
 */
int parse_name(uint8_t * msg, uint8_t * compressed, char * buf, int16_t len)
{
 8002342:	b480      	push	{r7}
 8002344:	b08b      	sub	sp, #44	; 0x2c
 8002346:	af00      	add	r7, sp, #0
 8002348:	60f8      	str	r0, [r7, #12]
 800234a:	60b9      	str	r1, [r7, #8]
 800234c:	607a      	str	r2, [r7, #4]
 800234e:	807b      	strh	r3, [r7, #2]
	uint16_t slen;		/* Length of current segment */
	uint8_t * cp;
	int clen = 0;		/* Total length of compressed name */
 8002350:	2300      	movs	r3, #0
 8002352:	61fb      	str	r3, [r7, #28]
	int indirect = 0;	/* Set if indirection encountered */
 8002354:	2300      	movs	r3, #0
 8002356:	61bb      	str	r3, [r7, #24]
	int nseg = 0;		/* Total number of segments in name */
 8002358:	2300      	movs	r3, #0
 800235a:	617b      	str	r3, [r7, #20]

	cp = compressed;
 800235c:	68bb      	ldr	r3, [r7, #8]
 800235e:	623b      	str	r3, [r7, #32]

	for (;;)
	{
		slen = *cp++;	/* Length of this segment */
 8002360:	6a3b      	ldr	r3, [r7, #32]
 8002362:	1c5a      	adds	r2, r3, #1
 8002364:	623a      	str	r2, [r7, #32]
 8002366:	781b      	ldrb	r3, [r3, #0]
 8002368:	84fb      	strh	r3, [r7, #38]	; 0x26

		if (!indirect) clen++;
 800236a:	69bb      	ldr	r3, [r7, #24]
 800236c:	2b00      	cmp	r3, #0
 800236e:	d102      	bne.n	8002376 <parse_name+0x34>
 8002370:	69fb      	ldr	r3, [r7, #28]
 8002372:	3301      	adds	r3, #1
 8002374:	61fb      	str	r3, [r7, #28]

		if ((slen & 0xc0) == 0xc0)
 8002376:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8002378:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800237c:	2bc0      	cmp	r3, #192	; 0xc0
 800237e:	d117      	bne.n	80023b0 <parse_name+0x6e>
		{
			if (!indirect)
 8002380:	69bb      	ldr	r3, [r7, #24]
 8002382:	2b00      	cmp	r3, #0
 8002384:	d102      	bne.n	800238c <parse_name+0x4a>
				clen++;
 8002386:	69fb      	ldr	r3, [r7, #28]
 8002388:	3301      	adds	r3, #1
 800238a:	61fb      	str	r3, [r7, #28]
			indirect = 1;
 800238c:	2301      	movs	r3, #1
 800238e:	61bb      	str	r3, [r7, #24]
			/* Follow indirection */
			cp = &msg[((slen & 0x3f)<<8) + *cp];
 8002390:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8002392:	021b      	lsls	r3, r3, #8
 8002394:	f403 537c 	and.w	r3, r3, #16128	; 0x3f00
 8002398:	6a3a      	ldr	r2, [r7, #32]
 800239a:	7812      	ldrb	r2, [r2, #0]
 800239c:	4413      	add	r3, r2
 800239e:	461a      	mov	r2, r3
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	4413      	add	r3, r2
 80023a4:	623b      	str	r3, [r7, #32]
			slen = *cp++;
 80023a6:	6a3b      	ldr	r3, [r7, #32]
 80023a8:	1c5a      	adds	r2, r3, #1
 80023aa:	623a      	str	r2, [r7, #32]
 80023ac:	781b      	ldrb	r3, [r3, #0]
 80023ae:	84fb      	strh	r3, [r7, #38]	; 0x26
		}

		if (slen == 0)	/* zero length == all done */
 80023b0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d02b      	beq.n	800240e <parse_name+0xcc>
			break;

		len -= slen + 1;
 80023b6:	887a      	ldrh	r2, [r7, #2]
 80023b8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80023ba:	1ad3      	subs	r3, r2, r3
 80023bc:	b29b      	uxth	r3, r3
 80023be:	3b01      	subs	r3, #1
 80023c0:	b29b      	uxth	r3, r3
 80023c2:	807b      	strh	r3, [r7, #2]

		if (len < 0) return -1;
 80023c4:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	da02      	bge.n	80023d2 <parse_name+0x90>
 80023cc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80023d0:	e038      	b.n	8002444 <parse_name+0x102>

		if (!indirect) clen += slen;
 80023d2:	69bb      	ldr	r3, [r7, #24]
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d10c      	bne.n	80023f2 <parse_name+0xb0>
 80023d8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80023da:	69fa      	ldr	r2, [r7, #28]
 80023dc:	4413      	add	r3, r2
 80023de:	61fb      	str	r3, [r7, #28]

		while (slen-- != 0) *buf++ = (char)*cp++;
 80023e0:	e007      	b.n	80023f2 <parse_name+0xb0>
 80023e2:	6a3a      	ldr	r2, [r7, #32]
 80023e4:	1c53      	adds	r3, r2, #1
 80023e6:	623b      	str	r3, [r7, #32]
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	1c59      	adds	r1, r3, #1
 80023ec:	6079      	str	r1, [r7, #4]
 80023ee:	7812      	ldrb	r2, [r2, #0]
 80023f0:	701a      	strb	r2, [r3, #0]
 80023f2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80023f4:	1e5a      	subs	r2, r3, #1
 80023f6:	84fa      	strh	r2, [r7, #38]	; 0x26
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d1f2      	bne.n	80023e2 <parse_name+0xa0>
		*buf++ = '.';
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	1c5a      	adds	r2, r3, #1
 8002400:	607a      	str	r2, [r7, #4]
 8002402:	222e      	movs	r2, #46	; 0x2e
 8002404:	701a      	strb	r2, [r3, #0]
		nseg++;
 8002406:	697b      	ldr	r3, [r7, #20]
 8002408:	3301      	adds	r3, #1
 800240a:	617b      	str	r3, [r7, #20]
		slen = *cp++;	/* Length of this segment */
 800240c:	e7a8      	b.n	8002360 <parse_name+0x1e>
			break;
 800240e:	bf00      	nop
	}

	if (nseg == 0)
 8002410:	697b      	ldr	r3, [r7, #20]
 8002412:	2b00      	cmp	r3, #0
 8002414:	d10a      	bne.n	800242c <parse_name+0xea>
	{
		/* Root name; represent as single dot */
		*buf++ = '.';
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	1c5a      	adds	r2, r3, #1
 800241a:	607a      	str	r2, [r7, #4]
 800241c:	222e      	movs	r2, #46	; 0x2e
 800241e:	701a      	strb	r2, [r3, #0]
		len--;
 8002420:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8002424:	b29b      	uxth	r3, r3
 8002426:	3b01      	subs	r3, #1
 8002428:	b29b      	uxth	r3, r3
 800242a:	807b      	strh	r3, [r7, #2]
	}

	*buf++ = '\0';
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	1c5a      	adds	r2, r3, #1
 8002430:	607a      	str	r2, [r7, #4]
 8002432:	2200      	movs	r2, #0
 8002434:	701a      	strb	r2, [r3, #0]
	len--;
 8002436:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800243a:	b29b      	uxth	r3, r3
 800243c:	3b01      	subs	r3, #1
 800243e:	b29b      	uxth	r3, r3
 8002440:	807b      	strh	r3, [r7, #2]

	return clen;	/* Length of compressed message */
 8002442:	69fb      	ldr	r3, [r7, #28]
}
 8002444:	4618      	mov	r0, r3
 8002446:	372c      	adds	r7, #44	; 0x2c
 8002448:	46bd      	mov	sp, r7
 800244a:	bc80      	pop	{r7}
 800244c:	4770      	bx	lr

0800244e <dns_question>:
 * Arguments   : msg - is a pointer to the reply message
 *               cp  - is a pointer to the qeustion record.
 * Returns     : a pointer the to next record.
 */
uint8_t * dns_question(uint8_t * msg, uint8_t * cp)
{
 800244e:	b580      	push	{r7, lr}
 8002450:	b0b4      	sub	sp, #208	; 0xd0
 8002452:	af00      	add	r7, sp, #0
 8002454:	6078      	str	r0, [r7, #4]
 8002456:	6039      	str	r1, [r7, #0]
	int len;
	char name[MAXCNAME];

	len = parse_name(msg, cp, name, MAXCNAME);
 8002458:	f107 020c 	add.w	r2, r7, #12
 800245c:	23c0      	movs	r3, #192	; 0xc0
 800245e:	6839      	ldr	r1, [r7, #0]
 8002460:	6878      	ldr	r0, [r7, #4]
 8002462:	f7ff ff6e 	bl	8002342 <parse_name>
 8002466:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc


	if (len == -1) return 0;
 800246a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800246e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002472:	d101      	bne.n	8002478 <dns_question+0x2a>
 8002474:	2300      	movs	r3, #0
 8002476:	e00b      	b.n	8002490 <dns_question+0x42>

	cp += len;
 8002478:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800247c:	683a      	ldr	r2, [r7, #0]
 800247e:	4413      	add	r3, r2
 8002480:	603b      	str	r3, [r7, #0]
	cp += 2;		/* type */
 8002482:	683b      	ldr	r3, [r7, #0]
 8002484:	3302      	adds	r3, #2
 8002486:	603b      	str	r3, [r7, #0]
	cp += 2;		/* class */
 8002488:	683b      	ldr	r3, [r7, #0]
 800248a:	3302      	adds	r3, #2
 800248c:	603b      	str	r3, [r7, #0]

	return cp;
 800248e:	683b      	ldr	r3, [r7, #0]
}
 8002490:	4618      	mov	r0, r3
 8002492:	37d0      	adds	r7, #208	; 0xd0
 8002494:	46bd      	mov	sp, r7
 8002496:	bd80      	pop	{r7, pc}

08002498 <dns_answer>:
 * Arguments   : msg - is a pointer to the reply message
 *               cp  - is a pointer to the answer record.
 * Returns     : a pointer the to next record.
 */
uint8_t * dns_answer(uint8_t * msg, uint8_t * cp, uint8_t * ip_from_dns)
{
 8002498:	b580      	push	{r7, lr}
 800249a:	b0b6      	sub	sp, #216	; 0xd8
 800249c:	af00      	add	r7, sp, #0
 800249e:	60f8      	str	r0, [r7, #12]
 80024a0:	60b9      	str	r1, [r7, #8]
 80024a2:	607a      	str	r2, [r7, #4]
	int len, type;
	char name[MAXCNAME];

	len = parse_name(msg, cp, name, MAXCNAME);
 80024a4:	f107 0210 	add.w	r2, r7, #16
 80024a8:	23c0      	movs	r3, #192	; 0xc0
 80024aa:	68b9      	ldr	r1, [r7, #8]
 80024ac:	68f8      	ldr	r0, [r7, #12]
 80024ae:	f7ff ff48 	bl	8002342 <parse_name>
 80024b2:	f8c7 00d4 	str.w	r0, [r7, #212]	; 0xd4

	if (len == -1) return 0;
 80024b6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80024ba:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80024be:	d101      	bne.n	80024c4 <dns_answer+0x2c>
 80024c0:	2300      	movs	r3, #0
 80024c2:	e0dd      	b.n	8002680 <dns_answer+0x1e8>

	cp += len;
 80024c4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80024c8:	68ba      	ldr	r2, [r7, #8]
 80024ca:	4413      	add	r3, r2
 80024cc:	60bb      	str	r3, [r7, #8]
	type = get16(cp);
 80024ce:	68b8      	ldr	r0, [r7, #8]
 80024d0:	f7ff ff06 	bl	80022e0 <get16>
 80024d4:	4603      	mov	r3, r0
 80024d6:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
	cp += 2;		/* type */
 80024da:	68bb      	ldr	r3, [r7, #8]
 80024dc:	3302      	adds	r3, #2
 80024de:	60bb      	str	r3, [r7, #8]
	cp += 2;		/* class */
 80024e0:	68bb      	ldr	r3, [r7, #8]
 80024e2:	3302      	adds	r3, #2
 80024e4:	60bb      	str	r3, [r7, #8]
	cp += 4;		/* ttl */
 80024e6:	68bb      	ldr	r3, [r7, #8]
 80024e8:	3304      	adds	r3, #4
 80024ea:	60bb      	str	r3, [r7, #8]
	cp += 2;		/* len */
 80024ec:	68bb      	ldr	r3, [r7, #8]
 80024ee:	3302      	adds	r3, #2
 80024f0:	60bb      	str	r3, [r7, #8]
 80024f2:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80024f6:	3b01      	subs	r3, #1
 80024f8:	2b0f      	cmp	r3, #15
 80024fa:	f200 80bf 	bhi.w	800267c <dns_answer+0x1e4>
 80024fe:	a201      	add	r2, pc, #4	; (adr r2, 8002504 <dns_answer+0x6c>)
 8002500:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002504:	08002545 	.word	0x08002545
 8002508:	0800257d 	.word	0x0800257d
 800250c:	0800267d 	.word	0x0800267d
 8002510:	0800267d 	.word	0x0800267d
 8002514:	0800257d 	.word	0x0800257d
 8002518:	08002609 	.word	0x08002609
 800251c:	0800257d 	.word	0x0800257d
 8002520:	0800257d 	.word	0x0800257d
 8002524:	0800257d 	.word	0x0800257d
 8002528:	0800267d 	.word	0x0800267d
 800252c:	0800267d 	.word	0x0800267d
 8002530:	0800257d 	.word	0x0800257d
 8002534:	080025a9 	.word	0x080025a9
 8002538:	0800267d 	.word	0x0800267d
 800253c:	080025d7 	.word	0x080025d7
 8002540:	0800267d 	.word	0x0800267d

	switch (type)
	{
	case TYPE_A:
		/* Just read the address directly into the structure */
		ip_from_dns[0] = *cp++;
 8002544:	68bb      	ldr	r3, [r7, #8]
 8002546:	1c5a      	adds	r2, r3, #1
 8002548:	60ba      	str	r2, [r7, #8]
 800254a:	781a      	ldrb	r2, [r3, #0]
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	701a      	strb	r2, [r3, #0]
		ip_from_dns[1] = *cp++;
 8002550:	68bb      	ldr	r3, [r7, #8]
 8002552:	1c5a      	adds	r2, r3, #1
 8002554:	60ba      	str	r2, [r7, #8]
 8002556:	687a      	ldr	r2, [r7, #4]
 8002558:	3201      	adds	r2, #1
 800255a:	781b      	ldrb	r3, [r3, #0]
 800255c:	7013      	strb	r3, [r2, #0]
		ip_from_dns[2] = *cp++;
 800255e:	68bb      	ldr	r3, [r7, #8]
 8002560:	1c5a      	adds	r2, r3, #1
 8002562:	60ba      	str	r2, [r7, #8]
 8002564:	687a      	ldr	r2, [r7, #4]
 8002566:	3202      	adds	r2, #2
 8002568:	781b      	ldrb	r3, [r3, #0]
 800256a:	7013      	strb	r3, [r2, #0]
		ip_from_dns[3] = *cp++;
 800256c:	68bb      	ldr	r3, [r7, #8]
 800256e:	1c5a      	adds	r2, r3, #1
 8002570:	60ba      	str	r2, [r7, #8]
 8002572:	687a      	ldr	r2, [r7, #4]
 8002574:	3203      	adds	r2, #3
 8002576:	781b      	ldrb	r3, [r3, #0]
 8002578:	7013      	strb	r3, [r2, #0]
		break;
 800257a:	e080      	b.n	800267e <dns_answer+0x1e6>
	case TYPE_MR:
	case TYPE_NS:
	case TYPE_PTR:
		/* These types all consist of a single domain name */
		/* convert it to ascii format */
		len = parse_name(msg, cp, name, MAXCNAME);
 800257c:	f107 0210 	add.w	r2, r7, #16
 8002580:	23c0      	movs	r3, #192	; 0xc0
 8002582:	68b9      	ldr	r1, [r7, #8]
 8002584:	68f8      	ldr	r0, [r7, #12]
 8002586:	f7ff fedc 	bl	8002342 <parse_name>
 800258a:	f8c7 00d4 	str.w	r0, [r7, #212]	; 0xd4
		if (len == -1) return 0;
 800258e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002592:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002596:	d101      	bne.n	800259c <dns_answer+0x104>
 8002598:	2300      	movs	r3, #0
 800259a:	e071      	b.n	8002680 <dns_answer+0x1e8>

		cp += len;
 800259c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80025a0:	68ba      	ldr	r2, [r7, #8]
 80025a2:	4413      	add	r3, r2
 80025a4:	60bb      	str	r3, [r7, #8]
		break;
 80025a6:	e06a      	b.n	800267e <dns_answer+0x1e6>
	case TYPE_HINFO:
		len = *cp++;
 80025a8:	68bb      	ldr	r3, [r7, #8]
 80025aa:	1c5a      	adds	r2, r3, #1
 80025ac:	60ba      	str	r2, [r7, #8]
 80025ae:	781b      	ldrb	r3, [r3, #0]
 80025b0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
		cp += len;
 80025b4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80025b8:	68ba      	ldr	r2, [r7, #8]
 80025ba:	4413      	add	r3, r2
 80025bc:	60bb      	str	r3, [r7, #8]

		len = *cp++;
 80025be:	68bb      	ldr	r3, [r7, #8]
 80025c0:	1c5a      	adds	r2, r3, #1
 80025c2:	60ba      	str	r2, [r7, #8]
 80025c4:	781b      	ldrb	r3, [r3, #0]
 80025c6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
		cp += len;
 80025ca:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80025ce:	68ba      	ldr	r2, [r7, #8]
 80025d0:	4413      	add	r3, r2
 80025d2:	60bb      	str	r3, [r7, #8]
		break;
 80025d4:	e053      	b.n	800267e <dns_answer+0x1e6>
	case TYPE_MX:
		cp += 2;
 80025d6:	68bb      	ldr	r3, [r7, #8]
 80025d8:	3302      	adds	r3, #2
 80025da:	60bb      	str	r3, [r7, #8]
		/* Get domain name of exchanger */
		len = parse_name(msg, cp, name, MAXCNAME);
 80025dc:	f107 0210 	add.w	r2, r7, #16
 80025e0:	23c0      	movs	r3, #192	; 0xc0
 80025e2:	68b9      	ldr	r1, [r7, #8]
 80025e4:	68f8      	ldr	r0, [r7, #12]
 80025e6:	f7ff feac 	bl	8002342 <parse_name>
 80025ea:	f8c7 00d4 	str.w	r0, [r7, #212]	; 0xd4
		if (len == -1) return 0;
 80025ee:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80025f2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80025f6:	d101      	bne.n	80025fc <dns_answer+0x164>
 80025f8:	2300      	movs	r3, #0
 80025fa:	e041      	b.n	8002680 <dns_answer+0x1e8>

		cp += len;
 80025fc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002600:	68ba      	ldr	r2, [r7, #8]
 8002602:	4413      	add	r3, r2
 8002604:	60bb      	str	r3, [r7, #8]
		break;
 8002606:	e03a      	b.n	800267e <dns_answer+0x1e6>
	case TYPE_SOA:
		/* Get domain name of name server */
		len = parse_name(msg, cp, name, MAXCNAME);
 8002608:	f107 0210 	add.w	r2, r7, #16
 800260c:	23c0      	movs	r3, #192	; 0xc0
 800260e:	68b9      	ldr	r1, [r7, #8]
 8002610:	68f8      	ldr	r0, [r7, #12]
 8002612:	f7ff fe96 	bl	8002342 <parse_name>
 8002616:	f8c7 00d4 	str.w	r0, [r7, #212]	; 0xd4
		if (len == -1) return 0;
 800261a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800261e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002622:	d101      	bne.n	8002628 <dns_answer+0x190>
 8002624:	2300      	movs	r3, #0
 8002626:	e02b      	b.n	8002680 <dns_answer+0x1e8>

		cp += len;
 8002628:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800262c:	68ba      	ldr	r2, [r7, #8]
 800262e:	4413      	add	r3, r2
 8002630:	60bb      	str	r3, [r7, #8]

		/* Get domain name of responsible person */
		len = parse_name(msg, cp, name, MAXCNAME);
 8002632:	f107 0210 	add.w	r2, r7, #16
 8002636:	23c0      	movs	r3, #192	; 0xc0
 8002638:	68b9      	ldr	r1, [r7, #8]
 800263a:	68f8      	ldr	r0, [r7, #12]
 800263c:	f7ff fe81 	bl	8002342 <parse_name>
 8002640:	f8c7 00d4 	str.w	r0, [r7, #212]	; 0xd4
		if (len == -1) return 0;
 8002644:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002648:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800264c:	d101      	bne.n	8002652 <dns_answer+0x1ba>
 800264e:	2300      	movs	r3, #0
 8002650:	e016      	b.n	8002680 <dns_answer+0x1e8>

		cp += len;
 8002652:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002656:	68ba      	ldr	r2, [r7, #8]
 8002658:	4413      	add	r3, r2
 800265a:	60bb      	str	r3, [r7, #8]

		cp += 4;
 800265c:	68bb      	ldr	r3, [r7, #8]
 800265e:	3304      	adds	r3, #4
 8002660:	60bb      	str	r3, [r7, #8]
		cp += 4;
 8002662:	68bb      	ldr	r3, [r7, #8]
 8002664:	3304      	adds	r3, #4
 8002666:	60bb      	str	r3, [r7, #8]
		cp += 4;
 8002668:	68bb      	ldr	r3, [r7, #8]
 800266a:	3304      	adds	r3, #4
 800266c:	60bb      	str	r3, [r7, #8]
		cp += 4;
 800266e:	68bb      	ldr	r3, [r7, #8]
 8002670:	3304      	adds	r3, #4
 8002672:	60bb      	str	r3, [r7, #8]
		cp += 4;
 8002674:	68bb      	ldr	r3, [r7, #8]
 8002676:	3304      	adds	r3, #4
 8002678:	60bb      	str	r3, [r7, #8]
		break;
 800267a:	e000      	b.n	800267e <dns_answer+0x1e6>
	case TYPE_TXT:
		/* Just stash */
		break;
	default:
		/* Ignore */
		break;
 800267c:	bf00      	nop
	}

	return cp;
 800267e:	68bb      	ldr	r3, [r7, #8]
}
 8002680:	4618      	mov	r0, r3
 8002682:	37d8      	adds	r7, #216	; 0xd8
 8002684:	46bd      	mov	sp, r7
 8002686:	bd80      	pop	{r7, pc}

08002688 <parseDNSMSG>:
 * Returns     : -1 - Domain name lenght is too big
 *                0 - Fail (Timout or parse error)
 *                1 - Success,
 */
int8_t parseDNSMSG(struct dhdr * pdhdr, uint8_t * pbuf, uint8_t * ip_from_dns)
{
 8002688:	b580      	push	{r7, lr}
 800268a:	b088      	sub	sp, #32
 800268c:	af00      	add	r7, sp, #0
 800268e:	60f8      	str	r0, [r7, #12]
 8002690:	60b9      	str	r1, [r7, #8]
 8002692:	607a      	str	r2, [r7, #4]
	uint16_t tmp;
	uint16_t i;
	uint8_t * msg;
	uint8_t * cp;

	msg = pbuf;
 8002694:	68bb      	ldr	r3, [r7, #8]
 8002696:	617b      	str	r3, [r7, #20]
	memset(pdhdr, 0, sizeof(*pdhdr));
 8002698:	2212      	movs	r2, #18
 800269a:	2100      	movs	r1, #0
 800269c:	68f8      	ldr	r0, [r7, #12]
 800269e:	f008 fef3 	bl	800b488 <memset>

	pdhdr->id = get16(&msg[0]);
 80026a2:	6978      	ldr	r0, [r7, #20]
 80026a4:	f7ff fe1c 	bl	80022e0 <get16>
 80026a8:	4603      	mov	r3, r0
 80026aa:	461a      	mov	r2, r3
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	801a      	strh	r2, [r3, #0]
	tmp = get16(&msg[2]);
 80026b0:	697b      	ldr	r3, [r7, #20]
 80026b2:	3302      	adds	r3, #2
 80026b4:	4618      	mov	r0, r3
 80026b6:	f7ff fe13 	bl	80022e0 <get16>
 80026ba:	4603      	mov	r3, r0
 80026bc:	827b      	strh	r3, [r7, #18]
	if (tmp & 0x8000) pdhdr->qr = 1;
 80026be:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	da02      	bge.n	80026cc <parseDNSMSG+0x44>
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	2201      	movs	r2, #1
 80026ca:	709a      	strb	r2, [r3, #2]

	pdhdr->opcode = (tmp >> 11) & 0xf;
 80026cc:	8a7b      	ldrh	r3, [r7, #18]
 80026ce:	0adb      	lsrs	r3, r3, #11
 80026d0:	b29b      	uxth	r3, r3
 80026d2:	b2db      	uxtb	r3, r3
 80026d4:	f003 030f 	and.w	r3, r3, #15
 80026d8:	b2da      	uxtb	r2, r3
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	70da      	strb	r2, [r3, #3]

	if (tmp & 0x0400) pdhdr->aa = 1;
 80026de:	8a7b      	ldrh	r3, [r7, #18]
 80026e0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d002      	beq.n	80026ee <parseDNSMSG+0x66>
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	2201      	movs	r2, #1
 80026ec:	711a      	strb	r2, [r3, #4]
	if (tmp & 0x0200) pdhdr->tc = 1;
 80026ee:	8a7b      	ldrh	r3, [r7, #18]
 80026f0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d002      	beq.n	80026fe <parseDNSMSG+0x76>
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	2201      	movs	r2, #1
 80026fc:	715a      	strb	r2, [r3, #5]
	if (tmp & 0x0100) pdhdr->rd = 1;
 80026fe:	8a7b      	ldrh	r3, [r7, #18]
 8002700:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002704:	2b00      	cmp	r3, #0
 8002706:	d002      	beq.n	800270e <parseDNSMSG+0x86>
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	2201      	movs	r2, #1
 800270c:	719a      	strb	r2, [r3, #6]
	if (tmp & 0x0080) pdhdr->ra = 1;
 800270e:	8a7b      	ldrh	r3, [r7, #18]
 8002710:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002714:	2b00      	cmp	r3, #0
 8002716:	d002      	beq.n	800271e <parseDNSMSG+0x96>
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	2201      	movs	r2, #1
 800271c:	71da      	strb	r2, [r3, #7]

	pdhdr->rcode = tmp & 0xf;
 800271e:	8a7b      	ldrh	r3, [r7, #18]
 8002720:	b2db      	uxtb	r3, r3
 8002722:	f003 030f 	and.w	r3, r3, #15
 8002726:	b2da      	uxtb	r2, r3
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	721a      	strb	r2, [r3, #8]
	pdhdr->qdcount = get16(&msg[4]);
 800272c:	697b      	ldr	r3, [r7, #20]
 800272e:	3304      	adds	r3, #4
 8002730:	4618      	mov	r0, r3
 8002732:	f7ff fdd5 	bl	80022e0 <get16>
 8002736:	4603      	mov	r3, r0
 8002738:	461a      	mov	r2, r3
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	815a      	strh	r2, [r3, #10]
	pdhdr->ancount = get16(&msg[6]);
 800273e:	697b      	ldr	r3, [r7, #20]
 8002740:	3306      	adds	r3, #6
 8002742:	4618      	mov	r0, r3
 8002744:	f7ff fdcc 	bl	80022e0 <get16>
 8002748:	4603      	mov	r3, r0
 800274a:	461a      	mov	r2, r3
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	819a      	strh	r2, [r3, #12]
	pdhdr->nscount = get16(&msg[8]);
 8002750:	697b      	ldr	r3, [r7, #20]
 8002752:	3308      	adds	r3, #8
 8002754:	4618      	mov	r0, r3
 8002756:	f7ff fdc3 	bl	80022e0 <get16>
 800275a:	4603      	mov	r3, r0
 800275c:	461a      	mov	r2, r3
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	81da      	strh	r2, [r3, #14]
	pdhdr->arcount = get16(&msg[10]);
 8002762:	697b      	ldr	r3, [r7, #20]
 8002764:	330a      	adds	r3, #10
 8002766:	4618      	mov	r0, r3
 8002768:	f7ff fdba 	bl	80022e0 <get16>
 800276c:	4603      	mov	r3, r0
 800276e:	461a      	mov	r2, r3
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	821a      	strh	r2, [r3, #16]


	/* Now parse the variable length sections */
	cp = &msg[12];
 8002774:	697b      	ldr	r3, [r7, #20]
 8002776:	330c      	adds	r3, #12
 8002778:	61bb      	str	r3, [r7, #24]

	/* Question section */
	for (i = 0; i < pdhdr->qdcount; i++)
 800277a:	2300      	movs	r3, #0
 800277c:	83fb      	strh	r3, [r7, #30]
 800277e:	e00d      	b.n	800279c <parseDNSMSG+0x114>
	{
		cp = dns_question(msg, cp);
 8002780:	69b9      	ldr	r1, [r7, #24]
 8002782:	6978      	ldr	r0, [r7, #20]
 8002784:	f7ff fe63 	bl	800244e <dns_question>
 8002788:	61b8      	str	r0, [r7, #24]
   #ifdef _DNS_DEUBG_
      printf("MAX_DOMAIN_NAME is too small, it should be redfine in dns.h");
   #endif
		if(!cp) return -1;
 800278a:	69bb      	ldr	r3, [r7, #24]
 800278c:	2b00      	cmp	r3, #0
 800278e:	d102      	bne.n	8002796 <parseDNSMSG+0x10e>
 8002790:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002794:	e03b      	b.n	800280e <parseDNSMSG+0x186>
	for (i = 0; i < pdhdr->qdcount; i++)
 8002796:	8bfb      	ldrh	r3, [r7, #30]
 8002798:	3301      	adds	r3, #1
 800279a:	83fb      	strh	r3, [r7, #30]
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	895b      	ldrh	r3, [r3, #10]
 80027a0:	8bfa      	ldrh	r2, [r7, #30]
 80027a2:	429a      	cmp	r2, r3
 80027a4:	d3ec      	bcc.n	8002780 <parseDNSMSG+0xf8>
	}

	/* Answer section */
	for (i = 0; i < pdhdr->ancount; i++)
 80027a6:	2300      	movs	r3, #0
 80027a8:	83fb      	strh	r3, [r7, #30]
 80027aa:	e00e      	b.n	80027ca <parseDNSMSG+0x142>
	{
		cp = dns_answer(msg, cp, ip_from_dns);
 80027ac:	687a      	ldr	r2, [r7, #4]
 80027ae:	69b9      	ldr	r1, [r7, #24]
 80027b0:	6978      	ldr	r0, [r7, #20]
 80027b2:	f7ff fe71 	bl	8002498 <dns_answer>
 80027b6:	61b8      	str	r0, [r7, #24]
   #ifdef _DNS_DEUBG_
      printf("MAX_DOMAIN_NAME is too small, it should be redfine in dns.h");
   #endif
		if(!cp) return -1;
 80027b8:	69bb      	ldr	r3, [r7, #24]
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d102      	bne.n	80027c4 <parseDNSMSG+0x13c>
 80027be:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80027c2:	e024      	b.n	800280e <parseDNSMSG+0x186>
	for (i = 0; i < pdhdr->ancount; i++)
 80027c4:	8bfb      	ldrh	r3, [r7, #30]
 80027c6:	3301      	adds	r3, #1
 80027c8:	83fb      	strh	r3, [r7, #30]
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	899b      	ldrh	r3, [r3, #12]
 80027ce:	8bfa      	ldrh	r2, [r7, #30]
 80027d0:	429a      	cmp	r2, r3
 80027d2:	d3eb      	bcc.n	80027ac <parseDNSMSG+0x124>
	}

	/* Name server (authority) section */
	for (i = 0; i < pdhdr->nscount; i++)
 80027d4:	2300      	movs	r3, #0
 80027d6:	83fb      	strh	r3, [r7, #30]
 80027d8:	e002      	b.n	80027e0 <parseDNSMSG+0x158>
 80027da:	8bfb      	ldrh	r3, [r7, #30]
 80027dc:	3301      	adds	r3, #1
 80027de:	83fb      	strh	r3, [r7, #30]
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	89db      	ldrh	r3, [r3, #14]
 80027e4:	8bfa      	ldrh	r2, [r7, #30]
 80027e6:	429a      	cmp	r2, r3
 80027e8:	d3f7      	bcc.n	80027da <parseDNSMSG+0x152>
	{
		;
	}

	/* Additional section */
	for (i = 0; i < pdhdr->arcount; i++)
 80027ea:	2300      	movs	r3, #0
 80027ec:	83fb      	strh	r3, [r7, #30]
 80027ee:	e002      	b.n	80027f6 <parseDNSMSG+0x16e>
 80027f0:	8bfb      	ldrh	r3, [r7, #30]
 80027f2:	3301      	adds	r3, #1
 80027f4:	83fb      	strh	r3, [r7, #30]
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	8a1b      	ldrh	r3, [r3, #16]
 80027fa:	8bfa      	ldrh	r2, [r7, #30]
 80027fc:	429a      	cmp	r2, r3
 80027fe:	d3f7      	bcc.n	80027f0 <parseDNSMSG+0x168>
	{
		;
	}

	if(pdhdr->rcode == 0) return 1;		// No error
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	7a1b      	ldrb	r3, [r3, #8]
 8002804:	2b00      	cmp	r3, #0
 8002806:	d101      	bne.n	800280c <parseDNSMSG+0x184>
 8002808:	2301      	movs	r3, #1
 800280a:	e000      	b.n	800280e <parseDNSMSG+0x186>
	else return 0;
 800280c:	2300      	movs	r3, #0
}
 800280e:	4618      	mov	r0, r3
 8002810:	3720      	adds	r7, #32
 8002812:	46bd      	mov	sp, r7
 8002814:	bd80      	pop	{r7, pc}
	...

08002818 <dns_makequery>:
 *               buf  - is a pointer to the buffer for DNS message.
 *               len  - is the MAX. size of buffer.
 * Returns     : the pointer to the DNS message.
 */
int16_t dns_makequery(uint16_t op, char * name, uint8_t * buf, uint16_t len)
{
 8002818:	b580      	push	{r7, lr}
 800281a:	b0b8      	sub	sp, #224	; 0xe0
 800281c:	af00      	add	r7, sp, #0
 800281e:	60b9      	str	r1, [r7, #8]
 8002820:	607a      	str	r2, [r7, #4]
 8002822:	461a      	mov	r2, r3
 8002824:	4603      	mov	r3, r0
 8002826:	81fb      	strh	r3, [r7, #14]
 8002828:	4613      	mov	r3, r2
 800282a:	81bb      	strh	r3, [r7, #12]
	char sname[MAXCNAME];
	char *dname;
	uint16_t p;
	uint16_t dlen;

	cp = buf;
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

	DNS_MSGID++;
 8002832:	4b57      	ldr	r3, [pc, #348]	; (8002990 <dns_makequery+0x178>)
 8002834:	881b      	ldrh	r3, [r3, #0]
 8002836:	3301      	adds	r3, #1
 8002838:	b29a      	uxth	r2, r3
 800283a:	4b55      	ldr	r3, [pc, #340]	; (8002990 <dns_makequery+0x178>)
 800283c:	801a      	strh	r2, [r3, #0]
	cp = put16(cp, DNS_MSGID);
 800283e:	4b54      	ldr	r3, [pc, #336]	; (8002990 <dns_makequery+0x178>)
 8002840:	881b      	ldrh	r3, [r3, #0]
 8002842:	4619      	mov	r1, r3
 8002844:	f8d7 00dc 	ldr.w	r0, [r7, #220]	; 0xdc
 8002848:	f7ff fd61 	bl	800230e <put16>
 800284c:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc
	p = (op << 11) | 0x0100;			/* Recursion desired */
 8002850:	89fb      	ldrh	r3, [r7, #14]
 8002852:	02db      	lsls	r3, r3, #11
 8002854:	b21b      	sxth	r3, r3
 8002856:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800285a:	b21b      	sxth	r3, r3
 800285c:	f8a7 30d4 	strh.w	r3, [r7, #212]	; 0xd4
	cp = put16(cp, p);
 8002860:	f8b7 30d4 	ldrh.w	r3, [r7, #212]	; 0xd4
 8002864:	4619      	mov	r1, r3
 8002866:	f8d7 00dc 	ldr.w	r0, [r7, #220]	; 0xdc
 800286a:	f7ff fd50 	bl	800230e <put16>
 800286e:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc
	cp = put16(cp, 1);
 8002872:	2101      	movs	r1, #1
 8002874:	f8d7 00dc 	ldr.w	r0, [r7, #220]	; 0xdc
 8002878:	f7ff fd49 	bl	800230e <put16>
 800287c:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc
	cp = put16(cp, 0);
 8002880:	2100      	movs	r1, #0
 8002882:	f8d7 00dc 	ldr.w	r0, [r7, #220]	; 0xdc
 8002886:	f7ff fd42 	bl	800230e <put16>
 800288a:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc
	cp = put16(cp, 0);
 800288e:	2100      	movs	r1, #0
 8002890:	f8d7 00dc 	ldr.w	r0, [r7, #220]	; 0xdc
 8002894:	f7ff fd3b 	bl	800230e <put16>
 8002898:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc
	cp = put16(cp, 0);
 800289c:	2100      	movs	r1, #0
 800289e:	f8d7 00dc 	ldr.w	r0, [r7, #220]	; 0xdc
 80028a2:	f7ff fd34 	bl	800230e <put16>
 80028a6:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc

	strcpy(sname, name);
 80028aa:	f107 0310 	add.w	r3, r7, #16
 80028ae:	68b9      	ldr	r1, [r7, #8]
 80028b0:	4618      	mov	r0, r3
 80028b2:	f009 fa7e 	bl	800bdb2 <strcpy>
	dname = sname;
 80028b6:	f107 0310 	add.w	r3, r7, #16
 80028ba:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
	dlen = strlen(dname);
 80028be:	f8d7 00d8 	ldr.w	r0, [r7, #216]	; 0xd8
 80028c2:	f7fd fc45 	bl	8000150 <strlen>
 80028c6:	4603      	mov	r3, r0
 80028c8:	f8a7 30d6 	strh.w	r3, [r7, #214]	; 0xd6
	for (;;)
	{
		/* Look for next dot */
		cp1 = strchr(dname, '.');
 80028cc:	212e      	movs	r1, #46	; 0x2e
 80028ce:	f8d7 00d8 	ldr.w	r0, [r7, #216]	; 0xd8
 80028d2:	f009 fa61 	bl	800bd98 <strchr>
 80028d6:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0

		if (cp1 != NULL) len = cp1 - dname;	/* More to come */
 80028da:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d006      	beq.n	80028f0 <dns_makequery+0xd8>
 80028e2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80028e6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80028ea:	1ad3      	subs	r3, r2, r3
 80028ec:	81bb      	strh	r3, [r7, #12]
 80028ee:	e002      	b.n	80028f6 <dns_makequery+0xde>
		else len = dlen;			/* Last component */
 80028f0:	f8b7 30d6 	ldrh.w	r3, [r7, #214]	; 0xd6
 80028f4:	81bb      	strh	r3, [r7, #12]

		*cp++ = len;				/* Write length of component */
 80028f6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80028fa:	1c5a      	adds	r2, r3, #1
 80028fc:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8002900:	89ba      	ldrh	r2, [r7, #12]
 8002902:	b2d2      	uxtb	r2, r2
 8002904:	701a      	strb	r2, [r3, #0]
		if (len == 0) break;
 8002906:	89bb      	ldrh	r3, [r7, #12]
 8002908:	2b00      	cmp	r3, #0
 800290a:	d029      	beq.n	8002960 <dns_makequery+0x148>

		/* Copy component up to (but not including) dot */
		strncpy((char *)cp, dname, len);
 800290c:	89bb      	ldrh	r3, [r7, #12]
 800290e:	461a      	mov	r2, r3
 8002910:	f8d7 10d8 	ldr.w	r1, [r7, #216]	; 0xd8
 8002914:	f8d7 00dc 	ldr.w	r0, [r7, #220]	; 0xdc
 8002918:	f009 fa53 	bl	800bdc2 <strncpy>
		cp += len;
 800291c:	89bb      	ldrh	r3, [r7, #12]
 800291e:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8002922:	4413      	add	r3, r2
 8002924:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
		if (cp1 == NULL)
 8002928:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800292c:	2b00      	cmp	r3, #0
 800292e:	d107      	bne.n	8002940 <dns_makequery+0x128>
		{
			*cp++ = 0;			/* Last one; write null and finish */
 8002930:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002934:	1c5a      	adds	r2, r3, #1
 8002936:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800293a:	2200      	movs	r2, #0
 800293c:	701a      	strb	r2, [r3, #0]
			break;
 800293e:	e010      	b.n	8002962 <dns_makequery+0x14a>
		}
		dname += len+1;
 8002940:	89bb      	ldrh	r3, [r7, #12]
 8002942:	3301      	adds	r3, #1
 8002944:	f8d7 20d8 	ldr.w	r2, [r7, #216]	; 0xd8
 8002948:	4413      	add	r3, r2
 800294a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
		dlen -= len+1;
 800294e:	f8b7 20d6 	ldrh.w	r2, [r7, #214]	; 0xd6
 8002952:	89bb      	ldrh	r3, [r7, #12]
 8002954:	1ad3      	subs	r3, r2, r3
 8002956:	b29b      	uxth	r3, r3
 8002958:	3b01      	subs	r3, #1
 800295a:	f8a7 30d6 	strh.w	r3, [r7, #214]	; 0xd6
		cp1 = strchr(dname, '.');
 800295e:	e7b5      	b.n	80028cc <dns_makequery+0xb4>
		if (len == 0) break;
 8002960:	bf00      	nop
	}

	cp = put16(cp, 0x0001);				/* type */
 8002962:	2101      	movs	r1, #1
 8002964:	f8d7 00dc 	ldr.w	r0, [r7, #220]	; 0xdc
 8002968:	f7ff fcd1 	bl	800230e <put16>
 800296c:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc
	cp = put16(cp, 0x0001);				/* class */
 8002970:	2101      	movs	r1, #1
 8002972:	f8d7 00dc 	ldr.w	r0, [r7, #220]	; 0xdc
 8002976:	f7ff fcca 	bl	800230e <put16>
 800297a:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc

	return ((int16_t)((uint32_t)(cp) - (uint32_t)(buf)));
 800297e:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	1ad3      	subs	r3, r2, r3
 8002986:	b21b      	sxth	r3, r3
}
 8002988:	4618      	mov	r0, r3
 800298a:	37e0      	adds	r7, #224	; 0xe0
 800298c:	46bd      	mov	sp, r7
 800298e:	bd80      	pop	{r7, pc}
 8002990:	20000320 	.word	0x20000320

08002994 <check_DNS_timeout>:
 * Returns     : -1 - timeout occurred, 0 - timer over, but no timeout, 1 - no timer over, no timeout occur
 * Note        : timeout : retry count and timer both over.
 */

int8_t check_DNS_timeout(void)
{
 8002994:	b480      	push	{r7}
 8002996:	af00      	add	r7, sp, #0

	if(dns_1s_tick >= DNS_WAIT_TIME)
 8002998:	4b0e      	ldr	r3, [pc, #56]	; (80029d4 <check_DNS_timeout+0x40>)
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	2b02      	cmp	r3, #2
 800299e:	d914      	bls.n	80029ca <check_DNS_timeout+0x36>
	{
		dns_1s_tick = 0;
 80029a0:	4b0c      	ldr	r3, [pc, #48]	; (80029d4 <check_DNS_timeout+0x40>)
 80029a2:	2200      	movs	r2, #0
 80029a4:	601a      	str	r2, [r3, #0]
		if(retry_count >= MAX_DNS_RETRY) {
 80029a6:	4b0c      	ldr	r3, [pc, #48]	; (80029d8 <check_DNS_timeout+0x44>)
 80029a8:	781b      	ldrb	r3, [r3, #0]
 80029aa:	2b01      	cmp	r3, #1
 80029ac:	d905      	bls.n	80029ba <check_DNS_timeout+0x26>
			retry_count = 0;
 80029ae:	4b0a      	ldr	r3, [pc, #40]	; (80029d8 <check_DNS_timeout+0x44>)
 80029b0:	2200      	movs	r2, #0
 80029b2:	701a      	strb	r2, [r3, #0]
			return -1; // timeout occurred
 80029b4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80029b8:	e008      	b.n	80029cc <check_DNS_timeout+0x38>
		}
		retry_count++;
 80029ba:	4b07      	ldr	r3, [pc, #28]	; (80029d8 <check_DNS_timeout+0x44>)
 80029bc:	781b      	ldrb	r3, [r3, #0]
 80029be:	3301      	adds	r3, #1
 80029c0:	b2da      	uxtb	r2, r3
 80029c2:	4b05      	ldr	r3, [pc, #20]	; (80029d8 <check_DNS_timeout+0x44>)
 80029c4:	701a      	strb	r2, [r3, #0]
		return 0; // timer over, but no timeout
 80029c6:	2300      	movs	r3, #0
 80029c8:	e000      	b.n	80029cc <check_DNS_timeout+0x38>
	}

	return 1; // no timer over, no timeout occur
 80029ca:	2301      	movs	r3, #1
}
 80029cc:	4618      	mov	r0, r3
 80029ce:	46bd      	mov	sp, r7
 80029d0:	bc80      	pop	{r7}
 80029d2:	4770      	bx	lr
 80029d4:	20000318 	.word	0x20000318
 80029d8:	20000260 	.word	0x20000260

080029dc <DNS_init>:



/* DNS CLIENT INIT */
void DNS_init(uint8_t s, uint8_t * buf)
{
 80029dc:	b480      	push	{r7}
 80029de:	b083      	sub	sp, #12
 80029e0:	af00      	add	r7, sp, #0
 80029e2:	4603      	mov	r3, r0
 80029e4:	6039      	str	r1, [r7, #0]
 80029e6:	71fb      	strb	r3, [r7, #7]
	DNS_SOCKET = s; // SOCK_DNS
 80029e8:	4a07      	ldr	r2, [pc, #28]	; (8002a08 <DNS_init+0x2c>)
 80029ea:	79fb      	ldrb	r3, [r7, #7]
 80029ec:	7013      	strb	r3, [r2, #0]
	pDNSMSG = buf; // User's shared buffer
 80029ee:	4a07      	ldr	r2, [pc, #28]	; (8002a0c <DNS_init+0x30>)
 80029f0:	683b      	ldr	r3, [r7, #0]
 80029f2:	6013      	str	r3, [r2, #0]
	DNS_MSGID = DNS_MSG_ID;
 80029f4:	4b06      	ldr	r3, [pc, #24]	; (8002a10 <DNS_init+0x34>)
 80029f6:	f241 1222 	movw	r2, #4386	; 0x1122
 80029fa:	801a      	strh	r2, [r3, #0]
}
 80029fc:	bf00      	nop
 80029fe:	370c      	adds	r7, #12
 8002a00:	46bd      	mov	sp, r7
 8002a02:	bc80      	pop	{r7}
 8002a04:	4770      	bx	lr
 8002a06:	bf00      	nop
 8002a08:	20000314 	.word	0x20000314
 8002a0c:	2000031c 	.word	0x2000031c
 8002a10:	20000320 	.word	0x20000320

08002a14 <DNS_run>:

/* DNS CLIENT RUN */
int8_t DNS_run(uint8_t * dns_ip, uint8_t * name, uint8_t * ip_from_dns)
{
 8002a14:	b590      	push	{r4, r7, lr}
 8002a16:	b08f      	sub	sp, #60	; 0x3c
 8002a18:	af02      	add	r7, sp, #8
 8002a1a:	60f8      	str	r0, [r7, #12]
 8002a1c:	60b9      	str	r1, [r7, #8]
 8002a1e:	607a      	str	r2, [r7, #4]
	struct dhdr dhp;
	uint8_t ip[4];
	uint16_t len, port;
	int8_t ret_check_timeout;

	retry_count = 0;
 8002a20:	4b3b      	ldr	r3, [pc, #236]	; (8002b10 <DNS_run+0xfc>)
 8002a22:	2200      	movs	r2, #0
 8002a24:	701a      	strb	r2, [r3, #0]
	dns_1s_tick = 0;
 8002a26:	4b3b      	ldr	r3, [pc, #236]	; (8002b14 <DNS_run+0x100>)
 8002a28:	2200      	movs	r2, #0
 8002a2a:	601a      	str	r2, [r3, #0]

   // Socket open
   socket(DNS_SOCKET, Sn_MR_UDP, 0, 0);
 8002a2c:	4b3a      	ldr	r3, [pc, #232]	; (8002b18 <DNS_run+0x104>)
 8002a2e:	7818      	ldrb	r0, [r3, #0]
 8002a30:	2300      	movs	r3, #0
 8002a32:	2200      	movs	r2, #0
 8002a34:	2102      	movs	r1, #2
 8002a36:	f001 f97f 	bl	8003d38 <socket>

#ifdef _DNS_DEBUG_
	printf("> DNS Query to DNS Server : %d.%d.%d.%d\r\n", dns_ip[0], dns_ip[1], dns_ip[2], dns_ip[3]);
#endif

	len = dns_makequery(0, (char *)name, pDNSMSG, MAX_DNS_BUF_SIZE);
 8002a3a:	4b38      	ldr	r3, [pc, #224]	; (8002b1c <DNS_run+0x108>)
 8002a3c:	681a      	ldr	r2, [r3, #0]
 8002a3e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002a42:	68b9      	ldr	r1, [r7, #8]
 8002a44:	2000      	movs	r0, #0
 8002a46:	f7ff fee7 	bl	8002818 <dns_makequery>
 8002a4a:	4603      	mov	r3, r0
 8002a4c:	85fb      	strh	r3, [r7, #46]	; 0x2e
	sendto(DNS_SOCKET, pDNSMSG, len, dns_ip, IPPORT_DOMAIN);
 8002a4e:	4b32      	ldr	r3, [pc, #200]	; (8002b18 <DNS_run+0x104>)
 8002a50:	7818      	ldrb	r0, [r3, #0]
 8002a52:	4b32      	ldr	r3, [pc, #200]	; (8002b1c <DNS_run+0x108>)
 8002a54:	6819      	ldr	r1, [r3, #0]
 8002a56:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8002a58:	2335      	movs	r3, #53	; 0x35
 8002a5a:	9300      	str	r3, [sp, #0]
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	f001 fd7b 	bl	8004558 <sendto>

	while (1)
	{
		if ((len = getSn_RX_RSR(DNS_SOCKET)) > 0)
 8002a62:	4b2d      	ldr	r3, [pc, #180]	; (8002b18 <DNS_run+0x104>)
 8002a64:	781b      	ldrb	r3, [r3, #0]
 8002a66:	4618      	mov	r0, r3
 8002a68:	f002 ff2b 	bl	80058c2 <getSn_RX_RSR>
 8002a6c:	4603      	mov	r3, r0
 8002a6e:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8002a70:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d029      	beq.n	8002aca <DNS_run+0xb6>
		{
			if (len > MAX_DNS_BUF_SIZE) len = MAX_DNS_BUF_SIZE;
 8002a76:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002a78:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002a7c:	d902      	bls.n	8002a84 <DNS_run+0x70>
 8002a7e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002a82:	85fb      	strh	r3, [r7, #46]	; 0x2e
			len = recvfrom(DNS_SOCKET, pDNSMSG, len, ip, &port);
 8002a84:	4b24      	ldr	r3, [pc, #144]	; (8002b18 <DNS_run+0x104>)
 8002a86:	7818      	ldrb	r0, [r3, #0]
 8002a88:	4b24      	ldr	r3, [pc, #144]	; (8002b1c <DNS_run+0x108>)
 8002a8a:	6819      	ldr	r1, [r3, #0]
 8002a8c:	f107 0414 	add.w	r4, r7, #20
 8002a90:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8002a92:	f107 0312 	add.w	r3, r7, #18
 8002a96:	9300      	str	r3, [sp, #0]
 8002a98:	4623      	mov	r3, r4
 8002a9a:	f001 fe93 	bl	80047c4 <recvfrom>
 8002a9e:	4603      	mov	r3, r0
 8002aa0:	85fb      	strh	r3, [r7, #46]	; 0x2e
      #ifdef _DNS_DEBUG_
	      printf("> Receive DNS message from %d.%d.%d.%d(%d). len = %d\r\n", ip[0], ip[1], ip[2], ip[3],port,len);
      #endif
         ret = parseDNSMSG(&dhp, pDNSMSG, ip_from_dns);
 8002aa2:	4b1e      	ldr	r3, [pc, #120]	; (8002b1c <DNS_run+0x108>)
 8002aa4:	6819      	ldr	r1, [r3, #0]
 8002aa6:	f107 0318 	add.w	r3, r7, #24
 8002aaa:	687a      	ldr	r2, [r7, #4]
 8002aac:	4618      	mov	r0, r3
 8002aae:	f7ff fdeb 	bl	8002688 <parseDNSMSG>
 8002ab2:	4603      	mov	r3, r0
 8002ab4:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
			break;
 8002ab8:	bf00      	nop
			printf("> DNS Timeout\r\n");
#endif
			sendto(DNS_SOCKET, pDNSMSG, len, dns_ip, IPPORT_DOMAIN);
		}
	}
	close(DNS_SOCKET);
 8002aba:	4b17      	ldr	r3, [pc, #92]	; (8002b18 <DNS_run+0x104>)
 8002abc:	781b      	ldrb	r3, [r3, #0]
 8002abe:	4618      	mov	r0, r3
 8002ac0:	f001 fa50 	bl	8003f64 <close>
	// Return value
	// 0 > :  failed / 1 - success
	return ret;
 8002ac4:	f997 302c 	ldrsb.w	r3, [r7, #44]	; 0x2c
 8002ac8:	e01e      	b.n	8002b08 <DNS_run+0xf4>
		ret_check_timeout = check_DNS_timeout();
 8002aca:	f7ff ff63 	bl	8002994 <check_DNS_timeout>
 8002ace:	4603      	mov	r3, r0
 8002ad0:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
		if (ret_check_timeout < 0) {
 8002ad4:	f997 302d 	ldrsb.w	r3, [r7, #45]	; 0x2d
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	da06      	bge.n	8002aea <DNS_run+0xd6>
			close(DNS_SOCKET);
 8002adc:	4b0e      	ldr	r3, [pc, #56]	; (8002b18 <DNS_run+0x104>)
 8002ade:	781b      	ldrb	r3, [r3, #0]
 8002ae0:	4618      	mov	r0, r3
 8002ae2:	f001 fa3f 	bl	8003f64 <close>
			return 0; // timeout occurred
 8002ae6:	2300      	movs	r3, #0
 8002ae8:	e00e      	b.n	8002b08 <DNS_run+0xf4>
		else if (ret_check_timeout == 0) {
 8002aea:	f997 302d 	ldrsb.w	r3, [r7, #45]	; 0x2d
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d1b7      	bne.n	8002a62 <DNS_run+0x4e>
			sendto(DNS_SOCKET, pDNSMSG, len, dns_ip, IPPORT_DOMAIN);
 8002af2:	4b09      	ldr	r3, [pc, #36]	; (8002b18 <DNS_run+0x104>)
 8002af4:	7818      	ldrb	r0, [r3, #0]
 8002af6:	4b09      	ldr	r3, [pc, #36]	; (8002b1c <DNS_run+0x108>)
 8002af8:	6819      	ldr	r1, [r3, #0]
 8002afa:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8002afc:	2335      	movs	r3, #53	; 0x35
 8002afe:	9300      	str	r3, [sp, #0]
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	f001 fd29 	bl	8004558 <sendto>
		if ((len = getSn_RX_RSR(DNS_SOCKET)) > 0)
 8002b06:	e7ac      	b.n	8002a62 <DNS_run+0x4e>
}
 8002b08:	4618      	mov	r0, r3
 8002b0a:	3734      	adds	r7, #52	; 0x34
 8002b0c:	46bd      	mov	sp, r7
 8002b0e:	bd90      	pop	{r4, r7, pc}
 8002b10:	20000260 	.word	0x20000260
 8002b14:	20000318 	.word	0x20000318
 8002b18:	20000314 	.word	0x20000314
 8002b1c:	2000031c 	.word	0x2000031c

08002b20 <UART_Printf.8399>:
  */
int main(void)
{
  /* USER CODE BEGIN 1 */

void UART_Printf(const char* fmt, ...) {
 8002b20:	b40f      	push	{r0, r1, r2, r3}
 8002b22:	b580      	push	{r7, lr}
 8002b24:	b0c4      	sub	sp, #272	; 0x110
 8002b26:	af00      	add	r7, sp, #0
 8002b28:	1d3b      	adds	r3, r7, #4
 8002b2a:	f8c3 c000 	str.w	ip, [r3]
	char buff[256];
	va_list args;
	va_start(args, fmt);
 8002b2e:	f507 728e 	add.w	r2, r7, #284	; 0x11c
 8002b32:	f107 030c 	add.w	r3, r7, #12
 8002b36:	601a      	str	r2, [r3, #0]
	vsnprintf(buff, sizeof(buff), fmt, args);
 8002b38:	f107 030c 	add.w	r3, r7, #12
 8002b3c:	f107 0010 	add.w	r0, r7, #16
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8002b46:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002b4a:	f009 f979 	bl	800be40 <vsniprintf>
	HAL_UART_Transmit(&huart1, (uint8_t*)buff, strlen(buff), HAL_MAX_DELAY);
 8002b4e:	f107 0310 	add.w	r3, r7, #16
 8002b52:	4618      	mov	r0, r3
 8002b54:	f7fd fafc 	bl	8000150 <strlen>
 8002b58:	4603      	mov	r3, r0
 8002b5a:	b29a      	uxth	r2, r3
 8002b5c:	f107 0110 	add.w	r1, r7, #16
 8002b60:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002b64:	4805      	ldr	r0, [pc, #20]	; (8002b7c <UART_Printf.8399+0x5c>)
 8002b66:	f007 f8c7 	bl	8009cf8 <HAL_UART_Transmit>
	va_end(args);
}
 8002b6a:	bf00      	nop
 8002b6c:	f507 7788 	add.w	r7, r7, #272	; 0x110
 8002b70:	46bd      	mov	sp, r7
 8002b72:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002b76:	b004      	add	sp, #16
 8002b78:	4770      	bx	lr
 8002b7a:	bf00      	nop
 8002b7c:	200004f0 	.word	0x200004f0

08002b80 <main>:
{
 8002b80:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002b84:	f6ad 0da4 	subw	sp, sp, #2212	; 0x8a4
 8002b88:	af06      	add	r7, sp, #24
int main(void)
 8002b8a:	f607 02a8 	addw	r2, r7, #2216	; 0x8a8
 8002b8e:	463b      	mov	r3, r7
 8002b90:	f8c3 2884 	str.w	r2, [r3, #2180]	; 0x884
 8002b94:	463b      	mov	r3, r7
 8002b96:	f603 0474 	addw	r4, r3, #2164	; 0x874
 8002b9a:	463d      	mov	r5, r7
 8002b9c:	4b8d      	ldr	r3, [pc, #564]	; (8002dd4 <main+0x254>)
 8002b9e:	4626      	mov	r6, r4
 8002ba0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002ba2:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
 8002ba6:	60a5      	str	r5, [r4, #8]
 8002ba8:	4b8b      	ldr	r3, [pc, #556]	; (8002dd8 <main+0x258>)
 8002baa:	60e3      	str	r3, [r4, #12]
 8002bac:	f104 0310 	add.w	r3, r4, #16
 8002bb0:	4619      	mov	r1, r3
 8002bb2:	4620      	mov	r0, r4
 8002bb4:	f7fd ff68 	bl	8000a88 <__clear_cache>
 8002bb8:	463b      	mov	r3, r7
 8002bba:	f603 0464 	addw	r4, r3, #2148	; 0x864
 8002bbe:	463d      	mov	r5, r7
 8002bc0:	4b84      	ldr	r3, [pc, #528]	; (8002dd4 <main+0x254>)
 8002bc2:	4626      	mov	r6, r4
 8002bc4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002bc6:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
 8002bca:	60a5      	str	r5, [r4, #8]
 8002bcc:	4b83      	ldr	r3, [pc, #524]	; (8002ddc <main+0x25c>)
 8002bce:	60e3      	str	r3, [r4, #12]
 8002bd0:	f104 0310 	add.w	r3, r4, #16
 8002bd4:	4619      	mov	r1, r3
 8002bd6:	4620      	mov	r0, r4
 8002bd8:	f7fd ff56 	bl	8000a88 <__clear_cache>
 8002bdc:	463b      	mov	r3, r7
 8002bde:	f603 0434 	addw	r4, r3, #2100	; 0x834
 8002be2:	463d      	mov	r5, r7
 8002be4:	4b7b      	ldr	r3, [pc, #492]	; (8002dd4 <main+0x254>)
 8002be6:	4626      	mov	r6, r4
 8002be8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002bea:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
 8002bee:	60a5      	str	r5, [r4, #8]
 8002bf0:	4b7b      	ldr	r3, [pc, #492]	; (8002de0 <main+0x260>)
 8002bf2:	60e3      	str	r3, [r4, #12]
 8002bf4:	f104 0310 	add.w	r3, r4, #16
 8002bf8:	4619      	mov	r1, r3
 8002bfa:	4620      	mov	r0, r4
 8002bfc:	f7fd ff44 	bl	8000a88 <__clear_cache>
 8002c00:	463b      	mov	r3, r7
 8002c02:	f603 0424 	addw	r4, r3, #2084	; 0x824
 8002c06:	463d      	mov	r5, r7
 8002c08:	4b72      	ldr	r3, [pc, #456]	; (8002dd4 <main+0x254>)
 8002c0a:	4626      	mov	r6, r4
 8002c0c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002c0e:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
 8002c12:	60a5      	str	r5, [r4, #8]
 8002c14:	4b73      	ldr	r3, [pc, #460]	; (8002de4 <main+0x264>)
 8002c16:	60e3      	str	r3, [r4, #12]
 8002c18:	f104 0310 	add.w	r3, r4, #16
 8002c1c:	4619      	mov	r1, r3
 8002c1e:	4620      	mov	r0, r4
 8002c20:	f7fd ff32 	bl	8000a88 <__clear_cache>
 8002c24:	463b      	mov	r3, r7
 8002c26:	f603 0454 	addw	r4, r3, #2132	; 0x854
 8002c2a:	463d      	mov	r5, r7
 8002c2c:	4b69      	ldr	r3, [pc, #420]	; (8002dd4 <main+0x254>)
 8002c2e:	4626      	mov	r6, r4
 8002c30:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002c32:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
 8002c36:	60a5      	str	r5, [r4, #8]
 8002c38:	4b6b      	ldr	r3, [pc, #428]	; (8002de8 <main+0x268>)
 8002c3a:	60e3      	str	r3, [r4, #12]
 8002c3c:	f104 0310 	add.w	r3, r4, #16
 8002c40:	4619      	mov	r1, r3
 8002c42:	4620      	mov	r0, r4
 8002c44:	f7fd ff20 	bl	8000a88 <__clear_cache>
 8002c48:	463b      	mov	r3, r7
 8002c4a:	f603 0444 	addw	r4, r3, #2116	; 0x844
 8002c4e:	463d      	mov	r5, r7
 8002c50:	4b60      	ldr	r3, [pc, #384]	; (8002dd4 <main+0x254>)
 8002c52:	4626      	mov	r6, r4
 8002c54:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002c56:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
 8002c5a:	60a5      	str	r5, [r4, #8]
 8002c5c:	4b63      	ldr	r3, [pc, #396]	; (8002dec <main+0x26c>)
 8002c5e:	60e3      	str	r3, [r4, #12]
 8002c60:	f104 0310 	add.w	r3, r4, #16
 8002c64:	4619      	mov	r1, r3
 8002c66:	4620      	mov	r0, r4
 8002c68:	f7fd ff0e 	bl	8000a88 <__clear_cache>
 8002c6c:	463b      	mov	r3, r7
 8002c6e:	f603 0414 	addw	r4, r3, #2068	; 0x814
 8002c72:	463d      	mov	r5, r7
 8002c74:	4b57      	ldr	r3, [pc, #348]	; (8002dd4 <main+0x254>)
 8002c76:	4626      	mov	r6, r4
 8002c78:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002c7a:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
 8002c7e:	60a5      	str	r5, [r4, #8]
 8002c80:	4b5b      	ldr	r3, [pc, #364]	; (8002df0 <main+0x270>)
 8002c82:	60e3      	str	r3, [r4, #12]
 8002c84:	f104 0310 	add.w	r3, r4, #16
 8002c88:	4619      	mov	r1, r3
 8002c8a:	4620      	mov	r0, r4
 8002c8c:	f7fd fefc 	bl	8000a88 <__clear_cache>
 8002c90:	463b      	mov	r3, r7
 8002c92:	f603 0404 	addw	r4, r3, #2052	; 0x804
 8002c96:	463d      	mov	r5, r7
 8002c98:	4b4e      	ldr	r3, [pc, #312]	; (8002dd4 <main+0x254>)
 8002c9a:	4626      	mov	r6, r4
 8002c9c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002c9e:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
 8002ca2:	60a5      	str	r5, [r4, #8]
 8002ca4:	4b53      	ldr	r3, [pc, #332]	; (8002df4 <main+0x274>)
 8002ca6:	60e3      	str	r3, [r4, #12]
 8002ca8:	f104 0310 	add.w	r3, r4, #16
 8002cac:	4619      	mov	r1, r3
 8002cae:	4620      	mov	r0, r4
 8002cb0:	f7fd feea 	bl	8000a88 <__clear_cache>

void W5500_WriteByte(uint8_t byte) {
	W5500_WriteBuff(&byte, sizeof(byte));
}

volatile bool ip_assigned = false;
 8002cb4:	2200      	movs	r2, #0
 8002cb6:	463b      	mov	r3, r7
 8002cb8:	f883 2800 	strb.w	r2, [r3, #2048]	; 0x800
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002cbc:	f003 f960 	bl	8005f80 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002cc0:	f000 fc92 	bl	80035e8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002cc4:	f000 ffc0 	bl	8003c48 <MX_GPIO_Init>
  MX_DMA_Init();
 8002cc8:	f000 ffa0 	bl	8003c0c <MX_DMA_Init>
  MX_TIM1_Init();
 8002ccc:	f000 fd36 	bl	800373c <MX_TIM1_Init>
  MX_USART1_UART_Init();
 8002cd0:	f000 ff72 	bl	8003bb8 <MX_USART1_UART_Init>
  MX_TIM2_Init();
 8002cd4:	f000 fe08 	bl	80038e8 <MX_TIM2_Init>
  MX_TIM4_Init();
 8002cd8:	f000 ff20 	bl	8003b1c <MX_TIM4_Init>
  MX_TIM3_Init();
 8002cdc:	f000 fe8a 	bl	80039f4 <MX_TIM3_Init>
  MX_I2C1_Init();
 8002ce0:	f000 fcc8 	bl	8003674 <MX_I2C1_Init>
  MX_SPI2_Init();
 8002ce4:	f000 fcf4 	bl	80036d0 <MX_SPI2_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  sumCounter2 = 0;
 8002ce8:	4b43      	ldr	r3, [pc, #268]	; (8002df8 <main+0x278>)
 8002cea:	2200      	movs	r2, #0
 8002cec:	601a      	str	r2, [r3, #0]
  /* Turn off all multiplexer */
  GPIOB->ODR &= ~((1 << Z1Receive) | (1 << Z2Receive) | (1 << Z3Receive) | (1 << Z4Receive));
 8002cee:	4b43      	ldr	r3, [pc, #268]	; (8002dfc <main+0x27c>)
 8002cf0:	68db      	ldr	r3, [r3, #12]
 8002cf2:	4a42      	ldr	r2, [pc, #264]	; (8002dfc <main+0x27c>)
 8002cf4:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8002cf8:	f023 0306 	bic.w	r3, r3, #6
 8002cfc:	60d3      	str	r3, [r2, #12]
   * 4 - Z3 >> Z4
   * 5 - Z4 >> Z3
   * 6 - Z4 >> Z1
   * 7 - Z1 >> Z4
   */
  sprintf(SndBuffer, "\rAnemometer start.\r\n");
 8002cfe:	4940      	ldr	r1, [pc, #256]	; (8002e00 <main+0x280>)
 8002d00:	4840      	ldr	r0, [pc, #256]	; (8002e04 <main+0x284>)
 8002d02:	f009 f829 	bl	800bd58 <siprintf>
  HAL_UART_Transmit(&huart1, (uint8_t *) SndBuffer, sizeof(SndBuffer), 1000);
 8002d06:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002d0a:	2264      	movs	r2, #100	; 0x64
 8002d0c:	493d      	ldr	r1, [pc, #244]	; (8002e04 <main+0x284>)
 8002d0e:	483e      	ldr	r0, [pc, #248]	; (8002e08 <main+0x288>)
 8002d10:	f006 fff2 	bl	8009cf8 <HAL_UART_Transmit>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);	// Reset W5500
 8002d14:	2200      	movs	r2, #0
 8002d16:	2110      	movs	r1, #16
 8002d18:	4838      	ldr	r0, [pc, #224]	; (8002dfc <main+0x27c>)
 8002d1a:	f003 fead 	bl	8006a78 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_SET);
 8002d1e:	2201      	movs	r2, #1
 8002d20:	2110      	movs	r1, #16
 8002d22:	4836      	ldr	r0, [pc, #216]	; (8002dfc <main+0x27c>)
 8002d24:	f003 fea8 	bl	8006a78 <HAL_GPIO_WritePin>
  //HAL_GPIO_WritePin(GPIOB, W5500_CS_Pin, GPIO_PIN_RESET);
  HAL_Delay(3000);
 8002d28:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8002d2c:	f003 f98a 	bl	8006044 <HAL_Delay>
  init_w5500();
 8002d30:	463b      	mov	r3, r7
 8002d32:	469c      	mov	ip, r3
 8002d34:	f000 fa00 	bl	8003138 <init_w5500.8434>
  sprintf(SndBuffer, "Init finish.\r\n");
 8002d38:	4934      	ldr	r1, [pc, #208]	; (8002e0c <main+0x28c>)
 8002d3a:	4832      	ldr	r0, [pc, #200]	; (8002e04 <main+0x284>)
 8002d3c:	f009 f80c 	bl	800bd58 <siprintf>
  HAL_UART_Transmit(&huart1, (uint8_t *) SndBuffer, sizeof(SndBuffer), 1000);
 8002d40:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002d44:	2264      	movs	r2, #100	; 0x64
 8002d46:	492f      	ldr	r1, [pc, #188]	; (8002e04 <main+0x284>)
 8002d48:	482f      	ldr	r0, [pc, #188]	; (8002e08 <main+0x288>)
 8002d4a:	f006 ffd5 	bl	8009cf8 <HAL_UART_Transmit>

  currentMode = 0;
 8002d4e:	4b30      	ldr	r3, [pc, #192]	; (8002e10 <main+0x290>)
 8002d50:	2200      	movs	r2, #0
 8002d52:	801a      	strh	r2, [r3, #0]
  HAL_TIM_Base_Start_IT(&htim4);
 8002d54:	482f      	ldr	r0, [pc, #188]	; (8002e14 <main+0x294>)
 8002d56:	f005 f9c1 	bl	80080dc <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim3);
 8002d5a:	482f      	ldr	r0, [pc, #188]	; (8002e18 <main+0x298>)
 8002d5c:	f005 f9be 	bl	80080dc <HAL_TIM_Base_Start_IT>
  HAL_TIM_IC_Stop_DMA(&htim2, TIM_CHANNEL_1);
 8002d60:	2100      	movs	r1, #0
 8002d62:	482e      	ldr	r0, [pc, #184]	; (8002e1c <main+0x29c>)
 8002d64:	f005 fd4c 	bl	8008800 <HAL_TIM_IC_Stop_DMA>
  measCount = MEASSURE_COUNT;
 8002d68:	4b2d      	ldr	r3, [pc, #180]	; (8002e20 <main+0x2a0>)
 8002d6a:	220a      	movs	r2, #10
 8002d6c:	801a      	strh	r2, [r3, #0]
  Xsum = 0;
 8002d6e:	492d      	ldr	r1, [pc, #180]	; (8002e24 <main+0x2a4>)
 8002d70:	f04f 0200 	mov.w	r2, #0
 8002d74:	f04f 0300 	mov.w	r3, #0
 8002d78:	e9c1 2300 	strd	r2, r3, [r1]
  Ysum = 0;
 8002d7c:	492a      	ldr	r1, [pc, #168]	; (8002e28 <main+0x2a8>)
 8002d7e:	f04f 0200 	mov.w	r2, #0
 8002d82:	f04f 0300 	mov.w	r3, #0
 8002d86:	e9c1 2300 	strd	r2, r3, [r1]

  while (1) {
	  //__HAL_TIM_SET_COUNTER(&htim2, 0x0000);
	  HAL_Delay(1);
 8002d8a:	2001      	movs	r0, #1
 8002d8c:	f003 f95a 	bl	8006044 <HAL_Delay>
	  if (readyFlag) {
 8002d90:	4b26      	ldr	r3, [pc, #152]	; (8002e2c <main+0x2ac>)
 8002d92:	781b      	ldrb	r3, [r3, #0]
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d0f8      	beq.n	8002d8a <main+0x20a>
		  if (Z12 != 0 && Z21 != 0) {
 8002d98:	4b25      	ldr	r3, [pc, #148]	; (8002e30 <main+0x2b0>)
 8002d9a:	881b      	ldrh	r3, [r3, #0]
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d0f4      	beq.n	8002d8a <main+0x20a>
 8002da0:	4b24      	ldr	r3, [pc, #144]	; (8002e34 <main+0x2b4>)
 8002da2:	881b      	ldrh	r3, [r3, #0]
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d0f0      	beq.n	8002d8a <main+0x20a>
			  /* Коррекция для тестирования */
			  //X = X + 145;
			  //Y = Y + 55;
			  //sprintf(SndBuffer, "Z14:%7d, Z41:%7d, Z23:%7d, Z32:%7d   \r", Z14, Z41, Z23, Z32);

			  if (measCount-- != 0) {
 8002da8:	4b1d      	ldr	r3, [pc, #116]	; (8002e20 <main+0x2a0>)
 8002daa:	881b      	ldrh	r3, [r3, #0]
 8002dac:	1e5a      	subs	r2, r3, #1
 8002dae:	b291      	uxth	r1, r2
 8002db0:	4a1b      	ldr	r2, [pc, #108]	; (8002e20 <main+0x2a0>)
 8002db2:	8011      	strh	r1, [r2, #0]
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d043      	beq.n	8002e40 <main+0x2c0>
				  Xsum =+ X;
 8002db8:	4b1f      	ldr	r3, [pc, #124]	; (8002e38 <main+0x2b8>)
 8002dba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002dbe:	4919      	ldr	r1, [pc, #100]	; (8002e24 <main+0x2a4>)
 8002dc0:	e9c1 2300 	strd	r2, r3, [r1]
				  Ysum =+ Y;
 8002dc4:	4b1d      	ldr	r3, [pc, #116]	; (8002e3c <main+0x2bc>)
 8002dc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002dca:	4917      	ldr	r1, [pc, #92]	; (8002e28 <main+0x2a8>)
 8002dcc:	e9c1 2300 	strd	r2, r3, [r1]
 8002dd0:	e0f1      	b.n	8002fb6 <main+0x436>
 8002dd2:	bf00      	nop
 8002dd4:	0800e2bc 	.word	0x0800e2bc
 8002dd8:	08003001 	.word	0x08003001
 8002ddc:	08003025 	.word	0x08003025
 8002de0:	08003049 	.word	0x08003049
 8002de4:	08003075 	.word	0x08003075
 8002de8:	080030a1 	.word	0x080030a1
 8002dec:	080030c5 	.word	0x080030c5
 8002df0:	080030e9 	.word	0x080030e9
 8002df4:	08003119 	.word	0x08003119
 8002df8:	20000494 	.word	0x20000494
 8002dfc:	40010c00 	.word	0x40010c00
 8002e00:	0800e2cc 	.word	0x0800e2cc
 8002e04:	20000264 	.word	0x20000264
 8002e08:	200004f0 	.word	0x200004f0
 8002e0c:	0800e2e4 	.word	0x0800e2e4
 8002e10:	2000058e 	.word	0x2000058e
 8002e14:	200003d4 	.word	0x200003d4
 8002e18:	20000498 	.word	0x20000498
 8002e1c:	20000594 	.word	0x20000594
 8002e20:	2000041e 	.word	0x2000041e
 8002e24:	20000538 	.word	0x20000538
 8002e28:	20000330 	.word	0x20000330
 8002e2c:	20000328 	.word	0x20000328
 8002e30:	20000536 	.word	0x20000536
 8002e34:	20000480 	.word	0x20000480
 8002e38:	200005e0 	.word	0x200005e0
 8002e3c:	20000488 	.word	0x20000488
			  } else {
				  measCount = MEASSURE_COUNT;
 8002e40:	4b63      	ldr	r3, [pc, #396]	; (8002fd0 <main+0x450>)
 8002e42:	220a      	movs	r2, #10
 8002e44:	801a      	strh	r2, [r3, #0]
				  Xsum = Xsum / MEASSURE_COUNT;
 8002e46:	4b63      	ldr	r3, [pc, #396]	; (8002fd4 <main+0x454>)
 8002e48:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002e4c:	f04f 0200 	mov.w	r2, #0
 8002e50:	4b61      	ldr	r3, [pc, #388]	; (8002fd8 <main+0x458>)
 8002e52:	f7fd fc6b 	bl	800072c <__aeabi_ddiv>
 8002e56:	4602      	mov	r2, r0
 8002e58:	460b      	mov	r3, r1
 8002e5a:	495e      	ldr	r1, [pc, #376]	; (8002fd4 <main+0x454>)
 8002e5c:	e9c1 2300 	strd	r2, r3, [r1]
				  Ysum = Ysum / MEASSURE_COUNT
 8002e60:	4b5e      	ldr	r3, [pc, #376]	; (8002fdc <main+0x45c>)
 8002e62:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002e66:	f04f 0200 	mov.w	r2, #0
 8002e6a:	4b5b      	ldr	r3, [pc, #364]	; (8002fd8 <main+0x458>)
 8002e6c:	f7fd fc5e 	bl	800072c <__aeabi_ddiv>
 8002e70:	4602      	mov	r2, r0
 8002e72:	460b      	mov	r3, r1
 8002e74:	4959      	ldr	r1, [pc, #356]	; (8002fdc <main+0x45c>)
 8002e76:	e9c1 2300 	strd	r2, r3, [r1]
				  V = sqrt(pow(Xsum, 2) + pow(Ysum, 2));  // Скорость
 8002e7a:	4b56      	ldr	r3, [pc, #344]	; (8002fd4 <main+0x454>)
 8002e7c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002e80:	f04f 0200 	mov.w	r2, #0
 8002e84:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002e88:	f007 f8ce 	bl	800a028 <pow>
 8002e8c:	4604      	mov	r4, r0
 8002e8e:	460d      	mov	r5, r1
 8002e90:	4b52      	ldr	r3, [pc, #328]	; (8002fdc <main+0x45c>)
 8002e92:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002e96:	f04f 0200 	mov.w	r2, #0
 8002e9a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002e9e:	f007 f8c3 	bl	800a028 <pow>
 8002ea2:	4602      	mov	r2, r0
 8002ea4:	460b      	mov	r3, r1
 8002ea6:	4620      	mov	r0, r4
 8002ea8:	4629      	mov	r1, r5
 8002eaa:	f7fd f95f 	bl	800016c <__adddf3>
 8002eae:	4602      	mov	r2, r0
 8002eb0:	460b      	mov	r3, r1
 8002eb2:	4610      	mov	r0, r2
 8002eb4:	4619      	mov	r1, r3
 8002eb6:	f007 f963 	bl	800a180 <sqrt>
 8002eba:	4602      	mov	r2, r0
 8002ebc:	460b      	mov	r3, r1
 8002ebe:	4948      	ldr	r1, [pc, #288]	; (8002fe0 <main+0x460>)
 8002ec0:	e9c1 2300 	strd	r2, r3, [r1]
				  if ( V != 0 ) {
 8002ec4:	4b46      	ldr	r3, [pc, #280]	; (8002fe0 <main+0x460>)
 8002ec6:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002eca:	f04f 0200 	mov.w	r2, #0
 8002ece:	f04f 0300 	mov.w	r3, #0
 8002ed2:	f7fd fd69 	bl	80009a8 <__aeabi_dcmpeq>
 8002ed6:	4603      	mov	r3, r0
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d13a      	bne.n	8002f52 <main+0x3d2>
					  A = acos( Xsum / V ) * 180 / 3.1415926; // Угол
 8002edc:	4b3d      	ldr	r3, [pc, #244]	; (8002fd4 <main+0x454>)
 8002ede:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002ee2:	4b3f      	ldr	r3, [pc, #252]	; (8002fe0 <main+0x460>)
 8002ee4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ee8:	f7fd fc20 	bl	800072c <__aeabi_ddiv>
 8002eec:	4602      	mov	r2, r0
 8002eee:	460b      	mov	r3, r1
 8002ef0:	4610      	mov	r0, r2
 8002ef2:	4619      	mov	r1, r3
 8002ef4:	f007 f86a 	bl	8009fcc <acos>
 8002ef8:	f04f 0200 	mov.w	r2, #0
 8002efc:	4b39      	ldr	r3, [pc, #228]	; (8002fe4 <main+0x464>)
 8002efe:	f7fd faeb 	bl	80004d8 <__aeabi_dmul>
 8002f02:	4602      	mov	r2, r0
 8002f04:	460b      	mov	r3, r1
 8002f06:	4610      	mov	r0, r2
 8002f08:	4619      	mov	r1, r3
 8002f0a:	a32d      	add	r3, pc, #180	; (adr r3, 8002fc0 <main+0x440>)
 8002f0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f10:	f7fd fc0c 	bl	800072c <__aeabi_ddiv>
 8002f14:	4602      	mov	r2, r0
 8002f16:	460b      	mov	r3, r1
 8002f18:	4933      	ldr	r1, [pc, #204]	; (8002fe8 <main+0x468>)
 8002f1a:	e9c1 2300 	strd	r2, r3, [r1]
					  if (Ysum < 0) {
 8002f1e:	4b2f      	ldr	r3, [pc, #188]	; (8002fdc <main+0x45c>)
 8002f20:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002f24:	f04f 0200 	mov.w	r2, #0
 8002f28:	f04f 0300 	mov.w	r3, #0
 8002f2c:	f7fd fd46 	bl	80009bc <__aeabi_dcmplt>
 8002f30:	4603      	mov	r3, r0
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d014      	beq.n	8002f60 <main+0x3e0>
						  A = 360 - A; // III, IV квадранты
 8002f36:	4b2c      	ldr	r3, [pc, #176]	; (8002fe8 <main+0x468>)
 8002f38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f3c:	f04f 0000 	mov.w	r0, #0
 8002f40:	492a      	ldr	r1, [pc, #168]	; (8002fec <main+0x46c>)
 8002f42:	f7fd f911 	bl	8000168 <__aeabi_dsub>
 8002f46:	4602      	mov	r2, r0
 8002f48:	460b      	mov	r3, r1
 8002f4a:	4927      	ldr	r1, [pc, #156]	; (8002fe8 <main+0x468>)
 8002f4c:	e9c1 2300 	strd	r2, r3, [r1]
 8002f50:	e006      	b.n	8002f60 <main+0x3e0>
					  }
				  } else {
					  A = 0;
 8002f52:	4925      	ldr	r1, [pc, #148]	; (8002fe8 <main+0x468>)
 8002f54:	f04f 0200 	mov.w	r2, #0
 8002f58:	f04f 0300 	mov.w	r3, #0
 8002f5c:	e9c1 2300 	strd	r2, r3, [r1]
				  }
				  V = V / SPEED_CALIBRATE;
 8002f60:	4b1f      	ldr	r3, [pc, #124]	; (8002fe0 <main+0x460>)
 8002f62:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002f66:	a318      	add	r3, pc, #96	; (adr r3, 8002fc8 <main+0x448>)
 8002f68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f6c:	f7fd fbde 	bl	800072c <__aeabi_ddiv>
 8002f70:	4602      	mov	r2, r0
 8002f72:	460b      	mov	r3, r1
 8002f74:	491a      	ldr	r1, [pc, #104]	; (8002fe0 <main+0x460>)
 8002f76:	e9c1 2300 	strd	r2, r3, [r1]
				  sprintf(SndBuffer, "X:%7.0f, Y:%7.0f, V:%8.1f, A:%4.0f   \r", Xsum, Ysum, V, A);
 8002f7a:	4b16      	ldr	r3, [pc, #88]	; (8002fd4 <main+0x454>)
 8002f7c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8002f80:	4b16      	ldr	r3, [pc, #88]	; (8002fdc <main+0x45c>)
 8002f82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f86:	4916      	ldr	r1, [pc, #88]	; (8002fe0 <main+0x460>)
 8002f88:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002f8c:	4c16      	ldr	r4, [pc, #88]	; (8002fe8 <main+0x468>)
 8002f8e:	cc30      	ldmia	r4, {r4, r5}
 8002f90:	e9cd 4504 	strd	r4, r5, [sp, #16]
 8002f94:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8002f98:	e9cd 2300 	strd	r2, r3, [sp]
 8002f9c:	4642      	mov	r2, r8
 8002f9e:	464b      	mov	r3, r9
 8002fa0:	4913      	ldr	r1, [pc, #76]	; (8002ff0 <main+0x470>)
 8002fa2:	4814      	ldr	r0, [pc, #80]	; (8002ff4 <main+0x474>)
 8002fa4:	f008 fed8 	bl	800bd58 <siprintf>
				  HAL_UART_Transmit(&huart1, (uint8_t *) SndBuffer, sizeof(SndBuffer), 1000);
 8002fa8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002fac:	2264      	movs	r2, #100	; 0x64
 8002fae:	4911      	ldr	r1, [pc, #68]	; (8002ff4 <main+0x474>)
 8002fb0:	4811      	ldr	r0, [pc, #68]	; (8002ff8 <main+0x478>)
 8002fb2:	f006 fea1 	bl	8009cf8 <HAL_UART_Transmit>
			  }
			  readyFlag = FALSE;
 8002fb6:	4b11      	ldr	r3, [pc, #68]	; (8002ffc <main+0x47c>)
 8002fb8:	2200      	movs	r2, #0
 8002fba:	701a      	strb	r2, [r3, #0]
	  HAL_Delay(1);
 8002fbc:	e6e5      	b.n	8002d8a <main+0x20a>
 8002fbe:	bf00      	nop
 8002fc0:	4d12d84a 	.word	0x4d12d84a
 8002fc4:	400921fb 	.word	0x400921fb
 8002fc8:	66666666 	.word	0x66666666
 8002fcc:	40146666 	.word	0x40146666
 8002fd0:	2000041e 	.word	0x2000041e
 8002fd4:	20000538 	.word	0x20000538
 8002fd8:	40240000 	.word	0x40240000
 8002fdc:	20000330 	.word	0x20000330
 8002fe0:	200004e8 	.word	0x200004e8
 8002fe4:	40668000 	.word	0x40668000
 8002fe8:	20000478 	.word	0x20000478
 8002fec:	40768000 	.word	0x40768000
 8002ff0:	0800e2f4 	.word	0x0800e2f4
 8002ff4:	20000264 	.word	0x20000264
 8002ff8:	200004f0 	.word	0x200004f0
 8002ffc:	20000328 	.word	0x20000328

08003000 <W5500_Select.8405>:
void W5500_Select(void) {
 8003000:	b580      	push	{r7, lr}
 8003002:	b082      	sub	sp, #8
 8003004:	af00      	add	r7, sp, #0
 8003006:	f8c7 c004 	str.w	ip, [r7, #4]
	HAL_GPIO_WritePin(GPIOB, W5500_CS_Pin, GPIO_PIN_RESET);
 800300a:	2200      	movs	r2, #0
 800300c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003010:	4803      	ldr	r0, [pc, #12]	; (8003020 <W5500_Select.8405+0x20>)
 8003012:	f003 fd31 	bl	8006a78 <HAL_GPIO_WritePin>
}
 8003016:	bf00      	nop
 8003018:	3708      	adds	r7, #8
 800301a:	46bd      	mov	sp, r7
 800301c:	bd80      	pop	{r7, pc}
 800301e:	bf00      	nop
 8003020:	40010c00 	.word	0x40010c00

08003024 <W5500_Unselect.8408>:
void W5500_Unselect(void) {
 8003024:	b580      	push	{r7, lr}
 8003026:	b082      	sub	sp, #8
 8003028:	af00      	add	r7, sp, #0
 800302a:	f8c7 c004 	str.w	ip, [r7, #4]
	HAL_GPIO_WritePin(GPIOB, W5500_CS_Pin, GPIO_PIN_SET);
 800302e:	2201      	movs	r2, #1
 8003030:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003034:	4803      	ldr	r0, [pc, #12]	; (8003044 <W5500_Unselect.8408+0x20>)
 8003036:	f003 fd1f 	bl	8006a78 <HAL_GPIO_WritePin>
}
 800303a:	bf00      	nop
 800303c:	3708      	adds	r7, #8
 800303e:	46bd      	mov	sp, r7
 8003040:	bd80      	pop	{r7, pc}
 8003042:	bf00      	nop
 8003044:	40010c00 	.word	0x40010c00

08003048 <W5500_ReadBuff.8412>:
void W5500_ReadBuff(uint8_t* buff, uint16_t len) {
 8003048:	b580      	push	{r7, lr}
 800304a:	b084      	sub	sp, #16
 800304c:	af00      	add	r7, sp, #0
 800304e:	60f8      	str	r0, [r7, #12]
 8003050:	460b      	mov	r3, r1
 8003052:	817b      	strh	r3, [r7, #10]
 8003054:	f8c7 c004 	str.w	ip, [r7, #4]
	HAL_SPI_Receive(&hspi2, buff, len, HAL_MAX_DELAY);
 8003058:	897a      	ldrh	r2, [r7, #10]
 800305a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800305e:	68f9      	ldr	r1, [r7, #12]
 8003060:	4803      	ldr	r0, [pc, #12]	; (8003070 <W5500_ReadBuff.8412+0x28>)
 8003062:	f004 fc3f 	bl	80078e4 <HAL_SPI_Receive>
}
 8003066:	bf00      	nop
 8003068:	3710      	adds	r7, #16
 800306a:	46bd      	mov	sp, r7
 800306c:	bd80      	pop	{r7, pc}
 800306e:	bf00      	nop
 8003070:	2000037c 	.word	0x2000037c

08003074 <W5500_WriteBuff.8416>:
void W5500_WriteBuff(uint8_t* buff, uint16_t len) {
 8003074:	b580      	push	{r7, lr}
 8003076:	b084      	sub	sp, #16
 8003078:	af00      	add	r7, sp, #0
 800307a:	60f8      	str	r0, [r7, #12]
 800307c:	460b      	mov	r3, r1
 800307e:	817b      	strh	r3, [r7, #10]
 8003080:	f8c7 c004 	str.w	ip, [r7, #4]
	HAL_SPI_Transmit(&hspi2, buff, len, HAL_MAX_DELAY);
 8003084:	897a      	ldrh	r2, [r7, #10]
 8003086:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800308a:	68f9      	ldr	r1, [r7, #12]
 800308c:	4803      	ldr	r0, [pc, #12]	; (800309c <W5500_WriteBuff.8416+0x28>)
 800308e:	f004 faed 	bl	800766c <HAL_SPI_Transmit>
}
 8003092:	bf00      	nop
 8003094:	3710      	adds	r7, #16
 8003096:	46bd      	mov	sp, r7
 8003098:	bd80      	pop	{r7, pc}
 800309a:	bf00      	nop
 800309c:	2000037c 	.word	0x2000037c

080030a0 <W5500_ReadByte.8419>:
uint8_t W5500_ReadByte(void) {
 80030a0:	b580      	push	{r7, lr}
 80030a2:	b084      	sub	sp, #16
 80030a4:	af00      	add	r7, sp, #0
 80030a6:	4662      	mov	r2, ip
 80030a8:	f8c7 c004 	str.w	ip, [r7, #4]
	W5500_ReadBuff(&byte, sizeof(byte));
 80030ac:	f107 030f 	add.w	r3, r7, #15
 80030b0:	4694      	mov	ip, r2
 80030b2:	2101      	movs	r1, #1
 80030b4:	4618      	mov	r0, r3
 80030b6:	f7ff ffc7 	bl	8003048 <W5500_ReadBuff.8412>
	return byte;
 80030ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80030bc:	4618      	mov	r0, r3
 80030be:	3710      	adds	r7, #16
 80030c0:	46bd      	mov	sp, r7
 80030c2:	bd80      	pop	{r7, pc}

080030c4 <W5500_WriteByte.8423>:
void W5500_WriteByte(uint8_t byte) {
 80030c4:	b580      	push	{r7, lr}
 80030c6:	b082      	sub	sp, #8
 80030c8:	af00      	add	r7, sp, #0
 80030ca:	4603      	mov	r3, r0
 80030cc:	71fb      	strb	r3, [r7, #7]
 80030ce:	4662      	mov	r2, ip
 80030d0:	f8c7 c000 	str.w	ip, [r7]
	W5500_WriteBuff(&byte, sizeof(byte));
 80030d4:	1dfb      	adds	r3, r7, #7
 80030d6:	4694      	mov	ip, r2
 80030d8:	2101      	movs	r1, #1
 80030da:	4618      	mov	r0, r3
 80030dc:	f7ff ffca 	bl	8003074 <W5500_WriteBuff.8416>
}
 80030e0:	bf00      	nop
 80030e2:	3708      	adds	r7, #8
 80030e4:	46bd      	mov	sp, r7
 80030e6:	bd80      	pop	{r7, pc}

080030e8 <Callback_IPAssigned.8427>:
void Callback_IPAssigned(void) {
 80030e8:	b590      	push	{r4, r7, lr}
 80030ea:	b083      	sub	sp, #12
 80030ec:	af00      	add	r7, sp, #0
 80030ee:	4664      	mov	r4, ip
 80030f0:	f8c7 c004 	str.w	ip, [r7, #4]
    UART_Printf("Callback: IP assigned! Leased time: %d sec\r\n", getDHCPLeasetime());
 80030f4:	f7ff f8d2 	bl	800229c <getDHCPLeasetime>
 80030f8:	4603      	mov	r3, r0
 80030fa:	46a4      	mov	ip, r4
 80030fc:	4619      	mov	r1, r3
 80030fe:	4805      	ldr	r0, [pc, #20]	; (8003114 <Callback_IPAssigned.8427+0x2c>)
 8003100:	f7ff fd0e 	bl	8002b20 <UART_Printf.8399>
    ip_assigned = true;
 8003104:	2301      	movs	r3, #1
 8003106:	f884 3800 	strb.w	r3, [r4, #2048]	; 0x800
}
 800310a:	bf00      	nop
 800310c:	370c      	adds	r7, #12
 800310e:	46bd      	mov	sp, r7
 8003110:	bd90      	pop	{r4, r7, pc}
 8003112:	bf00      	nop
 8003114:	0800e31c 	.word	0x0800e31c

08003118 <Callback_IPConflict.8430>:
void Callback_IPConflict(void) {
 8003118:	b580      	push	{r7, lr}
 800311a:	b082      	sub	sp, #8
 800311c:	af00      	add	r7, sp, #0
 800311e:	4663      	mov	r3, ip
 8003120:	f8c7 c004 	str.w	ip, [r7, #4]
    UART_Printf("Callback: IP conflict!\r\n");
 8003124:	469c      	mov	ip, r3
 8003126:	4803      	ldr	r0, [pc, #12]	; (8003134 <Callback_IPConflict.8430+0x1c>)
 8003128:	f7ff fcfa 	bl	8002b20 <UART_Printf.8399>
}
 800312c:	bf00      	nop
 800312e:	3708      	adds	r7, #8
 8003130:	46bd      	mov	sp, r7
 8003132:	bd80      	pop	{r7, pc}
 8003134:	0800e34c 	.word	0x0800e34c

08003138 <init_w5500.8434>:
void init_w5500() {
 8003138:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800313c:	b0b3      	sub	sp, #204	; 0xcc
 800313e:	af0e      	add	r7, sp, #56	; 0x38
 8003140:	4666      	mov	r6, ip
 8003142:	f8c7 c01c 	str.w	ip, [r7, #28]
    UART_Printf("\r\ninit() called!\r\n");
 8003146:	46b4      	mov	ip, r6
 8003148:	48d4      	ldr	r0, [pc, #848]	; (800349c <init_w5500.8434+0x364>)
 800314a:	f7ff fce9 	bl	8002b20 <UART_Printf.8399>
    UART_Printf("Registering W5500 callbacks...\r\n");
 800314e:	46b4      	mov	ip, r6
 8003150:	48d3      	ldr	r0, [pc, #844]	; (80034a0 <init_w5500.8434+0x368>)
 8003152:	f7ff fce5 	bl	8002b20 <UART_Printf.8399>
    reg_wizchip_cs_cbfunc(W5500_Select, W5500_Unselect);
 8003156:	f606 0374 	addw	r3, r6, #2164	; 0x874
 800315a:	f043 0301 	orr.w	r3, r3, #1
 800315e:	461a      	mov	r2, r3
 8003160:	f606 0364 	addw	r3, r6, #2148	; 0x864
 8003164:	f043 0301 	orr.w	r3, r3, #1
 8003168:	4619      	mov	r1, r3
 800316a:	4610      	mov	r0, r2
 800316c:	f002 fd4e 	bl	8005c0c <reg_wizchip_cs_cbfunc>
    reg_wizchip_spi_cbfunc(W5500_ReadByte, W5500_WriteByte);
 8003170:	f606 0354 	addw	r3, r6, #2132	; 0x854
 8003174:	f043 0301 	orr.w	r3, r3, #1
 8003178:	461a      	mov	r2, r3
 800317a:	f606 0344 	addw	r3, r6, #2116	; 0x844
 800317e:	f043 0301 	orr.w	r3, r3, #1
 8003182:	4619      	mov	r1, r3
 8003184:	4610      	mov	r0, r2
 8003186:	f002 fd65 	bl	8005c54 <reg_wizchip_spi_cbfunc>
    reg_wizchip_spiburst_cbfunc(W5500_ReadBuff, W5500_WriteBuff);
 800318a:	f606 0334 	addw	r3, r6, #2100	; 0x834
 800318e:	f043 0301 	orr.w	r3, r3, #1
 8003192:	461a      	mov	r2, r3
 8003194:	f606 0324 	addw	r3, r6, #2084	; 0x824
 8003198:	f043 0301 	orr.w	r3, r3, #1
 800319c:	4619      	mov	r1, r3
 800319e:	4610      	mov	r0, r2
 80031a0:	f002 fd84 	bl	8005cac <reg_wizchip_spiburst_cbfunc>
    UART_Printf("Calling wizchip_init()...\r\n");
 80031a4:	46b4      	mov	ip, r6
 80031a6:	48bf      	ldr	r0, [pc, #764]	; (80034a4 <init_w5500.8434+0x36c>)
 80031a8:	f7ff fcba 	bl	8002b20 <UART_Printf.8399>
    uint8_t rx_tx_buff_sizes[] = {2, 2, 2, 2, 2, 2, 2, 2};
 80031ac:	4abe      	ldr	r2, [pc, #760]	; (80034a8 <init_w5500.8434+0x370>)
 80031ae:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80031b2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80031b6:	e883 0003 	stmia.w	r3, {r0, r1}
    wizchip_init(rx_tx_buff_sizes, rx_tx_buff_sizes);
 80031ba:	f107 0270 	add.w	r2, r7, #112	; 0x70
 80031be:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80031c2:	4611      	mov	r1, r2
 80031c4:	4618      	mov	r0, r3
 80031c6:	f002 fde9 	bl	8005d9c <wizchip_init>
    UART_Printf("Calling DHCP_init()...\r\n");
 80031ca:	46b4      	mov	ip, r6
 80031cc:	48b7      	ldr	r0, [pc, #732]	; (80034ac <init_w5500.8434+0x374>)
 80031ce:	f7ff fca7 	bl	8002b20 <UART_Printf.8399>
    wiz_NetInfo net_info = {
 80031d2:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80031d6:	2200      	movs	r2, #0
 80031d8:	601a      	str	r2, [r3, #0]
 80031da:	605a      	str	r2, [r3, #4]
 80031dc:	609a      	str	r2, [r3, #8]
 80031de:	60da      	str	r2, [r3, #12]
 80031e0:	611a      	str	r2, [r3, #16]
 80031e2:	f8c3 2013 	str.w	r2, [r3, #19]
 80031e6:	4ab2      	ldr	r2, [pc, #712]	; (80034b0 <init_w5500.8434+0x378>)
 80031e8:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80031ec:	e892 0003 	ldmia.w	r2, {r0, r1}
 80031f0:	6018      	str	r0, [r3, #0]
 80031f2:	3304      	adds	r3, #4
 80031f4:	8019      	strh	r1, [r3, #0]
 80031f6:	2302      	movs	r3, #2
 80031f8:	f887 306e 	strb.w	r3, [r7, #110]	; 0x6e
    setSHAR(net_info.mac);
 80031fc:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8003200:	2206      	movs	r2, #6
 8003202:	4619      	mov	r1, r3
 8003204:	f44f 6010 	mov.w	r0, #2304	; 0x900
 8003208:	f002 fab0 	bl	800576c <WIZCHIP_WRITE_BUF>
    DHCP_init(DHCP_SOCKET, dhcp_buffer);
 800320c:	f506 6380 	add.w	r3, r6, #1024	; 0x400
 8003210:	4619      	mov	r1, r3
 8003212:	2000      	movs	r0, #0
 8003214:	f7fe ff20 	bl	8002058 <DHCP_init>
    UART_Printf("Registering DHCP callbacks...\r\n");
 8003218:	46b4      	mov	ip, r6
 800321a:	48a6      	ldr	r0, [pc, #664]	; (80034b4 <init_w5500.8434+0x37c>)
 800321c:	f7ff fc80 	bl	8002b20 <UART_Printf.8399>
    reg_dhcp_cbfunc(
 8003220:	f606 0314 	addw	r3, r6, #2068	; 0x814
 8003224:	f043 0301 	orr.w	r3, r3, #1
 8003228:	4618      	mov	r0, r3
 800322a:	f606 0314 	addw	r3, r6, #2068	; 0x814
 800322e:	f043 0301 	orr.w	r3, r3, #1
 8003232:	4619      	mov	r1, r3
 8003234:	f606 0304 	addw	r3, r6, #2052	; 0x804
 8003238:	f043 0301 	orr.w	r3, r3, #1
 800323c:	461a      	mov	r2, r3
 800323e:	f7fd fc6b 	bl	8000b18 <reg_dhcp_cbfunc>
    UART_Printf("Calling DHCP_run()...\r\n");
 8003242:	46b4      	mov	ip, r6
 8003244:	489c      	ldr	r0, [pc, #624]	; (80034b8 <init_w5500.8434+0x380>)
 8003246:	f7ff fc6b 	bl	8002b20 <UART_Printf.8399>
    uint32_t ctr = 10000;
 800324a:	f242 7310 	movw	r3, #10000	; 0x2710
 800324e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    while((!ip_assigned) && (ctr > 0)) {
 8003252:	e006      	b.n	8003262 <init_w5500.8434+0x12a>
        DHCP_run();
 8003254:	f7fe fd48 	bl	8001ce8 <DHCP_run>
        ctr--;
 8003258:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800325c:	3b01      	subs	r3, #1
 800325e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    while((!ip_assigned) && (ctr > 0)) {
 8003262:	f896 3800 	ldrb.w	r3, [r6, #2048]	; 0x800
 8003266:	b2db      	uxtb	r3, r3
 8003268:	f083 0301 	eor.w	r3, r3, #1
 800326c:	b2db      	uxtb	r3, r3
 800326e:	2b00      	cmp	r3, #0
 8003270:	d003      	beq.n	800327a <init_w5500.8434+0x142>
 8003272:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003276:	2b00      	cmp	r3, #0
 8003278:	d1ec      	bne.n	8003254 <init_w5500.8434+0x11c>
    if(!ip_assigned) {
 800327a:	f896 3800 	ldrb.w	r3, [r6, #2048]	; 0x800
 800327e:	b2db      	uxtb	r3, r3
 8003280:	f083 0301 	eor.w	r3, r3, #1
 8003284:	b2db      	uxtb	r3, r3
 8003286:	2b00      	cmp	r3, #0
 8003288:	d004      	beq.n	8003294 <init_w5500.8434+0x15c>
        UART_Printf("\r\nIP was not assigned :(\r\n");
 800328a:	46b4      	mov	ip, r6
 800328c:	488b      	ldr	r0, [pc, #556]	; (80034bc <init_w5500.8434+0x384>)
 800328e:	f7ff fc47 	bl	8002b20 <UART_Printf.8399>
        return;
 8003292:	e194      	b.n	80035be <init_w5500.8434+0x486>
    getIPfromDHCP(net_info.ip);
 8003294:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8003298:	3306      	adds	r3, #6
 800329a:	4618      	mov	r0, r3
 800329c:	f7fe ff86 	bl	80021ac <getIPfromDHCP>
    getGWfromDHCP(net_info.gw);
 80032a0:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80032a4:	330e      	adds	r3, #14
 80032a6:	4618      	mov	r0, r3
 80032a8:	f7fe ff9e 	bl	80021e8 <getGWfromDHCP>
    getSNfromDHCP(net_info.sn);
 80032ac:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80032b0:	330a      	adds	r3, #10
 80032b2:	4618      	mov	r0, r3
 80032b4:	f7fe ffb6 	bl	8002224 <getSNfromDHCP>
    getDNSfromDHCP(dns);
 80032b8:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80032bc:	4618      	mov	r0, r3
 80032be:	f7fe ffcf 	bl	8002260 <getDNSfromDHCP>
        net_info.ip[0], net_info.ip[1], net_info.ip[2], net_info.ip[3],
 80032c2:	f897 305e 	ldrb.w	r3, [r7, #94]	; 0x5e
    UART_Printf("IP:  %d.%d.%d.%d\r\nGW:  %d.%d.%d.%d\r\nNet: %d.%d.%d.%d\r\nDNS: %d.%d.%d.%d\r\n",
 80032c6:	469e      	mov	lr, r3
        net_info.ip[0], net_info.ip[1], net_info.ip[2], net_info.ip[3],
 80032c8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
    UART_Printf("IP:  %d.%d.%d.%d\r\nGW:  %d.%d.%d.%d\r\nNet: %d.%d.%d.%d\r\nDNS: %d.%d.%d.%d\r\n",
 80032cc:	4698      	mov	r8, r3
        net_info.ip[0], net_info.ip[1], net_info.ip[2], net_info.ip[3],
 80032ce:	f897 3060 	ldrb.w	r3, [r7, #96]	; 0x60
    UART_Printf("IP:  %d.%d.%d.%d\r\nGW:  %d.%d.%d.%d\r\nNet: %d.%d.%d.%d\r\nDNS: %d.%d.%d.%d\r\n",
 80032d2:	4699      	mov	r9, r3
        net_info.ip[0], net_info.ip[1], net_info.ip[2], net_info.ip[3],
 80032d4:	f897 3061 	ldrb.w	r3, [r7, #97]	; 0x61
    UART_Printf("IP:  %d.%d.%d.%d\r\nGW:  %d.%d.%d.%d\r\nNet: %d.%d.%d.%d\r\nDNS: %d.%d.%d.%d\r\n",
 80032d8:	461c      	mov	r4, r3
        net_info.gw[0], net_info.gw[1], net_info.gw[2], net_info.gw[3],
 80032da:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
    UART_Printf("IP:  %d.%d.%d.%d\r\nGW:  %d.%d.%d.%d\r\nNet: %d.%d.%d.%d\r\nDNS: %d.%d.%d.%d\r\n",
 80032de:	461d      	mov	r5, r3
        net_info.gw[0], net_info.gw[1], net_info.gw[2], net_info.gw[3],
 80032e0:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
    UART_Printf("IP:  %d.%d.%d.%d\r\nGW:  %d.%d.%d.%d\r\nNet: %d.%d.%d.%d\r\nDNS: %d.%d.%d.%d\r\n",
 80032e4:	61bb      	str	r3, [r7, #24]
        net_info.gw[0], net_info.gw[1], net_info.gw[2], net_info.gw[3],
 80032e6:	f897 3068 	ldrb.w	r3, [r7, #104]	; 0x68
    UART_Printf("IP:  %d.%d.%d.%d\r\nGW:  %d.%d.%d.%d\r\nNet: %d.%d.%d.%d\r\nDNS: %d.%d.%d.%d\r\n",
 80032ea:	617b      	str	r3, [r7, #20]
        net_info.gw[0], net_info.gw[1], net_info.gw[2], net_info.gw[3],
 80032ec:	f897 3069 	ldrb.w	r3, [r7, #105]	; 0x69
    UART_Printf("IP:  %d.%d.%d.%d\r\nGW:  %d.%d.%d.%d\r\nNet: %d.%d.%d.%d\r\nDNS: %d.%d.%d.%d\r\n",
 80032f0:	613b      	str	r3, [r7, #16]
        net_info.sn[0], net_info.sn[1], net_info.sn[2], net_info.sn[3],
 80032f2:	f897 3062 	ldrb.w	r3, [r7, #98]	; 0x62
    UART_Printf("IP:  %d.%d.%d.%d\r\nGW:  %d.%d.%d.%d\r\nNet: %d.%d.%d.%d\r\nDNS: %d.%d.%d.%d\r\n",
 80032f6:	60fb      	str	r3, [r7, #12]
        net_info.sn[0], net_info.sn[1], net_info.sn[2], net_info.sn[3],
 80032f8:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
    UART_Printf("IP:  %d.%d.%d.%d\r\nGW:  %d.%d.%d.%d\r\nNet: %d.%d.%d.%d\r\nDNS: %d.%d.%d.%d\r\n",
 80032fc:	60bb      	str	r3, [r7, #8]
        net_info.sn[0], net_info.sn[1], net_info.sn[2], net_info.sn[3],
 80032fe:	f897 3064 	ldrb.w	r3, [r7, #100]	; 0x64
    UART_Printf("IP:  %d.%d.%d.%d\r\nGW:  %d.%d.%d.%d\r\nNet: %d.%d.%d.%d\r\nDNS: %d.%d.%d.%d\r\n",
 8003302:	607b      	str	r3, [r7, #4]
        net_info.sn[0], net_info.sn[1], net_info.sn[2], net_info.sn[3],
 8003304:	f897 3065 	ldrb.w	r3, [r7, #101]	; 0x65
    UART_Printf("IP:  %d.%d.%d.%d\r\nGW:  %d.%d.%d.%d\r\nNet: %d.%d.%d.%d\r\nDNS: %d.%d.%d.%d\r\n",
 8003308:	603b      	str	r3, [r7, #0]
        dns[0], dns[1], dns[2], dns[3]
 800330a:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
    UART_Printf("IP:  %d.%d.%d.%d\r\nGW:  %d.%d.%d.%d\r\nNet: %d.%d.%d.%d\r\nDNS: %d.%d.%d.%d\r\n",
 800330e:	4618      	mov	r0, r3
        dns[0], dns[1], dns[2], dns[3]
 8003310:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
    UART_Printf("IP:  %d.%d.%d.%d\r\nGW:  %d.%d.%d.%d\r\nNet: %d.%d.%d.%d\r\nDNS: %d.%d.%d.%d\r\n",
 8003314:	4619      	mov	r1, r3
        dns[0], dns[1], dns[2], dns[3]
 8003316:	f897 3056 	ldrb.w	r3, [r7, #86]	; 0x56
    UART_Printf("IP:  %d.%d.%d.%d\r\nGW:  %d.%d.%d.%d\r\nNet: %d.%d.%d.%d\r\nDNS: %d.%d.%d.%d\r\n",
 800331a:	461a      	mov	r2, r3
        dns[0], dns[1], dns[2], dns[3]
 800331c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
    UART_Printf("IP:  %d.%d.%d.%d\r\nGW:  %d.%d.%d.%d\r\nNet: %d.%d.%d.%d\r\nDNS: %d.%d.%d.%d\r\n",
 8003320:	930c      	str	r3, [sp, #48]	; 0x30
 8003322:	920b      	str	r2, [sp, #44]	; 0x2c
 8003324:	910a      	str	r1, [sp, #40]	; 0x28
 8003326:	9009      	str	r0, [sp, #36]	; 0x24
 8003328:	683a      	ldr	r2, [r7, #0]
 800332a:	9208      	str	r2, [sp, #32]
 800332c:	687a      	ldr	r2, [r7, #4]
 800332e:	9207      	str	r2, [sp, #28]
 8003330:	68ba      	ldr	r2, [r7, #8]
 8003332:	9206      	str	r2, [sp, #24]
 8003334:	68fa      	ldr	r2, [r7, #12]
 8003336:	9205      	str	r2, [sp, #20]
 8003338:	693a      	ldr	r2, [r7, #16]
 800333a:	9204      	str	r2, [sp, #16]
 800333c:	697a      	ldr	r2, [r7, #20]
 800333e:	9203      	str	r2, [sp, #12]
 8003340:	69bb      	ldr	r3, [r7, #24]
 8003342:	9302      	str	r3, [sp, #8]
 8003344:	9501      	str	r5, [sp, #4]
 8003346:	9400      	str	r4, [sp, #0]
 8003348:	46b4      	mov	ip, r6
 800334a:	464b      	mov	r3, r9
 800334c:	4642      	mov	r2, r8
 800334e:	4671      	mov	r1, lr
 8003350:	485b      	ldr	r0, [pc, #364]	; (80034c0 <init_w5500.8434+0x388>)
 8003352:	f7ff fbe5 	bl	8002b20 <UART_Printf.8399>
    UART_Printf("Calling wizchip_setnetinfo()...\r\n");
 8003356:	46b4      	mov	ip, r6
 8003358:	485a      	ldr	r0, [pc, #360]	; (80034c4 <init_w5500.8434+0x38c>)
 800335a:	f7ff fbe1 	bl	8002b20 <UART_Printf.8399>
    wizchip_setnetinfo(&net_info);
 800335e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8003362:	4618      	mov	r0, r3
 8003364:	f002 fda6 	bl	8005eb4 <wizchip_setnetinfo>
    UART_Printf("Calling DNS_init()...\r\n");
 8003368:	46b4      	mov	ip, r6
 800336a:	4857      	ldr	r0, [pc, #348]	; (80034c8 <init_w5500.8434+0x390>)
 800336c:	f7ff fbd8 	bl	8002b20 <UART_Printf.8399>
    DNS_init(DNS_SOCKET, dns_buffer);
 8003370:	4633      	mov	r3, r6
 8003372:	4619      	mov	r1, r3
 8003374:	2001      	movs	r0, #1
 8003376:	f7ff fb31 	bl	80029dc <DNS_init>
        char domain_name[] = "eax.me";
 800337a:	4a54      	ldr	r2, [pc, #336]	; (80034cc <init_w5500.8434+0x394>)
 800337c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003380:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003384:	6018      	str	r0, [r3, #0]
 8003386:	3304      	adds	r3, #4
 8003388:	8019      	strh	r1, [r3, #0]
 800338a:	3302      	adds	r3, #2
 800338c:	0c0a      	lsrs	r2, r1, #16
 800338e:	701a      	strb	r2, [r3, #0]
        UART_Printf("Resolving domain name \"%s\"...\r\n", domain_name);
 8003390:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003394:	46b4      	mov	ip, r6
 8003396:	4619      	mov	r1, r3
 8003398:	484d      	ldr	r0, [pc, #308]	; (80034d0 <init_w5500.8434+0x398>)
 800339a:	f7ff fbc1 	bl	8002b20 <UART_Printf.8399>
        int8_t res = DNS_run(dns, (uint8_t*)&domain_name, addr);
 800339e:	f107 0250 	add.w	r2, r7, #80	; 0x50
 80033a2:	f107 0148 	add.w	r1, r7, #72	; 0x48
 80033a6:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80033aa:	4618      	mov	r0, r3
 80033ac:	f7ff fb32 	bl	8002a14 <DNS_run>
 80033b0:	4603      	mov	r3, r0
 80033b2:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89
        if(res != 1) {
 80033b6:	f997 3089 	ldrsb.w	r3, [r7, #137]	; 0x89
 80033ba:	2b01      	cmp	r3, #1
 80033bc:	d007      	beq.n	80033ce <init_w5500.8434+0x296>
            UART_Printf("DNS_run() failed, res = %d", res);
 80033be:	f997 3089 	ldrsb.w	r3, [r7, #137]	; 0x89
 80033c2:	46b4      	mov	ip, r6
 80033c4:	4619      	mov	r1, r3
 80033c6:	4843      	ldr	r0, [pc, #268]	; (80034d4 <init_w5500.8434+0x39c>)
 80033c8:	f7ff fbaa 	bl	8002b20 <UART_Printf.8399>
 80033cc:	e0f7      	b.n	80035be <init_w5500.8434+0x486>
        UART_Printf("Result: %d.%d.%d.%d\r\n", addr[0], addr[1], addr[2], addr[3]);
 80033ce:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 80033d2:	4619      	mov	r1, r3
 80033d4:	f897 3051 	ldrb.w	r3, [r7, #81]	; 0x51
 80033d8:	461a      	mov	r2, r3
 80033da:	f897 3052 	ldrb.w	r3, [r7, #82]	; 0x52
 80033de:	4618      	mov	r0, r3
 80033e0:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 80033e4:	9300      	str	r3, [sp, #0]
 80033e6:	46b4      	mov	ip, r6
 80033e8:	4603      	mov	r3, r0
 80033ea:	483b      	ldr	r0, [pc, #236]	; (80034d8 <init_w5500.8434+0x3a0>)
 80033ec:	f7ff fb98 	bl	8002b20 <UART_Printf.8399>
    UART_Printf("Creating socket...\r\n");
 80033f0:	46b4      	mov	ip, r6
 80033f2:	483a      	ldr	r0, [pc, #232]	; (80034dc <init_w5500.8434+0x3a4>)
 80033f4:	f7ff fb94 	bl	8002b20 <UART_Printf.8399>
    uint8_t http_socket = HTTP_SOCKET;
 80033f8:	2302      	movs	r3, #2
 80033fa:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
    uint8_t code = socket(http_socket, Sn_MR_TCP, 10888, 0);
 80033fe:	f897 0088 	ldrb.w	r0, [r7, #136]	; 0x88
 8003402:	2300      	movs	r3, #0
 8003404:	f642 2288 	movw	r2, #10888	; 0x2a88
 8003408:	2101      	movs	r1, #1
 800340a:	f000 fc95 	bl	8003d38 <socket>
 800340e:	4603      	mov	r3, r0
 8003410:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
    if(code != http_socket) {
 8003414:	f897 2087 	ldrb.w	r2, [r7, #135]	; 0x87
 8003418:	f897 3088 	ldrb.w	r3, [r7, #136]	; 0x88
 800341c:	429a      	cmp	r2, r3
 800341e:	d007      	beq.n	8003430 <init_w5500.8434+0x2f8>
        UART_Printf("socket() failed, code = %d\r\n", code);
 8003420:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8003424:	46b4      	mov	ip, r6
 8003426:	4619      	mov	r1, r3
 8003428:	482d      	ldr	r0, [pc, #180]	; (80034e0 <init_w5500.8434+0x3a8>)
 800342a:	f7ff fb79 	bl	8002b20 <UART_Printf.8399>
        return;
 800342e:	e0c6      	b.n	80035be <init_w5500.8434+0x486>
    UART_Printf("Socket created, connecting...\r\n");
 8003430:	46b4      	mov	ip, r6
 8003432:	482c      	ldr	r0, [pc, #176]	; (80034e4 <init_w5500.8434+0x3ac>)
 8003434:	f7ff fb74 	bl	8002b20 <UART_Printf.8399>
    code = connect(http_socket, addr, 80);
 8003438:	f107 0150 	add.w	r1, r7, #80	; 0x50
 800343c:	f897 3088 	ldrb.w	r3, [r7, #136]	; 0x88
 8003440:	2250      	movs	r2, #80	; 0x50
 8003442:	4618      	mov	r0, r3
 8003444:	f000 fdfc 	bl	8004040 <connect>
 8003448:	4603      	mov	r3, r0
 800344a:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
    if(code != SOCK_OK) {
 800344e:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8003452:	2b01      	cmp	r3, #1
 8003454:	d00c      	beq.n	8003470 <init_w5500.8434+0x338>
        UART_Printf("connect() failed, code = %d\r\n", code);
 8003456:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 800345a:	46b4      	mov	ip, r6
 800345c:	4619      	mov	r1, r3
 800345e:	4822      	ldr	r0, [pc, #136]	; (80034e8 <init_w5500.8434+0x3b0>)
 8003460:	f7ff fb5e 	bl	8002b20 <UART_Printf.8399>
        close(http_socket);
 8003464:	f897 3088 	ldrb.w	r3, [r7, #136]	; 0x88
 8003468:	4618      	mov	r0, r3
 800346a:	f000 fd7b 	bl	8003f64 <close>
        return;
 800346e:	e0a6      	b.n	80035be <init_w5500.8434+0x486>
    UART_Printf("Connected, sending HTTP request...\r\n");
 8003470:	46b4      	mov	ip, r6
 8003472:	481e      	ldr	r0, [pc, #120]	; (80034ec <init_w5500.8434+0x3b4>)
 8003474:	f7ff fb54 	bl	8002b20 <UART_Printf.8399>
        char req[] = "GET / HTTP/1.0\r\nHost: eax.me\r\n\r\n";
 8003478:	4b1d      	ldr	r3, [pc, #116]	; (80034f0 <init_w5500.8434+0x3b8>)
 800347a:	f107 0424 	add.w	r4, r7, #36	; 0x24
 800347e:	461d      	mov	r5, r3
 8003480:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003482:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003484:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003486:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003488:	682b      	ldr	r3, [r5, #0]
 800348a:	7023      	strb	r3, [r4, #0]
        uint16_t len = sizeof(req) - 1;
 800348c:	2320      	movs	r3, #32
 800348e:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
        uint8_t* buff = (uint8_t*)&req;
 8003492:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003496:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
        while(len > 0) {
 800349a:	e056      	b.n	800354a <init_w5500.8434+0x412>
 800349c:	0800e368 	.word	0x0800e368
 80034a0:	0800e37c 	.word	0x0800e37c
 80034a4:	0800e3a0 	.word	0x0800e3a0
 80034a8:	0800e668 	.word	0x0800e668
 80034ac:	0800e3bc 	.word	0x0800e3bc
 80034b0:	0800e670 	.word	0x0800e670
 80034b4:	0800e3d8 	.word	0x0800e3d8
 80034b8:	0800e3f8 	.word	0x0800e3f8
 80034bc:	0800e410 	.word	0x0800e410
 80034c0:	0800e42c 	.word	0x0800e42c
 80034c4:	0800e478 	.word	0x0800e478
 80034c8:	0800e49c 	.word	0x0800e49c
 80034cc:	0800e678 	.word	0x0800e678
 80034d0:	0800e4b4 	.word	0x0800e4b4
 80034d4:	0800e4d4 	.word	0x0800e4d4
 80034d8:	0800e4f0 	.word	0x0800e4f0
 80034dc:	0800e508 	.word	0x0800e508
 80034e0:	0800e520 	.word	0x0800e520
 80034e4:	0800e540 	.word	0x0800e540
 80034e8:	0800e560 	.word	0x0800e560
 80034ec:	0800e580 	.word	0x0800e580
 80034f0:	0800e680 	.word	0x0800e680
            UART_Printf("Sending %d bytes...\r\n", len);
 80034f4:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 80034f8:	46b4      	mov	ip, r6
 80034fa:	4619      	mov	r1, r3
 80034fc:	4832      	ldr	r0, [pc, #200]	; (80035c8 <init_w5500.8434+0x490>)
 80034fe:	f7ff fb0f 	bl	8002b20 <UART_Printf.8399>
            int32_t nbytes = send(http_socket, buff, len);
 8003502:	f8b7 208a 	ldrh.w	r2, [r7, #138]	; 0x8a
 8003506:	f897 3088 	ldrb.w	r3, [r7, #136]	; 0x88
 800350a:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 800350e:	4618      	mov	r0, r3
 8003510:	f000 fe72 	bl	80041f8 <send>
 8003514:	67b8      	str	r0, [r7, #120]	; 0x78
            if(nbytes <= 0) {
 8003516:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003518:	2b00      	cmp	r3, #0
 800351a:	dc0a      	bgt.n	8003532 <init_w5500.8434+0x3fa>
                UART_Printf("send() failed, %d returned\r\n", nbytes);
 800351c:	46b4      	mov	ip, r6
 800351e:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8003520:	482a      	ldr	r0, [pc, #168]	; (80035cc <init_w5500.8434+0x494>)
 8003522:	f7ff fafd 	bl	8002b20 <UART_Printf.8399>
                close(http_socket);
 8003526:	f897 3088 	ldrb.w	r3, [r7, #136]	; 0x88
 800352a:	4618      	mov	r0, r3
 800352c:	f000 fd1a 	bl	8003f64 <close>
 8003530:	e045      	b.n	80035be <init_w5500.8434+0x486>
            UART_Printf("%d bytes sent!\r\n", nbytes);
 8003532:	46b4      	mov	ip, r6
 8003534:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8003536:	4826      	ldr	r0, [pc, #152]	; (80035d0 <init_w5500.8434+0x498>)
 8003538:	f7ff faf2 	bl	8002b20 <UART_Printf.8399>
            len -= nbytes;
 800353c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800353e:	b29b      	uxth	r3, r3
 8003540:	f8b7 208a 	ldrh.w	r2, [r7, #138]	; 0x8a
 8003544:	1ad3      	subs	r3, r2, r3
 8003546:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
        while(len > 0) {
 800354a:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800354e:	2b00      	cmp	r3, #0
 8003550:	d1d0      	bne.n	80034f4 <init_w5500.8434+0x3bc>
    UART_Printf("Request sent. Reading response...\r\n");
 8003552:	46b4      	mov	ip, r6
 8003554:	481f      	ldr	r0, [pc, #124]	; (80035d4 <init_w5500.8434+0x49c>)
 8003556:	f7ff fae3 	bl	8002b20 <UART_Printf.8399>
            int32_t nbytes = recv(http_socket, (uint8_t*)&buff, sizeof(buff)-1);
 800355a:	f107 0124 	add.w	r1, r7, #36	; 0x24
 800355e:	f897 3088 	ldrb.w	r3, [r7, #136]	; 0x88
 8003562:	221f      	movs	r2, #31
 8003564:	4618      	mov	r0, r3
 8003566:	f000 ff41 	bl	80043ec <recv>
 800356a:	67f8      	str	r0, [r7, #124]	; 0x7c
            if(nbytes == SOCKERR_SOCKSTATUS) {
 800356c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800356e:	f113 0f07 	cmn.w	r3, #7
 8003572:	d104      	bne.n	800357e <init_w5500.8434+0x446>
                UART_Printf("\r\nConnection closed.\r\n");
 8003574:	46b4      	mov	ip, r6
 8003576:	4818      	ldr	r0, [pc, #96]	; (80035d8 <init_w5500.8434+0x4a0>)
 8003578:	f7ff fad2 	bl	8002b20 <UART_Printf.8399>
                break;
 800357c:	e016      	b.n	80035ac <init_w5500.8434+0x474>
            if(nbytes <= 0) {
 800357e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003580:	2b00      	cmp	r3, #0
 8003582:	dc05      	bgt.n	8003590 <init_w5500.8434+0x458>
                UART_Printf("\r\nrecv() failed, %d returned\r\n", nbytes);
 8003584:	46b4      	mov	ip, r6
 8003586:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8003588:	4814      	ldr	r0, [pc, #80]	; (80035dc <init_w5500.8434+0x4a4>)
 800358a:	f7ff fac9 	bl	8002b20 <UART_Printf.8399>
                break;
 800358e:	e00d      	b.n	80035ac <init_w5500.8434+0x474>
            buff[nbytes] = '\0';
 8003590:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8003594:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003596:	4413      	add	r3, r2
 8003598:	2200      	movs	r2, #0
 800359a:	701a      	strb	r2, [r3, #0]
            UART_Printf("%s", buff);
 800359c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80035a0:	46b4      	mov	ip, r6
 80035a2:	4619      	mov	r1, r3
 80035a4:	480e      	ldr	r0, [pc, #56]	; (80035e0 <init_w5500.8434+0x4a8>)
 80035a6:	f7ff fabb 	bl	8002b20 <UART_Printf.8399>
        for(;;) {
 80035aa:	e7d6      	b.n	800355a <init_w5500.8434+0x422>
    UART_Printf("Closing socket.\r\n");
 80035ac:	46b4      	mov	ip, r6
 80035ae:	480d      	ldr	r0, [pc, #52]	; (80035e4 <init_w5500.8434+0x4ac>)
 80035b0:	f7ff fab6 	bl	8002b20 <UART_Printf.8399>
    close(http_socket);
 80035b4:	f897 3088 	ldrb.w	r3, [r7, #136]	; 0x88
 80035b8:	4618      	mov	r0, r3
 80035ba:	f000 fcd3 	bl	8003f64 <close>
}
 80035be:	3794      	adds	r7, #148	; 0x94
 80035c0:	46bd      	mov	sp, r7
 80035c2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80035c6:	bf00      	nop
 80035c8:	0800e5a8 	.word	0x0800e5a8
 80035cc:	0800e5c0 	.word	0x0800e5c0
 80035d0:	0800e5e0 	.word	0x0800e5e0
 80035d4:	0800e5f4 	.word	0x0800e5f4
 80035d8:	0800e618 	.word	0x0800e618
 80035dc:	0800e630 	.word	0x0800e630
 80035e0:	0800e650 	.word	0x0800e650
 80035e4:	0800e654 	.word	0x0800e654

080035e8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80035e8:	b580      	push	{r7, lr}
 80035ea:	b090      	sub	sp, #64	; 0x40
 80035ec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80035ee:	f107 0318 	add.w	r3, r7, #24
 80035f2:	2228      	movs	r2, #40	; 0x28
 80035f4:	2100      	movs	r1, #0
 80035f6:	4618      	mov	r0, r3
 80035f8:	f007 ff46 	bl	800b488 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80035fc:	1d3b      	adds	r3, r7, #4
 80035fe:	2200      	movs	r2, #0
 8003600:	601a      	str	r2, [r3, #0]
 8003602:	605a      	str	r2, [r3, #4]
 8003604:	609a      	str	r2, [r3, #8]
 8003606:	60da      	str	r2, [r3, #12]
 8003608:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800360a:	2301      	movs	r3, #1
 800360c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800360e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003612:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8003614:	2300      	movs	r3, #0
 8003616:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003618:	2301      	movs	r3, #1
 800361a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800361c:	2302      	movs	r3, #2
 800361e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8003620:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003624:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL8;
 8003626:	f44f 13c0 	mov.w	r3, #1572864	; 0x180000
 800362a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800362c:	f107 0318 	add.w	r3, r7, #24
 8003630:	4618      	mov	r0, r3
 8003632:	f003 fb7d 	bl	8006d30 <HAL_RCC_OscConfig>
 8003636:	4603      	mov	r3, r0
 8003638:	2b00      	cmp	r3, #0
 800363a:	d001      	beq.n	8003640 <SystemClock_Config+0x58>
  {
    Error_Handler();
 800363c:	f000 fb76 	bl	8003d2c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003640:	230f      	movs	r3, #15
 8003642:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003644:	2302      	movs	r3, #2
 8003646:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003648:	2300      	movs	r3, #0
 800364a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800364c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003650:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003652:	2300      	movs	r3, #0
 8003654:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8003656:	1d3b      	adds	r3, r7, #4
 8003658:	2102      	movs	r1, #2
 800365a:	4618      	mov	r0, r3
 800365c:	f003 fde8 	bl	8007230 <HAL_RCC_ClockConfig>
 8003660:	4603      	mov	r3, r0
 8003662:	2b00      	cmp	r3, #0
 8003664:	d001      	beq.n	800366a <SystemClock_Config+0x82>
  {
    Error_Handler();
 8003666:	f000 fb61 	bl	8003d2c <Error_Handler>
  }
}
 800366a:	bf00      	nop
 800366c:	3740      	adds	r7, #64	; 0x40
 800366e:	46bd      	mov	sp, r7
 8003670:	bd80      	pop	{r7, pc}
	...

08003674 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8003674:	b580      	push	{r7, lr}
 8003676:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8003678:	4b12      	ldr	r3, [pc, #72]	; (80036c4 <MX_I2C1_Init+0x50>)
 800367a:	4a13      	ldr	r2, [pc, #76]	; (80036c8 <MX_I2C1_Init+0x54>)
 800367c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800367e:	4b11      	ldr	r3, [pc, #68]	; (80036c4 <MX_I2C1_Init+0x50>)
 8003680:	4a12      	ldr	r2, [pc, #72]	; (80036cc <MX_I2C1_Init+0x58>)
 8003682:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8003684:	4b0f      	ldr	r3, [pc, #60]	; (80036c4 <MX_I2C1_Init+0x50>)
 8003686:	2200      	movs	r2, #0
 8003688:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800368a:	4b0e      	ldr	r3, [pc, #56]	; (80036c4 <MX_I2C1_Init+0x50>)
 800368c:	2200      	movs	r2, #0
 800368e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003690:	4b0c      	ldr	r3, [pc, #48]	; (80036c4 <MX_I2C1_Init+0x50>)
 8003692:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003696:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003698:	4b0a      	ldr	r3, [pc, #40]	; (80036c4 <MX_I2C1_Init+0x50>)
 800369a:	2200      	movs	r2, #0
 800369c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800369e:	4b09      	ldr	r3, [pc, #36]	; (80036c4 <MX_I2C1_Init+0x50>)
 80036a0:	2200      	movs	r2, #0
 80036a2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80036a4:	4b07      	ldr	r3, [pc, #28]	; (80036c4 <MX_I2C1_Init+0x50>)
 80036a6:	2200      	movs	r2, #0
 80036a8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80036aa:	4b06      	ldr	r3, [pc, #24]	; (80036c4 <MX_I2C1_Init+0x50>)
 80036ac:	2200      	movs	r2, #0
 80036ae:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80036b0:	4804      	ldr	r0, [pc, #16]	; (80036c4 <MX_I2C1_Init+0x50>)
 80036b2:	f003 f9f9 	bl	8006aa8 <HAL_I2C_Init>
 80036b6:	4603      	mov	r3, r0
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d001      	beq.n	80036c0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80036bc:	f000 fb36 	bl	8003d2c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80036c0:	bf00      	nop
 80036c2:	bd80      	pop	{r7, pc}
 80036c4:	20000420 	.word	0x20000420
 80036c8:	40005400 	.word	0x40005400
 80036cc:	000186a0 	.word	0x000186a0

080036d0 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80036d0:	b580      	push	{r7, lr}
 80036d2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80036d4:	4b17      	ldr	r3, [pc, #92]	; (8003734 <MX_SPI2_Init+0x64>)
 80036d6:	4a18      	ldr	r2, [pc, #96]	; (8003738 <MX_SPI2_Init+0x68>)
 80036d8:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80036da:	4b16      	ldr	r3, [pc, #88]	; (8003734 <MX_SPI2_Init+0x64>)
 80036dc:	f44f 7282 	mov.w	r2, #260	; 0x104
 80036e0:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80036e2:	4b14      	ldr	r3, [pc, #80]	; (8003734 <MX_SPI2_Init+0x64>)
 80036e4:	2200      	movs	r2, #0
 80036e6:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80036e8:	4b12      	ldr	r3, [pc, #72]	; (8003734 <MX_SPI2_Init+0x64>)
 80036ea:	2200      	movs	r2, #0
 80036ec:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80036ee:	4b11      	ldr	r3, [pc, #68]	; (8003734 <MX_SPI2_Init+0x64>)
 80036f0:	2200      	movs	r2, #0
 80036f2:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80036f4:	4b0f      	ldr	r3, [pc, #60]	; (8003734 <MX_SPI2_Init+0x64>)
 80036f6:	2200      	movs	r2, #0
 80036f8:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80036fa:	4b0e      	ldr	r3, [pc, #56]	; (8003734 <MX_SPI2_Init+0x64>)
 80036fc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003700:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003702:	4b0c      	ldr	r3, [pc, #48]	; (8003734 <MX_SPI2_Init+0x64>)
 8003704:	2200      	movs	r2, #0
 8003706:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003708:	4b0a      	ldr	r3, [pc, #40]	; (8003734 <MX_SPI2_Init+0x64>)
 800370a:	2200      	movs	r2, #0
 800370c:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800370e:	4b09      	ldr	r3, [pc, #36]	; (8003734 <MX_SPI2_Init+0x64>)
 8003710:	2200      	movs	r2, #0
 8003712:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003714:	4b07      	ldr	r3, [pc, #28]	; (8003734 <MX_SPI2_Init+0x64>)
 8003716:	2200      	movs	r2, #0
 8003718:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 800371a:	4b06      	ldr	r3, [pc, #24]	; (8003734 <MX_SPI2_Init+0x64>)
 800371c:	220a      	movs	r2, #10
 800371e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8003720:	4804      	ldr	r0, [pc, #16]	; (8003734 <MX_SPI2_Init+0x64>)
 8003722:	f003 ff1f 	bl	8007564 <HAL_SPI_Init>
 8003726:	4603      	mov	r3, r0
 8003728:	2b00      	cmp	r3, #0
 800372a:	d001      	beq.n	8003730 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 800372c:	f000 fafe 	bl	8003d2c <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8003730:	bf00      	nop
 8003732:	bd80      	pop	{r7, pc}
 8003734:	2000037c 	.word	0x2000037c
 8003738:	40003800 	.word	0x40003800

0800373c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800373c:	b580      	push	{r7, lr}
 800373e:	b096      	sub	sp, #88	; 0x58
 8003740:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003742:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003746:	2200      	movs	r2, #0
 8003748:	601a      	str	r2, [r3, #0]
 800374a:	605a      	str	r2, [r3, #4]
 800374c:	609a      	str	r2, [r3, #8]
 800374e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003750:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8003754:	2200      	movs	r2, #0
 8003756:	601a      	str	r2, [r3, #0]
 8003758:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800375a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800375e:	2200      	movs	r2, #0
 8003760:	601a      	str	r2, [r3, #0]
 8003762:	605a      	str	r2, [r3, #4]
 8003764:	609a      	str	r2, [r3, #8]
 8003766:	60da      	str	r2, [r3, #12]
 8003768:	611a      	str	r2, [r3, #16]
 800376a:	615a      	str	r2, [r3, #20]
 800376c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800376e:	1d3b      	adds	r3, r7, #4
 8003770:	2220      	movs	r2, #32
 8003772:	2100      	movs	r1, #0
 8003774:	4618      	mov	r0, r3
 8003776:	f007 fe87 	bl	800b488 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800377a:	4b59      	ldr	r3, [pc, #356]	; (80038e0 <MX_TIM1_Init+0x1a4>)
 800377c:	4a59      	ldr	r2, [pc, #356]	; (80038e4 <MX_TIM1_Init+0x1a8>)
 800377e:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8003780:	4b57      	ldr	r3, [pc, #348]	; (80038e0 <MX_TIM1_Init+0x1a4>)
 8003782:	2200      	movs	r2, #0
 8003784:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003786:	4b56      	ldr	r3, [pc, #344]	; (80038e0 <MX_TIM1_Init+0x1a4>)
 8003788:	2200      	movs	r2, #0
 800378a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 799;
 800378c:	4b54      	ldr	r3, [pc, #336]	; (80038e0 <MX_TIM1_Init+0x1a4>)
 800378e:	f240 321f 	movw	r2, #799	; 0x31f
 8003792:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003794:	4b52      	ldr	r3, [pc, #328]	; (80038e0 <MX_TIM1_Init+0x1a4>)
 8003796:	2200      	movs	r2, #0
 8003798:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 7;
 800379a:	4b51      	ldr	r3, [pc, #324]	; (80038e0 <MX_TIM1_Init+0x1a4>)
 800379c:	2207      	movs	r2, #7
 800379e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80037a0:	4b4f      	ldr	r3, [pc, #316]	; (80038e0 <MX_TIM1_Init+0x1a4>)
 80037a2:	2280      	movs	r2, #128	; 0x80
 80037a4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80037a6:	484e      	ldr	r0, [pc, #312]	; (80038e0 <MX_TIM1_Init+0x1a4>)
 80037a8:	f004 fc48 	bl	800803c <HAL_TIM_Base_Init>
 80037ac:	4603      	mov	r3, r0
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d001      	beq.n	80037b6 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 80037b2:	f000 fabb 	bl	8003d2c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80037b6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80037ba:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80037bc:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80037c0:	4619      	mov	r1, r3
 80037c2:	4847      	ldr	r0, [pc, #284]	; (80038e0 <MX_TIM1_Init+0x1a4>)
 80037c4:	f005 fb24 	bl	8008e10 <HAL_TIM_ConfigClockSource>
 80037c8:	4603      	mov	r3, r0
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d001      	beq.n	80037d2 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 80037ce:	f000 faad 	bl	8003d2c <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim1) != HAL_OK)
 80037d2:	4843      	ldr	r0, [pc, #268]	; (80038e0 <MX_TIM1_Init+0x1a4>)
 80037d4:	f004 fcd4 	bl	8008180 <HAL_TIM_OC_Init>
 80037d8:	4603      	mov	r3, r0
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d001      	beq.n	80037e2 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 80037de:	f000 faa5 	bl	8003d2c <Error_Handler>
  }
  if (HAL_TIM_OnePulse_Init(&htim1, TIM_OPMODE_SINGLE) != HAL_OK)
 80037e2:	2108      	movs	r1, #8
 80037e4:	483e      	ldr	r0, [pc, #248]	; (80038e0 <MX_TIM1_Init+0x1a4>)
 80037e6:	f005 f8c5 	bl	8008974 <HAL_TIM_OnePulse_Init>
 80037ea:	4603      	mov	r3, r0
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d001      	beq.n	80037f4 <MX_TIM1_Init+0xb8>
  {
    Error_Handler();
 80037f0:	f000 fa9c 	bl	8003d2c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC1;
 80037f4:	2330      	movs	r3, #48	; 0x30
 80037f6:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_ENABLE;
 80037f8:	2380      	movs	r3, #128	; 0x80
 80037fa:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80037fc:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8003800:	4619      	mov	r1, r3
 8003802:	4837      	ldr	r0, [pc, #220]	; (80038e0 <MX_TIM1_Init+0x1a4>)
 8003804:	f006 f96a 	bl	8009adc <HAL_TIMEx_MasterConfigSynchronization>
 8003808:	4603      	mov	r3, r0
 800380a:	2b00      	cmp	r3, #0
 800380c:	d001      	beq.n	8003812 <MX_TIM1_Init+0xd6>
  {
    Error_Handler();
 800380e:	f000 fa8d 	bl	8003d2c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TOGGLE;
 8003812:	2330      	movs	r3, #48	; 0x30
 8003814:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8003816:	2300      	movs	r3, #0
 8003818:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800381a:	2300      	movs	r3, #0
 800381c:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800381e:	2300      	movs	r3, #0
 8003820:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003822:	2300      	movs	r3, #0
 8003824:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8003826:	2300      	movs	r3, #0
 8003828:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800382a:	2300      	movs	r3, #0
 800382c:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800382e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003832:	2200      	movs	r2, #0
 8003834:	4619      	mov	r1, r3
 8003836:	482a      	ldr	r0, [pc, #168]	; (80038e0 <MX_TIM1_Init+0x1a4>)
 8003838:	f005 f9fe 	bl	8008c38 <HAL_TIM_OC_ConfigChannel>
 800383c:	4603      	mov	r3, r0
 800383e:	2b00      	cmp	r3, #0
 8003840:	d001      	beq.n	8003846 <MX_TIM1_Init+0x10a>
  {
    Error_Handler();
 8003842:	f000 fa73 	bl	8003d2c <Error_Handler>
  }
  __HAL_TIM_ENABLE_OCxPRELOAD(&htim1, TIM_CHANNEL_1);
 8003846:	4b26      	ldr	r3, [pc, #152]	; (80038e0 <MX_TIM1_Init+0x1a4>)
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	699a      	ldr	r2, [r3, #24]
 800384c:	4b24      	ldr	r3, [pc, #144]	; (80038e0 <MX_TIM1_Init+0x1a4>)
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	f042 0208 	orr.w	r2, r2, #8
 8003854:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8003856:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800385a:	2204      	movs	r2, #4
 800385c:	4619      	mov	r1, r3
 800385e:	4820      	ldr	r0, [pc, #128]	; (80038e0 <MX_TIM1_Init+0x1a4>)
 8003860:	f005 f9ea 	bl	8008c38 <HAL_TIM_OC_ConfigChannel>
 8003864:	4603      	mov	r3, r0
 8003866:	2b00      	cmp	r3, #0
 8003868:	d001      	beq.n	800386e <MX_TIM1_Init+0x132>
  {
    Error_Handler();
 800386a:	f000 fa5f 	bl	8003d2c <Error_Handler>
  }
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800386e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003872:	2208      	movs	r2, #8
 8003874:	4619      	mov	r1, r3
 8003876:	481a      	ldr	r0, [pc, #104]	; (80038e0 <MX_TIM1_Init+0x1a4>)
 8003878:	f005 f9de 	bl	8008c38 <HAL_TIM_OC_ConfigChannel>
 800387c:	4603      	mov	r3, r0
 800387e:	2b00      	cmp	r3, #0
 8003880:	d001      	beq.n	8003886 <MX_TIM1_Init+0x14a>
  {
    Error_Handler();
 8003882:	f000 fa53 	bl	8003d2c <Error_Handler>
  }
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8003886:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800388a:	220c      	movs	r2, #12
 800388c:	4619      	mov	r1, r3
 800388e:	4814      	ldr	r0, [pc, #80]	; (80038e0 <MX_TIM1_Init+0x1a4>)
 8003890:	f005 f9d2 	bl	8008c38 <HAL_TIM_OC_ConfigChannel>
 8003894:	4603      	mov	r3, r0
 8003896:	2b00      	cmp	r3, #0
 8003898:	d001      	beq.n	800389e <MX_TIM1_Init+0x162>
  {
    Error_Handler();
 800389a:	f000 fa47 	bl	8003d2c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800389e:	2300      	movs	r3, #0
 80038a0:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80038a2:	2300      	movs	r3, #0
 80038a4:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80038a6:	2300      	movs	r3, #0
 80038a8:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80038aa:	2300      	movs	r3, #0
 80038ac:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80038ae:	2300      	movs	r3, #0
 80038b0:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80038b2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80038b6:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80038b8:	2300      	movs	r3, #0
 80038ba:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80038bc:	1d3b      	adds	r3, r7, #4
 80038be:	4619      	mov	r1, r3
 80038c0:	4807      	ldr	r0, [pc, #28]	; (80038e0 <MX_TIM1_Init+0x1a4>)
 80038c2:	f006 f969 	bl	8009b98 <HAL_TIMEx_ConfigBreakDeadTime>
 80038c6:	4603      	mov	r3, r0
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d001      	beq.n	80038d0 <MX_TIM1_Init+0x194>
  {
    Error_Handler();
 80038cc:	f000 fa2e 	bl	8003d2c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80038d0:	4803      	ldr	r0, [pc, #12]	; (80038e0 <MX_TIM1_Init+0x1a4>)
 80038d2:	f001 fae7 	bl	8004ea4 <HAL_TIM_MspPostInit>

}
 80038d6:	bf00      	nop
 80038d8:	3758      	adds	r7, #88	; 0x58
 80038da:	46bd      	mov	sp, r7
 80038dc:	bd80      	pop	{r7, pc}
 80038de:	bf00      	nop
 80038e0:	20000544 	.word	0x20000544
 80038e4:	40012c00 	.word	0x40012c00

080038e8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80038e8:	b580      	push	{r7, lr}
 80038ea:	b090      	sub	sp, #64	; 0x40
 80038ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80038ee:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80038f2:	2200      	movs	r2, #0
 80038f4:	601a      	str	r2, [r3, #0]
 80038f6:	605a      	str	r2, [r3, #4]
 80038f8:	609a      	str	r2, [r3, #8]
 80038fa:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 80038fc:	f107 031c 	add.w	r3, r7, #28
 8003900:	2200      	movs	r2, #0
 8003902:	601a      	str	r2, [r3, #0]
 8003904:	605a      	str	r2, [r3, #4]
 8003906:	609a      	str	r2, [r3, #8]
 8003908:	60da      	str	r2, [r3, #12]
 800390a:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800390c:	f107 0314 	add.w	r3, r7, #20
 8003910:	2200      	movs	r2, #0
 8003912:	601a      	str	r2, [r3, #0]
 8003914:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8003916:	1d3b      	adds	r3, r7, #4
 8003918:	2200      	movs	r2, #0
 800391a:	601a      	str	r2, [r3, #0]
 800391c:	605a      	str	r2, [r3, #4]
 800391e:	609a      	str	r2, [r3, #8]
 8003920:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8003922:	4b33      	ldr	r3, [pc, #204]	; (80039f0 <MX_TIM2_Init+0x108>)
 8003924:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003928:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800392a:	4b31      	ldr	r3, [pc, #196]	; (80039f0 <MX_TIM2_Init+0x108>)
 800392c:	2200      	movs	r2, #0
 800392e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003930:	4b2f      	ldr	r3, [pc, #188]	; (80039f0 <MX_TIM2_Init+0x108>)
 8003932:	2200      	movs	r2, #0
 8003934:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8003936:	4b2e      	ldr	r3, [pc, #184]	; (80039f0 <MX_TIM2_Init+0x108>)
 8003938:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800393c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800393e:	4b2c      	ldr	r3, [pc, #176]	; (80039f0 <MX_TIM2_Init+0x108>)
 8003940:	2200      	movs	r2, #0
 8003942:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8003944:	4b2a      	ldr	r3, [pc, #168]	; (80039f0 <MX_TIM2_Init+0x108>)
 8003946:	2280      	movs	r2, #128	; 0x80
 8003948:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800394a:	4829      	ldr	r0, [pc, #164]	; (80039f0 <MX_TIM2_Init+0x108>)
 800394c:	f004 fb76 	bl	800803c <HAL_TIM_Base_Init>
 8003950:	4603      	mov	r3, r0
 8003952:	2b00      	cmp	r3, #0
 8003954:	d001      	beq.n	800395a <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8003956:	f000 f9e9 	bl	8003d2c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800395a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800395e:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8003960:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003964:	4619      	mov	r1, r3
 8003966:	4822      	ldr	r0, [pc, #136]	; (80039f0 <MX_TIM2_Init+0x108>)
 8003968:	f005 fa52 	bl	8008e10 <HAL_TIM_ConfigClockSource>
 800396c:	4603      	mov	r3, r0
 800396e:	2b00      	cmp	r3, #0
 8003970:	d001      	beq.n	8003976 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8003972:	f000 f9db 	bl	8003d2c <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 8003976:	481e      	ldr	r0, [pc, #120]	; (80039f0 <MX_TIM2_Init+0x108>)
 8003978:	f004 fd60 	bl	800843c <HAL_TIM_IC_Init>
 800397c:	4603      	mov	r3, r0
 800397e:	2b00      	cmp	r3, #0
 8003980:	d001      	beq.n	8003986 <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 8003982:	f000 f9d3 	bl	8003d2c <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 8003986:	2304      	movs	r3, #4
 8003988:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.InputTrigger = TIM_TS_ITR2;
 800398a:	2320      	movs	r3, #32
 800398c:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_SlaveConfigSynchro(&htim2, &sSlaveConfig) != HAL_OK)
 800398e:	f107 031c 	add.w	r3, r7, #28
 8003992:	4619      	mov	r1, r3
 8003994:	4816      	ldr	r0, [pc, #88]	; (80039f0 <MX_TIM2_Init+0x108>)
 8003996:	f005 faff 	bl	8008f98 <HAL_TIM_SlaveConfigSynchro>
 800399a:	4603      	mov	r3, r0
 800399c:	2b00      	cmp	r3, #0
 800399e:	d001      	beq.n	80039a4 <MX_TIM2_Init+0xbc>
  {
    Error_Handler();
 80039a0:	f000 f9c4 	bl	8003d2c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80039a4:	2300      	movs	r3, #0
 80039a6:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80039a8:	2300      	movs	r3, #0
 80039aa:	61bb      	str	r3, [r7, #24]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80039ac:	f107 0314 	add.w	r3, r7, #20
 80039b0:	4619      	mov	r1, r3
 80039b2:	480f      	ldr	r0, [pc, #60]	; (80039f0 <MX_TIM2_Init+0x108>)
 80039b4:	f006 f892 	bl	8009adc <HAL_TIMEx_MasterConfigSynchronization>
 80039b8:	4603      	mov	r3, r0
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d001      	beq.n	80039c2 <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 80039be:	f000 f9b5 	bl	8003d2c <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80039c2:	2300      	movs	r3, #0
 80039c4:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80039c6:	2301      	movs	r3, #1
 80039c8:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80039ca:	2300      	movs	r3, #0
 80039cc:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 80039ce:	2300      	movs	r3, #0
 80039d0:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80039d2:	1d3b      	adds	r3, r7, #4
 80039d4:	2200      	movs	r2, #0
 80039d6:	4619      	mov	r1, r3
 80039d8:	4805      	ldr	r0, [pc, #20]	; (80039f0 <MX_TIM2_Init+0x108>)
 80039da:	f005 f985 	bl	8008ce8 <HAL_TIM_IC_ConfigChannel>
 80039de:	4603      	mov	r3, r0
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d001      	beq.n	80039e8 <MX_TIM2_Init+0x100>
  {
    Error_Handler();
 80039e4:	f000 f9a2 	bl	8003d2c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80039e8:	bf00      	nop
 80039ea:	3740      	adds	r7, #64	; 0x40
 80039ec:	46bd      	mov	sp, r7
 80039ee:	bd80      	pop	{r7, pc}
 80039f0:	20000594 	.word	0x20000594

080039f4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80039f4:	b580      	push	{r7, lr}
 80039f6:	b092      	sub	sp, #72	; 0x48
 80039f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80039fa:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80039fe:	2200      	movs	r2, #0
 8003a00:	601a      	str	r2, [r3, #0]
 8003a02:	605a      	str	r2, [r3, #4]
 8003a04:	609a      	str	r2, [r3, #8]
 8003a06:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8003a08:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003a0c:	2200      	movs	r2, #0
 8003a0e:	601a      	str	r2, [r3, #0]
 8003a10:	605a      	str	r2, [r3, #4]
 8003a12:	609a      	str	r2, [r3, #8]
 8003a14:	60da      	str	r2, [r3, #12]
 8003a16:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003a18:	f107 031c 	add.w	r3, r7, #28
 8003a1c:	2200      	movs	r2, #0
 8003a1e:	601a      	str	r2, [r3, #0]
 8003a20:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003a22:	463b      	mov	r3, r7
 8003a24:	2200      	movs	r2, #0
 8003a26:	601a      	str	r2, [r3, #0]
 8003a28:	605a      	str	r2, [r3, #4]
 8003a2a:	609a      	str	r2, [r3, #8]
 8003a2c:	60da      	str	r2, [r3, #12]
 8003a2e:	611a      	str	r2, [r3, #16]
 8003a30:	615a      	str	r2, [r3, #20]
 8003a32:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8003a34:	4b37      	ldr	r3, [pc, #220]	; (8003b14 <MX_TIM3_Init+0x120>)
 8003a36:	4a38      	ldr	r2, [pc, #224]	; (8003b18 <MX_TIM3_Init+0x124>)
 8003a38:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8003a3a:	4b36      	ldr	r3, [pc, #216]	; (8003b14 <MX_TIM3_Init+0x120>)
 8003a3c:	2200      	movs	r2, #0
 8003a3e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003a40:	4b34      	ldr	r3, [pc, #208]	; (8003b14 <MX_TIM3_Init+0x120>)
 8003a42:	2200      	movs	r2, #0
 8003a44:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 30400;
 8003a46:	4b33      	ldr	r3, [pc, #204]	; (8003b14 <MX_TIM3_Init+0x120>)
 8003a48:	f247 62c0 	movw	r2, #30400	; 0x76c0
 8003a4c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003a4e:	4b31      	ldr	r3, [pc, #196]	; (8003b14 <MX_TIM3_Init+0x120>)
 8003a50:	2200      	movs	r2, #0
 8003a52:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8003a54:	4b2f      	ldr	r3, [pc, #188]	; (8003b14 <MX_TIM3_Init+0x120>)
 8003a56:	2280      	movs	r2, #128	; 0x80
 8003a58:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8003a5a:	482e      	ldr	r0, [pc, #184]	; (8003b14 <MX_TIM3_Init+0x120>)
 8003a5c:	f004 faee 	bl	800803c <HAL_TIM_Base_Init>
 8003a60:	4603      	mov	r3, r0
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d001      	beq.n	8003a6a <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 8003a66:	f000 f961 	bl	8003d2c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003a6a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003a6e:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8003a70:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8003a74:	4619      	mov	r1, r3
 8003a76:	4827      	ldr	r0, [pc, #156]	; (8003b14 <MX_TIM3_Init+0x120>)
 8003a78:	f005 f9ca 	bl	8008e10 <HAL_TIM_ConfigClockSource>
 8003a7c:	4603      	mov	r3, r0
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d001      	beq.n	8003a86 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8003a82:	f000 f953 	bl	8003d2c <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim3) != HAL_OK)
 8003a86:	4823      	ldr	r0, [pc, #140]	; (8003b14 <MX_TIM3_Init+0x120>)
 8003a88:	f004 fb7a 	bl	8008180 <HAL_TIM_OC_Init>
 8003a8c:	4603      	mov	r3, r0
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d001      	beq.n	8003a96 <MX_TIM3_Init+0xa2>
  {
    Error_Handler();
 8003a92:	f000 f94b 	bl	8003d2c <Error_Handler>
  }
  if (HAL_TIM_OnePulse_Init(&htim3, TIM_OPMODE_SINGLE) != HAL_OK)
 8003a96:	2108      	movs	r1, #8
 8003a98:	481e      	ldr	r0, [pc, #120]	; (8003b14 <MX_TIM3_Init+0x120>)
 8003a9a:	f004 ff6b 	bl	8008974 <HAL_TIM_OnePulse_Init>
 8003a9e:	4603      	mov	r3, r0
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d001      	beq.n	8003aa8 <MX_TIM3_Init+0xb4>
  {
    Error_Handler();
 8003aa4:	f000 f942 	bl	8003d2c <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_TRIGGER;
 8003aa8:	2306      	movs	r3, #6
 8003aaa:	627b      	str	r3, [r7, #36]	; 0x24
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 8003aac:	2300      	movs	r3, #0
 8003aae:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_SlaveConfigSynchro(&htim3, &sSlaveConfig) != HAL_OK)
 8003ab0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003ab4:	4619      	mov	r1, r3
 8003ab6:	4817      	ldr	r0, [pc, #92]	; (8003b14 <MX_TIM3_Init+0x120>)
 8003ab8:	f005 fa6e 	bl	8008f98 <HAL_TIM_SlaveConfigSynchro>
 8003abc:	4603      	mov	r3, r0
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d001      	beq.n	8003ac6 <MX_TIM3_Init+0xd2>
  {
    Error_Handler();
 8003ac2:	f000 f933 	bl	8003d2c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC1;
 8003ac6:	2330      	movs	r3, #48	; 0x30
 8003ac8:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_ENABLE;
 8003aca:	2380      	movs	r3, #128	; 0x80
 8003acc:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8003ace:	f107 031c 	add.w	r3, r7, #28
 8003ad2:	4619      	mov	r1, r3
 8003ad4:	480f      	ldr	r0, [pc, #60]	; (8003b14 <MX_TIM3_Init+0x120>)
 8003ad6:	f006 f801 	bl	8009adc <HAL_TIMEx_MasterConfigSynchronization>
 8003ada:	4603      	mov	r3, r0
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d001      	beq.n	8003ae4 <MX_TIM3_Init+0xf0>
  {
    Error_Handler();
 8003ae0:	f000 f924 	bl	8003d2c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_ACTIVE;
 8003ae4:	2310      	movs	r3, #16
 8003ae6:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8003ae8:	2300      	movs	r3, #0
 8003aea:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003aec:	2300      	movs	r3, #0
 8003aee:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003af0:	2300      	movs	r3, #0
 8003af2:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_OC_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003af4:	463b      	mov	r3, r7
 8003af6:	2200      	movs	r2, #0
 8003af8:	4619      	mov	r1, r3
 8003afa:	4806      	ldr	r0, [pc, #24]	; (8003b14 <MX_TIM3_Init+0x120>)
 8003afc:	f005 f89c 	bl	8008c38 <HAL_TIM_OC_ConfigChannel>
 8003b00:	4603      	mov	r3, r0
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d001      	beq.n	8003b0a <MX_TIM3_Init+0x116>
  {
    Error_Handler();
 8003b06:	f000 f911 	bl	8003d2c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8003b0a:	bf00      	nop
 8003b0c:	3748      	adds	r7, #72	; 0x48
 8003b0e:	46bd      	mov	sp, r7
 8003b10:	bd80      	pop	{r7, pc}
 8003b12:	bf00      	nop
 8003b14:	20000498 	.word	0x20000498
 8003b18:	40000400 	.word	0x40000400

08003b1c <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8003b1c:	b580      	push	{r7, lr}
 8003b1e:	b086      	sub	sp, #24
 8003b20:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003b22:	f107 0308 	add.w	r3, r7, #8
 8003b26:	2200      	movs	r2, #0
 8003b28:	601a      	str	r2, [r3, #0]
 8003b2a:	605a      	str	r2, [r3, #4]
 8003b2c:	609a      	str	r2, [r3, #8]
 8003b2e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003b30:	463b      	mov	r3, r7
 8003b32:	2200      	movs	r2, #0
 8003b34:	601a      	str	r2, [r3, #0]
 8003b36:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8003b38:	4b1d      	ldr	r3, [pc, #116]	; (8003bb0 <MX_TIM4_Init+0x94>)
 8003b3a:	4a1e      	ldr	r2, [pc, #120]	; (8003bb4 <MX_TIM4_Init+0x98>)
 8003b3c:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 2;
 8003b3e:	4b1c      	ldr	r3, [pc, #112]	; (8003bb0 <MX_TIM4_Init+0x94>)
 8003b40:	2202      	movs	r2, #2
 8003b42:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003b44:	4b1a      	ldr	r3, [pc, #104]	; (8003bb0 <MX_TIM4_Init+0x94>)
 8003b46:	2200      	movs	r2, #0
 8003b48:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8003b4a:	4b19      	ldr	r3, [pc, #100]	; (8003bb0 <MX_TIM4_Init+0x94>)
 8003b4c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003b50:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003b52:	4b17      	ldr	r3, [pc, #92]	; (8003bb0 <MX_TIM4_Init+0x94>)
 8003b54:	2200      	movs	r2, #0
 8003b56:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8003b58:	4b15      	ldr	r3, [pc, #84]	; (8003bb0 <MX_TIM4_Init+0x94>)
 8003b5a:	2280      	movs	r2, #128	; 0x80
 8003b5c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8003b5e:	4814      	ldr	r0, [pc, #80]	; (8003bb0 <MX_TIM4_Init+0x94>)
 8003b60:	f004 fa6c 	bl	800803c <HAL_TIM_Base_Init>
 8003b64:	4603      	mov	r3, r0
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d001      	beq.n	8003b6e <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 8003b6a:	f000 f8df 	bl	8003d2c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003b6e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003b72:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8003b74:	f107 0308 	add.w	r3, r7, #8
 8003b78:	4619      	mov	r1, r3
 8003b7a:	480d      	ldr	r0, [pc, #52]	; (8003bb0 <MX_TIM4_Init+0x94>)
 8003b7c:	f005 f948 	bl	8008e10 <HAL_TIM_ConfigClockSource>
 8003b80:	4603      	mov	r3, r0
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d001      	beq.n	8003b8a <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 8003b86:	f000 f8d1 	bl	8003d2c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8003b8a:	2320      	movs	r3, #32
 8003b8c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003b8e:	2300      	movs	r3, #0
 8003b90:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8003b92:	463b      	mov	r3, r7
 8003b94:	4619      	mov	r1, r3
 8003b96:	4806      	ldr	r0, [pc, #24]	; (8003bb0 <MX_TIM4_Init+0x94>)
 8003b98:	f005 ffa0 	bl	8009adc <HAL_TIMEx_MasterConfigSynchronization>
 8003b9c:	4603      	mov	r3, r0
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d001      	beq.n	8003ba6 <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 8003ba2:	f000 f8c3 	bl	8003d2c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8003ba6:	bf00      	nop
 8003ba8:	3718      	adds	r7, #24
 8003baa:	46bd      	mov	sp, r7
 8003bac:	bd80      	pop	{r7, pc}
 8003bae:	bf00      	nop
 8003bb0:	200003d4 	.word	0x200003d4
 8003bb4:	40000800 	.word	0x40000800

08003bb8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8003bb8:	b580      	push	{r7, lr}
 8003bba:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8003bbc:	4b11      	ldr	r3, [pc, #68]	; (8003c04 <MX_USART1_UART_Init+0x4c>)
 8003bbe:	4a12      	ldr	r2, [pc, #72]	; (8003c08 <MX_USART1_UART_Init+0x50>)
 8003bc0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8003bc2:	4b10      	ldr	r3, [pc, #64]	; (8003c04 <MX_USART1_UART_Init+0x4c>)
 8003bc4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003bc8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8003bca:	4b0e      	ldr	r3, [pc, #56]	; (8003c04 <MX_USART1_UART_Init+0x4c>)
 8003bcc:	2200      	movs	r2, #0
 8003bce:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8003bd0:	4b0c      	ldr	r3, [pc, #48]	; (8003c04 <MX_USART1_UART_Init+0x4c>)
 8003bd2:	2200      	movs	r2, #0
 8003bd4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8003bd6:	4b0b      	ldr	r3, [pc, #44]	; (8003c04 <MX_USART1_UART_Init+0x4c>)
 8003bd8:	2200      	movs	r2, #0
 8003bda:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8003bdc:	4b09      	ldr	r3, [pc, #36]	; (8003c04 <MX_USART1_UART_Init+0x4c>)
 8003bde:	220c      	movs	r2, #12
 8003be0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003be2:	4b08      	ldr	r3, [pc, #32]	; (8003c04 <MX_USART1_UART_Init+0x4c>)
 8003be4:	2200      	movs	r2, #0
 8003be6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8003be8:	4b06      	ldr	r3, [pc, #24]	; (8003c04 <MX_USART1_UART_Init+0x4c>)
 8003bea:	2200      	movs	r2, #0
 8003bec:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8003bee:	4805      	ldr	r0, [pc, #20]	; (8003c04 <MX_USART1_UART_Init+0x4c>)
 8003bf0:	f006 f835 	bl	8009c5e <HAL_UART_Init>
 8003bf4:	4603      	mov	r3, r0
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d001      	beq.n	8003bfe <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8003bfa:	f000 f897 	bl	8003d2c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8003bfe:	bf00      	nop
 8003c00:	bd80      	pop	{r7, pc}
 8003c02:	bf00      	nop
 8003c04:	200004f0 	.word	0x200004f0
 8003c08:	40013800 	.word	0x40013800

08003c0c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8003c0c:	b580      	push	{r7, lr}
 8003c0e:	b082      	sub	sp, #8
 8003c10:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8003c12:	4b0c      	ldr	r3, [pc, #48]	; (8003c44 <MX_DMA_Init+0x38>)
 8003c14:	695b      	ldr	r3, [r3, #20]
 8003c16:	4a0b      	ldr	r2, [pc, #44]	; (8003c44 <MX_DMA_Init+0x38>)
 8003c18:	f043 0301 	orr.w	r3, r3, #1
 8003c1c:	6153      	str	r3, [r2, #20]
 8003c1e:	4b09      	ldr	r3, [pc, #36]	; (8003c44 <MX_DMA_Init+0x38>)
 8003c20:	695b      	ldr	r3, [r3, #20]
 8003c22:	f003 0301 	and.w	r3, r3, #1
 8003c26:	607b      	str	r3, [r7, #4]
 8003c28:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 8003c2a:	2200      	movs	r2, #0
 8003c2c:	2100      	movs	r1, #0
 8003c2e:	200f      	movs	r0, #15
 8003c30:	f002 fb03 	bl	800623a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8003c34:	200f      	movs	r0, #15
 8003c36:	f002 fb1c 	bl	8006272 <HAL_NVIC_EnableIRQ>

}
 8003c3a:	bf00      	nop
 8003c3c:	3708      	adds	r7, #8
 8003c3e:	46bd      	mov	sp, r7
 8003c40:	bd80      	pop	{r7, pc}
 8003c42:	bf00      	nop
 8003c44:	40021000 	.word	0x40021000

08003c48 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003c48:	b580      	push	{r7, lr}
 8003c4a:	b088      	sub	sp, #32
 8003c4c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003c4e:	f107 0310 	add.w	r3, r7, #16
 8003c52:	2200      	movs	r2, #0
 8003c54:	601a      	str	r2, [r3, #0]
 8003c56:	605a      	str	r2, [r3, #4]
 8003c58:	609a      	str	r2, [r3, #8]
 8003c5a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003c5c:	4b30      	ldr	r3, [pc, #192]	; (8003d20 <MX_GPIO_Init+0xd8>)
 8003c5e:	699b      	ldr	r3, [r3, #24]
 8003c60:	4a2f      	ldr	r2, [pc, #188]	; (8003d20 <MX_GPIO_Init+0xd8>)
 8003c62:	f043 0320 	orr.w	r3, r3, #32
 8003c66:	6193      	str	r3, [r2, #24]
 8003c68:	4b2d      	ldr	r3, [pc, #180]	; (8003d20 <MX_GPIO_Init+0xd8>)
 8003c6a:	699b      	ldr	r3, [r3, #24]
 8003c6c:	f003 0320 	and.w	r3, r3, #32
 8003c70:	60fb      	str	r3, [r7, #12]
 8003c72:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003c74:	4b2a      	ldr	r3, [pc, #168]	; (8003d20 <MX_GPIO_Init+0xd8>)
 8003c76:	699b      	ldr	r3, [r3, #24]
 8003c78:	4a29      	ldr	r2, [pc, #164]	; (8003d20 <MX_GPIO_Init+0xd8>)
 8003c7a:	f043 0304 	orr.w	r3, r3, #4
 8003c7e:	6193      	str	r3, [r2, #24]
 8003c80:	4b27      	ldr	r3, [pc, #156]	; (8003d20 <MX_GPIO_Init+0xd8>)
 8003c82:	699b      	ldr	r3, [r3, #24]
 8003c84:	f003 0304 	and.w	r3, r3, #4
 8003c88:	60bb      	str	r3, [r7, #8]
 8003c8a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003c8c:	4b24      	ldr	r3, [pc, #144]	; (8003d20 <MX_GPIO_Init+0xd8>)
 8003c8e:	699b      	ldr	r3, [r3, #24]
 8003c90:	4a23      	ldr	r2, [pc, #140]	; (8003d20 <MX_GPIO_Init+0xd8>)
 8003c92:	f043 0308 	orr.w	r3, r3, #8
 8003c96:	6193      	str	r3, [r2, #24]
 8003c98:	4b21      	ldr	r3, [pc, #132]	; (8003d20 <MX_GPIO_Init+0xd8>)
 8003c9a:	699b      	ldr	r3, [r3, #24]
 8003c9c:	f003 0308 	and.w	r3, r3, #8
 8003ca0:	607b      	str	r3, [r7, #4]
 8003ca2:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, Z1Receive_Pin|Z2Receive_Pin|Z3Receive_Pin|Z4Receive_Pin
 8003ca4:	2200      	movs	r2, #0
 8003ca6:	f641 411e 	movw	r1, #7198	; 0x1c1e
 8003caa:	481e      	ldr	r0, [pc, #120]	; (8003d24 <MX_GPIO_Init+0xdc>)
 8003cac:	f002 fee4 	bl	8006a78 <HAL_GPIO_WritePin>
                          |Eth_CS_Pin|Eth_int_Pin|Eth_rst_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8003cb0:	2200      	movs	r2, #0
 8003cb2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003cb6:	481c      	ldr	r0, [pc, #112]	; (8003d28 <MX_GPIO_Init+0xe0>)
 8003cb8:	f002 fede 	bl	8006a78 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : Z1Receive_Pin Z2Receive_Pin Z3Receive_Pin Z4Receive_Pin */
  GPIO_InitStruct.Pin = Z1Receive_Pin|Z2Receive_Pin|Z3Receive_Pin|Z4Receive_Pin;
 8003cbc:	f640 4306 	movw	r3, #3078	; 0xc06
 8003cc0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003cc2:	2301      	movs	r3, #1
 8003cc4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003cc6:	2300      	movs	r3, #0
 8003cc8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003cca:	2303      	movs	r3, #3
 8003ccc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003cce:	f107 0310 	add.w	r3, r7, #16
 8003cd2:	4619      	mov	r1, r3
 8003cd4:	4813      	ldr	r0, [pc, #76]	; (8003d24 <MX_GPIO_Init+0xdc>)
 8003cd6:	f002 fd4b 	bl	8006770 <HAL_GPIO_Init>

  /*Configure GPIO pins : Eth_CS_Pin Eth_int_Pin Eth_rst_Pin */
  GPIO_InitStruct.Pin = Eth_CS_Pin|Eth_int_Pin|Eth_rst_Pin;
 8003cda:	f241 0318 	movw	r3, #4120	; 0x1018
 8003cde:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003ce0:	2301      	movs	r3, #1
 8003ce2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ce4:	2300      	movs	r3, #0
 8003ce6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003ce8:	2302      	movs	r3, #2
 8003cea:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003cec:	f107 0310 	add.w	r3, r7, #16
 8003cf0:	4619      	mov	r1, r3
 8003cf2:	480c      	ldr	r0, [pc, #48]	; (8003d24 <MX_GPIO_Init+0xdc>)
 8003cf4:	f002 fd3c 	bl	8006770 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8003cf8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003cfc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003cfe:	2301      	movs	r3, #1
 8003d00:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d02:	2300      	movs	r3, #0
 8003d04:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003d06:	2302      	movs	r3, #2
 8003d08:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8003d0a:	f107 0310 	add.w	r3, r7, #16
 8003d0e:	4619      	mov	r1, r3
 8003d10:	4805      	ldr	r0, [pc, #20]	; (8003d28 <MX_GPIO_Init+0xe0>)
 8003d12:	f002 fd2d 	bl	8006770 <HAL_GPIO_Init>

}
 8003d16:	bf00      	nop
 8003d18:	3720      	adds	r7, #32
 8003d1a:	46bd      	mov	sp, r7
 8003d1c:	bd80      	pop	{r7, pc}
 8003d1e:	bf00      	nop
 8003d20:	40021000 	.word	0x40021000
 8003d24:	40010c00 	.word	0x40010c00
 8003d28:	40010800 	.word	0x40010800

08003d2c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003d2c:	b480      	push	{r7}
 8003d2e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003d30:	b672      	cpsid	i
}
 8003d32:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003d34:	e7fe      	b.n	8003d34 <Error_Handler+0x8>
	...

08003d38 <socket>:
   }while(0);              \



int8_t socket(uint8_t sn, uint8_t protocol, uint16_t port, uint8_t flag)
{
 8003d38:	b590      	push	{r4, r7, lr}
 8003d3a:	b085      	sub	sp, #20
 8003d3c:	af00      	add	r7, sp, #0
 8003d3e:	4604      	mov	r4, r0
 8003d40:	4608      	mov	r0, r1
 8003d42:	4611      	mov	r1, r2
 8003d44:	461a      	mov	r2, r3
 8003d46:	4623      	mov	r3, r4
 8003d48:	71fb      	strb	r3, [r7, #7]
 8003d4a:	4603      	mov	r3, r0
 8003d4c:	71bb      	strb	r3, [r7, #6]
 8003d4e:	460b      	mov	r3, r1
 8003d50:	80bb      	strh	r3, [r7, #4]
 8003d52:	4613      	mov	r3, r2
 8003d54:	70fb      	strb	r3, [r7, #3]
	CHECK_SOCKNUM();
 8003d56:	79fb      	ldrb	r3, [r7, #7]
 8003d58:	2b08      	cmp	r3, #8
 8003d5a:	d902      	bls.n	8003d62 <socket+0x2a>
 8003d5c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003d60:	e0f2      	b.n	8003f48 <socket+0x210>
	switch(protocol)
 8003d62:	79bb      	ldrb	r3, [r7, #6]
 8003d64:	2b01      	cmp	r3, #1
 8003d66:	d005      	beq.n	8003d74 <socket+0x3c>
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	dd11      	ble.n	8003d90 <socket+0x58>
 8003d6c:	3b02      	subs	r3, #2
 8003d6e:	2b02      	cmp	r3, #2
 8003d70:	d80e      	bhi.n	8003d90 <socket+0x58>
	    break;
         }
      case Sn_MR_UDP :
      case Sn_MR_MACRAW :
	  case Sn_MR_IPRAW :
         break;
 8003d72:	e011      	b.n	8003d98 <socket+0x60>
            getSIPR((uint8_t*)&taddr);
 8003d74:	f107 030c 	add.w	r3, r7, #12
 8003d78:	2204      	movs	r2, #4
 8003d7a:	4619      	mov	r1, r3
 8003d7c:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 8003d80:	f001 fc94 	bl	80056ac <WIZCHIP_READ_BUF>
            if(taddr == 0) return SOCKERR_SOCKINIT;
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d105      	bne.n	8003d96 <socket+0x5e>
 8003d8a:	f06f 0302 	mvn.w	r3, #2
 8003d8e:	e0db      	b.n	8003f48 <socket+0x210>
   #if ( _WIZCHIP_ < 5200 )
      case Sn_MR_PPPoE :
         break;
   #endif
      default :
         return SOCKERR_SOCKMODE;
 8003d90:	f06f 0304 	mvn.w	r3, #4
 8003d94:	e0d8      	b.n	8003f48 <socket+0x210>
	    break;
 8003d96:	bf00      	nop
	}
	//M20150601 : For SF_TCP_ALIGN & W5300
	//if((flag & 0x06) != 0) return SOCKERR_SOCKFLAG;
	if((flag & 0x04) != 0) return SOCKERR_SOCKFLAG;
 8003d98:	78fb      	ldrb	r3, [r7, #3]
 8003d9a:	f003 0304 	and.w	r3, r3, #4
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d002      	beq.n	8003da8 <socket+0x70>
 8003da2:	f06f 0305 	mvn.w	r3, #5
 8003da6:	e0cf      	b.n	8003f48 <socket+0x210>
#if _WIZCHIP_ == 5200
   if(flag & 0x10) return SOCKERR_SOCKFLAG;
#endif
	   
	if(flag != 0)
 8003da8:	78fb      	ldrb	r3, [r7, #3]
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d025      	beq.n	8003dfa <socket+0xc2>
	{
   	switch(protocol)
 8003dae:	79bb      	ldrb	r3, [r7, #6]
 8003db0:	2b01      	cmp	r3, #1
 8003db2:	d002      	beq.n	8003dba <socket+0x82>
 8003db4:	2b02      	cmp	r3, #2
 8003db6:	d008      	beq.n	8003dca <socket+0x92>
      	         if((flag & SF_MULTI_ENABLE) == 0) return SOCKERR_SOCKFLAG;
      	      }
   	      #endif
   	      break;
   	   default:
   	      break;
 8003db8:	e024      	b.n	8003e04 <socket+0xcc>
   		     if((flag & (SF_TCP_NODELAY|SF_IO_NONBLOCK))==0) return SOCKERR_SOCKFLAG;
 8003dba:	78fb      	ldrb	r3, [r7, #3]
 8003dbc:	f003 0321 	and.w	r3, r3, #33	; 0x21
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d11c      	bne.n	8003dfe <socket+0xc6>
 8003dc4:	f06f 0305 	mvn.w	r3, #5
 8003dc8:	e0be      	b.n	8003f48 <socket+0x210>
   	      if(flag & SF_IGMP_VER2)
 8003dca:	78fb      	ldrb	r3, [r7, #3]
 8003dcc:	f003 0320 	and.w	r3, r3, #32
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d006      	beq.n	8003de2 <socket+0xaa>
   	         if((flag & SF_MULTI_ENABLE)==0) return SOCKERR_SOCKFLAG;
 8003dd4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	db02      	blt.n	8003de2 <socket+0xaa>
 8003ddc:	f06f 0305 	mvn.w	r3, #5
 8003de0:	e0b2      	b.n	8003f48 <socket+0x210>
      	      if(flag & SF_UNI_BLOCK)
 8003de2:	78fb      	ldrb	r3, [r7, #3]
 8003de4:	f003 0310 	and.w	r3, r3, #16
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d00a      	beq.n	8003e02 <socket+0xca>
      	         if((flag & SF_MULTI_ENABLE) == 0) return SOCKERR_SOCKFLAG;
 8003dec:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	db06      	blt.n	8003e02 <socket+0xca>
 8003df4:	f06f 0305 	mvn.w	r3, #5
 8003df8:	e0a6      	b.n	8003f48 <socket+0x210>
   	}
   }
 8003dfa:	bf00      	nop
 8003dfc:	e002      	b.n	8003e04 <socket+0xcc>
   	      break;
 8003dfe:	bf00      	nop
 8003e00:	e000      	b.n	8003e04 <socket+0xcc>
   	      break;
 8003e02:	bf00      	nop
	close(sn);
 8003e04:	79fb      	ldrb	r3, [r7, #7]
 8003e06:	4618      	mov	r0, r3
 8003e08:	f000 f8ac 	bl	8003f64 <close>
	//M20150601
	#if _WIZCHIP_ == 5300
	   setSn_MR(sn, ((uint16_t)(protocol | (flag & 0xF0))) | (((uint16_t)(flag & 0x02)) << 7) );
    #else
	   setSn_MR(sn, (protocol | (flag & 0xF0)));
 8003e0c:	79fb      	ldrb	r3, [r7, #7]
 8003e0e:	009b      	lsls	r3, r3, #2
 8003e10:	3301      	adds	r3, #1
 8003e12:	00db      	lsls	r3, r3, #3
 8003e14:	4618      	mov	r0, r3
 8003e16:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003e1a:	f023 030f 	bic.w	r3, r3, #15
 8003e1e:	b25a      	sxtb	r2, r3
 8003e20:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8003e24:	4313      	orrs	r3, r2
 8003e26:	b25b      	sxtb	r3, r3
 8003e28:	b2db      	uxtb	r3, r3
 8003e2a:	4619      	mov	r1, r3
 8003e2c:	f001 fbf0 	bl	8005610 <WIZCHIP_WRITE>
    #endif
	if(!port)
 8003e30:	88bb      	ldrh	r3, [r7, #4]
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d110      	bne.n	8003e58 <socket+0x120>
	{
	   port = sock_any_port++;
 8003e36:	4b46      	ldr	r3, [pc, #280]	; (8003f50 <socket+0x218>)
 8003e38:	881b      	ldrh	r3, [r3, #0]
 8003e3a:	1c5a      	adds	r2, r3, #1
 8003e3c:	b291      	uxth	r1, r2
 8003e3e:	4a44      	ldr	r2, [pc, #272]	; (8003f50 <socket+0x218>)
 8003e40:	8011      	strh	r1, [r2, #0]
 8003e42:	80bb      	strh	r3, [r7, #4]
	   if(sock_any_port == 0xFFF0) sock_any_port = SOCK_ANY_PORT_NUM;
 8003e44:	4b42      	ldr	r3, [pc, #264]	; (8003f50 <socket+0x218>)
 8003e46:	881b      	ldrh	r3, [r3, #0]
 8003e48:	f64f 72f0 	movw	r2, #65520	; 0xfff0
 8003e4c:	4293      	cmp	r3, r2
 8003e4e:	d103      	bne.n	8003e58 <socket+0x120>
 8003e50:	4b3f      	ldr	r3, [pc, #252]	; (8003f50 <socket+0x218>)
 8003e52:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 8003e56:	801a      	strh	r2, [r3, #0]
	}
   setSn_PORT(sn,port);	
 8003e58:	79fb      	ldrb	r3, [r7, #7]
 8003e5a:	009b      	lsls	r3, r3, #2
 8003e5c:	3301      	adds	r3, #1
 8003e5e:	00db      	lsls	r3, r3, #3
 8003e60:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003e64:	461a      	mov	r2, r3
 8003e66:	88bb      	ldrh	r3, [r7, #4]
 8003e68:	0a1b      	lsrs	r3, r3, #8
 8003e6a:	b29b      	uxth	r3, r3
 8003e6c:	b2db      	uxtb	r3, r3
 8003e6e:	4619      	mov	r1, r3
 8003e70:	4610      	mov	r0, r2
 8003e72:	f001 fbcd 	bl	8005610 <WIZCHIP_WRITE>
 8003e76:	79fb      	ldrb	r3, [r7, #7]
 8003e78:	009b      	lsls	r3, r3, #2
 8003e7a:	3301      	adds	r3, #1
 8003e7c:	00db      	lsls	r3, r3, #3
 8003e7e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003e82:	461a      	mov	r2, r3
 8003e84:	88bb      	ldrh	r3, [r7, #4]
 8003e86:	b2db      	uxtb	r3, r3
 8003e88:	4619      	mov	r1, r3
 8003e8a:	4610      	mov	r0, r2
 8003e8c:	f001 fbc0 	bl	8005610 <WIZCHIP_WRITE>
   setSn_CR(sn,Sn_CR_OPEN);
 8003e90:	79fb      	ldrb	r3, [r7, #7]
 8003e92:	009b      	lsls	r3, r3, #2
 8003e94:	3301      	adds	r3, #1
 8003e96:	00db      	lsls	r3, r3, #3
 8003e98:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8003e9c:	2101      	movs	r1, #1
 8003e9e:	4618      	mov	r0, r3
 8003ea0:	f001 fbb6 	bl	8005610 <WIZCHIP_WRITE>
   while(getSn_CR(sn));
 8003ea4:	bf00      	nop
 8003ea6:	79fb      	ldrb	r3, [r7, #7]
 8003ea8:	009b      	lsls	r3, r3, #2
 8003eaa:	3301      	adds	r3, #1
 8003eac:	00db      	lsls	r3, r3, #3
 8003eae:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8003eb2:	4618      	mov	r0, r3
 8003eb4:	f001 fb60 	bl	8005578 <WIZCHIP_READ>
 8003eb8:	4603      	mov	r3, r0
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d1f3      	bne.n	8003ea6 <socket+0x16e>
   //A20150401 : For release the previous sock_io_mode
   sock_io_mode &= ~(1 <<sn);
 8003ebe:	79fb      	ldrb	r3, [r7, #7]
 8003ec0:	2201      	movs	r2, #1
 8003ec2:	fa02 f303 	lsl.w	r3, r2, r3
 8003ec6:	b21b      	sxth	r3, r3
 8003ec8:	43db      	mvns	r3, r3
 8003eca:	b21a      	sxth	r2, r3
 8003ecc:	4b21      	ldr	r3, [pc, #132]	; (8003f54 <socket+0x21c>)
 8003ece:	881b      	ldrh	r3, [r3, #0]
 8003ed0:	b21b      	sxth	r3, r3
 8003ed2:	4013      	ands	r3, r2
 8003ed4:	b21b      	sxth	r3, r3
 8003ed6:	b29a      	uxth	r2, r3
 8003ed8:	4b1e      	ldr	r3, [pc, #120]	; (8003f54 <socket+0x21c>)
 8003eda:	801a      	strh	r2, [r3, #0]
   //
	sock_io_mode |= ((flag & SF_IO_NONBLOCK) << sn);   
 8003edc:	78fb      	ldrb	r3, [r7, #3]
 8003ede:	f003 0201 	and.w	r2, r3, #1
 8003ee2:	79fb      	ldrb	r3, [r7, #7]
 8003ee4:	fa02 f303 	lsl.w	r3, r2, r3
 8003ee8:	b21a      	sxth	r2, r3
 8003eea:	4b1a      	ldr	r3, [pc, #104]	; (8003f54 <socket+0x21c>)
 8003eec:	881b      	ldrh	r3, [r3, #0]
 8003eee:	b21b      	sxth	r3, r3
 8003ef0:	4313      	orrs	r3, r2
 8003ef2:	b21b      	sxth	r3, r3
 8003ef4:	b29a      	uxth	r2, r3
 8003ef6:	4b17      	ldr	r3, [pc, #92]	; (8003f54 <socket+0x21c>)
 8003ef8:	801a      	strh	r2, [r3, #0]
   sock_is_sending &= ~(1<<sn);
 8003efa:	79fb      	ldrb	r3, [r7, #7]
 8003efc:	2201      	movs	r2, #1
 8003efe:	fa02 f303 	lsl.w	r3, r2, r3
 8003f02:	b21b      	sxth	r3, r3
 8003f04:	43db      	mvns	r3, r3
 8003f06:	b21a      	sxth	r2, r3
 8003f08:	4b13      	ldr	r3, [pc, #76]	; (8003f58 <socket+0x220>)
 8003f0a:	881b      	ldrh	r3, [r3, #0]
 8003f0c:	b21b      	sxth	r3, r3
 8003f0e:	4013      	ands	r3, r2
 8003f10:	b21b      	sxth	r3, r3
 8003f12:	b29a      	uxth	r2, r3
 8003f14:	4b10      	ldr	r3, [pc, #64]	; (8003f58 <socket+0x220>)
 8003f16:	801a      	strh	r2, [r3, #0]
   sock_remained_size[sn] = 0;
 8003f18:	79fb      	ldrb	r3, [r7, #7]
 8003f1a:	4a10      	ldr	r2, [pc, #64]	; (8003f5c <socket+0x224>)
 8003f1c:	2100      	movs	r1, #0
 8003f1e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
   //M20150601 : repalce 0 with PACK_COMPLETED
   //sock_pack_info[sn] = 0;
   sock_pack_info[sn] = PACK_COMPLETED;
 8003f22:	79fb      	ldrb	r3, [r7, #7]
 8003f24:	4a0e      	ldr	r2, [pc, #56]	; (8003f60 <socket+0x228>)
 8003f26:	2100      	movs	r1, #0
 8003f28:	54d1      	strb	r1, [r2, r3]
   //
   while(getSn_SR(sn) == SOCK_CLOSED);
 8003f2a:	bf00      	nop
 8003f2c:	79fb      	ldrb	r3, [r7, #7]
 8003f2e:	009b      	lsls	r3, r3, #2
 8003f30:	3301      	adds	r3, #1
 8003f32:	00db      	lsls	r3, r3, #3
 8003f34:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8003f38:	4618      	mov	r0, r3
 8003f3a:	f001 fb1d 	bl	8005578 <WIZCHIP_READ>
 8003f3e:	4603      	mov	r3, r0
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d0f3      	beq.n	8003f2c <socket+0x1f4>
   return (int8_t)sn;
 8003f44:	f997 3007 	ldrsb.w	r3, [r7, #7]
}	   
 8003f48:	4618      	mov	r0, r3
 8003f4a:	3714      	adds	r7, #20
 8003f4c:	46bd      	mov	sp, r7
 8003f4e:	bd90      	pop	{r4, r7, pc}
 8003f50:	2000001c 	.word	0x2000001c
 8003f54:	200002c8 	.word	0x200002c8
 8003f58:	200002ca 	.word	0x200002ca
 8003f5c:	200002cc 	.word	0x200002cc
 8003f60:	200002dc 	.word	0x200002dc

08003f64 <close>:

int8_t close(uint8_t sn)
{
 8003f64:	b580      	push	{r7, lr}
 8003f66:	b082      	sub	sp, #8
 8003f68:	af00      	add	r7, sp, #0
 8003f6a:	4603      	mov	r3, r0
 8003f6c:	71fb      	strb	r3, [r7, #7]
	CHECK_SOCKNUM();
 8003f6e:	79fb      	ldrb	r3, [r7, #7]
 8003f70:	2b08      	cmp	r3, #8
 8003f72:	d902      	bls.n	8003f7a <close+0x16>
 8003f74:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003f78:	e055      	b.n	8004026 <close+0xc2>
      while(getSn_CR(sn) != 0);
      while(getSn_SR(sn) != SOCK_UDP);
      sendto(sn,destip,1,destip,0x3000); // send the dummy data to an unknown destination(0.0.0.1).
   };   
#endif 
	setSn_CR(sn,Sn_CR_CLOSE);
 8003f7a:	79fb      	ldrb	r3, [r7, #7]
 8003f7c:	009b      	lsls	r3, r3, #2
 8003f7e:	3301      	adds	r3, #1
 8003f80:	00db      	lsls	r3, r3, #3
 8003f82:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8003f86:	2110      	movs	r1, #16
 8003f88:	4618      	mov	r0, r3
 8003f8a:	f001 fb41 	bl	8005610 <WIZCHIP_WRITE>
   /* wait to process the command... */
	while( getSn_CR(sn) );
 8003f8e:	bf00      	nop
 8003f90:	79fb      	ldrb	r3, [r7, #7]
 8003f92:	009b      	lsls	r3, r3, #2
 8003f94:	3301      	adds	r3, #1
 8003f96:	00db      	lsls	r3, r3, #3
 8003f98:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8003f9c:	4618      	mov	r0, r3
 8003f9e:	f001 faeb 	bl	8005578 <WIZCHIP_READ>
 8003fa2:	4603      	mov	r3, r0
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d1f3      	bne.n	8003f90 <close+0x2c>
	/* clear all interrupt of the socket. */
	setSn_IR(sn, 0xFF);
 8003fa8:	79fb      	ldrb	r3, [r7, #7]
 8003faa:	009b      	lsls	r3, r3, #2
 8003fac:	3301      	adds	r3, #1
 8003fae:	00db      	lsls	r3, r3, #3
 8003fb0:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8003fb4:	211f      	movs	r1, #31
 8003fb6:	4618      	mov	r0, r3
 8003fb8:	f001 fb2a 	bl	8005610 <WIZCHIP_WRITE>
	//A20150401 : Release the sock_io_mode of socket n.
	sock_io_mode &= ~(1<<sn);
 8003fbc:	79fb      	ldrb	r3, [r7, #7]
 8003fbe:	2201      	movs	r2, #1
 8003fc0:	fa02 f303 	lsl.w	r3, r2, r3
 8003fc4:	b21b      	sxth	r3, r3
 8003fc6:	43db      	mvns	r3, r3
 8003fc8:	b21a      	sxth	r2, r3
 8003fca:	4b19      	ldr	r3, [pc, #100]	; (8004030 <close+0xcc>)
 8003fcc:	881b      	ldrh	r3, [r3, #0]
 8003fce:	b21b      	sxth	r3, r3
 8003fd0:	4013      	ands	r3, r2
 8003fd2:	b21b      	sxth	r3, r3
 8003fd4:	b29a      	uxth	r2, r3
 8003fd6:	4b16      	ldr	r3, [pc, #88]	; (8004030 <close+0xcc>)
 8003fd8:	801a      	strh	r2, [r3, #0]
	//
	sock_is_sending &= ~(1<<sn);
 8003fda:	79fb      	ldrb	r3, [r7, #7]
 8003fdc:	2201      	movs	r2, #1
 8003fde:	fa02 f303 	lsl.w	r3, r2, r3
 8003fe2:	b21b      	sxth	r3, r3
 8003fe4:	43db      	mvns	r3, r3
 8003fe6:	b21a      	sxth	r2, r3
 8003fe8:	4b12      	ldr	r3, [pc, #72]	; (8004034 <close+0xd0>)
 8003fea:	881b      	ldrh	r3, [r3, #0]
 8003fec:	b21b      	sxth	r3, r3
 8003fee:	4013      	ands	r3, r2
 8003ff0:	b21b      	sxth	r3, r3
 8003ff2:	b29a      	uxth	r2, r3
 8003ff4:	4b0f      	ldr	r3, [pc, #60]	; (8004034 <close+0xd0>)
 8003ff6:	801a      	strh	r2, [r3, #0]
	sock_remained_size[sn] = 0;
 8003ff8:	79fb      	ldrb	r3, [r7, #7]
 8003ffa:	4a0f      	ldr	r2, [pc, #60]	; (8004038 <close+0xd4>)
 8003ffc:	2100      	movs	r1, #0
 8003ffe:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	sock_pack_info[sn] = 0;
 8004002:	79fb      	ldrb	r3, [r7, #7]
 8004004:	4a0d      	ldr	r2, [pc, #52]	; (800403c <close+0xd8>)
 8004006:	2100      	movs	r1, #0
 8004008:	54d1      	strb	r1, [r2, r3]
	while(getSn_SR(sn) != SOCK_CLOSED);
 800400a:	bf00      	nop
 800400c:	79fb      	ldrb	r3, [r7, #7]
 800400e:	009b      	lsls	r3, r3, #2
 8004010:	3301      	adds	r3, #1
 8004012:	00db      	lsls	r3, r3, #3
 8004014:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8004018:	4618      	mov	r0, r3
 800401a:	f001 faad 	bl	8005578 <WIZCHIP_READ>
 800401e:	4603      	mov	r3, r0
 8004020:	2b00      	cmp	r3, #0
 8004022:	d1f3      	bne.n	800400c <close+0xa8>
	return SOCK_OK;
 8004024:	2301      	movs	r3, #1
}
 8004026:	4618      	mov	r0, r3
 8004028:	3708      	adds	r7, #8
 800402a:	46bd      	mov	sp, r7
 800402c:	bd80      	pop	{r7, pc}
 800402e:	bf00      	nop
 8004030:	200002c8 	.word	0x200002c8
 8004034:	200002ca 	.word	0x200002ca
 8004038:	200002cc 	.word	0x200002cc
 800403c:	200002dc 	.word	0x200002dc

08004040 <connect>:
   return SOCK_OK;
}


int8_t connect(uint8_t sn, uint8_t * addr, uint16_t port)
{
 8004040:	b580      	push	{r7, lr}
 8004042:	b084      	sub	sp, #16
 8004044:	af00      	add	r7, sp, #0
 8004046:	4603      	mov	r3, r0
 8004048:	6039      	str	r1, [r7, #0]
 800404a:	71fb      	strb	r3, [r7, #7]
 800404c:	4613      	mov	r3, r2
 800404e:	80bb      	strh	r3, [r7, #4]
   CHECK_SOCKNUM();
 8004050:	79fb      	ldrb	r3, [r7, #7]
 8004052:	2b08      	cmp	r3, #8
 8004054:	d902      	bls.n	800405c <connect+0x1c>
 8004056:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800405a:	e0c6      	b.n	80041ea <connect+0x1aa>
   CHECK_SOCKMODE(Sn_MR_TCP);
 800405c:	79fb      	ldrb	r3, [r7, #7]
 800405e:	009b      	lsls	r3, r3, #2
 8004060:	3301      	adds	r3, #1
 8004062:	00db      	lsls	r3, r3, #3
 8004064:	4618      	mov	r0, r3
 8004066:	f001 fa87 	bl	8005578 <WIZCHIP_READ>
 800406a:	4603      	mov	r3, r0
 800406c:	f003 030f 	and.w	r3, r3, #15
 8004070:	2b01      	cmp	r3, #1
 8004072:	d002      	beq.n	800407a <connect+0x3a>
 8004074:	f06f 0304 	mvn.w	r3, #4
 8004078:	e0b7      	b.n	80041ea <connect+0x1aa>
   CHECK_SOCKINIT();
 800407a:	79fb      	ldrb	r3, [r7, #7]
 800407c:	009b      	lsls	r3, r3, #2
 800407e:	3301      	adds	r3, #1
 8004080:	00db      	lsls	r3, r3, #3
 8004082:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8004086:	4618      	mov	r0, r3
 8004088:	f001 fa76 	bl	8005578 <WIZCHIP_READ>
 800408c:	4603      	mov	r3, r0
 800408e:	2b13      	cmp	r3, #19
 8004090:	d002      	beq.n	8004098 <connect+0x58>
 8004092:	f06f 0302 	mvn.w	r3, #2
 8004096:	e0a8      	b.n	80041ea <connect+0x1aa>
   //M20140501 : For avoiding fatal error on memory align mismatched
   //if( *((uint32_t*)addr) == 0xFFFFFFFF || *((uint32_t*)addr) == 0) return SOCKERR_IPINVALID;
   {
      uint32_t taddr;
      taddr = ((uint32_t)addr[0] & 0x000000FF);
 8004098:	683b      	ldr	r3, [r7, #0]
 800409a:	781b      	ldrb	r3, [r3, #0]
 800409c:	60fb      	str	r3, [r7, #12]
      taddr = (taddr << 8) + ((uint32_t)addr[1] & 0x000000FF);
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	021b      	lsls	r3, r3, #8
 80040a2:	683a      	ldr	r2, [r7, #0]
 80040a4:	3201      	adds	r2, #1
 80040a6:	7812      	ldrb	r2, [r2, #0]
 80040a8:	4413      	add	r3, r2
 80040aa:	60fb      	str	r3, [r7, #12]
      taddr = (taddr << 8) + ((uint32_t)addr[2] & 0x000000FF);
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	021b      	lsls	r3, r3, #8
 80040b0:	683a      	ldr	r2, [r7, #0]
 80040b2:	3202      	adds	r2, #2
 80040b4:	7812      	ldrb	r2, [r2, #0]
 80040b6:	4413      	add	r3, r2
 80040b8:	60fb      	str	r3, [r7, #12]
      taddr = (taddr << 8) + ((uint32_t)addr[3] & 0x000000FF);
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	021b      	lsls	r3, r3, #8
 80040be:	683a      	ldr	r2, [r7, #0]
 80040c0:	3203      	adds	r2, #3
 80040c2:	7812      	ldrb	r2, [r2, #0]
 80040c4:	4413      	add	r3, r2
 80040c6:	60fb      	str	r3, [r7, #12]
      if( taddr == 0xFFFFFFFF || taddr == 0) return SOCKERR_IPINVALID;
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80040ce:	d002      	beq.n	80040d6 <connect+0x96>
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d102      	bne.n	80040dc <connect+0x9c>
 80040d6:	f06f 030b 	mvn.w	r3, #11
 80040da:	e086      	b.n	80041ea <connect+0x1aa>
   }
   //
	
	if(port == 0) return SOCKERR_PORTZERO;
 80040dc:	88bb      	ldrh	r3, [r7, #4]
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d102      	bne.n	80040e8 <connect+0xa8>
 80040e2:	f06f 030a 	mvn.w	r3, #10
 80040e6:	e080      	b.n	80041ea <connect+0x1aa>
	setSn_DIPR(sn,addr);
 80040e8:	79fb      	ldrb	r3, [r7, #7]
 80040ea:	009b      	lsls	r3, r3, #2
 80040ec:	3301      	adds	r3, #1
 80040ee:	00db      	lsls	r3, r3, #3
 80040f0:	f503 6340 	add.w	r3, r3, #3072	; 0xc00
 80040f4:	2204      	movs	r2, #4
 80040f6:	6839      	ldr	r1, [r7, #0]
 80040f8:	4618      	mov	r0, r3
 80040fa:	f001 fb37 	bl	800576c <WIZCHIP_WRITE_BUF>
	setSn_DPORT(sn,port);
 80040fe:	79fb      	ldrb	r3, [r7, #7]
 8004100:	009b      	lsls	r3, r3, #2
 8004102:	3301      	adds	r3, #1
 8004104:	00db      	lsls	r3, r3, #3
 8004106:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800410a:	461a      	mov	r2, r3
 800410c:	88bb      	ldrh	r3, [r7, #4]
 800410e:	0a1b      	lsrs	r3, r3, #8
 8004110:	b29b      	uxth	r3, r3
 8004112:	b2db      	uxtb	r3, r3
 8004114:	4619      	mov	r1, r3
 8004116:	4610      	mov	r0, r2
 8004118:	f001 fa7a 	bl	8005610 <WIZCHIP_WRITE>
 800411c:	79fb      	ldrb	r3, [r7, #7]
 800411e:	009b      	lsls	r3, r3, #2
 8004120:	3301      	adds	r3, #1
 8004122:	00db      	lsls	r3, r3, #3
 8004124:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 8004128:	461a      	mov	r2, r3
 800412a:	88bb      	ldrh	r3, [r7, #4]
 800412c:	b2db      	uxtb	r3, r3
 800412e:	4619      	mov	r1, r3
 8004130:	4610      	mov	r0, r2
 8004132:	f001 fa6d 	bl	8005610 <WIZCHIP_WRITE>
	setSn_CR(sn,Sn_CR_CONNECT);
 8004136:	79fb      	ldrb	r3, [r7, #7]
 8004138:	009b      	lsls	r3, r3, #2
 800413a:	3301      	adds	r3, #1
 800413c:	00db      	lsls	r3, r3, #3
 800413e:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8004142:	2104      	movs	r1, #4
 8004144:	4618      	mov	r0, r3
 8004146:	f001 fa63 	bl	8005610 <WIZCHIP_WRITE>
   while(getSn_CR(sn));
 800414a:	bf00      	nop
 800414c:	79fb      	ldrb	r3, [r7, #7]
 800414e:	009b      	lsls	r3, r3, #2
 8004150:	3301      	adds	r3, #1
 8004152:	00db      	lsls	r3, r3, #3
 8004154:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8004158:	4618      	mov	r0, r3
 800415a:	f001 fa0d 	bl	8005578 <WIZCHIP_READ>
 800415e:	4603      	mov	r3, r0
 8004160:	2b00      	cmp	r3, #0
 8004162:	d1f3      	bne.n	800414c <connect+0x10c>
   if(sock_io_mode & (1<<sn)) return SOCK_BUSY;
 8004164:	4b23      	ldr	r3, [pc, #140]	; (80041f4 <connect+0x1b4>)
 8004166:	881b      	ldrh	r3, [r3, #0]
 8004168:	461a      	mov	r2, r3
 800416a:	79fb      	ldrb	r3, [r7, #7]
 800416c:	fa42 f303 	asr.w	r3, r2, r3
 8004170:	f003 0301 	and.w	r3, r3, #1
 8004174:	2b00      	cmp	r3, #0
 8004176:	d02b      	beq.n	80041d0 <connect+0x190>
 8004178:	2300      	movs	r3, #0
 800417a:	e036      	b.n	80041ea <connect+0x1aa>
   while(getSn_SR(sn) != SOCK_ESTABLISHED)
   {
		if (getSn_IR(sn) & Sn_IR_TIMEOUT)
 800417c:	79fb      	ldrb	r3, [r7, #7]
 800417e:	009b      	lsls	r3, r3, #2
 8004180:	3301      	adds	r3, #1
 8004182:	00db      	lsls	r3, r3, #3
 8004184:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8004188:	4618      	mov	r0, r3
 800418a:	f001 f9f5 	bl	8005578 <WIZCHIP_READ>
 800418e:	4603      	mov	r3, r0
 8004190:	f003 0308 	and.w	r3, r3, #8
 8004194:	2b00      	cmp	r3, #0
 8004196:	d00c      	beq.n	80041b2 <connect+0x172>
		{
			setSn_IR(sn, Sn_IR_TIMEOUT);
 8004198:	79fb      	ldrb	r3, [r7, #7]
 800419a:	009b      	lsls	r3, r3, #2
 800419c:	3301      	adds	r3, #1
 800419e:	00db      	lsls	r3, r3, #3
 80041a0:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80041a4:	2108      	movs	r1, #8
 80041a6:	4618      	mov	r0, r3
 80041a8:	f001 fa32 	bl	8005610 <WIZCHIP_WRITE>
            return SOCKERR_TIMEOUT;
 80041ac:	f06f 030c 	mvn.w	r3, #12
 80041b0:	e01b      	b.n	80041ea <connect+0x1aa>
		}

		if (getSn_SR(sn) == SOCK_CLOSED)
 80041b2:	79fb      	ldrb	r3, [r7, #7]
 80041b4:	009b      	lsls	r3, r3, #2
 80041b6:	3301      	adds	r3, #1
 80041b8:	00db      	lsls	r3, r3, #3
 80041ba:	f503 7340 	add.w	r3, r3, #768	; 0x300
 80041be:	4618      	mov	r0, r3
 80041c0:	f001 f9da 	bl	8005578 <WIZCHIP_READ>
 80041c4:	4603      	mov	r3, r0
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d102      	bne.n	80041d0 <connect+0x190>
		{
			return SOCKERR_SOCKCLOSED;
 80041ca:	f06f 0303 	mvn.w	r3, #3
 80041ce:	e00c      	b.n	80041ea <connect+0x1aa>
   while(getSn_SR(sn) != SOCK_ESTABLISHED)
 80041d0:	79fb      	ldrb	r3, [r7, #7]
 80041d2:	009b      	lsls	r3, r3, #2
 80041d4:	3301      	adds	r3, #1
 80041d6:	00db      	lsls	r3, r3, #3
 80041d8:	f503 7340 	add.w	r3, r3, #768	; 0x300
 80041dc:	4618      	mov	r0, r3
 80041de:	f001 f9cb 	bl	8005578 <WIZCHIP_READ>
 80041e2:	4603      	mov	r3, r0
 80041e4:	2b17      	cmp	r3, #23
 80041e6:	d1c9      	bne.n	800417c <connect+0x13c>
		}
	}
   
   return SOCK_OK;
 80041e8:	2301      	movs	r3, #1
}
 80041ea:	4618      	mov	r0, r3
 80041ec:	3710      	adds	r7, #16
 80041ee:	46bd      	mov	sp, r7
 80041f0:	bd80      	pop	{r7, pc}
 80041f2:	bf00      	nop
 80041f4:	200002c8 	.word	0x200002c8

080041f8 <send>:
	}
	return SOCK_OK;
}

int32_t send(uint8_t sn, uint8_t * buf, uint16_t len)
{
 80041f8:	b580      	push	{r7, lr}
 80041fa:	b084      	sub	sp, #16
 80041fc:	af00      	add	r7, sp, #0
 80041fe:	4603      	mov	r3, r0
 8004200:	6039      	str	r1, [r7, #0]
 8004202:	71fb      	strb	r3, [r7, #7]
 8004204:	4613      	mov	r3, r2
 8004206:	80bb      	strh	r3, [r7, #4]
   uint8_t tmp=0;
 8004208:	2300      	movs	r3, #0
 800420a:	73fb      	strb	r3, [r7, #15]
   uint16_t freesize=0;
 800420c:	2300      	movs	r3, #0
 800420e:	81bb      	strh	r3, [r7, #12]
   
   CHECK_SOCKNUM();
 8004210:	79fb      	ldrb	r3, [r7, #7]
 8004212:	2b08      	cmp	r3, #8
 8004214:	d902      	bls.n	800421c <send+0x24>
 8004216:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800421a:	e0de      	b.n	80043da <send+0x1e2>
   CHECK_SOCKMODE(Sn_MR_TCP);
 800421c:	79fb      	ldrb	r3, [r7, #7]
 800421e:	009b      	lsls	r3, r3, #2
 8004220:	3301      	adds	r3, #1
 8004222:	00db      	lsls	r3, r3, #3
 8004224:	4618      	mov	r0, r3
 8004226:	f001 f9a7 	bl	8005578 <WIZCHIP_READ>
 800422a:	4603      	mov	r3, r0
 800422c:	f003 030f 	and.w	r3, r3, #15
 8004230:	2b01      	cmp	r3, #1
 8004232:	d002      	beq.n	800423a <send+0x42>
 8004234:	f06f 0304 	mvn.w	r3, #4
 8004238:	e0cf      	b.n	80043da <send+0x1e2>
   CHECK_SOCKDATA();
 800423a:	88bb      	ldrh	r3, [r7, #4]
 800423c:	2b00      	cmp	r3, #0
 800423e:	d102      	bne.n	8004246 <send+0x4e>
 8004240:	f06f 030d 	mvn.w	r3, #13
 8004244:	e0c9      	b.n	80043da <send+0x1e2>
   tmp = getSn_SR(sn);
 8004246:	79fb      	ldrb	r3, [r7, #7]
 8004248:	009b      	lsls	r3, r3, #2
 800424a:	3301      	adds	r3, #1
 800424c:	00db      	lsls	r3, r3, #3
 800424e:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8004252:	4618      	mov	r0, r3
 8004254:	f001 f990 	bl	8005578 <WIZCHIP_READ>
 8004258:	4603      	mov	r3, r0
 800425a:	73fb      	strb	r3, [r7, #15]
   if(tmp != SOCK_ESTABLISHED && tmp != SOCK_CLOSE_WAIT) return SOCKERR_SOCKSTATUS;
 800425c:	7bfb      	ldrb	r3, [r7, #15]
 800425e:	2b17      	cmp	r3, #23
 8004260:	d005      	beq.n	800426e <send+0x76>
 8004262:	7bfb      	ldrb	r3, [r7, #15]
 8004264:	2b1c      	cmp	r3, #28
 8004266:	d002      	beq.n	800426e <send+0x76>
 8004268:	f06f 0306 	mvn.w	r3, #6
 800426c:	e0b5      	b.n	80043da <send+0x1e2>
   if( sock_is_sending & (1<<sn) )
 800426e:	4b5d      	ldr	r3, [pc, #372]	; (80043e4 <send+0x1ec>)
 8004270:	881b      	ldrh	r3, [r3, #0]
 8004272:	461a      	mov	r2, r3
 8004274:	79fb      	ldrb	r3, [r7, #7]
 8004276:	fa42 f303 	asr.w	r3, r2, r3
 800427a:	f003 0301 	and.w	r3, r3, #1
 800427e:	2b00      	cmp	r3, #0
 8004280:	d039      	beq.n	80042f6 <send+0xfe>
   {
      tmp = getSn_IR(sn);
 8004282:	79fb      	ldrb	r3, [r7, #7]
 8004284:	009b      	lsls	r3, r3, #2
 8004286:	3301      	adds	r3, #1
 8004288:	00db      	lsls	r3, r3, #3
 800428a:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800428e:	4618      	mov	r0, r3
 8004290:	f001 f972 	bl	8005578 <WIZCHIP_READ>
 8004294:	4603      	mov	r3, r0
 8004296:	f003 031f 	and.w	r3, r3, #31
 800429a:	73fb      	strb	r3, [r7, #15]
      if(tmp & Sn_IR_SENDOK)
 800429c:	7bfb      	ldrb	r3, [r7, #15]
 800429e:	f003 0310 	and.w	r3, r3, #16
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d019      	beq.n	80042da <send+0xe2>
      {
         setSn_IR(sn, Sn_IR_SENDOK);
 80042a6:	79fb      	ldrb	r3, [r7, #7]
 80042a8:	009b      	lsls	r3, r3, #2
 80042aa:	3301      	adds	r3, #1
 80042ac:	00db      	lsls	r3, r3, #3
 80042ae:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80042b2:	2110      	movs	r1, #16
 80042b4:	4618      	mov	r0, r3
 80042b6:	f001 f9ab 	bl	8005610 <WIZCHIP_WRITE>
               setSn_CR(sn,Sn_CR_SEND);
               while(getSn_CR(sn));
               return SOCK_BUSY;
            }
         #endif
         sock_is_sending &= ~(1<<sn);         
 80042ba:	79fb      	ldrb	r3, [r7, #7]
 80042bc:	2201      	movs	r2, #1
 80042be:	fa02 f303 	lsl.w	r3, r2, r3
 80042c2:	b21b      	sxth	r3, r3
 80042c4:	43db      	mvns	r3, r3
 80042c6:	b21a      	sxth	r2, r3
 80042c8:	4b46      	ldr	r3, [pc, #280]	; (80043e4 <send+0x1ec>)
 80042ca:	881b      	ldrh	r3, [r3, #0]
 80042cc:	b21b      	sxth	r3, r3
 80042ce:	4013      	ands	r3, r2
 80042d0:	b21b      	sxth	r3, r3
 80042d2:	b29a      	uxth	r2, r3
 80042d4:	4b43      	ldr	r3, [pc, #268]	; (80043e4 <send+0x1ec>)
 80042d6:	801a      	strh	r2, [r3, #0]
 80042d8:	e00d      	b.n	80042f6 <send+0xfe>
      }
      else if(tmp & Sn_IR_TIMEOUT)
 80042da:	7bfb      	ldrb	r3, [r7, #15]
 80042dc:	f003 0308 	and.w	r3, r3, #8
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d006      	beq.n	80042f2 <send+0xfa>
      {
         close(sn);
 80042e4:	79fb      	ldrb	r3, [r7, #7]
 80042e6:	4618      	mov	r0, r3
 80042e8:	f7ff fe3c 	bl	8003f64 <close>
         return SOCKERR_TIMEOUT;
 80042ec:	f06f 030c 	mvn.w	r3, #12
 80042f0:	e073      	b.n	80043da <send+0x1e2>
      }
      else return SOCK_BUSY;
 80042f2:	2300      	movs	r3, #0
 80042f4:	e071      	b.n	80043da <send+0x1e2>
   }
   freesize = getSn_TxMAX(sn);
 80042f6:	79fb      	ldrb	r3, [r7, #7]
 80042f8:	009b      	lsls	r3, r3, #2
 80042fa:	3301      	adds	r3, #1
 80042fc:	00db      	lsls	r3, r3, #3
 80042fe:	f503 53f8 	add.w	r3, r3, #7936	; 0x1f00
 8004302:	4618      	mov	r0, r3
 8004304:	f001 f938 	bl	8005578 <WIZCHIP_READ>
 8004308:	4603      	mov	r3, r0
 800430a:	b29b      	uxth	r3, r3
 800430c:	029b      	lsls	r3, r3, #10
 800430e:	81bb      	strh	r3, [r7, #12]
   if (len > freesize) len = freesize; // check size not to exceed MAX size.
 8004310:	88ba      	ldrh	r2, [r7, #4]
 8004312:	89bb      	ldrh	r3, [r7, #12]
 8004314:	429a      	cmp	r2, r3
 8004316:	d901      	bls.n	800431c <send+0x124>
 8004318:	89bb      	ldrh	r3, [r7, #12]
 800431a:	80bb      	strh	r3, [r7, #4]
   while(1)
   {
      freesize = getSn_TX_FSR(sn);
 800431c:	79fb      	ldrb	r3, [r7, #7]
 800431e:	4618      	mov	r0, r3
 8004320:	f001 fa84 	bl	800582c <getSn_TX_FSR>
 8004324:	4603      	mov	r3, r0
 8004326:	81bb      	strh	r3, [r7, #12]
      tmp = getSn_SR(sn);
 8004328:	79fb      	ldrb	r3, [r7, #7]
 800432a:	009b      	lsls	r3, r3, #2
 800432c:	3301      	adds	r3, #1
 800432e:	00db      	lsls	r3, r3, #3
 8004330:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8004334:	4618      	mov	r0, r3
 8004336:	f001 f91f 	bl	8005578 <WIZCHIP_READ>
 800433a:	4603      	mov	r3, r0
 800433c:	73fb      	strb	r3, [r7, #15]
      if ((tmp != SOCK_ESTABLISHED) && (tmp != SOCK_CLOSE_WAIT))
 800433e:	7bfb      	ldrb	r3, [r7, #15]
 8004340:	2b17      	cmp	r3, #23
 8004342:	d009      	beq.n	8004358 <send+0x160>
 8004344:	7bfb      	ldrb	r3, [r7, #15]
 8004346:	2b1c      	cmp	r3, #28
 8004348:	d006      	beq.n	8004358 <send+0x160>
      {
         close(sn);
 800434a:	79fb      	ldrb	r3, [r7, #7]
 800434c:	4618      	mov	r0, r3
 800434e:	f7ff fe09 	bl	8003f64 <close>
         return SOCKERR_SOCKSTATUS;
 8004352:	f06f 0306 	mvn.w	r3, #6
 8004356:	e040      	b.n	80043da <send+0x1e2>
      }
      if( (sock_io_mode & (1<<sn)) && (len > freesize) ) return SOCK_BUSY;
 8004358:	4b23      	ldr	r3, [pc, #140]	; (80043e8 <send+0x1f0>)
 800435a:	881b      	ldrh	r3, [r3, #0]
 800435c:	461a      	mov	r2, r3
 800435e:	79fb      	ldrb	r3, [r7, #7]
 8004360:	fa42 f303 	asr.w	r3, r2, r3
 8004364:	f003 0301 	and.w	r3, r3, #1
 8004368:	2b00      	cmp	r3, #0
 800436a:	d005      	beq.n	8004378 <send+0x180>
 800436c:	88ba      	ldrh	r2, [r7, #4]
 800436e:	89bb      	ldrh	r3, [r7, #12]
 8004370:	429a      	cmp	r2, r3
 8004372:	d901      	bls.n	8004378 <send+0x180>
 8004374:	2300      	movs	r3, #0
 8004376:	e030      	b.n	80043da <send+0x1e2>
      if(len <= freesize) break;
 8004378:	88ba      	ldrh	r2, [r7, #4]
 800437a:	89bb      	ldrh	r3, [r7, #12]
 800437c:	429a      	cmp	r2, r3
 800437e:	d900      	bls.n	8004382 <send+0x18a>
      freesize = getSn_TX_FSR(sn);
 8004380:	e7cc      	b.n	800431c <send+0x124>
      if(len <= freesize) break;
 8004382:	bf00      	nop
   }
   wiz_send_data(sn, buf, len);
 8004384:	88ba      	ldrh	r2, [r7, #4]
 8004386:	79fb      	ldrb	r3, [r7, #7]
 8004388:	6839      	ldr	r1, [r7, #0]
 800438a:	4618      	mov	r0, r3
 800438c:	f001 fae4 	bl	8005958 <wiz_send_data>

   #if _WIZCHIP_ == 5300
      setSn_TX_WRSR(sn,len);
   #endif
   
   setSn_CR(sn,Sn_CR_SEND);
 8004390:	79fb      	ldrb	r3, [r7, #7]
 8004392:	009b      	lsls	r3, r3, #2
 8004394:	3301      	adds	r3, #1
 8004396:	00db      	lsls	r3, r3, #3
 8004398:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800439c:	2120      	movs	r1, #32
 800439e:	4618      	mov	r0, r3
 80043a0:	f001 f936 	bl	8005610 <WIZCHIP_WRITE>
   /* wait to process the command... */
   while(getSn_CR(sn));
 80043a4:	bf00      	nop
 80043a6:	79fb      	ldrb	r3, [r7, #7]
 80043a8:	009b      	lsls	r3, r3, #2
 80043aa:	3301      	adds	r3, #1
 80043ac:	00db      	lsls	r3, r3, #3
 80043ae:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80043b2:	4618      	mov	r0, r3
 80043b4:	f001 f8e0 	bl	8005578 <WIZCHIP_READ>
 80043b8:	4603      	mov	r3, r0
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d1f3      	bne.n	80043a6 <send+0x1ae>
   sock_is_sending |= (1 << sn);
 80043be:	79fb      	ldrb	r3, [r7, #7]
 80043c0:	2201      	movs	r2, #1
 80043c2:	fa02 f303 	lsl.w	r3, r2, r3
 80043c6:	b21a      	sxth	r2, r3
 80043c8:	4b06      	ldr	r3, [pc, #24]	; (80043e4 <send+0x1ec>)
 80043ca:	881b      	ldrh	r3, [r3, #0]
 80043cc:	b21b      	sxth	r3, r3
 80043ce:	4313      	orrs	r3, r2
 80043d0:	b21b      	sxth	r3, r3
 80043d2:	b29a      	uxth	r2, r3
 80043d4:	4b03      	ldr	r3, [pc, #12]	; (80043e4 <send+0x1ec>)
 80043d6:	801a      	strh	r2, [r3, #0]
   //M20150409 : Explicit Type Casting
   //return len;
   return (int32_t)len;
 80043d8:	88bb      	ldrh	r3, [r7, #4]
}
 80043da:	4618      	mov	r0, r3
 80043dc:	3710      	adds	r7, #16
 80043de:	46bd      	mov	sp, r7
 80043e0:	bd80      	pop	{r7, pc}
 80043e2:	bf00      	nop
 80043e4:	200002ca 	.word	0x200002ca
 80043e8:	200002c8 	.word	0x200002c8

080043ec <recv>:


int32_t recv(uint8_t sn, uint8_t * buf, uint16_t len)
{
 80043ec:	b590      	push	{r4, r7, lr}
 80043ee:	b085      	sub	sp, #20
 80043f0:	af00      	add	r7, sp, #0
 80043f2:	4603      	mov	r3, r0
 80043f4:	6039      	str	r1, [r7, #0]
 80043f6:	71fb      	strb	r3, [r7, #7]
 80043f8:	4613      	mov	r3, r2
 80043fa:	80bb      	strh	r3, [r7, #4]
   uint8_t  tmp = 0;
 80043fc:	2300      	movs	r3, #0
 80043fe:	73fb      	strb	r3, [r7, #15]
   uint16_t recvsize = 0;
 8004400:	2300      	movs	r3, #0
 8004402:	81bb      	strh	r3, [r7, #12]
#if   _WIZCHIP_ == 5300
   uint8_t head[2];
   uint16_t mr;
#endif
//
   CHECK_SOCKNUM();
 8004404:	79fb      	ldrb	r3, [r7, #7]
 8004406:	2b08      	cmp	r3, #8
 8004408:	d902      	bls.n	8004410 <recv+0x24>
 800440a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800440e:	e09c      	b.n	800454a <recv+0x15e>
   CHECK_SOCKMODE(Sn_MR_TCP);
 8004410:	79fb      	ldrb	r3, [r7, #7]
 8004412:	009b      	lsls	r3, r3, #2
 8004414:	3301      	adds	r3, #1
 8004416:	00db      	lsls	r3, r3, #3
 8004418:	4618      	mov	r0, r3
 800441a:	f001 f8ad 	bl	8005578 <WIZCHIP_READ>
 800441e:	4603      	mov	r3, r0
 8004420:	f003 030f 	and.w	r3, r3, #15
 8004424:	2b01      	cmp	r3, #1
 8004426:	d002      	beq.n	800442e <recv+0x42>
 8004428:	f06f 0304 	mvn.w	r3, #4
 800442c:	e08d      	b.n	800454a <recv+0x15e>
   CHECK_SOCKDATA();
 800442e:	88bb      	ldrh	r3, [r7, #4]
 8004430:	2b00      	cmp	r3, #0
 8004432:	d102      	bne.n	800443a <recv+0x4e>
 8004434:	f06f 030d 	mvn.w	r3, #13
 8004438:	e087      	b.n	800454a <recv+0x15e>
   
   recvsize = getSn_RxMAX(sn);
 800443a:	79fb      	ldrb	r3, [r7, #7]
 800443c:	009b      	lsls	r3, r3, #2
 800443e:	3301      	adds	r3, #1
 8004440:	00db      	lsls	r3, r3, #3
 8004442:	f503 53f0 	add.w	r3, r3, #7680	; 0x1e00
 8004446:	4618      	mov	r0, r3
 8004448:	f001 f896 	bl	8005578 <WIZCHIP_READ>
 800444c:	4603      	mov	r3, r0
 800444e:	b29b      	uxth	r3, r3
 8004450:	029b      	lsls	r3, r3, #10
 8004452:	81bb      	strh	r3, [r7, #12]
   if(recvsize < len) len = recvsize;
 8004454:	89ba      	ldrh	r2, [r7, #12]
 8004456:	88bb      	ldrh	r3, [r7, #4]
 8004458:	429a      	cmp	r2, r3
 800445a:	d201      	bcs.n	8004460 <recv+0x74>
 800445c:	89bb      	ldrh	r3, [r7, #12]
 800445e:	80bb      	strh	r3, [r7, #4]
   {
#endif
//
      while(1)
      {
         recvsize = getSn_RX_RSR(sn);
 8004460:	79fb      	ldrb	r3, [r7, #7]
 8004462:	4618      	mov	r0, r3
 8004464:	f001 fa2d 	bl	80058c2 <getSn_RX_RSR>
 8004468:	4603      	mov	r3, r0
 800446a:	81bb      	strh	r3, [r7, #12]
         tmp = getSn_SR(sn);
 800446c:	79fb      	ldrb	r3, [r7, #7]
 800446e:	009b      	lsls	r3, r3, #2
 8004470:	3301      	adds	r3, #1
 8004472:	00db      	lsls	r3, r3, #3
 8004474:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8004478:	4618      	mov	r0, r3
 800447a:	f001 f87d 	bl	8005578 <WIZCHIP_READ>
 800447e:	4603      	mov	r3, r0
 8004480:	73fb      	strb	r3, [r7, #15]
         if (tmp != SOCK_ESTABLISHED)
 8004482:	7bfb      	ldrb	r3, [r7, #15]
 8004484:	2b17      	cmp	r3, #23
 8004486:	d026      	beq.n	80044d6 <recv+0xea>
         {
            if(tmp == SOCK_CLOSE_WAIT)
 8004488:	7bfb      	ldrb	r3, [r7, #15]
 800448a:	2b1c      	cmp	r3, #28
 800448c:	d11c      	bne.n	80044c8 <recv+0xdc>
            {
               if(recvsize != 0) break;
 800448e:	89bb      	ldrh	r3, [r7, #12]
 8004490:	2b00      	cmp	r3, #0
 8004492:	d133      	bne.n	80044fc <recv+0x110>
               else if(getSn_TX_FSR(sn) == getSn_TxMAX(sn))
 8004494:	79fb      	ldrb	r3, [r7, #7]
 8004496:	4618      	mov	r0, r3
 8004498:	f001 f9c8 	bl	800582c <getSn_TX_FSR>
 800449c:	4603      	mov	r3, r0
 800449e:	461c      	mov	r4, r3
 80044a0:	79fb      	ldrb	r3, [r7, #7]
 80044a2:	009b      	lsls	r3, r3, #2
 80044a4:	3301      	adds	r3, #1
 80044a6:	00db      	lsls	r3, r3, #3
 80044a8:	f503 53f8 	add.w	r3, r3, #7936	; 0x1f00
 80044ac:	4618      	mov	r0, r3
 80044ae:	f001 f863 	bl	8005578 <WIZCHIP_READ>
 80044b2:	4603      	mov	r3, r0
 80044b4:	029b      	lsls	r3, r3, #10
 80044b6:	429c      	cmp	r4, r3
 80044b8:	d10d      	bne.n	80044d6 <recv+0xea>
               {
                  close(sn);
 80044ba:	79fb      	ldrb	r3, [r7, #7]
 80044bc:	4618      	mov	r0, r3
 80044be:	f7ff fd51 	bl	8003f64 <close>
                  return SOCKERR_SOCKSTATUS;
 80044c2:	f06f 0306 	mvn.w	r3, #6
 80044c6:	e040      	b.n	800454a <recv+0x15e>
               }
            }
            else
            {
               close(sn);
 80044c8:	79fb      	ldrb	r3, [r7, #7]
 80044ca:	4618      	mov	r0, r3
 80044cc:	f7ff fd4a 	bl	8003f64 <close>
               return SOCKERR_SOCKSTATUS;
 80044d0:	f06f 0306 	mvn.w	r3, #6
 80044d4:	e039      	b.n	800454a <recv+0x15e>
            }
         }
         if((sock_io_mode & (1<<sn)) && (recvsize == 0)) return SOCK_BUSY;
 80044d6:	4b1f      	ldr	r3, [pc, #124]	; (8004554 <recv+0x168>)
 80044d8:	881b      	ldrh	r3, [r3, #0]
 80044da:	461a      	mov	r2, r3
 80044dc:	79fb      	ldrb	r3, [r7, #7]
 80044de:	fa42 f303 	asr.w	r3, r2, r3
 80044e2:	f003 0301 	and.w	r3, r3, #1
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d004      	beq.n	80044f4 <recv+0x108>
 80044ea:	89bb      	ldrh	r3, [r7, #12]
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d101      	bne.n	80044f4 <recv+0x108>
 80044f0:	2300      	movs	r3, #0
 80044f2:	e02a      	b.n	800454a <recv+0x15e>
         if(recvsize != 0) break;
 80044f4:	89bb      	ldrh	r3, [r7, #12]
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d102      	bne.n	8004500 <recv+0x114>
         recvsize = getSn_RX_RSR(sn);
 80044fa:	e7b1      	b.n	8004460 <recv+0x74>
               if(recvsize != 0) break;
 80044fc:	bf00      	nop
 80044fe:	e000      	b.n	8004502 <recv+0x116>
         if(recvsize != 0) break;
 8004500:	bf00      	nop
   }
   else sock_pack_info[sn] = PACK_COMPLETED;
   if(getSn_MR(sn) & Sn_MR_ALIGN) sock_remained_size[sn] = 0;
   //len = recvsize;
#else   
   if(recvsize < len) len = recvsize;   
 8004502:	89ba      	ldrh	r2, [r7, #12]
 8004504:	88bb      	ldrh	r3, [r7, #4]
 8004506:	429a      	cmp	r2, r3
 8004508:	d201      	bcs.n	800450e <recv+0x122>
 800450a:	89bb      	ldrh	r3, [r7, #12]
 800450c:	80bb      	strh	r3, [r7, #4]
   wiz_recv_data(sn, buf, len);
 800450e:	88ba      	ldrh	r2, [r7, #4]
 8004510:	79fb      	ldrb	r3, [r7, #7]
 8004512:	6839      	ldr	r1, [r7, #0]
 8004514:	4618      	mov	r0, r3
 8004516:	f001 fa7b 	bl	8005a10 <wiz_recv_data>
   setSn_CR(sn,Sn_CR_RECV);
 800451a:	79fb      	ldrb	r3, [r7, #7]
 800451c:	009b      	lsls	r3, r3, #2
 800451e:	3301      	adds	r3, #1
 8004520:	00db      	lsls	r3, r3, #3
 8004522:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8004526:	2140      	movs	r1, #64	; 0x40
 8004528:	4618      	mov	r0, r3
 800452a:	f001 f871 	bl	8005610 <WIZCHIP_WRITE>
   while(getSn_CR(sn));
 800452e:	bf00      	nop
 8004530:	79fb      	ldrb	r3, [r7, #7]
 8004532:	009b      	lsls	r3, r3, #2
 8004534:	3301      	adds	r3, #1
 8004536:	00db      	lsls	r3, r3, #3
 8004538:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800453c:	4618      	mov	r0, r3
 800453e:	f001 f81b 	bl	8005578 <WIZCHIP_READ>
 8004542:	4603      	mov	r3, r0
 8004544:	2b00      	cmp	r3, #0
 8004546:	d1f3      	bne.n	8004530 <recv+0x144>
#endif
     
   //M20150409 : Explicit Type Casting
   //return len;
   return (int32_t)len;
 8004548:	88bb      	ldrh	r3, [r7, #4]
}
 800454a:	4618      	mov	r0, r3
 800454c:	3714      	adds	r7, #20
 800454e:	46bd      	mov	sp, r7
 8004550:	bd90      	pop	{r4, r7, pc}
 8004552:	bf00      	nop
 8004554:	200002c8 	.word	0x200002c8

08004558 <sendto>:

int32_t sendto(uint8_t sn, uint8_t * buf, uint16_t len, uint8_t * addr, uint16_t port)
{
 8004558:	b580      	push	{r7, lr}
 800455a:	b086      	sub	sp, #24
 800455c:	af00      	add	r7, sp, #0
 800455e:	60b9      	str	r1, [r7, #8]
 8004560:	607b      	str	r3, [r7, #4]
 8004562:	4603      	mov	r3, r0
 8004564:	73fb      	strb	r3, [r7, #15]
 8004566:	4613      	mov	r3, r2
 8004568:	81bb      	strh	r3, [r7, #12]
   uint8_t tmp = 0;
 800456a:	2300      	movs	r3, #0
 800456c:	75fb      	strb	r3, [r7, #23]
   uint16_t freesize = 0;
 800456e:	2300      	movs	r3, #0
 8004570:	82bb      	strh	r3, [r7, #20]
   uint32_t taddr;

   CHECK_SOCKNUM();
 8004572:	7bfb      	ldrb	r3, [r7, #15]
 8004574:	2b08      	cmp	r3, #8
 8004576:	d902      	bls.n	800457e <sendto+0x26>
 8004578:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800457c:	e11b      	b.n	80047b6 <sendto+0x25e>
   switch(getSn_MR(sn) & 0x0F)
 800457e:	7bfb      	ldrb	r3, [r7, #15]
 8004580:	009b      	lsls	r3, r3, #2
 8004582:	3301      	adds	r3, #1
 8004584:	00db      	lsls	r3, r3, #3
 8004586:	4618      	mov	r0, r3
 8004588:	f000 fff6 	bl	8005578 <WIZCHIP_READ>
 800458c:	4603      	mov	r3, r0
 800458e:	f003 030f 	and.w	r3, r3, #15
 8004592:	3b02      	subs	r3, #2
 8004594:	2b02      	cmp	r3, #2
 8004596:	d902      	bls.n	800459e <sendto+0x46>
//   #if ( _WIZCHIP_ < 5200 )
      case Sn_MR_IPRAW:
         break;
//   #endif
      default:
         return SOCKERR_SOCKMODE;
 8004598:	f06f 0304 	mvn.w	r3, #4
 800459c:	e10b      	b.n	80047b6 <sendto+0x25e>
         break;
 800459e:	bf00      	nop
   }
   CHECK_SOCKDATA();
 80045a0:	89bb      	ldrh	r3, [r7, #12]
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d102      	bne.n	80045ac <sendto+0x54>
 80045a6:	f06f 030d 	mvn.w	r3, #13
 80045aa:	e104      	b.n	80047b6 <sendto+0x25e>
   //M20140501 : For avoiding fatal error on memory align mismatched
   //if(*((uint32_t*)addr) == 0) return SOCKERR_IPINVALID;
   //{
      //uint32_t taddr;
      taddr = ((uint32_t)addr[0]) & 0x000000FF;
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	781b      	ldrb	r3, [r3, #0]
 80045b0:	613b      	str	r3, [r7, #16]
      taddr = (taddr << 8) + ((uint32_t)addr[1] & 0x000000FF);
 80045b2:	693b      	ldr	r3, [r7, #16]
 80045b4:	021b      	lsls	r3, r3, #8
 80045b6:	687a      	ldr	r2, [r7, #4]
 80045b8:	3201      	adds	r2, #1
 80045ba:	7812      	ldrb	r2, [r2, #0]
 80045bc:	4413      	add	r3, r2
 80045be:	613b      	str	r3, [r7, #16]
      taddr = (taddr << 8) + ((uint32_t)addr[2] & 0x000000FF);
 80045c0:	693b      	ldr	r3, [r7, #16]
 80045c2:	021b      	lsls	r3, r3, #8
 80045c4:	687a      	ldr	r2, [r7, #4]
 80045c6:	3202      	adds	r2, #2
 80045c8:	7812      	ldrb	r2, [r2, #0]
 80045ca:	4413      	add	r3, r2
 80045cc:	613b      	str	r3, [r7, #16]
      taddr = (taddr << 8) + ((uint32_t)addr[3] & 0x000000FF);
 80045ce:	693b      	ldr	r3, [r7, #16]
 80045d0:	021b      	lsls	r3, r3, #8
 80045d2:	687a      	ldr	r2, [r7, #4]
 80045d4:	3203      	adds	r2, #3
 80045d6:	7812      	ldrb	r2, [r2, #0]
 80045d8:	4413      	add	r3, r2
 80045da:	613b      	str	r3, [r7, #16]
   //}
   //
   //if(*((uint32_t*)addr) == 0) return SOCKERR_IPINVALID;
   if((taddr == 0) && ((getSn_MR(sn)&Sn_MR_MACRAW) != Sn_MR_MACRAW)) return SOCKERR_IPINVALID;
 80045dc:	693b      	ldr	r3, [r7, #16]
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d10e      	bne.n	8004600 <sendto+0xa8>
 80045e2:	7bfb      	ldrb	r3, [r7, #15]
 80045e4:	009b      	lsls	r3, r3, #2
 80045e6:	3301      	adds	r3, #1
 80045e8:	00db      	lsls	r3, r3, #3
 80045ea:	4618      	mov	r0, r3
 80045ec:	f000 ffc4 	bl	8005578 <WIZCHIP_READ>
 80045f0:	4603      	mov	r3, r0
 80045f2:	f003 0304 	and.w	r3, r3, #4
 80045f6:	2b04      	cmp	r3, #4
 80045f8:	d002      	beq.n	8004600 <sendto+0xa8>
 80045fa:	f06f 030b 	mvn.w	r3, #11
 80045fe:	e0da      	b.n	80047b6 <sendto+0x25e>
   if((port  == 0) && ((getSn_MR(sn)&Sn_MR_MACRAW) != Sn_MR_MACRAW)) return SOCKERR_PORTZERO;
 8004600:	8c3b      	ldrh	r3, [r7, #32]
 8004602:	2b00      	cmp	r3, #0
 8004604:	d10e      	bne.n	8004624 <sendto+0xcc>
 8004606:	7bfb      	ldrb	r3, [r7, #15]
 8004608:	009b      	lsls	r3, r3, #2
 800460a:	3301      	adds	r3, #1
 800460c:	00db      	lsls	r3, r3, #3
 800460e:	4618      	mov	r0, r3
 8004610:	f000 ffb2 	bl	8005578 <WIZCHIP_READ>
 8004614:	4603      	mov	r3, r0
 8004616:	f003 0304 	and.w	r3, r3, #4
 800461a:	2b04      	cmp	r3, #4
 800461c:	d002      	beq.n	8004624 <sendto+0xcc>
 800461e:	f06f 030a 	mvn.w	r3, #10
 8004622:	e0c8      	b.n	80047b6 <sendto+0x25e>
   tmp = getSn_SR(sn);
 8004624:	7bfb      	ldrb	r3, [r7, #15]
 8004626:	009b      	lsls	r3, r3, #2
 8004628:	3301      	adds	r3, #1
 800462a:	00db      	lsls	r3, r3, #3
 800462c:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8004630:	4618      	mov	r0, r3
 8004632:	f000 ffa1 	bl	8005578 <WIZCHIP_READ>
 8004636:	4603      	mov	r3, r0
 8004638:	75fb      	strb	r3, [r7, #23]
//#if ( _WIZCHIP_ < 5200 )
   if((tmp != SOCK_MACRAW) && (tmp != SOCK_UDP) && (tmp != SOCK_IPRAW)) return SOCKERR_SOCKSTATUS;
 800463a:	7dfb      	ldrb	r3, [r7, #23]
 800463c:	2b42      	cmp	r3, #66	; 0x42
 800463e:	d008      	beq.n	8004652 <sendto+0xfa>
 8004640:	7dfb      	ldrb	r3, [r7, #23]
 8004642:	2b22      	cmp	r3, #34	; 0x22
 8004644:	d005      	beq.n	8004652 <sendto+0xfa>
 8004646:	7dfb      	ldrb	r3, [r7, #23]
 8004648:	2b32      	cmp	r3, #50	; 0x32
 800464a:	d002      	beq.n	8004652 <sendto+0xfa>
 800464c:	f06f 0306 	mvn.w	r3, #6
 8004650:	e0b1      	b.n	80047b6 <sendto+0x25e>
//#else
//   if(tmp != SOCK_MACRAW && tmp != SOCK_UDP) return SOCKERR_SOCKSTATUS;
//#endif
      
   setSn_DIPR(sn,addr);
 8004652:	7bfb      	ldrb	r3, [r7, #15]
 8004654:	009b      	lsls	r3, r3, #2
 8004656:	3301      	adds	r3, #1
 8004658:	00db      	lsls	r3, r3, #3
 800465a:	f503 6340 	add.w	r3, r3, #3072	; 0xc00
 800465e:	2204      	movs	r2, #4
 8004660:	6879      	ldr	r1, [r7, #4]
 8004662:	4618      	mov	r0, r3
 8004664:	f001 f882 	bl	800576c <WIZCHIP_WRITE_BUF>
   setSn_DPORT(sn,port);      
 8004668:	7bfb      	ldrb	r3, [r7, #15]
 800466a:	009b      	lsls	r3, r3, #2
 800466c:	3301      	adds	r3, #1
 800466e:	00db      	lsls	r3, r3, #3
 8004670:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004674:	461a      	mov	r2, r3
 8004676:	8c3b      	ldrh	r3, [r7, #32]
 8004678:	0a1b      	lsrs	r3, r3, #8
 800467a:	b29b      	uxth	r3, r3
 800467c:	b2db      	uxtb	r3, r3
 800467e:	4619      	mov	r1, r3
 8004680:	4610      	mov	r0, r2
 8004682:	f000 ffc5 	bl	8005610 <WIZCHIP_WRITE>
 8004686:	7bfb      	ldrb	r3, [r7, #15]
 8004688:	009b      	lsls	r3, r3, #2
 800468a:	3301      	adds	r3, #1
 800468c:	00db      	lsls	r3, r3, #3
 800468e:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 8004692:	461a      	mov	r2, r3
 8004694:	8c3b      	ldrh	r3, [r7, #32]
 8004696:	b2db      	uxtb	r3, r3
 8004698:	4619      	mov	r1, r3
 800469a:	4610      	mov	r0, r2
 800469c:	f000 ffb8 	bl	8005610 <WIZCHIP_WRITE>
   freesize = getSn_TxMAX(sn);
 80046a0:	7bfb      	ldrb	r3, [r7, #15]
 80046a2:	009b      	lsls	r3, r3, #2
 80046a4:	3301      	adds	r3, #1
 80046a6:	00db      	lsls	r3, r3, #3
 80046a8:	f503 53f8 	add.w	r3, r3, #7936	; 0x1f00
 80046ac:	4618      	mov	r0, r3
 80046ae:	f000 ff63 	bl	8005578 <WIZCHIP_READ>
 80046b2:	4603      	mov	r3, r0
 80046b4:	b29b      	uxth	r3, r3
 80046b6:	029b      	lsls	r3, r3, #10
 80046b8:	82bb      	strh	r3, [r7, #20]
   if (len > freesize) len = freesize; // check size not to exceed MAX size.
 80046ba:	89ba      	ldrh	r2, [r7, #12]
 80046bc:	8abb      	ldrh	r3, [r7, #20]
 80046be:	429a      	cmp	r2, r3
 80046c0:	d901      	bls.n	80046c6 <sendto+0x16e>
 80046c2:	8abb      	ldrh	r3, [r7, #20]
 80046c4:	81bb      	strh	r3, [r7, #12]
   while(1)
   {
      freesize = getSn_TX_FSR(sn);
 80046c6:	7bfb      	ldrb	r3, [r7, #15]
 80046c8:	4618      	mov	r0, r3
 80046ca:	f001 f8af 	bl	800582c <getSn_TX_FSR>
 80046ce:	4603      	mov	r3, r0
 80046d0:	82bb      	strh	r3, [r7, #20]
      if(getSn_SR(sn) == SOCK_CLOSED) return SOCKERR_SOCKCLOSED;
 80046d2:	7bfb      	ldrb	r3, [r7, #15]
 80046d4:	009b      	lsls	r3, r3, #2
 80046d6:	3301      	adds	r3, #1
 80046d8:	00db      	lsls	r3, r3, #3
 80046da:	f503 7340 	add.w	r3, r3, #768	; 0x300
 80046de:	4618      	mov	r0, r3
 80046e0:	f000 ff4a 	bl	8005578 <WIZCHIP_READ>
 80046e4:	4603      	mov	r3, r0
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d102      	bne.n	80046f0 <sendto+0x198>
 80046ea:	f06f 0303 	mvn.w	r3, #3
 80046ee:	e062      	b.n	80047b6 <sendto+0x25e>
      if( (sock_io_mode & (1<<sn)) && (len > freesize) ) return SOCK_BUSY;
 80046f0:	4b33      	ldr	r3, [pc, #204]	; (80047c0 <sendto+0x268>)
 80046f2:	881b      	ldrh	r3, [r3, #0]
 80046f4:	461a      	mov	r2, r3
 80046f6:	7bfb      	ldrb	r3, [r7, #15]
 80046f8:	fa42 f303 	asr.w	r3, r2, r3
 80046fc:	f003 0301 	and.w	r3, r3, #1
 8004700:	2b00      	cmp	r3, #0
 8004702:	d005      	beq.n	8004710 <sendto+0x1b8>
 8004704:	89ba      	ldrh	r2, [r7, #12]
 8004706:	8abb      	ldrh	r3, [r7, #20]
 8004708:	429a      	cmp	r2, r3
 800470a:	d901      	bls.n	8004710 <sendto+0x1b8>
 800470c:	2300      	movs	r3, #0
 800470e:	e052      	b.n	80047b6 <sendto+0x25e>
      if(len <= freesize) break;
 8004710:	89ba      	ldrh	r2, [r7, #12]
 8004712:	8abb      	ldrh	r3, [r7, #20]
 8004714:	429a      	cmp	r2, r3
 8004716:	d900      	bls.n	800471a <sendto+0x1c2>
      freesize = getSn_TX_FSR(sn);
 8004718:	e7d5      	b.n	80046c6 <sendto+0x16e>
      if(len <= freesize) break;
 800471a:	bf00      	nop
   };
	wiz_send_data(sn, buf, len);
 800471c:	89ba      	ldrh	r2, [r7, #12]
 800471e:	7bfb      	ldrb	r3, [r7, #15]
 8004720:	68b9      	ldr	r1, [r7, #8]
 8004722:	4618      	mov	r0, r3
 8004724:	f001 f918 	bl	8005958 <wiz_send_data>
//A20150601 : For W5300
#if _WIZCHIP_ == 5300
   setSn_TX_WRSR(sn, len);
#endif
//   
	setSn_CR(sn,Sn_CR_SEND);
 8004728:	7bfb      	ldrb	r3, [r7, #15]
 800472a:	009b      	lsls	r3, r3, #2
 800472c:	3301      	adds	r3, #1
 800472e:	00db      	lsls	r3, r3, #3
 8004730:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8004734:	2120      	movs	r1, #32
 8004736:	4618      	mov	r0, r3
 8004738:	f000 ff6a 	bl	8005610 <WIZCHIP_WRITE>
	/* wait to process the command... */
	while(getSn_CR(sn));
 800473c:	bf00      	nop
 800473e:	7bfb      	ldrb	r3, [r7, #15]
 8004740:	009b      	lsls	r3, r3, #2
 8004742:	3301      	adds	r3, #1
 8004744:	00db      	lsls	r3, r3, #3
 8004746:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800474a:	4618      	mov	r0, r3
 800474c:	f000 ff14 	bl	8005578 <WIZCHIP_READ>
 8004750:	4603      	mov	r3, r0
 8004752:	2b00      	cmp	r3, #0
 8004754:	d1f3      	bne.n	800473e <sendto+0x1e6>
   while(1)
   {
      tmp = getSn_IR(sn);
 8004756:	7bfb      	ldrb	r3, [r7, #15]
 8004758:	009b      	lsls	r3, r3, #2
 800475a:	3301      	adds	r3, #1
 800475c:	00db      	lsls	r3, r3, #3
 800475e:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8004762:	4618      	mov	r0, r3
 8004764:	f000 ff08 	bl	8005578 <WIZCHIP_READ>
 8004768:	4603      	mov	r3, r0
 800476a:	f003 031f 	and.w	r3, r3, #31
 800476e:	75fb      	strb	r3, [r7, #23]
      if(tmp & Sn_IR_SENDOK)
 8004770:	7dfb      	ldrb	r3, [r7, #23]
 8004772:	f003 0310 	and.w	r3, r3, #16
 8004776:	2b00      	cmp	r3, #0
 8004778:	d00c      	beq.n	8004794 <sendto+0x23c>
      {
         setSn_IR(sn, Sn_IR_SENDOK);
 800477a:	7bfb      	ldrb	r3, [r7, #15]
 800477c:	009b      	lsls	r3, r3, #2
 800477e:	3301      	adds	r3, #1
 8004780:	00db      	lsls	r3, r3, #3
 8004782:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8004786:	2110      	movs	r1, #16
 8004788:	4618      	mov	r0, r3
 800478a:	f000 ff41 	bl	8005610 <WIZCHIP_WRITE>
         break;
 800478e:	bf00      	nop
   #if _WIZCHIP_ < 5500   //M20150401 : for WIZCHIP Errata #4, #5 (ARP errata)
      if(taddr) setSUBR((uint8_t*)&taddr);
   #endif
   //M20150409 : Explicit Type Casting
   //return len;
   return (int32_t)len;
 8004790:	89bb      	ldrh	r3, [r7, #12]
 8004792:	e010      	b.n	80047b6 <sendto+0x25e>
      else if(tmp & Sn_IR_TIMEOUT)
 8004794:	7dfb      	ldrb	r3, [r7, #23]
 8004796:	f003 0308 	and.w	r3, r3, #8
 800479a:	2b00      	cmp	r3, #0
 800479c:	d0db      	beq.n	8004756 <sendto+0x1fe>
         setSn_IR(sn, Sn_IR_TIMEOUT);
 800479e:	7bfb      	ldrb	r3, [r7, #15]
 80047a0:	009b      	lsls	r3, r3, #2
 80047a2:	3301      	adds	r3, #1
 80047a4:	00db      	lsls	r3, r3, #3
 80047a6:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80047aa:	2108      	movs	r1, #8
 80047ac:	4618      	mov	r0, r3
 80047ae:	f000 ff2f 	bl	8005610 <WIZCHIP_WRITE>
         return SOCKERR_TIMEOUT;
 80047b2:	f06f 030c 	mvn.w	r3, #12
}
 80047b6:	4618      	mov	r0, r3
 80047b8:	3718      	adds	r7, #24
 80047ba:	46bd      	mov	sp, r7
 80047bc:	bd80      	pop	{r7, pc}
 80047be:	bf00      	nop
 80047c0:	200002c8 	.word	0x200002c8

080047c4 <recvfrom>:



int32_t recvfrom(uint8_t sn, uint8_t * buf, uint16_t len, uint8_t * addr, uint16_t *port)
{
 80047c4:	b580      	push	{r7, lr}
 80047c6:	b088      	sub	sp, #32
 80047c8:	af00      	add	r7, sp, #0
 80047ca:	60b9      	str	r1, [r7, #8]
 80047cc:	607b      	str	r3, [r7, #4]
 80047ce:	4603      	mov	r3, r0
 80047d0:	73fb      	strb	r3, [r7, #15]
 80047d2:	4613      	mov	r3, r2
 80047d4:	81bb      	strh	r3, [r7, #12]
#else   
   uint8_t  mr;
#endif
//   
   uint8_t  head[8];
	uint16_t pack_len=0;
 80047d6:	2300      	movs	r3, #0
 80047d8:	83fb      	strh	r3, [r7, #30]

   CHECK_SOCKNUM();
 80047da:	7bfb      	ldrb	r3, [r7, #15]
 80047dc:	2b08      	cmp	r3, #8
 80047de:	d902      	bls.n	80047e6 <recvfrom+0x22>
 80047e0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80047e4:	e1d4      	b.n	8004b90 <recvfrom+0x3cc>
//A20150601
#if _WIZCHIP_ == 5300
   mr1 = getMR();
#endif   

   switch((mr=getSn_MR(sn)) & 0x0F)
 80047e6:	7bfb      	ldrb	r3, [r7, #15]
 80047e8:	009b      	lsls	r3, r3, #2
 80047ea:	3301      	adds	r3, #1
 80047ec:	00db      	lsls	r3, r3, #3
 80047ee:	4618      	mov	r0, r3
 80047f0:	f000 fec2 	bl	8005578 <WIZCHIP_READ>
 80047f4:	4603      	mov	r3, r0
 80047f6:	777b      	strb	r3, [r7, #29]
 80047f8:	7f7b      	ldrb	r3, [r7, #29]
 80047fa:	f003 030f 	and.w	r3, r3, #15
 80047fe:	3b02      	subs	r3, #2
 8004800:	2b02      	cmp	r3, #2
 8004802:	d902      	bls.n	800480a <recvfrom+0x46>
   #if ( _WIZCHIP_ < 5200 )         
      case Sn_MR_PPPoE:
         break;
   #endif
      default:
         return SOCKERR_SOCKMODE;
 8004804:	f06f 0304 	mvn.w	r3, #4
 8004808:	e1c2      	b.n	8004b90 <recvfrom+0x3cc>
         break;
 800480a:	bf00      	nop
   }
   CHECK_SOCKDATA();
 800480c:	89bb      	ldrh	r3, [r7, #12]
 800480e:	2b00      	cmp	r3, #0
 8004810:	d102      	bne.n	8004818 <recvfrom+0x54>
 8004812:	f06f 030d 	mvn.w	r3, #13
 8004816:	e1bb      	b.n	8004b90 <recvfrom+0x3cc>
   if(sock_remained_size[sn] == 0)
 8004818:	7bfb      	ldrb	r3, [r7, #15]
 800481a:	4a88      	ldr	r2, [pc, #544]	; (8004a3c <recvfrom+0x278>)
 800481c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004820:	2b00      	cmp	r3, #0
 8004822:	d128      	bne.n	8004876 <recvfrom+0xb2>
   {
      while(1)
      {
         pack_len = getSn_RX_RSR(sn);
 8004824:	7bfb      	ldrb	r3, [r7, #15]
 8004826:	4618      	mov	r0, r3
 8004828:	f001 f84b 	bl	80058c2 <getSn_RX_RSR>
 800482c:	4603      	mov	r3, r0
 800482e:	83fb      	strh	r3, [r7, #30]
         if(getSn_SR(sn) == SOCK_CLOSED) return SOCKERR_SOCKCLOSED;
 8004830:	7bfb      	ldrb	r3, [r7, #15]
 8004832:	009b      	lsls	r3, r3, #2
 8004834:	3301      	adds	r3, #1
 8004836:	00db      	lsls	r3, r3, #3
 8004838:	f503 7340 	add.w	r3, r3, #768	; 0x300
 800483c:	4618      	mov	r0, r3
 800483e:	f000 fe9b 	bl	8005578 <WIZCHIP_READ>
 8004842:	4603      	mov	r3, r0
 8004844:	2b00      	cmp	r3, #0
 8004846:	d102      	bne.n	800484e <recvfrom+0x8a>
 8004848:	f06f 0303 	mvn.w	r3, #3
 800484c:	e1a0      	b.n	8004b90 <recvfrom+0x3cc>
         if( (sock_io_mode & (1<<sn)) && (pack_len == 0) ) return SOCK_BUSY;
 800484e:	4b7c      	ldr	r3, [pc, #496]	; (8004a40 <recvfrom+0x27c>)
 8004850:	881b      	ldrh	r3, [r3, #0]
 8004852:	461a      	mov	r2, r3
 8004854:	7bfb      	ldrb	r3, [r7, #15]
 8004856:	fa42 f303 	asr.w	r3, r2, r3
 800485a:	f003 0301 	and.w	r3, r3, #1
 800485e:	2b00      	cmp	r3, #0
 8004860:	d004      	beq.n	800486c <recvfrom+0xa8>
 8004862:	8bfb      	ldrh	r3, [r7, #30]
 8004864:	2b00      	cmp	r3, #0
 8004866:	d101      	bne.n	800486c <recvfrom+0xa8>
 8004868:	2300      	movs	r3, #0
 800486a:	e191      	b.n	8004b90 <recvfrom+0x3cc>
         if(pack_len != 0) break;
 800486c:	8bfb      	ldrh	r3, [r7, #30]
 800486e:	2b00      	cmp	r3, #0
 8004870:	d100      	bne.n	8004874 <recvfrom+0xb0>
         pack_len = getSn_RX_RSR(sn);
 8004872:	e7d7      	b.n	8004824 <recvfrom+0x60>
         if(pack_len != 0) break;
 8004874:	bf00      	nop
      };
   }
//D20150601 : Move it to bottom
// sock_pack_info[sn] = PACK_COMPLETED;
	switch (mr & 0x07)
 8004876:	7f7b      	ldrb	r3, [r7, #29]
 8004878:	f003 0307 	and.w	r3, r3, #7
 800487c:	2b04      	cmp	r3, #4
 800487e:	d079      	beq.n	8004974 <recvfrom+0x1b0>
 8004880:	2b04      	cmp	r3, #4
 8004882:	f300 8142 	bgt.w	8004b0a <recvfrom+0x346>
 8004886:	2b02      	cmp	r3, #2
 8004888:	d003      	beq.n	8004892 <recvfrom+0xce>
 800488a:	2b03      	cmp	r3, #3
 800488c:	f000 80dc 	beq.w	8004a48 <recvfrom+0x284>
 8004890:	e13b      	b.n	8004b0a <recvfrom+0x346>
	{
	   case Sn_MR_UDP :
	      if(sock_remained_size[sn] == 0)
 8004892:	7bfb      	ldrb	r3, [r7, #15]
 8004894:	4a69      	ldr	r2, [pc, #420]	; (8004a3c <recvfrom+0x278>)
 8004896:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800489a:	2b00      	cmp	r3, #0
 800489c:	d152      	bne.n	8004944 <recvfrom+0x180>
	      {
   			wiz_recv_data(sn, head, 8);
 800489e:	f107 0114 	add.w	r1, r7, #20
 80048a2:	7bfb      	ldrb	r3, [r7, #15]
 80048a4:	2208      	movs	r2, #8
 80048a6:	4618      	mov	r0, r3
 80048a8:	f001 f8b2 	bl	8005a10 <wiz_recv_data>
   			setSn_CR(sn,Sn_CR_RECV);
 80048ac:	7bfb      	ldrb	r3, [r7, #15]
 80048ae:	009b      	lsls	r3, r3, #2
 80048b0:	3301      	adds	r3, #1
 80048b2:	00db      	lsls	r3, r3, #3
 80048b4:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80048b8:	2140      	movs	r1, #64	; 0x40
 80048ba:	4618      	mov	r0, r3
 80048bc:	f000 fea8 	bl	8005610 <WIZCHIP_WRITE>
   			while(getSn_CR(sn));
 80048c0:	bf00      	nop
 80048c2:	7bfb      	ldrb	r3, [r7, #15]
 80048c4:	009b      	lsls	r3, r3, #2
 80048c6:	3301      	adds	r3, #1
 80048c8:	00db      	lsls	r3, r3, #3
 80048ca:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80048ce:	4618      	mov	r0, r3
 80048d0:	f000 fe52 	bl	8005578 <WIZCHIP_READ>
 80048d4:	4603      	mov	r3, r0
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d1f3      	bne.n	80048c2 <recvfrom+0xfe>
      			sock_remained_size[sn] = (sock_remained_size[sn] << 8) + head[6];
   		   }
            else
            {
         #endif
               addr[0] = head[0];
 80048da:	7d3a      	ldrb	r2, [r7, #20]
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	701a      	strb	r2, [r3, #0]
      			addr[1] = head[1];
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	3301      	adds	r3, #1
 80048e4:	7d7a      	ldrb	r2, [r7, #21]
 80048e6:	701a      	strb	r2, [r3, #0]
      			addr[2] = head[2];
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	3302      	adds	r3, #2
 80048ec:	7dba      	ldrb	r2, [r7, #22]
 80048ee:	701a      	strb	r2, [r3, #0]
      			addr[3] = head[3];
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	3303      	adds	r3, #3
 80048f4:	7dfa      	ldrb	r2, [r7, #23]
 80048f6:	701a      	strb	r2, [r3, #0]
      			*port = head[4];
 80048f8:	7e3b      	ldrb	r3, [r7, #24]
 80048fa:	b29a      	uxth	r2, r3
 80048fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048fe:	801a      	strh	r2, [r3, #0]
      			*port = (*port << 8) + head[5];
 8004900:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004902:	881b      	ldrh	r3, [r3, #0]
 8004904:	021b      	lsls	r3, r3, #8
 8004906:	b29a      	uxth	r2, r3
 8004908:	7e7b      	ldrb	r3, [r7, #25]
 800490a:	b29b      	uxth	r3, r3
 800490c:	4413      	add	r3, r2
 800490e:	b29a      	uxth	r2, r3
 8004910:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004912:	801a      	strh	r2, [r3, #0]
      			sock_remained_size[sn] = head[6];
 8004914:	7eba      	ldrb	r2, [r7, #26]
 8004916:	7bfb      	ldrb	r3, [r7, #15]
 8004918:	b291      	uxth	r1, r2
 800491a:	4a48      	ldr	r2, [pc, #288]	; (8004a3c <recvfrom+0x278>)
 800491c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
      			sock_remained_size[sn] = (sock_remained_size[sn] << 8) + head[7];
 8004920:	7bfb      	ldrb	r3, [r7, #15]
 8004922:	4a46      	ldr	r2, [pc, #280]	; (8004a3c <recvfrom+0x278>)
 8004924:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004928:	021b      	lsls	r3, r3, #8
 800492a:	b299      	uxth	r1, r3
 800492c:	7efb      	ldrb	r3, [r7, #27]
 800492e:	b29a      	uxth	r2, r3
 8004930:	7bfb      	ldrb	r3, [r7, #15]
 8004932:	440a      	add	r2, r1
 8004934:	b291      	uxth	r1, r2
 8004936:	4a41      	ldr	r2, [pc, #260]	; (8004a3c <recvfrom+0x278>)
 8004938:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
         #if _WIZCHIP_ == 5300
            }
         #endif
   			sock_pack_info[sn] = PACK_FIRST;
 800493c:	7bfb      	ldrb	r3, [r7, #15]
 800493e:	4a41      	ldr	r2, [pc, #260]	; (8004a44 <recvfrom+0x280>)
 8004940:	2180      	movs	r1, #128	; 0x80
 8004942:	54d1      	strb	r1, [r2, r3]
   	   }
			if(len < sock_remained_size[sn]) pack_len = len;
 8004944:	7bfb      	ldrb	r3, [r7, #15]
 8004946:	4a3d      	ldr	r2, [pc, #244]	; (8004a3c <recvfrom+0x278>)
 8004948:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800494c:	89ba      	ldrh	r2, [r7, #12]
 800494e:	429a      	cmp	r2, r3
 8004950:	d202      	bcs.n	8004958 <recvfrom+0x194>
 8004952:	89bb      	ldrh	r3, [r7, #12]
 8004954:	83fb      	strh	r3, [r7, #30]
 8004956:	e004      	b.n	8004962 <recvfrom+0x19e>
			else pack_len = sock_remained_size[sn];
 8004958:	7bfb      	ldrb	r3, [r7, #15]
 800495a:	4a38      	ldr	r2, [pc, #224]	; (8004a3c <recvfrom+0x278>)
 800495c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004960:	83fb      	strh	r3, [r7, #30]
			//A20150601 : For W5300
			len = pack_len;
 8004962:	8bfb      	ldrh	r3, [r7, #30]
 8004964:	81bb      	strh	r3, [r7, #12]
			   }
			#endif
			//
			// Need to packet length check (default 1472)
			//
   		wiz_recv_data(sn, buf, pack_len); // data copy.
 8004966:	8bfa      	ldrh	r2, [r7, #30]
 8004968:	7bfb      	ldrb	r3, [r7, #15]
 800496a:	68b9      	ldr	r1, [r7, #8]
 800496c:	4618      	mov	r0, r3
 800496e:	f001 f84f 	bl	8005a10 <wiz_recv_data>
			break;
 8004972:	e0d6      	b.n	8004b22 <recvfrom+0x35e>
	   case Sn_MR_MACRAW :
	      if(sock_remained_size[sn] == 0)
 8004974:	7bfb      	ldrb	r3, [r7, #15]
 8004976:	4a31      	ldr	r2, [pc, #196]	; (8004a3c <recvfrom+0x278>)
 8004978:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800497c:	2b00      	cmp	r3, #0
 800497e:	d146      	bne.n	8004a0e <recvfrom+0x24a>
	      {
   			wiz_recv_data(sn, head, 2);
 8004980:	f107 0114 	add.w	r1, r7, #20
 8004984:	7bfb      	ldrb	r3, [r7, #15]
 8004986:	2202      	movs	r2, #2
 8004988:	4618      	mov	r0, r3
 800498a:	f001 f841 	bl	8005a10 <wiz_recv_data>
   			setSn_CR(sn,Sn_CR_RECV);
 800498e:	7bfb      	ldrb	r3, [r7, #15]
 8004990:	009b      	lsls	r3, r3, #2
 8004992:	3301      	adds	r3, #1
 8004994:	00db      	lsls	r3, r3, #3
 8004996:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800499a:	2140      	movs	r1, #64	; 0x40
 800499c:	4618      	mov	r0, r3
 800499e:	f000 fe37 	bl	8005610 <WIZCHIP_WRITE>
   			while(getSn_CR(sn));
 80049a2:	bf00      	nop
 80049a4:	7bfb      	ldrb	r3, [r7, #15]
 80049a6:	009b      	lsls	r3, r3, #2
 80049a8:	3301      	adds	r3, #1
 80049aa:	00db      	lsls	r3, r3, #3
 80049ac:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80049b0:	4618      	mov	r0, r3
 80049b2:	f000 fde1 	bl	8005578 <WIZCHIP_READ>
 80049b6:	4603      	mov	r3, r0
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d1f3      	bne.n	80049a4 <recvfrom+0x1e0>
   			// read peer's IP address, port number & packet length
    			sock_remained_size[sn] = head[0];
 80049bc:	7d3a      	ldrb	r2, [r7, #20]
 80049be:	7bfb      	ldrb	r3, [r7, #15]
 80049c0:	b291      	uxth	r1, r2
 80049c2:	4a1e      	ldr	r2, [pc, #120]	; (8004a3c <recvfrom+0x278>)
 80049c4:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
   			sock_remained_size[sn] = (sock_remained_size[sn] <<8) + head[1] -2;
 80049c8:	7bfb      	ldrb	r3, [r7, #15]
 80049ca:	4a1c      	ldr	r2, [pc, #112]	; (8004a3c <recvfrom+0x278>)
 80049cc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80049d0:	021b      	lsls	r3, r3, #8
 80049d2:	b29a      	uxth	r2, r3
 80049d4:	7d7b      	ldrb	r3, [r7, #21]
 80049d6:	b29b      	uxth	r3, r3
 80049d8:	4413      	add	r3, r2
 80049da:	b29a      	uxth	r2, r3
 80049dc:	7bfb      	ldrb	r3, [r7, #15]
 80049de:	3a02      	subs	r2, #2
 80049e0:	b291      	uxth	r1, r2
 80049e2:	4a16      	ldr	r2, [pc, #88]	; (8004a3c <recvfrom+0x278>)
 80049e4:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
   			if(sock_remained_size[sn] & 0x01)
   				sock_remained_size[sn] = sock_remained_size[sn] + 1 - 4;
   			else
   				sock_remained_size[sn] -= 4;
			#endif
   			if(sock_remained_size[sn] > 1514) 
 80049e8:	7bfb      	ldrb	r3, [r7, #15]
 80049ea:	4a14      	ldr	r2, [pc, #80]	; (8004a3c <recvfrom+0x278>)
 80049ec:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80049f0:	f240 52ea 	movw	r2, #1514	; 0x5ea
 80049f4:	4293      	cmp	r3, r2
 80049f6:	d906      	bls.n	8004a06 <recvfrom+0x242>
   			{
   			   close(sn);
 80049f8:	7bfb      	ldrb	r3, [r7, #15]
 80049fa:	4618      	mov	r0, r3
 80049fc:	f7ff fab2 	bl	8003f64 <close>
   			   return SOCKFATAL_PACKLEN;
 8004a00:	f46f 737a 	mvn.w	r3, #1000	; 0x3e8
 8004a04:	e0c4      	b.n	8004b90 <recvfrom+0x3cc>
   			}
   			sock_pack_info[sn] = PACK_FIRST;
 8004a06:	7bfb      	ldrb	r3, [r7, #15]
 8004a08:	4a0e      	ldr	r2, [pc, #56]	; (8004a44 <recvfrom+0x280>)
 8004a0a:	2180      	movs	r1, #128	; 0x80
 8004a0c:	54d1      	strb	r1, [r2, r3]
   	   }
			if(len < sock_remained_size[sn]) pack_len = len;
 8004a0e:	7bfb      	ldrb	r3, [r7, #15]
 8004a10:	4a0a      	ldr	r2, [pc, #40]	; (8004a3c <recvfrom+0x278>)
 8004a12:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004a16:	89ba      	ldrh	r2, [r7, #12]
 8004a18:	429a      	cmp	r2, r3
 8004a1a:	d202      	bcs.n	8004a22 <recvfrom+0x25e>
 8004a1c:	89bb      	ldrh	r3, [r7, #12]
 8004a1e:	83fb      	strh	r3, [r7, #30]
 8004a20:	e004      	b.n	8004a2c <recvfrom+0x268>
			else pack_len = sock_remained_size[sn];
 8004a22:	7bfb      	ldrb	r3, [r7, #15]
 8004a24:	4a05      	ldr	r2, [pc, #20]	; (8004a3c <recvfrom+0x278>)
 8004a26:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004a2a:	83fb      	strh	r3, [r7, #30]
			wiz_recv_data(sn,buf,pack_len);
 8004a2c:	8bfa      	ldrh	r2, [r7, #30]
 8004a2e:	7bfb      	ldrb	r3, [r7, #15]
 8004a30:	68b9      	ldr	r1, [r7, #8]
 8004a32:	4618      	mov	r0, r3
 8004a34:	f000 ffec 	bl	8005a10 <wiz_recv_data>
		   break;
 8004a38:	e073      	b.n	8004b22 <recvfrom+0x35e>
 8004a3a:	bf00      	nop
 8004a3c:	200002cc 	.word	0x200002cc
 8004a40:	200002c8 	.word	0x200002c8
 8004a44:	200002dc 	.word	0x200002dc
   //#if ( _WIZCHIP_ < 5200 )
		case Sn_MR_IPRAW:
		   if(sock_remained_size[sn] == 0)
 8004a48:	7bfb      	ldrb	r3, [r7, #15]
 8004a4a:	4a53      	ldr	r2, [pc, #332]	; (8004b98 <recvfrom+0x3d4>)
 8004a4c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	d144      	bne.n	8004ade <recvfrom+0x31a>
		   {
   			wiz_recv_data(sn, head, 6);
 8004a54:	f107 0114 	add.w	r1, r7, #20
 8004a58:	7bfb      	ldrb	r3, [r7, #15]
 8004a5a:	2206      	movs	r2, #6
 8004a5c:	4618      	mov	r0, r3
 8004a5e:	f000 ffd7 	bl	8005a10 <wiz_recv_data>
   			setSn_CR(sn,Sn_CR_RECV);
 8004a62:	7bfb      	ldrb	r3, [r7, #15]
 8004a64:	009b      	lsls	r3, r3, #2
 8004a66:	3301      	adds	r3, #1
 8004a68:	00db      	lsls	r3, r3, #3
 8004a6a:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8004a6e:	2140      	movs	r1, #64	; 0x40
 8004a70:	4618      	mov	r0, r3
 8004a72:	f000 fdcd 	bl	8005610 <WIZCHIP_WRITE>
   			while(getSn_CR(sn));
 8004a76:	bf00      	nop
 8004a78:	7bfb      	ldrb	r3, [r7, #15]
 8004a7a:	009b      	lsls	r3, r3, #2
 8004a7c:	3301      	adds	r3, #1
 8004a7e:	00db      	lsls	r3, r3, #3
 8004a80:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8004a84:	4618      	mov	r0, r3
 8004a86:	f000 fd77 	bl	8005578 <WIZCHIP_READ>
 8004a8a:	4603      	mov	r3, r0
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d1f3      	bne.n	8004a78 <recvfrom+0x2b4>
   			addr[0] = head[0];
 8004a90:	7d3a      	ldrb	r2, [r7, #20]
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	701a      	strb	r2, [r3, #0]
   			addr[1] = head[1];
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	3301      	adds	r3, #1
 8004a9a:	7d7a      	ldrb	r2, [r7, #21]
 8004a9c:	701a      	strb	r2, [r3, #0]
   			addr[2] = head[2];
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	3302      	adds	r3, #2
 8004aa2:	7dba      	ldrb	r2, [r7, #22]
 8004aa4:	701a      	strb	r2, [r3, #0]
   			addr[3] = head[3];
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	3303      	adds	r3, #3
 8004aaa:	7dfa      	ldrb	r2, [r7, #23]
 8004aac:	701a      	strb	r2, [r3, #0]
   			sock_remained_size[sn] = head[4];
 8004aae:	7e3a      	ldrb	r2, [r7, #24]
 8004ab0:	7bfb      	ldrb	r3, [r7, #15]
 8004ab2:	b291      	uxth	r1, r2
 8004ab4:	4a38      	ldr	r2, [pc, #224]	; (8004b98 <recvfrom+0x3d4>)
 8004ab6:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
   			//M20150401 : For Typing Error
   			//sock_remaiend_size[sn] = (sock_remained_size[sn] << 8) + head[5];
   			sock_remained_size[sn] = (sock_remained_size[sn] << 8) + head[5];
 8004aba:	7bfb      	ldrb	r3, [r7, #15]
 8004abc:	4a36      	ldr	r2, [pc, #216]	; (8004b98 <recvfrom+0x3d4>)
 8004abe:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004ac2:	021b      	lsls	r3, r3, #8
 8004ac4:	b299      	uxth	r1, r3
 8004ac6:	7e7b      	ldrb	r3, [r7, #25]
 8004ac8:	b29a      	uxth	r2, r3
 8004aca:	7bfb      	ldrb	r3, [r7, #15]
 8004acc:	440a      	add	r2, r1
 8004ace:	b291      	uxth	r1, r2
 8004ad0:	4a31      	ldr	r2, [pc, #196]	; (8004b98 <recvfrom+0x3d4>)
 8004ad2:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
   			sock_pack_info[sn] = PACK_FIRST;
 8004ad6:	7bfb      	ldrb	r3, [r7, #15]
 8004ad8:	4a30      	ldr	r2, [pc, #192]	; (8004b9c <recvfrom+0x3d8>)
 8004ada:	2180      	movs	r1, #128	; 0x80
 8004adc:	54d1      	strb	r1, [r2, r3]
         }
			//
			// Need to packet length check
			//
			if(len < sock_remained_size[sn]) pack_len = len;
 8004ade:	7bfb      	ldrb	r3, [r7, #15]
 8004ae0:	4a2d      	ldr	r2, [pc, #180]	; (8004b98 <recvfrom+0x3d4>)
 8004ae2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004ae6:	89ba      	ldrh	r2, [r7, #12]
 8004ae8:	429a      	cmp	r2, r3
 8004aea:	d202      	bcs.n	8004af2 <recvfrom+0x32e>
 8004aec:	89bb      	ldrh	r3, [r7, #12]
 8004aee:	83fb      	strh	r3, [r7, #30]
 8004af0:	e004      	b.n	8004afc <recvfrom+0x338>
			else pack_len = sock_remained_size[sn];
 8004af2:	7bfb      	ldrb	r3, [r7, #15]
 8004af4:	4a28      	ldr	r2, [pc, #160]	; (8004b98 <recvfrom+0x3d4>)
 8004af6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004afa:	83fb      	strh	r3, [r7, #30]
   		wiz_recv_data(sn, buf, pack_len); // data copy.
 8004afc:	8bfa      	ldrh	r2, [r7, #30]
 8004afe:	7bfb      	ldrb	r3, [r7, #15]
 8004b00:	68b9      	ldr	r1, [r7, #8]
 8004b02:	4618      	mov	r0, r3
 8004b04:	f000 ff84 	bl	8005a10 <wiz_recv_data>
			break;
 8004b08:	e00b      	b.n	8004b22 <recvfrom+0x35e>
   //#endif
      default:
         wiz_recv_ignore(sn, pack_len); // data copy.
 8004b0a:	8bfa      	ldrh	r2, [r7, #30]
 8004b0c:	7bfb      	ldrb	r3, [r7, #15]
 8004b0e:	4611      	mov	r1, r2
 8004b10:	4618      	mov	r0, r3
 8004b12:	f000 ffd9 	bl	8005ac8 <wiz_recv_ignore>
         sock_remained_size[sn] = pack_len;
 8004b16:	7bfb      	ldrb	r3, [r7, #15]
 8004b18:	491f      	ldr	r1, [pc, #124]	; (8004b98 <recvfrom+0x3d4>)
 8004b1a:	8bfa      	ldrh	r2, [r7, #30]
 8004b1c:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
         break;
 8004b20:	bf00      	nop
   }
	setSn_CR(sn,Sn_CR_RECV);
 8004b22:	7bfb      	ldrb	r3, [r7, #15]
 8004b24:	009b      	lsls	r3, r3, #2
 8004b26:	3301      	adds	r3, #1
 8004b28:	00db      	lsls	r3, r3, #3
 8004b2a:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8004b2e:	2140      	movs	r1, #64	; 0x40
 8004b30:	4618      	mov	r0, r3
 8004b32:	f000 fd6d 	bl	8005610 <WIZCHIP_WRITE>
	/* wait to process the command... */
	while(getSn_CR(sn)) ;
 8004b36:	bf00      	nop
 8004b38:	7bfb      	ldrb	r3, [r7, #15]
 8004b3a:	009b      	lsls	r3, r3, #2
 8004b3c:	3301      	adds	r3, #1
 8004b3e:	00db      	lsls	r3, r3, #3
 8004b40:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8004b44:	4618      	mov	r0, r3
 8004b46:	f000 fd17 	bl	8005578 <WIZCHIP_READ>
 8004b4a:	4603      	mov	r3, r0
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d1f3      	bne.n	8004b38 <recvfrom+0x374>
	sock_remained_size[sn] -= pack_len;
 8004b50:	7bfb      	ldrb	r3, [r7, #15]
 8004b52:	4a11      	ldr	r2, [pc, #68]	; (8004b98 <recvfrom+0x3d4>)
 8004b54:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8004b58:	7bfb      	ldrb	r3, [r7, #15]
 8004b5a:	8bfa      	ldrh	r2, [r7, #30]
 8004b5c:	1a8a      	subs	r2, r1, r2
 8004b5e:	b291      	uxth	r1, r2
 8004b60:	4a0d      	ldr	r2, [pc, #52]	; (8004b98 <recvfrom+0x3d4>)
 8004b62:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	//M20150601 : 
	//if(sock_remained_size[sn] != 0) sock_pack_info[sn] |= 0x01;
	if(sock_remained_size[sn] != 0)
 8004b66:	7bfb      	ldrb	r3, [r7, #15]
 8004b68:	4a0b      	ldr	r2, [pc, #44]	; (8004b98 <recvfrom+0x3d4>)
 8004b6a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d009      	beq.n	8004b86 <recvfrom+0x3c2>
	{
	   sock_pack_info[sn] |= PACK_REMAINED;
 8004b72:	7bfb      	ldrb	r3, [r7, #15]
 8004b74:	4a09      	ldr	r2, [pc, #36]	; (8004b9c <recvfrom+0x3d8>)
 8004b76:	5cd2      	ldrb	r2, [r2, r3]
 8004b78:	7bfb      	ldrb	r3, [r7, #15]
 8004b7a:	f042 0201 	orr.w	r2, r2, #1
 8004b7e:	b2d1      	uxtb	r1, r2
 8004b80:	4a06      	ldr	r2, [pc, #24]	; (8004b9c <recvfrom+0x3d8>)
 8004b82:	54d1      	strb	r1, [r2, r3]
 8004b84:	e003      	b.n	8004b8e <recvfrom+0x3ca>
   #if _WIZCHIP_ == 5300	   
	   if(pack_len & 0x01) sock_pack_info[sn] |= PACK_FIFOBYTE;
   #endif	      
	}
	else sock_pack_info[sn] = PACK_COMPLETED;
 8004b86:	7bfb      	ldrb	r3, [r7, #15]
 8004b88:	4a04      	ldr	r2, [pc, #16]	; (8004b9c <recvfrom+0x3d8>)
 8004b8a:	2100      	movs	r1, #0
 8004b8c:	54d1      	strb	r1, [r2, r3]
   pack_len = len;
#endif
   //
   //M20150409 : Explicit Type Casting
   //return pack_len;
   return (int32_t)pack_len;
 8004b8e:	8bfb      	ldrh	r3, [r7, #30]
}
 8004b90:	4618      	mov	r0, r3
 8004b92:	3720      	adds	r7, #32
 8004b94:	46bd      	mov	sp, r7
 8004b96:	bd80      	pop	{r7, pc}
 8004b98:	200002cc 	.word	0x200002cc
 8004b9c:	200002dc 	.word	0x200002dc

08004ba0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004ba0:	b480      	push	{r7}
 8004ba2:	b085      	sub	sp, #20
 8004ba4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8004ba6:	4b15      	ldr	r3, [pc, #84]	; (8004bfc <HAL_MspInit+0x5c>)
 8004ba8:	699b      	ldr	r3, [r3, #24]
 8004baa:	4a14      	ldr	r2, [pc, #80]	; (8004bfc <HAL_MspInit+0x5c>)
 8004bac:	f043 0301 	orr.w	r3, r3, #1
 8004bb0:	6193      	str	r3, [r2, #24]
 8004bb2:	4b12      	ldr	r3, [pc, #72]	; (8004bfc <HAL_MspInit+0x5c>)
 8004bb4:	699b      	ldr	r3, [r3, #24]
 8004bb6:	f003 0301 	and.w	r3, r3, #1
 8004bba:	60bb      	str	r3, [r7, #8]
 8004bbc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004bbe:	4b0f      	ldr	r3, [pc, #60]	; (8004bfc <HAL_MspInit+0x5c>)
 8004bc0:	69db      	ldr	r3, [r3, #28]
 8004bc2:	4a0e      	ldr	r2, [pc, #56]	; (8004bfc <HAL_MspInit+0x5c>)
 8004bc4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004bc8:	61d3      	str	r3, [r2, #28]
 8004bca:	4b0c      	ldr	r3, [pc, #48]	; (8004bfc <HAL_MspInit+0x5c>)
 8004bcc:	69db      	ldr	r3, [r3, #28]
 8004bce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004bd2:	607b      	str	r3, [r7, #4]
 8004bd4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 8004bd6:	4b0a      	ldr	r3, [pc, #40]	; (8004c00 <HAL_MspInit+0x60>)
 8004bd8:	685b      	ldr	r3, [r3, #4]
 8004bda:	60fb      	str	r3, [r7, #12]
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8004be2:	60fb      	str	r3, [r7, #12]
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004bea:	60fb      	str	r3, [r7, #12]
 8004bec:	4a04      	ldr	r2, [pc, #16]	; (8004c00 <HAL_MspInit+0x60>)
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004bf2:	bf00      	nop
 8004bf4:	3714      	adds	r7, #20
 8004bf6:	46bd      	mov	sp, r7
 8004bf8:	bc80      	pop	{r7}
 8004bfa:	4770      	bx	lr
 8004bfc:	40021000 	.word	0x40021000
 8004c00:	40010000 	.word	0x40010000

08004c04 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8004c04:	b580      	push	{r7, lr}
 8004c06:	b08a      	sub	sp, #40	; 0x28
 8004c08:	af00      	add	r7, sp, #0
 8004c0a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004c0c:	f107 0314 	add.w	r3, r7, #20
 8004c10:	2200      	movs	r2, #0
 8004c12:	601a      	str	r2, [r3, #0]
 8004c14:	605a      	str	r2, [r3, #4]
 8004c16:	609a      	str	r2, [r3, #8]
 8004c18:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	4a1d      	ldr	r2, [pc, #116]	; (8004c94 <HAL_I2C_MspInit+0x90>)
 8004c20:	4293      	cmp	r3, r2
 8004c22:	d132      	bne.n	8004c8a <HAL_I2C_MspInit+0x86>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004c24:	4b1c      	ldr	r3, [pc, #112]	; (8004c98 <HAL_I2C_MspInit+0x94>)
 8004c26:	699b      	ldr	r3, [r3, #24]
 8004c28:	4a1b      	ldr	r2, [pc, #108]	; (8004c98 <HAL_I2C_MspInit+0x94>)
 8004c2a:	f043 0308 	orr.w	r3, r3, #8
 8004c2e:	6193      	str	r3, [r2, #24]
 8004c30:	4b19      	ldr	r3, [pc, #100]	; (8004c98 <HAL_I2C_MspInit+0x94>)
 8004c32:	699b      	ldr	r3, [r3, #24]
 8004c34:	f003 0308 	and.w	r3, r3, #8
 8004c38:	613b      	str	r3, [r7, #16]
 8004c3a:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = TMP117_SCL_Pin|TMP117_SDA_Pin;
 8004c3c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8004c40:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004c42:	2312      	movs	r3, #18
 8004c44:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004c46:	2303      	movs	r3, #3
 8004c48:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004c4a:	f107 0314 	add.w	r3, r7, #20
 8004c4e:	4619      	mov	r1, r3
 8004c50:	4812      	ldr	r0, [pc, #72]	; (8004c9c <HAL_I2C_MspInit+0x98>)
 8004c52:	f001 fd8d 	bl	8006770 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_I2C1_ENABLE();
 8004c56:	4b12      	ldr	r3, [pc, #72]	; (8004ca0 <HAL_I2C_MspInit+0x9c>)
 8004c58:	685b      	ldr	r3, [r3, #4]
 8004c5a:	627b      	str	r3, [r7, #36]	; 0x24
 8004c5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c5e:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8004c62:	627b      	str	r3, [r7, #36]	; 0x24
 8004c64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c66:	f043 0302 	orr.w	r3, r3, #2
 8004c6a:	627b      	str	r3, [r7, #36]	; 0x24
 8004c6c:	4a0c      	ldr	r2, [pc, #48]	; (8004ca0 <HAL_I2C_MspInit+0x9c>)
 8004c6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c70:	6053      	str	r3, [r2, #4]

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8004c72:	4b09      	ldr	r3, [pc, #36]	; (8004c98 <HAL_I2C_MspInit+0x94>)
 8004c74:	69db      	ldr	r3, [r3, #28]
 8004c76:	4a08      	ldr	r2, [pc, #32]	; (8004c98 <HAL_I2C_MspInit+0x94>)
 8004c78:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004c7c:	61d3      	str	r3, [r2, #28]
 8004c7e:	4b06      	ldr	r3, [pc, #24]	; (8004c98 <HAL_I2C_MspInit+0x94>)
 8004c80:	69db      	ldr	r3, [r3, #28]
 8004c82:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004c86:	60fb      	str	r3, [r7, #12]
 8004c88:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8004c8a:	bf00      	nop
 8004c8c:	3728      	adds	r7, #40	; 0x28
 8004c8e:	46bd      	mov	sp, r7
 8004c90:	bd80      	pop	{r7, pc}
 8004c92:	bf00      	nop
 8004c94:	40005400 	.word	0x40005400
 8004c98:	40021000 	.word	0x40021000
 8004c9c:	40010c00 	.word	0x40010c00
 8004ca0:	40010000 	.word	0x40010000

08004ca4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8004ca4:	b580      	push	{r7, lr}
 8004ca6:	b088      	sub	sp, #32
 8004ca8:	af00      	add	r7, sp, #0
 8004caa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004cac:	f107 0310 	add.w	r3, r7, #16
 8004cb0:	2200      	movs	r2, #0
 8004cb2:	601a      	str	r2, [r3, #0]
 8004cb4:	605a      	str	r2, [r3, #4]
 8004cb6:	609a      	str	r2, [r3, #8]
 8004cb8:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI2)
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	4a1c      	ldr	r2, [pc, #112]	; (8004d30 <HAL_SPI_MspInit+0x8c>)
 8004cc0:	4293      	cmp	r3, r2
 8004cc2:	d131      	bne.n	8004d28 <HAL_SPI_MspInit+0x84>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8004cc4:	4b1b      	ldr	r3, [pc, #108]	; (8004d34 <HAL_SPI_MspInit+0x90>)
 8004cc6:	69db      	ldr	r3, [r3, #28]
 8004cc8:	4a1a      	ldr	r2, [pc, #104]	; (8004d34 <HAL_SPI_MspInit+0x90>)
 8004cca:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004cce:	61d3      	str	r3, [r2, #28]
 8004cd0:	4b18      	ldr	r3, [pc, #96]	; (8004d34 <HAL_SPI_MspInit+0x90>)
 8004cd2:	69db      	ldr	r3, [r3, #28]
 8004cd4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004cd8:	60fb      	str	r3, [r7, #12]
 8004cda:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004cdc:	4b15      	ldr	r3, [pc, #84]	; (8004d34 <HAL_SPI_MspInit+0x90>)
 8004cde:	699b      	ldr	r3, [r3, #24]
 8004ce0:	4a14      	ldr	r2, [pc, #80]	; (8004d34 <HAL_SPI_MspInit+0x90>)
 8004ce2:	f043 0308 	orr.w	r3, r3, #8
 8004ce6:	6193      	str	r3, [r2, #24]
 8004ce8:	4b12      	ldr	r3, [pc, #72]	; (8004d34 <HAL_SPI_MspInit+0x90>)
 8004cea:	699b      	ldr	r3, [r3, #24]
 8004cec:	f003 0308 	and.w	r3, r3, #8
 8004cf0:	60bb      	str	r3, [r7, #8]
 8004cf2:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 8004cf4:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 8004cf8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004cfa:	2302      	movs	r3, #2
 8004cfc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004cfe:	2303      	movs	r3, #3
 8004d00:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004d02:	f107 0310 	add.w	r3, r7, #16
 8004d06:	4619      	mov	r1, r3
 8004d08:	480b      	ldr	r0, [pc, #44]	; (8004d38 <HAL_SPI_MspInit+0x94>)
 8004d0a:	f001 fd31 	bl	8006770 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8004d0e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004d12:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004d14:	2300      	movs	r3, #0
 8004d16:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004d18:	2300      	movs	r3, #0
 8004d1a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004d1c:	f107 0310 	add.w	r3, r7, #16
 8004d20:	4619      	mov	r1, r3
 8004d22:	4805      	ldr	r0, [pc, #20]	; (8004d38 <HAL_SPI_MspInit+0x94>)
 8004d24:	f001 fd24 	bl	8006770 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8004d28:	bf00      	nop
 8004d2a:	3720      	adds	r7, #32
 8004d2c:	46bd      	mov	sp, r7
 8004d2e:	bd80      	pop	{r7, pc}
 8004d30:	40003800 	.word	0x40003800
 8004d34:	40021000 	.word	0x40021000
 8004d38:	40010c00 	.word	0x40010c00

08004d3c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8004d3c:	b580      	push	{r7, lr}
 8004d3e:	b08c      	sub	sp, #48	; 0x30
 8004d40:	af00      	add	r7, sp, #0
 8004d42:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004d44:	f107 0320 	add.w	r3, r7, #32
 8004d48:	2200      	movs	r2, #0
 8004d4a:	601a      	str	r2, [r3, #0]
 8004d4c:	605a      	str	r2, [r3, #4]
 8004d4e:	609a      	str	r2, [r3, #8]
 8004d50:	60da      	str	r2, [r3, #12]
  if(htim_base->Instance==TIM1)
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	4a4c      	ldr	r2, [pc, #304]	; (8004e88 <HAL_TIM_Base_MspInit+0x14c>)
 8004d58:	4293      	cmp	r3, r2
 8004d5a:	d10c      	bne.n	8004d76 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8004d5c:	4b4b      	ldr	r3, [pc, #300]	; (8004e8c <HAL_TIM_Base_MspInit+0x150>)
 8004d5e:	699b      	ldr	r3, [r3, #24]
 8004d60:	4a4a      	ldr	r2, [pc, #296]	; (8004e8c <HAL_TIM_Base_MspInit+0x150>)
 8004d62:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8004d66:	6193      	str	r3, [r2, #24]
 8004d68:	4b48      	ldr	r3, [pc, #288]	; (8004e8c <HAL_TIM_Base_MspInit+0x150>)
 8004d6a:	699b      	ldr	r3, [r3, #24]
 8004d6c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004d70:	61fb      	str	r3, [r7, #28]
 8004d72:	69fb      	ldr	r3, [r7, #28]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8004d74:	e084      	b.n	8004e80 <HAL_TIM_Base_MspInit+0x144>
  else if(htim_base->Instance==TIM2)
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004d7e:	d14c      	bne.n	8004e1a <HAL_TIM_Base_MspInit+0xde>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8004d80:	4b42      	ldr	r3, [pc, #264]	; (8004e8c <HAL_TIM_Base_MspInit+0x150>)
 8004d82:	69db      	ldr	r3, [r3, #28]
 8004d84:	4a41      	ldr	r2, [pc, #260]	; (8004e8c <HAL_TIM_Base_MspInit+0x150>)
 8004d86:	f043 0301 	orr.w	r3, r3, #1
 8004d8a:	61d3      	str	r3, [r2, #28]
 8004d8c:	4b3f      	ldr	r3, [pc, #252]	; (8004e8c <HAL_TIM_Base_MspInit+0x150>)
 8004d8e:	69db      	ldr	r3, [r3, #28]
 8004d90:	f003 0301 	and.w	r3, r3, #1
 8004d94:	61bb      	str	r3, [r7, #24]
 8004d96:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004d98:	4b3c      	ldr	r3, [pc, #240]	; (8004e8c <HAL_TIM_Base_MspInit+0x150>)
 8004d9a:	699b      	ldr	r3, [r3, #24]
 8004d9c:	4a3b      	ldr	r2, [pc, #236]	; (8004e8c <HAL_TIM_Base_MspInit+0x150>)
 8004d9e:	f043 0304 	orr.w	r3, r3, #4
 8004da2:	6193      	str	r3, [r2, #24]
 8004da4:	4b39      	ldr	r3, [pc, #228]	; (8004e8c <HAL_TIM_Base_MspInit+0x150>)
 8004da6:	699b      	ldr	r3, [r3, #24]
 8004da8:	f003 0304 	and.w	r3, r3, #4
 8004dac:	617b      	str	r3, [r7, #20]
 8004dae:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = senserInput_Pin;
 8004db0:	2301      	movs	r3, #1
 8004db2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004db4:	2300      	movs	r3, #0
 8004db6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004db8:	2300      	movs	r3, #0
 8004dba:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(senserInput_GPIO_Port, &GPIO_InitStruct);
 8004dbc:	f107 0320 	add.w	r3, r7, #32
 8004dc0:	4619      	mov	r1, r3
 8004dc2:	4833      	ldr	r0, [pc, #204]	; (8004e90 <HAL_TIM_Base_MspInit+0x154>)
 8004dc4:	f001 fcd4 	bl	8006770 <HAL_GPIO_Init>
    hdma_tim2_ch1.Instance = DMA1_Channel5;
 8004dc8:	4b32      	ldr	r3, [pc, #200]	; (8004e94 <HAL_TIM_Base_MspInit+0x158>)
 8004dca:	4a33      	ldr	r2, [pc, #204]	; (8004e98 <HAL_TIM_Base_MspInit+0x15c>)
 8004dcc:	601a      	str	r2, [r3, #0]
    hdma_tim2_ch1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004dce:	4b31      	ldr	r3, [pc, #196]	; (8004e94 <HAL_TIM_Base_MspInit+0x158>)
 8004dd0:	2200      	movs	r2, #0
 8004dd2:	605a      	str	r2, [r3, #4]
    hdma_tim2_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8004dd4:	4b2f      	ldr	r3, [pc, #188]	; (8004e94 <HAL_TIM_Base_MspInit+0x158>)
 8004dd6:	2200      	movs	r2, #0
 8004dd8:	609a      	str	r2, [r3, #8]
    hdma_tim2_ch1.Init.MemInc = DMA_MINC_DISABLE;
 8004dda:	4b2e      	ldr	r3, [pc, #184]	; (8004e94 <HAL_TIM_Base_MspInit+0x158>)
 8004ddc:	2200      	movs	r2, #0
 8004dde:	60da      	str	r2, [r3, #12]
    hdma_tim2_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8004de0:	4b2c      	ldr	r3, [pc, #176]	; (8004e94 <HAL_TIM_Base_MspInit+0x158>)
 8004de2:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004de6:	611a      	str	r2, [r3, #16]
    hdma_tim2_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8004de8:	4b2a      	ldr	r3, [pc, #168]	; (8004e94 <HAL_TIM_Base_MspInit+0x158>)
 8004dea:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004dee:	615a      	str	r2, [r3, #20]
    hdma_tim2_ch1.Init.Mode = DMA_CIRCULAR;
 8004df0:	4b28      	ldr	r3, [pc, #160]	; (8004e94 <HAL_TIM_Base_MspInit+0x158>)
 8004df2:	2220      	movs	r2, #32
 8004df4:	619a      	str	r2, [r3, #24]
    hdma_tim2_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8004df6:	4b27      	ldr	r3, [pc, #156]	; (8004e94 <HAL_TIM_Base_MspInit+0x158>)
 8004df8:	2200      	movs	r2, #0
 8004dfa:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_tim2_ch1) != HAL_OK)
 8004dfc:	4825      	ldr	r0, [pc, #148]	; (8004e94 <HAL_TIM_Base_MspInit+0x158>)
 8004dfe:	f001 fa53 	bl	80062a8 <HAL_DMA_Init>
 8004e02:	4603      	mov	r3, r0
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d001      	beq.n	8004e0c <HAL_TIM_Base_MspInit+0xd0>
      Error_Handler();
 8004e08:	f7fe ff90 	bl	8003d2c <Error_Handler>
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC1],hdma_tim2_ch1);
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	4a21      	ldr	r2, [pc, #132]	; (8004e94 <HAL_TIM_Base_MspInit+0x158>)
 8004e10:	625a      	str	r2, [r3, #36]	; 0x24
 8004e12:	4a20      	ldr	r2, [pc, #128]	; (8004e94 <HAL_TIM_Base_MspInit+0x158>)
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	6253      	str	r3, [r2, #36]	; 0x24
}
 8004e18:	e032      	b.n	8004e80 <HAL_TIM_Base_MspInit+0x144>
  else if(htim_base->Instance==TIM3)
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	4a1f      	ldr	r2, [pc, #124]	; (8004e9c <HAL_TIM_Base_MspInit+0x160>)
 8004e20:	4293      	cmp	r3, r2
 8004e22:	d114      	bne.n	8004e4e <HAL_TIM_Base_MspInit+0x112>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8004e24:	4b19      	ldr	r3, [pc, #100]	; (8004e8c <HAL_TIM_Base_MspInit+0x150>)
 8004e26:	69db      	ldr	r3, [r3, #28]
 8004e28:	4a18      	ldr	r2, [pc, #96]	; (8004e8c <HAL_TIM_Base_MspInit+0x150>)
 8004e2a:	f043 0302 	orr.w	r3, r3, #2
 8004e2e:	61d3      	str	r3, [r2, #28]
 8004e30:	4b16      	ldr	r3, [pc, #88]	; (8004e8c <HAL_TIM_Base_MspInit+0x150>)
 8004e32:	69db      	ldr	r3, [r3, #28]
 8004e34:	f003 0302 	and.w	r3, r3, #2
 8004e38:	613b      	str	r3, [r7, #16]
 8004e3a:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8004e3c:	2200      	movs	r2, #0
 8004e3e:	2100      	movs	r1, #0
 8004e40:	201d      	movs	r0, #29
 8004e42:	f001 f9fa 	bl	800623a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8004e46:	201d      	movs	r0, #29
 8004e48:	f001 fa13 	bl	8006272 <HAL_NVIC_EnableIRQ>
}
 8004e4c:	e018      	b.n	8004e80 <HAL_TIM_Base_MspInit+0x144>
  else if(htim_base->Instance==TIM4)
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	4a13      	ldr	r2, [pc, #76]	; (8004ea0 <HAL_TIM_Base_MspInit+0x164>)
 8004e54:	4293      	cmp	r3, r2
 8004e56:	d113      	bne.n	8004e80 <HAL_TIM_Base_MspInit+0x144>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8004e58:	4b0c      	ldr	r3, [pc, #48]	; (8004e8c <HAL_TIM_Base_MspInit+0x150>)
 8004e5a:	69db      	ldr	r3, [r3, #28]
 8004e5c:	4a0b      	ldr	r2, [pc, #44]	; (8004e8c <HAL_TIM_Base_MspInit+0x150>)
 8004e5e:	f043 0304 	orr.w	r3, r3, #4
 8004e62:	61d3      	str	r3, [r2, #28]
 8004e64:	4b09      	ldr	r3, [pc, #36]	; (8004e8c <HAL_TIM_Base_MspInit+0x150>)
 8004e66:	69db      	ldr	r3, [r3, #28]
 8004e68:	f003 0304 	and.w	r3, r3, #4
 8004e6c:	60fb      	str	r3, [r7, #12]
 8004e6e:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8004e70:	2200      	movs	r2, #0
 8004e72:	2100      	movs	r1, #0
 8004e74:	201e      	movs	r0, #30
 8004e76:	f001 f9e0 	bl	800623a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8004e7a:	201e      	movs	r0, #30
 8004e7c:	f001 f9f9 	bl	8006272 <HAL_NVIC_EnableIRQ>
}
 8004e80:	bf00      	nop
 8004e82:	3730      	adds	r7, #48	; 0x30
 8004e84:	46bd      	mov	sp, r7
 8004e86:	bd80      	pop	{r7, pc}
 8004e88:	40012c00 	.word	0x40012c00
 8004e8c:	40021000 	.word	0x40021000
 8004e90:	40010800 	.word	0x40010800
 8004e94:	20000338 	.word	0x20000338
 8004e98:	40020058 	.word	0x40020058
 8004e9c:	40000400 	.word	0x40000400
 8004ea0:	40000800 	.word	0x40000800

08004ea4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8004ea4:	b580      	push	{r7, lr}
 8004ea6:	b088      	sub	sp, #32
 8004ea8:	af00      	add	r7, sp, #0
 8004eaa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004eac:	f107 0310 	add.w	r3, r7, #16
 8004eb0:	2200      	movs	r2, #0
 8004eb2:	601a      	str	r2, [r3, #0]
 8004eb4:	605a      	str	r2, [r3, #4]
 8004eb6:	609a      	str	r2, [r3, #8]
 8004eb8:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM1)
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	4a10      	ldr	r2, [pc, #64]	; (8004f00 <HAL_TIM_MspPostInit+0x5c>)
 8004ec0:	4293      	cmp	r3, r2
 8004ec2:	d118      	bne.n	8004ef6 <HAL_TIM_MspPostInit+0x52>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004ec4:	4b0f      	ldr	r3, [pc, #60]	; (8004f04 <HAL_TIM_MspPostInit+0x60>)
 8004ec6:	699b      	ldr	r3, [r3, #24]
 8004ec8:	4a0e      	ldr	r2, [pc, #56]	; (8004f04 <HAL_TIM_MspPostInit+0x60>)
 8004eca:	f043 0304 	orr.w	r3, r3, #4
 8004ece:	6193      	str	r3, [r2, #24]
 8004ed0:	4b0c      	ldr	r3, [pc, #48]	; (8004f04 <HAL_TIM_MspPostInit+0x60>)
 8004ed2:	699b      	ldr	r3, [r3, #24]
 8004ed4:	f003 0304 	and.w	r3, r3, #4
 8004ed8:	60fb      	str	r3, [r7, #12]
 8004eda:	68fb      	ldr	r3, [r7, #12]
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    PA11     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = Z1_Pin|Z2_Pin|Z3_Pin|Z4_Pin;
 8004edc:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8004ee0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004ee2:	2302      	movs	r3, #2
 8004ee4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004ee6:	2303      	movs	r3, #3
 8004ee8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004eea:	f107 0310 	add.w	r3, r7, #16
 8004eee:	4619      	mov	r1, r3
 8004ef0:	4805      	ldr	r0, [pc, #20]	; (8004f08 <HAL_TIM_MspPostInit+0x64>)
 8004ef2:	f001 fc3d 	bl	8006770 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8004ef6:	bf00      	nop
 8004ef8:	3720      	adds	r7, #32
 8004efa:	46bd      	mov	sp, r7
 8004efc:	bd80      	pop	{r7, pc}
 8004efe:	bf00      	nop
 8004f00:	40012c00 	.word	0x40012c00
 8004f04:	40021000 	.word	0x40021000
 8004f08:	40010800 	.word	0x40010800

08004f0c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8004f0c:	b580      	push	{r7, lr}
 8004f0e:	b08a      	sub	sp, #40	; 0x28
 8004f10:	af00      	add	r7, sp, #0
 8004f12:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004f14:	f107 0314 	add.w	r3, r7, #20
 8004f18:	2200      	movs	r2, #0
 8004f1a:	601a      	str	r2, [r3, #0]
 8004f1c:	605a      	str	r2, [r3, #4]
 8004f1e:	609a      	str	r2, [r3, #8]
 8004f20:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	4a22      	ldr	r2, [pc, #136]	; (8004fb0 <HAL_UART_MspInit+0xa4>)
 8004f28:	4293      	cmp	r3, r2
 8004f2a:	d13d      	bne.n	8004fa8 <HAL_UART_MspInit+0x9c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8004f2c:	4b21      	ldr	r3, [pc, #132]	; (8004fb4 <HAL_UART_MspInit+0xa8>)
 8004f2e:	699b      	ldr	r3, [r3, #24]
 8004f30:	4a20      	ldr	r2, [pc, #128]	; (8004fb4 <HAL_UART_MspInit+0xa8>)
 8004f32:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004f36:	6193      	str	r3, [r2, #24]
 8004f38:	4b1e      	ldr	r3, [pc, #120]	; (8004fb4 <HAL_UART_MspInit+0xa8>)
 8004f3a:	699b      	ldr	r3, [r3, #24]
 8004f3c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004f40:	613b      	str	r3, [r7, #16]
 8004f42:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004f44:	4b1b      	ldr	r3, [pc, #108]	; (8004fb4 <HAL_UART_MspInit+0xa8>)
 8004f46:	699b      	ldr	r3, [r3, #24]
 8004f48:	4a1a      	ldr	r2, [pc, #104]	; (8004fb4 <HAL_UART_MspInit+0xa8>)
 8004f4a:	f043 0308 	orr.w	r3, r3, #8
 8004f4e:	6193      	str	r3, [r2, #24]
 8004f50:	4b18      	ldr	r3, [pc, #96]	; (8004fb4 <HAL_UART_MspInit+0xa8>)
 8004f52:	699b      	ldr	r3, [r3, #24]
 8004f54:	f003 0308 	and.w	r3, r3, #8
 8004f58:	60fb      	str	r3, [r7, #12]
 8004f5a:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8004f5c:	2340      	movs	r3, #64	; 0x40
 8004f5e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004f60:	2302      	movs	r3, #2
 8004f62:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004f64:	2303      	movs	r3, #3
 8004f66:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004f68:	f107 0314 	add.w	r3, r7, #20
 8004f6c:	4619      	mov	r1, r3
 8004f6e:	4812      	ldr	r0, [pc, #72]	; (8004fb8 <HAL_UART_MspInit+0xac>)
 8004f70:	f001 fbfe 	bl	8006770 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8004f74:	2380      	movs	r3, #128	; 0x80
 8004f76:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004f78:	2300      	movs	r3, #0
 8004f7a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004f7c:	2300      	movs	r3, #0
 8004f7e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004f80:	f107 0314 	add.w	r3, r7, #20
 8004f84:	4619      	mov	r1, r3
 8004f86:	480c      	ldr	r0, [pc, #48]	; (8004fb8 <HAL_UART_MspInit+0xac>)
 8004f88:	f001 fbf2 	bl	8006770 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_USART1_ENABLE();
 8004f8c:	4b0b      	ldr	r3, [pc, #44]	; (8004fbc <HAL_UART_MspInit+0xb0>)
 8004f8e:	685b      	ldr	r3, [r3, #4]
 8004f90:	627b      	str	r3, [r7, #36]	; 0x24
 8004f92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f94:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8004f98:	627b      	str	r3, [r7, #36]	; 0x24
 8004f9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f9c:	f043 0304 	orr.w	r3, r3, #4
 8004fa0:	627b      	str	r3, [r7, #36]	; 0x24
 8004fa2:	4a06      	ldr	r2, [pc, #24]	; (8004fbc <HAL_UART_MspInit+0xb0>)
 8004fa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fa6:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8004fa8:	bf00      	nop
 8004faa:	3728      	adds	r7, #40	; 0x28
 8004fac:	46bd      	mov	sp, r7
 8004fae:	bd80      	pop	{r7, pc}
 8004fb0:	40013800 	.word	0x40013800
 8004fb4:	40021000 	.word	0x40021000
 8004fb8:	40010c00 	.word	0x40010c00
 8004fbc:	40010000 	.word	0x40010000

08004fc0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004fc0:	b480      	push	{r7}
 8004fc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8004fc4:	e7fe      	b.n	8004fc4 <NMI_Handler+0x4>

08004fc6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004fc6:	b480      	push	{r7}
 8004fc8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004fca:	e7fe      	b.n	8004fca <HardFault_Handler+0x4>

08004fcc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004fcc:	b480      	push	{r7}
 8004fce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004fd0:	e7fe      	b.n	8004fd0 <MemManage_Handler+0x4>

08004fd2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004fd2:	b480      	push	{r7}
 8004fd4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004fd6:	e7fe      	b.n	8004fd6 <BusFault_Handler+0x4>

08004fd8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004fd8:	b480      	push	{r7}
 8004fda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004fdc:	e7fe      	b.n	8004fdc <UsageFault_Handler+0x4>

08004fde <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004fde:	b480      	push	{r7}
 8004fe0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004fe2:	bf00      	nop
 8004fe4:	46bd      	mov	sp, r7
 8004fe6:	bc80      	pop	{r7}
 8004fe8:	4770      	bx	lr

08004fea <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004fea:	b480      	push	{r7}
 8004fec:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004fee:	bf00      	nop
 8004ff0:	46bd      	mov	sp, r7
 8004ff2:	bc80      	pop	{r7}
 8004ff4:	4770      	bx	lr

08004ff6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004ff6:	b480      	push	{r7}
 8004ff8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004ffa:	bf00      	nop
 8004ffc:	46bd      	mov	sp, r7
 8004ffe:	bc80      	pop	{r7}
 8005000:	4770      	bx	lr

08005002 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8005002:	b580      	push	{r7, lr}
 8005004:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8005006:	f001 f801 	bl	800600c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800500a:	bf00      	nop
 800500c:	bd80      	pop	{r7, pc}
	...

08005010 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8005010:	b580      	push	{r7, lr}
 8005012:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */
	if (runFlag) {
 8005014:	4b34      	ldr	r3, [pc, #208]	; (80050e8 <DMA1_Channel5_IRQHandler+0xd8>)
 8005016:	781b      	ldrb	r3, [r3, #0]
 8005018:	2b00      	cmp	r3, #0
 800501a:	d05f      	beq.n	80050dc <DMA1_Channel5_IRQHandler+0xcc>
			HAL_TIM_IC_Stop_DMA(&htim2, TIM_CHANNEL_1);
 800501c:	2100      	movs	r1, #0
 800501e:	4833      	ldr	r0, [pc, #204]	; (80050ec <DMA1_Channel5_IRQHandler+0xdc>)
 8005020:	f003 fbee 	bl	8008800 <HAL_TIM_IC_Stop_DMA>
			/* Turn off all multiplexer */
			GPIOB->ODR &= ~((1 << Z1Receive) | (1 << Z2Receive) | (1 << Z3Receive) | (1 << Z4Receive));
 8005024:	4b32      	ldr	r3, [pc, #200]	; (80050f0 <DMA1_Channel5_IRQHandler+0xe0>)
 8005026:	68db      	ldr	r3, [r3, #12]
 8005028:	4a31      	ldr	r2, [pc, #196]	; (80050f0 <DMA1_Channel5_IRQHandler+0xe0>)
 800502a:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800502e:	f023 0306 	bic.w	r3, r3, #6
 8005032:	60d3      	str	r3, [r2, #12]
			switch (currentMode) {
 8005034:	4b2f      	ldr	r3, [pc, #188]	; (80050f4 <DMA1_Channel5_IRQHandler+0xe4>)
 8005036:	881b      	ldrh	r3, [r3, #0]
 8005038:	3b01      	subs	r3, #1
 800503a:	2b07      	cmp	r3, #7
 800503c:	d842      	bhi.n	80050c4 <DMA1_Channel5_IRQHandler+0xb4>
 800503e:	a201      	add	r2, pc, #4	; (adr r2, 8005044 <DMA1_Channel5_IRQHandler+0x34>)
 8005040:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005044:	08005065 	.word	0x08005065
 8005048:	08005071 	.word	0x08005071
 800504c:	0800507d 	.word	0x0800507d
 8005050:	08005089 	.word	0x08005089
 8005054:	08005095 	.word	0x08005095
 8005058:	080050a1 	.word	0x080050a1
 800505c:	080050ad 	.word	0x080050ad
 8005060:	080050b9 	.word	0x080050b9
				case 1: { // Z1 > Z2
					Z12 = fastCounter & 0x0FFFF;
 8005064:	4b24      	ldr	r3, [pc, #144]	; (80050f8 <DMA1_Channel5_IRQHandler+0xe8>)
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	b29a      	uxth	r2, r3
 800506a:	4b24      	ldr	r3, [pc, #144]	; (80050fc <DMA1_Channel5_IRQHandler+0xec>)
 800506c:	801a      	strh	r2, [r3, #0]
					break;
 800506e:	e029      	b.n	80050c4 <DMA1_Channel5_IRQHandler+0xb4>
				}
				case 2: { // Z2 > Z1
					Z21 = fastCounter & 0x0FFFF;
 8005070:	4b21      	ldr	r3, [pc, #132]	; (80050f8 <DMA1_Channel5_IRQHandler+0xe8>)
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	b29a      	uxth	r2, r3
 8005076:	4b22      	ldr	r3, [pc, #136]	; (8005100 <DMA1_Channel5_IRQHandler+0xf0>)
 8005078:	801a      	strh	r2, [r3, #0]
					break;
 800507a:	e023      	b.n	80050c4 <DMA1_Channel5_IRQHandler+0xb4>
				}
				case 3: { // Z2 > Z3
					Z23 = fastCounter & 0x0FFFF;
 800507c:	4b1e      	ldr	r3, [pc, #120]	; (80050f8 <DMA1_Channel5_IRQHandler+0xe8>)
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	b29a      	uxth	r2, r3
 8005082:	4b20      	ldr	r3, [pc, #128]	; (8005104 <DMA1_Channel5_IRQHandler+0xf4>)
 8005084:	801a      	strh	r2, [r3, #0]
					break;
 8005086:	e01d      	b.n	80050c4 <DMA1_Channel5_IRQHandler+0xb4>
				}
				case 4: { // Z3 > Z2
					Z32 = fastCounter & 0x0FFFF;
 8005088:	4b1b      	ldr	r3, [pc, #108]	; (80050f8 <DMA1_Channel5_IRQHandler+0xe8>)
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	b29a      	uxth	r2, r3
 800508e:	4b1e      	ldr	r3, [pc, #120]	; (8005108 <DMA1_Channel5_IRQHandler+0xf8>)
 8005090:	801a      	strh	r2, [r3, #0]
					break;
 8005092:	e017      	b.n	80050c4 <DMA1_Channel5_IRQHandler+0xb4>
				}
				case 5: { // Z3 > Z4
					Z34 = fastCounter & 0x0FFFF;
 8005094:	4b18      	ldr	r3, [pc, #96]	; (80050f8 <DMA1_Channel5_IRQHandler+0xe8>)
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	b29a      	uxth	r2, r3
 800509a:	4b1c      	ldr	r3, [pc, #112]	; (800510c <DMA1_Channel5_IRQHandler+0xfc>)
 800509c:	801a      	strh	r2, [r3, #0]
					break;
 800509e:	e011      	b.n	80050c4 <DMA1_Channel5_IRQHandler+0xb4>
				}
				case 6: { // Z4 > Z3
					Z43 = fastCounter & 0x0FFFF;
 80050a0:	4b15      	ldr	r3, [pc, #84]	; (80050f8 <DMA1_Channel5_IRQHandler+0xe8>)
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	b29a      	uxth	r2, r3
 80050a6:	4b1a      	ldr	r3, [pc, #104]	; (8005110 <DMA1_Channel5_IRQHandler+0x100>)
 80050a8:	801a      	strh	r2, [r3, #0]
					break;
 80050aa:	e00b      	b.n	80050c4 <DMA1_Channel5_IRQHandler+0xb4>
				}
				case 7: { // Z4 > Z1
					Z41 = fastCounter & 0x0FFFF;
 80050ac:	4b12      	ldr	r3, [pc, #72]	; (80050f8 <DMA1_Channel5_IRQHandler+0xe8>)
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	b29a      	uxth	r2, r3
 80050b2:	4b18      	ldr	r3, [pc, #96]	; (8005114 <DMA1_Channel5_IRQHandler+0x104>)
 80050b4:	801a      	strh	r2, [r3, #0]
					break;
 80050b6:	e005      	b.n	80050c4 <DMA1_Channel5_IRQHandler+0xb4>
				}
				case 8: { // Z1 > Z4
					Z14 = fastCounter & 0x0FFFF;
 80050b8:	4b0f      	ldr	r3, [pc, #60]	; (80050f8 <DMA1_Channel5_IRQHandler+0xe8>)
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	b29a      	uxth	r2, r3
 80050be:	4b16      	ldr	r3, [pc, #88]	; (8005118 <DMA1_Channel5_IRQHandler+0x108>)
 80050c0:	801a      	strh	r2, [r3, #0]
					break;
 80050c2:	bf00      	nop
				}
			}
			HAL_GPIO_WritePin(GPIOA, LED_Pin, GPIO_PIN_SET);
 80050c4:	2201      	movs	r2, #1
 80050c6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80050ca:	4814      	ldr	r0, [pc, #80]	; (800511c <DMA1_Channel5_IRQHandler+0x10c>)
 80050cc:	f001 fcd4 	bl	8006a78 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, LED_Pin, GPIO_PIN_RESET);
 80050d0:	2200      	movs	r2, #0
 80050d2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80050d6:	4811      	ldr	r0, [pc, #68]	; (800511c <DMA1_Channel5_IRQHandler+0x10c>)
 80050d8:	f001 fcce 	bl	8006a78 <HAL_GPIO_WritePin>
		}

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim2_ch1);
 80050dc:	4810      	ldr	r0, [pc, #64]	; (8005120 <DMA1_Channel5_IRQHandler+0x110>)
 80050de:	f001 fa13 	bl	8006508 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 80050e2:	bf00      	nop
 80050e4:	bd80      	pop	{r7, pc}
 80050e6:	bf00      	nop
 80050e8:	20000534 	.word	0x20000534
 80050ec:	20000594 	.word	0x20000594
 80050f0:	40010c00 	.word	0x40010c00
 80050f4:	2000058e 	.word	0x2000058e
 80050f8:	200004e0 	.word	0x200004e0
 80050fc:	20000536 	.word	0x20000536
 8005100:	20000480 	.word	0x20000480
 8005104:	20000590 	.word	0x20000590
 8005108:	2000058c 	.word	0x2000058c
 800510c:	20000490 	.word	0x20000490
 8005110:	20000540 	.word	0x20000540
 8005114:	20000482 	.word	0x20000482
 8005118:	2000041c 	.word	0x2000041c
 800511c:	40010800 	.word	0x40010800
 8005120:	20000338 	.word	0x20000338

08005124 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8005124:	b580      	push	{r7, lr}
 8005126:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */
	//HAL_GPIO_WritePin(GPIOA, LED_Pin, GPIO_PIN_SET);
	//HAL_GPIO_WritePin(GPIOA, LED_Pin, GPIO_PIN_RESET);
//	if (startCount-- == 0) {
		runFlag = TRUE;
 8005128:	4b09      	ldr	r3, [pc, #36]	; (8005150 <TIM3_IRQHandler+0x2c>)
 800512a:	2201      	movs	r2, #1
 800512c:	701a      	strb	r2, [r3, #0]
		HAL_GPIO_WritePin(GPIOA, LED_Pin, GPIO_PIN_SET);
 800512e:	2201      	movs	r2, #1
 8005130:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8005134:	4807      	ldr	r0, [pc, #28]	; (8005154 <TIM3_IRQHandler+0x30>)
 8005136:	f001 fc9f 	bl	8006a78 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, LED_Pin, GPIO_PIN_RESET);
 800513a:	2200      	movs	r2, #0
 800513c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8005140:	4804      	ldr	r0, [pc, #16]	; (8005154 <TIM3_IRQHandler+0x30>)
 8005142:	f001 fc99 	bl	8006a78 <HAL_GPIO_WritePin>
//	}

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8005146:	4804      	ldr	r0, [pc, #16]	; (8005158 <TIM3_IRQHandler+0x34>)
 8005148:	f003 fc6d 	bl	8008a26 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800514c:	bf00      	nop
 800514e:	bd80      	pop	{r7, pc}
 8005150:	20000534 	.word	0x20000534
 8005154:	40010800 	.word	0x40010800
 8005158:	20000498 	.word	0x20000498

0800515c <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 800515c:	b580      	push	{r7, lr}
 800515e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

	  /* Turn off all multiplexer */
	  GPIOB->ODR &= ~((1 << Z1Receive) | (1 << Z2Receive) | (1 << Z3Receive) | (1 << Z4Receive));
 8005160:	4b8f      	ldr	r3, [pc, #572]	; (80053a0 <TIM4_IRQHandler+0x244>)
 8005162:	68db      	ldr	r3, [r3, #12]
 8005164:	4a8e      	ldr	r2, [pc, #568]	; (80053a0 <TIM4_IRQHandler+0x244>)
 8005166:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800516a:	f023 0306 	bic.w	r3, r3, #6
 800516e:	60d3      	str	r3, [r2, #12]

	  HAL_TIM_IC_Stop_DMA(&htim2, TIM_CHANNEL_1);	// If not stop in DMA callback.
 8005170:	2100      	movs	r1, #0
 8005172:	488c      	ldr	r0, [pc, #560]	; (80053a4 <TIM4_IRQHandler+0x248>)
 8005174:	f003 fb44 	bl	8008800 <HAL_TIM_IC_Stop_DMA>
	  /* Restart timers */
	  HAL_TIM_OC_Stop(&htim1, TIM_CHANNEL_1);
 8005178:	2100      	movs	r1, #0
 800517a:	488b      	ldr	r0, [pc, #556]	; (80053a8 <TIM4_IRQHandler+0x24c>)
 800517c:	f003 f8fa 	bl	8008374 <HAL_TIM_OC_Stop>
	  HAL_TIM_OC_Stop(&htim1, TIM_CHANNEL_2);
 8005180:	2104      	movs	r1, #4
 8005182:	4889      	ldr	r0, [pc, #548]	; (80053a8 <TIM4_IRQHandler+0x24c>)
 8005184:	f003 f8f6 	bl	8008374 <HAL_TIM_OC_Stop>
	  HAL_TIM_OC_Stop(&htim1, TIM_CHANNEL_3);
 8005188:	2108      	movs	r1, #8
 800518a:	4887      	ldr	r0, [pc, #540]	; (80053a8 <TIM4_IRQHandler+0x24c>)
 800518c:	f003 f8f2 	bl	8008374 <HAL_TIM_OC_Stop>
	  HAL_TIM_OC_Stop(&htim1, TIM_CHANNEL_4);
 8005190:	210c      	movs	r1, #12
 8005192:	4885      	ldr	r0, [pc, #532]	; (80053a8 <TIM4_IRQHandler+0x24c>)
 8005194:	f003 f8ee 	bl	8008374 <HAL_TIM_OC_Stop>

	  /* Set all timer channels for input mode */
	  GPIOA->CRH = (GPIOA->CRH & ~(GPIO_CRH_CNF8 | GPIO_CRH_MODE8
 8005198:	4b84      	ldr	r3, [pc, #528]	; (80053ac <TIM4_IRQHandler+0x250>)
 800519a:	685b      	ldr	r3, [r3, #4]
 800519c:	0c1b      	lsrs	r3, r3, #16
 800519e:	041b      	lsls	r3, r3, #16
 80051a0:	4a82      	ldr	r2, [pc, #520]	; (80053ac <TIM4_IRQHandler+0x250>)
			  	  | GPIO_CRH_CNF9 | GPIO_CRH_MODE9
				  | GPIO_CRH_CNF10 | GPIO_CRH_MODE10
				  | GPIO_CRH_CNF11 | GPIO_CRH_MODE11))
				  | (GPIO_CRH_CNF8_0 | GPIO_CRH_CNF9_0 | GPIO_CRH_CNF10_0 | GPIO_CRH_CNF11_0);
 80051a2:	f443 4388 	orr.w	r3, r3, #17408	; 0x4400
 80051a6:	f043 0344 	orr.w	r3, r3, #68	; 0x44
	  GPIOA->CRH = (GPIOA->CRH & ~(GPIO_CRH_CNF8 | GPIO_CRH_MODE8
 80051aa:	6053      	str	r3, [r2, #4]

	  switch (currentMode++) {
 80051ac:	4b80      	ldr	r3, [pc, #512]	; (80053b0 <TIM4_IRQHandler+0x254>)
 80051ae:	881b      	ldrh	r3, [r3, #0]
 80051b0:	1c5a      	adds	r2, r3, #1
 80051b2:	b291      	uxth	r1, r2
 80051b4:	4a7e      	ldr	r2, [pc, #504]	; (80053b0 <TIM4_IRQHandler+0x254>)
 80051b6:	8011      	strh	r1, [r2, #0]
 80051b8:	2b08      	cmp	r3, #8
 80051ba:	f200 80e2 	bhi.w	8005382 <TIM4_IRQHandler+0x226>
 80051be:	a201      	add	r2, pc, #4	; (adr r2, 80051c4 <TIM4_IRQHandler+0x68>)
 80051c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051c4:	080051e9 	.word	0x080051e9
 80051c8:	0800520f 	.word	0x0800520f
 80051cc:	08005235 	.word	0x08005235
 80051d0:	0800525b 	.word	0x0800525b
 80051d4:	08005281 	.word	0x08005281
 80051d8:	080052a7 	.word	0x080052a7
 80051dc:	080052cd 	.word	0x080052cd
 80051e0:	080052f3 	.word	0x080052f3
 80051e4:	08005319 	.word	0x08005319
		  case 0: { // Z1 (transmit) > Z2 (receive)
			  setZ1transmit; // Set Z1 port to output mode
 80051e8:	4b70      	ldr	r3, [pc, #448]	; (80053ac <TIM4_IRQHandler+0x250>)
 80051ea:	685b      	ldr	r3, [r3, #4]
 80051ec:	f023 030e 	bic.w	r3, r3, #14
 80051f0:	4a6e      	ldr	r2, [pc, #440]	; (80053ac <TIM4_IRQHandler+0x250>)
 80051f2:	f043 030a 	orr.w	r3, r3, #10
 80051f6:	6053      	str	r3, [r2, #4]
			  GPIOB->ODR |= (1 << Z2Receive); 				// Turn on multiplexer for input Z2 channel.
 80051f8:	4b69      	ldr	r3, [pc, #420]	; (80053a0 <TIM4_IRQHandler+0x244>)
 80051fa:	68db      	ldr	r3, [r3, #12]
 80051fc:	4a68      	ldr	r2, [pc, #416]	; (80053a0 <TIM4_IRQHandler+0x244>)
 80051fe:	f043 0304 	orr.w	r3, r3, #4
 8005202:	60d3      	str	r3, [r2, #12]
			  HAL_TIM_OC_Start(&htim1, TIM_CHANNEL_1);
 8005204:	2100      	movs	r1, #0
 8005206:	4868      	ldr	r0, [pc, #416]	; (80053a8 <TIM4_IRQHandler+0x24c>)
 8005208:	f003 f812 	bl	8008230 <HAL_TIM_OC_Start>
			  break;
 800520c:	e0b9      	b.n	8005382 <TIM4_IRQHandler+0x226>
		  }
		  case 1: { // Z2 (transmit) > Z1 (receive)
			  setZ2transmit; // Set Z2 port to output mode
 800520e:	4b67      	ldr	r3, [pc, #412]	; (80053ac <TIM4_IRQHandler+0x250>)
 8005210:	685b      	ldr	r3, [r3, #4]
 8005212:	f023 03e0 	bic.w	r3, r3, #224	; 0xe0
 8005216:	4a65      	ldr	r2, [pc, #404]	; (80053ac <TIM4_IRQHandler+0x250>)
 8005218:	f043 03a0 	orr.w	r3, r3, #160	; 0xa0
 800521c:	6053      	str	r3, [r2, #4]
			  GPIOB->ODR |= (1 << Z1Receive); 				// Turn on multiplexer for input Z1 channel.
 800521e:	4b60      	ldr	r3, [pc, #384]	; (80053a0 <TIM4_IRQHandler+0x244>)
 8005220:	68db      	ldr	r3, [r3, #12]
 8005222:	4a5f      	ldr	r2, [pc, #380]	; (80053a0 <TIM4_IRQHandler+0x244>)
 8005224:	f043 0302 	orr.w	r3, r3, #2
 8005228:	60d3      	str	r3, [r2, #12]
			  HAL_TIM_OC_Start(&htim1, TIM_CHANNEL_2);
 800522a:	2104      	movs	r1, #4
 800522c:	485e      	ldr	r0, [pc, #376]	; (80053a8 <TIM4_IRQHandler+0x24c>)
 800522e:	f002 ffff 	bl	8008230 <HAL_TIM_OC_Start>
			  break;
 8005232:	e0a6      	b.n	8005382 <TIM4_IRQHandler+0x226>
		  }
		  case 2: { // Z2 (transmit) > Z3 (receive)
			  //TIM3->ARR = 31000;
			  setZ2transmit; // Set Z2 port to output mode
 8005234:	4b5d      	ldr	r3, [pc, #372]	; (80053ac <TIM4_IRQHandler+0x250>)
 8005236:	685b      	ldr	r3, [r3, #4]
 8005238:	f023 03e0 	bic.w	r3, r3, #224	; 0xe0
 800523c:	4a5b      	ldr	r2, [pc, #364]	; (80053ac <TIM4_IRQHandler+0x250>)
 800523e:	f043 03a0 	orr.w	r3, r3, #160	; 0xa0
 8005242:	6053      	str	r3, [r2, #4]
			  GPIOB->ODR |= (1 << Z3Receive); 				// Turn on multiplexer for input Z3 channel.
 8005244:	4b56      	ldr	r3, [pc, #344]	; (80053a0 <TIM4_IRQHandler+0x244>)
 8005246:	68db      	ldr	r3, [r3, #12]
 8005248:	4a55      	ldr	r2, [pc, #340]	; (80053a0 <TIM4_IRQHandler+0x244>)
 800524a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800524e:	60d3      	str	r3, [r2, #12]
			  HAL_TIM_OC_Start(&htim1, TIM_CHANNEL_2);
 8005250:	2104      	movs	r1, #4
 8005252:	4855      	ldr	r0, [pc, #340]	; (80053a8 <TIM4_IRQHandler+0x24c>)
 8005254:	f002 ffec 	bl	8008230 <HAL_TIM_OC_Start>
			  break;
 8005258:	e093      	b.n	8005382 <TIM4_IRQHandler+0x226>
		  }
		  case 3: { // Z3 (transmit) > Z2 (receive)
			  //TIM3->ARR = 31000;
			  setZ3transmit; // Set Z3 port to output mode
 800525a:	4b54      	ldr	r3, [pc, #336]	; (80053ac <TIM4_IRQHandler+0x250>)
 800525c:	685b      	ldr	r3, [r3, #4]
 800525e:	f423 6360 	bic.w	r3, r3, #3584	; 0xe00
 8005262:	4a52      	ldr	r2, [pc, #328]	; (80053ac <TIM4_IRQHandler+0x250>)
 8005264:	f443 6320 	orr.w	r3, r3, #2560	; 0xa00
 8005268:	6053      	str	r3, [r2, #4]
			  GPIOB->ODR |= (1 << Z2Receive); 				// Turn on multiplexer for input Z2 channel.
 800526a:	4b4d      	ldr	r3, [pc, #308]	; (80053a0 <TIM4_IRQHandler+0x244>)
 800526c:	68db      	ldr	r3, [r3, #12]
 800526e:	4a4c      	ldr	r2, [pc, #304]	; (80053a0 <TIM4_IRQHandler+0x244>)
 8005270:	f043 0304 	orr.w	r3, r3, #4
 8005274:	60d3      	str	r3, [r2, #12]
			  HAL_TIM_OC_Start(&htim1, TIM_CHANNEL_3);
 8005276:	2108      	movs	r1, #8
 8005278:	484b      	ldr	r0, [pc, #300]	; (80053a8 <TIM4_IRQHandler+0x24c>)
 800527a:	f002 ffd9 	bl	8008230 <HAL_TIM_OC_Start>
			  break;
 800527e:	e080      	b.n	8005382 <TIM4_IRQHandler+0x226>
		  }
		  case 4: { // Z3 (transmit) > Z4 (receive)
			  setZ3transmit; // Set Z3 port to output mode
 8005280:	4b4a      	ldr	r3, [pc, #296]	; (80053ac <TIM4_IRQHandler+0x250>)
 8005282:	685b      	ldr	r3, [r3, #4]
 8005284:	f423 6360 	bic.w	r3, r3, #3584	; 0xe00
 8005288:	4a48      	ldr	r2, [pc, #288]	; (80053ac <TIM4_IRQHandler+0x250>)
 800528a:	f443 6320 	orr.w	r3, r3, #2560	; 0xa00
 800528e:	6053      	str	r3, [r2, #4]
			  GPIOB->ODR |= (uint16_t) (1 << Z4Receive); 	// Turn on multiplexer for input Z4 channel.
 8005290:	4b43      	ldr	r3, [pc, #268]	; (80053a0 <TIM4_IRQHandler+0x244>)
 8005292:	68db      	ldr	r3, [r3, #12]
 8005294:	4a42      	ldr	r2, [pc, #264]	; (80053a0 <TIM4_IRQHandler+0x244>)
 8005296:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800529a:	60d3      	str	r3, [r2, #12]
			  HAL_TIM_OC_Start(&htim1, TIM_CHANNEL_3);
 800529c:	2108      	movs	r1, #8
 800529e:	4842      	ldr	r0, [pc, #264]	; (80053a8 <TIM4_IRQHandler+0x24c>)
 80052a0:	f002 ffc6 	bl	8008230 <HAL_TIM_OC_Start>
			  break;
 80052a4:	e06d      	b.n	8005382 <TIM4_IRQHandler+0x226>
		  }
		  case 5: { // Z4 (transmit) > Z3 (receive)
			  setZ4transmit; // Set Z4 port to output mode
 80052a6:	4b41      	ldr	r3, [pc, #260]	; (80053ac <TIM4_IRQHandler+0x250>)
 80052a8:	685b      	ldr	r3, [r3, #4]
 80052aa:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 80052ae:	4a3f      	ldr	r2, [pc, #252]	; (80053ac <TIM4_IRQHandler+0x250>)
 80052b0:	f443 4320 	orr.w	r3, r3, #40960	; 0xa000
 80052b4:	6053      	str	r3, [r2, #4]
			  GPIOB->ODR |= (1 << Z3Receive); 				// Turn on multiplexer for input Z3 channel.
 80052b6:	4b3a      	ldr	r3, [pc, #232]	; (80053a0 <TIM4_IRQHandler+0x244>)
 80052b8:	68db      	ldr	r3, [r3, #12]
 80052ba:	4a39      	ldr	r2, [pc, #228]	; (80053a0 <TIM4_IRQHandler+0x244>)
 80052bc:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80052c0:	60d3      	str	r3, [r2, #12]
			  HAL_TIM_OC_Start(&htim1, TIM_CHANNEL_4);
 80052c2:	210c      	movs	r1, #12
 80052c4:	4838      	ldr	r0, [pc, #224]	; (80053a8 <TIM4_IRQHandler+0x24c>)
 80052c6:	f002 ffb3 	bl	8008230 <HAL_TIM_OC_Start>
			  break;
 80052ca:	e05a      	b.n	8005382 <TIM4_IRQHandler+0x226>
		  }
		  case 6: { // Z4 (transmit) > Z1 (receive)
			  //TIM3->ARR = 30400;
			  setZ4transmit;	// Set Z4 port to output mode
 80052cc:	4b37      	ldr	r3, [pc, #220]	; (80053ac <TIM4_IRQHandler+0x250>)
 80052ce:	685b      	ldr	r3, [r3, #4]
 80052d0:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 80052d4:	4a35      	ldr	r2, [pc, #212]	; (80053ac <TIM4_IRQHandler+0x250>)
 80052d6:	f443 4320 	orr.w	r3, r3, #40960	; 0xa000
 80052da:	6053      	str	r3, [r2, #4]
			  GPIOB->ODR |= (1 << Z1Receive); 				// Turn on multiplexer for input Z1 channel.
 80052dc:	4b30      	ldr	r3, [pc, #192]	; (80053a0 <TIM4_IRQHandler+0x244>)
 80052de:	68db      	ldr	r3, [r3, #12]
 80052e0:	4a2f      	ldr	r2, [pc, #188]	; (80053a0 <TIM4_IRQHandler+0x244>)
 80052e2:	f043 0302 	orr.w	r3, r3, #2
 80052e6:	60d3      	str	r3, [r2, #12]
			  HAL_TIM_OC_Start(&htim1, TIM_CHANNEL_4);
 80052e8:	210c      	movs	r1, #12
 80052ea:	482f      	ldr	r0, [pc, #188]	; (80053a8 <TIM4_IRQHandler+0x24c>)
 80052ec:	f002 ffa0 	bl	8008230 <HAL_TIM_OC_Start>
			  break;
 80052f0:	e047      	b.n	8005382 <TIM4_IRQHandler+0x226>
		  }
		  case 7: { // Z1 (transmit) > Z4 (receive)
			  //TIM3->ARR = 30400;
			  setZ1transmit;	// Set Z1 port to output mode
 80052f2:	4b2e      	ldr	r3, [pc, #184]	; (80053ac <TIM4_IRQHandler+0x250>)
 80052f4:	685b      	ldr	r3, [r3, #4]
 80052f6:	f023 030e 	bic.w	r3, r3, #14
 80052fa:	4a2c      	ldr	r2, [pc, #176]	; (80053ac <TIM4_IRQHandler+0x250>)
 80052fc:	f043 030a 	orr.w	r3, r3, #10
 8005300:	6053      	str	r3, [r2, #4]
			  GPIOB->ODR |= (1 << Z4Receive); 				// Turn on multiplexer for input Z4 channel.
 8005302:	4b27      	ldr	r3, [pc, #156]	; (80053a0 <TIM4_IRQHandler+0x244>)
 8005304:	68db      	ldr	r3, [r3, #12]
 8005306:	4a26      	ldr	r2, [pc, #152]	; (80053a0 <TIM4_IRQHandler+0x244>)
 8005308:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800530c:	60d3      	str	r3, [r2, #12]
			  HAL_TIM_OC_Start(&htim1, TIM_CHANNEL_1);
 800530e:	2100      	movs	r1, #0
 8005310:	4825      	ldr	r0, [pc, #148]	; (80053a8 <TIM4_IRQHandler+0x24c>)
 8005312:	f002 ff8d 	bl	8008230 <HAL_TIM_OC_Start>
			  break;
 8005316:	e034      	b.n	8005382 <TIM4_IRQHandler+0x226>
		  }
		  case 8: { // All data complete.
			  readyFlag = TRUE;
 8005318:	4b26      	ldr	r3, [pc, #152]	; (80053b4 <TIM4_IRQHandler+0x258>)
 800531a:	2201      	movs	r2, #1
 800531c:	701a      	strb	r2, [r3, #0]
			  X = (Z12 - Z21 + Z43 - Z34) / 2;
 800531e:	4b26      	ldr	r3, [pc, #152]	; (80053b8 <TIM4_IRQHandler+0x25c>)
 8005320:	881b      	ldrh	r3, [r3, #0]
 8005322:	461a      	mov	r2, r3
 8005324:	4b25      	ldr	r3, [pc, #148]	; (80053bc <TIM4_IRQHandler+0x260>)
 8005326:	881b      	ldrh	r3, [r3, #0]
 8005328:	1ad3      	subs	r3, r2, r3
 800532a:	4a25      	ldr	r2, [pc, #148]	; (80053c0 <TIM4_IRQHandler+0x264>)
 800532c:	8812      	ldrh	r2, [r2, #0]
 800532e:	4413      	add	r3, r2
 8005330:	4a24      	ldr	r2, [pc, #144]	; (80053c4 <TIM4_IRQHandler+0x268>)
 8005332:	8812      	ldrh	r2, [r2, #0]
 8005334:	1a9b      	subs	r3, r3, r2
 8005336:	0fda      	lsrs	r2, r3, #31
 8005338:	4413      	add	r3, r2
 800533a:	105b      	asrs	r3, r3, #1
 800533c:	4618      	mov	r0, r3
 800533e:	f7fb f861 	bl	8000404 <__aeabi_i2d>
 8005342:	4602      	mov	r2, r0
 8005344:	460b      	mov	r3, r1
 8005346:	4920      	ldr	r1, [pc, #128]	; (80053c8 <TIM4_IRQHandler+0x26c>)
 8005348:	e9c1 2300 	strd	r2, r3, [r1]
			  Y = (Z23 - Z32 + Z14 - Z41) / 2;
 800534c:	4b1f      	ldr	r3, [pc, #124]	; (80053cc <TIM4_IRQHandler+0x270>)
 800534e:	881b      	ldrh	r3, [r3, #0]
 8005350:	461a      	mov	r2, r3
 8005352:	4b1f      	ldr	r3, [pc, #124]	; (80053d0 <TIM4_IRQHandler+0x274>)
 8005354:	881b      	ldrh	r3, [r3, #0]
 8005356:	1ad3      	subs	r3, r2, r3
 8005358:	4a1e      	ldr	r2, [pc, #120]	; (80053d4 <TIM4_IRQHandler+0x278>)
 800535a:	8812      	ldrh	r2, [r2, #0]
 800535c:	4413      	add	r3, r2
 800535e:	4a1e      	ldr	r2, [pc, #120]	; (80053d8 <TIM4_IRQHandler+0x27c>)
 8005360:	8812      	ldrh	r2, [r2, #0]
 8005362:	1a9b      	subs	r3, r3, r2
 8005364:	0fda      	lsrs	r2, r3, #31
 8005366:	4413      	add	r3, r2
 8005368:	105b      	asrs	r3, r3, #1
 800536a:	4618      	mov	r0, r3
 800536c:	f7fb f84a 	bl	8000404 <__aeabi_i2d>
 8005370:	4602      	mov	r2, r0
 8005372:	460b      	mov	r3, r1
 8005374:	4919      	ldr	r1, [pc, #100]	; (80053dc <TIM4_IRQHandler+0x280>)
 8005376:	e9c1 2300 	strd	r2, r3, [r1]
			  currentMode = 0;
 800537a:	4b0d      	ldr	r3, [pc, #52]	; (80053b0 <TIM4_IRQHandler+0x254>)
 800537c:	2200      	movs	r2, #0
 800537e:	801a      	strh	r2, [r3, #0]
			  break;
 8005380:	bf00      	nop
		  }
	  }
	  runFlag = FALSE;
 8005382:	4b17      	ldr	r3, [pc, #92]	; (80053e0 <TIM4_IRQHandler+0x284>)
 8005384:	2200      	movs	r2, #0
 8005386:	701a      	strb	r2, [r3, #0]
	  HAL_TIM_IC_Start_DMA(&htim2, TIM_CHANNEL_1, (uint32_t*) &fastCounter, 1);
 8005388:	2301      	movs	r3, #1
 800538a:	4a16      	ldr	r2, [pc, #88]	; (80053e4 <TIM4_IRQHandler+0x288>)
 800538c:	2100      	movs	r1, #0
 800538e:	4805      	ldr	r0, [pc, #20]	; (80053a4 <TIM4_IRQHandler+0x248>)
 8005390:	f003 f8ac 	bl	80084ec <HAL_TIM_IC_Start_DMA>

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8005394:	4814      	ldr	r0, [pc, #80]	; (80053e8 <TIM4_IRQHandler+0x28c>)
 8005396:	f003 fb46 	bl	8008a26 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 800539a:	bf00      	nop
 800539c:	bd80      	pop	{r7, pc}
 800539e:	bf00      	nop
 80053a0:	40010c00 	.word	0x40010c00
 80053a4:	20000594 	.word	0x20000594
 80053a8:	20000544 	.word	0x20000544
 80053ac:	40010800 	.word	0x40010800
 80053b0:	2000058e 	.word	0x2000058e
 80053b4:	20000328 	.word	0x20000328
 80053b8:	20000536 	.word	0x20000536
 80053bc:	20000480 	.word	0x20000480
 80053c0:	20000540 	.word	0x20000540
 80053c4:	20000490 	.word	0x20000490
 80053c8:	200005e0 	.word	0x200005e0
 80053cc:	20000590 	.word	0x20000590
 80053d0:	2000058c 	.word	0x2000058c
 80053d4:	2000041c 	.word	0x2000041c
 80053d8:	20000482 	.word	0x20000482
 80053dc:	20000488 	.word	0x20000488
 80053e0:	20000534 	.word	0x20000534
 80053e4:	200004e0 	.word	0x200004e0
 80053e8:	200003d4 	.word	0x200003d4

080053ec <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80053ec:	b480      	push	{r7}
 80053ee:	af00      	add	r7, sp, #0
	return 1;
 80053f0:	2301      	movs	r3, #1
}
 80053f2:	4618      	mov	r0, r3
 80053f4:	46bd      	mov	sp, r7
 80053f6:	bc80      	pop	{r7}
 80053f8:	4770      	bx	lr

080053fa <_kill>:

int _kill(int pid, int sig)
{
 80053fa:	b580      	push	{r7, lr}
 80053fc:	b082      	sub	sp, #8
 80053fe:	af00      	add	r7, sp, #0
 8005400:	6078      	str	r0, [r7, #4]
 8005402:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8005404:	f006 f816 	bl	800b434 <__errno>
 8005408:	4603      	mov	r3, r0
 800540a:	2216      	movs	r2, #22
 800540c:	601a      	str	r2, [r3, #0]
	return -1;
 800540e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8005412:	4618      	mov	r0, r3
 8005414:	3708      	adds	r7, #8
 8005416:	46bd      	mov	sp, r7
 8005418:	bd80      	pop	{r7, pc}

0800541a <_exit>:

void _exit (int status)
{
 800541a:	b580      	push	{r7, lr}
 800541c:	b082      	sub	sp, #8
 800541e:	af00      	add	r7, sp, #0
 8005420:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8005422:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8005426:	6878      	ldr	r0, [r7, #4]
 8005428:	f7ff ffe7 	bl	80053fa <_kill>
	while (1) {}		/* Make sure we hang here */
 800542c:	e7fe      	b.n	800542c <_exit+0x12>

0800542e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800542e:	b580      	push	{r7, lr}
 8005430:	b086      	sub	sp, #24
 8005432:	af00      	add	r7, sp, #0
 8005434:	60f8      	str	r0, [r7, #12]
 8005436:	60b9      	str	r1, [r7, #8]
 8005438:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800543a:	2300      	movs	r3, #0
 800543c:	617b      	str	r3, [r7, #20]
 800543e:	e00a      	b.n	8005456 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8005440:	f3af 8000 	nop.w
 8005444:	4601      	mov	r1, r0
 8005446:	68bb      	ldr	r3, [r7, #8]
 8005448:	1c5a      	adds	r2, r3, #1
 800544a:	60ba      	str	r2, [r7, #8]
 800544c:	b2ca      	uxtb	r2, r1
 800544e:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005450:	697b      	ldr	r3, [r7, #20]
 8005452:	3301      	adds	r3, #1
 8005454:	617b      	str	r3, [r7, #20]
 8005456:	697a      	ldr	r2, [r7, #20]
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	429a      	cmp	r2, r3
 800545c:	dbf0      	blt.n	8005440 <_read+0x12>
	}

return len;
 800545e:	687b      	ldr	r3, [r7, #4]
}
 8005460:	4618      	mov	r0, r3
 8005462:	3718      	adds	r7, #24
 8005464:	46bd      	mov	sp, r7
 8005466:	bd80      	pop	{r7, pc}

08005468 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8005468:	b580      	push	{r7, lr}
 800546a:	b086      	sub	sp, #24
 800546c:	af00      	add	r7, sp, #0
 800546e:	60f8      	str	r0, [r7, #12]
 8005470:	60b9      	str	r1, [r7, #8]
 8005472:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005474:	2300      	movs	r3, #0
 8005476:	617b      	str	r3, [r7, #20]
 8005478:	e009      	b.n	800548e <_write+0x26>
	{
		__io_putchar(*ptr++);
 800547a:	68bb      	ldr	r3, [r7, #8]
 800547c:	1c5a      	adds	r2, r3, #1
 800547e:	60ba      	str	r2, [r7, #8]
 8005480:	781b      	ldrb	r3, [r3, #0]
 8005482:	4618      	mov	r0, r3
 8005484:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005488:	697b      	ldr	r3, [r7, #20]
 800548a:	3301      	adds	r3, #1
 800548c:	617b      	str	r3, [r7, #20]
 800548e:	697a      	ldr	r2, [r7, #20]
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	429a      	cmp	r2, r3
 8005494:	dbf1      	blt.n	800547a <_write+0x12>
	}
	return len;
 8005496:	687b      	ldr	r3, [r7, #4]
}
 8005498:	4618      	mov	r0, r3
 800549a:	3718      	adds	r7, #24
 800549c:	46bd      	mov	sp, r7
 800549e:	bd80      	pop	{r7, pc}

080054a0 <_close>:

int _close(int file)
{
 80054a0:	b480      	push	{r7}
 80054a2:	b083      	sub	sp, #12
 80054a4:	af00      	add	r7, sp, #0
 80054a6:	6078      	str	r0, [r7, #4]
	return -1;
 80054a8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80054ac:	4618      	mov	r0, r3
 80054ae:	370c      	adds	r7, #12
 80054b0:	46bd      	mov	sp, r7
 80054b2:	bc80      	pop	{r7}
 80054b4:	4770      	bx	lr

080054b6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80054b6:	b480      	push	{r7}
 80054b8:	b083      	sub	sp, #12
 80054ba:	af00      	add	r7, sp, #0
 80054bc:	6078      	str	r0, [r7, #4]
 80054be:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80054c0:	683b      	ldr	r3, [r7, #0]
 80054c2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80054c6:	605a      	str	r2, [r3, #4]
	return 0;
 80054c8:	2300      	movs	r3, #0
}
 80054ca:	4618      	mov	r0, r3
 80054cc:	370c      	adds	r7, #12
 80054ce:	46bd      	mov	sp, r7
 80054d0:	bc80      	pop	{r7}
 80054d2:	4770      	bx	lr

080054d4 <_isatty>:

int _isatty(int file)
{
 80054d4:	b480      	push	{r7}
 80054d6:	b083      	sub	sp, #12
 80054d8:	af00      	add	r7, sp, #0
 80054da:	6078      	str	r0, [r7, #4]
	return 1;
 80054dc:	2301      	movs	r3, #1
}
 80054de:	4618      	mov	r0, r3
 80054e0:	370c      	adds	r7, #12
 80054e2:	46bd      	mov	sp, r7
 80054e4:	bc80      	pop	{r7}
 80054e6:	4770      	bx	lr

080054e8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80054e8:	b480      	push	{r7}
 80054ea:	b085      	sub	sp, #20
 80054ec:	af00      	add	r7, sp, #0
 80054ee:	60f8      	str	r0, [r7, #12]
 80054f0:	60b9      	str	r1, [r7, #8]
 80054f2:	607a      	str	r2, [r7, #4]
	return 0;
 80054f4:	2300      	movs	r3, #0
}
 80054f6:	4618      	mov	r0, r3
 80054f8:	3714      	adds	r7, #20
 80054fa:	46bd      	mov	sp, r7
 80054fc:	bc80      	pop	{r7}
 80054fe:	4770      	bx	lr

08005500 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8005500:	b580      	push	{r7, lr}
 8005502:	b086      	sub	sp, #24
 8005504:	af00      	add	r7, sp, #0
 8005506:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8005508:	4a14      	ldr	r2, [pc, #80]	; (800555c <_sbrk+0x5c>)
 800550a:	4b15      	ldr	r3, [pc, #84]	; (8005560 <_sbrk+0x60>)
 800550c:	1ad3      	subs	r3, r2, r3
 800550e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8005510:	697b      	ldr	r3, [r7, #20]
 8005512:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8005514:	4b13      	ldr	r3, [pc, #76]	; (8005564 <_sbrk+0x64>)
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	2b00      	cmp	r3, #0
 800551a:	d102      	bne.n	8005522 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800551c:	4b11      	ldr	r3, [pc, #68]	; (8005564 <_sbrk+0x64>)
 800551e:	4a12      	ldr	r2, [pc, #72]	; (8005568 <_sbrk+0x68>)
 8005520:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8005522:	4b10      	ldr	r3, [pc, #64]	; (8005564 <_sbrk+0x64>)
 8005524:	681a      	ldr	r2, [r3, #0]
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	4413      	add	r3, r2
 800552a:	693a      	ldr	r2, [r7, #16]
 800552c:	429a      	cmp	r2, r3
 800552e:	d207      	bcs.n	8005540 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8005530:	f005 ff80 	bl	800b434 <__errno>
 8005534:	4603      	mov	r3, r0
 8005536:	220c      	movs	r2, #12
 8005538:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800553a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800553e:	e009      	b.n	8005554 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8005540:	4b08      	ldr	r3, [pc, #32]	; (8005564 <_sbrk+0x64>)
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8005546:	4b07      	ldr	r3, [pc, #28]	; (8005564 <_sbrk+0x64>)
 8005548:	681a      	ldr	r2, [r3, #0]
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	4413      	add	r3, r2
 800554e:	4a05      	ldr	r2, [pc, #20]	; (8005564 <_sbrk+0x64>)
 8005550:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8005552:	68fb      	ldr	r3, [r7, #12]
}
 8005554:	4618      	mov	r0, r3
 8005556:	3718      	adds	r7, #24
 8005558:	46bd      	mov	sp, r7
 800555a:	bd80      	pop	{r7, pc}
 800555c:	20005000 	.word	0x20005000
 8005560:	00000400 	.word	0x00000400
 8005564:	200002e4 	.word	0x200002e4
 8005568:	20000600 	.word	0x20000600

0800556c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800556c:	b480      	push	{r7}
 800556e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8005570:	bf00      	nop
 8005572:	46bd      	mov	sp, r7
 8005574:	bc80      	pop	{r7}
 8005576:	4770      	bx	lr

08005578 <WIZCHIP_READ>:

#if   (_WIZCHIP_ == 5500)
////////////////////////////////////////////////////

uint8_t  WIZCHIP_READ(uint32_t AddrSel)
{
 8005578:	b580      	push	{r7, lr}
 800557a:	b084      	sub	sp, #16
 800557c:	af00      	add	r7, sp, #0
 800557e:	6078      	str	r0, [r7, #4]
   uint8_t ret;
   uint8_t spi_data[3];

   WIZCHIP_CRITICAL_ENTER();
 8005580:	4b22      	ldr	r3, [pc, #136]	; (800560c <WIZCHIP_READ+0x94>)
 8005582:	68db      	ldr	r3, [r3, #12]
 8005584:	4798      	blx	r3
   WIZCHIP.CS._select();
 8005586:	4b21      	ldr	r3, [pc, #132]	; (800560c <WIZCHIP_READ+0x94>)
 8005588:	695b      	ldr	r3, [r3, #20]
 800558a:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_READ_ | _W5500_SPI_VDM_OP_);

   if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
 800558c:	4b1f      	ldr	r3, [pc, #124]	; (800560c <WIZCHIP_READ+0x94>)
 800558e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005590:	2b00      	cmp	r3, #0
 8005592:	d003      	beq.n	800559c <WIZCHIP_READ+0x24>
 8005594:	4b1d      	ldr	r3, [pc, #116]	; (800560c <WIZCHIP_READ+0x94>)
 8005596:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005598:	2b00      	cmp	r3, #0
 800559a:	d114      	bne.n	80055c6 <WIZCHIP_READ+0x4e>
   {
	   WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 800559c:	4b1b      	ldr	r3, [pc, #108]	; (800560c <WIZCHIP_READ+0x94>)
 800559e:	6a1b      	ldr	r3, [r3, #32]
 80055a0:	687a      	ldr	r2, [r7, #4]
 80055a2:	0c12      	lsrs	r2, r2, #16
 80055a4:	b2d2      	uxtb	r2, r2
 80055a6:	4610      	mov	r0, r2
 80055a8:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 80055aa:	4b18      	ldr	r3, [pc, #96]	; (800560c <WIZCHIP_READ+0x94>)
 80055ac:	6a1b      	ldr	r3, [r3, #32]
 80055ae:	687a      	ldr	r2, [r7, #4]
 80055b0:	0a12      	lsrs	r2, r2, #8
 80055b2:	b2d2      	uxtb	r2, r2
 80055b4:	4610      	mov	r0, r2
 80055b6:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 80055b8:	4b14      	ldr	r3, [pc, #80]	; (800560c <WIZCHIP_READ+0x94>)
 80055ba:	6a1b      	ldr	r3, [r3, #32]
 80055bc:	687a      	ldr	r2, [r7, #4]
 80055be:	b2d2      	uxtb	r2, r2
 80055c0:	4610      	mov	r0, r2
 80055c2:	4798      	blx	r3
 80055c4:	e011      	b.n	80055ea <WIZCHIP_READ+0x72>
   }
   else																// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	0c1b      	lsrs	r3, r3, #16
 80055ca:	b2db      	uxtb	r3, r3
 80055cc:	733b      	strb	r3, [r7, #12]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	0a1b      	lsrs	r3, r3, #8
 80055d2:	b2db      	uxtb	r3, r3
 80055d4:	737b      	strb	r3, [r7, #13]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	b2db      	uxtb	r3, r3
 80055da:	73bb      	strb	r3, [r7, #14]
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
 80055dc:	4b0b      	ldr	r3, [pc, #44]	; (800560c <WIZCHIP_READ+0x94>)
 80055de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055e0:	f107 020c 	add.w	r2, r7, #12
 80055e4:	2103      	movs	r1, #3
 80055e6:	4610      	mov	r0, r2
 80055e8:	4798      	blx	r3
   }
   ret = WIZCHIP.IF.SPI._read_byte();
 80055ea:	4b08      	ldr	r3, [pc, #32]	; (800560c <WIZCHIP_READ+0x94>)
 80055ec:	69db      	ldr	r3, [r3, #28]
 80055ee:	4798      	blx	r3
 80055f0:	4603      	mov	r3, r0
 80055f2:	73fb      	strb	r3, [r7, #15]

   WIZCHIP.CS._deselect();
 80055f4:	4b05      	ldr	r3, [pc, #20]	; (800560c <WIZCHIP_READ+0x94>)
 80055f6:	699b      	ldr	r3, [r3, #24]
 80055f8:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 80055fa:	4b04      	ldr	r3, [pc, #16]	; (800560c <WIZCHIP_READ+0x94>)
 80055fc:	691b      	ldr	r3, [r3, #16]
 80055fe:	4798      	blx	r3
   return ret;
 8005600:	7bfb      	ldrb	r3, [r7, #15]
}
 8005602:	4618      	mov	r0, r3
 8005604:	3710      	adds	r7, #16
 8005606:	46bd      	mov	sp, r7
 8005608:	bd80      	pop	{r7, pc}
 800560a:	bf00      	nop
 800560c:	20000024 	.word	0x20000024

08005610 <WIZCHIP_WRITE>:

void     WIZCHIP_WRITE(uint32_t AddrSel, uint8_t wb )
{
 8005610:	b580      	push	{r7, lr}
 8005612:	b084      	sub	sp, #16
 8005614:	af00      	add	r7, sp, #0
 8005616:	6078      	str	r0, [r7, #4]
 8005618:	460b      	mov	r3, r1
 800561a:	70fb      	strb	r3, [r7, #3]
   uint8_t spi_data[4];

   WIZCHIP_CRITICAL_ENTER();
 800561c:	4b22      	ldr	r3, [pc, #136]	; (80056a8 <WIZCHIP_WRITE+0x98>)
 800561e:	68db      	ldr	r3, [r3, #12]
 8005620:	4798      	blx	r3
   WIZCHIP.CS._select();
 8005622:	4b21      	ldr	r3, [pc, #132]	; (80056a8 <WIZCHIP_WRITE+0x98>)
 8005624:	695b      	ldr	r3, [r3, #20]
 8005626:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_WRITE_ | _W5500_SPI_VDM_OP_);
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	f043 0304 	orr.w	r3, r3, #4
 800562e:	607b      	str	r3, [r7, #4]

   //if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
   if(!WIZCHIP.IF.SPI._write_burst) 	// byte operation
 8005630:	4b1d      	ldr	r3, [pc, #116]	; (80056a8 <WIZCHIP_WRITE+0x98>)
 8005632:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005634:	2b00      	cmp	r3, #0
 8005636:	d119      	bne.n	800566c <WIZCHIP_WRITE+0x5c>
   {
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 8005638:	4b1b      	ldr	r3, [pc, #108]	; (80056a8 <WIZCHIP_WRITE+0x98>)
 800563a:	6a1b      	ldr	r3, [r3, #32]
 800563c:	687a      	ldr	r2, [r7, #4]
 800563e:	0c12      	lsrs	r2, r2, #16
 8005640:	b2d2      	uxtb	r2, r2
 8005642:	4610      	mov	r0, r2
 8005644:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 8005646:	4b18      	ldr	r3, [pc, #96]	; (80056a8 <WIZCHIP_WRITE+0x98>)
 8005648:	6a1b      	ldr	r3, [r3, #32]
 800564a:	687a      	ldr	r2, [r7, #4]
 800564c:	0a12      	lsrs	r2, r2, #8
 800564e:	b2d2      	uxtb	r2, r2
 8005650:	4610      	mov	r0, r2
 8005652:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 8005654:	4b14      	ldr	r3, [pc, #80]	; (80056a8 <WIZCHIP_WRITE+0x98>)
 8005656:	6a1b      	ldr	r3, [r3, #32]
 8005658:	687a      	ldr	r2, [r7, #4]
 800565a:	b2d2      	uxtb	r2, r2
 800565c:	4610      	mov	r0, r2
 800565e:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte(wb);
 8005660:	4b11      	ldr	r3, [pc, #68]	; (80056a8 <WIZCHIP_WRITE+0x98>)
 8005662:	6a1b      	ldr	r3, [r3, #32]
 8005664:	78fa      	ldrb	r2, [r7, #3]
 8005666:	4610      	mov	r0, r2
 8005668:	4798      	blx	r3
 800566a:	e013      	b.n	8005694 <WIZCHIP_WRITE+0x84>
   }
   else									// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	0c1b      	lsrs	r3, r3, #16
 8005670:	b2db      	uxtb	r3, r3
 8005672:	733b      	strb	r3, [r7, #12]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	0a1b      	lsrs	r3, r3, #8
 8005678:	b2db      	uxtb	r3, r3
 800567a:	737b      	strb	r3, [r7, #13]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	b2db      	uxtb	r3, r3
 8005680:	73bb      	strb	r3, [r7, #14]
		spi_data[3] = wb;
 8005682:	78fb      	ldrb	r3, [r7, #3]
 8005684:	73fb      	strb	r3, [r7, #15]
		WIZCHIP.IF.SPI._write_burst(spi_data, 4);
 8005686:	4b08      	ldr	r3, [pc, #32]	; (80056a8 <WIZCHIP_WRITE+0x98>)
 8005688:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800568a:	f107 020c 	add.w	r2, r7, #12
 800568e:	2104      	movs	r1, #4
 8005690:	4610      	mov	r0, r2
 8005692:	4798      	blx	r3
   }

   WIZCHIP.CS._deselect();
 8005694:	4b04      	ldr	r3, [pc, #16]	; (80056a8 <WIZCHIP_WRITE+0x98>)
 8005696:	699b      	ldr	r3, [r3, #24]
 8005698:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 800569a:	4b03      	ldr	r3, [pc, #12]	; (80056a8 <WIZCHIP_WRITE+0x98>)
 800569c:	691b      	ldr	r3, [r3, #16]
 800569e:	4798      	blx	r3
}
 80056a0:	bf00      	nop
 80056a2:	3710      	adds	r7, #16
 80056a4:	46bd      	mov	sp, r7
 80056a6:	bd80      	pop	{r7, pc}
 80056a8:	20000024 	.word	0x20000024

080056ac <WIZCHIP_READ_BUF>:
         
void     WIZCHIP_READ_BUF (uint32_t AddrSel, uint8_t* pBuf, uint16_t len)
{
 80056ac:	b590      	push	{r4, r7, lr}
 80056ae:	b087      	sub	sp, #28
 80056b0:	af00      	add	r7, sp, #0
 80056b2:	60f8      	str	r0, [r7, #12]
 80056b4:	60b9      	str	r1, [r7, #8]
 80056b6:	4613      	mov	r3, r2
 80056b8:	80fb      	strh	r3, [r7, #6]
   uint8_t spi_data[3];
   uint16_t i;

   WIZCHIP_CRITICAL_ENTER();
 80056ba:	4b2b      	ldr	r3, [pc, #172]	; (8005768 <WIZCHIP_READ_BUF+0xbc>)
 80056bc:	68db      	ldr	r3, [r3, #12]
 80056be:	4798      	blx	r3
   WIZCHIP.CS._select();
 80056c0:	4b29      	ldr	r3, [pc, #164]	; (8005768 <WIZCHIP_READ_BUF+0xbc>)
 80056c2:	695b      	ldr	r3, [r3, #20]
 80056c4:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_READ_ | _W5500_SPI_VDM_OP_);

   if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
 80056c6:	4b28      	ldr	r3, [pc, #160]	; (8005768 <WIZCHIP_READ_BUF+0xbc>)
 80056c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d003      	beq.n	80056d6 <WIZCHIP_READ_BUF+0x2a>
 80056ce:	4b26      	ldr	r3, [pc, #152]	; (8005768 <WIZCHIP_READ_BUF+0xbc>)
 80056d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d126      	bne.n	8005724 <WIZCHIP_READ_BUF+0x78>
   {
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 80056d6:	4b24      	ldr	r3, [pc, #144]	; (8005768 <WIZCHIP_READ_BUF+0xbc>)
 80056d8:	6a1b      	ldr	r3, [r3, #32]
 80056da:	68fa      	ldr	r2, [r7, #12]
 80056dc:	0c12      	lsrs	r2, r2, #16
 80056de:	b2d2      	uxtb	r2, r2
 80056e0:	4610      	mov	r0, r2
 80056e2:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 80056e4:	4b20      	ldr	r3, [pc, #128]	; (8005768 <WIZCHIP_READ_BUF+0xbc>)
 80056e6:	6a1b      	ldr	r3, [r3, #32]
 80056e8:	68fa      	ldr	r2, [r7, #12]
 80056ea:	0a12      	lsrs	r2, r2, #8
 80056ec:	b2d2      	uxtb	r2, r2
 80056ee:	4610      	mov	r0, r2
 80056f0:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 80056f2:	4b1d      	ldr	r3, [pc, #116]	; (8005768 <WIZCHIP_READ_BUF+0xbc>)
 80056f4:	6a1b      	ldr	r3, [r3, #32]
 80056f6:	68fa      	ldr	r2, [r7, #12]
 80056f8:	b2d2      	uxtb	r2, r2
 80056fa:	4610      	mov	r0, r2
 80056fc:	4798      	blx	r3
		for(i = 0; i < len; i++)
 80056fe:	2300      	movs	r3, #0
 8005700:	82fb      	strh	r3, [r7, #22]
 8005702:	e00a      	b.n	800571a <WIZCHIP_READ_BUF+0x6e>
		   pBuf[i] = WIZCHIP.IF.SPI._read_byte();
 8005704:	4b18      	ldr	r3, [pc, #96]	; (8005768 <WIZCHIP_READ_BUF+0xbc>)
 8005706:	69db      	ldr	r3, [r3, #28]
 8005708:	8afa      	ldrh	r2, [r7, #22]
 800570a:	68b9      	ldr	r1, [r7, #8]
 800570c:	188c      	adds	r4, r1, r2
 800570e:	4798      	blx	r3
 8005710:	4603      	mov	r3, r0
 8005712:	7023      	strb	r3, [r4, #0]
		for(i = 0; i < len; i++)
 8005714:	8afb      	ldrh	r3, [r7, #22]
 8005716:	3301      	adds	r3, #1
 8005718:	82fb      	strh	r3, [r7, #22]
 800571a:	8afa      	ldrh	r2, [r7, #22]
 800571c:	88fb      	ldrh	r3, [r7, #6]
 800571e:	429a      	cmp	r2, r3
 8005720:	d3f0      	bcc.n	8005704 <WIZCHIP_READ_BUF+0x58>
   if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
 8005722:	e017      	b.n	8005754 <WIZCHIP_READ_BUF+0xa8>
   }
   else																// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	0c1b      	lsrs	r3, r3, #16
 8005728:	b2db      	uxtb	r3, r3
 800572a:	743b      	strb	r3, [r7, #16]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	0a1b      	lsrs	r3, r3, #8
 8005730:	b2db      	uxtb	r3, r3
 8005732:	747b      	strb	r3, [r7, #17]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	b2db      	uxtb	r3, r3
 8005738:	74bb      	strb	r3, [r7, #18]
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
 800573a:	4b0b      	ldr	r3, [pc, #44]	; (8005768 <WIZCHIP_READ_BUF+0xbc>)
 800573c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800573e:	f107 0210 	add.w	r2, r7, #16
 8005742:	2103      	movs	r1, #3
 8005744:	4610      	mov	r0, r2
 8005746:	4798      	blx	r3
		WIZCHIP.IF.SPI._read_burst(pBuf, len);
 8005748:	4b07      	ldr	r3, [pc, #28]	; (8005768 <WIZCHIP_READ_BUF+0xbc>)
 800574a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800574c:	88fa      	ldrh	r2, [r7, #6]
 800574e:	4611      	mov	r1, r2
 8005750:	68b8      	ldr	r0, [r7, #8]
 8005752:	4798      	blx	r3
   }

   WIZCHIP.CS._deselect();
 8005754:	4b04      	ldr	r3, [pc, #16]	; (8005768 <WIZCHIP_READ_BUF+0xbc>)
 8005756:	699b      	ldr	r3, [r3, #24]
 8005758:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 800575a:	4b03      	ldr	r3, [pc, #12]	; (8005768 <WIZCHIP_READ_BUF+0xbc>)
 800575c:	691b      	ldr	r3, [r3, #16]
 800575e:	4798      	blx	r3
}
 8005760:	bf00      	nop
 8005762:	371c      	adds	r7, #28
 8005764:	46bd      	mov	sp, r7
 8005766:	bd90      	pop	{r4, r7, pc}
 8005768:	20000024 	.word	0x20000024

0800576c <WIZCHIP_WRITE_BUF>:

void     WIZCHIP_WRITE_BUF(uint32_t AddrSel, uint8_t* pBuf, uint16_t len)
{
 800576c:	b580      	push	{r7, lr}
 800576e:	b086      	sub	sp, #24
 8005770:	af00      	add	r7, sp, #0
 8005772:	60f8      	str	r0, [r7, #12]
 8005774:	60b9      	str	r1, [r7, #8]
 8005776:	4613      	mov	r3, r2
 8005778:	80fb      	strh	r3, [r7, #6]
   uint8_t spi_data[3];
   uint16_t i;

   WIZCHIP_CRITICAL_ENTER();
 800577a:	4b2b      	ldr	r3, [pc, #172]	; (8005828 <WIZCHIP_WRITE_BUF+0xbc>)
 800577c:	68db      	ldr	r3, [r3, #12]
 800577e:	4798      	blx	r3
   WIZCHIP.CS._select();
 8005780:	4b29      	ldr	r3, [pc, #164]	; (8005828 <WIZCHIP_WRITE_BUF+0xbc>)
 8005782:	695b      	ldr	r3, [r3, #20]
 8005784:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_WRITE_ | _W5500_SPI_VDM_OP_);
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	f043 0304 	orr.w	r3, r3, #4
 800578c:	60fb      	str	r3, [r7, #12]

   if(!WIZCHIP.IF.SPI._write_burst) 	// byte operation
 800578e:	4b26      	ldr	r3, [pc, #152]	; (8005828 <WIZCHIP_WRITE_BUF+0xbc>)
 8005790:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005792:	2b00      	cmp	r3, #0
 8005794:	d126      	bne.n	80057e4 <WIZCHIP_WRITE_BUF+0x78>
   {
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 8005796:	4b24      	ldr	r3, [pc, #144]	; (8005828 <WIZCHIP_WRITE_BUF+0xbc>)
 8005798:	6a1b      	ldr	r3, [r3, #32]
 800579a:	68fa      	ldr	r2, [r7, #12]
 800579c:	0c12      	lsrs	r2, r2, #16
 800579e:	b2d2      	uxtb	r2, r2
 80057a0:	4610      	mov	r0, r2
 80057a2:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 80057a4:	4b20      	ldr	r3, [pc, #128]	; (8005828 <WIZCHIP_WRITE_BUF+0xbc>)
 80057a6:	6a1b      	ldr	r3, [r3, #32]
 80057a8:	68fa      	ldr	r2, [r7, #12]
 80057aa:	0a12      	lsrs	r2, r2, #8
 80057ac:	b2d2      	uxtb	r2, r2
 80057ae:	4610      	mov	r0, r2
 80057b0:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 80057b2:	4b1d      	ldr	r3, [pc, #116]	; (8005828 <WIZCHIP_WRITE_BUF+0xbc>)
 80057b4:	6a1b      	ldr	r3, [r3, #32]
 80057b6:	68fa      	ldr	r2, [r7, #12]
 80057b8:	b2d2      	uxtb	r2, r2
 80057ba:	4610      	mov	r0, r2
 80057bc:	4798      	blx	r3
		for(i = 0; i < len; i++)
 80057be:	2300      	movs	r3, #0
 80057c0:	82fb      	strh	r3, [r7, #22]
 80057c2:	e00a      	b.n	80057da <WIZCHIP_WRITE_BUF+0x6e>
			WIZCHIP.IF.SPI._write_byte(pBuf[i]);
 80057c4:	4b18      	ldr	r3, [pc, #96]	; (8005828 <WIZCHIP_WRITE_BUF+0xbc>)
 80057c6:	6a1b      	ldr	r3, [r3, #32]
 80057c8:	8afa      	ldrh	r2, [r7, #22]
 80057ca:	68b9      	ldr	r1, [r7, #8]
 80057cc:	440a      	add	r2, r1
 80057ce:	7812      	ldrb	r2, [r2, #0]
 80057d0:	4610      	mov	r0, r2
 80057d2:	4798      	blx	r3
		for(i = 0; i < len; i++)
 80057d4:	8afb      	ldrh	r3, [r7, #22]
 80057d6:	3301      	adds	r3, #1
 80057d8:	82fb      	strh	r3, [r7, #22]
 80057da:	8afa      	ldrh	r2, [r7, #22]
 80057dc:	88fb      	ldrh	r3, [r7, #6]
 80057de:	429a      	cmp	r2, r3
 80057e0:	d3f0      	bcc.n	80057c4 <WIZCHIP_WRITE_BUF+0x58>
 80057e2:	e017      	b.n	8005814 <WIZCHIP_WRITE_BUF+0xa8>
   }
   else									// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	0c1b      	lsrs	r3, r3, #16
 80057e8:	b2db      	uxtb	r3, r3
 80057ea:	743b      	strb	r3, [r7, #16]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	0a1b      	lsrs	r3, r3, #8
 80057f0:	b2db      	uxtb	r3, r3
 80057f2:	747b      	strb	r3, [r7, #17]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	b2db      	uxtb	r3, r3
 80057f8:	74bb      	strb	r3, [r7, #18]
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
 80057fa:	4b0b      	ldr	r3, [pc, #44]	; (8005828 <WIZCHIP_WRITE_BUF+0xbc>)
 80057fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057fe:	f107 0210 	add.w	r2, r7, #16
 8005802:	2103      	movs	r1, #3
 8005804:	4610      	mov	r0, r2
 8005806:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_burst(pBuf, len);
 8005808:	4b07      	ldr	r3, [pc, #28]	; (8005828 <WIZCHIP_WRITE_BUF+0xbc>)
 800580a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800580c:	88fa      	ldrh	r2, [r7, #6]
 800580e:	4611      	mov	r1, r2
 8005810:	68b8      	ldr	r0, [r7, #8]
 8005812:	4798      	blx	r3
   }

   WIZCHIP.CS._deselect();
 8005814:	4b04      	ldr	r3, [pc, #16]	; (8005828 <WIZCHIP_WRITE_BUF+0xbc>)
 8005816:	699b      	ldr	r3, [r3, #24]
 8005818:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 800581a:	4b03      	ldr	r3, [pc, #12]	; (8005828 <WIZCHIP_WRITE_BUF+0xbc>)
 800581c:	691b      	ldr	r3, [r3, #16]
 800581e:	4798      	blx	r3
}
 8005820:	bf00      	nop
 8005822:	3718      	adds	r7, #24
 8005824:	46bd      	mov	sp, r7
 8005826:	bd80      	pop	{r7, pc}
 8005828:	20000024 	.word	0x20000024

0800582c <getSn_TX_FSR>:


uint16_t getSn_TX_FSR(uint8_t sn)
{
 800582c:	b590      	push	{r4, r7, lr}
 800582e:	b085      	sub	sp, #20
 8005830:	af00      	add	r7, sp, #0
 8005832:	4603      	mov	r3, r0
 8005834:	71fb      	strb	r3, [r7, #7]
   uint16_t val=0,val1=0;
 8005836:	2300      	movs	r3, #0
 8005838:	81fb      	strh	r3, [r7, #14]
 800583a:	2300      	movs	r3, #0
 800583c:	81bb      	strh	r3, [r7, #12]

   do
   {
      val1 = WIZCHIP_READ(Sn_TX_FSR(sn));
 800583e:	79fb      	ldrb	r3, [r7, #7]
 8005840:	009b      	lsls	r3, r3, #2
 8005842:	3301      	adds	r3, #1
 8005844:	00db      	lsls	r3, r3, #3
 8005846:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800584a:	4618      	mov	r0, r3
 800584c:	f7ff fe94 	bl	8005578 <WIZCHIP_READ>
 8005850:	4603      	mov	r3, r0
 8005852:	81bb      	strh	r3, [r7, #12]
      val1 = (val1 << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_TX_FSR(sn),1));
 8005854:	89bb      	ldrh	r3, [r7, #12]
 8005856:	021b      	lsls	r3, r3, #8
 8005858:	b29c      	uxth	r4, r3
 800585a:	79fb      	ldrb	r3, [r7, #7]
 800585c:	009b      	lsls	r3, r3, #2
 800585e:	3301      	adds	r3, #1
 8005860:	00db      	lsls	r3, r3, #3
 8005862:	f503 5304 	add.w	r3, r3, #8448	; 0x2100
 8005866:	4618      	mov	r0, r3
 8005868:	f7ff fe86 	bl	8005578 <WIZCHIP_READ>
 800586c:	4603      	mov	r3, r0
 800586e:	b29b      	uxth	r3, r3
 8005870:	4423      	add	r3, r4
 8005872:	81bb      	strh	r3, [r7, #12]
      if (val1 != 0)
 8005874:	89bb      	ldrh	r3, [r7, #12]
 8005876:	2b00      	cmp	r3, #0
 8005878:	d01a      	beq.n	80058b0 <getSn_TX_FSR+0x84>
      {
        val = WIZCHIP_READ(Sn_TX_FSR(sn));
 800587a:	79fb      	ldrb	r3, [r7, #7]
 800587c:	009b      	lsls	r3, r3, #2
 800587e:	3301      	adds	r3, #1
 8005880:	00db      	lsls	r3, r3, #3
 8005882:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8005886:	4618      	mov	r0, r3
 8005888:	f7ff fe76 	bl	8005578 <WIZCHIP_READ>
 800588c:	4603      	mov	r3, r0
 800588e:	81fb      	strh	r3, [r7, #14]
        val = (val << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_TX_FSR(sn),1));
 8005890:	89fb      	ldrh	r3, [r7, #14]
 8005892:	021b      	lsls	r3, r3, #8
 8005894:	b29c      	uxth	r4, r3
 8005896:	79fb      	ldrb	r3, [r7, #7]
 8005898:	009b      	lsls	r3, r3, #2
 800589a:	3301      	adds	r3, #1
 800589c:	00db      	lsls	r3, r3, #3
 800589e:	f503 5304 	add.w	r3, r3, #8448	; 0x2100
 80058a2:	4618      	mov	r0, r3
 80058a4:	f7ff fe68 	bl	8005578 <WIZCHIP_READ>
 80058a8:	4603      	mov	r3, r0
 80058aa:	b29b      	uxth	r3, r3
 80058ac:	4423      	add	r3, r4
 80058ae:	81fb      	strh	r3, [r7, #14]
      }
   }while (val != val1);
 80058b0:	89fa      	ldrh	r2, [r7, #14]
 80058b2:	89bb      	ldrh	r3, [r7, #12]
 80058b4:	429a      	cmp	r2, r3
 80058b6:	d1c2      	bne.n	800583e <getSn_TX_FSR+0x12>
   return val;
 80058b8:	89fb      	ldrh	r3, [r7, #14]
}
 80058ba:	4618      	mov	r0, r3
 80058bc:	3714      	adds	r7, #20
 80058be:	46bd      	mov	sp, r7
 80058c0:	bd90      	pop	{r4, r7, pc}

080058c2 <getSn_RX_RSR>:


uint16_t getSn_RX_RSR(uint8_t sn)
{
 80058c2:	b590      	push	{r4, r7, lr}
 80058c4:	b085      	sub	sp, #20
 80058c6:	af00      	add	r7, sp, #0
 80058c8:	4603      	mov	r3, r0
 80058ca:	71fb      	strb	r3, [r7, #7]
   uint16_t val=0,val1=0;
 80058cc:	2300      	movs	r3, #0
 80058ce:	81fb      	strh	r3, [r7, #14]
 80058d0:	2300      	movs	r3, #0
 80058d2:	81bb      	strh	r3, [r7, #12]

   do
   {
      val1 = WIZCHIP_READ(Sn_RX_RSR(sn));
 80058d4:	79fb      	ldrb	r3, [r7, #7]
 80058d6:	009b      	lsls	r3, r3, #2
 80058d8:	3301      	adds	r3, #1
 80058da:	00db      	lsls	r3, r3, #3
 80058dc:	f503 5318 	add.w	r3, r3, #9728	; 0x2600
 80058e0:	4618      	mov	r0, r3
 80058e2:	f7ff fe49 	bl	8005578 <WIZCHIP_READ>
 80058e6:	4603      	mov	r3, r0
 80058e8:	81bb      	strh	r3, [r7, #12]
      val1 = (val1 << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_RX_RSR(sn),1));
 80058ea:	89bb      	ldrh	r3, [r7, #12]
 80058ec:	021b      	lsls	r3, r3, #8
 80058ee:	b29c      	uxth	r4, r3
 80058f0:	79fb      	ldrb	r3, [r7, #7]
 80058f2:	009b      	lsls	r3, r3, #2
 80058f4:	3301      	adds	r3, #1
 80058f6:	00db      	lsls	r3, r3, #3
 80058f8:	f503 531c 	add.w	r3, r3, #9984	; 0x2700
 80058fc:	4618      	mov	r0, r3
 80058fe:	f7ff fe3b 	bl	8005578 <WIZCHIP_READ>
 8005902:	4603      	mov	r3, r0
 8005904:	b29b      	uxth	r3, r3
 8005906:	4423      	add	r3, r4
 8005908:	81bb      	strh	r3, [r7, #12]
      if (val1 != 0)
 800590a:	89bb      	ldrh	r3, [r7, #12]
 800590c:	2b00      	cmp	r3, #0
 800590e:	d01a      	beq.n	8005946 <getSn_RX_RSR+0x84>
      {
        val = WIZCHIP_READ(Sn_RX_RSR(sn));
 8005910:	79fb      	ldrb	r3, [r7, #7]
 8005912:	009b      	lsls	r3, r3, #2
 8005914:	3301      	adds	r3, #1
 8005916:	00db      	lsls	r3, r3, #3
 8005918:	f503 5318 	add.w	r3, r3, #9728	; 0x2600
 800591c:	4618      	mov	r0, r3
 800591e:	f7ff fe2b 	bl	8005578 <WIZCHIP_READ>
 8005922:	4603      	mov	r3, r0
 8005924:	81fb      	strh	r3, [r7, #14]
        val = (val << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_RX_RSR(sn),1));
 8005926:	89fb      	ldrh	r3, [r7, #14]
 8005928:	021b      	lsls	r3, r3, #8
 800592a:	b29c      	uxth	r4, r3
 800592c:	79fb      	ldrb	r3, [r7, #7]
 800592e:	009b      	lsls	r3, r3, #2
 8005930:	3301      	adds	r3, #1
 8005932:	00db      	lsls	r3, r3, #3
 8005934:	f503 531c 	add.w	r3, r3, #9984	; 0x2700
 8005938:	4618      	mov	r0, r3
 800593a:	f7ff fe1d 	bl	8005578 <WIZCHIP_READ>
 800593e:	4603      	mov	r3, r0
 8005940:	b29b      	uxth	r3, r3
 8005942:	4423      	add	r3, r4
 8005944:	81fb      	strh	r3, [r7, #14]
      }
   }while (val != val1);
 8005946:	89fa      	ldrh	r2, [r7, #14]
 8005948:	89bb      	ldrh	r3, [r7, #12]
 800594a:	429a      	cmp	r2, r3
 800594c:	d1c2      	bne.n	80058d4 <getSn_RX_RSR+0x12>
   return val;
 800594e:	89fb      	ldrh	r3, [r7, #14]
}
 8005950:	4618      	mov	r0, r3
 8005952:	3714      	adds	r7, #20
 8005954:	46bd      	mov	sp, r7
 8005956:	bd90      	pop	{r4, r7, pc}

08005958 <wiz_send_data>:

void wiz_send_data(uint8_t sn, uint8_t *wizdata, uint16_t len)
{
 8005958:	b590      	push	{r4, r7, lr}
 800595a:	b085      	sub	sp, #20
 800595c:	af00      	add	r7, sp, #0
 800595e:	4603      	mov	r3, r0
 8005960:	6039      	str	r1, [r7, #0]
 8005962:	71fb      	strb	r3, [r7, #7]
 8005964:	4613      	mov	r3, r2
 8005966:	80bb      	strh	r3, [r7, #4]
   uint16_t ptr = 0;
 8005968:	2300      	movs	r3, #0
 800596a:	81fb      	strh	r3, [r7, #14]
   uint32_t addrsel = 0;
 800596c:	2300      	movs	r3, #0
 800596e:	60bb      	str	r3, [r7, #8]

   if(len == 0)  return;
 8005970:	88bb      	ldrh	r3, [r7, #4]
 8005972:	2b00      	cmp	r3, #0
 8005974:	d048      	beq.n	8005a08 <wiz_send_data+0xb0>
   ptr = getSn_TX_WR(sn);
 8005976:	79fb      	ldrb	r3, [r7, #7]
 8005978:	009b      	lsls	r3, r3, #2
 800597a:	3301      	adds	r3, #1
 800597c:	00db      	lsls	r3, r3, #3
 800597e:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 8005982:	4618      	mov	r0, r3
 8005984:	f7ff fdf8 	bl	8005578 <WIZCHIP_READ>
 8005988:	4603      	mov	r3, r0
 800598a:	b29b      	uxth	r3, r3
 800598c:	021b      	lsls	r3, r3, #8
 800598e:	b29c      	uxth	r4, r3
 8005990:	79fb      	ldrb	r3, [r7, #7]
 8005992:	009b      	lsls	r3, r3, #2
 8005994:	3301      	adds	r3, #1
 8005996:	00db      	lsls	r3, r3, #3
 8005998:	f503 5314 	add.w	r3, r3, #9472	; 0x2500
 800599c:	4618      	mov	r0, r3
 800599e:	f7ff fdeb 	bl	8005578 <WIZCHIP_READ>
 80059a2:	4603      	mov	r3, r0
 80059a4:	b29b      	uxth	r3, r3
 80059a6:	4423      	add	r3, r4
 80059a8:	81fb      	strh	r3, [r7, #14]
   //M20140501 : implict type casting -> explict type casting
   //addrsel = (ptr << 8) + (WIZCHIP_TXBUF_BLOCK(sn) << 3);
   addrsel = ((uint32_t)ptr << 8) + (WIZCHIP_TXBUF_BLOCK(sn) << 3);
 80059aa:	89fb      	ldrh	r3, [r7, #14]
 80059ac:	021b      	lsls	r3, r3, #8
 80059ae:	79fa      	ldrb	r2, [r7, #7]
 80059b0:	0092      	lsls	r2, r2, #2
 80059b2:	3202      	adds	r2, #2
 80059b4:	00d2      	lsls	r2, r2, #3
 80059b6:	4413      	add	r3, r2
 80059b8:	60bb      	str	r3, [r7, #8]
   //
   WIZCHIP_WRITE_BUF(addrsel,wizdata, len);
 80059ba:	88bb      	ldrh	r3, [r7, #4]
 80059bc:	461a      	mov	r2, r3
 80059be:	6839      	ldr	r1, [r7, #0]
 80059c0:	68b8      	ldr	r0, [r7, #8]
 80059c2:	f7ff fed3 	bl	800576c <WIZCHIP_WRITE_BUF>
   
   ptr += len;
 80059c6:	89fa      	ldrh	r2, [r7, #14]
 80059c8:	88bb      	ldrh	r3, [r7, #4]
 80059ca:	4413      	add	r3, r2
 80059cc:	81fb      	strh	r3, [r7, #14]
   setSn_TX_WR(sn,ptr);
 80059ce:	79fb      	ldrb	r3, [r7, #7]
 80059d0:	009b      	lsls	r3, r3, #2
 80059d2:	3301      	adds	r3, #1
 80059d4:	00db      	lsls	r3, r3, #3
 80059d6:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 80059da:	461a      	mov	r2, r3
 80059dc:	89fb      	ldrh	r3, [r7, #14]
 80059de:	0a1b      	lsrs	r3, r3, #8
 80059e0:	b29b      	uxth	r3, r3
 80059e2:	b2db      	uxtb	r3, r3
 80059e4:	4619      	mov	r1, r3
 80059e6:	4610      	mov	r0, r2
 80059e8:	f7ff fe12 	bl	8005610 <WIZCHIP_WRITE>
 80059ec:	79fb      	ldrb	r3, [r7, #7]
 80059ee:	009b      	lsls	r3, r3, #2
 80059f0:	3301      	adds	r3, #1
 80059f2:	00db      	lsls	r3, r3, #3
 80059f4:	f503 5314 	add.w	r3, r3, #9472	; 0x2500
 80059f8:	461a      	mov	r2, r3
 80059fa:	89fb      	ldrh	r3, [r7, #14]
 80059fc:	b2db      	uxtb	r3, r3
 80059fe:	4619      	mov	r1, r3
 8005a00:	4610      	mov	r0, r2
 8005a02:	f7ff fe05 	bl	8005610 <WIZCHIP_WRITE>
 8005a06:	e000      	b.n	8005a0a <wiz_send_data+0xb2>
   if(len == 0)  return;
 8005a08:	bf00      	nop
}
 8005a0a:	3714      	adds	r7, #20
 8005a0c:	46bd      	mov	sp, r7
 8005a0e:	bd90      	pop	{r4, r7, pc}

08005a10 <wiz_recv_data>:

void wiz_recv_data(uint8_t sn, uint8_t *wizdata, uint16_t len)
{
 8005a10:	b590      	push	{r4, r7, lr}
 8005a12:	b085      	sub	sp, #20
 8005a14:	af00      	add	r7, sp, #0
 8005a16:	4603      	mov	r3, r0
 8005a18:	6039      	str	r1, [r7, #0]
 8005a1a:	71fb      	strb	r3, [r7, #7]
 8005a1c:	4613      	mov	r3, r2
 8005a1e:	80bb      	strh	r3, [r7, #4]
   uint16_t ptr = 0;
 8005a20:	2300      	movs	r3, #0
 8005a22:	81fb      	strh	r3, [r7, #14]
   uint32_t addrsel = 0;
 8005a24:	2300      	movs	r3, #0
 8005a26:	60bb      	str	r3, [r7, #8]
   
   if(len == 0) return;
 8005a28:	88bb      	ldrh	r3, [r7, #4]
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d048      	beq.n	8005ac0 <wiz_recv_data+0xb0>
   ptr = getSn_RX_RD(sn);
 8005a2e:	79fb      	ldrb	r3, [r7, #7]
 8005a30:	009b      	lsls	r3, r3, #2
 8005a32:	3301      	adds	r3, #1
 8005a34:	00db      	lsls	r3, r3, #3
 8005a36:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 8005a3a:	4618      	mov	r0, r3
 8005a3c:	f7ff fd9c 	bl	8005578 <WIZCHIP_READ>
 8005a40:	4603      	mov	r3, r0
 8005a42:	b29b      	uxth	r3, r3
 8005a44:	021b      	lsls	r3, r3, #8
 8005a46:	b29c      	uxth	r4, r3
 8005a48:	79fb      	ldrb	r3, [r7, #7]
 8005a4a:	009b      	lsls	r3, r3, #2
 8005a4c:	3301      	adds	r3, #1
 8005a4e:	00db      	lsls	r3, r3, #3
 8005a50:	f503 5324 	add.w	r3, r3, #10496	; 0x2900
 8005a54:	4618      	mov	r0, r3
 8005a56:	f7ff fd8f 	bl	8005578 <WIZCHIP_READ>
 8005a5a:	4603      	mov	r3, r0
 8005a5c:	b29b      	uxth	r3, r3
 8005a5e:	4423      	add	r3, r4
 8005a60:	81fb      	strh	r3, [r7, #14]
   //M20140501 : implict type casting -> explict type casting
   //addrsel = ((ptr << 8) + (WIZCHIP_RXBUF_BLOCK(sn) << 3);
   addrsel = ((uint32_t)ptr << 8) + (WIZCHIP_RXBUF_BLOCK(sn) << 3);
 8005a62:	89fb      	ldrh	r3, [r7, #14]
 8005a64:	021b      	lsls	r3, r3, #8
 8005a66:	79fa      	ldrb	r2, [r7, #7]
 8005a68:	0092      	lsls	r2, r2, #2
 8005a6a:	3203      	adds	r2, #3
 8005a6c:	00d2      	lsls	r2, r2, #3
 8005a6e:	4413      	add	r3, r2
 8005a70:	60bb      	str	r3, [r7, #8]
   //
   WIZCHIP_READ_BUF(addrsel, wizdata, len);
 8005a72:	88bb      	ldrh	r3, [r7, #4]
 8005a74:	461a      	mov	r2, r3
 8005a76:	6839      	ldr	r1, [r7, #0]
 8005a78:	68b8      	ldr	r0, [r7, #8]
 8005a7a:	f7ff fe17 	bl	80056ac <WIZCHIP_READ_BUF>
   ptr += len;
 8005a7e:	89fa      	ldrh	r2, [r7, #14]
 8005a80:	88bb      	ldrh	r3, [r7, #4]
 8005a82:	4413      	add	r3, r2
 8005a84:	81fb      	strh	r3, [r7, #14]
   
   setSn_RX_RD(sn,ptr);
 8005a86:	79fb      	ldrb	r3, [r7, #7]
 8005a88:	009b      	lsls	r3, r3, #2
 8005a8a:	3301      	adds	r3, #1
 8005a8c:	00db      	lsls	r3, r3, #3
 8005a8e:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 8005a92:	461a      	mov	r2, r3
 8005a94:	89fb      	ldrh	r3, [r7, #14]
 8005a96:	0a1b      	lsrs	r3, r3, #8
 8005a98:	b29b      	uxth	r3, r3
 8005a9a:	b2db      	uxtb	r3, r3
 8005a9c:	4619      	mov	r1, r3
 8005a9e:	4610      	mov	r0, r2
 8005aa0:	f7ff fdb6 	bl	8005610 <WIZCHIP_WRITE>
 8005aa4:	79fb      	ldrb	r3, [r7, #7]
 8005aa6:	009b      	lsls	r3, r3, #2
 8005aa8:	3301      	adds	r3, #1
 8005aaa:	00db      	lsls	r3, r3, #3
 8005aac:	f503 5324 	add.w	r3, r3, #10496	; 0x2900
 8005ab0:	461a      	mov	r2, r3
 8005ab2:	89fb      	ldrh	r3, [r7, #14]
 8005ab4:	b2db      	uxtb	r3, r3
 8005ab6:	4619      	mov	r1, r3
 8005ab8:	4610      	mov	r0, r2
 8005aba:	f7ff fda9 	bl	8005610 <WIZCHIP_WRITE>
 8005abe:	e000      	b.n	8005ac2 <wiz_recv_data+0xb2>
   if(len == 0) return;
 8005ac0:	bf00      	nop
}
 8005ac2:	3714      	adds	r7, #20
 8005ac4:	46bd      	mov	sp, r7
 8005ac6:	bd90      	pop	{r4, r7, pc}

08005ac8 <wiz_recv_ignore>:


void wiz_recv_ignore(uint8_t sn, uint16_t len)
{
 8005ac8:	b590      	push	{r4, r7, lr}
 8005aca:	b085      	sub	sp, #20
 8005acc:	af00      	add	r7, sp, #0
 8005ace:	4603      	mov	r3, r0
 8005ad0:	460a      	mov	r2, r1
 8005ad2:	71fb      	strb	r3, [r7, #7]
 8005ad4:	4613      	mov	r3, r2
 8005ad6:	80bb      	strh	r3, [r7, #4]
   uint16_t ptr = 0;
 8005ad8:	2300      	movs	r3, #0
 8005ada:	81fb      	strh	r3, [r7, #14]

   ptr = getSn_RX_RD(sn);
 8005adc:	79fb      	ldrb	r3, [r7, #7]
 8005ade:	009b      	lsls	r3, r3, #2
 8005ae0:	3301      	adds	r3, #1
 8005ae2:	00db      	lsls	r3, r3, #3
 8005ae4:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 8005ae8:	4618      	mov	r0, r3
 8005aea:	f7ff fd45 	bl	8005578 <WIZCHIP_READ>
 8005aee:	4603      	mov	r3, r0
 8005af0:	b29b      	uxth	r3, r3
 8005af2:	021b      	lsls	r3, r3, #8
 8005af4:	b29c      	uxth	r4, r3
 8005af6:	79fb      	ldrb	r3, [r7, #7]
 8005af8:	009b      	lsls	r3, r3, #2
 8005afa:	3301      	adds	r3, #1
 8005afc:	00db      	lsls	r3, r3, #3
 8005afe:	f503 5324 	add.w	r3, r3, #10496	; 0x2900
 8005b02:	4618      	mov	r0, r3
 8005b04:	f7ff fd38 	bl	8005578 <WIZCHIP_READ>
 8005b08:	4603      	mov	r3, r0
 8005b0a:	b29b      	uxth	r3, r3
 8005b0c:	4423      	add	r3, r4
 8005b0e:	81fb      	strh	r3, [r7, #14]
   ptr += len;
 8005b10:	89fa      	ldrh	r2, [r7, #14]
 8005b12:	88bb      	ldrh	r3, [r7, #4]
 8005b14:	4413      	add	r3, r2
 8005b16:	81fb      	strh	r3, [r7, #14]
   setSn_RX_RD(sn,ptr);
 8005b18:	79fb      	ldrb	r3, [r7, #7]
 8005b1a:	009b      	lsls	r3, r3, #2
 8005b1c:	3301      	adds	r3, #1
 8005b1e:	00db      	lsls	r3, r3, #3
 8005b20:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 8005b24:	461a      	mov	r2, r3
 8005b26:	89fb      	ldrh	r3, [r7, #14]
 8005b28:	0a1b      	lsrs	r3, r3, #8
 8005b2a:	b29b      	uxth	r3, r3
 8005b2c:	b2db      	uxtb	r3, r3
 8005b2e:	4619      	mov	r1, r3
 8005b30:	4610      	mov	r0, r2
 8005b32:	f7ff fd6d 	bl	8005610 <WIZCHIP_WRITE>
 8005b36:	79fb      	ldrb	r3, [r7, #7]
 8005b38:	009b      	lsls	r3, r3, #2
 8005b3a:	3301      	adds	r3, #1
 8005b3c:	00db      	lsls	r3, r3, #3
 8005b3e:	f503 5324 	add.w	r3, r3, #10496	; 0x2900
 8005b42:	461a      	mov	r2, r3
 8005b44:	89fb      	ldrh	r3, [r7, #14]
 8005b46:	b2db      	uxtb	r3, r3
 8005b48:	4619      	mov	r1, r3
 8005b4a:	4610      	mov	r0, r2
 8005b4c:	f7ff fd60 	bl	8005610 <WIZCHIP_WRITE>
}
 8005b50:	bf00      	nop
 8005b52:	3714      	adds	r7, #20
 8005b54:	46bd      	mov	sp, r7
 8005b56:	bd90      	pop	{r4, r7, pc}

08005b58 <wizchip_cris_enter>:
 * @brief Default function to enable interrupt.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	  wizchip_cris_enter(void)           {};
void 	  wizchip_cris_enter(void)           {}
 8005b58:	b480      	push	{r7}
 8005b5a:	af00      	add	r7, sp, #0
 8005b5c:	bf00      	nop
 8005b5e:	46bd      	mov	sp, r7
 8005b60:	bc80      	pop	{r7}
 8005b62:	4770      	bx	lr

08005b64 <wizchip_cris_exit>:
 * @brief Default function to disable interrupt.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	  wizchip_cris_exit(void)          {};
void 	  wizchip_cris_exit(void)          {}
 8005b64:	b480      	push	{r7}
 8005b66:	af00      	add	r7, sp, #0
 8005b68:	bf00      	nop
 8005b6a:	46bd      	mov	sp, r7
 8005b6c:	bc80      	pop	{r7}
 8005b6e:	4770      	bx	lr

08005b70 <wizchip_cs_select>:
 * @brief Default function to select chip.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_cs_select(void)            {};
void 	wizchip_cs_select(void)            {}
 8005b70:	b480      	push	{r7}
 8005b72:	af00      	add	r7, sp, #0
 8005b74:	bf00      	nop
 8005b76:	46bd      	mov	sp, r7
 8005b78:	bc80      	pop	{r7}
 8005b7a:	4770      	bx	lr

08005b7c <wizchip_cs_deselect>:
 * @brief Default function to deselect chip.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_cs_deselect(void)          {};
void 	wizchip_cs_deselect(void)          {}
 8005b7c:	b480      	push	{r7}
 8005b7e:	af00      	add	r7, sp, #0
 8005b80:	bf00      	nop
 8005b82:	46bd      	mov	sp, r7
 8005b84:	bc80      	pop	{r7}
 8005b86:	4770      	bx	lr

08005b88 <wizchip_bus_readdata>:
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
 //M20150601 : Rename the function for integrating with W5300
//uint8_t wizchip_bus_readbyte(uint32_t AddrSel) { return * ((volatile uint8_t *)((ptrdiff_t) AddrSel)); }
iodata_t wizchip_bus_readdata(uint32_t AddrSel) { return * ((volatile iodata_t *)((ptrdiff_t) AddrSel)); }
 8005b88:	b480      	push	{r7}
 8005b8a:	b083      	sub	sp, #12
 8005b8c:	af00      	add	r7, sp, #0
 8005b8e:	6078      	str	r0, [r7, #4]
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	781b      	ldrb	r3, [r3, #0]
 8005b94:	b2db      	uxtb	r3, r3
 8005b96:	4618      	mov	r0, r3
 8005b98:	370c      	adds	r7, #12
 8005b9a:	46bd      	mov	sp, r7
 8005b9c:	bc80      	pop	{r7}
 8005b9e:	4770      	bx	lr

08005ba0 <wizchip_bus_writedata>:
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//M20150601 : Rename the function for integrating with W5300
//void 	wizchip_bus_writebyte(uint32_t AddrSel, uint8_t wb)  { *((volatile uint8_t*)((ptrdiff_t)AddrSel)) = wb; }
void 	wizchip_bus_writedata(uint32_t AddrSel, iodata_t wb)  { *((volatile iodata_t*)((ptrdiff_t)AddrSel)) = wb; }
 8005ba0:	b480      	push	{r7}
 8005ba2:	b083      	sub	sp, #12
 8005ba4:	af00      	add	r7, sp, #0
 8005ba6:	6078      	str	r0, [r7, #4]
 8005ba8:	460b      	mov	r3, r1
 8005baa:	70fb      	strb	r3, [r7, #3]
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	78fa      	ldrb	r2, [r7, #3]
 8005bb0:	701a      	strb	r2, [r3, #0]
 8005bb2:	bf00      	nop
 8005bb4:	370c      	adds	r7, #12
 8005bb6:	46bd      	mov	sp, r7
 8005bb8:	bc80      	pop	{r7}
 8005bba:	4770      	bx	lr

08005bbc <wizchip_spi_readbyte>:
 * @brief Default function to read in SPI interface.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//uint8_t wizchip_spi_readbyte(void)        {return 0;};
uint8_t wizchip_spi_readbyte(void)        {return 0;}
 8005bbc:	b480      	push	{r7}
 8005bbe:	af00      	add	r7, sp, #0
 8005bc0:	2300      	movs	r3, #0
 8005bc2:	4618      	mov	r0, r3
 8005bc4:	46bd      	mov	sp, r7
 8005bc6:	bc80      	pop	{r7}
 8005bc8:	4770      	bx	lr

08005bca <wizchip_spi_writebyte>:
 * @brief Default function to write in SPI interface.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_spi_writebyte(uint8_t wb) {};
void 	wizchip_spi_writebyte(uint8_t wb) {}
 8005bca:	b480      	push	{r7}
 8005bcc:	b083      	sub	sp, #12
 8005bce:	af00      	add	r7, sp, #0
 8005bd0:	4603      	mov	r3, r0
 8005bd2:	71fb      	strb	r3, [r7, #7]
 8005bd4:	bf00      	nop
 8005bd6:	370c      	adds	r7, #12
 8005bd8:	46bd      	mov	sp, r7
 8005bda:	bc80      	pop	{r7}
 8005bdc:	4770      	bx	lr

08005bde <wizchip_spi_readburst>:
 * @brief Default function to burst read in SPI interface.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_spi_readburst(uint8_t* pBuf, uint16_t len) 	{}; 
void 	wizchip_spi_readburst(uint8_t* pBuf, uint16_t len) 	{}
 8005bde:	b480      	push	{r7}
 8005be0:	b083      	sub	sp, #12
 8005be2:	af00      	add	r7, sp, #0
 8005be4:	6078      	str	r0, [r7, #4]
 8005be6:	460b      	mov	r3, r1
 8005be8:	807b      	strh	r3, [r7, #2]
 8005bea:	bf00      	nop
 8005bec:	370c      	adds	r7, #12
 8005bee:	46bd      	mov	sp, r7
 8005bf0:	bc80      	pop	{r7}
 8005bf2:	4770      	bx	lr

08005bf4 <wizchip_spi_writeburst>:
 * @brief Default function to burst write in SPI interface.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_spi_writeburst(uint8_t* pBuf, uint16_t len) {};
void 	wizchip_spi_writeburst(uint8_t* pBuf, uint16_t len) {}
 8005bf4:	b480      	push	{r7}
 8005bf6:	b083      	sub	sp, #12
 8005bf8:	af00      	add	r7, sp, #0
 8005bfa:	6078      	str	r0, [r7, #4]
 8005bfc:	460b      	mov	r3, r1
 8005bfe:	807b      	strh	r3, [r7, #2]
 8005c00:	bf00      	nop
 8005c02:	370c      	adds	r7, #12
 8005c04:	46bd      	mov	sp, r7
 8005c06:	bc80      	pop	{r7}
 8005c08:	4770      	bx	lr
	...

08005c0c <reg_wizchip_cs_cbfunc>:
      WIZCHIP.CRIS._exit  = cris_ex;
   }
}

void reg_wizchip_cs_cbfunc(void(*cs_sel)(void), void(*cs_desel)(void))
{
 8005c0c:	b480      	push	{r7}
 8005c0e:	b083      	sub	sp, #12
 8005c10:	af00      	add	r7, sp, #0
 8005c12:	6078      	str	r0, [r7, #4]
 8005c14:	6039      	str	r1, [r7, #0]
   if(!cs_sel || !cs_desel)
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	d002      	beq.n	8005c22 <reg_wizchip_cs_cbfunc+0x16>
 8005c1c:	683b      	ldr	r3, [r7, #0]
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	d106      	bne.n	8005c30 <reg_wizchip_cs_cbfunc+0x24>
   {
      WIZCHIP.CS._select   = wizchip_cs_select;
 8005c22:	4b09      	ldr	r3, [pc, #36]	; (8005c48 <reg_wizchip_cs_cbfunc+0x3c>)
 8005c24:	4a09      	ldr	r2, [pc, #36]	; (8005c4c <reg_wizchip_cs_cbfunc+0x40>)
 8005c26:	615a      	str	r2, [r3, #20]
      WIZCHIP.CS._deselect = wizchip_cs_deselect;
 8005c28:	4b07      	ldr	r3, [pc, #28]	; (8005c48 <reg_wizchip_cs_cbfunc+0x3c>)
 8005c2a:	4a09      	ldr	r2, [pc, #36]	; (8005c50 <reg_wizchip_cs_cbfunc+0x44>)
 8005c2c:	619a      	str	r2, [r3, #24]
 8005c2e:	e006      	b.n	8005c3e <reg_wizchip_cs_cbfunc+0x32>
   }
   else
   {
      WIZCHIP.CS._select   = cs_sel;
 8005c30:	4a05      	ldr	r2, [pc, #20]	; (8005c48 <reg_wizchip_cs_cbfunc+0x3c>)
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	6153      	str	r3, [r2, #20]
      WIZCHIP.CS._deselect = cs_desel;
 8005c36:	4a04      	ldr	r2, [pc, #16]	; (8005c48 <reg_wizchip_cs_cbfunc+0x3c>)
 8005c38:	683b      	ldr	r3, [r7, #0]
 8005c3a:	6193      	str	r3, [r2, #24]
   }
}
 8005c3c:	bf00      	nop
 8005c3e:	bf00      	nop
 8005c40:	370c      	adds	r7, #12
 8005c42:	46bd      	mov	sp, r7
 8005c44:	bc80      	pop	{r7}
 8005c46:	4770      	bx	lr
 8005c48:	20000024 	.word	0x20000024
 8005c4c:	08005b71 	.word	0x08005b71
 8005c50:	08005b7d 	.word	0x08005b7d

08005c54 <reg_wizchip_spi_cbfunc>:
      WIZCHIP.IF.BUS._write_data  = bus_wb;
   }
}

void reg_wizchip_spi_cbfunc(uint8_t (*spi_rb)(void), void (*spi_wb)(uint8_t wb))
{
 8005c54:	b480      	push	{r7}
 8005c56:	b083      	sub	sp, #12
 8005c58:	af00      	add	r7, sp, #0
 8005c5a:	6078      	str	r0, [r7, #4]
 8005c5c:	6039      	str	r1, [r7, #0]
   while(!(WIZCHIP.if_mode & _WIZCHIP_IO_MODE_SPI_));
 8005c5e:	bf00      	nop
 8005c60:	4b0f      	ldr	r3, [pc, #60]	; (8005ca0 <reg_wizchip_spi_cbfunc+0x4c>)
 8005c62:	881b      	ldrh	r3, [r3, #0]
 8005c64:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	d0f9      	beq.n	8005c60 <reg_wizchip_spi_cbfunc+0xc>
   
   if(!spi_rb || !spi_wb)
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	d002      	beq.n	8005c78 <reg_wizchip_spi_cbfunc+0x24>
 8005c72:	683b      	ldr	r3, [r7, #0]
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	d106      	bne.n	8005c86 <reg_wizchip_spi_cbfunc+0x32>
   {
      WIZCHIP.IF.SPI._read_byte   = wizchip_spi_readbyte;
 8005c78:	4b09      	ldr	r3, [pc, #36]	; (8005ca0 <reg_wizchip_spi_cbfunc+0x4c>)
 8005c7a:	4a0a      	ldr	r2, [pc, #40]	; (8005ca4 <reg_wizchip_spi_cbfunc+0x50>)
 8005c7c:	61da      	str	r2, [r3, #28]
      WIZCHIP.IF.SPI._write_byte  = wizchip_spi_writebyte;
 8005c7e:	4b08      	ldr	r3, [pc, #32]	; (8005ca0 <reg_wizchip_spi_cbfunc+0x4c>)
 8005c80:	4a09      	ldr	r2, [pc, #36]	; (8005ca8 <reg_wizchip_spi_cbfunc+0x54>)
 8005c82:	621a      	str	r2, [r3, #32]
 8005c84:	e006      	b.n	8005c94 <reg_wizchip_spi_cbfunc+0x40>
   }
   else
   {
      WIZCHIP.IF.SPI._read_byte   = spi_rb;
 8005c86:	4a06      	ldr	r2, [pc, #24]	; (8005ca0 <reg_wizchip_spi_cbfunc+0x4c>)
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	61d3      	str	r3, [r2, #28]
      WIZCHIP.IF.SPI._write_byte  = spi_wb;
 8005c8c:	4a04      	ldr	r2, [pc, #16]	; (8005ca0 <reg_wizchip_spi_cbfunc+0x4c>)
 8005c8e:	683b      	ldr	r3, [r7, #0]
 8005c90:	6213      	str	r3, [r2, #32]
   }
}
 8005c92:	bf00      	nop
 8005c94:	bf00      	nop
 8005c96:	370c      	adds	r7, #12
 8005c98:	46bd      	mov	sp, r7
 8005c9a:	bc80      	pop	{r7}
 8005c9c:	4770      	bx	lr
 8005c9e:	bf00      	nop
 8005ca0:	20000024 	.word	0x20000024
 8005ca4:	08005bbd 	.word	0x08005bbd
 8005ca8:	08005bcb 	.word	0x08005bcb

08005cac <reg_wizchip_spiburst_cbfunc>:

// 20140626 Eric Added for SPI burst operations
void reg_wizchip_spiburst_cbfunc(void (*spi_rb)(uint8_t* pBuf, uint16_t len), void (*spi_wb)(uint8_t* pBuf, uint16_t len))
{
 8005cac:	b480      	push	{r7}
 8005cae:	b083      	sub	sp, #12
 8005cb0:	af00      	add	r7, sp, #0
 8005cb2:	6078      	str	r0, [r7, #4]
 8005cb4:	6039      	str	r1, [r7, #0]
   while(!(WIZCHIP.if_mode & _WIZCHIP_IO_MODE_SPI_));
 8005cb6:	bf00      	nop
 8005cb8:	4b0f      	ldr	r3, [pc, #60]	; (8005cf8 <reg_wizchip_spiburst_cbfunc+0x4c>)
 8005cba:	881b      	ldrh	r3, [r3, #0]
 8005cbc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005cc0:	2b00      	cmp	r3, #0
 8005cc2:	d0f9      	beq.n	8005cb8 <reg_wizchip_spiburst_cbfunc+0xc>

   if(!spi_rb || !spi_wb)
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	d002      	beq.n	8005cd0 <reg_wizchip_spiburst_cbfunc+0x24>
 8005cca:	683b      	ldr	r3, [r7, #0]
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	d106      	bne.n	8005cde <reg_wizchip_spiburst_cbfunc+0x32>
   {
      WIZCHIP.IF.SPI._read_burst   = wizchip_spi_readburst;
 8005cd0:	4b09      	ldr	r3, [pc, #36]	; (8005cf8 <reg_wizchip_spiburst_cbfunc+0x4c>)
 8005cd2:	4a0a      	ldr	r2, [pc, #40]	; (8005cfc <reg_wizchip_spiburst_cbfunc+0x50>)
 8005cd4:	625a      	str	r2, [r3, #36]	; 0x24
      WIZCHIP.IF.SPI._write_burst  = wizchip_spi_writeburst;
 8005cd6:	4b08      	ldr	r3, [pc, #32]	; (8005cf8 <reg_wizchip_spiburst_cbfunc+0x4c>)
 8005cd8:	4a09      	ldr	r2, [pc, #36]	; (8005d00 <reg_wizchip_spiburst_cbfunc+0x54>)
 8005cda:	629a      	str	r2, [r3, #40]	; 0x28
 8005cdc:	e006      	b.n	8005cec <reg_wizchip_spiburst_cbfunc+0x40>
   }
   else
   {
      WIZCHIP.IF.SPI._read_burst   = spi_rb;
 8005cde:	4a06      	ldr	r2, [pc, #24]	; (8005cf8 <reg_wizchip_spiburst_cbfunc+0x4c>)
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	6253      	str	r3, [r2, #36]	; 0x24
      WIZCHIP.IF.SPI._write_burst  = spi_wb;
 8005ce4:	4a04      	ldr	r2, [pc, #16]	; (8005cf8 <reg_wizchip_spiburst_cbfunc+0x4c>)
 8005ce6:	683b      	ldr	r3, [r7, #0]
 8005ce8:	6293      	str	r3, [r2, #40]	; 0x28
   }
}
 8005cea:	bf00      	nop
 8005cec:	bf00      	nop
 8005cee:	370c      	adds	r7, #12
 8005cf0:	46bd      	mov	sp, r7
 8005cf2:	bc80      	pop	{r7}
 8005cf4:	4770      	bx	lr
 8005cf6:	bf00      	nop
 8005cf8:	20000024 	.word	0x20000024
 8005cfc:	08005bdf 	.word	0x08005bdf
 8005d00:	08005bf5 	.word	0x08005bf5

08005d04 <wizchip_sw_reset>:
   }
   return 0;
}

void wizchip_sw_reset(void)
{
 8005d04:	b580      	push	{r7, lr}
 8005d06:	b086      	sub	sp, #24
 8005d08:	af00      	add	r7, sp, #0
#if _WIZCHIP_IO_MODE_  == _WIZCHIP_IO_MODE_BUS_INDIR_
   uint16_t mr = (uint16_t)getMR();
   setMR(mr | MR_IND);
#endif
//
   getSHAR(mac);
 8005d0a:	1d3b      	adds	r3, r7, #4
 8005d0c:	2206      	movs	r2, #6
 8005d0e:	4619      	mov	r1, r3
 8005d10:	f44f 6010 	mov.w	r0, #2304	; 0x900
 8005d14:	f7ff fcca 	bl	80056ac <WIZCHIP_READ_BUF>
   getGAR(gw);  getSUBR(sn);  getSIPR(sip);
 8005d18:	f107 0314 	add.w	r3, r7, #20
 8005d1c:	2204      	movs	r2, #4
 8005d1e:	4619      	mov	r1, r3
 8005d20:	f44f 7080 	mov.w	r0, #256	; 0x100
 8005d24:	f7ff fcc2 	bl	80056ac <WIZCHIP_READ_BUF>
 8005d28:	f107 0310 	add.w	r3, r7, #16
 8005d2c:	2204      	movs	r2, #4
 8005d2e:	4619      	mov	r1, r3
 8005d30:	f44f 60a0 	mov.w	r0, #1280	; 0x500
 8005d34:	f7ff fcba 	bl	80056ac <WIZCHIP_READ_BUF>
 8005d38:	f107 030c 	add.w	r3, r7, #12
 8005d3c:	2204      	movs	r2, #4
 8005d3e:	4619      	mov	r1, r3
 8005d40:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 8005d44:	f7ff fcb2 	bl	80056ac <WIZCHIP_READ_BUF>
   setMR(MR_RST);
 8005d48:	2180      	movs	r1, #128	; 0x80
 8005d4a:	2000      	movs	r0, #0
 8005d4c:	f7ff fc60 	bl	8005610 <WIZCHIP_WRITE>
   getMR(); // for delay
 8005d50:	2000      	movs	r0, #0
 8005d52:	f7ff fc11 	bl	8005578 <WIZCHIP_READ>
//A2015051 : For indirect bus mode 
#if _WIZCHIP_IO_MODE_  == _WIZCHIP_IO_MODE_BUS_INDIR_
   setMR(mr | MR_IND);
#endif
//
   setSHAR(mac);
 8005d56:	1d3b      	adds	r3, r7, #4
 8005d58:	2206      	movs	r2, #6
 8005d5a:	4619      	mov	r1, r3
 8005d5c:	f44f 6010 	mov.w	r0, #2304	; 0x900
 8005d60:	f7ff fd04 	bl	800576c <WIZCHIP_WRITE_BUF>
   setGAR(gw);
 8005d64:	f107 0314 	add.w	r3, r7, #20
 8005d68:	2204      	movs	r2, #4
 8005d6a:	4619      	mov	r1, r3
 8005d6c:	f44f 7080 	mov.w	r0, #256	; 0x100
 8005d70:	f7ff fcfc 	bl	800576c <WIZCHIP_WRITE_BUF>
   setSUBR(sn);
 8005d74:	f107 0310 	add.w	r3, r7, #16
 8005d78:	2204      	movs	r2, #4
 8005d7a:	4619      	mov	r1, r3
 8005d7c:	f44f 60a0 	mov.w	r0, #1280	; 0x500
 8005d80:	f7ff fcf4 	bl	800576c <WIZCHIP_WRITE_BUF>
   setSIPR(sip);
 8005d84:	f107 030c 	add.w	r3, r7, #12
 8005d88:	2204      	movs	r2, #4
 8005d8a:	4619      	mov	r1, r3
 8005d8c:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 8005d90:	f7ff fcec 	bl	800576c <WIZCHIP_WRITE_BUF>
}
 8005d94:	bf00      	nop
 8005d96:	3718      	adds	r7, #24
 8005d98:	46bd      	mov	sp, r7
 8005d9a:	bd80      	pop	{r7, pc}

08005d9c <wizchip_init>:

int8_t wizchip_init(uint8_t* txsize, uint8_t* rxsize)
{
 8005d9c:	b580      	push	{r7, lr}
 8005d9e:	b084      	sub	sp, #16
 8005da0:	af00      	add	r7, sp, #0
 8005da2:	6078      	str	r0, [r7, #4]
 8005da4:	6039      	str	r1, [r7, #0]
   int8_t i;
#if _WIZCHIP_ < W5200
   int8_t j;
#endif
   int8_t tmp = 0;
 8005da6:	2300      	movs	r3, #0
 8005da8:	73bb      	strb	r3, [r7, #14]
   wizchip_sw_reset();
 8005daa:	f7ff ffab 	bl	8005d04 <wizchip_sw_reset>
   if(txsize)
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	2b00      	cmp	r3, #0
 8005db2:	d03b      	beq.n	8005e2c <wizchip_init+0x90>
   {
      tmp = 0;
 8005db4:	2300      	movs	r3, #0
 8005db6:	73bb      	strb	r3, [r7, #14]
			tmp += txsize[i];
			if(tmp > 128) return -1;
		}
		if(tmp % 8) return -1;
   #else
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8005db8:	2300      	movs	r3, #0
 8005dba:	73fb      	strb	r3, [r7, #15]
 8005dbc:	e015      	b.n	8005dea <wizchip_init+0x4e>
		{
			tmp += txsize[i];
 8005dbe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005dc2:	687a      	ldr	r2, [r7, #4]
 8005dc4:	4413      	add	r3, r2
 8005dc6:	781a      	ldrb	r2, [r3, #0]
 8005dc8:	7bbb      	ldrb	r3, [r7, #14]
 8005dca:	4413      	add	r3, r2
 8005dcc:	b2db      	uxtb	r3, r3
 8005dce:	73bb      	strb	r3, [r7, #14]

		#if _WIZCHIP_ < W5200	//2016.10.28 peter add condition for w5100 and w5100s
			if(tmp > 8) return -1;
		#else
			if(tmp > 16) return -1;
 8005dd0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005dd4:	2b10      	cmp	r3, #16
 8005dd6:	dd02      	ble.n	8005dde <wizchip_init+0x42>
 8005dd8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005ddc:	e066      	b.n	8005eac <wizchip_init+0x110>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8005dde:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005de2:	b2db      	uxtb	r3, r3
 8005de4:	3301      	adds	r3, #1
 8005de6:	b2db      	uxtb	r3, r3
 8005de8:	73fb      	strb	r3, [r7, #15]
 8005dea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005dee:	2b07      	cmp	r3, #7
 8005df0:	dde5      	ble.n	8005dbe <wizchip_init+0x22>
		#endif
		}
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8005df2:	2300      	movs	r3, #0
 8005df4:	73fb      	strb	r3, [r7, #15]
 8005df6:	e015      	b.n	8005e24 <wizchip_init+0x88>
		#if _WIZCHIP_ < W5200	//2016.10.28 peter add condition for w5100
			j = 0;
			while((txsize[i] >> j != 1)&&(txsize[i] !=0)){j++;}
			setSn_TXBUF_SIZE(i, j);
		#else
			setSn_TXBUF_SIZE(i, txsize[i]);
 8005df8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005dfc:	009b      	lsls	r3, r3, #2
 8005dfe:	3301      	adds	r3, #1
 8005e00:	00db      	lsls	r3, r3, #3
 8005e02:	f503 53f8 	add.w	r3, r3, #7936	; 0x1f00
 8005e06:	4618      	mov	r0, r3
 8005e08:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005e0c:	687a      	ldr	r2, [r7, #4]
 8005e0e:	4413      	add	r3, r2
 8005e10:	781b      	ldrb	r3, [r3, #0]
 8005e12:	4619      	mov	r1, r3
 8005e14:	f7ff fbfc 	bl	8005610 <WIZCHIP_WRITE>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8005e18:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005e1c:	b2db      	uxtb	r3, r3
 8005e1e:	3301      	adds	r3, #1
 8005e20:	b2db      	uxtb	r3, r3
 8005e22:	73fb      	strb	r3, [r7, #15]
 8005e24:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005e28:	2b07      	cmp	r3, #7
 8005e2a:	dde5      	ble.n	8005df8 <wizchip_init+0x5c>
		}

	#endif
   }

   if(rxsize)
 8005e2c:	683b      	ldr	r3, [r7, #0]
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	d03b      	beq.n	8005eaa <wizchip_init+0x10e>
   {
      tmp = 0;
 8005e32:	2300      	movs	r3, #0
 8005e34:	73bb      	strb	r3, [r7, #14]
			tmp += rxsize[i];
			if(tmp > 128) return -1;
		}
		if(tmp % 8) return -1;
   #else
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8005e36:	2300      	movs	r3, #0
 8005e38:	73fb      	strb	r3, [r7, #15]
 8005e3a:	e015      	b.n	8005e68 <wizchip_init+0xcc>
		{
			tmp += rxsize[i];
 8005e3c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005e40:	683a      	ldr	r2, [r7, #0]
 8005e42:	4413      	add	r3, r2
 8005e44:	781a      	ldrb	r2, [r3, #0]
 8005e46:	7bbb      	ldrb	r3, [r7, #14]
 8005e48:	4413      	add	r3, r2
 8005e4a:	b2db      	uxtb	r3, r3
 8005e4c:	73bb      	strb	r3, [r7, #14]
		#if _WIZCHIP_ < W5200	//2016.10.28 peter add condition for w5100 and w5100s
			if(tmp > 8) return -1;
		#else
			if(tmp > 16) return -1;
 8005e4e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005e52:	2b10      	cmp	r3, #16
 8005e54:	dd02      	ble.n	8005e5c <wizchip_init+0xc0>
 8005e56:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005e5a:	e027      	b.n	8005eac <wizchip_init+0x110>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8005e5c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005e60:	b2db      	uxtb	r3, r3
 8005e62:	3301      	adds	r3, #1
 8005e64:	b2db      	uxtb	r3, r3
 8005e66:	73fb      	strb	r3, [r7, #15]
 8005e68:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005e6c:	2b07      	cmp	r3, #7
 8005e6e:	dde5      	ble.n	8005e3c <wizchip_init+0xa0>
		#endif
		}

		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8005e70:	2300      	movs	r3, #0
 8005e72:	73fb      	strb	r3, [r7, #15]
 8005e74:	e015      	b.n	8005ea2 <wizchip_init+0x106>
		#if _WIZCHIP_ < W5200	// add condition for w5100
			j = 0;
			while((rxsize[i] >> j != 1)&&(txsize[i] !=0)){j++;}
			setSn_RXBUF_SIZE(i, j);
		#else
			setSn_RXBUF_SIZE(i, rxsize[i]);
 8005e76:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005e7a:	009b      	lsls	r3, r3, #2
 8005e7c:	3301      	adds	r3, #1
 8005e7e:	00db      	lsls	r3, r3, #3
 8005e80:	f503 53f0 	add.w	r3, r3, #7680	; 0x1e00
 8005e84:	4618      	mov	r0, r3
 8005e86:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005e8a:	683a      	ldr	r2, [r7, #0]
 8005e8c:	4413      	add	r3, r2
 8005e8e:	781b      	ldrb	r3, [r3, #0]
 8005e90:	4619      	mov	r1, r3
 8005e92:	f7ff fbbd 	bl	8005610 <WIZCHIP_WRITE>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8005e96:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005e9a:	b2db      	uxtb	r3, r3
 8005e9c:	3301      	adds	r3, #1
 8005e9e:	b2db      	uxtb	r3, r3
 8005ea0:	73fb      	strb	r3, [r7, #15]
 8005ea2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005ea6:	2b07      	cmp	r3, #7
 8005ea8:	dde5      	ble.n	8005e76 <wizchip_init+0xda>
		#endif
		}
	#endif
   }
   return 0;
 8005eaa:	2300      	movs	r3, #0
}
 8005eac:	4618      	mov	r0, r3
 8005eae:	3710      	adds	r7, #16
 8005eb0:	46bd      	mov	sp, r7
 8005eb2:	bd80      	pop	{r7, pc}

08005eb4 <wizchip_setnetinfo>:
}
#endif


void wizchip_setnetinfo(wiz_NetInfo* pnetinfo)
{
 8005eb4:	b580      	push	{r7, lr}
 8005eb6:	b082      	sub	sp, #8
 8005eb8:	af00      	add	r7, sp, #0
 8005eba:	6078      	str	r0, [r7, #4]
   setSHAR(pnetinfo->mac);
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	2206      	movs	r2, #6
 8005ec0:	4619      	mov	r1, r3
 8005ec2:	f44f 6010 	mov.w	r0, #2304	; 0x900
 8005ec6:	f7ff fc51 	bl	800576c <WIZCHIP_WRITE_BUF>
   setGAR(pnetinfo->gw);
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	330e      	adds	r3, #14
 8005ece:	2204      	movs	r2, #4
 8005ed0:	4619      	mov	r1, r3
 8005ed2:	f44f 7080 	mov.w	r0, #256	; 0x100
 8005ed6:	f7ff fc49 	bl	800576c <WIZCHIP_WRITE_BUF>
   setSUBR(pnetinfo->sn);
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	330a      	adds	r3, #10
 8005ede:	2204      	movs	r2, #4
 8005ee0:	4619      	mov	r1, r3
 8005ee2:	f44f 60a0 	mov.w	r0, #1280	; 0x500
 8005ee6:	f7ff fc41 	bl	800576c <WIZCHIP_WRITE_BUF>
   setSIPR(pnetinfo->ip);
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	3306      	adds	r3, #6
 8005eee:	2204      	movs	r2, #4
 8005ef0:	4619      	mov	r1, r3
 8005ef2:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 8005ef6:	f7ff fc39 	bl	800576c <WIZCHIP_WRITE_BUF>
   _DNS_[0] = pnetinfo->dns[0];
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	7c9a      	ldrb	r2, [r3, #18]
 8005efe:	4b0b      	ldr	r3, [pc, #44]	; (8005f2c <wizchip_setnetinfo+0x78>)
 8005f00:	701a      	strb	r2, [r3, #0]
   _DNS_[1] = pnetinfo->dns[1];
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	7cda      	ldrb	r2, [r3, #19]
 8005f06:	4b09      	ldr	r3, [pc, #36]	; (8005f2c <wizchip_setnetinfo+0x78>)
 8005f08:	705a      	strb	r2, [r3, #1]
   _DNS_[2] = pnetinfo->dns[2];
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	7d1a      	ldrb	r2, [r3, #20]
 8005f0e:	4b07      	ldr	r3, [pc, #28]	; (8005f2c <wizchip_setnetinfo+0x78>)
 8005f10:	709a      	strb	r2, [r3, #2]
   _DNS_[3] = pnetinfo->dns[3];
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	7d5a      	ldrb	r2, [r3, #21]
 8005f16:	4b05      	ldr	r3, [pc, #20]	; (8005f2c <wizchip_setnetinfo+0x78>)
 8005f18:	70da      	strb	r2, [r3, #3]
   _DHCP_   = pnetinfo->dhcp;
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	7d9a      	ldrb	r2, [r3, #22]
 8005f1e:	4b04      	ldr	r3, [pc, #16]	; (8005f30 <wizchip_setnetinfo+0x7c>)
 8005f20:	701a      	strb	r2, [r3, #0]
}
 8005f22:	bf00      	nop
 8005f24:	3708      	adds	r7, #8
 8005f26:	46bd      	mov	sp, r7
 8005f28:	bd80      	pop	{r7, pc}
 8005f2a:	bf00      	nop
 8005f2c:	200002e8 	.word	0x200002e8
 8005f30:	200002ec 	.word	0x200002ec

08005f34 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8005f34:	480c      	ldr	r0, [pc, #48]	; (8005f68 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8005f36:	490d      	ldr	r1, [pc, #52]	; (8005f6c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8005f38:	4a0d      	ldr	r2, [pc, #52]	; (8005f70 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8005f3a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8005f3c:	e002      	b.n	8005f44 <LoopCopyDataInit>

08005f3e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8005f3e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8005f40:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8005f42:	3304      	adds	r3, #4

08005f44 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8005f44:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8005f46:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8005f48:	d3f9      	bcc.n	8005f3e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8005f4a:	4a0a      	ldr	r2, [pc, #40]	; (8005f74 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8005f4c:	4c0a      	ldr	r4, [pc, #40]	; (8005f78 <LoopFillZerobss+0x22>)
  movs r3, #0
 8005f4e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8005f50:	e001      	b.n	8005f56 <LoopFillZerobss>

08005f52 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8005f52:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8005f54:	3204      	adds	r2, #4

08005f56 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8005f56:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8005f58:	d3fb      	bcc.n	8005f52 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8005f5a:	f7ff fb07 	bl	800556c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8005f5e:	f005 fa6f 	bl	800b440 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8005f62:	f7fc fe0d 	bl	8002b80 <main>
  bx lr
 8005f66:	4770      	bx	lr
  ldr r0, =_sdata
 8005f68:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8005f6c:	20000228 	.word	0x20000228
  ldr r2, =_sidata
 8005f70:	0800eafc 	.word	0x0800eafc
  ldr r2, =_sbss
 8005f74:	20000228 	.word	0x20000228
  ldr r4, =_ebss
 8005f78:	200005fc 	.word	0x200005fc

08005f7c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8005f7c:	e7fe      	b.n	8005f7c <ADC1_2_IRQHandler>
	...

08005f80 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005f80:	b580      	push	{r7, lr}
 8005f82:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8005f84:	4b08      	ldr	r3, [pc, #32]	; (8005fa8 <HAL_Init+0x28>)
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	4a07      	ldr	r2, [pc, #28]	; (8005fa8 <HAL_Init+0x28>)
 8005f8a:	f043 0310 	orr.w	r3, r3, #16
 8005f8e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005f90:	2003      	movs	r0, #3
 8005f92:	f000 f947 	bl	8006224 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8005f96:	2000      	movs	r0, #0
 8005f98:	f000 f808 	bl	8005fac <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8005f9c:	f7fe fe00 	bl	8004ba0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8005fa0:	2300      	movs	r3, #0
}
 8005fa2:	4618      	mov	r0, r3
 8005fa4:	bd80      	pop	{r7, pc}
 8005fa6:	bf00      	nop
 8005fa8:	40022000 	.word	0x40022000

08005fac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005fac:	b580      	push	{r7, lr}
 8005fae:	b082      	sub	sp, #8
 8005fb0:	af00      	add	r7, sp, #0
 8005fb2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8005fb4:	4b12      	ldr	r3, [pc, #72]	; (8006000 <HAL_InitTick+0x54>)
 8005fb6:	681a      	ldr	r2, [r3, #0]
 8005fb8:	4b12      	ldr	r3, [pc, #72]	; (8006004 <HAL_InitTick+0x58>)
 8005fba:	781b      	ldrb	r3, [r3, #0]
 8005fbc:	4619      	mov	r1, r3
 8005fbe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005fc2:	fbb3 f3f1 	udiv	r3, r3, r1
 8005fc6:	fbb2 f3f3 	udiv	r3, r2, r3
 8005fca:	4618      	mov	r0, r3
 8005fcc:	f000 f95f 	bl	800628e <HAL_SYSTICK_Config>
 8005fd0:	4603      	mov	r3, r0
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	d001      	beq.n	8005fda <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8005fd6:	2301      	movs	r3, #1
 8005fd8:	e00e      	b.n	8005ff8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	2b0f      	cmp	r3, #15
 8005fde:	d80a      	bhi.n	8005ff6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8005fe0:	2200      	movs	r2, #0
 8005fe2:	6879      	ldr	r1, [r7, #4]
 8005fe4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005fe8:	f000 f927 	bl	800623a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8005fec:	4a06      	ldr	r2, [pc, #24]	; (8006008 <HAL_InitTick+0x5c>)
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8005ff2:	2300      	movs	r3, #0
 8005ff4:	e000      	b.n	8005ff8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8005ff6:	2301      	movs	r3, #1
}
 8005ff8:	4618      	mov	r0, r3
 8005ffa:	3708      	adds	r7, #8
 8005ffc:	46bd      	mov	sp, r7
 8005ffe:	bd80      	pop	{r7, pc}
 8006000:	20000020 	.word	0x20000020
 8006004:	20000054 	.word	0x20000054
 8006008:	20000050 	.word	0x20000050

0800600c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800600c:	b480      	push	{r7}
 800600e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8006010:	4b05      	ldr	r3, [pc, #20]	; (8006028 <HAL_IncTick+0x1c>)
 8006012:	781b      	ldrb	r3, [r3, #0]
 8006014:	461a      	mov	r2, r3
 8006016:	4b05      	ldr	r3, [pc, #20]	; (800602c <HAL_IncTick+0x20>)
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	4413      	add	r3, r2
 800601c:	4a03      	ldr	r2, [pc, #12]	; (800602c <HAL_IncTick+0x20>)
 800601e:	6013      	str	r3, [r2, #0]
}
 8006020:	bf00      	nop
 8006022:	46bd      	mov	sp, r7
 8006024:	bc80      	pop	{r7}
 8006026:	4770      	bx	lr
 8006028:	20000054 	.word	0x20000054
 800602c:	200005e8 	.word	0x200005e8

08006030 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8006030:	b480      	push	{r7}
 8006032:	af00      	add	r7, sp, #0
  return uwTick;
 8006034:	4b02      	ldr	r3, [pc, #8]	; (8006040 <HAL_GetTick+0x10>)
 8006036:	681b      	ldr	r3, [r3, #0]
}
 8006038:	4618      	mov	r0, r3
 800603a:	46bd      	mov	sp, r7
 800603c:	bc80      	pop	{r7}
 800603e:	4770      	bx	lr
 8006040:	200005e8 	.word	0x200005e8

08006044 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8006044:	b580      	push	{r7, lr}
 8006046:	b084      	sub	sp, #16
 8006048:	af00      	add	r7, sp, #0
 800604a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800604c:	f7ff fff0 	bl	8006030 <HAL_GetTick>
 8006050:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800605c:	d005      	beq.n	800606a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800605e:	4b0a      	ldr	r3, [pc, #40]	; (8006088 <HAL_Delay+0x44>)
 8006060:	781b      	ldrb	r3, [r3, #0]
 8006062:	461a      	mov	r2, r3
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	4413      	add	r3, r2
 8006068:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800606a:	bf00      	nop
 800606c:	f7ff ffe0 	bl	8006030 <HAL_GetTick>
 8006070:	4602      	mov	r2, r0
 8006072:	68bb      	ldr	r3, [r7, #8]
 8006074:	1ad3      	subs	r3, r2, r3
 8006076:	68fa      	ldr	r2, [r7, #12]
 8006078:	429a      	cmp	r2, r3
 800607a:	d8f7      	bhi.n	800606c <HAL_Delay+0x28>
  {
  }
}
 800607c:	bf00      	nop
 800607e:	bf00      	nop
 8006080:	3710      	adds	r7, #16
 8006082:	46bd      	mov	sp, r7
 8006084:	bd80      	pop	{r7, pc}
 8006086:	bf00      	nop
 8006088:	20000054 	.word	0x20000054

0800608c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800608c:	b480      	push	{r7}
 800608e:	b085      	sub	sp, #20
 8006090:	af00      	add	r7, sp, #0
 8006092:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	f003 0307 	and.w	r3, r3, #7
 800609a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800609c:	4b0c      	ldr	r3, [pc, #48]	; (80060d0 <__NVIC_SetPriorityGrouping+0x44>)
 800609e:	68db      	ldr	r3, [r3, #12]
 80060a0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80060a2:	68ba      	ldr	r2, [r7, #8]
 80060a4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80060a8:	4013      	ands	r3, r2
 80060aa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80060b0:	68bb      	ldr	r3, [r7, #8]
 80060b2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80060b4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80060b8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80060bc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80060be:	4a04      	ldr	r2, [pc, #16]	; (80060d0 <__NVIC_SetPriorityGrouping+0x44>)
 80060c0:	68bb      	ldr	r3, [r7, #8]
 80060c2:	60d3      	str	r3, [r2, #12]
}
 80060c4:	bf00      	nop
 80060c6:	3714      	adds	r7, #20
 80060c8:	46bd      	mov	sp, r7
 80060ca:	bc80      	pop	{r7}
 80060cc:	4770      	bx	lr
 80060ce:	bf00      	nop
 80060d0:	e000ed00 	.word	0xe000ed00

080060d4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80060d4:	b480      	push	{r7}
 80060d6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80060d8:	4b04      	ldr	r3, [pc, #16]	; (80060ec <__NVIC_GetPriorityGrouping+0x18>)
 80060da:	68db      	ldr	r3, [r3, #12]
 80060dc:	0a1b      	lsrs	r3, r3, #8
 80060de:	f003 0307 	and.w	r3, r3, #7
}
 80060e2:	4618      	mov	r0, r3
 80060e4:	46bd      	mov	sp, r7
 80060e6:	bc80      	pop	{r7}
 80060e8:	4770      	bx	lr
 80060ea:	bf00      	nop
 80060ec:	e000ed00 	.word	0xe000ed00

080060f0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80060f0:	b480      	push	{r7}
 80060f2:	b083      	sub	sp, #12
 80060f4:	af00      	add	r7, sp, #0
 80060f6:	4603      	mov	r3, r0
 80060f8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80060fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80060fe:	2b00      	cmp	r3, #0
 8006100:	db0b      	blt.n	800611a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006102:	79fb      	ldrb	r3, [r7, #7]
 8006104:	f003 021f 	and.w	r2, r3, #31
 8006108:	4906      	ldr	r1, [pc, #24]	; (8006124 <__NVIC_EnableIRQ+0x34>)
 800610a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800610e:	095b      	lsrs	r3, r3, #5
 8006110:	2001      	movs	r0, #1
 8006112:	fa00 f202 	lsl.w	r2, r0, r2
 8006116:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800611a:	bf00      	nop
 800611c:	370c      	adds	r7, #12
 800611e:	46bd      	mov	sp, r7
 8006120:	bc80      	pop	{r7}
 8006122:	4770      	bx	lr
 8006124:	e000e100 	.word	0xe000e100

08006128 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8006128:	b480      	push	{r7}
 800612a:	b083      	sub	sp, #12
 800612c:	af00      	add	r7, sp, #0
 800612e:	4603      	mov	r3, r0
 8006130:	6039      	str	r1, [r7, #0]
 8006132:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006134:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006138:	2b00      	cmp	r3, #0
 800613a:	db0a      	blt.n	8006152 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800613c:	683b      	ldr	r3, [r7, #0]
 800613e:	b2da      	uxtb	r2, r3
 8006140:	490c      	ldr	r1, [pc, #48]	; (8006174 <__NVIC_SetPriority+0x4c>)
 8006142:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006146:	0112      	lsls	r2, r2, #4
 8006148:	b2d2      	uxtb	r2, r2
 800614a:	440b      	add	r3, r1
 800614c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8006150:	e00a      	b.n	8006168 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006152:	683b      	ldr	r3, [r7, #0]
 8006154:	b2da      	uxtb	r2, r3
 8006156:	4908      	ldr	r1, [pc, #32]	; (8006178 <__NVIC_SetPriority+0x50>)
 8006158:	79fb      	ldrb	r3, [r7, #7]
 800615a:	f003 030f 	and.w	r3, r3, #15
 800615e:	3b04      	subs	r3, #4
 8006160:	0112      	lsls	r2, r2, #4
 8006162:	b2d2      	uxtb	r2, r2
 8006164:	440b      	add	r3, r1
 8006166:	761a      	strb	r2, [r3, #24]
}
 8006168:	bf00      	nop
 800616a:	370c      	adds	r7, #12
 800616c:	46bd      	mov	sp, r7
 800616e:	bc80      	pop	{r7}
 8006170:	4770      	bx	lr
 8006172:	bf00      	nop
 8006174:	e000e100 	.word	0xe000e100
 8006178:	e000ed00 	.word	0xe000ed00

0800617c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800617c:	b480      	push	{r7}
 800617e:	b089      	sub	sp, #36	; 0x24
 8006180:	af00      	add	r7, sp, #0
 8006182:	60f8      	str	r0, [r7, #12]
 8006184:	60b9      	str	r1, [r7, #8]
 8006186:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	f003 0307 	and.w	r3, r3, #7
 800618e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006190:	69fb      	ldr	r3, [r7, #28]
 8006192:	f1c3 0307 	rsb	r3, r3, #7
 8006196:	2b04      	cmp	r3, #4
 8006198:	bf28      	it	cs
 800619a:	2304      	movcs	r3, #4
 800619c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800619e:	69fb      	ldr	r3, [r7, #28]
 80061a0:	3304      	adds	r3, #4
 80061a2:	2b06      	cmp	r3, #6
 80061a4:	d902      	bls.n	80061ac <NVIC_EncodePriority+0x30>
 80061a6:	69fb      	ldr	r3, [r7, #28]
 80061a8:	3b03      	subs	r3, #3
 80061aa:	e000      	b.n	80061ae <NVIC_EncodePriority+0x32>
 80061ac:	2300      	movs	r3, #0
 80061ae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80061b0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80061b4:	69bb      	ldr	r3, [r7, #24]
 80061b6:	fa02 f303 	lsl.w	r3, r2, r3
 80061ba:	43da      	mvns	r2, r3
 80061bc:	68bb      	ldr	r3, [r7, #8]
 80061be:	401a      	ands	r2, r3
 80061c0:	697b      	ldr	r3, [r7, #20]
 80061c2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80061c4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80061c8:	697b      	ldr	r3, [r7, #20]
 80061ca:	fa01 f303 	lsl.w	r3, r1, r3
 80061ce:	43d9      	mvns	r1, r3
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80061d4:	4313      	orrs	r3, r2
         );
}
 80061d6:	4618      	mov	r0, r3
 80061d8:	3724      	adds	r7, #36	; 0x24
 80061da:	46bd      	mov	sp, r7
 80061dc:	bc80      	pop	{r7}
 80061de:	4770      	bx	lr

080061e0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80061e0:	b580      	push	{r7, lr}
 80061e2:	b082      	sub	sp, #8
 80061e4:	af00      	add	r7, sp, #0
 80061e6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	3b01      	subs	r3, #1
 80061ec:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80061f0:	d301      	bcc.n	80061f6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80061f2:	2301      	movs	r3, #1
 80061f4:	e00f      	b.n	8006216 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80061f6:	4a0a      	ldr	r2, [pc, #40]	; (8006220 <SysTick_Config+0x40>)
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	3b01      	subs	r3, #1
 80061fc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80061fe:	210f      	movs	r1, #15
 8006200:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006204:	f7ff ff90 	bl	8006128 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8006208:	4b05      	ldr	r3, [pc, #20]	; (8006220 <SysTick_Config+0x40>)
 800620a:	2200      	movs	r2, #0
 800620c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800620e:	4b04      	ldr	r3, [pc, #16]	; (8006220 <SysTick_Config+0x40>)
 8006210:	2207      	movs	r2, #7
 8006212:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8006214:	2300      	movs	r3, #0
}
 8006216:	4618      	mov	r0, r3
 8006218:	3708      	adds	r7, #8
 800621a:	46bd      	mov	sp, r7
 800621c:	bd80      	pop	{r7, pc}
 800621e:	bf00      	nop
 8006220:	e000e010 	.word	0xe000e010

08006224 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006224:	b580      	push	{r7, lr}
 8006226:	b082      	sub	sp, #8
 8006228:	af00      	add	r7, sp, #0
 800622a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800622c:	6878      	ldr	r0, [r7, #4]
 800622e:	f7ff ff2d 	bl	800608c <__NVIC_SetPriorityGrouping>
}
 8006232:	bf00      	nop
 8006234:	3708      	adds	r7, #8
 8006236:	46bd      	mov	sp, r7
 8006238:	bd80      	pop	{r7, pc}

0800623a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800623a:	b580      	push	{r7, lr}
 800623c:	b086      	sub	sp, #24
 800623e:	af00      	add	r7, sp, #0
 8006240:	4603      	mov	r3, r0
 8006242:	60b9      	str	r1, [r7, #8]
 8006244:	607a      	str	r2, [r7, #4]
 8006246:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8006248:	2300      	movs	r3, #0
 800624a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800624c:	f7ff ff42 	bl	80060d4 <__NVIC_GetPriorityGrouping>
 8006250:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8006252:	687a      	ldr	r2, [r7, #4]
 8006254:	68b9      	ldr	r1, [r7, #8]
 8006256:	6978      	ldr	r0, [r7, #20]
 8006258:	f7ff ff90 	bl	800617c <NVIC_EncodePriority>
 800625c:	4602      	mov	r2, r0
 800625e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006262:	4611      	mov	r1, r2
 8006264:	4618      	mov	r0, r3
 8006266:	f7ff ff5f 	bl	8006128 <__NVIC_SetPriority>
}
 800626a:	bf00      	nop
 800626c:	3718      	adds	r7, #24
 800626e:	46bd      	mov	sp, r7
 8006270:	bd80      	pop	{r7, pc}

08006272 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006272:	b580      	push	{r7, lr}
 8006274:	b082      	sub	sp, #8
 8006276:	af00      	add	r7, sp, #0
 8006278:	4603      	mov	r3, r0
 800627a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800627c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006280:	4618      	mov	r0, r3
 8006282:	f7ff ff35 	bl	80060f0 <__NVIC_EnableIRQ>
}
 8006286:	bf00      	nop
 8006288:	3708      	adds	r7, #8
 800628a:	46bd      	mov	sp, r7
 800628c:	bd80      	pop	{r7, pc}

0800628e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800628e:	b580      	push	{r7, lr}
 8006290:	b082      	sub	sp, #8
 8006292:	af00      	add	r7, sp, #0
 8006294:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8006296:	6878      	ldr	r0, [r7, #4]
 8006298:	f7ff ffa2 	bl	80061e0 <SysTick_Config>
 800629c:	4603      	mov	r3, r0
}
 800629e:	4618      	mov	r0, r3
 80062a0:	3708      	adds	r7, #8
 80062a2:	46bd      	mov	sp, r7
 80062a4:	bd80      	pop	{r7, pc}
	...

080062a8 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80062a8:	b480      	push	{r7}
 80062aa:	b085      	sub	sp, #20
 80062ac:	af00      	add	r7, sp, #0
 80062ae:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80062b0:	2300      	movs	r3, #0
 80062b2:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	2b00      	cmp	r3, #0
 80062b8:	d101      	bne.n	80062be <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 80062ba:	2301      	movs	r3, #1
 80062bc:	e043      	b.n	8006346 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	461a      	mov	r2, r3
 80062c4:	4b22      	ldr	r3, [pc, #136]	; (8006350 <HAL_DMA_Init+0xa8>)
 80062c6:	4413      	add	r3, r2
 80062c8:	4a22      	ldr	r2, [pc, #136]	; (8006354 <HAL_DMA_Init+0xac>)
 80062ca:	fba2 2303 	umull	r2, r3, r2, r3
 80062ce:	091b      	lsrs	r3, r3, #4
 80062d0:	009a      	lsls	r2, r3, #2
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	4a1f      	ldr	r2, [pc, #124]	; (8006358 <HAL_DMA_Init+0xb0>)
 80062da:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	2202      	movs	r2, #2
 80062e0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80062f2:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80062f6:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8006300:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	68db      	ldr	r3, [r3, #12]
 8006306:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800630c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	695b      	ldr	r3, [r3, #20]
 8006312:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006318:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	69db      	ldr	r3, [r3, #28]
 800631e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8006320:	68fa      	ldr	r2, [r7, #12]
 8006322:	4313      	orrs	r3, r2
 8006324:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	68fa      	ldr	r2, [r7, #12]
 800632c:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	2200      	movs	r2, #0
 8006332:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	2201      	movs	r2, #1
 8006338:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	2200      	movs	r2, #0
 8006340:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8006344:	2300      	movs	r3, #0
}
 8006346:	4618      	mov	r0, r3
 8006348:	3714      	adds	r7, #20
 800634a:	46bd      	mov	sp, r7
 800634c:	bc80      	pop	{r7}
 800634e:	4770      	bx	lr
 8006350:	bffdfff8 	.word	0xbffdfff8
 8006354:	cccccccd 	.word	0xcccccccd
 8006358:	40020000 	.word	0x40020000

0800635c <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800635c:	b580      	push	{r7, lr}
 800635e:	b086      	sub	sp, #24
 8006360:	af00      	add	r7, sp, #0
 8006362:	60f8      	str	r0, [r7, #12]
 8006364:	60b9      	str	r1, [r7, #8]
 8006366:	607a      	str	r2, [r7, #4]
 8006368:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800636a:	2300      	movs	r3, #0
 800636c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006374:	2b01      	cmp	r3, #1
 8006376:	d101      	bne.n	800637c <HAL_DMA_Start_IT+0x20>
 8006378:	2302      	movs	r3, #2
 800637a:	e04a      	b.n	8006412 <HAL_DMA_Start_IT+0xb6>
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	2201      	movs	r2, #1
 8006380:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800638a:	2b01      	cmp	r3, #1
 800638c:	d13a      	bne.n	8006404 <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	2202      	movs	r2, #2
 8006392:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	2200      	movs	r2, #0
 800639a:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	681a      	ldr	r2, [r3, #0]
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	f022 0201 	bic.w	r2, r2, #1
 80063aa:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80063ac:	683b      	ldr	r3, [r7, #0]
 80063ae:	687a      	ldr	r2, [r7, #4]
 80063b0:	68b9      	ldr	r1, [r7, #8]
 80063b2:	68f8      	ldr	r0, [r7, #12]
 80063b4:	f000 f9ae 	bl	8006714 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063bc:	2b00      	cmp	r3, #0
 80063be:	d008      	beq.n	80063d2 <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	681a      	ldr	r2, [r3, #0]
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	f042 020e 	orr.w	r2, r2, #14
 80063ce:	601a      	str	r2, [r3, #0]
 80063d0:	e00f      	b.n	80063f2 <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	681a      	ldr	r2, [r3, #0]
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	f022 0204 	bic.w	r2, r2, #4
 80063e0:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	681a      	ldr	r2, [r3, #0]
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	f042 020a 	orr.w	r2, r2, #10
 80063f0:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	681a      	ldr	r2, [r3, #0]
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	f042 0201 	orr.w	r2, r2, #1
 8006400:	601a      	str	r2, [r3, #0]
 8006402:	e005      	b.n	8006410 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	2200      	movs	r2, #0
 8006408:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 800640c:	2302      	movs	r3, #2
 800640e:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8006410:	7dfb      	ldrb	r3, [r7, #23]
}
 8006412:	4618      	mov	r0, r3
 8006414:	3718      	adds	r7, #24
 8006416:	46bd      	mov	sp, r7
 8006418:	bd80      	pop	{r7, pc}
	...

0800641c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 800641c:	b580      	push	{r7, lr}
 800641e:	b084      	sub	sp, #16
 8006420:	af00      	add	r7, sp, #0
 8006422:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006424:	2300      	movs	r3, #0
 8006426:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800642e:	2b02      	cmp	r3, #2
 8006430:	d005      	beq.n	800643e <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	2204      	movs	r2, #4
 8006436:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8006438:	2301      	movs	r3, #1
 800643a:	73fb      	strb	r3, [r7, #15]
 800643c:	e051      	b.n	80064e2 <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	681a      	ldr	r2, [r3, #0]
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	f022 020e 	bic.w	r2, r2, #14
 800644c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	681a      	ldr	r2, [r3, #0]
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	f022 0201 	bic.w	r2, r2, #1
 800645c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	4a22      	ldr	r2, [pc, #136]	; (80064ec <HAL_DMA_Abort_IT+0xd0>)
 8006464:	4293      	cmp	r3, r2
 8006466:	d029      	beq.n	80064bc <HAL_DMA_Abort_IT+0xa0>
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	4a20      	ldr	r2, [pc, #128]	; (80064f0 <HAL_DMA_Abort_IT+0xd4>)
 800646e:	4293      	cmp	r3, r2
 8006470:	d022      	beq.n	80064b8 <HAL_DMA_Abort_IT+0x9c>
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	4a1f      	ldr	r2, [pc, #124]	; (80064f4 <HAL_DMA_Abort_IT+0xd8>)
 8006478:	4293      	cmp	r3, r2
 800647a:	d01a      	beq.n	80064b2 <HAL_DMA_Abort_IT+0x96>
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	4a1d      	ldr	r2, [pc, #116]	; (80064f8 <HAL_DMA_Abort_IT+0xdc>)
 8006482:	4293      	cmp	r3, r2
 8006484:	d012      	beq.n	80064ac <HAL_DMA_Abort_IT+0x90>
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	4a1c      	ldr	r2, [pc, #112]	; (80064fc <HAL_DMA_Abort_IT+0xe0>)
 800648c:	4293      	cmp	r3, r2
 800648e:	d00a      	beq.n	80064a6 <HAL_DMA_Abort_IT+0x8a>
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	4a1a      	ldr	r2, [pc, #104]	; (8006500 <HAL_DMA_Abort_IT+0xe4>)
 8006496:	4293      	cmp	r3, r2
 8006498:	d102      	bne.n	80064a0 <HAL_DMA_Abort_IT+0x84>
 800649a:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800649e:	e00e      	b.n	80064be <HAL_DMA_Abort_IT+0xa2>
 80064a0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80064a4:	e00b      	b.n	80064be <HAL_DMA_Abort_IT+0xa2>
 80064a6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80064aa:	e008      	b.n	80064be <HAL_DMA_Abort_IT+0xa2>
 80064ac:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80064b0:	e005      	b.n	80064be <HAL_DMA_Abort_IT+0xa2>
 80064b2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80064b6:	e002      	b.n	80064be <HAL_DMA_Abort_IT+0xa2>
 80064b8:	2310      	movs	r3, #16
 80064ba:	e000      	b.n	80064be <HAL_DMA_Abort_IT+0xa2>
 80064bc:	2301      	movs	r3, #1
 80064be:	4a11      	ldr	r2, [pc, #68]	; (8006504 <HAL_DMA_Abort_IT+0xe8>)
 80064c0:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	2201      	movs	r2, #1
 80064c6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	2200      	movs	r2, #0
 80064ce:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	d003      	beq.n	80064e2 <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80064de:	6878      	ldr	r0, [r7, #4]
 80064e0:	4798      	blx	r3
    } 
  }
  return status;
 80064e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80064e4:	4618      	mov	r0, r3
 80064e6:	3710      	adds	r7, #16
 80064e8:	46bd      	mov	sp, r7
 80064ea:	bd80      	pop	{r7, pc}
 80064ec:	40020008 	.word	0x40020008
 80064f0:	4002001c 	.word	0x4002001c
 80064f4:	40020030 	.word	0x40020030
 80064f8:	40020044 	.word	0x40020044
 80064fc:	40020058 	.word	0x40020058
 8006500:	4002006c 	.word	0x4002006c
 8006504:	40020000 	.word	0x40020000

08006508 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8006508:	b580      	push	{r7, lr}
 800650a:	b084      	sub	sp, #16
 800650c:	af00      	add	r7, sp, #0
 800650e:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006524:	2204      	movs	r2, #4
 8006526:	409a      	lsls	r2, r3
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	4013      	ands	r3, r2
 800652c:	2b00      	cmp	r3, #0
 800652e:	d04f      	beq.n	80065d0 <HAL_DMA_IRQHandler+0xc8>
 8006530:	68bb      	ldr	r3, [r7, #8]
 8006532:	f003 0304 	and.w	r3, r3, #4
 8006536:	2b00      	cmp	r3, #0
 8006538:	d04a      	beq.n	80065d0 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	f003 0320 	and.w	r3, r3, #32
 8006544:	2b00      	cmp	r3, #0
 8006546:	d107      	bne.n	8006558 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	681a      	ldr	r2, [r3, #0]
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	f022 0204 	bic.w	r2, r2, #4
 8006556:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	4a66      	ldr	r2, [pc, #408]	; (80066f8 <HAL_DMA_IRQHandler+0x1f0>)
 800655e:	4293      	cmp	r3, r2
 8006560:	d029      	beq.n	80065b6 <HAL_DMA_IRQHandler+0xae>
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	4a65      	ldr	r2, [pc, #404]	; (80066fc <HAL_DMA_IRQHandler+0x1f4>)
 8006568:	4293      	cmp	r3, r2
 800656a:	d022      	beq.n	80065b2 <HAL_DMA_IRQHandler+0xaa>
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	4a63      	ldr	r2, [pc, #396]	; (8006700 <HAL_DMA_IRQHandler+0x1f8>)
 8006572:	4293      	cmp	r3, r2
 8006574:	d01a      	beq.n	80065ac <HAL_DMA_IRQHandler+0xa4>
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	4a62      	ldr	r2, [pc, #392]	; (8006704 <HAL_DMA_IRQHandler+0x1fc>)
 800657c:	4293      	cmp	r3, r2
 800657e:	d012      	beq.n	80065a6 <HAL_DMA_IRQHandler+0x9e>
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	4a60      	ldr	r2, [pc, #384]	; (8006708 <HAL_DMA_IRQHandler+0x200>)
 8006586:	4293      	cmp	r3, r2
 8006588:	d00a      	beq.n	80065a0 <HAL_DMA_IRQHandler+0x98>
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	4a5f      	ldr	r2, [pc, #380]	; (800670c <HAL_DMA_IRQHandler+0x204>)
 8006590:	4293      	cmp	r3, r2
 8006592:	d102      	bne.n	800659a <HAL_DMA_IRQHandler+0x92>
 8006594:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8006598:	e00e      	b.n	80065b8 <HAL_DMA_IRQHandler+0xb0>
 800659a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800659e:	e00b      	b.n	80065b8 <HAL_DMA_IRQHandler+0xb0>
 80065a0:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80065a4:	e008      	b.n	80065b8 <HAL_DMA_IRQHandler+0xb0>
 80065a6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80065aa:	e005      	b.n	80065b8 <HAL_DMA_IRQHandler+0xb0>
 80065ac:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80065b0:	e002      	b.n	80065b8 <HAL_DMA_IRQHandler+0xb0>
 80065b2:	2340      	movs	r3, #64	; 0x40
 80065b4:	e000      	b.n	80065b8 <HAL_DMA_IRQHandler+0xb0>
 80065b6:	2304      	movs	r3, #4
 80065b8:	4a55      	ldr	r2, [pc, #340]	; (8006710 <HAL_DMA_IRQHandler+0x208>)
 80065ba:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065c0:	2b00      	cmp	r3, #0
 80065c2:	f000 8094 	beq.w	80066ee <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065ca:	6878      	ldr	r0, [r7, #4]
 80065cc:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 80065ce:	e08e      	b.n	80066ee <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065d4:	2202      	movs	r2, #2
 80065d6:	409a      	lsls	r2, r3
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	4013      	ands	r3, r2
 80065dc:	2b00      	cmp	r3, #0
 80065de:	d056      	beq.n	800668e <HAL_DMA_IRQHandler+0x186>
 80065e0:	68bb      	ldr	r3, [r7, #8]
 80065e2:	f003 0302 	and.w	r3, r3, #2
 80065e6:	2b00      	cmp	r3, #0
 80065e8:	d051      	beq.n	800668e <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	f003 0320 	and.w	r3, r3, #32
 80065f4:	2b00      	cmp	r3, #0
 80065f6:	d10b      	bne.n	8006610 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	681a      	ldr	r2, [r3, #0]
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	f022 020a 	bic.w	r2, r2, #10
 8006606:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	2201      	movs	r2, #1
 800660c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	4a38      	ldr	r2, [pc, #224]	; (80066f8 <HAL_DMA_IRQHandler+0x1f0>)
 8006616:	4293      	cmp	r3, r2
 8006618:	d029      	beq.n	800666e <HAL_DMA_IRQHandler+0x166>
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	4a37      	ldr	r2, [pc, #220]	; (80066fc <HAL_DMA_IRQHandler+0x1f4>)
 8006620:	4293      	cmp	r3, r2
 8006622:	d022      	beq.n	800666a <HAL_DMA_IRQHandler+0x162>
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	4a35      	ldr	r2, [pc, #212]	; (8006700 <HAL_DMA_IRQHandler+0x1f8>)
 800662a:	4293      	cmp	r3, r2
 800662c:	d01a      	beq.n	8006664 <HAL_DMA_IRQHandler+0x15c>
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	4a34      	ldr	r2, [pc, #208]	; (8006704 <HAL_DMA_IRQHandler+0x1fc>)
 8006634:	4293      	cmp	r3, r2
 8006636:	d012      	beq.n	800665e <HAL_DMA_IRQHandler+0x156>
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	4a32      	ldr	r2, [pc, #200]	; (8006708 <HAL_DMA_IRQHandler+0x200>)
 800663e:	4293      	cmp	r3, r2
 8006640:	d00a      	beq.n	8006658 <HAL_DMA_IRQHandler+0x150>
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	4a31      	ldr	r2, [pc, #196]	; (800670c <HAL_DMA_IRQHandler+0x204>)
 8006648:	4293      	cmp	r3, r2
 800664a:	d102      	bne.n	8006652 <HAL_DMA_IRQHandler+0x14a>
 800664c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8006650:	e00e      	b.n	8006670 <HAL_DMA_IRQHandler+0x168>
 8006652:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006656:	e00b      	b.n	8006670 <HAL_DMA_IRQHandler+0x168>
 8006658:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800665c:	e008      	b.n	8006670 <HAL_DMA_IRQHandler+0x168>
 800665e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8006662:	e005      	b.n	8006670 <HAL_DMA_IRQHandler+0x168>
 8006664:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006668:	e002      	b.n	8006670 <HAL_DMA_IRQHandler+0x168>
 800666a:	2320      	movs	r3, #32
 800666c:	e000      	b.n	8006670 <HAL_DMA_IRQHandler+0x168>
 800666e:	2302      	movs	r3, #2
 8006670:	4a27      	ldr	r2, [pc, #156]	; (8006710 <HAL_DMA_IRQHandler+0x208>)
 8006672:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	2200      	movs	r2, #0
 8006678:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006680:	2b00      	cmp	r3, #0
 8006682:	d034      	beq.n	80066ee <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006688:	6878      	ldr	r0, [r7, #4]
 800668a:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 800668c:	e02f      	b.n	80066ee <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006692:	2208      	movs	r2, #8
 8006694:	409a      	lsls	r2, r3
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	4013      	ands	r3, r2
 800669a:	2b00      	cmp	r3, #0
 800669c:	d028      	beq.n	80066f0 <HAL_DMA_IRQHandler+0x1e8>
 800669e:	68bb      	ldr	r3, [r7, #8]
 80066a0:	f003 0308 	and.w	r3, r3, #8
 80066a4:	2b00      	cmp	r3, #0
 80066a6:	d023      	beq.n	80066f0 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	681a      	ldr	r2, [r3, #0]
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	f022 020e 	bic.w	r2, r2, #14
 80066b6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80066c0:	2101      	movs	r1, #1
 80066c2:	fa01 f202 	lsl.w	r2, r1, r2
 80066c6:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	2201      	movs	r2, #1
 80066cc:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	2201      	movs	r2, #1
 80066d2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	2200      	movs	r2, #0
 80066da:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	d004      	beq.n	80066f0 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066ea:	6878      	ldr	r0, [r7, #4]
 80066ec:	4798      	blx	r3
    }
  }
  return;
 80066ee:	bf00      	nop
 80066f0:	bf00      	nop
}
 80066f2:	3710      	adds	r7, #16
 80066f4:	46bd      	mov	sp, r7
 80066f6:	bd80      	pop	{r7, pc}
 80066f8:	40020008 	.word	0x40020008
 80066fc:	4002001c 	.word	0x4002001c
 8006700:	40020030 	.word	0x40020030
 8006704:	40020044 	.word	0x40020044
 8006708:	40020058 	.word	0x40020058
 800670c:	4002006c 	.word	0x4002006c
 8006710:	40020000 	.word	0x40020000

08006714 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006714:	b480      	push	{r7}
 8006716:	b085      	sub	sp, #20
 8006718:	af00      	add	r7, sp, #0
 800671a:	60f8      	str	r0, [r7, #12]
 800671c:	60b9      	str	r1, [r7, #8]
 800671e:	607a      	str	r2, [r7, #4]
 8006720:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8006722:	68fb      	ldr	r3, [r7, #12]
 8006724:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006726:	68fb      	ldr	r3, [r7, #12]
 8006728:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800672a:	2101      	movs	r1, #1
 800672c:	fa01 f202 	lsl.w	r2, r1, r2
 8006730:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8006732:	68fb      	ldr	r3, [r7, #12]
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	683a      	ldr	r2, [r7, #0]
 8006738:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800673a:	68fb      	ldr	r3, [r7, #12]
 800673c:	685b      	ldr	r3, [r3, #4]
 800673e:	2b10      	cmp	r3, #16
 8006740:	d108      	bne.n	8006754 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8006742:	68fb      	ldr	r3, [r7, #12]
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	687a      	ldr	r2, [r7, #4]
 8006748:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800674a:	68fb      	ldr	r3, [r7, #12]
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	68ba      	ldr	r2, [r7, #8]
 8006750:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8006752:	e007      	b.n	8006764 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8006754:	68fb      	ldr	r3, [r7, #12]
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	68ba      	ldr	r2, [r7, #8]
 800675a:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800675c:	68fb      	ldr	r3, [r7, #12]
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	687a      	ldr	r2, [r7, #4]
 8006762:	60da      	str	r2, [r3, #12]
}
 8006764:	bf00      	nop
 8006766:	3714      	adds	r7, #20
 8006768:	46bd      	mov	sp, r7
 800676a:	bc80      	pop	{r7}
 800676c:	4770      	bx	lr
	...

08006770 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006770:	b480      	push	{r7}
 8006772:	b08b      	sub	sp, #44	; 0x2c
 8006774:	af00      	add	r7, sp, #0
 8006776:	6078      	str	r0, [r7, #4]
 8006778:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800677a:	2300      	movs	r3, #0
 800677c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800677e:	2300      	movs	r3, #0
 8006780:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8006782:	e169      	b.n	8006a58 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8006784:	2201      	movs	r2, #1
 8006786:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006788:	fa02 f303 	lsl.w	r3, r2, r3
 800678c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800678e:	683b      	ldr	r3, [r7, #0]
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	69fa      	ldr	r2, [r7, #28]
 8006794:	4013      	ands	r3, r2
 8006796:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8006798:	69ba      	ldr	r2, [r7, #24]
 800679a:	69fb      	ldr	r3, [r7, #28]
 800679c:	429a      	cmp	r2, r3
 800679e:	f040 8158 	bne.w	8006a52 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80067a2:	683b      	ldr	r3, [r7, #0]
 80067a4:	685b      	ldr	r3, [r3, #4]
 80067a6:	4a9a      	ldr	r2, [pc, #616]	; (8006a10 <HAL_GPIO_Init+0x2a0>)
 80067a8:	4293      	cmp	r3, r2
 80067aa:	d05e      	beq.n	800686a <HAL_GPIO_Init+0xfa>
 80067ac:	4a98      	ldr	r2, [pc, #608]	; (8006a10 <HAL_GPIO_Init+0x2a0>)
 80067ae:	4293      	cmp	r3, r2
 80067b0:	d875      	bhi.n	800689e <HAL_GPIO_Init+0x12e>
 80067b2:	4a98      	ldr	r2, [pc, #608]	; (8006a14 <HAL_GPIO_Init+0x2a4>)
 80067b4:	4293      	cmp	r3, r2
 80067b6:	d058      	beq.n	800686a <HAL_GPIO_Init+0xfa>
 80067b8:	4a96      	ldr	r2, [pc, #600]	; (8006a14 <HAL_GPIO_Init+0x2a4>)
 80067ba:	4293      	cmp	r3, r2
 80067bc:	d86f      	bhi.n	800689e <HAL_GPIO_Init+0x12e>
 80067be:	4a96      	ldr	r2, [pc, #600]	; (8006a18 <HAL_GPIO_Init+0x2a8>)
 80067c0:	4293      	cmp	r3, r2
 80067c2:	d052      	beq.n	800686a <HAL_GPIO_Init+0xfa>
 80067c4:	4a94      	ldr	r2, [pc, #592]	; (8006a18 <HAL_GPIO_Init+0x2a8>)
 80067c6:	4293      	cmp	r3, r2
 80067c8:	d869      	bhi.n	800689e <HAL_GPIO_Init+0x12e>
 80067ca:	4a94      	ldr	r2, [pc, #592]	; (8006a1c <HAL_GPIO_Init+0x2ac>)
 80067cc:	4293      	cmp	r3, r2
 80067ce:	d04c      	beq.n	800686a <HAL_GPIO_Init+0xfa>
 80067d0:	4a92      	ldr	r2, [pc, #584]	; (8006a1c <HAL_GPIO_Init+0x2ac>)
 80067d2:	4293      	cmp	r3, r2
 80067d4:	d863      	bhi.n	800689e <HAL_GPIO_Init+0x12e>
 80067d6:	4a92      	ldr	r2, [pc, #584]	; (8006a20 <HAL_GPIO_Init+0x2b0>)
 80067d8:	4293      	cmp	r3, r2
 80067da:	d046      	beq.n	800686a <HAL_GPIO_Init+0xfa>
 80067dc:	4a90      	ldr	r2, [pc, #576]	; (8006a20 <HAL_GPIO_Init+0x2b0>)
 80067de:	4293      	cmp	r3, r2
 80067e0:	d85d      	bhi.n	800689e <HAL_GPIO_Init+0x12e>
 80067e2:	2b12      	cmp	r3, #18
 80067e4:	d82a      	bhi.n	800683c <HAL_GPIO_Init+0xcc>
 80067e6:	2b12      	cmp	r3, #18
 80067e8:	d859      	bhi.n	800689e <HAL_GPIO_Init+0x12e>
 80067ea:	a201      	add	r2, pc, #4	; (adr r2, 80067f0 <HAL_GPIO_Init+0x80>)
 80067ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80067f0:	0800686b 	.word	0x0800686b
 80067f4:	08006845 	.word	0x08006845
 80067f8:	08006857 	.word	0x08006857
 80067fc:	08006899 	.word	0x08006899
 8006800:	0800689f 	.word	0x0800689f
 8006804:	0800689f 	.word	0x0800689f
 8006808:	0800689f 	.word	0x0800689f
 800680c:	0800689f 	.word	0x0800689f
 8006810:	0800689f 	.word	0x0800689f
 8006814:	0800689f 	.word	0x0800689f
 8006818:	0800689f 	.word	0x0800689f
 800681c:	0800689f 	.word	0x0800689f
 8006820:	0800689f 	.word	0x0800689f
 8006824:	0800689f 	.word	0x0800689f
 8006828:	0800689f 	.word	0x0800689f
 800682c:	0800689f 	.word	0x0800689f
 8006830:	0800689f 	.word	0x0800689f
 8006834:	0800684d 	.word	0x0800684d
 8006838:	08006861 	.word	0x08006861
 800683c:	4a79      	ldr	r2, [pc, #484]	; (8006a24 <HAL_GPIO_Init+0x2b4>)
 800683e:	4293      	cmp	r3, r2
 8006840:	d013      	beq.n	800686a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8006842:	e02c      	b.n	800689e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8006844:	683b      	ldr	r3, [r7, #0]
 8006846:	68db      	ldr	r3, [r3, #12]
 8006848:	623b      	str	r3, [r7, #32]
          break;
 800684a:	e029      	b.n	80068a0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800684c:	683b      	ldr	r3, [r7, #0]
 800684e:	68db      	ldr	r3, [r3, #12]
 8006850:	3304      	adds	r3, #4
 8006852:	623b      	str	r3, [r7, #32]
          break;
 8006854:	e024      	b.n	80068a0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8006856:	683b      	ldr	r3, [r7, #0]
 8006858:	68db      	ldr	r3, [r3, #12]
 800685a:	3308      	adds	r3, #8
 800685c:	623b      	str	r3, [r7, #32]
          break;
 800685e:	e01f      	b.n	80068a0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8006860:	683b      	ldr	r3, [r7, #0]
 8006862:	68db      	ldr	r3, [r3, #12]
 8006864:	330c      	adds	r3, #12
 8006866:	623b      	str	r3, [r7, #32]
          break;
 8006868:	e01a      	b.n	80068a0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800686a:	683b      	ldr	r3, [r7, #0]
 800686c:	689b      	ldr	r3, [r3, #8]
 800686e:	2b00      	cmp	r3, #0
 8006870:	d102      	bne.n	8006878 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8006872:	2304      	movs	r3, #4
 8006874:	623b      	str	r3, [r7, #32]
          break;
 8006876:	e013      	b.n	80068a0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8006878:	683b      	ldr	r3, [r7, #0]
 800687a:	689b      	ldr	r3, [r3, #8]
 800687c:	2b01      	cmp	r3, #1
 800687e:	d105      	bne.n	800688c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8006880:	2308      	movs	r3, #8
 8006882:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	69fa      	ldr	r2, [r7, #28]
 8006888:	611a      	str	r2, [r3, #16]
          break;
 800688a:	e009      	b.n	80068a0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800688c:	2308      	movs	r3, #8
 800688e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	69fa      	ldr	r2, [r7, #28]
 8006894:	615a      	str	r2, [r3, #20]
          break;
 8006896:	e003      	b.n	80068a0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8006898:	2300      	movs	r3, #0
 800689a:	623b      	str	r3, [r7, #32]
          break;
 800689c:	e000      	b.n	80068a0 <HAL_GPIO_Init+0x130>
          break;
 800689e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80068a0:	69bb      	ldr	r3, [r7, #24]
 80068a2:	2bff      	cmp	r3, #255	; 0xff
 80068a4:	d801      	bhi.n	80068aa <HAL_GPIO_Init+0x13a>
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	e001      	b.n	80068ae <HAL_GPIO_Init+0x13e>
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	3304      	adds	r3, #4
 80068ae:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80068b0:	69bb      	ldr	r3, [r7, #24]
 80068b2:	2bff      	cmp	r3, #255	; 0xff
 80068b4:	d802      	bhi.n	80068bc <HAL_GPIO_Init+0x14c>
 80068b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068b8:	009b      	lsls	r3, r3, #2
 80068ba:	e002      	b.n	80068c2 <HAL_GPIO_Init+0x152>
 80068bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068be:	3b08      	subs	r3, #8
 80068c0:	009b      	lsls	r3, r3, #2
 80068c2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80068c4:	697b      	ldr	r3, [r7, #20]
 80068c6:	681a      	ldr	r2, [r3, #0]
 80068c8:	210f      	movs	r1, #15
 80068ca:	693b      	ldr	r3, [r7, #16]
 80068cc:	fa01 f303 	lsl.w	r3, r1, r3
 80068d0:	43db      	mvns	r3, r3
 80068d2:	401a      	ands	r2, r3
 80068d4:	6a39      	ldr	r1, [r7, #32]
 80068d6:	693b      	ldr	r3, [r7, #16]
 80068d8:	fa01 f303 	lsl.w	r3, r1, r3
 80068dc:	431a      	orrs	r2, r3
 80068de:	697b      	ldr	r3, [r7, #20]
 80068e0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80068e2:	683b      	ldr	r3, [r7, #0]
 80068e4:	685b      	ldr	r3, [r3, #4]
 80068e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80068ea:	2b00      	cmp	r3, #0
 80068ec:	f000 80b1 	beq.w	8006a52 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80068f0:	4b4d      	ldr	r3, [pc, #308]	; (8006a28 <HAL_GPIO_Init+0x2b8>)
 80068f2:	699b      	ldr	r3, [r3, #24]
 80068f4:	4a4c      	ldr	r2, [pc, #304]	; (8006a28 <HAL_GPIO_Init+0x2b8>)
 80068f6:	f043 0301 	orr.w	r3, r3, #1
 80068fa:	6193      	str	r3, [r2, #24]
 80068fc:	4b4a      	ldr	r3, [pc, #296]	; (8006a28 <HAL_GPIO_Init+0x2b8>)
 80068fe:	699b      	ldr	r3, [r3, #24]
 8006900:	f003 0301 	and.w	r3, r3, #1
 8006904:	60bb      	str	r3, [r7, #8]
 8006906:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8006908:	4a48      	ldr	r2, [pc, #288]	; (8006a2c <HAL_GPIO_Init+0x2bc>)
 800690a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800690c:	089b      	lsrs	r3, r3, #2
 800690e:	3302      	adds	r3, #2
 8006910:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006914:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8006916:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006918:	f003 0303 	and.w	r3, r3, #3
 800691c:	009b      	lsls	r3, r3, #2
 800691e:	220f      	movs	r2, #15
 8006920:	fa02 f303 	lsl.w	r3, r2, r3
 8006924:	43db      	mvns	r3, r3
 8006926:	68fa      	ldr	r2, [r7, #12]
 8006928:	4013      	ands	r3, r2
 800692a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	4a40      	ldr	r2, [pc, #256]	; (8006a30 <HAL_GPIO_Init+0x2c0>)
 8006930:	4293      	cmp	r3, r2
 8006932:	d013      	beq.n	800695c <HAL_GPIO_Init+0x1ec>
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	4a3f      	ldr	r2, [pc, #252]	; (8006a34 <HAL_GPIO_Init+0x2c4>)
 8006938:	4293      	cmp	r3, r2
 800693a:	d00d      	beq.n	8006958 <HAL_GPIO_Init+0x1e8>
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	4a3e      	ldr	r2, [pc, #248]	; (8006a38 <HAL_GPIO_Init+0x2c8>)
 8006940:	4293      	cmp	r3, r2
 8006942:	d007      	beq.n	8006954 <HAL_GPIO_Init+0x1e4>
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	4a3d      	ldr	r2, [pc, #244]	; (8006a3c <HAL_GPIO_Init+0x2cc>)
 8006948:	4293      	cmp	r3, r2
 800694a:	d101      	bne.n	8006950 <HAL_GPIO_Init+0x1e0>
 800694c:	2303      	movs	r3, #3
 800694e:	e006      	b.n	800695e <HAL_GPIO_Init+0x1ee>
 8006950:	2304      	movs	r3, #4
 8006952:	e004      	b.n	800695e <HAL_GPIO_Init+0x1ee>
 8006954:	2302      	movs	r3, #2
 8006956:	e002      	b.n	800695e <HAL_GPIO_Init+0x1ee>
 8006958:	2301      	movs	r3, #1
 800695a:	e000      	b.n	800695e <HAL_GPIO_Init+0x1ee>
 800695c:	2300      	movs	r3, #0
 800695e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006960:	f002 0203 	and.w	r2, r2, #3
 8006964:	0092      	lsls	r2, r2, #2
 8006966:	4093      	lsls	r3, r2
 8006968:	68fa      	ldr	r2, [r7, #12]
 800696a:	4313      	orrs	r3, r2
 800696c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800696e:	492f      	ldr	r1, [pc, #188]	; (8006a2c <HAL_GPIO_Init+0x2bc>)
 8006970:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006972:	089b      	lsrs	r3, r3, #2
 8006974:	3302      	adds	r3, #2
 8006976:	68fa      	ldr	r2, [r7, #12]
 8006978:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800697c:	683b      	ldr	r3, [r7, #0]
 800697e:	685b      	ldr	r3, [r3, #4]
 8006980:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006984:	2b00      	cmp	r3, #0
 8006986:	d006      	beq.n	8006996 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8006988:	4b2d      	ldr	r3, [pc, #180]	; (8006a40 <HAL_GPIO_Init+0x2d0>)
 800698a:	681a      	ldr	r2, [r3, #0]
 800698c:	492c      	ldr	r1, [pc, #176]	; (8006a40 <HAL_GPIO_Init+0x2d0>)
 800698e:	69bb      	ldr	r3, [r7, #24]
 8006990:	4313      	orrs	r3, r2
 8006992:	600b      	str	r3, [r1, #0]
 8006994:	e006      	b.n	80069a4 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8006996:	4b2a      	ldr	r3, [pc, #168]	; (8006a40 <HAL_GPIO_Init+0x2d0>)
 8006998:	681a      	ldr	r2, [r3, #0]
 800699a:	69bb      	ldr	r3, [r7, #24]
 800699c:	43db      	mvns	r3, r3
 800699e:	4928      	ldr	r1, [pc, #160]	; (8006a40 <HAL_GPIO_Init+0x2d0>)
 80069a0:	4013      	ands	r3, r2
 80069a2:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80069a4:	683b      	ldr	r3, [r7, #0]
 80069a6:	685b      	ldr	r3, [r3, #4]
 80069a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80069ac:	2b00      	cmp	r3, #0
 80069ae:	d006      	beq.n	80069be <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80069b0:	4b23      	ldr	r3, [pc, #140]	; (8006a40 <HAL_GPIO_Init+0x2d0>)
 80069b2:	685a      	ldr	r2, [r3, #4]
 80069b4:	4922      	ldr	r1, [pc, #136]	; (8006a40 <HAL_GPIO_Init+0x2d0>)
 80069b6:	69bb      	ldr	r3, [r7, #24]
 80069b8:	4313      	orrs	r3, r2
 80069ba:	604b      	str	r3, [r1, #4]
 80069bc:	e006      	b.n	80069cc <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80069be:	4b20      	ldr	r3, [pc, #128]	; (8006a40 <HAL_GPIO_Init+0x2d0>)
 80069c0:	685a      	ldr	r2, [r3, #4]
 80069c2:	69bb      	ldr	r3, [r7, #24]
 80069c4:	43db      	mvns	r3, r3
 80069c6:	491e      	ldr	r1, [pc, #120]	; (8006a40 <HAL_GPIO_Init+0x2d0>)
 80069c8:	4013      	ands	r3, r2
 80069ca:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80069cc:	683b      	ldr	r3, [r7, #0]
 80069ce:	685b      	ldr	r3, [r3, #4]
 80069d0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80069d4:	2b00      	cmp	r3, #0
 80069d6:	d006      	beq.n	80069e6 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80069d8:	4b19      	ldr	r3, [pc, #100]	; (8006a40 <HAL_GPIO_Init+0x2d0>)
 80069da:	689a      	ldr	r2, [r3, #8]
 80069dc:	4918      	ldr	r1, [pc, #96]	; (8006a40 <HAL_GPIO_Init+0x2d0>)
 80069de:	69bb      	ldr	r3, [r7, #24]
 80069e0:	4313      	orrs	r3, r2
 80069e2:	608b      	str	r3, [r1, #8]
 80069e4:	e006      	b.n	80069f4 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80069e6:	4b16      	ldr	r3, [pc, #88]	; (8006a40 <HAL_GPIO_Init+0x2d0>)
 80069e8:	689a      	ldr	r2, [r3, #8]
 80069ea:	69bb      	ldr	r3, [r7, #24]
 80069ec:	43db      	mvns	r3, r3
 80069ee:	4914      	ldr	r1, [pc, #80]	; (8006a40 <HAL_GPIO_Init+0x2d0>)
 80069f0:	4013      	ands	r3, r2
 80069f2:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80069f4:	683b      	ldr	r3, [r7, #0]
 80069f6:	685b      	ldr	r3, [r3, #4]
 80069f8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80069fc:	2b00      	cmp	r3, #0
 80069fe:	d021      	beq.n	8006a44 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8006a00:	4b0f      	ldr	r3, [pc, #60]	; (8006a40 <HAL_GPIO_Init+0x2d0>)
 8006a02:	68da      	ldr	r2, [r3, #12]
 8006a04:	490e      	ldr	r1, [pc, #56]	; (8006a40 <HAL_GPIO_Init+0x2d0>)
 8006a06:	69bb      	ldr	r3, [r7, #24]
 8006a08:	4313      	orrs	r3, r2
 8006a0a:	60cb      	str	r3, [r1, #12]
 8006a0c:	e021      	b.n	8006a52 <HAL_GPIO_Init+0x2e2>
 8006a0e:	bf00      	nop
 8006a10:	10320000 	.word	0x10320000
 8006a14:	10310000 	.word	0x10310000
 8006a18:	10220000 	.word	0x10220000
 8006a1c:	10210000 	.word	0x10210000
 8006a20:	10120000 	.word	0x10120000
 8006a24:	10110000 	.word	0x10110000
 8006a28:	40021000 	.word	0x40021000
 8006a2c:	40010000 	.word	0x40010000
 8006a30:	40010800 	.word	0x40010800
 8006a34:	40010c00 	.word	0x40010c00
 8006a38:	40011000 	.word	0x40011000
 8006a3c:	40011400 	.word	0x40011400
 8006a40:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8006a44:	4b0b      	ldr	r3, [pc, #44]	; (8006a74 <HAL_GPIO_Init+0x304>)
 8006a46:	68da      	ldr	r2, [r3, #12]
 8006a48:	69bb      	ldr	r3, [r7, #24]
 8006a4a:	43db      	mvns	r3, r3
 8006a4c:	4909      	ldr	r1, [pc, #36]	; (8006a74 <HAL_GPIO_Init+0x304>)
 8006a4e:	4013      	ands	r3, r2
 8006a50:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8006a52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a54:	3301      	adds	r3, #1
 8006a56:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8006a58:	683b      	ldr	r3, [r7, #0]
 8006a5a:	681a      	ldr	r2, [r3, #0]
 8006a5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a5e:	fa22 f303 	lsr.w	r3, r2, r3
 8006a62:	2b00      	cmp	r3, #0
 8006a64:	f47f ae8e 	bne.w	8006784 <HAL_GPIO_Init+0x14>
  }
}
 8006a68:	bf00      	nop
 8006a6a:	bf00      	nop
 8006a6c:	372c      	adds	r7, #44	; 0x2c
 8006a6e:	46bd      	mov	sp, r7
 8006a70:	bc80      	pop	{r7}
 8006a72:	4770      	bx	lr
 8006a74:	40010400 	.word	0x40010400

08006a78 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006a78:	b480      	push	{r7}
 8006a7a:	b083      	sub	sp, #12
 8006a7c:	af00      	add	r7, sp, #0
 8006a7e:	6078      	str	r0, [r7, #4]
 8006a80:	460b      	mov	r3, r1
 8006a82:	807b      	strh	r3, [r7, #2]
 8006a84:	4613      	mov	r3, r2
 8006a86:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8006a88:	787b      	ldrb	r3, [r7, #1]
 8006a8a:	2b00      	cmp	r3, #0
 8006a8c:	d003      	beq.n	8006a96 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8006a8e:	887a      	ldrh	r2, [r7, #2]
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8006a94:	e003      	b.n	8006a9e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8006a96:	887b      	ldrh	r3, [r7, #2]
 8006a98:	041a      	lsls	r2, r3, #16
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	611a      	str	r2, [r3, #16]
}
 8006a9e:	bf00      	nop
 8006aa0:	370c      	adds	r7, #12
 8006aa2:	46bd      	mov	sp, r7
 8006aa4:	bc80      	pop	{r7}
 8006aa6:	4770      	bx	lr

08006aa8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8006aa8:	b580      	push	{r7, lr}
 8006aaa:	b084      	sub	sp, #16
 8006aac:	af00      	add	r7, sp, #0
 8006aae:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	2b00      	cmp	r3, #0
 8006ab4:	d101      	bne.n	8006aba <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8006ab6:	2301      	movs	r3, #1
 8006ab8:	e12b      	b.n	8006d12 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006ac0:	b2db      	uxtb	r3, r3
 8006ac2:	2b00      	cmp	r3, #0
 8006ac4:	d106      	bne.n	8006ad4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	2200      	movs	r2, #0
 8006aca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8006ace:	6878      	ldr	r0, [r7, #4]
 8006ad0:	f7fe f898 	bl	8004c04 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	2224      	movs	r2, #36	; 0x24
 8006ad8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	681a      	ldr	r2, [r3, #0]
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	f022 0201 	bic.w	r2, r2, #1
 8006aea:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	681a      	ldr	r2, [r3, #0]
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006afa:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	681a      	ldr	r2, [r3, #0]
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006b0a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8006b0c:	f000 fce4 	bl	80074d8 <HAL_RCC_GetPCLK1Freq>
 8006b10:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	685b      	ldr	r3, [r3, #4]
 8006b16:	4a81      	ldr	r2, [pc, #516]	; (8006d1c <HAL_I2C_Init+0x274>)
 8006b18:	4293      	cmp	r3, r2
 8006b1a:	d807      	bhi.n	8006b2c <HAL_I2C_Init+0x84>
 8006b1c:	68fb      	ldr	r3, [r7, #12]
 8006b1e:	4a80      	ldr	r2, [pc, #512]	; (8006d20 <HAL_I2C_Init+0x278>)
 8006b20:	4293      	cmp	r3, r2
 8006b22:	bf94      	ite	ls
 8006b24:	2301      	movls	r3, #1
 8006b26:	2300      	movhi	r3, #0
 8006b28:	b2db      	uxtb	r3, r3
 8006b2a:	e006      	b.n	8006b3a <HAL_I2C_Init+0x92>
 8006b2c:	68fb      	ldr	r3, [r7, #12]
 8006b2e:	4a7d      	ldr	r2, [pc, #500]	; (8006d24 <HAL_I2C_Init+0x27c>)
 8006b30:	4293      	cmp	r3, r2
 8006b32:	bf94      	ite	ls
 8006b34:	2301      	movls	r3, #1
 8006b36:	2300      	movhi	r3, #0
 8006b38:	b2db      	uxtb	r3, r3
 8006b3a:	2b00      	cmp	r3, #0
 8006b3c:	d001      	beq.n	8006b42 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8006b3e:	2301      	movs	r3, #1
 8006b40:	e0e7      	b.n	8006d12 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8006b42:	68fb      	ldr	r3, [r7, #12]
 8006b44:	4a78      	ldr	r2, [pc, #480]	; (8006d28 <HAL_I2C_Init+0x280>)
 8006b46:	fba2 2303 	umull	r2, r3, r2, r3
 8006b4a:	0c9b      	lsrs	r3, r3, #18
 8006b4c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	685b      	ldr	r3, [r3, #4]
 8006b54:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	68ba      	ldr	r2, [r7, #8]
 8006b5e:	430a      	orrs	r2, r1
 8006b60:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	6a1b      	ldr	r3, [r3, #32]
 8006b68:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	685b      	ldr	r3, [r3, #4]
 8006b70:	4a6a      	ldr	r2, [pc, #424]	; (8006d1c <HAL_I2C_Init+0x274>)
 8006b72:	4293      	cmp	r3, r2
 8006b74:	d802      	bhi.n	8006b7c <HAL_I2C_Init+0xd4>
 8006b76:	68bb      	ldr	r3, [r7, #8]
 8006b78:	3301      	adds	r3, #1
 8006b7a:	e009      	b.n	8006b90 <HAL_I2C_Init+0xe8>
 8006b7c:	68bb      	ldr	r3, [r7, #8]
 8006b7e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8006b82:	fb02 f303 	mul.w	r3, r2, r3
 8006b86:	4a69      	ldr	r2, [pc, #420]	; (8006d2c <HAL_I2C_Init+0x284>)
 8006b88:	fba2 2303 	umull	r2, r3, r2, r3
 8006b8c:	099b      	lsrs	r3, r3, #6
 8006b8e:	3301      	adds	r3, #1
 8006b90:	687a      	ldr	r2, [r7, #4]
 8006b92:	6812      	ldr	r2, [r2, #0]
 8006b94:	430b      	orrs	r3, r1
 8006b96:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	69db      	ldr	r3, [r3, #28]
 8006b9e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8006ba2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	685b      	ldr	r3, [r3, #4]
 8006baa:	495c      	ldr	r1, [pc, #368]	; (8006d1c <HAL_I2C_Init+0x274>)
 8006bac:	428b      	cmp	r3, r1
 8006bae:	d819      	bhi.n	8006be4 <HAL_I2C_Init+0x13c>
 8006bb0:	68fb      	ldr	r3, [r7, #12]
 8006bb2:	1e59      	subs	r1, r3, #1
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	685b      	ldr	r3, [r3, #4]
 8006bb8:	005b      	lsls	r3, r3, #1
 8006bba:	fbb1 f3f3 	udiv	r3, r1, r3
 8006bbe:	1c59      	adds	r1, r3, #1
 8006bc0:	f640 73fc 	movw	r3, #4092	; 0xffc
 8006bc4:	400b      	ands	r3, r1
 8006bc6:	2b00      	cmp	r3, #0
 8006bc8:	d00a      	beq.n	8006be0 <HAL_I2C_Init+0x138>
 8006bca:	68fb      	ldr	r3, [r7, #12]
 8006bcc:	1e59      	subs	r1, r3, #1
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	685b      	ldr	r3, [r3, #4]
 8006bd2:	005b      	lsls	r3, r3, #1
 8006bd4:	fbb1 f3f3 	udiv	r3, r1, r3
 8006bd8:	3301      	adds	r3, #1
 8006bda:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006bde:	e051      	b.n	8006c84 <HAL_I2C_Init+0x1dc>
 8006be0:	2304      	movs	r3, #4
 8006be2:	e04f      	b.n	8006c84 <HAL_I2C_Init+0x1dc>
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	689b      	ldr	r3, [r3, #8]
 8006be8:	2b00      	cmp	r3, #0
 8006bea:	d111      	bne.n	8006c10 <HAL_I2C_Init+0x168>
 8006bec:	68fb      	ldr	r3, [r7, #12]
 8006bee:	1e58      	subs	r0, r3, #1
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	6859      	ldr	r1, [r3, #4]
 8006bf4:	460b      	mov	r3, r1
 8006bf6:	005b      	lsls	r3, r3, #1
 8006bf8:	440b      	add	r3, r1
 8006bfa:	fbb0 f3f3 	udiv	r3, r0, r3
 8006bfe:	3301      	adds	r3, #1
 8006c00:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006c04:	2b00      	cmp	r3, #0
 8006c06:	bf0c      	ite	eq
 8006c08:	2301      	moveq	r3, #1
 8006c0a:	2300      	movne	r3, #0
 8006c0c:	b2db      	uxtb	r3, r3
 8006c0e:	e012      	b.n	8006c36 <HAL_I2C_Init+0x18e>
 8006c10:	68fb      	ldr	r3, [r7, #12]
 8006c12:	1e58      	subs	r0, r3, #1
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	6859      	ldr	r1, [r3, #4]
 8006c18:	460b      	mov	r3, r1
 8006c1a:	009b      	lsls	r3, r3, #2
 8006c1c:	440b      	add	r3, r1
 8006c1e:	0099      	lsls	r1, r3, #2
 8006c20:	440b      	add	r3, r1
 8006c22:	fbb0 f3f3 	udiv	r3, r0, r3
 8006c26:	3301      	adds	r3, #1
 8006c28:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006c2c:	2b00      	cmp	r3, #0
 8006c2e:	bf0c      	ite	eq
 8006c30:	2301      	moveq	r3, #1
 8006c32:	2300      	movne	r3, #0
 8006c34:	b2db      	uxtb	r3, r3
 8006c36:	2b00      	cmp	r3, #0
 8006c38:	d001      	beq.n	8006c3e <HAL_I2C_Init+0x196>
 8006c3a:	2301      	movs	r3, #1
 8006c3c:	e022      	b.n	8006c84 <HAL_I2C_Init+0x1dc>
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	689b      	ldr	r3, [r3, #8]
 8006c42:	2b00      	cmp	r3, #0
 8006c44:	d10e      	bne.n	8006c64 <HAL_I2C_Init+0x1bc>
 8006c46:	68fb      	ldr	r3, [r7, #12]
 8006c48:	1e58      	subs	r0, r3, #1
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	6859      	ldr	r1, [r3, #4]
 8006c4e:	460b      	mov	r3, r1
 8006c50:	005b      	lsls	r3, r3, #1
 8006c52:	440b      	add	r3, r1
 8006c54:	fbb0 f3f3 	udiv	r3, r0, r3
 8006c58:	3301      	adds	r3, #1
 8006c5a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006c5e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006c62:	e00f      	b.n	8006c84 <HAL_I2C_Init+0x1dc>
 8006c64:	68fb      	ldr	r3, [r7, #12]
 8006c66:	1e58      	subs	r0, r3, #1
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	6859      	ldr	r1, [r3, #4]
 8006c6c:	460b      	mov	r3, r1
 8006c6e:	009b      	lsls	r3, r3, #2
 8006c70:	440b      	add	r3, r1
 8006c72:	0099      	lsls	r1, r3, #2
 8006c74:	440b      	add	r3, r1
 8006c76:	fbb0 f3f3 	udiv	r3, r0, r3
 8006c7a:	3301      	adds	r3, #1
 8006c7c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006c80:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006c84:	6879      	ldr	r1, [r7, #4]
 8006c86:	6809      	ldr	r1, [r1, #0]
 8006c88:	4313      	orrs	r3, r2
 8006c8a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	69da      	ldr	r2, [r3, #28]
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	6a1b      	ldr	r3, [r3, #32]
 8006c9e:	431a      	orrs	r2, r3
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	430a      	orrs	r2, r1
 8006ca6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	689b      	ldr	r3, [r3, #8]
 8006cae:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8006cb2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8006cb6:	687a      	ldr	r2, [r7, #4]
 8006cb8:	6911      	ldr	r1, [r2, #16]
 8006cba:	687a      	ldr	r2, [r7, #4]
 8006cbc:	68d2      	ldr	r2, [r2, #12]
 8006cbe:	4311      	orrs	r1, r2
 8006cc0:	687a      	ldr	r2, [r7, #4]
 8006cc2:	6812      	ldr	r2, [r2, #0]
 8006cc4:	430b      	orrs	r3, r1
 8006cc6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	68db      	ldr	r3, [r3, #12]
 8006cce:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	695a      	ldr	r2, [r3, #20]
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	699b      	ldr	r3, [r3, #24]
 8006cda:	431a      	orrs	r2, r3
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	430a      	orrs	r2, r1
 8006ce2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	681a      	ldr	r2, [r3, #0]
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	f042 0201 	orr.w	r2, r2, #1
 8006cf2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	2200      	movs	r2, #0
 8006cf8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	2220      	movs	r2, #32
 8006cfe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	2200      	movs	r2, #0
 8006d06:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	2200      	movs	r2, #0
 8006d0c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8006d10:	2300      	movs	r3, #0
}
 8006d12:	4618      	mov	r0, r3
 8006d14:	3710      	adds	r7, #16
 8006d16:	46bd      	mov	sp, r7
 8006d18:	bd80      	pop	{r7, pc}
 8006d1a:	bf00      	nop
 8006d1c:	000186a0 	.word	0x000186a0
 8006d20:	001e847f 	.word	0x001e847f
 8006d24:	003d08ff 	.word	0x003d08ff
 8006d28:	431bde83 	.word	0x431bde83
 8006d2c:	10624dd3 	.word	0x10624dd3

08006d30 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006d30:	b580      	push	{r7, lr}
 8006d32:	b086      	sub	sp, #24
 8006d34:	af00      	add	r7, sp, #0
 8006d36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	2b00      	cmp	r3, #0
 8006d3c:	d101      	bne.n	8006d42 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006d3e:	2301      	movs	r3, #1
 8006d40:	e26c      	b.n	800721c <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	f003 0301 	and.w	r3, r3, #1
 8006d4a:	2b00      	cmp	r3, #0
 8006d4c:	f000 8087 	beq.w	8006e5e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8006d50:	4b92      	ldr	r3, [pc, #584]	; (8006f9c <HAL_RCC_OscConfig+0x26c>)
 8006d52:	685b      	ldr	r3, [r3, #4]
 8006d54:	f003 030c 	and.w	r3, r3, #12
 8006d58:	2b04      	cmp	r3, #4
 8006d5a:	d00c      	beq.n	8006d76 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8006d5c:	4b8f      	ldr	r3, [pc, #572]	; (8006f9c <HAL_RCC_OscConfig+0x26c>)
 8006d5e:	685b      	ldr	r3, [r3, #4]
 8006d60:	f003 030c 	and.w	r3, r3, #12
 8006d64:	2b08      	cmp	r3, #8
 8006d66:	d112      	bne.n	8006d8e <HAL_RCC_OscConfig+0x5e>
 8006d68:	4b8c      	ldr	r3, [pc, #560]	; (8006f9c <HAL_RCC_OscConfig+0x26c>)
 8006d6a:	685b      	ldr	r3, [r3, #4]
 8006d6c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006d70:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006d74:	d10b      	bne.n	8006d8e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006d76:	4b89      	ldr	r3, [pc, #548]	; (8006f9c <HAL_RCC_OscConfig+0x26c>)
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006d7e:	2b00      	cmp	r3, #0
 8006d80:	d06c      	beq.n	8006e5c <HAL_RCC_OscConfig+0x12c>
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	685b      	ldr	r3, [r3, #4]
 8006d86:	2b00      	cmp	r3, #0
 8006d88:	d168      	bne.n	8006e5c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8006d8a:	2301      	movs	r3, #1
 8006d8c:	e246      	b.n	800721c <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	685b      	ldr	r3, [r3, #4]
 8006d92:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006d96:	d106      	bne.n	8006da6 <HAL_RCC_OscConfig+0x76>
 8006d98:	4b80      	ldr	r3, [pc, #512]	; (8006f9c <HAL_RCC_OscConfig+0x26c>)
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	4a7f      	ldr	r2, [pc, #508]	; (8006f9c <HAL_RCC_OscConfig+0x26c>)
 8006d9e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006da2:	6013      	str	r3, [r2, #0]
 8006da4:	e02e      	b.n	8006e04 <HAL_RCC_OscConfig+0xd4>
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	685b      	ldr	r3, [r3, #4]
 8006daa:	2b00      	cmp	r3, #0
 8006dac:	d10c      	bne.n	8006dc8 <HAL_RCC_OscConfig+0x98>
 8006dae:	4b7b      	ldr	r3, [pc, #492]	; (8006f9c <HAL_RCC_OscConfig+0x26c>)
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	4a7a      	ldr	r2, [pc, #488]	; (8006f9c <HAL_RCC_OscConfig+0x26c>)
 8006db4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006db8:	6013      	str	r3, [r2, #0]
 8006dba:	4b78      	ldr	r3, [pc, #480]	; (8006f9c <HAL_RCC_OscConfig+0x26c>)
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	4a77      	ldr	r2, [pc, #476]	; (8006f9c <HAL_RCC_OscConfig+0x26c>)
 8006dc0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006dc4:	6013      	str	r3, [r2, #0]
 8006dc6:	e01d      	b.n	8006e04 <HAL_RCC_OscConfig+0xd4>
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	685b      	ldr	r3, [r3, #4]
 8006dcc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006dd0:	d10c      	bne.n	8006dec <HAL_RCC_OscConfig+0xbc>
 8006dd2:	4b72      	ldr	r3, [pc, #456]	; (8006f9c <HAL_RCC_OscConfig+0x26c>)
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	4a71      	ldr	r2, [pc, #452]	; (8006f9c <HAL_RCC_OscConfig+0x26c>)
 8006dd8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006ddc:	6013      	str	r3, [r2, #0]
 8006dde:	4b6f      	ldr	r3, [pc, #444]	; (8006f9c <HAL_RCC_OscConfig+0x26c>)
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	4a6e      	ldr	r2, [pc, #440]	; (8006f9c <HAL_RCC_OscConfig+0x26c>)
 8006de4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006de8:	6013      	str	r3, [r2, #0]
 8006dea:	e00b      	b.n	8006e04 <HAL_RCC_OscConfig+0xd4>
 8006dec:	4b6b      	ldr	r3, [pc, #428]	; (8006f9c <HAL_RCC_OscConfig+0x26c>)
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	4a6a      	ldr	r2, [pc, #424]	; (8006f9c <HAL_RCC_OscConfig+0x26c>)
 8006df2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006df6:	6013      	str	r3, [r2, #0]
 8006df8:	4b68      	ldr	r3, [pc, #416]	; (8006f9c <HAL_RCC_OscConfig+0x26c>)
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	4a67      	ldr	r2, [pc, #412]	; (8006f9c <HAL_RCC_OscConfig+0x26c>)
 8006dfe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006e02:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	685b      	ldr	r3, [r3, #4]
 8006e08:	2b00      	cmp	r3, #0
 8006e0a:	d013      	beq.n	8006e34 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006e0c:	f7ff f910 	bl	8006030 <HAL_GetTick>
 8006e10:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006e12:	e008      	b.n	8006e26 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006e14:	f7ff f90c 	bl	8006030 <HAL_GetTick>
 8006e18:	4602      	mov	r2, r0
 8006e1a:	693b      	ldr	r3, [r7, #16]
 8006e1c:	1ad3      	subs	r3, r2, r3
 8006e1e:	2b64      	cmp	r3, #100	; 0x64
 8006e20:	d901      	bls.n	8006e26 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8006e22:	2303      	movs	r3, #3
 8006e24:	e1fa      	b.n	800721c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006e26:	4b5d      	ldr	r3, [pc, #372]	; (8006f9c <HAL_RCC_OscConfig+0x26c>)
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006e2e:	2b00      	cmp	r3, #0
 8006e30:	d0f0      	beq.n	8006e14 <HAL_RCC_OscConfig+0xe4>
 8006e32:	e014      	b.n	8006e5e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006e34:	f7ff f8fc 	bl	8006030 <HAL_GetTick>
 8006e38:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006e3a:	e008      	b.n	8006e4e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006e3c:	f7ff f8f8 	bl	8006030 <HAL_GetTick>
 8006e40:	4602      	mov	r2, r0
 8006e42:	693b      	ldr	r3, [r7, #16]
 8006e44:	1ad3      	subs	r3, r2, r3
 8006e46:	2b64      	cmp	r3, #100	; 0x64
 8006e48:	d901      	bls.n	8006e4e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8006e4a:	2303      	movs	r3, #3
 8006e4c:	e1e6      	b.n	800721c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006e4e:	4b53      	ldr	r3, [pc, #332]	; (8006f9c <HAL_RCC_OscConfig+0x26c>)
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006e56:	2b00      	cmp	r3, #0
 8006e58:	d1f0      	bne.n	8006e3c <HAL_RCC_OscConfig+0x10c>
 8006e5a:	e000      	b.n	8006e5e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006e5c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	f003 0302 	and.w	r3, r3, #2
 8006e66:	2b00      	cmp	r3, #0
 8006e68:	d063      	beq.n	8006f32 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8006e6a:	4b4c      	ldr	r3, [pc, #304]	; (8006f9c <HAL_RCC_OscConfig+0x26c>)
 8006e6c:	685b      	ldr	r3, [r3, #4]
 8006e6e:	f003 030c 	and.w	r3, r3, #12
 8006e72:	2b00      	cmp	r3, #0
 8006e74:	d00b      	beq.n	8006e8e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8006e76:	4b49      	ldr	r3, [pc, #292]	; (8006f9c <HAL_RCC_OscConfig+0x26c>)
 8006e78:	685b      	ldr	r3, [r3, #4]
 8006e7a:	f003 030c 	and.w	r3, r3, #12
 8006e7e:	2b08      	cmp	r3, #8
 8006e80:	d11c      	bne.n	8006ebc <HAL_RCC_OscConfig+0x18c>
 8006e82:	4b46      	ldr	r3, [pc, #280]	; (8006f9c <HAL_RCC_OscConfig+0x26c>)
 8006e84:	685b      	ldr	r3, [r3, #4]
 8006e86:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006e8a:	2b00      	cmp	r3, #0
 8006e8c:	d116      	bne.n	8006ebc <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006e8e:	4b43      	ldr	r3, [pc, #268]	; (8006f9c <HAL_RCC_OscConfig+0x26c>)
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	f003 0302 	and.w	r3, r3, #2
 8006e96:	2b00      	cmp	r3, #0
 8006e98:	d005      	beq.n	8006ea6 <HAL_RCC_OscConfig+0x176>
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	691b      	ldr	r3, [r3, #16]
 8006e9e:	2b01      	cmp	r3, #1
 8006ea0:	d001      	beq.n	8006ea6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8006ea2:	2301      	movs	r3, #1
 8006ea4:	e1ba      	b.n	800721c <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006ea6:	4b3d      	ldr	r3, [pc, #244]	; (8006f9c <HAL_RCC_OscConfig+0x26c>)
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	695b      	ldr	r3, [r3, #20]
 8006eb2:	00db      	lsls	r3, r3, #3
 8006eb4:	4939      	ldr	r1, [pc, #228]	; (8006f9c <HAL_RCC_OscConfig+0x26c>)
 8006eb6:	4313      	orrs	r3, r2
 8006eb8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006eba:	e03a      	b.n	8006f32 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	691b      	ldr	r3, [r3, #16]
 8006ec0:	2b00      	cmp	r3, #0
 8006ec2:	d020      	beq.n	8006f06 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006ec4:	4b36      	ldr	r3, [pc, #216]	; (8006fa0 <HAL_RCC_OscConfig+0x270>)
 8006ec6:	2201      	movs	r2, #1
 8006ec8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006eca:	f7ff f8b1 	bl	8006030 <HAL_GetTick>
 8006ece:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006ed0:	e008      	b.n	8006ee4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006ed2:	f7ff f8ad 	bl	8006030 <HAL_GetTick>
 8006ed6:	4602      	mov	r2, r0
 8006ed8:	693b      	ldr	r3, [r7, #16]
 8006eda:	1ad3      	subs	r3, r2, r3
 8006edc:	2b02      	cmp	r3, #2
 8006ede:	d901      	bls.n	8006ee4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8006ee0:	2303      	movs	r3, #3
 8006ee2:	e19b      	b.n	800721c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006ee4:	4b2d      	ldr	r3, [pc, #180]	; (8006f9c <HAL_RCC_OscConfig+0x26c>)
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	f003 0302 	and.w	r3, r3, #2
 8006eec:	2b00      	cmp	r3, #0
 8006eee:	d0f0      	beq.n	8006ed2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006ef0:	4b2a      	ldr	r3, [pc, #168]	; (8006f9c <HAL_RCC_OscConfig+0x26c>)
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	695b      	ldr	r3, [r3, #20]
 8006efc:	00db      	lsls	r3, r3, #3
 8006efe:	4927      	ldr	r1, [pc, #156]	; (8006f9c <HAL_RCC_OscConfig+0x26c>)
 8006f00:	4313      	orrs	r3, r2
 8006f02:	600b      	str	r3, [r1, #0]
 8006f04:	e015      	b.n	8006f32 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006f06:	4b26      	ldr	r3, [pc, #152]	; (8006fa0 <HAL_RCC_OscConfig+0x270>)
 8006f08:	2200      	movs	r2, #0
 8006f0a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006f0c:	f7ff f890 	bl	8006030 <HAL_GetTick>
 8006f10:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006f12:	e008      	b.n	8006f26 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006f14:	f7ff f88c 	bl	8006030 <HAL_GetTick>
 8006f18:	4602      	mov	r2, r0
 8006f1a:	693b      	ldr	r3, [r7, #16]
 8006f1c:	1ad3      	subs	r3, r2, r3
 8006f1e:	2b02      	cmp	r3, #2
 8006f20:	d901      	bls.n	8006f26 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8006f22:	2303      	movs	r3, #3
 8006f24:	e17a      	b.n	800721c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006f26:	4b1d      	ldr	r3, [pc, #116]	; (8006f9c <HAL_RCC_OscConfig+0x26c>)
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	f003 0302 	and.w	r3, r3, #2
 8006f2e:	2b00      	cmp	r3, #0
 8006f30:	d1f0      	bne.n	8006f14 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	f003 0308 	and.w	r3, r3, #8
 8006f3a:	2b00      	cmp	r3, #0
 8006f3c:	d03a      	beq.n	8006fb4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	699b      	ldr	r3, [r3, #24]
 8006f42:	2b00      	cmp	r3, #0
 8006f44:	d019      	beq.n	8006f7a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006f46:	4b17      	ldr	r3, [pc, #92]	; (8006fa4 <HAL_RCC_OscConfig+0x274>)
 8006f48:	2201      	movs	r2, #1
 8006f4a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006f4c:	f7ff f870 	bl	8006030 <HAL_GetTick>
 8006f50:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006f52:	e008      	b.n	8006f66 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006f54:	f7ff f86c 	bl	8006030 <HAL_GetTick>
 8006f58:	4602      	mov	r2, r0
 8006f5a:	693b      	ldr	r3, [r7, #16]
 8006f5c:	1ad3      	subs	r3, r2, r3
 8006f5e:	2b02      	cmp	r3, #2
 8006f60:	d901      	bls.n	8006f66 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8006f62:	2303      	movs	r3, #3
 8006f64:	e15a      	b.n	800721c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006f66:	4b0d      	ldr	r3, [pc, #52]	; (8006f9c <HAL_RCC_OscConfig+0x26c>)
 8006f68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f6a:	f003 0302 	and.w	r3, r3, #2
 8006f6e:	2b00      	cmp	r3, #0
 8006f70:	d0f0      	beq.n	8006f54 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8006f72:	2001      	movs	r0, #1
 8006f74:	f000 fad8 	bl	8007528 <RCC_Delay>
 8006f78:	e01c      	b.n	8006fb4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006f7a:	4b0a      	ldr	r3, [pc, #40]	; (8006fa4 <HAL_RCC_OscConfig+0x274>)
 8006f7c:	2200      	movs	r2, #0
 8006f7e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006f80:	f7ff f856 	bl	8006030 <HAL_GetTick>
 8006f84:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006f86:	e00f      	b.n	8006fa8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006f88:	f7ff f852 	bl	8006030 <HAL_GetTick>
 8006f8c:	4602      	mov	r2, r0
 8006f8e:	693b      	ldr	r3, [r7, #16]
 8006f90:	1ad3      	subs	r3, r2, r3
 8006f92:	2b02      	cmp	r3, #2
 8006f94:	d908      	bls.n	8006fa8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8006f96:	2303      	movs	r3, #3
 8006f98:	e140      	b.n	800721c <HAL_RCC_OscConfig+0x4ec>
 8006f9a:	bf00      	nop
 8006f9c:	40021000 	.word	0x40021000
 8006fa0:	42420000 	.word	0x42420000
 8006fa4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006fa8:	4b9e      	ldr	r3, [pc, #632]	; (8007224 <HAL_RCC_OscConfig+0x4f4>)
 8006faa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fac:	f003 0302 	and.w	r3, r3, #2
 8006fb0:	2b00      	cmp	r3, #0
 8006fb2:	d1e9      	bne.n	8006f88 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	f003 0304 	and.w	r3, r3, #4
 8006fbc:	2b00      	cmp	r3, #0
 8006fbe:	f000 80a6 	beq.w	800710e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006fc2:	2300      	movs	r3, #0
 8006fc4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006fc6:	4b97      	ldr	r3, [pc, #604]	; (8007224 <HAL_RCC_OscConfig+0x4f4>)
 8006fc8:	69db      	ldr	r3, [r3, #28]
 8006fca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006fce:	2b00      	cmp	r3, #0
 8006fd0:	d10d      	bne.n	8006fee <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006fd2:	4b94      	ldr	r3, [pc, #592]	; (8007224 <HAL_RCC_OscConfig+0x4f4>)
 8006fd4:	69db      	ldr	r3, [r3, #28]
 8006fd6:	4a93      	ldr	r2, [pc, #588]	; (8007224 <HAL_RCC_OscConfig+0x4f4>)
 8006fd8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006fdc:	61d3      	str	r3, [r2, #28]
 8006fde:	4b91      	ldr	r3, [pc, #580]	; (8007224 <HAL_RCC_OscConfig+0x4f4>)
 8006fe0:	69db      	ldr	r3, [r3, #28]
 8006fe2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006fe6:	60bb      	str	r3, [r7, #8]
 8006fe8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006fea:	2301      	movs	r3, #1
 8006fec:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006fee:	4b8e      	ldr	r3, [pc, #568]	; (8007228 <HAL_RCC_OscConfig+0x4f8>)
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006ff6:	2b00      	cmp	r3, #0
 8006ff8:	d118      	bne.n	800702c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006ffa:	4b8b      	ldr	r3, [pc, #556]	; (8007228 <HAL_RCC_OscConfig+0x4f8>)
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	4a8a      	ldr	r2, [pc, #552]	; (8007228 <HAL_RCC_OscConfig+0x4f8>)
 8007000:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007004:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007006:	f7ff f813 	bl	8006030 <HAL_GetTick>
 800700a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800700c:	e008      	b.n	8007020 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800700e:	f7ff f80f 	bl	8006030 <HAL_GetTick>
 8007012:	4602      	mov	r2, r0
 8007014:	693b      	ldr	r3, [r7, #16]
 8007016:	1ad3      	subs	r3, r2, r3
 8007018:	2b64      	cmp	r3, #100	; 0x64
 800701a:	d901      	bls.n	8007020 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800701c:	2303      	movs	r3, #3
 800701e:	e0fd      	b.n	800721c <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007020:	4b81      	ldr	r3, [pc, #516]	; (8007228 <HAL_RCC_OscConfig+0x4f8>)
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007028:	2b00      	cmp	r3, #0
 800702a:	d0f0      	beq.n	800700e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	68db      	ldr	r3, [r3, #12]
 8007030:	2b01      	cmp	r3, #1
 8007032:	d106      	bne.n	8007042 <HAL_RCC_OscConfig+0x312>
 8007034:	4b7b      	ldr	r3, [pc, #492]	; (8007224 <HAL_RCC_OscConfig+0x4f4>)
 8007036:	6a1b      	ldr	r3, [r3, #32]
 8007038:	4a7a      	ldr	r2, [pc, #488]	; (8007224 <HAL_RCC_OscConfig+0x4f4>)
 800703a:	f043 0301 	orr.w	r3, r3, #1
 800703e:	6213      	str	r3, [r2, #32]
 8007040:	e02d      	b.n	800709e <HAL_RCC_OscConfig+0x36e>
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	68db      	ldr	r3, [r3, #12]
 8007046:	2b00      	cmp	r3, #0
 8007048:	d10c      	bne.n	8007064 <HAL_RCC_OscConfig+0x334>
 800704a:	4b76      	ldr	r3, [pc, #472]	; (8007224 <HAL_RCC_OscConfig+0x4f4>)
 800704c:	6a1b      	ldr	r3, [r3, #32]
 800704e:	4a75      	ldr	r2, [pc, #468]	; (8007224 <HAL_RCC_OscConfig+0x4f4>)
 8007050:	f023 0301 	bic.w	r3, r3, #1
 8007054:	6213      	str	r3, [r2, #32]
 8007056:	4b73      	ldr	r3, [pc, #460]	; (8007224 <HAL_RCC_OscConfig+0x4f4>)
 8007058:	6a1b      	ldr	r3, [r3, #32]
 800705a:	4a72      	ldr	r2, [pc, #456]	; (8007224 <HAL_RCC_OscConfig+0x4f4>)
 800705c:	f023 0304 	bic.w	r3, r3, #4
 8007060:	6213      	str	r3, [r2, #32]
 8007062:	e01c      	b.n	800709e <HAL_RCC_OscConfig+0x36e>
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	68db      	ldr	r3, [r3, #12]
 8007068:	2b05      	cmp	r3, #5
 800706a:	d10c      	bne.n	8007086 <HAL_RCC_OscConfig+0x356>
 800706c:	4b6d      	ldr	r3, [pc, #436]	; (8007224 <HAL_RCC_OscConfig+0x4f4>)
 800706e:	6a1b      	ldr	r3, [r3, #32]
 8007070:	4a6c      	ldr	r2, [pc, #432]	; (8007224 <HAL_RCC_OscConfig+0x4f4>)
 8007072:	f043 0304 	orr.w	r3, r3, #4
 8007076:	6213      	str	r3, [r2, #32]
 8007078:	4b6a      	ldr	r3, [pc, #424]	; (8007224 <HAL_RCC_OscConfig+0x4f4>)
 800707a:	6a1b      	ldr	r3, [r3, #32]
 800707c:	4a69      	ldr	r2, [pc, #420]	; (8007224 <HAL_RCC_OscConfig+0x4f4>)
 800707e:	f043 0301 	orr.w	r3, r3, #1
 8007082:	6213      	str	r3, [r2, #32]
 8007084:	e00b      	b.n	800709e <HAL_RCC_OscConfig+0x36e>
 8007086:	4b67      	ldr	r3, [pc, #412]	; (8007224 <HAL_RCC_OscConfig+0x4f4>)
 8007088:	6a1b      	ldr	r3, [r3, #32]
 800708a:	4a66      	ldr	r2, [pc, #408]	; (8007224 <HAL_RCC_OscConfig+0x4f4>)
 800708c:	f023 0301 	bic.w	r3, r3, #1
 8007090:	6213      	str	r3, [r2, #32]
 8007092:	4b64      	ldr	r3, [pc, #400]	; (8007224 <HAL_RCC_OscConfig+0x4f4>)
 8007094:	6a1b      	ldr	r3, [r3, #32]
 8007096:	4a63      	ldr	r2, [pc, #396]	; (8007224 <HAL_RCC_OscConfig+0x4f4>)
 8007098:	f023 0304 	bic.w	r3, r3, #4
 800709c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	68db      	ldr	r3, [r3, #12]
 80070a2:	2b00      	cmp	r3, #0
 80070a4:	d015      	beq.n	80070d2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80070a6:	f7fe ffc3 	bl	8006030 <HAL_GetTick>
 80070aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80070ac:	e00a      	b.n	80070c4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80070ae:	f7fe ffbf 	bl	8006030 <HAL_GetTick>
 80070b2:	4602      	mov	r2, r0
 80070b4:	693b      	ldr	r3, [r7, #16]
 80070b6:	1ad3      	subs	r3, r2, r3
 80070b8:	f241 3288 	movw	r2, #5000	; 0x1388
 80070bc:	4293      	cmp	r3, r2
 80070be:	d901      	bls.n	80070c4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80070c0:	2303      	movs	r3, #3
 80070c2:	e0ab      	b.n	800721c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80070c4:	4b57      	ldr	r3, [pc, #348]	; (8007224 <HAL_RCC_OscConfig+0x4f4>)
 80070c6:	6a1b      	ldr	r3, [r3, #32]
 80070c8:	f003 0302 	and.w	r3, r3, #2
 80070cc:	2b00      	cmp	r3, #0
 80070ce:	d0ee      	beq.n	80070ae <HAL_RCC_OscConfig+0x37e>
 80070d0:	e014      	b.n	80070fc <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80070d2:	f7fe ffad 	bl	8006030 <HAL_GetTick>
 80070d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80070d8:	e00a      	b.n	80070f0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80070da:	f7fe ffa9 	bl	8006030 <HAL_GetTick>
 80070de:	4602      	mov	r2, r0
 80070e0:	693b      	ldr	r3, [r7, #16]
 80070e2:	1ad3      	subs	r3, r2, r3
 80070e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80070e8:	4293      	cmp	r3, r2
 80070ea:	d901      	bls.n	80070f0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80070ec:	2303      	movs	r3, #3
 80070ee:	e095      	b.n	800721c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80070f0:	4b4c      	ldr	r3, [pc, #304]	; (8007224 <HAL_RCC_OscConfig+0x4f4>)
 80070f2:	6a1b      	ldr	r3, [r3, #32]
 80070f4:	f003 0302 	and.w	r3, r3, #2
 80070f8:	2b00      	cmp	r3, #0
 80070fa:	d1ee      	bne.n	80070da <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80070fc:	7dfb      	ldrb	r3, [r7, #23]
 80070fe:	2b01      	cmp	r3, #1
 8007100:	d105      	bne.n	800710e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007102:	4b48      	ldr	r3, [pc, #288]	; (8007224 <HAL_RCC_OscConfig+0x4f4>)
 8007104:	69db      	ldr	r3, [r3, #28]
 8007106:	4a47      	ldr	r2, [pc, #284]	; (8007224 <HAL_RCC_OscConfig+0x4f4>)
 8007108:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800710c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	69db      	ldr	r3, [r3, #28]
 8007112:	2b00      	cmp	r3, #0
 8007114:	f000 8081 	beq.w	800721a <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8007118:	4b42      	ldr	r3, [pc, #264]	; (8007224 <HAL_RCC_OscConfig+0x4f4>)
 800711a:	685b      	ldr	r3, [r3, #4]
 800711c:	f003 030c 	and.w	r3, r3, #12
 8007120:	2b08      	cmp	r3, #8
 8007122:	d061      	beq.n	80071e8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	69db      	ldr	r3, [r3, #28]
 8007128:	2b02      	cmp	r3, #2
 800712a:	d146      	bne.n	80071ba <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800712c:	4b3f      	ldr	r3, [pc, #252]	; (800722c <HAL_RCC_OscConfig+0x4fc>)
 800712e:	2200      	movs	r2, #0
 8007130:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007132:	f7fe ff7d 	bl	8006030 <HAL_GetTick>
 8007136:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8007138:	e008      	b.n	800714c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800713a:	f7fe ff79 	bl	8006030 <HAL_GetTick>
 800713e:	4602      	mov	r2, r0
 8007140:	693b      	ldr	r3, [r7, #16]
 8007142:	1ad3      	subs	r3, r2, r3
 8007144:	2b02      	cmp	r3, #2
 8007146:	d901      	bls.n	800714c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8007148:	2303      	movs	r3, #3
 800714a:	e067      	b.n	800721c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800714c:	4b35      	ldr	r3, [pc, #212]	; (8007224 <HAL_RCC_OscConfig+0x4f4>)
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007154:	2b00      	cmp	r3, #0
 8007156:	d1f0      	bne.n	800713a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	6a1b      	ldr	r3, [r3, #32]
 800715c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007160:	d108      	bne.n	8007174 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8007162:	4b30      	ldr	r3, [pc, #192]	; (8007224 <HAL_RCC_OscConfig+0x4f4>)
 8007164:	685b      	ldr	r3, [r3, #4]
 8007166:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	689b      	ldr	r3, [r3, #8]
 800716e:	492d      	ldr	r1, [pc, #180]	; (8007224 <HAL_RCC_OscConfig+0x4f4>)
 8007170:	4313      	orrs	r3, r2
 8007172:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007174:	4b2b      	ldr	r3, [pc, #172]	; (8007224 <HAL_RCC_OscConfig+0x4f4>)
 8007176:	685b      	ldr	r3, [r3, #4]
 8007178:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	6a19      	ldr	r1, [r3, #32]
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007184:	430b      	orrs	r3, r1
 8007186:	4927      	ldr	r1, [pc, #156]	; (8007224 <HAL_RCC_OscConfig+0x4f4>)
 8007188:	4313      	orrs	r3, r2
 800718a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800718c:	4b27      	ldr	r3, [pc, #156]	; (800722c <HAL_RCC_OscConfig+0x4fc>)
 800718e:	2201      	movs	r2, #1
 8007190:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007192:	f7fe ff4d 	bl	8006030 <HAL_GetTick>
 8007196:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8007198:	e008      	b.n	80071ac <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800719a:	f7fe ff49 	bl	8006030 <HAL_GetTick>
 800719e:	4602      	mov	r2, r0
 80071a0:	693b      	ldr	r3, [r7, #16]
 80071a2:	1ad3      	subs	r3, r2, r3
 80071a4:	2b02      	cmp	r3, #2
 80071a6:	d901      	bls.n	80071ac <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80071a8:	2303      	movs	r3, #3
 80071aa:	e037      	b.n	800721c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80071ac:	4b1d      	ldr	r3, [pc, #116]	; (8007224 <HAL_RCC_OscConfig+0x4f4>)
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80071b4:	2b00      	cmp	r3, #0
 80071b6:	d0f0      	beq.n	800719a <HAL_RCC_OscConfig+0x46a>
 80071b8:	e02f      	b.n	800721a <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80071ba:	4b1c      	ldr	r3, [pc, #112]	; (800722c <HAL_RCC_OscConfig+0x4fc>)
 80071bc:	2200      	movs	r2, #0
 80071be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80071c0:	f7fe ff36 	bl	8006030 <HAL_GetTick>
 80071c4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80071c6:	e008      	b.n	80071da <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80071c8:	f7fe ff32 	bl	8006030 <HAL_GetTick>
 80071cc:	4602      	mov	r2, r0
 80071ce:	693b      	ldr	r3, [r7, #16]
 80071d0:	1ad3      	subs	r3, r2, r3
 80071d2:	2b02      	cmp	r3, #2
 80071d4:	d901      	bls.n	80071da <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80071d6:	2303      	movs	r3, #3
 80071d8:	e020      	b.n	800721c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80071da:	4b12      	ldr	r3, [pc, #72]	; (8007224 <HAL_RCC_OscConfig+0x4f4>)
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80071e2:	2b00      	cmp	r3, #0
 80071e4:	d1f0      	bne.n	80071c8 <HAL_RCC_OscConfig+0x498>
 80071e6:	e018      	b.n	800721a <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	69db      	ldr	r3, [r3, #28]
 80071ec:	2b01      	cmp	r3, #1
 80071ee:	d101      	bne.n	80071f4 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80071f0:	2301      	movs	r3, #1
 80071f2:	e013      	b.n	800721c <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80071f4:	4b0b      	ldr	r3, [pc, #44]	; (8007224 <HAL_RCC_OscConfig+0x4f4>)
 80071f6:	685b      	ldr	r3, [r3, #4]
 80071f8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80071fa:	68fb      	ldr	r3, [r7, #12]
 80071fc:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	6a1b      	ldr	r3, [r3, #32]
 8007204:	429a      	cmp	r2, r3
 8007206:	d106      	bne.n	8007216 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8007208:	68fb      	ldr	r3, [r7, #12]
 800720a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007212:	429a      	cmp	r2, r3
 8007214:	d001      	beq.n	800721a <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8007216:	2301      	movs	r3, #1
 8007218:	e000      	b.n	800721c <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 800721a:	2300      	movs	r3, #0
}
 800721c:	4618      	mov	r0, r3
 800721e:	3718      	adds	r7, #24
 8007220:	46bd      	mov	sp, r7
 8007222:	bd80      	pop	{r7, pc}
 8007224:	40021000 	.word	0x40021000
 8007228:	40007000 	.word	0x40007000
 800722c:	42420060 	.word	0x42420060

08007230 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007230:	b580      	push	{r7, lr}
 8007232:	b084      	sub	sp, #16
 8007234:	af00      	add	r7, sp, #0
 8007236:	6078      	str	r0, [r7, #4]
 8007238:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	2b00      	cmp	r3, #0
 800723e:	d101      	bne.n	8007244 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007240:	2301      	movs	r3, #1
 8007242:	e0d0      	b.n	80073e6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8007244:	4b6a      	ldr	r3, [pc, #424]	; (80073f0 <HAL_RCC_ClockConfig+0x1c0>)
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	f003 0307 	and.w	r3, r3, #7
 800724c:	683a      	ldr	r2, [r7, #0]
 800724e:	429a      	cmp	r2, r3
 8007250:	d910      	bls.n	8007274 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007252:	4b67      	ldr	r3, [pc, #412]	; (80073f0 <HAL_RCC_ClockConfig+0x1c0>)
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	f023 0207 	bic.w	r2, r3, #7
 800725a:	4965      	ldr	r1, [pc, #404]	; (80073f0 <HAL_RCC_ClockConfig+0x1c0>)
 800725c:	683b      	ldr	r3, [r7, #0]
 800725e:	4313      	orrs	r3, r2
 8007260:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007262:	4b63      	ldr	r3, [pc, #396]	; (80073f0 <HAL_RCC_ClockConfig+0x1c0>)
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	f003 0307 	and.w	r3, r3, #7
 800726a:	683a      	ldr	r2, [r7, #0]
 800726c:	429a      	cmp	r2, r3
 800726e:	d001      	beq.n	8007274 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8007270:	2301      	movs	r3, #1
 8007272:	e0b8      	b.n	80073e6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	f003 0302 	and.w	r3, r3, #2
 800727c:	2b00      	cmp	r3, #0
 800727e:	d020      	beq.n	80072c2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	f003 0304 	and.w	r3, r3, #4
 8007288:	2b00      	cmp	r3, #0
 800728a:	d005      	beq.n	8007298 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800728c:	4b59      	ldr	r3, [pc, #356]	; (80073f4 <HAL_RCC_ClockConfig+0x1c4>)
 800728e:	685b      	ldr	r3, [r3, #4]
 8007290:	4a58      	ldr	r2, [pc, #352]	; (80073f4 <HAL_RCC_ClockConfig+0x1c4>)
 8007292:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8007296:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	f003 0308 	and.w	r3, r3, #8
 80072a0:	2b00      	cmp	r3, #0
 80072a2:	d005      	beq.n	80072b0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80072a4:	4b53      	ldr	r3, [pc, #332]	; (80073f4 <HAL_RCC_ClockConfig+0x1c4>)
 80072a6:	685b      	ldr	r3, [r3, #4]
 80072a8:	4a52      	ldr	r2, [pc, #328]	; (80073f4 <HAL_RCC_ClockConfig+0x1c4>)
 80072aa:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80072ae:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80072b0:	4b50      	ldr	r3, [pc, #320]	; (80073f4 <HAL_RCC_ClockConfig+0x1c4>)
 80072b2:	685b      	ldr	r3, [r3, #4]
 80072b4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	689b      	ldr	r3, [r3, #8]
 80072bc:	494d      	ldr	r1, [pc, #308]	; (80073f4 <HAL_RCC_ClockConfig+0x1c4>)
 80072be:	4313      	orrs	r3, r2
 80072c0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	f003 0301 	and.w	r3, r3, #1
 80072ca:	2b00      	cmp	r3, #0
 80072cc:	d040      	beq.n	8007350 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	685b      	ldr	r3, [r3, #4]
 80072d2:	2b01      	cmp	r3, #1
 80072d4:	d107      	bne.n	80072e6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80072d6:	4b47      	ldr	r3, [pc, #284]	; (80073f4 <HAL_RCC_ClockConfig+0x1c4>)
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80072de:	2b00      	cmp	r3, #0
 80072e0:	d115      	bne.n	800730e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80072e2:	2301      	movs	r3, #1
 80072e4:	e07f      	b.n	80073e6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	685b      	ldr	r3, [r3, #4]
 80072ea:	2b02      	cmp	r3, #2
 80072ec:	d107      	bne.n	80072fe <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80072ee:	4b41      	ldr	r3, [pc, #260]	; (80073f4 <HAL_RCC_ClockConfig+0x1c4>)
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80072f6:	2b00      	cmp	r3, #0
 80072f8:	d109      	bne.n	800730e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80072fa:	2301      	movs	r3, #1
 80072fc:	e073      	b.n	80073e6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80072fe:	4b3d      	ldr	r3, [pc, #244]	; (80073f4 <HAL_RCC_ClockConfig+0x1c4>)
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	f003 0302 	and.w	r3, r3, #2
 8007306:	2b00      	cmp	r3, #0
 8007308:	d101      	bne.n	800730e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800730a:	2301      	movs	r3, #1
 800730c:	e06b      	b.n	80073e6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800730e:	4b39      	ldr	r3, [pc, #228]	; (80073f4 <HAL_RCC_ClockConfig+0x1c4>)
 8007310:	685b      	ldr	r3, [r3, #4]
 8007312:	f023 0203 	bic.w	r2, r3, #3
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	685b      	ldr	r3, [r3, #4]
 800731a:	4936      	ldr	r1, [pc, #216]	; (80073f4 <HAL_RCC_ClockConfig+0x1c4>)
 800731c:	4313      	orrs	r3, r2
 800731e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8007320:	f7fe fe86 	bl	8006030 <HAL_GetTick>
 8007324:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007326:	e00a      	b.n	800733e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007328:	f7fe fe82 	bl	8006030 <HAL_GetTick>
 800732c:	4602      	mov	r2, r0
 800732e:	68fb      	ldr	r3, [r7, #12]
 8007330:	1ad3      	subs	r3, r2, r3
 8007332:	f241 3288 	movw	r2, #5000	; 0x1388
 8007336:	4293      	cmp	r3, r2
 8007338:	d901      	bls.n	800733e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800733a:	2303      	movs	r3, #3
 800733c:	e053      	b.n	80073e6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800733e:	4b2d      	ldr	r3, [pc, #180]	; (80073f4 <HAL_RCC_ClockConfig+0x1c4>)
 8007340:	685b      	ldr	r3, [r3, #4]
 8007342:	f003 020c 	and.w	r2, r3, #12
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	685b      	ldr	r3, [r3, #4]
 800734a:	009b      	lsls	r3, r3, #2
 800734c:	429a      	cmp	r2, r3
 800734e:	d1eb      	bne.n	8007328 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8007350:	4b27      	ldr	r3, [pc, #156]	; (80073f0 <HAL_RCC_ClockConfig+0x1c0>)
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	f003 0307 	and.w	r3, r3, #7
 8007358:	683a      	ldr	r2, [r7, #0]
 800735a:	429a      	cmp	r2, r3
 800735c:	d210      	bcs.n	8007380 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800735e:	4b24      	ldr	r3, [pc, #144]	; (80073f0 <HAL_RCC_ClockConfig+0x1c0>)
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	f023 0207 	bic.w	r2, r3, #7
 8007366:	4922      	ldr	r1, [pc, #136]	; (80073f0 <HAL_RCC_ClockConfig+0x1c0>)
 8007368:	683b      	ldr	r3, [r7, #0]
 800736a:	4313      	orrs	r3, r2
 800736c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800736e:	4b20      	ldr	r3, [pc, #128]	; (80073f0 <HAL_RCC_ClockConfig+0x1c0>)
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	f003 0307 	and.w	r3, r3, #7
 8007376:	683a      	ldr	r2, [r7, #0]
 8007378:	429a      	cmp	r2, r3
 800737a:	d001      	beq.n	8007380 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800737c:	2301      	movs	r3, #1
 800737e:	e032      	b.n	80073e6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	f003 0304 	and.w	r3, r3, #4
 8007388:	2b00      	cmp	r3, #0
 800738a:	d008      	beq.n	800739e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800738c:	4b19      	ldr	r3, [pc, #100]	; (80073f4 <HAL_RCC_ClockConfig+0x1c4>)
 800738e:	685b      	ldr	r3, [r3, #4]
 8007390:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	68db      	ldr	r3, [r3, #12]
 8007398:	4916      	ldr	r1, [pc, #88]	; (80073f4 <HAL_RCC_ClockConfig+0x1c4>)
 800739a:	4313      	orrs	r3, r2
 800739c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	f003 0308 	and.w	r3, r3, #8
 80073a6:	2b00      	cmp	r3, #0
 80073a8:	d009      	beq.n	80073be <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80073aa:	4b12      	ldr	r3, [pc, #72]	; (80073f4 <HAL_RCC_ClockConfig+0x1c4>)
 80073ac:	685b      	ldr	r3, [r3, #4]
 80073ae:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	691b      	ldr	r3, [r3, #16]
 80073b6:	00db      	lsls	r3, r3, #3
 80073b8:	490e      	ldr	r1, [pc, #56]	; (80073f4 <HAL_RCC_ClockConfig+0x1c4>)
 80073ba:	4313      	orrs	r3, r2
 80073bc:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80073be:	f000 f821 	bl	8007404 <HAL_RCC_GetSysClockFreq>
 80073c2:	4602      	mov	r2, r0
 80073c4:	4b0b      	ldr	r3, [pc, #44]	; (80073f4 <HAL_RCC_ClockConfig+0x1c4>)
 80073c6:	685b      	ldr	r3, [r3, #4]
 80073c8:	091b      	lsrs	r3, r3, #4
 80073ca:	f003 030f 	and.w	r3, r3, #15
 80073ce:	490a      	ldr	r1, [pc, #40]	; (80073f8 <HAL_RCC_ClockConfig+0x1c8>)
 80073d0:	5ccb      	ldrb	r3, [r1, r3]
 80073d2:	fa22 f303 	lsr.w	r3, r2, r3
 80073d6:	4a09      	ldr	r2, [pc, #36]	; (80073fc <HAL_RCC_ClockConfig+0x1cc>)
 80073d8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80073da:	4b09      	ldr	r3, [pc, #36]	; (8007400 <HAL_RCC_ClockConfig+0x1d0>)
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	4618      	mov	r0, r3
 80073e0:	f7fe fde4 	bl	8005fac <HAL_InitTick>

  return HAL_OK;
 80073e4:	2300      	movs	r3, #0
}
 80073e6:	4618      	mov	r0, r3
 80073e8:	3710      	adds	r7, #16
 80073ea:	46bd      	mov	sp, r7
 80073ec:	bd80      	pop	{r7, pc}
 80073ee:	bf00      	nop
 80073f0:	40022000 	.word	0x40022000
 80073f4:	40021000 	.word	0x40021000
 80073f8:	0800e6b4 	.word	0x0800e6b4
 80073fc:	20000020 	.word	0x20000020
 8007400:	20000050 	.word	0x20000050

08007404 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007404:	b490      	push	{r4, r7}
 8007406:	b08a      	sub	sp, #40	; 0x28
 8007408:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800740a:	4b2a      	ldr	r3, [pc, #168]	; (80074b4 <HAL_RCC_GetSysClockFreq+0xb0>)
 800740c:	1d3c      	adds	r4, r7, #4
 800740e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8007410:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8007414:	f240 2301 	movw	r3, #513	; 0x201
 8007418:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800741a:	2300      	movs	r3, #0
 800741c:	61fb      	str	r3, [r7, #28]
 800741e:	2300      	movs	r3, #0
 8007420:	61bb      	str	r3, [r7, #24]
 8007422:	2300      	movs	r3, #0
 8007424:	627b      	str	r3, [r7, #36]	; 0x24
 8007426:	2300      	movs	r3, #0
 8007428:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800742a:	2300      	movs	r3, #0
 800742c:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800742e:	4b22      	ldr	r3, [pc, #136]	; (80074b8 <HAL_RCC_GetSysClockFreq+0xb4>)
 8007430:	685b      	ldr	r3, [r3, #4]
 8007432:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8007434:	69fb      	ldr	r3, [r7, #28]
 8007436:	f003 030c 	and.w	r3, r3, #12
 800743a:	2b04      	cmp	r3, #4
 800743c:	d002      	beq.n	8007444 <HAL_RCC_GetSysClockFreq+0x40>
 800743e:	2b08      	cmp	r3, #8
 8007440:	d003      	beq.n	800744a <HAL_RCC_GetSysClockFreq+0x46>
 8007442:	e02d      	b.n	80074a0 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8007444:	4b1d      	ldr	r3, [pc, #116]	; (80074bc <HAL_RCC_GetSysClockFreq+0xb8>)
 8007446:	623b      	str	r3, [r7, #32]
      break;
 8007448:	e02d      	b.n	80074a6 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800744a:	69fb      	ldr	r3, [r7, #28]
 800744c:	0c9b      	lsrs	r3, r3, #18
 800744e:	f003 030f 	and.w	r3, r3, #15
 8007452:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8007456:	4413      	add	r3, r2
 8007458:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800745c:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800745e:	69fb      	ldr	r3, [r7, #28]
 8007460:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007464:	2b00      	cmp	r3, #0
 8007466:	d013      	beq.n	8007490 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8007468:	4b13      	ldr	r3, [pc, #76]	; (80074b8 <HAL_RCC_GetSysClockFreq+0xb4>)
 800746a:	685b      	ldr	r3, [r3, #4]
 800746c:	0c5b      	lsrs	r3, r3, #17
 800746e:	f003 0301 	and.w	r3, r3, #1
 8007472:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8007476:	4413      	add	r3, r2
 8007478:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800747c:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800747e:	697b      	ldr	r3, [r7, #20]
 8007480:	4a0e      	ldr	r2, [pc, #56]	; (80074bc <HAL_RCC_GetSysClockFreq+0xb8>)
 8007482:	fb02 f203 	mul.w	r2, r2, r3
 8007486:	69bb      	ldr	r3, [r7, #24]
 8007488:	fbb2 f3f3 	udiv	r3, r2, r3
 800748c:	627b      	str	r3, [r7, #36]	; 0x24
 800748e:	e004      	b.n	800749a <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8007490:	697b      	ldr	r3, [r7, #20]
 8007492:	4a0b      	ldr	r2, [pc, #44]	; (80074c0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8007494:	fb02 f303 	mul.w	r3, r2, r3
 8007498:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800749a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800749c:	623b      	str	r3, [r7, #32]
      break;
 800749e:	e002      	b.n	80074a6 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80074a0:	4b06      	ldr	r3, [pc, #24]	; (80074bc <HAL_RCC_GetSysClockFreq+0xb8>)
 80074a2:	623b      	str	r3, [r7, #32]
      break;
 80074a4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80074a6:	6a3b      	ldr	r3, [r7, #32]
}
 80074a8:	4618      	mov	r0, r3
 80074aa:	3728      	adds	r7, #40	; 0x28
 80074ac:	46bd      	mov	sp, r7
 80074ae:	bc90      	pop	{r4, r7}
 80074b0:	4770      	bx	lr
 80074b2:	bf00      	nop
 80074b4:	0800e6a4 	.word	0x0800e6a4
 80074b8:	40021000 	.word	0x40021000
 80074bc:	007a1200 	.word	0x007a1200
 80074c0:	003d0900 	.word	0x003d0900

080074c4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80074c4:	b480      	push	{r7}
 80074c6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80074c8:	4b02      	ldr	r3, [pc, #8]	; (80074d4 <HAL_RCC_GetHCLKFreq+0x10>)
 80074ca:	681b      	ldr	r3, [r3, #0]
}
 80074cc:	4618      	mov	r0, r3
 80074ce:	46bd      	mov	sp, r7
 80074d0:	bc80      	pop	{r7}
 80074d2:	4770      	bx	lr
 80074d4:	20000020 	.word	0x20000020

080074d8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80074d8:	b580      	push	{r7, lr}
 80074da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80074dc:	f7ff fff2 	bl	80074c4 <HAL_RCC_GetHCLKFreq>
 80074e0:	4602      	mov	r2, r0
 80074e2:	4b05      	ldr	r3, [pc, #20]	; (80074f8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80074e4:	685b      	ldr	r3, [r3, #4]
 80074e6:	0a1b      	lsrs	r3, r3, #8
 80074e8:	f003 0307 	and.w	r3, r3, #7
 80074ec:	4903      	ldr	r1, [pc, #12]	; (80074fc <HAL_RCC_GetPCLK1Freq+0x24>)
 80074ee:	5ccb      	ldrb	r3, [r1, r3]
 80074f0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80074f4:	4618      	mov	r0, r3
 80074f6:	bd80      	pop	{r7, pc}
 80074f8:	40021000 	.word	0x40021000
 80074fc:	0800e6c4 	.word	0x0800e6c4

08007500 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007500:	b580      	push	{r7, lr}
 8007502:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8007504:	f7ff ffde 	bl	80074c4 <HAL_RCC_GetHCLKFreq>
 8007508:	4602      	mov	r2, r0
 800750a:	4b05      	ldr	r3, [pc, #20]	; (8007520 <HAL_RCC_GetPCLK2Freq+0x20>)
 800750c:	685b      	ldr	r3, [r3, #4]
 800750e:	0adb      	lsrs	r3, r3, #11
 8007510:	f003 0307 	and.w	r3, r3, #7
 8007514:	4903      	ldr	r1, [pc, #12]	; (8007524 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007516:	5ccb      	ldrb	r3, [r1, r3]
 8007518:	fa22 f303 	lsr.w	r3, r2, r3
}
 800751c:	4618      	mov	r0, r3
 800751e:	bd80      	pop	{r7, pc}
 8007520:	40021000 	.word	0x40021000
 8007524:	0800e6c4 	.word	0x0800e6c4

08007528 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8007528:	b480      	push	{r7}
 800752a:	b085      	sub	sp, #20
 800752c:	af00      	add	r7, sp, #0
 800752e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8007530:	4b0a      	ldr	r3, [pc, #40]	; (800755c <RCC_Delay+0x34>)
 8007532:	681b      	ldr	r3, [r3, #0]
 8007534:	4a0a      	ldr	r2, [pc, #40]	; (8007560 <RCC_Delay+0x38>)
 8007536:	fba2 2303 	umull	r2, r3, r2, r3
 800753a:	0a5b      	lsrs	r3, r3, #9
 800753c:	687a      	ldr	r2, [r7, #4]
 800753e:	fb02 f303 	mul.w	r3, r2, r3
 8007542:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8007544:	bf00      	nop
  }
  while (Delay --);
 8007546:	68fb      	ldr	r3, [r7, #12]
 8007548:	1e5a      	subs	r2, r3, #1
 800754a:	60fa      	str	r2, [r7, #12]
 800754c:	2b00      	cmp	r3, #0
 800754e:	d1f9      	bne.n	8007544 <RCC_Delay+0x1c>
}
 8007550:	bf00      	nop
 8007552:	bf00      	nop
 8007554:	3714      	adds	r7, #20
 8007556:	46bd      	mov	sp, r7
 8007558:	bc80      	pop	{r7}
 800755a:	4770      	bx	lr
 800755c:	20000020 	.word	0x20000020
 8007560:	10624dd3 	.word	0x10624dd3

08007564 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007564:	b580      	push	{r7, lr}
 8007566:	b082      	sub	sp, #8
 8007568:	af00      	add	r7, sp, #0
 800756a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	2b00      	cmp	r3, #0
 8007570:	d101      	bne.n	8007576 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8007572:	2301      	movs	r3, #1
 8007574:	e076      	b.n	8007664 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800757a:	2b00      	cmp	r3, #0
 800757c:	d108      	bne.n	8007590 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	685b      	ldr	r3, [r3, #4]
 8007582:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007586:	d009      	beq.n	800759c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	2200      	movs	r2, #0
 800758c:	61da      	str	r2, [r3, #28]
 800758e:	e005      	b.n	800759c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	2200      	movs	r2, #0
 8007594:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	2200      	movs	r2, #0
 800759a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	2200      	movs	r2, #0
 80075a0:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80075a8:	b2db      	uxtb	r3, r3
 80075aa:	2b00      	cmp	r3, #0
 80075ac:	d106      	bne.n	80075bc <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	2200      	movs	r2, #0
 80075b2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80075b6:	6878      	ldr	r0, [r7, #4]
 80075b8:	f7fd fb74 	bl	8004ca4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	2202      	movs	r2, #2
 80075c0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	681b      	ldr	r3, [r3, #0]
 80075c8:	681a      	ldr	r2, [r3, #0]
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	681b      	ldr	r3, [r3, #0]
 80075ce:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80075d2:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	685b      	ldr	r3, [r3, #4]
 80075d8:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	689b      	ldr	r3, [r3, #8]
 80075e0:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80075e4:	431a      	orrs	r2, r3
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	68db      	ldr	r3, [r3, #12]
 80075ea:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80075ee:	431a      	orrs	r2, r3
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	691b      	ldr	r3, [r3, #16]
 80075f4:	f003 0302 	and.w	r3, r3, #2
 80075f8:	431a      	orrs	r2, r3
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	695b      	ldr	r3, [r3, #20]
 80075fe:	f003 0301 	and.w	r3, r3, #1
 8007602:	431a      	orrs	r2, r3
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	699b      	ldr	r3, [r3, #24]
 8007608:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800760c:	431a      	orrs	r2, r3
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	69db      	ldr	r3, [r3, #28]
 8007612:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007616:	431a      	orrs	r2, r3
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	6a1b      	ldr	r3, [r3, #32]
 800761c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007620:	ea42 0103 	orr.w	r1, r2, r3
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007628:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	430a      	orrs	r2, r1
 8007632:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	699b      	ldr	r3, [r3, #24]
 8007638:	0c1a      	lsrs	r2, r3, #16
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	f002 0204 	and.w	r2, r2, #4
 8007642:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	69da      	ldr	r2, [r3, #28]
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007652:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	2200      	movs	r2, #0
 8007658:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	2201      	movs	r2, #1
 800765e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8007662:	2300      	movs	r3, #0
}
 8007664:	4618      	mov	r0, r3
 8007666:	3708      	adds	r7, #8
 8007668:	46bd      	mov	sp, r7
 800766a:	bd80      	pop	{r7, pc}

0800766c <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800766c:	b580      	push	{r7, lr}
 800766e:	b088      	sub	sp, #32
 8007670:	af00      	add	r7, sp, #0
 8007672:	60f8      	str	r0, [r7, #12]
 8007674:	60b9      	str	r1, [r7, #8]
 8007676:	603b      	str	r3, [r7, #0]
 8007678:	4613      	mov	r3, r2
 800767a:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800767c:	2300      	movs	r3, #0
 800767e:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007680:	68fb      	ldr	r3, [r7, #12]
 8007682:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8007686:	2b01      	cmp	r3, #1
 8007688:	d101      	bne.n	800768e <HAL_SPI_Transmit+0x22>
 800768a:	2302      	movs	r3, #2
 800768c:	e126      	b.n	80078dc <HAL_SPI_Transmit+0x270>
 800768e:	68fb      	ldr	r3, [r7, #12]
 8007690:	2201      	movs	r2, #1
 8007692:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007696:	f7fe fccb 	bl	8006030 <HAL_GetTick>
 800769a:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800769c:	88fb      	ldrh	r3, [r7, #6]
 800769e:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80076a0:	68fb      	ldr	r3, [r7, #12]
 80076a2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80076a6:	b2db      	uxtb	r3, r3
 80076a8:	2b01      	cmp	r3, #1
 80076aa:	d002      	beq.n	80076b2 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80076ac:	2302      	movs	r3, #2
 80076ae:	77fb      	strb	r3, [r7, #31]
    goto error;
 80076b0:	e10b      	b.n	80078ca <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 80076b2:	68bb      	ldr	r3, [r7, #8]
 80076b4:	2b00      	cmp	r3, #0
 80076b6:	d002      	beq.n	80076be <HAL_SPI_Transmit+0x52>
 80076b8:	88fb      	ldrh	r3, [r7, #6]
 80076ba:	2b00      	cmp	r3, #0
 80076bc:	d102      	bne.n	80076c4 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80076be:	2301      	movs	r3, #1
 80076c0:	77fb      	strb	r3, [r7, #31]
    goto error;
 80076c2:	e102      	b.n	80078ca <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80076c4:	68fb      	ldr	r3, [r7, #12]
 80076c6:	2203      	movs	r2, #3
 80076c8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80076cc:	68fb      	ldr	r3, [r7, #12]
 80076ce:	2200      	movs	r2, #0
 80076d0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80076d2:	68fb      	ldr	r3, [r7, #12]
 80076d4:	68ba      	ldr	r2, [r7, #8]
 80076d6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80076d8:	68fb      	ldr	r3, [r7, #12]
 80076da:	88fa      	ldrh	r2, [r7, #6]
 80076dc:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80076de:	68fb      	ldr	r3, [r7, #12]
 80076e0:	88fa      	ldrh	r2, [r7, #6]
 80076e2:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80076e4:	68fb      	ldr	r3, [r7, #12]
 80076e6:	2200      	movs	r2, #0
 80076e8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80076ea:	68fb      	ldr	r3, [r7, #12]
 80076ec:	2200      	movs	r2, #0
 80076ee:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80076f0:	68fb      	ldr	r3, [r7, #12]
 80076f2:	2200      	movs	r2, #0
 80076f4:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80076f6:	68fb      	ldr	r3, [r7, #12]
 80076f8:	2200      	movs	r2, #0
 80076fa:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80076fc:	68fb      	ldr	r3, [r7, #12]
 80076fe:	2200      	movs	r2, #0
 8007700:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007702:	68fb      	ldr	r3, [r7, #12]
 8007704:	689b      	ldr	r3, [r3, #8]
 8007706:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800770a:	d10f      	bne.n	800772c <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800770c:	68fb      	ldr	r3, [r7, #12]
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	681a      	ldr	r2, [r3, #0]
 8007712:	68fb      	ldr	r3, [r7, #12]
 8007714:	681b      	ldr	r3, [r3, #0]
 8007716:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800771a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800771c:	68fb      	ldr	r3, [r7, #12]
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	681a      	ldr	r2, [r3, #0]
 8007722:	68fb      	ldr	r3, [r7, #12]
 8007724:	681b      	ldr	r3, [r3, #0]
 8007726:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800772a:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800772c:	68fb      	ldr	r3, [r7, #12]
 800772e:	681b      	ldr	r3, [r3, #0]
 8007730:	681b      	ldr	r3, [r3, #0]
 8007732:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007736:	2b40      	cmp	r3, #64	; 0x40
 8007738:	d007      	beq.n	800774a <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800773a:	68fb      	ldr	r3, [r7, #12]
 800773c:	681b      	ldr	r3, [r3, #0]
 800773e:	681a      	ldr	r2, [r3, #0]
 8007740:	68fb      	ldr	r3, [r7, #12]
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007748:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800774a:	68fb      	ldr	r3, [r7, #12]
 800774c:	68db      	ldr	r3, [r3, #12]
 800774e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007752:	d14b      	bne.n	80077ec <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007754:	68fb      	ldr	r3, [r7, #12]
 8007756:	685b      	ldr	r3, [r3, #4]
 8007758:	2b00      	cmp	r3, #0
 800775a:	d002      	beq.n	8007762 <HAL_SPI_Transmit+0xf6>
 800775c:	8afb      	ldrh	r3, [r7, #22]
 800775e:	2b01      	cmp	r3, #1
 8007760:	d13e      	bne.n	80077e0 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007762:	68fb      	ldr	r3, [r7, #12]
 8007764:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007766:	881a      	ldrh	r2, [r3, #0]
 8007768:	68fb      	ldr	r3, [r7, #12]
 800776a:	681b      	ldr	r3, [r3, #0]
 800776c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800776e:	68fb      	ldr	r3, [r7, #12]
 8007770:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007772:	1c9a      	adds	r2, r3, #2
 8007774:	68fb      	ldr	r3, [r7, #12]
 8007776:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8007778:	68fb      	ldr	r3, [r7, #12]
 800777a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800777c:	b29b      	uxth	r3, r3
 800777e:	3b01      	subs	r3, #1
 8007780:	b29a      	uxth	r2, r3
 8007782:	68fb      	ldr	r3, [r7, #12]
 8007784:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8007786:	e02b      	b.n	80077e0 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8007788:	68fb      	ldr	r3, [r7, #12]
 800778a:	681b      	ldr	r3, [r3, #0]
 800778c:	689b      	ldr	r3, [r3, #8]
 800778e:	f003 0302 	and.w	r3, r3, #2
 8007792:	2b02      	cmp	r3, #2
 8007794:	d112      	bne.n	80077bc <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007796:	68fb      	ldr	r3, [r7, #12]
 8007798:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800779a:	881a      	ldrh	r2, [r3, #0]
 800779c:	68fb      	ldr	r3, [r7, #12]
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80077a2:	68fb      	ldr	r3, [r7, #12]
 80077a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80077a6:	1c9a      	adds	r2, r3, #2
 80077a8:	68fb      	ldr	r3, [r7, #12]
 80077aa:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80077ac:	68fb      	ldr	r3, [r7, #12]
 80077ae:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80077b0:	b29b      	uxth	r3, r3
 80077b2:	3b01      	subs	r3, #1
 80077b4:	b29a      	uxth	r2, r3
 80077b6:	68fb      	ldr	r3, [r7, #12]
 80077b8:	86da      	strh	r2, [r3, #54]	; 0x36
 80077ba:	e011      	b.n	80077e0 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80077bc:	f7fe fc38 	bl	8006030 <HAL_GetTick>
 80077c0:	4602      	mov	r2, r0
 80077c2:	69bb      	ldr	r3, [r7, #24]
 80077c4:	1ad3      	subs	r3, r2, r3
 80077c6:	683a      	ldr	r2, [r7, #0]
 80077c8:	429a      	cmp	r2, r3
 80077ca:	d803      	bhi.n	80077d4 <HAL_SPI_Transmit+0x168>
 80077cc:	683b      	ldr	r3, [r7, #0]
 80077ce:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80077d2:	d102      	bne.n	80077da <HAL_SPI_Transmit+0x16e>
 80077d4:	683b      	ldr	r3, [r7, #0]
 80077d6:	2b00      	cmp	r3, #0
 80077d8:	d102      	bne.n	80077e0 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 80077da:	2303      	movs	r3, #3
 80077dc:	77fb      	strb	r3, [r7, #31]
          goto error;
 80077de:	e074      	b.n	80078ca <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80077e0:	68fb      	ldr	r3, [r7, #12]
 80077e2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80077e4:	b29b      	uxth	r3, r3
 80077e6:	2b00      	cmp	r3, #0
 80077e8:	d1ce      	bne.n	8007788 <HAL_SPI_Transmit+0x11c>
 80077ea:	e04c      	b.n	8007886 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80077ec:	68fb      	ldr	r3, [r7, #12]
 80077ee:	685b      	ldr	r3, [r3, #4]
 80077f0:	2b00      	cmp	r3, #0
 80077f2:	d002      	beq.n	80077fa <HAL_SPI_Transmit+0x18e>
 80077f4:	8afb      	ldrh	r3, [r7, #22]
 80077f6:	2b01      	cmp	r3, #1
 80077f8:	d140      	bne.n	800787c <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80077fa:	68fb      	ldr	r3, [r7, #12]
 80077fc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80077fe:	68fb      	ldr	r3, [r7, #12]
 8007800:	681b      	ldr	r3, [r3, #0]
 8007802:	330c      	adds	r3, #12
 8007804:	7812      	ldrb	r2, [r2, #0]
 8007806:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8007808:	68fb      	ldr	r3, [r7, #12]
 800780a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800780c:	1c5a      	adds	r2, r3, #1
 800780e:	68fb      	ldr	r3, [r7, #12]
 8007810:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8007812:	68fb      	ldr	r3, [r7, #12]
 8007814:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007816:	b29b      	uxth	r3, r3
 8007818:	3b01      	subs	r3, #1
 800781a:	b29a      	uxth	r2, r3
 800781c:	68fb      	ldr	r3, [r7, #12]
 800781e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8007820:	e02c      	b.n	800787c <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8007822:	68fb      	ldr	r3, [r7, #12]
 8007824:	681b      	ldr	r3, [r3, #0]
 8007826:	689b      	ldr	r3, [r3, #8]
 8007828:	f003 0302 	and.w	r3, r3, #2
 800782c:	2b02      	cmp	r3, #2
 800782e:	d113      	bne.n	8007858 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007830:	68fb      	ldr	r3, [r7, #12]
 8007832:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007834:	68fb      	ldr	r3, [r7, #12]
 8007836:	681b      	ldr	r3, [r3, #0]
 8007838:	330c      	adds	r3, #12
 800783a:	7812      	ldrb	r2, [r2, #0]
 800783c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800783e:	68fb      	ldr	r3, [r7, #12]
 8007840:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007842:	1c5a      	adds	r2, r3, #1
 8007844:	68fb      	ldr	r3, [r7, #12]
 8007846:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8007848:	68fb      	ldr	r3, [r7, #12]
 800784a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800784c:	b29b      	uxth	r3, r3
 800784e:	3b01      	subs	r3, #1
 8007850:	b29a      	uxth	r2, r3
 8007852:	68fb      	ldr	r3, [r7, #12]
 8007854:	86da      	strh	r2, [r3, #54]	; 0x36
 8007856:	e011      	b.n	800787c <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007858:	f7fe fbea 	bl	8006030 <HAL_GetTick>
 800785c:	4602      	mov	r2, r0
 800785e:	69bb      	ldr	r3, [r7, #24]
 8007860:	1ad3      	subs	r3, r2, r3
 8007862:	683a      	ldr	r2, [r7, #0]
 8007864:	429a      	cmp	r2, r3
 8007866:	d803      	bhi.n	8007870 <HAL_SPI_Transmit+0x204>
 8007868:	683b      	ldr	r3, [r7, #0]
 800786a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800786e:	d102      	bne.n	8007876 <HAL_SPI_Transmit+0x20a>
 8007870:	683b      	ldr	r3, [r7, #0]
 8007872:	2b00      	cmp	r3, #0
 8007874:	d102      	bne.n	800787c <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8007876:	2303      	movs	r3, #3
 8007878:	77fb      	strb	r3, [r7, #31]
          goto error;
 800787a:	e026      	b.n	80078ca <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800787c:	68fb      	ldr	r3, [r7, #12]
 800787e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007880:	b29b      	uxth	r3, r3
 8007882:	2b00      	cmp	r3, #0
 8007884:	d1cd      	bne.n	8007822 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007886:	69ba      	ldr	r2, [r7, #24]
 8007888:	6839      	ldr	r1, [r7, #0]
 800788a:	68f8      	ldr	r0, [r7, #12]
 800788c:	f000 fbb8 	bl	8008000 <SPI_EndRxTxTransaction>
 8007890:	4603      	mov	r3, r0
 8007892:	2b00      	cmp	r3, #0
 8007894:	d002      	beq.n	800789c <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007896:	68fb      	ldr	r3, [r7, #12]
 8007898:	2220      	movs	r2, #32
 800789a:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800789c:	68fb      	ldr	r3, [r7, #12]
 800789e:	689b      	ldr	r3, [r3, #8]
 80078a0:	2b00      	cmp	r3, #0
 80078a2:	d10a      	bne.n	80078ba <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80078a4:	2300      	movs	r3, #0
 80078a6:	613b      	str	r3, [r7, #16]
 80078a8:	68fb      	ldr	r3, [r7, #12]
 80078aa:	681b      	ldr	r3, [r3, #0]
 80078ac:	68db      	ldr	r3, [r3, #12]
 80078ae:	613b      	str	r3, [r7, #16]
 80078b0:	68fb      	ldr	r3, [r7, #12]
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	689b      	ldr	r3, [r3, #8]
 80078b6:	613b      	str	r3, [r7, #16]
 80078b8:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80078ba:	68fb      	ldr	r3, [r7, #12]
 80078bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80078be:	2b00      	cmp	r3, #0
 80078c0:	d002      	beq.n	80078c8 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 80078c2:	2301      	movs	r3, #1
 80078c4:	77fb      	strb	r3, [r7, #31]
 80078c6:	e000      	b.n	80078ca <HAL_SPI_Transmit+0x25e>
  }

error:
 80078c8:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80078ca:	68fb      	ldr	r3, [r7, #12]
 80078cc:	2201      	movs	r2, #1
 80078ce:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80078d2:	68fb      	ldr	r3, [r7, #12]
 80078d4:	2200      	movs	r2, #0
 80078d6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80078da:	7ffb      	ldrb	r3, [r7, #31]
}
 80078dc:	4618      	mov	r0, r3
 80078de:	3720      	adds	r7, #32
 80078e0:	46bd      	mov	sp, r7
 80078e2:	bd80      	pop	{r7, pc}

080078e4 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80078e4:	b580      	push	{r7, lr}
 80078e6:	b088      	sub	sp, #32
 80078e8:	af02      	add	r7, sp, #8
 80078ea:	60f8      	str	r0, [r7, #12]
 80078ec:	60b9      	str	r1, [r7, #8]
 80078ee:	603b      	str	r3, [r7, #0]
 80078f0:	4613      	mov	r3, r2
 80078f2:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80078f4:	2300      	movs	r3, #0
 80078f6:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80078f8:	68fb      	ldr	r3, [r7, #12]
 80078fa:	685b      	ldr	r3, [r3, #4]
 80078fc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007900:	d112      	bne.n	8007928 <HAL_SPI_Receive+0x44>
 8007902:	68fb      	ldr	r3, [r7, #12]
 8007904:	689b      	ldr	r3, [r3, #8]
 8007906:	2b00      	cmp	r3, #0
 8007908:	d10e      	bne.n	8007928 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800790a:	68fb      	ldr	r3, [r7, #12]
 800790c:	2204      	movs	r2, #4
 800790e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8007912:	88fa      	ldrh	r2, [r7, #6]
 8007914:	683b      	ldr	r3, [r7, #0]
 8007916:	9300      	str	r3, [sp, #0]
 8007918:	4613      	mov	r3, r2
 800791a:	68ba      	ldr	r2, [r7, #8]
 800791c:	68b9      	ldr	r1, [r7, #8]
 800791e:	68f8      	ldr	r0, [r7, #12]
 8007920:	f000 f8f1 	bl	8007b06 <HAL_SPI_TransmitReceive>
 8007924:	4603      	mov	r3, r0
 8007926:	e0ea      	b.n	8007afe <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007928:	68fb      	ldr	r3, [r7, #12]
 800792a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800792e:	2b01      	cmp	r3, #1
 8007930:	d101      	bne.n	8007936 <HAL_SPI_Receive+0x52>
 8007932:	2302      	movs	r3, #2
 8007934:	e0e3      	b.n	8007afe <HAL_SPI_Receive+0x21a>
 8007936:	68fb      	ldr	r3, [r7, #12]
 8007938:	2201      	movs	r2, #1
 800793a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800793e:	f7fe fb77 	bl	8006030 <HAL_GetTick>
 8007942:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8007944:	68fb      	ldr	r3, [r7, #12]
 8007946:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800794a:	b2db      	uxtb	r3, r3
 800794c:	2b01      	cmp	r3, #1
 800794e:	d002      	beq.n	8007956 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8007950:	2302      	movs	r3, #2
 8007952:	75fb      	strb	r3, [r7, #23]
    goto error;
 8007954:	e0ca      	b.n	8007aec <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8007956:	68bb      	ldr	r3, [r7, #8]
 8007958:	2b00      	cmp	r3, #0
 800795a:	d002      	beq.n	8007962 <HAL_SPI_Receive+0x7e>
 800795c:	88fb      	ldrh	r3, [r7, #6]
 800795e:	2b00      	cmp	r3, #0
 8007960:	d102      	bne.n	8007968 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8007962:	2301      	movs	r3, #1
 8007964:	75fb      	strb	r3, [r7, #23]
    goto error;
 8007966:	e0c1      	b.n	8007aec <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8007968:	68fb      	ldr	r3, [r7, #12]
 800796a:	2204      	movs	r2, #4
 800796c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007970:	68fb      	ldr	r3, [r7, #12]
 8007972:	2200      	movs	r2, #0
 8007974:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8007976:	68fb      	ldr	r3, [r7, #12]
 8007978:	68ba      	ldr	r2, [r7, #8]
 800797a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 800797c:	68fb      	ldr	r3, [r7, #12]
 800797e:	88fa      	ldrh	r2, [r7, #6]
 8007980:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8007982:	68fb      	ldr	r3, [r7, #12]
 8007984:	88fa      	ldrh	r2, [r7, #6]
 8007986:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8007988:	68fb      	ldr	r3, [r7, #12]
 800798a:	2200      	movs	r2, #0
 800798c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 800798e:	68fb      	ldr	r3, [r7, #12]
 8007990:	2200      	movs	r2, #0
 8007992:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8007994:	68fb      	ldr	r3, [r7, #12]
 8007996:	2200      	movs	r2, #0
 8007998:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 800799a:	68fb      	ldr	r3, [r7, #12]
 800799c:	2200      	movs	r2, #0
 800799e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80079a0:	68fb      	ldr	r3, [r7, #12]
 80079a2:	2200      	movs	r2, #0
 80079a4:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80079a6:	68fb      	ldr	r3, [r7, #12]
 80079a8:	689b      	ldr	r3, [r3, #8]
 80079aa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80079ae:	d10f      	bne.n	80079d0 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80079b0:	68fb      	ldr	r3, [r7, #12]
 80079b2:	681b      	ldr	r3, [r3, #0]
 80079b4:	681a      	ldr	r2, [r3, #0]
 80079b6:	68fb      	ldr	r3, [r7, #12]
 80079b8:	681b      	ldr	r3, [r3, #0]
 80079ba:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80079be:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80079c0:	68fb      	ldr	r3, [r7, #12]
 80079c2:	681b      	ldr	r3, [r3, #0]
 80079c4:	681a      	ldr	r2, [r3, #0]
 80079c6:	68fb      	ldr	r3, [r7, #12]
 80079c8:	681b      	ldr	r3, [r3, #0]
 80079ca:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80079ce:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80079d0:	68fb      	ldr	r3, [r7, #12]
 80079d2:	681b      	ldr	r3, [r3, #0]
 80079d4:	681b      	ldr	r3, [r3, #0]
 80079d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80079da:	2b40      	cmp	r3, #64	; 0x40
 80079dc:	d007      	beq.n	80079ee <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80079de:	68fb      	ldr	r3, [r7, #12]
 80079e0:	681b      	ldr	r3, [r3, #0]
 80079e2:	681a      	ldr	r2, [r3, #0]
 80079e4:	68fb      	ldr	r3, [r7, #12]
 80079e6:	681b      	ldr	r3, [r3, #0]
 80079e8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80079ec:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 80079ee:	68fb      	ldr	r3, [r7, #12]
 80079f0:	68db      	ldr	r3, [r3, #12]
 80079f2:	2b00      	cmp	r3, #0
 80079f4:	d162      	bne.n	8007abc <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80079f6:	e02e      	b.n	8007a56 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80079f8:	68fb      	ldr	r3, [r7, #12]
 80079fa:	681b      	ldr	r3, [r3, #0]
 80079fc:	689b      	ldr	r3, [r3, #8]
 80079fe:	f003 0301 	and.w	r3, r3, #1
 8007a02:	2b01      	cmp	r3, #1
 8007a04:	d115      	bne.n	8007a32 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8007a06:	68fb      	ldr	r3, [r7, #12]
 8007a08:	681b      	ldr	r3, [r3, #0]
 8007a0a:	f103 020c 	add.w	r2, r3, #12
 8007a0e:	68fb      	ldr	r3, [r7, #12]
 8007a10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a12:	7812      	ldrb	r2, [r2, #0]
 8007a14:	b2d2      	uxtb	r2, r2
 8007a16:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8007a18:	68fb      	ldr	r3, [r7, #12]
 8007a1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a1c:	1c5a      	adds	r2, r3, #1
 8007a1e:	68fb      	ldr	r3, [r7, #12]
 8007a20:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8007a22:	68fb      	ldr	r3, [r7, #12]
 8007a24:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007a26:	b29b      	uxth	r3, r3
 8007a28:	3b01      	subs	r3, #1
 8007a2a:	b29a      	uxth	r2, r3
 8007a2c:	68fb      	ldr	r3, [r7, #12]
 8007a2e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8007a30:	e011      	b.n	8007a56 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007a32:	f7fe fafd 	bl	8006030 <HAL_GetTick>
 8007a36:	4602      	mov	r2, r0
 8007a38:	693b      	ldr	r3, [r7, #16]
 8007a3a:	1ad3      	subs	r3, r2, r3
 8007a3c:	683a      	ldr	r2, [r7, #0]
 8007a3e:	429a      	cmp	r2, r3
 8007a40:	d803      	bhi.n	8007a4a <HAL_SPI_Receive+0x166>
 8007a42:	683b      	ldr	r3, [r7, #0]
 8007a44:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007a48:	d102      	bne.n	8007a50 <HAL_SPI_Receive+0x16c>
 8007a4a:	683b      	ldr	r3, [r7, #0]
 8007a4c:	2b00      	cmp	r3, #0
 8007a4e:	d102      	bne.n	8007a56 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8007a50:	2303      	movs	r3, #3
 8007a52:	75fb      	strb	r3, [r7, #23]
          goto error;
 8007a54:	e04a      	b.n	8007aec <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8007a56:	68fb      	ldr	r3, [r7, #12]
 8007a58:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007a5a:	b29b      	uxth	r3, r3
 8007a5c:	2b00      	cmp	r3, #0
 8007a5e:	d1cb      	bne.n	80079f8 <HAL_SPI_Receive+0x114>
 8007a60:	e031      	b.n	8007ac6 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8007a62:	68fb      	ldr	r3, [r7, #12]
 8007a64:	681b      	ldr	r3, [r3, #0]
 8007a66:	689b      	ldr	r3, [r3, #8]
 8007a68:	f003 0301 	and.w	r3, r3, #1
 8007a6c:	2b01      	cmp	r3, #1
 8007a6e:	d113      	bne.n	8007a98 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007a70:	68fb      	ldr	r3, [r7, #12]
 8007a72:	681b      	ldr	r3, [r3, #0]
 8007a74:	68da      	ldr	r2, [r3, #12]
 8007a76:	68fb      	ldr	r3, [r7, #12]
 8007a78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a7a:	b292      	uxth	r2, r2
 8007a7c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007a7e:	68fb      	ldr	r3, [r7, #12]
 8007a80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a82:	1c9a      	adds	r2, r3, #2
 8007a84:	68fb      	ldr	r3, [r7, #12]
 8007a86:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8007a88:	68fb      	ldr	r3, [r7, #12]
 8007a8a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007a8c:	b29b      	uxth	r3, r3
 8007a8e:	3b01      	subs	r3, #1
 8007a90:	b29a      	uxth	r2, r3
 8007a92:	68fb      	ldr	r3, [r7, #12]
 8007a94:	87da      	strh	r2, [r3, #62]	; 0x3e
 8007a96:	e011      	b.n	8007abc <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007a98:	f7fe faca 	bl	8006030 <HAL_GetTick>
 8007a9c:	4602      	mov	r2, r0
 8007a9e:	693b      	ldr	r3, [r7, #16]
 8007aa0:	1ad3      	subs	r3, r2, r3
 8007aa2:	683a      	ldr	r2, [r7, #0]
 8007aa4:	429a      	cmp	r2, r3
 8007aa6:	d803      	bhi.n	8007ab0 <HAL_SPI_Receive+0x1cc>
 8007aa8:	683b      	ldr	r3, [r7, #0]
 8007aaa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007aae:	d102      	bne.n	8007ab6 <HAL_SPI_Receive+0x1d2>
 8007ab0:	683b      	ldr	r3, [r7, #0]
 8007ab2:	2b00      	cmp	r3, #0
 8007ab4:	d102      	bne.n	8007abc <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8007ab6:	2303      	movs	r3, #3
 8007ab8:	75fb      	strb	r3, [r7, #23]
          goto error;
 8007aba:	e017      	b.n	8007aec <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8007abc:	68fb      	ldr	r3, [r7, #12]
 8007abe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007ac0:	b29b      	uxth	r3, r3
 8007ac2:	2b00      	cmp	r3, #0
 8007ac4:	d1cd      	bne.n	8007a62 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007ac6:	693a      	ldr	r2, [r7, #16]
 8007ac8:	6839      	ldr	r1, [r7, #0]
 8007aca:	68f8      	ldr	r0, [r7, #12]
 8007acc:	f000 fa46 	bl	8007f5c <SPI_EndRxTransaction>
 8007ad0:	4603      	mov	r3, r0
 8007ad2:	2b00      	cmp	r3, #0
 8007ad4:	d002      	beq.n	8007adc <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007ad6:	68fb      	ldr	r3, [r7, #12]
 8007ad8:	2220      	movs	r2, #32
 8007ada:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007adc:	68fb      	ldr	r3, [r7, #12]
 8007ade:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007ae0:	2b00      	cmp	r3, #0
 8007ae2:	d002      	beq.n	8007aea <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8007ae4:	2301      	movs	r3, #1
 8007ae6:	75fb      	strb	r3, [r7, #23]
 8007ae8:	e000      	b.n	8007aec <HAL_SPI_Receive+0x208>
  }

error :
 8007aea:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8007aec:	68fb      	ldr	r3, [r7, #12]
 8007aee:	2201      	movs	r2, #1
 8007af0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8007af4:	68fb      	ldr	r3, [r7, #12]
 8007af6:	2200      	movs	r2, #0
 8007af8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8007afc:	7dfb      	ldrb	r3, [r7, #23]
}
 8007afe:	4618      	mov	r0, r3
 8007b00:	3718      	adds	r7, #24
 8007b02:	46bd      	mov	sp, r7
 8007b04:	bd80      	pop	{r7, pc}

08007b06 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8007b06:	b580      	push	{r7, lr}
 8007b08:	b08c      	sub	sp, #48	; 0x30
 8007b0a:	af00      	add	r7, sp, #0
 8007b0c:	60f8      	str	r0, [r7, #12]
 8007b0e:	60b9      	str	r1, [r7, #8]
 8007b10:	607a      	str	r2, [r7, #4]
 8007b12:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8007b14:	2301      	movs	r3, #1
 8007b16:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8007b18:	2300      	movs	r3, #0
 8007b1a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007b1e:	68fb      	ldr	r3, [r7, #12]
 8007b20:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8007b24:	2b01      	cmp	r3, #1
 8007b26:	d101      	bne.n	8007b2c <HAL_SPI_TransmitReceive+0x26>
 8007b28:	2302      	movs	r3, #2
 8007b2a:	e18a      	b.n	8007e42 <HAL_SPI_TransmitReceive+0x33c>
 8007b2c:	68fb      	ldr	r3, [r7, #12]
 8007b2e:	2201      	movs	r2, #1
 8007b30:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007b34:	f7fe fa7c 	bl	8006030 <HAL_GetTick>
 8007b38:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8007b3a:	68fb      	ldr	r3, [r7, #12]
 8007b3c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007b40:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8007b44:	68fb      	ldr	r3, [r7, #12]
 8007b46:	685b      	ldr	r3, [r3, #4]
 8007b48:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8007b4a:	887b      	ldrh	r3, [r7, #2]
 8007b4c:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8007b4e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007b52:	2b01      	cmp	r3, #1
 8007b54:	d00f      	beq.n	8007b76 <HAL_SPI_TransmitReceive+0x70>
 8007b56:	69fb      	ldr	r3, [r7, #28]
 8007b58:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007b5c:	d107      	bne.n	8007b6e <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8007b5e:	68fb      	ldr	r3, [r7, #12]
 8007b60:	689b      	ldr	r3, [r3, #8]
 8007b62:	2b00      	cmp	r3, #0
 8007b64:	d103      	bne.n	8007b6e <HAL_SPI_TransmitReceive+0x68>
 8007b66:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007b6a:	2b04      	cmp	r3, #4
 8007b6c:	d003      	beq.n	8007b76 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8007b6e:	2302      	movs	r3, #2
 8007b70:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8007b74:	e15b      	b.n	8007e2e <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8007b76:	68bb      	ldr	r3, [r7, #8]
 8007b78:	2b00      	cmp	r3, #0
 8007b7a:	d005      	beq.n	8007b88 <HAL_SPI_TransmitReceive+0x82>
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	2b00      	cmp	r3, #0
 8007b80:	d002      	beq.n	8007b88 <HAL_SPI_TransmitReceive+0x82>
 8007b82:	887b      	ldrh	r3, [r7, #2]
 8007b84:	2b00      	cmp	r3, #0
 8007b86:	d103      	bne.n	8007b90 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8007b88:	2301      	movs	r3, #1
 8007b8a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8007b8e:	e14e      	b.n	8007e2e <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8007b90:	68fb      	ldr	r3, [r7, #12]
 8007b92:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007b96:	b2db      	uxtb	r3, r3
 8007b98:	2b04      	cmp	r3, #4
 8007b9a:	d003      	beq.n	8007ba4 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8007b9c:	68fb      	ldr	r3, [r7, #12]
 8007b9e:	2205      	movs	r2, #5
 8007ba0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007ba4:	68fb      	ldr	r3, [r7, #12]
 8007ba6:	2200      	movs	r2, #0
 8007ba8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8007baa:	68fb      	ldr	r3, [r7, #12]
 8007bac:	687a      	ldr	r2, [r7, #4]
 8007bae:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8007bb0:	68fb      	ldr	r3, [r7, #12]
 8007bb2:	887a      	ldrh	r2, [r7, #2]
 8007bb4:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8007bb6:	68fb      	ldr	r3, [r7, #12]
 8007bb8:	887a      	ldrh	r2, [r7, #2]
 8007bba:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8007bbc:	68fb      	ldr	r3, [r7, #12]
 8007bbe:	68ba      	ldr	r2, [r7, #8]
 8007bc0:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8007bc2:	68fb      	ldr	r3, [r7, #12]
 8007bc4:	887a      	ldrh	r2, [r7, #2]
 8007bc6:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8007bc8:	68fb      	ldr	r3, [r7, #12]
 8007bca:	887a      	ldrh	r2, [r7, #2]
 8007bcc:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8007bce:	68fb      	ldr	r3, [r7, #12]
 8007bd0:	2200      	movs	r2, #0
 8007bd2:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8007bd4:	68fb      	ldr	r3, [r7, #12]
 8007bd6:	2200      	movs	r2, #0
 8007bd8:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007bda:	68fb      	ldr	r3, [r7, #12]
 8007bdc:	681b      	ldr	r3, [r3, #0]
 8007bde:	681b      	ldr	r3, [r3, #0]
 8007be0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007be4:	2b40      	cmp	r3, #64	; 0x40
 8007be6:	d007      	beq.n	8007bf8 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007be8:	68fb      	ldr	r3, [r7, #12]
 8007bea:	681b      	ldr	r3, [r3, #0]
 8007bec:	681a      	ldr	r2, [r3, #0]
 8007bee:	68fb      	ldr	r3, [r7, #12]
 8007bf0:	681b      	ldr	r3, [r3, #0]
 8007bf2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007bf6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8007bf8:	68fb      	ldr	r3, [r7, #12]
 8007bfa:	68db      	ldr	r3, [r3, #12]
 8007bfc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007c00:	d178      	bne.n	8007cf4 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007c02:	68fb      	ldr	r3, [r7, #12]
 8007c04:	685b      	ldr	r3, [r3, #4]
 8007c06:	2b00      	cmp	r3, #0
 8007c08:	d002      	beq.n	8007c10 <HAL_SPI_TransmitReceive+0x10a>
 8007c0a:	8b7b      	ldrh	r3, [r7, #26]
 8007c0c:	2b01      	cmp	r3, #1
 8007c0e:	d166      	bne.n	8007cde <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007c10:	68fb      	ldr	r3, [r7, #12]
 8007c12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c14:	881a      	ldrh	r2, [r3, #0]
 8007c16:	68fb      	ldr	r3, [r7, #12]
 8007c18:	681b      	ldr	r3, [r3, #0]
 8007c1a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007c1c:	68fb      	ldr	r3, [r7, #12]
 8007c1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c20:	1c9a      	adds	r2, r3, #2
 8007c22:	68fb      	ldr	r3, [r7, #12]
 8007c24:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8007c26:	68fb      	ldr	r3, [r7, #12]
 8007c28:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007c2a:	b29b      	uxth	r3, r3
 8007c2c:	3b01      	subs	r3, #1
 8007c2e:	b29a      	uxth	r2, r3
 8007c30:	68fb      	ldr	r3, [r7, #12]
 8007c32:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007c34:	e053      	b.n	8007cde <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007c36:	68fb      	ldr	r3, [r7, #12]
 8007c38:	681b      	ldr	r3, [r3, #0]
 8007c3a:	689b      	ldr	r3, [r3, #8]
 8007c3c:	f003 0302 	and.w	r3, r3, #2
 8007c40:	2b02      	cmp	r3, #2
 8007c42:	d11b      	bne.n	8007c7c <HAL_SPI_TransmitReceive+0x176>
 8007c44:	68fb      	ldr	r3, [r7, #12]
 8007c46:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007c48:	b29b      	uxth	r3, r3
 8007c4a:	2b00      	cmp	r3, #0
 8007c4c:	d016      	beq.n	8007c7c <HAL_SPI_TransmitReceive+0x176>
 8007c4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c50:	2b01      	cmp	r3, #1
 8007c52:	d113      	bne.n	8007c7c <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007c54:	68fb      	ldr	r3, [r7, #12]
 8007c56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c58:	881a      	ldrh	r2, [r3, #0]
 8007c5a:	68fb      	ldr	r3, [r7, #12]
 8007c5c:	681b      	ldr	r3, [r3, #0]
 8007c5e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007c60:	68fb      	ldr	r3, [r7, #12]
 8007c62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c64:	1c9a      	adds	r2, r3, #2
 8007c66:	68fb      	ldr	r3, [r7, #12]
 8007c68:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8007c6a:	68fb      	ldr	r3, [r7, #12]
 8007c6c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007c6e:	b29b      	uxth	r3, r3
 8007c70:	3b01      	subs	r3, #1
 8007c72:	b29a      	uxth	r2, r3
 8007c74:	68fb      	ldr	r3, [r7, #12]
 8007c76:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007c78:	2300      	movs	r3, #0
 8007c7a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007c7c:	68fb      	ldr	r3, [r7, #12]
 8007c7e:	681b      	ldr	r3, [r3, #0]
 8007c80:	689b      	ldr	r3, [r3, #8]
 8007c82:	f003 0301 	and.w	r3, r3, #1
 8007c86:	2b01      	cmp	r3, #1
 8007c88:	d119      	bne.n	8007cbe <HAL_SPI_TransmitReceive+0x1b8>
 8007c8a:	68fb      	ldr	r3, [r7, #12]
 8007c8c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007c8e:	b29b      	uxth	r3, r3
 8007c90:	2b00      	cmp	r3, #0
 8007c92:	d014      	beq.n	8007cbe <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007c94:	68fb      	ldr	r3, [r7, #12]
 8007c96:	681b      	ldr	r3, [r3, #0]
 8007c98:	68da      	ldr	r2, [r3, #12]
 8007c9a:	68fb      	ldr	r3, [r7, #12]
 8007c9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c9e:	b292      	uxth	r2, r2
 8007ca0:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007ca2:	68fb      	ldr	r3, [r7, #12]
 8007ca4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ca6:	1c9a      	adds	r2, r3, #2
 8007ca8:	68fb      	ldr	r3, [r7, #12]
 8007caa:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8007cac:	68fb      	ldr	r3, [r7, #12]
 8007cae:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007cb0:	b29b      	uxth	r3, r3
 8007cb2:	3b01      	subs	r3, #1
 8007cb4:	b29a      	uxth	r2, r3
 8007cb6:	68fb      	ldr	r3, [r7, #12]
 8007cb8:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007cba:	2301      	movs	r3, #1
 8007cbc:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8007cbe:	f7fe f9b7 	bl	8006030 <HAL_GetTick>
 8007cc2:	4602      	mov	r2, r0
 8007cc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cc6:	1ad3      	subs	r3, r2, r3
 8007cc8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007cca:	429a      	cmp	r2, r3
 8007ccc:	d807      	bhi.n	8007cde <HAL_SPI_TransmitReceive+0x1d8>
 8007cce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007cd0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007cd4:	d003      	beq.n	8007cde <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8007cd6:	2303      	movs	r3, #3
 8007cd8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8007cdc:	e0a7      	b.n	8007e2e <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007cde:	68fb      	ldr	r3, [r7, #12]
 8007ce0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007ce2:	b29b      	uxth	r3, r3
 8007ce4:	2b00      	cmp	r3, #0
 8007ce6:	d1a6      	bne.n	8007c36 <HAL_SPI_TransmitReceive+0x130>
 8007ce8:	68fb      	ldr	r3, [r7, #12]
 8007cea:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007cec:	b29b      	uxth	r3, r3
 8007cee:	2b00      	cmp	r3, #0
 8007cf0:	d1a1      	bne.n	8007c36 <HAL_SPI_TransmitReceive+0x130>
 8007cf2:	e07c      	b.n	8007dee <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007cf4:	68fb      	ldr	r3, [r7, #12]
 8007cf6:	685b      	ldr	r3, [r3, #4]
 8007cf8:	2b00      	cmp	r3, #0
 8007cfa:	d002      	beq.n	8007d02 <HAL_SPI_TransmitReceive+0x1fc>
 8007cfc:	8b7b      	ldrh	r3, [r7, #26]
 8007cfe:	2b01      	cmp	r3, #1
 8007d00:	d16b      	bne.n	8007dda <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007d02:	68fb      	ldr	r3, [r7, #12]
 8007d04:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007d06:	68fb      	ldr	r3, [r7, #12]
 8007d08:	681b      	ldr	r3, [r3, #0]
 8007d0a:	330c      	adds	r3, #12
 8007d0c:	7812      	ldrb	r2, [r2, #0]
 8007d0e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8007d10:	68fb      	ldr	r3, [r7, #12]
 8007d12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d14:	1c5a      	adds	r2, r3, #1
 8007d16:	68fb      	ldr	r3, [r7, #12]
 8007d18:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8007d1a:	68fb      	ldr	r3, [r7, #12]
 8007d1c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007d1e:	b29b      	uxth	r3, r3
 8007d20:	3b01      	subs	r3, #1
 8007d22:	b29a      	uxth	r2, r3
 8007d24:	68fb      	ldr	r3, [r7, #12]
 8007d26:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007d28:	e057      	b.n	8007dda <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007d2a:	68fb      	ldr	r3, [r7, #12]
 8007d2c:	681b      	ldr	r3, [r3, #0]
 8007d2e:	689b      	ldr	r3, [r3, #8]
 8007d30:	f003 0302 	and.w	r3, r3, #2
 8007d34:	2b02      	cmp	r3, #2
 8007d36:	d11c      	bne.n	8007d72 <HAL_SPI_TransmitReceive+0x26c>
 8007d38:	68fb      	ldr	r3, [r7, #12]
 8007d3a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007d3c:	b29b      	uxth	r3, r3
 8007d3e:	2b00      	cmp	r3, #0
 8007d40:	d017      	beq.n	8007d72 <HAL_SPI_TransmitReceive+0x26c>
 8007d42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d44:	2b01      	cmp	r3, #1
 8007d46:	d114      	bne.n	8007d72 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8007d48:	68fb      	ldr	r3, [r7, #12]
 8007d4a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007d4c:	68fb      	ldr	r3, [r7, #12]
 8007d4e:	681b      	ldr	r3, [r3, #0]
 8007d50:	330c      	adds	r3, #12
 8007d52:	7812      	ldrb	r2, [r2, #0]
 8007d54:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8007d56:	68fb      	ldr	r3, [r7, #12]
 8007d58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d5a:	1c5a      	adds	r2, r3, #1
 8007d5c:	68fb      	ldr	r3, [r7, #12]
 8007d5e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8007d60:	68fb      	ldr	r3, [r7, #12]
 8007d62:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007d64:	b29b      	uxth	r3, r3
 8007d66:	3b01      	subs	r3, #1
 8007d68:	b29a      	uxth	r2, r3
 8007d6a:	68fb      	ldr	r3, [r7, #12]
 8007d6c:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007d6e:	2300      	movs	r3, #0
 8007d70:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007d72:	68fb      	ldr	r3, [r7, #12]
 8007d74:	681b      	ldr	r3, [r3, #0]
 8007d76:	689b      	ldr	r3, [r3, #8]
 8007d78:	f003 0301 	and.w	r3, r3, #1
 8007d7c:	2b01      	cmp	r3, #1
 8007d7e:	d119      	bne.n	8007db4 <HAL_SPI_TransmitReceive+0x2ae>
 8007d80:	68fb      	ldr	r3, [r7, #12]
 8007d82:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007d84:	b29b      	uxth	r3, r3
 8007d86:	2b00      	cmp	r3, #0
 8007d88:	d014      	beq.n	8007db4 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8007d8a:	68fb      	ldr	r3, [r7, #12]
 8007d8c:	681b      	ldr	r3, [r3, #0]
 8007d8e:	68da      	ldr	r2, [r3, #12]
 8007d90:	68fb      	ldr	r3, [r7, #12]
 8007d92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d94:	b2d2      	uxtb	r2, r2
 8007d96:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8007d98:	68fb      	ldr	r3, [r7, #12]
 8007d9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d9c:	1c5a      	adds	r2, r3, #1
 8007d9e:	68fb      	ldr	r3, [r7, #12]
 8007da0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8007da2:	68fb      	ldr	r3, [r7, #12]
 8007da4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007da6:	b29b      	uxth	r3, r3
 8007da8:	3b01      	subs	r3, #1
 8007daa:	b29a      	uxth	r2, r3
 8007dac:	68fb      	ldr	r3, [r7, #12]
 8007dae:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007db0:	2301      	movs	r3, #1
 8007db2:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8007db4:	f7fe f93c 	bl	8006030 <HAL_GetTick>
 8007db8:	4602      	mov	r2, r0
 8007dba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007dbc:	1ad3      	subs	r3, r2, r3
 8007dbe:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007dc0:	429a      	cmp	r2, r3
 8007dc2:	d803      	bhi.n	8007dcc <HAL_SPI_TransmitReceive+0x2c6>
 8007dc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007dc6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007dca:	d102      	bne.n	8007dd2 <HAL_SPI_TransmitReceive+0x2cc>
 8007dcc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007dce:	2b00      	cmp	r3, #0
 8007dd0:	d103      	bne.n	8007dda <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8007dd2:	2303      	movs	r3, #3
 8007dd4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8007dd8:	e029      	b.n	8007e2e <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007dda:	68fb      	ldr	r3, [r7, #12]
 8007ddc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007dde:	b29b      	uxth	r3, r3
 8007de0:	2b00      	cmp	r3, #0
 8007de2:	d1a2      	bne.n	8007d2a <HAL_SPI_TransmitReceive+0x224>
 8007de4:	68fb      	ldr	r3, [r7, #12]
 8007de6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007de8:	b29b      	uxth	r3, r3
 8007dea:	2b00      	cmp	r3, #0
 8007dec:	d19d      	bne.n	8007d2a <HAL_SPI_TransmitReceive+0x224>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007dee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007df0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007df2:	68f8      	ldr	r0, [r7, #12]
 8007df4:	f000 f904 	bl	8008000 <SPI_EndRxTxTransaction>
 8007df8:	4603      	mov	r3, r0
 8007dfa:	2b00      	cmp	r3, #0
 8007dfc:	d006      	beq.n	8007e0c <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8007dfe:	2301      	movs	r3, #1
 8007e00:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007e04:	68fb      	ldr	r3, [r7, #12]
 8007e06:	2220      	movs	r2, #32
 8007e08:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8007e0a:	e010      	b.n	8007e2e <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007e0c:	68fb      	ldr	r3, [r7, #12]
 8007e0e:	689b      	ldr	r3, [r3, #8]
 8007e10:	2b00      	cmp	r3, #0
 8007e12:	d10b      	bne.n	8007e2c <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007e14:	2300      	movs	r3, #0
 8007e16:	617b      	str	r3, [r7, #20]
 8007e18:	68fb      	ldr	r3, [r7, #12]
 8007e1a:	681b      	ldr	r3, [r3, #0]
 8007e1c:	68db      	ldr	r3, [r3, #12]
 8007e1e:	617b      	str	r3, [r7, #20]
 8007e20:	68fb      	ldr	r3, [r7, #12]
 8007e22:	681b      	ldr	r3, [r3, #0]
 8007e24:	689b      	ldr	r3, [r3, #8]
 8007e26:	617b      	str	r3, [r7, #20]
 8007e28:	697b      	ldr	r3, [r7, #20]
 8007e2a:	e000      	b.n	8007e2e <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8007e2c:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8007e2e:	68fb      	ldr	r3, [r7, #12]
 8007e30:	2201      	movs	r2, #1
 8007e32:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8007e36:	68fb      	ldr	r3, [r7, #12]
 8007e38:	2200      	movs	r2, #0
 8007e3a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8007e3e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8007e42:	4618      	mov	r0, r3
 8007e44:	3730      	adds	r7, #48	; 0x30
 8007e46:	46bd      	mov	sp, r7
 8007e48:	bd80      	pop	{r7, pc}
	...

08007e4c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007e4c:	b580      	push	{r7, lr}
 8007e4e:	b088      	sub	sp, #32
 8007e50:	af00      	add	r7, sp, #0
 8007e52:	60f8      	str	r0, [r7, #12]
 8007e54:	60b9      	str	r1, [r7, #8]
 8007e56:	603b      	str	r3, [r7, #0]
 8007e58:	4613      	mov	r3, r2
 8007e5a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8007e5c:	f7fe f8e8 	bl	8006030 <HAL_GetTick>
 8007e60:	4602      	mov	r2, r0
 8007e62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e64:	1a9b      	subs	r3, r3, r2
 8007e66:	683a      	ldr	r2, [r7, #0]
 8007e68:	4413      	add	r3, r2
 8007e6a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8007e6c:	f7fe f8e0 	bl	8006030 <HAL_GetTick>
 8007e70:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8007e72:	4b39      	ldr	r3, [pc, #228]	; (8007f58 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8007e74:	681b      	ldr	r3, [r3, #0]
 8007e76:	015b      	lsls	r3, r3, #5
 8007e78:	0d1b      	lsrs	r3, r3, #20
 8007e7a:	69fa      	ldr	r2, [r7, #28]
 8007e7c:	fb02 f303 	mul.w	r3, r2, r3
 8007e80:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007e82:	e054      	b.n	8007f2e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8007e84:	683b      	ldr	r3, [r7, #0]
 8007e86:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007e8a:	d050      	beq.n	8007f2e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007e8c:	f7fe f8d0 	bl	8006030 <HAL_GetTick>
 8007e90:	4602      	mov	r2, r0
 8007e92:	69bb      	ldr	r3, [r7, #24]
 8007e94:	1ad3      	subs	r3, r2, r3
 8007e96:	69fa      	ldr	r2, [r7, #28]
 8007e98:	429a      	cmp	r2, r3
 8007e9a:	d902      	bls.n	8007ea2 <SPI_WaitFlagStateUntilTimeout+0x56>
 8007e9c:	69fb      	ldr	r3, [r7, #28]
 8007e9e:	2b00      	cmp	r3, #0
 8007ea0:	d13d      	bne.n	8007f1e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007ea2:	68fb      	ldr	r3, [r7, #12]
 8007ea4:	681b      	ldr	r3, [r3, #0]
 8007ea6:	685a      	ldr	r2, [r3, #4]
 8007ea8:	68fb      	ldr	r3, [r7, #12]
 8007eaa:	681b      	ldr	r3, [r3, #0]
 8007eac:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8007eb0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007eb2:	68fb      	ldr	r3, [r7, #12]
 8007eb4:	685b      	ldr	r3, [r3, #4]
 8007eb6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007eba:	d111      	bne.n	8007ee0 <SPI_WaitFlagStateUntilTimeout+0x94>
 8007ebc:	68fb      	ldr	r3, [r7, #12]
 8007ebe:	689b      	ldr	r3, [r3, #8]
 8007ec0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007ec4:	d004      	beq.n	8007ed0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007ec6:	68fb      	ldr	r3, [r7, #12]
 8007ec8:	689b      	ldr	r3, [r3, #8]
 8007eca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007ece:	d107      	bne.n	8007ee0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007ed0:	68fb      	ldr	r3, [r7, #12]
 8007ed2:	681b      	ldr	r3, [r3, #0]
 8007ed4:	681a      	ldr	r2, [r3, #0]
 8007ed6:	68fb      	ldr	r3, [r7, #12]
 8007ed8:	681b      	ldr	r3, [r3, #0]
 8007eda:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007ede:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007ee0:	68fb      	ldr	r3, [r7, #12]
 8007ee2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ee4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007ee8:	d10f      	bne.n	8007f0a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8007eea:	68fb      	ldr	r3, [r7, #12]
 8007eec:	681b      	ldr	r3, [r3, #0]
 8007eee:	681a      	ldr	r2, [r3, #0]
 8007ef0:	68fb      	ldr	r3, [r7, #12]
 8007ef2:	681b      	ldr	r3, [r3, #0]
 8007ef4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007ef8:	601a      	str	r2, [r3, #0]
 8007efa:	68fb      	ldr	r3, [r7, #12]
 8007efc:	681b      	ldr	r3, [r3, #0]
 8007efe:	681a      	ldr	r2, [r3, #0]
 8007f00:	68fb      	ldr	r3, [r7, #12]
 8007f02:	681b      	ldr	r3, [r3, #0]
 8007f04:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007f08:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007f0a:	68fb      	ldr	r3, [r7, #12]
 8007f0c:	2201      	movs	r2, #1
 8007f0e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007f12:	68fb      	ldr	r3, [r7, #12]
 8007f14:	2200      	movs	r2, #0
 8007f16:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8007f1a:	2303      	movs	r3, #3
 8007f1c:	e017      	b.n	8007f4e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8007f1e:	697b      	ldr	r3, [r7, #20]
 8007f20:	2b00      	cmp	r3, #0
 8007f22:	d101      	bne.n	8007f28 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8007f24:	2300      	movs	r3, #0
 8007f26:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8007f28:	697b      	ldr	r3, [r7, #20]
 8007f2a:	3b01      	subs	r3, #1
 8007f2c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007f2e:	68fb      	ldr	r3, [r7, #12]
 8007f30:	681b      	ldr	r3, [r3, #0]
 8007f32:	689a      	ldr	r2, [r3, #8]
 8007f34:	68bb      	ldr	r3, [r7, #8]
 8007f36:	4013      	ands	r3, r2
 8007f38:	68ba      	ldr	r2, [r7, #8]
 8007f3a:	429a      	cmp	r2, r3
 8007f3c:	bf0c      	ite	eq
 8007f3e:	2301      	moveq	r3, #1
 8007f40:	2300      	movne	r3, #0
 8007f42:	b2db      	uxtb	r3, r3
 8007f44:	461a      	mov	r2, r3
 8007f46:	79fb      	ldrb	r3, [r7, #7]
 8007f48:	429a      	cmp	r2, r3
 8007f4a:	d19b      	bne.n	8007e84 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8007f4c:	2300      	movs	r3, #0
}
 8007f4e:	4618      	mov	r0, r3
 8007f50:	3720      	adds	r7, #32
 8007f52:	46bd      	mov	sp, r7
 8007f54:	bd80      	pop	{r7, pc}
 8007f56:	bf00      	nop
 8007f58:	20000020 	.word	0x20000020

08007f5c <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8007f5c:	b580      	push	{r7, lr}
 8007f5e:	b086      	sub	sp, #24
 8007f60:	af02      	add	r7, sp, #8
 8007f62:	60f8      	str	r0, [r7, #12]
 8007f64:	60b9      	str	r1, [r7, #8]
 8007f66:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007f68:	68fb      	ldr	r3, [r7, #12]
 8007f6a:	685b      	ldr	r3, [r3, #4]
 8007f6c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007f70:	d111      	bne.n	8007f96 <SPI_EndRxTransaction+0x3a>
 8007f72:	68fb      	ldr	r3, [r7, #12]
 8007f74:	689b      	ldr	r3, [r3, #8]
 8007f76:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007f7a:	d004      	beq.n	8007f86 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007f7c:	68fb      	ldr	r3, [r7, #12]
 8007f7e:	689b      	ldr	r3, [r3, #8]
 8007f80:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007f84:	d107      	bne.n	8007f96 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8007f86:	68fb      	ldr	r3, [r7, #12]
 8007f88:	681b      	ldr	r3, [r3, #0]
 8007f8a:	681a      	ldr	r2, [r3, #0]
 8007f8c:	68fb      	ldr	r3, [r7, #12]
 8007f8e:	681b      	ldr	r3, [r3, #0]
 8007f90:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007f94:	601a      	str	r2, [r3, #0]
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 8007f96:	68fb      	ldr	r3, [r7, #12]
 8007f98:	685b      	ldr	r3, [r3, #4]
 8007f9a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007f9e:	d117      	bne.n	8007fd0 <SPI_EndRxTransaction+0x74>
 8007fa0:	68fb      	ldr	r3, [r7, #12]
 8007fa2:	689b      	ldr	r3, [r3, #8]
 8007fa4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007fa8:	d112      	bne.n	8007fd0 <SPI_EndRxTransaction+0x74>
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	9300      	str	r3, [sp, #0]
 8007fae:	68bb      	ldr	r3, [r7, #8]
 8007fb0:	2200      	movs	r2, #0
 8007fb2:	2101      	movs	r1, #1
 8007fb4:	68f8      	ldr	r0, [r7, #12]
 8007fb6:	f7ff ff49 	bl	8007e4c <SPI_WaitFlagStateUntilTimeout>
 8007fba:	4603      	mov	r3, r0
 8007fbc:	2b00      	cmp	r3, #0
 8007fbe:	d01a      	beq.n	8007ff6 <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007fc0:	68fb      	ldr	r3, [r7, #12]
 8007fc2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007fc4:	f043 0220 	orr.w	r2, r3, #32
 8007fc8:	68fb      	ldr	r3, [r7, #12]
 8007fca:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8007fcc:	2303      	movs	r3, #3
 8007fce:	e013      	b.n	8007ff8 <SPI_EndRxTransaction+0x9c>
    }
  }
  else
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	9300      	str	r3, [sp, #0]
 8007fd4:	68bb      	ldr	r3, [r7, #8]
 8007fd6:	2200      	movs	r2, #0
 8007fd8:	2180      	movs	r1, #128	; 0x80
 8007fda:	68f8      	ldr	r0, [r7, #12]
 8007fdc:	f7ff ff36 	bl	8007e4c <SPI_WaitFlagStateUntilTimeout>
 8007fe0:	4603      	mov	r3, r0
 8007fe2:	2b00      	cmp	r3, #0
 8007fe4:	d007      	beq.n	8007ff6 <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007fe6:	68fb      	ldr	r3, [r7, #12]
 8007fe8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007fea:	f043 0220 	orr.w	r2, r3, #32
 8007fee:	68fb      	ldr	r3, [r7, #12]
 8007ff0:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8007ff2:	2303      	movs	r3, #3
 8007ff4:	e000      	b.n	8007ff8 <SPI_EndRxTransaction+0x9c>
    }
  }
  return HAL_OK;
 8007ff6:	2300      	movs	r3, #0
}
 8007ff8:	4618      	mov	r0, r3
 8007ffa:	3710      	adds	r7, #16
 8007ffc:	46bd      	mov	sp, r7
 8007ffe:	bd80      	pop	{r7, pc}

08008000 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8008000:	b580      	push	{r7, lr}
 8008002:	b086      	sub	sp, #24
 8008004:	af02      	add	r7, sp, #8
 8008006:	60f8      	str	r0, [r7, #12]
 8008008:	60b9      	str	r1, [r7, #8]
 800800a:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	9300      	str	r3, [sp, #0]
 8008010:	68bb      	ldr	r3, [r7, #8]
 8008012:	2200      	movs	r2, #0
 8008014:	2180      	movs	r1, #128	; 0x80
 8008016:	68f8      	ldr	r0, [r7, #12]
 8008018:	f7ff ff18 	bl	8007e4c <SPI_WaitFlagStateUntilTimeout>
 800801c:	4603      	mov	r3, r0
 800801e:	2b00      	cmp	r3, #0
 8008020:	d007      	beq.n	8008032 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008022:	68fb      	ldr	r3, [r7, #12]
 8008024:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008026:	f043 0220 	orr.w	r2, r3, #32
 800802a:	68fb      	ldr	r3, [r7, #12]
 800802c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 800802e:	2303      	movs	r3, #3
 8008030:	e000      	b.n	8008034 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8008032:	2300      	movs	r3, #0
}
 8008034:	4618      	mov	r0, r3
 8008036:	3710      	adds	r7, #16
 8008038:	46bd      	mov	sp, r7
 800803a:	bd80      	pop	{r7, pc}

0800803c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800803c:	b580      	push	{r7, lr}
 800803e:	b082      	sub	sp, #8
 8008040:	af00      	add	r7, sp, #0
 8008042:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	2b00      	cmp	r3, #0
 8008048:	d101      	bne.n	800804e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800804a:	2301      	movs	r3, #1
 800804c:	e041      	b.n	80080d2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008054:	b2db      	uxtb	r3, r3
 8008056:	2b00      	cmp	r3, #0
 8008058:	d106      	bne.n	8008068 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	2200      	movs	r2, #0
 800805e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008062:	6878      	ldr	r0, [r7, #4]
 8008064:	f7fc fe6a 	bl	8004d3c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	2202      	movs	r2, #2
 800806c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	681a      	ldr	r2, [r3, #0]
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	3304      	adds	r3, #4
 8008078:	4619      	mov	r1, r3
 800807a:	4610      	mov	r0, r2
 800807c:	f001 f8ee 	bl	800925c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	2201      	movs	r2, #1
 8008084:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	2201      	movs	r2, #1
 800808c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	2201      	movs	r2, #1
 8008094:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	2201      	movs	r2, #1
 800809c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	2201      	movs	r2, #1
 80080a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	2201      	movs	r2, #1
 80080ac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	2201      	movs	r2, #1
 80080b4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	2201      	movs	r2, #1
 80080bc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	2201      	movs	r2, #1
 80080c4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	2201      	movs	r2, #1
 80080cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80080d0:	2300      	movs	r3, #0
}
 80080d2:	4618      	mov	r0, r3
 80080d4:	3708      	adds	r7, #8
 80080d6:	46bd      	mov	sp, r7
 80080d8:	bd80      	pop	{r7, pc}
	...

080080dc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80080dc:	b480      	push	{r7}
 80080de:	b085      	sub	sp, #20
 80080e0:	af00      	add	r7, sp, #0
 80080e2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80080ea:	b2db      	uxtb	r3, r3
 80080ec:	2b01      	cmp	r3, #1
 80080ee:	d001      	beq.n	80080f4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80080f0:	2301      	movs	r3, #1
 80080f2:	e03a      	b.n	800816a <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	2202      	movs	r2, #2
 80080f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	681b      	ldr	r3, [r3, #0]
 8008100:	68da      	ldr	r2, [r3, #12]
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	681b      	ldr	r3, [r3, #0]
 8008106:	f042 0201 	orr.w	r2, r2, #1
 800810a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	681b      	ldr	r3, [r3, #0]
 8008110:	4a18      	ldr	r2, [pc, #96]	; (8008174 <HAL_TIM_Base_Start_IT+0x98>)
 8008112:	4293      	cmp	r3, r2
 8008114:	d00e      	beq.n	8008134 <HAL_TIM_Base_Start_IT+0x58>
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	681b      	ldr	r3, [r3, #0]
 800811a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800811e:	d009      	beq.n	8008134 <HAL_TIM_Base_Start_IT+0x58>
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	681b      	ldr	r3, [r3, #0]
 8008124:	4a14      	ldr	r2, [pc, #80]	; (8008178 <HAL_TIM_Base_Start_IT+0x9c>)
 8008126:	4293      	cmp	r3, r2
 8008128:	d004      	beq.n	8008134 <HAL_TIM_Base_Start_IT+0x58>
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	681b      	ldr	r3, [r3, #0]
 800812e:	4a13      	ldr	r2, [pc, #76]	; (800817c <HAL_TIM_Base_Start_IT+0xa0>)
 8008130:	4293      	cmp	r3, r2
 8008132:	d111      	bne.n	8008158 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	681b      	ldr	r3, [r3, #0]
 8008138:	689b      	ldr	r3, [r3, #8]
 800813a:	f003 0307 	and.w	r3, r3, #7
 800813e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008140:	68fb      	ldr	r3, [r7, #12]
 8008142:	2b06      	cmp	r3, #6
 8008144:	d010      	beq.n	8008168 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	681b      	ldr	r3, [r3, #0]
 800814a:	681a      	ldr	r2, [r3, #0]
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	681b      	ldr	r3, [r3, #0]
 8008150:	f042 0201 	orr.w	r2, r2, #1
 8008154:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008156:	e007      	b.n	8008168 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	681b      	ldr	r3, [r3, #0]
 800815c:	681a      	ldr	r2, [r3, #0]
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	681b      	ldr	r3, [r3, #0]
 8008162:	f042 0201 	orr.w	r2, r2, #1
 8008166:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008168:	2300      	movs	r3, #0
}
 800816a:	4618      	mov	r0, r3
 800816c:	3714      	adds	r7, #20
 800816e:	46bd      	mov	sp, r7
 8008170:	bc80      	pop	{r7}
 8008172:	4770      	bx	lr
 8008174:	40012c00 	.word	0x40012c00
 8008178:	40000400 	.word	0x40000400
 800817c:	40000800 	.word	0x40000800

08008180 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8008180:	b580      	push	{r7, lr}
 8008182:	b082      	sub	sp, #8
 8008184:	af00      	add	r7, sp, #0
 8008186:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	2b00      	cmp	r3, #0
 800818c:	d101      	bne.n	8008192 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 800818e:	2301      	movs	r3, #1
 8008190:	e041      	b.n	8008216 <HAL_TIM_OC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008198:	b2db      	uxtb	r3, r3
 800819a:	2b00      	cmp	r3, #0
 800819c:	d106      	bne.n	80081ac <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	2200      	movs	r2, #0
 80081a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 80081a6:	6878      	ldr	r0, [r7, #4]
 80081a8:	f000 f839 	bl	800821e <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	2202      	movs	r2, #2
 80081b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	681a      	ldr	r2, [r3, #0]
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	3304      	adds	r3, #4
 80081bc:	4619      	mov	r1, r3
 80081be:	4610      	mov	r0, r2
 80081c0:	f001 f84c 	bl	800925c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	2201      	movs	r2, #1
 80081c8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	2201      	movs	r2, #1
 80081d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	2201      	movs	r2, #1
 80081d8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	2201      	movs	r2, #1
 80081e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	2201      	movs	r2, #1
 80081e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	2201      	movs	r2, #1
 80081f0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	2201      	movs	r2, #1
 80081f8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	2201      	movs	r2, #1
 8008200:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	2201      	movs	r2, #1
 8008208:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	2201      	movs	r2, #1
 8008210:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008214:	2300      	movs	r3, #0
}
 8008216:	4618      	mov	r0, r3
 8008218:	3708      	adds	r7, #8
 800821a:	46bd      	mov	sp, r7
 800821c:	bd80      	pop	{r7, pc}

0800821e <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 800821e:	b480      	push	{r7}
 8008220:	b083      	sub	sp, #12
 8008222:	af00      	add	r7, sp, #0
 8008224:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8008226:	bf00      	nop
 8008228:	370c      	adds	r7, #12
 800822a:	46bd      	mov	sp, r7
 800822c:	bc80      	pop	{r7}
 800822e:	4770      	bx	lr

08008230 <HAL_TIM_OC_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008230:	b580      	push	{r7, lr}
 8008232:	b084      	sub	sp, #16
 8008234:	af00      	add	r7, sp, #0
 8008236:	6078      	str	r0, [r7, #4]
 8008238:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800823a:	683b      	ldr	r3, [r7, #0]
 800823c:	2b00      	cmp	r3, #0
 800823e:	d109      	bne.n	8008254 <HAL_TIM_OC_Start+0x24>
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008246:	b2db      	uxtb	r3, r3
 8008248:	2b01      	cmp	r3, #1
 800824a:	bf14      	ite	ne
 800824c:	2301      	movne	r3, #1
 800824e:	2300      	moveq	r3, #0
 8008250:	b2db      	uxtb	r3, r3
 8008252:	e022      	b.n	800829a <HAL_TIM_OC_Start+0x6a>
 8008254:	683b      	ldr	r3, [r7, #0]
 8008256:	2b04      	cmp	r3, #4
 8008258:	d109      	bne.n	800826e <HAL_TIM_OC_Start+0x3e>
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8008260:	b2db      	uxtb	r3, r3
 8008262:	2b01      	cmp	r3, #1
 8008264:	bf14      	ite	ne
 8008266:	2301      	movne	r3, #1
 8008268:	2300      	moveq	r3, #0
 800826a:	b2db      	uxtb	r3, r3
 800826c:	e015      	b.n	800829a <HAL_TIM_OC_Start+0x6a>
 800826e:	683b      	ldr	r3, [r7, #0]
 8008270:	2b08      	cmp	r3, #8
 8008272:	d109      	bne.n	8008288 <HAL_TIM_OC_Start+0x58>
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800827a:	b2db      	uxtb	r3, r3
 800827c:	2b01      	cmp	r3, #1
 800827e:	bf14      	ite	ne
 8008280:	2301      	movne	r3, #1
 8008282:	2300      	moveq	r3, #0
 8008284:	b2db      	uxtb	r3, r3
 8008286:	e008      	b.n	800829a <HAL_TIM_OC_Start+0x6a>
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800828e:	b2db      	uxtb	r3, r3
 8008290:	2b01      	cmp	r3, #1
 8008292:	bf14      	ite	ne
 8008294:	2301      	movne	r3, #1
 8008296:	2300      	moveq	r3, #0
 8008298:	b2db      	uxtb	r3, r3
 800829a:	2b00      	cmp	r3, #0
 800829c:	d001      	beq.n	80082a2 <HAL_TIM_OC_Start+0x72>
  {
    return HAL_ERROR;
 800829e:	2301      	movs	r3, #1
 80082a0:	e05e      	b.n	8008360 <HAL_TIM_OC_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80082a2:	683b      	ldr	r3, [r7, #0]
 80082a4:	2b00      	cmp	r3, #0
 80082a6:	d104      	bne.n	80082b2 <HAL_TIM_OC_Start+0x82>
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	2202      	movs	r2, #2
 80082ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80082b0:	e013      	b.n	80082da <HAL_TIM_OC_Start+0xaa>
 80082b2:	683b      	ldr	r3, [r7, #0]
 80082b4:	2b04      	cmp	r3, #4
 80082b6:	d104      	bne.n	80082c2 <HAL_TIM_OC_Start+0x92>
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	2202      	movs	r2, #2
 80082bc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80082c0:	e00b      	b.n	80082da <HAL_TIM_OC_Start+0xaa>
 80082c2:	683b      	ldr	r3, [r7, #0]
 80082c4:	2b08      	cmp	r3, #8
 80082c6:	d104      	bne.n	80082d2 <HAL_TIM_OC_Start+0xa2>
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	2202      	movs	r2, #2
 80082cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80082d0:	e003      	b.n	80082da <HAL_TIM_OC_Start+0xaa>
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	2202      	movs	r2, #2
 80082d6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Output compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	681b      	ldr	r3, [r3, #0]
 80082de:	2201      	movs	r2, #1
 80082e0:	6839      	ldr	r1, [r7, #0]
 80082e2:	4618      	mov	r0, r3
 80082e4:	f001 fbd5 	bl	8009a92 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	681b      	ldr	r3, [r3, #0]
 80082ec:	4a1e      	ldr	r2, [pc, #120]	; (8008368 <HAL_TIM_OC_Start+0x138>)
 80082ee:	4293      	cmp	r3, r2
 80082f0:	d107      	bne.n	8008302 <HAL_TIM_OC_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	681b      	ldr	r3, [r3, #0]
 80082f6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	681b      	ldr	r3, [r3, #0]
 80082fc:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008300:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	681b      	ldr	r3, [r3, #0]
 8008306:	4a18      	ldr	r2, [pc, #96]	; (8008368 <HAL_TIM_OC_Start+0x138>)
 8008308:	4293      	cmp	r3, r2
 800830a:	d00e      	beq.n	800832a <HAL_TIM_OC_Start+0xfa>
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	681b      	ldr	r3, [r3, #0]
 8008310:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008314:	d009      	beq.n	800832a <HAL_TIM_OC_Start+0xfa>
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	681b      	ldr	r3, [r3, #0]
 800831a:	4a14      	ldr	r2, [pc, #80]	; (800836c <HAL_TIM_OC_Start+0x13c>)
 800831c:	4293      	cmp	r3, r2
 800831e:	d004      	beq.n	800832a <HAL_TIM_OC_Start+0xfa>
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	681b      	ldr	r3, [r3, #0]
 8008324:	4a12      	ldr	r2, [pc, #72]	; (8008370 <HAL_TIM_OC_Start+0x140>)
 8008326:	4293      	cmp	r3, r2
 8008328:	d111      	bne.n	800834e <HAL_TIM_OC_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	681b      	ldr	r3, [r3, #0]
 800832e:	689b      	ldr	r3, [r3, #8]
 8008330:	f003 0307 	and.w	r3, r3, #7
 8008334:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008336:	68fb      	ldr	r3, [r7, #12]
 8008338:	2b06      	cmp	r3, #6
 800833a:	d010      	beq.n	800835e <HAL_TIM_OC_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	681b      	ldr	r3, [r3, #0]
 8008340:	681a      	ldr	r2, [r3, #0]
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	681b      	ldr	r3, [r3, #0]
 8008346:	f042 0201 	orr.w	r2, r2, #1
 800834a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800834c:	e007      	b.n	800835e <HAL_TIM_OC_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	681b      	ldr	r3, [r3, #0]
 8008352:	681a      	ldr	r2, [r3, #0]
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	681b      	ldr	r3, [r3, #0]
 8008358:	f042 0201 	orr.w	r2, r2, #1
 800835c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800835e:	2300      	movs	r3, #0
}
 8008360:	4618      	mov	r0, r3
 8008362:	3710      	adds	r7, #16
 8008364:	46bd      	mov	sp, r7
 8008366:	bd80      	pop	{r7, pc}
 8008368:	40012c00 	.word	0x40012c00
 800836c:	40000400 	.word	0x40000400
 8008370:	40000800 	.word	0x40000800

08008374 <HAL_TIM_OC_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008374:	b580      	push	{r7, lr}
 8008376:	b082      	sub	sp, #8
 8008378:	af00      	add	r7, sp, #0
 800837a:	6078      	str	r0, [r7, #4]
 800837c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Output compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	681b      	ldr	r3, [r3, #0]
 8008382:	2200      	movs	r2, #0
 8008384:	6839      	ldr	r1, [r7, #0]
 8008386:	4618      	mov	r0, r3
 8008388:	f001 fb83 	bl	8009a92 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	681b      	ldr	r3, [r3, #0]
 8008390:	4a29      	ldr	r2, [pc, #164]	; (8008438 <HAL_TIM_OC_Stop+0xc4>)
 8008392:	4293      	cmp	r3, r2
 8008394:	d117      	bne.n	80083c6 <HAL_TIM_OC_Stop+0x52>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	681b      	ldr	r3, [r3, #0]
 800839a:	6a1a      	ldr	r2, [r3, #32]
 800839c:	f241 1311 	movw	r3, #4369	; 0x1111
 80083a0:	4013      	ands	r3, r2
 80083a2:	2b00      	cmp	r3, #0
 80083a4:	d10f      	bne.n	80083c6 <HAL_TIM_OC_Stop+0x52>
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	681b      	ldr	r3, [r3, #0]
 80083aa:	6a1a      	ldr	r2, [r3, #32]
 80083ac:	f240 4344 	movw	r3, #1092	; 0x444
 80083b0:	4013      	ands	r3, r2
 80083b2:	2b00      	cmp	r3, #0
 80083b4:	d107      	bne.n	80083c6 <HAL_TIM_OC_Stop+0x52>
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	681b      	ldr	r3, [r3, #0]
 80083ba:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	681b      	ldr	r3, [r3, #0]
 80083c0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80083c4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	681b      	ldr	r3, [r3, #0]
 80083ca:	6a1a      	ldr	r2, [r3, #32]
 80083cc:	f241 1311 	movw	r3, #4369	; 0x1111
 80083d0:	4013      	ands	r3, r2
 80083d2:	2b00      	cmp	r3, #0
 80083d4:	d10f      	bne.n	80083f6 <HAL_TIM_OC_Stop+0x82>
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	681b      	ldr	r3, [r3, #0]
 80083da:	6a1a      	ldr	r2, [r3, #32]
 80083dc:	f240 4344 	movw	r3, #1092	; 0x444
 80083e0:	4013      	ands	r3, r2
 80083e2:	2b00      	cmp	r3, #0
 80083e4:	d107      	bne.n	80083f6 <HAL_TIM_OC_Stop+0x82>
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	681b      	ldr	r3, [r3, #0]
 80083ea:	681a      	ldr	r2, [r3, #0]
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	681b      	ldr	r3, [r3, #0]
 80083f0:	f022 0201 	bic.w	r2, r2, #1
 80083f4:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80083f6:	683b      	ldr	r3, [r7, #0]
 80083f8:	2b00      	cmp	r3, #0
 80083fa:	d104      	bne.n	8008406 <HAL_TIM_OC_Stop+0x92>
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	2201      	movs	r2, #1
 8008400:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008404:	e013      	b.n	800842e <HAL_TIM_OC_Stop+0xba>
 8008406:	683b      	ldr	r3, [r7, #0]
 8008408:	2b04      	cmp	r3, #4
 800840a:	d104      	bne.n	8008416 <HAL_TIM_OC_Stop+0xa2>
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	2201      	movs	r2, #1
 8008410:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008414:	e00b      	b.n	800842e <HAL_TIM_OC_Stop+0xba>
 8008416:	683b      	ldr	r3, [r7, #0]
 8008418:	2b08      	cmp	r3, #8
 800841a:	d104      	bne.n	8008426 <HAL_TIM_OC_Stop+0xb2>
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	2201      	movs	r2, #1
 8008420:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008424:	e003      	b.n	800842e <HAL_TIM_OC_Stop+0xba>
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	2201      	movs	r2, #1
 800842a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Return function status */
  return HAL_OK;
 800842e:	2300      	movs	r3, #0
}
 8008430:	4618      	mov	r0, r3
 8008432:	3708      	adds	r7, #8
 8008434:	46bd      	mov	sp, r7
 8008436:	bd80      	pop	{r7, pc}
 8008438:	40012c00 	.word	0x40012c00

0800843c <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 800843c:	b580      	push	{r7, lr}
 800843e:	b082      	sub	sp, #8
 8008440:	af00      	add	r7, sp, #0
 8008442:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	2b00      	cmp	r3, #0
 8008448:	d101      	bne.n	800844e <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 800844a:	2301      	movs	r3, #1
 800844c:	e041      	b.n	80084d2 <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008454:	b2db      	uxtb	r3, r3
 8008456:	2b00      	cmp	r3, #0
 8008458:	d106      	bne.n	8008468 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	2200      	movs	r2, #0
 800845e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8008462:	6878      	ldr	r0, [r7, #4]
 8008464:	f000 f839 	bl	80084da <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	2202      	movs	r2, #2
 800846c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	681a      	ldr	r2, [r3, #0]
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	3304      	adds	r3, #4
 8008478:	4619      	mov	r1, r3
 800847a:	4610      	mov	r0, r2
 800847c:	f000 feee 	bl	800925c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	2201      	movs	r2, #1
 8008484:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	2201      	movs	r2, #1
 800848c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	2201      	movs	r2, #1
 8008494:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	2201      	movs	r2, #1
 800849c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	2201      	movs	r2, #1
 80084a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	2201      	movs	r2, #1
 80084ac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	2201      	movs	r2, #1
 80084b4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	2201      	movs	r2, #1
 80084bc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	2201      	movs	r2, #1
 80084c4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	2201      	movs	r2, #1
 80084cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80084d0:	2300      	movs	r3, #0
}
 80084d2:	4618      	mov	r0, r3
 80084d4:	3708      	adds	r7, #8
 80084d6:	46bd      	mov	sp, r7
 80084d8:	bd80      	pop	{r7, pc}

080084da <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 80084da:	b480      	push	{r7}
 80084dc:	b083      	sub	sp, #12
 80084de:	af00      	add	r7, sp, #0
 80084e0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 80084e2:	bf00      	nop
 80084e4:	370c      	adds	r7, #12
 80084e6:	46bd      	mov	sp, r7
 80084e8:	bc80      	pop	{r7}
 80084ea:	4770      	bx	lr

080084ec <HAL_TIM_IC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from TIM peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, uint32_t *pData, uint16_t Length)
{
 80084ec:	b580      	push	{r7, lr}
 80084ee:	b086      	sub	sp, #24
 80084f0:	af00      	add	r7, sp, #0
 80084f2:	60f8      	str	r0, [r7, #12]
 80084f4:	60b9      	str	r1, [r7, #8]
 80084f6:	607a      	str	r2, [r7, #4]
 80084f8:	807b      	strh	r3, [r7, #2]
  uint32_t tmpsmcr;
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 80084fa:	68bb      	ldr	r3, [r7, #8]
 80084fc:	2b00      	cmp	r3, #0
 80084fe:	d104      	bne.n	800850a <HAL_TIM_IC_Start_DMA+0x1e>
 8008500:	68fb      	ldr	r3, [r7, #12]
 8008502:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008506:	b2db      	uxtb	r3, r3
 8008508:	e013      	b.n	8008532 <HAL_TIM_IC_Start_DMA+0x46>
 800850a:	68bb      	ldr	r3, [r7, #8]
 800850c:	2b04      	cmp	r3, #4
 800850e:	d104      	bne.n	800851a <HAL_TIM_IC_Start_DMA+0x2e>
 8008510:	68fb      	ldr	r3, [r7, #12]
 8008512:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8008516:	b2db      	uxtb	r3, r3
 8008518:	e00b      	b.n	8008532 <HAL_TIM_IC_Start_DMA+0x46>
 800851a:	68bb      	ldr	r3, [r7, #8]
 800851c:	2b08      	cmp	r3, #8
 800851e:	d104      	bne.n	800852a <HAL_TIM_IC_Start_DMA+0x3e>
 8008520:	68fb      	ldr	r3, [r7, #12]
 8008522:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008526:	b2db      	uxtb	r3, r3
 8008528:	e003      	b.n	8008532 <HAL_TIM_IC_Start_DMA+0x46>
 800852a:	68fb      	ldr	r3, [r7, #12]
 800852c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008530:	b2db      	uxtb	r3, r3
 8008532:	75fb      	strb	r3, [r7, #23]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8008534:	68bb      	ldr	r3, [r7, #8]
 8008536:	2b00      	cmp	r3, #0
 8008538:	d104      	bne.n	8008544 <HAL_TIM_IC_Start_DMA+0x58>
 800853a:	68fb      	ldr	r3, [r7, #12]
 800853c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8008540:	b2db      	uxtb	r3, r3
 8008542:	e013      	b.n	800856c <HAL_TIM_IC_Start_DMA+0x80>
 8008544:	68bb      	ldr	r3, [r7, #8]
 8008546:	2b04      	cmp	r3, #4
 8008548:	d104      	bne.n	8008554 <HAL_TIM_IC_Start_DMA+0x68>
 800854a:	68fb      	ldr	r3, [r7, #12]
 800854c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8008550:	b2db      	uxtb	r3, r3
 8008552:	e00b      	b.n	800856c <HAL_TIM_IC_Start_DMA+0x80>
 8008554:	68bb      	ldr	r3, [r7, #8]
 8008556:	2b08      	cmp	r3, #8
 8008558:	d104      	bne.n	8008564 <HAL_TIM_IC_Start_DMA+0x78>
 800855a:	68fb      	ldr	r3, [r7, #12]
 800855c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008560:	b2db      	uxtb	r3, r3
 8008562:	e003      	b.n	800856c <HAL_TIM_IC_Start_DMA+0x80>
 8008564:	68fb      	ldr	r3, [r7, #12]
 8008566:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800856a:	b2db      	uxtb	r3, r3
 800856c:	75bb      	strb	r3, [r7, #22]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
  assert_param(IS_TIM_DMA_CC_INSTANCE(htim->Instance));

  /* Set the TIM channel state */
  if ((channel_state == HAL_TIM_CHANNEL_STATE_BUSY)
 800856e:	7dfb      	ldrb	r3, [r7, #23]
 8008570:	2b02      	cmp	r3, #2
 8008572:	d002      	beq.n	800857a <HAL_TIM_IC_Start_DMA+0x8e>
      || (complementary_channel_state == HAL_TIM_CHANNEL_STATE_BUSY))
 8008574:	7dbb      	ldrb	r3, [r7, #22]
 8008576:	2b02      	cmp	r3, #2
 8008578:	d101      	bne.n	800857e <HAL_TIM_IC_Start_DMA+0x92>
  {
    return HAL_BUSY;
 800857a:	2302      	movs	r3, #2
 800857c:	e130      	b.n	80087e0 <HAL_TIM_IC_Start_DMA+0x2f4>
  }
  else if ((channel_state == HAL_TIM_CHANNEL_STATE_READY)
 800857e:	7dfb      	ldrb	r3, [r7, #23]
 8008580:	2b01      	cmp	r3, #1
 8008582:	d143      	bne.n	800860c <HAL_TIM_IC_Start_DMA+0x120>
           && (complementary_channel_state == HAL_TIM_CHANNEL_STATE_READY))
 8008584:	7dbb      	ldrb	r3, [r7, #22]
 8008586:	2b01      	cmp	r3, #1
 8008588:	d140      	bne.n	800860c <HAL_TIM_IC_Start_DMA+0x120>
  {
    if ((pData == NULL) && (Length > 0U))
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	2b00      	cmp	r3, #0
 800858e:	d104      	bne.n	800859a <HAL_TIM_IC_Start_DMA+0xae>
 8008590:	887b      	ldrh	r3, [r7, #2]
 8008592:	2b00      	cmp	r3, #0
 8008594:	d001      	beq.n	800859a <HAL_TIM_IC_Start_DMA+0xae>
    {
      return HAL_ERROR;
 8008596:	2301      	movs	r3, #1
 8008598:	e122      	b.n	80087e0 <HAL_TIM_IC_Start_DMA+0x2f4>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800859a:	68bb      	ldr	r3, [r7, #8]
 800859c:	2b00      	cmp	r3, #0
 800859e:	d104      	bne.n	80085aa <HAL_TIM_IC_Start_DMA+0xbe>
 80085a0:	68fb      	ldr	r3, [r7, #12]
 80085a2:	2202      	movs	r2, #2
 80085a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80085a8:	e013      	b.n	80085d2 <HAL_TIM_IC_Start_DMA+0xe6>
 80085aa:	68bb      	ldr	r3, [r7, #8]
 80085ac:	2b04      	cmp	r3, #4
 80085ae:	d104      	bne.n	80085ba <HAL_TIM_IC_Start_DMA+0xce>
 80085b0:	68fb      	ldr	r3, [r7, #12]
 80085b2:	2202      	movs	r2, #2
 80085b4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80085b8:	e00b      	b.n	80085d2 <HAL_TIM_IC_Start_DMA+0xe6>
 80085ba:	68bb      	ldr	r3, [r7, #8]
 80085bc:	2b08      	cmp	r3, #8
 80085be:	d104      	bne.n	80085ca <HAL_TIM_IC_Start_DMA+0xde>
 80085c0:	68fb      	ldr	r3, [r7, #12]
 80085c2:	2202      	movs	r2, #2
 80085c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80085c8:	e003      	b.n	80085d2 <HAL_TIM_IC_Start_DMA+0xe6>
 80085ca:	68fb      	ldr	r3, [r7, #12]
 80085cc:	2202      	movs	r2, #2
 80085ce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80085d2:	68bb      	ldr	r3, [r7, #8]
 80085d4:	2b00      	cmp	r3, #0
 80085d6:	d104      	bne.n	80085e2 <HAL_TIM_IC_Start_DMA+0xf6>
 80085d8:	68fb      	ldr	r3, [r7, #12]
 80085da:	2202      	movs	r2, #2
 80085dc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    if ((pData == NULL) && (Length > 0U))
 80085e0:	e016      	b.n	8008610 <HAL_TIM_IC_Start_DMA+0x124>
      TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80085e2:	68bb      	ldr	r3, [r7, #8]
 80085e4:	2b04      	cmp	r3, #4
 80085e6:	d104      	bne.n	80085f2 <HAL_TIM_IC_Start_DMA+0x106>
 80085e8:	68fb      	ldr	r3, [r7, #12]
 80085ea:	2202      	movs	r2, #2
 80085ec:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    if ((pData == NULL) && (Length > 0U))
 80085f0:	e00e      	b.n	8008610 <HAL_TIM_IC_Start_DMA+0x124>
      TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80085f2:	68bb      	ldr	r3, [r7, #8]
 80085f4:	2b08      	cmp	r3, #8
 80085f6:	d104      	bne.n	8008602 <HAL_TIM_IC_Start_DMA+0x116>
 80085f8:	68fb      	ldr	r3, [r7, #12]
 80085fa:	2202      	movs	r2, #2
 80085fc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    if ((pData == NULL) && (Length > 0U))
 8008600:	e006      	b.n	8008610 <HAL_TIM_IC_Start_DMA+0x124>
      TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8008602:	68fb      	ldr	r3, [r7, #12]
 8008604:	2202      	movs	r2, #2
 8008606:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    if ((pData == NULL) && (Length > 0U))
 800860a:	e001      	b.n	8008610 <HAL_TIM_IC_Start_DMA+0x124>
    }
  }
  else
  {
    return HAL_ERROR;
 800860c:	2301      	movs	r3, #1
 800860e:	e0e7      	b.n	80087e0 <HAL_TIM_IC_Start_DMA+0x2f4>
  }

  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8008610:	68fb      	ldr	r3, [r7, #12]
 8008612:	681b      	ldr	r3, [r3, #0]
 8008614:	2201      	movs	r2, #1
 8008616:	68b9      	ldr	r1, [r7, #8]
 8008618:	4618      	mov	r0, r3
 800861a:	f001 fa3a 	bl	8009a92 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800861e:	68fb      	ldr	r3, [r7, #12]
 8008620:	681b      	ldr	r3, [r3, #0]
 8008622:	4a71      	ldr	r2, [pc, #452]	; (80087e8 <HAL_TIM_IC_Start_DMA+0x2fc>)
 8008624:	4293      	cmp	r3, r2
 8008626:	d00e      	beq.n	8008646 <HAL_TIM_IC_Start_DMA+0x15a>
 8008628:	68fb      	ldr	r3, [r7, #12]
 800862a:	681b      	ldr	r3, [r3, #0]
 800862c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008630:	d009      	beq.n	8008646 <HAL_TIM_IC_Start_DMA+0x15a>
 8008632:	68fb      	ldr	r3, [r7, #12]
 8008634:	681b      	ldr	r3, [r3, #0]
 8008636:	4a6d      	ldr	r2, [pc, #436]	; (80087ec <HAL_TIM_IC_Start_DMA+0x300>)
 8008638:	4293      	cmp	r3, r2
 800863a:	d004      	beq.n	8008646 <HAL_TIM_IC_Start_DMA+0x15a>
 800863c:	68fb      	ldr	r3, [r7, #12]
 800863e:	681b      	ldr	r3, [r3, #0]
 8008640:	4a6b      	ldr	r2, [pc, #428]	; (80087f0 <HAL_TIM_IC_Start_DMA+0x304>)
 8008642:	4293      	cmp	r3, r2
 8008644:	d111      	bne.n	800866a <HAL_TIM_IC_Start_DMA+0x17e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008646:	68fb      	ldr	r3, [r7, #12]
 8008648:	681b      	ldr	r3, [r3, #0]
 800864a:	689b      	ldr	r3, [r3, #8]
 800864c:	f003 0307 	and.w	r3, r3, #7
 8008650:	613b      	str	r3, [r7, #16]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008652:	693b      	ldr	r3, [r7, #16]
 8008654:	2b06      	cmp	r3, #6
 8008656:	d010      	beq.n	800867a <HAL_TIM_IC_Start_DMA+0x18e>
    {
      __HAL_TIM_ENABLE(htim);
 8008658:	68fb      	ldr	r3, [r7, #12]
 800865a:	681b      	ldr	r3, [r3, #0]
 800865c:	681a      	ldr	r2, [r3, #0]
 800865e:	68fb      	ldr	r3, [r7, #12]
 8008660:	681b      	ldr	r3, [r3, #0]
 8008662:	f042 0201 	orr.w	r2, r2, #1
 8008666:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008668:	e007      	b.n	800867a <HAL_TIM_IC_Start_DMA+0x18e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800866a:	68fb      	ldr	r3, [r7, #12]
 800866c:	681b      	ldr	r3, [r3, #0]
 800866e:	681a      	ldr	r2, [r3, #0]
 8008670:	68fb      	ldr	r3, [r7, #12]
 8008672:	681b      	ldr	r3, [r3, #0]
 8008674:	f042 0201 	orr.w	r2, r2, #1
 8008678:	601a      	str	r2, [r3, #0]
 800867a:	68bb      	ldr	r3, [r7, #8]
 800867c:	2b0c      	cmp	r3, #12
 800867e:	f200 80ad 	bhi.w	80087dc <HAL_TIM_IC_Start_DMA+0x2f0>
 8008682:	a201      	add	r2, pc, #4	; (adr r2, 8008688 <HAL_TIM_IC_Start_DMA+0x19c>)
 8008684:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008688:	080086bd 	.word	0x080086bd
 800868c:	080087dd 	.word	0x080087dd
 8008690:	080087dd 	.word	0x080087dd
 8008694:	080087dd 	.word	0x080087dd
 8008698:	08008705 	.word	0x08008705
 800869c:	080087dd 	.word	0x080087dd
 80086a0:	080087dd 	.word	0x080087dd
 80086a4:	080087dd 	.word	0x080087dd
 80086a8:	0800874d 	.word	0x0800874d
 80086ac:	080087dd 	.word	0x080087dd
 80086b0:	080087dd 	.word	0x080087dd
 80086b4:	080087dd 	.word	0x080087dd
 80086b8:	08008795 	.word	0x08008795
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA capture callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMACaptureCplt;
 80086bc:	68fb      	ldr	r3, [r7, #12]
 80086be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086c0:	4a4c      	ldr	r2, [pc, #304]	; (80087f4 <HAL_TIM_IC_Start_DMA+0x308>)
 80086c2:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 80086c4:	68fb      	ldr	r3, [r7, #12]
 80086c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086c8:	4a4b      	ldr	r2, [pc, #300]	; (80087f8 <HAL_TIM_IC_Start_DMA+0x30c>)
 80086ca:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 80086cc:	68fb      	ldr	r3, [r7, #12]
 80086ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086d0:	4a4a      	ldr	r2, [pc, #296]	; (80087fc <HAL_TIM_IC_Start_DMA+0x310>)
 80086d2:	631a      	str	r2, [r3, #48]	; 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)&htim->Instance->CCR1, (uint32_t)pData,
 80086d4:	68fb      	ldr	r3, [r7, #12]
 80086d6:	6a58      	ldr	r0, [r3, #36]	; 0x24
 80086d8:	68fb      	ldr	r3, [r7, #12]
 80086da:	681b      	ldr	r3, [r3, #0]
 80086dc:	3334      	adds	r3, #52	; 0x34
 80086de:	4619      	mov	r1, r3
 80086e0:	687a      	ldr	r2, [r7, #4]
 80086e2:	887b      	ldrh	r3, [r7, #2]
 80086e4:	f7fd fe3a 	bl	800635c <HAL_DMA_Start_IT>
 80086e8:	4603      	mov	r3, r0
 80086ea:	2b00      	cmp	r3, #0
 80086ec:	d001      	beq.n	80086f2 <HAL_TIM_IC_Start_DMA+0x206>
                         Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80086ee:	2301      	movs	r3, #1
 80086f0:	e076      	b.n	80087e0 <HAL_TIM_IC_Start_DMA+0x2f4>
      }
      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 80086f2:	68fb      	ldr	r3, [r7, #12]
 80086f4:	681b      	ldr	r3, [r3, #0]
 80086f6:	68da      	ldr	r2, [r3, #12]
 80086f8:	68fb      	ldr	r3, [r7, #12]
 80086fa:	681b      	ldr	r3, [r3, #0]
 80086fc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008700:	60da      	str	r2, [r3, #12]
      break;
 8008702:	e06c      	b.n	80087de <HAL_TIM_IC_Start_DMA+0x2f2>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA capture callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMACaptureCplt;
 8008704:	68fb      	ldr	r3, [r7, #12]
 8008706:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008708:	4a3a      	ldr	r2, [pc, #232]	; (80087f4 <HAL_TIM_IC_Start_DMA+0x308>)
 800870a:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 800870c:	68fb      	ldr	r3, [r7, #12]
 800870e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008710:	4a39      	ldr	r2, [pc, #228]	; (80087f8 <HAL_TIM_IC_Start_DMA+0x30c>)
 8008712:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8008714:	68fb      	ldr	r3, [r7, #12]
 8008716:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008718:	4a38      	ldr	r2, [pc, #224]	; (80087fc <HAL_TIM_IC_Start_DMA+0x310>)
 800871a:	631a      	str	r2, [r3, #48]	; 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)&htim->Instance->CCR2, (uint32_t)pData,
 800871c:	68fb      	ldr	r3, [r7, #12]
 800871e:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8008720:	68fb      	ldr	r3, [r7, #12]
 8008722:	681b      	ldr	r3, [r3, #0]
 8008724:	3338      	adds	r3, #56	; 0x38
 8008726:	4619      	mov	r1, r3
 8008728:	687a      	ldr	r2, [r7, #4]
 800872a:	887b      	ldrh	r3, [r7, #2]
 800872c:	f7fd fe16 	bl	800635c <HAL_DMA_Start_IT>
 8008730:	4603      	mov	r3, r0
 8008732:	2b00      	cmp	r3, #0
 8008734:	d001      	beq.n	800873a <HAL_TIM_IC_Start_DMA+0x24e>
                         Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8008736:	2301      	movs	r3, #1
 8008738:	e052      	b.n	80087e0 <HAL_TIM_IC_Start_DMA+0x2f4>
      }
      /* Enable the TIM Capture/Compare 2  DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 800873a:	68fb      	ldr	r3, [r7, #12]
 800873c:	681b      	ldr	r3, [r3, #0]
 800873e:	68da      	ldr	r2, [r3, #12]
 8008740:	68fb      	ldr	r3, [r7, #12]
 8008742:	681b      	ldr	r3, [r3, #0]
 8008744:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8008748:	60da      	str	r2, [r3, #12]
      break;
 800874a:	e048      	b.n	80087de <HAL_TIM_IC_Start_DMA+0x2f2>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA capture callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMACaptureCplt;
 800874c:	68fb      	ldr	r3, [r7, #12]
 800874e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008750:	4a28      	ldr	r2, [pc, #160]	; (80087f4 <HAL_TIM_IC_Start_DMA+0x308>)
 8008752:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 8008754:	68fb      	ldr	r3, [r7, #12]
 8008756:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008758:	4a27      	ldr	r2, [pc, #156]	; (80087f8 <HAL_TIM_IC_Start_DMA+0x30c>)
 800875a:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 800875c:	68fb      	ldr	r3, [r7, #12]
 800875e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008760:	4a26      	ldr	r2, [pc, #152]	; (80087fc <HAL_TIM_IC_Start_DMA+0x310>)
 8008762:	631a      	str	r2, [r3, #48]	; 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)&htim->Instance->CCR3, (uint32_t)pData,
 8008764:	68fb      	ldr	r3, [r7, #12]
 8008766:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8008768:	68fb      	ldr	r3, [r7, #12]
 800876a:	681b      	ldr	r3, [r3, #0]
 800876c:	333c      	adds	r3, #60	; 0x3c
 800876e:	4619      	mov	r1, r3
 8008770:	687a      	ldr	r2, [r7, #4]
 8008772:	887b      	ldrh	r3, [r7, #2]
 8008774:	f7fd fdf2 	bl	800635c <HAL_DMA_Start_IT>
 8008778:	4603      	mov	r3, r0
 800877a:	2b00      	cmp	r3, #0
 800877c:	d001      	beq.n	8008782 <HAL_TIM_IC_Start_DMA+0x296>
                         Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800877e:	2301      	movs	r3, #1
 8008780:	e02e      	b.n	80087e0 <HAL_TIM_IC_Start_DMA+0x2f4>
      }
      /* Enable the TIM Capture/Compare 3  DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 8008782:	68fb      	ldr	r3, [r7, #12]
 8008784:	681b      	ldr	r3, [r3, #0]
 8008786:	68da      	ldr	r2, [r3, #12]
 8008788:	68fb      	ldr	r3, [r7, #12]
 800878a:	681b      	ldr	r3, [r3, #0]
 800878c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008790:	60da      	str	r2, [r3, #12]
      break;
 8008792:	e024      	b.n	80087de <HAL_TIM_IC_Start_DMA+0x2f2>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA capture callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMACaptureCplt;
 8008794:	68fb      	ldr	r3, [r7, #12]
 8008796:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008798:	4a16      	ldr	r2, [pc, #88]	; (80087f4 <HAL_TIM_IC_Start_DMA+0x308>)
 800879a:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 800879c:	68fb      	ldr	r3, [r7, #12]
 800879e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80087a0:	4a15      	ldr	r2, [pc, #84]	; (80087f8 <HAL_TIM_IC_Start_DMA+0x30c>)
 80087a2:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 80087a4:	68fb      	ldr	r3, [r7, #12]
 80087a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80087a8:	4a14      	ldr	r2, [pc, #80]	; (80087fc <HAL_TIM_IC_Start_DMA+0x310>)
 80087aa:	631a      	str	r2, [r3, #48]	; 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)&htim->Instance->CCR4, (uint32_t)pData,
 80087ac:	68fb      	ldr	r3, [r7, #12]
 80087ae:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80087b0:	68fb      	ldr	r3, [r7, #12]
 80087b2:	681b      	ldr	r3, [r3, #0]
 80087b4:	3340      	adds	r3, #64	; 0x40
 80087b6:	4619      	mov	r1, r3
 80087b8:	687a      	ldr	r2, [r7, #4]
 80087ba:	887b      	ldrh	r3, [r7, #2]
 80087bc:	f7fd fdce 	bl	800635c <HAL_DMA_Start_IT>
 80087c0:	4603      	mov	r3, r0
 80087c2:	2b00      	cmp	r3, #0
 80087c4:	d001      	beq.n	80087ca <HAL_TIM_IC_Start_DMA+0x2de>
                         Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80087c6:	2301      	movs	r3, #1
 80087c8:	e00a      	b.n	80087e0 <HAL_TIM_IC_Start_DMA+0x2f4>
      }
      /* Enable the TIM Capture/Compare 4  DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 80087ca:	68fb      	ldr	r3, [r7, #12]
 80087cc:	681b      	ldr	r3, [r3, #0]
 80087ce:	68da      	ldr	r2, [r3, #12]
 80087d0:	68fb      	ldr	r3, [r7, #12]
 80087d2:	681b      	ldr	r3, [r3, #0]
 80087d4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80087d8:	60da      	str	r2, [r3, #12]
      break;
 80087da:	e000      	b.n	80087de <HAL_TIM_IC_Start_DMA+0x2f2>
    }

    default:
      break;
 80087dc:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80087de:	2300      	movs	r3, #0
}
 80087e0:	4618      	mov	r0, r3
 80087e2:	3718      	adds	r7, #24
 80087e4:	46bd      	mov	sp, r7
 80087e6:	bd80      	pop	{r7, pc}
 80087e8:	40012c00 	.word	0x40012c00
 80087ec:	40000400 	.word	0x40000400
 80087f0:	40000800 	.word	0x40000800
 80087f4:	0800912d 	.word	0x0800912d
 80087f8:	080091f5 	.word	0x080091f5
 80087fc:	0800909b 	.word	0x0800909b

08008800 <HAL_TIM_IC_Stop_DMA>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008800:	b580      	push	{r7, lr}
 8008802:	b082      	sub	sp, #8
 8008804:	af00      	add	r7, sp, #0
 8008806:	6078      	str	r0, [r7, #4]
 8008808:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
  assert_param(IS_TIM_DMA_CC_INSTANCE(htim->Instance));

  /* Disable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	681b      	ldr	r3, [r3, #0]
 800880e:	2200      	movs	r2, #0
 8008810:	6839      	ldr	r1, [r7, #0]
 8008812:	4618      	mov	r0, r3
 8008814:	f001 f93d 	bl	8009a92 <TIM_CCxChannelCmd>
 8008818:	683b      	ldr	r3, [r7, #0]
 800881a:	2b0c      	cmp	r3, #12
 800881c:	d854      	bhi.n	80088c8 <HAL_TIM_IC_Stop_DMA+0xc8>
 800881e:	a201      	add	r2, pc, #4	; (adr r2, 8008824 <HAL_TIM_IC_Stop_DMA+0x24>)
 8008820:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008824:	08008859 	.word	0x08008859
 8008828:	080088c9 	.word	0x080088c9
 800882c:	080088c9 	.word	0x080088c9
 8008830:	080088c9 	.word	0x080088c9
 8008834:	08008875 	.word	0x08008875
 8008838:	080088c9 	.word	0x080088c9
 800883c:	080088c9 	.word	0x080088c9
 8008840:	080088c9 	.word	0x080088c9
 8008844:	08008891 	.word	0x08008891
 8008848:	080088c9 	.word	0x080088c9
 800884c:	080088c9 	.word	0x080088c9
 8008850:	080088c9 	.word	0x080088c9
 8008854:	080088ad 	.word	0x080088ad
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	681b      	ldr	r3, [r3, #0]
 800885c:	68da      	ldr	r2, [r3, #12]
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	681b      	ldr	r3, [r3, #0]
 8008862:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8008866:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800886c:	4618      	mov	r0, r3
 800886e:	f7fd fdd5 	bl	800641c <HAL_DMA_Abort_IT>
      break;
 8008872:	e02a      	b.n	80088ca <HAL_TIM_IC_Stop_DMA+0xca>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	681b      	ldr	r3, [r3, #0]
 8008878:	68da      	ldr	r2, [r3, #12]
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	681b      	ldr	r3, [r3, #0]
 800887e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008882:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008888:	4618      	mov	r0, r3
 800888a:	f7fd fdc7 	bl	800641c <HAL_DMA_Abort_IT>
      break;
 800888e:	e01c      	b.n	80088ca <HAL_TIM_IC_Stop_DMA+0xca>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3  DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	681b      	ldr	r3, [r3, #0]
 8008894:	68da      	ldr	r2, [r3, #12]
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	681b      	ldr	r3, [r3, #0]
 800889a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800889e:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80088a4:	4618      	mov	r0, r3
 80088a6:	f7fd fdb9 	bl	800641c <HAL_DMA_Abort_IT>
      break;
 80088aa:	e00e      	b.n	80088ca <HAL_TIM_IC_Stop_DMA+0xca>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4  DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	681b      	ldr	r3, [r3, #0]
 80088b0:	68da      	ldr	r2, [r3, #12]
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	681b      	ldr	r3, [r3, #0]
 80088b6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80088ba:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80088c0:	4618      	mov	r0, r3
 80088c2:	f7fd fdab 	bl	800641c <HAL_DMA_Abort_IT>
      break;
 80088c6:	e000      	b.n	80088ca <HAL_TIM_IC_Stop_DMA+0xca>
    }

    default:
      break;
 80088c8:	bf00      	nop
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	681b      	ldr	r3, [r3, #0]
 80088ce:	6a1a      	ldr	r2, [r3, #32]
 80088d0:	f241 1311 	movw	r3, #4369	; 0x1111
 80088d4:	4013      	ands	r3, r2
 80088d6:	2b00      	cmp	r3, #0
 80088d8:	d10f      	bne.n	80088fa <HAL_TIM_IC_Stop_DMA+0xfa>
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	681b      	ldr	r3, [r3, #0]
 80088de:	6a1a      	ldr	r2, [r3, #32]
 80088e0:	f240 4344 	movw	r3, #1092	; 0x444
 80088e4:	4013      	ands	r3, r2
 80088e6:	2b00      	cmp	r3, #0
 80088e8:	d107      	bne.n	80088fa <HAL_TIM_IC_Stop_DMA+0xfa>
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	681b      	ldr	r3, [r3, #0]
 80088ee:	681a      	ldr	r2, [r3, #0]
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	681b      	ldr	r3, [r3, #0]
 80088f4:	f022 0201 	bic.w	r2, r2, #1
 80088f8:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80088fa:	683b      	ldr	r3, [r7, #0]
 80088fc:	2b00      	cmp	r3, #0
 80088fe:	d104      	bne.n	800890a <HAL_TIM_IC_Stop_DMA+0x10a>
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	2201      	movs	r2, #1
 8008904:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008908:	e013      	b.n	8008932 <HAL_TIM_IC_Stop_DMA+0x132>
 800890a:	683b      	ldr	r3, [r7, #0]
 800890c:	2b04      	cmp	r3, #4
 800890e:	d104      	bne.n	800891a <HAL_TIM_IC_Stop_DMA+0x11a>
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	2201      	movs	r2, #1
 8008914:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008918:	e00b      	b.n	8008932 <HAL_TIM_IC_Stop_DMA+0x132>
 800891a:	683b      	ldr	r3, [r7, #0]
 800891c:	2b08      	cmp	r3, #8
 800891e:	d104      	bne.n	800892a <HAL_TIM_IC_Stop_DMA+0x12a>
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	2201      	movs	r2, #1
 8008924:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008928:	e003      	b.n	8008932 <HAL_TIM_IC_Stop_DMA+0x132>
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	2201      	movs	r2, #1
 800892e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8008932:	683b      	ldr	r3, [r7, #0]
 8008934:	2b00      	cmp	r3, #0
 8008936:	d104      	bne.n	8008942 <HAL_TIM_IC_Stop_DMA+0x142>
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	2201      	movs	r2, #1
 800893c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008940:	e013      	b.n	800896a <HAL_TIM_IC_Stop_DMA+0x16a>
 8008942:	683b      	ldr	r3, [r7, #0]
 8008944:	2b04      	cmp	r3, #4
 8008946:	d104      	bne.n	8008952 <HAL_TIM_IC_Stop_DMA+0x152>
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	2201      	movs	r2, #1
 800894c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008950:	e00b      	b.n	800896a <HAL_TIM_IC_Stop_DMA+0x16a>
 8008952:	683b      	ldr	r3, [r7, #0]
 8008954:	2b08      	cmp	r3, #8
 8008956:	d104      	bne.n	8008962 <HAL_TIM_IC_Stop_DMA+0x162>
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	2201      	movs	r2, #1
 800895c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008960:	e003      	b.n	800896a <HAL_TIM_IC_Stop_DMA+0x16a>
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	2201      	movs	r2, #1
 8008966:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Return function status */
  return HAL_OK;
 800896a:	2300      	movs	r3, #0
}
 800896c:	4618      	mov	r0, r3
 800896e:	3708      	adds	r7, #8
 8008970:	46bd      	mov	sp, r7
 8008972:	bd80      	pop	{r7, pc}

08008974 <HAL_TIM_OnePulse_Init>:
  *            @arg TIM_OPMODE_SINGLE: Only one pulse will be generated.
  *            @arg TIM_OPMODE_REPETITIVE: Repetitive pulses will be generated.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Init(TIM_HandleTypeDef *htim, uint32_t OnePulseMode)
{
 8008974:	b580      	push	{r7, lr}
 8008976:	b082      	sub	sp, #8
 8008978:	af00      	add	r7, sp, #0
 800897a:	6078      	str	r0, [r7, #4]
 800897c:	6039      	str	r1, [r7, #0]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	2b00      	cmp	r3, #0
 8008982:	d101      	bne.n	8008988 <HAL_TIM_OnePulse_Init+0x14>
  {
    return HAL_ERROR;
 8008984:	2301      	movs	r3, #1
 8008986:	e041      	b.n	8008a0c <HAL_TIM_OnePulse_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_OPM_MODE(OnePulseMode));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800898e:	b2db      	uxtb	r3, r3
 8008990:	2b00      	cmp	r3, #0
 8008992:	d106      	bne.n	80089a2 <HAL_TIM_OnePulse_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	2200      	movs	r2, #0
 8008998:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OnePulse_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OnePulse_MspInit(htim);
 800899c:	6878      	ldr	r0, [r7, #4]
 800899e:	f000 f839 	bl	8008a14 <HAL_TIM_OnePulse_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	2202      	movs	r2, #2
 80089a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Configure the Time base in the One Pulse Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	681a      	ldr	r2, [r3, #0]
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	3304      	adds	r3, #4
 80089b2:	4619      	mov	r1, r3
 80089b4:	4610      	mov	r0, r2
 80089b6:	f000 fc51 	bl	800925c <TIM_Base_SetConfig>

  /* Reset the OPM Bit */
  htim->Instance->CR1 &= ~TIM_CR1_OPM;
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	681b      	ldr	r3, [r3, #0]
 80089be:	681a      	ldr	r2, [r3, #0]
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	681b      	ldr	r3, [r3, #0]
 80089c4:	f022 0208 	bic.w	r2, r2, #8
 80089c8:	601a      	str	r2, [r3, #0]

  /* Configure the OPM Mode */
  htim->Instance->CR1 |= OnePulseMode;
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	681b      	ldr	r3, [r3, #0]
 80089ce:	6819      	ldr	r1, [r3, #0]
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	681b      	ldr	r3, [r3, #0]
 80089d4:	683a      	ldr	r2, [r7, #0]
 80089d6:	430a      	orrs	r2, r1
 80089d8:	601a      	str	r2, [r3, #0]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	2201      	movs	r2, #1
 80089de:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	2201      	movs	r2, #1
 80089e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	2201      	movs	r2, #1
 80089ee:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	2201      	movs	r2, #1
 80089f6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	2201      	movs	r2, #1
 80089fe:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	2201      	movs	r2, #1
 8008a06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008a0a:	2300      	movs	r3, #0
}
 8008a0c:	4618      	mov	r0, r3
 8008a0e:	3708      	adds	r7, #8
 8008a10:	46bd      	mov	sp, r7
 8008a12:	bd80      	pop	{r7, pc}

08008a14 <HAL_TIM_OnePulse_MspInit>:
  * @brief  Initializes the TIM One Pulse MSP.
  * @param  htim TIM One Pulse handle
  * @retval None
  */
__weak void HAL_TIM_OnePulse_MspInit(TIM_HandleTypeDef *htim)
{
 8008a14:	b480      	push	{r7}
 8008a16:	b083      	sub	sp, #12
 8008a18:	af00      	add	r7, sp, #0
 8008a1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OnePulse_MspInit could be implemented in the user file
   */
}
 8008a1c:	bf00      	nop
 8008a1e:	370c      	adds	r7, #12
 8008a20:	46bd      	mov	sp, r7
 8008a22:	bc80      	pop	{r7}
 8008a24:	4770      	bx	lr

08008a26 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008a26:	b580      	push	{r7, lr}
 8008a28:	b082      	sub	sp, #8
 8008a2a:	af00      	add	r7, sp, #0
 8008a2c:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	681b      	ldr	r3, [r3, #0]
 8008a32:	691b      	ldr	r3, [r3, #16]
 8008a34:	f003 0302 	and.w	r3, r3, #2
 8008a38:	2b02      	cmp	r3, #2
 8008a3a:	d122      	bne.n	8008a82 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	681b      	ldr	r3, [r3, #0]
 8008a40:	68db      	ldr	r3, [r3, #12]
 8008a42:	f003 0302 	and.w	r3, r3, #2
 8008a46:	2b02      	cmp	r3, #2
 8008a48:	d11b      	bne.n	8008a82 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	681b      	ldr	r3, [r3, #0]
 8008a4e:	f06f 0202 	mvn.w	r2, #2
 8008a52:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	2201      	movs	r2, #1
 8008a58:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	681b      	ldr	r3, [r3, #0]
 8008a5e:	699b      	ldr	r3, [r3, #24]
 8008a60:	f003 0303 	and.w	r3, r3, #3
 8008a64:	2b00      	cmp	r3, #0
 8008a66:	d003      	beq.n	8008a70 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008a68:	6878      	ldr	r0, [r7, #4]
 8008a6a:	f000 fae9 	bl	8009040 <HAL_TIM_IC_CaptureCallback>
 8008a6e:	e005      	b.n	8008a7c <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008a70:	6878      	ldr	r0, [r7, #4]
 8008a72:	f000 fadc 	bl	800902e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008a76:	6878      	ldr	r0, [r7, #4]
 8008a78:	f000 faf4 	bl	8009064 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	2200      	movs	r2, #0
 8008a80:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	681b      	ldr	r3, [r3, #0]
 8008a86:	691b      	ldr	r3, [r3, #16]
 8008a88:	f003 0304 	and.w	r3, r3, #4
 8008a8c:	2b04      	cmp	r3, #4
 8008a8e:	d122      	bne.n	8008ad6 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	681b      	ldr	r3, [r3, #0]
 8008a94:	68db      	ldr	r3, [r3, #12]
 8008a96:	f003 0304 	and.w	r3, r3, #4
 8008a9a:	2b04      	cmp	r3, #4
 8008a9c:	d11b      	bne.n	8008ad6 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	681b      	ldr	r3, [r3, #0]
 8008aa2:	f06f 0204 	mvn.w	r2, #4
 8008aa6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	2202      	movs	r2, #2
 8008aac:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	681b      	ldr	r3, [r3, #0]
 8008ab2:	699b      	ldr	r3, [r3, #24]
 8008ab4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008ab8:	2b00      	cmp	r3, #0
 8008aba:	d003      	beq.n	8008ac4 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008abc:	6878      	ldr	r0, [r7, #4]
 8008abe:	f000 fabf 	bl	8009040 <HAL_TIM_IC_CaptureCallback>
 8008ac2:	e005      	b.n	8008ad0 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008ac4:	6878      	ldr	r0, [r7, #4]
 8008ac6:	f000 fab2 	bl	800902e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008aca:	6878      	ldr	r0, [r7, #4]
 8008acc:	f000 faca 	bl	8009064 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	2200      	movs	r2, #0
 8008ad4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	681b      	ldr	r3, [r3, #0]
 8008ada:	691b      	ldr	r3, [r3, #16]
 8008adc:	f003 0308 	and.w	r3, r3, #8
 8008ae0:	2b08      	cmp	r3, #8
 8008ae2:	d122      	bne.n	8008b2a <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	681b      	ldr	r3, [r3, #0]
 8008ae8:	68db      	ldr	r3, [r3, #12]
 8008aea:	f003 0308 	and.w	r3, r3, #8
 8008aee:	2b08      	cmp	r3, #8
 8008af0:	d11b      	bne.n	8008b2a <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	681b      	ldr	r3, [r3, #0]
 8008af6:	f06f 0208 	mvn.w	r2, #8
 8008afa:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	2204      	movs	r2, #4
 8008b00:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	681b      	ldr	r3, [r3, #0]
 8008b06:	69db      	ldr	r3, [r3, #28]
 8008b08:	f003 0303 	and.w	r3, r3, #3
 8008b0c:	2b00      	cmp	r3, #0
 8008b0e:	d003      	beq.n	8008b18 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008b10:	6878      	ldr	r0, [r7, #4]
 8008b12:	f000 fa95 	bl	8009040 <HAL_TIM_IC_CaptureCallback>
 8008b16:	e005      	b.n	8008b24 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008b18:	6878      	ldr	r0, [r7, #4]
 8008b1a:	f000 fa88 	bl	800902e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008b1e:	6878      	ldr	r0, [r7, #4]
 8008b20:	f000 faa0 	bl	8009064 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	2200      	movs	r2, #0
 8008b28:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	681b      	ldr	r3, [r3, #0]
 8008b2e:	691b      	ldr	r3, [r3, #16]
 8008b30:	f003 0310 	and.w	r3, r3, #16
 8008b34:	2b10      	cmp	r3, #16
 8008b36:	d122      	bne.n	8008b7e <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	681b      	ldr	r3, [r3, #0]
 8008b3c:	68db      	ldr	r3, [r3, #12]
 8008b3e:	f003 0310 	and.w	r3, r3, #16
 8008b42:	2b10      	cmp	r3, #16
 8008b44:	d11b      	bne.n	8008b7e <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	681b      	ldr	r3, [r3, #0]
 8008b4a:	f06f 0210 	mvn.w	r2, #16
 8008b4e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	2208      	movs	r2, #8
 8008b54:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	681b      	ldr	r3, [r3, #0]
 8008b5a:	69db      	ldr	r3, [r3, #28]
 8008b5c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008b60:	2b00      	cmp	r3, #0
 8008b62:	d003      	beq.n	8008b6c <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008b64:	6878      	ldr	r0, [r7, #4]
 8008b66:	f000 fa6b 	bl	8009040 <HAL_TIM_IC_CaptureCallback>
 8008b6a:	e005      	b.n	8008b78 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008b6c:	6878      	ldr	r0, [r7, #4]
 8008b6e:	f000 fa5e 	bl	800902e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008b72:	6878      	ldr	r0, [r7, #4]
 8008b74:	f000 fa76 	bl	8009064 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	2200      	movs	r2, #0
 8008b7c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	681b      	ldr	r3, [r3, #0]
 8008b82:	691b      	ldr	r3, [r3, #16]
 8008b84:	f003 0301 	and.w	r3, r3, #1
 8008b88:	2b01      	cmp	r3, #1
 8008b8a:	d10e      	bne.n	8008baa <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	681b      	ldr	r3, [r3, #0]
 8008b90:	68db      	ldr	r3, [r3, #12]
 8008b92:	f003 0301 	and.w	r3, r3, #1
 8008b96:	2b01      	cmp	r3, #1
 8008b98:	d107      	bne.n	8008baa <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	681b      	ldr	r3, [r3, #0]
 8008b9e:	f06f 0201 	mvn.w	r2, #1
 8008ba2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8008ba4:	6878      	ldr	r0, [r7, #4]
 8008ba6:	f000 fa39 	bl	800901c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	681b      	ldr	r3, [r3, #0]
 8008bae:	691b      	ldr	r3, [r3, #16]
 8008bb0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008bb4:	2b80      	cmp	r3, #128	; 0x80
 8008bb6:	d10e      	bne.n	8008bd6 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	681b      	ldr	r3, [r3, #0]
 8008bbc:	68db      	ldr	r3, [r3, #12]
 8008bbe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008bc2:	2b80      	cmp	r3, #128	; 0x80
 8008bc4:	d107      	bne.n	8008bd6 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	681b      	ldr	r3, [r3, #0]
 8008bca:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8008bce:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008bd0:	6878      	ldr	r0, [r7, #4]
 8008bd2:	f001 f83b 	bl	8009c4c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	681b      	ldr	r3, [r3, #0]
 8008bda:	691b      	ldr	r3, [r3, #16]
 8008bdc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008be0:	2b40      	cmp	r3, #64	; 0x40
 8008be2:	d10e      	bne.n	8008c02 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	681b      	ldr	r3, [r3, #0]
 8008be8:	68db      	ldr	r3, [r3, #12]
 8008bea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008bee:	2b40      	cmp	r3, #64	; 0x40
 8008bf0:	d107      	bne.n	8008c02 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	681b      	ldr	r3, [r3, #0]
 8008bf6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8008bfa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008bfc:	6878      	ldr	r0, [r7, #4]
 8008bfe:	f000 fa3a 	bl	8009076 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	681b      	ldr	r3, [r3, #0]
 8008c06:	691b      	ldr	r3, [r3, #16]
 8008c08:	f003 0320 	and.w	r3, r3, #32
 8008c0c:	2b20      	cmp	r3, #32
 8008c0e:	d10e      	bne.n	8008c2e <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	681b      	ldr	r3, [r3, #0]
 8008c14:	68db      	ldr	r3, [r3, #12]
 8008c16:	f003 0320 	and.w	r3, r3, #32
 8008c1a:	2b20      	cmp	r3, #32
 8008c1c:	d107      	bne.n	8008c2e <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	681b      	ldr	r3, [r3, #0]
 8008c22:	f06f 0220 	mvn.w	r2, #32
 8008c26:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008c28:	6878      	ldr	r0, [r7, #4]
 8008c2a:	f001 f806 	bl	8009c3a <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008c2e:	bf00      	nop
 8008c30:	3708      	adds	r7, #8
 8008c32:	46bd      	mov	sp, r7
 8008c34:	bd80      	pop	{r7, pc}
	...

08008c38 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8008c38:	b580      	push	{r7, lr}
 8008c3a:	b084      	sub	sp, #16
 8008c3c:	af00      	add	r7, sp, #0
 8008c3e:	60f8      	str	r0, [r7, #12]
 8008c40:	60b9      	str	r1, [r7, #8]
 8008c42:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8008c44:	68fb      	ldr	r3, [r7, #12]
 8008c46:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008c4a:	2b01      	cmp	r3, #1
 8008c4c:	d101      	bne.n	8008c52 <HAL_TIM_OC_ConfigChannel+0x1a>
 8008c4e:	2302      	movs	r3, #2
 8008c50:	e046      	b.n	8008ce0 <HAL_TIM_OC_ConfigChannel+0xa8>
 8008c52:	68fb      	ldr	r3, [r7, #12]
 8008c54:	2201      	movs	r2, #1
 8008c56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	2b0c      	cmp	r3, #12
 8008c5e:	d839      	bhi.n	8008cd4 <HAL_TIM_OC_ConfigChannel+0x9c>
 8008c60:	a201      	add	r2, pc, #4	; (adr r2, 8008c68 <HAL_TIM_OC_ConfigChannel+0x30>)
 8008c62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c66:	bf00      	nop
 8008c68:	08008c9d 	.word	0x08008c9d
 8008c6c:	08008cd5 	.word	0x08008cd5
 8008c70:	08008cd5 	.word	0x08008cd5
 8008c74:	08008cd5 	.word	0x08008cd5
 8008c78:	08008cab 	.word	0x08008cab
 8008c7c:	08008cd5 	.word	0x08008cd5
 8008c80:	08008cd5 	.word	0x08008cd5
 8008c84:	08008cd5 	.word	0x08008cd5
 8008c88:	08008cb9 	.word	0x08008cb9
 8008c8c:	08008cd5 	.word	0x08008cd5
 8008c90:	08008cd5 	.word	0x08008cd5
 8008c94:	08008cd5 	.word	0x08008cd5
 8008c98:	08008cc7 	.word	0x08008cc7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8008c9c:	68fb      	ldr	r3, [r7, #12]
 8008c9e:	681b      	ldr	r3, [r3, #0]
 8008ca0:	68b9      	ldr	r1, [r7, #8]
 8008ca2:	4618      	mov	r0, r3
 8008ca4:	f000 fb3c 	bl	8009320 <TIM_OC1_SetConfig>
      break;
 8008ca8:	e015      	b.n	8008cd6 <HAL_TIM_OC_ConfigChannel+0x9e>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8008caa:	68fb      	ldr	r3, [r7, #12]
 8008cac:	681b      	ldr	r3, [r3, #0]
 8008cae:	68b9      	ldr	r1, [r7, #8]
 8008cb0:	4618      	mov	r0, r3
 8008cb2:	f000 fb9b 	bl	80093ec <TIM_OC2_SetConfig>
      break;
 8008cb6:	e00e      	b.n	8008cd6 <HAL_TIM_OC_ConfigChannel+0x9e>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8008cb8:	68fb      	ldr	r3, [r7, #12]
 8008cba:	681b      	ldr	r3, [r3, #0]
 8008cbc:	68b9      	ldr	r1, [r7, #8]
 8008cbe:	4618      	mov	r0, r3
 8008cc0:	f000 fbfe 	bl	80094c0 <TIM_OC3_SetConfig>
      break;
 8008cc4:	e007      	b.n	8008cd6 <HAL_TIM_OC_ConfigChannel+0x9e>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8008cc6:	68fb      	ldr	r3, [r7, #12]
 8008cc8:	681b      	ldr	r3, [r3, #0]
 8008cca:	68b9      	ldr	r1, [r7, #8]
 8008ccc:	4618      	mov	r0, r3
 8008cce:	f000 fc61 	bl	8009594 <TIM_OC4_SetConfig>
      break;
 8008cd2:	e000      	b.n	8008cd6 <HAL_TIM_OC_ConfigChannel+0x9e>
    }

    default:
      break;
 8008cd4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8008cd6:	68fb      	ldr	r3, [r7, #12]
 8008cd8:	2200      	movs	r2, #0
 8008cda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008cde:	2300      	movs	r3, #0
}
 8008ce0:	4618      	mov	r0, r3
 8008ce2:	3710      	adds	r7, #16
 8008ce4:	46bd      	mov	sp, r7
 8008ce6:	bd80      	pop	{r7, pc}

08008ce8 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8008ce8:	b580      	push	{r7, lr}
 8008cea:	b084      	sub	sp, #16
 8008cec:	af00      	add	r7, sp, #0
 8008cee:	60f8      	str	r0, [r7, #12]
 8008cf0:	60b9      	str	r1, [r7, #8]
 8008cf2:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8008cf4:	68fb      	ldr	r3, [r7, #12]
 8008cf6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008cfa:	2b01      	cmp	r3, #1
 8008cfc:	d101      	bne.n	8008d02 <HAL_TIM_IC_ConfigChannel+0x1a>
 8008cfe:	2302      	movs	r3, #2
 8008d00:	e082      	b.n	8008e08 <HAL_TIM_IC_ConfigChannel+0x120>
 8008d02:	68fb      	ldr	r3, [r7, #12]
 8008d04:	2201      	movs	r2, #1
 8008d06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	2b00      	cmp	r3, #0
 8008d0e:	d11b      	bne.n	8008d48 <HAL_TIM_IC_ConfigChannel+0x60>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8008d10:	68fb      	ldr	r3, [r7, #12]
 8008d12:	6818      	ldr	r0, [r3, #0]
 8008d14:	68bb      	ldr	r3, [r7, #8]
 8008d16:	6819      	ldr	r1, [r3, #0]
 8008d18:	68bb      	ldr	r3, [r7, #8]
 8008d1a:	685a      	ldr	r2, [r3, #4]
 8008d1c:	68bb      	ldr	r3, [r7, #8]
 8008d1e:	68db      	ldr	r3, [r3, #12]
 8008d20:	f000 fd14 	bl	800974c <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8008d24:	68fb      	ldr	r3, [r7, #12]
 8008d26:	681b      	ldr	r3, [r3, #0]
 8008d28:	699a      	ldr	r2, [r3, #24]
 8008d2a:	68fb      	ldr	r3, [r7, #12]
 8008d2c:	681b      	ldr	r3, [r3, #0]
 8008d2e:	f022 020c 	bic.w	r2, r2, #12
 8008d32:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8008d34:	68fb      	ldr	r3, [r7, #12]
 8008d36:	681b      	ldr	r3, [r3, #0]
 8008d38:	6999      	ldr	r1, [r3, #24]
 8008d3a:	68bb      	ldr	r3, [r7, #8]
 8008d3c:	689a      	ldr	r2, [r3, #8]
 8008d3e:	68fb      	ldr	r3, [r7, #12]
 8008d40:	681b      	ldr	r3, [r3, #0]
 8008d42:	430a      	orrs	r2, r1
 8008d44:	619a      	str	r2, [r3, #24]
 8008d46:	e05a      	b.n	8008dfe <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_2)
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	2b04      	cmp	r3, #4
 8008d4c:	d11c      	bne.n	8008d88 <HAL_TIM_IC_ConfigChannel+0xa0>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8008d4e:	68fb      	ldr	r3, [r7, #12]
 8008d50:	6818      	ldr	r0, [r3, #0]
 8008d52:	68bb      	ldr	r3, [r7, #8]
 8008d54:	6819      	ldr	r1, [r3, #0]
 8008d56:	68bb      	ldr	r3, [r7, #8]
 8008d58:	685a      	ldr	r2, [r3, #4]
 8008d5a:	68bb      	ldr	r3, [r7, #8]
 8008d5c:	68db      	ldr	r3, [r3, #12]
 8008d5e:	f000 fd7d 	bl	800985c <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8008d62:	68fb      	ldr	r3, [r7, #12]
 8008d64:	681b      	ldr	r3, [r3, #0]
 8008d66:	699a      	ldr	r2, [r3, #24]
 8008d68:	68fb      	ldr	r3, [r7, #12]
 8008d6a:	681b      	ldr	r3, [r3, #0]
 8008d6c:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8008d70:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8008d72:	68fb      	ldr	r3, [r7, #12]
 8008d74:	681b      	ldr	r3, [r3, #0]
 8008d76:	6999      	ldr	r1, [r3, #24]
 8008d78:	68bb      	ldr	r3, [r7, #8]
 8008d7a:	689b      	ldr	r3, [r3, #8]
 8008d7c:	021a      	lsls	r2, r3, #8
 8008d7e:	68fb      	ldr	r3, [r7, #12]
 8008d80:	681b      	ldr	r3, [r3, #0]
 8008d82:	430a      	orrs	r2, r1
 8008d84:	619a      	str	r2, [r3, #24]
 8008d86:	e03a      	b.n	8008dfe <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_3)
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	2b08      	cmp	r3, #8
 8008d8c:	d11b      	bne.n	8008dc6 <HAL_TIM_IC_ConfigChannel+0xde>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8008d8e:	68fb      	ldr	r3, [r7, #12]
 8008d90:	6818      	ldr	r0, [r3, #0]
 8008d92:	68bb      	ldr	r3, [r7, #8]
 8008d94:	6819      	ldr	r1, [r3, #0]
 8008d96:	68bb      	ldr	r3, [r7, #8]
 8008d98:	685a      	ldr	r2, [r3, #4]
 8008d9a:	68bb      	ldr	r3, [r7, #8]
 8008d9c:	68db      	ldr	r3, [r3, #12]
 8008d9e:	f000 fdc8 	bl	8009932 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8008da2:	68fb      	ldr	r3, [r7, #12]
 8008da4:	681b      	ldr	r3, [r3, #0]
 8008da6:	69da      	ldr	r2, [r3, #28]
 8008da8:	68fb      	ldr	r3, [r7, #12]
 8008daa:	681b      	ldr	r3, [r3, #0]
 8008dac:	f022 020c 	bic.w	r2, r2, #12
 8008db0:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8008db2:	68fb      	ldr	r3, [r7, #12]
 8008db4:	681b      	ldr	r3, [r3, #0]
 8008db6:	69d9      	ldr	r1, [r3, #28]
 8008db8:	68bb      	ldr	r3, [r7, #8]
 8008dba:	689a      	ldr	r2, [r3, #8]
 8008dbc:	68fb      	ldr	r3, [r7, #12]
 8008dbe:	681b      	ldr	r3, [r3, #0]
 8008dc0:	430a      	orrs	r2, r1
 8008dc2:	61da      	str	r2, [r3, #28]
 8008dc4:	e01b      	b.n	8008dfe <HAL_TIM_IC_ConfigChannel+0x116>
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8008dc6:	68fb      	ldr	r3, [r7, #12]
 8008dc8:	6818      	ldr	r0, [r3, #0]
 8008dca:	68bb      	ldr	r3, [r7, #8]
 8008dcc:	6819      	ldr	r1, [r3, #0]
 8008dce:	68bb      	ldr	r3, [r7, #8]
 8008dd0:	685a      	ldr	r2, [r3, #4]
 8008dd2:	68bb      	ldr	r3, [r7, #8]
 8008dd4:	68db      	ldr	r3, [r3, #12]
 8008dd6:	f000 fde7 	bl	80099a8 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8008dda:	68fb      	ldr	r3, [r7, #12]
 8008ddc:	681b      	ldr	r3, [r3, #0]
 8008dde:	69da      	ldr	r2, [r3, #28]
 8008de0:	68fb      	ldr	r3, [r7, #12]
 8008de2:	681b      	ldr	r3, [r3, #0]
 8008de4:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8008de8:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8008dea:	68fb      	ldr	r3, [r7, #12]
 8008dec:	681b      	ldr	r3, [r3, #0]
 8008dee:	69d9      	ldr	r1, [r3, #28]
 8008df0:	68bb      	ldr	r3, [r7, #8]
 8008df2:	689b      	ldr	r3, [r3, #8]
 8008df4:	021a      	lsls	r2, r3, #8
 8008df6:	68fb      	ldr	r3, [r7, #12]
 8008df8:	681b      	ldr	r3, [r3, #0]
 8008dfa:	430a      	orrs	r2, r1
 8008dfc:	61da      	str	r2, [r3, #28]
  }

  __HAL_UNLOCK(htim);
 8008dfe:	68fb      	ldr	r3, [r7, #12]
 8008e00:	2200      	movs	r2, #0
 8008e02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008e06:	2300      	movs	r3, #0
}
 8008e08:	4618      	mov	r0, r3
 8008e0a:	3710      	adds	r7, #16
 8008e0c:	46bd      	mov	sp, r7
 8008e0e:	bd80      	pop	{r7, pc}

08008e10 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8008e10:	b580      	push	{r7, lr}
 8008e12:	b084      	sub	sp, #16
 8008e14:	af00      	add	r7, sp, #0
 8008e16:	6078      	str	r0, [r7, #4]
 8008e18:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008e20:	2b01      	cmp	r3, #1
 8008e22:	d101      	bne.n	8008e28 <HAL_TIM_ConfigClockSource+0x18>
 8008e24:	2302      	movs	r3, #2
 8008e26:	e0b3      	b.n	8008f90 <HAL_TIM_ConfigClockSource+0x180>
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	2201      	movs	r2, #1
 8008e2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	2202      	movs	r2, #2
 8008e34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	681b      	ldr	r3, [r3, #0]
 8008e3c:	689b      	ldr	r3, [r3, #8]
 8008e3e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8008e40:	68fb      	ldr	r3, [r7, #12]
 8008e42:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8008e46:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008e48:	68fb      	ldr	r3, [r7, #12]
 8008e4a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008e4e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	681b      	ldr	r3, [r3, #0]
 8008e54:	68fa      	ldr	r2, [r7, #12]
 8008e56:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8008e58:	683b      	ldr	r3, [r7, #0]
 8008e5a:	681b      	ldr	r3, [r3, #0]
 8008e5c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008e60:	d03e      	beq.n	8008ee0 <HAL_TIM_ConfigClockSource+0xd0>
 8008e62:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008e66:	f200 8087 	bhi.w	8008f78 <HAL_TIM_ConfigClockSource+0x168>
 8008e6a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008e6e:	f000 8085 	beq.w	8008f7c <HAL_TIM_ConfigClockSource+0x16c>
 8008e72:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008e76:	d87f      	bhi.n	8008f78 <HAL_TIM_ConfigClockSource+0x168>
 8008e78:	2b70      	cmp	r3, #112	; 0x70
 8008e7a:	d01a      	beq.n	8008eb2 <HAL_TIM_ConfigClockSource+0xa2>
 8008e7c:	2b70      	cmp	r3, #112	; 0x70
 8008e7e:	d87b      	bhi.n	8008f78 <HAL_TIM_ConfigClockSource+0x168>
 8008e80:	2b60      	cmp	r3, #96	; 0x60
 8008e82:	d050      	beq.n	8008f26 <HAL_TIM_ConfigClockSource+0x116>
 8008e84:	2b60      	cmp	r3, #96	; 0x60
 8008e86:	d877      	bhi.n	8008f78 <HAL_TIM_ConfigClockSource+0x168>
 8008e88:	2b50      	cmp	r3, #80	; 0x50
 8008e8a:	d03c      	beq.n	8008f06 <HAL_TIM_ConfigClockSource+0xf6>
 8008e8c:	2b50      	cmp	r3, #80	; 0x50
 8008e8e:	d873      	bhi.n	8008f78 <HAL_TIM_ConfigClockSource+0x168>
 8008e90:	2b40      	cmp	r3, #64	; 0x40
 8008e92:	d058      	beq.n	8008f46 <HAL_TIM_ConfigClockSource+0x136>
 8008e94:	2b40      	cmp	r3, #64	; 0x40
 8008e96:	d86f      	bhi.n	8008f78 <HAL_TIM_ConfigClockSource+0x168>
 8008e98:	2b30      	cmp	r3, #48	; 0x30
 8008e9a:	d064      	beq.n	8008f66 <HAL_TIM_ConfigClockSource+0x156>
 8008e9c:	2b30      	cmp	r3, #48	; 0x30
 8008e9e:	d86b      	bhi.n	8008f78 <HAL_TIM_ConfigClockSource+0x168>
 8008ea0:	2b20      	cmp	r3, #32
 8008ea2:	d060      	beq.n	8008f66 <HAL_TIM_ConfigClockSource+0x156>
 8008ea4:	2b20      	cmp	r3, #32
 8008ea6:	d867      	bhi.n	8008f78 <HAL_TIM_ConfigClockSource+0x168>
 8008ea8:	2b00      	cmp	r3, #0
 8008eaa:	d05c      	beq.n	8008f66 <HAL_TIM_ConfigClockSource+0x156>
 8008eac:	2b10      	cmp	r3, #16
 8008eae:	d05a      	beq.n	8008f66 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8008eb0:	e062      	b.n	8008f78 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	6818      	ldr	r0, [r3, #0]
 8008eb6:	683b      	ldr	r3, [r7, #0]
 8008eb8:	6899      	ldr	r1, [r3, #8]
 8008eba:	683b      	ldr	r3, [r7, #0]
 8008ebc:	685a      	ldr	r2, [r3, #4]
 8008ebe:	683b      	ldr	r3, [r7, #0]
 8008ec0:	68db      	ldr	r3, [r3, #12]
 8008ec2:	f000 fdc7 	bl	8009a54 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	681b      	ldr	r3, [r3, #0]
 8008eca:	689b      	ldr	r3, [r3, #8]
 8008ecc:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8008ece:	68fb      	ldr	r3, [r7, #12]
 8008ed0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8008ed4:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	681b      	ldr	r3, [r3, #0]
 8008eda:	68fa      	ldr	r2, [r7, #12]
 8008edc:	609a      	str	r2, [r3, #8]
      break;
 8008ede:	e04e      	b.n	8008f7e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	6818      	ldr	r0, [r3, #0]
 8008ee4:	683b      	ldr	r3, [r7, #0]
 8008ee6:	6899      	ldr	r1, [r3, #8]
 8008ee8:	683b      	ldr	r3, [r7, #0]
 8008eea:	685a      	ldr	r2, [r3, #4]
 8008eec:	683b      	ldr	r3, [r7, #0]
 8008eee:	68db      	ldr	r3, [r3, #12]
 8008ef0:	f000 fdb0 	bl	8009a54 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	681b      	ldr	r3, [r3, #0]
 8008ef8:	689a      	ldr	r2, [r3, #8]
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	681b      	ldr	r3, [r3, #0]
 8008efe:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008f02:	609a      	str	r2, [r3, #8]
      break;
 8008f04:	e03b      	b.n	8008f7e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	6818      	ldr	r0, [r3, #0]
 8008f0a:	683b      	ldr	r3, [r7, #0]
 8008f0c:	6859      	ldr	r1, [r3, #4]
 8008f0e:	683b      	ldr	r3, [r7, #0]
 8008f10:	68db      	ldr	r3, [r3, #12]
 8008f12:	461a      	mov	r2, r3
 8008f14:	f000 fc74 	bl	8009800 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	681b      	ldr	r3, [r3, #0]
 8008f1c:	2150      	movs	r1, #80	; 0x50
 8008f1e:	4618      	mov	r0, r3
 8008f20:	f000 fd7e 	bl	8009a20 <TIM_ITRx_SetConfig>
      break;
 8008f24:	e02b      	b.n	8008f7e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	6818      	ldr	r0, [r3, #0]
 8008f2a:	683b      	ldr	r3, [r7, #0]
 8008f2c:	6859      	ldr	r1, [r3, #4]
 8008f2e:	683b      	ldr	r3, [r7, #0]
 8008f30:	68db      	ldr	r3, [r3, #12]
 8008f32:	461a      	mov	r2, r3
 8008f34:	f000 fcce 	bl	80098d4 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	681b      	ldr	r3, [r3, #0]
 8008f3c:	2160      	movs	r1, #96	; 0x60
 8008f3e:	4618      	mov	r0, r3
 8008f40:	f000 fd6e 	bl	8009a20 <TIM_ITRx_SetConfig>
      break;
 8008f44:	e01b      	b.n	8008f7e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	6818      	ldr	r0, [r3, #0]
 8008f4a:	683b      	ldr	r3, [r7, #0]
 8008f4c:	6859      	ldr	r1, [r3, #4]
 8008f4e:	683b      	ldr	r3, [r7, #0]
 8008f50:	68db      	ldr	r3, [r3, #12]
 8008f52:	461a      	mov	r2, r3
 8008f54:	f000 fc54 	bl	8009800 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	681b      	ldr	r3, [r3, #0]
 8008f5c:	2140      	movs	r1, #64	; 0x40
 8008f5e:	4618      	mov	r0, r3
 8008f60:	f000 fd5e 	bl	8009a20 <TIM_ITRx_SetConfig>
      break;
 8008f64:	e00b      	b.n	8008f7e <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	681a      	ldr	r2, [r3, #0]
 8008f6a:	683b      	ldr	r3, [r7, #0]
 8008f6c:	681b      	ldr	r3, [r3, #0]
 8008f6e:	4619      	mov	r1, r3
 8008f70:	4610      	mov	r0, r2
 8008f72:	f000 fd55 	bl	8009a20 <TIM_ITRx_SetConfig>
        break;
 8008f76:	e002      	b.n	8008f7e <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8008f78:	bf00      	nop
 8008f7a:	e000      	b.n	8008f7e <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8008f7c:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	2201      	movs	r2, #1
 8008f82:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	2200      	movs	r2, #0
 8008f8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008f8e:	2300      	movs	r3, #0
}
 8008f90:	4618      	mov	r0, r3
 8008f92:	3710      	adds	r7, #16
 8008f94:	46bd      	mov	sp, r7
 8008f96:	bd80      	pop	{r7, pc}

08008f98 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8008f98:	b580      	push	{r7, lr}
 8008f9a:	b082      	sub	sp, #8
 8008f9c:	af00      	add	r7, sp, #0
 8008f9e:	6078      	str	r0, [r7, #4]
 8008fa0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008fa8:	2b01      	cmp	r3, #1
 8008faa:	d101      	bne.n	8008fb0 <HAL_TIM_SlaveConfigSynchro+0x18>
 8008fac:	2302      	movs	r3, #2
 8008fae:	e031      	b.n	8009014 <HAL_TIM_SlaveConfigSynchro+0x7c>
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	2201      	movs	r2, #1
 8008fb4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	2202      	movs	r2, #2
 8008fbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8008fc0:	6839      	ldr	r1, [r7, #0]
 8008fc2:	6878      	ldr	r0, [r7, #4]
 8008fc4:	f000 fb34 	bl	8009630 <TIM_SlaveTimer_SetConfig>
 8008fc8:	4603      	mov	r3, r0
 8008fca:	2b00      	cmp	r3, #0
 8008fcc:	d009      	beq.n	8008fe2 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	2201      	movs	r2, #1
 8008fd2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 8008fd6:	687b      	ldr	r3, [r7, #4]
 8008fd8:	2200      	movs	r2, #0
 8008fda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 8008fde:	2301      	movs	r3, #1
 8008fe0:	e018      	b.n	8009014 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	681b      	ldr	r3, [r3, #0]
 8008fe6:	68da      	ldr	r2, [r3, #12]
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	681b      	ldr	r3, [r3, #0]
 8008fec:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008ff0:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	681b      	ldr	r3, [r3, #0]
 8008ff6:	68da      	ldr	r2, [r3, #12]
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	681b      	ldr	r3, [r3, #0]
 8008ffc:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8009000:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	2201      	movs	r2, #1
 8009006:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	2200      	movs	r2, #0
 800900e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009012:	2300      	movs	r3, #0
}
 8009014:	4618      	mov	r0, r3
 8009016:	3708      	adds	r7, #8
 8009018:	46bd      	mov	sp, r7
 800901a:	bd80      	pop	{r7, pc}

0800901c <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800901c:	b480      	push	{r7}
 800901e:	b083      	sub	sp, #12
 8009020:	af00      	add	r7, sp, #0
 8009022:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8009024:	bf00      	nop
 8009026:	370c      	adds	r7, #12
 8009028:	46bd      	mov	sp, r7
 800902a:	bc80      	pop	{r7}
 800902c:	4770      	bx	lr

0800902e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800902e:	b480      	push	{r7}
 8009030:	b083      	sub	sp, #12
 8009032:	af00      	add	r7, sp, #0
 8009034:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8009036:	bf00      	nop
 8009038:	370c      	adds	r7, #12
 800903a:	46bd      	mov	sp, r7
 800903c:	bc80      	pop	{r7}
 800903e:	4770      	bx	lr

08009040 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8009040:	b480      	push	{r7}
 8009042:	b083      	sub	sp, #12
 8009044:	af00      	add	r7, sp, #0
 8009046:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8009048:	bf00      	nop
 800904a:	370c      	adds	r7, #12
 800904c:	46bd      	mov	sp, r7
 800904e:	bc80      	pop	{r7}
 8009050:	4770      	bx	lr

08009052 <HAL_TIM_IC_CaptureHalfCpltCallback>:
  * @brief  Input Capture half complete callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8009052:	b480      	push	{r7}
 8009054:	b083      	sub	sp, #12
 8009056:	af00      	add	r7, sp, #0
 8009058:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureHalfCpltCallback could be implemented in the user file
   */
}
 800905a:	bf00      	nop
 800905c:	370c      	adds	r7, #12
 800905e:	46bd      	mov	sp, r7
 8009060:	bc80      	pop	{r7}
 8009062:	4770      	bx	lr

08009064 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8009064:	b480      	push	{r7}
 8009066:	b083      	sub	sp, #12
 8009068:	af00      	add	r7, sp, #0
 800906a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800906c:	bf00      	nop
 800906e:	370c      	adds	r7, #12
 8009070:	46bd      	mov	sp, r7
 8009072:	bc80      	pop	{r7}
 8009074:	4770      	bx	lr

08009076 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8009076:	b480      	push	{r7}
 8009078:	b083      	sub	sp, #12
 800907a:	af00      	add	r7, sp, #0
 800907c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800907e:	bf00      	nop
 8009080:	370c      	adds	r7, #12
 8009082:	46bd      	mov	sp, r7
 8009084:	bc80      	pop	{r7}
 8009086:	4770      	bx	lr

08009088 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8009088:	b480      	push	{r7}
 800908a:	b083      	sub	sp, #12
 800908c:	af00      	add	r7, sp, #0
 800908e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8009090:	bf00      	nop
 8009092:	370c      	adds	r7, #12
 8009094:	46bd      	mov	sp, r7
 8009096:	bc80      	pop	{r7}
 8009098:	4770      	bx	lr

0800909a <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 800909a:	b580      	push	{r7, lr}
 800909c:	b084      	sub	sp, #16
 800909e:	af00      	add	r7, sp, #0
 80090a0:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80090a6:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 80090a8:	68fb      	ldr	r3, [r7, #12]
 80090aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80090ac:	687a      	ldr	r2, [r7, #4]
 80090ae:	429a      	cmp	r2, r3
 80090b0:	d107      	bne.n	80090c2 <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80090b2:	68fb      	ldr	r3, [r7, #12]
 80090b4:	2201      	movs	r2, #1
 80090b6:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80090b8:	68fb      	ldr	r3, [r7, #12]
 80090ba:	2201      	movs	r2, #1
 80090bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80090c0:	e02a      	b.n	8009118 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 80090c2:	68fb      	ldr	r3, [r7, #12]
 80090c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80090c6:	687a      	ldr	r2, [r7, #4]
 80090c8:	429a      	cmp	r2, r3
 80090ca:	d107      	bne.n	80090dc <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80090cc:	68fb      	ldr	r3, [r7, #12]
 80090ce:	2202      	movs	r2, #2
 80090d0:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80090d2:	68fb      	ldr	r3, [r7, #12]
 80090d4:	2201      	movs	r2, #1
 80090d6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80090da:	e01d      	b.n	8009118 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80090dc:	68fb      	ldr	r3, [r7, #12]
 80090de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80090e0:	687a      	ldr	r2, [r7, #4]
 80090e2:	429a      	cmp	r2, r3
 80090e4:	d107      	bne.n	80090f6 <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80090e6:	68fb      	ldr	r3, [r7, #12]
 80090e8:	2204      	movs	r2, #4
 80090ea:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 80090ec:	68fb      	ldr	r3, [r7, #12]
 80090ee:	2201      	movs	r2, #1
 80090f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80090f4:	e010      	b.n	8009118 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 80090f6:	68fb      	ldr	r3, [r7, #12]
 80090f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80090fa:	687a      	ldr	r2, [r7, #4]
 80090fc:	429a      	cmp	r2, r3
 80090fe:	d107      	bne.n	8009110 <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009100:	68fb      	ldr	r3, [r7, #12]
 8009102:	2208      	movs	r2, #8
 8009104:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8009106:	68fb      	ldr	r3, [r7, #12]
 8009108:	2201      	movs	r2, #1
 800910a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800910e:	e003      	b.n	8009118 <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 8009110:	68fb      	ldr	r3, [r7, #12]
 8009112:	2201      	movs	r2, #1
 8009114:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 8009118:	68f8      	ldr	r0, [r7, #12]
 800911a:	f7ff ffb5 	bl	8009088 <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800911e:	68fb      	ldr	r3, [r7, #12]
 8009120:	2200      	movs	r2, #0
 8009122:	771a      	strb	r2, [r3, #28]
}
 8009124:	bf00      	nop
 8009126:	3710      	adds	r7, #16
 8009128:	46bd      	mov	sp, r7
 800912a:	bd80      	pop	{r7, pc}

0800912c <TIM_DMACaptureCplt>:
  * @brief  TIM DMA Capture complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMACaptureCplt(DMA_HandleTypeDef *hdma)
{
 800912c:	b580      	push	{r7, lr}
 800912e:	b084      	sub	sp, #16
 8009130:	af00      	add	r7, sp, #0
 8009132:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009138:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800913a:	68fb      	ldr	r3, [r7, #12]
 800913c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800913e:	687a      	ldr	r2, [r7, #4]
 8009140:	429a      	cmp	r2, r3
 8009142:	d10f      	bne.n	8009164 <TIM_DMACaptureCplt+0x38>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009144:	68fb      	ldr	r3, [r7, #12]
 8009146:	2201      	movs	r2, #1
 8009148:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	699b      	ldr	r3, [r3, #24]
 800914e:	2b00      	cmp	r3, #0
 8009150:	d146      	bne.n	80091e0 <TIM_DMACaptureCplt+0xb4>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8009152:	68fb      	ldr	r3, [r7, #12]
 8009154:	2201      	movs	r2, #1
 8009156:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800915a:	68fb      	ldr	r3, [r7, #12]
 800915c:	2201      	movs	r2, #1
 800915e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009162:	e03d      	b.n	80091e0 <TIM_DMACaptureCplt+0xb4>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8009164:	68fb      	ldr	r3, [r7, #12]
 8009166:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009168:	687a      	ldr	r2, [r7, #4]
 800916a:	429a      	cmp	r2, r3
 800916c:	d10f      	bne.n	800918e <TIM_DMACaptureCplt+0x62>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800916e:	68fb      	ldr	r3, [r7, #12]
 8009170:	2202      	movs	r2, #2
 8009172:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	699b      	ldr	r3, [r3, #24]
 8009178:	2b00      	cmp	r3, #0
 800917a:	d131      	bne.n	80091e0 <TIM_DMACaptureCplt+0xb4>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800917c:	68fb      	ldr	r3, [r7, #12]
 800917e:	2201      	movs	r2, #1
 8009180:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8009184:	68fb      	ldr	r3, [r7, #12]
 8009186:	2201      	movs	r2, #1
 8009188:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800918c:	e028      	b.n	80091e0 <TIM_DMACaptureCplt+0xb4>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800918e:	68fb      	ldr	r3, [r7, #12]
 8009190:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009192:	687a      	ldr	r2, [r7, #4]
 8009194:	429a      	cmp	r2, r3
 8009196:	d10f      	bne.n	80091b8 <TIM_DMACaptureCplt+0x8c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009198:	68fb      	ldr	r3, [r7, #12]
 800919a:	2204      	movs	r2, #4
 800919c:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	699b      	ldr	r3, [r3, #24]
 80091a2:	2b00      	cmp	r3, #0
 80091a4:	d11c      	bne.n	80091e0 <TIM_DMACaptureCplt+0xb4>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 80091a6:	68fb      	ldr	r3, [r7, #12]
 80091a8:	2201      	movs	r2, #1
 80091aa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 80091ae:	68fb      	ldr	r3, [r7, #12]
 80091b0:	2201      	movs	r2, #1
 80091b2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80091b6:	e013      	b.n	80091e0 <TIM_DMACaptureCplt+0xb4>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 80091b8:	68fb      	ldr	r3, [r7, #12]
 80091ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80091bc:	687a      	ldr	r2, [r7, #4]
 80091be:	429a      	cmp	r2, r3
 80091c0:	d10e      	bne.n	80091e0 <TIM_DMACaptureCplt+0xb4>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80091c2:	68fb      	ldr	r3, [r7, #12]
 80091c4:	2208      	movs	r2, #8
 80091c6:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	699b      	ldr	r3, [r3, #24]
 80091cc:	2b00      	cmp	r3, #0
 80091ce:	d107      	bne.n	80091e0 <TIM_DMACaptureCplt+0xb4>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 80091d0:	68fb      	ldr	r3, [r7, #12]
 80091d2:	2201      	movs	r2, #1
 80091d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 80091d8:	68fb      	ldr	r3, [r7, #12]
 80091da:	2201      	movs	r2, #1
 80091dc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->IC_CaptureCallback(htim);
#else
  HAL_TIM_IC_CaptureCallback(htim);
 80091e0:	68f8      	ldr	r0, [r7, #12]
 80091e2:	f7ff ff2d 	bl	8009040 <HAL_TIM_IC_CaptureCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80091e6:	68fb      	ldr	r3, [r7, #12]
 80091e8:	2200      	movs	r2, #0
 80091ea:	771a      	strb	r2, [r3, #28]
}
 80091ec:	bf00      	nop
 80091ee:	3710      	adds	r7, #16
 80091f0:	46bd      	mov	sp, r7
 80091f2:	bd80      	pop	{r7, pc}

080091f4 <TIM_DMACaptureHalfCplt>:
  * @brief  TIM DMA Capture half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMACaptureHalfCplt(DMA_HandleTypeDef *hdma)
{
 80091f4:	b580      	push	{r7, lr}
 80091f6:	b084      	sub	sp, #16
 80091f8:	af00      	add	r7, sp, #0
 80091fa:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009200:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8009202:	68fb      	ldr	r3, [r7, #12]
 8009204:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009206:	687a      	ldr	r2, [r7, #4]
 8009208:	429a      	cmp	r2, r3
 800920a:	d103      	bne.n	8009214 <TIM_DMACaptureHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800920c:	68fb      	ldr	r3, [r7, #12]
 800920e:	2201      	movs	r2, #1
 8009210:	771a      	strb	r2, [r3, #28]
 8009212:	e019      	b.n	8009248 <TIM_DMACaptureHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8009214:	68fb      	ldr	r3, [r7, #12]
 8009216:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009218:	687a      	ldr	r2, [r7, #4]
 800921a:	429a      	cmp	r2, r3
 800921c:	d103      	bne.n	8009226 <TIM_DMACaptureHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800921e:	68fb      	ldr	r3, [r7, #12]
 8009220:	2202      	movs	r2, #2
 8009222:	771a      	strb	r2, [r3, #28]
 8009224:	e010      	b.n	8009248 <TIM_DMACaptureHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8009226:	68fb      	ldr	r3, [r7, #12]
 8009228:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800922a:	687a      	ldr	r2, [r7, #4]
 800922c:	429a      	cmp	r2, r3
 800922e:	d103      	bne.n	8009238 <TIM_DMACaptureHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009230:	68fb      	ldr	r3, [r7, #12]
 8009232:	2204      	movs	r2, #4
 8009234:	771a      	strb	r2, [r3, #28]
 8009236:	e007      	b.n	8009248 <TIM_DMACaptureHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8009238:	68fb      	ldr	r3, [r7, #12]
 800923a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800923c:	687a      	ldr	r2, [r7, #4]
 800923e:	429a      	cmp	r2, r3
 8009240:	d102      	bne.n	8009248 <TIM_DMACaptureHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009242:	68fb      	ldr	r3, [r7, #12]
 8009244:	2208      	movs	r2, #8
 8009246:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->IC_CaptureHalfCpltCallback(htim);
#else
  HAL_TIM_IC_CaptureHalfCpltCallback(htim);
 8009248:	68f8      	ldr	r0, [r7, #12]
 800924a:	f7ff ff02 	bl	8009052 <HAL_TIM_IC_CaptureHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800924e:	68fb      	ldr	r3, [r7, #12]
 8009250:	2200      	movs	r2, #0
 8009252:	771a      	strb	r2, [r3, #28]
}
 8009254:	bf00      	nop
 8009256:	3710      	adds	r7, #16
 8009258:	46bd      	mov	sp, r7
 800925a:	bd80      	pop	{r7, pc}

0800925c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800925c:	b480      	push	{r7}
 800925e:	b085      	sub	sp, #20
 8009260:	af00      	add	r7, sp, #0
 8009262:	6078      	str	r0, [r7, #4]
 8009264:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	681b      	ldr	r3, [r3, #0]
 800926a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	4a29      	ldr	r2, [pc, #164]	; (8009314 <TIM_Base_SetConfig+0xb8>)
 8009270:	4293      	cmp	r3, r2
 8009272:	d00b      	beq.n	800928c <TIM_Base_SetConfig+0x30>
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800927a:	d007      	beq.n	800928c <TIM_Base_SetConfig+0x30>
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	4a26      	ldr	r2, [pc, #152]	; (8009318 <TIM_Base_SetConfig+0xbc>)
 8009280:	4293      	cmp	r3, r2
 8009282:	d003      	beq.n	800928c <TIM_Base_SetConfig+0x30>
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	4a25      	ldr	r2, [pc, #148]	; (800931c <TIM_Base_SetConfig+0xc0>)
 8009288:	4293      	cmp	r3, r2
 800928a:	d108      	bne.n	800929e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800928c:	68fb      	ldr	r3, [r7, #12]
 800928e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009292:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009294:	683b      	ldr	r3, [r7, #0]
 8009296:	685b      	ldr	r3, [r3, #4]
 8009298:	68fa      	ldr	r2, [r7, #12]
 800929a:	4313      	orrs	r3, r2
 800929c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800929e:	687b      	ldr	r3, [r7, #4]
 80092a0:	4a1c      	ldr	r2, [pc, #112]	; (8009314 <TIM_Base_SetConfig+0xb8>)
 80092a2:	4293      	cmp	r3, r2
 80092a4:	d00b      	beq.n	80092be <TIM_Base_SetConfig+0x62>
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80092ac:	d007      	beq.n	80092be <TIM_Base_SetConfig+0x62>
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	4a19      	ldr	r2, [pc, #100]	; (8009318 <TIM_Base_SetConfig+0xbc>)
 80092b2:	4293      	cmp	r3, r2
 80092b4:	d003      	beq.n	80092be <TIM_Base_SetConfig+0x62>
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	4a18      	ldr	r2, [pc, #96]	; (800931c <TIM_Base_SetConfig+0xc0>)
 80092ba:	4293      	cmp	r3, r2
 80092bc:	d108      	bne.n	80092d0 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80092be:	68fb      	ldr	r3, [r7, #12]
 80092c0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80092c4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80092c6:	683b      	ldr	r3, [r7, #0]
 80092c8:	68db      	ldr	r3, [r3, #12]
 80092ca:	68fa      	ldr	r2, [r7, #12]
 80092cc:	4313      	orrs	r3, r2
 80092ce:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80092d0:	68fb      	ldr	r3, [r7, #12]
 80092d2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80092d6:	683b      	ldr	r3, [r7, #0]
 80092d8:	695b      	ldr	r3, [r3, #20]
 80092da:	4313      	orrs	r3, r2
 80092dc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	68fa      	ldr	r2, [r7, #12]
 80092e2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80092e4:	683b      	ldr	r3, [r7, #0]
 80092e6:	689a      	ldr	r2, [r3, #8]
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80092ec:	683b      	ldr	r3, [r7, #0]
 80092ee:	681a      	ldr	r2, [r3, #0]
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	4a07      	ldr	r2, [pc, #28]	; (8009314 <TIM_Base_SetConfig+0xb8>)
 80092f8:	4293      	cmp	r3, r2
 80092fa:	d103      	bne.n	8009304 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80092fc:	683b      	ldr	r3, [r7, #0]
 80092fe:	691a      	ldr	r2, [r3, #16]
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	2201      	movs	r2, #1
 8009308:	615a      	str	r2, [r3, #20]
}
 800930a:	bf00      	nop
 800930c:	3714      	adds	r7, #20
 800930e:	46bd      	mov	sp, r7
 8009310:	bc80      	pop	{r7}
 8009312:	4770      	bx	lr
 8009314:	40012c00 	.word	0x40012c00
 8009318:	40000400 	.word	0x40000400
 800931c:	40000800 	.word	0x40000800

08009320 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009320:	b480      	push	{r7}
 8009322:	b087      	sub	sp, #28
 8009324:	af00      	add	r7, sp, #0
 8009326:	6078      	str	r0, [r7, #4]
 8009328:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	6a1b      	ldr	r3, [r3, #32]
 800932e:	f023 0201 	bic.w	r2, r3, #1
 8009332:	687b      	ldr	r3, [r7, #4]
 8009334:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	6a1b      	ldr	r3, [r3, #32]
 800933a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	685b      	ldr	r3, [r3, #4]
 8009340:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009342:	687b      	ldr	r3, [r7, #4]
 8009344:	699b      	ldr	r3, [r3, #24]
 8009346:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8009348:	68fb      	ldr	r3, [r7, #12]
 800934a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800934e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8009350:	68fb      	ldr	r3, [r7, #12]
 8009352:	f023 0303 	bic.w	r3, r3, #3
 8009356:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009358:	683b      	ldr	r3, [r7, #0]
 800935a:	681b      	ldr	r3, [r3, #0]
 800935c:	68fa      	ldr	r2, [r7, #12]
 800935e:	4313      	orrs	r3, r2
 8009360:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8009362:	697b      	ldr	r3, [r7, #20]
 8009364:	f023 0302 	bic.w	r3, r3, #2
 8009368:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800936a:	683b      	ldr	r3, [r7, #0]
 800936c:	689b      	ldr	r3, [r3, #8]
 800936e:	697a      	ldr	r2, [r7, #20]
 8009370:	4313      	orrs	r3, r2
 8009372:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	4a1c      	ldr	r2, [pc, #112]	; (80093e8 <TIM_OC1_SetConfig+0xc8>)
 8009378:	4293      	cmp	r3, r2
 800937a:	d10c      	bne.n	8009396 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800937c:	697b      	ldr	r3, [r7, #20]
 800937e:	f023 0308 	bic.w	r3, r3, #8
 8009382:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8009384:	683b      	ldr	r3, [r7, #0]
 8009386:	68db      	ldr	r3, [r3, #12]
 8009388:	697a      	ldr	r2, [r7, #20]
 800938a:	4313      	orrs	r3, r2
 800938c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800938e:	697b      	ldr	r3, [r7, #20]
 8009390:	f023 0304 	bic.w	r3, r3, #4
 8009394:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	4a13      	ldr	r2, [pc, #76]	; (80093e8 <TIM_OC1_SetConfig+0xc8>)
 800939a:	4293      	cmp	r3, r2
 800939c:	d111      	bne.n	80093c2 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800939e:	693b      	ldr	r3, [r7, #16]
 80093a0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80093a4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80093a6:	693b      	ldr	r3, [r7, #16]
 80093a8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80093ac:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80093ae:	683b      	ldr	r3, [r7, #0]
 80093b0:	695b      	ldr	r3, [r3, #20]
 80093b2:	693a      	ldr	r2, [r7, #16]
 80093b4:	4313      	orrs	r3, r2
 80093b6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80093b8:	683b      	ldr	r3, [r7, #0]
 80093ba:	699b      	ldr	r3, [r3, #24]
 80093bc:	693a      	ldr	r2, [r7, #16]
 80093be:	4313      	orrs	r3, r2
 80093c0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80093c2:	687b      	ldr	r3, [r7, #4]
 80093c4:	693a      	ldr	r2, [r7, #16]
 80093c6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	68fa      	ldr	r2, [r7, #12]
 80093cc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80093ce:	683b      	ldr	r3, [r7, #0]
 80093d0:	685a      	ldr	r2, [r3, #4]
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	697a      	ldr	r2, [r7, #20]
 80093da:	621a      	str	r2, [r3, #32]
}
 80093dc:	bf00      	nop
 80093de:	371c      	adds	r7, #28
 80093e0:	46bd      	mov	sp, r7
 80093e2:	bc80      	pop	{r7}
 80093e4:	4770      	bx	lr
 80093e6:	bf00      	nop
 80093e8:	40012c00 	.word	0x40012c00

080093ec <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80093ec:	b480      	push	{r7}
 80093ee:	b087      	sub	sp, #28
 80093f0:	af00      	add	r7, sp, #0
 80093f2:	6078      	str	r0, [r7, #4]
 80093f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	6a1b      	ldr	r3, [r3, #32]
 80093fa:	f023 0210 	bic.w	r2, r3, #16
 80093fe:	687b      	ldr	r3, [r7, #4]
 8009400:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009402:	687b      	ldr	r3, [r7, #4]
 8009404:	6a1b      	ldr	r3, [r3, #32]
 8009406:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	685b      	ldr	r3, [r3, #4]
 800940c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	699b      	ldr	r3, [r3, #24]
 8009412:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8009414:	68fb      	ldr	r3, [r7, #12]
 8009416:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800941a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800941c:	68fb      	ldr	r3, [r7, #12]
 800941e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009422:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009424:	683b      	ldr	r3, [r7, #0]
 8009426:	681b      	ldr	r3, [r3, #0]
 8009428:	021b      	lsls	r3, r3, #8
 800942a:	68fa      	ldr	r2, [r7, #12]
 800942c:	4313      	orrs	r3, r2
 800942e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8009430:	697b      	ldr	r3, [r7, #20]
 8009432:	f023 0320 	bic.w	r3, r3, #32
 8009436:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8009438:	683b      	ldr	r3, [r7, #0]
 800943a:	689b      	ldr	r3, [r3, #8]
 800943c:	011b      	lsls	r3, r3, #4
 800943e:	697a      	ldr	r2, [r7, #20]
 8009440:	4313      	orrs	r3, r2
 8009442:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	4a1d      	ldr	r2, [pc, #116]	; (80094bc <TIM_OC2_SetConfig+0xd0>)
 8009448:	4293      	cmp	r3, r2
 800944a:	d10d      	bne.n	8009468 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800944c:	697b      	ldr	r3, [r7, #20]
 800944e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009452:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8009454:	683b      	ldr	r3, [r7, #0]
 8009456:	68db      	ldr	r3, [r3, #12]
 8009458:	011b      	lsls	r3, r3, #4
 800945a:	697a      	ldr	r2, [r7, #20]
 800945c:	4313      	orrs	r3, r2
 800945e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8009460:	697b      	ldr	r3, [r7, #20]
 8009462:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009466:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	4a14      	ldr	r2, [pc, #80]	; (80094bc <TIM_OC2_SetConfig+0xd0>)
 800946c:	4293      	cmp	r3, r2
 800946e:	d113      	bne.n	8009498 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8009470:	693b      	ldr	r3, [r7, #16]
 8009472:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009476:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8009478:	693b      	ldr	r3, [r7, #16]
 800947a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800947e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8009480:	683b      	ldr	r3, [r7, #0]
 8009482:	695b      	ldr	r3, [r3, #20]
 8009484:	009b      	lsls	r3, r3, #2
 8009486:	693a      	ldr	r2, [r7, #16]
 8009488:	4313      	orrs	r3, r2
 800948a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800948c:	683b      	ldr	r3, [r7, #0]
 800948e:	699b      	ldr	r3, [r3, #24]
 8009490:	009b      	lsls	r3, r3, #2
 8009492:	693a      	ldr	r2, [r7, #16]
 8009494:	4313      	orrs	r3, r2
 8009496:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	693a      	ldr	r2, [r7, #16]
 800949c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800949e:	687b      	ldr	r3, [r7, #4]
 80094a0:	68fa      	ldr	r2, [r7, #12]
 80094a2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80094a4:	683b      	ldr	r3, [r7, #0]
 80094a6:	685a      	ldr	r2, [r3, #4]
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	697a      	ldr	r2, [r7, #20]
 80094b0:	621a      	str	r2, [r3, #32]
}
 80094b2:	bf00      	nop
 80094b4:	371c      	adds	r7, #28
 80094b6:	46bd      	mov	sp, r7
 80094b8:	bc80      	pop	{r7}
 80094ba:	4770      	bx	lr
 80094bc:	40012c00 	.word	0x40012c00

080094c0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80094c0:	b480      	push	{r7}
 80094c2:	b087      	sub	sp, #28
 80094c4:	af00      	add	r7, sp, #0
 80094c6:	6078      	str	r0, [r7, #4]
 80094c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	6a1b      	ldr	r3, [r3, #32]
 80094ce:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	6a1b      	ldr	r3, [r3, #32]
 80094da:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	685b      	ldr	r3, [r3, #4]
 80094e0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	69db      	ldr	r3, [r3, #28]
 80094e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80094e8:	68fb      	ldr	r3, [r7, #12]
 80094ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80094ee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80094f0:	68fb      	ldr	r3, [r7, #12]
 80094f2:	f023 0303 	bic.w	r3, r3, #3
 80094f6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80094f8:	683b      	ldr	r3, [r7, #0]
 80094fa:	681b      	ldr	r3, [r3, #0]
 80094fc:	68fa      	ldr	r2, [r7, #12]
 80094fe:	4313      	orrs	r3, r2
 8009500:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8009502:	697b      	ldr	r3, [r7, #20]
 8009504:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009508:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800950a:	683b      	ldr	r3, [r7, #0]
 800950c:	689b      	ldr	r3, [r3, #8]
 800950e:	021b      	lsls	r3, r3, #8
 8009510:	697a      	ldr	r2, [r7, #20]
 8009512:	4313      	orrs	r3, r2
 8009514:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8009516:	687b      	ldr	r3, [r7, #4]
 8009518:	4a1d      	ldr	r2, [pc, #116]	; (8009590 <TIM_OC3_SetConfig+0xd0>)
 800951a:	4293      	cmp	r3, r2
 800951c:	d10d      	bne.n	800953a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800951e:	697b      	ldr	r3, [r7, #20]
 8009520:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009524:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8009526:	683b      	ldr	r3, [r7, #0]
 8009528:	68db      	ldr	r3, [r3, #12]
 800952a:	021b      	lsls	r3, r3, #8
 800952c:	697a      	ldr	r2, [r7, #20]
 800952e:	4313      	orrs	r3, r2
 8009530:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8009532:	697b      	ldr	r3, [r7, #20]
 8009534:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009538:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	4a14      	ldr	r2, [pc, #80]	; (8009590 <TIM_OC3_SetConfig+0xd0>)
 800953e:	4293      	cmp	r3, r2
 8009540:	d113      	bne.n	800956a <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8009542:	693b      	ldr	r3, [r7, #16]
 8009544:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009548:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800954a:	693b      	ldr	r3, [r7, #16]
 800954c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8009550:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8009552:	683b      	ldr	r3, [r7, #0]
 8009554:	695b      	ldr	r3, [r3, #20]
 8009556:	011b      	lsls	r3, r3, #4
 8009558:	693a      	ldr	r2, [r7, #16]
 800955a:	4313      	orrs	r3, r2
 800955c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800955e:	683b      	ldr	r3, [r7, #0]
 8009560:	699b      	ldr	r3, [r3, #24]
 8009562:	011b      	lsls	r3, r3, #4
 8009564:	693a      	ldr	r2, [r7, #16]
 8009566:	4313      	orrs	r3, r2
 8009568:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	693a      	ldr	r2, [r7, #16]
 800956e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009570:	687b      	ldr	r3, [r7, #4]
 8009572:	68fa      	ldr	r2, [r7, #12]
 8009574:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8009576:	683b      	ldr	r3, [r7, #0]
 8009578:	685a      	ldr	r2, [r3, #4]
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800957e:	687b      	ldr	r3, [r7, #4]
 8009580:	697a      	ldr	r2, [r7, #20]
 8009582:	621a      	str	r2, [r3, #32]
}
 8009584:	bf00      	nop
 8009586:	371c      	adds	r7, #28
 8009588:	46bd      	mov	sp, r7
 800958a:	bc80      	pop	{r7}
 800958c:	4770      	bx	lr
 800958e:	bf00      	nop
 8009590:	40012c00 	.word	0x40012c00

08009594 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009594:	b480      	push	{r7}
 8009596:	b087      	sub	sp, #28
 8009598:	af00      	add	r7, sp, #0
 800959a:	6078      	str	r0, [r7, #4]
 800959c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	6a1b      	ldr	r3, [r3, #32]
 80095a2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	6a1b      	ldr	r3, [r3, #32]
 80095ae:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	685b      	ldr	r3, [r3, #4]
 80095b4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	69db      	ldr	r3, [r3, #28]
 80095ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80095bc:	68fb      	ldr	r3, [r7, #12]
 80095be:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80095c2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80095c4:	68fb      	ldr	r3, [r7, #12]
 80095c6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80095ca:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80095cc:	683b      	ldr	r3, [r7, #0]
 80095ce:	681b      	ldr	r3, [r3, #0]
 80095d0:	021b      	lsls	r3, r3, #8
 80095d2:	68fa      	ldr	r2, [r7, #12]
 80095d4:	4313      	orrs	r3, r2
 80095d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80095d8:	693b      	ldr	r3, [r7, #16]
 80095da:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80095de:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80095e0:	683b      	ldr	r3, [r7, #0]
 80095e2:	689b      	ldr	r3, [r3, #8]
 80095e4:	031b      	lsls	r3, r3, #12
 80095e6:	693a      	ldr	r2, [r7, #16]
 80095e8:	4313      	orrs	r3, r2
 80095ea:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	4a0f      	ldr	r2, [pc, #60]	; (800962c <TIM_OC4_SetConfig+0x98>)
 80095f0:	4293      	cmp	r3, r2
 80095f2:	d109      	bne.n	8009608 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80095f4:	697b      	ldr	r3, [r7, #20]
 80095f6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80095fa:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80095fc:	683b      	ldr	r3, [r7, #0]
 80095fe:	695b      	ldr	r3, [r3, #20]
 8009600:	019b      	lsls	r3, r3, #6
 8009602:	697a      	ldr	r2, [r7, #20]
 8009604:	4313      	orrs	r3, r2
 8009606:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	697a      	ldr	r2, [r7, #20]
 800960c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800960e:	687b      	ldr	r3, [r7, #4]
 8009610:	68fa      	ldr	r2, [r7, #12]
 8009612:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8009614:	683b      	ldr	r3, [r7, #0]
 8009616:	685a      	ldr	r2, [r3, #4]
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	693a      	ldr	r2, [r7, #16]
 8009620:	621a      	str	r2, [r3, #32]
}
 8009622:	bf00      	nop
 8009624:	371c      	adds	r7, #28
 8009626:	46bd      	mov	sp, r7
 8009628:	bc80      	pop	{r7}
 800962a:	4770      	bx	lr
 800962c:	40012c00 	.word	0x40012c00

08009630 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8009630:	b580      	push	{r7, lr}
 8009632:	b086      	sub	sp, #24
 8009634:	af00      	add	r7, sp, #0
 8009636:	6078      	str	r0, [r7, #4]
 8009638:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	681b      	ldr	r3, [r3, #0]
 800963e:	689b      	ldr	r3, [r3, #8]
 8009640:	617b      	str	r3, [r7, #20]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8009642:	697b      	ldr	r3, [r7, #20]
 8009644:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009648:	617b      	str	r3, [r7, #20]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 800964a:	683b      	ldr	r3, [r7, #0]
 800964c:	685b      	ldr	r3, [r3, #4]
 800964e:	697a      	ldr	r2, [r7, #20]
 8009650:	4313      	orrs	r3, r2
 8009652:	617b      	str	r3, [r7, #20]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8009654:	697b      	ldr	r3, [r7, #20]
 8009656:	f023 0307 	bic.w	r3, r3, #7
 800965a:	617b      	str	r3, [r7, #20]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 800965c:	683b      	ldr	r3, [r7, #0]
 800965e:	681b      	ldr	r3, [r3, #0]
 8009660:	697a      	ldr	r2, [r7, #20]
 8009662:	4313      	orrs	r3, r2
 8009664:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8009666:	687b      	ldr	r3, [r7, #4]
 8009668:	681b      	ldr	r3, [r3, #0]
 800966a:	697a      	ldr	r2, [r7, #20]
 800966c:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 800966e:	683b      	ldr	r3, [r7, #0]
 8009670:	685b      	ldr	r3, [r3, #4]
 8009672:	2b70      	cmp	r3, #112	; 0x70
 8009674:	d01a      	beq.n	80096ac <TIM_SlaveTimer_SetConfig+0x7c>
 8009676:	2b70      	cmp	r3, #112	; 0x70
 8009678:	d860      	bhi.n	800973c <TIM_SlaveTimer_SetConfig+0x10c>
 800967a:	2b60      	cmp	r3, #96	; 0x60
 800967c:	d054      	beq.n	8009728 <TIM_SlaveTimer_SetConfig+0xf8>
 800967e:	2b60      	cmp	r3, #96	; 0x60
 8009680:	d85c      	bhi.n	800973c <TIM_SlaveTimer_SetConfig+0x10c>
 8009682:	2b50      	cmp	r3, #80	; 0x50
 8009684:	d046      	beq.n	8009714 <TIM_SlaveTimer_SetConfig+0xe4>
 8009686:	2b50      	cmp	r3, #80	; 0x50
 8009688:	d858      	bhi.n	800973c <TIM_SlaveTimer_SetConfig+0x10c>
 800968a:	2b40      	cmp	r3, #64	; 0x40
 800968c:	d019      	beq.n	80096c2 <TIM_SlaveTimer_SetConfig+0x92>
 800968e:	2b40      	cmp	r3, #64	; 0x40
 8009690:	d854      	bhi.n	800973c <TIM_SlaveTimer_SetConfig+0x10c>
 8009692:	2b30      	cmp	r3, #48	; 0x30
 8009694:	d054      	beq.n	8009740 <TIM_SlaveTimer_SetConfig+0x110>
 8009696:	2b30      	cmp	r3, #48	; 0x30
 8009698:	d850      	bhi.n	800973c <TIM_SlaveTimer_SetConfig+0x10c>
 800969a:	2b20      	cmp	r3, #32
 800969c:	d050      	beq.n	8009740 <TIM_SlaveTimer_SetConfig+0x110>
 800969e:	2b20      	cmp	r3, #32
 80096a0:	d84c      	bhi.n	800973c <TIM_SlaveTimer_SetConfig+0x10c>
 80096a2:	2b00      	cmp	r3, #0
 80096a4:	d04c      	beq.n	8009740 <TIM_SlaveTimer_SetConfig+0x110>
 80096a6:	2b10      	cmp	r3, #16
 80096a8:	d04a      	beq.n	8009740 <TIM_SlaveTimer_SetConfig+0x110>
        assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
        break;
      }

    default:
      break;
 80096aa:	e047      	b.n	800973c <TIM_SlaveTimer_SetConfig+0x10c>
      TIM_ETR_SetConfig(htim->Instance,
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	6818      	ldr	r0, [r3, #0]
 80096b0:	683b      	ldr	r3, [r7, #0]
 80096b2:	68d9      	ldr	r1, [r3, #12]
 80096b4:	683b      	ldr	r3, [r7, #0]
 80096b6:	689a      	ldr	r2, [r3, #8]
 80096b8:	683b      	ldr	r3, [r7, #0]
 80096ba:	691b      	ldr	r3, [r3, #16]
 80096bc:	f000 f9ca 	bl	8009a54 <TIM_ETR_SetConfig>
      break;
 80096c0:	e03f      	b.n	8009742 <TIM_SlaveTimer_SetConfig+0x112>
      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 80096c2:	683b      	ldr	r3, [r7, #0]
 80096c4:	681b      	ldr	r3, [r3, #0]
 80096c6:	2b05      	cmp	r3, #5
 80096c8:	d101      	bne.n	80096ce <TIM_SlaveTimer_SetConfig+0x9e>
        return HAL_ERROR;
 80096ca:	2301      	movs	r3, #1
 80096cc:	e03a      	b.n	8009744 <TIM_SlaveTimer_SetConfig+0x114>
      tmpccer = htim->Instance->CCER;
 80096ce:	687b      	ldr	r3, [r7, #4]
 80096d0:	681b      	ldr	r3, [r3, #0]
 80096d2:	6a1b      	ldr	r3, [r3, #32]
 80096d4:	613b      	str	r3, [r7, #16]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 80096d6:	687b      	ldr	r3, [r7, #4]
 80096d8:	681b      	ldr	r3, [r3, #0]
 80096da:	6a1a      	ldr	r2, [r3, #32]
 80096dc:	687b      	ldr	r3, [r7, #4]
 80096de:	681b      	ldr	r3, [r3, #0]
 80096e0:	f022 0201 	bic.w	r2, r2, #1
 80096e4:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 80096e6:	687b      	ldr	r3, [r7, #4]
 80096e8:	681b      	ldr	r3, [r3, #0]
 80096ea:	699b      	ldr	r3, [r3, #24]
 80096ec:	60fb      	str	r3, [r7, #12]
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80096ee:	68fb      	ldr	r3, [r7, #12]
 80096f0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80096f4:	60fb      	str	r3, [r7, #12]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 80096f6:	683b      	ldr	r3, [r7, #0]
 80096f8:	691b      	ldr	r3, [r3, #16]
 80096fa:	011b      	lsls	r3, r3, #4
 80096fc:	68fa      	ldr	r2, [r7, #12]
 80096fe:	4313      	orrs	r3, r2
 8009700:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCMR1 = tmpccmr1;
 8009702:	687b      	ldr	r3, [r7, #4]
 8009704:	681b      	ldr	r3, [r3, #0]
 8009706:	68fa      	ldr	r2, [r7, #12]
 8009708:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 800970a:	687b      	ldr	r3, [r7, #4]
 800970c:	681b      	ldr	r3, [r3, #0]
 800970e:	693a      	ldr	r2, [r7, #16]
 8009710:	621a      	str	r2, [r3, #32]
      break;
 8009712:	e016      	b.n	8009742 <TIM_SlaveTimer_SetConfig+0x112>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	6818      	ldr	r0, [r3, #0]
 8009718:	683b      	ldr	r3, [r7, #0]
 800971a:	6899      	ldr	r1, [r3, #8]
 800971c:	683b      	ldr	r3, [r7, #0]
 800971e:	691b      	ldr	r3, [r3, #16]
 8009720:	461a      	mov	r2, r3
 8009722:	f000 f86d 	bl	8009800 <TIM_TI1_ConfigInputStage>
      break;
 8009726:	e00c      	b.n	8009742 <TIM_SlaveTimer_SetConfig+0x112>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	6818      	ldr	r0, [r3, #0]
 800972c:	683b      	ldr	r3, [r7, #0]
 800972e:	6899      	ldr	r1, [r3, #8]
 8009730:	683b      	ldr	r3, [r7, #0]
 8009732:	691b      	ldr	r3, [r3, #16]
 8009734:	461a      	mov	r2, r3
 8009736:	f000 f8cd 	bl	80098d4 <TIM_TI2_ConfigInputStage>
      break;
 800973a:	e002      	b.n	8009742 <TIM_SlaveTimer_SetConfig+0x112>
      break;
 800973c:	bf00      	nop
 800973e:	e000      	b.n	8009742 <TIM_SlaveTimer_SetConfig+0x112>
        break;
 8009740:	bf00      	nop
  }
  return HAL_OK;
 8009742:	2300      	movs	r3, #0
}
 8009744:	4618      	mov	r0, r3
 8009746:	3718      	adds	r7, #24
 8009748:	46bd      	mov	sp, r7
 800974a:	bd80      	pop	{r7, pc}

0800974c <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 800974c:	b480      	push	{r7}
 800974e:	b087      	sub	sp, #28
 8009750:	af00      	add	r7, sp, #0
 8009752:	60f8      	str	r0, [r7, #12]
 8009754:	60b9      	str	r1, [r7, #8]
 8009756:	607a      	str	r2, [r7, #4]
 8009758:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800975a:	68fb      	ldr	r3, [r7, #12]
 800975c:	6a1b      	ldr	r3, [r3, #32]
 800975e:	f023 0201 	bic.w	r2, r3, #1
 8009762:	68fb      	ldr	r3, [r7, #12]
 8009764:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009766:	68fb      	ldr	r3, [r7, #12]
 8009768:	699b      	ldr	r3, [r3, #24]
 800976a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800976c:	68fb      	ldr	r3, [r7, #12]
 800976e:	6a1b      	ldr	r3, [r3, #32]
 8009770:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8009772:	68fb      	ldr	r3, [r7, #12]
 8009774:	4a1f      	ldr	r2, [pc, #124]	; (80097f4 <TIM_TI1_SetConfig+0xa8>)
 8009776:	4293      	cmp	r3, r2
 8009778:	d00b      	beq.n	8009792 <TIM_TI1_SetConfig+0x46>
 800977a:	68fb      	ldr	r3, [r7, #12]
 800977c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009780:	d007      	beq.n	8009792 <TIM_TI1_SetConfig+0x46>
 8009782:	68fb      	ldr	r3, [r7, #12]
 8009784:	4a1c      	ldr	r2, [pc, #112]	; (80097f8 <TIM_TI1_SetConfig+0xac>)
 8009786:	4293      	cmp	r3, r2
 8009788:	d003      	beq.n	8009792 <TIM_TI1_SetConfig+0x46>
 800978a:	68fb      	ldr	r3, [r7, #12]
 800978c:	4a1b      	ldr	r2, [pc, #108]	; (80097fc <TIM_TI1_SetConfig+0xb0>)
 800978e:	4293      	cmp	r3, r2
 8009790:	d101      	bne.n	8009796 <TIM_TI1_SetConfig+0x4a>
 8009792:	2301      	movs	r3, #1
 8009794:	e000      	b.n	8009798 <TIM_TI1_SetConfig+0x4c>
 8009796:	2300      	movs	r3, #0
 8009798:	2b00      	cmp	r3, #0
 800979a:	d008      	beq.n	80097ae <TIM_TI1_SetConfig+0x62>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 800979c:	697b      	ldr	r3, [r7, #20]
 800979e:	f023 0303 	bic.w	r3, r3, #3
 80097a2:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 80097a4:	697a      	ldr	r2, [r7, #20]
 80097a6:	687b      	ldr	r3, [r7, #4]
 80097a8:	4313      	orrs	r3, r2
 80097aa:	617b      	str	r3, [r7, #20]
 80097ac:	e003      	b.n	80097b6 <TIM_TI1_SetConfig+0x6a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 80097ae:	697b      	ldr	r3, [r7, #20]
 80097b0:	f043 0301 	orr.w	r3, r3, #1
 80097b4:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80097b6:	697b      	ldr	r3, [r7, #20]
 80097b8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80097bc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 80097be:	683b      	ldr	r3, [r7, #0]
 80097c0:	011b      	lsls	r3, r3, #4
 80097c2:	b2db      	uxtb	r3, r3
 80097c4:	697a      	ldr	r2, [r7, #20]
 80097c6:	4313      	orrs	r3, r2
 80097c8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80097ca:	693b      	ldr	r3, [r7, #16]
 80097cc:	f023 030a 	bic.w	r3, r3, #10
 80097d0:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 80097d2:	68bb      	ldr	r3, [r7, #8]
 80097d4:	f003 030a 	and.w	r3, r3, #10
 80097d8:	693a      	ldr	r2, [r7, #16]
 80097da:	4313      	orrs	r3, r2
 80097dc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80097de:	68fb      	ldr	r3, [r7, #12]
 80097e0:	697a      	ldr	r2, [r7, #20]
 80097e2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80097e4:	68fb      	ldr	r3, [r7, #12]
 80097e6:	693a      	ldr	r2, [r7, #16]
 80097e8:	621a      	str	r2, [r3, #32]
}
 80097ea:	bf00      	nop
 80097ec:	371c      	adds	r7, #28
 80097ee:	46bd      	mov	sp, r7
 80097f0:	bc80      	pop	{r7}
 80097f2:	4770      	bx	lr
 80097f4:	40012c00 	.word	0x40012c00
 80097f8:	40000400 	.word	0x40000400
 80097fc:	40000800 	.word	0x40000800

08009800 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009800:	b480      	push	{r7}
 8009802:	b087      	sub	sp, #28
 8009804:	af00      	add	r7, sp, #0
 8009806:	60f8      	str	r0, [r7, #12]
 8009808:	60b9      	str	r1, [r7, #8]
 800980a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800980c:	68fb      	ldr	r3, [r7, #12]
 800980e:	6a1b      	ldr	r3, [r3, #32]
 8009810:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009812:	68fb      	ldr	r3, [r7, #12]
 8009814:	6a1b      	ldr	r3, [r3, #32]
 8009816:	f023 0201 	bic.w	r2, r3, #1
 800981a:	68fb      	ldr	r3, [r7, #12]
 800981c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800981e:	68fb      	ldr	r3, [r7, #12]
 8009820:	699b      	ldr	r3, [r3, #24]
 8009822:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009824:	693b      	ldr	r3, [r7, #16]
 8009826:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800982a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	011b      	lsls	r3, r3, #4
 8009830:	693a      	ldr	r2, [r7, #16]
 8009832:	4313      	orrs	r3, r2
 8009834:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8009836:	697b      	ldr	r3, [r7, #20]
 8009838:	f023 030a 	bic.w	r3, r3, #10
 800983c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800983e:	697a      	ldr	r2, [r7, #20]
 8009840:	68bb      	ldr	r3, [r7, #8]
 8009842:	4313      	orrs	r3, r2
 8009844:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8009846:	68fb      	ldr	r3, [r7, #12]
 8009848:	693a      	ldr	r2, [r7, #16]
 800984a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800984c:	68fb      	ldr	r3, [r7, #12]
 800984e:	697a      	ldr	r2, [r7, #20]
 8009850:	621a      	str	r2, [r3, #32]
}
 8009852:	bf00      	nop
 8009854:	371c      	adds	r7, #28
 8009856:	46bd      	mov	sp, r7
 8009858:	bc80      	pop	{r7}
 800985a:	4770      	bx	lr

0800985c <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800985c:	b480      	push	{r7}
 800985e:	b087      	sub	sp, #28
 8009860:	af00      	add	r7, sp, #0
 8009862:	60f8      	str	r0, [r7, #12]
 8009864:	60b9      	str	r1, [r7, #8]
 8009866:	607a      	str	r2, [r7, #4]
 8009868:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800986a:	68fb      	ldr	r3, [r7, #12]
 800986c:	6a1b      	ldr	r3, [r3, #32]
 800986e:	f023 0210 	bic.w	r2, r3, #16
 8009872:	68fb      	ldr	r3, [r7, #12]
 8009874:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009876:	68fb      	ldr	r3, [r7, #12]
 8009878:	699b      	ldr	r3, [r3, #24]
 800987a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800987c:	68fb      	ldr	r3, [r7, #12]
 800987e:	6a1b      	ldr	r3, [r3, #32]
 8009880:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8009882:	697b      	ldr	r3, [r7, #20]
 8009884:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009888:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 800988a:	687b      	ldr	r3, [r7, #4]
 800988c:	021b      	lsls	r3, r3, #8
 800988e:	697a      	ldr	r2, [r7, #20]
 8009890:	4313      	orrs	r3, r2
 8009892:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8009894:	697b      	ldr	r3, [r7, #20]
 8009896:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800989a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800989c:	683b      	ldr	r3, [r7, #0]
 800989e:	031b      	lsls	r3, r3, #12
 80098a0:	b29b      	uxth	r3, r3
 80098a2:	697a      	ldr	r2, [r7, #20]
 80098a4:	4313      	orrs	r3, r2
 80098a6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80098a8:	693b      	ldr	r3, [r7, #16]
 80098aa:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80098ae:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 80098b0:	68bb      	ldr	r3, [r7, #8]
 80098b2:	011b      	lsls	r3, r3, #4
 80098b4:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 80098b8:	693a      	ldr	r2, [r7, #16]
 80098ba:	4313      	orrs	r3, r2
 80098bc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80098be:	68fb      	ldr	r3, [r7, #12]
 80098c0:	697a      	ldr	r2, [r7, #20]
 80098c2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80098c4:	68fb      	ldr	r3, [r7, #12]
 80098c6:	693a      	ldr	r2, [r7, #16]
 80098c8:	621a      	str	r2, [r3, #32]
}
 80098ca:	bf00      	nop
 80098cc:	371c      	adds	r7, #28
 80098ce:	46bd      	mov	sp, r7
 80098d0:	bc80      	pop	{r7}
 80098d2:	4770      	bx	lr

080098d4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80098d4:	b480      	push	{r7}
 80098d6:	b087      	sub	sp, #28
 80098d8:	af00      	add	r7, sp, #0
 80098da:	60f8      	str	r0, [r7, #12]
 80098dc:	60b9      	str	r1, [r7, #8]
 80098de:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80098e0:	68fb      	ldr	r3, [r7, #12]
 80098e2:	6a1b      	ldr	r3, [r3, #32]
 80098e4:	f023 0210 	bic.w	r2, r3, #16
 80098e8:	68fb      	ldr	r3, [r7, #12]
 80098ea:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80098ec:	68fb      	ldr	r3, [r7, #12]
 80098ee:	699b      	ldr	r3, [r3, #24]
 80098f0:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80098f2:	68fb      	ldr	r3, [r7, #12]
 80098f4:	6a1b      	ldr	r3, [r3, #32]
 80098f6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80098f8:	697b      	ldr	r3, [r7, #20]
 80098fa:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80098fe:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	031b      	lsls	r3, r3, #12
 8009904:	697a      	ldr	r2, [r7, #20]
 8009906:	4313      	orrs	r3, r2
 8009908:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800990a:	693b      	ldr	r3, [r7, #16]
 800990c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8009910:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8009912:	68bb      	ldr	r3, [r7, #8]
 8009914:	011b      	lsls	r3, r3, #4
 8009916:	693a      	ldr	r2, [r7, #16]
 8009918:	4313      	orrs	r3, r2
 800991a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800991c:	68fb      	ldr	r3, [r7, #12]
 800991e:	697a      	ldr	r2, [r7, #20]
 8009920:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009922:	68fb      	ldr	r3, [r7, #12]
 8009924:	693a      	ldr	r2, [r7, #16]
 8009926:	621a      	str	r2, [r3, #32]
}
 8009928:	bf00      	nop
 800992a:	371c      	adds	r7, #28
 800992c:	46bd      	mov	sp, r7
 800992e:	bc80      	pop	{r7}
 8009930:	4770      	bx	lr

08009932 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8009932:	b480      	push	{r7}
 8009934:	b087      	sub	sp, #28
 8009936:	af00      	add	r7, sp, #0
 8009938:	60f8      	str	r0, [r7, #12]
 800993a:	60b9      	str	r1, [r7, #8]
 800993c:	607a      	str	r2, [r7, #4]
 800993e:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8009940:	68fb      	ldr	r3, [r7, #12]
 8009942:	6a1b      	ldr	r3, [r3, #32]
 8009944:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8009948:	68fb      	ldr	r3, [r7, #12]
 800994a:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800994c:	68fb      	ldr	r3, [r7, #12]
 800994e:	69db      	ldr	r3, [r3, #28]
 8009950:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8009952:	68fb      	ldr	r3, [r7, #12]
 8009954:	6a1b      	ldr	r3, [r3, #32]
 8009956:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8009958:	697b      	ldr	r3, [r7, #20]
 800995a:	f023 0303 	bic.w	r3, r3, #3
 800995e:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8009960:	697a      	ldr	r2, [r7, #20]
 8009962:	687b      	ldr	r3, [r7, #4]
 8009964:	4313      	orrs	r3, r2
 8009966:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8009968:	697b      	ldr	r3, [r7, #20]
 800996a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800996e:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8009970:	683b      	ldr	r3, [r7, #0]
 8009972:	011b      	lsls	r3, r3, #4
 8009974:	b2db      	uxtb	r3, r3
 8009976:	697a      	ldr	r2, [r7, #20]
 8009978:	4313      	orrs	r3, r2
 800997a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P);
 800997c:	693b      	ldr	r3, [r7, #16]
 800997e:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009982:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & TIM_CCER_CC3P);
 8009984:	68bb      	ldr	r3, [r7, #8]
 8009986:	021b      	lsls	r3, r3, #8
 8009988:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800998c:	693a      	ldr	r2, [r7, #16]
 800998e:	4313      	orrs	r3, r2
 8009990:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8009992:	68fb      	ldr	r3, [r7, #12]
 8009994:	697a      	ldr	r2, [r7, #20]
 8009996:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8009998:	68fb      	ldr	r3, [r7, #12]
 800999a:	693a      	ldr	r2, [r7, #16]
 800999c:	621a      	str	r2, [r3, #32]
}
 800999e:	bf00      	nop
 80099a0:	371c      	adds	r7, #28
 80099a2:	46bd      	mov	sp, r7
 80099a4:	bc80      	pop	{r7}
 80099a6:	4770      	bx	lr

080099a8 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80099a8:	b480      	push	{r7}
 80099aa:	b087      	sub	sp, #28
 80099ac:	af00      	add	r7, sp, #0
 80099ae:	60f8      	str	r0, [r7, #12]
 80099b0:	60b9      	str	r1, [r7, #8]
 80099b2:	607a      	str	r2, [r7, #4]
 80099b4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80099b6:	68fb      	ldr	r3, [r7, #12]
 80099b8:	6a1b      	ldr	r3, [r3, #32]
 80099ba:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80099be:	68fb      	ldr	r3, [r7, #12]
 80099c0:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80099c2:	68fb      	ldr	r3, [r7, #12]
 80099c4:	69db      	ldr	r3, [r3, #28]
 80099c6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80099c8:	68fb      	ldr	r3, [r7, #12]
 80099ca:	6a1b      	ldr	r3, [r3, #32]
 80099cc:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 80099ce:	697b      	ldr	r3, [r7, #20]
 80099d0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80099d4:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 80099d6:	687b      	ldr	r3, [r7, #4]
 80099d8:	021b      	lsls	r3, r3, #8
 80099da:	697a      	ldr	r2, [r7, #20]
 80099dc:	4313      	orrs	r3, r2
 80099de:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 80099e0:	697b      	ldr	r3, [r7, #20]
 80099e2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80099e6:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 80099e8:	683b      	ldr	r3, [r7, #0]
 80099ea:	031b      	lsls	r3, r3, #12
 80099ec:	b29b      	uxth	r3, r3
 80099ee:	697a      	ldr	r2, [r7, #20]
 80099f0:	4313      	orrs	r3, r2
 80099f2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P);
 80099f4:	693b      	ldr	r3, [r7, #16]
 80099f6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80099fa:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & TIM_CCER_CC4P);
 80099fc:	68bb      	ldr	r3, [r7, #8]
 80099fe:	031b      	lsls	r3, r3, #12
 8009a00:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009a04:	693a      	ldr	r2, [r7, #16]
 8009a06:	4313      	orrs	r3, r2
 8009a08:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8009a0a:	68fb      	ldr	r3, [r7, #12]
 8009a0c:	697a      	ldr	r2, [r7, #20]
 8009a0e:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8009a10:	68fb      	ldr	r3, [r7, #12]
 8009a12:	693a      	ldr	r2, [r7, #16]
 8009a14:	621a      	str	r2, [r3, #32]
}
 8009a16:	bf00      	nop
 8009a18:	371c      	adds	r7, #28
 8009a1a:	46bd      	mov	sp, r7
 8009a1c:	bc80      	pop	{r7}
 8009a1e:	4770      	bx	lr

08009a20 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8009a20:	b480      	push	{r7}
 8009a22:	b085      	sub	sp, #20
 8009a24:	af00      	add	r7, sp, #0
 8009a26:	6078      	str	r0, [r7, #4]
 8009a28:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8009a2a:	687b      	ldr	r3, [r7, #4]
 8009a2c:	689b      	ldr	r3, [r3, #8]
 8009a2e:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8009a30:	68fb      	ldr	r3, [r7, #12]
 8009a32:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009a36:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8009a38:	683a      	ldr	r2, [r7, #0]
 8009a3a:	68fb      	ldr	r3, [r7, #12]
 8009a3c:	4313      	orrs	r3, r2
 8009a3e:	f043 0307 	orr.w	r3, r3, #7
 8009a42:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009a44:	687b      	ldr	r3, [r7, #4]
 8009a46:	68fa      	ldr	r2, [r7, #12]
 8009a48:	609a      	str	r2, [r3, #8]
}
 8009a4a:	bf00      	nop
 8009a4c:	3714      	adds	r7, #20
 8009a4e:	46bd      	mov	sp, r7
 8009a50:	bc80      	pop	{r7}
 8009a52:	4770      	bx	lr

08009a54 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8009a54:	b480      	push	{r7}
 8009a56:	b087      	sub	sp, #28
 8009a58:	af00      	add	r7, sp, #0
 8009a5a:	60f8      	str	r0, [r7, #12]
 8009a5c:	60b9      	str	r1, [r7, #8]
 8009a5e:	607a      	str	r2, [r7, #4]
 8009a60:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8009a62:	68fb      	ldr	r3, [r7, #12]
 8009a64:	689b      	ldr	r3, [r3, #8]
 8009a66:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009a68:	697b      	ldr	r3, [r7, #20]
 8009a6a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009a6e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8009a70:	683b      	ldr	r3, [r7, #0]
 8009a72:	021a      	lsls	r2, r3, #8
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	431a      	orrs	r2, r3
 8009a78:	68bb      	ldr	r3, [r7, #8]
 8009a7a:	4313      	orrs	r3, r2
 8009a7c:	697a      	ldr	r2, [r7, #20]
 8009a7e:	4313      	orrs	r3, r2
 8009a80:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009a82:	68fb      	ldr	r3, [r7, #12]
 8009a84:	697a      	ldr	r2, [r7, #20]
 8009a86:	609a      	str	r2, [r3, #8]
}
 8009a88:	bf00      	nop
 8009a8a:	371c      	adds	r7, #28
 8009a8c:	46bd      	mov	sp, r7
 8009a8e:	bc80      	pop	{r7}
 8009a90:	4770      	bx	lr

08009a92 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8009a92:	b480      	push	{r7}
 8009a94:	b087      	sub	sp, #28
 8009a96:	af00      	add	r7, sp, #0
 8009a98:	60f8      	str	r0, [r7, #12]
 8009a9a:	60b9      	str	r1, [r7, #8]
 8009a9c:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8009a9e:	68bb      	ldr	r3, [r7, #8]
 8009aa0:	f003 031f 	and.w	r3, r3, #31
 8009aa4:	2201      	movs	r2, #1
 8009aa6:	fa02 f303 	lsl.w	r3, r2, r3
 8009aaa:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8009aac:	68fb      	ldr	r3, [r7, #12]
 8009aae:	6a1a      	ldr	r2, [r3, #32]
 8009ab0:	697b      	ldr	r3, [r7, #20]
 8009ab2:	43db      	mvns	r3, r3
 8009ab4:	401a      	ands	r2, r3
 8009ab6:	68fb      	ldr	r3, [r7, #12]
 8009ab8:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8009aba:	68fb      	ldr	r3, [r7, #12]
 8009abc:	6a1a      	ldr	r2, [r3, #32]
 8009abe:	68bb      	ldr	r3, [r7, #8]
 8009ac0:	f003 031f 	and.w	r3, r3, #31
 8009ac4:	6879      	ldr	r1, [r7, #4]
 8009ac6:	fa01 f303 	lsl.w	r3, r1, r3
 8009aca:	431a      	orrs	r2, r3
 8009acc:	68fb      	ldr	r3, [r7, #12]
 8009ace:	621a      	str	r2, [r3, #32]
}
 8009ad0:	bf00      	nop
 8009ad2:	371c      	adds	r7, #28
 8009ad4:	46bd      	mov	sp, r7
 8009ad6:	bc80      	pop	{r7}
 8009ad8:	4770      	bx	lr
	...

08009adc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009adc:	b480      	push	{r7}
 8009ade:	b085      	sub	sp, #20
 8009ae0:	af00      	add	r7, sp, #0
 8009ae2:	6078      	str	r0, [r7, #4]
 8009ae4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8009ae6:	687b      	ldr	r3, [r7, #4]
 8009ae8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009aec:	2b01      	cmp	r3, #1
 8009aee:	d101      	bne.n	8009af4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009af0:	2302      	movs	r3, #2
 8009af2:	e046      	b.n	8009b82 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8009af4:	687b      	ldr	r3, [r7, #4]
 8009af6:	2201      	movs	r2, #1
 8009af8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	2202      	movs	r2, #2
 8009b00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009b04:	687b      	ldr	r3, [r7, #4]
 8009b06:	681b      	ldr	r3, [r3, #0]
 8009b08:	685b      	ldr	r3, [r3, #4]
 8009b0a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009b0c:	687b      	ldr	r3, [r7, #4]
 8009b0e:	681b      	ldr	r3, [r3, #0]
 8009b10:	689b      	ldr	r3, [r3, #8]
 8009b12:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009b14:	68fb      	ldr	r3, [r7, #12]
 8009b16:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009b1a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009b1c:	683b      	ldr	r3, [r7, #0]
 8009b1e:	681b      	ldr	r3, [r3, #0]
 8009b20:	68fa      	ldr	r2, [r7, #12]
 8009b22:	4313      	orrs	r3, r2
 8009b24:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009b26:	687b      	ldr	r3, [r7, #4]
 8009b28:	681b      	ldr	r3, [r3, #0]
 8009b2a:	68fa      	ldr	r2, [r7, #12]
 8009b2c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009b2e:	687b      	ldr	r3, [r7, #4]
 8009b30:	681b      	ldr	r3, [r3, #0]
 8009b32:	4a16      	ldr	r2, [pc, #88]	; (8009b8c <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8009b34:	4293      	cmp	r3, r2
 8009b36:	d00e      	beq.n	8009b56 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8009b38:	687b      	ldr	r3, [r7, #4]
 8009b3a:	681b      	ldr	r3, [r3, #0]
 8009b3c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009b40:	d009      	beq.n	8009b56 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8009b42:	687b      	ldr	r3, [r7, #4]
 8009b44:	681b      	ldr	r3, [r3, #0]
 8009b46:	4a12      	ldr	r2, [pc, #72]	; (8009b90 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8009b48:	4293      	cmp	r3, r2
 8009b4a:	d004      	beq.n	8009b56 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8009b4c:	687b      	ldr	r3, [r7, #4]
 8009b4e:	681b      	ldr	r3, [r3, #0]
 8009b50:	4a10      	ldr	r2, [pc, #64]	; (8009b94 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8009b52:	4293      	cmp	r3, r2
 8009b54:	d10c      	bne.n	8009b70 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009b56:	68bb      	ldr	r3, [r7, #8]
 8009b58:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009b5c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009b5e:	683b      	ldr	r3, [r7, #0]
 8009b60:	685b      	ldr	r3, [r3, #4]
 8009b62:	68ba      	ldr	r2, [r7, #8]
 8009b64:	4313      	orrs	r3, r2
 8009b66:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009b68:	687b      	ldr	r3, [r7, #4]
 8009b6a:	681b      	ldr	r3, [r3, #0]
 8009b6c:	68ba      	ldr	r2, [r7, #8]
 8009b6e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009b70:	687b      	ldr	r3, [r7, #4]
 8009b72:	2201      	movs	r2, #1
 8009b74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009b78:	687b      	ldr	r3, [r7, #4]
 8009b7a:	2200      	movs	r2, #0
 8009b7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009b80:	2300      	movs	r3, #0
}
 8009b82:	4618      	mov	r0, r3
 8009b84:	3714      	adds	r7, #20
 8009b86:	46bd      	mov	sp, r7
 8009b88:	bc80      	pop	{r7}
 8009b8a:	4770      	bx	lr
 8009b8c:	40012c00 	.word	0x40012c00
 8009b90:	40000400 	.word	0x40000400
 8009b94:	40000800 	.word	0x40000800

08009b98 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8009b98:	b480      	push	{r7}
 8009b9a:	b085      	sub	sp, #20
 8009b9c:	af00      	add	r7, sp, #0
 8009b9e:	6078      	str	r0, [r7, #4]
 8009ba0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8009ba2:	2300      	movs	r3, #0
 8009ba4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8009ba6:	687b      	ldr	r3, [r7, #4]
 8009ba8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009bac:	2b01      	cmp	r3, #1
 8009bae:	d101      	bne.n	8009bb4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8009bb0:	2302      	movs	r3, #2
 8009bb2:	e03d      	b.n	8009c30 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8009bb4:	687b      	ldr	r3, [r7, #4]
 8009bb6:	2201      	movs	r2, #1
 8009bb8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8009bbc:	68fb      	ldr	r3, [r7, #12]
 8009bbe:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8009bc2:	683b      	ldr	r3, [r7, #0]
 8009bc4:	68db      	ldr	r3, [r3, #12]
 8009bc6:	4313      	orrs	r3, r2
 8009bc8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8009bca:	68fb      	ldr	r3, [r7, #12]
 8009bcc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8009bd0:	683b      	ldr	r3, [r7, #0]
 8009bd2:	689b      	ldr	r3, [r3, #8]
 8009bd4:	4313      	orrs	r3, r2
 8009bd6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8009bd8:	68fb      	ldr	r3, [r7, #12]
 8009bda:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8009bde:	683b      	ldr	r3, [r7, #0]
 8009be0:	685b      	ldr	r3, [r3, #4]
 8009be2:	4313      	orrs	r3, r2
 8009be4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8009be6:	68fb      	ldr	r3, [r7, #12]
 8009be8:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8009bec:	683b      	ldr	r3, [r7, #0]
 8009bee:	681b      	ldr	r3, [r3, #0]
 8009bf0:	4313      	orrs	r3, r2
 8009bf2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8009bf4:	68fb      	ldr	r3, [r7, #12]
 8009bf6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8009bfa:	683b      	ldr	r3, [r7, #0]
 8009bfc:	691b      	ldr	r3, [r3, #16]
 8009bfe:	4313      	orrs	r3, r2
 8009c00:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8009c02:	68fb      	ldr	r3, [r7, #12]
 8009c04:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8009c08:	683b      	ldr	r3, [r7, #0]
 8009c0a:	695b      	ldr	r3, [r3, #20]
 8009c0c:	4313      	orrs	r3, r2
 8009c0e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8009c10:	68fb      	ldr	r3, [r7, #12]
 8009c12:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8009c16:	683b      	ldr	r3, [r7, #0]
 8009c18:	69db      	ldr	r3, [r3, #28]
 8009c1a:	4313      	orrs	r3, r2
 8009c1c:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8009c1e:	687b      	ldr	r3, [r7, #4]
 8009c20:	681b      	ldr	r3, [r3, #0]
 8009c22:	68fa      	ldr	r2, [r7, #12]
 8009c24:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8009c26:	687b      	ldr	r3, [r7, #4]
 8009c28:	2200      	movs	r2, #0
 8009c2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009c2e:	2300      	movs	r3, #0
}
 8009c30:	4618      	mov	r0, r3
 8009c32:	3714      	adds	r7, #20
 8009c34:	46bd      	mov	sp, r7
 8009c36:	bc80      	pop	{r7}
 8009c38:	4770      	bx	lr

08009c3a <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009c3a:	b480      	push	{r7}
 8009c3c:	b083      	sub	sp, #12
 8009c3e:	af00      	add	r7, sp, #0
 8009c40:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009c42:	bf00      	nop
 8009c44:	370c      	adds	r7, #12
 8009c46:	46bd      	mov	sp, r7
 8009c48:	bc80      	pop	{r7}
 8009c4a:	4770      	bx	lr

08009c4c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8009c4c:	b480      	push	{r7}
 8009c4e:	b083      	sub	sp, #12
 8009c50:	af00      	add	r7, sp, #0
 8009c52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8009c54:	bf00      	nop
 8009c56:	370c      	adds	r7, #12
 8009c58:	46bd      	mov	sp, r7
 8009c5a:	bc80      	pop	{r7}
 8009c5c:	4770      	bx	lr

08009c5e <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009c5e:	b580      	push	{r7, lr}
 8009c60:	b082      	sub	sp, #8
 8009c62:	af00      	add	r7, sp, #0
 8009c64:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009c66:	687b      	ldr	r3, [r7, #4]
 8009c68:	2b00      	cmp	r3, #0
 8009c6a:	d101      	bne.n	8009c70 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009c6c:	2301      	movs	r3, #1
 8009c6e:	e03f      	b.n	8009cf0 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8009c70:	687b      	ldr	r3, [r7, #4]
 8009c72:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009c76:	b2db      	uxtb	r3, r3
 8009c78:	2b00      	cmp	r3, #0
 8009c7a:	d106      	bne.n	8009c8a <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009c7c:	687b      	ldr	r3, [r7, #4]
 8009c7e:	2200      	movs	r2, #0
 8009c80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009c84:	6878      	ldr	r0, [r7, #4]
 8009c86:	f7fb f941 	bl	8004f0c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009c8a:	687b      	ldr	r3, [r7, #4]
 8009c8c:	2224      	movs	r2, #36	; 0x24
 8009c8e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8009c92:	687b      	ldr	r3, [r7, #4]
 8009c94:	681b      	ldr	r3, [r3, #0]
 8009c96:	68da      	ldr	r2, [r3, #12]
 8009c98:	687b      	ldr	r3, [r7, #4]
 8009c9a:	681b      	ldr	r3, [r3, #0]
 8009c9c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8009ca0:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8009ca2:	6878      	ldr	r0, [r7, #4]
 8009ca4:	f000 f904 	bl	8009eb0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009ca8:	687b      	ldr	r3, [r7, #4]
 8009caa:	681b      	ldr	r3, [r3, #0]
 8009cac:	691a      	ldr	r2, [r3, #16]
 8009cae:	687b      	ldr	r3, [r7, #4]
 8009cb0:	681b      	ldr	r3, [r3, #0]
 8009cb2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8009cb6:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009cb8:	687b      	ldr	r3, [r7, #4]
 8009cba:	681b      	ldr	r3, [r3, #0]
 8009cbc:	695a      	ldr	r2, [r3, #20]
 8009cbe:	687b      	ldr	r3, [r7, #4]
 8009cc0:	681b      	ldr	r3, [r3, #0]
 8009cc2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8009cc6:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8009cc8:	687b      	ldr	r3, [r7, #4]
 8009cca:	681b      	ldr	r3, [r3, #0]
 8009ccc:	68da      	ldr	r2, [r3, #12]
 8009cce:	687b      	ldr	r3, [r7, #4]
 8009cd0:	681b      	ldr	r3, [r3, #0]
 8009cd2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8009cd6:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009cd8:	687b      	ldr	r3, [r7, #4]
 8009cda:	2200      	movs	r2, #0
 8009cdc:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8009cde:	687b      	ldr	r3, [r7, #4]
 8009ce0:	2220      	movs	r2, #32
 8009ce2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8009ce6:	687b      	ldr	r3, [r7, #4]
 8009ce8:	2220      	movs	r2, #32
 8009cea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8009cee:	2300      	movs	r3, #0
}
 8009cf0:	4618      	mov	r0, r3
 8009cf2:	3708      	adds	r7, #8
 8009cf4:	46bd      	mov	sp, r7
 8009cf6:	bd80      	pop	{r7, pc}

08009cf8 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009cf8:	b580      	push	{r7, lr}
 8009cfa:	b08a      	sub	sp, #40	; 0x28
 8009cfc:	af02      	add	r7, sp, #8
 8009cfe:	60f8      	str	r0, [r7, #12]
 8009d00:	60b9      	str	r1, [r7, #8]
 8009d02:	603b      	str	r3, [r7, #0]
 8009d04:	4613      	mov	r3, r2
 8009d06:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8009d08:	2300      	movs	r3, #0
 8009d0a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8009d0c:	68fb      	ldr	r3, [r7, #12]
 8009d0e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009d12:	b2db      	uxtb	r3, r3
 8009d14:	2b20      	cmp	r3, #32
 8009d16:	d17c      	bne.n	8009e12 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8009d18:	68bb      	ldr	r3, [r7, #8]
 8009d1a:	2b00      	cmp	r3, #0
 8009d1c:	d002      	beq.n	8009d24 <HAL_UART_Transmit+0x2c>
 8009d1e:	88fb      	ldrh	r3, [r7, #6]
 8009d20:	2b00      	cmp	r3, #0
 8009d22:	d101      	bne.n	8009d28 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8009d24:	2301      	movs	r3, #1
 8009d26:	e075      	b.n	8009e14 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8009d28:	68fb      	ldr	r3, [r7, #12]
 8009d2a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009d2e:	2b01      	cmp	r3, #1
 8009d30:	d101      	bne.n	8009d36 <HAL_UART_Transmit+0x3e>
 8009d32:	2302      	movs	r3, #2
 8009d34:	e06e      	b.n	8009e14 <HAL_UART_Transmit+0x11c>
 8009d36:	68fb      	ldr	r3, [r7, #12]
 8009d38:	2201      	movs	r2, #1
 8009d3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009d3e:	68fb      	ldr	r3, [r7, #12]
 8009d40:	2200      	movs	r2, #0
 8009d42:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8009d44:	68fb      	ldr	r3, [r7, #12]
 8009d46:	2221      	movs	r2, #33	; 0x21
 8009d48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8009d4c:	f7fc f970 	bl	8006030 <HAL_GetTick>
 8009d50:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8009d52:	68fb      	ldr	r3, [r7, #12]
 8009d54:	88fa      	ldrh	r2, [r7, #6]
 8009d56:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8009d58:	68fb      	ldr	r3, [r7, #12]
 8009d5a:	88fa      	ldrh	r2, [r7, #6]
 8009d5c:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009d5e:	68fb      	ldr	r3, [r7, #12]
 8009d60:	689b      	ldr	r3, [r3, #8]
 8009d62:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009d66:	d108      	bne.n	8009d7a <HAL_UART_Transmit+0x82>
 8009d68:	68fb      	ldr	r3, [r7, #12]
 8009d6a:	691b      	ldr	r3, [r3, #16]
 8009d6c:	2b00      	cmp	r3, #0
 8009d6e:	d104      	bne.n	8009d7a <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8009d70:	2300      	movs	r3, #0
 8009d72:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8009d74:	68bb      	ldr	r3, [r7, #8]
 8009d76:	61bb      	str	r3, [r7, #24]
 8009d78:	e003      	b.n	8009d82 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8009d7a:	68bb      	ldr	r3, [r7, #8]
 8009d7c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8009d7e:	2300      	movs	r3, #0
 8009d80:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8009d82:	68fb      	ldr	r3, [r7, #12]
 8009d84:	2200      	movs	r2, #0
 8009d86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8009d8a:	e02a      	b.n	8009de2 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8009d8c:	683b      	ldr	r3, [r7, #0]
 8009d8e:	9300      	str	r3, [sp, #0]
 8009d90:	697b      	ldr	r3, [r7, #20]
 8009d92:	2200      	movs	r2, #0
 8009d94:	2180      	movs	r1, #128	; 0x80
 8009d96:	68f8      	ldr	r0, [r7, #12]
 8009d98:	f000 f840 	bl	8009e1c <UART_WaitOnFlagUntilTimeout>
 8009d9c:	4603      	mov	r3, r0
 8009d9e:	2b00      	cmp	r3, #0
 8009da0:	d001      	beq.n	8009da6 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8009da2:	2303      	movs	r3, #3
 8009da4:	e036      	b.n	8009e14 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8009da6:	69fb      	ldr	r3, [r7, #28]
 8009da8:	2b00      	cmp	r3, #0
 8009daa:	d10b      	bne.n	8009dc4 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8009dac:	69bb      	ldr	r3, [r7, #24]
 8009dae:	881b      	ldrh	r3, [r3, #0]
 8009db0:	461a      	mov	r2, r3
 8009db2:	68fb      	ldr	r3, [r7, #12]
 8009db4:	681b      	ldr	r3, [r3, #0]
 8009db6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009dba:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8009dbc:	69bb      	ldr	r3, [r7, #24]
 8009dbe:	3302      	adds	r3, #2
 8009dc0:	61bb      	str	r3, [r7, #24]
 8009dc2:	e007      	b.n	8009dd4 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8009dc4:	69fb      	ldr	r3, [r7, #28]
 8009dc6:	781a      	ldrb	r2, [r3, #0]
 8009dc8:	68fb      	ldr	r3, [r7, #12]
 8009dca:	681b      	ldr	r3, [r3, #0]
 8009dcc:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8009dce:	69fb      	ldr	r3, [r7, #28]
 8009dd0:	3301      	adds	r3, #1
 8009dd2:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8009dd4:	68fb      	ldr	r3, [r7, #12]
 8009dd6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8009dd8:	b29b      	uxth	r3, r3
 8009dda:	3b01      	subs	r3, #1
 8009ddc:	b29a      	uxth	r2, r3
 8009dde:	68fb      	ldr	r3, [r7, #12]
 8009de0:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8009de2:	68fb      	ldr	r3, [r7, #12]
 8009de4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8009de6:	b29b      	uxth	r3, r3
 8009de8:	2b00      	cmp	r3, #0
 8009dea:	d1cf      	bne.n	8009d8c <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8009dec:	683b      	ldr	r3, [r7, #0]
 8009dee:	9300      	str	r3, [sp, #0]
 8009df0:	697b      	ldr	r3, [r7, #20]
 8009df2:	2200      	movs	r2, #0
 8009df4:	2140      	movs	r1, #64	; 0x40
 8009df6:	68f8      	ldr	r0, [r7, #12]
 8009df8:	f000 f810 	bl	8009e1c <UART_WaitOnFlagUntilTimeout>
 8009dfc:	4603      	mov	r3, r0
 8009dfe:	2b00      	cmp	r3, #0
 8009e00:	d001      	beq.n	8009e06 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8009e02:	2303      	movs	r3, #3
 8009e04:	e006      	b.n	8009e14 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8009e06:	68fb      	ldr	r3, [r7, #12]
 8009e08:	2220      	movs	r2, #32
 8009e0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8009e0e:	2300      	movs	r3, #0
 8009e10:	e000      	b.n	8009e14 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8009e12:	2302      	movs	r3, #2
  }
}
 8009e14:	4618      	mov	r0, r3
 8009e16:	3720      	adds	r7, #32
 8009e18:	46bd      	mov	sp, r7
 8009e1a:	bd80      	pop	{r7, pc}

08009e1c <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8009e1c:	b580      	push	{r7, lr}
 8009e1e:	b084      	sub	sp, #16
 8009e20:	af00      	add	r7, sp, #0
 8009e22:	60f8      	str	r0, [r7, #12]
 8009e24:	60b9      	str	r1, [r7, #8]
 8009e26:	603b      	str	r3, [r7, #0]
 8009e28:	4613      	mov	r3, r2
 8009e2a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009e2c:	e02c      	b.n	8009e88 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009e2e:	69bb      	ldr	r3, [r7, #24]
 8009e30:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009e34:	d028      	beq.n	8009e88 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8009e36:	69bb      	ldr	r3, [r7, #24]
 8009e38:	2b00      	cmp	r3, #0
 8009e3a:	d007      	beq.n	8009e4c <UART_WaitOnFlagUntilTimeout+0x30>
 8009e3c:	f7fc f8f8 	bl	8006030 <HAL_GetTick>
 8009e40:	4602      	mov	r2, r0
 8009e42:	683b      	ldr	r3, [r7, #0]
 8009e44:	1ad3      	subs	r3, r2, r3
 8009e46:	69ba      	ldr	r2, [r7, #24]
 8009e48:	429a      	cmp	r2, r3
 8009e4a:	d21d      	bcs.n	8009e88 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8009e4c:	68fb      	ldr	r3, [r7, #12]
 8009e4e:	681b      	ldr	r3, [r3, #0]
 8009e50:	68da      	ldr	r2, [r3, #12]
 8009e52:	68fb      	ldr	r3, [r7, #12]
 8009e54:	681b      	ldr	r3, [r3, #0]
 8009e56:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8009e5a:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009e5c:	68fb      	ldr	r3, [r7, #12]
 8009e5e:	681b      	ldr	r3, [r3, #0]
 8009e60:	695a      	ldr	r2, [r3, #20]
 8009e62:	68fb      	ldr	r3, [r7, #12]
 8009e64:	681b      	ldr	r3, [r3, #0]
 8009e66:	f022 0201 	bic.w	r2, r2, #1
 8009e6a:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8009e6c:	68fb      	ldr	r3, [r7, #12]
 8009e6e:	2220      	movs	r2, #32
 8009e70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8009e74:	68fb      	ldr	r3, [r7, #12]
 8009e76:	2220      	movs	r2, #32
 8009e78:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8009e7c:	68fb      	ldr	r3, [r7, #12]
 8009e7e:	2200      	movs	r2, #0
 8009e80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8009e84:	2303      	movs	r3, #3
 8009e86:	e00f      	b.n	8009ea8 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009e88:	68fb      	ldr	r3, [r7, #12]
 8009e8a:	681b      	ldr	r3, [r3, #0]
 8009e8c:	681a      	ldr	r2, [r3, #0]
 8009e8e:	68bb      	ldr	r3, [r7, #8]
 8009e90:	4013      	ands	r3, r2
 8009e92:	68ba      	ldr	r2, [r7, #8]
 8009e94:	429a      	cmp	r2, r3
 8009e96:	bf0c      	ite	eq
 8009e98:	2301      	moveq	r3, #1
 8009e9a:	2300      	movne	r3, #0
 8009e9c:	b2db      	uxtb	r3, r3
 8009e9e:	461a      	mov	r2, r3
 8009ea0:	79fb      	ldrb	r3, [r7, #7]
 8009ea2:	429a      	cmp	r2, r3
 8009ea4:	d0c3      	beq.n	8009e2e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8009ea6:	2300      	movs	r3, #0
}
 8009ea8:	4618      	mov	r0, r3
 8009eaa:	3710      	adds	r7, #16
 8009eac:	46bd      	mov	sp, r7
 8009eae:	bd80      	pop	{r7, pc}

08009eb0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009eb0:	b580      	push	{r7, lr}
 8009eb2:	b084      	sub	sp, #16
 8009eb4:	af00      	add	r7, sp, #0
 8009eb6:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009eb8:	687b      	ldr	r3, [r7, #4]
 8009eba:	681b      	ldr	r3, [r3, #0]
 8009ebc:	691b      	ldr	r3, [r3, #16]
 8009ebe:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8009ec2:	687b      	ldr	r3, [r7, #4]
 8009ec4:	68da      	ldr	r2, [r3, #12]
 8009ec6:	687b      	ldr	r3, [r7, #4]
 8009ec8:	681b      	ldr	r3, [r3, #0]
 8009eca:	430a      	orrs	r2, r1
 8009ecc:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8009ece:	687b      	ldr	r3, [r7, #4]
 8009ed0:	689a      	ldr	r2, [r3, #8]
 8009ed2:	687b      	ldr	r3, [r7, #4]
 8009ed4:	691b      	ldr	r3, [r3, #16]
 8009ed6:	431a      	orrs	r2, r3
 8009ed8:	687b      	ldr	r3, [r7, #4]
 8009eda:	695b      	ldr	r3, [r3, #20]
 8009edc:	4313      	orrs	r3, r2
 8009ede:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8009ee0:	687b      	ldr	r3, [r7, #4]
 8009ee2:	681b      	ldr	r3, [r3, #0]
 8009ee4:	68db      	ldr	r3, [r3, #12]
 8009ee6:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8009eea:	f023 030c 	bic.w	r3, r3, #12
 8009eee:	687a      	ldr	r2, [r7, #4]
 8009ef0:	6812      	ldr	r2, [r2, #0]
 8009ef2:	68b9      	ldr	r1, [r7, #8]
 8009ef4:	430b      	orrs	r3, r1
 8009ef6:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8009ef8:	687b      	ldr	r3, [r7, #4]
 8009efa:	681b      	ldr	r3, [r3, #0]
 8009efc:	695b      	ldr	r3, [r3, #20]
 8009efe:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8009f02:	687b      	ldr	r3, [r7, #4]
 8009f04:	699a      	ldr	r2, [r3, #24]
 8009f06:	687b      	ldr	r3, [r7, #4]
 8009f08:	681b      	ldr	r3, [r3, #0]
 8009f0a:	430a      	orrs	r2, r1
 8009f0c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8009f0e:	687b      	ldr	r3, [r7, #4]
 8009f10:	681b      	ldr	r3, [r3, #0]
 8009f12:	4a2c      	ldr	r2, [pc, #176]	; (8009fc4 <UART_SetConfig+0x114>)
 8009f14:	4293      	cmp	r3, r2
 8009f16:	d103      	bne.n	8009f20 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8009f18:	f7fd faf2 	bl	8007500 <HAL_RCC_GetPCLK2Freq>
 8009f1c:	60f8      	str	r0, [r7, #12]
 8009f1e:	e002      	b.n	8009f26 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8009f20:	f7fd fada 	bl	80074d8 <HAL_RCC_GetPCLK1Freq>
 8009f24:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8009f26:	68fa      	ldr	r2, [r7, #12]
 8009f28:	4613      	mov	r3, r2
 8009f2a:	009b      	lsls	r3, r3, #2
 8009f2c:	4413      	add	r3, r2
 8009f2e:	009a      	lsls	r2, r3, #2
 8009f30:	441a      	add	r2, r3
 8009f32:	687b      	ldr	r3, [r7, #4]
 8009f34:	685b      	ldr	r3, [r3, #4]
 8009f36:	009b      	lsls	r3, r3, #2
 8009f38:	fbb2 f3f3 	udiv	r3, r2, r3
 8009f3c:	4a22      	ldr	r2, [pc, #136]	; (8009fc8 <UART_SetConfig+0x118>)
 8009f3e:	fba2 2303 	umull	r2, r3, r2, r3
 8009f42:	095b      	lsrs	r3, r3, #5
 8009f44:	0119      	lsls	r1, r3, #4
 8009f46:	68fa      	ldr	r2, [r7, #12]
 8009f48:	4613      	mov	r3, r2
 8009f4a:	009b      	lsls	r3, r3, #2
 8009f4c:	4413      	add	r3, r2
 8009f4e:	009a      	lsls	r2, r3, #2
 8009f50:	441a      	add	r2, r3
 8009f52:	687b      	ldr	r3, [r7, #4]
 8009f54:	685b      	ldr	r3, [r3, #4]
 8009f56:	009b      	lsls	r3, r3, #2
 8009f58:	fbb2 f2f3 	udiv	r2, r2, r3
 8009f5c:	4b1a      	ldr	r3, [pc, #104]	; (8009fc8 <UART_SetConfig+0x118>)
 8009f5e:	fba3 0302 	umull	r0, r3, r3, r2
 8009f62:	095b      	lsrs	r3, r3, #5
 8009f64:	2064      	movs	r0, #100	; 0x64
 8009f66:	fb00 f303 	mul.w	r3, r0, r3
 8009f6a:	1ad3      	subs	r3, r2, r3
 8009f6c:	011b      	lsls	r3, r3, #4
 8009f6e:	3332      	adds	r3, #50	; 0x32
 8009f70:	4a15      	ldr	r2, [pc, #84]	; (8009fc8 <UART_SetConfig+0x118>)
 8009f72:	fba2 2303 	umull	r2, r3, r2, r3
 8009f76:	095b      	lsrs	r3, r3, #5
 8009f78:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009f7c:	4419      	add	r1, r3
 8009f7e:	68fa      	ldr	r2, [r7, #12]
 8009f80:	4613      	mov	r3, r2
 8009f82:	009b      	lsls	r3, r3, #2
 8009f84:	4413      	add	r3, r2
 8009f86:	009a      	lsls	r2, r3, #2
 8009f88:	441a      	add	r2, r3
 8009f8a:	687b      	ldr	r3, [r7, #4]
 8009f8c:	685b      	ldr	r3, [r3, #4]
 8009f8e:	009b      	lsls	r3, r3, #2
 8009f90:	fbb2 f2f3 	udiv	r2, r2, r3
 8009f94:	4b0c      	ldr	r3, [pc, #48]	; (8009fc8 <UART_SetConfig+0x118>)
 8009f96:	fba3 0302 	umull	r0, r3, r3, r2
 8009f9a:	095b      	lsrs	r3, r3, #5
 8009f9c:	2064      	movs	r0, #100	; 0x64
 8009f9e:	fb00 f303 	mul.w	r3, r0, r3
 8009fa2:	1ad3      	subs	r3, r2, r3
 8009fa4:	011b      	lsls	r3, r3, #4
 8009fa6:	3332      	adds	r3, #50	; 0x32
 8009fa8:	4a07      	ldr	r2, [pc, #28]	; (8009fc8 <UART_SetConfig+0x118>)
 8009faa:	fba2 2303 	umull	r2, r3, r2, r3
 8009fae:	095b      	lsrs	r3, r3, #5
 8009fb0:	f003 020f 	and.w	r2, r3, #15
 8009fb4:	687b      	ldr	r3, [r7, #4]
 8009fb6:	681b      	ldr	r3, [r3, #0]
 8009fb8:	440a      	add	r2, r1
 8009fba:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8009fbc:	bf00      	nop
 8009fbe:	3710      	adds	r7, #16
 8009fc0:	46bd      	mov	sp, r7
 8009fc2:	bd80      	pop	{r7, pc}
 8009fc4:	40013800 	.word	0x40013800
 8009fc8:	51eb851f 	.word	0x51eb851f

08009fcc <acos>:
 8009fcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009fce:	4604      	mov	r4, r0
 8009fd0:	460d      	mov	r5, r1
 8009fd2:	f000 f901 	bl	800a1d8 <__ieee754_acos>
 8009fd6:	4b11      	ldr	r3, [pc, #68]	; (800a01c <acos+0x50>)
 8009fd8:	4606      	mov	r6, r0
 8009fda:	f993 3000 	ldrsb.w	r3, [r3]
 8009fde:	460f      	mov	r7, r1
 8009fe0:	3301      	adds	r3, #1
 8009fe2:	d018      	beq.n	800a016 <acos+0x4a>
 8009fe4:	4622      	mov	r2, r4
 8009fe6:	462b      	mov	r3, r5
 8009fe8:	4620      	mov	r0, r4
 8009fea:	4629      	mov	r1, r5
 8009fec:	f7f6 fd0e 	bl	8000a0c <__aeabi_dcmpun>
 8009ff0:	b988      	cbnz	r0, 800a016 <acos+0x4a>
 8009ff2:	4620      	mov	r0, r4
 8009ff4:	4629      	mov	r1, r5
 8009ff6:	f001 f8fd 	bl	800b1f4 <fabs>
 8009ffa:	2200      	movs	r2, #0
 8009ffc:	4b08      	ldr	r3, [pc, #32]	; (800a020 <acos+0x54>)
 8009ffe:	f7f6 fcfb 	bl	80009f8 <__aeabi_dcmpgt>
 800a002:	b140      	cbz	r0, 800a016 <acos+0x4a>
 800a004:	f001 fa16 	bl	800b434 <__errno>
 800a008:	2321      	movs	r3, #33	; 0x21
 800a00a:	6003      	str	r3, [r0, #0]
 800a00c:	4805      	ldr	r0, [pc, #20]	; (800a024 <acos+0x58>)
 800a00e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800a012:	f001 b8f9 	b.w	800b208 <nan>
 800a016:	4630      	mov	r0, r6
 800a018:	4639      	mov	r1, r7
 800a01a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a01c:	20000055 	.word	0x20000055
 800a020:	3ff00000 	.word	0x3ff00000
 800a024:	0800e988 	.word	0x0800e988

0800a028 <pow>:
 800a028:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a02c:	461f      	mov	r7, r3
 800a02e:	4680      	mov	r8, r0
 800a030:	4689      	mov	r9, r1
 800a032:	4616      	mov	r6, r2
 800a034:	f000 fb1c 	bl	800a670 <__ieee754_pow>
 800a038:	4b4d      	ldr	r3, [pc, #308]	; (800a170 <pow+0x148>)
 800a03a:	4604      	mov	r4, r0
 800a03c:	f993 3000 	ldrsb.w	r3, [r3]
 800a040:	460d      	mov	r5, r1
 800a042:	3301      	adds	r3, #1
 800a044:	d015      	beq.n	800a072 <pow+0x4a>
 800a046:	4632      	mov	r2, r6
 800a048:	463b      	mov	r3, r7
 800a04a:	4630      	mov	r0, r6
 800a04c:	4639      	mov	r1, r7
 800a04e:	f7f6 fcdd 	bl	8000a0c <__aeabi_dcmpun>
 800a052:	b970      	cbnz	r0, 800a072 <pow+0x4a>
 800a054:	4642      	mov	r2, r8
 800a056:	464b      	mov	r3, r9
 800a058:	4640      	mov	r0, r8
 800a05a:	4649      	mov	r1, r9
 800a05c:	f7f6 fcd6 	bl	8000a0c <__aeabi_dcmpun>
 800a060:	2200      	movs	r2, #0
 800a062:	2300      	movs	r3, #0
 800a064:	b148      	cbz	r0, 800a07a <pow+0x52>
 800a066:	4630      	mov	r0, r6
 800a068:	4639      	mov	r1, r7
 800a06a:	f7f6 fc9d 	bl	80009a8 <__aeabi_dcmpeq>
 800a06e:	2800      	cmp	r0, #0
 800a070:	d17b      	bne.n	800a16a <pow+0x142>
 800a072:	4620      	mov	r0, r4
 800a074:	4629      	mov	r1, r5
 800a076:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a07a:	4640      	mov	r0, r8
 800a07c:	4649      	mov	r1, r9
 800a07e:	f7f6 fc93 	bl	80009a8 <__aeabi_dcmpeq>
 800a082:	b1e0      	cbz	r0, 800a0be <pow+0x96>
 800a084:	2200      	movs	r2, #0
 800a086:	2300      	movs	r3, #0
 800a088:	4630      	mov	r0, r6
 800a08a:	4639      	mov	r1, r7
 800a08c:	f7f6 fc8c 	bl	80009a8 <__aeabi_dcmpeq>
 800a090:	2800      	cmp	r0, #0
 800a092:	d16a      	bne.n	800a16a <pow+0x142>
 800a094:	4630      	mov	r0, r6
 800a096:	4639      	mov	r1, r7
 800a098:	f001 f8af 	bl	800b1fa <finite>
 800a09c:	2800      	cmp	r0, #0
 800a09e:	d0e8      	beq.n	800a072 <pow+0x4a>
 800a0a0:	2200      	movs	r2, #0
 800a0a2:	2300      	movs	r3, #0
 800a0a4:	4630      	mov	r0, r6
 800a0a6:	4639      	mov	r1, r7
 800a0a8:	f7f6 fc88 	bl	80009bc <__aeabi_dcmplt>
 800a0ac:	2800      	cmp	r0, #0
 800a0ae:	d0e0      	beq.n	800a072 <pow+0x4a>
 800a0b0:	f001 f9c0 	bl	800b434 <__errno>
 800a0b4:	2321      	movs	r3, #33	; 0x21
 800a0b6:	2400      	movs	r4, #0
 800a0b8:	6003      	str	r3, [r0, #0]
 800a0ba:	4d2e      	ldr	r5, [pc, #184]	; (800a174 <pow+0x14c>)
 800a0bc:	e7d9      	b.n	800a072 <pow+0x4a>
 800a0be:	4620      	mov	r0, r4
 800a0c0:	4629      	mov	r1, r5
 800a0c2:	f001 f89a 	bl	800b1fa <finite>
 800a0c6:	bba8      	cbnz	r0, 800a134 <pow+0x10c>
 800a0c8:	4640      	mov	r0, r8
 800a0ca:	4649      	mov	r1, r9
 800a0cc:	f001 f895 	bl	800b1fa <finite>
 800a0d0:	b380      	cbz	r0, 800a134 <pow+0x10c>
 800a0d2:	4630      	mov	r0, r6
 800a0d4:	4639      	mov	r1, r7
 800a0d6:	f001 f890 	bl	800b1fa <finite>
 800a0da:	b358      	cbz	r0, 800a134 <pow+0x10c>
 800a0dc:	4622      	mov	r2, r4
 800a0de:	462b      	mov	r3, r5
 800a0e0:	4620      	mov	r0, r4
 800a0e2:	4629      	mov	r1, r5
 800a0e4:	f7f6 fc92 	bl	8000a0c <__aeabi_dcmpun>
 800a0e8:	b160      	cbz	r0, 800a104 <pow+0xdc>
 800a0ea:	f001 f9a3 	bl	800b434 <__errno>
 800a0ee:	2321      	movs	r3, #33	; 0x21
 800a0f0:	2200      	movs	r2, #0
 800a0f2:	6003      	str	r3, [r0, #0]
 800a0f4:	2300      	movs	r3, #0
 800a0f6:	4610      	mov	r0, r2
 800a0f8:	4619      	mov	r1, r3
 800a0fa:	f7f6 fb17 	bl	800072c <__aeabi_ddiv>
 800a0fe:	4604      	mov	r4, r0
 800a100:	460d      	mov	r5, r1
 800a102:	e7b6      	b.n	800a072 <pow+0x4a>
 800a104:	f001 f996 	bl	800b434 <__errno>
 800a108:	2322      	movs	r3, #34	; 0x22
 800a10a:	2200      	movs	r2, #0
 800a10c:	6003      	str	r3, [r0, #0]
 800a10e:	4649      	mov	r1, r9
 800a110:	2300      	movs	r3, #0
 800a112:	4640      	mov	r0, r8
 800a114:	f7f6 fc52 	bl	80009bc <__aeabi_dcmplt>
 800a118:	2400      	movs	r4, #0
 800a11a:	b148      	cbz	r0, 800a130 <pow+0x108>
 800a11c:	4630      	mov	r0, r6
 800a11e:	4639      	mov	r1, r7
 800a120:	f001 f878 	bl	800b214 <rint>
 800a124:	4632      	mov	r2, r6
 800a126:	463b      	mov	r3, r7
 800a128:	f7f6 fc3e 	bl	80009a8 <__aeabi_dcmpeq>
 800a12c:	2800      	cmp	r0, #0
 800a12e:	d0c4      	beq.n	800a0ba <pow+0x92>
 800a130:	4d11      	ldr	r5, [pc, #68]	; (800a178 <pow+0x150>)
 800a132:	e79e      	b.n	800a072 <pow+0x4a>
 800a134:	2200      	movs	r2, #0
 800a136:	2300      	movs	r3, #0
 800a138:	4620      	mov	r0, r4
 800a13a:	4629      	mov	r1, r5
 800a13c:	f7f6 fc34 	bl	80009a8 <__aeabi_dcmpeq>
 800a140:	2800      	cmp	r0, #0
 800a142:	d096      	beq.n	800a072 <pow+0x4a>
 800a144:	4640      	mov	r0, r8
 800a146:	4649      	mov	r1, r9
 800a148:	f001 f857 	bl	800b1fa <finite>
 800a14c:	2800      	cmp	r0, #0
 800a14e:	d090      	beq.n	800a072 <pow+0x4a>
 800a150:	4630      	mov	r0, r6
 800a152:	4639      	mov	r1, r7
 800a154:	f001 f851 	bl	800b1fa <finite>
 800a158:	2800      	cmp	r0, #0
 800a15a:	d08a      	beq.n	800a072 <pow+0x4a>
 800a15c:	f001 f96a 	bl	800b434 <__errno>
 800a160:	2322      	movs	r3, #34	; 0x22
 800a162:	2400      	movs	r4, #0
 800a164:	2500      	movs	r5, #0
 800a166:	6003      	str	r3, [r0, #0]
 800a168:	e783      	b.n	800a072 <pow+0x4a>
 800a16a:	2400      	movs	r4, #0
 800a16c:	4d03      	ldr	r5, [pc, #12]	; (800a17c <pow+0x154>)
 800a16e:	e780      	b.n	800a072 <pow+0x4a>
 800a170:	20000055 	.word	0x20000055
 800a174:	fff00000 	.word	0xfff00000
 800a178:	7ff00000 	.word	0x7ff00000
 800a17c:	3ff00000 	.word	0x3ff00000

0800a180 <sqrt>:
 800a180:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a182:	4606      	mov	r6, r0
 800a184:	460f      	mov	r7, r1
 800a186:	f000 ff89 	bl	800b09c <__ieee754_sqrt>
 800a18a:	4b12      	ldr	r3, [pc, #72]	; (800a1d4 <sqrt+0x54>)
 800a18c:	4604      	mov	r4, r0
 800a18e:	f993 3000 	ldrsb.w	r3, [r3]
 800a192:	460d      	mov	r5, r1
 800a194:	3301      	adds	r3, #1
 800a196:	d019      	beq.n	800a1cc <sqrt+0x4c>
 800a198:	4632      	mov	r2, r6
 800a19a:	463b      	mov	r3, r7
 800a19c:	4630      	mov	r0, r6
 800a19e:	4639      	mov	r1, r7
 800a1a0:	f7f6 fc34 	bl	8000a0c <__aeabi_dcmpun>
 800a1a4:	b990      	cbnz	r0, 800a1cc <sqrt+0x4c>
 800a1a6:	2200      	movs	r2, #0
 800a1a8:	2300      	movs	r3, #0
 800a1aa:	4630      	mov	r0, r6
 800a1ac:	4639      	mov	r1, r7
 800a1ae:	f7f6 fc05 	bl	80009bc <__aeabi_dcmplt>
 800a1b2:	b158      	cbz	r0, 800a1cc <sqrt+0x4c>
 800a1b4:	f001 f93e 	bl	800b434 <__errno>
 800a1b8:	2321      	movs	r3, #33	; 0x21
 800a1ba:	2200      	movs	r2, #0
 800a1bc:	6003      	str	r3, [r0, #0]
 800a1be:	2300      	movs	r3, #0
 800a1c0:	4610      	mov	r0, r2
 800a1c2:	4619      	mov	r1, r3
 800a1c4:	f7f6 fab2 	bl	800072c <__aeabi_ddiv>
 800a1c8:	4604      	mov	r4, r0
 800a1ca:	460d      	mov	r5, r1
 800a1cc:	4620      	mov	r0, r4
 800a1ce:	4629      	mov	r1, r5
 800a1d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a1d2:	bf00      	nop
 800a1d4:	20000055 	.word	0x20000055

0800a1d8 <__ieee754_acos>:
 800a1d8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a1dc:	4cb2      	ldr	r4, [pc, #712]	; (800a4a8 <__ieee754_acos+0x2d0>)
 800a1de:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800a1e2:	42a3      	cmp	r3, r4
 800a1e4:	4607      	mov	r7, r0
 800a1e6:	460e      	mov	r6, r1
 800a1e8:	dd16      	ble.n	800a218 <__ieee754_acos+0x40>
 800a1ea:	f103 4340 	add.w	r3, r3, #3221225472	; 0xc0000000
 800a1ee:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800a1f2:	4303      	orrs	r3, r0
 800a1f4:	d107      	bne.n	800a206 <__ieee754_acos+0x2e>
 800a1f6:	2900      	cmp	r1, #0
 800a1f8:	f300 8202 	bgt.w	800a600 <__ieee754_acos+0x428>
 800a1fc:	a190      	add	r1, pc, #576	; (adr r1, 800a440 <__ieee754_acos+0x268>)
 800a1fe:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a202:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a206:	4602      	mov	r2, r0
 800a208:	460b      	mov	r3, r1
 800a20a:	f7f5 ffad 	bl	8000168 <__aeabi_dsub>
 800a20e:	4602      	mov	r2, r0
 800a210:	460b      	mov	r3, r1
 800a212:	f7f6 fa8b 	bl	800072c <__aeabi_ddiv>
 800a216:	e7f4      	b.n	800a202 <__ieee754_acos+0x2a>
 800a218:	4ca4      	ldr	r4, [pc, #656]	; (800a4ac <__ieee754_acos+0x2d4>)
 800a21a:	42a3      	cmp	r3, r4
 800a21c:	f300 8083 	bgt.w	800a326 <__ieee754_acos+0x14e>
 800a220:	4aa3      	ldr	r2, [pc, #652]	; (800a4b0 <__ieee754_acos+0x2d8>)
 800a222:	4293      	cmp	r3, r2
 800a224:	f340 81ef 	ble.w	800a606 <__ieee754_acos+0x42e>
 800a228:	4602      	mov	r2, r0
 800a22a:	460b      	mov	r3, r1
 800a22c:	f7f6 f954 	bl	80004d8 <__aeabi_dmul>
 800a230:	a385      	add	r3, pc, #532	; (adr r3, 800a448 <__ieee754_acos+0x270>)
 800a232:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a236:	4604      	mov	r4, r0
 800a238:	460d      	mov	r5, r1
 800a23a:	f7f6 f94d 	bl	80004d8 <__aeabi_dmul>
 800a23e:	a384      	add	r3, pc, #528	; (adr r3, 800a450 <__ieee754_acos+0x278>)
 800a240:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a244:	f7f5 ff92 	bl	800016c <__adddf3>
 800a248:	4622      	mov	r2, r4
 800a24a:	462b      	mov	r3, r5
 800a24c:	f7f6 f944 	bl	80004d8 <__aeabi_dmul>
 800a250:	a381      	add	r3, pc, #516	; (adr r3, 800a458 <__ieee754_acos+0x280>)
 800a252:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a256:	f7f5 ff87 	bl	8000168 <__aeabi_dsub>
 800a25a:	4622      	mov	r2, r4
 800a25c:	462b      	mov	r3, r5
 800a25e:	f7f6 f93b 	bl	80004d8 <__aeabi_dmul>
 800a262:	a37f      	add	r3, pc, #508	; (adr r3, 800a460 <__ieee754_acos+0x288>)
 800a264:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a268:	f7f5 ff80 	bl	800016c <__adddf3>
 800a26c:	4622      	mov	r2, r4
 800a26e:	462b      	mov	r3, r5
 800a270:	f7f6 f932 	bl	80004d8 <__aeabi_dmul>
 800a274:	a37c      	add	r3, pc, #496	; (adr r3, 800a468 <__ieee754_acos+0x290>)
 800a276:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a27a:	f7f5 ff75 	bl	8000168 <__aeabi_dsub>
 800a27e:	4622      	mov	r2, r4
 800a280:	462b      	mov	r3, r5
 800a282:	f7f6 f929 	bl	80004d8 <__aeabi_dmul>
 800a286:	a37a      	add	r3, pc, #488	; (adr r3, 800a470 <__ieee754_acos+0x298>)
 800a288:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a28c:	f7f5 ff6e 	bl	800016c <__adddf3>
 800a290:	4622      	mov	r2, r4
 800a292:	462b      	mov	r3, r5
 800a294:	f7f6 f920 	bl	80004d8 <__aeabi_dmul>
 800a298:	a377      	add	r3, pc, #476	; (adr r3, 800a478 <__ieee754_acos+0x2a0>)
 800a29a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a29e:	4680      	mov	r8, r0
 800a2a0:	4689      	mov	r9, r1
 800a2a2:	4620      	mov	r0, r4
 800a2a4:	4629      	mov	r1, r5
 800a2a6:	f7f6 f917 	bl	80004d8 <__aeabi_dmul>
 800a2aa:	a375      	add	r3, pc, #468	; (adr r3, 800a480 <__ieee754_acos+0x2a8>)
 800a2ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2b0:	f7f5 ff5a 	bl	8000168 <__aeabi_dsub>
 800a2b4:	4622      	mov	r2, r4
 800a2b6:	462b      	mov	r3, r5
 800a2b8:	f7f6 f90e 	bl	80004d8 <__aeabi_dmul>
 800a2bc:	a372      	add	r3, pc, #456	; (adr r3, 800a488 <__ieee754_acos+0x2b0>)
 800a2be:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2c2:	f7f5 ff53 	bl	800016c <__adddf3>
 800a2c6:	4622      	mov	r2, r4
 800a2c8:	462b      	mov	r3, r5
 800a2ca:	f7f6 f905 	bl	80004d8 <__aeabi_dmul>
 800a2ce:	a370      	add	r3, pc, #448	; (adr r3, 800a490 <__ieee754_acos+0x2b8>)
 800a2d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2d4:	f7f5 ff48 	bl	8000168 <__aeabi_dsub>
 800a2d8:	4622      	mov	r2, r4
 800a2da:	462b      	mov	r3, r5
 800a2dc:	f7f6 f8fc 	bl	80004d8 <__aeabi_dmul>
 800a2e0:	2200      	movs	r2, #0
 800a2e2:	4b74      	ldr	r3, [pc, #464]	; (800a4b4 <__ieee754_acos+0x2dc>)
 800a2e4:	f7f5 ff42 	bl	800016c <__adddf3>
 800a2e8:	4602      	mov	r2, r0
 800a2ea:	460b      	mov	r3, r1
 800a2ec:	4640      	mov	r0, r8
 800a2ee:	4649      	mov	r1, r9
 800a2f0:	f7f6 fa1c 	bl	800072c <__aeabi_ddiv>
 800a2f4:	463a      	mov	r2, r7
 800a2f6:	4633      	mov	r3, r6
 800a2f8:	f7f6 f8ee 	bl	80004d8 <__aeabi_dmul>
 800a2fc:	4602      	mov	r2, r0
 800a2fe:	460b      	mov	r3, r1
 800a300:	a165      	add	r1, pc, #404	; (adr r1, 800a498 <__ieee754_acos+0x2c0>)
 800a302:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a306:	f7f5 ff2f 	bl	8000168 <__aeabi_dsub>
 800a30a:	4602      	mov	r2, r0
 800a30c:	460b      	mov	r3, r1
 800a30e:	4638      	mov	r0, r7
 800a310:	4631      	mov	r1, r6
 800a312:	f7f5 ff29 	bl	8000168 <__aeabi_dsub>
 800a316:	4602      	mov	r2, r0
 800a318:	460b      	mov	r3, r1
 800a31a:	a161      	add	r1, pc, #388	; (adr r1, 800a4a0 <__ieee754_acos+0x2c8>)
 800a31c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a320:	f7f5 ff22 	bl	8000168 <__aeabi_dsub>
 800a324:	e76d      	b.n	800a202 <__ieee754_acos+0x2a>
 800a326:	2900      	cmp	r1, #0
 800a328:	f280 80c8 	bge.w	800a4bc <__ieee754_acos+0x2e4>
 800a32c:	2200      	movs	r2, #0
 800a32e:	4b61      	ldr	r3, [pc, #388]	; (800a4b4 <__ieee754_acos+0x2dc>)
 800a330:	f7f5 ff1c 	bl	800016c <__adddf3>
 800a334:	2200      	movs	r2, #0
 800a336:	4b60      	ldr	r3, [pc, #384]	; (800a4b8 <__ieee754_acos+0x2e0>)
 800a338:	f7f6 f8ce 	bl	80004d8 <__aeabi_dmul>
 800a33c:	a342      	add	r3, pc, #264	; (adr r3, 800a448 <__ieee754_acos+0x270>)
 800a33e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a342:	4604      	mov	r4, r0
 800a344:	460d      	mov	r5, r1
 800a346:	f7f6 f8c7 	bl	80004d8 <__aeabi_dmul>
 800a34a:	a341      	add	r3, pc, #260	; (adr r3, 800a450 <__ieee754_acos+0x278>)
 800a34c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a350:	f7f5 ff0c 	bl	800016c <__adddf3>
 800a354:	4622      	mov	r2, r4
 800a356:	462b      	mov	r3, r5
 800a358:	f7f6 f8be 	bl	80004d8 <__aeabi_dmul>
 800a35c:	a33e      	add	r3, pc, #248	; (adr r3, 800a458 <__ieee754_acos+0x280>)
 800a35e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a362:	f7f5 ff01 	bl	8000168 <__aeabi_dsub>
 800a366:	4622      	mov	r2, r4
 800a368:	462b      	mov	r3, r5
 800a36a:	f7f6 f8b5 	bl	80004d8 <__aeabi_dmul>
 800a36e:	a33c      	add	r3, pc, #240	; (adr r3, 800a460 <__ieee754_acos+0x288>)
 800a370:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a374:	f7f5 fefa 	bl	800016c <__adddf3>
 800a378:	4622      	mov	r2, r4
 800a37a:	462b      	mov	r3, r5
 800a37c:	f7f6 f8ac 	bl	80004d8 <__aeabi_dmul>
 800a380:	a339      	add	r3, pc, #228	; (adr r3, 800a468 <__ieee754_acos+0x290>)
 800a382:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a386:	f7f5 feef 	bl	8000168 <__aeabi_dsub>
 800a38a:	4622      	mov	r2, r4
 800a38c:	462b      	mov	r3, r5
 800a38e:	f7f6 f8a3 	bl	80004d8 <__aeabi_dmul>
 800a392:	a337      	add	r3, pc, #220	; (adr r3, 800a470 <__ieee754_acos+0x298>)
 800a394:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a398:	f7f5 fee8 	bl	800016c <__adddf3>
 800a39c:	4622      	mov	r2, r4
 800a39e:	462b      	mov	r3, r5
 800a3a0:	f7f6 f89a 	bl	80004d8 <__aeabi_dmul>
 800a3a4:	4680      	mov	r8, r0
 800a3a6:	4689      	mov	r9, r1
 800a3a8:	4620      	mov	r0, r4
 800a3aa:	4629      	mov	r1, r5
 800a3ac:	f000 fe76 	bl	800b09c <__ieee754_sqrt>
 800a3b0:	a331      	add	r3, pc, #196	; (adr r3, 800a478 <__ieee754_acos+0x2a0>)
 800a3b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3b6:	4606      	mov	r6, r0
 800a3b8:	460f      	mov	r7, r1
 800a3ba:	4620      	mov	r0, r4
 800a3bc:	4629      	mov	r1, r5
 800a3be:	f7f6 f88b 	bl	80004d8 <__aeabi_dmul>
 800a3c2:	a32f      	add	r3, pc, #188	; (adr r3, 800a480 <__ieee754_acos+0x2a8>)
 800a3c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3c8:	f7f5 fece 	bl	8000168 <__aeabi_dsub>
 800a3cc:	4622      	mov	r2, r4
 800a3ce:	462b      	mov	r3, r5
 800a3d0:	f7f6 f882 	bl	80004d8 <__aeabi_dmul>
 800a3d4:	a32c      	add	r3, pc, #176	; (adr r3, 800a488 <__ieee754_acos+0x2b0>)
 800a3d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3da:	f7f5 fec7 	bl	800016c <__adddf3>
 800a3de:	4622      	mov	r2, r4
 800a3e0:	462b      	mov	r3, r5
 800a3e2:	f7f6 f879 	bl	80004d8 <__aeabi_dmul>
 800a3e6:	a32a      	add	r3, pc, #168	; (adr r3, 800a490 <__ieee754_acos+0x2b8>)
 800a3e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3ec:	f7f5 febc 	bl	8000168 <__aeabi_dsub>
 800a3f0:	4622      	mov	r2, r4
 800a3f2:	462b      	mov	r3, r5
 800a3f4:	f7f6 f870 	bl	80004d8 <__aeabi_dmul>
 800a3f8:	2200      	movs	r2, #0
 800a3fa:	4b2e      	ldr	r3, [pc, #184]	; (800a4b4 <__ieee754_acos+0x2dc>)
 800a3fc:	f7f5 feb6 	bl	800016c <__adddf3>
 800a400:	4602      	mov	r2, r0
 800a402:	460b      	mov	r3, r1
 800a404:	4640      	mov	r0, r8
 800a406:	4649      	mov	r1, r9
 800a408:	f7f6 f990 	bl	800072c <__aeabi_ddiv>
 800a40c:	4632      	mov	r2, r6
 800a40e:	463b      	mov	r3, r7
 800a410:	f7f6 f862 	bl	80004d8 <__aeabi_dmul>
 800a414:	a320      	add	r3, pc, #128	; (adr r3, 800a498 <__ieee754_acos+0x2c0>)
 800a416:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a41a:	f7f5 fea5 	bl	8000168 <__aeabi_dsub>
 800a41e:	4632      	mov	r2, r6
 800a420:	463b      	mov	r3, r7
 800a422:	f7f5 fea3 	bl	800016c <__adddf3>
 800a426:	4602      	mov	r2, r0
 800a428:	460b      	mov	r3, r1
 800a42a:	f7f5 fe9f 	bl	800016c <__adddf3>
 800a42e:	4602      	mov	r2, r0
 800a430:	460b      	mov	r3, r1
 800a432:	a103      	add	r1, pc, #12	; (adr r1, 800a440 <__ieee754_acos+0x268>)
 800a434:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a438:	e772      	b.n	800a320 <__ieee754_acos+0x148>
 800a43a:	bf00      	nop
 800a43c:	f3af 8000 	nop.w
 800a440:	54442d18 	.word	0x54442d18
 800a444:	400921fb 	.word	0x400921fb
 800a448:	0dfdf709 	.word	0x0dfdf709
 800a44c:	3f023de1 	.word	0x3f023de1
 800a450:	7501b288 	.word	0x7501b288
 800a454:	3f49efe0 	.word	0x3f49efe0
 800a458:	b5688f3b 	.word	0xb5688f3b
 800a45c:	3fa48228 	.word	0x3fa48228
 800a460:	0e884455 	.word	0x0e884455
 800a464:	3fc9c155 	.word	0x3fc9c155
 800a468:	03eb6f7d 	.word	0x03eb6f7d
 800a46c:	3fd4d612 	.word	0x3fd4d612
 800a470:	55555555 	.word	0x55555555
 800a474:	3fc55555 	.word	0x3fc55555
 800a478:	b12e9282 	.word	0xb12e9282
 800a47c:	3fb3b8c5 	.word	0x3fb3b8c5
 800a480:	1b8d0159 	.word	0x1b8d0159
 800a484:	3fe6066c 	.word	0x3fe6066c
 800a488:	9c598ac8 	.word	0x9c598ac8
 800a48c:	40002ae5 	.word	0x40002ae5
 800a490:	1c8a2d4b 	.word	0x1c8a2d4b
 800a494:	40033a27 	.word	0x40033a27
 800a498:	33145c07 	.word	0x33145c07
 800a49c:	3c91a626 	.word	0x3c91a626
 800a4a0:	54442d18 	.word	0x54442d18
 800a4a4:	3ff921fb 	.word	0x3ff921fb
 800a4a8:	3fefffff 	.word	0x3fefffff
 800a4ac:	3fdfffff 	.word	0x3fdfffff
 800a4b0:	3c600000 	.word	0x3c600000
 800a4b4:	3ff00000 	.word	0x3ff00000
 800a4b8:	3fe00000 	.word	0x3fe00000
 800a4bc:	4602      	mov	r2, r0
 800a4be:	460b      	mov	r3, r1
 800a4c0:	2000      	movs	r0, #0
 800a4c2:	4969      	ldr	r1, [pc, #420]	; (800a668 <__ieee754_acos+0x490>)
 800a4c4:	f7f5 fe50 	bl	8000168 <__aeabi_dsub>
 800a4c8:	2200      	movs	r2, #0
 800a4ca:	4b68      	ldr	r3, [pc, #416]	; (800a66c <__ieee754_acos+0x494>)
 800a4cc:	f7f6 f804 	bl	80004d8 <__aeabi_dmul>
 800a4d0:	4604      	mov	r4, r0
 800a4d2:	460d      	mov	r5, r1
 800a4d4:	f000 fde2 	bl	800b09c <__ieee754_sqrt>
 800a4d8:	a34d      	add	r3, pc, #308	; (adr r3, 800a610 <__ieee754_acos+0x438>)
 800a4da:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a4de:	4689      	mov	r9, r1
 800a4e0:	4680      	mov	r8, r0
 800a4e2:	4629      	mov	r1, r5
 800a4e4:	4620      	mov	r0, r4
 800a4e6:	f7f5 fff7 	bl	80004d8 <__aeabi_dmul>
 800a4ea:	a34b      	add	r3, pc, #300	; (adr r3, 800a618 <__ieee754_acos+0x440>)
 800a4ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a4f0:	f7f5 fe3c 	bl	800016c <__adddf3>
 800a4f4:	4622      	mov	r2, r4
 800a4f6:	462b      	mov	r3, r5
 800a4f8:	f7f5 ffee 	bl	80004d8 <__aeabi_dmul>
 800a4fc:	a348      	add	r3, pc, #288	; (adr r3, 800a620 <__ieee754_acos+0x448>)
 800a4fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a502:	f7f5 fe31 	bl	8000168 <__aeabi_dsub>
 800a506:	4622      	mov	r2, r4
 800a508:	462b      	mov	r3, r5
 800a50a:	f7f5 ffe5 	bl	80004d8 <__aeabi_dmul>
 800a50e:	a346      	add	r3, pc, #280	; (adr r3, 800a628 <__ieee754_acos+0x450>)
 800a510:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a514:	f7f5 fe2a 	bl	800016c <__adddf3>
 800a518:	4622      	mov	r2, r4
 800a51a:	462b      	mov	r3, r5
 800a51c:	f7f5 ffdc 	bl	80004d8 <__aeabi_dmul>
 800a520:	a343      	add	r3, pc, #268	; (adr r3, 800a630 <__ieee754_acos+0x458>)
 800a522:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a526:	f7f5 fe1f 	bl	8000168 <__aeabi_dsub>
 800a52a:	4622      	mov	r2, r4
 800a52c:	462b      	mov	r3, r5
 800a52e:	f7f5 ffd3 	bl	80004d8 <__aeabi_dmul>
 800a532:	a341      	add	r3, pc, #260	; (adr r3, 800a638 <__ieee754_acos+0x460>)
 800a534:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a538:	f7f5 fe18 	bl	800016c <__adddf3>
 800a53c:	4622      	mov	r2, r4
 800a53e:	462b      	mov	r3, r5
 800a540:	f7f5 ffca 	bl	80004d8 <__aeabi_dmul>
 800a544:	a33e      	add	r3, pc, #248	; (adr r3, 800a640 <__ieee754_acos+0x468>)
 800a546:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a54a:	4682      	mov	sl, r0
 800a54c:	468b      	mov	fp, r1
 800a54e:	4620      	mov	r0, r4
 800a550:	4629      	mov	r1, r5
 800a552:	f7f5 ffc1 	bl	80004d8 <__aeabi_dmul>
 800a556:	a33c      	add	r3, pc, #240	; (adr r3, 800a648 <__ieee754_acos+0x470>)
 800a558:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a55c:	f7f5 fe04 	bl	8000168 <__aeabi_dsub>
 800a560:	4622      	mov	r2, r4
 800a562:	462b      	mov	r3, r5
 800a564:	f7f5 ffb8 	bl	80004d8 <__aeabi_dmul>
 800a568:	a339      	add	r3, pc, #228	; (adr r3, 800a650 <__ieee754_acos+0x478>)
 800a56a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a56e:	f7f5 fdfd 	bl	800016c <__adddf3>
 800a572:	4622      	mov	r2, r4
 800a574:	462b      	mov	r3, r5
 800a576:	f7f5 ffaf 	bl	80004d8 <__aeabi_dmul>
 800a57a:	a337      	add	r3, pc, #220	; (adr r3, 800a658 <__ieee754_acos+0x480>)
 800a57c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a580:	f7f5 fdf2 	bl	8000168 <__aeabi_dsub>
 800a584:	4622      	mov	r2, r4
 800a586:	462b      	mov	r3, r5
 800a588:	f7f5 ffa6 	bl	80004d8 <__aeabi_dmul>
 800a58c:	2200      	movs	r2, #0
 800a58e:	4b36      	ldr	r3, [pc, #216]	; (800a668 <__ieee754_acos+0x490>)
 800a590:	f7f5 fdec 	bl	800016c <__adddf3>
 800a594:	4602      	mov	r2, r0
 800a596:	460b      	mov	r3, r1
 800a598:	4650      	mov	r0, sl
 800a59a:	4659      	mov	r1, fp
 800a59c:	f7f6 f8c6 	bl	800072c <__aeabi_ddiv>
 800a5a0:	4642      	mov	r2, r8
 800a5a2:	464b      	mov	r3, r9
 800a5a4:	f7f5 ff98 	bl	80004d8 <__aeabi_dmul>
 800a5a8:	2600      	movs	r6, #0
 800a5aa:	4682      	mov	sl, r0
 800a5ac:	468b      	mov	fp, r1
 800a5ae:	4632      	mov	r2, r6
 800a5b0:	464b      	mov	r3, r9
 800a5b2:	4630      	mov	r0, r6
 800a5b4:	4649      	mov	r1, r9
 800a5b6:	f7f5 ff8f 	bl	80004d8 <__aeabi_dmul>
 800a5ba:	4602      	mov	r2, r0
 800a5bc:	460b      	mov	r3, r1
 800a5be:	4620      	mov	r0, r4
 800a5c0:	4629      	mov	r1, r5
 800a5c2:	f7f5 fdd1 	bl	8000168 <__aeabi_dsub>
 800a5c6:	4632      	mov	r2, r6
 800a5c8:	4604      	mov	r4, r0
 800a5ca:	460d      	mov	r5, r1
 800a5cc:	464b      	mov	r3, r9
 800a5ce:	4640      	mov	r0, r8
 800a5d0:	4649      	mov	r1, r9
 800a5d2:	f7f5 fdcb 	bl	800016c <__adddf3>
 800a5d6:	4602      	mov	r2, r0
 800a5d8:	460b      	mov	r3, r1
 800a5da:	4620      	mov	r0, r4
 800a5dc:	4629      	mov	r1, r5
 800a5de:	f7f6 f8a5 	bl	800072c <__aeabi_ddiv>
 800a5e2:	4602      	mov	r2, r0
 800a5e4:	460b      	mov	r3, r1
 800a5e6:	4650      	mov	r0, sl
 800a5e8:	4659      	mov	r1, fp
 800a5ea:	f7f5 fdbf 	bl	800016c <__adddf3>
 800a5ee:	4632      	mov	r2, r6
 800a5f0:	464b      	mov	r3, r9
 800a5f2:	f7f5 fdbb 	bl	800016c <__adddf3>
 800a5f6:	4602      	mov	r2, r0
 800a5f8:	460b      	mov	r3, r1
 800a5fa:	f7f5 fdb7 	bl	800016c <__adddf3>
 800a5fe:	e600      	b.n	800a202 <__ieee754_acos+0x2a>
 800a600:	2000      	movs	r0, #0
 800a602:	2100      	movs	r1, #0
 800a604:	e5fd      	b.n	800a202 <__ieee754_acos+0x2a>
 800a606:	a116      	add	r1, pc, #88	; (adr r1, 800a660 <__ieee754_acos+0x488>)
 800a608:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a60c:	e5f9      	b.n	800a202 <__ieee754_acos+0x2a>
 800a60e:	bf00      	nop
 800a610:	0dfdf709 	.word	0x0dfdf709
 800a614:	3f023de1 	.word	0x3f023de1
 800a618:	7501b288 	.word	0x7501b288
 800a61c:	3f49efe0 	.word	0x3f49efe0
 800a620:	b5688f3b 	.word	0xb5688f3b
 800a624:	3fa48228 	.word	0x3fa48228
 800a628:	0e884455 	.word	0x0e884455
 800a62c:	3fc9c155 	.word	0x3fc9c155
 800a630:	03eb6f7d 	.word	0x03eb6f7d
 800a634:	3fd4d612 	.word	0x3fd4d612
 800a638:	55555555 	.word	0x55555555
 800a63c:	3fc55555 	.word	0x3fc55555
 800a640:	b12e9282 	.word	0xb12e9282
 800a644:	3fb3b8c5 	.word	0x3fb3b8c5
 800a648:	1b8d0159 	.word	0x1b8d0159
 800a64c:	3fe6066c 	.word	0x3fe6066c
 800a650:	9c598ac8 	.word	0x9c598ac8
 800a654:	40002ae5 	.word	0x40002ae5
 800a658:	1c8a2d4b 	.word	0x1c8a2d4b
 800a65c:	40033a27 	.word	0x40033a27
 800a660:	54442d18 	.word	0x54442d18
 800a664:	3ff921fb 	.word	0x3ff921fb
 800a668:	3ff00000 	.word	0x3ff00000
 800a66c:	3fe00000 	.word	0x3fe00000

0800a670 <__ieee754_pow>:
 800a670:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a674:	b093      	sub	sp, #76	; 0x4c
 800a676:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800a67a:	e9dd 2602 	ldrd	r2, r6, [sp, #8]
 800a67e:	f026 4500 	bic.w	r5, r6, #2147483648	; 0x80000000
 800a682:	ea55 0302 	orrs.w	r3, r5, r2
 800a686:	4607      	mov	r7, r0
 800a688:	4688      	mov	r8, r1
 800a68a:	f000 84bf 	beq.w	800b00c <__ieee754_pow+0x99c>
 800a68e:	4b7e      	ldr	r3, [pc, #504]	; (800a888 <__ieee754_pow+0x218>)
 800a690:	f021 4400 	bic.w	r4, r1, #2147483648	; 0x80000000
 800a694:	429c      	cmp	r4, r3
 800a696:	4689      	mov	r9, r1
 800a698:	4682      	mov	sl, r0
 800a69a:	dc09      	bgt.n	800a6b0 <__ieee754_pow+0x40>
 800a69c:	d103      	bne.n	800a6a6 <__ieee754_pow+0x36>
 800a69e:	b978      	cbnz	r0, 800a6c0 <__ieee754_pow+0x50>
 800a6a0:	42a5      	cmp	r5, r4
 800a6a2:	dd02      	ble.n	800a6aa <__ieee754_pow+0x3a>
 800a6a4:	e00c      	b.n	800a6c0 <__ieee754_pow+0x50>
 800a6a6:	429d      	cmp	r5, r3
 800a6a8:	dc02      	bgt.n	800a6b0 <__ieee754_pow+0x40>
 800a6aa:	429d      	cmp	r5, r3
 800a6ac:	d10e      	bne.n	800a6cc <__ieee754_pow+0x5c>
 800a6ae:	b16a      	cbz	r2, 800a6cc <__ieee754_pow+0x5c>
 800a6b0:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800a6b4:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800a6b8:	ea54 030a 	orrs.w	r3, r4, sl
 800a6bc:	f000 84a6 	beq.w	800b00c <__ieee754_pow+0x99c>
 800a6c0:	4872      	ldr	r0, [pc, #456]	; (800a88c <__ieee754_pow+0x21c>)
 800a6c2:	b013      	add	sp, #76	; 0x4c
 800a6c4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a6c8:	f000 bd9e 	b.w	800b208 <nan>
 800a6cc:	f1b9 0f00 	cmp.w	r9, #0
 800a6d0:	da39      	bge.n	800a746 <__ieee754_pow+0xd6>
 800a6d2:	4b6f      	ldr	r3, [pc, #444]	; (800a890 <__ieee754_pow+0x220>)
 800a6d4:	429d      	cmp	r5, r3
 800a6d6:	dc54      	bgt.n	800a782 <__ieee754_pow+0x112>
 800a6d8:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 800a6dc:	429d      	cmp	r5, r3
 800a6de:	f340 84a6 	ble.w	800b02e <__ieee754_pow+0x9be>
 800a6e2:	152b      	asrs	r3, r5, #20
 800a6e4:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800a6e8:	2b14      	cmp	r3, #20
 800a6ea:	dd0f      	ble.n	800a70c <__ieee754_pow+0x9c>
 800a6ec:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 800a6f0:	fa22 f103 	lsr.w	r1, r2, r3
 800a6f4:	fa01 f303 	lsl.w	r3, r1, r3
 800a6f8:	4293      	cmp	r3, r2
 800a6fa:	f040 8498 	bne.w	800b02e <__ieee754_pow+0x9be>
 800a6fe:	f001 0101 	and.w	r1, r1, #1
 800a702:	f1c1 0302 	rsb	r3, r1, #2
 800a706:	9300      	str	r3, [sp, #0]
 800a708:	b182      	cbz	r2, 800a72c <__ieee754_pow+0xbc>
 800a70a:	e05e      	b.n	800a7ca <__ieee754_pow+0x15a>
 800a70c:	2a00      	cmp	r2, #0
 800a70e:	d15a      	bne.n	800a7c6 <__ieee754_pow+0x156>
 800a710:	f1c3 0314 	rsb	r3, r3, #20
 800a714:	fa45 f103 	asr.w	r1, r5, r3
 800a718:	fa01 f303 	lsl.w	r3, r1, r3
 800a71c:	42ab      	cmp	r3, r5
 800a71e:	f040 8483 	bne.w	800b028 <__ieee754_pow+0x9b8>
 800a722:	f001 0101 	and.w	r1, r1, #1
 800a726:	f1c1 0302 	rsb	r3, r1, #2
 800a72a:	9300      	str	r3, [sp, #0]
 800a72c:	4b59      	ldr	r3, [pc, #356]	; (800a894 <__ieee754_pow+0x224>)
 800a72e:	429d      	cmp	r5, r3
 800a730:	d130      	bne.n	800a794 <__ieee754_pow+0x124>
 800a732:	2e00      	cmp	r6, #0
 800a734:	f280 8474 	bge.w	800b020 <__ieee754_pow+0x9b0>
 800a738:	463a      	mov	r2, r7
 800a73a:	4643      	mov	r3, r8
 800a73c:	2000      	movs	r0, #0
 800a73e:	4955      	ldr	r1, [pc, #340]	; (800a894 <__ieee754_pow+0x224>)
 800a740:	f7f5 fff4 	bl	800072c <__aeabi_ddiv>
 800a744:	e02f      	b.n	800a7a6 <__ieee754_pow+0x136>
 800a746:	2300      	movs	r3, #0
 800a748:	9300      	str	r3, [sp, #0]
 800a74a:	2a00      	cmp	r2, #0
 800a74c:	d13d      	bne.n	800a7ca <__ieee754_pow+0x15a>
 800a74e:	4b4e      	ldr	r3, [pc, #312]	; (800a888 <__ieee754_pow+0x218>)
 800a750:	429d      	cmp	r5, r3
 800a752:	d1eb      	bne.n	800a72c <__ieee754_pow+0xbc>
 800a754:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 800a758:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800a75c:	ea53 030a 	orrs.w	r3, r3, sl
 800a760:	f000 8454 	beq.w	800b00c <__ieee754_pow+0x99c>
 800a764:	4b4c      	ldr	r3, [pc, #304]	; (800a898 <__ieee754_pow+0x228>)
 800a766:	429c      	cmp	r4, r3
 800a768:	dd0d      	ble.n	800a786 <__ieee754_pow+0x116>
 800a76a:	2e00      	cmp	r6, #0
 800a76c:	f280 8454 	bge.w	800b018 <__ieee754_pow+0x9a8>
 800a770:	f04f 0b00 	mov.w	fp, #0
 800a774:	f04f 0c00 	mov.w	ip, #0
 800a778:	4658      	mov	r0, fp
 800a77a:	4661      	mov	r1, ip
 800a77c:	b013      	add	sp, #76	; 0x4c
 800a77e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a782:	2302      	movs	r3, #2
 800a784:	e7e0      	b.n	800a748 <__ieee754_pow+0xd8>
 800a786:	2e00      	cmp	r6, #0
 800a788:	daf2      	bge.n	800a770 <__ieee754_pow+0x100>
 800a78a:	e9dd b302 	ldrd	fp, r3, [sp, #8]
 800a78e:	f103 4c00 	add.w	ip, r3, #2147483648	; 0x80000000
 800a792:	e7f1      	b.n	800a778 <__ieee754_pow+0x108>
 800a794:	f1b6 4f80 	cmp.w	r6, #1073741824	; 0x40000000
 800a798:	d108      	bne.n	800a7ac <__ieee754_pow+0x13c>
 800a79a:	463a      	mov	r2, r7
 800a79c:	4643      	mov	r3, r8
 800a79e:	4638      	mov	r0, r7
 800a7a0:	4641      	mov	r1, r8
 800a7a2:	f7f5 fe99 	bl	80004d8 <__aeabi_dmul>
 800a7a6:	4683      	mov	fp, r0
 800a7a8:	468c      	mov	ip, r1
 800a7aa:	e7e5      	b.n	800a778 <__ieee754_pow+0x108>
 800a7ac:	4b3b      	ldr	r3, [pc, #236]	; (800a89c <__ieee754_pow+0x22c>)
 800a7ae:	429e      	cmp	r6, r3
 800a7b0:	d10b      	bne.n	800a7ca <__ieee754_pow+0x15a>
 800a7b2:	f1b9 0f00 	cmp.w	r9, #0
 800a7b6:	db08      	blt.n	800a7ca <__ieee754_pow+0x15a>
 800a7b8:	4638      	mov	r0, r7
 800a7ba:	4641      	mov	r1, r8
 800a7bc:	b013      	add	sp, #76	; 0x4c
 800a7be:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a7c2:	f000 bc6b 	b.w	800b09c <__ieee754_sqrt>
 800a7c6:	2300      	movs	r3, #0
 800a7c8:	9300      	str	r3, [sp, #0]
 800a7ca:	4638      	mov	r0, r7
 800a7cc:	4641      	mov	r1, r8
 800a7ce:	f000 fd11 	bl	800b1f4 <fabs>
 800a7d2:	4683      	mov	fp, r0
 800a7d4:	468c      	mov	ip, r1
 800a7d6:	f1ba 0f00 	cmp.w	sl, #0
 800a7da:	d129      	bne.n	800a830 <__ieee754_pow+0x1c0>
 800a7dc:	b124      	cbz	r4, 800a7e8 <__ieee754_pow+0x178>
 800a7de:	4b2d      	ldr	r3, [pc, #180]	; (800a894 <__ieee754_pow+0x224>)
 800a7e0:	f029 4240 	bic.w	r2, r9, #3221225472	; 0xc0000000
 800a7e4:	429a      	cmp	r2, r3
 800a7e6:	d123      	bne.n	800a830 <__ieee754_pow+0x1c0>
 800a7e8:	2e00      	cmp	r6, #0
 800a7ea:	da07      	bge.n	800a7fc <__ieee754_pow+0x18c>
 800a7ec:	465a      	mov	r2, fp
 800a7ee:	4663      	mov	r3, ip
 800a7f0:	2000      	movs	r0, #0
 800a7f2:	4928      	ldr	r1, [pc, #160]	; (800a894 <__ieee754_pow+0x224>)
 800a7f4:	f7f5 ff9a 	bl	800072c <__aeabi_ddiv>
 800a7f8:	4683      	mov	fp, r0
 800a7fa:	468c      	mov	ip, r1
 800a7fc:	f1b9 0f00 	cmp.w	r9, #0
 800a800:	daba      	bge.n	800a778 <__ieee754_pow+0x108>
 800a802:	9b00      	ldr	r3, [sp, #0]
 800a804:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800a808:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800a80c:	4323      	orrs	r3, r4
 800a80e:	d108      	bne.n	800a822 <__ieee754_pow+0x1b2>
 800a810:	465a      	mov	r2, fp
 800a812:	4663      	mov	r3, ip
 800a814:	4658      	mov	r0, fp
 800a816:	4661      	mov	r1, ip
 800a818:	f7f5 fca6 	bl	8000168 <__aeabi_dsub>
 800a81c:	4602      	mov	r2, r0
 800a81e:	460b      	mov	r3, r1
 800a820:	e78e      	b.n	800a740 <__ieee754_pow+0xd0>
 800a822:	9b00      	ldr	r3, [sp, #0]
 800a824:	2b01      	cmp	r3, #1
 800a826:	d1a7      	bne.n	800a778 <__ieee754_pow+0x108>
 800a828:	f10c 4300 	add.w	r3, ip, #2147483648	; 0x80000000
 800a82c:	469c      	mov	ip, r3
 800a82e:	e7a3      	b.n	800a778 <__ieee754_pow+0x108>
 800a830:	ea4f 73d9 	mov.w	r3, r9, lsr #31
 800a834:	3b01      	subs	r3, #1
 800a836:	930c      	str	r3, [sp, #48]	; 0x30
 800a838:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a83a:	9b00      	ldr	r3, [sp, #0]
 800a83c:	4313      	orrs	r3, r2
 800a83e:	d104      	bne.n	800a84a <__ieee754_pow+0x1da>
 800a840:	463a      	mov	r2, r7
 800a842:	4643      	mov	r3, r8
 800a844:	4638      	mov	r0, r7
 800a846:	4641      	mov	r1, r8
 800a848:	e7e6      	b.n	800a818 <__ieee754_pow+0x1a8>
 800a84a:	4b15      	ldr	r3, [pc, #84]	; (800a8a0 <__ieee754_pow+0x230>)
 800a84c:	429d      	cmp	r5, r3
 800a84e:	f340 80f9 	ble.w	800aa44 <__ieee754_pow+0x3d4>
 800a852:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 800a856:	429d      	cmp	r5, r3
 800a858:	4b0f      	ldr	r3, [pc, #60]	; (800a898 <__ieee754_pow+0x228>)
 800a85a:	dd09      	ble.n	800a870 <__ieee754_pow+0x200>
 800a85c:	429c      	cmp	r4, r3
 800a85e:	dc0c      	bgt.n	800a87a <__ieee754_pow+0x20a>
 800a860:	2e00      	cmp	r6, #0
 800a862:	da85      	bge.n	800a770 <__ieee754_pow+0x100>
 800a864:	a306      	add	r3, pc, #24	; (adr r3, 800a880 <__ieee754_pow+0x210>)
 800a866:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a86a:	4610      	mov	r0, r2
 800a86c:	4619      	mov	r1, r3
 800a86e:	e798      	b.n	800a7a2 <__ieee754_pow+0x132>
 800a870:	429c      	cmp	r4, r3
 800a872:	dbf5      	blt.n	800a860 <__ieee754_pow+0x1f0>
 800a874:	4b07      	ldr	r3, [pc, #28]	; (800a894 <__ieee754_pow+0x224>)
 800a876:	429c      	cmp	r4, r3
 800a878:	dd14      	ble.n	800a8a4 <__ieee754_pow+0x234>
 800a87a:	2e00      	cmp	r6, #0
 800a87c:	dcf2      	bgt.n	800a864 <__ieee754_pow+0x1f4>
 800a87e:	e777      	b.n	800a770 <__ieee754_pow+0x100>
 800a880:	8800759c 	.word	0x8800759c
 800a884:	7e37e43c 	.word	0x7e37e43c
 800a888:	7ff00000 	.word	0x7ff00000
 800a88c:	0800e988 	.word	0x0800e988
 800a890:	433fffff 	.word	0x433fffff
 800a894:	3ff00000 	.word	0x3ff00000
 800a898:	3fefffff 	.word	0x3fefffff
 800a89c:	3fe00000 	.word	0x3fe00000
 800a8a0:	41e00000 	.word	0x41e00000
 800a8a4:	4661      	mov	r1, ip
 800a8a6:	2200      	movs	r2, #0
 800a8a8:	4658      	mov	r0, fp
 800a8aa:	4b61      	ldr	r3, [pc, #388]	; (800aa30 <__ieee754_pow+0x3c0>)
 800a8ac:	f7f5 fc5c 	bl	8000168 <__aeabi_dsub>
 800a8b0:	a355      	add	r3, pc, #340	; (adr r3, 800aa08 <__ieee754_pow+0x398>)
 800a8b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a8b6:	4604      	mov	r4, r0
 800a8b8:	460d      	mov	r5, r1
 800a8ba:	f7f5 fe0d 	bl	80004d8 <__aeabi_dmul>
 800a8be:	a354      	add	r3, pc, #336	; (adr r3, 800aa10 <__ieee754_pow+0x3a0>)
 800a8c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a8c4:	4606      	mov	r6, r0
 800a8c6:	460f      	mov	r7, r1
 800a8c8:	4620      	mov	r0, r4
 800a8ca:	4629      	mov	r1, r5
 800a8cc:	f7f5 fe04 	bl	80004d8 <__aeabi_dmul>
 800a8d0:	2200      	movs	r2, #0
 800a8d2:	4682      	mov	sl, r0
 800a8d4:	468b      	mov	fp, r1
 800a8d6:	4620      	mov	r0, r4
 800a8d8:	4629      	mov	r1, r5
 800a8da:	4b56      	ldr	r3, [pc, #344]	; (800aa34 <__ieee754_pow+0x3c4>)
 800a8dc:	f7f5 fdfc 	bl	80004d8 <__aeabi_dmul>
 800a8e0:	4602      	mov	r2, r0
 800a8e2:	460b      	mov	r3, r1
 800a8e4:	a14c      	add	r1, pc, #304	; (adr r1, 800aa18 <__ieee754_pow+0x3a8>)
 800a8e6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a8ea:	f7f5 fc3d 	bl	8000168 <__aeabi_dsub>
 800a8ee:	4622      	mov	r2, r4
 800a8f0:	462b      	mov	r3, r5
 800a8f2:	f7f5 fdf1 	bl	80004d8 <__aeabi_dmul>
 800a8f6:	4602      	mov	r2, r0
 800a8f8:	460b      	mov	r3, r1
 800a8fa:	2000      	movs	r0, #0
 800a8fc:	494e      	ldr	r1, [pc, #312]	; (800aa38 <__ieee754_pow+0x3c8>)
 800a8fe:	f7f5 fc33 	bl	8000168 <__aeabi_dsub>
 800a902:	4622      	mov	r2, r4
 800a904:	462b      	mov	r3, r5
 800a906:	4680      	mov	r8, r0
 800a908:	4689      	mov	r9, r1
 800a90a:	4620      	mov	r0, r4
 800a90c:	4629      	mov	r1, r5
 800a90e:	f7f5 fde3 	bl	80004d8 <__aeabi_dmul>
 800a912:	4602      	mov	r2, r0
 800a914:	460b      	mov	r3, r1
 800a916:	4640      	mov	r0, r8
 800a918:	4649      	mov	r1, r9
 800a91a:	f7f5 fddd 	bl	80004d8 <__aeabi_dmul>
 800a91e:	a340      	add	r3, pc, #256	; (adr r3, 800aa20 <__ieee754_pow+0x3b0>)
 800a920:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a924:	f7f5 fdd8 	bl	80004d8 <__aeabi_dmul>
 800a928:	4602      	mov	r2, r0
 800a92a:	460b      	mov	r3, r1
 800a92c:	4650      	mov	r0, sl
 800a92e:	4659      	mov	r1, fp
 800a930:	f7f5 fc1a 	bl	8000168 <__aeabi_dsub>
 800a934:	f04f 0a00 	mov.w	sl, #0
 800a938:	4602      	mov	r2, r0
 800a93a:	460b      	mov	r3, r1
 800a93c:	4604      	mov	r4, r0
 800a93e:	460d      	mov	r5, r1
 800a940:	4630      	mov	r0, r6
 800a942:	4639      	mov	r1, r7
 800a944:	f7f5 fc12 	bl	800016c <__adddf3>
 800a948:	4632      	mov	r2, r6
 800a94a:	463b      	mov	r3, r7
 800a94c:	4650      	mov	r0, sl
 800a94e:	468b      	mov	fp, r1
 800a950:	f7f5 fc0a 	bl	8000168 <__aeabi_dsub>
 800a954:	4602      	mov	r2, r0
 800a956:	460b      	mov	r3, r1
 800a958:	4620      	mov	r0, r4
 800a95a:	4629      	mov	r1, r5
 800a95c:	f7f5 fc04 	bl	8000168 <__aeabi_dsub>
 800a960:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800a964:	9b00      	ldr	r3, [sp, #0]
 800a966:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a968:	3b01      	subs	r3, #1
 800a96a:	4313      	orrs	r3, r2
 800a96c:	f04f 0600 	mov.w	r6, #0
 800a970:	f04f 0200 	mov.w	r2, #0
 800a974:	bf0c      	ite	eq
 800a976:	4b31      	ldreq	r3, [pc, #196]	; (800aa3c <__ieee754_pow+0x3cc>)
 800a978:	4b2d      	ldrne	r3, [pc, #180]	; (800aa30 <__ieee754_pow+0x3c0>)
 800a97a:	4604      	mov	r4, r0
 800a97c:	460d      	mov	r5, r1
 800a97e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a982:	e9cd 2300 	strd	r2, r3, [sp]
 800a986:	4632      	mov	r2, r6
 800a988:	463b      	mov	r3, r7
 800a98a:	f7f5 fbed 	bl	8000168 <__aeabi_dsub>
 800a98e:	4652      	mov	r2, sl
 800a990:	465b      	mov	r3, fp
 800a992:	f7f5 fda1 	bl	80004d8 <__aeabi_dmul>
 800a996:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a99a:	4680      	mov	r8, r0
 800a99c:	4689      	mov	r9, r1
 800a99e:	4620      	mov	r0, r4
 800a9a0:	4629      	mov	r1, r5
 800a9a2:	f7f5 fd99 	bl	80004d8 <__aeabi_dmul>
 800a9a6:	4602      	mov	r2, r0
 800a9a8:	460b      	mov	r3, r1
 800a9aa:	4640      	mov	r0, r8
 800a9ac:	4649      	mov	r1, r9
 800a9ae:	f7f5 fbdd 	bl	800016c <__adddf3>
 800a9b2:	4632      	mov	r2, r6
 800a9b4:	463b      	mov	r3, r7
 800a9b6:	4680      	mov	r8, r0
 800a9b8:	4689      	mov	r9, r1
 800a9ba:	4650      	mov	r0, sl
 800a9bc:	4659      	mov	r1, fp
 800a9be:	f7f5 fd8b 	bl	80004d8 <__aeabi_dmul>
 800a9c2:	4604      	mov	r4, r0
 800a9c4:	460d      	mov	r5, r1
 800a9c6:	460b      	mov	r3, r1
 800a9c8:	4602      	mov	r2, r0
 800a9ca:	4649      	mov	r1, r9
 800a9cc:	4640      	mov	r0, r8
 800a9ce:	e9cd 4502 	strd	r4, r5, [sp, #8]
 800a9d2:	f7f5 fbcb 	bl	800016c <__adddf3>
 800a9d6:	4b1a      	ldr	r3, [pc, #104]	; (800aa40 <__ieee754_pow+0x3d0>)
 800a9d8:	4682      	mov	sl, r0
 800a9da:	4299      	cmp	r1, r3
 800a9dc:	460f      	mov	r7, r1
 800a9de:	460e      	mov	r6, r1
 800a9e0:	f340 82ed 	ble.w	800afbe <__ieee754_pow+0x94e>
 800a9e4:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 800a9e8:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800a9ec:	4303      	orrs	r3, r0
 800a9ee:	f000 81e7 	beq.w	800adc0 <__ieee754_pow+0x750>
 800a9f2:	a30d      	add	r3, pc, #52	; (adr r3, 800aa28 <__ieee754_pow+0x3b8>)
 800a9f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a9f8:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a9fc:	f7f5 fd6c 	bl	80004d8 <__aeabi_dmul>
 800aa00:	a309      	add	r3, pc, #36	; (adr r3, 800aa28 <__ieee754_pow+0x3b8>)
 800aa02:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa06:	e6cc      	b.n	800a7a2 <__ieee754_pow+0x132>
 800aa08:	60000000 	.word	0x60000000
 800aa0c:	3ff71547 	.word	0x3ff71547
 800aa10:	f85ddf44 	.word	0xf85ddf44
 800aa14:	3e54ae0b 	.word	0x3e54ae0b
 800aa18:	55555555 	.word	0x55555555
 800aa1c:	3fd55555 	.word	0x3fd55555
 800aa20:	652b82fe 	.word	0x652b82fe
 800aa24:	3ff71547 	.word	0x3ff71547
 800aa28:	8800759c 	.word	0x8800759c
 800aa2c:	7e37e43c 	.word	0x7e37e43c
 800aa30:	3ff00000 	.word	0x3ff00000
 800aa34:	3fd00000 	.word	0x3fd00000
 800aa38:	3fe00000 	.word	0x3fe00000
 800aa3c:	bff00000 	.word	0xbff00000
 800aa40:	408fffff 	.word	0x408fffff
 800aa44:	4bd4      	ldr	r3, [pc, #848]	; (800ad98 <__ieee754_pow+0x728>)
 800aa46:	2200      	movs	r2, #0
 800aa48:	ea09 0303 	and.w	r3, r9, r3
 800aa4c:	b943      	cbnz	r3, 800aa60 <__ieee754_pow+0x3f0>
 800aa4e:	4658      	mov	r0, fp
 800aa50:	4661      	mov	r1, ip
 800aa52:	4bd2      	ldr	r3, [pc, #840]	; (800ad9c <__ieee754_pow+0x72c>)
 800aa54:	f7f5 fd40 	bl	80004d8 <__aeabi_dmul>
 800aa58:	f06f 0234 	mvn.w	r2, #52	; 0x34
 800aa5c:	4683      	mov	fp, r0
 800aa5e:	460c      	mov	r4, r1
 800aa60:	1523      	asrs	r3, r4, #20
 800aa62:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800aa66:	4413      	add	r3, r2
 800aa68:	930b      	str	r3, [sp, #44]	; 0x2c
 800aa6a:	4bcd      	ldr	r3, [pc, #820]	; (800ada0 <__ieee754_pow+0x730>)
 800aa6c:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800aa70:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 800aa74:	429c      	cmp	r4, r3
 800aa76:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800aa7a:	dd08      	ble.n	800aa8e <__ieee754_pow+0x41e>
 800aa7c:	4bc9      	ldr	r3, [pc, #804]	; (800ada4 <__ieee754_pow+0x734>)
 800aa7e:	429c      	cmp	r4, r3
 800aa80:	f340 819c 	ble.w	800adbc <__ieee754_pow+0x74c>
 800aa84:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800aa86:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 800aa8a:	3301      	adds	r3, #1
 800aa8c:	930b      	str	r3, [sp, #44]	; 0x2c
 800aa8e:	2600      	movs	r6, #0
 800aa90:	00f3      	lsls	r3, r6, #3
 800aa92:	930d      	str	r3, [sp, #52]	; 0x34
 800aa94:	4bc4      	ldr	r3, [pc, #784]	; (800ada8 <__ieee754_pow+0x738>)
 800aa96:	4658      	mov	r0, fp
 800aa98:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800aa9c:	e9d3 3400 	ldrd	r3, r4, [r3]
 800aaa0:	4629      	mov	r1, r5
 800aaa2:	461a      	mov	r2, r3
 800aaa4:	e9cd 3408 	strd	r3, r4, [sp, #32]
 800aaa8:	4623      	mov	r3, r4
 800aaaa:	f7f5 fb5d 	bl	8000168 <__aeabi_dsub>
 800aaae:	46da      	mov	sl, fp
 800aab0:	462b      	mov	r3, r5
 800aab2:	4652      	mov	r2, sl
 800aab4:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 800aab8:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800aabc:	f7f5 fb56 	bl	800016c <__adddf3>
 800aac0:	4602      	mov	r2, r0
 800aac2:	460b      	mov	r3, r1
 800aac4:	2000      	movs	r0, #0
 800aac6:	49b9      	ldr	r1, [pc, #740]	; (800adac <__ieee754_pow+0x73c>)
 800aac8:	f7f5 fe30 	bl	800072c <__aeabi_ddiv>
 800aacc:	4602      	mov	r2, r0
 800aace:	460b      	mov	r3, r1
 800aad0:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800aad4:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800aad8:	f7f5 fcfe 	bl	80004d8 <__aeabi_dmul>
 800aadc:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800aae0:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
 800aae4:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800aae8:	2300      	movs	r3, #0
 800aaea:	2200      	movs	r2, #0
 800aaec:	46ab      	mov	fp, r5
 800aaee:	106d      	asrs	r5, r5, #1
 800aaf0:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 800aaf4:	9304      	str	r3, [sp, #16]
 800aaf6:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 800aafa:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 800aafe:	eb05 4386 	add.w	r3, r5, r6, lsl #18
 800ab02:	4640      	mov	r0, r8
 800ab04:	4649      	mov	r1, r9
 800ab06:	4614      	mov	r4, r2
 800ab08:	461d      	mov	r5, r3
 800ab0a:	f7f5 fce5 	bl	80004d8 <__aeabi_dmul>
 800ab0e:	4602      	mov	r2, r0
 800ab10:	460b      	mov	r3, r1
 800ab12:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800ab16:	f7f5 fb27 	bl	8000168 <__aeabi_dsub>
 800ab1a:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800ab1e:	4606      	mov	r6, r0
 800ab20:	460f      	mov	r7, r1
 800ab22:	4620      	mov	r0, r4
 800ab24:	4629      	mov	r1, r5
 800ab26:	f7f5 fb1f 	bl	8000168 <__aeabi_dsub>
 800ab2a:	4602      	mov	r2, r0
 800ab2c:	460b      	mov	r3, r1
 800ab2e:	4650      	mov	r0, sl
 800ab30:	4659      	mov	r1, fp
 800ab32:	f7f5 fb19 	bl	8000168 <__aeabi_dsub>
 800ab36:	4642      	mov	r2, r8
 800ab38:	464b      	mov	r3, r9
 800ab3a:	f7f5 fccd 	bl	80004d8 <__aeabi_dmul>
 800ab3e:	4602      	mov	r2, r0
 800ab40:	460b      	mov	r3, r1
 800ab42:	4630      	mov	r0, r6
 800ab44:	4639      	mov	r1, r7
 800ab46:	f7f5 fb0f 	bl	8000168 <__aeabi_dsub>
 800ab4a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800ab4e:	f7f5 fcc3 	bl	80004d8 <__aeabi_dmul>
 800ab52:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800ab56:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800ab5a:	4610      	mov	r0, r2
 800ab5c:	4619      	mov	r1, r3
 800ab5e:	f7f5 fcbb 	bl	80004d8 <__aeabi_dmul>
 800ab62:	a37b      	add	r3, pc, #492	; (adr r3, 800ad50 <__ieee754_pow+0x6e0>)
 800ab64:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab68:	4604      	mov	r4, r0
 800ab6a:	460d      	mov	r5, r1
 800ab6c:	f7f5 fcb4 	bl	80004d8 <__aeabi_dmul>
 800ab70:	a379      	add	r3, pc, #484	; (adr r3, 800ad58 <__ieee754_pow+0x6e8>)
 800ab72:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab76:	f7f5 faf9 	bl	800016c <__adddf3>
 800ab7a:	4622      	mov	r2, r4
 800ab7c:	462b      	mov	r3, r5
 800ab7e:	f7f5 fcab 	bl	80004d8 <__aeabi_dmul>
 800ab82:	a377      	add	r3, pc, #476	; (adr r3, 800ad60 <__ieee754_pow+0x6f0>)
 800ab84:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab88:	f7f5 faf0 	bl	800016c <__adddf3>
 800ab8c:	4622      	mov	r2, r4
 800ab8e:	462b      	mov	r3, r5
 800ab90:	f7f5 fca2 	bl	80004d8 <__aeabi_dmul>
 800ab94:	a374      	add	r3, pc, #464	; (adr r3, 800ad68 <__ieee754_pow+0x6f8>)
 800ab96:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab9a:	f7f5 fae7 	bl	800016c <__adddf3>
 800ab9e:	4622      	mov	r2, r4
 800aba0:	462b      	mov	r3, r5
 800aba2:	f7f5 fc99 	bl	80004d8 <__aeabi_dmul>
 800aba6:	a372      	add	r3, pc, #456	; (adr r3, 800ad70 <__ieee754_pow+0x700>)
 800aba8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800abac:	f7f5 fade 	bl	800016c <__adddf3>
 800abb0:	4622      	mov	r2, r4
 800abb2:	462b      	mov	r3, r5
 800abb4:	f7f5 fc90 	bl	80004d8 <__aeabi_dmul>
 800abb8:	a36f      	add	r3, pc, #444	; (adr r3, 800ad78 <__ieee754_pow+0x708>)
 800abba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800abbe:	f7f5 fad5 	bl	800016c <__adddf3>
 800abc2:	4622      	mov	r2, r4
 800abc4:	4606      	mov	r6, r0
 800abc6:	460f      	mov	r7, r1
 800abc8:	462b      	mov	r3, r5
 800abca:	4620      	mov	r0, r4
 800abcc:	4629      	mov	r1, r5
 800abce:	f7f5 fc83 	bl	80004d8 <__aeabi_dmul>
 800abd2:	4602      	mov	r2, r0
 800abd4:	460b      	mov	r3, r1
 800abd6:	4630      	mov	r0, r6
 800abd8:	4639      	mov	r1, r7
 800abda:	f7f5 fc7d 	bl	80004d8 <__aeabi_dmul>
 800abde:	4604      	mov	r4, r0
 800abe0:	460d      	mov	r5, r1
 800abe2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800abe6:	4642      	mov	r2, r8
 800abe8:	464b      	mov	r3, r9
 800abea:	f7f5 fabf 	bl	800016c <__adddf3>
 800abee:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800abf2:	f7f5 fc71 	bl	80004d8 <__aeabi_dmul>
 800abf6:	4622      	mov	r2, r4
 800abf8:	462b      	mov	r3, r5
 800abfa:	f7f5 fab7 	bl	800016c <__adddf3>
 800abfe:	4642      	mov	r2, r8
 800ac00:	4606      	mov	r6, r0
 800ac02:	460f      	mov	r7, r1
 800ac04:	464b      	mov	r3, r9
 800ac06:	4640      	mov	r0, r8
 800ac08:	4649      	mov	r1, r9
 800ac0a:	f7f5 fc65 	bl	80004d8 <__aeabi_dmul>
 800ac0e:	2200      	movs	r2, #0
 800ac10:	4b67      	ldr	r3, [pc, #412]	; (800adb0 <__ieee754_pow+0x740>)
 800ac12:	4682      	mov	sl, r0
 800ac14:	468b      	mov	fp, r1
 800ac16:	f7f5 faa9 	bl	800016c <__adddf3>
 800ac1a:	4632      	mov	r2, r6
 800ac1c:	463b      	mov	r3, r7
 800ac1e:	f7f5 faa5 	bl	800016c <__adddf3>
 800ac22:	9c04      	ldr	r4, [sp, #16]
 800ac24:	460d      	mov	r5, r1
 800ac26:	4622      	mov	r2, r4
 800ac28:	460b      	mov	r3, r1
 800ac2a:	4640      	mov	r0, r8
 800ac2c:	4649      	mov	r1, r9
 800ac2e:	f7f5 fc53 	bl	80004d8 <__aeabi_dmul>
 800ac32:	2200      	movs	r2, #0
 800ac34:	4680      	mov	r8, r0
 800ac36:	4689      	mov	r9, r1
 800ac38:	4620      	mov	r0, r4
 800ac3a:	4629      	mov	r1, r5
 800ac3c:	4b5c      	ldr	r3, [pc, #368]	; (800adb0 <__ieee754_pow+0x740>)
 800ac3e:	f7f5 fa93 	bl	8000168 <__aeabi_dsub>
 800ac42:	4652      	mov	r2, sl
 800ac44:	465b      	mov	r3, fp
 800ac46:	f7f5 fa8f 	bl	8000168 <__aeabi_dsub>
 800ac4a:	4602      	mov	r2, r0
 800ac4c:	460b      	mov	r3, r1
 800ac4e:	4630      	mov	r0, r6
 800ac50:	4639      	mov	r1, r7
 800ac52:	f7f5 fa89 	bl	8000168 <__aeabi_dsub>
 800ac56:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800ac5a:	f7f5 fc3d 	bl	80004d8 <__aeabi_dmul>
 800ac5e:	4622      	mov	r2, r4
 800ac60:	4606      	mov	r6, r0
 800ac62:	460f      	mov	r7, r1
 800ac64:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800ac68:	462b      	mov	r3, r5
 800ac6a:	f7f5 fc35 	bl	80004d8 <__aeabi_dmul>
 800ac6e:	4602      	mov	r2, r0
 800ac70:	460b      	mov	r3, r1
 800ac72:	4630      	mov	r0, r6
 800ac74:	4639      	mov	r1, r7
 800ac76:	f7f5 fa79 	bl	800016c <__adddf3>
 800ac7a:	4606      	mov	r6, r0
 800ac7c:	460f      	mov	r7, r1
 800ac7e:	4602      	mov	r2, r0
 800ac80:	460b      	mov	r3, r1
 800ac82:	4640      	mov	r0, r8
 800ac84:	4649      	mov	r1, r9
 800ac86:	f7f5 fa71 	bl	800016c <__adddf3>
 800ac8a:	a33d      	add	r3, pc, #244	; (adr r3, 800ad80 <__ieee754_pow+0x710>)
 800ac8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac90:	9c04      	ldr	r4, [sp, #16]
 800ac92:	460d      	mov	r5, r1
 800ac94:	4620      	mov	r0, r4
 800ac96:	f7f5 fc1f 	bl	80004d8 <__aeabi_dmul>
 800ac9a:	4642      	mov	r2, r8
 800ac9c:	464b      	mov	r3, r9
 800ac9e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800aca2:	4620      	mov	r0, r4
 800aca4:	4629      	mov	r1, r5
 800aca6:	f7f5 fa5f 	bl	8000168 <__aeabi_dsub>
 800acaa:	4602      	mov	r2, r0
 800acac:	460b      	mov	r3, r1
 800acae:	4630      	mov	r0, r6
 800acb0:	4639      	mov	r1, r7
 800acb2:	f7f5 fa59 	bl	8000168 <__aeabi_dsub>
 800acb6:	a334      	add	r3, pc, #208	; (adr r3, 800ad88 <__ieee754_pow+0x718>)
 800acb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800acbc:	f7f5 fc0c 	bl	80004d8 <__aeabi_dmul>
 800acc0:	a333      	add	r3, pc, #204	; (adr r3, 800ad90 <__ieee754_pow+0x720>)
 800acc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800acc6:	4606      	mov	r6, r0
 800acc8:	460f      	mov	r7, r1
 800acca:	4620      	mov	r0, r4
 800accc:	4629      	mov	r1, r5
 800acce:	f7f5 fc03 	bl	80004d8 <__aeabi_dmul>
 800acd2:	4602      	mov	r2, r0
 800acd4:	460b      	mov	r3, r1
 800acd6:	4630      	mov	r0, r6
 800acd8:	4639      	mov	r1, r7
 800acda:	f7f5 fa47 	bl	800016c <__adddf3>
 800acde:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800ace0:	4b34      	ldr	r3, [pc, #208]	; (800adb4 <__ieee754_pow+0x744>)
 800ace2:	4413      	add	r3, r2
 800ace4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ace8:	f7f5 fa40 	bl	800016c <__adddf3>
 800acec:	4680      	mov	r8, r0
 800acee:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800acf0:	4689      	mov	r9, r1
 800acf2:	f7f5 fb87 	bl	8000404 <__aeabi_i2d>
 800acf6:	4604      	mov	r4, r0
 800acf8:	460d      	mov	r5, r1
 800acfa:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800acfc:	4b2e      	ldr	r3, [pc, #184]	; (800adb8 <__ieee754_pow+0x748>)
 800acfe:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800ad02:	4413      	add	r3, r2
 800ad04:	e9d3 6700 	ldrd	r6, r7, [r3]
 800ad08:	4642      	mov	r2, r8
 800ad0a:	464b      	mov	r3, r9
 800ad0c:	f7f5 fa2e 	bl	800016c <__adddf3>
 800ad10:	4632      	mov	r2, r6
 800ad12:	463b      	mov	r3, r7
 800ad14:	f7f5 fa2a 	bl	800016c <__adddf3>
 800ad18:	4622      	mov	r2, r4
 800ad1a:	462b      	mov	r3, r5
 800ad1c:	f7f5 fa26 	bl	800016c <__adddf3>
 800ad20:	f8dd a010 	ldr.w	sl, [sp, #16]
 800ad24:	4622      	mov	r2, r4
 800ad26:	462b      	mov	r3, r5
 800ad28:	4650      	mov	r0, sl
 800ad2a:	468b      	mov	fp, r1
 800ad2c:	f7f5 fa1c 	bl	8000168 <__aeabi_dsub>
 800ad30:	4632      	mov	r2, r6
 800ad32:	463b      	mov	r3, r7
 800ad34:	f7f5 fa18 	bl	8000168 <__aeabi_dsub>
 800ad38:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800ad3c:	f7f5 fa14 	bl	8000168 <__aeabi_dsub>
 800ad40:	4602      	mov	r2, r0
 800ad42:	460b      	mov	r3, r1
 800ad44:	4640      	mov	r0, r8
 800ad46:	4649      	mov	r1, r9
 800ad48:	e608      	b.n	800a95c <__ieee754_pow+0x2ec>
 800ad4a:	bf00      	nop
 800ad4c:	f3af 8000 	nop.w
 800ad50:	4a454eef 	.word	0x4a454eef
 800ad54:	3fca7e28 	.word	0x3fca7e28
 800ad58:	93c9db65 	.word	0x93c9db65
 800ad5c:	3fcd864a 	.word	0x3fcd864a
 800ad60:	a91d4101 	.word	0xa91d4101
 800ad64:	3fd17460 	.word	0x3fd17460
 800ad68:	518f264d 	.word	0x518f264d
 800ad6c:	3fd55555 	.word	0x3fd55555
 800ad70:	db6fabff 	.word	0xdb6fabff
 800ad74:	3fdb6db6 	.word	0x3fdb6db6
 800ad78:	33333303 	.word	0x33333303
 800ad7c:	3fe33333 	.word	0x3fe33333
 800ad80:	e0000000 	.word	0xe0000000
 800ad84:	3feec709 	.word	0x3feec709
 800ad88:	dc3a03fd 	.word	0xdc3a03fd
 800ad8c:	3feec709 	.word	0x3feec709
 800ad90:	145b01f5 	.word	0x145b01f5
 800ad94:	be3e2fe0 	.word	0xbe3e2fe0
 800ad98:	7ff00000 	.word	0x7ff00000
 800ad9c:	43400000 	.word	0x43400000
 800ada0:	0003988e 	.word	0x0003988e
 800ada4:	000bb679 	.word	0x000bb679
 800ada8:	0800e6d0 	.word	0x0800e6d0
 800adac:	3ff00000 	.word	0x3ff00000
 800adb0:	40080000 	.word	0x40080000
 800adb4:	0800e6f0 	.word	0x0800e6f0
 800adb8:	0800e6e0 	.word	0x0800e6e0
 800adbc:	2601      	movs	r6, #1
 800adbe:	e667      	b.n	800aa90 <__ieee754_pow+0x420>
 800adc0:	a39d      	add	r3, pc, #628	; (adr r3, 800b038 <__ieee754_pow+0x9c8>)
 800adc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800adc6:	4640      	mov	r0, r8
 800adc8:	4649      	mov	r1, r9
 800adca:	f7f5 f9cf 	bl	800016c <__adddf3>
 800adce:	4622      	mov	r2, r4
 800add0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800add4:	462b      	mov	r3, r5
 800add6:	4650      	mov	r0, sl
 800add8:	4639      	mov	r1, r7
 800adda:	f7f5 f9c5 	bl	8000168 <__aeabi_dsub>
 800adde:	4602      	mov	r2, r0
 800ade0:	460b      	mov	r3, r1
 800ade2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800ade6:	f7f5 fe07 	bl	80009f8 <__aeabi_dcmpgt>
 800adea:	2800      	cmp	r0, #0
 800adec:	f47f ae01 	bne.w	800a9f2 <__ieee754_pow+0x382>
 800adf0:	4aa5      	ldr	r2, [pc, #660]	; (800b088 <__ieee754_pow+0xa18>)
 800adf2:	f026 4300 	bic.w	r3, r6, #2147483648	; 0x80000000
 800adf6:	4293      	cmp	r3, r2
 800adf8:	f340 8103 	ble.w	800b002 <__ieee754_pow+0x992>
 800adfc:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 800ae00:	2000      	movs	r0, #0
 800ae02:	151b      	asrs	r3, r3, #20
 800ae04:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 800ae08:	fa4a f303 	asr.w	r3, sl, r3
 800ae0c:	4433      	add	r3, r6
 800ae0e:	f3c3 520a 	ubfx	r2, r3, #20, #11
 800ae12:	4f9e      	ldr	r7, [pc, #632]	; (800b08c <__ieee754_pow+0xa1c>)
 800ae14:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 800ae18:	4117      	asrs	r7, r2
 800ae1a:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 800ae1e:	ea23 0107 	bic.w	r1, r3, r7
 800ae22:	f1c2 0214 	rsb	r2, r2, #20
 800ae26:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 800ae2a:	460b      	mov	r3, r1
 800ae2c:	fa4a fa02 	asr.w	sl, sl, r2
 800ae30:	2e00      	cmp	r6, #0
 800ae32:	4602      	mov	r2, r0
 800ae34:	4629      	mov	r1, r5
 800ae36:	4620      	mov	r0, r4
 800ae38:	bfb8      	it	lt
 800ae3a:	f1ca 0a00 	rsblt	sl, sl, #0
 800ae3e:	f7f5 f993 	bl	8000168 <__aeabi_dsub>
 800ae42:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ae46:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ae4a:	2400      	movs	r4, #0
 800ae4c:	4642      	mov	r2, r8
 800ae4e:	464b      	mov	r3, r9
 800ae50:	f7f5 f98c 	bl	800016c <__adddf3>
 800ae54:	a37a      	add	r3, pc, #488	; (adr r3, 800b040 <__ieee754_pow+0x9d0>)
 800ae56:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae5a:	4620      	mov	r0, r4
 800ae5c:	460d      	mov	r5, r1
 800ae5e:	f7f5 fb3b 	bl	80004d8 <__aeabi_dmul>
 800ae62:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800ae66:	4606      	mov	r6, r0
 800ae68:	460f      	mov	r7, r1
 800ae6a:	4620      	mov	r0, r4
 800ae6c:	4629      	mov	r1, r5
 800ae6e:	f7f5 f97b 	bl	8000168 <__aeabi_dsub>
 800ae72:	4602      	mov	r2, r0
 800ae74:	460b      	mov	r3, r1
 800ae76:	4640      	mov	r0, r8
 800ae78:	4649      	mov	r1, r9
 800ae7a:	f7f5 f975 	bl	8000168 <__aeabi_dsub>
 800ae7e:	a372      	add	r3, pc, #456	; (adr r3, 800b048 <__ieee754_pow+0x9d8>)
 800ae80:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae84:	f7f5 fb28 	bl	80004d8 <__aeabi_dmul>
 800ae88:	a371      	add	r3, pc, #452	; (adr r3, 800b050 <__ieee754_pow+0x9e0>)
 800ae8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae8e:	4680      	mov	r8, r0
 800ae90:	4689      	mov	r9, r1
 800ae92:	4620      	mov	r0, r4
 800ae94:	4629      	mov	r1, r5
 800ae96:	f7f5 fb1f 	bl	80004d8 <__aeabi_dmul>
 800ae9a:	4602      	mov	r2, r0
 800ae9c:	460b      	mov	r3, r1
 800ae9e:	4640      	mov	r0, r8
 800aea0:	4649      	mov	r1, r9
 800aea2:	f7f5 f963 	bl	800016c <__adddf3>
 800aea6:	4604      	mov	r4, r0
 800aea8:	460d      	mov	r5, r1
 800aeaa:	4602      	mov	r2, r0
 800aeac:	460b      	mov	r3, r1
 800aeae:	4630      	mov	r0, r6
 800aeb0:	4639      	mov	r1, r7
 800aeb2:	f7f5 f95b 	bl	800016c <__adddf3>
 800aeb6:	4632      	mov	r2, r6
 800aeb8:	463b      	mov	r3, r7
 800aeba:	4680      	mov	r8, r0
 800aebc:	4689      	mov	r9, r1
 800aebe:	f7f5 f953 	bl	8000168 <__aeabi_dsub>
 800aec2:	4602      	mov	r2, r0
 800aec4:	460b      	mov	r3, r1
 800aec6:	4620      	mov	r0, r4
 800aec8:	4629      	mov	r1, r5
 800aeca:	f7f5 f94d 	bl	8000168 <__aeabi_dsub>
 800aece:	4642      	mov	r2, r8
 800aed0:	4606      	mov	r6, r0
 800aed2:	460f      	mov	r7, r1
 800aed4:	464b      	mov	r3, r9
 800aed6:	4640      	mov	r0, r8
 800aed8:	4649      	mov	r1, r9
 800aeda:	f7f5 fafd 	bl	80004d8 <__aeabi_dmul>
 800aede:	a35e      	add	r3, pc, #376	; (adr r3, 800b058 <__ieee754_pow+0x9e8>)
 800aee0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aee4:	4604      	mov	r4, r0
 800aee6:	460d      	mov	r5, r1
 800aee8:	f7f5 faf6 	bl	80004d8 <__aeabi_dmul>
 800aeec:	a35c      	add	r3, pc, #368	; (adr r3, 800b060 <__ieee754_pow+0x9f0>)
 800aeee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aef2:	f7f5 f939 	bl	8000168 <__aeabi_dsub>
 800aef6:	4622      	mov	r2, r4
 800aef8:	462b      	mov	r3, r5
 800aefa:	f7f5 faed 	bl	80004d8 <__aeabi_dmul>
 800aefe:	a35a      	add	r3, pc, #360	; (adr r3, 800b068 <__ieee754_pow+0x9f8>)
 800af00:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af04:	f7f5 f932 	bl	800016c <__adddf3>
 800af08:	4622      	mov	r2, r4
 800af0a:	462b      	mov	r3, r5
 800af0c:	f7f5 fae4 	bl	80004d8 <__aeabi_dmul>
 800af10:	a357      	add	r3, pc, #348	; (adr r3, 800b070 <__ieee754_pow+0xa00>)
 800af12:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af16:	f7f5 f927 	bl	8000168 <__aeabi_dsub>
 800af1a:	4622      	mov	r2, r4
 800af1c:	462b      	mov	r3, r5
 800af1e:	f7f5 fadb 	bl	80004d8 <__aeabi_dmul>
 800af22:	a355      	add	r3, pc, #340	; (adr r3, 800b078 <__ieee754_pow+0xa08>)
 800af24:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af28:	f7f5 f920 	bl	800016c <__adddf3>
 800af2c:	4622      	mov	r2, r4
 800af2e:	462b      	mov	r3, r5
 800af30:	f7f5 fad2 	bl	80004d8 <__aeabi_dmul>
 800af34:	4602      	mov	r2, r0
 800af36:	460b      	mov	r3, r1
 800af38:	4640      	mov	r0, r8
 800af3a:	4649      	mov	r1, r9
 800af3c:	f7f5 f914 	bl	8000168 <__aeabi_dsub>
 800af40:	4604      	mov	r4, r0
 800af42:	460d      	mov	r5, r1
 800af44:	4602      	mov	r2, r0
 800af46:	460b      	mov	r3, r1
 800af48:	4640      	mov	r0, r8
 800af4a:	4649      	mov	r1, r9
 800af4c:	f7f5 fac4 	bl	80004d8 <__aeabi_dmul>
 800af50:	2200      	movs	r2, #0
 800af52:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800af56:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800af5a:	4620      	mov	r0, r4
 800af5c:	4629      	mov	r1, r5
 800af5e:	f7f5 f903 	bl	8000168 <__aeabi_dsub>
 800af62:	4602      	mov	r2, r0
 800af64:	460b      	mov	r3, r1
 800af66:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800af6a:	f7f5 fbdf 	bl	800072c <__aeabi_ddiv>
 800af6e:	4632      	mov	r2, r6
 800af70:	4604      	mov	r4, r0
 800af72:	460d      	mov	r5, r1
 800af74:	463b      	mov	r3, r7
 800af76:	4640      	mov	r0, r8
 800af78:	4649      	mov	r1, r9
 800af7a:	f7f5 faad 	bl	80004d8 <__aeabi_dmul>
 800af7e:	4632      	mov	r2, r6
 800af80:	463b      	mov	r3, r7
 800af82:	f7f5 f8f3 	bl	800016c <__adddf3>
 800af86:	4602      	mov	r2, r0
 800af88:	460b      	mov	r3, r1
 800af8a:	4620      	mov	r0, r4
 800af8c:	4629      	mov	r1, r5
 800af8e:	f7f5 f8eb 	bl	8000168 <__aeabi_dsub>
 800af92:	4642      	mov	r2, r8
 800af94:	464b      	mov	r3, r9
 800af96:	f7f5 f8e7 	bl	8000168 <__aeabi_dsub>
 800af9a:	4602      	mov	r2, r0
 800af9c:	460b      	mov	r3, r1
 800af9e:	2000      	movs	r0, #0
 800afa0:	493b      	ldr	r1, [pc, #236]	; (800b090 <__ieee754_pow+0xa20>)
 800afa2:	f7f5 f8e1 	bl	8000168 <__aeabi_dsub>
 800afa6:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 800afaa:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 800afae:	da2b      	bge.n	800b008 <__ieee754_pow+0x998>
 800afb0:	4652      	mov	r2, sl
 800afb2:	f000 f9b9 	bl	800b328 <scalbn>
 800afb6:	e9dd 2300 	ldrd	r2, r3, [sp]
 800afba:	f7ff bbf2 	b.w	800a7a2 <__ieee754_pow+0x132>
 800afbe:	4b35      	ldr	r3, [pc, #212]	; (800b094 <__ieee754_pow+0xa24>)
 800afc0:	f021 4700 	bic.w	r7, r1, #2147483648	; 0x80000000
 800afc4:	429f      	cmp	r7, r3
 800afc6:	f77f af13 	ble.w	800adf0 <__ieee754_pow+0x780>
 800afca:	4b33      	ldr	r3, [pc, #204]	; (800b098 <__ieee754_pow+0xa28>)
 800afcc:	440b      	add	r3, r1
 800afce:	4303      	orrs	r3, r0
 800afd0:	d00b      	beq.n	800afea <__ieee754_pow+0x97a>
 800afd2:	a32b      	add	r3, pc, #172	; (adr r3, 800b080 <__ieee754_pow+0xa10>)
 800afd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800afd8:	e9dd 0100 	ldrd	r0, r1, [sp]
 800afdc:	f7f5 fa7c 	bl	80004d8 <__aeabi_dmul>
 800afe0:	a327      	add	r3, pc, #156	; (adr r3, 800b080 <__ieee754_pow+0xa10>)
 800afe2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800afe6:	f7ff bbdc 	b.w	800a7a2 <__ieee754_pow+0x132>
 800afea:	4622      	mov	r2, r4
 800afec:	462b      	mov	r3, r5
 800afee:	f7f5 f8bb 	bl	8000168 <__aeabi_dsub>
 800aff2:	4642      	mov	r2, r8
 800aff4:	464b      	mov	r3, r9
 800aff6:	f7f5 fcf5 	bl	80009e4 <__aeabi_dcmpge>
 800affa:	2800      	cmp	r0, #0
 800affc:	f43f aef8 	beq.w	800adf0 <__ieee754_pow+0x780>
 800b000:	e7e7      	b.n	800afd2 <__ieee754_pow+0x962>
 800b002:	f04f 0a00 	mov.w	sl, #0
 800b006:	e71e      	b.n	800ae46 <__ieee754_pow+0x7d6>
 800b008:	4621      	mov	r1, r4
 800b00a:	e7d4      	b.n	800afb6 <__ieee754_pow+0x946>
 800b00c:	f04f 0b00 	mov.w	fp, #0
 800b010:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800b090 <__ieee754_pow+0xa20>
 800b014:	f7ff bbb0 	b.w	800a778 <__ieee754_pow+0x108>
 800b018:	e9dd bc02 	ldrd	fp, ip, [sp, #8]
 800b01c:	f7ff bbac 	b.w	800a778 <__ieee754_pow+0x108>
 800b020:	4638      	mov	r0, r7
 800b022:	4641      	mov	r1, r8
 800b024:	f7ff bbbf 	b.w	800a7a6 <__ieee754_pow+0x136>
 800b028:	9200      	str	r2, [sp, #0]
 800b02a:	f7ff bb7f 	b.w	800a72c <__ieee754_pow+0xbc>
 800b02e:	2300      	movs	r3, #0
 800b030:	f7ff bb69 	b.w	800a706 <__ieee754_pow+0x96>
 800b034:	f3af 8000 	nop.w
 800b038:	652b82fe 	.word	0x652b82fe
 800b03c:	3c971547 	.word	0x3c971547
 800b040:	00000000 	.word	0x00000000
 800b044:	3fe62e43 	.word	0x3fe62e43
 800b048:	fefa39ef 	.word	0xfefa39ef
 800b04c:	3fe62e42 	.word	0x3fe62e42
 800b050:	0ca86c39 	.word	0x0ca86c39
 800b054:	be205c61 	.word	0xbe205c61
 800b058:	72bea4d0 	.word	0x72bea4d0
 800b05c:	3e663769 	.word	0x3e663769
 800b060:	c5d26bf1 	.word	0xc5d26bf1
 800b064:	3ebbbd41 	.word	0x3ebbbd41
 800b068:	af25de2c 	.word	0xaf25de2c
 800b06c:	3f11566a 	.word	0x3f11566a
 800b070:	16bebd93 	.word	0x16bebd93
 800b074:	3f66c16c 	.word	0x3f66c16c
 800b078:	5555553e 	.word	0x5555553e
 800b07c:	3fc55555 	.word	0x3fc55555
 800b080:	c2f8f359 	.word	0xc2f8f359
 800b084:	01a56e1f 	.word	0x01a56e1f
 800b088:	3fe00000 	.word	0x3fe00000
 800b08c:	000fffff 	.word	0x000fffff
 800b090:	3ff00000 	.word	0x3ff00000
 800b094:	4090cbff 	.word	0x4090cbff
 800b098:	3f6f3400 	.word	0x3f6f3400

0800b09c <__ieee754_sqrt>:
 800b09c:	f8df c150 	ldr.w	ip, [pc, #336]	; 800b1f0 <__ieee754_sqrt+0x154>
 800b0a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b0a4:	ea3c 0c01 	bics.w	ip, ip, r1
 800b0a8:	460b      	mov	r3, r1
 800b0aa:	4606      	mov	r6, r0
 800b0ac:	460d      	mov	r5, r1
 800b0ae:	460a      	mov	r2, r1
 800b0b0:	4607      	mov	r7, r0
 800b0b2:	4604      	mov	r4, r0
 800b0b4:	d10e      	bne.n	800b0d4 <__ieee754_sqrt+0x38>
 800b0b6:	4602      	mov	r2, r0
 800b0b8:	f7f5 fa0e 	bl	80004d8 <__aeabi_dmul>
 800b0bc:	4602      	mov	r2, r0
 800b0be:	460b      	mov	r3, r1
 800b0c0:	4630      	mov	r0, r6
 800b0c2:	4629      	mov	r1, r5
 800b0c4:	f7f5 f852 	bl	800016c <__adddf3>
 800b0c8:	4606      	mov	r6, r0
 800b0ca:	460d      	mov	r5, r1
 800b0cc:	4630      	mov	r0, r6
 800b0ce:	4629      	mov	r1, r5
 800b0d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b0d4:	2900      	cmp	r1, #0
 800b0d6:	dc0d      	bgt.n	800b0f4 <__ieee754_sqrt+0x58>
 800b0d8:	f021 4c00 	bic.w	ip, r1, #2147483648	; 0x80000000
 800b0dc:	ea5c 0707 	orrs.w	r7, ip, r7
 800b0e0:	d0f4      	beq.n	800b0cc <__ieee754_sqrt+0x30>
 800b0e2:	b139      	cbz	r1, 800b0f4 <__ieee754_sqrt+0x58>
 800b0e4:	4602      	mov	r2, r0
 800b0e6:	f7f5 f83f 	bl	8000168 <__aeabi_dsub>
 800b0ea:	4602      	mov	r2, r0
 800b0ec:	460b      	mov	r3, r1
 800b0ee:	f7f5 fb1d 	bl	800072c <__aeabi_ddiv>
 800b0f2:	e7e9      	b.n	800b0c8 <__ieee754_sqrt+0x2c>
 800b0f4:	1512      	asrs	r2, r2, #20
 800b0f6:	d074      	beq.n	800b1e2 <__ieee754_sqrt+0x146>
 800b0f8:	2000      	movs	r0, #0
 800b0fa:	07d5      	lsls	r5, r2, #31
 800b0fc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b100:	f443 1180 	orr.w	r1, r3, #1048576	; 0x100000
 800b104:	bf5e      	ittt	pl
 800b106:	0fe3      	lsrpl	r3, r4, #31
 800b108:	0064      	lslpl	r4, r4, #1
 800b10a:	eb03 0141 	addpl.w	r1, r3, r1, lsl #1
 800b10e:	0fe3      	lsrs	r3, r4, #31
 800b110:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 800b114:	eb03 0341 	add.w	r3, r3, r1, lsl #1
 800b118:	2516      	movs	r5, #22
 800b11a:	4601      	mov	r1, r0
 800b11c:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800b120:	1076      	asrs	r6, r6, #1
 800b122:	0064      	lsls	r4, r4, #1
 800b124:	188f      	adds	r7, r1, r2
 800b126:	429f      	cmp	r7, r3
 800b128:	bfde      	ittt	le
 800b12a:	1bdb      	suble	r3, r3, r7
 800b12c:	18b9      	addle	r1, r7, r2
 800b12e:	1880      	addle	r0, r0, r2
 800b130:	005b      	lsls	r3, r3, #1
 800b132:	3d01      	subs	r5, #1
 800b134:	eb03 73d4 	add.w	r3, r3, r4, lsr #31
 800b138:	ea4f 0252 	mov.w	r2, r2, lsr #1
 800b13c:	ea4f 0444 	mov.w	r4, r4, lsl #1
 800b140:	d1f0      	bne.n	800b124 <__ieee754_sqrt+0x88>
 800b142:	462a      	mov	r2, r5
 800b144:	f04f 0e20 	mov.w	lr, #32
 800b148:	f04f 4700 	mov.w	r7, #2147483648	; 0x80000000
 800b14c:	428b      	cmp	r3, r1
 800b14e:	eb07 0c05 	add.w	ip, r7, r5
 800b152:	dc02      	bgt.n	800b15a <__ieee754_sqrt+0xbe>
 800b154:	d113      	bne.n	800b17e <__ieee754_sqrt+0xe2>
 800b156:	45a4      	cmp	ip, r4
 800b158:	d811      	bhi.n	800b17e <__ieee754_sqrt+0xe2>
 800b15a:	f1bc 0f00 	cmp.w	ip, #0
 800b15e:	eb0c 0507 	add.w	r5, ip, r7
 800b162:	da43      	bge.n	800b1ec <__ieee754_sqrt+0x150>
 800b164:	2d00      	cmp	r5, #0
 800b166:	db41      	blt.n	800b1ec <__ieee754_sqrt+0x150>
 800b168:	f101 0801 	add.w	r8, r1, #1
 800b16c:	1a5b      	subs	r3, r3, r1
 800b16e:	4641      	mov	r1, r8
 800b170:	45a4      	cmp	ip, r4
 800b172:	bf88      	it	hi
 800b174:	f103 33ff 	addhi.w	r3, r3, #4294967295	; 0xffffffff
 800b178:	eba4 040c 	sub.w	r4, r4, ip
 800b17c:	443a      	add	r2, r7
 800b17e:	005b      	lsls	r3, r3, #1
 800b180:	f1be 0e01 	subs.w	lr, lr, #1
 800b184:	eb03 73d4 	add.w	r3, r3, r4, lsr #31
 800b188:	ea4f 0757 	mov.w	r7, r7, lsr #1
 800b18c:	ea4f 0444 	mov.w	r4, r4, lsl #1
 800b190:	d1dc      	bne.n	800b14c <__ieee754_sqrt+0xb0>
 800b192:	4323      	orrs	r3, r4
 800b194:	d006      	beq.n	800b1a4 <__ieee754_sqrt+0x108>
 800b196:	1c54      	adds	r4, r2, #1
 800b198:	bf0b      	itete	eq
 800b19a:	4672      	moveq	r2, lr
 800b19c:	3201      	addne	r2, #1
 800b19e:	3001      	addeq	r0, #1
 800b1a0:	f022 0201 	bicne.w	r2, r2, #1
 800b1a4:	1043      	asrs	r3, r0, #1
 800b1a6:	07c1      	lsls	r1, r0, #31
 800b1a8:	ea4f 0252 	mov.w	r2, r2, lsr #1
 800b1ac:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800b1b0:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800b1b4:	bf48      	it	mi
 800b1b6:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 800b1ba:	4610      	mov	r0, r2
 800b1bc:	eb03 5106 	add.w	r1, r3, r6, lsl #20
 800b1c0:	e782      	b.n	800b0c8 <__ieee754_sqrt+0x2c>
 800b1c2:	0ae3      	lsrs	r3, r4, #11
 800b1c4:	3915      	subs	r1, #21
 800b1c6:	0564      	lsls	r4, r4, #21
 800b1c8:	2b00      	cmp	r3, #0
 800b1ca:	d0fa      	beq.n	800b1c2 <__ieee754_sqrt+0x126>
 800b1cc:	02de      	lsls	r6, r3, #11
 800b1ce:	d50a      	bpl.n	800b1e6 <__ieee754_sqrt+0x14a>
 800b1d0:	f1c2 0020 	rsb	r0, r2, #32
 800b1d4:	fa24 f000 	lsr.w	r0, r4, r0
 800b1d8:	1e55      	subs	r5, r2, #1
 800b1da:	4094      	lsls	r4, r2
 800b1dc:	4303      	orrs	r3, r0
 800b1de:	1b4a      	subs	r2, r1, r5
 800b1e0:	e78a      	b.n	800b0f8 <__ieee754_sqrt+0x5c>
 800b1e2:	4611      	mov	r1, r2
 800b1e4:	e7f0      	b.n	800b1c8 <__ieee754_sqrt+0x12c>
 800b1e6:	005b      	lsls	r3, r3, #1
 800b1e8:	3201      	adds	r2, #1
 800b1ea:	e7ef      	b.n	800b1cc <__ieee754_sqrt+0x130>
 800b1ec:	4688      	mov	r8, r1
 800b1ee:	e7bd      	b.n	800b16c <__ieee754_sqrt+0xd0>
 800b1f0:	7ff00000 	.word	0x7ff00000

0800b1f4 <fabs>:
 800b1f4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800b1f8:	4770      	bx	lr

0800b1fa <finite>:
 800b1fa:	f041 4000 	orr.w	r0, r1, #2147483648	; 0x80000000
 800b1fe:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800b202:	0fc0      	lsrs	r0, r0, #31
 800b204:	4770      	bx	lr
	...

0800b208 <nan>:
 800b208:	2000      	movs	r0, #0
 800b20a:	4901      	ldr	r1, [pc, #4]	; (800b210 <nan+0x8>)
 800b20c:	4770      	bx	lr
 800b20e:	bf00      	nop
 800b210:	7ff80000 	.word	0x7ff80000

0800b214 <rint>:
 800b214:	f3c1 5c0a 	ubfx	ip, r1, #20, #11
 800b218:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b21a:	f2ac 37ff 	subw	r7, ip, #1023	; 0x3ff
 800b21e:	2f13      	cmp	r7, #19
 800b220:	4602      	mov	r2, r0
 800b222:	460b      	mov	r3, r1
 800b224:	460c      	mov	r4, r1
 800b226:	4605      	mov	r5, r0
 800b228:	ea4f 76d1 	mov.w	r6, r1, lsr #31
 800b22c:	dc59      	bgt.n	800b2e2 <rint+0xce>
 800b22e:	2f00      	cmp	r7, #0
 800b230:	da2a      	bge.n	800b288 <rint+0x74>
 800b232:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800b236:	4301      	orrs	r1, r0
 800b238:	d022      	beq.n	800b280 <rint+0x6c>
 800b23a:	f3c3 0113 	ubfx	r1, r3, #0, #20
 800b23e:	4301      	orrs	r1, r0
 800b240:	424d      	negs	r5, r1
 800b242:	430d      	orrs	r5, r1
 800b244:	4936      	ldr	r1, [pc, #216]	; (800b320 <rint+0x10c>)
 800b246:	0c5c      	lsrs	r4, r3, #17
 800b248:	0b2d      	lsrs	r5, r5, #12
 800b24a:	f405 2500 	and.w	r5, r5, #524288	; 0x80000
 800b24e:	0464      	lsls	r4, r4, #17
 800b250:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800b254:	ea45 0304 	orr.w	r3, r5, r4
 800b258:	e9d1 4500 	ldrd	r4, r5, [r1]
 800b25c:	4620      	mov	r0, r4
 800b25e:	4629      	mov	r1, r5
 800b260:	f7f4 ff84 	bl	800016c <__adddf3>
 800b264:	e9cd 0100 	strd	r0, r1, [sp]
 800b268:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b26c:	462b      	mov	r3, r5
 800b26e:	4622      	mov	r2, r4
 800b270:	f7f4 ff7a 	bl	8000168 <__aeabi_dsub>
 800b274:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800b278:	ea43 71c6 	orr.w	r1, r3, r6, lsl #31
 800b27c:	4602      	mov	r2, r0
 800b27e:	460b      	mov	r3, r1
 800b280:	4610      	mov	r0, r2
 800b282:	4619      	mov	r1, r3
 800b284:	b003      	add	sp, #12
 800b286:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b288:	4926      	ldr	r1, [pc, #152]	; (800b324 <rint+0x110>)
 800b28a:	4139      	asrs	r1, r7
 800b28c:	ea03 0001 	and.w	r0, r3, r1
 800b290:	4310      	orrs	r0, r2
 800b292:	d0f5      	beq.n	800b280 <rint+0x6c>
 800b294:	084b      	lsrs	r3, r1, #1
 800b296:	ea04 0151 	and.w	r1, r4, r1, lsr #1
 800b29a:	ea52 0501 	orrs.w	r5, r2, r1
 800b29e:	d00c      	beq.n	800b2ba <rint+0xa6>
 800b2a0:	ea24 0303 	bic.w	r3, r4, r3
 800b2a4:	f44f 2480 	mov.w	r4, #262144	; 0x40000
 800b2a8:	2f13      	cmp	r7, #19
 800b2aa:	bf0c      	ite	eq
 800b2ac:	f04f 4500 	moveq.w	r5, #2147483648	; 0x80000000
 800b2b0:	2500      	movne	r5, #0
 800b2b2:	fa44 f707 	asr.w	r7, r4, r7
 800b2b6:	ea43 0407 	orr.w	r4, r3, r7
 800b2ba:	4919      	ldr	r1, [pc, #100]	; (800b320 <rint+0x10c>)
 800b2bc:	4623      	mov	r3, r4
 800b2be:	eb01 06c6 	add.w	r6, r1, r6, lsl #3
 800b2c2:	462a      	mov	r2, r5
 800b2c4:	e9d6 4500 	ldrd	r4, r5, [r6]
 800b2c8:	4620      	mov	r0, r4
 800b2ca:	4629      	mov	r1, r5
 800b2cc:	f7f4 ff4e 	bl	800016c <__adddf3>
 800b2d0:	e9cd 0100 	strd	r0, r1, [sp]
 800b2d4:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b2d8:	4622      	mov	r2, r4
 800b2da:	462b      	mov	r3, r5
 800b2dc:	f7f4 ff44 	bl	8000168 <__aeabi_dsub>
 800b2e0:	e7cc      	b.n	800b27c <rint+0x68>
 800b2e2:	2f33      	cmp	r7, #51	; 0x33
 800b2e4:	dd05      	ble.n	800b2f2 <rint+0xde>
 800b2e6:	f5b7 6f80 	cmp.w	r7, #1024	; 0x400
 800b2ea:	d1c9      	bne.n	800b280 <rint+0x6c>
 800b2ec:	f7f4 ff3e 	bl	800016c <__adddf3>
 800b2f0:	e7c4      	b.n	800b27c <rint+0x68>
 800b2f2:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800b2f6:	f2ac 4c13 	subw	ip, ip, #1043	; 0x413
 800b2fa:	fa21 f10c 	lsr.w	r1, r1, ip
 800b2fe:	4208      	tst	r0, r1
 800b300:	d0be      	beq.n	800b280 <rint+0x6c>
 800b302:	ea10 0251 	ands.w	r2, r0, r1, lsr #1
 800b306:	bf18      	it	ne
 800b308:	f04f 4580 	movne.w	r5, #1073741824	; 0x40000000
 800b30c:	ea4f 0351 	mov.w	r3, r1, lsr #1
 800b310:	bf1e      	ittt	ne
 800b312:	ea20 0303 	bicne.w	r3, r0, r3
 800b316:	fa45 fc0c 	asrne.w	ip, r5, ip
 800b31a:	ea43 050c 	orrne.w	r5, r3, ip
 800b31e:	e7cc      	b.n	800b2ba <rint+0xa6>
 800b320:	0800e700 	.word	0x0800e700
 800b324:	000fffff 	.word	0x000fffff

0800b328 <scalbn>:
 800b328:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b32a:	f3c1 560a 	ubfx	r6, r1, #20, #11
 800b32e:	4604      	mov	r4, r0
 800b330:	460d      	mov	r5, r1
 800b332:	4617      	mov	r7, r2
 800b334:	460b      	mov	r3, r1
 800b336:	b996      	cbnz	r6, 800b35e <scalbn+0x36>
 800b338:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800b33c:	4303      	orrs	r3, r0
 800b33e:	d039      	beq.n	800b3b4 <scalbn+0x8c>
 800b340:	4b35      	ldr	r3, [pc, #212]	; (800b418 <scalbn+0xf0>)
 800b342:	2200      	movs	r2, #0
 800b344:	f7f5 f8c8 	bl	80004d8 <__aeabi_dmul>
 800b348:	4b34      	ldr	r3, [pc, #208]	; (800b41c <scalbn+0xf4>)
 800b34a:	4604      	mov	r4, r0
 800b34c:	429f      	cmp	r7, r3
 800b34e:	460d      	mov	r5, r1
 800b350:	da0f      	bge.n	800b372 <scalbn+0x4a>
 800b352:	a32d      	add	r3, pc, #180	; (adr r3, 800b408 <scalbn+0xe0>)
 800b354:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b358:	f7f5 f8be 	bl	80004d8 <__aeabi_dmul>
 800b35c:	e006      	b.n	800b36c <scalbn+0x44>
 800b35e:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800b362:	4296      	cmp	r6, r2
 800b364:	d10a      	bne.n	800b37c <scalbn+0x54>
 800b366:	4602      	mov	r2, r0
 800b368:	f7f4 ff00 	bl	800016c <__adddf3>
 800b36c:	4604      	mov	r4, r0
 800b36e:	460d      	mov	r5, r1
 800b370:	e020      	b.n	800b3b4 <scalbn+0x8c>
 800b372:	460b      	mov	r3, r1
 800b374:	f3c1 510a 	ubfx	r1, r1, #20, #11
 800b378:	f1a1 0636 	sub.w	r6, r1, #54	; 0x36
 800b37c:	f240 72fe 	movw	r2, #2046	; 0x7fe
 800b380:	19b9      	adds	r1, r7, r6
 800b382:	4291      	cmp	r1, r2
 800b384:	dd0e      	ble.n	800b3a4 <scalbn+0x7c>
 800b386:	a322      	add	r3, pc, #136	; (adr r3, 800b410 <scalbn+0xe8>)
 800b388:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b38c:	f005 4400 	and.w	r4, r5, #2147483648	; 0x80000000
 800b390:	f044 41fc 	orr.w	r1, r4, #2113929216	; 0x7e000000
 800b394:	f441 115f 	orr.w	r1, r1, #3653632	; 0x37c000
 800b398:	f441 5110 	orr.w	r1, r1, #9216	; 0x2400
 800b39c:	4820      	ldr	r0, [pc, #128]	; (800b420 <scalbn+0xf8>)
 800b39e:	f041 013c 	orr.w	r1, r1, #60	; 0x3c
 800b3a2:	e7d9      	b.n	800b358 <scalbn+0x30>
 800b3a4:	2900      	cmp	r1, #0
 800b3a6:	dd08      	ble.n	800b3ba <scalbn+0x92>
 800b3a8:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800b3ac:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800b3b0:	ea43 5501 	orr.w	r5, r3, r1, lsl #20
 800b3b4:	4620      	mov	r0, r4
 800b3b6:	4629      	mov	r1, r5
 800b3b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b3ba:	f111 0f35 	cmn.w	r1, #53	; 0x35
 800b3be:	da16      	bge.n	800b3ee <scalbn+0xc6>
 800b3c0:	f24c 3350 	movw	r3, #50000	; 0xc350
 800b3c4:	429f      	cmp	r7, r3
 800b3c6:	ea4f 73d5 	mov.w	r3, r5, lsr #31
 800b3ca:	dd08      	ble.n	800b3de <scalbn+0xb6>
 800b3cc:	4c15      	ldr	r4, [pc, #84]	; (800b424 <scalbn+0xfc>)
 800b3ce:	4814      	ldr	r0, [pc, #80]	; (800b420 <scalbn+0xf8>)
 800b3d0:	f363 74df 	bfi	r4, r3, #31, #1
 800b3d4:	a30e      	add	r3, pc, #56	; (adr r3, 800b410 <scalbn+0xe8>)
 800b3d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b3da:	4621      	mov	r1, r4
 800b3dc:	e7bc      	b.n	800b358 <scalbn+0x30>
 800b3de:	4c12      	ldr	r4, [pc, #72]	; (800b428 <scalbn+0x100>)
 800b3e0:	4812      	ldr	r0, [pc, #72]	; (800b42c <scalbn+0x104>)
 800b3e2:	f363 74df 	bfi	r4, r3, #31, #1
 800b3e6:	a308      	add	r3, pc, #32	; (adr r3, 800b408 <scalbn+0xe0>)
 800b3e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b3ec:	e7f5      	b.n	800b3da <scalbn+0xb2>
 800b3ee:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800b3f2:	3136      	adds	r1, #54	; 0x36
 800b3f4:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800b3f8:	ea43 5501 	orr.w	r5, r3, r1, lsl #20
 800b3fc:	4620      	mov	r0, r4
 800b3fe:	4629      	mov	r1, r5
 800b400:	2200      	movs	r2, #0
 800b402:	4b0b      	ldr	r3, [pc, #44]	; (800b430 <scalbn+0x108>)
 800b404:	e7a8      	b.n	800b358 <scalbn+0x30>
 800b406:	bf00      	nop
 800b408:	c2f8f359 	.word	0xc2f8f359
 800b40c:	01a56e1f 	.word	0x01a56e1f
 800b410:	8800759c 	.word	0x8800759c
 800b414:	7e37e43c 	.word	0x7e37e43c
 800b418:	43500000 	.word	0x43500000
 800b41c:	ffff3cb0 	.word	0xffff3cb0
 800b420:	8800759c 	.word	0x8800759c
 800b424:	7e37e43c 	.word	0x7e37e43c
 800b428:	01a56e1f 	.word	0x01a56e1f
 800b42c:	c2f8f359 	.word	0xc2f8f359
 800b430:	3c900000 	.word	0x3c900000

0800b434 <__errno>:
 800b434:	4b01      	ldr	r3, [pc, #4]	; (800b43c <__errno+0x8>)
 800b436:	6818      	ldr	r0, [r3, #0]
 800b438:	4770      	bx	lr
 800b43a:	bf00      	nop
 800b43c:	20000058 	.word	0x20000058

0800b440 <__libc_init_array>:
 800b440:	b570      	push	{r4, r5, r6, lr}
 800b442:	2600      	movs	r6, #0
 800b444:	4d0c      	ldr	r5, [pc, #48]	; (800b478 <__libc_init_array+0x38>)
 800b446:	4c0d      	ldr	r4, [pc, #52]	; (800b47c <__libc_init_array+0x3c>)
 800b448:	1b64      	subs	r4, r4, r5
 800b44a:	10a4      	asrs	r4, r4, #2
 800b44c:	42a6      	cmp	r6, r4
 800b44e:	d109      	bne.n	800b464 <__libc_init_array+0x24>
 800b450:	f002 ff1c 	bl	800e28c <_init>
 800b454:	2600      	movs	r6, #0
 800b456:	4d0a      	ldr	r5, [pc, #40]	; (800b480 <__libc_init_array+0x40>)
 800b458:	4c0a      	ldr	r4, [pc, #40]	; (800b484 <__libc_init_array+0x44>)
 800b45a:	1b64      	subs	r4, r4, r5
 800b45c:	10a4      	asrs	r4, r4, #2
 800b45e:	42a6      	cmp	r6, r4
 800b460:	d105      	bne.n	800b46e <__libc_init_array+0x2e>
 800b462:	bd70      	pop	{r4, r5, r6, pc}
 800b464:	f855 3b04 	ldr.w	r3, [r5], #4
 800b468:	4798      	blx	r3
 800b46a:	3601      	adds	r6, #1
 800b46c:	e7ee      	b.n	800b44c <__libc_init_array+0xc>
 800b46e:	f855 3b04 	ldr.w	r3, [r5], #4
 800b472:	4798      	blx	r3
 800b474:	3601      	adds	r6, #1
 800b476:	e7f2      	b.n	800b45e <__libc_init_array+0x1e>
 800b478:	0800eaf4 	.word	0x0800eaf4
 800b47c:	0800eaf4 	.word	0x0800eaf4
 800b480:	0800eaf4 	.word	0x0800eaf4
 800b484:	0800eaf8 	.word	0x0800eaf8

0800b488 <memset>:
 800b488:	4603      	mov	r3, r0
 800b48a:	4402      	add	r2, r0
 800b48c:	4293      	cmp	r3, r2
 800b48e:	d100      	bne.n	800b492 <memset+0xa>
 800b490:	4770      	bx	lr
 800b492:	f803 1b01 	strb.w	r1, [r3], #1
 800b496:	e7f9      	b.n	800b48c <memset+0x4>

0800b498 <__cvt>:
 800b498:	2b00      	cmp	r3, #0
 800b49a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b49e:	461f      	mov	r7, r3
 800b4a0:	bfbb      	ittet	lt
 800b4a2:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 800b4a6:	461f      	movlt	r7, r3
 800b4a8:	2300      	movge	r3, #0
 800b4aa:	232d      	movlt	r3, #45	; 0x2d
 800b4ac:	b088      	sub	sp, #32
 800b4ae:	4614      	mov	r4, r2
 800b4b0:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800b4b2:	9d10      	ldr	r5, [sp, #64]	; 0x40
 800b4b4:	7013      	strb	r3, [r2, #0]
 800b4b6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800b4b8:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 800b4bc:	f023 0820 	bic.w	r8, r3, #32
 800b4c0:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800b4c4:	d005      	beq.n	800b4d2 <__cvt+0x3a>
 800b4c6:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800b4ca:	d100      	bne.n	800b4ce <__cvt+0x36>
 800b4cc:	3501      	adds	r5, #1
 800b4ce:	2302      	movs	r3, #2
 800b4d0:	e000      	b.n	800b4d4 <__cvt+0x3c>
 800b4d2:	2303      	movs	r3, #3
 800b4d4:	aa07      	add	r2, sp, #28
 800b4d6:	9204      	str	r2, [sp, #16]
 800b4d8:	aa06      	add	r2, sp, #24
 800b4da:	e9cd a202 	strd	sl, r2, [sp, #8]
 800b4de:	e9cd 3500 	strd	r3, r5, [sp]
 800b4e2:	4622      	mov	r2, r4
 800b4e4:	463b      	mov	r3, r7
 800b4e6:	f000 fd47 	bl	800bf78 <_dtoa_r>
 800b4ea:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800b4ee:	4606      	mov	r6, r0
 800b4f0:	d102      	bne.n	800b4f8 <__cvt+0x60>
 800b4f2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800b4f4:	07db      	lsls	r3, r3, #31
 800b4f6:	d522      	bpl.n	800b53e <__cvt+0xa6>
 800b4f8:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800b4fc:	eb06 0905 	add.w	r9, r6, r5
 800b500:	d110      	bne.n	800b524 <__cvt+0x8c>
 800b502:	7833      	ldrb	r3, [r6, #0]
 800b504:	2b30      	cmp	r3, #48	; 0x30
 800b506:	d10a      	bne.n	800b51e <__cvt+0x86>
 800b508:	2200      	movs	r2, #0
 800b50a:	2300      	movs	r3, #0
 800b50c:	4620      	mov	r0, r4
 800b50e:	4639      	mov	r1, r7
 800b510:	f7f5 fa4a 	bl	80009a8 <__aeabi_dcmpeq>
 800b514:	b918      	cbnz	r0, 800b51e <__cvt+0x86>
 800b516:	f1c5 0501 	rsb	r5, r5, #1
 800b51a:	f8ca 5000 	str.w	r5, [sl]
 800b51e:	f8da 3000 	ldr.w	r3, [sl]
 800b522:	4499      	add	r9, r3
 800b524:	2200      	movs	r2, #0
 800b526:	2300      	movs	r3, #0
 800b528:	4620      	mov	r0, r4
 800b52a:	4639      	mov	r1, r7
 800b52c:	f7f5 fa3c 	bl	80009a8 <__aeabi_dcmpeq>
 800b530:	b108      	cbz	r0, 800b536 <__cvt+0x9e>
 800b532:	f8cd 901c 	str.w	r9, [sp, #28]
 800b536:	2230      	movs	r2, #48	; 0x30
 800b538:	9b07      	ldr	r3, [sp, #28]
 800b53a:	454b      	cmp	r3, r9
 800b53c:	d307      	bcc.n	800b54e <__cvt+0xb6>
 800b53e:	4630      	mov	r0, r6
 800b540:	9b07      	ldr	r3, [sp, #28]
 800b542:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800b544:	1b9b      	subs	r3, r3, r6
 800b546:	6013      	str	r3, [r2, #0]
 800b548:	b008      	add	sp, #32
 800b54a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b54e:	1c59      	adds	r1, r3, #1
 800b550:	9107      	str	r1, [sp, #28]
 800b552:	701a      	strb	r2, [r3, #0]
 800b554:	e7f0      	b.n	800b538 <__cvt+0xa0>

0800b556 <__exponent>:
 800b556:	4603      	mov	r3, r0
 800b558:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b55a:	2900      	cmp	r1, #0
 800b55c:	f803 2b02 	strb.w	r2, [r3], #2
 800b560:	bfb6      	itet	lt
 800b562:	222d      	movlt	r2, #45	; 0x2d
 800b564:	222b      	movge	r2, #43	; 0x2b
 800b566:	4249      	neglt	r1, r1
 800b568:	2909      	cmp	r1, #9
 800b56a:	7042      	strb	r2, [r0, #1]
 800b56c:	dd2b      	ble.n	800b5c6 <__exponent+0x70>
 800b56e:	f10d 0407 	add.w	r4, sp, #7
 800b572:	46a4      	mov	ip, r4
 800b574:	270a      	movs	r7, #10
 800b576:	fb91 f6f7 	sdiv	r6, r1, r7
 800b57a:	460a      	mov	r2, r1
 800b57c:	46a6      	mov	lr, r4
 800b57e:	fb07 1516 	mls	r5, r7, r6, r1
 800b582:	2a63      	cmp	r2, #99	; 0x63
 800b584:	f105 0530 	add.w	r5, r5, #48	; 0x30
 800b588:	4631      	mov	r1, r6
 800b58a:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 800b58e:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800b592:	dcf0      	bgt.n	800b576 <__exponent+0x20>
 800b594:	3130      	adds	r1, #48	; 0x30
 800b596:	f1ae 0502 	sub.w	r5, lr, #2
 800b59a:	f804 1c01 	strb.w	r1, [r4, #-1]
 800b59e:	4629      	mov	r1, r5
 800b5a0:	1c44      	adds	r4, r0, #1
 800b5a2:	4561      	cmp	r1, ip
 800b5a4:	d30a      	bcc.n	800b5bc <__exponent+0x66>
 800b5a6:	f10d 0209 	add.w	r2, sp, #9
 800b5aa:	eba2 020e 	sub.w	r2, r2, lr
 800b5ae:	4565      	cmp	r5, ip
 800b5b0:	bf88      	it	hi
 800b5b2:	2200      	movhi	r2, #0
 800b5b4:	4413      	add	r3, r2
 800b5b6:	1a18      	subs	r0, r3, r0
 800b5b8:	b003      	add	sp, #12
 800b5ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b5bc:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b5c0:	f804 2f01 	strb.w	r2, [r4, #1]!
 800b5c4:	e7ed      	b.n	800b5a2 <__exponent+0x4c>
 800b5c6:	2330      	movs	r3, #48	; 0x30
 800b5c8:	3130      	adds	r1, #48	; 0x30
 800b5ca:	7083      	strb	r3, [r0, #2]
 800b5cc:	70c1      	strb	r1, [r0, #3]
 800b5ce:	1d03      	adds	r3, r0, #4
 800b5d0:	e7f1      	b.n	800b5b6 <__exponent+0x60>
	...

0800b5d4 <_printf_float>:
 800b5d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b5d8:	b091      	sub	sp, #68	; 0x44
 800b5da:	460c      	mov	r4, r1
 800b5dc:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 800b5e0:	4616      	mov	r6, r2
 800b5e2:	461f      	mov	r7, r3
 800b5e4:	4605      	mov	r5, r0
 800b5e6:	f001 fab5 	bl	800cb54 <_localeconv_r>
 800b5ea:	6803      	ldr	r3, [r0, #0]
 800b5ec:	4618      	mov	r0, r3
 800b5ee:	9309      	str	r3, [sp, #36]	; 0x24
 800b5f0:	f7f4 fdae 	bl	8000150 <strlen>
 800b5f4:	2300      	movs	r3, #0
 800b5f6:	930e      	str	r3, [sp, #56]	; 0x38
 800b5f8:	f8d8 3000 	ldr.w	r3, [r8]
 800b5fc:	900a      	str	r0, [sp, #40]	; 0x28
 800b5fe:	3307      	adds	r3, #7
 800b600:	f023 0307 	bic.w	r3, r3, #7
 800b604:	f103 0208 	add.w	r2, r3, #8
 800b608:	f894 9018 	ldrb.w	r9, [r4, #24]
 800b60c:	f8d4 b000 	ldr.w	fp, [r4]
 800b610:	f8c8 2000 	str.w	r2, [r8]
 800b614:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b618:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800b61c:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 800b620:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 800b624:	930b      	str	r3, [sp, #44]	; 0x2c
 800b626:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b62a:	4640      	mov	r0, r8
 800b62c:	4b9c      	ldr	r3, [pc, #624]	; (800b8a0 <_printf_float+0x2cc>)
 800b62e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800b630:	f7f5 f9ec 	bl	8000a0c <__aeabi_dcmpun>
 800b634:	bb70      	cbnz	r0, 800b694 <_printf_float+0xc0>
 800b636:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b63a:	4640      	mov	r0, r8
 800b63c:	4b98      	ldr	r3, [pc, #608]	; (800b8a0 <_printf_float+0x2cc>)
 800b63e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800b640:	f7f5 f9c6 	bl	80009d0 <__aeabi_dcmple>
 800b644:	bb30      	cbnz	r0, 800b694 <_printf_float+0xc0>
 800b646:	2200      	movs	r2, #0
 800b648:	2300      	movs	r3, #0
 800b64a:	4640      	mov	r0, r8
 800b64c:	4651      	mov	r1, sl
 800b64e:	f7f5 f9b5 	bl	80009bc <__aeabi_dcmplt>
 800b652:	b110      	cbz	r0, 800b65a <_printf_float+0x86>
 800b654:	232d      	movs	r3, #45	; 0x2d
 800b656:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b65a:	4b92      	ldr	r3, [pc, #584]	; (800b8a4 <_printf_float+0x2d0>)
 800b65c:	4892      	ldr	r0, [pc, #584]	; (800b8a8 <_printf_float+0x2d4>)
 800b65e:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 800b662:	bf94      	ite	ls
 800b664:	4698      	movls	r8, r3
 800b666:	4680      	movhi	r8, r0
 800b668:	2303      	movs	r3, #3
 800b66a:	f04f 0a00 	mov.w	sl, #0
 800b66e:	6123      	str	r3, [r4, #16]
 800b670:	f02b 0304 	bic.w	r3, fp, #4
 800b674:	6023      	str	r3, [r4, #0]
 800b676:	4633      	mov	r3, r6
 800b678:	4621      	mov	r1, r4
 800b67a:	4628      	mov	r0, r5
 800b67c:	9700      	str	r7, [sp, #0]
 800b67e:	aa0f      	add	r2, sp, #60	; 0x3c
 800b680:	f000 f9d4 	bl	800ba2c <_printf_common>
 800b684:	3001      	adds	r0, #1
 800b686:	f040 8090 	bne.w	800b7aa <_printf_float+0x1d6>
 800b68a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b68e:	b011      	add	sp, #68	; 0x44
 800b690:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b694:	4642      	mov	r2, r8
 800b696:	4653      	mov	r3, sl
 800b698:	4640      	mov	r0, r8
 800b69a:	4651      	mov	r1, sl
 800b69c:	f7f5 f9b6 	bl	8000a0c <__aeabi_dcmpun>
 800b6a0:	b148      	cbz	r0, 800b6b6 <_printf_float+0xe2>
 800b6a2:	f1ba 0f00 	cmp.w	sl, #0
 800b6a6:	bfb8      	it	lt
 800b6a8:	232d      	movlt	r3, #45	; 0x2d
 800b6aa:	4880      	ldr	r0, [pc, #512]	; (800b8ac <_printf_float+0x2d8>)
 800b6ac:	bfb8      	it	lt
 800b6ae:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800b6b2:	4b7f      	ldr	r3, [pc, #508]	; (800b8b0 <_printf_float+0x2dc>)
 800b6b4:	e7d3      	b.n	800b65e <_printf_float+0x8a>
 800b6b6:	6863      	ldr	r3, [r4, #4]
 800b6b8:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 800b6bc:	1c5a      	adds	r2, r3, #1
 800b6be:	d142      	bne.n	800b746 <_printf_float+0x172>
 800b6c0:	2306      	movs	r3, #6
 800b6c2:	6063      	str	r3, [r4, #4]
 800b6c4:	2200      	movs	r2, #0
 800b6c6:	9206      	str	r2, [sp, #24]
 800b6c8:	aa0e      	add	r2, sp, #56	; 0x38
 800b6ca:	e9cd 9204 	strd	r9, r2, [sp, #16]
 800b6ce:	aa0d      	add	r2, sp, #52	; 0x34
 800b6d0:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 800b6d4:	9203      	str	r2, [sp, #12]
 800b6d6:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 800b6da:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800b6de:	6023      	str	r3, [r4, #0]
 800b6e0:	6863      	ldr	r3, [r4, #4]
 800b6e2:	4642      	mov	r2, r8
 800b6e4:	9300      	str	r3, [sp, #0]
 800b6e6:	4628      	mov	r0, r5
 800b6e8:	4653      	mov	r3, sl
 800b6ea:	910b      	str	r1, [sp, #44]	; 0x2c
 800b6ec:	f7ff fed4 	bl	800b498 <__cvt>
 800b6f0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800b6f2:	4680      	mov	r8, r0
 800b6f4:	2947      	cmp	r1, #71	; 0x47
 800b6f6:	990d      	ldr	r1, [sp, #52]	; 0x34
 800b6f8:	d108      	bne.n	800b70c <_printf_float+0x138>
 800b6fa:	1cc8      	adds	r0, r1, #3
 800b6fc:	db02      	blt.n	800b704 <_printf_float+0x130>
 800b6fe:	6863      	ldr	r3, [r4, #4]
 800b700:	4299      	cmp	r1, r3
 800b702:	dd40      	ble.n	800b786 <_printf_float+0x1b2>
 800b704:	f1a9 0902 	sub.w	r9, r9, #2
 800b708:	fa5f f989 	uxtb.w	r9, r9
 800b70c:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800b710:	d81f      	bhi.n	800b752 <_printf_float+0x17e>
 800b712:	464a      	mov	r2, r9
 800b714:	3901      	subs	r1, #1
 800b716:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800b71a:	910d      	str	r1, [sp, #52]	; 0x34
 800b71c:	f7ff ff1b 	bl	800b556 <__exponent>
 800b720:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b722:	4682      	mov	sl, r0
 800b724:	1813      	adds	r3, r2, r0
 800b726:	2a01      	cmp	r2, #1
 800b728:	6123      	str	r3, [r4, #16]
 800b72a:	dc02      	bgt.n	800b732 <_printf_float+0x15e>
 800b72c:	6822      	ldr	r2, [r4, #0]
 800b72e:	07d2      	lsls	r2, r2, #31
 800b730:	d501      	bpl.n	800b736 <_printf_float+0x162>
 800b732:	3301      	adds	r3, #1
 800b734:	6123      	str	r3, [r4, #16]
 800b736:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 800b73a:	2b00      	cmp	r3, #0
 800b73c:	d09b      	beq.n	800b676 <_printf_float+0xa2>
 800b73e:	232d      	movs	r3, #45	; 0x2d
 800b740:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b744:	e797      	b.n	800b676 <_printf_float+0xa2>
 800b746:	2947      	cmp	r1, #71	; 0x47
 800b748:	d1bc      	bne.n	800b6c4 <_printf_float+0xf0>
 800b74a:	2b00      	cmp	r3, #0
 800b74c:	d1ba      	bne.n	800b6c4 <_printf_float+0xf0>
 800b74e:	2301      	movs	r3, #1
 800b750:	e7b7      	b.n	800b6c2 <_printf_float+0xee>
 800b752:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 800b756:	d118      	bne.n	800b78a <_printf_float+0x1b6>
 800b758:	2900      	cmp	r1, #0
 800b75a:	6863      	ldr	r3, [r4, #4]
 800b75c:	dd0b      	ble.n	800b776 <_printf_float+0x1a2>
 800b75e:	6121      	str	r1, [r4, #16]
 800b760:	b913      	cbnz	r3, 800b768 <_printf_float+0x194>
 800b762:	6822      	ldr	r2, [r4, #0]
 800b764:	07d0      	lsls	r0, r2, #31
 800b766:	d502      	bpl.n	800b76e <_printf_float+0x19a>
 800b768:	3301      	adds	r3, #1
 800b76a:	440b      	add	r3, r1
 800b76c:	6123      	str	r3, [r4, #16]
 800b76e:	f04f 0a00 	mov.w	sl, #0
 800b772:	65a1      	str	r1, [r4, #88]	; 0x58
 800b774:	e7df      	b.n	800b736 <_printf_float+0x162>
 800b776:	b913      	cbnz	r3, 800b77e <_printf_float+0x1aa>
 800b778:	6822      	ldr	r2, [r4, #0]
 800b77a:	07d2      	lsls	r2, r2, #31
 800b77c:	d501      	bpl.n	800b782 <_printf_float+0x1ae>
 800b77e:	3302      	adds	r3, #2
 800b780:	e7f4      	b.n	800b76c <_printf_float+0x198>
 800b782:	2301      	movs	r3, #1
 800b784:	e7f2      	b.n	800b76c <_printf_float+0x198>
 800b786:	f04f 0967 	mov.w	r9, #103	; 0x67
 800b78a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b78c:	4299      	cmp	r1, r3
 800b78e:	db05      	blt.n	800b79c <_printf_float+0x1c8>
 800b790:	6823      	ldr	r3, [r4, #0]
 800b792:	6121      	str	r1, [r4, #16]
 800b794:	07d8      	lsls	r0, r3, #31
 800b796:	d5ea      	bpl.n	800b76e <_printf_float+0x19a>
 800b798:	1c4b      	adds	r3, r1, #1
 800b79a:	e7e7      	b.n	800b76c <_printf_float+0x198>
 800b79c:	2900      	cmp	r1, #0
 800b79e:	bfcc      	ite	gt
 800b7a0:	2201      	movgt	r2, #1
 800b7a2:	f1c1 0202 	rsble	r2, r1, #2
 800b7a6:	4413      	add	r3, r2
 800b7a8:	e7e0      	b.n	800b76c <_printf_float+0x198>
 800b7aa:	6823      	ldr	r3, [r4, #0]
 800b7ac:	055a      	lsls	r2, r3, #21
 800b7ae:	d407      	bmi.n	800b7c0 <_printf_float+0x1ec>
 800b7b0:	6923      	ldr	r3, [r4, #16]
 800b7b2:	4642      	mov	r2, r8
 800b7b4:	4631      	mov	r1, r6
 800b7b6:	4628      	mov	r0, r5
 800b7b8:	47b8      	blx	r7
 800b7ba:	3001      	adds	r0, #1
 800b7bc:	d12b      	bne.n	800b816 <_printf_float+0x242>
 800b7be:	e764      	b.n	800b68a <_printf_float+0xb6>
 800b7c0:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800b7c4:	f240 80dd 	bls.w	800b982 <_printf_float+0x3ae>
 800b7c8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800b7cc:	2200      	movs	r2, #0
 800b7ce:	2300      	movs	r3, #0
 800b7d0:	f7f5 f8ea 	bl	80009a8 <__aeabi_dcmpeq>
 800b7d4:	2800      	cmp	r0, #0
 800b7d6:	d033      	beq.n	800b840 <_printf_float+0x26c>
 800b7d8:	2301      	movs	r3, #1
 800b7da:	4631      	mov	r1, r6
 800b7dc:	4628      	mov	r0, r5
 800b7de:	4a35      	ldr	r2, [pc, #212]	; (800b8b4 <_printf_float+0x2e0>)
 800b7e0:	47b8      	blx	r7
 800b7e2:	3001      	adds	r0, #1
 800b7e4:	f43f af51 	beq.w	800b68a <_printf_float+0xb6>
 800b7e8:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800b7ec:	429a      	cmp	r2, r3
 800b7ee:	db02      	blt.n	800b7f6 <_printf_float+0x222>
 800b7f0:	6823      	ldr	r3, [r4, #0]
 800b7f2:	07d8      	lsls	r0, r3, #31
 800b7f4:	d50f      	bpl.n	800b816 <_printf_float+0x242>
 800b7f6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b7fa:	4631      	mov	r1, r6
 800b7fc:	4628      	mov	r0, r5
 800b7fe:	47b8      	blx	r7
 800b800:	3001      	adds	r0, #1
 800b802:	f43f af42 	beq.w	800b68a <_printf_float+0xb6>
 800b806:	f04f 0800 	mov.w	r8, #0
 800b80a:	f104 091a 	add.w	r9, r4, #26
 800b80e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b810:	3b01      	subs	r3, #1
 800b812:	4543      	cmp	r3, r8
 800b814:	dc09      	bgt.n	800b82a <_printf_float+0x256>
 800b816:	6823      	ldr	r3, [r4, #0]
 800b818:	079b      	lsls	r3, r3, #30
 800b81a:	f100 8102 	bmi.w	800ba22 <_printf_float+0x44e>
 800b81e:	68e0      	ldr	r0, [r4, #12]
 800b820:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b822:	4298      	cmp	r0, r3
 800b824:	bfb8      	it	lt
 800b826:	4618      	movlt	r0, r3
 800b828:	e731      	b.n	800b68e <_printf_float+0xba>
 800b82a:	2301      	movs	r3, #1
 800b82c:	464a      	mov	r2, r9
 800b82e:	4631      	mov	r1, r6
 800b830:	4628      	mov	r0, r5
 800b832:	47b8      	blx	r7
 800b834:	3001      	adds	r0, #1
 800b836:	f43f af28 	beq.w	800b68a <_printf_float+0xb6>
 800b83a:	f108 0801 	add.w	r8, r8, #1
 800b83e:	e7e6      	b.n	800b80e <_printf_float+0x23a>
 800b840:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b842:	2b00      	cmp	r3, #0
 800b844:	dc38      	bgt.n	800b8b8 <_printf_float+0x2e4>
 800b846:	2301      	movs	r3, #1
 800b848:	4631      	mov	r1, r6
 800b84a:	4628      	mov	r0, r5
 800b84c:	4a19      	ldr	r2, [pc, #100]	; (800b8b4 <_printf_float+0x2e0>)
 800b84e:	47b8      	blx	r7
 800b850:	3001      	adds	r0, #1
 800b852:	f43f af1a 	beq.w	800b68a <_printf_float+0xb6>
 800b856:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800b85a:	4313      	orrs	r3, r2
 800b85c:	d102      	bne.n	800b864 <_printf_float+0x290>
 800b85e:	6823      	ldr	r3, [r4, #0]
 800b860:	07d9      	lsls	r1, r3, #31
 800b862:	d5d8      	bpl.n	800b816 <_printf_float+0x242>
 800b864:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b868:	4631      	mov	r1, r6
 800b86a:	4628      	mov	r0, r5
 800b86c:	47b8      	blx	r7
 800b86e:	3001      	adds	r0, #1
 800b870:	f43f af0b 	beq.w	800b68a <_printf_float+0xb6>
 800b874:	f04f 0900 	mov.w	r9, #0
 800b878:	f104 0a1a 	add.w	sl, r4, #26
 800b87c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b87e:	425b      	negs	r3, r3
 800b880:	454b      	cmp	r3, r9
 800b882:	dc01      	bgt.n	800b888 <_printf_float+0x2b4>
 800b884:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b886:	e794      	b.n	800b7b2 <_printf_float+0x1de>
 800b888:	2301      	movs	r3, #1
 800b88a:	4652      	mov	r2, sl
 800b88c:	4631      	mov	r1, r6
 800b88e:	4628      	mov	r0, r5
 800b890:	47b8      	blx	r7
 800b892:	3001      	adds	r0, #1
 800b894:	f43f aef9 	beq.w	800b68a <_printf_float+0xb6>
 800b898:	f109 0901 	add.w	r9, r9, #1
 800b89c:	e7ee      	b.n	800b87c <_printf_float+0x2a8>
 800b89e:	bf00      	nop
 800b8a0:	7fefffff 	.word	0x7fefffff
 800b8a4:	0800e714 	.word	0x0800e714
 800b8a8:	0800e718 	.word	0x0800e718
 800b8ac:	0800e720 	.word	0x0800e720
 800b8b0:	0800e71c 	.word	0x0800e71c
 800b8b4:	0800e724 	.word	0x0800e724
 800b8b8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b8ba:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800b8bc:	429a      	cmp	r2, r3
 800b8be:	bfa8      	it	ge
 800b8c0:	461a      	movge	r2, r3
 800b8c2:	2a00      	cmp	r2, #0
 800b8c4:	4691      	mov	r9, r2
 800b8c6:	dc37      	bgt.n	800b938 <_printf_float+0x364>
 800b8c8:	f04f 0b00 	mov.w	fp, #0
 800b8cc:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800b8d0:	f104 021a 	add.w	r2, r4, #26
 800b8d4:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 800b8d8:	ebaa 0309 	sub.w	r3, sl, r9
 800b8dc:	455b      	cmp	r3, fp
 800b8de:	dc33      	bgt.n	800b948 <_printf_float+0x374>
 800b8e0:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800b8e4:	429a      	cmp	r2, r3
 800b8e6:	db3b      	blt.n	800b960 <_printf_float+0x38c>
 800b8e8:	6823      	ldr	r3, [r4, #0]
 800b8ea:	07da      	lsls	r2, r3, #31
 800b8ec:	d438      	bmi.n	800b960 <_printf_float+0x38c>
 800b8ee:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b8f0:	990d      	ldr	r1, [sp, #52]	; 0x34
 800b8f2:	eba2 030a 	sub.w	r3, r2, sl
 800b8f6:	eba2 0901 	sub.w	r9, r2, r1
 800b8fa:	4599      	cmp	r9, r3
 800b8fc:	bfa8      	it	ge
 800b8fe:	4699      	movge	r9, r3
 800b900:	f1b9 0f00 	cmp.w	r9, #0
 800b904:	dc34      	bgt.n	800b970 <_printf_float+0x39c>
 800b906:	f04f 0800 	mov.w	r8, #0
 800b90a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800b90e:	f104 0a1a 	add.w	sl, r4, #26
 800b912:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800b916:	1a9b      	subs	r3, r3, r2
 800b918:	eba3 0309 	sub.w	r3, r3, r9
 800b91c:	4543      	cmp	r3, r8
 800b91e:	f77f af7a 	ble.w	800b816 <_printf_float+0x242>
 800b922:	2301      	movs	r3, #1
 800b924:	4652      	mov	r2, sl
 800b926:	4631      	mov	r1, r6
 800b928:	4628      	mov	r0, r5
 800b92a:	47b8      	blx	r7
 800b92c:	3001      	adds	r0, #1
 800b92e:	f43f aeac 	beq.w	800b68a <_printf_float+0xb6>
 800b932:	f108 0801 	add.w	r8, r8, #1
 800b936:	e7ec      	b.n	800b912 <_printf_float+0x33e>
 800b938:	4613      	mov	r3, r2
 800b93a:	4631      	mov	r1, r6
 800b93c:	4642      	mov	r2, r8
 800b93e:	4628      	mov	r0, r5
 800b940:	47b8      	blx	r7
 800b942:	3001      	adds	r0, #1
 800b944:	d1c0      	bne.n	800b8c8 <_printf_float+0x2f4>
 800b946:	e6a0      	b.n	800b68a <_printf_float+0xb6>
 800b948:	2301      	movs	r3, #1
 800b94a:	4631      	mov	r1, r6
 800b94c:	4628      	mov	r0, r5
 800b94e:	920b      	str	r2, [sp, #44]	; 0x2c
 800b950:	47b8      	blx	r7
 800b952:	3001      	adds	r0, #1
 800b954:	f43f ae99 	beq.w	800b68a <_printf_float+0xb6>
 800b958:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800b95a:	f10b 0b01 	add.w	fp, fp, #1
 800b95e:	e7b9      	b.n	800b8d4 <_printf_float+0x300>
 800b960:	4631      	mov	r1, r6
 800b962:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b966:	4628      	mov	r0, r5
 800b968:	47b8      	blx	r7
 800b96a:	3001      	adds	r0, #1
 800b96c:	d1bf      	bne.n	800b8ee <_printf_float+0x31a>
 800b96e:	e68c      	b.n	800b68a <_printf_float+0xb6>
 800b970:	464b      	mov	r3, r9
 800b972:	4631      	mov	r1, r6
 800b974:	4628      	mov	r0, r5
 800b976:	eb08 020a 	add.w	r2, r8, sl
 800b97a:	47b8      	blx	r7
 800b97c:	3001      	adds	r0, #1
 800b97e:	d1c2      	bne.n	800b906 <_printf_float+0x332>
 800b980:	e683      	b.n	800b68a <_printf_float+0xb6>
 800b982:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b984:	2a01      	cmp	r2, #1
 800b986:	dc01      	bgt.n	800b98c <_printf_float+0x3b8>
 800b988:	07db      	lsls	r3, r3, #31
 800b98a:	d537      	bpl.n	800b9fc <_printf_float+0x428>
 800b98c:	2301      	movs	r3, #1
 800b98e:	4642      	mov	r2, r8
 800b990:	4631      	mov	r1, r6
 800b992:	4628      	mov	r0, r5
 800b994:	47b8      	blx	r7
 800b996:	3001      	adds	r0, #1
 800b998:	f43f ae77 	beq.w	800b68a <_printf_float+0xb6>
 800b99c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b9a0:	4631      	mov	r1, r6
 800b9a2:	4628      	mov	r0, r5
 800b9a4:	47b8      	blx	r7
 800b9a6:	3001      	adds	r0, #1
 800b9a8:	f43f ae6f 	beq.w	800b68a <_printf_float+0xb6>
 800b9ac:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800b9b0:	2200      	movs	r2, #0
 800b9b2:	2300      	movs	r3, #0
 800b9b4:	f7f4 fff8 	bl	80009a8 <__aeabi_dcmpeq>
 800b9b8:	b9d8      	cbnz	r0, 800b9f2 <_printf_float+0x41e>
 800b9ba:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b9bc:	f108 0201 	add.w	r2, r8, #1
 800b9c0:	3b01      	subs	r3, #1
 800b9c2:	4631      	mov	r1, r6
 800b9c4:	4628      	mov	r0, r5
 800b9c6:	47b8      	blx	r7
 800b9c8:	3001      	adds	r0, #1
 800b9ca:	d10e      	bne.n	800b9ea <_printf_float+0x416>
 800b9cc:	e65d      	b.n	800b68a <_printf_float+0xb6>
 800b9ce:	2301      	movs	r3, #1
 800b9d0:	464a      	mov	r2, r9
 800b9d2:	4631      	mov	r1, r6
 800b9d4:	4628      	mov	r0, r5
 800b9d6:	47b8      	blx	r7
 800b9d8:	3001      	adds	r0, #1
 800b9da:	f43f ae56 	beq.w	800b68a <_printf_float+0xb6>
 800b9de:	f108 0801 	add.w	r8, r8, #1
 800b9e2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b9e4:	3b01      	subs	r3, #1
 800b9e6:	4543      	cmp	r3, r8
 800b9e8:	dcf1      	bgt.n	800b9ce <_printf_float+0x3fa>
 800b9ea:	4653      	mov	r3, sl
 800b9ec:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800b9f0:	e6e0      	b.n	800b7b4 <_printf_float+0x1e0>
 800b9f2:	f04f 0800 	mov.w	r8, #0
 800b9f6:	f104 091a 	add.w	r9, r4, #26
 800b9fa:	e7f2      	b.n	800b9e2 <_printf_float+0x40e>
 800b9fc:	2301      	movs	r3, #1
 800b9fe:	4642      	mov	r2, r8
 800ba00:	e7df      	b.n	800b9c2 <_printf_float+0x3ee>
 800ba02:	2301      	movs	r3, #1
 800ba04:	464a      	mov	r2, r9
 800ba06:	4631      	mov	r1, r6
 800ba08:	4628      	mov	r0, r5
 800ba0a:	47b8      	blx	r7
 800ba0c:	3001      	adds	r0, #1
 800ba0e:	f43f ae3c 	beq.w	800b68a <_printf_float+0xb6>
 800ba12:	f108 0801 	add.w	r8, r8, #1
 800ba16:	68e3      	ldr	r3, [r4, #12]
 800ba18:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800ba1a:	1a5b      	subs	r3, r3, r1
 800ba1c:	4543      	cmp	r3, r8
 800ba1e:	dcf0      	bgt.n	800ba02 <_printf_float+0x42e>
 800ba20:	e6fd      	b.n	800b81e <_printf_float+0x24a>
 800ba22:	f04f 0800 	mov.w	r8, #0
 800ba26:	f104 0919 	add.w	r9, r4, #25
 800ba2a:	e7f4      	b.n	800ba16 <_printf_float+0x442>

0800ba2c <_printf_common>:
 800ba2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ba30:	4616      	mov	r6, r2
 800ba32:	4699      	mov	r9, r3
 800ba34:	688a      	ldr	r2, [r1, #8]
 800ba36:	690b      	ldr	r3, [r1, #16]
 800ba38:	4607      	mov	r7, r0
 800ba3a:	4293      	cmp	r3, r2
 800ba3c:	bfb8      	it	lt
 800ba3e:	4613      	movlt	r3, r2
 800ba40:	6033      	str	r3, [r6, #0]
 800ba42:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800ba46:	460c      	mov	r4, r1
 800ba48:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800ba4c:	b10a      	cbz	r2, 800ba52 <_printf_common+0x26>
 800ba4e:	3301      	adds	r3, #1
 800ba50:	6033      	str	r3, [r6, #0]
 800ba52:	6823      	ldr	r3, [r4, #0]
 800ba54:	0699      	lsls	r1, r3, #26
 800ba56:	bf42      	ittt	mi
 800ba58:	6833      	ldrmi	r3, [r6, #0]
 800ba5a:	3302      	addmi	r3, #2
 800ba5c:	6033      	strmi	r3, [r6, #0]
 800ba5e:	6825      	ldr	r5, [r4, #0]
 800ba60:	f015 0506 	ands.w	r5, r5, #6
 800ba64:	d106      	bne.n	800ba74 <_printf_common+0x48>
 800ba66:	f104 0a19 	add.w	sl, r4, #25
 800ba6a:	68e3      	ldr	r3, [r4, #12]
 800ba6c:	6832      	ldr	r2, [r6, #0]
 800ba6e:	1a9b      	subs	r3, r3, r2
 800ba70:	42ab      	cmp	r3, r5
 800ba72:	dc28      	bgt.n	800bac6 <_printf_common+0x9a>
 800ba74:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800ba78:	1e13      	subs	r3, r2, #0
 800ba7a:	6822      	ldr	r2, [r4, #0]
 800ba7c:	bf18      	it	ne
 800ba7e:	2301      	movne	r3, #1
 800ba80:	0692      	lsls	r2, r2, #26
 800ba82:	d42d      	bmi.n	800bae0 <_printf_common+0xb4>
 800ba84:	4649      	mov	r1, r9
 800ba86:	4638      	mov	r0, r7
 800ba88:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800ba8c:	47c0      	blx	r8
 800ba8e:	3001      	adds	r0, #1
 800ba90:	d020      	beq.n	800bad4 <_printf_common+0xa8>
 800ba92:	6823      	ldr	r3, [r4, #0]
 800ba94:	68e5      	ldr	r5, [r4, #12]
 800ba96:	f003 0306 	and.w	r3, r3, #6
 800ba9a:	2b04      	cmp	r3, #4
 800ba9c:	bf18      	it	ne
 800ba9e:	2500      	movne	r5, #0
 800baa0:	6832      	ldr	r2, [r6, #0]
 800baa2:	f04f 0600 	mov.w	r6, #0
 800baa6:	68a3      	ldr	r3, [r4, #8]
 800baa8:	bf08      	it	eq
 800baaa:	1aad      	subeq	r5, r5, r2
 800baac:	6922      	ldr	r2, [r4, #16]
 800baae:	bf08      	it	eq
 800bab0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800bab4:	4293      	cmp	r3, r2
 800bab6:	bfc4      	itt	gt
 800bab8:	1a9b      	subgt	r3, r3, r2
 800baba:	18ed      	addgt	r5, r5, r3
 800babc:	341a      	adds	r4, #26
 800babe:	42b5      	cmp	r5, r6
 800bac0:	d11a      	bne.n	800baf8 <_printf_common+0xcc>
 800bac2:	2000      	movs	r0, #0
 800bac4:	e008      	b.n	800bad8 <_printf_common+0xac>
 800bac6:	2301      	movs	r3, #1
 800bac8:	4652      	mov	r2, sl
 800baca:	4649      	mov	r1, r9
 800bacc:	4638      	mov	r0, r7
 800bace:	47c0      	blx	r8
 800bad0:	3001      	adds	r0, #1
 800bad2:	d103      	bne.n	800badc <_printf_common+0xb0>
 800bad4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800bad8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800badc:	3501      	adds	r5, #1
 800bade:	e7c4      	b.n	800ba6a <_printf_common+0x3e>
 800bae0:	2030      	movs	r0, #48	; 0x30
 800bae2:	18e1      	adds	r1, r4, r3
 800bae4:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800bae8:	1c5a      	adds	r2, r3, #1
 800baea:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800baee:	4422      	add	r2, r4
 800baf0:	3302      	adds	r3, #2
 800baf2:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800baf6:	e7c5      	b.n	800ba84 <_printf_common+0x58>
 800baf8:	2301      	movs	r3, #1
 800bafa:	4622      	mov	r2, r4
 800bafc:	4649      	mov	r1, r9
 800bafe:	4638      	mov	r0, r7
 800bb00:	47c0      	blx	r8
 800bb02:	3001      	adds	r0, #1
 800bb04:	d0e6      	beq.n	800bad4 <_printf_common+0xa8>
 800bb06:	3601      	adds	r6, #1
 800bb08:	e7d9      	b.n	800babe <_printf_common+0x92>
	...

0800bb0c <_printf_i>:
 800bb0c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800bb10:	460c      	mov	r4, r1
 800bb12:	7e27      	ldrb	r7, [r4, #24]
 800bb14:	4691      	mov	r9, r2
 800bb16:	2f78      	cmp	r7, #120	; 0x78
 800bb18:	4680      	mov	r8, r0
 800bb1a:	469a      	mov	sl, r3
 800bb1c:	990c      	ldr	r1, [sp, #48]	; 0x30
 800bb1e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800bb22:	d807      	bhi.n	800bb34 <_printf_i+0x28>
 800bb24:	2f62      	cmp	r7, #98	; 0x62
 800bb26:	d80a      	bhi.n	800bb3e <_printf_i+0x32>
 800bb28:	2f00      	cmp	r7, #0
 800bb2a:	f000 80d9 	beq.w	800bce0 <_printf_i+0x1d4>
 800bb2e:	2f58      	cmp	r7, #88	; 0x58
 800bb30:	f000 80a4 	beq.w	800bc7c <_printf_i+0x170>
 800bb34:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800bb38:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800bb3c:	e03a      	b.n	800bbb4 <_printf_i+0xa8>
 800bb3e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800bb42:	2b15      	cmp	r3, #21
 800bb44:	d8f6      	bhi.n	800bb34 <_printf_i+0x28>
 800bb46:	a001      	add	r0, pc, #4	; (adr r0, 800bb4c <_printf_i+0x40>)
 800bb48:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800bb4c:	0800bba5 	.word	0x0800bba5
 800bb50:	0800bbb9 	.word	0x0800bbb9
 800bb54:	0800bb35 	.word	0x0800bb35
 800bb58:	0800bb35 	.word	0x0800bb35
 800bb5c:	0800bb35 	.word	0x0800bb35
 800bb60:	0800bb35 	.word	0x0800bb35
 800bb64:	0800bbb9 	.word	0x0800bbb9
 800bb68:	0800bb35 	.word	0x0800bb35
 800bb6c:	0800bb35 	.word	0x0800bb35
 800bb70:	0800bb35 	.word	0x0800bb35
 800bb74:	0800bb35 	.word	0x0800bb35
 800bb78:	0800bcc7 	.word	0x0800bcc7
 800bb7c:	0800bbe9 	.word	0x0800bbe9
 800bb80:	0800bca9 	.word	0x0800bca9
 800bb84:	0800bb35 	.word	0x0800bb35
 800bb88:	0800bb35 	.word	0x0800bb35
 800bb8c:	0800bce9 	.word	0x0800bce9
 800bb90:	0800bb35 	.word	0x0800bb35
 800bb94:	0800bbe9 	.word	0x0800bbe9
 800bb98:	0800bb35 	.word	0x0800bb35
 800bb9c:	0800bb35 	.word	0x0800bb35
 800bba0:	0800bcb1 	.word	0x0800bcb1
 800bba4:	680b      	ldr	r3, [r1, #0]
 800bba6:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800bbaa:	1d1a      	adds	r2, r3, #4
 800bbac:	681b      	ldr	r3, [r3, #0]
 800bbae:	600a      	str	r2, [r1, #0]
 800bbb0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800bbb4:	2301      	movs	r3, #1
 800bbb6:	e0a4      	b.n	800bd02 <_printf_i+0x1f6>
 800bbb8:	6825      	ldr	r5, [r4, #0]
 800bbba:	6808      	ldr	r0, [r1, #0]
 800bbbc:	062e      	lsls	r6, r5, #24
 800bbbe:	f100 0304 	add.w	r3, r0, #4
 800bbc2:	d50a      	bpl.n	800bbda <_printf_i+0xce>
 800bbc4:	6805      	ldr	r5, [r0, #0]
 800bbc6:	600b      	str	r3, [r1, #0]
 800bbc8:	2d00      	cmp	r5, #0
 800bbca:	da03      	bge.n	800bbd4 <_printf_i+0xc8>
 800bbcc:	232d      	movs	r3, #45	; 0x2d
 800bbce:	426d      	negs	r5, r5
 800bbd0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800bbd4:	230a      	movs	r3, #10
 800bbd6:	485e      	ldr	r0, [pc, #376]	; (800bd50 <_printf_i+0x244>)
 800bbd8:	e019      	b.n	800bc0e <_printf_i+0x102>
 800bbda:	f015 0f40 	tst.w	r5, #64	; 0x40
 800bbde:	6805      	ldr	r5, [r0, #0]
 800bbe0:	600b      	str	r3, [r1, #0]
 800bbe2:	bf18      	it	ne
 800bbe4:	b22d      	sxthne	r5, r5
 800bbe6:	e7ef      	b.n	800bbc8 <_printf_i+0xbc>
 800bbe8:	680b      	ldr	r3, [r1, #0]
 800bbea:	6825      	ldr	r5, [r4, #0]
 800bbec:	1d18      	adds	r0, r3, #4
 800bbee:	6008      	str	r0, [r1, #0]
 800bbf0:	0628      	lsls	r0, r5, #24
 800bbf2:	d501      	bpl.n	800bbf8 <_printf_i+0xec>
 800bbf4:	681d      	ldr	r5, [r3, #0]
 800bbf6:	e002      	b.n	800bbfe <_printf_i+0xf2>
 800bbf8:	0669      	lsls	r1, r5, #25
 800bbfa:	d5fb      	bpl.n	800bbf4 <_printf_i+0xe8>
 800bbfc:	881d      	ldrh	r5, [r3, #0]
 800bbfe:	2f6f      	cmp	r7, #111	; 0x6f
 800bc00:	bf0c      	ite	eq
 800bc02:	2308      	moveq	r3, #8
 800bc04:	230a      	movne	r3, #10
 800bc06:	4852      	ldr	r0, [pc, #328]	; (800bd50 <_printf_i+0x244>)
 800bc08:	2100      	movs	r1, #0
 800bc0a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800bc0e:	6866      	ldr	r6, [r4, #4]
 800bc10:	2e00      	cmp	r6, #0
 800bc12:	bfa8      	it	ge
 800bc14:	6821      	ldrge	r1, [r4, #0]
 800bc16:	60a6      	str	r6, [r4, #8]
 800bc18:	bfa4      	itt	ge
 800bc1a:	f021 0104 	bicge.w	r1, r1, #4
 800bc1e:	6021      	strge	r1, [r4, #0]
 800bc20:	b90d      	cbnz	r5, 800bc26 <_printf_i+0x11a>
 800bc22:	2e00      	cmp	r6, #0
 800bc24:	d04d      	beq.n	800bcc2 <_printf_i+0x1b6>
 800bc26:	4616      	mov	r6, r2
 800bc28:	fbb5 f1f3 	udiv	r1, r5, r3
 800bc2c:	fb03 5711 	mls	r7, r3, r1, r5
 800bc30:	5dc7      	ldrb	r7, [r0, r7]
 800bc32:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800bc36:	462f      	mov	r7, r5
 800bc38:	42bb      	cmp	r3, r7
 800bc3a:	460d      	mov	r5, r1
 800bc3c:	d9f4      	bls.n	800bc28 <_printf_i+0x11c>
 800bc3e:	2b08      	cmp	r3, #8
 800bc40:	d10b      	bne.n	800bc5a <_printf_i+0x14e>
 800bc42:	6823      	ldr	r3, [r4, #0]
 800bc44:	07df      	lsls	r7, r3, #31
 800bc46:	d508      	bpl.n	800bc5a <_printf_i+0x14e>
 800bc48:	6923      	ldr	r3, [r4, #16]
 800bc4a:	6861      	ldr	r1, [r4, #4]
 800bc4c:	4299      	cmp	r1, r3
 800bc4e:	bfde      	ittt	le
 800bc50:	2330      	movle	r3, #48	; 0x30
 800bc52:	f806 3c01 	strble.w	r3, [r6, #-1]
 800bc56:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 800bc5a:	1b92      	subs	r2, r2, r6
 800bc5c:	6122      	str	r2, [r4, #16]
 800bc5e:	464b      	mov	r3, r9
 800bc60:	4621      	mov	r1, r4
 800bc62:	4640      	mov	r0, r8
 800bc64:	f8cd a000 	str.w	sl, [sp]
 800bc68:	aa03      	add	r2, sp, #12
 800bc6a:	f7ff fedf 	bl	800ba2c <_printf_common>
 800bc6e:	3001      	adds	r0, #1
 800bc70:	d14c      	bne.n	800bd0c <_printf_i+0x200>
 800bc72:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800bc76:	b004      	add	sp, #16
 800bc78:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bc7c:	4834      	ldr	r0, [pc, #208]	; (800bd50 <_printf_i+0x244>)
 800bc7e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800bc82:	680e      	ldr	r6, [r1, #0]
 800bc84:	6823      	ldr	r3, [r4, #0]
 800bc86:	f856 5b04 	ldr.w	r5, [r6], #4
 800bc8a:	061f      	lsls	r7, r3, #24
 800bc8c:	600e      	str	r6, [r1, #0]
 800bc8e:	d514      	bpl.n	800bcba <_printf_i+0x1ae>
 800bc90:	07d9      	lsls	r1, r3, #31
 800bc92:	bf44      	itt	mi
 800bc94:	f043 0320 	orrmi.w	r3, r3, #32
 800bc98:	6023      	strmi	r3, [r4, #0]
 800bc9a:	b91d      	cbnz	r5, 800bca4 <_printf_i+0x198>
 800bc9c:	6823      	ldr	r3, [r4, #0]
 800bc9e:	f023 0320 	bic.w	r3, r3, #32
 800bca2:	6023      	str	r3, [r4, #0]
 800bca4:	2310      	movs	r3, #16
 800bca6:	e7af      	b.n	800bc08 <_printf_i+0xfc>
 800bca8:	6823      	ldr	r3, [r4, #0]
 800bcaa:	f043 0320 	orr.w	r3, r3, #32
 800bcae:	6023      	str	r3, [r4, #0]
 800bcb0:	2378      	movs	r3, #120	; 0x78
 800bcb2:	4828      	ldr	r0, [pc, #160]	; (800bd54 <_printf_i+0x248>)
 800bcb4:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800bcb8:	e7e3      	b.n	800bc82 <_printf_i+0x176>
 800bcba:	065e      	lsls	r6, r3, #25
 800bcbc:	bf48      	it	mi
 800bcbe:	b2ad      	uxthmi	r5, r5
 800bcc0:	e7e6      	b.n	800bc90 <_printf_i+0x184>
 800bcc2:	4616      	mov	r6, r2
 800bcc4:	e7bb      	b.n	800bc3e <_printf_i+0x132>
 800bcc6:	680b      	ldr	r3, [r1, #0]
 800bcc8:	6826      	ldr	r6, [r4, #0]
 800bcca:	1d1d      	adds	r5, r3, #4
 800bccc:	6960      	ldr	r0, [r4, #20]
 800bcce:	600d      	str	r5, [r1, #0]
 800bcd0:	0635      	lsls	r5, r6, #24
 800bcd2:	681b      	ldr	r3, [r3, #0]
 800bcd4:	d501      	bpl.n	800bcda <_printf_i+0x1ce>
 800bcd6:	6018      	str	r0, [r3, #0]
 800bcd8:	e002      	b.n	800bce0 <_printf_i+0x1d4>
 800bcda:	0671      	lsls	r1, r6, #25
 800bcdc:	d5fb      	bpl.n	800bcd6 <_printf_i+0x1ca>
 800bcde:	8018      	strh	r0, [r3, #0]
 800bce0:	2300      	movs	r3, #0
 800bce2:	4616      	mov	r6, r2
 800bce4:	6123      	str	r3, [r4, #16]
 800bce6:	e7ba      	b.n	800bc5e <_printf_i+0x152>
 800bce8:	680b      	ldr	r3, [r1, #0]
 800bcea:	1d1a      	adds	r2, r3, #4
 800bcec:	600a      	str	r2, [r1, #0]
 800bcee:	681e      	ldr	r6, [r3, #0]
 800bcf0:	2100      	movs	r1, #0
 800bcf2:	4630      	mov	r0, r6
 800bcf4:	6862      	ldr	r2, [r4, #4]
 800bcf6:	f000 ff39 	bl	800cb6c <memchr>
 800bcfa:	b108      	cbz	r0, 800bd00 <_printf_i+0x1f4>
 800bcfc:	1b80      	subs	r0, r0, r6
 800bcfe:	6060      	str	r0, [r4, #4]
 800bd00:	6863      	ldr	r3, [r4, #4]
 800bd02:	6123      	str	r3, [r4, #16]
 800bd04:	2300      	movs	r3, #0
 800bd06:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800bd0a:	e7a8      	b.n	800bc5e <_printf_i+0x152>
 800bd0c:	4632      	mov	r2, r6
 800bd0e:	4649      	mov	r1, r9
 800bd10:	4640      	mov	r0, r8
 800bd12:	6923      	ldr	r3, [r4, #16]
 800bd14:	47d0      	blx	sl
 800bd16:	3001      	adds	r0, #1
 800bd18:	d0ab      	beq.n	800bc72 <_printf_i+0x166>
 800bd1a:	6823      	ldr	r3, [r4, #0]
 800bd1c:	079b      	lsls	r3, r3, #30
 800bd1e:	d413      	bmi.n	800bd48 <_printf_i+0x23c>
 800bd20:	68e0      	ldr	r0, [r4, #12]
 800bd22:	9b03      	ldr	r3, [sp, #12]
 800bd24:	4298      	cmp	r0, r3
 800bd26:	bfb8      	it	lt
 800bd28:	4618      	movlt	r0, r3
 800bd2a:	e7a4      	b.n	800bc76 <_printf_i+0x16a>
 800bd2c:	2301      	movs	r3, #1
 800bd2e:	4632      	mov	r2, r6
 800bd30:	4649      	mov	r1, r9
 800bd32:	4640      	mov	r0, r8
 800bd34:	47d0      	blx	sl
 800bd36:	3001      	adds	r0, #1
 800bd38:	d09b      	beq.n	800bc72 <_printf_i+0x166>
 800bd3a:	3501      	adds	r5, #1
 800bd3c:	68e3      	ldr	r3, [r4, #12]
 800bd3e:	9903      	ldr	r1, [sp, #12]
 800bd40:	1a5b      	subs	r3, r3, r1
 800bd42:	42ab      	cmp	r3, r5
 800bd44:	dcf2      	bgt.n	800bd2c <_printf_i+0x220>
 800bd46:	e7eb      	b.n	800bd20 <_printf_i+0x214>
 800bd48:	2500      	movs	r5, #0
 800bd4a:	f104 0619 	add.w	r6, r4, #25
 800bd4e:	e7f5      	b.n	800bd3c <_printf_i+0x230>
 800bd50:	0800e726 	.word	0x0800e726
 800bd54:	0800e737 	.word	0x0800e737

0800bd58 <siprintf>:
 800bd58:	b40e      	push	{r1, r2, r3}
 800bd5a:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800bd5e:	b500      	push	{lr}
 800bd60:	b09c      	sub	sp, #112	; 0x70
 800bd62:	ab1d      	add	r3, sp, #116	; 0x74
 800bd64:	9002      	str	r0, [sp, #8]
 800bd66:	9006      	str	r0, [sp, #24]
 800bd68:	9107      	str	r1, [sp, #28]
 800bd6a:	9104      	str	r1, [sp, #16]
 800bd6c:	4808      	ldr	r0, [pc, #32]	; (800bd90 <siprintf+0x38>)
 800bd6e:	4909      	ldr	r1, [pc, #36]	; (800bd94 <siprintf+0x3c>)
 800bd70:	f853 2b04 	ldr.w	r2, [r3], #4
 800bd74:	9105      	str	r1, [sp, #20]
 800bd76:	6800      	ldr	r0, [r0, #0]
 800bd78:	a902      	add	r1, sp, #8
 800bd7a:	9301      	str	r3, [sp, #4]
 800bd7c:	f001 fba4 	bl	800d4c8 <_svfiprintf_r>
 800bd80:	2200      	movs	r2, #0
 800bd82:	9b02      	ldr	r3, [sp, #8]
 800bd84:	701a      	strb	r2, [r3, #0]
 800bd86:	b01c      	add	sp, #112	; 0x70
 800bd88:	f85d eb04 	ldr.w	lr, [sp], #4
 800bd8c:	b003      	add	sp, #12
 800bd8e:	4770      	bx	lr
 800bd90:	20000058 	.word	0x20000058
 800bd94:	ffff0208 	.word	0xffff0208

0800bd98 <strchr>:
 800bd98:	4603      	mov	r3, r0
 800bd9a:	b2c9      	uxtb	r1, r1
 800bd9c:	4618      	mov	r0, r3
 800bd9e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bda2:	b112      	cbz	r2, 800bdaa <strchr+0x12>
 800bda4:	428a      	cmp	r2, r1
 800bda6:	d1f9      	bne.n	800bd9c <strchr+0x4>
 800bda8:	4770      	bx	lr
 800bdaa:	2900      	cmp	r1, #0
 800bdac:	bf18      	it	ne
 800bdae:	2000      	movne	r0, #0
 800bdb0:	4770      	bx	lr

0800bdb2 <strcpy>:
 800bdb2:	4603      	mov	r3, r0
 800bdb4:	f811 2b01 	ldrb.w	r2, [r1], #1
 800bdb8:	f803 2b01 	strb.w	r2, [r3], #1
 800bdbc:	2a00      	cmp	r2, #0
 800bdbe:	d1f9      	bne.n	800bdb4 <strcpy+0x2>
 800bdc0:	4770      	bx	lr

0800bdc2 <strncpy>:
 800bdc2:	4603      	mov	r3, r0
 800bdc4:	b510      	push	{r4, lr}
 800bdc6:	3901      	subs	r1, #1
 800bdc8:	b132      	cbz	r2, 800bdd8 <strncpy+0x16>
 800bdca:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800bdce:	3a01      	subs	r2, #1
 800bdd0:	f803 4b01 	strb.w	r4, [r3], #1
 800bdd4:	2c00      	cmp	r4, #0
 800bdd6:	d1f7      	bne.n	800bdc8 <strncpy+0x6>
 800bdd8:	2100      	movs	r1, #0
 800bdda:	441a      	add	r2, r3
 800bddc:	4293      	cmp	r3, r2
 800bdde:	d100      	bne.n	800bde2 <strncpy+0x20>
 800bde0:	bd10      	pop	{r4, pc}
 800bde2:	f803 1b01 	strb.w	r1, [r3], #1
 800bde6:	e7f9      	b.n	800bddc <strncpy+0x1a>

0800bde8 <_vsniprintf_r>:
 800bde8:	b530      	push	{r4, r5, lr}
 800bdea:	1e14      	subs	r4, r2, #0
 800bdec:	4605      	mov	r5, r0
 800bdee:	b09b      	sub	sp, #108	; 0x6c
 800bdf0:	4618      	mov	r0, r3
 800bdf2:	da05      	bge.n	800be00 <_vsniprintf_r+0x18>
 800bdf4:	238b      	movs	r3, #139	; 0x8b
 800bdf6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800bdfa:	602b      	str	r3, [r5, #0]
 800bdfc:	b01b      	add	sp, #108	; 0x6c
 800bdfe:	bd30      	pop	{r4, r5, pc}
 800be00:	f44f 7302 	mov.w	r3, #520	; 0x208
 800be04:	f8ad 300c 	strh.w	r3, [sp, #12]
 800be08:	bf0c      	ite	eq
 800be0a:	4623      	moveq	r3, r4
 800be0c:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 800be10:	9302      	str	r3, [sp, #8]
 800be12:	9305      	str	r3, [sp, #20]
 800be14:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800be18:	4602      	mov	r2, r0
 800be1a:	9100      	str	r1, [sp, #0]
 800be1c:	9104      	str	r1, [sp, #16]
 800be1e:	f8ad 300e 	strh.w	r3, [sp, #14]
 800be22:	4669      	mov	r1, sp
 800be24:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800be26:	4628      	mov	r0, r5
 800be28:	f001 fb4e 	bl	800d4c8 <_svfiprintf_r>
 800be2c:	1c43      	adds	r3, r0, #1
 800be2e:	bfbc      	itt	lt
 800be30:	238b      	movlt	r3, #139	; 0x8b
 800be32:	602b      	strlt	r3, [r5, #0]
 800be34:	2c00      	cmp	r4, #0
 800be36:	d0e1      	beq.n	800bdfc <_vsniprintf_r+0x14>
 800be38:	2200      	movs	r2, #0
 800be3a:	9b00      	ldr	r3, [sp, #0]
 800be3c:	701a      	strb	r2, [r3, #0]
 800be3e:	e7dd      	b.n	800bdfc <_vsniprintf_r+0x14>

0800be40 <vsniprintf>:
 800be40:	b507      	push	{r0, r1, r2, lr}
 800be42:	9300      	str	r3, [sp, #0]
 800be44:	4613      	mov	r3, r2
 800be46:	460a      	mov	r2, r1
 800be48:	4601      	mov	r1, r0
 800be4a:	4803      	ldr	r0, [pc, #12]	; (800be58 <vsniprintf+0x18>)
 800be4c:	6800      	ldr	r0, [r0, #0]
 800be4e:	f7ff ffcb 	bl	800bde8 <_vsniprintf_r>
 800be52:	b003      	add	sp, #12
 800be54:	f85d fb04 	ldr.w	pc, [sp], #4
 800be58:	20000058 	.word	0x20000058

0800be5c <quorem>:
 800be5c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800be60:	6903      	ldr	r3, [r0, #16]
 800be62:	690c      	ldr	r4, [r1, #16]
 800be64:	4607      	mov	r7, r0
 800be66:	42a3      	cmp	r3, r4
 800be68:	f2c0 8083 	blt.w	800bf72 <quorem+0x116>
 800be6c:	3c01      	subs	r4, #1
 800be6e:	f100 0514 	add.w	r5, r0, #20
 800be72:	f101 0814 	add.w	r8, r1, #20
 800be76:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800be7a:	9301      	str	r3, [sp, #4]
 800be7c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800be80:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800be84:	3301      	adds	r3, #1
 800be86:	429a      	cmp	r2, r3
 800be88:	fbb2 f6f3 	udiv	r6, r2, r3
 800be8c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800be90:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800be94:	d332      	bcc.n	800befc <quorem+0xa0>
 800be96:	f04f 0e00 	mov.w	lr, #0
 800be9a:	4640      	mov	r0, r8
 800be9c:	46ac      	mov	ip, r5
 800be9e:	46f2      	mov	sl, lr
 800bea0:	f850 2b04 	ldr.w	r2, [r0], #4
 800bea4:	b293      	uxth	r3, r2
 800bea6:	fb06 e303 	mla	r3, r6, r3, lr
 800beaa:	0c12      	lsrs	r2, r2, #16
 800beac:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800beb0:	fb06 e202 	mla	r2, r6, r2, lr
 800beb4:	b29b      	uxth	r3, r3
 800beb6:	ebaa 0303 	sub.w	r3, sl, r3
 800beba:	f8dc a000 	ldr.w	sl, [ip]
 800bebe:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800bec2:	fa1f fa8a 	uxth.w	sl, sl
 800bec6:	4453      	add	r3, sl
 800bec8:	fa1f fa82 	uxth.w	sl, r2
 800becc:	f8dc 2000 	ldr.w	r2, [ip]
 800bed0:	4581      	cmp	r9, r0
 800bed2:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 800bed6:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800beda:	b29b      	uxth	r3, r3
 800bedc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800bee0:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800bee4:	f84c 3b04 	str.w	r3, [ip], #4
 800bee8:	d2da      	bcs.n	800bea0 <quorem+0x44>
 800beea:	f855 300b 	ldr.w	r3, [r5, fp]
 800beee:	b92b      	cbnz	r3, 800befc <quorem+0xa0>
 800bef0:	9b01      	ldr	r3, [sp, #4]
 800bef2:	3b04      	subs	r3, #4
 800bef4:	429d      	cmp	r5, r3
 800bef6:	461a      	mov	r2, r3
 800bef8:	d32f      	bcc.n	800bf5a <quorem+0xfe>
 800befa:	613c      	str	r4, [r7, #16]
 800befc:	4638      	mov	r0, r7
 800befe:	f001 f8cb 	bl	800d098 <__mcmp>
 800bf02:	2800      	cmp	r0, #0
 800bf04:	db25      	blt.n	800bf52 <quorem+0xf6>
 800bf06:	4628      	mov	r0, r5
 800bf08:	f04f 0c00 	mov.w	ip, #0
 800bf0c:	3601      	adds	r6, #1
 800bf0e:	f858 1b04 	ldr.w	r1, [r8], #4
 800bf12:	f8d0 e000 	ldr.w	lr, [r0]
 800bf16:	b28b      	uxth	r3, r1
 800bf18:	ebac 0303 	sub.w	r3, ip, r3
 800bf1c:	fa1f f28e 	uxth.w	r2, lr
 800bf20:	4413      	add	r3, r2
 800bf22:	0c0a      	lsrs	r2, r1, #16
 800bf24:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800bf28:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800bf2c:	b29b      	uxth	r3, r3
 800bf2e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800bf32:	45c1      	cmp	r9, r8
 800bf34:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800bf38:	f840 3b04 	str.w	r3, [r0], #4
 800bf3c:	d2e7      	bcs.n	800bf0e <quorem+0xb2>
 800bf3e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800bf42:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800bf46:	b922      	cbnz	r2, 800bf52 <quorem+0xf6>
 800bf48:	3b04      	subs	r3, #4
 800bf4a:	429d      	cmp	r5, r3
 800bf4c:	461a      	mov	r2, r3
 800bf4e:	d30a      	bcc.n	800bf66 <quorem+0x10a>
 800bf50:	613c      	str	r4, [r7, #16]
 800bf52:	4630      	mov	r0, r6
 800bf54:	b003      	add	sp, #12
 800bf56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bf5a:	6812      	ldr	r2, [r2, #0]
 800bf5c:	3b04      	subs	r3, #4
 800bf5e:	2a00      	cmp	r2, #0
 800bf60:	d1cb      	bne.n	800befa <quorem+0x9e>
 800bf62:	3c01      	subs	r4, #1
 800bf64:	e7c6      	b.n	800bef4 <quorem+0x98>
 800bf66:	6812      	ldr	r2, [r2, #0]
 800bf68:	3b04      	subs	r3, #4
 800bf6a:	2a00      	cmp	r2, #0
 800bf6c:	d1f0      	bne.n	800bf50 <quorem+0xf4>
 800bf6e:	3c01      	subs	r4, #1
 800bf70:	e7eb      	b.n	800bf4a <quorem+0xee>
 800bf72:	2000      	movs	r0, #0
 800bf74:	e7ee      	b.n	800bf54 <quorem+0xf8>
	...

0800bf78 <_dtoa_r>:
 800bf78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bf7c:	4616      	mov	r6, r2
 800bf7e:	461f      	mov	r7, r3
 800bf80:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800bf82:	b099      	sub	sp, #100	; 0x64
 800bf84:	4605      	mov	r5, r0
 800bf86:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800bf8a:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 800bf8e:	b974      	cbnz	r4, 800bfae <_dtoa_r+0x36>
 800bf90:	2010      	movs	r0, #16
 800bf92:	f000 fde3 	bl	800cb5c <malloc>
 800bf96:	4602      	mov	r2, r0
 800bf98:	6268      	str	r0, [r5, #36]	; 0x24
 800bf9a:	b920      	cbnz	r0, 800bfa6 <_dtoa_r+0x2e>
 800bf9c:	21ea      	movs	r1, #234	; 0xea
 800bf9e:	4bae      	ldr	r3, [pc, #696]	; (800c258 <_dtoa_r+0x2e0>)
 800bfa0:	48ae      	ldr	r0, [pc, #696]	; (800c25c <_dtoa_r+0x2e4>)
 800bfa2:	f001 fba1 	bl	800d6e8 <__assert_func>
 800bfa6:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800bfaa:	6004      	str	r4, [r0, #0]
 800bfac:	60c4      	str	r4, [r0, #12]
 800bfae:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800bfb0:	6819      	ldr	r1, [r3, #0]
 800bfb2:	b151      	cbz	r1, 800bfca <_dtoa_r+0x52>
 800bfb4:	685a      	ldr	r2, [r3, #4]
 800bfb6:	2301      	movs	r3, #1
 800bfb8:	4093      	lsls	r3, r2
 800bfba:	604a      	str	r2, [r1, #4]
 800bfbc:	608b      	str	r3, [r1, #8]
 800bfbe:	4628      	mov	r0, r5
 800bfc0:	f000 fe30 	bl	800cc24 <_Bfree>
 800bfc4:	2200      	movs	r2, #0
 800bfc6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800bfc8:	601a      	str	r2, [r3, #0]
 800bfca:	1e3b      	subs	r3, r7, #0
 800bfcc:	bfaf      	iteee	ge
 800bfce:	2300      	movge	r3, #0
 800bfd0:	2201      	movlt	r2, #1
 800bfd2:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800bfd6:	9305      	strlt	r3, [sp, #20]
 800bfd8:	bfa8      	it	ge
 800bfda:	f8c8 3000 	strge.w	r3, [r8]
 800bfde:	f8dd 9014 	ldr.w	r9, [sp, #20]
 800bfe2:	4b9f      	ldr	r3, [pc, #636]	; (800c260 <_dtoa_r+0x2e8>)
 800bfe4:	bfb8      	it	lt
 800bfe6:	f8c8 2000 	strlt.w	r2, [r8]
 800bfea:	ea33 0309 	bics.w	r3, r3, r9
 800bfee:	d119      	bne.n	800c024 <_dtoa_r+0xac>
 800bff0:	f242 730f 	movw	r3, #9999	; 0x270f
 800bff4:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800bff6:	6013      	str	r3, [r2, #0]
 800bff8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800bffc:	4333      	orrs	r3, r6
 800bffe:	f000 8580 	beq.w	800cb02 <_dtoa_r+0xb8a>
 800c002:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800c004:	b953      	cbnz	r3, 800c01c <_dtoa_r+0xa4>
 800c006:	4b97      	ldr	r3, [pc, #604]	; (800c264 <_dtoa_r+0x2ec>)
 800c008:	e022      	b.n	800c050 <_dtoa_r+0xd8>
 800c00a:	4b97      	ldr	r3, [pc, #604]	; (800c268 <_dtoa_r+0x2f0>)
 800c00c:	9308      	str	r3, [sp, #32]
 800c00e:	3308      	adds	r3, #8
 800c010:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800c012:	6013      	str	r3, [r2, #0]
 800c014:	9808      	ldr	r0, [sp, #32]
 800c016:	b019      	add	sp, #100	; 0x64
 800c018:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c01c:	4b91      	ldr	r3, [pc, #580]	; (800c264 <_dtoa_r+0x2ec>)
 800c01e:	9308      	str	r3, [sp, #32]
 800c020:	3303      	adds	r3, #3
 800c022:	e7f5      	b.n	800c010 <_dtoa_r+0x98>
 800c024:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800c028:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 800c02c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800c030:	2200      	movs	r2, #0
 800c032:	2300      	movs	r3, #0
 800c034:	f7f4 fcb8 	bl	80009a8 <__aeabi_dcmpeq>
 800c038:	4680      	mov	r8, r0
 800c03a:	b158      	cbz	r0, 800c054 <_dtoa_r+0xdc>
 800c03c:	2301      	movs	r3, #1
 800c03e:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800c040:	6013      	str	r3, [r2, #0]
 800c042:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800c044:	2b00      	cmp	r3, #0
 800c046:	f000 8559 	beq.w	800cafc <_dtoa_r+0xb84>
 800c04a:	4888      	ldr	r0, [pc, #544]	; (800c26c <_dtoa_r+0x2f4>)
 800c04c:	6018      	str	r0, [r3, #0]
 800c04e:	1e43      	subs	r3, r0, #1
 800c050:	9308      	str	r3, [sp, #32]
 800c052:	e7df      	b.n	800c014 <_dtoa_r+0x9c>
 800c054:	ab16      	add	r3, sp, #88	; 0x58
 800c056:	9301      	str	r3, [sp, #4]
 800c058:	ab17      	add	r3, sp, #92	; 0x5c
 800c05a:	9300      	str	r3, [sp, #0]
 800c05c:	4628      	mov	r0, r5
 800c05e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800c062:	f001 f8c5 	bl	800d1f0 <__d2b>
 800c066:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800c06a:	4682      	mov	sl, r0
 800c06c:	2c00      	cmp	r4, #0
 800c06e:	d07e      	beq.n	800c16e <_dtoa_r+0x1f6>
 800c070:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800c074:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c076:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 800c07a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c07e:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 800c082:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 800c086:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 800c08a:	2200      	movs	r2, #0
 800c08c:	4b78      	ldr	r3, [pc, #480]	; (800c270 <_dtoa_r+0x2f8>)
 800c08e:	f7f4 f86b 	bl	8000168 <__aeabi_dsub>
 800c092:	a36b      	add	r3, pc, #428	; (adr r3, 800c240 <_dtoa_r+0x2c8>)
 800c094:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c098:	f7f4 fa1e 	bl	80004d8 <__aeabi_dmul>
 800c09c:	a36a      	add	r3, pc, #424	; (adr r3, 800c248 <_dtoa_r+0x2d0>)
 800c09e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c0a2:	f7f4 f863 	bl	800016c <__adddf3>
 800c0a6:	4606      	mov	r6, r0
 800c0a8:	4620      	mov	r0, r4
 800c0aa:	460f      	mov	r7, r1
 800c0ac:	f7f4 f9aa 	bl	8000404 <__aeabi_i2d>
 800c0b0:	a367      	add	r3, pc, #412	; (adr r3, 800c250 <_dtoa_r+0x2d8>)
 800c0b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c0b6:	f7f4 fa0f 	bl	80004d8 <__aeabi_dmul>
 800c0ba:	4602      	mov	r2, r0
 800c0bc:	460b      	mov	r3, r1
 800c0be:	4630      	mov	r0, r6
 800c0c0:	4639      	mov	r1, r7
 800c0c2:	f7f4 f853 	bl	800016c <__adddf3>
 800c0c6:	4606      	mov	r6, r0
 800c0c8:	460f      	mov	r7, r1
 800c0ca:	f7f4 fcb5 	bl	8000a38 <__aeabi_d2iz>
 800c0ce:	2200      	movs	r2, #0
 800c0d0:	4681      	mov	r9, r0
 800c0d2:	2300      	movs	r3, #0
 800c0d4:	4630      	mov	r0, r6
 800c0d6:	4639      	mov	r1, r7
 800c0d8:	f7f4 fc70 	bl	80009bc <__aeabi_dcmplt>
 800c0dc:	b148      	cbz	r0, 800c0f2 <_dtoa_r+0x17a>
 800c0de:	4648      	mov	r0, r9
 800c0e0:	f7f4 f990 	bl	8000404 <__aeabi_i2d>
 800c0e4:	4632      	mov	r2, r6
 800c0e6:	463b      	mov	r3, r7
 800c0e8:	f7f4 fc5e 	bl	80009a8 <__aeabi_dcmpeq>
 800c0ec:	b908      	cbnz	r0, 800c0f2 <_dtoa_r+0x17a>
 800c0ee:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 800c0f2:	f1b9 0f16 	cmp.w	r9, #22
 800c0f6:	d857      	bhi.n	800c1a8 <_dtoa_r+0x230>
 800c0f8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800c0fc:	4b5d      	ldr	r3, [pc, #372]	; (800c274 <_dtoa_r+0x2fc>)
 800c0fe:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 800c102:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c106:	f7f4 fc59 	bl	80009bc <__aeabi_dcmplt>
 800c10a:	2800      	cmp	r0, #0
 800c10c:	d04e      	beq.n	800c1ac <_dtoa_r+0x234>
 800c10e:	2300      	movs	r3, #0
 800c110:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 800c114:	930f      	str	r3, [sp, #60]	; 0x3c
 800c116:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800c118:	1b1c      	subs	r4, r3, r4
 800c11a:	1e63      	subs	r3, r4, #1
 800c11c:	9309      	str	r3, [sp, #36]	; 0x24
 800c11e:	bf49      	itett	mi
 800c120:	f1c4 0301 	rsbmi	r3, r4, #1
 800c124:	2300      	movpl	r3, #0
 800c126:	9306      	strmi	r3, [sp, #24]
 800c128:	2300      	movmi	r3, #0
 800c12a:	bf54      	ite	pl
 800c12c:	9306      	strpl	r3, [sp, #24]
 800c12e:	9309      	strmi	r3, [sp, #36]	; 0x24
 800c130:	f1b9 0f00 	cmp.w	r9, #0
 800c134:	db3c      	blt.n	800c1b0 <_dtoa_r+0x238>
 800c136:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c138:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 800c13c:	444b      	add	r3, r9
 800c13e:	9309      	str	r3, [sp, #36]	; 0x24
 800c140:	2300      	movs	r3, #0
 800c142:	930a      	str	r3, [sp, #40]	; 0x28
 800c144:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800c146:	2b09      	cmp	r3, #9
 800c148:	d86c      	bhi.n	800c224 <_dtoa_r+0x2ac>
 800c14a:	2b05      	cmp	r3, #5
 800c14c:	bfc4      	itt	gt
 800c14e:	3b04      	subgt	r3, #4
 800c150:	9322      	strgt	r3, [sp, #136]	; 0x88
 800c152:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800c154:	bfc8      	it	gt
 800c156:	2400      	movgt	r4, #0
 800c158:	f1a3 0302 	sub.w	r3, r3, #2
 800c15c:	bfd8      	it	le
 800c15e:	2401      	movle	r4, #1
 800c160:	2b03      	cmp	r3, #3
 800c162:	f200 808b 	bhi.w	800c27c <_dtoa_r+0x304>
 800c166:	e8df f003 	tbb	[pc, r3]
 800c16a:	4f2d      	.short	0x4f2d
 800c16c:	5b4d      	.short	0x5b4d
 800c16e:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 800c172:	441c      	add	r4, r3
 800c174:	f204 4332 	addw	r3, r4, #1074	; 0x432
 800c178:	2b20      	cmp	r3, #32
 800c17a:	bfc3      	ittte	gt
 800c17c:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800c180:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 800c184:	fa09 f303 	lslgt.w	r3, r9, r3
 800c188:	f1c3 0320 	rsble	r3, r3, #32
 800c18c:	bfc6      	itte	gt
 800c18e:	fa26 f000 	lsrgt.w	r0, r6, r0
 800c192:	4318      	orrgt	r0, r3
 800c194:	fa06 f003 	lslle.w	r0, r6, r3
 800c198:	f7f4 f924 	bl	80003e4 <__aeabi_ui2d>
 800c19c:	2301      	movs	r3, #1
 800c19e:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 800c1a2:	3c01      	subs	r4, #1
 800c1a4:	9313      	str	r3, [sp, #76]	; 0x4c
 800c1a6:	e770      	b.n	800c08a <_dtoa_r+0x112>
 800c1a8:	2301      	movs	r3, #1
 800c1aa:	e7b3      	b.n	800c114 <_dtoa_r+0x19c>
 800c1ac:	900f      	str	r0, [sp, #60]	; 0x3c
 800c1ae:	e7b2      	b.n	800c116 <_dtoa_r+0x19e>
 800c1b0:	9b06      	ldr	r3, [sp, #24]
 800c1b2:	eba3 0309 	sub.w	r3, r3, r9
 800c1b6:	9306      	str	r3, [sp, #24]
 800c1b8:	f1c9 0300 	rsb	r3, r9, #0
 800c1bc:	930a      	str	r3, [sp, #40]	; 0x28
 800c1be:	2300      	movs	r3, #0
 800c1c0:	930e      	str	r3, [sp, #56]	; 0x38
 800c1c2:	e7bf      	b.n	800c144 <_dtoa_r+0x1cc>
 800c1c4:	2300      	movs	r3, #0
 800c1c6:	930b      	str	r3, [sp, #44]	; 0x2c
 800c1c8:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800c1ca:	2b00      	cmp	r3, #0
 800c1cc:	dc59      	bgt.n	800c282 <_dtoa_r+0x30a>
 800c1ce:	f04f 0b01 	mov.w	fp, #1
 800c1d2:	465b      	mov	r3, fp
 800c1d4:	f8cd b008 	str.w	fp, [sp, #8]
 800c1d8:	f8cd b08c 	str.w	fp, [sp, #140]	; 0x8c
 800c1dc:	2200      	movs	r2, #0
 800c1de:	6a68      	ldr	r0, [r5, #36]	; 0x24
 800c1e0:	6042      	str	r2, [r0, #4]
 800c1e2:	2204      	movs	r2, #4
 800c1e4:	f102 0614 	add.w	r6, r2, #20
 800c1e8:	429e      	cmp	r6, r3
 800c1ea:	6841      	ldr	r1, [r0, #4]
 800c1ec:	d94f      	bls.n	800c28e <_dtoa_r+0x316>
 800c1ee:	4628      	mov	r0, r5
 800c1f0:	f000 fcd8 	bl	800cba4 <_Balloc>
 800c1f4:	9008      	str	r0, [sp, #32]
 800c1f6:	2800      	cmp	r0, #0
 800c1f8:	d14d      	bne.n	800c296 <_dtoa_r+0x31e>
 800c1fa:	4602      	mov	r2, r0
 800c1fc:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800c200:	4b1d      	ldr	r3, [pc, #116]	; (800c278 <_dtoa_r+0x300>)
 800c202:	e6cd      	b.n	800bfa0 <_dtoa_r+0x28>
 800c204:	2301      	movs	r3, #1
 800c206:	e7de      	b.n	800c1c6 <_dtoa_r+0x24e>
 800c208:	2300      	movs	r3, #0
 800c20a:	930b      	str	r3, [sp, #44]	; 0x2c
 800c20c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800c20e:	eb09 0b03 	add.w	fp, r9, r3
 800c212:	f10b 0301 	add.w	r3, fp, #1
 800c216:	2b01      	cmp	r3, #1
 800c218:	9302      	str	r3, [sp, #8]
 800c21a:	bfb8      	it	lt
 800c21c:	2301      	movlt	r3, #1
 800c21e:	e7dd      	b.n	800c1dc <_dtoa_r+0x264>
 800c220:	2301      	movs	r3, #1
 800c222:	e7f2      	b.n	800c20a <_dtoa_r+0x292>
 800c224:	2401      	movs	r4, #1
 800c226:	2300      	movs	r3, #0
 800c228:	940b      	str	r4, [sp, #44]	; 0x2c
 800c22a:	9322      	str	r3, [sp, #136]	; 0x88
 800c22c:	f04f 3bff 	mov.w	fp, #4294967295	; 0xffffffff
 800c230:	2200      	movs	r2, #0
 800c232:	2312      	movs	r3, #18
 800c234:	f8cd b008 	str.w	fp, [sp, #8]
 800c238:	9223      	str	r2, [sp, #140]	; 0x8c
 800c23a:	e7cf      	b.n	800c1dc <_dtoa_r+0x264>
 800c23c:	f3af 8000 	nop.w
 800c240:	636f4361 	.word	0x636f4361
 800c244:	3fd287a7 	.word	0x3fd287a7
 800c248:	8b60c8b3 	.word	0x8b60c8b3
 800c24c:	3fc68a28 	.word	0x3fc68a28
 800c250:	509f79fb 	.word	0x509f79fb
 800c254:	3fd34413 	.word	0x3fd34413
 800c258:	0800e755 	.word	0x0800e755
 800c25c:	0800e76c 	.word	0x0800e76c
 800c260:	7ff00000 	.word	0x7ff00000
 800c264:	0800e751 	.word	0x0800e751
 800c268:	0800e748 	.word	0x0800e748
 800c26c:	0800e725 	.word	0x0800e725
 800c270:	3ff80000 	.word	0x3ff80000
 800c274:	0800e868 	.word	0x0800e868
 800c278:	0800e7cb 	.word	0x0800e7cb
 800c27c:	2301      	movs	r3, #1
 800c27e:	930b      	str	r3, [sp, #44]	; 0x2c
 800c280:	e7d4      	b.n	800c22c <_dtoa_r+0x2b4>
 800c282:	f8dd b08c 	ldr.w	fp, [sp, #140]	; 0x8c
 800c286:	465b      	mov	r3, fp
 800c288:	f8cd b008 	str.w	fp, [sp, #8]
 800c28c:	e7a6      	b.n	800c1dc <_dtoa_r+0x264>
 800c28e:	3101      	adds	r1, #1
 800c290:	6041      	str	r1, [r0, #4]
 800c292:	0052      	lsls	r2, r2, #1
 800c294:	e7a6      	b.n	800c1e4 <_dtoa_r+0x26c>
 800c296:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800c298:	9a08      	ldr	r2, [sp, #32]
 800c29a:	601a      	str	r2, [r3, #0]
 800c29c:	9b02      	ldr	r3, [sp, #8]
 800c29e:	2b0e      	cmp	r3, #14
 800c2a0:	f200 80a8 	bhi.w	800c3f4 <_dtoa_r+0x47c>
 800c2a4:	2c00      	cmp	r4, #0
 800c2a6:	f000 80a5 	beq.w	800c3f4 <_dtoa_r+0x47c>
 800c2aa:	f1b9 0f00 	cmp.w	r9, #0
 800c2ae:	dd34      	ble.n	800c31a <_dtoa_r+0x3a2>
 800c2b0:	4a9a      	ldr	r2, [pc, #616]	; (800c51c <_dtoa_r+0x5a4>)
 800c2b2:	f009 030f 	and.w	r3, r9, #15
 800c2b6:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800c2ba:	f419 7f80 	tst.w	r9, #256	; 0x100
 800c2be:	e9d3 3400 	ldrd	r3, r4, [r3]
 800c2c2:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 800c2c6:	ea4f 1429 	mov.w	r4, r9, asr #4
 800c2ca:	d016      	beq.n	800c2fa <_dtoa_r+0x382>
 800c2cc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800c2d0:	4b93      	ldr	r3, [pc, #588]	; (800c520 <_dtoa_r+0x5a8>)
 800c2d2:	2703      	movs	r7, #3
 800c2d4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800c2d8:	f7f4 fa28 	bl	800072c <__aeabi_ddiv>
 800c2dc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800c2e0:	f004 040f 	and.w	r4, r4, #15
 800c2e4:	4e8e      	ldr	r6, [pc, #568]	; (800c520 <_dtoa_r+0x5a8>)
 800c2e6:	b954      	cbnz	r4, 800c2fe <_dtoa_r+0x386>
 800c2e8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800c2ec:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c2f0:	f7f4 fa1c 	bl	800072c <__aeabi_ddiv>
 800c2f4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800c2f8:	e029      	b.n	800c34e <_dtoa_r+0x3d6>
 800c2fa:	2702      	movs	r7, #2
 800c2fc:	e7f2      	b.n	800c2e4 <_dtoa_r+0x36c>
 800c2fe:	07e1      	lsls	r1, r4, #31
 800c300:	d508      	bpl.n	800c314 <_dtoa_r+0x39c>
 800c302:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800c306:	e9d6 2300 	ldrd	r2, r3, [r6]
 800c30a:	f7f4 f8e5 	bl	80004d8 <__aeabi_dmul>
 800c30e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800c312:	3701      	adds	r7, #1
 800c314:	1064      	asrs	r4, r4, #1
 800c316:	3608      	adds	r6, #8
 800c318:	e7e5      	b.n	800c2e6 <_dtoa_r+0x36e>
 800c31a:	f000 80a5 	beq.w	800c468 <_dtoa_r+0x4f0>
 800c31e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800c322:	f1c9 0400 	rsb	r4, r9, #0
 800c326:	4b7d      	ldr	r3, [pc, #500]	; (800c51c <_dtoa_r+0x5a4>)
 800c328:	f004 020f 	and.w	r2, r4, #15
 800c32c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c330:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c334:	f7f4 f8d0 	bl	80004d8 <__aeabi_dmul>
 800c338:	2702      	movs	r7, #2
 800c33a:	2300      	movs	r3, #0
 800c33c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800c340:	4e77      	ldr	r6, [pc, #476]	; (800c520 <_dtoa_r+0x5a8>)
 800c342:	1124      	asrs	r4, r4, #4
 800c344:	2c00      	cmp	r4, #0
 800c346:	f040 8084 	bne.w	800c452 <_dtoa_r+0x4da>
 800c34a:	2b00      	cmp	r3, #0
 800c34c:	d1d2      	bne.n	800c2f4 <_dtoa_r+0x37c>
 800c34e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c350:	2b00      	cmp	r3, #0
 800c352:	f000 808b 	beq.w	800c46c <_dtoa_r+0x4f4>
 800c356:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800c35a:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 800c35e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800c362:	2200      	movs	r2, #0
 800c364:	4b6f      	ldr	r3, [pc, #444]	; (800c524 <_dtoa_r+0x5ac>)
 800c366:	f7f4 fb29 	bl	80009bc <__aeabi_dcmplt>
 800c36a:	2800      	cmp	r0, #0
 800c36c:	d07e      	beq.n	800c46c <_dtoa_r+0x4f4>
 800c36e:	9b02      	ldr	r3, [sp, #8]
 800c370:	2b00      	cmp	r3, #0
 800c372:	d07b      	beq.n	800c46c <_dtoa_r+0x4f4>
 800c374:	f1bb 0f00 	cmp.w	fp, #0
 800c378:	dd38      	ble.n	800c3ec <_dtoa_r+0x474>
 800c37a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800c37e:	2200      	movs	r2, #0
 800c380:	4b69      	ldr	r3, [pc, #420]	; (800c528 <_dtoa_r+0x5b0>)
 800c382:	f7f4 f8a9 	bl	80004d8 <__aeabi_dmul>
 800c386:	465c      	mov	r4, fp
 800c388:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800c38c:	f109 38ff 	add.w	r8, r9, #4294967295	; 0xffffffff
 800c390:	3701      	adds	r7, #1
 800c392:	4638      	mov	r0, r7
 800c394:	f7f4 f836 	bl	8000404 <__aeabi_i2d>
 800c398:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c39c:	f7f4 f89c 	bl	80004d8 <__aeabi_dmul>
 800c3a0:	2200      	movs	r2, #0
 800c3a2:	4b62      	ldr	r3, [pc, #392]	; (800c52c <_dtoa_r+0x5b4>)
 800c3a4:	f7f3 fee2 	bl	800016c <__adddf3>
 800c3a8:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800c3ac:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800c3b0:	9611      	str	r6, [sp, #68]	; 0x44
 800c3b2:	2c00      	cmp	r4, #0
 800c3b4:	d15d      	bne.n	800c472 <_dtoa_r+0x4fa>
 800c3b6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c3ba:	2200      	movs	r2, #0
 800c3bc:	4b5c      	ldr	r3, [pc, #368]	; (800c530 <_dtoa_r+0x5b8>)
 800c3be:	f7f3 fed3 	bl	8000168 <__aeabi_dsub>
 800c3c2:	4602      	mov	r2, r0
 800c3c4:	460b      	mov	r3, r1
 800c3c6:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800c3ca:	4633      	mov	r3, r6
 800c3cc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800c3ce:	f7f4 fb13 	bl	80009f8 <__aeabi_dcmpgt>
 800c3d2:	2800      	cmp	r0, #0
 800c3d4:	f040 829e 	bne.w	800c914 <_dtoa_r+0x99c>
 800c3d8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c3dc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800c3de:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800c3e2:	f7f4 faeb 	bl	80009bc <__aeabi_dcmplt>
 800c3e6:	2800      	cmp	r0, #0
 800c3e8:	f040 8292 	bne.w	800c910 <_dtoa_r+0x998>
 800c3ec:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 800c3f0:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800c3f4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800c3f6:	2b00      	cmp	r3, #0
 800c3f8:	f2c0 8153 	blt.w	800c6a2 <_dtoa_r+0x72a>
 800c3fc:	f1b9 0f0e 	cmp.w	r9, #14
 800c400:	f300 814f 	bgt.w	800c6a2 <_dtoa_r+0x72a>
 800c404:	4b45      	ldr	r3, [pc, #276]	; (800c51c <_dtoa_r+0x5a4>)
 800c406:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 800c40a:	e9d3 3400 	ldrd	r3, r4, [r3]
 800c40e:	e9cd 3406 	strd	r3, r4, [sp, #24]
 800c412:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800c414:	2b00      	cmp	r3, #0
 800c416:	f280 80db 	bge.w	800c5d0 <_dtoa_r+0x658>
 800c41a:	9b02      	ldr	r3, [sp, #8]
 800c41c:	2b00      	cmp	r3, #0
 800c41e:	f300 80d7 	bgt.w	800c5d0 <_dtoa_r+0x658>
 800c422:	f040 8274 	bne.w	800c90e <_dtoa_r+0x996>
 800c426:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c42a:	2200      	movs	r2, #0
 800c42c:	4b40      	ldr	r3, [pc, #256]	; (800c530 <_dtoa_r+0x5b8>)
 800c42e:	f7f4 f853 	bl	80004d8 <__aeabi_dmul>
 800c432:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c436:	f7f4 fad5 	bl	80009e4 <__aeabi_dcmpge>
 800c43a:	9c02      	ldr	r4, [sp, #8]
 800c43c:	4626      	mov	r6, r4
 800c43e:	2800      	cmp	r0, #0
 800c440:	f040 824a 	bne.w	800c8d8 <_dtoa_r+0x960>
 800c444:	2331      	movs	r3, #49	; 0x31
 800c446:	9f08      	ldr	r7, [sp, #32]
 800c448:	f109 0901 	add.w	r9, r9, #1
 800c44c:	f807 3b01 	strb.w	r3, [r7], #1
 800c450:	e246      	b.n	800c8e0 <_dtoa_r+0x968>
 800c452:	07e2      	lsls	r2, r4, #31
 800c454:	d505      	bpl.n	800c462 <_dtoa_r+0x4ea>
 800c456:	e9d6 2300 	ldrd	r2, r3, [r6]
 800c45a:	f7f4 f83d 	bl	80004d8 <__aeabi_dmul>
 800c45e:	2301      	movs	r3, #1
 800c460:	3701      	adds	r7, #1
 800c462:	1064      	asrs	r4, r4, #1
 800c464:	3608      	adds	r6, #8
 800c466:	e76d      	b.n	800c344 <_dtoa_r+0x3cc>
 800c468:	2702      	movs	r7, #2
 800c46a:	e770      	b.n	800c34e <_dtoa_r+0x3d6>
 800c46c:	46c8      	mov	r8, r9
 800c46e:	9c02      	ldr	r4, [sp, #8]
 800c470:	e78f      	b.n	800c392 <_dtoa_r+0x41a>
 800c472:	9908      	ldr	r1, [sp, #32]
 800c474:	4b29      	ldr	r3, [pc, #164]	; (800c51c <_dtoa_r+0x5a4>)
 800c476:	4421      	add	r1, r4
 800c478:	9112      	str	r1, [sp, #72]	; 0x48
 800c47a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800c47c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800c480:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 800c484:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800c488:	2900      	cmp	r1, #0
 800c48a:	d055      	beq.n	800c538 <_dtoa_r+0x5c0>
 800c48c:	2000      	movs	r0, #0
 800c48e:	4929      	ldr	r1, [pc, #164]	; (800c534 <_dtoa_r+0x5bc>)
 800c490:	f7f4 f94c 	bl	800072c <__aeabi_ddiv>
 800c494:	463b      	mov	r3, r7
 800c496:	4632      	mov	r2, r6
 800c498:	f7f3 fe66 	bl	8000168 <__aeabi_dsub>
 800c49c:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800c4a0:	9f08      	ldr	r7, [sp, #32]
 800c4a2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c4a6:	f7f4 fac7 	bl	8000a38 <__aeabi_d2iz>
 800c4aa:	4604      	mov	r4, r0
 800c4ac:	f7f3 ffaa 	bl	8000404 <__aeabi_i2d>
 800c4b0:	4602      	mov	r2, r0
 800c4b2:	460b      	mov	r3, r1
 800c4b4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c4b8:	f7f3 fe56 	bl	8000168 <__aeabi_dsub>
 800c4bc:	4602      	mov	r2, r0
 800c4be:	460b      	mov	r3, r1
 800c4c0:	3430      	adds	r4, #48	; 0x30
 800c4c2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800c4c6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800c4ca:	f807 4b01 	strb.w	r4, [r7], #1
 800c4ce:	f7f4 fa75 	bl	80009bc <__aeabi_dcmplt>
 800c4d2:	2800      	cmp	r0, #0
 800c4d4:	d174      	bne.n	800c5c0 <_dtoa_r+0x648>
 800c4d6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c4da:	2000      	movs	r0, #0
 800c4dc:	4911      	ldr	r1, [pc, #68]	; (800c524 <_dtoa_r+0x5ac>)
 800c4de:	f7f3 fe43 	bl	8000168 <__aeabi_dsub>
 800c4e2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800c4e6:	f7f4 fa69 	bl	80009bc <__aeabi_dcmplt>
 800c4ea:	2800      	cmp	r0, #0
 800c4ec:	f040 80b6 	bne.w	800c65c <_dtoa_r+0x6e4>
 800c4f0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800c4f2:	429f      	cmp	r7, r3
 800c4f4:	f43f af7a 	beq.w	800c3ec <_dtoa_r+0x474>
 800c4f8:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800c4fc:	2200      	movs	r2, #0
 800c4fe:	4b0a      	ldr	r3, [pc, #40]	; (800c528 <_dtoa_r+0x5b0>)
 800c500:	f7f3 ffea 	bl	80004d8 <__aeabi_dmul>
 800c504:	2200      	movs	r2, #0
 800c506:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800c50a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c50e:	4b06      	ldr	r3, [pc, #24]	; (800c528 <_dtoa_r+0x5b0>)
 800c510:	f7f3 ffe2 	bl	80004d8 <__aeabi_dmul>
 800c514:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800c518:	e7c3      	b.n	800c4a2 <_dtoa_r+0x52a>
 800c51a:	bf00      	nop
 800c51c:	0800e868 	.word	0x0800e868
 800c520:	0800e840 	.word	0x0800e840
 800c524:	3ff00000 	.word	0x3ff00000
 800c528:	40240000 	.word	0x40240000
 800c52c:	401c0000 	.word	0x401c0000
 800c530:	40140000 	.word	0x40140000
 800c534:	3fe00000 	.word	0x3fe00000
 800c538:	4630      	mov	r0, r6
 800c53a:	4639      	mov	r1, r7
 800c53c:	f7f3 ffcc 	bl	80004d8 <__aeabi_dmul>
 800c540:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800c542:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800c546:	9c08      	ldr	r4, [sp, #32]
 800c548:	9314      	str	r3, [sp, #80]	; 0x50
 800c54a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c54e:	f7f4 fa73 	bl	8000a38 <__aeabi_d2iz>
 800c552:	9015      	str	r0, [sp, #84]	; 0x54
 800c554:	f7f3 ff56 	bl	8000404 <__aeabi_i2d>
 800c558:	4602      	mov	r2, r0
 800c55a:	460b      	mov	r3, r1
 800c55c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c560:	f7f3 fe02 	bl	8000168 <__aeabi_dsub>
 800c564:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c566:	4606      	mov	r6, r0
 800c568:	3330      	adds	r3, #48	; 0x30
 800c56a:	f804 3b01 	strb.w	r3, [r4], #1
 800c56e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800c570:	460f      	mov	r7, r1
 800c572:	429c      	cmp	r4, r3
 800c574:	f04f 0200 	mov.w	r2, #0
 800c578:	d124      	bne.n	800c5c4 <_dtoa_r+0x64c>
 800c57a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800c57e:	4bb3      	ldr	r3, [pc, #716]	; (800c84c <_dtoa_r+0x8d4>)
 800c580:	f7f3 fdf4 	bl	800016c <__adddf3>
 800c584:	4602      	mov	r2, r0
 800c586:	460b      	mov	r3, r1
 800c588:	4630      	mov	r0, r6
 800c58a:	4639      	mov	r1, r7
 800c58c:	f7f4 fa34 	bl	80009f8 <__aeabi_dcmpgt>
 800c590:	2800      	cmp	r0, #0
 800c592:	d162      	bne.n	800c65a <_dtoa_r+0x6e2>
 800c594:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800c598:	2000      	movs	r0, #0
 800c59a:	49ac      	ldr	r1, [pc, #688]	; (800c84c <_dtoa_r+0x8d4>)
 800c59c:	f7f3 fde4 	bl	8000168 <__aeabi_dsub>
 800c5a0:	4602      	mov	r2, r0
 800c5a2:	460b      	mov	r3, r1
 800c5a4:	4630      	mov	r0, r6
 800c5a6:	4639      	mov	r1, r7
 800c5a8:	f7f4 fa08 	bl	80009bc <__aeabi_dcmplt>
 800c5ac:	2800      	cmp	r0, #0
 800c5ae:	f43f af1d 	beq.w	800c3ec <_dtoa_r+0x474>
 800c5b2:	9f14      	ldr	r7, [sp, #80]	; 0x50
 800c5b4:	1e7b      	subs	r3, r7, #1
 800c5b6:	9314      	str	r3, [sp, #80]	; 0x50
 800c5b8:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 800c5bc:	2b30      	cmp	r3, #48	; 0x30
 800c5be:	d0f8      	beq.n	800c5b2 <_dtoa_r+0x63a>
 800c5c0:	46c1      	mov	r9, r8
 800c5c2:	e03a      	b.n	800c63a <_dtoa_r+0x6c2>
 800c5c4:	4ba2      	ldr	r3, [pc, #648]	; (800c850 <_dtoa_r+0x8d8>)
 800c5c6:	f7f3 ff87 	bl	80004d8 <__aeabi_dmul>
 800c5ca:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800c5ce:	e7bc      	b.n	800c54a <_dtoa_r+0x5d2>
 800c5d0:	9f08      	ldr	r7, [sp, #32]
 800c5d2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800c5d6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c5da:	f7f4 f8a7 	bl	800072c <__aeabi_ddiv>
 800c5de:	f7f4 fa2b 	bl	8000a38 <__aeabi_d2iz>
 800c5e2:	4604      	mov	r4, r0
 800c5e4:	f7f3 ff0e 	bl	8000404 <__aeabi_i2d>
 800c5e8:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800c5ec:	f7f3 ff74 	bl	80004d8 <__aeabi_dmul>
 800c5f0:	f104 0630 	add.w	r6, r4, #48	; 0x30
 800c5f4:	460b      	mov	r3, r1
 800c5f6:	4602      	mov	r2, r0
 800c5f8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c5fc:	f7f3 fdb4 	bl	8000168 <__aeabi_dsub>
 800c600:	f807 6b01 	strb.w	r6, [r7], #1
 800c604:	9e08      	ldr	r6, [sp, #32]
 800c606:	9b02      	ldr	r3, [sp, #8]
 800c608:	1bbe      	subs	r6, r7, r6
 800c60a:	42b3      	cmp	r3, r6
 800c60c:	d13a      	bne.n	800c684 <_dtoa_r+0x70c>
 800c60e:	4602      	mov	r2, r0
 800c610:	460b      	mov	r3, r1
 800c612:	f7f3 fdab 	bl	800016c <__adddf3>
 800c616:	4602      	mov	r2, r0
 800c618:	460b      	mov	r3, r1
 800c61a:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800c61e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800c622:	f7f4 f9e9 	bl	80009f8 <__aeabi_dcmpgt>
 800c626:	bb58      	cbnz	r0, 800c680 <_dtoa_r+0x708>
 800c628:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800c62c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c630:	f7f4 f9ba 	bl	80009a8 <__aeabi_dcmpeq>
 800c634:	b108      	cbz	r0, 800c63a <_dtoa_r+0x6c2>
 800c636:	07e1      	lsls	r1, r4, #31
 800c638:	d422      	bmi.n	800c680 <_dtoa_r+0x708>
 800c63a:	4628      	mov	r0, r5
 800c63c:	4651      	mov	r1, sl
 800c63e:	f000 faf1 	bl	800cc24 <_Bfree>
 800c642:	2300      	movs	r3, #0
 800c644:	703b      	strb	r3, [r7, #0]
 800c646:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800c648:	f109 0001 	add.w	r0, r9, #1
 800c64c:	6018      	str	r0, [r3, #0]
 800c64e:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800c650:	2b00      	cmp	r3, #0
 800c652:	f43f acdf 	beq.w	800c014 <_dtoa_r+0x9c>
 800c656:	601f      	str	r7, [r3, #0]
 800c658:	e4dc      	b.n	800c014 <_dtoa_r+0x9c>
 800c65a:	4627      	mov	r7, r4
 800c65c:	463b      	mov	r3, r7
 800c65e:	461f      	mov	r7, r3
 800c660:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c664:	2a39      	cmp	r2, #57	; 0x39
 800c666:	d107      	bne.n	800c678 <_dtoa_r+0x700>
 800c668:	9a08      	ldr	r2, [sp, #32]
 800c66a:	429a      	cmp	r2, r3
 800c66c:	d1f7      	bne.n	800c65e <_dtoa_r+0x6e6>
 800c66e:	2230      	movs	r2, #48	; 0x30
 800c670:	9908      	ldr	r1, [sp, #32]
 800c672:	f108 0801 	add.w	r8, r8, #1
 800c676:	700a      	strb	r2, [r1, #0]
 800c678:	781a      	ldrb	r2, [r3, #0]
 800c67a:	3201      	adds	r2, #1
 800c67c:	701a      	strb	r2, [r3, #0]
 800c67e:	e79f      	b.n	800c5c0 <_dtoa_r+0x648>
 800c680:	46c8      	mov	r8, r9
 800c682:	e7eb      	b.n	800c65c <_dtoa_r+0x6e4>
 800c684:	2200      	movs	r2, #0
 800c686:	4b72      	ldr	r3, [pc, #456]	; (800c850 <_dtoa_r+0x8d8>)
 800c688:	f7f3 ff26 	bl	80004d8 <__aeabi_dmul>
 800c68c:	4602      	mov	r2, r0
 800c68e:	460b      	mov	r3, r1
 800c690:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800c694:	2200      	movs	r2, #0
 800c696:	2300      	movs	r3, #0
 800c698:	f7f4 f986 	bl	80009a8 <__aeabi_dcmpeq>
 800c69c:	2800      	cmp	r0, #0
 800c69e:	d098      	beq.n	800c5d2 <_dtoa_r+0x65a>
 800c6a0:	e7cb      	b.n	800c63a <_dtoa_r+0x6c2>
 800c6a2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800c6a4:	2a00      	cmp	r2, #0
 800c6a6:	f000 80cd 	beq.w	800c844 <_dtoa_r+0x8cc>
 800c6aa:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800c6ac:	2a01      	cmp	r2, #1
 800c6ae:	f300 80af 	bgt.w	800c810 <_dtoa_r+0x898>
 800c6b2:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800c6b4:	2a00      	cmp	r2, #0
 800c6b6:	f000 80a7 	beq.w	800c808 <_dtoa_r+0x890>
 800c6ba:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800c6be:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800c6c0:	9f06      	ldr	r7, [sp, #24]
 800c6c2:	9a06      	ldr	r2, [sp, #24]
 800c6c4:	2101      	movs	r1, #1
 800c6c6:	441a      	add	r2, r3
 800c6c8:	9206      	str	r2, [sp, #24]
 800c6ca:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c6cc:	4628      	mov	r0, r5
 800c6ce:	441a      	add	r2, r3
 800c6d0:	9209      	str	r2, [sp, #36]	; 0x24
 800c6d2:	f000 fb61 	bl	800cd98 <__i2b>
 800c6d6:	4606      	mov	r6, r0
 800c6d8:	2f00      	cmp	r7, #0
 800c6da:	dd0c      	ble.n	800c6f6 <_dtoa_r+0x77e>
 800c6dc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c6de:	2b00      	cmp	r3, #0
 800c6e0:	dd09      	ble.n	800c6f6 <_dtoa_r+0x77e>
 800c6e2:	42bb      	cmp	r3, r7
 800c6e4:	bfa8      	it	ge
 800c6e6:	463b      	movge	r3, r7
 800c6e8:	9a06      	ldr	r2, [sp, #24]
 800c6ea:	1aff      	subs	r7, r7, r3
 800c6ec:	1ad2      	subs	r2, r2, r3
 800c6ee:	9206      	str	r2, [sp, #24]
 800c6f0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c6f2:	1ad3      	subs	r3, r2, r3
 800c6f4:	9309      	str	r3, [sp, #36]	; 0x24
 800c6f6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c6f8:	b1f3      	cbz	r3, 800c738 <_dtoa_r+0x7c0>
 800c6fa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c6fc:	2b00      	cmp	r3, #0
 800c6fe:	f000 80a9 	beq.w	800c854 <_dtoa_r+0x8dc>
 800c702:	2c00      	cmp	r4, #0
 800c704:	dd10      	ble.n	800c728 <_dtoa_r+0x7b0>
 800c706:	4631      	mov	r1, r6
 800c708:	4622      	mov	r2, r4
 800c70a:	4628      	mov	r0, r5
 800c70c:	f000 fbfe 	bl	800cf0c <__pow5mult>
 800c710:	4652      	mov	r2, sl
 800c712:	4601      	mov	r1, r0
 800c714:	4606      	mov	r6, r0
 800c716:	4628      	mov	r0, r5
 800c718:	f000 fb54 	bl	800cdc4 <__multiply>
 800c71c:	4680      	mov	r8, r0
 800c71e:	4651      	mov	r1, sl
 800c720:	4628      	mov	r0, r5
 800c722:	f000 fa7f 	bl	800cc24 <_Bfree>
 800c726:	46c2      	mov	sl, r8
 800c728:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c72a:	1b1a      	subs	r2, r3, r4
 800c72c:	d004      	beq.n	800c738 <_dtoa_r+0x7c0>
 800c72e:	4651      	mov	r1, sl
 800c730:	4628      	mov	r0, r5
 800c732:	f000 fbeb 	bl	800cf0c <__pow5mult>
 800c736:	4682      	mov	sl, r0
 800c738:	2101      	movs	r1, #1
 800c73a:	4628      	mov	r0, r5
 800c73c:	f000 fb2c 	bl	800cd98 <__i2b>
 800c740:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c742:	4604      	mov	r4, r0
 800c744:	2b00      	cmp	r3, #0
 800c746:	f340 8087 	ble.w	800c858 <_dtoa_r+0x8e0>
 800c74a:	461a      	mov	r2, r3
 800c74c:	4601      	mov	r1, r0
 800c74e:	4628      	mov	r0, r5
 800c750:	f000 fbdc 	bl	800cf0c <__pow5mult>
 800c754:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800c756:	4604      	mov	r4, r0
 800c758:	2b01      	cmp	r3, #1
 800c75a:	f340 8080 	ble.w	800c85e <_dtoa_r+0x8e6>
 800c75e:	f04f 0800 	mov.w	r8, #0
 800c762:	6923      	ldr	r3, [r4, #16]
 800c764:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800c768:	6918      	ldr	r0, [r3, #16]
 800c76a:	f000 fac7 	bl	800ccfc <__hi0bits>
 800c76e:	f1c0 0020 	rsb	r0, r0, #32
 800c772:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c774:	4418      	add	r0, r3
 800c776:	f010 001f 	ands.w	r0, r0, #31
 800c77a:	f000 8092 	beq.w	800c8a2 <_dtoa_r+0x92a>
 800c77e:	f1c0 0320 	rsb	r3, r0, #32
 800c782:	2b04      	cmp	r3, #4
 800c784:	f340 808a 	ble.w	800c89c <_dtoa_r+0x924>
 800c788:	f1c0 001c 	rsb	r0, r0, #28
 800c78c:	9b06      	ldr	r3, [sp, #24]
 800c78e:	4407      	add	r7, r0
 800c790:	4403      	add	r3, r0
 800c792:	9306      	str	r3, [sp, #24]
 800c794:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c796:	4403      	add	r3, r0
 800c798:	9309      	str	r3, [sp, #36]	; 0x24
 800c79a:	9b06      	ldr	r3, [sp, #24]
 800c79c:	2b00      	cmp	r3, #0
 800c79e:	dd05      	ble.n	800c7ac <_dtoa_r+0x834>
 800c7a0:	4651      	mov	r1, sl
 800c7a2:	461a      	mov	r2, r3
 800c7a4:	4628      	mov	r0, r5
 800c7a6:	f000 fc0b 	bl	800cfc0 <__lshift>
 800c7aa:	4682      	mov	sl, r0
 800c7ac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c7ae:	2b00      	cmp	r3, #0
 800c7b0:	dd05      	ble.n	800c7be <_dtoa_r+0x846>
 800c7b2:	4621      	mov	r1, r4
 800c7b4:	461a      	mov	r2, r3
 800c7b6:	4628      	mov	r0, r5
 800c7b8:	f000 fc02 	bl	800cfc0 <__lshift>
 800c7bc:	4604      	mov	r4, r0
 800c7be:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c7c0:	2b00      	cmp	r3, #0
 800c7c2:	d070      	beq.n	800c8a6 <_dtoa_r+0x92e>
 800c7c4:	4621      	mov	r1, r4
 800c7c6:	4650      	mov	r0, sl
 800c7c8:	f000 fc66 	bl	800d098 <__mcmp>
 800c7cc:	2800      	cmp	r0, #0
 800c7ce:	da6a      	bge.n	800c8a6 <_dtoa_r+0x92e>
 800c7d0:	2300      	movs	r3, #0
 800c7d2:	4651      	mov	r1, sl
 800c7d4:	220a      	movs	r2, #10
 800c7d6:	4628      	mov	r0, r5
 800c7d8:	f000 fa46 	bl	800cc68 <__multadd>
 800c7dc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c7de:	4682      	mov	sl, r0
 800c7e0:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 800c7e4:	2b00      	cmp	r3, #0
 800c7e6:	f000 8193 	beq.w	800cb10 <_dtoa_r+0xb98>
 800c7ea:	4631      	mov	r1, r6
 800c7ec:	2300      	movs	r3, #0
 800c7ee:	220a      	movs	r2, #10
 800c7f0:	4628      	mov	r0, r5
 800c7f2:	f000 fa39 	bl	800cc68 <__multadd>
 800c7f6:	f1bb 0f00 	cmp.w	fp, #0
 800c7fa:	4606      	mov	r6, r0
 800c7fc:	f300 8093 	bgt.w	800c926 <_dtoa_r+0x9ae>
 800c800:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800c802:	2b02      	cmp	r3, #2
 800c804:	dc57      	bgt.n	800c8b6 <_dtoa_r+0x93e>
 800c806:	e08e      	b.n	800c926 <_dtoa_r+0x9ae>
 800c808:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800c80a:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800c80e:	e756      	b.n	800c6be <_dtoa_r+0x746>
 800c810:	9b02      	ldr	r3, [sp, #8]
 800c812:	1e5c      	subs	r4, r3, #1
 800c814:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c816:	42a3      	cmp	r3, r4
 800c818:	bfb7      	itett	lt
 800c81a:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800c81c:	1b1c      	subge	r4, r3, r4
 800c81e:	1ae2      	sublt	r2, r4, r3
 800c820:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 800c822:	bfbe      	ittt	lt
 800c824:	940a      	strlt	r4, [sp, #40]	; 0x28
 800c826:	189b      	addlt	r3, r3, r2
 800c828:	930e      	strlt	r3, [sp, #56]	; 0x38
 800c82a:	9b02      	ldr	r3, [sp, #8]
 800c82c:	bfb8      	it	lt
 800c82e:	2400      	movlt	r4, #0
 800c830:	2b00      	cmp	r3, #0
 800c832:	bfbb      	ittet	lt
 800c834:	9b06      	ldrlt	r3, [sp, #24]
 800c836:	9a02      	ldrlt	r2, [sp, #8]
 800c838:	9f06      	ldrge	r7, [sp, #24]
 800c83a:	1a9f      	sublt	r7, r3, r2
 800c83c:	bfac      	ite	ge
 800c83e:	9b02      	ldrge	r3, [sp, #8]
 800c840:	2300      	movlt	r3, #0
 800c842:	e73e      	b.n	800c6c2 <_dtoa_r+0x74a>
 800c844:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800c846:	9f06      	ldr	r7, [sp, #24]
 800c848:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 800c84a:	e745      	b.n	800c6d8 <_dtoa_r+0x760>
 800c84c:	3fe00000 	.word	0x3fe00000
 800c850:	40240000 	.word	0x40240000
 800c854:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c856:	e76a      	b.n	800c72e <_dtoa_r+0x7b6>
 800c858:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800c85a:	2b01      	cmp	r3, #1
 800c85c:	dc19      	bgt.n	800c892 <_dtoa_r+0x91a>
 800c85e:	9b04      	ldr	r3, [sp, #16]
 800c860:	b9bb      	cbnz	r3, 800c892 <_dtoa_r+0x91a>
 800c862:	9b05      	ldr	r3, [sp, #20]
 800c864:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c868:	b99b      	cbnz	r3, 800c892 <_dtoa_r+0x91a>
 800c86a:	9b05      	ldr	r3, [sp, #20]
 800c86c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800c870:	0d1b      	lsrs	r3, r3, #20
 800c872:	051b      	lsls	r3, r3, #20
 800c874:	b183      	cbz	r3, 800c898 <_dtoa_r+0x920>
 800c876:	f04f 0801 	mov.w	r8, #1
 800c87a:	9b06      	ldr	r3, [sp, #24]
 800c87c:	3301      	adds	r3, #1
 800c87e:	9306      	str	r3, [sp, #24]
 800c880:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c882:	3301      	adds	r3, #1
 800c884:	9309      	str	r3, [sp, #36]	; 0x24
 800c886:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c888:	2b00      	cmp	r3, #0
 800c88a:	f47f af6a 	bne.w	800c762 <_dtoa_r+0x7ea>
 800c88e:	2001      	movs	r0, #1
 800c890:	e76f      	b.n	800c772 <_dtoa_r+0x7fa>
 800c892:	f04f 0800 	mov.w	r8, #0
 800c896:	e7f6      	b.n	800c886 <_dtoa_r+0x90e>
 800c898:	4698      	mov	r8, r3
 800c89a:	e7f4      	b.n	800c886 <_dtoa_r+0x90e>
 800c89c:	f43f af7d 	beq.w	800c79a <_dtoa_r+0x822>
 800c8a0:	4618      	mov	r0, r3
 800c8a2:	301c      	adds	r0, #28
 800c8a4:	e772      	b.n	800c78c <_dtoa_r+0x814>
 800c8a6:	9b02      	ldr	r3, [sp, #8]
 800c8a8:	2b00      	cmp	r3, #0
 800c8aa:	dc36      	bgt.n	800c91a <_dtoa_r+0x9a2>
 800c8ac:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800c8ae:	2b02      	cmp	r3, #2
 800c8b0:	dd33      	ble.n	800c91a <_dtoa_r+0x9a2>
 800c8b2:	f8dd b008 	ldr.w	fp, [sp, #8]
 800c8b6:	f1bb 0f00 	cmp.w	fp, #0
 800c8ba:	d10d      	bne.n	800c8d8 <_dtoa_r+0x960>
 800c8bc:	4621      	mov	r1, r4
 800c8be:	465b      	mov	r3, fp
 800c8c0:	2205      	movs	r2, #5
 800c8c2:	4628      	mov	r0, r5
 800c8c4:	f000 f9d0 	bl	800cc68 <__multadd>
 800c8c8:	4601      	mov	r1, r0
 800c8ca:	4604      	mov	r4, r0
 800c8cc:	4650      	mov	r0, sl
 800c8ce:	f000 fbe3 	bl	800d098 <__mcmp>
 800c8d2:	2800      	cmp	r0, #0
 800c8d4:	f73f adb6 	bgt.w	800c444 <_dtoa_r+0x4cc>
 800c8d8:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800c8da:	9f08      	ldr	r7, [sp, #32]
 800c8dc:	ea6f 0903 	mvn.w	r9, r3
 800c8e0:	f04f 0800 	mov.w	r8, #0
 800c8e4:	4621      	mov	r1, r4
 800c8e6:	4628      	mov	r0, r5
 800c8e8:	f000 f99c 	bl	800cc24 <_Bfree>
 800c8ec:	2e00      	cmp	r6, #0
 800c8ee:	f43f aea4 	beq.w	800c63a <_dtoa_r+0x6c2>
 800c8f2:	f1b8 0f00 	cmp.w	r8, #0
 800c8f6:	d005      	beq.n	800c904 <_dtoa_r+0x98c>
 800c8f8:	45b0      	cmp	r8, r6
 800c8fa:	d003      	beq.n	800c904 <_dtoa_r+0x98c>
 800c8fc:	4641      	mov	r1, r8
 800c8fe:	4628      	mov	r0, r5
 800c900:	f000 f990 	bl	800cc24 <_Bfree>
 800c904:	4631      	mov	r1, r6
 800c906:	4628      	mov	r0, r5
 800c908:	f000 f98c 	bl	800cc24 <_Bfree>
 800c90c:	e695      	b.n	800c63a <_dtoa_r+0x6c2>
 800c90e:	2400      	movs	r4, #0
 800c910:	4626      	mov	r6, r4
 800c912:	e7e1      	b.n	800c8d8 <_dtoa_r+0x960>
 800c914:	46c1      	mov	r9, r8
 800c916:	4626      	mov	r6, r4
 800c918:	e594      	b.n	800c444 <_dtoa_r+0x4cc>
 800c91a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c91c:	f8dd b008 	ldr.w	fp, [sp, #8]
 800c920:	2b00      	cmp	r3, #0
 800c922:	f000 80fc 	beq.w	800cb1e <_dtoa_r+0xba6>
 800c926:	2f00      	cmp	r7, #0
 800c928:	dd05      	ble.n	800c936 <_dtoa_r+0x9be>
 800c92a:	4631      	mov	r1, r6
 800c92c:	463a      	mov	r2, r7
 800c92e:	4628      	mov	r0, r5
 800c930:	f000 fb46 	bl	800cfc0 <__lshift>
 800c934:	4606      	mov	r6, r0
 800c936:	f1b8 0f00 	cmp.w	r8, #0
 800c93a:	d05c      	beq.n	800c9f6 <_dtoa_r+0xa7e>
 800c93c:	4628      	mov	r0, r5
 800c93e:	6871      	ldr	r1, [r6, #4]
 800c940:	f000 f930 	bl	800cba4 <_Balloc>
 800c944:	4607      	mov	r7, r0
 800c946:	b928      	cbnz	r0, 800c954 <_dtoa_r+0x9dc>
 800c948:	4602      	mov	r2, r0
 800c94a:	f240 21ea 	movw	r1, #746	; 0x2ea
 800c94e:	4b7e      	ldr	r3, [pc, #504]	; (800cb48 <_dtoa_r+0xbd0>)
 800c950:	f7ff bb26 	b.w	800bfa0 <_dtoa_r+0x28>
 800c954:	6932      	ldr	r2, [r6, #16]
 800c956:	f106 010c 	add.w	r1, r6, #12
 800c95a:	3202      	adds	r2, #2
 800c95c:	0092      	lsls	r2, r2, #2
 800c95e:	300c      	adds	r0, #12
 800c960:	f000 f912 	bl	800cb88 <memcpy>
 800c964:	2201      	movs	r2, #1
 800c966:	4639      	mov	r1, r7
 800c968:	4628      	mov	r0, r5
 800c96a:	f000 fb29 	bl	800cfc0 <__lshift>
 800c96e:	46b0      	mov	r8, r6
 800c970:	4606      	mov	r6, r0
 800c972:	9b08      	ldr	r3, [sp, #32]
 800c974:	3301      	adds	r3, #1
 800c976:	9302      	str	r3, [sp, #8]
 800c978:	9b08      	ldr	r3, [sp, #32]
 800c97a:	445b      	add	r3, fp
 800c97c:	930a      	str	r3, [sp, #40]	; 0x28
 800c97e:	9b04      	ldr	r3, [sp, #16]
 800c980:	f003 0301 	and.w	r3, r3, #1
 800c984:	9309      	str	r3, [sp, #36]	; 0x24
 800c986:	9b02      	ldr	r3, [sp, #8]
 800c988:	4621      	mov	r1, r4
 800c98a:	4650      	mov	r0, sl
 800c98c:	f103 3bff 	add.w	fp, r3, #4294967295	; 0xffffffff
 800c990:	f7ff fa64 	bl	800be5c <quorem>
 800c994:	4603      	mov	r3, r0
 800c996:	4641      	mov	r1, r8
 800c998:	3330      	adds	r3, #48	; 0x30
 800c99a:	9004      	str	r0, [sp, #16]
 800c99c:	4650      	mov	r0, sl
 800c99e:	930b      	str	r3, [sp, #44]	; 0x2c
 800c9a0:	f000 fb7a 	bl	800d098 <__mcmp>
 800c9a4:	4632      	mov	r2, r6
 800c9a6:	9006      	str	r0, [sp, #24]
 800c9a8:	4621      	mov	r1, r4
 800c9aa:	4628      	mov	r0, r5
 800c9ac:	f000 fb90 	bl	800d0d0 <__mdiff>
 800c9b0:	68c2      	ldr	r2, [r0, #12]
 800c9b2:	4607      	mov	r7, r0
 800c9b4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c9b6:	bb02      	cbnz	r2, 800c9fa <_dtoa_r+0xa82>
 800c9b8:	4601      	mov	r1, r0
 800c9ba:	4650      	mov	r0, sl
 800c9bc:	f000 fb6c 	bl	800d098 <__mcmp>
 800c9c0:	4602      	mov	r2, r0
 800c9c2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c9c4:	4639      	mov	r1, r7
 800c9c6:	4628      	mov	r0, r5
 800c9c8:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 800c9cc:	f000 f92a 	bl	800cc24 <_Bfree>
 800c9d0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800c9d2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800c9d4:	9f02      	ldr	r7, [sp, #8]
 800c9d6:	ea43 0102 	orr.w	r1, r3, r2
 800c9da:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c9dc:	430b      	orrs	r3, r1
 800c9de:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c9e0:	d10d      	bne.n	800c9fe <_dtoa_r+0xa86>
 800c9e2:	2b39      	cmp	r3, #57	; 0x39
 800c9e4:	d027      	beq.n	800ca36 <_dtoa_r+0xabe>
 800c9e6:	9a06      	ldr	r2, [sp, #24]
 800c9e8:	2a00      	cmp	r2, #0
 800c9ea:	dd01      	ble.n	800c9f0 <_dtoa_r+0xa78>
 800c9ec:	9b04      	ldr	r3, [sp, #16]
 800c9ee:	3331      	adds	r3, #49	; 0x31
 800c9f0:	f88b 3000 	strb.w	r3, [fp]
 800c9f4:	e776      	b.n	800c8e4 <_dtoa_r+0x96c>
 800c9f6:	4630      	mov	r0, r6
 800c9f8:	e7b9      	b.n	800c96e <_dtoa_r+0x9f6>
 800c9fa:	2201      	movs	r2, #1
 800c9fc:	e7e2      	b.n	800c9c4 <_dtoa_r+0xa4c>
 800c9fe:	9906      	ldr	r1, [sp, #24]
 800ca00:	2900      	cmp	r1, #0
 800ca02:	db04      	blt.n	800ca0e <_dtoa_r+0xa96>
 800ca04:	9822      	ldr	r0, [sp, #136]	; 0x88
 800ca06:	4301      	orrs	r1, r0
 800ca08:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ca0a:	4301      	orrs	r1, r0
 800ca0c:	d120      	bne.n	800ca50 <_dtoa_r+0xad8>
 800ca0e:	2a00      	cmp	r2, #0
 800ca10:	ddee      	ble.n	800c9f0 <_dtoa_r+0xa78>
 800ca12:	4651      	mov	r1, sl
 800ca14:	2201      	movs	r2, #1
 800ca16:	4628      	mov	r0, r5
 800ca18:	9302      	str	r3, [sp, #8]
 800ca1a:	f000 fad1 	bl	800cfc0 <__lshift>
 800ca1e:	4621      	mov	r1, r4
 800ca20:	4682      	mov	sl, r0
 800ca22:	f000 fb39 	bl	800d098 <__mcmp>
 800ca26:	2800      	cmp	r0, #0
 800ca28:	9b02      	ldr	r3, [sp, #8]
 800ca2a:	dc02      	bgt.n	800ca32 <_dtoa_r+0xaba>
 800ca2c:	d1e0      	bne.n	800c9f0 <_dtoa_r+0xa78>
 800ca2e:	07da      	lsls	r2, r3, #31
 800ca30:	d5de      	bpl.n	800c9f0 <_dtoa_r+0xa78>
 800ca32:	2b39      	cmp	r3, #57	; 0x39
 800ca34:	d1da      	bne.n	800c9ec <_dtoa_r+0xa74>
 800ca36:	2339      	movs	r3, #57	; 0x39
 800ca38:	f88b 3000 	strb.w	r3, [fp]
 800ca3c:	463b      	mov	r3, r7
 800ca3e:	461f      	mov	r7, r3
 800ca40:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 800ca44:	3b01      	subs	r3, #1
 800ca46:	2a39      	cmp	r2, #57	; 0x39
 800ca48:	d050      	beq.n	800caec <_dtoa_r+0xb74>
 800ca4a:	3201      	adds	r2, #1
 800ca4c:	701a      	strb	r2, [r3, #0]
 800ca4e:	e749      	b.n	800c8e4 <_dtoa_r+0x96c>
 800ca50:	2a00      	cmp	r2, #0
 800ca52:	dd03      	ble.n	800ca5c <_dtoa_r+0xae4>
 800ca54:	2b39      	cmp	r3, #57	; 0x39
 800ca56:	d0ee      	beq.n	800ca36 <_dtoa_r+0xabe>
 800ca58:	3301      	adds	r3, #1
 800ca5a:	e7c9      	b.n	800c9f0 <_dtoa_r+0xa78>
 800ca5c:	9a02      	ldr	r2, [sp, #8]
 800ca5e:	990a      	ldr	r1, [sp, #40]	; 0x28
 800ca60:	f802 3c01 	strb.w	r3, [r2, #-1]
 800ca64:	428a      	cmp	r2, r1
 800ca66:	d02a      	beq.n	800cabe <_dtoa_r+0xb46>
 800ca68:	4651      	mov	r1, sl
 800ca6a:	2300      	movs	r3, #0
 800ca6c:	220a      	movs	r2, #10
 800ca6e:	4628      	mov	r0, r5
 800ca70:	f000 f8fa 	bl	800cc68 <__multadd>
 800ca74:	45b0      	cmp	r8, r6
 800ca76:	4682      	mov	sl, r0
 800ca78:	f04f 0300 	mov.w	r3, #0
 800ca7c:	f04f 020a 	mov.w	r2, #10
 800ca80:	4641      	mov	r1, r8
 800ca82:	4628      	mov	r0, r5
 800ca84:	d107      	bne.n	800ca96 <_dtoa_r+0xb1e>
 800ca86:	f000 f8ef 	bl	800cc68 <__multadd>
 800ca8a:	4680      	mov	r8, r0
 800ca8c:	4606      	mov	r6, r0
 800ca8e:	9b02      	ldr	r3, [sp, #8]
 800ca90:	3301      	adds	r3, #1
 800ca92:	9302      	str	r3, [sp, #8]
 800ca94:	e777      	b.n	800c986 <_dtoa_r+0xa0e>
 800ca96:	f000 f8e7 	bl	800cc68 <__multadd>
 800ca9a:	4631      	mov	r1, r6
 800ca9c:	4680      	mov	r8, r0
 800ca9e:	2300      	movs	r3, #0
 800caa0:	220a      	movs	r2, #10
 800caa2:	4628      	mov	r0, r5
 800caa4:	f000 f8e0 	bl	800cc68 <__multadd>
 800caa8:	4606      	mov	r6, r0
 800caaa:	e7f0      	b.n	800ca8e <_dtoa_r+0xb16>
 800caac:	f1bb 0f00 	cmp.w	fp, #0
 800cab0:	bfcc      	ite	gt
 800cab2:	465f      	movgt	r7, fp
 800cab4:	2701      	movle	r7, #1
 800cab6:	f04f 0800 	mov.w	r8, #0
 800caba:	9a08      	ldr	r2, [sp, #32]
 800cabc:	4417      	add	r7, r2
 800cabe:	4651      	mov	r1, sl
 800cac0:	2201      	movs	r2, #1
 800cac2:	4628      	mov	r0, r5
 800cac4:	9302      	str	r3, [sp, #8]
 800cac6:	f000 fa7b 	bl	800cfc0 <__lshift>
 800caca:	4621      	mov	r1, r4
 800cacc:	4682      	mov	sl, r0
 800cace:	f000 fae3 	bl	800d098 <__mcmp>
 800cad2:	2800      	cmp	r0, #0
 800cad4:	dcb2      	bgt.n	800ca3c <_dtoa_r+0xac4>
 800cad6:	d102      	bne.n	800cade <_dtoa_r+0xb66>
 800cad8:	9b02      	ldr	r3, [sp, #8]
 800cada:	07db      	lsls	r3, r3, #31
 800cadc:	d4ae      	bmi.n	800ca3c <_dtoa_r+0xac4>
 800cade:	463b      	mov	r3, r7
 800cae0:	461f      	mov	r7, r3
 800cae2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800cae6:	2a30      	cmp	r2, #48	; 0x30
 800cae8:	d0fa      	beq.n	800cae0 <_dtoa_r+0xb68>
 800caea:	e6fb      	b.n	800c8e4 <_dtoa_r+0x96c>
 800caec:	9a08      	ldr	r2, [sp, #32]
 800caee:	429a      	cmp	r2, r3
 800caf0:	d1a5      	bne.n	800ca3e <_dtoa_r+0xac6>
 800caf2:	2331      	movs	r3, #49	; 0x31
 800caf4:	f109 0901 	add.w	r9, r9, #1
 800caf8:	7013      	strb	r3, [r2, #0]
 800cafa:	e6f3      	b.n	800c8e4 <_dtoa_r+0x96c>
 800cafc:	4b13      	ldr	r3, [pc, #76]	; (800cb4c <_dtoa_r+0xbd4>)
 800cafe:	f7ff baa7 	b.w	800c050 <_dtoa_r+0xd8>
 800cb02:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800cb04:	2b00      	cmp	r3, #0
 800cb06:	f47f aa80 	bne.w	800c00a <_dtoa_r+0x92>
 800cb0a:	4b11      	ldr	r3, [pc, #68]	; (800cb50 <_dtoa_r+0xbd8>)
 800cb0c:	f7ff baa0 	b.w	800c050 <_dtoa_r+0xd8>
 800cb10:	f1bb 0f00 	cmp.w	fp, #0
 800cb14:	dc03      	bgt.n	800cb1e <_dtoa_r+0xba6>
 800cb16:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800cb18:	2b02      	cmp	r3, #2
 800cb1a:	f73f aecc 	bgt.w	800c8b6 <_dtoa_r+0x93e>
 800cb1e:	9f08      	ldr	r7, [sp, #32]
 800cb20:	4621      	mov	r1, r4
 800cb22:	4650      	mov	r0, sl
 800cb24:	f7ff f99a 	bl	800be5c <quorem>
 800cb28:	9a08      	ldr	r2, [sp, #32]
 800cb2a:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800cb2e:	f807 3b01 	strb.w	r3, [r7], #1
 800cb32:	1aba      	subs	r2, r7, r2
 800cb34:	4593      	cmp	fp, r2
 800cb36:	ddb9      	ble.n	800caac <_dtoa_r+0xb34>
 800cb38:	4651      	mov	r1, sl
 800cb3a:	2300      	movs	r3, #0
 800cb3c:	220a      	movs	r2, #10
 800cb3e:	4628      	mov	r0, r5
 800cb40:	f000 f892 	bl	800cc68 <__multadd>
 800cb44:	4682      	mov	sl, r0
 800cb46:	e7eb      	b.n	800cb20 <_dtoa_r+0xba8>
 800cb48:	0800e7cb 	.word	0x0800e7cb
 800cb4c:	0800e724 	.word	0x0800e724
 800cb50:	0800e748 	.word	0x0800e748

0800cb54 <_localeconv_r>:
 800cb54:	4800      	ldr	r0, [pc, #0]	; (800cb58 <_localeconv_r+0x4>)
 800cb56:	4770      	bx	lr
 800cb58:	200001ac 	.word	0x200001ac

0800cb5c <malloc>:
 800cb5c:	4b02      	ldr	r3, [pc, #8]	; (800cb68 <malloc+0xc>)
 800cb5e:	4601      	mov	r1, r0
 800cb60:	6818      	ldr	r0, [r3, #0]
 800cb62:	f000 bbfb 	b.w	800d35c <_malloc_r>
 800cb66:	bf00      	nop
 800cb68:	20000058 	.word	0x20000058

0800cb6c <memchr>:
 800cb6c:	4603      	mov	r3, r0
 800cb6e:	b510      	push	{r4, lr}
 800cb70:	b2c9      	uxtb	r1, r1
 800cb72:	4402      	add	r2, r0
 800cb74:	4293      	cmp	r3, r2
 800cb76:	4618      	mov	r0, r3
 800cb78:	d101      	bne.n	800cb7e <memchr+0x12>
 800cb7a:	2000      	movs	r0, #0
 800cb7c:	e003      	b.n	800cb86 <memchr+0x1a>
 800cb7e:	7804      	ldrb	r4, [r0, #0]
 800cb80:	3301      	adds	r3, #1
 800cb82:	428c      	cmp	r4, r1
 800cb84:	d1f6      	bne.n	800cb74 <memchr+0x8>
 800cb86:	bd10      	pop	{r4, pc}

0800cb88 <memcpy>:
 800cb88:	440a      	add	r2, r1
 800cb8a:	4291      	cmp	r1, r2
 800cb8c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800cb90:	d100      	bne.n	800cb94 <memcpy+0xc>
 800cb92:	4770      	bx	lr
 800cb94:	b510      	push	{r4, lr}
 800cb96:	f811 4b01 	ldrb.w	r4, [r1], #1
 800cb9a:	4291      	cmp	r1, r2
 800cb9c:	f803 4f01 	strb.w	r4, [r3, #1]!
 800cba0:	d1f9      	bne.n	800cb96 <memcpy+0xe>
 800cba2:	bd10      	pop	{r4, pc}

0800cba4 <_Balloc>:
 800cba4:	b570      	push	{r4, r5, r6, lr}
 800cba6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800cba8:	4604      	mov	r4, r0
 800cbaa:	460d      	mov	r5, r1
 800cbac:	b976      	cbnz	r6, 800cbcc <_Balloc+0x28>
 800cbae:	2010      	movs	r0, #16
 800cbb0:	f7ff ffd4 	bl	800cb5c <malloc>
 800cbb4:	4602      	mov	r2, r0
 800cbb6:	6260      	str	r0, [r4, #36]	; 0x24
 800cbb8:	b920      	cbnz	r0, 800cbc4 <_Balloc+0x20>
 800cbba:	2166      	movs	r1, #102	; 0x66
 800cbbc:	4b17      	ldr	r3, [pc, #92]	; (800cc1c <_Balloc+0x78>)
 800cbbe:	4818      	ldr	r0, [pc, #96]	; (800cc20 <_Balloc+0x7c>)
 800cbc0:	f000 fd92 	bl	800d6e8 <__assert_func>
 800cbc4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800cbc8:	6006      	str	r6, [r0, #0]
 800cbca:	60c6      	str	r6, [r0, #12]
 800cbcc:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800cbce:	68f3      	ldr	r3, [r6, #12]
 800cbd0:	b183      	cbz	r3, 800cbf4 <_Balloc+0x50>
 800cbd2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800cbd4:	68db      	ldr	r3, [r3, #12]
 800cbd6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800cbda:	b9b8      	cbnz	r0, 800cc0c <_Balloc+0x68>
 800cbdc:	2101      	movs	r1, #1
 800cbde:	fa01 f605 	lsl.w	r6, r1, r5
 800cbe2:	1d72      	adds	r2, r6, #5
 800cbe4:	4620      	mov	r0, r4
 800cbe6:	0092      	lsls	r2, r2, #2
 800cbe8:	f000 fb5e 	bl	800d2a8 <_calloc_r>
 800cbec:	b160      	cbz	r0, 800cc08 <_Balloc+0x64>
 800cbee:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800cbf2:	e00e      	b.n	800cc12 <_Balloc+0x6e>
 800cbf4:	2221      	movs	r2, #33	; 0x21
 800cbf6:	2104      	movs	r1, #4
 800cbf8:	4620      	mov	r0, r4
 800cbfa:	f000 fb55 	bl	800d2a8 <_calloc_r>
 800cbfe:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800cc00:	60f0      	str	r0, [r6, #12]
 800cc02:	68db      	ldr	r3, [r3, #12]
 800cc04:	2b00      	cmp	r3, #0
 800cc06:	d1e4      	bne.n	800cbd2 <_Balloc+0x2e>
 800cc08:	2000      	movs	r0, #0
 800cc0a:	bd70      	pop	{r4, r5, r6, pc}
 800cc0c:	6802      	ldr	r2, [r0, #0]
 800cc0e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800cc12:	2300      	movs	r3, #0
 800cc14:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800cc18:	e7f7      	b.n	800cc0a <_Balloc+0x66>
 800cc1a:	bf00      	nop
 800cc1c:	0800e755 	.word	0x0800e755
 800cc20:	0800e7dc 	.word	0x0800e7dc

0800cc24 <_Bfree>:
 800cc24:	b570      	push	{r4, r5, r6, lr}
 800cc26:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800cc28:	4605      	mov	r5, r0
 800cc2a:	460c      	mov	r4, r1
 800cc2c:	b976      	cbnz	r6, 800cc4c <_Bfree+0x28>
 800cc2e:	2010      	movs	r0, #16
 800cc30:	f7ff ff94 	bl	800cb5c <malloc>
 800cc34:	4602      	mov	r2, r0
 800cc36:	6268      	str	r0, [r5, #36]	; 0x24
 800cc38:	b920      	cbnz	r0, 800cc44 <_Bfree+0x20>
 800cc3a:	218a      	movs	r1, #138	; 0x8a
 800cc3c:	4b08      	ldr	r3, [pc, #32]	; (800cc60 <_Bfree+0x3c>)
 800cc3e:	4809      	ldr	r0, [pc, #36]	; (800cc64 <_Bfree+0x40>)
 800cc40:	f000 fd52 	bl	800d6e8 <__assert_func>
 800cc44:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800cc48:	6006      	str	r6, [r0, #0]
 800cc4a:	60c6      	str	r6, [r0, #12]
 800cc4c:	b13c      	cbz	r4, 800cc5e <_Bfree+0x3a>
 800cc4e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800cc50:	6862      	ldr	r2, [r4, #4]
 800cc52:	68db      	ldr	r3, [r3, #12]
 800cc54:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800cc58:	6021      	str	r1, [r4, #0]
 800cc5a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800cc5e:	bd70      	pop	{r4, r5, r6, pc}
 800cc60:	0800e755 	.word	0x0800e755
 800cc64:	0800e7dc 	.word	0x0800e7dc

0800cc68 <__multadd>:
 800cc68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cc6c:	4698      	mov	r8, r3
 800cc6e:	460c      	mov	r4, r1
 800cc70:	2300      	movs	r3, #0
 800cc72:	690e      	ldr	r6, [r1, #16]
 800cc74:	4607      	mov	r7, r0
 800cc76:	f101 0014 	add.w	r0, r1, #20
 800cc7a:	6805      	ldr	r5, [r0, #0]
 800cc7c:	3301      	adds	r3, #1
 800cc7e:	b2a9      	uxth	r1, r5
 800cc80:	fb02 8101 	mla	r1, r2, r1, r8
 800cc84:	0c2d      	lsrs	r5, r5, #16
 800cc86:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 800cc8a:	fb02 c505 	mla	r5, r2, r5, ip
 800cc8e:	b289      	uxth	r1, r1
 800cc90:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 800cc94:	429e      	cmp	r6, r3
 800cc96:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800cc9a:	f840 1b04 	str.w	r1, [r0], #4
 800cc9e:	dcec      	bgt.n	800cc7a <__multadd+0x12>
 800cca0:	f1b8 0f00 	cmp.w	r8, #0
 800cca4:	d022      	beq.n	800ccec <__multadd+0x84>
 800cca6:	68a3      	ldr	r3, [r4, #8]
 800cca8:	42b3      	cmp	r3, r6
 800ccaa:	dc19      	bgt.n	800cce0 <__multadd+0x78>
 800ccac:	6861      	ldr	r1, [r4, #4]
 800ccae:	4638      	mov	r0, r7
 800ccb0:	3101      	adds	r1, #1
 800ccb2:	f7ff ff77 	bl	800cba4 <_Balloc>
 800ccb6:	4605      	mov	r5, r0
 800ccb8:	b928      	cbnz	r0, 800ccc6 <__multadd+0x5e>
 800ccba:	4602      	mov	r2, r0
 800ccbc:	21b5      	movs	r1, #181	; 0xb5
 800ccbe:	4b0d      	ldr	r3, [pc, #52]	; (800ccf4 <__multadd+0x8c>)
 800ccc0:	480d      	ldr	r0, [pc, #52]	; (800ccf8 <__multadd+0x90>)
 800ccc2:	f000 fd11 	bl	800d6e8 <__assert_func>
 800ccc6:	6922      	ldr	r2, [r4, #16]
 800ccc8:	f104 010c 	add.w	r1, r4, #12
 800cccc:	3202      	adds	r2, #2
 800ccce:	0092      	lsls	r2, r2, #2
 800ccd0:	300c      	adds	r0, #12
 800ccd2:	f7ff ff59 	bl	800cb88 <memcpy>
 800ccd6:	4621      	mov	r1, r4
 800ccd8:	4638      	mov	r0, r7
 800ccda:	f7ff ffa3 	bl	800cc24 <_Bfree>
 800ccde:	462c      	mov	r4, r5
 800cce0:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 800cce4:	3601      	adds	r6, #1
 800cce6:	f8c3 8014 	str.w	r8, [r3, #20]
 800ccea:	6126      	str	r6, [r4, #16]
 800ccec:	4620      	mov	r0, r4
 800ccee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ccf2:	bf00      	nop
 800ccf4:	0800e7cb 	.word	0x0800e7cb
 800ccf8:	0800e7dc 	.word	0x0800e7dc

0800ccfc <__hi0bits>:
 800ccfc:	0c02      	lsrs	r2, r0, #16
 800ccfe:	0412      	lsls	r2, r2, #16
 800cd00:	4603      	mov	r3, r0
 800cd02:	b9ca      	cbnz	r2, 800cd38 <__hi0bits+0x3c>
 800cd04:	0403      	lsls	r3, r0, #16
 800cd06:	2010      	movs	r0, #16
 800cd08:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800cd0c:	bf04      	itt	eq
 800cd0e:	021b      	lsleq	r3, r3, #8
 800cd10:	3008      	addeq	r0, #8
 800cd12:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800cd16:	bf04      	itt	eq
 800cd18:	011b      	lsleq	r3, r3, #4
 800cd1a:	3004      	addeq	r0, #4
 800cd1c:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800cd20:	bf04      	itt	eq
 800cd22:	009b      	lsleq	r3, r3, #2
 800cd24:	3002      	addeq	r0, #2
 800cd26:	2b00      	cmp	r3, #0
 800cd28:	db05      	blt.n	800cd36 <__hi0bits+0x3a>
 800cd2a:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 800cd2e:	f100 0001 	add.w	r0, r0, #1
 800cd32:	bf08      	it	eq
 800cd34:	2020      	moveq	r0, #32
 800cd36:	4770      	bx	lr
 800cd38:	2000      	movs	r0, #0
 800cd3a:	e7e5      	b.n	800cd08 <__hi0bits+0xc>

0800cd3c <__lo0bits>:
 800cd3c:	6803      	ldr	r3, [r0, #0]
 800cd3e:	4602      	mov	r2, r0
 800cd40:	f013 0007 	ands.w	r0, r3, #7
 800cd44:	d00b      	beq.n	800cd5e <__lo0bits+0x22>
 800cd46:	07d9      	lsls	r1, r3, #31
 800cd48:	d422      	bmi.n	800cd90 <__lo0bits+0x54>
 800cd4a:	0798      	lsls	r0, r3, #30
 800cd4c:	bf49      	itett	mi
 800cd4e:	085b      	lsrmi	r3, r3, #1
 800cd50:	089b      	lsrpl	r3, r3, #2
 800cd52:	2001      	movmi	r0, #1
 800cd54:	6013      	strmi	r3, [r2, #0]
 800cd56:	bf5c      	itt	pl
 800cd58:	2002      	movpl	r0, #2
 800cd5a:	6013      	strpl	r3, [r2, #0]
 800cd5c:	4770      	bx	lr
 800cd5e:	b299      	uxth	r1, r3
 800cd60:	b909      	cbnz	r1, 800cd66 <__lo0bits+0x2a>
 800cd62:	2010      	movs	r0, #16
 800cd64:	0c1b      	lsrs	r3, r3, #16
 800cd66:	f013 0fff 	tst.w	r3, #255	; 0xff
 800cd6a:	bf04      	itt	eq
 800cd6c:	0a1b      	lsreq	r3, r3, #8
 800cd6e:	3008      	addeq	r0, #8
 800cd70:	0719      	lsls	r1, r3, #28
 800cd72:	bf04      	itt	eq
 800cd74:	091b      	lsreq	r3, r3, #4
 800cd76:	3004      	addeq	r0, #4
 800cd78:	0799      	lsls	r1, r3, #30
 800cd7a:	bf04      	itt	eq
 800cd7c:	089b      	lsreq	r3, r3, #2
 800cd7e:	3002      	addeq	r0, #2
 800cd80:	07d9      	lsls	r1, r3, #31
 800cd82:	d403      	bmi.n	800cd8c <__lo0bits+0x50>
 800cd84:	085b      	lsrs	r3, r3, #1
 800cd86:	f100 0001 	add.w	r0, r0, #1
 800cd8a:	d003      	beq.n	800cd94 <__lo0bits+0x58>
 800cd8c:	6013      	str	r3, [r2, #0]
 800cd8e:	4770      	bx	lr
 800cd90:	2000      	movs	r0, #0
 800cd92:	4770      	bx	lr
 800cd94:	2020      	movs	r0, #32
 800cd96:	4770      	bx	lr

0800cd98 <__i2b>:
 800cd98:	b510      	push	{r4, lr}
 800cd9a:	460c      	mov	r4, r1
 800cd9c:	2101      	movs	r1, #1
 800cd9e:	f7ff ff01 	bl	800cba4 <_Balloc>
 800cda2:	4602      	mov	r2, r0
 800cda4:	b928      	cbnz	r0, 800cdb2 <__i2b+0x1a>
 800cda6:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800cdaa:	4b04      	ldr	r3, [pc, #16]	; (800cdbc <__i2b+0x24>)
 800cdac:	4804      	ldr	r0, [pc, #16]	; (800cdc0 <__i2b+0x28>)
 800cdae:	f000 fc9b 	bl	800d6e8 <__assert_func>
 800cdb2:	2301      	movs	r3, #1
 800cdb4:	6144      	str	r4, [r0, #20]
 800cdb6:	6103      	str	r3, [r0, #16]
 800cdb8:	bd10      	pop	{r4, pc}
 800cdba:	bf00      	nop
 800cdbc:	0800e7cb 	.word	0x0800e7cb
 800cdc0:	0800e7dc 	.word	0x0800e7dc

0800cdc4 <__multiply>:
 800cdc4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cdc8:	4614      	mov	r4, r2
 800cdca:	690a      	ldr	r2, [r1, #16]
 800cdcc:	6923      	ldr	r3, [r4, #16]
 800cdce:	460d      	mov	r5, r1
 800cdd0:	429a      	cmp	r2, r3
 800cdd2:	bfbe      	ittt	lt
 800cdd4:	460b      	movlt	r3, r1
 800cdd6:	4625      	movlt	r5, r4
 800cdd8:	461c      	movlt	r4, r3
 800cdda:	f8d5 a010 	ldr.w	sl, [r5, #16]
 800cdde:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800cde2:	68ab      	ldr	r3, [r5, #8]
 800cde4:	6869      	ldr	r1, [r5, #4]
 800cde6:	eb0a 0709 	add.w	r7, sl, r9
 800cdea:	42bb      	cmp	r3, r7
 800cdec:	b085      	sub	sp, #20
 800cdee:	bfb8      	it	lt
 800cdf0:	3101      	addlt	r1, #1
 800cdf2:	f7ff fed7 	bl	800cba4 <_Balloc>
 800cdf6:	b930      	cbnz	r0, 800ce06 <__multiply+0x42>
 800cdf8:	4602      	mov	r2, r0
 800cdfa:	f240 115d 	movw	r1, #349	; 0x15d
 800cdfe:	4b41      	ldr	r3, [pc, #260]	; (800cf04 <__multiply+0x140>)
 800ce00:	4841      	ldr	r0, [pc, #260]	; (800cf08 <__multiply+0x144>)
 800ce02:	f000 fc71 	bl	800d6e8 <__assert_func>
 800ce06:	f100 0614 	add.w	r6, r0, #20
 800ce0a:	4633      	mov	r3, r6
 800ce0c:	2200      	movs	r2, #0
 800ce0e:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 800ce12:	4543      	cmp	r3, r8
 800ce14:	d31e      	bcc.n	800ce54 <__multiply+0x90>
 800ce16:	f105 0c14 	add.w	ip, r5, #20
 800ce1a:	f104 0314 	add.w	r3, r4, #20
 800ce1e:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 800ce22:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 800ce26:	9202      	str	r2, [sp, #8]
 800ce28:	ebac 0205 	sub.w	r2, ip, r5
 800ce2c:	3a15      	subs	r2, #21
 800ce2e:	f022 0203 	bic.w	r2, r2, #3
 800ce32:	3204      	adds	r2, #4
 800ce34:	f105 0115 	add.w	r1, r5, #21
 800ce38:	458c      	cmp	ip, r1
 800ce3a:	bf38      	it	cc
 800ce3c:	2204      	movcc	r2, #4
 800ce3e:	9201      	str	r2, [sp, #4]
 800ce40:	9a02      	ldr	r2, [sp, #8]
 800ce42:	9303      	str	r3, [sp, #12]
 800ce44:	429a      	cmp	r2, r3
 800ce46:	d808      	bhi.n	800ce5a <__multiply+0x96>
 800ce48:	2f00      	cmp	r7, #0
 800ce4a:	dc55      	bgt.n	800cef8 <__multiply+0x134>
 800ce4c:	6107      	str	r7, [r0, #16]
 800ce4e:	b005      	add	sp, #20
 800ce50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ce54:	f843 2b04 	str.w	r2, [r3], #4
 800ce58:	e7db      	b.n	800ce12 <__multiply+0x4e>
 800ce5a:	f8b3 a000 	ldrh.w	sl, [r3]
 800ce5e:	f1ba 0f00 	cmp.w	sl, #0
 800ce62:	d020      	beq.n	800cea6 <__multiply+0xe2>
 800ce64:	46b1      	mov	r9, r6
 800ce66:	2200      	movs	r2, #0
 800ce68:	f105 0e14 	add.w	lr, r5, #20
 800ce6c:	f85e 4b04 	ldr.w	r4, [lr], #4
 800ce70:	f8d9 b000 	ldr.w	fp, [r9]
 800ce74:	b2a1      	uxth	r1, r4
 800ce76:	fa1f fb8b 	uxth.w	fp, fp
 800ce7a:	fb0a b101 	mla	r1, sl, r1, fp
 800ce7e:	4411      	add	r1, r2
 800ce80:	f8d9 2000 	ldr.w	r2, [r9]
 800ce84:	0c24      	lsrs	r4, r4, #16
 800ce86:	0c12      	lsrs	r2, r2, #16
 800ce88:	fb0a 2404 	mla	r4, sl, r4, r2
 800ce8c:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 800ce90:	b289      	uxth	r1, r1
 800ce92:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800ce96:	45f4      	cmp	ip, lr
 800ce98:	ea4f 4214 	mov.w	r2, r4, lsr #16
 800ce9c:	f849 1b04 	str.w	r1, [r9], #4
 800cea0:	d8e4      	bhi.n	800ce6c <__multiply+0xa8>
 800cea2:	9901      	ldr	r1, [sp, #4]
 800cea4:	5072      	str	r2, [r6, r1]
 800cea6:	9a03      	ldr	r2, [sp, #12]
 800cea8:	3304      	adds	r3, #4
 800ceaa:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800ceae:	f1b9 0f00 	cmp.w	r9, #0
 800ceb2:	d01f      	beq.n	800cef4 <__multiply+0x130>
 800ceb4:	46b6      	mov	lr, r6
 800ceb6:	f04f 0a00 	mov.w	sl, #0
 800ceba:	6834      	ldr	r4, [r6, #0]
 800cebc:	f105 0114 	add.w	r1, r5, #20
 800cec0:	880a      	ldrh	r2, [r1, #0]
 800cec2:	f8be b002 	ldrh.w	fp, [lr, #2]
 800cec6:	b2a4      	uxth	r4, r4
 800cec8:	fb09 b202 	mla	r2, r9, r2, fp
 800cecc:	4492      	add	sl, r2
 800cece:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800ced2:	f84e 4b04 	str.w	r4, [lr], #4
 800ced6:	f851 4b04 	ldr.w	r4, [r1], #4
 800ceda:	f8be 2000 	ldrh.w	r2, [lr]
 800cede:	0c24      	lsrs	r4, r4, #16
 800cee0:	fb09 2404 	mla	r4, r9, r4, r2
 800cee4:	458c      	cmp	ip, r1
 800cee6:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 800ceea:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800ceee:	d8e7      	bhi.n	800cec0 <__multiply+0xfc>
 800cef0:	9a01      	ldr	r2, [sp, #4]
 800cef2:	50b4      	str	r4, [r6, r2]
 800cef4:	3604      	adds	r6, #4
 800cef6:	e7a3      	b.n	800ce40 <__multiply+0x7c>
 800cef8:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800cefc:	2b00      	cmp	r3, #0
 800cefe:	d1a5      	bne.n	800ce4c <__multiply+0x88>
 800cf00:	3f01      	subs	r7, #1
 800cf02:	e7a1      	b.n	800ce48 <__multiply+0x84>
 800cf04:	0800e7cb 	.word	0x0800e7cb
 800cf08:	0800e7dc 	.word	0x0800e7dc

0800cf0c <__pow5mult>:
 800cf0c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cf10:	4615      	mov	r5, r2
 800cf12:	f012 0203 	ands.w	r2, r2, #3
 800cf16:	4606      	mov	r6, r0
 800cf18:	460f      	mov	r7, r1
 800cf1a:	d007      	beq.n	800cf2c <__pow5mult+0x20>
 800cf1c:	4c25      	ldr	r4, [pc, #148]	; (800cfb4 <__pow5mult+0xa8>)
 800cf1e:	3a01      	subs	r2, #1
 800cf20:	2300      	movs	r3, #0
 800cf22:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800cf26:	f7ff fe9f 	bl	800cc68 <__multadd>
 800cf2a:	4607      	mov	r7, r0
 800cf2c:	10ad      	asrs	r5, r5, #2
 800cf2e:	d03d      	beq.n	800cfac <__pow5mult+0xa0>
 800cf30:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800cf32:	b97c      	cbnz	r4, 800cf54 <__pow5mult+0x48>
 800cf34:	2010      	movs	r0, #16
 800cf36:	f7ff fe11 	bl	800cb5c <malloc>
 800cf3a:	4602      	mov	r2, r0
 800cf3c:	6270      	str	r0, [r6, #36]	; 0x24
 800cf3e:	b928      	cbnz	r0, 800cf4c <__pow5mult+0x40>
 800cf40:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800cf44:	4b1c      	ldr	r3, [pc, #112]	; (800cfb8 <__pow5mult+0xac>)
 800cf46:	481d      	ldr	r0, [pc, #116]	; (800cfbc <__pow5mult+0xb0>)
 800cf48:	f000 fbce 	bl	800d6e8 <__assert_func>
 800cf4c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800cf50:	6004      	str	r4, [r0, #0]
 800cf52:	60c4      	str	r4, [r0, #12]
 800cf54:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800cf58:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800cf5c:	b94c      	cbnz	r4, 800cf72 <__pow5mult+0x66>
 800cf5e:	f240 2171 	movw	r1, #625	; 0x271
 800cf62:	4630      	mov	r0, r6
 800cf64:	f7ff ff18 	bl	800cd98 <__i2b>
 800cf68:	2300      	movs	r3, #0
 800cf6a:	4604      	mov	r4, r0
 800cf6c:	f8c8 0008 	str.w	r0, [r8, #8]
 800cf70:	6003      	str	r3, [r0, #0]
 800cf72:	f04f 0900 	mov.w	r9, #0
 800cf76:	07eb      	lsls	r3, r5, #31
 800cf78:	d50a      	bpl.n	800cf90 <__pow5mult+0x84>
 800cf7a:	4639      	mov	r1, r7
 800cf7c:	4622      	mov	r2, r4
 800cf7e:	4630      	mov	r0, r6
 800cf80:	f7ff ff20 	bl	800cdc4 <__multiply>
 800cf84:	4680      	mov	r8, r0
 800cf86:	4639      	mov	r1, r7
 800cf88:	4630      	mov	r0, r6
 800cf8a:	f7ff fe4b 	bl	800cc24 <_Bfree>
 800cf8e:	4647      	mov	r7, r8
 800cf90:	106d      	asrs	r5, r5, #1
 800cf92:	d00b      	beq.n	800cfac <__pow5mult+0xa0>
 800cf94:	6820      	ldr	r0, [r4, #0]
 800cf96:	b938      	cbnz	r0, 800cfa8 <__pow5mult+0x9c>
 800cf98:	4622      	mov	r2, r4
 800cf9a:	4621      	mov	r1, r4
 800cf9c:	4630      	mov	r0, r6
 800cf9e:	f7ff ff11 	bl	800cdc4 <__multiply>
 800cfa2:	6020      	str	r0, [r4, #0]
 800cfa4:	f8c0 9000 	str.w	r9, [r0]
 800cfa8:	4604      	mov	r4, r0
 800cfaa:	e7e4      	b.n	800cf76 <__pow5mult+0x6a>
 800cfac:	4638      	mov	r0, r7
 800cfae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cfb2:	bf00      	nop
 800cfb4:	0800e930 	.word	0x0800e930
 800cfb8:	0800e755 	.word	0x0800e755
 800cfbc:	0800e7dc 	.word	0x0800e7dc

0800cfc0 <__lshift>:
 800cfc0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cfc4:	460c      	mov	r4, r1
 800cfc6:	4607      	mov	r7, r0
 800cfc8:	4691      	mov	r9, r2
 800cfca:	6923      	ldr	r3, [r4, #16]
 800cfcc:	6849      	ldr	r1, [r1, #4]
 800cfce:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800cfd2:	68a3      	ldr	r3, [r4, #8]
 800cfd4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800cfd8:	f108 0601 	add.w	r6, r8, #1
 800cfdc:	42b3      	cmp	r3, r6
 800cfde:	db0b      	blt.n	800cff8 <__lshift+0x38>
 800cfe0:	4638      	mov	r0, r7
 800cfe2:	f7ff fddf 	bl	800cba4 <_Balloc>
 800cfe6:	4605      	mov	r5, r0
 800cfe8:	b948      	cbnz	r0, 800cffe <__lshift+0x3e>
 800cfea:	4602      	mov	r2, r0
 800cfec:	f240 11d9 	movw	r1, #473	; 0x1d9
 800cff0:	4b27      	ldr	r3, [pc, #156]	; (800d090 <__lshift+0xd0>)
 800cff2:	4828      	ldr	r0, [pc, #160]	; (800d094 <__lshift+0xd4>)
 800cff4:	f000 fb78 	bl	800d6e8 <__assert_func>
 800cff8:	3101      	adds	r1, #1
 800cffa:	005b      	lsls	r3, r3, #1
 800cffc:	e7ee      	b.n	800cfdc <__lshift+0x1c>
 800cffe:	2300      	movs	r3, #0
 800d000:	f100 0114 	add.w	r1, r0, #20
 800d004:	f100 0210 	add.w	r2, r0, #16
 800d008:	4618      	mov	r0, r3
 800d00a:	4553      	cmp	r3, sl
 800d00c:	db33      	blt.n	800d076 <__lshift+0xb6>
 800d00e:	6920      	ldr	r0, [r4, #16]
 800d010:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800d014:	f104 0314 	add.w	r3, r4, #20
 800d018:	f019 091f 	ands.w	r9, r9, #31
 800d01c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800d020:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800d024:	d02b      	beq.n	800d07e <__lshift+0xbe>
 800d026:	468a      	mov	sl, r1
 800d028:	2200      	movs	r2, #0
 800d02a:	f1c9 0e20 	rsb	lr, r9, #32
 800d02e:	6818      	ldr	r0, [r3, #0]
 800d030:	fa00 f009 	lsl.w	r0, r0, r9
 800d034:	4302      	orrs	r2, r0
 800d036:	f84a 2b04 	str.w	r2, [sl], #4
 800d03a:	f853 2b04 	ldr.w	r2, [r3], #4
 800d03e:	459c      	cmp	ip, r3
 800d040:	fa22 f20e 	lsr.w	r2, r2, lr
 800d044:	d8f3      	bhi.n	800d02e <__lshift+0x6e>
 800d046:	ebac 0304 	sub.w	r3, ip, r4
 800d04a:	3b15      	subs	r3, #21
 800d04c:	f023 0303 	bic.w	r3, r3, #3
 800d050:	3304      	adds	r3, #4
 800d052:	f104 0015 	add.w	r0, r4, #21
 800d056:	4584      	cmp	ip, r0
 800d058:	bf38      	it	cc
 800d05a:	2304      	movcc	r3, #4
 800d05c:	50ca      	str	r2, [r1, r3]
 800d05e:	b10a      	cbz	r2, 800d064 <__lshift+0xa4>
 800d060:	f108 0602 	add.w	r6, r8, #2
 800d064:	3e01      	subs	r6, #1
 800d066:	4638      	mov	r0, r7
 800d068:	4621      	mov	r1, r4
 800d06a:	612e      	str	r6, [r5, #16]
 800d06c:	f7ff fdda 	bl	800cc24 <_Bfree>
 800d070:	4628      	mov	r0, r5
 800d072:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d076:	f842 0f04 	str.w	r0, [r2, #4]!
 800d07a:	3301      	adds	r3, #1
 800d07c:	e7c5      	b.n	800d00a <__lshift+0x4a>
 800d07e:	3904      	subs	r1, #4
 800d080:	f853 2b04 	ldr.w	r2, [r3], #4
 800d084:	459c      	cmp	ip, r3
 800d086:	f841 2f04 	str.w	r2, [r1, #4]!
 800d08a:	d8f9      	bhi.n	800d080 <__lshift+0xc0>
 800d08c:	e7ea      	b.n	800d064 <__lshift+0xa4>
 800d08e:	bf00      	nop
 800d090:	0800e7cb 	.word	0x0800e7cb
 800d094:	0800e7dc 	.word	0x0800e7dc

0800d098 <__mcmp>:
 800d098:	4603      	mov	r3, r0
 800d09a:	690a      	ldr	r2, [r1, #16]
 800d09c:	6900      	ldr	r0, [r0, #16]
 800d09e:	b530      	push	{r4, r5, lr}
 800d0a0:	1a80      	subs	r0, r0, r2
 800d0a2:	d10d      	bne.n	800d0c0 <__mcmp+0x28>
 800d0a4:	3314      	adds	r3, #20
 800d0a6:	3114      	adds	r1, #20
 800d0a8:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800d0ac:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800d0b0:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800d0b4:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800d0b8:	4295      	cmp	r5, r2
 800d0ba:	d002      	beq.n	800d0c2 <__mcmp+0x2a>
 800d0bc:	d304      	bcc.n	800d0c8 <__mcmp+0x30>
 800d0be:	2001      	movs	r0, #1
 800d0c0:	bd30      	pop	{r4, r5, pc}
 800d0c2:	42a3      	cmp	r3, r4
 800d0c4:	d3f4      	bcc.n	800d0b0 <__mcmp+0x18>
 800d0c6:	e7fb      	b.n	800d0c0 <__mcmp+0x28>
 800d0c8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d0cc:	e7f8      	b.n	800d0c0 <__mcmp+0x28>
	...

0800d0d0 <__mdiff>:
 800d0d0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d0d4:	460c      	mov	r4, r1
 800d0d6:	4606      	mov	r6, r0
 800d0d8:	4611      	mov	r1, r2
 800d0da:	4620      	mov	r0, r4
 800d0dc:	4692      	mov	sl, r2
 800d0de:	f7ff ffdb 	bl	800d098 <__mcmp>
 800d0e2:	1e05      	subs	r5, r0, #0
 800d0e4:	d111      	bne.n	800d10a <__mdiff+0x3a>
 800d0e6:	4629      	mov	r1, r5
 800d0e8:	4630      	mov	r0, r6
 800d0ea:	f7ff fd5b 	bl	800cba4 <_Balloc>
 800d0ee:	4602      	mov	r2, r0
 800d0f0:	b928      	cbnz	r0, 800d0fe <__mdiff+0x2e>
 800d0f2:	f240 2132 	movw	r1, #562	; 0x232
 800d0f6:	4b3c      	ldr	r3, [pc, #240]	; (800d1e8 <__mdiff+0x118>)
 800d0f8:	483c      	ldr	r0, [pc, #240]	; (800d1ec <__mdiff+0x11c>)
 800d0fa:	f000 faf5 	bl	800d6e8 <__assert_func>
 800d0fe:	2301      	movs	r3, #1
 800d100:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800d104:	4610      	mov	r0, r2
 800d106:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d10a:	bfa4      	itt	ge
 800d10c:	4653      	movge	r3, sl
 800d10e:	46a2      	movge	sl, r4
 800d110:	4630      	mov	r0, r6
 800d112:	f8da 1004 	ldr.w	r1, [sl, #4]
 800d116:	bfa6      	itte	ge
 800d118:	461c      	movge	r4, r3
 800d11a:	2500      	movge	r5, #0
 800d11c:	2501      	movlt	r5, #1
 800d11e:	f7ff fd41 	bl	800cba4 <_Balloc>
 800d122:	4602      	mov	r2, r0
 800d124:	b918      	cbnz	r0, 800d12e <__mdiff+0x5e>
 800d126:	f44f 7110 	mov.w	r1, #576	; 0x240
 800d12a:	4b2f      	ldr	r3, [pc, #188]	; (800d1e8 <__mdiff+0x118>)
 800d12c:	e7e4      	b.n	800d0f8 <__mdiff+0x28>
 800d12e:	f100 0814 	add.w	r8, r0, #20
 800d132:	f8da 7010 	ldr.w	r7, [sl, #16]
 800d136:	60c5      	str	r5, [r0, #12]
 800d138:	f04f 0c00 	mov.w	ip, #0
 800d13c:	f10a 0514 	add.w	r5, sl, #20
 800d140:	f10a 0010 	add.w	r0, sl, #16
 800d144:	46c2      	mov	sl, r8
 800d146:	6926      	ldr	r6, [r4, #16]
 800d148:	f104 0914 	add.w	r9, r4, #20
 800d14c:	eb05 0e87 	add.w	lr, r5, r7, lsl #2
 800d150:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800d154:	f850 bf04 	ldr.w	fp, [r0, #4]!
 800d158:	f859 3b04 	ldr.w	r3, [r9], #4
 800d15c:	fa1f f18b 	uxth.w	r1, fp
 800d160:	4461      	add	r1, ip
 800d162:	fa1f fc83 	uxth.w	ip, r3
 800d166:	0c1b      	lsrs	r3, r3, #16
 800d168:	eba1 010c 	sub.w	r1, r1, ip
 800d16c:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800d170:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800d174:	b289      	uxth	r1, r1
 800d176:	ea4f 4c23 	mov.w	ip, r3, asr #16
 800d17a:	454e      	cmp	r6, r9
 800d17c:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800d180:	f84a 3b04 	str.w	r3, [sl], #4
 800d184:	d8e6      	bhi.n	800d154 <__mdiff+0x84>
 800d186:	1b33      	subs	r3, r6, r4
 800d188:	3b15      	subs	r3, #21
 800d18a:	f023 0303 	bic.w	r3, r3, #3
 800d18e:	3415      	adds	r4, #21
 800d190:	3304      	adds	r3, #4
 800d192:	42a6      	cmp	r6, r4
 800d194:	bf38      	it	cc
 800d196:	2304      	movcc	r3, #4
 800d198:	441d      	add	r5, r3
 800d19a:	4443      	add	r3, r8
 800d19c:	461e      	mov	r6, r3
 800d19e:	462c      	mov	r4, r5
 800d1a0:	4574      	cmp	r4, lr
 800d1a2:	d30e      	bcc.n	800d1c2 <__mdiff+0xf2>
 800d1a4:	f10e 0103 	add.w	r1, lr, #3
 800d1a8:	1b49      	subs	r1, r1, r5
 800d1aa:	f021 0103 	bic.w	r1, r1, #3
 800d1ae:	3d03      	subs	r5, #3
 800d1b0:	45ae      	cmp	lr, r5
 800d1b2:	bf38      	it	cc
 800d1b4:	2100      	movcc	r1, #0
 800d1b6:	4419      	add	r1, r3
 800d1b8:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 800d1bc:	b18b      	cbz	r3, 800d1e2 <__mdiff+0x112>
 800d1be:	6117      	str	r7, [r2, #16]
 800d1c0:	e7a0      	b.n	800d104 <__mdiff+0x34>
 800d1c2:	f854 8b04 	ldr.w	r8, [r4], #4
 800d1c6:	fa1f f188 	uxth.w	r1, r8
 800d1ca:	4461      	add	r1, ip
 800d1cc:	1408      	asrs	r0, r1, #16
 800d1ce:	eb00 4018 	add.w	r0, r0, r8, lsr #16
 800d1d2:	b289      	uxth	r1, r1
 800d1d4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800d1d8:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800d1dc:	f846 1b04 	str.w	r1, [r6], #4
 800d1e0:	e7de      	b.n	800d1a0 <__mdiff+0xd0>
 800d1e2:	3f01      	subs	r7, #1
 800d1e4:	e7e8      	b.n	800d1b8 <__mdiff+0xe8>
 800d1e6:	bf00      	nop
 800d1e8:	0800e7cb 	.word	0x0800e7cb
 800d1ec:	0800e7dc 	.word	0x0800e7dc

0800d1f0 <__d2b>:
 800d1f0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800d1f4:	2101      	movs	r1, #1
 800d1f6:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 800d1fa:	4690      	mov	r8, r2
 800d1fc:	461d      	mov	r5, r3
 800d1fe:	f7ff fcd1 	bl	800cba4 <_Balloc>
 800d202:	4604      	mov	r4, r0
 800d204:	b930      	cbnz	r0, 800d214 <__d2b+0x24>
 800d206:	4602      	mov	r2, r0
 800d208:	f240 310a 	movw	r1, #778	; 0x30a
 800d20c:	4b24      	ldr	r3, [pc, #144]	; (800d2a0 <__d2b+0xb0>)
 800d20e:	4825      	ldr	r0, [pc, #148]	; (800d2a4 <__d2b+0xb4>)
 800d210:	f000 fa6a 	bl	800d6e8 <__assert_func>
 800d214:	f3c5 0313 	ubfx	r3, r5, #0, #20
 800d218:	f3c5 550a 	ubfx	r5, r5, #20, #11
 800d21c:	bb2d      	cbnz	r5, 800d26a <__d2b+0x7a>
 800d21e:	9301      	str	r3, [sp, #4]
 800d220:	f1b8 0300 	subs.w	r3, r8, #0
 800d224:	d026      	beq.n	800d274 <__d2b+0x84>
 800d226:	4668      	mov	r0, sp
 800d228:	9300      	str	r3, [sp, #0]
 800d22a:	f7ff fd87 	bl	800cd3c <__lo0bits>
 800d22e:	9900      	ldr	r1, [sp, #0]
 800d230:	b1f0      	cbz	r0, 800d270 <__d2b+0x80>
 800d232:	9a01      	ldr	r2, [sp, #4]
 800d234:	f1c0 0320 	rsb	r3, r0, #32
 800d238:	fa02 f303 	lsl.w	r3, r2, r3
 800d23c:	430b      	orrs	r3, r1
 800d23e:	40c2      	lsrs	r2, r0
 800d240:	6163      	str	r3, [r4, #20]
 800d242:	9201      	str	r2, [sp, #4]
 800d244:	9b01      	ldr	r3, [sp, #4]
 800d246:	2b00      	cmp	r3, #0
 800d248:	bf14      	ite	ne
 800d24a:	2102      	movne	r1, #2
 800d24c:	2101      	moveq	r1, #1
 800d24e:	61a3      	str	r3, [r4, #24]
 800d250:	6121      	str	r1, [r4, #16]
 800d252:	b1c5      	cbz	r5, 800d286 <__d2b+0x96>
 800d254:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800d258:	4405      	add	r5, r0
 800d25a:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800d25e:	603d      	str	r5, [r7, #0]
 800d260:	6030      	str	r0, [r6, #0]
 800d262:	4620      	mov	r0, r4
 800d264:	b002      	add	sp, #8
 800d266:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d26a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800d26e:	e7d6      	b.n	800d21e <__d2b+0x2e>
 800d270:	6161      	str	r1, [r4, #20]
 800d272:	e7e7      	b.n	800d244 <__d2b+0x54>
 800d274:	a801      	add	r0, sp, #4
 800d276:	f7ff fd61 	bl	800cd3c <__lo0bits>
 800d27a:	2101      	movs	r1, #1
 800d27c:	9b01      	ldr	r3, [sp, #4]
 800d27e:	6121      	str	r1, [r4, #16]
 800d280:	6163      	str	r3, [r4, #20]
 800d282:	3020      	adds	r0, #32
 800d284:	e7e5      	b.n	800d252 <__d2b+0x62>
 800d286:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 800d28a:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800d28e:	6038      	str	r0, [r7, #0]
 800d290:	6918      	ldr	r0, [r3, #16]
 800d292:	f7ff fd33 	bl	800ccfc <__hi0bits>
 800d296:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 800d29a:	6031      	str	r1, [r6, #0]
 800d29c:	e7e1      	b.n	800d262 <__d2b+0x72>
 800d29e:	bf00      	nop
 800d2a0:	0800e7cb 	.word	0x0800e7cb
 800d2a4:	0800e7dc 	.word	0x0800e7dc

0800d2a8 <_calloc_r>:
 800d2a8:	b538      	push	{r3, r4, r5, lr}
 800d2aa:	fb02 f501 	mul.w	r5, r2, r1
 800d2ae:	4629      	mov	r1, r5
 800d2b0:	f000 f854 	bl	800d35c <_malloc_r>
 800d2b4:	4604      	mov	r4, r0
 800d2b6:	b118      	cbz	r0, 800d2c0 <_calloc_r+0x18>
 800d2b8:	462a      	mov	r2, r5
 800d2ba:	2100      	movs	r1, #0
 800d2bc:	f7fe f8e4 	bl	800b488 <memset>
 800d2c0:	4620      	mov	r0, r4
 800d2c2:	bd38      	pop	{r3, r4, r5, pc}

0800d2c4 <_free_r>:
 800d2c4:	b538      	push	{r3, r4, r5, lr}
 800d2c6:	4605      	mov	r5, r0
 800d2c8:	2900      	cmp	r1, #0
 800d2ca:	d043      	beq.n	800d354 <_free_r+0x90>
 800d2cc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d2d0:	1f0c      	subs	r4, r1, #4
 800d2d2:	2b00      	cmp	r3, #0
 800d2d4:	bfb8      	it	lt
 800d2d6:	18e4      	addlt	r4, r4, r3
 800d2d8:	f000 fa62 	bl	800d7a0 <__malloc_lock>
 800d2dc:	4a1e      	ldr	r2, [pc, #120]	; (800d358 <_free_r+0x94>)
 800d2de:	6813      	ldr	r3, [r2, #0]
 800d2e0:	4610      	mov	r0, r2
 800d2e2:	b933      	cbnz	r3, 800d2f2 <_free_r+0x2e>
 800d2e4:	6063      	str	r3, [r4, #4]
 800d2e6:	6014      	str	r4, [r2, #0]
 800d2e8:	4628      	mov	r0, r5
 800d2ea:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d2ee:	f000 ba5d 	b.w	800d7ac <__malloc_unlock>
 800d2f2:	42a3      	cmp	r3, r4
 800d2f4:	d90a      	bls.n	800d30c <_free_r+0x48>
 800d2f6:	6821      	ldr	r1, [r4, #0]
 800d2f8:	1862      	adds	r2, r4, r1
 800d2fa:	4293      	cmp	r3, r2
 800d2fc:	bf01      	itttt	eq
 800d2fe:	681a      	ldreq	r2, [r3, #0]
 800d300:	685b      	ldreq	r3, [r3, #4]
 800d302:	1852      	addeq	r2, r2, r1
 800d304:	6022      	streq	r2, [r4, #0]
 800d306:	6063      	str	r3, [r4, #4]
 800d308:	6004      	str	r4, [r0, #0]
 800d30a:	e7ed      	b.n	800d2e8 <_free_r+0x24>
 800d30c:	461a      	mov	r2, r3
 800d30e:	685b      	ldr	r3, [r3, #4]
 800d310:	b10b      	cbz	r3, 800d316 <_free_r+0x52>
 800d312:	42a3      	cmp	r3, r4
 800d314:	d9fa      	bls.n	800d30c <_free_r+0x48>
 800d316:	6811      	ldr	r1, [r2, #0]
 800d318:	1850      	adds	r0, r2, r1
 800d31a:	42a0      	cmp	r0, r4
 800d31c:	d10b      	bne.n	800d336 <_free_r+0x72>
 800d31e:	6820      	ldr	r0, [r4, #0]
 800d320:	4401      	add	r1, r0
 800d322:	1850      	adds	r0, r2, r1
 800d324:	4283      	cmp	r3, r0
 800d326:	6011      	str	r1, [r2, #0]
 800d328:	d1de      	bne.n	800d2e8 <_free_r+0x24>
 800d32a:	6818      	ldr	r0, [r3, #0]
 800d32c:	685b      	ldr	r3, [r3, #4]
 800d32e:	4401      	add	r1, r0
 800d330:	6011      	str	r1, [r2, #0]
 800d332:	6053      	str	r3, [r2, #4]
 800d334:	e7d8      	b.n	800d2e8 <_free_r+0x24>
 800d336:	d902      	bls.n	800d33e <_free_r+0x7a>
 800d338:	230c      	movs	r3, #12
 800d33a:	602b      	str	r3, [r5, #0]
 800d33c:	e7d4      	b.n	800d2e8 <_free_r+0x24>
 800d33e:	6820      	ldr	r0, [r4, #0]
 800d340:	1821      	adds	r1, r4, r0
 800d342:	428b      	cmp	r3, r1
 800d344:	bf01      	itttt	eq
 800d346:	6819      	ldreq	r1, [r3, #0]
 800d348:	685b      	ldreq	r3, [r3, #4]
 800d34a:	1809      	addeq	r1, r1, r0
 800d34c:	6021      	streq	r1, [r4, #0]
 800d34e:	6063      	str	r3, [r4, #4]
 800d350:	6054      	str	r4, [r2, #4]
 800d352:	e7c9      	b.n	800d2e8 <_free_r+0x24>
 800d354:	bd38      	pop	{r3, r4, r5, pc}
 800d356:	bf00      	nop
 800d358:	200002f0 	.word	0x200002f0

0800d35c <_malloc_r>:
 800d35c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d35e:	1ccd      	adds	r5, r1, #3
 800d360:	f025 0503 	bic.w	r5, r5, #3
 800d364:	3508      	adds	r5, #8
 800d366:	2d0c      	cmp	r5, #12
 800d368:	bf38      	it	cc
 800d36a:	250c      	movcc	r5, #12
 800d36c:	2d00      	cmp	r5, #0
 800d36e:	4606      	mov	r6, r0
 800d370:	db01      	blt.n	800d376 <_malloc_r+0x1a>
 800d372:	42a9      	cmp	r1, r5
 800d374:	d903      	bls.n	800d37e <_malloc_r+0x22>
 800d376:	230c      	movs	r3, #12
 800d378:	6033      	str	r3, [r6, #0]
 800d37a:	2000      	movs	r0, #0
 800d37c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d37e:	f000 fa0f 	bl	800d7a0 <__malloc_lock>
 800d382:	4921      	ldr	r1, [pc, #132]	; (800d408 <_malloc_r+0xac>)
 800d384:	680a      	ldr	r2, [r1, #0]
 800d386:	4614      	mov	r4, r2
 800d388:	b99c      	cbnz	r4, 800d3b2 <_malloc_r+0x56>
 800d38a:	4f20      	ldr	r7, [pc, #128]	; (800d40c <_malloc_r+0xb0>)
 800d38c:	683b      	ldr	r3, [r7, #0]
 800d38e:	b923      	cbnz	r3, 800d39a <_malloc_r+0x3e>
 800d390:	4621      	mov	r1, r4
 800d392:	4630      	mov	r0, r6
 800d394:	f000 f998 	bl	800d6c8 <_sbrk_r>
 800d398:	6038      	str	r0, [r7, #0]
 800d39a:	4629      	mov	r1, r5
 800d39c:	4630      	mov	r0, r6
 800d39e:	f000 f993 	bl	800d6c8 <_sbrk_r>
 800d3a2:	1c43      	adds	r3, r0, #1
 800d3a4:	d123      	bne.n	800d3ee <_malloc_r+0x92>
 800d3a6:	230c      	movs	r3, #12
 800d3a8:	4630      	mov	r0, r6
 800d3aa:	6033      	str	r3, [r6, #0]
 800d3ac:	f000 f9fe 	bl	800d7ac <__malloc_unlock>
 800d3b0:	e7e3      	b.n	800d37a <_malloc_r+0x1e>
 800d3b2:	6823      	ldr	r3, [r4, #0]
 800d3b4:	1b5b      	subs	r3, r3, r5
 800d3b6:	d417      	bmi.n	800d3e8 <_malloc_r+0x8c>
 800d3b8:	2b0b      	cmp	r3, #11
 800d3ba:	d903      	bls.n	800d3c4 <_malloc_r+0x68>
 800d3bc:	6023      	str	r3, [r4, #0]
 800d3be:	441c      	add	r4, r3
 800d3c0:	6025      	str	r5, [r4, #0]
 800d3c2:	e004      	b.n	800d3ce <_malloc_r+0x72>
 800d3c4:	6863      	ldr	r3, [r4, #4]
 800d3c6:	42a2      	cmp	r2, r4
 800d3c8:	bf0c      	ite	eq
 800d3ca:	600b      	streq	r3, [r1, #0]
 800d3cc:	6053      	strne	r3, [r2, #4]
 800d3ce:	4630      	mov	r0, r6
 800d3d0:	f000 f9ec 	bl	800d7ac <__malloc_unlock>
 800d3d4:	f104 000b 	add.w	r0, r4, #11
 800d3d8:	1d23      	adds	r3, r4, #4
 800d3da:	f020 0007 	bic.w	r0, r0, #7
 800d3de:	1ac2      	subs	r2, r0, r3
 800d3e0:	d0cc      	beq.n	800d37c <_malloc_r+0x20>
 800d3e2:	1a1b      	subs	r3, r3, r0
 800d3e4:	50a3      	str	r3, [r4, r2]
 800d3e6:	e7c9      	b.n	800d37c <_malloc_r+0x20>
 800d3e8:	4622      	mov	r2, r4
 800d3ea:	6864      	ldr	r4, [r4, #4]
 800d3ec:	e7cc      	b.n	800d388 <_malloc_r+0x2c>
 800d3ee:	1cc4      	adds	r4, r0, #3
 800d3f0:	f024 0403 	bic.w	r4, r4, #3
 800d3f4:	42a0      	cmp	r0, r4
 800d3f6:	d0e3      	beq.n	800d3c0 <_malloc_r+0x64>
 800d3f8:	1a21      	subs	r1, r4, r0
 800d3fa:	4630      	mov	r0, r6
 800d3fc:	f000 f964 	bl	800d6c8 <_sbrk_r>
 800d400:	3001      	adds	r0, #1
 800d402:	d1dd      	bne.n	800d3c0 <_malloc_r+0x64>
 800d404:	e7cf      	b.n	800d3a6 <_malloc_r+0x4a>
 800d406:	bf00      	nop
 800d408:	200002f0 	.word	0x200002f0
 800d40c:	200002f4 	.word	0x200002f4

0800d410 <__ssputs_r>:
 800d410:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d414:	688e      	ldr	r6, [r1, #8]
 800d416:	4682      	mov	sl, r0
 800d418:	429e      	cmp	r6, r3
 800d41a:	460c      	mov	r4, r1
 800d41c:	4690      	mov	r8, r2
 800d41e:	461f      	mov	r7, r3
 800d420:	d838      	bhi.n	800d494 <__ssputs_r+0x84>
 800d422:	898a      	ldrh	r2, [r1, #12]
 800d424:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800d428:	d032      	beq.n	800d490 <__ssputs_r+0x80>
 800d42a:	6825      	ldr	r5, [r4, #0]
 800d42c:	6909      	ldr	r1, [r1, #16]
 800d42e:	3301      	adds	r3, #1
 800d430:	eba5 0901 	sub.w	r9, r5, r1
 800d434:	6965      	ldr	r5, [r4, #20]
 800d436:	444b      	add	r3, r9
 800d438:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800d43c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800d440:	106d      	asrs	r5, r5, #1
 800d442:	429d      	cmp	r5, r3
 800d444:	bf38      	it	cc
 800d446:	461d      	movcc	r5, r3
 800d448:	0553      	lsls	r3, r2, #21
 800d44a:	d531      	bpl.n	800d4b0 <__ssputs_r+0xa0>
 800d44c:	4629      	mov	r1, r5
 800d44e:	f7ff ff85 	bl	800d35c <_malloc_r>
 800d452:	4606      	mov	r6, r0
 800d454:	b950      	cbnz	r0, 800d46c <__ssputs_r+0x5c>
 800d456:	230c      	movs	r3, #12
 800d458:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d45c:	f8ca 3000 	str.w	r3, [sl]
 800d460:	89a3      	ldrh	r3, [r4, #12]
 800d462:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d466:	81a3      	strh	r3, [r4, #12]
 800d468:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d46c:	464a      	mov	r2, r9
 800d46e:	6921      	ldr	r1, [r4, #16]
 800d470:	f7ff fb8a 	bl	800cb88 <memcpy>
 800d474:	89a3      	ldrh	r3, [r4, #12]
 800d476:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800d47a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d47e:	81a3      	strh	r3, [r4, #12]
 800d480:	6126      	str	r6, [r4, #16]
 800d482:	444e      	add	r6, r9
 800d484:	6026      	str	r6, [r4, #0]
 800d486:	463e      	mov	r6, r7
 800d488:	6165      	str	r5, [r4, #20]
 800d48a:	eba5 0509 	sub.w	r5, r5, r9
 800d48e:	60a5      	str	r5, [r4, #8]
 800d490:	42be      	cmp	r6, r7
 800d492:	d900      	bls.n	800d496 <__ssputs_r+0x86>
 800d494:	463e      	mov	r6, r7
 800d496:	4632      	mov	r2, r6
 800d498:	4641      	mov	r1, r8
 800d49a:	6820      	ldr	r0, [r4, #0]
 800d49c:	f000 f966 	bl	800d76c <memmove>
 800d4a0:	68a3      	ldr	r3, [r4, #8]
 800d4a2:	6822      	ldr	r2, [r4, #0]
 800d4a4:	1b9b      	subs	r3, r3, r6
 800d4a6:	4432      	add	r2, r6
 800d4a8:	2000      	movs	r0, #0
 800d4aa:	60a3      	str	r3, [r4, #8]
 800d4ac:	6022      	str	r2, [r4, #0]
 800d4ae:	e7db      	b.n	800d468 <__ssputs_r+0x58>
 800d4b0:	462a      	mov	r2, r5
 800d4b2:	f000 f981 	bl	800d7b8 <_realloc_r>
 800d4b6:	4606      	mov	r6, r0
 800d4b8:	2800      	cmp	r0, #0
 800d4ba:	d1e1      	bne.n	800d480 <__ssputs_r+0x70>
 800d4bc:	4650      	mov	r0, sl
 800d4be:	6921      	ldr	r1, [r4, #16]
 800d4c0:	f7ff ff00 	bl	800d2c4 <_free_r>
 800d4c4:	e7c7      	b.n	800d456 <__ssputs_r+0x46>
	...

0800d4c8 <_svfiprintf_r>:
 800d4c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d4cc:	4698      	mov	r8, r3
 800d4ce:	898b      	ldrh	r3, [r1, #12]
 800d4d0:	4607      	mov	r7, r0
 800d4d2:	061b      	lsls	r3, r3, #24
 800d4d4:	460d      	mov	r5, r1
 800d4d6:	4614      	mov	r4, r2
 800d4d8:	b09d      	sub	sp, #116	; 0x74
 800d4da:	d50e      	bpl.n	800d4fa <_svfiprintf_r+0x32>
 800d4dc:	690b      	ldr	r3, [r1, #16]
 800d4de:	b963      	cbnz	r3, 800d4fa <_svfiprintf_r+0x32>
 800d4e0:	2140      	movs	r1, #64	; 0x40
 800d4e2:	f7ff ff3b 	bl	800d35c <_malloc_r>
 800d4e6:	6028      	str	r0, [r5, #0]
 800d4e8:	6128      	str	r0, [r5, #16]
 800d4ea:	b920      	cbnz	r0, 800d4f6 <_svfiprintf_r+0x2e>
 800d4ec:	230c      	movs	r3, #12
 800d4ee:	603b      	str	r3, [r7, #0]
 800d4f0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d4f4:	e0d1      	b.n	800d69a <_svfiprintf_r+0x1d2>
 800d4f6:	2340      	movs	r3, #64	; 0x40
 800d4f8:	616b      	str	r3, [r5, #20]
 800d4fa:	2300      	movs	r3, #0
 800d4fc:	9309      	str	r3, [sp, #36]	; 0x24
 800d4fe:	2320      	movs	r3, #32
 800d500:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d504:	2330      	movs	r3, #48	; 0x30
 800d506:	f04f 0901 	mov.w	r9, #1
 800d50a:	f8cd 800c 	str.w	r8, [sp, #12]
 800d50e:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800d6b4 <_svfiprintf_r+0x1ec>
 800d512:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d516:	4623      	mov	r3, r4
 800d518:	469a      	mov	sl, r3
 800d51a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d51e:	b10a      	cbz	r2, 800d524 <_svfiprintf_r+0x5c>
 800d520:	2a25      	cmp	r2, #37	; 0x25
 800d522:	d1f9      	bne.n	800d518 <_svfiprintf_r+0x50>
 800d524:	ebba 0b04 	subs.w	fp, sl, r4
 800d528:	d00b      	beq.n	800d542 <_svfiprintf_r+0x7a>
 800d52a:	465b      	mov	r3, fp
 800d52c:	4622      	mov	r2, r4
 800d52e:	4629      	mov	r1, r5
 800d530:	4638      	mov	r0, r7
 800d532:	f7ff ff6d 	bl	800d410 <__ssputs_r>
 800d536:	3001      	adds	r0, #1
 800d538:	f000 80aa 	beq.w	800d690 <_svfiprintf_r+0x1c8>
 800d53c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d53e:	445a      	add	r2, fp
 800d540:	9209      	str	r2, [sp, #36]	; 0x24
 800d542:	f89a 3000 	ldrb.w	r3, [sl]
 800d546:	2b00      	cmp	r3, #0
 800d548:	f000 80a2 	beq.w	800d690 <_svfiprintf_r+0x1c8>
 800d54c:	2300      	movs	r3, #0
 800d54e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800d552:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d556:	f10a 0a01 	add.w	sl, sl, #1
 800d55a:	9304      	str	r3, [sp, #16]
 800d55c:	9307      	str	r3, [sp, #28]
 800d55e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d562:	931a      	str	r3, [sp, #104]	; 0x68
 800d564:	4654      	mov	r4, sl
 800d566:	2205      	movs	r2, #5
 800d568:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d56c:	4851      	ldr	r0, [pc, #324]	; (800d6b4 <_svfiprintf_r+0x1ec>)
 800d56e:	f7ff fafd 	bl	800cb6c <memchr>
 800d572:	9a04      	ldr	r2, [sp, #16]
 800d574:	b9d8      	cbnz	r0, 800d5ae <_svfiprintf_r+0xe6>
 800d576:	06d0      	lsls	r0, r2, #27
 800d578:	bf44      	itt	mi
 800d57a:	2320      	movmi	r3, #32
 800d57c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d580:	0711      	lsls	r1, r2, #28
 800d582:	bf44      	itt	mi
 800d584:	232b      	movmi	r3, #43	; 0x2b
 800d586:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d58a:	f89a 3000 	ldrb.w	r3, [sl]
 800d58e:	2b2a      	cmp	r3, #42	; 0x2a
 800d590:	d015      	beq.n	800d5be <_svfiprintf_r+0xf6>
 800d592:	4654      	mov	r4, sl
 800d594:	2000      	movs	r0, #0
 800d596:	f04f 0c0a 	mov.w	ip, #10
 800d59a:	9a07      	ldr	r2, [sp, #28]
 800d59c:	4621      	mov	r1, r4
 800d59e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d5a2:	3b30      	subs	r3, #48	; 0x30
 800d5a4:	2b09      	cmp	r3, #9
 800d5a6:	d94e      	bls.n	800d646 <_svfiprintf_r+0x17e>
 800d5a8:	b1b0      	cbz	r0, 800d5d8 <_svfiprintf_r+0x110>
 800d5aa:	9207      	str	r2, [sp, #28]
 800d5ac:	e014      	b.n	800d5d8 <_svfiprintf_r+0x110>
 800d5ae:	eba0 0308 	sub.w	r3, r0, r8
 800d5b2:	fa09 f303 	lsl.w	r3, r9, r3
 800d5b6:	4313      	orrs	r3, r2
 800d5b8:	46a2      	mov	sl, r4
 800d5ba:	9304      	str	r3, [sp, #16]
 800d5bc:	e7d2      	b.n	800d564 <_svfiprintf_r+0x9c>
 800d5be:	9b03      	ldr	r3, [sp, #12]
 800d5c0:	1d19      	adds	r1, r3, #4
 800d5c2:	681b      	ldr	r3, [r3, #0]
 800d5c4:	9103      	str	r1, [sp, #12]
 800d5c6:	2b00      	cmp	r3, #0
 800d5c8:	bfbb      	ittet	lt
 800d5ca:	425b      	neglt	r3, r3
 800d5cc:	f042 0202 	orrlt.w	r2, r2, #2
 800d5d0:	9307      	strge	r3, [sp, #28]
 800d5d2:	9307      	strlt	r3, [sp, #28]
 800d5d4:	bfb8      	it	lt
 800d5d6:	9204      	strlt	r2, [sp, #16]
 800d5d8:	7823      	ldrb	r3, [r4, #0]
 800d5da:	2b2e      	cmp	r3, #46	; 0x2e
 800d5dc:	d10c      	bne.n	800d5f8 <_svfiprintf_r+0x130>
 800d5de:	7863      	ldrb	r3, [r4, #1]
 800d5e0:	2b2a      	cmp	r3, #42	; 0x2a
 800d5e2:	d135      	bne.n	800d650 <_svfiprintf_r+0x188>
 800d5e4:	9b03      	ldr	r3, [sp, #12]
 800d5e6:	3402      	adds	r4, #2
 800d5e8:	1d1a      	adds	r2, r3, #4
 800d5ea:	681b      	ldr	r3, [r3, #0]
 800d5ec:	9203      	str	r2, [sp, #12]
 800d5ee:	2b00      	cmp	r3, #0
 800d5f0:	bfb8      	it	lt
 800d5f2:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800d5f6:	9305      	str	r3, [sp, #20]
 800d5f8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800d6c4 <_svfiprintf_r+0x1fc>
 800d5fc:	2203      	movs	r2, #3
 800d5fe:	4650      	mov	r0, sl
 800d600:	7821      	ldrb	r1, [r4, #0]
 800d602:	f7ff fab3 	bl	800cb6c <memchr>
 800d606:	b140      	cbz	r0, 800d61a <_svfiprintf_r+0x152>
 800d608:	2340      	movs	r3, #64	; 0x40
 800d60a:	eba0 000a 	sub.w	r0, r0, sl
 800d60e:	fa03 f000 	lsl.w	r0, r3, r0
 800d612:	9b04      	ldr	r3, [sp, #16]
 800d614:	3401      	adds	r4, #1
 800d616:	4303      	orrs	r3, r0
 800d618:	9304      	str	r3, [sp, #16]
 800d61a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d61e:	2206      	movs	r2, #6
 800d620:	4825      	ldr	r0, [pc, #148]	; (800d6b8 <_svfiprintf_r+0x1f0>)
 800d622:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d626:	f7ff faa1 	bl	800cb6c <memchr>
 800d62a:	2800      	cmp	r0, #0
 800d62c:	d038      	beq.n	800d6a0 <_svfiprintf_r+0x1d8>
 800d62e:	4b23      	ldr	r3, [pc, #140]	; (800d6bc <_svfiprintf_r+0x1f4>)
 800d630:	bb1b      	cbnz	r3, 800d67a <_svfiprintf_r+0x1b2>
 800d632:	9b03      	ldr	r3, [sp, #12]
 800d634:	3307      	adds	r3, #7
 800d636:	f023 0307 	bic.w	r3, r3, #7
 800d63a:	3308      	adds	r3, #8
 800d63c:	9303      	str	r3, [sp, #12]
 800d63e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d640:	4433      	add	r3, r6
 800d642:	9309      	str	r3, [sp, #36]	; 0x24
 800d644:	e767      	b.n	800d516 <_svfiprintf_r+0x4e>
 800d646:	460c      	mov	r4, r1
 800d648:	2001      	movs	r0, #1
 800d64a:	fb0c 3202 	mla	r2, ip, r2, r3
 800d64e:	e7a5      	b.n	800d59c <_svfiprintf_r+0xd4>
 800d650:	2300      	movs	r3, #0
 800d652:	f04f 0c0a 	mov.w	ip, #10
 800d656:	4619      	mov	r1, r3
 800d658:	3401      	adds	r4, #1
 800d65a:	9305      	str	r3, [sp, #20]
 800d65c:	4620      	mov	r0, r4
 800d65e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d662:	3a30      	subs	r2, #48	; 0x30
 800d664:	2a09      	cmp	r2, #9
 800d666:	d903      	bls.n	800d670 <_svfiprintf_r+0x1a8>
 800d668:	2b00      	cmp	r3, #0
 800d66a:	d0c5      	beq.n	800d5f8 <_svfiprintf_r+0x130>
 800d66c:	9105      	str	r1, [sp, #20]
 800d66e:	e7c3      	b.n	800d5f8 <_svfiprintf_r+0x130>
 800d670:	4604      	mov	r4, r0
 800d672:	2301      	movs	r3, #1
 800d674:	fb0c 2101 	mla	r1, ip, r1, r2
 800d678:	e7f0      	b.n	800d65c <_svfiprintf_r+0x194>
 800d67a:	ab03      	add	r3, sp, #12
 800d67c:	9300      	str	r3, [sp, #0]
 800d67e:	462a      	mov	r2, r5
 800d680:	4638      	mov	r0, r7
 800d682:	4b0f      	ldr	r3, [pc, #60]	; (800d6c0 <_svfiprintf_r+0x1f8>)
 800d684:	a904      	add	r1, sp, #16
 800d686:	f7fd ffa5 	bl	800b5d4 <_printf_float>
 800d68a:	1c42      	adds	r2, r0, #1
 800d68c:	4606      	mov	r6, r0
 800d68e:	d1d6      	bne.n	800d63e <_svfiprintf_r+0x176>
 800d690:	89ab      	ldrh	r3, [r5, #12]
 800d692:	065b      	lsls	r3, r3, #25
 800d694:	f53f af2c 	bmi.w	800d4f0 <_svfiprintf_r+0x28>
 800d698:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d69a:	b01d      	add	sp, #116	; 0x74
 800d69c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d6a0:	ab03      	add	r3, sp, #12
 800d6a2:	9300      	str	r3, [sp, #0]
 800d6a4:	462a      	mov	r2, r5
 800d6a6:	4638      	mov	r0, r7
 800d6a8:	4b05      	ldr	r3, [pc, #20]	; (800d6c0 <_svfiprintf_r+0x1f8>)
 800d6aa:	a904      	add	r1, sp, #16
 800d6ac:	f7fe fa2e 	bl	800bb0c <_printf_i>
 800d6b0:	e7eb      	b.n	800d68a <_svfiprintf_r+0x1c2>
 800d6b2:	bf00      	nop
 800d6b4:	0800e93c 	.word	0x0800e93c
 800d6b8:	0800e946 	.word	0x0800e946
 800d6bc:	0800b5d5 	.word	0x0800b5d5
 800d6c0:	0800d411 	.word	0x0800d411
 800d6c4:	0800e942 	.word	0x0800e942

0800d6c8 <_sbrk_r>:
 800d6c8:	b538      	push	{r3, r4, r5, lr}
 800d6ca:	2300      	movs	r3, #0
 800d6cc:	4d05      	ldr	r5, [pc, #20]	; (800d6e4 <_sbrk_r+0x1c>)
 800d6ce:	4604      	mov	r4, r0
 800d6d0:	4608      	mov	r0, r1
 800d6d2:	602b      	str	r3, [r5, #0]
 800d6d4:	f7f7 ff14 	bl	8005500 <_sbrk>
 800d6d8:	1c43      	adds	r3, r0, #1
 800d6da:	d102      	bne.n	800d6e2 <_sbrk_r+0x1a>
 800d6dc:	682b      	ldr	r3, [r5, #0]
 800d6de:	b103      	cbz	r3, 800d6e2 <_sbrk_r+0x1a>
 800d6e0:	6023      	str	r3, [r4, #0]
 800d6e2:	bd38      	pop	{r3, r4, r5, pc}
 800d6e4:	200005ec 	.word	0x200005ec

0800d6e8 <__assert_func>:
 800d6e8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800d6ea:	4614      	mov	r4, r2
 800d6ec:	461a      	mov	r2, r3
 800d6ee:	4b09      	ldr	r3, [pc, #36]	; (800d714 <__assert_func+0x2c>)
 800d6f0:	4605      	mov	r5, r0
 800d6f2:	681b      	ldr	r3, [r3, #0]
 800d6f4:	68d8      	ldr	r0, [r3, #12]
 800d6f6:	b14c      	cbz	r4, 800d70c <__assert_func+0x24>
 800d6f8:	4b07      	ldr	r3, [pc, #28]	; (800d718 <__assert_func+0x30>)
 800d6fa:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800d6fe:	9100      	str	r1, [sp, #0]
 800d700:	462b      	mov	r3, r5
 800d702:	4906      	ldr	r1, [pc, #24]	; (800d71c <__assert_func+0x34>)
 800d704:	f000 f80e 	bl	800d724 <fiprintf>
 800d708:	f000 faa2 	bl	800dc50 <abort>
 800d70c:	4b04      	ldr	r3, [pc, #16]	; (800d720 <__assert_func+0x38>)
 800d70e:	461c      	mov	r4, r3
 800d710:	e7f3      	b.n	800d6fa <__assert_func+0x12>
 800d712:	bf00      	nop
 800d714:	20000058 	.word	0x20000058
 800d718:	0800e94d 	.word	0x0800e94d
 800d71c:	0800e95a 	.word	0x0800e95a
 800d720:	0800e988 	.word	0x0800e988

0800d724 <fiprintf>:
 800d724:	b40e      	push	{r1, r2, r3}
 800d726:	b503      	push	{r0, r1, lr}
 800d728:	4601      	mov	r1, r0
 800d72a:	ab03      	add	r3, sp, #12
 800d72c:	4805      	ldr	r0, [pc, #20]	; (800d744 <fiprintf+0x20>)
 800d72e:	f853 2b04 	ldr.w	r2, [r3], #4
 800d732:	6800      	ldr	r0, [r0, #0]
 800d734:	9301      	str	r3, [sp, #4]
 800d736:	f000 f88d 	bl	800d854 <_vfiprintf_r>
 800d73a:	b002      	add	sp, #8
 800d73c:	f85d eb04 	ldr.w	lr, [sp], #4
 800d740:	b003      	add	sp, #12
 800d742:	4770      	bx	lr
 800d744:	20000058 	.word	0x20000058

0800d748 <__ascii_mbtowc>:
 800d748:	b082      	sub	sp, #8
 800d74a:	b901      	cbnz	r1, 800d74e <__ascii_mbtowc+0x6>
 800d74c:	a901      	add	r1, sp, #4
 800d74e:	b142      	cbz	r2, 800d762 <__ascii_mbtowc+0x1a>
 800d750:	b14b      	cbz	r3, 800d766 <__ascii_mbtowc+0x1e>
 800d752:	7813      	ldrb	r3, [r2, #0]
 800d754:	600b      	str	r3, [r1, #0]
 800d756:	7812      	ldrb	r2, [r2, #0]
 800d758:	1e10      	subs	r0, r2, #0
 800d75a:	bf18      	it	ne
 800d75c:	2001      	movne	r0, #1
 800d75e:	b002      	add	sp, #8
 800d760:	4770      	bx	lr
 800d762:	4610      	mov	r0, r2
 800d764:	e7fb      	b.n	800d75e <__ascii_mbtowc+0x16>
 800d766:	f06f 0001 	mvn.w	r0, #1
 800d76a:	e7f8      	b.n	800d75e <__ascii_mbtowc+0x16>

0800d76c <memmove>:
 800d76c:	4288      	cmp	r0, r1
 800d76e:	b510      	push	{r4, lr}
 800d770:	eb01 0402 	add.w	r4, r1, r2
 800d774:	d902      	bls.n	800d77c <memmove+0x10>
 800d776:	4284      	cmp	r4, r0
 800d778:	4623      	mov	r3, r4
 800d77a:	d807      	bhi.n	800d78c <memmove+0x20>
 800d77c:	1e43      	subs	r3, r0, #1
 800d77e:	42a1      	cmp	r1, r4
 800d780:	d008      	beq.n	800d794 <memmove+0x28>
 800d782:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d786:	f803 2f01 	strb.w	r2, [r3, #1]!
 800d78a:	e7f8      	b.n	800d77e <memmove+0x12>
 800d78c:	4601      	mov	r1, r0
 800d78e:	4402      	add	r2, r0
 800d790:	428a      	cmp	r2, r1
 800d792:	d100      	bne.n	800d796 <memmove+0x2a>
 800d794:	bd10      	pop	{r4, pc}
 800d796:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800d79a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800d79e:	e7f7      	b.n	800d790 <memmove+0x24>

0800d7a0 <__malloc_lock>:
 800d7a0:	4801      	ldr	r0, [pc, #4]	; (800d7a8 <__malloc_lock+0x8>)
 800d7a2:	f000 bc15 	b.w	800dfd0 <__retarget_lock_acquire_recursive>
 800d7a6:	bf00      	nop
 800d7a8:	200005f4 	.word	0x200005f4

0800d7ac <__malloc_unlock>:
 800d7ac:	4801      	ldr	r0, [pc, #4]	; (800d7b4 <__malloc_unlock+0x8>)
 800d7ae:	f000 bc10 	b.w	800dfd2 <__retarget_lock_release_recursive>
 800d7b2:	bf00      	nop
 800d7b4:	200005f4 	.word	0x200005f4

0800d7b8 <_realloc_r>:
 800d7b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d7ba:	4607      	mov	r7, r0
 800d7bc:	4614      	mov	r4, r2
 800d7be:	460e      	mov	r6, r1
 800d7c0:	b921      	cbnz	r1, 800d7cc <_realloc_r+0x14>
 800d7c2:	4611      	mov	r1, r2
 800d7c4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800d7c8:	f7ff bdc8 	b.w	800d35c <_malloc_r>
 800d7cc:	b922      	cbnz	r2, 800d7d8 <_realloc_r+0x20>
 800d7ce:	f7ff fd79 	bl	800d2c4 <_free_r>
 800d7d2:	4625      	mov	r5, r4
 800d7d4:	4628      	mov	r0, r5
 800d7d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d7d8:	f000 fc60 	bl	800e09c <_malloc_usable_size_r>
 800d7dc:	42a0      	cmp	r0, r4
 800d7de:	d20f      	bcs.n	800d800 <_realloc_r+0x48>
 800d7e0:	4621      	mov	r1, r4
 800d7e2:	4638      	mov	r0, r7
 800d7e4:	f7ff fdba 	bl	800d35c <_malloc_r>
 800d7e8:	4605      	mov	r5, r0
 800d7ea:	2800      	cmp	r0, #0
 800d7ec:	d0f2      	beq.n	800d7d4 <_realloc_r+0x1c>
 800d7ee:	4631      	mov	r1, r6
 800d7f0:	4622      	mov	r2, r4
 800d7f2:	f7ff f9c9 	bl	800cb88 <memcpy>
 800d7f6:	4631      	mov	r1, r6
 800d7f8:	4638      	mov	r0, r7
 800d7fa:	f7ff fd63 	bl	800d2c4 <_free_r>
 800d7fe:	e7e9      	b.n	800d7d4 <_realloc_r+0x1c>
 800d800:	4635      	mov	r5, r6
 800d802:	e7e7      	b.n	800d7d4 <_realloc_r+0x1c>

0800d804 <__sfputc_r>:
 800d804:	6893      	ldr	r3, [r2, #8]
 800d806:	b410      	push	{r4}
 800d808:	3b01      	subs	r3, #1
 800d80a:	2b00      	cmp	r3, #0
 800d80c:	6093      	str	r3, [r2, #8]
 800d80e:	da07      	bge.n	800d820 <__sfputc_r+0x1c>
 800d810:	6994      	ldr	r4, [r2, #24]
 800d812:	42a3      	cmp	r3, r4
 800d814:	db01      	blt.n	800d81a <__sfputc_r+0x16>
 800d816:	290a      	cmp	r1, #10
 800d818:	d102      	bne.n	800d820 <__sfputc_r+0x1c>
 800d81a:	bc10      	pop	{r4}
 800d81c:	f000 b94a 	b.w	800dab4 <__swbuf_r>
 800d820:	6813      	ldr	r3, [r2, #0]
 800d822:	1c58      	adds	r0, r3, #1
 800d824:	6010      	str	r0, [r2, #0]
 800d826:	7019      	strb	r1, [r3, #0]
 800d828:	4608      	mov	r0, r1
 800d82a:	bc10      	pop	{r4}
 800d82c:	4770      	bx	lr

0800d82e <__sfputs_r>:
 800d82e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d830:	4606      	mov	r6, r0
 800d832:	460f      	mov	r7, r1
 800d834:	4614      	mov	r4, r2
 800d836:	18d5      	adds	r5, r2, r3
 800d838:	42ac      	cmp	r4, r5
 800d83a:	d101      	bne.n	800d840 <__sfputs_r+0x12>
 800d83c:	2000      	movs	r0, #0
 800d83e:	e007      	b.n	800d850 <__sfputs_r+0x22>
 800d840:	463a      	mov	r2, r7
 800d842:	4630      	mov	r0, r6
 800d844:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d848:	f7ff ffdc 	bl	800d804 <__sfputc_r>
 800d84c:	1c43      	adds	r3, r0, #1
 800d84e:	d1f3      	bne.n	800d838 <__sfputs_r+0xa>
 800d850:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800d854 <_vfiprintf_r>:
 800d854:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d858:	460d      	mov	r5, r1
 800d85a:	4614      	mov	r4, r2
 800d85c:	4698      	mov	r8, r3
 800d85e:	4606      	mov	r6, r0
 800d860:	b09d      	sub	sp, #116	; 0x74
 800d862:	b118      	cbz	r0, 800d86c <_vfiprintf_r+0x18>
 800d864:	6983      	ldr	r3, [r0, #24]
 800d866:	b90b      	cbnz	r3, 800d86c <_vfiprintf_r+0x18>
 800d868:	f000 fb14 	bl	800de94 <__sinit>
 800d86c:	4b89      	ldr	r3, [pc, #548]	; (800da94 <_vfiprintf_r+0x240>)
 800d86e:	429d      	cmp	r5, r3
 800d870:	d11b      	bne.n	800d8aa <_vfiprintf_r+0x56>
 800d872:	6875      	ldr	r5, [r6, #4]
 800d874:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d876:	07d9      	lsls	r1, r3, #31
 800d878:	d405      	bmi.n	800d886 <_vfiprintf_r+0x32>
 800d87a:	89ab      	ldrh	r3, [r5, #12]
 800d87c:	059a      	lsls	r2, r3, #22
 800d87e:	d402      	bmi.n	800d886 <_vfiprintf_r+0x32>
 800d880:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d882:	f000 fba5 	bl	800dfd0 <__retarget_lock_acquire_recursive>
 800d886:	89ab      	ldrh	r3, [r5, #12]
 800d888:	071b      	lsls	r3, r3, #28
 800d88a:	d501      	bpl.n	800d890 <_vfiprintf_r+0x3c>
 800d88c:	692b      	ldr	r3, [r5, #16]
 800d88e:	b9eb      	cbnz	r3, 800d8cc <_vfiprintf_r+0x78>
 800d890:	4629      	mov	r1, r5
 800d892:	4630      	mov	r0, r6
 800d894:	f000 f96e 	bl	800db74 <__swsetup_r>
 800d898:	b1c0      	cbz	r0, 800d8cc <_vfiprintf_r+0x78>
 800d89a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d89c:	07dc      	lsls	r4, r3, #31
 800d89e:	d50e      	bpl.n	800d8be <_vfiprintf_r+0x6a>
 800d8a0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d8a4:	b01d      	add	sp, #116	; 0x74
 800d8a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d8aa:	4b7b      	ldr	r3, [pc, #492]	; (800da98 <_vfiprintf_r+0x244>)
 800d8ac:	429d      	cmp	r5, r3
 800d8ae:	d101      	bne.n	800d8b4 <_vfiprintf_r+0x60>
 800d8b0:	68b5      	ldr	r5, [r6, #8]
 800d8b2:	e7df      	b.n	800d874 <_vfiprintf_r+0x20>
 800d8b4:	4b79      	ldr	r3, [pc, #484]	; (800da9c <_vfiprintf_r+0x248>)
 800d8b6:	429d      	cmp	r5, r3
 800d8b8:	bf08      	it	eq
 800d8ba:	68f5      	ldreq	r5, [r6, #12]
 800d8bc:	e7da      	b.n	800d874 <_vfiprintf_r+0x20>
 800d8be:	89ab      	ldrh	r3, [r5, #12]
 800d8c0:	0598      	lsls	r0, r3, #22
 800d8c2:	d4ed      	bmi.n	800d8a0 <_vfiprintf_r+0x4c>
 800d8c4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d8c6:	f000 fb84 	bl	800dfd2 <__retarget_lock_release_recursive>
 800d8ca:	e7e9      	b.n	800d8a0 <_vfiprintf_r+0x4c>
 800d8cc:	2300      	movs	r3, #0
 800d8ce:	9309      	str	r3, [sp, #36]	; 0x24
 800d8d0:	2320      	movs	r3, #32
 800d8d2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d8d6:	2330      	movs	r3, #48	; 0x30
 800d8d8:	f04f 0901 	mov.w	r9, #1
 800d8dc:	f8cd 800c 	str.w	r8, [sp, #12]
 800d8e0:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 800daa0 <_vfiprintf_r+0x24c>
 800d8e4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d8e8:	4623      	mov	r3, r4
 800d8ea:	469a      	mov	sl, r3
 800d8ec:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d8f0:	b10a      	cbz	r2, 800d8f6 <_vfiprintf_r+0xa2>
 800d8f2:	2a25      	cmp	r2, #37	; 0x25
 800d8f4:	d1f9      	bne.n	800d8ea <_vfiprintf_r+0x96>
 800d8f6:	ebba 0b04 	subs.w	fp, sl, r4
 800d8fa:	d00b      	beq.n	800d914 <_vfiprintf_r+0xc0>
 800d8fc:	465b      	mov	r3, fp
 800d8fe:	4622      	mov	r2, r4
 800d900:	4629      	mov	r1, r5
 800d902:	4630      	mov	r0, r6
 800d904:	f7ff ff93 	bl	800d82e <__sfputs_r>
 800d908:	3001      	adds	r0, #1
 800d90a:	f000 80aa 	beq.w	800da62 <_vfiprintf_r+0x20e>
 800d90e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d910:	445a      	add	r2, fp
 800d912:	9209      	str	r2, [sp, #36]	; 0x24
 800d914:	f89a 3000 	ldrb.w	r3, [sl]
 800d918:	2b00      	cmp	r3, #0
 800d91a:	f000 80a2 	beq.w	800da62 <_vfiprintf_r+0x20e>
 800d91e:	2300      	movs	r3, #0
 800d920:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800d924:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d928:	f10a 0a01 	add.w	sl, sl, #1
 800d92c:	9304      	str	r3, [sp, #16]
 800d92e:	9307      	str	r3, [sp, #28]
 800d930:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d934:	931a      	str	r3, [sp, #104]	; 0x68
 800d936:	4654      	mov	r4, sl
 800d938:	2205      	movs	r2, #5
 800d93a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d93e:	4858      	ldr	r0, [pc, #352]	; (800daa0 <_vfiprintf_r+0x24c>)
 800d940:	f7ff f914 	bl	800cb6c <memchr>
 800d944:	9a04      	ldr	r2, [sp, #16]
 800d946:	b9d8      	cbnz	r0, 800d980 <_vfiprintf_r+0x12c>
 800d948:	06d1      	lsls	r1, r2, #27
 800d94a:	bf44      	itt	mi
 800d94c:	2320      	movmi	r3, #32
 800d94e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d952:	0713      	lsls	r3, r2, #28
 800d954:	bf44      	itt	mi
 800d956:	232b      	movmi	r3, #43	; 0x2b
 800d958:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d95c:	f89a 3000 	ldrb.w	r3, [sl]
 800d960:	2b2a      	cmp	r3, #42	; 0x2a
 800d962:	d015      	beq.n	800d990 <_vfiprintf_r+0x13c>
 800d964:	4654      	mov	r4, sl
 800d966:	2000      	movs	r0, #0
 800d968:	f04f 0c0a 	mov.w	ip, #10
 800d96c:	9a07      	ldr	r2, [sp, #28]
 800d96e:	4621      	mov	r1, r4
 800d970:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d974:	3b30      	subs	r3, #48	; 0x30
 800d976:	2b09      	cmp	r3, #9
 800d978:	d94e      	bls.n	800da18 <_vfiprintf_r+0x1c4>
 800d97a:	b1b0      	cbz	r0, 800d9aa <_vfiprintf_r+0x156>
 800d97c:	9207      	str	r2, [sp, #28]
 800d97e:	e014      	b.n	800d9aa <_vfiprintf_r+0x156>
 800d980:	eba0 0308 	sub.w	r3, r0, r8
 800d984:	fa09 f303 	lsl.w	r3, r9, r3
 800d988:	4313      	orrs	r3, r2
 800d98a:	46a2      	mov	sl, r4
 800d98c:	9304      	str	r3, [sp, #16]
 800d98e:	e7d2      	b.n	800d936 <_vfiprintf_r+0xe2>
 800d990:	9b03      	ldr	r3, [sp, #12]
 800d992:	1d19      	adds	r1, r3, #4
 800d994:	681b      	ldr	r3, [r3, #0]
 800d996:	9103      	str	r1, [sp, #12]
 800d998:	2b00      	cmp	r3, #0
 800d99a:	bfbb      	ittet	lt
 800d99c:	425b      	neglt	r3, r3
 800d99e:	f042 0202 	orrlt.w	r2, r2, #2
 800d9a2:	9307      	strge	r3, [sp, #28]
 800d9a4:	9307      	strlt	r3, [sp, #28]
 800d9a6:	bfb8      	it	lt
 800d9a8:	9204      	strlt	r2, [sp, #16]
 800d9aa:	7823      	ldrb	r3, [r4, #0]
 800d9ac:	2b2e      	cmp	r3, #46	; 0x2e
 800d9ae:	d10c      	bne.n	800d9ca <_vfiprintf_r+0x176>
 800d9b0:	7863      	ldrb	r3, [r4, #1]
 800d9b2:	2b2a      	cmp	r3, #42	; 0x2a
 800d9b4:	d135      	bne.n	800da22 <_vfiprintf_r+0x1ce>
 800d9b6:	9b03      	ldr	r3, [sp, #12]
 800d9b8:	3402      	adds	r4, #2
 800d9ba:	1d1a      	adds	r2, r3, #4
 800d9bc:	681b      	ldr	r3, [r3, #0]
 800d9be:	9203      	str	r2, [sp, #12]
 800d9c0:	2b00      	cmp	r3, #0
 800d9c2:	bfb8      	it	lt
 800d9c4:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800d9c8:	9305      	str	r3, [sp, #20]
 800d9ca:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800dab0 <_vfiprintf_r+0x25c>
 800d9ce:	2203      	movs	r2, #3
 800d9d0:	4650      	mov	r0, sl
 800d9d2:	7821      	ldrb	r1, [r4, #0]
 800d9d4:	f7ff f8ca 	bl	800cb6c <memchr>
 800d9d8:	b140      	cbz	r0, 800d9ec <_vfiprintf_r+0x198>
 800d9da:	2340      	movs	r3, #64	; 0x40
 800d9dc:	eba0 000a 	sub.w	r0, r0, sl
 800d9e0:	fa03 f000 	lsl.w	r0, r3, r0
 800d9e4:	9b04      	ldr	r3, [sp, #16]
 800d9e6:	3401      	adds	r4, #1
 800d9e8:	4303      	orrs	r3, r0
 800d9ea:	9304      	str	r3, [sp, #16]
 800d9ec:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d9f0:	2206      	movs	r2, #6
 800d9f2:	482c      	ldr	r0, [pc, #176]	; (800daa4 <_vfiprintf_r+0x250>)
 800d9f4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d9f8:	f7ff f8b8 	bl	800cb6c <memchr>
 800d9fc:	2800      	cmp	r0, #0
 800d9fe:	d03f      	beq.n	800da80 <_vfiprintf_r+0x22c>
 800da00:	4b29      	ldr	r3, [pc, #164]	; (800daa8 <_vfiprintf_r+0x254>)
 800da02:	bb1b      	cbnz	r3, 800da4c <_vfiprintf_r+0x1f8>
 800da04:	9b03      	ldr	r3, [sp, #12]
 800da06:	3307      	adds	r3, #7
 800da08:	f023 0307 	bic.w	r3, r3, #7
 800da0c:	3308      	adds	r3, #8
 800da0e:	9303      	str	r3, [sp, #12]
 800da10:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800da12:	443b      	add	r3, r7
 800da14:	9309      	str	r3, [sp, #36]	; 0x24
 800da16:	e767      	b.n	800d8e8 <_vfiprintf_r+0x94>
 800da18:	460c      	mov	r4, r1
 800da1a:	2001      	movs	r0, #1
 800da1c:	fb0c 3202 	mla	r2, ip, r2, r3
 800da20:	e7a5      	b.n	800d96e <_vfiprintf_r+0x11a>
 800da22:	2300      	movs	r3, #0
 800da24:	f04f 0c0a 	mov.w	ip, #10
 800da28:	4619      	mov	r1, r3
 800da2a:	3401      	adds	r4, #1
 800da2c:	9305      	str	r3, [sp, #20]
 800da2e:	4620      	mov	r0, r4
 800da30:	f810 2b01 	ldrb.w	r2, [r0], #1
 800da34:	3a30      	subs	r2, #48	; 0x30
 800da36:	2a09      	cmp	r2, #9
 800da38:	d903      	bls.n	800da42 <_vfiprintf_r+0x1ee>
 800da3a:	2b00      	cmp	r3, #0
 800da3c:	d0c5      	beq.n	800d9ca <_vfiprintf_r+0x176>
 800da3e:	9105      	str	r1, [sp, #20]
 800da40:	e7c3      	b.n	800d9ca <_vfiprintf_r+0x176>
 800da42:	4604      	mov	r4, r0
 800da44:	2301      	movs	r3, #1
 800da46:	fb0c 2101 	mla	r1, ip, r1, r2
 800da4a:	e7f0      	b.n	800da2e <_vfiprintf_r+0x1da>
 800da4c:	ab03      	add	r3, sp, #12
 800da4e:	9300      	str	r3, [sp, #0]
 800da50:	462a      	mov	r2, r5
 800da52:	4630      	mov	r0, r6
 800da54:	4b15      	ldr	r3, [pc, #84]	; (800daac <_vfiprintf_r+0x258>)
 800da56:	a904      	add	r1, sp, #16
 800da58:	f7fd fdbc 	bl	800b5d4 <_printf_float>
 800da5c:	4607      	mov	r7, r0
 800da5e:	1c78      	adds	r0, r7, #1
 800da60:	d1d6      	bne.n	800da10 <_vfiprintf_r+0x1bc>
 800da62:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800da64:	07d9      	lsls	r1, r3, #31
 800da66:	d405      	bmi.n	800da74 <_vfiprintf_r+0x220>
 800da68:	89ab      	ldrh	r3, [r5, #12]
 800da6a:	059a      	lsls	r2, r3, #22
 800da6c:	d402      	bmi.n	800da74 <_vfiprintf_r+0x220>
 800da6e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800da70:	f000 faaf 	bl	800dfd2 <__retarget_lock_release_recursive>
 800da74:	89ab      	ldrh	r3, [r5, #12]
 800da76:	065b      	lsls	r3, r3, #25
 800da78:	f53f af12 	bmi.w	800d8a0 <_vfiprintf_r+0x4c>
 800da7c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800da7e:	e711      	b.n	800d8a4 <_vfiprintf_r+0x50>
 800da80:	ab03      	add	r3, sp, #12
 800da82:	9300      	str	r3, [sp, #0]
 800da84:	462a      	mov	r2, r5
 800da86:	4630      	mov	r0, r6
 800da88:	4b08      	ldr	r3, [pc, #32]	; (800daac <_vfiprintf_r+0x258>)
 800da8a:	a904      	add	r1, sp, #16
 800da8c:	f7fe f83e 	bl	800bb0c <_printf_i>
 800da90:	e7e4      	b.n	800da5c <_vfiprintf_r+0x208>
 800da92:	bf00      	nop
 800da94:	0800eab4 	.word	0x0800eab4
 800da98:	0800ead4 	.word	0x0800ead4
 800da9c:	0800ea94 	.word	0x0800ea94
 800daa0:	0800e93c 	.word	0x0800e93c
 800daa4:	0800e946 	.word	0x0800e946
 800daa8:	0800b5d5 	.word	0x0800b5d5
 800daac:	0800d82f 	.word	0x0800d82f
 800dab0:	0800e942 	.word	0x0800e942

0800dab4 <__swbuf_r>:
 800dab4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dab6:	460e      	mov	r6, r1
 800dab8:	4614      	mov	r4, r2
 800daba:	4605      	mov	r5, r0
 800dabc:	b118      	cbz	r0, 800dac6 <__swbuf_r+0x12>
 800dabe:	6983      	ldr	r3, [r0, #24]
 800dac0:	b90b      	cbnz	r3, 800dac6 <__swbuf_r+0x12>
 800dac2:	f000 f9e7 	bl	800de94 <__sinit>
 800dac6:	4b21      	ldr	r3, [pc, #132]	; (800db4c <__swbuf_r+0x98>)
 800dac8:	429c      	cmp	r4, r3
 800daca:	d12b      	bne.n	800db24 <__swbuf_r+0x70>
 800dacc:	686c      	ldr	r4, [r5, #4]
 800dace:	69a3      	ldr	r3, [r4, #24]
 800dad0:	60a3      	str	r3, [r4, #8]
 800dad2:	89a3      	ldrh	r3, [r4, #12]
 800dad4:	071a      	lsls	r2, r3, #28
 800dad6:	d52f      	bpl.n	800db38 <__swbuf_r+0x84>
 800dad8:	6923      	ldr	r3, [r4, #16]
 800dada:	b36b      	cbz	r3, 800db38 <__swbuf_r+0x84>
 800dadc:	6923      	ldr	r3, [r4, #16]
 800dade:	6820      	ldr	r0, [r4, #0]
 800dae0:	b2f6      	uxtb	r6, r6
 800dae2:	1ac0      	subs	r0, r0, r3
 800dae4:	6963      	ldr	r3, [r4, #20]
 800dae6:	4637      	mov	r7, r6
 800dae8:	4283      	cmp	r3, r0
 800daea:	dc04      	bgt.n	800daf6 <__swbuf_r+0x42>
 800daec:	4621      	mov	r1, r4
 800daee:	4628      	mov	r0, r5
 800daf0:	f000 f93c 	bl	800dd6c <_fflush_r>
 800daf4:	bb30      	cbnz	r0, 800db44 <__swbuf_r+0x90>
 800daf6:	68a3      	ldr	r3, [r4, #8]
 800daf8:	3001      	adds	r0, #1
 800dafa:	3b01      	subs	r3, #1
 800dafc:	60a3      	str	r3, [r4, #8]
 800dafe:	6823      	ldr	r3, [r4, #0]
 800db00:	1c5a      	adds	r2, r3, #1
 800db02:	6022      	str	r2, [r4, #0]
 800db04:	701e      	strb	r6, [r3, #0]
 800db06:	6963      	ldr	r3, [r4, #20]
 800db08:	4283      	cmp	r3, r0
 800db0a:	d004      	beq.n	800db16 <__swbuf_r+0x62>
 800db0c:	89a3      	ldrh	r3, [r4, #12]
 800db0e:	07db      	lsls	r3, r3, #31
 800db10:	d506      	bpl.n	800db20 <__swbuf_r+0x6c>
 800db12:	2e0a      	cmp	r6, #10
 800db14:	d104      	bne.n	800db20 <__swbuf_r+0x6c>
 800db16:	4621      	mov	r1, r4
 800db18:	4628      	mov	r0, r5
 800db1a:	f000 f927 	bl	800dd6c <_fflush_r>
 800db1e:	b988      	cbnz	r0, 800db44 <__swbuf_r+0x90>
 800db20:	4638      	mov	r0, r7
 800db22:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800db24:	4b0a      	ldr	r3, [pc, #40]	; (800db50 <__swbuf_r+0x9c>)
 800db26:	429c      	cmp	r4, r3
 800db28:	d101      	bne.n	800db2e <__swbuf_r+0x7a>
 800db2a:	68ac      	ldr	r4, [r5, #8]
 800db2c:	e7cf      	b.n	800dace <__swbuf_r+0x1a>
 800db2e:	4b09      	ldr	r3, [pc, #36]	; (800db54 <__swbuf_r+0xa0>)
 800db30:	429c      	cmp	r4, r3
 800db32:	bf08      	it	eq
 800db34:	68ec      	ldreq	r4, [r5, #12]
 800db36:	e7ca      	b.n	800dace <__swbuf_r+0x1a>
 800db38:	4621      	mov	r1, r4
 800db3a:	4628      	mov	r0, r5
 800db3c:	f000 f81a 	bl	800db74 <__swsetup_r>
 800db40:	2800      	cmp	r0, #0
 800db42:	d0cb      	beq.n	800dadc <__swbuf_r+0x28>
 800db44:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800db48:	e7ea      	b.n	800db20 <__swbuf_r+0x6c>
 800db4a:	bf00      	nop
 800db4c:	0800eab4 	.word	0x0800eab4
 800db50:	0800ead4 	.word	0x0800ead4
 800db54:	0800ea94 	.word	0x0800ea94

0800db58 <__ascii_wctomb>:
 800db58:	4603      	mov	r3, r0
 800db5a:	4608      	mov	r0, r1
 800db5c:	b141      	cbz	r1, 800db70 <__ascii_wctomb+0x18>
 800db5e:	2aff      	cmp	r2, #255	; 0xff
 800db60:	d904      	bls.n	800db6c <__ascii_wctomb+0x14>
 800db62:	228a      	movs	r2, #138	; 0x8a
 800db64:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800db68:	601a      	str	r2, [r3, #0]
 800db6a:	4770      	bx	lr
 800db6c:	2001      	movs	r0, #1
 800db6e:	700a      	strb	r2, [r1, #0]
 800db70:	4770      	bx	lr
	...

0800db74 <__swsetup_r>:
 800db74:	4b32      	ldr	r3, [pc, #200]	; (800dc40 <__swsetup_r+0xcc>)
 800db76:	b570      	push	{r4, r5, r6, lr}
 800db78:	681d      	ldr	r5, [r3, #0]
 800db7a:	4606      	mov	r6, r0
 800db7c:	460c      	mov	r4, r1
 800db7e:	b125      	cbz	r5, 800db8a <__swsetup_r+0x16>
 800db80:	69ab      	ldr	r3, [r5, #24]
 800db82:	b913      	cbnz	r3, 800db8a <__swsetup_r+0x16>
 800db84:	4628      	mov	r0, r5
 800db86:	f000 f985 	bl	800de94 <__sinit>
 800db8a:	4b2e      	ldr	r3, [pc, #184]	; (800dc44 <__swsetup_r+0xd0>)
 800db8c:	429c      	cmp	r4, r3
 800db8e:	d10f      	bne.n	800dbb0 <__swsetup_r+0x3c>
 800db90:	686c      	ldr	r4, [r5, #4]
 800db92:	89a3      	ldrh	r3, [r4, #12]
 800db94:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800db98:	0719      	lsls	r1, r3, #28
 800db9a:	d42c      	bmi.n	800dbf6 <__swsetup_r+0x82>
 800db9c:	06dd      	lsls	r5, r3, #27
 800db9e:	d411      	bmi.n	800dbc4 <__swsetup_r+0x50>
 800dba0:	2309      	movs	r3, #9
 800dba2:	6033      	str	r3, [r6, #0]
 800dba4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800dba8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800dbac:	81a3      	strh	r3, [r4, #12]
 800dbae:	e03e      	b.n	800dc2e <__swsetup_r+0xba>
 800dbb0:	4b25      	ldr	r3, [pc, #148]	; (800dc48 <__swsetup_r+0xd4>)
 800dbb2:	429c      	cmp	r4, r3
 800dbb4:	d101      	bne.n	800dbba <__swsetup_r+0x46>
 800dbb6:	68ac      	ldr	r4, [r5, #8]
 800dbb8:	e7eb      	b.n	800db92 <__swsetup_r+0x1e>
 800dbba:	4b24      	ldr	r3, [pc, #144]	; (800dc4c <__swsetup_r+0xd8>)
 800dbbc:	429c      	cmp	r4, r3
 800dbbe:	bf08      	it	eq
 800dbc0:	68ec      	ldreq	r4, [r5, #12]
 800dbc2:	e7e6      	b.n	800db92 <__swsetup_r+0x1e>
 800dbc4:	0758      	lsls	r0, r3, #29
 800dbc6:	d512      	bpl.n	800dbee <__swsetup_r+0x7a>
 800dbc8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800dbca:	b141      	cbz	r1, 800dbde <__swsetup_r+0x6a>
 800dbcc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800dbd0:	4299      	cmp	r1, r3
 800dbd2:	d002      	beq.n	800dbda <__swsetup_r+0x66>
 800dbd4:	4630      	mov	r0, r6
 800dbd6:	f7ff fb75 	bl	800d2c4 <_free_r>
 800dbda:	2300      	movs	r3, #0
 800dbdc:	6363      	str	r3, [r4, #52]	; 0x34
 800dbde:	89a3      	ldrh	r3, [r4, #12]
 800dbe0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800dbe4:	81a3      	strh	r3, [r4, #12]
 800dbe6:	2300      	movs	r3, #0
 800dbe8:	6063      	str	r3, [r4, #4]
 800dbea:	6923      	ldr	r3, [r4, #16]
 800dbec:	6023      	str	r3, [r4, #0]
 800dbee:	89a3      	ldrh	r3, [r4, #12]
 800dbf0:	f043 0308 	orr.w	r3, r3, #8
 800dbf4:	81a3      	strh	r3, [r4, #12]
 800dbf6:	6923      	ldr	r3, [r4, #16]
 800dbf8:	b94b      	cbnz	r3, 800dc0e <__swsetup_r+0x9a>
 800dbfa:	89a3      	ldrh	r3, [r4, #12]
 800dbfc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800dc00:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800dc04:	d003      	beq.n	800dc0e <__swsetup_r+0x9a>
 800dc06:	4621      	mov	r1, r4
 800dc08:	4630      	mov	r0, r6
 800dc0a:	f000 fa07 	bl	800e01c <__smakebuf_r>
 800dc0e:	89a0      	ldrh	r0, [r4, #12]
 800dc10:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800dc14:	f010 0301 	ands.w	r3, r0, #1
 800dc18:	d00a      	beq.n	800dc30 <__swsetup_r+0xbc>
 800dc1a:	2300      	movs	r3, #0
 800dc1c:	60a3      	str	r3, [r4, #8]
 800dc1e:	6963      	ldr	r3, [r4, #20]
 800dc20:	425b      	negs	r3, r3
 800dc22:	61a3      	str	r3, [r4, #24]
 800dc24:	6923      	ldr	r3, [r4, #16]
 800dc26:	b943      	cbnz	r3, 800dc3a <__swsetup_r+0xc6>
 800dc28:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800dc2c:	d1ba      	bne.n	800dba4 <__swsetup_r+0x30>
 800dc2e:	bd70      	pop	{r4, r5, r6, pc}
 800dc30:	0781      	lsls	r1, r0, #30
 800dc32:	bf58      	it	pl
 800dc34:	6963      	ldrpl	r3, [r4, #20]
 800dc36:	60a3      	str	r3, [r4, #8]
 800dc38:	e7f4      	b.n	800dc24 <__swsetup_r+0xb0>
 800dc3a:	2000      	movs	r0, #0
 800dc3c:	e7f7      	b.n	800dc2e <__swsetup_r+0xba>
 800dc3e:	bf00      	nop
 800dc40:	20000058 	.word	0x20000058
 800dc44:	0800eab4 	.word	0x0800eab4
 800dc48:	0800ead4 	.word	0x0800ead4
 800dc4c:	0800ea94 	.word	0x0800ea94

0800dc50 <abort>:
 800dc50:	2006      	movs	r0, #6
 800dc52:	b508      	push	{r3, lr}
 800dc54:	f000 fa52 	bl	800e0fc <raise>
 800dc58:	2001      	movs	r0, #1
 800dc5a:	f7f7 fbde 	bl	800541a <_exit>
	...

0800dc60 <__sflush_r>:
 800dc60:	898a      	ldrh	r2, [r1, #12]
 800dc62:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dc66:	4605      	mov	r5, r0
 800dc68:	0710      	lsls	r0, r2, #28
 800dc6a:	460c      	mov	r4, r1
 800dc6c:	d458      	bmi.n	800dd20 <__sflush_r+0xc0>
 800dc6e:	684b      	ldr	r3, [r1, #4]
 800dc70:	2b00      	cmp	r3, #0
 800dc72:	dc05      	bgt.n	800dc80 <__sflush_r+0x20>
 800dc74:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800dc76:	2b00      	cmp	r3, #0
 800dc78:	dc02      	bgt.n	800dc80 <__sflush_r+0x20>
 800dc7a:	2000      	movs	r0, #0
 800dc7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dc80:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800dc82:	2e00      	cmp	r6, #0
 800dc84:	d0f9      	beq.n	800dc7a <__sflush_r+0x1a>
 800dc86:	2300      	movs	r3, #0
 800dc88:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800dc8c:	682f      	ldr	r7, [r5, #0]
 800dc8e:	602b      	str	r3, [r5, #0]
 800dc90:	d032      	beq.n	800dcf8 <__sflush_r+0x98>
 800dc92:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800dc94:	89a3      	ldrh	r3, [r4, #12]
 800dc96:	075a      	lsls	r2, r3, #29
 800dc98:	d505      	bpl.n	800dca6 <__sflush_r+0x46>
 800dc9a:	6863      	ldr	r3, [r4, #4]
 800dc9c:	1ac0      	subs	r0, r0, r3
 800dc9e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800dca0:	b10b      	cbz	r3, 800dca6 <__sflush_r+0x46>
 800dca2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800dca4:	1ac0      	subs	r0, r0, r3
 800dca6:	2300      	movs	r3, #0
 800dca8:	4602      	mov	r2, r0
 800dcaa:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800dcac:	4628      	mov	r0, r5
 800dcae:	6a21      	ldr	r1, [r4, #32]
 800dcb0:	47b0      	blx	r6
 800dcb2:	1c43      	adds	r3, r0, #1
 800dcb4:	89a3      	ldrh	r3, [r4, #12]
 800dcb6:	d106      	bne.n	800dcc6 <__sflush_r+0x66>
 800dcb8:	6829      	ldr	r1, [r5, #0]
 800dcba:	291d      	cmp	r1, #29
 800dcbc:	d82c      	bhi.n	800dd18 <__sflush_r+0xb8>
 800dcbe:	4a2a      	ldr	r2, [pc, #168]	; (800dd68 <__sflush_r+0x108>)
 800dcc0:	40ca      	lsrs	r2, r1
 800dcc2:	07d6      	lsls	r6, r2, #31
 800dcc4:	d528      	bpl.n	800dd18 <__sflush_r+0xb8>
 800dcc6:	2200      	movs	r2, #0
 800dcc8:	6062      	str	r2, [r4, #4]
 800dcca:	6922      	ldr	r2, [r4, #16]
 800dccc:	04d9      	lsls	r1, r3, #19
 800dcce:	6022      	str	r2, [r4, #0]
 800dcd0:	d504      	bpl.n	800dcdc <__sflush_r+0x7c>
 800dcd2:	1c42      	adds	r2, r0, #1
 800dcd4:	d101      	bne.n	800dcda <__sflush_r+0x7a>
 800dcd6:	682b      	ldr	r3, [r5, #0]
 800dcd8:	b903      	cbnz	r3, 800dcdc <__sflush_r+0x7c>
 800dcda:	6560      	str	r0, [r4, #84]	; 0x54
 800dcdc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800dcde:	602f      	str	r7, [r5, #0]
 800dce0:	2900      	cmp	r1, #0
 800dce2:	d0ca      	beq.n	800dc7a <__sflush_r+0x1a>
 800dce4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800dce8:	4299      	cmp	r1, r3
 800dcea:	d002      	beq.n	800dcf2 <__sflush_r+0x92>
 800dcec:	4628      	mov	r0, r5
 800dcee:	f7ff fae9 	bl	800d2c4 <_free_r>
 800dcf2:	2000      	movs	r0, #0
 800dcf4:	6360      	str	r0, [r4, #52]	; 0x34
 800dcf6:	e7c1      	b.n	800dc7c <__sflush_r+0x1c>
 800dcf8:	6a21      	ldr	r1, [r4, #32]
 800dcfa:	2301      	movs	r3, #1
 800dcfc:	4628      	mov	r0, r5
 800dcfe:	47b0      	blx	r6
 800dd00:	1c41      	adds	r1, r0, #1
 800dd02:	d1c7      	bne.n	800dc94 <__sflush_r+0x34>
 800dd04:	682b      	ldr	r3, [r5, #0]
 800dd06:	2b00      	cmp	r3, #0
 800dd08:	d0c4      	beq.n	800dc94 <__sflush_r+0x34>
 800dd0a:	2b1d      	cmp	r3, #29
 800dd0c:	d001      	beq.n	800dd12 <__sflush_r+0xb2>
 800dd0e:	2b16      	cmp	r3, #22
 800dd10:	d101      	bne.n	800dd16 <__sflush_r+0xb6>
 800dd12:	602f      	str	r7, [r5, #0]
 800dd14:	e7b1      	b.n	800dc7a <__sflush_r+0x1a>
 800dd16:	89a3      	ldrh	r3, [r4, #12]
 800dd18:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800dd1c:	81a3      	strh	r3, [r4, #12]
 800dd1e:	e7ad      	b.n	800dc7c <__sflush_r+0x1c>
 800dd20:	690f      	ldr	r7, [r1, #16]
 800dd22:	2f00      	cmp	r7, #0
 800dd24:	d0a9      	beq.n	800dc7a <__sflush_r+0x1a>
 800dd26:	0793      	lsls	r3, r2, #30
 800dd28:	bf18      	it	ne
 800dd2a:	2300      	movne	r3, #0
 800dd2c:	680e      	ldr	r6, [r1, #0]
 800dd2e:	bf08      	it	eq
 800dd30:	694b      	ldreq	r3, [r1, #20]
 800dd32:	eba6 0807 	sub.w	r8, r6, r7
 800dd36:	600f      	str	r7, [r1, #0]
 800dd38:	608b      	str	r3, [r1, #8]
 800dd3a:	f1b8 0f00 	cmp.w	r8, #0
 800dd3e:	dd9c      	ble.n	800dc7a <__sflush_r+0x1a>
 800dd40:	4643      	mov	r3, r8
 800dd42:	463a      	mov	r2, r7
 800dd44:	4628      	mov	r0, r5
 800dd46:	6a21      	ldr	r1, [r4, #32]
 800dd48:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800dd4a:	47b0      	blx	r6
 800dd4c:	2800      	cmp	r0, #0
 800dd4e:	dc06      	bgt.n	800dd5e <__sflush_r+0xfe>
 800dd50:	89a3      	ldrh	r3, [r4, #12]
 800dd52:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800dd56:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800dd5a:	81a3      	strh	r3, [r4, #12]
 800dd5c:	e78e      	b.n	800dc7c <__sflush_r+0x1c>
 800dd5e:	4407      	add	r7, r0
 800dd60:	eba8 0800 	sub.w	r8, r8, r0
 800dd64:	e7e9      	b.n	800dd3a <__sflush_r+0xda>
 800dd66:	bf00      	nop
 800dd68:	20400001 	.word	0x20400001

0800dd6c <_fflush_r>:
 800dd6c:	b538      	push	{r3, r4, r5, lr}
 800dd6e:	690b      	ldr	r3, [r1, #16]
 800dd70:	4605      	mov	r5, r0
 800dd72:	460c      	mov	r4, r1
 800dd74:	b913      	cbnz	r3, 800dd7c <_fflush_r+0x10>
 800dd76:	2500      	movs	r5, #0
 800dd78:	4628      	mov	r0, r5
 800dd7a:	bd38      	pop	{r3, r4, r5, pc}
 800dd7c:	b118      	cbz	r0, 800dd86 <_fflush_r+0x1a>
 800dd7e:	6983      	ldr	r3, [r0, #24]
 800dd80:	b90b      	cbnz	r3, 800dd86 <_fflush_r+0x1a>
 800dd82:	f000 f887 	bl	800de94 <__sinit>
 800dd86:	4b14      	ldr	r3, [pc, #80]	; (800ddd8 <_fflush_r+0x6c>)
 800dd88:	429c      	cmp	r4, r3
 800dd8a:	d11b      	bne.n	800ddc4 <_fflush_r+0x58>
 800dd8c:	686c      	ldr	r4, [r5, #4]
 800dd8e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800dd92:	2b00      	cmp	r3, #0
 800dd94:	d0ef      	beq.n	800dd76 <_fflush_r+0xa>
 800dd96:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800dd98:	07d0      	lsls	r0, r2, #31
 800dd9a:	d404      	bmi.n	800dda6 <_fflush_r+0x3a>
 800dd9c:	0599      	lsls	r1, r3, #22
 800dd9e:	d402      	bmi.n	800dda6 <_fflush_r+0x3a>
 800dda0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800dda2:	f000 f915 	bl	800dfd0 <__retarget_lock_acquire_recursive>
 800dda6:	4628      	mov	r0, r5
 800dda8:	4621      	mov	r1, r4
 800ddaa:	f7ff ff59 	bl	800dc60 <__sflush_r>
 800ddae:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ddb0:	4605      	mov	r5, r0
 800ddb2:	07da      	lsls	r2, r3, #31
 800ddb4:	d4e0      	bmi.n	800dd78 <_fflush_r+0xc>
 800ddb6:	89a3      	ldrh	r3, [r4, #12]
 800ddb8:	059b      	lsls	r3, r3, #22
 800ddba:	d4dd      	bmi.n	800dd78 <_fflush_r+0xc>
 800ddbc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ddbe:	f000 f908 	bl	800dfd2 <__retarget_lock_release_recursive>
 800ddc2:	e7d9      	b.n	800dd78 <_fflush_r+0xc>
 800ddc4:	4b05      	ldr	r3, [pc, #20]	; (800dddc <_fflush_r+0x70>)
 800ddc6:	429c      	cmp	r4, r3
 800ddc8:	d101      	bne.n	800ddce <_fflush_r+0x62>
 800ddca:	68ac      	ldr	r4, [r5, #8]
 800ddcc:	e7df      	b.n	800dd8e <_fflush_r+0x22>
 800ddce:	4b04      	ldr	r3, [pc, #16]	; (800dde0 <_fflush_r+0x74>)
 800ddd0:	429c      	cmp	r4, r3
 800ddd2:	bf08      	it	eq
 800ddd4:	68ec      	ldreq	r4, [r5, #12]
 800ddd6:	e7da      	b.n	800dd8e <_fflush_r+0x22>
 800ddd8:	0800eab4 	.word	0x0800eab4
 800dddc:	0800ead4 	.word	0x0800ead4
 800dde0:	0800ea94 	.word	0x0800ea94

0800dde4 <std>:
 800dde4:	2300      	movs	r3, #0
 800dde6:	b510      	push	{r4, lr}
 800dde8:	4604      	mov	r4, r0
 800ddea:	e9c0 3300 	strd	r3, r3, [r0]
 800ddee:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800ddf2:	6083      	str	r3, [r0, #8]
 800ddf4:	8181      	strh	r1, [r0, #12]
 800ddf6:	6643      	str	r3, [r0, #100]	; 0x64
 800ddf8:	81c2      	strh	r2, [r0, #14]
 800ddfa:	6183      	str	r3, [r0, #24]
 800ddfc:	4619      	mov	r1, r3
 800ddfe:	2208      	movs	r2, #8
 800de00:	305c      	adds	r0, #92	; 0x5c
 800de02:	f7fd fb41 	bl	800b488 <memset>
 800de06:	4b05      	ldr	r3, [pc, #20]	; (800de1c <std+0x38>)
 800de08:	6224      	str	r4, [r4, #32]
 800de0a:	6263      	str	r3, [r4, #36]	; 0x24
 800de0c:	4b04      	ldr	r3, [pc, #16]	; (800de20 <std+0x3c>)
 800de0e:	62a3      	str	r3, [r4, #40]	; 0x28
 800de10:	4b04      	ldr	r3, [pc, #16]	; (800de24 <std+0x40>)
 800de12:	62e3      	str	r3, [r4, #44]	; 0x2c
 800de14:	4b04      	ldr	r3, [pc, #16]	; (800de28 <std+0x44>)
 800de16:	6323      	str	r3, [r4, #48]	; 0x30
 800de18:	bd10      	pop	{r4, pc}
 800de1a:	bf00      	nop
 800de1c:	0800e135 	.word	0x0800e135
 800de20:	0800e157 	.word	0x0800e157
 800de24:	0800e18f 	.word	0x0800e18f
 800de28:	0800e1b3 	.word	0x0800e1b3

0800de2c <_cleanup_r>:
 800de2c:	4901      	ldr	r1, [pc, #4]	; (800de34 <_cleanup_r+0x8>)
 800de2e:	f000 b8af 	b.w	800df90 <_fwalk_reent>
 800de32:	bf00      	nop
 800de34:	0800dd6d 	.word	0x0800dd6d

0800de38 <__sfmoreglue>:
 800de38:	b570      	push	{r4, r5, r6, lr}
 800de3a:	2568      	movs	r5, #104	; 0x68
 800de3c:	1e4a      	subs	r2, r1, #1
 800de3e:	4355      	muls	r5, r2
 800de40:	460e      	mov	r6, r1
 800de42:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800de46:	f7ff fa89 	bl	800d35c <_malloc_r>
 800de4a:	4604      	mov	r4, r0
 800de4c:	b140      	cbz	r0, 800de60 <__sfmoreglue+0x28>
 800de4e:	2100      	movs	r1, #0
 800de50:	e9c0 1600 	strd	r1, r6, [r0]
 800de54:	300c      	adds	r0, #12
 800de56:	60a0      	str	r0, [r4, #8]
 800de58:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800de5c:	f7fd fb14 	bl	800b488 <memset>
 800de60:	4620      	mov	r0, r4
 800de62:	bd70      	pop	{r4, r5, r6, pc}

0800de64 <__sfp_lock_acquire>:
 800de64:	4801      	ldr	r0, [pc, #4]	; (800de6c <__sfp_lock_acquire+0x8>)
 800de66:	f000 b8b3 	b.w	800dfd0 <__retarget_lock_acquire_recursive>
 800de6a:	bf00      	nop
 800de6c:	200005f8 	.word	0x200005f8

0800de70 <__sfp_lock_release>:
 800de70:	4801      	ldr	r0, [pc, #4]	; (800de78 <__sfp_lock_release+0x8>)
 800de72:	f000 b8ae 	b.w	800dfd2 <__retarget_lock_release_recursive>
 800de76:	bf00      	nop
 800de78:	200005f8 	.word	0x200005f8

0800de7c <__sinit_lock_acquire>:
 800de7c:	4801      	ldr	r0, [pc, #4]	; (800de84 <__sinit_lock_acquire+0x8>)
 800de7e:	f000 b8a7 	b.w	800dfd0 <__retarget_lock_acquire_recursive>
 800de82:	bf00      	nop
 800de84:	200005f3 	.word	0x200005f3

0800de88 <__sinit_lock_release>:
 800de88:	4801      	ldr	r0, [pc, #4]	; (800de90 <__sinit_lock_release+0x8>)
 800de8a:	f000 b8a2 	b.w	800dfd2 <__retarget_lock_release_recursive>
 800de8e:	bf00      	nop
 800de90:	200005f3 	.word	0x200005f3

0800de94 <__sinit>:
 800de94:	b510      	push	{r4, lr}
 800de96:	4604      	mov	r4, r0
 800de98:	f7ff fff0 	bl	800de7c <__sinit_lock_acquire>
 800de9c:	69a3      	ldr	r3, [r4, #24]
 800de9e:	b11b      	cbz	r3, 800dea8 <__sinit+0x14>
 800dea0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800dea4:	f7ff bff0 	b.w	800de88 <__sinit_lock_release>
 800dea8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800deac:	6523      	str	r3, [r4, #80]	; 0x50
 800deae:	4b13      	ldr	r3, [pc, #76]	; (800defc <__sinit+0x68>)
 800deb0:	4a13      	ldr	r2, [pc, #76]	; (800df00 <__sinit+0x6c>)
 800deb2:	681b      	ldr	r3, [r3, #0]
 800deb4:	62a2      	str	r2, [r4, #40]	; 0x28
 800deb6:	42a3      	cmp	r3, r4
 800deb8:	bf08      	it	eq
 800deba:	2301      	moveq	r3, #1
 800debc:	4620      	mov	r0, r4
 800debe:	bf08      	it	eq
 800dec0:	61a3      	streq	r3, [r4, #24]
 800dec2:	f000 f81f 	bl	800df04 <__sfp>
 800dec6:	6060      	str	r0, [r4, #4]
 800dec8:	4620      	mov	r0, r4
 800deca:	f000 f81b 	bl	800df04 <__sfp>
 800dece:	60a0      	str	r0, [r4, #8]
 800ded0:	4620      	mov	r0, r4
 800ded2:	f000 f817 	bl	800df04 <__sfp>
 800ded6:	2200      	movs	r2, #0
 800ded8:	2104      	movs	r1, #4
 800deda:	60e0      	str	r0, [r4, #12]
 800dedc:	6860      	ldr	r0, [r4, #4]
 800dede:	f7ff ff81 	bl	800dde4 <std>
 800dee2:	2201      	movs	r2, #1
 800dee4:	2109      	movs	r1, #9
 800dee6:	68a0      	ldr	r0, [r4, #8]
 800dee8:	f7ff ff7c 	bl	800dde4 <std>
 800deec:	2202      	movs	r2, #2
 800deee:	2112      	movs	r1, #18
 800def0:	68e0      	ldr	r0, [r4, #12]
 800def2:	f7ff ff77 	bl	800dde4 <std>
 800def6:	2301      	movs	r3, #1
 800def8:	61a3      	str	r3, [r4, #24]
 800defa:	e7d1      	b.n	800dea0 <__sinit+0xc>
 800defc:	0800e710 	.word	0x0800e710
 800df00:	0800de2d 	.word	0x0800de2d

0800df04 <__sfp>:
 800df04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800df06:	4607      	mov	r7, r0
 800df08:	f7ff ffac 	bl	800de64 <__sfp_lock_acquire>
 800df0c:	4b1e      	ldr	r3, [pc, #120]	; (800df88 <__sfp+0x84>)
 800df0e:	681e      	ldr	r6, [r3, #0]
 800df10:	69b3      	ldr	r3, [r6, #24]
 800df12:	b913      	cbnz	r3, 800df1a <__sfp+0x16>
 800df14:	4630      	mov	r0, r6
 800df16:	f7ff ffbd 	bl	800de94 <__sinit>
 800df1a:	3648      	adds	r6, #72	; 0x48
 800df1c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800df20:	3b01      	subs	r3, #1
 800df22:	d503      	bpl.n	800df2c <__sfp+0x28>
 800df24:	6833      	ldr	r3, [r6, #0]
 800df26:	b30b      	cbz	r3, 800df6c <__sfp+0x68>
 800df28:	6836      	ldr	r6, [r6, #0]
 800df2a:	e7f7      	b.n	800df1c <__sfp+0x18>
 800df2c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800df30:	b9d5      	cbnz	r5, 800df68 <__sfp+0x64>
 800df32:	4b16      	ldr	r3, [pc, #88]	; (800df8c <__sfp+0x88>)
 800df34:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800df38:	60e3      	str	r3, [r4, #12]
 800df3a:	6665      	str	r5, [r4, #100]	; 0x64
 800df3c:	f000 f847 	bl	800dfce <__retarget_lock_init_recursive>
 800df40:	f7ff ff96 	bl	800de70 <__sfp_lock_release>
 800df44:	2208      	movs	r2, #8
 800df46:	4629      	mov	r1, r5
 800df48:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800df4c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800df50:	6025      	str	r5, [r4, #0]
 800df52:	61a5      	str	r5, [r4, #24]
 800df54:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800df58:	f7fd fa96 	bl	800b488 <memset>
 800df5c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800df60:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800df64:	4620      	mov	r0, r4
 800df66:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800df68:	3468      	adds	r4, #104	; 0x68
 800df6a:	e7d9      	b.n	800df20 <__sfp+0x1c>
 800df6c:	2104      	movs	r1, #4
 800df6e:	4638      	mov	r0, r7
 800df70:	f7ff ff62 	bl	800de38 <__sfmoreglue>
 800df74:	4604      	mov	r4, r0
 800df76:	6030      	str	r0, [r6, #0]
 800df78:	2800      	cmp	r0, #0
 800df7a:	d1d5      	bne.n	800df28 <__sfp+0x24>
 800df7c:	f7ff ff78 	bl	800de70 <__sfp_lock_release>
 800df80:	230c      	movs	r3, #12
 800df82:	603b      	str	r3, [r7, #0]
 800df84:	e7ee      	b.n	800df64 <__sfp+0x60>
 800df86:	bf00      	nop
 800df88:	0800e710 	.word	0x0800e710
 800df8c:	ffff0001 	.word	0xffff0001

0800df90 <_fwalk_reent>:
 800df90:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800df94:	4606      	mov	r6, r0
 800df96:	4688      	mov	r8, r1
 800df98:	2700      	movs	r7, #0
 800df9a:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800df9e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800dfa2:	f1b9 0901 	subs.w	r9, r9, #1
 800dfa6:	d505      	bpl.n	800dfb4 <_fwalk_reent+0x24>
 800dfa8:	6824      	ldr	r4, [r4, #0]
 800dfaa:	2c00      	cmp	r4, #0
 800dfac:	d1f7      	bne.n	800df9e <_fwalk_reent+0xe>
 800dfae:	4638      	mov	r0, r7
 800dfb0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800dfb4:	89ab      	ldrh	r3, [r5, #12]
 800dfb6:	2b01      	cmp	r3, #1
 800dfb8:	d907      	bls.n	800dfca <_fwalk_reent+0x3a>
 800dfba:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800dfbe:	3301      	adds	r3, #1
 800dfc0:	d003      	beq.n	800dfca <_fwalk_reent+0x3a>
 800dfc2:	4629      	mov	r1, r5
 800dfc4:	4630      	mov	r0, r6
 800dfc6:	47c0      	blx	r8
 800dfc8:	4307      	orrs	r7, r0
 800dfca:	3568      	adds	r5, #104	; 0x68
 800dfcc:	e7e9      	b.n	800dfa2 <_fwalk_reent+0x12>

0800dfce <__retarget_lock_init_recursive>:
 800dfce:	4770      	bx	lr

0800dfd0 <__retarget_lock_acquire_recursive>:
 800dfd0:	4770      	bx	lr

0800dfd2 <__retarget_lock_release_recursive>:
 800dfd2:	4770      	bx	lr

0800dfd4 <__swhatbuf_r>:
 800dfd4:	b570      	push	{r4, r5, r6, lr}
 800dfd6:	460e      	mov	r6, r1
 800dfd8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800dfdc:	4614      	mov	r4, r2
 800dfde:	2900      	cmp	r1, #0
 800dfe0:	461d      	mov	r5, r3
 800dfe2:	b096      	sub	sp, #88	; 0x58
 800dfe4:	da07      	bge.n	800dff6 <__swhatbuf_r+0x22>
 800dfe6:	2300      	movs	r3, #0
 800dfe8:	602b      	str	r3, [r5, #0]
 800dfea:	89b3      	ldrh	r3, [r6, #12]
 800dfec:	061a      	lsls	r2, r3, #24
 800dfee:	d410      	bmi.n	800e012 <__swhatbuf_r+0x3e>
 800dff0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800dff4:	e00e      	b.n	800e014 <__swhatbuf_r+0x40>
 800dff6:	466a      	mov	r2, sp
 800dff8:	f000 f902 	bl	800e200 <_fstat_r>
 800dffc:	2800      	cmp	r0, #0
 800dffe:	dbf2      	blt.n	800dfe6 <__swhatbuf_r+0x12>
 800e000:	9a01      	ldr	r2, [sp, #4]
 800e002:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800e006:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800e00a:	425a      	negs	r2, r3
 800e00c:	415a      	adcs	r2, r3
 800e00e:	602a      	str	r2, [r5, #0]
 800e010:	e7ee      	b.n	800dff0 <__swhatbuf_r+0x1c>
 800e012:	2340      	movs	r3, #64	; 0x40
 800e014:	2000      	movs	r0, #0
 800e016:	6023      	str	r3, [r4, #0]
 800e018:	b016      	add	sp, #88	; 0x58
 800e01a:	bd70      	pop	{r4, r5, r6, pc}

0800e01c <__smakebuf_r>:
 800e01c:	898b      	ldrh	r3, [r1, #12]
 800e01e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800e020:	079d      	lsls	r5, r3, #30
 800e022:	4606      	mov	r6, r0
 800e024:	460c      	mov	r4, r1
 800e026:	d507      	bpl.n	800e038 <__smakebuf_r+0x1c>
 800e028:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800e02c:	6023      	str	r3, [r4, #0]
 800e02e:	6123      	str	r3, [r4, #16]
 800e030:	2301      	movs	r3, #1
 800e032:	6163      	str	r3, [r4, #20]
 800e034:	b002      	add	sp, #8
 800e036:	bd70      	pop	{r4, r5, r6, pc}
 800e038:	466a      	mov	r2, sp
 800e03a:	ab01      	add	r3, sp, #4
 800e03c:	f7ff ffca 	bl	800dfd4 <__swhatbuf_r>
 800e040:	9900      	ldr	r1, [sp, #0]
 800e042:	4605      	mov	r5, r0
 800e044:	4630      	mov	r0, r6
 800e046:	f7ff f989 	bl	800d35c <_malloc_r>
 800e04a:	b948      	cbnz	r0, 800e060 <__smakebuf_r+0x44>
 800e04c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e050:	059a      	lsls	r2, r3, #22
 800e052:	d4ef      	bmi.n	800e034 <__smakebuf_r+0x18>
 800e054:	f023 0303 	bic.w	r3, r3, #3
 800e058:	f043 0302 	orr.w	r3, r3, #2
 800e05c:	81a3      	strh	r3, [r4, #12]
 800e05e:	e7e3      	b.n	800e028 <__smakebuf_r+0xc>
 800e060:	4b0d      	ldr	r3, [pc, #52]	; (800e098 <__smakebuf_r+0x7c>)
 800e062:	62b3      	str	r3, [r6, #40]	; 0x28
 800e064:	89a3      	ldrh	r3, [r4, #12]
 800e066:	6020      	str	r0, [r4, #0]
 800e068:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e06c:	81a3      	strh	r3, [r4, #12]
 800e06e:	9b00      	ldr	r3, [sp, #0]
 800e070:	6120      	str	r0, [r4, #16]
 800e072:	6163      	str	r3, [r4, #20]
 800e074:	9b01      	ldr	r3, [sp, #4]
 800e076:	b15b      	cbz	r3, 800e090 <__smakebuf_r+0x74>
 800e078:	4630      	mov	r0, r6
 800e07a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e07e:	f000 f8d1 	bl	800e224 <_isatty_r>
 800e082:	b128      	cbz	r0, 800e090 <__smakebuf_r+0x74>
 800e084:	89a3      	ldrh	r3, [r4, #12]
 800e086:	f023 0303 	bic.w	r3, r3, #3
 800e08a:	f043 0301 	orr.w	r3, r3, #1
 800e08e:	81a3      	strh	r3, [r4, #12]
 800e090:	89a0      	ldrh	r0, [r4, #12]
 800e092:	4305      	orrs	r5, r0
 800e094:	81a5      	strh	r5, [r4, #12]
 800e096:	e7cd      	b.n	800e034 <__smakebuf_r+0x18>
 800e098:	0800de2d 	.word	0x0800de2d

0800e09c <_malloc_usable_size_r>:
 800e09c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e0a0:	1f18      	subs	r0, r3, #4
 800e0a2:	2b00      	cmp	r3, #0
 800e0a4:	bfbc      	itt	lt
 800e0a6:	580b      	ldrlt	r3, [r1, r0]
 800e0a8:	18c0      	addlt	r0, r0, r3
 800e0aa:	4770      	bx	lr

0800e0ac <_raise_r>:
 800e0ac:	291f      	cmp	r1, #31
 800e0ae:	b538      	push	{r3, r4, r5, lr}
 800e0b0:	4604      	mov	r4, r0
 800e0b2:	460d      	mov	r5, r1
 800e0b4:	d904      	bls.n	800e0c0 <_raise_r+0x14>
 800e0b6:	2316      	movs	r3, #22
 800e0b8:	6003      	str	r3, [r0, #0]
 800e0ba:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800e0be:	bd38      	pop	{r3, r4, r5, pc}
 800e0c0:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800e0c2:	b112      	cbz	r2, 800e0ca <_raise_r+0x1e>
 800e0c4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800e0c8:	b94b      	cbnz	r3, 800e0de <_raise_r+0x32>
 800e0ca:	4620      	mov	r0, r4
 800e0cc:	f000 f830 	bl	800e130 <_getpid_r>
 800e0d0:	462a      	mov	r2, r5
 800e0d2:	4601      	mov	r1, r0
 800e0d4:	4620      	mov	r0, r4
 800e0d6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e0da:	f000 b817 	b.w	800e10c <_kill_r>
 800e0de:	2b01      	cmp	r3, #1
 800e0e0:	d00a      	beq.n	800e0f8 <_raise_r+0x4c>
 800e0e2:	1c59      	adds	r1, r3, #1
 800e0e4:	d103      	bne.n	800e0ee <_raise_r+0x42>
 800e0e6:	2316      	movs	r3, #22
 800e0e8:	6003      	str	r3, [r0, #0]
 800e0ea:	2001      	movs	r0, #1
 800e0ec:	e7e7      	b.n	800e0be <_raise_r+0x12>
 800e0ee:	2400      	movs	r4, #0
 800e0f0:	4628      	mov	r0, r5
 800e0f2:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800e0f6:	4798      	blx	r3
 800e0f8:	2000      	movs	r0, #0
 800e0fa:	e7e0      	b.n	800e0be <_raise_r+0x12>

0800e0fc <raise>:
 800e0fc:	4b02      	ldr	r3, [pc, #8]	; (800e108 <raise+0xc>)
 800e0fe:	4601      	mov	r1, r0
 800e100:	6818      	ldr	r0, [r3, #0]
 800e102:	f7ff bfd3 	b.w	800e0ac <_raise_r>
 800e106:	bf00      	nop
 800e108:	20000058 	.word	0x20000058

0800e10c <_kill_r>:
 800e10c:	b538      	push	{r3, r4, r5, lr}
 800e10e:	2300      	movs	r3, #0
 800e110:	4d06      	ldr	r5, [pc, #24]	; (800e12c <_kill_r+0x20>)
 800e112:	4604      	mov	r4, r0
 800e114:	4608      	mov	r0, r1
 800e116:	4611      	mov	r1, r2
 800e118:	602b      	str	r3, [r5, #0]
 800e11a:	f7f7 f96e 	bl	80053fa <_kill>
 800e11e:	1c43      	adds	r3, r0, #1
 800e120:	d102      	bne.n	800e128 <_kill_r+0x1c>
 800e122:	682b      	ldr	r3, [r5, #0]
 800e124:	b103      	cbz	r3, 800e128 <_kill_r+0x1c>
 800e126:	6023      	str	r3, [r4, #0]
 800e128:	bd38      	pop	{r3, r4, r5, pc}
 800e12a:	bf00      	nop
 800e12c:	200005ec 	.word	0x200005ec

0800e130 <_getpid_r>:
 800e130:	f7f7 b95c 	b.w	80053ec <_getpid>

0800e134 <__sread>:
 800e134:	b510      	push	{r4, lr}
 800e136:	460c      	mov	r4, r1
 800e138:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e13c:	f000 f894 	bl	800e268 <_read_r>
 800e140:	2800      	cmp	r0, #0
 800e142:	bfab      	itete	ge
 800e144:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800e146:	89a3      	ldrhlt	r3, [r4, #12]
 800e148:	181b      	addge	r3, r3, r0
 800e14a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800e14e:	bfac      	ite	ge
 800e150:	6563      	strge	r3, [r4, #84]	; 0x54
 800e152:	81a3      	strhlt	r3, [r4, #12]
 800e154:	bd10      	pop	{r4, pc}

0800e156 <__swrite>:
 800e156:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e15a:	461f      	mov	r7, r3
 800e15c:	898b      	ldrh	r3, [r1, #12]
 800e15e:	4605      	mov	r5, r0
 800e160:	05db      	lsls	r3, r3, #23
 800e162:	460c      	mov	r4, r1
 800e164:	4616      	mov	r6, r2
 800e166:	d505      	bpl.n	800e174 <__swrite+0x1e>
 800e168:	2302      	movs	r3, #2
 800e16a:	2200      	movs	r2, #0
 800e16c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e170:	f000 f868 	bl	800e244 <_lseek_r>
 800e174:	89a3      	ldrh	r3, [r4, #12]
 800e176:	4632      	mov	r2, r6
 800e178:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800e17c:	81a3      	strh	r3, [r4, #12]
 800e17e:	4628      	mov	r0, r5
 800e180:	463b      	mov	r3, r7
 800e182:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e186:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e18a:	f000 b817 	b.w	800e1bc <_write_r>

0800e18e <__sseek>:
 800e18e:	b510      	push	{r4, lr}
 800e190:	460c      	mov	r4, r1
 800e192:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e196:	f000 f855 	bl	800e244 <_lseek_r>
 800e19a:	1c43      	adds	r3, r0, #1
 800e19c:	89a3      	ldrh	r3, [r4, #12]
 800e19e:	bf15      	itete	ne
 800e1a0:	6560      	strne	r0, [r4, #84]	; 0x54
 800e1a2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800e1a6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800e1aa:	81a3      	strheq	r3, [r4, #12]
 800e1ac:	bf18      	it	ne
 800e1ae:	81a3      	strhne	r3, [r4, #12]
 800e1b0:	bd10      	pop	{r4, pc}

0800e1b2 <__sclose>:
 800e1b2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e1b6:	f000 b813 	b.w	800e1e0 <_close_r>
	...

0800e1bc <_write_r>:
 800e1bc:	b538      	push	{r3, r4, r5, lr}
 800e1be:	4604      	mov	r4, r0
 800e1c0:	4608      	mov	r0, r1
 800e1c2:	4611      	mov	r1, r2
 800e1c4:	2200      	movs	r2, #0
 800e1c6:	4d05      	ldr	r5, [pc, #20]	; (800e1dc <_write_r+0x20>)
 800e1c8:	602a      	str	r2, [r5, #0]
 800e1ca:	461a      	mov	r2, r3
 800e1cc:	f7f7 f94c 	bl	8005468 <_write>
 800e1d0:	1c43      	adds	r3, r0, #1
 800e1d2:	d102      	bne.n	800e1da <_write_r+0x1e>
 800e1d4:	682b      	ldr	r3, [r5, #0]
 800e1d6:	b103      	cbz	r3, 800e1da <_write_r+0x1e>
 800e1d8:	6023      	str	r3, [r4, #0]
 800e1da:	bd38      	pop	{r3, r4, r5, pc}
 800e1dc:	200005ec 	.word	0x200005ec

0800e1e0 <_close_r>:
 800e1e0:	b538      	push	{r3, r4, r5, lr}
 800e1e2:	2300      	movs	r3, #0
 800e1e4:	4d05      	ldr	r5, [pc, #20]	; (800e1fc <_close_r+0x1c>)
 800e1e6:	4604      	mov	r4, r0
 800e1e8:	4608      	mov	r0, r1
 800e1ea:	602b      	str	r3, [r5, #0]
 800e1ec:	f7f7 f958 	bl	80054a0 <_close>
 800e1f0:	1c43      	adds	r3, r0, #1
 800e1f2:	d102      	bne.n	800e1fa <_close_r+0x1a>
 800e1f4:	682b      	ldr	r3, [r5, #0]
 800e1f6:	b103      	cbz	r3, 800e1fa <_close_r+0x1a>
 800e1f8:	6023      	str	r3, [r4, #0]
 800e1fa:	bd38      	pop	{r3, r4, r5, pc}
 800e1fc:	200005ec 	.word	0x200005ec

0800e200 <_fstat_r>:
 800e200:	b538      	push	{r3, r4, r5, lr}
 800e202:	2300      	movs	r3, #0
 800e204:	4d06      	ldr	r5, [pc, #24]	; (800e220 <_fstat_r+0x20>)
 800e206:	4604      	mov	r4, r0
 800e208:	4608      	mov	r0, r1
 800e20a:	4611      	mov	r1, r2
 800e20c:	602b      	str	r3, [r5, #0]
 800e20e:	f7f7 f952 	bl	80054b6 <_fstat>
 800e212:	1c43      	adds	r3, r0, #1
 800e214:	d102      	bne.n	800e21c <_fstat_r+0x1c>
 800e216:	682b      	ldr	r3, [r5, #0]
 800e218:	b103      	cbz	r3, 800e21c <_fstat_r+0x1c>
 800e21a:	6023      	str	r3, [r4, #0]
 800e21c:	bd38      	pop	{r3, r4, r5, pc}
 800e21e:	bf00      	nop
 800e220:	200005ec 	.word	0x200005ec

0800e224 <_isatty_r>:
 800e224:	b538      	push	{r3, r4, r5, lr}
 800e226:	2300      	movs	r3, #0
 800e228:	4d05      	ldr	r5, [pc, #20]	; (800e240 <_isatty_r+0x1c>)
 800e22a:	4604      	mov	r4, r0
 800e22c:	4608      	mov	r0, r1
 800e22e:	602b      	str	r3, [r5, #0]
 800e230:	f7f7 f950 	bl	80054d4 <_isatty>
 800e234:	1c43      	adds	r3, r0, #1
 800e236:	d102      	bne.n	800e23e <_isatty_r+0x1a>
 800e238:	682b      	ldr	r3, [r5, #0]
 800e23a:	b103      	cbz	r3, 800e23e <_isatty_r+0x1a>
 800e23c:	6023      	str	r3, [r4, #0]
 800e23e:	bd38      	pop	{r3, r4, r5, pc}
 800e240:	200005ec 	.word	0x200005ec

0800e244 <_lseek_r>:
 800e244:	b538      	push	{r3, r4, r5, lr}
 800e246:	4604      	mov	r4, r0
 800e248:	4608      	mov	r0, r1
 800e24a:	4611      	mov	r1, r2
 800e24c:	2200      	movs	r2, #0
 800e24e:	4d05      	ldr	r5, [pc, #20]	; (800e264 <_lseek_r+0x20>)
 800e250:	602a      	str	r2, [r5, #0]
 800e252:	461a      	mov	r2, r3
 800e254:	f7f7 f948 	bl	80054e8 <_lseek>
 800e258:	1c43      	adds	r3, r0, #1
 800e25a:	d102      	bne.n	800e262 <_lseek_r+0x1e>
 800e25c:	682b      	ldr	r3, [r5, #0]
 800e25e:	b103      	cbz	r3, 800e262 <_lseek_r+0x1e>
 800e260:	6023      	str	r3, [r4, #0]
 800e262:	bd38      	pop	{r3, r4, r5, pc}
 800e264:	200005ec 	.word	0x200005ec

0800e268 <_read_r>:
 800e268:	b538      	push	{r3, r4, r5, lr}
 800e26a:	4604      	mov	r4, r0
 800e26c:	4608      	mov	r0, r1
 800e26e:	4611      	mov	r1, r2
 800e270:	2200      	movs	r2, #0
 800e272:	4d05      	ldr	r5, [pc, #20]	; (800e288 <_read_r+0x20>)
 800e274:	602a      	str	r2, [r5, #0]
 800e276:	461a      	mov	r2, r3
 800e278:	f7f7 f8d9 	bl	800542e <_read>
 800e27c:	1c43      	adds	r3, r0, #1
 800e27e:	d102      	bne.n	800e286 <_read_r+0x1e>
 800e280:	682b      	ldr	r3, [r5, #0]
 800e282:	b103      	cbz	r3, 800e286 <_read_r+0x1e>
 800e284:	6023      	str	r3, [r4, #0]
 800e286:	bd38      	pop	{r3, r4, r5, pc}
 800e288:	200005ec 	.word	0x200005ec

0800e28c <_init>:
 800e28c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e28e:	bf00      	nop
 800e290:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e292:	bc08      	pop	{r3}
 800e294:	469e      	mov	lr, r3
 800e296:	4770      	bx	lr

0800e298 <_fini>:
 800e298:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e29a:	bf00      	nop
 800e29c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e29e:	bc08      	pop	{r3}
 800e2a0:	469e      	mov	lr, r3
 800e2a2:	4770      	bx	lr
