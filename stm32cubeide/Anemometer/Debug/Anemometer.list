
Anemometer.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004d1c  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000084  08004e28  08004e28  00014e28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004eac  08004eac  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08004eac  08004eac  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004eac  08004eac  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004eac  08004eac  00014eac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004eb0  08004eb0  00014eb0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08004eb4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002c0  20000070  08004f24  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000330  08004f24  00020330  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f0bf  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002028  00000000  00000000  0002f158  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e00  00000000  00000000  00031180  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000d48  00000000  00000000  00031f80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000182f7  00000000  00000000  00032cc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e54a  00000000  00000000  0004afbf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008c92f  00000000  00000000  00059509  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000e5e38  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003ef4  00000000  00000000  000e5e8c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000070 	.word	0x20000070
 8000128:	00000000 	.word	0x00000000
 800012c:	08004e10 	.word	0x08004e10

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000074 	.word	0x20000074
 8000148:	08004e10 	.word	0x08004e10

0800014c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800014c:	b590      	push	{r4, r7, lr}
 800014e:	b083      	sub	sp, #12
 8000150:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000152:	f000 fff7 	bl	8001144 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000156:	f000 f893 	bl	8000280 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800015a:	f000 fb9d 	bl	8000898 <MX_GPIO_Init>
  MX_DMA_Init();
 800015e:	f000 fb7d 	bl	800085c <MX_DMA_Init>
  MX_TIM1_Init();
 8000162:	f000 f909 	bl	8000378 <MX_TIM1_Init>
  MX_USART1_UART_Init();
 8000166:	f000 fb4f 	bl	8000808 <MX_USART1_UART_Init>
  MX_TIM2_Init();
 800016a:	f000 f9db 	bl	8000524 <MX_TIM2_Init>
  MX_TIM4_Init();
 800016e:	f000 fafd 	bl	800076c <MX_TIM4_Init>
  MX_SPI2_Init();
 8000172:	f000 f8cb 	bl	800030c <MX_SPI2_Init>
  MX_TIM3_Init();
 8000176:	f000 fa65 	bl	8000644 <MX_TIM3_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  sumCounter2 = 0;
 800017a:	4b2e      	ldr	r3, [pc, #184]	; (8000234 <main+0xe8>)
 800017c:	2200      	movs	r2, #0
 800017e:	601a      	str	r2, [r3, #0]
  /* Turn off all multiplexer */
  GPIOB->ODR &= ~((1 << Z1Receive) | (1 << Z2Receive) | (1 << Z3Receive) | (1 << Z4Receive));
 8000180:	4b2d      	ldr	r3, [pc, #180]	; (8000238 <main+0xec>)
 8000182:	68db      	ldr	r3, [r3, #12]
 8000184:	4a2c      	ldr	r2, [pc, #176]	; (8000238 <main+0xec>)
 8000186:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800018a:	f023 0306 	bic.w	r3, r3, #6
 800018e:	60d3      	str	r3, [r2, #12]
   * 4 - Z3 >> Z4
   * 5 - Z4 >> Z3
   * 6 - Z4 >> Z1
   * 7 - Z1 >> Z4
   */
  sprintf(SndBuffer, "\r\n");
 8000190:	492a      	ldr	r1, [pc, #168]	; (800023c <main+0xf0>)
 8000192:	482b      	ldr	r0, [pc, #172]	; (8000240 <main+0xf4>)
 8000194:	f004 fa02 	bl	800459c <siprintf>
  HAL_UART_Transmit(&huart1, (uint8_t *) SndBuffer, sizeof(SndBuffer), 1000);
 8000198:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800019c:	2264      	movs	r2, #100	; 0x64
 800019e:	4928      	ldr	r1, [pc, #160]	; (8000240 <main+0xf4>)
 80001a0:	4828      	ldr	r0, [pc, #160]	; (8000244 <main+0xf8>)
 80001a2:	f004 f85f 	bl	8004264 <HAL_UART_Transmit>
  currentMode = 0;
 80001a6:	4b28      	ldr	r3, [pc, #160]	; (8000248 <main+0xfc>)
 80001a8:	2200      	movs	r2, #0
 80001aa:	801a      	strh	r2, [r3, #0]
  HAL_TIM_Base_Start_IT(&htim4);
 80001ac:	4827      	ldr	r0, [pc, #156]	; (800024c <main+0x100>)
 80001ae:	f002 fa4b 	bl	8002648 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim3);
 80001b2:	4827      	ldr	r0, [pc, #156]	; (8000250 <main+0x104>)
 80001b4:	f002 fa48 	bl	8002648 <HAL_TIM_Base_Start_IT>
  HAL_TIM_IC_Stop_DMA(&htim2, TIM_CHANNEL_1);
 80001b8:	2100      	movs	r1, #0
 80001ba:	4826      	ldr	r0, [pc, #152]	; (8000254 <main+0x108>)
 80001bc:	f002 fdd6 	bl	8002d6c <HAL_TIM_IC_Stop_DMA>
  while (1) {
	  //__HAL_TIM_SET_COUNTER(&htim2, 0x0000);
	  HAL_Delay(1);
 80001c0:	2001      	movs	r0, #1
 80001c2:	f001 f821 	bl	8001208 <HAL_Delay>
	  if (readyFlag) {
 80001c6:	4b24      	ldr	r3, [pc, #144]	; (8000258 <main+0x10c>)
 80001c8:	781b      	ldrb	r3, [r3, #0]
 80001ca:	2b00      	cmp	r3, #0
 80001cc:	d0f8      	beq.n	80001c0 <main+0x74>
		  if (Z12 != 0 && Z21 != 0) {
 80001ce:	4b23      	ldr	r3, [pc, #140]	; (800025c <main+0x110>)
 80001d0:	881b      	ldrh	r3, [r3, #0]
 80001d2:	2b00      	cmp	r3, #0
 80001d4:	d0f4      	beq.n	80001c0 <main+0x74>
 80001d6:	4b22      	ldr	r3, [pc, #136]	; (8000260 <main+0x114>)
 80001d8:	881b      	ldrh	r3, [r3, #0]
 80001da:	2b00      	cmp	r3, #0
 80001dc:	d0f0      	beq.n	80001c0 <main+0x74>
			  //sprintf(SndBuffer, "Z12: %d, Z21: %d, Z23: %d, Z32: %d, Z34: %d, Z43: %d, Z41: %d, Z14: %d\r\n"
			  //		, Z12 % 1600, Z21 % 1600, Z23 % 1600, Z32 % 1600, Z34 % 1600, Z43 % 1600, Z41 % 1600, Z14 % 1600 );
			  //sprintf(SndBuffer, "Diff:%5d, Z12:%5d, Z21:%5d   \r", (int) ((Z12 % 1600) - (Z21 % 1600)), Z12 % 1600, Z21 % 1600);
			  //sprintf(SndBuffer, "Y1:%5d, Z14:%5d, Z41:%5d   \r", Z14 - Z41, Z14, Z41);
			  sprintf(SndBuffer, "X1:%5d, X2:%5d, Y1:%5d, Y2:%5d   \r", Z12 - Z21, Z43 - Z34, Z23 - Z32, Z14 - Z41);
 80001de:	4b1f      	ldr	r3, [pc, #124]	; (800025c <main+0x110>)
 80001e0:	881b      	ldrh	r3, [r3, #0]
 80001e2:	461a      	mov	r2, r3
 80001e4:	4b1e      	ldr	r3, [pc, #120]	; (8000260 <main+0x114>)
 80001e6:	881b      	ldrh	r3, [r3, #0]
 80001e8:	1ad1      	subs	r1, r2, r3
 80001ea:	4b1e      	ldr	r3, [pc, #120]	; (8000264 <main+0x118>)
 80001ec:	881b      	ldrh	r3, [r3, #0]
 80001ee:	461a      	mov	r2, r3
 80001f0:	4b1d      	ldr	r3, [pc, #116]	; (8000268 <main+0x11c>)
 80001f2:	881b      	ldrh	r3, [r3, #0]
 80001f4:	1ad0      	subs	r0, r2, r3
 80001f6:	4b1d      	ldr	r3, [pc, #116]	; (800026c <main+0x120>)
 80001f8:	881b      	ldrh	r3, [r3, #0]
 80001fa:	461a      	mov	r2, r3
 80001fc:	4b1c      	ldr	r3, [pc, #112]	; (8000270 <main+0x124>)
 80001fe:	881b      	ldrh	r3, [r3, #0]
 8000200:	1ad3      	subs	r3, r2, r3
 8000202:	4a1c      	ldr	r2, [pc, #112]	; (8000274 <main+0x128>)
 8000204:	8812      	ldrh	r2, [r2, #0]
 8000206:	4614      	mov	r4, r2
 8000208:	4a1b      	ldr	r2, [pc, #108]	; (8000278 <main+0x12c>)
 800020a:	8812      	ldrh	r2, [r2, #0]
 800020c:	1aa2      	subs	r2, r4, r2
 800020e:	9201      	str	r2, [sp, #4]
 8000210:	9300      	str	r3, [sp, #0]
 8000212:	4603      	mov	r3, r0
 8000214:	460a      	mov	r2, r1
 8000216:	4919      	ldr	r1, [pc, #100]	; (800027c <main+0x130>)
 8000218:	4809      	ldr	r0, [pc, #36]	; (8000240 <main+0xf4>)
 800021a:	f004 f9bf 	bl	800459c <siprintf>
			  HAL_UART_Transmit(&huart1, (uint8_t *) SndBuffer, sizeof(SndBuffer), 1000);
 800021e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000222:	2264      	movs	r2, #100	; 0x64
 8000224:	4906      	ldr	r1, [pc, #24]	; (8000240 <main+0xf4>)
 8000226:	4807      	ldr	r0, [pc, #28]	; (8000244 <main+0xf8>)
 8000228:	f004 f81c 	bl	8004264 <HAL_UART_Transmit>
			  readyFlag = FALSE;
 800022c:	4b0a      	ldr	r3, [pc, #40]	; (8000258 <main+0x10c>)
 800022e:	2200      	movs	r2, #0
 8000230:	701a      	strb	r2, [r3, #0]
	  HAL_Delay(1);
 8000232:	e7c5      	b.n	80001c0 <main+0x74>
 8000234:	200001ec 	.word	0x200001ec
 8000238:	40010c00 	.word	0x40010c00
 800023c:	08004e28 	.word	0x08004e28
 8000240:	2000008c 	.word	0x2000008c
 8000244:	2000023c 	.word	0x2000023c
 8000248:	200002ce 	.word	0x200002ce
 800024c:	2000019c 	.word	0x2000019c
 8000250:	200001f0 	.word	0x200001f0
 8000254:	200002d4 	.word	0x200002d4
 8000258:	200000fc 	.word	0x200000fc
 800025c:	20000280 	.word	0x20000280
 8000260:	200001e6 	.word	0x200001e6
 8000264:	20000282 	.word	0x20000282
 8000268:	200001ea 	.word	0x200001ea
 800026c:	200002d0 	.word	0x200002d0
 8000270:	200002cc 	.word	0x200002cc
 8000274:	200001e4 	.word	0x200001e4
 8000278:	200001e8 	.word	0x200001e8
 800027c:	08004e2c 	.word	0x08004e2c

08000280 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000280:	b580      	push	{r7, lr}
 8000282:	b090      	sub	sp, #64	; 0x40
 8000284:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000286:	f107 0318 	add.w	r3, r7, #24
 800028a:	2228      	movs	r2, #40	; 0x28
 800028c:	2100      	movs	r1, #0
 800028e:	4618      	mov	r0, r3
 8000290:	f004 f97c 	bl	800458c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000294:	1d3b      	adds	r3, r7, #4
 8000296:	2200      	movs	r2, #0
 8000298:	601a      	str	r2, [r3, #0]
 800029a:	605a      	str	r2, [r3, #4]
 800029c:	609a      	str	r2, [r3, #8]
 800029e:	60da      	str	r2, [r3, #12]
 80002a0:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80002a2:	2301      	movs	r3, #1
 80002a4:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80002a6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80002aa:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80002ac:	2300      	movs	r3, #0
 80002ae:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80002b0:	2301      	movs	r3, #1
 80002b2:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80002b4:	2302      	movs	r3, #2
 80002b6:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80002b8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80002bc:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL8;
 80002be:	f44f 13c0 	mov.w	r3, #1572864	; 0x180000
 80002c2:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002c4:	f107 0318 	add.w	r3, r7, #24
 80002c8:	4618      	mov	r0, r3
 80002ca:	f001 fccf 	bl	8001c6c <HAL_RCC_OscConfig>
 80002ce:	4603      	mov	r3, r0
 80002d0:	2b00      	cmp	r3, #0
 80002d2:	d001      	beq.n	80002d8 <SystemClock_Config+0x58>
  {
    Error_Handler();
 80002d4:	f000 fb42 	bl	800095c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002d8:	230f      	movs	r3, #15
 80002da:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80002dc:	2302      	movs	r3, #2
 80002de:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002e0:	2300      	movs	r3, #0
 80002e2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80002e4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80002e8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80002ea:	2300      	movs	r3, #0
 80002ec:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80002ee:	1d3b      	adds	r3, r7, #4
 80002f0:	2102      	movs	r1, #2
 80002f2:	4618      	mov	r0, r3
 80002f4:	f001 ff3a 	bl	800216c <HAL_RCC_ClockConfig>
 80002f8:	4603      	mov	r3, r0
 80002fa:	2b00      	cmp	r3, #0
 80002fc:	d001      	beq.n	8000302 <SystemClock_Config+0x82>
  {
    Error_Handler();
 80002fe:	f000 fb2d 	bl	800095c <Error_Handler>
  }
}
 8000302:	bf00      	nop
 8000304:	3740      	adds	r7, #64	; 0x40
 8000306:	46bd      	mov	sp, r7
 8000308:	bd80      	pop	{r7, pc}
	...

0800030c <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 800030c:	b580      	push	{r7, lr}
 800030e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000310:	4b17      	ldr	r3, [pc, #92]	; (8000370 <MX_SPI2_Init+0x64>)
 8000312:	4a18      	ldr	r2, [pc, #96]	; (8000374 <MX_SPI2_Init+0x68>)
 8000314:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000316:	4b16      	ldr	r3, [pc, #88]	; (8000370 <MX_SPI2_Init+0x64>)
 8000318:	f44f 7282 	mov.w	r2, #260	; 0x104
 800031c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800031e:	4b14      	ldr	r3, [pc, #80]	; (8000370 <MX_SPI2_Init+0x64>)
 8000320:	2200      	movs	r2, #0
 8000322:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000324:	4b12      	ldr	r3, [pc, #72]	; (8000370 <MX_SPI2_Init+0x64>)
 8000326:	2200      	movs	r2, #0
 8000328:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800032a:	4b11      	ldr	r3, [pc, #68]	; (8000370 <MX_SPI2_Init+0x64>)
 800032c:	2200      	movs	r2, #0
 800032e:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000330:	4b0f      	ldr	r3, [pc, #60]	; (8000370 <MX_SPI2_Init+0x64>)
 8000332:	2200      	movs	r2, #0
 8000334:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8000336:	4b0e      	ldr	r3, [pc, #56]	; (8000370 <MX_SPI2_Init+0x64>)
 8000338:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 800033c:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800033e:	4b0c      	ldr	r3, [pc, #48]	; (8000370 <MX_SPI2_Init+0x64>)
 8000340:	2200      	movs	r2, #0
 8000342:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000344:	4b0a      	ldr	r3, [pc, #40]	; (8000370 <MX_SPI2_Init+0x64>)
 8000346:	2200      	movs	r2, #0
 8000348:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800034a:	4b09      	ldr	r3, [pc, #36]	; (8000370 <MX_SPI2_Init+0x64>)
 800034c:	2200      	movs	r2, #0
 800034e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000350:	4b07      	ldr	r3, [pc, #28]	; (8000370 <MX_SPI2_Init+0x64>)
 8000352:	2200      	movs	r2, #0
 8000354:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8000356:	4b06      	ldr	r3, [pc, #24]	; (8000370 <MX_SPI2_Init+0x64>)
 8000358:	220a      	movs	r2, #10
 800035a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800035c:	4804      	ldr	r0, [pc, #16]	; (8000370 <MX_SPI2_Init+0x64>)
 800035e:	f002 f89f 	bl	80024a0 <HAL_SPI_Init>
 8000362:	4603      	mov	r3, r0
 8000364:	2b00      	cmp	r3, #0
 8000366:	d001      	beq.n	800036c <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8000368:	f000 faf8 	bl	800095c <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 800036c:	bf00      	nop
 800036e:	bd80      	pop	{r7, pc}
 8000370:	20000144 	.word	0x20000144
 8000374:	40003800 	.word	0x40003800

08000378 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000378:	b580      	push	{r7, lr}
 800037a:	b096      	sub	sp, #88	; 0x58
 800037c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800037e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000382:	2200      	movs	r2, #0
 8000384:	601a      	str	r2, [r3, #0]
 8000386:	605a      	str	r2, [r3, #4]
 8000388:	609a      	str	r2, [r3, #8]
 800038a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800038c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000390:	2200      	movs	r2, #0
 8000392:	601a      	str	r2, [r3, #0]
 8000394:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000396:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800039a:	2200      	movs	r2, #0
 800039c:	601a      	str	r2, [r3, #0]
 800039e:	605a      	str	r2, [r3, #4]
 80003a0:	609a      	str	r2, [r3, #8]
 80003a2:	60da      	str	r2, [r3, #12]
 80003a4:	611a      	str	r2, [r3, #16]
 80003a6:	615a      	str	r2, [r3, #20]
 80003a8:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80003aa:	1d3b      	adds	r3, r7, #4
 80003ac:	2220      	movs	r2, #32
 80003ae:	2100      	movs	r1, #0
 80003b0:	4618      	mov	r0, r3
 80003b2:	f004 f8eb 	bl	800458c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80003b6:	4b59      	ldr	r3, [pc, #356]	; (800051c <MX_TIM1_Init+0x1a4>)
 80003b8:	4a59      	ldr	r2, [pc, #356]	; (8000520 <MX_TIM1_Init+0x1a8>)
 80003ba:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80003bc:	4b57      	ldr	r3, [pc, #348]	; (800051c <MX_TIM1_Init+0x1a4>)
 80003be:	2200      	movs	r2, #0
 80003c0:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80003c2:	4b56      	ldr	r3, [pc, #344]	; (800051c <MX_TIM1_Init+0x1a4>)
 80003c4:	2200      	movs	r2, #0
 80003c6:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 799;
 80003c8:	4b54      	ldr	r3, [pc, #336]	; (800051c <MX_TIM1_Init+0x1a4>)
 80003ca:	f240 321f 	movw	r2, #799	; 0x31f
 80003ce:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80003d0:	4b52      	ldr	r3, [pc, #328]	; (800051c <MX_TIM1_Init+0x1a4>)
 80003d2:	2200      	movs	r2, #0
 80003d4:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 7;
 80003d6:	4b51      	ldr	r3, [pc, #324]	; (800051c <MX_TIM1_Init+0x1a4>)
 80003d8:	2207      	movs	r2, #7
 80003da:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80003dc:	4b4f      	ldr	r3, [pc, #316]	; (800051c <MX_TIM1_Init+0x1a4>)
 80003de:	2280      	movs	r2, #128	; 0x80
 80003e0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80003e2:	484e      	ldr	r0, [pc, #312]	; (800051c <MX_TIM1_Init+0x1a4>)
 80003e4:	f002 f8e0 	bl	80025a8 <HAL_TIM_Base_Init>
 80003e8:	4603      	mov	r3, r0
 80003ea:	2b00      	cmp	r3, #0
 80003ec:	d001      	beq.n	80003f2 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 80003ee:	f000 fab5 	bl	800095c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80003f2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80003f6:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80003f8:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80003fc:	4619      	mov	r1, r3
 80003fe:	4847      	ldr	r0, [pc, #284]	; (800051c <MX_TIM1_Init+0x1a4>)
 8000400:	f002 ffbc 	bl	800337c <HAL_TIM_ConfigClockSource>
 8000404:	4603      	mov	r3, r0
 8000406:	2b00      	cmp	r3, #0
 8000408:	d001      	beq.n	800040e <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 800040a:	f000 faa7 	bl	800095c <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim1) != HAL_OK)
 800040e:	4843      	ldr	r0, [pc, #268]	; (800051c <MX_TIM1_Init+0x1a4>)
 8000410:	f002 f96c 	bl	80026ec <HAL_TIM_OC_Init>
 8000414:	4603      	mov	r3, r0
 8000416:	2b00      	cmp	r3, #0
 8000418:	d001      	beq.n	800041e <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 800041a:	f000 fa9f 	bl	800095c <Error_Handler>
  }
  if (HAL_TIM_OnePulse_Init(&htim1, TIM_OPMODE_SINGLE) != HAL_OK)
 800041e:	2108      	movs	r1, #8
 8000420:	483e      	ldr	r0, [pc, #248]	; (800051c <MX_TIM1_Init+0x1a4>)
 8000422:	f002 fd5d 	bl	8002ee0 <HAL_TIM_OnePulse_Init>
 8000426:	4603      	mov	r3, r0
 8000428:	2b00      	cmp	r3, #0
 800042a:	d001      	beq.n	8000430 <MX_TIM1_Init+0xb8>
  {
    Error_Handler();
 800042c:	f000 fa96 	bl	800095c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_ENABLE;
 8000430:	2310      	movs	r3, #16
 8000432:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_ENABLE;
 8000434:	2380      	movs	r3, #128	; 0x80
 8000436:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000438:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800043c:	4619      	mov	r1, r3
 800043e:	4837      	ldr	r0, [pc, #220]	; (800051c <MX_TIM1_Init+0x1a4>)
 8000440:	f003 fe02 	bl	8004048 <HAL_TIMEx_MasterConfigSynchronization>
 8000444:	4603      	mov	r3, r0
 8000446:	2b00      	cmp	r3, #0
 8000448:	d001      	beq.n	800044e <MX_TIM1_Init+0xd6>
  {
    Error_Handler();
 800044a:	f000 fa87 	bl	800095c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TOGGLE;
 800044e:	2330      	movs	r3, #48	; 0x30
 8000450:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8000452:	2300      	movs	r3, #0
 8000454:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000456:	2300      	movs	r3, #0
 8000458:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800045a:	2300      	movs	r3, #0
 800045c:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800045e:	2300      	movs	r3, #0
 8000460:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000462:	2300      	movs	r3, #0
 8000464:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000466:	2300      	movs	r3, #0
 8000468:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800046a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800046e:	2200      	movs	r2, #0
 8000470:	4619      	mov	r1, r3
 8000472:	482a      	ldr	r0, [pc, #168]	; (800051c <MX_TIM1_Init+0x1a4>)
 8000474:	f002 fe96 	bl	80031a4 <HAL_TIM_OC_ConfigChannel>
 8000478:	4603      	mov	r3, r0
 800047a:	2b00      	cmp	r3, #0
 800047c:	d001      	beq.n	8000482 <MX_TIM1_Init+0x10a>
  {
    Error_Handler();
 800047e:	f000 fa6d 	bl	800095c <Error_Handler>
  }
  __HAL_TIM_ENABLE_OCxPRELOAD(&htim1, TIM_CHANNEL_1);
 8000482:	4b26      	ldr	r3, [pc, #152]	; (800051c <MX_TIM1_Init+0x1a4>)
 8000484:	681b      	ldr	r3, [r3, #0]
 8000486:	699a      	ldr	r2, [r3, #24]
 8000488:	4b24      	ldr	r3, [pc, #144]	; (800051c <MX_TIM1_Init+0x1a4>)
 800048a:	681b      	ldr	r3, [r3, #0]
 800048c:	f042 0208 	orr.w	r2, r2, #8
 8000490:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000492:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000496:	2204      	movs	r2, #4
 8000498:	4619      	mov	r1, r3
 800049a:	4820      	ldr	r0, [pc, #128]	; (800051c <MX_TIM1_Init+0x1a4>)
 800049c:	f002 fe82 	bl	80031a4 <HAL_TIM_OC_ConfigChannel>
 80004a0:	4603      	mov	r3, r0
 80004a2:	2b00      	cmp	r3, #0
 80004a4:	d001      	beq.n	80004aa <MX_TIM1_Init+0x132>
  {
    Error_Handler();
 80004a6:	f000 fa59 	bl	800095c <Error_Handler>
  }
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80004aa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80004ae:	2208      	movs	r2, #8
 80004b0:	4619      	mov	r1, r3
 80004b2:	481a      	ldr	r0, [pc, #104]	; (800051c <MX_TIM1_Init+0x1a4>)
 80004b4:	f002 fe76 	bl	80031a4 <HAL_TIM_OC_ConfigChannel>
 80004b8:	4603      	mov	r3, r0
 80004ba:	2b00      	cmp	r3, #0
 80004bc:	d001      	beq.n	80004c2 <MX_TIM1_Init+0x14a>
  {
    Error_Handler();
 80004be:	f000 fa4d 	bl	800095c <Error_Handler>
  }
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80004c2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80004c6:	220c      	movs	r2, #12
 80004c8:	4619      	mov	r1, r3
 80004ca:	4814      	ldr	r0, [pc, #80]	; (800051c <MX_TIM1_Init+0x1a4>)
 80004cc:	f002 fe6a 	bl	80031a4 <HAL_TIM_OC_ConfigChannel>
 80004d0:	4603      	mov	r3, r0
 80004d2:	2b00      	cmp	r3, #0
 80004d4:	d001      	beq.n	80004da <MX_TIM1_Init+0x162>
  {
    Error_Handler();
 80004d6:	f000 fa41 	bl	800095c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80004da:	2300      	movs	r3, #0
 80004dc:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80004de:	2300      	movs	r3, #0
 80004e0:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80004e2:	2300      	movs	r3, #0
 80004e4:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80004e6:	2300      	movs	r3, #0
 80004e8:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80004ea:	2300      	movs	r3, #0
 80004ec:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80004ee:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80004f2:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80004f4:	2300      	movs	r3, #0
 80004f6:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80004f8:	1d3b      	adds	r3, r7, #4
 80004fa:	4619      	mov	r1, r3
 80004fc:	4807      	ldr	r0, [pc, #28]	; (800051c <MX_TIM1_Init+0x1a4>)
 80004fe:	f003 fe01 	bl	8004104 <HAL_TIMEx_ConfigBreakDeadTime>
 8000502:	4603      	mov	r3, r0
 8000504:	2b00      	cmp	r3, #0
 8000506:	d001      	beq.n	800050c <MX_TIM1_Init+0x194>
  {
    Error_Handler();
 8000508:	f000 fa28 	bl	800095c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800050c:	4803      	ldr	r0, [pc, #12]	; (800051c <MX_TIM1_Init+0x1a4>)
 800050e:	f000 fb5d 	bl	8000bcc <HAL_TIM_MspPostInit>

}
 8000512:	bf00      	nop
 8000514:	3758      	adds	r7, #88	; 0x58
 8000516:	46bd      	mov	sp, r7
 8000518:	bd80      	pop	{r7, pc}
 800051a:	bf00      	nop
 800051c:	20000284 	.word	0x20000284
 8000520:	40012c00 	.word	0x40012c00

08000524 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000524:	b580      	push	{r7, lr}
 8000526:	b090      	sub	sp, #64	; 0x40
 8000528:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800052a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800052e:	2200      	movs	r2, #0
 8000530:	601a      	str	r2, [r3, #0]
 8000532:	605a      	str	r2, [r3, #4]
 8000534:	609a      	str	r2, [r3, #8]
 8000536:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8000538:	f107 031c 	add.w	r3, r7, #28
 800053c:	2200      	movs	r2, #0
 800053e:	601a      	str	r2, [r3, #0]
 8000540:	605a      	str	r2, [r3, #4]
 8000542:	609a      	str	r2, [r3, #8]
 8000544:	60da      	str	r2, [r3, #12]
 8000546:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000548:	f107 0314 	add.w	r3, r7, #20
 800054c:	2200      	movs	r2, #0
 800054e:	601a      	str	r2, [r3, #0]
 8000550:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8000552:	1d3b      	adds	r3, r7, #4
 8000554:	2200      	movs	r2, #0
 8000556:	601a      	str	r2, [r3, #0]
 8000558:	605a      	str	r2, [r3, #4]
 800055a:	609a      	str	r2, [r3, #8]
 800055c:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800055e:	4b38      	ldr	r3, [pc, #224]	; (8000640 <MX_TIM2_Init+0x11c>)
 8000560:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000564:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000566:	4b36      	ldr	r3, [pc, #216]	; (8000640 <MX_TIM2_Init+0x11c>)
 8000568:	2200      	movs	r2, #0
 800056a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800056c:	4b34      	ldr	r3, [pc, #208]	; (8000640 <MX_TIM2_Init+0x11c>)
 800056e:	2200      	movs	r2, #0
 8000570:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8000572:	4b33      	ldr	r3, [pc, #204]	; (8000640 <MX_TIM2_Init+0x11c>)
 8000574:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000578:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800057a:	4b31      	ldr	r3, [pc, #196]	; (8000640 <MX_TIM2_Init+0x11c>)
 800057c:	2200      	movs	r2, #0
 800057e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000580:	4b2f      	ldr	r3, [pc, #188]	; (8000640 <MX_TIM2_Init+0x11c>)
 8000582:	2280      	movs	r2, #128	; 0x80
 8000584:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000586:	482e      	ldr	r0, [pc, #184]	; (8000640 <MX_TIM2_Init+0x11c>)
 8000588:	f002 f80e 	bl	80025a8 <HAL_TIM_Base_Init>
 800058c:	4603      	mov	r3, r0
 800058e:	2b00      	cmp	r3, #0
 8000590:	d001      	beq.n	8000596 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8000592:	f000 f9e3 	bl	800095c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000596:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800059a:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800059c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80005a0:	4619      	mov	r1, r3
 80005a2:	4827      	ldr	r0, [pc, #156]	; (8000640 <MX_TIM2_Init+0x11c>)
 80005a4:	f002 feea 	bl	800337c <HAL_TIM_ConfigClockSource>
 80005a8:	4603      	mov	r3, r0
 80005aa:	2b00      	cmp	r3, #0
 80005ac:	d001      	beq.n	80005b2 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 80005ae:	f000 f9d5 	bl	800095c <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 80005b2:	4823      	ldr	r0, [pc, #140]	; (8000640 <MX_TIM2_Init+0x11c>)
 80005b4:	f002 f9f8 	bl	80029a8 <HAL_TIM_IC_Init>
 80005b8:	4603      	mov	r3, r0
 80005ba:	2b00      	cmp	r3, #0
 80005bc:	d001      	beq.n	80005c2 <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 80005be:	f000 f9cd 	bl	800095c <Error_Handler>
  }
  if (HAL_TIM_OnePulse_Init(&htim2, TIM_OPMODE_SINGLE) != HAL_OK)
 80005c2:	2108      	movs	r1, #8
 80005c4:	481e      	ldr	r0, [pc, #120]	; (8000640 <MX_TIM2_Init+0x11c>)
 80005c6:	f002 fc8b 	bl	8002ee0 <HAL_TIM_OnePulse_Init>
 80005ca:	4603      	mov	r3, r0
 80005cc:	2b00      	cmp	r3, #0
 80005ce:	d001      	beq.n	80005d4 <MX_TIM2_Init+0xb0>
  {
    Error_Handler();
 80005d0:	f000 f9c4 	bl	800095c <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 80005d4:	2304      	movs	r3, #4
 80005d6:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.InputTrigger = TIM_TS_ITR2;
 80005d8:	2320      	movs	r3, #32
 80005da:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_SlaveConfigSynchro(&htim2, &sSlaveConfig) != HAL_OK)
 80005dc:	f107 031c 	add.w	r3, r7, #28
 80005e0:	4619      	mov	r1, r3
 80005e2:	4817      	ldr	r0, [pc, #92]	; (8000640 <MX_TIM2_Init+0x11c>)
 80005e4:	f002 ff8e 	bl	8003504 <HAL_TIM_SlaveConfigSynchro>
 80005e8:	4603      	mov	r3, r0
 80005ea:	2b00      	cmp	r3, #0
 80005ec:	d001      	beq.n	80005f2 <MX_TIM2_Init+0xce>
  {
    Error_Handler();
 80005ee:	f000 f9b5 	bl	800095c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80005f2:	2300      	movs	r3, #0
 80005f4:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80005f6:	2300      	movs	r3, #0
 80005f8:	61bb      	str	r3, [r7, #24]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80005fa:	f107 0314 	add.w	r3, r7, #20
 80005fe:	4619      	mov	r1, r3
 8000600:	480f      	ldr	r0, [pc, #60]	; (8000640 <MX_TIM2_Init+0x11c>)
 8000602:	f003 fd21 	bl	8004048 <HAL_TIMEx_MasterConfigSynchronization>
 8000606:	4603      	mov	r3, r0
 8000608:	2b00      	cmp	r3, #0
 800060a:	d001      	beq.n	8000610 <MX_TIM2_Init+0xec>
  {
    Error_Handler();
 800060c:	f000 f9a6 	bl	800095c <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000610:	2300      	movs	r3, #0
 8000612:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000614:	2301      	movs	r3, #1
 8000616:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8000618:	2300      	movs	r3, #0
 800061a:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 800061c:	2300      	movs	r3, #0
 800061e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8000620:	1d3b      	adds	r3, r7, #4
 8000622:	2200      	movs	r2, #0
 8000624:	4619      	mov	r1, r3
 8000626:	4806      	ldr	r0, [pc, #24]	; (8000640 <MX_TIM2_Init+0x11c>)
 8000628:	f002 fe14 	bl	8003254 <HAL_TIM_IC_ConfigChannel>
 800062c:	4603      	mov	r3, r0
 800062e:	2b00      	cmp	r3, #0
 8000630:	d001      	beq.n	8000636 <MX_TIM2_Init+0x112>
  {
    Error_Handler();
 8000632:	f000 f993 	bl	800095c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000636:	bf00      	nop
 8000638:	3740      	adds	r7, #64	; 0x40
 800063a:	46bd      	mov	sp, r7
 800063c:	bd80      	pop	{r7, pc}
 800063e:	bf00      	nop
 8000640:	200002d4 	.word	0x200002d4

08000644 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000644:	b580      	push	{r7, lr}
 8000646:	b092      	sub	sp, #72	; 0x48
 8000648:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800064a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800064e:	2200      	movs	r2, #0
 8000650:	601a      	str	r2, [r3, #0]
 8000652:	605a      	str	r2, [r3, #4]
 8000654:	609a      	str	r2, [r3, #8]
 8000656:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8000658:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800065c:	2200      	movs	r2, #0
 800065e:	601a      	str	r2, [r3, #0]
 8000660:	605a      	str	r2, [r3, #4]
 8000662:	609a      	str	r2, [r3, #8]
 8000664:	60da      	str	r2, [r3, #12]
 8000666:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000668:	f107 031c 	add.w	r3, r7, #28
 800066c:	2200      	movs	r2, #0
 800066e:	601a      	str	r2, [r3, #0]
 8000670:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000672:	463b      	mov	r3, r7
 8000674:	2200      	movs	r2, #0
 8000676:	601a      	str	r2, [r3, #0]
 8000678:	605a      	str	r2, [r3, #4]
 800067a:	609a      	str	r2, [r3, #8]
 800067c:	60da      	str	r2, [r3, #12]
 800067e:	611a      	str	r2, [r3, #16]
 8000680:	615a      	str	r2, [r3, #20]
 8000682:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000684:	4b37      	ldr	r3, [pc, #220]	; (8000764 <MX_TIM3_Init+0x120>)
 8000686:	4a38      	ldr	r2, [pc, #224]	; (8000768 <MX_TIM3_Init+0x124>)
 8000688:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800068a:	4b36      	ldr	r3, [pc, #216]	; (8000764 <MX_TIM3_Init+0x120>)
 800068c:	2200      	movs	r2, #0
 800068e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000690:	4b34      	ldr	r3, [pc, #208]	; (8000764 <MX_TIM3_Init+0x120>)
 8000692:	2200      	movs	r2, #0
 8000694:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 30500;
 8000696:	4b33      	ldr	r3, [pc, #204]	; (8000764 <MX_TIM3_Init+0x120>)
 8000698:	f247 7224 	movw	r2, #30500	; 0x7724
 800069c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800069e:	4b31      	ldr	r3, [pc, #196]	; (8000764 <MX_TIM3_Init+0x120>)
 80006a0:	2200      	movs	r2, #0
 80006a2:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80006a4:	4b2f      	ldr	r3, [pc, #188]	; (8000764 <MX_TIM3_Init+0x120>)
 80006a6:	2280      	movs	r2, #128	; 0x80
 80006a8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80006aa:	482e      	ldr	r0, [pc, #184]	; (8000764 <MX_TIM3_Init+0x120>)
 80006ac:	f001 ff7c 	bl	80025a8 <HAL_TIM_Base_Init>
 80006b0:	4603      	mov	r3, r0
 80006b2:	2b00      	cmp	r3, #0
 80006b4:	d001      	beq.n	80006ba <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 80006b6:	f000 f951 	bl	800095c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80006ba:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006be:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80006c0:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80006c4:	4619      	mov	r1, r3
 80006c6:	4827      	ldr	r0, [pc, #156]	; (8000764 <MX_TIM3_Init+0x120>)
 80006c8:	f002 fe58 	bl	800337c <HAL_TIM_ConfigClockSource>
 80006cc:	4603      	mov	r3, r0
 80006ce:	2b00      	cmp	r3, #0
 80006d0:	d001      	beq.n	80006d6 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 80006d2:	f000 f943 	bl	800095c <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim3) != HAL_OK)
 80006d6:	4823      	ldr	r0, [pc, #140]	; (8000764 <MX_TIM3_Init+0x120>)
 80006d8:	f002 f808 	bl	80026ec <HAL_TIM_OC_Init>
 80006dc:	4603      	mov	r3, r0
 80006de:	2b00      	cmp	r3, #0
 80006e0:	d001      	beq.n	80006e6 <MX_TIM3_Init+0xa2>
  {
    Error_Handler();
 80006e2:	f000 f93b 	bl	800095c <Error_Handler>
  }
  if (HAL_TIM_OnePulse_Init(&htim3, TIM_OPMODE_SINGLE) != HAL_OK)
 80006e6:	2108      	movs	r1, #8
 80006e8:	481e      	ldr	r0, [pc, #120]	; (8000764 <MX_TIM3_Init+0x120>)
 80006ea:	f002 fbf9 	bl	8002ee0 <HAL_TIM_OnePulse_Init>
 80006ee:	4603      	mov	r3, r0
 80006f0:	2b00      	cmp	r3, #0
 80006f2:	d001      	beq.n	80006f8 <MX_TIM3_Init+0xb4>
  {
    Error_Handler();
 80006f4:	f000 f932 	bl	800095c <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_TRIGGER;
 80006f8:	2306      	movs	r3, #6
 80006fa:	627b      	str	r3, [r7, #36]	; 0x24
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 80006fc:	2300      	movs	r3, #0
 80006fe:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_SlaveConfigSynchro(&htim3, &sSlaveConfig) != HAL_OK)
 8000700:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000704:	4619      	mov	r1, r3
 8000706:	4817      	ldr	r0, [pc, #92]	; (8000764 <MX_TIM3_Init+0x120>)
 8000708:	f002 fefc 	bl	8003504 <HAL_TIM_SlaveConfigSynchro>
 800070c:	4603      	mov	r3, r0
 800070e:	2b00      	cmp	r3, #0
 8000710:	d001      	beq.n	8000716 <MX_TIM3_Init+0xd2>
  {
    Error_Handler();
 8000712:	f000 f923 	bl	800095c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC1;
 8000716:	2330      	movs	r3, #48	; 0x30
 8000718:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_ENABLE;
 800071a:	2380      	movs	r3, #128	; 0x80
 800071c:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800071e:	f107 031c 	add.w	r3, r7, #28
 8000722:	4619      	mov	r1, r3
 8000724:	480f      	ldr	r0, [pc, #60]	; (8000764 <MX_TIM3_Init+0x120>)
 8000726:	f003 fc8f 	bl	8004048 <HAL_TIMEx_MasterConfigSynchronization>
 800072a:	4603      	mov	r3, r0
 800072c:	2b00      	cmp	r3, #0
 800072e:	d001      	beq.n	8000734 <MX_TIM3_Init+0xf0>
  {
    Error_Handler();
 8000730:	f000 f914 	bl	800095c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_ACTIVE;
 8000734:	2310      	movs	r3, #16
 8000736:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000738:	2300      	movs	r3, #0
 800073a:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800073c:	2300      	movs	r3, #0
 800073e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000740:	2300      	movs	r3, #0
 8000742:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_OC_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000744:	463b      	mov	r3, r7
 8000746:	2200      	movs	r2, #0
 8000748:	4619      	mov	r1, r3
 800074a:	4806      	ldr	r0, [pc, #24]	; (8000764 <MX_TIM3_Init+0x120>)
 800074c:	f002 fd2a 	bl	80031a4 <HAL_TIM_OC_ConfigChannel>
 8000750:	4603      	mov	r3, r0
 8000752:	2b00      	cmp	r3, #0
 8000754:	d001      	beq.n	800075a <MX_TIM3_Init+0x116>
  {
    Error_Handler();
 8000756:	f000 f901 	bl	800095c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800075a:	bf00      	nop
 800075c:	3748      	adds	r7, #72	; 0x48
 800075e:	46bd      	mov	sp, r7
 8000760:	bd80      	pop	{r7, pc}
 8000762:	bf00      	nop
 8000764:	200001f0 	.word	0x200001f0
 8000768:	40000400 	.word	0x40000400

0800076c <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 800076c:	b580      	push	{r7, lr}
 800076e:	b086      	sub	sp, #24
 8000770:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000772:	f107 0308 	add.w	r3, r7, #8
 8000776:	2200      	movs	r2, #0
 8000778:	601a      	str	r2, [r3, #0]
 800077a:	605a      	str	r2, [r3, #4]
 800077c:	609a      	str	r2, [r3, #8]
 800077e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000780:	463b      	mov	r3, r7
 8000782:	2200      	movs	r2, #0
 8000784:	601a      	str	r2, [r3, #0]
 8000786:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000788:	4b1d      	ldr	r3, [pc, #116]	; (8000800 <MX_TIM4_Init+0x94>)
 800078a:	4a1e      	ldr	r2, [pc, #120]	; (8000804 <MX_TIM4_Init+0x98>)
 800078c:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 2;
 800078e:	4b1c      	ldr	r3, [pc, #112]	; (8000800 <MX_TIM4_Init+0x94>)
 8000790:	2202      	movs	r2, #2
 8000792:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000794:	4b1a      	ldr	r3, [pc, #104]	; (8000800 <MX_TIM4_Init+0x94>)
 8000796:	2200      	movs	r2, #0
 8000798:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 800079a:	4b19      	ldr	r3, [pc, #100]	; (8000800 <MX_TIM4_Init+0x94>)
 800079c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80007a0:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80007a2:	4b17      	ldr	r3, [pc, #92]	; (8000800 <MX_TIM4_Init+0x94>)
 80007a4:	2200      	movs	r2, #0
 80007a6:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80007a8:	4b15      	ldr	r3, [pc, #84]	; (8000800 <MX_TIM4_Init+0x94>)
 80007aa:	2280      	movs	r2, #128	; 0x80
 80007ac:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80007ae:	4814      	ldr	r0, [pc, #80]	; (8000800 <MX_TIM4_Init+0x94>)
 80007b0:	f001 fefa 	bl	80025a8 <HAL_TIM_Base_Init>
 80007b4:	4603      	mov	r3, r0
 80007b6:	2b00      	cmp	r3, #0
 80007b8:	d001      	beq.n	80007be <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 80007ba:	f000 f8cf 	bl	800095c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80007be:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80007c2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80007c4:	f107 0308 	add.w	r3, r7, #8
 80007c8:	4619      	mov	r1, r3
 80007ca:	480d      	ldr	r0, [pc, #52]	; (8000800 <MX_TIM4_Init+0x94>)
 80007cc:	f002 fdd6 	bl	800337c <HAL_TIM_ConfigClockSource>
 80007d0:	4603      	mov	r3, r0
 80007d2:	2b00      	cmp	r3, #0
 80007d4:	d001      	beq.n	80007da <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 80007d6:	f000 f8c1 	bl	800095c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80007da:	2320      	movs	r3, #32
 80007dc:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80007de:	2300      	movs	r3, #0
 80007e0:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80007e2:	463b      	mov	r3, r7
 80007e4:	4619      	mov	r1, r3
 80007e6:	4806      	ldr	r0, [pc, #24]	; (8000800 <MX_TIM4_Init+0x94>)
 80007e8:	f003 fc2e 	bl	8004048 <HAL_TIMEx_MasterConfigSynchronization>
 80007ec:	4603      	mov	r3, r0
 80007ee:	2b00      	cmp	r3, #0
 80007f0:	d001      	beq.n	80007f6 <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 80007f2:	f000 f8b3 	bl	800095c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80007f6:	bf00      	nop
 80007f8:	3718      	adds	r7, #24
 80007fa:	46bd      	mov	sp, r7
 80007fc:	bd80      	pop	{r7, pc}
 80007fe:	bf00      	nop
 8000800:	2000019c 	.word	0x2000019c
 8000804:	40000800 	.word	0x40000800

08000808 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000808:	b580      	push	{r7, lr}
 800080a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800080c:	4b11      	ldr	r3, [pc, #68]	; (8000854 <MX_USART1_UART_Init+0x4c>)
 800080e:	4a12      	ldr	r2, [pc, #72]	; (8000858 <MX_USART1_UART_Init+0x50>)
 8000810:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000812:	4b10      	ldr	r3, [pc, #64]	; (8000854 <MX_USART1_UART_Init+0x4c>)
 8000814:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000818:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800081a:	4b0e      	ldr	r3, [pc, #56]	; (8000854 <MX_USART1_UART_Init+0x4c>)
 800081c:	2200      	movs	r2, #0
 800081e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000820:	4b0c      	ldr	r3, [pc, #48]	; (8000854 <MX_USART1_UART_Init+0x4c>)
 8000822:	2200      	movs	r2, #0
 8000824:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000826:	4b0b      	ldr	r3, [pc, #44]	; (8000854 <MX_USART1_UART_Init+0x4c>)
 8000828:	2200      	movs	r2, #0
 800082a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800082c:	4b09      	ldr	r3, [pc, #36]	; (8000854 <MX_USART1_UART_Init+0x4c>)
 800082e:	220c      	movs	r2, #12
 8000830:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000832:	4b08      	ldr	r3, [pc, #32]	; (8000854 <MX_USART1_UART_Init+0x4c>)
 8000834:	2200      	movs	r2, #0
 8000836:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000838:	4b06      	ldr	r3, [pc, #24]	; (8000854 <MX_USART1_UART_Init+0x4c>)
 800083a:	2200      	movs	r2, #0
 800083c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800083e:	4805      	ldr	r0, [pc, #20]	; (8000854 <MX_USART1_UART_Init+0x4c>)
 8000840:	f003 fcc3 	bl	80041ca <HAL_UART_Init>
 8000844:	4603      	mov	r3, r0
 8000846:	2b00      	cmp	r3, #0
 8000848:	d001      	beq.n	800084e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800084a:	f000 f887 	bl	800095c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800084e:	bf00      	nop
 8000850:	bd80      	pop	{r7, pc}
 8000852:	bf00      	nop
 8000854:	2000023c 	.word	0x2000023c
 8000858:	40013800 	.word	0x40013800

0800085c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800085c:	b580      	push	{r7, lr}
 800085e:	b082      	sub	sp, #8
 8000860:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000862:	4b0c      	ldr	r3, [pc, #48]	; (8000894 <MX_DMA_Init+0x38>)
 8000864:	695b      	ldr	r3, [r3, #20]
 8000866:	4a0b      	ldr	r2, [pc, #44]	; (8000894 <MX_DMA_Init+0x38>)
 8000868:	f043 0301 	orr.w	r3, r3, #1
 800086c:	6153      	str	r3, [r2, #20]
 800086e:	4b09      	ldr	r3, [pc, #36]	; (8000894 <MX_DMA_Init+0x38>)
 8000870:	695b      	ldr	r3, [r3, #20]
 8000872:	f003 0301 	and.w	r3, r3, #1
 8000876:	607b      	str	r3, [r7, #4]
 8000878:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 800087a:	2200      	movs	r2, #0
 800087c:	2100      	movs	r1, #0
 800087e:	200f      	movs	r0, #15
 8000880:	f000 fdbd 	bl	80013fe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8000884:	200f      	movs	r0, #15
 8000886:	f000 fdd6 	bl	8001436 <HAL_NVIC_EnableIRQ>

}
 800088a:	bf00      	nop
 800088c:	3708      	adds	r7, #8
 800088e:	46bd      	mov	sp, r7
 8000890:	bd80      	pop	{r7, pc}
 8000892:	bf00      	nop
 8000894:	40021000 	.word	0x40021000

08000898 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000898:	b580      	push	{r7, lr}
 800089a:	b088      	sub	sp, #32
 800089c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800089e:	f107 0310 	add.w	r3, r7, #16
 80008a2:	2200      	movs	r2, #0
 80008a4:	601a      	str	r2, [r3, #0]
 80008a6:	605a      	str	r2, [r3, #4]
 80008a8:	609a      	str	r2, [r3, #8]
 80008aa:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80008ac:	4b28      	ldr	r3, [pc, #160]	; (8000950 <MX_GPIO_Init+0xb8>)
 80008ae:	699b      	ldr	r3, [r3, #24]
 80008b0:	4a27      	ldr	r2, [pc, #156]	; (8000950 <MX_GPIO_Init+0xb8>)
 80008b2:	f043 0320 	orr.w	r3, r3, #32
 80008b6:	6193      	str	r3, [r2, #24]
 80008b8:	4b25      	ldr	r3, [pc, #148]	; (8000950 <MX_GPIO_Init+0xb8>)
 80008ba:	699b      	ldr	r3, [r3, #24]
 80008bc:	f003 0320 	and.w	r3, r3, #32
 80008c0:	60fb      	str	r3, [r7, #12]
 80008c2:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008c4:	4b22      	ldr	r3, [pc, #136]	; (8000950 <MX_GPIO_Init+0xb8>)
 80008c6:	699b      	ldr	r3, [r3, #24]
 80008c8:	4a21      	ldr	r2, [pc, #132]	; (8000950 <MX_GPIO_Init+0xb8>)
 80008ca:	f043 0304 	orr.w	r3, r3, #4
 80008ce:	6193      	str	r3, [r2, #24]
 80008d0:	4b1f      	ldr	r3, [pc, #124]	; (8000950 <MX_GPIO_Init+0xb8>)
 80008d2:	699b      	ldr	r3, [r3, #24]
 80008d4:	f003 0304 	and.w	r3, r3, #4
 80008d8:	60bb      	str	r3, [r7, #8]
 80008da:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008dc:	4b1c      	ldr	r3, [pc, #112]	; (8000950 <MX_GPIO_Init+0xb8>)
 80008de:	699b      	ldr	r3, [r3, #24]
 80008e0:	4a1b      	ldr	r2, [pc, #108]	; (8000950 <MX_GPIO_Init+0xb8>)
 80008e2:	f043 0308 	orr.w	r3, r3, #8
 80008e6:	6193      	str	r3, [r2, #24]
 80008e8:	4b19      	ldr	r3, [pc, #100]	; (8000950 <MX_GPIO_Init+0xb8>)
 80008ea:	699b      	ldr	r3, [r3, #24]
 80008ec:	f003 0308 	and.w	r3, r3, #8
 80008f0:	607b      	str	r3, [r7, #4]
 80008f2:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, Z1Receive_Pin|Z2Receive_Pin|Z3Receive_Pin|Z4Receive_Pin, GPIO_PIN_RESET);
 80008f4:	2200      	movs	r2, #0
 80008f6:	f640 4106 	movw	r1, #3078	; 0xc06
 80008fa:	4816      	ldr	r0, [pc, #88]	; (8000954 <MX_GPIO_Init+0xbc>)
 80008fc:	f001 f99e 	bl	8001c3c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000900:	2200      	movs	r2, #0
 8000902:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000906:	4814      	ldr	r0, [pc, #80]	; (8000958 <MX_GPIO_Init+0xc0>)
 8000908:	f001 f998 	bl	8001c3c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : Z1Receive_Pin Z2Receive_Pin Z3Receive_Pin Z4Receive_Pin */
  GPIO_InitStruct.Pin = Z1Receive_Pin|Z2Receive_Pin|Z3Receive_Pin|Z4Receive_Pin;
 800090c:	f640 4306 	movw	r3, #3078	; 0xc06
 8000910:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000912:	2301      	movs	r3, #1
 8000914:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000916:	2300      	movs	r3, #0
 8000918:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800091a:	2302      	movs	r3, #2
 800091c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800091e:	f107 0310 	add.w	r3, r7, #16
 8000922:	4619      	mov	r1, r3
 8000924:	480b      	ldr	r0, [pc, #44]	; (8000954 <MX_GPIO_Init+0xbc>)
 8000926:	f001 f805 	bl	8001934 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 800092a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800092e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000930:	2301      	movs	r3, #1
 8000932:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000934:	2300      	movs	r3, #0
 8000936:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000938:	2302      	movs	r3, #2
 800093a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 800093c:	f107 0310 	add.w	r3, r7, #16
 8000940:	4619      	mov	r1, r3
 8000942:	4805      	ldr	r0, [pc, #20]	; (8000958 <MX_GPIO_Init+0xc0>)
 8000944:	f000 fff6 	bl	8001934 <HAL_GPIO_Init>

}
 8000948:	bf00      	nop
 800094a:	3720      	adds	r7, #32
 800094c:	46bd      	mov	sp, r7
 800094e:	bd80      	pop	{r7, pc}
 8000950:	40021000 	.word	0x40021000
 8000954:	40010c00 	.word	0x40010c00
 8000958:	40010800 	.word	0x40010800

0800095c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800095c:	b480      	push	{r7}
 800095e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000960:	b672      	cpsid	i
}
 8000962:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000964:	e7fe      	b.n	8000964 <Error_Handler+0x8>
	...

08000968 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000968:	b480      	push	{r7}
 800096a:	b085      	sub	sp, #20
 800096c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800096e:	4b15      	ldr	r3, [pc, #84]	; (80009c4 <HAL_MspInit+0x5c>)
 8000970:	699b      	ldr	r3, [r3, #24]
 8000972:	4a14      	ldr	r2, [pc, #80]	; (80009c4 <HAL_MspInit+0x5c>)
 8000974:	f043 0301 	orr.w	r3, r3, #1
 8000978:	6193      	str	r3, [r2, #24]
 800097a:	4b12      	ldr	r3, [pc, #72]	; (80009c4 <HAL_MspInit+0x5c>)
 800097c:	699b      	ldr	r3, [r3, #24]
 800097e:	f003 0301 	and.w	r3, r3, #1
 8000982:	60bb      	str	r3, [r7, #8]
 8000984:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000986:	4b0f      	ldr	r3, [pc, #60]	; (80009c4 <HAL_MspInit+0x5c>)
 8000988:	69db      	ldr	r3, [r3, #28]
 800098a:	4a0e      	ldr	r2, [pc, #56]	; (80009c4 <HAL_MspInit+0x5c>)
 800098c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000990:	61d3      	str	r3, [r2, #28]
 8000992:	4b0c      	ldr	r3, [pc, #48]	; (80009c4 <HAL_MspInit+0x5c>)
 8000994:	69db      	ldr	r3, [r3, #28]
 8000996:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800099a:	607b      	str	r3, [r7, #4]
 800099c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 800099e:	4b0a      	ldr	r3, [pc, #40]	; (80009c8 <HAL_MspInit+0x60>)
 80009a0:	685b      	ldr	r3, [r3, #4]
 80009a2:	60fb      	str	r3, [r7, #12]
 80009a4:	68fb      	ldr	r3, [r7, #12]
 80009a6:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80009aa:	60fb      	str	r3, [r7, #12]
 80009ac:	68fb      	ldr	r3, [r7, #12]
 80009ae:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80009b2:	60fb      	str	r3, [r7, #12]
 80009b4:	4a04      	ldr	r2, [pc, #16]	; (80009c8 <HAL_MspInit+0x60>)
 80009b6:	68fb      	ldr	r3, [r7, #12]
 80009b8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009ba:	bf00      	nop
 80009bc:	3714      	adds	r7, #20
 80009be:	46bd      	mov	sp, r7
 80009c0:	bc80      	pop	{r7}
 80009c2:	4770      	bx	lr
 80009c4:	40021000 	.word	0x40021000
 80009c8:	40010000 	.word	0x40010000

080009cc <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80009cc:	b580      	push	{r7, lr}
 80009ce:	b088      	sub	sp, #32
 80009d0:	af00      	add	r7, sp, #0
 80009d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009d4:	f107 0310 	add.w	r3, r7, #16
 80009d8:	2200      	movs	r2, #0
 80009da:	601a      	str	r2, [r3, #0]
 80009dc:	605a      	str	r2, [r3, #4]
 80009de:	609a      	str	r2, [r3, #8]
 80009e0:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI2)
 80009e2:	687b      	ldr	r3, [r7, #4]
 80009e4:	681b      	ldr	r3, [r3, #0]
 80009e6:	4a1c      	ldr	r2, [pc, #112]	; (8000a58 <HAL_SPI_MspInit+0x8c>)
 80009e8:	4293      	cmp	r3, r2
 80009ea:	d131      	bne.n	8000a50 <HAL_SPI_MspInit+0x84>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80009ec:	4b1b      	ldr	r3, [pc, #108]	; (8000a5c <HAL_SPI_MspInit+0x90>)
 80009ee:	69db      	ldr	r3, [r3, #28]
 80009f0:	4a1a      	ldr	r2, [pc, #104]	; (8000a5c <HAL_SPI_MspInit+0x90>)
 80009f2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80009f6:	61d3      	str	r3, [r2, #28]
 80009f8:	4b18      	ldr	r3, [pc, #96]	; (8000a5c <HAL_SPI_MspInit+0x90>)
 80009fa:	69db      	ldr	r3, [r3, #28]
 80009fc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a00:	60fb      	str	r3, [r7, #12]
 8000a02:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a04:	4b15      	ldr	r3, [pc, #84]	; (8000a5c <HAL_SPI_MspInit+0x90>)
 8000a06:	699b      	ldr	r3, [r3, #24]
 8000a08:	4a14      	ldr	r2, [pc, #80]	; (8000a5c <HAL_SPI_MspInit+0x90>)
 8000a0a:	f043 0308 	orr.w	r3, r3, #8
 8000a0e:	6193      	str	r3, [r2, #24]
 8000a10:	4b12      	ldr	r3, [pc, #72]	; (8000a5c <HAL_SPI_MspInit+0x90>)
 8000a12:	699b      	ldr	r3, [r3, #24]
 8000a14:	f003 0308 	and.w	r3, r3, #8
 8000a18:	60bb      	str	r3, [r7, #8]
 8000a1a:	68bb      	ldr	r3, [r7, #8]
    PB12     ------> SPI2_NSS
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15;
 8000a1c:	f44f 4330 	mov.w	r3, #45056	; 0xb000
 8000a20:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a22:	2302      	movs	r3, #2
 8000a24:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000a26:	2303      	movs	r3, #3
 8000a28:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a2a:	f107 0310 	add.w	r3, r7, #16
 8000a2e:	4619      	mov	r1, r3
 8000a30:	480b      	ldr	r0, [pc, #44]	; (8000a60 <HAL_SPI_MspInit+0x94>)
 8000a32:	f000 ff7f 	bl	8001934 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8000a36:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000a3a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a3c:	2300      	movs	r3, #0
 8000a3e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a40:	2300      	movs	r3, #0
 8000a42:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a44:	f107 0310 	add.w	r3, r7, #16
 8000a48:	4619      	mov	r1, r3
 8000a4a:	4805      	ldr	r0, [pc, #20]	; (8000a60 <HAL_SPI_MspInit+0x94>)
 8000a4c:	f000 ff72 	bl	8001934 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8000a50:	bf00      	nop
 8000a52:	3720      	adds	r7, #32
 8000a54:	46bd      	mov	sp, r7
 8000a56:	bd80      	pop	{r7, pc}
 8000a58:	40003800 	.word	0x40003800
 8000a5c:	40021000 	.word	0x40021000
 8000a60:	40010c00 	.word	0x40010c00

08000a64 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000a64:	b580      	push	{r7, lr}
 8000a66:	b08c      	sub	sp, #48	; 0x30
 8000a68:	af00      	add	r7, sp, #0
 8000a6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a6c:	f107 0320 	add.w	r3, r7, #32
 8000a70:	2200      	movs	r2, #0
 8000a72:	601a      	str	r2, [r3, #0]
 8000a74:	605a      	str	r2, [r3, #4]
 8000a76:	609a      	str	r2, [r3, #8]
 8000a78:	60da      	str	r2, [r3, #12]
  if(htim_base->Instance==TIM1)
 8000a7a:	687b      	ldr	r3, [r7, #4]
 8000a7c:	681b      	ldr	r3, [r3, #0]
 8000a7e:	4a4c      	ldr	r2, [pc, #304]	; (8000bb0 <HAL_TIM_Base_MspInit+0x14c>)
 8000a80:	4293      	cmp	r3, r2
 8000a82:	d10c      	bne.n	8000a9e <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000a84:	4b4b      	ldr	r3, [pc, #300]	; (8000bb4 <HAL_TIM_Base_MspInit+0x150>)
 8000a86:	699b      	ldr	r3, [r3, #24]
 8000a88:	4a4a      	ldr	r2, [pc, #296]	; (8000bb4 <HAL_TIM_Base_MspInit+0x150>)
 8000a8a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000a8e:	6193      	str	r3, [r2, #24]
 8000a90:	4b48      	ldr	r3, [pc, #288]	; (8000bb4 <HAL_TIM_Base_MspInit+0x150>)
 8000a92:	699b      	ldr	r3, [r3, #24]
 8000a94:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000a98:	61fb      	str	r3, [r7, #28]
 8000a9a:	69fb      	ldr	r3, [r7, #28]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8000a9c:	e084      	b.n	8000ba8 <HAL_TIM_Base_MspInit+0x144>
  else if(htim_base->Instance==TIM2)
 8000a9e:	687b      	ldr	r3, [r7, #4]
 8000aa0:	681b      	ldr	r3, [r3, #0]
 8000aa2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000aa6:	d14c      	bne.n	8000b42 <HAL_TIM_Base_MspInit+0xde>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000aa8:	4b42      	ldr	r3, [pc, #264]	; (8000bb4 <HAL_TIM_Base_MspInit+0x150>)
 8000aaa:	69db      	ldr	r3, [r3, #28]
 8000aac:	4a41      	ldr	r2, [pc, #260]	; (8000bb4 <HAL_TIM_Base_MspInit+0x150>)
 8000aae:	f043 0301 	orr.w	r3, r3, #1
 8000ab2:	61d3      	str	r3, [r2, #28]
 8000ab4:	4b3f      	ldr	r3, [pc, #252]	; (8000bb4 <HAL_TIM_Base_MspInit+0x150>)
 8000ab6:	69db      	ldr	r3, [r3, #28]
 8000ab8:	f003 0301 	and.w	r3, r3, #1
 8000abc:	61bb      	str	r3, [r7, #24]
 8000abe:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ac0:	4b3c      	ldr	r3, [pc, #240]	; (8000bb4 <HAL_TIM_Base_MspInit+0x150>)
 8000ac2:	699b      	ldr	r3, [r3, #24]
 8000ac4:	4a3b      	ldr	r2, [pc, #236]	; (8000bb4 <HAL_TIM_Base_MspInit+0x150>)
 8000ac6:	f043 0304 	orr.w	r3, r3, #4
 8000aca:	6193      	str	r3, [r2, #24]
 8000acc:	4b39      	ldr	r3, [pc, #228]	; (8000bb4 <HAL_TIM_Base_MspInit+0x150>)
 8000ace:	699b      	ldr	r3, [r3, #24]
 8000ad0:	f003 0304 	and.w	r3, r3, #4
 8000ad4:	617b      	str	r3, [r7, #20]
 8000ad6:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = senserInput_Pin;
 8000ad8:	2301      	movs	r3, #1
 8000ada:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000adc:	2300      	movs	r3, #0
 8000ade:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ae0:	2300      	movs	r3, #0
 8000ae2:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(senserInput_GPIO_Port, &GPIO_InitStruct);
 8000ae4:	f107 0320 	add.w	r3, r7, #32
 8000ae8:	4619      	mov	r1, r3
 8000aea:	4833      	ldr	r0, [pc, #204]	; (8000bb8 <HAL_TIM_Base_MspInit+0x154>)
 8000aec:	f000 ff22 	bl	8001934 <HAL_GPIO_Init>
    hdma_tim2_ch1.Instance = DMA1_Channel5;
 8000af0:	4b32      	ldr	r3, [pc, #200]	; (8000bbc <HAL_TIM_Base_MspInit+0x158>)
 8000af2:	4a33      	ldr	r2, [pc, #204]	; (8000bc0 <HAL_TIM_Base_MspInit+0x15c>)
 8000af4:	601a      	str	r2, [r3, #0]
    hdma_tim2_ch1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000af6:	4b31      	ldr	r3, [pc, #196]	; (8000bbc <HAL_TIM_Base_MspInit+0x158>)
 8000af8:	2200      	movs	r2, #0
 8000afa:	605a      	str	r2, [r3, #4]
    hdma_tim2_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000afc:	4b2f      	ldr	r3, [pc, #188]	; (8000bbc <HAL_TIM_Base_MspInit+0x158>)
 8000afe:	2200      	movs	r2, #0
 8000b00:	609a      	str	r2, [r3, #8]
    hdma_tim2_ch1.Init.MemInc = DMA_MINC_DISABLE;
 8000b02:	4b2e      	ldr	r3, [pc, #184]	; (8000bbc <HAL_TIM_Base_MspInit+0x158>)
 8000b04:	2200      	movs	r2, #0
 8000b06:	60da      	str	r2, [r3, #12]
    hdma_tim2_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000b08:	4b2c      	ldr	r3, [pc, #176]	; (8000bbc <HAL_TIM_Base_MspInit+0x158>)
 8000b0a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000b0e:	611a      	str	r2, [r3, #16]
    hdma_tim2_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000b10:	4b2a      	ldr	r3, [pc, #168]	; (8000bbc <HAL_TIM_Base_MspInit+0x158>)
 8000b12:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000b16:	615a      	str	r2, [r3, #20]
    hdma_tim2_ch1.Init.Mode = DMA_NORMAL;
 8000b18:	4b28      	ldr	r3, [pc, #160]	; (8000bbc <HAL_TIM_Base_MspInit+0x158>)
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	619a      	str	r2, [r3, #24]
    hdma_tim2_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8000b1e:	4b27      	ldr	r3, [pc, #156]	; (8000bbc <HAL_TIM_Base_MspInit+0x158>)
 8000b20:	2200      	movs	r2, #0
 8000b22:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_tim2_ch1) != HAL_OK)
 8000b24:	4825      	ldr	r0, [pc, #148]	; (8000bbc <HAL_TIM_Base_MspInit+0x158>)
 8000b26:	f000 fca1 	bl	800146c <HAL_DMA_Init>
 8000b2a:	4603      	mov	r3, r0
 8000b2c:	2b00      	cmp	r3, #0
 8000b2e:	d001      	beq.n	8000b34 <HAL_TIM_Base_MspInit+0xd0>
      Error_Handler();
 8000b30:	f7ff ff14 	bl	800095c <Error_Handler>
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC1],hdma_tim2_ch1);
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	4a21      	ldr	r2, [pc, #132]	; (8000bbc <HAL_TIM_Base_MspInit+0x158>)
 8000b38:	625a      	str	r2, [r3, #36]	; 0x24
 8000b3a:	4a20      	ldr	r2, [pc, #128]	; (8000bbc <HAL_TIM_Base_MspInit+0x158>)
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	6253      	str	r3, [r2, #36]	; 0x24
}
 8000b40:	e032      	b.n	8000ba8 <HAL_TIM_Base_MspInit+0x144>
  else if(htim_base->Instance==TIM3)
 8000b42:	687b      	ldr	r3, [r7, #4]
 8000b44:	681b      	ldr	r3, [r3, #0]
 8000b46:	4a1f      	ldr	r2, [pc, #124]	; (8000bc4 <HAL_TIM_Base_MspInit+0x160>)
 8000b48:	4293      	cmp	r3, r2
 8000b4a:	d114      	bne.n	8000b76 <HAL_TIM_Base_MspInit+0x112>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000b4c:	4b19      	ldr	r3, [pc, #100]	; (8000bb4 <HAL_TIM_Base_MspInit+0x150>)
 8000b4e:	69db      	ldr	r3, [r3, #28]
 8000b50:	4a18      	ldr	r2, [pc, #96]	; (8000bb4 <HAL_TIM_Base_MspInit+0x150>)
 8000b52:	f043 0302 	orr.w	r3, r3, #2
 8000b56:	61d3      	str	r3, [r2, #28]
 8000b58:	4b16      	ldr	r3, [pc, #88]	; (8000bb4 <HAL_TIM_Base_MspInit+0x150>)
 8000b5a:	69db      	ldr	r3, [r3, #28]
 8000b5c:	f003 0302 	and.w	r3, r3, #2
 8000b60:	613b      	str	r3, [r7, #16]
 8000b62:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8000b64:	2200      	movs	r2, #0
 8000b66:	2100      	movs	r1, #0
 8000b68:	201d      	movs	r0, #29
 8000b6a:	f000 fc48 	bl	80013fe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8000b6e:	201d      	movs	r0, #29
 8000b70:	f000 fc61 	bl	8001436 <HAL_NVIC_EnableIRQ>
}
 8000b74:	e018      	b.n	8000ba8 <HAL_TIM_Base_MspInit+0x144>
  else if(htim_base->Instance==TIM4)
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	681b      	ldr	r3, [r3, #0]
 8000b7a:	4a13      	ldr	r2, [pc, #76]	; (8000bc8 <HAL_TIM_Base_MspInit+0x164>)
 8000b7c:	4293      	cmp	r3, r2
 8000b7e:	d113      	bne.n	8000ba8 <HAL_TIM_Base_MspInit+0x144>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8000b80:	4b0c      	ldr	r3, [pc, #48]	; (8000bb4 <HAL_TIM_Base_MspInit+0x150>)
 8000b82:	69db      	ldr	r3, [r3, #28]
 8000b84:	4a0b      	ldr	r2, [pc, #44]	; (8000bb4 <HAL_TIM_Base_MspInit+0x150>)
 8000b86:	f043 0304 	orr.w	r3, r3, #4
 8000b8a:	61d3      	str	r3, [r2, #28]
 8000b8c:	4b09      	ldr	r3, [pc, #36]	; (8000bb4 <HAL_TIM_Base_MspInit+0x150>)
 8000b8e:	69db      	ldr	r3, [r3, #28]
 8000b90:	f003 0304 	and.w	r3, r3, #4
 8000b94:	60fb      	str	r3, [r7, #12]
 8000b96:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8000b98:	2200      	movs	r2, #0
 8000b9a:	2100      	movs	r1, #0
 8000b9c:	201e      	movs	r0, #30
 8000b9e:	f000 fc2e 	bl	80013fe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8000ba2:	201e      	movs	r0, #30
 8000ba4:	f000 fc47 	bl	8001436 <HAL_NVIC_EnableIRQ>
}
 8000ba8:	bf00      	nop
 8000baa:	3730      	adds	r7, #48	; 0x30
 8000bac:	46bd      	mov	sp, r7
 8000bae:	bd80      	pop	{r7, pc}
 8000bb0:	40012c00 	.word	0x40012c00
 8000bb4:	40021000 	.word	0x40021000
 8000bb8:	40010800 	.word	0x40010800
 8000bbc:	20000100 	.word	0x20000100
 8000bc0:	40020058 	.word	0x40020058
 8000bc4:	40000400 	.word	0x40000400
 8000bc8:	40000800 	.word	0x40000800

08000bcc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	b088      	sub	sp, #32
 8000bd0:	af00      	add	r7, sp, #0
 8000bd2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bd4:	f107 0310 	add.w	r3, r7, #16
 8000bd8:	2200      	movs	r2, #0
 8000bda:	601a      	str	r2, [r3, #0]
 8000bdc:	605a      	str	r2, [r3, #4]
 8000bde:	609a      	str	r2, [r3, #8]
 8000be0:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM1)
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	681b      	ldr	r3, [r3, #0]
 8000be6:	4a10      	ldr	r2, [pc, #64]	; (8000c28 <HAL_TIM_MspPostInit+0x5c>)
 8000be8:	4293      	cmp	r3, r2
 8000bea:	d118      	bne.n	8000c1e <HAL_TIM_MspPostInit+0x52>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bec:	4b0f      	ldr	r3, [pc, #60]	; (8000c2c <HAL_TIM_MspPostInit+0x60>)
 8000bee:	699b      	ldr	r3, [r3, #24]
 8000bf0:	4a0e      	ldr	r2, [pc, #56]	; (8000c2c <HAL_TIM_MspPostInit+0x60>)
 8000bf2:	f043 0304 	orr.w	r3, r3, #4
 8000bf6:	6193      	str	r3, [r2, #24]
 8000bf8:	4b0c      	ldr	r3, [pc, #48]	; (8000c2c <HAL_TIM_MspPostInit+0x60>)
 8000bfa:	699b      	ldr	r3, [r3, #24]
 8000bfc:	f003 0304 	and.w	r3, r3, #4
 8000c00:	60fb      	str	r3, [r7, #12]
 8000c02:	68fb      	ldr	r3, [r7, #12]
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    PA11     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = Z1_Pin|Z2_Pin|Z3_Pin|Z4_Pin;
 8000c04:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8000c08:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c0a:	2302      	movs	r3, #2
 8000c0c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c0e:	2302      	movs	r3, #2
 8000c10:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c12:	f107 0310 	add.w	r3, r7, #16
 8000c16:	4619      	mov	r1, r3
 8000c18:	4805      	ldr	r0, [pc, #20]	; (8000c30 <HAL_TIM_MspPostInit+0x64>)
 8000c1a:	f000 fe8b 	bl	8001934 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8000c1e:	bf00      	nop
 8000c20:	3720      	adds	r7, #32
 8000c22:	46bd      	mov	sp, r7
 8000c24:	bd80      	pop	{r7, pc}
 8000c26:	bf00      	nop
 8000c28:	40012c00 	.word	0x40012c00
 8000c2c:	40021000 	.word	0x40021000
 8000c30:	40010800 	.word	0x40010800

08000c34 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000c34:	b580      	push	{r7, lr}
 8000c36:	b08a      	sub	sp, #40	; 0x28
 8000c38:	af00      	add	r7, sp, #0
 8000c3a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c3c:	f107 0314 	add.w	r3, r7, #20
 8000c40:	2200      	movs	r2, #0
 8000c42:	601a      	str	r2, [r3, #0]
 8000c44:	605a      	str	r2, [r3, #4]
 8000c46:	609a      	str	r2, [r3, #8]
 8000c48:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	681b      	ldr	r3, [r3, #0]
 8000c4e:	4a22      	ldr	r2, [pc, #136]	; (8000cd8 <HAL_UART_MspInit+0xa4>)
 8000c50:	4293      	cmp	r3, r2
 8000c52:	d13d      	bne.n	8000cd0 <HAL_UART_MspInit+0x9c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000c54:	4b21      	ldr	r3, [pc, #132]	; (8000cdc <HAL_UART_MspInit+0xa8>)
 8000c56:	699b      	ldr	r3, [r3, #24]
 8000c58:	4a20      	ldr	r2, [pc, #128]	; (8000cdc <HAL_UART_MspInit+0xa8>)
 8000c5a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c5e:	6193      	str	r3, [r2, #24]
 8000c60:	4b1e      	ldr	r3, [pc, #120]	; (8000cdc <HAL_UART_MspInit+0xa8>)
 8000c62:	699b      	ldr	r3, [r3, #24]
 8000c64:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c68:	613b      	str	r3, [r7, #16]
 8000c6a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c6c:	4b1b      	ldr	r3, [pc, #108]	; (8000cdc <HAL_UART_MspInit+0xa8>)
 8000c6e:	699b      	ldr	r3, [r3, #24]
 8000c70:	4a1a      	ldr	r2, [pc, #104]	; (8000cdc <HAL_UART_MspInit+0xa8>)
 8000c72:	f043 0308 	orr.w	r3, r3, #8
 8000c76:	6193      	str	r3, [r2, #24]
 8000c78:	4b18      	ldr	r3, [pc, #96]	; (8000cdc <HAL_UART_MspInit+0xa8>)
 8000c7a:	699b      	ldr	r3, [r3, #24]
 8000c7c:	f003 0308 	and.w	r3, r3, #8
 8000c80:	60fb      	str	r3, [r7, #12]
 8000c82:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000c84:	2340      	movs	r3, #64	; 0x40
 8000c86:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c88:	2302      	movs	r3, #2
 8000c8a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000c8c:	2303      	movs	r3, #3
 8000c8e:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c90:	f107 0314 	add.w	r3, r7, #20
 8000c94:	4619      	mov	r1, r3
 8000c96:	4812      	ldr	r0, [pc, #72]	; (8000ce0 <HAL_UART_MspInit+0xac>)
 8000c98:	f000 fe4c 	bl	8001934 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000c9c:	2380      	movs	r3, #128	; 0x80
 8000c9e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ca0:	2300      	movs	r3, #0
 8000ca2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ca4:	2300      	movs	r3, #0
 8000ca6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ca8:	f107 0314 	add.w	r3, r7, #20
 8000cac:	4619      	mov	r1, r3
 8000cae:	480c      	ldr	r0, [pc, #48]	; (8000ce0 <HAL_UART_MspInit+0xac>)
 8000cb0:	f000 fe40 	bl	8001934 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_USART1_ENABLE();
 8000cb4:	4b0b      	ldr	r3, [pc, #44]	; (8000ce4 <HAL_UART_MspInit+0xb0>)
 8000cb6:	685b      	ldr	r3, [r3, #4]
 8000cb8:	627b      	str	r3, [r7, #36]	; 0x24
 8000cba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cbc:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8000cc0:	627b      	str	r3, [r7, #36]	; 0x24
 8000cc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cc4:	f043 0304 	orr.w	r3, r3, #4
 8000cc8:	627b      	str	r3, [r7, #36]	; 0x24
 8000cca:	4a06      	ldr	r2, [pc, #24]	; (8000ce4 <HAL_UART_MspInit+0xb0>)
 8000ccc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cce:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000cd0:	bf00      	nop
 8000cd2:	3728      	adds	r7, #40	; 0x28
 8000cd4:	46bd      	mov	sp, r7
 8000cd6:	bd80      	pop	{r7, pc}
 8000cd8:	40013800 	.word	0x40013800
 8000cdc:	40021000 	.word	0x40021000
 8000ce0:	40010c00 	.word	0x40010c00
 8000ce4:	40010000 	.word	0x40010000

08000ce8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ce8:	b480      	push	{r7}
 8000cea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000cec:	e7fe      	b.n	8000cec <NMI_Handler+0x4>

08000cee <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000cee:	b480      	push	{r7}
 8000cf0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000cf2:	e7fe      	b.n	8000cf2 <HardFault_Handler+0x4>

08000cf4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000cf4:	b480      	push	{r7}
 8000cf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000cf8:	e7fe      	b.n	8000cf8 <MemManage_Handler+0x4>

08000cfa <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000cfa:	b480      	push	{r7}
 8000cfc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000cfe:	e7fe      	b.n	8000cfe <BusFault_Handler+0x4>

08000d00 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d00:	b480      	push	{r7}
 8000d02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d04:	e7fe      	b.n	8000d04 <UsageFault_Handler+0x4>

08000d06 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d06:	b480      	push	{r7}
 8000d08:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d0a:	bf00      	nop
 8000d0c:	46bd      	mov	sp, r7
 8000d0e:	bc80      	pop	{r7}
 8000d10:	4770      	bx	lr

08000d12 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d12:	b480      	push	{r7}
 8000d14:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d16:	bf00      	nop
 8000d18:	46bd      	mov	sp, r7
 8000d1a:	bc80      	pop	{r7}
 8000d1c:	4770      	bx	lr

08000d1e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d1e:	b480      	push	{r7}
 8000d20:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d22:	bf00      	nop
 8000d24:	46bd      	mov	sp, r7
 8000d26:	bc80      	pop	{r7}
 8000d28:	4770      	bx	lr

08000d2a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d2a:	b580      	push	{r7, lr}
 8000d2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d2e:	f000 fa4f 	bl	80011d0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d32:	bf00      	nop
 8000d34:	bd80      	pop	{r7, pc}
	...

08000d38 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */
	HAL_TIM_IC_Stop_DMA(&htim2, TIM_CHANNEL_1);
 8000d3c:	2100      	movs	r1, #0
 8000d3e:	4832      	ldr	r0, [pc, #200]	; (8000e08 <DMA1_Channel5_IRQHandler+0xd0>)
 8000d40:	f002 f814 	bl	8002d6c <HAL_TIM_IC_Stop_DMA>
	/* Turn off all multiplexer */
	GPIOB->ODR &= ~((1 << Z1Receive) | (1 << Z2Receive) | (1 << Z3Receive) | (1 << Z4Receive));
 8000d44:	4b31      	ldr	r3, [pc, #196]	; (8000e0c <DMA1_Channel5_IRQHandler+0xd4>)
 8000d46:	68db      	ldr	r3, [r3, #12]
 8000d48:	4a30      	ldr	r2, [pc, #192]	; (8000e0c <DMA1_Channel5_IRQHandler+0xd4>)
 8000d4a:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8000d4e:	f023 0306 	bic.w	r3, r3, #6
 8000d52:	60d3      	str	r3, [r2, #12]
	switch (currentMode) {
 8000d54:	4b2e      	ldr	r3, [pc, #184]	; (8000e10 <DMA1_Channel5_IRQHandler+0xd8>)
 8000d56:	881b      	ldrh	r3, [r3, #0]
 8000d58:	3b01      	subs	r3, #1
 8000d5a:	2b07      	cmp	r3, #7
 8000d5c:	d842      	bhi.n	8000de4 <DMA1_Channel5_IRQHandler+0xac>
 8000d5e:	a201      	add	r2, pc, #4	; (adr r2, 8000d64 <DMA1_Channel5_IRQHandler+0x2c>)
 8000d60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d64:	08000d85 	.word	0x08000d85
 8000d68:	08000d91 	.word	0x08000d91
 8000d6c:	08000d9d 	.word	0x08000d9d
 8000d70:	08000da9 	.word	0x08000da9
 8000d74:	08000db5 	.word	0x08000db5
 8000d78:	08000dc1 	.word	0x08000dc1
 8000d7c:	08000dcd 	.word	0x08000dcd
 8000d80:	08000dd9 	.word	0x08000dd9
		case 1: { // Z1 > Z2
			Z12 = fastCounter & 0x0FFFF;
 8000d84:	4b23      	ldr	r3, [pc, #140]	; (8000e14 <DMA1_Channel5_IRQHandler+0xdc>)
 8000d86:	681b      	ldr	r3, [r3, #0]
 8000d88:	b29a      	uxth	r2, r3
 8000d8a:	4b23      	ldr	r3, [pc, #140]	; (8000e18 <DMA1_Channel5_IRQHandler+0xe0>)
 8000d8c:	801a      	strh	r2, [r3, #0]
			break;
 8000d8e:	e029      	b.n	8000de4 <DMA1_Channel5_IRQHandler+0xac>
		}
		case 2: { // Z2 > Z1
			Z21 = fastCounter & 0x0FFFF;
 8000d90:	4b20      	ldr	r3, [pc, #128]	; (8000e14 <DMA1_Channel5_IRQHandler+0xdc>)
 8000d92:	681b      	ldr	r3, [r3, #0]
 8000d94:	b29a      	uxth	r2, r3
 8000d96:	4b21      	ldr	r3, [pc, #132]	; (8000e1c <DMA1_Channel5_IRQHandler+0xe4>)
 8000d98:	801a      	strh	r2, [r3, #0]
			break;
 8000d9a:	e023      	b.n	8000de4 <DMA1_Channel5_IRQHandler+0xac>
		}
		case 3: { // Z2 > Z3
			Z23 = fastCounter & 0x0FFFF;
 8000d9c:	4b1d      	ldr	r3, [pc, #116]	; (8000e14 <DMA1_Channel5_IRQHandler+0xdc>)
 8000d9e:	681b      	ldr	r3, [r3, #0]
 8000da0:	b29a      	uxth	r2, r3
 8000da2:	4b1f      	ldr	r3, [pc, #124]	; (8000e20 <DMA1_Channel5_IRQHandler+0xe8>)
 8000da4:	801a      	strh	r2, [r3, #0]
			break;
 8000da6:	e01d      	b.n	8000de4 <DMA1_Channel5_IRQHandler+0xac>
		}
		case 4: { // Z3 > Z2
			Z32 = fastCounter & 0x0FFFF;
 8000da8:	4b1a      	ldr	r3, [pc, #104]	; (8000e14 <DMA1_Channel5_IRQHandler+0xdc>)
 8000daa:	681b      	ldr	r3, [r3, #0]
 8000dac:	b29a      	uxth	r2, r3
 8000dae:	4b1d      	ldr	r3, [pc, #116]	; (8000e24 <DMA1_Channel5_IRQHandler+0xec>)
 8000db0:	801a      	strh	r2, [r3, #0]
			break;
 8000db2:	e017      	b.n	8000de4 <DMA1_Channel5_IRQHandler+0xac>
		}
		case 5: { // Z3 > Z4
			Z34 = fastCounter & 0x0FFFF;
 8000db4:	4b17      	ldr	r3, [pc, #92]	; (8000e14 <DMA1_Channel5_IRQHandler+0xdc>)
 8000db6:	681b      	ldr	r3, [r3, #0]
 8000db8:	b29a      	uxth	r2, r3
 8000dba:	4b1b      	ldr	r3, [pc, #108]	; (8000e28 <DMA1_Channel5_IRQHandler+0xf0>)
 8000dbc:	801a      	strh	r2, [r3, #0]
			break;
 8000dbe:	e011      	b.n	8000de4 <DMA1_Channel5_IRQHandler+0xac>
		}
		case 6: { // Z4 > Z3
			Z43 = fastCounter & 0x0FFFF;
 8000dc0:	4b14      	ldr	r3, [pc, #80]	; (8000e14 <DMA1_Channel5_IRQHandler+0xdc>)
 8000dc2:	681b      	ldr	r3, [r3, #0]
 8000dc4:	b29a      	uxth	r2, r3
 8000dc6:	4b19      	ldr	r3, [pc, #100]	; (8000e2c <DMA1_Channel5_IRQHandler+0xf4>)
 8000dc8:	801a      	strh	r2, [r3, #0]
			break;
 8000dca:	e00b      	b.n	8000de4 <DMA1_Channel5_IRQHandler+0xac>
		}
		case 7: { // Z4 > Z1
			Z41 = fastCounter & 0x0FFFF;
 8000dcc:	4b11      	ldr	r3, [pc, #68]	; (8000e14 <DMA1_Channel5_IRQHandler+0xdc>)
 8000dce:	681b      	ldr	r3, [r3, #0]
 8000dd0:	b29a      	uxth	r2, r3
 8000dd2:	4b17      	ldr	r3, [pc, #92]	; (8000e30 <DMA1_Channel5_IRQHandler+0xf8>)
 8000dd4:	801a      	strh	r2, [r3, #0]
			break;
 8000dd6:	e005      	b.n	8000de4 <DMA1_Channel5_IRQHandler+0xac>
		}
		case 8: { // Z1 > Z4
			Z14 = fastCounter & 0x0FFFF;
 8000dd8:	4b0e      	ldr	r3, [pc, #56]	; (8000e14 <DMA1_Channel5_IRQHandler+0xdc>)
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	b29a      	uxth	r2, r3
 8000dde:	4b15      	ldr	r3, [pc, #84]	; (8000e34 <DMA1_Channel5_IRQHandler+0xfc>)
 8000de0:	801a      	strh	r2, [r3, #0]
			break;
 8000de2:	bf00      	nop
		}
	}
	HAL_GPIO_WritePin(GPIOA, LED_Pin, GPIO_PIN_SET);
 8000de4:	2201      	movs	r2, #1
 8000de6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000dea:	4813      	ldr	r0, [pc, #76]	; (8000e38 <DMA1_Channel5_IRQHandler+0x100>)
 8000dec:	f000 ff26 	bl	8001c3c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, LED_Pin, GPIO_PIN_RESET);
 8000df0:	2200      	movs	r2, #0
 8000df2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000df6:	4810      	ldr	r0, [pc, #64]	; (8000e38 <DMA1_Channel5_IRQHandler+0x100>)
 8000df8:	f000 ff20 	bl	8001c3c <HAL_GPIO_WritePin>

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim2_ch1);
 8000dfc:	480f      	ldr	r0, [pc, #60]	; (8000e3c <DMA1_Channel5_IRQHandler+0x104>)
 8000dfe:	f000 fc65 	bl	80016cc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 8000e02:	bf00      	nop
 8000e04:	bd80      	pop	{r7, pc}
 8000e06:	bf00      	nop
 8000e08:	200002d4 	.word	0x200002d4
 8000e0c:	40010c00 	.word	0x40010c00
 8000e10:	200002ce 	.word	0x200002ce
 8000e14:	20000238 	.word	0x20000238
 8000e18:	20000280 	.word	0x20000280
 8000e1c:	200001e6 	.word	0x200001e6
 8000e20:	200002d0 	.word	0x200002d0
 8000e24:	200002cc 	.word	0x200002cc
 8000e28:	200001ea 	.word	0x200001ea
 8000e2c:	20000282 	.word	0x20000282
 8000e30:	200001e8 	.word	0x200001e8
 8000e34:	200001e4 	.word	0x200001e4
 8000e38:	40010800 	.word	0x40010800
 8000e3c:	20000100 	.word	0x20000100

08000e40 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8000e40:	b580      	push	{r7, lr}
 8000e42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */
	HAL_TIM_IC_Start_DMA(&htim2, TIM_CHANNEL_1, (uint32_t*) &fastCounter, 1);
 8000e44:	2301      	movs	r3, #1
 8000e46:	4a0b      	ldr	r2, [pc, #44]	; (8000e74 <TIM3_IRQHandler+0x34>)
 8000e48:	2100      	movs	r1, #0
 8000e4a:	480b      	ldr	r0, [pc, #44]	; (8000e78 <TIM3_IRQHandler+0x38>)
 8000e4c:	f001 fe04 	bl	8002a58 <HAL_TIM_IC_Start_DMA>
	HAL_GPIO_WritePin(GPIOA, LED_Pin, GPIO_PIN_SET);
 8000e50:	2201      	movs	r2, #1
 8000e52:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000e56:	4809      	ldr	r0, [pc, #36]	; (8000e7c <TIM3_IRQHandler+0x3c>)
 8000e58:	f000 fef0 	bl	8001c3c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, LED_Pin, GPIO_PIN_RESET);
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000e62:	4806      	ldr	r0, [pc, #24]	; (8000e7c <TIM3_IRQHandler+0x3c>)
 8000e64:	f000 feea 	bl	8001c3c <HAL_GPIO_WritePin>

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8000e68:	4805      	ldr	r0, [pc, #20]	; (8000e80 <TIM3_IRQHandler+0x40>)
 8000e6a:	f002 f892 	bl	8002f92 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8000e6e:	bf00      	nop
 8000e70:	bd80      	pop	{r7, pc}
 8000e72:	bf00      	nop
 8000e74:	20000238 	.word	0x20000238
 8000e78:	200002d4 	.word	0x200002d4
 8000e7c:	40010800 	.word	0x40010800
 8000e80:	200001f0 	.word	0x200001f0

08000e84 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8000e84:	b580      	push	{r7, lr}
 8000e86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

	  /* Turn off all multiplexer */
	  GPIOB->ODR &= ~((1 << Z1Receive) | (1 << Z2Receive) | (1 << Z3Receive) | (1 << Z4Receive));
 8000e88:	4b75      	ldr	r3, [pc, #468]	; (8001060 <TIM4_IRQHandler+0x1dc>)
 8000e8a:	68db      	ldr	r3, [r3, #12]
 8000e8c:	4a74      	ldr	r2, [pc, #464]	; (8001060 <TIM4_IRQHandler+0x1dc>)
 8000e8e:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8000e92:	f023 0306 	bic.w	r3, r3, #6
 8000e96:	60d3      	str	r3, [r2, #12]

	  HAL_TIM_IC_Stop_DMA(&htim2, TIM_CHANNEL_1);	// If not stop in DMA callback.
 8000e98:	2100      	movs	r1, #0
 8000e9a:	4872      	ldr	r0, [pc, #456]	; (8001064 <TIM4_IRQHandler+0x1e0>)
 8000e9c:	f001 ff66 	bl	8002d6c <HAL_TIM_IC_Stop_DMA>
	  /* Restart timers */
	  HAL_TIM_OC_Stop(&htim1, TIM_CHANNEL_1);
 8000ea0:	2100      	movs	r1, #0
 8000ea2:	4871      	ldr	r0, [pc, #452]	; (8001068 <TIM4_IRQHandler+0x1e4>)
 8000ea4:	f001 fd1c 	bl	80028e0 <HAL_TIM_OC_Stop>
	  HAL_TIM_OC_Stop(&htim1, TIM_CHANNEL_2);
 8000ea8:	2104      	movs	r1, #4
 8000eaa:	486f      	ldr	r0, [pc, #444]	; (8001068 <TIM4_IRQHandler+0x1e4>)
 8000eac:	f001 fd18 	bl	80028e0 <HAL_TIM_OC_Stop>
	  HAL_TIM_OC_Stop(&htim1, TIM_CHANNEL_3);
 8000eb0:	2108      	movs	r1, #8
 8000eb2:	486d      	ldr	r0, [pc, #436]	; (8001068 <TIM4_IRQHandler+0x1e4>)
 8000eb4:	f001 fd14 	bl	80028e0 <HAL_TIM_OC_Stop>
	  HAL_TIM_OC_Stop(&htim1, TIM_CHANNEL_4);
 8000eb8:	210c      	movs	r1, #12
 8000eba:	486b      	ldr	r0, [pc, #428]	; (8001068 <TIM4_IRQHandler+0x1e4>)
 8000ebc:	f001 fd10 	bl	80028e0 <HAL_TIM_OC_Stop>

	  /* Set all timer channels for input mode */
	  GPIOA->CRH = (GPIOA->CRH & ~(GPIO_CRH_CNF8 | GPIO_CRH_MODE8
 8000ec0:	4b6a      	ldr	r3, [pc, #424]	; (800106c <TIM4_IRQHandler+0x1e8>)
 8000ec2:	685b      	ldr	r3, [r3, #4]
 8000ec4:	0c1b      	lsrs	r3, r3, #16
 8000ec6:	041b      	lsls	r3, r3, #16
 8000ec8:	4a68      	ldr	r2, [pc, #416]	; (800106c <TIM4_IRQHandler+0x1e8>)
			  	  | GPIO_CRH_CNF9 | GPIO_CRH_MODE9
				  | GPIO_CRH_CNF10 | GPIO_CRH_MODE10
				  | GPIO_CRH_CNF11 | GPIO_CRH_MODE11))
				  | (GPIO_CRH_CNF8_0 | GPIO_CRH_CNF9_0 | GPIO_CRH_CNF10_0 | GPIO_CRH_CNF11_0);
 8000eca:	f443 4388 	orr.w	r3, r3, #17408	; 0x4400
 8000ece:	f043 0344 	orr.w	r3, r3, #68	; 0x44
	  GPIOA->CRH = (GPIOA->CRH & ~(GPIO_CRH_CNF8 | GPIO_CRH_MODE8
 8000ed2:	6053      	str	r3, [r2, #4]

	  firstFlag = TRUE;
 8000ed4:	4b66      	ldr	r3, [pc, #408]	; (8001070 <TIM4_IRQHandler+0x1ec>)
 8000ed6:	2201      	movs	r2, #1
 8000ed8:	701a      	strb	r2, [r3, #0]

	  switch (currentMode++) {
 8000eda:	4b66      	ldr	r3, [pc, #408]	; (8001074 <TIM4_IRQHandler+0x1f0>)
 8000edc:	881b      	ldrh	r3, [r3, #0]
 8000ede:	1c5a      	adds	r2, r3, #1
 8000ee0:	b291      	uxth	r1, r2
 8000ee2:	4a64      	ldr	r2, [pc, #400]	; (8001074 <TIM4_IRQHandler+0x1f0>)
 8000ee4:	8011      	strh	r1, [r2, #0]
 8000ee6:	2b08      	cmp	r3, #8
 8000ee8:	f200 80b5 	bhi.w	8001056 <TIM4_IRQHandler+0x1d2>
 8000eec:	a201      	add	r2, pc, #4	; (adr r2, 8000ef4 <TIM4_IRQHandler+0x70>)
 8000eee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ef2:	bf00      	nop
 8000ef4:	08000f19 	.word	0x08000f19
 8000ef8:	08000f3f 	.word	0x08000f3f
 8000efc:	08000f65 	.word	0x08000f65
 8000f00:	08000f8b 	.word	0x08000f8b
 8000f04:	08000fb1 	.word	0x08000fb1
 8000f08:	08000fd7 	.word	0x08000fd7
 8000f0c:	08000ffd 	.word	0x08000ffd
 8000f10:	08001023 	.word	0x08001023
 8000f14:	08001049 	.word	0x08001049
		  case 0: { // Z1 (transmit) > Z2 (receive)
			  setZ1transmit; // Set Z1 port to output mode
 8000f18:	4b54      	ldr	r3, [pc, #336]	; (800106c <TIM4_IRQHandler+0x1e8>)
 8000f1a:	685b      	ldr	r3, [r3, #4]
 8000f1c:	f023 030e 	bic.w	r3, r3, #14
 8000f20:	4a52      	ldr	r2, [pc, #328]	; (800106c <TIM4_IRQHandler+0x1e8>)
 8000f22:	f043 030a 	orr.w	r3, r3, #10
 8000f26:	6053      	str	r3, [r2, #4]
			  GPIOB->ODR |= (1 << Z2Receive); // Turn on multiplexer for input Z2 channel.
 8000f28:	4b4d      	ldr	r3, [pc, #308]	; (8001060 <TIM4_IRQHandler+0x1dc>)
 8000f2a:	68db      	ldr	r3, [r3, #12]
 8000f2c:	4a4c      	ldr	r2, [pc, #304]	; (8001060 <TIM4_IRQHandler+0x1dc>)
 8000f2e:	f043 0304 	orr.w	r3, r3, #4
 8000f32:	60d3      	str	r3, [r2, #12]
			  HAL_TIM_OC_Start(&htim1, TIM_CHANNEL_1);
 8000f34:	2100      	movs	r1, #0
 8000f36:	484c      	ldr	r0, [pc, #304]	; (8001068 <TIM4_IRQHandler+0x1e4>)
 8000f38:	f001 fc30 	bl	800279c <HAL_TIM_OC_Start>
			  break;
 8000f3c:	e08b      	b.n	8001056 <TIM4_IRQHandler+0x1d2>
		  }
		  case 1: { // Z2 (transmit) > Z1 (receive)
			  setZ2transmit; // Set Z2 port to output mode
 8000f3e:	4b4b      	ldr	r3, [pc, #300]	; (800106c <TIM4_IRQHandler+0x1e8>)
 8000f40:	685b      	ldr	r3, [r3, #4]
 8000f42:	f023 03e0 	bic.w	r3, r3, #224	; 0xe0
 8000f46:	4a49      	ldr	r2, [pc, #292]	; (800106c <TIM4_IRQHandler+0x1e8>)
 8000f48:	f043 03a0 	orr.w	r3, r3, #160	; 0xa0
 8000f4c:	6053      	str	r3, [r2, #4]
			  GPIOB->ODR |= (1 << Z1Receive); // Turn on multiplexer for input Z1 channel.
 8000f4e:	4b44      	ldr	r3, [pc, #272]	; (8001060 <TIM4_IRQHandler+0x1dc>)
 8000f50:	68db      	ldr	r3, [r3, #12]
 8000f52:	4a43      	ldr	r2, [pc, #268]	; (8001060 <TIM4_IRQHandler+0x1dc>)
 8000f54:	f043 0302 	orr.w	r3, r3, #2
 8000f58:	60d3      	str	r3, [r2, #12]
			  HAL_TIM_OC_Start(&htim1, TIM_CHANNEL_2);
 8000f5a:	2104      	movs	r1, #4
 8000f5c:	4842      	ldr	r0, [pc, #264]	; (8001068 <TIM4_IRQHandler+0x1e4>)
 8000f5e:	f001 fc1d 	bl	800279c <HAL_TIM_OC_Start>
			  break;
 8000f62:	e078      	b.n	8001056 <TIM4_IRQHandler+0x1d2>
		  }
		  case 2: { // Z2 (transmit) > Z3 (receive)
			  //readyFlag = TRUE;
			  //currentMode = 0;
			  setZ2transmit; // Set Z2 port to output mode
 8000f64:	4b41      	ldr	r3, [pc, #260]	; (800106c <TIM4_IRQHandler+0x1e8>)
 8000f66:	685b      	ldr	r3, [r3, #4]
 8000f68:	f023 03e0 	bic.w	r3, r3, #224	; 0xe0
 8000f6c:	4a3f      	ldr	r2, [pc, #252]	; (800106c <TIM4_IRQHandler+0x1e8>)
 8000f6e:	f043 03a0 	orr.w	r3, r3, #160	; 0xa0
 8000f72:	6053      	str	r3, [r2, #4]
			  GPIOB->ODR |= (1 << Z3Receive); // Turn on multiplexer for input Z3 channel.
 8000f74:	4b3a      	ldr	r3, [pc, #232]	; (8001060 <TIM4_IRQHandler+0x1dc>)
 8000f76:	68db      	ldr	r3, [r3, #12]
 8000f78:	4a39      	ldr	r2, [pc, #228]	; (8001060 <TIM4_IRQHandler+0x1dc>)
 8000f7a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000f7e:	60d3      	str	r3, [r2, #12]
			  HAL_TIM_OC_Start(&htim1, TIM_CHANNEL_2);
 8000f80:	2104      	movs	r1, #4
 8000f82:	4839      	ldr	r0, [pc, #228]	; (8001068 <TIM4_IRQHandler+0x1e4>)
 8000f84:	f001 fc0a 	bl	800279c <HAL_TIM_OC_Start>
			  break;
 8000f88:	e065      	b.n	8001056 <TIM4_IRQHandler+0x1d2>
		  }
		  case 3: { // Z3 (transmit) > Z2 (receive)
			  setZ3transmit; // Set Z3 port to output mode
 8000f8a:	4b38      	ldr	r3, [pc, #224]	; (800106c <TIM4_IRQHandler+0x1e8>)
 8000f8c:	685b      	ldr	r3, [r3, #4]
 8000f8e:	f423 6360 	bic.w	r3, r3, #3584	; 0xe00
 8000f92:	4a36      	ldr	r2, [pc, #216]	; (800106c <TIM4_IRQHandler+0x1e8>)
 8000f94:	f443 6320 	orr.w	r3, r3, #2560	; 0xa00
 8000f98:	6053      	str	r3, [r2, #4]
			  GPIOB->ODR |= (1 << Z2Receive); // Turn on multiplexer for input Z2 channel.
 8000f9a:	4b31      	ldr	r3, [pc, #196]	; (8001060 <TIM4_IRQHandler+0x1dc>)
 8000f9c:	68db      	ldr	r3, [r3, #12]
 8000f9e:	4a30      	ldr	r2, [pc, #192]	; (8001060 <TIM4_IRQHandler+0x1dc>)
 8000fa0:	f043 0304 	orr.w	r3, r3, #4
 8000fa4:	60d3      	str	r3, [r2, #12]
			  HAL_TIM_OC_Start(&htim1, TIM_CHANNEL_3);
 8000fa6:	2108      	movs	r1, #8
 8000fa8:	482f      	ldr	r0, [pc, #188]	; (8001068 <TIM4_IRQHandler+0x1e4>)
 8000faa:	f001 fbf7 	bl	800279c <HAL_TIM_OC_Start>
			  break;
 8000fae:	e052      	b.n	8001056 <TIM4_IRQHandler+0x1d2>
		  }
		  case 4: { // Z3 (transmit) > Z4 (receive)
			  setZ3transmit; // Set Z3 port to output mode
 8000fb0:	4b2e      	ldr	r3, [pc, #184]	; (800106c <TIM4_IRQHandler+0x1e8>)
 8000fb2:	685b      	ldr	r3, [r3, #4]
 8000fb4:	f423 6360 	bic.w	r3, r3, #3584	; 0xe00
 8000fb8:	4a2c      	ldr	r2, [pc, #176]	; (800106c <TIM4_IRQHandler+0x1e8>)
 8000fba:	f443 6320 	orr.w	r3, r3, #2560	; 0xa00
 8000fbe:	6053      	str	r3, [r2, #4]
			  GPIOB->ODR |= (uint16_t) (1 << Z4Receive); // Turn on multiplexer for input Z4 channel.
 8000fc0:	4b27      	ldr	r3, [pc, #156]	; (8001060 <TIM4_IRQHandler+0x1dc>)
 8000fc2:	68db      	ldr	r3, [r3, #12]
 8000fc4:	4a26      	ldr	r2, [pc, #152]	; (8001060 <TIM4_IRQHandler+0x1dc>)
 8000fc6:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000fca:	60d3      	str	r3, [r2, #12]
			  HAL_TIM_OC_Start(&htim1, TIM_CHANNEL_3);
 8000fcc:	2108      	movs	r1, #8
 8000fce:	4826      	ldr	r0, [pc, #152]	; (8001068 <TIM4_IRQHandler+0x1e4>)
 8000fd0:	f001 fbe4 	bl	800279c <HAL_TIM_OC_Start>
			  break;
 8000fd4:	e03f      	b.n	8001056 <TIM4_IRQHandler+0x1d2>
		  }
		  case 5: { // Z4 (transmit) > Z3 (receive)
			  setZ4transmit; // Set Z4 port to output mode
 8000fd6:	4b25      	ldr	r3, [pc, #148]	; (800106c <TIM4_IRQHandler+0x1e8>)
 8000fd8:	685b      	ldr	r3, [r3, #4]
 8000fda:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8000fde:	4a23      	ldr	r2, [pc, #140]	; (800106c <TIM4_IRQHandler+0x1e8>)
 8000fe0:	f443 4320 	orr.w	r3, r3, #40960	; 0xa000
 8000fe4:	6053      	str	r3, [r2, #4]
			  GPIOB->ODR |= (1 << Z3Receive); // Turn on multiplexer for input Z4 channel.
 8000fe6:	4b1e      	ldr	r3, [pc, #120]	; (8001060 <TIM4_IRQHandler+0x1dc>)
 8000fe8:	68db      	ldr	r3, [r3, #12]
 8000fea:	4a1d      	ldr	r2, [pc, #116]	; (8001060 <TIM4_IRQHandler+0x1dc>)
 8000fec:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000ff0:	60d3      	str	r3, [r2, #12]
			  HAL_TIM_OC_Start(&htim1, TIM_CHANNEL_4);
 8000ff2:	210c      	movs	r1, #12
 8000ff4:	481c      	ldr	r0, [pc, #112]	; (8001068 <TIM4_IRQHandler+0x1e4>)
 8000ff6:	f001 fbd1 	bl	800279c <HAL_TIM_OC_Start>
			  break;
 8000ffa:	e02c      	b.n	8001056 <TIM4_IRQHandler+0x1d2>
		  }
		  case 6: { // Z4 (transmit) > Z1 (receive)
			  setZ4transmit;	// Set Z4 port to output mode
 8000ffc:	4b1b      	ldr	r3, [pc, #108]	; (800106c <TIM4_IRQHandler+0x1e8>)
 8000ffe:	685b      	ldr	r3, [r3, #4]
 8001000:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8001004:	4a19      	ldr	r2, [pc, #100]	; (800106c <TIM4_IRQHandler+0x1e8>)
 8001006:	f443 4320 	orr.w	r3, r3, #40960	; 0xa000
 800100a:	6053      	str	r3, [r2, #4]
			  GPIOB->ODR |= (1 << Z1Receive); // Turn on multiplexer for input Z4 channel.
 800100c:	4b14      	ldr	r3, [pc, #80]	; (8001060 <TIM4_IRQHandler+0x1dc>)
 800100e:	68db      	ldr	r3, [r3, #12]
 8001010:	4a13      	ldr	r2, [pc, #76]	; (8001060 <TIM4_IRQHandler+0x1dc>)
 8001012:	f043 0302 	orr.w	r3, r3, #2
 8001016:	60d3      	str	r3, [r2, #12]
			  HAL_TIM_OC_Start(&htim1, TIM_CHANNEL_4);
 8001018:	210c      	movs	r1, #12
 800101a:	4813      	ldr	r0, [pc, #76]	; (8001068 <TIM4_IRQHandler+0x1e4>)
 800101c:	f001 fbbe 	bl	800279c <HAL_TIM_OC_Start>
			  break;
 8001020:	e019      	b.n	8001056 <TIM4_IRQHandler+0x1d2>
		  }
		  case 7: { // Z1 (transmit) > Z4 (receive)
			  setZ1transmit;	// Set Z1 port to output mode
 8001022:	4b12      	ldr	r3, [pc, #72]	; (800106c <TIM4_IRQHandler+0x1e8>)
 8001024:	685b      	ldr	r3, [r3, #4]
 8001026:	f023 030e 	bic.w	r3, r3, #14
 800102a:	4a10      	ldr	r2, [pc, #64]	; (800106c <TIM4_IRQHandler+0x1e8>)
 800102c:	f043 030a 	orr.w	r3, r3, #10
 8001030:	6053      	str	r3, [r2, #4]
			  GPIOB->ODR |= (1 << Z4Receive); // Turn on multiplexer for input Z4 channel.
 8001032:	4b0b      	ldr	r3, [pc, #44]	; (8001060 <TIM4_IRQHandler+0x1dc>)
 8001034:	68db      	ldr	r3, [r3, #12]
 8001036:	4a0a      	ldr	r2, [pc, #40]	; (8001060 <TIM4_IRQHandler+0x1dc>)
 8001038:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800103c:	60d3      	str	r3, [r2, #12]
			  HAL_TIM_OC_Start(&htim1, TIM_CHANNEL_1);
 800103e:	2100      	movs	r1, #0
 8001040:	4809      	ldr	r0, [pc, #36]	; (8001068 <TIM4_IRQHandler+0x1e4>)
 8001042:	f001 fbab 	bl	800279c <HAL_TIM_OC_Start>
			  break;
 8001046:	e006      	b.n	8001056 <TIM4_IRQHandler+0x1d2>
		  }
		  case 8: { // All data complete.
			  readyFlag = TRUE;
 8001048:	4b0b      	ldr	r3, [pc, #44]	; (8001078 <TIM4_IRQHandler+0x1f4>)
 800104a:	2201      	movs	r2, #1
 800104c:	701a      	strb	r2, [r3, #0]
			  currentMode = 0;
 800104e:	4b09      	ldr	r3, [pc, #36]	; (8001074 <TIM4_IRQHandler+0x1f0>)
 8001050:	2200      	movs	r2, #0
 8001052:	801a      	strh	r2, [r3, #0]
			  break;
 8001054:	bf00      	nop
		  }
	  }
	  //HAL_TIM_IC_Start_DMA(&htim2, TIM_CHANNEL_1, (uint32_t*) &fastCounter, 1);

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001056:	4809      	ldr	r0, [pc, #36]	; (800107c <TIM4_IRQHandler+0x1f8>)
 8001058:	f001 ff9b 	bl	8002f92 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 800105c:	bf00      	nop
 800105e:	bd80      	pop	{r7, pc}
 8001060:	40010c00 	.word	0x40010c00
 8001064:	200002d4 	.word	0x200002d4
 8001068:	20000284 	.word	0x20000284
 800106c:	40010800 	.word	0x40010800
 8001070:	200002d2 	.word	0x200002d2
 8001074:	200002ce 	.word	0x200002ce
 8001078:	200000fc 	.word	0x200000fc
 800107c:	2000019c 	.word	0x2000019c

08001080 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001080:	b580      	push	{r7, lr}
 8001082:	b086      	sub	sp, #24
 8001084:	af00      	add	r7, sp, #0
 8001086:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001088:	4a14      	ldr	r2, [pc, #80]	; (80010dc <_sbrk+0x5c>)
 800108a:	4b15      	ldr	r3, [pc, #84]	; (80010e0 <_sbrk+0x60>)
 800108c:	1ad3      	subs	r3, r2, r3
 800108e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001090:	697b      	ldr	r3, [r7, #20]
 8001092:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001094:	4b13      	ldr	r3, [pc, #76]	; (80010e4 <_sbrk+0x64>)
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	2b00      	cmp	r3, #0
 800109a:	d102      	bne.n	80010a2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800109c:	4b11      	ldr	r3, [pc, #68]	; (80010e4 <_sbrk+0x64>)
 800109e:	4a12      	ldr	r2, [pc, #72]	; (80010e8 <_sbrk+0x68>)
 80010a0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80010a2:	4b10      	ldr	r3, [pc, #64]	; (80010e4 <_sbrk+0x64>)
 80010a4:	681a      	ldr	r2, [r3, #0]
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	4413      	add	r3, r2
 80010aa:	693a      	ldr	r2, [r7, #16]
 80010ac:	429a      	cmp	r2, r3
 80010ae:	d207      	bcs.n	80010c0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80010b0:	f003 fa42 	bl	8004538 <__errno>
 80010b4:	4603      	mov	r3, r0
 80010b6:	220c      	movs	r2, #12
 80010b8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80010ba:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80010be:	e009      	b.n	80010d4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80010c0:	4b08      	ldr	r3, [pc, #32]	; (80010e4 <_sbrk+0x64>)
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80010c6:	4b07      	ldr	r3, [pc, #28]	; (80010e4 <_sbrk+0x64>)
 80010c8:	681a      	ldr	r2, [r3, #0]
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	4413      	add	r3, r2
 80010ce:	4a05      	ldr	r2, [pc, #20]	; (80010e4 <_sbrk+0x64>)
 80010d0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80010d2:	68fb      	ldr	r3, [r7, #12]
}
 80010d4:	4618      	mov	r0, r3
 80010d6:	3718      	adds	r7, #24
 80010d8:	46bd      	mov	sp, r7
 80010da:	bd80      	pop	{r7, pc}
 80010dc:	20005000 	.word	0x20005000
 80010e0:	00000400 	.word	0x00000400
 80010e4:	200000f0 	.word	0x200000f0
 80010e8:	20000330 	.word	0x20000330

080010ec <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80010ec:	b480      	push	{r7}
 80010ee:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80010f0:	bf00      	nop
 80010f2:	46bd      	mov	sp, r7
 80010f4:	bc80      	pop	{r7}
 80010f6:	4770      	bx	lr

080010f8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80010f8:	480c      	ldr	r0, [pc, #48]	; (800112c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80010fa:	490d      	ldr	r1, [pc, #52]	; (8001130 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80010fc:	4a0d      	ldr	r2, [pc, #52]	; (8001134 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80010fe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001100:	e002      	b.n	8001108 <LoopCopyDataInit>

08001102 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001102:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001104:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001106:	3304      	adds	r3, #4

08001108 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001108:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800110a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800110c:	d3f9      	bcc.n	8001102 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800110e:	4a0a      	ldr	r2, [pc, #40]	; (8001138 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001110:	4c0a      	ldr	r4, [pc, #40]	; (800113c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001112:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001114:	e001      	b.n	800111a <LoopFillZerobss>

08001116 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001116:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001118:	3204      	adds	r2, #4

0800111a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800111a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800111c:	d3fb      	bcc.n	8001116 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800111e:	f7ff ffe5 	bl	80010ec <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001122:	f003 fa0f 	bl	8004544 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001126:	f7ff f811 	bl	800014c <main>
  bx lr
 800112a:	4770      	bx	lr
  ldr r0, =_sdata
 800112c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001130:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8001134:	08004eb4 	.word	0x08004eb4
  ldr r2, =_sbss
 8001138:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 800113c:	20000330 	.word	0x20000330

08001140 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001140:	e7fe      	b.n	8001140 <ADC1_2_IRQHandler>
	...

08001144 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001144:	b580      	push	{r7, lr}
 8001146:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001148:	4b08      	ldr	r3, [pc, #32]	; (800116c <HAL_Init+0x28>)
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	4a07      	ldr	r2, [pc, #28]	; (800116c <HAL_Init+0x28>)
 800114e:	f043 0310 	orr.w	r3, r3, #16
 8001152:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001154:	2003      	movs	r0, #3
 8001156:	f000 f947 	bl	80013e8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800115a:	2000      	movs	r0, #0
 800115c:	f000 f808 	bl	8001170 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001160:	f7ff fc02 	bl	8000968 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001164:	2300      	movs	r3, #0
}
 8001166:	4618      	mov	r0, r3
 8001168:	bd80      	pop	{r7, pc}
 800116a:	bf00      	nop
 800116c:	40022000 	.word	0x40022000

08001170 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001170:	b580      	push	{r7, lr}
 8001172:	b082      	sub	sp, #8
 8001174:	af00      	add	r7, sp, #0
 8001176:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001178:	4b12      	ldr	r3, [pc, #72]	; (80011c4 <HAL_InitTick+0x54>)
 800117a:	681a      	ldr	r2, [r3, #0]
 800117c:	4b12      	ldr	r3, [pc, #72]	; (80011c8 <HAL_InitTick+0x58>)
 800117e:	781b      	ldrb	r3, [r3, #0]
 8001180:	4619      	mov	r1, r3
 8001182:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001186:	fbb3 f3f1 	udiv	r3, r3, r1
 800118a:	fbb2 f3f3 	udiv	r3, r2, r3
 800118e:	4618      	mov	r0, r3
 8001190:	f000 f95f 	bl	8001452 <HAL_SYSTICK_Config>
 8001194:	4603      	mov	r3, r0
 8001196:	2b00      	cmp	r3, #0
 8001198:	d001      	beq.n	800119e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800119a:	2301      	movs	r3, #1
 800119c:	e00e      	b.n	80011bc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	2b0f      	cmp	r3, #15
 80011a2:	d80a      	bhi.n	80011ba <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80011a4:	2200      	movs	r2, #0
 80011a6:	6879      	ldr	r1, [r7, #4]
 80011a8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80011ac:	f000 f927 	bl	80013fe <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80011b0:	4a06      	ldr	r2, [pc, #24]	; (80011cc <HAL_InitTick+0x5c>)
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80011b6:	2300      	movs	r3, #0
 80011b8:	e000      	b.n	80011bc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80011ba:	2301      	movs	r3, #1
}
 80011bc:	4618      	mov	r0, r3
 80011be:	3708      	adds	r7, #8
 80011c0:	46bd      	mov	sp, r7
 80011c2:	bd80      	pop	{r7, pc}
 80011c4:	20000000 	.word	0x20000000
 80011c8:	20000008 	.word	0x20000008
 80011cc:	20000004 	.word	0x20000004

080011d0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80011d0:	b480      	push	{r7}
 80011d2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80011d4:	4b05      	ldr	r3, [pc, #20]	; (80011ec <HAL_IncTick+0x1c>)
 80011d6:	781b      	ldrb	r3, [r3, #0]
 80011d8:	461a      	mov	r2, r3
 80011da:	4b05      	ldr	r3, [pc, #20]	; (80011f0 <HAL_IncTick+0x20>)
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	4413      	add	r3, r2
 80011e0:	4a03      	ldr	r2, [pc, #12]	; (80011f0 <HAL_IncTick+0x20>)
 80011e2:	6013      	str	r3, [r2, #0]
}
 80011e4:	bf00      	nop
 80011e6:	46bd      	mov	sp, r7
 80011e8:	bc80      	pop	{r7}
 80011ea:	4770      	bx	lr
 80011ec:	20000008 	.word	0x20000008
 80011f0:	2000031c 	.word	0x2000031c

080011f4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80011f4:	b480      	push	{r7}
 80011f6:	af00      	add	r7, sp, #0
  return uwTick;
 80011f8:	4b02      	ldr	r3, [pc, #8]	; (8001204 <HAL_GetTick+0x10>)
 80011fa:	681b      	ldr	r3, [r3, #0]
}
 80011fc:	4618      	mov	r0, r3
 80011fe:	46bd      	mov	sp, r7
 8001200:	bc80      	pop	{r7}
 8001202:	4770      	bx	lr
 8001204:	2000031c 	.word	0x2000031c

08001208 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001208:	b580      	push	{r7, lr}
 800120a:	b084      	sub	sp, #16
 800120c:	af00      	add	r7, sp, #0
 800120e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001210:	f7ff fff0 	bl	80011f4 <HAL_GetTick>
 8001214:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800121a:	68fb      	ldr	r3, [r7, #12]
 800121c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001220:	d005      	beq.n	800122e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001222:	4b0a      	ldr	r3, [pc, #40]	; (800124c <HAL_Delay+0x44>)
 8001224:	781b      	ldrb	r3, [r3, #0]
 8001226:	461a      	mov	r2, r3
 8001228:	68fb      	ldr	r3, [r7, #12]
 800122a:	4413      	add	r3, r2
 800122c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800122e:	bf00      	nop
 8001230:	f7ff ffe0 	bl	80011f4 <HAL_GetTick>
 8001234:	4602      	mov	r2, r0
 8001236:	68bb      	ldr	r3, [r7, #8]
 8001238:	1ad3      	subs	r3, r2, r3
 800123a:	68fa      	ldr	r2, [r7, #12]
 800123c:	429a      	cmp	r2, r3
 800123e:	d8f7      	bhi.n	8001230 <HAL_Delay+0x28>
  {
  }
}
 8001240:	bf00      	nop
 8001242:	bf00      	nop
 8001244:	3710      	adds	r7, #16
 8001246:	46bd      	mov	sp, r7
 8001248:	bd80      	pop	{r7, pc}
 800124a:	bf00      	nop
 800124c:	20000008 	.word	0x20000008

08001250 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001250:	b480      	push	{r7}
 8001252:	b085      	sub	sp, #20
 8001254:	af00      	add	r7, sp, #0
 8001256:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	f003 0307 	and.w	r3, r3, #7
 800125e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001260:	4b0c      	ldr	r3, [pc, #48]	; (8001294 <__NVIC_SetPriorityGrouping+0x44>)
 8001262:	68db      	ldr	r3, [r3, #12]
 8001264:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001266:	68ba      	ldr	r2, [r7, #8]
 8001268:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800126c:	4013      	ands	r3, r2
 800126e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001270:	68fb      	ldr	r3, [r7, #12]
 8001272:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001274:	68bb      	ldr	r3, [r7, #8]
 8001276:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001278:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800127c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001280:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001282:	4a04      	ldr	r2, [pc, #16]	; (8001294 <__NVIC_SetPriorityGrouping+0x44>)
 8001284:	68bb      	ldr	r3, [r7, #8]
 8001286:	60d3      	str	r3, [r2, #12]
}
 8001288:	bf00      	nop
 800128a:	3714      	adds	r7, #20
 800128c:	46bd      	mov	sp, r7
 800128e:	bc80      	pop	{r7}
 8001290:	4770      	bx	lr
 8001292:	bf00      	nop
 8001294:	e000ed00 	.word	0xe000ed00

08001298 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001298:	b480      	push	{r7}
 800129a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800129c:	4b04      	ldr	r3, [pc, #16]	; (80012b0 <__NVIC_GetPriorityGrouping+0x18>)
 800129e:	68db      	ldr	r3, [r3, #12]
 80012a0:	0a1b      	lsrs	r3, r3, #8
 80012a2:	f003 0307 	and.w	r3, r3, #7
}
 80012a6:	4618      	mov	r0, r3
 80012a8:	46bd      	mov	sp, r7
 80012aa:	bc80      	pop	{r7}
 80012ac:	4770      	bx	lr
 80012ae:	bf00      	nop
 80012b0:	e000ed00 	.word	0xe000ed00

080012b4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012b4:	b480      	push	{r7}
 80012b6:	b083      	sub	sp, #12
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	4603      	mov	r3, r0
 80012bc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	db0b      	blt.n	80012de <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80012c6:	79fb      	ldrb	r3, [r7, #7]
 80012c8:	f003 021f 	and.w	r2, r3, #31
 80012cc:	4906      	ldr	r1, [pc, #24]	; (80012e8 <__NVIC_EnableIRQ+0x34>)
 80012ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012d2:	095b      	lsrs	r3, r3, #5
 80012d4:	2001      	movs	r0, #1
 80012d6:	fa00 f202 	lsl.w	r2, r0, r2
 80012da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80012de:	bf00      	nop
 80012e0:	370c      	adds	r7, #12
 80012e2:	46bd      	mov	sp, r7
 80012e4:	bc80      	pop	{r7}
 80012e6:	4770      	bx	lr
 80012e8:	e000e100 	.word	0xe000e100

080012ec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80012ec:	b480      	push	{r7}
 80012ee:	b083      	sub	sp, #12
 80012f0:	af00      	add	r7, sp, #0
 80012f2:	4603      	mov	r3, r0
 80012f4:	6039      	str	r1, [r7, #0]
 80012f6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	db0a      	blt.n	8001316 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001300:	683b      	ldr	r3, [r7, #0]
 8001302:	b2da      	uxtb	r2, r3
 8001304:	490c      	ldr	r1, [pc, #48]	; (8001338 <__NVIC_SetPriority+0x4c>)
 8001306:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800130a:	0112      	lsls	r2, r2, #4
 800130c:	b2d2      	uxtb	r2, r2
 800130e:	440b      	add	r3, r1
 8001310:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001314:	e00a      	b.n	800132c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001316:	683b      	ldr	r3, [r7, #0]
 8001318:	b2da      	uxtb	r2, r3
 800131a:	4908      	ldr	r1, [pc, #32]	; (800133c <__NVIC_SetPriority+0x50>)
 800131c:	79fb      	ldrb	r3, [r7, #7]
 800131e:	f003 030f 	and.w	r3, r3, #15
 8001322:	3b04      	subs	r3, #4
 8001324:	0112      	lsls	r2, r2, #4
 8001326:	b2d2      	uxtb	r2, r2
 8001328:	440b      	add	r3, r1
 800132a:	761a      	strb	r2, [r3, #24]
}
 800132c:	bf00      	nop
 800132e:	370c      	adds	r7, #12
 8001330:	46bd      	mov	sp, r7
 8001332:	bc80      	pop	{r7}
 8001334:	4770      	bx	lr
 8001336:	bf00      	nop
 8001338:	e000e100 	.word	0xe000e100
 800133c:	e000ed00 	.word	0xe000ed00

08001340 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001340:	b480      	push	{r7}
 8001342:	b089      	sub	sp, #36	; 0x24
 8001344:	af00      	add	r7, sp, #0
 8001346:	60f8      	str	r0, [r7, #12]
 8001348:	60b9      	str	r1, [r7, #8]
 800134a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800134c:	68fb      	ldr	r3, [r7, #12]
 800134e:	f003 0307 	and.w	r3, r3, #7
 8001352:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001354:	69fb      	ldr	r3, [r7, #28]
 8001356:	f1c3 0307 	rsb	r3, r3, #7
 800135a:	2b04      	cmp	r3, #4
 800135c:	bf28      	it	cs
 800135e:	2304      	movcs	r3, #4
 8001360:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001362:	69fb      	ldr	r3, [r7, #28]
 8001364:	3304      	adds	r3, #4
 8001366:	2b06      	cmp	r3, #6
 8001368:	d902      	bls.n	8001370 <NVIC_EncodePriority+0x30>
 800136a:	69fb      	ldr	r3, [r7, #28]
 800136c:	3b03      	subs	r3, #3
 800136e:	e000      	b.n	8001372 <NVIC_EncodePriority+0x32>
 8001370:	2300      	movs	r3, #0
 8001372:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001374:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001378:	69bb      	ldr	r3, [r7, #24]
 800137a:	fa02 f303 	lsl.w	r3, r2, r3
 800137e:	43da      	mvns	r2, r3
 8001380:	68bb      	ldr	r3, [r7, #8]
 8001382:	401a      	ands	r2, r3
 8001384:	697b      	ldr	r3, [r7, #20]
 8001386:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001388:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800138c:	697b      	ldr	r3, [r7, #20]
 800138e:	fa01 f303 	lsl.w	r3, r1, r3
 8001392:	43d9      	mvns	r1, r3
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001398:	4313      	orrs	r3, r2
         );
}
 800139a:	4618      	mov	r0, r3
 800139c:	3724      	adds	r7, #36	; 0x24
 800139e:	46bd      	mov	sp, r7
 80013a0:	bc80      	pop	{r7}
 80013a2:	4770      	bx	lr

080013a4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80013a4:	b580      	push	{r7, lr}
 80013a6:	b082      	sub	sp, #8
 80013a8:	af00      	add	r7, sp, #0
 80013aa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	3b01      	subs	r3, #1
 80013b0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80013b4:	d301      	bcc.n	80013ba <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80013b6:	2301      	movs	r3, #1
 80013b8:	e00f      	b.n	80013da <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80013ba:	4a0a      	ldr	r2, [pc, #40]	; (80013e4 <SysTick_Config+0x40>)
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	3b01      	subs	r3, #1
 80013c0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80013c2:	210f      	movs	r1, #15
 80013c4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80013c8:	f7ff ff90 	bl	80012ec <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80013cc:	4b05      	ldr	r3, [pc, #20]	; (80013e4 <SysTick_Config+0x40>)
 80013ce:	2200      	movs	r2, #0
 80013d0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80013d2:	4b04      	ldr	r3, [pc, #16]	; (80013e4 <SysTick_Config+0x40>)
 80013d4:	2207      	movs	r2, #7
 80013d6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80013d8:	2300      	movs	r3, #0
}
 80013da:	4618      	mov	r0, r3
 80013dc:	3708      	adds	r7, #8
 80013de:	46bd      	mov	sp, r7
 80013e0:	bd80      	pop	{r7, pc}
 80013e2:	bf00      	nop
 80013e4:	e000e010 	.word	0xe000e010

080013e8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013e8:	b580      	push	{r7, lr}
 80013ea:	b082      	sub	sp, #8
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80013f0:	6878      	ldr	r0, [r7, #4]
 80013f2:	f7ff ff2d 	bl	8001250 <__NVIC_SetPriorityGrouping>
}
 80013f6:	bf00      	nop
 80013f8:	3708      	adds	r7, #8
 80013fa:	46bd      	mov	sp, r7
 80013fc:	bd80      	pop	{r7, pc}

080013fe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80013fe:	b580      	push	{r7, lr}
 8001400:	b086      	sub	sp, #24
 8001402:	af00      	add	r7, sp, #0
 8001404:	4603      	mov	r3, r0
 8001406:	60b9      	str	r1, [r7, #8]
 8001408:	607a      	str	r2, [r7, #4]
 800140a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800140c:	2300      	movs	r3, #0
 800140e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001410:	f7ff ff42 	bl	8001298 <__NVIC_GetPriorityGrouping>
 8001414:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001416:	687a      	ldr	r2, [r7, #4]
 8001418:	68b9      	ldr	r1, [r7, #8]
 800141a:	6978      	ldr	r0, [r7, #20]
 800141c:	f7ff ff90 	bl	8001340 <NVIC_EncodePriority>
 8001420:	4602      	mov	r2, r0
 8001422:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001426:	4611      	mov	r1, r2
 8001428:	4618      	mov	r0, r3
 800142a:	f7ff ff5f 	bl	80012ec <__NVIC_SetPriority>
}
 800142e:	bf00      	nop
 8001430:	3718      	adds	r7, #24
 8001432:	46bd      	mov	sp, r7
 8001434:	bd80      	pop	{r7, pc}

08001436 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001436:	b580      	push	{r7, lr}
 8001438:	b082      	sub	sp, #8
 800143a:	af00      	add	r7, sp, #0
 800143c:	4603      	mov	r3, r0
 800143e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001440:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001444:	4618      	mov	r0, r3
 8001446:	f7ff ff35 	bl	80012b4 <__NVIC_EnableIRQ>
}
 800144a:	bf00      	nop
 800144c:	3708      	adds	r7, #8
 800144e:	46bd      	mov	sp, r7
 8001450:	bd80      	pop	{r7, pc}

08001452 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001452:	b580      	push	{r7, lr}
 8001454:	b082      	sub	sp, #8
 8001456:	af00      	add	r7, sp, #0
 8001458:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800145a:	6878      	ldr	r0, [r7, #4]
 800145c:	f7ff ffa2 	bl	80013a4 <SysTick_Config>
 8001460:	4603      	mov	r3, r0
}
 8001462:	4618      	mov	r0, r3
 8001464:	3708      	adds	r7, #8
 8001466:	46bd      	mov	sp, r7
 8001468:	bd80      	pop	{r7, pc}
	...

0800146c <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800146c:	b480      	push	{r7}
 800146e:	b085      	sub	sp, #20
 8001470:	af00      	add	r7, sp, #0
 8001472:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001474:	2300      	movs	r3, #0
 8001476:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	2b00      	cmp	r3, #0
 800147c:	d101      	bne.n	8001482 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 800147e:	2301      	movs	r3, #1
 8001480:	e043      	b.n	800150a <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	461a      	mov	r2, r3
 8001488:	4b22      	ldr	r3, [pc, #136]	; (8001514 <HAL_DMA_Init+0xa8>)
 800148a:	4413      	add	r3, r2
 800148c:	4a22      	ldr	r2, [pc, #136]	; (8001518 <HAL_DMA_Init+0xac>)
 800148e:	fba2 2303 	umull	r2, r3, r2, r3
 8001492:	091b      	lsrs	r3, r3, #4
 8001494:	009a      	lsls	r2, r3, #2
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	4a1f      	ldr	r2, [pc, #124]	; (800151c <HAL_DMA_Init+0xb0>)
 800149e:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	2202      	movs	r2, #2
 80014a4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80014b0:	68fb      	ldr	r3, [r7, #12]
 80014b2:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80014b6:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80014ba:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 80014c4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	68db      	ldr	r3, [r3, #12]
 80014ca:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80014d0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	695b      	ldr	r3, [r3, #20]
 80014d6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80014dc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	69db      	ldr	r3, [r3, #28]
 80014e2:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80014e4:	68fa      	ldr	r2, [r7, #12]
 80014e6:	4313      	orrs	r3, r2
 80014e8:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	68fa      	ldr	r2, [r7, #12]
 80014f0:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	2200      	movs	r2, #0
 80014f6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	2201      	movs	r2, #1
 80014fc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	2200      	movs	r2, #0
 8001504:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8001508:	2300      	movs	r3, #0
}
 800150a:	4618      	mov	r0, r3
 800150c:	3714      	adds	r7, #20
 800150e:	46bd      	mov	sp, r7
 8001510:	bc80      	pop	{r7}
 8001512:	4770      	bx	lr
 8001514:	bffdfff8 	.word	0xbffdfff8
 8001518:	cccccccd 	.word	0xcccccccd
 800151c:	40020000 	.word	0x40020000

08001520 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001520:	b580      	push	{r7, lr}
 8001522:	b086      	sub	sp, #24
 8001524:	af00      	add	r7, sp, #0
 8001526:	60f8      	str	r0, [r7, #12]
 8001528:	60b9      	str	r1, [r7, #8]
 800152a:	607a      	str	r2, [r7, #4]
 800152c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800152e:	2300      	movs	r3, #0
 8001530:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8001532:	68fb      	ldr	r3, [r7, #12]
 8001534:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001538:	2b01      	cmp	r3, #1
 800153a:	d101      	bne.n	8001540 <HAL_DMA_Start_IT+0x20>
 800153c:	2302      	movs	r3, #2
 800153e:	e04a      	b.n	80015d6 <HAL_DMA_Start_IT+0xb6>
 8001540:	68fb      	ldr	r3, [r7, #12]
 8001542:	2201      	movs	r2, #1
 8001544:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001548:	68fb      	ldr	r3, [r7, #12]
 800154a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800154e:	2b01      	cmp	r3, #1
 8001550:	d13a      	bne.n	80015c8 <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001552:	68fb      	ldr	r3, [r7, #12]
 8001554:	2202      	movs	r2, #2
 8001556:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800155a:	68fb      	ldr	r3, [r7, #12]
 800155c:	2200      	movs	r2, #0
 800155e:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001560:	68fb      	ldr	r3, [r7, #12]
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	681a      	ldr	r2, [r3, #0]
 8001566:	68fb      	ldr	r3, [r7, #12]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	f022 0201 	bic.w	r2, r2, #1
 800156e:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001570:	683b      	ldr	r3, [r7, #0]
 8001572:	687a      	ldr	r2, [r7, #4]
 8001574:	68b9      	ldr	r1, [r7, #8]
 8001576:	68f8      	ldr	r0, [r7, #12]
 8001578:	f000 f9ae 	bl	80018d8 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 800157c:	68fb      	ldr	r3, [r7, #12]
 800157e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001580:	2b00      	cmp	r3, #0
 8001582:	d008      	beq.n	8001596 <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001584:	68fb      	ldr	r3, [r7, #12]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	681a      	ldr	r2, [r3, #0]
 800158a:	68fb      	ldr	r3, [r7, #12]
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	f042 020e 	orr.w	r2, r2, #14
 8001592:	601a      	str	r2, [r3, #0]
 8001594:	e00f      	b.n	80015b6 <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001596:	68fb      	ldr	r3, [r7, #12]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	681a      	ldr	r2, [r3, #0]
 800159c:	68fb      	ldr	r3, [r7, #12]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	f022 0204 	bic.w	r2, r2, #4
 80015a4:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80015a6:	68fb      	ldr	r3, [r7, #12]
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	681a      	ldr	r2, [r3, #0]
 80015ac:	68fb      	ldr	r3, [r7, #12]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	f042 020a 	orr.w	r2, r2, #10
 80015b4:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80015b6:	68fb      	ldr	r3, [r7, #12]
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	681a      	ldr	r2, [r3, #0]
 80015bc:	68fb      	ldr	r3, [r7, #12]
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	f042 0201 	orr.w	r2, r2, #1
 80015c4:	601a      	str	r2, [r3, #0]
 80015c6:	e005      	b.n	80015d4 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 80015c8:	68fb      	ldr	r3, [r7, #12]
 80015ca:	2200      	movs	r2, #0
 80015cc:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 80015d0:	2302      	movs	r3, #2
 80015d2:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 80015d4:	7dfb      	ldrb	r3, [r7, #23]
}
 80015d6:	4618      	mov	r0, r3
 80015d8:	3718      	adds	r7, #24
 80015da:	46bd      	mov	sp, r7
 80015dc:	bd80      	pop	{r7, pc}
	...

080015e0 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80015e0:	b580      	push	{r7, lr}
 80015e2:	b084      	sub	sp, #16
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80015e8:	2300      	movs	r3, #0
 80015ea:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80015f2:	2b02      	cmp	r3, #2
 80015f4:	d005      	beq.n	8001602 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	2204      	movs	r2, #4
 80015fa:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 80015fc:	2301      	movs	r3, #1
 80015fe:	73fb      	strb	r3, [r7, #15]
 8001600:	e051      	b.n	80016a6 <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	681a      	ldr	r2, [r3, #0]
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	f022 020e 	bic.w	r2, r2, #14
 8001610:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	681a      	ldr	r2, [r3, #0]
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	f022 0201 	bic.w	r2, r2, #1
 8001620:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	4a22      	ldr	r2, [pc, #136]	; (80016b0 <HAL_DMA_Abort_IT+0xd0>)
 8001628:	4293      	cmp	r3, r2
 800162a:	d029      	beq.n	8001680 <HAL_DMA_Abort_IT+0xa0>
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	4a20      	ldr	r2, [pc, #128]	; (80016b4 <HAL_DMA_Abort_IT+0xd4>)
 8001632:	4293      	cmp	r3, r2
 8001634:	d022      	beq.n	800167c <HAL_DMA_Abort_IT+0x9c>
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	4a1f      	ldr	r2, [pc, #124]	; (80016b8 <HAL_DMA_Abort_IT+0xd8>)
 800163c:	4293      	cmp	r3, r2
 800163e:	d01a      	beq.n	8001676 <HAL_DMA_Abort_IT+0x96>
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	4a1d      	ldr	r2, [pc, #116]	; (80016bc <HAL_DMA_Abort_IT+0xdc>)
 8001646:	4293      	cmp	r3, r2
 8001648:	d012      	beq.n	8001670 <HAL_DMA_Abort_IT+0x90>
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	4a1c      	ldr	r2, [pc, #112]	; (80016c0 <HAL_DMA_Abort_IT+0xe0>)
 8001650:	4293      	cmp	r3, r2
 8001652:	d00a      	beq.n	800166a <HAL_DMA_Abort_IT+0x8a>
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	4a1a      	ldr	r2, [pc, #104]	; (80016c4 <HAL_DMA_Abort_IT+0xe4>)
 800165a:	4293      	cmp	r3, r2
 800165c:	d102      	bne.n	8001664 <HAL_DMA_Abort_IT+0x84>
 800165e:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001662:	e00e      	b.n	8001682 <HAL_DMA_Abort_IT+0xa2>
 8001664:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001668:	e00b      	b.n	8001682 <HAL_DMA_Abort_IT+0xa2>
 800166a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800166e:	e008      	b.n	8001682 <HAL_DMA_Abort_IT+0xa2>
 8001670:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001674:	e005      	b.n	8001682 <HAL_DMA_Abort_IT+0xa2>
 8001676:	f44f 7380 	mov.w	r3, #256	; 0x100
 800167a:	e002      	b.n	8001682 <HAL_DMA_Abort_IT+0xa2>
 800167c:	2310      	movs	r3, #16
 800167e:	e000      	b.n	8001682 <HAL_DMA_Abort_IT+0xa2>
 8001680:	2301      	movs	r3, #1
 8001682:	4a11      	ldr	r2, [pc, #68]	; (80016c8 <HAL_DMA_Abort_IT+0xe8>)
 8001684:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	2201      	movs	r2, #1
 800168a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	2200      	movs	r2, #0
 8001692:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800169a:	2b00      	cmp	r3, #0
 800169c:	d003      	beq.n	80016a6 <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80016a2:	6878      	ldr	r0, [r7, #4]
 80016a4:	4798      	blx	r3
    } 
  }
  return status;
 80016a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80016a8:	4618      	mov	r0, r3
 80016aa:	3710      	adds	r7, #16
 80016ac:	46bd      	mov	sp, r7
 80016ae:	bd80      	pop	{r7, pc}
 80016b0:	40020008 	.word	0x40020008
 80016b4:	4002001c 	.word	0x4002001c
 80016b8:	40020030 	.word	0x40020030
 80016bc:	40020044 	.word	0x40020044
 80016c0:	40020058 	.word	0x40020058
 80016c4:	4002006c 	.word	0x4002006c
 80016c8:	40020000 	.word	0x40020000

080016cc <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80016cc:	b580      	push	{r7, lr}
 80016ce:	b084      	sub	sp, #16
 80016d0:	af00      	add	r7, sp, #0
 80016d2:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016e8:	2204      	movs	r2, #4
 80016ea:	409a      	lsls	r2, r3
 80016ec:	68fb      	ldr	r3, [r7, #12]
 80016ee:	4013      	ands	r3, r2
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d04f      	beq.n	8001794 <HAL_DMA_IRQHandler+0xc8>
 80016f4:	68bb      	ldr	r3, [r7, #8]
 80016f6:	f003 0304 	and.w	r3, r3, #4
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d04a      	beq.n	8001794 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	f003 0320 	and.w	r3, r3, #32
 8001708:	2b00      	cmp	r3, #0
 800170a:	d107      	bne.n	800171c <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	681a      	ldr	r2, [r3, #0]
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	f022 0204 	bic.w	r2, r2, #4
 800171a:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	4a66      	ldr	r2, [pc, #408]	; (80018bc <HAL_DMA_IRQHandler+0x1f0>)
 8001722:	4293      	cmp	r3, r2
 8001724:	d029      	beq.n	800177a <HAL_DMA_IRQHandler+0xae>
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	4a65      	ldr	r2, [pc, #404]	; (80018c0 <HAL_DMA_IRQHandler+0x1f4>)
 800172c:	4293      	cmp	r3, r2
 800172e:	d022      	beq.n	8001776 <HAL_DMA_IRQHandler+0xaa>
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	4a63      	ldr	r2, [pc, #396]	; (80018c4 <HAL_DMA_IRQHandler+0x1f8>)
 8001736:	4293      	cmp	r3, r2
 8001738:	d01a      	beq.n	8001770 <HAL_DMA_IRQHandler+0xa4>
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	4a62      	ldr	r2, [pc, #392]	; (80018c8 <HAL_DMA_IRQHandler+0x1fc>)
 8001740:	4293      	cmp	r3, r2
 8001742:	d012      	beq.n	800176a <HAL_DMA_IRQHandler+0x9e>
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	4a60      	ldr	r2, [pc, #384]	; (80018cc <HAL_DMA_IRQHandler+0x200>)
 800174a:	4293      	cmp	r3, r2
 800174c:	d00a      	beq.n	8001764 <HAL_DMA_IRQHandler+0x98>
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	4a5f      	ldr	r2, [pc, #380]	; (80018d0 <HAL_DMA_IRQHandler+0x204>)
 8001754:	4293      	cmp	r3, r2
 8001756:	d102      	bne.n	800175e <HAL_DMA_IRQHandler+0x92>
 8001758:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800175c:	e00e      	b.n	800177c <HAL_DMA_IRQHandler+0xb0>
 800175e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8001762:	e00b      	b.n	800177c <HAL_DMA_IRQHandler+0xb0>
 8001764:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8001768:	e008      	b.n	800177c <HAL_DMA_IRQHandler+0xb0>
 800176a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800176e:	e005      	b.n	800177c <HAL_DMA_IRQHandler+0xb0>
 8001770:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001774:	e002      	b.n	800177c <HAL_DMA_IRQHandler+0xb0>
 8001776:	2340      	movs	r3, #64	; 0x40
 8001778:	e000      	b.n	800177c <HAL_DMA_IRQHandler+0xb0>
 800177a:	2304      	movs	r3, #4
 800177c:	4a55      	ldr	r2, [pc, #340]	; (80018d4 <HAL_DMA_IRQHandler+0x208>)
 800177e:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001784:	2b00      	cmp	r3, #0
 8001786:	f000 8094 	beq.w	80018b2 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800178e:	6878      	ldr	r0, [r7, #4]
 8001790:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8001792:	e08e      	b.n	80018b2 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001798:	2202      	movs	r2, #2
 800179a:	409a      	lsls	r2, r3
 800179c:	68fb      	ldr	r3, [r7, #12]
 800179e:	4013      	ands	r3, r2
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d056      	beq.n	8001852 <HAL_DMA_IRQHandler+0x186>
 80017a4:	68bb      	ldr	r3, [r7, #8]
 80017a6:	f003 0302 	and.w	r3, r3, #2
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d051      	beq.n	8001852 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	f003 0320 	and.w	r3, r3, #32
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d10b      	bne.n	80017d4 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	681a      	ldr	r2, [r3, #0]
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	f022 020a 	bic.w	r2, r2, #10
 80017ca:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	2201      	movs	r2, #1
 80017d0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	4a38      	ldr	r2, [pc, #224]	; (80018bc <HAL_DMA_IRQHandler+0x1f0>)
 80017da:	4293      	cmp	r3, r2
 80017dc:	d029      	beq.n	8001832 <HAL_DMA_IRQHandler+0x166>
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	4a37      	ldr	r2, [pc, #220]	; (80018c0 <HAL_DMA_IRQHandler+0x1f4>)
 80017e4:	4293      	cmp	r3, r2
 80017e6:	d022      	beq.n	800182e <HAL_DMA_IRQHandler+0x162>
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	4a35      	ldr	r2, [pc, #212]	; (80018c4 <HAL_DMA_IRQHandler+0x1f8>)
 80017ee:	4293      	cmp	r3, r2
 80017f0:	d01a      	beq.n	8001828 <HAL_DMA_IRQHandler+0x15c>
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	4a34      	ldr	r2, [pc, #208]	; (80018c8 <HAL_DMA_IRQHandler+0x1fc>)
 80017f8:	4293      	cmp	r3, r2
 80017fa:	d012      	beq.n	8001822 <HAL_DMA_IRQHandler+0x156>
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	4a32      	ldr	r2, [pc, #200]	; (80018cc <HAL_DMA_IRQHandler+0x200>)
 8001802:	4293      	cmp	r3, r2
 8001804:	d00a      	beq.n	800181c <HAL_DMA_IRQHandler+0x150>
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	4a31      	ldr	r2, [pc, #196]	; (80018d0 <HAL_DMA_IRQHandler+0x204>)
 800180c:	4293      	cmp	r3, r2
 800180e:	d102      	bne.n	8001816 <HAL_DMA_IRQHandler+0x14a>
 8001810:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001814:	e00e      	b.n	8001834 <HAL_DMA_IRQHandler+0x168>
 8001816:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800181a:	e00b      	b.n	8001834 <HAL_DMA_IRQHandler+0x168>
 800181c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001820:	e008      	b.n	8001834 <HAL_DMA_IRQHandler+0x168>
 8001822:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001826:	e005      	b.n	8001834 <HAL_DMA_IRQHandler+0x168>
 8001828:	f44f 7300 	mov.w	r3, #512	; 0x200
 800182c:	e002      	b.n	8001834 <HAL_DMA_IRQHandler+0x168>
 800182e:	2320      	movs	r3, #32
 8001830:	e000      	b.n	8001834 <HAL_DMA_IRQHandler+0x168>
 8001832:	2302      	movs	r3, #2
 8001834:	4a27      	ldr	r2, [pc, #156]	; (80018d4 <HAL_DMA_IRQHandler+0x208>)
 8001836:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	2200      	movs	r2, #0
 800183c:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001844:	2b00      	cmp	r3, #0
 8001846:	d034      	beq.n	80018b2 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800184c:	6878      	ldr	r0, [r7, #4]
 800184e:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8001850:	e02f      	b.n	80018b2 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001856:	2208      	movs	r2, #8
 8001858:	409a      	lsls	r2, r3
 800185a:	68fb      	ldr	r3, [r7, #12]
 800185c:	4013      	ands	r3, r2
 800185e:	2b00      	cmp	r3, #0
 8001860:	d028      	beq.n	80018b4 <HAL_DMA_IRQHandler+0x1e8>
 8001862:	68bb      	ldr	r3, [r7, #8]
 8001864:	f003 0308 	and.w	r3, r3, #8
 8001868:	2b00      	cmp	r3, #0
 800186a:	d023      	beq.n	80018b4 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	681a      	ldr	r2, [r3, #0]
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	f022 020e 	bic.w	r2, r2, #14
 800187a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001884:	2101      	movs	r1, #1
 8001886:	fa01 f202 	lsl.w	r2, r1, r2
 800188a:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	2201      	movs	r2, #1
 8001890:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	2201      	movs	r2, #1
 8001896:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	2200      	movs	r2, #0
 800189e:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d004      	beq.n	80018b4 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018ae:	6878      	ldr	r0, [r7, #4]
 80018b0:	4798      	blx	r3
    }
  }
  return;
 80018b2:	bf00      	nop
 80018b4:	bf00      	nop
}
 80018b6:	3710      	adds	r7, #16
 80018b8:	46bd      	mov	sp, r7
 80018ba:	bd80      	pop	{r7, pc}
 80018bc:	40020008 	.word	0x40020008
 80018c0:	4002001c 	.word	0x4002001c
 80018c4:	40020030 	.word	0x40020030
 80018c8:	40020044 	.word	0x40020044
 80018cc:	40020058 	.word	0x40020058
 80018d0:	4002006c 	.word	0x4002006c
 80018d4:	40020000 	.word	0x40020000

080018d8 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80018d8:	b480      	push	{r7}
 80018da:	b085      	sub	sp, #20
 80018dc:	af00      	add	r7, sp, #0
 80018de:	60f8      	str	r0, [r7, #12]
 80018e0:	60b9      	str	r1, [r7, #8]
 80018e2:	607a      	str	r2, [r7, #4]
 80018e4:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80018e6:	68fb      	ldr	r3, [r7, #12]
 80018e8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80018ea:	68fb      	ldr	r3, [r7, #12]
 80018ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80018ee:	2101      	movs	r1, #1
 80018f0:	fa01 f202 	lsl.w	r2, r1, r2
 80018f4:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80018f6:	68fb      	ldr	r3, [r7, #12]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	683a      	ldr	r2, [r7, #0]
 80018fc:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80018fe:	68fb      	ldr	r3, [r7, #12]
 8001900:	685b      	ldr	r3, [r3, #4]
 8001902:	2b10      	cmp	r3, #16
 8001904:	d108      	bne.n	8001918 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001906:	68fb      	ldr	r3, [r7, #12]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	687a      	ldr	r2, [r7, #4]
 800190c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800190e:	68fb      	ldr	r3, [r7, #12]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	68ba      	ldr	r2, [r7, #8]
 8001914:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001916:	e007      	b.n	8001928 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8001918:	68fb      	ldr	r3, [r7, #12]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	68ba      	ldr	r2, [r7, #8]
 800191e:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001920:	68fb      	ldr	r3, [r7, #12]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	687a      	ldr	r2, [r7, #4]
 8001926:	60da      	str	r2, [r3, #12]
}
 8001928:	bf00      	nop
 800192a:	3714      	adds	r7, #20
 800192c:	46bd      	mov	sp, r7
 800192e:	bc80      	pop	{r7}
 8001930:	4770      	bx	lr
	...

08001934 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001934:	b480      	push	{r7}
 8001936:	b08b      	sub	sp, #44	; 0x2c
 8001938:	af00      	add	r7, sp, #0
 800193a:	6078      	str	r0, [r7, #4]
 800193c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800193e:	2300      	movs	r3, #0
 8001940:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001942:	2300      	movs	r3, #0
 8001944:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001946:	e169      	b.n	8001c1c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001948:	2201      	movs	r2, #1
 800194a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800194c:	fa02 f303 	lsl.w	r3, r2, r3
 8001950:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001952:	683b      	ldr	r3, [r7, #0]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	69fa      	ldr	r2, [r7, #28]
 8001958:	4013      	ands	r3, r2
 800195a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800195c:	69ba      	ldr	r2, [r7, #24]
 800195e:	69fb      	ldr	r3, [r7, #28]
 8001960:	429a      	cmp	r2, r3
 8001962:	f040 8158 	bne.w	8001c16 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001966:	683b      	ldr	r3, [r7, #0]
 8001968:	685b      	ldr	r3, [r3, #4]
 800196a:	4a9a      	ldr	r2, [pc, #616]	; (8001bd4 <HAL_GPIO_Init+0x2a0>)
 800196c:	4293      	cmp	r3, r2
 800196e:	d05e      	beq.n	8001a2e <HAL_GPIO_Init+0xfa>
 8001970:	4a98      	ldr	r2, [pc, #608]	; (8001bd4 <HAL_GPIO_Init+0x2a0>)
 8001972:	4293      	cmp	r3, r2
 8001974:	d875      	bhi.n	8001a62 <HAL_GPIO_Init+0x12e>
 8001976:	4a98      	ldr	r2, [pc, #608]	; (8001bd8 <HAL_GPIO_Init+0x2a4>)
 8001978:	4293      	cmp	r3, r2
 800197a:	d058      	beq.n	8001a2e <HAL_GPIO_Init+0xfa>
 800197c:	4a96      	ldr	r2, [pc, #600]	; (8001bd8 <HAL_GPIO_Init+0x2a4>)
 800197e:	4293      	cmp	r3, r2
 8001980:	d86f      	bhi.n	8001a62 <HAL_GPIO_Init+0x12e>
 8001982:	4a96      	ldr	r2, [pc, #600]	; (8001bdc <HAL_GPIO_Init+0x2a8>)
 8001984:	4293      	cmp	r3, r2
 8001986:	d052      	beq.n	8001a2e <HAL_GPIO_Init+0xfa>
 8001988:	4a94      	ldr	r2, [pc, #592]	; (8001bdc <HAL_GPIO_Init+0x2a8>)
 800198a:	4293      	cmp	r3, r2
 800198c:	d869      	bhi.n	8001a62 <HAL_GPIO_Init+0x12e>
 800198e:	4a94      	ldr	r2, [pc, #592]	; (8001be0 <HAL_GPIO_Init+0x2ac>)
 8001990:	4293      	cmp	r3, r2
 8001992:	d04c      	beq.n	8001a2e <HAL_GPIO_Init+0xfa>
 8001994:	4a92      	ldr	r2, [pc, #584]	; (8001be0 <HAL_GPIO_Init+0x2ac>)
 8001996:	4293      	cmp	r3, r2
 8001998:	d863      	bhi.n	8001a62 <HAL_GPIO_Init+0x12e>
 800199a:	4a92      	ldr	r2, [pc, #584]	; (8001be4 <HAL_GPIO_Init+0x2b0>)
 800199c:	4293      	cmp	r3, r2
 800199e:	d046      	beq.n	8001a2e <HAL_GPIO_Init+0xfa>
 80019a0:	4a90      	ldr	r2, [pc, #576]	; (8001be4 <HAL_GPIO_Init+0x2b0>)
 80019a2:	4293      	cmp	r3, r2
 80019a4:	d85d      	bhi.n	8001a62 <HAL_GPIO_Init+0x12e>
 80019a6:	2b12      	cmp	r3, #18
 80019a8:	d82a      	bhi.n	8001a00 <HAL_GPIO_Init+0xcc>
 80019aa:	2b12      	cmp	r3, #18
 80019ac:	d859      	bhi.n	8001a62 <HAL_GPIO_Init+0x12e>
 80019ae:	a201      	add	r2, pc, #4	; (adr r2, 80019b4 <HAL_GPIO_Init+0x80>)
 80019b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80019b4:	08001a2f 	.word	0x08001a2f
 80019b8:	08001a09 	.word	0x08001a09
 80019bc:	08001a1b 	.word	0x08001a1b
 80019c0:	08001a5d 	.word	0x08001a5d
 80019c4:	08001a63 	.word	0x08001a63
 80019c8:	08001a63 	.word	0x08001a63
 80019cc:	08001a63 	.word	0x08001a63
 80019d0:	08001a63 	.word	0x08001a63
 80019d4:	08001a63 	.word	0x08001a63
 80019d8:	08001a63 	.word	0x08001a63
 80019dc:	08001a63 	.word	0x08001a63
 80019e0:	08001a63 	.word	0x08001a63
 80019e4:	08001a63 	.word	0x08001a63
 80019e8:	08001a63 	.word	0x08001a63
 80019ec:	08001a63 	.word	0x08001a63
 80019f0:	08001a63 	.word	0x08001a63
 80019f4:	08001a63 	.word	0x08001a63
 80019f8:	08001a11 	.word	0x08001a11
 80019fc:	08001a25 	.word	0x08001a25
 8001a00:	4a79      	ldr	r2, [pc, #484]	; (8001be8 <HAL_GPIO_Init+0x2b4>)
 8001a02:	4293      	cmp	r3, r2
 8001a04:	d013      	beq.n	8001a2e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001a06:	e02c      	b.n	8001a62 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001a08:	683b      	ldr	r3, [r7, #0]
 8001a0a:	68db      	ldr	r3, [r3, #12]
 8001a0c:	623b      	str	r3, [r7, #32]
          break;
 8001a0e:	e029      	b.n	8001a64 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001a10:	683b      	ldr	r3, [r7, #0]
 8001a12:	68db      	ldr	r3, [r3, #12]
 8001a14:	3304      	adds	r3, #4
 8001a16:	623b      	str	r3, [r7, #32]
          break;
 8001a18:	e024      	b.n	8001a64 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001a1a:	683b      	ldr	r3, [r7, #0]
 8001a1c:	68db      	ldr	r3, [r3, #12]
 8001a1e:	3308      	adds	r3, #8
 8001a20:	623b      	str	r3, [r7, #32]
          break;
 8001a22:	e01f      	b.n	8001a64 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001a24:	683b      	ldr	r3, [r7, #0]
 8001a26:	68db      	ldr	r3, [r3, #12]
 8001a28:	330c      	adds	r3, #12
 8001a2a:	623b      	str	r3, [r7, #32]
          break;
 8001a2c:	e01a      	b.n	8001a64 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001a2e:	683b      	ldr	r3, [r7, #0]
 8001a30:	689b      	ldr	r3, [r3, #8]
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d102      	bne.n	8001a3c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001a36:	2304      	movs	r3, #4
 8001a38:	623b      	str	r3, [r7, #32]
          break;
 8001a3a:	e013      	b.n	8001a64 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001a3c:	683b      	ldr	r3, [r7, #0]
 8001a3e:	689b      	ldr	r3, [r3, #8]
 8001a40:	2b01      	cmp	r3, #1
 8001a42:	d105      	bne.n	8001a50 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001a44:	2308      	movs	r3, #8
 8001a46:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	69fa      	ldr	r2, [r7, #28]
 8001a4c:	611a      	str	r2, [r3, #16]
          break;
 8001a4e:	e009      	b.n	8001a64 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001a50:	2308      	movs	r3, #8
 8001a52:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	69fa      	ldr	r2, [r7, #28]
 8001a58:	615a      	str	r2, [r3, #20]
          break;
 8001a5a:	e003      	b.n	8001a64 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001a5c:	2300      	movs	r3, #0
 8001a5e:	623b      	str	r3, [r7, #32]
          break;
 8001a60:	e000      	b.n	8001a64 <HAL_GPIO_Init+0x130>
          break;
 8001a62:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001a64:	69bb      	ldr	r3, [r7, #24]
 8001a66:	2bff      	cmp	r3, #255	; 0xff
 8001a68:	d801      	bhi.n	8001a6e <HAL_GPIO_Init+0x13a>
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	e001      	b.n	8001a72 <HAL_GPIO_Init+0x13e>
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	3304      	adds	r3, #4
 8001a72:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001a74:	69bb      	ldr	r3, [r7, #24]
 8001a76:	2bff      	cmp	r3, #255	; 0xff
 8001a78:	d802      	bhi.n	8001a80 <HAL_GPIO_Init+0x14c>
 8001a7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a7c:	009b      	lsls	r3, r3, #2
 8001a7e:	e002      	b.n	8001a86 <HAL_GPIO_Init+0x152>
 8001a80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a82:	3b08      	subs	r3, #8
 8001a84:	009b      	lsls	r3, r3, #2
 8001a86:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001a88:	697b      	ldr	r3, [r7, #20]
 8001a8a:	681a      	ldr	r2, [r3, #0]
 8001a8c:	210f      	movs	r1, #15
 8001a8e:	693b      	ldr	r3, [r7, #16]
 8001a90:	fa01 f303 	lsl.w	r3, r1, r3
 8001a94:	43db      	mvns	r3, r3
 8001a96:	401a      	ands	r2, r3
 8001a98:	6a39      	ldr	r1, [r7, #32]
 8001a9a:	693b      	ldr	r3, [r7, #16]
 8001a9c:	fa01 f303 	lsl.w	r3, r1, r3
 8001aa0:	431a      	orrs	r2, r3
 8001aa2:	697b      	ldr	r3, [r7, #20]
 8001aa4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001aa6:	683b      	ldr	r3, [r7, #0]
 8001aa8:	685b      	ldr	r3, [r3, #4]
 8001aaa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	f000 80b1 	beq.w	8001c16 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001ab4:	4b4d      	ldr	r3, [pc, #308]	; (8001bec <HAL_GPIO_Init+0x2b8>)
 8001ab6:	699b      	ldr	r3, [r3, #24]
 8001ab8:	4a4c      	ldr	r2, [pc, #304]	; (8001bec <HAL_GPIO_Init+0x2b8>)
 8001aba:	f043 0301 	orr.w	r3, r3, #1
 8001abe:	6193      	str	r3, [r2, #24]
 8001ac0:	4b4a      	ldr	r3, [pc, #296]	; (8001bec <HAL_GPIO_Init+0x2b8>)
 8001ac2:	699b      	ldr	r3, [r3, #24]
 8001ac4:	f003 0301 	and.w	r3, r3, #1
 8001ac8:	60bb      	str	r3, [r7, #8]
 8001aca:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001acc:	4a48      	ldr	r2, [pc, #288]	; (8001bf0 <HAL_GPIO_Init+0x2bc>)
 8001ace:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ad0:	089b      	lsrs	r3, r3, #2
 8001ad2:	3302      	adds	r3, #2
 8001ad4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ad8:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001ada:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001adc:	f003 0303 	and.w	r3, r3, #3
 8001ae0:	009b      	lsls	r3, r3, #2
 8001ae2:	220f      	movs	r2, #15
 8001ae4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ae8:	43db      	mvns	r3, r3
 8001aea:	68fa      	ldr	r2, [r7, #12]
 8001aec:	4013      	ands	r3, r2
 8001aee:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	4a40      	ldr	r2, [pc, #256]	; (8001bf4 <HAL_GPIO_Init+0x2c0>)
 8001af4:	4293      	cmp	r3, r2
 8001af6:	d013      	beq.n	8001b20 <HAL_GPIO_Init+0x1ec>
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	4a3f      	ldr	r2, [pc, #252]	; (8001bf8 <HAL_GPIO_Init+0x2c4>)
 8001afc:	4293      	cmp	r3, r2
 8001afe:	d00d      	beq.n	8001b1c <HAL_GPIO_Init+0x1e8>
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	4a3e      	ldr	r2, [pc, #248]	; (8001bfc <HAL_GPIO_Init+0x2c8>)
 8001b04:	4293      	cmp	r3, r2
 8001b06:	d007      	beq.n	8001b18 <HAL_GPIO_Init+0x1e4>
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	4a3d      	ldr	r2, [pc, #244]	; (8001c00 <HAL_GPIO_Init+0x2cc>)
 8001b0c:	4293      	cmp	r3, r2
 8001b0e:	d101      	bne.n	8001b14 <HAL_GPIO_Init+0x1e0>
 8001b10:	2303      	movs	r3, #3
 8001b12:	e006      	b.n	8001b22 <HAL_GPIO_Init+0x1ee>
 8001b14:	2304      	movs	r3, #4
 8001b16:	e004      	b.n	8001b22 <HAL_GPIO_Init+0x1ee>
 8001b18:	2302      	movs	r3, #2
 8001b1a:	e002      	b.n	8001b22 <HAL_GPIO_Init+0x1ee>
 8001b1c:	2301      	movs	r3, #1
 8001b1e:	e000      	b.n	8001b22 <HAL_GPIO_Init+0x1ee>
 8001b20:	2300      	movs	r3, #0
 8001b22:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001b24:	f002 0203 	and.w	r2, r2, #3
 8001b28:	0092      	lsls	r2, r2, #2
 8001b2a:	4093      	lsls	r3, r2
 8001b2c:	68fa      	ldr	r2, [r7, #12]
 8001b2e:	4313      	orrs	r3, r2
 8001b30:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001b32:	492f      	ldr	r1, [pc, #188]	; (8001bf0 <HAL_GPIO_Init+0x2bc>)
 8001b34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b36:	089b      	lsrs	r3, r3, #2
 8001b38:	3302      	adds	r3, #2
 8001b3a:	68fa      	ldr	r2, [r7, #12]
 8001b3c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001b40:	683b      	ldr	r3, [r7, #0]
 8001b42:	685b      	ldr	r3, [r3, #4]
 8001b44:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d006      	beq.n	8001b5a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001b4c:	4b2d      	ldr	r3, [pc, #180]	; (8001c04 <HAL_GPIO_Init+0x2d0>)
 8001b4e:	681a      	ldr	r2, [r3, #0]
 8001b50:	492c      	ldr	r1, [pc, #176]	; (8001c04 <HAL_GPIO_Init+0x2d0>)
 8001b52:	69bb      	ldr	r3, [r7, #24]
 8001b54:	4313      	orrs	r3, r2
 8001b56:	600b      	str	r3, [r1, #0]
 8001b58:	e006      	b.n	8001b68 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001b5a:	4b2a      	ldr	r3, [pc, #168]	; (8001c04 <HAL_GPIO_Init+0x2d0>)
 8001b5c:	681a      	ldr	r2, [r3, #0]
 8001b5e:	69bb      	ldr	r3, [r7, #24]
 8001b60:	43db      	mvns	r3, r3
 8001b62:	4928      	ldr	r1, [pc, #160]	; (8001c04 <HAL_GPIO_Init+0x2d0>)
 8001b64:	4013      	ands	r3, r2
 8001b66:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001b68:	683b      	ldr	r3, [r7, #0]
 8001b6a:	685b      	ldr	r3, [r3, #4]
 8001b6c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d006      	beq.n	8001b82 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001b74:	4b23      	ldr	r3, [pc, #140]	; (8001c04 <HAL_GPIO_Init+0x2d0>)
 8001b76:	685a      	ldr	r2, [r3, #4]
 8001b78:	4922      	ldr	r1, [pc, #136]	; (8001c04 <HAL_GPIO_Init+0x2d0>)
 8001b7a:	69bb      	ldr	r3, [r7, #24]
 8001b7c:	4313      	orrs	r3, r2
 8001b7e:	604b      	str	r3, [r1, #4]
 8001b80:	e006      	b.n	8001b90 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001b82:	4b20      	ldr	r3, [pc, #128]	; (8001c04 <HAL_GPIO_Init+0x2d0>)
 8001b84:	685a      	ldr	r2, [r3, #4]
 8001b86:	69bb      	ldr	r3, [r7, #24]
 8001b88:	43db      	mvns	r3, r3
 8001b8a:	491e      	ldr	r1, [pc, #120]	; (8001c04 <HAL_GPIO_Init+0x2d0>)
 8001b8c:	4013      	ands	r3, r2
 8001b8e:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001b90:	683b      	ldr	r3, [r7, #0]
 8001b92:	685b      	ldr	r3, [r3, #4]
 8001b94:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d006      	beq.n	8001baa <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001b9c:	4b19      	ldr	r3, [pc, #100]	; (8001c04 <HAL_GPIO_Init+0x2d0>)
 8001b9e:	689a      	ldr	r2, [r3, #8]
 8001ba0:	4918      	ldr	r1, [pc, #96]	; (8001c04 <HAL_GPIO_Init+0x2d0>)
 8001ba2:	69bb      	ldr	r3, [r7, #24]
 8001ba4:	4313      	orrs	r3, r2
 8001ba6:	608b      	str	r3, [r1, #8]
 8001ba8:	e006      	b.n	8001bb8 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001baa:	4b16      	ldr	r3, [pc, #88]	; (8001c04 <HAL_GPIO_Init+0x2d0>)
 8001bac:	689a      	ldr	r2, [r3, #8]
 8001bae:	69bb      	ldr	r3, [r7, #24]
 8001bb0:	43db      	mvns	r3, r3
 8001bb2:	4914      	ldr	r1, [pc, #80]	; (8001c04 <HAL_GPIO_Init+0x2d0>)
 8001bb4:	4013      	ands	r3, r2
 8001bb6:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001bb8:	683b      	ldr	r3, [r7, #0]
 8001bba:	685b      	ldr	r3, [r3, #4]
 8001bbc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d021      	beq.n	8001c08 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001bc4:	4b0f      	ldr	r3, [pc, #60]	; (8001c04 <HAL_GPIO_Init+0x2d0>)
 8001bc6:	68da      	ldr	r2, [r3, #12]
 8001bc8:	490e      	ldr	r1, [pc, #56]	; (8001c04 <HAL_GPIO_Init+0x2d0>)
 8001bca:	69bb      	ldr	r3, [r7, #24]
 8001bcc:	4313      	orrs	r3, r2
 8001bce:	60cb      	str	r3, [r1, #12]
 8001bd0:	e021      	b.n	8001c16 <HAL_GPIO_Init+0x2e2>
 8001bd2:	bf00      	nop
 8001bd4:	10320000 	.word	0x10320000
 8001bd8:	10310000 	.word	0x10310000
 8001bdc:	10220000 	.word	0x10220000
 8001be0:	10210000 	.word	0x10210000
 8001be4:	10120000 	.word	0x10120000
 8001be8:	10110000 	.word	0x10110000
 8001bec:	40021000 	.word	0x40021000
 8001bf0:	40010000 	.word	0x40010000
 8001bf4:	40010800 	.word	0x40010800
 8001bf8:	40010c00 	.word	0x40010c00
 8001bfc:	40011000 	.word	0x40011000
 8001c00:	40011400 	.word	0x40011400
 8001c04:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001c08:	4b0b      	ldr	r3, [pc, #44]	; (8001c38 <HAL_GPIO_Init+0x304>)
 8001c0a:	68da      	ldr	r2, [r3, #12]
 8001c0c:	69bb      	ldr	r3, [r7, #24]
 8001c0e:	43db      	mvns	r3, r3
 8001c10:	4909      	ldr	r1, [pc, #36]	; (8001c38 <HAL_GPIO_Init+0x304>)
 8001c12:	4013      	ands	r3, r2
 8001c14:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001c16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c18:	3301      	adds	r3, #1
 8001c1a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001c1c:	683b      	ldr	r3, [r7, #0]
 8001c1e:	681a      	ldr	r2, [r3, #0]
 8001c20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c22:	fa22 f303 	lsr.w	r3, r2, r3
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	f47f ae8e 	bne.w	8001948 <HAL_GPIO_Init+0x14>
  }
}
 8001c2c:	bf00      	nop
 8001c2e:	bf00      	nop
 8001c30:	372c      	adds	r7, #44	; 0x2c
 8001c32:	46bd      	mov	sp, r7
 8001c34:	bc80      	pop	{r7}
 8001c36:	4770      	bx	lr
 8001c38:	40010400 	.word	0x40010400

08001c3c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001c3c:	b480      	push	{r7}
 8001c3e:	b083      	sub	sp, #12
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	6078      	str	r0, [r7, #4]
 8001c44:	460b      	mov	r3, r1
 8001c46:	807b      	strh	r3, [r7, #2]
 8001c48:	4613      	mov	r3, r2
 8001c4a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001c4c:	787b      	ldrb	r3, [r7, #1]
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d003      	beq.n	8001c5a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001c52:	887a      	ldrh	r2, [r7, #2]
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001c58:	e003      	b.n	8001c62 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001c5a:	887b      	ldrh	r3, [r7, #2]
 8001c5c:	041a      	lsls	r2, r3, #16
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	611a      	str	r2, [r3, #16]
}
 8001c62:	bf00      	nop
 8001c64:	370c      	adds	r7, #12
 8001c66:	46bd      	mov	sp, r7
 8001c68:	bc80      	pop	{r7}
 8001c6a:	4770      	bx	lr

08001c6c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001c6c:	b580      	push	{r7, lr}
 8001c6e:	b086      	sub	sp, #24
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d101      	bne.n	8001c7e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001c7a:	2301      	movs	r3, #1
 8001c7c:	e26c      	b.n	8002158 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	f003 0301 	and.w	r3, r3, #1
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	f000 8087 	beq.w	8001d9a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001c8c:	4b92      	ldr	r3, [pc, #584]	; (8001ed8 <HAL_RCC_OscConfig+0x26c>)
 8001c8e:	685b      	ldr	r3, [r3, #4]
 8001c90:	f003 030c 	and.w	r3, r3, #12
 8001c94:	2b04      	cmp	r3, #4
 8001c96:	d00c      	beq.n	8001cb2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001c98:	4b8f      	ldr	r3, [pc, #572]	; (8001ed8 <HAL_RCC_OscConfig+0x26c>)
 8001c9a:	685b      	ldr	r3, [r3, #4]
 8001c9c:	f003 030c 	and.w	r3, r3, #12
 8001ca0:	2b08      	cmp	r3, #8
 8001ca2:	d112      	bne.n	8001cca <HAL_RCC_OscConfig+0x5e>
 8001ca4:	4b8c      	ldr	r3, [pc, #560]	; (8001ed8 <HAL_RCC_OscConfig+0x26c>)
 8001ca6:	685b      	ldr	r3, [r3, #4]
 8001ca8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001cac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001cb0:	d10b      	bne.n	8001cca <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001cb2:	4b89      	ldr	r3, [pc, #548]	; (8001ed8 <HAL_RCC_OscConfig+0x26c>)
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d06c      	beq.n	8001d98 <HAL_RCC_OscConfig+0x12c>
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	685b      	ldr	r3, [r3, #4]
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d168      	bne.n	8001d98 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001cc6:	2301      	movs	r3, #1
 8001cc8:	e246      	b.n	8002158 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	685b      	ldr	r3, [r3, #4]
 8001cce:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001cd2:	d106      	bne.n	8001ce2 <HAL_RCC_OscConfig+0x76>
 8001cd4:	4b80      	ldr	r3, [pc, #512]	; (8001ed8 <HAL_RCC_OscConfig+0x26c>)
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	4a7f      	ldr	r2, [pc, #508]	; (8001ed8 <HAL_RCC_OscConfig+0x26c>)
 8001cda:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001cde:	6013      	str	r3, [r2, #0]
 8001ce0:	e02e      	b.n	8001d40 <HAL_RCC_OscConfig+0xd4>
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	685b      	ldr	r3, [r3, #4]
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d10c      	bne.n	8001d04 <HAL_RCC_OscConfig+0x98>
 8001cea:	4b7b      	ldr	r3, [pc, #492]	; (8001ed8 <HAL_RCC_OscConfig+0x26c>)
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	4a7a      	ldr	r2, [pc, #488]	; (8001ed8 <HAL_RCC_OscConfig+0x26c>)
 8001cf0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001cf4:	6013      	str	r3, [r2, #0]
 8001cf6:	4b78      	ldr	r3, [pc, #480]	; (8001ed8 <HAL_RCC_OscConfig+0x26c>)
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	4a77      	ldr	r2, [pc, #476]	; (8001ed8 <HAL_RCC_OscConfig+0x26c>)
 8001cfc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001d00:	6013      	str	r3, [r2, #0]
 8001d02:	e01d      	b.n	8001d40 <HAL_RCC_OscConfig+0xd4>
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	685b      	ldr	r3, [r3, #4]
 8001d08:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001d0c:	d10c      	bne.n	8001d28 <HAL_RCC_OscConfig+0xbc>
 8001d0e:	4b72      	ldr	r3, [pc, #456]	; (8001ed8 <HAL_RCC_OscConfig+0x26c>)
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	4a71      	ldr	r2, [pc, #452]	; (8001ed8 <HAL_RCC_OscConfig+0x26c>)
 8001d14:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001d18:	6013      	str	r3, [r2, #0]
 8001d1a:	4b6f      	ldr	r3, [pc, #444]	; (8001ed8 <HAL_RCC_OscConfig+0x26c>)
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	4a6e      	ldr	r2, [pc, #440]	; (8001ed8 <HAL_RCC_OscConfig+0x26c>)
 8001d20:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d24:	6013      	str	r3, [r2, #0]
 8001d26:	e00b      	b.n	8001d40 <HAL_RCC_OscConfig+0xd4>
 8001d28:	4b6b      	ldr	r3, [pc, #428]	; (8001ed8 <HAL_RCC_OscConfig+0x26c>)
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	4a6a      	ldr	r2, [pc, #424]	; (8001ed8 <HAL_RCC_OscConfig+0x26c>)
 8001d2e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001d32:	6013      	str	r3, [r2, #0]
 8001d34:	4b68      	ldr	r3, [pc, #416]	; (8001ed8 <HAL_RCC_OscConfig+0x26c>)
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	4a67      	ldr	r2, [pc, #412]	; (8001ed8 <HAL_RCC_OscConfig+0x26c>)
 8001d3a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001d3e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	685b      	ldr	r3, [r3, #4]
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d013      	beq.n	8001d70 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d48:	f7ff fa54 	bl	80011f4 <HAL_GetTick>
 8001d4c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d4e:	e008      	b.n	8001d62 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001d50:	f7ff fa50 	bl	80011f4 <HAL_GetTick>
 8001d54:	4602      	mov	r2, r0
 8001d56:	693b      	ldr	r3, [r7, #16]
 8001d58:	1ad3      	subs	r3, r2, r3
 8001d5a:	2b64      	cmp	r3, #100	; 0x64
 8001d5c:	d901      	bls.n	8001d62 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001d5e:	2303      	movs	r3, #3
 8001d60:	e1fa      	b.n	8002158 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d62:	4b5d      	ldr	r3, [pc, #372]	; (8001ed8 <HAL_RCC_OscConfig+0x26c>)
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d0f0      	beq.n	8001d50 <HAL_RCC_OscConfig+0xe4>
 8001d6e:	e014      	b.n	8001d9a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d70:	f7ff fa40 	bl	80011f4 <HAL_GetTick>
 8001d74:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d76:	e008      	b.n	8001d8a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001d78:	f7ff fa3c 	bl	80011f4 <HAL_GetTick>
 8001d7c:	4602      	mov	r2, r0
 8001d7e:	693b      	ldr	r3, [r7, #16]
 8001d80:	1ad3      	subs	r3, r2, r3
 8001d82:	2b64      	cmp	r3, #100	; 0x64
 8001d84:	d901      	bls.n	8001d8a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001d86:	2303      	movs	r3, #3
 8001d88:	e1e6      	b.n	8002158 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d8a:	4b53      	ldr	r3, [pc, #332]	; (8001ed8 <HAL_RCC_OscConfig+0x26c>)
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d1f0      	bne.n	8001d78 <HAL_RCC_OscConfig+0x10c>
 8001d96:	e000      	b.n	8001d9a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d98:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	f003 0302 	and.w	r3, r3, #2
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d063      	beq.n	8001e6e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001da6:	4b4c      	ldr	r3, [pc, #304]	; (8001ed8 <HAL_RCC_OscConfig+0x26c>)
 8001da8:	685b      	ldr	r3, [r3, #4]
 8001daa:	f003 030c 	and.w	r3, r3, #12
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d00b      	beq.n	8001dca <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001db2:	4b49      	ldr	r3, [pc, #292]	; (8001ed8 <HAL_RCC_OscConfig+0x26c>)
 8001db4:	685b      	ldr	r3, [r3, #4]
 8001db6:	f003 030c 	and.w	r3, r3, #12
 8001dba:	2b08      	cmp	r3, #8
 8001dbc:	d11c      	bne.n	8001df8 <HAL_RCC_OscConfig+0x18c>
 8001dbe:	4b46      	ldr	r3, [pc, #280]	; (8001ed8 <HAL_RCC_OscConfig+0x26c>)
 8001dc0:	685b      	ldr	r3, [r3, #4]
 8001dc2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d116      	bne.n	8001df8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001dca:	4b43      	ldr	r3, [pc, #268]	; (8001ed8 <HAL_RCC_OscConfig+0x26c>)
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	f003 0302 	and.w	r3, r3, #2
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d005      	beq.n	8001de2 <HAL_RCC_OscConfig+0x176>
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	691b      	ldr	r3, [r3, #16]
 8001dda:	2b01      	cmp	r3, #1
 8001ddc:	d001      	beq.n	8001de2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001dde:	2301      	movs	r3, #1
 8001de0:	e1ba      	b.n	8002158 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001de2:	4b3d      	ldr	r3, [pc, #244]	; (8001ed8 <HAL_RCC_OscConfig+0x26c>)
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	695b      	ldr	r3, [r3, #20]
 8001dee:	00db      	lsls	r3, r3, #3
 8001df0:	4939      	ldr	r1, [pc, #228]	; (8001ed8 <HAL_RCC_OscConfig+0x26c>)
 8001df2:	4313      	orrs	r3, r2
 8001df4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001df6:	e03a      	b.n	8001e6e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	691b      	ldr	r3, [r3, #16]
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d020      	beq.n	8001e42 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001e00:	4b36      	ldr	r3, [pc, #216]	; (8001edc <HAL_RCC_OscConfig+0x270>)
 8001e02:	2201      	movs	r2, #1
 8001e04:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e06:	f7ff f9f5 	bl	80011f4 <HAL_GetTick>
 8001e0a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e0c:	e008      	b.n	8001e20 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001e0e:	f7ff f9f1 	bl	80011f4 <HAL_GetTick>
 8001e12:	4602      	mov	r2, r0
 8001e14:	693b      	ldr	r3, [r7, #16]
 8001e16:	1ad3      	subs	r3, r2, r3
 8001e18:	2b02      	cmp	r3, #2
 8001e1a:	d901      	bls.n	8001e20 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001e1c:	2303      	movs	r3, #3
 8001e1e:	e19b      	b.n	8002158 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e20:	4b2d      	ldr	r3, [pc, #180]	; (8001ed8 <HAL_RCC_OscConfig+0x26c>)
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	f003 0302 	and.w	r3, r3, #2
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d0f0      	beq.n	8001e0e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e2c:	4b2a      	ldr	r3, [pc, #168]	; (8001ed8 <HAL_RCC_OscConfig+0x26c>)
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	695b      	ldr	r3, [r3, #20]
 8001e38:	00db      	lsls	r3, r3, #3
 8001e3a:	4927      	ldr	r1, [pc, #156]	; (8001ed8 <HAL_RCC_OscConfig+0x26c>)
 8001e3c:	4313      	orrs	r3, r2
 8001e3e:	600b      	str	r3, [r1, #0]
 8001e40:	e015      	b.n	8001e6e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001e42:	4b26      	ldr	r3, [pc, #152]	; (8001edc <HAL_RCC_OscConfig+0x270>)
 8001e44:	2200      	movs	r2, #0
 8001e46:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e48:	f7ff f9d4 	bl	80011f4 <HAL_GetTick>
 8001e4c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e4e:	e008      	b.n	8001e62 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001e50:	f7ff f9d0 	bl	80011f4 <HAL_GetTick>
 8001e54:	4602      	mov	r2, r0
 8001e56:	693b      	ldr	r3, [r7, #16]
 8001e58:	1ad3      	subs	r3, r2, r3
 8001e5a:	2b02      	cmp	r3, #2
 8001e5c:	d901      	bls.n	8001e62 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001e5e:	2303      	movs	r3, #3
 8001e60:	e17a      	b.n	8002158 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e62:	4b1d      	ldr	r3, [pc, #116]	; (8001ed8 <HAL_RCC_OscConfig+0x26c>)
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	f003 0302 	and.w	r3, r3, #2
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d1f0      	bne.n	8001e50 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	f003 0308 	and.w	r3, r3, #8
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d03a      	beq.n	8001ef0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	699b      	ldr	r3, [r3, #24]
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d019      	beq.n	8001eb6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001e82:	4b17      	ldr	r3, [pc, #92]	; (8001ee0 <HAL_RCC_OscConfig+0x274>)
 8001e84:	2201      	movs	r2, #1
 8001e86:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e88:	f7ff f9b4 	bl	80011f4 <HAL_GetTick>
 8001e8c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e8e:	e008      	b.n	8001ea2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001e90:	f7ff f9b0 	bl	80011f4 <HAL_GetTick>
 8001e94:	4602      	mov	r2, r0
 8001e96:	693b      	ldr	r3, [r7, #16]
 8001e98:	1ad3      	subs	r3, r2, r3
 8001e9a:	2b02      	cmp	r3, #2
 8001e9c:	d901      	bls.n	8001ea2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001e9e:	2303      	movs	r3, #3
 8001ea0:	e15a      	b.n	8002158 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001ea2:	4b0d      	ldr	r3, [pc, #52]	; (8001ed8 <HAL_RCC_OscConfig+0x26c>)
 8001ea4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ea6:	f003 0302 	and.w	r3, r3, #2
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d0f0      	beq.n	8001e90 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001eae:	2001      	movs	r0, #1
 8001eb0:	f000 fad8 	bl	8002464 <RCC_Delay>
 8001eb4:	e01c      	b.n	8001ef0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001eb6:	4b0a      	ldr	r3, [pc, #40]	; (8001ee0 <HAL_RCC_OscConfig+0x274>)
 8001eb8:	2200      	movs	r2, #0
 8001eba:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ebc:	f7ff f99a 	bl	80011f4 <HAL_GetTick>
 8001ec0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ec2:	e00f      	b.n	8001ee4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001ec4:	f7ff f996 	bl	80011f4 <HAL_GetTick>
 8001ec8:	4602      	mov	r2, r0
 8001eca:	693b      	ldr	r3, [r7, #16]
 8001ecc:	1ad3      	subs	r3, r2, r3
 8001ece:	2b02      	cmp	r3, #2
 8001ed0:	d908      	bls.n	8001ee4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001ed2:	2303      	movs	r3, #3
 8001ed4:	e140      	b.n	8002158 <HAL_RCC_OscConfig+0x4ec>
 8001ed6:	bf00      	nop
 8001ed8:	40021000 	.word	0x40021000
 8001edc:	42420000 	.word	0x42420000
 8001ee0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ee4:	4b9e      	ldr	r3, [pc, #632]	; (8002160 <HAL_RCC_OscConfig+0x4f4>)
 8001ee6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ee8:	f003 0302 	and.w	r3, r3, #2
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d1e9      	bne.n	8001ec4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	f003 0304 	and.w	r3, r3, #4
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	f000 80a6 	beq.w	800204a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001efe:	2300      	movs	r3, #0
 8001f00:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001f02:	4b97      	ldr	r3, [pc, #604]	; (8002160 <HAL_RCC_OscConfig+0x4f4>)
 8001f04:	69db      	ldr	r3, [r3, #28]
 8001f06:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d10d      	bne.n	8001f2a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001f0e:	4b94      	ldr	r3, [pc, #592]	; (8002160 <HAL_RCC_OscConfig+0x4f4>)
 8001f10:	69db      	ldr	r3, [r3, #28]
 8001f12:	4a93      	ldr	r2, [pc, #588]	; (8002160 <HAL_RCC_OscConfig+0x4f4>)
 8001f14:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f18:	61d3      	str	r3, [r2, #28]
 8001f1a:	4b91      	ldr	r3, [pc, #580]	; (8002160 <HAL_RCC_OscConfig+0x4f4>)
 8001f1c:	69db      	ldr	r3, [r3, #28]
 8001f1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f22:	60bb      	str	r3, [r7, #8]
 8001f24:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001f26:	2301      	movs	r3, #1
 8001f28:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f2a:	4b8e      	ldr	r3, [pc, #568]	; (8002164 <HAL_RCC_OscConfig+0x4f8>)
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d118      	bne.n	8001f68 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001f36:	4b8b      	ldr	r3, [pc, #556]	; (8002164 <HAL_RCC_OscConfig+0x4f8>)
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	4a8a      	ldr	r2, [pc, #552]	; (8002164 <HAL_RCC_OscConfig+0x4f8>)
 8001f3c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f40:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001f42:	f7ff f957 	bl	80011f4 <HAL_GetTick>
 8001f46:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f48:	e008      	b.n	8001f5c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001f4a:	f7ff f953 	bl	80011f4 <HAL_GetTick>
 8001f4e:	4602      	mov	r2, r0
 8001f50:	693b      	ldr	r3, [r7, #16]
 8001f52:	1ad3      	subs	r3, r2, r3
 8001f54:	2b64      	cmp	r3, #100	; 0x64
 8001f56:	d901      	bls.n	8001f5c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001f58:	2303      	movs	r3, #3
 8001f5a:	e0fd      	b.n	8002158 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f5c:	4b81      	ldr	r3, [pc, #516]	; (8002164 <HAL_RCC_OscConfig+0x4f8>)
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d0f0      	beq.n	8001f4a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	68db      	ldr	r3, [r3, #12]
 8001f6c:	2b01      	cmp	r3, #1
 8001f6e:	d106      	bne.n	8001f7e <HAL_RCC_OscConfig+0x312>
 8001f70:	4b7b      	ldr	r3, [pc, #492]	; (8002160 <HAL_RCC_OscConfig+0x4f4>)
 8001f72:	6a1b      	ldr	r3, [r3, #32]
 8001f74:	4a7a      	ldr	r2, [pc, #488]	; (8002160 <HAL_RCC_OscConfig+0x4f4>)
 8001f76:	f043 0301 	orr.w	r3, r3, #1
 8001f7a:	6213      	str	r3, [r2, #32]
 8001f7c:	e02d      	b.n	8001fda <HAL_RCC_OscConfig+0x36e>
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	68db      	ldr	r3, [r3, #12]
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d10c      	bne.n	8001fa0 <HAL_RCC_OscConfig+0x334>
 8001f86:	4b76      	ldr	r3, [pc, #472]	; (8002160 <HAL_RCC_OscConfig+0x4f4>)
 8001f88:	6a1b      	ldr	r3, [r3, #32]
 8001f8a:	4a75      	ldr	r2, [pc, #468]	; (8002160 <HAL_RCC_OscConfig+0x4f4>)
 8001f8c:	f023 0301 	bic.w	r3, r3, #1
 8001f90:	6213      	str	r3, [r2, #32]
 8001f92:	4b73      	ldr	r3, [pc, #460]	; (8002160 <HAL_RCC_OscConfig+0x4f4>)
 8001f94:	6a1b      	ldr	r3, [r3, #32]
 8001f96:	4a72      	ldr	r2, [pc, #456]	; (8002160 <HAL_RCC_OscConfig+0x4f4>)
 8001f98:	f023 0304 	bic.w	r3, r3, #4
 8001f9c:	6213      	str	r3, [r2, #32]
 8001f9e:	e01c      	b.n	8001fda <HAL_RCC_OscConfig+0x36e>
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	68db      	ldr	r3, [r3, #12]
 8001fa4:	2b05      	cmp	r3, #5
 8001fa6:	d10c      	bne.n	8001fc2 <HAL_RCC_OscConfig+0x356>
 8001fa8:	4b6d      	ldr	r3, [pc, #436]	; (8002160 <HAL_RCC_OscConfig+0x4f4>)
 8001faa:	6a1b      	ldr	r3, [r3, #32]
 8001fac:	4a6c      	ldr	r2, [pc, #432]	; (8002160 <HAL_RCC_OscConfig+0x4f4>)
 8001fae:	f043 0304 	orr.w	r3, r3, #4
 8001fb2:	6213      	str	r3, [r2, #32]
 8001fb4:	4b6a      	ldr	r3, [pc, #424]	; (8002160 <HAL_RCC_OscConfig+0x4f4>)
 8001fb6:	6a1b      	ldr	r3, [r3, #32]
 8001fb8:	4a69      	ldr	r2, [pc, #420]	; (8002160 <HAL_RCC_OscConfig+0x4f4>)
 8001fba:	f043 0301 	orr.w	r3, r3, #1
 8001fbe:	6213      	str	r3, [r2, #32]
 8001fc0:	e00b      	b.n	8001fda <HAL_RCC_OscConfig+0x36e>
 8001fc2:	4b67      	ldr	r3, [pc, #412]	; (8002160 <HAL_RCC_OscConfig+0x4f4>)
 8001fc4:	6a1b      	ldr	r3, [r3, #32]
 8001fc6:	4a66      	ldr	r2, [pc, #408]	; (8002160 <HAL_RCC_OscConfig+0x4f4>)
 8001fc8:	f023 0301 	bic.w	r3, r3, #1
 8001fcc:	6213      	str	r3, [r2, #32]
 8001fce:	4b64      	ldr	r3, [pc, #400]	; (8002160 <HAL_RCC_OscConfig+0x4f4>)
 8001fd0:	6a1b      	ldr	r3, [r3, #32]
 8001fd2:	4a63      	ldr	r2, [pc, #396]	; (8002160 <HAL_RCC_OscConfig+0x4f4>)
 8001fd4:	f023 0304 	bic.w	r3, r3, #4
 8001fd8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	68db      	ldr	r3, [r3, #12]
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d015      	beq.n	800200e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001fe2:	f7ff f907 	bl	80011f4 <HAL_GetTick>
 8001fe6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001fe8:	e00a      	b.n	8002000 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001fea:	f7ff f903 	bl	80011f4 <HAL_GetTick>
 8001fee:	4602      	mov	r2, r0
 8001ff0:	693b      	ldr	r3, [r7, #16]
 8001ff2:	1ad3      	subs	r3, r2, r3
 8001ff4:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ff8:	4293      	cmp	r3, r2
 8001ffa:	d901      	bls.n	8002000 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001ffc:	2303      	movs	r3, #3
 8001ffe:	e0ab      	b.n	8002158 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002000:	4b57      	ldr	r3, [pc, #348]	; (8002160 <HAL_RCC_OscConfig+0x4f4>)
 8002002:	6a1b      	ldr	r3, [r3, #32]
 8002004:	f003 0302 	and.w	r3, r3, #2
 8002008:	2b00      	cmp	r3, #0
 800200a:	d0ee      	beq.n	8001fea <HAL_RCC_OscConfig+0x37e>
 800200c:	e014      	b.n	8002038 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800200e:	f7ff f8f1 	bl	80011f4 <HAL_GetTick>
 8002012:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002014:	e00a      	b.n	800202c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002016:	f7ff f8ed 	bl	80011f4 <HAL_GetTick>
 800201a:	4602      	mov	r2, r0
 800201c:	693b      	ldr	r3, [r7, #16]
 800201e:	1ad3      	subs	r3, r2, r3
 8002020:	f241 3288 	movw	r2, #5000	; 0x1388
 8002024:	4293      	cmp	r3, r2
 8002026:	d901      	bls.n	800202c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002028:	2303      	movs	r3, #3
 800202a:	e095      	b.n	8002158 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800202c:	4b4c      	ldr	r3, [pc, #304]	; (8002160 <HAL_RCC_OscConfig+0x4f4>)
 800202e:	6a1b      	ldr	r3, [r3, #32]
 8002030:	f003 0302 	and.w	r3, r3, #2
 8002034:	2b00      	cmp	r3, #0
 8002036:	d1ee      	bne.n	8002016 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002038:	7dfb      	ldrb	r3, [r7, #23]
 800203a:	2b01      	cmp	r3, #1
 800203c:	d105      	bne.n	800204a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800203e:	4b48      	ldr	r3, [pc, #288]	; (8002160 <HAL_RCC_OscConfig+0x4f4>)
 8002040:	69db      	ldr	r3, [r3, #28]
 8002042:	4a47      	ldr	r2, [pc, #284]	; (8002160 <HAL_RCC_OscConfig+0x4f4>)
 8002044:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002048:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	69db      	ldr	r3, [r3, #28]
 800204e:	2b00      	cmp	r3, #0
 8002050:	f000 8081 	beq.w	8002156 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002054:	4b42      	ldr	r3, [pc, #264]	; (8002160 <HAL_RCC_OscConfig+0x4f4>)
 8002056:	685b      	ldr	r3, [r3, #4]
 8002058:	f003 030c 	and.w	r3, r3, #12
 800205c:	2b08      	cmp	r3, #8
 800205e:	d061      	beq.n	8002124 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	69db      	ldr	r3, [r3, #28]
 8002064:	2b02      	cmp	r3, #2
 8002066:	d146      	bne.n	80020f6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002068:	4b3f      	ldr	r3, [pc, #252]	; (8002168 <HAL_RCC_OscConfig+0x4fc>)
 800206a:	2200      	movs	r2, #0
 800206c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800206e:	f7ff f8c1 	bl	80011f4 <HAL_GetTick>
 8002072:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002074:	e008      	b.n	8002088 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002076:	f7ff f8bd 	bl	80011f4 <HAL_GetTick>
 800207a:	4602      	mov	r2, r0
 800207c:	693b      	ldr	r3, [r7, #16]
 800207e:	1ad3      	subs	r3, r2, r3
 8002080:	2b02      	cmp	r3, #2
 8002082:	d901      	bls.n	8002088 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002084:	2303      	movs	r3, #3
 8002086:	e067      	b.n	8002158 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002088:	4b35      	ldr	r3, [pc, #212]	; (8002160 <HAL_RCC_OscConfig+0x4f4>)
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002090:	2b00      	cmp	r3, #0
 8002092:	d1f0      	bne.n	8002076 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	6a1b      	ldr	r3, [r3, #32]
 8002098:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800209c:	d108      	bne.n	80020b0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800209e:	4b30      	ldr	r3, [pc, #192]	; (8002160 <HAL_RCC_OscConfig+0x4f4>)
 80020a0:	685b      	ldr	r3, [r3, #4]
 80020a2:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	689b      	ldr	r3, [r3, #8]
 80020aa:	492d      	ldr	r1, [pc, #180]	; (8002160 <HAL_RCC_OscConfig+0x4f4>)
 80020ac:	4313      	orrs	r3, r2
 80020ae:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80020b0:	4b2b      	ldr	r3, [pc, #172]	; (8002160 <HAL_RCC_OscConfig+0x4f4>)
 80020b2:	685b      	ldr	r3, [r3, #4]
 80020b4:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	6a19      	ldr	r1, [r3, #32]
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020c0:	430b      	orrs	r3, r1
 80020c2:	4927      	ldr	r1, [pc, #156]	; (8002160 <HAL_RCC_OscConfig+0x4f4>)
 80020c4:	4313      	orrs	r3, r2
 80020c6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80020c8:	4b27      	ldr	r3, [pc, #156]	; (8002168 <HAL_RCC_OscConfig+0x4fc>)
 80020ca:	2201      	movs	r2, #1
 80020cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020ce:	f7ff f891 	bl	80011f4 <HAL_GetTick>
 80020d2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80020d4:	e008      	b.n	80020e8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80020d6:	f7ff f88d 	bl	80011f4 <HAL_GetTick>
 80020da:	4602      	mov	r2, r0
 80020dc:	693b      	ldr	r3, [r7, #16]
 80020de:	1ad3      	subs	r3, r2, r3
 80020e0:	2b02      	cmp	r3, #2
 80020e2:	d901      	bls.n	80020e8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80020e4:	2303      	movs	r3, #3
 80020e6:	e037      	b.n	8002158 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80020e8:	4b1d      	ldr	r3, [pc, #116]	; (8002160 <HAL_RCC_OscConfig+0x4f4>)
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d0f0      	beq.n	80020d6 <HAL_RCC_OscConfig+0x46a>
 80020f4:	e02f      	b.n	8002156 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80020f6:	4b1c      	ldr	r3, [pc, #112]	; (8002168 <HAL_RCC_OscConfig+0x4fc>)
 80020f8:	2200      	movs	r2, #0
 80020fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020fc:	f7ff f87a 	bl	80011f4 <HAL_GetTick>
 8002100:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002102:	e008      	b.n	8002116 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002104:	f7ff f876 	bl	80011f4 <HAL_GetTick>
 8002108:	4602      	mov	r2, r0
 800210a:	693b      	ldr	r3, [r7, #16]
 800210c:	1ad3      	subs	r3, r2, r3
 800210e:	2b02      	cmp	r3, #2
 8002110:	d901      	bls.n	8002116 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002112:	2303      	movs	r3, #3
 8002114:	e020      	b.n	8002158 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002116:	4b12      	ldr	r3, [pc, #72]	; (8002160 <HAL_RCC_OscConfig+0x4f4>)
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800211e:	2b00      	cmp	r3, #0
 8002120:	d1f0      	bne.n	8002104 <HAL_RCC_OscConfig+0x498>
 8002122:	e018      	b.n	8002156 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	69db      	ldr	r3, [r3, #28]
 8002128:	2b01      	cmp	r3, #1
 800212a:	d101      	bne.n	8002130 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 800212c:	2301      	movs	r3, #1
 800212e:	e013      	b.n	8002158 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002130:	4b0b      	ldr	r3, [pc, #44]	; (8002160 <HAL_RCC_OscConfig+0x4f4>)
 8002132:	685b      	ldr	r3, [r3, #4]
 8002134:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	6a1b      	ldr	r3, [r3, #32]
 8002140:	429a      	cmp	r2, r3
 8002142:	d106      	bne.n	8002152 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800214e:	429a      	cmp	r2, r3
 8002150:	d001      	beq.n	8002156 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8002152:	2301      	movs	r3, #1
 8002154:	e000      	b.n	8002158 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8002156:	2300      	movs	r3, #0
}
 8002158:	4618      	mov	r0, r3
 800215a:	3718      	adds	r7, #24
 800215c:	46bd      	mov	sp, r7
 800215e:	bd80      	pop	{r7, pc}
 8002160:	40021000 	.word	0x40021000
 8002164:	40007000 	.word	0x40007000
 8002168:	42420060 	.word	0x42420060

0800216c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800216c:	b580      	push	{r7, lr}
 800216e:	b084      	sub	sp, #16
 8002170:	af00      	add	r7, sp, #0
 8002172:	6078      	str	r0, [r7, #4]
 8002174:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	2b00      	cmp	r3, #0
 800217a:	d101      	bne.n	8002180 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800217c:	2301      	movs	r3, #1
 800217e:	e0d0      	b.n	8002322 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002180:	4b6a      	ldr	r3, [pc, #424]	; (800232c <HAL_RCC_ClockConfig+0x1c0>)
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	f003 0307 	and.w	r3, r3, #7
 8002188:	683a      	ldr	r2, [r7, #0]
 800218a:	429a      	cmp	r2, r3
 800218c:	d910      	bls.n	80021b0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800218e:	4b67      	ldr	r3, [pc, #412]	; (800232c <HAL_RCC_ClockConfig+0x1c0>)
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	f023 0207 	bic.w	r2, r3, #7
 8002196:	4965      	ldr	r1, [pc, #404]	; (800232c <HAL_RCC_ClockConfig+0x1c0>)
 8002198:	683b      	ldr	r3, [r7, #0]
 800219a:	4313      	orrs	r3, r2
 800219c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800219e:	4b63      	ldr	r3, [pc, #396]	; (800232c <HAL_RCC_ClockConfig+0x1c0>)
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	f003 0307 	and.w	r3, r3, #7
 80021a6:	683a      	ldr	r2, [r7, #0]
 80021a8:	429a      	cmp	r2, r3
 80021aa:	d001      	beq.n	80021b0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80021ac:	2301      	movs	r3, #1
 80021ae:	e0b8      	b.n	8002322 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	f003 0302 	and.w	r3, r3, #2
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d020      	beq.n	80021fe <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	f003 0304 	and.w	r3, r3, #4
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d005      	beq.n	80021d4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80021c8:	4b59      	ldr	r3, [pc, #356]	; (8002330 <HAL_RCC_ClockConfig+0x1c4>)
 80021ca:	685b      	ldr	r3, [r3, #4]
 80021cc:	4a58      	ldr	r2, [pc, #352]	; (8002330 <HAL_RCC_ClockConfig+0x1c4>)
 80021ce:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80021d2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	f003 0308 	and.w	r3, r3, #8
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d005      	beq.n	80021ec <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80021e0:	4b53      	ldr	r3, [pc, #332]	; (8002330 <HAL_RCC_ClockConfig+0x1c4>)
 80021e2:	685b      	ldr	r3, [r3, #4]
 80021e4:	4a52      	ldr	r2, [pc, #328]	; (8002330 <HAL_RCC_ClockConfig+0x1c4>)
 80021e6:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80021ea:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80021ec:	4b50      	ldr	r3, [pc, #320]	; (8002330 <HAL_RCC_ClockConfig+0x1c4>)
 80021ee:	685b      	ldr	r3, [r3, #4]
 80021f0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	689b      	ldr	r3, [r3, #8]
 80021f8:	494d      	ldr	r1, [pc, #308]	; (8002330 <HAL_RCC_ClockConfig+0x1c4>)
 80021fa:	4313      	orrs	r3, r2
 80021fc:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	f003 0301 	and.w	r3, r3, #1
 8002206:	2b00      	cmp	r3, #0
 8002208:	d040      	beq.n	800228c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	685b      	ldr	r3, [r3, #4]
 800220e:	2b01      	cmp	r3, #1
 8002210:	d107      	bne.n	8002222 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002212:	4b47      	ldr	r3, [pc, #284]	; (8002330 <HAL_RCC_ClockConfig+0x1c4>)
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800221a:	2b00      	cmp	r3, #0
 800221c:	d115      	bne.n	800224a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800221e:	2301      	movs	r3, #1
 8002220:	e07f      	b.n	8002322 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	685b      	ldr	r3, [r3, #4]
 8002226:	2b02      	cmp	r3, #2
 8002228:	d107      	bne.n	800223a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800222a:	4b41      	ldr	r3, [pc, #260]	; (8002330 <HAL_RCC_ClockConfig+0x1c4>)
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002232:	2b00      	cmp	r3, #0
 8002234:	d109      	bne.n	800224a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002236:	2301      	movs	r3, #1
 8002238:	e073      	b.n	8002322 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800223a:	4b3d      	ldr	r3, [pc, #244]	; (8002330 <HAL_RCC_ClockConfig+0x1c4>)
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	f003 0302 	and.w	r3, r3, #2
 8002242:	2b00      	cmp	r3, #0
 8002244:	d101      	bne.n	800224a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002246:	2301      	movs	r3, #1
 8002248:	e06b      	b.n	8002322 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800224a:	4b39      	ldr	r3, [pc, #228]	; (8002330 <HAL_RCC_ClockConfig+0x1c4>)
 800224c:	685b      	ldr	r3, [r3, #4]
 800224e:	f023 0203 	bic.w	r2, r3, #3
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	685b      	ldr	r3, [r3, #4]
 8002256:	4936      	ldr	r1, [pc, #216]	; (8002330 <HAL_RCC_ClockConfig+0x1c4>)
 8002258:	4313      	orrs	r3, r2
 800225a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800225c:	f7fe ffca 	bl	80011f4 <HAL_GetTick>
 8002260:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002262:	e00a      	b.n	800227a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002264:	f7fe ffc6 	bl	80011f4 <HAL_GetTick>
 8002268:	4602      	mov	r2, r0
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	1ad3      	subs	r3, r2, r3
 800226e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002272:	4293      	cmp	r3, r2
 8002274:	d901      	bls.n	800227a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002276:	2303      	movs	r3, #3
 8002278:	e053      	b.n	8002322 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800227a:	4b2d      	ldr	r3, [pc, #180]	; (8002330 <HAL_RCC_ClockConfig+0x1c4>)
 800227c:	685b      	ldr	r3, [r3, #4]
 800227e:	f003 020c 	and.w	r2, r3, #12
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	685b      	ldr	r3, [r3, #4]
 8002286:	009b      	lsls	r3, r3, #2
 8002288:	429a      	cmp	r2, r3
 800228a:	d1eb      	bne.n	8002264 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800228c:	4b27      	ldr	r3, [pc, #156]	; (800232c <HAL_RCC_ClockConfig+0x1c0>)
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	f003 0307 	and.w	r3, r3, #7
 8002294:	683a      	ldr	r2, [r7, #0]
 8002296:	429a      	cmp	r2, r3
 8002298:	d210      	bcs.n	80022bc <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800229a:	4b24      	ldr	r3, [pc, #144]	; (800232c <HAL_RCC_ClockConfig+0x1c0>)
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	f023 0207 	bic.w	r2, r3, #7
 80022a2:	4922      	ldr	r1, [pc, #136]	; (800232c <HAL_RCC_ClockConfig+0x1c0>)
 80022a4:	683b      	ldr	r3, [r7, #0]
 80022a6:	4313      	orrs	r3, r2
 80022a8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80022aa:	4b20      	ldr	r3, [pc, #128]	; (800232c <HAL_RCC_ClockConfig+0x1c0>)
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	f003 0307 	and.w	r3, r3, #7
 80022b2:	683a      	ldr	r2, [r7, #0]
 80022b4:	429a      	cmp	r2, r3
 80022b6:	d001      	beq.n	80022bc <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80022b8:	2301      	movs	r3, #1
 80022ba:	e032      	b.n	8002322 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	f003 0304 	and.w	r3, r3, #4
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d008      	beq.n	80022da <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80022c8:	4b19      	ldr	r3, [pc, #100]	; (8002330 <HAL_RCC_ClockConfig+0x1c4>)
 80022ca:	685b      	ldr	r3, [r3, #4]
 80022cc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	68db      	ldr	r3, [r3, #12]
 80022d4:	4916      	ldr	r1, [pc, #88]	; (8002330 <HAL_RCC_ClockConfig+0x1c4>)
 80022d6:	4313      	orrs	r3, r2
 80022d8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	f003 0308 	and.w	r3, r3, #8
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d009      	beq.n	80022fa <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80022e6:	4b12      	ldr	r3, [pc, #72]	; (8002330 <HAL_RCC_ClockConfig+0x1c4>)
 80022e8:	685b      	ldr	r3, [r3, #4]
 80022ea:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	691b      	ldr	r3, [r3, #16]
 80022f2:	00db      	lsls	r3, r3, #3
 80022f4:	490e      	ldr	r1, [pc, #56]	; (8002330 <HAL_RCC_ClockConfig+0x1c4>)
 80022f6:	4313      	orrs	r3, r2
 80022f8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80022fa:	f000 f821 	bl	8002340 <HAL_RCC_GetSysClockFreq>
 80022fe:	4602      	mov	r2, r0
 8002300:	4b0b      	ldr	r3, [pc, #44]	; (8002330 <HAL_RCC_ClockConfig+0x1c4>)
 8002302:	685b      	ldr	r3, [r3, #4]
 8002304:	091b      	lsrs	r3, r3, #4
 8002306:	f003 030f 	and.w	r3, r3, #15
 800230a:	490a      	ldr	r1, [pc, #40]	; (8002334 <HAL_RCC_ClockConfig+0x1c8>)
 800230c:	5ccb      	ldrb	r3, [r1, r3]
 800230e:	fa22 f303 	lsr.w	r3, r2, r3
 8002312:	4a09      	ldr	r2, [pc, #36]	; (8002338 <HAL_RCC_ClockConfig+0x1cc>)
 8002314:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002316:	4b09      	ldr	r3, [pc, #36]	; (800233c <HAL_RCC_ClockConfig+0x1d0>)
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	4618      	mov	r0, r3
 800231c:	f7fe ff28 	bl	8001170 <HAL_InitTick>

  return HAL_OK;
 8002320:	2300      	movs	r3, #0
}
 8002322:	4618      	mov	r0, r3
 8002324:	3710      	adds	r7, #16
 8002326:	46bd      	mov	sp, r7
 8002328:	bd80      	pop	{r7, pc}
 800232a:	bf00      	nop
 800232c:	40022000 	.word	0x40022000
 8002330:	40021000 	.word	0x40021000
 8002334:	08004e60 	.word	0x08004e60
 8002338:	20000000 	.word	0x20000000
 800233c:	20000004 	.word	0x20000004

08002340 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002340:	b490      	push	{r4, r7}
 8002342:	b08a      	sub	sp, #40	; 0x28
 8002344:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002346:	4b2a      	ldr	r3, [pc, #168]	; (80023f0 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002348:	1d3c      	adds	r4, r7, #4
 800234a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800234c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002350:	f240 2301 	movw	r3, #513	; 0x201
 8002354:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002356:	2300      	movs	r3, #0
 8002358:	61fb      	str	r3, [r7, #28]
 800235a:	2300      	movs	r3, #0
 800235c:	61bb      	str	r3, [r7, #24]
 800235e:	2300      	movs	r3, #0
 8002360:	627b      	str	r3, [r7, #36]	; 0x24
 8002362:	2300      	movs	r3, #0
 8002364:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002366:	2300      	movs	r3, #0
 8002368:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800236a:	4b22      	ldr	r3, [pc, #136]	; (80023f4 <HAL_RCC_GetSysClockFreq+0xb4>)
 800236c:	685b      	ldr	r3, [r3, #4]
 800236e:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002370:	69fb      	ldr	r3, [r7, #28]
 8002372:	f003 030c 	and.w	r3, r3, #12
 8002376:	2b04      	cmp	r3, #4
 8002378:	d002      	beq.n	8002380 <HAL_RCC_GetSysClockFreq+0x40>
 800237a:	2b08      	cmp	r3, #8
 800237c:	d003      	beq.n	8002386 <HAL_RCC_GetSysClockFreq+0x46>
 800237e:	e02d      	b.n	80023dc <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002380:	4b1d      	ldr	r3, [pc, #116]	; (80023f8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002382:	623b      	str	r3, [r7, #32]
      break;
 8002384:	e02d      	b.n	80023e2 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002386:	69fb      	ldr	r3, [r7, #28]
 8002388:	0c9b      	lsrs	r3, r3, #18
 800238a:	f003 030f 	and.w	r3, r3, #15
 800238e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002392:	4413      	add	r3, r2
 8002394:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002398:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800239a:	69fb      	ldr	r3, [r7, #28]
 800239c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d013      	beq.n	80023cc <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80023a4:	4b13      	ldr	r3, [pc, #76]	; (80023f4 <HAL_RCC_GetSysClockFreq+0xb4>)
 80023a6:	685b      	ldr	r3, [r3, #4]
 80023a8:	0c5b      	lsrs	r3, r3, #17
 80023aa:	f003 0301 	and.w	r3, r3, #1
 80023ae:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80023b2:	4413      	add	r3, r2
 80023b4:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80023b8:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80023ba:	697b      	ldr	r3, [r7, #20]
 80023bc:	4a0e      	ldr	r2, [pc, #56]	; (80023f8 <HAL_RCC_GetSysClockFreq+0xb8>)
 80023be:	fb02 f203 	mul.w	r2, r2, r3
 80023c2:	69bb      	ldr	r3, [r7, #24]
 80023c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80023c8:	627b      	str	r3, [r7, #36]	; 0x24
 80023ca:	e004      	b.n	80023d6 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80023cc:	697b      	ldr	r3, [r7, #20]
 80023ce:	4a0b      	ldr	r2, [pc, #44]	; (80023fc <HAL_RCC_GetSysClockFreq+0xbc>)
 80023d0:	fb02 f303 	mul.w	r3, r2, r3
 80023d4:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80023d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023d8:	623b      	str	r3, [r7, #32]
      break;
 80023da:	e002      	b.n	80023e2 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80023dc:	4b06      	ldr	r3, [pc, #24]	; (80023f8 <HAL_RCC_GetSysClockFreq+0xb8>)
 80023de:	623b      	str	r3, [r7, #32]
      break;
 80023e0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80023e2:	6a3b      	ldr	r3, [r7, #32]
}
 80023e4:	4618      	mov	r0, r3
 80023e6:	3728      	adds	r7, #40	; 0x28
 80023e8:	46bd      	mov	sp, r7
 80023ea:	bc90      	pop	{r4, r7}
 80023ec:	4770      	bx	lr
 80023ee:	bf00      	nop
 80023f0:	08004e50 	.word	0x08004e50
 80023f4:	40021000 	.word	0x40021000
 80023f8:	007a1200 	.word	0x007a1200
 80023fc:	003d0900 	.word	0x003d0900

08002400 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002400:	b480      	push	{r7}
 8002402:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002404:	4b02      	ldr	r3, [pc, #8]	; (8002410 <HAL_RCC_GetHCLKFreq+0x10>)
 8002406:	681b      	ldr	r3, [r3, #0]
}
 8002408:	4618      	mov	r0, r3
 800240a:	46bd      	mov	sp, r7
 800240c:	bc80      	pop	{r7}
 800240e:	4770      	bx	lr
 8002410:	20000000 	.word	0x20000000

08002414 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002414:	b580      	push	{r7, lr}
 8002416:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002418:	f7ff fff2 	bl	8002400 <HAL_RCC_GetHCLKFreq>
 800241c:	4602      	mov	r2, r0
 800241e:	4b05      	ldr	r3, [pc, #20]	; (8002434 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002420:	685b      	ldr	r3, [r3, #4]
 8002422:	0a1b      	lsrs	r3, r3, #8
 8002424:	f003 0307 	and.w	r3, r3, #7
 8002428:	4903      	ldr	r1, [pc, #12]	; (8002438 <HAL_RCC_GetPCLK1Freq+0x24>)
 800242a:	5ccb      	ldrb	r3, [r1, r3]
 800242c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002430:	4618      	mov	r0, r3
 8002432:	bd80      	pop	{r7, pc}
 8002434:	40021000 	.word	0x40021000
 8002438:	08004e70 	.word	0x08004e70

0800243c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800243c:	b580      	push	{r7, lr}
 800243e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002440:	f7ff ffde 	bl	8002400 <HAL_RCC_GetHCLKFreq>
 8002444:	4602      	mov	r2, r0
 8002446:	4b05      	ldr	r3, [pc, #20]	; (800245c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002448:	685b      	ldr	r3, [r3, #4]
 800244a:	0adb      	lsrs	r3, r3, #11
 800244c:	f003 0307 	and.w	r3, r3, #7
 8002450:	4903      	ldr	r1, [pc, #12]	; (8002460 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002452:	5ccb      	ldrb	r3, [r1, r3]
 8002454:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002458:	4618      	mov	r0, r3
 800245a:	bd80      	pop	{r7, pc}
 800245c:	40021000 	.word	0x40021000
 8002460:	08004e70 	.word	0x08004e70

08002464 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002464:	b480      	push	{r7}
 8002466:	b085      	sub	sp, #20
 8002468:	af00      	add	r7, sp, #0
 800246a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800246c:	4b0a      	ldr	r3, [pc, #40]	; (8002498 <RCC_Delay+0x34>)
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	4a0a      	ldr	r2, [pc, #40]	; (800249c <RCC_Delay+0x38>)
 8002472:	fba2 2303 	umull	r2, r3, r2, r3
 8002476:	0a5b      	lsrs	r3, r3, #9
 8002478:	687a      	ldr	r2, [r7, #4]
 800247a:	fb02 f303 	mul.w	r3, r2, r3
 800247e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002480:	bf00      	nop
  }
  while (Delay --);
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	1e5a      	subs	r2, r3, #1
 8002486:	60fa      	str	r2, [r7, #12]
 8002488:	2b00      	cmp	r3, #0
 800248a:	d1f9      	bne.n	8002480 <RCC_Delay+0x1c>
}
 800248c:	bf00      	nop
 800248e:	bf00      	nop
 8002490:	3714      	adds	r7, #20
 8002492:	46bd      	mov	sp, r7
 8002494:	bc80      	pop	{r7}
 8002496:	4770      	bx	lr
 8002498:	20000000 	.word	0x20000000
 800249c:	10624dd3 	.word	0x10624dd3

080024a0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80024a0:	b580      	push	{r7, lr}
 80024a2:	b082      	sub	sp, #8
 80024a4:	af00      	add	r7, sp, #0
 80024a6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d101      	bne.n	80024b2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80024ae:	2301      	movs	r3, #1
 80024b0:	e076      	b.n	80025a0 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d108      	bne.n	80024cc <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	685b      	ldr	r3, [r3, #4]
 80024be:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80024c2:	d009      	beq.n	80024d8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	2200      	movs	r2, #0
 80024c8:	61da      	str	r2, [r3, #28]
 80024ca:	e005      	b.n	80024d8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	2200      	movs	r2, #0
 80024d0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	2200      	movs	r2, #0
 80024d6:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	2200      	movs	r2, #0
 80024dc:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80024e4:	b2db      	uxtb	r3, r3
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d106      	bne.n	80024f8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	2200      	movs	r2, #0
 80024ee:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80024f2:	6878      	ldr	r0, [r7, #4]
 80024f4:	f7fe fa6a 	bl	80009cc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	2202      	movs	r2, #2
 80024fc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	681a      	ldr	r2, [r3, #0]
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800250e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	685b      	ldr	r3, [r3, #4]
 8002514:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	689b      	ldr	r3, [r3, #8]
 800251c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8002520:	431a      	orrs	r2, r3
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	68db      	ldr	r3, [r3, #12]
 8002526:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800252a:	431a      	orrs	r2, r3
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	691b      	ldr	r3, [r3, #16]
 8002530:	f003 0302 	and.w	r3, r3, #2
 8002534:	431a      	orrs	r2, r3
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	695b      	ldr	r3, [r3, #20]
 800253a:	f003 0301 	and.w	r3, r3, #1
 800253e:	431a      	orrs	r2, r3
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	699b      	ldr	r3, [r3, #24]
 8002544:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002548:	431a      	orrs	r2, r3
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	69db      	ldr	r3, [r3, #28]
 800254e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002552:	431a      	orrs	r2, r3
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	6a1b      	ldr	r3, [r3, #32]
 8002558:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800255c:	ea42 0103 	orr.w	r1, r2, r3
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002564:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	430a      	orrs	r2, r1
 800256e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	699b      	ldr	r3, [r3, #24]
 8002574:	0c1a      	lsrs	r2, r3, #16
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	f002 0204 	and.w	r2, r2, #4
 800257e:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	69da      	ldr	r2, [r3, #28]
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800258e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	2200      	movs	r2, #0
 8002594:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	2201      	movs	r2, #1
 800259a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800259e:	2300      	movs	r3, #0
}
 80025a0:	4618      	mov	r0, r3
 80025a2:	3708      	adds	r7, #8
 80025a4:	46bd      	mov	sp, r7
 80025a6:	bd80      	pop	{r7, pc}

080025a8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80025a8:	b580      	push	{r7, lr}
 80025aa:	b082      	sub	sp, #8
 80025ac:	af00      	add	r7, sp, #0
 80025ae:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d101      	bne.n	80025ba <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80025b6:	2301      	movs	r3, #1
 80025b8:	e041      	b.n	800263e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80025c0:	b2db      	uxtb	r3, r3
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d106      	bne.n	80025d4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	2200      	movs	r2, #0
 80025ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80025ce:	6878      	ldr	r0, [r7, #4]
 80025d0:	f7fe fa48 	bl	8000a64 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	2202      	movs	r2, #2
 80025d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681a      	ldr	r2, [r3, #0]
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	3304      	adds	r3, #4
 80025e4:	4619      	mov	r1, r3
 80025e6:	4610      	mov	r0, r2
 80025e8:	f001 f8ee 	bl	80037c8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	2201      	movs	r2, #1
 80025f0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	2201      	movs	r2, #1
 80025f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	2201      	movs	r2, #1
 8002600:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	2201      	movs	r2, #1
 8002608:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	2201      	movs	r2, #1
 8002610:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	2201      	movs	r2, #1
 8002618:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	2201      	movs	r2, #1
 8002620:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	2201      	movs	r2, #1
 8002628:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	2201      	movs	r2, #1
 8002630:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	2201      	movs	r2, #1
 8002638:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800263c:	2300      	movs	r3, #0
}
 800263e:	4618      	mov	r0, r3
 8002640:	3708      	adds	r7, #8
 8002642:	46bd      	mov	sp, r7
 8002644:	bd80      	pop	{r7, pc}
	...

08002648 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002648:	b480      	push	{r7}
 800264a:	b085      	sub	sp, #20
 800264c:	af00      	add	r7, sp, #0
 800264e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002656:	b2db      	uxtb	r3, r3
 8002658:	2b01      	cmp	r3, #1
 800265a:	d001      	beq.n	8002660 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800265c:	2301      	movs	r3, #1
 800265e:	e03a      	b.n	80026d6 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	2202      	movs	r2, #2
 8002664:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	68da      	ldr	r2, [r3, #12]
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	f042 0201 	orr.w	r2, r2, #1
 8002676:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	4a18      	ldr	r2, [pc, #96]	; (80026e0 <HAL_TIM_Base_Start_IT+0x98>)
 800267e:	4293      	cmp	r3, r2
 8002680:	d00e      	beq.n	80026a0 <HAL_TIM_Base_Start_IT+0x58>
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800268a:	d009      	beq.n	80026a0 <HAL_TIM_Base_Start_IT+0x58>
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	4a14      	ldr	r2, [pc, #80]	; (80026e4 <HAL_TIM_Base_Start_IT+0x9c>)
 8002692:	4293      	cmp	r3, r2
 8002694:	d004      	beq.n	80026a0 <HAL_TIM_Base_Start_IT+0x58>
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	4a13      	ldr	r2, [pc, #76]	; (80026e8 <HAL_TIM_Base_Start_IT+0xa0>)
 800269c:	4293      	cmp	r3, r2
 800269e:	d111      	bne.n	80026c4 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	689b      	ldr	r3, [r3, #8]
 80026a6:	f003 0307 	and.w	r3, r3, #7
 80026aa:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	2b06      	cmp	r3, #6
 80026b0:	d010      	beq.n	80026d4 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	681a      	ldr	r2, [r3, #0]
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	f042 0201 	orr.w	r2, r2, #1
 80026c0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80026c2:	e007      	b.n	80026d4 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	681a      	ldr	r2, [r3, #0]
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	f042 0201 	orr.w	r2, r2, #1
 80026d2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80026d4:	2300      	movs	r3, #0
}
 80026d6:	4618      	mov	r0, r3
 80026d8:	3714      	adds	r7, #20
 80026da:	46bd      	mov	sp, r7
 80026dc:	bc80      	pop	{r7}
 80026de:	4770      	bx	lr
 80026e0:	40012c00 	.word	0x40012c00
 80026e4:	40000400 	.word	0x40000400
 80026e8:	40000800 	.word	0x40000800

080026ec <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 80026ec:	b580      	push	{r7, lr}
 80026ee:	b082      	sub	sp, #8
 80026f0:	af00      	add	r7, sp, #0
 80026f2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d101      	bne.n	80026fe <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 80026fa:	2301      	movs	r3, #1
 80026fc:	e041      	b.n	8002782 <HAL_TIM_OC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002704:	b2db      	uxtb	r3, r3
 8002706:	2b00      	cmp	r3, #0
 8002708:	d106      	bne.n	8002718 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	2200      	movs	r2, #0
 800270e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8002712:	6878      	ldr	r0, [r7, #4]
 8002714:	f000 f839 	bl	800278a <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	2202      	movs	r2, #2
 800271c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681a      	ldr	r2, [r3, #0]
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	3304      	adds	r3, #4
 8002728:	4619      	mov	r1, r3
 800272a:	4610      	mov	r0, r2
 800272c:	f001 f84c 	bl	80037c8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	2201      	movs	r2, #1
 8002734:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	2201      	movs	r2, #1
 800273c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	2201      	movs	r2, #1
 8002744:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	2201      	movs	r2, #1
 800274c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	2201      	movs	r2, #1
 8002754:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	2201      	movs	r2, #1
 800275c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	2201      	movs	r2, #1
 8002764:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	2201      	movs	r2, #1
 800276c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	2201      	movs	r2, #1
 8002774:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	2201      	movs	r2, #1
 800277c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002780:	2300      	movs	r3, #0
}
 8002782:	4618      	mov	r0, r3
 8002784:	3708      	adds	r7, #8
 8002786:	46bd      	mov	sp, r7
 8002788:	bd80      	pop	{r7, pc}

0800278a <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 800278a:	b480      	push	{r7}
 800278c:	b083      	sub	sp, #12
 800278e:	af00      	add	r7, sp, #0
 8002790:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8002792:	bf00      	nop
 8002794:	370c      	adds	r7, #12
 8002796:	46bd      	mov	sp, r7
 8002798:	bc80      	pop	{r7}
 800279a:	4770      	bx	lr

0800279c <HAL_TIM_OC_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800279c:	b580      	push	{r7, lr}
 800279e:	b084      	sub	sp, #16
 80027a0:	af00      	add	r7, sp, #0
 80027a2:	6078      	str	r0, [r7, #4]
 80027a4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80027a6:	683b      	ldr	r3, [r7, #0]
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d109      	bne.n	80027c0 <HAL_TIM_OC_Start+0x24>
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80027b2:	b2db      	uxtb	r3, r3
 80027b4:	2b01      	cmp	r3, #1
 80027b6:	bf14      	ite	ne
 80027b8:	2301      	movne	r3, #1
 80027ba:	2300      	moveq	r3, #0
 80027bc:	b2db      	uxtb	r3, r3
 80027be:	e022      	b.n	8002806 <HAL_TIM_OC_Start+0x6a>
 80027c0:	683b      	ldr	r3, [r7, #0]
 80027c2:	2b04      	cmp	r3, #4
 80027c4:	d109      	bne.n	80027da <HAL_TIM_OC_Start+0x3e>
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80027cc:	b2db      	uxtb	r3, r3
 80027ce:	2b01      	cmp	r3, #1
 80027d0:	bf14      	ite	ne
 80027d2:	2301      	movne	r3, #1
 80027d4:	2300      	moveq	r3, #0
 80027d6:	b2db      	uxtb	r3, r3
 80027d8:	e015      	b.n	8002806 <HAL_TIM_OC_Start+0x6a>
 80027da:	683b      	ldr	r3, [r7, #0]
 80027dc:	2b08      	cmp	r3, #8
 80027de:	d109      	bne.n	80027f4 <HAL_TIM_OC_Start+0x58>
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80027e6:	b2db      	uxtb	r3, r3
 80027e8:	2b01      	cmp	r3, #1
 80027ea:	bf14      	ite	ne
 80027ec:	2301      	movne	r3, #1
 80027ee:	2300      	moveq	r3, #0
 80027f0:	b2db      	uxtb	r3, r3
 80027f2:	e008      	b.n	8002806 <HAL_TIM_OC_Start+0x6a>
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80027fa:	b2db      	uxtb	r3, r3
 80027fc:	2b01      	cmp	r3, #1
 80027fe:	bf14      	ite	ne
 8002800:	2301      	movne	r3, #1
 8002802:	2300      	moveq	r3, #0
 8002804:	b2db      	uxtb	r3, r3
 8002806:	2b00      	cmp	r3, #0
 8002808:	d001      	beq.n	800280e <HAL_TIM_OC_Start+0x72>
  {
    return HAL_ERROR;
 800280a:	2301      	movs	r3, #1
 800280c:	e05e      	b.n	80028cc <HAL_TIM_OC_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800280e:	683b      	ldr	r3, [r7, #0]
 8002810:	2b00      	cmp	r3, #0
 8002812:	d104      	bne.n	800281e <HAL_TIM_OC_Start+0x82>
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	2202      	movs	r2, #2
 8002818:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800281c:	e013      	b.n	8002846 <HAL_TIM_OC_Start+0xaa>
 800281e:	683b      	ldr	r3, [r7, #0]
 8002820:	2b04      	cmp	r3, #4
 8002822:	d104      	bne.n	800282e <HAL_TIM_OC_Start+0x92>
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	2202      	movs	r2, #2
 8002828:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800282c:	e00b      	b.n	8002846 <HAL_TIM_OC_Start+0xaa>
 800282e:	683b      	ldr	r3, [r7, #0]
 8002830:	2b08      	cmp	r3, #8
 8002832:	d104      	bne.n	800283e <HAL_TIM_OC_Start+0xa2>
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	2202      	movs	r2, #2
 8002838:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800283c:	e003      	b.n	8002846 <HAL_TIM_OC_Start+0xaa>
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	2202      	movs	r2, #2
 8002842:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Output compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	2201      	movs	r2, #1
 800284c:	6839      	ldr	r1, [r7, #0]
 800284e:	4618      	mov	r0, r3
 8002850:	f001 fbd5 	bl	8003ffe <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	4a1e      	ldr	r2, [pc, #120]	; (80028d4 <HAL_TIM_OC_Start+0x138>)
 800285a:	4293      	cmp	r3, r2
 800285c:	d107      	bne.n	800286e <HAL_TIM_OC_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800286c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	4a18      	ldr	r2, [pc, #96]	; (80028d4 <HAL_TIM_OC_Start+0x138>)
 8002874:	4293      	cmp	r3, r2
 8002876:	d00e      	beq.n	8002896 <HAL_TIM_OC_Start+0xfa>
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002880:	d009      	beq.n	8002896 <HAL_TIM_OC_Start+0xfa>
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	4a14      	ldr	r2, [pc, #80]	; (80028d8 <HAL_TIM_OC_Start+0x13c>)
 8002888:	4293      	cmp	r3, r2
 800288a:	d004      	beq.n	8002896 <HAL_TIM_OC_Start+0xfa>
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	4a12      	ldr	r2, [pc, #72]	; (80028dc <HAL_TIM_OC_Start+0x140>)
 8002892:	4293      	cmp	r3, r2
 8002894:	d111      	bne.n	80028ba <HAL_TIM_OC_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	689b      	ldr	r3, [r3, #8]
 800289c:	f003 0307 	and.w	r3, r3, #7
 80028a0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	2b06      	cmp	r3, #6
 80028a6:	d010      	beq.n	80028ca <HAL_TIM_OC_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	681a      	ldr	r2, [r3, #0]
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	f042 0201 	orr.w	r2, r2, #1
 80028b6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80028b8:	e007      	b.n	80028ca <HAL_TIM_OC_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	681a      	ldr	r2, [r3, #0]
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	f042 0201 	orr.w	r2, r2, #1
 80028c8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80028ca:	2300      	movs	r3, #0
}
 80028cc:	4618      	mov	r0, r3
 80028ce:	3710      	adds	r7, #16
 80028d0:	46bd      	mov	sp, r7
 80028d2:	bd80      	pop	{r7, pc}
 80028d4:	40012c00 	.word	0x40012c00
 80028d8:	40000400 	.word	0x40000400
 80028dc:	40000800 	.word	0x40000800

080028e0 <HAL_TIM_OC_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80028e0:	b580      	push	{r7, lr}
 80028e2:	b082      	sub	sp, #8
 80028e4:	af00      	add	r7, sp, #0
 80028e6:	6078      	str	r0, [r7, #4]
 80028e8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Output compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	2200      	movs	r2, #0
 80028f0:	6839      	ldr	r1, [r7, #0]
 80028f2:	4618      	mov	r0, r3
 80028f4:	f001 fb83 	bl	8003ffe <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	4a29      	ldr	r2, [pc, #164]	; (80029a4 <HAL_TIM_OC_Stop+0xc4>)
 80028fe:	4293      	cmp	r3, r2
 8002900:	d117      	bne.n	8002932 <HAL_TIM_OC_Stop+0x52>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	6a1a      	ldr	r2, [r3, #32]
 8002908:	f241 1311 	movw	r3, #4369	; 0x1111
 800290c:	4013      	ands	r3, r2
 800290e:	2b00      	cmp	r3, #0
 8002910:	d10f      	bne.n	8002932 <HAL_TIM_OC_Stop+0x52>
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	6a1a      	ldr	r2, [r3, #32]
 8002918:	f240 4344 	movw	r3, #1092	; 0x444
 800291c:	4013      	ands	r3, r2
 800291e:	2b00      	cmp	r3, #0
 8002920:	d107      	bne.n	8002932 <HAL_TIM_OC_Stop+0x52>
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002930:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	6a1a      	ldr	r2, [r3, #32]
 8002938:	f241 1311 	movw	r3, #4369	; 0x1111
 800293c:	4013      	ands	r3, r2
 800293e:	2b00      	cmp	r3, #0
 8002940:	d10f      	bne.n	8002962 <HAL_TIM_OC_Stop+0x82>
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	6a1a      	ldr	r2, [r3, #32]
 8002948:	f240 4344 	movw	r3, #1092	; 0x444
 800294c:	4013      	ands	r3, r2
 800294e:	2b00      	cmp	r3, #0
 8002950:	d107      	bne.n	8002962 <HAL_TIM_OC_Stop+0x82>
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	681a      	ldr	r2, [r3, #0]
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	f022 0201 	bic.w	r2, r2, #1
 8002960:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8002962:	683b      	ldr	r3, [r7, #0]
 8002964:	2b00      	cmp	r3, #0
 8002966:	d104      	bne.n	8002972 <HAL_TIM_OC_Stop+0x92>
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	2201      	movs	r2, #1
 800296c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002970:	e013      	b.n	800299a <HAL_TIM_OC_Stop+0xba>
 8002972:	683b      	ldr	r3, [r7, #0]
 8002974:	2b04      	cmp	r3, #4
 8002976:	d104      	bne.n	8002982 <HAL_TIM_OC_Stop+0xa2>
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	2201      	movs	r2, #1
 800297c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002980:	e00b      	b.n	800299a <HAL_TIM_OC_Stop+0xba>
 8002982:	683b      	ldr	r3, [r7, #0]
 8002984:	2b08      	cmp	r3, #8
 8002986:	d104      	bne.n	8002992 <HAL_TIM_OC_Stop+0xb2>
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	2201      	movs	r2, #1
 800298c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002990:	e003      	b.n	800299a <HAL_TIM_OC_Stop+0xba>
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	2201      	movs	r2, #1
 8002996:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Return function status */
  return HAL_OK;
 800299a:	2300      	movs	r3, #0
}
 800299c:	4618      	mov	r0, r3
 800299e:	3708      	adds	r7, #8
 80029a0:	46bd      	mov	sp, r7
 80029a2:	bd80      	pop	{r7, pc}
 80029a4:	40012c00 	.word	0x40012c00

080029a8 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 80029a8:	b580      	push	{r7, lr}
 80029aa:	b082      	sub	sp, #8
 80029ac:	af00      	add	r7, sp, #0
 80029ae:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d101      	bne.n	80029ba <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 80029b6:	2301      	movs	r3, #1
 80029b8:	e041      	b.n	8002a3e <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80029c0:	b2db      	uxtb	r3, r3
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d106      	bne.n	80029d4 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	2200      	movs	r2, #0
 80029ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 80029ce:	6878      	ldr	r0, [r7, #4]
 80029d0:	f000 f839 	bl	8002a46 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	2202      	movs	r2, #2
 80029d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681a      	ldr	r2, [r3, #0]
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	3304      	adds	r3, #4
 80029e4:	4619      	mov	r1, r3
 80029e6:	4610      	mov	r0, r2
 80029e8:	f000 feee 	bl	80037c8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	2201      	movs	r2, #1
 80029f0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	2201      	movs	r2, #1
 80029f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	2201      	movs	r2, #1
 8002a00:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	2201      	movs	r2, #1
 8002a08:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	2201      	movs	r2, #1
 8002a10:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	2201      	movs	r2, #1
 8002a18:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	2201      	movs	r2, #1
 8002a20:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	2201      	movs	r2, #1
 8002a28:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	2201      	movs	r2, #1
 8002a30:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	2201      	movs	r2, #1
 8002a38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002a3c:	2300      	movs	r3, #0
}
 8002a3e:	4618      	mov	r0, r3
 8002a40:	3708      	adds	r7, #8
 8002a42:	46bd      	mov	sp, r7
 8002a44:	bd80      	pop	{r7, pc}

08002a46 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8002a46:	b480      	push	{r7}
 8002a48:	b083      	sub	sp, #12
 8002a4a:	af00      	add	r7, sp, #0
 8002a4c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8002a4e:	bf00      	nop
 8002a50:	370c      	adds	r7, #12
 8002a52:	46bd      	mov	sp, r7
 8002a54:	bc80      	pop	{r7}
 8002a56:	4770      	bx	lr

08002a58 <HAL_TIM_IC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from TIM peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, uint32_t *pData, uint16_t Length)
{
 8002a58:	b580      	push	{r7, lr}
 8002a5a:	b086      	sub	sp, #24
 8002a5c:	af00      	add	r7, sp, #0
 8002a5e:	60f8      	str	r0, [r7, #12]
 8002a60:	60b9      	str	r1, [r7, #8]
 8002a62:	607a      	str	r2, [r7, #4]
 8002a64:	807b      	strh	r3, [r7, #2]
  uint32_t tmpsmcr;
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8002a66:	68bb      	ldr	r3, [r7, #8]
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d104      	bne.n	8002a76 <HAL_TIM_IC_Start_DMA+0x1e>
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002a72:	b2db      	uxtb	r3, r3
 8002a74:	e013      	b.n	8002a9e <HAL_TIM_IC_Start_DMA+0x46>
 8002a76:	68bb      	ldr	r3, [r7, #8]
 8002a78:	2b04      	cmp	r3, #4
 8002a7a:	d104      	bne.n	8002a86 <HAL_TIM_IC_Start_DMA+0x2e>
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002a82:	b2db      	uxtb	r3, r3
 8002a84:	e00b      	b.n	8002a9e <HAL_TIM_IC_Start_DMA+0x46>
 8002a86:	68bb      	ldr	r3, [r7, #8]
 8002a88:	2b08      	cmp	r3, #8
 8002a8a:	d104      	bne.n	8002a96 <HAL_TIM_IC_Start_DMA+0x3e>
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002a92:	b2db      	uxtb	r3, r3
 8002a94:	e003      	b.n	8002a9e <HAL_TIM_IC_Start_DMA+0x46>
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002a9c:	b2db      	uxtb	r3, r3
 8002a9e:	75fb      	strb	r3, [r7, #23]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8002aa0:	68bb      	ldr	r3, [r7, #8]
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d104      	bne.n	8002ab0 <HAL_TIM_IC_Start_DMA+0x58>
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002aac:	b2db      	uxtb	r3, r3
 8002aae:	e013      	b.n	8002ad8 <HAL_TIM_IC_Start_DMA+0x80>
 8002ab0:	68bb      	ldr	r3, [r7, #8]
 8002ab2:	2b04      	cmp	r3, #4
 8002ab4:	d104      	bne.n	8002ac0 <HAL_TIM_IC_Start_DMA+0x68>
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8002abc:	b2db      	uxtb	r3, r3
 8002abe:	e00b      	b.n	8002ad8 <HAL_TIM_IC_Start_DMA+0x80>
 8002ac0:	68bb      	ldr	r3, [r7, #8]
 8002ac2:	2b08      	cmp	r3, #8
 8002ac4:	d104      	bne.n	8002ad0 <HAL_TIM_IC_Start_DMA+0x78>
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002acc:	b2db      	uxtb	r3, r3
 8002ace:	e003      	b.n	8002ad8 <HAL_TIM_IC_Start_DMA+0x80>
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002ad6:	b2db      	uxtb	r3, r3
 8002ad8:	75bb      	strb	r3, [r7, #22]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
  assert_param(IS_TIM_DMA_CC_INSTANCE(htim->Instance));

  /* Set the TIM channel state */
  if ((channel_state == HAL_TIM_CHANNEL_STATE_BUSY)
 8002ada:	7dfb      	ldrb	r3, [r7, #23]
 8002adc:	2b02      	cmp	r3, #2
 8002ade:	d002      	beq.n	8002ae6 <HAL_TIM_IC_Start_DMA+0x8e>
      || (complementary_channel_state == HAL_TIM_CHANNEL_STATE_BUSY))
 8002ae0:	7dbb      	ldrb	r3, [r7, #22]
 8002ae2:	2b02      	cmp	r3, #2
 8002ae4:	d101      	bne.n	8002aea <HAL_TIM_IC_Start_DMA+0x92>
  {
    return HAL_BUSY;
 8002ae6:	2302      	movs	r3, #2
 8002ae8:	e130      	b.n	8002d4c <HAL_TIM_IC_Start_DMA+0x2f4>
  }
  else if ((channel_state == HAL_TIM_CHANNEL_STATE_READY)
 8002aea:	7dfb      	ldrb	r3, [r7, #23]
 8002aec:	2b01      	cmp	r3, #1
 8002aee:	d143      	bne.n	8002b78 <HAL_TIM_IC_Start_DMA+0x120>
           && (complementary_channel_state == HAL_TIM_CHANNEL_STATE_READY))
 8002af0:	7dbb      	ldrb	r3, [r7, #22]
 8002af2:	2b01      	cmp	r3, #1
 8002af4:	d140      	bne.n	8002b78 <HAL_TIM_IC_Start_DMA+0x120>
  {
    if ((pData == NULL) && (Length > 0U))
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d104      	bne.n	8002b06 <HAL_TIM_IC_Start_DMA+0xae>
 8002afc:	887b      	ldrh	r3, [r7, #2]
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d001      	beq.n	8002b06 <HAL_TIM_IC_Start_DMA+0xae>
    {
      return HAL_ERROR;
 8002b02:	2301      	movs	r3, #1
 8002b04:	e122      	b.n	8002d4c <HAL_TIM_IC_Start_DMA+0x2f4>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002b06:	68bb      	ldr	r3, [r7, #8]
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d104      	bne.n	8002b16 <HAL_TIM_IC_Start_DMA+0xbe>
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	2202      	movs	r2, #2
 8002b10:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002b14:	e013      	b.n	8002b3e <HAL_TIM_IC_Start_DMA+0xe6>
 8002b16:	68bb      	ldr	r3, [r7, #8]
 8002b18:	2b04      	cmp	r3, #4
 8002b1a:	d104      	bne.n	8002b26 <HAL_TIM_IC_Start_DMA+0xce>
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	2202      	movs	r2, #2
 8002b20:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002b24:	e00b      	b.n	8002b3e <HAL_TIM_IC_Start_DMA+0xe6>
 8002b26:	68bb      	ldr	r3, [r7, #8]
 8002b28:	2b08      	cmp	r3, #8
 8002b2a:	d104      	bne.n	8002b36 <HAL_TIM_IC_Start_DMA+0xde>
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	2202      	movs	r2, #2
 8002b30:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002b34:	e003      	b.n	8002b3e <HAL_TIM_IC_Start_DMA+0xe6>
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	2202      	movs	r2, #2
 8002b3a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002b3e:	68bb      	ldr	r3, [r7, #8]
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d104      	bne.n	8002b4e <HAL_TIM_IC_Start_DMA+0xf6>
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	2202      	movs	r2, #2
 8002b48:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    if ((pData == NULL) && (Length > 0U))
 8002b4c:	e016      	b.n	8002b7c <HAL_TIM_IC_Start_DMA+0x124>
      TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002b4e:	68bb      	ldr	r3, [r7, #8]
 8002b50:	2b04      	cmp	r3, #4
 8002b52:	d104      	bne.n	8002b5e <HAL_TIM_IC_Start_DMA+0x106>
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	2202      	movs	r2, #2
 8002b58:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    if ((pData == NULL) && (Length > 0U))
 8002b5c:	e00e      	b.n	8002b7c <HAL_TIM_IC_Start_DMA+0x124>
      TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002b5e:	68bb      	ldr	r3, [r7, #8]
 8002b60:	2b08      	cmp	r3, #8
 8002b62:	d104      	bne.n	8002b6e <HAL_TIM_IC_Start_DMA+0x116>
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	2202      	movs	r2, #2
 8002b68:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    if ((pData == NULL) && (Length > 0U))
 8002b6c:	e006      	b.n	8002b7c <HAL_TIM_IC_Start_DMA+0x124>
      TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	2202      	movs	r2, #2
 8002b72:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    if ((pData == NULL) && (Length > 0U))
 8002b76:	e001      	b.n	8002b7c <HAL_TIM_IC_Start_DMA+0x124>
    }
  }
  else
  {
    return HAL_ERROR;
 8002b78:	2301      	movs	r3, #1
 8002b7a:	e0e7      	b.n	8002d4c <HAL_TIM_IC_Start_DMA+0x2f4>
  }

  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	2201      	movs	r2, #1
 8002b82:	68b9      	ldr	r1, [r7, #8]
 8002b84:	4618      	mov	r0, r3
 8002b86:	f001 fa3a 	bl	8003ffe <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	4a71      	ldr	r2, [pc, #452]	; (8002d54 <HAL_TIM_IC_Start_DMA+0x2fc>)
 8002b90:	4293      	cmp	r3, r2
 8002b92:	d00e      	beq.n	8002bb2 <HAL_TIM_IC_Start_DMA+0x15a>
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002b9c:	d009      	beq.n	8002bb2 <HAL_TIM_IC_Start_DMA+0x15a>
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	4a6d      	ldr	r2, [pc, #436]	; (8002d58 <HAL_TIM_IC_Start_DMA+0x300>)
 8002ba4:	4293      	cmp	r3, r2
 8002ba6:	d004      	beq.n	8002bb2 <HAL_TIM_IC_Start_DMA+0x15a>
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	4a6b      	ldr	r2, [pc, #428]	; (8002d5c <HAL_TIM_IC_Start_DMA+0x304>)
 8002bae:	4293      	cmp	r3, r2
 8002bb0:	d111      	bne.n	8002bd6 <HAL_TIM_IC_Start_DMA+0x17e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	689b      	ldr	r3, [r3, #8]
 8002bb8:	f003 0307 	and.w	r3, r3, #7
 8002bbc:	613b      	str	r3, [r7, #16]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002bbe:	693b      	ldr	r3, [r7, #16]
 8002bc0:	2b06      	cmp	r3, #6
 8002bc2:	d010      	beq.n	8002be6 <HAL_TIM_IC_Start_DMA+0x18e>
    {
      __HAL_TIM_ENABLE(htim);
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	681a      	ldr	r2, [r3, #0]
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	f042 0201 	orr.w	r2, r2, #1
 8002bd2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002bd4:	e007      	b.n	8002be6 <HAL_TIM_IC_Start_DMA+0x18e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	681a      	ldr	r2, [r3, #0]
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	f042 0201 	orr.w	r2, r2, #1
 8002be4:	601a      	str	r2, [r3, #0]
 8002be6:	68bb      	ldr	r3, [r7, #8]
 8002be8:	2b0c      	cmp	r3, #12
 8002bea:	f200 80ad 	bhi.w	8002d48 <HAL_TIM_IC_Start_DMA+0x2f0>
 8002bee:	a201      	add	r2, pc, #4	; (adr r2, 8002bf4 <HAL_TIM_IC_Start_DMA+0x19c>)
 8002bf0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002bf4:	08002c29 	.word	0x08002c29
 8002bf8:	08002d49 	.word	0x08002d49
 8002bfc:	08002d49 	.word	0x08002d49
 8002c00:	08002d49 	.word	0x08002d49
 8002c04:	08002c71 	.word	0x08002c71
 8002c08:	08002d49 	.word	0x08002d49
 8002c0c:	08002d49 	.word	0x08002d49
 8002c10:	08002d49 	.word	0x08002d49
 8002c14:	08002cb9 	.word	0x08002cb9
 8002c18:	08002d49 	.word	0x08002d49
 8002c1c:	08002d49 	.word	0x08002d49
 8002c20:	08002d49 	.word	0x08002d49
 8002c24:	08002d01 	.word	0x08002d01
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA capture callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMACaptureCplt;
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c2c:	4a4c      	ldr	r2, [pc, #304]	; (8002d60 <HAL_TIM_IC_Start_DMA+0x308>)
 8002c2e:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c34:	4a4b      	ldr	r2, [pc, #300]	; (8002d64 <HAL_TIM_IC_Start_DMA+0x30c>)
 8002c36:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c3c:	4a4a      	ldr	r2, [pc, #296]	; (8002d68 <HAL_TIM_IC_Start_DMA+0x310>)
 8002c3e:	631a      	str	r2, [r3, #48]	; 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)&htim->Instance->CCR1, (uint32_t)pData,
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	3334      	adds	r3, #52	; 0x34
 8002c4a:	4619      	mov	r1, r3
 8002c4c:	687a      	ldr	r2, [r7, #4]
 8002c4e:	887b      	ldrh	r3, [r7, #2]
 8002c50:	f7fe fc66 	bl	8001520 <HAL_DMA_Start_IT>
 8002c54:	4603      	mov	r3, r0
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d001      	beq.n	8002c5e <HAL_TIM_IC_Start_DMA+0x206>
                         Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8002c5a:	2301      	movs	r3, #1
 8002c5c:	e076      	b.n	8002d4c <HAL_TIM_IC_Start_DMA+0x2f4>
      }
      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	68da      	ldr	r2, [r3, #12]
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002c6c:	60da      	str	r2, [r3, #12]
      break;
 8002c6e:	e06c      	b.n	8002d4a <HAL_TIM_IC_Start_DMA+0x2f2>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA capture callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMACaptureCplt;
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c74:	4a3a      	ldr	r2, [pc, #232]	; (8002d60 <HAL_TIM_IC_Start_DMA+0x308>)
 8002c76:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c7c:	4a39      	ldr	r2, [pc, #228]	; (8002d64 <HAL_TIM_IC_Start_DMA+0x30c>)
 8002c7e:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c84:	4a38      	ldr	r2, [pc, #224]	; (8002d68 <HAL_TIM_IC_Start_DMA+0x310>)
 8002c86:	631a      	str	r2, [r3, #48]	; 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)&htim->Instance->CCR2, (uint32_t)pData,
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	3338      	adds	r3, #56	; 0x38
 8002c92:	4619      	mov	r1, r3
 8002c94:	687a      	ldr	r2, [r7, #4]
 8002c96:	887b      	ldrh	r3, [r7, #2]
 8002c98:	f7fe fc42 	bl	8001520 <HAL_DMA_Start_IT>
 8002c9c:	4603      	mov	r3, r0
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d001      	beq.n	8002ca6 <HAL_TIM_IC_Start_DMA+0x24e>
                         Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8002ca2:	2301      	movs	r3, #1
 8002ca4:	e052      	b.n	8002d4c <HAL_TIM_IC_Start_DMA+0x2f4>
      }
      /* Enable the TIM Capture/Compare 2  DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	68da      	ldr	r2, [r3, #12]
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002cb4:	60da      	str	r2, [r3, #12]
      break;
 8002cb6:	e048      	b.n	8002d4a <HAL_TIM_IC_Start_DMA+0x2f2>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA capture callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMACaptureCplt;
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cbc:	4a28      	ldr	r2, [pc, #160]	; (8002d60 <HAL_TIM_IC_Start_DMA+0x308>)
 8002cbe:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cc4:	4a27      	ldr	r2, [pc, #156]	; (8002d64 <HAL_TIM_IC_Start_DMA+0x30c>)
 8002cc6:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ccc:	4a26      	ldr	r2, [pc, #152]	; (8002d68 <HAL_TIM_IC_Start_DMA+0x310>)
 8002cce:	631a      	str	r2, [r3, #48]	; 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)&htim->Instance->CCR3, (uint32_t)pData,
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	333c      	adds	r3, #60	; 0x3c
 8002cda:	4619      	mov	r1, r3
 8002cdc:	687a      	ldr	r2, [r7, #4]
 8002cde:	887b      	ldrh	r3, [r7, #2]
 8002ce0:	f7fe fc1e 	bl	8001520 <HAL_DMA_Start_IT>
 8002ce4:	4603      	mov	r3, r0
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d001      	beq.n	8002cee <HAL_TIM_IC_Start_DMA+0x296>
                         Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8002cea:	2301      	movs	r3, #1
 8002cec:	e02e      	b.n	8002d4c <HAL_TIM_IC_Start_DMA+0x2f4>
      }
      /* Enable the TIM Capture/Compare 3  DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	68da      	ldr	r2, [r3, #12]
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002cfc:	60da      	str	r2, [r3, #12]
      break;
 8002cfe:	e024      	b.n	8002d4a <HAL_TIM_IC_Start_DMA+0x2f2>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA capture callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMACaptureCplt;
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d04:	4a16      	ldr	r2, [pc, #88]	; (8002d60 <HAL_TIM_IC_Start_DMA+0x308>)
 8002d06:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d0c:	4a15      	ldr	r2, [pc, #84]	; (8002d64 <HAL_TIM_IC_Start_DMA+0x30c>)
 8002d0e:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d14:	4a14      	ldr	r2, [pc, #80]	; (8002d68 <HAL_TIM_IC_Start_DMA+0x310>)
 8002d16:	631a      	str	r2, [r3, #48]	; 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)&htim->Instance->CCR4, (uint32_t)pData,
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	3340      	adds	r3, #64	; 0x40
 8002d22:	4619      	mov	r1, r3
 8002d24:	687a      	ldr	r2, [r7, #4]
 8002d26:	887b      	ldrh	r3, [r7, #2]
 8002d28:	f7fe fbfa 	bl	8001520 <HAL_DMA_Start_IT>
 8002d2c:	4603      	mov	r3, r0
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d001      	beq.n	8002d36 <HAL_TIM_IC_Start_DMA+0x2de>
                         Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8002d32:	2301      	movs	r3, #1
 8002d34:	e00a      	b.n	8002d4c <HAL_TIM_IC_Start_DMA+0x2f4>
      }
      /* Enable the TIM Capture/Compare 4  DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	68da      	ldr	r2, [r3, #12]
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002d44:	60da      	str	r2, [r3, #12]
      break;
 8002d46:	e000      	b.n	8002d4a <HAL_TIM_IC_Start_DMA+0x2f2>
    }

    default:
      break;
 8002d48:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002d4a:	2300      	movs	r3, #0
}
 8002d4c:	4618      	mov	r0, r3
 8002d4e:	3718      	adds	r7, #24
 8002d50:	46bd      	mov	sp, r7
 8002d52:	bd80      	pop	{r7, pc}
 8002d54:	40012c00 	.word	0x40012c00
 8002d58:	40000400 	.word	0x40000400
 8002d5c:	40000800 	.word	0x40000800
 8002d60:	08003699 	.word	0x08003699
 8002d64:	08003761 	.word	0x08003761
 8002d68:	08003607 	.word	0x08003607

08002d6c <HAL_TIM_IC_Stop_DMA>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002d6c:	b580      	push	{r7, lr}
 8002d6e:	b082      	sub	sp, #8
 8002d70:	af00      	add	r7, sp, #0
 8002d72:	6078      	str	r0, [r7, #4]
 8002d74:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
  assert_param(IS_TIM_DMA_CC_INSTANCE(htim->Instance));

  /* Disable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	2200      	movs	r2, #0
 8002d7c:	6839      	ldr	r1, [r7, #0]
 8002d7e:	4618      	mov	r0, r3
 8002d80:	f001 f93d 	bl	8003ffe <TIM_CCxChannelCmd>
 8002d84:	683b      	ldr	r3, [r7, #0]
 8002d86:	2b0c      	cmp	r3, #12
 8002d88:	d854      	bhi.n	8002e34 <HAL_TIM_IC_Stop_DMA+0xc8>
 8002d8a:	a201      	add	r2, pc, #4	; (adr r2, 8002d90 <HAL_TIM_IC_Stop_DMA+0x24>)
 8002d8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d90:	08002dc5 	.word	0x08002dc5
 8002d94:	08002e35 	.word	0x08002e35
 8002d98:	08002e35 	.word	0x08002e35
 8002d9c:	08002e35 	.word	0x08002e35
 8002da0:	08002de1 	.word	0x08002de1
 8002da4:	08002e35 	.word	0x08002e35
 8002da8:	08002e35 	.word	0x08002e35
 8002dac:	08002e35 	.word	0x08002e35
 8002db0:	08002dfd 	.word	0x08002dfd
 8002db4:	08002e35 	.word	0x08002e35
 8002db8:	08002e35 	.word	0x08002e35
 8002dbc:	08002e35 	.word	0x08002e35
 8002dc0:	08002e19 	.word	0x08002e19
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	68da      	ldr	r2, [r3, #12]
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002dd2:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dd8:	4618      	mov	r0, r3
 8002dda:	f7fe fc01 	bl	80015e0 <HAL_DMA_Abort_IT>
      break;
 8002dde:	e02a      	b.n	8002e36 <HAL_TIM_IC_Stop_DMA+0xca>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	68da      	ldr	r2, [r3, #12]
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002dee:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002df4:	4618      	mov	r0, r3
 8002df6:	f7fe fbf3 	bl	80015e0 <HAL_DMA_Abort_IT>
      break;
 8002dfa:	e01c      	b.n	8002e36 <HAL_TIM_IC_Stop_DMA+0xca>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3  DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	68da      	ldr	r2, [r3, #12]
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002e0a:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e10:	4618      	mov	r0, r3
 8002e12:	f7fe fbe5 	bl	80015e0 <HAL_DMA_Abort_IT>
      break;
 8002e16:	e00e      	b.n	8002e36 <HAL_TIM_IC_Stop_DMA+0xca>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4  DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	68da      	ldr	r2, [r3, #12]
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002e26:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e2c:	4618      	mov	r0, r3
 8002e2e:	f7fe fbd7 	bl	80015e0 <HAL_DMA_Abort_IT>
      break;
 8002e32:	e000      	b.n	8002e36 <HAL_TIM_IC_Stop_DMA+0xca>
    }

    default:
      break;
 8002e34:	bf00      	nop
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	6a1a      	ldr	r2, [r3, #32]
 8002e3c:	f241 1311 	movw	r3, #4369	; 0x1111
 8002e40:	4013      	ands	r3, r2
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d10f      	bne.n	8002e66 <HAL_TIM_IC_Stop_DMA+0xfa>
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	6a1a      	ldr	r2, [r3, #32]
 8002e4c:	f240 4344 	movw	r3, #1092	; 0x444
 8002e50:	4013      	ands	r3, r2
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d107      	bne.n	8002e66 <HAL_TIM_IC_Stop_DMA+0xfa>
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	681a      	ldr	r2, [r3, #0]
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	f022 0201 	bic.w	r2, r2, #1
 8002e64:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8002e66:	683b      	ldr	r3, [r7, #0]
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d104      	bne.n	8002e76 <HAL_TIM_IC_Stop_DMA+0x10a>
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	2201      	movs	r2, #1
 8002e70:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002e74:	e013      	b.n	8002e9e <HAL_TIM_IC_Stop_DMA+0x132>
 8002e76:	683b      	ldr	r3, [r7, #0]
 8002e78:	2b04      	cmp	r3, #4
 8002e7a:	d104      	bne.n	8002e86 <HAL_TIM_IC_Stop_DMA+0x11a>
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	2201      	movs	r2, #1
 8002e80:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002e84:	e00b      	b.n	8002e9e <HAL_TIM_IC_Stop_DMA+0x132>
 8002e86:	683b      	ldr	r3, [r7, #0]
 8002e88:	2b08      	cmp	r3, #8
 8002e8a:	d104      	bne.n	8002e96 <HAL_TIM_IC_Stop_DMA+0x12a>
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	2201      	movs	r2, #1
 8002e90:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002e94:	e003      	b.n	8002e9e <HAL_TIM_IC_Stop_DMA+0x132>
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	2201      	movs	r2, #1
 8002e9a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8002e9e:	683b      	ldr	r3, [r7, #0]
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d104      	bne.n	8002eae <HAL_TIM_IC_Stop_DMA+0x142>
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	2201      	movs	r2, #1
 8002ea8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002eac:	e013      	b.n	8002ed6 <HAL_TIM_IC_Stop_DMA+0x16a>
 8002eae:	683b      	ldr	r3, [r7, #0]
 8002eb0:	2b04      	cmp	r3, #4
 8002eb2:	d104      	bne.n	8002ebe <HAL_TIM_IC_Stop_DMA+0x152>
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	2201      	movs	r2, #1
 8002eb8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002ebc:	e00b      	b.n	8002ed6 <HAL_TIM_IC_Stop_DMA+0x16a>
 8002ebe:	683b      	ldr	r3, [r7, #0]
 8002ec0:	2b08      	cmp	r3, #8
 8002ec2:	d104      	bne.n	8002ece <HAL_TIM_IC_Stop_DMA+0x162>
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	2201      	movs	r2, #1
 8002ec8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002ecc:	e003      	b.n	8002ed6 <HAL_TIM_IC_Stop_DMA+0x16a>
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	2201      	movs	r2, #1
 8002ed2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Return function status */
  return HAL_OK;
 8002ed6:	2300      	movs	r3, #0
}
 8002ed8:	4618      	mov	r0, r3
 8002eda:	3708      	adds	r7, #8
 8002edc:	46bd      	mov	sp, r7
 8002ede:	bd80      	pop	{r7, pc}

08002ee0 <HAL_TIM_OnePulse_Init>:
  *            @arg TIM_OPMODE_SINGLE: Only one pulse will be generated.
  *            @arg TIM_OPMODE_REPETITIVE: Repetitive pulses will be generated.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Init(TIM_HandleTypeDef *htim, uint32_t OnePulseMode)
{
 8002ee0:	b580      	push	{r7, lr}
 8002ee2:	b082      	sub	sp, #8
 8002ee4:	af00      	add	r7, sp, #0
 8002ee6:	6078      	str	r0, [r7, #4]
 8002ee8:	6039      	str	r1, [r7, #0]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d101      	bne.n	8002ef4 <HAL_TIM_OnePulse_Init+0x14>
  {
    return HAL_ERROR;
 8002ef0:	2301      	movs	r3, #1
 8002ef2:	e041      	b.n	8002f78 <HAL_TIM_OnePulse_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_OPM_MODE(OnePulseMode));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002efa:	b2db      	uxtb	r3, r3
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d106      	bne.n	8002f0e <HAL_TIM_OnePulse_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	2200      	movs	r2, #0
 8002f04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OnePulse_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OnePulse_MspInit(htim);
 8002f08:	6878      	ldr	r0, [r7, #4]
 8002f0a:	f000 f839 	bl	8002f80 <HAL_TIM_OnePulse_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	2202      	movs	r2, #2
 8002f12:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Configure the Time base in the One Pulse Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681a      	ldr	r2, [r3, #0]
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	3304      	adds	r3, #4
 8002f1e:	4619      	mov	r1, r3
 8002f20:	4610      	mov	r0, r2
 8002f22:	f000 fc51 	bl	80037c8 <TIM_Base_SetConfig>

  /* Reset the OPM Bit */
  htim->Instance->CR1 &= ~TIM_CR1_OPM;
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	681a      	ldr	r2, [r3, #0]
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	f022 0208 	bic.w	r2, r2, #8
 8002f34:	601a      	str	r2, [r3, #0]

  /* Configure the OPM Mode */
  htim->Instance->CR1 |= OnePulseMode;
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	6819      	ldr	r1, [r3, #0]
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	683a      	ldr	r2, [r7, #0]
 8002f42:	430a      	orrs	r2, r1
 8002f44:	601a      	str	r2, [r3, #0]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	2201      	movs	r2, #1
 8002f4a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	2201      	movs	r2, #1
 8002f52:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	2201      	movs	r2, #1
 8002f5a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	2201      	movs	r2, #1
 8002f62:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	2201      	movs	r2, #1
 8002f6a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	2201      	movs	r2, #1
 8002f72:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002f76:	2300      	movs	r3, #0
}
 8002f78:	4618      	mov	r0, r3
 8002f7a:	3708      	adds	r7, #8
 8002f7c:	46bd      	mov	sp, r7
 8002f7e:	bd80      	pop	{r7, pc}

08002f80 <HAL_TIM_OnePulse_MspInit>:
  * @brief  Initializes the TIM One Pulse MSP.
  * @param  htim TIM One Pulse handle
  * @retval None
  */
__weak void HAL_TIM_OnePulse_MspInit(TIM_HandleTypeDef *htim)
{
 8002f80:	b480      	push	{r7}
 8002f82:	b083      	sub	sp, #12
 8002f84:	af00      	add	r7, sp, #0
 8002f86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OnePulse_MspInit could be implemented in the user file
   */
}
 8002f88:	bf00      	nop
 8002f8a:	370c      	adds	r7, #12
 8002f8c:	46bd      	mov	sp, r7
 8002f8e:	bc80      	pop	{r7}
 8002f90:	4770      	bx	lr

08002f92 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002f92:	b580      	push	{r7, lr}
 8002f94:	b082      	sub	sp, #8
 8002f96:	af00      	add	r7, sp, #0
 8002f98:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	691b      	ldr	r3, [r3, #16]
 8002fa0:	f003 0302 	and.w	r3, r3, #2
 8002fa4:	2b02      	cmp	r3, #2
 8002fa6:	d122      	bne.n	8002fee <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	68db      	ldr	r3, [r3, #12]
 8002fae:	f003 0302 	and.w	r3, r3, #2
 8002fb2:	2b02      	cmp	r3, #2
 8002fb4:	d11b      	bne.n	8002fee <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	f06f 0202 	mvn.w	r2, #2
 8002fbe:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	2201      	movs	r2, #1
 8002fc4:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	699b      	ldr	r3, [r3, #24]
 8002fcc:	f003 0303 	and.w	r3, r3, #3
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d003      	beq.n	8002fdc <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002fd4:	6878      	ldr	r0, [r7, #4]
 8002fd6:	f000 fae9 	bl	80035ac <HAL_TIM_IC_CaptureCallback>
 8002fda:	e005      	b.n	8002fe8 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002fdc:	6878      	ldr	r0, [r7, #4]
 8002fde:	f000 fadc 	bl	800359a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002fe2:	6878      	ldr	r0, [r7, #4]
 8002fe4:	f000 faf4 	bl	80035d0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	2200      	movs	r2, #0
 8002fec:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	691b      	ldr	r3, [r3, #16]
 8002ff4:	f003 0304 	and.w	r3, r3, #4
 8002ff8:	2b04      	cmp	r3, #4
 8002ffa:	d122      	bne.n	8003042 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	68db      	ldr	r3, [r3, #12]
 8003002:	f003 0304 	and.w	r3, r3, #4
 8003006:	2b04      	cmp	r3, #4
 8003008:	d11b      	bne.n	8003042 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	f06f 0204 	mvn.w	r2, #4
 8003012:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	2202      	movs	r2, #2
 8003018:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	699b      	ldr	r3, [r3, #24]
 8003020:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003024:	2b00      	cmp	r3, #0
 8003026:	d003      	beq.n	8003030 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003028:	6878      	ldr	r0, [r7, #4]
 800302a:	f000 fabf 	bl	80035ac <HAL_TIM_IC_CaptureCallback>
 800302e:	e005      	b.n	800303c <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003030:	6878      	ldr	r0, [r7, #4]
 8003032:	f000 fab2 	bl	800359a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003036:	6878      	ldr	r0, [r7, #4]
 8003038:	f000 faca 	bl	80035d0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	2200      	movs	r2, #0
 8003040:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	691b      	ldr	r3, [r3, #16]
 8003048:	f003 0308 	and.w	r3, r3, #8
 800304c:	2b08      	cmp	r3, #8
 800304e:	d122      	bne.n	8003096 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	68db      	ldr	r3, [r3, #12]
 8003056:	f003 0308 	and.w	r3, r3, #8
 800305a:	2b08      	cmp	r3, #8
 800305c:	d11b      	bne.n	8003096 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	f06f 0208 	mvn.w	r2, #8
 8003066:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	2204      	movs	r2, #4
 800306c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	69db      	ldr	r3, [r3, #28]
 8003074:	f003 0303 	and.w	r3, r3, #3
 8003078:	2b00      	cmp	r3, #0
 800307a:	d003      	beq.n	8003084 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800307c:	6878      	ldr	r0, [r7, #4]
 800307e:	f000 fa95 	bl	80035ac <HAL_TIM_IC_CaptureCallback>
 8003082:	e005      	b.n	8003090 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003084:	6878      	ldr	r0, [r7, #4]
 8003086:	f000 fa88 	bl	800359a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800308a:	6878      	ldr	r0, [r7, #4]
 800308c:	f000 faa0 	bl	80035d0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	2200      	movs	r2, #0
 8003094:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	691b      	ldr	r3, [r3, #16]
 800309c:	f003 0310 	and.w	r3, r3, #16
 80030a0:	2b10      	cmp	r3, #16
 80030a2:	d122      	bne.n	80030ea <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	68db      	ldr	r3, [r3, #12]
 80030aa:	f003 0310 	and.w	r3, r3, #16
 80030ae:	2b10      	cmp	r3, #16
 80030b0:	d11b      	bne.n	80030ea <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	f06f 0210 	mvn.w	r2, #16
 80030ba:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	2208      	movs	r2, #8
 80030c0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	69db      	ldr	r3, [r3, #28]
 80030c8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d003      	beq.n	80030d8 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80030d0:	6878      	ldr	r0, [r7, #4]
 80030d2:	f000 fa6b 	bl	80035ac <HAL_TIM_IC_CaptureCallback>
 80030d6:	e005      	b.n	80030e4 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80030d8:	6878      	ldr	r0, [r7, #4]
 80030da:	f000 fa5e 	bl	800359a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80030de:	6878      	ldr	r0, [r7, #4]
 80030e0:	f000 fa76 	bl	80035d0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	2200      	movs	r2, #0
 80030e8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	691b      	ldr	r3, [r3, #16]
 80030f0:	f003 0301 	and.w	r3, r3, #1
 80030f4:	2b01      	cmp	r3, #1
 80030f6:	d10e      	bne.n	8003116 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	68db      	ldr	r3, [r3, #12]
 80030fe:	f003 0301 	and.w	r3, r3, #1
 8003102:	2b01      	cmp	r3, #1
 8003104:	d107      	bne.n	8003116 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	f06f 0201 	mvn.w	r2, #1
 800310e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003110:	6878      	ldr	r0, [r7, #4]
 8003112:	f000 fa39 	bl	8003588 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	691b      	ldr	r3, [r3, #16]
 800311c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003120:	2b80      	cmp	r3, #128	; 0x80
 8003122:	d10e      	bne.n	8003142 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	68db      	ldr	r3, [r3, #12]
 800312a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800312e:	2b80      	cmp	r3, #128	; 0x80
 8003130:	d107      	bne.n	8003142 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800313a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800313c:	6878      	ldr	r0, [r7, #4]
 800313e:	f001 f83b 	bl	80041b8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	691b      	ldr	r3, [r3, #16]
 8003148:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800314c:	2b40      	cmp	r3, #64	; 0x40
 800314e:	d10e      	bne.n	800316e <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	68db      	ldr	r3, [r3, #12]
 8003156:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800315a:	2b40      	cmp	r3, #64	; 0x40
 800315c:	d107      	bne.n	800316e <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003166:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003168:	6878      	ldr	r0, [r7, #4]
 800316a:	f000 fa3a 	bl	80035e2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	691b      	ldr	r3, [r3, #16]
 8003174:	f003 0320 	and.w	r3, r3, #32
 8003178:	2b20      	cmp	r3, #32
 800317a:	d10e      	bne.n	800319a <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	68db      	ldr	r3, [r3, #12]
 8003182:	f003 0320 	and.w	r3, r3, #32
 8003186:	2b20      	cmp	r3, #32
 8003188:	d107      	bne.n	800319a <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	f06f 0220 	mvn.w	r2, #32
 8003192:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003194:	6878      	ldr	r0, [r7, #4]
 8003196:	f001 f806 	bl	80041a6 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800319a:	bf00      	nop
 800319c:	3708      	adds	r7, #8
 800319e:	46bd      	mov	sp, r7
 80031a0:	bd80      	pop	{r7, pc}
	...

080031a4 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 80031a4:	b580      	push	{r7, lr}
 80031a6:	b084      	sub	sp, #16
 80031a8:	af00      	add	r7, sp, #0
 80031aa:	60f8      	str	r0, [r7, #12]
 80031ac:	60b9      	str	r1, [r7, #8]
 80031ae:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80031b6:	2b01      	cmp	r3, #1
 80031b8:	d101      	bne.n	80031be <HAL_TIM_OC_ConfigChannel+0x1a>
 80031ba:	2302      	movs	r3, #2
 80031bc:	e046      	b.n	800324c <HAL_TIM_OC_ConfigChannel+0xa8>
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	2201      	movs	r2, #1
 80031c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	2b0c      	cmp	r3, #12
 80031ca:	d839      	bhi.n	8003240 <HAL_TIM_OC_ConfigChannel+0x9c>
 80031cc:	a201      	add	r2, pc, #4	; (adr r2, 80031d4 <HAL_TIM_OC_ConfigChannel+0x30>)
 80031ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031d2:	bf00      	nop
 80031d4:	08003209 	.word	0x08003209
 80031d8:	08003241 	.word	0x08003241
 80031dc:	08003241 	.word	0x08003241
 80031e0:	08003241 	.word	0x08003241
 80031e4:	08003217 	.word	0x08003217
 80031e8:	08003241 	.word	0x08003241
 80031ec:	08003241 	.word	0x08003241
 80031f0:	08003241 	.word	0x08003241
 80031f4:	08003225 	.word	0x08003225
 80031f8:	08003241 	.word	0x08003241
 80031fc:	08003241 	.word	0x08003241
 8003200:	08003241 	.word	0x08003241
 8003204:	08003233 	.word	0x08003233
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	68b9      	ldr	r1, [r7, #8]
 800320e:	4618      	mov	r0, r3
 8003210:	f000 fb3c 	bl	800388c <TIM_OC1_SetConfig>
      break;
 8003214:	e015      	b.n	8003242 <HAL_TIM_OC_ConfigChannel+0x9e>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	68b9      	ldr	r1, [r7, #8]
 800321c:	4618      	mov	r0, r3
 800321e:	f000 fb9b 	bl	8003958 <TIM_OC2_SetConfig>
      break;
 8003222:	e00e      	b.n	8003242 <HAL_TIM_OC_ConfigChannel+0x9e>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	68b9      	ldr	r1, [r7, #8]
 800322a:	4618      	mov	r0, r3
 800322c:	f000 fbfe 	bl	8003a2c <TIM_OC3_SetConfig>
      break;
 8003230:	e007      	b.n	8003242 <HAL_TIM_OC_ConfigChannel+0x9e>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	68b9      	ldr	r1, [r7, #8]
 8003238:	4618      	mov	r0, r3
 800323a:	f000 fc61 	bl	8003b00 <TIM_OC4_SetConfig>
      break;
 800323e:	e000      	b.n	8003242 <HAL_TIM_OC_ConfigChannel+0x9e>
    }

    default:
      break;
 8003240:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	2200      	movs	r2, #0
 8003246:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800324a:	2300      	movs	r3, #0
}
 800324c:	4618      	mov	r0, r3
 800324e:	3710      	adds	r7, #16
 8003250:	46bd      	mov	sp, r7
 8003252:	bd80      	pop	{r7, pc}

08003254 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8003254:	b580      	push	{r7, lr}
 8003256:	b084      	sub	sp, #16
 8003258:	af00      	add	r7, sp, #0
 800325a:	60f8      	str	r0, [r7, #12]
 800325c:	60b9      	str	r1, [r7, #8]
 800325e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003266:	2b01      	cmp	r3, #1
 8003268:	d101      	bne.n	800326e <HAL_TIM_IC_ConfigChannel+0x1a>
 800326a:	2302      	movs	r3, #2
 800326c:	e082      	b.n	8003374 <HAL_TIM_IC_ConfigChannel+0x120>
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	2201      	movs	r2, #1
 8003272:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	2b00      	cmp	r3, #0
 800327a:	d11b      	bne.n	80032b4 <HAL_TIM_IC_ConfigChannel+0x60>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	6818      	ldr	r0, [r3, #0]
 8003280:	68bb      	ldr	r3, [r7, #8]
 8003282:	6819      	ldr	r1, [r3, #0]
 8003284:	68bb      	ldr	r3, [r7, #8]
 8003286:	685a      	ldr	r2, [r3, #4]
 8003288:	68bb      	ldr	r3, [r7, #8]
 800328a:	68db      	ldr	r3, [r3, #12]
 800328c:	f000 fd14 	bl	8003cb8 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	699a      	ldr	r2, [r3, #24]
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	f022 020c 	bic.w	r2, r2, #12
 800329e:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	6999      	ldr	r1, [r3, #24]
 80032a6:	68bb      	ldr	r3, [r7, #8]
 80032a8:	689a      	ldr	r2, [r3, #8]
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	430a      	orrs	r2, r1
 80032b0:	619a      	str	r2, [r3, #24]
 80032b2:	e05a      	b.n	800336a <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_2)
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	2b04      	cmp	r3, #4
 80032b8:	d11c      	bne.n	80032f4 <HAL_TIM_IC_ConfigChannel+0xa0>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	6818      	ldr	r0, [r3, #0]
 80032be:	68bb      	ldr	r3, [r7, #8]
 80032c0:	6819      	ldr	r1, [r3, #0]
 80032c2:	68bb      	ldr	r3, [r7, #8]
 80032c4:	685a      	ldr	r2, [r3, #4]
 80032c6:	68bb      	ldr	r3, [r7, #8]
 80032c8:	68db      	ldr	r3, [r3, #12]
 80032ca:	f000 fd7d 	bl	8003dc8 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	699a      	ldr	r2, [r3, #24]
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80032dc:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	6999      	ldr	r1, [r3, #24]
 80032e4:	68bb      	ldr	r3, [r7, #8]
 80032e6:	689b      	ldr	r3, [r3, #8]
 80032e8:	021a      	lsls	r2, r3, #8
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	430a      	orrs	r2, r1
 80032f0:	619a      	str	r2, [r3, #24]
 80032f2:	e03a      	b.n	800336a <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_3)
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	2b08      	cmp	r3, #8
 80032f8:	d11b      	bne.n	8003332 <HAL_TIM_IC_ConfigChannel+0xde>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	6818      	ldr	r0, [r3, #0]
 80032fe:	68bb      	ldr	r3, [r7, #8]
 8003300:	6819      	ldr	r1, [r3, #0]
 8003302:	68bb      	ldr	r3, [r7, #8]
 8003304:	685a      	ldr	r2, [r3, #4]
 8003306:	68bb      	ldr	r3, [r7, #8]
 8003308:	68db      	ldr	r3, [r3, #12]
 800330a:	f000 fdc8 	bl	8003e9e <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	69da      	ldr	r2, [r3, #28]
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	f022 020c 	bic.w	r2, r2, #12
 800331c:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	69d9      	ldr	r1, [r3, #28]
 8003324:	68bb      	ldr	r3, [r7, #8]
 8003326:	689a      	ldr	r2, [r3, #8]
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	430a      	orrs	r2, r1
 800332e:	61da      	str	r2, [r3, #28]
 8003330:	e01b      	b.n	800336a <HAL_TIM_IC_ConfigChannel+0x116>
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	6818      	ldr	r0, [r3, #0]
 8003336:	68bb      	ldr	r3, [r7, #8]
 8003338:	6819      	ldr	r1, [r3, #0]
 800333a:	68bb      	ldr	r3, [r7, #8]
 800333c:	685a      	ldr	r2, [r3, #4]
 800333e:	68bb      	ldr	r3, [r7, #8]
 8003340:	68db      	ldr	r3, [r3, #12]
 8003342:	f000 fde7 	bl	8003f14 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	69da      	ldr	r2, [r3, #28]
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8003354:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	69d9      	ldr	r1, [r3, #28]
 800335c:	68bb      	ldr	r3, [r7, #8]
 800335e:	689b      	ldr	r3, [r3, #8]
 8003360:	021a      	lsls	r2, r3, #8
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	430a      	orrs	r2, r1
 8003368:	61da      	str	r2, [r3, #28]
  }

  __HAL_UNLOCK(htim);
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	2200      	movs	r2, #0
 800336e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003372:	2300      	movs	r3, #0
}
 8003374:	4618      	mov	r0, r3
 8003376:	3710      	adds	r7, #16
 8003378:	46bd      	mov	sp, r7
 800337a:	bd80      	pop	{r7, pc}

0800337c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800337c:	b580      	push	{r7, lr}
 800337e:	b084      	sub	sp, #16
 8003380:	af00      	add	r7, sp, #0
 8003382:	6078      	str	r0, [r7, #4]
 8003384:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800338c:	2b01      	cmp	r3, #1
 800338e:	d101      	bne.n	8003394 <HAL_TIM_ConfigClockSource+0x18>
 8003390:	2302      	movs	r3, #2
 8003392:	e0b3      	b.n	80034fc <HAL_TIM_ConfigClockSource+0x180>
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	2201      	movs	r2, #1
 8003398:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	2202      	movs	r2, #2
 80033a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	689b      	ldr	r3, [r3, #8]
 80033aa:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80033b2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80033ba:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	68fa      	ldr	r2, [r7, #12]
 80033c2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80033c4:	683b      	ldr	r3, [r7, #0]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80033cc:	d03e      	beq.n	800344c <HAL_TIM_ConfigClockSource+0xd0>
 80033ce:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80033d2:	f200 8087 	bhi.w	80034e4 <HAL_TIM_ConfigClockSource+0x168>
 80033d6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80033da:	f000 8085 	beq.w	80034e8 <HAL_TIM_ConfigClockSource+0x16c>
 80033de:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80033e2:	d87f      	bhi.n	80034e4 <HAL_TIM_ConfigClockSource+0x168>
 80033e4:	2b70      	cmp	r3, #112	; 0x70
 80033e6:	d01a      	beq.n	800341e <HAL_TIM_ConfigClockSource+0xa2>
 80033e8:	2b70      	cmp	r3, #112	; 0x70
 80033ea:	d87b      	bhi.n	80034e4 <HAL_TIM_ConfigClockSource+0x168>
 80033ec:	2b60      	cmp	r3, #96	; 0x60
 80033ee:	d050      	beq.n	8003492 <HAL_TIM_ConfigClockSource+0x116>
 80033f0:	2b60      	cmp	r3, #96	; 0x60
 80033f2:	d877      	bhi.n	80034e4 <HAL_TIM_ConfigClockSource+0x168>
 80033f4:	2b50      	cmp	r3, #80	; 0x50
 80033f6:	d03c      	beq.n	8003472 <HAL_TIM_ConfigClockSource+0xf6>
 80033f8:	2b50      	cmp	r3, #80	; 0x50
 80033fa:	d873      	bhi.n	80034e4 <HAL_TIM_ConfigClockSource+0x168>
 80033fc:	2b40      	cmp	r3, #64	; 0x40
 80033fe:	d058      	beq.n	80034b2 <HAL_TIM_ConfigClockSource+0x136>
 8003400:	2b40      	cmp	r3, #64	; 0x40
 8003402:	d86f      	bhi.n	80034e4 <HAL_TIM_ConfigClockSource+0x168>
 8003404:	2b30      	cmp	r3, #48	; 0x30
 8003406:	d064      	beq.n	80034d2 <HAL_TIM_ConfigClockSource+0x156>
 8003408:	2b30      	cmp	r3, #48	; 0x30
 800340a:	d86b      	bhi.n	80034e4 <HAL_TIM_ConfigClockSource+0x168>
 800340c:	2b20      	cmp	r3, #32
 800340e:	d060      	beq.n	80034d2 <HAL_TIM_ConfigClockSource+0x156>
 8003410:	2b20      	cmp	r3, #32
 8003412:	d867      	bhi.n	80034e4 <HAL_TIM_ConfigClockSource+0x168>
 8003414:	2b00      	cmp	r3, #0
 8003416:	d05c      	beq.n	80034d2 <HAL_TIM_ConfigClockSource+0x156>
 8003418:	2b10      	cmp	r3, #16
 800341a:	d05a      	beq.n	80034d2 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 800341c:	e062      	b.n	80034e4 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	6818      	ldr	r0, [r3, #0]
 8003422:	683b      	ldr	r3, [r7, #0]
 8003424:	6899      	ldr	r1, [r3, #8]
 8003426:	683b      	ldr	r3, [r7, #0]
 8003428:	685a      	ldr	r2, [r3, #4]
 800342a:	683b      	ldr	r3, [r7, #0]
 800342c:	68db      	ldr	r3, [r3, #12]
 800342e:	f000 fdc7 	bl	8003fc0 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	689b      	ldr	r3, [r3, #8]
 8003438:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003440:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	68fa      	ldr	r2, [r7, #12]
 8003448:	609a      	str	r2, [r3, #8]
      break;
 800344a:	e04e      	b.n	80034ea <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	6818      	ldr	r0, [r3, #0]
 8003450:	683b      	ldr	r3, [r7, #0]
 8003452:	6899      	ldr	r1, [r3, #8]
 8003454:	683b      	ldr	r3, [r7, #0]
 8003456:	685a      	ldr	r2, [r3, #4]
 8003458:	683b      	ldr	r3, [r7, #0]
 800345a:	68db      	ldr	r3, [r3, #12]
 800345c:	f000 fdb0 	bl	8003fc0 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	689a      	ldr	r2, [r3, #8]
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800346e:	609a      	str	r2, [r3, #8]
      break;
 8003470:	e03b      	b.n	80034ea <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	6818      	ldr	r0, [r3, #0]
 8003476:	683b      	ldr	r3, [r7, #0]
 8003478:	6859      	ldr	r1, [r3, #4]
 800347a:	683b      	ldr	r3, [r7, #0]
 800347c:	68db      	ldr	r3, [r3, #12]
 800347e:	461a      	mov	r2, r3
 8003480:	f000 fc74 	bl	8003d6c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	2150      	movs	r1, #80	; 0x50
 800348a:	4618      	mov	r0, r3
 800348c:	f000 fd7e 	bl	8003f8c <TIM_ITRx_SetConfig>
      break;
 8003490:	e02b      	b.n	80034ea <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	6818      	ldr	r0, [r3, #0]
 8003496:	683b      	ldr	r3, [r7, #0]
 8003498:	6859      	ldr	r1, [r3, #4]
 800349a:	683b      	ldr	r3, [r7, #0]
 800349c:	68db      	ldr	r3, [r3, #12]
 800349e:	461a      	mov	r2, r3
 80034a0:	f000 fcce 	bl	8003e40 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	2160      	movs	r1, #96	; 0x60
 80034aa:	4618      	mov	r0, r3
 80034ac:	f000 fd6e 	bl	8003f8c <TIM_ITRx_SetConfig>
      break;
 80034b0:	e01b      	b.n	80034ea <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	6818      	ldr	r0, [r3, #0]
 80034b6:	683b      	ldr	r3, [r7, #0]
 80034b8:	6859      	ldr	r1, [r3, #4]
 80034ba:	683b      	ldr	r3, [r7, #0]
 80034bc:	68db      	ldr	r3, [r3, #12]
 80034be:	461a      	mov	r2, r3
 80034c0:	f000 fc54 	bl	8003d6c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	2140      	movs	r1, #64	; 0x40
 80034ca:	4618      	mov	r0, r3
 80034cc:	f000 fd5e 	bl	8003f8c <TIM_ITRx_SetConfig>
      break;
 80034d0:	e00b      	b.n	80034ea <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681a      	ldr	r2, [r3, #0]
 80034d6:	683b      	ldr	r3, [r7, #0]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	4619      	mov	r1, r3
 80034dc:	4610      	mov	r0, r2
 80034de:	f000 fd55 	bl	8003f8c <TIM_ITRx_SetConfig>
        break;
 80034e2:	e002      	b.n	80034ea <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80034e4:	bf00      	nop
 80034e6:	e000      	b.n	80034ea <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80034e8:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	2201      	movs	r2, #1
 80034ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	2200      	movs	r2, #0
 80034f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80034fa:	2300      	movs	r3, #0
}
 80034fc:	4618      	mov	r0, r3
 80034fe:	3710      	adds	r7, #16
 8003500:	46bd      	mov	sp, r7
 8003502:	bd80      	pop	{r7, pc}

08003504 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8003504:	b580      	push	{r7, lr}
 8003506:	b082      	sub	sp, #8
 8003508:	af00      	add	r7, sp, #0
 800350a:	6078      	str	r0, [r7, #4]
 800350c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003514:	2b01      	cmp	r3, #1
 8003516:	d101      	bne.n	800351c <HAL_TIM_SlaveConfigSynchro+0x18>
 8003518:	2302      	movs	r3, #2
 800351a:	e031      	b.n	8003580 <HAL_TIM_SlaveConfigSynchro+0x7c>
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	2201      	movs	r2, #1
 8003520:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	2202      	movs	r2, #2
 8003528:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 800352c:	6839      	ldr	r1, [r7, #0]
 800352e:	6878      	ldr	r0, [r7, #4]
 8003530:	f000 fb34 	bl	8003b9c <TIM_SlaveTimer_SetConfig>
 8003534:	4603      	mov	r3, r0
 8003536:	2b00      	cmp	r3, #0
 8003538:	d009      	beq.n	800354e <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	2201      	movs	r2, #1
 800353e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	2200      	movs	r2, #0
 8003546:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 800354a:	2301      	movs	r3, #1
 800354c:	e018      	b.n	8003580 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	68da      	ldr	r2, [r3, #12]
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800355c:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	68da      	ldr	r2, [r3, #12]
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800356c:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	2201      	movs	r2, #1
 8003572:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	2200      	movs	r2, #0
 800357a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800357e:	2300      	movs	r3, #0
}
 8003580:	4618      	mov	r0, r3
 8003582:	3708      	adds	r7, #8
 8003584:	46bd      	mov	sp, r7
 8003586:	bd80      	pop	{r7, pc}

08003588 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003588:	b480      	push	{r7}
 800358a:	b083      	sub	sp, #12
 800358c:	af00      	add	r7, sp, #0
 800358e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8003590:	bf00      	nop
 8003592:	370c      	adds	r7, #12
 8003594:	46bd      	mov	sp, r7
 8003596:	bc80      	pop	{r7}
 8003598:	4770      	bx	lr

0800359a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800359a:	b480      	push	{r7}
 800359c:	b083      	sub	sp, #12
 800359e:	af00      	add	r7, sp, #0
 80035a0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80035a2:	bf00      	nop
 80035a4:	370c      	adds	r7, #12
 80035a6:	46bd      	mov	sp, r7
 80035a8:	bc80      	pop	{r7}
 80035aa:	4770      	bx	lr

080035ac <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80035ac:	b480      	push	{r7}
 80035ae:	b083      	sub	sp, #12
 80035b0:	af00      	add	r7, sp, #0
 80035b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80035b4:	bf00      	nop
 80035b6:	370c      	adds	r7, #12
 80035b8:	46bd      	mov	sp, r7
 80035ba:	bc80      	pop	{r7}
 80035bc:	4770      	bx	lr

080035be <HAL_TIM_IC_CaptureHalfCpltCallback>:
  * @brief  Input Capture half complete callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 80035be:	b480      	push	{r7}
 80035c0:	b083      	sub	sp, #12
 80035c2:	af00      	add	r7, sp, #0
 80035c4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureHalfCpltCallback could be implemented in the user file
   */
}
 80035c6:	bf00      	nop
 80035c8:	370c      	adds	r7, #12
 80035ca:	46bd      	mov	sp, r7
 80035cc:	bc80      	pop	{r7}
 80035ce:	4770      	bx	lr

080035d0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80035d0:	b480      	push	{r7}
 80035d2:	b083      	sub	sp, #12
 80035d4:	af00      	add	r7, sp, #0
 80035d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80035d8:	bf00      	nop
 80035da:	370c      	adds	r7, #12
 80035dc:	46bd      	mov	sp, r7
 80035de:	bc80      	pop	{r7}
 80035e0:	4770      	bx	lr

080035e2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80035e2:	b480      	push	{r7}
 80035e4:	b083      	sub	sp, #12
 80035e6:	af00      	add	r7, sp, #0
 80035e8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80035ea:	bf00      	nop
 80035ec:	370c      	adds	r7, #12
 80035ee:	46bd      	mov	sp, r7
 80035f0:	bc80      	pop	{r7}
 80035f2:	4770      	bx	lr

080035f4 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 80035f4:	b480      	push	{r7}
 80035f6:	b083      	sub	sp, #12
 80035f8:	af00      	add	r7, sp, #0
 80035fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 80035fc:	bf00      	nop
 80035fe:	370c      	adds	r7, #12
 8003600:	46bd      	mov	sp, r7
 8003602:	bc80      	pop	{r7}
 8003604:	4770      	bx	lr

08003606 <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 8003606:	b580      	push	{r7, lr}
 8003608:	b084      	sub	sp, #16
 800360a:	af00      	add	r7, sp, #0
 800360c:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003612:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003618:	687a      	ldr	r2, [r7, #4]
 800361a:	429a      	cmp	r2, r3
 800361c:	d107      	bne.n	800362e <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	2201      	movs	r2, #1
 8003622:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	2201      	movs	r2, #1
 8003628:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800362c:	e02a      	b.n	8003684 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003632:	687a      	ldr	r2, [r7, #4]
 8003634:	429a      	cmp	r2, r3
 8003636:	d107      	bne.n	8003648 <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	2202      	movs	r2, #2
 800363c:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	2201      	movs	r2, #1
 8003642:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003646:	e01d      	b.n	8003684 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800364c:	687a      	ldr	r2, [r7, #4]
 800364e:	429a      	cmp	r2, r3
 8003650:	d107      	bne.n	8003662 <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	2204      	movs	r2, #4
 8003656:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	2201      	movs	r2, #1
 800365c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003660:	e010      	b.n	8003684 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003666:	687a      	ldr	r2, [r7, #4]
 8003668:	429a      	cmp	r2, r3
 800366a:	d107      	bne.n	800367c <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	2208      	movs	r2, #8
 8003670:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	2201      	movs	r2, #1
 8003676:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800367a:	e003      	b.n	8003684 <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	2201      	movs	r2, #1
 8003680:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 8003684:	68f8      	ldr	r0, [r7, #12]
 8003686:	f7ff ffb5 	bl	80035f4 <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	2200      	movs	r2, #0
 800368e:	771a      	strb	r2, [r3, #28]
}
 8003690:	bf00      	nop
 8003692:	3710      	adds	r7, #16
 8003694:	46bd      	mov	sp, r7
 8003696:	bd80      	pop	{r7, pc}

08003698 <TIM_DMACaptureCplt>:
  * @brief  TIM DMA Capture complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMACaptureCplt(DMA_HandleTypeDef *hdma)
{
 8003698:	b580      	push	{r7, lr}
 800369a:	b084      	sub	sp, #16
 800369c:	af00      	add	r7, sp, #0
 800369e:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036a4:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036aa:	687a      	ldr	r2, [r7, #4]
 80036ac:	429a      	cmp	r2, r3
 80036ae:	d10f      	bne.n	80036d0 <TIM_DMACaptureCplt+0x38>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	2201      	movs	r2, #1
 80036b4:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	699b      	ldr	r3, [r3, #24]
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d146      	bne.n	800374c <TIM_DMACaptureCplt+0xb4>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	2201      	movs	r2, #1
 80036c2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	2201      	movs	r2, #1
 80036ca:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80036ce:	e03d      	b.n	800374c <TIM_DMACaptureCplt+0xb4>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036d4:	687a      	ldr	r2, [r7, #4]
 80036d6:	429a      	cmp	r2, r3
 80036d8:	d10f      	bne.n	80036fa <TIM_DMACaptureCplt+0x62>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	2202      	movs	r2, #2
 80036de:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	699b      	ldr	r3, [r3, #24]
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d131      	bne.n	800374c <TIM_DMACaptureCplt+0xb4>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	2201      	movs	r2, #1
 80036ec:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	2201      	movs	r2, #1
 80036f4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80036f8:	e028      	b.n	800374c <TIM_DMACaptureCplt+0xb4>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036fe:	687a      	ldr	r2, [r7, #4]
 8003700:	429a      	cmp	r2, r3
 8003702:	d10f      	bne.n	8003724 <TIM_DMACaptureCplt+0x8c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	2204      	movs	r2, #4
 8003708:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	699b      	ldr	r3, [r3, #24]
 800370e:	2b00      	cmp	r3, #0
 8003710:	d11c      	bne.n	800374c <TIM_DMACaptureCplt+0xb4>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	2201      	movs	r2, #1
 8003716:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	2201      	movs	r2, #1
 800371e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003722:	e013      	b.n	800374c <TIM_DMACaptureCplt+0xb4>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003728:	687a      	ldr	r2, [r7, #4]
 800372a:	429a      	cmp	r2, r3
 800372c:	d10e      	bne.n	800374c <TIM_DMACaptureCplt+0xb4>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	2208      	movs	r2, #8
 8003732:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	699b      	ldr	r3, [r3, #24]
 8003738:	2b00      	cmp	r3, #0
 800373a:	d107      	bne.n	800374c <TIM_DMACaptureCplt+0xb4>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	2201      	movs	r2, #1
 8003740:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	2201      	movs	r2, #1
 8003748:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->IC_CaptureCallback(htim);
#else
  HAL_TIM_IC_CaptureCallback(htim);
 800374c:	68f8      	ldr	r0, [r7, #12]
 800374e:	f7ff ff2d 	bl	80035ac <HAL_TIM_IC_CaptureCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	2200      	movs	r2, #0
 8003756:	771a      	strb	r2, [r3, #28]
}
 8003758:	bf00      	nop
 800375a:	3710      	adds	r7, #16
 800375c:	46bd      	mov	sp, r7
 800375e:	bd80      	pop	{r7, pc}

08003760 <TIM_DMACaptureHalfCplt>:
  * @brief  TIM DMA Capture half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMACaptureHalfCplt(DMA_HandleTypeDef *hdma)
{
 8003760:	b580      	push	{r7, lr}
 8003762:	b084      	sub	sp, #16
 8003764:	af00      	add	r7, sp, #0
 8003766:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800376c:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003772:	687a      	ldr	r2, [r7, #4]
 8003774:	429a      	cmp	r2, r3
 8003776:	d103      	bne.n	8003780 <TIM_DMACaptureHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	2201      	movs	r2, #1
 800377c:	771a      	strb	r2, [r3, #28]
 800377e:	e019      	b.n	80037b4 <TIM_DMACaptureHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003784:	687a      	ldr	r2, [r7, #4]
 8003786:	429a      	cmp	r2, r3
 8003788:	d103      	bne.n	8003792 <TIM_DMACaptureHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	2202      	movs	r2, #2
 800378e:	771a      	strb	r2, [r3, #28]
 8003790:	e010      	b.n	80037b4 <TIM_DMACaptureHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003796:	687a      	ldr	r2, [r7, #4]
 8003798:	429a      	cmp	r2, r3
 800379a:	d103      	bne.n	80037a4 <TIM_DMACaptureHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	2204      	movs	r2, #4
 80037a0:	771a      	strb	r2, [r3, #28]
 80037a2:	e007      	b.n	80037b4 <TIM_DMACaptureHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037a8:	687a      	ldr	r2, [r7, #4]
 80037aa:	429a      	cmp	r2, r3
 80037ac:	d102      	bne.n	80037b4 <TIM_DMACaptureHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	2208      	movs	r2, #8
 80037b2:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->IC_CaptureHalfCpltCallback(htim);
#else
  HAL_TIM_IC_CaptureHalfCpltCallback(htim);
 80037b4:	68f8      	ldr	r0, [r7, #12]
 80037b6:	f7ff ff02 	bl	80035be <HAL_TIM_IC_CaptureHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	2200      	movs	r2, #0
 80037be:	771a      	strb	r2, [r3, #28]
}
 80037c0:	bf00      	nop
 80037c2:	3710      	adds	r7, #16
 80037c4:	46bd      	mov	sp, r7
 80037c6:	bd80      	pop	{r7, pc}

080037c8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80037c8:	b480      	push	{r7}
 80037ca:	b085      	sub	sp, #20
 80037cc:	af00      	add	r7, sp, #0
 80037ce:	6078      	str	r0, [r7, #4]
 80037d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	4a29      	ldr	r2, [pc, #164]	; (8003880 <TIM_Base_SetConfig+0xb8>)
 80037dc:	4293      	cmp	r3, r2
 80037de:	d00b      	beq.n	80037f8 <TIM_Base_SetConfig+0x30>
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80037e6:	d007      	beq.n	80037f8 <TIM_Base_SetConfig+0x30>
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	4a26      	ldr	r2, [pc, #152]	; (8003884 <TIM_Base_SetConfig+0xbc>)
 80037ec:	4293      	cmp	r3, r2
 80037ee:	d003      	beq.n	80037f8 <TIM_Base_SetConfig+0x30>
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	4a25      	ldr	r2, [pc, #148]	; (8003888 <TIM_Base_SetConfig+0xc0>)
 80037f4:	4293      	cmp	r3, r2
 80037f6:	d108      	bne.n	800380a <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80037fe:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003800:	683b      	ldr	r3, [r7, #0]
 8003802:	685b      	ldr	r3, [r3, #4]
 8003804:	68fa      	ldr	r2, [r7, #12]
 8003806:	4313      	orrs	r3, r2
 8003808:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	4a1c      	ldr	r2, [pc, #112]	; (8003880 <TIM_Base_SetConfig+0xb8>)
 800380e:	4293      	cmp	r3, r2
 8003810:	d00b      	beq.n	800382a <TIM_Base_SetConfig+0x62>
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003818:	d007      	beq.n	800382a <TIM_Base_SetConfig+0x62>
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	4a19      	ldr	r2, [pc, #100]	; (8003884 <TIM_Base_SetConfig+0xbc>)
 800381e:	4293      	cmp	r3, r2
 8003820:	d003      	beq.n	800382a <TIM_Base_SetConfig+0x62>
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	4a18      	ldr	r2, [pc, #96]	; (8003888 <TIM_Base_SetConfig+0xc0>)
 8003826:	4293      	cmp	r3, r2
 8003828:	d108      	bne.n	800383c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003830:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003832:	683b      	ldr	r3, [r7, #0]
 8003834:	68db      	ldr	r3, [r3, #12]
 8003836:	68fa      	ldr	r2, [r7, #12]
 8003838:	4313      	orrs	r3, r2
 800383a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003842:	683b      	ldr	r3, [r7, #0]
 8003844:	695b      	ldr	r3, [r3, #20]
 8003846:	4313      	orrs	r3, r2
 8003848:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	68fa      	ldr	r2, [r7, #12]
 800384e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003850:	683b      	ldr	r3, [r7, #0]
 8003852:	689a      	ldr	r2, [r3, #8]
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003858:	683b      	ldr	r3, [r7, #0]
 800385a:	681a      	ldr	r2, [r3, #0]
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	4a07      	ldr	r2, [pc, #28]	; (8003880 <TIM_Base_SetConfig+0xb8>)
 8003864:	4293      	cmp	r3, r2
 8003866:	d103      	bne.n	8003870 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003868:	683b      	ldr	r3, [r7, #0]
 800386a:	691a      	ldr	r2, [r3, #16]
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	2201      	movs	r2, #1
 8003874:	615a      	str	r2, [r3, #20]
}
 8003876:	bf00      	nop
 8003878:	3714      	adds	r7, #20
 800387a:	46bd      	mov	sp, r7
 800387c:	bc80      	pop	{r7}
 800387e:	4770      	bx	lr
 8003880:	40012c00 	.word	0x40012c00
 8003884:	40000400 	.word	0x40000400
 8003888:	40000800 	.word	0x40000800

0800388c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800388c:	b480      	push	{r7}
 800388e:	b087      	sub	sp, #28
 8003890:	af00      	add	r7, sp, #0
 8003892:	6078      	str	r0, [r7, #4]
 8003894:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	6a1b      	ldr	r3, [r3, #32]
 800389a:	f023 0201 	bic.w	r2, r3, #1
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	6a1b      	ldr	r3, [r3, #32]
 80038a6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	685b      	ldr	r3, [r3, #4]
 80038ac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	699b      	ldr	r3, [r3, #24]
 80038b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80038ba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	f023 0303 	bic.w	r3, r3, #3
 80038c2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80038c4:	683b      	ldr	r3, [r7, #0]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	68fa      	ldr	r2, [r7, #12]
 80038ca:	4313      	orrs	r3, r2
 80038cc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80038ce:	697b      	ldr	r3, [r7, #20]
 80038d0:	f023 0302 	bic.w	r3, r3, #2
 80038d4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80038d6:	683b      	ldr	r3, [r7, #0]
 80038d8:	689b      	ldr	r3, [r3, #8]
 80038da:	697a      	ldr	r2, [r7, #20]
 80038dc:	4313      	orrs	r3, r2
 80038de:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	4a1c      	ldr	r2, [pc, #112]	; (8003954 <TIM_OC1_SetConfig+0xc8>)
 80038e4:	4293      	cmp	r3, r2
 80038e6:	d10c      	bne.n	8003902 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80038e8:	697b      	ldr	r3, [r7, #20]
 80038ea:	f023 0308 	bic.w	r3, r3, #8
 80038ee:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80038f0:	683b      	ldr	r3, [r7, #0]
 80038f2:	68db      	ldr	r3, [r3, #12]
 80038f4:	697a      	ldr	r2, [r7, #20]
 80038f6:	4313      	orrs	r3, r2
 80038f8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80038fa:	697b      	ldr	r3, [r7, #20]
 80038fc:	f023 0304 	bic.w	r3, r3, #4
 8003900:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	4a13      	ldr	r2, [pc, #76]	; (8003954 <TIM_OC1_SetConfig+0xc8>)
 8003906:	4293      	cmp	r3, r2
 8003908:	d111      	bne.n	800392e <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800390a:	693b      	ldr	r3, [r7, #16]
 800390c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003910:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003912:	693b      	ldr	r3, [r7, #16]
 8003914:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003918:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800391a:	683b      	ldr	r3, [r7, #0]
 800391c:	695b      	ldr	r3, [r3, #20]
 800391e:	693a      	ldr	r2, [r7, #16]
 8003920:	4313      	orrs	r3, r2
 8003922:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003924:	683b      	ldr	r3, [r7, #0]
 8003926:	699b      	ldr	r3, [r3, #24]
 8003928:	693a      	ldr	r2, [r7, #16]
 800392a:	4313      	orrs	r3, r2
 800392c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	693a      	ldr	r2, [r7, #16]
 8003932:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	68fa      	ldr	r2, [r7, #12]
 8003938:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800393a:	683b      	ldr	r3, [r7, #0]
 800393c:	685a      	ldr	r2, [r3, #4]
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	697a      	ldr	r2, [r7, #20]
 8003946:	621a      	str	r2, [r3, #32]
}
 8003948:	bf00      	nop
 800394a:	371c      	adds	r7, #28
 800394c:	46bd      	mov	sp, r7
 800394e:	bc80      	pop	{r7}
 8003950:	4770      	bx	lr
 8003952:	bf00      	nop
 8003954:	40012c00 	.word	0x40012c00

08003958 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003958:	b480      	push	{r7}
 800395a:	b087      	sub	sp, #28
 800395c:	af00      	add	r7, sp, #0
 800395e:	6078      	str	r0, [r7, #4]
 8003960:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	6a1b      	ldr	r3, [r3, #32]
 8003966:	f023 0210 	bic.w	r2, r3, #16
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	6a1b      	ldr	r3, [r3, #32]
 8003972:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	685b      	ldr	r3, [r3, #4]
 8003978:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	699b      	ldr	r3, [r3, #24]
 800397e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003986:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800398e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003990:	683b      	ldr	r3, [r7, #0]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	021b      	lsls	r3, r3, #8
 8003996:	68fa      	ldr	r2, [r7, #12]
 8003998:	4313      	orrs	r3, r2
 800399a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800399c:	697b      	ldr	r3, [r7, #20]
 800399e:	f023 0320 	bic.w	r3, r3, #32
 80039a2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80039a4:	683b      	ldr	r3, [r7, #0]
 80039a6:	689b      	ldr	r3, [r3, #8]
 80039a8:	011b      	lsls	r3, r3, #4
 80039aa:	697a      	ldr	r2, [r7, #20]
 80039ac:	4313      	orrs	r3, r2
 80039ae:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	4a1d      	ldr	r2, [pc, #116]	; (8003a28 <TIM_OC2_SetConfig+0xd0>)
 80039b4:	4293      	cmp	r3, r2
 80039b6:	d10d      	bne.n	80039d4 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80039b8:	697b      	ldr	r3, [r7, #20]
 80039ba:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80039be:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80039c0:	683b      	ldr	r3, [r7, #0]
 80039c2:	68db      	ldr	r3, [r3, #12]
 80039c4:	011b      	lsls	r3, r3, #4
 80039c6:	697a      	ldr	r2, [r7, #20]
 80039c8:	4313      	orrs	r3, r2
 80039ca:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80039cc:	697b      	ldr	r3, [r7, #20]
 80039ce:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80039d2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	4a14      	ldr	r2, [pc, #80]	; (8003a28 <TIM_OC2_SetConfig+0xd0>)
 80039d8:	4293      	cmp	r3, r2
 80039da:	d113      	bne.n	8003a04 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80039dc:	693b      	ldr	r3, [r7, #16]
 80039de:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80039e2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80039e4:	693b      	ldr	r3, [r7, #16]
 80039e6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80039ea:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80039ec:	683b      	ldr	r3, [r7, #0]
 80039ee:	695b      	ldr	r3, [r3, #20]
 80039f0:	009b      	lsls	r3, r3, #2
 80039f2:	693a      	ldr	r2, [r7, #16]
 80039f4:	4313      	orrs	r3, r2
 80039f6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80039f8:	683b      	ldr	r3, [r7, #0]
 80039fa:	699b      	ldr	r3, [r3, #24]
 80039fc:	009b      	lsls	r3, r3, #2
 80039fe:	693a      	ldr	r2, [r7, #16]
 8003a00:	4313      	orrs	r3, r2
 8003a02:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	693a      	ldr	r2, [r7, #16]
 8003a08:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	68fa      	ldr	r2, [r7, #12]
 8003a0e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003a10:	683b      	ldr	r3, [r7, #0]
 8003a12:	685a      	ldr	r2, [r3, #4]
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	697a      	ldr	r2, [r7, #20]
 8003a1c:	621a      	str	r2, [r3, #32]
}
 8003a1e:	bf00      	nop
 8003a20:	371c      	adds	r7, #28
 8003a22:	46bd      	mov	sp, r7
 8003a24:	bc80      	pop	{r7}
 8003a26:	4770      	bx	lr
 8003a28:	40012c00 	.word	0x40012c00

08003a2c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003a2c:	b480      	push	{r7}
 8003a2e:	b087      	sub	sp, #28
 8003a30:	af00      	add	r7, sp, #0
 8003a32:	6078      	str	r0, [r7, #4]
 8003a34:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	6a1b      	ldr	r3, [r3, #32]
 8003a3a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	6a1b      	ldr	r3, [r3, #32]
 8003a46:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	685b      	ldr	r3, [r3, #4]
 8003a4c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	69db      	ldr	r3, [r3, #28]
 8003a52:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a5a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	f023 0303 	bic.w	r3, r3, #3
 8003a62:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003a64:	683b      	ldr	r3, [r7, #0]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	68fa      	ldr	r2, [r7, #12]
 8003a6a:	4313      	orrs	r3, r2
 8003a6c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003a6e:	697b      	ldr	r3, [r7, #20]
 8003a70:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003a74:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003a76:	683b      	ldr	r3, [r7, #0]
 8003a78:	689b      	ldr	r3, [r3, #8]
 8003a7a:	021b      	lsls	r3, r3, #8
 8003a7c:	697a      	ldr	r2, [r7, #20]
 8003a7e:	4313      	orrs	r3, r2
 8003a80:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	4a1d      	ldr	r2, [pc, #116]	; (8003afc <TIM_OC3_SetConfig+0xd0>)
 8003a86:	4293      	cmp	r3, r2
 8003a88:	d10d      	bne.n	8003aa6 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003a8a:	697b      	ldr	r3, [r7, #20]
 8003a8c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003a90:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003a92:	683b      	ldr	r3, [r7, #0]
 8003a94:	68db      	ldr	r3, [r3, #12]
 8003a96:	021b      	lsls	r3, r3, #8
 8003a98:	697a      	ldr	r2, [r7, #20]
 8003a9a:	4313      	orrs	r3, r2
 8003a9c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003a9e:	697b      	ldr	r3, [r7, #20]
 8003aa0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003aa4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	4a14      	ldr	r2, [pc, #80]	; (8003afc <TIM_OC3_SetConfig+0xd0>)
 8003aaa:	4293      	cmp	r3, r2
 8003aac:	d113      	bne.n	8003ad6 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003aae:	693b      	ldr	r3, [r7, #16]
 8003ab0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003ab4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003ab6:	693b      	ldr	r3, [r7, #16]
 8003ab8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003abc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003abe:	683b      	ldr	r3, [r7, #0]
 8003ac0:	695b      	ldr	r3, [r3, #20]
 8003ac2:	011b      	lsls	r3, r3, #4
 8003ac4:	693a      	ldr	r2, [r7, #16]
 8003ac6:	4313      	orrs	r3, r2
 8003ac8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003aca:	683b      	ldr	r3, [r7, #0]
 8003acc:	699b      	ldr	r3, [r3, #24]
 8003ace:	011b      	lsls	r3, r3, #4
 8003ad0:	693a      	ldr	r2, [r7, #16]
 8003ad2:	4313      	orrs	r3, r2
 8003ad4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	693a      	ldr	r2, [r7, #16]
 8003ada:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	68fa      	ldr	r2, [r7, #12]
 8003ae0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003ae2:	683b      	ldr	r3, [r7, #0]
 8003ae4:	685a      	ldr	r2, [r3, #4]
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	697a      	ldr	r2, [r7, #20]
 8003aee:	621a      	str	r2, [r3, #32]
}
 8003af0:	bf00      	nop
 8003af2:	371c      	adds	r7, #28
 8003af4:	46bd      	mov	sp, r7
 8003af6:	bc80      	pop	{r7}
 8003af8:	4770      	bx	lr
 8003afa:	bf00      	nop
 8003afc:	40012c00 	.word	0x40012c00

08003b00 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003b00:	b480      	push	{r7}
 8003b02:	b087      	sub	sp, #28
 8003b04:	af00      	add	r7, sp, #0
 8003b06:	6078      	str	r0, [r7, #4]
 8003b08:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	6a1b      	ldr	r3, [r3, #32]
 8003b0e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	6a1b      	ldr	r3, [r3, #32]
 8003b1a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	685b      	ldr	r3, [r3, #4]
 8003b20:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	69db      	ldr	r3, [r3, #28]
 8003b26:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003b2e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003b36:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003b38:	683b      	ldr	r3, [r7, #0]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	021b      	lsls	r3, r3, #8
 8003b3e:	68fa      	ldr	r2, [r7, #12]
 8003b40:	4313      	orrs	r3, r2
 8003b42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003b44:	693b      	ldr	r3, [r7, #16]
 8003b46:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003b4a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003b4c:	683b      	ldr	r3, [r7, #0]
 8003b4e:	689b      	ldr	r3, [r3, #8]
 8003b50:	031b      	lsls	r3, r3, #12
 8003b52:	693a      	ldr	r2, [r7, #16]
 8003b54:	4313      	orrs	r3, r2
 8003b56:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	4a0f      	ldr	r2, [pc, #60]	; (8003b98 <TIM_OC4_SetConfig+0x98>)
 8003b5c:	4293      	cmp	r3, r2
 8003b5e:	d109      	bne.n	8003b74 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003b60:	697b      	ldr	r3, [r7, #20]
 8003b62:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003b66:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003b68:	683b      	ldr	r3, [r7, #0]
 8003b6a:	695b      	ldr	r3, [r3, #20]
 8003b6c:	019b      	lsls	r3, r3, #6
 8003b6e:	697a      	ldr	r2, [r7, #20]
 8003b70:	4313      	orrs	r3, r2
 8003b72:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	697a      	ldr	r2, [r7, #20]
 8003b78:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	68fa      	ldr	r2, [r7, #12]
 8003b7e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003b80:	683b      	ldr	r3, [r7, #0]
 8003b82:	685a      	ldr	r2, [r3, #4]
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	693a      	ldr	r2, [r7, #16]
 8003b8c:	621a      	str	r2, [r3, #32]
}
 8003b8e:	bf00      	nop
 8003b90:	371c      	adds	r7, #28
 8003b92:	46bd      	mov	sp, r7
 8003b94:	bc80      	pop	{r7}
 8003b96:	4770      	bx	lr
 8003b98:	40012c00 	.word	0x40012c00

08003b9c <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8003b9c:	b580      	push	{r7, lr}
 8003b9e:	b086      	sub	sp, #24
 8003ba0:	af00      	add	r7, sp, #0
 8003ba2:	6078      	str	r0, [r7, #4]
 8003ba4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	689b      	ldr	r3, [r3, #8]
 8003bac:	617b      	str	r3, [r7, #20]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003bae:	697b      	ldr	r3, [r7, #20]
 8003bb0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003bb4:	617b      	str	r3, [r7, #20]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8003bb6:	683b      	ldr	r3, [r7, #0]
 8003bb8:	685b      	ldr	r3, [r3, #4]
 8003bba:	697a      	ldr	r2, [r7, #20]
 8003bbc:	4313      	orrs	r3, r2
 8003bbe:	617b      	str	r3, [r7, #20]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8003bc0:	697b      	ldr	r3, [r7, #20]
 8003bc2:	f023 0307 	bic.w	r3, r3, #7
 8003bc6:	617b      	str	r3, [r7, #20]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8003bc8:	683b      	ldr	r3, [r7, #0]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	697a      	ldr	r2, [r7, #20]
 8003bce:	4313      	orrs	r3, r2
 8003bd0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	697a      	ldr	r2, [r7, #20]
 8003bd8:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8003bda:	683b      	ldr	r3, [r7, #0]
 8003bdc:	685b      	ldr	r3, [r3, #4]
 8003bde:	2b70      	cmp	r3, #112	; 0x70
 8003be0:	d01a      	beq.n	8003c18 <TIM_SlaveTimer_SetConfig+0x7c>
 8003be2:	2b70      	cmp	r3, #112	; 0x70
 8003be4:	d860      	bhi.n	8003ca8 <TIM_SlaveTimer_SetConfig+0x10c>
 8003be6:	2b60      	cmp	r3, #96	; 0x60
 8003be8:	d054      	beq.n	8003c94 <TIM_SlaveTimer_SetConfig+0xf8>
 8003bea:	2b60      	cmp	r3, #96	; 0x60
 8003bec:	d85c      	bhi.n	8003ca8 <TIM_SlaveTimer_SetConfig+0x10c>
 8003bee:	2b50      	cmp	r3, #80	; 0x50
 8003bf0:	d046      	beq.n	8003c80 <TIM_SlaveTimer_SetConfig+0xe4>
 8003bf2:	2b50      	cmp	r3, #80	; 0x50
 8003bf4:	d858      	bhi.n	8003ca8 <TIM_SlaveTimer_SetConfig+0x10c>
 8003bf6:	2b40      	cmp	r3, #64	; 0x40
 8003bf8:	d019      	beq.n	8003c2e <TIM_SlaveTimer_SetConfig+0x92>
 8003bfa:	2b40      	cmp	r3, #64	; 0x40
 8003bfc:	d854      	bhi.n	8003ca8 <TIM_SlaveTimer_SetConfig+0x10c>
 8003bfe:	2b30      	cmp	r3, #48	; 0x30
 8003c00:	d054      	beq.n	8003cac <TIM_SlaveTimer_SetConfig+0x110>
 8003c02:	2b30      	cmp	r3, #48	; 0x30
 8003c04:	d850      	bhi.n	8003ca8 <TIM_SlaveTimer_SetConfig+0x10c>
 8003c06:	2b20      	cmp	r3, #32
 8003c08:	d050      	beq.n	8003cac <TIM_SlaveTimer_SetConfig+0x110>
 8003c0a:	2b20      	cmp	r3, #32
 8003c0c:	d84c      	bhi.n	8003ca8 <TIM_SlaveTimer_SetConfig+0x10c>
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d04c      	beq.n	8003cac <TIM_SlaveTimer_SetConfig+0x110>
 8003c12:	2b10      	cmp	r3, #16
 8003c14:	d04a      	beq.n	8003cac <TIM_SlaveTimer_SetConfig+0x110>
        assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
        break;
      }

    default:
      break;
 8003c16:	e047      	b.n	8003ca8 <TIM_SlaveTimer_SetConfig+0x10c>
      TIM_ETR_SetConfig(htim->Instance,
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	6818      	ldr	r0, [r3, #0]
 8003c1c:	683b      	ldr	r3, [r7, #0]
 8003c1e:	68d9      	ldr	r1, [r3, #12]
 8003c20:	683b      	ldr	r3, [r7, #0]
 8003c22:	689a      	ldr	r2, [r3, #8]
 8003c24:	683b      	ldr	r3, [r7, #0]
 8003c26:	691b      	ldr	r3, [r3, #16]
 8003c28:	f000 f9ca 	bl	8003fc0 <TIM_ETR_SetConfig>
      break;
 8003c2c:	e03f      	b.n	8003cae <TIM_SlaveTimer_SetConfig+0x112>
      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 8003c2e:	683b      	ldr	r3, [r7, #0]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	2b05      	cmp	r3, #5
 8003c34:	d101      	bne.n	8003c3a <TIM_SlaveTimer_SetConfig+0x9e>
        return HAL_ERROR;
 8003c36:	2301      	movs	r3, #1
 8003c38:	e03a      	b.n	8003cb0 <TIM_SlaveTimer_SetConfig+0x114>
      tmpccer = htim->Instance->CCER;
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	6a1b      	ldr	r3, [r3, #32]
 8003c40:	613b      	str	r3, [r7, #16]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	6a1a      	ldr	r2, [r3, #32]
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	f022 0201 	bic.w	r2, r2, #1
 8003c50:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	699b      	ldr	r3, [r3, #24]
 8003c58:	60fb      	str	r3, [r7, #12]
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003c60:	60fb      	str	r3, [r7, #12]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8003c62:	683b      	ldr	r3, [r7, #0]
 8003c64:	691b      	ldr	r3, [r3, #16]
 8003c66:	011b      	lsls	r3, r3, #4
 8003c68:	68fa      	ldr	r2, [r7, #12]
 8003c6a:	4313      	orrs	r3, r2
 8003c6c:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCMR1 = tmpccmr1;
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	68fa      	ldr	r2, [r7, #12]
 8003c74:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	693a      	ldr	r2, [r7, #16]
 8003c7c:	621a      	str	r2, [r3, #32]
      break;
 8003c7e:	e016      	b.n	8003cae <TIM_SlaveTimer_SetConfig+0x112>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	6818      	ldr	r0, [r3, #0]
 8003c84:	683b      	ldr	r3, [r7, #0]
 8003c86:	6899      	ldr	r1, [r3, #8]
 8003c88:	683b      	ldr	r3, [r7, #0]
 8003c8a:	691b      	ldr	r3, [r3, #16]
 8003c8c:	461a      	mov	r2, r3
 8003c8e:	f000 f86d 	bl	8003d6c <TIM_TI1_ConfigInputStage>
      break;
 8003c92:	e00c      	b.n	8003cae <TIM_SlaveTimer_SetConfig+0x112>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	6818      	ldr	r0, [r3, #0]
 8003c98:	683b      	ldr	r3, [r7, #0]
 8003c9a:	6899      	ldr	r1, [r3, #8]
 8003c9c:	683b      	ldr	r3, [r7, #0]
 8003c9e:	691b      	ldr	r3, [r3, #16]
 8003ca0:	461a      	mov	r2, r3
 8003ca2:	f000 f8cd 	bl	8003e40 <TIM_TI2_ConfigInputStage>
      break;
 8003ca6:	e002      	b.n	8003cae <TIM_SlaveTimer_SetConfig+0x112>
      break;
 8003ca8:	bf00      	nop
 8003caa:	e000      	b.n	8003cae <TIM_SlaveTimer_SetConfig+0x112>
        break;
 8003cac:	bf00      	nop
  }
  return HAL_OK;
 8003cae:	2300      	movs	r3, #0
}
 8003cb0:	4618      	mov	r0, r3
 8003cb2:	3718      	adds	r7, #24
 8003cb4:	46bd      	mov	sp, r7
 8003cb6:	bd80      	pop	{r7, pc}

08003cb8 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8003cb8:	b480      	push	{r7}
 8003cba:	b087      	sub	sp, #28
 8003cbc:	af00      	add	r7, sp, #0
 8003cbe:	60f8      	str	r0, [r7, #12]
 8003cc0:	60b9      	str	r1, [r7, #8]
 8003cc2:	607a      	str	r2, [r7, #4]
 8003cc4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	6a1b      	ldr	r3, [r3, #32]
 8003cca:	f023 0201 	bic.w	r2, r3, #1
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	699b      	ldr	r3, [r3, #24]
 8003cd6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	6a1b      	ldr	r3, [r3, #32]
 8003cdc:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	4a1f      	ldr	r2, [pc, #124]	; (8003d60 <TIM_TI1_SetConfig+0xa8>)
 8003ce2:	4293      	cmp	r3, r2
 8003ce4:	d00b      	beq.n	8003cfe <TIM_TI1_SetConfig+0x46>
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003cec:	d007      	beq.n	8003cfe <TIM_TI1_SetConfig+0x46>
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	4a1c      	ldr	r2, [pc, #112]	; (8003d64 <TIM_TI1_SetConfig+0xac>)
 8003cf2:	4293      	cmp	r3, r2
 8003cf4:	d003      	beq.n	8003cfe <TIM_TI1_SetConfig+0x46>
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	4a1b      	ldr	r2, [pc, #108]	; (8003d68 <TIM_TI1_SetConfig+0xb0>)
 8003cfa:	4293      	cmp	r3, r2
 8003cfc:	d101      	bne.n	8003d02 <TIM_TI1_SetConfig+0x4a>
 8003cfe:	2301      	movs	r3, #1
 8003d00:	e000      	b.n	8003d04 <TIM_TI1_SetConfig+0x4c>
 8003d02:	2300      	movs	r3, #0
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d008      	beq.n	8003d1a <TIM_TI1_SetConfig+0x62>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8003d08:	697b      	ldr	r3, [r7, #20]
 8003d0a:	f023 0303 	bic.w	r3, r3, #3
 8003d0e:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8003d10:	697a      	ldr	r2, [r7, #20]
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	4313      	orrs	r3, r2
 8003d16:	617b      	str	r3, [r7, #20]
 8003d18:	e003      	b.n	8003d22 <TIM_TI1_SetConfig+0x6a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8003d1a:	697b      	ldr	r3, [r7, #20]
 8003d1c:	f043 0301 	orr.w	r3, r3, #1
 8003d20:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003d22:	697b      	ldr	r3, [r7, #20]
 8003d24:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003d28:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8003d2a:	683b      	ldr	r3, [r7, #0]
 8003d2c:	011b      	lsls	r3, r3, #4
 8003d2e:	b2db      	uxtb	r3, r3
 8003d30:	697a      	ldr	r2, [r7, #20]
 8003d32:	4313      	orrs	r3, r2
 8003d34:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003d36:	693b      	ldr	r3, [r7, #16]
 8003d38:	f023 030a 	bic.w	r3, r3, #10
 8003d3c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8003d3e:	68bb      	ldr	r3, [r7, #8]
 8003d40:	f003 030a 	and.w	r3, r3, #10
 8003d44:	693a      	ldr	r2, [r7, #16]
 8003d46:	4313      	orrs	r3, r2
 8003d48:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	697a      	ldr	r2, [r7, #20]
 8003d4e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	693a      	ldr	r2, [r7, #16]
 8003d54:	621a      	str	r2, [r3, #32]
}
 8003d56:	bf00      	nop
 8003d58:	371c      	adds	r7, #28
 8003d5a:	46bd      	mov	sp, r7
 8003d5c:	bc80      	pop	{r7}
 8003d5e:	4770      	bx	lr
 8003d60:	40012c00 	.word	0x40012c00
 8003d64:	40000400 	.word	0x40000400
 8003d68:	40000800 	.word	0x40000800

08003d6c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003d6c:	b480      	push	{r7}
 8003d6e:	b087      	sub	sp, #28
 8003d70:	af00      	add	r7, sp, #0
 8003d72:	60f8      	str	r0, [r7, #12]
 8003d74:	60b9      	str	r1, [r7, #8]
 8003d76:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	6a1b      	ldr	r3, [r3, #32]
 8003d7c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	6a1b      	ldr	r3, [r3, #32]
 8003d82:	f023 0201 	bic.w	r2, r3, #1
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	699b      	ldr	r3, [r3, #24]
 8003d8e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003d90:	693b      	ldr	r3, [r7, #16]
 8003d92:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003d96:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	011b      	lsls	r3, r3, #4
 8003d9c:	693a      	ldr	r2, [r7, #16]
 8003d9e:	4313      	orrs	r3, r2
 8003da0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003da2:	697b      	ldr	r3, [r7, #20]
 8003da4:	f023 030a 	bic.w	r3, r3, #10
 8003da8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003daa:	697a      	ldr	r2, [r7, #20]
 8003dac:	68bb      	ldr	r3, [r7, #8]
 8003dae:	4313      	orrs	r3, r2
 8003db0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	693a      	ldr	r2, [r7, #16]
 8003db6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	697a      	ldr	r2, [r7, #20]
 8003dbc:	621a      	str	r2, [r3, #32]
}
 8003dbe:	bf00      	nop
 8003dc0:	371c      	adds	r7, #28
 8003dc2:	46bd      	mov	sp, r7
 8003dc4:	bc80      	pop	{r7}
 8003dc6:	4770      	bx	lr

08003dc8 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8003dc8:	b480      	push	{r7}
 8003dca:	b087      	sub	sp, #28
 8003dcc:	af00      	add	r7, sp, #0
 8003dce:	60f8      	str	r0, [r7, #12]
 8003dd0:	60b9      	str	r1, [r7, #8]
 8003dd2:	607a      	str	r2, [r7, #4]
 8003dd4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	6a1b      	ldr	r3, [r3, #32]
 8003dda:	f023 0210 	bic.w	r2, r3, #16
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	699b      	ldr	r3, [r3, #24]
 8003de6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	6a1b      	ldr	r3, [r3, #32]
 8003dec:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8003dee:	697b      	ldr	r3, [r7, #20]
 8003df0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003df4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	021b      	lsls	r3, r3, #8
 8003dfa:	697a      	ldr	r2, [r7, #20]
 8003dfc:	4313      	orrs	r3, r2
 8003dfe:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003e00:	697b      	ldr	r3, [r7, #20]
 8003e02:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003e06:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8003e08:	683b      	ldr	r3, [r7, #0]
 8003e0a:	031b      	lsls	r3, r3, #12
 8003e0c:	b29b      	uxth	r3, r3
 8003e0e:	697a      	ldr	r2, [r7, #20]
 8003e10:	4313      	orrs	r3, r2
 8003e12:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003e14:	693b      	ldr	r3, [r7, #16]
 8003e16:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003e1a:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8003e1c:	68bb      	ldr	r3, [r7, #8]
 8003e1e:	011b      	lsls	r3, r3, #4
 8003e20:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8003e24:	693a      	ldr	r2, [r7, #16]
 8003e26:	4313      	orrs	r3, r2
 8003e28:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	697a      	ldr	r2, [r7, #20]
 8003e2e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	693a      	ldr	r2, [r7, #16]
 8003e34:	621a      	str	r2, [r3, #32]
}
 8003e36:	bf00      	nop
 8003e38:	371c      	adds	r7, #28
 8003e3a:	46bd      	mov	sp, r7
 8003e3c:	bc80      	pop	{r7}
 8003e3e:	4770      	bx	lr

08003e40 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003e40:	b480      	push	{r7}
 8003e42:	b087      	sub	sp, #28
 8003e44:	af00      	add	r7, sp, #0
 8003e46:	60f8      	str	r0, [r7, #12]
 8003e48:	60b9      	str	r1, [r7, #8]
 8003e4a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	6a1b      	ldr	r3, [r3, #32]
 8003e50:	f023 0210 	bic.w	r2, r3, #16
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	699b      	ldr	r3, [r3, #24]
 8003e5c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	6a1b      	ldr	r3, [r3, #32]
 8003e62:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003e64:	697b      	ldr	r3, [r7, #20]
 8003e66:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003e6a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	031b      	lsls	r3, r3, #12
 8003e70:	697a      	ldr	r2, [r7, #20]
 8003e72:	4313      	orrs	r3, r2
 8003e74:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003e76:	693b      	ldr	r3, [r7, #16]
 8003e78:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003e7c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003e7e:	68bb      	ldr	r3, [r7, #8]
 8003e80:	011b      	lsls	r3, r3, #4
 8003e82:	693a      	ldr	r2, [r7, #16]
 8003e84:	4313      	orrs	r3, r2
 8003e86:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	697a      	ldr	r2, [r7, #20]
 8003e8c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	693a      	ldr	r2, [r7, #16]
 8003e92:	621a      	str	r2, [r3, #32]
}
 8003e94:	bf00      	nop
 8003e96:	371c      	adds	r7, #28
 8003e98:	46bd      	mov	sp, r7
 8003e9a:	bc80      	pop	{r7}
 8003e9c:	4770      	bx	lr

08003e9e <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8003e9e:	b480      	push	{r7}
 8003ea0:	b087      	sub	sp, #28
 8003ea2:	af00      	add	r7, sp, #0
 8003ea4:	60f8      	str	r0, [r7, #12]
 8003ea6:	60b9      	str	r1, [r7, #8]
 8003ea8:	607a      	str	r2, [r7, #4]
 8003eaa:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	6a1b      	ldr	r3, [r3, #32]
 8003eb0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	69db      	ldr	r3, [r3, #28]
 8003ebc:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	6a1b      	ldr	r3, [r3, #32]
 8003ec2:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8003ec4:	697b      	ldr	r3, [r7, #20]
 8003ec6:	f023 0303 	bic.w	r3, r3, #3
 8003eca:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8003ecc:	697a      	ldr	r2, [r7, #20]
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	4313      	orrs	r3, r2
 8003ed2:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8003ed4:	697b      	ldr	r3, [r7, #20]
 8003ed6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003eda:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8003edc:	683b      	ldr	r3, [r7, #0]
 8003ede:	011b      	lsls	r3, r3, #4
 8003ee0:	b2db      	uxtb	r3, r3
 8003ee2:	697a      	ldr	r2, [r7, #20]
 8003ee4:	4313      	orrs	r3, r2
 8003ee6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P);
 8003ee8:	693b      	ldr	r3, [r7, #16]
 8003eea:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003eee:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & TIM_CCER_CC3P);
 8003ef0:	68bb      	ldr	r3, [r7, #8]
 8003ef2:	021b      	lsls	r3, r3, #8
 8003ef4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003ef8:	693a      	ldr	r2, [r7, #16]
 8003efa:	4313      	orrs	r3, r2
 8003efc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	697a      	ldr	r2, [r7, #20]
 8003f02:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	693a      	ldr	r2, [r7, #16]
 8003f08:	621a      	str	r2, [r3, #32]
}
 8003f0a:	bf00      	nop
 8003f0c:	371c      	adds	r7, #28
 8003f0e:	46bd      	mov	sp, r7
 8003f10:	bc80      	pop	{r7}
 8003f12:	4770      	bx	lr

08003f14 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8003f14:	b480      	push	{r7}
 8003f16:	b087      	sub	sp, #28
 8003f18:	af00      	add	r7, sp, #0
 8003f1a:	60f8      	str	r0, [r7, #12]
 8003f1c:	60b9      	str	r1, [r7, #8]
 8003f1e:	607a      	str	r2, [r7, #4]
 8003f20:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	6a1b      	ldr	r3, [r3, #32]
 8003f26:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	69db      	ldr	r3, [r3, #28]
 8003f32:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	6a1b      	ldr	r3, [r3, #32]
 8003f38:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8003f3a:	697b      	ldr	r3, [r7, #20]
 8003f3c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003f40:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	021b      	lsls	r3, r3, #8
 8003f46:	697a      	ldr	r2, [r7, #20]
 8003f48:	4313      	orrs	r3, r2
 8003f4a:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8003f4c:	697b      	ldr	r3, [r7, #20]
 8003f4e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003f52:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8003f54:	683b      	ldr	r3, [r7, #0]
 8003f56:	031b      	lsls	r3, r3, #12
 8003f58:	b29b      	uxth	r3, r3
 8003f5a:	697a      	ldr	r2, [r7, #20]
 8003f5c:	4313      	orrs	r3, r2
 8003f5e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P);
 8003f60:	693b      	ldr	r3, [r7, #16]
 8003f62:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003f66:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & TIM_CCER_CC4P);
 8003f68:	68bb      	ldr	r3, [r7, #8]
 8003f6a:	031b      	lsls	r3, r3, #12
 8003f6c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003f70:	693a      	ldr	r2, [r7, #16]
 8003f72:	4313      	orrs	r3, r2
 8003f74:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	697a      	ldr	r2, [r7, #20]
 8003f7a:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	693a      	ldr	r2, [r7, #16]
 8003f80:	621a      	str	r2, [r3, #32]
}
 8003f82:	bf00      	nop
 8003f84:	371c      	adds	r7, #28
 8003f86:	46bd      	mov	sp, r7
 8003f88:	bc80      	pop	{r7}
 8003f8a:	4770      	bx	lr

08003f8c <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003f8c:	b480      	push	{r7}
 8003f8e:	b085      	sub	sp, #20
 8003f90:	af00      	add	r7, sp, #0
 8003f92:	6078      	str	r0, [r7, #4]
 8003f94:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	689b      	ldr	r3, [r3, #8]
 8003f9a:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003fa2:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003fa4:	683a      	ldr	r2, [r7, #0]
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	4313      	orrs	r3, r2
 8003faa:	f043 0307 	orr.w	r3, r3, #7
 8003fae:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	68fa      	ldr	r2, [r7, #12]
 8003fb4:	609a      	str	r2, [r3, #8]
}
 8003fb6:	bf00      	nop
 8003fb8:	3714      	adds	r7, #20
 8003fba:	46bd      	mov	sp, r7
 8003fbc:	bc80      	pop	{r7}
 8003fbe:	4770      	bx	lr

08003fc0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003fc0:	b480      	push	{r7}
 8003fc2:	b087      	sub	sp, #28
 8003fc4:	af00      	add	r7, sp, #0
 8003fc6:	60f8      	str	r0, [r7, #12]
 8003fc8:	60b9      	str	r1, [r7, #8]
 8003fca:	607a      	str	r2, [r7, #4]
 8003fcc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	689b      	ldr	r3, [r3, #8]
 8003fd2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003fd4:	697b      	ldr	r3, [r7, #20]
 8003fd6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003fda:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003fdc:	683b      	ldr	r3, [r7, #0]
 8003fde:	021a      	lsls	r2, r3, #8
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	431a      	orrs	r2, r3
 8003fe4:	68bb      	ldr	r3, [r7, #8]
 8003fe6:	4313      	orrs	r3, r2
 8003fe8:	697a      	ldr	r2, [r7, #20]
 8003fea:	4313      	orrs	r3, r2
 8003fec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	697a      	ldr	r2, [r7, #20]
 8003ff2:	609a      	str	r2, [r3, #8]
}
 8003ff4:	bf00      	nop
 8003ff6:	371c      	adds	r7, #28
 8003ff8:	46bd      	mov	sp, r7
 8003ffa:	bc80      	pop	{r7}
 8003ffc:	4770      	bx	lr

08003ffe <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003ffe:	b480      	push	{r7}
 8004000:	b087      	sub	sp, #28
 8004002:	af00      	add	r7, sp, #0
 8004004:	60f8      	str	r0, [r7, #12]
 8004006:	60b9      	str	r1, [r7, #8]
 8004008:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800400a:	68bb      	ldr	r3, [r7, #8]
 800400c:	f003 031f 	and.w	r3, r3, #31
 8004010:	2201      	movs	r2, #1
 8004012:	fa02 f303 	lsl.w	r3, r2, r3
 8004016:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	6a1a      	ldr	r2, [r3, #32]
 800401c:	697b      	ldr	r3, [r7, #20]
 800401e:	43db      	mvns	r3, r3
 8004020:	401a      	ands	r2, r3
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	6a1a      	ldr	r2, [r3, #32]
 800402a:	68bb      	ldr	r3, [r7, #8]
 800402c:	f003 031f 	and.w	r3, r3, #31
 8004030:	6879      	ldr	r1, [r7, #4]
 8004032:	fa01 f303 	lsl.w	r3, r1, r3
 8004036:	431a      	orrs	r2, r3
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	621a      	str	r2, [r3, #32]
}
 800403c:	bf00      	nop
 800403e:	371c      	adds	r7, #28
 8004040:	46bd      	mov	sp, r7
 8004042:	bc80      	pop	{r7}
 8004044:	4770      	bx	lr
	...

08004048 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004048:	b480      	push	{r7}
 800404a:	b085      	sub	sp, #20
 800404c:	af00      	add	r7, sp, #0
 800404e:	6078      	str	r0, [r7, #4]
 8004050:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004058:	2b01      	cmp	r3, #1
 800405a:	d101      	bne.n	8004060 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800405c:	2302      	movs	r3, #2
 800405e:	e046      	b.n	80040ee <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	2201      	movs	r2, #1
 8004064:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	2202      	movs	r2, #2
 800406c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	685b      	ldr	r3, [r3, #4]
 8004076:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	689b      	ldr	r3, [r3, #8]
 800407e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004086:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004088:	683b      	ldr	r3, [r7, #0]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	68fa      	ldr	r2, [r7, #12]
 800408e:	4313      	orrs	r3, r2
 8004090:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	68fa      	ldr	r2, [r7, #12]
 8004098:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	4a16      	ldr	r2, [pc, #88]	; (80040f8 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80040a0:	4293      	cmp	r3, r2
 80040a2:	d00e      	beq.n	80040c2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80040ac:	d009      	beq.n	80040c2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	4a12      	ldr	r2, [pc, #72]	; (80040fc <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80040b4:	4293      	cmp	r3, r2
 80040b6:	d004      	beq.n	80040c2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	4a10      	ldr	r2, [pc, #64]	; (8004100 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80040be:	4293      	cmp	r3, r2
 80040c0:	d10c      	bne.n	80040dc <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80040c2:	68bb      	ldr	r3, [r7, #8]
 80040c4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80040c8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80040ca:	683b      	ldr	r3, [r7, #0]
 80040cc:	685b      	ldr	r3, [r3, #4]
 80040ce:	68ba      	ldr	r2, [r7, #8]
 80040d0:	4313      	orrs	r3, r2
 80040d2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	68ba      	ldr	r2, [r7, #8]
 80040da:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	2201      	movs	r2, #1
 80040e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	2200      	movs	r2, #0
 80040e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80040ec:	2300      	movs	r3, #0
}
 80040ee:	4618      	mov	r0, r3
 80040f0:	3714      	adds	r7, #20
 80040f2:	46bd      	mov	sp, r7
 80040f4:	bc80      	pop	{r7}
 80040f6:	4770      	bx	lr
 80040f8:	40012c00 	.word	0x40012c00
 80040fc:	40000400 	.word	0x40000400
 8004100:	40000800 	.word	0x40000800

08004104 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004104:	b480      	push	{r7}
 8004106:	b085      	sub	sp, #20
 8004108:	af00      	add	r7, sp, #0
 800410a:	6078      	str	r0, [r7, #4]
 800410c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800410e:	2300      	movs	r3, #0
 8004110:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004118:	2b01      	cmp	r3, #1
 800411a:	d101      	bne.n	8004120 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800411c:	2302      	movs	r3, #2
 800411e:	e03d      	b.n	800419c <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	2201      	movs	r2, #1
 8004124:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800412e:	683b      	ldr	r3, [r7, #0]
 8004130:	68db      	ldr	r3, [r3, #12]
 8004132:	4313      	orrs	r3, r2
 8004134:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800413c:	683b      	ldr	r3, [r7, #0]
 800413e:	689b      	ldr	r3, [r3, #8]
 8004140:	4313      	orrs	r3, r2
 8004142:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800414a:	683b      	ldr	r3, [r7, #0]
 800414c:	685b      	ldr	r3, [r3, #4]
 800414e:	4313      	orrs	r3, r2
 8004150:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8004158:	683b      	ldr	r3, [r7, #0]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	4313      	orrs	r3, r2
 800415e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004166:	683b      	ldr	r3, [r7, #0]
 8004168:	691b      	ldr	r3, [r3, #16]
 800416a:	4313      	orrs	r3, r2
 800416c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8004174:	683b      	ldr	r3, [r7, #0]
 8004176:	695b      	ldr	r3, [r3, #20]
 8004178:	4313      	orrs	r3, r2
 800417a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8004182:	683b      	ldr	r3, [r7, #0]
 8004184:	69db      	ldr	r3, [r3, #28]
 8004186:	4313      	orrs	r3, r2
 8004188:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	68fa      	ldr	r2, [r7, #12]
 8004190:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	2200      	movs	r2, #0
 8004196:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800419a:	2300      	movs	r3, #0
}
 800419c:	4618      	mov	r0, r3
 800419e:	3714      	adds	r7, #20
 80041a0:	46bd      	mov	sp, r7
 80041a2:	bc80      	pop	{r7}
 80041a4:	4770      	bx	lr

080041a6 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80041a6:	b480      	push	{r7}
 80041a8:	b083      	sub	sp, #12
 80041aa:	af00      	add	r7, sp, #0
 80041ac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80041ae:	bf00      	nop
 80041b0:	370c      	adds	r7, #12
 80041b2:	46bd      	mov	sp, r7
 80041b4:	bc80      	pop	{r7}
 80041b6:	4770      	bx	lr

080041b8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80041b8:	b480      	push	{r7}
 80041ba:	b083      	sub	sp, #12
 80041bc:	af00      	add	r7, sp, #0
 80041be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80041c0:	bf00      	nop
 80041c2:	370c      	adds	r7, #12
 80041c4:	46bd      	mov	sp, r7
 80041c6:	bc80      	pop	{r7}
 80041c8:	4770      	bx	lr

080041ca <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80041ca:	b580      	push	{r7, lr}
 80041cc:	b082      	sub	sp, #8
 80041ce:	af00      	add	r7, sp, #0
 80041d0:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d101      	bne.n	80041dc <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80041d8:	2301      	movs	r3, #1
 80041da:	e03f      	b.n	800425c <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80041e2:	b2db      	uxtb	r3, r3
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d106      	bne.n	80041f6 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	2200      	movs	r2, #0
 80041ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80041f0:	6878      	ldr	r0, [r7, #4]
 80041f2:	f7fc fd1f 	bl	8000c34 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	2224      	movs	r2, #36	; 0x24
 80041fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	68da      	ldr	r2, [r3, #12]
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800420c:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800420e:	6878      	ldr	r0, [r7, #4]
 8004210:	f000 f904 	bl	800441c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	691a      	ldr	r2, [r3, #16]
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004222:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	695a      	ldr	r2, [r3, #20]
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004232:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	68da      	ldr	r2, [r3, #12]
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004242:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	2200      	movs	r2, #0
 8004248:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	2220      	movs	r2, #32
 800424e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	2220      	movs	r2, #32
 8004256:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800425a:	2300      	movs	r3, #0
}
 800425c:	4618      	mov	r0, r3
 800425e:	3708      	adds	r7, #8
 8004260:	46bd      	mov	sp, r7
 8004262:	bd80      	pop	{r7, pc}

08004264 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004264:	b580      	push	{r7, lr}
 8004266:	b08a      	sub	sp, #40	; 0x28
 8004268:	af02      	add	r7, sp, #8
 800426a:	60f8      	str	r0, [r7, #12]
 800426c:	60b9      	str	r1, [r7, #8]
 800426e:	603b      	str	r3, [r7, #0]
 8004270:	4613      	mov	r3, r2
 8004272:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004274:	2300      	movs	r3, #0
 8004276:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800427e:	b2db      	uxtb	r3, r3
 8004280:	2b20      	cmp	r3, #32
 8004282:	d17c      	bne.n	800437e <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004284:	68bb      	ldr	r3, [r7, #8]
 8004286:	2b00      	cmp	r3, #0
 8004288:	d002      	beq.n	8004290 <HAL_UART_Transmit+0x2c>
 800428a:	88fb      	ldrh	r3, [r7, #6]
 800428c:	2b00      	cmp	r3, #0
 800428e:	d101      	bne.n	8004294 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004290:	2301      	movs	r3, #1
 8004292:	e075      	b.n	8004380 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800429a:	2b01      	cmp	r3, #1
 800429c:	d101      	bne.n	80042a2 <HAL_UART_Transmit+0x3e>
 800429e:	2302      	movs	r3, #2
 80042a0:	e06e      	b.n	8004380 <HAL_UART_Transmit+0x11c>
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	2201      	movs	r2, #1
 80042a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	2200      	movs	r2, #0
 80042ae:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	2221      	movs	r2, #33	; 0x21
 80042b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80042b8:	f7fc ff9c 	bl	80011f4 <HAL_GetTick>
 80042bc:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	88fa      	ldrh	r2, [r7, #6]
 80042c2:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	88fa      	ldrh	r2, [r7, #6]
 80042c8:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	689b      	ldr	r3, [r3, #8]
 80042ce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80042d2:	d108      	bne.n	80042e6 <HAL_UART_Transmit+0x82>
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	691b      	ldr	r3, [r3, #16]
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d104      	bne.n	80042e6 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80042dc:	2300      	movs	r3, #0
 80042de:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80042e0:	68bb      	ldr	r3, [r7, #8]
 80042e2:	61bb      	str	r3, [r7, #24]
 80042e4:	e003      	b.n	80042ee <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80042e6:	68bb      	ldr	r3, [r7, #8]
 80042e8:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80042ea:	2300      	movs	r3, #0
 80042ec:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	2200      	movs	r2, #0
 80042f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80042f6:	e02a      	b.n	800434e <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80042f8:	683b      	ldr	r3, [r7, #0]
 80042fa:	9300      	str	r3, [sp, #0]
 80042fc:	697b      	ldr	r3, [r7, #20]
 80042fe:	2200      	movs	r2, #0
 8004300:	2180      	movs	r1, #128	; 0x80
 8004302:	68f8      	ldr	r0, [r7, #12]
 8004304:	f000 f840 	bl	8004388 <UART_WaitOnFlagUntilTimeout>
 8004308:	4603      	mov	r3, r0
 800430a:	2b00      	cmp	r3, #0
 800430c:	d001      	beq.n	8004312 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800430e:	2303      	movs	r3, #3
 8004310:	e036      	b.n	8004380 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8004312:	69fb      	ldr	r3, [r7, #28]
 8004314:	2b00      	cmp	r3, #0
 8004316:	d10b      	bne.n	8004330 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004318:	69bb      	ldr	r3, [r7, #24]
 800431a:	881b      	ldrh	r3, [r3, #0]
 800431c:	461a      	mov	r2, r3
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004326:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004328:	69bb      	ldr	r3, [r7, #24]
 800432a:	3302      	adds	r3, #2
 800432c:	61bb      	str	r3, [r7, #24]
 800432e:	e007      	b.n	8004340 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004330:	69fb      	ldr	r3, [r7, #28]
 8004332:	781a      	ldrb	r2, [r3, #0]
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800433a:	69fb      	ldr	r3, [r7, #28]
 800433c:	3301      	adds	r3, #1
 800433e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004344:	b29b      	uxth	r3, r3
 8004346:	3b01      	subs	r3, #1
 8004348:	b29a      	uxth	r2, r3
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004352:	b29b      	uxth	r3, r3
 8004354:	2b00      	cmp	r3, #0
 8004356:	d1cf      	bne.n	80042f8 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004358:	683b      	ldr	r3, [r7, #0]
 800435a:	9300      	str	r3, [sp, #0]
 800435c:	697b      	ldr	r3, [r7, #20]
 800435e:	2200      	movs	r2, #0
 8004360:	2140      	movs	r1, #64	; 0x40
 8004362:	68f8      	ldr	r0, [r7, #12]
 8004364:	f000 f810 	bl	8004388 <UART_WaitOnFlagUntilTimeout>
 8004368:	4603      	mov	r3, r0
 800436a:	2b00      	cmp	r3, #0
 800436c:	d001      	beq.n	8004372 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800436e:	2303      	movs	r3, #3
 8004370:	e006      	b.n	8004380 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	2220      	movs	r2, #32
 8004376:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800437a:	2300      	movs	r3, #0
 800437c:	e000      	b.n	8004380 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800437e:	2302      	movs	r3, #2
  }
}
 8004380:	4618      	mov	r0, r3
 8004382:	3720      	adds	r7, #32
 8004384:	46bd      	mov	sp, r7
 8004386:	bd80      	pop	{r7, pc}

08004388 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8004388:	b580      	push	{r7, lr}
 800438a:	b084      	sub	sp, #16
 800438c:	af00      	add	r7, sp, #0
 800438e:	60f8      	str	r0, [r7, #12]
 8004390:	60b9      	str	r1, [r7, #8]
 8004392:	603b      	str	r3, [r7, #0]
 8004394:	4613      	mov	r3, r2
 8004396:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004398:	e02c      	b.n	80043f4 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800439a:	69bb      	ldr	r3, [r7, #24]
 800439c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80043a0:	d028      	beq.n	80043f4 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80043a2:	69bb      	ldr	r3, [r7, #24]
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d007      	beq.n	80043b8 <UART_WaitOnFlagUntilTimeout+0x30>
 80043a8:	f7fc ff24 	bl	80011f4 <HAL_GetTick>
 80043ac:	4602      	mov	r2, r0
 80043ae:	683b      	ldr	r3, [r7, #0]
 80043b0:	1ad3      	subs	r3, r2, r3
 80043b2:	69ba      	ldr	r2, [r7, #24]
 80043b4:	429a      	cmp	r2, r3
 80043b6:	d21d      	bcs.n	80043f4 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	68da      	ldr	r2, [r3, #12]
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80043c6:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	695a      	ldr	r2, [r3, #20]
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	f022 0201 	bic.w	r2, r2, #1
 80043d6:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	2220      	movs	r2, #32
 80043dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	2220      	movs	r2, #32
 80043e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	2200      	movs	r2, #0
 80043ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80043f0:	2303      	movs	r3, #3
 80043f2:	e00f      	b.n	8004414 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	681a      	ldr	r2, [r3, #0]
 80043fa:	68bb      	ldr	r3, [r7, #8]
 80043fc:	4013      	ands	r3, r2
 80043fe:	68ba      	ldr	r2, [r7, #8]
 8004400:	429a      	cmp	r2, r3
 8004402:	bf0c      	ite	eq
 8004404:	2301      	moveq	r3, #1
 8004406:	2300      	movne	r3, #0
 8004408:	b2db      	uxtb	r3, r3
 800440a:	461a      	mov	r2, r3
 800440c:	79fb      	ldrb	r3, [r7, #7]
 800440e:	429a      	cmp	r2, r3
 8004410:	d0c3      	beq.n	800439a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004412:	2300      	movs	r3, #0
}
 8004414:	4618      	mov	r0, r3
 8004416:	3710      	adds	r7, #16
 8004418:	46bd      	mov	sp, r7
 800441a:	bd80      	pop	{r7, pc}

0800441c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800441c:	b580      	push	{r7, lr}
 800441e:	b084      	sub	sp, #16
 8004420:	af00      	add	r7, sp, #0
 8004422:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	691b      	ldr	r3, [r3, #16]
 800442a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	68da      	ldr	r2, [r3, #12]
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	430a      	orrs	r2, r1
 8004438:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	689a      	ldr	r2, [r3, #8]
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	691b      	ldr	r3, [r3, #16]
 8004442:	431a      	orrs	r2, r3
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	695b      	ldr	r3, [r3, #20]
 8004448:	4313      	orrs	r3, r2
 800444a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	68db      	ldr	r3, [r3, #12]
 8004452:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8004456:	f023 030c 	bic.w	r3, r3, #12
 800445a:	687a      	ldr	r2, [r7, #4]
 800445c:	6812      	ldr	r2, [r2, #0]
 800445e:	68b9      	ldr	r1, [r7, #8]
 8004460:	430b      	orrs	r3, r1
 8004462:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	695b      	ldr	r3, [r3, #20]
 800446a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	699a      	ldr	r2, [r3, #24]
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	430a      	orrs	r2, r1
 8004478:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	4a2c      	ldr	r2, [pc, #176]	; (8004530 <UART_SetConfig+0x114>)
 8004480:	4293      	cmp	r3, r2
 8004482:	d103      	bne.n	800448c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8004484:	f7fd ffda 	bl	800243c <HAL_RCC_GetPCLK2Freq>
 8004488:	60f8      	str	r0, [r7, #12]
 800448a:	e002      	b.n	8004492 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800448c:	f7fd ffc2 	bl	8002414 <HAL_RCC_GetPCLK1Freq>
 8004490:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004492:	68fa      	ldr	r2, [r7, #12]
 8004494:	4613      	mov	r3, r2
 8004496:	009b      	lsls	r3, r3, #2
 8004498:	4413      	add	r3, r2
 800449a:	009a      	lsls	r2, r3, #2
 800449c:	441a      	add	r2, r3
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	685b      	ldr	r3, [r3, #4]
 80044a2:	009b      	lsls	r3, r3, #2
 80044a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80044a8:	4a22      	ldr	r2, [pc, #136]	; (8004534 <UART_SetConfig+0x118>)
 80044aa:	fba2 2303 	umull	r2, r3, r2, r3
 80044ae:	095b      	lsrs	r3, r3, #5
 80044b0:	0119      	lsls	r1, r3, #4
 80044b2:	68fa      	ldr	r2, [r7, #12]
 80044b4:	4613      	mov	r3, r2
 80044b6:	009b      	lsls	r3, r3, #2
 80044b8:	4413      	add	r3, r2
 80044ba:	009a      	lsls	r2, r3, #2
 80044bc:	441a      	add	r2, r3
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	685b      	ldr	r3, [r3, #4]
 80044c2:	009b      	lsls	r3, r3, #2
 80044c4:	fbb2 f2f3 	udiv	r2, r2, r3
 80044c8:	4b1a      	ldr	r3, [pc, #104]	; (8004534 <UART_SetConfig+0x118>)
 80044ca:	fba3 0302 	umull	r0, r3, r3, r2
 80044ce:	095b      	lsrs	r3, r3, #5
 80044d0:	2064      	movs	r0, #100	; 0x64
 80044d2:	fb00 f303 	mul.w	r3, r0, r3
 80044d6:	1ad3      	subs	r3, r2, r3
 80044d8:	011b      	lsls	r3, r3, #4
 80044da:	3332      	adds	r3, #50	; 0x32
 80044dc:	4a15      	ldr	r2, [pc, #84]	; (8004534 <UART_SetConfig+0x118>)
 80044de:	fba2 2303 	umull	r2, r3, r2, r3
 80044e2:	095b      	lsrs	r3, r3, #5
 80044e4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80044e8:	4419      	add	r1, r3
 80044ea:	68fa      	ldr	r2, [r7, #12]
 80044ec:	4613      	mov	r3, r2
 80044ee:	009b      	lsls	r3, r3, #2
 80044f0:	4413      	add	r3, r2
 80044f2:	009a      	lsls	r2, r3, #2
 80044f4:	441a      	add	r2, r3
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	685b      	ldr	r3, [r3, #4]
 80044fa:	009b      	lsls	r3, r3, #2
 80044fc:	fbb2 f2f3 	udiv	r2, r2, r3
 8004500:	4b0c      	ldr	r3, [pc, #48]	; (8004534 <UART_SetConfig+0x118>)
 8004502:	fba3 0302 	umull	r0, r3, r3, r2
 8004506:	095b      	lsrs	r3, r3, #5
 8004508:	2064      	movs	r0, #100	; 0x64
 800450a:	fb00 f303 	mul.w	r3, r0, r3
 800450e:	1ad3      	subs	r3, r2, r3
 8004510:	011b      	lsls	r3, r3, #4
 8004512:	3332      	adds	r3, #50	; 0x32
 8004514:	4a07      	ldr	r2, [pc, #28]	; (8004534 <UART_SetConfig+0x118>)
 8004516:	fba2 2303 	umull	r2, r3, r2, r3
 800451a:	095b      	lsrs	r3, r3, #5
 800451c:	f003 020f 	and.w	r2, r3, #15
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	440a      	add	r2, r1
 8004526:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8004528:	bf00      	nop
 800452a:	3710      	adds	r7, #16
 800452c:	46bd      	mov	sp, r7
 800452e:	bd80      	pop	{r7, pc}
 8004530:	40013800 	.word	0x40013800
 8004534:	51eb851f 	.word	0x51eb851f

08004538 <__errno>:
 8004538:	4b01      	ldr	r3, [pc, #4]	; (8004540 <__errno+0x8>)
 800453a:	6818      	ldr	r0, [r3, #0]
 800453c:	4770      	bx	lr
 800453e:	bf00      	nop
 8004540:	2000000c 	.word	0x2000000c

08004544 <__libc_init_array>:
 8004544:	b570      	push	{r4, r5, r6, lr}
 8004546:	2600      	movs	r6, #0
 8004548:	4d0c      	ldr	r5, [pc, #48]	; (800457c <__libc_init_array+0x38>)
 800454a:	4c0d      	ldr	r4, [pc, #52]	; (8004580 <__libc_init_array+0x3c>)
 800454c:	1b64      	subs	r4, r4, r5
 800454e:	10a4      	asrs	r4, r4, #2
 8004550:	42a6      	cmp	r6, r4
 8004552:	d109      	bne.n	8004568 <__libc_init_array+0x24>
 8004554:	f000 fc5c 	bl	8004e10 <_init>
 8004558:	2600      	movs	r6, #0
 800455a:	4d0a      	ldr	r5, [pc, #40]	; (8004584 <__libc_init_array+0x40>)
 800455c:	4c0a      	ldr	r4, [pc, #40]	; (8004588 <__libc_init_array+0x44>)
 800455e:	1b64      	subs	r4, r4, r5
 8004560:	10a4      	asrs	r4, r4, #2
 8004562:	42a6      	cmp	r6, r4
 8004564:	d105      	bne.n	8004572 <__libc_init_array+0x2e>
 8004566:	bd70      	pop	{r4, r5, r6, pc}
 8004568:	f855 3b04 	ldr.w	r3, [r5], #4
 800456c:	4798      	blx	r3
 800456e:	3601      	adds	r6, #1
 8004570:	e7ee      	b.n	8004550 <__libc_init_array+0xc>
 8004572:	f855 3b04 	ldr.w	r3, [r5], #4
 8004576:	4798      	blx	r3
 8004578:	3601      	adds	r6, #1
 800457a:	e7f2      	b.n	8004562 <__libc_init_array+0x1e>
 800457c:	08004eac 	.word	0x08004eac
 8004580:	08004eac 	.word	0x08004eac
 8004584:	08004eac 	.word	0x08004eac
 8004588:	08004eb0 	.word	0x08004eb0

0800458c <memset>:
 800458c:	4603      	mov	r3, r0
 800458e:	4402      	add	r2, r0
 8004590:	4293      	cmp	r3, r2
 8004592:	d100      	bne.n	8004596 <memset+0xa>
 8004594:	4770      	bx	lr
 8004596:	f803 1b01 	strb.w	r1, [r3], #1
 800459a:	e7f9      	b.n	8004590 <memset+0x4>

0800459c <siprintf>:
 800459c:	b40e      	push	{r1, r2, r3}
 800459e:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80045a2:	b500      	push	{lr}
 80045a4:	b09c      	sub	sp, #112	; 0x70
 80045a6:	ab1d      	add	r3, sp, #116	; 0x74
 80045a8:	9002      	str	r0, [sp, #8]
 80045aa:	9006      	str	r0, [sp, #24]
 80045ac:	9107      	str	r1, [sp, #28]
 80045ae:	9104      	str	r1, [sp, #16]
 80045b0:	4808      	ldr	r0, [pc, #32]	; (80045d4 <siprintf+0x38>)
 80045b2:	4909      	ldr	r1, [pc, #36]	; (80045d8 <siprintf+0x3c>)
 80045b4:	f853 2b04 	ldr.w	r2, [r3], #4
 80045b8:	9105      	str	r1, [sp, #20]
 80045ba:	6800      	ldr	r0, [r0, #0]
 80045bc:	a902      	add	r1, sp, #8
 80045be:	9301      	str	r3, [sp, #4]
 80045c0:	f000 f868 	bl	8004694 <_svfiprintf_r>
 80045c4:	2200      	movs	r2, #0
 80045c6:	9b02      	ldr	r3, [sp, #8]
 80045c8:	701a      	strb	r2, [r3, #0]
 80045ca:	b01c      	add	sp, #112	; 0x70
 80045cc:	f85d eb04 	ldr.w	lr, [sp], #4
 80045d0:	b003      	add	sp, #12
 80045d2:	4770      	bx	lr
 80045d4:	2000000c 	.word	0x2000000c
 80045d8:	ffff0208 	.word	0xffff0208

080045dc <__ssputs_r>:
 80045dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80045e0:	688e      	ldr	r6, [r1, #8]
 80045e2:	4682      	mov	sl, r0
 80045e4:	429e      	cmp	r6, r3
 80045e6:	460c      	mov	r4, r1
 80045e8:	4690      	mov	r8, r2
 80045ea:	461f      	mov	r7, r3
 80045ec:	d838      	bhi.n	8004660 <__ssputs_r+0x84>
 80045ee:	898a      	ldrh	r2, [r1, #12]
 80045f0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80045f4:	d032      	beq.n	800465c <__ssputs_r+0x80>
 80045f6:	6825      	ldr	r5, [r4, #0]
 80045f8:	6909      	ldr	r1, [r1, #16]
 80045fa:	3301      	adds	r3, #1
 80045fc:	eba5 0901 	sub.w	r9, r5, r1
 8004600:	6965      	ldr	r5, [r4, #20]
 8004602:	444b      	add	r3, r9
 8004604:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004608:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800460c:	106d      	asrs	r5, r5, #1
 800460e:	429d      	cmp	r5, r3
 8004610:	bf38      	it	cc
 8004612:	461d      	movcc	r5, r3
 8004614:	0553      	lsls	r3, r2, #21
 8004616:	d531      	bpl.n	800467c <__ssputs_r+0xa0>
 8004618:	4629      	mov	r1, r5
 800461a:	f000 fb53 	bl	8004cc4 <_malloc_r>
 800461e:	4606      	mov	r6, r0
 8004620:	b950      	cbnz	r0, 8004638 <__ssputs_r+0x5c>
 8004622:	230c      	movs	r3, #12
 8004624:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004628:	f8ca 3000 	str.w	r3, [sl]
 800462c:	89a3      	ldrh	r3, [r4, #12]
 800462e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004632:	81a3      	strh	r3, [r4, #12]
 8004634:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004638:	464a      	mov	r2, r9
 800463a:	6921      	ldr	r1, [r4, #16]
 800463c:	f000 face 	bl	8004bdc <memcpy>
 8004640:	89a3      	ldrh	r3, [r4, #12]
 8004642:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004646:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800464a:	81a3      	strh	r3, [r4, #12]
 800464c:	6126      	str	r6, [r4, #16]
 800464e:	444e      	add	r6, r9
 8004650:	6026      	str	r6, [r4, #0]
 8004652:	463e      	mov	r6, r7
 8004654:	6165      	str	r5, [r4, #20]
 8004656:	eba5 0509 	sub.w	r5, r5, r9
 800465a:	60a5      	str	r5, [r4, #8]
 800465c:	42be      	cmp	r6, r7
 800465e:	d900      	bls.n	8004662 <__ssputs_r+0x86>
 8004660:	463e      	mov	r6, r7
 8004662:	4632      	mov	r2, r6
 8004664:	4641      	mov	r1, r8
 8004666:	6820      	ldr	r0, [r4, #0]
 8004668:	f000 fac6 	bl	8004bf8 <memmove>
 800466c:	68a3      	ldr	r3, [r4, #8]
 800466e:	6822      	ldr	r2, [r4, #0]
 8004670:	1b9b      	subs	r3, r3, r6
 8004672:	4432      	add	r2, r6
 8004674:	2000      	movs	r0, #0
 8004676:	60a3      	str	r3, [r4, #8]
 8004678:	6022      	str	r2, [r4, #0]
 800467a:	e7db      	b.n	8004634 <__ssputs_r+0x58>
 800467c:	462a      	mov	r2, r5
 800467e:	f000 fb7b 	bl	8004d78 <_realloc_r>
 8004682:	4606      	mov	r6, r0
 8004684:	2800      	cmp	r0, #0
 8004686:	d1e1      	bne.n	800464c <__ssputs_r+0x70>
 8004688:	4650      	mov	r0, sl
 800468a:	6921      	ldr	r1, [r4, #16]
 800468c:	f000 face 	bl	8004c2c <_free_r>
 8004690:	e7c7      	b.n	8004622 <__ssputs_r+0x46>
	...

08004694 <_svfiprintf_r>:
 8004694:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004698:	4698      	mov	r8, r3
 800469a:	898b      	ldrh	r3, [r1, #12]
 800469c:	4607      	mov	r7, r0
 800469e:	061b      	lsls	r3, r3, #24
 80046a0:	460d      	mov	r5, r1
 80046a2:	4614      	mov	r4, r2
 80046a4:	b09d      	sub	sp, #116	; 0x74
 80046a6:	d50e      	bpl.n	80046c6 <_svfiprintf_r+0x32>
 80046a8:	690b      	ldr	r3, [r1, #16]
 80046aa:	b963      	cbnz	r3, 80046c6 <_svfiprintf_r+0x32>
 80046ac:	2140      	movs	r1, #64	; 0x40
 80046ae:	f000 fb09 	bl	8004cc4 <_malloc_r>
 80046b2:	6028      	str	r0, [r5, #0]
 80046b4:	6128      	str	r0, [r5, #16]
 80046b6:	b920      	cbnz	r0, 80046c2 <_svfiprintf_r+0x2e>
 80046b8:	230c      	movs	r3, #12
 80046ba:	603b      	str	r3, [r7, #0]
 80046bc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80046c0:	e0d1      	b.n	8004866 <_svfiprintf_r+0x1d2>
 80046c2:	2340      	movs	r3, #64	; 0x40
 80046c4:	616b      	str	r3, [r5, #20]
 80046c6:	2300      	movs	r3, #0
 80046c8:	9309      	str	r3, [sp, #36]	; 0x24
 80046ca:	2320      	movs	r3, #32
 80046cc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80046d0:	2330      	movs	r3, #48	; 0x30
 80046d2:	f04f 0901 	mov.w	r9, #1
 80046d6:	f8cd 800c 	str.w	r8, [sp, #12]
 80046da:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8004880 <_svfiprintf_r+0x1ec>
 80046de:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80046e2:	4623      	mov	r3, r4
 80046e4:	469a      	mov	sl, r3
 80046e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80046ea:	b10a      	cbz	r2, 80046f0 <_svfiprintf_r+0x5c>
 80046ec:	2a25      	cmp	r2, #37	; 0x25
 80046ee:	d1f9      	bne.n	80046e4 <_svfiprintf_r+0x50>
 80046f0:	ebba 0b04 	subs.w	fp, sl, r4
 80046f4:	d00b      	beq.n	800470e <_svfiprintf_r+0x7a>
 80046f6:	465b      	mov	r3, fp
 80046f8:	4622      	mov	r2, r4
 80046fa:	4629      	mov	r1, r5
 80046fc:	4638      	mov	r0, r7
 80046fe:	f7ff ff6d 	bl	80045dc <__ssputs_r>
 8004702:	3001      	adds	r0, #1
 8004704:	f000 80aa 	beq.w	800485c <_svfiprintf_r+0x1c8>
 8004708:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800470a:	445a      	add	r2, fp
 800470c:	9209      	str	r2, [sp, #36]	; 0x24
 800470e:	f89a 3000 	ldrb.w	r3, [sl]
 8004712:	2b00      	cmp	r3, #0
 8004714:	f000 80a2 	beq.w	800485c <_svfiprintf_r+0x1c8>
 8004718:	2300      	movs	r3, #0
 800471a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800471e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004722:	f10a 0a01 	add.w	sl, sl, #1
 8004726:	9304      	str	r3, [sp, #16]
 8004728:	9307      	str	r3, [sp, #28]
 800472a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800472e:	931a      	str	r3, [sp, #104]	; 0x68
 8004730:	4654      	mov	r4, sl
 8004732:	2205      	movs	r2, #5
 8004734:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004738:	4851      	ldr	r0, [pc, #324]	; (8004880 <_svfiprintf_r+0x1ec>)
 800473a:	f000 fa41 	bl	8004bc0 <memchr>
 800473e:	9a04      	ldr	r2, [sp, #16]
 8004740:	b9d8      	cbnz	r0, 800477a <_svfiprintf_r+0xe6>
 8004742:	06d0      	lsls	r0, r2, #27
 8004744:	bf44      	itt	mi
 8004746:	2320      	movmi	r3, #32
 8004748:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800474c:	0711      	lsls	r1, r2, #28
 800474e:	bf44      	itt	mi
 8004750:	232b      	movmi	r3, #43	; 0x2b
 8004752:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004756:	f89a 3000 	ldrb.w	r3, [sl]
 800475a:	2b2a      	cmp	r3, #42	; 0x2a
 800475c:	d015      	beq.n	800478a <_svfiprintf_r+0xf6>
 800475e:	4654      	mov	r4, sl
 8004760:	2000      	movs	r0, #0
 8004762:	f04f 0c0a 	mov.w	ip, #10
 8004766:	9a07      	ldr	r2, [sp, #28]
 8004768:	4621      	mov	r1, r4
 800476a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800476e:	3b30      	subs	r3, #48	; 0x30
 8004770:	2b09      	cmp	r3, #9
 8004772:	d94e      	bls.n	8004812 <_svfiprintf_r+0x17e>
 8004774:	b1b0      	cbz	r0, 80047a4 <_svfiprintf_r+0x110>
 8004776:	9207      	str	r2, [sp, #28]
 8004778:	e014      	b.n	80047a4 <_svfiprintf_r+0x110>
 800477a:	eba0 0308 	sub.w	r3, r0, r8
 800477e:	fa09 f303 	lsl.w	r3, r9, r3
 8004782:	4313      	orrs	r3, r2
 8004784:	46a2      	mov	sl, r4
 8004786:	9304      	str	r3, [sp, #16]
 8004788:	e7d2      	b.n	8004730 <_svfiprintf_r+0x9c>
 800478a:	9b03      	ldr	r3, [sp, #12]
 800478c:	1d19      	adds	r1, r3, #4
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	9103      	str	r1, [sp, #12]
 8004792:	2b00      	cmp	r3, #0
 8004794:	bfbb      	ittet	lt
 8004796:	425b      	neglt	r3, r3
 8004798:	f042 0202 	orrlt.w	r2, r2, #2
 800479c:	9307      	strge	r3, [sp, #28]
 800479e:	9307      	strlt	r3, [sp, #28]
 80047a0:	bfb8      	it	lt
 80047a2:	9204      	strlt	r2, [sp, #16]
 80047a4:	7823      	ldrb	r3, [r4, #0]
 80047a6:	2b2e      	cmp	r3, #46	; 0x2e
 80047a8:	d10c      	bne.n	80047c4 <_svfiprintf_r+0x130>
 80047aa:	7863      	ldrb	r3, [r4, #1]
 80047ac:	2b2a      	cmp	r3, #42	; 0x2a
 80047ae:	d135      	bne.n	800481c <_svfiprintf_r+0x188>
 80047b0:	9b03      	ldr	r3, [sp, #12]
 80047b2:	3402      	adds	r4, #2
 80047b4:	1d1a      	adds	r2, r3, #4
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	9203      	str	r2, [sp, #12]
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	bfb8      	it	lt
 80047be:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80047c2:	9305      	str	r3, [sp, #20]
 80047c4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8004890 <_svfiprintf_r+0x1fc>
 80047c8:	2203      	movs	r2, #3
 80047ca:	4650      	mov	r0, sl
 80047cc:	7821      	ldrb	r1, [r4, #0]
 80047ce:	f000 f9f7 	bl	8004bc0 <memchr>
 80047d2:	b140      	cbz	r0, 80047e6 <_svfiprintf_r+0x152>
 80047d4:	2340      	movs	r3, #64	; 0x40
 80047d6:	eba0 000a 	sub.w	r0, r0, sl
 80047da:	fa03 f000 	lsl.w	r0, r3, r0
 80047de:	9b04      	ldr	r3, [sp, #16]
 80047e0:	3401      	adds	r4, #1
 80047e2:	4303      	orrs	r3, r0
 80047e4:	9304      	str	r3, [sp, #16]
 80047e6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80047ea:	2206      	movs	r2, #6
 80047ec:	4825      	ldr	r0, [pc, #148]	; (8004884 <_svfiprintf_r+0x1f0>)
 80047ee:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80047f2:	f000 f9e5 	bl	8004bc0 <memchr>
 80047f6:	2800      	cmp	r0, #0
 80047f8:	d038      	beq.n	800486c <_svfiprintf_r+0x1d8>
 80047fa:	4b23      	ldr	r3, [pc, #140]	; (8004888 <_svfiprintf_r+0x1f4>)
 80047fc:	bb1b      	cbnz	r3, 8004846 <_svfiprintf_r+0x1b2>
 80047fe:	9b03      	ldr	r3, [sp, #12]
 8004800:	3307      	adds	r3, #7
 8004802:	f023 0307 	bic.w	r3, r3, #7
 8004806:	3308      	adds	r3, #8
 8004808:	9303      	str	r3, [sp, #12]
 800480a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800480c:	4433      	add	r3, r6
 800480e:	9309      	str	r3, [sp, #36]	; 0x24
 8004810:	e767      	b.n	80046e2 <_svfiprintf_r+0x4e>
 8004812:	460c      	mov	r4, r1
 8004814:	2001      	movs	r0, #1
 8004816:	fb0c 3202 	mla	r2, ip, r2, r3
 800481a:	e7a5      	b.n	8004768 <_svfiprintf_r+0xd4>
 800481c:	2300      	movs	r3, #0
 800481e:	f04f 0c0a 	mov.w	ip, #10
 8004822:	4619      	mov	r1, r3
 8004824:	3401      	adds	r4, #1
 8004826:	9305      	str	r3, [sp, #20]
 8004828:	4620      	mov	r0, r4
 800482a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800482e:	3a30      	subs	r2, #48	; 0x30
 8004830:	2a09      	cmp	r2, #9
 8004832:	d903      	bls.n	800483c <_svfiprintf_r+0x1a8>
 8004834:	2b00      	cmp	r3, #0
 8004836:	d0c5      	beq.n	80047c4 <_svfiprintf_r+0x130>
 8004838:	9105      	str	r1, [sp, #20]
 800483a:	e7c3      	b.n	80047c4 <_svfiprintf_r+0x130>
 800483c:	4604      	mov	r4, r0
 800483e:	2301      	movs	r3, #1
 8004840:	fb0c 2101 	mla	r1, ip, r1, r2
 8004844:	e7f0      	b.n	8004828 <_svfiprintf_r+0x194>
 8004846:	ab03      	add	r3, sp, #12
 8004848:	9300      	str	r3, [sp, #0]
 800484a:	462a      	mov	r2, r5
 800484c:	4638      	mov	r0, r7
 800484e:	4b0f      	ldr	r3, [pc, #60]	; (800488c <_svfiprintf_r+0x1f8>)
 8004850:	a904      	add	r1, sp, #16
 8004852:	f3af 8000 	nop.w
 8004856:	1c42      	adds	r2, r0, #1
 8004858:	4606      	mov	r6, r0
 800485a:	d1d6      	bne.n	800480a <_svfiprintf_r+0x176>
 800485c:	89ab      	ldrh	r3, [r5, #12]
 800485e:	065b      	lsls	r3, r3, #25
 8004860:	f53f af2c 	bmi.w	80046bc <_svfiprintf_r+0x28>
 8004864:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004866:	b01d      	add	sp, #116	; 0x74
 8004868:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800486c:	ab03      	add	r3, sp, #12
 800486e:	9300      	str	r3, [sp, #0]
 8004870:	462a      	mov	r2, r5
 8004872:	4638      	mov	r0, r7
 8004874:	4b05      	ldr	r3, [pc, #20]	; (800488c <_svfiprintf_r+0x1f8>)
 8004876:	a904      	add	r1, sp, #16
 8004878:	f000 f87c 	bl	8004974 <_printf_i>
 800487c:	e7eb      	b.n	8004856 <_svfiprintf_r+0x1c2>
 800487e:	bf00      	nop
 8004880:	08004e78 	.word	0x08004e78
 8004884:	08004e82 	.word	0x08004e82
 8004888:	00000000 	.word	0x00000000
 800488c:	080045dd 	.word	0x080045dd
 8004890:	08004e7e 	.word	0x08004e7e

08004894 <_printf_common>:
 8004894:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004898:	4616      	mov	r6, r2
 800489a:	4699      	mov	r9, r3
 800489c:	688a      	ldr	r2, [r1, #8]
 800489e:	690b      	ldr	r3, [r1, #16]
 80048a0:	4607      	mov	r7, r0
 80048a2:	4293      	cmp	r3, r2
 80048a4:	bfb8      	it	lt
 80048a6:	4613      	movlt	r3, r2
 80048a8:	6033      	str	r3, [r6, #0]
 80048aa:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80048ae:	460c      	mov	r4, r1
 80048b0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80048b4:	b10a      	cbz	r2, 80048ba <_printf_common+0x26>
 80048b6:	3301      	adds	r3, #1
 80048b8:	6033      	str	r3, [r6, #0]
 80048ba:	6823      	ldr	r3, [r4, #0]
 80048bc:	0699      	lsls	r1, r3, #26
 80048be:	bf42      	ittt	mi
 80048c0:	6833      	ldrmi	r3, [r6, #0]
 80048c2:	3302      	addmi	r3, #2
 80048c4:	6033      	strmi	r3, [r6, #0]
 80048c6:	6825      	ldr	r5, [r4, #0]
 80048c8:	f015 0506 	ands.w	r5, r5, #6
 80048cc:	d106      	bne.n	80048dc <_printf_common+0x48>
 80048ce:	f104 0a19 	add.w	sl, r4, #25
 80048d2:	68e3      	ldr	r3, [r4, #12]
 80048d4:	6832      	ldr	r2, [r6, #0]
 80048d6:	1a9b      	subs	r3, r3, r2
 80048d8:	42ab      	cmp	r3, r5
 80048da:	dc28      	bgt.n	800492e <_printf_common+0x9a>
 80048dc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80048e0:	1e13      	subs	r3, r2, #0
 80048e2:	6822      	ldr	r2, [r4, #0]
 80048e4:	bf18      	it	ne
 80048e6:	2301      	movne	r3, #1
 80048e8:	0692      	lsls	r2, r2, #26
 80048ea:	d42d      	bmi.n	8004948 <_printf_common+0xb4>
 80048ec:	4649      	mov	r1, r9
 80048ee:	4638      	mov	r0, r7
 80048f0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80048f4:	47c0      	blx	r8
 80048f6:	3001      	adds	r0, #1
 80048f8:	d020      	beq.n	800493c <_printf_common+0xa8>
 80048fa:	6823      	ldr	r3, [r4, #0]
 80048fc:	68e5      	ldr	r5, [r4, #12]
 80048fe:	f003 0306 	and.w	r3, r3, #6
 8004902:	2b04      	cmp	r3, #4
 8004904:	bf18      	it	ne
 8004906:	2500      	movne	r5, #0
 8004908:	6832      	ldr	r2, [r6, #0]
 800490a:	f04f 0600 	mov.w	r6, #0
 800490e:	68a3      	ldr	r3, [r4, #8]
 8004910:	bf08      	it	eq
 8004912:	1aad      	subeq	r5, r5, r2
 8004914:	6922      	ldr	r2, [r4, #16]
 8004916:	bf08      	it	eq
 8004918:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800491c:	4293      	cmp	r3, r2
 800491e:	bfc4      	itt	gt
 8004920:	1a9b      	subgt	r3, r3, r2
 8004922:	18ed      	addgt	r5, r5, r3
 8004924:	341a      	adds	r4, #26
 8004926:	42b5      	cmp	r5, r6
 8004928:	d11a      	bne.n	8004960 <_printf_common+0xcc>
 800492a:	2000      	movs	r0, #0
 800492c:	e008      	b.n	8004940 <_printf_common+0xac>
 800492e:	2301      	movs	r3, #1
 8004930:	4652      	mov	r2, sl
 8004932:	4649      	mov	r1, r9
 8004934:	4638      	mov	r0, r7
 8004936:	47c0      	blx	r8
 8004938:	3001      	adds	r0, #1
 800493a:	d103      	bne.n	8004944 <_printf_common+0xb0>
 800493c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004940:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004944:	3501      	adds	r5, #1
 8004946:	e7c4      	b.n	80048d2 <_printf_common+0x3e>
 8004948:	2030      	movs	r0, #48	; 0x30
 800494a:	18e1      	adds	r1, r4, r3
 800494c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004950:	1c5a      	adds	r2, r3, #1
 8004952:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004956:	4422      	add	r2, r4
 8004958:	3302      	adds	r3, #2
 800495a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800495e:	e7c5      	b.n	80048ec <_printf_common+0x58>
 8004960:	2301      	movs	r3, #1
 8004962:	4622      	mov	r2, r4
 8004964:	4649      	mov	r1, r9
 8004966:	4638      	mov	r0, r7
 8004968:	47c0      	blx	r8
 800496a:	3001      	adds	r0, #1
 800496c:	d0e6      	beq.n	800493c <_printf_common+0xa8>
 800496e:	3601      	adds	r6, #1
 8004970:	e7d9      	b.n	8004926 <_printf_common+0x92>
	...

08004974 <_printf_i>:
 8004974:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004978:	460c      	mov	r4, r1
 800497a:	7e27      	ldrb	r7, [r4, #24]
 800497c:	4691      	mov	r9, r2
 800497e:	2f78      	cmp	r7, #120	; 0x78
 8004980:	4680      	mov	r8, r0
 8004982:	469a      	mov	sl, r3
 8004984:	990c      	ldr	r1, [sp, #48]	; 0x30
 8004986:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800498a:	d807      	bhi.n	800499c <_printf_i+0x28>
 800498c:	2f62      	cmp	r7, #98	; 0x62
 800498e:	d80a      	bhi.n	80049a6 <_printf_i+0x32>
 8004990:	2f00      	cmp	r7, #0
 8004992:	f000 80d9 	beq.w	8004b48 <_printf_i+0x1d4>
 8004996:	2f58      	cmp	r7, #88	; 0x58
 8004998:	f000 80a4 	beq.w	8004ae4 <_printf_i+0x170>
 800499c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80049a0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80049a4:	e03a      	b.n	8004a1c <_printf_i+0xa8>
 80049a6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80049aa:	2b15      	cmp	r3, #21
 80049ac:	d8f6      	bhi.n	800499c <_printf_i+0x28>
 80049ae:	a001      	add	r0, pc, #4	; (adr r0, 80049b4 <_printf_i+0x40>)
 80049b0:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80049b4:	08004a0d 	.word	0x08004a0d
 80049b8:	08004a21 	.word	0x08004a21
 80049bc:	0800499d 	.word	0x0800499d
 80049c0:	0800499d 	.word	0x0800499d
 80049c4:	0800499d 	.word	0x0800499d
 80049c8:	0800499d 	.word	0x0800499d
 80049cc:	08004a21 	.word	0x08004a21
 80049d0:	0800499d 	.word	0x0800499d
 80049d4:	0800499d 	.word	0x0800499d
 80049d8:	0800499d 	.word	0x0800499d
 80049dc:	0800499d 	.word	0x0800499d
 80049e0:	08004b2f 	.word	0x08004b2f
 80049e4:	08004a51 	.word	0x08004a51
 80049e8:	08004b11 	.word	0x08004b11
 80049ec:	0800499d 	.word	0x0800499d
 80049f0:	0800499d 	.word	0x0800499d
 80049f4:	08004b51 	.word	0x08004b51
 80049f8:	0800499d 	.word	0x0800499d
 80049fc:	08004a51 	.word	0x08004a51
 8004a00:	0800499d 	.word	0x0800499d
 8004a04:	0800499d 	.word	0x0800499d
 8004a08:	08004b19 	.word	0x08004b19
 8004a0c:	680b      	ldr	r3, [r1, #0]
 8004a0e:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004a12:	1d1a      	adds	r2, r3, #4
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	600a      	str	r2, [r1, #0]
 8004a18:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004a1c:	2301      	movs	r3, #1
 8004a1e:	e0a4      	b.n	8004b6a <_printf_i+0x1f6>
 8004a20:	6825      	ldr	r5, [r4, #0]
 8004a22:	6808      	ldr	r0, [r1, #0]
 8004a24:	062e      	lsls	r6, r5, #24
 8004a26:	f100 0304 	add.w	r3, r0, #4
 8004a2a:	d50a      	bpl.n	8004a42 <_printf_i+0xce>
 8004a2c:	6805      	ldr	r5, [r0, #0]
 8004a2e:	600b      	str	r3, [r1, #0]
 8004a30:	2d00      	cmp	r5, #0
 8004a32:	da03      	bge.n	8004a3c <_printf_i+0xc8>
 8004a34:	232d      	movs	r3, #45	; 0x2d
 8004a36:	426d      	negs	r5, r5
 8004a38:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004a3c:	230a      	movs	r3, #10
 8004a3e:	485e      	ldr	r0, [pc, #376]	; (8004bb8 <_printf_i+0x244>)
 8004a40:	e019      	b.n	8004a76 <_printf_i+0x102>
 8004a42:	f015 0f40 	tst.w	r5, #64	; 0x40
 8004a46:	6805      	ldr	r5, [r0, #0]
 8004a48:	600b      	str	r3, [r1, #0]
 8004a4a:	bf18      	it	ne
 8004a4c:	b22d      	sxthne	r5, r5
 8004a4e:	e7ef      	b.n	8004a30 <_printf_i+0xbc>
 8004a50:	680b      	ldr	r3, [r1, #0]
 8004a52:	6825      	ldr	r5, [r4, #0]
 8004a54:	1d18      	adds	r0, r3, #4
 8004a56:	6008      	str	r0, [r1, #0]
 8004a58:	0628      	lsls	r0, r5, #24
 8004a5a:	d501      	bpl.n	8004a60 <_printf_i+0xec>
 8004a5c:	681d      	ldr	r5, [r3, #0]
 8004a5e:	e002      	b.n	8004a66 <_printf_i+0xf2>
 8004a60:	0669      	lsls	r1, r5, #25
 8004a62:	d5fb      	bpl.n	8004a5c <_printf_i+0xe8>
 8004a64:	881d      	ldrh	r5, [r3, #0]
 8004a66:	2f6f      	cmp	r7, #111	; 0x6f
 8004a68:	bf0c      	ite	eq
 8004a6a:	2308      	moveq	r3, #8
 8004a6c:	230a      	movne	r3, #10
 8004a6e:	4852      	ldr	r0, [pc, #328]	; (8004bb8 <_printf_i+0x244>)
 8004a70:	2100      	movs	r1, #0
 8004a72:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004a76:	6866      	ldr	r6, [r4, #4]
 8004a78:	2e00      	cmp	r6, #0
 8004a7a:	bfa8      	it	ge
 8004a7c:	6821      	ldrge	r1, [r4, #0]
 8004a7e:	60a6      	str	r6, [r4, #8]
 8004a80:	bfa4      	itt	ge
 8004a82:	f021 0104 	bicge.w	r1, r1, #4
 8004a86:	6021      	strge	r1, [r4, #0]
 8004a88:	b90d      	cbnz	r5, 8004a8e <_printf_i+0x11a>
 8004a8a:	2e00      	cmp	r6, #0
 8004a8c:	d04d      	beq.n	8004b2a <_printf_i+0x1b6>
 8004a8e:	4616      	mov	r6, r2
 8004a90:	fbb5 f1f3 	udiv	r1, r5, r3
 8004a94:	fb03 5711 	mls	r7, r3, r1, r5
 8004a98:	5dc7      	ldrb	r7, [r0, r7]
 8004a9a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004a9e:	462f      	mov	r7, r5
 8004aa0:	42bb      	cmp	r3, r7
 8004aa2:	460d      	mov	r5, r1
 8004aa4:	d9f4      	bls.n	8004a90 <_printf_i+0x11c>
 8004aa6:	2b08      	cmp	r3, #8
 8004aa8:	d10b      	bne.n	8004ac2 <_printf_i+0x14e>
 8004aaa:	6823      	ldr	r3, [r4, #0]
 8004aac:	07df      	lsls	r7, r3, #31
 8004aae:	d508      	bpl.n	8004ac2 <_printf_i+0x14e>
 8004ab0:	6923      	ldr	r3, [r4, #16]
 8004ab2:	6861      	ldr	r1, [r4, #4]
 8004ab4:	4299      	cmp	r1, r3
 8004ab6:	bfde      	ittt	le
 8004ab8:	2330      	movle	r3, #48	; 0x30
 8004aba:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004abe:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 8004ac2:	1b92      	subs	r2, r2, r6
 8004ac4:	6122      	str	r2, [r4, #16]
 8004ac6:	464b      	mov	r3, r9
 8004ac8:	4621      	mov	r1, r4
 8004aca:	4640      	mov	r0, r8
 8004acc:	f8cd a000 	str.w	sl, [sp]
 8004ad0:	aa03      	add	r2, sp, #12
 8004ad2:	f7ff fedf 	bl	8004894 <_printf_common>
 8004ad6:	3001      	adds	r0, #1
 8004ad8:	d14c      	bne.n	8004b74 <_printf_i+0x200>
 8004ada:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004ade:	b004      	add	sp, #16
 8004ae0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004ae4:	4834      	ldr	r0, [pc, #208]	; (8004bb8 <_printf_i+0x244>)
 8004ae6:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8004aea:	680e      	ldr	r6, [r1, #0]
 8004aec:	6823      	ldr	r3, [r4, #0]
 8004aee:	f856 5b04 	ldr.w	r5, [r6], #4
 8004af2:	061f      	lsls	r7, r3, #24
 8004af4:	600e      	str	r6, [r1, #0]
 8004af6:	d514      	bpl.n	8004b22 <_printf_i+0x1ae>
 8004af8:	07d9      	lsls	r1, r3, #31
 8004afa:	bf44      	itt	mi
 8004afc:	f043 0320 	orrmi.w	r3, r3, #32
 8004b00:	6023      	strmi	r3, [r4, #0]
 8004b02:	b91d      	cbnz	r5, 8004b0c <_printf_i+0x198>
 8004b04:	6823      	ldr	r3, [r4, #0]
 8004b06:	f023 0320 	bic.w	r3, r3, #32
 8004b0a:	6023      	str	r3, [r4, #0]
 8004b0c:	2310      	movs	r3, #16
 8004b0e:	e7af      	b.n	8004a70 <_printf_i+0xfc>
 8004b10:	6823      	ldr	r3, [r4, #0]
 8004b12:	f043 0320 	orr.w	r3, r3, #32
 8004b16:	6023      	str	r3, [r4, #0]
 8004b18:	2378      	movs	r3, #120	; 0x78
 8004b1a:	4828      	ldr	r0, [pc, #160]	; (8004bbc <_printf_i+0x248>)
 8004b1c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004b20:	e7e3      	b.n	8004aea <_printf_i+0x176>
 8004b22:	065e      	lsls	r6, r3, #25
 8004b24:	bf48      	it	mi
 8004b26:	b2ad      	uxthmi	r5, r5
 8004b28:	e7e6      	b.n	8004af8 <_printf_i+0x184>
 8004b2a:	4616      	mov	r6, r2
 8004b2c:	e7bb      	b.n	8004aa6 <_printf_i+0x132>
 8004b2e:	680b      	ldr	r3, [r1, #0]
 8004b30:	6826      	ldr	r6, [r4, #0]
 8004b32:	1d1d      	adds	r5, r3, #4
 8004b34:	6960      	ldr	r0, [r4, #20]
 8004b36:	600d      	str	r5, [r1, #0]
 8004b38:	0635      	lsls	r5, r6, #24
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	d501      	bpl.n	8004b42 <_printf_i+0x1ce>
 8004b3e:	6018      	str	r0, [r3, #0]
 8004b40:	e002      	b.n	8004b48 <_printf_i+0x1d4>
 8004b42:	0671      	lsls	r1, r6, #25
 8004b44:	d5fb      	bpl.n	8004b3e <_printf_i+0x1ca>
 8004b46:	8018      	strh	r0, [r3, #0]
 8004b48:	2300      	movs	r3, #0
 8004b4a:	4616      	mov	r6, r2
 8004b4c:	6123      	str	r3, [r4, #16]
 8004b4e:	e7ba      	b.n	8004ac6 <_printf_i+0x152>
 8004b50:	680b      	ldr	r3, [r1, #0]
 8004b52:	1d1a      	adds	r2, r3, #4
 8004b54:	600a      	str	r2, [r1, #0]
 8004b56:	681e      	ldr	r6, [r3, #0]
 8004b58:	2100      	movs	r1, #0
 8004b5a:	4630      	mov	r0, r6
 8004b5c:	6862      	ldr	r2, [r4, #4]
 8004b5e:	f000 f82f 	bl	8004bc0 <memchr>
 8004b62:	b108      	cbz	r0, 8004b68 <_printf_i+0x1f4>
 8004b64:	1b80      	subs	r0, r0, r6
 8004b66:	6060      	str	r0, [r4, #4]
 8004b68:	6863      	ldr	r3, [r4, #4]
 8004b6a:	6123      	str	r3, [r4, #16]
 8004b6c:	2300      	movs	r3, #0
 8004b6e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004b72:	e7a8      	b.n	8004ac6 <_printf_i+0x152>
 8004b74:	4632      	mov	r2, r6
 8004b76:	4649      	mov	r1, r9
 8004b78:	4640      	mov	r0, r8
 8004b7a:	6923      	ldr	r3, [r4, #16]
 8004b7c:	47d0      	blx	sl
 8004b7e:	3001      	adds	r0, #1
 8004b80:	d0ab      	beq.n	8004ada <_printf_i+0x166>
 8004b82:	6823      	ldr	r3, [r4, #0]
 8004b84:	079b      	lsls	r3, r3, #30
 8004b86:	d413      	bmi.n	8004bb0 <_printf_i+0x23c>
 8004b88:	68e0      	ldr	r0, [r4, #12]
 8004b8a:	9b03      	ldr	r3, [sp, #12]
 8004b8c:	4298      	cmp	r0, r3
 8004b8e:	bfb8      	it	lt
 8004b90:	4618      	movlt	r0, r3
 8004b92:	e7a4      	b.n	8004ade <_printf_i+0x16a>
 8004b94:	2301      	movs	r3, #1
 8004b96:	4632      	mov	r2, r6
 8004b98:	4649      	mov	r1, r9
 8004b9a:	4640      	mov	r0, r8
 8004b9c:	47d0      	blx	sl
 8004b9e:	3001      	adds	r0, #1
 8004ba0:	d09b      	beq.n	8004ada <_printf_i+0x166>
 8004ba2:	3501      	adds	r5, #1
 8004ba4:	68e3      	ldr	r3, [r4, #12]
 8004ba6:	9903      	ldr	r1, [sp, #12]
 8004ba8:	1a5b      	subs	r3, r3, r1
 8004baa:	42ab      	cmp	r3, r5
 8004bac:	dcf2      	bgt.n	8004b94 <_printf_i+0x220>
 8004bae:	e7eb      	b.n	8004b88 <_printf_i+0x214>
 8004bb0:	2500      	movs	r5, #0
 8004bb2:	f104 0619 	add.w	r6, r4, #25
 8004bb6:	e7f5      	b.n	8004ba4 <_printf_i+0x230>
 8004bb8:	08004e89 	.word	0x08004e89
 8004bbc:	08004e9a 	.word	0x08004e9a

08004bc0 <memchr>:
 8004bc0:	4603      	mov	r3, r0
 8004bc2:	b510      	push	{r4, lr}
 8004bc4:	b2c9      	uxtb	r1, r1
 8004bc6:	4402      	add	r2, r0
 8004bc8:	4293      	cmp	r3, r2
 8004bca:	4618      	mov	r0, r3
 8004bcc:	d101      	bne.n	8004bd2 <memchr+0x12>
 8004bce:	2000      	movs	r0, #0
 8004bd0:	e003      	b.n	8004bda <memchr+0x1a>
 8004bd2:	7804      	ldrb	r4, [r0, #0]
 8004bd4:	3301      	adds	r3, #1
 8004bd6:	428c      	cmp	r4, r1
 8004bd8:	d1f6      	bne.n	8004bc8 <memchr+0x8>
 8004bda:	bd10      	pop	{r4, pc}

08004bdc <memcpy>:
 8004bdc:	440a      	add	r2, r1
 8004bde:	4291      	cmp	r1, r2
 8004be0:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8004be4:	d100      	bne.n	8004be8 <memcpy+0xc>
 8004be6:	4770      	bx	lr
 8004be8:	b510      	push	{r4, lr}
 8004bea:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004bee:	4291      	cmp	r1, r2
 8004bf0:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004bf4:	d1f9      	bne.n	8004bea <memcpy+0xe>
 8004bf6:	bd10      	pop	{r4, pc}

08004bf8 <memmove>:
 8004bf8:	4288      	cmp	r0, r1
 8004bfa:	b510      	push	{r4, lr}
 8004bfc:	eb01 0402 	add.w	r4, r1, r2
 8004c00:	d902      	bls.n	8004c08 <memmove+0x10>
 8004c02:	4284      	cmp	r4, r0
 8004c04:	4623      	mov	r3, r4
 8004c06:	d807      	bhi.n	8004c18 <memmove+0x20>
 8004c08:	1e43      	subs	r3, r0, #1
 8004c0a:	42a1      	cmp	r1, r4
 8004c0c:	d008      	beq.n	8004c20 <memmove+0x28>
 8004c0e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004c12:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004c16:	e7f8      	b.n	8004c0a <memmove+0x12>
 8004c18:	4601      	mov	r1, r0
 8004c1a:	4402      	add	r2, r0
 8004c1c:	428a      	cmp	r2, r1
 8004c1e:	d100      	bne.n	8004c22 <memmove+0x2a>
 8004c20:	bd10      	pop	{r4, pc}
 8004c22:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004c26:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004c2a:	e7f7      	b.n	8004c1c <memmove+0x24>

08004c2c <_free_r>:
 8004c2c:	b538      	push	{r3, r4, r5, lr}
 8004c2e:	4605      	mov	r5, r0
 8004c30:	2900      	cmp	r1, #0
 8004c32:	d043      	beq.n	8004cbc <_free_r+0x90>
 8004c34:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004c38:	1f0c      	subs	r4, r1, #4
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	bfb8      	it	lt
 8004c3e:	18e4      	addlt	r4, r4, r3
 8004c40:	f000 f8d0 	bl	8004de4 <__malloc_lock>
 8004c44:	4a1e      	ldr	r2, [pc, #120]	; (8004cc0 <_free_r+0x94>)
 8004c46:	6813      	ldr	r3, [r2, #0]
 8004c48:	4610      	mov	r0, r2
 8004c4a:	b933      	cbnz	r3, 8004c5a <_free_r+0x2e>
 8004c4c:	6063      	str	r3, [r4, #4]
 8004c4e:	6014      	str	r4, [r2, #0]
 8004c50:	4628      	mov	r0, r5
 8004c52:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004c56:	f000 b8cb 	b.w	8004df0 <__malloc_unlock>
 8004c5a:	42a3      	cmp	r3, r4
 8004c5c:	d90a      	bls.n	8004c74 <_free_r+0x48>
 8004c5e:	6821      	ldr	r1, [r4, #0]
 8004c60:	1862      	adds	r2, r4, r1
 8004c62:	4293      	cmp	r3, r2
 8004c64:	bf01      	itttt	eq
 8004c66:	681a      	ldreq	r2, [r3, #0]
 8004c68:	685b      	ldreq	r3, [r3, #4]
 8004c6a:	1852      	addeq	r2, r2, r1
 8004c6c:	6022      	streq	r2, [r4, #0]
 8004c6e:	6063      	str	r3, [r4, #4]
 8004c70:	6004      	str	r4, [r0, #0]
 8004c72:	e7ed      	b.n	8004c50 <_free_r+0x24>
 8004c74:	461a      	mov	r2, r3
 8004c76:	685b      	ldr	r3, [r3, #4]
 8004c78:	b10b      	cbz	r3, 8004c7e <_free_r+0x52>
 8004c7a:	42a3      	cmp	r3, r4
 8004c7c:	d9fa      	bls.n	8004c74 <_free_r+0x48>
 8004c7e:	6811      	ldr	r1, [r2, #0]
 8004c80:	1850      	adds	r0, r2, r1
 8004c82:	42a0      	cmp	r0, r4
 8004c84:	d10b      	bne.n	8004c9e <_free_r+0x72>
 8004c86:	6820      	ldr	r0, [r4, #0]
 8004c88:	4401      	add	r1, r0
 8004c8a:	1850      	adds	r0, r2, r1
 8004c8c:	4283      	cmp	r3, r0
 8004c8e:	6011      	str	r1, [r2, #0]
 8004c90:	d1de      	bne.n	8004c50 <_free_r+0x24>
 8004c92:	6818      	ldr	r0, [r3, #0]
 8004c94:	685b      	ldr	r3, [r3, #4]
 8004c96:	4401      	add	r1, r0
 8004c98:	6011      	str	r1, [r2, #0]
 8004c9a:	6053      	str	r3, [r2, #4]
 8004c9c:	e7d8      	b.n	8004c50 <_free_r+0x24>
 8004c9e:	d902      	bls.n	8004ca6 <_free_r+0x7a>
 8004ca0:	230c      	movs	r3, #12
 8004ca2:	602b      	str	r3, [r5, #0]
 8004ca4:	e7d4      	b.n	8004c50 <_free_r+0x24>
 8004ca6:	6820      	ldr	r0, [r4, #0]
 8004ca8:	1821      	adds	r1, r4, r0
 8004caa:	428b      	cmp	r3, r1
 8004cac:	bf01      	itttt	eq
 8004cae:	6819      	ldreq	r1, [r3, #0]
 8004cb0:	685b      	ldreq	r3, [r3, #4]
 8004cb2:	1809      	addeq	r1, r1, r0
 8004cb4:	6021      	streq	r1, [r4, #0]
 8004cb6:	6063      	str	r3, [r4, #4]
 8004cb8:	6054      	str	r4, [r2, #4]
 8004cba:	e7c9      	b.n	8004c50 <_free_r+0x24>
 8004cbc:	bd38      	pop	{r3, r4, r5, pc}
 8004cbe:	bf00      	nop
 8004cc0:	200000f4 	.word	0x200000f4

08004cc4 <_malloc_r>:
 8004cc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004cc6:	1ccd      	adds	r5, r1, #3
 8004cc8:	f025 0503 	bic.w	r5, r5, #3
 8004ccc:	3508      	adds	r5, #8
 8004cce:	2d0c      	cmp	r5, #12
 8004cd0:	bf38      	it	cc
 8004cd2:	250c      	movcc	r5, #12
 8004cd4:	2d00      	cmp	r5, #0
 8004cd6:	4606      	mov	r6, r0
 8004cd8:	db01      	blt.n	8004cde <_malloc_r+0x1a>
 8004cda:	42a9      	cmp	r1, r5
 8004cdc:	d903      	bls.n	8004ce6 <_malloc_r+0x22>
 8004cde:	230c      	movs	r3, #12
 8004ce0:	6033      	str	r3, [r6, #0]
 8004ce2:	2000      	movs	r0, #0
 8004ce4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004ce6:	f000 f87d 	bl	8004de4 <__malloc_lock>
 8004cea:	4921      	ldr	r1, [pc, #132]	; (8004d70 <_malloc_r+0xac>)
 8004cec:	680a      	ldr	r2, [r1, #0]
 8004cee:	4614      	mov	r4, r2
 8004cf0:	b99c      	cbnz	r4, 8004d1a <_malloc_r+0x56>
 8004cf2:	4f20      	ldr	r7, [pc, #128]	; (8004d74 <_malloc_r+0xb0>)
 8004cf4:	683b      	ldr	r3, [r7, #0]
 8004cf6:	b923      	cbnz	r3, 8004d02 <_malloc_r+0x3e>
 8004cf8:	4621      	mov	r1, r4
 8004cfa:	4630      	mov	r0, r6
 8004cfc:	f000 f862 	bl	8004dc4 <_sbrk_r>
 8004d00:	6038      	str	r0, [r7, #0]
 8004d02:	4629      	mov	r1, r5
 8004d04:	4630      	mov	r0, r6
 8004d06:	f000 f85d 	bl	8004dc4 <_sbrk_r>
 8004d0a:	1c43      	adds	r3, r0, #1
 8004d0c:	d123      	bne.n	8004d56 <_malloc_r+0x92>
 8004d0e:	230c      	movs	r3, #12
 8004d10:	4630      	mov	r0, r6
 8004d12:	6033      	str	r3, [r6, #0]
 8004d14:	f000 f86c 	bl	8004df0 <__malloc_unlock>
 8004d18:	e7e3      	b.n	8004ce2 <_malloc_r+0x1e>
 8004d1a:	6823      	ldr	r3, [r4, #0]
 8004d1c:	1b5b      	subs	r3, r3, r5
 8004d1e:	d417      	bmi.n	8004d50 <_malloc_r+0x8c>
 8004d20:	2b0b      	cmp	r3, #11
 8004d22:	d903      	bls.n	8004d2c <_malloc_r+0x68>
 8004d24:	6023      	str	r3, [r4, #0]
 8004d26:	441c      	add	r4, r3
 8004d28:	6025      	str	r5, [r4, #0]
 8004d2a:	e004      	b.n	8004d36 <_malloc_r+0x72>
 8004d2c:	6863      	ldr	r3, [r4, #4]
 8004d2e:	42a2      	cmp	r2, r4
 8004d30:	bf0c      	ite	eq
 8004d32:	600b      	streq	r3, [r1, #0]
 8004d34:	6053      	strne	r3, [r2, #4]
 8004d36:	4630      	mov	r0, r6
 8004d38:	f000 f85a 	bl	8004df0 <__malloc_unlock>
 8004d3c:	f104 000b 	add.w	r0, r4, #11
 8004d40:	1d23      	adds	r3, r4, #4
 8004d42:	f020 0007 	bic.w	r0, r0, #7
 8004d46:	1ac2      	subs	r2, r0, r3
 8004d48:	d0cc      	beq.n	8004ce4 <_malloc_r+0x20>
 8004d4a:	1a1b      	subs	r3, r3, r0
 8004d4c:	50a3      	str	r3, [r4, r2]
 8004d4e:	e7c9      	b.n	8004ce4 <_malloc_r+0x20>
 8004d50:	4622      	mov	r2, r4
 8004d52:	6864      	ldr	r4, [r4, #4]
 8004d54:	e7cc      	b.n	8004cf0 <_malloc_r+0x2c>
 8004d56:	1cc4      	adds	r4, r0, #3
 8004d58:	f024 0403 	bic.w	r4, r4, #3
 8004d5c:	42a0      	cmp	r0, r4
 8004d5e:	d0e3      	beq.n	8004d28 <_malloc_r+0x64>
 8004d60:	1a21      	subs	r1, r4, r0
 8004d62:	4630      	mov	r0, r6
 8004d64:	f000 f82e 	bl	8004dc4 <_sbrk_r>
 8004d68:	3001      	adds	r0, #1
 8004d6a:	d1dd      	bne.n	8004d28 <_malloc_r+0x64>
 8004d6c:	e7cf      	b.n	8004d0e <_malloc_r+0x4a>
 8004d6e:	bf00      	nop
 8004d70:	200000f4 	.word	0x200000f4
 8004d74:	200000f8 	.word	0x200000f8

08004d78 <_realloc_r>:
 8004d78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d7a:	4607      	mov	r7, r0
 8004d7c:	4614      	mov	r4, r2
 8004d7e:	460e      	mov	r6, r1
 8004d80:	b921      	cbnz	r1, 8004d8c <_realloc_r+0x14>
 8004d82:	4611      	mov	r1, r2
 8004d84:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8004d88:	f7ff bf9c 	b.w	8004cc4 <_malloc_r>
 8004d8c:	b922      	cbnz	r2, 8004d98 <_realloc_r+0x20>
 8004d8e:	f7ff ff4d 	bl	8004c2c <_free_r>
 8004d92:	4625      	mov	r5, r4
 8004d94:	4628      	mov	r0, r5
 8004d96:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004d98:	f000 f830 	bl	8004dfc <_malloc_usable_size_r>
 8004d9c:	42a0      	cmp	r0, r4
 8004d9e:	d20f      	bcs.n	8004dc0 <_realloc_r+0x48>
 8004da0:	4621      	mov	r1, r4
 8004da2:	4638      	mov	r0, r7
 8004da4:	f7ff ff8e 	bl	8004cc4 <_malloc_r>
 8004da8:	4605      	mov	r5, r0
 8004daa:	2800      	cmp	r0, #0
 8004dac:	d0f2      	beq.n	8004d94 <_realloc_r+0x1c>
 8004dae:	4631      	mov	r1, r6
 8004db0:	4622      	mov	r2, r4
 8004db2:	f7ff ff13 	bl	8004bdc <memcpy>
 8004db6:	4631      	mov	r1, r6
 8004db8:	4638      	mov	r0, r7
 8004dba:	f7ff ff37 	bl	8004c2c <_free_r>
 8004dbe:	e7e9      	b.n	8004d94 <_realloc_r+0x1c>
 8004dc0:	4635      	mov	r5, r6
 8004dc2:	e7e7      	b.n	8004d94 <_realloc_r+0x1c>

08004dc4 <_sbrk_r>:
 8004dc4:	b538      	push	{r3, r4, r5, lr}
 8004dc6:	2300      	movs	r3, #0
 8004dc8:	4d05      	ldr	r5, [pc, #20]	; (8004de0 <_sbrk_r+0x1c>)
 8004dca:	4604      	mov	r4, r0
 8004dcc:	4608      	mov	r0, r1
 8004dce:	602b      	str	r3, [r5, #0]
 8004dd0:	f7fc f956 	bl	8001080 <_sbrk>
 8004dd4:	1c43      	adds	r3, r0, #1
 8004dd6:	d102      	bne.n	8004dde <_sbrk_r+0x1a>
 8004dd8:	682b      	ldr	r3, [r5, #0]
 8004dda:	b103      	cbz	r3, 8004dde <_sbrk_r+0x1a>
 8004ddc:	6023      	str	r3, [r4, #0]
 8004dde:	bd38      	pop	{r3, r4, r5, pc}
 8004de0:	20000320 	.word	0x20000320

08004de4 <__malloc_lock>:
 8004de4:	4801      	ldr	r0, [pc, #4]	; (8004dec <__malloc_lock+0x8>)
 8004de6:	f000 b811 	b.w	8004e0c <__retarget_lock_acquire_recursive>
 8004dea:	bf00      	nop
 8004dec:	20000328 	.word	0x20000328

08004df0 <__malloc_unlock>:
 8004df0:	4801      	ldr	r0, [pc, #4]	; (8004df8 <__malloc_unlock+0x8>)
 8004df2:	f000 b80c 	b.w	8004e0e <__retarget_lock_release_recursive>
 8004df6:	bf00      	nop
 8004df8:	20000328 	.word	0x20000328

08004dfc <_malloc_usable_size_r>:
 8004dfc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004e00:	1f18      	subs	r0, r3, #4
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	bfbc      	itt	lt
 8004e06:	580b      	ldrlt	r3, [r1, r0]
 8004e08:	18c0      	addlt	r0, r0, r3
 8004e0a:	4770      	bx	lr

08004e0c <__retarget_lock_acquire_recursive>:
 8004e0c:	4770      	bx	lr

08004e0e <__retarget_lock_release_recursive>:
 8004e0e:	4770      	bx	lr

08004e10 <_init>:
 8004e10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e12:	bf00      	nop
 8004e14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004e16:	bc08      	pop	{r3}
 8004e18:	469e      	mov	lr, r3
 8004e1a:	4770      	bx	lr

08004e1c <_fini>:
 8004e1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e1e:	bf00      	nop
 8004e20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004e22:	bc08      	pop	{r3}
 8004e24:	469e      	mov	lr, r3
 8004e26:	4770      	bx	lr
