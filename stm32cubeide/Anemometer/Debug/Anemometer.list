
Anemometer.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004abc  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000068  08004bc8  08004bc8  00014bc8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004c30  08004c30  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08004c30  08004c30  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004c30  08004c30  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004c30  08004c30  00014c30  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004c34  08004c34  00014c34  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08004c38  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000278  20000070  08004ca8  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002e8  08004ca8  000202e8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f017  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002028  00000000  00000000  0002f0b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000df0  00000000  00000000  000310d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000d38  00000000  00000000  00031ec8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000182f7  00000000  00000000  00032c00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e454  00000000  00000000  0004aef7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008c88b  00000000  00000000  0005934b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000e5bd6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003eb0  00000000  00000000  000e5c2c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000070 	.word	0x20000070
 8000128:	00000000 	.word	0x00000000
 800012c:	08004bb0 	.word	0x08004bb0

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000074 	.word	0x20000074
 8000148:	08004bb0 	.word	0x08004bb0

0800014c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000150:	f000 fec8 	bl	8000ee4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000154:	f000 f85c 	bl	8000210 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000158:	f000 fac4 	bl	80006e4 <MX_GPIO_Init>
  MX_DMA_Init();
 800015c:	f000 faa4 	bl	80006a8 <MX_DMA_Init>
  MX_TIM1_Init();
 8000160:	f000 f8ce 	bl	8000300 <MX_TIM1_Init>
  MX_USART1_UART_Init();
 8000164:	f000 fa76 	bl	8000654 <MX_USART1_UART_Init>
  MX_TIM2_Init();
 8000168:	f000 f9a0 	bl	80004ac <MX_TIM2_Init>
  MX_TIM4_Init();
 800016c:	f000 fa24 	bl	80005b8 <MX_TIM4_Init>
  MX_SPI2_Init();
 8000170:	f000 f890 	bl	8000294 <MX_SPI2_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  countPulse = MeassureCount;
 8000174:	4b1b      	ldr	r3, [pc, #108]	; (80001e4 <main+0x98>)
 8000176:	220a      	movs	r2, #10
 8000178:	801a      	strh	r2, [r3, #0]
  sumCounter2 = 0;
 800017a:	4b1b      	ldr	r3, [pc, #108]	; (80001e8 <main+0x9c>)
 800017c:	2200      	movs	r2, #0
 800017e:	601a      	str	r2, [r3, #0]
  /* Turn off all multiplexer */
  GPIOB->ODR &= ~((1 << Z1Receive) | (1 << Z2Receive) | (1 << Z3Receive) | (1 << Z4Receive));
 8000180:	4b1a      	ldr	r3, [pc, #104]	; (80001ec <main+0xa0>)
 8000182:	68db      	ldr	r3, [r3, #12]
 8000184:	4a19      	ldr	r2, [pc, #100]	; (80001ec <main+0xa0>)
 8000186:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800018a:	f023 0306 	bic.w	r3, r3, #6
 800018e:	60d3      	str	r3, [r2, #12]
   * 4 - Z3 >> Z4
   * 5 - Z4 >> Z3
   * 6 - Z4 >> Z1
   * 7 - Z1 >> Z4
   */
  currentMode = 0;
 8000190:	4b17      	ldr	r3, [pc, #92]	; (80001f0 <main+0xa4>)
 8000192:	2200      	movs	r2, #0
 8000194:	801a      	strh	r2, [r3, #0]
  HAL_TIM_Base_Start_IT(&htim4);
 8000196:	4817      	ldr	r0, [pc, #92]	; (80001f4 <main+0xa8>)
 8000198:	f002 f926 	bl	80023e8 <HAL_TIM_Base_Start_IT>
  while (1) {
	  //__HAL_TIM_SET_COUNTER(&htim2, 0x0000);
	  HAL_Delay(1);
 800019c:	2001      	movs	r0, #1
 800019e:	f000 ff03 	bl	8000fa8 <HAL_Delay>
	  if (readyFlag) {
 80001a2:	4b15      	ldr	r3, [pc, #84]	; (80001f8 <main+0xac>)
 80001a4:	781b      	ldrb	r3, [r3, #0]
 80001a6:	2b00      	cmp	r3, #0
 80001a8:	d0f8      	beq.n	800019c <main+0x50>
		  //sprintf(SndBuffer, "Z12: %d, Z21: %d, Z23: %d, Z32: %d, Z34: %d, Z43: %d, Z41: %d, Z14: %d\r\n"
		  //		, Z12 % 1600, Z21 % 1600, Z23 % 1600, Z32 % 1600, Z34 % 1600, Z43 % 1600, Z41 % 1600, Z14 % 1600 );
		  sprintf(SndBuffer, "Z12: %d\r\n", Z12 % 1600);
 80001aa:	4b14      	ldr	r3, [pc, #80]	; (80001fc <main+0xb0>)
 80001ac:	881b      	ldrh	r3, [r3, #0]
 80001ae:	4a14      	ldr	r2, [pc, #80]	; (8000200 <main+0xb4>)
 80001b0:	fba2 1203 	umull	r1, r2, r2, r3
 80001b4:	0a52      	lsrs	r2, r2, #9
 80001b6:	f44f 61c8 	mov.w	r1, #1600	; 0x640
 80001ba:	fb01 f202 	mul.w	r2, r1, r2
 80001be:	1a9b      	subs	r3, r3, r2
 80001c0:	b29b      	uxth	r3, r3
 80001c2:	461a      	mov	r2, r3
 80001c4:	490f      	ldr	r1, [pc, #60]	; (8000204 <main+0xb8>)
 80001c6:	4810      	ldr	r0, [pc, #64]	; (8000208 <main+0xbc>)
 80001c8:	f004 f8b8 	bl	800433c <siprintf>
		  HAL_UART_Transmit(&huart1, (uint8_t *) SndBuffer, sizeof(SndBuffer), 1000);
 80001cc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80001d0:	2264      	movs	r2, #100	; 0x64
 80001d2:	490d      	ldr	r1, [pc, #52]	; (8000208 <main+0xbc>)
 80001d4:	480d      	ldr	r0, [pc, #52]	; (800020c <main+0xc0>)
 80001d6:	f003 ff15 	bl	8004004 <HAL_UART_Transmit>
		  readyFlag = FALSE;
 80001da:	4b07      	ldr	r3, [pc, #28]	; (80001f8 <main+0xac>)
 80001dc:	2200      	movs	r2, #0
 80001de:	701a      	strb	r2, [r3, #0]
	  HAL_Delay(1);
 80001e0:	e7dc      	b.n	800019c <main+0x50>
 80001e2:	bf00      	nop
 80001e4:	200000fc 	.word	0x200000fc
 80001e8:	200001ec 	.word	0x200001ec
 80001ec:	40010c00 	.word	0x40010c00
 80001f0:	20000286 	.word	0x20000286
 80001f4:	2000019c 	.word	0x2000019c
 80001f8:	200000fe 	.word	0x200000fe
 80001fc:	20000238 	.word	0x20000238
 8000200:	51eb851f 	.word	0x51eb851f
 8000204:	08004bc8 	.word	0x08004bc8
 8000208:	2000008c 	.word	0x2000008c
 800020c:	200001f4 	.word	0x200001f4

08000210 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000210:	b580      	push	{r7, lr}
 8000212:	b090      	sub	sp, #64	; 0x40
 8000214:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000216:	f107 0318 	add.w	r3, r7, #24
 800021a:	2228      	movs	r2, #40	; 0x28
 800021c:	2100      	movs	r1, #0
 800021e:	4618      	mov	r0, r3
 8000220:	f004 f884 	bl	800432c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000224:	1d3b      	adds	r3, r7, #4
 8000226:	2200      	movs	r2, #0
 8000228:	601a      	str	r2, [r3, #0]
 800022a:	605a      	str	r2, [r3, #4]
 800022c:	609a      	str	r2, [r3, #8]
 800022e:	60da      	str	r2, [r3, #12]
 8000230:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000232:	2302      	movs	r3, #2
 8000234:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000236:	2301      	movs	r3, #1
 8000238:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800023a:	2310      	movs	r3, #16
 800023c:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800023e:	2302      	movs	r3, #2
 8000240:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8000242:	2300      	movs	r3, #0
 8000244:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8000246:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 800024a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800024c:	f107 0318 	add.w	r3, r7, #24
 8000250:	4618      	mov	r0, r3
 8000252:	f001 fbdb 	bl	8001a0c <HAL_RCC_OscConfig>
 8000256:	4603      	mov	r3, r0
 8000258:	2b00      	cmp	r3, #0
 800025a:	d001      	beq.n	8000260 <SystemClock_Config+0x50>
  {
    Error_Handler();
 800025c:	f000 fa98 	bl	8000790 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000260:	230f      	movs	r3, #15
 8000262:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000264:	2302      	movs	r3, #2
 8000266:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000268:	2300      	movs	r3, #0
 800026a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800026c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000270:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000272:	2300      	movs	r3, #0
 8000274:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000276:	1d3b      	adds	r3, r7, #4
 8000278:	2102      	movs	r1, #2
 800027a:	4618      	mov	r0, r3
 800027c:	f001 fe46 	bl	8001f0c <HAL_RCC_ClockConfig>
 8000280:	4603      	mov	r3, r0
 8000282:	2b00      	cmp	r3, #0
 8000284:	d001      	beq.n	800028a <SystemClock_Config+0x7a>
  {
    Error_Handler();
 8000286:	f000 fa83 	bl	8000790 <Error_Handler>
  }
}
 800028a:	bf00      	nop
 800028c:	3740      	adds	r7, #64	; 0x40
 800028e:	46bd      	mov	sp, r7
 8000290:	bd80      	pop	{r7, pc}
	...

08000294 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000294:	b580      	push	{r7, lr}
 8000296:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000298:	4b17      	ldr	r3, [pc, #92]	; (80002f8 <MX_SPI2_Init+0x64>)
 800029a:	4a18      	ldr	r2, [pc, #96]	; (80002fc <MX_SPI2_Init+0x68>)
 800029c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800029e:	4b16      	ldr	r3, [pc, #88]	; (80002f8 <MX_SPI2_Init+0x64>)
 80002a0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80002a4:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80002a6:	4b14      	ldr	r3, [pc, #80]	; (80002f8 <MX_SPI2_Init+0x64>)
 80002a8:	2200      	movs	r2, #0
 80002aa:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80002ac:	4b12      	ldr	r3, [pc, #72]	; (80002f8 <MX_SPI2_Init+0x64>)
 80002ae:	2200      	movs	r2, #0
 80002b0:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80002b2:	4b11      	ldr	r3, [pc, #68]	; (80002f8 <MX_SPI2_Init+0x64>)
 80002b4:	2200      	movs	r2, #0
 80002b6:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80002b8:	4b0f      	ldr	r3, [pc, #60]	; (80002f8 <MX_SPI2_Init+0x64>)
 80002ba:	2200      	movs	r2, #0
 80002bc:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_HARD_OUTPUT;
 80002be:	4b0e      	ldr	r3, [pc, #56]	; (80002f8 <MX_SPI2_Init+0x64>)
 80002c0:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80002c4:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80002c6:	4b0c      	ldr	r3, [pc, #48]	; (80002f8 <MX_SPI2_Init+0x64>)
 80002c8:	2200      	movs	r2, #0
 80002ca:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80002cc:	4b0a      	ldr	r3, [pc, #40]	; (80002f8 <MX_SPI2_Init+0x64>)
 80002ce:	2200      	movs	r2, #0
 80002d0:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80002d2:	4b09      	ldr	r3, [pc, #36]	; (80002f8 <MX_SPI2_Init+0x64>)
 80002d4:	2200      	movs	r2, #0
 80002d6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80002d8:	4b07      	ldr	r3, [pc, #28]	; (80002f8 <MX_SPI2_Init+0x64>)
 80002da:	2200      	movs	r2, #0
 80002dc:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 80002de:	4b06      	ldr	r3, [pc, #24]	; (80002f8 <MX_SPI2_Init+0x64>)
 80002e0:	220a      	movs	r2, #10
 80002e2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80002e4:	4804      	ldr	r0, [pc, #16]	; (80002f8 <MX_SPI2_Init+0x64>)
 80002e6:	f001 ffab 	bl	8002240 <HAL_SPI_Init>
 80002ea:	4603      	mov	r3, r0
 80002ec:	2b00      	cmp	r3, #0
 80002ee:	d001      	beq.n	80002f4 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 80002f0:	f000 fa4e 	bl	8000790 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80002f4:	bf00      	nop
 80002f6:	bd80      	pop	{r7, pc}
 80002f8:	20000144 	.word	0x20000144
 80002fc:	40003800 	.word	0x40003800

08000300 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000300:	b580      	push	{r7, lr}
 8000302:	b096      	sub	sp, #88	; 0x58
 8000304:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000306:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800030a:	2200      	movs	r2, #0
 800030c:	601a      	str	r2, [r3, #0]
 800030e:	605a      	str	r2, [r3, #4]
 8000310:	609a      	str	r2, [r3, #8]
 8000312:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000314:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000318:	2200      	movs	r2, #0
 800031a:	601a      	str	r2, [r3, #0]
 800031c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800031e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000322:	2200      	movs	r2, #0
 8000324:	601a      	str	r2, [r3, #0]
 8000326:	605a      	str	r2, [r3, #4]
 8000328:	609a      	str	r2, [r3, #8]
 800032a:	60da      	str	r2, [r3, #12]
 800032c:	611a      	str	r2, [r3, #16]
 800032e:	615a      	str	r2, [r3, #20]
 8000330:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000332:	1d3b      	adds	r3, r7, #4
 8000334:	2220      	movs	r2, #32
 8000336:	2100      	movs	r1, #0
 8000338:	4618      	mov	r0, r3
 800033a:	f003 fff7 	bl	800432c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800033e:	4b59      	ldr	r3, [pc, #356]	; (80004a4 <MX_TIM1_Init+0x1a4>)
 8000340:	4a59      	ldr	r2, [pc, #356]	; (80004a8 <MX_TIM1_Init+0x1a8>)
 8000342:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000344:	4b57      	ldr	r3, [pc, #348]	; (80004a4 <MX_TIM1_Init+0x1a4>)
 8000346:	2200      	movs	r2, #0
 8000348:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800034a:	4b56      	ldr	r3, [pc, #344]	; (80004a4 <MX_TIM1_Init+0x1a4>)
 800034c:	2200      	movs	r2, #0
 800034e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 799;
 8000350:	4b54      	ldr	r3, [pc, #336]	; (80004a4 <MX_TIM1_Init+0x1a4>)
 8000352:	f240 321f 	movw	r2, #799	; 0x31f
 8000356:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000358:	4b52      	ldr	r3, [pc, #328]	; (80004a4 <MX_TIM1_Init+0x1a4>)
 800035a:	2200      	movs	r2, #0
 800035c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 7;
 800035e:	4b51      	ldr	r3, [pc, #324]	; (80004a4 <MX_TIM1_Init+0x1a4>)
 8000360:	2207      	movs	r2, #7
 8000362:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000364:	4b4f      	ldr	r3, [pc, #316]	; (80004a4 <MX_TIM1_Init+0x1a4>)
 8000366:	2280      	movs	r2, #128	; 0x80
 8000368:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800036a:	484e      	ldr	r0, [pc, #312]	; (80004a4 <MX_TIM1_Init+0x1a4>)
 800036c:	f001 ffec 	bl	8002348 <HAL_TIM_Base_Init>
 8000370:	4603      	mov	r3, r0
 8000372:	2b00      	cmp	r3, #0
 8000374:	d001      	beq.n	800037a <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8000376:	f000 fa0b 	bl	8000790 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800037a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800037e:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000380:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000384:	4619      	mov	r1, r3
 8000386:	4847      	ldr	r0, [pc, #284]	; (80004a4 <MX_TIM1_Init+0x1a4>)
 8000388:	f002 fec8 	bl	800311c <HAL_TIM_ConfigClockSource>
 800038c:	4603      	mov	r3, r0
 800038e:	2b00      	cmp	r3, #0
 8000390:	d001      	beq.n	8000396 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8000392:	f000 f9fd 	bl	8000790 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim1) != HAL_OK)
 8000396:	4843      	ldr	r0, [pc, #268]	; (80004a4 <MX_TIM1_Init+0x1a4>)
 8000398:	f002 f878 	bl	800248c <HAL_TIM_OC_Init>
 800039c:	4603      	mov	r3, r0
 800039e:	2b00      	cmp	r3, #0
 80003a0:	d001      	beq.n	80003a6 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 80003a2:	f000 f9f5 	bl	8000790 <Error_Handler>
  }
  if (HAL_TIM_OnePulse_Init(&htim1, TIM_OPMODE_SINGLE) != HAL_OK)
 80003a6:	2108      	movs	r1, #8
 80003a8:	483e      	ldr	r0, [pc, #248]	; (80004a4 <MX_TIM1_Init+0x1a4>)
 80003aa:	f002 fc69 	bl	8002c80 <HAL_TIM_OnePulse_Init>
 80003ae:	4603      	mov	r3, r0
 80003b0:	2b00      	cmp	r3, #0
 80003b2:	d001      	beq.n	80003b8 <MX_TIM1_Init+0xb8>
  {
    Error_Handler();
 80003b4:	f000 f9ec 	bl	8000790 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_ENABLE;
 80003b8:	2310      	movs	r3, #16
 80003ba:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_ENABLE;
 80003bc:	2380      	movs	r3, #128	; 0x80
 80003be:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80003c0:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80003c4:	4619      	mov	r1, r3
 80003c6:	4837      	ldr	r0, [pc, #220]	; (80004a4 <MX_TIM1_Init+0x1a4>)
 80003c8:	f003 fd0e 	bl	8003de8 <HAL_TIMEx_MasterConfigSynchronization>
 80003cc:	4603      	mov	r3, r0
 80003ce:	2b00      	cmp	r3, #0
 80003d0:	d001      	beq.n	80003d6 <MX_TIM1_Init+0xd6>
  {
    Error_Handler();
 80003d2:	f000 f9dd 	bl	8000790 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TOGGLE;
 80003d6:	2330      	movs	r3, #48	; 0x30
 80003d8:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 80003da:	2300      	movs	r3, #0
 80003dc:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80003de:	2300      	movs	r3, #0
 80003e0:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80003e2:	2300      	movs	r3, #0
 80003e4:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80003e6:	2300      	movs	r3, #0
 80003e8:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80003ea:	2300      	movs	r3, #0
 80003ec:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80003ee:	2300      	movs	r3, #0
 80003f0:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80003f2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80003f6:	2200      	movs	r2, #0
 80003f8:	4619      	mov	r1, r3
 80003fa:	482a      	ldr	r0, [pc, #168]	; (80004a4 <MX_TIM1_Init+0x1a4>)
 80003fc:	f002 fda2 	bl	8002f44 <HAL_TIM_OC_ConfigChannel>
 8000400:	4603      	mov	r3, r0
 8000402:	2b00      	cmp	r3, #0
 8000404:	d001      	beq.n	800040a <MX_TIM1_Init+0x10a>
  {
    Error_Handler();
 8000406:	f000 f9c3 	bl	8000790 <Error_Handler>
  }
  __HAL_TIM_ENABLE_OCxPRELOAD(&htim1, TIM_CHANNEL_1);
 800040a:	4b26      	ldr	r3, [pc, #152]	; (80004a4 <MX_TIM1_Init+0x1a4>)
 800040c:	681b      	ldr	r3, [r3, #0]
 800040e:	699a      	ldr	r2, [r3, #24]
 8000410:	4b24      	ldr	r3, [pc, #144]	; (80004a4 <MX_TIM1_Init+0x1a4>)
 8000412:	681b      	ldr	r3, [r3, #0]
 8000414:	f042 0208 	orr.w	r2, r2, #8
 8000418:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800041a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800041e:	2204      	movs	r2, #4
 8000420:	4619      	mov	r1, r3
 8000422:	4820      	ldr	r0, [pc, #128]	; (80004a4 <MX_TIM1_Init+0x1a4>)
 8000424:	f002 fd8e 	bl	8002f44 <HAL_TIM_OC_ConfigChannel>
 8000428:	4603      	mov	r3, r0
 800042a:	2b00      	cmp	r3, #0
 800042c:	d001      	beq.n	8000432 <MX_TIM1_Init+0x132>
  {
    Error_Handler();
 800042e:	f000 f9af 	bl	8000790 <Error_Handler>
  }
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000432:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000436:	2208      	movs	r2, #8
 8000438:	4619      	mov	r1, r3
 800043a:	481a      	ldr	r0, [pc, #104]	; (80004a4 <MX_TIM1_Init+0x1a4>)
 800043c:	f002 fd82 	bl	8002f44 <HAL_TIM_OC_ConfigChannel>
 8000440:	4603      	mov	r3, r0
 8000442:	2b00      	cmp	r3, #0
 8000444:	d001      	beq.n	800044a <MX_TIM1_Init+0x14a>
  {
    Error_Handler();
 8000446:	f000 f9a3 	bl	8000790 <Error_Handler>
  }
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800044a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800044e:	220c      	movs	r2, #12
 8000450:	4619      	mov	r1, r3
 8000452:	4814      	ldr	r0, [pc, #80]	; (80004a4 <MX_TIM1_Init+0x1a4>)
 8000454:	f002 fd76 	bl	8002f44 <HAL_TIM_OC_ConfigChannel>
 8000458:	4603      	mov	r3, r0
 800045a:	2b00      	cmp	r3, #0
 800045c:	d001      	beq.n	8000462 <MX_TIM1_Init+0x162>
  {
    Error_Handler();
 800045e:	f000 f997 	bl	8000790 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000462:	2300      	movs	r3, #0
 8000464:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000466:	2300      	movs	r3, #0
 8000468:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800046a:	2300      	movs	r3, #0
 800046c:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800046e:	2300      	movs	r3, #0
 8000470:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000472:	2300      	movs	r3, #0
 8000474:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000476:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800047a:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800047c:	2300      	movs	r3, #0
 800047e:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000480:	1d3b      	adds	r3, r7, #4
 8000482:	4619      	mov	r1, r3
 8000484:	4807      	ldr	r0, [pc, #28]	; (80004a4 <MX_TIM1_Init+0x1a4>)
 8000486:	f003 fd0d 	bl	8003ea4 <HAL_TIMEx_ConfigBreakDeadTime>
 800048a:	4603      	mov	r3, r0
 800048c:	2b00      	cmp	r3, #0
 800048e:	d001      	beq.n	8000494 <MX_TIM1_Init+0x194>
  {
    Error_Handler();
 8000490:	f000 f97e 	bl	8000790 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000494:	4803      	ldr	r0, [pc, #12]	; (80004a4 <MX_TIM1_Init+0x1a4>)
 8000496:	f000 fa97 	bl	80009c8 <HAL_TIM_MspPostInit>

}
 800049a:	bf00      	nop
 800049c:	3758      	adds	r7, #88	; 0x58
 800049e:	46bd      	mov	sp, r7
 80004a0:	bd80      	pop	{r7, pc}
 80004a2:	bf00      	nop
 80004a4:	2000023c 	.word	0x2000023c
 80004a8:	40012c00 	.word	0x40012c00

080004ac <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80004ac:	b580      	push	{r7, lr}
 80004ae:	b090      	sub	sp, #64	; 0x40
 80004b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80004b2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80004b6:	2200      	movs	r2, #0
 80004b8:	601a      	str	r2, [r3, #0]
 80004ba:	605a      	str	r2, [r3, #4]
 80004bc:	609a      	str	r2, [r3, #8]
 80004be:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 80004c0:	f107 031c 	add.w	r3, r7, #28
 80004c4:	2200      	movs	r2, #0
 80004c6:	601a      	str	r2, [r3, #0]
 80004c8:	605a      	str	r2, [r3, #4]
 80004ca:	609a      	str	r2, [r3, #8]
 80004cc:	60da      	str	r2, [r3, #12]
 80004ce:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80004d0:	f107 0314 	add.w	r3, r7, #20
 80004d4:	2200      	movs	r2, #0
 80004d6:	601a      	str	r2, [r3, #0]
 80004d8:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80004da:	1d3b      	adds	r3, r7, #4
 80004dc:	2200      	movs	r2, #0
 80004de:	601a      	str	r2, [r3, #0]
 80004e0:	605a      	str	r2, [r3, #4]
 80004e2:	609a      	str	r2, [r3, #8]
 80004e4:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80004e6:	4b33      	ldr	r3, [pc, #204]	; (80005b4 <MX_TIM2_Init+0x108>)
 80004e8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80004ec:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80004ee:	4b31      	ldr	r3, [pc, #196]	; (80005b4 <MX_TIM2_Init+0x108>)
 80004f0:	2200      	movs	r2, #0
 80004f2:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80004f4:	4b2f      	ldr	r3, [pc, #188]	; (80005b4 <MX_TIM2_Init+0x108>)
 80004f6:	2200      	movs	r2, #0
 80004f8:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 80004fa:	4b2e      	ldr	r3, [pc, #184]	; (80005b4 <MX_TIM2_Init+0x108>)
 80004fc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000500:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000502:	4b2c      	ldr	r3, [pc, #176]	; (80005b4 <MX_TIM2_Init+0x108>)
 8000504:	2200      	movs	r2, #0
 8000506:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000508:	4b2a      	ldr	r3, [pc, #168]	; (80005b4 <MX_TIM2_Init+0x108>)
 800050a:	2280      	movs	r2, #128	; 0x80
 800050c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800050e:	4829      	ldr	r0, [pc, #164]	; (80005b4 <MX_TIM2_Init+0x108>)
 8000510:	f001 ff1a 	bl	8002348 <HAL_TIM_Base_Init>
 8000514:	4603      	mov	r3, r0
 8000516:	2b00      	cmp	r3, #0
 8000518:	d001      	beq.n	800051e <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 800051a:	f000 f939 	bl	8000790 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800051e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000522:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000524:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000528:	4619      	mov	r1, r3
 800052a:	4822      	ldr	r0, [pc, #136]	; (80005b4 <MX_TIM2_Init+0x108>)
 800052c:	f002 fdf6 	bl	800311c <HAL_TIM_ConfigClockSource>
 8000530:	4603      	mov	r3, r0
 8000532:	2b00      	cmp	r3, #0
 8000534:	d001      	beq.n	800053a <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8000536:	f000 f92b 	bl	8000790 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 800053a:	481e      	ldr	r0, [pc, #120]	; (80005b4 <MX_TIM2_Init+0x108>)
 800053c:	f002 f904 	bl	8002748 <HAL_TIM_IC_Init>
 8000540:	4603      	mov	r3, r0
 8000542:	2b00      	cmp	r3, #0
 8000544:	d001      	beq.n	800054a <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 8000546:	f000 f923 	bl	8000790 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 800054a:	2304      	movs	r3, #4
 800054c:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 800054e:	2300      	movs	r3, #0
 8000550:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_SlaveConfigSynchro(&htim2, &sSlaveConfig) != HAL_OK)
 8000552:	f107 031c 	add.w	r3, r7, #28
 8000556:	4619      	mov	r1, r3
 8000558:	4816      	ldr	r0, [pc, #88]	; (80005b4 <MX_TIM2_Init+0x108>)
 800055a:	f002 fea3 	bl	80032a4 <HAL_TIM_SlaveConfigSynchro>
 800055e:	4603      	mov	r3, r0
 8000560:	2b00      	cmp	r3, #0
 8000562:	d001      	beq.n	8000568 <MX_TIM2_Init+0xbc>
  {
    Error_Handler();
 8000564:	f000 f914 	bl	8000790 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000568:	2300      	movs	r3, #0
 800056a:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800056c:	2300      	movs	r3, #0
 800056e:	61bb      	str	r3, [r7, #24]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000570:	f107 0314 	add.w	r3, r7, #20
 8000574:	4619      	mov	r1, r3
 8000576:	480f      	ldr	r0, [pc, #60]	; (80005b4 <MX_TIM2_Init+0x108>)
 8000578:	f003 fc36 	bl	8003de8 <HAL_TIMEx_MasterConfigSynchronization>
 800057c:	4603      	mov	r3, r0
 800057e:	2b00      	cmp	r3, #0
 8000580:	d001      	beq.n	8000586 <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 8000582:	f000 f905 	bl	8000790 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000586:	2300      	movs	r3, #0
 8000588:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 800058a:	2301      	movs	r3, #1
 800058c:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV8;
 800058e:	230c      	movs	r3, #12
 8000590:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 8000592:	2300      	movs	r3, #0
 8000594:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8000596:	1d3b      	adds	r3, r7, #4
 8000598:	2200      	movs	r2, #0
 800059a:	4619      	mov	r1, r3
 800059c:	4805      	ldr	r0, [pc, #20]	; (80005b4 <MX_TIM2_Init+0x108>)
 800059e:	f002 fd29 	bl	8002ff4 <HAL_TIM_IC_ConfigChannel>
 80005a2:	4603      	mov	r3, r0
 80005a4:	2b00      	cmp	r3, #0
 80005a6:	d001      	beq.n	80005ac <MX_TIM2_Init+0x100>
  {
    Error_Handler();
 80005a8:	f000 f8f2 	bl	8000790 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80005ac:	bf00      	nop
 80005ae:	3740      	adds	r7, #64	; 0x40
 80005b0:	46bd      	mov	sp, r7
 80005b2:	bd80      	pop	{r7, pc}
 80005b4:	2000028c 	.word	0x2000028c

080005b8 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80005b8:	b580      	push	{r7, lr}
 80005ba:	b086      	sub	sp, #24
 80005bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80005be:	f107 0308 	add.w	r3, r7, #8
 80005c2:	2200      	movs	r2, #0
 80005c4:	601a      	str	r2, [r3, #0]
 80005c6:	605a      	str	r2, [r3, #4]
 80005c8:	609a      	str	r2, [r3, #8]
 80005ca:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80005cc:	463b      	mov	r3, r7
 80005ce:	2200      	movs	r2, #0
 80005d0:	601a      	str	r2, [r3, #0]
 80005d2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80005d4:	4b1d      	ldr	r3, [pc, #116]	; (800064c <MX_TIM4_Init+0x94>)
 80005d6:	4a1e      	ldr	r2, [pc, #120]	; (8000650 <MX_TIM4_Init+0x98>)
 80005d8:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 4;
 80005da:	4b1c      	ldr	r3, [pc, #112]	; (800064c <MX_TIM4_Init+0x94>)
 80005dc:	2204      	movs	r2, #4
 80005de:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80005e0:	4b1a      	ldr	r3, [pc, #104]	; (800064c <MX_TIM4_Init+0x94>)
 80005e2:	2200      	movs	r2, #0
 80005e4:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 80005e6:	4b19      	ldr	r3, [pc, #100]	; (800064c <MX_TIM4_Init+0x94>)
 80005e8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80005ec:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80005ee:	4b17      	ldr	r3, [pc, #92]	; (800064c <MX_TIM4_Init+0x94>)
 80005f0:	2200      	movs	r2, #0
 80005f2:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80005f4:	4b15      	ldr	r3, [pc, #84]	; (800064c <MX_TIM4_Init+0x94>)
 80005f6:	2280      	movs	r2, #128	; 0x80
 80005f8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80005fa:	4814      	ldr	r0, [pc, #80]	; (800064c <MX_TIM4_Init+0x94>)
 80005fc:	f001 fea4 	bl	8002348 <HAL_TIM_Base_Init>
 8000600:	4603      	mov	r3, r0
 8000602:	2b00      	cmp	r3, #0
 8000604:	d001      	beq.n	800060a <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 8000606:	f000 f8c3 	bl	8000790 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800060a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800060e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8000610:	f107 0308 	add.w	r3, r7, #8
 8000614:	4619      	mov	r1, r3
 8000616:	480d      	ldr	r0, [pc, #52]	; (800064c <MX_TIM4_Init+0x94>)
 8000618:	f002 fd80 	bl	800311c <HAL_TIM_ConfigClockSource>
 800061c:	4603      	mov	r3, r0
 800061e:	2b00      	cmp	r3, #0
 8000620:	d001      	beq.n	8000626 <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 8000622:	f000 f8b5 	bl	8000790 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000626:	2320      	movs	r3, #32
 8000628:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800062a:	2300      	movs	r3, #0
 800062c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800062e:	463b      	mov	r3, r7
 8000630:	4619      	mov	r1, r3
 8000632:	4806      	ldr	r0, [pc, #24]	; (800064c <MX_TIM4_Init+0x94>)
 8000634:	f003 fbd8 	bl	8003de8 <HAL_TIMEx_MasterConfigSynchronization>
 8000638:	4603      	mov	r3, r0
 800063a:	2b00      	cmp	r3, #0
 800063c:	d001      	beq.n	8000642 <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 800063e:	f000 f8a7 	bl	8000790 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8000642:	bf00      	nop
 8000644:	3718      	adds	r7, #24
 8000646:	46bd      	mov	sp, r7
 8000648:	bd80      	pop	{r7, pc}
 800064a:	bf00      	nop
 800064c:	2000019c 	.word	0x2000019c
 8000650:	40000800 	.word	0x40000800

08000654 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000654:	b580      	push	{r7, lr}
 8000656:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000658:	4b11      	ldr	r3, [pc, #68]	; (80006a0 <MX_USART1_UART_Init+0x4c>)
 800065a:	4a12      	ldr	r2, [pc, #72]	; (80006a4 <MX_USART1_UART_Init+0x50>)
 800065c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800065e:	4b10      	ldr	r3, [pc, #64]	; (80006a0 <MX_USART1_UART_Init+0x4c>)
 8000660:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000664:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000666:	4b0e      	ldr	r3, [pc, #56]	; (80006a0 <MX_USART1_UART_Init+0x4c>)
 8000668:	2200      	movs	r2, #0
 800066a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800066c:	4b0c      	ldr	r3, [pc, #48]	; (80006a0 <MX_USART1_UART_Init+0x4c>)
 800066e:	2200      	movs	r2, #0
 8000670:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000672:	4b0b      	ldr	r3, [pc, #44]	; (80006a0 <MX_USART1_UART_Init+0x4c>)
 8000674:	2200      	movs	r2, #0
 8000676:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000678:	4b09      	ldr	r3, [pc, #36]	; (80006a0 <MX_USART1_UART_Init+0x4c>)
 800067a:	220c      	movs	r2, #12
 800067c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800067e:	4b08      	ldr	r3, [pc, #32]	; (80006a0 <MX_USART1_UART_Init+0x4c>)
 8000680:	2200      	movs	r2, #0
 8000682:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000684:	4b06      	ldr	r3, [pc, #24]	; (80006a0 <MX_USART1_UART_Init+0x4c>)
 8000686:	2200      	movs	r2, #0
 8000688:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800068a:	4805      	ldr	r0, [pc, #20]	; (80006a0 <MX_USART1_UART_Init+0x4c>)
 800068c:	f003 fc6d 	bl	8003f6a <HAL_UART_Init>
 8000690:	4603      	mov	r3, r0
 8000692:	2b00      	cmp	r3, #0
 8000694:	d001      	beq.n	800069a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000696:	f000 f87b 	bl	8000790 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800069a:	bf00      	nop
 800069c:	bd80      	pop	{r7, pc}
 800069e:	bf00      	nop
 80006a0:	200001f4 	.word	0x200001f4
 80006a4:	40013800 	.word	0x40013800

080006a8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80006a8:	b580      	push	{r7, lr}
 80006aa:	b082      	sub	sp, #8
 80006ac:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80006ae:	4b0c      	ldr	r3, [pc, #48]	; (80006e0 <MX_DMA_Init+0x38>)
 80006b0:	695b      	ldr	r3, [r3, #20]
 80006b2:	4a0b      	ldr	r2, [pc, #44]	; (80006e0 <MX_DMA_Init+0x38>)
 80006b4:	f043 0301 	orr.w	r3, r3, #1
 80006b8:	6153      	str	r3, [r2, #20]
 80006ba:	4b09      	ldr	r3, [pc, #36]	; (80006e0 <MX_DMA_Init+0x38>)
 80006bc:	695b      	ldr	r3, [r3, #20]
 80006be:	f003 0301 	and.w	r3, r3, #1
 80006c2:	607b      	str	r3, [r7, #4]
 80006c4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 80006c6:	2200      	movs	r2, #0
 80006c8:	2100      	movs	r1, #0
 80006ca:	200f      	movs	r0, #15
 80006cc:	f000 fd67 	bl	800119e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 80006d0:	200f      	movs	r0, #15
 80006d2:	f000 fd80 	bl	80011d6 <HAL_NVIC_EnableIRQ>

}
 80006d6:	bf00      	nop
 80006d8:	3708      	adds	r7, #8
 80006da:	46bd      	mov	sp, r7
 80006dc:	bd80      	pop	{r7, pc}
 80006de:	bf00      	nop
 80006e0:	40021000 	.word	0x40021000

080006e4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006e4:	b580      	push	{r7, lr}
 80006e6:	b086      	sub	sp, #24
 80006e8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006ea:	f107 0308 	add.w	r3, r7, #8
 80006ee:	2200      	movs	r2, #0
 80006f0:	601a      	str	r2, [r3, #0]
 80006f2:	605a      	str	r2, [r3, #4]
 80006f4:	609a      	str	r2, [r3, #8]
 80006f6:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006f8:	4b22      	ldr	r3, [pc, #136]	; (8000784 <MX_GPIO_Init+0xa0>)
 80006fa:	699b      	ldr	r3, [r3, #24]
 80006fc:	4a21      	ldr	r2, [pc, #132]	; (8000784 <MX_GPIO_Init+0xa0>)
 80006fe:	f043 0304 	orr.w	r3, r3, #4
 8000702:	6193      	str	r3, [r2, #24]
 8000704:	4b1f      	ldr	r3, [pc, #124]	; (8000784 <MX_GPIO_Init+0xa0>)
 8000706:	699b      	ldr	r3, [r3, #24]
 8000708:	f003 0304 	and.w	r3, r3, #4
 800070c:	607b      	str	r3, [r7, #4]
 800070e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000710:	4b1c      	ldr	r3, [pc, #112]	; (8000784 <MX_GPIO_Init+0xa0>)
 8000712:	699b      	ldr	r3, [r3, #24]
 8000714:	4a1b      	ldr	r2, [pc, #108]	; (8000784 <MX_GPIO_Init+0xa0>)
 8000716:	f043 0308 	orr.w	r3, r3, #8
 800071a:	6193      	str	r3, [r2, #24]
 800071c:	4b19      	ldr	r3, [pc, #100]	; (8000784 <MX_GPIO_Init+0xa0>)
 800071e:	699b      	ldr	r3, [r3, #24]
 8000720:	f003 0308 	and.w	r3, r3, #8
 8000724:	603b      	str	r3, [r7, #0]
 8000726:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, Z1Receive_Pin|Z2Receive_Pin|Z3Receive_Pin|Z4Receive_Pin, GPIO_PIN_RESET);
 8000728:	2200      	movs	r2, #0
 800072a:	f640 4106 	movw	r1, #3078	; 0xc06
 800072e:	4816      	ldr	r0, [pc, #88]	; (8000788 <MX_GPIO_Init+0xa4>)
 8000730:	f001 f954 	bl	80019dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000734:	2200      	movs	r2, #0
 8000736:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800073a:	4814      	ldr	r0, [pc, #80]	; (800078c <MX_GPIO_Init+0xa8>)
 800073c:	f001 f94e 	bl	80019dc <HAL_GPIO_WritePin>

  /*Configure GPIO pins : Z1Receive_Pin Z2Receive_Pin Z3Receive_Pin Z4Receive_Pin */
  GPIO_InitStruct.Pin = Z1Receive_Pin|Z2Receive_Pin|Z3Receive_Pin|Z4Receive_Pin;
 8000740:	f640 4306 	movw	r3, #3078	; 0xc06
 8000744:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000746:	2301      	movs	r3, #1
 8000748:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800074a:	2300      	movs	r3, #0
 800074c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800074e:	2302      	movs	r3, #2
 8000750:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000752:	f107 0308 	add.w	r3, r7, #8
 8000756:	4619      	mov	r1, r3
 8000758:	480b      	ldr	r0, [pc, #44]	; (8000788 <MX_GPIO_Init+0xa4>)
 800075a:	f000 ffbb 	bl	80016d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 800075e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000762:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000764:	2301      	movs	r3, #1
 8000766:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000768:	2300      	movs	r3, #0
 800076a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800076c:	2302      	movs	r3, #2
 800076e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8000770:	f107 0308 	add.w	r3, r7, #8
 8000774:	4619      	mov	r1, r3
 8000776:	4805      	ldr	r0, [pc, #20]	; (800078c <MX_GPIO_Init+0xa8>)
 8000778:	f000 ffac 	bl	80016d4 <HAL_GPIO_Init>

}
 800077c:	bf00      	nop
 800077e:	3718      	adds	r7, #24
 8000780:	46bd      	mov	sp, r7
 8000782:	bd80      	pop	{r7, pc}
 8000784:	40021000 	.word	0x40021000
 8000788:	40010c00 	.word	0x40010c00
 800078c:	40010800 	.word	0x40010800

08000790 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000790:	b480      	push	{r7}
 8000792:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000794:	b672      	cpsid	i
}
 8000796:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000798:	e7fe      	b.n	8000798 <Error_Handler+0x8>
	...

0800079c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800079c:	b480      	push	{r7}
 800079e:	b085      	sub	sp, #20
 80007a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80007a2:	4b15      	ldr	r3, [pc, #84]	; (80007f8 <HAL_MspInit+0x5c>)
 80007a4:	699b      	ldr	r3, [r3, #24]
 80007a6:	4a14      	ldr	r2, [pc, #80]	; (80007f8 <HAL_MspInit+0x5c>)
 80007a8:	f043 0301 	orr.w	r3, r3, #1
 80007ac:	6193      	str	r3, [r2, #24]
 80007ae:	4b12      	ldr	r3, [pc, #72]	; (80007f8 <HAL_MspInit+0x5c>)
 80007b0:	699b      	ldr	r3, [r3, #24]
 80007b2:	f003 0301 	and.w	r3, r3, #1
 80007b6:	60bb      	str	r3, [r7, #8]
 80007b8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80007ba:	4b0f      	ldr	r3, [pc, #60]	; (80007f8 <HAL_MspInit+0x5c>)
 80007bc:	69db      	ldr	r3, [r3, #28]
 80007be:	4a0e      	ldr	r2, [pc, #56]	; (80007f8 <HAL_MspInit+0x5c>)
 80007c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007c4:	61d3      	str	r3, [r2, #28]
 80007c6:	4b0c      	ldr	r3, [pc, #48]	; (80007f8 <HAL_MspInit+0x5c>)
 80007c8:	69db      	ldr	r3, [r3, #28]
 80007ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007ce:	607b      	str	r3, [r7, #4]
 80007d0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 80007d2:	4b0a      	ldr	r3, [pc, #40]	; (80007fc <HAL_MspInit+0x60>)
 80007d4:	685b      	ldr	r3, [r3, #4]
 80007d6:	60fb      	str	r3, [r7, #12]
 80007d8:	68fb      	ldr	r3, [r7, #12]
 80007da:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80007de:	60fb      	str	r3, [r7, #12]
 80007e0:	68fb      	ldr	r3, [r7, #12]
 80007e2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80007e6:	60fb      	str	r3, [r7, #12]
 80007e8:	4a04      	ldr	r2, [pc, #16]	; (80007fc <HAL_MspInit+0x60>)
 80007ea:	68fb      	ldr	r3, [r7, #12]
 80007ec:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007ee:	bf00      	nop
 80007f0:	3714      	adds	r7, #20
 80007f2:	46bd      	mov	sp, r7
 80007f4:	bc80      	pop	{r7}
 80007f6:	4770      	bx	lr
 80007f8:	40021000 	.word	0x40021000
 80007fc:	40010000 	.word	0x40010000

08000800 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000800:	b580      	push	{r7, lr}
 8000802:	b088      	sub	sp, #32
 8000804:	af00      	add	r7, sp, #0
 8000806:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000808:	f107 0310 	add.w	r3, r7, #16
 800080c:	2200      	movs	r2, #0
 800080e:	601a      	str	r2, [r3, #0]
 8000810:	605a      	str	r2, [r3, #4]
 8000812:	609a      	str	r2, [r3, #8]
 8000814:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI2)
 8000816:	687b      	ldr	r3, [r7, #4]
 8000818:	681b      	ldr	r3, [r3, #0]
 800081a:	4a1c      	ldr	r2, [pc, #112]	; (800088c <HAL_SPI_MspInit+0x8c>)
 800081c:	4293      	cmp	r3, r2
 800081e:	d131      	bne.n	8000884 <HAL_SPI_MspInit+0x84>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000820:	4b1b      	ldr	r3, [pc, #108]	; (8000890 <HAL_SPI_MspInit+0x90>)
 8000822:	69db      	ldr	r3, [r3, #28]
 8000824:	4a1a      	ldr	r2, [pc, #104]	; (8000890 <HAL_SPI_MspInit+0x90>)
 8000826:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800082a:	61d3      	str	r3, [r2, #28]
 800082c:	4b18      	ldr	r3, [pc, #96]	; (8000890 <HAL_SPI_MspInit+0x90>)
 800082e:	69db      	ldr	r3, [r3, #28]
 8000830:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000834:	60fb      	str	r3, [r7, #12]
 8000836:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000838:	4b15      	ldr	r3, [pc, #84]	; (8000890 <HAL_SPI_MspInit+0x90>)
 800083a:	699b      	ldr	r3, [r3, #24]
 800083c:	4a14      	ldr	r2, [pc, #80]	; (8000890 <HAL_SPI_MspInit+0x90>)
 800083e:	f043 0308 	orr.w	r3, r3, #8
 8000842:	6193      	str	r3, [r2, #24]
 8000844:	4b12      	ldr	r3, [pc, #72]	; (8000890 <HAL_SPI_MspInit+0x90>)
 8000846:	699b      	ldr	r3, [r3, #24]
 8000848:	f003 0308 	and.w	r3, r3, #8
 800084c:	60bb      	str	r3, [r7, #8]
 800084e:	68bb      	ldr	r3, [r7, #8]
    PB12     ------> SPI2_NSS
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15;
 8000850:	f44f 4330 	mov.w	r3, #45056	; 0xb000
 8000854:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000856:	2302      	movs	r3, #2
 8000858:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800085a:	2303      	movs	r3, #3
 800085c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800085e:	f107 0310 	add.w	r3, r7, #16
 8000862:	4619      	mov	r1, r3
 8000864:	480b      	ldr	r0, [pc, #44]	; (8000894 <HAL_SPI_MspInit+0x94>)
 8000866:	f000 ff35 	bl	80016d4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_14;
 800086a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800086e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000870:	2300      	movs	r3, #0
 8000872:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000874:	2300      	movs	r3, #0
 8000876:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000878:	f107 0310 	add.w	r3, r7, #16
 800087c:	4619      	mov	r1, r3
 800087e:	4805      	ldr	r0, [pc, #20]	; (8000894 <HAL_SPI_MspInit+0x94>)
 8000880:	f000 ff28 	bl	80016d4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8000884:	bf00      	nop
 8000886:	3720      	adds	r7, #32
 8000888:	46bd      	mov	sp, r7
 800088a:	bd80      	pop	{r7, pc}
 800088c:	40003800 	.word	0x40003800
 8000890:	40021000 	.word	0x40021000
 8000894:	40010c00 	.word	0x40010c00

08000898 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000898:	b580      	push	{r7, lr}
 800089a:	b08a      	sub	sp, #40	; 0x28
 800089c:	af00      	add	r7, sp, #0
 800089e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008a0:	f107 0318 	add.w	r3, r7, #24
 80008a4:	2200      	movs	r2, #0
 80008a6:	601a      	str	r2, [r3, #0]
 80008a8:	605a      	str	r2, [r3, #4]
 80008aa:	609a      	str	r2, [r3, #8]
 80008ac:	60da      	str	r2, [r3, #12]
  if(htim_base->Instance==TIM1)
 80008ae:	687b      	ldr	r3, [r7, #4]
 80008b0:	681b      	ldr	r3, [r3, #0]
 80008b2:	4a3f      	ldr	r2, [pc, #252]	; (80009b0 <HAL_TIM_Base_MspInit+0x118>)
 80008b4:	4293      	cmp	r3, r2
 80008b6:	d10c      	bne.n	80008d2 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80008b8:	4b3e      	ldr	r3, [pc, #248]	; (80009b4 <HAL_TIM_Base_MspInit+0x11c>)
 80008ba:	699b      	ldr	r3, [r3, #24]
 80008bc:	4a3d      	ldr	r2, [pc, #244]	; (80009b4 <HAL_TIM_Base_MspInit+0x11c>)
 80008be:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80008c2:	6193      	str	r3, [r2, #24]
 80008c4:	4b3b      	ldr	r3, [pc, #236]	; (80009b4 <HAL_TIM_Base_MspInit+0x11c>)
 80008c6:	699b      	ldr	r3, [r3, #24]
 80008c8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80008cc:	617b      	str	r3, [r7, #20]
 80008ce:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 80008d0:	e06a      	b.n	80009a8 <HAL_TIM_Base_MspInit+0x110>
  else if(htim_base->Instance==TIM2)
 80008d2:	687b      	ldr	r3, [r7, #4]
 80008d4:	681b      	ldr	r3, [r3, #0]
 80008d6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80008da:	d14c      	bne.n	8000976 <HAL_TIM_Base_MspInit+0xde>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80008dc:	4b35      	ldr	r3, [pc, #212]	; (80009b4 <HAL_TIM_Base_MspInit+0x11c>)
 80008de:	69db      	ldr	r3, [r3, #28]
 80008e0:	4a34      	ldr	r2, [pc, #208]	; (80009b4 <HAL_TIM_Base_MspInit+0x11c>)
 80008e2:	f043 0301 	orr.w	r3, r3, #1
 80008e6:	61d3      	str	r3, [r2, #28]
 80008e8:	4b32      	ldr	r3, [pc, #200]	; (80009b4 <HAL_TIM_Base_MspInit+0x11c>)
 80008ea:	69db      	ldr	r3, [r3, #28]
 80008ec:	f003 0301 	and.w	r3, r3, #1
 80008f0:	613b      	str	r3, [r7, #16]
 80008f2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008f4:	4b2f      	ldr	r3, [pc, #188]	; (80009b4 <HAL_TIM_Base_MspInit+0x11c>)
 80008f6:	699b      	ldr	r3, [r3, #24]
 80008f8:	4a2e      	ldr	r2, [pc, #184]	; (80009b4 <HAL_TIM_Base_MspInit+0x11c>)
 80008fa:	f043 0304 	orr.w	r3, r3, #4
 80008fe:	6193      	str	r3, [r2, #24]
 8000900:	4b2c      	ldr	r3, [pc, #176]	; (80009b4 <HAL_TIM_Base_MspInit+0x11c>)
 8000902:	699b      	ldr	r3, [r3, #24]
 8000904:	f003 0304 	and.w	r3, r3, #4
 8000908:	60fb      	str	r3, [r7, #12]
 800090a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = SensorInput_Pin;
 800090c:	2301      	movs	r3, #1
 800090e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000910:	2300      	movs	r3, #0
 8000912:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000914:	2300      	movs	r3, #0
 8000916:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(SensorInput_GPIO_Port, &GPIO_InitStruct);
 8000918:	f107 0318 	add.w	r3, r7, #24
 800091c:	4619      	mov	r1, r3
 800091e:	4826      	ldr	r0, [pc, #152]	; (80009b8 <HAL_TIM_Base_MspInit+0x120>)
 8000920:	f000 fed8 	bl	80016d4 <HAL_GPIO_Init>
    hdma_tim2_ch1.Instance = DMA1_Channel5;
 8000924:	4b25      	ldr	r3, [pc, #148]	; (80009bc <HAL_TIM_Base_MspInit+0x124>)
 8000926:	4a26      	ldr	r2, [pc, #152]	; (80009c0 <HAL_TIM_Base_MspInit+0x128>)
 8000928:	601a      	str	r2, [r3, #0]
    hdma_tim2_ch1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800092a:	4b24      	ldr	r3, [pc, #144]	; (80009bc <HAL_TIM_Base_MspInit+0x124>)
 800092c:	2200      	movs	r2, #0
 800092e:	605a      	str	r2, [r3, #4]
    hdma_tim2_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000930:	4b22      	ldr	r3, [pc, #136]	; (80009bc <HAL_TIM_Base_MspInit+0x124>)
 8000932:	2200      	movs	r2, #0
 8000934:	609a      	str	r2, [r3, #8]
    hdma_tim2_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8000936:	4b21      	ldr	r3, [pc, #132]	; (80009bc <HAL_TIM_Base_MspInit+0x124>)
 8000938:	2280      	movs	r2, #128	; 0x80
 800093a:	60da      	str	r2, [r3, #12]
    hdma_tim2_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800093c:	4b1f      	ldr	r3, [pc, #124]	; (80009bc <HAL_TIM_Base_MspInit+0x124>)
 800093e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000942:	611a      	str	r2, [r3, #16]
    hdma_tim2_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000944:	4b1d      	ldr	r3, [pc, #116]	; (80009bc <HAL_TIM_Base_MspInit+0x124>)
 8000946:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800094a:	615a      	str	r2, [r3, #20]
    hdma_tim2_ch1.Init.Mode = DMA_CIRCULAR;
 800094c:	4b1b      	ldr	r3, [pc, #108]	; (80009bc <HAL_TIM_Base_MspInit+0x124>)
 800094e:	2220      	movs	r2, #32
 8000950:	619a      	str	r2, [r3, #24]
    hdma_tim2_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8000952:	4b1a      	ldr	r3, [pc, #104]	; (80009bc <HAL_TIM_Base_MspInit+0x124>)
 8000954:	2200      	movs	r2, #0
 8000956:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_tim2_ch1) != HAL_OK)
 8000958:	4818      	ldr	r0, [pc, #96]	; (80009bc <HAL_TIM_Base_MspInit+0x124>)
 800095a:	f000 fc57 	bl	800120c <HAL_DMA_Init>
 800095e:	4603      	mov	r3, r0
 8000960:	2b00      	cmp	r3, #0
 8000962:	d001      	beq.n	8000968 <HAL_TIM_Base_MspInit+0xd0>
      Error_Handler();
 8000964:	f7ff ff14 	bl	8000790 <Error_Handler>
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC1],hdma_tim2_ch1);
 8000968:	687b      	ldr	r3, [r7, #4]
 800096a:	4a14      	ldr	r2, [pc, #80]	; (80009bc <HAL_TIM_Base_MspInit+0x124>)
 800096c:	625a      	str	r2, [r3, #36]	; 0x24
 800096e:	4a13      	ldr	r2, [pc, #76]	; (80009bc <HAL_TIM_Base_MspInit+0x124>)
 8000970:	687b      	ldr	r3, [r7, #4]
 8000972:	6253      	str	r3, [r2, #36]	; 0x24
}
 8000974:	e018      	b.n	80009a8 <HAL_TIM_Base_MspInit+0x110>
  else if(htim_base->Instance==TIM4)
 8000976:	687b      	ldr	r3, [r7, #4]
 8000978:	681b      	ldr	r3, [r3, #0]
 800097a:	4a12      	ldr	r2, [pc, #72]	; (80009c4 <HAL_TIM_Base_MspInit+0x12c>)
 800097c:	4293      	cmp	r3, r2
 800097e:	d113      	bne.n	80009a8 <HAL_TIM_Base_MspInit+0x110>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8000980:	4b0c      	ldr	r3, [pc, #48]	; (80009b4 <HAL_TIM_Base_MspInit+0x11c>)
 8000982:	69db      	ldr	r3, [r3, #28]
 8000984:	4a0b      	ldr	r2, [pc, #44]	; (80009b4 <HAL_TIM_Base_MspInit+0x11c>)
 8000986:	f043 0304 	orr.w	r3, r3, #4
 800098a:	61d3      	str	r3, [r2, #28]
 800098c:	4b09      	ldr	r3, [pc, #36]	; (80009b4 <HAL_TIM_Base_MspInit+0x11c>)
 800098e:	69db      	ldr	r3, [r3, #28]
 8000990:	f003 0304 	and.w	r3, r3, #4
 8000994:	60bb      	str	r3, [r7, #8]
 8000996:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8000998:	2200      	movs	r2, #0
 800099a:	2100      	movs	r1, #0
 800099c:	201e      	movs	r0, #30
 800099e:	f000 fbfe 	bl	800119e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80009a2:	201e      	movs	r0, #30
 80009a4:	f000 fc17 	bl	80011d6 <HAL_NVIC_EnableIRQ>
}
 80009a8:	bf00      	nop
 80009aa:	3728      	adds	r7, #40	; 0x28
 80009ac:	46bd      	mov	sp, r7
 80009ae:	bd80      	pop	{r7, pc}
 80009b0:	40012c00 	.word	0x40012c00
 80009b4:	40021000 	.word	0x40021000
 80009b8:	40010800 	.word	0x40010800
 80009bc:	20000100 	.word	0x20000100
 80009c0:	40020058 	.word	0x40020058
 80009c4:	40000800 	.word	0x40000800

080009c8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80009c8:	b580      	push	{r7, lr}
 80009ca:	b088      	sub	sp, #32
 80009cc:	af00      	add	r7, sp, #0
 80009ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009d0:	f107 0310 	add.w	r3, r7, #16
 80009d4:	2200      	movs	r2, #0
 80009d6:	601a      	str	r2, [r3, #0]
 80009d8:	605a      	str	r2, [r3, #4]
 80009da:	609a      	str	r2, [r3, #8]
 80009dc:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM1)
 80009de:	687b      	ldr	r3, [r7, #4]
 80009e0:	681b      	ldr	r3, [r3, #0]
 80009e2:	4a10      	ldr	r2, [pc, #64]	; (8000a24 <HAL_TIM_MspPostInit+0x5c>)
 80009e4:	4293      	cmp	r3, r2
 80009e6:	d118      	bne.n	8000a1a <HAL_TIM_MspPostInit+0x52>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009e8:	4b0f      	ldr	r3, [pc, #60]	; (8000a28 <HAL_TIM_MspPostInit+0x60>)
 80009ea:	699b      	ldr	r3, [r3, #24]
 80009ec:	4a0e      	ldr	r2, [pc, #56]	; (8000a28 <HAL_TIM_MspPostInit+0x60>)
 80009ee:	f043 0304 	orr.w	r3, r3, #4
 80009f2:	6193      	str	r3, [r2, #24]
 80009f4:	4b0c      	ldr	r3, [pc, #48]	; (8000a28 <HAL_TIM_MspPostInit+0x60>)
 80009f6:	699b      	ldr	r3, [r3, #24]
 80009f8:	f003 0304 	and.w	r3, r3, #4
 80009fc:	60fb      	str	r3, [r7, #12]
 80009fe:	68fb      	ldr	r3, [r7, #12]
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    PA11     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = Z1_Pin|Z2_Pin|Z3_Pin|Z4_Pin;
 8000a00:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8000a04:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a06:	2302      	movs	r3, #2
 8000a08:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a0a:	2302      	movs	r3, #2
 8000a0c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a0e:	f107 0310 	add.w	r3, r7, #16
 8000a12:	4619      	mov	r1, r3
 8000a14:	4805      	ldr	r0, [pc, #20]	; (8000a2c <HAL_TIM_MspPostInit+0x64>)
 8000a16:	f000 fe5d 	bl	80016d4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8000a1a:	bf00      	nop
 8000a1c:	3720      	adds	r7, #32
 8000a1e:	46bd      	mov	sp, r7
 8000a20:	bd80      	pop	{r7, pc}
 8000a22:	bf00      	nop
 8000a24:	40012c00 	.word	0x40012c00
 8000a28:	40021000 	.word	0x40021000
 8000a2c:	40010800 	.word	0x40010800

08000a30 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000a30:	b580      	push	{r7, lr}
 8000a32:	b08a      	sub	sp, #40	; 0x28
 8000a34:	af00      	add	r7, sp, #0
 8000a36:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a38:	f107 0314 	add.w	r3, r7, #20
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	601a      	str	r2, [r3, #0]
 8000a40:	605a      	str	r2, [r3, #4]
 8000a42:	609a      	str	r2, [r3, #8]
 8000a44:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8000a46:	687b      	ldr	r3, [r7, #4]
 8000a48:	681b      	ldr	r3, [r3, #0]
 8000a4a:	4a22      	ldr	r2, [pc, #136]	; (8000ad4 <HAL_UART_MspInit+0xa4>)
 8000a4c:	4293      	cmp	r3, r2
 8000a4e:	d13d      	bne.n	8000acc <HAL_UART_MspInit+0x9c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000a50:	4b21      	ldr	r3, [pc, #132]	; (8000ad8 <HAL_UART_MspInit+0xa8>)
 8000a52:	699b      	ldr	r3, [r3, #24]
 8000a54:	4a20      	ldr	r2, [pc, #128]	; (8000ad8 <HAL_UART_MspInit+0xa8>)
 8000a56:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a5a:	6193      	str	r3, [r2, #24]
 8000a5c:	4b1e      	ldr	r3, [pc, #120]	; (8000ad8 <HAL_UART_MspInit+0xa8>)
 8000a5e:	699b      	ldr	r3, [r3, #24]
 8000a60:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a64:	613b      	str	r3, [r7, #16]
 8000a66:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a68:	4b1b      	ldr	r3, [pc, #108]	; (8000ad8 <HAL_UART_MspInit+0xa8>)
 8000a6a:	699b      	ldr	r3, [r3, #24]
 8000a6c:	4a1a      	ldr	r2, [pc, #104]	; (8000ad8 <HAL_UART_MspInit+0xa8>)
 8000a6e:	f043 0308 	orr.w	r3, r3, #8
 8000a72:	6193      	str	r3, [r2, #24]
 8000a74:	4b18      	ldr	r3, [pc, #96]	; (8000ad8 <HAL_UART_MspInit+0xa8>)
 8000a76:	699b      	ldr	r3, [r3, #24]
 8000a78:	f003 0308 	and.w	r3, r3, #8
 8000a7c:	60fb      	str	r3, [r7, #12]
 8000a7e:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000a80:	2340      	movs	r3, #64	; 0x40
 8000a82:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a84:	2302      	movs	r3, #2
 8000a86:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000a88:	2303      	movs	r3, #3
 8000a8a:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a8c:	f107 0314 	add.w	r3, r7, #20
 8000a90:	4619      	mov	r1, r3
 8000a92:	4812      	ldr	r0, [pc, #72]	; (8000adc <HAL_UART_MspInit+0xac>)
 8000a94:	f000 fe1e 	bl	80016d4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000a98:	2380      	movs	r3, #128	; 0x80
 8000a9a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a9c:	2300      	movs	r3, #0
 8000a9e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aa0:	2300      	movs	r3, #0
 8000aa2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000aa4:	f107 0314 	add.w	r3, r7, #20
 8000aa8:	4619      	mov	r1, r3
 8000aaa:	480c      	ldr	r0, [pc, #48]	; (8000adc <HAL_UART_MspInit+0xac>)
 8000aac:	f000 fe12 	bl	80016d4 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_USART1_ENABLE();
 8000ab0:	4b0b      	ldr	r3, [pc, #44]	; (8000ae0 <HAL_UART_MspInit+0xb0>)
 8000ab2:	685b      	ldr	r3, [r3, #4]
 8000ab4:	627b      	str	r3, [r7, #36]	; 0x24
 8000ab6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ab8:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8000abc:	627b      	str	r3, [r7, #36]	; 0x24
 8000abe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ac0:	f043 0304 	orr.w	r3, r3, #4
 8000ac4:	627b      	str	r3, [r7, #36]	; 0x24
 8000ac6:	4a06      	ldr	r2, [pc, #24]	; (8000ae0 <HAL_UART_MspInit+0xb0>)
 8000ac8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000aca:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000acc:	bf00      	nop
 8000ace:	3728      	adds	r7, #40	; 0x28
 8000ad0:	46bd      	mov	sp, r7
 8000ad2:	bd80      	pop	{r7, pc}
 8000ad4:	40013800 	.word	0x40013800
 8000ad8:	40021000 	.word	0x40021000
 8000adc:	40010c00 	.word	0x40010c00
 8000ae0:	40010000 	.word	0x40010000

08000ae4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ae4:	b480      	push	{r7}
 8000ae6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000ae8:	e7fe      	b.n	8000ae8 <NMI_Handler+0x4>

08000aea <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000aea:	b480      	push	{r7}
 8000aec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000aee:	e7fe      	b.n	8000aee <HardFault_Handler+0x4>

08000af0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000af0:	b480      	push	{r7}
 8000af2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000af4:	e7fe      	b.n	8000af4 <MemManage_Handler+0x4>

08000af6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000af6:	b480      	push	{r7}
 8000af8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000afa:	e7fe      	b.n	8000afa <BusFault_Handler+0x4>

08000afc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000afc:	b480      	push	{r7}
 8000afe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b00:	e7fe      	b.n	8000b00 <UsageFault_Handler+0x4>

08000b02 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b02:	b480      	push	{r7}
 8000b04:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b06:	bf00      	nop
 8000b08:	46bd      	mov	sp, r7
 8000b0a:	bc80      	pop	{r7}
 8000b0c:	4770      	bx	lr

08000b0e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b0e:	b480      	push	{r7}
 8000b10:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b12:	bf00      	nop
 8000b14:	46bd      	mov	sp, r7
 8000b16:	bc80      	pop	{r7}
 8000b18:	4770      	bx	lr

08000b1a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b1a:	b480      	push	{r7}
 8000b1c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b1e:	bf00      	nop
 8000b20:	46bd      	mov	sp, r7
 8000b22:	bc80      	pop	{r7}
 8000b24:	4770      	bx	lr

08000b26 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b26:	b580      	push	{r7, lr}
 8000b28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b2a:	f000 fa21 	bl	8000f70 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b2e:	bf00      	nop
 8000b30:	bd80      	pop	{r7, pc}
	...

08000b34 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8000b34:	b580      	push	{r7, lr}
 8000b36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */
	if (noise_count-- == 0) {
 8000b38:	4b30      	ldr	r3, [pc, #192]	; (8000bfc <DMA1_Channel5_IRQHandler+0xc8>)
 8000b3a:	881b      	ldrh	r3, [r3, #0]
 8000b3c:	1e5a      	subs	r2, r3, #1
 8000b3e:	b291      	uxth	r1, r2
 8000b40:	4a2e      	ldr	r2, [pc, #184]	; (8000bfc <DMA1_Channel5_IRQHandler+0xc8>)
 8000b42:	8011      	strh	r1, [r2, #0]
 8000b44:	2b00      	cmp	r3, #0
 8000b46:	d154      	bne.n	8000bf2 <DMA1_Channel5_IRQHandler+0xbe>
		switch (currentMode) {
 8000b48:	4b2d      	ldr	r3, [pc, #180]	; (8000c00 <DMA1_Channel5_IRQHandler+0xcc>)
 8000b4a:	881b      	ldrh	r3, [r3, #0]
 8000b4c:	3b01      	subs	r3, #1
 8000b4e:	2b07      	cmp	r3, #7
 8000b50:	d845      	bhi.n	8000bde <DMA1_Channel5_IRQHandler+0xaa>
 8000b52:	a201      	add	r2, pc, #4	; (adr r2, 8000b58 <DMA1_Channel5_IRQHandler+0x24>)
 8000b54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b58:	08000b79 	.word	0x08000b79
 8000b5c:	08000b8b 	.word	0x08000b8b
 8000b60:	08000b97 	.word	0x08000b97
 8000b64:	08000ba3 	.word	0x08000ba3
 8000b68:	08000baf 	.word	0x08000baf
 8000b6c:	08000bbb 	.word	0x08000bbb
 8000b70:	08000bc7 	.word	0x08000bc7
 8000b74:	08000bd3 	.word	0x08000bd3
			case 1: { // Z1 > Z2
				Z12 = fastCounter & 0x0FFFF;
 8000b78:	4b22      	ldr	r3, [pc, #136]	; (8000c04 <DMA1_Channel5_IRQHandler+0xd0>)
 8000b7a:	681b      	ldr	r3, [r3, #0]
 8000b7c:	b29a      	uxth	r2, r3
 8000b7e:	4b22      	ldr	r3, [pc, #136]	; (8000c08 <DMA1_Channel5_IRQHandler+0xd4>)
 8000b80:	801a      	strh	r2, [r3, #0]
				readyFlag = TRUE;
 8000b82:	4b22      	ldr	r3, [pc, #136]	; (8000c0c <DMA1_Channel5_IRQHandler+0xd8>)
 8000b84:	2201      	movs	r2, #1
 8000b86:	701a      	strb	r2, [r3, #0]
				break;
 8000b88:	e029      	b.n	8000bde <DMA1_Channel5_IRQHandler+0xaa>
			}
			case 2: { // Z2 > Z1
				Z21 = fastCounter & 0x0FFFF;
 8000b8a:	4b1e      	ldr	r3, [pc, #120]	; (8000c04 <DMA1_Channel5_IRQHandler+0xd0>)
 8000b8c:	681b      	ldr	r3, [r3, #0]
 8000b8e:	b29a      	uxth	r2, r3
 8000b90:	4b1f      	ldr	r3, [pc, #124]	; (8000c10 <DMA1_Channel5_IRQHandler+0xdc>)
 8000b92:	801a      	strh	r2, [r3, #0]
				break;
 8000b94:	e023      	b.n	8000bde <DMA1_Channel5_IRQHandler+0xaa>
			}
			case 3: { // Z2 > Z3
				Z23 = fastCounter & 0x0FFFF;
 8000b96:	4b1b      	ldr	r3, [pc, #108]	; (8000c04 <DMA1_Channel5_IRQHandler+0xd0>)
 8000b98:	681b      	ldr	r3, [r3, #0]
 8000b9a:	b29a      	uxth	r2, r3
 8000b9c:	4b1d      	ldr	r3, [pc, #116]	; (8000c14 <DMA1_Channel5_IRQHandler+0xe0>)
 8000b9e:	801a      	strh	r2, [r3, #0]
				break;
 8000ba0:	e01d      	b.n	8000bde <DMA1_Channel5_IRQHandler+0xaa>
			}
			case 4: { // Z3 > Z2
				Z32 = fastCounter & 0x0FFFF;
 8000ba2:	4b18      	ldr	r3, [pc, #96]	; (8000c04 <DMA1_Channel5_IRQHandler+0xd0>)
 8000ba4:	681b      	ldr	r3, [r3, #0]
 8000ba6:	b29a      	uxth	r2, r3
 8000ba8:	4b1b      	ldr	r3, [pc, #108]	; (8000c18 <DMA1_Channel5_IRQHandler+0xe4>)
 8000baa:	801a      	strh	r2, [r3, #0]
				break;
 8000bac:	e017      	b.n	8000bde <DMA1_Channel5_IRQHandler+0xaa>
			}
			case 5: { // Z3 > Z4
				Z34 = fastCounter & 0x0FFFF;
 8000bae:	4b15      	ldr	r3, [pc, #84]	; (8000c04 <DMA1_Channel5_IRQHandler+0xd0>)
 8000bb0:	681b      	ldr	r3, [r3, #0]
 8000bb2:	b29a      	uxth	r2, r3
 8000bb4:	4b19      	ldr	r3, [pc, #100]	; (8000c1c <DMA1_Channel5_IRQHandler+0xe8>)
 8000bb6:	801a      	strh	r2, [r3, #0]
				break;
 8000bb8:	e011      	b.n	8000bde <DMA1_Channel5_IRQHandler+0xaa>
			}
			case 6: { // Z4 > Z3
				Z43 = fastCounter & 0x0FFFF;
 8000bba:	4b12      	ldr	r3, [pc, #72]	; (8000c04 <DMA1_Channel5_IRQHandler+0xd0>)
 8000bbc:	681b      	ldr	r3, [r3, #0]
 8000bbe:	b29a      	uxth	r2, r3
 8000bc0:	4b17      	ldr	r3, [pc, #92]	; (8000c20 <DMA1_Channel5_IRQHandler+0xec>)
 8000bc2:	801a      	strh	r2, [r3, #0]
				break;
 8000bc4:	e00b      	b.n	8000bde <DMA1_Channel5_IRQHandler+0xaa>
			}
			case 7: { // Z4 > Z1
				Z41 = fastCounter & 0x0FFFF;
 8000bc6:	4b0f      	ldr	r3, [pc, #60]	; (8000c04 <DMA1_Channel5_IRQHandler+0xd0>)
 8000bc8:	681b      	ldr	r3, [r3, #0]
 8000bca:	b29a      	uxth	r2, r3
 8000bcc:	4b15      	ldr	r3, [pc, #84]	; (8000c24 <DMA1_Channel5_IRQHandler+0xf0>)
 8000bce:	801a      	strh	r2, [r3, #0]
				break;
 8000bd0:	e005      	b.n	8000bde <DMA1_Channel5_IRQHandler+0xaa>
			}
			case 8: { // Z1 > Z4
				Z14 = fastCounter & 0x0FFFF;
 8000bd2:	4b0c      	ldr	r3, [pc, #48]	; (8000c04 <DMA1_Channel5_IRQHandler+0xd0>)
 8000bd4:	681b      	ldr	r3, [r3, #0]
 8000bd6:	b29a      	uxth	r2, r3
 8000bd8:	4b13      	ldr	r3, [pc, #76]	; (8000c28 <DMA1_Channel5_IRQHandler+0xf4>)
 8000bda:	801a      	strh	r2, [r3, #0]
				break;
 8000bdc:	bf00      	nop
			}
		}
		HAL_TIM_IC_Stop_DMA(&htim2, TIM_CHANNEL_1);
 8000bde:	2100      	movs	r1, #0
 8000be0:	4812      	ldr	r0, [pc, #72]	; (8000c2c <DMA1_Channel5_IRQHandler+0xf8>)
 8000be2:	f001 ff93 	bl	8002b0c <HAL_TIM_IC_Stop_DMA>
		//__HAL_TIM_SET_COUNTER(&htim2, 0x0000);
		//HAL_GPIO_TogglePin(GPIOA, LED_Pin);
		HAL_GPIO_WritePin(GPIOA, LED_Pin, GPIO_PIN_RESET);
 8000be6:	2200      	movs	r2, #0
 8000be8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000bec:	4810      	ldr	r0, [pc, #64]	; (8000c30 <DMA1_Channel5_IRQHandler+0xfc>)
 8000bee:	f000 fef5 	bl	80019dc <HAL_GPIO_WritePin>
	}

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim2_ch1);
 8000bf2:	4810      	ldr	r0, [pc, #64]	; (8000c34 <DMA1_Channel5_IRQHandler+0x100>)
 8000bf4:	f000 fc3a 	bl	800146c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 8000bf8:	bf00      	nop
 8000bfa:	bd80      	pop	{r7, pc}
 8000bfc:	2000028a 	.word	0x2000028a
 8000c00:	20000286 	.word	0x20000286
 8000c04:	200001f0 	.word	0x200001f0
 8000c08:	20000238 	.word	0x20000238
 8000c0c:	200000fe 	.word	0x200000fe
 8000c10:	200001e6 	.word	0x200001e6
 8000c14:	20000288 	.word	0x20000288
 8000c18:	20000284 	.word	0x20000284
 8000c1c:	200001ea 	.word	0x200001ea
 8000c20:	2000023a 	.word	0x2000023a
 8000c24:	200001e8 	.word	0x200001e8
 8000c28:	200001e4 	.word	0x200001e4
 8000c2c:	2000028c 	.word	0x2000028c
 8000c30:	40010800 	.word	0x40010800
 8000c34:	20000100 	.word	0x20000100

08000c38 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

	  HAL_GPIO_WritePin(GPIOA, LED_Pin, GPIO_PIN_SET);
 8000c3c:	2201      	movs	r2, #1
 8000c3e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000c42:	486e      	ldr	r0, [pc, #440]	; (8000dfc <TIM4_IRQHandler+0x1c4>)
 8000c44:	f000 feca 	bl	80019dc <HAL_GPIO_WritePin>
	  readyFlag = FALSE;
 8000c48:	4b6d      	ldr	r3, [pc, #436]	; (8000e00 <TIM4_IRQHandler+0x1c8>)
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	701a      	strb	r2, [r3, #0]
	  noise_count = 2;
 8000c4e:	4b6d      	ldr	r3, [pc, #436]	; (8000e04 <TIM4_IRQHandler+0x1cc>)
 8000c50:	2202      	movs	r2, #2
 8000c52:	801a      	strh	r2, [r3, #0]
	  /* Turn off all multiplexer */
	  GPIOB->ODR &= ~((1 << Z1Receive) | (1 << Z2Receive) | (1 << Z3Receive) | (1 << Z4Receive));
 8000c54:	4b6c      	ldr	r3, [pc, #432]	; (8000e08 <TIM4_IRQHandler+0x1d0>)
 8000c56:	68db      	ldr	r3, [r3, #12]
 8000c58:	4a6b      	ldr	r2, [pc, #428]	; (8000e08 <TIM4_IRQHandler+0x1d0>)
 8000c5a:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8000c5e:	f023 0306 	bic.w	r3, r3, #6
 8000c62:	60d3      	str	r3, [r2, #12]

	  /* Restart timers */
	  HAL_TIM_IC_Start_DMA(&htim2, TIM_CHANNEL_1, (uint32_t*) &fastCounter, 1);
 8000c64:	2301      	movs	r3, #1
 8000c66:	4a69      	ldr	r2, [pc, #420]	; (8000e0c <TIM4_IRQHandler+0x1d4>)
 8000c68:	2100      	movs	r1, #0
 8000c6a:	4869      	ldr	r0, [pc, #420]	; (8000e10 <TIM4_IRQHandler+0x1d8>)
 8000c6c:	f001 fdc4 	bl	80027f8 <HAL_TIM_IC_Start_DMA>
	  HAL_TIM_OC_Stop(&htim1, TIM_CHANNEL_1);
 8000c70:	2100      	movs	r1, #0
 8000c72:	4868      	ldr	r0, [pc, #416]	; (8000e14 <TIM4_IRQHandler+0x1dc>)
 8000c74:	f001 fd04 	bl	8002680 <HAL_TIM_OC_Stop>
	  HAL_TIM_OC_Stop(&htim1, TIM_CHANNEL_2);
 8000c78:	2104      	movs	r1, #4
 8000c7a:	4866      	ldr	r0, [pc, #408]	; (8000e14 <TIM4_IRQHandler+0x1dc>)
 8000c7c:	f001 fd00 	bl	8002680 <HAL_TIM_OC_Stop>
	  HAL_TIM_OC_Stop(&htim1, TIM_CHANNEL_3);
 8000c80:	2108      	movs	r1, #8
 8000c82:	4864      	ldr	r0, [pc, #400]	; (8000e14 <TIM4_IRQHandler+0x1dc>)
 8000c84:	f001 fcfc 	bl	8002680 <HAL_TIM_OC_Stop>
	  HAL_TIM_OC_Stop(&htim1, TIM_CHANNEL_4);
 8000c88:	210c      	movs	r1, #12
 8000c8a:	4862      	ldr	r0, [pc, #392]	; (8000e14 <TIM4_IRQHandler+0x1dc>)
 8000c8c:	f001 fcf8 	bl	8002680 <HAL_TIM_OC_Stop>

	  /* Set all timer channels for input mode */
	  GPIOA->CRH &= ~(GPIO_CRH_CNF8 | GPIO_CRH_MODE8
 8000c90:	4b5a      	ldr	r3, [pc, #360]	; (8000dfc <TIM4_IRQHandler+0x1c4>)
 8000c92:	685b      	ldr	r3, [r3, #4]
 8000c94:	4a59      	ldr	r2, [pc, #356]	; (8000dfc <TIM4_IRQHandler+0x1c4>)
 8000c96:	0c1b      	lsrs	r3, r3, #16
 8000c98:	041b      	lsls	r3, r3, #16
 8000c9a:	6053      	str	r3, [r2, #4]
			  | GPIO_CRH_CNF9_1 | GPIO_CRH_MODE9_1
			  | GPIO_CRH_CNF10_1 | GPIO_CRH_MODE10_1
			  | GPIO_CRH_CNF11_1 | GPIO_CRH_MODE11_1);
		*/

	  switch (currentMode++) {
 8000c9c:	4b5e      	ldr	r3, [pc, #376]	; (8000e18 <TIM4_IRQHandler+0x1e0>)
 8000c9e:	881b      	ldrh	r3, [r3, #0]
 8000ca0:	1c5a      	adds	r2, r3, #1
 8000ca2:	b291      	uxth	r1, r2
 8000ca4:	4a5c      	ldr	r2, [pc, #368]	; (8000e18 <TIM4_IRQHandler+0x1e0>)
 8000ca6:	8011      	strh	r1, [r2, #0]
 8000ca8:	2b08      	cmp	r3, #8
 8000caa:	f200 80a1 	bhi.w	8000df0 <TIM4_IRQHandler+0x1b8>
 8000cae:	a201      	add	r2, pc, #4	; (adr r2, 8000cb4 <TIM4_IRQHandler+0x7c>)
 8000cb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000cb4:	08000cd9 	.word	0x08000cd9
 8000cb8:	08000cfb 	.word	0x08000cfb
 8000cbc:	08000d1d 	.word	0x08000d1d
 8000cc0:	08000d3f 	.word	0x08000d3f
 8000cc4:	08000d61 	.word	0x08000d61
 8000cc8:	08000d83 	.word	0x08000d83
 8000ccc:	08000da5 	.word	0x08000da5
 8000cd0:	08000dc7 	.word	0x08000dc7
 8000cd4:	08000de9 	.word	0x08000de9
		  case 0: { // Z1 (transmit) > Z2 (receive)
			  setZ1transmit; // Set Z1 port to output mode
 8000cd8:	4b48      	ldr	r3, [pc, #288]	; (8000dfc <TIM4_IRQHandler+0x1c4>)
 8000cda:	685b      	ldr	r3, [r3, #4]
 8000cdc:	4a47      	ldr	r2, [pc, #284]	; (8000dfc <TIM4_IRQHandler+0x1c4>)
 8000cde:	f043 030a 	orr.w	r3, r3, #10
 8000ce2:	6053      	str	r3, [r2, #4]
			  GPIOB->ODR |= (1 << Z2Receive); // Turn on multiplexer for input Z2 channel.
 8000ce4:	4b48      	ldr	r3, [pc, #288]	; (8000e08 <TIM4_IRQHandler+0x1d0>)
 8000ce6:	68db      	ldr	r3, [r3, #12]
 8000ce8:	4a47      	ldr	r2, [pc, #284]	; (8000e08 <TIM4_IRQHandler+0x1d0>)
 8000cea:	f043 0304 	orr.w	r3, r3, #4
 8000cee:	60d3      	str	r3, [r2, #12]
			  HAL_TIM_OC_Start(&htim1, TIM_CHANNEL_1);
 8000cf0:	2100      	movs	r1, #0
 8000cf2:	4848      	ldr	r0, [pc, #288]	; (8000e14 <TIM4_IRQHandler+0x1dc>)
 8000cf4:	f001 fc22 	bl	800253c <HAL_TIM_OC_Start>
			  break;
 8000cf8:	e07a      	b.n	8000df0 <TIM4_IRQHandler+0x1b8>
		  }
		  case 1: { // Z2 (transmit) > Z1 (receive)
			  setZ2transmit; // Set Z2 port to output mode
 8000cfa:	4b40      	ldr	r3, [pc, #256]	; (8000dfc <TIM4_IRQHandler+0x1c4>)
 8000cfc:	685b      	ldr	r3, [r3, #4]
 8000cfe:	4a3f      	ldr	r2, [pc, #252]	; (8000dfc <TIM4_IRQHandler+0x1c4>)
 8000d00:	f043 03a0 	orr.w	r3, r3, #160	; 0xa0
 8000d04:	6053      	str	r3, [r2, #4]
			  GPIOB->ODR |= (1 << Z1Receive); // Turn on multiplexer for input Z1 channel.
 8000d06:	4b40      	ldr	r3, [pc, #256]	; (8000e08 <TIM4_IRQHandler+0x1d0>)
 8000d08:	68db      	ldr	r3, [r3, #12]
 8000d0a:	4a3f      	ldr	r2, [pc, #252]	; (8000e08 <TIM4_IRQHandler+0x1d0>)
 8000d0c:	f043 0302 	orr.w	r3, r3, #2
 8000d10:	60d3      	str	r3, [r2, #12]
			  HAL_TIM_OC_Start(&htim1, TIM_CHANNEL_2);
 8000d12:	2104      	movs	r1, #4
 8000d14:	483f      	ldr	r0, [pc, #252]	; (8000e14 <TIM4_IRQHandler+0x1dc>)
 8000d16:	f001 fc11 	bl	800253c <HAL_TIM_OC_Start>
			  break;
 8000d1a:	e069      	b.n	8000df0 <TIM4_IRQHandler+0x1b8>
		  }
		  case 2: { // Z2 (transmit) > Z3 (receive)
			  setZ2transmit; // Set Z2 port to output mode
 8000d1c:	4b37      	ldr	r3, [pc, #220]	; (8000dfc <TIM4_IRQHandler+0x1c4>)
 8000d1e:	685b      	ldr	r3, [r3, #4]
 8000d20:	4a36      	ldr	r2, [pc, #216]	; (8000dfc <TIM4_IRQHandler+0x1c4>)
 8000d22:	f043 03a0 	orr.w	r3, r3, #160	; 0xa0
 8000d26:	6053      	str	r3, [r2, #4]
			  GPIOB->ODR |= (1 << Z3Receive); // Turn on multiplexer for input Z3 channel.
 8000d28:	4b37      	ldr	r3, [pc, #220]	; (8000e08 <TIM4_IRQHandler+0x1d0>)
 8000d2a:	68db      	ldr	r3, [r3, #12]
 8000d2c:	4a36      	ldr	r2, [pc, #216]	; (8000e08 <TIM4_IRQHandler+0x1d0>)
 8000d2e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000d32:	60d3      	str	r3, [r2, #12]
			  HAL_TIM_OC_Start(&htim1, TIM_CHANNEL_2);
 8000d34:	2104      	movs	r1, #4
 8000d36:	4837      	ldr	r0, [pc, #220]	; (8000e14 <TIM4_IRQHandler+0x1dc>)
 8000d38:	f001 fc00 	bl	800253c <HAL_TIM_OC_Start>
			  break;
 8000d3c:	e058      	b.n	8000df0 <TIM4_IRQHandler+0x1b8>
		  }
		  case 3: { // Z3 (transmit) > Z2 (receive)
			  setZ3transmit; // Set Z3 port to output mode
 8000d3e:	4b2f      	ldr	r3, [pc, #188]	; (8000dfc <TIM4_IRQHandler+0x1c4>)
 8000d40:	685b      	ldr	r3, [r3, #4]
 8000d42:	4a2e      	ldr	r2, [pc, #184]	; (8000dfc <TIM4_IRQHandler+0x1c4>)
 8000d44:	f443 6320 	orr.w	r3, r3, #2560	; 0xa00
 8000d48:	6053      	str	r3, [r2, #4]
			  GPIOB->ODR |= (1 << Z2Receive); // Turn on multiplexer for input Z2 channel.
 8000d4a:	4b2f      	ldr	r3, [pc, #188]	; (8000e08 <TIM4_IRQHandler+0x1d0>)
 8000d4c:	68db      	ldr	r3, [r3, #12]
 8000d4e:	4a2e      	ldr	r2, [pc, #184]	; (8000e08 <TIM4_IRQHandler+0x1d0>)
 8000d50:	f043 0304 	orr.w	r3, r3, #4
 8000d54:	60d3      	str	r3, [r2, #12]
			  HAL_TIM_OC_Start(&htim1, TIM_CHANNEL_3);
 8000d56:	2108      	movs	r1, #8
 8000d58:	482e      	ldr	r0, [pc, #184]	; (8000e14 <TIM4_IRQHandler+0x1dc>)
 8000d5a:	f001 fbef 	bl	800253c <HAL_TIM_OC_Start>
			  break;
 8000d5e:	e047      	b.n	8000df0 <TIM4_IRQHandler+0x1b8>
		  }
		  case 4: { // Z3 (transmit) > Z4 (receive)
			  setZ3transmit; // Set Z3 port to output mode
 8000d60:	4b26      	ldr	r3, [pc, #152]	; (8000dfc <TIM4_IRQHandler+0x1c4>)
 8000d62:	685b      	ldr	r3, [r3, #4]
 8000d64:	4a25      	ldr	r2, [pc, #148]	; (8000dfc <TIM4_IRQHandler+0x1c4>)
 8000d66:	f443 6320 	orr.w	r3, r3, #2560	; 0xa00
 8000d6a:	6053      	str	r3, [r2, #4]
			  GPIOB->ODR |= (uint16_t) (1 << Z4Receive); // Turn on multiplexer for input Z4 channel.
 8000d6c:	4b26      	ldr	r3, [pc, #152]	; (8000e08 <TIM4_IRQHandler+0x1d0>)
 8000d6e:	68db      	ldr	r3, [r3, #12]
 8000d70:	4a25      	ldr	r2, [pc, #148]	; (8000e08 <TIM4_IRQHandler+0x1d0>)
 8000d72:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000d76:	60d3      	str	r3, [r2, #12]
			  HAL_TIM_OC_Start(&htim1, TIM_CHANNEL_3);
 8000d78:	2108      	movs	r1, #8
 8000d7a:	4826      	ldr	r0, [pc, #152]	; (8000e14 <TIM4_IRQHandler+0x1dc>)
 8000d7c:	f001 fbde 	bl	800253c <HAL_TIM_OC_Start>
			  break;
 8000d80:	e036      	b.n	8000df0 <TIM4_IRQHandler+0x1b8>
		  }
		  case 5: { // Z4 (transmit) > Z3 (receive)
			  setZ4transmit; // Set Z4 port to output mode
 8000d82:	4b1e      	ldr	r3, [pc, #120]	; (8000dfc <TIM4_IRQHandler+0x1c4>)
 8000d84:	685b      	ldr	r3, [r3, #4]
 8000d86:	4a1d      	ldr	r2, [pc, #116]	; (8000dfc <TIM4_IRQHandler+0x1c4>)
 8000d88:	f443 4320 	orr.w	r3, r3, #40960	; 0xa000
 8000d8c:	6053      	str	r3, [r2, #4]
			  GPIOB->ODR |= (1 << Z3Receive); // Turn on multiplexer for input Z4 channel.
 8000d8e:	4b1e      	ldr	r3, [pc, #120]	; (8000e08 <TIM4_IRQHandler+0x1d0>)
 8000d90:	68db      	ldr	r3, [r3, #12]
 8000d92:	4a1d      	ldr	r2, [pc, #116]	; (8000e08 <TIM4_IRQHandler+0x1d0>)
 8000d94:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000d98:	60d3      	str	r3, [r2, #12]
			  HAL_TIM_OC_Start(&htim1, TIM_CHANNEL_4);
 8000d9a:	210c      	movs	r1, #12
 8000d9c:	481d      	ldr	r0, [pc, #116]	; (8000e14 <TIM4_IRQHandler+0x1dc>)
 8000d9e:	f001 fbcd 	bl	800253c <HAL_TIM_OC_Start>
			  break;
 8000da2:	e025      	b.n	8000df0 <TIM4_IRQHandler+0x1b8>
		  }
		  case 6: { // Z4 (transmit) > Z1 (receive)
			  setZ4transmit;	// Set Z4 port to output mode
 8000da4:	4b15      	ldr	r3, [pc, #84]	; (8000dfc <TIM4_IRQHandler+0x1c4>)
 8000da6:	685b      	ldr	r3, [r3, #4]
 8000da8:	4a14      	ldr	r2, [pc, #80]	; (8000dfc <TIM4_IRQHandler+0x1c4>)
 8000daa:	f443 4320 	orr.w	r3, r3, #40960	; 0xa000
 8000dae:	6053      	str	r3, [r2, #4]
			  GPIOB->ODR |= (1 << Z1Receive); // Turn on multiplexer for input Z4 channel.
 8000db0:	4b15      	ldr	r3, [pc, #84]	; (8000e08 <TIM4_IRQHandler+0x1d0>)
 8000db2:	68db      	ldr	r3, [r3, #12]
 8000db4:	4a14      	ldr	r2, [pc, #80]	; (8000e08 <TIM4_IRQHandler+0x1d0>)
 8000db6:	f043 0302 	orr.w	r3, r3, #2
 8000dba:	60d3      	str	r3, [r2, #12]
			  HAL_TIM_OC_Start(&htim1, TIM_CHANNEL_4);
 8000dbc:	210c      	movs	r1, #12
 8000dbe:	4815      	ldr	r0, [pc, #84]	; (8000e14 <TIM4_IRQHandler+0x1dc>)
 8000dc0:	f001 fbbc 	bl	800253c <HAL_TIM_OC_Start>
			  break;
 8000dc4:	e014      	b.n	8000df0 <TIM4_IRQHandler+0x1b8>
		  }
		  case 7: { // Z1 (transmit) > Z4 (receive)
			  //GPIOA->CRH |= (GPIO_CRH_CNF8_1 | GPIO_CRH_MODE8_1); // Set Z1 port to output mode
			  setZ1transmit;	// Set Z1 port to output mode
 8000dc6:	4b0d      	ldr	r3, [pc, #52]	; (8000dfc <TIM4_IRQHandler+0x1c4>)
 8000dc8:	685b      	ldr	r3, [r3, #4]
 8000dca:	4a0c      	ldr	r2, [pc, #48]	; (8000dfc <TIM4_IRQHandler+0x1c4>)
 8000dcc:	f043 030a 	orr.w	r3, r3, #10
 8000dd0:	6053      	str	r3, [r2, #4]
			  GPIOB->ODR |= (1 << Z4Receive); // Turn on multiplexer for input Z4 channel.
 8000dd2:	4b0d      	ldr	r3, [pc, #52]	; (8000e08 <TIM4_IRQHandler+0x1d0>)
 8000dd4:	68db      	ldr	r3, [r3, #12]
 8000dd6:	4a0c      	ldr	r2, [pc, #48]	; (8000e08 <TIM4_IRQHandler+0x1d0>)
 8000dd8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000ddc:	60d3      	str	r3, [r2, #12]
			  HAL_TIM_OC_Start(&htim1, TIM_CHANNEL_1);
 8000dde:	2100      	movs	r1, #0
 8000de0:	480c      	ldr	r0, [pc, #48]	; (8000e14 <TIM4_IRQHandler+0x1dc>)
 8000de2:	f001 fbab 	bl	800253c <HAL_TIM_OC_Start>
			  break;
 8000de6:	e003      	b.n	8000df0 <TIM4_IRQHandler+0x1b8>
		  }
		  case 8: { // All data complete.
			  currentMode = 0;
 8000de8:	4b0b      	ldr	r3, [pc, #44]	; (8000e18 <TIM4_IRQHandler+0x1e0>)
 8000dea:	2200      	movs	r2, #0
 8000dec:	801a      	strh	r2, [r3, #0]
			  break;
 8000dee:	bf00      	nop
		  }
	  }

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8000df0:	480a      	ldr	r0, [pc, #40]	; (8000e1c <TIM4_IRQHandler+0x1e4>)
 8000df2:	f001 ff9e 	bl	8002d32 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8000df6:	bf00      	nop
 8000df8:	bd80      	pop	{r7, pc}
 8000dfa:	bf00      	nop
 8000dfc:	40010800 	.word	0x40010800
 8000e00:	200000fe 	.word	0x200000fe
 8000e04:	2000028a 	.word	0x2000028a
 8000e08:	40010c00 	.word	0x40010c00
 8000e0c:	200001f0 	.word	0x200001f0
 8000e10:	2000028c 	.word	0x2000028c
 8000e14:	2000023c 	.word	0x2000023c
 8000e18:	20000286 	.word	0x20000286
 8000e1c:	2000019c 	.word	0x2000019c

08000e20 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000e20:	b580      	push	{r7, lr}
 8000e22:	b086      	sub	sp, #24
 8000e24:	af00      	add	r7, sp, #0
 8000e26:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000e28:	4a14      	ldr	r2, [pc, #80]	; (8000e7c <_sbrk+0x5c>)
 8000e2a:	4b15      	ldr	r3, [pc, #84]	; (8000e80 <_sbrk+0x60>)
 8000e2c:	1ad3      	subs	r3, r2, r3
 8000e2e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000e30:	697b      	ldr	r3, [r7, #20]
 8000e32:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000e34:	4b13      	ldr	r3, [pc, #76]	; (8000e84 <_sbrk+0x64>)
 8000e36:	681b      	ldr	r3, [r3, #0]
 8000e38:	2b00      	cmp	r3, #0
 8000e3a:	d102      	bne.n	8000e42 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000e3c:	4b11      	ldr	r3, [pc, #68]	; (8000e84 <_sbrk+0x64>)
 8000e3e:	4a12      	ldr	r2, [pc, #72]	; (8000e88 <_sbrk+0x68>)
 8000e40:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000e42:	4b10      	ldr	r3, [pc, #64]	; (8000e84 <_sbrk+0x64>)
 8000e44:	681a      	ldr	r2, [r3, #0]
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	4413      	add	r3, r2
 8000e4a:	693a      	ldr	r2, [r7, #16]
 8000e4c:	429a      	cmp	r2, r3
 8000e4e:	d207      	bcs.n	8000e60 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000e50:	f003 fa42 	bl	80042d8 <__errno>
 8000e54:	4603      	mov	r3, r0
 8000e56:	220c      	movs	r2, #12
 8000e58:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000e5a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000e5e:	e009      	b.n	8000e74 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000e60:	4b08      	ldr	r3, [pc, #32]	; (8000e84 <_sbrk+0x64>)
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000e66:	4b07      	ldr	r3, [pc, #28]	; (8000e84 <_sbrk+0x64>)
 8000e68:	681a      	ldr	r2, [r3, #0]
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	4413      	add	r3, r2
 8000e6e:	4a05      	ldr	r2, [pc, #20]	; (8000e84 <_sbrk+0x64>)
 8000e70:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000e72:	68fb      	ldr	r3, [r7, #12]
}
 8000e74:	4618      	mov	r0, r3
 8000e76:	3718      	adds	r7, #24
 8000e78:	46bd      	mov	sp, r7
 8000e7a:	bd80      	pop	{r7, pc}
 8000e7c:	20005000 	.word	0x20005000
 8000e80:	00000400 	.word	0x00000400
 8000e84:	200000f0 	.word	0x200000f0
 8000e88:	200002e8 	.word	0x200002e8

08000e8c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000e8c:	b480      	push	{r7}
 8000e8e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e90:	bf00      	nop
 8000e92:	46bd      	mov	sp, r7
 8000e94:	bc80      	pop	{r7}
 8000e96:	4770      	bx	lr

08000e98 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000e98:	480c      	ldr	r0, [pc, #48]	; (8000ecc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000e9a:	490d      	ldr	r1, [pc, #52]	; (8000ed0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000e9c:	4a0d      	ldr	r2, [pc, #52]	; (8000ed4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000e9e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ea0:	e002      	b.n	8000ea8 <LoopCopyDataInit>

08000ea2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ea2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ea4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ea6:	3304      	adds	r3, #4

08000ea8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ea8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000eaa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000eac:	d3f9      	bcc.n	8000ea2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000eae:	4a0a      	ldr	r2, [pc, #40]	; (8000ed8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000eb0:	4c0a      	ldr	r4, [pc, #40]	; (8000edc <LoopFillZerobss+0x22>)
  movs r3, #0
 8000eb2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000eb4:	e001      	b.n	8000eba <LoopFillZerobss>

08000eb6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000eb6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000eb8:	3204      	adds	r2, #4

08000eba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000eba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ebc:	d3fb      	bcc.n	8000eb6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000ebe:	f7ff ffe5 	bl	8000e8c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000ec2:	f003 fa0f 	bl	80042e4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000ec6:	f7ff f941 	bl	800014c <main>
  bx lr
 8000eca:	4770      	bx	lr
  ldr r0, =_sdata
 8000ecc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ed0:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000ed4:	08004c38 	.word	0x08004c38
  ldr r2, =_sbss
 8000ed8:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000edc:	200002e8 	.word	0x200002e8

08000ee0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000ee0:	e7fe      	b.n	8000ee0 <ADC1_2_IRQHandler>
	...

08000ee4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ee8:	4b08      	ldr	r3, [pc, #32]	; (8000f0c <HAL_Init+0x28>)
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	4a07      	ldr	r2, [pc, #28]	; (8000f0c <HAL_Init+0x28>)
 8000eee:	f043 0310 	orr.w	r3, r3, #16
 8000ef2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ef4:	2003      	movs	r0, #3
 8000ef6:	f000 f947 	bl	8001188 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000efa:	2000      	movs	r0, #0
 8000efc:	f000 f808 	bl	8000f10 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000f00:	f7ff fc4c 	bl	800079c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f04:	2300      	movs	r3, #0
}
 8000f06:	4618      	mov	r0, r3
 8000f08:	bd80      	pop	{r7, pc}
 8000f0a:	bf00      	nop
 8000f0c:	40022000 	.word	0x40022000

08000f10 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f10:	b580      	push	{r7, lr}
 8000f12:	b082      	sub	sp, #8
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000f18:	4b12      	ldr	r3, [pc, #72]	; (8000f64 <HAL_InitTick+0x54>)
 8000f1a:	681a      	ldr	r2, [r3, #0]
 8000f1c:	4b12      	ldr	r3, [pc, #72]	; (8000f68 <HAL_InitTick+0x58>)
 8000f1e:	781b      	ldrb	r3, [r3, #0]
 8000f20:	4619      	mov	r1, r3
 8000f22:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f26:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f2a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f2e:	4618      	mov	r0, r3
 8000f30:	f000 f95f 	bl	80011f2 <HAL_SYSTICK_Config>
 8000f34:	4603      	mov	r3, r0
 8000f36:	2b00      	cmp	r3, #0
 8000f38:	d001      	beq.n	8000f3e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000f3a:	2301      	movs	r3, #1
 8000f3c:	e00e      	b.n	8000f5c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	2b0f      	cmp	r3, #15
 8000f42:	d80a      	bhi.n	8000f5a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f44:	2200      	movs	r2, #0
 8000f46:	6879      	ldr	r1, [r7, #4]
 8000f48:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000f4c:	f000 f927 	bl	800119e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f50:	4a06      	ldr	r2, [pc, #24]	; (8000f6c <HAL_InitTick+0x5c>)
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000f56:	2300      	movs	r3, #0
 8000f58:	e000      	b.n	8000f5c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000f5a:	2301      	movs	r3, #1
}
 8000f5c:	4618      	mov	r0, r3
 8000f5e:	3708      	adds	r7, #8
 8000f60:	46bd      	mov	sp, r7
 8000f62:	bd80      	pop	{r7, pc}
 8000f64:	20000000 	.word	0x20000000
 8000f68:	20000008 	.word	0x20000008
 8000f6c:	20000004 	.word	0x20000004

08000f70 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f70:	b480      	push	{r7}
 8000f72:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f74:	4b05      	ldr	r3, [pc, #20]	; (8000f8c <HAL_IncTick+0x1c>)
 8000f76:	781b      	ldrb	r3, [r3, #0]
 8000f78:	461a      	mov	r2, r3
 8000f7a:	4b05      	ldr	r3, [pc, #20]	; (8000f90 <HAL_IncTick+0x20>)
 8000f7c:	681b      	ldr	r3, [r3, #0]
 8000f7e:	4413      	add	r3, r2
 8000f80:	4a03      	ldr	r2, [pc, #12]	; (8000f90 <HAL_IncTick+0x20>)
 8000f82:	6013      	str	r3, [r2, #0]
}
 8000f84:	bf00      	nop
 8000f86:	46bd      	mov	sp, r7
 8000f88:	bc80      	pop	{r7}
 8000f8a:	4770      	bx	lr
 8000f8c:	20000008 	.word	0x20000008
 8000f90:	200002d4 	.word	0x200002d4

08000f94 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f94:	b480      	push	{r7}
 8000f96:	af00      	add	r7, sp, #0
  return uwTick;
 8000f98:	4b02      	ldr	r3, [pc, #8]	; (8000fa4 <HAL_GetTick+0x10>)
 8000f9a:	681b      	ldr	r3, [r3, #0]
}
 8000f9c:	4618      	mov	r0, r3
 8000f9e:	46bd      	mov	sp, r7
 8000fa0:	bc80      	pop	{r7}
 8000fa2:	4770      	bx	lr
 8000fa4:	200002d4 	.word	0x200002d4

08000fa8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	b084      	sub	sp, #16
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000fb0:	f7ff fff0 	bl	8000f94 <HAL_GetTick>
 8000fb4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000fba:	68fb      	ldr	r3, [r7, #12]
 8000fbc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000fc0:	d005      	beq.n	8000fce <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000fc2:	4b0a      	ldr	r3, [pc, #40]	; (8000fec <HAL_Delay+0x44>)
 8000fc4:	781b      	ldrb	r3, [r3, #0]
 8000fc6:	461a      	mov	r2, r3
 8000fc8:	68fb      	ldr	r3, [r7, #12]
 8000fca:	4413      	add	r3, r2
 8000fcc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000fce:	bf00      	nop
 8000fd0:	f7ff ffe0 	bl	8000f94 <HAL_GetTick>
 8000fd4:	4602      	mov	r2, r0
 8000fd6:	68bb      	ldr	r3, [r7, #8]
 8000fd8:	1ad3      	subs	r3, r2, r3
 8000fda:	68fa      	ldr	r2, [r7, #12]
 8000fdc:	429a      	cmp	r2, r3
 8000fde:	d8f7      	bhi.n	8000fd0 <HAL_Delay+0x28>
  {
  }
}
 8000fe0:	bf00      	nop
 8000fe2:	bf00      	nop
 8000fe4:	3710      	adds	r7, #16
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	bd80      	pop	{r7, pc}
 8000fea:	bf00      	nop
 8000fec:	20000008 	.word	0x20000008

08000ff0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ff0:	b480      	push	{r7}
 8000ff2:	b085      	sub	sp, #20
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	f003 0307 	and.w	r3, r3, #7
 8000ffe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001000:	4b0c      	ldr	r3, [pc, #48]	; (8001034 <__NVIC_SetPriorityGrouping+0x44>)
 8001002:	68db      	ldr	r3, [r3, #12]
 8001004:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001006:	68ba      	ldr	r2, [r7, #8]
 8001008:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800100c:	4013      	ands	r3, r2
 800100e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001010:	68fb      	ldr	r3, [r7, #12]
 8001012:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001014:	68bb      	ldr	r3, [r7, #8]
 8001016:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001018:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800101c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001020:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001022:	4a04      	ldr	r2, [pc, #16]	; (8001034 <__NVIC_SetPriorityGrouping+0x44>)
 8001024:	68bb      	ldr	r3, [r7, #8]
 8001026:	60d3      	str	r3, [r2, #12]
}
 8001028:	bf00      	nop
 800102a:	3714      	adds	r7, #20
 800102c:	46bd      	mov	sp, r7
 800102e:	bc80      	pop	{r7}
 8001030:	4770      	bx	lr
 8001032:	bf00      	nop
 8001034:	e000ed00 	.word	0xe000ed00

08001038 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001038:	b480      	push	{r7}
 800103a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800103c:	4b04      	ldr	r3, [pc, #16]	; (8001050 <__NVIC_GetPriorityGrouping+0x18>)
 800103e:	68db      	ldr	r3, [r3, #12]
 8001040:	0a1b      	lsrs	r3, r3, #8
 8001042:	f003 0307 	and.w	r3, r3, #7
}
 8001046:	4618      	mov	r0, r3
 8001048:	46bd      	mov	sp, r7
 800104a:	bc80      	pop	{r7}
 800104c:	4770      	bx	lr
 800104e:	bf00      	nop
 8001050:	e000ed00 	.word	0xe000ed00

08001054 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001054:	b480      	push	{r7}
 8001056:	b083      	sub	sp, #12
 8001058:	af00      	add	r7, sp, #0
 800105a:	4603      	mov	r3, r0
 800105c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800105e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001062:	2b00      	cmp	r3, #0
 8001064:	db0b      	blt.n	800107e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001066:	79fb      	ldrb	r3, [r7, #7]
 8001068:	f003 021f 	and.w	r2, r3, #31
 800106c:	4906      	ldr	r1, [pc, #24]	; (8001088 <__NVIC_EnableIRQ+0x34>)
 800106e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001072:	095b      	lsrs	r3, r3, #5
 8001074:	2001      	movs	r0, #1
 8001076:	fa00 f202 	lsl.w	r2, r0, r2
 800107a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800107e:	bf00      	nop
 8001080:	370c      	adds	r7, #12
 8001082:	46bd      	mov	sp, r7
 8001084:	bc80      	pop	{r7}
 8001086:	4770      	bx	lr
 8001088:	e000e100 	.word	0xe000e100

0800108c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800108c:	b480      	push	{r7}
 800108e:	b083      	sub	sp, #12
 8001090:	af00      	add	r7, sp, #0
 8001092:	4603      	mov	r3, r0
 8001094:	6039      	str	r1, [r7, #0]
 8001096:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001098:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800109c:	2b00      	cmp	r3, #0
 800109e:	db0a      	blt.n	80010b6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010a0:	683b      	ldr	r3, [r7, #0]
 80010a2:	b2da      	uxtb	r2, r3
 80010a4:	490c      	ldr	r1, [pc, #48]	; (80010d8 <__NVIC_SetPriority+0x4c>)
 80010a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010aa:	0112      	lsls	r2, r2, #4
 80010ac:	b2d2      	uxtb	r2, r2
 80010ae:	440b      	add	r3, r1
 80010b0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80010b4:	e00a      	b.n	80010cc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010b6:	683b      	ldr	r3, [r7, #0]
 80010b8:	b2da      	uxtb	r2, r3
 80010ba:	4908      	ldr	r1, [pc, #32]	; (80010dc <__NVIC_SetPriority+0x50>)
 80010bc:	79fb      	ldrb	r3, [r7, #7]
 80010be:	f003 030f 	and.w	r3, r3, #15
 80010c2:	3b04      	subs	r3, #4
 80010c4:	0112      	lsls	r2, r2, #4
 80010c6:	b2d2      	uxtb	r2, r2
 80010c8:	440b      	add	r3, r1
 80010ca:	761a      	strb	r2, [r3, #24]
}
 80010cc:	bf00      	nop
 80010ce:	370c      	adds	r7, #12
 80010d0:	46bd      	mov	sp, r7
 80010d2:	bc80      	pop	{r7}
 80010d4:	4770      	bx	lr
 80010d6:	bf00      	nop
 80010d8:	e000e100 	.word	0xe000e100
 80010dc:	e000ed00 	.word	0xe000ed00

080010e0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80010e0:	b480      	push	{r7}
 80010e2:	b089      	sub	sp, #36	; 0x24
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	60f8      	str	r0, [r7, #12]
 80010e8:	60b9      	str	r1, [r7, #8]
 80010ea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80010ec:	68fb      	ldr	r3, [r7, #12]
 80010ee:	f003 0307 	and.w	r3, r3, #7
 80010f2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80010f4:	69fb      	ldr	r3, [r7, #28]
 80010f6:	f1c3 0307 	rsb	r3, r3, #7
 80010fa:	2b04      	cmp	r3, #4
 80010fc:	bf28      	it	cs
 80010fe:	2304      	movcs	r3, #4
 8001100:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001102:	69fb      	ldr	r3, [r7, #28]
 8001104:	3304      	adds	r3, #4
 8001106:	2b06      	cmp	r3, #6
 8001108:	d902      	bls.n	8001110 <NVIC_EncodePriority+0x30>
 800110a:	69fb      	ldr	r3, [r7, #28]
 800110c:	3b03      	subs	r3, #3
 800110e:	e000      	b.n	8001112 <NVIC_EncodePriority+0x32>
 8001110:	2300      	movs	r3, #0
 8001112:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001114:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001118:	69bb      	ldr	r3, [r7, #24]
 800111a:	fa02 f303 	lsl.w	r3, r2, r3
 800111e:	43da      	mvns	r2, r3
 8001120:	68bb      	ldr	r3, [r7, #8]
 8001122:	401a      	ands	r2, r3
 8001124:	697b      	ldr	r3, [r7, #20]
 8001126:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001128:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800112c:	697b      	ldr	r3, [r7, #20]
 800112e:	fa01 f303 	lsl.w	r3, r1, r3
 8001132:	43d9      	mvns	r1, r3
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001138:	4313      	orrs	r3, r2
         );
}
 800113a:	4618      	mov	r0, r3
 800113c:	3724      	adds	r7, #36	; 0x24
 800113e:	46bd      	mov	sp, r7
 8001140:	bc80      	pop	{r7}
 8001142:	4770      	bx	lr

08001144 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001144:	b580      	push	{r7, lr}
 8001146:	b082      	sub	sp, #8
 8001148:	af00      	add	r7, sp, #0
 800114a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	3b01      	subs	r3, #1
 8001150:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001154:	d301      	bcc.n	800115a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001156:	2301      	movs	r3, #1
 8001158:	e00f      	b.n	800117a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800115a:	4a0a      	ldr	r2, [pc, #40]	; (8001184 <SysTick_Config+0x40>)
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	3b01      	subs	r3, #1
 8001160:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001162:	210f      	movs	r1, #15
 8001164:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001168:	f7ff ff90 	bl	800108c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800116c:	4b05      	ldr	r3, [pc, #20]	; (8001184 <SysTick_Config+0x40>)
 800116e:	2200      	movs	r2, #0
 8001170:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001172:	4b04      	ldr	r3, [pc, #16]	; (8001184 <SysTick_Config+0x40>)
 8001174:	2207      	movs	r2, #7
 8001176:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001178:	2300      	movs	r3, #0
}
 800117a:	4618      	mov	r0, r3
 800117c:	3708      	adds	r7, #8
 800117e:	46bd      	mov	sp, r7
 8001180:	bd80      	pop	{r7, pc}
 8001182:	bf00      	nop
 8001184:	e000e010 	.word	0xe000e010

08001188 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001188:	b580      	push	{r7, lr}
 800118a:	b082      	sub	sp, #8
 800118c:	af00      	add	r7, sp, #0
 800118e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001190:	6878      	ldr	r0, [r7, #4]
 8001192:	f7ff ff2d 	bl	8000ff0 <__NVIC_SetPriorityGrouping>
}
 8001196:	bf00      	nop
 8001198:	3708      	adds	r7, #8
 800119a:	46bd      	mov	sp, r7
 800119c:	bd80      	pop	{r7, pc}

0800119e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800119e:	b580      	push	{r7, lr}
 80011a0:	b086      	sub	sp, #24
 80011a2:	af00      	add	r7, sp, #0
 80011a4:	4603      	mov	r3, r0
 80011a6:	60b9      	str	r1, [r7, #8]
 80011a8:	607a      	str	r2, [r7, #4]
 80011aa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80011ac:	2300      	movs	r3, #0
 80011ae:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80011b0:	f7ff ff42 	bl	8001038 <__NVIC_GetPriorityGrouping>
 80011b4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80011b6:	687a      	ldr	r2, [r7, #4]
 80011b8:	68b9      	ldr	r1, [r7, #8]
 80011ba:	6978      	ldr	r0, [r7, #20]
 80011bc:	f7ff ff90 	bl	80010e0 <NVIC_EncodePriority>
 80011c0:	4602      	mov	r2, r0
 80011c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80011c6:	4611      	mov	r1, r2
 80011c8:	4618      	mov	r0, r3
 80011ca:	f7ff ff5f 	bl	800108c <__NVIC_SetPriority>
}
 80011ce:	bf00      	nop
 80011d0:	3718      	adds	r7, #24
 80011d2:	46bd      	mov	sp, r7
 80011d4:	bd80      	pop	{r7, pc}

080011d6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011d6:	b580      	push	{r7, lr}
 80011d8:	b082      	sub	sp, #8
 80011da:	af00      	add	r7, sp, #0
 80011dc:	4603      	mov	r3, r0
 80011de:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80011e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011e4:	4618      	mov	r0, r3
 80011e6:	f7ff ff35 	bl	8001054 <__NVIC_EnableIRQ>
}
 80011ea:	bf00      	nop
 80011ec:	3708      	adds	r7, #8
 80011ee:	46bd      	mov	sp, r7
 80011f0:	bd80      	pop	{r7, pc}

080011f2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80011f2:	b580      	push	{r7, lr}
 80011f4:	b082      	sub	sp, #8
 80011f6:	af00      	add	r7, sp, #0
 80011f8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80011fa:	6878      	ldr	r0, [r7, #4]
 80011fc:	f7ff ffa2 	bl	8001144 <SysTick_Config>
 8001200:	4603      	mov	r3, r0
}
 8001202:	4618      	mov	r0, r3
 8001204:	3708      	adds	r7, #8
 8001206:	46bd      	mov	sp, r7
 8001208:	bd80      	pop	{r7, pc}
	...

0800120c <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800120c:	b480      	push	{r7}
 800120e:	b085      	sub	sp, #20
 8001210:	af00      	add	r7, sp, #0
 8001212:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001214:	2300      	movs	r3, #0
 8001216:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	2b00      	cmp	r3, #0
 800121c:	d101      	bne.n	8001222 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 800121e:	2301      	movs	r3, #1
 8001220:	e043      	b.n	80012aa <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	461a      	mov	r2, r3
 8001228:	4b22      	ldr	r3, [pc, #136]	; (80012b4 <HAL_DMA_Init+0xa8>)
 800122a:	4413      	add	r3, r2
 800122c:	4a22      	ldr	r2, [pc, #136]	; (80012b8 <HAL_DMA_Init+0xac>)
 800122e:	fba2 2303 	umull	r2, r3, r2, r3
 8001232:	091b      	lsrs	r3, r3, #4
 8001234:	009a      	lsls	r2, r3, #2
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	4a1f      	ldr	r2, [pc, #124]	; (80012bc <HAL_DMA_Init+0xb0>)
 800123e:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	2202      	movs	r2, #2
 8001244:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001250:	68fb      	ldr	r3, [r7, #12]
 8001252:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8001256:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 800125a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8001264:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	68db      	ldr	r3, [r3, #12]
 800126a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001270:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	695b      	ldr	r3, [r3, #20]
 8001276:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800127c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	69db      	ldr	r3, [r3, #28]
 8001282:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001284:	68fa      	ldr	r2, [r7, #12]
 8001286:	4313      	orrs	r3, r2
 8001288:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	68fa      	ldr	r2, [r7, #12]
 8001290:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	2200      	movs	r2, #0
 8001296:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	2201      	movs	r2, #1
 800129c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	2200      	movs	r2, #0
 80012a4:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 80012a8:	2300      	movs	r3, #0
}
 80012aa:	4618      	mov	r0, r3
 80012ac:	3714      	adds	r7, #20
 80012ae:	46bd      	mov	sp, r7
 80012b0:	bc80      	pop	{r7}
 80012b2:	4770      	bx	lr
 80012b4:	bffdfff8 	.word	0xbffdfff8
 80012b8:	cccccccd 	.word	0xcccccccd
 80012bc:	40020000 	.word	0x40020000

080012c0 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80012c0:	b580      	push	{r7, lr}
 80012c2:	b086      	sub	sp, #24
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	60f8      	str	r0, [r7, #12]
 80012c8:	60b9      	str	r1, [r7, #8]
 80012ca:	607a      	str	r2, [r7, #4]
 80012cc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80012ce:	2300      	movs	r3, #0
 80012d0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80012d2:	68fb      	ldr	r3, [r7, #12]
 80012d4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80012d8:	2b01      	cmp	r3, #1
 80012da:	d101      	bne.n	80012e0 <HAL_DMA_Start_IT+0x20>
 80012dc:	2302      	movs	r3, #2
 80012de:	e04a      	b.n	8001376 <HAL_DMA_Start_IT+0xb6>
 80012e0:	68fb      	ldr	r3, [r7, #12]
 80012e2:	2201      	movs	r2, #1
 80012e4:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80012e8:	68fb      	ldr	r3, [r7, #12]
 80012ea:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80012ee:	2b01      	cmp	r3, #1
 80012f0:	d13a      	bne.n	8001368 <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80012f2:	68fb      	ldr	r3, [r7, #12]
 80012f4:	2202      	movs	r2, #2
 80012f6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80012fa:	68fb      	ldr	r3, [r7, #12]
 80012fc:	2200      	movs	r2, #0
 80012fe:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001300:	68fb      	ldr	r3, [r7, #12]
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	681a      	ldr	r2, [r3, #0]
 8001306:	68fb      	ldr	r3, [r7, #12]
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	f022 0201 	bic.w	r2, r2, #1
 800130e:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001310:	683b      	ldr	r3, [r7, #0]
 8001312:	687a      	ldr	r2, [r7, #4]
 8001314:	68b9      	ldr	r1, [r7, #8]
 8001316:	68f8      	ldr	r0, [r7, #12]
 8001318:	f000 f9ae 	bl	8001678 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 800131c:	68fb      	ldr	r3, [r7, #12]
 800131e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001320:	2b00      	cmp	r3, #0
 8001322:	d008      	beq.n	8001336 <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001324:	68fb      	ldr	r3, [r7, #12]
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	681a      	ldr	r2, [r3, #0]
 800132a:	68fb      	ldr	r3, [r7, #12]
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	f042 020e 	orr.w	r2, r2, #14
 8001332:	601a      	str	r2, [r3, #0]
 8001334:	e00f      	b.n	8001356 <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001336:	68fb      	ldr	r3, [r7, #12]
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	681a      	ldr	r2, [r3, #0]
 800133c:	68fb      	ldr	r3, [r7, #12]
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	f022 0204 	bic.w	r2, r2, #4
 8001344:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001346:	68fb      	ldr	r3, [r7, #12]
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	681a      	ldr	r2, [r3, #0]
 800134c:	68fb      	ldr	r3, [r7, #12]
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	f042 020a 	orr.w	r2, r2, #10
 8001354:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001356:	68fb      	ldr	r3, [r7, #12]
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	681a      	ldr	r2, [r3, #0]
 800135c:	68fb      	ldr	r3, [r7, #12]
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	f042 0201 	orr.w	r2, r2, #1
 8001364:	601a      	str	r2, [r3, #0]
 8001366:	e005      	b.n	8001374 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8001368:	68fb      	ldr	r3, [r7, #12]
 800136a:	2200      	movs	r2, #0
 800136c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8001370:	2302      	movs	r3, #2
 8001372:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8001374:	7dfb      	ldrb	r3, [r7, #23]
}
 8001376:	4618      	mov	r0, r3
 8001378:	3718      	adds	r7, #24
 800137a:	46bd      	mov	sp, r7
 800137c:	bd80      	pop	{r7, pc}
	...

08001380 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001380:	b580      	push	{r7, lr}
 8001382:	b084      	sub	sp, #16
 8001384:	af00      	add	r7, sp, #0
 8001386:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001388:	2300      	movs	r3, #0
 800138a:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001392:	2b02      	cmp	r3, #2
 8001394:	d005      	beq.n	80013a2 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	2204      	movs	r2, #4
 800139a:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 800139c:	2301      	movs	r3, #1
 800139e:	73fb      	strb	r3, [r7, #15]
 80013a0:	e051      	b.n	8001446 <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	681a      	ldr	r2, [r3, #0]
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	f022 020e 	bic.w	r2, r2, #14
 80013b0:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	681a      	ldr	r2, [r3, #0]
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	f022 0201 	bic.w	r2, r2, #1
 80013c0:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	4a22      	ldr	r2, [pc, #136]	; (8001450 <HAL_DMA_Abort_IT+0xd0>)
 80013c8:	4293      	cmp	r3, r2
 80013ca:	d029      	beq.n	8001420 <HAL_DMA_Abort_IT+0xa0>
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	4a20      	ldr	r2, [pc, #128]	; (8001454 <HAL_DMA_Abort_IT+0xd4>)
 80013d2:	4293      	cmp	r3, r2
 80013d4:	d022      	beq.n	800141c <HAL_DMA_Abort_IT+0x9c>
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	4a1f      	ldr	r2, [pc, #124]	; (8001458 <HAL_DMA_Abort_IT+0xd8>)
 80013dc:	4293      	cmp	r3, r2
 80013de:	d01a      	beq.n	8001416 <HAL_DMA_Abort_IT+0x96>
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	4a1d      	ldr	r2, [pc, #116]	; (800145c <HAL_DMA_Abort_IT+0xdc>)
 80013e6:	4293      	cmp	r3, r2
 80013e8:	d012      	beq.n	8001410 <HAL_DMA_Abort_IT+0x90>
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	4a1c      	ldr	r2, [pc, #112]	; (8001460 <HAL_DMA_Abort_IT+0xe0>)
 80013f0:	4293      	cmp	r3, r2
 80013f2:	d00a      	beq.n	800140a <HAL_DMA_Abort_IT+0x8a>
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	4a1a      	ldr	r2, [pc, #104]	; (8001464 <HAL_DMA_Abort_IT+0xe4>)
 80013fa:	4293      	cmp	r3, r2
 80013fc:	d102      	bne.n	8001404 <HAL_DMA_Abort_IT+0x84>
 80013fe:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001402:	e00e      	b.n	8001422 <HAL_DMA_Abort_IT+0xa2>
 8001404:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001408:	e00b      	b.n	8001422 <HAL_DMA_Abort_IT+0xa2>
 800140a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800140e:	e008      	b.n	8001422 <HAL_DMA_Abort_IT+0xa2>
 8001410:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001414:	e005      	b.n	8001422 <HAL_DMA_Abort_IT+0xa2>
 8001416:	f44f 7380 	mov.w	r3, #256	; 0x100
 800141a:	e002      	b.n	8001422 <HAL_DMA_Abort_IT+0xa2>
 800141c:	2310      	movs	r3, #16
 800141e:	e000      	b.n	8001422 <HAL_DMA_Abort_IT+0xa2>
 8001420:	2301      	movs	r3, #1
 8001422:	4a11      	ldr	r2, [pc, #68]	; (8001468 <HAL_DMA_Abort_IT+0xe8>)
 8001424:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	2201      	movs	r2, #1
 800142a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	2200      	movs	r2, #0
 8001432:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800143a:	2b00      	cmp	r3, #0
 800143c:	d003      	beq.n	8001446 <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001442:	6878      	ldr	r0, [r7, #4]
 8001444:	4798      	blx	r3
    } 
  }
  return status;
 8001446:	7bfb      	ldrb	r3, [r7, #15]
}
 8001448:	4618      	mov	r0, r3
 800144a:	3710      	adds	r7, #16
 800144c:	46bd      	mov	sp, r7
 800144e:	bd80      	pop	{r7, pc}
 8001450:	40020008 	.word	0x40020008
 8001454:	4002001c 	.word	0x4002001c
 8001458:	40020030 	.word	0x40020030
 800145c:	40020044 	.word	0x40020044
 8001460:	40020058 	.word	0x40020058
 8001464:	4002006c 	.word	0x4002006c
 8001468:	40020000 	.word	0x40020000

0800146c <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800146c:	b580      	push	{r7, lr}
 800146e:	b084      	sub	sp, #16
 8001470:	af00      	add	r7, sp, #0
 8001472:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001488:	2204      	movs	r2, #4
 800148a:	409a      	lsls	r2, r3
 800148c:	68fb      	ldr	r3, [r7, #12]
 800148e:	4013      	ands	r3, r2
 8001490:	2b00      	cmp	r3, #0
 8001492:	d04f      	beq.n	8001534 <HAL_DMA_IRQHandler+0xc8>
 8001494:	68bb      	ldr	r3, [r7, #8]
 8001496:	f003 0304 	and.w	r3, r3, #4
 800149a:	2b00      	cmp	r3, #0
 800149c:	d04a      	beq.n	8001534 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	f003 0320 	and.w	r3, r3, #32
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d107      	bne.n	80014bc <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	681a      	ldr	r2, [r3, #0]
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	f022 0204 	bic.w	r2, r2, #4
 80014ba:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	4a66      	ldr	r2, [pc, #408]	; (800165c <HAL_DMA_IRQHandler+0x1f0>)
 80014c2:	4293      	cmp	r3, r2
 80014c4:	d029      	beq.n	800151a <HAL_DMA_IRQHandler+0xae>
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	4a65      	ldr	r2, [pc, #404]	; (8001660 <HAL_DMA_IRQHandler+0x1f4>)
 80014cc:	4293      	cmp	r3, r2
 80014ce:	d022      	beq.n	8001516 <HAL_DMA_IRQHandler+0xaa>
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	4a63      	ldr	r2, [pc, #396]	; (8001664 <HAL_DMA_IRQHandler+0x1f8>)
 80014d6:	4293      	cmp	r3, r2
 80014d8:	d01a      	beq.n	8001510 <HAL_DMA_IRQHandler+0xa4>
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	4a62      	ldr	r2, [pc, #392]	; (8001668 <HAL_DMA_IRQHandler+0x1fc>)
 80014e0:	4293      	cmp	r3, r2
 80014e2:	d012      	beq.n	800150a <HAL_DMA_IRQHandler+0x9e>
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	4a60      	ldr	r2, [pc, #384]	; (800166c <HAL_DMA_IRQHandler+0x200>)
 80014ea:	4293      	cmp	r3, r2
 80014ec:	d00a      	beq.n	8001504 <HAL_DMA_IRQHandler+0x98>
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	4a5f      	ldr	r2, [pc, #380]	; (8001670 <HAL_DMA_IRQHandler+0x204>)
 80014f4:	4293      	cmp	r3, r2
 80014f6:	d102      	bne.n	80014fe <HAL_DMA_IRQHandler+0x92>
 80014f8:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80014fc:	e00e      	b.n	800151c <HAL_DMA_IRQHandler+0xb0>
 80014fe:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8001502:	e00b      	b.n	800151c <HAL_DMA_IRQHandler+0xb0>
 8001504:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8001508:	e008      	b.n	800151c <HAL_DMA_IRQHandler+0xb0>
 800150a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800150e:	e005      	b.n	800151c <HAL_DMA_IRQHandler+0xb0>
 8001510:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001514:	e002      	b.n	800151c <HAL_DMA_IRQHandler+0xb0>
 8001516:	2340      	movs	r3, #64	; 0x40
 8001518:	e000      	b.n	800151c <HAL_DMA_IRQHandler+0xb0>
 800151a:	2304      	movs	r3, #4
 800151c:	4a55      	ldr	r2, [pc, #340]	; (8001674 <HAL_DMA_IRQHandler+0x208>)
 800151e:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001524:	2b00      	cmp	r3, #0
 8001526:	f000 8094 	beq.w	8001652 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800152e:	6878      	ldr	r0, [r7, #4]
 8001530:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8001532:	e08e      	b.n	8001652 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001538:	2202      	movs	r2, #2
 800153a:	409a      	lsls	r2, r3
 800153c:	68fb      	ldr	r3, [r7, #12]
 800153e:	4013      	ands	r3, r2
 8001540:	2b00      	cmp	r3, #0
 8001542:	d056      	beq.n	80015f2 <HAL_DMA_IRQHandler+0x186>
 8001544:	68bb      	ldr	r3, [r7, #8]
 8001546:	f003 0302 	and.w	r3, r3, #2
 800154a:	2b00      	cmp	r3, #0
 800154c:	d051      	beq.n	80015f2 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	f003 0320 	and.w	r3, r3, #32
 8001558:	2b00      	cmp	r3, #0
 800155a:	d10b      	bne.n	8001574 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	681a      	ldr	r2, [r3, #0]
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	f022 020a 	bic.w	r2, r2, #10
 800156a:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	2201      	movs	r2, #1
 8001570:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	4a38      	ldr	r2, [pc, #224]	; (800165c <HAL_DMA_IRQHandler+0x1f0>)
 800157a:	4293      	cmp	r3, r2
 800157c:	d029      	beq.n	80015d2 <HAL_DMA_IRQHandler+0x166>
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	4a37      	ldr	r2, [pc, #220]	; (8001660 <HAL_DMA_IRQHandler+0x1f4>)
 8001584:	4293      	cmp	r3, r2
 8001586:	d022      	beq.n	80015ce <HAL_DMA_IRQHandler+0x162>
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	4a35      	ldr	r2, [pc, #212]	; (8001664 <HAL_DMA_IRQHandler+0x1f8>)
 800158e:	4293      	cmp	r3, r2
 8001590:	d01a      	beq.n	80015c8 <HAL_DMA_IRQHandler+0x15c>
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	4a34      	ldr	r2, [pc, #208]	; (8001668 <HAL_DMA_IRQHandler+0x1fc>)
 8001598:	4293      	cmp	r3, r2
 800159a:	d012      	beq.n	80015c2 <HAL_DMA_IRQHandler+0x156>
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	4a32      	ldr	r2, [pc, #200]	; (800166c <HAL_DMA_IRQHandler+0x200>)
 80015a2:	4293      	cmp	r3, r2
 80015a4:	d00a      	beq.n	80015bc <HAL_DMA_IRQHandler+0x150>
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	4a31      	ldr	r2, [pc, #196]	; (8001670 <HAL_DMA_IRQHandler+0x204>)
 80015ac:	4293      	cmp	r3, r2
 80015ae:	d102      	bne.n	80015b6 <HAL_DMA_IRQHandler+0x14a>
 80015b0:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80015b4:	e00e      	b.n	80015d4 <HAL_DMA_IRQHandler+0x168>
 80015b6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80015ba:	e00b      	b.n	80015d4 <HAL_DMA_IRQHandler+0x168>
 80015bc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80015c0:	e008      	b.n	80015d4 <HAL_DMA_IRQHandler+0x168>
 80015c2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80015c6:	e005      	b.n	80015d4 <HAL_DMA_IRQHandler+0x168>
 80015c8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80015cc:	e002      	b.n	80015d4 <HAL_DMA_IRQHandler+0x168>
 80015ce:	2320      	movs	r3, #32
 80015d0:	e000      	b.n	80015d4 <HAL_DMA_IRQHandler+0x168>
 80015d2:	2302      	movs	r3, #2
 80015d4:	4a27      	ldr	r2, [pc, #156]	; (8001674 <HAL_DMA_IRQHandler+0x208>)
 80015d6:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	2200      	movs	r2, #0
 80015dc:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d034      	beq.n	8001652 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015ec:	6878      	ldr	r0, [r7, #4]
 80015ee:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80015f0:	e02f      	b.n	8001652 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015f6:	2208      	movs	r2, #8
 80015f8:	409a      	lsls	r2, r3
 80015fa:	68fb      	ldr	r3, [r7, #12]
 80015fc:	4013      	ands	r3, r2
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d028      	beq.n	8001654 <HAL_DMA_IRQHandler+0x1e8>
 8001602:	68bb      	ldr	r3, [r7, #8]
 8001604:	f003 0308 	and.w	r3, r3, #8
 8001608:	2b00      	cmp	r3, #0
 800160a:	d023      	beq.n	8001654 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	681a      	ldr	r2, [r3, #0]
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	f022 020e 	bic.w	r2, r2, #14
 800161a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001624:	2101      	movs	r1, #1
 8001626:	fa01 f202 	lsl.w	r2, r1, r2
 800162a:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	2201      	movs	r2, #1
 8001630:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	2201      	movs	r2, #1
 8001636:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	2200      	movs	r2, #0
 800163e:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001646:	2b00      	cmp	r3, #0
 8001648:	d004      	beq.n	8001654 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800164e:	6878      	ldr	r0, [r7, #4]
 8001650:	4798      	blx	r3
    }
  }
  return;
 8001652:	bf00      	nop
 8001654:	bf00      	nop
}
 8001656:	3710      	adds	r7, #16
 8001658:	46bd      	mov	sp, r7
 800165a:	bd80      	pop	{r7, pc}
 800165c:	40020008 	.word	0x40020008
 8001660:	4002001c 	.word	0x4002001c
 8001664:	40020030 	.word	0x40020030
 8001668:	40020044 	.word	0x40020044
 800166c:	40020058 	.word	0x40020058
 8001670:	4002006c 	.word	0x4002006c
 8001674:	40020000 	.word	0x40020000

08001678 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001678:	b480      	push	{r7}
 800167a:	b085      	sub	sp, #20
 800167c:	af00      	add	r7, sp, #0
 800167e:	60f8      	str	r0, [r7, #12]
 8001680:	60b9      	str	r1, [r7, #8]
 8001682:	607a      	str	r2, [r7, #4]
 8001684:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001686:	68fb      	ldr	r3, [r7, #12]
 8001688:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800168a:	68fb      	ldr	r3, [r7, #12]
 800168c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800168e:	2101      	movs	r1, #1
 8001690:	fa01 f202 	lsl.w	r2, r1, r2
 8001694:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001696:	68fb      	ldr	r3, [r7, #12]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	683a      	ldr	r2, [r7, #0]
 800169c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800169e:	68fb      	ldr	r3, [r7, #12]
 80016a0:	685b      	ldr	r3, [r3, #4]
 80016a2:	2b10      	cmp	r3, #16
 80016a4:	d108      	bne.n	80016b8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80016a6:	68fb      	ldr	r3, [r7, #12]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	687a      	ldr	r2, [r7, #4]
 80016ac:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80016ae:	68fb      	ldr	r3, [r7, #12]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	68ba      	ldr	r2, [r7, #8]
 80016b4:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80016b6:	e007      	b.n	80016c8 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 80016b8:	68fb      	ldr	r3, [r7, #12]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	68ba      	ldr	r2, [r7, #8]
 80016be:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80016c0:	68fb      	ldr	r3, [r7, #12]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	687a      	ldr	r2, [r7, #4]
 80016c6:	60da      	str	r2, [r3, #12]
}
 80016c8:	bf00      	nop
 80016ca:	3714      	adds	r7, #20
 80016cc:	46bd      	mov	sp, r7
 80016ce:	bc80      	pop	{r7}
 80016d0:	4770      	bx	lr
	...

080016d4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80016d4:	b480      	push	{r7}
 80016d6:	b08b      	sub	sp, #44	; 0x2c
 80016d8:	af00      	add	r7, sp, #0
 80016da:	6078      	str	r0, [r7, #4]
 80016dc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80016de:	2300      	movs	r3, #0
 80016e0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80016e2:	2300      	movs	r3, #0
 80016e4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80016e6:	e169      	b.n	80019bc <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80016e8:	2201      	movs	r2, #1
 80016ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016ec:	fa02 f303 	lsl.w	r3, r2, r3
 80016f0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80016f2:	683b      	ldr	r3, [r7, #0]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	69fa      	ldr	r2, [r7, #28]
 80016f8:	4013      	ands	r3, r2
 80016fa:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80016fc:	69ba      	ldr	r2, [r7, #24]
 80016fe:	69fb      	ldr	r3, [r7, #28]
 8001700:	429a      	cmp	r2, r3
 8001702:	f040 8158 	bne.w	80019b6 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001706:	683b      	ldr	r3, [r7, #0]
 8001708:	685b      	ldr	r3, [r3, #4]
 800170a:	4a9a      	ldr	r2, [pc, #616]	; (8001974 <HAL_GPIO_Init+0x2a0>)
 800170c:	4293      	cmp	r3, r2
 800170e:	d05e      	beq.n	80017ce <HAL_GPIO_Init+0xfa>
 8001710:	4a98      	ldr	r2, [pc, #608]	; (8001974 <HAL_GPIO_Init+0x2a0>)
 8001712:	4293      	cmp	r3, r2
 8001714:	d875      	bhi.n	8001802 <HAL_GPIO_Init+0x12e>
 8001716:	4a98      	ldr	r2, [pc, #608]	; (8001978 <HAL_GPIO_Init+0x2a4>)
 8001718:	4293      	cmp	r3, r2
 800171a:	d058      	beq.n	80017ce <HAL_GPIO_Init+0xfa>
 800171c:	4a96      	ldr	r2, [pc, #600]	; (8001978 <HAL_GPIO_Init+0x2a4>)
 800171e:	4293      	cmp	r3, r2
 8001720:	d86f      	bhi.n	8001802 <HAL_GPIO_Init+0x12e>
 8001722:	4a96      	ldr	r2, [pc, #600]	; (800197c <HAL_GPIO_Init+0x2a8>)
 8001724:	4293      	cmp	r3, r2
 8001726:	d052      	beq.n	80017ce <HAL_GPIO_Init+0xfa>
 8001728:	4a94      	ldr	r2, [pc, #592]	; (800197c <HAL_GPIO_Init+0x2a8>)
 800172a:	4293      	cmp	r3, r2
 800172c:	d869      	bhi.n	8001802 <HAL_GPIO_Init+0x12e>
 800172e:	4a94      	ldr	r2, [pc, #592]	; (8001980 <HAL_GPIO_Init+0x2ac>)
 8001730:	4293      	cmp	r3, r2
 8001732:	d04c      	beq.n	80017ce <HAL_GPIO_Init+0xfa>
 8001734:	4a92      	ldr	r2, [pc, #584]	; (8001980 <HAL_GPIO_Init+0x2ac>)
 8001736:	4293      	cmp	r3, r2
 8001738:	d863      	bhi.n	8001802 <HAL_GPIO_Init+0x12e>
 800173a:	4a92      	ldr	r2, [pc, #584]	; (8001984 <HAL_GPIO_Init+0x2b0>)
 800173c:	4293      	cmp	r3, r2
 800173e:	d046      	beq.n	80017ce <HAL_GPIO_Init+0xfa>
 8001740:	4a90      	ldr	r2, [pc, #576]	; (8001984 <HAL_GPIO_Init+0x2b0>)
 8001742:	4293      	cmp	r3, r2
 8001744:	d85d      	bhi.n	8001802 <HAL_GPIO_Init+0x12e>
 8001746:	2b12      	cmp	r3, #18
 8001748:	d82a      	bhi.n	80017a0 <HAL_GPIO_Init+0xcc>
 800174a:	2b12      	cmp	r3, #18
 800174c:	d859      	bhi.n	8001802 <HAL_GPIO_Init+0x12e>
 800174e:	a201      	add	r2, pc, #4	; (adr r2, 8001754 <HAL_GPIO_Init+0x80>)
 8001750:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001754:	080017cf 	.word	0x080017cf
 8001758:	080017a9 	.word	0x080017a9
 800175c:	080017bb 	.word	0x080017bb
 8001760:	080017fd 	.word	0x080017fd
 8001764:	08001803 	.word	0x08001803
 8001768:	08001803 	.word	0x08001803
 800176c:	08001803 	.word	0x08001803
 8001770:	08001803 	.word	0x08001803
 8001774:	08001803 	.word	0x08001803
 8001778:	08001803 	.word	0x08001803
 800177c:	08001803 	.word	0x08001803
 8001780:	08001803 	.word	0x08001803
 8001784:	08001803 	.word	0x08001803
 8001788:	08001803 	.word	0x08001803
 800178c:	08001803 	.word	0x08001803
 8001790:	08001803 	.word	0x08001803
 8001794:	08001803 	.word	0x08001803
 8001798:	080017b1 	.word	0x080017b1
 800179c:	080017c5 	.word	0x080017c5
 80017a0:	4a79      	ldr	r2, [pc, #484]	; (8001988 <HAL_GPIO_Init+0x2b4>)
 80017a2:	4293      	cmp	r3, r2
 80017a4:	d013      	beq.n	80017ce <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80017a6:	e02c      	b.n	8001802 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80017a8:	683b      	ldr	r3, [r7, #0]
 80017aa:	68db      	ldr	r3, [r3, #12]
 80017ac:	623b      	str	r3, [r7, #32]
          break;
 80017ae:	e029      	b.n	8001804 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80017b0:	683b      	ldr	r3, [r7, #0]
 80017b2:	68db      	ldr	r3, [r3, #12]
 80017b4:	3304      	adds	r3, #4
 80017b6:	623b      	str	r3, [r7, #32]
          break;
 80017b8:	e024      	b.n	8001804 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80017ba:	683b      	ldr	r3, [r7, #0]
 80017bc:	68db      	ldr	r3, [r3, #12]
 80017be:	3308      	adds	r3, #8
 80017c0:	623b      	str	r3, [r7, #32]
          break;
 80017c2:	e01f      	b.n	8001804 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80017c4:	683b      	ldr	r3, [r7, #0]
 80017c6:	68db      	ldr	r3, [r3, #12]
 80017c8:	330c      	adds	r3, #12
 80017ca:	623b      	str	r3, [r7, #32]
          break;
 80017cc:	e01a      	b.n	8001804 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80017ce:	683b      	ldr	r3, [r7, #0]
 80017d0:	689b      	ldr	r3, [r3, #8]
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d102      	bne.n	80017dc <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80017d6:	2304      	movs	r3, #4
 80017d8:	623b      	str	r3, [r7, #32]
          break;
 80017da:	e013      	b.n	8001804 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80017dc:	683b      	ldr	r3, [r7, #0]
 80017de:	689b      	ldr	r3, [r3, #8]
 80017e0:	2b01      	cmp	r3, #1
 80017e2:	d105      	bne.n	80017f0 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80017e4:	2308      	movs	r3, #8
 80017e6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	69fa      	ldr	r2, [r7, #28]
 80017ec:	611a      	str	r2, [r3, #16]
          break;
 80017ee:	e009      	b.n	8001804 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80017f0:	2308      	movs	r3, #8
 80017f2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	69fa      	ldr	r2, [r7, #28]
 80017f8:	615a      	str	r2, [r3, #20]
          break;
 80017fa:	e003      	b.n	8001804 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80017fc:	2300      	movs	r3, #0
 80017fe:	623b      	str	r3, [r7, #32]
          break;
 8001800:	e000      	b.n	8001804 <HAL_GPIO_Init+0x130>
          break;
 8001802:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001804:	69bb      	ldr	r3, [r7, #24]
 8001806:	2bff      	cmp	r3, #255	; 0xff
 8001808:	d801      	bhi.n	800180e <HAL_GPIO_Init+0x13a>
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	e001      	b.n	8001812 <HAL_GPIO_Init+0x13e>
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	3304      	adds	r3, #4
 8001812:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001814:	69bb      	ldr	r3, [r7, #24]
 8001816:	2bff      	cmp	r3, #255	; 0xff
 8001818:	d802      	bhi.n	8001820 <HAL_GPIO_Init+0x14c>
 800181a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800181c:	009b      	lsls	r3, r3, #2
 800181e:	e002      	b.n	8001826 <HAL_GPIO_Init+0x152>
 8001820:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001822:	3b08      	subs	r3, #8
 8001824:	009b      	lsls	r3, r3, #2
 8001826:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001828:	697b      	ldr	r3, [r7, #20]
 800182a:	681a      	ldr	r2, [r3, #0]
 800182c:	210f      	movs	r1, #15
 800182e:	693b      	ldr	r3, [r7, #16]
 8001830:	fa01 f303 	lsl.w	r3, r1, r3
 8001834:	43db      	mvns	r3, r3
 8001836:	401a      	ands	r2, r3
 8001838:	6a39      	ldr	r1, [r7, #32]
 800183a:	693b      	ldr	r3, [r7, #16]
 800183c:	fa01 f303 	lsl.w	r3, r1, r3
 8001840:	431a      	orrs	r2, r3
 8001842:	697b      	ldr	r3, [r7, #20]
 8001844:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001846:	683b      	ldr	r3, [r7, #0]
 8001848:	685b      	ldr	r3, [r3, #4]
 800184a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800184e:	2b00      	cmp	r3, #0
 8001850:	f000 80b1 	beq.w	80019b6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001854:	4b4d      	ldr	r3, [pc, #308]	; (800198c <HAL_GPIO_Init+0x2b8>)
 8001856:	699b      	ldr	r3, [r3, #24]
 8001858:	4a4c      	ldr	r2, [pc, #304]	; (800198c <HAL_GPIO_Init+0x2b8>)
 800185a:	f043 0301 	orr.w	r3, r3, #1
 800185e:	6193      	str	r3, [r2, #24]
 8001860:	4b4a      	ldr	r3, [pc, #296]	; (800198c <HAL_GPIO_Init+0x2b8>)
 8001862:	699b      	ldr	r3, [r3, #24]
 8001864:	f003 0301 	and.w	r3, r3, #1
 8001868:	60bb      	str	r3, [r7, #8]
 800186a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800186c:	4a48      	ldr	r2, [pc, #288]	; (8001990 <HAL_GPIO_Init+0x2bc>)
 800186e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001870:	089b      	lsrs	r3, r3, #2
 8001872:	3302      	adds	r3, #2
 8001874:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001878:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800187a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800187c:	f003 0303 	and.w	r3, r3, #3
 8001880:	009b      	lsls	r3, r3, #2
 8001882:	220f      	movs	r2, #15
 8001884:	fa02 f303 	lsl.w	r3, r2, r3
 8001888:	43db      	mvns	r3, r3
 800188a:	68fa      	ldr	r2, [r7, #12]
 800188c:	4013      	ands	r3, r2
 800188e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	4a40      	ldr	r2, [pc, #256]	; (8001994 <HAL_GPIO_Init+0x2c0>)
 8001894:	4293      	cmp	r3, r2
 8001896:	d013      	beq.n	80018c0 <HAL_GPIO_Init+0x1ec>
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	4a3f      	ldr	r2, [pc, #252]	; (8001998 <HAL_GPIO_Init+0x2c4>)
 800189c:	4293      	cmp	r3, r2
 800189e:	d00d      	beq.n	80018bc <HAL_GPIO_Init+0x1e8>
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	4a3e      	ldr	r2, [pc, #248]	; (800199c <HAL_GPIO_Init+0x2c8>)
 80018a4:	4293      	cmp	r3, r2
 80018a6:	d007      	beq.n	80018b8 <HAL_GPIO_Init+0x1e4>
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	4a3d      	ldr	r2, [pc, #244]	; (80019a0 <HAL_GPIO_Init+0x2cc>)
 80018ac:	4293      	cmp	r3, r2
 80018ae:	d101      	bne.n	80018b4 <HAL_GPIO_Init+0x1e0>
 80018b0:	2303      	movs	r3, #3
 80018b2:	e006      	b.n	80018c2 <HAL_GPIO_Init+0x1ee>
 80018b4:	2304      	movs	r3, #4
 80018b6:	e004      	b.n	80018c2 <HAL_GPIO_Init+0x1ee>
 80018b8:	2302      	movs	r3, #2
 80018ba:	e002      	b.n	80018c2 <HAL_GPIO_Init+0x1ee>
 80018bc:	2301      	movs	r3, #1
 80018be:	e000      	b.n	80018c2 <HAL_GPIO_Init+0x1ee>
 80018c0:	2300      	movs	r3, #0
 80018c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80018c4:	f002 0203 	and.w	r2, r2, #3
 80018c8:	0092      	lsls	r2, r2, #2
 80018ca:	4093      	lsls	r3, r2
 80018cc:	68fa      	ldr	r2, [r7, #12]
 80018ce:	4313      	orrs	r3, r2
 80018d0:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80018d2:	492f      	ldr	r1, [pc, #188]	; (8001990 <HAL_GPIO_Init+0x2bc>)
 80018d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018d6:	089b      	lsrs	r3, r3, #2
 80018d8:	3302      	adds	r3, #2
 80018da:	68fa      	ldr	r2, [r7, #12]
 80018dc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80018e0:	683b      	ldr	r3, [r7, #0]
 80018e2:	685b      	ldr	r3, [r3, #4]
 80018e4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d006      	beq.n	80018fa <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80018ec:	4b2d      	ldr	r3, [pc, #180]	; (80019a4 <HAL_GPIO_Init+0x2d0>)
 80018ee:	681a      	ldr	r2, [r3, #0]
 80018f0:	492c      	ldr	r1, [pc, #176]	; (80019a4 <HAL_GPIO_Init+0x2d0>)
 80018f2:	69bb      	ldr	r3, [r7, #24]
 80018f4:	4313      	orrs	r3, r2
 80018f6:	600b      	str	r3, [r1, #0]
 80018f8:	e006      	b.n	8001908 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80018fa:	4b2a      	ldr	r3, [pc, #168]	; (80019a4 <HAL_GPIO_Init+0x2d0>)
 80018fc:	681a      	ldr	r2, [r3, #0]
 80018fe:	69bb      	ldr	r3, [r7, #24]
 8001900:	43db      	mvns	r3, r3
 8001902:	4928      	ldr	r1, [pc, #160]	; (80019a4 <HAL_GPIO_Init+0x2d0>)
 8001904:	4013      	ands	r3, r2
 8001906:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001908:	683b      	ldr	r3, [r7, #0]
 800190a:	685b      	ldr	r3, [r3, #4]
 800190c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001910:	2b00      	cmp	r3, #0
 8001912:	d006      	beq.n	8001922 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001914:	4b23      	ldr	r3, [pc, #140]	; (80019a4 <HAL_GPIO_Init+0x2d0>)
 8001916:	685a      	ldr	r2, [r3, #4]
 8001918:	4922      	ldr	r1, [pc, #136]	; (80019a4 <HAL_GPIO_Init+0x2d0>)
 800191a:	69bb      	ldr	r3, [r7, #24]
 800191c:	4313      	orrs	r3, r2
 800191e:	604b      	str	r3, [r1, #4]
 8001920:	e006      	b.n	8001930 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001922:	4b20      	ldr	r3, [pc, #128]	; (80019a4 <HAL_GPIO_Init+0x2d0>)
 8001924:	685a      	ldr	r2, [r3, #4]
 8001926:	69bb      	ldr	r3, [r7, #24]
 8001928:	43db      	mvns	r3, r3
 800192a:	491e      	ldr	r1, [pc, #120]	; (80019a4 <HAL_GPIO_Init+0x2d0>)
 800192c:	4013      	ands	r3, r2
 800192e:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001930:	683b      	ldr	r3, [r7, #0]
 8001932:	685b      	ldr	r3, [r3, #4]
 8001934:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001938:	2b00      	cmp	r3, #0
 800193a:	d006      	beq.n	800194a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800193c:	4b19      	ldr	r3, [pc, #100]	; (80019a4 <HAL_GPIO_Init+0x2d0>)
 800193e:	689a      	ldr	r2, [r3, #8]
 8001940:	4918      	ldr	r1, [pc, #96]	; (80019a4 <HAL_GPIO_Init+0x2d0>)
 8001942:	69bb      	ldr	r3, [r7, #24]
 8001944:	4313      	orrs	r3, r2
 8001946:	608b      	str	r3, [r1, #8]
 8001948:	e006      	b.n	8001958 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800194a:	4b16      	ldr	r3, [pc, #88]	; (80019a4 <HAL_GPIO_Init+0x2d0>)
 800194c:	689a      	ldr	r2, [r3, #8]
 800194e:	69bb      	ldr	r3, [r7, #24]
 8001950:	43db      	mvns	r3, r3
 8001952:	4914      	ldr	r1, [pc, #80]	; (80019a4 <HAL_GPIO_Init+0x2d0>)
 8001954:	4013      	ands	r3, r2
 8001956:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001958:	683b      	ldr	r3, [r7, #0]
 800195a:	685b      	ldr	r3, [r3, #4]
 800195c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001960:	2b00      	cmp	r3, #0
 8001962:	d021      	beq.n	80019a8 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001964:	4b0f      	ldr	r3, [pc, #60]	; (80019a4 <HAL_GPIO_Init+0x2d0>)
 8001966:	68da      	ldr	r2, [r3, #12]
 8001968:	490e      	ldr	r1, [pc, #56]	; (80019a4 <HAL_GPIO_Init+0x2d0>)
 800196a:	69bb      	ldr	r3, [r7, #24]
 800196c:	4313      	orrs	r3, r2
 800196e:	60cb      	str	r3, [r1, #12]
 8001970:	e021      	b.n	80019b6 <HAL_GPIO_Init+0x2e2>
 8001972:	bf00      	nop
 8001974:	10320000 	.word	0x10320000
 8001978:	10310000 	.word	0x10310000
 800197c:	10220000 	.word	0x10220000
 8001980:	10210000 	.word	0x10210000
 8001984:	10120000 	.word	0x10120000
 8001988:	10110000 	.word	0x10110000
 800198c:	40021000 	.word	0x40021000
 8001990:	40010000 	.word	0x40010000
 8001994:	40010800 	.word	0x40010800
 8001998:	40010c00 	.word	0x40010c00
 800199c:	40011000 	.word	0x40011000
 80019a0:	40011400 	.word	0x40011400
 80019a4:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80019a8:	4b0b      	ldr	r3, [pc, #44]	; (80019d8 <HAL_GPIO_Init+0x304>)
 80019aa:	68da      	ldr	r2, [r3, #12]
 80019ac:	69bb      	ldr	r3, [r7, #24]
 80019ae:	43db      	mvns	r3, r3
 80019b0:	4909      	ldr	r1, [pc, #36]	; (80019d8 <HAL_GPIO_Init+0x304>)
 80019b2:	4013      	ands	r3, r2
 80019b4:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80019b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019b8:	3301      	adds	r3, #1
 80019ba:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80019bc:	683b      	ldr	r3, [r7, #0]
 80019be:	681a      	ldr	r2, [r3, #0]
 80019c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019c2:	fa22 f303 	lsr.w	r3, r2, r3
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	f47f ae8e 	bne.w	80016e8 <HAL_GPIO_Init+0x14>
  }
}
 80019cc:	bf00      	nop
 80019ce:	bf00      	nop
 80019d0:	372c      	adds	r7, #44	; 0x2c
 80019d2:	46bd      	mov	sp, r7
 80019d4:	bc80      	pop	{r7}
 80019d6:	4770      	bx	lr
 80019d8:	40010400 	.word	0x40010400

080019dc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80019dc:	b480      	push	{r7}
 80019de:	b083      	sub	sp, #12
 80019e0:	af00      	add	r7, sp, #0
 80019e2:	6078      	str	r0, [r7, #4]
 80019e4:	460b      	mov	r3, r1
 80019e6:	807b      	strh	r3, [r7, #2]
 80019e8:	4613      	mov	r3, r2
 80019ea:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80019ec:	787b      	ldrb	r3, [r7, #1]
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d003      	beq.n	80019fa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80019f2:	887a      	ldrh	r2, [r7, #2]
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80019f8:	e003      	b.n	8001a02 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80019fa:	887b      	ldrh	r3, [r7, #2]
 80019fc:	041a      	lsls	r2, r3, #16
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	611a      	str	r2, [r3, #16]
}
 8001a02:	bf00      	nop
 8001a04:	370c      	adds	r7, #12
 8001a06:	46bd      	mov	sp, r7
 8001a08:	bc80      	pop	{r7}
 8001a0a:	4770      	bx	lr

08001a0c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001a0c:	b580      	push	{r7, lr}
 8001a0e:	b086      	sub	sp, #24
 8001a10:	af00      	add	r7, sp, #0
 8001a12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d101      	bne.n	8001a1e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001a1a:	2301      	movs	r3, #1
 8001a1c:	e26c      	b.n	8001ef8 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	f003 0301 	and.w	r3, r3, #1
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	f000 8087 	beq.w	8001b3a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001a2c:	4b92      	ldr	r3, [pc, #584]	; (8001c78 <HAL_RCC_OscConfig+0x26c>)
 8001a2e:	685b      	ldr	r3, [r3, #4]
 8001a30:	f003 030c 	and.w	r3, r3, #12
 8001a34:	2b04      	cmp	r3, #4
 8001a36:	d00c      	beq.n	8001a52 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001a38:	4b8f      	ldr	r3, [pc, #572]	; (8001c78 <HAL_RCC_OscConfig+0x26c>)
 8001a3a:	685b      	ldr	r3, [r3, #4]
 8001a3c:	f003 030c 	and.w	r3, r3, #12
 8001a40:	2b08      	cmp	r3, #8
 8001a42:	d112      	bne.n	8001a6a <HAL_RCC_OscConfig+0x5e>
 8001a44:	4b8c      	ldr	r3, [pc, #560]	; (8001c78 <HAL_RCC_OscConfig+0x26c>)
 8001a46:	685b      	ldr	r3, [r3, #4]
 8001a48:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a4c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001a50:	d10b      	bne.n	8001a6a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a52:	4b89      	ldr	r3, [pc, #548]	; (8001c78 <HAL_RCC_OscConfig+0x26c>)
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d06c      	beq.n	8001b38 <HAL_RCC_OscConfig+0x12c>
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	685b      	ldr	r3, [r3, #4]
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d168      	bne.n	8001b38 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001a66:	2301      	movs	r3, #1
 8001a68:	e246      	b.n	8001ef8 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	685b      	ldr	r3, [r3, #4]
 8001a6e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001a72:	d106      	bne.n	8001a82 <HAL_RCC_OscConfig+0x76>
 8001a74:	4b80      	ldr	r3, [pc, #512]	; (8001c78 <HAL_RCC_OscConfig+0x26c>)
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	4a7f      	ldr	r2, [pc, #508]	; (8001c78 <HAL_RCC_OscConfig+0x26c>)
 8001a7a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a7e:	6013      	str	r3, [r2, #0]
 8001a80:	e02e      	b.n	8001ae0 <HAL_RCC_OscConfig+0xd4>
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	685b      	ldr	r3, [r3, #4]
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d10c      	bne.n	8001aa4 <HAL_RCC_OscConfig+0x98>
 8001a8a:	4b7b      	ldr	r3, [pc, #492]	; (8001c78 <HAL_RCC_OscConfig+0x26c>)
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	4a7a      	ldr	r2, [pc, #488]	; (8001c78 <HAL_RCC_OscConfig+0x26c>)
 8001a90:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001a94:	6013      	str	r3, [r2, #0]
 8001a96:	4b78      	ldr	r3, [pc, #480]	; (8001c78 <HAL_RCC_OscConfig+0x26c>)
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	4a77      	ldr	r2, [pc, #476]	; (8001c78 <HAL_RCC_OscConfig+0x26c>)
 8001a9c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001aa0:	6013      	str	r3, [r2, #0]
 8001aa2:	e01d      	b.n	8001ae0 <HAL_RCC_OscConfig+0xd4>
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	685b      	ldr	r3, [r3, #4]
 8001aa8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001aac:	d10c      	bne.n	8001ac8 <HAL_RCC_OscConfig+0xbc>
 8001aae:	4b72      	ldr	r3, [pc, #456]	; (8001c78 <HAL_RCC_OscConfig+0x26c>)
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	4a71      	ldr	r2, [pc, #452]	; (8001c78 <HAL_RCC_OscConfig+0x26c>)
 8001ab4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001ab8:	6013      	str	r3, [r2, #0]
 8001aba:	4b6f      	ldr	r3, [pc, #444]	; (8001c78 <HAL_RCC_OscConfig+0x26c>)
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	4a6e      	ldr	r2, [pc, #440]	; (8001c78 <HAL_RCC_OscConfig+0x26c>)
 8001ac0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ac4:	6013      	str	r3, [r2, #0]
 8001ac6:	e00b      	b.n	8001ae0 <HAL_RCC_OscConfig+0xd4>
 8001ac8:	4b6b      	ldr	r3, [pc, #428]	; (8001c78 <HAL_RCC_OscConfig+0x26c>)
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	4a6a      	ldr	r2, [pc, #424]	; (8001c78 <HAL_RCC_OscConfig+0x26c>)
 8001ace:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001ad2:	6013      	str	r3, [r2, #0]
 8001ad4:	4b68      	ldr	r3, [pc, #416]	; (8001c78 <HAL_RCC_OscConfig+0x26c>)
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	4a67      	ldr	r2, [pc, #412]	; (8001c78 <HAL_RCC_OscConfig+0x26c>)
 8001ada:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001ade:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	685b      	ldr	r3, [r3, #4]
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d013      	beq.n	8001b10 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ae8:	f7ff fa54 	bl	8000f94 <HAL_GetTick>
 8001aec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001aee:	e008      	b.n	8001b02 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001af0:	f7ff fa50 	bl	8000f94 <HAL_GetTick>
 8001af4:	4602      	mov	r2, r0
 8001af6:	693b      	ldr	r3, [r7, #16]
 8001af8:	1ad3      	subs	r3, r2, r3
 8001afa:	2b64      	cmp	r3, #100	; 0x64
 8001afc:	d901      	bls.n	8001b02 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001afe:	2303      	movs	r3, #3
 8001b00:	e1fa      	b.n	8001ef8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b02:	4b5d      	ldr	r3, [pc, #372]	; (8001c78 <HAL_RCC_OscConfig+0x26c>)
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d0f0      	beq.n	8001af0 <HAL_RCC_OscConfig+0xe4>
 8001b0e:	e014      	b.n	8001b3a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b10:	f7ff fa40 	bl	8000f94 <HAL_GetTick>
 8001b14:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b16:	e008      	b.n	8001b2a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001b18:	f7ff fa3c 	bl	8000f94 <HAL_GetTick>
 8001b1c:	4602      	mov	r2, r0
 8001b1e:	693b      	ldr	r3, [r7, #16]
 8001b20:	1ad3      	subs	r3, r2, r3
 8001b22:	2b64      	cmp	r3, #100	; 0x64
 8001b24:	d901      	bls.n	8001b2a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001b26:	2303      	movs	r3, #3
 8001b28:	e1e6      	b.n	8001ef8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b2a:	4b53      	ldr	r3, [pc, #332]	; (8001c78 <HAL_RCC_OscConfig+0x26c>)
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d1f0      	bne.n	8001b18 <HAL_RCC_OscConfig+0x10c>
 8001b36:	e000      	b.n	8001b3a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b38:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	f003 0302 	and.w	r3, r3, #2
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d063      	beq.n	8001c0e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001b46:	4b4c      	ldr	r3, [pc, #304]	; (8001c78 <HAL_RCC_OscConfig+0x26c>)
 8001b48:	685b      	ldr	r3, [r3, #4]
 8001b4a:	f003 030c 	and.w	r3, r3, #12
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d00b      	beq.n	8001b6a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001b52:	4b49      	ldr	r3, [pc, #292]	; (8001c78 <HAL_RCC_OscConfig+0x26c>)
 8001b54:	685b      	ldr	r3, [r3, #4]
 8001b56:	f003 030c 	and.w	r3, r3, #12
 8001b5a:	2b08      	cmp	r3, #8
 8001b5c:	d11c      	bne.n	8001b98 <HAL_RCC_OscConfig+0x18c>
 8001b5e:	4b46      	ldr	r3, [pc, #280]	; (8001c78 <HAL_RCC_OscConfig+0x26c>)
 8001b60:	685b      	ldr	r3, [r3, #4]
 8001b62:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d116      	bne.n	8001b98 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b6a:	4b43      	ldr	r3, [pc, #268]	; (8001c78 <HAL_RCC_OscConfig+0x26c>)
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	f003 0302 	and.w	r3, r3, #2
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d005      	beq.n	8001b82 <HAL_RCC_OscConfig+0x176>
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	691b      	ldr	r3, [r3, #16]
 8001b7a:	2b01      	cmp	r3, #1
 8001b7c:	d001      	beq.n	8001b82 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001b7e:	2301      	movs	r3, #1
 8001b80:	e1ba      	b.n	8001ef8 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b82:	4b3d      	ldr	r3, [pc, #244]	; (8001c78 <HAL_RCC_OscConfig+0x26c>)
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	695b      	ldr	r3, [r3, #20]
 8001b8e:	00db      	lsls	r3, r3, #3
 8001b90:	4939      	ldr	r1, [pc, #228]	; (8001c78 <HAL_RCC_OscConfig+0x26c>)
 8001b92:	4313      	orrs	r3, r2
 8001b94:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b96:	e03a      	b.n	8001c0e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	691b      	ldr	r3, [r3, #16]
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d020      	beq.n	8001be2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001ba0:	4b36      	ldr	r3, [pc, #216]	; (8001c7c <HAL_RCC_OscConfig+0x270>)
 8001ba2:	2201      	movs	r2, #1
 8001ba4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ba6:	f7ff f9f5 	bl	8000f94 <HAL_GetTick>
 8001baa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001bac:	e008      	b.n	8001bc0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001bae:	f7ff f9f1 	bl	8000f94 <HAL_GetTick>
 8001bb2:	4602      	mov	r2, r0
 8001bb4:	693b      	ldr	r3, [r7, #16]
 8001bb6:	1ad3      	subs	r3, r2, r3
 8001bb8:	2b02      	cmp	r3, #2
 8001bba:	d901      	bls.n	8001bc0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001bbc:	2303      	movs	r3, #3
 8001bbe:	e19b      	b.n	8001ef8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001bc0:	4b2d      	ldr	r3, [pc, #180]	; (8001c78 <HAL_RCC_OscConfig+0x26c>)
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	f003 0302 	and.w	r3, r3, #2
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d0f0      	beq.n	8001bae <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001bcc:	4b2a      	ldr	r3, [pc, #168]	; (8001c78 <HAL_RCC_OscConfig+0x26c>)
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	695b      	ldr	r3, [r3, #20]
 8001bd8:	00db      	lsls	r3, r3, #3
 8001bda:	4927      	ldr	r1, [pc, #156]	; (8001c78 <HAL_RCC_OscConfig+0x26c>)
 8001bdc:	4313      	orrs	r3, r2
 8001bde:	600b      	str	r3, [r1, #0]
 8001be0:	e015      	b.n	8001c0e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001be2:	4b26      	ldr	r3, [pc, #152]	; (8001c7c <HAL_RCC_OscConfig+0x270>)
 8001be4:	2200      	movs	r2, #0
 8001be6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001be8:	f7ff f9d4 	bl	8000f94 <HAL_GetTick>
 8001bec:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001bee:	e008      	b.n	8001c02 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001bf0:	f7ff f9d0 	bl	8000f94 <HAL_GetTick>
 8001bf4:	4602      	mov	r2, r0
 8001bf6:	693b      	ldr	r3, [r7, #16]
 8001bf8:	1ad3      	subs	r3, r2, r3
 8001bfa:	2b02      	cmp	r3, #2
 8001bfc:	d901      	bls.n	8001c02 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001bfe:	2303      	movs	r3, #3
 8001c00:	e17a      	b.n	8001ef8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c02:	4b1d      	ldr	r3, [pc, #116]	; (8001c78 <HAL_RCC_OscConfig+0x26c>)
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	f003 0302 	and.w	r3, r3, #2
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d1f0      	bne.n	8001bf0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	f003 0308 	and.w	r3, r3, #8
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d03a      	beq.n	8001c90 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	699b      	ldr	r3, [r3, #24]
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d019      	beq.n	8001c56 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001c22:	4b17      	ldr	r3, [pc, #92]	; (8001c80 <HAL_RCC_OscConfig+0x274>)
 8001c24:	2201      	movs	r2, #1
 8001c26:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c28:	f7ff f9b4 	bl	8000f94 <HAL_GetTick>
 8001c2c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001c2e:	e008      	b.n	8001c42 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001c30:	f7ff f9b0 	bl	8000f94 <HAL_GetTick>
 8001c34:	4602      	mov	r2, r0
 8001c36:	693b      	ldr	r3, [r7, #16]
 8001c38:	1ad3      	subs	r3, r2, r3
 8001c3a:	2b02      	cmp	r3, #2
 8001c3c:	d901      	bls.n	8001c42 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001c3e:	2303      	movs	r3, #3
 8001c40:	e15a      	b.n	8001ef8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001c42:	4b0d      	ldr	r3, [pc, #52]	; (8001c78 <HAL_RCC_OscConfig+0x26c>)
 8001c44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c46:	f003 0302 	and.w	r3, r3, #2
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d0f0      	beq.n	8001c30 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001c4e:	2001      	movs	r0, #1
 8001c50:	f000 fad8 	bl	8002204 <RCC_Delay>
 8001c54:	e01c      	b.n	8001c90 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001c56:	4b0a      	ldr	r3, [pc, #40]	; (8001c80 <HAL_RCC_OscConfig+0x274>)
 8001c58:	2200      	movs	r2, #0
 8001c5a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c5c:	f7ff f99a 	bl	8000f94 <HAL_GetTick>
 8001c60:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c62:	e00f      	b.n	8001c84 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001c64:	f7ff f996 	bl	8000f94 <HAL_GetTick>
 8001c68:	4602      	mov	r2, r0
 8001c6a:	693b      	ldr	r3, [r7, #16]
 8001c6c:	1ad3      	subs	r3, r2, r3
 8001c6e:	2b02      	cmp	r3, #2
 8001c70:	d908      	bls.n	8001c84 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001c72:	2303      	movs	r3, #3
 8001c74:	e140      	b.n	8001ef8 <HAL_RCC_OscConfig+0x4ec>
 8001c76:	bf00      	nop
 8001c78:	40021000 	.word	0x40021000
 8001c7c:	42420000 	.word	0x42420000
 8001c80:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c84:	4b9e      	ldr	r3, [pc, #632]	; (8001f00 <HAL_RCC_OscConfig+0x4f4>)
 8001c86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c88:	f003 0302 	and.w	r3, r3, #2
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d1e9      	bne.n	8001c64 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	f003 0304 	and.w	r3, r3, #4
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	f000 80a6 	beq.w	8001dea <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001c9e:	2300      	movs	r3, #0
 8001ca0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001ca2:	4b97      	ldr	r3, [pc, #604]	; (8001f00 <HAL_RCC_OscConfig+0x4f4>)
 8001ca4:	69db      	ldr	r3, [r3, #28]
 8001ca6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d10d      	bne.n	8001cca <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001cae:	4b94      	ldr	r3, [pc, #592]	; (8001f00 <HAL_RCC_OscConfig+0x4f4>)
 8001cb0:	69db      	ldr	r3, [r3, #28]
 8001cb2:	4a93      	ldr	r2, [pc, #588]	; (8001f00 <HAL_RCC_OscConfig+0x4f4>)
 8001cb4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001cb8:	61d3      	str	r3, [r2, #28]
 8001cba:	4b91      	ldr	r3, [pc, #580]	; (8001f00 <HAL_RCC_OscConfig+0x4f4>)
 8001cbc:	69db      	ldr	r3, [r3, #28]
 8001cbe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001cc2:	60bb      	str	r3, [r7, #8]
 8001cc4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001cc6:	2301      	movs	r3, #1
 8001cc8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001cca:	4b8e      	ldr	r3, [pc, #568]	; (8001f04 <HAL_RCC_OscConfig+0x4f8>)
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d118      	bne.n	8001d08 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001cd6:	4b8b      	ldr	r3, [pc, #556]	; (8001f04 <HAL_RCC_OscConfig+0x4f8>)
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	4a8a      	ldr	r2, [pc, #552]	; (8001f04 <HAL_RCC_OscConfig+0x4f8>)
 8001cdc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ce0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001ce2:	f7ff f957 	bl	8000f94 <HAL_GetTick>
 8001ce6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ce8:	e008      	b.n	8001cfc <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001cea:	f7ff f953 	bl	8000f94 <HAL_GetTick>
 8001cee:	4602      	mov	r2, r0
 8001cf0:	693b      	ldr	r3, [r7, #16]
 8001cf2:	1ad3      	subs	r3, r2, r3
 8001cf4:	2b64      	cmp	r3, #100	; 0x64
 8001cf6:	d901      	bls.n	8001cfc <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001cf8:	2303      	movs	r3, #3
 8001cfa:	e0fd      	b.n	8001ef8 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001cfc:	4b81      	ldr	r3, [pc, #516]	; (8001f04 <HAL_RCC_OscConfig+0x4f8>)
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d0f0      	beq.n	8001cea <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	68db      	ldr	r3, [r3, #12]
 8001d0c:	2b01      	cmp	r3, #1
 8001d0e:	d106      	bne.n	8001d1e <HAL_RCC_OscConfig+0x312>
 8001d10:	4b7b      	ldr	r3, [pc, #492]	; (8001f00 <HAL_RCC_OscConfig+0x4f4>)
 8001d12:	6a1b      	ldr	r3, [r3, #32]
 8001d14:	4a7a      	ldr	r2, [pc, #488]	; (8001f00 <HAL_RCC_OscConfig+0x4f4>)
 8001d16:	f043 0301 	orr.w	r3, r3, #1
 8001d1a:	6213      	str	r3, [r2, #32]
 8001d1c:	e02d      	b.n	8001d7a <HAL_RCC_OscConfig+0x36e>
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	68db      	ldr	r3, [r3, #12]
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d10c      	bne.n	8001d40 <HAL_RCC_OscConfig+0x334>
 8001d26:	4b76      	ldr	r3, [pc, #472]	; (8001f00 <HAL_RCC_OscConfig+0x4f4>)
 8001d28:	6a1b      	ldr	r3, [r3, #32]
 8001d2a:	4a75      	ldr	r2, [pc, #468]	; (8001f00 <HAL_RCC_OscConfig+0x4f4>)
 8001d2c:	f023 0301 	bic.w	r3, r3, #1
 8001d30:	6213      	str	r3, [r2, #32]
 8001d32:	4b73      	ldr	r3, [pc, #460]	; (8001f00 <HAL_RCC_OscConfig+0x4f4>)
 8001d34:	6a1b      	ldr	r3, [r3, #32]
 8001d36:	4a72      	ldr	r2, [pc, #456]	; (8001f00 <HAL_RCC_OscConfig+0x4f4>)
 8001d38:	f023 0304 	bic.w	r3, r3, #4
 8001d3c:	6213      	str	r3, [r2, #32]
 8001d3e:	e01c      	b.n	8001d7a <HAL_RCC_OscConfig+0x36e>
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	68db      	ldr	r3, [r3, #12]
 8001d44:	2b05      	cmp	r3, #5
 8001d46:	d10c      	bne.n	8001d62 <HAL_RCC_OscConfig+0x356>
 8001d48:	4b6d      	ldr	r3, [pc, #436]	; (8001f00 <HAL_RCC_OscConfig+0x4f4>)
 8001d4a:	6a1b      	ldr	r3, [r3, #32]
 8001d4c:	4a6c      	ldr	r2, [pc, #432]	; (8001f00 <HAL_RCC_OscConfig+0x4f4>)
 8001d4e:	f043 0304 	orr.w	r3, r3, #4
 8001d52:	6213      	str	r3, [r2, #32]
 8001d54:	4b6a      	ldr	r3, [pc, #424]	; (8001f00 <HAL_RCC_OscConfig+0x4f4>)
 8001d56:	6a1b      	ldr	r3, [r3, #32]
 8001d58:	4a69      	ldr	r2, [pc, #420]	; (8001f00 <HAL_RCC_OscConfig+0x4f4>)
 8001d5a:	f043 0301 	orr.w	r3, r3, #1
 8001d5e:	6213      	str	r3, [r2, #32]
 8001d60:	e00b      	b.n	8001d7a <HAL_RCC_OscConfig+0x36e>
 8001d62:	4b67      	ldr	r3, [pc, #412]	; (8001f00 <HAL_RCC_OscConfig+0x4f4>)
 8001d64:	6a1b      	ldr	r3, [r3, #32]
 8001d66:	4a66      	ldr	r2, [pc, #408]	; (8001f00 <HAL_RCC_OscConfig+0x4f4>)
 8001d68:	f023 0301 	bic.w	r3, r3, #1
 8001d6c:	6213      	str	r3, [r2, #32]
 8001d6e:	4b64      	ldr	r3, [pc, #400]	; (8001f00 <HAL_RCC_OscConfig+0x4f4>)
 8001d70:	6a1b      	ldr	r3, [r3, #32]
 8001d72:	4a63      	ldr	r2, [pc, #396]	; (8001f00 <HAL_RCC_OscConfig+0x4f4>)
 8001d74:	f023 0304 	bic.w	r3, r3, #4
 8001d78:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	68db      	ldr	r3, [r3, #12]
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d015      	beq.n	8001dae <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d82:	f7ff f907 	bl	8000f94 <HAL_GetTick>
 8001d86:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d88:	e00a      	b.n	8001da0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d8a:	f7ff f903 	bl	8000f94 <HAL_GetTick>
 8001d8e:	4602      	mov	r2, r0
 8001d90:	693b      	ldr	r3, [r7, #16]
 8001d92:	1ad3      	subs	r3, r2, r3
 8001d94:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d98:	4293      	cmp	r3, r2
 8001d9a:	d901      	bls.n	8001da0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001d9c:	2303      	movs	r3, #3
 8001d9e:	e0ab      	b.n	8001ef8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001da0:	4b57      	ldr	r3, [pc, #348]	; (8001f00 <HAL_RCC_OscConfig+0x4f4>)
 8001da2:	6a1b      	ldr	r3, [r3, #32]
 8001da4:	f003 0302 	and.w	r3, r3, #2
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d0ee      	beq.n	8001d8a <HAL_RCC_OscConfig+0x37e>
 8001dac:	e014      	b.n	8001dd8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001dae:	f7ff f8f1 	bl	8000f94 <HAL_GetTick>
 8001db2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001db4:	e00a      	b.n	8001dcc <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001db6:	f7ff f8ed 	bl	8000f94 <HAL_GetTick>
 8001dba:	4602      	mov	r2, r0
 8001dbc:	693b      	ldr	r3, [r7, #16]
 8001dbe:	1ad3      	subs	r3, r2, r3
 8001dc0:	f241 3288 	movw	r2, #5000	; 0x1388
 8001dc4:	4293      	cmp	r3, r2
 8001dc6:	d901      	bls.n	8001dcc <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001dc8:	2303      	movs	r3, #3
 8001dca:	e095      	b.n	8001ef8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001dcc:	4b4c      	ldr	r3, [pc, #304]	; (8001f00 <HAL_RCC_OscConfig+0x4f4>)
 8001dce:	6a1b      	ldr	r3, [r3, #32]
 8001dd0:	f003 0302 	and.w	r3, r3, #2
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d1ee      	bne.n	8001db6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001dd8:	7dfb      	ldrb	r3, [r7, #23]
 8001dda:	2b01      	cmp	r3, #1
 8001ddc:	d105      	bne.n	8001dea <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001dde:	4b48      	ldr	r3, [pc, #288]	; (8001f00 <HAL_RCC_OscConfig+0x4f4>)
 8001de0:	69db      	ldr	r3, [r3, #28]
 8001de2:	4a47      	ldr	r2, [pc, #284]	; (8001f00 <HAL_RCC_OscConfig+0x4f4>)
 8001de4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001de8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	69db      	ldr	r3, [r3, #28]
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	f000 8081 	beq.w	8001ef6 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001df4:	4b42      	ldr	r3, [pc, #264]	; (8001f00 <HAL_RCC_OscConfig+0x4f4>)
 8001df6:	685b      	ldr	r3, [r3, #4]
 8001df8:	f003 030c 	and.w	r3, r3, #12
 8001dfc:	2b08      	cmp	r3, #8
 8001dfe:	d061      	beq.n	8001ec4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	69db      	ldr	r3, [r3, #28]
 8001e04:	2b02      	cmp	r3, #2
 8001e06:	d146      	bne.n	8001e96 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e08:	4b3f      	ldr	r3, [pc, #252]	; (8001f08 <HAL_RCC_OscConfig+0x4fc>)
 8001e0a:	2200      	movs	r2, #0
 8001e0c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e0e:	f7ff f8c1 	bl	8000f94 <HAL_GetTick>
 8001e12:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e14:	e008      	b.n	8001e28 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e16:	f7ff f8bd 	bl	8000f94 <HAL_GetTick>
 8001e1a:	4602      	mov	r2, r0
 8001e1c:	693b      	ldr	r3, [r7, #16]
 8001e1e:	1ad3      	subs	r3, r2, r3
 8001e20:	2b02      	cmp	r3, #2
 8001e22:	d901      	bls.n	8001e28 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001e24:	2303      	movs	r3, #3
 8001e26:	e067      	b.n	8001ef8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e28:	4b35      	ldr	r3, [pc, #212]	; (8001f00 <HAL_RCC_OscConfig+0x4f4>)
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d1f0      	bne.n	8001e16 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	6a1b      	ldr	r3, [r3, #32]
 8001e38:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e3c:	d108      	bne.n	8001e50 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001e3e:	4b30      	ldr	r3, [pc, #192]	; (8001f00 <HAL_RCC_OscConfig+0x4f4>)
 8001e40:	685b      	ldr	r3, [r3, #4]
 8001e42:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	689b      	ldr	r3, [r3, #8]
 8001e4a:	492d      	ldr	r1, [pc, #180]	; (8001f00 <HAL_RCC_OscConfig+0x4f4>)
 8001e4c:	4313      	orrs	r3, r2
 8001e4e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001e50:	4b2b      	ldr	r3, [pc, #172]	; (8001f00 <HAL_RCC_OscConfig+0x4f4>)
 8001e52:	685b      	ldr	r3, [r3, #4]
 8001e54:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	6a19      	ldr	r1, [r3, #32]
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e60:	430b      	orrs	r3, r1
 8001e62:	4927      	ldr	r1, [pc, #156]	; (8001f00 <HAL_RCC_OscConfig+0x4f4>)
 8001e64:	4313      	orrs	r3, r2
 8001e66:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001e68:	4b27      	ldr	r3, [pc, #156]	; (8001f08 <HAL_RCC_OscConfig+0x4fc>)
 8001e6a:	2201      	movs	r2, #1
 8001e6c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e6e:	f7ff f891 	bl	8000f94 <HAL_GetTick>
 8001e72:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001e74:	e008      	b.n	8001e88 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e76:	f7ff f88d 	bl	8000f94 <HAL_GetTick>
 8001e7a:	4602      	mov	r2, r0
 8001e7c:	693b      	ldr	r3, [r7, #16]
 8001e7e:	1ad3      	subs	r3, r2, r3
 8001e80:	2b02      	cmp	r3, #2
 8001e82:	d901      	bls.n	8001e88 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001e84:	2303      	movs	r3, #3
 8001e86:	e037      	b.n	8001ef8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001e88:	4b1d      	ldr	r3, [pc, #116]	; (8001f00 <HAL_RCC_OscConfig+0x4f4>)
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d0f0      	beq.n	8001e76 <HAL_RCC_OscConfig+0x46a>
 8001e94:	e02f      	b.n	8001ef6 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e96:	4b1c      	ldr	r3, [pc, #112]	; (8001f08 <HAL_RCC_OscConfig+0x4fc>)
 8001e98:	2200      	movs	r2, #0
 8001e9a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e9c:	f7ff f87a 	bl	8000f94 <HAL_GetTick>
 8001ea0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ea2:	e008      	b.n	8001eb6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ea4:	f7ff f876 	bl	8000f94 <HAL_GetTick>
 8001ea8:	4602      	mov	r2, r0
 8001eaa:	693b      	ldr	r3, [r7, #16]
 8001eac:	1ad3      	subs	r3, r2, r3
 8001eae:	2b02      	cmp	r3, #2
 8001eb0:	d901      	bls.n	8001eb6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001eb2:	2303      	movs	r3, #3
 8001eb4:	e020      	b.n	8001ef8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001eb6:	4b12      	ldr	r3, [pc, #72]	; (8001f00 <HAL_RCC_OscConfig+0x4f4>)
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d1f0      	bne.n	8001ea4 <HAL_RCC_OscConfig+0x498>
 8001ec2:	e018      	b.n	8001ef6 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	69db      	ldr	r3, [r3, #28]
 8001ec8:	2b01      	cmp	r3, #1
 8001eca:	d101      	bne.n	8001ed0 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8001ecc:	2301      	movs	r3, #1
 8001ece:	e013      	b.n	8001ef8 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001ed0:	4b0b      	ldr	r3, [pc, #44]	; (8001f00 <HAL_RCC_OscConfig+0x4f4>)
 8001ed2:	685b      	ldr	r3, [r3, #4]
 8001ed4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ed6:	68fb      	ldr	r3, [r7, #12]
 8001ed8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	6a1b      	ldr	r3, [r3, #32]
 8001ee0:	429a      	cmp	r2, r3
 8001ee2:	d106      	bne.n	8001ef2 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001eee:	429a      	cmp	r2, r3
 8001ef0:	d001      	beq.n	8001ef6 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8001ef2:	2301      	movs	r3, #1
 8001ef4:	e000      	b.n	8001ef8 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8001ef6:	2300      	movs	r3, #0
}
 8001ef8:	4618      	mov	r0, r3
 8001efa:	3718      	adds	r7, #24
 8001efc:	46bd      	mov	sp, r7
 8001efe:	bd80      	pop	{r7, pc}
 8001f00:	40021000 	.word	0x40021000
 8001f04:	40007000 	.word	0x40007000
 8001f08:	42420060 	.word	0x42420060

08001f0c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001f0c:	b580      	push	{r7, lr}
 8001f0e:	b084      	sub	sp, #16
 8001f10:	af00      	add	r7, sp, #0
 8001f12:	6078      	str	r0, [r7, #4]
 8001f14:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d101      	bne.n	8001f20 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001f1c:	2301      	movs	r3, #1
 8001f1e:	e0d0      	b.n	80020c2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001f20:	4b6a      	ldr	r3, [pc, #424]	; (80020cc <HAL_RCC_ClockConfig+0x1c0>)
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	f003 0307 	and.w	r3, r3, #7
 8001f28:	683a      	ldr	r2, [r7, #0]
 8001f2a:	429a      	cmp	r2, r3
 8001f2c:	d910      	bls.n	8001f50 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f2e:	4b67      	ldr	r3, [pc, #412]	; (80020cc <HAL_RCC_ClockConfig+0x1c0>)
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	f023 0207 	bic.w	r2, r3, #7
 8001f36:	4965      	ldr	r1, [pc, #404]	; (80020cc <HAL_RCC_ClockConfig+0x1c0>)
 8001f38:	683b      	ldr	r3, [r7, #0]
 8001f3a:	4313      	orrs	r3, r2
 8001f3c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f3e:	4b63      	ldr	r3, [pc, #396]	; (80020cc <HAL_RCC_ClockConfig+0x1c0>)
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	f003 0307 	and.w	r3, r3, #7
 8001f46:	683a      	ldr	r2, [r7, #0]
 8001f48:	429a      	cmp	r2, r3
 8001f4a:	d001      	beq.n	8001f50 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001f4c:	2301      	movs	r3, #1
 8001f4e:	e0b8      	b.n	80020c2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	f003 0302 	and.w	r3, r3, #2
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d020      	beq.n	8001f9e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	f003 0304 	and.w	r3, r3, #4
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d005      	beq.n	8001f74 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001f68:	4b59      	ldr	r3, [pc, #356]	; (80020d0 <HAL_RCC_ClockConfig+0x1c4>)
 8001f6a:	685b      	ldr	r3, [r3, #4]
 8001f6c:	4a58      	ldr	r2, [pc, #352]	; (80020d0 <HAL_RCC_ClockConfig+0x1c4>)
 8001f6e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001f72:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	f003 0308 	and.w	r3, r3, #8
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d005      	beq.n	8001f8c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001f80:	4b53      	ldr	r3, [pc, #332]	; (80020d0 <HAL_RCC_ClockConfig+0x1c4>)
 8001f82:	685b      	ldr	r3, [r3, #4]
 8001f84:	4a52      	ldr	r2, [pc, #328]	; (80020d0 <HAL_RCC_ClockConfig+0x1c4>)
 8001f86:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001f8a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001f8c:	4b50      	ldr	r3, [pc, #320]	; (80020d0 <HAL_RCC_ClockConfig+0x1c4>)
 8001f8e:	685b      	ldr	r3, [r3, #4]
 8001f90:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	689b      	ldr	r3, [r3, #8]
 8001f98:	494d      	ldr	r1, [pc, #308]	; (80020d0 <HAL_RCC_ClockConfig+0x1c4>)
 8001f9a:	4313      	orrs	r3, r2
 8001f9c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	f003 0301 	and.w	r3, r3, #1
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d040      	beq.n	800202c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	685b      	ldr	r3, [r3, #4]
 8001fae:	2b01      	cmp	r3, #1
 8001fb0:	d107      	bne.n	8001fc2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001fb2:	4b47      	ldr	r3, [pc, #284]	; (80020d0 <HAL_RCC_ClockConfig+0x1c4>)
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d115      	bne.n	8001fea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001fbe:	2301      	movs	r3, #1
 8001fc0:	e07f      	b.n	80020c2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	685b      	ldr	r3, [r3, #4]
 8001fc6:	2b02      	cmp	r3, #2
 8001fc8:	d107      	bne.n	8001fda <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001fca:	4b41      	ldr	r3, [pc, #260]	; (80020d0 <HAL_RCC_ClockConfig+0x1c4>)
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d109      	bne.n	8001fea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001fd6:	2301      	movs	r3, #1
 8001fd8:	e073      	b.n	80020c2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001fda:	4b3d      	ldr	r3, [pc, #244]	; (80020d0 <HAL_RCC_ClockConfig+0x1c4>)
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	f003 0302 	and.w	r3, r3, #2
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d101      	bne.n	8001fea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001fe6:	2301      	movs	r3, #1
 8001fe8:	e06b      	b.n	80020c2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001fea:	4b39      	ldr	r3, [pc, #228]	; (80020d0 <HAL_RCC_ClockConfig+0x1c4>)
 8001fec:	685b      	ldr	r3, [r3, #4]
 8001fee:	f023 0203 	bic.w	r2, r3, #3
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	685b      	ldr	r3, [r3, #4]
 8001ff6:	4936      	ldr	r1, [pc, #216]	; (80020d0 <HAL_RCC_ClockConfig+0x1c4>)
 8001ff8:	4313      	orrs	r3, r2
 8001ffa:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001ffc:	f7fe ffca 	bl	8000f94 <HAL_GetTick>
 8002000:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002002:	e00a      	b.n	800201a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002004:	f7fe ffc6 	bl	8000f94 <HAL_GetTick>
 8002008:	4602      	mov	r2, r0
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	1ad3      	subs	r3, r2, r3
 800200e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002012:	4293      	cmp	r3, r2
 8002014:	d901      	bls.n	800201a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002016:	2303      	movs	r3, #3
 8002018:	e053      	b.n	80020c2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800201a:	4b2d      	ldr	r3, [pc, #180]	; (80020d0 <HAL_RCC_ClockConfig+0x1c4>)
 800201c:	685b      	ldr	r3, [r3, #4]
 800201e:	f003 020c 	and.w	r2, r3, #12
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	685b      	ldr	r3, [r3, #4]
 8002026:	009b      	lsls	r3, r3, #2
 8002028:	429a      	cmp	r2, r3
 800202a:	d1eb      	bne.n	8002004 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800202c:	4b27      	ldr	r3, [pc, #156]	; (80020cc <HAL_RCC_ClockConfig+0x1c0>)
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	f003 0307 	and.w	r3, r3, #7
 8002034:	683a      	ldr	r2, [r7, #0]
 8002036:	429a      	cmp	r2, r3
 8002038:	d210      	bcs.n	800205c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800203a:	4b24      	ldr	r3, [pc, #144]	; (80020cc <HAL_RCC_ClockConfig+0x1c0>)
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	f023 0207 	bic.w	r2, r3, #7
 8002042:	4922      	ldr	r1, [pc, #136]	; (80020cc <HAL_RCC_ClockConfig+0x1c0>)
 8002044:	683b      	ldr	r3, [r7, #0]
 8002046:	4313      	orrs	r3, r2
 8002048:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800204a:	4b20      	ldr	r3, [pc, #128]	; (80020cc <HAL_RCC_ClockConfig+0x1c0>)
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	f003 0307 	and.w	r3, r3, #7
 8002052:	683a      	ldr	r2, [r7, #0]
 8002054:	429a      	cmp	r2, r3
 8002056:	d001      	beq.n	800205c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002058:	2301      	movs	r3, #1
 800205a:	e032      	b.n	80020c2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	f003 0304 	and.w	r3, r3, #4
 8002064:	2b00      	cmp	r3, #0
 8002066:	d008      	beq.n	800207a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002068:	4b19      	ldr	r3, [pc, #100]	; (80020d0 <HAL_RCC_ClockConfig+0x1c4>)
 800206a:	685b      	ldr	r3, [r3, #4]
 800206c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	68db      	ldr	r3, [r3, #12]
 8002074:	4916      	ldr	r1, [pc, #88]	; (80020d0 <HAL_RCC_ClockConfig+0x1c4>)
 8002076:	4313      	orrs	r3, r2
 8002078:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	f003 0308 	and.w	r3, r3, #8
 8002082:	2b00      	cmp	r3, #0
 8002084:	d009      	beq.n	800209a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002086:	4b12      	ldr	r3, [pc, #72]	; (80020d0 <HAL_RCC_ClockConfig+0x1c4>)
 8002088:	685b      	ldr	r3, [r3, #4]
 800208a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	691b      	ldr	r3, [r3, #16]
 8002092:	00db      	lsls	r3, r3, #3
 8002094:	490e      	ldr	r1, [pc, #56]	; (80020d0 <HAL_RCC_ClockConfig+0x1c4>)
 8002096:	4313      	orrs	r3, r2
 8002098:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800209a:	f000 f821 	bl	80020e0 <HAL_RCC_GetSysClockFreq>
 800209e:	4602      	mov	r2, r0
 80020a0:	4b0b      	ldr	r3, [pc, #44]	; (80020d0 <HAL_RCC_ClockConfig+0x1c4>)
 80020a2:	685b      	ldr	r3, [r3, #4]
 80020a4:	091b      	lsrs	r3, r3, #4
 80020a6:	f003 030f 	and.w	r3, r3, #15
 80020aa:	490a      	ldr	r1, [pc, #40]	; (80020d4 <HAL_RCC_ClockConfig+0x1c8>)
 80020ac:	5ccb      	ldrb	r3, [r1, r3]
 80020ae:	fa22 f303 	lsr.w	r3, r2, r3
 80020b2:	4a09      	ldr	r2, [pc, #36]	; (80020d8 <HAL_RCC_ClockConfig+0x1cc>)
 80020b4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80020b6:	4b09      	ldr	r3, [pc, #36]	; (80020dc <HAL_RCC_ClockConfig+0x1d0>)
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	4618      	mov	r0, r3
 80020bc:	f7fe ff28 	bl	8000f10 <HAL_InitTick>

  return HAL_OK;
 80020c0:	2300      	movs	r3, #0
}
 80020c2:	4618      	mov	r0, r3
 80020c4:	3710      	adds	r7, #16
 80020c6:	46bd      	mov	sp, r7
 80020c8:	bd80      	pop	{r7, pc}
 80020ca:	bf00      	nop
 80020cc:	40022000 	.word	0x40022000
 80020d0:	40021000 	.word	0x40021000
 80020d4:	08004be4 	.word	0x08004be4
 80020d8:	20000000 	.word	0x20000000
 80020dc:	20000004 	.word	0x20000004

080020e0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80020e0:	b490      	push	{r4, r7}
 80020e2:	b08a      	sub	sp, #40	; 0x28
 80020e4:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80020e6:	4b2a      	ldr	r3, [pc, #168]	; (8002190 <HAL_RCC_GetSysClockFreq+0xb0>)
 80020e8:	1d3c      	adds	r4, r7, #4
 80020ea:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80020ec:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80020f0:	f240 2301 	movw	r3, #513	; 0x201
 80020f4:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80020f6:	2300      	movs	r3, #0
 80020f8:	61fb      	str	r3, [r7, #28]
 80020fa:	2300      	movs	r3, #0
 80020fc:	61bb      	str	r3, [r7, #24]
 80020fe:	2300      	movs	r3, #0
 8002100:	627b      	str	r3, [r7, #36]	; 0x24
 8002102:	2300      	movs	r3, #0
 8002104:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002106:	2300      	movs	r3, #0
 8002108:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800210a:	4b22      	ldr	r3, [pc, #136]	; (8002194 <HAL_RCC_GetSysClockFreq+0xb4>)
 800210c:	685b      	ldr	r3, [r3, #4]
 800210e:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002110:	69fb      	ldr	r3, [r7, #28]
 8002112:	f003 030c 	and.w	r3, r3, #12
 8002116:	2b04      	cmp	r3, #4
 8002118:	d002      	beq.n	8002120 <HAL_RCC_GetSysClockFreq+0x40>
 800211a:	2b08      	cmp	r3, #8
 800211c:	d003      	beq.n	8002126 <HAL_RCC_GetSysClockFreq+0x46>
 800211e:	e02d      	b.n	800217c <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002120:	4b1d      	ldr	r3, [pc, #116]	; (8002198 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002122:	623b      	str	r3, [r7, #32]
      break;
 8002124:	e02d      	b.n	8002182 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002126:	69fb      	ldr	r3, [r7, #28]
 8002128:	0c9b      	lsrs	r3, r3, #18
 800212a:	f003 030f 	and.w	r3, r3, #15
 800212e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002132:	4413      	add	r3, r2
 8002134:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002138:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800213a:	69fb      	ldr	r3, [r7, #28]
 800213c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002140:	2b00      	cmp	r3, #0
 8002142:	d013      	beq.n	800216c <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002144:	4b13      	ldr	r3, [pc, #76]	; (8002194 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002146:	685b      	ldr	r3, [r3, #4]
 8002148:	0c5b      	lsrs	r3, r3, #17
 800214a:	f003 0301 	and.w	r3, r3, #1
 800214e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002152:	4413      	add	r3, r2
 8002154:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002158:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800215a:	697b      	ldr	r3, [r7, #20]
 800215c:	4a0e      	ldr	r2, [pc, #56]	; (8002198 <HAL_RCC_GetSysClockFreq+0xb8>)
 800215e:	fb02 f203 	mul.w	r2, r2, r3
 8002162:	69bb      	ldr	r3, [r7, #24]
 8002164:	fbb2 f3f3 	udiv	r3, r2, r3
 8002168:	627b      	str	r3, [r7, #36]	; 0x24
 800216a:	e004      	b.n	8002176 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800216c:	697b      	ldr	r3, [r7, #20]
 800216e:	4a0b      	ldr	r2, [pc, #44]	; (800219c <HAL_RCC_GetSysClockFreq+0xbc>)
 8002170:	fb02 f303 	mul.w	r3, r2, r3
 8002174:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8002176:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002178:	623b      	str	r3, [r7, #32]
      break;
 800217a:	e002      	b.n	8002182 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800217c:	4b06      	ldr	r3, [pc, #24]	; (8002198 <HAL_RCC_GetSysClockFreq+0xb8>)
 800217e:	623b      	str	r3, [r7, #32]
      break;
 8002180:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002182:	6a3b      	ldr	r3, [r7, #32]
}
 8002184:	4618      	mov	r0, r3
 8002186:	3728      	adds	r7, #40	; 0x28
 8002188:	46bd      	mov	sp, r7
 800218a:	bc90      	pop	{r4, r7}
 800218c:	4770      	bx	lr
 800218e:	bf00      	nop
 8002190:	08004bd4 	.word	0x08004bd4
 8002194:	40021000 	.word	0x40021000
 8002198:	007a1200 	.word	0x007a1200
 800219c:	003d0900 	.word	0x003d0900

080021a0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80021a0:	b480      	push	{r7}
 80021a2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80021a4:	4b02      	ldr	r3, [pc, #8]	; (80021b0 <HAL_RCC_GetHCLKFreq+0x10>)
 80021a6:	681b      	ldr	r3, [r3, #0]
}
 80021a8:	4618      	mov	r0, r3
 80021aa:	46bd      	mov	sp, r7
 80021ac:	bc80      	pop	{r7}
 80021ae:	4770      	bx	lr
 80021b0:	20000000 	.word	0x20000000

080021b4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80021b4:	b580      	push	{r7, lr}
 80021b6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80021b8:	f7ff fff2 	bl	80021a0 <HAL_RCC_GetHCLKFreq>
 80021bc:	4602      	mov	r2, r0
 80021be:	4b05      	ldr	r3, [pc, #20]	; (80021d4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80021c0:	685b      	ldr	r3, [r3, #4]
 80021c2:	0a1b      	lsrs	r3, r3, #8
 80021c4:	f003 0307 	and.w	r3, r3, #7
 80021c8:	4903      	ldr	r1, [pc, #12]	; (80021d8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80021ca:	5ccb      	ldrb	r3, [r1, r3]
 80021cc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80021d0:	4618      	mov	r0, r3
 80021d2:	bd80      	pop	{r7, pc}
 80021d4:	40021000 	.word	0x40021000
 80021d8:	08004bf4 	.word	0x08004bf4

080021dc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80021dc:	b580      	push	{r7, lr}
 80021de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80021e0:	f7ff ffde 	bl	80021a0 <HAL_RCC_GetHCLKFreq>
 80021e4:	4602      	mov	r2, r0
 80021e6:	4b05      	ldr	r3, [pc, #20]	; (80021fc <HAL_RCC_GetPCLK2Freq+0x20>)
 80021e8:	685b      	ldr	r3, [r3, #4]
 80021ea:	0adb      	lsrs	r3, r3, #11
 80021ec:	f003 0307 	and.w	r3, r3, #7
 80021f0:	4903      	ldr	r1, [pc, #12]	; (8002200 <HAL_RCC_GetPCLK2Freq+0x24>)
 80021f2:	5ccb      	ldrb	r3, [r1, r3]
 80021f4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80021f8:	4618      	mov	r0, r3
 80021fa:	bd80      	pop	{r7, pc}
 80021fc:	40021000 	.word	0x40021000
 8002200:	08004bf4 	.word	0x08004bf4

08002204 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002204:	b480      	push	{r7}
 8002206:	b085      	sub	sp, #20
 8002208:	af00      	add	r7, sp, #0
 800220a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800220c:	4b0a      	ldr	r3, [pc, #40]	; (8002238 <RCC_Delay+0x34>)
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	4a0a      	ldr	r2, [pc, #40]	; (800223c <RCC_Delay+0x38>)
 8002212:	fba2 2303 	umull	r2, r3, r2, r3
 8002216:	0a5b      	lsrs	r3, r3, #9
 8002218:	687a      	ldr	r2, [r7, #4]
 800221a:	fb02 f303 	mul.w	r3, r2, r3
 800221e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002220:	bf00      	nop
  }
  while (Delay --);
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	1e5a      	subs	r2, r3, #1
 8002226:	60fa      	str	r2, [r7, #12]
 8002228:	2b00      	cmp	r3, #0
 800222a:	d1f9      	bne.n	8002220 <RCC_Delay+0x1c>
}
 800222c:	bf00      	nop
 800222e:	bf00      	nop
 8002230:	3714      	adds	r7, #20
 8002232:	46bd      	mov	sp, r7
 8002234:	bc80      	pop	{r7}
 8002236:	4770      	bx	lr
 8002238:	20000000 	.word	0x20000000
 800223c:	10624dd3 	.word	0x10624dd3

08002240 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002240:	b580      	push	{r7, lr}
 8002242:	b082      	sub	sp, #8
 8002244:	af00      	add	r7, sp, #0
 8002246:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	2b00      	cmp	r3, #0
 800224c:	d101      	bne.n	8002252 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800224e:	2301      	movs	r3, #1
 8002250:	e076      	b.n	8002340 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002256:	2b00      	cmp	r3, #0
 8002258:	d108      	bne.n	800226c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	685b      	ldr	r3, [r3, #4]
 800225e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002262:	d009      	beq.n	8002278 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	2200      	movs	r2, #0
 8002268:	61da      	str	r2, [r3, #28]
 800226a:	e005      	b.n	8002278 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	2200      	movs	r2, #0
 8002270:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	2200      	movs	r2, #0
 8002276:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	2200      	movs	r2, #0
 800227c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002284:	b2db      	uxtb	r3, r3
 8002286:	2b00      	cmp	r3, #0
 8002288:	d106      	bne.n	8002298 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	2200      	movs	r2, #0
 800228e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002292:	6878      	ldr	r0, [r7, #4]
 8002294:	f7fe fab4 	bl	8000800 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	2202      	movs	r2, #2
 800229c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	681a      	ldr	r2, [r3, #0]
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80022ae:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	685b      	ldr	r3, [r3, #4]
 80022b4:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	689b      	ldr	r3, [r3, #8]
 80022bc:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80022c0:	431a      	orrs	r2, r3
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	68db      	ldr	r3, [r3, #12]
 80022c6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80022ca:	431a      	orrs	r2, r3
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	691b      	ldr	r3, [r3, #16]
 80022d0:	f003 0302 	and.w	r3, r3, #2
 80022d4:	431a      	orrs	r2, r3
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	695b      	ldr	r3, [r3, #20]
 80022da:	f003 0301 	and.w	r3, r3, #1
 80022de:	431a      	orrs	r2, r3
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	699b      	ldr	r3, [r3, #24]
 80022e4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80022e8:	431a      	orrs	r2, r3
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	69db      	ldr	r3, [r3, #28]
 80022ee:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80022f2:	431a      	orrs	r2, r3
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	6a1b      	ldr	r3, [r3, #32]
 80022f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80022fc:	ea42 0103 	orr.w	r1, r2, r3
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002304:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	430a      	orrs	r2, r1
 800230e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	699b      	ldr	r3, [r3, #24]
 8002314:	0c1a      	lsrs	r2, r3, #16
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	f002 0204 	and.w	r2, r2, #4
 800231e:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	69da      	ldr	r2, [r3, #28]
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800232e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	2200      	movs	r2, #0
 8002334:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	2201      	movs	r2, #1
 800233a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800233e:	2300      	movs	r3, #0
}
 8002340:	4618      	mov	r0, r3
 8002342:	3708      	adds	r7, #8
 8002344:	46bd      	mov	sp, r7
 8002346:	bd80      	pop	{r7, pc}

08002348 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002348:	b580      	push	{r7, lr}
 800234a:	b082      	sub	sp, #8
 800234c:	af00      	add	r7, sp, #0
 800234e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	2b00      	cmp	r3, #0
 8002354:	d101      	bne.n	800235a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002356:	2301      	movs	r3, #1
 8002358:	e041      	b.n	80023de <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002360:	b2db      	uxtb	r3, r3
 8002362:	2b00      	cmp	r3, #0
 8002364:	d106      	bne.n	8002374 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	2200      	movs	r2, #0
 800236a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800236e:	6878      	ldr	r0, [r7, #4]
 8002370:	f7fe fa92 	bl	8000898 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	2202      	movs	r2, #2
 8002378:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681a      	ldr	r2, [r3, #0]
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	3304      	adds	r3, #4
 8002384:	4619      	mov	r1, r3
 8002386:	4610      	mov	r0, r2
 8002388:	f001 f8ee 	bl	8003568 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	2201      	movs	r2, #1
 8002390:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	2201      	movs	r2, #1
 8002398:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	2201      	movs	r2, #1
 80023a0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	2201      	movs	r2, #1
 80023a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	2201      	movs	r2, #1
 80023b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	2201      	movs	r2, #1
 80023b8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	2201      	movs	r2, #1
 80023c0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	2201      	movs	r2, #1
 80023c8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	2201      	movs	r2, #1
 80023d0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	2201      	movs	r2, #1
 80023d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80023dc:	2300      	movs	r3, #0
}
 80023de:	4618      	mov	r0, r3
 80023e0:	3708      	adds	r7, #8
 80023e2:	46bd      	mov	sp, r7
 80023e4:	bd80      	pop	{r7, pc}
	...

080023e8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80023e8:	b480      	push	{r7}
 80023ea:	b085      	sub	sp, #20
 80023ec:	af00      	add	r7, sp, #0
 80023ee:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80023f6:	b2db      	uxtb	r3, r3
 80023f8:	2b01      	cmp	r3, #1
 80023fa:	d001      	beq.n	8002400 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80023fc:	2301      	movs	r3, #1
 80023fe:	e03a      	b.n	8002476 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	2202      	movs	r2, #2
 8002404:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	68da      	ldr	r2, [r3, #12]
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	f042 0201 	orr.w	r2, r2, #1
 8002416:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	4a18      	ldr	r2, [pc, #96]	; (8002480 <HAL_TIM_Base_Start_IT+0x98>)
 800241e:	4293      	cmp	r3, r2
 8002420:	d00e      	beq.n	8002440 <HAL_TIM_Base_Start_IT+0x58>
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800242a:	d009      	beq.n	8002440 <HAL_TIM_Base_Start_IT+0x58>
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	4a14      	ldr	r2, [pc, #80]	; (8002484 <HAL_TIM_Base_Start_IT+0x9c>)
 8002432:	4293      	cmp	r3, r2
 8002434:	d004      	beq.n	8002440 <HAL_TIM_Base_Start_IT+0x58>
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	4a13      	ldr	r2, [pc, #76]	; (8002488 <HAL_TIM_Base_Start_IT+0xa0>)
 800243c:	4293      	cmp	r3, r2
 800243e:	d111      	bne.n	8002464 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	689b      	ldr	r3, [r3, #8]
 8002446:	f003 0307 	and.w	r3, r3, #7
 800244a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	2b06      	cmp	r3, #6
 8002450:	d010      	beq.n	8002474 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	681a      	ldr	r2, [r3, #0]
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	f042 0201 	orr.w	r2, r2, #1
 8002460:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002462:	e007      	b.n	8002474 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	681a      	ldr	r2, [r3, #0]
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	f042 0201 	orr.w	r2, r2, #1
 8002472:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002474:	2300      	movs	r3, #0
}
 8002476:	4618      	mov	r0, r3
 8002478:	3714      	adds	r7, #20
 800247a:	46bd      	mov	sp, r7
 800247c:	bc80      	pop	{r7}
 800247e:	4770      	bx	lr
 8002480:	40012c00 	.word	0x40012c00
 8002484:	40000400 	.word	0x40000400
 8002488:	40000800 	.word	0x40000800

0800248c <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 800248c:	b580      	push	{r7, lr}
 800248e:	b082      	sub	sp, #8
 8002490:	af00      	add	r7, sp, #0
 8002492:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	2b00      	cmp	r3, #0
 8002498:	d101      	bne.n	800249e <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 800249a:	2301      	movs	r3, #1
 800249c:	e041      	b.n	8002522 <HAL_TIM_OC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80024a4:	b2db      	uxtb	r3, r3
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d106      	bne.n	80024b8 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	2200      	movs	r2, #0
 80024ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 80024b2:	6878      	ldr	r0, [r7, #4]
 80024b4:	f000 f839 	bl	800252a <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	2202      	movs	r2, #2
 80024bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681a      	ldr	r2, [r3, #0]
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	3304      	adds	r3, #4
 80024c8:	4619      	mov	r1, r3
 80024ca:	4610      	mov	r0, r2
 80024cc:	f001 f84c 	bl	8003568 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	2201      	movs	r2, #1
 80024d4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	2201      	movs	r2, #1
 80024dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	2201      	movs	r2, #1
 80024e4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	2201      	movs	r2, #1
 80024ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	2201      	movs	r2, #1
 80024f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	2201      	movs	r2, #1
 80024fc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	2201      	movs	r2, #1
 8002504:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	2201      	movs	r2, #1
 800250c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	2201      	movs	r2, #1
 8002514:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	2201      	movs	r2, #1
 800251c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002520:	2300      	movs	r3, #0
}
 8002522:	4618      	mov	r0, r3
 8002524:	3708      	adds	r7, #8
 8002526:	46bd      	mov	sp, r7
 8002528:	bd80      	pop	{r7, pc}

0800252a <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 800252a:	b480      	push	{r7}
 800252c:	b083      	sub	sp, #12
 800252e:	af00      	add	r7, sp, #0
 8002530:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8002532:	bf00      	nop
 8002534:	370c      	adds	r7, #12
 8002536:	46bd      	mov	sp, r7
 8002538:	bc80      	pop	{r7}
 800253a:	4770      	bx	lr

0800253c <HAL_TIM_OC_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800253c:	b580      	push	{r7, lr}
 800253e:	b084      	sub	sp, #16
 8002540:	af00      	add	r7, sp, #0
 8002542:	6078      	str	r0, [r7, #4]
 8002544:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002546:	683b      	ldr	r3, [r7, #0]
 8002548:	2b00      	cmp	r3, #0
 800254a:	d109      	bne.n	8002560 <HAL_TIM_OC_Start+0x24>
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002552:	b2db      	uxtb	r3, r3
 8002554:	2b01      	cmp	r3, #1
 8002556:	bf14      	ite	ne
 8002558:	2301      	movne	r3, #1
 800255a:	2300      	moveq	r3, #0
 800255c:	b2db      	uxtb	r3, r3
 800255e:	e022      	b.n	80025a6 <HAL_TIM_OC_Start+0x6a>
 8002560:	683b      	ldr	r3, [r7, #0]
 8002562:	2b04      	cmp	r3, #4
 8002564:	d109      	bne.n	800257a <HAL_TIM_OC_Start+0x3e>
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800256c:	b2db      	uxtb	r3, r3
 800256e:	2b01      	cmp	r3, #1
 8002570:	bf14      	ite	ne
 8002572:	2301      	movne	r3, #1
 8002574:	2300      	moveq	r3, #0
 8002576:	b2db      	uxtb	r3, r3
 8002578:	e015      	b.n	80025a6 <HAL_TIM_OC_Start+0x6a>
 800257a:	683b      	ldr	r3, [r7, #0]
 800257c:	2b08      	cmp	r3, #8
 800257e:	d109      	bne.n	8002594 <HAL_TIM_OC_Start+0x58>
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002586:	b2db      	uxtb	r3, r3
 8002588:	2b01      	cmp	r3, #1
 800258a:	bf14      	ite	ne
 800258c:	2301      	movne	r3, #1
 800258e:	2300      	moveq	r3, #0
 8002590:	b2db      	uxtb	r3, r3
 8002592:	e008      	b.n	80025a6 <HAL_TIM_OC_Start+0x6a>
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800259a:	b2db      	uxtb	r3, r3
 800259c:	2b01      	cmp	r3, #1
 800259e:	bf14      	ite	ne
 80025a0:	2301      	movne	r3, #1
 80025a2:	2300      	moveq	r3, #0
 80025a4:	b2db      	uxtb	r3, r3
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d001      	beq.n	80025ae <HAL_TIM_OC_Start+0x72>
  {
    return HAL_ERROR;
 80025aa:	2301      	movs	r3, #1
 80025ac:	e05e      	b.n	800266c <HAL_TIM_OC_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80025ae:	683b      	ldr	r3, [r7, #0]
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d104      	bne.n	80025be <HAL_TIM_OC_Start+0x82>
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	2202      	movs	r2, #2
 80025b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80025bc:	e013      	b.n	80025e6 <HAL_TIM_OC_Start+0xaa>
 80025be:	683b      	ldr	r3, [r7, #0]
 80025c0:	2b04      	cmp	r3, #4
 80025c2:	d104      	bne.n	80025ce <HAL_TIM_OC_Start+0x92>
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	2202      	movs	r2, #2
 80025c8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80025cc:	e00b      	b.n	80025e6 <HAL_TIM_OC_Start+0xaa>
 80025ce:	683b      	ldr	r3, [r7, #0]
 80025d0:	2b08      	cmp	r3, #8
 80025d2:	d104      	bne.n	80025de <HAL_TIM_OC_Start+0xa2>
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	2202      	movs	r2, #2
 80025d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80025dc:	e003      	b.n	80025e6 <HAL_TIM_OC_Start+0xaa>
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	2202      	movs	r2, #2
 80025e2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Output compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	2201      	movs	r2, #1
 80025ec:	6839      	ldr	r1, [r7, #0]
 80025ee:	4618      	mov	r0, r3
 80025f0:	f001 fbd5 	bl	8003d9e <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	4a1e      	ldr	r2, [pc, #120]	; (8002674 <HAL_TIM_OC_Start+0x138>)
 80025fa:	4293      	cmp	r3, r2
 80025fc:	d107      	bne.n	800260e <HAL_TIM_OC_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800260c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	4a18      	ldr	r2, [pc, #96]	; (8002674 <HAL_TIM_OC_Start+0x138>)
 8002614:	4293      	cmp	r3, r2
 8002616:	d00e      	beq.n	8002636 <HAL_TIM_OC_Start+0xfa>
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002620:	d009      	beq.n	8002636 <HAL_TIM_OC_Start+0xfa>
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	4a14      	ldr	r2, [pc, #80]	; (8002678 <HAL_TIM_OC_Start+0x13c>)
 8002628:	4293      	cmp	r3, r2
 800262a:	d004      	beq.n	8002636 <HAL_TIM_OC_Start+0xfa>
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	4a12      	ldr	r2, [pc, #72]	; (800267c <HAL_TIM_OC_Start+0x140>)
 8002632:	4293      	cmp	r3, r2
 8002634:	d111      	bne.n	800265a <HAL_TIM_OC_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	689b      	ldr	r3, [r3, #8]
 800263c:	f003 0307 	and.w	r3, r3, #7
 8002640:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	2b06      	cmp	r3, #6
 8002646:	d010      	beq.n	800266a <HAL_TIM_OC_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	681a      	ldr	r2, [r3, #0]
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	f042 0201 	orr.w	r2, r2, #1
 8002656:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002658:	e007      	b.n	800266a <HAL_TIM_OC_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	681a      	ldr	r2, [r3, #0]
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	f042 0201 	orr.w	r2, r2, #1
 8002668:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800266a:	2300      	movs	r3, #0
}
 800266c:	4618      	mov	r0, r3
 800266e:	3710      	adds	r7, #16
 8002670:	46bd      	mov	sp, r7
 8002672:	bd80      	pop	{r7, pc}
 8002674:	40012c00 	.word	0x40012c00
 8002678:	40000400 	.word	0x40000400
 800267c:	40000800 	.word	0x40000800

08002680 <HAL_TIM_OC_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002680:	b580      	push	{r7, lr}
 8002682:	b082      	sub	sp, #8
 8002684:	af00      	add	r7, sp, #0
 8002686:	6078      	str	r0, [r7, #4]
 8002688:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Output compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	2200      	movs	r2, #0
 8002690:	6839      	ldr	r1, [r7, #0]
 8002692:	4618      	mov	r0, r3
 8002694:	f001 fb83 	bl	8003d9e <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	4a29      	ldr	r2, [pc, #164]	; (8002744 <HAL_TIM_OC_Stop+0xc4>)
 800269e:	4293      	cmp	r3, r2
 80026a0:	d117      	bne.n	80026d2 <HAL_TIM_OC_Stop+0x52>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	6a1a      	ldr	r2, [r3, #32]
 80026a8:	f241 1311 	movw	r3, #4369	; 0x1111
 80026ac:	4013      	ands	r3, r2
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d10f      	bne.n	80026d2 <HAL_TIM_OC_Stop+0x52>
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	6a1a      	ldr	r2, [r3, #32]
 80026b8:	f240 4344 	movw	r3, #1092	; 0x444
 80026bc:	4013      	ands	r3, r2
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d107      	bne.n	80026d2 <HAL_TIM_OC_Stop+0x52>
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80026d0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	6a1a      	ldr	r2, [r3, #32]
 80026d8:	f241 1311 	movw	r3, #4369	; 0x1111
 80026dc:	4013      	ands	r3, r2
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d10f      	bne.n	8002702 <HAL_TIM_OC_Stop+0x82>
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	6a1a      	ldr	r2, [r3, #32]
 80026e8:	f240 4344 	movw	r3, #1092	; 0x444
 80026ec:	4013      	ands	r3, r2
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d107      	bne.n	8002702 <HAL_TIM_OC_Stop+0x82>
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	681a      	ldr	r2, [r3, #0]
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	f022 0201 	bic.w	r2, r2, #1
 8002700:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8002702:	683b      	ldr	r3, [r7, #0]
 8002704:	2b00      	cmp	r3, #0
 8002706:	d104      	bne.n	8002712 <HAL_TIM_OC_Stop+0x92>
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	2201      	movs	r2, #1
 800270c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002710:	e013      	b.n	800273a <HAL_TIM_OC_Stop+0xba>
 8002712:	683b      	ldr	r3, [r7, #0]
 8002714:	2b04      	cmp	r3, #4
 8002716:	d104      	bne.n	8002722 <HAL_TIM_OC_Stop+0xa2>
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	2201      	movs	r2, #1
 800271c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002720:	e00b      	b.n	800273a <HAL_TIM_OC_Stop+0xba>
 8002722:	683b      	ldr	r3, [r7, #0]
 8002724:	2b08      	cmp	r3, #8
 8002726:	d104      	bne.n	8002732 <HAL_TIM_OC_Stop+0xb2>
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	2201      	movs	r2, #1
 800272c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002730:	e003      	b.n	800273a <HAL_TIM_OC_Stop+0xba>
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	2201      	movs	r2, #1
 8002736:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Return function status */
  return HAL_OK;
 800273a:	2300      	movs	r3, #0
}
 800273c:	4618      	mov	r0, r3
 800273e:	3708      	adds	r7, #8
 8002740:	46bd      	mov	sp, r7
 8002742:	bd80      	pop	{r7, pc}
 8002744:	40012c00 	.word	0x40012c00

08002748 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8002748:	b580      	push	{r7, lr}
 800274a:	b082      	sub	sp, #8
 800274c:	af00      	add	r7, sp, #0
 800274e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	2b00      	cmp	r3, #0
 8002754:	d101      	bne.n	800275a <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8002756:	2301      	movs	r3, #1
 8002758:	e041      	b.n	80027de <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002760:	b2db      	uxtb	r3, r3
 8002762:	2b00      	cmp	r3, #0
 8002764:	d106      	bne.n	8002774 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	2200      	movs	r2, #0
 800276a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 800276e:	6878      	ldr	r0, [r7, #4]
 8002770:	f000 f839 	bl	80027e6 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	2202      	movs	r2, #2
 8002778:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681a      	ldr	r2, [r3, #0]
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	3304      	adds	r3, #4
 8002784:	4619      	mov	r1, r3
 8002786:	4610      	mov	r0, r2
 8002788:	f000 feee 	bl	8003568 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	2201      	movs	r2, #1
 8002790:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	2201      	movs	r2, #1
 8002798:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	2201      	movs	r2, #1
 80027a0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	2201      	movs	r2, #1
 80027a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	2201      	movs	r2, #1
 80027b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	2201      	movs	r2, #1
 80027b8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	2201      	movs	r2, #1
 80027c0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	2201      	movs	r2, #1
 80027c8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	2201      	movs	r2, #1
 80027d0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	2201      	movs	r2, #1
 80027d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80027dc:	2300      	movs	r3, #0
}
 80027de:	4618      	mov	r0, r3
 80027e0:	3708      	adds	r7, #8
 80027e2:	46bd      	mov	sp, r7
 80027e4:	bd80      	pop	{r7, pc}

080027e6 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 80027e6:	b480      	push	{r7}
 80027e8:	b083      	sub	sp, #12
 80027ea:	af00      	add	r7, sp, #0
 80027ec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 80027ee:	bf00      	nop
 80027f0:	370c      	adds	r7, #12
 80027f2:	46bd      	mov	sp, r7
 80027f4:	bc80      	pop	{r7}
 80027f6:	4770      	bx	lr

080027f8 <HAL_TIM_IC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from TIM peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, uint32_t *pData, uint16_t Length)
{
 80027f8:	b580      	push	{r7, lr}
 80027fa:	b086      	sub	sp, #24
 80027fc:	af00      	add	r7, sp, #0
 80027fe:	60f8      	str	r0, [r7, #12]
 8002800:	60b9      	str	r1, [r7, #8]
 8002802:	607a      	str	r2, [r7, #4]
 8002804:	807b      	strh	r3, [r7, #2]
  uint32_t tmpsmcr;
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8002806:	68bb      	ldr	r3, [r7, #8]
 8002808:	2b00      	cmp	r3, #0
 800280a:	d104      	bne.n	8002816 <HAL_TIM_IC_Start_DMA+0x1e>
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002812:	b2db      	uxtb	r3, r3
 8002814:	e013      	b.n	800283e <HAL_TIM_IC_Start_DMA+0x46>
 8002816:	68bb      	ldr	r3, [r7, #8]
 8002818:	2b04      	cmp	r3, #4
 800281a:	d104      	bne.n	8002826 <HAL_TIM_IC_Start_DMA+0x2e>
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002822:	b2db      	uxtb	r3, r3
 8002824:	e00b      	b.n	800283e <HAL_TIM_IC_Start_DMA+0x46>
 8002826:	68bb      	ldr	r3, [r7, #8]
 8002828:	2b08      	cmp	r3, #8
 800282a:	d104      	bne.n	8002836 <HAL_TIM_IC_Start_DMA+0x3e>
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002832:	b2db      	uxtb	r3, r3
 8002834:	e003      	b.n	800283e <HAL_TIM_IC_Start_DMA+0x46>
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800283c:	b2db      	uxtb	r3, r3
 800283e:	75fb      	strb	r3, [r7, #23]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8002840:	68bb      	ldr	r3, [r7, #8]
 8002842:	2b00      	cmp	r3, #0
 8002844:	d104      	bne.n	8002850 <HAL_TIM_IC_Start_DMA+0x58>
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800284c:	b2db      	uxtb	r3, r3
 800284e:	e013      	b.n	8002878 <HAL_TIM_IC_Start_DMA+0x80>
 8002850:	68bb      	ldr	r3, [r7, #8]
 8002852:	2b04      	cmp	r3, #4
 8002854:	d104      	bne.n	8002860 <HAL_TIM_IC_Start_DMA+0x68>
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800285c:	b2db      	uxtb	r3, r3
 800285e:	e00b      	b.n	8002878 <HAL_TIM_IC_Start_DMA+0x80>
 8002860:	68bb      	ldr	r3, [r7, #8]
 8002862:	2b08      	cmp	r3, #8
 8002864:	d104      	bne.n	8002870 <HAL_TIM_IC_Start_DMA+0x78>
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800286c:	b2db      	uxtb	r3, r3
 800286e:	e003      	b.n	8002878 <HAL_TIM_IC_Start_DMA+0x80>
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002876:	b2db      	uxtb	r3, r3
 8002878:	75bb      	strb	r3, [r7, #22]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
  assert_param(IS_TIM_DMA_CC_INSTANCE(htim->Instance));

  /* Set the TIM channel state */
  if ((channel_state == HAL_TIM_CHANNEL_STATE_BUSY)
 800287a:	7dfb      	ldrb	r3, [r7, #23]
 800287c:	2b02      	cmp	r3, #2
 800287e:	d002      	beq.n	8002886 <HAL_TIM_IC_Start_DMA+0x8e>
      || (complementary_channel_state == HAL_TIM_CHANNEL_STATE_BUSY))
 8002880:	7dbb      	ldrb	r3, [r7, #22]
 8002882:	2b02      	cmp	r3, #2
 8002884:	d101      	bne.n	800288a <HAL_TIM_IC_Start_DMA+0x92>
  {
    return HAL_BUSY;
 8002886:	2302      	movs	r3, #2
 8002888:	e130      	b.n	8002aec <HAL_TIM_IC_Start_DMA+0x2f4>
  }
  else if ((channel_state == HAL_TIM_CHANNEL_STATE_READY)
 800288a:	7dfb      	ldrb	r3, [r7, #23]
 800288c:	2b01      	cmp	r3, #1
 800288e:	d143      	bne.n	8002918 <HAL_TIM_IC_Start_DMA+0x120>
           && (complementary_channel_state == HAL_TIM_CHANNEL_STATE_READY))
 8002890:	7dbb      	ldrb	r3, [r7, #22]
 8002892:	2b01      	cmp	r3, #1
 8002894:	d140      	bne.n	8002918 <HAL_TIM_IC_Start_DMA+0x120>
  {
    if ((pData == NULL) && (Length > 0U))
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	2b00      	cmp	r3, #0
 800289a:	d104      	bne.n	80028a6 <HAL_TIM_IC_Start_DMA+0xae>
 800289c:	887b      	ldrh	r3, [r7, #2]
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d001      	beq.n	80028a6 <HAL_TIM_IC_Start_DMA+0xae>
    {
      return HAL_ERROR;
 80028a2:	2301      	movs	r3, #1
 80028a4:	e122      	b.n	8002aec <HAL_TIM_IC_Start_DMA+0x2f4>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80028a6:	68bb      	ldr	r3, [r7, #8]
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d104      	bne.n	80028b6 <HAL_TIM_IC_Start_DMA+0xbe>
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	2202      	movs	r2, #2
 80028b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80028b4:	e013      	b.n	80028de <HAL_TIM_IC_Start_DMA+0xe6>
 80028b6:	68bb      	ldr	r3, [r7, #8]
 80028b8:	2b04      	cmp	r3, #4
 80028ba:	d104      	bne.n	80028c6 <HAL_TIM_IC_Start_DMA+0xce>
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	2202      	movs	r2, #2
 80028c0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80028c4:	e00b      	b.n	80028de <HAL_TIM_IC_Start_DMA+0xe6>
 80028c6:	68bb      	ldr	r3, [r7, #8]
 80028c8:	2b08      	cmp	r3, #8
 80028ca:	d104      	bne.n	80028d6 <HAL_TIM_IC_Start_DMA+0xde>
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	2202      	movs	r2, #2
 80028d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80028d4:	e003      	b.n	80028de <HAL_TIM_IC_Start_DMA+0xe6>
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	2202      	movs	r2, #2
 80028da:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80028de:	68bb      	ldr	r3, [r7, #8]
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d104      	bne.n	80028ee <HAL_TIM_IC_Start_DMA+0xf6>
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	2202      	movs	r2, #2
 80028e8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    if ((pData == NULL) && (Length > 0U))
 80028ec:	e016      	b.n	800291c <HAL_TIM_IC_Start_DMA+0x124>
      TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80028ee:	68bb      	ldr	r3, [r7, #8]
 80028f0:	2b04      	cmp	r3, #4
 80028f2:	d104      	bne.n	80028fe <HAL_TIM_IC_Start_DMA+0x106>
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	2202      	movs	r2, #2
 80028f8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    if ((pData == NULL) && (Length > 0U))
 80028fc:	e00e      	b.n	800291c <HAL_TIM_IC_Start_DMA+0x124>
      TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80028fe:	68bb      	ldr	r3, [r7, #8]
 8002900:	2b08      	cmp	r3, #8
 8002902:	d104      	bne.n	800290e <HAL_TIM_IC_Start_DMA+0x116>
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	2202      	movs	r2, #2
 8002908:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    if ((pData == NULL) && (Length > 0U))
 800290c:	e006      	b.n	800291c <HAL_TIM_IC_Start_DMA+0x124>
      TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	2202      	movs	r2, #2
 8002912:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    if ((pData == NULL) && (Length > 0U))
 8002916:	e001      	b.n	800291c <HAL_TIM_IC_Start_DMA+0x124>
    }
  }
  else
  {
    return HAL_ERROR;
 8002918:	2301      	movs	r3, #1
 800291a:	e0e7      	b.n	8002aec <HAL_TIM_IC_Start_DMA+0x2f4>
  }

  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	2201      	movs	r2, #1
 8002922:	68b9      	ldr	r1, [r7, #8]
 8002924:	4618      	mov	r0, r3
 8002926:	f001 fa3a 	bl	8003d9e <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	4a71      	ldr	r2, [pc, #452]	; (8002af4 <HAL_TIM_IC_Start_DMA+0x2fc>)
 8002930:	4293      	cmp	r3, r2
 8002932:	d00e      	beq.n	8002952 <HAL_TIM_IC_Start_DMA+0x15a>
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800293c:	d009      	beq.n	8002952 <HAL_TIM_IC_Start_DMA+0x15a>
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	4a6d      	ldr	r2, [pc, #436]	; (8002af8 <HAL_TIM_IC_Start_DMA+0x300>)
 8002944:	4293      	cmp	r3, r2
 8002946:	d004      	beq.n	8002952 <HAL_TIM_IC_Start_DMA+0x15a>
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	4a6b      	ldr	r2, [pc, #428]	; (8002afc <HAL_TIM_IC_Start_DMA+0x304>)
 800294e:	4293      	cmp	r3, r2
 8002950:	d111      	bne.n	8002976 <HAL_TIM_IC_Start_DMA+0x17e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	689b      	ldr	r3, [r3, #8]
 8002958:	f003 0307 	and.w	r3, r3, #7
 800295c:	613b      	str	r3, [r7, #16]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800295e:	693b      	ldr	r3, [r7, #16]
 8002960:	2b06      	cmp	r3, #6
 8002962:	d010      	beq.n	8002986 <HAL_TIM_IC_Start_DMA+0x18e>
    {
      __HAL_TIM_ENABLE(htim);
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	681a      	ldr	r2, [r3, #0]
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	f042 0201 	orr.w	r2, r2, #1
 8002972:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002974:	e007      	b.n	8002986 <HAL_TIM_IC_Start_DMA+0x18e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	681a      	ldr	r2, [r3, #0]
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	f042 0201 	orr.w	r2, r2, #1
 8002984:	601a      	str	r2, [r3, #0]
 8002986:	68bb      	ldr	r3, [r7, #8]
 8002988:	2b0c      	cmp	r3, #12
 800298a:	f200 80ad 	bhi.w	8002ae8 <HAL_TIM_IC_Start_DMA+0x2f0>
 800298e:	a201      	add	r2, pc, #4	; (adr r2, 8002994 <HAL_TIM_IC_Start_DMA+0x19c>)
 8002990:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002994:	080029c9 	.word	0x080029c9
 8002998:	08002ae9 	.word	0x08002ae9
 800299c:	08002ae9 	.word	0x08002ae9
 80029a0:	08002ae9 	.word	0x08002ae9
 80029a4:	08002a11 	.word	0x08002a11
 80029a8:	08002ae9 	.word	0x08002ae9
 80029ac:	08002ae9 	.word	0x08002ae9
 80029b0:	08002ae9 	.word	0x08002ae9
 80029b4:	08002a59 	.word	0x08002a59
 80029b8:	08002ae9 	.word	0x08002ae9
 80029bc:	08002ae9 	.word	0x08002ae9
 80029c0:	08002ae9 	.word	0x08002ae9
 80029c4:	08002aa1 	.word	0x08002aa1
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA capture callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMACaptureCplt;
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029cc:	4a4c      	ldr	r2, [pc, #304]	; (8002b00 <HAL_TIM_IC_Start_DMA+0x308>)
 80029ce:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029d4:	4a4b      	ldr	r2, [pc, #300]	; (8002b04 <HAL_TIM_IC_Start_DMA+0x30c>)
 80029d6:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029dc:	4a4a      	ldr	r2, [pc, #296]	; (8002b08 <HAL_TIM_IC_Start_DMA+0x310>)
 80029de:	631a      	str	r2, [r3, #48]	; 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)&htim->Instance->CCR1, (uint32_t)pData,
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	6a58      	ldr	r0, [r3, #36]	; 0x24
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	3334      	adds	r3, #52	; 0x34
 80029ea:	4619      	mov	r1, r3
 80029ec:	687a      	ldr	r2, [r7, #4]
 80029ee:	887b      	ldrh	r3, [r7, #2]
 80029f0:	f7fe fc66 	bl	80012c0 <HAL_DMA_Start_IT>
 80029f4:	4603      	mov	r3, r0
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d001      	beq.n	80029fe <HAL_TIM_IC_Start_DMA+0x206>
                         Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80029fa:	2301      	movs	r3, #1
 80029fc:	e076      	b.n	8002aec <HAL_TIM_IC_Start_DMA+0x2f4>
      }
      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	68da      	ldr	r2, [r3, #12]
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002a0c:	60da      	str	r2, [r3, #12]
      break;
 8002a0e:	e06c      	b.n	8002aea <HAL_TIM_IC_Start_DMA+0x2f2>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA capture callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMACaptureCplt;
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a14:	4a3a      	ldr	r2, [pc, #232]	; (8002b00 <HAL_TIM_IC_Start_DMA+0x308>)
 8002a16:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a1c:	4a39      	ldr	r2, [pc, #228]	; (8002b04 <HAL_TIM_IC_Start_DMA+0x30c>)
 8002a1e:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a24:	4a38      	ldr	r2, [pc, #224]	; (8002b08 <HAL_TIM_IC_Start_DMA+0x310>)
 8002a26:	631a      	str	r2, [r3, #48]	; 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)&htim->Instance->CCR2, (uint32_t)pData,
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	3338      	adds	r3, #56	; 0x38
 8002a32:	4619      	mov	r1, r3
 8002a34:	687a      	ldr	r2, [r7, #4]
 8002a36:	887b      	ldrh	r3, [r7, #2]
 8002a38:	f7fe fc42 	bl	80012c0 <HAL_DMA_Start_IT>
 8002a3c:	4603      	mov	r3, r0
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d001      	beq.n	8002a46 <HAL_TIM_IC_Start_DMA+0x24e>
                         Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8002a42:	2301      	movs	r3, #1
 8002a44:	e052      	b.n	8002aec <HAL_TIM_IC_Start_DMA+0x2f4>
      }
      /* Enable the TIM Capture/Compare 2  DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	68da      	ldr	r2, [r3, #12]
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002a54:	60da      	str	r2, [r3, #12]
      break;
 8002a56:	e048      	b.n	8002aea <HAL_TIM_IC_Start_DMA+0x2f2>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA capture callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMACaptureCplt;
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a5c:	4a28      	ldr	r2, [pc, #160]	; (8002b00 <HAL_TIM_IC_Start_DMA+0x308>)
 8002a5e:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a64:	4a27      	ldr	r2, [pc, #156]	; (8002b04 <HAL_TIM_IC_Start_DMA+0x30c>)
 8002a66:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a6c:	4a26      	ldr	r2, [pc, #152]	; (8002b08 <HAL_TIM_IC_Start_DMA+0x310>)
 8002a6e:	631a      	str	r2, [r3, #48]	; 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)&htim->Instance->CCR3, (uint32_t)pData,
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	333c      	adds	r3, #60	; 0x3c
 8002a7a:	4619      	mov	r1, r3
 8002a7c:	687a      	ldr	r2, [r7, #4]
 8002a7e:	887b      	ldrh	r3, [r7, #2]
 8002a80:	f7fe fc1e 	bl	80012c0 <HAL_DMA_Start_IT>
 8002a84:	4603      	mov	r3, r0
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d001      	beq.n	8002a8e <HAL_TIM_IC_Start_DMA+0x296>
                         Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8002a8a:	2301      	movs	r3, #1
 8002a8c:	e02e      	b.n	8002aec <HAL_TIM_IC_Start_DMA+0x2f4>
      }
      /* Enable the TIM Capture/Compare 3  DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	68da      	ldr	r2, [r3, #12]
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002a9c:	60da      	str	r2, [r3, #12]
      break;
 8002a9e:	e024      	b.n	8002aea <HAL_TIM_IC_Start_DMA+0x2f2>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA capture callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMACaptureCplt;
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002aa4:	4a16      	ldr	r2, [pc, #88]	; (8002b00 <HAL_TIM_IC_Start_DMA+0x308>)
 8002aa6:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002aac:	4a15      	ldr	r2, [pc, #84]	; (8002b04 <HAL_TIM_IC_Start_DMA+0x30c>)
 8002aae:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ab4:	4a14      	ldr	r2, [pc, #80]	; (8002b08 <HAL_TIM_IC_Start_DMA+0x310>)
 8002ab6:	631a      	str	r2, [r3, #48]	; 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)&htim->Instance->CCR4, (uint32_t)pData,
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	3340      	adds	r3, #64	; 0x40
 8002ac2:	4619      	mov	r1, r3
 8002ac4:	687a      	ldr	r2, [r7, #4]
 8002ac6:	887b      	ldrh	r3, [r7, #2]
 8002ac8:	f7fe fbfa 	bl	80012c0 <HAL_DMA_Start_IT>
 8002acc:	4603      	mov	r3, r0
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d001      	beq.n	8002ad6 <HAL_TIM_IC_Start_DMA+0x2de>
                         Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8002ad2:	2301      	movs	r3, #1
 8002ad4:	e00a      	b.n	8002aec <HAL_TIM_IC_Start_DMA+0x2f4>
      }
      /* Enable the TIM Capture/Compare 4  DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	68da      	ldr	r2, [r3, #12]
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002ae4:	60da      	str	r2, [r3, #12]
      break;
 8002ae6:	e000      	b.n	8002aea <HAL_TIM_IC_Start_DMA+0x2f2>
    }

    default:
      break;
 8002ae8:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002aea:	2300      	movs	r3, #0
}
 8002aec:	4618      	mov	r0, r3
 8002aee:	3718      	adds	r7, #24
 8002af0:	46bd      	mov	sp, r7
 8002af2:	bd80      	pop	{r7, pc}
 8002af4:	40012c00 	.word	0x40012c00
 8002af8:	40000400 	.word	0x40000400
 8002afc:	40000800 	.word	0x40000800
 8002b00:	08003439 	.word	0x08003439
 8002b04:	08003501 	.word	0x08003501
 8002b08:	080033a7 	.word	0x080033a7

08002b0c <HAL_TIM_IC_Stop_DMA>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002b0c:	b580      	push	{r7, lr}
 8002b0e:	b082      	sub	sp, #8
 8002b10:	af00      	add	r7, sp, #0
 8002b12:	6078      	str	r0, [r7, #4]
 8002b14:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
  assert_param(IS_TIM_DMA_CC_INSTANCE(htim->Instance));

  /* Disable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	2200      	movs	r2, #0
 8002b1c:	6839      	ldr	r1, [r7, #0]
 8002b1e:	4618      	mov	r0, r3
 8002b20:	f001 f93d 	bl	8003d9e <TIM_CCxChannelCmd>
 8002b24:	683b      	ldr	r3, [r7, #0]
 8002b26:	2b0c      	cmp	r3, #12
 8002b28:	d854      	bhi.n	8002bd4 <HAL_TIM_IC_Stop_DMA+0xc8>
 8002b2a:	a201      	add	r2, pc, #4	; (adr r2, 8002b30 <HAL_TIM_IC_Stop_DMA+0x24>)
 8002b2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b30:	08002b65 	.word	0x08002b65
 8002b34:	08002bd5 	.word	0x08002bd5
 8002b38:	08002bd5 	.word	0x08002bd5
 8002b3c:	08002bd5 	.word	0x08002bd5
 8002b40:	08002b81 	.word	0x08002b81
 8002b44:	08002bd5 	.word	0x08002bd5
 8002b48:	08002bd5 	.word	0x08002bd5
 8002b4c:	08002bd5 	.word	0x08002bd5
 8002b50:	08002b9d 	.word	0x08002b9d
 8002b54:	08002bd5 	.word	0x08002bd5
 8002b58:	08002bd5 	.word	0x08002bd5
 8002b5c:	08002bd5 	.word	0x08002bd5
 8002b60:	08002bb9 	.word	0x08002bb9
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	68da      	ldr	r2, [r3, #12]
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002b72:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b78:	4618      	mov	r0, r3
 8002b7a:	f7fe fc01 	bl	8001380 <HAL_DMA_Abort_IT>
      break;
 8002b7e:	e02a      	b.n	8002bd6 <HAL_TIM_IC_Stop_DMA+0xca>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	68da      	ldr	r2, [r3, #12]
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002b8e:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b94:	4618      	mov	r0, r3
 8002b96:	f7fe fbf3 	bl	8001380 <HAL_DMA_Abort_IT>
      break;
 8002b9a:	e01c      	b.n	8002bd6 <HAL_TIM_IC_Stop_DMA+0xca>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3  DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	68da      	ldr	r2, [r3, #12]
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002baa:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bb0:	4618      	mov	r0, r3
 8002bb2:	f7fe fbe5 	bl	8001380 <HAL_DMA_Abort_IT>
      break;
 8002bb6:	e00e      	b.n	8002bd6 <HAL_TIM_IC_Stop_DMA+0xca>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4  DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	68da      	ldr	r2, [r3, #12]
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002bc6:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bcc:	4618      	mov	r0, r3
 8002bce:	f7fe fbd7 	bl	8001380 <HAL_DMA_Abort_IT>
      break;
 8002bd2:	e000      	b.n	8002bd6 <HAL_TIM_IC_Stop_DMA+0xca>
    }

    default:
      break;
 8002bd4:	bf00      	nop
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	6a1a      	ldr	r2, [r3, #32]
 8002bdc:	f241 1311 	movw	r3, #4369	; 0x1111
 8002be0:	4013      	ands	r3, r2
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d10f      	bne.n	8002c06 <HAL_TIM_IC_Stop_DMA+0xfa>
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	6a1a      	ldr	r2, [r3, #32]
 8002bec:	f240 4344 	movw	r3, #1092	; 0x444
 8002bf0:	4013      	ands	r3, r2
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d107      	bne.n	8002c06 <HAL_TIM_IC_Stop_DMA+0xfa>
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	681a      	ldr	r2, [r3, #0]
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	f022 0201 	bic.w	r2, r2, #1
 8002c04:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8002c06:	683b      	ldr	r3, [r7, #0]
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d104      	bne.n	8002c16 <HAL_TIM_IC_Stop_DMA+0x10a>
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	2201      	movs	r2, #1
 8002c10:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002c14:	e013      	b.n	8002c3e <HAL_TIM_IC_Stop_DMA+0x132>
 8002c16:	683b      	ldr	r3, [r7, #0]
 8002c18:	2b04      	cmp	r3, #4
 8002c1a:	d104      	bne.n	8002c26 <HAL_TIM_IC_Stop_DMA+0x11a>
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	2201      	movs	r2, #1
 8002c20:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002c24:	e00b      	b.n	8002c3e <HAL_TIM_IC_Stop_DMA+0x132>
 8002c26:	683b      	ldr	r3, [r7, #0]
 8002c28:	2b08      	cmp	r3, #8
 8002c2a:	d104      	bne.n	8002c36 <HAL_TIM_IC_Stop_DMA+0x12a>
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	2201      	movs	r2, #1
 8002c30:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002c34:	e003      	b.n	8002c3e <HAL_TIM_IC_Stop_DMA+0x132>
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	2201      	movs	r2, #1
 8002c3a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8002c3e:	683b      	ldr	r3, [r7, #0]
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d104      	bne.n	8002c4e <HAL_TIM_IC_Stop_DMA+0x142>
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	2201      	movs	r2, #1
 8002c48:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002c4c:	e013      	b.n	8002c76 <HAL_TIM_IC_Stop_DMA+0x16a>
 8002c4e:	683b      	ldr	r3, [r7, #0]
 8002c50:	2b04      	cmp	r3, #4
 8002c52:	d104      	bne.n	8002c5e <HAL_TIM_IC_Stop_DMA+0x152>
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	2201      	movs	r2, #1
 8002c58:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002c5c:	e00b      	b.n	8002c76 <HAL_TIM_IC_Stop_DMA+0x16a>
 8002c5e:	683b      	ldr	r3, [r7, #0]
 8002c60:	2b08      	cmp	r3, #8
 8002c62:	d104      	bne.n	8002c6e <HAL_TIM_IC_Stop_DMA+0x162>
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	2201      	movs	r2, #1
 8002c68:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002c6c:	e003      	b.n	8002c76 <HAL_TIM_IC_Stop_DMA+0x16a>
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	2201      	movs	r2, #1
 8002c72:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Return function status */
  return HAL_OK;
 8002c76:	2300      	movs	r3, #0
}
 8002c78:	4618      	mov	r0, r3
 8002c7a:	3708      	adds	r7, #8
 8002c7c:	46bd      	mov	sp, r7
 8002c7e:	bd80      	pop	{r7, pc}

08002c80 <HAL_TIM_OnePulse_Init>:
  *            @arg TIM_OPMODE_SINGLE: Only one pulse will be generated.
  *            @arg TIM_OPMODE_REPETITIVE: Repetitive pulses will be generated.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Init(TIM_HandleTypeDef *htim, uint32_t OnePulseMode)
{
 8002c80:	b580      	push	{r7, lr}
 8002c82:	b082      	sub	sp, #8
 8002c84:	af00      	add	r7, sp, #0
 8002c86:	6078      	str	r0, [r7, #4]
 8002c88:	6039      	str	r1, [r7, #0]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d101      	bne.n	8002c94 <HAL_TIM_OnePulse_Init+0x14>
  {
    return HAL_ERROR;
 8002c90:	2301      	movs	r3, #1
 8002c92:	e041      	b.n	8002d18 <HAL_TIM_OnePulse_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_OPM_MODE(OnePulseMode));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c9a:	b2db      	uxtb	r3, r3
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d106      	bne.n	8002cae <HAL_TIM_OnePulse_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	2200      	movs	r2, #0
 8002ca4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OnePulse_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OnePulse_MspInit(htim);
 8002ca8:	6878      	ldr	r0, [r7, #4]
 8002caa:	f000 f839 	bl	8002d20 <HAL_TIM_OnePulse_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	2202      	movs	r2, #2
 8002cb2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Configure the Time base in the One Pulse Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681a      	ldr	r2, [r3, #0]
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	3304      	adds	r3, #4
 8002cbe:	4619      	mov	r1, r3
 8002cc0:	4610      	mov	r0, r2
 8002cc2:	f000 fc51 	bl	8003568 <TIM_Base_SetConfig>

  /* Reset the OPM Bit */
  htim->Instance->CR1 &= ~TIM_CR1_OPM;
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	681a      	ldr	r2, [r3, #0]
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	f022 0208 	bic.w	r2, r2, #8
 8002cd4:	601a      	str	r2, [r3, #0]

  /* Configure the OPM Mode */
  htim->Instance->CR1 |= OnePulseMode;
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	6819      	ldr	r1, [r3, #0]
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	683a      	ldr	r2, [r7, #0]
 8002ce2:	430a      	orrs	r2, r1
 8002ce4:	601a      	str	r2, [r3, #0]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	2201      	movs	r2, #1
 8002cea:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	2201      	movs	r2, #1
 8002cf2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	2201      	movs	r2, #1
 8002cfa:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	2201      	movs	r2, #1
 8002d02:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	2201      	movs	r2, #1
 8002d0a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	2201      	movs	r2, #1
 8002d12:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002d16:	2300      	movs	r3, #0
}
 8002d18:	4618      	mov	r0, r3
 8002d1a:	3708      	adds	r7, #8
 8002d1c:	46bd      	mov	sp, r7
 8002d1e:	bd80      	pop	{r7, pc}

08002d20 <HAL_TIM_OnePulse_MspInit>:
  * @brief  Initializes the TIM One Pulse MSP.
  * @param  htim TIM One Pulse handle
  * @retval None
  */
__weak void HAL_TIM_OnePulse_MspInit(TIM_HandleTypeDef *htim)
{
 8002d20:	b480      	push	{r7}
 8002d22:	b083      	sub	sp, #12
 8002d24:	af00      	add	r7, sp, #0
 8002d26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OnePulse_MspInit could be implemented in the user file
   */
}
 8002d28:	bf00      	nop
 8002d2a:	370c      	adds	r7, #12
 8002d2c:	46bd      	mov	sp, r7
 8002d2e:	bc80      	pop	{r7}
 8002d30:	4770      	bx	lr

08002d32 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002d32:	b580      	push	{r7, lr}
 8002d34:	b082      	sub	sp, #8
 8002d36:	af00      	add	r7, sp, #0
 8002d38:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	691b      	ldr	r3, [r3, #16]
 8002d40:	f003 0302 	and.w	r3, r3, #2
 8002d44:	2b02      	cmp	r3, #2
 8002d46:	d122      	bne.n	8002d8e <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	68db      	ldr	r3, [r3, #12]
 8002d4e:	f003 0302 	and.w	r3, r3, #2
 8002d52:	2b02      	cmp	r3, #2
 8002d54:	d11b      	bne.n	8002d8e <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	f06f 0202 	mvn.w	r2, #2
 8002d5e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	2201      	movs	r2, #1
 8002d64:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	699b      	ldr	r3, [r3, #24]
 8002d6c:	f003 0303 	and.w	r3, r3, #3
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d003      	beq.n	8002d7c <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002d74:	6878      	ldr	r0, [r7, #4]
 8002d76:	f000 fae9 	bl	800334c <HAL_TIM_IC_CaptureCallback>
 8002d7a:	e005      	b.n	8002d88 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002d7c:	6878      	ldr	r0, [r7, #4]
 8002d7e:	f000 fadc 	bl	800333a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002d82:	6878      	ldr	r0, [r7, #4]
 8002d84:	f000 faf4 	bl	8003370 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	2200      	movs	r2, #0
 8002d8c:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	691b      	ldr	r3, [r3, #16]
 8002d94:	f003 0304 	and.w	r3, r3, #4
 8002d98:	2b04      	cmp	r3, #4
 8002d9a:	d122      	bne.n	8002de2 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	68db      	ldr	r3, [r3, #12]
 8002da2:	f003 0304 	and.w	r3, r3, #4
 8002da6:	2b04      	cmp	r3, #4
 8002da8:	d11b      	bne.n	8002de2 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	f06f 0204 	mvn.w	r2, #4
 8002db2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	2202      	movs	r2, #2
 8002db8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	699b      	ldr	r3, [r3, #24]
 8002dc0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d003      	beq.n	8002dd0 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002dc8:	6878      	ldr	r0, [r7, #4]
 8002dca:	f000 fabf 	bl	800334c <HAL_TIM_IC_CaptureCallback>
 8002dce:	e005      	b.n	8002ddc <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002dd0:	6878      	ldr	r0, [r7, #4]
 8002dd2:	f000 fab2 	bl	800333a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002dd6:	6878      	ldr	r0, [r7, #4]
 8002dd8:	f000 faca 	bl	8003370 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	2200      	movs	r2, #0
 8002de0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	691b      	ldr	r3, [r3, #16]
 8002de8:	f003 0308 	and.w	r3, r3, #8
 8002dec:	2b08      	cmp	r3, #8
 8002dee:	d122      	bne.n	8002e36 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	68db      	ldr	r3, [r3, #12]
 8002df6:	f003 0308 	and.w	r3, r3, #8
 8002dfa:	2b08      	cmp	r3, #8
 8002dfc:	d11b      	bne.n	8002e36 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	f06f 0208 	mvn.w	r2, #8
 8002e06:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	2204      	movs	r2, #4
 8002e0c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	69db      	ldr	r3, [r3, #28]
 8002e14:	f003 0303 	and.w	r3, r3, #3
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d003      	beq.n	8002e24 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002e1c:	6878      	ldr	r0, [r7, #4]
 8002e1e:	f000 fa95 	bl	800334c <HAL_TIM_IC_CaptureCallback>
 8002e22:	e005      	b.n	8002e30 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002e24:	6878      	ldr	r0, [r7, #4]
 8002e26:	f000 fa88 	bl	800333a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002e2a:	6878      	ldr	r0, [r7, #4]
 8002e2c:	f000 faa0 	bl	8003370 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	2200      	movs	r2, #0
 8002e34:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	691b      	ldr	r3, [r3, #16]
 8002e3c:	f003 0310 	and.w	r3, r3, #16
 8002e40:	2b10      	cmp	r3, #16
 8002e42:	d122      	bne.n	8002e8a <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	68db      	ldr	r3, [r3, #12]
 8002e4a:	f003 0310 	and.w	r3, r3, #16
 8002e4e:	2b10      	cmp	r3, #16
 8002e50:	d11b      	bne.n	8002e8a <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	f06f 0210 	mvn.w	r2, #16
 8002e5a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	2208      	movs	r2, #8
 8002e60:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	69db      	ldr	r3, [r3, #28]
 8002e68:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d003      	beq.n	8002e78 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002e70:	6878      	ldr	r0, [r7, #4]
 8002e72:	f000 fa6b 	bl	800334c <HAL_TIM_IC_CaptureCallback>
 8002e76:	e005      	b.n	8002e84 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002e78:	6878      	ldr	r0, [r7, #4]
 8002e7a:	f000 fa5e 	bl	800333a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002e7e:	6878      	ldr	r0, [r7, #4]
 8002e80:	f000 fa76 	bl	8003370 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	2200      	movs	r2, #0
 8002e88:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	691b      	ldr	r3, [r3, #16]
 8002e90:	f003 0301 	and.w	r3, r3, #1
 8002e94:	2b01      	cmp	r3, #1
 8002e96:	d10e      	bne.n	8002eb6 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	68db      	ldr	r3, [r3, #12]
 8002e9e:	f003 0301 	and.w	r3, r3, #1
 8002ea2:	2b01      	cmp	r3, #1
 8002ea4:	d107      	bne.n	8002eb6 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	f06f 0201 	mvn.w	r2, #1
 8002eae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002eb0:	6878      	ldr	r0, [r7, #4]
 8002eb2:	f000 fa39 	bl	8003328 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	691b      	ldr	r3, [r3, #16]
 8002ebc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ec0:	2b80      	cmp	r3, #128	; 0x80
 8002ec2:	d10e      	bne.n	8002ee2 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	68db      	ldr	r3, [r3, #12]
 8002eca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ece:	2b80      	cmp	r3, #128	; 0x80
 8002ed0:	d107      	bne.n	8002ee2 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002eda:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002edc:	6878      	ldr	r0, [r7, #4]
 8002ede:	f001 f83b 	bl	8003f58 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	691b      	ldr	r3, [r3, #16]
 8002ee8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002eec:	2b40      	cmp	r3, #64	; 0x40
 8002eee:	d10e      	bne.n	8002f0e <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	68db      	ldr	r3, [r3, #12]
 8002ef6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002efa:	2b40      	cmp	r3, #64	; 0x40
 8002efc:	d107      	bne.n	8002f0e <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002f06:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002f08:	6878      	ldr	r0, [r7, #4]
 8002f0a:	f000 fa3a 	bl	8003382 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	691b      	ldr	r3, [r3, #16]
 8002f14:	f003 0320 	and.w	r3, r3, #32
 8002f18:	2b20      	cmp	r3, #32
 8002f1a:	d10e      	bne.n	8002f3a <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	68db      	ldr	r3, [r3, #12]
 8002f22:	f003 0320 	and.w	r3, r3, #32
 8002f26:	2b20      	cmp	r3, #32
 8002f28:	d107      	bne.n	8002f3a <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	f06f 0220 	mvn.w	r2, #32
 8002f32:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002f34:	6878      	ldr	r0, [r7, #4]
 8002f36:	f001 f806 	bl	8003f46 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002f3a:	bf00      	nop
 8002f3c:	3708      	adds	r7, #8
 8002f3e:	46bd      	mov	sp, r7
 8002f40:	bd80      	pop	{r7, pc}
	...

08002f44 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8002f44:	b580      	push	{r7, lr}
 8002f46:	b084      	sub	sp, #16
 8002f48:	af00      	add	r7, sp, #0
 8002f4a:	60f8      	str	r0, [r7, #12]
 8002f4c:	60b9      	str	r1, [r7, #8]
 8002f4e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002f56:	2b01      	cmp	r3, #1
 8002f58:	d101      	bne.n	8002f5e <HAL_TIM_OC_ConfigChannel+0x1a>
 8002f5a:	2302      	movs	r3, #2
 8002f5c:	e046      	b.n	8002fec <HAL_TIM_OC_ConfigChannel+0xa8>
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	2201      	movs	r2, #1
 8002f62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	2b0c      	cmp	r3, #12
 8002f6a:	d839      	bhi.n	8002fe0 <HAL_TIM_OC_ConfigChannel+0x9c>
 8002f6c:	a201      	add	r2, pc, #4	; (adr r2, 8002f74 <HAL_TIM_OC_ConfigChannel+0x30>)
 8002f6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f72:	bf00      	nop
 8002f74:	08002fa9 	.word	0x08002fa9
 8002f78:	08002fe1 	.word	0x08002fe1
 8002f7c:	08002fe1 	.word	0x08002fe1
 8002f80:	08002fe1 	.word	0x08002fe1
 8002f84:	08002fb7 	.word	0x08002fb7
 8002f88:	08002fe1 	.word	0x08002fe1
 8002f8c:	08002fe1 	.word	0x08002fe1
 8002f90:	08002fe1 	.word	0x08002fe1
 8002f94:	08002fc5 	.word	0x08002fc5
 8002f98:	08002fe1 	.word	0x08002fe1
 8002f9c:	08002fe1 	.word	0x08002fe1
 8002fa0:	08002fe1 	.word	0x08002fe1
 8002fa4:	08002fd3 	.word	0x08002fd3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	68b9      	ldr	r1, [r7, #8]
 8002fae:	4618      	mov	r0, r3
 8002fb0:	f000 fb3c 	bl	800362c <TIM_OC1_SetConfig>
      break;
 8002fb4:	e015      	b.n	8002fe2 <HAL_TIM_OC_ConfigChannel+0x9e>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	68b9      	ldr	r1, [r7, #8]
 8002fbc:	4618      	mov	r0, r3
 8002fbe:	f000 fb9b 	bl	80036f8 <TIM_OC2_SetConfig>
      break;
 8002fc2:	e00e      	b.n	8002fe2 <HAL_TIM_OC_ConfigChannel+0x9e>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	68b9      	ldr	r1, [r7, #8]
 8002fca:	4618      	mov	r0, r3
 8002fcc:	f000 fbfe 	bl	80037cc <TIM_OC3_SetConfig>
      break;
 8002fd0:	e007      	b.n	8002fe2 <HAL_TIM_OC_ConfigChannel+0x9e>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	68b9      	ldr	r1, [r7, #8]
 8002fd8:	4618      	mov	r0, r3
 8002fda:	f000 fc61 	bl	80038a0 <TIM_OC4_SetConfig>
      break;
 8002fde:	e000      	b.n	8002fe2 <HAL_TIM_OC_ConfigChannel+0x9e>
    }

    default:
      break;
 8002fe0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	2200      	movs	r2, #0
 8002fe6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002fea:	2300      	movs	r3, #0
}
 8002fec:	4618      	mov	r0, r3
 8002fee:	3710      	adds	r7, #16
 8002ff0:	46bd      	mov	sp, r7
 8002ff2:	bd80      	pop	{r7, pc}

08002ff4 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8002ff4:	b580      	push	{r7, lr}
 8002ff6:	b084      	sub	sp, #16
 8002ff8:	af00      	add	r7, sp, #0
 8002ffa:	60f8      	str	r0, [r7, #12]
 8002ffc:	60b9      	str	r1, [r7, #8]
 8002ffe:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003006:	2b01      	cmp	r3, #1
 8003008:	d101      	bne.n	800300e <HAL_TIM_IC_ConfigChannel+0x1a>
 800300a:	2302      	movs	r3, #2
 800300c:	e082      	b.n	8003114 <HAL_TIM_IC_ConfigChannel+0x120>
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	2201      	movs	r2, #1
 8003012:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	2b00      	cmp	r3, #0
 800301a:	d11b      	bne.n	8003054 <HAL_TIM_IC_ConfigChannel+0x60>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	6818      	ldr	r0, [r3, #0]
 8003020:	68bb      	ldr	r3, [r7, #8]
 8003022:	6819      	ldr	r1, [r3, #0]
 8003024:	68bb      	ldr	r3, [r7, #8]
 8003026:	685a      	ldr	r2, [r3, #4]
 8003028:	68bb      	ldr	r3, [r7, #8]
 800302a:	68db      	ldr	r3, [r3, #12]
 800302c:	f000 fd14 	bl	8003a58 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	699a      	ldr	r2, [r3, #24]
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	f022 020c 	bic.w	r2, r2, #12
 800303e:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	6999      	ldr	r1, [r3, #24]
 8003046:	68bb      	ldr	r3, [r7, #8]
 8003048:	689a      	ldr	r2, [r3, #8]
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	430a      	orrs	r2, r1
 8003050:	619a      	str	r2, [r3, #24]
 8003052:	e05a      	b.n	800310a <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_2)
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	2b04      	cmp	r3, #4
 8003058:	d11c      	bne.n	8003094 <HAL_TIM_IC_ConfigChannel+0xa0>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	6818      	ldr	r0, [r3, #0]
 800305e:	68bb      	ldr	r3, [r7, #8]
 8003060:	6819      	ldr	r1, [r3, #0]
 8003062:	68bb      	ldr	r3, [r7, #8]
 8003064:	685a      	ldr	r2, [r3, #4]
 8003066:	68bb      	ldr	r3, [r7, #8]
 8003068:	68db      	ldr	r3, [r3, #12]
 800306a:	f000 fd7d 	bl	8003b68 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	699a      	ldr	r2, [r3, #24]
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800307c:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	6999      	ldr	r1, [r3, #24]
 8003084:	68bb      	ldr	r3, [r7, #8]
 8003086:	689b      	ldr	r3, [r3, #8]
 8003088:	021a      	lsls	r2, r3, #8
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	430a      	orrs	r2, r1
 8003090:	619a      	str	r2, [r3, #24]
 8003092:	e03a      	b.n	800310a <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_3)
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	2b08      	cmp	r3, #8
 8003098:	d11b      	bne.n	80030d2 <HAL_TIM_IC_ConfigChannel+0xde>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	6818      	ldr	r0, [r3, #0]
 800309e:	68bb      	ldr	r3, [r7, #8]
 80030a0:	6819      	ldr	r1, [r3, #0]
 80030a2:	68bb      	ldr	r3, [r7, #8]
 80030a4:	685a      	ldr	r2, [r3, #4]
 80030a6:	68bb      	ldr	r3, [r7, #8]
 80030a8:	68db      	ldr	r3, [r3, #12]
 80030aa:	f000 fdc8 	bl	8003c3e <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	69da      	ldr	r2, [r3, #28]
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	f022 020c 	bic.w	r2, r2, #12
 80030bc:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	69d9      	ldr	r1, [r3, #28]
 80030c4:	68bb      	ldr	r3, [r7, #8]
 80030c6:	689a      	ldr	r2, [r3, #8]
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	430a      	orrs	r2, r1
 80030ce:	61da      	str	r2, [r3, #28]
 80030d0:	e01b      	b.n	800310a <HAL_TIM_IC_ConfigChannel+0x116>
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	6818      	ldr	r0, [r3, #0]
 80030d6:	68bb      	ldr	r3, [r7, #8]
 80030d8:	6819      	ldr	r1, [r3, #0]
 80030da:	68bb      	ldr	r3, [r7, #8]
 80030dc:	685a      	ldr	r2, [r3, #4]
 80030de:	68bb      	ldr	r3, [r7, #8]
 80030e0:	68db      	ldr	r3, [r3, #12]
 80030e2:	f000 fde7 	bl	8003cb4 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	69da      	ldr	r2, [r3, #28]
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80030f4:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	69d9      	ldr	r1, [r3, #28]
 80030fc:	68bb      	ldr	r3, [r7, #8]
 80030fe:	689b      	ldr	r3, [r3, #8]
 8003100:	021a      	lsls	r2, r3, #8
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	430a      	orrs	r2, r1
 8003108:	61da      	str	r2, [r3, #28]
  }

  __HAL_UNLOCK(htim);
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	2200      	movs	r2, #0
 800310e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003112:	2300      	movs	r3, #0
}
 8003114:	4618      	mov	r0, r3
 8003116:	3710      	adds	r7, #16
 8003118:	46bd      	mov	sp, r7
 800311a:	bd80      	pop	{r7, pc}

0800311c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800311c:	b580      	push	{r7, lr}
 800311e:	b084      	sub	sp, #16
 8003120:	af00      	add	r7, sp, #0
 8003122:	6078      	str	r0, [r7, #4]
 8003124:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800312c:	2b01      	cmp	r3, #1
 800312e:	d101      	bne.n	8003134 <HAL_TIM_ConfigClockSource+0x18>
 8003130:	2302      	movs	r3, #2
 8003132:	e0b3      	b.n	800329c <HAL_TIM_ConfigClockSource+0x180>
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	2201      	movs	r2, #1
 8003138:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	2202      	movs	r2, #2
 8003140:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	689b      	ldr	r3, [r3, #8]
 800314a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003152:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800315a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	68fa      	ldr	r2, [r7, #12]
 8003162:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003164:	683b      	ldr	r3, [r7, #0]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800316c:	d03e      	beq.n	80031ec <HAL_TIM_ConfigClockSource+0xd0>
 800316e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003172:	f200 8087 	bhi.w	8003284 <HAL_TIM_ConfigClockSource+0x168>
 8003176:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800317a:	f000 8085 	beq.w	8003288 <HAL_TIM_ConfigClockSource+0x16c>
 800317e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003182:	d87f      	bhi.n	8003284 <HAL_TIM_ConfigClockSource+0x168>
 8003184:	2b70      	cmp	r3, #112	; 0x70
 8003186:	d01a      	beq.n	80031be <HAL_TIM_ConfigClockSource+0xa2>
 8003188:	2b70      	cmp	r3, #112	; 0x70
 800318a:	d87b      	bhi.n	8003284 <HAL_TIM_ConfigClockSource+0x168>
 800318c:	2b60      	cmp	r3, #96	; 0x60
 800318e:	d050      	beq.n	8003232 <HAL_TIM_ConfigClockSource+0x116>
 8003190:	2b60      	cmp	r3, #96	; 0x60
 8003192:	d877      	bhi.n	8003284 <HAL_TIM_ConfigClockSource+0x168>
 8003194:	2b50      	cmp	r3, #80	; 0x50
 8003196:	d03c      	beq.n	8003212 <HAL_TIM_ConfigClockSource+0xf6>
 8003198:	2b50      	cmp	r3, #80	; 0x50
 800319a:	d873      	bhi.n	8003284 <HAL_TIM_ConfigClockSource+0x168>
 800319c:	2b40      	cmp	r3, #64	; 0x40
 800319e:	d058      	beq.n	8003252 <HAL_TIM_ConfigClockSource+0x136>
 80031a0:	2b40      	cmp	r3, #64	; 0x40
 80031a2:	d86f      	bhi.n	8003284 <HAL_TIM_ConfigClockSource+0x168>
 80031a4:	2b30      	cmp	r3, #48	; 0x30
 80031a6:	d064      	beq.n	8003272 <HAL_TIM_ConfigClockSource+0x156>
 80031a8:	2b30      	cmp	r3, #48	; 0x30
 80031aa:	d86b      	bhi.n	8003284 <HAL_TIM_ConfigClockSource+0x168>
 80031ac:	2b20      	cmp	r3, #32
 80031ae:	d060      	beq.n	8003272 <HAL_TIM_ConfigClockSource+0x156>
 80031b0:	2b20      	cmp	r3, #32
 80031b2:	d867      	bhi.n	8003284 <HAL_TIM_ConfigClockSource+0x168>
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d05c      	beq.n	8003272 <HAL_TIM_ConfigClockSource+0x156>
 80031b8:	2b10      	cmp	r3, #16
 80031ba:	d05a      	beq.n	8003272 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 80031bc:	e062      	b.n	8003284 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	6818      	ldr	r0, [r3, #0]
 80031c2:	683b      	ldr	r3, [r7, #0]
 80031c4:	6899      	ldr	r1, [r3, #8]
 80031c6:	683b      	ldr	r3, [r7, #0]
 80031c8:	685a      	ldr	r2, [r3, #4]
 80031ca:	683b      	ldr	r3, [r7, #0]
 80031cc:	68db      	ldr	r3, [r3, #12]
 80031ce:	f000 fdc7 	bl	8003d60 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	689b      	ldr	r3, [r3, #8]
 80031d8:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80031e0:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	68fa      	ldr	r2, [r7, #12]
 80031e8:	609a      	str	r2, [r3, #8]
      break;
 80031ea:	e04e      	b.n	800328a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	6818      	ldr	r0, [r3, #0]
 80031f0:	683b      	ldr	r3, [r7, #0]
 80031f2:	6899      	ldr	r1, [r3, #8]
 80031f4:	683b      	ldr	r3, [r7, #0]
 80031f6:	685a      	ldr	r2, [r3, #4]
 80031f8:	683b      	ldr	r3, [r7, #0]
 80031fa:	68db      	ldr	r3, [r3, #12]
 80031fc:	f000 fdb0 	bl	8003d60 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	689a      	ldr	r2, [r3, #8]
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800320e:	609a      	str	r2, [r3, #8]
      break;
 8003210:	e03b      	b.n	800328a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	6818      	ldr	r0, [r3, #0]
 8003216:	683b      	ldr	r3, [r7, #0]
 8003218:	6859      	ldr	r1, [r3, #4]
 800321a:	683b      	ldr	r3, [r7, #0]
 800321c:	68db      	ldr	r3, [r3, #12]
 800321e:	461a      	mov	r2, r3
 8003220:	f000 fc74 	bl	8003b0c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	2150      	movs	r1, #80	; 0x50
 800322a:	4618      	mov	r0, r3
 800322c:	f000 fd7e 	bl	8003d2c <TIM_ITRx_SetConfig>
      break;
 8003230:	e02b      	b.n	800328a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	6818      	ldr	r0, [r3, #0]
 8003236:	683b      	ldr	r3, [r7, #0]
 8003238:	6859      	ldr	r1, [r3, #4]
 800323a:	683b      	ldr	r3, [r7, #0]
 800323c:	68db      	ldr	r3, [r3, #12]
 800323e:	461a      	mov	r2, r3
 8003240:	f000 fcce 	bl	8003be0 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	2160      	movs	r1, #96	; 0x60
 800324a:	4618      	mov	r0, r3
 800324c:	f000 fd6e 	bl	8003d2c <TIM_ITRx_SetConfig>
      break;
 8003250:	e01b      	b.n	800328a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	6818      	ldr	r0, [r3, #0]
 8003256:	683b      	ldr	r3, [r7, #0]
 8003258:	6859      	ldr	r1, [r3, #4]
 800325a:	683b      	ldr	r3, [r7, #0]
 800325c:	68db      	ldr	r3, [r3, #12]
 800325e:	461a      	mov	r2, r3
 8003260:	f000 fc54 	bl	8003b0c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	2140      	movs	r1, #64	; 0x40
 800326a:	4618      	mov	r0, r3
 800326c:	f000 fd5e 	bl	8003d2c <TIM_ITRx_SetConfig>
      break;
 8003270:	e00b      	b.n	800328a <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681a      	ldr	r2, [r3, #0]
 8003276:	683b      	ldr	r3, [r7, #0]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	4619      	mov	r1, r3
 800327c:	4610      	mov	r0, r2
 800327e:	f000 fd55 	bl	8003d2c <TIM_ITRx_SetConfig>
        break;
 8003282:	e002      	b.n	800328a <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8003284:	bf00      	nop
 8003286:	e000      	b.n	800328a <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8003288:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	2201      	movs	r2, #1
 800328e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	2200      	movs	r2, #0
 8003296:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800329a:	2300      	movs	r3, #0
}
 800329c:	4618      	mov	r0, r3
 800329e:	3710      	adds	r7, #16
 80032a0:	46bd      	mov	sp, r7
 80032a2:	bd80      	pop	{r7, pc}

080032a4 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 80032a4:	b580      	push	{r7, lr}
 80032a6:	b082      	sub	sp, #8
 80032a8:	af00      	add	r7, sp, #0
 80032aa:	6078      	str	r0, [r7, #4]
 80032ac:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80032b4:	2b01      	cmp	r3, #1
 80032b6:	d101      	bne.n	80032bc <HAL_TIM_SlaveConfigSynchro+0x18>
 80032b8:	2302      	movs	r3, #2
 80032ba:	e031      	b.n	8003320 <HAL_TIM_SlaveConfigSynchro+0x7c>
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	2201      	movs	r2, #1
 80032c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	2202      	movs	r2, #2
 80032c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 80032cc:	6839      	ldr	r1, [r7, #0]
 80032ce:	6878      	ldr	r0, [r7, #4]
 80032d0:	f000 fb34 	bl	800393c <TIM_SlaveTimer_SetConfig>
 80032d4:	4603      	mov	r3, r0
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d009      	beq.n	80032ee <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	2201      	movs	r2, #1
 80032de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	2200      	movs	r2, #0
 80032e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 80032ea:	2301      	movs	r3, #1
 80032ec:	e018      	b.n	8003320 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	68da      	ldr	r2, [r3, #12]
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80032fc:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	68da      	ldr	r2, [r3, #12]
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800330c:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	2201      	movs	r2, #1
 8003312:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	2200      	movs	r2, #0
 800331a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800331e:	2300      	movs	r3, #0
}
 8003320:	4618      	mov	r0, r3
 8003322:	3708      	adds	r7, #8
 8003324:	46bd      	mov	sp, r7
 8003326:	bd80      	pop	{r7, pc}

08003328 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003328:	b480      	push	{r7}
 800332a:	b083      	sub	sp, #12
 800332c:	af00      	add	r7, sp, #0
 800332e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8003330:	bf00      	nop
 8003332:	370c      	adds	r7, #12
 8003334:	46bd      	mov	sp, r7
 8003336:	bc80      	pop	{r7}
 8003338:	4770      	bx	lr

0800333a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800333a:	b480      	push	{r7}
 800333c:	b083      	sub	sp, #12
 800333e:	af00      	add	r7, sp, #0
 8003340:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003342:	bf00      	nop
 8003344:	370c      	adds	r7, #12
 8003346:	46bd      	mov	sp, r7
 8003348:	bc80      	pop	{r7}
 800334a:	4770      	bx	lr

0800334c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800334c:	b480      	push	{r7}
 800334e:	b083      	sub	sp, #12
 8003350:	af00      	add	r7, sp, #0
 8003352:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003354:	bf00      	nop
 8003356:	370c      	adds	r7, #12
 8003358:	46bd      	mov	sp, r7
 800335a:	bc80      	pop	{r7}
 800335c:	4770      	bx	lr

0800335e <HAL_TIM_IC_CaptureHalfCpltCallback>:
  * @brief  Input Capture half complete callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800335e:	b480      	push	{r7}
 8003360:	b083      	sub	sp, #12
 8003362:	af00      	add	r7, sp, #0
 8003364:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureHalfCpltCallback could be implemented in the user file
   */
}
 8003366:	bf00      	nop
 8003368:	370c      	adds	r7, #12
 800336a:	46bd      	mov	sp, r7
 800336c:	bc80      	pop	{r7}
 800336e:	4770      	bx	lr

08003370 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003370:	b480      	push	{r7}
 8003372:	b083      	sub	sp, #12
 8003374:	af00      	add	r7, sp, #0
 8003376:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003378:	bf00      	nop
 800337a:	370c      	adds	r7, #12
 800337c:	46bd      	mov	sp, r7
 800337e:	bc80      	pop	{r7}
 8003380:	4770      	bx	lr

08003382 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003382:	b480      	push	{r7}
 8003384:	b083      	sub	sp, #12
 8003386:	af00      	add	r7, sp, #0
 8003388:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800338a:	bf00      	nop
 800338c:	370c      	adds	r7, #12
 800338e:	46bd      	mov	sp, r7
 8003390:	bc80      	pop	{r7}
 8003392:	4770      	bx	lr

08003394 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8003394:	b480      	push	{r7}
 8003396:	b083      	sub	sp, #12
 8003398:	af00      	add	r7, sp, #0
 800339a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 800339c:	bf00      	nop
 800339e:	370c      	adds	r7, #12
 80033a0:	46bd      	mov	sp, r7
 80033a2:	bc80      	pop	{r7}
 80033a4:	4770      	bx	lr

080033a6 <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 80033a6:	b580      	push	{r7, lr}
 80033a8:	b084      	sub	sp, #16
 80033aa:	af00      	add	r7, sp, #0
 80033ac:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033b2:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033b8:	687a      	ldr	r2, [r7, #4]
 80033ba:	429a      	cmp	r2, r3
 80033bc:	d107      	bne.n	80033ce <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	2201      	movs	r2, #1
 80033c2:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	2201      	movs	r2, #1
 80033c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80033cc:	e02a      	b.n	8003424 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033d2:	687a      	ldr	r2, [r7, #4]
 80033d4:	429a      	cmp	r2, r3
 80033d6:	d107      	bne.n	80033e8 <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	2202      	movs	r2, #2
 80033dc:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	2201      	movs	r2, #1
 80033e2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80033e6:	e01d      	b.n	8003424 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033ec:	687a      	ldr	r2, [r7, #4]
 80033ee:	429a      	cmp	r2, r3
 80033f0:	d107      	bne.n	8003402 <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	2204      	movs	r2, #4
 80033f6:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	2201      	movs	r2, #1
 80033fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003400:	e010      	b.n	8003424 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003406:	687a      	ldr	r2, [r7, #4]
 8003408:	429a      	cmp	r2, r3
 800340a:	d107      	bne.n	800341c <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	2208      	movs	r2, #8
 8003410:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	2201      	movs	r2, #1
 8003416:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800341a:	e003      	b.n	8003424 <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	2201      	movs	r2, #1
 8003420:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 8003424:	68f8      	ldr	r0, [r7, #12]
 8003426:	f7ff ffb5 	bl	8003394 <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	2200      	movs	r2, #0
 800342e:	771a      	strb	r2, [r3, #28]
}
 8003430:	bf00      	nop
 8003432:	3710      	adds	r7, #16
 8003434:	46bd      	mov	sp, r7
 8003436:	bd80      	pop	{r7, pc}

08003438 <TIM_DMACaptureCplt>:
  * @brief  TIM DMA Capture complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMACaptureCplt(DMA_HandleTypeDef *hdma)
{
 8003438:	b580      	push	{r7, lr}
 800343a:	b084      	sub	sp, #16
 800343c:	af00      	add	r7, sp, #0
 800343e:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003444:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800344a:	687a      	ldr	r2, [r7, #4]
 800344c:	429a      	cmp	r2, r3
 800344e:	d10f      	bne.n	8003470 <TIM_DMACaptureCplt+0x38>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	2201      	movs	r2, #1
 8003454:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	699b      	ldr	r3, [r3, #24]
 800345a:	2b00      	cmp	r3, #0
 800345c:	d146      	bne.n	80034ec <TIM_DMACaptureCplt+0xb4>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	2201      	movs	r2, #1
 8003462:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	2201      	movs	r2, #1
 800346a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800346e:	e03d      	b.n	80034ec <TIM_DMACaptureCplt+0xb4>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003474:	687a      	ldr	r2, [r7, #4]
 8003476:	429a      	cmp	r2, r3
 8003478:	d10f      	bne.n	800349a <TIM_DMACaptureCplt+0x62>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	2202      	movs	r2, #2
 800347e:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	699b      	ldr	r3, [r3, #24]
 8003484:	2b00      	cmp	r3, #0
 8003486:	d131      	bne.n	80034ec <TIM_DMACaptureCplt+0xb4>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	2201      	movs	r2, #1
 800348c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	2201      	movs	r2, #1
 8003494:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003498:	e028      	b.n	80034ec <TIM_DMACaptureCplt+0xb4>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800349e:	687a      	ldr	r2, [r7, #4]
 80034a0:	429a      	cmp	r2, r3
 80034a2:	d10f      	bne.n	80034c4 <TIM_DMACaptureCplt+0x8c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	2204      	movs	r2, #4
 80034a8:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	699b      	ldr	r3, [r3, #24]
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d11c      	bne.n	80034ec <TIM_DMACaptureCplt+0xb4>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	2201      	movs	r2, #1
 80034b6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	2201      	movs	r2, #1
 80034be:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80034c2:	e013      	b.n	80034ec <TIM_DMACaptureCplt+0xb4>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034c8:	687a      	ldr	r2, [r7, #4]
 80034ca:	429a      	cmp	r2, r3
 80034cc:	d10e      	bne.n	80034ec <TIM_DMACaptureCplt+0xb4>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	2208      	movs	r2, #8
 80034d2:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	699b      	ldr	r3, [r3, #24]
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d107      	bne.n	80034ec <TIM_DMACaptureCplt+0xb4>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	2201      	movs	r2, #1
 80034e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	2201      	movs	r2, #1
 80034e8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->IC_CaptureCallback(htim);
#else
  HAL_TIM_IC_CaptureCallback(htim);
 80034ec:	68f8      	ldr	r0, [r7, #12]
 80034ee:	f7ff ff2d 	bl	800334c <HAL_TIM_IC_CaptureCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	2200      	movs	r2, #0
 80034f6:	771a      	strb	r2, [r3, #28]
}
 80034f8:	bf00      	nop
 80034fa:	3710      	adds	r7, #16
 80034fc:	46bd      	mov	sp, r7
 80034fe:	bd80      	pop	{r7, pc}

08003500 <TIM_DMACaptureHalfCplt>:
  * @brief  TIM DMA Capture half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMACaptureHalfCplt(DMA_HandleTypeDef *hdma)
{
 8003500:	b580      	push	{r7, lr}
 8003502:	b084      	sub	sp, #16
 8003504:	af00      	add	r7, sp, #0
 8003506:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800350c:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003512:	687a      	ldr	r2, [r7, #4]
 8003514:	429a      	cmp	r2, r3
 8003516:	d103      	bne.n	8003520 <TIM_DMACaptureHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	2201      	movs	r2, #1
 800351c:	771a      	strb	r2, [r3, #28]
 800351e:	e019      	b.n	8003554 <TIM_DMACaptureHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003524:	687a      	ldr	r2, [r7, #4]
 8003526:	429a      	cmp	r2, r3
 8003528:	d103      	bne.n	8003532 <TIM_DMACaptureHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	2202      	movs	r2, #2
 800352e:	771a      	strb	r2, [r3, #28]
 8003530:	e010      	b.n	8003554 <TIM_DMACaptureHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003536:	687a      	ldr	r2, [r7, #4]
 8003538:	429a      	cmp	r2, r3
 800353a:	d103      	bne.n	8003544 <TIM_DMACaptureHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	2204      	movs	r2, #4
 8003540:	771a      	strb	r2, [r3, #28]
 8003542:	e007      	b.n	8003554 <TIM_DMACaptureHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003548:	687a      	ldr	r2, [r7, #4]
 800354a:	429a      	cmp	r2, r3
 800354c:	d102      	bne.n	8003554 <TIM_DMACaptureHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	2208      	movs	r2, #8
 8003552:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->IC_CaptureHalfCpltCallback(htim);
#else
  HAL_TIM_IC_CaptureHalfCpltCallback(htim);
 8003554:	68f8      	ldr	r0, [r7, #12]
 8003556:	f7ff ff02 	bl	800335e <HAL_TIM_IC_CaptureHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	2200      	movs	r2, #0
 800355e:	771a      	strb	r2, [r3, #28]
}
 8003560:	bf00      	nop
 8003562:	3710      	adds	r7, #16
 8003564:	46bd      	mov	sp, r7
 8003566:	bd80      	pop	{r7, pc}

08003568 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003568:	b480      	push	{r7}
 800356a:	b085      	sub	sp, #20
 800356c:	af00      	add	r7, sp, #0
 800356e:	6078      	str	r0, [r7, #4]
 8003570:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	4a29      	ldr	r2, [pc, #164]	; (8003620 <TIM_Base_SetConfig+0xb8>)
 800357c:	4293      	cmp	r3, r2
 800357e:	d00b      	beq.n	8003598 <TIM_Base_SetConfig+0x30>
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003586:	d007      	beq.n	8003598 <TIM_Base_SetConfig+0x30>
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	4a26      	ldr	r2, [pc, #152]	; (8003624 <TIM_Base_SetConfig+0xbc>)
 800358c:	4293      	cmp	r3, r2
 800358e:	d003      	beq.n	8003598 <TIM_Base_SetConfig+0x30>
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	4a25      	ldr	r2, [pc, #148]	; (8003628 <TIM_Base_SetConfig+0xc0>)
 8003594:	4293      	cmp	r3, r2
 8003596:	d108      	bne.n	80035aa <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800359e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80035a0:	683b      	ldr	r3, [r7, #0]
 80035a2:	685b      	ldr	r3, [r3, #4]
 80035a4:	68fa      	ldr	r2, [r7, #12]
 80035a6:	4313      	orrs	r3, r2
 80035a8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	4a1c      	ldr	r2, [pc, #112]	; (8003620 <TIM_Base_SetConfig+0xb8>)
 80035ae:	4293      	cmp	r3, r2
 80035b0:	d00b      	beq.n	80035ca <TIM_Base_SetConfig+0x62>
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80035b8:	d007      	beq.n	80035ca <TIM_Base_SetConfig+0x62>
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	4a19      	ldr	r2, [pc, #100]	; (8003624 <TIM_Base_SetConfig+0xbc>)
 80035be:	4293      	cmp	r3, r2
 80035c0:	d003      	beq.n	80035ca <TIM_Base_SetConfig+0x62>
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	4a18      	ldr	r2, [pc, #96]	; (8003628 <TIM_Base_SetConfig+0xc0>)
 80035c6:	4293      	cmp	r3, r2
 80035c8:	d108      	bne.n	80035dc <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80035d0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80035d2:	683b      	ldr	r3, [r7, #0]
 80035d4:	68db      	ldr	r3, [r3, #12]
 80035d6:	68fa      	ldr	r2, [r7, #12]
 80035d8:	4313      	orrs	r3, r2
 80035da:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80035e2:	683b      	ldr	r3, [r7, #0]
 80035e4:	695b      	ldr	r3, [r3, #20]
 80035e6:	4313      	orrs	r3, r2
 80035e8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	68fa      	ldr	r2, [r7, #12]
 80035ee:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80035f0:	683b      	ldr	r3, [r7, #0]
 80035f2:	689a      	ldr	r2, [r3, #8]
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80035f8:	683b      	ldr	r3, [r7, #0]
 80035fa:	681a      	ldr	r2, [r3, #0]
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	4a07      	ldr	r2, [pc, #28]	; (8003620 <TIM_Base_SetConfig+0xb8>)
 8003604:	4293      	cmp	r3, r2
 8003606:	d103      	bne.n	8003610 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003608:	683b      	ldr	r3, [r7, #0]
 800360a:	691a      	ldr	r2, [r3, #16]
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	2201      	movs	r2, #1
 8003614:	615a      	str	r2, [r3, #20]
}
 8003616:	bf00      	nop
 8003618:	3714      	adds	r7, #20
 800361a:	46bd      	mov	sp, r7
 800361c:	bc80      	pop	{r7}
 800361e:	4770      	bx	lr
 8003620:	40012c00 	.word	0x40012c00
 8003624:	40000400 	.word	0x40000400
 8003628:	40000800 	.word	0x40000800

0800362c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800362c:	b480      	push	{r7}
 800362e:	b087      	sub	sp, #28
 8003630:	af00      	add	r7, sp, #0
 8003632:	6078      	str	r0, [r7, #4]
 8003634:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	6a1b      	ldr	r3, [r3, #32]
 800363a:	f023 0201 	bic.w	r2, r3, #1
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	6a1b      	ldr	r3, [r3, #32]
 8003646:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	685b      	ldr	r3, [r3, #4]
 800364c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	699b      	ldr	r3, [r3, #24]
 8003652:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800365a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	f023 0303 	bic.w	r3, r3, #3
 8003662:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003664:	683b      	ldr	r3, [r7, #0]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	68fa      	ldr	r2, [r7, #12]
 800366a:	4313      	orrs	r3, r2
 800366c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800366e:	697b      	ldr	r3, [r7, #20]
 8003670:	f023 0302 	bic.w	r3, r3, #2
 8003674:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003676:	683b      	ldr	r3, [r7, #0]
 8003678:	689b      	ldr	r3, [r3, #8]
 800367a:	697a      	ldr	r2, [r7, #20]
 800367c:	4313      	orrs	r3, r2
 800367e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	4a1c      	ldr	r2, [pc, #112]	; (80036f4 <TIM_OC1_SetConfig+0xc8>)
 8003684:	4293      	cmp	r3, r2
 8003686:	d10c      	bne.n	80036a2 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003688:	697b      	ldr	r3, [r7, #20]
 800368a:	f023 0308 	bic.w	r3, r3, #8
 800368e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003690:	683b      	ldr	r3, [r7, #0]
 8003692:	68db      	ldr	r3, [r3, #12]
 8003694:	697a      	ldr	r2, [r7, #20]
 8003696:	4313      	orrs	r3, r2
 8003698:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800369a:	697b      	ldr	r3, [r7, #20]
 800369c:	f023 0304 	bic.w	r3, r3, #4
 80036a0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	4a13      	ldr	r2, [pc, #76]	; (80036f4 <TIM_OC1_SetConfig+0xc8>)
 80036a6:	4293      	cmp	r3, r2
 80036a8:	d111      	bne.n	80036ce <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80036aa:	693b      	ldr	r3, [r7, #16]
 80036ac:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80036b0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80036b2:	693b      	ldr	r3, [r7, #16]
 80036b4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80036b8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80036ba:	683b      	ldr	r3, [r7, #0]
 80036bc:	695b      	ldr	r3, [r3, #20]
 80036be:	693a      	ldr	r2, [r7, #16]
 80036c0:	4313      	orrs	r3, r2
 80036c2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80036c4:	683b      	ldr	r3, [r7, #0]
 80036c6:	699b      	ldr	r3, [r3, #24]
 80036c8:	693a      	ldr	r2, [r7, #16]
 80036ca:	4313      	orrs	r3, r2
 80036cc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	693a      	ldr	r2, [r7, #16]
 80036d2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	68fa      	ldr	r2, [r7, #12]
 80036d8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80036da:	683b      	ldr	r3, [r7, #0]
 80036dc:	685a      	ldr	r2, [r3, #4]
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	697a      	ldr	r2, [r7, #20]
 80036e6:	621a      	str	r2, [r3, #32]
}
 80036e8:	bf00      	nop
 80036ea:	371c      	adds	r7, #28
 80036ec:	46bd      	mov	sp, r7
 80036ee:	bc80      	pop	{r7}
 80036f0:	4770      	bx	lr
 80036f2:	bf00      	nop
 80036f4:	40012c00 	.word	0x40012c00

080036f8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80036f8:	b480      	push	{r7}
 80036fa:	b087      	sub	sp, #28
 80036fc:	af00      	add	r7, sp, #0
 80036fe:	6078      	str	r0, [r7, #4]
 8003700:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	6a1b      	ldr	r3, [r3, #32]
 8003706:	f023 0210 	bic.w	r2, r3, #16
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	6a1b      	ldr	r3, [r3, #32]
 8003712:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	685b      	ldr	r3, [r3, #4]
 8003718:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	699b      	ldr	r3, [r3, #24]
 800371e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003726:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800372e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003730:	683b      	ldr	r3, [r7, #0]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	021b      	lsls	r3, r3, #8
 8003736:	68fa      	ldr	r2, [r7, #12]
 8003738:	4313      	orrs	r3, r2
 800373a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800373c:	697b      	ldr	r3, [r7, #20]
 800373e:	f023 0320 	bic.w	r3, r3, #32
 8003742:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003744:	683b      	ldr	r3, [r7, #0]
 8003746:	689b      	ldr	r3, [r3, #8]
 8003748:	011b      	lsls	r3, r3, #4
 800374a:	697a      	ldr	r2, [r7, #20]
 800374c:	4313      	orrs	r3, r2
 800374e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	4a1d      	ldr	r2, [pc, #116]	; (80037c8 <TIM_OC2_SetConfig+0xd0>)
 8003754:	4293      	cmp	r3, r2
 8003756:	d10d      	bne.n	8003774 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003758:	697b      	ldr	r3, [r7, #20]
 800375a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800375e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003760:	683b      	ldr	r3, [r7, #0]
 8003762:	68db      	ldr	r3, [r3, #12]
 8003764:	011b      	lsls	r3, r3, #4
 8003766:	697a      	ldr	r2, [r7, #20]
 8003768:	4313      	orrs	r3, r2
 800376a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800376c:	697b      	ldr	r3, [r7, #20]
 800376e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003772:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	4a14      	ldr	r2, [pc, #80]	; (80037c8 <TIM_OC2_SetConfig+0xd0>)
 8003778:	4293      	cmp	r3, r2
 800377a:	d113      	bne.n	80037a4 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800377c:	693b      	ldr	r3, [r7, #16]
 800377e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003782:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003784:	693b      	ldr	r3, [r7, #16]
 8003786:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800378a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800378c:	683b      	ldr	r3, [r7, #0]
 800378e:	695b      	ldr	r3, [r3, #20]
 8003790:	009b      	lsls	r3, r3, #2
 8003792:	693a      	ldr	r2, [r7, #16]
 8003794:	4313      	orrs	r3, r2
 8003796:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003798:	683b      	ldr	r3, [r7, #0]
 800379a:	699b      	ldr	r3, [r3, #24]
 800379c:	009b      	lsls	r3, r3, #2
 800379e:	693a      	ldr	r2, [r7, #16]
 80037a0:	4313      	orrs	r3, r2
 80037a2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	693a      	ldr	r2, [r7, #16]
 80037a8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	68fa      	ldr	r2, [r7, #12]
 80037ae:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80037b0:	683b      	ldr	r3, [r7, #0]
 80037b2:	685a      	ldr	r2, [r3, #4]
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	697a      	ldr	r2, [r7, #20]
 80037bc:	621a      	str	r2, [r3, #32]
}
 80037be:	bf00      	nop
 80037c0:	371c      	adds	r7, #28
 80037c2:	46bd      	mov	sp, r7
 80037c4:	bc80      	pop	{r7}
 80037c6:	4770      	bx	lr
 80037c8:	40012c00 	.word	0x40012c00

080037cc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80037cc:	b480      	push	{r7}
 80037ce:	b087      	sub	sp, #28
 80037d0:	af00      	add	r7, sp, #0
 80037d2:	6078      	str	r0, [r7, #4]
 80037d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	6a1b      	ldr	r3, [r3, #32]
 80037da:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	6a1b      	ldr	r3, [r3, #32]
 80037e6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	685b      	ldr	r3, [r3, #4]
 80037ec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	69db      	ldr	r3, [r3, #28]
 80037f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80037fa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	f023 0303 	bic.w	r3, r3, #3
 8003802:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003804:	683b      	ldr	r3, [r7, #0]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	68fa      	ldr	r2, [r7, #12]
 800380a:	4313      	orrs	r3, r2
 800380c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800380e:	697b      	ldr	r3, [r7, #20]
 8003810:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003814:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003816:	683b      	ldr	r3, [r7, #0]
 8003818:	689b      	ldr	r3, [r3, #8]
 800381a:	021b      	lsls	r3, r3, #8
 800381c:	697a      	ldr	r2, [r7, #20]
 800381e:	4313      	orrs	r3, r2
 8003820:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	4a1d      	ldr	r2, [pc, #116]	; (800389c <TIM_OC3_SetConfig+0xd0>)
 8003826:	4293      	cmp	r3, r2
 8003828:	d10d      	bne.n	8003846 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800382a:	697b      	ldr	r3, [r7, #20]
 800382c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003830:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003832:	683b      	ldr	r3, [r7, #0]
 8003834:	68db      	ldr	r3, [r3, #12]
 8003836:	021b      	lsls	r3, r3, #8
 8003838:	697a      	ldr	r2, [r7, #20]
 800383a:	4313      	orrs	r3, r2
 800383c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800383e:	697b      	ldr	r3, [r7, #20]
 8003840:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003844:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	4a14      	ldr	r2, [pc, #80]	; (800389c <TIM_OC3_SetConfig+0xd0>)
 800384a:	4293      	cmp	r3, r2
 800384c:	d113      	bne.n	8003876 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800384e:	693b      	ldr	r3, [r7, #16]
 8003850:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003854:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003856:	693b      	ldr	r3, [r7, #16]
 8003858:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800385c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800385e:	683b      	ldr	r3, [r7, #0]
 8003860:	695b      	ldr	r3, [r3, #20]
 8003862:	011b      	lsls	r3, r3, #4
 8003864:	693a      	ldr	r2, [r7, #16]
 8003866:	4313      	orrs	r3, r2
 8003868:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800386a:	683b      	ldr	r3, [r7, #0]
 800386c:	699b      	ldr	r3, [r3, #24]
 800386e:	011b      	lsls	r3, r3, #4
 8003870:	693a      	ldr	r2, [r7, #16]
 8003872:	4313      	orrs	r3, r2
 8003874:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	693a      	ldr	r2, [r7, #16]
 800387a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	68fa      	ldr	r2, [r7, #12]
 8003880:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003882:	683b      	ldr	r3, [r7, #0]
 8003884:	685a      	ldr	r2, [r3, #4]
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	697a      	ldr	r2, [r7, #20]
 800388e:	621a      	str	r2, [r3, #32]
}
 8003890:	bf00      	nop
 8003892:	371c      	adds	r7, #28
 8003894:	46bd      	mov	sp, r7
 8003896:	bc80      	pop	{r7}
 8003898:	4770      	bx	lr
 800389a:	bf00      	nop
 800389c:	40012c00 	.word	0x40012c00

080038a0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80038a0:	b480      	push	{r7}
 80038a2:	b087      	sub	sp, #28
 80038a4:	af00      	add	r7, sp, #0
 80038a6:	6078      	str	r0, [r7, #4]
 80038a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	6a1b      	ldr	r3, [r3, #32]
 80038ae:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	6a1b      	ldr	r3, [r3, #32]
 80038ba:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	685b      	ldr	r3, [r3, #4]
 80038c0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	69db      	ldr	r3, [r3, #28]
 80038c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80038ce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80038d6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80038d8:	683b      	ldr	r3, [r7, #0]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	021b      	lsls	r3, r3, #8
 80038de:	68fa      	ldr	r2, [r7, #12]
 80038e0:	4313      	orrs	r3, r2
 80038e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80038e4:	693b      	ldr	r3, [r7, #16]
 80038e6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80038ea:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80038ec:	683b      	ldr	r3, [r7, #0]
 80038ee:	689b      	ldr	r3, [r3, #8]
 80038f0:	031b      	lsls	r3, r3, #12
 80038f2:	693a      	ldr	r2, [r7, #16]
 80038f4:	4313      	orrs	r3, r2
 80038f6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	4a0f      	ldr	r2, [pc, #60]	; (8003938 <TIM_OC4_SetConfig+0x98>)
 80038fc:	4293      	cmp	r3, r2
 80038fe:	d109      	bne.n	8003914 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003900:	697b      	ldr	r3, [r7, #20]
 8003902:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003906:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003908:	683b      	ldr	r3, [r7, #0]
 800390a:	695b      	ldr	r3, [r3, #20]
 800390c:	019b      	lsls	r3, r3, #6
 800390e:	697a      	ldr	r2, [r7, #20]
 8003910:	4313      	orrs	r3, r2
 8003912:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	697a      	ldr	r2, [r7, #20]
 8003918:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	68fa      	ldr	r2, [r7, #12]
 800391e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003920:	683b      	ldr	r3, [r7, #0]
 8003922:	685a      	ldr	r2, [r3, #4]
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	693a      	ldr	r2, [r7, #16]
 800392c:	621a      	str	r2, [r3, #32]
}
 800392e:	bf00      	nop
 8003930:	371c      	adds	r7, #28
 8003932:	46bd      	mov	sp, r7
 8003934:	bc80      	pop	{r7}
 8003936:	4770      	bx	lr
 8003938:	40012c00 	.word	0x40012c00

0800393c <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 800393c:	b580      	push	{r7, lr}
 800393e:	b086      	sub	sp, #24
 8003940:	af00      	add	r7, sp, #0
 8003942:	6078      	str	r0, [r7, #4]
 8003944:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	689b      	ldr	r3, [r3, #8]
 800394c:	617b      	str	r3, [r7, #20]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800394e:	697b      	ldr	r3, [r7, #20]
 8003950:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003954:	617b      	str	r3, [r7, #20]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8003956:	683b      	ldr	r3, [r7, #0]
 8003958:	685b      	ldr	r3, [r3, #4]
 800395a:	697a      	ldr	r2, [r7, #20]
 800395c:	4313      	orrs	r3, r2
 800395e:	617b      	str	r3, [r7, #20]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8003960:	697b      	ldr	r3, [r7, #20]
 8003962:	f023 0307 	bic.w	r3, r3, #7
 8003966:	617b      	str	r3, [r7, #20]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8003968:	683b      	ldr	r3, [r7, #0]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	697a      	ldr	r2, [r7, #20]
 800396e:	4313      	orrs	r3, r2
 8003970:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	697a      	ldr	r2, [r7, #20]
 8003978:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 800397a:	683b      	ldr	r3, [r7, #0]
 800397c:	685b      	ldr	r3, [r3, #4]
 800397e:	2b70      	cmp	r3, #112	; 0x70
 8003980:	d01a      	beq.n	80039b8 <TIM_SlaveTimer_SetConfig+0x7c>
 8003982:	2b70      	cmp	r3, #112	; 0x70
 8003984:	d860      	bhi.n	8003a48 <TIM_SlaveTimer_SetConfig+0x10c>
 8003986:	2b60      	cmp	r3, #96	; 0x60
 8003988:	d054      	beq.n	8003a34 <TIM_SlaveTimer_SetConfig+0xf8>
 800398a:	2b60      	cmp	r3, #96	; 0x60
 800398c:	d85c      	bhi.n	8003a48 <TIM_SlaveTimer_SetConfig+0x10c>
 800398e:	2b50      	cmp	r3, #80	; 0x50
 8003990:	d046      	beq.n	8003a20 <TIM_SlaveTimer_SetConfig+0xe4>
 8003992:	2b50      	cmp	r3, #80	; 0x50
 8003994:	d858      	bhi.n	8003a48 <TIM_SlaveTimer_SetConfig+0x10c>
 8003996:	2b40      	cmp	r3, #64	; 0x40
 8003998:	d019      	beq.n	80039ce <TIM_SlaveTimer_SetConfig+0x92>
 800399a:	2b40      	cmp	r3, #64	; 0x40
 800399c:	d854      	bhi.n	8003a48 <TIM_SlaveTimer_SetConfig+0x10c>
 800399e:	2b30      	cmp	r3, #48	; 0x30
 80039a0:	d054      	beq.n	8003a4c <TIM_SlaveTimer_SetConfig+0x110>
 80039a2:	2b30      	cmp	r3, #48	; 0x30
 80039a4:	d850      	bhi.n	8003a48 <TIM_SlaveTimer_SetConfig+0x10c>
 80039a6:	2b20      	cmp	r3, #32
 80039a8:	d050      	beq.n	8003a4c <TIM_SlaveTimer_SetConfig+0x110>
 80039aa:	2b20      	cmp	r3, #32
 80039ac:	d84c      	bhi.n	8003a48 <TIM_SlaveTimer_SetConfig+0x10c>
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d04c      	beq.n	8003a4c <TIM_SlaveTimer_SetConfig+0x110>
 80039b2:	2b10      	cmp	r3, #16
 80039b4:	d04a      	beq.n	8003a4c <TIM_SlaveTimer_SetConfig+0x110>
        assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
        break;
      }

    default:
      break;
 80039b6:	e047      	b.n	8003a48 <TIM_SlaveTimer_SetConfig+0x10c>
      TIM_ETR_SetConfig(htim->Instance,
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	6818      	ldr	r0, [r3, #0]
 80039bc:	683b      	ldr	r3, [r7, #0]
 80039be:	68d9      	ldr	r1, [r3, #12]
 80039c0:	683b      	ldr	r3, [r7, #0]
 80039c2:	689a      	ldr	r2, [r3, #8]
 80039c4:	683b      	ldr	r3, [r7, #0]
 80039c6:	691b      	ldr	r3, [r3, #16]
 80039c8:	f000 f9ca 	bl	8003d60 <TIM_ETR_SetConfig>
      break;
 80039cc:	e03f      	b.n	8003a4e <TIM_SlaveTimer_SetConfig+0x112>
      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 80039ce:	683b      	ldr	r3, [r7, #0]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	2b05      	cmp	r3, #5
 80039d4:	d101      	bne.n	80039da <TIM_SlaveTimer_SetConfig+0x9e>
        return HAL_ERROR;
 80039d6:	2301      	movs	r3, #1
 80039d8:	e03a      	b.n	8003a50 <TIM_SlaveTimer_SetConfig+0x114>
      tmpccer = htim->Instance->CCER;
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	6a1b      	ldr	r3, [r3, #32]
 80039e0:	613b      	str	r3, [r7, #16]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	6a1a      	ldr	r2, [r3, #32]
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	f022 0201 	bic.w	r2, r2, #1
 80039f0:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	699b      	ldr	r3, [r3, #24]
 80039f8:	60fb      	str	r3, [r7, #12]
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003a00:	60fb      	str	r3, [r7, #12]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8003a02:	683b      	ldr	r3, [r7, #0]
 8003a04:	691b      	ldr	r3, [r3, #16]
 8003a06:	011b      	lsls	r3, r3, #4
 8003a08:	68fa      	ldr	r2, [r7, #12]
 8003a0a:	4313      	orrs	r3, r2
 8003a0c:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCMR1 = tmpccmr1;
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	68fa      	ldr	r2, [r7, #12]
 8003a14:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	693a      	ldr	r2, [r7, #16]
 8003a1c:	621a      	str	r2, [r3, #32]
      break;
 8003a1e:	e016      	b.n	8003a4e <TIM_SlaveTimer_SetConfig+0x112>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	6818      	ldr	r0, [r3, #0]
 8003a24:	683b      	ldr	r3, [r7, #0]
 8003a26:	6899      	ldr	r1, [r3, #8]
 8003a28:	683b      	ldr	r3, [r7, #0]
 8003a2a:	691b      	ldr	r3, [r3, #16]
 8003a2c:	461a      	mov	r2, r3
 8003a2e:	f000 f86d 	bl	8003b0c <TIM_TI1_ConfigInputStage>
      break;
 8003a32:	e00c      	b.n	8003a4e <TIM_SlaveTimer_SetConfig+0x112>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	6818      	ldr	r0, [r3, #0]
 8003a38:	683b      	ldr	r3, [r7, #0]
 8003a3a:	6899      	ldr	r1, [r3, #8]
 8003a3c:	683b      	ldr	r3, [r7, #0]
 8003a3e:	691b      	ldr	r3, [r3, #16]
 8003a40:	461a      	mov	r2, r3
 8003a42:	f000 f8cd 	bl	8003be0 <TIM_TI2_ConfigInputStage>
      break;
 8003a46:	e002      	b.n	8003a4e <TIM_SlaveTimer_SetConfig+0x112>
      break;
 8003a48:	bf00      	nop
 8003a4a:	e000      	b.n	8003a4e <TIM_SlaveTimer_SetConfig+0x112>
        break;
 8003a4c:	bf00      	nop
  }
  return HAL_OK;
 8003a4e:	2300      	movs	r3, #0
}
 8003a50:	4618      	mov	r0, r3
 8003a52:	3718      	adds	r7, #24
 8003a54:	46bd      	mov	sp, r7
 8003a56:	bd80      	pop	{r7, pc}

08003a58 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8003a58:	b480      	push	{r7}
 8003a5a:	b087      	sub	sp, #28
 8003a5c:	af00      	add	r7, sp, #0
 8003a5e:	60f8      	str	r0, [r7, #12]
 8003a60:	60b9      	str	r1, [r7, #8]
 8003a62:	607a      	str	r2, [r7, #4]
 8003a64:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	6a1b      	ldr	r3, [r3, #32]
 8003a6a:	f023 0201 	bic.w	r2, r3, #1
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	699b      	ldr	r3, [r3, #24]
 8003a76:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	6a1b      	ldr	r3, [r3, #32]
 8003a7c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	4a1f      	ldr	r2, [pc, #124]	; (8003b00 <TIM_TI1_SetConfig+0xa8>)
 8003a82:	4293      	cmp	r3, r2
 8003a84:	d00b      	beq.n	8003a9e <TIM_TI1_SetConfig+0x46>
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a8c:	d007      	beq.n	8003a9e <TIM_TI1_SetConfig+0x46>
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	4a1c      	ldr	r2, [pc, #112]	; (8003b04 <TIM_TI1_SetConfig+0xac>)
 8003a92:	4293      	cmp	r3, r2
 8003a94:	d003      	beq.n	8003a9e <TIM_TI1_SetConfig+0x46>
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	4a1b      	ldr	r2, [pc, #108]	; (8003b08 <TIM_TI1_SetConfig+0xb0>)
 8003a9a:	4293      	cmp	r3, r2
 8003a9c:	d101      	bne.n	8003aa2 <TIM_TI1_SetConfig+0x4a>
 8003a9e:	2301      	movs	r3, #1
 8003aa0:	e000      	b.n	8003aa4 <TIM_TI1_SetConfig+0x4c>
 8003aa2:	2300      	movs	r3, #0
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d008      	beq.n	8003aba <TIM_TI1_SetConfig+0x62>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8003aa8:	697b      	ldr	r3, [r7, #20]
 8003aaa:	f023 0303 	bic.w	r3, r3, #3
 8003aae:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8003ab0:	697a      	ldr	r2, [r7, #20]
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	4313      	orrs	r3, r2
 8003ab6:	617b      	str	r3, [r7, #20]
 8003ab8:	e003      	b.n	8003ac2 <TIM_TI1_SetConfig+0x6a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8003aba:	697b      	ldr	r3, [r7, #20]
 8003abc:	f043 0301 	orr.w	r3, r3, #1
 8003ac0:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003ac2:	697b      	ldr	r3, [r7, #20]
 8003ac4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003ac8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8003aca:	683b      	ldr	r3, [r7, #0]
 8003acc:	011b      	lsls	r3, r3, #4
 8003ace:	b2db      	uxtb	r3, r3
 8003ad0:	697a      	ldr	r2, [r7, #20]
 8003ad2:	4313      	orrs	r3, r2
 8003ad4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003ad6:	693b      	ldr	r3, [r7, #16]
 8003ad8:	f023 030a 	bic.w	r3, r3, #10
 8003adc:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8003ade:	68bb      	ldr	r3, [r7, #8]
 8003ae0:	f003 030a 	and.w	r3, r3, #10
 8003ae4:	693a      	ldr	r2, [r7, #16]
 8003ae6:	4313      	orrs	r3, r2
 8003ae8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	697a      	ldr	r2, [r7, #20]
 8003aee:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	693a      	ldr	r2, [r7, #16]
 8003af4:	621a      	str	r2, [r3, #32]
}
 8003af6:	bf00      	nop
 8003af8:	371c      	adds	r7, #28
 8003afa:	46bd      	mov	sp, r7
 8003afc:	bc80      	pop	{r7}
 8003afe:	4770      	bx	lr
 8003b00:	40012c00 	.word	0x40012c00
 8003b04:	40000400 	.word	0x40000400
 8003b08:	40000800 	.word	0x40000800

08003b0c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003b0c:	b480      	push	{r7}
 8003b0e:	b087      	sub	sp, #28
 8003b10:	af00      	add	r7, sp, #0
 8003b12:	60f8      	str	r0, [r7, #12]
 8003b14:	60b9      	str	r1, [r7, #8]
 8003b16:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	6a1b      	ldr	r3, [r3, #32]
 8003b1c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	6a1b      	ldr	r3, [r3, #32]
 8003b22:	f023 0201 	bic.w	r2, r3, #1
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	699b      	ldr	r3, [r3, #24]
 8003b2e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003b30:	693b      	ldr	r3, [r7, #16]
 8003b32:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003b36:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	011b      	lsls	r3, r3, #4
 8003b3c:	693a      	ldr	r2, [r7, #16]
 8003b3e:	4313      	orrs	r3, r2
 8003b40:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003b42:	697b      	ldr	r3, [r7, #20]
 8003b44:	f023 030a 	bic.w	r3, r3, #10
 8003b48:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003b4a:	697a      	ldr	r2, [r7, #20]
 8003b4c:	68bb      	ldr	r3, [r7, #8]
 8003b4e:	4313      	orrs	r3, r2
 8003b50:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	693a      	ldr	r2, [r7, #16]
 8003b56:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	697a      	ldr	r2, [r7, #20]
 8003b5c:	621a      	str	r2, [r3, #32]
}
 8003b5e:	bf00      	nop
 8003b60:	371c      	adds	r7, #28
 8003b62:	46bd      	mov	sp, r7
 8003b64:	bc80      	pop	{r7}
 8003b66:	4770      	bx	lr

08003b68 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8003b68:	b480      	push	{r7}
 8003b6a:	b087      	sub	sp, #28
 8003b6c:	af00      	add	r7, sp, #0
 8003b6e:	60f8      	str	r0, [r7, #12]
 8003b70:	60b9      	str	r1, [r7, #8]
 8003b72:	607a      	str	r2, [r7, #4]
 8003b74:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	6a1b      	ldr	r3, [r3, #32]
 8003b7a:	f023 0210 	bic.w	r2, r3, #16
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	699b      	ldr	r3, [r3, #24]
 8003b86:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	6a1b      	ldr	r3, [r3, #32]
 8003b8c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8003b8e:	697b      	ldr	r3, [r7, #20]
 8003b90:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003b94:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	021b      	lsls	r3, r3, #8
 8003b9a:	697a      	ldr	r2, [r7, #20]
 8003b9c:	4313      	orrs	r3, r2
 8003b9e:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003ba0:	697b      	ldr	r3, [r7, #20]
 8003ba2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003ba6:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8003ba8:	683b      	ldr	r3, [r7, #0]
 8003baa:	031b      	lsls	r3, r3, #12
 8003bac:	b29b      	uxth	r3, r3
 8003bae:	697a      	ldr	r2, [r7, #20]
 8003bb0:	4313      	orrs	r3, r2
 8003bb2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003bb4:	693b      	ldr	r3, [r7, #16]
 8003bb6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003bba:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8003bbc:	68bb      	ldr	r3, [r7, #8]
 8003bbe:	011b      	lsls	r3, r3, #4
 8003bc0:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8003bc4:	693a      	ldr	r2, [r7, #16]
 8003bc6:	4313      	orrs	r3, r2
 8003bc8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	697a      	ldr	r2, [r7, #20]
 8003bce:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	693a      	ldr	r2, [r7, #16]
 8003bd4:	621a      	str	r2, [r3, #32]
}
 8003bd6:	bf00      	nop
 8003bd8:	371c      	adds	r7, #28
 8003bda:	46bd      	mov	sp, r7
 8003bdc:	bc80      	pop	{r7}
 8003bde:	4770      	bx	lr

08003be0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003be0:	b480      	push	{r7}
 8003be2:	b087      	sub	sp, #28
 8003be4:	af00      	add	r7, sp, #0
 8003be6:	60f8      	str	r0, [r7, #12]
 8003be8:	60b9      	str	r1, [r7, #8]
 8003bea:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	6a1b      	ldr	r3, [r3, #32]
 8003bf0:	f023 0210 	bic.w	r2, r3, #16
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	699b      	ldr	r3, [r3, #24]
 8003bfc:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	6a1b      	ldr	r3, [r3, #32]
 8003c02:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003c04:	697b      	ldr	r3, [r7, #20]
 8003c06:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003c0a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	031b      	lsls	r3, r3, #12
 8003c10:	697a      	ldr	r2, [r7, #20]
 8003c12:	4313      	orrs	r3, r2
 8003c14:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003c16:	693b      	ldr	r3, [r7, #16]
 8003c18:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003c1c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003c1e:	68bb      	ldr	r3, [r7, #8]
 8003c20:	011b      	lsls	r3, r3, #4
 8003c22:	693a      	ldr	r2, [r7, #16]
 8003c24:	4313      	orrs	r3, r2
 8003c26:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	697a      	ldr	r2, [r7, #20]
 8003c2c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	693a      	ldr	r2, [r7, #16]
 8003c32:	621a      	str	r2, [r3, #32]
}
 8003c34:	bf00      	nop
 8003c36:	371c      	adds	r7, #28
 8003c38:	46bd      	mov	sp, r7
 8003c3a:	bc80      	pop	{r7}
 8003c3c:	4770      	bx	lr

08003c3e <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8003c3e:	b480      	push	{r7}
 8003c40:	b087      	sub	sp, #28
 8003c42:	af00      	add	r7, sp, #0
 8003c44:	60f8      	str	r0, [r7, #12]
 8003c46:	60b9      	str	r1, [r7, #8]
 8003c48:	607a      	str	r2, [r7, #4]
 8003c4a:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	6a1b      	ldr	r3, [r3, #32]
 8003c50:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	69db      	ldr	r3, [r3, #28]
 8003c5c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	6a1b      	ldr	r3, [r3, #32]
 8003c62:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8003c64:	697b      	ldr	r3, [r7, #20]
 8003c66:	f023 0303 	bic.w	r3, r3, #3
 8003c6a:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8003c6c:	697a      	ldr	r2, [r7, #20]
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	4313      	orrs	r3, r2
 8003c72:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8003c74:	697b      	ldr	r3, [r7, #20]
 8003c76:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003c7a:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8003c7c:	683b      	ldr	r3, [r7, #0]
 8003c7e:	011b      	lsls	r3, r3, #4
 8003c80:	b2db      	uxtb	r3, r3
 8003c82:	697a      	ldr	r2, [r7, #20]
 8003c84:	4313      	orrs	r3, r2
 8003c86:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P);
 8003c88:	693b      	ldr	r3, [r7, #16]
 8003c8a:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003c8e:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & TIM_CCER_CC3P);
 8003c90:	68bb      	ldr	r3, [r7, #8]
 8003c92:	021b      	lsls	r3, r3, #8
 8003c94:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003c98:	693a      	ldr	r2, [r7, #16]
 8003c9a:	4313      	orrs	r3, r2
 8003c9c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	697a      	ldr	r2, [r7, #20]
 8003ca2:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	693a      	ldr	r2, [r7, #16]
 8003ca8:	621a      	str	r2, [r3, #32]
}
 8003caa:	bf00      	nop
 8003cac:	371c      	adds	r7, #28
 8003cae:	46bd      	mov	sp, r7
 8003cb0:	bc80      	pop	{r7}
 8003cb2:	4770      	bx	lr

08003cb4 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8003cb4:	b480      	push	{r7}
 8003cb6:	b087      	sub	sp, #28
 8003cb8:	af00      	add	r7, sp, #0
 8003cba:	60f8      	str	r0, [r7, #12]
 8003cbc:	60b9      	str	r1, [r7, #8]
 8003cbe:	607a      	str	r2, [r7, #4]
 8003cc0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	6a1b      	ldr	r3, [r3, #32]
 8003cc6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	69db      	ldr	r3, [r3, #28]
 8003cd2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	6a1b      	ldr	r3, [r3, #32]
 8003cd8:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8003cda:	697b      	ldr	r3, [r7, #20]
 8003cdc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003ce0:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	021b      	lsls	r3, r3, #8
 8003ce6:	697a      	ldr	r2, [r7, #20]
 8003ce8:	4313      	orrs	r3, r2
 8003cea:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8003cec:	697b      	ldr	r3, [r7, #20]
 8003cee:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003cf2:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8003cf4:	683b      	ldr	r3, [r7, #0]
 8003cf6:	031b      	lsls	r3, r3, #12
 8003cf8:	b29b      	uxth	r3, r3
 8003cfa:	697a      	ldr	r2, [r7, #20]
 8003cfc:	4313      	orrs	r3, r2
 8003cfe:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P);
 8003d00:	693b      	ldr	r3, [r7, #16]
 8003d02:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003d06:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & TIM_CCER_CC4P);
 8003d08:	68bb      	ldr	r3, [r7, #8]
 8003d0a:	031b      	lsls	r3, r3, #12
 8003d0c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003d10:	693a      	ldr	r2, [r7, #16]
 8003d12:	4313      	orrs	r3, r2
 8003d14:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	697a      	ldr	r2, [r7, #20]
 8003d1a:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	693a      	ldr	r2, [r7, #16]
 8003d20:	621a      	str	r2, [r3, #32]
}
 8003d22:	bf00      	nop
 8003d24:	371c      	adds	r7, #28
 8003d26:	46bd      	mov	sp, r7
 8003d28:	bc80      	pop	{r7}
 8003d2a:	4770      	bx	lr

08003d2c <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003d2c:	b480      	push	{r7}
 8003d2e:	b085      	sub	sp, #20
 8003d30:	af00      	add	r7, sp, #0
 8003d32:	6078      	str	r0, [r7, #4]
 8003d34:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	689b      	ldr	r3, [r3, #8]
 8003d3a:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d42:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003d44:	683a      	ldr	r2, [r7, #0]
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	4313      	orrs	r3, r2
 8003d4a:	f043 0307 	orr.w	r3, r3, #7
 8003d4e:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	68fa      	ldr	r2, [r7, #12]
 8003d54:	609a      	str	r2, [r3, #8]
}
 8003d56:	bf00      	nop
 8003d58:	3714      	adds	r7, #20
 8003d5a:	46bd      	mov	sp, r7
 8003d5c:	bc80      	pop	{r7}
 8003d5e:	4770      	bx	lr

08003d60 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003d60:	b480      	push	{r7}
 8003d62:	b087      	sub	sp, #28
 8003d64:	af00      	add	r7, sp, #0
 8003d66:	60f8      	str	r0, [r7, #12]
 8003d68:	60b9      	str	r1, [r7, #8]
 8003d6a:	607a      	str	r2, [r7, #4]
 8003d6c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	689b      	ldr	r3, [r3, #8]
 8003d72:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003d74:	697b      	ldr	r3, [r7, #20]
 8003d76:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003d7a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003d7c:	683b      	ldr	r3, [r7, #0]
 8003d7e:	021a      	lsls	r2, r3, #8
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	431a      	orrs	r2, r3
 8003d84:	68bb      	ldr	r3, [r7, #8]
 8003d86:	4313      	orrs	r3, r2
 8003d88:	697a      	ldr	r2, [r7, #20]
 8003d8a:	4313      	orrs	r3, r2
 8003d8c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	697a      	ldr	r2, [r7, #20]
 8003d92:	609a      	str	r2, [r3, #8]
}
 8003d94:	bf00      	nop
 8003d96:	371c      	adds	r7, #28
 8003d98:	46bd      	mov	sp, r7
 8003d9a:	bc80      	pop	{r7}
 8003d9c:	4770      	bx	lr

08003d9e <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003d9e:	b480      	push	{r7}
 8003da0:	b087      	sub	sp, #28
 8003da2:	af00      	add	r7, sp, #0
 8003da4:	60f8      	str	r0, [r7, #12]
 8003da6:	60b9      	str	r1, [r7, #8]
 8003da8:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003daa:	68bb      	ldr	r3, [r7, #8]
 8003dac:	f003 031f 	and.w	r3, r3, #31
 8003db0:	2201      	movs	r2, #1
 8003db2:	fa02 f303 	lsl.w	r3, r2, r3
 8003db6:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	6a1a      	ldr	r2, [r3, #32]
 8003dbc:	697b      	ldr	r3, [r7, #20]
 8003dbe:	43db      	mvns	r3, r3
 8003dc0:	401a      	ands	r2, r3
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	6a1a      	ldr	r2, [r3, #32]
 8003dca:	68bb      	ldr	r3, [r7, #8]
 8003dcc:	f003 031f 	and.w	r3, r3, #31
 8003dd0:	6879      	ldr	r1, [r7, #4]
 8003dd2:	fa01 f303 	lsl.w	r3, r1, r3
 8003dd6:	431a      	orrs	r2, r3
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	621a      	str	r2, [r3, #32]
}
 8003ddc:	bf00      	nop
 8003dde:	371c      	adds	r7, #28
 8003de0:	46bd      	mov	sp, r7
 8003de2:	bc80      	pop	{r7}
 8003de4:	4770      	bx	lr
	...

08003de8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003de8:	b480      	push	{r7}
 8003dea:	b085      	sub	sp, #20
 8003dec:	af00      	add	r7, sp, #0
 8003dee:	6078      	str	r0, [r7, #4]
 8003df0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003df8:	2b01      	cmp	r3, #1
 8003dfa:	d101      	bne.n	8003e00 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003dfc:	2302      	movs	r3, #2
 8003dfe:	e046      	b.n	8003e8e <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	2201      	movs	r2, #1
 8003e04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	2202      	movs	r2, #2
 8003e0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	685b      	ldr	r3, [r3, #4]
 8003e16:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	689b      	ldr	r3, [r3, #8]
 8003e1e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e26:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003e28:	683b      	ldr	r3, [r7, #0]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	68fa      	ldr	r2, [r7, #12]
 8003e2e:	4313      	orrs	r3, r2
 8003e30:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	68fa      	ldr	r2, [r7, #12]
 8003e38:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	4a16      	ldr	r2, [pc, #88]	; (8003e98 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8003e40:	4293      	cmp	r3, r2
 8003e42:	d00e      	beq.n	8003e62 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e4c:	d009      	beq.n	8003e62 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	4a12      	ldr	r2, [pc, #72]	; (8003e9c <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8003e54:	4293      	cmp	r3, r2
 8003e56:	d004      	beq.n	8003e62 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	4a10      	ldr	r2, [pc, #64]	; (8003ea0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8003e5e:	4293      	cmp	r3, r2
 8003e60:	d10c      	bne.n	8003e7c <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003e62:	68bb      	ldr	r3, [r7, #8]
 8003e64:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003e68:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003e6a:	683b      	ldr	r3, [r7, #0]
 8003e6c:	685b      	ldr	r3, [r3, #4]
 8003e6e:	68ba      	ldr	r2, [r7, #8]
 8003e70:	4313      	orrs	r3, r2
 8003e72:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	68ba      	ldr	r2, [r7, #8]
 8003e7a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	2201      	movs	r2, #1
 8003e80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	2200      	movs	r2, #0
 8003e88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003e8c:	2300      	movs	r3, #0
}
 8003e8e:	4618      	mov	r0, r3
 8003e90:	3714      	adds	r7, #20
 8003e92:	46bd      	mov	sp, r7
 8003e94:	bc80      	pop	{r7}
 8003e96:	4770      	bx	lr
 8003e98:	40012c00 	.word	0x40012c00
 8003e9c:	40000400 	.word	0x40000400
 8003ea0:	40000800 	.word	0x40000800

08003ea4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8003ea4:	b480      	push	{r7}
 8003ea6:	b085      	sub	sp, #20
 8003ea8:	af00      	add	r7, sp, #0
 8003eaa:	6078      	str	r0, [r7, #4]
 8003eac:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8003eae:	2300      	movs	r3, #0
 8003eb0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003eb8:	2b01      	cmp	r3, #1
 8003eba:	d101      	bne.n	8003ec0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8003ebc:	2302      	movs	r3, #2
 8003ebe:	e03d      	b.n	8003f3c <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	2201      	movs	r2, #1
 8003ec4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8003ece:	683b      	ldr	r3, [r7, #0]
 8003ed0:	68db      	ldr	r3, [r3, #12]
 8003ed2:	4313      	orrs	r3, r2
 8003ed4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003edc:	683b      	ldr	r3, [r7, #0]
 8003ede:	689b      	ldr	r3, [r3, #8]
 8003ee0:	4313      	orrs	r3, r2
 8003ee2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8003eea:	683b      	ldr	r3, [r7, #0]
 8003eec:	685b      	ldr	r3, [r3, #4]
 8003eee:	4313      	orrs	r3, r2
 8003ef0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8003ef8:	683b      	ldr	r3, [r7, #0]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	4313      	orrs	r3, r2
 8003efe:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003f06:	683b      	ldr	r3, [r7, #0]
 8003f08:	691b      	ldr	r3, [r3, #16]
 8003f0a:	4313      	orrs	r3, r2
 8003f0c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8003f14:	683b      	ldr	r3, [r7, #0]
 8003f16:	695b      	ldr	r3, [r3, #20]
 8003f18:	4313      	orrs	r3, r2
 8003f1a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8003f22:	683b      	ldr	r3, [r7, #0]
 8003f24:	69db      	ldr	r3, [r3, #28]
 8003f26:	4313      	orrs	r3, r2
 8003f28:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	68fa      	ldr	r2, [r7, #12]
 8003f30:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	2200      	movs	r2, #0
 8003f36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003f3a:	2300      	movs	r3, #0
}
 8003f3c:	4618      	mov	r0, r3
 8003f3e:	3714      	adds	r7, #20
 8003f40:	46bd      	mov	sp, r7
 8003f42:	bc80      	pop	{r7}
 8003f44:	4770      	bx	lr

08003f46 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003f46:	b480      	push	{r7}
 8003f48:	b083      	sub	sp, #12
 8003f4a:	af00      	add	r7, sp, #0
 8003f4c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003f4e:	bf00      	nop
 8003f50:	370c      	adds	r7, #12
 8003f52:	46bd      	mov	sp, r7
 8003f54:	bc80      	pop	{r7}
 8003f56:	4770      	bx	lr

08003f58 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003f58:	b480      	push	{r7}
 8003f5a:	b083      	sub	sp, #12
 8003f5c:	af00      	add	r7, sp, #0
 8003f5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003f60:	bf00      	nop
 8003f62:	370c      	adds	r7, #12
 8003f64:	46bd      	mov	sp, r7
 8003f66:	bc80      	pop	{r7}
 8003f68:	4770      	bx	lr

08003f6a <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003f6a:	b580      	push	{r7, lr}
 8003f6c:	b082      	sub	sp, #8
 8003f6e:	af00      	add	r7, sp, #0
 8003f70:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d101      	bne.n	8003f7c <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003f78:	2301      	movs	r3, #1
 8003f7a:	e03f      	b.n	8003ffc <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f82:	b2db      	uxtb	r3, r3
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d106      	bne.n	8003f96 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	2200      	movs	r2, #0
 8003f8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003f90:	6878      	ldr	r0, [r7, #4]
 8003f92:	f7fc fd4d 	bl	8000a30 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	2224      	movs	r2, #36	; 0x24
 8003f9a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	68da      	ldr	r2, [r3, #12]
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003fac:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003fae:	6878      	ldr	r0, [r7, #4]
 8003fb0:	f000 f904 	bl	80041bc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	691a      	ldr	r2, [r3, #16]
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003fc2:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	695a      	ldr	r2, [r3, #20]
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003fd2:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	68da      	ldr	r2, [r3, #12]
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003fe2:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	2200      	movs	r2, #0
 8003fe8:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	2220      	movs	r2, #32
 8003fee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	2220      	movs	r2, #32
 8003ff6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003ffa:	2300      	movs	r3, #0
}
 8003ffc:	4618      	mov	r0, r3
 8003ffe:	3708      	adds	r7, #8
 8004000:	46bd      	mov	sp, r7
 8004002:	bd80      	pop	{r7, pc}

08004004 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004004:	b580      	push	{r7, lr}
 8004006:	b08a      	sub	sp, #40	; 0x28
 8004008:	af02      	add	r7, sp, #8
 800400a:	60f8      	str	r0, [r7, #12]
 800400c:	60b9      	str	r1, [r7, #8]
 800400e:	603b      	str	r3, [r7, #0]
 8004010:	4613      	mov	r3, r2
 8004012:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004014:	2300      	movs	r3, #0
 8004016:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800401e:	b2db      	uxtb	r3, r3
 8004020:	2b20      	cmp	r3, #32
 8004022:	d17c      	bne.n	800411e <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004024:	68bb      	ldr	r3, [r7, #8]
 8004026:	2b00      	cmp	r3, #0
 8004028:	d002      	beq.n	8004030 <HAL_UART_Transmit+0x2c>
 800402a:	88fb      	ldrh	r3, [r7, #6]
 800402c:	2b00      	cmp	r3, #0
 800402e:	d101      	bne.n	8004034 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004030:	2301      	movs	r3, #1
 8004032:	e075      	b.n	8004120 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800403a:	2b01      	cmp	r3, #1
 800403c:	d101      	bne.n	8004042 <HAL_UART_Transmit+0x3e>
 800403e:	2302      	movs	r3, #2
 8004040:	e06e      	b.n	8004120 <HAL_UART_Transmit+0x11c>
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	2201      	movs	r2, #1
 8004046:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	2200      	movs	r2, #0
 800404e:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	2221      	movs	r2, #33	; 0x21
 8004054:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004058:	f7fc ff9c 	bl	8000f94 <HAL_GetTick>
 800405c:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	88fa      	ldrh	r2, [r7, #6]
 8004062:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	88fa      	ldrh	r2, [r7, #6]
 8004068:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	689b      	ldr	r3, [r3, #8]
 800406e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004072:	d108      	bne.n	8004086 <HAL_UART_Transmit+0x82>
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	691b      	ldr	r3, [r3, #16]
 8004078:	2b00      	cmp	r3, #0
 800407a:	d104      	bne.n	8004086 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800407c:	2300      	movs	r3, #0
 800407e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004080:	68bb      	ldr	r3, [r7, #8]
 8004082:	61bb      	str	r3, [r7, #24]
 8004084:	e003      	b.n	800408e <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8004086:	68bb      	ldr	r3, [r7, #8]
 8004088:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800408a:	2300      	movs	r3, #0
 800408c:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	2200      	movs	r2, #0
 8004092:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8004096:	e02a      	b.n	80040ee <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004098:	683b      	ldr	r3, [r7, #0]
 800409a:	9300      	str	r3, [sp, #0]
 800409c:	697b      	ldr	r3, [r7, #20]
 800409e:	2200      	movs	r2, #0
 80040a0:	2180      	movs	r1, #128	; 0x80
 80040a2:	68f8      	ldr	r0, [r7, #12]
 80040a4:	f000 f840 	bl	8004128 <UART_WaitOnFlagUntilTimeout>
 80040a8:	4603      	mov	r3, r0
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d001      	beq.n	80040b2 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80040ae:	2303      	movs	r3, #3
 80040b0:	e036      	b.n	8004120 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80040b2:	69fb      	ldr	r3, [r7, #28]
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d10b      	bne.n	80040d0 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80040b8:	69bb      	ldr	r3, [r7, #24]
 80040ba:	881b      	ldrh	r3, [r3, #0]
 80040bc:	461a      	mov	r2, r3
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80040c6:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80040c8:	69bb      	ldr	r3, [r7, #24]
 80040ca:	3302      	adds	r3, #2
 80040cc:	61bb      	str	r3, [r7, #24]
 80040ce:	e007      	b.n	80040e0 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80040d0:	69fb      	ldr	r3, [r7, #28]
 80040d2:	781a      	ldrb	r2, [r3, #0]
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80040da:	69fb      	ldr	r3, [r7, #28]
 80040dc:	3301      	adds	r3, #1
 80040de:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80040e4:	b29b      	uxth	r3, r3
 80040e6:	3b01      	subs	r3, #1
 80040e8:	b29a      	uxth	r2, r3
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80040f2:	b29b      	uxth	r3, r3
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d1cf      	bne.n	8004098 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80040f8:	683b      	ldr	r3, [r7, #0]
 80040fa:	9300      	str	r3, [sp, #0]
 80040fc:	697b      	ldr	r3, [r7, #20]
 80040fe:	2200      	movs	r2, #0
 8004100:	2140      	movs	r1, #64	; 0x40
 8004102:	68f8      	ldr	r0, [r7, #12]
 8004104:	f000 f810 	bl	8004128 <UART_WaitOnFlagUntilTimeout>
 8004108:	4603      	mov	r3, r0
 800410a:	2b00      	cmp	r3, #0
 800410c:	d001      	beq.n	8004112 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800410e:	2303      	movs	r3, #3
 8004110:	e006      	b.n	8004120 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	2220      	movs	r2, #32
 8004116:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800411a:	2300      	movs	r3, #0
 800411c:	e000      	b.n	8004120 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800411e:	2302      	movs	r3, #2
  }
}
 8004120:	4618      	mov	r0, r3
 8004122:	3720      	adds	r7, #32
 8004124:	46bd      	mov	sp, r7
 8004126:	bd80      	pop	{r7, pc}

08004128 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8004128:	b580      	push	{r7, lr}
 800412a:	b084      	sub	sp, #16
 800412c:	af00      	add	r7, sp, #0
 800412e:	60f8      	str	r0, [r7, #12]
 8004130:	60b9      	str	r1, [r7, #8]
 8004132:	603b      	str	r3, [r7, #0]
 8004134:	4613      	mov	r3, r2
 8004136:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004138:	e02c      	b.n	8004194 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800413a:	69bb      	ldr	r3, [r7, #24]
 800413c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004140:	d028      	beq.n	8004194 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004142:	69bb      	ldr	r3, [r7, #24]
 8004144:	2b00      	cmp	r3, #0
 8004146:	d007      	beq.n	8004158 <UART_WaitOnFlagUntilTimeout+0x30>
 8004148:	f7fc ff24 	bl	8000f94 <HAL_GetTick>
 800414c:	4602      	mov	r2, r0
 800414e:	683b      	ldr	r3, [r7, #0]
 8004150:	1ad3      	subs	r3, r2, r3
 8004152:	69ba      	ldr	r2, [r7, #24]
 8004154:	429a      	cmp	r2, r3
 8004156:	d21d      	bcs.n	8004194 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	68da      	ldr	r2, [r3, #12]
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004166:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	695a      	ldr	r2, [r3, #20]
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	f022 0201 	bic.w	r2, r2, #1
 8004176:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	2220      	movs	r2, #32
 800417c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	2220      	movs	r2, #32
 8004184:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	2200      	movs	r2, #0
 800418c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8004190:	2303      	movs	r3, #3
 8004192:	e00f      	b.n	80041b4 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	681a      	ldr	r2, [r3, #0]
 800419a:	68bb      	ldr	r3, [r7, #8]
 800419c:	4013      	ands	r3, r2
 800419e:	68ba      	ldr	r2, [r7, #8]
 80041a0:	429a      	cmp	r2, r3
 80041a2:	bf0c      	ite	eq
 80041a4:	2301      	moveq	r3, #1
 80041a6:	2300      	movne	r3, #0
 80041a8:	b2db      	uxtb	r3, r3
 80041aa:	461a      	mov	r2, r3
 80041ac:	79fb      	ldrb	r3, [r7, #7]
 80041ae:	429a      	cmp	r2, r3
 80041b0:	d0c3      	beq.n	800413a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80041b2:	2300      	movs	r3, #0
}
 80041b4:	4618      	mov	r0, r3
 80041b6:	3710      	adds	r7, #16
 80041b8:	46bd      	mov	sp, r7
 80041ba:	bd80      	pop	{r7, pc}

080041bc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80041bc:	b580      	push	{r7, lr}
 80041be:	b084      	sub	sp, #16
 80041c0:	af00      	add	r7, sp, #0
 80041c2:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	691b      	ldr	r3, [r3, #16]
 80041ca:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	68da      	ldr	r2, [r3, #12]
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	430a      	orrs	r2, r1
 80041d8:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	689a      	ldr	r2, [r3, #8]
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	691b      	ldr	r3, [r3, #16]
 80041e2:	431a      	orrs	r2, r3
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	695b      	ldr	r3, [r3, #20]
 80041e8:	4313      	orrs	r3, r2
 80041ea:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	68db      	ldr	r3, [r3, #12]
 80041f2:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80041f6:	f023 030c 	bic.w	r3, r3, #12
 80041fa:	687a      	ldr	r2, [r7, #4]
 80041fc:	6812      	ldr	r2, [r2, #0]
 80041fe:	68b9      	ldr	r1, [r7, #8]
 8004200:	430b      	orrs	r3, r1
 8004202:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	695b      	ldr	r3, [r3, #20]
 800420a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	699a      	ldr	r2, [r3, #24]
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	430a      	orrs	r2, r1
 8004218:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	4a2c      	ldr	r2, [pc, #176]	; (80042d0 <UART_SetConfig+0x114>)
 8004220:	4293      	cmp	r3, r2
 8004222:	d103      	bne.n	800422c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8004224:	f7fd ffda 	bl	80021dc <HAL_RCC_GetPCLK2Freq>
 8004228:	60f8      	str	r0, [r7, #12]
 800422a:	e002      	b.n	8004232 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800422c:	f7fd ffc2 	bl	80021b4 <HAL_RCC_GetPCLK1Freq>
 8004230:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004232:	68fa      	ldr	r2, [r7, #12]
 8004234:	4613      	mov	r3, r2
 8004236:	009b      	lsls	r3, r3, #2
 8004238:	4413      	add	r3, r2
 800423a:	009a      	lsls	r2, r3, #2
 800423c:	441a      	add	r2, r3
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	685b      	ldr	r3, [r3, #4]
 8004242:	009b      	lsls	r3, r3, #2
 8004244:	fbb2 f3f3 	udiv	r3, r2, r3
 8004248:	4a22      	ldr	r2, [pc, #136]	; (80042d4 <UART_SetConfig+0x118>)
 800424a:	fba2 2303 	umull	r2, r3, r2, r3
 800424e:	095b      	lsrs	r3, r3, #5
 8004250:	0119      	lsls	r1, r3, #4
 8004252:	68fa      	ldr	r2, [r7, #12]
 8004254:	4613      	mov	r3, r2
 8004256:	009b      	lsls	r3, r3, #2
 8004258:	4413      	add	r3, r2
 800425a:	009a      	lsls	r2, r3, #2
 800425c:	441a      	add	r2, r3
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	685b      	ldr	r3, [r3, #4]
 8004262:	009b      	lsls	r3, r3, #2
 8004264:	fbb2 f2f3 	udiv	r2, r2, r3
 8004268:	4b1a      	ldr	r3, [pc, #104]	; (80042d4 <UART_SetConfig+0x118>)
 800426a:	fba3 0302 	umull	r0, r3, r3, r2
 800426e:	095b      	lsrs	r3, r3, #5
 8004270:	2064      	movs	r0, #100	; 0x64
 8004272:	fb00 f303 	mul.w	r3, r0, r3
 8004276:	1ad3      	subs	r3, r2, r3
 8004278:	011b      	lsls	r3, r3, #4
 800427a:	3332      	adds	r3, #50	; 0x32
 800427c:	4a15      	ldr	r2, [pc, #84]	; (80042d4 <UART_SetConfig+0x118>)
 800427e:	fba2 2303 	umull	r2, r3, r2, r3
 8004282:	095b      	lsrs	r3, r3, #5
 8004284:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004288:	4419      	add	r1, r3
 800428a:	68fa      	ldr	r2, [r7, #12]
 800428c:	4613      	mov	r3, r2
 800428e:	009b      	lsls	r3, r3, #2
 8004290:	4413      	add	r3, r2
 8004292:	009a      	lsls	r2, r3, #2
 8004294:	441a      	add	r2, r3
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	685b      	ldr	r3, [r3, #4]
 800429a:	009b      	lsls	r3, r3, #2
 800429c:	fbb2 f2f3 	udiv	r2, r2, r3
 80042a0:	4b0c      	ldr	r3, [pc, #48]	; (80042d4 <UART_SetConfig+0x118>)
 80042a2:	fba3 0302 	umull	r0, r3, r3, r2
 80042a6:	095b      	lsrs	r3, r3, #5
 80042a8:	2064      	movs	r0, #100	; 0x64
 80042aa:	fb00 f303 	mul.w	r3, r0, r3
 80042ae:	1ad3      	subs	r3, r2, r3
 80042b0:	011b      	lsls	r3, r3, #4
 80042b2:	3332      	adds	r3, #50	; 0x32
 80042b4:	4a07      	ldr	r2, [pc, #28]	; (80042d4 <UART_SetConfig+0x118>)
 80042b6:	fba2 2303 	umull	r2, r3, r2, r3
 80042ba:	095b      	lsrs	r3, r3, #5
 80042bc:	f003 020f 	and.w	r2, r3, #15
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	440a      	add	r2, r1
 80042c6:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80042c8:	bf00      	nop
 80042ca:	3710      	adds	r7, #16
 80042cc:	46bd      	mov	sp, r7
 80042ce:	bd80      	pop	{r7, pc}
 80042d0:	40013800 	.word	0x40013800
 80042d4:	51eb851f 	.word	0x51eb851f

080042d8 <__errno>:
 80042d8:	4b01      	ldr	r3, [pc, #4]	; (80042e0 <__errno+0x8>)
 80042da:	6818      	ldr	r0, [r3, #0]
 80042dc:	4770      	bx	lr
 80042de:	bf00      	nop
 80042e0:	2000000c 	.word	0x2000000c

080042e4 <__libc_init_array>:
 80042e4:	b570      	push	{r4, r5, r6, lr}
 80042e6:	2600      	movs	r6, #0
 80042e8:	4d0c      	ldr	r5, [pc, #48]	; (800431c <__libc_init_array+0x38>)
 80042ea:	4c0d      	ldr	r4, [pc, #52]	; (8004320 <__libc_init_array+0x3c>)
 80042ec:	1b64      	subs	r4, r4, r5
 80042ee:	10a4      	asrs	r4, r4, #2
 80042f0:	42a6      	cmp	r6, r4
 80042f2:	d109      	bne.n	8004308 <__libc_init_array+0x24>
 80042f4:	f000 fc5c 	bl	8004bb0 <_init>
 80042f8:	2600      	movs	r6, #0
 80042fa:	4d0a      	ldr	r5, [pc, #40]	; (8004324 <__libc_init_array+0x40>)
 80042fc:	4c0a      	ldr	r4, [pc, #40]	; (8004328 <__libc_init_array+0x44>)
 80042fe:	1b64      	subs	r4, r4, r5
 8004300:	10a4      	asrs	r4, r4, #2
 8004302:	42a6      	cmp	r6, r4
 8004304:	d105      	bne.n	8004312 <__libc_init_array+0x2e>
 8004306:	bd70      	pop	{r4, r5, r6, pc}
 8004308:	f855 3b04 	ldr.w	r3, [r5], #4
 800430c:	4798      	blx	r3
 800430e:	3601      	adds	r6, #1
 8004310:	e7ee      	b.n	80042f0 <__libc_init_array+0xc>
 8004312:	f855 3b04 	ldr.w	r3, [r5], #4
 8004316:	4798      	blx	r3
 8004318:	3601      	adds	r6, #1
 800431a:	e7f2      	b.n	8004302 <__libc_init_array+0x1e>
 800431c:	08004c30 	.word	0x08004c30
 8004320:	08004c30 	.word	0x08004c30
 8004324:	08004c30 	.word	0x08004c30
 8004328:	08004c34 	.word	0x08004c34

0800432c <memset>:
 800432c:	4603      	mov	r3, r0
 800432e:	4402      	add	r2, r0
 8004330:	4293      	cmp	r3, r2
 8004332:	d100      	bne.n	8004336 <memset+0xa>
 8004334:	4770      	bx	lr
 8004336:	f803 1b01 	strb.w	r1, [r3], #1
 800433a:	e7f9      	b.n	8004330 <memset+0x4>

0800433c <siprintf>:
 800433c:	b40e      	push	{r1, r2, r3}
 800433e:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004342:	b500      	push	{lr}
 8004344:	b09c      	sub	sp, #112	; 0x70
 8004346:	ab1d      	add	r3, sp, #116	; 0x74
 8004348:	9002      	str	r0, [sp, #8]
 800434a:	9006      	str	r0, [sp, #24]
 800434c:	9107      	str	r1, [sp, #28]
 800434e:	9104      	str	r1, [sp, #16]
 8004350:	4808      	ldr	r0, [pc, #32]	; (8004374 <siprintf+0x38>)
 8004352:	4909      	ldr	r1, [pc, #36]	; (8004378 <siprintf+0x3c>)
 8004354:	f853 2b04 	ldr.w	r2, [r3], #4
 8004358:	9105      	str	r1, [sp, #20]
 800435a:	6800      	ldr	r0, [r0, #0]
 800435c:	a902      	add	r1, sp, #8
 800435e:	9301      	str	r3, [sp, #4]
 8004360:	f000 f868 	bl	8004434 <_svfiprintf_r>
 8004364:	2200      	movs	r2, #0
 8004366:	9b02      	ldr	r3, [sp, #8]
 8004368:	701a      	strb	r2, [r3, #0]
 800436a:	b01c      	add	sp, #112	; 0x70
 800436c:	f85d eb04 	ldr.w	lr, [sp], #4
 8004370:	b003      	add	sp, #12
 8004372:	4770      	bx	lr
 8004374:	2000000c 	.word	0x2000000c
 8004378:	ffff0208 	.word	0xffff0208

0800437c <__ssputs_r>:
 800437c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004380:	688e      	ldr	r6, [r1, #8]
 8004382:	4682      	mov	sl, r0
 8004384:	429e      	cmp	r6, r3
 8004386:	460c      	mov	r4, r1
 8004388:	4690      	mov	r8, r2
 800438a:	461f      	mov	r7, r3
 800438c:	d838      	bhi.n	8004400 <__ssputs_r+0x84>
 800438e:	898a      	ldrh	r2, [r1, #12]
 8004390:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004394:	d032      	beq.n	80043fc <__ssputs_r+0x80>
 8004396:	6825      	ldr	r5, [r4, #0]
 8004398:	6909      	ldr	r1, [r1, #16]
 800439a:	3301      	adds	r3, #1
 800439c:	eba5 0901 	sub.w	r9, r5, r1
 80043a0:	6965      	ldr	r5, [r4, #20]
 80043a2:	444b      	add	r3, r9
 80043a4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80043a8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80043ac:	106d      	asrs	r5, r5, #1
 80043ae:	429d      	cmp	r5, r3
 80043b0:	bf38      	it	cc
 80043b2:	461d      	movcc	r5, r3
 80043b4:	0553      	lsls	r3, r2, #21
 80043b6:	d531      	bpl.n	800441c <__ssputs_r+0xa0>
 80043b8:	4629      	mov	r1, r5
 80043ba:	f000 fb53 	bl	8004a64 <_malloc_r>
 80043be:	4606      	mov	r6, r0
 80043c0:	b950      	cbnz	r0, 80043d8 <__ssputs_r+0x5c>
 80043c2:	230c      	movs	r3, #12
 80043c4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80043c8:	f8ca 3000 	str.w	r3, [sl]
 80043cc:	89a3      	ldrh	r3, [r4, #12]
 80043ce:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80043d2:	81a3      	strh	r3, [r4, #12]
 80043d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80043d8:	464a      	mov	r2, r9
 80043da:	6921      	ldr	r1, [r4, #16]
 80043dc:	f000 face 	bl	800497c <memcpy>
 80043e0:	89a3      	ldrh	r3, [r4, #12]
 80043e2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80043e6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80043ea:	81a3      	strh	r3, [r4, #12]
 80043ec:	6126      	str	r6, [r4, #16]
 80043ee:	444e      	add	r6, r9
 80043f0:	6026      	str	r6, [r4, #0]
 80043f2:	463e      	mov	r6, r7
 80043f4:	6165      	str	r5, [r4, #20]
 80043f6:	eba5 0509 	sub.w	r5, r5, r9
 80043fa:	60a5      	str	r5, [r4, #8]
 80043fc:	42be      	cmp	r6, r7
 80043fe:	d900      	bls.n	8004402 <__ssputs_r+0x86>
 8004400:	463e      	mov	r6, r7
 8004402:	4632      	mov	r2, r6
 8004404:	4641      	mov	r1, r8
 8004406:	6820      	ldr	r0, [r4, #0]
 8004408:	f000 fac6 	bl	8004998 <memmove>
 800440c:	68a3      	ldr	r3, [r4, #8]
 800440e:	6822      	ldr	r2, [r4, #0]
 8004410:	1b9b      	subs	r3, r3, r6
 8004412:	4432      	add	r2, r6
 8004414:	2000      	movs	r0, #0
 8004416:	60a3      	str	r3, [r4, #8]
 8004418:	6022      	str	r2, [r4, #0]
 800441a:	e7db      	b.n	80043d4 <__ssputs_r+0x58>
 800441c:	462a      	mov	r2, r5
 800441e:	f000 fb7b 	bl	8004b18 <_realloc_r>
 8004422:	4606      	mov	r6, r0
 8004424:	2800      	cmp	r0, #0
 8004426:	d1e1      	bne.n	80043ec <__ssputs_r+0x70>
 8004428:	4650      	mov	r0, sl
 800442a:	6921      	ldr	r1, [r4, #16]
 800442c:	f000 face 	bl	80049cc <_free_r>
 8004430:	e7c7      	b.n	80043c2 <__ssputs_r+0x46>
	...

08004434 <_svfiprintf_r>:
 8004434:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004438:	4698      	mov	r8, r3
 800443a:	898b      	ldrh	r3, [r1, #12]
 800443c:	4607      	mov	r7, r0
 800443e:	061b      	lsls	r3, r3, #24
 8004440:	460d      	mov	r5, r1
 8004442:	4614      	mov	r4, r2
 8004444:	b09d      	sub	sp, #116	; 0x74
 8004446:	d50e      	bpl.n	8004466 <_svfiprintf_r+0x32>
 8004448:	690b      	ldr	r3, [r1, #16]
 800444a:	b963      	cbnz	r3, 8004466 <_svfiprintf_r+0x32>
 800444c:	2140      	movs	r1, #64	; 0x40
 800444e:	f000 fb09 	bl	8004a64 <_malloc_r>
 8004452:	6028      	str	r0, [r5, #0]
 8004454:	6128      	str	r0, [r5, #16]
 8004456:	b920      	cbnz	r0, 8004462 <_svfiprintf_r+0x2e>
 8004458:	230c      	movs	r3, #12
 800445a:	603b      	str	r3, [r7, #0]
 800445c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004460:	e0d1      	b.n	8004606 <_svfiprintf_r+0x1d2>
 8004462:	2340      	movs	r3, #64	; 0x40
 8004464:	616b      	str	r3, [r5, #20]
 8004466:	2300      	movs	r3, #0
 8004468:	9309      	str	r3, [sp, #36]	; 0x24
 800446a:	2320      	movs	r3, #32
 800446c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004470:	2330      	movs	r3, #48	; 0x30
 8004472:	f04f 0901 	mov.w	r9, #1
 8004476:	f8cd 800c 	str.w	r8, [sp, #12]
 800447a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8004620 <_svfiprintf_r+0x1ec>
 800447e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004482:	4623      	mov	r3, r4
 8004484:	469a      	mov	sl, r3
 8004486:	f813 2b01 	ldrb.w	r2, [r3], #1
 800448a:	b10a      	cbz	r2, 8004490 <_svfiprintf_r+0x5c>
 800448c:	2a25      	cmp	r2, #37	; 0x25
 800448e:	d1f9      	bne.n	8004484 <_svfiprintf_r+0x50>
 8004490:	ebba 0b04 	subs.w	fp, sl, r4
 8004494:	d00b      	beq.n	80044ae <_svfiprintf_r+0x7a>
 8004496:	465b      	mov	r3, fp
 8004498:	4622      	mov	r2, r4
 800449a:	4629      	mov	r1, r5
 800449c:	4638      	mov	r0, r7
 800449e:	f7ff ff6d 	bl	800437c <__ssputs_r>
 80044a2:	3001      	adds	r0, #1
 80044a4:	f000 80aa 	beq.w	80045fc <_svfiprintf_r+0x1c8>
 80044a8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80044aa:	445a      	add	r2, fp
 80044ac:	9209      	str	r2, [sp, #36]	; 0x24
 80044ae:	f89a 3000 	ldrb.w	r3, [sl]
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	f000 80a2 	beq.w	80045fc <_svfiprintf_r+0x1c8>
 80044b8:	2300      	movs	r3, #0
 80044ba:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80044be:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80044c2:	f10a 0a01 	add.w	sl, sl, #1
 80044c6:	9304      	str	r3, [sp, #16]
 80044c8:	9307      	str	r3, [sp, #28]
 80044ca:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80044ce:	931a      	str	r3, [sp, #104]	; 0x68
 80044d0:	4654      	mov	r4, sl
 80044d2:	2205      	movs	r2, #5
 80044d4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80044d8:	4851      	ldr	r0, [pc, #324]	; (8004620 <_svfiprintf_r+0x1ec>)
 80044da:	f000 fa41 	bl	8004960 <memchr>
 80044de:	9a04      	ldr	r2, [sp, #16]
 80044e0:	b9d8      	cbnz	r0, 800451a <_svfiprintf_r+0xe6>
 80044e2:	06d0      	lsls	r0, r2, #27
 80044e4:	bf44      	itt	mi
 80044e6:	2320      	movmi	r3, #32
 80044e8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80044ec:	0711      	lsls	r1, r2, #28
 80044ee:	bf44      	itt	mi
 80044f0:	232b      	movmi	r3, #43	; 0x2b
 80044f2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80044f6:	f89a 3000 	ldrb.w	r3, [sl]
 80044fa:	2b2a      	cmp	r3, #42	; 0x2a
 80044fc:	d015      	beq.n	800452a <_svfiprintf_r+0xf6>
 80044fe:	4654      	mov	r4, sl
 8004500:	2000      	movs	r0, #0
 8004502:	f04f 0c0a 	mov.w	ip, #10
 8004506:	9a07      	ldr	r2, [sp, #28]
 8004508:	4621      	mov	r1, r4
 800450a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800450e:	3b30      	subs	r3, #48	; 0x30
 8004510:	2b09      	cmp	r3, #9
 8004512:	d94e      	bls.n	80045b2 <_svfiprintf_r+0x17e>
 8004514:	b1b0      	cbz	r0, 8004544 <_svfiprintf_r+0x110>
 8004516:	9207      	str	r2, [sp, #28]
 8004518:	e014      	b.n	8004544 <_svfiprintf_r+0x110>
 800451a:	eba0 0308 	sub.w	r3, r0, r8
 800451e:	fa09 f303 	lsl.w	r3, r9, r3
 8004522:	4313      	orrs	r3, r2
 8004524:	46a2      	mov	sl, r4
 8004526:	9304      	str	r3, [sp, #16]
 8004528:	e7d2      	b.n	80044d0 <_svfiprintf_r+0x9c>
 800452a:	9b03      	ldr	r3, [sp, #12]
 800452c:	1d19      	adds	r1, r3, #4
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	9103      	str	r1, [sp, #12]
 8004532:	2b00      	cmp	r3, #0
 8004534:	bfbb      	ittet	lt
 8004536:	425b      	neglt	r3, r3
 8004538:	f042 0202 	orrlt.w	r2, r2, #2
 800453c:	9307      	strge	r3, [sp, #28]
 800453e:	9307      	strlt	r3, [sp, #28]
 8004540:	bfb8      	it	lt
 8004542:	9204      	strlt	r2, [sp, #16]
 8004544:	7823      	ldrb	r3, [r4, #0]
 8004546:	2b2e      	cmp	r3, #46	; 0x2e
 8004548:	d10c      	bne.n	8004564 <_svfiprintf_r+0x130>
 800454a:	7863      	ldrb	r3, [r4, #1]
 800454c:	2b2a      	cmp	r3, #42	; 0x2a
 800454e:	d135      	bne.n	80045bc <_svfiprintf_r+0x188>
 8004550:	9b03      	ldr	r3, [sp, #12]
 8004552:	3402      	adds	r4, #2
 8004554:	1d1a      	adds	r2, r3, #4
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	9203      	str	r2, [sp, #12]
 800455a:	2b00      	cmp	r3, #0
 800455c:	bfb8      	it	lt
 800455e:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8004562:	9305      	str	r3, [sp, #20]
 8004564:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8004630 <_svfiprintf_r+0x1fc>
 8004568:	2203      	movs	r2, #3
 800456a:	4650      	mov	r0, sl
 800456c:	7821      	ldrb	r1, [r4, #0]
 800456e:	f000 f9f7 	bl	8004960 <memchr>
 8004572:	b140      	cbz	r0, 8004586 <_svfiprintf_r+0x152>
 8004574:	2340      	movs	r3, #64	; 0x40
 8004576:	eba0 000a 	sub.w	r0, r0, sl
 800457a:	fa03 f000 	lsl.w	r0, r3, r0
 800457e:	9b04      	ldr	r3, [sp, #16]
 8004580:	3401      	adds	r4, #1
 8004582:	4303      	orrs	r3, r0
 8004584:	9304      	str	r3, [sp, #16]
 8004586:	f814 1b01 	ldrb.w	r1, [r4], #1
 800458a:	2206      	movs	r2, #6
 800458c:	4825      	ldr	r0, [pc, #148]	; (8004624 <_svfiprintf_r+0x1f0>)
 800458e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004592:	f000 f9e5 	bl	8004960 <memchr>
 8004596:	2800      	cmp	r0, #0
 8004598:	d038      	beq.n	800460c <_svfiprintf_r+0x1d8>
 800459a:	4b23      	ldr	r3, [pc, #140]	; (8004628 <_svfiprintf_r+0x1f4>)
 800459c:	bb1b      	cbnz	r3, 80045e6 <_svfiprintf_r+0x1b2>
 800459e:	9b03      	ldr	r3, [sp, #12]
 80045a0:	3307      	adds	r3, #7
 80045a2:	f023 0307 	bic.w	r3, r3, #7
 80045a6:	3308      	adds	r3, #8
 80045a8:	9303      	str	r3, [sp, #12]
 80045aa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80045ac:	4433      	add	r3, r6
 80045ae:	9309      	str	r3, [sp, #36]	; 0x24
 80045b0:	e767      	b.n	8004482 <_svfiprintf_r+0x4e>
 80045b2:	460c      	mov	r4, r1
 80045b4:	2001      	movs	r0, #1
 80045b6:	fb0c 3202 	mla	r2, ip, r2, r3
 80045ba:	e7a5      	b.n	8004508 <_svfiprintf_r+0xd4>
 80045bc:	2300      	movs	r3, #0
 80045be:	f04f 0c0a 	mov.w	ip, #10
 80045c2:	4619      	mov	r1, r3
 80045c4:	3401      	adds	r4, #1
 80045c6:	9305      	str	r3, [sp, #20]
 80045c8:	4620      	mov	r0, r4
 80045ca:	f810 2b01 	ldrb.w	r2, [r0], #1
 80045ce:	3a30      	subs	r2, #48	; 0x30
 80045d0:	2a09      	cmp	r2, #9
 80045d2:	d903      	bls.n	80045dc <_svfiprintf_r+0x1a8>
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d0c5      	beq.n	8004564 <_svfiprintf_r+0x130>
 80045d8:	9105      	str	r1, [sp, #20]
 80045da:	e7c3      	b.n	8004564 <_svfiprintf_r+0x130>
 80045dc:	4604      	mov	r4, r0
 80045de:	2301      	movs	r3, #1
 80045e0:	fb0c 2101 	mla	r1, ip, r1, r2
 80045e4:	e7f0      	b.n	80045c8 <_svfiprintf_r+0x194>
 80045e6:	ab03      	add	r3, sp, #12
 80045e8:	9300      	str	r3, [sp, #0]
 80045ea:	462a      	mov	r2, r5
 80045ec:	4638      	mov	r0, r7
 80045ee:	4b0f      	ldr	r3, [pc, #60]	; (800462c <_svfiprintf_r+0x1f8>)
 80045f0:	a904      	add	r1, sp, #16
 80045f2:	f3af 8000 	nop.w
 80045f6:	1c42      	adds	r2, r0, #1
 80045f8:	4606      	mov	r6, r0
 80045fa:	d1d6      	bne.n	80045aa <_svfiprintf_r+0x176>
 80045fc:	89ab      	ldrh	r3, [r5, #12]
 80045fe:	065b      	lsls	r3, r3, #25
 8004600:	f53f af2c 	bmi.w	800445c <_svfiprintf_r+0x28>
 8004604:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004606:	b01d      	add	sp, #116	; 0x74
 8004608:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800460c:	ab03      	add	r3, sp, #12
 800460e:	9300      	str	r3, [sp, #0]
 8004610:	462a      	mov	r2, r5
 8004612:	4638      	mov	r0, r7
 8004614:	4b05      	ldr	r3, [pc, #20]	; (800462c <_svfiprintf_r+0x1f8>)
 8004616:	a904      	add	r1, sp, #16
 8004618:	f000 f87c 	bl	8004714 <_printf_i>
 800461c:	e7eb      	b.n	80045f6 <_svfiprintf_r+0x1c2>
 800461e:	bf00      	nop
 8004620:	08004bfc 	.word	0x08004bfc
 8004624:	08004c06 	.word	0x08004c06
 8004628:	00000000 	.word	0x00000000
 800462c:	0800437d 	.word	0x0800437d
 8004630:	08004c02 	.word	0x08004c02

08004634 <_printf_common>:
 8004634:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004638:	4616      	mov	r6, r2
 800463a:	4699      	mov	r9, r3
 800463c:	688a      	ldr	r2, [r1, #8]
 800463e:	690b      	ldr	r3, [r1, #16]
 8004640:	4607      	mov	r7, r0
 8004642:	4293      	cmp	r3, r2
 8004644:	bfb8      	it	lt
 8004646:	4613      	movlt	r3, r2
 8004648:	6033      	str	r3, [r6, #0]
 800464a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800464e:	460c      	mov	r4, r1
 8004650:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004654:	b10a      	cbz	r2, 800465a <_printf_common+0x26>
 8004656:	3301      	adds	r3, #1
 8004658:	6033      	str	r3, [r6, #0]
 800465a:	6823      	ldr	r3, [r4, #0]
 800465c:	0699      	lsls	r1, r3, #26
 800465e:	bf42      	ittt	mi
 8004660:	6833      	ldrmi	r3, [r6, #0]
 8004662:	3302      	addmi	r3, #2
 8004664:	6033      	strmi	r3, [r6, #0]
 8004666:	6825      	ldr	r5, [r4, #0]
 8004668:	f015 0506 	ands.w	r5, r5, #6
 800466c:	d106      	bne.n	800467c <_printf_common+0x48>
 800466e:	f104 0a19 	add.w	sl, r4, #25
 8004672:	68e3      	ldr	r3, [r4, #12]
 8004674:	6832      	ldr	r2, [r6, #0]
 8004676:	1a9b      	subs	r3, r3, r2
 8004678:	42ab      	cmp	r3, r5
 800467a:	dc28      	bgt.n	80046ce <_printf_common+0x9a>
 800467c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004680:	1e13      	subs	r3, r2, #0
 8004682:	6822      	ldr	r2, [r4, #0]
 8004684:	bf18      	it	ne
 8004686:	2301      	movne	r3, #1
 8004688:	0692      	lsls	r2, r2, #26
 800468a:	d42d      	bmi.n	80046e8 <_printf_common+0xb4>
 800468c:	4649      	mov	r1, r9
 800468e:	4638      	mov	r0, r7
 8004690:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004694:	47c0      	blx	r8
 8004696:	3001      	adds	r0, #1
 8004698:	d020      	beq.n	80046dc <_printf_common+0xa8>
 800469a:	6823      	ldr	r3, [r4, #0]
 800469c:	68e5      	ldr	r5, [r4, #12]
 800469e:	f003 0306 	and.w	r3, r3, #6
 80046a2:	2b04      	cmp	r3, #4
 80046a4:	bf18      	it	ne
 80046a6:	2500      	movne	r5, #0
 80046a8:	6832      	ldr	r2, [r6, #0]
 80046aa:	f04f 0600 	mov.w	r6, #0
 80046ae:	68a3      	ldr	r3, [r4, #8]
 80046b0:	bf08      	it	eq
 80046b2:	1aad      	subeq	r5, r5, r2
 80046b4:	6922      	ldr	r2, [r4, #16]
 80046b6:	bf08      	it	eq
 80046b8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80046bc:	4293      	cmp	r3, r2
 80046be:	bfc4      	itt	gt
 80046c0:	1a9b      	subgt	r3, r3, r2
 80046c2:	18ed      	addgt	r5, r5, r3
 80046c4:	341a      	adds	r4, #26
 80046c6:	42b5      	cmp	r5, r6
 80046c8:	d11a      	bne.n	8004700 <_printf_common+0xcc>
 80046ca:	2000      	movs	r0, #0
 80046cc:	e008      	b.n	80046e0 <_printf_common+0xac>
 80046ce:	2301      	movs	r3, #1
 80046d0:	4652      	mov	r2, sl
 80046d2:	4649      	mov	r1, r9
 80046d4:	4638      	mov	r0, r7
 80046d6:	47c0      	blx	r8
 80046d8:	3001      	adds	r0, #1
 80046da:	d103      	bne.n	80046e4 <_printf_common+0xb0>
 80046dc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80046e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80046e4:	3501      	adds	r5, #1
 80046e6:	e7c4      	b.n	8004672 <_printf_common+0x3e>
 80046e8:	2030      	movs	r0, #48	; 0x30
 80046ea:	18e1      	adds	r1, r4, r3
 80046ec:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80046f0:	1c5a      	adds	r2, r3, #1
 80046f2:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80046f6:	4422      	add	r2, r4
 80046f8:	3302      	adds	r3, #2
 80046fa:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80046fe:	e7c5      	b.n	800468c <_printf_common+0x58>
 8004700:	2301      	movs	r3, #1
 8004702:	4622      	mov	r2, r4
 8004704:	4649      	mov	r1, r9
 8004706:	4638      	mov	r0, r7
 8004708:	47c0      	blx	r8
 800470a:	3001      	adds	r0, #1
 800470c:	d0e6      	beq.n	80046dc <_printf_common+0xa8>
 800470e:	3601      	adds	r6, #1
 8004710:	e7d9      	b.n	80046c6 <_printf_common+0x92>
	...

08004714 <_printf_i>:
 8004714:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004718:	460c      	mov	r4, r1
 800471a:	7e27      	ldrb	r7, [r4, #24]
 800471c:	4691      	mov	r9, r2
 800471e:	2f78      	cmp	r7, #120	; 0x78
 8004720:	4680      	mov	r8, r0
 8004722:	469a      	mov	sl, r3
 8004724:	990c      	ldr	r1, [sp, #48]	; 0x30
 8004726:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800472a:	d807      	bhi.n	800473c <_printf_i+0x28>
 800472c:	2f62      	cmp	r7, #98	; 0x62
 800472e:	d80a      	bhi.n	8004746 <_printf_i+0x32>
 8004730:	2f00      	cmp	r7, #0
 8004732:	f000 80d9 	beq.w	80048e8 <_printf_i+0x1d4>
 8004736:	2f58      	cmp	r7, #88	; 0x58
 8004738:	f000 80a4 	beq.w	8004884 <_printf_i+0x170>
 800473c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004740:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004744:	e03a      	b.n	80047bc <_printf_i+0xa8>
 8004746:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800474a:	2b15      	cmp	r3, #21
 800474c:	d8f6      	bhi.n	800473c <_printf_i+0x28>
 800474e:	a001      	add	r0, pc, #4	; (adr r0, 8004754 <_printf_i+0x40>)
 8004750:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8004754:	080047ad 	.word	0x080047ad
 8004758:	080047c1 	.word	0x080047c1
 800475c:	0800473d 	.word	0x0800473d
 8004760:	0800473d 	.word	0x0800473d
 8004764:	0800473d 	.word	0x0800473d
 8004768:	0800473d 	.word	0x0800473d
 800476c:	080047c1 	.word	0x080047c1
 8004770:	0800473d 	.word	0x0800473d
 8004774:	0800473d 	.word	0x0800473d
 8004778:	0800473d 	.word	0x0800473d
 800477c:	0800473d 	.word	0x0800473d
 8004780:	080048cf 	.word	0x080048cf
 8004784:	080047f1 	.word	0x080047f1
 8004788:	080048b1 	.word	0x080048b1
 800478c:	0800473d 	.word	0x0800473d
 8004790:	0800473d 	.word	0x0800473d
 8004794:	080048f1 	.word	0x080048f1
 8004798:	0800473d 	.word	0x0800473d
 800479c:	080047f1 	.word	0x080047f1
 80047a0:	0800473d 	.word	0x0800473d
 80047a4:	0800473d 	.word	0x0800473d
 80047a8:	080048b9 	.word	0x080048b9
 80047ac:	680b      	ldr	r3, [r1, #0]
 80047ae:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80047b2:	1d1a      	adds	r2, r3, #4
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	600a      	str	r2, [r1, #0]
 80047b8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80047bc:	2301      	movs	r3, #1
 80047be:	e0a4      	b.n	800490a <_printf_i+0x1f6>
 80047c0:	6825      	ldr	r5, [r4, #0]
 80047c2:	6808      	ldr	r0, [r1, #0]
 80047c4:	062e      	lsls	r6, r5, #24
 80047c6:	f100 0304 	add.w	r3, r0, #4
 80047ca:	d50a      	bpl.n	80047e2 <_printf_i+0xce>
 80047cc:	6805      	ldr	r5, [r0, #0]
 80047ce:	600b      	str	r3, [r1, #0]
 80047d0:	2d00      	cmp	r5, #0
 80047d2:	da03      	bge.n	80047dc <_printf_i+0xc8>
 80047d4:	232d      	movs	r3, #45	; 0x2d
 80047d6:	426d      	negs	r5, r5
 80047d8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80047dc:	230a      	movs	r3, #10
 80047de:	485e      	ldr	r0, [pc, #376]	; (8004958 <_printf_i+0x244>)
 80047e0:	e019      	b.n	8004816 <_printf_i+0x102>
 80047e2:	f015 0f40 	tst.w	r5, #64	; 0x40
 80047e6:	6805      	ldr	r5, [r0, #0]
 80047e8:	600b      	str	r3, [r1, #0]
 80047ea:	bf18      	it	ne
 80047ec:	b22d      	sxthne	r5, r5
 80047ee:	e7ef      	b.n	80047d0 <_printf_i+0xbc>
 80047f0:	680b      	ldr	r3, [r1, #0]
 80047f2:	6825      	ldr	r5, [r4, #0]
 80047f4:	1d18      	adds	r0, r3, #4
 80047f6:	6008      	str	r0, [r1, #0]
 80047f8:	0628      	lsls	r0, r5, #24
 80047fa:	d501      	bpl.n	8004800 <_printf_i+0xec>
 80047fc:	681d      	ldr	r5, [r3, #0]
 80047fe:	e002      	b.n	8004806 <_printf_i+0xf2>
 8004800:	0669      	lsls	r1, r5, #25
 8004802:	d5fb      	bpl.n	80047fc <_printf_i+0xe8>
 8004804:	881d      	ldrh	r5, [r3, #0]
 8004806:	2f6f      	cmp	r7, #111	; 0x6f
 8004808:	bf0c      	ite	eq
 800480a:	2308      	moveq	r3, #8
 800480c:	230a      	movne	r3, #10
 800480e:	4852      	ldr	r0, [pc, #328]	; (8004958 <_printf_i+0x244>)
 8004810:	2100      	movs	r1, #0
 8004812:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004816:	6866      	ldr	r6, [r4, #4]
 8004818:	2e00      	cmp	r6, #0
 800481a:	bfa8      	it	ge
 800481c:	6821      	ldrge	r1, [r4, #0]
 800481e:	60a6      	str	r6, [r4, #8]
 8004820:	bfa4      	itt	ge
 8004822:	f021 0104 	bicge.w	r1, r1, #4
 8004826:	6021      	strge	r1, [r4, #0]
 8004828:	b90d      	cbnz	r5, 800482e <_printf_i+0x11a>
 800482a:	2e00      	cmp	r6, #0
 800482c:	d04d      	beq.n	80048ca <_printf_i+0x1b6>
 800482e:	4616      	mov	r6, r2
 8004830:	fbb5 f1f3 	udiv	r1, r5, r3
 8004834:	fb03 5711 	mls	r7, r3, r1, r5
 8004838:	5dc7      	ldrb	r7, [r0, r7]
 800483a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800483e:	462f      	mov	r7, r5
 8004840:	42bb      	cmp	r3, r7
 8004842:	460d      	mov	r5, r1
 8004844:	d9f4      	bls.n	8004830 <_printf_i+0x11c>
 8004846:	2b08      	cmp	r3, #8
 8004848:	d10b      	bne.n	8004862 <_printf_i+0x14e>
 800484a:	6823      	ldr	r3, [r4, #0]
 800484c:	07df      	lsls	r7, r3, #31
 800484e:	d508      	bpl.n	8004862 <_printf_i+0x14e>
 8004850:	6923      	ldr	r3, [r4, #16]
 8004852:	6861      	ldr	r1, [r4, #4]
 8004854:	4299      	cmp	r1, r3
 8004856:	bfde      	ittt	le
 8004858:	2330      	movle	r3, #48	; 0x30
 800485a:	f806 3c01 	strble.w	r3, [r6, #-1]
 800485e:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 8004862:	1b92      	subs	r2, r2, r6
 8004864:	6122      	str	r2, [r4, #16]
 8004866:	464b      	mov	r3, r9
 8004868:	4621      	mov	r1, r4
 800486a:	4640      	mov	r0, r8
 800486c:	f8cd a000 	str.w	sl, [sp]
 8004870:	aa03      	add	r2, sp, #12
 8004872:	f7ff fedf 	bl	8004634 <_printf_common>
 8004876:	3001      	adds	r0, #1
 8004878:	d14c      	bne.n	8004914 <_printf_i+0x200>
 800487a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800487e:	b004      	add	sp, #16
 8004880:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004884:	4834      	ldr	r0, [pc, #208]	; (8004958 <_printf_i+0x244>)
 8004886:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800488a:	680e      	ldr	r6, [r1, #0]
 800488c:	6823      	ldr	r3, [r4, #0]
 800488e:	f856 5b04 	ldr.w	r5, [r6], #4
 8004892:	061f      	lsls	r7, r3, #24
 8004894:	600e      	str	r6, [r1, #0]
 8004896:	d514      	bpl.n	80048c2 <_printf_i+0x1ae>
 8004898:	07d9      	lsls	r1, r3, #31
 800489a:	bf44      	itt	mi
 800489c:	f043 0320 	orrmi.w	r3, r3, #32
 80048a0:	6023      	strmi	r3, [r4, #0]
 80048a2:	b91d      	cbnz	r5, 80048ac <_printf_i+0x198>
 80048a4:	6823      	ldr	r3, [r4, #0]
 80048a6:	f023 0320 	bic.w	r3, r3, #32
 80048aa:	6023      	str	r3, [r4, #0]
 80048ac:	2310      	movs	r3, #16
 80048ae:	e7af      	b.n	8004810 <_printf_i+0xfc>
 80048b0:	6823      	ldr	r3, [r4, #0]
 80048b2:	f043 0320 	orr.w	r3, r3, #32
 80048b6:	6023      	str	r3, [r4, #0]
 80048b8:	2378      	movs	r3, #120	; 0x78
 80048ba:	4828      	ldr	r0, [pc, #160]	; (800495c <_printf_i+0x248>)
 80048bc:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80048c0:	e7e3      	b.n	800488a <_printf_i+0x176>
 80048c2:	065e      	lsls	r6, r3, #25
 80048c4:	bf48      	it	mi
 80048c6:	b2ad      	uxthmi	r5, r5
 80048c8:	e7e6      	b.n	8004898 <_printf_i+0x184>
 80048ca:	4616      	mov	r6, r2
 80048cc:	e7bb      	b.n	8004846 <_printf_i+0x132>
 80048ce:	680b      	ldr	r3, [r1, #0]
 80048d0:	6826      	ldr	r6, [r4, #0]
 80048d2:	1d1d      	adds	r5, r3, #4
 80048d4:	6960      	ldr	r0, [r4, #20]
 80048d6:	600d      	str	r5, [r1, #0]
 80048d8:	0635      	lsls	r5, r6, #24
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	d501      	bpl.n	80048e2 <_printf_i+0x1ce>
 80048de:	6018      	str	r0, [r3, #0]
 80048e0:	e002      	b.n	80048e8 <_printf_i+0x1d4>
 80048e2:	0671      	lsls	r1, r6, #25
 80048e4:	d5fb      	bpl.n	80048de <_printf_i+0x1ca>
 80048e6:	8018      	strh	r0, [r3, #0]
 80048e8:	2300      	movs	r3, #0
 80048ea:	4616      	mov	r6, r2
 80048ec:	6123      	str	r3, [r4, #16]
 80048ee:	e7ba      	b.n	8004866 <_printf_i+0x152>
 80048f0:	680b      	ldr	r3, [r1, #0]
 80048f2:	1d1a      	adds	r2, r3, #4
 80048f4:	600a      	str	r2, [r1, #0]
 80048f6:	681e      	ldr	r6, [r3, #0]
 80048f8:	2100      	movs	r1, #0
 80048fa:	4630      	mov	r0, r6
 80048fc:	6862      	ldr	r2, [r4, #4]
 80048fe:	f000 f82f 	bl	8004960 <memchr>
 8004902:	b108      	cbz	r0, 8004908 <_printf_i+0x1f4>
 8004904:	1b80      	subs	r0, r0, r6
 8004906:	6060      	str	r0, [r4, #4]
 8004908:	6863      	ldr	r3, [r4, #4]
 800490a:	6123      	str	r3, [r4, #16]
 800490c:	2300      	movs	r3, #0
 800490e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004912:	e7a8      	b.n	8004866 <_printf_i+0x152>
 8004914:	4632      	mov	r2, r6
 8004916:	4649      	mov	r1, r9
 8004918:	4640      	mov	r0, r8
 800491a:	6923      	ldr	r3, [r4, #16]
 800491c:	47d0      	blx	sl
 800491e:	3001      	adds	r0, #1
 8004920:	d0ab      	beq.n	800487a <_printf_i+0x166>
 8004922:	6823      	ldr	r3, [r4, #0]
 8004924:	079b      	lsls	r3, r3, #30
 8004926:	d413      	bmi.n	8004950 <_printf_i+0x23c>
 8004928:	68e0      	ldr	r0, [r4, #12]
 800492a:	9b03      	ldr	r3, [sp, #12]
 800492c:	4298      	cmp	r0, r3
 800492e:	bfb8      	it	lt
 8004930:	4618      	movlt	r0, r3
 8004932:	e7a4      	b.n	800487e <_printf_i+0x16a>
 8004934:	2301      	movs	r3, #1
 8004936:	4632      	mov	r2, r6
 8004938:	4649      	mov	r1, r9
 800493a:	4640      	mov	r0, r8
 800493c:	47d0      	blx	sl
 800493e:	3001      	adds	r0, #1
 8004940:	d09b      	beq.n	800487a <_printf_i+0x166>
 8004942:	3501      	adds	r5, #1
 8004944:	68e3      	ldr	r3, [r4, #12]
 8004946:	9903      	ldr	r1, [sp, #12]
 8004948:	1a5b      	subs	r3, r3, r1
 800494a:	42ab      	cmp	r3, r5
 800494c:	dcf2      	bgt.n	8004934 <_printf_i+0x220>
 800494e:	e7eb      	b.n	8004928 <_printf_i+0x214>
 8004950:	2500      	movs	r5, #0
 8004952:	f104 0619 	add.w	r6, r4, #25
 8004956:	e7f5      	b.n	8004944 <_printf_i+0x230>
 8004958:	08004c0d 	.word	0x08004c0d
 800495c:	08004c1e 	.word	0x08004c1e

08004960 <memchr>:
 8004960:	4603      	mov	r3, r0
 8004962:	b510      	push	{r4, lr}
 8004964:	b2c9      	uxtb	r1, r1
 8004966:	4402      	add	r2, r0
 8004968:	4293      	cmp	r3, r2
 800496a:	4618      	mov	r0, r3
 800496c:	d101      	bne.n	8004972 <memchr+0x12>
 800496e:	2000      	movs	r0, #0
 8004970:	e003      	b.n	800497a <memchr+0x1a>
 8004972:	7804      	ldrb	r4, [r0, #0]
 8004974:	3301      	adds	r3, #1
 8004976:	428c      	cmp	r4, r1
 8004978:	d1f6      	bne.n	8004968 <memchr+0x8>
 800497a:	bd10      	pop	{r4, pc}

0800497c <memcpy>:
 800497c:	440a      	add	r2, r1
 800497e:	4291      	cmp	r1, r2
 8004980:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8004984:	d100      	bne.n	8004988 <memcpy+0xc>
 8004986:	4770      	bx	lr
 8004988:	b510      	push	{r4, lr}
 800498a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800498e:	4291      	cmp	r1, r2
 8004990:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004994:	d1f9      	bne.n	800498a <memcpy+0xe>
 8004996:	bd10      	pop	{r4, pc}

08004998 <memmove>:
 8004998:	4288      	cmp	r0, r1
 800499a:	b510      	push	{r4, lr}
 800499c:	eb01 0402 	add.w	r4, r1, r2
 80049a0:	d902      	bls.n	80049a8 <memmove+0x10>
 80049a2:	4284      	cmp	r4, r0
 80049a4:	4623      	mov	r3, r4
 80049a6:	d807      	bhi.n	80049b8 <memmove+0x20>
 80049a8:	1e43      	subs	r3, r0, #1
 80049aa:	42a1      	cmp	r1, r4
 80049ac:	d008      	beq.n	80049c0 <memmove+0x28>
 80049ae:	f811 2b01 	ldrb.w	r2, [r1], #1
 80049b2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80049b6:	e7f8      	b.n	80049aa <memmove+0x12>
 80049b8:	4601      	mov	r1, r0
 80049ba:	4402      	add	r2, r0
 80049bc:	428a      	cmp	r2, r1
 80049be:	d100      	bne.n	80049c2 <memmove+0x2a>
 80049c0:	bd10      	pop	{r4, pc}
 80049c2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80049c6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80049ca:	e7f7      	b.n	80049bc <memmove+0x24>

080049cc <_free_r>:
 80049cc:	b538      	push	{r3, r4, r5, lr}
 80049ce:	4605      	mov	r5, r0
 80049d0:	2900      	cmp	r1, #0
 80049d2:	d043      	beq.n	8004a5c <_free_r+0x90>
 80049d4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80049d8:	1f0c      	subs	r4, r1, #4
 80049da:	2b00      	cmp	r3, #0
 80049dc:	bfb8      	it	lt
 80049de:	18e4      	addlt	r4, r4, r3
 80049e0:	f000 f8d0 	bl	8004b84 <__malloc_lock>
 80049e4:	4a1e      	ldr	r2, [pc, #120]	; (8004a60 <_free_r+0x94>)
 80049e6:	6813      	ldr	r3, [r2, #0]
 80049e8:	4610      	mov	r0, r2
 80049ea:	b933      	cbnz	r3, 80049fa <_free_r+0x2e>
 80049ec:	6063      	str	r3, [r4, #4]
 80049ee:	6014      	str	r4, [r2, #0]
 80049f0:	4628      	mov	r0, r5
 80049f2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80049f6:	f000 b8cb 	b.w	8004b90 <__malloc_unlock>
 80049fa:	42a3      	cmp	r3, r4
 80049fc:	d90a      	bls.n	8004a14 <_free_r+0x48>
 80049fe:	6821      	ldr	r1, [r4, #0]
 8004a00:	1862      	adds	r2, r4, r1
 8004a02:	4293      	cmp	r3, r2
 8004a04:	bf01      	itttt	eq
 8004a06:	681a      	ldreq	r2, [r3, #0]
 8004a08:	685b      	ldreq	r3, [r3, #4]
 8004a0a:	1852      	addeq	r2, r2, r1
 8004a0c:	6022      	streq	r2, [r4, #0]
 8004a0e:	6063      	str	r3, [r4, #4]
 8004a10:	6004      	str	r4, [r0, #0]
 8004a12:	e7ed      	b.n	80049f0 <_free_r+0x24>
 8004a14:	461a      	mov	r2, r3
 8004a16:	685b      	ldr	r3, [r3, #4]
 8004a18:	b10b      	cbz	r3, 8004a1e <_free_r+0x52>
 8004a1a:	42a3      	cmp	r3, r4
 8004a1c:	d9fa      	bls.n	8004a14 <_free_r+0x48>
 8004a1e:	6811      	ldr	r1, [r2, #0]
 8004a20:	1850      	adds	r0, r2, r1
 8004a22:	42a0      	cmp	r0, r4
 8004a24:	d10b      	bne.n	8004a3e <_free_r+0x72>
 8004a26:	6820      	ldr	r0, [r4, #0]
 8004a28:	4401      	add	r1, r0
 8004a2a:	1850      	adds	r0, r2, r1
 8004a2c:	4283      	cmp	r3, r0
 8004a2e:	6011      	str	r1, [r2, #0]
 8004a30:	d1de      	bne.n	80049f0 <_free_r+0x24>
 8004a32:	6818      	ldr	r0, [r3, #0]
 8004a34:	685b      	ldr	r3, [r3, #4]
 8004a36:	4401      	add	r1, r0
 8004a38:	6011      	str	r1, [r2, #0]
 8004a3a:	6053      	str	r3, [r2, #4]
 8004a3c:	e7d8      	b.n	80049f0 <_free_r+0x24>
 8004a3e:	d902      	bls.n	8004a46 <_free_r+0x7a>
 8004a40:	230c      	movs	r3, #12
 8004a42:	602b      	str	r3, [r5, #0]
 8004a44:	e7d4      	b.n	80049f0 <_free_r+0x24>
 8004a46:	6820      	ldr	r0, [r4, #0]
 8004a48:	1821      	adds	r1, r4, r0
 8004a4a:	428b      	cmp	r3, r1
 8004a4c:	bf01      	itttt	eq
 8004a4e:	6819      	ldreq	r1, [r3, #0]
 8004a50:	685b      	ldreq	r3, [r3, #4]
 8004a52:	1809      	addeq	r1, r1, r0
 8004a54:	6021      	streq	r1, [r4, #0]
 8004a56:	6063      	str	r3, [r4, #4]
 8004a58:	6054      	str	r4, [r2, #4]
 8004a5a:	e7c9      	b.n	80049f0 <_free_r+0x24>
 8004a5c:	bd38      	pop	{r3, r4, r5, pc}
 8004a5e:	bf00      	nop
 8004a60:	200000f4 	.word	0x200000f4

08004a64 <_malloc_r>:
 8004a64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a66:	1ccd      	adds	r5, r1, #3
 8004a68:	f025 0503 	bic.w	r5, r5, #3
 8004a6c:	3508      	adds	r5, #8
 8004a6e:	2d0c      	cmp	r5, #12
 8004a70:	bf38      	it	cc
 8004a72:	250c      	movcc	r5, #12
 8004a74:	2d00      	cmp	r5, #0
 8004a76:	4606      	mov	r6, r0
 8004a78:	db01      	blt.n	8004a7e <_malloc_r+0x1a>
 8004a7a:	42a9      	cmp	r1, r5
 8004a7c:	d903      	bls.n	8004a86 <_malloc_r+0x22>
 8004a7e:	230c      	movs	r3, #12
 8004a80:	6033      	str	r3, [r6, #0]
 8004a82:	2000      	movs	r0, #0
 8004a84:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004a86:	f000 f87d 	bl	8004b84 <__malloc_lock>
 8004a8a:	4921      	ldr	r1, [pc, #132]	; (8004b10 <_malloc_r+0xac>)
 8004a8c:	680a      	ldr	r2, [r1, #0]
 8004a8e:	4614      	mov	r4, r2
 8004a90:	b99c      	cbnz	r4, 8004aba <_malloc_r+0x56>
 8004a92:	4f20      	ldr	r7, [pc, #128]	; (8004b14 <_malloc_r+0xb0>)
 8004a94:	683b      	ldr	r3, [r7, #0]
 8004a96:	b923      	cbnz	r3, 8004aa2 <_malloc_r+0x3e>
 8004a98:	4621      	mov	r1, r4
 8004a9a:	4630      	mov	r0, r6
 8004a9c:	f000 f862 	bl	8004b64 <_sbrk_r>
 8004aa0:	6038      	str	r0, [r7, #0]
 8004aa2:	4629      	mov	r1, r5
 8004aa4:	4630      	mov	r0, r6
 8004aa6:	f000 f85d 	bl	8004b64 <_sbrk_r>
 8004aaa:	1c43      	adds	r3, r0, #1
 8004aac:	d123      	bne.n	8004af6 <_malloc_r+0x92>
 8004aae:	230c      	movs	r3, #12
 8004ab0:	4630      	mov	r0, r6
 8004ab2:	6033      	str	r3, [r6, #0]
 8004ab4:	f000 f86c 	bl	8004b90 <__malloc_unlock>
 8004ab8:	e7e3      	b.n	8004a82 <_malloc_r+0x1e>
 8004aba:	6823      	ldr	r3, [r4, #0]
 8004abc:	1b5b      	subs	r3, r3, r5
 8004abe:	d417      	bmi.n	8004af0 <_malloc_r+0x8c>
 8004ac0:	2b0b      	cmp	r3, #11
 8004ac2:	d903      	bls.n	8004acc <_malloc_r+0x68>
 8004ac4:	6023      	str	r3, [r4, #0]
 8004ac6:	441c      	add	r4, r3
 8004ac8:	6025      	str	r5, [r4, #0]
 8004aca:	e004      	b.n	8004ad6 <_malloc_r+0x72>
 8004acc:	6863      	ldr	r3, [r4, #4]
 8004ace:	42a2      	cmp	r2, r4
 8004ad0:	bf0c      	ite	eq
 8004ad2:	600b      	streq	r3, [r1, #0]
 8004ad4:	6053      	strne	r3, [r2, #4]
 8004ad6:	4630      	mov	r0, r6
 8004ad8:	f000 f85a 	bl	8004b90 <__malloc_unlock>
 8004adc:	f104 000b 	add.w	r0, r4, #11
 8004ae0:	1d23      	adds	r3, r4, #4
 8004ae2:	f020 0007 	bic.w	r0, r0, #7
 8004ae6:	1ac2      	subs	r2, r0, r3
 8004ae8:	d0cc      	beq.n	8004a84 <_malloc_r+0x20>
 8004aea:	1a1b      	subs	r3, r3, r0
 8004aec:	50a3      	str	r3, [r4, r2]
 8004aee:	e7c9      	b.n	8004a84 <_malloc_r+0x20>
 8004af0:	4622      	mov	r2, r4
 8004af2:	6864      	ldr	r4, [r4, #4]
 8004af4:	e7cc      	b.n	8004a90 <_malloc_r+0x2c>
 8004af6:	1cc4      	adds	r4, r0, #3
 8004af8:	f024 0403 	bic.w	r4, r4, #3
 8004afc:	42a0      	cmp	r0, r4
 8004afe:	d0e3      	beq.n	8004ac8 <_malloc_r+0x64>
 8004b00:	1a21      	subs	r1, r4, r0
 8004b02:	4630      	mov	r0, r6
 8004b04:	f000 f82e 	bl	8004b64 <_sbrk_r>
 8004b08:	3001      	adds	r0, #1
 8004b0a:	d1dd      	bne.n	8004ac8 <_malloc_r+0x64>
 8004b0c:	e7cf      	b.n	8004aae <_malloc_r+0x4a>
 8004b0e:	bf00      	nop
 8004b10:	200000f4 	.word	0x200000f4
 8004b14:	200000f8 	.word	0x200000f8

08004b18 <_realloc_r>:
 8004b18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b1a:	4607      	mov	r7, r0
 8004b1c:	4614      	mov	r4, r2
 8004b1e:	460e      	mov	r6, r1
 8004b20:	b921      	cbnz	r1, 8004b2c <_realloc_r+0x14>
 8004b22:	4611      	mov	r1, r2
 8004b24:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8004b28:	f7ff bf9c 	b.w	8004a64 <_malloc_r>
 8004b2c:	b922      	cbnz	r2, 8004b38 <_realloc_r+0x20>
 8004b2e:	f7ff ff4d 	bl	80049cc <_free_r>
 8004b32:	4625      	mov	r5, r4
 8004b34:	4628      	mov	r0, r5
 8004b36:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004b38:	f000 f830 	bl	8004b9c <_malloc_usable_size_r>
 8004b3c:	42a0      	cmp	r0, r4
 8004b3e:	d20f      	bcs.n	8004b60 <_realloc_r+0x48>
 8004b40:	4621      	mov	r1, r4
 8004b42:	4638      	mov	r0, r7
 8004b44:	f7ff ff8e 	bl	8004a64 <_malloc_r>
 8004b48:	4605      	mov	r5, r0
 8004b4a:	2800      	cmp	r0, #0
 8004b4c:	d0f2      	beq.n	8004b34 <_realloc_r+0x1c>
 8004b4e:	4631      	mov	r1, r6
 8004b50:	4622      	mov	r2, r4
 8004b52:	f7ff ff13 	bl	800497c <memcpy>
 8004b56:	4631      	mov	r1, r6
 8004b58:	4638      	mov	r0, r7
 8004b5a:	f7ff ff37 	bl	80049cc <_free_r>
 8004b5e:	e7e9      	b.n	8004b34 <_realloc_r+0x1c>
 8004b60:	4635      	mov	r5, r6
 8004b62:	e7e7      	b.n	8004b34 <_realloc_r+0x1c>

08004b64 <_sbrk_r>:
 8004b64:	b538      	push	{r3, r4, r5, lr}
 8004b66:	2300      	movs	r3, #0
 8004b68:	4d05      	ldr	r5, [pc, #20]	; (8004b80 <_sbrk_r+0x1c>)
 8004b6a:	4604      	mov	r4, r0
 8004b6c:	4608      	mov	r0, r1
 8004b6e:	602b      	str	r3, [r5, #0]
 8004b70:	f7fc f956 	bl	8000e20 <_sbrk>
 8004b74:	1c43      	adds	r3, r0, #1
 8004b76:	d102      	bne.n	8004b7e <_sbrk_r+0x1a>
 8004b78:	682b      	ldr	r3, [r5, #0]
 8004b7a:	b103      	cbz	r3, 8004b7e <_sbrk_r+0x1a>
 8004b7c:	6023      	str	r3, [r4, #0]
 8004b7e:	bd38      	pop	{r3, r4, r5, pc}
 8004b80:	200002d8 	.word	0x200002d8

08004b84 <__malloc_lock>:
 8004b84:	4801      	ldr	r0, [pc, #4]	; (8004b8c <__malloc_lock+0x8>)
 8004b86:	f000 b811 	b.w	8004bac <__retarget_lock_acquire_recursive>
 8004b8a:	bf00      	nop
 8004b8c:	200002e0 	.word	0x200002e0

08004b90 <__malloc_unlock>:
 8004b90:	4801      	ldr	r0, [pc, #4]	; (8004b98 <__malloc_unlock+0x8>)
 8004b92:	f000 b80c 	b.w	8004bae <__retarget_lock_release_recursive>
 8004b96:	bf00      	nop
 8004b98:	200002e0 	.word	0x200002e0

08004b9c <_malloc_usable_size_r>:
 8004b9c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004ba0:	1f18      	subs	r0, r3, #4
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	bfbc      	itt	lt
 8004ba6:	580b      	ldrlt	r3, [r1, r0]
 8004ba8:	18c0      	addlt	r0, r0, r3
 8004baa:	4770      	bx	lr

08004bac <__retarget_lock_acquire_recursive>:
 8004bac:	4770      	bx	lr

08004bae <__retarget_lock_release_recursive>:
 8004bae:	4770      	bx	lr

08004bb0 <_init>:
 8004bb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004bb2:	bf00      	nop
 8004bb4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004bb6:	bc08      	pop	{r3}
 8004bb8:	469e      	mov	lr, r3
 8004bba:	4770      	bx	lr

08004bbc <_fini>:
 8004bbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004bbe:	bf00      	nop
 8004bc0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004bc2:	bc08      	pop	{r3}
 8004bc4:	469e      	mov	lr, r3
 8004bc6:	4770      	bx	lr
