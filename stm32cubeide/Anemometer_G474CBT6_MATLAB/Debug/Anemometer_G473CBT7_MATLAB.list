
Anemometer_G473CBT7_MATLAB.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000148d8  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000065b0  08014ab8  08014ab8  00024ab8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801b068  0801b068  00030584  2**0
                  CONTENTS
  4 .ARM          00000008  0801b068  0801b068  0002b068  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801b070  0801b070  00030584  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801b070  0801b070  0002b070  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801b074  0801b074  0002b074  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000584  20000000  0801b078  00030000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002290  20000584  0801b5fc  00030584  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20002814  0801b5fc  00032814  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030584  2**0
                  CONTENTS, READONLY
 12 .debug_info   00023168  00000000  00000000  000305b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000449c  00000000  00000000  0005371c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001ea8  00000000  00000000  00057bb8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001ce8  00000000  00000000  00059a60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000276eb  00000000  00000000  0005b748  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00025d58  00000000  00000000  00082e33  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000fd21d  00000000  00000000  000a8b8b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001a5da8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000980c  00000000  00000000  001a5df8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000584 	.word	0x20000584
 80001fc:	00000000 	.word	0x00000000
 8000200:	08014aa0 	.word	0x08014aa0

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000588 	.word	0x20000588
 800021c:	08014aa0 	.word	0x08014aa0

08000220 <strlen>:
 8000220:	4603      	mov	r3, r0
 8000222:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000226:	2a00      	cmp	r2, #0
 8000228:	d1fb      	bne.n	8000222 <strlen+0x2>
 800022a:	1a18      	subs	r0, r3, r0
 800022c:	3801      	subs	r0, #1
 800022e:	4770      	bx	lr

08000230 <memchr>:
 8000230:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000234:	2a10      	cmp	r2, #16
 8000236:	db2b      	blt.n	8000290 <memchr+0x60>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	d008      	beq.n	8000250 <memchr+0x20>
 800023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	428b      	cmp	r3, r1
 8000246:	d02d      	beq.n	80002a4 <memchr+0x74>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	b342      	cbz	r2, 80002a0 <memchr+0x70>
 800024e:	d1f6      	bne.n	800023e <memchr+0xe>
 8000250:	b4f0      	push	{r4, r5, r6, r7}
 8000252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800025a:	f022 0407 	bic.w	r4, r2, #7
 800025e:	f07f 0700 	mvns.w	r7, #0
 8000262:	2300      	movs	r3, #0
 8000264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000268:	3c08      	subs	r4, #8
 800026a:	ea85 0501 	eor.w	r5, r5, r1
 800026e:	ea86 0601 	eor.w	r6, r6, r1
 8000272:	fa85 f547 	uadd8	r5, r5, r7
 8000276:	faa3 f587 	sel	r5, r3, r7
 800027a:	fa86 f647 	uadd8	r6, r6, r7
 800027e:	faa5 f687 	sel	r6, r5, r7
 8000282:	b98e      	cbnz	r6, 80002a8 <memchr+0x78>
 8000284:	d1ee      	bne.n	8000264 <memchr+0x34>
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
 8000288:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800028c:	f002 0207 	and.w	r2, r2, #7
 8000290:	b132      	cbz	r2, 80002a0 <memchr+0x70>
 8000292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000296:	3a01      	subs	r2, #1
 8000298:	ea83 0301 	eor.w	r3, r3, r1
 800029c:	b113      	cbz	r3, 80002a4 <memchr+0x74>
 800029e:	d1f8      	bne.n	8000292 <memchr+0x62>
 80002a0:	2000      	movs	r0, #0
 80002a2:	4770      	bx	lr
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	bf06      	itte	eq
 80002ac:	4635      	moveq	r5, r6
 80002ae:	3803      	subeq	r0, #3
 80002b0:	3807      	subne	r0, #7
 80002b2:	f015 0f01 	tst.w	r5, #1
 80002b6:	d107      	bne.n	80002c8 <memchr+0x98>
 80002b8:	3001      	adds	r0, #1
 80002ba:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002be:	bf02      	ittt	eq
 80002c0:	3001      	addeq	r0, #1
 80002c2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002c6:	3001      	addeq	r0, #1
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ca:	3801      	subs	r0, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	; 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	3c01      	subs	r4, #1
 800040c:	bf28      	it	cs
 800040e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000412:	d2e9      	bcs.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpun>:
 8000b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x10>
 8000b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8a:	d10a      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x20>
 8000b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0001 	mov.w	r0, #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2iz>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d215      	bcs.n	8000bde <__aeabi_d2iz+0x36>
 8000bb2:	d511      	bpl.n	8000bd8 <__aeabi_d2iz+0x30>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d912      	bls.n	8000be4 <__aeabi_d2iz+0x3c>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d105      	bne.n	8000bf0 <__aeabi_d2iz+0x48>
 8000be4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	bf08      	it	eq
 8000bea:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_ldivmod>:
 8000c98:	b97b      	cbnz	r3, 8000cba <__aeabi_ldivmod+0x22>
 8000c9a:	b972      	cbnz	r2, 8000cba <__aeabi_ldivmod+0x22>
 8000c9c:	2900      	cmp	r1, #0
 8000c9e:	bfbe      	ittt	lt
 8000ca0:	2000      	movlt	r0, #0
 8000ca2:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 8000ca6:	e006      	blt.n	8000cb6 <__aeabi_ldivmod+0x1e>
 8000ca8:	bf08      	it	eq
 8000caa:	2800      	cmpeq	r0, #0
 8000cac:	bf1c      	itt	ne
 8000cae:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 8000cb2:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000cb6:	f000 b9bf 	b.w	8001038 <__aeabi_idiv0>
 8000cba:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cbe:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cc2:	2900      	cmp	r1, #0
 8000cc4:	db09      	blt.n	8000cda <__aeabi_ldivmod+0x42>
 8000cc6:	2b00      	cmp	r3, #0
 8000cc8:	db1a      	blt.n	8000d00 <__aeabi_ldivmod+0x68>
 8000cca:	f000 f84d 	bl	8000d68 <__udivmoddi4>
 8000cce:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cd2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cd6:	b004      	add	sp, #16
 8000cd8:	4770      	bx	lr
 8000cda:	4240      	negs	r0, r0
 8000cdc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce0:	2b00      	cmp	r3, #0
 8000ce2:	db1b      	blt.n	8000d1c <__aeabi_ldivmod+0x84>
 8000ce4:	f000 f840 	bl	8000d68 <__udivmoddi4>
 8000ce8:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cec:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cf0:	b004      	add	sp, #16
 8000cf2:	4240      	negs	r0, r0
 8000cf4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cf8:	4252      	negs	r2, r2
 8000cfa:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000cfe:	4770      	bx	lr
 8000d00:	4252      	negs	r2, r2
 8000d02:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d06:	f000 f82f 	bl	8000d68 <__udivmoddi4>
 8000d0a:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d0e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d12:	b004      	add	sp, #16
 8000d14:	4240      	negs	r0, r0
 8000d16:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d1a:	4770      	bx	lr
 8000d1c:	4252      	negs	r2, r2
 8000d1e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d22:	f000 f821 	bl	8000d68 <__udivmoddi4>
 8000d26:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d2a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d2e:	b004      	add	sp, #16
 8000d30:	4252      	negs	r2, r2
 8000d32:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d36:	4770      	bx	lr

08000d38 <__aeabi_uldivmod>:
 8000d38:	b953      	cbnz	r3, 8000d50 <__aeabi_uldivmod+0x18>
 8000d3a:	b94a      	cbnz	r2, 8000d50 <__aeabi_uldivmod+0x18>
 8000d3c:	2900      	cmp	r1, #0
 8000d3e:	bf08      	it	eq
 8000d40:	2800      	cmpeq	r0, #0
 8000d42:	bf1c      	itt	ne
 8000d44:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000d48:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000d4c:	f000 b974 	b.w	8001038 <__aeabi_idiv0>
 8000d50:	f1ad 0c08 	sub.w	ip, sp, #8
 8000d54:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000d58:	f000 f806 	bl	8000d68 <__udivmoddi4>
 8000d5c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d60:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d64:	b004      	add	sp, #16
 8000d66:	4770      	bx	lr

08000d68 <__udivmoddi4>:
 8000d68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d6c:	9d08      	ldr	r5, [sp, #32]
 8000d6e:	4604      	mov	r4, r0
 8000d70:	468e      	mov	lr, r1
 8000d72:	2b00      	cmp	r3, #0
 8000d74:	d14d      	bne.n	8000e12 <__udivmoddi4+0xaa>
 8000d76:	428a      	cmp	r2, r1
 8000d78:	4694      	mov	ip, r2
 8000d7a:	d969      	bls.n	8000e50 <__udivmoddi4+0xe8>
 8000d7c:	fab2 f282 	clz	r2, r2
 8000d80:	b152      	cbz	r2, 8000d98 <__udivmoddi4+0x30>
 8000d82:	fa01 f302 	lsl.w	r3, r1, r2
 8000d86:	f1c2 0120 	rsb	r1, r2, #32
 8000d8a:	fa20 f101 	lsr.w	r1, r0, r1
 8000d8e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d92:	ea41 0e03 	orr.w	lr, r1, r3
 8000d96:	4094      	lsls	r4, r2
 8000d98:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d9c:	0c21      	lsrs	r1, r4, #16
 8000d9e:	fbbe f6f8 	udiv	r6, lr, r8
 8000da2:	fa1f f78c 	uxth.w	r7, ip
 8000da6:	fb08 e316 	mls	r3, r8, r6, lr
 8000daa:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000dae:	fb06 f107 	mul.w	r1, r6, r7
 8000db2:	4299      	cmp	r1, r3
 8000db4:	d90a      	bls.n	8000dcc <__udivmoddi4+0x64>
 8000db6:	eb1c 0303 	adds.w	r3, ip, r3
 8000dba:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000dbe:	f080 811f 	bcs.w	8001000 <__udivmoddi4+0x298>
 8000dc2:	4299      	cmp	r1, r3
 8000dc4:	f240 811c 	bls.w	8001000 <__udivmoddi4+0x298>
 8000dc8:	3e02      	subs	r6, #2
 8000dca:	4463      	add	r3, ip
 8000dcc:	1a5b      	subs	r3, r3, r1
 8000dce:	b2a4      	uxth	r4, r4
 8000dd0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000dd4:	fb08 3310 	mls	r3, r8, r0, r3
 8000dd8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ddc:	fb00 f707 	mul.w	r7, r0, r7
 8000de0:	42a7      	cmp	r7, r4
 8000de2:	d90a      	bls.n	8000dfa <__udivmoddi4+0x92>
 8000de4:	eb1c 0404 	adds.w	r4, ip, r4
 8000de8:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000dec:	f080 810a 	bcs.w	8001004 <__udivmoddi4+0x29c>
 8000df0:	42a7      	cmp	r7, r4
 8000df2:	f240 8107 	bls.w	8001004 <__udivmoddi4+0x29c>
 8000df6:	4464      	add	r4, ip
 8000df8:	3802      	subs	r0, #2
 8000dfa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dfe:	1be4      	subs	r4, r4, r7
 8000e00:	2600      	movs	r6, #0
 8000e02:	b11d      	cbz	r5, 8000e0c <__udivmoddi4+0xa4>
 8000e04:	40d4      	lsrs	r4, r2
 8000e06:	2300      	movs	r3, #0
 8000e08:	e9c5 4300 	strd	r4, r3, [r5]
 8000e0c:	4631      	mov	r1, r6
 8000e0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e12:	428b      	cmp	r3, r1
 8000e14:	d909      	bls.n	8000e2a <__udivmoddi4+0xc2>
 8000e16:	2d00      	cmp	r5, #0
 8000e18:	f000 80ef 	beq.w	8000ffa <__udivmoddi4+0x292>
 8000e1c:	2600      	movs	r6, #0
 8000e1e:	e9c5 0100 	strd	r0, r1, [r5]
 8000e22:	4630      	mov	r0, r6
 8000e24:	4631      	mov	r1, r6
 8000e26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e2a:	fab3 f683 	clz	r6, r3
 8000e2e:	2e00      	cmp	r6, #0
 8000e30:	d14a      	bne.n	8000ec8 <__udivmoddi4+0x160>
 8000e32:	428b      	cmp	r3, r1
 8000e34:	d302      	bcc.n	8000e3c <__udivmoddi4+0xd4>
 8000e36:	4282      	cmp	r2, r0
 8000e38:	f200 80f9 	bhi.w	800102e <__udivmoddi4+0x2c6>
 8000e3c:	1a84      	subs	r4, r0, r2
 8000e3e:	eb61 0303 	sbc.w	r3, r1, r3
 8000e42:	2001      	movs	r0, #1
 8000e44:	469e      	mov	lr, r3
 8000e46:	2d00      	cmp	r5, #0
 8000e48:	d0e0      	beq.n	8000e0c <__udivmoddi4+0xa4>
 8000e4a:	e9c5 4e00 	strd	r4, lr, [r5]
 8000e4e:	e7dd      	b.n	8000e0c <__udivmoddi4+0xa4>
 8000e50:	b902      	cbnz	r2, 8000e54 <__udivmoddi4+0xec>
 8000e52:	deff      	udf	#255	; 0xff
 8000e54:	fab2 f282 	clz	r2, r2
 8000e58:	2a00      	cmp	r2, #0
 8000e5a:	f040 8092 	bne.w	8000f82 <__udivmoddi4+0x21a>
 8000e5e:	eba1 010c 	sub.w	r1, r1, ip
 8000e62:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e66:	fa1f fe8c 	uxth.w	lr, ip
 8000e6a:	2601      	movs	r6, #1
 8000e6c:	0c20      	lsrs	r0, r4, #16
 8000e6e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000e72:	fb07 1113 	mls	r1, r7, r3, r1
 8000e76:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e7a:	fb0e f003 	mul.w	r0, lr, r3
 8000e7e:	4288      	cmp	r0, r1
 8000e80:	d908      	bls.n	8000e94 <__udivmoddi4+0x12c>
 8000e82:	eb1c 0101 	adds.w	r1, ip, r1
 8000e86:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000e8a:	d202      	bcs.n	8000e92 <__udivmoddi4+0x12a>
 8000e8c:	4288      	cmp	r0, r1
 8000e8e:	f200 80cb 	bhi.w	8001028 <__udivmoddi4+0x2c0>
 8000e92:	4643      	mov	r3, r8
 8000e94:	1a09      	subs	r1, r1, r0
 8000e96:	b2a4      	uxth	r4, r4
 8000e98:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e9c:	fb07 1110 	mls	r1, r7, r0, r1
 8000ea0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000ea4:	fb0e fe00 	mul.w	lr, lr, r0
 8000ea8:	45a6      	cmp	lr, r4
 8000eaa:	d908      	bls.n	8000ebe <__udivmoddi4+0x156>
 8000eac:	eb1c 0404 	adds.w	r4, ip, r4
 8000eb0:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000eb4:	d202      	bcs.n	8000ebc <__udivmoddi4+0x154>
 8000eb6:	45a6      	cmp	lr, r4
 8000eb8:	f200 80bb 	bhi.w	8001032 <__udivmoddi4+0x2ca>
 8000ebc:	4608      	mov	r0, r1
 8000ebe:	eba4 040e 	sub.w	r4, r4, lr
 8000ec2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000ec6:	e79c      	b.n	8000e02 <__udivmoddi4+0x9a>
 8000ec8:	f1c6 0720 	rsb	r7, r6, #32
 8000ecc:	40b3      	lsls	r3, r6
 8000ece:	fa22 fc07 	lsr.w	ip, r2, r7
 8000ed2:	ea4c 0c03 	orr.w	ip, ip, r3
 8000ed6:	fa20 f407 	lsr.w	r4, r0, r7
 8000eda:	fa01 f306 	lsl.w	r3, r1, r6
 8000ede:	431c      	orrs	r4, r3
 8000ee0:	40f9      	lsrs	r1, r7
 8000ee2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ee6:	fa00 f306 	lsl.w	r3, r0, r6
 8000eea:	fbb1 f8f9 	udiv	r8, r1, r9
 8000eee:	0c20      	lsrs	r0, r4, #16
 8000ef0:	fa1f fe8c 	uxth.w	lr, ip
 8000ef4:	fb09 1118 	mls	r1, r9, r8, r1
 8000ef8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000efc:	fb08 f00e 	mul.w	r0, r8, lr
 8000f00:	4288      	cmp	r0, r1
 8000f02:	fa02 f206 	lsl.w	r2, r2, r6
 8000f06:	d90b      	bls.n	8000f20 <__udivmoddi4+0x1b8>
 8000f08:	eb1c 0101 	adds.w	r1, ip, r1
 8000f0c:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000f10:	f080 8088 	bcs.w	8001024 <__udivmoddi4+0x2bc>
 8000f14:	4288      	cmp	r0, r1
 8000f16:	f240 8085 	bls.w	8001024 <__udivmoddi4+0x2bc>
 8000f1a:	f1a8 0802 	sub.w	r8, r8, #2
 8000f1e:	4461      	add	r1, ip
 8000f20:	1a09      	subs	r1, r1, r0
 8000f22:	b2a4      	uxth	r4, r4
 8000f24:	fbb1 f0f9 	udiv	r0, r1, r9
 8000f28:	fb09 1110 	mls	r1, r9, r0, r1
 8000f2c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000f30:	fb00 fe0e 	mul.w	lr, r0, lr
 8000f34:	458e      	cmp	lr, r1
 8000f36:	d908      	bls.n	8000f4a <__udivmoddi4+0x1e2>
 8000f38:	eb1c 0101 	adds.w	r1, ip, r1
 8000f3c:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000f40:	d26c      	bcs.n	800101c <__udivmoddi4+0x2b4>
 8000f42:	458e      	cmp	lr, r1
 8000f44:	d96a      	bls.n	800101c <__udivmoddi4+0x2b4>
 8000f46:	3802      	subs	r0, #2
 8000f48:	4461      	add	r1, ip
 8000f4a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000f4e:	fba0 9402 	umull	r9, r4, r0, r2
 8000f52:	eba1 010e 	sub.w	r1, r1, lr
 8000f56:	42a1      	cmp	r1, r4
 8000f58:	46c8      	mov	r8, r9
 8000f5a:	46a6      	mov	lr, r4
 8000f5c:	d356      	bcc.n	800100c <__udivmoddi4+0x2a4>
 8000f5e:	d053      	beq.n	8001008 <__udivmoddi4+0x2a0>
 8000f60:	b15d      	cbz	r5, 8000f7a <__udivmoddi4+0x212>
 8000f62:	ebb3 0208 	subs.w	r2, r3, r8
 8000f66:	eb61 010e 	sbc.w	r1, r1, lr
 8000f6a:	fa01 f707 	lsl.w	r7, r1, r7
 8000f6e:	fa22 f306 	lsr.w	r3, r2, r6
 8000f72:	40f1      	lsrs	r1, r6
 8000f74:	431f      	orrs	r7, r3
 8000f76:	e9c5 7100 	strd	r7, r1, [r5]
 8000f7a:	2600      	movs	r6, #0
 8000f7c:	4631      	mov	r1, r6
 8000f7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f82:	f1c2 0320 	rsb	r3, r2, #32
 8000f86:	40d8      	lsrs	r0, r3
 8000f88:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f8c:	fa21 f303 	lsr.w	r3, r1, r3
 8000f90:	4091      	lsls	r1, r2
 8000f92:	4301      	orrs	r1, r0
 8000f94:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f98:	fa1f fe8c 	uxth.w	lr, ip
 8000f9c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000fa0:	fb07 3610 	mls	r6, r7, r0, r3
 8000fa4:	0c0b      	lsrs	r3, r1, #16
 8000fa6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000faa:	fb00 f60e 	mul.w	r6, r0, lr
 8000fae:	429e      	cmp	r6, r3
 8000fb0:	fa04 f402 	lsl.w	r4, r4, r2
 8000fb4:	d908      	bls.n	8000fc8 <__udivmoddi4+0x260>
 8000fb6:	eb1c 0303 	adds.w	r3, ip, r3
 8000fba:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000fbe:	d22f      	bcs.n	8001020 <__udivmoddi4+0x2b8>
 8000fc0:	429e      	cmp	r6, r3
 8000fc2:	d92d      	bls.n	8001020 <__udivmoddi4+0x2b8>
 8000fc4:	3802      	subs	r0, #2
 8000fc6:	4463      	add	r3, ip
 8000fc8:	1b9b      	subs	r3, r3, r6
 8000fca:	b289      	uxth	r1, r1
 8000fcc:	fbb3 f6f7 	udiv	r6, r3, r7
 8000fd0:	fb07 3316 	mls	r3, r7, r6, r3
 8000fd4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000fd8:	fb06 f30e 	mul.w	r3, r6, lr
 8000fdc:	428b      	cmp	r3, r1
 8000fde:	d908      	bls.n	8000ff2 <__udivmoddi4+0x28a>
 8000fe0:	eb1c 0101 	adds.w	r1, ip, r1
 8000fe4:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000fe8:	d216      	bcs.n	8001018 <__udivmoddi4+0x2b0>
 8000fea:	428b      	cmp	r3, r1
 8000fec:	d914      	bls.n	8001018 <__udivmoddi4+0x2b0>
 8000fee:	3e02      	subs	r6, #2
 8000ff0:	4461      	add	r1, ip
 8000ff2:	1ac9      	subs	r1, r1, r3
 8000ff4:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000ff8:	e738      	b.n	8000e6c <__udivmoddi4+0x104>
 8000ffa:	462e      	mov	r6, r5
 8000ffc:	4628      	mov	r0, r5
 8000ffe:	e705      	b.n	8000e0c <__udivmoddi4+0xa4>
 8001000:	4606      	mov	r6, r0
 8001002:	e6e3      	b.n	8000dcc <__udivmoddi4+0x64>
 8001004:	4618      	mov	r0, r3
 8001006:	e6f8      	b.n	8000dfa <__udivmoddi4+0x92>
 8001008:	454b      	cmp	r3, r9
 800100a:	d2a9      	bcs.n	8000f60 <__udivmoddi4+0x1f8>
 800100c:	ebb9 0802 	subs.w	r8, r9, r2
 8001010:	eb64 0e0c 	sbc.w	lr, r4, ip
 8001014:	3801      	subs	r0, #1
 8001016:	e7a3      	b.n	8000f60 <__udivmoddi4+0x1f8>
 8001018:	4646      	mov	r6, r8
 800101a:	e7ea      	b.n	8000ff2 <__udivmoddi4+0x28a>
 800101c:	4620      	mov	r0, r4
 800101e:	e794      	b.n	8000f4a <__udivmoddi4+0x1e2>
 8001020:	4640      	mov	r0, r8
 8001022:	e7d1      	b.n	8000fc8 <__udivmoddi4+0x260>
 8001024:	46d0      	mov	r8, sl
 8001026:	e77b      	b.n	8000f20 <__udivmoddi4+0x1b8>
 8001028:	3b02      	subs	r3, #2
 800102a:	4461      	add	r1, ip
 800102c:	e732      	b.n	8000e94 <__udivmoddi4+0x12c>
 800102e:	4630      	mov	r0, r6
 8001030:	e709      	b.n	8000e46 <__udivmoddi4+0xde>
 8001032:	4464      	add	r4, ip
 8001034:	3802      	subs	r0, #2
 8001036:	e742      	b.n	8000ebe <__udivmoddi4+0x156>

08001038 <__aeabi_idiv0>:
 8001038:	4770      	bx	lr
 800103a:	bf00      	nop

0800103c <Error>:
extern char str1[100];
BME280_CalibData CalibData;
int32_t t_fine;
//------------------------------------------------
void Error(void)
{
 800103c:	b480      	push	{r7}
 800103e:	af00      	add	r7, sp, #0
}
 8001040:	bf00      	nop
 8001042:	46bd      	mov	sp, r7
 8001044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001048:	4770      	bx	lr
	...

0800104c <I2Cx_WriteData>:
//------------------------------------------------
static void I2Cx_WriteData(uint16_t Addr, uint8_t Reg, uint8_t Value)
{
 800104c:	b580      	push	{r7, lr}
 800104e:	b088      	sub	sp, #32
 8001050:	af04      	add	r7, sp, #16
 8001052:	4603      	mov	r3, r0
 8001054:	80fb      	strh	r3, [r7, #6]
 8001056:	460b      	mov	r3, r1
 8001058:	717b      	strb	r3, [r7, #5]
 800105a:	4613      	mov	r3, r2
 800105c:	713b      	strb	r3, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800105e:	2300      	movs	r3, #0
 8001060:	73fb      	strb	r3, [r7, #15]
  status = HAL_I2C_Mem_Write(&hi2c1, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, &Value, 1, 0x10000);
 8001062:	797b      	ldrb	r3, [r7, #5]
 8001064:	b29a      	uxth	r2, r3
 8001066:	88f9      	ldrh	r1, [r7, #6]
 8001068:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800106c:	9302      	str	r3, [sp, #8]
 800106e:	2301      	movs	r3, #1
 8001070:	9301      	str	r3, [sp, #4]
 8001072:	1d3b      	adds	r3, r7, #4
 8001074:	9300      	str	r3, [sp, #0]
 8001076:	2301      	movs	r3, #1
 8001078:	4806      	ldr	r0, [pc, #24]	; (8001094 <I2Cx_WriteData+0x48>)
 800107a:	f00b f99f 	bl	800c3bc <HAL_I2C_Mem_Write>
 800107e:	4603      	mov	r3, r0
 8001080:	73fb      	strb	r3, [r7, #15]
  if(status != HAL_OK) Error();
 8001082:	7bfb      	ldrb	r3, [r7, #15]
 8001084:	2b00      	cmp	r3, #0
 8001086:	d001      	beq.n	800108c <I2Cx_WriteData+0x40>
 8001088:	f7ff ffd8 	bl	800103c <Error>
}
 800108c:	bf00      	nop
 800108e:	3710      	adds	r7, #16
 8001090:	46bd      	mov	sp, r7
 8001092:	bd80      	pop	{r7, pc}
 8001094:	200007d4 	.word	0x200007d4

08001098 <I2Cx_ReadData>:
//------------------------------------------------
static uint8_t I2Cx_ReadData(uint16_t Addr, uint8_t Reg)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	b088      	sub	sp, #32
 800109c:	af04      	add	r7, sp, #16
 800109e:	4603      	mov	r3, r0
 80010a0:	460a      	mov	r2, r1
 80010a2:	80fb      	strh	r3, [r7, #6]
 80010a4:	4613      	mov	r3, r2
 80010a6:	717b      	strb	r3, [r7, #5]
  HAL_StatusTypeDef status = HAL_OK;
 80010a8:	2300      	movs	r3, #0
 80010aa:	73fb      	strb	r3, [r7, #15]
  uint8_t value = 0;
 80010ac:	2300      	movs	r3, #0
 80010ae:	73bb      	strb	r3, [r7, #14]
  status = HAL_I2C_Mem_Read(&hi2c1, Addr, Reg, I2C_MEMADD_SIZE_8BIT, &value, 1, 0x10000);
 80010b0:	797b      	ldrb	r3, [r7, #5]
 80010b2:	b29a      	uxth	r2, r3
 80010b4:	88f9      	ldrh	r1, [r7, #6]
 80010b6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80010ba:	9302      	str	r3, [sp, #8]
 80010bc:	2301      	movs	r3, #1
 80010be:	9301      	str	r3, [sp, #4]
 80010c0:	f107 030e 	add.w	r3, r7, #14
 80010c4:	9300      	str	r3, [sp, #0]
 80010c6:	2301      	movs	r3, #1
 80010c8:	4807      	ldr	r0, [pc, #28]	; (80010e8 <I2Cx_ReadData+0x50>)
 80010ca:	f00b fa8b 	bl	800c5e4 <HAL_I2C_Mem_Read>
 80010ce:	4603      	mov	r3, r0
 80010d0:	73fb      	strb	r3, [r7, #15]
  if(status != HAL_OK) Error();
 80010d2:	7bfb      	ldrb	r3, [r7, #15]
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d001      	beq.n	80010dc <I2Cx_ReadData+0x44>
 80010d8:	f7ff ffb0 	bl	800103c <Error>
  return value;
 80010dc:	7bbb      	ldrb	r3, [r7, #14]
}
 80010de:	4618      	mov	r0, r3
 80010e0:	3710      	adds	r7, #16
 80010e2:	46bd      	mov	sp, r7
 80010e4:	bd80      	pop	{r7, pc}
 80010e6:	bf00      	nop
 80010e8:	200007d4 	.word	0x200007d4

080010ec <I2Cx_ReadData16>:
//------------------------------------------------
static void I2Cx_ReadData16(uint16_t Addr, uint8_t Reg, uint16_t *Value)
{
 80010ec:	b580      	push	{r7, lr}
 80010ee:	b088      	sub	sp, #32
 80010f0:	af04      	add	r7, sp, #16
 80010f2:	4603      	mov	r3, r0
 80010f4:	603a      	str	r2, [r7, #0]
 80010f6:	80fb      	strh	r3, [r7, #6]
 80010f8:	460b      	mov	r3, r1
 80010fa:	717b      	strb	r3, [r7, #5]
  HAL_StatusTypeDef status = HAL_OK;
 80010fc:	2300      	movs	r3, #0
 80010fe:	73fb      	strb	r3, [r7, #15]
  status = HAL_I2C_Mem_Read(&hi2c1, Addr, Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)Value, 2, 0x10000);
 8001100:	797b      	ldrb	r3, [r7, #5]
 8001102:	b29a      	uxth	r2, r3
 8001104:	88f9      	ldrh	r1, [r7, #6]
 8001106:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800110a:	9302      	str	r3, [sp, #8]
 800110c:	2302      	movs	r3, #2
 800110e:	9301      	str	r3, [sp, #4]
 8001110:	683b      	ldr	r3, [r7, #0]
 8001112:	9300      	str	r3, [sp, #0]
 8001114:	2301      	movs	r3, #1
 8001116:	4807      	ldr	r0, [pc, #28]	; (8001134 <I2Cx_ReadData16+0x48>)
 8001118:	f00b fa64 	bl	800c5e4 <HAL_I2C_Mem_Read>
 800111c:	4603      	mov	r3, r0
 800111e:	73fb      	strb	r3, [r7, #15]
  if(status != HAL_OK) Error();
 8001120:	7bfb      	ldrb	r3, [r7, #15]
 8001122:	2b00      	cmp	r3, #0
 8001124:	d001      	beq.n	800112a <I2Cx_ReadData16+0x3e>
 8001126:	f7ff ff89 	bl	800103c <Error>
}
 800112a:	bf00      	nop
 800112c:	3710      	adds	r7, #16
 800112e:	46bd      	mov	sp, r7
 8001130:	bd80      	pop	{r7, pc}
 8001132:	bf00      	nop
 8001134:	200007d4 	.word	0x200007d4

08001138 <BME280_WriteReg>:
  status = HAL_I2C_Mem_Read(&hi2c1, Addr, Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)Value, 3, 0x10000);
  if(status != HAL_OK) Error();
}
//------------------------------------------------
void BME280_WriteReg(uint8_t Reg, uint8_t Value)
{
 8001138:	b580      	push	{r7, lr}
 800113a:	b082      	sub	sp, #8
 800113c:	af00      	add	r7, sp, #0
 800113e:	4603      	mov	r3, r0
 8001140:	460a      	mov	r2, r1
 8001142:	71fb      	strb	r3, [r7, #7]
 8001144:	4613      	mov	r3, r2
 8001146:	71bb      	strb	r3, [r7, #6]
  I2Cx_WriteData(BME280_ADDRESS, Reg, Value);
 8001148:	79ba      	ldrb	r2, [r7, #6]
 800114a:	79fb      	ldrb	r3, [r7, #7]
 800114c:	4619      	mov	r1, r3
 800114e:	20ec      	movs	r0, #236	; 0xec
 8001150:	f7ff ff7c 	bl	800104c <I2Cx_WriteData>
}
 8001154:	bf00      	nop
 8001156:	3708      	adds	r7, #8
 8001158:	46bd      	mov	sp, r7
 800115a:	bd80      	pop	{r7, pc}

0800115c <BME280_ReadReg>:
//------------------------------------------------
uint8_t BME280_ReadReg(uint8_t Reg)
{
 800115c:	b580      	push	{r7, lr}
 800115e:	b084      	sub	sp, #16
 8001160:	af00      	add	r7, sp, #0
 8001162:	4603      	mov	r3, r0
 8001164:	71fb      	strb	r3, [r7, #7]
  uint8_t res = I2Cx_ReadData(BME280_ADDRESS,Reg);
 8001166:	79fb      	ldrb	r3, [r7, #7]
 8001168:	4619      	mov	r1, r3
 800116a:	20ec      	movs	r0, #236	; 0xec
 800116c:	f7ff ff94 	bl	8001098 <I2Cx_ReadData>
 8001170:	4603      	mov	r3, r0
 8001172:	73fb      	strb	r3, [r7, #15]
  return res;
 8001174:	7bfb      	ldrb	r3, [r7, #15]
}
 8001176:	4618      	mov	r0, r3
 8001178:	3710      	adds	r7, #16
 800117a:	46bd      	mov	sp, r7
 800117c:	bd80      	pop	{r7, pc}

0800117e <BME280_ReadReg_U16>:
//------------------------------------------------
void BME280_ReadReg_U16(uint8_t Reg, uint16_t *Value)
{
 800117e:	b580      	push	{r7, lr}
 8001180:	b082      	sub	sp, #8
 8001182:	af00      	add	r7, sp, #0
 8001184:	4603      	mov	r3, r0
 8001186:	6039      	str	r1, [r7, #0]
 8001188:	71fb      	strb	r3, [r7, #7]
  I2Cx_ReadData16(BME280_ADDRESS,Reg,Value);
 800118a:	79fb      	ldrb	r3, [r7, #7]
 800118c:	683a      	ldr	r2, [r7, #0]
 800118e:	4619      	mov	r1, r3
 8001190:	20ec      	movs	r0, #236	; 0xec
 8001192:	f7ff ffab 	bl	80010ec <I2Cx_ReadData16>
}
 8001196:	bf00      	nop
 8001198:	3708      	adds	r7, #8
 800119a:	46bd      	mov	sp, r7
 800119c:	bd80      	pop	{r7, pc}

0800119e <BME280_ReadReg_S16>:
//------------------------------------------------
void BME280_ReadReg_S16(uint8_t Reg, int16_t *Value)
{
 800119e:	b580      	push	{r7, lr}
 80011a0:	b082      	sub	sp, #8
 80011a2:	af00      	add	r7, sp, #0
 80011a4:	4603      	mov	r3, r0
 80011a6:	6039      	str	r1, [r7, #0]
 80011a8:	71fb      	strb	r3, [r7, #7]
  I2Cx_ReadData16(BME280_ADDRESS,Reg, (uint16_t*) Value);
 80011aa:	79fb      	ldrb	r3, [r7, #7]
 80011ac:	683a      	ldr	r2, [r7, #0]
 80011ae:	4619      	mov	r1, r3
 80011b0:	20ec      	movs	r0, #236	; 0xec
 80011b2:	f7ff ff9b 	bl	80010ec <I2Cx_ReadData16>
}
 80011b6:	bf00      	nop
 80011b8:	3708      	adds	r7, #8
 80011ba:	46bd      	mov	sp, r7
 80011bc:	bd80      	pop	{r7, pc}
	...

080011c0 <BME280_ReadReg_BE_S16>:
//------------------------------------------------
uint16_t BME280_ReadReg_BE_S16(uint8_t Reg)
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	b088      	sub	sp, #32
 80011c4:	af04      	add	r7, sp, #16
 80011c6:	4603      	mov	r3, r0
 80011c8:	71fb      	strb	r3, [r7, #7]
	uint8_t buffer_8[2];
	HAL_StatusTypeDef status = HAL_OK;
 80011ca:	2300      	movs	r3, #0
 80011cc:	73fb      	strb	r3, [r7, #15]
	status = HAL_I2C_Mem_Read(&hi2c1, BME280_ADDRESS, Reg, I2C_MEMADD_SIZE_8BIT, buffer_8, 2, 0x10000);
 80011ce:	79fb      	ldrb	r3, [r7, #7]
 80011d0:	b29a      	uxth	r2, r3
 80011d2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80011d6:	9302      	str	r3, [sp, #8]
 80011d8:	2302      	movs	r3, #2
 80011da:	9301      	str	r3, [sp, #4]
 80011dc:	f107 030c 	add.w	r3, r7, #12
 80011e0:	9300      	str	r3, [sp, #0]
 80011e2:	2301      	movs	r3, #1
 80011e4:	21ec      	movs	r1, #236	; 0xec
 80011e6:	480b      	ldr	r0, [pc, #44]	; (8001214 <BME280_ReadReg_BE_S16+0x54>)
 80011e8:	f00b f9fc 	bl	800c5e4 <HAL_I2C_Mem_Read>
 80011ec:	4603      	mov	r3, r0
 80011ee:	73fb      	strb	r3, [r7, #15]
	if(status != HAL_OK) {
 80011f0:	7bfb      	ldrb	r3, [r7, #15]
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d001      	beq.n	80011fa <BME280_ReadReg_BE_S16+0x3a>
		Error();
 80011f6:	f7ff ff21 	bl	800103c <Error>
	}
	return (uint16_t)(buffer_8[0]) << 8 | (uint16_t)(buffer_8[1]);
 80011fa:	7b3b      	ldrb	r3, [r7, #12]
 80011fc:	021b      	lsls	r3, r3, #8
 80011fe:	b21a      	sxth	r2, r3
 8001200:	7b7b      	ldrb	r3, [r7, #13]
 8001202:	b21b      	sxth	r3, r3
 8001204:	4313      	orrs	r3, r2
 8001206:	b21b      	sxth	r3, r3
 8001208:	b29b      	uxth	r3, r3
}
 800120a:	4618      	mov	r0, r3
 800120c:	3710      	adds	r7, #16
 800120e:	46bd      	mov	sp, r7
 8001210:	bd80      	pop	{r7, pc}
 8001212:	bf00      	nop
 8001214:	200007d4 	.word	0x200007d4

08001218 <BME280_ReadReg_BE_U24>:
{
  I2Cx_ReadData24(BME280_ADDRESS,Reg,Value);
  *(uint32_t *) Value &= 0x00FFFFFF;
}
//------------------------------------------------
uint32_t BME280_ReadReg_BE_U24(uint8_t Reg) {
 8001218:	b580      	push	{r7, lr}
 800121a:	b088      	sub	sp, #32
 800121c:	af04      	add	r7, sp, #16
 800121e:	4603      	mov	r3, r0
 8001220:	71fb      	strb	r3, [r7, #7]
	uint8_t buffer_8[3];
	HAL_StatusTypeDef status = HAL_OK;
 8001222:	2300      	movs	r3, #0
 8001224:	73fb      	strb	r3, [r7, #15]
	status = HAL_I2C_Mem_Read(&hi2c1, BME280_ADDRESS, Reg, I2C_MEMADD_SIZE_8BIT, buffer_8, 3, 0x10000);
 8001226:	79fb      	ldrb	r3, [r7, #7]
 8001228:	b29a      	uxth	r2, r3
 800122a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800122e:	9302      	str	r3, [sp, #8]
 8001230:	2303      	movs	r3, #3
 8001232:	9301      	str	r3, [sp, #4]
 8001234:	f107 030c 	add.w	r3, r7, #12
 8001238:	9300      	str	r3, [sp, #0]
 800123a:	2301      	movs	r3, #1
 800123c:	21ec      	movs	r1, #236	; 0xec
 800123e:	480a      	ldr	r0, [pc, #40]	; (8001268 <BME280_ReadReg_BE_U24+0x50>)
 8001240:	f00b f9d0 	bl	800c5e4 <HAL_I2C_Mem_Read>
 8001244:	4603      	mov	r3, r0
 8001246:	73fb      	strb	r3, [r7, #15]
	if(status != HAL_OK) {
 8001248:	7bfb      	ldrb	r3, [r7, #15]
 800124a:	2b00      	cmp	r3, #0
 800124c:	d001      	beq.n	8001252 <BME280_ReadReg_BE_U24+0x3a>
		Error();
 800124e:	f7ff fef5 	bl	800103c <Error>
	}
	return (uint32_t) (buffer_8[0]) << 16 | (uint32_t) (buffer_8[1]) << 8 | (uint32_t) (buffer_8[2]);
 8001252:	7b3b      	ldrb	r3, [r7, #12]
 8001254:	041a      	lsls	r2, r3, #16
 8001256:	7b7b      	ldrb	r3, [r7, #13]
 8001258:	021b      	lsls	r3, r3, #8
 800125a:	4313      	orrs	r3, r2
 800125c:	7bba      	ldrb	r2, [r7, #14]
 800125e:	4313      	orrs	r3, r2
}
 8001260:	4618      	mov	r0, r3
 8001262:	3710      	adds	r7, #16
 8001264:	46bd      	mov	sp, r7
 8001266:	bd80      	pop	{r7, pc}
 8001268:	200007d4 	.word	0x200007d4

0800126c <BME280_ReadTemperature>:
//------------------------------------------------
float BME280_ReadTemperature(void)
{
 800126c:	b580      	push	{r7, lr}
 800126e:	b084      	sub	sp, #16
 8001270:	af00      	add	r7, sp, #0
	int32_t var1, var2;
	int32_t adc_T = BME280_ReadReg_BE_U24(BME280_REGISTER_TEMPDATA);
 8001272:	20fa      	movs	r0, #250	; 0xfa
 8001274:	f7ff ffd0 	bl	8001218 <BME280_ReadReg_BE_U24>
 8001278:	4603      	mov	r3, r0
 800127a:	60fb      	str	r3, [r7, #12]

	if ( adc_T == 0x800000) {
 800127c:	68fb      	ldr	r3, [r7, #12]
 800127e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8001282:	d102      	bne.n	800128a <BME280_ReadTemperature+0x1e>
		return NAN;
 8001284:	ed9f 7a2e 	vldr	s14, [pc, #184]	; 8001340 <BME280_ReadTemperature+0xd4>
 8001288:	e052      	b.n	8001330 <BME280_ReadTemperature+0xc4>
	}
	adc_T >>= 4;
 800128a:	68fb      	ldr	r3, [r7, #12]
 800128c:	111b      	asrs	r3, r3, #4
 800128e:	60fb      	str	r3, [r7, #12]
	var1 = (int32_t)((adc_T / 8) - ((int32_t)CalibData.dig_T1 * 2));
 8001290:	68fb      	ldr	r3, [r7, #12]
 8001292:	2b00      	cmp	r3, #0
 8001294:	da00      	bge.n	8001298 <BME280_ReadTemperature+0x2c>
 8001296:	3307      	adds	r3, #7
 8001298:	10db      	asrs	r3, r3, #3
 800129a:	461a      	mov	r2, r3
 800129c:	4b29      	ldr	r3, [pc, #164]	; (8001344 <BME280_ReadTemperature+0xd8>)
 800129e:	881b      	ldrh	r3, [r3, #0]
 80012a0:	005b      	lsls	r3, r3, #1
 80012a2:	1ad3      	subs	r3, r2, r3
 80012a4:	60bb      	str	r3, [r7, #8]
  	var1 = (var1 * ((int32_t)CalibData.dig_T2)) / 2048;
 80012a6:	4b27      	ldr	r3, [pc, #156]	; (8001344 <BME280_ReadTemperature+0xd8>)
 80012a8:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80012ac:	461a      	mov	r2, r3
 80012ae:	68bb      	ldr	r3, [r7, #8]
 80012b0:	fb02 f303 	mul.w	r3, r2, r3
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	da01      	bge.n	80012bc <BME280_ReadTemperature+0x50>
 80012b8:	f203 73ff 	addw	r3, r3, #2047	; 0x7ff
 80012bc:	12db      	asrs	r3, r3, #11
 80012be:	60bb      	str	r3, [r7, #8]
  	var2 = (int32_t)((adc_T / 16) - ((int32_t)CalibData.dig_T1));
 80012c0:	68fb      	ldr	r3, [r7, #12]
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	da00      	bge.n	80012c8 <BME280_ReadTemperature+0x5c>
 80012c6:	330f      	adds	r3, #15
 80012c8:	111b      	asrs	r3, r3, #4
 80012ca:	461a      	mov	r2, r3
 80012cc:	4b1d      	ldr	r3, [pc, #116]	; (8001344 <BME280_ReadTemperature+0xd8>)
 80012ce:	881b      	ldrh	r3, [r3, #0]
 80012d0:	1ad3      	subs	r3, r2, r3
 80012d2:	607b      	str	r3, [r7, #4]
  	var2 = (((var2 * var2) / 4096) * ((int32_t)CalibData.dig_T3)) / 16384;
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	fb03 f303 	mul.w	r3, r3, r3
 80012da:	2b00      	cmp	r3, #0
 80012dc:	da01      	bge.n	80012e2 <BME280_ReadTemperature+0x76>
 80012de:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
 80012e2:	131b      	asrs	r3, r3, #12
 80012e4:	461a      	mov	r2, r3
 80012e6:	4b17      	ldr	r3, [pc, #92]	; (8001344 <BME280_ReadTemperature+0xd8>)
 80012e8:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80012ec:	fb02 f303 	mul.w	r3, r2, r3
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	da02      	bge.n	80012fa <BME280_ReadTemperature+0x8e>
 80012f4:	f503 537f 	add.w	r3, r3, #16320	; 0x3fc0
 80012f8:	333f      	adds	r3, #63	; 0x3f
 80012fa:	139b      	asrs	r3, r3, #14
 80012fc:	607b      	str	r3, [r7, #4]
    t_fine = var1 + var2;
 80012fe:	68ba      	ldr	r2, [r7, #8]
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	4413      	add	r3, r2
 8001304:	4a10      	ldr	r2, [pc, #64]	; (8001348 <BME280_ReadTemperature+0xdc>)
 8001306:	6013      	str	r3, [r2, #0]
	int32_t T = (t_fine * 5 + 128) / 256;
 8001308:	4b0f      	ldr	r3, [pc, #60]	; (8001348 <BME280_ReadTemperature+0xdc>)
 800130a:	681a      	ldr	r2, [r3, #0]
 800130c:	4613      	mov	r3, r2
 800130e:	009b      	lsls	r3, r3, #2
 8001310:	4413      	add	r3, r2
 8001312:	3380      	adds	r3, #128	; 0x80
 8001314:	2b00      	cmp	r3, #0
 8001316:	da00      	bge.n	800131a <BME280_ReadTemperature+0xae>
 8001318:	33ff      	adds	r3, #255	; 0xff
 800131a:	121b      	asrs	r3, r3, #8
 800131c:	603b      	str	r3, [r7, #0]

	return (float) T / 100;
 800131e:	683b      	ldr	r3, [r7, #0]
 8001320:	ee07 3a90 	vmov	s15, r3
 8001324:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001328:	eddf 6a08 	vldr	s13, [pc, #32]	; 800134c <BME280_ReadTemperature+0xe0>
 800132c:	ee87 7aa6 	vdiv.f32	s14, s15, s13
}
 8001330:	eef0 7a47 	vmov.f32	s15, s14
 8001334:	eeb0 0a67 	vmov.f32	s0, s15
 8001338:	3710      	adds	r7, #16
 800133a:	46bd      	mov	sp, r7
 800133c:	bd80      	pop	{r7, pc}
 800133e:	bf00      	nop
 8001340:	7fc00000 	.word	0x7fc00000
 8001344:	200005a0 	.word	0x200005a0
 8001348:	200005c4 	.word	0x200005c4
 800134c:	42c80000 	.word	0x42c80000

08001350 <BME280_ReadPressure>:
//------------------------------------------------
float BME280_ReadPressure(void)
{
 8001350:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001354:	b0da      	sub	sp, #360	; 0x168
 8001356:	af00      	add	r7, sp, #0
	int64_t var1, var2, var3, var4;
	BME280_ReadTemperature(); // must be done first to get t_fine
 8001358:	f7ff ff88 	bl	800126c <BME280_ReadTemperature>
	int32_t adc_P = BME280_ReadReg_BE_U24(BME280_REGISTER_PRESSUREDATA);
 800135c:	20f7      	movs	r0, #247	; 0xf7
 800135e:	f7ff ff5b 	bl	8001218 <BME280_ReadReg_BE_U24>
 8001362:	4603      	mov	r3, r0
 8001364:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
	adc_P >>= 4;
 8001368:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 800136c:	111b      	asrs	r3, r3, #4
 800136e:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
	var1 = ((int64_t)t_fine) - 128000;
 8001372:	4bbb      	ldr	r3, [pc, #748]	; (8001660 <BME280_ReadPressure+0x310>)
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	17da      	asrs	r2, r3, #31
 8001378:	4698      	mov	r8, r3
 800137a:	4691      	mov	r9, r2
 800137c:	f5b8 3afa 	subs.w	sl, r8, #128000	; 0x1f400
 8001380:	f149 3bff 	adc.w	fp, r9, #4294967295	; 0xffffffff
 8001384:	e9c7 ab56 	strd	sl, fp, [r7, #344]	; 0x158
	var2 = var1 * var1 * (int64_t)CalibData.dig_P6;
 8001388:	f8d7 215c 	ldr.w	r2, [r7, #348]	; 0x15c
 800138c:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8001390:	fb03 f102 	mul.w	r1, r3, r2
 8001394:	f8d7 215c 	ldr.w	r2, [r7, #348]	; 0x15c
 8001398:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 800139c:	fb02 f303 	mul.w	r3, r2, r3
 80013a0:	18ca      	adds	r2, r1, r3
 80013a2:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 80013a6:	fba3 4503 	umull	r4, r5, r3, r3
 80013aa:	1953      	adds	r3, r2, r5
 80013ac:	461d      	mov	r5, r3
 80013ae:	4bad      	ldr	r3, [pc, #692]	; (8001664 <BME280_ReadPressure+0x314>)
 80013b0:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 80013b4:	b21b      	sxth	r3, r3
 80013b6:	17da      	asrs	r2, r3, #31
 80013b8:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80013bc:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80013c0:	e9d7 013a 	ldrd	r0, r1, [r7, #232]	; 0xe8
 80013c4:	4603      	mov	r3, r0
 80013c6:	fb03 f205 	mul.w	r2, r3, r5
 80013ca:	460b      	mov	r3, r1
 80013cc:	fb04 f303 	mul.w	r3, r4, r3
 80013d0:	4413      	add	r3, r2
 80013d2:	4602      	mov	r2, r0
 80013d4:	fba4 1202 	umull	r1, r2, r4, r2
 80013d8:	f8c7 20f4 	str.w	r2, [r7, #244]	; 0xf4
 80013dc:	460a      	mov	r2, r1
 80013de:	f8c7 20f0 	str.w	r2, [r7, #240]	; 0xf0
 80013e2:	f8d7 20f4 	ldr.w	r2, [r7, #244]	; 0xf4
 80013e6:	4413      	add	r3, r2
 80013e8:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80013ec:	e9d7 343c 	ldrd	r3, r4, [r7, #240]	; 0xf0
 80013f0:	e9c7 3454 	strd	r3, r4, [r7, #336]	; 0x150
 80013f4:	e9c7 3454 	strd	r3, r4, [r7, #336]	; 0x150
	var2 = var2 + ((var1 * (int64_t)CalibData.dig_P5) * 131072);
 80013f8:	4b9a      	ldr	r3, [pc, #616]	; (8001664 <BME280_ReadPressure+0x314>)
 80013fa:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 80013fe:	b21b      	sxth	r3, r3
 8001400:	17da      	asrs	r2, r3, #31
 8001402:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8001406:	f8c7 20e4 	str.w	r2, [r7, #228]	; 0xe4
 800140a:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 800140e:	e9d7 4538 	ldrd	r4, r5, [r7, #224]	; 0xe0
 8001412:	462a      	mov	r2, r5
 8001414:	fb02 f203 	mul.w	r2, r2, r3
 8001418:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 800141c:	4621      	mov	r1, r4
 800141e:	fb01 f303 	mul.w	r3, r1, r3
 8001422:	441a      	add	r2, r3
 8001424:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8001428:	4621      	mov	r1, r4
 800142a:	fba3 1301 	umull	r1, r3, r3, r1
 800142e:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
 8001432:	460b      	mov	r3, r1
 8001434:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 8001438:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800143c:	18d3      	adds	r3, r2, r3
 800143e:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
 8001442:	f04f 0000 	mov.w	r0, #0
 8001446:	f04f 0100 	mov.w	r1, #0
 800144a:	e9d7 454c 	ldrd	r4, r5, [r7, #304]	; 0x130
 800144e:	462b      	mov	r3, r5
 8001450:	0459      	lsls	r1, r3, #17
 8001452:	4623      	mov	r3, r4
 8001454:	ea41 31d3 	orr.w	r1, r1, r3, lsr #15
 8001458:	4623      	mov	r3, r4
 800145a:	0458      	lsls	r0, r3, #17
 800145c:	e9d7 2354 	ldrd	r2, r3, [r7, #336]	; 0x150
 8001460:	1814      	adds	r4, r2, r0
 8001462:	67bc      	str	r4, [r7, #120]	; 0x78
 8001464:	414b      	adcs	r3, r1
 8001466:	67fb      	str	r3, [r7, #124]	; 0x7c
 8001468:	e9d7 341e 	ldrd	r3, r4, [r7, #120]	; 0x78
 800146c:	e9c7 3454 	strd	r3, r4, [r7, #336]	; 0x150
	var2 = var2 + (((int64_t)CalibData.dig_P4) * 34359738368);
 8001470:	4b7c      	ldr	r3, [pc, #496]	; (8001664 <BME280_ReadPressure+0x314>)
 8001472:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8001476:	b21b      	sxth	r3, r3
 8001478:	17da      	asrs	r2, r3, #31
 800147a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800147e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8001482:	f04f 0000 	mov.w	r0, #0
 8001486:	f04f 0100 	mov.w	r1, #0
 800148a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800148e:	00d9      	lsls	r1, r3, #3
 8001490:	2000      	movs	r0, #0
 8001492:	e9d7 2354 	ldrd	r2, r3, [r7, #336]	; 0x150
 8001496:	1814      	adds	r4, r2, r0
 8001498:	673c      	str	r4, [r7, #112]	; 0x70
 800149a:	414b      	adcs	r3, r1
 800149c:	677b      	str	r3, [r7, #116]	; 0x74
 800149e:	e9d7 341c 	ldrd	r3, r4, [r7, #112]	; 0x70
 80014a2:	e9c7 3454 	strd	r3, r4, [r7, #336]	; 0x150
	var1 = ((var1 * var1 * (int64_t)CalibData.dig_P3) / 256) + ((var1 * ((int64_t)CalibData.dig_P2) * 4096));
 80014a6:	f8d7 215c 	ldr.w	r2, [r7, #348]	; 0x15c
 80014aa:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 80014ae:	fb03 f102 	mul.w	r1, r3, r2
 80014b2:	f8d7 215c 	ldr.w	r2, [r7, #348]	; 0x15c
 80014b6:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 80014ba:	fb02 f303 	mul.w	r3, r2, r3
 80014be:	18ca      	adds	r2, r1, r3
 80014c0:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 80014c4:	fba3 1303 	umull	r1, r3, r3, r3
 80014c8:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 80014cc:	460b      	mov	r3, r1
 80014ce:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 80014d2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80014d6:	18d3      	adds	r3, r2, r3
 80014d8:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 80014dc:	4b61      	ldr	r3, [pc, #388]	; (8001664 <BME280_ReadPressure+0x314>)
 80014de:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 80014e2:	b21b      	sxth	r3, r3
 80014e4:	17da      	asrs	r2, r3, #31
 80014e6:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80014ea:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80014ee:	e9d7 454a 	ldrd	r4, r5, [r7, #296]	; 0x128
 80014f2:	462b      	mov	r3, r5
 80014f4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80014f8:	4642      	mov	r2, r8
 80014fa:	fb02 f203 	mul.w	r2, r2, r3
 80014fe:	464b      	mov	r3, r9
 8001500:	4621      	mov	r1, r4
 8001502:	fb01 f303 	mul.w	r3, r1, r3
 8001506:	4413      	add	r3, r2
 8001508:	4622      	mov	r2, r4
 800150a:	4641      	mov	r1, r8
 800150c:	fba2 1201 	umull	r1, r2, r2, r1
 8001510:	f8c7 2124 	str.w	r2, [r7, #292]	; 0x124
 8001514:	460a      	mov	r2, r1
 8001516:	f8c7 2120 	str.w	r2, [r7, #288]	; 0x120
 800151a:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 800151e:	4413      	add	r3, r2
 8001520:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8001524:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 8001528:	2b00      	cmp	r3, #0
 800152a:	da07      	bge.n	800153c <BME280_ReadPressure+0x1ec>
 800152c:	f112 01ff 	adds.w	r1, r2, #255	; 0xff
 8001530:	66b9      	str	r1, [r7, #104]	; 0x68
 8001532:	f143 0300 	adc.w	r3, r3, #0
 8001536:	66fb      	str	r3, [r7, #108]	; 0x6c
 8001538:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 800153c:	f04f 0000 	mov.w	r0, #0
 8001540:	f04f 0100 	mov.w	r1, #0
 8001544:	0a10      	lsrs	r0, r2, #8
 8001546:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 800154a:	1219      	asrs	r1, r3, #8
 800154c:	4b45      	ldr	r3, [pc, #276]	; (8001664 <BME280_ReadPressure+0x314>)
 800154e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8001552:	b21b      	sxth	r3, r3
 8001554:	17da      	asrs	r2, r3, #31
 8001556:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800155a:	f8c7 20cc 	str.w	r2, [r7, #204]	; 0xcc
 800155e:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8001562:	e9d7 8932 	ldrd	r8, r9, [r7, #200]	; 0xc8
 8001566:	464a      	mov	r2, r9
 8001568:	fb02 f203 	mul.w	r2, r2, r3
 800156c:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8001570:	4644      	mov	r4, r8
 8001572:	fb04 f303 	mul.w	r3, r4, r3
 8001576:	441a      	add	r2, r3
 8001578:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 800157c:	4644      	mov	r4, r8
 800157e:	fba3 4304 	umull	r4, r3, r3, r4
 8001582:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8001586:	4623      	mov	r3, r4
 8001588:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 800158c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8001590:	18d3      	adds	r3, r2, r3
 8001592:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8001596:	f04f 0200 	mov.w	r2, #0
 800159a:	f04f 0300 	mov.w	r3, #0
 800159e:	e9d7 8946 	ldrd	r8, r9, [r7, #280]	; 0x118
 80015a2:	464c      	mov	r4, r9
 80015a4:	0323      	lsls	r3, r4, #12
 80015a6:	4644      	mov	r4, r8
 80015a8:	ea43 5314 	orr.w	r3, r3, r4, lsr #20
 80015ac:	4644      	mov	r4, r8
 80015ae:	0322      	lsls	r2, r4, #12
 80015b0:	1884      	adds	r4, r0, r2
 80015b2:	663c      	str	r4, [r7, #96]	; 0x60
 80015b4:	eb41 0303 	adc.w	r3, r1, r3
 80015b8:	667b      	str	r3, [r7, #100]	; 0x64
 80015ba:	e9d7 3418 	ldrd	r3, r4, [r7, #96]	; 0x60
 80015be:	e9c7 3456 	strd	r3, r4, [r7, #344]	; 0x158
	var3 = ((int64_t)1) * 140737488355328;
 80015c2:	f04f 0200 	mov.w	r2, #0
 80015c6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80015ca:	e9c7 2352 	strd	r2, r3, [r7, #328]	; 0x148
	var1 = (var3 + var1) * ((int64_t)CalibData.dig_P1) / 8589934592;
 80015ce:	e9d7 0152 	ldrd	r0, r1, [r7, #328]	; 0x148
 80015d2:	e9d7 2356 	ldrd	r2, r3, [r7, #344]	; 0x158
 80015d6:	1884      	adds	r4, r0, r2
 80015d8:	f8c7 40c0 	str.w	r4, [r7, #192]	; 0xc0
 80015dc:	eb41 0303 	adc.w	r3, r1, r3
 80015e0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80015e4:	4b1f      	ldr	r3, [pc, #124]	; (8001664 <BME280_ReadPressure+0x314>)
 80015e6:	88db      	ldrh	r3, [r3, #6]
 80015e8:	b29b      	uxth	r3, r3
 80015ea:	2200      	movs	r2, #0
 80015ec:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80015f0:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80015f4:	e9d7 4530 	ldrd	r4, r5, [r7, #192]	; 0xc0
 80015f8:	462b      	mov	r3, r5
 80015fa:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80015fe:	4642      	mov	r2, r8
 8001600:	fb02 f203 	mul.w	r2, r2, r3
 8001604:	464b      	mov	r3, r9
 8001606:	4621      	mov	r1, r4
 8001608:	fb01 f303 	mul.w	r3, r1, r3
 800160c:	4413      	add	r3, r2
 800160e:	4622      	mov	r2, r4
 8001610:	4641      	mov	r1, r8
 8001612:	fba2 1201 	umull	r1, r2, r2, r1
 8001616:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
 800161a:	460a      	mov	r2, r1
 800161c:	f8c7 2110 	str.w	r2, [r7, #272]	; 0x110
 8001620:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8001624:	4413      	add	r3, r2
 8001626:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 800162a:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	; 0x110
 800162e:	2b00      	cmp	r3, #0
 8001630:	da06      	bge.n	8001640 <BME280_ReadPressure+0x2f0>
 8001632:	1e51      	subs	r1, r2, #1
 8001634:	65b9      	str	r1, [r7, #88]	; 0x58
 8001636:	f143 0301 	adc.w	r3, r3, #1
 800163a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800163c:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8001640:	f04f 0000 	mov.w	r0, #0
 8001644:	f04f 0100 	mov.w	r1, #0
 8001648:	1058      	asrs	r0, r3, #1
 800164a:	17d9      	asrs	r1, r3, #31
 800164c:	e9c7 0156 	strd	r0, r1, [r7, #344]	; 0x158
	if (var1 == 0) {
 8001650:	e9d7 2356 	ldrd	r2, r3, [r7, #344]	; 0x158
 8001654:	4313      	orrs	r3, r2
 8001656:	d107      	bne.n	8001668 <BME280_ReadPressure+0x318>
		return 0; // avoid exception caused by division by zero
 8001658:	f04f 0300 	mov.w	r3, #0
 800165c:	e196      	b.n	800198c <BME280_ReadPressure+0x63c>
 800165e:	bf00      	nop
 8001660:	200005c4 	.word	0x200005c4
 8001664:	200005a0 	.word	0x200005a0
	}
	var4 = 1048576 - adc_P;
 8001668:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 800166c:	f5c3 1380 	rsb	r3, r3, #1048576	; 0x100000
 8001670:	17da      	asrs	r2, r3, #31
 8001672:	653b      	str	r3, [r7, #80]	; 0x50
 8001674:	657a      	str	r2, [r7, #84]	; 0x54
 8001676:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
 800167a:	e9c7 3450 	strd	r3, r4, [r7, #320]	; 0x140
	var4 = (((var4 * 2147483648) - var2) * 3125) / var1;
 800167e:	e9d7 2350 	ldrd	r2, r3, [r7, #320]	; 0x140
 8001682:	f04f 0000 	mov.w	r0, #0
 8001686:	f04f 0100 	mov.w	r1, #0
 800168a:	07d9      	lsls	r1, r3, #31
 800168c:	ea41 0152 	orr.w	r1, r1, r2, lsr #1
 8001690:	07d0      	lsls	r0, r2, #31
 8001692:	e9d7 2354 	ldrd	r2, r3, [r7, #336]	; 0x150
 8001696:	1a84      	subs	r4, r0, r2
 8001698:	f8c7 40b0 	str.w	r4, [r7, #176]	; 0xb0
 800169c:	eb61 0303 	sbc.w	r3, r1, r3
 80016a0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80016a4:	e9d7 452c 	ldrd	r4, r5, [r7, #176]	; 0xb0
 80016a8:	4622      	mov	r2, r4
 80016aa:	462b      	mov	r3, r5
 80016ac:	1891      	adds	r1, r2, r2
 80016ae:	64b9      	str	r1, [r7, #72]	; 0x48
 80016b0:	415b      	adcs	r3, r3
 80016b2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80016b4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80016b8:	4621      	mov	r1, r4
 80016ba:	1851      	adds	r1, r2, r1
 80016bc:	6439      	str	r1, [r7, #64]	; 0x40
 80016be:	4629      	mov	r1, r5
 80016c0:	414b      	adcs	r3, r1
 80016c2:	647b      	str	r3, [r7, #68]	; 0x44
 80016c4:	f04f 0200 	mov.w	r2, #0
 80016c8:	f04f 0300 	mov.w	r3, #0
 80016cc:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 80016d0:	4649      	mov	r1, r9
 80016d2:	018b      	lsls	r3, r1, #6
 80016d4:	4641      	mov	r1, r8
 80016d6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80016da:	4641      	mov	r1, r8
 80016dc:	018a      	lsls	r2, r1, #6
 80016de:	4641      	mov	r1, r8
 80016e0:	1889      	adds	r1, r1, r2
 80016e2:	63b9      	str	r1, [r7, #56]	; 0x38
 80016e4:	4649      	mov	r1, r9
 80016e6:	eb43 0101 	adc.w	r1, r3, r1
 80016ea:	63f9      	str	r1, [r7, #60]	; 0x3c
 80016ec:	f04f 0200 	mov.w	r2, #0
 80016f0:	f04f 0300 	mov.w	r3, #0
 80016f4:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 80016f8:	4649      	mov	r1, r9
 80016fa:	008b      	lsls	r3, r1, #2
 80016fc:	4641      	mov	r1, r8
 80016fe:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8001702:	4641      	mov	r1, r8
 8001704:	008a      	lsls	r2, r1, #2
 8001706:	4610      	mov	r0, r2
 8001708:	4619      	mov	r1, r3
 800170a:	4603      	mov	r3, r0
 800170c:	4622      	mov	r2, r4
 800170e:	189b      	adds	r3, r3, r2
 8001710:	633b      	str	r3, [r7, #48]	; 0x30
 8001712:	460b      	mov	r3, r1
 8001714:	462a      	mov	r2, r5
 8001716:	eb42 0303 	adc.w	r3, r2, r3
 800171a:	637b      	str	r3, [r7, #52]	; 0x34
 800171c:	f04f 0200 	mov.w	r2, #0
 8001720:	f04f 0300 	mov.w	r3, #0
 8001724:	e9d7 890c 	ldrd	r8, r9, [r7, #48]	; 0x30
 8001728:	4649      	mov	r1, r9
 800172a:	008b      	lsls	r3, r1, #2
 800172c:	4641      	mov	r1, r8
 800172e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8001732:	4641      	mov	r1, r8
 8001734:	008a      	lsls	r2, r1, #2
 8001736:	4610      	mov	r0, r2
 8001738:	4619      	mov	r1, r3
 800173a:	4603      	mov	r3, r0
 800173c:	4622      	mov	r2, r4
 800173e:	189b      	adds	r3, r3, r2
 8001740:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8001744:	462b      	mov	r3, r5
 8001746:	460a      	mov	r2, r1
 8001748:	eb42 0303 	adc.w	r3, r2, r3
 800174c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8001750:	e9d7 2356 	ldrd	r2, r3, [r7, #344]	; 0x158
 8001754:	e9d7 012a 	ldrd	r0, r1, [r7, #168]	; 0xa8
 8001758:	f7ff fa9e 	bl	8000c98 <__aeabi_ldivmod>
 800175c:	4602      	mov	r2, r0
 800175e:	460b      	mov	r3, r1
 8001760:	e9c7 2350 	strd	r2, r3, [r7, #320]	; 0x140
	var1 = (((int64_t)CalibData.dig_P9) * (var4 / 8192) * (var4 / 8192)) / 33554432;
 8001764:	4b8e      	ldr	r3, [pc, #568]	; (80019a0 <BME280_ReadPressure+0x650>)
 8001766:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 800176a:	b21b      	sxth	r3, r3
 800176c:	17da      	asrs	r2, r3, #31
 800176e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8001772:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8001776:	e9d7 2350 	ldrd	r2, r3, [r7, #320]	; 0x140
 800177a:	2b00      	cmp	r3, #0
 800177c:	da08      	bge.n	8001790 <BME280_ReadPressure+0x440>
 800177e:	f641 71ff 	movw	r1, #8191	; 0x1fff
 8001782:	1851      	adds	r1, r2, r1
 8001784:	62b9      	str	r1, [r7, #40]	; 0x28
 8001786:	f143 0300 	adc.w	r3, r3, #0
 800178a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800178c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001790:	f04f 0000 	mov.w	r0, #0
 8001794:	f04f 0100 	mov.w	r1, #0
 8001798:	0b50      	lsrs	r0, r2, #13
 800179a:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 800179e:	1359      	asrs	r1, r3, #13
 80017a0:	4602      	mov	r2, r0
 80017a2:	460b      	mov	r3, r1
 80017a4:	e9d7 4528 	ldrd	r4, r5, [r7, #160]	; 0xa0
 80017a8:	4629      	mov	r1, r5
 80017aa:	fb02 f001 	mul.w	r0, r2, r1
 80017ae:	4621      	mov	r1, r4
 80017b0:	fb01 f103 	mul.w	r1, r1, r3
 80017b4:	4401      	add	r1, r0
 80017b6:	4620      	mov	r0, r4
 80017b8:	fba0 2302 	umull	r2, r3, r0, r2
 80017bc:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 80017c0:	4613      	mov	r3, r2
 80017c2:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 80017c6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80017ca:	18cb      	adds	r3, r1, r3
 80017cc:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 80017d0:	e9d7 2350 	ldrd	r2, r3, [r7, #320]	; 0x140
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	da08      	bge.n	80017ea <BME280_ReadPressure+0x49a>
 80017d8:	f641 71ff 	movw	r1, #8191	; 0x1fff
 80017dc:	1851      	adds	r1, r2, r1
 80017de:	6239      	str	r1, [r7, #32]
 80017e0:	f143 0300 	adc.w	r3, r3, #0
 80017e4:	627b      	str	r3, [r7, #36]	; 0x24
 80017e6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80017ea:	f04f 0000 	mov.w	r0, #0
 80017ee:	f04f 0100 	mov.w	r1, #0
 80017f2:	0b50      	lsrs	r0, r2, #13
 80017f4:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 80017f8:	1359      	asrs	r1, r3, #13
 80017fa:	4602      	mov	r2, r0
 80017fc:	460b      	mov	r3, r1
 80017fe:	e9d7 4542 	ldrd	r4, r5, [r7, #264]	; 0x108
 8001802:	4629      	mov	r1, r5
 8001804:	fb02 f001 	mul.w	r0, r2, r1
 8001808:	4621      	mov	r1, r4
 800180a:	fb01 f103 	mul.w	r1, r1, r3
 800180e:	4401      	add	r1, r0
 8001810:	4620      	mov	r0, r4
 8001812:	fba0 2302 	umull	r2, r3, r0, r2
 8001816:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800181a:	4613      	mov	r3, r2
 800181c:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8001820:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8001824:	18cb      	adds	r3, r1, r3
 8001826:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800182a:	e9d7 2340 	ldrd	r2, r3, [r7, #256]	; 0x100
 800182e:	2b00      	cmp	r3, #0
 8001830:	da08      	bge.n	8001844 <BME280_ReadPressure+0x4f4>
 8001832:	f06f 417e 	mvn.w	r1, #4261412864	; 0xfe000000
 8001836:	1851      	adds	r1, r2, r1
 8001838:	61b9      	str	r1, [r7, #24]
 800183a:	f143 0300 	adc.w	r3, r3, #0
 800183e:	61fb      	str	r3, [r7, #28]
 8001840:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001844:	f04f 0000 	mov.w	r0, #0
 8001848:	f04f 0100 	mov.w	r1, #0
 800184c:	0e50      	lsrs	r0, r2, #25
 800184e:	ea40 10c3 	orr.w	r0, r0, r3, lsl #7
 8001852:	1659      	asrs	r1, r3, #25
 8001854:	e9c7 0156 	strd	r0, r1, [r7, #344]	; 0x158
	var2 = (((int64_t)CalibData.dig_P8) * var4) / 524288;
 8001858:	4b51      	ldr	r3, [pc, #324]	; (80019a0 <BME280_ReadPressure+0x650>)
 800185a:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 800185e:	b21b      	sxth	r3, r3
 8001860:	17da      	asrs	r2, r3, #31
 8001862:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8001866:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 800186a:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 800186e:	e9d7 4526 	ldrd	r4, r5, [r7, #152]	; 0x98
 8001872:	462a      	mov	r2, r5
 8001874:	fb02 f203 	mul.w	r2, r2, r3
 8001878:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 800187c:	4621      	mov	r1, r4
 800187e:	fb01 f303 	mul.w	r3, r1, r3
 8001882:	441a      	add	r2, r3
 8001884:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 8001888:	4621      	mov	r1, r4
 800188a:	fba3 1301 	umull	r1, r3, r3, r1
 800188e:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8001892:	460b      	mov	r3, r1
 8001894:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8001898:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800189c:	18d3      	adds	r3, r2, r3
 800189e:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80018a2:	e9d7 013e 	ldrd	r0, r1, [r7, #248]	; 0xf8
 80018a6:	2900      	cmp	r1, #0
 80018a8:	da07      	bge.n	80018ba <BME280_ReadPressure+0x56a>
 80018aa:	4b3e      	ldr	r3, [pc, #248]	; (80019a4 <BME280_ReadPressure+0x654>)
 80018ac:	18c3      	adds	r3, r0, r3
 80018ae:	613b      	str	r3, [r7, #16]
 80018b0:	f141 0300 	adc.w	r3, r1, #0
 80018b4:	617b      	str	r3, [r7, #20]
 80018b6:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80018ba:	f04f 0200 	mov.w	r2, #0
 80018be:	f04f 0300 	mov.w	r3, #0
 80018c2:	0cc2      	lsrs	r2, r0, #19
 80018c4:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
 80018c8:	14cb      	asrs	r3, r1, #19
 80018ca:	e9c7 2354 	strd	r2, r3, [r7, #336]	; 0x150
	var4 = ((var4 + var1 + var2) / 256) + (((int64_t)CalibData.dig_P7) * 16);
 80018ce:	e9d7 0150 	ldrd	r0, r1, [r7, #320]	; 0x140
 80018d2:	e9d7 2356 	ldrd	r2, r3, [r7, #344]	; 0x158
 80018d6:	1884      	adds	r4, r0, r2
 80018d8:	f8c7 4090 	str.w	r4, [r7, #144]	; 0x90
 80018dc:	eb41 0303 	adc.w	r3, r1, r3
 80018e0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80018e4:	e9d7 2354 	ldrd	r2, r3, [r7, #336]	; 0x150
 80018e8:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80018ec:	4621      	mov	r1, r4
 80018ee:	1889      	adds	r1, r1, r2
 80018f0:	f8c7 1088 	str.w	r1, [r7, #136]	; 0x88
 80018f4:	4629      	mov	r1, r5
 80018f6:	eb43 0101 	adc.w	r1, r3, r1
 80018fa:	f8c7 108c 	str.w	r1, [r7, #140]	; 0x8c
 80018fe:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8001902:	2b00      	cmp	r3, #0
 8001904:	da07      	bge.n	8001916 <BME280_ReadPressure+0x5c6>
 8001906:	f112 01ff 	adds.w	r1, r2, #255	; 0xff
 800190a:	60b9      	str	r1, [r7, #8]
 800190c:	f143 0300 	adc.w	r3, r3, #0
 8001910:	60fb      	str	r3, [r7, #12]
 8001912:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001916:	f04f 0000 	mov.w	r0, #0
 800191a:	f04f 0100 	mov.w	r1, #0
 800191e:	0a10      	lsrs	r0, r2, #8
 8001920:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 8001924:	1219      	asrs	r1, r3, #8
 8001926:	4b1e      	ldr	r3, [pc, #120]	; (80019a0 <BME280_ReadPressure+0x650>)
 8001928:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 800192c:	b21b      	sxth	r3, r3
 800192e:	17da      	asrs	r2, r3, #31
 8001930:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8001934:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8001938:	f04f 0200 	mov.w	r2, #0
 800193c:	f04f 0300 	mov.w	r3, #0
 8001940:	e9d7 8920 	ldrd	r8, r9, [r7, #128]	; 0x80
 8001944:	464c      	mov	r4, r9
 8001946:	0123      	lsls	r3, r4, #4
 8001948:	4644      	mov	r4, r8
 800194a:	ea43 7314 	orr.w	r3, r3, r4, lsr #28
 800194e:	4644      	mov	r4, r8
 8001950:	0122      	lsls	r2, r4, #4
 8001952:	1884      	adds	r4, r0, r2
 8001954:	603c      	str	r4, [r7, #0]
 8001956:	eb41 0303 	adc.w	r3, r1, r3
 800195a:	607b      	str	r3, [r7, #4]
 800195c:	e9d7 3400 	ldrd	r3, r4, [r7]
 8001960:	e9c7 3450 	strd	r3, r4, [r7, #320]	; 0x140
	float P = var4 / 256.0;
 8001964:	e9d7 0150 	ldrd	r0, r1, [r7, #320]	; 0x140
 8001968:	f7fe fe40 	bl	80005ec <__aeabi_l2d>
 800196c:	f04f 0200 	mov.w	r2, #0
 8001970:	4b0d      	ldr	r3, [pc, #52]	; (80019a8 <BME280_ReadPressure+0x658>)
 8001972:	f7fe ff93 	bl	800089c <__aeabi_ddiv>
 8001976:	4602      	mov	r2, r0
 8001978:	460b      	mov	r3, r1
 800197a:	4610      	mov	r0, r2
 800197c:	4619      	mov	r1, r3
 800197e:	f7ff f93b 	bl	8000bf8 <__aeabi_d2f>
 8001982:	4603      	mov	r3, r0
 8001984:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
  return P;
 8001988:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
}
 800198c:	ee07 3a90 	vmov	s15, r3
 8001990:	eeb0 0a67 	vmov.f32	s0, s15
 8001994:	f507 77b4 	add.w	r7, r7, #360	; 0x168
 8001998:	46bd      	mov	sp, r7
 800199a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800199e:	bf00      	nop
 80019a0:	200005a0 	.word	0x200005a0
 80019a4:	0007ffff 	.word	0x0007ffff
 80019a8:	40700000 	.word	0x40700000

080019ac <BME280_ReadHumidity>:
//------------------------------------------------
float BME280_ReadHumidity(void)
{
 80019ac:	b580      	push	{r7, lr}
 80019ae:	b088      	sub	sp, #32
 80019b0:	af00      	add	r7, sp, #0
  int32_t var1, var2, var3, var4, var5;
	BME280_ReadTemperature(); 	// must be done first to get t_fine
 80019b2:	f7ff fc5b 	bl	800126c <BME280_ReadTemperature>
	int32_t adc_H = BME280_ReadReg_BE_S16(BME280_REGISTER_HUMIDDATA);
 80019b6:	20fd      	movs	r0, #253	; 0xfd
 80019b8:	f7ff fc02 	bl	80011c0 <BME280_ReadReg_BE_S16>
 80019bc:	4603      	mov	r3, r0
 80019be:	61fb      	str	r3, [r7, #28]
	if (adc_H == 0x8000) {  	// value in case humidity measurement was disabled
 80019c0:	69fb      	ldr	r3, [r7, #28]
 80019c2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80019c6:	d102      	bne.n	80019ce <BME280_ReadHumidity+0x22>
		return NAN;
 80019c8:	ed9f 7a54 	vldr	s14, [pc, #336]	; 8001b1c <BME280_ReadHumidity+0x170>
 80019cc:	e09e      	b.n	8001b0c <BME280_ReadHumidity+0x160>
	}
	var1 = t_fine - ((int32_t)76800);
 80019ce:	4b54      	ldr	r3, [pc, #336]	; (8001b20 <BME280_ReadHumidity+0x174>)
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	f5a3 3396 	sub.w	r3, r3, #76800	; 0x12c00
 80019d6:	61bb      	str	r3, [r7, #24]
	var2 = (int32_t)(adc_H * 16384);
 80019d8:	69fb      	ldr	r3, [r7, #28]
 80019da:	039b      	lsls	r3, r3, #14
 80019dc:	617b      	str	r3, [r7, #20]
	var3 = (int32_t)(((int32_t)CalibData.dig_H4) * 1048576);
 80019de:	4b51      	ldr	r3, [pc, #324]	; (8001b24 <BME280_ReadHumidity+0x178>)
 80019e0:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 80019e4:	051b      	lsls	r3, r3, #20
 80019e6:	613b      	str	r3, [r7, #16]
	var4 = ((int32_t)CalibData.dig_H5) * var1;
 80019e8:	4b4e      	ldr	r3, [pc, #312]	; (8001b24 <BME280_ReadHumidity+0x178>)
 80019ea:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 80019ee:	461a      	mov	r2, r3
 80019f0:	69bb      	ldr	r3, [r7, #24]
 80019f2:	fb02 f303 	mul.w	r3, r2, r3
 80019f6:	60fb      	str	r3, [r7, #12]
	var5 = (((var2 - var3) - var4) + (int32_t)16384) / 32768;
 80019f8:	697a      	ldr	r2, [r7, #20]
 80019fa:	693b      	ldr	r3, [r7, #16]
 80019fc:	1ad2      	subs	r2, r2, r3
 80019fe:	68fb      	ldr	r3, [r7, #12]
 8001a00:	1ad3      	subs	r3, r2, r3
 8001a02:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	da02      	bge.n	8001a10 <BME280_ReadHumidity+0x64>
 8001a0a:	f503 43ff 	add.w	r3, r3, #32640	; 0x7f80
 8001a0e:	337f      	adds	r3, #127	; 0x7f
 8001a10:	13db      	asrs	r3, r3, #15
 8001a12:	60bb      	str	r3, [r7, #8]
	var2 = (var1 * ((int32_t)CalibData.dig_H6)) / 1024;
 8001a14:	4b43      	ldr	r3, [pc, #268]	; (8001b24 <BME280_ReadHumidity+0x178>)
 8001a16:	f993 3022 	ldrsb.w	r3, [r3, #34]	; 0x22
 8001a1a:	461a      	mov	r2, r3
 8001a1c:	69bb      	ldr	r3, [r7, #24]
 8001a1e:	fb02 f303 	mul.w	r3, r2, r3
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	da01      	bge.n	8001a2a <BME280_ReadHumidity+0x7e>
 8001a26:	f203 33ff 	addw	r3, r3, #1023	; 0x3ff
 8001a2a:	129b      	asrs	r3, r3, #10
 8001a2c:	617b      	str	r3, [r7, #20]
	var3 = (var1 * ((int32_t)CalibData.dig_H3)) / 2048;
 8001a2e:	4b3d      	ldr	r3, [pc, #244]	; (8001b24 <BME280_ReadHumidity+0x178>)
 8001a30:	7f1b      	ldrb	r3, [r3, #28]
 8001a32:	461a      	mov	r2, r3
 8001a34:	69bb      	ldr	r3, [r7, #24]
 8001a36:	fb02 f303 	mul.w	r3, r2, r3
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	da01      	bge.n	8001a42 <BME280_ReadHumidity+0x96>
 8001a3e:	f203 73ff 	addw	r3, r3, #2047	; 0x7ff
 8001a42:	12db      	asrs	r3, r3, #11
 8001a44:	613b      	str	r3, [r7, #16]
	var4 = ((var2 * (var3 + (int32_t)32768)) / 1024) + (int32_t)2097152;
 8001a46:	693b      	ldr	r3, [r7, #16]
 8001a48:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8001a4c:	697a      	ldr	r2, [r7, #20]
 8001a4e:	fb02 f303 	mul.w	r3, r2, r3
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	da01      	bge.n	8001a5a <BME280_ReadHumidity+0xae>
 8001a56:	f203 33ff 	addw	r3, r3, #1023	; 0x3ff
 8001a5a:	129b      	asrs	r3, r3, #10
 8001a5c:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8001a60:	60fb      	str	r3, [r7, #12]
	var2 = ((var4 * ((int32_t)CalibData.dig_H2)) + 8192) / 16384;
 8001a62:	4b30      	ldr	r3, [pc, #192]	; (8001b24 <BME280_ReadHumidity+0x178>)
 8001a64:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 8001a68:	461a      	mov	r2, r3
 8001a6a:	68fb      	ldr	r3, [r7, #12]
 8001a6c:	fb02 f303 	mul.w	r3, r2, r3
 8001a70:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	da02      	bge.n	8001a7e <BME280_ReadHumidity+0xd2>
 8001a78:	f503 537f 	add.w	r3, r3, #16320	; 0x3fc0
 8001a7c:	333f      	adds	r3, #63	; 0x3f
 8001a7e:	139b      	asrs	r3, r3, #14
 8001a80:	617b      	str	r3, [r7, #20]
	var3 = var5 * var2;
 8001a82:	68bb      	ldr	r3, [r7, #8]
 8001a84:	697a      	ldr	r2, [r7, #20]
 8001a86:	fb02 f303 	mul.w	r3, r2, r3
 8001a8a:	613b      	str	r3, [r7, #16]
	var4 = ((var3 / 32768) * (var3 / 32768)) / 128;
 8001a8c:	693b      	ldr	r3, [r7, #16]
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	da02      	bge.n	8001a98 <BME280_ReadHumidity+0xec>
 8001a92:	f503 43ff 	add.w	r3, r3, #32640	; 0x7f80
 8001a96:	337f      	adds	r3, #127	; 0x7f
 8001a98:	13db      	asrs	r3, r3, #15
 8001a9a:	461a      	mov	r2, r3
 8001a9c:	693b      	ldr	r3, [r7, #16]
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	da02      	bge.n	8001aa8 <BME280_ReadHumidity+0xfc>
 8001aa2:	f503 43ff 	add.w	r3, r3, #32640	; 0x7f80
 8001aa6:	337f      	adds	r3, #127	; 0x7f
 8001aa8:	13db      	asrs	r3, r3, #15
 8001aaa:	fb02 f303 	mul.w	r3, r2, r3
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	da00      	bge.n	8001ab4 <BME280_ReadHumidity+0x108>
 8001ab2:	337f      	adds	r3, #127	; 0x7f
 8001ab4:	11db      	asrs	r3, r3, #7
 8001ab6:	60fb      	str	r3, [r7, #12]
	var5 = var3 - ((var4 * ((int32_t)CalibData.dig_H1)) / 16);
 8001ab8:	4b1a      	ldr	r3, [pc, #104]	; (8001b24 <BME280_ReadHumidity+0x178>)
 8001aba:	7e1b      	ldrb	r3, [r3, #24]
 8001abc:	461a      	mov	r2, r3
 8001abe:	68fb      	ldr	r3, [r7, #12]
 8001ac0:	fb02 f303 	mul.w	r3, r2, r3
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	da00      	bge.n	8001aca <BME280_ReadHumidity+0x11e>
 8001ac8:	330f      	adds	r3, #15
 8001aca:	111b      	asrs	r3, r3, #4
 8001acc:	425b      	negs	r3, r3
 8001ace:	461a      	mov	r2, r3
 8001ad0:	693b      	ldr	r3, [r7, #16]
 8001ad2:	4413      	add	r3, r2
 8001ad4:	60bb      	str	r3, [r7, #8]
	var5 = (var5 < 0 ? 0 : var5);
 8001ad6:	68bb      	ldr	r3, [r7, #8]
 8001ad8:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8001adc:	60bb      	str	r3, [r7, #8]
	var5 = (var5 > 419430400 ? 419430400 : var5);
 8001ade:	68bb      	ldr	r3, [r7, #8]
 8001ae0:	f1b3 5fc8 	cmp.w	r3, #419430400	; 0x19000000
 8001ae4:	bfa8      	it	ge
 8001ae6:	f04f 53c8 	movge.w	r3, #419430400	; 0x19000000
 8001aea:	60bb      	str	r3, [r7, #8]
	uint32_t H = (uint32_t)(var5 / 4096);
 8001aec:	68bb      	ldr	r3, [r7, #8]
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	da01      	bge.n	8001af6 <BME280_ReadHumidity+0x14a>
 8001af2:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
 8001af6:	131b      	asrs	r3, r3, #12
 8001af8:	607b      	str	r3, [r7, #4]
  return (float)H / 1024.0;
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	ee07 3a90 	vmov	s15, r3
 8001b00:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001b04:	eddf 6a08 	vldr	s13, [pc, #32]	; 8001b28 <BME280_ReadHumidity+0x17c>
 8001b08:	ee87 7aa6 	vdiv.f32	s14, s15, s13
}
 8001b0c:	eef0 7a47 	vmov.f32	s15, s14
 8001b10:	eeb0 0a67 	vmov.f32	s0, s15
 8001b14:	3720      	adds	r7, #32
 8001b16:	46bd      	mov	sp, r7
 8001b18:	bd80      	pop	{r7, pc}
 8001b1a:	bf00      	nop
 8001b1c:	7fc00000 	.word	0x7fc00000
 8001b20:	200005c4 	.word	0x200005c4
 8001b24:	200005a0 	.word	0x200005a0
 8001b28:	44800000 	.word	0x44800000

08001b2c <BME280_Init>:

//------------------------------------------------
void BME280_Init(void)
{
 8001b2c:	b590      	push	{r4, r7, lr}
 8001b2e:	b083      	sub	sp, #12
 8001b30:	af00      	add	r7, sp, #0
  uint8_t value=0;
 8001b32:	2300      	movs	r3, #0
 8001b34:	71fb      	strb	r3, [r7, #7]
	value = BME280_ReadReg(BME280_REG_ID);
 8001b36:	20d0      	movs	r0, #208	; 0xd0
 8001b38:	f7ff fb10 	bl	800115c <BME280_ReadReg>
 8001b3c:	4603      	mov	r3, r0
 8001b3e:	71fb      	strb	r3, [r7, #7]
	if(value != BME280_ID)
 8001b40:	79fb      	ldrb	r3, [r7, #7]
 8001b42:	2b60      	cmp	r3, #96	; 0x60
 8001b44:	d002      	beq.n	8001b4c <BME280_Init+0x20>
	{
		Error();
 8001b46:	f7ff fa79 	bl	800103c <Error>
		return;
 8001b4a:	e0e3      	b.n	8001d14 <BME280_Init+0x1e8>
	}
	BME280_WriteReg(BME280_REG_SOFTRESET,BME280_SOFTRESET_VALUE);
 8001b4c:	21b6      	movs	r1, #182	; 0xb6
 8001b4e:	20e0      	movs	r0, #224	; 0xe0
 8001b50:	f7ff faf2 	bl	8001138 <BME280_WriteReg>
	while ((BME280_ReadReg(BME280_REGISTER_STATUS) & 0x09) & BME280_STATUS_IM_UPDATE) {} ;
 8001b54:	bf00      	nop
 8001b56:	20f3      	movs	r0, #243	; 0xf3
 8001b58:	f7ff fb00 	bl	800115c <BME280_ReadReg>
 8001b5c:	4603      	mov	r3, r0
 8001b5e:	f003 0301 	and.w	r3, r3, #1
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d1f7      	bne.n	8001b56 <BME280_Init+0x2a>
	BME280_ReadReg_U16(BME280_REGISTER_DIG_T1,&CalibData.dig_T1);
 8001b66:	496d      	ldr	r1, [pc, #436]	; (8001d1c <BME280_Init+0x1f0>)
 8001b68:	2088      	movs	r0, #136	; 0x88
 8001b6a:	f7ff fb08 	bl	800117e <BME280_ReadReg_U16>
	BME280_ReadReg_S16(BME280_REGISTER_DIG_T2,&CalibData.dig_T2);
 8001b6e:	496c      	ldr	r1, [pc, #432]	; (8001d20 <BME280_Init+0x1f4>)
 8001b70:	208a      	movs	r0, #138	; 0x8a
 8001b72:	f7ff fb14 	bl	800119e <BME280_ReadReg_S16>
	BME280_ReadReg_S16(BME280_REGISTER_DIG_T3,&CalibData.dig_T3);
 8001b76:	496b      	ldr	r1, [pc, #428]	; (8001d24 <BME280_Init+0x1f8>)
 8001b78:	208c      	movs	r0, #140	; 0x8c
 8001b7a:	f7ff fb10 	bl	800119e <BME280_ReadReg_S16>
	BME280_ReadReg_U16(BME280_REGISTER_DIG_P1,&CalibData.dig_P1);
 8001b7e:	496a      	ldr	r1, [pc, #424]	; (8001d28 <BME280_Init+0x1fc>)
 8001b80:	208e      	movs	r0, #142	; 0x8e
 8001b82:	f7ff fafc 	bl	800117e <BME280_ReadReg_U16>
	BME280_ReadReg_S16(BME280_REGISTER_DIG_P2,&CalibData.dig_P2);
 8001b86:	4969      	ldr	r1, [pc, #420]	; (8001d2c <BME280_Init+0x200>)
 8001b88:	2090      	movs	r0, #144	; 0x90
 8001b8a:	f7ff fb08 	bl	800119e <BME280_ReadReg_S16>
	BME280_ReadReg_S16(BME280_REGISTER_DIG_P3,&CalibData.dig_P3);
 8001b8e:	4968      	ldr	r1, [pc, #416]	; (8001d30 <BME280_Init+0x204>)
 8001b90:	2092      	movs	r0, #146	; 0x92
 8001b92:	f7ff fb04 	bl	800119e <BME280_ReadReg_S16>
	BME280_ReadReg_S16(BME280_REGISTER_DIG_P4,&CalibData.dig_P4);
 8001b96:	4967      	ldr	r1, [pc, #412]	; (8001d34 <BME280_Init+0x208>)
 8001b98:	2094      	movs	r0, #148	; 0x94
 8001b9a:	f7ff fb00 	bl	800119e <BME280_ReadReg_S16>
	BME280_ReadReg_S16(BME280_REGISTER_DIG_P5,&CalibData.dig_P5);
 8001b9e:	4966      	ldr	r1, [pc, #408]	; (8001d38 <BME280_Init+0x20c>)
 8001ba0:	2096      	movs	r0, #150	; 0x96
 8001ba2:	f7ff fafc 	bl	800119e <BME280_ReadReg_S16>
	BME280_ReadReg_S16(BME280_REGISTER_DIG_P6,&CalibData.dig_P6);
 8001ba6:	4965      	ldr	r1, [pc, #404]	; (8001d3c <BME280_Init+0x210>)
 8001ba8:	2098      	movs	r0, #152	; 0x98
 8001baa:	f7ff faf8 	bl	800119e <BME280_ReadReg_S16>
	BME280_ReadReg_S16(BME280_REGISTER_DIG_P7,&CalibData.dig_P7);
 8001bae:	4964      	ldr	r1, [pc, #400]	; (8001d40 <BME280_Init+0x214>)
 8001bb0:	209a      	movs	r0, #154	; 0x9a
 8001bb2:	f7ff faf4 	bl	800119e <BME280_ReadReg_S16>
	BME280_ReadReg_S16(BME280_REGISTER_DIG_P8,&CalibData.dig_P8);
 8001bb6:	4963      	ldr	r1, [pc, #396]	; (8001d44 <BME280_Init+0x218>)
 8001bb8:	209c      	movs	r0, #156	; 0x9c
 8001bba:	f7ff faf0 	bl	800119e <BME280_ReadReg_S16>
	BME280_ReadReg_S16(BME280_REGISTER_DIG_P9,&CalibData.dig_P9);
 8001bbe:	4962      	ldr	r1, [pc, #392]	; (8001d48 <BME280_Init+0x21c>)
 8001bc0:	209e      	movs	r0, #158	; 0x9e
 8001bc2:	f7ff faec 	bl	800119e <BME280_ReadReg_S16>
	CalibData.dig_H1 = BME280_ReadReg(BME280_REGISTER_DIG_H1);
 8001bc6:	20a1      	movs	r0, #161	; 0xa1
 8001bc8:	f7ff fac8 	bl	800115c <BME280_ReadReg>
 8001bcc:	4603      	mov	r3, r0
 8001bce:	461a      	mov	r2, r3
 8001bd0:	4b52      	ldr	r3, [pc, #328]	; (8001d1c <BME280_Init+0x1f0>)
 8001bd2:	761a      	strb	r2, [r3, #24]
	BME280_ReadReg_S16(BME280_REGISTER_DIG_H2,&CalibData.dig_H2);
 8001bd4:	495d      	ldr	r1, [pc, #372]	; (8001d4c <BME280_Init+0x220>)
 8001bd6:	20e1      	movs	r0, #225	; 0xe1
 8001bd8:	f7ff fae1 	bl	800119e <BME280_ReadReg_S16>
	CalibData.dig_H3 = BME280_ReadReg(BME280_REGISTER_DIG_H3);
 8001bdc:	20e3      	movs	r0, #227	; 0xe3
 8001bde:	f7ff fabd 	bl	800115c <BME280_ReadReg>
 8001be2:	4603      	mov	r3, r0
 8001be4:	461a      	mov	r2, r3
 8001be6:	4b4d      	ldr	r3, [pc, #308]	; (8001d1c <BME280_Init+0x1f0>)
 8001be8:	771a      	strb	r2, [r3, #28]
	CalibData.dig_H4 = (BME280_ReadReg(BME280_REGISTER_DIG_H4) << 4) | (BME280_ReadReg(BME280_REGISTER_DIG_H4 + 1) & 0xF);
 8001bea:	20e4      	movs	r0, #228	; 0xe4
 8001bec:	f7ff fab6 	bl	800115c <BME280_ReadReg>
 8001bf0:	4603      	mov	r3, r0
 8001bf2:	011b      	lsls	r3, r3, #4
 8001bf4:	b21c      	sxth	r4, r3
 8001bf6:	20e5      	movs	r0, #229	; 0xe5
 8001bf8:	f7ff fab0 	bl	800115c <BME280_ReadReg>
 8001bfc:	4603      	mov	r3, r0
 8001bfe:	b21b      	sxth	r3, r3
 8001c00:	f003 030f 	and.w	r3, r3, #15
 8001c04:	b21b      	sxth	r3, r3
 8001c06:	4323      	orrs	r3, r4
 8001c08:	b21a      	sxth	r2, r3
 8001c0a:	4b44      	ldr	r3, [pc, #272]	; (8001d1c <BME280_Init+0x1f0>)
 8001c0c:	83da      	strh	r2, [r3, #30]
	CalibData.dig_H5 = (BME280_ReadReg(BME280_REGISTER_DIG_H5 + 1) << 4) | (BME280_ReadReg(BME280_REGISTER_DIG_H5) >> 4);
 8001c0e:	20e6      	movs	r0, #230	; 0xe6
 8001c10:	f7ff faa4 	bl	800115c <BME280_ReadReg>
 8001c14:	4603      	mov	r3, r0
 8001c16:	011b      	lsls	r3, r3, #4
 8001c18:	b21c      	sxth	r4, r3
 8001c1a:	20e5      	movs	r0, #229	; 0xe5
 8001c1c:	f7ff fa9e 	bl	800115c <BME280_ReadReg>
 8001c20:	4603      	mov	r3, r0
 8001c22:	091b      	lsrs	r3, r3, #4
 8001c24:	b2db      	uxtb	r3, r3
 8001c26:	b21b      	sxth	r3, r3
 8001c28:	4323      	orrs	r3, r4
 8001c2a:	b21a      	sxth	r2, r3
 8001c2c:	4b3b      	ldr	r3, [pc, #236]	; (8001d1c <BME280_Init+0x1f0>)
 8001c2e:	841a      	strh	r2, [r3, #32]
	CalibData.dig_H6 = (int8_t)BME280_ReadReg(BME280_REGISTER_DIG_H6);
 8001c30:	20e7      	movs	r0, #231	; 0xe7
 8001c32:	f7ff fa93 	bl	800115c <BME280_ReadReg>
 8001c36:	4603      	mov	r3, r0
 8001c38:	b25a      	sxtb	r2, r3
 8001c3a:	4b38      	ldr	r3, [pc, #224]	; (8001d1c <BME280_Init+0x1f0>)
 8001c3c:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

	uint8_t reg = BME280_ReadReg(BME280_REG_CONFIG) & ~BME280_STBY_MSK;
 8001c40:	20f5      	movs	r0, #245	; 0xf5
 8001c42:	f7ff fa8b 	bl	800115c <BME280_ReadReg>
 8001c46:	4603      	mov	r3, r0
 8001c48:	f003 031f 	and.w	r3, r3, #31
 8001c4c:	71bb      	strb	r3, [r7, #6]
	reg |= BME280_STBY_1000 & BME280_STBY_MSK;
 8001c4e:	79bb      	ldrb	r3, [r7, #6]
 8001c50:	f063 035f 	orn	r3, r3, #95	; 0x5f
 8001c54:	71bb      	strb	r3, [r7, #6]
	BME280_WriteReg(BME280_REG_CONFIG, reg);
 8001c56:	79bb      	ldrb	r3, [r7, #6]
 8001c58:	4619      	mov	r1, r3
 8001c5a:	20f5      	movs	r0, #245	; 0xf5
 8001c5c:	f7ff fa6c 	bl	8001138 <BME280_WriteReg>

	reg = BME280_ReadReg(BME280_REG_CONFIG) & ~BME280_FILTER_MSK;
 8001c60:	20f5      	movs	r0, #245	; 0xf5
 8001c62:	f7ff fa7b 	bl	800115c <BME280_ReadReg>
 8001c66:	4603      	mov	r3, r0
 8001c68:	f023 031c 	bic.w	r3, r3, #28
 8001c6c:	71bb      	strb	r3, [r7, #6]
	reg |= BME280_FILTER_4 & BME280_FILTER_MSK;
 8001c6e:	79bb      	ldrb	r3, [r7, #6]
 8001c70:	f043 0308 	orr.w	r3, r3, #8
 8001c74:	71bb      	strb	r3, [r7, #6]
	BME280_WriteReg(BME280_REG_CONFIG, reg);
 8001c76:	79bb      	ldrb	r3, [r7, #6]
 8001c78:	4619      	mov	r1, r3
 8001c7a:	20f5      	movs	r0, #245	; 0xf5
 8001c7c:	f7ff fa5c 	bl	8001138 <BME280_WriteReg>

	reg = BME280_ReadReg(BME280_REG_CTRL_MEAS) & ~BME280_OSRS_T_MSK;
 8001c80:	20f4      	movs	r0, #244	; 0xf4
 8001c82:	f7ff fa6b 	bl	800115c <BME280_ReadReg>
 8001c86:	4603      	mov	r3, r0
 8001c88:	f003 031f 	and.w	r3, r3, #31
 8001c8c:	71bb      	strb	r3, [r7, #6]
	reg |= BME280_OSRS_T_x4 & BME280_OSRS_T_MSK;
 8001c8e:	79bb      	ldrb	r3, [r7, #6]
 8001c90:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001c94:	71bb      	strb	r3, [r7, #6]
	BME280_WriteReg(BME280_REG_CTRL_MEAS,reg);
 8001c96:	79bb      	ldrb	r3, [r7, #6]
 8001c98:	4619      	mov	r1, r3
 8001c9a:	20f4      	movs	r0, #244	; 0xf4
 8001c9c:	f7ff fa4c 	bl	8001138 <BME280_WriteReg>

	reg = BME280_ReadReg(BME280_REG_CTRL_MEAS) & ~BME280_OSRS_P_MSK;
 8001ca0:	20f4      	movs	r0, #244	; 0xf4
 8001ca2:	f7ff fa5b 	bl	800115c <BME280_ReadReg>
 8001ca6:	4603      	mov	r3, r0
 8001ca8:	f023 031c 	bic.w	r3, r3, #28
 8001cac:	71bb      	strb	r3, [r7, #6]
	reg |= BME280_OSRS_P_x4 & BME280_OSRS_P_MSK;
 8001cae:	79bb      	ldrb	r3, [r7, #6]
 8001cb0:	f043 030c 	orr.w	r3, r3, #12
 8001cb4:	71bb      	strb	r3, [r7, #6]
	BME280_WriteReg(BME280_REG_CTRL_MEAS, reg);
 8001cb6:	79bb      	ldrb	r3, [r7, #6]
 8001cb8:	4619      	mov	r1, r3
 8001cba:	20f4      	movs	r0, #244	; 0xf4
 8001cbc:	f7ff fa3c 	bl	8001138 <BME280_WriteReg>

	reg = BME280_ReadReg(BME280_REG_CTRL_HUM) & ~BME280_OSRS_H_MSK;
 8001cc0:	20f2      	movs	r0, #242	; 0xf2
 8001cc2:	f7ff fa4b 	bl	800115c <BME280_ReadReg>
 8001cc6:	4603      	mov	r3, r0
 8001cc8:	f023 0307 	bic.w	r3, r3, #7
 8001ccc:	71bb      	strb	r3, [r7, #6]
	reg |= BME280_OSRS_H_x4 & BME280_OSRS_H_MSK;
 8001cce:	79bb      	ldrb	r3, [r7, #6]
 8001cd0:	f043 0303 	orr.w	r3, r3, #3
 8001cd4:	71bb      	strb	r3, [r7, #6]
	BME280_WriteReg(BME280_REG_CTRL_HUM,reg);
 8001cd6:	79bb      	ldrb	r3, [r7, #6]
 8001cd8:	4619      	mov	r1, r3
 8001cda:	20f2      	movs	r0, #242	; 0xf2
 8001cdc:	f7ff fa2c 	bl	8001138 <BME280_WriteReg>
	reg = BME280_ReadReg(BME280_REG_CTRL_MEAS);
 8001ce0:	20f4      	movs	r0, #244	; 0xf4
 8001ce2:	f7ff fa3b 	bl	800115c <BME280_ReadReg>
 8001ce6:	4603      	mov	r3, r0
 8001ce8:	71bb      	strb	r3, [r7, #6]
	BME280_WriteReg(BME280_REG_CTRL_MEAS,reg);
 8001cea:	79bb      	ldrb	r3, [r7, #6]
 8001cec:	4619      	mov	r1, r3
 8001cee:	20f4      	movs	r0, #244	; 0xf4
 8001cf0:	f7ff fa22 	bl	8001138 <BME280_WriteReg>

	reg = BME280_ReadReg(BME280_REG_CTRL_MEAS) & ~BME280_MODE_MSK;
 8001cf4:	20f4      	movs	r0, #244	; 0xf4
 8001cf6:	f7ff fa31 	bl	800115c <BME280_ReadReg>
 8001cfa:	4603      	mov	r3, r0
 8001cfc:	f023 0303 	bic.w	r3, r3, #3
 8001d00:	71bb      	strb	r3, [r7, #6]
	reg |= BME280_MODE_NORMAL & BME280_MODE_MSK;
 8001d02:	79bb      	ldrb	r3, [r7, #6]
 8001d04:	f043 0303 	orr.w	r3, r3, #3
 8001d08:	71bb      	strb	r3, [r7, #6]
	BME280_WriteReg(BME280_REG_CTRL_MEAS,reg);
 8001d0a:	79bb      	ldrb	r3, [r7, #6]
 8001d0c:	4619      	mov	r1, r3
 8001d0e:	20f4      	movs	r0, #244	; 0xf4
 8001d10:	f7ff fa12 	bl	8001138 <BME280_WriteReg>
}
 8001d14:	370c      	adds	r7, #12
 8001d16:	46bd      	mov	sp, r7
 8001d18:	bd90      	pop	{r4, r7, pc}
 8001d1a:	bf00      	nop
 8001d1c:	200005a0 	.word	0x200005a0
 8001d20:	200005a2 	.word	0x200005a2
 8001d24:	200005a4 	.word	0x200005a4
 8001d28:	200005a6 	.word	0x200005a6
 8001d2c:	200005a8 	.word	0x200005a8
 8001d30:	200005aa 	.word	0x200005aa
 8001d34:	200005ac 	.word	0x200005ac
 8001d38:	200005ae 	.word	0x200005ae
 8001d3c:	200005b0 	.word	0x200005b0
 8001d40:	200005b2 	.word	0x200005b2
 8001d44:	200005b4 	.word	0x200005b4
 8001d48:	200005b6 	.word	0x200005b6
 8001d4c:	200005ba 	.word	0x200005ba

08001d50 <c_FFTImplementationCallback_doH>:
 * Arguments    : const double x[1024]
 *                creal_T y[1024]
 * Return Type  : void
 */
void c_FFTImplementationCallback_doH(const float x[1024], creal_T y[1024])
{
 8001d50:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001d54:	b095      	sub	sp, #84	; 0x54
 8001d56:	af00      	add	r7, sp, #0
 8001d58:	6078      	str	r0, [r7, #4]
 8001d5a:	6039      	str	r1, [r7, #0]
  int iDelta;
  int iDelta2;
  int iheight;
  int j;
  int k;
  for (i = 0; i < 512; i++) {
 8001d5c:	2300      	movs	r3, #0
 8001d5e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001d60:	e02c      	b.n	8001dbc <c_FFTImplementationCallback_doH+0x6c>
    iDelta = i << 1;
 8001d62:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001d64:	005b      	lsls	r3, r3, #1
 8001d66:	64bb      	str	r3, [r7, #72]	; 0x48
    iDelta2 = bitrevIndex[i] - 1;
 8001d68:	4aa7      	ldr	r2, [pc, #668]	; (8002008 <c_FFTImplementationCallback_doH+0x2b8>)
 8001d6a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001d6c:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8001d70:	3b01      	subs	r3, #1
 8001d72:	647b      	str	r3, [r7, #68]	; 0x44
    y[iDelta2].re = x[iDelta];
 8001d74:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001d76:	009b      	lsls	r3, r3, #2
 8001d78:	687a      	ldr	r2, [r7, #4]
 8001d7a:	4413      	add	r3, r2
 8001d7c:	6819      	ldr	r1, [r3, #0]
 8001d7e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001d80:	011b      	lsls	r3, r3, #4
 8001d82:	683a      	ldr	r2, [r7, #0]
 8001d84:	18d4      	adds	r4, r2, r3
 8001d86:	4608      	mov	r0, r1
 8001d88:	f7fe fc06 	bl	8000598 <__aeabi_f2d>
 8001d8c:	4602      	mov	r2, r0
 8001d8e:	460b      	mov	r3, r1
 8001d90:	e9c4 2300 	strd	r2, r3, [r4]
    y[iDelta2].im = x[iDelta + 1];
 8001d94:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001d96:	3301      	adds	r3, #1
 8001d98:	009b      	lsls	r3, r3, #2
 8001d9a:	687a      	ldr	r2, [r7, #4]
 8001d9c:	4413      	add	r3, r2
 8001d9e:	6819      	ldr	r1, [r3, #0]
 8001da0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001da2:	011b      	lsls	r3, r3, #4
 8001da4:	683a      	ldr	r2, [r7, #0]
 8001da6:	18d4      	adds	r4, r2, r3
 8001da8:	4608      	mov	r0, r1
 8001daa:	f7fe fbf5 	bl	8000598 <__aeabi_f2d>
 8001dae:	4602      	mov	r2, r0
 8001db0:	460b      	mov	r3, r1
 8001db2:	e9c4 2302 	strd	r2, r3, [r4, #8]
  for (i = 0; i < 512; i++) {
 8001db6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001db8:	3301      	adds	r3, #1
 8001dba:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001dbc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001dbe:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001dc2:	dbce      	blt.n	8001d62 <c_FFTImplementationCallback_doH+0x12>
  }
  for (i = 0; i <= 510; i += 2) {
 8001dc4:	2300      	movs	r3, #0
 8001dc6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001dc8:	e086      	b.n	8001ed8 <c_FFTImplementationCallback_doH+0x188>
    re = y[i + 1].re;
 8001dca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001dcc:	3301      	adds	r3, #1
 8001dce:	011b      	lsls	r3, r3, #4
 8001dd0:	683a      	ldr	r2, [r7, #0]
 8001dd2:	4413      	add	r3, r2
 8001dd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001dd8:	4610      	mov	r0, r2
 8001dda:	4619      	mov	r1, r3
 8001ddc:	f7fe ff0c 	bl	8000bf8 <__aeabi_d2f>
 8001de0:	4603      	mov	r3, r0
 8001de2:	62fb      	str	r3, [r7, #44]	; 0x2c
    im = y[i + 1].im;
 8001de4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001de6:	3301      	adds	r3, #1
 8001de8:	011b      	lsls	r3, r3, #4
 8001dea:	683a      	ldr	r2, [r7, #0]
 8001dec:	4413      	add	r3, r2
 8001dee:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8001df2:	4610      	mov	r0, r2
 8001df4:	4619      	mov	r1, r3
 8001df6:	f7fe feff 	bl	8000bf8 <__aeabi_d2f>
 8001dfa:	4603      	mov	r3, r0
 8001dfc:	62bb      	str	r3, [r7, #40]	; 0x28
    temp_re = re;
 8001dfe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e00:	627b      	str	r3, [r7, #36]	; 0x24
    temp_im = im;
 8001e02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e04:	613b      	str	r3, [r7, #16]
    b_re = y[i].re;
 8001e06:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001e08:	011b      	lsls	r3, r3, #4
 8001e0a:	683a      	ldr	r2, [r7, #0]
 8001e0c:	4413      	add	r3, r2
 8001e0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e12:	4610      	mov	r0, r2
 8001e14:	4619      	mov	r1, r3
 8001e16:	f7fe feef 	bl	8000bf8 <__aeabi_d2f>
 8001e1a:	4603      	mov	r3, r0
 8001e1c:	623b      	str	r3, [r7, #32]
    b_im = y[i].im;
 8001e1e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001e20:	011b      	lsls	r3, r3, #4
 8001e22:	683a      	ldr	r2, [r7, #0]
 8001e24:	4413      	add	r3, r2
 8001e26:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8001e2a:	4610      	mov	r0, r2
 8001e2c:	4619      	mov	r1, r3
 8001e2e:	f7fe fee3 	bl	8000bf8 <__aeabi_d2f>
 8001e32:	4603      	mov	r3, r0
 8001e34:	617b      	str	r3, [r7, #20]
    re = b_re - re;
 8001e36:	ed97 7a08 	vldr	s14, [r7, #32]
 8001e3a:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8001e3e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001e42:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
    im = b_im - im;
 8001e46:	ed97 7a05 	vldr	s14, [r7, #20]
 8001e4a:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8001e4e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001e52:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
    y[i + 1].re = re;
 8001e56:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001e58:	3301      	adds	r3, #1
 8001e5a:	011b      	lsls	r3, r3, #4
 8001e5c:	683a      	ldr	r2, [r7, #0]
 8001e5e:	18d4      	adds	r4, r2, r3
 8001e60:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001e62:	f7fe fb99 	bl	8000598 <__aeabi_f2d>
 8001e66:	4602      	mov	r2, r0
 8001e68:	460b      	mov	r3, r1
 8001e6a:	e9c4 2300 	strd	r2, r3, [r4]
    y[i + 1].im = im;
 8001e6e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001e70:	3301      	adds	r3, #1
 8001e72:	011b      	lsls	r3, r3, #4
 8001e74:	683a      	ldr	r2, [r7, #0]
 8001e76:	18d4      	adds	r4, r2, r3
 8001e78:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001e7a:	f7fe fb8d 	bl	8000598 <__aeabi_f2d>
 8001e7e:	4602      	mov	r2, r0
 8001e80:	460b      	mov	r3, r1
 8001e82:	e9c4 2302 	strd	r2, r3, [r4, #8]
    b_re += temp_re;
 8001e86:	ed97 7a08 	vldr	s14, [r7, #32]
 8001e8a:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8001e8e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001e92:	edc7 7a08 	vstr	s15, [r7, #32]
    b_im += temp_im;
 8001e96:	ed97 7a05 	vldr	s14, [r7, #20]
 8001e9a:	edd7 7a04 	vldr	s15, [r7, #16]
 8001e9e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001ea2:	edc7 7a05 	vstr	s15, [r7, #20]
    y[i].re = b_re;
 8001ea6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001ea8:	011b      	lsls	r3, r3, #4
 8001eaa:	683a      	ldr	r2, [r7, #0]
 8001eac:	18d4      	adds	r4, r2, r3
 8001eae:	6a38      	ldr	r0, [r7, #32]
 8001eb0:	f7fe fb72 	bl	8000598 <__aeabi_f2d>
 8001eb4:	4602      	mov	r2, r0
 8001eb6:	460b      	mov	r3, r1
 8001eb8:	e9c4 2300 	strd	r2, r3, [r4]
    y[i].im = b_im;
 8001ebc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001ebe:	011b      	lsls	r3, r3, #4
 8001ec0:	683a      	ldr	r2, [r7, #0]
 8001ec2:	18d4      	adds	r4, r2, r3
 8001ec4:	6978      	ldr	r0, [r7, #20]
 8001ec6:	f7fe fb67 	bl	8000598 <__aeabi_f2d>
 8001eca:	4602      	mov	r2, r0
 8001ecc:	460b      	mov	r3, r1
 8001ece:	e9c4 2302 	strd	r2, r3, [r4, #8]
  for (i = 0; i <= 510; i += 2) {
 8001ed2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001ed4:	3302      	adds	r3, #2
 8001ed6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001ed8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001eda:	f5b3 7fff 	cmp.w	r3, #510	; 0x1fe
 8001ede:	f77f af74 	ble.w	8001dca <c_FFTImplementationCallback_doH+0x7a>
  }
  iDelta = 2;
 8001ee2:	2302      	movs	r3, #2
 8001ee4:	64bb      	str	r3, [r7, #72]	; 0x48
  iDelta2 = 4;
 8001ee6:	2304      	movs	r3, #4
 8001ee8:	647b      	str	r3, [r7, #68]	; 0x44
  k = 128;
 8001eea:	2380      	movs	r3, #128	; 0x80
 8001eec:	63bb      	str	r3, [r7, #56]	; 0x38
  iheight = 509;
 8001eee:	f240 13fd 	movw	r3, #509	; 0x1fd
 8001ef2:	643b      	str	r3, [r7, #64]	; 0x40
  while (k > 0) {
 8001ef4:	e157      	b.n	80021a6 <c_FFTImplementationCallback_doH+0x456>
    int b_temp_re_tmp;
    int istart;
    for (i = 0; i < iheight; i += iDelta2) {
 8001ef6:	2300      	movs	r3, #0
 8001ef8:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001efa:	e07b      	b.n	8001ff4 <c_FFTImplementationCallback_doH+0x2a4>
      b_temp_re_tmp = i + iDelta;
 8001efc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001efe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001f00:	4413      	add	r3, r2
 8001f02:	60bb      	str	r3, [r7, #8]
      temp_re = y[b_temp_re_tmp].re;
 8001f04:	68bb      	ldr	r3, [r7, #8]
 8001f06:	011b      	lsls	r3, r3, #4
 8001f08:	683a      	ldr	r2, [r7, #0]
 8001f0a:	4413      	add	r3, r2
 8001f0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f10:	4610      	mov	r0, r2
 8001f12:	4619      	mov	r1, r3
 8001f14:	f7fe fe70 	bl	8000bf8 <__aeabi_d2f>
 8001f18:	4603      	mov	r3, r0
 8001f1a:	627b      	str	r3, [r7, #36]	; 0x24
      temp_im = y[b_temp_re_tmp].im;
 8001f1c:	68bb      	ldr	r3, [r7, #8]
 8001f1e:	011b      	lsls	r3, r3, #4
 8001f20:	683a      	ldr	r2, [r7, #0]
 8001f22:	4413      	add	r3, r2
 8001f24:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8001f28:	4610      	mov	r0, r2
 8001f2a:	4619      	mov	r1, r3
 8001f2c:	f7fe fe64 	bl	8000bf8 <__aeabi_d2f>
 8001f30:	4603      	mov	r3, r0
 8001f32:	613b      	str	r3, [r7, #16]
      y[b_temp_re_tmp].re = y[i].re - temp_re;
 8001f34:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001f36:	011b      	lsls	r3, r3, #4
 8001f38:	683a      	ldr	r2, [r7, #0]
 8001f3a:	4413      	add	r3, r2
 8001f3c:	e9d3 4500 	ldrd	r4, r5, [r3]
 8001f40:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001f42:	f7fe fb29 	bl	8000598 <__aeabi_f2d>
 8001f46:	4602      	mov	r2, r0
 8001f48:	460b      	mov	r3, r1
 8001f4a:	68b9      	ldr	r1, [r7, #8]
 8001f4c:	0109      	lsls	r1, r1, #4
 8001f4e:	6838      	ldr	r0, [r7, #0]
 8001f50:	1846      	adds	r6, r0, r1
 8001f52:	4620      	mov	r0, r4
 8001f54:	4629      	mov	r1, r5
 8001f56:	f7fe f9bf 	bl	80002d8 <__aeabi_dsub>
 8001f5a:	4602      	mov	r2, r0
 8001f5c:	460b      	mov	r3, r1
 8001f5e:	e9c6 2300 	strd	r2, r3, [r6]
      y[b_temp_re_tmp].im = y[i].im - temp_im;
 8001f62:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001f64:	011b      	lsls	r3, r3, #4
 8001f66:	683a      	ldr	r2, [r7, #0]
 8001f68:	4413      	add	r3, r2
 8001f6a:	e9d3 4502 	ldrd	r4, r5, [r3, #8]
 8001f6e:	6938      	ldr	r0, [r7, #16]
 8001f70:	f7fe fb12 	bl	8000598 <__aeabi_f2d>
 8001f74:	4602      	mov	r2, r0
 8001f76:	460b      	mov	r3, r1
 8001f78:	68b9      	ldr	r1, [r7, #8]
 8001f7a:	0109      	lsls	r1, r1, #4
 8001f7c:	6838      	ldr	r0, [r7, #0]
 8001f7e:	1846      	adds	r6, r0, r1
 8001f80:	4620      	mov	r0, r4
 8001f82:	4629      	mov	r1, r5
 8001f84:	f7fe f9a8 	bl	80002d8 <__aeabi_dsub>
 8001f88:	4602      	mov	r2, r0
 8001f8a:	460b      	mov	r3, r1
 8001f8c:	e9c6 2302 	strd	r2, r3, [r6, #8]
      y[i].re += temp_re;
 8001f90:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001f92:	011b      	lsls	r3, r3, #4
 8001f94:	683a      	ldr	r2, [r7, #0]
 8001f96:	4413      	add	r3, r2
 8001f98:	e9d3 4500 	ldrd	r4, r5, [r3]
 8001f9c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001f9e:	f7fe fafb 	bl	8000598 <__aeabi_f2d>
 8001fa2:	4602      	mov	r2, r0
 8001fa4:	460b      	mov	r3, r1
 8001fa6:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8001fa8:	0109      	lsls	r1, r1, #4
 8001faa:	6838      	ldr	r0, [r7, #0]
 8001fac:	1846      	adds	r6, r0, r1
 8001fae:	4620      	mov	r0, r4
 8001fb0:	4629      	mov	r1, r5
 8001fb2:	f7fe f993 	bl	80002dc <__adddf3>
 8001fb6:	4602      	mov	r2, r0
 8001fb8:	460b      	mov	r3, r1
 8001fba:	e9c6 2300 	strd	r2, r3, [r6]
      y[i].im += temp_im;
 8001fbe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001fc0:	011b      	lsls	r3, r3, #4
 8001fc2:	683a      	ldr	r2, [r7, #0]
 8001fc4:	4413      	add	r3, r2
 8001fc6:	e9d3 4502 	ldrd	r4, r5, [r3, #8]
 8001fca:	6938      	ldr	r0, [r7, #16]
 8001fcc:	f7fe fae4 	bl	8000598 <__aeabi_f2d>
 8001fd0:	4602      	mov	r2, r0
 8001fd2:	460b      	mov	r3, r1
 8001fd4:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8001fd6:	0109      	lsls	r1, r1, #4
 8001fd8:	6838      	ldr	r0, [r7, #0]
 8001fda:	1846      	adds	r6, r0, r1
 8001fdc:	4620      	mov	r0, r4
 8001fde:	4629      	mov	r1, r5
 8001fe0:	f7fe f97c 	bl	80002dc <__adddf3>
 8001fe4:	4602      	mov	r2, r0
 8001fe6:	460b      	mov	r3, r1
 8001fe8:	e9c6 2302 	strd	r2, r3, [r6, #8]
    for (i = 0; i < iheight; i += iDelta2) {
 8001fec:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001fee:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001ff0:	4413      	add	r3, r2
 8001ff2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001ff4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001ff6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001ff8:	429a      	cmp	r2, r3
 8001ffa:	f6ff af7f 	blt.w	8001efc <c_FFTImplementationCallback_doH+0x1ac>
    }
    istart = 1;
 8001ffe:	2301      	movs	r3, #1
 8002000:	637b      	str	r3, [r7, #52]	; 0x34
    for (j = k; j < 256; j += k) {
 8002002:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002004:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002006:	e0bc      	b.n	8002182 <c_FFTImplementationCallback_doH+0x432>
 8002008:	08014c10 	.word	0x08014c10
      int ihi;
      temp2_re = dv[j];
 800200c:	4aa9      	ldr	r2, [pc, #676]	; (80022b4 <c_FFTImplementationCallback_doH+0x564>)
 800200e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002010:	009b      	lsls	r3, r3, #2
 8002012:	4413      	add	r3, r2
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	61fb      	str	r3, [r7, #28]
      temp2_im = dv1[j];
 8002018:	4aa7      	ldr	r2, [pc, #668]	; (80022b8 <c_FFTImplementationCallback_doH+0x568>)
 800201a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800201c:	009b      	lsls	r3, r3, #2
 800201e:	4413      	add	r3, r2
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	61bb      	str	r3, [r7, #24]
      i = istart;
 8002024:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002026:	64fb      	str	r3, [r7, #76]	; 0x4c
      ihi = istart + iheight;
 8002028:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800202a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800202c:	4413      	add	r3, r2
 800202e:	60fb      	str	r3, [r7, #12]
      while (i < ihi) {
 8002030:	e09b      	b.n	800216a <c_FFTImplementationCallback_doH+0x41a>
        b_temp_re_tmp = i + iDelta;
 8002032:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002034:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002036:	4413      	add	r3, r2
 8002038:	60bb      	str	r3, [r7, #8]
        temp_re_tmp = y[b_temp_re_tmp].im;
 800203a:	68bb      	ldr	r3, [r7, #8]
 800203c:	011b      	lsls	r3, r3, #4
 800203e:	683a      	ldr	r2, [r7, #0]
 8002040:	4413      	add	r3, r2
 8002042:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8002046:	4610      	mov	r0, r2
 8002048:	4619      	mov	r1, r3
 800204a:	f7fe fdd5 	bl	8000bf8 <__aeabi_d2f>
 800204e:	4603      	mov	r3, r0
 8002050:	633b      	str	r3, [r7, #48]	; 0x30
        im = y[b_temp_re_tmp].re;
 8002052:	68bb      	ldr	r3, [r7, #8]
 8002054:	011b      	lsls	r3, r3, #4
 8002056:	683a      	ldr	r2, [r7, #0]
 8002058:	4413      	add	r3, r2
 800205a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800205e:	4610      	mov	r0, r2
 8002060:	4619      	mov	r1, r3
 8002062:	f7fe fdc9 	bl	8000bf8 <__aeabi_d2f>
 8002066:	4603      	mov	r3, r0
 8002068:	62bb      	str	r3, [r7, #40]	; 0x28
        temp_re = temp2_re * im - temp2_im * temp_re_tmp;
 800206a:	ed97 7a07 	vldr	s14, [r7, #28]
 800206e:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8002072:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002076:	edd7 6a06 	vldr	s13, [r7, #24]
 800207a:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800207e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002082:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002086:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
        temp_im = temp2_re * temp_re_tmp + temp2_im * im;
 800208a:	ed97 7a07 	vldr	s14, [r7, #28]
 800208e:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8002092:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002096:	edd7 6a06 	vldr	s13, [r7, #24]
 800209a:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800209e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80020a2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80020a6:	edc7 7a04 	vstr	s15, [r7, #16]
        y[b_temp_re_tmp].re = y[i].re - temp_re;
 80020aa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80020ac:	011b      	lsls	r3, r3, #4
 80020ae:	683a      	ldr	r2, [r7, #0]
 80020b0:	4413      	add	r3, r2
 80020b2:	e9d3 4500 	ldrd	r4, r5, [r3]
 80020b6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80020b8:	f7fe fa6e 	bl	8000598 <__aeabi_f2d>
 80020bc:	4602      	mov	r2, r0
 80020be:	460b      	mov	r3, r1
 80020c0:	68b9      	ldr	r1, [r7, #8]
 80020c2:	0109      	lsls	r1, r1, #4
 80020c4:	6838      	ldr	r0, [r7, #0]
 80020c6:	1846      	adds	r6, r0, r1
 80020c8:	4620      	mov	r0, r4
 80020ca:	4629      	mov	r1, r5
 80020cc:	f7fe f904 	bl	80002d8 <__aeabi_dsub>
 80020d0:	4602      	mov	r2, r0
 80020d2:	460b      	mov	r3, r1
 80020d4:	e9c6 2300 	strd	r2, r3, [r6]
        y[b_temp_re_tmp].im = y[i].im - temp_im;
 80020d8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80020da:	011b      	lsls	r3, r3, #4
 80020dc:	683a      	ldr	r2, [r7, #0]
 80020de:	4413      	add	r3, r2
 80020e0:	e9d3 4502 	ldrd	r4, r5, [r3, #8]
 80020e4:	6938      	ldr	r0, [r7, #16]
 80020e6:	f7fe fa57 	bl	8000598 <__aeabi_f2d>
 80020ea:	4602      	mov	r2, r0
 80020ec:	460b      	mov	r3, r1
 80020ee:	68b9      	ldr	r1, [r7, #8]
 80020f0:	0109      	lsls	r1, r1, #4
 80020f2:	6838      	ldr	r0, [r7, #0]
 80020f4:	1846      	adds	r6, r0, r1
 80020f6:	4620      	mov	r0, r4
 80020f8:	4629      	mov	r1, r5
 80020fa:	f7fe f8ed 	bl	80002d8 <__aeabi_dsub>
 80020fe:	4602      	mov	r2, r0
 8002100:	460b      	mov	r3, r1
 8002102:	e9c6 2302 	strd	r2, r3, [r6, #8]
        y[i].re += temp_re;
 8002106:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002108:	011b      	lsls	r3, r3, #4
 800210a:	683a      	ldr	r2, [r7, #0]
 800210c:	4413      	add	r3, r2
 800210e:	e9d3 4500 	ldrd	r4, r5, [r3]
 8002112:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002114:	f7fe fa40 	bl	8000598 <__aeabi_f2d>
 8002118:	4602      	mov	r2, r0
 800211a:	460b      	mov	r3, r1
 800211c:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800211e:	0109      	lsls	r1, r1, #4
 8002120:	6838      	ldr	r0, [r7, #0]
 8002122:	1846      	adds	r6, r0, r1
 8002124:	4620      	mov	r0, r4
 8002126:	4629      	mov	r1, r5
 8002128:	f7fe f8d8 	bl	80002dc <__adddf3>
 800212c:	4602      	mov	r2, r0
 800212e:	460b      	mov	r3, r1
 8002130:	e9c6 2300 	strd	r2, r3, [r6]
        y[i].im += temp_im;
 8002134:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002136:	011b      	lsls	r3, r3, #4
 8002138:	683a      	ldr	r2, [r7, #0]
 800213a:	4413      	add	r3, r2
 800213c:	e9d3 4502 	ldrd	r4, r5, [r3, #8]
 8002140:	6938      	ldr	r0, [r7, #16]
 8002142:	f7fe fa29 	bl	8000598 <__aeabi_f2d>
 8002146:	4602      	mov	r2, r0
 8002148:	460b      	mov	r3, r1
 800214a:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800214c:	0109      	lsls	r1, r1, #4
 800214e:	6838      	ldr	r0, [r7, #0]
 8002150:	1846      	adds	r6, r0, r1
 8002152:	4620      	mov	r0, r4
 8002154:	4629      	mov	r1, r5
 8002156:	f7fe f8c1 	bl	80002dc <__adddf3>
 800215a:	4602      	mov	r2, r0
 800215c:	460b      	mov	r3, r1
 800215e:	e9c6 2302 	strd	r2, r3, [r6, #8]
        i += iDelta2;
 8002162:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002164:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002166:	4413      	add	r3, r2
 8002168:	64fb      	str	r3, [r7, #76]	; 0x4c
      while (i < ihi) {
 800216a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	429a      	cmp	r2, r3
 8002170:	f6ff af5f 	blt.w	8002032 <c_FFTImplementationCallback_doH+0x2e2>
      }
      istart++;
 8002174:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002176:	3301      	adds	r3, #1
 8002178:	637b      	str	r3, [r7, #52]	; 0x34
    for (j = k; j < 256; j += k) {
 800217a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800217c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800217e:	4413      	add	r3, r2
 8002180:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002182:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002184:	2bff      	cmp	r3, #255	; 0xff
 8002186:	f77f af41 	ble.w	800200c <c_FFTImplementationCallback_doH+0x2bc>
    }
    k /= 2;
 800218a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800218c:	0fda      	lsrs	r2, r3, #31
 800218e:	4413      	add	r3, r2
 8002190:	105b      	asrs	r3, r3, #1
 8002192:	63bb      	str	r3, [r7, #56]	; 0x38
    iDelta = iDelta2;
 8002194:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002196:	64bb      	str	r3, [r7, #72]	; 0x48
    iDelta2 += iDelta2;
 8002198:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800219a:	005b      	lsls	r3, r3, #1
 800219c:	647b      	str	r3, [r7, #68]	; 0x44
    iheight -= iDelta;
 800219e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80021a0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80021a2:	1ad3      	subs	r3, r2, r3
 80021a4:	643b      	str	r3, [r7, #64]	; 0x40
  while (k > 0) {
 80021a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	f73f aea4 	bgt.w	8001ef6 <c_FFTImplementationCallback_doH+0x1a6>
  }
  temp_re_tmp = y[0].re;
 80021ae:	683b      	ldr	r3, [r7, #0]
 80021b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021b4:	4610      	mov	r0, r2
 80021b6:	4619      	mov	r1, r3
 80021b8:	f7fe fd1e 	bl	8000bf8 <__aeabi_d2f>
 80021bc:	4603      	mov	r3, r0
 80021be:	633b      	str	r3, [r7, #48]	; 0x30
  re = y[0].im;
 80021c0:	683b      	ldr	r3, [r7, #0]
 80021c2:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80021c6:	4610      	mov	r0, r2
 80021c8:	4619      	mov	r1, r3
 80021ca:	f7fe fd15 	bl	8000bf8 <__aeabi_d2f>
 80021ce:	4603      	mov	r3, r0
 80021d0:	62fb      	str	r3, [r7, #44]	; 0x2c
  y[0].re = 0.5 * ((temp_re_tmp - (-re)) + (temp_re_tmp - (-re)));
 80021d2:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 80021d6:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80021da:	ee77 7a27 	vadd.f32	s15, s14, s15
 80021de:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80021e2:	ee17 0a90 	vmov	r0, s15
 80021e6:	f7fe f9d7 	bl	8000598 <__aeabi_f2d>
 80021ea:	f04f 0200 	mov.w	r2, #0
 80021ee:	4b33      	ldr	r3, [pc, #204]	; (80022bc <c_FFTImplementationCallback_doH+0x56c>)
 80021f0:	f7fe fa2a 	bl	8000648 <__aeabi_dmul>
 80021f4:	4602      	mov	r2, r0
 80021f6:	460b      	mov	r3, r1
 80021f8:	6839      	ldr	r1, [r7, #0]
 80021fa:	e9c1 2300 	strd	r2, r3, [r1]
  y[0].im = 0.5 * ((-temp_re_tmp + re) + (temp_re_tmp - re));
 80021fe:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8002202:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8002206:	ee37 7a67 	vsub.f32	s14, s14, s15
 800220a:	edd7 6a0c 	vldr	s13, [r7, #48]	; 0x30
 800220e:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8002212:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8002216:	ee77 7a27 	vadd.f32	s15, s14, s15
 800221a:	ee17 0a90 	vmov	r0, s15
 800221e:	f7fe f9bb 	bl	8000598 <__aeabi_f2d>
 8002222:	f04f 0200 	mov.w	r2, #0
 8002226:	4b25      	ldr	r3, [pc, #148]	; (80022bc <c_FFTImplementationCallback_doH+0x56c>)
 8002228:	f7fe fa0e 	bl	8000648 <__aeabi_dmul>
 800222c:	4602      	mov	r2, r0
 800222e:	460b      	mov	r3, r1
 8002230:	6839      	ldr	r1, [r7, #0]
 8002232:	e9c1 2302 	strd	r2, r3, [r1, #8]
  im = temp_re_tmp - re;
 8002236:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 800223a:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800223e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002242:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
  y[512].re = 0.5 * (im + im);
 8002246:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800224a:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800224e:	ee17 0a90 	vmov	r0, s15
 8002252:	f7fe f9a1 	bl	8000598 <__aeabi_f2d>
 8002256:	683b      	ldr	r3, [r7, #0]
 8002258:	f503 5400 	add.w	r4, r3, #8192	; 0x2000
 800225c:	f04f 0200 	mov.w	r2, #0
 8002260:	4b16      	ldr	r3, [pc, #88]	; (80022bc <c_FFTImplementationCallback_doH+0x56c>)
 8002262:	f7fe f9f1 	bl	8000648 <__aeabi_dmul>
 8002266:	4602      	mov	r2, r0
 8002268:	460b      	mov	r3, r1
 800226a:	e9c4 2300 	strd	r2, r3, [r4]
  y[512].im = 0.5 * ((temp_re_tmp + re) + (-temp_re_tmp - re));
 800226e:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 8002272:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8002276:	ee37 7a27 	vadd.f32	s14, s14, s15
 800227a:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800227e:	eef1 6a67 	vneg.f32	s13, s15
 8002282:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8002286:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800228a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800228e:	ee17 0a90 	vmov	r0, s15
 8002292:	f7fe f981 	bl	8000598 <__aeabi_f2d>
 8002296:	683b      	ldr	r3, [r7, #0]
 8002298:	f503 5400 	add.w	r4, r3, #8192	; 0x2000
 800229c:	f04f 0200 	mov.w	r2, #0
 80022a0:	4b06      	ldr	r3, [pc, #24]	; (80022bc <c_FFTImplementationCallback_doH+0x56c>)
 80022a2:	f7fe f9d1 	bl	8000648 <__aeabi_dmul>
 80022a6:	4602      	mov	r2, r0
 80022a8:	460b      	mov	r3, r1
 80022aa:	e9c4 2302 	strd	r2, r3, [r4, #8]
  for (i = 0; i < 255; i++) {
 80022ae:	2300      	movs	r3, #0
 80022b0:	64fb      	str	r3, [r7, #76]	; 0x4c
 80022b2:	e24c      	b.n	800274e <c_FFTImplementationCallback_doH+0x9fe>
 80022b4:	08015010 	.word	0x08015010
 80022b8:	08015410 	.word	0x08015410
 80022bc:	3fe00000 	.word	0x3fe00000
    temp_re_tmp = y[i + 1].re;
 80022c0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80022c2:	3301      	adds	r3, #1
 80022c4:	011b      	lsls	r3, r3, #4
 80022c6:	683a      	ldr	r2, [r7, #0]
 80022c8:	4413      	add	r3, r2
 80022ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022ce:	4610      	mov	r0, r2
 80022d0:	4619      	mov	r1, r3
 80022d2:	f7fe fc91 	bl	8000bf8 <__aeabi_d2f>
 80022d6:	4603      	mov	r3, r0
 80022d8:	633b      	str	r3, [r7, #48]	; 0x30
    temp_re = y[i + 1].im;
 80022da:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80022dc:	3301      	adds	r3, #1
 80022de:	011b      	lsls	r3, r3, #4
 80022e0:	683a      	ldr	r2, [r7, #0]
 80022e2:	4413      	add	r3, r2
 80022e4:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80022e8:	4610      	mov	r0, r2
 80022ea:	4619      	mov	r1, r3
 80022ec:	f7fe fc84 	bl	8000bf8 <__aeabi_d2f>
 80022f0:	4603      	mov	r3, r0
 80022f2:	627b      	str	r3, [r7, #36]	; 0x24
    iDelta = iv[i + 1];
 80022f4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80022f6:	3301      	adds	r3, #1
 80022f8:	4ad2      	ldr	r2, [pc, #840]	; (8002644 <c_FFTImplementationCallback_doH+0x8f4>)
 80022fa:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 80022fe:	64bb      	str	r3, [r7, #72]	; 0x48
    temp2_re = y[iDelta - 1].re;
 8002300:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002302:	f103 5380 	add.w	r3, r3, #268435456	; 0x10000000
 8002306:	3b01      	subs	r3, #1
 8002308:	011b      	lsls	r3, r3, #4
 800230a:	683a      	ldr	r2, [r7, #0]
 800230c:	4413      	add	r3, r2
 800230e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002312:	4610      	mov	r0, r2
 8002314:	4619      	mov	r1, r3
 8002316:	f7fe fc6f 	bl	8000bf8 <__aeabi_d2f>
 800231a:	4603      	mov	r3, r0
 800231c:	61fb      	str	r3, [r7, #28]
    temp2_im = y[iDelta - 1].im;
 800231e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002320:	f103 5380 	add.w	r3, r3, #268435456	; 0x10000000
 8002324:	3b01      	subs	r3, #1
 8002326:	011b      	lsls	r3, r3, #4
 8002328:	683a      	ldr	r2, [r7, #0]
 800232a:	4413      	add	r3, r2
 800232c:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8002330:	4610      	mov	r0, r2
 8002332:	4619      	mov	r1, r3
 8002334:	f7fe fc60 	bl	8000bf8 <__aeabi_d2f>
 8002338:	4603      	mov	r3, r0
 800233a:	61bb      	str	r3, [r7, #24]
    re = reconVar1[i + 1].im;
 800233c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800233e:	3301      	adds	r3, #1
 8002340:	4ac1      	ldr	r2, [pc, #772]	; (8002648 <c_FFTImplementationCallback_doH+0x8f8>)
 8002342:	011b      	lsls	r3, r3, #4
 8002344:	4413      	add	r3, r2
 8002346:	3308      	adds	r3, #8
 8002348:	e9d3 2300 	ldrd	r2, r3, [r3]
 800234c:	4610      	mov	r0, r2
 800234e:	4619      	mov	r1, r3
 8002350:	f7fe fc52 	bl	8000bf8 <__aeabi_d2f>
 8002354:	4603      	mov	r3, r0
 8002356:	62fb      	str	r3, [r7, #44]	; 0x2c
    b_re = reconVar1[i + 1].re;
 8002358:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800235a:	3301      	adds	r3, #1
 800235c:	4aba      	ldr	r2, [pc, #744]	; (8002648 <c_FFTImplementationCallback_doH+0x8f8>)
 800235e:	011b      	lsls	r3, r3, #4
 8002360:	4413      	add	r3, r2
 8002362:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002366:	4610      	mov	r0, r2
 8002368:	4619      	mov	r1, r3
 800236a:	f7fe fc45 	bl	8000bf8 <__aeabi_d2f>
 800236e:	4603      	mov	r3, r0
 8002370:	623b      	str	r3, [r7, #32]
    b_im = reconVar2[i + 1].im;
 8002372:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002374:	3301      	adds	r3, #1
 8002376:	4ab5      	ldr	r2, [pc, #724]	; (800264c <c_FFTImplementationCallback_doH+0x8fc>)
 8002378:	011b      	lsls	r3, r3, #4
 800237a:	4413      	add	r3, r2
 800237c:	3308      	adds	r3, #8
 800237e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002382:	4610      	mov	r0, r2
 8002384:	4619      	mov	r1, r3
 8002386:	f7fe fc37 	bl	8000bf8 <__aeabi_d2f>
 800238a:	4603      	mov	r3, r0
 800238c:	617b      	str	r3, [r7, #20]
    temp_im = reconVar2[i + 1].re;
 800238e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002390:	3301      	adds	r3, #1
 8002392:	4aae      	ldr	r2, [pc, #696]	; (800264c <c_FFTImplementationCallback_doH+0x8fc>)
 8002394:	011b      	lsls	r3, r3, #4
 8002396:	4413      	add	r3, r2
 8002398:	e9d3 2300 	ldrd	r2, r3, [r3]
 800239c:	4610      	mov	r0, r2
 800239e:	4619      	mov	r1, r3
 80023a0:	f7fe fc2a 	bl	8000bf8 <__aeabi_d2f>
 80023a4:	4603      	mov	r3, r0
 80023a6:	613b      	str	r3, [r7, #16]
    y[i + 1].re = 0.5 * ((temp_re_tmp * b_re - temp_re * re) +
 80023a8:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 80023ac:	edd7 7a08 	vldr	s15, [r7, #32]
 80023b0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80023b4:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 80023b8:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80023bc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80023c0:	ee37 7a67 	vsub.f32	s14, s14, s15
                         (temp2_re * temp_im - -temp2_im * b_im));
 80023c4:	edd7 6a07 	vldr	s13, [r7, #28]
 80023c8:	edd7 7a04 	vldr	s15, [r7, #16]
 80023cc:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80023d0:	ed97 6a06 	vldr	s12, [r7, #24]
 80023d4:	edd7 7a05 	vldr	s15, [r7, #20]
 80023d8:	ee66 7a27 	vmul.f32	s15, s12, s15
 80023dc:	ee76 7aa7 	vadd.f32	s15, s13, s15
    y[i + 1].re = 0.5 * ((temp_re_tmp * b_re - temp_re * re) +
 80023e0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80023e4:	ee17 0a90 	vmov	r0, s15
 80023e8:	f7fe f8d6 	bl	8000598 <__aeabi_f2d>
 80023ec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80023ee:	3301      	adds	r3, #1
 80023f0:	011b      	lsls	r3, r3, #4
 80023f2:	683a      	ldr	r2, [r7, #0]
 80023f4:	18d4      	adds	r4, r2, r3
 80023f6:	f04f 0200 	mov.w	r2, #0
 80023fa:	4b95      	ldr	r3, [pc, #596]	; (8002650 <c_FFTImplementationCallback_doH+0x900>)
 80023fc:	f7fe f924 	bl	8000648 <__aeabi_dmul>
 8002400:	4602      	mov	r2, r0
 8002402:	460b      	mov	r3, r1
 8002404:	e9c4 2300 	strd	r2, r3, [r4]
    y[i + 1].im = 0.5 * ((temp_re_tmp * re + temp_re * b_re) +
 8002408:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 800240c:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8002410:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002414:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 8002418:	edd7 7a08 	vldr	s15, [r7, #32]
 800241c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002420:	ee37 7a27 	vadd.f32	s14, s14, s15
                         (temp2_re * b_im + -temp2_im * temp_im));
 8002424:	edd7 6a07 	vldr	s13, [r7, #28]
 8002428:	edd7 7a05 	vldr	s15, [r7, #20]
 800242c:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002430:	edd7 7a06 	vldr	s15, [r7, #24]
 8002434:	eeb1 6a67 	vneg.f32	s12, s15
 8002438:	edd7 7a04 	vldr	s15, [r7, #16]
 800243c:	ee66 7a27 	vmul.f32	s15, s12, s15
 8002440:	ee76 7aa7 	vadd.f32	s15, s13, s15
    y[i + 1].im = 0.5 * ((temp_re_tmp * re + temp_re * b_re) +
 8002444:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002448:	ee17 0a90 	vmov	r0, s15
 800244c:	f7fe f8a4 	bl	8000598 <__aeabi_f2d>
 8002450:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002452:	3301      	adds	r3, #1
 8002454:	011b      	lsls	r3, r3, #4
 8002456:	683a      	ldr	r2, [r7, #0]
 8002458:	18d4      	adds	r4, r2, r3
 800245a:	f04f 0200 	mov.w	r2, #0
 800245e:	4b7c      	ldr	r3, [pc, #496]	; (8002650 <c_FFTImplementationCallback_doH+0x900>)
 8002460:	f7fe f8f2 	bl	8000648 <__aeabi_dmul>
 8002464:	4602      	mov	r2, r0
 8002466:	460b      	mov	r3, r1
 8002468:	e9c4 2302 	strd	r2, r3, [r4, #8]
    y[i + 513].re = 0.5 * ((temp_re_tmp * temp_im - temp_re * b_im) +
 800246c:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 8002470:	edd7 7a04 	vldr	s15, [r7, #16]
 8002474:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002478:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 800247c:	edd7 7a05 	vldr	s15, [r7, #20]
 8002480:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002484:	ee37 7a67 	vsub.f32	s14, s14, s15
                           (temp2_re * b_re - -temp2_im * re));
 8002488:	edd7 6a07 	vldr	s13, [r7, #28]
 800248c:	edd7 7a08 	vldr	s15, [r7, #32]
 8002490:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002494:	ed97 6a06 	vldr	s12, [r7, #24]
 8002498:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800249c:	ee66 7a27 	vmul.f32	s15, s12, s15
 80024a0:	ee76 7aa7 	vadd.f32	s15, s13, s15
    y[i + 513].re = 0.5 * ((temp_re_tmp * temp_im - temp_re * b_im) +
 80024a4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80024a8:	ee17 0a90 	vmov	r0, s15
 80024ac:	f7fe f874 	bl	8000598 <__aeabi_f2d>
 80024b0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80024b2:	f203 2301 	addw	r3, r3, #513	; 0x201
 80024b6:	011b      	lsls	r3, r3, #4
 80024b8:	683a      	ldr	r2, [r7, #0]
 80024ba:	18d4      	adds	r4, r2, r3
 80024bc:	f04f 0200 	mov.w	r2, #0
 80024c0:	4b63      	ldr	r3, [pc, #396]	; (8002650 <c_FFTImplementationCallback_doH+0x900>)
 80024c2:	f7fe f8c1 	bl	8000648 <__aeabi_dmul>
 80024c6:	4602      	mov	r2, r0
 80024c8:	460b      	mov	r3, r1
 80024ca:	e9c4 2300 	strd	r2, r3, [r4]
    y[i + 513].im = 0.5 * ((temp_re_tmp * b_im + temp_re * temp_im) +
 80024ce:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 80024d2:	edd7 7a05 	vldr	s15, [r7, #20]
 80024d6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80024da:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 80024de:	edd7 7a04 	vldr	s15, [r7, #16]
 80024e2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80024e6:	ee37 7a27 	vadd.f32	s14, s14, s15
                           (temp2_re * re + -temp2_im * b_re));
 80024ea:	edd7 6a07 	vldr	s13, [r7, #28]
 80024ee:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80024f2:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80024f6:	edd7 7a06 	vldr	s15, [r7, #24]
 80024fa:	eeb1 6a67 	vneg.f32	s12, s15
 80024fe:	edd7 7a08 	vldr	s15, [r7, #32]
 8002502:	ee66 7a27 	vmul.f32	s15, s12, s15
 8002506:	ee76 7aa7 	vadd.f32	s15, s13, s15
    y[i + 513].im = 0.5 * ((temp_re_tmp * b_im + temp_re * temp_im) +
 800250a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800250e:	ee17 0a90 	vmov	r0, s15
 8002512:	f7fe f841 	bl	8000598 <__aeabi_f2d>
 8002516:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002518:	f203 2301 	addw	r3, r3, #513	; 0x201
 800251c:	011b      	lsls	r3, r3, #4
 800251e:	683a      	ldr	r2, [r7, #0]
 8002520:	18d4      	adds	r4, r2, r3
 8002522:	f04f 0200 	mov.w	r2, #0
 8002526:	4b4a      	ldr	r3, [pc, #296]	; (8002650 <c_FFTImplementationCallback_doH+0x900>)
 8002528:	f7fe f88e 	bl	8000648 <__aeabi_dmul>
 800252c:	4602      	mov	r2, r0
 800252e:	460b      	mov	r3, r1
 8002530:	e9c4 2302 	strd	r2, r3, [r4, #8]
    b_im = reconVar1[iDelta - 1].im;
 8002534:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002536:	3b01      	subs	r3, #1
 8002538:	4a43      	ldr	r2, [pc, #268]	; (8002648 <c_FFTImplementationCallback_doH+0x8f8>)
 800253a:	011b      	lsls	r3, r3, #4
 800253c:	4413      	add	r3, r2
 800253e:	3308      	adds	r3, #8
 8002540:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002544:	4610      	mov	r0, r2
 8002546:	4619      	mov	r1, r3
 8002548:	f7fe fb56 	bl	8000bf8 <__aeabi_d2f>
 800254c:	4603      	mov	r3, r0
 800254e:	617b      	str	r3, [r7, #20]
    temp_im = reconVar1[iDelta - 1].re;
 8002550:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002552:	3b01      	subs	r3, #1
 8002554:	4a3c      	ldr	r2, [pc, #240]	; (8002648 <c_FFTImplementationCallback_doH+0x8f8>)
 8002556:	011b      	lsls	r3, r3, #4
 8002558:	4413      	add	r3, r2
 800255a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800255e:	4610      	mov	r0, r2
 8002560:	4619      	mov	r1, r3
 8002562:	f7fe fb49 	bl	8000bf8 <__aeabi_d2f>
 8002566:	4603      	mov	r3, r0
 8002568:	613b      	str	r3, [r7, #16]
    im = reconVar2[iDelta - 1].im;
 800256a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800256c:	3b01      	subs	r3, #1
 800256e:	4a37      	ldr	r2, [pc, #220]	; (800264c <c_FFTImplementationCallback_doH+0x8fc>)
 8002570:	011b      	lsls	r3, r3, #4
 8002572:	4413      	add	r3, r2
 8002574:	3308      	adds	r3, #8
 8002576:	e9d3 2300 	ldrd	r2, r3, [r3]
 800257a:	4610      	mov	r0, r2
 800257c:	4619      	mov	r1, r3
 800257e:	f7fe fb3b 	bl	8000bf8 <__aeabi_d2f>
 8002582:	4603      	mov	r3, r0
 8002584:	62bb      	str	r3, [r7, #40]	; 0x28
    re = reconVar2[iDelta - 1].re;
 8002586:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002588:	3b01      	subs	r3, #1
 800258a:	4a30      	ldr	r2, [pc, #192]	; (800264c <c_FFTImplementationCallback_doH+0x8fc>)
 800258c:	011b      	lsls	r3, r3, #4
 800258e:	4413      	add	r3, r2
 8002590:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002594:	4610      	mov	r0, r2
 8002596:	4619      	mov	r1, r3
 8002598:	f7fe fb2e 	bl	8000bf8 <__aeabi_d2f>
 800259c:	4603      	mov	r3, r0
 800259e:	62fb      	str	r3, [r7, #44]	; 0x2c
    y[iDelta - 1].re = 0.5 * ((temp2_re * temp_im - temp2_im * b_im) +
 80025a0:	ed97 7a07 	vldr	s14, [r7, #28]
 80025a4:	edd7 7a04 	vldr	s15, [r7, #16]
 80025a8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80025ac:	edd7 6a06 	vldr	s13, [r7, #24]
 80025b0:	edd7 7a05 	vldr	s15, [r7, #20]
 80025b4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80025b8:	ee37 7a67 	vsub.f32	s14, s14, s15
                              (temp_re_tmp * re - -temp_re * im));
 80025bc:	edd7 6a0c 	vldr	s13, [r7, #48]	; 0x30
 80025c0:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80025c4:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80025c8:	ed97 6a09 	vldr	s12, [r7, #36]	; 0x24
 80025cc:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80025d0:	ee66 7a27 	vmul.f32	s15, s12, s15
 80025d4:	ee76 7aa7 	vadd.f32	s15, s13, s15
    y[iDelta - 1].re = 0.5 * ((temp2_re * temp_im - temp2_im * b_im) +
 80025d8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80025dc:	ee17 0a90 	vmov	r0, s15
 80025e0:	f7fd ffda 	bl	8000598 <__aeabi_f2d>
 80025e4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80025e6:	f103 5380 	add.w	r3, r3, #268435456	; 0x10000000
 80025ea:	3b01      	subs	r3, #1
 80025ec:	011b      	lsls	r3, r3, #4
 80025ee:	683a      	ldr	r2, [r7, #0]
 80025f0:	18d4      	adds	r4, r2, r3
 80025f2:	f04f 0200 	mov.w	r2, #0
 80025f6:	4b16      	ldr	r3, [pc, #88]	; (8002650 <c_FFTImplementationCallback_doH+0x900>)
 80025f8:	f7fe f826 	bl	8000648 <__aeabi_dmul>
 80025fc:	4602      	mov	r2, r0
 80025fe:	460b      	mov	r3, r1
 8002600:	e9c4 2300 	strd	r2, r3, [r4]
    y[iDelta - 1].im = 0.5 * ((temp2_re * b_im + temp2_im * temp_im) +
 8002604:	ed97 7a07 	vldr	s14, [r7, #28]
 8002608:	edd7 7a05 	vldr	s15, [r7, #20]
 800260c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002610:	edd7 6a06 	vldr	s13, [r7, #24]
 8002614:	edd7 7a04 	vldr	s15, [r7, #16]
 8002618:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800261c:	ee37 7a27 	vadd.f32	s14, s14, s15
                              (temp_re_tmp * im + -temp_re * re));
 8002620:	edd7 6a0c 	vldr	s13, [r7, #48]	; 0x30
 8002624:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8002628:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800262c:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8002630:	eeb1 6a67 	vneg.f32	s12, s15
 8002634:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8002638:	ee66 7a27 	vmul.f32	s15, s12, s15
 800263c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002640:	e008      	b.n	8002654 <c_FFTImplementationCallback_doH+0x904>
 8002642:	bf00      	nop
 8002644:	08015810 	.word	0x08015810
 8002648:	08015c10 	.word	0x08015c10
 800264c:	08017c10 	.word	0x08017c10
 8002650:	3fe00000 	.word	0x3fe00000
    y[iDelta - 1].im = 0.5 * ((temp2_re * b_im + temp2_im * temp_im) +
 8002654:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002658:	ee17 0a90 	vmov	r0, s15
 800265c:	f7fd ff9c 	bl	8000598 <__aeabi_f2d>
 8002660:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002662:	f103 5380 	add.w	r3, r3, #268435456	; 0x10000000
 8002666:	3b01      	subs	r3, #1
 8002668:	011b      	lsls	r3, r3, #4
 800266a:	683a      	ldr	r2, [r7, #0]
 800266c:	18d4      	adds	r4, r2, r3
 800266e:	f04f 0200 	mov.w	r2, #0
 8002672:	4bd9      	ldr	r3, [pc, #868]	; (80029d8 <c_FFTImplementationCallback_doH+0xc88>)
 8002674:	f7fd ffe8 	bl	8000648 <__aeabi_dmul>
 8002678:	4602      	mov	r2, r0
 800267a:	460b      	mov	r3, r1
 800267c:	e9c4 2302 	strd	r2, r3, [r4, #8]
    y[iDelta + 511].re = 0.5 * ((temp2_re * re - temp2_im * im) +
 8002680:	ed97 7a07 	vldr	s14, [r7, #28]
 8002684:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8002688:	ee27 7a27 	vmul.f32	s14, s14, s15
 800268c:	edd7 6a06 	vldr	s13, [r7, #24]
 8002690:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8002694:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002698:	ee37 7a67 	vsub.f32	s14, s14, s15
                                (temp_re_tmp * temp_im - -temp_re * b_im));
 800269c:	edd7 6a0c 	vldr	s13, [r7, #48]	; 0x30
 80026a0:	edd7 7a04 	vldr	s15, [r7, #16]
 80026a4:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80026a8:	ed97 6a09 	vldr	s12, [r7, #36]	; 0x24
 80026ac:	edd7 7a05 	vldr	s15, [r7, #20]
 80026b0:	ee66 7a27 	vmul.f32	s15, s12, s15
 80026b4:	ee76 7aa7 	vadd.f32	s15, s13, s15
    y[iDelta + 511].re = 0.5 * ((temp2_re * re - temp2_im * im) +
 80026b8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80026bc:	ee17 0a90 	vmov	r0, s15
 80026c0:	f7fd ff6a 	bl	8000598 <__aeabi_f2d>
 80026c4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80026c6:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 80026ca:	011b      	lsls	r3, r3, #4
 80026cc:	683a      	ldr	r2, [r7, #0]
 80026ce:	18d4      	adds	r4, r2, r3
 80026d0:	f04f 0200 	mov.w	r2, #0
 80026d4:	4bc0      	ldr	r3, [pc, #768]	; (80029d8 <c_FFTImplementationCallback_doH+0xc88>)
 80026d6:	f7fd ffb7 	bl	8000648 <__aeabi_dmul>
 80026da:	4602      	mov	r2, r0
 80026dc:	460b      	mov	r3, r1
 80026de:	e9c4 2300 	strd	r2, r3, [r4]
    y[iDelta + 511].im = 0.5 * ((temp2_re * im + temp2_im * re) +
 80026e2:	ed97 7a07 	vldr	s14, [r7, #28]
 80026e6:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80026ea:	ee27 7a27 	vmul.f32	s14, s14, s15
 80026ee:	edd7 6a06 	vldr	s13, [r7, #24]
 80026f2:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80026f6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80026fa:	ee37 7a27 	vadd.f32	s14, s14, s15
                                (temp_re_tmp * b_im + -temp_re * temp_im));
 80026fe:	edd7 6a0c 	vldr	s13, [r7, #48]	; 0x30
 8002702:	edd7 7a05 	vldr	s15, [r7, #20]
 8002706:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800270a:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800270e:	eeb1 6a67 	vneg.f32	s12, s15
 8002712:	edd7 7a04 	vldr	s15, [r7, #16]
 8002716:	ee66 7a27 	vmul.f32	s15, s12, s15
 800271a:	ee76 7aa7 	vadd.f32	s15, s13, s15
    y[iDelta + 511].im = 0.5 * ((temp2_re * im + temp2_im * re) +
 800271e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002722:	ee17 0a90 	vmov	r0, s15
 8002726:	f7fd ff37 	bl	8000598 <__aeabi_f2d>
 800272a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800272c:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8002730:	011b      	lsls	r3, r3, #4
 8002732:	683a      	ldr	r2, [r7, #0]
 8002734:	18d4      	adds	r4, r2, r3
 8002736:	f04f 0200 	mov.w	r2, #0
 800273a:	4ba7      	ldr	r3, [pc, #668]	; (80029d8 <c_FFTImplementationCallback_doH+0xc88>)
 800273c:	f7fd ff84 	bl	8000648 <__aeabi_dmul>
 8002740:	4602      	mov	r2, r0
 8002742:	460b      	mov	r3, r1
 8002744:	e9c4 2302 	strd	r2, r3, [r4, #8]
  for (i = 0; i < 255; i++) {
 8002748:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800274a:	3301      	adds	r3, #1
 800274c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800274e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002750:	2bfe      	cmp	r3, #254	; 0xfe
 8002752:	f77f adb5 	ble.w	80022c0 <c_FFTImplementationCallback_doH+0x570>
  }
  temp_re_tmp = y[256].re;
 8002756:	683b      	ldr	r3, [r7, #0]
 8002758:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800275c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002760:	4610      	mov	r0, r2
 8002762:	4619      	mov	r1, r3
 8002764:	f7fe fa48 	bl	8000bf8 <__aeabi_d2f>
 8002768:	4603      	mov	r3, r0
 800276a:	633b      	str	r3, [r7, #48]	; 0x30
  temp_re = y[256].im;
 800276c:	683b      	ldr	r3, [r7, #0]
 800276e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002772:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8002776:	4610      	mov	r0, r2
 8002778:	4619      	mov	r1, r3
 800277a:	f7fe fa3d 	bl	8000bf8 <__aeabi_d2f>
 800277e:	4603      	mov	r3, r0
 8002780:	627b      	str	r3, [r7, #36]	; 0x24
  re = temp_re_tmp * 0.0;
 8002782:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8002786:	ed9f 7a95 	vldr	s14, [pc, #596]	; 80029dc <c_FFTImplementationCallback_doH+0xc8c>
 800278a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800278e:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
  b_re = temp_re * 0.0;
 8002792:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8002796:	ed9f 7a91 	vldr	s14, [pc, #580]	; 80029dc <c_FFTImplementationCallback_doH+0xc8c>
 800279a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800279e:	edc7 7a08 	vstr	s15, [r7, #32]
  im = -temp_re * 0.0;
 80027a2:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80027a6:	eef1 7a67 	vneg.f32	s15, s15
 80027aa:	ed9f 7a8c 	vldr	s14, [pc, #560]	; 80029dc <c_FFTImplementationCallback_doH+0xc8c>
 80027ae:	ee67 7a87 	vmul.f32	s15, s15, s14
 80027b2:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
  y[256].re = 0.5 * ((re - b_re) + (temp_re_tmp * 2.0 - im));
 80027b6:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 80027ba:	edd7 7a08 	vldr	s15, [r7, #32]
 80027be:	ee77 7a67 	vsub.f32	s15, s14, s15
 80027c2:	ee17 0a90 	vmov	r0, s15
 80027c6:	f7fd fee7 	bl	8000598 <__aeabi_f2d>
 80027ca:	4604      	mov	r4, r0
 80027cc:	460d      	mov	r5, r1
 80027ce:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80027d0:	f7fd fee2 	bl	8000598 <__aeabi_f2d>
 80027d4:	4602      	mov	r2, r0
 80027d6:	460b      	mov	r3, r1
 80027d8:	f7fd fd80 	bl	80002dc <__adddf3>
 80027dc:	4602      	mov	r2, r0
 80027de:	460b      	mov	r3, r1
 80027e0:	4690      	mov	r8, r2
 80027e2:	4699      	mov	r9, r3
 80027e4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80027e6:	f7fd fed7 	bl	8000598 <__aeabi_f2d>
 80027ea:	4602      	mov	r2, r0
 80027ec:	460b      	mov	r3, r1
 80027ee:	4640      	mov	r0, r8
 80027f0:	4649      	mov	r1, r9
 80027f2:	f7fd fd71 	bl	80002d8 <__aeabi_dsub>
 80027f6:	4602      	mov	r2, r0
 80027f8:	460b      	mov	r3, r1
 80027fa:	4620      	mov	r0, r4
 80027fc:	4629      	mov	r1, r5
 80027fe:	f7fd fd6d 	bl	80002dc <__adddf3>
 8002802:	4602      	mov	r2, r0
 8002804:	460b      	mov	r3, r1
 8002806:	4610      	mov	r0, r2
 8002808:	4619      	mov	r1, r3
 800280a:	683b      	ldr	r3, [r7, #0]
 800280c:	f503 5480 	add.w	r4, r3, #4096	; 0x1000
 8002810:	f04f 0200 	mov.w	r2, #0
 8002814:	4b70      	ldr	r3, [pc, #448]	; (80029d8 <c_FFTImplementationCallback_doH+0xc88>)
 8002816:	f7fd ff17 	bl	8000648 <__aeabi_dmul>
 800281a:	4602      	mov	r2, r0
 800281c:	460b      	mov	r3, r1
 800281e:	e9c4 2300 	strd	r2, r3, [r4]
  y[256].im = 0.5 * ((re + b_re) + (temp_re_tmp * 0.0 + -temp_re * 2.0));
 8002822:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8002826:	edd7 7a08 	vldr	s15, [r7, #32]
 800282a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800282e:	ee17 0a90 	vmov	r0, s15
 8002832:	f7fd feb1 	bl	8000598 <__aeabi_f2d>
 8002836:	4604      	mov	r4, r0
 8002838:	460d      	mov	r5, r1
 800283a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800283c:	f7fd feac 	bl	8000598 <__aeabi_f2d>
 8002840:	f04f 0200 	mov.w	r2, #0
 8002844:	f04f 0300 	mov.w	r3, #0
 8002848:	f7fd fefe 	bl	8000648 <__aeabi_dmul>
 800284c:	4602      	mov	r2, r0
 800284e:	460b      	mov	r3, r1
 8002850:	4690      	mov	r8, r2
 8002852:	4699      	mov	r9, r3
 8002854:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8002858:	eef1 7a67 	vneg.f32	s15, s15
 800285c:	ee17 3a90 	vmov	r3, s15
 8002860:	4618      	mov	r0, r3
 8002862:	f7fd fe99 	bl	8000598 <__aeabi_f2d>
 8002866:	4602      	mov	r2, r0
 8002868:	460b      	mov	r3, r1
 800286a:	f7fd fd37 	bl	80002dc <__adddf3>
 800286e:	4602      	mov	r2, r0
 8002870:	460b      	mov	r3, r1
 8002872:	4640      	mov	r0, r8
 8002874:	4649      	mov	r1, r9
 8002876:	f7fd fd31 	bl	80002dc <__adddf3>
 800287a:	4602      	mov	r2, r0
 800287c:	460b      	mov	r3, r1
 800287e:	4620      	mov	r0, r4
 8002880:	4629      	mov	r1, r5
 8002882:	f7fd fd2b 	bl	80002dc <__adddf3>
 8002886:	4602      	mov	r2, r0
 8002888:	460b      	mov	r3, r1
 800288a:	4610      	mov	r0, r2
 800288c:	4619      	mov	r1, r3
 800288e:	683b      	ldr	r3, [r7, #0]
 8002890:	f503 5480 	add.w	r4, r3, #4096	; 0x1000
 8002894:	f04f 0200 	mov.w	r2, #0
 8002898:	4b4f      	ldr	r3, [pc, #316]	; (80029d8 <c_FFTImplementationCallback_doH+0xc88>)
 800289a:	f7fd fed5 	bl	8000648 <__aeabi_dmul>
 800289e:	4602      	mov	r2, r0
 80028a0:	460b      	mov	r3, r1
 80028a2:	e9c4 2302 	strd	r2, r3, [r4, #8]
  y[768].re =
      0.5 * ((temp_re_tmp * 2.0 - temp_re * 0.0) + (temp_re_tmp * 0.0 - im));
 80028a6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80028a8:	f7fd fe76 	bl	8000598 <__aeabi_f2d>
 80028ac:	4602      	mov	r2, r0
 80028ae:	460b      	mov	r3, r1
 80028b0:	f7fd fd14 	bl	80002dc <__adddf3>
 80028b4:	4602      	mov	r2, r0
 80028b6:	460b      	mov	r3, r1
 80028b8:	4614      	mov	r4, r2
 80028ba:	461d      	mov	r5, r3
 80028bc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80028be:	f7fd fe6b 	bl	8000598 <__aeabi_f2d>
 80028c2:	f04f 0200 	mov.w	r2, #0
 80028c6:	f04f 0300 	mov.w	r3, #0
 80028ca:	f7fd febd 	bl	8000648 <__aeabi_dmul>
 80028ce:	4602      	mov	r2, r0
 80028d0:	460b      	mov	r3, r1
 80028d2:	4620      	mov	r0, r4
 80028d4:	4629      	mov	r1, r5
 80028d6:	f7fd fcff 	bl	80002d8 <__aeabi_dsub>
 80028da:	4602      	mov	r2, r0
 80028dc:	460b      	mov	r3, r1
 80028de:	4614      	mov	r4, r2
 80028e0:	461d      	mov	r5, r3
 80028e2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80028e4:	f7fd fe58 	bl	8000598 <__aeabi_f2d>
 80028e8:	f04f 0200 	mov.w	r2, #0
 80028ec:	f04f 0300 	mov.w	r3, #0
 80028f0:	f7fd feaa 	bl	8000648 <__aeabi_dmul>
 80028f4:	4602      	mov	r2, r0
 80028f6:	460b      	mov	r3, r1
 80028f8:	4690      	mov	r8, r2
 80028fa:	4699      	mov	r9, r3
 80028fc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80028fe:	f7fd fe4b 	bl	8000598 <__aeabi_f2d>
 8002902:	4602      	mov	r2, r0
 8002904:	460b      	mov	r3, r1
 8002906:	4640      	mov	r0, r8
 8002908:	4649      	mov	r1, r9
 800290a:	f7fd fce5 	bl	80002d8 <__aeabi_dsub>
 800290e:	4602      	mov	r2, r0
 8002910:	460b      	mov	r3, r1
 8002912:	4620      	mov	r0, r4
 8002914:	4629      	mov	r1, r5
 8002916:	f7fd fce1 	bl	80002dc <__adddf3>
 800291a:	4602      	mov	r2, r0
 800291c:	460b      	mov	r3, r1
 800291e:	4610      	mov	r0, r2
 8002920:	4619      	mov	r1, r3
  y[768].re =
 8002922:	683b      	ldr	r3, [r7, #0]
 8002924:	f503 5440 	add.w	r4, r3, #12288	; 0x3000
      0.5 * ((temp_re_tmp * 2.0 - temp_re * 0.0) + (temp_re_tmp * 0.0 - im));
 8002928:	f04f 0200 	mov.w	r2, #0
 800292c:	4b2a      	ldr	r3, [pc, #168]	; (80029d8 <c_FFTImplementationCallback_doH+0xc88>)
 800292e:	f7fd fe8b 	bl	8000648 <__aeabi_dmul>
 8002932:	4602      	mov	r2, r0
 8002934:	460b      	mov	r3, r1
  y[768].re =
 8002936:	e9c4 2300 	strd	r2, r3, [r4]
  y[768].im =
      0.5 * ((temp_re_tmp * 0.0 + temp_re * 2.0) + (temp_re_tmp * 0.0 + im));
 800293a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800293c:	f7fd fe2c 	bl	8000598 <__aeabi_f2d>
 8002940:	f04f 0200 	mov.w	r2, #0
 8002944:	f04f 0300 	mov.w	r3, #0
 8002948:	f7fd fe7e 	bl	8000648 <__aeabi_dmul>
 800294c:	4602      	mov	r2, r0
 800294e:	460b      	mov	r3, r1
 8002950:	4614      	mov	r4, r2
 8002952:	461d      	mov	r5, r3
 8002954:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002956:	f7fd fe1f 	bl	8000598 <__aeabi_f2d>
 800295a:	4602      	mov	r2, r0
 800295c:	460b      	mov	r3, r1
 800295e:	f7fd fcbd 	bl	80002dc <__adddf3>
 8002962:	4602      	mov	r2, r0
 8002964:	460b      	mov	r3, r1
 8002966:	4620      	mov	r0, r4
 8002968:	4629      	mov	r1, r5
 800296a:	f7fd fcb7 	bl	80002dc <__adddf3>
 800296e:	4602      	mov	r2, r0
 8002970:	460b      	mov	r3, r1
 8002972:	4614      	mov	r4, r2
 8002974:	461d      	mov	r5, r3
 8002976:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002978:	f7fd fe0e 	bl	8000598 <__aeabi_f2d>
 800297c:	f04f 0200 	mov.w	r2, #0
 8002980:	f04f 0300 	mov.w	r3, #0
 8002984:	f7fd fe60 	bl	8000648 <__aeabi_dmul>
 8002988:	4602      	mov	r2, r0
 800298a:	460b      	mov	r3, r1
 800298c:	4690      	mov	r8, r2
 800298e:	4699      	mov	r9, r3
 8002990:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002992:	f7fd fe01 	bl	8000598 <__aeabi_f2d>
 8002996:	4602      	mov	r2, r0
 8002998:	460b      	mov	r3, r1
 800299a:	4640      	mov	r0, r8
 800299c:	4649      	mov	r1, r9
 800299e:	f7fd fc9d 	bl	80002dc <__adddf3>
 80029a2:	4602      	mov	r2, r0
 80029a4:	460b      	mov	r3, r1
 80029a6:	4620      	mov	r0, r4
 80029a8:	4629      	mov	r1, r5
 80029aa:	f7fd fc97 	bl	80002dc <__adddf3>
 80029ae:	4602      	mov	r2, r0
 80029b0:	460b      	mov	r3, r1
 80029b2:	4610      	mov	r0, r2
 80029b4:	4619      	mov	r1, r3
  y[768].im =
 80029b6:	683b      	ldr	r3, [r7, #0]
 80029b8:	f503 5440 	add.w	r4, r3, #12288	; 0x3000
      0.5 * ((temp_re_tmp * 0.0 + temp_re * 2.0) + (temp_re_tmp * 0.0 + im));
 80029bc:	f04f 0200 	mov.w	r2, #0
 80029c0:	4b05      	ldr	r3, [pc, #20]	; (80029d8 <c_FFTImplementationCallback_doH+0xc88>)
 80029c2:	f7fd fe41 	bl	8000648 <__aeabi_dmul>
 80029c6:	4602      	mov	r2, r0
 80029c8:	460b      	mov	r3, r1
  y[768].im =
 80029ca:	e9c4 2302 	strd	r2, r3, [r4, #8]
}
 80029ce:	bf00      	nop
 80029d0:	3754      	adds	r7, #84	; 0x54
 80029d2:	46bd      	mov	sp, r7
 80029d4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80029d8:	3fe00000 	.word	0x3fe00000
 80029dc:	00000000 	.word	0x00000000

080029e0 <default_ip_assign>:
/* Parse message as OFFER and ACK and NACK from DHCP server.*/
int8_t   parseDHCPCMSG(void);

/* The default handler of ip assign first */
void default_ip_assign(void)
{
 80029e0:	b580      	push	{r7, lr}
 80029e2:	af00      	add	r7, sp, #0
   setSIPR(DHCP_allocated_ip);
 80029e4:	2204      	movs	r2, #4
 80029e6:	4909      	ldr	r1, [pc, #36]	; (8002a0c <default_ip_assign+0x2c>)
 80029e8:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 80029ec:	f006 fc86 	bl	80092fc <WIZCHIP_WRITE_BUF>
   setSUBR(DHCP_allocated_sn);
 80029f0:	2204      	movs	r2, #4
 80029f2:	4907      	ldr	r1, [pc, #28]	; (8002a10 <default_ip_assign+0x30>)
 80029f4:	f44f 60a0 	mov.w	r0, #1280	; 0x500
 80029f8:	f006 fc80 	bl	80092fc <WIZCHIP_WRITE_BUF>
   setGAR (DHCP_allocated_gw);
 80029fc:	2204      	movs	r2, #4
 80029fe:	4905      	ldr	r1, [pc, #20]	; (8002a14 <default_ip_assign+0x34>)
 8002a00:	f44f 7080 	mov.w	r0, #256	; 0x100
 8002a04:	f006 fc7a 	bl	80092fc <WIZCHIP_WRITE_BUF>
}
 8002a08:	bf00      	nop
 8002a0a:	bd80      	pop	{r7, pc}
 8002a0c:	200005d8 	.word	0x200005d8
 8002a10:	200005e0 	.word	0x200005e0
 8002a14:	200005dc 	.word	0x200005dc

08002a18 <default_ip_update>:

/* The default handler of ip changed */
void default_ip_update(void)
{
 8002a18:	b580      	push	{r7, lr}
 8002a1a:	af00      	add	r7, sp, #0
	/* WIZchip Software Reset */
   setMR(MR_RST);
 8002a1c:	2180      	movs	r1, #128	; 0x80
 8002a1e:	2000      	movs	r0, #0
 8002a20:	f006 fbbe 	bl	80091a0 <WIZCHIP_WRITE>
   getMR(); // for delay
 8002a24:	2000      	movs	r0, #0
 8002a26:	f006 fb6f 	bl	8009108 <WIZCHIP_READ>
   default_ip_assign();
 8002a2a:	f7ff ffd9 	bl	80029e0 <default_ip_assign>
   setSHAR(DHCP_CHADDR);
 8002a2e:	2206      	movs	r2, #6
 8002a30:	4903      	ldr	r1, [pc, #12]	; (8002a40 <default_ip_update+0x28>)
 8002a32:	f44f 6010 	mov.w	r0, #2304	; 0x900
 8002a36:	f006 fc61 	bl	80092fc <WIZCHIP_WRITE_BUF>
}
 8002a3a:	bf00      	nop
 8002a3c:	bd80      	pop	{r7, pc}
 8002a3e:	bf00      	nop
 8002a40:	20000700 	.word	0x20000700

08002a44 <default_ip_conflict>:

/* The default handler of ip changed */
void default_ip_conflict(void)
{
 8002a44:	b580      	push	{r7, lr}
 8002a46:	af00      	add	r7, sp, #0
	// WIZchip Software Reset
	setMR(MR_RST);
 8002a48:	2180      	movs	r1, #128	; 0x80
 8002a4a:	2000      	movs	r0, #0
 8002a4c:	f006 fba8 	bl	80091a0 <WIZCHIP_WRITE>
	getMR(); // for delay
 8002a50:	2000      	movs	r0, #0
 8002a52:	f006 fb59 	bl	8009108 <WIZCHIP_READ>
	setSHAR(DHCP_CHADDR);
 8002a56:	2206      	movs	r2, #6
 8002a58:	4903      	ldr	r1, [pc, #12]	; (8002a68 <default_ip_conflict+0x24>)
 8002a5a:	f44f 6010 	mov.w	r0, #2304	; 0x900
 8002a5e:	f006 fc4d 	bl	80092fc <WIZCHIP_WRITE_BUF>
}
 8002a62:	bf00      	nop
 8002a64:	bd80      	pop	{r7, pc}
 8002a66:	bf00      	nop
 8002a68:	20000700 	.word	0x20000700

08002a6c <reg_dhcp_cbfunc>:

/* register the call back func. */
void reg_dhcp_cbfunc(void(*ip_assign)(void), void(*ip_update)(void), void(*ip_conflict)(void))
{
 8002a6c:	b480      	push	{r7}
 8002a6e:	b085      	sub	sp, #20
 8002a70:	af00      	add	r7, sp, #0
 8002a72:	60f8      	str	r0, [r7, #12]
 8002a74:	60b9      	str	r1, [r7, #8]
 8002a76:	607a      	str	r2, [r7, #4]
   dhcp_ip_assign   = default_ip_assign;
 8002a78:	4b10      	ldr	r3, [pc, #64]	; (8002abc <reg_dhcp_cbfunc+0x50>)
 8002a7a:	4a11      	ldr	r2, [pc, #68]	; (8002ac0 <reg_dhcp_cbfunc+0x54>)
 8002a7c:	601a      	str	r2, [r3, #0]
   dhcp_ip_update   = default_ip_update;
 8002a7e:	4b11      	ldr	r3, [pc, #68]	; (8002ac4 <reg_dhcp_cbfunc+0x58>)
 8002a80:	4a11      	ldr	r2, [pc, #68]	; (8002ac8 <reg_dhcp_cbfunc+0x5c>)
 8002a82:	601a      	str	r2, [r3, #0]
   dhcp_ip_conflict = default_ip_conflict;
 8002a84:	4b11      	ldr	r3, [pc, #68]	; (8002acc <reg_dhcp_cbfunc+0x60>)
 8002a86:	4a12      	ldr	r2, [pc, #72]	; (8002ad0 <reg_dhcp_cbfunc+0x64>)
 8002a88:	601a      	str	r2, [r3, #0]
   if(ip_assign)   dhcp_ip_assign = ip_assign;
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d002      	beq.n	8002a96 <reg_dhcp_cbfunc+0x2a>
 8002a90:	4a0a      	ldr	r2, [pc, #40]	; (8002abc <reg_dhcp_cbfunc+0x50>)
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	6013      	str	r3, [r2, #0]
   if(ip_update)   dhcp_ip_update = ip_update;
 8002a96:	68bb      	ldr	r3, [r7, #8]
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d002      	beq.n	8002aa2 <reg_dhcp_cbfunc+0x36>
 8002a9c:	4a09      	ldr	r2, [pc, #36]	; (8002ac4 <reg_dhcp_cbfunc+0x58>)
 8002a9e:	68bb      	ldr	r3, [r7, #8]
 8002aa0:	6013      	str	r3, [r2, #0]
   if(ip_conflict) dhcp_ip_conflict = ip_conflict;
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d002      	beq.n	8002aae <reg_dhcp_cbfunc+0x42>
 8002aa8:	4a08      	ldr	r2, [pc, #32]	; (8002acc <reg_dhcp_cbfunc+0x60>)
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	6013      	str	r3, [r2, #0]
}
 8002aae:	bf00      	nop
 8002ab0:	3714      	adds	r7, #20
 8002ab2:	46bd      	mov	sp, r7
 8002ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab8:	4770      	bx	lr
 8002aba:	bf00      	nop
 8002abc:	20000010 	.word	0x20000010
 8002ac0:	080029e1 	.word	0x080029e1
 8002ac4:	20000014 	.word	0x20000014
 8002ac8:	08002a19 	.word	0x08002a19
 8002acc:	20000018 	.word	0x20000018
 8002ad0:	08002a45 	.word	0x08002a45

08002ad4 <makeDHCPMSG>:

/* make the common DHCP message */
void makeDHCPMSG(void)
{
 8002ad4:	b580      	push	{r7, lr}
 8002ad6:	b084      	sub	sp, #16
 8002ad8:	af00      	add	r7, sp, #0
   uint8_t  bk_mac[6];
   uint8_t* ptmp;
   uint8_t  i;
   getSHAR(bk_mac);
 8002ada:	463b      	mov	r3, r7
 8002adc:	2206      	movs	r2, #6
 8002ade:	4619      	mov	r1, r3
 8002ae0:	f44f 6010 	mov.w	r0, #2304	; 0x900
 8002ae4:	f006 fbaa 	bl	800923c <WIZCHIP_READ_BUF>
	pDHCPMSG->op      = DHCP_BOOTREQUEST;
 8002ae8:	4b72      	ldr	r3, [pc, #456]	; (8002cb4 <makeDHCPMSG+0x1e0>)
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	2201      	movs	r2, #1
 8002aee:	701a      	strb	r2, [r3, #0]
	pDHCPMSG->htype   = DHCP_HTYPE10MB;
 8002af0:	4b70      	ldr	r3, [pc, #448]	; (8002cb4 <makeDHCPMSG+0x1e0>)
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	2201      	movs	r2, #1
 8002af6:	705a      	strb	r2, [r3, #1]
	pDHCPMSG->hlen    = DHCP_HLENETHERNET;
 8002af8:	4b6e      	ldr	r3, [pc, #440]	; (8002cb4 <makeDHCPMSG+0x1e0>)
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	2206      	movs	r2, #6
 8002afe:	709a      	strb	r2, [r3, #2]
	pDHCPMSG->hops    = DHCP_HOPS;
 8002b00:	4b6c      	ldr	r3, [pc, #432]	; (8002cb4 <makeDHCPMSG+0x1e0>)
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	2200      	movs	r2, #0
 8002b06:	70da      	strb	r2, [r3, #3]
	ptmp              = (uint8_t*)(&pDHCPMSG->xid);
 8002b08:	4b6a      	ldr	r3, [pc, #424]	; (8002cb4 <makeDHCPMSG+0x1e0>)
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	3304      	adds	r3, #4
 8002b0e:	60bb      	str	r3, [r7, #8]
	*(ptmp+0)         = (uint8_t)((DHCP_XID & 0xFF000000) >> 24);
 8002b10:	4b69      	ldr	r3, [pc, #420]	; (8002cb8 <makeDHCPMSG+0x1e4>)
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	0e1b      	lsrs	r3, r3, #24
 8002b16:	b2da      	uxtb	r2, r3
 8002b18:	68bb      	ldr	r3, [r7, #8]
 8002b1a:	701a      	strb	r2, [r3, #0]
	*(ptmp+1)         = (uint8_t)((DHCP_XID & 0x00FF0000) >> 16);
 8002b1c:	4b66      	ldr	r3, [pc, #408]	; (8002cb8 <makeDHCPMSG+0x1e4>)
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	0c1a      	lsrs	r2, r3, #16
 8002b22:	68bb      	ldr	r3, [r7, #8]
 8002b24:	3301      	adds	r3, #1
 8002b26:	b2d2      	uxtb	r2, r2
 8002b28:	701a      	strb	r2, [r3, #0]
   *(ptmp+2)         = (uint8_t)((DHCP_XID & 0x0000FF00) >>  8);
 8002b2a:	4b63      	ldr	r3, [pc, #396]	; (8002cb8 <makeDHCPMSG+0x1e4>)
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	0a1a      	lsrs	r2, r3, #8
 8002b30:	68bb      	ldr	r3, [r7, #8]
 8002b32:	3302      	adds	r3, #2
 8002b34:	b2d2      	uxtb	r2, r2
 8002b36:	701a      	strb	r2, [r3, #0]
	*(ptmp+3)         = (uint8_t)((DHCP_XID & 0x000000FF) >>  0);   
 8002b38:	4b5f      	ldr	r3, [pc, #380]	; (8002cb8 <makeDHCPMSG+0x1e4>)
 8002b3a:	681a      	ldr	r2, [r3, #0]
 8002b3c:	68bb      	ldr	r3, [r7, #8]
 8002b3e:	3303      	adds	r3, #3
 8002b40:	b2d2      	uxtb	r2, r2
 8002b42:	701a      	strb	r2, [r3, #0]
	pDHCPMSG->secs    = DHCP_SECS;
 8002b44:	4b5b      	ldr	r3, [pc, #364]	; (8002cb4 <makeDHCPMSG+0x1e0>)
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	2200      	movs	r2, #0
 8002b4a:	811a      	strh	r2, [r3, #8]
	ptmp              = (uint8_t*)(&pDHCPMSG->flags);	
 8002b4c:	4b59      	ldr	r3, [pc, #356]	; (8002cb4 <makeDHCPMSG+0x1e0>)
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	330a      	adds	r3, #10
 8002b52:	60bb      	str	r3, [r7, #8]
	*(ptmp+0)         = (uint8_t)((DHCP_FLAGSBROADCAST & 0xFF00) >> 8);
 8002b54:	68bb      	ldr	r3, [r7, #8]
 8002b56:	2280      	movs	r2, #128	; 0x80
 8002b58:	701a      	strb	r2, [r3, #0]
	*(ptmp+1)         = (uint8_t)((DHCP_FLAGSBROADCAST & 0x00FF) >> 0);
 8002b5a:	68bb      	ldr	r3, [r7, #8]
 8002b5c:	3301      	adds	r3, #1
 8002b5e:	2200      	movs	r2, #0
 8002b60:	701a      	strb	r2, [r3, #0]

	pDHCPMSG->ciaddr[0] = 0;
 8002b62:	4b54      	ldr	r3, [pc, #336]	; (8002cb4 <makeDHCPMSG+0x1e0>)
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	2200      	movs	r2, #0
 8002b68:	731a      	strb	r2, [r3, #12]
	pDHCPMSG->ciaddr[1] = 0;
 8002b6a:	4b52      	ldr	r3, [pc, #328]	; (8002cb4 <makeDHCPMSG+0x1e0>)
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	2200      	movs	r2, #0
 8002b70:	735a      	strb	r2, [r3, #13]
	pDHCPMSG->ciaddr[2] = 0;
 8002b72:	4b50      	ldr	r3, [pc, #320]	; (8002cb4 <makeDHCPMSG+0x1e0>)
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	2200      	movs	r2, #0
 8002b78:	739a      	strb	r2, [r3, #14]
	pDHCPMSG->ciaddr[3] = 0;
 8002b7a:	4b4e      	ldr	r3, [pc, #312]	; (8002cb4 <makeDHCPMSG+0x1e0>)
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	2200      	movs	r2, #0
 8002b80:	73da      	strb	r2, [r3, #15]

	pDHCPMSG->yiaddr[0] = 0;
 8002b82:	4b4c      	ldr	r3, [pc, #304]	; (8002cb4 <makeDHCPMSG+0x1e0>)
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	2200      	movs	r2, #0
 8002b88:	741a      	strb	r2, [r3, #16]
	pDHCPMSG->yiaddr[1] = 0;
 8002b8a:	4b4a      	ldr	r3, [pc, #296]	; (8002cb4 <makeDHCPMSG+0x1e0>)
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	2200      	movs	r2, #0
 8002b90:	745a      	strb	r2, [r3, #17]
	pDHCPMSG->yiaddr[2] = 0;
 8002b92:	4b48      	ldr	r3, [pc, #288]	; (8002cb4 <makeDHCPMSG+0x1e0>)
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	2200      	movs	r2, #0
 8002b98:	749a      	strb	r2, [r3, #18]
	pDHCPMSG->yiaddr[3] = 0;
 8002b9a:	4b46      	ldr	r3, [pc, #280]	; (8002cb4 <makeDHCPMSG+0x1e0>)
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	2200      	movs	r2, #0
 8002ba0:	74da      	strb	r2, [r3, #19]

	pDHCPMSG->siaddr[0] = 0;
 8002ba2:	4b44      	ldr	r3, [pc, #272]	; (8002cb4 <makeDHCPMSG+0x1e0>)
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	2200      	movs	r2, #0
 8002ba8:	751a      	strb	r2, [r3, #20]
	pDHCPMSG->siaddr[1] = 0;
 8002baa:	4b42      	ldr	r3, [pc, #264]	; (8002cb4 <makeDHCPMSG+0x1e0>)
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	2200      	movs	r2, #0
 8002bb0:	755a      	strb	r2, [r3, #21]
	pDHCPMSG->siaddr[2] = 0;
 8002bb2:	4b40      	ldr	r3, [pc, #256]	; (8002cb4 <makeDHCPMSG+0x1e0>)
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	2200      	movs	r2, #0
 8002bb8:	759a      	strb	r2, [r3, #22]
	pDHCPMSG->siaddr[3] = 0;
 8002bba:	4b3e      	ldr	r3, [pc, #248]	; (8002cb4 <makeDHCPMSG+0x1e0>)
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	2200      	movs	r2, #0
 8002bc0:	75da      	strb	r2, [r3, #23]

	pDHCPMSG->giaddr[0] = 0;
 8002bc2:	4b3c      	ldr	r3, [pc, #240]	; (8002cb4 <makeDHCPMSG+0x1e0>)
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	2200      	movs	r2, #0
 8002bc8:	761a      	strb	r2, [r3, #24]
	pDHCPMSG->giaddr[1] = 0;
 8002bca:	4b3a      	ldr	r3, [pc, #232]	; (8002cb4 <makeDHCPMSG+0x1e0>)
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	2200      	movs	r2, #0
 8002bd0:	765a      	strb	r2, [r3, #25]
	pDHCPMSG->giaddr[2] = 0;
 8002bd2:	4b38      	ldr	r3, [pc, #224]	; (8002cb4 <makeDHCPMSG+0x1e0>)
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	2200      	movs	r2, #0
 8002bd8:	769a      	strb	r2, [r3, #26]
	pDHCPMSG->giaddr[3] = 0;
 8002bda:	4b36      	ldr	r3, [pc, #216]	; (8002cb4 <makeDHCPMSG+0x1e0>)
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	2200      	movs	r2, #0
 8002be0:	76da      	strb	r2, [r3, #27]

	pDHCPMSG->chaddr[0] = DHCP_CHADDR[0];
 8002be2:	4b34      	ldr	r3, [pc, #208]	; (8002cb4 <makeDHCPMSG+0x1e0>)
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	4a35      	ldr	r2, [pc, #212]	; (8002cbc <makeDHCPMSG+0x1e8>)
 8002be8:	7812      	ldrb	r2, [r2, #0]
 8002bea:	771a      	strb	r2, [r3, #28]
	pDHCPMSG->chaddr[1] = DHCP_CHADDR[1];
 8002bec:	4b31      	ldr	r3, [pc, #196]	; (8002cb4 <makeDHCPMSG+0x1e0>)
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	4a32      	ldr	r2, [pc, #200]	; (8002cbc <makeDHCPMSG+0x1e8>)
 8002bf2:	7852      	ldrb	r2, [r2, #1]
 8002bf4:	775a      	strb	r2, [r3, #29]
	pDHCPMSG->chaddr[2] = DHCP_CHADDR[2];
 8002bf6:	4b2f      	ldr	r3, [pc, #188]	; (8002cb4 <makeDHCPMSG+0x1e0>)
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	4a30      	ldr	r2, [pc, #192]	; (8002cbc <makeDHCPMSG+0x1e8>)
 8002bfc:	7892      	ldrb	r2, [r2, #2]
 8002bfe:	779a      	strb	r2, [r3, #30]
	pDHCPMSG->chaddr[3] = DHCP_CHADDR[3];
 8002c00:	4b2c      	ldr	r3, [pc, #176]	; (8002cb4 <makeDHCPMSG+0x1e0>)
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	4a2d      	ldr	r2, [pc, #180]	; (8002cbc <makeDHCPMSG+0x1e8>)
 8002c06:	78d2      	ldrb	r2, [r2, #3]
 8002c08:	77da      	strb	r2, [r3, #31]
	pDHCPMSG->chaddr[4] = DHCP_CHADDR[4];
 8002c0a:	4b2a      	ldr	r3, [pc, #168]	; (8002cb4 <makeDHCPMSG+0x1e0>)
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	4a2b      	ldr	r2, [pc, #172]	; (8002cbc <makeDHCPMSG+0x1e8>)
 8002c10:	7912      	ldrb	r2, [r2, #4]
 8002c12:	f883 2020 	strb.w	r2, [r3, #32]
	pDHCPMSG->chaddr[5] = DHCP_CHADDR[5];
 8002c16:	4b27      	ldr	r3, [pc, #156]	; (8002cb4 <makeDHCPMSG+0x1e0>)
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	4a28      	ldr	r2, [pc, #160]	; (8002cbc <makeDHCPMSG+0x1e8>)
 8002c1c:	7952      	ldrb	r2, [r2, #5]
 8002c1e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

	for (i = 6; i < 16; i++)  pDHCPMSG->chaddr[i] = 0;
 8002c22:	2306      	movs	r3, #6
 8002c24:	73fb      	strb	r3, [r7, #15]
 8002c26:	e008      	b.n	8002c3a <makeDHCPMSG+0x166>
 8002c28:	4b22      	ldr	r3, [pc, #136]	; (8002cb4 <makeDHCPMSG+0x1e0>)
 8002c2a:	681a      	ldr	r2, [r3, #0]
 8002c2c:	7bfb      	ldrb	r3, [r7, #15]
 8002c2e:	4413      	add	r3, r2
 8002c30:	2200      	movs	r2, #0
 8002c32:	771a      	strb	r2, [r3, #28]
 8002c34:	7bfb      	ldrb	r3, [r7, #15]
 8002c36:	3301      	adds	r3, #1
 8002c38:	73fb      	strb	r3, [r7, #15]
 8002c3a:	7bfb      	ldrb	r3, [r7, #15]
 8002c3c:	2b0f      	cmp	r3, #15
 8002c3e:	d9f3      	bls.n	8002c28 <makeDHCPMSG+0x154>
	for (i = 0; i < 64; i++)  pDHCPMSG->sname[i]  = 0;
 8002c40:	2300      	movs	r3, #0
 8002c42:	73fb      	strb	r3, [r7, #15]
 8002c44:	e009      	b.n	8002c5a <makeDHCPMSG+0x186>
 8002c46:	4b1b      	ldr	r3, [pc, #108]	; (8002cb4 <makeDHCPMSG+0x1e0>)
 8002c48:	681a      	ldr	r2, [r3, #0]
 8002c4a:	7bfb      	ldrb	r3, [r7, #15]
 8002c4c:	4413      	add	r3, r2
 8002c4e:	2200      	movs	r2, #0
 8002c50:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
 8002c54:	7bfb      	ldrb	r3, [r7, #15]
 8002c56:	3301      	adds	r3, #1
 8002c58:	73fb      	strb	r3, [r7, #15]
 8002c5a:	7bfb      	ldrb	r3, [r7, #15]
 8002c5c:	2b3f      	cmp	r3, #63	; 0x3f
 8002c5e:	d9f2      	bls.n	8002c46 <makeDHCPMSG+0x172>
	for (i = 0; i < 128; i++) pDHCPMSG->file[i]   = 0;
 8002c60:	2300      	movs	r3, #0
 8002c62:	73fb      	strb	r3, [r7, #15]
 8002c64:	e009      	b.n	8002c7a <makeDHCPMSG+0x1a6>
 8002c66:	4b13      	ldr	r3, [pc, #76]	; (8002cb4 <makeDHCPMSG+0x1e0>)
 8002c68:	681a      	ldr	r2, [r3, #0]
 8002c6a:	7bfb      	ldrb	r3, [r7, #15]
 8002c6c:	4413      	add	r3, r2
 8002c6e:	2200      	movs	r2, #0
 8002c70:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
 8002c74:	7bfb      	ldrb	r3, [r7, #15]
 8002c76:	3301      	adds	r3, #1
 8002c78:	73fb      	strb	r3, [r7, #15]
 8002c7a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	daf1      	bge.n	8002c66 <makeDHCPMSG+0x192>

	// MAGIC_COOKIE
	pDHCPMSG->OPT[0] = (uint8_t)((MAGIC_COOKIE & 0xFF000000) >> 24);
 8002c82:	4b0c      	ldr	r3, [pc, #48]	; (8002cb4 <makeDHCPMSG+0x1e0>)
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	2263      	movs	r2, #99	; 0x63
 8002c88:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[1] = (uint8_t)((MAGIC_COOKIE & 0x00FF0000) >> 16);
 8002c8c:	4b09      	ldr	r3, [pc, #36]	; (8002cb4 <makeDHCPMSG+0x1e0>)
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	2282      	movs	r2, #130	; 0x82
 8002c92:	f883 20ed 	strb.w	r2, [r3, #237]	; 0xed
	pDHCPMSG->OPT[2] = (uint8_t)((MAGIC_COOKIE & 0x0000FF00) >>  8);
 8002c96:	4b07      	ldr	r3, [pc, #28]	; (8002cb4 <makeDHCPMSG+0x1e0>)
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	2253      	movs	r2, #83	; 0x53
 8002c9c:	f883 20ee 	strb.w	r2, [r3, #238]	; 0xee
	pDHCPMSG->OPT[3] = (uint8_t) (MAGIC_COOKIE & 0x000000FF) >>  0;
 8002ca0:	4b04      	ldr	r3, [pc, #16]	; (8002cb4 <makeDHCPMSG+0x1e0>)
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	2263      	movs	r2, #99	; 0x63
 8002ca6:	f883 20ef 	strb.w	r2, [r3, #239]	; 0xef
}
 8002caa:	bf00      	nop
 8002cac:	3710      	adds	r7, #16
 8002cae:	46bd      	mov	sp, r7
 8002cb0:	bd80      	pop	{r7, pc}
 8002cb2:	bf00      	nop
 8002cb4:	200006fc 	.word	0x200006fc
 8002cb8:	200006f8 	.word	0x200006f8
 8002cbc:	20000700 	.word	0x20000700

08002cc0 <send_DHCP_DISCOVER>:

/* SEND DHCP DISCOVER */
void send_DHCP_DISCOVER(void)
{
 8002cc0:	b5b0      	push	{r4, r5, r7, lr}
 8002cc2:	b084      	sub	sp, #16
 8002cc4:	af02      	add	r7, sp, #8
	uint16_t i;
	uint8_t ip[4];
	uint16_t k = 0;
 8002cc6:	2300      	movs	r3, #0
 8002cc8:	80bb      	strh	r3, [r7, #4]
   
   makeDHCPMSG();
 8002cca:	f7ff ff03 	bl	8002ad4 <makeDHCPMSG>
   DHCP_SIP[0]=0;
 8002cce:	4b56      	ldr	r3, [pc, #344]	; (8002e28 <send_DHCP_DISCOVER+0x168>)
 8002cd0:	2200      	movs	r2, #0
 8002cd2:	701a      	strb	r2, [r3, #0]
   DHCP_SIP[1]=0;
 8002cd4:	4b54      	ldr	r3, [pc, #336]	; (8002e28 <send_DHCP_DISCOVER+0x168>)
 8002cd6:	2200      	movs	r2, #0
 8002cd8:	705a      	strb	r2, [r3, #1]
   DHCP_SIP[2]=0;
 8002cda:	4b53      	ldr	r3, [pc, #332]	; (8002e28 <send_DHCP_DISCOVER+0x168>)
 8002cdc:	2200      	movs	r2, #0
 8002cde:	709a      	strb	r2, [r3, #2]
   DHCP_SIP[3]=0;
 8002ce0:	4b51      	ldr	r3, [pc, #324]	; (8002e28 <send_DHCP_DISCOVER+0x168>)
 8002ce2:	2200      	movs	r2, #0
 8002ce4:	70da      	strb	r2, [r3, #3]
   DHCP_REAL_SIP[0]=0;
 8002ce6:	4b51      	ldr	r3, [pc, #324]	; (8002e2c <send_DHCP_DISCOVER+0x16c>)
 8002ce8:	2200      	movs	r2, #0
 8002cea:	701a      	strb	r2, [r3, #0]
   DHCP_REAL_SIP[1]=0;
 8002cec:	4b4f      	ldr	r3, [pc, #316]	; (8002e2c <send_DHCP_DISCOVER+0x16c>)
 8002cee:	2200      	movs	r2, #0
 8002cf0:	705a      	strb	r2, [r3, #1]
   DHCP_REAL_SIP[2]=0;
 8002cf2:	4b4e      	ldr	r3, [pc, #312]	; (8002e2c <send_DHCP_DISCOVER+0x16c>)
 8002cf4:	2200      	movs	r2, #0
 8002cf6:	709a      	strb	r2, [r3, #2]
   DHCP_REAL_SIP[3]=0;
 8002cf8:	4b4c      	ldr	r3, [pc, #304]	; (8002e2c <send_DHCP_DISCOVER+0x16c>)
 8002cfa:	2200      	movs	r2, #0
 8002cfc:	70da      	strb	r2, [r3, #3]

   k = 4;     // because MAGIC_COOKIE already made by makeDHCPMSG()
 8002cfe:	2304      	movs	r3, #4
 8002d00:	80bb      	strh	r3, [r7, #4]
   
	// Option Request Param
	pDHCPMSG->OPT[k++] = dhcpMessageType;
 8002d02:	4b4b      	ldr	r3, [pc, #300]	; (8002e30 <send_DHCP_DISCOVER+0x170>)
 8002d04:	681a      	ldr	r2, [r3, #0]
 8002d06:	88bb      	ldrh	r3, [r7, #4]
 8002d08:	1c59      	adds	r1, r3, #1
 8002d0a:	80b9      	strh	r1, [r7, #4]
 8002d0c:	4413      	add	r3, r2
 8002d0e:	2235      	movs	r2, #53	; 0x35
 8002d10:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = 0x01;
 8002d14:	4b46      	ldr	r3, [pc, #280]	; (8002e30 <send_DHCP_DISCOVER+0x170>)
 8002d16:	681a      	ldr	r2, [r3, #0]
 8002d18:	88bb      	ldrh	r3, [r7, #4]
 8002d1a:	1c59      	adds	r1, r3, #1
 8002d1c:	80b9      	strh	r1, [r7, #4]
 8002d1e:	4413      	add	r3, r2
 8002d20:	2201      	movs	r2, #1
 8002d22:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_DISCOVER;
 8002d26:	4b42      	ldr	r3, [pc, #264]	; (8002e30 <send_DHCP_DISCOVER+0x170>)
 8002d28:	681a      	ldr	r2, [r3, #0]
 8002d2a:	88bb      	ldrh	r3, [r7, #4]
 8002d2c:	1c59      	adds	r1, r3, #1
 8002d2e:	80b9      	strh	r1, [r7, #4]
 8002d30:	4413      	add	r3, r2
 8002d32:	2201      	movs	r2, #1
 8002d34:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	
	// Client identifier
	pDHCPMSG->OPT[k++] = dhcpClientIdentifier;
 8002d38:	4b3d      	ldr	r3, [pc, #244]	; (8002e30 <send_DHCP_DISCOVER+0x170>)
 8002d3a:	681a      	ldr	r2, [r3, #0]
 8002d3c:	88bb      	ldrh	r3, [r7, #4]
 8002d3e:	1c59      	adds	r1, r3, #1
 8002d40:	80b9      	strh	r1, [r7, #4]
 8002d42:	4413      	add	r3, r2
 8002d44:	223d      	movs	r2, #61	; 0x3d
 8002d46:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = 0x07;
 8002d4a:	4b39      	ldr	r3, [pc, #228]	; (8002e30 <send_DHCP_DISCOVER+0x170>)
 8002d4c:	681a      	ldr	r2, [r3, #0]
 8002d4e:	88bb      	ldrh	r3, [r7, #4]
 8002d50:	1c59      	adds	r1, r3, #1
 8002d52:	80b9      	strh	r1, [r7, #4]
 8002d54:	4413      	add	r3, r2
 8002d56:	2207      	movs	r2, #7
 8002d58:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = 0x01;
 8002d5c:	4b34      	ldr	r3, [pc, #208]	; (8002e30 <send_DHCP_DISCOVER+0x170>)
 8002d5e:	681a      	ldr	r2, [r3, #0]
 8002d60:	88bb      	ldrh	r3, [r7, #4]
 8002d62:	1c59      	adds	r1, r3, #1
 8002d64:	80b9      	strh	r1, [r7, #4]
 8002d66:	4413      	add	r3, r2
 8002d68:	2201      	movs	r2, #1
 8002d6a:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[0];
 8002d6e:	4b30      	ldr	r3, [pc, #192]	; (8002e30 <send_DHCP_DISCOVER+0x170>)
 8002d70:	681a      	ldr	r2, [r3, #0]
 8002d72:	88bb      	ldrh	r3, [r7, #4]
 8002d74:	1c59      	adds	r1, r3, #1
 8002d76:	80b9      	strh	r1, [r7, #4]
 8002d78:	4618      	mov	r0, r3
 8002d7a:	4b2e      	ldr	r3, [pc, #184]	; (8002e34 <send_DHCP_DISCOVER+0x174>)
 8002d7c:	7819      	ldrb	r1, [r3, #0]
 8002d7e:	1813      	adds	r3, r2, r0
 8002d80:	460a      	mov	r2, r1
 8002d82:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[1];
 8002d86:	4b2a      	ldr	r3, [pc, #168]	; (8002e30 <send_DHCP_DISCOVER+0x170>)
 8002d88:	681a      	ldr	r2, [r3, #0]
 8002d8a:	88bb      	ldrh	r3, [r7, #4]
 8002d8c:	1c59      	adds	r1, r3, #1
 8002d8e:	80b9      	strh	r1, [r7, #4]
 8002d90:	4618      	mov	r0, r3
 8002d92:	4b28      	ldr	r3, [pc, #160]	; (8002e34 <send_DHCP_DISCOVER+0x174>)
 8002d94:	7859      	ldrb	r1, [r3, #1]
 8002d96:	1813      	adds	r3, r2, r0
 8002d98:	460a      	mov	r2, r1
 8002d9a:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[2];
 8002d9e:	4b24      	ldr	r3, [pc, #144]	; (8002e30 <send_DHCP_DISCOVER+0x170>)
 8002da0:	681a      	ldr	r2, [r3, #0]
 8002da2:	88bb      	ldrh	r3, [r7, #4]
 8002da4:	1c59      	adds	r1, r3, #1
 8002da6:	80b9      	strh	r1, [r7, #4]
 8002da8:	4618      	mov	r0, r3
 8002daa:	4b22      	ldr	r3, [pc, #136]	; (8002e34 <send_DHCP_DISCOVER+0x174>)
 8002dac:	7899      	ldrb	r1, [r3, #2]
 8002dae:	1813      	adds	r3, r2, r0
 8002db0:	460a      	mov	r2, r1
 8002db2:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[3];
 8002db6:	4b1e      	ldr	r3, [pc, #120]	; (8002e30 <send_DHCP_DISCOVER+0x170>)
 8002db8:	681a      	ldr	r2, [r3, #0]
 8002dba:	88bb      	ldrh	r3, [r7, #4]
 8002dbc:	1c59      	adds	r1, r3, #1
 8002dbe:	80b9      	strh	r1, [r7, #4]
 8002dc0:	4618      	mov	r0, r3
 8002dc2:	4b1c      	ldr	r3, [pc, #112]	; (8002e34 <send_DHCP_DISCOVER+0x174>)
 8002dc4:	78d9      	ldrb	r1, [r3, #3]
 8002dc6:	1813      	adds	r3, r2, r0
 8002dc8:	460a      	mov	r2, r1
 8002dca:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[4];
 8002dce:	4b18      	ldr	r3, [pc, #96]	; (8002e30 <send_DHCP_DISCOVER+0x170>)
 8002dd0:	681a      	ldr	r2, [r3, #0]
 8002dd2:	88bb      	ldrh	r3, [r7, #4]
 8002dd4:	1c59      	adds	r1, r3, #1
 8002dd6:	80b9      	strh	r1, [r7, #4]
 8002dd8:	4618      	mov	r0, r3
 8002dda:	4b16      	ldr	r3, [pc, #88]	; (8002e34 <send_DHCP_DISCOVER+0x174>)
 8002ddc:	7919      	ldrb	r1, [r3, #4]
 8002dde:	1813      	adds	r3, r2, r0
 8002de0:	460a      	mov	r2, r1
 8002de2:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[5];
 8002de6:	4b12      	ldr	r3, [pc, #72]	; (8002e30 <send_DHCP_DISCOVER+0x170>)
 8002de8:	681a      	ldr	r2, [r3, #0]
 8002dea:	88bb      	ldrh	r3, [r7, #4]
 8002dec:	1c59      	adds	r1, r3, #1
 8002dee:	80b9      	strh	r1, [r7, #4]
 8002df0:	4618      	mov	r0, r3
 8002df2:	4b10      	ldr	r3, [pc, #64]	; (8002e34 <send_DHCP_DISCOVER+0x174>)
 8002df4:	7959      	ldrb	r1, [r3, #5]
 8002df6:	1813      	adds	r3, r2, r0
 8002df8:	460a      	mov	r2, r1
 8002dfa:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	
	// host name
	pDHCPMSG->OPT[k++] = hostName;
 8002dfe:	4b0c      	ldr	r3, [pc, #48]	; (8002e30 <send_DHCP_DISCOVER+0x170>)
 8002e00:	681a      	ldr	r2, [r3, #0]
 8002e02:	88bb      	ldrh	r3, [r7, #4]
 8002e04:	1c59      	adds	r1, r3, #1
 8002e06:	80b9      	strh	r1, [r7, #4]
 8002e08:	4413      	add	r3, r2
 8002e0a:	220c      	movs	r2, #12
 8002e0c:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = 0;          // fill zero length of hostname 
 8002e10:	4b07      	ldr	r3, [pc, #28]	; (8002e30 <send_DHCP_DISCOVER+0x170>)
 8002e12:	681a      	ldr	r2, [r3, #0]
 8002e14:	88bb      	ldrh	r3, [r7, #4]
 8002e16:	1c59      	adds	r1, r3, #1
 8002e18:	80b9      	strh	r1, [r7, #4]
 8002e1a:	4413      	add	r3, r2
 8002e1c:	2200      	movs	r2, #0
 8002e1e:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	for(i = 0 ; HOST_NAME[i] != 0; i++)
 8002e22:	2300      	movs	r3, #0
 8002e24:	80fb      	strh	r3, [r7, #6]
 8002e26:	e017      	b.n	8002e58 <send_DHCP_DISCOVER+0x198>
 8002e28:	200005cc 	.word	0x200005cc
 8002e2c:	200005d0 	.word	0x200005d0
 8002e30:	200006fc 	.word	0x200006fc
 8002e34:	20000700 	.word	0x20000700
   	pDHCPMSG->OPT[k++] = HOST_NAME[i];
 8002e38:	88f9      	ldrh	r1, [r7, #6]
 8002e3a:	4b89      	ldr	r3, [pc, #548]	; (8003060 <send_DHCP_DISCOVER+0x3a0>)
 8002e3c:	681a      	ldr	r2, [r3, #0]
 8002e3e:	88bb      	ldrh	r3, [r7, #4]
 8002e40:	1c58      	adds	r0, r3, #1
 8002e42:	80b8      	strh	r0, [r7, #4]
 8002e44:	4618      	mov	r0, r3
 8002e46:	4b87      	ldr	r3, [pc, #540]	; (8003064 <send_DHCP_DISCOVER+0x3a4>)
 8002e48:	5c59      	ldrb	r1, [r3, r1]
 8002e4a:	1813      	adds	r3, r2, r0
 8002e4c:	460a      	mov	r2, r1
 8002e4e:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	for(i = 0 ; HOST_NAME[i] != 0; i++)
 8002e52:	88fb      	ldrh	r3, [r7, #6]
 8002e54:	3301      	adds	r3, #1
 8002e56:	80fb      	strh	r3, [r7, #6]
 8002e58:	88fb      	ldrh	r3, [r7, #6]
 8002e5a:	4a82      	ldr	r2, [pc, #520]	; (8003064 <send_DHCP_DISCOVER+0x3a4>)
 8002e5c:	5cd3      	ldrb	r3, [r2, r3]
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d1ea      	bne.n	8002e38 <send_DHCP_DISCOVER+0x178>
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[3] >> 4); 
 8002e62:	4b81      	ldr	r3, [pc, #516]	; (8003068 <send_DHCP_DISCOVER+0x3a8>)
 8002e64:	78db      	ldrb	r3, [r3, #3]
 8002e66:	091b      	lsrs	r3, r3, #4
 8002e68:	b2da      	uxtb	r2, r3
 8002e6a:	4b7d      	ldr	r3, [pc, #500]	; (8003060 <send_DHCP_DISCOVER+0x3a0>)
 8002e6c:	681c      	ldr	r4, [r3, #0]
 8002e6e:	88bb      	ldrh	r3, [r7, #4]
 8002e70:	1c59      	adds	r1, r3, #1
 8002e72:	80b9      	strh	r1, [r7, #4]
 8002e74:	461d      	mov	r5, r3
 8002e76:	4610      	mov	r0, r2
 8002e78:	f001 fa9a 	bl	80043b0 <NibbleToHex>
 8002e7c:	4603      	mov	r3, r0
 8002e7e:	461a      	mov	r2, r3
 8002e80:	1963      	adds	r3, r4, r5
 8002e82:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[3]);
 8002e86:	4b78      	ldr	r3, [pc, #480]	; (8003068 <send_DHCP_DISCOVER+0x3a8>)
 8002e88:	78da      	ldrb	r2, [r3, #3]
 8002e8a:	4b75      	ldr	r3, [pc, #468]	; (8003060 <send_DHCP_DISCOVER+0x3a0>)
 8002e8c:	681c      	ldr	r4, [r3, #0]
 8002e8e:	88bb      	ldrh	r3, [r7, #4]
 8002e90:	1c59      	adds	r1, r3, #1
 8002e92:	80b9      	strh	r1, [r7, #4]
 8002e94:	461d      	mov	r5, r3
 8002e96:	4610      	mov	r0, r2
 8002e98:	f001 fa8a 	bl	80043b0 <NibbleToHex>
 8002e9c:	4603      	mov	r3, r0
 8002e9e:	461a      	mov	r2, r3
 8002ea0:	1963      	adds	r3, r4, r5
 8002ea2:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[4] >> 4); 
 8002ea6:	4b70      	ldr	r3, [pc, #448]	; (8003068 <send_DHCP_DISCOVER+0x3a8>)
 8002ea8:	791b      	ldrb	r3, [r3, #4]
 8002eaa:	091b      	lsrs	r3, r3, #4
 8002eac:	b2da      	uxtb	r2, r3
 8002eae:	4b6c      	ldr	r3, [pc, #432]	; (8003060 <send_DHCP_DISCOVER+0x3a0>)
 8002eb0:	681c      	ldr	r4, [r3, #0]
 8002eb2:	88bb      	ldrh	r3, [r7, #4]
 8002eb4:	1c59      	adds	r1, r3, #1
 8002eb6:	80b9      	strh	r1, [r7, #4]
 8002eb8:	461d      	mov	r5, r3
 8002eba:	4610      	mov	r0, r2
 8002ebc:	f001 fa78 	bl	80043b0 <NibbleToHex>
 8002ec0:	4603      	mov	r3, r0
 8002ec2:	461a      	mov	r2, r3
 8002ec4:	1963      	adds	r3, r4, r5
 8002ec6:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[4]);
 8002eca:	4b67      	ldr	r3, [pc, #412]	; (8003068 <send_DHCP_DISCOVER+0x3a8>)
 8002ecc:	791a      	ldrb	r2, [r3, #4]
 8002ece:	4b64      	ldr	r3, [pc, #400]	; (8003060 <send_DHCP_DISCOVER+0x3a0>)
 8002ed0:	681c      	ldr	r4, [r3, #0]
 8002ed2:	88bb      	ldrh	r3, [r7, #4]
 8002ed4:	1c59      	adds	r1, r3, #1
 8002ed6:	80b9      	strh	r1, [r7, #4]
 8002ed8:	461d      	mov	r5, r3
 8002eda:	4610      	mov	r0, r2
 8002edc:	f001 fa68 	bl	80043b0 <NibbleToHex>
 8002ee0:	4603      	mov	r3, r0
 8002ee2:	461a      	mov	r2, r3
 8002ee4:	1963      	adds	r3, r4, r5
 8002ee6:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[5] >> 4); 
 8002eea:	4b5f      	ldr	r3, [pc, #380]	; (8003068 <send_DHCP_DISCOVER+0x3a8>)
 8002eec:	795b      	ldrb	r3, [r3, #5]
 8002eee:	091b      	lsrs	r3, r3, #4
 8002ef0:	b2da      	uxtb	r2, r3
 8002ef2:	4b5b      	ldr	r3, [pc, #364]	; (8003060 <send_DHCP_DISCOVER+0x3a0>)
 8002ef4:	681c      	ldr	r4, [r3, #0]
 8002ef6:	88bb      	ldrh	r3, [r7, #4]
 8002ef8:	1c59      	adds	r1, r3, #1
 8002efa:	80b9      	strh	r1, [r7, #4]
 8002efc:	461d      	mov	r5, r3
 8002efe:	4610      	mov	r0, r2
 8002f00:	f001 fa56 	bl	80043b0 <NibbleToHex>
 8002f04:	4603      	mov	r3, r0
 8002f06:	461a      	mov	r2, r3
 8002f08:	1963      	adds	r3, r4, r5
 8002f0a:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[5]);
 8002f0e:	4b56      	ldr	r3, [pc, #344]	; (8003068 <send_DHCP_DISCOVER+0x3a8>)
 8002f10:	795a      	ldrb	r2, [r3, #5]
 8002f12:	4b53      	ldr	r3, [pc, #332]	; (8003060 <send_DHCP_DISCOVER+0x3a0>)
 8002f14:	681c      	ldr	r4, [r3, #0]
 8002f16:	88bb      	ldrh	r3, [r7, #4]
 8002f18:	1c59      	adds	r1, r3, #1
 8002f1a:	80b9      	strh	r1, [r7, #4]
 8002f1c:	461d      	mov	r5, r3
 8002f1e:	4610      	mov	r0, r2
 8002f20:	f001 fa46 	bl	80043b0 <NibbleToHex>
 8002f24:	4603      	mov	r3, r0
 8002f26:	461a      	mov	r2, r3
 8002f28:	1963      	adds	r3, r4, r5
 8002f2a:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k - (i+6+1)] = i+6; // length of hostname
 8002f2e:	88fb      	ldrh	r3, [r7, #6]
 8002f30:	b2d9      	uxtb	r1, r3
 8002f32:	4b4b      	ldr	r3, [pc, #300]	; (8003060 <send_DHCP_DISCOVER+0x3a0>)
 8002f34:	681a      	ldr	r2, [r3, #0]
 8002f36:	88b8      	ldrh	r0, [r7, #4]
 8002f38:	88fb      	ldrh	r3, [r7, #6]
 8002f3a:	3307      	adds	r3, #7
 8002f3c:	1ac3      	subs	r3, r0, r3
 8002f3e:	3106      	adds	r1, #6
 8002f40:	b2c9      	uxtb	r1, r1
 8002f42:	4413      	add	r3, r2
 8002f44:	460a      	mov	r2, r1
 8002f46:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec

	pDHCPMSG->OPT[k++] = dhcpParamRequest;
 8002f4a:	4b45      	ldr	r3, [pc, #276]	; (8003060 <send_DHCP_DISCOVER+0x3a0>)
 8002f4c:	681a      	ldr	r2, [r3, #0]
 8002f4e:	88bb      	ldrh	r3, [r7, #4]
 8002f50:	1c59      	adds	r1, r3, #1
 8002f52:	80b9      	strh	r1, [r7, #4]
 8002f54:	4413      	add	r3, r2
 8002f56:	2237      	movs	r2, #55	; 0x37
 8002f58:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = 0x08;	// length of request
 8002f5c:	4b40      	ldr	r3, [pc, #256]	; (8003060 <send_DHCP_DISCOVER+0x3a0>)
 8002f5e:	681a      	ldr	r2, [r3, #0]
 8002f60:	88bb      	ldrh	r3, [r7, #4]
 8002f62:	1c59      	adds	r1, r3, #1
 8002f64:	80b9      	strh	r1, [r7, #4]
 8002f66:	4413      	add	r3, r2
 8002f68:	2208      	movs	r2, #8
 8002f6a:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = subnetMask;
 8002f6e:	4b3c      	ldr	r3, [pc, #240]	; (8003060 <send_DHCP_DISCOVER+0x3a0>)
 8002f70:	681a      	ldr	r2, [r3, #0]
 8002f72:	88bb      	ldrh	r3, [r7, #4]
 8002f74:	1c59      	adds	r1, r3, #1
 8002f76:	80b9      	strh	r1, [r7, #4]
 8002f78:	4413      	add	r3, r2
 8002f7a:	2201      	movs	r2, #1
 8002f7c:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = routersOnSubnet;
 8002f80:	4b37      	ldr	r3, [pc, #220]	; (8003060 <send_DHCP_DISCOVER+0x3a0>)
 8002f82:	681a      	ldr	r2, [r3, #0]
 8002f84:	88bb      	ldrh	r3, [r7, #4]
 8002f86:	1c59      	adds	r1, r3, #1
 8002f88:	80b9      	strh	r1, [r7, #4]
 8002f8a:	4413      	add	r3, r2
 8002f8c:	2203      	movs	r2, #3
 8002f8e:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = dns;
 8002f92:	4b33      	ldr	r3, [pc, #204]	; (8003060 <send_DHCP_DISCOVER+0x3a0>)
 8002f94:	681a      	ldr	r2, [r3, #0]
 8002f96:	88bb      	ldrh	r3, [r7, #4]
 8002f98:	1c59      	adds	r1, r3, #1
 8002f9a:	80b9      	strh	r1, [r7, #4]
 8002f9c:	4413      	add	r3, r2
 8002f9e:	2206      	movs	r2, #6
 8002fa0:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = domainName;
 8002fa4:	4b2e      	ldr	r3, [pc, #184]	; (8003060 <send_DHCP_DISCOVER+0x3a0>)
 8002fa6:	681a      	ldr	r2, [r3, #0]
 8002fa8:	88bb      	ldrh	r3, [r7, #4]
 8002faa:	1c59      	adds	r1, r3, #1
 8002fac:	80b9      	strh	r1, [r7, #4]
 8002fae:	4413      	add	r3, r2
 8002fb0:	220f      	movs	r2, #15
 8002fb2:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = dhcpT1value;
 8002fb6:	4b2a      	ldr	r3, [pc, #168]	; (8003060 <send_DHCP_DISCOVER+0x3a0>)
 8002fb8:	681a      	ldr	r2, [r3, #0]
 8002fba:	88bb      	ldrh	r3, [r7, #4]
 8002fbc:	1c59      	adds	r1, r3, #1
 8002fbe:	80b9      	strh	r1, [r7, #4]
 8002fc0:	4413      	add	r3, r2
 8002fc2:	223a      	movs	r2, #58	; 0x3a
 8002fc4:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = dhcpT2value;
 8002fc8:	4b25      	ldr	r3, [pc, #148]	; (8003060 <send_DHCP_DISCOVER+0x3a0>)
 8002fca:	681a      	ldr	r2, [r3, #0]
 8002fcc:	88bb      	ldrh	r3, [r7, #4]
 8002fce:	1c59      	adds	r1, r3, #1
 8002fd0:	80b9      	strh	r1, [r7, #4]
 8002fd2:	4413      	add	r3, r2
 8002fd4:	223b      	movs	r2, #59	; 0x3b
 8002fd6:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = dhcpZabbixServerIP;
 8002fda:	4b21      	ldr	r3, [pc, #132]	; (8003060 <send_DHCP_DISCOVER+0x3a0>)
 8002fdc:	681a      	ldr	r2, [r3, #0]
 8002fde:	88bb      	ldrh	r3, [r7, #4]
 8002fe0:	1c59      	adds	r1, r3, #1
 8002fe2:	80b9      	strh	r1, [r7, #4]
 8002fe4:	4413      	add	r3, r2
 8002fe6:	22e0      	movs	r2, #224	; 0xe0
 8002fe8:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = dhcpZabbixHostName;
 8002fec:	4b1c      	ldr	r3, [pc, #112]	; (8003060 <send_DHCP_DISCOVER+0x3a0>)
 8002fee:	681a      	ldr	r2, [r3, #0]
 8002ff0:	88bb      	ldrh	r3, [r7, #4]
 8002ff2:	1c59      	adds	r1, r3, #1
 8002ff4:	80b9      	strh	r1, [r7, #4]
 8002ff6:	4413      	add	r3, r2
 8002ff8:	22e1      	movs	r2, #225	; 0xe1
 8002ffa:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = endOption;
 8002ffe:	4b18      	ldr	r3, [pc, #96]	; (8003060 <send_DHCP_DISCOVER+0x3a0>)
 8003000:	681a      	ldr	r2, [r3, #0]
 8003002:	88bb      	ldrh	r3, [r7, #4]
 8003004:	1c59      	adds	r1, r3, #1
 8003006:	80b9      	strh	r1, [r7, #4]
 8003008:	4413      	add	r3, r2
 800300a:	22ff      	movs	r2, #255	; 0xff
 800300c:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec

	for (i = k; i < OPT_SIZE; i++) pDHCPMSG->OPT[i] = 0;
 8003010:	88bb      	ldrh	r3, [r7, #4]
 8003012:	80fb      	strh	r3, [r7, #6]
 8003014:	e009      	b.n	800302a <send_DHCP_DISCOVER+0x36a>
 8003016:	4b12      	ldr	r3, [pc, #72]	; (8003060 <send_DHCP_DISCOVER+0x3a0>)
 8003018:	681a      	ldr	r2, [r3, #0]
 800301a:	88fb      	ldrh	r3, [r7, #6]
 800301c:	4413      	add	r3, r2
 800301e:	2200      	movs	r2, #0
 8003020:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
 8003024:	88fb      	ldrh	r3, [r7, #6]
 8003026:	3301      	adds	r3, #1
 8003028:	80fb      	strh	r3, [r7, #6]
 800302a:	88fb      	ldrh	r3, [r7, #6]
 800302c:	f5b3 7f9c 	cmp.w	r3, #312	; 0x138
 8003030:	d3f1      	bcc.n	8003016 <send_DHCP_DISCOVER+0x356>

	// send broadcasting packet
	ip[0] = 255;
 8003032:	23ff      	movs	r3, #255	; 0xff
 8003034:	703b      	strb	r3, [r7, #0]
	ip[1] = 255;
 8003036:	23ff      	movs	r3, #255	; 0xff
 8003038:	707b      	strb	r3, [r7, #1]
	ip[2] = 255;
 800303a:	23ff      	movs	r3, #255	; 0xff
 800303c:	70bb      	strb	r3, [r7, #2]
	ip[3] = 255;
 800303e:	23ff      	movs	r3, #255	; 0xff
 8003040:	70fb      	strb	r3, [r7, #3]

#ifdef _DHCP_DEBUG_
	printf("> Send DHCP_DISCOVER\r\n");
#endif

	sendto(DHCP_SOCKET, (uint8_t *)pDHCPMSG, RIP_MSG_SIZE, ip, DHCP_SERVER_PORT);
 8003042:	4b0a      	ldr	r3, [pc, #40]	; (800306c <send_DHCP_DISCOVER+0x3ac>)
 8003044:	7818      	ldrb	r0, [r3, #0]
 8003046:	4b06      	ldr	r3, [pc, #24]	; (8003060 <send_DHCP_DISCOVER+0x3a0>)
 8003048:	6819      	ldr	r1, [r3, #0]
 800304a:	463b      	mov	r3, r7
 800304c:	2243      	movs	r2, #67	; 0x43
 800304e:	9200      	str	r2, [sp, #0]
 8003050:	f44f 7209 	mov.w	r2, #548	; 0x224
 8003054:	f003 fde0 	bl	8006c18 <sendto>
}
 8003058:	bf00      	nop
 800305a:	3708      	adds	r7, #8
 800305c:	46bd      	mov	sp, r7
 800305e:	bdb0      	pop	{r4, r5, r7, pc}
 8003060:	200006fc 	.word	0x200006fc
 8003064:	20000008 	.word	0x20000008
 8003068:	20000700 	.word	0x20000700
 800306c:	200005c8 	.word	0x200005c8

08003070 <send_DHCP_REQUEST>:

/* SEND DHCP REQUEST */
void send_DHCP_REQUEST(void)
{
 8003070:	b5b0      	push	{r4, r5, r7, lr}
 8003072:	b086      	sub	sp, #24
 8003074:	af02      	add	r7, sp, #8
	int i;
	uint8_t ip[4];
	uint16_t k = 0;
 8003076:	2300      	movs	r3, #0
 8003078:	817b      	strh	r3, [r7, #10]

   makeDHCPMSG();
 800307a:	f7ff fd2b 	bl	8002ad4 <makeDHCPMSG>

   if(dhcp_state == STATE_DHCP_LEASED || dhcp_state == STATE_DHCP_REREQUEST)
 800307e:	4b1b      	ldr	r3, [pc, #108]	; (80030ec <send_DHCP_REQUEST+0x7c>)
 8003080:	f993 3000 	ldrsb.w	r3, [r3]
 8003084:	2b03      	cmp	r3, #3
 8003086:	d004      	beq.n	8003092 <send_DHCP_REQUEST+0x22>
 8003088:	4b18      	ldr	r3, [pc, #96]	; (80030ec <send_DHCP_REQUEST+0x7c>)
 800308a:	f993 3000 	ldrsb.w	r3, [r3]
 800308e:	2b04      	cmp	r3, #4
 8003090:	d134      	bne.n	80030fc <send_DHCP_REQUEST+0x8c>
   {
   	*((uint8_t*)(&pDHCPMSG->flags))   = ((DHCP_FLAGSUNICAST & 0xFF00)>> 8);
 8003092:	4b17      	ldr	r3, [pc, #92]	; (80030f0 <send_DHCP_REQUEST+0x80>)
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	330a      	adds	r3, #10
 8003098:	2200      	movs	r2, #0
 800309a:	701a      	strb	r2, [r3, #0]
   	*((uint8_t*)(&pDHCPMSG->flags)+1) = (DHCP_FLAGSUNICAST & 0x00FF);
 800309c:	4b14      	ldr	r3, [pc, #80]	; (80030f0 <send_DHCP_REQUEST+0x80>)
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	330a      	adds	r3, #10
 80030a2:	3301      	adds	r3, #1
 80030a4:	2200      	movs	r2, #0
 80030a6:	701a      	strb	r2, [r3, #0]
   	pDHCPMSG->ciaddr[0] = DHCP_allocated_ip[0];
 80030a8:	4b11      	ldr	r3, [pc, #68]	; (80030f0 <send_DHCP_REQUEST+0x80>)
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	4a11      	ldr	r2, [pc, #68]	; (80030f4 <send_DHCP_REQUEST+0x84>)
 80030ae:	7812      	ldrb	r2, [r2, #0]
 80030b0:	731a      	strb	r2, [r3, #12]
   	pDHCPMSG->ciaddr[1] = DHCP_allocated_ip[1];
 80030b2:	4b0f      	ldr	r3, [pc, #60]	; (80030f0 <send_DHCP_REQUEST+0x80>)
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	4a0f      	ldr	r2, [pc, #60]	; (80030f4 <send_DHCP_REQUEST+0x84>)
 80030b8:	7852      	ldrb	r2, [r2, #1]
 80030ba:	735a      	strb	r2, [r3, #13]
   	pDHCPMSG->ciaddr[2] = DHCP_allocated_ip[2];
 80030bc:	4b0c      	ldr	r3, [pc, #48]	; (80030f0 <send_DHCP_REQUEST+0x80>)
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	4a0c      	ldr	r2, [pc, #48]	; (80030f4 <send_DHCP_REQUEST+0x84>)
 80030c2:	7892      	ldrb	r2, [r2, #2]
 80030c4:	739a      	strb	r2, [r3, #14]
   	pDHCPMSG->ciaddr[3] = DHCP_allocated_ip[3];
 80030c6:	4b0a      	ldr	r3, [pc, #40]	; (80030f0 <send_DHCP_REQUEST+0x80>)
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	4a0a      	ldr	r2, [pc, #40]	; (80030f4 <send_DHCP_REQUEST+0x84>)
 80030cc:	78d2      	ldrb	r2, [r2, #3]
 80030ce:	73da      	strb	r2, [r3, #15]
   	ip[0] = DHCP_SIP[0];
 80030d0:	4b09      	ldr	r3, [pc, #36]	; (80030f8 <send_DHCP_REQUEST+0x88>)
 80030d2:	781b      	ldrb	r3, [r3, #0]
 80030d4:	713b      	strb	r3, [r7, #4]
   	ip[1] = DHCP_SIP[1];
 80030d6:	4b08      	ldr	r3, [pc, #32]	; (80030f8 <send_DHCP_REQUEST+0x88>)
 80030d8:	785b      	ldrb	r3, [r3, #1]
 80030da:	717b      	strb	r3, [r7, #5]
   	ip[2] = DHCP_SIP[2];
 80030dc:	4b06      	ldr	r3, [pc, #24]	; (80030f8 <send_DHCP_REQUEST+0x88>)
 80030de:	789b      	ldrb	r3, [r3, #2]
 80030e0:	71bb      	strb	r3, [r7, #6]
   	ip[3] = DHCP_SIP[3];   	   	   	
 80030e2:	4b05      	ldr	r3, [pc, #20]	; (80030f8 <send_DHCP_REQUEST+0x88>)
 80030e4:	78db      	ldrb	r3, [r3, #3]
 80030e6:	71fb      	strb	r3, [r7, #7]
 80030e8:	e010      	b.n	800310c <send_DHCP_REQUEST+0x9c>
 80030ea:	bf00      	nop
 80030ec:	200006f0 	.word	0x200006f0
 80030f0:	200006fc 	.word	0x200006fc
 80030f4:	200005d8 	.word	0x200005d8
 80030f8:	200005cc 	.word	0x200005cc
   }
   else
   {
   	ip[0] = 255;
 80030fc:	23ff      	movs	r3, #255	; 0xff
 80030fe:	713b      	strb	r3, [r7, #4]
   	ip[1] = 255;
 8003100:	23ff      	movs	r3, #255	; 0xff
 8003102:	717b      	strb	r3, [r7, #5]
   	ip[2] = 255;
 8003104:	23ff      	movs	r3, #255	; 0xff
 8003106:	71bb      	strb	r3, [r7, #6]
   	ip[3] = 255;   	   	   	
 8003108:	23ff      	movs	r3, #255	; 0xff
 800310a:	71fb      	strb	r3, [r7, #7]
   }
   
   k = 4;      // because MAGIC_COOKIE already made by makeDHCPMSG()
 800310c:	2304      	movs	r3, #4
 800310e:	817b      	strh	r3, [r7, #10]
	
	// Option Request Param.
	pDHCPMSG->OPT[k++] = dhcpMessageType;
 8003110:	4b8d      	ldr	r3, [pc, #564]	; (8003348 <send_DHCP_REQUEST+0x2d8>)
 8003112:	681a      	ldr	r2, [r3, #0]
 8003114:	897b      	ldrh	r3, [r7, #10]
 8003116:	1c59      	adds	r1, r3, #1
 8003118:	8179      	strh	r1, [r7, #10]
 800311a:	4413      	add	r3, r2
 800311c:	2235      	movs	r2, #53	; 0x35
 800311e:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = 0x01;
 8003122:	4b89      	ldr	r3, [pc, #548]	; (8003348 <send_DHCP_REQUEST+0x2d8>)
 8003124:	681a      	ldr	r2, [r3, #0]
 8003126:	897b      	ldrh	r3, [r7, #10]
 8003128:	1c59      	adds	r1, r3, #1
 800312a:	8179      	strh	r1, [r7, #10]
 800312c:	4413      	add	r3, r2
 800312e:	2201      	movs	r2, #1
 8003130:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_REQUEST;
 8003134:	4b84      	ldr	r3, [pc, #528]	; (8003348 <send_DHCP_REQUEST+0x2d8>)
 8003136:	681a      	ldr	r2, [r3, #0]
 8003138:	897b      	ldrh	r3, [r7, #10]
 800313a:	1c59      	adds	r1, r3, #1
 800313c:	8179      	strh	r1, [r7, #10]
 800313e:	4413      	add	r3, r2
 8003140:	2203      	movs	r2, #3
 8003142:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec

	pDHCPMSG->OPT[k++] = dhcpClientIdentifier;
 8003146:	4b80      	ldr	r3, [pc, #512]	; (8003348 <send_DHCP_REQUEST+0x2d8>)
 8003148:	681a      	ldr	r2, [r3, #0]
 800314a:	897b      	ldrh	r3, [r7, #10]
 800314c:	1c59      	adds	r1, r3, #1
 800314e:	8179      	strh	r1, [r7, #10]
 8003150:	4413      	add	r3, r2
 8003152:	223d      	movs	r2, #61	; 0x3d
 8003154:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = 0x07;
 8003158:	4b7b      	ldr	r3, [pc, #492]	; (8003348 <send_DHCP_REQUEST+0x2d8>)
 800315a:	681a      	ldr	r2, [r3, #0]
 800315c:	897b      	ldrh	r3, [r7, #10]
 800315e:	1c59      	adds	r1, r3, #1
 8003160:	8179      	strh	r1, [r7, #10]
 8003162:	4413      	add	r3, r2
 8003164:	2207      	movs	r2, #7
 8003166:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = 0x01;
 800316a:	4b77      	ldr	r3, [pc, #476]	; (8003348 <send_DHCP_REQUEST+0x2d8>)
 800316c:	681a      	ldr	r2, [r3, #0]
 800316e:	897b      	ldrh	r3, [r7, #10]
 8003170:	1c59      	adds	r1, r3, #1
 8003172:	8179      	strh	r1, [r7, #10]
 8003174:	4413      	add	r3, r2
 8003176:	2201      	movs	r2, #1
 8003178:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[0];
 800317c:	4b72      	ldr	r3, [pc, #456]	; (8003348 <send_DHCP_REQUEST+0x2d8>)
 800317e:	681a      	ldr	r2, [r3, #0]
 8003180:	897b      	ldrh	r3, [r7, #10]
 8003182:	1c59      	adds	r1, r3, #1
 8003184:	8179      	strh	r1, [r7, #10]
 8003186:	4618      	mov	r0, r3
 8003188:	4b70      	ldr	r3, [pc, #448]	; (800334c <send_DHCP_REQUEST+0x2dc>)
 800318a:	7819      	ldrb	r1, [r3, #0]
 800318c:	1813      	adds	r3, r2, r0
 800318e:	460a      	mov	r2, r1
 8003190:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[1];
 8003194:	4b6c      	ldr	r3, [pc, #432]	; (8003348 <send_DHCP_REQUEST+0x2d8>)
 8003196:	681a      	ldr	r2, [r3, #0]
 8003198:	897b      	ldrh	r3, [r7, #10]
 800319a:	1c59      	adds	r1, r3, #1
 800319c:	8179      	strh	r1, [r7, #10]
 800319e:	4618      	mov	r0, r3
 80031a0:	4b6a      	ldr	r3, [pc, #424]	; (800334c <send_DHCP_REQUEST+0x2dc>)
 80031a2:	7859      	ldrb	r1, [r3, #1]
 80031a4:	1813      	adds	r3, r2, r0
 80031a6:	460a      	mov	r2, r1
 80031a8:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[2];
 80031ac:	4b66      	ldr	r3, [pc, #408]	; (8003348 <send_DHCP_REQUEST+0x2d8>)
 80031ae:	681a      	ldr	r2, [r3, #0]
 80031b0:	897b      	ldrh	r3, [r7, #10]
 80031b2:	1c59      	adds	r1, r3, #1
 80031b4:	8179      	strh	r1, [r7, #10]
 80031b6:	4618      	mov	r0, r3
 80031b8:	4b64      	ldr	r3, [pc, #400]	; (800334c <send_DHCP_REQUEST+0x2dc>)
 80031ba:	7899      	ldrb	r1, [r3, #2]
 80031bc:	1813      	adds	r3, r2, r0
 80031be:	460a      	mov	r2, r1
 80031c0:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[3];
 80031c4:	4b60      	ldr	r3, [pc, #384]	; (8003348 <send_DHCP_REQUEST+0x2d8>)
 80031c6:	681a      	ldr	r2, [r3, #0]
 80031c8:	897b      	ldrh	r3, [r7, #10]
 80031ca:	1c59      	adds	r1, r3, #1
 80031cc:	8179      	strh	r1, [r7, #10]
 80031ce:	4618      	mov	r0, r3
 80031d0:	4b5e      	ldr	r3, [pc, #376]	; (800334c <send_DHCP_REQUEST+0x2dc>)
 80031d2:	78d9      	ldrb	r1, [r3, #3]
 80031d4:	1813      	adds	r3, r2, r0
 80031d6:	460a      	mov	r2, r1
 80031d8:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[4];
 80031dc:	4b5a      	ldr	r3, [pc, #360]	; (8003348 <send_DHCP_REQUEST+0x2d8>)
 80031de:	681a      	ldr	r2, [r3, #0]
 80031e0:	897b      	ldrh	r3, [r7, #10]
 80031e2:	1c59      	adds	r1, r3, #1
 80031e4:	8179      	strh	r1, [r7, #10]
 80031e6:	4618      	mov	r0, r3
 80031e8:	4b58      	ldr	r3, [pc, #352]	; (800334c <send_DHCP_REQUEST+0x2dc>)
 80031ea:	7919      	ldrb	r1, [r3, #4]
 80031ec:	1813      	adds	r3, r2, r0
 80031ee:	460a      	mov	r2, r1
 80031f0:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[5];
 80031f4:	4b54      	ldr	r3, [pc, #336]	; (8003348 <send_DHCP_REQUEST+0x2d8>)
 80031f6:	681a      	ldr	r2, [r3, #0]
 80031f8:	897b      	ldrh	r3, [r7, #10]
 80031fa:	1c59      	adds	r1, r3, #1
 80031fc:	8179      	strh	r1, [r7, #10]
 80031fe:	4618      	mov	r0, r3
 8003200:	4b52      	ldr	r3, [pc, #328]	; (800334c <send_DHCP_REQUEST+0x2dc>)
 8003202:	7959      	ldrb	r1, [r3, #5]
 8003204:	1813      	adds	r3, r2, r0
 8003206:	460a      	mov	r2, r1
 8003208:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec

   if(ip[3] == 255)  // if(dchp_state == STATE_DHCP_LEASED || dchp_state == DHCP_REREQUEST_STATE)
 800320c:	79fb      	ldrb	r3, [r7, #7]
 800320e:	2bff      	cmp	r3, #255	; 0xff
 8003210:	f040 8084 	bne.w	800331c <send_DHCP_REQUEST+0x2ac>
   {
		pDHCPMSG->OPT[k++] = dhcpRequestedIPaddr;
 8003214:	4b4c      	ldr	r3, [pc, #304]	; (8003348 <send_DHCP_REQUEST+0x2d8>)
 8003216:	681a      	ldr	r2, [r3, #0]
 8003218:	897b      	ldrh	r3, [r7, #10]
 800321a:	1c59      	adds	r1, r3, #1
 800321c:	8179      	strh	r1, [r7, #10]
 800321e:	4413      	add	r3, r2
 8003220:	2232      	movs	r2, #50	; 0x32
 8003222:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
		pDHCPMSG->OPT[k++] = 0x04;
 8003226:	4b48      	ldr	r3, [pc, #288]	; (8003348 <send_DHCP_REQUEST+0x2d8>)
 8003228:	681a      	ldr	r2, [r3, #0]
 800322a:	897b      	ldrh	r3, [r7, #10]
 800322c:	1c59      	adds	r1, r3, #1
 800322e:	8179      	strh	r1, [r7, #10]
 8003230:	4413      	add	r3, r2
 8003232:	2204      	movs	r2, #4
 8003234:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
		pDHCPMSG->OPT[k++] = DHCP_allocated_ip[0];
 8003238:	4b43      	ldr	r3, [pc, #268]	; (8003348 <send_DHCP_REQUEST+0x2d8>)
 800323a:	681a      	ldr	r2, [r3, #0]
 800323c:	897b      	ldrh	r3, [r7, #10]
 800323e:	1c59      	adds	r1, r3, #1
 8003240:	8179      	strh	r1, [r7, #10]
 8003242:	4618      	mov	r0, r3
 8003244:	4b42      	ldr	r3, [pc, #264]	; (8003350 <send_DHCP_REQUEST+0x2e0>)
 8003246:	7819      	ldrb	r1, [r3, #0]
 8003248:	1813      	adds	r3, r2, r0
 800324a:	460a      	mov	r2, r1
 800324c:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
		pDHCPMSG->OPT[k++] = DHCP_allocated_ip[1];
 8003250:	4b3d      	ldr	r3, [pc, #244]	; (8003348 <send_DHCP_REQUEST+0x2d8>)
 8003252:	681a      	ldr	r2, [r3, #0]
 8003254:	897b      	ldrh	r3, [r7, #10]
 8003256:	1c59      	adds	r1, r3, #1
 8003258:	8179      	strh	r1, [r7, #10]
 800325a:	4618      	mov	r0, r3
 800325c:	4b3c      	ldr	r3, [pc, #240]	; (8003350 <send_DHCP_REQUEST+0x2e0>)
 800325e:	7859      	ldrb	r1, [r3, #1]
 8003260:	1813      	adds	r3, r2, r0
 8003262:	460a      	mov	r2, r1
 8003264:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
		pDHCPMSG->OPT[k++] = DHCP_allocated_ip[2];
 8003268:	4b37      	ldr	r3, [pc, #220]	; (8003348 <send_DHCP_REQUEST+0x2d8>)
 800326a:	681a      	ldr	r2, [r3, #0]
 800326c:	897b      	ldrh	r3, [r7, #10]
 800326e:	1c59      	adds	r1, r3, #1
 8003270:	8179      	strh	r1, [r7, #10]
 8003272:	4618      	mov	r0, r3
 8003274:	4b36      	ldr	r3, [pc, #216]	; (8003350 <send_DHCP_REQUEST+0x2e0>)
 8003276:	7899      	ldrb	r1, [r3, #2]
 8003278:	1813      	adds	r3, r2, r0
 800327a:	460a      	mov	r2, r1
 800327c:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
		pDHCPMSG->OPT[k++] = DHCP_allocated_ip[3];
 8003280:	4b31      	ldr	r3, [pc, #196]	; (8003348 <send_DHCP_REQUEST+0x2d8>)
 8003282:	681a      	ldr	r2, [r3, #0]
 8003284:	897b      	ldrh	r3, [r7, #10]
 8003286:	1c59      	adds	r1, r3, #1
 8003288:	8179      	strh	r1, [r7, #10]
 800328a:	4618      	mov	r0, r3
 800328c:	4b30      	ldr	r3, [pc, #192]	; (8003350 <send_DHCP_REQUEST+0x2e0>)
 800328e:	78d9      	ldrb	r1, [r3, #3]
 8003290:	1813      	adds	r3, r2, r0
 8003292:	460a      	mov	r2, r1
 8003294:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	
		pDHCPMSG->OPT[k++] = dhcpServerIdentifier;
 8003298:	4b2b      	ldr	r3, [pc, #172]	; (8003348 <send_DHCP_REQUEST+0x2d8>)
 800329a:	681a      	ldr	r2, [r3, #0]
 800329c:	897b      	ldrh	r3, [r7, #10]
 800329e:	1c59      	adds	r1, r3, #1
 80032a0:	8179      	strh	r1, [r7, #10]
 80032a2:	4413      	add	r3, r2
 80032a4:	2236      	movs	r2, #54	; 0x36
 80032a6:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
		pDHCPMSG->OPT[k++] = 0x04;
 80032aa:	4b27      	ldr	r3, [pc, #156]	; (8003348 <send_DHCP_REQUEST+0x2d8>)
 80032ac:	681a      	ldr	r2, [r3, #0]
 80032ae:	897b      	ldrh	r3, [r7, #10]
 80032b0:	1c59      	adds	r1, r3, #1
 80032b2:	8179      	strh	r1, [r7, #10]
 80032b4:	4413      	add	r3, r2
 80032b6:	2204      	movs	r2, #4
 80032b8:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
		pDHCPMSG->OPT[k++] = DHCP_SIP[0];
 80032bc:	4b22      	ldr	r3, [pc, #136]	; (8003348 <send_DHCP_REQUEST+0x2d8>)
 80032be:	681a      	ldr	r2, [r3, #0]
 80032c0:	897b      	ldrh	r3, [r7, #10]
 80032c2:	1c59      	adds	r1, r3, #1
 80032c4:	8179      	strh	r1, [r7, #10]
 80032c6:	4618      	mov	r0, r3
 80032c8:	4b22      	ldr	r3, [pc, #136]	; (8003354 <send_DHCP_REQUEST+0x2e4>)
 80032ca:	7819      	ldrb	r1, [r3, #0]
 80032cc:	1813      	adds	r3, r2, r0
 80032ce:	460a      	mov	r2, r1
 80032d0:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
		pDHCPMSG->OPT[k++] = DHCP_SIP[1];
 80032d4:	4b1c      	ldr	r3, [pc, #112]	; (8003348 <send_DHCP_REQUEST+0x2d8>)
 80032d6:	681a      	ldr	r2, [r3, #0]
 80032d8:	897b      	ldrh	r3, [r7, #10]
 80032da:	1c59      	adds	r1, r3, #1
 80032dc:	8179      	strh	r1, [r7, #10]
 80032de:	4618      	mov	r0, r3
 80032e0:	4b1c      	ldr	r3, [pc, #112]	; (8003354 <send_DHCP_REQUEST+0x2e4>)
 80032e2:	7859      	ldrb	r1, [r3, #1]
 80032e4:	1813      	adds	r3, r2, r0
 80032e6:	460a      	mov	r2, r1
 80032e8:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
		pDHCPMSG->OPT[k++] = DHCP_SIP[2];
 80032ec:	4b16      	ldr	r3, [pc, #88]	; (8003348 <send_DHCP_REQUEST+0x2d8>)
 80032ee:	681a      	ldr	r2, [r3, #0]
 80032f0:	897b      	ldrh	r3, [r7, #10]
 80032f2:	1c59      	adds	r1, r3, #1
 80032f4:	8179      	strh	r1, [r7, #10]
 80032f6:	4618      	mov	r0, r3
 80032f8:	4b16      	ldr	r3, [pc, #88]	; (8003354 <send_DHCP_REQUEST+0x2e4>)
 80032fa:	7899      	ldrb	r1, [r3, #2]
 80032fc:	1813      	adds	r3, r2, r0
 80032fe:	460a      	mov	r2, r1
 8003300:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
		pDHCPMSG->OPT[k++] = DHCP_SIP[3];
 8003304:	4b10      	ldr	r3, [pc, #64]	; (8003348 <send_DHCP_REQUEST+0x2d8>)
 8003306:	681a      	ldr	r2, [r3, #0]
 8003308:	897b      	ldrh	r3, [r7, #10]
 800330a:	1c59      	adds	r1, r3, #1
 800330c:	8179      	strh	r1, [r7, #10]
 800330e:	4618      	mov	r0, r3
 8003310:	4b10      	ldr	r3, [pc, #64]	; (8003354 <send_DHCP_REQUEST+0x2e4>)
 8003312:	78d9      	ldrb	r1, [r3, #3]
 8003314:	1813      	adds	r3, r2, r0
 8003316:	460a      	mov	r2, r1
 8003318:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	}

	// host name
	pDHCPMSG->OPT[k++] = hostName;
 800331c:	4b0a      	ldr	r3, [pc, #40]	; (8003348 <send_DHCP_REQUEST+0x2d8>)
 800331e:	681a      	ldr	r2, [r3, #0]
 8003320:	897b      	ldrh	r3, [r7, #10]
 8003322:	1c59      	adds	r1, r3, #1
 8003324:	8179      	strh	r1, [r7, #10]
 8003326:	4413      	add	r3, r2
 8003328:	220c      	movs	r2, #12
 800332a:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = 0; // length of hostname
 800332e:	4b06      	ldr	r3, [pc, #24]	; (8003348 <send_DHCP_REQUEST+0x2d8>)
 8003330:	681a      	ldr	r2, [r3, #0]
 8003332:	897b      	ldrh	r3, [r7, #10]
 8003334:	1c59      	adds	r1, r3, #1
 8003336:	8179      	strh	r1, [r7, #10]
 8003338:	4413      	add	r3, r2
 800333a:	2200      	movs	r2, #0
 800333c:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	for(i = 0 ; HOST_NAME[i] != 0; i++)
 8003340:	2300      	movs	r3, #0
 8003342:	60fb      	str	r3, [r7, #12]
 8003344:	e019      	b.n	800337a <send_DHCP_REQUEST+0x30a>
 8003346:	bf00      	nop
 8003348:	200006fc 	.word	0x200006fc
 800334c:	20000700 	.word	0x20000700
 8003350:	200005d8 	.word	0x200005d8
 8003354:	200005cc 	.word	0x200005cc
   	pDHCPMSG->OPT[k++] = HOST_NAME[i];
 8003358:	4b8f      	ldr	r3, [pc, #572]	; (8003598 <send_DHCP_REQUEST+0x528>)
 800335a:	681a      	ldr	r2, [r3, #0]
 800335c:	897b      	ldrh	r3, [r7, #10]
 800335e:	1c59      	adds	r1, r3, #1
 8003360:	8179      	strh	r1, [r7, #10]
 8003362:	4618      	mov	r0, r3
 8003364:	498d      	ldr	r1, [pc, #564]	; (800359c <send_DHCP_REQUEST+0x52c>)
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	440b      	add	r3, r1
 800336a:	7819      	ldrb	r1, [r3, #0]
 800336c:	1813      	adds	r3, r2, r0
 800336e:	460a      	mov	r2, r1
 8003370:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	for(i = 0 ; HOST_NAME[i] != 0; i++)
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	3301      	adds	r3, #1
 8003378:	60fb      	str	r3, [r7, #12]
 800337a:	4a88      	ldr	r2, [pc, #544]	; (800359c <send_DHCP_REQUEST+0x52c>)
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	4413      	add	r3, r2
 8003380:	781b      	ldrb	r3, [r3, #0]
 8003382:	2b00      	cmp	r3, #0
 8003384:	d1e8      	bne.n	8003358 <send_DHCP_REQUEST+0x2e8>
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[3] >> 4); 
 8003386:	4b86      	ldr	r3, [pc, #536]	; (80035a0 <send_DHCP_REQUEST+0x530>)
 8003388:	78db      	ldrb	r3, [r3, #3]
 800338a:	091b      	lsrs	r3, r3, #4
 800338c:	b2da      	uxtb	r2, r3
 800338e:	4b82      	ldr	r3, [pc, #520]	; (8003598 <send_DHCP_REQUEST+0x528>)
 8003390:	681c      	ldr	r4, [r3, #0]
 8003392:	897b      	ldrh	r3, [r7, #10]
 8003394:	1c59      	adds	r1, r3, #1
 8003396:	8179      	strh	r1, [r7, #10]
 8003398:	461d      	mov	r5, r3
 800339a:	4610      	mov	r0, r2
 800339c:	f001 f808 	bl	80043b0 <NibbleToHex>
 80033a0:	4603      	mov	r3, r0
 80033a2:	461a      	mov	r2, r3
 80033a4:	1963      	adds	r3, r4, r5
 80033a6:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[3]);
 80033aa:	4b7d      	ldr	r3, [pc, #500]	; (80035a0 <send_DHCP_REQUEST+0x530>)
 80033ac:	78da      	ldrb	r2, [r3, #3]
 80033ae:	4b7a      	ldr	r3, [pc, #488]	; (8003598 <send_DHCP_REQUEST+0x528>)
 80033b0:	681c      	ldr	r4, [r3, #0]
 80033b2:	897b      	ldrh	r3, [r7, #10]
 80033b4:	1c59      	adds	r1, r3, #1
 80033b6:	8179      	strh	r1, [r7, #10]
 80033b8:	461d      	mov	r5, r3
 80033ba:	4610      	mov	r0, r2
 80033bc:	f000 fff8 	bl	80043b0 <NibbleToHex>
 80033c0:	4603      	mov	r3, r0
 80033c2:	461a      	mov	r2, r3
 80033c4:	1963      	adds	r3, r4, r5
 80033c6:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[4] >> 4); 
 80033ca:	4b75      	ldr	r3, [pc, #468]	; (80035a0 <send_DHCP_REQUEST+0x530>)
 80033cc:	791b      	ldrb	r3, [r3, #4]
 80033ce:	091b      	lsrs	r3, r3, #4
 80033d0:	b2da      	uxtb	r2, r3
 80033d2:	4b71      	ldr	r3, [pc, #452]	; (8003598 <send_DHCP_REQUEST+0x528>)
 80033d4:	681c      	ldr	r4, [r3, #0]
 80033d6:	897b      	ldrh	r3, [r7, #10]
 80033d8:	1c59      	adds	r1, r3, #1
 80033da:	8179      	strh	r1, [r7, #10]
 80033dc:	461d      	mov	r5, r3
 80033de:	4610      	mov	r0, r2
 80033e0:	f000 ffe6 	bl	80043b0 <NibbleToHex>
 80033e4:	4603      	mov	r3, r0
 80033e6:	461a      	mov	r2, r3
 80033e8:	1963      	adds	r3, r4, r5
 80033ea:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[4]);
 80033ee:	4b6c      	ldr	r3, [pc, #432]	; (80035a0 <send_DHCP_REQUEST+0x530>)
 80033f0:	791a      	ldrb	r2, [r3, #4]
 80033f2:	4b69      	ldr	r3, [pc, #420]	; (8003598 <send_DHCP_REQUEST+0x528>)
 80033f4:	681c      	ldr	r4, [r3, #0]
 80033f6:	897b      	ldrh	r3, [r7, #10]
 80033f8:	1c59      	adds	r1, r3, #1
 80033fa:	8179      	strh	r1, [r7, #10]
 80033fc:	461d      	mov	r5, r3
 80033fe:	4610      	mov	r0, r2
 8003400:	f000 ffd6 	bl	80043b0 <NibbleToHex>
 8003404:	4603      	mov	r3, r0
 8003406:	461a      	mov	r2, r3
 8003408:	1963      	adds	r3, r4, r5
 800340a:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[5] >> 4); 
 800340e:	4b64      	ldr	r3, [pc, #400]	; (80035a0 <send_DHCP_REQUEST+0x530>)
 8003410:	795b      	ldrb	r3, [r3, #5]
 8003412:	091b      	lsrs	r3, r3, #4
 8003414:	b2da      	uxtb	r2, r3
 8003416:	4b60      	ldr	r3, [pc, #384]	; (8003598 <send_DHCP_REQUEST+0x528>)
 8003418:	681c      	ldr	r4, [r3, #0]
 800341a:	897b      	ldrh	r3, [r7, #10]
 800341c:	1c59      	adds	r1, r3, #1
 800341e:	8179      	strh	r1, [r7, #10]
 8003420:	461d      	mov	r5, r3
 8003422:	4610      	mov	r0, r2
 8003424:	f000 ffc4 	bl	80043b0 <NibbleToHex>
 8003428:	4603      	mov	r3, r0
 800342a:	461a      	mov	r2, r3
 800342c:	1963      	adds	r3, r4, r5
 800342e:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[5]);
 8003432:	4b5b      	ldr	r3, [pc, #364]	; (80035a0 <send_DHCP_REQUEST+0x530>)
 8003434:	795a      	ldrb	r2, [r3, #5]
 8003436:	4b58      	ldr	r3, [pc, #352]	; (8003598 <send_DHCP_REQUEST+0x528>)
 8003438:	681c      	ldr	r4, [r3, #0]
 800343a:	897b      	ldrh	r3, [r7, #10]
 800343c:	1c59      	adds	r1, r3, #1
 800343e:	8179      	strh	r1, [r7, #10]
 8003440:	461d      	mov	r5, r3
 8003442:	4610      	mov	r0, r2
 8003444:	f000 ffb4 	bl	80043b0 <NibbleToHex>
 8003448:	4603      	mov	r3, r0
 800344a:	461a      	mov	r2, r3
 800344c:	1963      	adds	r3, r4, r5
 800344e:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k - (i+6+1)] = i+6; // length of hostname
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	b2d9      	uxtb	r1, r3
 8003456:	4b50      	ldr	r3, [pc, #320]	; (8003598 <send_DHCP_REQUEST+0x528>)
 8003458:	681a      	ldr	r2, [r3, #0]
 800345a:	8978      	ldrh	r0, [r7, #10]
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	3307      	adds	r3, #7
 8003460:	1ac3      	subs	r3, r0, r3
 8003462:	3106      	adds	r1, #6
 8003464:	b2c9      	uxtb	r1, r1
 8003466:	4413      	add	r3, r2
 8003468:	460a      	mov	r2, r1
 800346a:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	
	pDHCPMSG->OPT[k++] = dhcpParamRequest;
 800346e:	4b4a      	ldr	r3, [pc, #296]	; (8003598 <send_DHCP_REQUEST+0x528>)
 8003470:	681a      	ldr	r2, [r3, #0]
 8003472:	897b      	ldrh	r3, [r7, #10]
 8003474:	1c59      	adds	r1, r3, #1
 8003476:	8179      	strh	r1, [r7, #10]
 8003478:	4413      	add	r3, r2
 800347a:	2237      	movs	r2, #55	; 0x37
 800347c:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = 0x0a;
 8003480:	4b45      	ldr	r3, [pc, #276]	; (8003598 <send_DHCP_REQUEST+0x528>)
 8003482:	681a      	ldr	r2, [r3, #0]
 8003484:	897b      	ldrh	r3, [r7, #10]
 8003486:	1c59      	adds	r1, r3, #1
 8003488:	8179      	strh	r1, [r7, #10]
 800348a:	4413      	add	r3, r2
 800348c:	220a      	movs	r2, #10
 800348e:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = subnetMask;
 8003492:	4b41      	ldr	r3, [pc, #260]	; (8003598 <send_DHCP_REQUEST+0x528>)
 8003494:	681a      	ldr	r2, [r3, #0]
 8003496:	897b      	ldrh	r3, [r7, #10]
 8003498:	1c59      	adds	r1, r3, #1
 800349a:	8179      	strh	r1, [r7, #10]
 800349c:	4413      	add	r3, r2
 800349e:	2201      	movs	r2, #1
 80034a0:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = routersOnSubnet;
 80034a4:	4b3c      	ldr	r3, [pc, #240]	; (8003598 <send_DHCP_REQUEST+0x528>)
 80034a6:	681a      	ldr	r2, [r3, #0]
 80034a8:	897b      	ldrh	r3, [r7, #10]
 80034aa:	1c59      	adds	r1, r3, #1
 80034ac:	8179      	strh	r1, [r7, #10]
 80034ae:	4413      	add	r3, r2
 80034b0:	2203      	movs	r2, #3
 80034b2:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = dns;
 80034b6:	4b38      	ldr	r3, [pc, #224]	; (8003598 <send_DHCP_REQUEST+0x528>)
 80034b8:	681a      	ldr	r2, [r3, #0]
 80034ba:	897b      	ldrh	r3, [r7, #10]
 80034bc:	1c59      	adds	r1, r3, #1
 80034be:	8179      	strh	r1, [r7, #10]
 80034c0:	4413      	add	r3, r2
 80034c2:	2206      	movs	r2, #6
 80034c4:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = domainName;
 80034c8:	4b33      	ldr	r3, [pc, #204]	; (8003598 <send_DHCP_REQUEST+0x528>)
 80034ca:	681a      	ldr	r2, [r3, #0]
 80034cc:	897b      	ldrh	r3, [r7, #10]
 80034ce:	1c59      	adds	r1, r3, #1
 80034d0:	8179      	strh	r1, [r7, #10]
 80034d2:	4413      	add	r3, r2
 80034d4:	220f      	movs	r2, #15
 80034d6:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = dhcpT1value;
 80034da:	4b2f      	ldr	r3, [pc, #188]	; (8003598 <send_DHCP_REQUEST+0x528>)
 80034dc:	681a      	ldr	r2, [r3, #0]
 80034de:	897b      	ldrh	r3, [r7, #10]
 80034e0:	1c59      	adds	r1, r3, #1
 80034e2:	8179      	strh	r1, [r7, #10]
 80034e4:	4413      	add	r3, r2
 80034e6:	223a      	movs	r2, #58	; 0x3a
 80034e8:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = dhcpT2value;
 80034ec:	4b2a      	ldr	r3, [pc, #168]	; (8003598 <send_DHCP_REQUEST+0x528>)
 80034ee:	681a      	ldr	r2, [r3, #0]
 80034f0:	897b      	ldrh	r3, [r7, #10]
 80034f2:	1c59      	adds	r1, r3, #1
 80034f4:	8179      	strh	r1, [r7, #10]
 80034f6:	4413      	add	r3, r2
 80034f8:	223b      	movs	r2, #59	; 0x3b
 80034fa:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = performRouterDiscovery;
 80034fe:	4b26      	ldr	r3, [pc, #152]	; (8003598 <send_DHCP_REQUEST+0x528>)
 8003500:	681a      	ldr	r2, [r3, #0]
 8003502:	897b      	ldrh	r3, [r7, #10]
 8003504:	1c59      	adds	r1, r3, #1
 8003506:	8179      	strh	r1, [r7, #10]
 8003508:	4413      	add	r3, r2
 800350a:	221f      	movs	r2, #31
 800350c:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = staticRoute;
 8003510:	4b21      	ldr	r3, [pc, #132]	; (8003598 <send_DHCP_REQUEST+0x528>)
 8003512:	681a      	ldr	r2, [r3, #0]
 8003514:	897b      	ldrh	r3, [r7, #10]
 8003516:	1c59      	adds	r1, r3, #1
 8003518:	8179      	strh	r1, [r7, #10]
 800351a:	4413      	add	r3, r2
 800351c:	2221      	movs	r2, #33	; 0x21
 800351e:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = dhcpZabbixServerIP;
 8003522:	4b1d      	ldr	r3, [pc, #116]	; (8003598 <send_DHCP_REQUEST+0x528>)
 8003524:	681a      	ldr	r2, [r3, #0]
 8003526:	897b      	ldrh	r3, [r7, #10]
 8003528:	1c59      	adds	r1, r3, #1
 800352a:	8179      	strh	r1, [r7, #10]
 800352c:	4413      	add	r3, r2
 800352e:	22e0      	movs	r2, #224	; 0xe0
 8003530:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = dhcpZabbixHostName;
 8003534:	4b18      	ldr	r3, [pc, #96]	; (8003598 <send_DHCP_REQUEST+0x528>)
 8003536:	681a      	ldr	r2, [r3, #0]
 8003538:	897b      	ldrh	r3, [r7, #10]
 800353a:	1c59      	adds	r1, r3, #1
 800353c:	8179      	strh	r1, [r7, #10]
 800353e:	4413      	add	r3, r2
 8003540:	22e1      	movs	r2, #225	; 0xe1
 8003542:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = endOption;
 8003546:	4b14      	ldr	r3, [pc, #80]	; (8003598 <send_DHCP_REQUEST+0x528>)
 8003548:	681a      	ldr	r2, [r3, #0]
 800354a:	897b      	ldrh	r3, [r7, #10]
 800354c:	1c59      	adds	r1, r3, #1
 800354e:	8179      	strh	r1, [r7, #10]
 8003550:	4413      	add	r3, r2
 8003552:	22ff      	movs	r2, #255	; 0xff
 8003554:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec

	for (i = k; i < OPT_SIZE; i++) pDHCPMSG->OPT[i] = 0;
 8003558:	897b      	ldrh	r3, [r7, #10]
 800355a:	60fb      	str	r3, [r7, #12]
 800355c:	e009      	b.n	8003572 <send_DHCP_REQUEST+0x502>
 800355e:	4b0e      	ldr	r3, [pc, #56]	; (8003598 <send_DHCP_REQUEST+0x528>)
 8003560:	681a      	ldr	r2, [r3, #0]
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	4413      	add	r3, r2
 8003566:	33ec      	adds	r3, #236	; 0xec
 8003568:	2200      	movs	r2, #0
 800356a:	701a      	strb	r2, [r3, #0]
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	3301      	adds	r3, #1
 8003570:	60fb      	str	r3, [r7, #12]
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	f5b3 7f9c 	cmp.w	r3, #312	; 0x138
 8003578:	dbf1      	blt.n	800355e <send_DHCP_REQUEST+0x4ee>

#ifdef _DHCP_DEBUG_
	printf("> Send DHCP_REQUEST\r\n");
#endif
	
	sendto(DHCP_SOCKET, (uint8_t *)pDHCPMSG, RIP_MSG_SIZE, ip, DHCP_SERVER_PORT);
 800357a:	4b0a      	ldr	r3, [pc, #40]	; (80035a4 <send_DHCP_REQUEST+0x534>)
 800357c:	7818      	ldrb	r0, [r3, #0]
 800357e:	4b06      	ldr	r3, [pc, #24]	; (8003598 <send_DHCP_REQUEST+0x528>)
 8003580:	6819      	ldr	r1, [r3, #0]
 8003582:	1d3b      	adds	r3, r7, #4
 8003584:	2243      	movs	r2, #67	; 0x43
 8003586:	9200      	str	r2, [sp, #0]
 8003588:	f44f 7209 	mov.w	r2, #548	; 0x224
 800358c:	f003 fb44 	bl	8006c18 <sendto>

}
 8003590:	bf00      	nop
 8003592:	3710      	adds	r7, #16
 8003594:	46bd      	mov	sp, r7
 8003596:	bdb0      	pop	{r4, r5, r7, pc}
 8003598:	200006fc 	.word	0x200006fc
 800359c:	20000008 	.word	0x20000008
 80035a0:	20000700 	.word	0x20000700
 80035a4:	200005c8 	.word	0x200005c8

080035a8 <send_DHCP_DECLINE>:

/* SEND DHCP DHCPDECLINE */
void send_DHCP_DECLINE(void)
{
 80035a8:	b580      	push	{r7, lr}
 80035aa:	b086      	sub	sp, #24
 80035ac:	af02      	add	r7, sp, #8
	int i;
	uint8_t ip[4];
	uint16_t k = 0;
 80035ae:	2300      	movs	r3, #0
 80035b0:	817b      	strh	r3, [r7, #10]
	
	makeDHCPMSG();
 80035b2:	f7ff fa8f 	bl	8002ad4 <makeDHCPMSG>

   k = 4;      // because MAGIC_COOKIE already made by makeDHCPMSG()
 80035b6:	2304      	movs	r3, #4
 80035b8:	817b      	strh	r3, [r7, #10]
   
	*((uint8_t*)(&pDHCPMSG->flags))   = ((DHCP_FLAGSUNICAST & 0xFF00)>> 8);
 80035ba:	4b9f      	ldr	r3, [pc, #636]	; (8003838 <send_DHCP_DECLINE+0x290>)
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	330a      	adds	r3, #10
 80035c0:	2200      	movs	r2, #0
 80035c2:	701a      	strb	r2, [r3, #0]
	*((uint8_t*)(&pDHCPMSG->flags)+1) = (DHCP_FLAGSUNICAST & 0x00FF);
 80035c4:	4b9c      	ldr	r3, [pc, #624]	; (8003838 <send_DHCP_DECLINE+0x290>)
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	330a      	adds	r3, #10
 80035ca:	3301      	adds	r3, #1
 80035cc:	2200      	movs	r2, #0
 80035ce:	701a      	strb	r2, [r3, #0]

	// Option Request Param.
	pDHCPMSG->OPT[k++] = dhcpMessageType;
 80035d0:	4b99      	ldr	r3, [pc, #612]	; (8003838 <send_DHCP_DECLINE+0x290>)
 80035d2:	681a      	ldr	r2, [r3, #0]
 80035d4:	897b      	ldrh	r3, [r7, #10]
 80035d6:	1c59      	adds	r1, r3, #1
 80035d8:	8179      	strh	r1, [r7, #10]
 80035da:	4413      	add	r3, r2
 80035dc:	2235      	movs	r2, #53	; 0x35
 80035de:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = 0x01;
 80035e2:	4b95      	ldr	r3, [pc, #596]	; (8003838 <send_DHCP_DECLINE+0x290>)
 80035e4:	681a      	ldr	r2, [r3, #0]
 80035e6:	897b      	ldrh	r3, [r7, #10]
 80035e8:	1c59      	adds	r1, r3, #1
 80035ea:	8179      	strh	r1, [r7, #10]
 80035ec:	4413      	add	r3, r2
 80035ee:	2201      	movs	r2, #1
 80035f0:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_DECLINE;
 80035f4:	4b90      	ldr	r3, [pc, #576]	; (8003838 <send_DHCP_DECLINE+0x290>)
 80035f6:	681a      	ldr	r2, [r3, #0]
 80035f8:	897b      	ldrh	r3, [r7, #10]
 80035fa:	1c59      	adds	r1, r3, #1
 80035fc:	8179      	strh	r1, [r7, #10]
 80035fe:	4413      	add	r3, r2
 8003600:	2204      	movs	r2, #4
 8003602:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec

	pDHCPMSG->OPT[k++] = dhcpClientIdentifier;
 8003606:	4b8c      	ldr	r3, [pc, #560]	; (8003838 <send_DHCP_DECLINE+0x290>)
 8003608:	681a      	ldr	r2, [r3, #0]
 800360a:	897b      	ldrh	r3, [r7, #10]
 800360c:	1c59      	adds	r1, r3, #1
 800360e:	8179      	strh	r1, [r7, #10]
 8003610:	4413      	add	r3, r2
 8003612:	223d      	movs	r2, #61	; 0x3d
 8003614:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = 0x07;
 8003618:	4b87      	ldr	r3, [pc, #540]	; (8003838 <send_DHCP_DECLINE+0x290>)
 800361a:	681a      	ldr	r2, [r3, #0]
 800361c:	897b      	ldrh	r3, [r7, #10]
 800361e:	1c59      	adds	r1, r3, #1
 8003620:	8179      	strh	r1, [r7, #10]
 8003622:	4413      	add	r3, r2
 8003624:	2207      	movs	r2, #7
 8003626:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = 0x01;
 800362a:	4b83      	ldr	r3, [pc, #524]	; (8003838 <send_DHCP_DECLINE+0x290>)
 800362c:	681a      	ldr	r2, [r3, #0]
 800362e:	897b      	ldrh	r3, [r7, #10]
 8003630:	1c59      	adds	r1, r3, #1
 8003632:	8179      	strh	r1, [r7, #10]
 8003634:	4413      	add	r3, r2
 8003636:	2201      	movs	r2, #1
 8003638:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[0];
 800363c:	4b7e      	ldr	r3, [pc, #504]	; (8003838 <send_DHCP_DECLINE+0x290>)
 800363e:	681a      	ldr	r2, [r3, #0]
 8003640:	897b      	ldrh	r3, [r7, #10]
 8003642:	1c59      	adds	r1, r3, #1
 8003644:	8179      	strh	r1, [r7, #10]
 8003646:	4618      	mov	r0, r3
 8003648:	4b7c      	ldr	r3, [pc, #496]	; (800383c <send_DHCP_DECLINE+0x294>)
 800364a:	7819      	ldrb	r1, [r3, #0]
 800364c:	1813      	adds	r3, r2, r0
 800364e:	460a      	mov	r2, r1
 8003650:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[1];
 8003654:	4b78      	ldr	r3, [pc, #480]	; (8003838 <send_DHCP_DECLINE+0x290>)
 8003656:	681a      	ldr	r2, [r3, #0]
 8003658:	897b      	ldrh	r3, [r7, #10]
 800365a:	1c59      	adds	r1, r3, #1
 800365c:	8179      	strh	r1, [r7, #10]
 800365e:	4618      	mov	r0, r3
 8003660:	4b76      	ldr	r3, [pc, #472]	; (800383c <send_DHCP_DECLINE+0x294>)
 8003662:	7859      	ldrb	r1, [r3, #1]
 8003664:	1813      	adds	r3, r2, r0
 8003666:	460a      	mov	r2, r1
 8003668:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[2];
 800366c:	4b72      	ldr	r3, [pc, #456]	; (8003838 <send_DHCP_DECLINE+0x290>)
 800366e:	681a      	ldr	r2, [r3, #0]
 8003670:	897b      	ldrh	r3, [r7, #10]
 8003672:	1c59      	adds	r1, r3, #1
 8003674:	8179      	strh	r1, [r7, #10]
 8003676:	4618      	mov	r0, r3
 8003678:	4b70      	ldr	r3, [pc, #448]	; (800383c <send_DHCP_DECLINE+0x294>)
 800367a:	7899      	ldrb	r1, [r3, #2]
 800367c:	1813      	adds	r3, r2, r0
 800367e:	460a      	mov	r2, r1
 8003680:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[3];
 8003684:	4b6c      	ldr	r3, [pc, #432]	; (8003838 <send_DHCP_DECLINE+0x290>)
 8003686:	681a      	ldr	r2, [r3, #0]
 8003688:	897b      	ldrh	r3, [r7, #10]
 800368a:	1c59      	adds	r1, r3, #1
 800368c:	8179      	strh	r1, [r7, #10]
 800368e:	4618      	mov	r0, r3
 8003690:	4b6a      	ldr	r3, [pc, #424]	; (800383c <send_DHCP_DECLINE+0x294>)
 8003692:	78d9      	ldrb	r1, [r3, #3]
 8003694:	1813      	adds	r3, r2, r0
 8003696:	460a      	mov	r2, r1
 8003698:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[4];
 800369c:	4b66      	ldr	r3, [pc, #408]	; (8003838 <send_DHCP_DECLINE+0x290>)
 800369e:	681a      	ldr	r2, [r3, #0]
 80036a0:	897b      	ldrh	r3, [r7, #10]
 80036a2:	1c59      	adds	r1, r3, #1
 80036a4:	8179      	strh	r1, [r7, #10]
 80036a6:	4618      	mov	r0, r3
 80036a8:	4b64      	ldr	r3, [pc, #400]	; (800383c <send_DHCP_DECLINE+0x294>)
 80036aa:	7919      	ldrb	r1, [r3, #4]
 80036ac:	1813      	adds	r3, r2, r0
 80036ae:	460a      	mov	r2, r1
 80036b0:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[5];
 80036b4:	4b60      	ldr	r3, [pc, #384]	; (8003838 <send_DHCP_DECLINE+0x290>)
 80036b6:	681a      	ldr	r2, [r3, #0]
 80036b8:	897b      	ldrh	r3, [r7, #10]
 80036ba:	1c59      	adds	r1, r3, #1
 80036bc:	8179      	strh	r1, [r7, #10]
 80036be:	4618      	mov	r0, r3
 80036c0:	4b5e      	ldr	r3, [pc, #376]	; (800383c <send_DHCP_DECLINE+0x294>)
 80036c2:	7959      	ldrb	r1, [r3, #5]
 80036c4:	1813      	adds	r3, r2, r0
 80036c6:	460a      	mov	r2, r1
 80036c8:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec

	pDHCPMSG->OPT[k++] = dhcpRequestedIPaddr;
 80036cc:	4b5a      	ldr	r3, [pc, #360]	; (8003838 <send_DHCP_DECLINE+0x290>)
 80036ce:	681a      	ldr	r2, [r3, #0]
 80036d0:	897b      	ldrh	r3, [r7, #10]
 80036d2:	1c59      	adds	r1, r3, #1
 80036d4:	8179      	strh	r1, [r7, #10]
 80036d6:	4413      	add	r3, r2
 80036d8:	2232      	movs	r2, #50	; 0x32
 80036da:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = 0x04;
 80036de:	4b56      	ldr	r3, [pc, #344]	; (8003838 <send_DHCP_DECLINE+0x290>)
 80036e0:	681a      	ldr	r2, [r3, #0]
 80036e2:	897b      	ldrh	r3, [r7, #10]
 80036e4:	1c59      	adds	r1, r3, #1
 80036e6:	8179      	strh	r1, [r7, #10]
 80036e8:	4413      	add	r3, r2
 80036ea:	2204      	movs	r2, #4
 80036ec:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_allocated_ip[0];
 80036f0:	4b51      	ldr	r3, [pc, #324]	; (8003838 <send_DHCP_DECLINE+0x290>)
 80036f2:	681a      	ldr	r2, [r3, #0]
 80036f4:	897b      	ldrh	r3, [r7, #10]
 80036f6:	1c59      	adds	r1, r3, #1
 80036f8:	8179      	strh	r1, [r7, #10]
 80036fa:	4618      	mov	r0, r3
 80036fc:	4b50      	ldr	r3, [pc, #320]	; (8003840 <send_DHCP_DECLINE+0x298>)
 80036fe:	7819      	ldrb	r1, [r3, #0]
 8003700:	1813      	adds	r3, r2, r0
 8003702:	460a      	mov	r2, r1
 8003704:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_allocated_ip[1];
 8003708:	4b4b      	ldr	r3, [pc, #300]	; (8003838 <send_DHCP_DECLINE+0x290>)
 800370a:	681a      	ldr	r2, [r3, #0]
 800370c:	897b      	ldrh	r3, [r7, #10]
 800370e:	1c59      	adds	r1, r3, #1
 8003710:	8179      	strh	r1, [r7, #10]
 8003712:	4618      	mov	r0, r3
 8003714:	4b4a      	ldr	r3, [pc, #296]	; (8003840 <send_DHCP_DECLINE+0x298>)
 8003716:	7859      	ldrb	r1, [r3, #1]
 8003718:	1813      	adds	r3, r2, r0
 800371a:	460a      	mov	r2, r1
 800371c:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_allocated_ip[2];
 8003720:	4b45      	ldr	r3, [pc, #276]	; (8003838 <send_DHCP_DECLINE+0x290>)
 8003722:	681a      	ldr	r2, [r3, #0]
 8003724:	897b      	ldrh	r3, [r7, #10]
 8003726:	1c59      	adds	r1, r3, #1
 8003728:	8179      	strh	r1, [r7, #10]
 800372a:	4618      	mov	r0, r3
 800372c:	4b44      	ldr	r3, [pc, #272]	; (8003840 <send_DHCP_DECLINE+0x298>)
 800372e:	7899      	ldrb	r1, [r3, #2]
 8003730:	1813      	adds	r3, r2, r0
 8003732:	460a      	mov	r2, r1
 8003734:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_allocated_ip[3];
 8003738:	4b3f      	ldr	r3, [pc, #252]	; (8003838 <send_DHCP_DECLINE+0x290>)
 800373a:	681a      	ldr	r2, [r3, #0]
 800373c:	897b      	ldrh	r3, [r7, #10]
 800373e:	1c59      	adds	r1, r3, #1
 8003740:	8179      	strh	r1, [r7, #10]
 8003742:	4618      	mov	r0, r3
 8003744:	4b3e      	ldr	r3, [pc, #248]	; (8003840 <send_DHCP_DECLINE+0x298>)
 8003746:	78d9      	ldrb	r1, [r3, #3]
 8003748:	1813      	adds	r3, r2, r0
 800374a:	460a      	mov	r2, r1
 800374c:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec

	pDHCPMSG->OPT[k++] = dhcpServerIdentifier;
 8003750:	4b39      	ldr	r3, [pc, #228]	; (8003838 <send_DHCP_DECLINE+0x290>)
 8003752:	681a      	ldr	r2, [r3, #0]
 8003754:	897b      	ldrh	r3, [r7, #10]
 8003756:	1c59      	adds	r1, r3, #1
 8003758:	8179      	strh	r1, [r7, #10]
 800375a:	4413      	add	r3, r2
 800375c:	2236      	movs	r2, #54	; 0x36
 800375e:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = 0x04;
 8003762:	4b35      	ldr	r3, [pc, #212]	; (8003838 <send_DHCP_DECLINE+0x290>)
 8003764:	681a      	ldr	r2, [r3, #0]
 8003766:	897b      	ldrh	r3, [r7, #10]
 8003768:	1c59      	adds	r1, r3, #1
 800376a:	8179      	strh	r1, [r7, #10]
 800376c:	4413      	add	r3, r2
 800376e:	2204      	movs	r2, #4
 8003770:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_SIP[0];
 8003774:	4b30      	ldr	r3, [pc, #192]	; (8003838 <send_DHCP_DECLINE+0x290>)
 8003776:	681a      	ldr	r2, [r3, #0]
 8003778:	897b      	ldrh	r3, [r7, #10]
 800377a:	1c59      	adds	r1, r3, #1
 800377c:	8179      	strh	r1, [r7, #10]
 800377e:	4618      	mov	r0, r3
 8003780:	4b30      	ldr	r3, [pc, #192]	; (8003844 <send_DHCP_DECLINE+0x29c>)
 8003782:	7819      	ldrb	r1, [r3, #0]
 8003784:	1813      	adds	r3, r2, r0
 8003786:	460a      	mov	r2, r1
 8003788:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_SIP[1];
 800378c:	4b2a      	ldr	r3, [pc, #168]	; (8003838 <send_DHCP_DECLINE+0x290>)
 800378e:	681a      	ldr	r2, [r3, #0]
 8003790:	897b      	ldrh	r3, [r7, #10]
 8003792:	1c59      	adds	r1, r3, #1
 8003794:	8179      	strh	r1, [r7, #10]
 8003796:	4618      	mov	r0, r3
 8003798:	4b2a      	ldr	r3, [pc, #168]	; (8003844 <send_DHCP_DECLINE+0x29c>)
 800379a:	7859      	ldrb	r1, [r3, #1]
 800379c:	1813      	adds	r3, r2, r0
 800379e:	460a      	mov	r2, r1
 80037a0:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_SIP[2];
 80037a4:	4b24      	ldr	r3, [pc, #144]	; (8003838 <send_DHCP_DECLINE+0x290>)
 80037a6:	681a      	ldr	r2, [r3, #0]
 80037a8:	897b      	ldrh	r3, [r7, #10]
 80037aa:	1c59      	adds	r1, r3, #1
 80037ac:	8179      	strh	r1, [r7, #10]
 80037ae:	4618      	mov	r0, r3
 80037b0:	4b24      	ldr	r3, [pc, #144]	; (8003844 <send_DHCP_DECLINE+0x29c>)
 80037b2:	7899      	ldrb	r1, [r3, #2]
 80037b4:	1813      	adds	r3, r2, r0
 80037b6:	460a      	mov	r2, r1
 80037b8:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_SIP[3];
 80037bc:	4b1e      	ldr	r3, [pc, #120]	; (8003838 <send_DHCP_DECLINE+0x290>)
 80037be:	681a      	ldr	r2, [r3, #0]
 80037c0:	897b      	ldrh	r3, [r7, #10]
 80037c2:	1c59      	adds	r1, r3, #1
 80037c4:	8179      	strh	r1, [r7, #10]
 80037c6:	4618      	mov	r0, r3
 80037c8:	4b1e      	ldr	r3, [pc, #120]	; (8003844 <send_DHCP_DECLINE+0x29c>)
 80037ca:	78d9      	ldrb	r1, [r3, #3]
 80037cc:	1813      	adds	r3, r2, r0
 80037ce:	460a      	mov	r2, r1
 80037d0:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec

	pDHCPMSG->OPT[k++] = endOption;
 80037d4:	4b18      	ldr	r3, [pc, #96]	; (8003838 <send_DHCP_DECLINE+0x290>)
 80037d6:	681a      	ldr	r2, [r3, #0]
 80037d8:	897b      	ldrh	r3, [r7, #10]
 80037da:	1c59      	adds	r1, r3, #1
 80037dc:	8179      	strh	r1, [r7, #10]
 80037de:	4413      	add	r3, r2
 80037e0:	22ff      	movs	r2, #255	; 0xff
 80037e2:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec

	for (i = k; i < OPT_SIZE; i++) pDHCPMSG->OPT[i] = 0;
 80037e6:	897b      	ldrh	r3, [r7, #10]
 80037e8:	60fb      	str	r3, [r7, #12]
 80037ea:	e009      	b.n	8003800 <send_DHCP_DECLINE+0x258>
 80037ec:	4b12      	ldr	r3, [pc, #72]	; (8003838 <send_DHCP_DECLINE+0x290>)
 80037ee:	681a      	ldr	r2, [r3, #0]
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	4413      	add	r3, r2
 80037f4:	33ec      	adds	r3, #236	; 0xec
 80037f6:	2200      	movs	r2, #0
 80037f8:	701a      	strb	r2, [r3, #0]
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	3301      	adds	r3, #1
 80037fe:	60fb      	str	r3, [r7, #12]
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	f5b3 7f9c 	cmp.w	r3, #312	; 0x138
 8003806:	dbf1      	blt.n	80037ec <send_DHCP_DECLINE+0x244>

	//send broadcasting packet
	ip[0] = 0xFF;
 8003808:	23ff      	movs	r3, #255	; 0xff
 800380a:	713b      	strb	r3, [r7, #4]
	ip[1] = 0xFF;
 800380c:	23ff      	movs	r3, #255	; 0xff
 800380e:	717b      	strb	r3, [r7, #5]
	ip[2] = 0xFF;
 8003810:	23ff      	movs	r3, #255	; 0xff
 8003812:	71bb      	strb	r3, [r7, #6]
	ip[3] = 0xFF;
 8003814:	23ff      	movs	r3, #255	; 0xff
 8003816:	71fb      	strb	r3, [r7, #7]

#ifdef _DHCP_DEBUG_
	printf("\r\n> Send DHCP_DECLINE\r\n");
#endif

	sendto(DHCP_SOCKET, (uint8_t *)pDHCPMSG, RIP_MSG_SIZE, ip, DHCP_SERVER_PORT);
 8003818:	4b0b      	ldr	r3, [pc, #44]	; (8003848 <send_DHCP_DECLINE+0x2a0>)
 800381a:	7818      	ldrb	r0, [r3, #0]
 800381c:	4b06      	ldr	r3, [pc, #24]	; (8003838 <send_DHCP_DECLINE+0x290>)
 800381e:	6819      	ldr	r1, [r3, #0]
 8003820:	1d3b      	adds	r3, r7, #4
 8003822:	2243      	movs	r2, #67	; 0x43
 8003824:	9200      	str	r2, [sp, #0]
 8003826:	f44f 7209 	mov.w	r2, #548	; 0x224
 800382a:	f003 f9f5 	bl	8006c18 <sendto>
}
 800382e:	bf00      	nop
 8003830:	3710      	adds	r7, #16
 8003832:	46bd      	mov	sp, r7
 8003834:	bd80      	pop	{r7, pc}
 8003836:	bf00      	nop
 8003838:	200006fc 	.word	0x200006fc
 800383c:	20000700 	.word	0x20000700
 8003840:	200005d8 	.word	0x200005d8
 8003844:	200005cc 	.word	0x200005cc
 8003848:	200005c8 	.word	0x200005c8

0800384c <parseDHCPMSG>:

/* PARSE REPLY pDHCPMSG */
int8_t parseDHCPMSG(void)
{
 800384c:	b590      	push	{r4, r7, lr}
 800384e:	b08b      	sub	sp, #44	; 0x2c
 8003850:	af02      	add	r7, sp, #8
	uint16_t  svr_port;
	uint16_t len;

	uint8_t * p;
	uint8_t * e;
	uint8_t type = 0;
 8003852:	2300      	movs	r3, #0
 8003854:	76fb      	strb	r3, [r7, #27]
	uint8_t opt_len;
   
   if((len = getSn_RX_RSR(DHCP_SOCKET)) > 0)
 8003856:	4ba7      	ldr	r3, [pc, #668]	; (8003af4 <parseDHCPMSG+0x2a8>)
 8003858:	781b      	ldrb	r3, [r3, #0]
 800385a:	4618      	mov	r0, r3
 800385c:	f005 fdf9 	bl	8009452 <getSn_RX_RSR>
 8003860:	4603      	mov	r3, r0
 8003862:	827b      	strh	r3, [r7, #18]
 8003864:	8a7b      	ldrh	r3, [r7, #18]
 8003866:	2b00      	cmp	r3, #0
 8003868:	d011      	beq.n	800388e <parseDHCPMSG+0x42>
   {
   	len = recvfrom(DHCP_SOCKET, (uint8_t *)pDHCPMSG, len, svr_addr, &svr_port);
 800386a:	4ba2      	ldr	r3, [pc, #648]	; (8003af4 <parseDHCPMSG+0x2a8>)
 800386c:	7818      	ldrb	r0, [r3, #0]
 800386e:	4ba2      	ldr	r3, [pc, #648]	; (8003af8 <parseDHCPMSG+0x2ac>)
 8003870:	6819      	ldr	r1, [r3, #0]
 8003872:	1d3c      	adds	r4, r7, #4
 8003874:	8a7a      	ldrh	r2, [r7, #18]
 8003876:	1cbb      	adds	r3, r7, #2
 8003878:	9300      	str	r3, [sp, #0]
 800387a:	4623      	mov	r3, r4
 800387c:	f003 fb02 	bl	8006e84 <recvfrom>
 8003880:	4603      	mov	r3, r0
 8003882:	827b      	strh	r3, [r7, #18]
      printf("DHCP message : %d.%d.%d.%d(%d) %d received. \r\n",svr_addr[0],svr_addr[1],svr_addr[2], svr_addr[3],svr_port, len);
   #endif   
   } else {
	   return 0;
   }
	if (svr_port == DHCP_SERVER_PORT) {
 8003884:	887b      	ldrh	r3, [r7, #2]
 8003886:	2b43      	cmp	r3, #67	; 0x43
 8003888:	f040 8266 	bne.w	8003d58 <parseDHCPMSG+0x50c>
 800388c:	e001      	b.n	8003892 <parseDHCPMSG+0x46>
	   return 0;
 800388e:	2300      	movs	r3, #0
 8003890:	e264      	b.n	8003d5c <parseDHCPMSG+0x510>
      // compare mac address
		if ( (pDHCPMSG->chaddr[0] != DHCP_CHADDR[0]) || (pDHCPMSG->chaddr[1] != DHCP_CHADDR[1]) ||
 8003892:	4b99      	ldr	r3, [pc, #612]	; (8003af8 <parseDHCPMSG+0x2ac>)
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	7f1a      	ldrb	r2, [r3, #28]
 8003898:	4b98      	ldr	r3, [pc, #608]	; (8003afc <parseDHCPMSG+0x2b0>)
 800389a:	781b      	ldrb	r3, [r3, #0]
 800389c:	429a      	cmp	r2, r3
 800389e:	d124      	bne.n	80038ea <parseDHCPMSG+0x9e>
 80038a0:	4b95      	ldr	r3, [pc, #596]	; (8003af8 <parseDHCPMSG+0x2ac>)
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	7f5a      	ldrb	r2, [r3, #29]
 80038a6:	4b95      	ldr	r3, [pc, #596]	; (8003afc <parseDHCPMSG+0x2b0>)
 80038a8:	785b      	ldrb	r3, [r3, #1]
 80038aa:	429a      	cmp	r2, r3
 80038ac:	d11d      	bne.n	80038ea <parseDHCPMSG+0x9e>
		     (pDHCPMSG->chaddr[2] != DHCP_CHADDR[2]) || (pDHCPMSG->chaddr[3] != DHCP_CHADDR[3]) ||
 80038ae:	4b92      	ldr	r3, [pc, #584]	; (8003af8 <parseDHCPMSG+0x2ac>)
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	7f9a      	ldrb	r2, [r3, #30]
 80038b4:	4b91      	ldr	r3, [pc, #580]	; (8003afc <parseDHCPMSG+0x2b0>)
 80038b6:	789b      	ldrb	r3, [r3, #2]
		if ( (pDHCPMSG->chaddr[0] != DHCP_CHADDR[0]) || (pDHCPMSG->chaddr[1] != DHCP_CHADDR[1]) ||
 80038b8:	429a      	cmp	r2, r3
 80038ba:	d116      	bne.n	80038ea <parseDHCPMSG+0x9e>
		     (pDHCPMSG->chaddr[2] != DHCP_CHADDR[2]) || (pDHCPMSG->chaddr[3] != DHCP_CHADDR[3]) ||
 80038bc:	4b8e      	ldr	r3, [pc, #568]	; (8003af8 <parseDHCPMSG+0x2ac>)
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	7fda      	ldrb	r2, [r3, #31]
 80038c2:	4b8e      	ldr	r3, [pc, #568]	; (8003afc <parseDHCPMSG+0x2b0>)
 80038c4:	78db      	ldrb	r3, [r3, #3]
 80038c6:	429a      	cmp	r2, r3
 80038c8:	d10f      	bne.n	80038ea <parseDHCPMSG+0x9e>
		     (pDHCPMSG->chaddr[4] != DHCP_CHADDR[4]) || (pDHCPMSG->chaddr[5] != DHCP_CHADDR[5])   )
 80038ca:	4b8b      	ldr	r3, [pc, #556]	; (8003af8 <parseDHCPMSG+0x2ac>)
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	f893 2020 	ldrb.w	r2, [r3, #32]
 80038d2:	4b8a      	ldr	r3, [pc, #552]	; (8003afc <parseDHCPMSG+0x2b0>)
 80038d4:	791b      	ldrb	r3, [r3, #4]
		     (pDHCPMSG->chaddr[2] != DHCP_CHADDR[2]) || (pDHCPMSG->chaddr[3] != DHCP_CHADDR[3]) ||
 80038d6:	429a      	cmp	r2, r3
 80038d8:	d107      	bne.n	80038ea <parseDHCPMSG+0x9e>
		     (pDHCPMSG->chaddr[4] != DHCP_CHADDR[4]) || (pDHCPMSG->chaddr[5] != DHCP_CHADDR[5])   )
 80038da:	4b87      	ldr	r3, [pc, #540]	; (8003af8 <parseDHCPMSG+0x2ac>)
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 80038e2:	4b86      	ldr	r3, [pc, #536]	; (8003afc <parseDHCPMSG+0x2b0>)
 80038e4:	795b      	ldrb	r3, [r3, #5]
 80038e6:	429a      	cmp	r2, r3
 80038e8:	d001      	beq.n	80038ee <parseDHCPMSG+0xa2>
		{
#ifdef _DHCP_DEBUG_
            printf("No My DHCP Message. This message is ignored.\r\n");
#endif
         return 0;
 80038ea:	2300      	movs	r3, #0
 80038ec:	e236      	b.n	8003d5c <parseDHCPMSG+0x510>
		}
        //compare DHCP server ip address
        if((DHCP_SIP[0]!=0) || (DHCP_SIP[1]!=0) || (DHCP_SIP[2]!=0) || (DHCP_SIP[3]!=0)){
 80038ee:	4b84      	ldr	r3, [pc, #528]	; (8003b00 <parseDHCPMSG+0x2b4>)
 80038f0:	781b      	ldrb	r3, [r3, #0]
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d10b      	bne.n	800390e <parseDHCPMSG+0xc2>
 80038f6:	4b82      	ldr	r3, [pc, #520]	; (8003b00 <parseDHCPMSG+0x2b4>)
 80038f8:	785b      	ldrb	r3, [r3, #1]
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d107      	bne.n	800390e <parseDHCPMSG+0xc2>
 80038fe:	4b80      	ldr	r3, [pc, #512]	; (8003b00 <parseDHCPMSG+0x2b4>)
 8003900:	789b      	ldrb	r3, [r3, #2]
 8003902:	2b00      	cmp	r3, #0
 8003904:	d103      	bne.n	800390e <parseDHCPMSG+0xc2>
 8003906:	4b7e      	ldr	r3, [pc, #504]	; (8003b00 <parseDHCPMSG+0x2b4>)
 8003908:	78db      	ldrb	r3, [r3, #3]
 800390a:	2b00      	cmp	r3, #0
 800390c:	d029      	beq.n	8003962 <parseDHCPMSG+0x116>
            if( ((svr_addr[0]!=DHCP_SIP[0])|| (svr_addr[1]!=DHCP_SIP[1])|| (svr_addr[2]!=DHCP_SIP[2])|| (svr_addr[3]!=DHCP_SIP[3])) &&
 800390e:	793a      	ldrb	r2, [r7, #4]
 8003910:	4b7b      	ldr	r3, [pc, #492]	; (8003b00 <parseDHCPMSG+0x2b4>)
 8003912:	781b      	ldrb	r3, [r3, #0]
 8003914:	429a      	cmp	r2, r3
 8003916:	d10e      	bne.n	8003936 <parseDHCPMSG+0xea>
 8003918:	797a      	ldrb	r2, [r7, #5]
 800391a:	4b79      	ldr	r3, [pc, #484]	; (8003b00 <parseDHCPMSG+0x2b4>)
 800391c:	785b      	ldrb	r3, [r3, #1]
 800391e:	429a      	cmp	r2, r3
 8003920:	d109      	bne.n	8003936 <parseDHCPMSG+0xea>
 8003922:	79ba      	ldrb	r2, [r7, #6]
 8003924:	4b76      	ldr	r3, [pc, #472]	; (8003b00 <parseDHCPMSG+0x2b4>)
 8003926:	789b      	ldrb	r3, [r3, #2]
 8003928:	429a      	cmp	r2, r3
 800392a:	d104      	bne.n	8003936 <parseDHCPMSG+0xea>
 800392c:	79fa      	ldrb	r2, [r7, #7]
 800392e:	4b74      	ldr	r3, [pc, #464]	; (8003b00 <parseDHCPMSG+0x2b4>)
 8003930:	78db      	ldrb	r3, [r3, #3]
 8003932:	429a      	cmp	r2, r3
 8003934:	d015      	beq.n	8003962 <parseDHCPMSG+0x116>
                ((svr_addr[0]!=DHCP_REAL_SIP[0])|| (svr_addr[1]!=DHCP_REAL_SIP[1])|| (svr_addr[2]!=DHCP_REAL_SIP[2])|| (svr_addr[3]!=DHCP_REAL_SIP[3]))  )
 8003936:	793a      	ldrb	r2, [r7, #4]
 8003938:	4b72      	ldr	r3, [pc, #456]	; (8003b04 <parseDHCPMSG+0x2b8>)
 800393a:	781b      	ldrb	r3, [r3, #0]
            if( ((svr_addr[0]!=DHCP_SIP[0])|| (svr_addr[1]!=DHCP_SIP[1])|| (svr_addr[2]!=DHCP_SIP[2])|| (svr_addr[3]!=DHCP_SIP[3])) &&
 800393c:	429a      	cmp	r2, r3
 800393e:	d10e      	bne.n	800395e <parseDHCPMSG+0x112>
                ((svr_addr[0]!=DHCP_REAL_SIP[0])|| (svr_addr[1]!=DHCP_REAL_SIP[1])|| (svr_addr[2]!=DHCP_REAL_SIP[2])|| (svr_addr[3]!=DHCP_REAL_SIP[3]))  )
 8003940:	797a      	ldrb	r2, [r7, #5]
 8003942:	4b70      	ldr	r3, [pc, #448]	; (8003b04 <parseDHCPMSG+0x2b8>)
 8003944:	785b      	ldrb	r3, [r3, #1]
 8003946:	429a      	cmp	r2, r3
 8003948:	d109      	bne.n	800395e <parseDHCPMSG+0x112>
 800394a:	79ba      	ldrb	r2, [r7, #6]
 800394c:	4b6d      	ldr	r3, [pc, #436]	; (8003b04 <parseDHCPMSG+0x2b8>)
 800394e:	789b      	ldrb	r3, [r3, #2]
 8003950:	429a      	cmp	r2, r3
 8003952:	d104      	bne.n	800395e <parseDHCPMSG+0x112>
 8003954:	79fa      	ldrb	r2, [r7, #7]
 8003956:	4b6b      	ldr	r3, [pc, #428]	; (8003b04 <parseDHCPMSG+0x2b8>)
 8003958:	78db      	ldrb	r3, [r3, #3]
 800395a:	429a      	cmp	r2, r3
 800395c:	d001      	beq.n	8003962 <parseDHCPMSG+0x116>
            {
#ifdef _DHCP_DEBUG_
                printf("Another DHCP sever send a response message. This is ignored.\r\n");
#endif
                return 0;
 800395e:	2300      	movs	r3, #0
 8003960:	e1fc      	b.n	8003d5c <parseDHCPMSG+0x510>
            }
        }
		p = (uint8_t *)(&pDHCPMSG->op);
 8003962:	4b65      	ldr	r3, [pc, #404]	; (8003af8 <parseDHCPMSG+0x2ac>)
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	61fb      	str	r3, [r7, #28]
		p = p + 240;      // 240 = sizeof(RIP_MSG) + MAGIC_COOKIE size in RIP_MSG.opt - sizeof(RIP_MSG.opt)
 8003968:	69fb      	ldr	r3, [r7, #28]
 800396a:	33f0      	adds	r3, #240	; 0xf0
 800396c:	61fb      	str	r3, [r7, #28]
		e = p + (len - 240);
 800396e:	8a7b      	ldrh	r3, [r7, #18]
 8003970:	3bf0      	subs	r3, #240	; 0xf0
 8003972:	69fa      	ldr	r2, [r7, #28]
 8003974:	4413      	add	r3, r2
 8003976:	60fb      	str	r3, [r7, #12]

		while ( p < e ) {
 8003978:	e1e9      	b.n	8003d4e <parseDHCPMSG+0x502>

			switch ( *p ) {
 800397a:	69fb      	ldr	r3, [r7, #28]
 800397c:	781b      	ldrb	r3, [r3, #0]
 800397e:	2bff      	cmp	r3, #255	; 0xff
 8003980:	f000 8085 	beq.w	8003a8e <parseDHCPMSG+0x242>
 8003984:	2bff      	cmp	r3, #255	; 0xff
 8003986:	f300 81d5 	bgt.w	8003d34 <parseDHCPMSG+0x4e8>
 800398a:	2be1      	cmp	r3, #225	; 0xe1
 800398c:	f000 81b1 	beq.w	8003cf2 <parseDHCPMSG+0x4a6>
 8003990:	2be1      	cmp	r3, #225	; 0xe1
 8003992:	f300 81cf 	bgt.w	8003d34 <parseDHCPMSG+0x4e8>
 8003996:	2b36      	cmp	r3, #54	; 0x36
 8003998:	dc76      	bgt.n	8003a88 <parseDHCPMSG+0x23c>
 800399a:	2b00      	cmp	r3, #0
 800399c:	f2c0 81ca 	blt.w	8003d34 <parseDHCPMSG+0x4e8>
 80039a0:	2b36      	cmp	r3, #54	; 0x36
 80039a2:	f200 81c7 	bhi.w	8003d34 <parseDHCPMSG+0x4e8>
 80039a6:	a201      	add	r2, pc, #4	; (adr r2, 80039ac <parseDHCPMSG+0x160>)
 80039a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039ac:	08003a95 	.word	0x08003a95
 80039b0:	08003ab5 	.word	0x08003ab5
 80039b4:	08003d35 	.word	0x08003d35
 80039b8:	08003b0d 	.word	0x08003b0d
 80039bc:	08003bf1 	.word	0x08003bf1
 80039c0:	08003d35 	.word	0x08003d35
 80039c4:	08003ba5 	.word	0x08003ba5
 80039c8:	08003d35 	.word	0x08003d35
 80039cc:	08003d35 	.word	0x08003d35
 80039d0:	08003d35 	.word	0x08003d35
 80039d4:	08003d35 	.word	0x08003d35
 80039d8:	08003d35 	.word	0x08003d35
 80039dc:	08003d35 	.word	0x08003d35
 80039e0:	08003d35 	.word	0x08003d35
 80039e4:	08003d35 	.word	0x08003d35
 80039e8:	08003d35 	.word	0x08003d35
 80039ec:	08003d35 	.word	0x08003d35
 80039f0:	08003d35 	.word	0x08003d35
 80039f4:	08003d35 	.word	0x08003d35
 80039f8:	08003d35 	.word	0x08003d35
 80039fc:	08003d35 	.word	0x08003d35
 8003a00:	08003d35 	.word	0x08003d35
 8003a04:	08003d35 	.word	0x08003d35
 8003a08:	08003d35 	.word	0x08003d35
 8003a0c:	08003d35 	.word	0x08003d35
 8003a10:	08003d35 	.word	0x08003d35
 8003a14:	08003d35 	.word	0x08003d35
 8003a18:	08003d35 	.word	0x08003d35
 8003a1c:	08003d35 	.word	0x08003d35
 8003a20:	08003d35 	.word	0x08003d35
 8003a24:	08003d35 	.word	0x08003d35
 8003a28:	08003d35 	.word	0x08003d35
 8003a2c:	08003d35 	.word	0x08003d35
 8003a30:	08003d35 	.word	0x08003d35
 8003a34:	08003d35 	.word	0x08003d35
 8003a38:	08003d35 	.word	0x08003d35
 8003a3c:	08003d35 	.word	0x08003d35
 8003a40:	08003d35 	.word	0x08003d35
 8003a44:	08003d35 	.word	0x08003d35
 8003a48:	08003d35 	.word	0x08003d35
 8003a4c:	08003d35 	.word	0x08003d35
 8003a50:	08003d35 	.word	0x08003d35
 8003a54:	08003d35 	.word	0x08003d35
 8003a58:	08003d35 	.word	0x08003d35
 8003a5c:	08003d35 	.word	0x08003d35
 8003a60:	08003d35 	.word	0x08003d35
 8003a64:	08003d35 	.word	0x08003d35
 8003a68:	08003d35 	.word	0x08003d35
 8003a6c:	08003d35 	.word	0x08003d35
 8003a70:	08003d35 	.word	0x08003d35
 8003a74:	08003d35 	.word	0x08003d35
 8003a78:	08003c3d 	.word	0x08003c3d
 8003a7c:	08003d35 	.word	0x08003d35
 8003a80:	08003a9d 	.word	0x08003a9d
 8003a84:	08003c99 	.word	0x08003c99
 8003a88:	2be0      	cmp	r3, #224	; 0xe0
 8003a8a:	d065      	beq.n	8003b58 <parseDHCPMSG+0x30c>
 8003a8c:	e152      	b.n	8003d34 <parseDHCPMSG+0x4e8>

   			case endOption :
   			   p = e;   // for break while(p < e)
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	61fb      	str	r3, [r7, #28]
   				break;
 8003a92:	e15c      	b.n	8003d4e <parseDHCPMSG+0x502>
            case padOption :
   				p++;
 8003a94:	69fb      	ldr	r3, [r7, #28]
 8003a96:	3301      	adds	r3, #1
 8003a98:	61fb      	str	r3, [r7, #28]
   				break;
 8003a9a:	e158      	b.n	8003d4e <parseDHCPMSG+0x502>
   			case dhcpMessageType :
   				p++;
 8003a9c:	69fb      	ldr	r3, [r7, #28]
 8003a9e:	3301      	adds	r3, #1
 8003aa0:	61fb      	str	r3, [r7, #28]
   				p++;
 8003aa2:	69fb      	ldr	r3, [r7, #28]
 8003aa4:	3301      	adds	r3, #1
 8003aa6:	61fb      	str	r3, [r7, #28]
   				type = *p++;
 8003aa8:	69fb      	ldr	r3, [r7, #28]
 8003aaa:	1c5a      	adds	r2, r3, #1
 8003aac:	61fa      	str	r2, [r7, #28]
 8003aae:	781b      	ldrb	r3, [r3, #0]
 8003ab0:	76fb      	strb	r3, [r7, #27]
   				break;
 8003ab2:	e14c      	b.n	8003d4e <parseDHCPMSG+0x502>
   			case subnetMask :
   				p++;
 8003ab4:	69fb      	ldr	r3, [r7, #28]
 8003ab6:	3301      	adds	r3, #1
 8003ab8:	61fb      	str	r3, [r7, #28]
   				p++;
 8003aba:	69fb      	ldr	r3, [r7, #28]
 8003abc:	3301      	adds	r3, #1
 8003abe:	61fb      	str	r3, [r7, #28]
   				DHCP_allocated_sn[0] = *p++;
 8003ac0:	69fb      	ldr	r3, [r7, #28]
 8003ac2:	1c5a      	adds	r2, r3, #1
 8003ac4:	61fa      	str	r2, [r7, #28]
 8003ac6:	781a      	ldrb	r2, [r3, #0]
 8003ac8:	4b0f      	ldr	r3, [pc, #60]	; (8003b08 <parseDHCPMSG+0x2bc>)
 8003aca:	701a      	strb	r2, [r3, #0]
   				DHCP_allocated_sn[1] = *p++;
 8003acc:	69fb      	ldr	r3, [r7, #28]
 8003ace:	1c5a      	adds	r2, r3, #1
 8003ad0:	61fa      	str	r2, [r7, #28]
 8003ad2:	781a      	ldrb	r2, [r3, #0]
 8003ad4:	4b0c      	ldr	r3, [pc, #48]	; (8003b08 <parseDHCPMSG+0x2bc>)
 8003ad6:	705a      	strb	r2, [r3, #1]
   				DHCP_allocated_sn[2] = *p++;
 8003ad8:	69fb      	ldr	r3, [r7, #28]
 8003ada:	1c5a      	adds	r2, r3, #1
 8003adc:	61fa      	str	r2, [r7, #28]
 8003ade:	781a      	ldrb	r2, [r3, #0]
 8003ae0:	4b09      	ldr	r3, [pc, #36]	; (8003b08 <parseDHCPMSG+0x2bc>)
 8003ae2:	709a      	strb	r2, [r3, #2]
   				DHCP_allocated_sn[3] = *p++;
 8003ae4:	69fb      	ldr	r3, [r7, #28]
 8003ae6:	1c5a      	adds	r2, r3, #1
 8003ae8:	61fa      	str	r2, [r7, #28]
 8003aea:	781a      	ldrb	r2, [r3, #0]
 8003aec:	4b06      	ldr	r3, [pc, #24]	; (8003b08 <parseDHCPMSG+0x2bc>)
 8003aee:	70da      	strb	r2, [r3, #3]
   				break;
 8003af0:	e12d      	b.n	8003d4e <parseDHCPMSG+0x502>
 8003af2:	bf00      	nop
 8003af4:	200005c8 	.word	0x200005c8
 8003af8:	200006fc 	.word	0x200006fc
 8003afc:	20000700 	.word	0x20000700
 8003b00:	200005cc 	.word	0x200005cc
 8003b04:	200005d0 	.word	0x200005d0
 8003b08:	200005e0 	.word	0x200005e0
   			case routersOnSubnet :
   				p++;
 8003b0c:	69fb      	ldr	r3, [r7, #28]
 8003b0e:	3301      	adds	r3, #1
 8003b10:	61fb      	str	r3, [r7, #28]
   				opt_len = *p++;       
 8003b12:	69fb      	ldr	r3, [r7, #28]
 8003b14:	1c5a      	adds	r2, r3, #1
 8003b16:	61fa      	str	r2, [r7, #28]
 8003b18:	781b      	ldrb	r3, [r3, #0]
 8003b1a:	72fb      	strb	r3, [r7, #11]
   				DHCP_allocated_gw[0] = *p++;
 8003b1c:	69fb      	ldr	r3, [r7, #28]
 8003b1e:	1c5a      	adds	r2, r3, #1
 8003b20:	61fa      	str	r2, [r7, #28]
 8003b22:	781a      	ldrb	r2, [r3, #0]
 8003b24:	4b8f      	ldr	r3, [pc, #572]	; (8003d64 <parseDHCPMSG+0x518>)
 8003b26:	701a      	strb	r2, [r3, #0]
   				DHCP_allocated_gw[1] = *p++;
 8003b28:	69fb      	ldr	r3, [r7, #28]
 8003b2a:	1c5a      	adds	r2, r3, #1
 8003b2c:	61fa      	str	r2, [r7, #28]
 8003b2e:	781a      	ldrb	r2, [r3, #0]
 8003b30:	4b8c      	ldr	r3, [pc, #560]	; (8003d64 <parseDHCPMSG+0x518>)
 8003b32:	705a      	strb	r2, [r3, #1]
   				DHCP_allocated_gw[2] = *p++;
 8003b34:	69fb      	ldr	r3, [r7, #28]
 8003b36:	1c5a      	adds	r2, r3, #1
 8003b38:	61fa      	str	r2, [r7, #28]
 8003b3a:	781a      	ldrb	r2, [r3, #0]
 8003b3c:	4b89      	ldr	r3, [pc, #548]	; (8003d64 <parseDHCPMSG+0x518>)
 8003b3e:	709a      	strb	r2, [r3, #2]
   				DHCP_allocated_gw[3] = *p++;
 8003b40:	69fb      	ldr	r3, [r7, #28]
 8003b42:	1c5a      	adds	r2, r3, #1
 8003b44:	61fa      	str	r2, [r7, #28]
 8003b46:	781a      	ldrb	r2, [r3, #0]
 8003b48:	4b86      	ldr	r3, [pc, #536]	; (8003d64 <parseDHCPMSG+0x518>)
 8003b4a:	70da      	strb	r2, [r3, #3]
   				p = p + (opt_len - 4);
 8003b4c:	7afb      	ldrb	r3, [r7, #11]
 8003b4e:	3b04      	subs	r3, #4
 8003b50:	69fa      	ldr	r2, [r7, #28]
 8003b52:	4413      	add	r3, r2
 8003b54:	61fb      	str	r3, [r7, #28]
   				break;
 8003b56:	e0fa      	b.n	8003d4e <parseDHCPMSG+0x502>
   			case dhcpZabbixServerIP :
   				p++;
 8003b58:	69fb      	ldr	r3, [r7, #28]
 8003b5a:	3301      	adds	r3, #1
 8003b5c:	61fb      	str	r3, [r7, #28]
   				opt_len = *p++;
 8003b5e:	69fb      	ldr	r3, [r7, #28]
 8003b60:	1c5a      	adds	r2, r3, #1
 8003b62:	61fa      	str	r2, [r7, #28]
 8003b64:	781b      	ldrb	r3, [r3, #0]
 8003b66:	72fb      	strb	r3, [r7, #11]
   				DHCP_allocated_zabbix[0] = *p++;
 8003b68:	69fb      	ldr	r3, [r7, #28]
 8003b6a:	1c5a      	adds	r2, r3, #1
 8003b6c:	61fa      	str	r2, [r7, #28]
 8003b6e:	781a      	ldrb	r2, [r3, #0]
 8003b70:	4b7d      	ldr	r3, [pc, #500]	; (8003d68 <parseDHCPMSG+0x51c>)
 8003b72:	701a      	strb	r2, [r3, #0]
   				DHCP_allocated_zabbix[1] = *p++;
 8003b74:	69fb      	ldr	r3, [r7, #28]
 8003b76:	1c5a      	adds	r2, r3, #1
 8003b78:	61fa      	str	r2, [r7, #28]
 8003b7a:	781a      	ldrb	r2, [r3, #0]
 8003b7c:	4b7a      	ldr	r3, [pc, #488]	; (8003d68 <parseDHCPMSG+0x51c>)
 8003b7e:	705a      	strb	r2, [r3, #1]
   				DHCP_allocated_zabbix[2] = *p++;
 8003b80:	69fb      	ldr	r3, [r7, #28]
 8003b82:	1c5a      	adds	r2, r3, #1
 8003b84:	61fa      	str	r2, [r7, #28]
 8003b86:	781a      	ldrb	r2, [r3, #0]
 8003b88:	4b77      	ldr	r3, [pc, #476]	; (8003d68 <parseDHCPMSG+0x51c>)
 8003b8a:	709a      	strb	r2, [r3, #2]
   				DHCP_allocated_zabbix[3] = *p++;
 8003b8c:	69fb      	ldr	r3, [r7, #28]
 8003b8e:	1c5a      	adds	r2, r3, #1
 8003b90:	61fa      	str	r2, [r7, #28]
 8003b92:	781a      	ldrb	r2, [r3, #0]
 8003b94:	4b74      	ldr	r3, [pc, #464]	; (8003d68 <parseDHCPMSG+0x51c>)
 8003b96:	70da      	strb	r2, [r3, #3]
   				p = p + (opt_len - 4);
 8003b98:	7afb      	ldrb	r3, [r7, #11]
 8003b9a:	3b04      	subs	r3, #4
 8003b9c:	69fa      	ldr	r2, [r7, #28]
 8003b9e:	4413      	add	r3, r2
 8003ba0:	61fb      	str	r3, [r7, #28]
   				break;
 8003ba2:	e0d4      	b.n	8003d4e <parseDHCPMSG+0x502>
   			case dns :
   				p++;                  
 8003ba4:	69fb      	ldr	r3, [r7, #28]
 8003ba6:	3301      	adds	r3, #1
 8003ba8:	61fb      	str	r3, [r7, #28]
   				opt_len = *p++;       
 8003baa:	69fb      	ldr	r3, [r7, #28]
 8003bac:	1c5a      	adds	r2, r3, #1
 8003bae:	61fa      	str	r2, [r7, #28]
 8003bb0:	781b      	ldrb	r3, [r3, #0]
 8003bb2:	72fb      	strb	r3, [r7, #11]
   				DHCP_allocated_dns[0] = *p++;
 8003bb4:	69fb      	ldr	r3, [r7, #28]
 8003bb6:	1c5a      	adds	r2, r3, #1
 8003bb8:	61fa      	str	r2, [r7, #28]
 8003bba:	781a      	ldrb	r2, [r3, #0]
 8003bbc:	4b6b      	ldr	r3, [pc, #428]	; (8003d6c <parseDHCPMSG+0x520>)
 8003bbe:	701a      	strb	r2, [r3, #0]
   				DHCP_allocated_dns[1] = *p++;
 8003bc0:	69fb      	ldr	r3, [r7, #28]
 8003bc2:	1c5a      	adds	r2, r3, #1
 8003bc4:	61fa      	str	r2, [r7, #28]
 8003bc6:	781a      	ldrb	r2, [r3, #0]
 8003bc8:	4b68      	ldr	r3, [pc, #416]	; (8003d6c <parseDHCPMSG+0x520>)
 8003bca:	705a      	strb	r2, [r3, #1]
   				DHCP_allocated_dns[2] = *p++;
 8003bcc:	69fb      	ldr	r3, [r7, #28]
 8003bce:	1c5a      	adds	r2, r3, #1
 8003bd0:	61fa      	str	r2, [r7, #28]
 8003bd2:	781a      	ldrb	r2, [r3, #0]
 8003bd4:	4b65      	ldr	r3, [pc, #404]	; (8003d6c <parseDHCPMSG+0x520>)
 8003bd6:	709a      	strb	r2, [r3, #2]
   				DHCP_allocated_dns[3] = *p++;
 8003bd8:	69fb      	ldr	r3, [r7, #28]
 8003bda:	1c5a      	adds	r2, r3, #1
 8003bdc:	61fa      	str	r2, [r7, #28]
 8003bde:	781a      	ldrb	r2, [r3, #0]
 8003be0:	4b62      	ldr	r3, [pc, #392]	; (8003d6c <parseDHCPMSG+0x520>)
 8003be2:	70da      	strb	r2, [r3, #3]
   				p = p + (opt_len - 4);
 8003be4:	7afb      	ldrb	r3, [r7, #11]
 8003be6:	3b04      	subs	r3, #4
 8003be8:	69fa      	ldr	r2, [r7, #28]
 8003bea:	4413      	add	r3, r2
 8003bec:	61fb      	str	r3, [r7, #28]
   				break;
 8003bee:	e0ae      	b.n	8003d4e <parseDHCPMSG+0x502>
   			case timeServer :
   				p++;
 8003bf0:	69fb      	ldr	r3, [r7, #28]
 8003bf2:	3301      	adds	r3, #1
 8003bf4:	61fb      	str	r3, [r7, #28]
   				opt_len = *p++;
 8003bf6:	69fb      	ldr	r3, [r7, #28]
 8003bf8:	1c5a      	adds	r2, r3, #1
 8003bfa:	61fa      	str	r2, [r7, #28]
 8003bfc:	781b      	ldrb	r3, [r3, #0]
 8003bfe:	72fb      	strb	r3, [r7, #11]
   				DHCP_allocated_time[0] = *p++;
 8003c00:	69fb      	ldr	r3, [r7, #28]
 8003c02:	1c5a      	adds	r2, r3, #1
 8003c04:	61fa      	str	r2, [r7, #28]
 8003c06:	781a      	ldrb	r2, [r3, #0]
 8003c08:	4b59      	ldr	r3, [pc, #356]	; (8003d70 <parseDHCPMSG+0x524>)
 8003c0a:	701a      	strb	r2, [r3, #0]
   				DHCP_allocated_time[1] = *p++;
 8003c0c:	69fb      	ldr	r3, [r7, #28]
 8003c0e:	1c5a      	adds	r2, r3, #1
 8003c10:	61fa      	str	r2, [r7, #28]
 8003c12:	781a      	ldrb	r2, [r3, #0]
 8003c14:	4b56      	ldr	r3, [pc, #344]	; (8003d70 <parseDHCPMSG+0x524>)
 8003c16:	705a      	strb	r2, [r3, #1]
   				DHCP_allocated_time[2] = *p++;
 8003c18:	69fb      	ldr	r3, [r7, #28]
 8003c1a:	1c5a      	adds	r2, r3, #1
 8003c1c:	61fa      	str	r2, [r7, #28]
 8003c1e:	781a      	ldrb	r2, [r3, #0]
 8003c20:	4b53      	ldr	r3, [pc, #332]	; (8003d70 <parseDHCPMSG+0x524>)
 8003c22:	709a      	strb	r2, [r3, #2]
   				DHCP_allocated_time[3] = *p++;
 8003c24:	69fb      	ldr	r3, [r7, #28]
 8003c26:	1c5a      	adds	r2, r3, #1
 8003c28:	61fa      	str	r2, [r7, #28]
 8003c2a:	781a      	ldrb	r2, [r3, #0]
 8003c2c:	4b50      	ldr	r3, [pc, #320]	; (8003d70 <parseDHCPMSG+0x524>)
 8003c2e:	70da      	strb	r2, [r3, #3]
   				p = p + (opt_len - 4);
 8003c30:	7afb      	ldrb	r3, [r7, #11]
 8003c32:	3b04      	subs	r3, #4
 8003c34:	69fa      	ldr	r2, [r7, #28]
 8003c36:	4413      	add	r3, r2
 8003c38:	61fb      	str	r3, [r7, #28]
   				break;
 8003c3a:	e088      	b.n	8003d4e <parseDHCPMSG+0x502>
   			case dhcpIPaddrLeaseTime :
   				p++;
 8003c3c:	69fb      	ldr	r3, [r7, #28]
 8003c3e:	3301      	adds	r3, #1
 8003c40:	61fb      	str	r3, [r7, #28]
   				opt_len = *p++;
 8003c42:	69fb      	ldr	r3, [r7, #28]
 8003c44:	1c5a      	adds	r2, r3, #1
 8003c46:	61fa      	str	r2, [r7, #28]
 8003c48:	781b      	ldrb	r3, [r3, #0]
 8003c4a:	72fb      	strb	r3, [r7, #11]
   				dhcp_lease_time  = *p++;
 8003c4c:	69fb      	ldr	r3, [r7, #28]
 8003c4e:	1c5a      	adds	r2, r3, #1
 8003c50:	61fa      	str	r2, [r7, #28]
 8003c52:	781b      	ldrb	r3, [r3, #0]
 8003c54:	461a      	mov	r2, r3
 8003c56:	4b47      	ldr	r3, [pc, #284]	; (8003d74 <parseDHCPMSG+0x528>)
 8003c58:	601a      	str	r2, [r3, #0]
   				dhcp_lease_time  = (dhcp_lease_time << 8) + *p++;
 8003c5a:	4b46      	ldr	r3, [pc, #280]	; (8003d74 <parseDHCPMSG+0x528>)
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	021a      	lsls	r2, r3, #8
 8003c60:	69fb      	ldr	r3, [r7, #28]
 8003c62:	1c59      	adds	r1, r3, #1
 8003c64:	61f9      	str	r1, [r7, #28]
 8003c66:	781b      	ldrb	r3, [r3, #0]
 8003c68:	4413      	add	r3, r2
 8003c6a:	4a42      	ldr	r2, [pc, #264]	; (8003d74 <parseDHCPMSG+0x528>)
 8003c6c:	6013      	str	r3, [r2, #0]
   				dhcp_lease_time  = (dhcp_lease_time << 8) + *p++;
 8003c6e:	4b41      	ldr	r3, [pc, #260]	; (8003d74 <parseDHCPMSG+0x528>)
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	021a      	lsls	r2, r3, #8
 8003c74:	69fb      	ldr	r3, [r7, #28]
 8003c76:	1c59      	adds	r1, r3, #1
 8003c78:	61f9      	str	r1, [r7, #28]
 8003c7a:	781b      	ldrb	r3, [r3, #0]
 8003c7c:	4413      	add	r3, r2
 8003c7e:	4a3d      	ldr	r2, [pc, #244]	; (8003d74 <parseDHCPMSG+0x528>)
 8003c80:	6013      	str	r3, [r2, #0]
   				dhcp_lease_time  = (dhcp_lease_time << 8) + *p++;
 8003c82:	4b3c      	ldr	r3, [pc, #240]	; (8003d74 <parseDHCPMSG+0x528>)
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	021a      	lsls	r2, r3, #8
 8003c88:	69fb      	ldr	r3, [r7, #28]
 8003c8a:	1c59      	adds	r1, r3, #1
 8003c8c:	61f9      	str	r1, [r7, #28]
 8003c8e:	781b      	ldrb	r3, [r3, #0]
 8003c90:	4413      	add	r3, r2
 8003c92:	4a38      	ldr	r2, [pc, #224]	; (8003d74 <parseDHCPMSG+0x528>)
 8003c94:	6013      	str	r3, [r2, #0]
            #ifdef _DHCP_DEBUG_  
               dhcp_lease_time = 10;
 				#endif
   				break;
 8003c96:	e05a      	b.n	8003d4e <parseDHCPMSG+0x502>
   			case dhcpServerIdentifier :
   				p++;
 8003c98:	69fb      	ldr	r3, [r7, #28]
 8003c9a:	3301      	adds	r3, #1
 8003c9c:	61fb      	str	r3, [r7, #28]
   				opt_len = *p++;
 8003c9e:	69fb      	ldr	r3, [r7, #28]
 8003ca0:	1c5a      	adds	r2, r3, #1
 8003ca2:	61fa      	str	r2, [r7, #28]
 8003ca4:	781b      	ldrb	r3, [r3, #0]
 8003ca6:	72fb      	strb	r3, [r7, #11]
   				DHCP_SIP[0] = *p++;
 8003ca8:	69fb      	ldr	r3, [r7, #28]
 8003caa:	1c5a      	adds	r2, r3, #1
 8003cac:	61fa      	str	r2, [r7, #28]
 8003cae:	781a      	ldrb	r2, [r3, #0]
 8003cb0:	4b31      	ldr	r3, [pc, #196]	; (8003d78 <parseDHCPMSG+0x52c>)
 8003cb2:	701a      	strb	r2, [r3, #0]
   				DHCP_SIP[1] = *p++;
 8003cb4:	69fb      	ldr	r3, [r7, #28]
 8003cb6:	1c5a      	adds	r2, r3, #1
 8003cb8:	61fa      	str	r2, [r7, #28]
 8003cba:	781a      	ldrb	r2, [r3, #0]
 8003cbc:	4b2e      	ldr	r3, [pc, #184]	; (8003d78 <parseDHCPMSG+0x52c>)
 8003cbe:	705a      	strb	r2, [r3, #1]
   				DHCP_SIP[2] = *p++;
 8003cc0:	69fb      	ldr	r3, [r7, #28]
 8003cc2:	1c5a      	adds	r2, r3, #1
 8003cc4:	61fa      	str	r2, [r7, #28]
 8003cc6:	781a      	ldrb	r2, [r3, #0]
 8003cc8:	4b2b      	ldr	r3, [pc, #172]	; (8003d78 <parseDHCPMSG+0x52c>)
 8003cca:	709a      	strb	r2, [r3, #2]
   				DHCP_SIP[3] = *p++;
 8003ccc:	69fb      	ldr	r3, [r7, #28]
 8003cce:	1c5a      	adds	r2, r3, #1
 8003cd0:	61fa      	str	r2, [r7, #28]
 8003cd2:	781a      	ldrb	r2, [r3, #0]
 8003cd4:	4b28      	ldr	r3, [pc, #160]	; (8003d78 <parseDHCPMSG+0x52c>)
 8003cd6:	70da      	strb	r2, [r3, #3]
                DHCP_REAL_SIP[0]=svr_addr[0];
 8003cd8:	793a      	ldrb	r2, [r7, #4]
 8003cda:	4b28      	ldr	r3, [pc, #160]	; (8003d7c <parseDHCPMSG+0x530>)
 8003cdc:	701a      	strb	r2, [r3, #0]
                DHCP_REAL_SIP[1]=svr_addr[1];
 8003cde:	797a      	ldrb	r2, [r7, #5]
 8003ce0:	4b26      	ldr	r3, [pc, #152]	; (8003d7c <parseDHCPMSG+0x530>)
 8003ce2:	705a      	strb	r2, [r3, #1]
                DHCP_REAL_SIP[2]=svr_addr[2];
 8003ce4:	79ba      	ldrb	r2, [r7, #6]
 8003ce6:	4b25      	ldr	r3, [pc, #148]	; (8003d7c <parseDHCPMSG+0x530>)
 8003ce8:	709a      	strb	r2, [r3, #2]
                DHCP_REAL_SIP[3]=svr_addr[3];
 8003cea:	79fa      	ldrb	r2, [r7, #7]
 8003cec:	4b23      	ldr	r3, [pc, #140]	; (8003d7c <parseDHCPMSG+0x530>)
 8003cee:	70da      	strb	r2, [r3, #3]
   				break;
 8003cf0:	e02d      	b.n	8003d4e <parseDHCPMSG+0x502>
   			case dhcpZabbixHostName :
   				p++;
 8003cf2:	69fb      	ldr	r3, [r7, #28]
 8003cf4:	3301      	adds	r3, #1
 8003cf6:	61fb      	str	r3, [r7, #28]
   				opt_len = *p++;
 8003cf8:	69fb      	ldr	r3, [r7, #28]
 8003cfa:	1c5a      	adds	r2, r3, #1
 8003cfc:	61fa      	str	r2, [r7, #28]
 8003cfe:	781b      	ldrb	r3, [r3, #0]
 8003d00:	72fb      	strb	r3, [r7, #11]
   				int iii;
   				for (iii = 0; iii < opt_len; iii++) {
 8003d02:	2300      	movs	r3, #0
 8003d04:	617b      	str	r3, [r7, #20]
 8003d06:	e00b      	b.n	8003d20 <parseDHCPMSG+0x4d4>
   					DHCP_allocated_hostname[iii] = *p++;
 8003d08:	69fb      	ldr	r3, [r7, #28]
 8003d0a:	1c5a      	adds	r2, r3, #1
 8003d0c:	61fa      	str	r2, [r7, #28]
 8003d0e:	7819      	ldrb	r1, [r3, #0]
 8003d10:	4a1b      	ldr	r2, [pc, #108]	; (8003d80 <parseDHCPMSG+0x534>)
 8003d12:	697b      	ldr	r3, [r7, #20]
 8003d14:	4413      	add	r3, r2
 8003d16:	460a      	mov	r2, r1
 8003d18:	701a      	strb	r2, [r3, #0]
   				for (iii = 0; iii < opt_len; iii++) {
 8003d1a:	697b      	ldr	r3, [r7, #20]
 8003d1c:	3301      	adds	r3, #1
 8003d1e:	617b      	str	r3, [r7, #20]
 8003d20:	7afb      	ldrb	r3, [r7, #11]
 8003d22:	697a      	ldr	r2, [r7, #20]
 8003d24:	429a      	cmp	r2, r3
 8003d26:	dbef      	blt.n	8003d08 <parseDHCPMSG+0x4bc>
   				}
   				DHCP_allocated_hostname[iii] = '\0';
 8003d28:	4a15      	ldr	r2, [pc, #84]	; (8003d80 <parseDHCPMSG+0x534>)
 8003d2a:	697b      	ldr	r3, [r7, #20]
 8003d2c:	4413      	add	r3, r2
 8003d2e:	2200      	movs	r2, #0
 8003d30:	701a      	strb	r2, [r3, #0]
   				break;
 8003d32:	e00c      	b.n	8003d4e <parseDHCPMSG+0x502>
   			default :
   				p++;
 8003d34:	69fb      	ldr	r3, [r7, #28]
 8003d36:	3301      	adds	r3, #1
 8003d38:	61fb      	str	r3, [r7, #28]
   				opt_len = *p++;
 8003d3a:	69fb      	ldr	r3, [r7, #28]
 8003d3c:	1c5a      	adds	r2, r3, #1
 8003d3e:	61fa      	str	r2, [r7, #28]
 8003d40:	781b      	ldrb	r3, [r3, #0]
 8003d42:	72fb      	strb	r3, [r7, #11]
   				p += opt_len;
 8003d44:	7afb      	ldrb	r3, [r7, #11]
 8003d46:	69fa      	ldr	r2, [r7, #28]
 8003d48:	4413      	add	r3, r2
 8003d4a:	61fb      	str	r3, [r7, #28]
   				break;
 8003d4c:	bf00      	nop
		while ( p < e ) {
 8003d4e:	69fa      	ldr	r2, [r7, #28]
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	429a      	cmp	r2, r3
 8003d54:	f4ff ae11 	bcc.w	800397a <parseDHCPMSG+0x12e>
			} // switch
		} // while
	} // if
	return	type;
 8003d58:	f997 301b 	ldrsb.w	r3, [r7, #27]
}
 8003d5c:	4618      	mov	r0, r3
 8003d5e:	3724      	adds	r7, #36	; 0x24
 8003d60:	46bd      	mov	sp, r7
 8003d62:	bd90      	pop	{r4, r7, pc}
 8003d64:	200005dc 	.word	0x200005dc
 8003d68:	200005ec 	.word	0x200005ec
 8003d6c:	200005e4 	.word	0x200005e4
 8003d70:	200005e8 	.word	0x200005e8
 8003d74:	20000000 	.word	0x20000000
 8003d78:	200005cc 	.word	0x200005cc
 8003d7c:	200005d0 	.word	0x200005d0
 8003d80:	200005f0 	.word	0x200005f0

08003d84 <DHCP_run>:

uint8_t DHCP_run(void)
{
 8003d84:	b580      	push	{r7, lr}
 8003d86:	b082      	sub	sp, #8
 8003d88:	af00      	add	r7, sp, #0
	uint8_t  type;
	uint8_t  ret;

	if(dhcp_state == STATE_DHCP_STOP) return DHCP_STOPPED;
 8003d8a:	4b7f      	ldr	r3, [pc, #508]	; (8003f88 <DHCP_run+0x204>)
 8003d8c:	f993 3000 	ldrsb.w	r3, [r3]
 8003d90:	2b06      	cmp	r3, #6
 8003d92:	d101      	bne.n	8003d98 <DHCP_run+0x14>
 8003d94:	2305      	movs	r3, #5
 8003d96:	e0f3      	b.n	8003f80 <DHCP_run+0x1fc>

	if(getSn_SR(DHCP_SOCKET) != SOCK_UDP)
 8003d98:	4b7c      	ldr	r3, [pc, #496]	; (8003f8c <DHCP_run+0x208>)
 8003d9a:	781b      	ldrb	r3, [r3, #0]
 8003d9c:	009b      	lsls	r3, r3, #2
 8003d9e:	3301      	adds	r3, #1
 8003da0:	00db      	lsls	r3, r3, #3
 8003da2:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8003da6:	4618      	mov	r0, r3
 8003da8:	f005 f9ae 	bl	8009108 <WIZCHIP_READ>
 8003dac:	4603      	mov	r3, r0
 8003dae:	2b22      	cmp	r3, #34	; 0x22
 8003db0:	d006      	beq.n	8003dc0 <DHCP_run+0x3c>
	   socket(DHCP_SOCKET, Sn_MR_UDP, DHCP_CLIENT_PORT, 0x00);
 8003db2:	4b76      	ldr	r3, [pc, #472]	; (8003f8c <DHCP_run+0x208>)
 8003db4:	7818      	ldrb	r0, [r3, #0]
 8003db6:	2300      	movs	r3, #0
 8003db8:	2244      	movs	r2, #68	; 0x44
 8003dba:	2102      	movs	r1, #2
 8003dbc:	f002 fda8 	bl	8006910 <socket>

	ret = DHCP_RUNNING;
 8003dc0:	2301      	movs	r3, #1
 8003dc2:	71fb      	strb	r3, [r7, #7]
	type = parseDHCPMSG();
 8003dc4:	f7ff fd42 	bl	800384c <parseDHCPMSG>
 8003dc8:	4603      	mov	r3, r0
 8003dca:	71bb      	strb	r3, [r7, #6]

	switch ( dhcp_state ) {
 8003dcc:	4b6e      	ldr	r3, [pc, #440]	; (8003f88 <DHCP_run+0x204>)
 8003dce:	f993 3000 	ldrsb.w	r3, [r3]
 8003dd2:	2b04      	cmp	r3, #4
 8003dd4:	f200 80d0 	bhi.w	8003f78 <DHCP_run+0x1f4>
 8003dd8:	a201      	add	r2, pc, #4	; (adr r2, 8003de0 <DHCP_run+0x5c>)
 8003dda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003dde:	bf00      	nop
 8003de0:	08003df5 	.word	0x08003df5
 8003de4:	08003e19 	.word	0x08003e19
 8003de8:	08003e5d 	.word	0x08003e5d
 8003dec:	08003ead 	.word	0x08003ead
 8003df0:	08003f07 	.word	0x08003f07
	   case STATE_DHCP_INIT     :
         DHCP_allocated_ip[0] = 0;
 8003df4:	4b66      	ldr	r3, [pc, #408]	; (8003f90 <DHCP_run+0x20c>)
 8003df6:	2200      	movs	r2, #0
 8003df8:	701a      	strb	r2, [r3, #0]
         DHCP_allocated_ip[1] = 0;
 8003dfa:	4b65      	ldr	r3, [pc, #404]	; (8003f90 <DHCP_run+0x20c>)
 8003dfc:	2200      	movs	r2, #0
 8003dfe:	705a      	strb	r2, [r3, #1]
         DHCP_allocated_ip[2] = 0;
 8003e00:	4b63      	ldr	r3, [pc, #396]	; (8003f90 <DHCP_run+0x20c>)
 8003e02:	2200      	movs	r2, #0
 8003e04:	709a      	strb	r2, [r3, #2]
         DHCP_allocated_ip[3] = 0;
 8003e06:	4b62      	ldr	r3, [pc, #392]	; (8003f90 <DHCP_run+0x20c>)
 8003e08:	2200      	movs	r2, #0
 8003e0a:	70da      	strb	r2, [r3, #3]
   		send_DHCP_DISCOVER();
 8003e0c:	f7fe ff58 	bl	8002cc0 <send_DHCP_DISCOVER>
   		dhcp_state = STATE_DHCP_DISCOVER;
 8003e10:	4b5d      	ldr	r3, [pc, #372]	; (8003f88 <DHCP_run+0x204>)
 8003e12:	2201      	movs	r2, #1
 8003e14:	701a      	strb	r2, [r3, #0]
   		break;
 8003e16:	e0b2      	b.n	8003f7e <DHCP_run+0x1fa>
		case STATE_DHCP_DISCOVER :
			if (type == DHCP_OFFER){
 8003e18:	79bb      	ldrb	r3, [r7, #6]
 8003e1a:	2b02      	cmp	r3, #2
 8003e1c:	d119      	bne.n	8003e52 <DHCP_run+0xce>
#ifdef _DHCP_DEBUG_
				printf("> Receive DHCP_OFFER\r\n");
#endif
            DHCP_allocated_ip[0] = pDHCPMSG->yiaddr[0];
 8003e1e:	4b5d      	ldr	r3, [pc, #372]	; (8003f94 <DHCP_run+0x210>)
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	7c1a      	ldrb	r2, [r3, #16]
 8003e24:	4b5a      	ldr	r3, [pc, #360]	; (8003f90 <DHCP_run+0x20c>)
 8003e26:	701a      	strb	r2, [r3, #0]
            DHCP_allocated_ip[1] = pDHCPMSG->yiaddr[1];
 8003e28:	4b5a      	ldr	r3, [pc, #360]	; (8003f94 <DHCP_run+0x210>)
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	7c5a      	ldrb	r2, [r3, #17]
 8003e2e:	4b58      	ldr	r3, [pc, #352]	; (8003f90 <DHCP_run+0x20c>)
 8003e30:	705a      	strb	r2, [r3, #1]
            DHCP_allocated_ip[2] = pDHCPMSG->yiaddr[2];
 8003e32:	4b58      	ldr	r3, [pc, #352]	; (8003f94 <DHCP_run+0x210>)
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	7c9a      	ldrb	r2, [r3, #18]
 8003e38:	4b55      	ldr	r3, [pc, #340]	; (8003f90 <DHCP_run+0x20c>)
 8003e3a:	709a      	strb	r2, [r3, #2]
            DHCP_allocated_ip[3] = pDHCPMSG->yiaddr[3];
 8003e3c:	4b55      	ldr	r3, [pc, #340]	; (8003f94 <DHCP_run+0x210>)
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	7cda      	ldrb	r2, [r3, #19]
 8003e42:	4b53      	ldr	r3, [pc, #332]	; (8003f90 <DHCP_run+0x20c>)
 8003e44:	70da      	strb	r2, [r3, #3]

				send_DHCP_REQUEST();
 8003e46:	f7ff f913 	bl	8003070 <send_DHCP_REQUEST>
				dhcp_state = STATE_DHCP_REQUEST;
 8003e4a:	4b4f      	ldr	r3, [pc, #316]	; (8003f88 <DHCP_run+0x204>)
 8003e4c:	2202      	movs	r2, #2
 8003e4e:	701a      	strb	r2, [r3, #0]
			} else ret = check_DHCP_timeout();
         break;
 8003e50:	e095      	b.n	8003f7e <DHCP_run+0x1fa>
			} else ret = check_DHCP_timeout();
 8003e52:	f000 f8b1 	bl	8003fb8 <check_DHCP_timeout>
 8003e56:	4603      	mov	r3, r0
 8003e58:	71fb      	strb	r3, [r7, #7]
         break;
 8003e5a:	e090      	b.n	8003f7e <DHCP_run+0x1fa>

		case STATE_DHCP_REQUEST :
			if (type == DHCP_ACK) {
 8003e5c:	79bb      	ldrb	r3, [r7, #6]
 8003e5e:	2b05      	cmp	r3, #5
 8003e60:	d116      	bne.n	8003e90 <DHCP_run+0x10c>

#ifdef _DHCP_DEBUG_
				printf("> Receive DHCP_ACK\r\n");
#endif
				if (check_DHCP_leasedIP()) {
 8003e62:	f000 f909 	bl	8004078 <check_DHCP_leasedIP>
 8003e66:	4603      	mov	r3, r0
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d008      	beq.n	8003e7e <DHCP_run+0xfa>
					// Network info assignment from DHCP
					dhcp_ip_assign();
 8003e6c:	4b4a      	ldr	r3, [pc, #296]	; (8003f98 <DHCP_run+0x214>)
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	4798      	blx	r3
					reset_DHCP_timeout();
 8003e72:	f000 f9d3 	bl	800421c <reset_DHCP_timeout>

					dhcp_state = STATE_DHCP_LEASED;
 8003e76:	4b44      	ldr	r3, [pc, #272]	; (8003f88 <DHCP_run+0x204>)
 8003e78:	2203      	movs	r2, #3
 8003e7a:	701a      	strb	r2, [r3, #0]

				reset_DHCP_timeout();

				dhcp_state = STATE_DHCP_DISCOVER;
			} else ret = check_DHCP_timeout();
		break;
 8003e7c:	e07f      	b.n	8003f7e <DHCP_run+0x1fa>
					reset_DHCP_timeout();
 8003e7e:	f000 f9cd 	bl	800421c <reset_DHCP_timeout>
					dhcp_ip_conflict();
 8003e82:	4b46      	ldr	r3, [pc, #280]	; (8003f9c <DHCP_run+0x218>)
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	4798      	blx	r3
				    dhcp_state = STATE_DHCP_INIT;
 8003e88:	4b3f      	ldr	r3, [pc, #252]	; (8003f88 <DHCP_run+0x204>)
 8003e8a:	2200      	movs	r2, #0
 8003e8c:	701a      	strb	r2, [r3, #0]
		break;
 8003e8e:	e076      	b.n	8003f7e <DHCP_run+0x1fa>
			} else if (type == DHCP_NAK) {
 8003e90:	79bb      	ldrb	r3, [r7, #6]
 8003e92:	2b06      	cmp	r3, #6
 8003e94:	d105      	bne.n	8003ea2 <DHCP_run+0x11e>
				reset_DHCP_timeout();
 8003e96:	f000 f9c1 	bl	800421c <reset_DHCP_timeout>
				dhcp_state = STATE_DHCP_DISCOVER;
 8003e9a:	4b3b      	ldr	r3, [pc, #236]	; (8003f88 <DHCP_run+0x204>)
 8003e9c:	2201      	movs	r2, #1
 8003e9e:	701a      	strb	r2, [r3, #0]
		break;
 8003ea0:	e06d      	b.n	8003f7e <DHCP_run+0x1fa>
			} else ret = check_DHCP_timeout();
 8003ea2:	f000 f889 	bl	8003fb8 <check_DHCP_timeout>
 8003ea6:	4603      	mov	r3, r0
 8003ea8:	71fb      	strb	r3, [r7, #7]
		break;
 8003eaa:	e068      	b.n	8003f7e <DHCP_run+0x1fa>

		case STATE_DHCP_LEASED :
		   ret = DHCP_IP_LEASED;
 8003eac:	2304      	movs	r3, #4
 8003eae:	71fb      	strb	r3, [r7, #7]
			if ((dhcp_lease_time != INFINITE_LEASETIME) && ((dhcp_lease_time/2) < dhcp_tick_1s)) {
 8003eb0:	4b3b      	ldr	r3, [pc, #236]	; (8003fa0 <DHCP_run+0x21c>)
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003eb8:	d060      	beq.n	8003f7c <DHCP_run+0x1f8>
 8003eba:	4b39      	ldr	r3, [pc, #228]	; (8003fa0 <DHCP_run+0x21c>)
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	085a      	lsrs	r2, r3, #1
 8003ec0:	4b38      	ldr	r3, [pc, #224]	; (8003fa4 <DHCP_run+0x220>)
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	429a      	cmp	r2, r3
 8003ec6:	d259      	bcs.n	8003f7c <DHCP_run+0x1f8>
				
#ifdef _DHCP_DEBUG_
 				printf("> Maintains the IP address \r\n");
#endif

				type = 0;
 8003ec8:	2300      	movs	r3, #0
 8003eca:	71bb      	strb	r3, [r7, #6]
				OLD_allocated_ip[0] = DHCP_allocated_ip[0];
 8003ecc:	4b30      	ldr	r3, [pc, #192]	; (8003f90 <DHCP_run+0x20c>)
 8003ece:	781a      	ldrb	r2, [r3, #0]
 8003ed0:	4b35      	ldr	r3, [pc, #212]	; (8003fa8 <DHCP_run+0x224>)
 8003ed2:	701a      	strb	r2, [r3, #0]
				OLD_allocated_ip[1] = DHCP_allocated_ip[1];
 8003ed4:	4b2e      	ldr	r3, [pc, #184]	; (8003f90 <DHCP_run+0x20c>)
 8003ed6:	785a      	ldrb	r2, [r3, #1]
 8003ed8:	4b33      	ldr	r3, [pc, #204]	; (8003fa8 <DHCP_run+0x224>)
 8003eda:	705a      	strb	r2, [r3, #1]
				OLD_allocated_ip[2] = DHCP_allocated_ip[2];
 8003edc:	4b2c      	ldr	r3, [pc, #176]	; (8003f90 <DHCP_run+0x20c>)
 8003ede:	789a      	ldrb	r2, [r3, #2]
 8003ee0:	4b31      	ldr	r3, [pc, #196]	; (8003fa8 <DHCP_run+0x224>)
 8003ee2:	709a      	strb	r2, [r3, #2]
				OLD_allocated_ip[3] = DHCP_allocated_ip[3];
 8003ee4:	4b2a      	ldr	r3, [pc, #168]	; (8003f90 <DHCP_run+0x20c>)
 8003ee6:	78da      	ldrb	r2, [r3, #3]
 8003ee8:	4b2f      	ldr	r3, [pc, #188]	; (8003fa8 <DHCP_run+0x224>)
 8003eea:	70da      	strb	r2, [r3, #3]
				
				DHCP_XID++;
 8003eec:	4b2f      	ldr	r3, [pc, #188]	; (8003fac <DHCP_run+0x228>)
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	3301      	adds	r3, #1
 8003ef2:	4a2e      	ldr	r2, [pc, #184]	; (8003fac <DHCP_run+0x228>)
 8003ef4:	6013      	str	r3, [r2, #0]

				send_DHCP_REQUEST();
 8003ef6:	f7ff f8bb 	bl	8003070 <send_DHCP_REQUEST>

				reset_DHCP_timeout();
 8003efa:	f000 f98f 	bl	800421c <reset_DHCP_timeout>

				dhcp_state = STATE_DHCP_REREQUEST;
 8003efe:	4b22      	ldr	r3, [pc, #136]	; (8003f88 <DHCP_run+0x204>)
 8003f00:	2204      	movs	r2, #4
 8003f02:	701a      	strb	r2, [r3, #0]
			}
		break;
 8003f04:	e03a      	b.n	8003f7c <DHCP_run+0x1f8>

		case STATE_DHCP_REREQUEST :
		   ret = DHCP_IP_LEASED;
 8003f06:	2304      	movs	r3, #4
 8003f08:	71fb      	strb	r3, [r7, #7]
			if (type == DHCP_ACK) {
 8003f0a:	79bb      	ldrb	r3, [r7, #6]
 8003f0c:	2b05      	cmp	r3, #5
 8003f0e:	d125      	bne.n	8003f5c <DHCP_run+0x1d8>
				dhcp_retry_count = 0;
 8003f10:	4b27      	ldr	r3, [pc, #156]	; (8003fb0 <DHCP_run+0x22c>)
 8003f12:	2200      	movs	r2, #0
 8003f14:	701a      	strb	r2, [r3, #0]
				if (OLD_allocated_ip[0] != DHCP_allocated_ip[0] || 
 8003f16:	4b24      	ldr	r3, [pc, #144]	; (8003fa8 <DHCP_run+0x224>)
 8003f18:	781a      	ldrb	r2, [r3, #0]
 8003f1a:	4b1d      	ldr	r3, [pc, #116]	; (8003f90 <DHCP_run+0x20c>)
 8003f1c:	781b      	ldrb	r3, [r3, #0]
 8003f1e:	429a      	cmp	r2, r3
 8003f20:	d111      	bne.n	8003f46 <DHCP_run+0x1c2>
				    OLD_allocated_ip[1] != DHCP_allocated_ip[1] ||
 8003f22:	4b21      	ldr	r3, [pc, #132]	; (8003fa8 <DHCP_run+0x224>)
 8003f24:	785a      	ldrb	r2, [r3, #1]
 8003f26:	4b1a      	ldr	r3, [pc, #104]	; (8003f90 <DHCP_run+0x20c>)
 8003f28:	785b      	ldrb	r3, [r3, #1]
				if (OLD_allocated_ip[0] != DHCP_allocated_ip[0] || 
 8003f2a:	429a      	cmp	r2, r3
 8003f2c:	d10b      	bne.n	8003f46 <DHCP_run+0x1c2>
				    OLD_allocated_ip[2] != DHCP_allocated_ip[2] ||
 8003f2e:	4b1e      	ldr	r3, [pc, #120]	; (8003fa8 <DHCP_run+0x224>)
 8003f30:	789a      	ldrb	r2, [r3, #2]
 8003f32:	4b17      	ldr	r3, [pc, #92]	; (8003f90 <DHCP_run+0x20c>)
 8003f34:	789b      	ldrb	r3, [r3, #2]
				    OLD_allocated_ip[1] != DHCP_allocated_ip[1] ||
 8003f36:	429a      	cmp	r2, r3
 8003f38:	d105      	bne.n	8003f46 <DHCP_run+0x1c2>
				    OLD_allocated_ip[3] != DHCP_allocated_ip[3]) 
 8003f3a:	4b1b      	ldr	r3, [pc, #108]	; (8003fa8 <DHCP_run+0x224>)
 8003f3c:	78da      	ldrb	r2, [r3, #3]
 8003f3e:	4b14      	ldr	r3, [pc, #80]	; (8003f90 <DHCP_run+0x20c>)
 8003f40:	78db      	ldrb	r3, [r3, #3]
				    OLD_allocated_ip[2] != DHCP_allocated_ip[2] ||
 8003f42:	429a      	cmp	r2, r3
 8003f44:	d004      	beq.n	8003f50 <DHCP_run+0x1cc>
				{
					ret = DHCP_IP_CHANGED;
 8003f46:	2303      	movs	r3, #3
 8003f48:	71fb      	strb	r3, [r7, #7]
					dhcp_ip_update();
 8003f4a:	4b1a      	ldr	r3, [pc, #104]	; (8003fb4 <DHCP_run+0x230>)
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	4798      	blx	r3
					
				}
         #ifdef _DHCP_DEBUG_
            else printf(">IP is continued.\r\n");
         #endif            				
				reset_DHCP_timeout();
 8003f50:	f000 f964 	bl	800421c <reset_DHCP_timeout>
				dhcp_state = STATE_DHCP_LEASED;
 8003f54:	4b0c      	ldr	r3, [pc, #48]	; (8003f88 <DHCP_run+0x204>)
 8003f56:	2203      	movs	r2, #3
 8003f58:	701a      	strb	r2, [r3, #0]

				reset_DHCP_timeout();

				dhcp_state = STATE_DHCP_DISCOVER;
			} else ret = check_DHCP_timeout();
	   	break;
 8003f5a:	e010      	b.n	8003f7e <DHCP_run+0x1fa>
			} else if (type == DHCP_NAK) {
 8003f5c:	79bb      	ldrb	r3, [r7, #6]
 8003f5e:	2b06      	cmp	r3, #6
 8003f60:	d105      	bne.n	8003f6e <DHCP_run+0x1ea>
				reset_DHCP_timeout();
 8003f62:	f000 f95b 	bl	800421c <reset_DHCP_timeout>
				dhcp_state = STATE_DHCP_DISCOVER;
 8003f66:	4b08      	ldr	r3, [pc, #32]	; (8003f88 <DHCP_run+0x204>)
 8003f68:	2201      	movs	r2, #1
 8003f6a:	701a      	strb	r2, [r3, #0]
	   	break;
 8003f6c:	e007      	b.n	8003f7e <DHCP_run+0x1fa>
			} else ret = check_DHCP_timeout();
 8003f6e:	f000 f823 	bl	8003fb8 <check_DHCP_timeout>
 8003f72:	4603      	mov	r3, r0
 8003f74:	71fb      	strb	r3, [r7, #7]
	   	break;
 8003f76:	e002      	b.n	8003f7e <DHCP_run+0x1fa>
		default :
   		break;
 8003f78:	bf00      	nop
 8003f7a:	e000      	b.n	8003f7e <DHCP_run+0x1fa>
		break;
 8003f7c:	bf00      	nop
	}

	return ret;
 8003f7e:	79fb      	ldrb	r3, [r7, #7]
}
 8003f80:	4618      	mov	r0, r3
 8003f82:	3708      	adds	r7, #8
 8003f84:	46bd      	mov	sp, r7
 8003f86:	bd80      	pop	{r7, pc}
 8003f88:	200006f0 	.word	0x200006f0
 8003f8c:	200005c8 	.word	0x200005c8
 8003f90:	200005d8 	.word	0x200005d8
 8003f94:	200006fc 	.word	0x200006fc
 8003f98:	20000010 	.word	0x20000010
 8003f9c:	20000018 	.word	0x20000018
 8003fa0:	20000000 	.word	0x20000000
 8003fa4:	200006f4 	.word	0x200006f4
 8003fa8:	200005d4 	.word	0x200005d4
 8003fac:	200006f8 	.word	0x200006f8
 8003fb0:	200006f1 	.word	0x200006f1
 8003fb4:	20000014 	.word	0x20000014

08003fb8 <check_DHCP_timeout>:
   close(DHCP_SOCKET);
   dhcp_state = STATE_DHCP_STOP;
}

uint8_t check_DHCP_timeout(void)
{
 8003fb8:	b580      	push	{r7, lr}
 8003fba:	b082      	sub	sp, #8
 8003fbc:	af00      	add	r7, sp, #0
	uint8_t ret = DHCP_RUNNING;
 8003fbe:	2301      	movs	r3, #1
 8003fc0:	71fb      	strb	r3, [r7, #7]
	
	if (dhcp_retry_count < MAX_DHCP_RETRY) {
 8003fc2:	4b29      	ldr	r3, [pc, #164]	; (8004068 <check_DHCP_timeout+0xb0>)
 8003fc4:	f993 3000 	ldrsb.w	r3, [r3]
 8003fc8:	2b01      	cmp	r3, #1
 8003fca:	dc2d      	bgt.n	8004028 <check_DHCP_timeout+0x70>
		if (dhcp_tick_next < dhcp_tick_1s) {
 8003fcc:	4b27      	ldr	r3, [pc, #156]	; (800406c <check_DHCP_timeout+0xb4>)
 8003fce:	681a      	ldr	r2, [r3, #0]
 8003fd0:	4b27      	ldr	r3, [pc, #156]	; (8004070 <check_DHCP_timeout+0xb8>)
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	429a      	cmp	r2, r3
 8003fd6:	d242      	bcs.n	800405e <check_DHCP_timeout+0xa6>

			switch ( dhcp_state ) {
 8003fd8:	4b26      	ldr	r3, [pc, #152]	; (8004074 <check_DHCP_timeout+0xbc>)
 8003fda:	f993 3000 	ldrsb.w	r3, [r3]
 8003fde:	2b04      	cmp	r3, #4
 8003fe0:	d00c      	beq.n	8003ffc <check_DHCP_timeout+0x44>
 8003fe2:	2b04      	cmp	r3, #4
 8003fe4:	dc0d      	bgt.n	8004002 <check_DHCP_timeout+0x4a>
 8003fe6:	2b01      	cmp	r3, #1
 8003fe8:	d002      	beq.n	8003ff0 <check_DHCP_timeout+0x38>
 8003fea:	2b02      	cmp	r3, #2
 8003fec:	d003      	beq.n	8003ff6 <check_DHCP_timeout+0x3e>
					
					send_DHCP_REQUEST();
				break;
		
				default :
				break;
 8003fee:	e008      	b.n	8004002 <check_DHCP_timeout+0x4a>
					send_DHCP_DISCOVER();
 8003ff0:	f7fe fe66 	bl	8002cc0 <send_DHCP_DISCOVER>
				break;
 8003ff4:	e006      	b.n	8004004 <check_DHCP_timeout+0x4c>
					send_DHCP_REQUEST();
 8003ff6:	f7ff f83b 	bl	8003070 <send_DHCP_REQUEST>
				break;
 8003ffa:	e003      	b.n	8004004 <check_DHCP_timeout+0x4c>
					send_DHCP_REQUEST();
 8003ffc:	f7ff f838 	bl	8003070 <send_DHCP_REQUEST>
				break;
 8004000:	e000      	b.n	8004004 <check_DHCP_timeout+0x4c>
				break;
 8004002:	bf00      	nop
			}

			dhcp_tick_1s = 0;
 8004004:	4b1a      	ldr	r3, [pc, #104]	; (8004070 <check_DHCP_timeout+0xb8>)
 8004006:	2200      	movs	r2, #0
 8004008:	601a      	str	r2, [r3, #0]
			dhcp_tick_next = dhcp_tick_1s + DHCP_WAIT_TIME;
 800400a:	4b19      	ldr	r3, [pc, #100]	; (8004070 <check_DHCP_timeout+0xb8>)
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	330a      	adds	r3, #10
 8004010:	4a16      	ldr	r2, [pc, #88]	; (800406c <check_DHCP_timeout+0xb4>)
 8004012:	6013      	str	r3, [r2, #0]
			dhcp_retry_count++;
 8004014:	4b14      	ldr	r3, [pc, #80]	; (8004068 <check_DHCP_timeout+0xb0>)
 8004016:	f993 3000 	ldrsb.w	r3, [r3]
 800401a:	b2db      	uxtb	r3, r3
 800401c:	3301      	adds	r3, #1
 800401e:	b2db      	uxtb	r3, r3
 8004020:	b25a      	sxtb	r2, r3
 8004022:	4b11      	ldr	r3, [pc, #68]	; (8004068 <check_DHCP_timeout+0xb0>)
 8004024:	701a      	strb	r2, [r3, #0]
 8004026:	e01a      	b.n	800405e <check_DHCP_timeout+0xa6>
		}
	} else { // timeout occurred

		switch(dhcp_state) {
 8004028:	4b12      	ldr	r3, [pc, #72]	; (8004074 <check_DHCP_timeout+0xbc>)
 800402a:	f993 3000 	ldrsb.w	r3, [r3]
 800402e:	2b04      	cmp	r3, #4
 8004030:	d00c      	beq.n	800404c <check_DHCP_timeout+0x94>
 8004032:	2b04      	cmp	r3, #4
 8004034:	dc10      	bgt.n	8004058 <check_DHCP_timeout+0xa0>
 8004036:	2b01      	cmp	r3, #1
 8004038:	d002      	beq.n	8004040 <check_DHCP_timeout+0x88>
 800403a:	2b02      	cmp	r3, #2
 800403c:	d006      	beq.n	800404c <check_DHCP_timeout+0x94>
			case STATE_DHCP_REREQUEST:
				send_DHCP_DISCOVER();
				dhcp_state = STATE_DHCP_DISCOVER;
				break;
			default :
				break;
 800403e:	e00b      	b.n	8004058 <check_DHCP_timeout+0xa0>
				dhcp_state = STATE_DHCP_INIT;
 8004040:	4b0c      	ldr	r3, [pc, #48]	; (8004074 <check_DHCP_timeout+0xbc>)
 8004042:	2200      	movs	r2, #0
 8004044:	701a      	strb	r2, [r3, #0]
				ret = DHCP_FAILED;
 8004046:	2300      	movs	r3, #0
 8004048:	71fb      	strb	r3, [r7, #7]
				break;
 800404a:	e006      	b.n	800405a <check_DHCP_timeout+0xa2>
				send_DHCP_DISCOVER();
 800404c:	f7fe fe38 	bl	8002cc0 <send_DHCP_DISCOVER>
				dhcp_state = STATE_DHCP_DISCOVER;
 8004050:	4b08      	ldr	r3, [pc, #32]	; (8004074 <check_DHCP_timeout+0xbc>)
 8004052:	2201      	movs	r2, #1
 8004054:	701a      	strb	r2, [r3, #0]
				break;
 8004056:	e000      	b.n	800405a <check_DHCP_timeout+0xa2>
				break;
 8004058:	bf00      	nop
		}
		reset_DHCP_timeout();
 800405a:	f000 f8df 	bl	800421c <reset_DHCP_timeout>
	}
	return ret;
 800405e:	79fb      	ldrb	r3, [r7, #7]
}
 8004060:	4618      	mov	r0, r3
 8004062:	3708      	adds	r7, #8
 8004064:	46bd      	mov	sp, r7
 8004066:	bd80      	pop	{r7, pc}
 8004068:	200006f1 	.word	0x200006f1
 800406c:	20000004 	.word	0x20000004
 8004070:	200006f4 	.word	0x200006f4
 8004074:	200006f0 	.word	0x200006f0

08004078 <check_DHCP_leasedIP>:

int8_t check_DHCP_leasedIP(void)
{
 8004078:	b580      	push	{r7, lr}
 800407a:	b084      	sub	sp, #16
 800407c:	af02      	add	r7, sp, #8
	uint8_t tmp;
	int32_t ret;

	//WIZchip RCR value changed for ARP Timeout count control
	tmp = getRCR();
 800407e:	f44f 50d8 	mov.w	r0, #6912	; 0x1b00
 8004082:	f005 f841 	bl	8009108 <WIZCHIP_READ>
 8004086:	4603      	mov	r3, r0
 8004088:	71fb      	strb	r3, [r7, #7]
	setRCR(0x03);
 800408a:	2103      	movs	r1, #3
 800408c:	f44f 50d8 	mov.w	r0, #6912	; 0x1b00
 8004090:	f005 f886 	bl	80091a0 <WIZCHIP_WRITE>

	// IP conflict detection : ARP request - ARP reply
	// Broadcasting ARP Request for check the IP conflict using UDP sendto() function
	ret = sendto(DHCP_SOCKET, (uint8_t *)"CHECK_IP_CONFLICT", 17, DHCP_allocated_ip, 5000);
 8004094:	4b13      	ldr	r3, [pc, #76]	; (80040e4 <check_DHCP_leasedIP+0x6c>)
 8004096:	7818      	ldrb	r0, [r3, #0]
 8004098:	f241 3388 	movw	r3, #5000	; 0x1388
 800409c:	9300      	str	r3, [sp, #0]
 800409e:	4b12      	ldr	r3, [pc, #72]	; (80040e8 <check_DHCP_leasedIP+0x70>)
 80040a0:	2211      	movs	r2, #17
 80040a2:	4912      	ldr	r1, [pc, #72]	; (80040ec <check_DHCP_leasedIP+0x74>)
 80040a4:	f002 fdb8 	bl	8006c18 <sendto>
 80040a8:	6038      	str	r0, [r7, #0]

	// RCR value restore
	setRCR(tmp);
 80040aa:	79fb      	ldrb	r3, [r7, #7]
 80040ac:	4619      	mov	r1, r3
 80040ae:	f44f 50d8 	mov.w	r0, #6912	; 0x1b00
 80040b2:	f005 f875 	bl	80091a0 <WIZCHIP_WRITE>

	if(ret == SOCKERR_TIMEOUT) {
 80040b6:	683b      	ldr	r3, [r7, #0]
 80040b8:	f113 0f0d 	cmn.w	r3, #13
 80040bc:	d101      	bne.n	80040c2 <check_DHCP_leasedIP+0x4a>

#ifdef _DHCP_DEBUG_
		printf("\r\n> Check leased IP - OK\r\n");
#endif

		return 1;
 80040be:	2301      	movs	r3, #1
 80040c0:	e00c      	b.n	80040dc <check_DHCP_leasedIP+0x64>
	} else {
		// Received ARP reply or etc : IP address conflict occur, DHCP Failed
		send_DHCP_DECLINE();
 80040c2:	f7ff fa71 	bl	80035a8 <send_DHCP_DECLINE>

		ret = dhcp_tick_1s;
 80040c6:	4b0a      	ldr	r3, [pc, #40]	; (80040f0 <check_DHCP_leasedIP+0x78>)
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	603b      	str	r3, [r7, #0]
		while((dhcp_tick_1s - ret) < 2) ;   // wait for 1s over; wait to complete to send DECLINE message;
 80040cc:	bf00      	nop
 80040ce:	4b08      	ldr	r3, [pc, #32]	; (80040f0 <check_DHCP_leasedIP+0x78>)
 80040d0:	681a      	ldr	r2, [r3, #0]
 80040d2:	683b      	ldr	r3, [r7, #0]
 80040d4:	1ad3      	subs	r3, r2, r3
 80040d6:	2b01      	cmp	r3, #1
 80040d8:	d9f9      	bls.n	80040ce <check_DHCP_leasedIP+0x56>

		return 0;
 80040da:	2300      	movs	r3, #0
	}
}	
 80040dc:	4618      	mov	r0, r3
 80040de:	3708      	adds	r7, #8
 80040e0:	46bd      	mov	sp, r7
 80040e2:	bd80      	pop	{r7, pc}
 80040e4:	200005c8 	.word	0x200005c8
 80040e8:	200005d8 	.word	0x200005d8
 80040ec:	08014ab8 	.word	0x08014ab8
 80040f0:	200006f4 	.word	0x200006f4

080040f4 <DHCP_init>:

void DHCP_init(uint8_t s, uint8_t * buf)
{
 80040f4:	b580      	push	{r7, lr}
 80040f6:	b084      	sub	sp, #16
 80040f8:	af00      	add	r7, sp, #0
 80040fa:	4603      	mov	r3, r0
 80040fc:	6039      	str	r1, [r7, #0]
 80040fe:	71fb      	strb	r3, [r7, #7]
   uint8_t zeroip[4] = {0,0,0,0};
 8004100:	2300      	movs	r3, #0
 8004102:	60fb      	str	r3, [r7, #12]
   getSHAR(DHCP_CHADDR);
 8004104:	2206      	movs	r2, #6
 8004106:	493f      	ldr	r1, [pc, #252]	; (8004204 <DHCP_init+0x110>)
 8004108:	f44f 6010 	mov.w	r0, #2304	; 0x900
 800410c:	f005 f896 	bl	800923c <WIZCHIP_READ_BUF>
   if((DHCP_CHADDR[0] | DHCP_CHADDR[1]  | DHCP_CHADDR[2] | DHCP_CHADDR[3] | DHCP_CHADDR[4] | DHCP_CHADDR[5]) == 0x00)
 8004110:	4b3c      	ldr	r3, [pc, #240]	; (8004204 <DHCP_init+0x110>)
 8004112:	781a      	ldrb	r2, [r3, #0]
 8004114:	4b3b      	ldr	r3, [pc, #236]	; (8004204 <DHCP_init+0x110>)
 8004116:	785b      	ldrb	r3, [r3, #1]
 8004118:	4313      	orrs	r3, r2
 800411a:	b2da      	uxtb	r2, r3
 800411c:	4b39      	ldr	r3, [pc, #228]	; (8004204 <DHCP_init+0x110>)
 800411e:	789b      	ldrb	r3, [r3, #2]
 8004120:	4313      	orrs	r3, r2
 8004122:	b2da      	uxtb	r2, r3
 8004124:	4b37      	ldr	r3, [pc, #220]	; (8004204 <DHCP_init+0x110>)
 8004126:	78db      	ldrb	r3, [r3, #3]
 8004128:	4313      	orrs	r3, r2
 800412a:	b2da      	uxtb	r2, r3
 800412c:	4b35      	ldr	r3, [pc, #212]	; (8004204 <DHCP_init+0x110>)
 800412e:	791b      	ldrb	r3, [r3, #4]
 8004130:	4313      	orrs	r3, r2
 8004132:	b2da      	uxtb	r2, r3
 8004134:	4b33      	ldr	r3, [pc, #204]	; (8004204 <DHCP_init+0x110>)
 8004136:	795b      	ldrb	r3, [r3, #5]
 8004138:	4313      	orrs	r3, r2
 800413a:	b2db      	uxtb	r3, r3
 800413c:	2b00      	cmp	r3, #0
 800413e:	d117      	bne.n	8004170 <DHCP_init+0x7c>
   {
      // assigning temporary mac address, you should be set SHAR before call this function. 
      DHCP_CHADDR[0] = 0x00;
 8004140:	4b30      	ldr	r3, [pc, #192]	; (8004204 <DHCP_init+0x110>)
 8004142:	2200      	movs	r2, #0
 8004144:	701a      	strb	r2, [r3, #0]
      DHCP_CHADDR[1] = 0x08;
 8004146:	4b2f      	ldr	r3, [pc, #188]	; (8004204 <DHCP_init+0x110>)
 8004148:	2208      	movs	r2, #8
 800414a:	705a      	strb	r2, [r3, #1]
      DHCP_CHADDR[2] = 0xdc;      
 800414c:	4b2d      	ldr	r3, [pc, #180]	; (8004204 <DHCP_init+0x110>)
 800414e:	22dc      	movs	r2, #220	; 0xdc
 8004150:	709a      	strb	r2, [r3, #2]
      DHCP_CHADDR[3] = 0x00;
 8004152:	4b2c      	ldr	r3, [pc, #176]	; (8004204 <DHCP_init+0x110>)
 8004154:	2200      	movs	r2, #0
 8004156:	70da      	strb	r2, [r3, #3]
      DHCP_CHADDR[4] = 0x00;
 8004158:	4b2a      	ldr	r3, [pc, #168]	; (8004204 <DHCP_init+0x110>)
 800415a:	2200      	movs	r2, #0
 800415c:	711a      	strb	r2, [r3, #4]
      DHCP_CHADDR[5] = 0x00; 
 800415e:	4b29      	ldr	r3, [pc, #164]	; (8004204 <DHCP_init+0x110>)
 8004160:	2200      	movs	r2, #0
 8004162:	715a      	strb	r2, [r3, #5]
      setSHAR(DHCP_CHADDR);     
 8004164:	2206      	movs	r2, #6
 8004166:	4927      	ldr	r1, [pc, #156]	; (8004204 <DHCP_init+0x110>)
 8004168:	f44f 6010 	mov.w	r0, #2304	; 0x900
 800416c:	f005 f8c6 	bl	80092fc <WIZCHIP_WRITE_BUF>
   }

	DHCP_SOCKET = s; // SOCK_DHCP
 8004170:	4a25      	ldr	r2, [pc, #148]	; (8004208 <DHCP_init+0x114>)
 8004172:	79fb      	ldrb	r3, [r7, #7]
 8004174:	7013      	strb	r3, [r2, #0]
	pDHCPMSG = (RIP_MSG*)buf;
 8004176:	4a25      	ldr	r2, [pc, #148]	; (800420c <DHCP_init+0x118>)
 8004178:	683b      	ldr	r3, [r7, #0]
 800417a:	6013      	str	r3, [r2, #0]
	DHCP_XID = 0x12345678;
 800417c:	4b24      	ldr	r3, [pc, #144]	; (8004210 <DHCP_init+0x11c>)
 800417e:	4a25      	ldr	r2, [pc, #148]	; (8004214 <DHCP_init+0x120>)
 8004180:	601a      	str	r2, [r3, #0]
	{
		DHCP_XID += DHCP_CHADDR[3];
 8004182:	4b20      	ldr	r3, [pc, #128]	; (8004204 <DHCP_init+0x110>)
 8004184:	78db      	ldrb	r3, [r3, #3]
 8004186:	461a      	mov	r2, r3
 8004188:	4b21      	ldr	r3, [pc, #132]	; (8004210 <DHCP_init+0x11c>)
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	4413      	add	r3, r2
 800418e:	4a20      	ldr	r2, [pc, #128]	; (8004210 <DHCP_init+0x11c>)
 8004190:	6013      	str	r3, [r2, #0]
		DHCP_XID += DHCP_CHADDR[4];
 8004192:	4b1c      	ldr	r3, [pc, #112]	; (8004204 <DHCP_init+0x110>)
 8004194:	791b      	ldrb	r3, [r3, #4]
 8004196:	461a      	mov	r2, r3
 8004198:	4b1d      	ldr	r3, [pc, #116]	; (8004210 <DHCP_init+0x11c>)
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	4413      	add	r3, r2
 800419e:	4a1c      	ldr	r2, [pc, #112]	; (8004210 <DHCP_init+0x11c>)
 80041a0:	6013      	str	r3, [r2, #0]
		DHCP_XID += DHCP_CHADDR[5];
 80041a2:	4b18      	ldr	r3, [pc, #96]	; (8004204 <DHCP_init+0x110>)
 80041a4:	795b      	ldrb	r3, [r3, #5]
 80041a6:	461a      	mov	r2, r3
 80041a8:	4b19      	ldr	r3, [pc, #100]	; (8004210 <DHCP_init+0x11c>)
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	4413      	add	r3, r2
 80041ae:	4a18      	ldr	r2, [pc, #96]	; (8004210 <DHCP_init+0x11c>)
 80041b0:	6013      	str	r3, [r2, #0]
		DHCP_XID += (DHCP_CHADDR[3] ^ DHCP_CHADDR[4] ^ DHCP_CHADDR[5]);
 80041b2:	4b14      	ldr	r3, [pc, #80]	; (8004204 <DHCP_init+0x110>)
 80041b4:	78da      	ldrb	r2, [r3, #3]
 80041b6:	4b13      	ldr	r3, [pc, #76]	; (8004204 <DHCP_init+0x110>)
 80041b8:	791b      	ldrb	r3, [r3, #4]
 80041ba:	4053      	eors	r3, r2
 80041bc:	b2da      	uxtb	r2, r3
 80041be:	4b11      	ldr	r3, [pc, #68]	; (8004204 <DHCP_init+0x110>)
 80041c0:	795b      	ldrb	r3, [r3, #5]
 80041c2:	4053      	eors	r3, r2
 80041c4:	b2db      	uxtb	r3, r3
 80041c6:	461a      	mov	r2, r3
 80041c8:	4b11      	ldr	r3, [pc, #68]	; (8004210 <DHCP_init+0x11c>)
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	4413      	add	r3, r2
 80041ce:	4a10      	ldr	r2, [pc, #64]	; (8004210 <DHCP_init+0x11c>)
 80041d0:	6013      	str	r3, [r2, #0]
	}
	// WIZchip Netinfo Clear
	setSIPR(zeroip);
 80041d2:	f107 030c 	add.w	r3, r7, #12
 80041d6:	2204      	movs	r2, #4
 80041d8:	4619      	mov	r1, r3
 80041da:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 80041de:	f005 f88d 	bl	80092fc <WIZCHIP_WRITE_BUF>
	setGAR(zeroip);
 80041e2:	f107 030c 	add.w	r3, r7, #12
 80041e6:	2204      	movs	r2, #4
 80041e8:	4619      	mov	r1, r3
 80041ea:	f44f 7080 	mov.w	r0, #256	; 0x100
 80041ee:	f005 f885 	bl	80092fc <WIZCHIP_WRITE_BUF>

	reset_DHCP_timeout();
 80041f2:	f000 f813 	bl	800421c <reset_DHCP_timeout>
	dhcp_state = STATE_DHCP_INIT;
 80041f6:	4b08      	ldr	r3, [pc, #32]	; (8004218 <DHCP_init+0x124>)
 80041f8:	2200      	movs	r2, #0
 80041fa:	701a      	strb	r2, [r3, #0]
}
 80041fc:	bf00      	nop
 80041fe:	3710      	adds	r7, #16
 8004200:	46bd      	mov	sp, r7
 8004202:	bd80      	pop	{r7, pc}
 8004204:	20000700 	.word	0x20000700
 8004208:	200005c8 	.word	0x200005c8
 800420c:	200006fc 	.word	0x200006fc
 8004210:	200006f8 	.word	0x200006f8
 8004214:	12345678 	.word	0x12345678
 8004218:	200006f0 	.word	0x200006f0

0800421c <reset_DHCP_timeout>:


/* Reset the DHCP timeout count and retry count. */
void reset_DHCP_timeout(void)
{
 800421c:	b480      	push	{r7}
 800421e:	af00      	add	r7, sp, #0
	dhcp_tick_1s = 0;
 8004220:	4b06      	ldr	r3, [pc, #24]	; (800423c <reset_DHCP_timeout+0x20>)
 8004222:	2200      	movs	r2, #0
 8004224:	601a      	str	r2, [r3, #0]
	dhcp_tick_next = DHCP_WAIT_TIME;
 8004226:	4b06      	ldr	r3, [pc, #24]	; (8004240 <reset_DHCP_timeout+0x24>)
 8004228:	220a      	movs	r2, #10
 800422a:	601a      	str	r2, [r3, #0]
	dhcp_retry_count = 0;
 800422c:	4b05      	ldr	r3, [pc, #20]	; (8004244 <reset_DHCP_timeout+0x28>)
 800422e:	2200      	movs	r2, #0
 8004230:	701a      	strb	r2, [r3, #0]
}
 8004232:	bf00      	nop
 8004234:	46bd      	mov	sp, r7
 8004236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800423a:	4770      	bx	lr
 800423c:	200006f4 	.word	0x200006f4
 8004240:	20000004 	.word	0x20000004
 8004244:	200006f1 	.word	0x200006f1

08004248 <DHCP_time_handler>:

void DHCP_time_handler(void)
{
 8004248:	b480      	push	{r7}
 800424a:	af00      	add	r7, sp, #0
	dhcp_tick_1s++;
 800424c:	4b04      	ldr	r3, [pc, #16]	; (8004260 <DHCP_time_handler+0x18>)
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	3301      	adds	r3, #1
 8004252:	4a03      	ldr	r2, [pc, #12]	; (8004260 <DHCP_time_handler+0x18>)
 8004254:	6013      	str	r3, [r2, #0]
}
 8004256:	bf00      	nop
 8004258:	46bd      	mov	sp, r7
 800425a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800425e:	4770      	bx	lr
 8004260:	200006f4 	.word	0x200006f4

08004264 <getIPfromDHCP>:

void getIPfromDHCP(uint8_t* ip)
{
 8004264:	b480      	push	{r7}
 8004266:	b083      	sub	sp, #12
 8004268:	af00      	add	r7, sp, #0
 800426a:	6078      	str	r0, [r7, #4]
	ip[0] = DHCP_allocated_ip[0];
 800426c:	4b0c      	ldr	r3, [pc, #48]	; (80042a0 <getIPfromDHCP+0x3c>)
 800426e:	781a      	ldrb	r2, [r3, #0]
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	701a      	strb	r2, [r3, #0]
	ip[1] = DHCP_allocated_ip[1];
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	3301      	adds	r3, #1
 8004278:	4a09      	ldr	r2, [pc, #36]	; (80042a0 <getIPfromDHCP+0x3c>)
 800427a:	7852      	ldrb	r2, [r2, #1]
 800427c:	701a      	strb	r2, [r3, #0]
	ip[2] = DHCP_allocated_ip[2];	
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	3302      	adds	r3, #2
 8004282:	4a07      	ldr	r2, [pc, #28]	; (80042a0 <getIPfromDHCP+0x3c>)
 8004284:	7892      	ldrb	r2, [r2, #2]
 8004286:	701a      	strb	r2, [r3, #0]
	ip[3] = DHCP_allocated_ip[3];
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	3303      	adds	r3, #3
 800428c:	4a04      	ldr	r2, [pc, #16]	; (80042a0 <getIPfromDHCP+0x3c>)
 800428e:	78d2      	ldrb	r2, [r2, #3]
 8004290:	701a      	strb	r2, [r3, #0]
}
 8004292:	bf00      	nop
 8004294:	370c      	adds	r7, #12
 8004296:	46bd      	mov	sp, r7
 8004298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800429c:	4770      	bx	lr
 800429e:	bf00      	nop
 80042a0:	200005d8 	.word	0x200005d8

080042a4 <getGWfromDHCP>:

void getGWfromDHCP(uint8_t* ip)
{
 80042a4:	b480      	push	{r7}
 80042a6:	b083      	sub	sp, #12
 80042a8:	af00      	add	r7, sp, #0
 80042aa:	6078      	str	r0, [r7, #4]
	ip[0] =DHCP_allocated_gw[0];
 80042ac:	4b0c      	ldr	r3, [pc, #48]	; (80042e0 <getGWfromDHCP+0x3c>)
 80042ae:	781a      	ldrb	r2, [r3, #0]
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	701a      	strb	r2, [r3, #0]
	ip[1] =DHCP_allocated_gw[1];
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	3301      	adds	r3, #1
 80042b8:	4a09      	ldr	r2, [pc, #36]	; (80042e0 <getGWfromDHCP+0x3c>)
 80042ba:	7852      	ldrb	r2, [r2, #1]
 80042bc:	701a      	strb	r2, [r3, #0]
	ip[2] =DHCP_allocated_gw[2];
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	3302      	adds	r3, #2
 80042c2:	4a07      	ldr	r2, [pc, #28]	; (80042e0 <getGWfromDHCP+0x3c>)
 80042c4:	7892      	ldrb	r2, [r2, #2]
 80042c6:	701a      	strb	r2, [r3, #0]
	ip[3] =DHCP_allocated_gw[3];			
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	3303      	adds	r3, #3
 80042cc:	4a04      	ldr	r2, [pc, #16]	; (80042e0 <getGWfromDHCP+0x3c>)
 80042ce:	78d2      	ldrb	r2, [r2, #3]
 80042d0:	701a      	strb	r2, [r3, #0]
}
 80042d2:	bf00      	nop
 80042d4:	370c      	adds	r7, #12
 80042d6:	46bd      	mov	sp, r7
 80042d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042dc:	4770      	bx	lr
 80042de:	bf00      	nop
 80042e0:	200005dc 	.word	0x200005dc

080042e4 <getZABBIXfromDHCP>:

void getZABBIXfromDHCP(uint8_t* ip)
{
 80042e4:	b480      	push	{r7}
 80042e6:	b083      	sub	sp, #12
 80042e8:	af00      	add	r7, sp, #0
 80042ea:	6078      	str	r0, [r7, #4]
	ip[0] =DHCP_allocated_zabbix[0];
 80042ec:	4b0c      	ldr	r3, [pc, #48]	; (8004320 <getZABBIXfromDHCP+0x3c>)
 80042ee:	781a      	ldrb	r2, [r3, #0]
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	701a      	strb	r2, [r3, #0]
	ip[1] =DHCP_allocated_zabbix[1];
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	3301      	adds	r3, #1
 80042f8:	4a09      	ldr	r2, [pc, #36]	; (8004320 <getZABBIXfromDHCP+0x3c>)
 80042fa:	7852      	ldrb	r2, [r2, #1]
 80042fc:	701a      	strb	r2, [r3, #0]
	ip[2] =DHCP_allocated_zabbix[2];
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	3302      	adds	r3, #2
 8004302:	4a07      	ldr	r2, [pc, #28]	; (8004320 <getZABBIXfromDHCP+0x3c>)
 8004304:	7892      	ldrb	r2, [r2, #2]
 8004306:	701a      	strb	r2, [r3, #0]
	ip[3] =DHCP_allocated_zabbix[3];
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	3303      	adds	r3, #3
 800430c:	4a04      	ldr	r2, [pc, #16]	; (8004320 <getZABBIXfromDHCP+0x3c>)
 800430e:	78d2      	ldrb	r2, [r2, #3]
 8004310:	701a      	strb	r2, [r3, #0]
}
 8004312:	bf00      	nop
 8004314:	370c      	adds	r7, #12
 8004316:	46bd      	mov	sp, r7
 8004318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800431c:	4770      	bx	lr
 800431e:	bf00      	nop
 8004320:	200005ec 	.word	0x200005ec

08004324 <getHostNamefromDHCP>:

void getHostNamefromDHCP(uint8_t * host)
{
 8004324:	b480      	push	{r7}
 8004326:	b085      	sub	sp, #20
 8004328:	af00      	add	r7, sp, #0
 800432a:	6078      	str	r0, [r7, #4]
	int iii;
	for (iii = 0; iii < 255; iii++) {
 800432c:	2300      	movs	r3, #0
 800432e:	60fb      	str	r3, [r7, #12]
 8004330:	e010      	b.n	8004354 <getHostNamefromDHCP+0x30>
		host[iii] = DHCP_allocated_hostname[iii];
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	687a      	ldr	r2, [r7, #4]
 8004336:	4413      	add	r3, r2
 8004338:	490c      	ldr	r1, [pc, #48]	; (800436c <getHostNamefromDHCP+0x48>)
 800433a:	68fa      	ldr	r2, [r7, #12]
 800433c:	440a      	add	r2, r1
 800433e:	7812      	ldrb	r2, [r2, #0]
 8004340:	701a      	strb	r2, [r3, #0]
		if (DHCP_allocated_hostname[iii] == '\0') {
 8004342:	4a0a      	ldr	r2, [pc, #40]	; (800436c <getHostNamefromDHCP+0x48>)
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	4413      	add	r3, r2
 8004348:	781b      	ldrb	r3, [r3, #0]
 800434a:	2b00      	cmp	r3, #0
 800434c:	d006      	beq.n	800435c <getHostNamefromDHCP+0x38>
	for (iii = 0; iii < 255; iii++) {
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	3301      	adds	r3, #1
 8004352:	60fb      	str	r3, [r7, #12]
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	2bfe      	cmp	r3, #254	; 0xfe
 8004358:	ddeb      	ble.n	8004332 <getHostNamefromDHCP+0xe>
			break;
		}
	}
	//host[0] = 'A';
	//host[1] = '\0';
}
 800435a:	e000      	b.n	800435e <getHostNamefromDHCP+0x3a>
			break;
 800435c:	bf00      	nop
}
 800435e:	bf00      	nop
 8004360:	3714      	adds	r7, #20
 8004362:	46bd      	mov	sp, r7
 8004364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004368:	4770      	bx	lr
 800436a:	bf00      	nop
 800436c:	200005f0 	.word	0x200005f0

08004370 <getSNfromDHCP>:

void getSNfromDHCP(uint8_t* ip)
{
 8004370:	b480      	push	{r7}
 8004372:	b083      	sub	sp, #12
 8004374:	af00      	add	r7, sp, #0
 8004376:	6078      	str	r0, [r7, #4]
   ip[0] = DHCP_allocated_sn[0];
 8004378:	4b0c      	ldr	r3, [pc, #48]	; (80043ac <getSNfromDHCP+0x3c>)
 800437a:	781a      	ldrb	r2, [r3, #0]
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	701a      	strb	r2, [r3, #0]
   ip[1] = DHCP_allocated_sn[1];
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	3301      	adds	r3, #1
 8004384:	4a09      	ldr	r2, [pc, #36]	; (80043ac <getSNfromDHCP+0x3c>)
 8004386:	7852      	ldrb	r2, [r2, #1]
 8004388:	701a      	strb	r2, [r3, #0]
   ip[2] = DHCP_allocated_sn[2];
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	3302      	adds	r3, #2
 800438e:	4a07      	ldr	r2, [pc, #28]	; (80043ac <getSNfromDHCP+0x3c>)
 8004390:	7892      	ldrb	r2, [r2, #2]
 8004392:	701a      	strb	r2, [r3, #0]
   ip[3] = DHCP_allocated_sn[3];         
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	3303      	adds	r3, #3
 8004398:	4a04      	ldr	r2, [pc, #16]	; (80043ac <getSNfromDHCP+0x3c>)
 800439a:	78d2      	ldrb	r2, [r2, #3]
 800439c:	701a      	strb	r2, [r3, #0]
}
 800439e:	bf00      	nop
 80043a0:	370c      	adds	r7, #12
 80043a2:	46bd      	mov	sp, r7
 80043a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043a8:	4770      	bx	lr
 80043aa:	bf00      	nop
 80043ac:	200005e0 	.word	0x200005e0

080043b0 <NibbleToHex>:
{
	return dhcp_lease_time;
}

char NibbleToHex(uint8_t nibble)
{
 80043b0:	b480      	push	{r7}
 80043b2:	b083      	sub	sp, #12
 80043b4:	af00      	add	r7, sp, #0
 80043b6:	4603      	mov	r3, r0
 80043b8:	71fb      	strb	r3, [r7, #7]
  nibble &= 0x0F;
 80043ba:	79fb      	ldrb	r3, [r7, #7]
 80043bc:	f003 030f 	and.w	r3, r3, #15
 80043c0:	71fb      	strb	r3, [r7, #7]
  if (nibble <= 9)
 80043c2:	79fb      	ldrb	r3, [r7, #7]
 80043c4:	2b09      	cmp	r3, #9
 80043c6:	d803      	bhi.n	80043d0 <NibbleToHex+0x20>
    return nibble + '0';
 80043c8:	79fb      	ldrb	r3, [r7, #7]
 80043ca:	3330      	adds	r3, #48	; 0x30
 80043cc:	b2db      	uxtb	r3, r3
 80043ce:	e002      	b.n	80043d6 <NibbleToHex+0x26>
  else 
    return nibble + ('A'-0x0A);
 80043d0:	79fb      	ldrb	r3, [r7, #7]
 80043d2:	3337      	adds	r3, #55	; 0x37
 80043d4:	b2db      	uxtb	r3, r3
}
 80043d6:	4618      	mov	r0, r3
 80043d8:	370c      	adds	r7, #12
 80043da:	46bd      	mov	sp, r7
 80043dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043e0:	4770      	bx	lr
	...

080043e4 <AD5245level>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
#ifdef  AD5245
/* Управление усилением от 0 до 254 */
void AD5245level(uint8_t lev) {
 80043e4:	b580      	push	{r7, lr}
 80043e6:	b088      	sub	sp, #32
 80043e8:	af04      	add	r7, sp, #16
 80043ea:	4603      	mov	r3, r0
 80043ec:	71fb      	strb	r3, [r7, #7]
	uint8_t cmdBuff[2];
	uint16_t cmd = AD5245_WRITE;
 80043ee:	2300      	movs	r3, #0
 80043f0:	81fb      	strh	r3, [r7, #14]
	cmdBuff[0] = lev;
 80043f2:	79fb      	ldrb	r3, [r7, #7]
 80043f4:	733b      	strb	r3, [r7, #12]
	HAL_I2C_Mem_Write(&AD5245_I2C_PORT, AD5245_I2C_ADDR, cmd, 2, cmdBuff, 1, 100);
 80043f6:	89fa      	ldrh	r2, [r7, #14]
 80043f8:	2364      	movs	r3, #100	; 0x64
 80043fa:	9302      	str	r3, [sp, #8]
 80043fc:	2301      	movs	r3, #1
 80043fe:	9301      	str	r3, [sp, #4]
 8004400:	f107 030c 	add.w	r3, r7, #12
 8004404:	9300      	str	r3, [sp, #0]
 8004406:	2302      	movs	r3, #2
 8004408:	2158      	movs	r1, #88	; 0x58
 800440a:	4803      	ldr	r0, [pc, #12]	; (8004418 <AD5245level+0x34>)
 800440c:	f007 ffd6 	bl	800c3bc <HAL_I2C_Mem_Write>
}
 8004410:	bf00      	nop
 8004412:	3710      	adds	r7, #16
 8004414:	46bd      	mov	sp, r7
 8004416:	bd80      	pop	{r7, pc}
 8004418:	200007d4 	.word	0x200007d4

0800441c <W5500_Select>:
	va_end(args);
}
#endif


void W5500_Select(void) {
 800441c:	b580      	push	{r7, lr}
 800441e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(W5500_CS_GPIO_Port, W5500_CS_Pin, GPIO_PIN_RESET);
 8004420:	2200      	movs	r2, #0
 8004422:	2110      	movs	r1, #16
 8004424:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004428:	f007 ff20 	bl	800c26c <HAL_GPIO_WritePin>
}
 800442c:	bf00      	nop
 800442e:	bd80      	pop	{r7, pc}

08004430 <W5500_Unselect>:

void W5500_Unselect(void) {
 8004430:	b580      	push	{r7, lr}
 8004432:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(W5500_CS_GPIO_Port, W5500_CS_Pin, GPIO_PIN_SET);
 8004434:	2201      	movs	r2, #1
 8004436:	2110      	movs	r1, #16
 8004438:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800443c:	f007 ff16 	bl	800c26c <HAL_GPIO_WritePin>
}
 8004440:	bf00      	nop
 8004442:	bd80      	pop	{r7, pc}

08004444 <W5500_ReadBuff>:

void W5500_ReadBuff(uint8_t* buff, uint16_t len) {
 8004444:	b580      	push	{r7, lr}
 8004446:	b082      	sub	sp, #8
 8004448:	af00      	add	r7, sp, #0
 800444a:	6078      	str	r0, [r7, #4]
 800444c:	460b      	mov	r3, r1
 800444e:	807b      	strh	r3, [r7, #2]
	HAL_SPI_Receive(&hspi1, buff, len, HAL_MAX_DELAY);
 8004450:	887a      	ldrh	r2, [r7, #2]
 8004452:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004456:	6879      	ldr	r1, [r7, #4]
 8004458:	4803      	ldr	r0, [pc, #12]	; (8004468 <W5500_ReadBuff+0x24>)
 800445a:	f009 ffb4 	bl	800e3c6 <HAL_SPI_Receive>
}
 800445e:	bf00      	nop
 8004460:	3708      	adds	r7, #8
 8004462:	46bd      	mov	sp, r7
 8004464:	bd80      	pop	{r7, pc}
 8004466:	bf00      	nop
 8004468:	20000830 	.word	0x20000830

0800446c <W5500_WriteBuff>:

void W5500_WriteBuff(uint8_t* buff, uint16_t len) {
 800446c:	b580      	push	{r7, lr}
 800446e:	b082      	sub	sp, #8
 8004470:	af00      	add	r7, sp, #0
 8004472:	6078      	str	r0, [r7, #4]
 8004474:	460b      	mov	r3, r1
 8004476:	807b      	strh	r3, [r7, #2]
	HAL_SPI_Transmit(&hspi1, buff, len, HAL_MAX_DELAY);
 8004478:	887a      	ldrh	r2, [r7, #2]
 800447a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800447e:	6879      	ldr	r1, [r7, #4]
 8004480:	4803      	ldr	r0, [pc, #12]	; (8004490 <W5500_WriteBuff+0x24>)
 8004482:	f009 fe32 	bl	800e0ea <HAL_SPI_Transmit>
}
 8004486:	bf00      	nop
 8004488:	3708      	adds	r7, #8
 800448a:	46bd      	mov	sp, r7
 800448c:	bd80      	pop	{r7, pc}
 800448e:	bf00      	nop
 8004490:	20000830 	.word	0x20000830

08004494 <W5500_ReadByte>:

uint8_t W5500_ReadByte(void) {
 8004494:	b580      	push	{r7, lr}
 8004496:	b082      	sub	sp, #8
 8004498:	af00      	add	r7, sp, #0
	uint8_t byte;
	W5500_ReadBuff(&byte, sizeof(byte));
 800449a:	1dfb      	adds	r3, r7, #7
 800449c:	2101      	movs	r1, #1
 800449e:	4618      	mov	r0, r3
 80044a0:	f7ff ffd0 	bl	8004444 <W5500_ReadBuff>
	return byte;
 80044a4:	79fb      	ldrb	r3, [r7, #7]
}
 80044a6:	4618      	mov	r0, r3
 80044a8:	3708      	adds	r7, #8
 80044aa:	46bd      	mov	sp, r7
 80044ac:	bd80      	pop	{r7, pc}

080044ae <W5500_WriteByte>:

void W5500_WriteByte(uint8_t byte) {
 80044ae:	b580      	push	{r7, lr}
 80044b0:	b082      	sub	sp, #8
 80044b2:	af00      	add	r7, sp, #0
 80044b4:	4603      	mov	r3, r0
 80044b6:	71fb      	strb	r3, [r7, #7]
	W5500_WriteBuff(&byte, sizeof(byte));
 80044b8:	1dfb      	adds	r3, r7, #7
 80044ba:	2101      	movs	r1, #1
 80044bc:	4618      	mov	r0, r3
 80044be:	f7ff ffd5 	bl	800446c <W5500_WriteBuff>
}
 80044c2:	bf00      	nop
 80044c4:	3708      	adds	r7, #8
 80044c6:	46bd      	mov	sp, r7
 80044c8:	bd80      	pop	{r7, pc}
	...

080044cc <Callback_IPAssigned>:

volatile bool ip_assigned = false;

void Callback_IPAssigned(void) {
 80044cc:	b480      	push	{r7}
 80044ce:	af00      	add	r7, sp, #0
#ifdef ZABBIX_DEBUG
	UART_Printf("Callback: IP assigned! Leased time: %d sec\r\n", getDHCPLeasetime());
#endif
    ip_assigned = true;
 80044d0:	4b03      	ldr	r3, [pc, #12]	; (80044e0 <Callback_IPAssigned+0x14>)
 80044d2:	2201      	movs	r2, #1
 80044d4:	701a      	strb	r2, [r3, #0]
}
 80044d6:	bf00      	nop
 80044d8:	46bd      	mov	sp, r7
 80044da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044de:	4770      	bx	lr
 80044e0:	20000bbb 	.word	0x20000bbb

080044e4 <Callback_IPConflict>:

void Callback_IPConflict(void) {
 80044e4:	b480      	push	{r7}
 80044e6:	af00      	add	r7, sp, #0
#ifdef ZABBIX_DEBUG
    UART_Printf("Callback: IP conflict!\r\n");
#endif
}
 80044e8:	bf00      	nop
 80044ea:	46bd      	mov	sp, r7
 80044ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044f0:	4770      	bx	lr
	...

080044f4 <init_w5500>:
    return(0);
}



void init_w5500() {
 80044f4:	b580      	push	{r7, lr}
 80044f6:	b084      	sub	sp, #16
 80044f8:	af00      	add	r7, sp, #0
	#ifdef ZABBIX_DEBUG
    UART_Printf("\r\ninit() called!\r\n");
    UART_Printf("W5500 callbacks...\r\n");
	#endif
    reg_wizchip_cs_cbfunc(W5500_Select, W5500_Unselect);
 80044fa:	4936      	ldr	r1, [pc, #216]	; (80045d4 <init_w5500+0xe0>)
 80044fc:	4836      	ldr	r0, [pc, #216]	; (80045d8 <init_w5500+0xe4>)
 80044fe:	f005 f957 	bl	80097b0 <reg_wizchip_cs_cbfunc>
    reg_wizchip_spi_cbfunc(W5500_ReadByte, W5500_WriteByte);
 8004502:	4936      	ldr	r1, [pc, #216]	; (80045dc <init_w5500+0xe8>)
 8004504:	4836      	ldr	r0, [pc, #216]	; (80045e0 <init_w5500+0xec>)
 8004506:	f005 f979 	bl	80097fc <reg_wizchip_spi_cbfunc>
    reg_wizchip_spiburst_cbfunc(W5500_ReadBuff, W5500_WriteBuff);
 800450a:	4936      	ldr	r1, [pc, #216]	; (80045e4 <init_w5500+0xf0>)
 800450c:	4836      	ldr	r0, [pc, #216]	; (80045e8 <init_w5500+0xf4>)
 800450e:	f005 f9a1 	bl	8009854 <reg_wizchip_spiburst_cbfunc>
	#ifdef ZABBIX_DEBUG
    UART_Printf("wizchip_init()...\r\n");
	#endif
    uint8_t rx_tx_buff_sizes[] = {2, 2, 2, 2, 2, 2, 2, 2};
 8004512:	4a36      	ldr	r2, [pc, #216]	; (80045ec <init_w5500+0xf8>)
 8004514:	1d3b      	adds	r3, r7, #4
 8004516:	e892 0003 	ldmia.w	r2, {r0, r1}
 800451a:	e883 0003 	stmia.w	r3, {r0, r1}
    wizchip_init(rx_tx_buff_sizes, rx_tx_buff_sizes);
 800451e:	1d3a      	adds	r2, r7, #4
 8004520:	1d3b      	adds	r3, r7, #4
 8004522:	4611      	mov	r1, r2
 8004524:	4618      	mov	r0, r3
 8004526:	f005 fa0d 	bl	8009944 <wizchip_init>
	#ifdef ZABBIX_DEBUG
    UART_Printf("DHCP_init()...\r\n");
	#endif

    // set MAC address before using DHCP
    setSHAR(net_info.mac);
 800452a:	2206      	movs	r2, #6
 800452c:	4930      	ldr	r1, [pc, #192]	; (80045f0 <init_w5500+0xfc>)
 800452e:	f44f 6010 	mov.w	r0, #2304	; 0x900
 8004532:	f004 fee3 	bl	80092fc <WIZCHIP_WRITE_BUF>
    DHCP_init(DHCP_SOCKET, dhcp_buffer);
 8004536:	492f      	ldr	r1, [pc, #188]	; (80045f4 <init_w5500+0x100>)
 8004538:	2000      	movs	r0, #0
 800453a:	f7ff fddb 	bl	80040f4 <DHCP_init>
	#ifdef ZABBIX_DEBUG
    UART_Printf("DHCP callbacks...\r\n");
	#endif
    reg_dhcp_cbfunc(Callback_IPAssigned, Callback_IPAssigned, Callback_IPConflict);
 800453e:	4a2e      	ldr	r2, [pc, #184]	; (80045f8 <init_w5500+0x104>)
 8004540:	492e      	ldr	r1, [pc, #184]	; (80045fc <init_w5500+0x108>)
 8004542:	482e      	ldr	r0, [pc, #184]	; (80045fc <init_w5500+0x108>)
 8004544:	f7fe fa92 	bl	8002a6c <reg_dhcp_cbfunc>
	#ifdef ZABBIX_DEBUG
    UART_Printf("DHCP_run()...\r\n");
	#endif
    // actually should be called in a loop, e.g. by timer
    uint32_t ctr = 10000;
 8004548:	f242 7310 	movw	r3, #10000	; 0x2710
 800454c:	60fb      	str	r3, [r7, #12]
    while((!ip_assigned) && (ctr > 0)) {
 800454e:	e008      	b.n	8004562 <init_w5500+0x6e>
        DHCP_run();
 8004550:	f7ff fc18 	bl	8003d84 <DHCP_run>
        ctr--;
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	3b01      	subs	r3, #1
 8004558:	60fb      	str	r3, [r7, #12]
        HAL_Delay(300);
 800455a:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800455e:	f005 fb57 	bl	8009c10 <HAL_Delay>
    while((!ip_assigned) && (ctr > 0)) {
 8004562:	4b27      	ldr	r3, [pc, #156]	; (8004600 <init_w5500+0x10c>)
 8004564:	781b      	ldrb	r3, [r3, #0]
 8004566:	b2db      	uxtb	r3, r3
 8004568:	f083 0301 	eor.w	r3, r3, #1
 800456c:	b2db      	uxtb	r3, r3
 800456e:	2b00      	cmp	r3, #0
 8004570:	d002      	beq.n	8004578 <init_w5500+0x84>
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	2b00      	cmp	r3, #0
 8004576:	d1eb      	bne.n	8004550 <init_w5500+0x5c>
    }
    if(!ip_assigned) {
 8004578:	4b21      	ldr	r3, [pc, #132]	; (8004600 <init_w5500+0x10c>)
 800457a:	781b      	ldrb	r3, [r3, #0]
 800457c:	b2db      	uxtb	r3, r3
 800457e:	f083 0301 	eor.w	r3, r3, #1
 8004582:	b2db      	uxtb	r3, r3
 8004584:	2b00      	cmp	r3, #0
 8004586:	d121      	bne.n	80045cc <init_w5500+0xd8>
        UART_Printf("\r\nIP was not assigned :(\r\n");
		#endif
        return;
    }

    getIPfromDHCP(net_info.ip);
 8004588:	481e      	ldr	r0, [pc, #120]	; (8004604 <init_w5500+0x110>)
 800458a:	f7ff fe6b 	bl	8004264 <getIPfromDHCP>
    getGWfromDHCP(net_info.gw);
 800458e:	481e      	ldr	r0, [pc, #120]	; (8004608 <init_w5500+0x114>)
 8004590:	f7ff fe88 	bl	80042a4 <getGWfromDHCP>
    getSNfromDHCP(net_info.sn);
 8004594:	481d      	ldr	r0, [pc, #116]	; (800460c <init_w5500+0x118>)
 8004596:	f7ff feeb 	bl	8004370 <getSNfromDHCP>
    getZABBIXfromDHCP(net_info.zabbix);
 800459a:	481d      	ldr	r0, [pc, #116]	; (8004610 <init_w5500+0x11c>)
 800459c:	f7ff fea2 	bl	80042e4 <getZABBIXfromDHCP>
    getHostNamefromDHCP(net_info.hostname);
 80045a0:	481c      	ldr	r0, [pc, #112]	; (8004614 <init_w5500+0x120>)
 80045a2:	f7ff febf 	bl	8004324 <getHostNamefromDHCP>
    //getTimeSrvfromDHCP(net_info.tmsrv);
    if (net_info.hostname[0] == '\0') {
 80045a6:	4b12      	ldr	r3, [pc, #72]	; (80045f0 <init_w5500+0xfc>)
 80045a8:	7f9b      	ldrb	r3, [r3, #30]
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d105      	bne.n	80045ba <init_w5500+0xc6>
    	sprintf(ZabbixHostName, "%s", ZABBIXAGHOST);
 80045ae:	4a1a      	ldr	r2, [pc, #104]	; (8004618 <init_w5500+0x124>)
 80045b0:	491a      	ldr	r1, [pc, #104]	; (800461c <init_w5500+0x128>)
 80045b2:	481b      	ldr	r0, [pc, #108]	; (8004620 <init_w5500+0x12c>)
 80045b4:	f00d fd24 	bl	8012000 <siprintf>
 80045b8:	e004      	b.n	80045c4 <init_w5500+0xd0>
    } else {
    	sprintf(ZabbixHostName, "%s", net_info.hostname);
 80045ba:	4a16      	ldr	r2, [pc, #88]	; (8004614 <init_w5500+0x120>)
 80045bc:	4917      	ldr	r1, [pc, #92]	; (800461c <init_w5500+0x128>)
 80045be:	4818      	ldr	r0, [pc, #96]	; (8004620 <init_w5500+0x12c>)
 80045c0:	f00d fd1e 	bl	8012000 <siprintf>
        net_info.zabbix[0], net_info.zabbix[1], net_info.zabbix[2], net_info.zabbix[3],
		ZabbixHostName
    );
    UART_Printf("Calling wizchip_setnetinfo()...\r\n");
	#endif
    wizchip_setnetinfo(&net_info);
 80045c4:	480a      	ldr	r0, [pc, #40]	; (80045f0 <init_w5500+0xfc>)
 80045c6:	f005 fa49 	bl	8009a5c <wizchip_setnetinfo>
 80045ca:	e000      	b.n	80045ce <init_w5500+0xda>
        return;
 80045cc:	bf00      	nop

}
 80045ce:	3710      	adds	r7, #16
 80045d0:	46bd      	mov	sp, r7
 80045d2:	bd80      	pop	{r7, pc}
 80045d4:	08004431 	.word	0x08004431
 80045d8:	0800441d 	.word	0x0800441d
 80045dc:	080044af 	.word	0x080044af
 80045e0:	08004495 	.word	0x08004495
 80045e4:	0800446d 	.word	0x0800446d
 80045e8:	08004445 	.word	0x08004445
 80045ec:	08014b2c 	.word	0x08014b2c
 80045f0:	2000001c 	.word	0x2000001c
 80045f4:	20000bbc 	.word	0x20000bbc
 80045f8:	080044e5 	.word	0x080044e5
 80045fc:	080044cd 	.word	0x080044cd
 8004600:	20000bbb 	.word	0x20000bbb
 8004604:	20000022 	.word	0x20000022
 8004608:	2000002a 	.word	0x2000002a
 800460c:	20000026 	.word	0x20000026
 8004610:	20000036 	.word	0x20000036
 8004614:	2000003a 	.word	0x2000003a
 8004618:	08014b18 	.word	0x08014b18
 800461c:	08014b28 	.word	0x08014b28
 8004620:	20000abc 	.word	0x20000abc
 8004624:	00000000 	.word	0x00000000

08004628 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8004628:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800462c:	b094      	sub	sp, #80	; 0x50
 800462e:	af0c      	add	r7, sp, #48	; 0x30
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8004630:	f005 fa7d 	bl	8009b2e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8004634:	f000 fa64 	bl	8004b00 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8004638:	f000 fe00 	bl	800523c <MX_GPIO_Init>
  MX_DMA_Init();
 800463c:	f000 fdd4 	bl	80051e8 <MX_DMA_Init>
  MX_ADC1_Init();
 8004640:	f000 fab0 	bl	8004ba4 <MX_ADC1_Init>
  MX_I2C1_Init();
 8004644:	f000 fb28 	bl	8004c98 <MX_I2C1_Init>
  MX_TIM1_Init();
 8004648:	f000 fbc2 	bl	8004dd0 <MX_TIM1_Init>
  MX_USART1_UART_Init();
 800464c:	f000 fd80 	bl	8005150 <MX_USART1_UART_Init>
  MX_TIM3_Init();
 8004650:	f000 fc9c 	bl	8004f8c <MX_TIM3_Init>
  MX_TIM4_Init();
 8004654:	f000 fd2e 	bl	80050b4 <MX_TIM4_Init>
  MX_SPI1_Init();
 8004658:	f000 fb7c 	bl	8004d54 <MX_SPI1_Init>
  MX_IWDG_Init();
 800465c:	f000 fb5c 	bl	8004d18 <MX_IWDG_Init>
  /* USER CODE BEGIN 2 */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 8004660:	2201      	movs	r2, #1
 8004662:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8004666:	485d      	ldr	r0, [pc, #372]	; (80047dc <main+0x1b4>)
 8004668:	f007 fe00 	bl	800c26c <HAL_GPIO_WritePin>
  HAL_UART_Transmit(&huart1, (uint8_t *) START_TEXT, sizeof(START_TEXT), 1000);
 800466c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004670:	2216      	movs	r2, #22
 8004672:	495b      	ldr	r1, [pc, #364]	; (80047e0 <main+0x1b8>)
 8004674:	485b      	ldr	r0, [pc, #364]	; (80047e4 <main+0x1bc>)
 8004676:	f00c f9cf 	bl	8010a18 <HAL_UART_Transmit>
  /* AD5245 */
	#ifdef AD5245
  	  HAL_UART_Transmit(&huart1, (uint8_t *) AD5245_INIT_TEXT, sizeof(AD5245_INIT_TEXT), 1000);
 800467a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800467e:	220f      	movs	r2, #15
 8004680:	4959      	ldr	r1, [pc, #356]	; (80047e8 <main+0x1c0>)
 8004682:	4858      	ldr	r0, [pc, #352]	; (80047e4 <main+0x1bc>)
 8004684:	f00c f9c8 	bl	8010a18 <HAL_UART_Transmit>
	  currentLevel = 0;
 8004688:	4b58      	ldr	r3, [pc, #352]	; (80047ec <main+0x1c4>)
 800468a:	2200      	movs	r2, #0
 800468c:	701a      	strb	r2, [r3, #0]
	  AD5245level(currentLevel);
 800468e:	4b57      	ldr	r3, [pc, #348]	; (80047ec <main+0x1c4>)
 8004690:	781b      	ldrb	r3, [r3, #0]
 8004692:	4618      	mov	r0, r3
 8004694:	f7ff fea6 	bl	80043e4 <AD5245level>
	#endif
	#ifdef BME280_ENABLE
	  HAL_UART_Transmit(&huart1, (uint8_t *) BME280_INIT_TEXT, sizeof(BME280_INIT_TEXT), 1000);
 8004698:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800469c:	220d      	movs	r2, #13
 800469e:	4954      	ldr	r1, [pc, #336]	; (80047f0 <main+0x1c8>)
 80046a0:	4850      	ldr	r0, [pc, #320]	; (80047e4 <main+0x1bc>)
 80046a2:	f00c f9b9 	bl	8010a18 <HAL_UART_Transmit>
	  BME280_Init();
 80046a6:	f7fd fa41 	bl	8001b2c <BME280_Init>
	  HAL_UART_Transmit(&huart1, (uint8_t *) INIT_OK, sizeof(INIT_OK), 1000);
 80046aa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80046ae:	2205      	movs	r2, #5
 80046b0:	4950      	ldr	r1, [pc, #320]	; (80047f4 <main+0x1cc>)
 80046b2:	484c      	ldr	r0, [pc, #304]	; (80047e4 <main+0x1bc>)
 80046b4:	f00c f9b0 	bl	8010a18 <HAL_UART_Transmit>
	#endif

	HAL_GPIO_WritePin(W5500_CS_GPIO_Port, W5500_CS_Pin, GPIO_PIN_SET);
 80046b8:	2201      	movs	r2, #1
 80046ba:	2110      	movs	r1, #16
 80046bc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80046c0:	f007 fdd4 	bl	800c26c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(W5500_RST_GPIO_Port, W5500_RST_Pin, GPIO_PIN_RESET);	// Reset W5500
 80046c4:	2200      	movs	r2, #0
 80046c6:	2108      	movs	r1, #8
 80046c8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80046cc:	f007 fdce 	bl	800c26c <HAL_GPIO_WritePin>
	#ifdef ZABBIX_ENABLE
	HAL_UART_Transmit(&huart1, (uint8_t *) W5500_INIT_TEXT, sizeof(W5500_INIT_TEXT), 1000);
 80046d0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80046d4:	220d      	movs	r2, #13
 80046d6:	4948      	ldr	r1, [pc, #288]	; (80047f8 <main+0x1d0>)
 80046d8:	4842      	ldr	r0, [pc, #264]	; (80047e4 <main+0x1bc>)
 80046da:	f00c f99d 	bl	8010a18 <HAL_UART_Transmit>
	HAL_GPIO_WritePin(W5500_RST_GPIO_Port, W5500_RST_Pin, GPIO_PIN_SET);
 80046de:	2201      	movs	r2, #1
 80046e0:	2108      	movs	r1, #8
 80046e2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80046e6:	f007 fdc1 	bl	800c26c <HAL_GPIO_WritePin>
	//HAL_GPIO_WritePin(W5500_CS_GPIO_Port, W5500_CS_Pin, GPIO_PIN_RESET);
	HAL_Delay(3000);
 80046ea:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80046ee:	f005 fa8f 	bl	8009c10 <HAL_Delay>
	init_w5500();
 80046f2:	f7ff feff 	bl	80044f4 <init_w5500>
    HAL_UART_Transmit(&huart1, (uint8_t *) INIT_OK, sizeof(INIT_OK), 1000);
 80046f6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80046fa:	2205      	movs	r2, #5
 80046fc:	493d      	ldr	r1, [pc, #244]	; (80047f4 <main+0x1cc>)
 80046fe:	4839      	ldr	r0, [pc, #228]	; (80047e4 <main+0x1bc>)
 8004700:	f00c f98a 	bl	8010a18 <HAL_UART_Transmit>
	#endif
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  HAL_UART_Transmit(&huart1, (uint8_t *) ADC_TMR_INIT_TEXT, sizeof(ADC_TMR_INIT_TEXT), 1000);
 8004704:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004708:	2211      	movs	r2, #17
 800470a:	493c      	ldr	r1, [pc, #240]	; (80047fc <main+0x1d4>)
 800470c:	4835      	ldr	r0, [pc, #212]	; (80047e4 <main+0x1bc>)
 800470e:	f00c f983 	bl	8010a18 <HAL_UART_Transmit>
  TIM3->ARR = MEASURMENT_DELAY;
 8004712:	4b3b      	ldr	r3, [pc, #236]	; (8004800 <main+0x1d8>)
 8004714:	f649 5208 	movw	r2, #40200	; 0x9d08
 8004718:	62da      	str	r2, [r3, #44]	; 0x2c

  HAL_GPIO_WritePin(selZ1_GPIO_Port, selZ1_Pin, GPIO_PIN_RESET);
 800471a:	2200      	movs	r2, #0
 800471c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8004720:	4838      	ldr	r0, [pc, #224]	; (8004804 <main+0x1dc>)
 8004722:	f007 fda3 	bl	800c26c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(selZ2_GPIO_Port, selZ2_Pin, GPIO_PIN_RESET);
 8004726:	2200      	movs	r2, #0
 8004728:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800472c:	4835      	ldr	r0, [pc, #212]	; (8004804 <main+0x1dc>)
 800472e:	f007 fd9d 	bl	800c26c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(selZ3_GPIO_Port, selZ3_Pin, GPIO_PIN_RESET);
 8004732:	2200      	movs	r2, #0
 8004734:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8004738:	4832      	ldr	r0, [pc, #200]	; (8004804 <main+0x1dc>)
 800473a:	f007 fd97 	bl	800c26c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(selZ4_GPIO_Port, selZ4_Pin, GPIO_PIN_RESET);
 800473e:	2200      	movs	r2, #0
 8004740:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8004744:	482f      	ldr	r0, [pc, #188]	; (8004804 <main+0x1dc>)
 8004746:	f007 fd91 	bl	800c26c <HAL_GPIO_WritePin>

  if ( (HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED) == HAL_OK)
 800474a:	217f      	movs	r1, #127	; 0x7f
 800474c:	482e      	ldr	r0, [pc, #184]	; (8004808 <main+0x1e0>)
 800474e:	f006 feab 	bl	800b4a8 <HAL_ADCEx_Calibration_Start>
 8004752:	4603      	mov	r3, r0
 8004754:	2b00      	cmp	r3, #0
 8004756:	d113      	bne.n	8004780 <main+0x158>
	&& (HAL_TIM_Base_Start_IT(&htim3) == HAL_OK)
 8004758:	482c      	ldr	r0, [pc, #176]	; (800480c <main+0x1e4>)
 800475a:	f00a fb8b 	bl	800ee74 <HAL_TIM_Base_Start_IT>
 800475e:	4603      	mov	r3, r0
 8004760:	2b00      	cmp	r3, #0
 8004762:	d10d      	bne.n	8004780 <main+0x158>
	&& (HAL_TIM_Base_Start_IT(&htim4) == HAL_OK) ) {
 8004764:	482a      	ldr	r0, [pc, #168]	; (8004810 <main+0x1e8>)
 8004766:	f00a fb85 	bl	800ee74 <HAL_TIM_Base_Start_IT>
 800476a:	4603      	mov	r3, r0
 800476c:	2b00      	cmp	r3, #0
 800476e:	d107      	bne.n	8004780 <main+0x158>
	  HAL_UART_Transmit(&huart1, (uint8_t *) INIT_OK, sizeof(INIT_OK), 1000);
 8004770:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004774:	2205      	movs	r2, #5
 8004776:	491f      	ldr	r1, [pc, #124]	; (80047f4 <main+0x1cc>)
 8004778:	481a      	ldr	r0, [pc, #104]	; (80047e4 <main+0x1bc>)
 800477a:	f00c f94d 	bl	8010a18 <HAL_UART_Transmit>
 800477e:	e00c      	b.n	800479a <main+0x172>
  } else {
	  HAL_UART_Transmit(&huart1, (uint8_t *) ERROR_TEXT, sizeof(ERROR_TEXT), 1000);
 8004780:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004784:	2216      	movs	r2, #22
 8004786:	4923      	ldr	r1, [pc, #140]	; (8004814 <main+0x1ec>)
 8004788:	4816      	ldr	r0, [pc, #88]	; (80047e4 <main+0x1bc>)
 800478a:	f00c f945 	bl	8010a18 <HAL_UART_Transmit>
	  HAL_Delay(1000);
 800478e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004792:	f005 fa3d 	bl	8009c10 <HAL_Delay>
	  HAL_NVIC_SystemReset();
 8004796:	f007 f90a 	bl	800b9ae <HAL_NVIC_SystemReset>
  }

  HAL_UART_Transmit(&huart1, (uint8_t *) FINISH_TEXT, sizeof(FINISH_TEXT), 1000);
 800479a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800479e:	220f      	movs	r2, #15
 80047a0:	491d      	ldr	r1, [pc, #116]	; (8004818 <main+0x1f0>)
 80047a2:	4810      	ldr	r0, [pc, #64]	; (80047e4 <main+0x1bc>)
 80047a4:	f00c f938 	bl	8010a18 <HAL_UART_Transmit>
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 80047a8:	2200      	movs	r2, #0
 80047aa:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80047ae:	480b      	ldr	r0, [pc, #44]	; (80047dc <main+0x1b4>)
 80047b0:	f007 fd5c 	bl	800c26c <HAL_GPIO_WritePin>
  while (1)
  {
	  if (readyData) {
 80047b4:	4b19      	ldr	r3, [pc, #100]	; (800481c <main+0x1f4>)
 80047b6:	781b      	ldrb	r3, [r3, #0]
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	f000 815e 	beq.w	8004a7a <main+0x452>
		  HAL_IWDG_Refresh(&hiwdg);
 80047be:	4818      	ldr	r0, [pc, #96]	; (8004820 <main+0x1f8>)
 80047c0:	f008 fbb6 	bl	800cf30 <HAL_IWDG_Refresh>
		  HAL_TIM_Base_Stop_IT(&htim4);
 80047c4:	4812      	ldr	r0, [pc, #72]	; (8004810 <main+0x1e8>)
 80047c6:	f00a fbcd 	bl	800ef64 <HAL_TIM_Base_Stop_IT>
		  memset(SndBuffer, 0, sizeof(SndBuffer));
 80047ca:	2296      	movs	r2, #150	; 0x96
 80047cc:	2100      	movs	r1, #0
 80047ce:	4815      	ldr	r0, [pc, #84]	; (8004824 <main+0x1fc>)
 80047d0:	f00c ffa4 	bl	801171c <memset>
		  for (int ii = 0; ii < CONVERSION_COUNT; ii++) {
 80047d4:	2300      	movs	r3, #0
 80047d6:	61fb      	str	r3, [r7, #28]
 80047d8:	e03e      	b.n	8004858 <main+0x230>
 80047da:	bf00      	nop
 80047dc:	48000800 	.word	0x48000800
 80047e0:	08014b34 	.word	0x08014b34
 80047e4:	20000978 	.word	0x20000978
 80047e8:	08014b4c 	.word	0x08014b4c
 80047ec:	20000a08 	.word	0x20000a08
 80047f0:	08014b5c 	.word	0x08014b5c
 80047f4:	08014b6c 	.word	0x08014b6c
 80047f8:	08014b74 	.word	0x08014b74
 80047fc:	08014b84 	.word	0x08014b84
 8004800:	40000400 	.word	0x40000400
 8004804:	48000400 	.word	0x48000400
 8004808:	20000708 	.word	0x20000708
 800480c:	200008e0 	.word	0x200008e0
 8004810:	2000092c 	.word	0x2000092c
 8004814:	08014b98 	.word	0x08014b98
 8004818:	08014bb0 	.word	0x08014bb0
 800481c:	200017e2 	.word	0x200017e2
 8004820:	20000820 	.word	0x20000820
 8004824:	20000a0c 	.word	0x20000a0c
			measArray[ii] = measArray[ii] / MEASURE_COUNT - avgLevel;
 8004828:	4a9f      	ldr	r2, [pc, #636]	; (8004aa8 <main+0x480>)
 800482a:	69fb      	ldr	r3, [r7, #28]
 800482c:	009b      	lsls	r3, r3, #2
 800482e:	4413      	add	r3, r2
 8004830:	edd3 7a00 	vldr	s15, [r3]
 8004834:	eef3 6a00 	vmov.f32	s13, #48	; 0x41800000  16.0
 8004838:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800483c:	4b9b      	ldr	r3, [pc, #620]	; (8004aac <main+0x484>)
 800483e:	edd3 7a00 	vldr	s15, [r3]
 8004842:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004846:	4a98      	ldr	r2, [pc, #608]	; (8004aa8 <main+0x480>)
 8004848:	69fb      	ldr	r3, [r7, #28]
 800484a:	009b      	lsls	r3, r3, #2
 800484c:	4413      	add	r3, r2
 800484e:	edc3 7a00 	vstr	s15, [r3]
		  for (int ii = 0; ii < CONVERSION_COUNT; ii++) {
 8004852:	69fb      	ldr	r3, [r7, #28]
 8004854:	3301      	adds	r3, #1
 8004856:	61fb      	str	r3, [r7, #28]
 8004858:	69fb      	ldr	r3, [r7, #28]
 800485a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800485e:	dbe3      	blt.n	8004828 <main+0x200>
		  }

		  maxIdxAmp = maxEnvHilbert(measArray, refArray);
 8004860:	4993      	ldr	r1, [pc, #588]	; (8004ab0 <main+0x488>)
 8004862:	4891      	ldr	r0, [pc, #580]	; (8004aa8 <main+0x480>)
 8004864:	f000 fe38 	bl	80054d8 <maxEnvHilbert>
 8004868:	eef0 7a40 	vmov.f32	s15, s0
 800486c:	4b91      	ldr	r3, [pc, #580]	; (8004ab4 <main+0x48c>)
 800486e:	edc3 7a00 	vstr	s15, [r3]
				HAL_UART_Transmit(&huart1, (uint8_t *) SndBuffer, sizeof(SndBuffer), 1000);
		  }
		  HAL_UART_Transmit(&huart1, (uint8_t *) "---\n\r", sizeof("---\n\r"), 1000);
		  #else
		  #ifdef BME280_ENABLE
		  temperature = BME280_ReadTemperature();
 8004872:	f7fc fcfb 	bl	800126c <BME280_ReadTemperature>
 8004876:	eef0 7a40 	vmov.f32	s15, s0
 800487a:	4b8f      	ldr	r3, [pc, #572]	; (8004ab8 <main+0x490>)
 800487c:	edc3 7a00 	vstr	s15, [r3]
		  pressurePA = BME280_ReadPressure();
 8004880:	f7fc fd66 	bl	8001350 <BME280_ReadPressure>
 8004884:	eef0 7a40 	vmov.f32	s15, s0
 8004888:	4b8c      	ldr	r3, [pc, #560]	; (8004abc <main+0x494>)
 800488a:	edc3 7a00 	vstr	s15, [r3]
		  pressure = pressurePA * 0.00750063755419211f;
 800488e:	4b8b      	ldr	r3, [pc, #556]	; (8004abc <main+0x494>)
 8004890:	edd3 7a00 	vldr	s15, [r3]
 8004894:	ed9f 7a8a 	vldr	s14, [pc, #552]	; 8004ac0 <main+0x498>
 8004898:	ee67 7a87 	vmul.f32	s15, s15, s14
 800489c:	4b89      	ldr	r3, [pc, #548]	; (8004ac4 <main+0x49c>)
 800489e:	edc3 7a00 	vstr	s15, [r3]
		  humidity = BME280_ReadHumidity();
 80048a2:	f7fd f883 	bl	80019ac <BME280_ReadHumidity>
 80048a6:	eef0 7a40 	vmov.f32	s15, s0
 80048aa:	4b87      	ldr	r3, [pc, #540]	; (8004ac8 <main+0x4a0>)
 80048ac:	edc3 7a00 	vstr	s15, [r3]
		  #endif

		  Vhilbert = DISTANCE * 1000.0f / (MEASURMENT_DELAY * 2 / 170.0f + maxIdxAmp * SAMPLE_RATE - SAMPLE_RATE * REF_COUNT);
 80048b0:	4b80      	ldr	r3, [pc, #512]	; (8004ab4 <main+0x48c>)
 80048b2:	ed93 7a00 	vldr	s14, [r3]
 80048b6:	eddf 6a85 	vldr	s13, [pc, #532]	; 8004acc <main+0x4a4>
 80048ba:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80048be:	eeb2 7a0a 	vmov.f32	s14, #42	; 0x41500000  13.0
 80048c2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80048c6:	ed9f 7a82 	vldr	s14, [pc, #520]	; 8004ad0 <main+0x4a8>
 80048ca:	ee77 7a87 	vadd.f32	s15, s15, s14
 80048ce:	ed9f 7a81 	vldr	s14, [pc, #516]	; 8004ad4 <main+0x4ac>
 80048d2:	ee37 7ac7 	vsub.f32	s14, s15, s14
 80048d6:	eddf 6a80 	vldr	s13, [pc, #512]	; 8004ad8 <main+0x4b0>
 80048da:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80048de:	4b7f      	ldr	r3, [pc, #508]	; (8004adc <main+0x4b4>)
 80048e0:	edc3 7a00 	vstr	s15, [r3]
		  Vsound = sqrt(1.4 * 8.31446262 * (temperature + ABS_ZERRO) / (0.02898 - 1840000 * exp(-5330 / (temperature + ABS_ZERRO)) * 10.944 / pressurePA * humidity));
 80048e4:	4b74      	ldr	r3, [pc, #464]	; (8004ab8 <main+0x490>)
 80048e6:	edd3 7a00 	vldr	s15, [r3]
 80048ea:	ed9f 7a7d 	vldr	s14, [pc, #500]	; 8004ae0 <main+0x4b8>
 80048ee:	ee77 7a87 	vadd.f32	s15, s15, s14
 80048f2:	ee17 0a90 	vmov	r0, s15
 80048f6:	f7fb fe4f 	bl	8000598 <__aeabi_f2d>
 80048fa:	a363      	add	r3, pc, #396	; (adr r3, 8004a88 <main+0x460>)
 80048fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004900:	f7fb fea2 	bl	8000648 <__aeabi_dmul>
 8004904:	4602      	mov	r2, r0
 8004906:	460b      	mov	r3, r1
 8004908:	4614      	mov	r4, r2
 800490a:	461d      	mov	r5, r3
 800490c:	4b6a      	ldr	r3, [pc, #424]	; (8004ab8 <main+0x490>)
 800490e:	edd3 7a00 	vldr	s15, [r3]
 8004912:	ed9f 7a73 	vldr	s14, [pc, #460]	; 8004ae0 <main+0x4b8>
 8004916:	ee77 7a87 	vadd.f32	s15, s15, s14
 800491a:	ed9f 7a72 	vldr	s14, [pc, #456]	; 8004ae4 <main+0x4bc>
 800491e:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8004922:	ee16 0a90 	vmov	r0, s13
 8004926:	f7fb fe37 	bl	8000598 <__aeabi_f2d>
 800492a:	4602      	mov	r2, r0
 800492c:	460b      	mov	r3, r1
 800492e:	ec43 2b10 	vmov	d0, r2, r3
 8004932:	f00f fdd1 	bl	80144d8 <exp>
 8004936:	ec51 0b10 	vmov	r0, r1, d0
 800493a:	a355      	add	r3, pc, #340	; (adr r3, 8004a90 <main+0x468>)
 800493c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004940:	f7fb fe82 	bl	8000648 <__aeabi_dmul>
 8004944:	4602      	mov	r2, r0
 8004946:	460b      	mov	r3, r1
 8004948:	4610      	mov	r0, r2
 800494a:	4619      	mov	r1, r3
 800494c:	a352      	add	r3, pc, #328	; (adr r3, 8004a98 <main+0x470>)
 800494e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004952:	f7fb fe79 	bl	8000648 <__aeabi_dmul>
 8004956:	4602      	mov	r2, r0
 8004958:	460b      	mov	r3, r1
 800495a:	4690      	mov	r8, r2
 800495c:	4699      	mov	r9, r3
 800495e:	4b57      	ldr	r3, [pc, #348]	; (8004abc <main+0x494>)
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	4618      	mov	r0, r3
 8004964:	f7fb fe18 	bl	8000598 <__aeabi_f2d>
 8004968:	4602      	mov	r2, r0
 800496a:	460b      	mov	r3, r1
 800496c:	4640      	mov	r0, r8
 800496e:	4649      	mov	r1, r9
 8004970:	f7fb ff94 	bl	800089c <__aeabi_ddiv>
 8004974:	4602      	mov	r2, r0
 8004976:	460b      	mov	r3, r1
 8004978:	4690      	mov	r8, r2
 800497a:	4699      	mov	r9, r3
 800497c:	4b52      	ldr	r3, [pc, #328]	; (8004ac8 <main+0x4a0>)
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	4618      	mov	r0, r3
 8004982:	f7fb fe09 	bl	8000598 <__aeabi_f2d>
 8004986:	4602      	mov	r2, r0
 8004988:	460b      	mov	r3, r1
 800498a:	4640      	mov	r0, r8
 800498c:	4649      	mov	r1, r9
 800498e:	f7fb fe5b 	bl	8000648 <__aeabi_dmul>
 8004992:	4602      	mov	r2, r0
 8004994:	460b      	mov	r3, r1
 8004996:	a142      	add	r1, pc, #264	; (adr r1, 8004aa0 <main+0x478>)
 8004998:	e9d1 0100 	ldrd	r0, r1, [r1]
 800499c:	f7fb fc9c 	bl	80002d8 <__aeabi_dsub>
 80049a0:	4602      	mov	r2, r0
 80049a2:	460b      	mov	r3, r1
 80049a4:	4620      	mov	r0, r4
 80049a6:	4629      	mov	r1, r5
 80049a8:	f7fb ff78 	bl	800089c <__aeabi_ddiv>
 80049ac:	4602      	mov	r2, r0
 80049ae:	460b      	mov	r3, r1
 80049b0:	ec43 2b17 	vmov	d7, r2, r3
 80049b4:	eeb0 0a47 	vmov.f32	s0, s14
 80049b8:	eef0 0a67 	vmov.f32	s1, s15
 80049bc:	f00f fdd4 	bl	8014568 <sqrt>
 80049c0:	ec53 2b10 	vmov	r2, r3, d0
 80049c4:	4610      	mov	r0, r2
 80049c6:	4619      	mov	r1, r3
 80049c8:	f7fc f916 	bl	8000bf8 <__aeabi_d2f>
 80049cc:	4603      	mov	r3, r0
 80049ce:	4a46      	ldr	r2, [pc, #280]	; (8004ae8 <main+0x4c0>)
 80049d0:	6013      	str	r3, [r2, #0]
		  sprintf(SndBuffer, "Idx:%5.2f, avgLev:%6.2f, Vh:%5.2f, Vs: %5.2f, T: %4.1f, P: %4.1f, H: %4.1f  \r",
 80049d2:	4b38      	ldr	r3, [pc, #224]	; (8004ab4 <main+0x48c>)
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	4618      	mov	r0, r3
 80049d8:	f7fb fdde 	bl	8000598 <__aeabi_f2d>
 80049dc:	e9c7 0104 	strd	r0, r1, [r7, #16]
 80049e0:	4b32      	ldr	r3, [pc, #200]	; (8004aac <main+0x484>)
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	4618      	mov	r0, r3
 80049e6:	f7fb fdd7 	bl	8000598 <__aeabi_f2d>
 80049ea:	4680      	mov	r8, r0
 80049ec:	4689      	mov	r9, r1
 80049ee:	4b3b      	ldr	r3, [pc, #236]	; (8004adc <main+0x4b4>)
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	4618      	mov	r0, r3
 80049f4:	f7fb fdd0 	bl	8000598 <__aeabi_f2d>
 80049f8:	4682      	mov	sl, r0
 80049fa:	468b      	mov	fp, r1
 80049fc:	4b3a      	ldr	r3, [pc, #232]	; (8004ae8 <main+0x4c0>)
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	4618      	mov	r0, r3
 8004a02:	f7fb fdc9 	bl	8000598 <__aeabi_f2d>
 8004a06:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8004a0a:	4b2b      	ldr	r3, [pc, #172]	; (8004ab8 <main+0x490>)
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	4618      	mov	r0, r3
 8004a10:	f7fb fdc2 	bl	8000598 <__aeabi_f2d>
 8004a14:	e9c7 0100 	strd	r0, r1, [r7]
 8004a18:	4b2a      	ldr	r3, [pc, #168]	; (8004ac4 <main+0x49c>)
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	4618      	mov	r0, r3
 8004a1e:	f7fb fdbb 	bl	8000598 <__aeabi_f2d>
 8004a22:	4604      	mov	r4, r0
 8004a24:	460d      	mov	r5, r1
 8004a26:	4b28      	ldr	r3, [pc, #160]	; (8004ac8 <main+0x4a0>)
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	4618      	mov	r0, r3
 8004a2c:	f7fb fdb4 	bl	8000598 <__aeabi_f2d>
 8004a30:	4602      	mov	r2, r0
 8004a32:	460b      	mov	r3, r1
 8004a34:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8004a38:	e9cd 4508 	strd	r4, r5, [sp, #32]
 8004a3c:	ed97 7b00 	vldr	d7, [r7]
 8004a40:	ed8d 7b06 	vstr	d7, [sp, #24]
 8004a44:	ed97 7b02 	vldr	d7, [r7, #8]
 8004a48:	ed8d 7b04 	vstr	d7, [sp, #16]
 8004a4c:	e9cd ab02 	strd	sl, fp, [sp, #8]
 8004a50:	e9cd 8900 	strd	r8, r9, [sp]
 8004a54:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8004a58:	4924      	ldr	r1, [pc, #144]	; (8004aec <main+0x4c4>)
 8004a5a:	4825      	ldr	r0, [pc, #148]	; (8004af0 <main+0x4c8>)
 8004a5c:	f00d fad0 	bl	8012000 <siprintf>
				  maxIdxAmp, avgLevel,
				  Vhilbert, Vsound,
				  temperature, pressure, humidity);
		  HAL_UART_Transmit(&huart1, (uint8_t *) SndBuffer, sizeof(SndBuffer), 1000);
 8004a60:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004a64:	2296      	movs	r2, #150	; 0x96
 8004a66:	4922      	ldr	r1, [pc, #136]	; (8004af0 <main+0x4c8>)
 8004a68:	4822      	ldr	r0, [pc, #136]	; (8004af4 <main+0x4cc>)
 8004a6a:	f00b ffd5 	bl	8010a18 <HAL_UART_Transmit>
		  #endif
		  HAL_TIM_Base_Start_IT(&htim4);
 8004a6e:	4822      	ldr	r0, [pc, #136]	; (8004af8 <main+0x4d0>)
 8004a70:	f00a fa00 	bl	800ee74 <HAL_TIM_Base_Start_IT>
		  //sumCaptureTIM2 = 0;
		  readyData = false;
 8004a74:	4b21      	ldr	r3, [pc, #132]	; (8004afc <main+0x4d4>)
 8004a76:	2200      	movs	r2, #0
 8004a78:	701a      	strb	r2, [r3, #0]
	  }
	  HAL_Delay(50);
 8004a7a:	2032      	movs	r0, #50	; 0x32
 8004a7c:	f005 f8c8 	bl	8009c10 <HAL_Delay>
	  if (readyData) {
 8004a80:	e698      	b.n	80047b4 <main+0x18c>
 8004a82:	bf00      	nop
 8004a84:	f3af 8000 	nop.w
 8004a88:	8ad6ccf0 	.word	0x8ad6ccf0
 8004a8c:	402747ce 	.word	0x402747ce
 8004a90:	00000000 	.word	0x00000000
 8004a94:	413c1380 	.word	0x413c1380
 8004a98:	f7ced917 	.word	0xf7ced917
 8004a9c:	4025e353 	.word	0x4025e353
 8004aa0:	e0f3cb3e 	.word	0xe0f3cb3e
 8004aa4:	3f9dacee 	.word	0x3f9dacee
 8004aa8:	200017ec 	.word	0x200017ec
 8004aac:	200017e8 	.word	0x200017e8
 8004ab0:	2000013c 	.word	0x2000013c
 8004ab4:	200027ec 	.word	0x200027ec
 8004ab8:	20000aa4 	.word	0x20000aa4
 8004abc:	20000aa8 	.word	0x20000aa8
 8004ac0:	3bf5c7e8 	.word	0x3bf5c7e8
 8004ac4:	20000aac 	.word	0x20000aac
 8004ac8:	20000ab0 	.word	0x20000ab0
 8004acc:	422a0000 	.word	0x422a0000
 8004ad0:	43ec7878 	.word	0x43ec7878
 8004ad4:	422b4b4c 	.word	0x422b4b4c
 8004ad8:	4846bb00 	.word	0x4846bb00
 8004adc:	20000ab8 	.word	0x20000ab8
 8004ae0:	43889333 	.word	0x43889333
 8004ae4:	c5a69000 	.word	0xc5a69000
 8004ae8:	20000ab4 	.word	0x20000ab4
 8004aec:	08014bc0 	.word	0x08014bc0
 8004af0:	20000a0c 	.word	0x20000a0c
 8004af4:	20000978 	.word	0x20000978
 8004af8:	2000092c 	.word	0x2000092c
 8004afc:	200017e2 	.word	0x200017e2

08004b00 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8004b00:	b580      	push	{r7, lr}
 8004b02:	b094      	sub	sp, #80	; 0x50
 8004b04:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8004b06:	f107 0318 	add.w	r3, r7, #24
 8004b0a:	2238      	movs	r2, #56	; 0x38
 8004b0c:	2100      	movs	r1, #0
 8004b0e:	4618      	mov	r0, r3
 8004b10:	f00c fe04 	bl	801171c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8004b14:	1d3b      	adds	r3, r7, #4
 8004b16:	2200      	movs	r2, #0
 8004b18:	601a      	str	r2, [r3, #0]
 8004b1a:	605a      	str	r2, [r3, #4]
 8004b1c:	609a      	str	r2, [r3, #8]
 8004b1e:	60da      	str	r2, [r3, #12]
 8004b20:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8004b22:	2000      	movs	r0, #0
 8004b24:	f008 fa14 	bl	800cf50 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI
 8004b28:	230b      	movs	r3, #11
 8004b2a:	61bb      	str	r3, [r7, #24]
                              |RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8004b2c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004b30:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8004b32:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004b36:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8004b38:	2340      	movs	r3, #64	; 0x40
 8004b3a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8004b3c:	2301      	movs	r3, #1
 8004b3e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8004b40:	2302      	movs	r3, #2
 8004b42:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8004b44:	2303      	movs	r3, #3
 8004b46:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8004b48:	2304      	movs	r3, #4
 8004b4a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8004b4c:	2355      	movs	r3, #85	; 0x55
 8004b4e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8004b50:	2302      	movs	r3, #2
 8004b52:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8004b54:	2302      	movs	r3, #2
 8004b56:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8004b58:	2302      	movs	r3, #2
 8004b5a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004b5c:	f107 0318 	add.w	r3, r7, #24
 8004b60:	4618      	mov	r0, r3
 8004b62:	f008 fa99 	bl	800d098 <HAL_RCC_OscConfig>
 8004b66:	4603      	mov	r3, r0
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d001      	beq.n	8004b70 <SystemClock_Config+0x70>
  {
    Error_Handler();
 8004b6c:	f000 fbea 	bl	8005344 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8004b70:	230f      	movs	r3, #15
 8004b72:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8004b74:	2303      	movs	r3, #3
 8004b76:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8004b78:	2300      	movs	r3, #0
 8004b7a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8004b7c:	2300      	movs	r3, #0
 8004b7e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8004b80:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004b84:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8004b86:	1d3b      	adds	r3, r7, #4
 8004b88:	2104      	movs	r1, #4
 8004b8a:	4618      	mov	r0, r3
 8004b8c:	f008 fd9c 	bl	800d6c8 <HAL_RCC_ClockConfig>
 8004b90:	4603      	mov	r3, r0
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d001      	beq.n	8004b9a <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8004b96:	f000 fbd5 	bl	8005344 <Error_Handler>
  }
}
 8004b9a:	bf00      	nop
 8004b9c:	3750      	adds	r7, #80	; 0x50
 8004b9e:	46bd      	mov	sp, r7
 8004ba0:	bd80      	pop	{r7, pc}
	...

08004ba4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8004ba4:	b580      	push	{r7, lr}
 8004ba6:	b08c      	sub	sp, #48	; 0x30
 8004ba8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8004baa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004bae:	2200      	movs	r2, #0
 8004bb0:	601a      	str	r2, [r3, #0]
 8004bb2:	605a      	str	r2, [r3, #4]
 8004bb4:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8004bb6:	1d3b      	adds	r3, r7, #4
 8004bb8:	2220      	movs	r2, #32
 8004bba:	2100      	movs	r1, #0
 8004bbc:	4618      	mov	r0, r3
 8004bbe:	f00c fdad 	bl	801171c <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8004bc2:	4b33      	ldr	r3, [pc, #204]	; (8004c90 <MX_ADC1_Init+0xec>)
 8004bc4:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8004bc8:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8004bca:	4b31      	ldr	r3, [pc, #196]	; (8004c90 <MX_ADC1_Init+0xec>)
 8004bcc:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8004bd0:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_10B;
 8004bd2:	4b2f      	ldr	r3, [pc, #188]	; (8004c90 <MX_ADC1_Init+0xec>)
 8004bd4:	2208      	movs	r2, #8
 8004bd6:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8004bd8:	4b2d      	ldr	r3, [pc, #180]	; (8004c90 <MX_ADC1_Init+0xec>)
 8004bda:	2200      	movs	r2, #0
 8004bdc:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 8004bde:	4b2c      	ldr	r3, [pc, #176]	; (8004c90 <MX_ADC1_Init+0xec>)
 8004be0:	2200      	movs	r2, #0
 8004be2:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8004be4:	4b2a      	ldr	r3, [pc, #168]	; (8004c90 <MX_ADC1_Init+0xec>)
 8004be6:	2200      	movs	r2, #0
 8004be8:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8004bea:	4b29      	ldr	r3, [pc, #164]	; (8004c90 <MX_ADC1_Init+0xec>)
 8004bec:	2208      	movs	r2, #8
 8004bee:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8004bf0:	4b27      	ldr	r3, [pc, #156]	; (8004c90 <MX_ADC1_Init+0xec>)
 8004bf2:	2200      	movs	r2, #0
 8004bf4:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8004bf6:	4b26      	ldr	r3, [pc, #152]	; (8004c90 <MX_ADC1_Init+0xec>)
 8004bf8:	2201      	movs	r2, #1
 8004bfa:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 8004bfc:	4b24      	ldr	r3, [pc, #144]	; (8004c90 <MX_ADC1_Init+0xec>)
 8004bfe:	2201      	movs	r2, #1
 8004c00:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8004c02:	4b23      	ldr	r3, [pc, #140]	; (8004c90 <MX_ADC1_Init+0xec>)
 8004c04:	2200      	movs	r2, #0
 8004c06:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T3_TRGO;
 8004c0a:	4b21      	ldr	r3, [pc, #132]	; (8004c90 <MX_ADC1_Init+0xec>)
 8004c0c:	f44f 6290 	mov.w	r2, #1152	; 0x480
 8004c10:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8004c12:	4b1f      	ldr	r3, [pc, #124]	; (8004c90 <MX_ADC1_Init+0xec>)
 8004c14:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004c18:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8004c1a:	4b1d      	ldr	r3, [pc, #116]	; (8004c90 <MX_ADC1_Init+0xec>)
 8004c1c:	2201      	movs	r2, #1
 8004c1e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8004c22:	4b1b      	ldr	r3, [pc, #108]	; (8004c90 <MX_ADC1_Init+0xec>)
 8004c24:	2200      	movs	r2, #0
 8004c26:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8004c28:	4b19      	ldr	r3, [pc, #100]	; (8004c90 <MX_ADC1_Init+0xec>)
 8004c2a:	2200      	movs	r2, #0
 8004c2c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8004c30:	4817      	ldr	r0, [pc, #92]	; (8004c90 <MX_ADC1_Init+0xec>)
 8004c32:	f005 fa7f 	bl	800a134 <HAL_ADC_Init>
 8004c36:	4603      	mov	r3, r0
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d001      	beq.n	8004c40 <MX_ADC1_Init+0x9c>
  {
    Error_Handler();
 8004c3c:	f000 fb82 	bl	8005344 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8004c40:	2300      	movs	r3, #0
 8004c42:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8004c44:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004c48:	4619      	mov	r1, r3
 8004c4a:	4811      	ldr	r0, [pc, #68]	; (8004c90 <MX_ADC1_Init+0xec>)
 8004c4c:	f006 fc8e 	bl	800b56c <HAL_ADCEx_MultiModeConfigChannel>
 8004c50:	4603      	mov	r3, r0
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d001      	beq.n	8004c5a <MX_ADC1_Init+0xb6>
  {
    Error_Handler();
 8004c56:	f000 fb75 	bl	8005344 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_15;
 8004c5a:	4b0e      	ldr	r3, [pc, #56]	; (8004c94 <MX_ADC1_Init+0xf0>)
 8004c5c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8004c5e:	2306      	movs	r3, #6
 8004c60:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8004c62:	2300      	movs	r3, #0
 8004c64:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8004c66:	237f      	movs	r3, #127	; 0x7f
 8004c68:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8004c6a:	2304      	movs	r3, #4
 8004c6c:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8004c6e:	2300      	movs	r3, #0
 8004c70:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8004c72:	1d3b      	adds	r3, r7, #4
 8004c74:	4619      	mov	r1, r3
 8004c76:	4806      	ldr	r0, [pc, #24]	; (8004c90 <MX_ADC1_Init+0xec>)
 8004c78:	f005 fd72 	bl	800a760 <HAL_ADC_ConfigChannel>
 8004c7c:	4603      	mov	r3, r0
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d001      	beq.n	8004c86 <MX_ADC1_Init+0xe2>
  {
    Error_Handler();
 8004c82:	f000 fb5f 	bl	8005344 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8004c86:	bf00      	nop
 8004c88:	3730      	adds	r7, #48	; 0x30
 8004c8a:	46bd      	mov	sp, r7
 8004c8c:	bd80      	pop	{r7, pc}
 8004c8e:	bf00      	nop
 8004c90:	20000708 	.word	0x20000708
 8004c94:	3ef08000 	.word	0x3ef08000

08004c98 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8004c98:	b580      	push	{r7, lr}
 8004c9a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8004c9c:	4b1b      	ldr	r3, [pc, #108]	; (8004d0c <MX_I2C1_Init+0x74>)
 8004c9e:	4a1c      	ldr	r2, [pc, #112]	; (8004d10 <MX_I2C1_Init+0x78>)
 8004ca0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x30A0A7FB;
 8004ca2:	4b1a      	ldr	r3, [pc, #104]	; (8004d0c <MX_I2C1_Init+0x74>)
 8004ca4:	4a1b      	ldr	r2, [pc, #108]	; (8004d14 <MX_I2C1_Init+0x7c>)
 8004ca6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8004ca8:	4b18      	ldr	r3, [pc, #96]	; (8004d0c <MX_I2C1_Init+0x74>)
 8004caa:	2200      	movs	r2, #0
 8004cac:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8004cae:	4b17      	ldr	r3, [pc, #92]	; (8004d0c <MX_I2C1_Init+0x74>)
 8004cb0:	2201      	movs	r2, #1
 8004cb2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8004cb4:	4b15      	ldr	r3, [pc, #84]	; (8004d0c <MX_I2C1_Init+0x74>)
 8004cb6:	2200      	movs	r2, #0
 8004cb8:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8004cba:	4b14      	ldr	r3, [pc, #80]	; (8004d0c <MX_I2C1_Init+0x74>)
 8004cbc:	2200      	movs	r2, #0
 8004cbe:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8004cc0:	4b12      	ldr	r3, [pc, #72]	; (8004d0c <MX_I2C1_Init+0x74>)
 8004cc2:	2200      	movs	r2, #0
 8004cc4:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8004cc6:	4b11      	ldr	r3, [pc, #68]	; (8004d0c <MX_I2C1_Init+0x74>)
 8004cc8:	2200      	movs	r2, #0
 8004cca:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8004ccc:	4b0f      	ldr	r3, [pc, #60]	; (8004d0c <MX_I2C1_Init+0x74>)
 8004cce:	2200      	movs	r2, #0
 8004cd0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8004cd2:	480e      	ldr	r0, [pc, #56]	; (8004d0c <MX_I2C1_Init+0x74>)
 8004cd4:	f007 fae2 	bl	800c29c <HAL_I2C_Init>
 8004cd8:	4603      	mov	r3, r0
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d001      	beq.n	8004ce2 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8004cde:	f000 fb31 	bl	8005344 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8004ce2:	2100      	movs	r1, #0
 8004ce4:	4809      	ldr	r0, [pc, #36]	; (8004d0c <MX_I2C1_Init+0x74>)
 8004ce6:	f008 f83d 	bl	800cd64 <HAL_I2CEx_ConfigAnalogFilter>
 8004cea:	4603      	mov	r3, r0
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d001      	beq.n	8004cf4 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8004cf0:	f000 fb28 	bl	8005344 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8004cf4:	2100      	movs	r1, #0
 8004cf6:	4805      	ldr	r0, [pc, #20]	; (8004d0c <MX_I2C1_Init+0x74>)
 8004cf8:	f008 f87f 	bl	800cdfa <HAL_I2CEx_ConfigDigitalFilter>
 8004cfc:	4603      	mov	r3, r0
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d001      	beq.n	8004d06 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8004d02:	f000 fb1f 	bl	8005344 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8004d06:	bf00      	nop
 8004d08:	bd80      	pop	{r7, pc}
 8004d0a:	bf00      	nop
 8004d0c:	200007d4 	.word	0x200007d4
 8004d10:	40005400 	.word	0x40005400
 8004d14:	30a0a7fb 	.word	0x30a0a7fb

08004d18 <MX_IWDG_Init>:
  * @brief IWDG Initialization Function
  * @param None
  * @retval None
  */
static void MX_IWDG_Init(void)
{
 8004d18:	b580      	push	{r7, lr}
 8004d1a:	af00      	add	r7, sp, #0
  /* USER CODE END IWDG_Init 0 */

  /* USER CODE BEGIN IWDG_Init 1 */

  /* USER CODE END IWDG_Init 1 */
  hiwdg.Instance = IWDG;
 8004d1c:	4b0b      	ldr	r3, [pc, #44]	; (8004d4c <MX_IWDG_Init+0x34>)
 8004d1e:	4a0c      	ldr	r2, [pc, #48]	; (8004d50 <MX_IWDG_Init+0x38>)
 8004d20:	601a      	str	r2, [r3, #0]
  hiwdg.Init.Prescaler = IWDG_PRESCALER_256;
 8004d22:	4b0a      	ldr	r3, [pc, #40]	; (8004d4c <MX_IWDG_Init+0x34>)
 8004d24:	2206      	movs	r2, #6
 8004d26:	605a      	str	r2, [r3, #4]
  hiwdg.Init.Window = 4095;
 8004d28:	4b08      	ldr	r3, [pc, #32]	; (8004d4c <MX_IWDG_Init+0x34>)
 8004d2a:	f640 72ff 	movw	r2, #4095	; 0xfff
 8004d2e:	60da      	str	r2, [r3, #12]
  hiwdg.Init.Reload = 4095;
 8004d30:	4b06      	ldr	r3, [pc, #24]	; (8004d4c <MX_IWDG_Init+0x34>)
 8004d32:	f640 72ff 	movw	r2, #4095	; 0xfff
 8004d36:	609a      	str	r2, [r3, #8]
  if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 8004d38:	4804      	ldr	r0, [pc, #16]	; (8004d4c <MX_IWDG_Init+0x34>)
 8004d3a:	f008 f8aa 	bl	800ce92 <HAL_IWDG_Init>
 8004d3e:	4603      	mov	r3, r0
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d001      	beq.n	8004d48 <MX_IWDG_Init+0x30>
  {
    Error_Handler();
 8004d44:	f000 fafe 	bl	8005344 <Error_Handler>
  }
  /* USER CODE BEGIN IWDG_Init 2 */

  /* USER CODE END IWDG_Init 2 */

}
 8004d48:	bf00      	nop
 8004d4a:	bd80      	pop	{r7, pc}
 8004d4c:	20000820 	.word	0x20000820
 8004d50:	40003000 	.word	0x40003000

08004d54 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8004d54:	b580      	push	{r7, lr}
 8004d56:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8004d58:	4b1b      	ldr	r3, [pc, #108]	; (8004dc8 <MX_SPI1_Init+0x74>)
 8004d5a:	4a1c      	ldr	r2, [pc, #112]	; (8004dcc <MX_SPI1_Init+0x78>)
 8004d5c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8004d5e:	4b1a      	ldr	r3, [pc, #104]	; (8004dc8 <MX_SPI1_Init+0x74>)
 8004d60:	f44f 7282 	mov.w	r2, #260	; 0x104
 8004d64:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8004d66:	4b18      	ldr	r3, [pc, #96]	; (8004dc8 <MX_SPI1_Init+0x74>)
 8004d68:	2200      	movs	r2, #0
 8004d6a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8004d6c:	4b16      	ldr	r3, [pc, #88]	; (8004dc8 <MX_SPI1_Init+0x74>)
 8004d6e:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8004d72:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8004d74:	4b14      	ldr	r3, [pc, #80]	; (8004dc8 <MX_SPI1_Init+0x74>)
 8004d76:	2200      	movs	r2, #0
 8004d78:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8004d7a:	4b13      	ldr	r3, [pc, #76]	; (8004dc8 <MX_SPI1_Init+0x74>)
 8004d7c:	2200      	movs	r2, #0
 8004d7e:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8004d80:	4b11      	ldr	r3, [pc, #68]	; (8004dc8 <MX_SPI1_Init+0x74>)
 8004d82:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004d86:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8004d88:	4b0f      	ldr	r3, [pc, #60]	; (8004dc8 <MX_SPI1_Init+0x74>)
 8004d8a:	2210      	movs	r2, #16
 8004d8c:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8004d8e:	4b0e      	ldr	r3, [pc, #56]	; (8004dc8 <MX_SPI1_Init+0x74>)
 8004d90:	2200      	movs	r2, #0
 8004d92:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8004d94:	4b0c      	ldr	r3, [pc, #48]	; (8004dc8 <MX_SPI1_Init+0x74>)
 8004d96:	2200      	movs	r2, #0
 8004d98:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004d9a:	4b0b      	ldr	r3, [pc, #44]	; (8004dc8 <MX_SPI1_Init+0x74>)
 8004d9c:	2200      	movs	r2, #0
 8004d9e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8004da0:	4b09      	ldr	r3, [pc, #36]	; (8004dc8 <MX_SPI1_Init+0x74>)
 8004da2:	2207      	movs	r2, #7
 8004da4:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8004da6:	4b08      	ldr	r3, [pc, #32]	; (8004dc8 <MX_SPI1_Init+0x74>)
 8004da8:	2200      	movs	r2, #0
 8004daa:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8004dac:	4b06      	ldr	r3, [pc, #24]	; (8004dc8 <MX_SPI1_Init+0x74>)
 8004dae:	2200      	movs	r2, #0
 8004db0:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8004db2:	4805      	ldr	r0, [pc, #20]	; (8004dc8 <MX_SPI1_Init+0x74>)
 8004db4:	f009 f8ee 	bl	800df94 <HAL_SPI_Init>
 8004db8:	4603      	mov	r3, r0
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d001      	beq.n	8004dc2 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8004dbe:	f000 fac1 	bl	8005344 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8004dc2:	bf00      	nop
 8004dc4:	bd80      	pop	{r7, pc}
 8004dc6:	bf00      	nop
 8004dc8:	20000830 	.word	0x20000830
 8004dcc:	40013000 	.word	0x40013000

08004dd0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8004dd0:	b580      	push	{r7, lr}
 8004dd2:	b09c      	sub	sp, #112	; 0x70
 8004dd4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004dd6:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8004dda:	2200      	movs	r2, #0
 8004ddc:	601a      	str	r2, [r3, #0]
 8004dde:	605a      	str	r2, [r3, #4]
 8004de0:	609a      	str	r2, [r3, #8]
 8004de2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004de4:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8004de8:	2200      	movs	r2, #0
 8004dea:	601a      	str	r2, [r3, #0]
 8004dec:	605a      	str	r2, [r3, #4]
 8004dee:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8004df0:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8004df4:	2200      	movs	r2, #0
 8004df6:	601a      	str	r2, [r3, #0]
 8004df8:	605a      	str	r2, [r3, #4]
 8004dfa:	609a      	str	r2, [r3, #8]
 8004dfc:	60da      	str	r2, [r3, #12]
 8004dfe:	611a      	str	r2, [r3, #16]
 8004e00:	615a      	str	r2, [r3, #20]
 8004e02:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8004e04:	1d3b      	adds	r3, r7, #4
 8004e06:	2234      	movs	r2, #52	; 0x34
 8004e08:	2100      	movs	r1, #0
 8004e0a:	4618      	mov	r0, r3
 8004e0c:	f00c fc86 	bl	801171c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8004e10:	4b5c      	ldr	r3, [pc, #368]	; (8004f84 <MX_TIM1_Init+0x1b4>)
 8004e12:	4a5d      	ldr	r2, [pc, #372]	; (8004f88 <MX_TIM1_Init+0x1b8>)
 8004e14:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8004e16:	4b5b      	ldr	r3, [pc, #364]	; (8004f84 <MX_TIM1_Init+0x1b4>)
 8004e18:	2200      	movs	r2, #0
 8004e1a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004e1c:	4b59      	ldr	r3, [pc, #356]	; (8004f84 <MX_TIM1_Init+0x1b4>)
 8004e1e:	2200      	movs	r2, #0
 8004e20:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 424;
 8004e22:	4b58      	ldr	r3, [pc, #352]	; (8004f84 <MX_TIM1_Init+0x1b4>)
 8004e24:	f44f 72d4 	mov.w	r2, #424	; 0x1a8
 8004e28:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004e2a:	4b56      	ldr	r3, [pc, #344]	; (8004f84 <MX_TIM1_Init+0x1b4>)
 8004e2c:	2200      	movs	r2, #0
 8004e2e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 13;
 8004e30:	4b54      	ldr	r3, [pc, #336]	; (8004f84 <MX_TIM1_Init+0x1b4>)
 8004e32:	220d      	movs	r2, #13
 8004e34:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8004e36:	4b53      	ldr	r3, [pc, #332]	; (8004f84 <MX_TIM1_Init+0x1b4>)
 8004e38:	2280      	movs	r2, #128	; 0x80
 8004e3a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8004e3c:	4851      	ldr	r0, [pc, #324]	; (8004f84 <MX_TIM1_Init+0x1b4>)
 8004e3e:	f009 ffc1 	bl	800edc4 <HAL_TIM_Base_Init>
 8004e42:	4603      	mov	r3, r0
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d001      	beq.n	8004e4c <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8004e48:	f000 fa7c 	bl	8005344 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004e4c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004e50:	663b      	str	r3, [r7, #96]	; 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8004e52:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8004e56:	4619      	mov	r1, r3
 8004e58:	484a      	ldr	r0, [pc, #296]	; (8004f84 <MX_TIM1_Init+0x1b4>)
 8004e5a:	f00a fd15 	bl	800f888 <HAL_TIM_ConfigClockSource>
 8004e5e:	4603      	mov	r3, r0
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d001      	beq.n	8004e68 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8004e64:	f000 fa6e 	bl	8005344 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim1) != HAL_OK)
 8004e68:	4846      	ldr	r0, [pc, #280]	; (8004f84 <MX_TIM1_Init+0x1b4>)
 8004e6a:	f00a f8aa 	bl	800efc2 <HAL_TIM_OC_Init>
 8004e6e:	4603      	mov	r3, r0
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d001      	beq.n	8004e78 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8004e74:	f000 fa66 	bl	8005344 <Error_Handler>
  }
  if (HAL_TIM_OnePulse_Init(&htim1, TIM_OPMODE_SINGLE) != HAL_OK)
 8004e78:	2108      	movs	r1, #8
 8004e7a:	4842      	ldr	r0, [pc, #264]	; (8004f84 <MX_TIM1_Init+0x1b4>)
 8004e7c:	f00a fab0 	bl	800f3e0 <HAL_TIM_OnePulse_Init>
 8004e80:	4603      	mov	r3, r0
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d001      	beq.n	8004e8a <MX_TIM1_Init+0xba>
  {
    Error_Handler();
 8004e86:	f000 fa5d 	bl	8005344 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_ENABLE;
 8004e8a:	2310      	movs	r3, #16
 8004e8c:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8004e8e:	2300      	movs	r3, #0
 8004e90:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004e92:	2300      	movs	r3, #0
 8004e94:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8004e96:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8004e9a:	4619      	mov	r1, r3
 8004e9c:	4839      	ldr	r0, [pc, #228]	; (8004f84 <MX_TIM1_Init+0x1b4>)
 8004e9e:	f00b fbdd 	bl	801065c <HAL_TIMEx_MasterConfigSynchronization>
 8004ea2:	4603      	mov	r3, r0
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d001      	beq.n	8004eac <MX_TIM1_Init+0xdc>
  {
    Error_Handler();
 8004ea8:	f000 fa4c 	bl	8005344 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TOGGLE;
 8004eac:	2330      	movs	r3, #48	; 0x30
 8004eae:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 0;
 8004eb0:	2300      	movs	r3, #0
 8004eb2:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004eb4:	2300      	movs	r3, #0
 8004eb6:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8004eb8:	2300      	movs	r3, #0
 8004eba:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004ebc:	2300      	movs	r3, #0
 8004ebe:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8004ec0:	2300      	movs	r3, #0
 8004ec2:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8004ec4:	2300      	movs	r3, #0
 8004ec6:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8004ec8:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8004ecc:	2200      	movs	r2, #0
 8004ece:	4619      	mov	r1, r3
 8004ed0:	482c      	ldr	r0, [pc, #176]	; (8004f84 <MX_TIM1_Init+0x1b4>)
 8004ed2:	f00a fc5f 	bl	800f794 <HAL_TIM_OC_ConfigChannel>
 8004ed6:	4603      	mov	r3, r0
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d001      	beq.n	8004ee0 <MX_TIM1_Init+0x110>
  {
    Error_Handler();
 8004edc:	f000 fa32 	bl	8005344 <Error_Handler>
  }
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8004ee0:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8004ee4:	2204      	movs	r2, #4
 8004ee6:	4619      	mov	r1, r3
 8004ee8:	4826      	ldr	r0, [pc, #152]	; (8004f84 <MX_TIM1_Init+0x1b4>)
 8004eea:	f00a fc53 	bl	800f794 <HAL_TIM_OC_ConfigChannel>
 8004eee:	4603      	mov	r3, r0
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	d001      	beq.n	8004ef8 <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 8004ef4:	f000 fa26 	bl	8005344 <Error_Handler>
  }
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8004ef8:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8004efc:	2208      	movs	r2, #8
 8004efe:	4619      	mov	r1, r3
 8004f00:	4820      	ldr	r0, [pc, #128]	; (8004f84 <MX_TIM1_Init+0x1b4>)
 8004f02:	f00a fc47 	bl	800f794 <HAL_TIM_OC_ConfigChannel>
 8004f06:	4603      	mov	r3, r0
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	d001      	beq.n	8004f10 <MX_TIM1_Init+0x140>
  {
    Error_Handler();
 8004f0c:	f000 fa1a 	bl	8005344 <Error_Handler>
  }
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8004f10:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8004f14:	220c      	movs	r2, #12
 8004f16:	4619      	mov	r1, r3
 8004f18:	481a      	ldr	r0, [pc, #104]	; (8004f84 <MX_TIM1_Init+0x1b4>)
 8004f1a:	f00a fc3b 	bl	800f794 <HAL_TIM_OC_ConfigChannel>
 8004f1e:	4603      	mov	r3, r0
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	d001      	beq.n	8004f28 <MX_TIM1_Init+0x158>
  {
    Error_Handler();
 8004f24:	f000 fa0e 	bl	8005344 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8004f28:	2300      	movs	r3, #0
 8004f2a:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8004f2c:	2300      	movs	r3, #0
 8004f2e:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8004f30:	2300      	movs	r3, #0
 8004f32:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8004f34:	2300      	movs	r3, #0
 8004f36:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8004f38:	2300      	movs	r3, #0
 8004f3a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8004f3c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004f40:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8004f42:	2300      	movs	r3, #0
 8004f44:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8004f46:	2300      	movs	r3, #0
 8004f48:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8004f4a:	2300      	movs	r3, #0
 8004f4c:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8004f4e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004f52:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8004f54:	2300      	movs	r3, #0
 8004f56:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8004f58:	2300      	movs	r3, #0
 8004f5a:	633b      	str	r3, [r7, #48]	; 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8004f5c:	2300      	movs	r3, #0
 8004f5e:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8004f60:	1d3b      	adds	r3, r7, #4
 8004f62:	4619      	mov	r1, r3
 8004f64:	4807      	ldr	r0, [pc, #28]	; (8004f84 <MX_TIM1_Init+0x1b4>)
 8004f66:	f00b fc0f 	bl	8010788 <HAL_TIMEx_ConfigBreakDeadTime>
 8004f6a:	4603      	mov	r3, r0
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	d001      	beq.n	8004f74 <MX_TIM1_Init+0x1a4>
  {
    Error_Handler();
 8004f70:	f000 f9e8 	bl	8005344 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8004f74:	4803      	ldr	r0, [pc, #12]	; (8004f84 <MX_TIM1_Init+0x1b4>)
 8004f76:	f003 fd63 	bl	8008a40 <HAL_TIM_MspPostInit>

}
 8004f7a:	bf00      	nop
 8004f7c:	3770      	adds	r7, #112	; 0x70
 8004f7e:	46bd      	mov	sp, r7
 8004f80:	bd80      	pop	{r7, pc}
 8004f82:	bf00      	nop
 8004f84:	20000894 	.word	0x20000894
 8004f88:	40012c00 	.word	0x40012c00

08004f8c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8004f8c:	b580      	push	{r7, lr}
 8004f8e:	b094      	sub	sp, #80	; 0x50
 8004f90:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004f92:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8004f96:	2200      	movs	r2, #0
 8004f98:	601a      	str	r2, [r3, #0]
 8004f9a:	605a      	str	r2, [r3, #4]
 8004f9c:	609a      	str	r2, [r3, #8]
 8004f9e:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8004fa0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004fa4:	2200      	movs	r2, #0
 8004fa6:	601a      	str	r2, [r3, #0]
 8004fa8:	605a      	str	r2, [r3, #4]
 8004faa:	609a      	str	r2, [r3, #8]
 8004fac:	60da      	str	r2, [r3, #12]
 8004fae:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004fb0:	f107 0320 	add.w	r3, r7, #32
 8004fb4:	2200      	movs	r2, #0
 8004fb6:	601a      	str	r2, [r3, #0]
 8004fb8:	605a      	str	r2, [r3, #4]
 8004fba:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8004fbc:	1d3b      	adds	r3, r7, #4
 8004fbe:	2200      	movs	r2, #0
 8004fc0:	601a      	str	r2, [r3, #0]
 8004fc2:	605a      	str	r2, [r3, #4]
 8004fc4:	609a      	str	r2, [r3, #8]
 8004fc6:	60da      	str	r2, [r3, #12]
 8004fc8:	611a      	str	r2, [r3, #16]
 8004fca:	615a      	str	r2, [r3, #20]
 8004fcc:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8004fce:	4b37      	ldr	r3, [pc, #220]	; (80050ac <MX_TIM3_Init+0x120>)
 8004fd0:	4a37      	ldr	r2, [pc, #220]	; (80050b0 <MX_TIM3_Init+0x124>)
 8004fd2:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 1;
 8004fd4:	4b35      	ldr	r3, [pc, #212]	; (80050ac <MX_TIM3_Init+0x120>)
 8004fd6:	2201      	movs	r2, #1
 8004fd8:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004fda:	4b34      	ldr	r3, [pc, #208]	; (80050ac <MX_TIM3_Init+0x120>)
 8004fdc:	2200      	movs	r2, #0
 8004fde:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 30000;
 8004fe0:	4b32      	ldr	r3, [pc, #200]	; (80050ac <MX_TIM3_Init+0x120>)
 8004fe2:	f247 5230 	movw	r2, #30000	; 0x7530
 8004fe6:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004fe8:	4b30      	ldr	r3, [pc, #192]	; (80050ac <MX_TIM3_Init+0x120>)
 8004fea:	2200      	movs	r2, #0
 8004fec:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8004fee:	4b2f      	ldr	r3, [pc, #188]	; (80050ac <MX_TIM3_Init+0x120>)
 8004ff0:	2280      	movs	r2, #128	; 0x80
 8004ff2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8004ff4:	482d      	ldr	r0, [pc, #180]	; (80050ac <MX_TIM3_Init+0x120>)
 8004ff6:	f009 fee5 	bl	800edc4 <HAL_TIM_Base_Init>
 8004ffa:	4603      	mov	r3, r0
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d001      	beq.n	8005004 <MX_TIM3_Init+0x78>
  {
    Error_Handler();
 8005000:	f000 f9a0 	bl	8005344 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8005004:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005008:	643b      	str	r3, [r7, #64]	; 0x40
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800500a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800500e:	4619      	mov	r1, r3
 8005010:	4826      	ldr	r0, [pc, #152]	; (80050ac <MX_TIM3_Init+0x120>)
 8005012:	f00a fc39 	bl	800f888 <HAL_TIM_ConfigClockSource>
 8005016:	4603      	mov	r3, r0
 8005018:	2b00      	cmp	r3, #0
 800501a:	d001      	beq.n	8005020 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 800501c:	f000 f992 	bl	8005344 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim3) != HAL_OK)
 8005020:	4822      	ldr	r0, [pc, #136]	; (80050ac <MX_TIM3_Init+0x120>)
 8005022:	f009 ffce 	bl	800efc2 <HAL_TIM_OC_Init>
 8005026:	4603      	mov	r3, r0
 8005028:	2b00      	cmp	r3, #0
 800502a:	d001      	beq.n	8005030 <MX_TIM3_Init+0xa4>
  {
    Error_Handler();
 800502c:	f000 f98a 	bl	8005344 <Error_Handler>
  }
  if (HAL_TIM_OnePulse_Init(&htim3, TIM_OPMODE_SINGLE) != HAL_OK)
 8005030:	2108      	movs	r1, #8
 8005032:	481e      	ldr	r0, [pc, #120]	; (80050ac <MX_TIM3_Init+0x120>)
 8005034:	f00a f9d4 	bl	800f3e0 <HAL_TIM_OnePulse_Init>
 8005038:	4603      	mov	r3, r0
 800503a:	2b00      	cmp	r3, #0
 800503c:	d001      	beq.n	8005042 <MX_TIM3_Init+0xb6>
  {
    Error_Handler();
 800503e:	f000 f981 	bl	8005344 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_TRIGGER;
 8005042:	2306      	movs	r3, #6
 8005044:	62fb      	str	r3, [r7, #44]	; 0x2c
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 8005046:	2300      	movs	r3, #0
 8005048:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIM_SlaveConfigSynchro(&htim3, &sSlaveConfig) != HAL_OK)
 800504a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800504e:	4619      	mov	r1, r3
 8005050:	4816      	ldr	r0, [pc, #88]	; (80050ac <MX_TIM3_Init+0x120>)
 8005052:	f00a fd25 	bl	800faa0 <HAL_TIM_SlaveConfigSynchro>
 8005056:	4603      	mov	r3, r0
 8005058:	2b00      	cmp	r3, #0
 800505a:	d001      	beq.n	8005060 <MX_TIM3_Init+0xd4>
  {
    Error_Handler();
 800505c:	f000 f972 	bl	8005344 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8005060:	2320      	movs	r3, #32
 8005062:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005064:	2300      	movs	r3, #0
 8005066:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8005068:	f107 0320 	add.w	r3, r7, #32
 800506c:	4619      	mov	r1, r3
 800506e:	480f      	ldr	r0, [pc, #60]	; (80050ac <MX_TIM3_Init+0x120>)
 8005070:	f00b faf4 	bl	801065c <HAL_TIMEx_MasterConfigSynchronization>
 8005074:	4603      	mov	r3, r0
 8005076:	2b00      	cmp	r3, #0
 8005078:	d001      	beq.n	800507e <MX_TIM3_Init+0xf2>
  {
    Error_Handler();
 800507a:	f000 f963 	bl	8005344 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_ACTIVE;
 800507e:	2310      	movs	r3, #16
 8005080:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8005082:	2300      	movs	r3, #0
 8005084:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8005086:	2300      	movs	r3, #0
 8005088:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800508a:	2300      	movs	r3, #0
 800508c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800508e:	1d3b      	adds	r3, r7, #4
 8005090:	2200      	movs	r2, #0
 8005092:	4619      	mov	r1, r3
 8005094:	4805      	ldr	r0, [pc, #20]	; (80050ac <MX_TIM3_Init+0x120>)
 8005096:	f00a fb7d 	bl	800f794 <HAL_TIM_OC_ConfigChannel>
 800509a:	4603      	mov	r3, r0
 800509c:	2b00      	cmp	r3, #0
 800509e:	d001      	beq.n	80050a4 <MX_TIM3_Init+0x118>
  {
    Error_Handler();
 80050a0:	f000 f950 	bl	8005344 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80050a4:	bf00      	nop
 80050a6:	3750      	adds	r7, #80	; 0x50
 80050a8:	46bd      	mov	sp, r7
 80050aa:	bd80      	pop	{r7, pc}
 80050ac:	200008e0 	.word	0x200008e0
 80050b0:	40000400 	.word	0x40000400

080050b4 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80050b4:	b580      	push	{r7, lr}
 80050b6:	b088      	sub	sp, #32
 80050b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80050ba:	f107 0310 	add.w	r3, r7, #16
 80050be:	2200      	movs	r2, #0
 80050c0:	601a      	str	r2, [r3, #0]
 80050c2:	605a      	str	r2, [r3, #4]
 80050c4:	609a      	str	r2, [r3, #8]
 80050c6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80050c8:	1d3b      	adds	r3, r7, #4
 80050ca:	2200      	movs	r2, #0
 80050cc:	601a      	str	r2, [r3, #0]
 80050ce:	605a      	str	r2, [r3, #4]
 80050d0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80050d2:	4b1d      	ldr	r3, [pc, #116]	; (8005148 <MX_TIM4_Init+0x94>)
 80050d4:	4a1d      	ldr	r2, [pc, #116]	; (800514c <MX_TIM4_Init+0x98>)
 80050d6:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 2;
 80050d8:	4b1b      	ldr	r3, [pc, #108]	; (8005148 <MX_TIM4_Init+0x94>)
 80050da:	2202      	movs	r2, #2
 80050dc:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80050de:	4b1a      	ldr	r3, [pc, #104]	; (8005148 <MX_TIM4_Init+0x94>)
 80050e0:	2200      	movs	r2, #0
 80050e2:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 80050e4:	4b18      	ldr	r3, [pc, #96]	; (8005148 <MX_TIM4_Init+0x94>)
 80050e6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80050ea:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80050ec:	4b16      	ldr	r3, [pc, #88]	; (8005148 <MX_TIM4_Init+0x94>)
 80050ee:	2200      	movs	r2, #0
 80050f0:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80050f2:	4b15      	ldr	r3, [pc, #84]	; (8005148 <MX_TIM4_Init+0x94>)
 80050f4:	2200      	movs	r2, #0
 80050f6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80050f8:	4813      	ldr	r0, [pc, #76]	; (8005148 <MX_TIM4_Init+0x94>)
 80050fa:	f009 fe63 	bl	800edc4 <HAL_TIM_Base_Init>
 80050fe:	4603      	mov	r3, r0
 8005100:	2b00      	cmp	r3, #0
 8005102:	d001      	beq.n	8005108 <MX_TIM4_Init+0x54>
  {
    Error_Handler();
 8005104:	f000 f91e 	bl	8005344 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8005108:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800510c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 800510e:	f107 0310 	add.w	r3, r7, #16
 8005112:	4619      	mov	r1, r3
 8005114:	480c      	ldr	r0, [pc, #48]	; (8005148 <MX_TIM4_Init+0x94>)
 8005116:	f00a fbb7 	bl	800f888 <HAL_TIM_ConfigClockSource>
 800511a:	4603      	mov	r3, r0
 800511c:	2b00      	cmp	r3, #0
 800511e:	d001      	beq.n	8005124 <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 8005120:	f000 f910 	bl	8005344 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005124:	2300      	movs	r3, #0
 8005126:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005128:	2300      	movs	r3, #0
 800512a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800512c:	1d3b      	adds	r3, r7, #4
 800512e:	4619      	mov	r1, r3
 8005130:	4805      	ldr	r0, [pc, #20]	; (8005148 <MX_TIM4_Init+0x94>)
 8005132:	f00b fa93 	bl	801065c <HAL_TIMEx_MasterConfigSynchronization>
 8005136:	4603      	mov	r3, r0
 8005138:	2b00      	cmp	r3, #0
 800513a:	d001      	beq.n	8005140 <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 800513c:	f000 f902 	bl	8005344 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8005140:	bf00      	nop
 8005142:	3720      	adds	r7, #32
 8005144:	46bd      	mov	sp, r7
 8005146:	bd80      	pop	{r7, pc}
 8005148:	2000092c 	.word	0x2000092c
 800514c:	40000800 	.word	0x40000800

08005150 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8005150:	b580      	push	{r7, lr}
 8005152:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8005154:	4b22      	ldr	r3, [pc, #136]	; (80051e0 <MX_USART1_UART_Init+0x90>)
 8005156:	4a23      	ldr	r2, [pc, #140]	; (80051e4 <MX_USART1_UART_Init+0x94>)
 8005158:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800515a:	4b21      	ldr	r3, [pc, #132]	; (80051e0 <MX_USART1_UART_Init+0x90>)
 800515c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8005160:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8005162:	4b1f      	ldr	r3, [pc, #124]	; (80051e0 <MX_USART1_UART_Init+0x90>)
 8005164:	2200      	movs	r2, #0
 8005166:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8005168:	4b1d      	ldr	r3, [pc, #116]	; (80051e0 <MX_USART1_UART_Init+0x90>)
 800516a:	2200      	movs	r2, #0
 800516c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800516e:	4b1c      	ldr	r3, [pc, #112]	; (80051e0 <MX_USART1_UART_Init+0x90>)
 8005170:	2200      	movs	r2, #0
 8005172:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8005174:	4b1a      	ldr	r3, [pc, #104]	; (80051e0 <MX_USART1_UART_Init+0x90>)
 8005176:	220c      	movs	r2, #12
 8005178:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800517a:	4b19      	ldr	r3, [pc, #100]	; (80051e0 <MX_USART1_UART_Init+0x90>)
 800517c:	2200      	movs	r2, #0
 800517e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8005180:	4b17      	ldr	r3, [pc, #92]	; (80051e0 <MX_USART1_UART_Init+0x90>)
 8005182:	2200      	movs	r2, #0
 8005184:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8005186:	4b16      	ldr	r3, [pc, #88]	; (80051e0 <MX_USART1_UART_Init+0x90>)
 8005188:	2200      	movs	r2, #0
 800518a:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800518c:	4b14      	ldr	r3, [pc, #80]	; (80051e0 <MX_USART1_UART_Init+0x90>)
 800518e:	2200      	movs	r2, #0
 8005190:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8005192:	4b13      	ldr	r3, [pc, #76]	; (80051e0 <MX_USART1_UART_Init+0x90>)
 8005194:	2200      	movs	r2, #0
 8005196:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8005198:	4811      	ldr	r0, [pc, #68]	; (80051e0 <MX_USART1_UART_Init+0x90>)
 800519a:	f00b fbed 	bl	8010978 <HAL_UART_Init>
 800519e:	4603      	mov	r3, r0
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	d001      	beq.n	80051a8 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 80051a4:	f000 f8ce 	bl	8005344 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80051a8:	2100      	movs	r1, #0
 80051aa:	480d      	ldr	r0, [pc, #52]	; (80051e0 <MX_USART1_UART_Init+0x90>)
 80051ac:	f00c f9b4 	bl	8011518 <HAL_UARTEx_SetTxFifoThreshold>
 80051b0:	4603      	mov	r3, r0
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d001      	beq.n	80051ba <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 80051b6:	f000 f8c5 	bl	8005344 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80051ba:	2100      	movs	r1, #0
 80051bc:	4808      	ldr	r0, [pc, #32]	; (80051e0 <MX_USART1_UART_Init+0x90>)
 80051be:	f00c f9e9 	bl	8011594 <HAL_UARTEx_SetRxFifoThreshold>
 80051c2:	4603      	mov	r3, r0
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	d001      	beq.n	80051cc <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 80051c8:	f000 f8bc 	bl	8005344 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80051cc:	4804      	ldr	r0, [pc, #16]	; (80051e0 <MX_USART1_UART_Init+0x90>)
 80051ce:	f00c f96a 	bl	80114a6 <HAL_UARTEx_DisableFifoMode>
 80051d2:	4603      	mov	r3, r0
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	d001      	beq.n	80051dc <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 80051d8:	f000 f8b4 	bl	8005344 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80051dc:	bf00      	nop
 80051de:	bd80      	pop	{r7, pc}
 80051e0:	20000978 	.word	0x20000978
 80051e4:	40013800 	.word	0x40013800

080051e8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80051e8:	b580      	push	{r7, lr}
 80051ea:	b082      	sub	sp, #8
 80051ec:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 80051ee:	4b12      	ldr	r3, [pc, #72]	; (8005238 <MX_DMA_Init+0x50>)
 80051f0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80051f2:	4a11      	ldr	r2, [pc, #68]	; (8005238 <MX_DMA_Init+0x50>)
 80051f4:	f043 0304 	orr.w	r3, r3, #4
 80051f8:	6493      	str	r3, [r2, #72]	; 0x48
 80051fa:	4b0f      	ldr	r3, [pc, #60]	; (8005238 <MX_DMA_Init+0x50>)
 80051fc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80051fe:	f003 0304 	and.w	r3, r3, #4
 8005202:	607b      	str	r3, [r7, #4]
 8005204:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8005206:	4b0c      	ldr	r3, [pc, #48]	; (8005238 <MX_DMA_Init+0x50>)
 8005208:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800520a:	4a0b      	ldr	r2, [pc, #44]	; (8005238 <MX_DMA_Init+0x50>)
 800520c:	f043 0301 	orr.w	r3, r3, #1
 8005210:	6493      	str	r3, [r2, #72]	; 0x48
 8005212:	4b09      	ldr	r3, [pc, #36]	; (8005238 <MX_DMA_Init+0x50>)
 8005214:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005216:	f003 0301 	and.w	r3, r3, #1
 800521a:	603b      	str	r3, [r7, #0]
 800521c:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800521e:	2200      	movs	r2, #0
 8005220:	2100      	movs	r1, #0
 8005222:	200b      	movs	r0, #11
 8005224:	f006 fb9b 	bl	800b95e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8005228:	200b      	movs	r0, #11
 800522a:	f006 fbb2 	bl	800b992 <HAL_NVIC_EnableIRQ>

}
 800522e:	bf00      	nop
 8005230:	3708      	adds	r7, #8
 8005232:	46bd      	mov	sp, r7
 8005234:	bd80      	pop	{r7, pc}
 8005236:	bf00      	nop
 8005238:	40021000 	.word	0x40021000

0800523c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800523c:	b580      	push	{r7, lr}
 800523e:	b08a      	sub	sp, #40	; 0x28
 8005240:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005242:	f107 0314 	add.w	r3, r7, #20
 8005246:	2200      	movs	r2, #0
 8005248:	601a      	str	r2, [r3, #0]
 800524a:	605a      	str	r2, [r3, #4]
 800524c:	609a      	str	r2, [r3, #8]
 800524e:	60da      	str	r2, [r3, #12]
 8005250:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8005252:	4b39      	ldr	r3, [pc, #228]	; (8005338 <MX_GPIO_Init+0xfc>)
 8005254:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005256:	4a38      	ldr	r2, [pc, #224]	; (8005338 <MX_GPIO_Init+0xfc>)
 8005258:	f043 0304 	orr.w	r3, r3, #4
 800525c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800525e:	4b36      	ldr	r3, [pc, #216]	; (8005338 <MX_GPIO_Init+0xfc>)
 8005260:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005262:	f003 0304 	and.w	r3, r3, #4
 8005266:	613b      	str	r3, [r7, #16]
 8005268:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800526a:	4b33      	ldr	r3, [pc, #204]	; (8005338 <MX_GPIO_Init+0xfc>)
 800526c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800526e:	4a32      	ldr	r2, [pc, #200]	; (8005338 <MX_GPIO_Init+0xfc>)
 8005270:	f043 0320 	orr.w	r3, r3, #32
 8005274:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005276:	4b30      	ldr	r3, [pc, #192]	; (8005338 <MX_GPIO_Init+0xfc>)
 8005278:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800527a:	f003 0320 	and.w	r3, r3, #32
 800527e:	60fb      	str	r3, [r7, #12]
 8005280:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8005282:	4b2d      	ldr	r3, [pc, #180]	; (8005338 <MX_GPIO_Init+0xfc>)
 8005284:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005286:	4a2c      	ldr	r2, [pc, #176]	; (8005338 <MX_GPIO_Init+0xfc>)
 8005288:	f043 0301 	orr.w	r3, r3, #1
 800528c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800528e:	4b2a      	ldr	r3, [pc, #168]	; (8005338 <MX_GPIO_Init+0xfc>)
 8005290:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005292:	f003 0301 	and.w	r3, r3, #1
 8005296:	60bb      	str	r3, [r7, #8]
 8005298:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800529a:	4b27      	ldr	r3, [pc, #156]	; (8005338 <MX_GPIO_Init+0xfc>)
 800529c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800529e:	4a26      	ldr	r2, [pc, #152]	; (8005338 <MX_GPIO_Init+0xfc>)
 80052a0:	f043 0302 	orr.w	r3, r3, #2
 80052a4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80052a6:	4b24      	ldr	r3, [pc, #144]	; (8005338 <MX_GPIO_Init+0xfc>)
 80052a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80052aa:	f003 0302 	and.w	r3, r3, #2
 80052ae:	607b      	str	r3, [r7, #4]
 80052b0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 80052b2:	2200      	movs	r2, #0
 80052b4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80052b8:	4820      	ldr	r0, [pc, #128]	; (800533c <MX_GPIO_Init+0x100>)
 80052ba:	f006 ffd7 	bl	800c26c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, W5500_RST_Pin|W5500_CS_Pin, GPIO_PIN_RESET);
 80052be:	2200      	movs	r2, #0
 80052c0:	2118      	movs	r1, #24
 80052c2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80052c6:	f006 ffd1 	bl	800c26c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, selZ1_Pin|selZ2_Pin|selZ3_Pin|selZ4_Pin, GPIO_PIN_RESET);
 80052ca:	2200      	movs	r2, #0
 80052cc:	f44f 41f0 	mov.w	r1, #30720	; 0x7800
 80052d0:	481b      	ldr	r0, [pc, #108]	; (8005340 <MX_GPIO_Init+0x104>)
 80052d2:	f006 ffcb 	bl	800c26c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 80052d6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80052da:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80052dc:	2301      	movs	r3, #1
 80052de:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80052e0:	2300      	movs	r3, #0
 80052e2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80052e4:	2300      	movs	r3, #0
 80052e6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 80052e8:	f107 0314 	add.w	r3, r7, #20
 80052ec:	4619      	mov	r1, r3
 80052ee:	4813      	ldr	r0, [pc, #76]	; (800533c <MX_GPIO_Init+0x100>)
 80052f0:	f006 fe3a 	bl	800bf68 <HAL_GPIO_Init>

  /*Configure GPIO pins : W5500_RST_Pin W5500_CS_Pin */
  GPIO_InitStruct.Pin = W5500_RST_Pin|W5500_CS_Pin;
 80052f4:	2318      	movs	r3, #24
 80052f6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80052f8:	2301      	movs	r3, #1
 80052fa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80052fc:	2300      	movs	r3, #0
 80052fe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005300:	2300      	movs	r3, #0
 8005302:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005304:	f107 0314 	add.w	r3, r7, #20
 8005308:	4619      	mov	r1, r3
 800530a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800530e:	f006 fe2b 	bl	800bf68 <HAL_GPIO_Init>

  /*Configure GPIO pins : selZ1_Pin selZ2_Pin selZ3_Pin selZ4_Pin */
  GPIO_InitStruct.Pin = selZ1_Pin|selZ2_Pin|selZ3_Pin|selZ4_Pin;
 8005312:	f44f 43f0 	mov.w	r3, #30720	; 0x7800
 8005316:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005318:	2301      	movs	r3, #1
 800531a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800531c:	2300      	movs	r3, #0
 800531e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005320:	2300      	movs	r3, #0
 8005322:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005324:	f107 0314 	add.w	r3, r7, #20
 8005328:	4619      	mov	r1, r3
 800532a:	4805      	ldr	r0, [pc, #20]	; (8005340 <MX_GPIO_Init+0x104>)
 800532c:	f006 fe1c 	bl	800bf68 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8005330:	bf00      	nop
 8005332:	3728      	adds	r7, #40	; 0x28
 8005334:	46bd      	mov	sp, r7
 8005336:	bd80      	pop	{r7, pc}
 8005338:	40021000 	.word	0x40021000
 800533c:	48000800 	.word	0x48000800
 8005340:	48000400 	.word	0x48000400

08005344 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8005344:	b480      	push	{r7}
 8005346:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8005348:	b672      	cpsid	i
}
 800534a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800534c:	e7fe      	b.n	800534c <Error_Handler+0x8>
	...

08005350 <rt_hypotd_snf>:
 * Arguments    : double u0
 *                double u1
 * Return Type  : double
 */
static float rt_hypotd_snf(float u0, float u1)
{
 8005350:	b5b0      	push	{r4, r5, r7, lr}
 8005352:	b086      	sub	sp, #24
 8005354:	af00      	add	r7, sp, #0
 8005356:	ed87 0a01 	vstr	s0, [r7, #4]
 800535a:	edc7 0a00 	vstr	s1, [r7]
	float a;
	float b;
	float y;
  a = fabs(u0);
 800535e:	edd7 7a01 	vldr	s15, [r7, #4]
 8005362:	eef0 7ae7 	vabs.f32	s15, s15
 8005366:	edc7 7a04 	vstr	s15, [r7, #16]
  b = fabs(u1);
 800536a:	edd7 7a00 	vldr	s15, [r7]
 800536e:	eef0 7ae7 	vabs.f32	s15, s15
 8005372:	edc7 7a03 	vstr	s15, [r7, #12]
  if (a < b) {
 8005376:	ed97 7a04 	vldr	s14, [r7, #16]
 800537a:	edd7 7a03 	vldr	s15, [r7, #12]
 800537e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005382:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005386:	d532      	bpl.n	80053ee <rt_hypotd_snf+0x9e>
    a /= b;
 8005388:	edd7 6a04 	vldr	s13, [r7, #16]
 800538c:	ed97 7a03 	vldr	s14, [r7, #12]
 8005390:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005394:	edc7 7a04 	vstr	s15, [r7, #16]
    y = b * sqrt(a * a + 1.0);
 8005398:	68f8      	ldr	r0, [r7, #12]
 800539a:	f7fb f8fd 	bl	8000598 <__aeabi_f2d>
 800539e:	4604      	mov	r4, r0
 80053a0:	460d      	mov	r5, r1
 80053a2:	edd7 7a04 	vldr	s15, [r7, #16]
 80053a6:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80053aa:	ee17 0a90 	vmov	r0, s15
 80053ae:	f7fb f8f3 	bl	8000598 <__aeabi_f2d>
 80053b2:	f04f 0200 	mov.w	r2, #0
 80053b6:	4b46      	ldr	r3, [pc, #280]	; (80054d0 <rt_hypotd_snf+0x180>)
 80053b8:	f7fa ff90 	bl	80002dc <__adddf3>
 80053bc:	4602      	mov	r2, r0
 80053be:	460b      	mov	r3, r1
 80053c0:	ec43 2b17 	vmov	d7, r2, r3
 80053c4:	eeb0 0a47 	vmov.f32	s0, s14
 80053c8:	eef0 0a67 	vmov.f32	s1, s15
 80053cc:	f00f f8cc 	bl	8014568 <sqrt>
 80053d0:	ec53 2b10 	vmov	r2, r3, d0
 80053d4:	4620      	mov	r0, r4
 80053d6:	4629      	mov	r1, r5
 80053d8:	f7fb f936 	bl	8000648 <__aeabi_dmul>
 80053dc:	4602      	mov	r2, r0
 80053de:	460b      	mov	r3, r1
 80053e0:	4610      	mov	r0, r2
 80053e2:	4619      	mov	r1, r3
 80053e4:	f7fb fc08 	bl	8000bf8 <__aeabi_d2f>
 80053e8:	4603      	mov	r3, r0
 80053ea:	617b      	str	r3, [r7, #20]
 80053ec:	e061      	b.n	80054b2 <rt_hypotd_snf+0x162>
  } else if (a > b) {
 80053ee:	ed97 7a04 	vldr	s14, [r7, #16]
 80053f2:	edd7 7a03 	vldr	s15, [r7, #12]
 80053f6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80053fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80053fe:	dd32      	ble.n	8005466 <rt_hypotd_snf+0x116>
    b /= a;
 8005400:	edd7 6a03 	vldr	s13, [r7, #12]
 8005404:	ed97 7a04 	vldr	s14, [r7, #16]
 8005408:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800540c:	edc7 7a03 	vstr	s15, [r7, #12]
    y = a * sqrt(b * b + 1.0);
 8005410:	6938      	ldr	r0, [r7, #16]
 8005412:	f7fb f8c1 	bl	8000598 <__aeabi_f2d>
 8005416:	4604      	mov	r4, r0
 8005418:	460d      	mov	r5, r1
 800541a:	edd7 7a03 	vldr	s15, [r7, #12]
 800541e:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8005422:	ee17 0a90 	vmov	r0, s15
 8005426:	f7fb f8b7 	bl	8000598 <__aeabi_f2d>
 800542a:	f04f 0200 	mov.w	r2, #0
 800542e:	4b28      	ldr	r3, [pc, #160]	; (80054d0 <rt_hypotd_snf+0x180>)
 8005430:	f7fa ff54 	bl	80002dc <__adddf3>
 8005434:	4602      	mov	r2, r0
 8005436:	460b      	mov	r3, r1
 8005438:	ec43 2b17 	vmov	d7, r2, r3
 800543c:	eeb0 0a47 	vmov.f32	s0, s14
 8005440:	eef0 0a67 	vmov.f32	s1, s15
 8005444:	f00f f890 	bl	8014568 <sqrt>
 8005448:	ec53 2b10 	vmov	r2, r3, d0
 800544c:	4620      	mov	r0, r4
 800544e:	4629      	mov	r1, r5
 8005450:	f7fb f8fa 	bl	8000648 <__aeabi_dmul>
 8005454:	4602      	mov	r2, r0
 8005456:	460b      	mov	r3, r1
 8005458:	4610      	mov	r0, r2
 800545a:	4619      	mov	r1, r3
 800545c:	f7fb fbcc 	bl	8000bf8 <__aeabi_d2f>
 8005460:	4603      	mov	r3, r0
 8005462:	617b      	str	r3, [r7, #20]
 8005464:	e025      	b.n	80054b2 <rt_hypotd_snf+0x162>
  } else if (rtIsNaN(b)) {
 8005466:	68f8      	ldr	r0, [r7, #12]
 8005468:	f7fb f896 	bl	8000598 <__aeabi_f2d>
 800546c:	4602      	mov	r2, r0
 800546e:	460b      	mov	r3, r1
 8005470:	ec43 2b10 	vmov	d0, r2, r3
 8005474:	f001 fa36 	bl	80068e4 <rtIsNaN>
 8005478:	4603      	mov	r3, r0
 800547a:	2b00      	cmp	r3, #0
 800547c:	d009      	beq.n	8005492 <rt_hypotd_snf+0x142>
    y = rtNaN;
 800547e:	4b15      	ldr	r3, [pc, #84]	; (80054d4 <rt_hypotd_snf+0x184>)
 8005480:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005484:	4610      	mov	r0, r2
 8005486:	4619      	mov	r1, r3
 8005488:	f7fb fbb6 	bl	8000bf8 <__aeabi_d2f>
 800548c:	4603      	mov	r3, r0
 800548e:	617b      	str	r3, [r7, #20]
 8005490:	e00f      	b.n	80054b2 <rt_hypotd_snf+0x162>
  } else {
    y = a * 1.4142135623730951;
 8005492:	6938      	ldr	r0, [r7, #16]
 8005494:	f7fb f880 	bl	8000598 <__aeabi_f2d>
 8005498:	a30b      	add	r3, pc, #44	; (adr r3, 80054c8 <rt_hypotd_snf+0x178>)
 800549a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800549e:	f7fb f8d3 	bl	8000648 <__aeabi_dmul>
 80054a2:	4602      	mov	r2, r0
 80054a4:	460b      	mov	r3, r1
 80054a6:	4610      	mov	r0, r2
 80054a8:	4619      	mov	r1, r3
 80054aa:	f7fb fba5 	bl	8000bf8 <__aeabi_d2f>
 80054ae:	4603      	mov	r3, r0
 80054b0:	617b      	str	r3, [r7, #20]
  }
  return y;
 80054b2:	697b      	ldr	r3, [r7, #20]
 80054b4:	ee07 3a90 	vmov	s15, r3
}
 80054b8:	eeb0 0a67 	vmov.f32	s0, s15
 80054bc:	3718      	adds	r7, #24
 80054be:	46bd      	mov	sp, r7
 80054c0:	bdb0      	pop	{r4, r5, r7, pc}
 80054c2:	bf00      	nop
 80054c4:	f3af 8000 	nop.w
 80054c8:	667f3bcd 	.word	0x667f3bcd
 80054cc:	3ff6a09e 	.word	0x3ff6a09e
 80054d0:	3ff00000 	.word	0x3ff00000
 80054d4:	20000370 	.word	0x20000370

080054d8 <maxEnvHilbert>:
 * Arguments    : const double A[1024]
 *                const double B[140]
 * Return Type  : double
 */
float maxEnvHilbert(const float A[1024], const float B[140])
{
 80054d8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80054dc:	f5ad 4d21 	sub.w	sp, sp, #41216	; 0xa100
 80054e0:	b0a0      	sub	sp, #128	; 0x80
 80054e2:	af02      	add	r7, sp, #8
 80054e4:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 80054e8:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 80054ec:	6018      	str	r0, [r3, #0]
 80054ee:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 80054f2:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 80054f6:	6019      	str	r1, [r3, #0]
  int iheight;
  int iy;
  int j;
  int ju;
  int k;
  mx = 0.0;
 80054f8:	f04f 0300 	mov.w	r3, #0
 80054fc:	f507 4221 	add.w	r2, r7, #41216	; 0xa100
 8005500:	f102 0270 	add.w	r2, r2, #112	; 0x70
 8005504:	6013      	str	r3, [r2, #0]
  mx2 = 0.0;
 8005506:	f04f 0300 	mov.w	r3, #0
 800550a:	f507 4221 	add.w	r2, r7, #41216	; 0xa100
 800550e:	f102 026c 	add.w	r2, r2, #108	; 0x6c
 8005512:	6013      	str	r3, [r2, #0]
  m = 0.0;
 8005514:	f04f 0300 	mov.w	r3, #0
 8005518:	f507 4221 	add.w	r2, r7, #41216	; 0xa100
 800551c:	f102 0274 	add.w	r2, r2, #116	; 0x74
 8005520:	6013      	str	r3, [r2, #0]
  k = 0;
 8005522:	2300      	movs	r3, #0
 8005524:	f507 4221 	add.w	r2, r7, #41216	; 0xa100
 8005528:	f102 0250 	add.w	r2, r2, #80	; 0x50
 800552c:	6013      	str	r3, [r2, #0]
  memset(&z[0], 0, 1024U * sizeof(float));
 800552e:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 8005532:	3b80      	subs	r3, #128	; 0x80
 8005534:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8005538:	2100      	movs	r1, #0
 800553a:	4618      	mov	r0, r3
 800553c:	f00c f8ee 	bl	801171c <memset>
  for (b_k = 0; b_k < 70; b_k++) {
 8005540:	2300      	movs	r3, #0
 8005542:	f507 4221 	add.w	r2, r7, #41216	; 0xa100
 8005546:	f102 0268 	add.w	r2, r2, #104	; 0x68
 800554a:	6013      	str	r3, [r2, #0]
 800554c:	e075      	b.n	800563a <maxEnvHilbert+0x162>
    iheight = b_k + 953;
 800554e:	f507 4321 	add.w	r3, r7, #41216	; 0xa100
 8005552:	f103 0368 	add.w	r3, r3, #104	; 0x68
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	f203 33b9 	addw	r3, r3, #953	; 0x3b9
 800555c:	f507 4221 	add.w	r2, r7, #41216	; 0xa100
 8005560:	f102 0260 	add.w	r2, r2, #96	; 0x60
 8005564:	6013      	str	r3, [r2, #0]
    for (iy = 0; iy <= iheight; iy++) {
 8005566:	2300      	movs	r3, #0
 8005568:	f507 4221 	add.w	r2, r7, #41216	; 0xa100
 800556c:	f102 025c 	add.w	r2, r2, #92	; 0x5c
 8005570:	6013      	str	r3, [r2, #0]
 8005572:	e04b      	b.n	800560c <maxEnvHilbert+0x134>
      z[iy] += B[b_k] * A[(iy - b_k) + 70];
 8005574:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 8005578:	461a      	mov	r2, r3
 800557a:	f507 4321 	add.w	r3, r7, #41216	; 0xa100
 800557e:	f103 035c 	add.w	r3, r3, #92	; 0x5c
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	009b      	lsls	r3, r3, #2
 8005586:	4413      	add	r3, r2
 8005588:	3b80      	subs	r3, #128	; 0x80
 800558a:	ed93 7a00 	vldr	s14, [r3]
 800558e:	f507 4321 	add.w	r3, r7, #41216	; 0xa100
 8005592:	f103 0368 	add.w	r3, r3, #104	; 0x68
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	009b      	lsls	r3, r3, #2
 800559a:	f507 72bc 	add.w	r2, r7, #376	; 0x178
 800559e:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 80055a2:	6812      	ldr	r2, [r2, #0]
 80055a4:	4413      	add	r3, r2
 80055a6:	edd3 6a00 	vldr	s13, [r3]
 80055aa:	f507 4321 	add.w	r3, r7, #41216	; 0xa100
 80055ae:	f103 035c 	add.w	r3, r3, #92	; 0x5c
 80055b2:	681a      	ldr	r2, [r3, #0]
 80055b4:	f507 4321 	add.w	r3, r7, #41216	; 0xa100
 80055b8:	f103 0368 	add.w	r3, r3, #104	; 0x68
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	1ad3      	subs	r3, r2, r3
 80055c0:	3346      	adds	r3, #70	; 0x46
 80055c2:	009b      	lsls	r3, r3, #2
 80055c4:	f507 72bc 	add.w	r2, r7, #376	; 0x178
 80055c8:	f5a2 72ba 	sub.w	r2, r2, #372	; 0x174
 80055cc:	6812      	ldr	r2, [r2, #0]
 80055ce:	4413      	add	r3, r2
 80055d0:	edd3 7a00 	vldr	s15, [r3]
 80055d4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80055d8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80055dc:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 80055e0:	461a      	mov	r2, r3
 80055e2:	f507 4321 	add.w	r3, r7, #41216	; 0xa100
 80055e6:	f103 035c 	add.w	r3, r3, #92	; 0x5c
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	009b      	lsls	r3, r3, #2
 80055ee:	4413      	add	r3, r2
 80055f0:	3b80      	subs	r3, #128	; 0x80
 80055f2:	edc3 7a00 	vstr	s15, [r3]
    for (iy = 0; iy <= iheight; iy++) {
 80055f6:	f507 4321 	add.w	r3, r7, #41216	; 0xa100
 80055fa:	f103 035c 	add.w	r3, r3, #92	; 0x5c
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	3301      	adds	r3, #1
 8005602:	f507 4221 	add.w	r2, r7, #41216	; 0xa100
 8005606:	f102 025c 	add.w	r2, r2, #92	; 0x5c
 800560a:	6013      	str	r3, [r2, #0]
 800560c:	f507 4321 	add.w	r3, r7, #41216	; 0xa100
 8005610:	f103 035c 	add.w	r3, r3, #92	; 0x5c
 8005614:	681a      	ldr	r2, [r3, #0]
 8005616:	f507 4321 	add.w	r3, r7, #41216	; 0xa100
 800561a:	f103 0360 	add.w	r3, r3, #96	; 0x60
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	429a      	cmp	r2, r3
 8005622:	dda7      	ble.n	8005574 <maxEnvHilbert+0x9c>
  for (b_k = 0; b_k < 70; b_k++) {
 8005624:	f507 4321 	add.w	r3, r7, #41216	; 0xa100
 8005628:	f103 0368 	add.w	r3, r3, #104	; 0x68
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	3301      	adds	r3, #1
 8005630:	f507 4221 	add.w	r2, r7, #41216	; 0xa100
 8005634:	f102 0268 	add.w	r2, r2, #104	; 0x68
 8005638:	6013      	str	r3, [r2, #0]
 800563a:	f507 4321 	add.w	r3, r7, #41216	; 0xa100
 800563e:	f103 0368 	add.w	r3, r3, #104	; 0x68
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	2b45      	cmp	r3, #69	; 0x45
 8005646:	dd82      	ble.n	800554e <maxEnvHilbert+0x76>
    }
  }
  for (b_k = 0; b_k < 70; b_k++) {
 8005648:	2300      	movs	r3, #0
 800564a:	f507 4221 	add.w	r2, r7, #41216	; 0xa100
 800564e:	f102 0268 	add.w	r2, r2, #104	; 0x68
 8005652:	6013      	str	r3, [r2, #0]
 8005654:	e080      	b.n	8005758 <maxEnvHilbert+0x280>
    iheight = 1023 - b_k;
 8005656:	f507 4321 	add.w	r3, r7, #41216	; 0xa100
 800565a:	f103 0368 	add.w	r3, r3, #104	; 0x68
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	f5c3 737f 	rsb	r3, r3, #1020	; 0x3fc
 8005664:	3303      	adds	r3, #3
 8005666:	f507 4221 	add.w	r2, r7, #41216	; 0xa100
 800566a:	f102 0260 	add.w	r2, r2, #96	; 0x60
 800566e:	6013      	str	r3, [r2, #0]
    for (iy = 0; iy <= iheight; iy++) {
 8005670:	2300      	movs	r3, #0
 8005672:	f507 4221 	add.w	r2, r7, #41216	; 0xa100
 8005676:	f102 025c 	add.w	r2, r2, #92	; 0x5c
 800567a:	6013      	str	r3, [r2, #0]
 800567c:	e055      	b.n	800572a <maxEnvHilbert+0x252>
      ju = b_k + iy;
 800567e:	f507 4321 	add.w	r3, r7, #41216	; 0xa100
 8005682:	f103 0368 	add.w	r3, r3, #104	; 0x68
 8005686:	681a      	ldr	r2, [r3, #0]
 8005688:	f507 4321 	add.w	r3, r7, #41216	; 0xa100
 800568c:	f103 035c 	add.w	r3, r3, #92	; 0x5c
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	4413      	add	r3, r2
 8005694:	f507 4221 	add.w	r2, r7, #41216	; 0xa100
 8005698:	f102 0254 	add.w	r2, r2, #84	; 0x54
 800569c:	6013      	str	r3, [r2, #0]
      z[ju] += B[b_k + 70] * A[iy];
 800569e:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 80056a2:	461a      	mov	r2, r3
 80056a4:	f507 4321 	add.w	r3, r7, #41216	; 0xa100
 80056a8:	f103 0354 	add.w	r3, r3, #84	; 0x54
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	009b      	lsls	r3, r3, #2
 80056b0:	4413      	add	r3, r2
 80056b2:	3b80      	subs	r3, #128	; 0x80
 80056b4:	ed93 7a00 	vldr	s14, [r3]
 80056b8:	f507 4321 	add.w	r3, r7, #41216	; 0xa100
 80056bc:	f103 0368 	add.w	r3, r3, #104	; 0x68
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	3346      	adds	r3, #70	; 0x46
 80056c4:	009b      	lsls	r3, r3, #2
 80056c6:	f507 72bc 	add.w	r2, r7, #376	; 0x178
 80056ca:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 80056ce:	6812      	ldr	r2, [r2, #0]
 80056d0:	4413      	add	r3, r2
 80056d2:	edd3 6a00 	vldr	s13, [r3]
 80056d6:	f507 4321 	add.w	r3, r7, #41216	; 0xa100
 80056da:	f103 035c 	add.w	r3, r3, #92	; 0x5c
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	009b      	lsls	r3, r3, #2
 80056e2:	f507 72bc 	add.w	r2, r7, #376	; 0x178
 80056e6:	f5a2 72ba 	sub.w	r2, r2, #372	; 0x174
 80056ea:	6812      	ldr	r2, [r2, #0]
 80056ec:	4413      	add	r3, r2
 80056ee:	edd3 7a00 	vldr	s15, [r3]
 80056f2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80056f6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80056fa:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 80056fe:	461a      	mov	r2, r3
 8005700:	f507 4321 	add.w	r3, r7, #41216	; 0xa100
 8005704:	f103 0354 	add.w	r3, r3, #84	; 0x54
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	009b      	lsls	r3, r3, #2
 800570c:	4413      	add	r3, r2
 800570e:	3b80      	subs	r3, #128	; 0x80
 8005710:	edc3 7a00 	vstr	s15, [r3]
    for (iy = 0; iy <= iheight; iy++) {
 8005714:	f507 4321 	add.w	r3, r7, #41216	; 0xa100
 8005718:	f103 035c 	add.w	r3, r3, #92	; 0x5c
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	3301      	adds	r3, #1
 8005720:	f507 4221 	add.w	r2, r7, #41216	; 0xa100
 8005724:	f102 025c 	add.w	r2, r2, #92	; 0x5c
 8005728:	6013      	str	r3, [r2, #0]
 800572a:	f507 4321 	add.w	r3, r7, #41216	; 0xa100
 800572e:	f103 035c 	add.w	r3, r3, #92	; 0x5c
 8005732:	681a      	ldr	r2, [r3, #0]
 8005734:	f507 4321 	add.w	r3, r7, #41216	; 0xa100
 8005738:	f103 0360 	add.w	r3, r3, #96	; 0x60
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	429a      	cmp	r2, r3
 8005740:	dd9d      	ble.n	800567e <maxEnvHilbert+0x1a6>
  for (b_k = 0; b_k < 70; b_k++) {
 8005742:	f507 4321 	add.w	r3, r7, #41216	; 0xa100
 8005746:	f103 0368 	add.w	r3, r3, #104	; 0x68
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	3301      	adds	r3, #1
 800574e:	f507 4221 	add.w	r2, r7, #41216	; 0xa100
 8005752:	f102 0268 	add.w	r2, r2, #104	; 0x68
 8005756:	6013      	str	r3, [r2, #0]
 8005758:	f507 4321 	add.w	r3, r7, #41216	; 0xa100
 800575c:	f103 0368 	add.w	r3, r3, #104	; 0x68
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	2b45      	cmp	r3, #69	; 0x45
 8005764:	f77f af77 	ble.w	8005656 <maxEnvHilbert+0x17e>
    }
  }
  c_FFTImplementationCallback_doH(z, x);
 8005768:	f507 5205 	add.w	r2, r7, #8512	; 0x2140
 800576c:	f102 0238 	add.w	r2, r2, #56	; 0x38
 8005770:	3a58      	subs	r2, #88	; 0x58
 8005772:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 8005776:	3b80      	subs	r3, #128	; 0x80
 8005778:	4611      	mov	r1, r2
 800577a:	4618      	mov	r0, r3
 800577c:	f7fc fae8 	bl	8001d50 <c_FFTImplementationCallback_doH>
  for (i = 0; i < 511; i++) {
 8005780:	2300      	movs	r3, #0
 8005782:	f507 4221 	add.w	r2, r7, #41216	; 0xa100
 8005786:	f102 0264 	add.w	r2, r2, #100	; 0x64
 800578a:	6013      	str	r3, [r2, #0]
 800578c:	e07e      	b.n	800588c <maxEnvHilbert+0x3b4>
    x[i + 1].re *= 2.0;
 800578e:	f507 4321 	add.w	r3, r7, #41216	; 0xa100
 8005792:	f103 0364 	add.w	r3, r3, #100	; 0x64
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	3301      	adds	r3, #1
 800579a:	f507 5205 	add.w	r2, r7, #8512	; 0x2140
 800579e:	f102 0238 	add.w	r2, r2, #56	; 0x38
 80057a2:	011b      	lsls	r3, r3, #4
 80057a4:	4413      	add	r3, r2
 80057a6:	3b58      	subs	r3, #88	; 0x58
 80057a8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80057ac:	f507 4321 	add.w	r3, r7, #41216	; 0xa100
 80057b0:	f103 0364 	add.w	r3, r3, #100	; 0x64
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	1c5c      	adds	r4, r3, #1
 80057b8:	4602      	mov	r2, r0
 80057ba:	460b      	mov	r3, r1
 80057bc:	f7fa fd8e 	bl	80002dc <__adddf3>
 80057c0:	4602      	mov	r2, r0
 80057c2:	460b      	mov	r3, r1
 80057c4:	f507 5105 	add.w	r1, r7, #8512	; 0x2140
 80057c8:	f101 0138 	add.w	r1, r1, #56	; 0x38
 80057cc:	4608      	mov	r0, r1
 80057ce:	0121      	lsls	r1, r4, #4
 80057d0:	4401      	add	r1, r0
 80057d2:	3958      	subs	r1, #88	; 0x58
 80057d4:	e9c1 2300 	strd	r2, r3, [r1]
    x[i + 1].im *= 2.0;
 80057d8:	f507 4321 	add.w	r3, r7, #41216	; 0xa100
 80057dc:	f103 0364 	add.w	r3, r3, #100	; 0x64
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	3301      	adds	r3, #1
 80057e4:	f507 5205 	add.w	r2, r7, #8512	; 0x2140
 80057e8:	f102 0238 	add.w	r2, r2, #56	; 0x38
 80057ec:	011b      	lsls	r3, r3, #4
 80057ee:	4413      	add	r3, r2
 80057f0:	3b50      	subs	r3, #80	; 0x50
 80057f2:	e9d3 0100 	ldrd	r0, r1, [r3]
 80057f6:	f507 4321 	add.w	r3, r7, #41216	; 0xa100
 80057fa:	f103 0364 	add.w	r3, r3, #100	; 0x64
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	1c5c      	adds	r4, r3, #1
 8005802:	4602      	mov	r2, r0
 8005804:	460b      	mov	r3, r1
 8005806:	f7fa fd69 	bl	80002dc <__adddf3>
 800580a:	4602      	mov	r2, r0
 800580c:	460b      	mov	r3, r1
 800580e:	f507 5105 	add.w	r1, r7, #8512	; 0x2140
 8005812:	f101 0138 	add.w	r1, r1, #56	; 0x38
 8005816:	4608      	mov	r0, r1
 8005818:	0121      	lsls	r1, r4, #4
 800581a:	4401      	add	r1, r0
 800581c:	3950      	subs	r1, #80	; 0x50
 800581e:	e9c1 2300 	strd	r2, r3, [r1]
    x[i + 513].re = 0.0;
 8005822:	f507 4321 	add.w	r3, r7, #41216	; 0xa100
 8005826:	f103 0364 	add.w	r3, r3, #100	; 0x64
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	f203 2301 	addw	r3, r3, #513	; 0x201
 8005830:	f507 5205 	add.w	r2, r7, #8512	; 0x2140
 8005834:	f102 0238 	add.w	r2, r2, #56	; 0x38
 8005838:	011b      	lsls	r3, r3, #4
 800583a:	4413      	add	r3, r2
 800583c:	f1a3 0158 	sub.w	r1, r3, #88	; 0x58
 8005840:	f04f 0200 	mov.w	r2, #0
 8005844:	f04f 0300 	mov.w	r3, #0
 8005848:	e9c1 2300 	strd	r2, r3, [r1]
    x[i + 513].im = 0.0;
 800584c:	f507 4321 	add.w	r3, r7, #41216	; 0xa100
 8005850:	f103 0364 	add.w	r3, r3, #100	; 0x64
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	f203 2301 	addw	r3, r3, #513	; 0x201
 800585a:	f507 5205 	add.w	r2, r7, #8512	; 0x2140
 800585e:	f102 0238 	add.w	r2, r2, #56	; 0x38
 8005862:	011b      	lsls	r3, r3, #4
 8005864:	4413      	add	r3, r2
 8005866:	f1a3 0150 	sub.w	r1, r3, #80	; 0x50
 800586a:	f04f 0200 	mov.w	r2, #0
 800586e:	f04f 0300 	mov.w	r3, #0
 8005872:	e9c1 2300 	strd	r2, r3, [r1]
  for (i = 0; i < 511; i++) {
 8005876:	f507 4321 	add.w	r3, r7, #41216	; 0xa100
 800587a:	f103 0364 	add.w	r3, r3, #100	; 0x64
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	3301      	adds	r3, #1
 8005882:	f507 4221 	add.w	r2, r7, #41216	; 0xa100
 8005886:	f102 0264 	add.w	r2, r2, #100	; 0x64
 800588a:	6013      	str	r3, [r2, #0]
 800588c:	f507 4321 	add.w	r3, r7, #41216	; 0xa100
 8005890:	f103 0364 	add.w	r3, r3, #100	; 0x64
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	f5b3 7fff 	cmp.w	r3, #510	; 0x1fe
 800589a:	f77f af78 	ble.w	800578e <maxEnvHilbert+0x2b6>
  }
  memcpy(&b_x[0], &x[0], 1024U * sizeof(creal_T));
 800589e:	f507 5105 	add.w	r1, r7, #8512	; 0x2140
 80058a2:	f101 0138 	add.w	r1, r1, #56	; 0x38
 80058a6:	3958      	subs	r1, #88	; 0x58
 80058a8:	f507 43c2 	add.w	r3, r7, #24832	; 0x6100
 80058ac:	f103 0378 	add.w	r3, r3, #120	; 0x78
 80058b0:	3b58      	subs	r3, #88	; 0x58
 80058b2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80058b6:	4618      	mov	r0, r3
 80058b8:	f00b ff22 	bl	8011700 <memcpy>
  iy = 0;
 80058bc:	2300      	movs	r3, #0
 80058be:	f507 4221 	add.w	r2, r7, #41216	; 0xa100
 80058c2:	f102 025c 	add.w	r2, r2, #92	; 0x5c
 80058c6:	6013      	str	r3, [r2, #0]
  ju = 0;
 80058c8:	2300      	movs	r3, #0
 80058ca:	f507 4221 	add.w	r2, r7, #41216	; 0xa100
 80058ce:	f102 0254 	add.w	r2, r2, #84	; 0x54
 80058d2:	6013      	str	r3, [r2, #0]
  for (i = 0; i < 1023; i++) {
 80058d4:	2300      	movs	r3, #0
 80058d6:	f507 4221 	add.w	r2, r7, #41216	; 0xa100
 80058da:	f102 0264 	add.w	r2, r2, #100	; 0x64
 80058de:	6013      	str	r3, [r2, #0]
 80058e0:	e078      	b.n	80059d4 <maxEnvHilbert+0x4fc>
    boolean_T tst;
    x[iy] = b_x[i];
 80058e2:	f507 5305 	add.w	r3, r7, #8512	; 0x2140
 80058e6:	f103 0338 	add.w	r3, r3, #56	; 0x38
 80058ea:	461a      	mov	r2, r3
 80058ec:	f507 4321 	add.w	r3, r7, #41216	; 0xa100
 80058f0:	f103 035c 	add.w	r3, r3, #92	; 0x5c
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	011b      	lsls	r3, r3, #4
 80058f8:	4413      	add	r3, r2
 80058fa:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 80058fe:	f507 43c2 	add.w	r3, r7, #24832	; 0x6100
 8005902:	f103 0378 	add.w	r3, r3, #120	; 0x78
 8005906:	4619      	mov	r1, r3
 8005908:	f507 4321 	add.w	r3, r7, #41216	; 0xa100
 800590c:	f103 0364 	add.w	r3, r3, #100	; 0x64
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	011b      	lsls	r3, r3, #4
 8005914:	440b      	add	r3, r1
 8005916:	3b58      	subs	r3, #88	; 0x58
 8005918:	4614      	mov	r4, r2
 800591a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800591c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    iy = 1024;
 8005920:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005924:	f507 4221 	add.w	r2, r7, #41216	; 0xa100
 8005928:	f102 025c 	add.w	r2, r2, #92	; 0x5c
 800592c:	6013      	str	r3, [r2, #0]
    tst = true;
 800592e:	2301      	movs	r3, #1
 8005930:	f507 4221 	add.w	r2, r7, #41216	; 0xa100
 8005934:	f102 024f 	add.w	r2, r2, #79	; 0x4f
 8005938:	7013      	strb	r3, [r2, #0]
    while (tst) {
 800593a:	e02f      	b.n	800599c <maxEnvHilbert+0x4c4>
      iy >>= 1;
 800593c:	f507 4321 	add.w	r3, r7, #41216	; 0xa100
 8005940:	f103 035c 	add.w	r3, r3, #92	; 0x5c
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	105b      	asrs	r3, r3, #1
 8005948:	f507 4221 	add.w	r2, r7, #41216	; 0xa100
 800594c:	f102 025c 	add.w	r2, r2, #92	; 0x5c
 8005950:	6013      	str	r3, [r2, #0]
      ju ^= iy;
 8005952:	f507 4321 	add.w	r3, r7, #41216	; 0xa100
 8005956:	f103 0354 	add.w	r3, r3, #84	; 0x54
 800595a:	681a      	ldr	r2, [r3, #0]
 800595c:	f507 4321 	add.w	r3, r7, #41216	; 0xa100
 8005960:	f103 035c 	add.w	r3, r3, #92	; 0x5c
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	4053      	eors	r3, r2
 8005968:	f507 4221 	add.w	r2, r7, #41216	; 0xa100
 800596c:	f102 0254 	add.w	r2, r2, #84	; 0x54
 8005970:	6013      	str	r3, [r2, #0]
      tst = ((ju & iy) == 0);
 8005972:	f507 4321 	add.w	r3, r7, #41216	; 0xa100
 8005976:	f103 0354 	add.w	r3, r3, #84	; 0x54
 800597a:	681a      	ldr	r2, [r3, #0]
 800597c:	f507 4321 	add.w	r3, r7, #41216	; 0xa100
 8005980:	f103 035c 	add.w	r3, r3, #92	; 0x5c
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	4013      	ands	r3, r2
 8005988:	2b00      	cmp	r3, #0
 800598a:	bf0c      	ite	eq
 800598c:	2301      	moveq	r3, #1
 800598e:	2300      	movne	r3, #0
 8005990:	b2db      	uxtb	r3, r3
 8005992:	f507 4221 	add.w	r2, r7, #41216	; 0xa100
 8005996:	f102 024f 	add.w	r2, r2, #79	; 0x4f
 800599a:	7013      	strb	r3, [r2, #0]
    while (tst) {
 800599c:	f507 4321 	add.w	r3, r7, #41216	; 0xa100
 80059a0:	f103 034f 	add.w	r3, r3, #79	; 0x4f
 80059a4:	781b      	ldrb	r3, [r3, #0]
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	d1c8      	bne.n	800593c <maxEnvHilbert+0x464>
    }
    iy = ju;
 80059aa:	f507 4321 	add.w	r3, r7, #41216	; 0xa100
 80059ae:	f103 0354 	add.w	r3, r3, #84	; 0x54
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	f507 4221 	add.w	r2, r7, #41216	; 0xa100
 80059b8:	f102 025c 	add.w	r2, r2, #92	; 0x5c
 80059bc:	6013      	str	r3, [r2, #0]
  for (i = 0; i < 1023; i++) {
 80059be:	f507 4321 	add.w	r3, r7, #41216	; 0xa100
 80059c2:	f103 0364 	add.w	r3, r3, #100	; 0x64
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	3301      	adds	r3, #1
 80059ca:	f507 4221 	add.w	r2, r7, #41216	; 0xa100
 80059ce:	f102 0264 	add.w	r2, r2, #100	; 0x64
 80059d2:	6013      	str	r3, [r2, #0]
 80059d4:	f507 4321 	add.w	r3, r7, #41216	; 0xa100
 80059d8:	f103 0364 	add.w	r3, r3, #100	; 0x64
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	f240 32fe 	movw	r2, #1022	; 0x3fe
 80059e2:	4293      	cmp	r3, r2
 80059e4:	f77f af7d 	ble.w	80058e2 <maxEnvHilbert+0x40a>
  }
  x[iy] = b_x[1023];
 80059e8:	f507 5305 	add.w	r3, r7, #8512	; 0x2140
 80059ec:	f103 0338 	add.w	r3, r3, #56	; 0x38
 80059f0:	461a      	mov	r2, r3
 80059f2:	f507 4321 	add.w	r3, r7, #41216	; 0xa100
 80059f6:	f103 035c 	add.w	r3, r3, #92	; 0x5c
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	011b      	lsls	r3, r3, #4
 80059fe:	4413      	add	r3, r2
 8005a00:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 8005a04:	f507 43c2 	add.w	r3, r7, #24832	; 0x6100
 8005a08:	f103 0378 	add.w	r3, r3, #120	; 0x78
 8005a0c:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8005a10:	4614      	mov	r4, r2
 8005a12:	f603 7398 	addw	r3, r3, #3992	; 0xf98
 8005a16:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8005a18:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  for (i = 0; i <= 1022; i += 2) {
 8005a1c:	2300      	movs	r3, #0
 8005a1e:	f507 4221 	add.w	r2, r7, #41216	; 0xa100
 8005a22:	f102 0264 	add.w	r2, r2, #100	; 0x64
 8005a26:	6013      	str	r3, [r2, #0]
 8005a28:	e0fc      	b.n	8005c24 <maxEnvHilbert+0x74c>
    temp_re_tmp = x[i + 1].re;
 8005a2a:	f507 4321 	add.w	r3, r7, #41216	; 0xa100
 8005a2e:	f103 0364 	add.w	r3, r3, #100	; 0x64
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	3301      	adds	r3, #1
 8005a36:	f507 5205 	add.w	r2, r7, #8512	; 0x2140
 8005a3a:	f102 0238 	add.w	r2, r2, #56	; 0x38
 8005a3e:	011b      	lsls	r3, r3, #4
 8005a40:	4413      	add	r3, r2
 8005a42:	3b58      	subs	r3, #88	; 0x58
 8005a44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a48:	4610      	mov	r0, r2
 8005a4a:	4619      	mov	r1, r3
 8005a4c:	f7fb f8d4 	bl	8000bf8 <__aeabi_d2f>
 8005a50:	4603      	mov	r3, r0
 8005a52:	f507 4221 	add.w	r2, r7, #41216	; 0xa100
 8005a56:	f102 0224 	add.w	r2, r2, #36	; 0x24
 8005a5a:	6013      	str	r3, [r2, #0]
    temp_re = x[i + 1].im;
 8005a5c:	f507 4321 	add.w	r3, r7, #41216	; 0xa100
 8005a60:	f103 0364 	add.w	r3, r3, #100	; 0x64
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	3301      	adds	r3, #1
 8005a68:	f507 5205 	add.w	r2, r7, #8512	; 0x2140
 8005a6c:	f102 0238 	add.w	r2, r2, #56	; 0x38
 8005a70:	011b      	lsls	r3, r3, #4
 8005a72:	4413      	add	r3, r2
 8005a74:	3b50      	subs	r3, #80	; 0x50
 8005a76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a7a:	4610      	mov	r0, r2
 8005a7c:	4619      	mov	r1, r3
 8005a7e:	f7fb f8bb 	bl	8000bf8 <__aeabi_d2f>
 8005a82:	4603      	mov	r3, r0
 8005a84:	f507 4221 	add.w	r2, r7, #41216	; 0xa100
 8005a88:	f102 0240 	add.w	r2, r2, #64	; 0x40
 8005a8c:	6013      	str	r3, [r2, #0]
    temp_im = x[i].re;
 8005a8e:	f507 5305 	add.w	r3, r7, #8512	; 0x2140
 8005a92:	f103 0338 	add.w	r3, r3, #56	; 0x38
 8005a96:	461a      	mov	r2, r3
 8005a98:	f507 4321 	add.w	r3, r7, #41216	; 0xa100
 8005a9c:	f103 0364 	add.w	r3, r3, #100	; 0x64
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	011b      	lsls	r3, r3, #4
 8005aa4:	4413      	add	r3, r2
 8005aa6:	3b58      	subs	r3, #88	; 0x58
 8005aa8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005aac:	4610      	mov	r0, r2
 8005aae:	4619      	mov	r1, r3
 8005ab0:	f7fb f8a2 	bl	8000bf8 <__aeabi_d2f>
 8005ab4:	4603      	mov	r3, r0
 8005ab6:	f507 4221 	add.w	r2, r7, #41216	; 0xa100
 8005aba:	f102 0244 	add.w	r2, r2, #68	; 0x44
 8005abe:	6013      	str	r3, [r2, #0]
    twid_re = x[i].im;
 8005ac0:	f507 5305 	add.w	r3, r7, #8512	; 0x2140
 8005ac4:	f103 0338 	add.w	r3, r3, #56	; 0x38
 8005ac8:	461a      	mov	r2, r3
 8005aca:	f507 4321 	add.w	r3, r7, #41216	; 0xa100
 8005ace:	f103 0364 	add.w	r3, r3, #100	; 0x64
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	011b      	lsls	r3, r3, #4
 8005ad6:	4413      	add	r3, r2
 8005ad8:	3b50      	subs	r3, #80	; 0x50
 8005ada:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ade:	4610      	mov	r0, r2
 8005ae0:	4619      	mov	r1, r3
 8005ae2:	f7fb f889 	bl	8000bf8 <__aeabi_d2f>
 8005ae6:	4603      	mov	r3, r0
 8005ae8:	f507 4221 	add.w	r2, r7, #41216	; 0xa100
 8005aec:	f102 023c 	add.w	r2, r2, #60	; 0x3c
 8005af0:	6013      	str	r3, [r2, #0]
    x[i + 1].re = temp_im - temp_re_tmp;
 8005af2:	f507 4321 	add.w	r3, r7, #41216	; 0xa100
 8005af6:	f103 0344 	add.w	r3, r3, #68	; 0x44
 8005afa:	ed93 7a00 	vldr	s14, [r3]
 8005afe:	f507 4321 	add.w	r3, r7, #41216	; 0xa100
 8005b02:	f103 0324 	add.w	r3, r3, #36	; 0x24
 8005b06:	edd3 7a00 	vldr	s15, [r3]
 8005b0a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005b0e:	f507 4321 	add.w	r3, r7, #41216	; 0xa100
 8005b12:	f103 0364 	add.w	r3, r3, #100	; 0x64
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	1c5c      	adds	r4, r3, #1
 8005b1a:	ee17 0a90 	vmov	r0, s15
 8005b1e:	f7fa fd3b 	bl	8000598 <__aeabi_f2d>
 8005b22:	4602      	mov	r2, r0
 8005b24:	460b      	mov	r3, r1
 8005b26:	f507 5105 	add.w	r1, r7, #8512	; 0x2140
 8005b2a:	f101 0138 	add.w	r1, r1, #56	; 0x38
 8005b2e:	4608      	mov	r0, r1
 8005b30:	0121      	lsls	r1, r4, #4
 8005b32:	4401      	add	r1, r0
 8005b34:	3958      	subs	r1, #88	; 0x58
 8005b36:	e9c1 2300 	strd	r2, r3, [r1]
    x[i + 1].im = twid_re - temp_re;
 8005b3a:	f507 4321 	add.w	r3, r7, #41216	; 0xa100
 8005b3e:	f103 033c 	add.w	r3, r3, #60	; 0x3c
 8005b42:	ed93 7a00 	vldr	s14, [r3]
 8005b46:	f507 4321 	add.w	r3, r7, #41216	; 0xa100
 8005b4a:	f103 0340 	add.w	r3, r3, #64	; 0x40
 8005b4e:	edd3 7a00 	vldr	s15, [r3]
 8005b52:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005b56:	f507 4321 	add.w	r3, r7, #41216	; 0xa100
 8005b5a:	f103 0364 	add.w	r3, r3, #100	; 0x64
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	1c5c      	adds	r4, r3, #1
 8005b62:	ee17 0a90 	vmov	r0, s15
 8005b66:	f7fa fd17 	bl	8000598 <__aeabi_f2d>
 8005b6a:	4602      	mov	r2, r0
 8005b6c:	460b      	mov	r3, r1
 8005b6e:	f507 5105 	add.w	r1, r7, #8512	; 0x2140
 8005b72:	f101 0138 	add.w	r1, r1, #56	; 0x38
 8005b76:	4608      	mov	r0, r1
 8005b78:	0121      	lsls	r1, r4, #4
 8005b7a:	4401      	add	r1, r0
 8005b7c:	3950      	subs	r1, #80	; 0x50
 8005b7e:	e9c1 2300 	strd	r2, r3, [r1]
    x[i].re = temp_im + temp_re_tmp;
 8005b82:	f507 4321 	add.w	r3, r7, #41216	; 0xa100
 8005b86:	f103 0344 	add.w	r3, r3, #68	; 0x44
 8005b8a:	ed93 7a00 	vldr	s14, [r3]
 8005b8e:	f507 4321 	add.w	r3, r7, #41216	; 0xa100
 8005b92:	f103 0324 	add.w	r3, r3, #36	; 0x24
 8005b96:	edd3 7a00 	vldr	s15, [r3]
 8005b9a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005b9e:	ee17 0a90 	vmov	r0, s15
 8005ba2:	f7fa fcf9 	bl	8000598 <__aeabi_f2d>
 8005ba6:	4602      	mov	r2, r0
 8005ba8:	460b      	mov	r3, r1
 8005baa:	f507 5105 	add.w	r1, r7, #8512	; 0x2140
 8005bae:	f101 0138 	add.w	r1, r1, #56	; 0x38
 8005bb2:	4608      	mov	r0, r1
 8005bb4:	f507 4121 	add.w	r1, r7, #41216	; 0xa100
 8005bb8:	f101 0164 	add.w	r1, r1, #100	; 0x64
 8005bbc:	6809      	ldr	r1, [r1, #0]
 8005bbe:	0109      	lsls	r1, r1, #4
 8005bc0:	4401      	add	r1, r0
 8005bc2:	3958      	subs	r1, #88	; 0x58
 8005bc4:	e9c1 2300 	strd	r2, r3, [r1]
    x[i].im = twid_re + temp_re;
 8005bc8:	f507 4321 	add.w	r3, r7, #41216	; 0xa100
 8005bcc:	f103 033c 	add.w	r3, r3, #60	; 0x3c
 8005bd0:	ed93 7a00 	vldr	s14, [r3]
 8005bd4:	f507 4321 	add.w	r3, r7, #41216	; 0xa100
 8005bd8:	f103 0340 	add.w	r3, r3, #64	; 0x40
 8005bdc:	edd3 7a00 	vldr	s15, [r3]
 8005be0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005be4:	ee17 0a90 	vmov	r0, s15
 8005be8:	f7fa fcd6 	bl	8000598 <__aeabi_f2d>
 8005bec:	4602      	mov	r2, r0
 8005bee:	460b      	mov	r3, r1
 8005bf0:	f507 5105 	add.w	r1, r7, #8512	; 0x2140
 8005bf4:	f101 0138 	add.w	r1, r1, #56	; 0x38
 8005bf8:	4608      	mov	r0, r1
 8005bfa:	f507 4121 	add.w	r1, r7, #41216	; 0xa100
 8005bfe:	f101 0164 	add.w	r1, r1, #100	; 0x64
 8005c02:	6809      	ldr	r1, [r1, #0]
 8005c04:	0109      	lsls	r1, r1, #4
 8005c06:	4401      	add	r1, r0
 8005c08:	3950      	subs	r1, #80	; 0x50
 8005c0a:	e9c1 2300 	strd	r2, r3, [r1]
  for (i = 0; i <= 1022; i += 2) {
 8005c0e:	f507 4321 	add.w	r3, r7, #41216	; 0xa100
 8005c12:	f103 0364 	add.w	r3, r3, #100	; 0x64
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	3302      	adds	r3, #2
 8005c1a:	f507 4221 	add.w	r2, r7, #41216	; 0xa100
 8005c1e:	f102 0264 	add.w	r2, r2, #100	; 0x64
 8005c22:	6013      	str	r3, [r2, #0]
 8005c24:	f507 4321 	add.w	r3, r7, #41216	; 0xa100
 8005c28:	f103 0364 	add.w	r3, r3, #100	; 0x64
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	f240 32fe 	movw	r2, #1022	; 0x3fe
 8005c32:	4293      	cmp	r3, r2
 8005c34:	f77f aef9 	ble.w	8005a2a <maxEnvHilbert+0x552>
  }
  iy = 2;
 8005c38:	2302      	movs	r3, #2
 8005c3a:	f507 4221 	add.w	r2, r7, #41216	; 0xa100
 8005c3e:	f102 025c 	add.w	r2, r2, #92	; 0x5c
 8005c42:	6013      	str	r3, [r2, #0]
  ju = 4;
 8005c44:	2304      	movs	r3, #4
 8005c46:	f507 4221 	add.w	r2, r7, #41216	; 0xa100
 8005c4a:	f102 0254 	add.w	r2, r2, #84	; 0x54
 8005c4e:	6013      	str	r3, [r2, #0]
  b_k = 256;
 8005c50:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005c54:	f507 4221 	add.w	r2, r7, #41216	; 0xa100
 8005c58:	f102 0268 	add.w	r2, r2, #104	; 0x68
 8005c5c:	6013      	str	r3, [r2, #0]
  iheight = 1021;
 8005c5e:	f240 33fd 	movw	r3, #1021	; 0x3fd
 8005c62:	f507 4221 	add.w	r2, r7, #41216	; 0xa100
 8005c66:	f102 0260 	add.w	r2, r2, #96	; 0x60
 8005c6a:	6013      	str	r3, [r2, #0]
  while (b_k > 0) {
 8005c6c:	e33f      	b.n	80062ee <maxEnvHilbert+0xe16>
    int b_temp_re_tmp;
    int istart;
    for (i = 0; i < iheight; i += ju) {
 8005c6e:	2300      	movs	r3, #0
 8005c70:	f507 4221 	add.w	r2, r7, #41216	; 0xa100
 8005c74:	f102 0264 	add.w	r2, r2, #100	; 0x64
 8005c78:	6013      	str	r3, [r2, #0]
 8005c7a:	e105      	b.n	8005e88 <maxEnvHilbert+0x9b0>
      b_temp_re_tmp = i + iy;
 8005c7c:	f507 4321 	add.w	r3, r7, #41216	; 0xa100
 8005c80:	f103 0364 	add.w	r3, r3, #100	; 0x64
 8005c84:	681a      	ldr	r2, [r3, #0]
 8005c86:	f507 4321 	add.w	r3, r7, #41216	; 0xa100
 8005c8a:	f103 035c 	add.w	r3, r3, #92	; 0x5c
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	4413      	add	r3, r2
 8005c92:	f507 4221 	add.w	r2, r7, #41216	; 0xa100
 8005c96:	f102 0228 	add.w	r2, r2, #40	; 0x28
 8005c9a:	6013      	str	r3, [r2, #0]
      temp_re = x[b_temp_re_tmp].re;
 8005c9c:	f507 5305 	add.w	r3, r7, #8512	; 0x2140
 8005ca0:	f103 0338 	add.w	r3, r3, #56	; 0x38
 8005ca4:	461a      	mov	r2, r3
 8005ca6:	f507 4321 	add.w	r3, r7, #41216	; 0xa100
 8005caa:	f103 0328 	add.w	r3, r3, #40	; 0x28
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	011b      	lsls	r3, r3, #4
 8005cb2:	4413      	add	r3, r2
 8005cb4:	3b58      	subs	r3, #88	; 0x58
 8005cb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005cba:	4610      	mov	r0, r2
 8005cbc:	4619      	mov	r1, r3
 8005cbe:	f7fa ff9b 	bl	8000bf8 <__aeabi_d2f>
 8005cc2:	4603      	mov	r3, r0
 8005cc4:	f507 4221 	add.w	r2, r7, #41216	; 0xa100
 8005cc8:	f102 0240 	add.w	r2, r2, #64	; 0x40
 8005ccc:	6013      	str	r3, [r2, #0]
      temp_im = x[b_temp_re_tmp].im;
 8005cce:	f507 5305 	add.w	r3, r7, #8512	; 0x2140
 8005cd2:	f103 0338 	add.w	r3, r3, #56	; 0x38
 8005cd6:	461a      	mov	r2, r3
 8005cd8:	f507 4321 	add.w	r3, r7, #41216	; 0xa100
 8005cdc:	f103 0328 	add.w	r3, r3, #40	; 0x28
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	011b      	lsls	r3, r3, #4
 8005ce4:	4413      	add	r3, r2
 8005ce6:	3b50      	subs	r3, #80	; 0x50
 8005ce8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005cec:	4610      	mov	r0, r2
 8005cee:	4619      	mov	r1, r3
 8005cf0:	f7fa ff82 	bl	8000bf8 <__aeabi_d2f>
 8005cf4:	4603      	mov	r3, r0
 8005cf6:	f507 4221 	add.w	r2, r7, #41216	; 0xa100
 8005cfa:	f102 0244 	add.w	r2, r2, #68	; 0x44
 8005cfe:	6013      	str	r3, [r2, #0]
      x[b_temp_re_tmp].re = x[i].re - temp_re;
 8005d00:	f507 5305 	add.w	r3, r7, #8512	; 0x2140
 8005d04:	f103 0338 	add.w	r3, r3, #56	; 0x38
 8005d08:	461a      	mov	r2, r3
 8005d0a:	f507 4321 	add.w	r3, r7, #41216	; 0xa100
 8005d0e:	f103 0364 	add.w	r3, r3, #100	; 0x64
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	011b      	lsls	r3, r3, #4
 8005d16:	4413      	add	r3, r2
 8005d18:	3b58      	subs	r3, #88	; 0x58
 8005d1a:	e9d3 4500 	ldrd	r4, r5, [r3]
 8005d1e:	f507 4321 	add.w	r3, r7, #41216	; 0xa100
 8005d22:	f103 0340 	add.w	r3, r3, #64	; 0x40
 8005d26:	6818      	ldr	r0, [r3, #0]
 8005d28:	f7fa fc36 	bl	8000598 <__aeabi_f2d>
 8005d2c:	4602      	mov	r2, r0
 8005d2e:	460b      	mov	r3, r1
 8005d30:	4620      	mov	r0, r4
 8005d32:	4629      	mov	r1, r5
 8005d34:	f7fa fad0 	bl	80002d8 <__aeabi_dsub>
 8005d38:	4602      	mov	r2, r0
 8005d3a:	460b      	mov	r3, r1
 8005d3c:	f507 5105 	add.w	r1, r7, #8512	; 0x2140
 8005d40:	f101 0138 	add.w	r1, r1, #56	; 0x38
 8005d44:	4608      	mov	r0, r1
 8005d46:	f507 4121 	add.w	r1, r7, #41216	; 0xa100
 8005d4a:	f101 0128 	add.w	r1, r1, #40	; 0x28
 8005d4e:	6809      	ldr	r1, [r1, #0]
 8005d50:	0109      	lsls	r1, r1, #4
 8005d52:	4401      	add	r1, r0
 8005d54:	3958      	subs	r1, #88	; 0x58
 8005d56:	e9c1 2300 	strd	r2, r3, [r1]
      x[b_temp_re_tmp].im = x[i].im - temp_im;
 8005d5a:	f507 5305 	add.w	r3, r7, #8512	; 0x2140
 8005d5e:	f103 0338 	add.w	r3, r3, #56	; 0x38
 8005d62:	461a      	mov	r2, r3
 8005d64:	f507 4321 	add.w	r3, r7, #41216	; 0xa100
 8005d68:	f103 0364 	add.w	r3, r3, #100	; 0x64
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	011b      	lsls	r3, r3, #4
 8005d70:	4413      	add	r3, r2
 8005d72:	3b50      	subs	r3, #80	; 0x50
 8005d74:	e9d3 4500 	ldrd	r4, r5, [r3]
 8005d78:	f507 4321 	add.w	r3, r7, #41216	; 0xa100
 8005d7c:	f103 0344 	add.w	r3, r3, #68	; 0x44
 8005d80:	6818      	ldr	r0, [r3, #0]
 8005d82:	f7fa fc09 	bl	8000598 <__aeabi_f2d>
 8005d86:	4602      	mov	r2, r0
 8005d88:	460b      	mov	r3, r1
 8005d8a:	4620      	mov	r0, r4
 8005d8c:	4629      	mov	r1, r5
 8005d8e:	f7fa faa3 	bl	80002d8 <__aeabi_dsub>
 8005d92:	4602      	mov	r2, r0
 8005d94:	460b      	mov	r3, r1
 8005d96:	f507 5105 	add.w	r1, r7, #8512	; 0x2140
 8005d9a:	f101 0138 	add.w	r1, r1, #56	; 0x38
 8005d9e:	4608      	mov	r0, r1
 8005da0:	f507 4121 	add.w	r1, r7, #41216	; 0xa100
 8005da4:	f101 0128 	add.w	r1, r1, #40	; 0x28
 8005da8:	6809      	ldr	r1, [r1, #0]
 8005daa:	0109      	lsls	r1, r1, #4
 8005dac:	4401      	add	r1, r0
 8005dae:	3950      	subs	r1, #80	; 0x50
 8005db0:	e9c1 2300 	strd	r2, r3, [r1]
      x[i].re += temp_re;
 8005db4:	f507 5305 	add.w	r3, r7, #8512	; 0x2140
 8005db8:	f103 0338 	add.w	r3, r3, #56	; 0x38
 8005dbc:	461a      	mov	r2, r3
 8005dbe:	f507 4321 	add.w	r3, r7, #41216	; 0xa100
 8005dc2:	f103 0364 	add.w	r3, r3, #100	; 0x64
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	011b      	lsls	r3, r3, #4
 8005dca:	4413      	add	r3, r2
 8005dcc:	3b58      	subs	r3, #88	; 0x58
 8005dce:	e9d3 4500 	ldrd	r4, r5, [r3]
 8005dd2:	f507 4321 	add.w	r3, r7, #41216	; 0xa100
 8005dd6:	f103 0340 	add.w	r3, r3, #64	; 0x40
 8005dda:	6818      	ldr	r0, [r3, #0]
 8005ddc:	f7fa fbdc 	bl	8000598 <__aeabi_f2d>
 8005de0:	4602      	mov	r2, r0
 8005de2:	460b      	mov	r3, r1
 8005de4:	4620      	mov	r0, r4
 8005de6:	4629      	mov	r1, r5
 8005de8:	f7fa fa78 	bl	80002dc <__adddf3>
 8005dec:	4602      	mov	r2, r0
 8005dee:	460b      	mov	r3, r1
 8005df0:	f507 5105 	add.w	r1, r7, #8512	; 0x2140
 8005df4:	f101 0138 	add.w	r1, r1, #56	; 0x38
 8005df8:	4608      	mov	r0, r1
 8005dfa:	f507 4121 	add.w	r1, r7, #41216	; 0xa100
 8005dfe:	f101 0164 	add.w	r1, r1, #100	; 0x64
 8005e02:	6809      	ldr	r1, [r1, #0]
 8005e04:	0109      	lsls	r1, r1, #4
 8005e06:	4401      	add	r1, r0
 8005e08:	3958      	subs	r1, #88	; 0x58
 8005e0a:	e9c1 2300 	strd	r2, r3, [r1]
      x[i].im += temp_im;
 8005e0e:	f507 5305 	add.w	r3, r7, #8512	; 0x2140
 8005e12:	f103 0338 	add.w	r3, r3, #56	; 0x38
 8005e16:	461a      	mov	r2, r3
 8005e18:	f507 4321 	add.w	r3, r7, #41216	; 0xa100
 8005e1c:	f103 0364 	add.w	r3, r3, #100	; 0x64
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	011b      	lsls	r3, r3, #4
 8005e24:	4413      	add	r3, r2
 8005e26:	3b50      	subs	r3, #80	; 0x50
 8005e28:	e9d3 4500 	ldrd	r4, r5, [r3]
 8005e2c:	f507 4321 	add.w	r3, r7, #41216	; 0xa100
 8005e30:	f103 0344 	add.w	r3, r3, #68	; 0x44
 8005e34:	6818      	ldr	r0, [r3, #0]
 8005e36:	f7fa fbaf 	bl	8000598 <__aeabi_f2d>
 8005e3a:	4602      	mov	r2, r0
 8005e3c:	460b      	mov	r3, r1
 8005e3e:	4620      	mov	r0, r4
 8005e40:	4629      	mov	r1, r5
 8005e42:	f7fa fa4b 	bl	80002dc <__adddf3>
 8005e46:	4602      	mov	r2, r0
 8005e48:	460b      	mov	r3, r1
 8005e4a:	f507 5105 	add.w	r1, r7, #8512	; 0x2140
 8005e4e:	f101 0138 	add.w	r1, r1, #56	; 0x38
 8005e52:	4608      	mov	r0, r1
 8005e54:	f507 4121 	add.w	r1, r7, #41216	; 0xa100
 8005e58:	f101 0164 	add.w	r1, r1, #100	; 0x64
 8005e5c:	6809      	ldr	r1, [r1, #0]
 8005e5e:	0109      	lsls	r1, r1, #4
 8005e60:	4401      	add	r1, r0
 8005e62:	3950      	subs	r1, #80	; 0x50
 8005e64:	e9c1 2300 	strd	r2, r3, [r1]
    for (i = 0; i < iheight; i += ju) {
 8005e68:	f507 4321 	add.w	r3, r7, #41216	; 0xa100
 8005e6c:	f103 0364 	add.w	r3, r3, #100	; 0x64
 8005e70:	681a      	ldr	r2, [r3, #0]
 8005e72:	f507 4321 	add.w	r3, r7, #41216	; 0xa100
 8005e76:	f103 0354 	add.w	r3, r3, #84	; 0x54
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	4413      	add	r3, r2
 8005e7e:	f507 4221 	add.w	r2, r7, #41216	; 0xa100
 8005e82:	f102 0264 	add.w	r2, r2, #100	; 0x64
 8005e86:	6013      	str	r3, [r2, #0]
 8005e88:	f507 4321 	add.w	r3, r7, #41216	; 0xa100
 8005e8c:	f103 0364 	add.w	r3, r3, #100	; 0x64
 8005e90:	681a      	ldr	r2, [r3, #0]
 8005e92:	f507 4321 	add.w	r3, r7, #41216	; 0xa100
 8005e96:	f103 0360 	add.w	r3, r3, #96	; 0x60
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	429a      	cmp	r2, r3
 8005e9e:	f6ff aeed 	blt.w	8005c7c <maxEnvHilbert+0x7a4>
    }
    istart = 1;
 8005ea2:	2301      	movs	r3, #1
 8005ea4:	f507 4221 	add.w	r2, r7, #41216	; 0xa100
 8005ea8:	f102 0248 	add.w	r2, r2, #72	; 0x48
 8005eac:	6013      	str	r3, [r2, #0]
    for (j = b_k; j < 512; j += b_k) {
 8005eae:	f507 4321 	add.w	r3, r7, #41216	; 0xa100
 8005eb2:	f103 0368 	add.w	r3, r3, #104	; 0x68
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	f507 4221 	add.w	r2, r7, #41216	; 0xa100
 8005ebc:	f102 0258 	add.w	r2, r2, #88	; 0x58
 8005ec0:	6013      	str	r3, [r2, #0]
 8005ec2:	e1d9      	b.n	8006278 <maxEnvHilbert+0xda0>
      double twid_im;
      int ihi;
      twid_re = dv[j];
 8005ec4:	4a1e      	ldr	r2, [pc, #120]	; (8005f40 <maxEnvHilbert+0xa68>)
 8005ec6:	f507 4321 	add.w	r3, r7, #41216	; 0xa100
 8005eca:	f103 0358 	add.w	r3, r3, #88	; 0x58
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	009b      	lsls	r3, r3, #2
 8005ed2:	4413      	add	r3, r2
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	f507 4221 	add.w	r2, r7, #41216	; 0xa100
 8005eda:	f102 023c 	add.w	r2, r2, #60	; 0x3c
 8005ede:	6013      	str	r3, [r2, #0]
      twid_im = dv1[j];
 8005ee0:	4a18      	ldr	r2, [pc, #96]	; (8005f44 <maxEnvHilbert+0xa6c>)
 8005ee2:	f507 4321 	add.w	r3, r7, #41216	; 0xa100
 8005ee6:	f103 0358 	add.w	r3, r3, #88	; 0x58
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	009b      	lsls	r3, r3, #2
 8005eee:	4413      	add	r3, r2
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	4618      	mov	r0, r3
 8005ef4:	f7fa fb50 	bl	8000598 <__aeabi_f2d>
 8005ef8:	4602      	mov	r2, r0
 8005efa:	460b      	mov	r3, r1
 8005efc:	f507 4121 	add.w	r1, r7, #41216	; 0xa100
 8005f00:	f101 0130 	add.w	r1, r1, #48	; 0x30
 8005f04:	e9c1 2300 	strd	r2, r3, [r1]
      i = istart;
 8005f08:	f507 4321 	add.w	r3, r7, #41216	; 0xa100
 8005f0c:	f103 0348 	add.w	r3, r3, #72	; 0x48
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	f507 4221 	add.w	r2, r7, #41216	; 0xa100
 8005f16:	f102 0264 	add.w	r2, r2, #100	; 0x64
 8005f1a:	6013      	str	r3, [r2, #0]
      ihi = istart + iheight;
 8005f1c:	f507 4321 	add.w	r3, r7, #41216	; 0xa100
 8005f20:	f103 0348 	add.w	r3, r3, #72	; 0x48
 8005f24:	681a      	ldr	r2, [r3, #0]
 8005f26:	f507 4321 	add.w	r3, r7, #41216	; 0xa100
 8005f2a:	f103 0360 	add.w	r3, r3, #96	; 0x60
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	4413      	add	r3, r2
 8005f32:	f507 4221 	add.w	r2, r7, #41216	; 0xa100
 8005f36:	f102 022c 	add.w	r2, r2, #44	; 0x2c
 8005f3a:	6013      	str	r3, [r2, #0]
      while (i < ihi) {
 8005f3c:	e174      	b.n	8006228 <maxEnvHilbert+0xd50>
 8005f3e:	bf00      	nop
 8005f40:	08019c10 	.word	0x08019c10
 8005f44:	0801a414 	.word	0x0801a414
        b_temp_re_tmp = i + iy;
 8005f48:	f507 4321 	add.w	r3, r7, #41216	; 0xa100
 8005f4c:	f103 0364 	add.w	r3, r3, #100	; 0x64
 8005f50:	681a      	ldr	r2, [r3, #0]
 8005f52:	f507 4321 	add.w	r3, r7, #41216	; 0xa100
 8005f56:	f103 035c 	add.w	r3, r3, #92	; 0x5c
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	4413      	add	r3, r2
 8005f5e:	f507 4221 	add.w	r2, r7, #41216	; 0xa100
 8005f62:	f102 0228 	add.w	r2, r2, #40	; 0x28
 8005f66:	6013      	str	r3, [r2, #0]
        temp_re_tmp = x[b_temp_re_tmp].im;
 8005f68:	f507 5305 	add.w	r3, r7, #8512	; 0x2140
 8005f6c:	f103 0338 	add.w	r3, r3, #56	; 0x38
 8005f70:	461a      	mov	r2, r3
 8005f72:	f507 4321 	add.w	r3, r7, #41216	; 0xa100
 8005f76:	f103 0328 	add.w	r3, r3, #40	; 0x28
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	011b      	lsls	r3, r3, #4
 8005f7e:	4413      	add	r3, r2
 8005f80:	3b50      	subs	r3, #80	; 0x50
 8005f82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f86:	4610      	mov	r0, r2
 8005f88:	4619      	mov	r1, r3
 8005f8a:	f7fa fe35 	bl	8000bf8 <__aeabi_d2f>
 8005f8e:	4603      	mov	r3, r0
 8005f90:	f507 4221 	add.w	r2, r7, #41216	; 0xa100
 8005f94:	f102 0224 	add.w	r2, r2, #36	; 0x24
 8005f98:	6013      	str	r3, [r2, #0]
        temp_im = x[b_temp_re_tmp].re;
 8005f9a:	f507 5305 	add.w	r3, r7, #8512	; 0x2140
 8005f9e:	f103 0338 	add.w	r3, r3, #56	; 0x38
 8005fa2:	461a      	mov	r2, r3
 8005fa4:	f507 4321 	add.w	r3, r7, #41216	; 0xa100
 8005fa8:	f103 0328 	add.w	r3, r3, #40	; 0x28
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	011b      	lsls	r3, r3, #4
 8005fb0:	4413      	add	r3, r2
 8005fb2:	3b58      	subs	r3, #88	; 0x58
 8005fb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fb8:	4610      	mov	r0, r2
 8005fba:	4619      	mov	r1, r3
 8005fbc:	f7fa fe1c 	bl	8000bf8 <__aeabi_d2f>
 8005fc0:	4603      	mov	r3, r0
 8005fc2:	f507 4221 	add.w	r2, r7, #41216	; 0xa100
 8005fc6:	f102 0244 	add.w	r2, r2, #68	; 0x44
 8005fca:	6013      	str	r3, [r2, #0]
        temp_re = twid_re * temp_im - twid_im * temp_re_tmp;
 8005fcc:	f507 4321 	add.w	r3, r7, #41216	; 0xa100
 8005fd0:	f103 033c 	add.w	r3, r3, #60	; 0x3c
 8005fd4:	ed93 7a00 	vldr	s14, [r3]
 8005fd8:	f507 4321 	add.w	r3, r7, #41216	; 0xa100
 8005fdc:	f103 0344 	add.w	r3, r3, #68	; 0x44
 8005fe0:	edd3 7a00 	vldr	s15, [r3]
 8005fe4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005fe8:	ee17 0a90 	vmov	r0, s15
 8005fec:	f7fa fad4 	bl	8000598 <__aeabi_f2d>
 8005ff0:	4604      	mov	r4, r0
 8005ff2:	460d      	mov	r5, r1
 8005ff4:	f507 4321 	add.w	r3, r7, #41216	; 0xa100
 8005ff8:	f103 0324 	add.w	r3, r3, #36	; 0x24
 8005ffc:	6818      	ldr	r0, [r3, #0]
 8005ffe:	f7fa facb 	bl	8000598 <__aeabi_f2d>
 8006002:	f507 4321 	add.w	r3, r7, #41216	; 0xa100
 8006006:	f103 0330 	add.w	r3, r3, #48	; 0x30
 800600a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800600e:	f7fa fb1b 	bl	8000648 <__aeabi_dmul>
 8006012:	4602      	mov	r2, r0
 8006014:	460b      	mov	r3, r1
 8006016:	4620      	mov	r0, r4
 8006018:	4629      	mov	r1, r5
 800601a:	f7fa f95d 	bl	80002d8 <__aeabi_dsub>
 800601e:	4602      	mov	r2, r0
 8006020:	460b      	mov	r3, r1
 8006022:	4610      	mov	r0, r2
 8006024:	4619      	mov	r1, r3
 8006026:	f7fa fde7 	bl	8000bf8 <__aeabi_d2f>
 800602a:	4603      	mov	r3, r0
 800602c:	f507 4221 	add.w	r2, r7, #41216	; 0xa100
 8006030:	f102 0240 	add.w	r2, r2, #64	; 0x40
 8006034:	6013      	str	r3, [r2, #0]
        temp_im = twid_re * temp_re_tmp + twid_im * temp_im;
 8006036:	f507 4321 	add.w	r3, r7, #41216	; 0xa100
 800603a:	f103 033c 	add.w	r3, r3, #60	; 0x3c
 800603e:	ed93 7a00 	vldr	s14, [r3]
 8006042:	f507 4321 	add.w	r3, r7, #41216	; 0xa100
 8006046:	f103 0324 	add.w	r3, r3, #36	; 0x24
 800604a:	edd3 7a00 	vldr	s15, [r3]
 800604e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006052:	ee17 0a90 	vmov	r0, s15
 8006056:	f7fa fa9f 	bl	8000598 <__aeabi_f2d>
 800605a:	4604      	mov	r4, r0
 800605c:	460d      	mov	r5, r1
 800605e:	f507 4321 	add.w	r3, r7, #41216	; 0xa100
 8006062:	f103 0344 	add.w	r3, r3, #68	; 0x44
 8006066:	6818      	ldr	r0, [r3, #0]
 8006068:	f7fa fa96 	bl	8000598 <__aeabi_f2d>
 800606c:	f507 4321 	add.w	r3, r7, #41216	; 0xa100
 8006070:	f103 0330 	add.w	r3, r3, #48	; 0x30
 8006074:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006078:	f7fa fae6 	bl	8000648 <__aeabi_dmul>
 800607c:	4602      	mov	r2, r0
 800607e:	460b      	mov	r3, r1
 8006080:	4620      	mov	r0, r4
 8006082:	4629      	mov	r1, r5
 8006084:	f7fa f92a 	bl	80002dc <__adddf3>
 8006088:	4602      	mov	r2, r0
 800608a:	460b      	mov	r3, r1
 800608c:	4610      	mov	r0, r2
 800608e:	4619      	mov	r1, r3
 8006090:	f7fa fdb2 	bl	8000bf8 <__aeabi_d2f>
 8006094:	4603      	mov	r3, r0
 8006096:	f507 4221 	add.w	r2, r7, #41216	; 0xa100
 800609a:	f102 0244 	add.w	r2, r2, #68	; 0x44
 800609e:	6013      	str	r3, [r2, #0]
        x[b_temp_re_tmp].re = x[i].re - temp_re;
 80060a0:	f507 5305 	add.w	r3, r7, #8512	; 0x2140
 80060a4:	f103 0338 	add.w	r3, r3, #56	; 0x38
 80060a8:	461a      	mov	r2, r3
 80060aa:	f507 4321 	add.w	r3, r7, #41216	; 0xa100
 80060ae:	f103 0364 	add.w	r3, r3, #100	; 0x64
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	011b      	lsls	r3, r3, #4
 80060b6:	4413      	add	r3, r2
 80060b8:	3b58      	subs	r3, #88	; 0x58
 80060ba:	e9d3 4500 	ldrd	r4, r5, [r3]
 80060be:	f507 4321 	add.w	r3, r7, #41216	; 0xa100
 80060c2:	f103 0340 	add.w	r3, r3, #64	; 0x40
 80060c6:	6818      	ldr	r0, [r3, #0]
 80060c8:	f7fa fa66 	bl	8000598 <__aeabi_f2d>
 80060cc:	4602      	mov	r2, r0
 80060ce:	460b      	mov	r3, r1
 80060d0:	4620      	mov	r0, r4
 80060d2:	4629      	mov	r1, r5
 80060d4:	f7fa f900 	bl	80002d8 <__aeabi_dsub>
 80060d8:	4602      	mov	r2, r0
 80060da:	460b      	mov	r3, r1
 80060dc:	f507 5105 	add.w	r1, r7, #8512	; 0x2140
 80060e0:	f101 0138 	add.w	r1, r1, #56	; 0x38
 80060e4:	4608      	mov	r0, r1
 80060e6:	f507 4121 	add.w	r1, r7, #41216	; 0xa100
 80060ea:	f101 0128 	add.w	r1, r1, #40	; 0x28
 80060ee:	6809      	ldr	r1, [r1, #0]
 80060f0:	0109      	lsls	r1, r1, #4
 80060f2:	4401      	add	r1, r0
 80060f4:	3958      	subs	r1, #88	; 0x58
 80060f6:	e9c1 2300 	strd	r2, r3, [r1]
        x[b_temp_re_tmp].im = x[i].im - temp_im;
 80060fa:	f507 5305 	add.w	r3, r7, #8512	; 0x2140
 80060fe:	f103 0338 	add.w	r3, r3, #56	; 0x38
 8006102:	461a      	mov	r2, r3
 8006104:	f507 4321 	add.w	r3, r7, #41216	; 0xa100
 8006108:	f103 0364 	add.w	r3, r3, #100	; 0x64
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	011b      	lsls	r3, r3, #4
 8006110:	4413      	add	r3, r2
 8006112:	3b50      	subs	r3, #80	; 0x50
 8006114:	e9d3 4500 	ldrd	r4, r5, [r3]
 8006118:	f507 4321 	add.w	r3, r7, #41216	; 0xa100
 800611c:	f103 0344 	add.w	r3, r3, #68	; 0x44
 8006120:	6818      	ldr	r0, [r3, #0]
 8006122:	f7fa fa39 	bl	8000598 <__aeabi_f2d>
 8006126:	4602      	mov	r2, r0
 8006128:	460b      	mov	r3, r1
 800612a:	4620      	mov	r0, r4
 800612c:	4629      	mov	r1, r5
 800612e:	f7fa f8d3 	bl	80002d8 <__aeabi_dsub>
 8006132:	4602      	mov	r2, r0
 8006134:	460b      	mov	r3, r1
 8006136:	f507 5105 	add.w	r1, r7, #8512	; 0x2140
 800613a:	f101 0138 	add.w	r1, r1, #56	; 0x38
 800613e:	4608      	mov	r0, r1
 8006140:	f507 4121 	add.w	r1, r7, #41216	; 0xa100
 8006144:	f101 0128 	add.w	r1, r1, #40	; 0x28
 8006148:	6809      	ldr	r1, [r1, #0]
 800614a:	0109      	lsls	r1, r1, #4
 800614c:	4401      	add	r1, r0
 800614e:	3950      	subs	r1, #80	; 0x50
 8006150:	e9c1 2300 	strd	r2, r3, [r1]
        x[i].re += temp_re;
 8006154:	f507 5305 	add.w	r3, r7, #8512	; 0x2140
 8006158:	f103 0338 	add.w	r3, r3, #56	; 0x38
 800615c:	461a      	mov	r2, r3
 800615e:	f507 4321 	add.w	r3, r7, #41216	; 0xa100
 8006162:	f103 0364 	add.w	r3, r3, #100	; 0x64
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	011b      	lsls	r3, r3, #4
 800616a:	4413      	add	r3, r2
 800616c:	3b58      	subs	r3, #88	; 0x58
 800616e:	e9d3 4500 	ldrd	r4, r5, [r3]
 8006172:	f507 4321 	add.w	r3, r7, #41216	; 0xa100
 8006176:	f103 0340 	add.w	r3, r3, #64	; 0x40
 800617a:	6818      	ldr	r0, [r3, #0]
 800617c:	f7fa fa0c 	bl	8000598 <__aeabi_f2d>
 8006180:	4602      	mov	r2, r0
 8006182:	460b      	mov	r3, r1
 8006184:	4620      	mov	r0, r4
 8006186:	4629      	mov	r1, r5
 8006188:	f7fa f8a8 	bl	80002dc <__adddf3>
 800618c:	4602      	mov	r2, r0
 800618e:	460b      	mov	r3, r1
 8006190:	f507 5105 	add.w	r1, r7, #8512	; 0x2140
 8006194:	f101 0138 	add.w	r1, r1, #56	; 0x38
 8006198:	4608      	mov	r0, r1
 800619a:	f507 4121 	add.w	r1, r7, #41216	; 0xa100
 800619e:	f101 0164 	add.w	r1, r1, #100	; 0x64
 80061a2:	6809      	ldr	r1, [r1, #0]
 80061a4:	0109      	lsls	r1, r1, #4
 80061a6:	4401      	add	r1, r0
 80061a8:	3958      	subs	r1, #88	; 0x58
 80061aa:	e9c1 2300 	strd	r2, r3, [r1]
        x[i].im += temp_im;
 80061ae:	f507 5305 	add.w	r3, r7, #8512	; 0x2140
 80061b2:	f103 0338 	add.w	r3, r3, #56	; 0x38
 80061b6:	461a      	mov	r2, r3
 80061b8:	f507 4321 	add.w	r3, r7, #41216	; 0xa100
 80061bc:	f103 0364 	add.w	r3, r3, #100	; 0x64
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	011b      	lsls	r3, r3, #4
 80061c4:	4413      	add	r3, r2
 80061c6:	3b50      	subs	r3, #80	; 0x50
 80061c8:	e9d3 4500 	ldrd	r4, r5, [r3]
 80061cc:	f507 4321 	add.w	r3, r7, #41216	; 0xa100
 80061d0:	f103 0344 	add.w	r3, r3, #68	; 0x44
 80061d4:	6818      	ldr	r0, [r3, #0]
 80061d6:	f7fa f9df 	bl	8000598 <__aeabi_f2d>
 80061da:	4602      	mov	r2, r0
 80061dc:	460b      	mov	r3, r1
 80061de:	4620      	mov	r0, r4
 80061e0:	4629      	mov	r1, r5
 80061e2:	f7fa f87b 	bl	80002dc <__adddf3>
 80061e6:	4602      	mov	r2, r0
 80061e8:	460b      	mov	r3, r1
 80061ea:	f507 5105 	add.w	r1, r7, #8512	; 0x2140
 80061ee:	f101 0138 	add.w	r1, r1, #56	; 0x38
 80061f2:	4608      	mov	r0, r1
 80061f4:	f507 4121 	add.w	r1, r7, #41216	; 0xa100
 80061f8:	f101 0164 	add.w	r1, r1, #100	; 0x64
 80061fc:	6809      	ldr	r1, [r1, #0]
 80061fe:	0109      	lsls	r1, r1, #4
 8006200:	4401      	add	r1, r0
 8006202:	3950      	subs	r1, #80	; 0x50
 8006204:	e9c1 2300 	strd	r2, r3, [r1]
        i += ju;
 8006208:	f507 4321 	add.w	r3, r7, #41216	; 0xa100
 800620c:	f103 0364 	add.w	r3, r3, #100	; 0x64
 8006210:	681a      	ldr	r2, [r3, #0]
 8006212:	f507 4321 	add.w	r3, r7, #41216	; 0xa100
 8006216:	f103 0354 	add.w	r3, r3, #84	; 0x54
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	4413      	add	r3, r2
 800621e:	f507 4221 	add.w	r2, r7, #41216	; 0xa100
 8006222:	f102 0264 	add.w	r2, r2, #100	; 0x64
 8006226:	6013      	str	r3, [r2, #0]
      while (i < ihi) {
 8006228:	f507 4321 	add.w	r3, r7, #41216	; 0xa100
 800622c:	f103 0364 	add.w	r3, r3, #100	; 0x64
 8006230:	681a      	ldr	r2, [r3, #0]
 8006232:	f507 4321 	add.w	r3, r7, #41216	; 0xa100
 8006236:	f103 032c 	add.w	r3, r3, #44	; 0x2c
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	429a      	cmp	r2, r3
 800623e:	f6ff ae83 	blt.w	8005f48 <maxEnvHilbert+0xa70>
      }
      istart++;
 8006242:	f507 4321 	add.w	r3, r7, #41216	; 0xa100
 8006246:	f103 0348 	add.w	r3, r3, #72	; 0x48
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	3301      	adds	r3, #1
 800624e:	f507 4221 	add.w	r2, r7, #41216	; 0xa100
 8006252:	f102 0248 	add.w	r2, r2, #72	; 0x48
 8006256:	6013      	str	r3, [r2, #0]
    for (j = b_k; j < 512; j += b_k) {
 8006258:	f507 4321 	add.w	r3, r7, #41216	; 0xa100
 800625c:	f103 0358 	add.w	r3, r3, #88	; 0x58
 8006260:	681a      	ldr	r2, [r3, #0]
 8006262:	f507 4321 	add.w	r3, r7, #41216	; 0xa100
 8006266:	f103 0368 	add.w	r3, r3, #104	; 0x68
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	4413      	add	r3, r2
 800626e:	f507 4221 	add.w	r2, r7, #41216	; 0xa100
 8006272:	f102 0258 	add.w	r2, r2, #88	; 0x58
 8006276:	6013      	str	r3, [r2, #0]
 8006278:	f507 4321 	add.w	r3, r7, #41216	; 0xa100
 800627c:	f103 0358 	add.w	r3, r3, #88	; 0x58
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006286:	f6ff ae1d 	blt.w	8005ec4 <maxEnvHilbert+0x9ec>
    }
    b_k /= 2;
 800628a:	f507 4321 	add.w	r3, r7, #41216	; 0xa100
 800628e:	f103 0368 	add.w	r3, r3, #104	; 0x68
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	0fda      	lsrs	r2, r3, #31
 8006296:	4413      	add	r3, r2
 8006298:	105b      	asrs	r3, r3, #1
 800629a:	f507 4221 	add.w	r2, r7, #41216	; 0xa100
 800629e:	f102 0268 	add.w	r2, r2, #104	; 0x68
 80062a2:	6013      	str	r3, [r2, #0]
    iy = ju;
 80062a4:	f507 4321 	add.w	r3, r7, #41216	; 0xa100
 80062a8:	f103 0354 	add.w	r3, r3, #84	; 0x54
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	f507 4221 	add.w	r2, r7, #41216	; 0xa100
 80062b2:	f102 025c 	add.w	r2, r2, #92	; 0x5c
 80062b6:	6013      	str	r3, [r2, #0]
    ju += ju;
 80062b8:	f507 4321 	add.w	r3, r7, #41216	; 0xa100
 80062bc:	f103 0354 	add.w	r3, r3, #84	; 0x54
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	005b      	lsls	r3, r3, #1
 80062c4:	f507 4221 	add.w	r2, r7, #41216	; 0xa100
 80062c8:	f102 0254 	add.w	r2, r2, #84	; 0x54
 80062cc:	6013      	str	r3, [r2, #0]
    iheight -= iy;
 80062ce:	f507 4321 	add.w	r3, r7, #41216	; 0xa100
 80062d2:	f103 0360 	add.w	r3, r3, #96	; 0x60
 80062d6:	681a      	ldr	r2, [r3, #0]
 80062d8:	f507 4321 	add.w	r3, r7, #41216	; 0xa100
 80062dc:	f103 035c 	add.w	r3, r3, #92	; 0x5c
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	1ad3      	subs	r3, r2, r3
 80062e4:	f507 4221 	add.w	r2, r7, #41216	; 0xa100
 80062e8:	f102 0260 	add.w	r2, r2, #96	; 0x60
 80062ec:	6013      	str	r3, [r2, #0]
  while (b_k > 0) {
 80062ee:	f507 4321 	add.w	r3, r7, #41216	; 0xa100
 80062f2:	f103 0368 	add.w	r3, r3, #104	; 0x68
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	2b00      	cmp	r3, #0
 80062fa:	f73f acb8 	bgt.w	8005c6e <maxEnvHilbert+0x796>
  }
  for (i = 0; i < 1024; i++) {
 80062fe:	2300      	movs	r3, #0
 8006300:	f507 4221 	add.w	r2, r7, #41216	; 0xa100
 8006304:	f102 0264 	add.w	r2, r2, #100	; 0x64
 8006308:	6013      	str	r3, [r2, #0]
 800630a:	e0cd      	b.n	80064a8 <maxEnvHilbert+0xfd0>
    temp_im = 0.0009765625 * x[i].re;
 800630c:	f507 5305 	add.w	r3, r7, #8512	; 0x2140
 8006310:	f103 0338 	add.w	r3, r3, #56	; 0x38
 8006314:	461a      	mov	r2, r3
 8006316:	f507 4321 	add.w	r3, r7, #41216	; 0xa100
 800631a:	f103 0364 	add.w	r3, r3, #100	; 0x64
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	011b      	lsls	r3, r3, #4
 8006322:	4413      	add	r3, r2
 8006324:	3b58      	subs	r3, #88	; 0x58
 8006326:	e9d3 0100 	ldrd	r0, r1, [r3]
 800632a:	f04f 0200 	mov.w	r2, #0
 800632e:	4bd8      	ldr	r3, [pc, #864]	; (8006690 <maxEnvHilbert+0x11b8>)
 8006330:	f7fa f98a 	bl	8000648 <__aeabi_dmul>
 8006334:	4602      	mov	r2, r0
 8006336:	460b      	mov	r3, r1
 8006338:	4610      	mov	r0, r2
 800633a:	4619      	mov	r1, r3
 800633c:	f7fa fc5c 	bl	8000bf8 <__aeabi_d2f>
 8006340:	4603      	mov	r3, r0
 8006342:	f507 4221 	add.w	r2, r7, #41216	; 0xa100
 8006346:	f102 0244 	add.w	r2, r2, #68	; 0x44
 800634a:	6013      	str	r3, [r2, #0]
    temp_re = 0.0009765625 * x[i].im;
 800634c:	f507 5305 	add.w	r3, r7, #8512	; 0x2140
 8006350:	f103 0338 	add.w	r3, r3, #56	; 0x38
 8006354:	461a      	mov	r2, r3
 8006356:	f507 4321 	add.w	r3, r7, #41216	; 0xa100
 800635a:	f103 0364 	add.w	r3, r3, #100	; 0x64
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	011b      	lsls	r3, r3, #4
 8006362:	4413      	add	r3, r2
 8006364:	3b50      	subs	r3, #80	; 0x50
 8006366:	e9d3 0100 	ldrd	r0, r1, [r3]
 800636a:	f04f 0200 	mov.w	r2, #0
 800636e:	4bc8      	ldr	r3, [pc, #800]	; (8006690 <maxEnvHilbert+0x11b8>)
 8006370:	f7fa f96a 	bl	8000648 <__aeabi_dmul>
 8006374:	4602      	mov	r2, r0
 8006376:	460b      	mov	r3, r1
 8006378:	4610      	mov	r0, r2
 800637a:	4619      	mov	r1, r3
 800637c:	f7fa fc3c 	bl	8000bf8 <__aeabi_d2f>
 8006380:	4603      	mov	r3, r0
 8006382:	f507 4221 	add.w	r2, r7, #41216	; 0xa100
 8006386:	f102 0240 	add.w	r2, r2, #64	; 0x40
 800638a:	6013      	str	r3, [r2, #0]
    x[i].re = temp_im;
 800638c:	f507 4321 	add.w	r3, r7, #41216	; 0xa100
 8006390:	f103 0344 	add.w	r3, r3, #68	; 0x44
 8006394:	6818      	ldr	r0, [r3, #0]
 8006396:	f7fa f8ff 	bl	8000598 <__aeabi_f2d>
 800639a:	4602      	mov	r2, r0
 800639c:	460b      	mov	r3, r1
 800639e:	f507 5105 	add.w	r1, r7, #8512	; 0x2140
 80063a2:	f101 0138 	add.w	r1, r1, #56	; 0x38
 80063a6:	4608      	mov	r0, r1
 80063a8:	f507 4121 	add.w	r1, r7, #41216	; 0xa100
 80063ac:	f101 0164 	add.w	r1, r1, #100	; 0x64
 80063b0:	6809      	ldr	r1, [r1, #0]
 80063b2:	0109      	lsls	r1, r1, #4
 80063b4:	4401      	add	r1, r0
 80063b6:	3958      	subs	r1, #88	; 0x58
 80063b8:	e9c1 2300 	strd	r2, r3, [r1]
    x[i].im = temp_re;
 80063bc:	f507 4321 	add.w	r3, r7, #41216	; 0xa100
 80063c0:	f103 0340 	add.w	r3, r3, #64	; 0x40
 80063c4:	6818      	ldr	r0, [r3, #0]
 80063c6:	f7fa f8e7 	bl	8000598 <__aeabi_f2d>
 80063ca:	4602      	mov	r2, r0
 80063cc:	460b      	mov	r3, r1
 80063ce:	f507 5105 	add.w	r1, r7, #8512	; 0x2140
 80063d2:	f101 0138 	add.w	r1, r1, #56	; 0x38
 80063d6:	4608      	mov	r0, r1
 80063d8:	f507 4121 	add.w	r1, r7, #41216	; 0xa100
 80063dc:	f101 0164 	add.w	r1, r1, #100	; 0x64
 80063e0:	6809      	ldr	r1, [r1, #0]
 80063e2:	0109      	lsls	r1, r1, #4
 80063e4:	4401      	add	r1, r0
 80063e6:	3950      	subs	r1, #80	; 0x50
 80063e8:	e9c1 2300 	strd	r2, r3, [r1]
    temp_im = rt_hypotd_snf(temp_im, temp_re);
 80063ec:	f507 4321 	add.w	r3, r7, #41216	; 0xa100
 80063f0:	f103 0340 	add.w	r3, r3, #64	; 0x40
 80063f4:	edd3 0a00 	vldr	s1, [r3]
 80063f8:	f507 4321 	add.w	r3, r7, #41216	; 0xa100
 80063fc:	f103 0344 	add.w	r3, r3, #68	; 0x44
 8006400:	ed93 0a00 	vldr	s0, [r3]
 8006404:	f7fe ffa4 	bl	8005350 <rt_hypotd_snf>
 8006408:	f507 4321 	add.w	r3, r7, #41216	; 0xa100
 800640c:	f103 0344 	add.w	r3, r3, #68	; 0x44
 8006410:	ed83 0a00 	vstr	s0, [r3]
    z[i] = temp_im;
 8006414:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 8006418:	461a      	mov	r2, r3
 800641a:	f507 4321 	add.w	r3, r7, #41216	; 0xa100
 800641e:	f103 0364 	add.w	r3, r3, #100	; 0x64
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	009b      	lsls	r3, r3, #2
 8006426:	4413      	add	r3, r2
 8006428:	3b80      	subs	r3, #128	; 0x80
 800642a:	f507 4221 	add.w	r2, r7, #41216	; 0xa100
 800642e:	f102 0244 	add.w	r2, r2, #68	; 0x44
 8006432:	6812      	ldr	r2, [r2, #0]
 8006434:	601a      	str	r2, [r3, #0]
    if (temp_im > m) {
 8006436:	f507 4321 	add.w	r3, r7, #41216	; 0xa100
 800643a:	f103 0344 	add.w	r3, r3, #68	; 0x44
 800643e:	ed93 7a00 	vldr	s14, [r3]
 8006442:	f507 4321 	add.w	r3, r7, #41216	; 0xa100
 8006446:	f103 0374 	add.w	r3, r3, #116	; 0x74
 800644a:	edd3 7a00 	vldr	s15, [r3]
 800644e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8006452:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006456:	dd1c      	ble.n	8006492 <maxEnvHilbert+0xfba>
      m = temp_im;
 8006458:	f507 4321 	add.w	r3, r7, #41216	; 0xa100
 800645c:	f103 0344 	add.w	r3, r3, #68	; 0x44
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	f507 4221 	add.w	r2, r7, #41216	; 0xa100
 8006466:	f102 0274 	add.w	r2, r2, #116	; 0x74
 800646a:	6013      	str	r3, [r2, #0]
      mx = (float)i + 1.0;
 800646c:	f507 4321 	add.w	r3, r7, #41216	; 0xa100
 8006470:	f103 0364 	add.w	r3, r3, #100	; 0x64
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	ee07 3a90 	vmov	s15, r3
 800647a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800647e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006482:	ee77 7a87 	vadd.f32	s15, s15, s14
 8006486:	f507 4321 	add.w	r3, r7, #41216	; 0xa100
 800648a:	f103 0370 	add.w	r3, r3, #112	; 0x70
 800648e:	edc3 7a00 	vstr	s15, [r3]
  for (i = 0; i < 1024; i++) {
 8006492:	f507 4321 	add.w	r3, r7, #41216	; 0xa100
 8006496:	f103 0364 	add.w	r3, r3, #100	; 0x64
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	3301      	adds	r3, #1
 800649e:	f507 4221 	add.w	r2, r7, #41216	; 0xa100
 80064a2:	f102 0264 	add.w	r2, r2, #100	; 0x64
 80064a6:	6013      	str	r3, [r2, #0]
 80064a8:	f507 4321 	add.w	r3, r7, #41216	; 0xa100
 80064ac:	f103 0364 	add.w	r3, r3, #100	; 0x64
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80064b6:	f6ff af29 	blt.w	800630c <maxEnvHilbert+0xe34>
    }
  }
  n[28] = mx + 5.0;
 80064ba:	f507 4321 	add.w	r3, r7, #41216	; 0xa100
 80064be:	f103 0370 	add.w	r3, r3, #112	; 0x70
 80064c2:	edd3 7a00 	vldr	s15, [r3]
 80064c6:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 80064ca:	ee77 7a87 	vadd.f32	s15, s15, s14
 80064ce:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 80064d2:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 80064d6:	edc3 7a1c 	vstr	s15, [r3, #112]	; 0x70
  n[0] = mx - 4.0;
 80064da:	f507 4321 	add.w	r3, r7, #41216	; 0xa100
 80064de:	f103 0370 	add.w	r3, r3, #112	; 0x70
 80064e2:	edd3 7a00 	vldr	s15, [r3]
 80064e6:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 80064ea:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80064ee:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 80064f2:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 80064f6:	edc3 7a00 	vstr	s15, [r3]
  iy = (int)(((float)mx + 5.0F) - ((float)mx - 4.0F));
 80064fa:	f507 4321 	add.w	r3, r7, #41216	; 0xa100
 80064fe:	f103 0370 	add.w	r3, r3, #112	; 0x70
 8006502:	edd3 7a00 	vldr	s15, [r3]
 8006506:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 800650a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800650e:	f507 4321 	add.w	r3, r7, #41216	; 0xa100
 8006512:	f103 0370 	add.w	r3, r3, #112	; 0x70
 8006516:	edd3 7a00 	vldr	s15, [r3]
 800651a:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 800651e:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8006522:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006526:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800652a:	ee17 3a90 	vmov	r3, s15
 800652e:	f507 4221 	add.w	r2, r7, #41216	; 0xa100
 8006532:	f102 025c 	add.w	r2, r2, #92	; 0x5c
 8006536:	6013      	str	r3, [r2, #0]
  temp_im = (float)iy / 28.0;
 8006538:	f507 4321 	add.w	r3, r7, #41216	; 0xa100
 800653c:	f103 035c 	add.w	r3, r3, #92	; 0x5c
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	ee07 3a90 	vmov	s15, r3
 8006546:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800654a:	eef3 6a0c 	vmov.f32	s13, #60	; 0x41e00000  28.0
 800654e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8006552:	f507 4321 	add.w	r3, r7, #41216	; 0xa100
 8006556:	f103 0344 	add.w	r3, r3, #68	; 0x44
 800655a:	edc3 7a00 	vstr	s15, [r3]
  for (b_k = 0; b_k < 27; b_k++) {
 800655e:	2300      	movs	r3, #0
 8006560:	f507 4221 	add.w	r2, r7, #41216	; 0xa100
 8006564:	f102 0268 	add.w	r2, r2, #104	; 0x68
 8006568:	6013      	str	r3, [r2, #0]
 800656a:	e057      	b.n	800661c <maxEnvHilbert+0x1144>
    n[b_k + 1] = (mx - 4.0) + ((float)b_k + 1.0) * temp_im;
 800656c:	f507 4321 	add.w	r3, r7, #41216	; 0xa100
 8006570:	f103 0370 	add.w	r3, r3, #112	; 0x70
 8006574:	6818      	ldr	r0, [r3, #0]
 8006576:	f7fa f80f 	bl	8000598 <__aeabi_f2d>
 800657a:	f04f 0200 	mov.w	r2, #0
 800657e:	4b45      	ldr	r3, [pc, #276]	; (8006694 <maxEnvHilbert+0x11bc>)
 8006580:	f7f9 feaa 	bl	80002d8 <__aeabi_dsub>
 8006584:	4602      	mov	r2, r0
 8006586:	460b      	mov	r3, r1
 8006588:	4614      	mov	r4, r2
 800658a:	461d      	mov	r5, r3
 800658c:	f507 4321 	add.w	r3, r7, #41216	; 0xa100
 8006590:	f103 0368 	add.w	r3, r3, #104	; 0x68
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	ee07 3a90 	vmov	s15, r3
 800659a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800659e:	ee17 0a90 	vmov	r0, s15
 80065a2:	f7f9 fff9 	bl	8000598 <__aeabi_f2d>
 80065a6:	f04f 0200 	mov.w	r2, #0
 80065aa:	4b3b      	ldr	r3, [pc, #236]	; (8006698 <maxEnvHilbert+0x11c0>)
 80065ac:	f7f9 fe96 	bl	80002dc <__adddf3>
 80065b0:	4602      	mov	r2, r0
 80065b2:	460b      	mov	r3, r1
 80065b4:	4690      	mov	r8, r2
 80065b6:	4699      	mov	r9, r3
 80065b8:	f507 4321 	add.w	r3, r7, #41216	; 0xa100
 80065bc:	f103 0344 	add.w	r3, r3, #68	; 0x44
 80065c0:	6818      	ldr	r0, [r3, #0]
 80065c2:	f7f9 ffe9 	bl	8000598 <__aeabi_f2d>
 80065c6:	4602      	mov	r2, r0
 80065c8:	460b      	mov	r3, r1
 80065ca:	4640      	mov	r0, r8
 80065cc:	4649      	mov	r1, r9
 80065ce:	f7fa f83b 	bl	8000648 <__aeabi_dmul>
 80065d2:	4602      	mov	r2, r0
 80065d4:	460b      	mov	r3, r1
 80065d6:	4620      	mov	r0, r4
 80065d8:	4629      	mov	r1, r5
 80065da:	f7f9 fe7f 	bl	80002dc <__adddf3>
 80065de:	4602      	mov	r2, r0
 80065e0:	460b      	mov	r3, r1
 80065e2:	4610      	mov	r0, r2
 80065e4:	4619      	mov	r1, r3
 80065e6:	f507 4321 	add.w	r3, r7, #41216	; 0xa100
 80065ea:	f103 0368 	add.w	r3, r3, #104	; 0x68
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	1c5c      	adds	r4, r3, #1
 80065f2:	f7fa fb01 	bl	8000bf8 <__aeabi_d2f>
 80065f6:	4601      	mov	r1, r0
 80065f8:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 80065fc:	f5a3 72b4 	sub.w	r2, r3, #360	; 0x168
 8006600:	00a3      	lsls	r3, r4, #2
 8006602:	4413      	add	r3, r2
 8006604:	6019      	str	r1, [r3, #0]
  for (b_k = 0; b_k < 27; b_k++) {
 8006606:	f507 4321 	add.w	r3, r7, #41216	; 0xa100
 800660a:	f103 0368 	add.w	r3, r3, #104	; 0x68
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	3301      	adds	r3, #1
 8006612:	f507 4221 	add.w	r2, r7, #41216	; 0xa100
 8006616:	f102 0268 	add.w	r2, r2, #104	; 0x68
 800661a:	6013      	str	r3, [r2, #0]
 800661c:	f507 4321 	add.w	r3, r7, #41216	; 0xa100
 8006620:	f103 0368 	add.w	r3, r3, #104	; 0x68
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	2b1a      	cmp	r3, #26
 8006628:	dda0      	ble.n	800656c <maxEnvHilbert+0x1094>
  }
  if (mx + 5.0 < mx - 4.0) {
 800662a:	f507 4321 	add.w	r3, r7, #41216	; 0xa100
 800662e:	f103 0370 	add.w	r3, r3, #112	; 0x70
 8006632:	6818      	ldr	r0, [r3, #0]
 8006634:	f7f9 ffb0 	bl	8000598 <__aeabi_f2d>
 8006638:	f04f 0200 	mov.w	r2, #0
 800663c:	4b17      	ldr	r3, [pc, #92]	; (800669c <maxEnvHilbert+0x11c4>)
 800663e:	f7f9 fe4d 	bl	80002dc <__adddf3>
 8006642:	4602      	mov	r2, r0
 8006644:	460b      	mov	r3, r1
 8006646:	4614      	mov	r4, r2
 8006648:	461d      	mov	r5, r3
 800664a:	f507 4321 	add.w	r3, r7, #41216	; 0xa100
 800664e:	f103 0370 	add.w	r3, r3, #112	; 0x70
 8006652:	6818      	ldr	r0, [r3, #0]
 8006654:	f7f9 ffa0 	bl	8000598 <__aeabi_f2d>
 8006658:	f04f 0200 	mov.w	r2, #0
 800665c:	4b0d      	ldr	r3, [pc, #52]	; (8006694 <maxEnvHilbert+0x11bc>)
 800665e:	f7f9 fe3b 	bl	80002d8 <__aeabi_dsub>
 8006662:	4602      	mov	r2, r0
 8006664:	460b      	mov	r3, r1
 8006666:	4620      	mov	r0, r4
 8006668:	4629      	mov	r1, r5
 800666a:	f7fa fa5f 	bl	8000b2c <__aeabi_dcmplt>
 800666e:	4603      	mov	r3, r0
 8006670:	2b00      	cmp	r3, #0
 8006672:	d015      	beq.n	80066a0 <maxEnvHilbert+0x11c8>
    y_size[0] = 1;
 8006674:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 8006678:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 800667c:	2201      	movs	r2, #1
 800667e:	601a      	str	r2, [r3, #0]
    y_size[1] = 0;
 8006680:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 8006684:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8006688:	2200      	movs	r2, #0
 800668a:	605a      	str	r2, [r3, #4]
 800668c:	e06f      	b.n	800676e <maxEnvHilbert+0x1296>
 800668e:	bf00      	nop
 8006690:	3f500000 	.word	0x3f500000
 8006694:	40100000 	.word	0x40100000
 8006698:	3ff00000 	.word	0x3ff00000
 800669c:	40140000 	.word	0x40140000
  } else {
    y_size[0] = 1;
 80066a0:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 80066a4:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 80066a8:	2201      	movs	r2, #1
 80066aa:	601a      	str	r2, [r3, #0]
    y_size[1] = iy + 1;
 80066ac:	f507 4321 	add.w	r3, r7, #41216	; 0xa100
 80066b0:	f103 035c 	add.w	r3, r3, #92	; 0x5c
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	1c5a      	adds	r2, r3, #1
 80066b8:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 80066bc:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 80066c0:	605a      	str	r2, [r3, #4]
    for (iheight = 0; iheight <= iy; iheight++) {
 80066c2:	2300      	movs	r3, #0
 80066c4:	f507 4221 	add.w	r2, r7, #41216	; 0xa100
 80066c8:	f102 0260 	add.w	r2, r2, #96	; 0x60
 80066cc:	6013      	str	r3, [r2, #0]
 80066ce:	e042      	b.n	8006756 <maxEnvHilbert+0x127e>
      y_data[iheight] = (mx - 4.0) + (float)iheight;
 80066d0:	f507 4321 	add.w	r3, r7, #41216	; 0xa100
 80066d4:	f103 0370 	add.w	r3, r3, #112	; 0x70
 80066d8:	6818      	ldr	r0, [r3, #0]
 80066da:	f7f9 ff5d 	bl	8000598 <__aeabi_f2d>
 80066de:	f04f 0200 	mov.w	r2, #0
 80066e2:	4b7d      	ldr	r3, [pc, #500]	; (80068d8 <maxEnvHilbert+0x1400>)
 80066e4:	f7f9 fdf8 	bl	80002d8 <__aeabi_dsub>
 80066e8:	4602      	mov	r2, r0
 80066ea:	460b      	mov	r3, r1
 80066ec:	4614      	mov	r4, r2
 80066ee:	461d      	mov	r5, r3
 80066f0:	f507 4321 	add.w	r3, r7, #41216	; 0xa100
 80066f4:	f103 0360 	add.w	r3, r3, #96	; 0x60
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	ee07 3a90 	vmov	s15, r3
 80066fe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006702:	ee17 0a90 	vmov	r0, s15
 8006706:	f7f9 ff47 	bl	8000598 <__aeabi_f2d>
 800670a:	4602      	mov	r2, r0
 800670c:	460b      	mov	r3, r1
 800670e:	4620      	mov	r0, r4
 8006710:	4629      	mov	r1, r5
 8006712:	f7f9 fde3 	bl	80002dc <__adddf3>
 8006716:	4602      	mov	r2, r0
 8006718:	460b      	mov	r3, r1
 800671a:	4610      	mov	r0, r2
 800671c:	4619      	mov	r1, r3
 800671e:	f7fa fa6b 	bl	8000bf8 <__aeabi_d2f>
 8006722:	4602      	mov	r2, r0
 8006724:	f507 538b 	add.w	r3, r7, #4448	; 0x1160
 8006728:	f103 0318 	add.w	r3, r3, #24
 800672c:	4619      	mov	r1, r3
 800672e:	f507 4321 	add.w	r3, r7, #41216	; 0xa100
 8006732:	f103 0360 	add.w	r3, r3, #96	; 0x60
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	009b      	lsls	r3, r3, #2
 800673a:	440b      	add	r3, r1
 800673c:	3b80      	subs	r3, #128	; 0x80
 800673e:	601a      	str	r2, [r3, #0]
    for (iheight = 0; iheight <= iy; iheight++) {
 8006740:	f507 4321 	add.w	r3, r7, #41216	; 0xa100
 8006744:	f103 0360 	add.w	r3, r3, #96	; 0x60
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	3301      	adds	r3, #1
 800674c:	f507 4221 	add.w	r2, r7, #41216	; 0xa100
 8006750:	f102 0260 	add.w	r2, r2, #96	; 0x60
 8006754:	6013      	str	r3, [r2, #0]
 8006756:	f507 4321 	add.w	r3, r7, #41216	; 0xa100
 800675a:	f103 0360 	add.w	r3, r3, #96	; 0x60
 800675e:	681a      	ldr	r2, [r3, #0]
 8006760:	f507 4321 	add.w	r3, r7, #41216	; 0xa100
 8006764:	f103 035c 	add.w	r3, r3, #92	; 0x5c
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	429a      	cmp	r2, r3
 800676c:	ddb0      	ble.n	80066d0 <maxEnvHilbert+0x11f8>
    }
  }
  spline(y_data, y_size, &z[(int)mx + -5], n, D);
 800676e:	f507 4321 	add.w	r3, r7, #41216	; 0xa100
 8006772:	f103 0370 	add.w	r3, r3, #112	; 0x70
 8006776:	edd3 7a00 	vldr	s15, [r3]
 800677a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800677e:	ee17 3a90 	vmov	r3, s15
 8006782:	1f5a      	subs	r2, r3, #5
 8006784:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 8006788:	3b80      	subs	r3, #128	; 0x80
 800678a:	0092      	lsls	r2, r2, #2
 800678c:	189c      	adds	r4, r3, r2
 800678e:	f107 0278 	add.w	r2, r7, #120	; 0x78
 8006792:	3a68      	subs	r2, #104	; 0x68
 8006794:	f107 0178 	add.w	r1, r7, #120	; 0x78
 8006798:	3970      	subs	r1, #112	; 0x70
 800679a:	f507 508b 	add.w	r0, r7, #4448	; 0x1160
 800679e:	f100 0018 	add.w	r0, r0, #24
 80067a2:	3880      	subs	r0, #128	; 0x80
 80067a4:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 80067a8:	3bf4      	subs	r3, #244	; 0xf4
 80067aa:	9300      	str	r3, [sp, #0]
 80067ac:	4613      	mov	r3, r2
 80067ae:	4622      	mov	r2, r4
 80067b0:	f000 fd56 	bl	8007260 <spline>
  for (i = 0; i < 29; i++) {
 80067b4:	2300      	movs	r3, #0
 80067b6:	f507 4221 	add.w	r2, r7, #41216	; 0xa100
 80067ba:	f102 0264 	add.w	r2, r2, #100	; 0x64
 80067be:	6013      	str	r3, [r2, #0]
 80067c0:	e041      	b.n	8006846 <maxEnvHilbert+0x136e>
    temp_im = D[i];
 80067c2:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 80067c6:	461a      	mov	r2, r3
 80067c8:	f507 4321 	add.w	r3, r7, #41216	; 0xa100
 80067cc:	f103 0364 	add.w	r3, r3, #100	; 0x64
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	009b      	lsls	r3, r3, #2
 80067d4:	4413      	add	r3, r2
 80067d6:	3bf4      	subs	r3, #244	; 0xf4
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	f507 4221 	add.w	r2, r7, #41216	; 0xa100
 80067de:	f102 0244 	add.w	r2, r2, #68	; 0x44
 80067e2:	6013      	str	r3, [r2, #0]
    if (temp_im > mx2) {
 80067e4:	f507 4321 	add.w	r3, r7, #41216	; 0xa100
 80067e8:	f103 0344 	add.w	r3, r3, #68	; 0x44
 80067ec:	ed93 7a00 	vldr	s14, [r3]
 80067f0:	f507 4321 	add.w	r3, r7, #41216	; 0xa100
 80067f4:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 80067f8:	edd3 7a00 	vldr	s15, [r3]
 80067fc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8006800:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006804:	dd14      	ble.n	8006830 <maxEnvHilbert+0x1358>
      mx2 = temp_im;
 8006806:	f507 4321 	add.w	r3, r7, #41216	; 0xa100
 800680a:	f103 0344 	add.w	r3, r3, #68	; 0x44
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	f507 4221 	add.w	r2, r7, #41216	; 0xa100
 8006814:	f102 026c 	add.w	r2, r2, #108	; 0x6c
 8006818:	6013      	str	r3, [r2, #0]
      k = i + 1;
 800681a:	f507 4321 	add.w	r3, r7, #41216	; 0xa100
 800681e:	f103 0364 	add.w	r3, r3, #100	; 0x64
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	3301      	adds	r3, #1
 8006826:	f507 4221 	add.w	r2, r7, #41216	; 0xa100
 800682a:	f102 0250 	add.w	r2, r2, #80	; 0x50
 800682e:	6013      	str	r3, [r2, #0]
  for (i = 0; i < 29; i++) {
 8006830:	f507 4321 	add.w	r3, r7, #41216	; 0xa100
 8006834:	f103 0364 	add.w	r3, r3, #100	; 0x64
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	3301      	adds	r3, #1
 800683c:	f507 4221 	add.w	r2, r7, #41216	; 0xa100
 8006840:	f102 0264 	add.w	r2, r2, #100	; 0x64
 8006844:	6013      	str	r3, [r2, #0]
 8006846:	f507 4321 	add.w	r3, r7, #41216	; 0xa100
 800684a:	f103 0364 	add.w	r3, r3, #100	; 0x64
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	2b1c      	cmp	r3, #28
 8006852:	ddb6      	ble.n	80067c2 <maxEnvHilbert+0x12ea>
    }
  }
  return (mx - 4.0) + ((float)k - 1.0) / 3.0;
 8006854:	f507 4321 	add.w	r3, r7, #41216	; 0xa100
 8006858:	f103 0370 	add.w	r3, r3, #112	; 0x70
 800685c:	6818      	ldr	r0, [r3, #0]
 800685e:	f7f9 fe9b 	bl	8000598 <__aeabi_f2d>
 8006862:	f04f 0200 	mov.w	r2, #0
 8006866:	4b1c      	ldr	r3, [pc, #112]	; (80068d8 <maxEnvHilbert+0x1400>)
 8006868:	f7f9 fd36 	bl	80002d8 <__aeabi_dsub>
 800686c:	4602      	mov	r2, r0
 800686e:	460b      	mov	r3, r1
 8006870:	4614      	mov	r4, r2
 8006872:	461d      	mov	r5, r3
 8006874:	f507 4321 	add.w	r3, r7, #41216	; 0xa100
 8006878:	f103 0350 	add.w	r3, r3, #80	; 0x50
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	ee07 3a90 	vmov	s15, r3
 8006882:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006886:	ee17 0a90 	vmov	r0, s15
 800688a:	f7f9 fe85 	bl	8000598 <__aeabi_f2d>
 800688e:	f04f 0200 	mov.w	r2, #0
 8006892:	4b12      	ldr	r3, [pc, #72]	; (80068dc <maxEnvHilbert+0x1404>)
 8006894:	f7f9 fd20 	bl	80002d8 <__aeabi_dsub>
 8006898:	4602      	mov	r2, r0
 800689a:	460b      	mov	r3, r1
 800689c:	4610      	mov	r0, r2
 800689e:	4619      	mov	r1, r3
 80068a0:	f04f 0200 	mov.w	r2, #0
 80068a4:	4b0e      	ldr	r3, [pc, #56]	; (80068e0 <maxEnvHilbert+0x1408>)
 80068a6:	f7f9 fff9 	bl	800089c <__aeabi_ddiv>
 80068aa:	4602      	mov	r2, r0
 80068ac:	460b      	mov	r3, r1
 80068ae:	4620      	mov	r0, r4
 80068b0:	4629      	mov	r1, r5
 80068b2:	f7f9 fd13 	bl	80002dc <__adddf3>
 80068b6:	4602      	mov	r2, r0
 80068b8:	460b      	mov	r3, r1
 80068ba:	4610      	mov	r0, r2
 80068bc:	4619      	mov	r1, r3
 80068be:	f7fa f99b 	bl	8000bf8 <__aeabi_d2f>
 80068c2:	4603      	mov	r3, r0
 80068c4:	ee07 3a90 	vmov	s15, r3
}
 80068c8:	eeb0 0a67 	vmov.f32	s0, s15
 80068cc:	f507 4721 	add.w	r7, r7, #41216	; 0xa100
 80068d0:	3778      	adds	r7, #120	; 0x78
 80068d2:	46bd      	mov	sp, r7
 80068d4:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80068d8:	40100000 	.word	0x40100000
 80068dc:	3ff00000 	.word	0x3ff00000
 80068e0:	40080000 	.word	0x40080000

080068e4 <rtIsNaN>:
 * Function: rtIsNaN ==================================================
 *  Abstract:
 *  Test if value is not a number
 */
boolean_T rtIsNaN(real_T value)
{
 80068e4:	b580      	push	{r7, lr}
 80068e6:	b082      	sub	sp, #8
 80068e8:	af00      	add	r7, sp, #0
 80068ea:	ed87 0b00 	vstr	d0, [r7]
  return (isnan(value) != 0U);
 80068ee:	e9d7 2300 	ldrd	r2, r3, [r7]
 80068f2:	e9d7 0100 	ldrd	r0, r1, [r7]
 80068f6:	f7fa f941 	bl	8000b7c <__aeabi_dcmpun>
 80068fa:	4603      	mov	r3, r0
 80068fc:	2b00      	cmp	r3, #0
 80068fe:	d001      	beq.n	8006904 <rtIsNaN+0x20>
 8006900:	2301      	movs	r3, #1
 8006902:	e000      	b.n	8006906 <rtIsNaN+0x22>
 8006904:	2300      	movs	r3, #0
}
 8006906:	4618      	mov	r0, r3
 8006908:	3708      	adds	r7, #8
 800690a:	46bd      	mov	sp, r7
 800690c:	bd80      	pop	{r7, pc}
	...

08006910 <socket>:
   }while(0);              \



int8_t socket(uint8_t sn, uint8_t protocol, uint16_t port, uint8_t flag)
{
 8006910:	b590      	push	{r4, r7, lr}
 8006912:	b085      	sub	sp, #20
 8006914:	af00      	add	r7, sp, #0
 8006916:	4604      	mov	r4, r0
 8006918:	4608      	mov	r0, r1
 800691a:	4611      	mov	r1, r2
 800691c:	461a      	mov	r2, r3
 800691e:	4623      	mov	r3, r4
 8006920:	71fb      	strb	r3, [r7, #7]
 8006922:	4603      	mov	r3, r0
 8006924:	71bb      	strb	r3, [r7, #6]
 8006926:	460b      	mov	r3, r1
 8006928:	80bb      	strh	r3, [r7, #4]
 800692a:	4613      	mov	r3, r2
 800692c:	70fb      	strb	r3, [r7, #3]
	CHECK_SOCKNUM();
 800692e:	79fb      	ldrb	r3, [r7, #7]
 8006930:	2b08      	cmp	r3, #8
 8006932:	d902      	bls.n	800693a <socket+0x2a>
 8006934:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006938:	e0f2      	b.n	8006b20 <socket+0x210>
	switch(protocol)
 800693a:	79bb      	ldrb	r3, [r7, #6]
 800693c:	2b01      	cmp	r3, #1
 800693e:	d005      	beq.n	800694c <socket+0x3c>
 8006940:	2b00      	cmp	r3, #0
 8006942:	dd11      	ble.n	8006968 <socket+0x58>
 8006944:	3b02      	subs	r3, #2
 8006946:	2b02      	cmp	r3, #2
 8006948:	d80e      	bhi.n	8006968 <socket+0x58>
	    break;
         }
      case Sn_MR_UDP :
      case Sn_MR_MACRAW :
	  case Sn_MR_IPRAW :
         break;
 800694a:	e011      	b.n	8006970 <socket+0x60>
            getSIPR((uint8_t*)&taddr);
 800694c:	f107 030c 	add.w	r3, r7, #12
 8006950:	2204      	movs	r2, #4
 8006952:	4619      	mov	r1, r3
 8006954:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 8006958:	f002 fc70 	bl	800923c <WIZCHIP_READ_BUF>
            if(taddr == 0) return SOCKERR_SOCKINIT;
 800695c:	68fb      	ldr	r3, [r7, #12]
 800695e:	2b00      	cmp	r3, #0
 8006960:	d105      	bne.n	800696e <socket+0x5e>
 8006962:	f06f 0302 	mvn.w	r3, #2
 8006966:	e0db      	b.n	8006b20 <socket+0x210>
   #if ( _WIZCHIP_ < 5200 )
      case Sn_MR_PPPoE :
         break;
   #endif
      default :
         return SOCKERR_SOCKMODE;
 8006968:	f06f 0304 	mvn.w	r3, #4
 800696c:	e0d8      	b.n	8006b20 <socket+0x210>
	    break;
 800696e:	bf00      	nop
	}
	//M20150601 : For SF_TCP_ALIGN & W5300
	//if((flag & 0x06) != 0) return SOCKERR_SOCKFLAG;
	if((flag & 0x04) != 0) return SOCKERR_SOCKFLAG;
 8006970:	78fb      	ldrb	r3, [r7, #3]
 8006972:	f003 0304 	and.w	r3, r3, #4
 8006976:	2b00      	cmp	r3, #0
 8006978:	d002      	beq.n	8006980 <socket+0x70>
 800697a:	f06f 0305 	mvn.w	r3, #5
 800697e:	e0cf      	b.n	8006b20 <socket+0x210>
#if _WIZCHIP_ == 5200
   if(flag & 0x10) return SOCKERR_SOCKFLAG;
#endif
	   
	if(flag != 0)
 8006980:	78fb      	ldrb	r3, [r7, #3]
 8006982:	2b00      	cmp	r3, #0
 8006984:	d025      	beq.n	80069d2 <socket+0xc2>
	{
   	switch(protocol)
 8006986:	79bb      	ldrb	r3, [r7, #6]
 8006988:	2b01      	cmp	r3, #1
 800698a:	d002      	beq.n	8006992 <socket+0x82>
 800698c:	2b02      	cmp	r3, #2
 800698e:	d008      	beq.n	80069a2 <socket+0x92>
      	         if((flag & SF_MULTI_ENABLE) == 0) return SOCKERR_SOCKFLAG;
      	      }
   	      #endif
   	      break;
   	   default:
   	      break;
 8006990:	e024      	b.n	80069dc <socket+0xcc>
   		     if((flag & (SF_TCP_NODELAY|SF_IO_NONBLOCK))==0) return SOCKERR_SOCKFLAG;
 8006992:	78fb      	ldrb	r3, [r7, #3]
 8006994:	f003 0321 	and.w	r3, r3, #33	; 0x21
 8006998:	2b00      	cmp	r3, #0
 800699a:	d11c      	bne.n	80069d6 <socket+0xc6>
 800699c:	f06f 0305 	mvn.w	r3, #5
 80069a0:	e0be      	b.n	8006b20 <socket+0x210>
   	      if(flag & SF_IGMP_VER2)
 80069a2:	78fb      	ldrb	r3, [r7, #3]
 80069a4:	f003 0320 	and.w	r3, r3, #32
 80069a8:	2b00      	cmp	r3, #0
 80069aa:	d006      	beq.n	80069ba <socket+0xaa>
   	         if((flag & SF_MULTI_ENABLE)==0) return SOCKERR_SOCKFLAG;
 80069ac:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80069b0:	2b00      	cmp	r3, #0
 80069b2:	db02      	blt.n	80069ba <socket+0xaa>
 80069b4:	f06f 0305 	mvn.w	r3, #5
 80069b8:	e0b2      	b.n	8006b20 <socket+0x210>
      	      if(flag & SF_UNI_BLOCK)
 80069ba:	78fb      	ldrb	r3, [r7, #3]
 80069bc:	f003 0310 	and.w	r3, r3, #16
 80069c0:	2b00      	cmp	r3, #0
 80069c2:	d00a      	beq.n	80069da <socket+0xca>
      	         if((flag & SF_MULTI_ENABLE) == 0) return SOCKERR_SOCKFLAG;
 80069c4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80069c8:	2b00      	cmp	r3, #0
 80069ca:	db06      	blt.n	80069da <socket+0xca>
 80069cc:	f06f 0305 	mvn.w	r3, #5
 80069d0:	e0a6      	b.n	8006b20 <socket+0x210>
   	}
   }
 80069d2:	bf00      	nop
 80069d4:	e002      	b.n	80069dc <socket+0xcc>
   	      break;
 80069d6:	bf00      	nop
 80069d8:	e000      	b.n	80069dc <socket+0xcc>
   	      break;
 80069da:	bf00      	nop
	close(sn);
 80069dc:	79fb      	ldrb	r3, [r7, #7]
 80069de:	4618      	mov	r0, r3
 80069e0:	f000 f8ac 	bl	8006b3c <close>
	//M20150601
	#if _WIZCHIP_ == 5300
	   setSn_MR(sn, ((uint16_t)(protocol | (flag & 0xF0))) | (((uint16_t)(flag & 0x02)) << 7) );
    #else
	   setSn_MR(sn, (protocol | (flag & 0xF0)));
 80069e4:	79fb      	ldrb	r3, [r7, #7]
 80069e6:	009b      	lsls	r3, r3, #2
 80069e8:	3301      	adds	r3, #1
 80069ea:	00db      	lsls	r3, r3, #3
 80069ec:	4618      	mov	r0, r3
 80069ee:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80069f2:	f023 030f 	bic.w	r3, r3, #15
 80069f6:	b25a      	sxtb	r2, r3
 80069f8:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80069fc:	4313      	orrs	r3, r2
 80069fe:	b25b      	sxtb	r3, r3
 8006a00:	b2db      	uxtb	r3, r3
 8006a02:	4619      	mov	r1, r3
 8006a04:	f002 fbcc 	bl	80091a0 <WIZCHIP_WRITE>
    #endif
	if(!port)
 8006a08:	88bb      	ldrh	r3, [r7, #4]
 8006a0a:	2b00      	cmp	r3, #0
 8006a0c:	d110      	bne.n	8006a30 <socket+0x120>
	{
	   port = sock_any_port++;
 8006a0e:	4b46      	ldr	r3, [pc, #280]	; (8006b28 <socket+0x218>)
 8006a10:	881b      	ldrh	r3, [r3, #0]
 8006a12:	1c5a      	adds	r2, r3, #1
 8006a14:	b291      	uxth	r1, r2
 8006a16:	4a44      	ldr	r2, [pc, #272]	; (8006b28 <socket+0x218>)
 8006a18:	8011      	strh	r1, [r2, #0]
 8006a1a:	80bb      	strh	r3, [r7, #4]
	   if(sock_any_port == 0xFFF0) sock_any_port = SOCK_ANY_PORT_NUM;
 8006a1c:	4b42      	ldr	r3, [pc, #264]	; (8006b28 <socket+0x218>)
 8006a1e:	881b      	ldrh	r3, [r3, #0]
 8006a20:	f64f 72f0 	movw	r2, #65520	; 0xfff0
 8006a24:	4293      	cmp	r3, r2
 8006a26:	d103      	bne.n	8006a30 <socket+0x120>
 8006a28:	4b3f      	ldr	r3, [pc, #252]	; (8006b28 <socket+0x218>)
 8006a2a:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 8006a2e:	801a      	strh	r2, [r3, #0]
	}
   setSn_PORT(sn,port);	
 8006a30:	79fb      	ldrb	r3, [r7, #7]
 8006a32:	009b      	lsls	r3, r3, #2
 8006a34:	3301      	adds	r3, #1
 8006a36:	00db      	lsls	r3, r3, #3
 8006a38:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006a3c:	461a      	mov	r2, r3
 8006a3e:	88bb      	ldrh	r3, [r7, #4]
 8006a40:	0a1b      	lsrs	r3, r3, #8
 8006a42:	b29b      	uxth	r3, r3
 8006a44:	b2db      	uxtb	r3, r3
 8006a46:	4619      	mov	r1, r3
 8006a48:	4610      	mov	r0, r2
 8006a4a:	f002 fba9 	bl	80091a0 <WIZCHIP_WRITE>
 8006a4e:	79fb      	ldrb	r3, [r7, #7]
 8006a50:	009b      	lsls	r3, r3, #2
 8006a52:	3301      	adds	r3, #1
 8006a54:	00db      	lsls	r3, r3, #3
 8006a56:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006a5a:	461a      	mov	r2, r3
 8006a5c:	88bb      	ldrh	r3, [r7, #4]
 8006a5e:	b2db      	uxtb	r3, r3
 8006a60:	4619      	mov	r1, r3
 8006a62:	4610      	mov	r0, r2
 8006a64:	f002 fb9c 	bl	80091a0 <WIZCHIP_WRITE>
   setSn_CR(sn,Sn_CR_OPEN);
 8006a68:	79fb      	ldrb	r3, [r7, #7]
 8006a6a:	009b      	lsls	r3, r3, #2
 8006a6c:	3301      	adds	r3, #1
 8006a6e:	00db      	lsls	r3, r3, #3
 8006a70:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8006a74:	2101      	movs	r1, #1
 8006a76:	4618      	mov	r0, r3
 8006a78:	f002 fb92 	bl	80091a0 <WIZCHIP_WRITE>
   while(getSn_CR(sn));
 8006a7c:	bf00      	nop
 8006a7e:	79fb      	ldrb	r3, [r7, #7]
 8006a80:	009b      	lsls	r3, r3, #2
 8006a82:	3301      	adds	r3, #1
 8006a84:	00db      	lsls	r3, r3, #3
 8006a86:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8006a8a:	4618      	mov	r0, r3
 8006a8c:	f002 fb3c 	bl	8009108 <WIZCHIP_READ>
 8006a90:	4603      	mov	r3, r0
 8006a92:	2b00      	cmp	r3, #0
 8006a94:	d1f3      	bne.n	8006a7e <socket+0x16e>
   //A20150401 : For release the previous sock_io_mode
   sock_io_mode &= ~(1 <<sn);
 8006a96:	79fb      	ldrb	r3, [r7, #7]
 8006a98:	2201      	movs	r2, #1
 8006a9a:	fa02 f303 	lsl.w	r3, r2, r3
 8006a9e:	b21b      	sxth	r3, r3
 8006aa0:	43db      	mvns	r3, r3
 8006aa2:	b21a      	sxth	r2, r3
 8006aa4:	4b21      	ldr	r3, [pc, #132]	; (8006b2c <socket+0x21c>)
 8006aa6:	881b      	ldrh	r3, [r3, #0]
 8006aa8:	b21b      	sxth	r3, r3
 8006aaa:	4013      	ands	r3, r2
 8006aac:	b21b      	sxth	r3, r3
 8006aae:	b29a      	uxth	r2, r3
 8006ab0:	4b1e      	ldr	r3, [pc, #120]	; (8006b2c <socket+0x21c>)
 8006ab2:	801a      	strh	r2, [r3, #0]
   //
	sock_io_mode |= ((flag & SF_IO_NONBLOCK) << sn);   
 8006ab4:	78fb      	ldrb	r3, [r7, #3]
 8006ab6:	f003 0201 	and.w	r2, r3, #1
 8006aba:	79fb      	ldrb	r3, [r7, #7]
 8006abc:	fa02 f303 	lsl.w	r3, r2, r3
 8006ac0:	b21a      	sxth	r2, r3
 8006ac2:	4b1a      	ldr	r3, [pc, #104]	; (8006b2c <socket+0x21c>)
 8006ac4:	881b      	ldrh	r3, [r3, #0]
 8006ac6:	b21b      	sxth	r3, r3
 8006ac8:	4313      	orrs	r3, r2
 8006aca:	b21b      	sxth	r3, r3
 8006acc:	b29a      	uxth	r2, r3
 8006ace:	4b17      	ldr	r3, [pc, #92]	; (8006b2c <socket+0x21c>)
 8006ad0:	801a      	strh	r2, [r3, #0]
   sock_is_sending &= ~(1<<sn);
 8006ad2:	79fb      	ldrb	r3, [r7, #7]
 8006ad4:	2201      	movs	r2, #1
 8006ad6:	fa02 f303 	lsl.w	r3, r2, r3
 8006ada:	b21b      	sxth	r3, r3
 8006adc:	43db      	mvns	r3, r3
 8006ade:	b21a      	sxth	r2, r3
 8006ae0:	4b13      	ldr	r3, [pc, #76]	; (8006b30 <socket+0x220>)
 8006ae2:	881b      	ldrh	r3, [r3, #0]
 8006ae4:	b21b      	sxth	r3, r3
 8006ae6:	4013      	ands	r3, r2
 8006ae8:	b21b      	sxth	r3, r3
 8006aea:	b29a      	uxth	r2, r3
 8006aec:	4b10      	ldr	r3, [pc, #64]	; (8006b30 <socket+0x220>)
 8006aee:	801a      	strh	r2, [r3, #0]
   sock_remained_size[sn] = 0;
 8006af0:	79fb      	ldrb	r3, [r7, #7]
 8006af2:	4a10      	ldr	r2, [pc, #64]	; (8006b34 <socket+0x224>)
 8006af4:	2100      	movs	r1, #0
 8006af6:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
   //M20150601 : repalce 0 with PACK_COMPLETED
   //sock_pack_info[sn] = 0;
   sock_pack_info[sn] = PACK_COMPLETED;
 8006afa:	79fb      	ldrb	r3, [r7, #7]
 8006afc:	4a0e      	ldr	r2, [pc, #56]	; (8006b38 <socket+0x228>)
 8006afe:	2100      	movs	r1, #0
 8006b00:	54d1      	strb	r1, [r2, r3]
   //
   while(getSn_SR(sn) == SOCK_CLOSED);
 8006b02:	bf00      	nop
 8006b04:	79fb      	ldrb	r3, [r7, #7]
 8006b06:	009b      	lsls	r3, r3, #2
 8006b08:	3301      	adds	r3, #1
 8006b0a:	00db      	lsls	r3, r3, #3
 8006b0c:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8006b10:	4618      	mov	r0, r3
 8006b12:	f002 faf9 	bl	8009108 <WIZCHIP_READ>
 8006b16:	4603      	mov	r3, r0
 8006b18:	2b00      	cmp	r3, #0
 8006b1a:	d0f3      	beq.n	8006b04 <socket+0x1f4>
   return (int8_t)sn;
 8006b1c:	f997 3007 	ldrsb.w	r3, [r7, #7]
}	   
 8006b20:	4618      	mov	r0, r3
 8006b22:	3714      	adds	r7, #20
 8006b24:	46bd      	mov	sp, r7
 8006b26:	bd90      	pop	{r4, r7, pc}
 8006b28:	20000378 	.word	0x20000378
 8006b2c:	20000fbc 	.word	0x20000fbc
 8006b30:	20000fbe 	.word	0x20000fbe
 8006b34:	20000fc0 	.word	0x20000fc0
 8006b38:	20000fd0 	.word	0x20000fd0

08006b3c <close>:

int8_t close(uint8_t sn)
{
 8006b3c:	b580      	push	{r7, lr}
 8006b3e:	b082      	sub	sp, #8
 8006b40:	af00      	add	r7, sp, #0
 8006b42:	4603      	mov	r3, r0
 8006b44:	71fb      	strb	r3, [r7, #7]
	CHECK_SOCKNUM();
 8006b46:	79fb      	ldrb	r3, [r7, #7]
 8006b48:	2b08      	cmp	r3, #8
 8006b4a:	d902      	bls.n	8006b52 <close+0x16>
 8006b4c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006b50:	e055      	b.n	8006bfe <close+0xc2>
      while(getSn_CR(sn) != 0);
      while(getSn_SR(sn) != SOCK_UDP);
      sendto(sn,destip,1,destip,0x3000); // send the dummy data to an unknown destination(0.0.0.1).
   };   
#endif 
	setSn_CR(sn,Sn_CR_CLOSE);
 8006b52:	79fb      	ldrb	r3, [r7, #7]
 8006b54:	009b      	lsls	r3, r3, #2
 8006b56:	3301      	adds	r3, #1
 8006b58:	00db      	lsls	r3, r3, #3
 8006b5a:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8006b5e:	2110      	movs	r1, #16
 8006b60:	4618      	mov	r0, r3
 8006b62:	f002 fb1d 	bl	80091a0 <WIZCHIP_WRITE>
   /* wait to process the command... */
	while( getSn_CR(sn) );
 8006b66:	bf00      	nop
 8006b68:	79fb      	ldrb	r3, [r7, #7]
 8006b6a:	009b      	lsls	r3, r3, #2
 8006b6c:	3301      	adds	r3, #1
 8006b6e:	00db      	lsls	r3, r3, #3
 8006b70:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8006b74:	4618      	mov	r0, r3
 8006b76:	f002 fac7 	bl	8009108 <WIZCHIP_READ>
 8006b7a:	4603      	mov	r3, r0
 8006b7c:	2b00      	cmp	r3, #0
 8006b7e:	d1f3      	bne.n	8006b68 <close+0x2c>
	/* clear all interrupt of the socket. */
	setSn_IR(sn, 0xFF);
 8006b80:	79fb      	ldrb	r3, [r7, #7]
 8006b82:	009b      	lsls	r3, r3, #2
 8006b84:	3301      	adds	r3, #1
 8006b86:	00db      	lsls	r3, r3, #3
 8006b88:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8006b8c:	211f      	movs	r1, #31
 8006b8e:	4618      	mov	r0, r3
 8006b90:	f002 fb06 	bl	80091a0 <WIZCHIP_WRITE>
	//A20150401 : Release the sock_io_mode of socket n.
	sock_io_mode &= ~(1<<sn);
 8006b94:	79fb      	ldrb	r3, [r7, #7]
 8006b96:	2201      	movs	r2, #1
 8006b98:	fa02 f303 	lsl.w	r3, r2, r3
 8006b9c:	b21b      	sxth	r3, r3
 8006b9e:	43db      	mvns	r3, r3
 8006ba0:	b21a      	sxth	r2, r3
 8006ba2:	4b19      	ldr	r3, [pc, #100]	; (8006c08 <close+0xcc>)
 8006ba4:	881b      	ldrh	r3, [r3, #0]
 8006ba6:	b21b      	sxth	r3, r3
 8006ba8:	4013      	ands	r3, r2
 8006baa:	b21b      	sxth	r3, r3
 8006bac:	b29a      	uxth	r2, r3
 8006bae:	4b16      	ldr	r3, [pc, #88]	; (8006c08 <close+0xcc>)
 8006bb0:	801a      	strh	r2, [r3, #0]
	//
	sock_is_sending &= ~(1<<sn);
 8006bb2:	79fb      	ldrb	r3, [r7, #7]
 8006bb4:	2201      	movs	r2, #1
 8006bb6:	fa02 f303 	lsl.w	r3, r2, r3
 8006bba:	b21b      	sxth	r3, r3
 8006bbc:	43db      	mvns	r3, r3
 8006bbe:	b21a      	sxth	r2, r3
 8006bc0:	4b12      	ldr	r3, [pc, #72]	; (8006c0c <close+0xd0>)
 8006bc2:	881b      	ldrh	r3, [r3, #0]
 8006bc4:	b21b      	sxth	r3, r3
 8006bc6:	4013      	ands	r3, r2
 8006bc8:	b21b      	sxth	r3, r3
 8006bca:	b29a      	uxth	r2, r3
 8006bcc:	4b0f      	ldr	r3, [pc, #60]	; (8006c0c <close+0xd0>)
 8006bce:	801a      	strh	r2, [r3, #0]
	sock_remained_size[sn] = 0;
 8006bd0:	79fb      	ldrb	r3, [r7, #7]
 8006bd2:	4a0f      	ldr	r2, [pc, #60]	; (8006c10 <close+0xd4>)
 8006bd4:	2100      	movs	r1, #0
 8006bd6:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	sock_pack_info[sn] = 0;
 8006bda:	79fb      	ldrb	r3, [r7, #7]
 8006bdc:	4a0d      	ldr	r2, [pc, #52]	; (8006c14 <close+0xd8>)
 8006bde:	2100      	movs	r1, #0
 8006be0:	54d1      	strb	r1, [r2, r3]
	while(getSn_SR(sn) != SOCK_CLOSED);
 8006be2:	bf00      	nop
 8006be4:	79fb      	ldrb	r3, [r7, #7]
 8006be6:	009b      	lsls	r3, r3, #2
 8006be8:	3301      	adds	r3, #1
 8006bea:	00db      	lsls	r3, r3, #3
 8006bec:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8006bf0:	4618      	mov	r0, r3
 8006bf2:	f002 fa89 	bl	8009108 <WIZCHIP_READ>
 8006bf6:	4603      	mov	r3, r0
 8006bf8:	2b00      	cmp	r3, #0
 8006bfa:	d1f3      	bne.n	8006be4 <close+0xa8>
	return SOCK_OK;
 8006bfc:	2301      	movs	r3, #1
}
 8006bfe:	4618      	mov	r0, r3
 8006c00:	3708      	adds	r7, #8
 8006c02:	46bd      	mov	sp, r7
 8006c04:	bd80      	pop	{r7, pc}
 8006c06:	bf00      	nop
 8006c08:	20000fbc 	.word	0x20000fbc
 8006c0c:	20000fbe 	.word	0x20000fbe
 8006c10:	20000fc0 	.word	0x20000fc0
 8006c14:	20000fd0 	.word	0x20000fd0

08006c18 <sendto>:
   //return len;
   return (int32_t)len;
}

int32_t sendto(uint8_t sn, uint8_t * buf, uint16_t len, uint8_t * addr, uint16_t port)
{
 8006c18:	b580      	push	{r7, lr}
 8006c1a:	b086      	sub	sp, #24
 8006c1c:	af00      	add	r7, sp, #0
 8006c1e:	60b9      	str	r1, [r7, #8]
 8006c20:	607b      	str	r3, [r7, #4]
 8006c22:	4603      	mov	r3, r0
 8006c24:	73fb      	strb	r3, [r7, #15]
 8006c26:	4613      	mov	r3, r2
 8006c28:	81bb      	strh	r3, [r7, #12]
   uint8_t tmp = 0;
 8006c2a:	2300      	movs	r3, #0
 8006c2c:	75fb      	strb	r3, [r7, #23]
   uint16_t freesize = 0;
 8006c2e:	2300      	movs	r3, #0
 8006c30:	82bb      	strh	r3, [r7, #20]
   uint32_t taddr;

   CHECK_SOCKNUM();
 8006c32:	7bfb      	ldrb	r3, [r7, #15]
 8006c34:	2b08      	cmp	r3, #8
 8006c36:	d902      	bls.n	8006c3e <sendto+0x26>
 8006c38:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006c3c:	e11b      	b.n	8006e76 <sendto+0x25e>
   switch(getSn_MR(sn) & 0x0F)
 8006c3e:	7bfb      	ldrb	r3, [r7, #15]
 8006c40:	009b      	lsls	r3, r3, #2
 8006c42:	3301      	adds	r3, #1
 8006c44:	00db      	lsls	r3, r3, #3
 8006c46:	4618      	mov	r0, r3
 8006c48:	f002 fa5e 	bl	8009108 <WIZCHIP_READ>
 8006c4c:	4603      	mov	r3, r0
 8006c4e:	f003 030f 	and.w	r3, r3, #15
 8006c52:	3b02      	subs	r3, #2
 8006c54:	2b02      	cmp	r3, #2
 8006c56:	d902      	bls.n	8006c5e <sendto+0x46>
//   #if ( _WIZCHIP_ < 5200 )
      case Sn_MR_IPRAW:
         break;
//   #endif
      default:
         return SOCKERR_SOCKMODE;
 8006c58:	f06f 0304 	mvn.w	r3, #4
 8006c5c:	e10b      	b.n	8006e76 <sendto+0x25e>
         break;
 8006c5e:	bf00      	nop
   }
   CHECK_SOCKDATA();
 8006c60:	89bb      	ldrh	r3, [r7, #12]
 8006c62:	2b00      	cmp	r3, #0
 8006c64:	d102      	bne.n	8006c6c <sendto+0x54>
 8006c66:	f06f 030d 	mvn.w	r3, #13
 8006c6a:	e104      	b.n	8006e76 <sendto+0x25e>
   //M20140501 : For avoiding fatal error on memory align mismatched
   //if(*((uint32_t*)addr) == 0) return SOCKERR_IPINVALID;
   //{
      //uint32_t taddr;
      taddr = ((uint32_t)addr[0]) & 0x000000FF;
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	781b      	ldrb	r3, [r3, #0]
 8006c70:	613b      	str	r3, [r7, #16]
      taddr = (taddr << 8) + ((uint32_t)addr[1] & 0x000000FF);
 8006c72:	693b      	ldr	r3, [r7, #16]
 8006c74:	021b      	lsls	r3, r3, #8
 8006c76:	687a      	ldr	r2, [r7, #4]
 8006c78:	3201      	adds	r2, #1
 8006c7a:	7812      	ldrb	r2, [r2, #0]
 8006c7c:	4413      	add	r3, r2
 8006c7e:	613b      	str	r3, [r7, #16]
      taddr = (taddr << 8) + ((uint32_t)addr[2] & 0x000000FF);
 8006c80:	693b      	ldr	r3, [r7, #16]
 8006c82:	021b      	lsls	r3, r3, #8
 8006c84:	687a      	ldr	r2, [r7, #4]
 8006c86:	3202      	adds	r2, #2
 8006c88:	7812      	ldrb	r2, [r2, #0]
 8006c8a:	4413      	add	r3, r2
 8006c8c:	613b      	str	r3, [r7, #16]
      taddr = (taddr << 8) + ((uint32_t)addr[3] & 0x000000FF);
 8006c8e:	693b      	ldr	r3, [r7, #16]
 8006c90:	021b      	lsls	r3, r3, #8
 8006c92:	687a      	ldr	r2, [r7, #4]
 8006c94:	3203      	adds	r2, #3
 8006c96:	7812      	ldrb	r2, [r2, #0]
 8006c98:	4413      	add	r3, r2
 8006c9a:	613b      	str	r3, [r7, #16]
   //}
   //
   //if(*((uint32_t*)addr) == 0) return SOCKERR_IPINVALID;
   if((taddr == 0) && ((getSn_MR(sn)&Sn_MR_MACRAW) != Sn_MR_MACRAW)) return SOCKERR_IPINVALID;
 8006c9c:	693b      	ldr	r3, [r7, #16]
 8006c9e:	2b00      	cmp	r3, #0
 8006ca0:	d10e      	bne.n	8006cc0 <sendto+0xa8>
 8006ca2:	7bfb      	ldrb	r3, [r7, #15]
 8006ca4:	009b      	lsls	r3, r3, #2
 8006ca6:	3301      	adds	r3, #1
 8006ca8:	00db      	lsls	r3, r3, #3
 8006caa:	4618      	mov	r0, r3
 8006cac:	f002 fa2c 	bl	8009108 <WIZCHIP_READ>
 8006cb0:	4603      	mov	r3, r0
 8006cb2:	f003 0304 	and.w	r3, r3, #4
 8006cb6:	2b04      	cmp	r3, #4
 8006cb8:	d002      	beq.n	8006cc0 <sendto+0xa8>
 8006cba:	f06f 030b 	mvn.w	r3, #11
 8006cbe:	e0da      	b.n	8006e76 <sendto+0x25e>
   if((port  == 0) && ((getSn_MR(sn)&Sn_MR_MACRAW) != Sn_MR_MACRAW)) return SOCKERR_PORTZERO;
 8006cc0:	8c3b      	ldrh	r3, [r7, #32]
 8006cc2:	2b00      	cmp	r3, #0
 8006cc4:	d10e      	bne.n	8006ce4 <sendto+0xcc>
 8006cc6:	7bfb      	ldrb	r3, [r7, #15]
 8006cc8:	009b      	lsls	r3, r3, #2
 8006cca:	3301      	adds	r3, #1
 8006ccc:	00db      	lsls	r3, r3, #3
 8006cce:	4618      	mov	r0, r3
 8006cd0:	f002 fa1a 	bl	8009108 <WIZCHIP_READ>
 8006cd4:	4603      	mov	r3, r0
 8006cd6:	f003 0304 	and.w	r3, r3, #4
 8006cda:	2b04      	cmp	r3, #4
 8006cdc:	d002      	beq.n	8006ce4 <sendto+0xcc>
 8006cde:	f06f 030a 	mvn.w	r3, #10
 8006ce2:	e0c8      	b.n	8006e76 <sendto+0x25e>
   tmp = getSn_SR(sn);
 8006ce4:	7bfb      	ldrb	r3, [r7, #15]
 8006ce6:	009b      	lsls	r3, r3, #2
 8006ce8:	3301      	adds	r3, #1
 8006cea:	00db      	lsls	r3, r3, #3
 8006cec:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8006cf0:	4618      	mov	r0, r3
 8006cf2:	f002 fa09 	bl	8009108 <WIZCHIP_READ>
 8006cf6:	4603      	mov	r3, r0
 8006cf8:	75fb      	strb	r3, [r7, #23]
//#if ( _WIZCHIP_ < 5200 )
   if((tmp != SOCK_MACRAW) && (tmp != SOCK_UDP) && (tmp != SOCK_IPRAW)) return SOCKERR_SOCKSTATUS;
 8006cfa:	7dfb      	ldrb	r3, [r7, #23]
 8006cfc:	2b42      	cmp	r3, #66	; 0x42
 8006cfe:	d008      	beq.n	8006d12 <sendto+0xfa>
 8006d00:	7dfb      	ldrb	r3, [r7, #23]
 8006d02:	2b22      	cmp	r3, #34	; 0x22
 8006d04:	d005      	beq.n	8006d12 <sendto+0xfa>
 8006d06:	7dfb      	ldrb	r3, [r7, #23]
 8006d08:	2b32      	cmp	r3, #50	; 0x32
 8006d0a:	d002      	beq.n	8006d12 <sendto+0xfa>
 8006d0c:	f06f 0306 	mvn.w	r3, #6
 8006d10:	e0b1      	b.n	8006e76 <sendto+0x25e>
//#else
//   if(tmp != SOCK_MACRAW && tmp != SOCK_UDP) return SOCKERR_SOCKSTATUS;
//#endif
      
   setSn_DIPR(sn,addr);
 8006d12:	7bfb      	ldrb	r3, [r7, #15]
 8006d14:	009b      	lsls	r3, r3, #2
 8006d16:	3301      	adds	r3, #1
 8006d18:	00db      	lsls	r3, r3, #3
 8006d1a:	f503 6340 	add.w	r3, r3, #3072	; 0xc00
 8006d1e:	2204      	movs	r2, #4
 8006d20:	6879      	ldr	r1, [r7, #4]
 8006d22:	4618      	mov	r0, r3
 8006d24:	f002 faea 	bl	80092fc <WIZCHIP_WRITE_BUF>
   setSn_DPORT(sn,port);      
 8006d28:	7bfb      	ldrb	r3, [r7, #15]
 8006d2a:	009b      	lsls	r3, r3, #2
 8006d2c:	3301      	adds	r3, #1
 8006d2e:	00db      	lsls	r3, r3, #3
 8006d30:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006d34:	461a      	mov	r2, r3
 8006d36:	8c3b      	ldrh	r3, [r7, #32]
 8006d38:	0a1b      	lsrs	r3, r3, #8
 8006d3a:	b29b      	uxth	r3, r3
 8006d3c:	b2db      	uxtb	r3, r3
 8006d3e:	4619      	mov	r1, r3
 8006d40:	4610      	mov	r0, r2
 8006d42:	f002 fa2d 	bl	80091a0 <WIZCHIP_WRITE>
 8006d46:	7bfb      	ldrb	r3, [r7, #15]
 8006d48:	009b      	lsls	r3, r3, #2
 8006d4a:	3301      	adds	r3, #1
 8006d4c:	00db      	lsls	r3, r3, #3
 8006d4e:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 8006d52:	461a      	mov	r2, r3
 8006d54:	8c3b      	ldrh	r3, [r7, #32]
 8006d56:	b2db      	uxtb	r3, r3
 8006d58:	4619      	mov	r1, r3
 8006d5a:	4610      	mov	r0, r2
 8006d5c:	f002 fa20 	bl	80091a0 <WIZCHIP_WRITE>
   freesize = getSn_TxMAX(sn);
 8006d60:	7bfb      	ldrb	r3, [r7, #15]
 8006d62:	009b      	lsls	r3, r3, #2
 8006d64:	3301      	adds	r3, #1
 8006d66:	00db      	lsls	r3, r3, #3
 8006d68:	f503 53f8 	add.w	r3, r3, #7936	; 0x1f00
 8006d6c:	4618      	mov	r0, r3
 8006d6e:	f002 f9cb 	bl	8009108 <WIZCHIP_READ>
 8006d72:	4603      	mov	r3, r0
 8006d74:	b29b      	uxth	r3, r3
 8006d76:	029b      	lsls	r3, r3, #10
 8006d78:	82bb      	strh	r3, [r7, #20]
   if (len > freesize) len = freesize; // check size not to exceed MAX size.
 8006d7a:	89ba      	ldrh	r2, [r7, #12]
 8006d7c:	8abb      	ldrh	r3, [r7, #20]
 8006d7e:	429a      	cmp	r2, r3
 8006d80:	d901      	bls.n	8006d86 <sendto+0x16e>
 8006d82:	8abb      	ldrh	r3, [r7, #20]
 8006d84:	81bb      	strh	r3, [r7, #12]
   while(1)
   {
      freesize = getSn_TX_FSR(sn);
 8006d86:	7bfb      	ldrb	r3, [r7, #15]
 8006d88:	4618      	mov	r0, r3
 8006d8a:	f002 fb17 	bl	80093bc <getSn_TX_FSR>
 8006d8e:	4603      	mov	r3, r0
 8006d90:	82bb      	strh	r3, [r7, #20]
      if(getSn_SR(sn) == SOCK_CLOSED) return SOCKERR_SOCKCLOSED;
 8006d92:	7bfb      	ldrb	r3, [r7, #15]
 8006d94:	009b      	lsls	r3, r3, #2
 8006d96:	3301      	adds	r3, #1
 8006d98:	00db      	lsls	r3, r3, #3
 8006d9a:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8006d9e:	4618      	mov	r0, r3
 8006da0:	f002 f9b2 	bl	8009108 <WIZCHIP_READ>
 8006da4:	4603      	mov	r3, r0
 8006da6:	2b00      	cmp	r3, #0
 8006da8:	d102      	bne.n	8006db0 <sendto+0x198>
 8006daa:	f06f 0303 	mvn.w	r3, #3
 8006dae:	e062      	b.n	8006e76 <sendto+0x25e>
      if( (sock_io_mode & (1<<sn)) && (len > freesize) ) return SOCK_BUSY;
 8006db0:	4b33      	ldr	r3, [pc, #204]	; (8006e80 <sendto+0x268>)
 8006db2:	881b      	ldrh	r3, [r3, #0]
 8006db4:	461a      	mov	r2, r3
 8006db6:	7bfb      	ldrb	r3, [r7, #15]
 8006db8:	fa42 f303 	asr.w	r3, r2, r3
 8006dbc:	f003 0301 	and.w	r3, r3, #1
 8006dc0:	2b00      	cmp	r3, #0
 8006dc2:	d005      	beq.n	8006dd0 <sendto+0x1b8>
 8006dc4:	89ba      	ldrh	r2, [r7, #12]
 8006dc6:	8abb      	ldrh	r3, [r7, #20]
 8006dc8:	429a      	cmp	r2, r3
 8006dca:	d901      	bls.n	8006dd0 <sendto+0x1b8>
 8006dcc:	2300      	movs	r3, #0
 8006dce:	e052      	b.n	8006e76 <sendto+0x25e>
      if(len <= freesize) break;
 8006dd0:	89ba      	ldrh	r2, [r7, #12]
 8006dd2:	8abb      	ldrh	r3, [r7, #20]
 8006dd4:	429a      	cmp	r2, r3
 8006dd6:	d900      	bls.n	8006dda <sendto+0x1c2>
      freesize = getSn_TX_FSR(sn);
 8006dd8:	e7d5      	b.n	8006d86 <sendto+0x16e>
      if(len <= freesize) break;
 8006dda:	bf00      	nop
   };
	wiz_send_data(sn, buf, len);
 8006ddc:	89ba      	ldrh	r2, [r7, #12]
 8006dde:	7bfb      	ldrb	r3, [r7, #15]
 8006de0:	68b9      	ldr	r1, [r7, #8]
 8006de2:	4618      	mov	r0, r3
 8006de4:	f002 fb80 	bl	80094e8 <wiz_send_data>
//A20150601 : For W5300
#if _WIZCHIP_ == 5300
   setSn_TX_WRSR(sn, len);
#endif
//   
	setSn_CR(sn,Sn_CR_SEND);
 8006de8:	7bfb      	ldrb	r3, [r7, #15]
 8006dea:	009b      	lsls	r3, r3, #2
 8006dec:	3301      	adds	r3, #1
 8006dee:	00db      	lsls	r3, r3, #3
 8006df0:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8006df4:	2120      	movs	r1, #32
 8006df6:	4618      	mov	r0, r3
 8006df8:	f002 f9d2 	bl	80091a0 <WIZCHIP_WRITE>
	/* wait to process the command... */
	while(getSn_CR(sn));
 8006dfc:	bf00      	nop
 8006dfe:	7bfb      	ldrb	r3, [r7, #15]
 8006e00:	009b      	lsls	r3, r3, #2
 8006e02:	3301      	adds	r3, #1
 8006e04:	00db      	lsls	r3, r3, #3
 8006e06:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8006e0a:	4618      	mov	r0, r3
 8006e0c:	f002 f97c 	bl	8009108 <WIZCHIP_READ>
 8006e10:	4603      	mov	r3, r0
 8006e12:	2b00      	cmp	r3, #0
 8006e14:	d1f3      	bne.n	8006dfe <sendto+0x1e6>
   while(1)
   {
      tmp = getSn_IR(sn);
 8006e16:	7bfb      	ldrb	r3, [r7, #15]
 8006e18:	009b      	lsls	r3, r3, #2
 8006e1a:	3301      	adds	r3, #1
 8006e1c:	00db      	lsls	r3, r3, #3
 8006e1e:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8006e22:	4618      	mov	r0, r3
 8006e24:	f002 f970 	bl	8009108 <WIZCHIP_READ>
 8006e28:	4603      	mov	r3, r0
 8006e2a:	f003 031f 	and.w	r3, r3, #31
 8006e2e:	75fb      	strb	r3, [r7, #23]
      if(tmp & Sn_IR_SENDOK)
 8006e30:	7dfb      	ldrb	r3, [r7, #23]
 8006e32:	f003 0310 	and.w	r3, r3, #16
 8006e36:	2b00      	cmp	r3, #0
 8006e38:	d00c      	beq.n	8006e54 <sendto+0x23c>
      {
         setSn_IR(sn, Sn_IR_SENDOK);
 8006e3a:	7bfb      	ldrb	r3, [r7, #15]
 8006e3c:	009b      	lsls	r3, r3, #2
 8006e3e:	3301      	adds	r3, #1
 8006e40:	00db      	lsls	r3, r3, #3
 8006e42:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8006e46:	2110      	movs	r1, #16
 8006e48:	4618      	mov	r0, r3
 8006e4a:	f002 f9a9 	bl	80091a0 <WIZCHIP_WRITE>
         break;
 8006e4e:	bf00      	nop
   #if _WIZCHIP_ < 5500   //M20150401 : for WIZCHIP Errata #4, #5 (ARP errata)
      if(taddr) setSUBR((uint8_t*)&taddr);
   #endif
   //M20150409 : Explicit Type Casting
   //return len;
   return (int32_t)len;
 8006e50:	89bb      	ldrh	r3, [r7, #12]
 8006e52:	e010      	b.n	8006e76 <sendto+0x25e>
      else if(tmp & Sn_IR_TIMEOUT)
 8006e54:	7dfb      	ldrb	r3, [r7, #23]
 8006e56:	f003 0308 	and.w	r3, r3, #8
 8006e5a:	2b00      	cmp	r3, #0
 8006e5c:	d0db      	beq.n	8006e16 <sendto+0x1fe>
         setSn_IR(sn, Sn_IR_TIMEOUT);
 8006e5e:	7bfb      	ldrb	r3, [r7, #15]
 8006e60:	009b      	lsls	r3, r3, #2
 8006e62:	3301      	adds	r3, #1
 8006e64:	00db      	lsls	r3, r3, #3
 8006e66:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8006e6a:	2108      	movs	r1, #8
 8006e6c:	4618      	mov	r0, r3
 8006e6e:	f002 f997 	bl	80091a0 <WIZCHIP_WRITE>
         return SOCKERR_TIMEOUT;
 8006e72:	f06f 030c 	mvn.w	r3, #12
}
 8006e76:	4618      	mov	r0, r3
 8006e78:	3718      	adds	r7, #24
 8006e7a:	46bd      	mov	sp, r7
 8006e7c:	bd80      	pop	{r7, pc}
 8006e7e:	bf00      	nop
 8006e80:	20000fbc 	.word	0x20000fbc

08006e84 <recvfrom>:



int32_t recvfrom(uint8_t sn, uint8_t * buf, uint16_t len, uint8_t * addr, uint16_t *port)
{
 8006e84:	b580      	push	{r7, lr}
 8006e86:	b088      	sub	sp, #32
 8006e88:	af00      	add	r7, sp, #0
 8006e8a:	60b9      	str	r1, [r7, #8]
 8006e8c:	607b      	str	r3, [r7, #4]
 8006e8e:	4603      	mov	r3, r0
 8006e90:	73fb      	strb	r3, [r7, #15]
 8006e92:	4613      	mov	r3, r2
 8006e94:	81bb      	strh	r3, [r7, #12]
#else   
   uint8_t  mr;
#endif
//   
   uint8_t  head[8];
	uint16_t pack_len=0;
 8006e96:	2300      	movs	r3, #0
 8006e98:	83fb      	strh	r3, [r7, #30]

   CHECK_SOCKNUM();
 8006e9a:	7bfb      	ldrb	r3, [r7, #15]
 8006e9c:	2b08      	cmp	r3, #8
 8006e9e:	d902      	bls.n	8006ea6 <recvfrom+0x22>
 8006ea0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006ea4:	e1d4      	b.n	8007250 <recvfrom+0x3cc>
//A20150601
#if _WIZCHIP_ == 5300
   mr1 = getMR();
#endif   

   switch((mr=getSn_MR(sn)) & 0x0F)
 8006ea6:	7bfb      	ldrb	r3, [r7, #15]
 8006ea8:	009b      	lsls	r3, r3, #2
 8006eaa:	3301      	adds	r3, #1
 8006eac:	00db      	lsls	r3, r3, #3
 8006eae:	4618      	mov	r0, r3
 8006eb0:	f002 f92a 	bl	8009108 <WIZCHIP_READ>
 8006eb4:	4603      	mov	r3, r0
 8006eb6:	777b      	strb	r3, [r7, #29]
 8006eb8:	7f7b      	ldrb	r3, [r7, #29]
 8006eba:	f003 030f 	and.w	r3, r3, #15
 8006ebe:	3b02      	subs	r3, #2
 8006ec0:	2b02      	cmp	r3, #2
 8006ec2:	d902      	bls.n	8006eca <recvfrom+0x46>
   #if ( _WIZCHIP_ < 5200 )         
      case Sn_MR_PPPoE:
         break;
   #endif
      default:
         return SOCKERR_SOCKMODE;
 8006ec4:	f06f 0304 	mvn.w	r3, #4
 8006ec8:	e1c2      	b.n	8007250 <recvfrom+0x3cc>
         break;
 8006eca:	bf00      	nop
   }
   CHECK_SOCKDATA();
 8006ecc:	89bb      	ldrh	r3, [r7, #12]
 8006ece:	2b00      	cmp	r3, #0
 8006ed0:	d102      	bne.n	8006ed8 <recvfrom+0x54>
 8006ed2:	f06f 030d 	mvn.w	r3, #13
 8006ed6:	e1bb      	b.n	8007250 <recvfrom+0x3cc>
   if(sock_remained_size[sn] == 0)
 8006ed8:	7bfb      	ldrb	r3, [r7, #15]
 8006eda:	4a88      	ldr	r2, [pc, #544]	; (80070fc <recvfrom+0x278>)
 8006edc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006ee0:	2b00      	cmp	r3, #0
 8006ee2:	d128      	bne.n	8006f36 <recvfrom+0xb2>
   {
      while(1)
      {
         pack_len = getSn_RX_RSR(sn);
 8006ee4:	7bfb      	ldrb	r3, [r7, #15]
 8006ee6:	4618      	mov	r0, r3
 8006ee8:	f002 fab3 	bl	8009452 <getSn_RX_RSR>
 8006eec:	4603      	mov	r3, r0
 8006eee:	83fb      	strh	r3, [r7, #30]
         if(getSn_SR(sn) == SOCK_CLOSED) return SOCKERR_SOCKCLOSED;
 8006ef0:	7bfb      	ldrb	r3, [r7, #15]
 8006ef2:	009b      	lsls	r3, r3, #2
 8006ef4:	3301      	adds	r3, #1
 8006ef6:	00db      	lsls	r3, r3, #3
 8006ef8:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8006efc:	4618      	mov	r0, r3
 8006efe:	f002 f903 	bl	8009108 <WIZCHIP_READ>
 8006f02:	4603      	mov	r3, r0
 8006f04:	2b00      	cmp	r3, #0
 8006f06:	d102      	bne.n	8006f0e <recvfrom+0x8a>
 8006f08:	f06f 0303 	mvn.w	r3, #3
 8006f0c:	e1a0      	b.n	8007250 <recvfrom+0x3cc>
         if( (sock_io_mode & (1<<sn)) && (pack_len == 0) ) return SOCK_BUSY;
 8006f0e:	4b7c      	ldr	r3, [pc, #496]	; (8007100 <recvfrom+0x27c>)
 8006f10:	881b      	ldrh	r3, [r3, #0]
 8006f12:	461a      	mov	r2, r3
 8006f14:	7bfb      	ldrb	r3, [r7, #15]
 8006f16:	fa42 f303 	asr.w	r3, r2, r3
 8006f1a:	f003 0301 	and.w	r3, r3, #1
 8006f1e:	2b00      	cmp	r3, #0
 8006f20:	d004      	beq.n	8006f2c <recvfrom+0xa8>
 8006f22:	8bfb      	ldrh	r3, [r7, #30]
 8006f24:	2b00      	cmp	r3, #0
 8006f26:	d101      	bne.n	8006f2c <recvfrom+0xa8>
 8006f28:	2300      	movs	r3, #0
 8006f2a:	e191      	b.n	8007250 <recvfrom+0x3cc>
         if(pack_len != 0) break;
 8006f2c:	8bfb      	ldrh	r3, [r7, #30]
 8006f2e:	2b00      	cmp	r3, #0
 8006f30:	d100      	bne.n	8006f34 <recvfrom+0xb0>
         pack_len = getSn_RX_RSR(sn);
 8006f32:	e7d7      	b.n	8006ee4 <recvfrom+0x60>
         if(pack_len != 0) break;
 8006f34:	bf00      	nop
      };
   }
//D20150601 : Move it to bottom
// sock_pack_info[sn] = PACK_COMPLETED;
	switch (mr & 0x07)
 8006f36:	7f7b      	ldrb	r3, [r7, #29]
 8006f38:	f003 0307 	and.w	r3, r3, #7
 8006f3c:	2b04      	cmp	r3, #4
 8006f3e:	d079      	beq.n	8007034 <recvfrom+0x1b0>
 8006f40:	2b04      	cmp	r3, #4
 8006f42:	f300 8142 	bgt.w	80071ca <recvfrom+0x346>
 8006f46:	2b02      	cmp	r3, #2
 8006f48:	d003      	beq.n	8006f52 <recvfrom+0xce>
 8006f4a:	2b03      	cmp	r3, #3
 8006f4c:	f000 80dc 	beq.w	8007108 <recvfrom+0x284>
 8006f50:	e13b      	b.n	80071ca <recvfrom+0x346>
	{
	   case Sn_MR_UDP :
	      if(sock_remained_size[sn] == 0)
 8006f52:	7bfb      	ldrb	r3, [r7, #15]
 8006f54:	4a69      	ldr	r2, [pc, #420]	; (80070fc <recvfrom+0x278>)
 8006f56:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006f5a:	2b00      	cmp	r3, #0
 8006f5c:	d152      	bne.n	8007004 <recvfrom+0x180>
	      {
   			wiz_recv_data(sn, head, 8);
 8006f5e:	f107 0114 	add.w	r1, r7, #20
 8006f62:	7bfb      	ldrb	r3, [r7, #15]
 8006f64:	2208      	movs	r2, #8
 8006f66:	4618      	mov	r0, r3
 8006f68:	f002 fb1a 	bl	80095a0 <wiz_recv_data>
   			setSn_CR(sn,Sn_CR_RECV);
 8006f6c:	7bfb      	ldrb	r3, [r7, #15]
 8006f6e:	009b      	lsls	r3, r3, #2
 8006f70:	3301      	adds	r3, #1
 8006f72:	00db      	lsls	r3, r3, #3
 8006f74:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8006f78:	2140      	movs	r1, #64	; 0x40
 8006f7a:	4618      	mov	r0, r3
 8006f7c:	f002 f910 	bl	80091a0 <WIZCHIP_WRITE>
   			while(getSn_CR(sn));
 8006f80:	bf00      	nop
 8006f82:	7bfb      	ldrb	r3, [r7, #15]
 8006f84:	009b      	lsls	r3, r3, #2
 8006f86:	3301      	adds	r3, #1
 8006f88:	00db      	lsls	r3, r3, #3
 8006f8a:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8006f8e:	4618      	mov	r0, r3
 8006f90:	f002 f8ba 	bl	8009108 <WIZCHIP_READ>
 8006f94:	4603      	mov	r3, r0
 8006f96:	2b00      	cmp	r3, #0
 8006f98:	d1f3      	bne.n	8006f82 <recvfrom+0xfe>
      			sock_remained_size[sn] = (sock_remained_size[sn] << 8) + head[6];
   		   }
            else
            {
         #endif
               addr[0] = head[0];
 8006f9a:	7d3a      	ldrb	r2, [r7, #20]
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	701a      	strb	r2, [r3, #0]
      			addr[1] = head[1];
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	3301      	adds	r3, #1
 8006fa4:	7d7a      	ldrb	r2, [r7, #21]
 8006fa6:	701a      	strb	r2, [r3, #0]
      			addr[2] = head[2];
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	3302      	adds	r3, #2
 8006fac:	7dba      	ldrb	r2, [r7, #22]
 8006fae:	701a      	strb	r2, [r3, #0]
      			addr[3] = head[3];
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	3303      	adds	r3, #3
 8006fb4:	7dfa      	ldrb	r2, [r7, #23]
 8006fb6:	701a      	strb	r2, [r3, #0]
      			*port = head[4];
 8006fb8:	7e3b      	ldrb	r3, [r7, #24]
 8006fba:	b29a      	uxth	r2, r3
 8006fbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006fbe:	801a      	strh	r2, [r3, #0]
      			*port = (*port << 8) + head[5];
 8006fc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006fc2:	881b      	ldrh	r3, [r3, #0]
 8006fc4:	021b      	lsls	r3, r3, #8
 8006fc6:	b29a      	uxth	r2, r3
 8006fc8:	7e7b      	ldrb	r3, [r7, #25]
 8006fca:	b29b      	uxth	r3, r3
 8006fcc:	4413      	add	r3, r2
 8006fce:	b29a      	uxth	r2, r3
 8006fd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006fd2:	801a      	strh	r2, [r3, #0]
      			sock_remained_size[sn] = head[6];
 8006fd4:	7eba      	ldrb	r2, [r7, #26]
 8006fd6:	7bfb      	ldrb	r3, [r7, #15]
 8006fd8:	b291      	uxth	r1, r2
 8006fda:	4a48      	ldr	r2, [pc, #288]	; (80070fc <recvfrom+0x278>)
 8006fdc:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
      			sock_remained_size[sn] = (sock_remained_size[sn] << 8) + head[7];
 8006fe0:	7bfb      	ldrb	r3, [r7, #15]
 8006fe2:	4a46      	ldr	r2, [pc, #280]	; (80070fc <recvfrom+0x278>)
 8006fe4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006fe8:	021b      	lsls	r3, r3, #8
 8006fea:	b299      	uxth	r1, r3
 8006fec:	7efb      	ldrb	r3, [r7, #27]
 8006fee:	b29a      	uxth	r2, r3
 8006ff0:	7bfb      	ldrb	r3, [r7, #15]
 8006ff2:	440a      	add	r2, r1
 8006ff4:	b291      	uxth	r1, r2
 8006ff6:	4a41      	ldr	r2, [pc, #260]	; (80070fc <recvfrom+0x278>)
 8006ff8:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
         #if _WIZCHIP_ == 5300
            }
         #endif
   			sock_pack_info[sn] = PACK_FIRST;
 8006ffc:	7bfb      	ldrb	r3, [r7, #15]
 8006ffe:	4a41      	ldr	r2, [pc, #260]	; (8007104 <recvfrom+0x280>)
 8007000:	2180      	movs	r1, #128	; 0x80
 8007002:	54d1      	strb	r1, [r2, r3]
   	   }
			if(len < sock_remained_size[sn]) pack_len = len;
 8007004:	7bfb      	ldrb	r3, [r7, #15]
 8007006:	4a3d      	ldr	r2, [pc, #244]	; (80070fc <recvfrom+0x278>)
 8007008:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800700c:	89ba      	ldrh	r2, [r7, #12]
 800700e:	429a      	cmp	r2, r3
 8007010:	d202      	bcs.n	8007018 <recvfrom+0x194>
 8007012:	89bb      	ldrh	r3, [r7, #12]
 8007014:	83fb      	strh	r3, [r7, #30]
 8007016:	e004      	b.n	8007022 <recvfrom+0x19e>
			else pack_len = sock_remained_size[sn];
 8007018:	7bfb      	ldrb	r3, [r7, #15]
 800701a:	4a38      	ldr	r2, [pc, #224]	; (80070fc <recvfrom+0x278>)
 800701c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007020:	83fb      	strh	r3, [r7, #30]
			//A20150601 : For W5300
			len = pack_len;
 8007022:	8bfb      	ldrh	r3, [r7, #30]
 8007024:	81bb      	strh	r3, [r7, #12]
			   }
			#endif
			//
			// Need to packet length check (default 1472)
			//
   		wiz_recv_data(sn, buf, pack_len); // data copy.
 8007026:	8bfa      	ldrh	r2, [r7, #30]
 8007028:	7bfb      	ldrb	r3, [r7, #15]
 800702a:	68b9      	ldr	r1, [r7, #8]
 800702c:	4618      	mov	r0, r3
 800702e:	f002 fab7 	bl	80095a0 <wiz_recv_data>
			break;
 8007032:	e0d6      	b.n	80071e2 <recvfrom+0x35e>
	   case Sn_MR_MACRAW :
	      if(sock_remained_size[sn] == 0)
 8007034:	7bfb      	ldrb	r3, [r7, #15]
 8007036:	4a31      	ldr	r2, [pc, #196]	; (80070fc <recvfrom+0x278>)
 8007038:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800703c:	2b00      	cmp	r3, #0
 800703e:	d146      	bne.n	80070ce <recvfrom+0x24a>
	      {
   			wiz_recv_data(sn, head, 2);
 8007040:	f107 0114 	add.w	r1, r7, #20
 8007044:	7bfb      	ldrb	r3, [r7, #15]
 8007046:	2202      	movs	r2, #2
 8007048:	4618      	mov	r0, r3
 800704a:	f002 faa9 	bl	80095a0 <wiz_recv_data>
   			setSn_CR(sn,Sn_CR_RECV);
 800704e:	7bfb      	ldrb	r3, [r7, #15]
 8007050:	009b      	lsls	r3, r3, #2
 8007052:	3301      	adds	r3, #1
 8007054:	00db      	lsls	r3, r3, #3
 8007056:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800705a:	2140      	movs	r1, #64	; 0x40
 800705c:	4618      	mov	r0, r3
 800705e:	f002 f89f 	bl	80091a0 <WIZCHIP_WRITE>
   			while(getSn_CR(sn));
 8007062:	bf00      	nop
 8007064:	7bfb      	ldrb	r3, [r7, #15]
 8007066:	009b      	lsls	r3, r3, #2
 8007068:	3301      	adds	r3, #1
 800706a:	00db      	lsls	r3, r3, #3
 800706c:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8007070:	4618      	mov	r0, r3
 8007072:	f002 f849 	bl	8009108 <WIZCHIP_READ>
 8007076:	4603      	mov	r3, r0
 8007078:	2b00      	cmp	r3, #0
 800707a:	d1f3      	bne.n	8007064 <recvfrom+0x1e0>
   			// read peer's IP address, port number & packet length
    			sock_remained_size[sn] = head[0];
 800707c:	7d3a      	ldrb	r2, [r7, #20]
 800707e:	7bfb      	ldrb	r3, [r7, #15]
 8007080:	b291      	uxth	r1, r2
 8007082:	4a1e      	ldr	r2, [pc, #120]	; (80070fc <recvfrom+0x278>)
 8007084:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
   			sock_remained_size[sn] = (sock_remained_size[sn] <<8) + head[1] -2;
 8007088:	7bfb      	ldrb	r3, [r7, #15]
 800708a:	4a1c      	ldr	r2, [pc, #112]	; (80070fc <recvfrom+0x278>)
 800708c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007090:	021b      	lsls	r3, r3, #8
 8007092:	b29a      	uxth	r2, r3
 8007094:	7d7b      	ldrb	r3, [r7, #21]
 8007096:	b29b      	uxth	r3, r3
 8007098:	4413      	add	r3, r2
 800709a:	b29a      	uxth	r2, r3
 800709c:	7bfb      	ldrb	r3, [r7, #15]
 800709e:	3a02      	subs	r2, #2
 80070a0:	b291      	uxth	r1, r2
 80070a2:	4a16      	ldr	r2, [pc, #88]	; (80070fc <recvfrom+0x278>)
 80070a4:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
   			if(sock_remained_size[sn] & 0x01)
   				sock_remained_size[sn] = sock_remained_size[sn] + 1 - 4;
   			else
   				sock_remained_size[sn] -= 4;
			#endif
   			if(sock_remained_size[sn] > 1514) 
 80070a8:	7bfb      	ldrb	r3, [r7, #15]
 80070aa:	4a14      	ldr	r2, [pc, #80]	; (80070fc <recvfrom+0x278>)
 80070ac:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80070b0:	f240 52ea 	movw	r2, #1514	; 0x5ea
 80070b4:	4293      	cmp	r3, r2
 80070b6:	d906      	bls.n	80070c6 <recvfrom+0x242>
   			{
   			   close(sn);
 80070b8:	7bfb      	ldrb	r3, [r7, #15]
 80070ba:	4618      	mov	r0, r3
 80070bc:	f7ff fd3e 	bl	8006b3c <close>
   			   return SOCKFATAL_PACKLEN;
 80070c0:	f46f 737a 	mvn.w	r3, #1000	; 0x3e8
 80070c4:	e0c4      	b.n	8007250 <recvfrom+0x3cc>
   			}
   			sock_pack_info[sn] = PACK_FIRST;
 80070c6:	7bfb      	ldrb	r3, [r7, #15]
 80070c8:	4a0e      	ldr	r2, [pc, #56]	; (8007104 <recvfrom+0x280>)
 80070ca:	2180      	movs	r1, #128	; 0x80
 80070cc:	54d1      	strb	r1, [r2, r3]
   	   }
			if(len < sock_remained_size[sn]) pack_len = len;
 80070ce:	7bfb      	ldrb	r3, [r7, #15]
 80070d0:	4a0a      	ldr	r2, [pc, #40]	; (80070fc <recvfrom+0x278>)
 80070d2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80070d6:	89ba      	ldrh	r2, [r7, #12]
 80070d8:	429a      	cmp	r2, r3
 80070da:	d202      	bcs.n	80070e2 <recvfrom+0x25e>
 80070dc:	89bb      	ldrh	r3, [r7, #12]
 80070de:	83fb      	strh	r3, [r7, #30]
 80070e0:	e004      	b.n	80070ec <recvfrom+0x268>
			else pack_len = sock_remained_size[sn];
 80070e2:	7bfb      	ldrb	r3, [r7, #15]
 80070e4:	4a05      	ldr	r2, [pc, #20]	; (80070fc <recvfrom+0x278>)
 80070e6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80070ea:	83fb      	strh	r3, [r7, #30]
			wiz_recv_data(sn,buf,pack_len);
 80070ec:	8bfa      	ldrh	r2, [r7, #30]
 80070ee:	7bfb      	ldrb	r3, [r7, #15]
 80070f0:	68b9      	ldr	r1, [r7, #8]
 80070f2:	4618      	mov	r0, r3
 80070f4:	f002 fa54 	bl	80095a0 <wiz_recv_data>
		   break;
 80070f8:	e073      	b.n	80071e2 <recvfrom+0x35e>
 80070fa:	bf00      	nop
 80070fc:	20000fc0 	.word	0x20000fc0
 8007100:	20000fbc 	.word	0x20000fbc
 8007104:	20000fd0 	.word	0x20000fd0
   //#if ( _WIZCHIP_ < 5200 )
		case Sn_MR_IPRAW:
		   if(sock_remained_size[sn] == 0)
 8007108:	7bfb      	ldrb	r3, [r7, #15]
 800710a:	4a53      	ldr	r2, [pc, #332]	; (8007258 <recvfrom+0x3d4>)
 800710c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007110:	2b00      	cmp	r3, #0
 8007112:	d144      	bne.n	800719e <recvfrom+0x31a>
		   {
   			wiz_recv_data(sn, head, 6);
 8007114:	f107 0114 	add.w	r1, r7, #20
 8007118:	7bfb      	ldrb	r3, [r7, #15]
 800711a:	2206      	movs	r2, #6
 800711c:	4618      	mov	r0, r3
 800711e:	f002 fa3f 	bl	80095a0 <wiz_recv_data>
   			setSn_CR(sn,Sn_CR_RECV);
 8007122:	7bfb      	ldrb	r3, [r7, #15]
 8007124:	009b      	lsls	r3, r3, #2
 8007126:	3301      	adds	r3, #1
 8007128:	00db      	lsls	r3, r3, #3
 800712a:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800712e:	2140      	movs	r1, #64	; 0x40
 8007130:	4618      	mov	r0, r3
 8007132:	f002 f835 	bl	80091a0 <WIZCHIP_WRITE>
   			while(getSn_CR(sn));
 8007136:	bf00      	nop
 8007138:	7bfb      	ldrb	r3, [r7, #15]
 800713a:	009b      	lsls	r3, r3, #2
 800713c:	3301      	adds	r3, #1
 800713e:	00db      	lsls	r3, r3, #3
 8007140:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8007144:	4618      	mov	r0, r3
 8007146:	f001 ffdf 	bl	8009108 <WIZCHIP_READ>
 800714a:	4603      	mov	r3, r0
 800714c:	2b00      	cmp	r3, #0
 800714e:	d1f3      	bne.n	8007138 <recvfrom+0x2b4>
   			addr[0] = head[0];
 8007150:	7d3a      	ldrb	r2, [r7, #20]
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	701a      	strb	r2, [r3, #0]
   			addr[1] = head[1];
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	3301      	adds	r3, #1
 800715a:	7d7a      	ldrb	r2, [r7, #21]
 800715c:	701a      	strb	r2, [r3, #0]
   			addr[2] = head[2];
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	3302      	adds	r3, #2
 8007162:	7dba      	ldrb	r2, [r7, #22]
 8007164:	701a      	strb	r2, [r3, #0]
   			addr[3] = head[3];
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	3303      	adds	r3, #3
 800716a:	7dfa      	ldrb	r2, [r7, #23]
 800716c:	701a      	strb	r2, [r3, #0]
   			sock_remained_size[sn] = head[4];
 800716e:	7e3a      	ldrb	r2, [r7, #24]
 8007170:	7bfb      	ldrb	r3, [r7, #15]
 8007172:	b291      	uxth	r1, r2
 8007174:	4a38      	ldr	r2, [pc, #224]	; (8007258 <recvfrom+0x3d4>)
 8007176:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
   			//M20150401 : For Typing Error
   			//sock_remaiend_size[sn] = (sock_remained_size[sn] << 8) + head[5];
   			sock_remained_size[sn] = (sock_remained_size[sn] << 8) + head[5];
 800717a:	7bfb      	ldrb	r3, [r7, #15]
 800717c:	4a36      	ldr	r2, [pc, #216]	; (8007258 <recvfrom+0x3d4>)
 800717e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007182:	021b      	lsls	r3, r3, #8
 8007184:	b299      	uxth	r1, r3
 8007186:	7e7b      	ldrb	r3, [r7, #25]
 8007188:	b29a      	uxth	r2, r3
 800718a:	7bfb      	ldrb	r3, [r7, #15]
 800718c:	440a      	add	r2, r1
 800718e:	b291      	uxth	r1, r2
 8007190:	4a31      	ldr	r2, [pc, #196]	; (8007258 <recvfrom+0x3d4>)
 8007192:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
   			sock_pack_info[sn] = PACK_FIRST;
 8007196:	7bfb      	ldrb	r3, [r7, #15]
 8007198:	4a30      	ldr	r2, [pc, #192]	; (800725c <recvfrom+0x3d8>)
 800719a:	2180      	movs	r1, #128	; 0x80
 800719c:	54d1      	strb	r1, [r2, r3]
         }
			//
			// Need to packet length check
			//
			if(len < sock_remained_size[sn]) pack_len = len;
 800719e:	7bfb      	ldrb	r3, [r7, #15]
 80071a0:	4a2d      	ldr	r2, [pc, #180]	; (8007258 <recvfrom+0x3d4>)
 80071a2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80071a6:	89ba      	ldrh	r2, [r7, #12]
 80071a8:	429a      	cmp	r2, r3
 80071aa:	d202      	bcs.n	80071b2 <recvfrom+0x32e>
 80071ac:	89bb      	ldrh	r3, [r7, #12]
 80071ae:	83fb      	strh	r3, [r7, #30]
 80071b0:	e004      	b.n	80071bc <recvfrom+0x338>
			else pack_len = sock_remained_size[sn];
 80071b2:	7bfb      	ldrb	r3, [r7, #15]
 80071b4:	4a28      	ldr	r2, [pc, #160]	; (8007258 <recvfrom+0x3d4>)
 80071b6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80071ba:	83fb      	strh	r3, [r7, #30]
   		wiz_recv_data(sn, buf, pack_len); // data copy.
 80071bc:	8bfa      	ldrh	r2, [r7, #30]
 80071be:	7bfb      	ldrb	r3, [r7, #15]
 80071c0:	68b9      	ldr	r1, [r7, #8]
 80071c2:	4618      	mov	r0, r3
 80071c4:	f002 f9ec 	bl	80095a0 <wiz_recv_data>
			break;
 80071c8:	e00b      	b.n	80071e2 <recvfrom+0x35e>
   //#endif
      default:
         wiz_recv_ignore(sn, pack_len); // data copy.
 80071ca:	8bfa      	ldrh	r2, [r7, #30]
 80071cc:	7bfb      	ldrb	r3, [r7, #15]
 80071ce:	4611      	mov	r1, r2
 80071d0:	4618      	mov	r0, r3
 80071d2:	f002 fa41 	bl	8009658 <wiz_recv_ignore>
         sock_remained_size[sn] = pack_len;
 80071d6:	7bfb      	ldrb	r3, [r7, #15]
 80071d8:	491f      	ldr	r1, [pc, #124]	; (8007258 <recvfrom+0x3d4>)
 80071da:	8bfa      	ldrh	r2, [r7, #30]
 80071dc:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
         break;
 80071e0:	bf00      	nop
   }
	setSn_CR(sn,Sn_CR_RECV);
 80071e2:	7bfb      	ldrb	r3, [r7, #15]
 80071e4:	009b      	lsls	r3, r3, #2
 80071e6:	3301      	adds	r3, #1
 80071e8:	00db      	lsls	r3, r3, #3
 80071ea:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80071ee:	2140      	movs	r1, #64	; 0x40
 80071f0:	4618      	mov	r0, r3
 80071f2:	f001 ffd5 	bl	80091a0 <WIZCHIP_WRITE>
	/* wait to process the command... */
	while(getSn_CR(sn)) ;
 80071f6:	bf00      	nop
 80071f8:	7bfb      	ldrb	r3, [r7, #15]
 80071fa:	009b      	lsls	r3, r3, #2
 80071fc:	3301      	adds	r3, #1
 80071fe:	00db      	lsls	r3, r3, #3
 8007200:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8007204:	4618      	mov	r0, r3
 8007206:	f001 ff7f 	bl	8009108 <WIZCHIP_READ>
 800720a:	4603      	mov	r3, r0
 800720c:	2b00      	cmp	r3, #0
 800720e:	d1f3      	bne.n	80071f8 <recvfrom+0x374>
	sock_remained_size[sn] -= pack_len;
 8007210:	7bfb      	ldrb	r3, [r7, #15]
 8007212:	4a11      	ldr	r2, [pc, #68]	; (8007258 <recvfrom+0x3d4>)
 8007214:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8007218:	7bfb      	ldrb	r3, [r7, #15]
 800721a:	8bfa      	ldrh	r2, [r7, #30]
 800721c:	1a8a      	subs	r2, r1, r2
 800721e:	b291      	uxth	r1, r2
 8007220:	4a0d      	ldr	r2, [pc, #52]	; (8007258 <recvfrom+0x3d4>)
 8007222:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	//M20150601 : 
	//if(sock_remained_size[sn] != 0) sock_pack_info[sn] |= 0x01;
	if(sock_remained_size[sn] != 0)
 8007226:	7bfb      	ldrb	r3, [r7, #15]
 8007228:	4a0b      	ldr	r2, [pc, #44]	; (8007258 <recvfrom+0x3d4>)
 800722a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800722e:	2b00      	cmp	r3, #0
 8007230:	d009      	beq.n	8007246 <recvfrom+0x3c2>
	{
	   sock_pack_info[sn] |= PACK_REMAINED;
 8007232:	7bfb      	ldrb	r3, [r7, #15]
 8007234:	4a09      	ldr	r2, [pc, #36]	; (800725c <recvfrom+0x3d8>)
 8007236:	5cd2      	ldrb	r2, [r2, r3]
 8007238:	7bfb      	ldrb	r3, [r7, #15]
 800723a:	f042 0201 	orr.w	r2, r2, #1
 800723e:	b2d1      	uxtb	r1, r2
 8007240:	4a06      	ldr	r2, [pc, #24]	; (800725c <recvfrom+0x3d8>)
 8007242:	54d1      	strb	r1, [r2, r3]
 8007244:	e003      	b.n	800724e <recvfrom+0x3ca>
   #if _WIZCHIP_ == 5300	   
	   if(pack_len & 0x01) sock_pack_info[sn] |= PACK_FIFOBYTE;
   #endif	      
	}
	else sock_pack_info[sn] = PACK_COMPLETED;
 8007246:	7bfb      	ldrb	r3, [r7, #15]
 8007248:	4a04      	ldr	r2, [pc, #16]	; (800725c <recvfrom+0x3d8>)
 800724a:	2100      	movs	r1, #0
 800724c:	54d1      	strb	r1, [r2, r3]
   pack_len = len;
#endif
   //
   //M20150409 : Explicit Type Casting
   //return pack_len;
   return (int32_t)pack_len;
 800724e:	8bfb      	ldrh	r3, [r7, #30]
}
 8007250:	4618      	mov	r0, r3
 8007252:	3720      	adds	r7, #32
 8007254:	46bd      	mov	sp, r7
 8007256:	bd80      	pop	{r7, pc}
 8007258:	20000fc0 	.word	0x20000fc0
 800725c:	20000fd0 	.word	0x20000fd0

08007260 <spline>:
 *                double output[29]
 * Return Type  : void
 */
void spline(const float x_data[], const int x_size[2], const float y[10],
            const float xx[29], float output[29])
{
 8007260:	b5b0      	push	{r4, r5, r7, lr}
 8007262:	f5ad 5d05 	sub.w	sp, sp, #8512	; 0x2140
 8007266:	b08a      	sub	sp, #40	; 0x28
 8007268:	af00      	add	r7, sp, #0
 800726a:	f507 74b4 	add.w	r4, r7, #360	; 0x168
 800726e:	f5a4 74ae 	sub.w	r4, r4, #348	; 0x15c
 8007272:	6020      	str	r0, [r4, #0]
 8007274:	f507 70b4 	add.w	r0, r7, #360	; 0x168
 8007278:	f5a0 70b0 	sub.w	r0, r0, #352	; 0x160
 800727c:	6001      	str	r1, [r0, #0]
 800727e:	f507 71b4 	add.w	r1, r7, #360	; 0x168
 8007282:	f5a1 71b2 	sub.w	r1, r1, #356	; 0x164
 8007286:	600a      	str	r2, [r1, #0]
 8007288:	f507 72b4 	add.w	r2, r7, #360	; 0x168
 800728c:	f5a2 72b4 	sub.w	r2, r2, #360	; 0x168
 8007290:	6013      	str	r3, [r2, #0]
  int md_size_idx_1;
  int nxm1;
  int pp_coefs_size_idx_1;
  int yoffset;
  boolean_T has_endslopes;
  has_endslopes = (x_size[1] + 2 == 10);
 8007292:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8007296:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	3304      	adds	r3, #4
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	2b08      	cmp	r3, #8
 80072a2:	bf0c      	ite	eq
 80072a4:	2301      	moveq	r3, #1
 80072a6:	2300      	movne	r3, #0
 80072a8:	b2db      	uxtb	r3, r3
 80072aa:	f507 5204 	add.w	r2, r7, #8448	; 0x2100
 80072ae:	f102 023e 	add.w	r2, r2, #62	; 0x3e
 80072b2:	7013      	strb	r3, [r2, #0]
  if ((x_size[1] <= 2) || ((x_size[1] <= 3) && (!has_endslopes))) {
 80072b4:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 80072b8:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	3304      	adds	r3, #4
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	2b02      	cmp	r3, #2
 80072c4:	dd11      	ble.n	80072ea <spline+0x8a>
 80072c6:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 80072ca:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	3304      	adds	r3, #4
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	2b03      	cmp	r3, #3
 80072d6:	f300 814b 	bgt.w	8007570 <spline+0x310>
 80072da:	f507 5304 	add.w	r3, r7, #8448	; 0x2100
 80072de:	f103 033e 	add.w	r3, r3, #62	; 0x3e
 80072e2:	781b      	ldrb	r3, [r3, #0]
 80072e4:	2b00      	cmp	r3, #0
 80072e6:	f040 8143 	bne.w	8007570 <spline+0x310>
    if (x_size[1] <= 2) {
 80072ea:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 80072ee:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	3304      	adds	r3, #4
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	2b02      	cmp	r3, #2
 80072fa:	dc6e      	bgt.n	80073da <spline+0x17a>
      pp_coefs_size_idx_1 = 2;
 80072fc:	2302      	movs	r3, #2
 80072fe:	f507 5205 	add.w	r2, r7, #8512	; 0x2140
 8007302:	f102 020c 	add.w	r2, r2, #12
 8007306:	6013      	str	r3, [r2, #0]
      pp_coefs_data[0] = (y[1] - y[0]) / (x_data[1] - x_data[0]);
 8007308:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 800730c:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	3304      	adds	r3, #4
 8007314:	ed93 7a00 	vldr	s14, [r3]
 8007318:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 800731c:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	edd3 7a00 	vldr	s15, [r3]
 8007326:	ee77 6a67 	vsub.f32	s13, s14, s15
 800732a:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 800732e:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	3304      	adds	r3, #4
 8007336:	ed93 7a00 	vldr	s14, [r3]
 800733a:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 800733e:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	edd3 7a00 	vldr	s15, [r3]
 8007348:	ee37 7a67 	vsub.f32	s14, s14, s15
 800734c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007350:	f507 538b 	add.w	r3, r7, #4448	; 0x1160
 8007354:	f103 0308 	add.w	r3, r3, #8
 8007358:	ed43 7a3a 	vstr	s15, [r3, #-232]	; 0xffffff18
      pp_coefs_data[1] = y[0];
 800735c:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8007360:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	f507 528b 	add.w	r2, r7, #4448	; 0x1160
 800736c:	f102 0208 	add.w	r2, r2, #8
 8007370:	f842 3ce4 	str.w	r3, [r2, #-228]
      md_size_idx_1 = x_size[1];
 8007374:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8007378:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	685b      	ldr	r3, [r3, #4]
 8007380:	f507 5205 	add.w	r2, r7, #8512	; 0x2140
 8007384:	f102 0214 	add.w	r2, r2, #20
 8007388:	6013      	str	r3, [r2, #0]
      high_i = x_size[1];
 800738a:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 800738e:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	685b      	ldr	r3, [r3, #4]
 8007396:	f507 5205 	add.w	r2, r7, #8512	; 0x2140
 800739a:	f102 0220 	add.w	r2, r2, #32
 800739e:	6013      	str	r3, [r2, #0]
      if (high_i - 1 >= 0) {
 80073a0:	f507 5305 	add.w	r3, r7, #8512	; 0x2140
 80073a4:	f103 0320 	add.w	r3, r3, #32
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	2b00      	cmp	r3, #0
 80073ac:	f341 8014 	ble.w	80083d8 <spline+0x1178>
        memcpy(&md_data[0], &x_data[0], (unsigned int)high_i * sizeof(double));
 80073b0:	f507 5305 	add.w	r3, r7, #8512	; 0x2140
 80073b4:	f103 0320 	add.w	r3, r3, #32
 80073b8:	681b      	ldr	r3, [r3, #0]
 80073ba:	00da      	lsls	r2, r3, #3
 80073bc:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 80073c0:	f5a3 71ae 	sub.w	r1, r3, #348	; 0x15c
 80073c4:	f507 5389 	add.w	r3, r7, #4384	; 0x1120
 80073c8:	f103 0308 	add.w	r3, r3, #8
 80073cc:	3b18      	subs	r3, #24
 80073ce:	6809      	ldr	r1, [r1, #0]
 80073d0:	4618      	mov	r0, r3
 80073d2:	f00a f995 	bl	8011700 <memcpy>
    if (x_size[1] <= 2) {
 80073d6:	f000 bfff 	b.w	80083d8 <spline+0x1178>
      }
    } else {
      pp_coefs_size_idx_1 = 3;
 80073da:	2303      	movs	r3, #3
 80073dc:	f507 5205 	add.w	r2, r7, #8512	; 0x2140
 80073e0:	f102 020c 	add.w	r2, r2, #12
 80073e4:	6013      	str	r3, [r2, #0]
      dzdxdx = x_data[1] - x_data[0];
 80073e6:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 80073ea:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	3304      	adds	r3, #4
 80073f2:	ed93 7a00 	vldr	s14, [r3]
 80073f6:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 80073fa:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	edd3 7a00 	vldr	s15, [r3]
 8007404:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007408:	f507 5304 	add.w	r3, r7, #8448	; 0x2100
 800740c:	f103 0338 	add.w	r3, r3, #56	; 0x38
 8007410:	edc3 7a00 	vstr	s15, [r3]
      r = (y[1] - y[0]) / dzdxdx;
 8007414:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8007418:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	3304      	adds	r3, #4
 8007420:	ed93 7a00 	vldr	s14, [r3]
 8007424:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8007428:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	edd3 7a00 	vldr	s15, [r3]
 8007432:	ee77 6a67 	vsub.f32	s13, s14, s15
 8007436:	f507 5304 	add.w	r3, r7, #8448	; 0x2100
 800743a:	f103 0338 	add.w	r3, r3, #56	; 0x38
 800743e:	ed93 7a00 	vldr	s14, [r3]
 8007442:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007446:	f507 5305 	add.w	r3, r7, #8512	; 0x2140
 800744a:	f103 0324 	add.w	r3, r3, #36	; 0x24
 800744e:	edc3 7a00 	vstr	s15, [r3]
      pp_coefs_data[0] = ((y[2] - y[1]) / (x_data[2] - x_data[1]) - r) /
 8007452:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8007456:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	3308      	adds	r3, #8
 800745e:	ed93 7a00 	vldr	s14, [r3]
 8007462:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8007466:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	3304      	adds	r3, #4
 800746e:	edd3 7a00 	vldr	s15, [r3]
 8007472:	ee77 6a67 	vsub.f32	s13, s14, s15
 8007476:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 800747a:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	3308      	adds	r3, #8
 8007482:	ed93 7a00 	vldr	s14, [r3]
 8007486:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 800748a:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	3304      	adds	r3, #4
 8007492:	edd3 7a00 	vldr	s15, [r3]
 8007496:	ee77 7a67 	vsub.f32	s15, s14, s15
 800749a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800749e:	f507 5305 	add.w	r3, r7, #8512	; 0x2140
 80074a2:	f103 0324 	add.w	r3, r3, #36	; 0x24
 80074a6:	edd3 7a00 	vldr	s15, [r3]
 80074aa:	ee77 6a67 	vsub.f32	s13, s14, s15
                         (x_data[2] - x_data[0]);
 80074ae:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 80074b2:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	3308      	adds	r3, #8
 80074ba:	ed93 7a00 	vldr	s14, [r3]
 80074be:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 80074c2:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	edd3 7a00 	vldr	s15, [r3]
 80074cc:	ee37 7a67 	vsub.f32	s14, s14, s15
      pp_coefs_data[0] = ((y[2] - y[1]) / (x_data[2] - x_data[1]) - r) /
 80074d0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80074d4:	f507 538b 	add.w	r3, r7, #4448	; 0x1160
 80074d8:	f103 0308 	add.w	r3, r3, #8
 80074dc:	ed43 7a3a 	vstr	s15, [r3, #-232]	; 0xffffff18
      pp_coefs_data[1] = r - pp_coefs_data[0] * dzdxdx;
 80074e0:	f507 538b 	add.w	r3, r7, #4448	; 0x1160
 80074e4:	f103 0308 	add.w	r3, r3, #8
 80074e8:	ed13 7a3a 	vldr	s14, [r3, #-232]	; 0xffffff18
 80074ec:	f507 5304 	add.w	r3, r7, #8448	; 0x2100
 80074f0:	f103 0338 	add.w	r3, r3, #56	; 0x38
 80074f4:	edd3 7a00 	vldr	s15, [r3]
 80074f8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80074fc:	f507 5305 	add.w	r3, r7, #8512	; 0x2140
 8007500:	f103 0324 	add.w	r3, r3, #36	; 0x24
 8007504:	ed93 7a00 	vldr	s14, [r3]
 8007508:	ee77 7a67 	vsub.f32	s15, s14, s15
 800750c:	f507 538b 	add.w	r3, r7, #4448	; 0x1160
 8007510:	f103 0308 	add.w	r3, r3, #8
 8007514:	ed43 7a39 	vstr	s15, [r3, #-228]	; 0xffffff1c
      pp_coefs_data[2] = y[0];
 8007518:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 800751c:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	f507 528b 	add.w	r2, r7, #4448	; 0x1160
 8007528:	f102 0208 	add.w	r2, r2, #8
 800752c:	f842 3ce0 	str.w	r3, [r2, #-224]
      md_size_idx_1 = 2;
 8007530:	2302      	movs	r3, #2
 8007532:	f507 5205 	add.w	r2, r7, #8512	; 0x2140
 8007536:	f102 0214 	add.w	r2, r2, #20
 800753a:	6013      	str	r3, [r2, #0]
      md_data[0] = x_data[0];
 800753c:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8007540:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	f507 528b 	add.w	r2, r7, #4448	; 0x1160
 800754c:	f102 0208 	add.w	r2, r2, #8
 8007550:	f842 3c58 	str.w	r3, [r2, #-88]
      md_data[1] = x_data[2];
 8007554:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8007558:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	689b      	ldr	r3, [r3, #8]
 8007560:	f507 528b 	add.w	r2, r7, #4448	; 0x1160
 8007564:	f102 0208 	add.w	r2, r2, #8
 8007568:	f842 3c54 	str.w	r3, [r2, #-84]
    if (x_size[1] <= 2) {
 800756c:	f000 bf34 	b.w	80083d8 <spline+0x1178>
	  float s_data[10];
	  float dvdf_data[9];
	  float d31;
	  float dnnm2;
    signed char szs_idx_1;
    nxm1 = x_size[1] - 1;
 8007570:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8007574:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	3304      	adds	r3, #4
 800757c:	681b      	ldr	r3, [r3, #0]
 800757e:	3b01      	subs	r3, #1
 8007580:	f507 5205 	add.w	r2, r7, #8512	; 0x2140
 8007584:	f102 0210 	add.w	r2, r2, #16
 8007588:	6013      	str	r3, [r2, #0]
    if (has_endslopes) {
 800758a:	f507 5304 	add.w	r3, r7, #8448	; 0x2100
 800758e:	f103 033e 	add.w	r3, r3, #62	; 0x3e
 8007592:	781b      	ldrb	r3, [r3, #0]
 8007594:	2b00      	cmp	r3, #0
 8007596:	d00c      	beq.n	80075b2 <spline+0x352>
      szs_idx_1 = 8;
 8007598:	2308      	movs	r3, #8
 800759a:	f507 5204 	add.w	r2, r7, #8448	; 0x2100
 800759e:	f102 023f 	add.w	r2, r2, #63	; 0x3f
 80075a2:	7013      	strb	r3, [r2, #0]
      yoffset = 1;
 80075a4:	2301      	movs	r3, #1
 80075a6:	f507 5205 	add.w	r2, r7, #8512	; 0x2140
 80075aa:	f102 0208 	add.w	r2, r2, #8
 80075ae:	6013      	str	r3, [r2, #0]
 80075b0:	e00b      	b.n	80075ca <spline+0x36a>
    } else {
      szs_idx_1 = 10;
 80075b2:	230a      	movs	r3, #10
 80075b4:	f507 5204 	add.w	r2, r7, #8448	; 0x2100
 80075b8:	f102 023f 	add.w	r2, r2, #63	; 0x3f
 80075bc:	7013      	strb	r3, [r2, #0]
      yoffset = 0;
 80075be:	2300      	movs	r3, #0
 80075c0:	f507 5205 	add.w	r2, r7, #8512	; 0x2140
 80075c4:	f102 0208 	add.w	r2, r2, #8
 80075c8:	6013      	str	r3, [r2, #0]
    }
    for (low_ip1 = 0; low_ip1 < nxm1; low_ip1++) {
 80075ca:	2300      	movs	r3, #0
 80075cc:	f507 5205 	add.w	r2, r7, #8512	; 0x2140
 80075d0:	f102 0218 	add.w	r2, r2, #24
 80075d4:	6013      	str	r3, [r2, #0]
 80075d6:	e084      	b.n	80076e2 <spline+0x482>
      dzdxdx = x_data[low_ip1 + 1] - x_data[low_ip1];
 80075d8:	f507 5305 	add.w	r3, r7, #8512	; 0x2140
 80075dc:	f103 0318 	add.w	r3, r3, #24
 80075e0:	681b      	ldr	r3, [r3, #0]
 80075e2:	3301      	adds	r3, #1
 80075e4:	009b      	lsls	r3, r3, #2
 80075e6:	f507 72b4 	add.w	r2, r7, #360	; 0x168
 80075ea:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 80075ee:	6812      	ldr	r2, [r2, #0]
 80075f0:	4413      	add	r3, r2
 80075f2:	ed93 7a00 	vldr	s14, [r3]
 80075f6:	f507 5305 	add.w	r3, r7, #8512	; 0x2140
 80075fa:	f103 0318 	add.w	r3, r3, #24
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	009b      	lsls	r3, r3, #2
 8007602:	f507 72b4 	add.w	r2, r7, #360	; 0x168
 8007606:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 800760a:	6812      	ldr	r2, [r2, #0]
 800760c:	4413      	add	r3, r2
 800760e:	edd3 7a00 	vldr	s15, [r3]
 8007612:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007616:	f507 5304 	add.w	r3, r7, #8448	; 0x2100
 800761a:	f103 0338 	add.w	r3, r3, #56	; 0x38
 800761e:	edc3 7a00 	vstr	s15, [r3]
      dx_data[low_ip1] = dzdxdx;
 8007622:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8007626:	f5a3 7286 	sub.w	r2, r3, #268	; 0x10c
 800762a:	f507 5305 	add.w	r3, r7, #8512	; 0x2140
 800762e:	f103 0318 	add.w	r3, r3, #24
 8007632:	681b      	ldr	r3, [r3, #0]
 8007634:	009b      	lsls	r3, r3, #2
 8007636:	4413      	add	r3, r2
 8007638:	f507 5204 	add.w	r2, r7, #8448	; 0x2100
 800763c:	f102 0238 	add.w	r2, r2, #56	; 0x38
 8007640:	6812      	ldr	r2, [r2, #0]
 8007642:	601a      	str	r2, [r3, #0]
      high_i = yoffset + low_ip1;
 8007644:	f507 5305 	add.w	r3, r7, #8512	; 0x2140
 8007648:	f103 0308 	add.w	r3, r3, #8
 800764c:	681a      	ldr	r2, [r3, #0]
 800764e:	f507 5305 	add.w	r3, r7, #8512	; 0x2140
 8007652:	f103 0318 	add.w	r3, r3, #24
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	4413      	add	r3, r2
 800765a:	f507 5205 	add.w	r2, r7, #8512	; 0x2140
 800765e:	f102 0220 	add.w	r2, r2, #32
 8007662:	6013      	str	r3, [r2, #0]
      dvdf_data[low_ip1] = (y[high_i + 1] - y[high_i]) / dzdxdx;
 8007664:	f507 5305 	add.w	r3, r7, #8512	; 0x2140
 8007668:	f103 0320 	add.w	r3, r3, #32
 800766c:	681b      	ldr	r3, [r3, #0]
 800766e:	3301      	adds	r3, #1
 8007670:	009b      	lsls	r3, r3, #2
 8007672:	f507 72b4 	add.w	r2, r7, #360	; 0x168
 8007676:	f5a2 72b2 	sub.w	r2, r2, #356	; 0x164
 800767a:	6812      	ldr	r2, [r2, #0]
 800767c:	4413      	add	r3, r2
 800767e:	ed93 7a00 	vldr	s14, [r3]
 8007682:	f507 5305 	add.w	r3, r7, #8512	; 0x2140
 8007686:	f103 0320 	add.w	r3, r3, #32
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	009b      	lsls	r3, r3, #2
 800768e:	f507 72b4 	add.w	r2, r7, #360	; 0x168
 8007692:	f5a2 72b2 	sub.w	r2, r2, #356	; 0x164
 8007696:	6812      	ldr	r2, [r2, #0]
 8007698:	4413      	add	r3, r2
 800769a:	edd3 7a00 	vldr	s15, [r3]
 800769e:	ee77 6a67 	vsub.f32	s13, s14, s15
 80076a2:	f507 5304 	add.w	r3, r7, #8448	; 0x2100
 80076a6:	f103 0338 	add.w	r3, r3, #56	; 0x38
 80076aa:	ed93 7a00 	vldr	s14, [r3]
 80076ae:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80076b2:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 80076b6:	f5a3 72ac 	sub.w	r2, r3, #344	; 0x158
 80076ba:	f507 5305 	add.w	r3, r7, #8512	; 0x2140
 80076be:	f103 0318 	add.w	r3, r3, #24
 80076c2:	681b      	ldr	r3, [r3, #0]
 80076c4:	009b      	lsls	r3, r3, #2
 80076c6:	4413      	add	r3, r2
 80076c8:	edc3 7a00 	vstr	s15, [r3]
    for (low_ip1 = 0; low_ip1 < nxm1; low_ip1++) {
 80076cc:	f507 5305 	add.w	r3, r7, #8512	; 0x2140
 80076d0:	f103 0318 	add.w	r3, r3, #24
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	3301      	adds	r3, #1
 80076d8:	f507 5205 	add.w	r2, r7, #8512	; 0x2140
 80076dc:	f102 0218 	add.w	r2, r2, #24
 80076e0:	6013      	str	r3, [r2, #0]
 80076e2:	f507 5305 	add.w	r3, r7, #8512	; 0x2140
 80076e6:	f103 0318 	add.w	r3, r3, #24
 80076ea:	681a      	ldr	r2, [r3, #0]
 80076ec:	f507 5305 	add.w	r3, r7, #8512	; 0x2140
 80076f0:	f103 0310 	add.w	r3, r3, #16
 80076f4:	681b      	ldr	r3, [r3, #0]
 80076f6:	429a      	cmp	r2, r3
 80076f8:	f6ff af6e 	blt.w	80075d8 <spline+0x378>
    }
    for (low_ip1 = 2; low_ip1 <= nxm1; low_ip1++) {
 80076fc:	2302      	movs	r3, #2
 80076fe:	f507 5205 	add.w	r2, r7, #8512	; 0x2140
 8007702:	f102 0218 	add.w	r2, r2, #24
 8007706:	6013      	str	r3, [r2, #0]
 8007708:	e05a      	b.n	80077c0 <spline+0x560>
      s_data[low_ip1 - 1] =
          3.0 * (dx_data[low_ip1 - 1] * dvdf_data[low_ip1 - 2] +
 800770a:	f507 5305 	add.w	r3, r7, #8512	; 0x2140
 800770e:	f103 0318 	add.w	r3, r3, #24
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	3b01      	subs	r3, #1
 8007716:	f507 72b4 	add.w	r2, r7, #360	; 0x168
 800771a:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 800771e:	009b      	lsls	r3, r3, #2
 8007720:	4413      	add	r3, r2
 8007722:	ed93 7a00 	vldr	s14, [r3]
 8007726:	f507 5305 	add.w	r3, r7, #8512	; 0x2140
 800772a:	f103 0318 	add.w	r3, r3, #24
 800772e:	681b      	ldr	r3, [r3, #0]
 8007730:	3b02      	subs	r3, #2
 8007732:	f507 72b4 	add.w	r2, r7, #360	; 0x168
 8007736:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 800773a:	009b      	lsls	r3, r3, #2
 800773c:	4413      	add	r3, r2
 800773e:	edd3 7a00 	vldr	s15, [r3]
 8007742:	ee27 7a27 	vmul.f32	s14, s14, s15
                 dx_data[low_ip1 - 2] * dvdf_data[low_ip1 - 1]);
 8007746:	f507 5305 	add.w	r3, r7, #8512	; 0x2140
 800774a:	f103 0318 	add.w	r3, r3, #24
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	3b02      	subs	r3, #2
 8007752:	f507 72b4 	add.w	r2, r7, #360	; 0x168
 8007756:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 800775a:	009b      	lsls	r3, r3, #2
 800775c:	4413      	add	r3, r2
 800775e:	edd3 6a00 	vldr	s13, [r3]
 8007762:	f507 5305 	add.w	r3, r7, #8512	; 0x2140
 8007766:	f103 0318 	add.w	r3, r3, #24
 800776a:	681b      	ldr	r3, [r3, #0]
 800776c:	3b01      	subs	r3, #1
 800776e:	f507 72b4 	add.w	r2, r7, #360	; 0x168
 8007772:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8007776:	009b      	lsls	r3, r3, #2
 8007778:	4413      	add	r3, r2
 800777a:	edd3 7a00 	vldr	s15, [r3]
 800777e:	ee66 7aa7 	vmul.f32	s15, s13, s15
          3.0 * (dx_data[low_ip1 - 1] * dvdf_data[low_ip1 - 2] +
 8007782:	ee77 7a27 	vadd.f32	s15, s14, s15
      s_data[low_ip1 - 1] =
 8007786:	f507 5305 	add.w	r3, r7, #8512	; 0x2140
 800778a:	f103 0318 	add.w	r3, r3, #24
 800778e:	681b      	ldr	r3, [r3, #0]
 8007790:	3b01      	subs	r3, #1
          3.0 * (dx_data[low_ip1 - 1] * dvdf_data[low_ip1 - 2] +
 8007792:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 8007796:	ee67 7a87 	vmul.f32	s15, s15, s14
      s_data[low_ip1 - 1] =
 800779a:	f507 72b4 	add.w	r2, r7, #360	; 0x168
 800779e:	f5a2 729a 	sub.w	r2, r2, #308	; 0x134
 80077a2:	009b      	lsls	r3, r3, #2
 80077a4:	4413      	add	r3, r2
 80077a6:	edc3 7a00 	vstr	s15, [r3]
    for (low_ip1 = 2; low_ip1 <= nxm1; low_ip1++) {
 80077aa:	f507 5305 	add.w	r3, r7, #8512	; 0x2140
 80077ae:	f103 0318 	add.w	r3, r3, #24
 80077b2:	681b      	ldr	r3, [r3, #0]
 80077b4:	3301      	adds	r3, #1
 80077b6:	f507 5205 	add.w	r2, r7, #8512	; 0x2140
 80077ba:	f102 0218 	add.w	r2, r2, #24
 80077be:	6013      	str	r3, [r2, #0]
 80077c0:	f507 5305 	add.w	r3, r7, #8512	; 0x2140
 80077c4:	f103 0318 	add.w	r3, r3, #24
 80077c8:	681a      	ldr	r2, [r3, #0]
 80077ca:	f507 5305 	add.w	r3, r7, #8512	; 0x2140
 80077ce:	f103 0310 	add.w	r3, r3, #16
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	429a      	cmp	r2, r3
 80077d6:	dd98      	ble.n	800770a <spline+0x4aa>
    }
    if (has_endslopes) {
 80077d8:	f507 5304 	add.w	r3, r7, #8448	; 0x2100
 80077dc:	f103 033e 	add.w	r3, r3, #62	; 0x3e
 80077e0:	781b      	ldrb	r3, [r3, #0]
 80077e2:	2b00      	cmp	r3, #0
 80077e4:	d054      	beq.n	8007890 <spline+0x630>
      d31 = 0.0;
 80077e6:	f04f 0300 	mov.w	r3, #0
 80077ea:	f507 5205 	add.w	r2, r7, #8512	; 0x2140
 80077ee:	f102 0204 	add.w	r2, r2, #4
 80077f2:	6013      	str	r3, [r2, #0]
      dnnm2 = 0.0;
 80077f4:	f04f 0300 	mov.w	r3, #0
 80077f8:	f507 5205 	add.w	r2, r7, #8512	; 0x2140
 80077fc:	6013      	str	r3, [r2, #0]
      s_data[0] = y[0] * dx_data[1];
 80077fe:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8007802:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8007806:	681b      	ldr	r3, [r3, #0]
 8007808:	ed93 7a00 	vldr	s14, [r3]
 800780c:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8007810:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8007814:	edd3 7a01 	vldr	s15, [r3, #4]
 8007818:	ee67 7a27 	vmul.f32	s15, s14, s15
 800781c:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8007820:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8007824:	edc3 7a00 	vstr	s15, [r3]
      s_data[x_size[1] - 1] = dx_data[x_size[1] - 3] * y[x_size[1] + 1];
 8007828:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 800782c:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8007830:	681b      	ldr	r3, [r3, #0]
 8007832:	3304      	adds	r3, #4
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	3b03      	subs	r3, #3
 8007838:	f507 72b4 	add.w	r2, r7, #360	; 0x168
 800783c:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 8007840:	009b      	lsls	r3, r3, #2
 8007842:	4413      	add	r3, r2
 8007844:	ed93 7a00 	vldr	s14, [r3]
 8007848:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 800784c:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8007850:	681b      	ldr	r3, [r3, #0]
 8007852:	3304      	adds	r3, #4
 8007854:	681b      	ldr	r3, [r3, #0]
 8007856:	3301      	adds	r3, #1
 8007858:	009b      	lsls	r3, r3, #2
 800785a:	f507 72b4 	add.w	r2, r7, #360	; 0x168
 800785e:	f5a2 72b2 	sub.w	r2, r2, #356	; 0x164
 8007862:	6812      	ldr	r2, [r2, #0]
 8007864:	4413      	add	r3, r2
 8007866:	edd3 7a00 	vldr	s15, [r3]
 800786a:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 800786e:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8007872:	681b      	ldr	r3, [r3, #0]
 8007874:	3304      	adds	r3, #4
 8007876:	681b      	ldr	r3, [r3, #0]
 8007878:	3b01      	subs	r3, #1
 800787a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800787e:	f507 72b4 	add.w	r2, r7, #360	; 0x168
 8007882:	f5a2 729a 	sub.w	r2, r2, #308	; 0x134
 8007886:	009b      	lsls	r3, r3, #2
 8007888:	4413      	add	r3, r2
 800788a:	edc3 7a00 	vstr	s15, [r3]
 800788e:	e173      	b.n	8007b78 <spline+0x918>
    } else {
      d31 = x_data[2] - x_data[0];
 8007890:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8007894:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 8007898:	681b      	ldr	r3, [r3, #0]
 800789a:	3308      	adds	r3, #8
 800789c:	ed93 7a00 	vldr	s14, [r3]
 80078a0:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 80078a4:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 80078a8:	681b      	ldr	r3, [r3, #0]
 80078aa:	edd3 7a00 	vldr	s15, [r3]
 80078ae:	ee77 7a67 	vsub.f32	s15, s14, s15
 80078b2:	f507 5305 	add.w	r3, r7, #8512	; 0x2140
 80078b6:	f103 0304 	add.w	r3, r3, #4
 80078ba:	edc3 7a00 	vstr	s15, [r3]
      dnnm2 = x_data[x_size[1] - 1] - x_data[x_size[1] - 3];
 80078be:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 80078c2:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 80078c6:	681b      	ldr	r3, [r3, #0]
 80078c8:	3304      	adds	r3, #4
 80078ca:	681b      	ldr	r3, [r3, #0]
 80078cc:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80078d0:	3b01      	subs	r3, #1
 80078d2:	009b      	lsls	r3, r3, #2
 80078d4:	f507 72b4 	add.w	r2, r7, #360	; 0x168
 80078d8:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 80078dc:	6812      	ldr	r2, [r2, #0]
 80078de:	4413      	add	r3, r2
 80078e0:	ed93 7a00 	vldr	s14, [r3]
 80078e4:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 80078e8:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 80078ec:	681b      	ldr	r3, [r3, #0]
 80078ee:	3304      	adds	r3, #4
 80078f0:	681b      	ldr	r3, [r3, #0]
 80078f2:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80078f6:	3b03      	subs	r3, #3
 80078f8:	009b      	lsls	r3, r3, #2
 80078fa:	f507 72b4 	add.w	r2, r7, #360	; 0x168
 80078fe:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8007902:	6812      	ldr	r2, [r2, #0]
 8007904:	4413      	add	r3, r2
 8007906:	edd3 7a00 	vldr	s15, [r3]
 800790a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800790e:	f507 5305 	add.w	r3, r7, #8512	; 0x2140
 8007912:	edc3 7a00 	vstr	s15, [r3]
      s_data[0] = ((dx_data[0] + 2.0 * d31) * dx_data[1] * dvdf_data[0] +
 8007916:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 800791a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800791e:	681b      	ldr	r3, [r3, #0]
 8007920:	4618      	mov	r0, r3
 8007922:	f7f8 fe39 	bl	8000598 <__aeabi_f2d>
 8007926:	4604      	mov	r4, r0
 8007928:	460d      	mov	r5, r1
 800792a:	f507 5305 	add.w	r3, r7, #8512	; 0x2140
 800792e:	f103 0304 	add.w	r3, r3, #4
 8007932:	6818      	ldr	r0, [r3, #0]
 8007934:	f7f8 fe30 	bl	8000598 <__aeabi_f2d>
 8007938:	4602      	mov	r2, r0
 800793a:	460b      	mov	r3, r1
 800793c:	f7f8 fcce 	bl	80002dc <__adddf3>
 8007940:	4602      	mov	r2, r0
 8007942:	460b      	mov	r3, r1
 8007944:	4620      	mov	r0, r4
 8007946:	4629      	mov	r1, r5
 8007948:	f7f8 fcc8 	bl	80002dc <__adddf3>
 800794c:	4602      	mov	r2, r0
 800794e:	460b      	mov	r3, r1
 8007950:	4614      	mov	r4, r2
 8007952:	461d      	mov	r5, r3
 8007954:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8007958:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800795c:	685b      	ldr	r3, [r3, #4]
 800795e:	4618      	mov	r0, r3
 8007960:	f7f8 fe1a 	bl	8000598 <__aeabi_f2d>
 8007964:	4602      	mov	r2, r0
 8007966:	460b      	mov	r3, r1
 8007968:	4620      	mov	r0, r4
 800796a:	4629      	mov	r1, r5
 800796c:	f7f8 fe6c 	bl	8000648 <__aeabi_dmul>
 8007970:	4602      	mov	r2, r0
 8007972:	460b      	mov	r3, r1
 8007974:	4614      	mov	r4, r2
 8007976:	461d      	mov	r5, r3
 8007978:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 800797c:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 8007980:	681b      	ldr	r3, [r3, #0]
 8007982:	4618      	mov	r0, r3
 8007984:	f7f8 fe08 	bl	8000598 <__aeabi_f2d>
 8007988:	4602      	mov	r2, r0
 800798a:	460b      	mov	r3, r1
 800798c:	4620      	mov	r0, r4
 800798e:	4629      	mov	r1, r5
 8007990:	f7f8 fe5a 	bl	8000648 <__aeabi_dmul>
 8007994:	4602      	mov	r2, r0
 8007996:	460b      	mov	r3, r1
 8007998:	4614      	mov	r4, r2
 800799a:	461d      	mov	r5, r3
                   dx_data[0] * dx_data[0] * dvdf_data[1]) /
 800799c:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 80079a0:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80079a4:	ed93 7a00 	vldr	s14, [r3]
 80079a8:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 80079ac:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80079b0:	edd3 7a00 	vldr	s15, [r3]
 80079b4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80079b8:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 80079bc:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 80079c0:	edd3 7a01 	vldr	s15, [r3, #4]
 80079c4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80079c8:	ee17 0a90 	vmov	r0, s15
 80079cc:	f7f8 fde4 	bl	8000598 <__aeabi_f2d>
 80079d0:	4602      	mov	r2, r0
 80079d2:	460b      	mov	r3, r1
      s_data[0] = ((dx_data[0] + 2.0 * d31) * dx_data[1] * dvdf_data[0] +
 80079d4:	4620      	mov	r0, r4
 80079d6:	4629      	mov	r1, r5
 80079d8:	f7f8 fc80 	bl	80002dc <__adddf3>
 80079dc:	4602      	mov	r2, r0
 80079de:	460b      	mov	r3, r1
 80079e0:	4614      	mov	r4, r2
 80079e2:	461d      	mov	r5, r3
                   dx_data[0] * dx_data[0] * dvdf_data[1]) /
 80079e4:	f507 5305 	add.w	r3, r7, #8512	; 0x2140
 80079e8:	f103 0304 	add.w	r3, r3, #4
 80079ec:	6818      	ldr	r0, [r3, #0]
 80079ee:	f7f8 fdd3 	bl	8000598 <__aeabi_f2d>
 80079f2:	4602      	mov	r2, r0
 80079f4:	460b      	mov	r3, r1
 80079f6:	4620      	mov	r0, r4
 80079f8:	4629      	mov	r1, r5
 80079fa:	f7f8 ff4f 	bl	800089c <__aeabi_ddiv>
 80079fe:	4602      	mov	r2, r0
 8007a00:	460b      	mov	r3, r1
 8007a02:	4610      	mov	r0, r2
 8007a04:	4619      	mov	r1, r3
 8007a06:	f7f9 f8f7 	bl	8000bf8 <__aeabi_d2f>
 8007a0a:	4602      	mov	r2, r0
      s_data[0] = ((dx_data[0] + 2.0 * d31) * dx_data[1] * dvdf_data[0] +
 8007a0c:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8007a10:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8007a14:	601a      	str	r2, [r3, #0]
                  d31;
      dzdxdx = dx_data[x_size[1] - 2];
 8007a16:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8007a1a:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8007a1e:	681b      	ldr	r3, [r3, #0]
 8007a20:	3304      	adds	r3, #4
 8007a22:	681b      	ldr	r3, [r3, #0]
 8007a24:	3b02      	subs	r3, #2
 8007a26:	f507 72b4 	add.w	r2, r7, #360	; 0x168
 8007a2a:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 8007a2e:	009b      	lsls	r3, r3, #2
 8007a30:	4413      	add	r3, r2
 8007a32:	681b      	ldr	r3, [r3, #0]
 8007a34:	f507 5204 	add.w	r2, r7, #8448	; 0x2100
 8007a38:	f102 0238 	add.w	r2, r2, #56	; 0x38
 8007a3c:	6013      	str	r3, [r2, #0]
      s_data[x_size[1] - 1] = ((dzdxdx + 2.0 * dnnm2) * dx_data[x_size[1] - 3] *
 8007a3e:	f507 5304 	add.w	r3, r7, #8448	; 0x2100
 8007a42:	f103 0338 	add.w	r3, r3, #56	; 0x38
 8007a46:	6818      	ldr	r0, [r3, #0]
 8007a48:	f7f8 fda6 	bl	8000598 <__aeabi_f2d>
 8007a4c:	4604      	mov	r4, r0
 8007a4e:	460d      	mov	r5, r1
 8007a50:	f507 5305 	add.w	r3, r7, #8512	; 0x2140
 8007a54:	6818      	ldr	r0, [r3, #0]
 8007a56:	f7f8 fd9f 	bl	8000598 <__aeabi_f2d>
 8007a5a:	4602      	mov	r2, r0
 8007a5c:	460b      	mov	r3, r1
 8007a5e:	f7f8 fc3d 	bl	80002dc <__adddf3>
 8007a62:	4602      	mov	r2, r0
 8007a64:	460b      	mov	r3, r1
 8007a66:	4620      	mov	r0, r4
 8007a68:	4629      	mov	r1, r5
 8007a6a:	f7f8 fc37 	bl	80002dc <__adddf3>
 8007a6e:	4602      	mov	r2, r0
 8007a70:	460b      	mov	r3, r1
 8007a72:	4614      	mov	r4, r2
 8007a74:	461d      	mov	r5, r3
 8007a76:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8007a7a:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8007a7e:	681b      	ldr	r3, [r3, #0]
 8007a80:	3304      	adds	r3, #4
 8007a82:	681b      	ldr	r3, [r3, #0]
 8007a84:	3b03      	subs	r3, #3
 8007a86:	f507 72b4 	add.w	r2, r7, #360	; 0x168
 8007a8a:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 8007a8e:	009b      	lsls	r3, r3, #2
 8007a90:	4413      	add	r3, r2
 8007a92:	681b      	ldr	r3, [r3, #0]
 8007a94:	4618      	mov	r0, r3
 8007a96:	f7f8 fd7f 	bl	8000598 <__aeabi_f2d>
 8007a9a:	4602      	mov	r2, r0
 8007a9c:	460b      	mov	r3, r1
 8007a9e:	4620      	mov	r0, r4
 8007aa0:	4629      	mov	r1, r5
 8007aa2:	f7f8 fdd1 	bl	8000648 <__aeabi_dmul>
 8007aa6:	4602      	mov	r2, r0
 8007aa8:	460b      	mov	r3, r1
 8007aaa:	4614      	mov	r4, r2
 8007aac:	461d      	mov	r5, r3
                                   dvdf_data[x_size[1] - 2] +
 8007aae:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8007ab2:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8007ab6:	681b      	ldr	r3, [r3, #0]
 8007ab8:	3304      	adds	r3, #4
 8007aba:	681b      	ldr	r3, [r3, #0]
 8007abc:	3b02      	subs	r3, #2
 8007abe:	f507 72b4 	add.w	r2, r7, #360	; 0x168
 8007ac2:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8007ac6:	009b      	lsls	r3, r3, #2
 8007ac8:	4413      	add	r3, r2
 8007aca:	681b      	ldr	r3, [r3, #0]
 8007acc:	4618      	mov	r0, r3
 8007ace:	f7f8 fd63 	bl	8000598 <__aeabi_f2d>
 8007ad2:	4602      	mov	r2, r0
 8007ad4:	460b      	mov	r3, r1
      s_data[x_size[1] - 1] = ((dzdxdx + 2.0 * dnnm2) * dx_data[x_size[1] - 3] *
 8007ad6:	4620      	mov	r0, r4
 8007ad8:	4629      	mov	r1, r5
 8007ada:	f7f8 fdb5 	bl	8000648 <__aeabi_dmul>
 8007ade:	4602      	mov	r2, r0
 8007ae0:	460b      	mov	r3, r1
 8007ae2:	4614      	mov	r4, r2
 8007ae4:	461d      	mov	r5, r3
                               dzdxdx * dzdxdx * dvdf_data[x_size[1] - 3]) /
 8007ae6:	f507 5304 	add.w	r3, r7, #8448	; 0x2100
 8007aea:	f103 0338 	add.w	r3, r3, #56	; 0x38
 8007aee:	edd3 7a00 	vldr	s15, [r3]
 8007af2:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8007af6:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8007afa:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8007afe:	681b      	ldr	r3, [r3, #0]
 8007b00:	3304      	adds	r3, #4
 8007b02:	681b      	ldr	r3, [r3, #0]
 8007b04:	3b03      	subs	r3, #3
 8007b06:	f507 72b4 	add.w	r2, r7, #360	; 0x168
 8007b0a:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8007b0e:	009b      	lsls	r3, r3, #2
 8007b10:	4413      	add	r3, r2
 8007b12:	edd3 7a00 	vldr	s15, [r3]
 8007b16:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007b1a:	ee17 0a90 	vmov	r0, s15
 8007b1e:	f7f8 fd3b 	bl	8000598 <__aeabi_f2d>
 8007b22:	4602      	mov	r2, r0
 8007b24:	460b      	mov	r3, r1
                                   dvdf_data[x_size[1] - 2] +
 8007b26:	4620      	mov	r0, r4
 8007b28:	4629      	mov	r1, r5
 8007b2a:	f7f8 fbd7 	bl	80002dc <__adddf3>
 8007b2e:	4602      	mov	r2, r0
 8007b30:	460b      	mov	r3, r1
 8007b32:	4614      	mov	r4, r2
 8007b34:	461d      	mov	r5, r3
                               dzdxdx * dzdxdx * dvdf_data[x_size[1] - 3]) /
 8007b36:	f507 5305 	add.w	r3, r7, #8512	; 0x2140
 8007b3a:	6818      	ldr	r0, [r3, #0]
 8007b3c:	f7f8 fd2c 	bl	8000598 <__aeabi_f2d>
 8007b40:	4602      	mov	r2, r0
 8007b42:	460b      	mov	r3, r1
 8007b44:	4620      	mov	r0, r4
 8007b46:	4629      	mov	r1, r5
 8007b48:	f7f8 fea8 	bl	800089c <__aeabi_ddiv>
 8007b4c:	4602      	mov	r2, r0
 8007b4e:	460b      	mov	r3, r1
 8007b50:	4610      	mov	r0, r2
 8007b52:	4619      	mov	r1, r3
      s_data[x_size[1] - 1] = ((dzdxdx + 2.0 * dnnm2) * dx_data[x_size[1] - 3] *
 8007b54:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8007b58:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8007b5c:	681b      	ldr	r3, [r3, #0]
 8007b5e:	3304      	adds	r3, #4
 8007b60:	681b      	ldr	r3, [r3, #0]
 8007b62:	1e5c      	subs	r4, r3, #1
                               dzdxdx * dzdxdx * dvdf_data[x_size[1] - 3]) /
 8007b64:	f7f9 f848 	bl	8000bf8 <__aeabi_d2f>
 8007b68:	4601      	mov	r1, r0
      s_data[x_size[1] - 1] = ((dzdxdx + 2.0 * dnnm2) * dx_data[x_size[1] - 3] *
 8007b6a:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8007b6e:	f5a3 729a 	sub.w	r2, r3, #308	; 0x134
 8007b72:	00a3      	lsls	r3, r4, #2
 8007b74:	4413      	add	r3, r2
 8007b76:	6019      	str	r1, [r3, #0]
                              dnnm2;
    }
    md_data[0] = dx_data[1];
 8007b78:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8007b7c:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8007b80:	685b      	ldr	r3, [r3, #4]
 8007b82:	f507 528b 	add.w	r2, r7, #4448	; 0x1160
 8007b86:	f102 0208 	add.w	r2, r2, #8
 8007b8a:	f842 3c58 	str.w	r3, [r2, #-88]
    dzdxdx = dx_data[x_size[1] - 3];
 8007b8e:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8007b92:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8007b96:	681b      	ldr	r3, [r3, #0]
 8007b98:	3304      	adds	r3, #4
 8007b9a:	681b      	ldr	r3, [r3, #0]
 8007b9c:	3b03      	subs	r3, #3
 8007b9e:	f507 72b4 	add.w	r2, r7, #360	; 0x168
 8007ba2:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 8007ba6:	009b      	lsls	r3, r3, #2
 8007ba8:	4413      	add	r3, r2
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	f507 5204 	add.w	r2, r7, #8448	; 0x2100
 8007bb0:	f102 0238 	add.w	r2, r2, #56	; 0x38
 8007bb4:	6013      	str	r3, [r2, #0]
    md_data[x_size[1] - 1] = dzdxdx;
 8007bb6:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8007bba:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8007bbe:	681b      	ldr	r3, [r3, #0]
 8007bc0:	3304      	adds	r3, #4
 8007bc2:	681b      	ldr	r3, [r3, #0]
 8007bc4:	3b01      	subs	r3, #1
 8007bc6:	f507 528b 	add.w	r2, r7, #4448	; 0x1160
 8007bca:	f102 0208 	add.w	r2, r2, #8
 8007bce:	009b      	lsls	r3, r3, #2
 8007bd0:	4413      	add	r3, r2
 8007bd2:	3b58      	subs	r3, #88	; 0x58
 8007bd4:	f507 5204 	add.w	r2, r7, #8448	; 0x2100
 8007bd8:	f102 0238 	add.w	r2, r2, #56	; 0x38
 8007bdc:	6812      	ldr	r2, [r2, #0]
 8007bde:	601a      	str	r2, [r3, #0]
    for (low_ip1 = 2; low_ip1 <= nxm1; low_ip1++) {
 8007be0:	2302      	movs	r3, #2
 8007be2:	f507 5205 	add.w	r2, r7, #8512	; 0x2140
 8007be6:	f102 0218 	add.w	r2, r2, #24
 8007bea:	6013      	str	r3, [r2, #0]
 8007bec:	e039      	b.n	8007c62 <spline+0xa02>
      md_data[low_ip1 - 1] =
          2.0 * (dx_data[low_ip1 - 1] + dx_data[low_ip1 - 2]);
 8007bee:	f507 5305 	add.w	r3, r7, #8512	; 0x2140
 8007bf2:	f103 0318 	add.w	r3, r3, #24
 8007bf6:	681b      	ldr	r3, [r3, #0]
 8007bf8:	3b01      	subs	r3, #1
 8007bfa:	f507 72b4 	add.w	r2, r7, #360	; 0x168
 8007bfe:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 8007c02:	009b      	lsls	r3, r3, #2
 8007c04:	4413      	add	r3, r2
 8007c06:	ed93 7a00 	vldr	s14, [r3]
 8007c0a:	f507 5305 	add.w	r3, r7, #8512	; 0x2140
 8007c0e:	f103 0318 	add.w	r3, r3, #24
 8007c12:	681b      	ldr	r3, [r3, #0]
 8007c14:	3b02      	subs	r3, #2
 8007c16:	f507 72b4 	add.w	r2, r7, #360	; 0x168
 8007c1a:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 8007c1e:	009b      	lsls	r3, r3, #2
 8007c20:	4413      	add	r3, r2
 8007c22:	edd3 7a00 	vldr	s15, [r3]
 8007c26:	ee77 7a27 	vadd.f32	s15, s14, s15
      md_data[low_ip1 - 1] =
 8007c2a:	f507 5305 	add.w	r3, r7, #8512	; 0x2140
 8007c2e:	f103 0318 	add.w	r3, r3, #24
 8007c32:	681b      	ldr	r3, [r3, #0]
 8007c34:	3b01      	subs	r3, #1
          2.0 * (dx_data[low_ip1 - 1] + dx_data[low_ip1 - 2]);
 8007c36:	ee77 7aa7 	vadd.f32	s15, s15, s15
      md_data[low_ip1 - 1] =
 8007c3a:	f507 528b 	add.w	r2, r7, #4448	; 0x1160
 8007c3e:	f102 0208 	add.w	r2, r2, #8
 8007c42:	009b      	lsls	r3, r3, #2
 8007c44:	4413      	add	r3, r2
 8007c46:	3b58      	subs	r3, #88	; 0x58
 8007c48:	edc3 7a00 	vstr	s15, [r3]
    for (low_ip1 = 2; low_ip1 <= nxm1; low_ip1++) {
 8007c4c:	f507 5305 	add.w	r3, r7, #8512	; 0x2140
 8007c50:	f103 0318 	add.w	r3, r3, #24
 8007c54:	681b      	ldr	r3, [r3, #0]
 8007c56:	3301      	adds	r3, #1
 8007c58:	f507 5205 	add.w	r2, r7, #8512	; 0x2140
 8007c5c:	f102 0218 	add.w	r2, r2, #24
 8007c60:	6013      	str	r3, [r2, #0]
 8007c62:	f507 5305 	add.w	r3, r7, #8512	; 0x2140
 8007c66:	f103 0318 	add.w	r3, r3, #24
 8007c6a:	681a      	ldr	r2, [r3, #0]
 8007c6c:	f507 5305 	add.w	r3, r7, #8512	; 0x2140
 8007c70:	f103 0310 	add.w	r3, r3, #16
 8007c74:	681b      	ldr	r3, [r3, #0]
 8007c76:	429a      	cmp	r2, r3
 8007c78:	ddb9      	ble.n	8007bee <spline+0x98e>
    }
    r = dx_data[1] / md_data[0];
 8007c7a:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8007c7e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8007c82:	edd3 6a01 	vldr	s13, [r3, #4]
 8007c86:	f507 538b 	add.w	r3, r7, #4448	; 0x1160
 8007c8a:	f103 0308 	add.w	r3, r3, #8
 8007c8e:	ed13 7a16 	vldr	s14, [r3, #-88]	; 0xffffffa8
 8007c92:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007c96:	f507 5305 	add.w	r3, r7, #8512	; 0x2140
 8007c9a:	f103 0324 	add.w	r3, r3, #36	; 0x24
 8007c9e:	edc3 7a00 	vstr	s15, [r3]
    md_data[1] -= r * d31;
 8007ca2:	f507 538b 	add.w	r3, r7, #4448	; 0x1160
 8007ca6:	f103 0308 	add.w	r3, r3, #8
 8007caa:	ed13 7a15 	vldr	s14, [r3, #-84]	; 0xffffffac
 8007cae:	f507 5305 	add.w	r3, r7, #8512	; 0x2140
 8007cb2:	f103 0324 	add.w	r3, r3, #36	; 0x24
 8007cb6:	edd3 6a00 	vldr	s13, [r3]
 8007cba:	f507 5305 	add.w	r3, r7, #8512	; 0x2140
 8007cbe:	f103 0304 	add.w	r3, r3, #4
 8007cc2:	edd3 7a00 	vldr	s15, [r3]
 8007cc6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8007cca:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007cce:	f507 538b 	add.w	r3, r7, #4448	; 0x1160
 8007cd2:	f103 0308 	add.w	r3, r3, #8
 8007cd6:	ed43 7a15 	vstr	s15, [r3, #-84]	; 0xffffffac
    s_data[1] -= r * s_data[0];
 8007cda:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8007cde:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8007ce2:	ed93 7a01 	vldr	s14, [r3, #4]
 8007ce6:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8007cea:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8007cee:	edd3 6a00 	vldr	s13, [r3]
 8007cf2:	f507 5305 	add.w	r3, r7, #8512	; 0x2140
 8007cf6:	f103 0324 	add.w	r3, r3, #36	; 0x24
 8007cfa:	edd3 7a00 	vldr	s15, [r3]
 8007cfe:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8007d02:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007d06:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8007d0a:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8007d0e:	edc3 7a01 	vstr	s15, [r3, #4]
    for (low_ip1 = 3; low_ip1 <= nxm1; low_ip1++) {
 8007d12:	2303      	movs	r3, #3
 8007d14:	f507 5205 	add.w	r2, r7, #8512	; 0x2140
 8007d18:	f102 0218 	add.w	r2, r2, #24
 8007d1c:	6013      	str	r3, [r2, #0]
 8007d1e:	e099      	b.n	8007e54 <spline+0xbf4>
      r = dx_data[low_ip1 - 1] / md_data[low_ip1 - 2];
 8007d20:	f507 5305 	add.w	r3, r7, #8512	; 0x2140
 8007d24:	f103 0318 	add.w	r3, r3, #24
 8007d28:	681b      	ldr	r3, [r3, #0]
 8007d2a:	3b01      	subs	r3, #1
 8007d2c:	f507 72b4 	add.w	r2, r7, #360	; 0x168
 8007d30:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 8007d34:	009b      	lsls	r3, r3, #2
 8007d36:	4413      	add	r3, r2
 8007d38:	edd3 6a00 	vldr	s13, [r3]
 8007d3c:	f507 5305 	add.w	r3, r7, #8512	; 0x2140
 8007d40:	f103 0318 	add.w	r3, r3, #24
 8007d44:	681b      	ldr	r3, [r3, #0]
 8007d46:	3b02      	subs	r3, #2
 8007d48:	f507 528b 	add.w	r2, r7, #4448	; 0x1160
 8007d4c:	f102 0208 	add.w	r2, r2, #8
 8007d50:	009b      	lsls	r3, r3, #2
 8007d52:	4413      	add	r3, r2
 8007d54:	3b58      	subs	r3, #88	; 0x58
 8007d56:	ed93 7a00 	vldr	s14, [r3]
 8007d5a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007d5e:	f507 5305 	add.w	r3, r7, #8512	; 0x2140
 8007d62:	f103 0324 	add.w	r3, r3, #36	; 0x24
 8007d66:	edc3 7a00 	vstr	s15, [r3]
      md_data[low_ip1 - 1] -= r * dx_data[low_ip1 - 3];
 8007d6a:	f507 5305 	add.w	r3, r7, #8512	; 0x2140
 8007d6e:	f103 0318 	add.w	r3, r3, #24
 8007d72:	681b      	ldr	r3, [r3, #0]
 8007d74:	3b01      	subs	r3, #1
 8007d76:	f507 528b 	add.w	r2, r7, #4448	; 0x1160
 8007d7a:	f102 0208 	add.w	r2, r2, #8
 8007d7e:	009b      	lsls	r3, r3, #2
 8007d80:	4413      	add	r3, r2
 8007d82:	3b58      	subs	r3, #88	; 0x58
 8007d84:	ed93 7a00 	vldr	s14, [r3]
 8007d88:	f507 5305 	add.w	r3, r7, #8512	; 0x2140
 8007d8c:	f103 0318 	add.w	r3, r3, #24
 8007d90:	681b      	ldr	r3, [r3, #0]
 8007d92:	3b03      	subs	r3, #3
 8007d94:	f507 72b4 	add.w	r2, r7, #360	; 0x168
 8007d98:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 8007d9c:	009b      	lsls	r3, r3, #2
 8007d9e:	4413      	add	r3, r2
 8007da0:	edd3 6a00 	vldr	s13, [r3]
 8007da4:	f507 5305 	add.w	r3, r7, #8512	; 0x2140
 8007da8:	f103 0324 	add.w	r3, r3, #36	; 0x24
 8007dac:	edd3 7a00 	vldr	s15, [r3]
 8007db0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8007db4:	f507 5305 	add.w	r3, r7, #8512	; 0x2140
 8007db8:	f103 0318 	add.w	r3, r3, #24
 8007dbc:	681b      	ldr	r3, [r3, #0]
 8007dbe:	3b01      	subs	r3, #1
 8007dc0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007dc4:	f507 528b 	add.w	r2, r7, #4448	; 0x1160
 8007dc8:	f102 0208 	add.w	r2, r2, #8
 8007dcc:	009b      	lsls	r3, r3, #2
 8007dce:	4413      	add	r3, r2
 8007dd0:	3b58      	subs	r3, #88	; 0x58
 8007dd2:	edc3 7a00 	vstr	s15, [r3]
      s_data[low_ip1 - 1] -= r * s_data[low_ip1 - 2];
 8007dd6:	f507 5305 	add.w	r3, r7, #8512	; 0x2140
 8007dda:	f103 0318 	add.w	r3, r3, #24
 8007dde:	681b      	ldr	r3, [r3, #0]
 8007de0:	3b01      	subs	r3, #1
 8007de2:	f507 72b4 	add.w	r2, r7, #360	; 0x168
 8007de6:	f5a2 729a 	sub.w	r2, r2, #308	; 0x134
 8007dea:	009b      	lsls	r3, r3, #2
 8007dec:	4413      	add	r3, r2
 8007dee:	ed93 7a00 	vldr	s14, [r3]
 8007df2:	f507 5305 	add.w	r3, r7, #8512	; 0x2140
 8007df6:	f103 0318 	add.w	r3, r3, #24
 8007dfa:	681b      	ldr	r3, [r3, #0]
 8007dfc:	3b02      	subs	r3, #2
 8007dfe:	f507 72b4 	add.w	r2, r7, #360	; 0x168
 8007e02:	f5a2 729a 	sub.w	r2, r2, #308	; 0x134
 8007e06:	009b      	lsls	r3, r3, #2
 8007e08:	4413      	add	r3, r2
 8007e0a:	edd3 6a00 	vldr	s13, [r3]
 8007e0e:	f507 5305 	add.w	r3, r7, #8512	; 0x2140
 8007e12:	f103 0324 	add.w	r3, r3, #36	; 0x24
 8007e16:	edd3 7a00 	vldr	s15, [r3]
 8007e1a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8007e1e:	f507 5305 	add.w	r3, r7, #8512	; 0x2140
 8007e22:	f103 0318 	add.w	r3, r3, #24
 8007e26:	681b      	ldr	r3, [r3, #0]
 8007e28:	3b01      	subs	r3, #1
 8007e2a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007e2e:	f507 72b4 	add.w	r2, r7, #360	; 0x168
 8007e32:	f5a2 729a 	sub.w	r2, r2, #308	; 0x134
 8007e36:	009b      	lsls	r3, r3, #2
 8007e38:	4413      	add	r3, r2
 8007e3a:	edc3 7a00 	vstr	s15, [r3]
    for (low_ip1 = 3; low_ip1 <= nxm1; low_ip1++) {
 8007e3e:	f507 5305 	add.w	r3, r7, #8512	; 0x2140
 8007e42:	f103 0318 	add.w	r3, r3, #24
 8007e46:	681b      	ldr	r3, [r3, #0]
 8007e48:	3301      	adds	r3, #1
 8007e4a:	f507 5205 	add.w	r2, r7, #8512	; 0x2140
 8007e4e:	f102 0218 	add.w	r2, r2, #24
 8007e52:	6013      	str	r3, [r2, #0]
 8007e54:	f507 5305 	add.w	r3, r7, #8512	; 0x2140
 8007e58:	f103 0318 	add.w	r3, r3, #24
 8007e5c:	681a      	ldr	r2, [r3, #0]
 8007e5e:	f507 5305 	add.w	r3, r7, #8512	; 0x2140
 8007e62:	f103 0310 	add.w	r3, r3, #16
 8007e66:	681b      	ldr	r3, [r3, #0]
 8007e68:	429a      	cmp	r2, r3
 8007e6a:	f77f af59 	ble.w	8007d20 <spline+0xac0>
    }
    r = dnnm2 / md_data[x_size[1] - 2];
 8007e6e:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8007e72:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8007e76:	681b      	ldr	r3, [r3, #0]
 8007e78:	3304      	adds	r3, #4
 8007e7a:	681b      	ldr	r3, [r3, #0]
 8007e7c:	3b02      	subs	r3, #2
 8007e7e:	f507 528b 	add.w	r2, r7, #4448	; 0x1160
 8007e82:	f102 0208 	add.w	r2, r2, #8
 8007e86:	009b      	lsls	r3, r3, #2
 8007e88:	4413      	add	r3, r2
 8007e8a:	3b58      	subs	r3, #88	; 0x58
 8007e8c:	ed93 7a00 	vldr	s14, [r3]
 8007e90:	f507 5305 	add.w	r3, r7, #8512	; 0x2140
 8007e94:	edd3 6a00 	vldr	s13, [r3]
 8007e98:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007e9c:	f507 5305 	add.w	r3, r7, #8512	; 0x2140
 8007ea0:	f103 0324 	add.w	r3, r3, #36	; 0x24
 8007ea4:	edc3 7a00 	vstr	s15, [r3]
    md_data[x_size[1] - 1] -= r * dzdxdx;
 8007ea8:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8007eac:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8007eb0:	681b      	ldr	r3, [r3, #0]
 8007eb2:	3304      	adds	r3, #4
 8007eb4:	681b      	ldr	r3, [r3, #0]
 8007eb6:	3b01      	subs	r3, #1
 8007eb8:	f507 528b 	add.w	r2, r7, #4448	; 0x1160
 8007ebc:	f102 0208 	add.w	r2, r2, #8
 8007ec0:	009b      	lsls	r3, r3, #2
 8007ec2:	4413      	add	r3, r2
 8007ec4:	3b58      	subs	r3, #88	; 0x58
 8007ec6:	ed93 7a00 	vldr	s14, [r3]
 8007eca:	f507 5305 	add.w	r3, r7, #8512	; 0x2140
 8007ece:	f103 0324 	add.w	r3, r3, #36	; 0x24
 8007ed2:	edd3 6a00 	vldr	s13, [r3]
 8007ed6:	f507 5304 	add.w	r3, r7, #8448	; 0x2100
 8007eda:	f103 0338 	add.w	r3, r3, #56	; 0x38
 8007ede:	edd3 7a00 	vldr	s15, [r3]
 8007ee2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8007ee6:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8007eea:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8007eee:	681b      	ldr	r3, [r3, #0]
 8007ef0:	3304      	adds	r3, #4
 8007ef2:	681b      	ldr	r3, [r3, #0]
 8007ef4:	3b01      	subs	r3, #1
 8007ef6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007efa:	f507 528b 	add.w	r2, r7, #4448	; 0x1160
 8007efe:	f102 0208 	add.w	r2, r2, #8
 8007f02:	009b      	lsls	r3, r3, #2
 8007f04:	4413      	add	r3, r2
 8007f06:	3b58      	subs	r3, #88	; 0x58
 8007f08:	edc3 7a00 	vstr	s15, [r3]
    s_data[x_size[1] - 1] -= r * s_data[x_size[1] - 2];
 8007f0c:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8007f10:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8007f14:	681b      	ldr	r3, [r3, #0]
 8007f16:	3304      	adds	r3, #4
 8007f18:	681b      	ldr	r3, [r3, #0]
 8007f1a:	3b01      	subs	r3, #1
 8007f1c:	f507 72b4 	add.w	r2, r7, #360	; 0x168
 8007f20:	f5a2 729a 	sub.w	r2, r2, #308	; 0x134
 8007f24:	009b      	lsls	r3, r3, #2
 8007f26:	4413      	add	r3, r2
 8007f28:	ed93 7a00 	vldr	s14, [r3]
 8007f2c:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8007f30:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8007f34:	681b      	ldr	r3, [r3, #0]
 8007f36:	3304      	adds	r3, #4
 8007f38:	681b      	ldr	r3, [r3, #0]
 8007f3a:	3b02      	subs	r3, #2
 8007f3c:	f507 72b4 	add.w	r2, r7, #360	; 0x168
 8007f40:	f5a2 729a 	sub.w	r2, r2, #308	; 0x134
 8007f44:	009b      	lsls	r3, r3, #2
 8007f46:	4413      	add	r3, r2
 8007f48:	edd3 6a00 	vldr	s13, [r3]
 8007f4c:	f507 5305 	add.w	r3, r7, #8512	; 0x2140
 8007f50:	f103 0324 	add.w	r3, r3, #36	; 0x24
 8007f54:	edd3 7a00 	vldr	s15, [r3]
 8007f58:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8007f5c:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8007f60:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8007f64:	681b      	ldr	r3, [r3, #0]
 8007f66:	3304      	adds	r3, #4
 8007f68:	681b      	ldr	r3, [r3, #0]
 8007f6a:	3b01      	subs	r3, #1
 8007f6c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007f70:	f507 72b4 	add.w	r2, r7, #360	; 0x168
 8007f74:	f5a2 729a 	sub.w	r2, r2, #308	; 0x134
 8007f78:	009b      	lsls	r3, r3, #2
 8007f7a:	4413      	add	r3, r2
 8007f7c:	edc3 7a00 	vstr	s15, [r3]
    s_data[x_size[1] - 1] /= md_data[x_size[1] - 1];
 8007f80:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8007f84:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8007f88:	681b      	ldr	r3, [r3, #0]
 8007f8a:	3304      	adds	r3, #4
 8007f8c:	681b      	ldr	r3, [r3, #0]
 8007f8e:	3b01      	subs	r3, #1
 8007f90:	f507 72b4 	add.w	r2, r7, #360	; 0x168
 8007f94:	f5a2 729a 	sub.w	r2, r2, #308	; 0x134
 8007f98:	009b      	lsls	r3, r3, #2
 8007f9a:	4413      	add	r3, r2
 8007f9c:	edd3 6a00 	vldr	s13, [r3]
 8007fa0:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8007fa4:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8007fa8:	681b      	ldr	r3, [r3, #0]
 8007faa:	3304      	adds	r3, #4
 8007fac:	681b      	ldr	r3, [r3, #0]
 8007fae:	3b01      	subs	r3, #1
 8007fb0:	f507 528b 	add.w	r2, r7, #4448	; 0x1160
 8007fb4:	f102 0208 	add.w	r2, r2, #8
 8007fb8:	009b      	lsls	r3, r3, #2
 8007fba:	4413      	add	r3, r2
 8007fbc:	3b58      	subs	r3, #88	; 0x58
 8007fbe:	ed93 7a00 	vldr	s14, [r3]
 8007fc2:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8007fc6:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8007fca:	681b      	ldr	r3, [r3, #0]
 8007fcc:	3304      	adds	r3, #4
 8007fce:	681b      	ldr	r3, [r3, #0]
 8007fd0:	3b01      	subs	r3, #1
 8007fd2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007fd6:	f507 72b4 	add.w	r2, r7, #360	; 0x168
 8007fda:	f5a2 729a 	sub.w	r2, r2, #308	; 0x134
 8007fde:	009b      	lsls	r3, r3, #2
 8007fe0:	4413      	add	r3, r2
 8007fe2:	edc3 7a00 	vstr	s15, [r3]
    for (low_ip1 = nxm1; low_ip1 >= 2; low_ip1--) {
 8007fe6:	f507 5305 	add.w	r3, r7, #8512	; 0x2140
 8007fea:	f103 0310 	add.w	r3, r3, #16
 8007fee:	681b      	ldr	r3, [r3, #0]
 8007ff0:	f507 5205 	add.w	r2, r7, #8512	; 0x2140
 8007ff4:	f102 0218 	add.w	r2, r2, #24
 8007ff8:	6013      	str	r3, [r2, #0]
 8007ffa:	e056      	b.n	80080aa <spline+0xe4a>
      s_data[low_ip1 - 1] =
          (s_data[low_ip1 - 1] - dx_data[low_ip1 - 2] * s_data[low_ip1]) /
 8007ffc:	f507 5305 	add.w	r3, r7, #8512	; 0x2140
 8008000:	f103 0318 	add.w	r3, r3, #24
 8008004:	681b      	ldr	r3, [r3, #0]
 8008006:	3b01      	subs	r3, #1
 8008008:	f507 72b4 	add.w	r2, r7, #360	; 0x168
 800800c:	f5a2 729a 	sub.w	r2, r2, #308	; 0x134
 8008010:	009b      	lsls	r3, r3, #2
 8008012:	4413      	add	r3, r2
 8008014:	ed93 7a00 	vldr	s14, [r3]
 8008018:	f507 5305 	add.w	r3, r7, #8512	; 0x2140
 800801c:	f103 0318 	add.w	r3, r3, #24
 8008020:	681b      	ldr	r3, [r3, #0]
 8008022:	3b02      	subs	r3, #2
 8008024:	f507 72b4 	add.w	r2, r7, #360	; 0x168
 8008028:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 800802c:	009b      	lsls	r3, r3, #2
 800802e:	4413      	add	r3, r2
 8008030:	edd3 6a00 	vldr	s13, [r3]
 8008034:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8008038:	f5a3 729a 	sub.w	r2, r3, #308	; 0x134
 800803c:	f507 5305 	add.w	r3, r7, #8512	; 0x2140
 8008040:	f103 0318 	add.w	r3, r3, #24
 8008044:	681b      	ldr	r3, [r3, #0]
 8008046:	009b      	lsls	r3, r3, #2
 8008048:	4413      	add	r3, r2
 800804a:	edd3 7a00 	vldr	s15, [r3]
 800804e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8008052:	ee77 6a67 	vsub.f32	s13, s14, s15
          md_data[low_ip1 - 1];
 8008056:	f507 5305 	add.w	r3, r7, #8512	; 0x2140
 800805a:	f103 0318 	add.w	r3, r3, #24
 800805e:	681b      	ldr	r3, [r3, #0]
 8008060:	3b01      	subs	r3, #1
 8008062:	f507 528b 	add.w	r2, r7, #4448	; 0x1160
 8008066:	f102 0208 	add.w	r2, r2, #8
 800806a:	009b      	lsls	r3, r3, #2
 800806c:	4413      	add	r3, r2
 800806e:	3b58      	subs	r3, #88	; 0x58
 8008070:	ed93 7a00 	vldr	s14, [r3]
      s_data[low_ip1 - 1] =
 8008074:	f507 5305 	add.w	r3, r7, #8512	; 0x2140
 8008078:	f103 0318 	add.w	r3, r3, #24
 800807c:	681b      	ldr	r3, [r3, #0]
 800807e:	3b01      	subs	r3, #1
          (s_data[low_ip1 - 1] - dx_data[low_ip1 - 2] * s_data[low_ip1]) /
 8008080:	eec6 7a87 	vdiv.f32	s15, s13, s14
      s_data[low_ip1 - 1] =
 8008084:	f507 72b4 	add.w	r2, r7, #360	; 0x168
 8008088:	f5a2 729a 	sub.w	r2, r2, #308	; 0x134
 800808c:	009b      	lsls	r3, r3, #2
 800808e:	4413      	add	r3, r2
 8008090:	edc3 7a00 	vstr	s15, [r3]
    for (low_ip1 = nxm1; low_ip1 >= 2; low_ip1--) {
 8008094:	f507 5305 	add.w	r3, r7, #8512	; 0x2140
 8008098:	f103 0318 	add.w	r3, r3, #24
 800809c:	681b      	ldr	r3, [r3, #0]
 800809e:	3b01      	subs	r3, #1
 80080a0:	f507 5205 	add.w	r2, r7, #8512	; 0x2140
 80080a4:	f102 0218 	add.w	r2, r2, #24
 80080a8:	6013      	str	r3, [r2, #0]
 80080aa:	f507 5305 	add.w	r3, r7, #8512	; 0x2140
 80080ae:	f103 0318 	add.w	r3, r3, #24
 80080b2:	681b      	ldr	r3, [r3, #0]
 80080b4:	2b01      	cmp	r3, #1
 80080b6:	dca1      	bgt.n	8007ffc <spline+0xd9c>
    }
    s_data[0] = (s_data[0] - d31 * s_data[1]) / md_data[0];
 80080b8:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 80080bc:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80080c0:	ed93 7a00 	vldr	s14, [r3]
 80080c4:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 80080c8:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80080cc:	edd3 6a01 	vldr	s13, [r3, #4]
 80080d0:	f507 5305 	add.w	r3, r7, #8512	; 0x2140
 80080d4:	f103 0304 	add.w	r3, r3, #4
 80080d8:	edd3 7a00 	vldr	s15, [r3]
 80080dc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80080e0:	ee77 6a67 	vsub.f32	s13, s14, s15
 80080e4:	f507 538b 	add.w	r3, r7, #4448	; 0x1160
 80080e8:	f103 0308 	add.w	r3, r3, #8
 80080ec:	ed13 7a16 	vldr	s14, [r3, #-88]	; 0xffffffa8
 80080f0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80080f4:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 80080f8:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80080fc:	edc3 7a00 	vstr	s15, [r3]
    nxm1 = x_size[1];
 8008100:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8008104:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8008108:	681b      	ldr	r3, [r3, #0]
 800810a:	685b      	ldr	r3, [r3, #4]
 800810c:	f507 5205 	add.w	r2, r7, #8512	; 0x2140
 8008110:	f102 0210 	add.w	r2, r2, #16
 8008114:	6013      	str	r3, [r2, #0]
    pp_coefs_size_idx_1 = 4;
 8008116:	2304      	movs	r3, #4
 8008118:	f507 5205 	add.w	r2, r7, #8512	; 0x2140
 800811c:	f102 020c 	add.w	r2, r2, #12
 8008120:	6013      	str	r3, [r2, #0]
    for (high_i = 0; high_i <= nxm1 - 2; high_i++) {
 8008122:	2300      	movs	r3, #0
 8008124:	f507 5205 	add.w	r2, r7, #8512	; 0x2140
 8008128:	f102 0220 	add.w	r2, r2, #32
 800812c:	6013      	str	r3, [r2, #0]
 800812e:	e11b      	b.n	8008368 <spline+0x1108>
      dzdxdx = dvdf_data[high_i];
 8008130:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8008134:	f5a3 72ac 	sub.w	r2, r3, #344	; 0x158
 8008138:	f507 5305 	add.w	r3, r7, #8512	; 0x2140
 800813c:	f103 0320 	add.w	r3, r3, #32
 8008140:	681b      	ldr	r3, [r3, #0]
 8008142:	009b      	lsls	r3, r3, #2
 8008144:	4413      	add	r3, r2
 8008146:	681b      	ldr	r3, [r3, #0]
 8008148:	f507 5204 	add.w	r2, r7, #8448	; 0x2100
 800814c:	f102 0238 	add.w	r2, r2, #56	; 0x38
 8008150:	6013      	str	r3, [r2, #0]
      r = s_data[high_i];
 8008152:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8008156:	f5a3 729a 	sub.w	r2, r3, #308	; 0x134
 800815a:	f507 5305 	add.w	r3, r7, #8512	; 0x2140
 800815e:	f103 0320 	add.w	r3, r3, #32
 8008162:	681b      	ldr	r3, [r3, #0]
 8008164:	009b      	lsls	r3, r3, #2
 8008166:	4413      	add	r3, r2
 8008168:	681b      	ldr	r3, [r3, #0]
 800816a:	f507 5205 	add.w	r2, r7, #8512	; 0x2140
 800816e:	f102 0224 	add.w	r2, r2, #36	; 0x24
 8008172:	6013      	str	r3, [r2, #0]
      d31 = dx_data[high_i];
 8008174:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8008178:	f5a3 7286 	sub.w	r2, r3, #268	; 0x10c
 800817c:	f507 5305 	add.w	r3, r7, #8512	; 0x2140
 8008180:	f103 0320 	add.w	r3, r3, #32
 8008184:	681b      	ldr	r3, [r3, #0]
 8008186:	009b      	lsls	r3, r3, #2
 8008188:	4413      	add	r3, r2
 800818a:	681b      	ldr	r3, [r3, #0]
 800818c:	f507 5205 	add.w	r2, r7, #8512	; 0x2140
 8008190:	f102 0204 	add.w	r2, r2, #4
 8008194:	6013      	str	r3, [r2, #0]
      dnnm2 = (dzdxdx - r) / d31;
 8008196:	f507 5304 	add.w	r3, r7, #8448	; 0x2100
 800819a:	f103 0338 	add.w	r3, r3, #56	; 0x38
 800819e:	ed93 7a00 	vldr	s14, [r3]
 80081a2:	f507 5305 	add.w	r3, r7, #8512	; 0x2140
 80081a6:	f103 0324 	add.w	r3, r3, #36	; 0x24
 80081aa:	edd3 7a00 	vldr	s15, [r3]
 80081ae:	ee77 6a67 	vsub.f32	s13, s14, s15
 80081b2:	f507 5305 	add.w	r3, r7, #8512	; 0x2140
 80081b6:	f103 0304 	add.w	r3, r3, #4
 80081ba:	ed93 7a00 	vldr	s14, [r3]
 80081be:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80081c2:	f507 5305 	add.w	r3, r7, #8512	; 0x2140
 80081c6:	edc3 7a00 	vstr	s15, [r3]
      dzdxdx = (s_data[high_i + 1] - dzdxdx) / d31;
 80081ca:	f507 5305 	add.w	r3, r7, #8512	; 0x2140
 80081ce:	f103 0320 	add.w	r3, r3, #32
 80081d2:	681b      	ldr	r3, [r3, #0]
 80081d4:	3301      	adds	r3, #1
 80081d6:	f507 72b4 	add.w	r2, r7, #360	; 0x168
 80081da:	f5a2 729a 	sub.w	r2, r2, #308	; 0x134
 80081de:	009b      	lsls	r3, r3, #2
 80081e0:	4413      	add	r3, r2
 80081e2:	ed93 7a00 	vldr	s14, [r3]
 80081e6:	f507 5304 	add.w	r3, r7, #8448	; 0x2100
 80081ea:	f103 0338 	add.w	r3, r3, #56	; 0x38
 80081ee:	edd3 7a00 	vldr	s15, [r3]
 80081f2:	ee77 6a67 	vsub.f32	s13, s14, s15
 80081f6:	f507 5305 	add.w	r3, r7, #8512	; 0x2140
 80081fa:	f103 0304 	add.w	r3, r3, #4
 80081fe:	ed93 7a00 	vldr	s14, [r3]
 8008202:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008206:	f507 5304 	add.w	r3, r7, #8448	; 0x2100
 800820a:	f103 0338 	add.w	r3, r3, #56	; 0x38
 800820e:	edc3 7a00 	vstr	s15, [r3]
      pp_coefs_data[high_i] = (dzdxdx - dnnm2) / d31;
 8008212:	f507 5304 	add.w	r3, r7, #8448	; 0x2100
 8008216:	f103 0338 	add.w	r3, r3, #56	; 0x38
 800821a:	ed93 7a00 	vldr	s14, [r3]
 800821e:	f507 5305 	add.w	r3, r7, #8512	; 0x2140
 8008222:	edd3 7a00 	vldr	s15, [r3]
 8008226:	ee77 6a67 	vsub.f32	s13, s14, s15
 800822a:	f507 5305 	add.w	r3, r7, #8512	; 0x2140
 800822e:	f103 0304 	add.w	r3, r3, #4
 8008232:	ed93 7a00 	vldr	s14, [r3]
 8008236:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800823a:	f507 538b 	add.w	r3, r7, #4448	; 0x1160
 800823e:	f103 0308 	add.w	r3, r3, #8
 8008242:	461a      	mov	r2, r3
 8008244:	f507 5305 	add.w	r3, r7, #8512	; 0x2140
 8008248:	f103 0320 	add.w	r3, r3, #32
 800824c:	681b      	ldr	r3, [r3, #0]
 800824e:	009b      	lsls	r3, r3, #2
 8008250:	4413      	add	r3, r2
 8008252:	3be8      	subs	r3, #232	; 0xe8
 8008254:	edc3 7a00 	vstr	s15, [r3]
      pp_coefs_data[(szs_idx_1 + high_i) - 1] = 2.0 * dnnm2 - dzdxdx;
 8008258:	f507 5305 	add.w	r3, r7, #8512	; 0x2140
 800825c:	6818      	ldr	r0, [r3, #0]
 800825e:	f7f8 f99b 	bl	8000598 <__aeabi_f2d>
 8008262:	4602      	mov	r2, r0
 8008264:	460b      	mov	r3, r1
 8008266:	f7f8 f839 	bl	80002dc <__adddf3>
 800826a:	4602      	mov	r2, r0
 800826c:	460b      	mov	r3, r1
 800826e:	4614      	mov	r4, r2
 8008270:	461d      	mov	r5, r3
 8008272:	f507 5304 	add.w	r3, r7, #8448	; 0x2100
 8008276:	f103 0338 	add.w	r3, r3, #56	; 0x38
 800827a:	6818      	ldr	r0, [r3, #0]
 800827c:	f7f8 f98c 	bl	8000598 <__aeabi_f2d>
 8008280:	4602      	mov	r2, r0
 8008282:	460b      	mov	r3, r1
 8008284:	4620      	mov	r0, r4
 8008286:	4629      	mov	r1, r5
 8008288:	f7f8 f826 	bl	80002d8 <__aeabi_dsub>
 800828c:	4602      	mov	r2, r0
 800828e:	460b      	mov	r3, r1
 8008290:	4610      	mov	r0, r2
 8008292:	4619      	mov	r1, r3
 8008294:	f507 5304 	add.w	r3, r7, #8448	; 0x2100
 8008298:	f103 033f 	add.w	r3, r3, #63	; 0x3f
 800829c:	f993 2000 	ldrsb.w	r2, [r3]
 80082a0:	f507 5305 	add.w	r3, r7, #8512	; 0x2140
 80082a4:	f103 0320 	add.w	r3, r3, #32
 80082a8:	681b      	ldr	r3, [r3, #0]
 80082aa:	4413      	add	r3, r2
 80082ac:	1e5c      	subs	r4, r3, #1
 80082ae:	f7f8 fca3 	bl	8000bf8 <__aeabi_d2f>
 80082b2:	4602      	mov	r2, r0
 80082b4:	f507 538b 	add.w	r3, r7, #4448	; 0x1160
 80082b8:	f103 0308 	add.w	r3, r3, #8
 80082bc:	4619      	mov	r1, r3
 80082be:	00a3      	lsls	r3, r4, #2
 80082c0:	440b      	add	r3, r1
 80082c2:	3be8      	subs	r3, #232	; 0xe8
 80082c4:	601a      	str	r2, [r3, #0]
      pp_coefs_data[((szs_idx_1 - 1) << 1) + high_i] = r;
 80082c6:	f507 5304 	add.w	r3, r7, #8448	; 0x2100
 80082ca:	f103 033f 	add.w	r3, r3, #63	; 0x3f
 80082ce:	f993 3000 	ldrsb.w	r3, [r3]
 80082d2:	3b01      	subs	r3, #1
 80082d4:	005a      	lsls	r2, r3, #1
 80082d6:	f507 5305 	add.w	r3, r7, #8512	; 0x2140
 80082da:	f103 0320 	add.w	r3, r3, #32
 80082de:	681b      	ldr	r3, [r3, #0]
 80082e0:	4413      	add	r3, r2
 80082e2:	f507 528b 	add.w	r2, r7, #4448	; 0x1160
 80082e6:	f102 0208 	add.w	r2, r2, #8
 80082ea:	009b      	lsls	r3, r3, #2
 80082ec:	4413      	add	r3, r2
 80082ee:	3be8      	subs	r3, #232	; 0xe8
 80082f0:	f507 5205 	add.w	r2, r7, #8512	; 0x2140
 80082f4:	f102 0224 	add.w	r2, r2, #36	; 0x24
 80082f8:	6812      	ldr	r2, [r2, #0]
 80082fa:	601a      	str	r2, [r3, #0]
      pp_coefs_data[3 * (szs_idx_1 - 1) + high_i] = y[yoffset + high_i];
 80082fc:	f507 5305 	add.w	r3, r7, #8512	; 0x2140
 8008300:	f103 0308 	add.w	r3, r3, #8
 8008304:	681a      	ldr	r2, [r3, #0]
 8008306:	f507 5305 	add.w	r3, r7, #8512	; 0x2140
 800830a:	f103 0320 	add.w	r3, r3, #32
 800830e:	681b      	ldr	r3, [r3, #0]
 8008310:	4413      	add	r3, r2
 8008312:	009b      	lsls	r3, r3, #2
 8008314:	f507 72b4 	add.w	r2, r7, #360	; 0x168
 8008318:	f5a2 72b2 	sub.w	r2, r2, #356	; 0x164
 800831c:	6812      	ldr	r2, [r2, #0]
 800831e:	18d1      	adds	r1, r2, r3
 8008320:	f507 5304 	add.w	r3, r7, #8448	; 0x2100
 8008324:	f103 033f 	add.w	r3, r3, #63	; 0x3f
 8008328:	f993 3000 	ldrsb.w	r3, [r3]
 800832c:	1e5a      	subs	r2, r3, #1
 800832e:	4613      	mov	r3, r2
 8008330:	005b      	lsls	r3, r3, #1
 8008332:	441a      	add	r2, r3
 8008334:	f507 5305 	add.w	r3, r7, #8512	; 0x2140
 8008338:	f103 0320 	add.w	r3, r3, #32
 800833c:	681b      	ldr	r3, [r3, #0]
 800833e:	4413      	add	r3, r2
 8008340:	680a      	ldr	r2, [r1, #0]
 8008342:	f507 518b 	add.w	r1, r7, #4448	; 0x1160
 8008346:	f101 0108 	add.w	r1, r1, #8
 800834a:	009b      	lsls	r3, r3, #2
 800834c:	440b      	add	r3, r1
 800834e:	3be8      	subs	r3, #232	; 0xe8
 8008350:	601a      	str	r2, [r3, #0]
    for (high_i = 0; high_i <= nxm1 - 2; high_i++) {
 8008352:	f507 5305 	add.w	r3, r7, #8512	; 0x2140
 8008356:	f103 0320 	add.w	r3, r3, #32
 800835a:	681b      	ldr	r3, [r3, #0]
 800835c:	3301      	adds	r3, #1
 800835e:	f507 5205 	add.w	r2, r7, #8512	; 0x2140
 8008362:	f102 0220 	add.w	r2, r2, #32
 8008366:	6013      	str	r3, [r2, #0]
 8008368:	f507 5305 	add.w	r3, r7, #8512	; 0x2140
 800836c:	f103 0310 	add.w	r3, r3, #16
 8008370:	681b      	ldr	r3, [r3, #0]
 8008372:	3b01      	subs	r3, #1
 8008374:	f507 5205 	add.w	r2, r7, #8512	; 0x2140
 8008378:	f102 0220 	add.w	r2, r2, #32
 800837c:	6812      	ldr	r2, [r2, #0]
 800837e:	429a      	cmp	r2, r3
 8008380:	f6ff aed6 	blt.w	8008130 <spline+0xed0>
    }
    md_size_idx_1 = x_size[1];
 8008384:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8008388:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 800838c:	681b      	ldr	r3, [r3, #0]
 800838e:	685b      	ldr	r3, [r3, #4]
 8008390:	f507 5205 	add.w	r2, r7, #8512	; 0x2140
 8008394:	f102 0214 	add.w	r2, r2, #20
 8008398:	6013      	str	r3, [r2, #0]
    high_i = x_size[1];
 800839a:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 800839e:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 80083a2:	681b      	ldr	r3, [r3, #0]
 80083a4:	685b      	ldr	r3, [r3, #4]
 80083a6:	f507 5205 	add.w	r2, r7, #8512	; 0x2140
 80083aa:	f102 0220 	add.w	r2, r2, #32
 80083ae:	6013      	str	r3, [r2, #0]
    memcpy(&md_data[0], &x_data[0], (unsigned int)high_i * sizeof(float));
 80083b0:	f507 5305 	add.w	r3, r7, #8512	; 0x2140
 80083b4:	f103 0320 	add.w	r3, r3, #32
 80083b8:	681b      	ldr	r3, [r3, #0]
 80083ba:	009a      	lsls	r2, r3, #2
 80083bc:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 80083c0:	f5a3 71ae 	sub.w	r1, r3, #348	; 0x15c
 80083c4:	f507 5389 	add.w	r3, r7, #4384	; 0x1120
 80083c8:	f103 0308 	add.w	r3, r3, #8
 80083cc:	3b18      	subs	r3, #24
 80083ce:	6809      	ldr	r1, [r1, #0]
 80083d0:	4618      	mov	r0, r3
 80083d2:	f009 f995 	bl	8011700 <memcpy>
 80083d6:	e000      	b.n	80083da <spline+0x117a>
    if (x_size[1] <= 2) {
 80083d8:	bf00      	nop
  }
  for (ix = 0; ix < 29; ix++) {
 80083da:	2300      	movs	r3, #0
 80083dc:	f507 5205 	add.w	r2, r7, #8512	; 0x2140
 80083e0:	f102 021c 	add.w	r2, r2, #28
 80083e4:	6013      	str	r3, [r2, #0]
 80083e6:	e161      	b.n	80086ac <spline+0x144c>
    if (rtIsNaN(xx[ix])) {
 80083e8:	f507 5305 	add.w	r3, r7, #8512	; 0x2140
 80083ec:	f103 031c 	add.w	r3, r3, #28
 80083f0:	681b      	ldr	r3, [r3, #0]
 80083f2:	009b      	lsls	r3, r3, #2
 80083f4:	f507 72b4 	add.w	r2, r7, #360	; 0x168
 80083f8:	f5a2 72b4 	sub.w	r2, r2, #360	; 0x168
 80083fc:	6812      	ldr	r2, [r2, #0]
 80083fe:	4413      	add	r3, r2
 8008400:	681b      	ldr	r3, [r3, #0]
 8008402:	4618      	mov	r0, r3
 8008404:	f7f8 f8c8 	bl	8000598 <__aeabi_f2d>
 8008408:	4602      	mov	r2, r0
 800840a:	460b      	mov	r3, r1
 800840c:	ec43 2b10 	vmov	d0, r2, r3
 8008410:	f7fe fa68 	bl	80068e4 <rtIsNaN>
 8008414:	4603      	mov	r3, r0
 8008416:	2b00      	cmp	r3, #0
 8008418:	d00d      	beq.n	8008436 <spline+0x11d6>
      r = rtNaN;
 800841a:	4bac      	ldr	r3, [pc, #688]	; (80086cc <spline+0x146c>)
 800841c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008420:	4610      	mov	r0, r2
 8008422:	4619      	mov	r1, r3
 8008424:	f7f8 fbe8 	bl	8000bf8 <__aeabi_d2f>
 8008428:	4603      	mov	r3, r0
 800842a:	f507 5205 	add.w	r2, r7, #8512	; 0x2140
 800842e:	f102 0224 	add.w	r2, r2, #36	; 0x24
 8008432:	6013      	str	r3, [r2, #0]
 8008434:	e11d      	b.n	8008672 <spline+0x1412>
    } else {
      high_i = md_size_idx_1;
 8008436:	f507 5305 	add.w	r3, r7, #8512	; 0x2140
 800843a:	f103 0314 	add.w	r3, r3, #20
 800843e:	681b      	ldr	r3, [r3, #0]
 8008440:	f507 5205 	add.w	r2, r7, #8512	; 0x2140
 8008444:	f102 0220 	add.w	r2, r2, #32
 8008448:	6013      	str	r3, [r2, #0]
      yoffset = 1;
 800844a:	2301      	movs	r3, #1
 800844c:	f507 5205 	add.w	r2, r7, #8512	; 0x2140
 8008450:	f102 0208 	add.w	r2, r2, #8
 8008454:	6013      	str	r3, [r2, #0]
      low_ip1 = 2;
 8008456:	2302      	movs	r3, #2
 8008458:	f507 5205 	add.w	r2, r7, #8512	; 0x2140
 800845c:	f102 0218 	add.w	r2, r2, #24
 8008460:	6013      	str	r3, [r2, #0]
      while (high_i > low_ip1) {
 8008462:	e070      	b.n	8008546 <spline+0x12e6>
        nxm1 = (yoffset >> 1) + (high_i >> 1);
 8008464:	f507 5305 	add.w	r3, r7, #8512	; 0x2140
 8008468:	f103 0308 	add.w	r3, r3, #8
 800846c:	681b      	ldr	r3, [r3, #0]
 800846e:	105a      	asrs	r2, r3, #1
 8008470:	f507 5305 	add.w	r3, r7, #8512	; 0x2140
 8008474:	f103 0320 	add.w	r3, r3, #32
 8008478:	681b      	ldr	r3, [r3, #0]
 800847a:	105b      	asrs	r3, r3, #1
 800847c:	4413      	add	r3, r2
 800847e:	f507 5205 	add.w	r2, r7, #8512	; 0x2140
 8008482:	f102 0210 	add.w	r2, r2, #16
 8008486:	6013      	str	r3, [r2, #0]
        if (((yoffset & 1) == 1) && ((high_i & 1) == 1)) {
 8008488:	f507 5305 	add.w	r3, r7, #8512	; 0x2140
 800848c:	f103 0308 	add.w	r3, r3, #8
 8008490:	681b      	ldr	r3, [r3, #0]
 8008492:	f003 0301 	and.w	r3, r3, #1
 8008496:	2b00      	cmp	r3, #0
 8008498:	d013      	beq.n	80084c2 <spline+0x1262>
 800849a:	f507 5305 	add.w	r3, r7, #8512	; 0x2140
 800849e:	f103 0320 	add.w	r3, r3, #32
 80084a2:	681b      	ldr	r3, [r3, #0]
 80084a4:	f003 0301 	and.w	r3, r3, #1
 80084a8:	2b00      	cmp	r3, #0
 80084aa:	d00a      	beq.n	80084c2 <spline+0x1262>
          nxm1++;
 80084ac:	f507 5305 	add.w	r3, r7, #8512	; 0x2140
 80084b0:	f103 0310 	add.w	r3, r3, #16
 80084b4:	681b      	ldr	r3, [r3, #0]
 80084b6:	3301      	adds	r3, #1
 80084b8:	f507 5205 	add.w	r2, r7, #8512	; 0x2140
 80084bc:	f102 0210 	add.w	r2, r2, #16
 80084c0:	6013      	str	r3, [r2, #0]
        }
        if (xx[ix] >= md_data[nxm1 - 1]) {
 80084c2:	f507 5305 	add.w	r3, r7, #8512	; 0x2140
 80084c6:	f103 031c 	add.w	r3, r3, #28
 80084ca:	681b      	ldr	r3, [r3, #0]
 80084cc:	009b      	lsls	r3, r3, #2
 80084ce:	f507 72b4 	add.w	r2, r7, #360	; 0x168
 80084d2:	f5a2 72b4 	sub.w	r2, r2, #360	; 0x168
 80084d6:	6812      	ldr	r2, [r2, #0]
 80084d8:	4413      	add	r3, r2
 80084da:	ed93 7a00 	vldr	s14, [r3]
 80084de:	f507 5305 	add.w	r3, r7, #8512	; 0x2140
 80084e2:	f103 0310 	add.w	r3, r3, #16
 80084e6:	681b      	ldr	r3, [r3, #0]
 80084e8:	3b01      	subs	r3, #1
 80084ea:	f507 528b 	add.w	r2, r7, #4448	; 0x1160
 80084ee:	f102 0208 	add.w	r2, r2, #8
 80084f2:	009b      	lsls	r3, r3, #2
 80084f4:	4413      	add	r3, r2
 80084f6:	3b58      	subs	r3, #88	; 0x58
 80084f8:	edd3 7a00 	vldr	s15, [r3]
 80084fc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8008500:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008504:	db15      	blt.n	8008532 <spline+0x12d2>
          yoffset = nxm1;
 8008506:	f507 5305 	add.w	r3, r7, #8512	; 0x2140
 800850a:	f103 0310 	add.w	r3, r3, #16
 800850e:	681b      	ldr	r3, [r3, #0]
 8008510:	f507 5205 	add.w	r2, r7, #8512	; 0x2140
 8008514:	f102 0208 	add.w	r2, r2, #8
 8008518:	6013      	str	r3, [r2, #0]
          low_ip1 = nxm1 + 1;
 800851a:	f507 5305 	add.w	r3, r7, #8512	; 0x2140
 800851e:	f103 0310 	add.w	r3, r3, #16
 8008522:	681b      	ldr	r3, [r3, #0]
 8008524:	3301      	adds	r3, #1
 8008526:	f507 5205 	add.w	r2, r7, #8512	; 0x2140
 800852a:	f102 0218 	add.w	r2, r2, #24
 800852e:	6013      	str	r3, [r2, #0]
 8008530:	e009      	b.n	8008546 <spline+0x12e6>
        } else {
          high_i = nxm1;
 8008532:	f507 5305 	add.w	r3, r7, #8512	; 0x2140
 8008536:	f103 0310 	add.w	r3, r3, #16
 800853a:	681b      	ldr	r3, [r3, #0]
 800853c:	f507 5205 	add.w	r2, r7, #8512	; 0x2140
 8008540:	f102 0220 	add.w	r2, r2, #32
 8008544:	6013      	str	r3, [r2, #0]
      while (high_i > low_ip1) {
 8008546:	f507 5305 	add.w	r3, r7, #8512	; 0x2140
 800854a:	f103 0320 	add.w	r3, r3, #32
 800854e:	681a      	ldr	r2, [r3, #0]
 8008550:	f507 5305 	add.w	r3, r7, #8512	; 0x2140
 8008554:	f103 0318 	add.w	r3, r3, #24
 8008558:	681b      	ldr	r3, [r3, #0]
 800855a:	429a      	cmp	r2, r3
 800855c:	dc82      	bgt.n	8008464 <spline+0x1204>
        }
      }
      dzdxdx = xx[ix] - md_data[yoffset - 1];
 800855e:	f507 5305 	add.w	r3, r7, #8512	; 0x2140
 8008562:	f103 031c 	add.w	r3, r3, #28
 8008566:	681b      	ldr	r3, [r3, #0]
 8008568:	009b      	lsls	r3, r3, #2
 800856a:	f507 72b4 	add.w	r2, r7, #360	; 0x168
 800856e:	f5a2 72b4 	sub.w	r2, r2, #360	; 0x168
 8008572:	6812      	ldr	r2, [r2, #0]
 8008574:	4413      	add	r3, r2
 8008576:	ed93 7a00 	vldr	s14, [r3]
 800857a:	f507 5305 	add.w	r3, r7, #8512	; 0x2140
 800857e:	f103 0308 	add.w	r3, r3, #8
 8008582:	681b      	ldr	r3, [r3, #0]
 8008584:	3b01      	subs	r3, #1
 8008586:	f507 528b 	add.w	r2, r7, #4448	; 0x1160
 800858a:	f102 0208 	add.w	r2, r2, #8
 800858e:	009b      	lsls	r3, r3, #2
 8008590:	4413      	add	r3, r2
 8008592:	3b58      	subs	r3, #88	; 0x58
 8008594:	edd3 7a00 	vldr	s15, [r3]
 8008598:	ee77 7a67 	vsub.f32	s15, s14, s15
 800859c:	f507 5304 	add.w	r3, r7, #8448	; 0x2100
 80085a0:	f103 0338 	add.w	r3, r3, #56	; 0x38
 80085a4:	edc3 7a00 	vstr	s15, [r3]
      r = pp_coefs_data[yoffset - 1];
 80085a8:	f507 5305 	add.w	r3, r7, #8512	; 0x2140
 80085ac:	f103 0308 	add.w	r3, r3, #8
 80085b0:	681b      	ldr	r3, [r3, #0]
 80085b2:	3b01      	subs	r3, #1
 80085b4:	f507 528b 	add.w	r2, r7, #4448	; 0x1160
 80085b8:	f102 0208 	add.w	r2, r2, #8
 80085bc:	009b      	lsls	r3, r3, #2
 80085be:	4413      	add	r3, r2
 80085c0:	3be8      	subs	r3, #232	; 0xe8
 80085c2:	681b      	ldr	r3, [r3, #0]
 80085c4:	f507 5205 	add.w	r2, r7, #8512	; 0x2140
 80085c8:	f102 0224 	add.w	r2, r2, #36	; 0x24
 80085cc:	6013      	str	r3, [r2, #0]
      for (high_i = 2; high_i <= pp_coefs_size_idx_1; high_i++) {
 80085ce:	2302      	movs	r3, #2
 80085d0:	f507 5205 	add.w	r2, r7, #8512	; 0x2140
 80085d4:	f102 0220 	add.w	r2, r2, #32
 80085d8:	6013      	str	r3, [r2, #0]
 80085da:	e03e      	b.n	800865a <spline+0x13fa>
        r = dzdxdx * r +
 80085dc:	f507 5304 	add.w	r3, r7, #8448	; 0x2100
 80085e0:	f103 0338 	add.w	r3, r3, #56	; 0x38
 80085e4:	ed93 7a00 	vldr	s14, [r3]
 80085e8:	f507 5305 	add.w	r3, r7, #8512	; 0x2140
 80085ec:	f103 0324 	add.w	r3, r3, #36	; 0x24
 80085f0:	edd3 7a00 	vldr	s15, [r3]
 80085f4:	ee27 7a27 	vmul.f32	s14, s14, s15
            pp_coefs_data[(yoffset + (high_i - 1) * (md_size_idx_1 - 1)) - 1];
 80085f8:	f507 5305 	add.w	r3, r7, #8512	; 0x2140
 80085fc:	f103 0320 	add.w	r3, r3, #32
 8008600:	681b      	ldr	r3, [r3, #0]
 8008602:	3b01      	subs	r3, #1
 8008604:	f507 5205 	add.w	r2, r7, #8512	; 0x2140
 8008608:	f102 0214 	add.w	r2, r2, #20
 800860c:	6812      	ldr	r2, [r2, #0]
 800860e:	3a01      	subs	r2, #1
 8008610:	fb03 f202 	mul.w	r2, r3, r2
 8008614:	f507 5305 	add.w	r3, r7, #8512	; 0x2140
 8008618:	f103 0308 	add.w	r3, r3, #8
 800861c:	681b      	ldr	r3, [r3, #0]
 800861e:	4413      	add	r3, r2
 8008620:	3b01      	subs	r3, #1
 8008622:	f507 528b 	add.w	r2, r7, #4448	; 0x1160
 8008626:	f102 0208 	add.w	r2, r2, #8
 800862a:	009b      	lsls	r3, r3, #2
 800862c:	4413      	add	r3, r2
 800862e:	3be8      	subs	r3, #232	; 0xe8
 8008630:	edd3 7a00 	vldr	s15, [r3]
        r = dzdxdx * r +
 8008634:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008638:	f507 5305 	add.w	r3, r7, #8512	; 0x2140
 800863c:	f103 0324 	add.w	r3, r3, #36	; 0x24
 8008640:	edc3 7a00 	vstr	s15, [r3]
      for (high_i = 2; high_i <= pp_coefs_size_idx_1; high_i++) {
 8008644:	f507 5305 	add.w	r3, r7, #8512	; 0x2140
 8008648:	f103 0320 	add.w	r3, r3, #32
 800864c:	681b      	ldr	r3, [r3, #0]
 800864e:	3301      	adds	r3, #1
 8008650:	f507 5205 	add.w	r2, r7, #8512	; 0x2140
 8008654:	f102 0220 	add.w	r2, r2, #32
 8008658:	6013      	str	r3, [r2, #0]
 800865a:	f507 5305 	add.w	r3, r7, #8512	; 0x2140
 800865e:	f103 0320 	add.w	r3, r3, #32
 8008662:	681a      	ldr	r2, [r3, #0]
 8008664:	f507 5305 	add.w	r3, r7, #8512	; 0x2140
 8008668:	f103 030c 	add.w	r3, r3, #12
 800866c:	681b      	ldr	r3, [r3, #0]
 800866e:	429a      	cmp	r2, r3
 8008670:	ddb4      	ble.n	80085dc <spline+0x137c>
      }
    }
    output[ix] = r;
 8008672:	f507 5305 	add.w	r3, r7, #8512	; 0x2140
 8008676:	f103 031c 	add.w	r3, r3, #28
 800867a:	681b      	ldr	r3, [r3, #0]
 800867c:	009b      	lsls	r3, r3, #2
 800867e:	f507 5205 	add.w	r2, r7, #8512	; 0x2140
 8008682:	f102 0238 	add.w	r2, r2, #56	; 0x38
 8008686:	6812      	ldr	r2, [r2, #0]
 8008688:	4413      	add	r3, r2
 800868a:	f507 5205 	add.w	r2, r7, #8512	; 0x2140
 800868e:	f102 0224 	add.w	r2, r2, #36	; 0x24
 8008692:	6812      	ldr	r2, [r2, #0]
 8008694:	601a      	str	r2, [r3, #0]
  for (ix = 0; ix < 29; ix++) {
 8008696:	f507 5305 	add.w	r3, r7, #8512	; 0x2140
 800869a:	f103 031c 	add.w	r3, r3, #28
 800869e:	681b      	ldr	r3, [r3, #0]
 80086a0:	3301      	adds	r3, #1
 80086a2:	f507 5205 	add.w	r2, r7, #8512	; 0x2140
 80086a6:	f102 021c 	add.w	r2, r2, #28
 80086aa:	6013      	str	r3, [r2, #0]
 80086ac:	f507 5305 	add.w	r3, r7, #8512	; 0x2140
 80086b0:	f103 031c 	add.w	r3, r3, #28
 80086b4:	681b      	ldr	r3, [r3, #0]
 80086b6:	2b1c      	cmp	r3, #28
 80086b8:	f77f ae96 	ble.w	80083e8 <spline+0x1188>
  }
}
 80086bc:	bf00      	nop
 80086be:	bf00      	nop
 80086c0:	f507 5705 	add.w	r7, r7, #8512	; 0x2140
 80086c4:	3728      	adds	r7, #40	; 0x28
 80086c6:	46bd      	mov	sp, r7
 80086c8:	bdb0      	pop	{r4, r5, r7, pc}
 80086ca:	bf00      	nop
 80086cc:	20000370 	.word	0x20000370

080086d0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80086d0:	b480      	push	{r7}
 80086d2:	b083      	sub	sp, #12
 80086d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80086d6:	4b0f      	ldr	r3, [pc, #60]	; (8008714 <HAL_MspInit+0x44>)
 80086d8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80086da:	4a0e      	ldr	r2, [pc, #56]	; (8008714 <HAL_MspInit+0x44>)
 80086dc:	f043 0301 	orr.w	r3, r3, #1
 80086e0:	6613      	str	r3, [r2, #96]	; 0x60
 80086e2:	4b0c      	ldr	r3, [pc, #48]	; (8008714 <HAL_MspInit+0x44>)
 80086e4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80086e6:	f003 0301 	and.w	r3, r3, #1
 80086ea:	607b      	str	r3, [r7, #4]
 80086ec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80086ee:	4b09      	ldr	r3, [pc, #36]	; (8008714 <HAL_MspInit+0x44>)
 80086f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80086f2:	4a08      	ldr	r2, [pc, #32]	; (8008714 <HAL_MspInit+0x44>)
 80086f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80086f8:	6593      	str	r3, [r2, #88]	; 0x58
 80086fa:	4b06      	ldr	r3, [pc, #24]	; (8008714 <HAL_MspInit+0x44>)
 80086fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80086fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008702:	603b      	str	r3, [r7, #0]
 8008704:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8008706:	bf00      	nop
 8008708:	370c      	adds	r7, #12
 800870a:	46bd      	mov	sp, r7
 800870c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008710:	4770      	bx	lr
 8008712:	bf00      	nop
 8008714:	40021000 	.word	0x40021000

08008718 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8008718:	b580      	push	{r7, lr}
 800871a:	b09e      	sub	sp, #120	; 0x78
 800871c:	af00      	add	r7, sp, #0
 800871e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008720:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8008724:	2200      	movs	r2, #0
 8008726:	601a      	str	r2, [r3, #0]
 8008728:	605a      	str	r2, [r3, #4]
 800872a:	609a      	str	r2, [r3, #8]
 800872c:	60da      	str	r2, [r3, #12]
 800872e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8008730:	f107 0310 	add.w	r3, r7, #16
 8008734:	2254      	movs	r2, #84	; 0x54
 8008736:	2100      	movs	r1, #0
 8008738:	4618      	mov	r0, r3
 800873a:	f008 ffef 	bl	801171c <memset>
  if(hadc->Instance==ADC1)
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	681b      	ldr	r3, [r3, #0]
 8008742:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008746:	d15e      	bne.n	8008806 <HAL_ADC_MspInit+0xee>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8008748:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800874c:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 800874e:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8008752:	657b      	str	r3, [r7, #84]	; 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8008754:	f107 0310 	add.w	r3, r7, #16
 8008758:	4618      	mov	r0, r3
 800875a:	f005 f9cd 	bl	800daf8 <HAL_RCCEx_PeriphCLKConfig>
 800875e:	4603      	mov	r3, r0
 8008760:	2b00      	cmp	r3, #0
 8008762:	d001      	beq.n	8008768 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8008764:	f7fc fdee 	bl	8005344 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8008768:	4b29      	ldr	r3, [pc, #164]	; (8008810 <HAL_ADC_MspInit+0xf8>)
 800876a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800876c:	4a28      	ldr	r2, [pc, #160]	; (8008810 <HAL_ADC_MspInit+0xf8>)
 800876e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8008772:	64d3      	str	r3, [r2, #76]	; 0x4c
 8008774:	4b26      	ldr	r3, [pc, #152]	; (8008810 <HAL_ADC_MspInit+0xf8>)
 8008776:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008778:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800877c:	60fb      	str	r3, [r7, #12]
 800877e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8008780:	4b23      	ldr	r3, [pc, #140]	; (8008810 <HAL_ADC_MspInit+0xf8>)
 8008782:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008784:	4a22      	ldr	r2, [pc, #136]	; (8008810 <HAL_ADC_MspInit+0xf8>)
 8008786:	f043 0302 	orr.w	r3, r3, #2
 800878a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800878c:	4b20      	ldr	r3, [pc, #128]	; (8008810 <HAL_ADC_MspInit+0xf8>)
 800878e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008790:	f003 0302 	and.w	r3, r3, #2
 8008794:	60bb      	str	r3, [r7, #8]
 8008796:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PB0     ------> ADC1_IN15
    */
    GPIO_InitStruct.Pin = AIn_Pin;
 8008798:	2301      	movs	r3, #1
 800879a:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800879c:	2303      	movs	r3, #3
 800879e:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80087a0:	2300      	movs	r3, #0
 80087a2:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(AIn_GPIO_Port, &GPIO_InitStruct);
 80087a4:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80087a8:	4619      	mov	r1, r3
 80087aa:	481a      	ldr	r0, [pc, #104]	; (8008814 <HAL_ADC_MspInit+0xfc>)
 80087ac:	f003 fbdc 	bl	800bf68 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 80087b0:	4b19      	ldr	r3, [pc, #100]	; (8008818 <HAL_ADC_MspInit+0x100>)
 80087b2:	4a1a      	ldr	r2, [pc, #104]	; (800881c <HAL_ADC_MspInit+0x104>)
 80087b4:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 80087b6:	4b18      	ldr	r3, [pc, #96]	; (8008818 <HAL_ADC_MspInit+0x100>)
 80087b8:	2205      	movs	r2, #5
 80087ba:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80087bc:	4b16      	ldr	r3, [pc, #88]	; (8008818 <HAL_ADC_MspInit+0x100>)
 80087be:	2200      	movs	r2, #0
 80087c0:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80087c2:	4b15      	ldr	r3, [pc, #84]	; (8008818 <HAL_ADC_MspInit+0x100>)
 80087c4:	2200      	movs	r2, #0
 80087c6:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80087c8:	4b13      	ldr	r3, [pc, #76]	; (8008818 <HAL_ADC_MspInit+0x100>)
 80087ca:	2280      	movs	r2, #128	; 0x80
 80087cc:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80087ce:	4b12      	ldr	r3, [pc, #72]	; (8008818 <HAL_ADC_MspInit+0x100>)
 80087d0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80087d4:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80087d6:	4b10      	ldr	r3, [pc, #64]	; (8008818 <HAL_ADC_MspInit+0x100>)
 80087d8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80087dc:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 80087de:	4b0e      	ldr	r3, [pc, #56]	; (8008818 <HAL_ADC_MspInit+0x100>)
 80087e0:	2200      	movs	r2, #0
 80087e2:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80087e4:	4b0c      	ldr	r3, [pc, #48]	; (8008818 <HAL_ADC_MspInit+0x100>)
 80087e6:	2200      	movs	r2, #0
 80087e8:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80087ea:	480b      	ldr	r0, [pc, #44]	; (8008818 <HAL_ADC_MspInit+0x100>)
 80087ec:	f003 f8f0 	bl	800b9d0 <HAL_DMA_Init>
 80087f0:	4603      	mov	r3, r0
 80087f2:	2b00      	cmp	r3, #0
 80087f4:	d001      	beq.n	80087fa <HAL_ADC_MspInit+0xe2>
    {
      Error_Handler();
 80087f6:	f7fc fda5 	bl	8005344 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	4a06      	ldr	r2, [pc, #24]	; (8008818 <HAL_ADC_MspInit+0x100>)
 80087fe:	655a      	str	r2, [r3, #84]	; 0x54
 8008800:	4a05      	ldr	r2, [pc, #20]	; (8008818 <HAL_ADC_MspInit+0x100>)
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8008806:	bf00      	nop
 8008808:	3778      	adds	r7, #120	; 0x78
 800880a:	46bd      	mov	sp, r7
 800880c:	bd80      	pop	{r7, pc}
 800880e:	bf00      	nop
 8008810:	40021000 	.word	0x40021000
 8008814:	48000400 	.word	0x48000400
 8008818:	20000774 	.word	0x20000774
 800881c:	40020008 	.word	0x40020008

08008820 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8008820:	b580      	push	{r7, lr}
 8008822:	b0a0      	sub	sp, #128	; 0x80
 8008824:	af00      	add	r7, sp, #0
 8008826:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008828:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800882c:	2200      	movs	r2, #0
 800882e:	601a      	str	r2, [r3, #0]
 8008830:	605a      	str	r2, [r3, #4]
 8008832:	609a      	str	r2, [r3, #8]
 8008834:	60da      	str	r2, [r3, #12]
 8008836:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8008838:	f107 0318 	add.w	r3, r7, #24
 800883c:	2254      	movs	r2, #84	; 0x54
 800883e:	2100      	movs	r1, #0
 8008840:	4618      	mov	r0, r3
 8008842:	f008 ff6b 	bl	801171c <memset>
  if(hi2c->Instance==I2C1)
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	681b      	ldr	r3, [r3, #0]
 800884a:	4a2e      	ldr	r2, [pc, #184]	; (8008904 <HAL_I2C_MspInit+0xe4>)
 800884c:	4293      	cmp	r3, r2
 800884e:	d154      	bne.n	80088fa <HAL_I2C_MspInit+0xda>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8008850:	2340      	movs	r3, #64	; 0x40
 8008852:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8008854:	2300      	movs	r3, #0
 8008856:	637b      	str	r3, [r7, #52]	; 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8008858:	f107 0318 	add.w	r3, r7, #24
 800885c:	4618      	mov	r0, r3
 800885e:	f005 f94b 	bl	800daf8 <HAL_RCCEx_PeriphCLKConfig>
 8008862:	4603      	mov	r3, r0
 8008864:	2b00      	cmp	r3, #0
 8008866:	d001      	beq.n	800886c <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8008868:	f7fc fd6c 	bl	8005344 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800886c:	4b26      	ldr	r3, [pc, #152]	; (8008908 <HAL_I2C_MspInit+0xe8>)
 800886e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008870:	4a25      	ldr	r2, [pc, #148]	; (8008908 <HAL_I2C_MspInit+0xe8>)
 8008872:	f043 0301 	orr.w	r3, r3, #1
 8008876:	64d3      	str	r3, [r2, #76]	; 0x4c
 8008878:	4b23      	ldr	r3, [pc, #140]	; (8008908 <HAL_I2C_MspInit+0xe8>)
 800887a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800887c:	f003 0301 	and.w	r3, r3, #1
 8008880:	617b      	str	r3, [r7, #20]
 8008882:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8008884:	4b20      	ldr	r3, [pc, #128]	; (8008908 <HAL_I2C_MspInit+0xe8>)
 8008886:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008888:	4a1f      	ldr	r2, [pc, #124]	; (8008908 <HAL_I2C_MspInit+0xe8>)
 800888a:	f043 0302 	orr.w	r3, r3, #2
 800888e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8008890:	4b1d      	ldr	r3, [pc, #116]	; (8008908 <HAL_I2C_MspInit+0xe8>)
 8008892:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008894:	f003 0302 	and.w	r3, r3, #2
 8008898:	613b      	str	r3, [r7, #16]
 800889a:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PA15     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = SCL_Pin;
 800889c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80088a0:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80088a2:	2312      	movs	r3, #18
 80088a4:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80088a6:	2301      	movs	r3, #1
 80088a8:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80088aa:	2300      	movs	r3, #0
 80088ac:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80088ae:	2304      	movs	r3, #4
 80088b0:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(SCL_GPIO_Port, &GPIO_InitStruct);
 80088b2:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80088b6:	4619      	mov	r1, r3
 80088b8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80088bc:	f003 fb54 	bl	800bf68 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SDA_Pin;
 80088c0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80088c4:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80088c6:	2312      	movs	r3, #18
 80088c8:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80088ca:	2301      	movs	r3, #1
 80088cc:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80088ce:	2300      	movs	r3, #0
 80088d0:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80088d2:	2304      	movs	r3, #4
 80088d4:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(SDA_GPIO_Port, &GPIO_InitStruct);
 80088d6:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80088da:	4619      	mov	r1, r3
 80088dc:	480b      	ldr	r0, [pc, #44]	; (800890c <HAL_I2C_MspInit+0xec>)
 80088de:	f003 fb43 	bl	800bf68 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80088e2:	4b09      	ldr	r3, [pc, #36]	; (8008908 <HAL_I2C_MspInit+0xe8>)
 80088e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80088e6:	4a08      	ldr	r2, [pc, #32]	; (8008908 <HAL_I2C_MspInit+0xe8>)
 80088e8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80088ec:	6593      	str	r3, [r2, #88]	; 0x58
 80088ee:	4b06      	ldr	r3, [pc, #24]	; (8008908 <HAL_I2C_MspInit+0xe8>)
 80088f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80088f2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80088f6:	60fb      	str	r3, [r7, #12]
 80088f8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80088fa:	bf00      	nop
 80088fc:	3780      	adds	r7, #128	; 0x80
 80088fe:	46bd      	mov	sp, r7
 8008900:	bd80      	pop	{r7, pc}
 8008902:	bf00      	nop
 8008904:	40005400 	.word	0x40005400
 8008908:	40021000 	.word	0x40021000
 800890c:	48000400 	.word	0x48000400

08008910 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8008910:	b580      	push	{r7, lr}
 8008912:	b08a      	sub	sp, #40	; 0x28
 8008914:	af00      	add	r7, sp, #0
 8008916:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008918:	f107 0314 	add.w	r3, r7, #20
 800891c:	2200      	movs	r2, #0
 800891e:	601a      	str	r2, [r3, #0]
 8008920:	605a      	str	r2, [r3, #4]
 8008922:	609a      	str	r2, [r3, #8]
 8008924:	60da      	str	r2, [r3, #12]
 8008926:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	681b      	ldr	r3, [r3, #0]
 800892c:	4a17      	ldr	r2, [pc, #92]	; (800898c <HAL_SPI_MspInit+0x7c>)
 800892e:	4293      	cmp	r3, r2
 8008930:	d128      	bne.n	8008984 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8008932:	4b17      	ldr	r3, [pc, #92]	; (8008990 <HAL_SPI_MspInit+0x80>)
 8008934:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008936:	4a16      	ldr	r2, [pc, #88]	; (8008990 <HAL_SPI_MspInit+0x80>)
 8008938:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800893c:	6613      	str	r3, [r2, #96]	; 0x60
 800893e:	4b14      	ldr	r3, [pc, #80]	; (8008990 <HAL_SPI_MspInit+0x80>)
 8008940:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008942:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008946:	613b      	str	r3, [r7, #16]
 8008948:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800894a:	4b11      	ldr	r3, [pc, #68]	; (8008990 <HAL_SPI_MspInit+0x80>)
 800894c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800894e:	4a10      	ldr	r2, [pc, #64]	; (8008990 <HAL_SPI_MspInit+0x80>)
 8008950:	f043 0301 	orr.w	r3, r3, #1
 8008954:	64d3      	str	r3, [r2, #76]	; 0x4c
 8008956:	4b0e      	ldr	r3, [pc, #56]	; (8008990 <HAL_SPI_MspInit+0x80>)
 8008958:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800895a:	f003 0301 	and.w	r3, r3, #1
 800895e:	60fb      	str	r3, [r7, #12]
 8008960:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = W5500_SCK_Pin|W5500_MISO_Pin|W5500_MOSI_Pin;
 8008962:	23e0      	movs	r3, #224	; 0xe0
 8008964:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008966:	2302      	movs	r3, #2
 8008968:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800896a:	2300      	movs	r3, #0
 800896c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800896e:	2300      	movs	r3, #0
 8008970:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8008972:	2305      	movs	r3, #5
 8008974:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008976:	f107 0314 	add.w	r3, r7, #20
 800897a:	4619      	mov	r1, r3
 800897c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8008980:	f003 faf2 	bl	800bf68 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8008984:	bf00      	nop
 8008986:	3728      	adds	r7, #40	; 0x28
 8008988:	46bd      	mov	sp, r7
 800898a:	bd80      	pop	{r7, pc}
 800898c:	40013000 	.word	0x40013000
 8008990:	40021000 	.word	0x40021000

08008994 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8008994:	b580      	push	{r7, lr}
 8008996:	b086      	sub	sp, #24
 8008998:	af00      	add	r7, sp, #0
 800899a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	681b      	ldr	r3, [r3, #0]
 80089a0:	4a23      	ldr	r2, [pc, #140]	; (8008a30 <HAL_TIM_Base_MspInit+0x9c>)
 80089a2:	4293      	cmp	r3, r2
 80089a4:	d10c      	bne.n	80089c0 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80089a6:	4b23      	ldr	r3, [pc, #140]	; (8008a34 <HAL_TIM_Base_MspInit+0xa0>)
 80089a8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80089aa:	4a22      	ldr	r2, [pc, #136]	; (8008a34 <HAL_TIM_Base_MspInit+0xa0>)
 80089ac:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80089b0:	6613      	str	r3, [r2, #96]	; 0x60
 80089b2:	4b20      	ldr	r3, [pc, #128]	; (8008a34 <HAL_TIM_Base_MspInit+0xa0>)
 80089b4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80089b6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80089ba:	617b      	str	r3, [r7, #20]
 80089bc:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 80089be:	e032      	b.n	8008a26 <HAL_TIM_Base_MspInit+0x92>
  else if(htim_base->Instance==TIM3)
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	681b      	ldr	r3, [r3, #0]
 80089c4:	4a1c      	ldr	r2, [pc, #112]	; (8008a38 <HAL_TIM_Base_MspInit+0xa4>)
 80089c6:	4293      	cmp	r3, r2
 80089c8:	d114      	bne.n	80089f4 <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80089ca:	4b1a      	ldr	r3, [pc, #104]	; (8008a34 <HAL_TIM_Base_MspInit+0xa0>)
 80089cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80089ce:	4a19      	ldr	r2, [pc, #100]	; (8008a34 <HAL_TIM_Base_MspInit+0xa0>)
 80089d0:	f043 0302 	orr.w	r3, r3, #2
 80089d4:	6593      	str	r3, [r2, #88]	; 0x58
 80089d6:	4b17      	ldr	r3, [pc, #92]	; (8008a34 <HAL_TIM_Base_MspInit+0xa0>)
 80089d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80089da:	f003 0302 	and.w	r3, r3, #2
 80089de:	613b      	str	r3, [r7, #16]
 80089e0:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80089e2:	2200      	movs	r2, #0
 80089e4:	2100      	movs	r1, #0
 80089e6:	201d      	movs	r0, #29
 80089e8:	f002 ffb9 	bl	800b95e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80089ec:	201d      	movs	r0, #29
 80089ee:	f002 ffd0 	bl	800b992 <HAL_NVIC_EnableIRQ>
}
 80089f2:	e018      	b.n	8008a26 <HAL_TIM_Base_MspInit+0x92>
  else if(htim_base->Instance==TIM4)
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	681b      	ldr	r3, [r3, #0]
 80089f8:	4a10      	ldr	r2, [pc, #64]	; (8008a3c <HAL_TIM_Base_MspInit+0xa8>)
 80089fa:	4293      	cmp	r3, r2
 80089fc:	d113      	bne.n	8008a26 <HAL_TIM_Base_MspInit+0x92>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80089fe:	4b0d      	ldr	r3, [pc, #52]	; (8008a34 <HAL_TIM_Base_MspInit+0xa0>)
 8008a00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008a02:	4a0c      	ldr	r2, [pc, #48]	; (8008a34 <HAL_TIM_Base_MspInit+0xa0>)
 8008a04:	f043 0304 	orr.w	r3, r3, #4
 8008a08:	6593      	str	r3, [r2, #88]	; 0x58
 8008a0a:	4b0a      	ldr	r3, [pc, #40]	; (8008a34 <HAL_TIM_Base_MspInit+0xa0>)
 8008a0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008a0e:	f003 0304 	and.w	r3, r3, #4
 8008a12:	60fb      	str	r3, [r7, #12]
 8008a14:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8008a16:	2200      	movs	r2, #0
 8008a18:	2100      	movs	r1, #0
 8008a1a:	201e      	movs	r0, #30
 8008a1c:	f002 ff9f 	bl	800b95e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8008a20:	201e      	movs	r0, #30
 8008a22:	f002 ffb6 	bl	800b992 <HAL_NVIC_EnableIRQ>
}
 8008a26:	bf00      	nop
 8008a28:	3718      	adds	r7, #24
 8008a2a:	46bd      	mov	sp, r7
 8008a2c:	bd80      	pop	{r7, pc}
 8008a2e:	bf00      	nop
 8008a30:	40012c00 	.word	0x40012c00
 8008a34:	40021000 	.word	0x40021000
 8008a38:	40000400 	.word	0x40000400
 8008a3c:	40000800 	.word	0x40000800

08008a40 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8008a40:	b580      	push	{r7, lr}
 8008a42:	b088      	sub	sp, #32
 8008a44:	af00      	add	r7, sp, #0
 8008a46:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008a48:	f107 030c 	add.w	r3, r7, #12
 8008a4c:	2200      	movs	r2, #0
 8008a4e:	601a      	str	r2, [r3, #0]
 8008a50:	605a      	str	r2, [r3, #4]
 8008a52:	609a      	str	r2, [r3, #8]
 8008a54:	60da      	str	r2, [r3, #12]
 8008a56:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	681b      	ldr	r3, [r3, #0]
 8008a5c:	4a1b      	ldr	r2, [pc, #108]	; (8008acc <HAL_TIM_MspPostInit+0x8c>)
 8008a5e:	4293      	cmp	r3, r2
 8008a60:	d12f      	bne.n	8008ac2 <HAL_TIM_MspPostInit+0x82>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008a62:	4b1b      	ldr	r3, [pc, #108]	; (8008ad0 <HAL_TIM_MspPostInit+0x90>)
 8008a64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008a66:	4a1a      	ldr	r2, [pc, #104]	; (8008ad0 <HAL_TIM_MspPostInit+0x90>)
 8008a68:	f043 0301 	orr.w	r3, r3, #1
 8008a6c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8008a6e:	4b18      	ldr	r3, [pc, #96]	; (8008ad0 <HAL_TIM_MspPostInit+0x90>)
 8008a70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008a72:	f003 0301 	and.w	r3, r3, #1
 8008a76:	60bb      	str	r3, [r7, #8]
 8008a78:	68bb      	ldr	r3, [r7, #8]
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    PA11     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = Z1_Pin|Z2_Pin|Z3_Pin;
 8008a7a:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8008a7e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008a80:	2302      	movs	r3, #2
 8008a82:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008a84:	2300      	movs	r3, #0
 8008a86:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008a88:	2300      	movs	r3, #0
 8008a8a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8008a8c:	2306      	movs	r3, #6
 8008a8e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008a90:	f107 030c 	add.w	r3, r7, #12
 8008a94:	4619      	mov	r1, r3
 8008a96:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8008a9a:	f003 fa65 	bl	800bf68 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = Z4_Pin;
 8008a9e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8008aa2:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008aa4:	2302      	movs	r3, #2
 8008aa6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008aa8:	2300      	movs	r3, #0
 8008aaa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008aac:	2300      	movs	r3, #0
 8008aae:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF11_TIM1;
 8008ab0:	230b      	movs	r3, #11
 8008ab2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(Z4_GPIO_Port, &GPIO_InitStruct);
 8008ab4:	f107 030c 	add.w	r3, r7, #12
 8008ab8:	4619      	mov	r1, r3
 8008aba:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8008abe:	f003 fa53 	bl	800bf68 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8008ac2:	bf00      	nop
 8008ac4:	3720      	adds	r7, #32
 8008ac6:	46bd      	mov	sp, r7
 8008ac8:	bd80      	pop	{r7, pc}
 8008aca:	bf00      	nop
 8008acc:	40012c00 	.word	0x40012c00
 8008ad0:	40021000 	.word	0x40021000

08008ad4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8008ad4:	b580      	push	{r7, lr}
 8008ad6:	b09e      	sub	sp, #120	; 0x78
 8008ad8:	af00      	add	r7, sp, #0
 8008ada:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008adc:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8008ae0:	2200      	movs	r2, #0
 8008ae2:	601a      	str	r2, [r3, #0]
 8008ae4:	605a      	str	r2, [r3, #4]
 8008ae6:	609a      	str	r2, [r3, #8]
 8008ae8:	60da      	str	r2, [r3, #12]
 8008aea:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8008aec:	f107 0310 	add.w	r3, r7, #16
 8008af0:	2254      	movs	r2, #84	; 0x54
 8008af2:	2100      	movs	r1, #0
 8008af4:	4618      	mov	r0, r3
 8008af6:	f008 fe11 	bl	801171c <memset>
  if(huart->Instance==USART1)
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	681b      	ldr	r3, [r3, #0]
 8008afe:	4a1e      	ldr	r2, [pc, #120]	; (8008b78 <HAL_UART_MspInit+0xa4>)
 8008b00:	4293      	cmp	r3, r2
 8008b02:	d135      	bne.n	8008b70 <HAL_UART_MspInit+0x9c>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8008b04:	2301      	movs	r3, #1
 8008b06:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_HSI;
 8008b08:	2302      	movs	r3, #2
 8008b0a:	617b      	str	r3, [r7, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8008b0c:	f107 0310 	add.w	r3, r7, #16
 8008b10:	4618      	mov	r0, r3
 8008b12:	f004 fff1 	bl	800daf8 <HAL_RCCEx_PeriphCLKConfig>
 8008b16:	4603      	mov	r3, r0
 8008b18:	2b00      	cmp	r3, #0
 8008b1a:	d001      	beq.n	8008b20 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8008b1c:	f7fc fc12 	bl	8005344 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8008b20:	4b16      	ldr	r3, [pc, #88]	; (8008b7c <HAL_UART_MspInit+0xa8>)
 8008b22:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008b24:	4a15      	ldr	r2, [pc, #84]	; (8008b7c <HAL_UART_MspInit+0xa8>)
 8008b26:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008b2a:	6613      	str	r3, [r2, #96]	; 0x60
 8008b2c:	4b13      	ldr	r3, [pc, #76]	; (8008b7c <HAL_UART_MspInit+0xa8>)
 8008b2e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008b30:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008b34:	60fb      	str	r3, [r7, #12]
 8008b36:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8008b38:	4b10      	ldr	r3, [pc, #64]	; (8008b7c <HAL_UART_MspInit+0xa8>)
 8008b3a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008b3c:	4a0f      	ldr	r2, [pc, #60]	; (8008b7c <HAL_UART_MspInit+0xa8>)
 8008b3e:	f043 0302 	orr.w	r3, r3, #2
 8008b42:	64d3      	str	r3, [r2, #76]	; 0x4c
 8008b44:	4b0d      	ldr	r3, [pc, #52]	; (8008b7c <HAL_UART_MspInit+0xa8>)
 8008b46:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008b48:	f003 0302 	and.w	r3, r3, #2
 8008b4c:	60bb      	str	r3, [r7, #8]
 8008b4e:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = TX_Pin|RX_Pin;
 8008b50:	23c0      	movs	r3, #192	; 0xc0
 8008b52:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008b54:	2302      	movs	r3, #2
 8008b56:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008b58:	2300      	movs	r3, #0
 8008b5a:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008b5c:	2300      	movs	r3, #0
 8008b5e:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8008b60:	2307      	movs	r3, #7
 8008b62:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8008b64:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8008b68:	4619      	mov	r1, r3
 8008b6a:	4805      	ldr	r0, [pc, #20]	; (8008b80 <HAL_UART_MspInit+0xac>)
 8008b6c:	f003 f9fc 	bl	800bf68 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8008b70:	bf00      	nop
 8008b72:	3778      	adds	r7, #120	; 0x78
 8008b74:	46bd      	mov	sp, r7
 8008b76:	bd80      	pop	{r7, pc}
 8008b78:	40013800 	.word	0x40013800
 8008b7c:	40021000 	.word	0x40021000
 8008b80:	48000400 	.word	0x48000400

08008b84 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8008b84:	b480      	push	{r7}
 8008b86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8008b88:	e7fe      	b.n	8008b88 <NMI_Handler+0x4>

08008b8a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8008b8a:	b480      	push	{r7}
 8008b8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8008b8e:	e7fe      	b.n	8008b8e <HardFault_Handler+0x4>

08008b90 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8008b90:	b480      	push	{r7}
 8008b92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8008b94:	e7fe      	b.n	8008b94 <MemManage_Handler+0x4>

08008b96 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8008b96:	b480      	push	{r7}
 8008b98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8008b9a:	e7fe      	b.n	8008b9a <BusFault_Handler+0x4>

08008b9c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8008b9c:	b480      	push	{r7}
 8008b9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8008ba0:	e7fe      	b.n	8008ba0 <UsageFault_Handler+0x4>

08008ba2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8008ba2:	b480      	push	{r7}
 8008ba4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8008ba6:	bf00      	nop
 8008ba8:	46bd      	mov	sp, r7
 8008baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bae:	4770      	bx	lr

08008bb0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8008bb0:	b480      	push	{r7}
 8008bb2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8008bb4:	bf00      	nop
 8008bb6:	46bd      	mov	sp, r7
 8008bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bbc:	4770      	bx	lr

08008bbe <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8008bbe:	b480      	push	{r7}
 8008bc0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8008bc2:	bf00      	nop
 8008bc4:	46bd      	mov	sp, r7
 8008bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bca:	4770      	bx	lr

08008bcc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8008bcc:	b580      	push	{r7, lr}
 8008bce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	static uint16_t ticks = 0;
	ticks++;
 8008bd0:	4b09      	ldr	r3, [pc, #36]	; (8008bf8 <SysTick_Handler+0x2c>)
 8008bd2:	881b      	ldrh	r3, [r3, #0]
 8008bd4:	3301      	adds	r3, #1
 8008bd6:	b29a      	uxth	r2, r3
 8008bd8:	4b07      	ldr	r3, [pc, #28]	; (8008bf8 <SysTick_Handler+0x2c>)
 8008bda:	801a      	strh	r2, [r3, #0]
	if(ticks >= 1000) {
 8008bdc:	4b06      	ldr	r3, [pc, #24]	; (8008bf8 <SysTick_Handler+0x2c>)
 8008bde:	881b      	ldrh	r3, [r3, #0]
 8008be0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008be4:	d304      	bcc.n	8008bf0 <SysTick_Handler+0x24>
		DHCP_time_handler();
 8008be6:	f7fb fb2f 	bl	8004248 <DHCP_time_handler>
		ticks = 0;
 8008bea:	4b03      	ldr	r3, [pc, #12]	; (8008bf8 <SysTick_Handler+0x2c>)
 8008bec:	2200      	movs	r2, #0
 8008bee:	801a      	strh	r2, [r3, #0]
	}

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8008bf0:	f000 fff0 	bl	8009bd4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8008bf4:	bf00      	nop
 8008bf6:	bd80      	pop	{r7, pc}
 8008bf8:	200027f0 	.word	0x200027f0

08008bfc <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8008bfc:	b580      	push	{r7, lr}
 8008bfe:	b082      	sub	sp, #8
 8008c00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */
	if ( (haftConf--) == 0) { // Половина преобразования
 8008c02:	4b94      	ldr	r3, [pc, #592]	; (8008e54 <DMA1_Channel1_IRQHandler+0x258>)
 8008c04:	881b      	ldrh	r3, [r3, #0]
 8008c06:	1e5a      	subs	r2, r3, #1
 8008c08:	b291      	uxth	r1, r2
 8008c0a:	4a92      	ldr	r2, [pc, #584]	; (8008e54 <DMA1_Channel1_IRQHandler+0x258>)
 8008c0c:	8011      	strh	r1, [r2, #0]
 8008c0e:	2b00      	cmp	r3, #0
 8008c10:	f040 8118 	bne.w	8008e44 <DMA1_Channel1_IRQHandler+0x248>
		LED_PULSE
 8008c14:	2201      	movs	r2, #1
 8008c16:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8008c1a:	488f      	ldr	r0, [pc, #572]	; (8008e58 <DMA1_Channel1_IRQHandler+0x25c>)
 8008c1c:	f003 fb26 	bl	800c26c <HAL_GPIO_WritePin>
 8008c20:	2200      	movs	r2, #0
 8008c22:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8008c26:	488c      	ldr	r0, [pc, #560]	; (8008e58 <DMA1_Channel1_IRQHandler+0x25c>)
 8008c28:	f003 fb20 	bl	800c26c <HAL_GPIO_WritePin>
		HAL_ADC_Stop_DMA(&hadc1);
 8008c2c:	488b      	ldr	r0, [pc, #556]	; (8008e5c <DMA1_Channel1_IRQHandler+0x260>)
 8008c2e:	f001 fd17 	bl	800a660 <HAL_ADC_Stop_DMA>
		if (ajustCount++ > AJUST_DELAY) {
 8008c32:	4b8b      	ldr	r3, [pc, #556]	; (8008e60 <DMA1_Channel1_IRQHandler+0x264>)
 8008c34:	881b      	ldrh	r3, [r3, #0]
 8008c36:	1c5a      	adds	r2, r3, #1
 8008c38:	b291      	uxth	r1, r2
 8008c3a:	4a89      	ldr	r2, [pc, #548]	; (8008e60 <DMA1_Channel1_IRQHandler+0x264>)
 8008c3c:	8011      	strh	r1, [r2, #0]
 8008c3e:	2b00      	cmp	r3, #0
 8008c40:	f000 80c8 	beq.w	8008dd4 <DMA1_Channel1_IRQHandler+0x1d8>
			/* Автоматическая регулировка уровня сигнала */
			ajustCount = 0;
 8008c44:	4b86      	ldr	r3, [pc, #536]	; (8008e60 <DMA1_Channel1_IRQHandler+0x264>)
 8008c46:	2200      	movs	r2, #0
 8008c48:	801a      	strh	r2, [r3, #0]
			maxLevel = 0, minLevel = 4096, avgLevel = 0;
 8008c4a:	4b86      	ldr	r3, [pc, #536]	; (8008e64 <DMA1_Channel1_IRQHandler+0x268>)
 8008c4c:	2200      	movs	r2, #0
 8008c4e:	801a      	strh	r2, [r3, #0]
 8008c50:	4b85      	ldr	r3, [pc, #532]	; (8008e68 <DMA1_Channel1_IRQHandler+0x26c>)
 8008c52:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8008c56:	801a      	strh	r2, [r3, #0]
 8008c58:	4b84      	ldr	r3, [pc, #528]	; (8008e6c <DMA1_Channel1_IRQHandler+0x270>)
 8008c5a:	f04f 0200 	mov.w	r2, #0
 8008c5e:	601a      	str	r2, [r3, #0]
			for (int ii = 0; ii < CONVERSION_COUNT; ii++) {
 8008c60:	2300      	movs	r3, #0
 8008c62:	607b      	str	r3, [r7, #4]
 8008c64:	e02e      	b.n	8008cc4 <DMA1_Channel1_IRQHandler+0xc8>
				avgLevel = avgLevel + adcBuffer[ii];
 8008c66:	4a82      	ldr	r2, [pc, #520]	; (8008e70 <DMA1_Channel1_IRQHandler+0x274>)
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008c6e:	ee07 3a90 	vmov	s15, r3
 8008c72:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8008c76:	4b7d      	ldr	r3, [pc, #500]	; (8008e6c <DMA1_Channel1_IRQHandler+0x270>)
 8008c78:	edd3 7a00 	vldr	s15, [r3]
 8008c7c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008c80:	4b7a      	ldr	r3, [pc, #488]	; (8008e6c <DMA1_Channel1_IRQHandler+0x270>)
 8008c82:	edc3 7a00 	vstr	s15, [r3]
				if (maxLevel < adcBuffer[ii]) {
 8008c86:	4a7a      	ldr	r2, [pc, #488]	; (8008e70 <DMA1_Channel1_IRQHandler+0x274>)
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8008c8e:	4b75      	ldr	r3, [pc, #468]	; (8008e64 <DMA1_Channel1_IRQHandler+0x268>)
 8008c90:	881b      	ldrh	r3, [r3, #0]
 8008c92:	429a      	cmp	r2, r3
 8008c94:	d905      	bls.n	8008ca2 <DMA1_Channel1_IRQHandler+0xa6>
					maxLevel = adcBuffer[ii];
 8008c96:	4a76      	ldr	r2, [pc, #472]	; (8008e70 <DMA1_Channel1_IRQHandler+0x274>)
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8008c9e:	4b71      	ldr	r3, [pc, #452]	; (8008e64 <DMA1_Channel1_IRQHandler+0x268>)
 8008ca0:	801a      	strh	r2, [r3, #0]
				}
				if (minLevel > adcBuffer[ii]) {
 8008ca2:	4a73      	ldr	r2, [pc, #460]	; (8008e70 <DMA1_Channel1_IRQHandler+0x274>)
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8008caa:	4b6f      	ldr	r3, [pc, #444]	; (8008e68 <DMA1_Channel1_IRQHandler+0x26c>)
 8008cac:	881b      	ldrh	r3, [r3, #0]
 8008cae:	429a      	cmp	r2, r3
 8008cb0:	d205      	bcs.n	8008cbe <DMA1_Channel1_IRQHandler+0xc2>
					minLevel = adcBuffer[ii];
 8008cb2:	4a6f      	ldr	r2, [pc, #444]	; (8008e70 <DMA1_Channel1_IRQHandler+0x274>)
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8008cba:	4b6b      	ldr	r3, [pc, #428]	; (8008e68 <DMA1_Channel1_IRQHandler+0x26c>)
 8008cbc:	801a      	strh	r2, [r3, #0]
			for (int ii = 0; ii < CONVERSION_COUNT; ii++) {
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	3301      	adds	r3, #1
 8008cc2:	607b      	str	r3, [r7, #4]
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008cca:	dbcc      	blt.n	8008c66 <DMA1_Channel1_IRQHandler+0x6a>
				}
			}
			avgLevel = avgLevel / CONVERSION_COUNT;
 8008ccc:	4b67      	ldr	r3, [pc, #412]	; (8008e6c <DMA1_Channel1_IRQHandler+0x270>)
 8008cce:	ed93 7a00 	vldr	s14, [r3]
 8008cd2:	eddf 6a68 	vldr	s13, [pc, #416]	; 8008e74 <DMA1_Channel1_IRQHandler+0x278>
 8008cd6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8008cda:	4b64      	ldr	r3, [pc, #400]	; (8008e6c <DMA1_Channel1_IRQHandler+0x270>)
 8008cdc:	edc3 7a00 	vstr	s15, [r3]
			if (abs(minLevel - avgLevel) > abs(maxLevel - avgLevel)) {
 8008ce0:	4b61      	ldr	r3, [pc, #388]	; (8008e68 <DMA1_Channel1_IRQHandler+0x26c>)
 8008ce2:	881b      	ldrh	r3, [r3, #0]
 8008ce4:	ee07 3a90 	vmov	s15, r3
 8008ce8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8008cec:	4b5f      	ldr	r3, [pc, #380]	; (8008e6c <DMA1_Channel1_IRQHandler+0x270>)
 8008cee:	edd3 7a00 	vldr	s15, [r3]
 8008cf2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008cf6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008cfa:	ee17 3a90 	vmov	r3, s15
 8008cfe:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8008d02:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8008d06:	4b57      	ldr	r3, [pc, #348]	; (8008e64 <DMA1_Channel1_IRQHandler+0x268>)
 8008d08:	881b      	ldrh	r3, [r3, #0]
 8008d0a:	ee07 3a90 	vmov	s15, r3
 8008d0e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8008d12:	4b56      	ldr	r3, [pc, #344]	; (8008e6c <DMA1_Channel1_IRQHandler+0x270>)
 8008d14:	edd3 7a00 	vldr	s15, [r3]
 8008d18:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008d1c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008d20:	ee17 3a90 	vmov	r3, s15
 8008d24:	2b00      	cmp	r3, #0
 8008d26:	bfb8      	it	lt
 8008d28:	425b      	neglt	r3, r3
 8008d2a:	429a      	cmp	r2, r3
 8008d2c:	dd15      	ble.n	8008d5a <DMA1_Channel1_IRQHandler+0x15e>
				maxLevel = abs(minLevel - avgLevel);
 8008d2e:	4b4e      	ldr	r3, [pc, #312]	; (8008e68 <DMA1_Channel1_IRQHandler+0x26c>)
 8008d30:	881b      	ldrh	r3, [r3, #0]
 8008d32:	ee07 3a90 	vmov	s15, r3
 8008d36:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8008d3a:	4b4c      	ldr	r3, [pc, #304]	; (8008e6c <DMA1_Channel1_IRQHandler+0x270>)
 8008d3c:	edd3 7a00 	vldr	s15, [r3]
 8008d40:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008d44:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008d48:	ee17 3a90 	vmov	r3, s15
 8008d4c:	2b00      	cmp	r3, #0
 8008d4e:	bfb8      	it	lt
 8008d50:	425b      	neglt	r3, r3
 8008d52:	b29a      	uxth	r2, r3
 8008d54:	4b43      	ldr	r3, [pc, #268]	; (8008e64 <DMA1_Channel1_IRQHandler+0x268>)
 8008d56:	801a      	strh	r2, [r3, #0]
 8008d58:	e014      	b.n	8008d84 <DMA1_Channel1_IRQHandler+0x188>
			} else {
				maxLevel = abs(maxLevel - avgLevel);
 8008d5a:	4b42      	ldr	r3, [pc, #264]	; (8008e64 <DMA1_Channel1_IRQHandler+0x268>)
 8008d5c:	881b      	ldrh	r3, [r3, #0]
 8008d5e:	ee07 3a90 	vmov	s15, r3
 8008d62:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8008d66:	4b41      	ldr	r3, [pc, #260]	; (8008e6c <DMA1_Channel1_IRQHandler+0x270>)
 8008d68:	edd3 7a00 	vldr	s15, [r3]
 8008d6c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008d70:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008d74:	ee17 3a90 	vmov	r3, s15
 8008d78:	2b00      	cmp	r3, #0
 8008d7a:	bfb8      	it	lt
 8008d7c:	425b      	neglt	r3, r3
 8008d7e:	b29a      	uxth	r2, r3
 8008d80:	4b38      	ldr	r3, [pc, #224]	; (8008e64 <DMA1_Channel1_IRQHandler+0x268>)
 8008d82:	801a      	strh	r2, [r3, #0]
			}
			if (abs(maxLevel - NOMINAL_LEVEL) > ACURACY_LEVEL) {
 8008d84:	4b37      	ldr	r3, [pc, #220]	; (8008e64 <DMA1_Channel1_IRQHandler+0x268>)
 8008d86:	881b      	ldrh	r3, [r3, #0]
 8008d88:	f5a3 73e1 	sub.w	r3, r3, #450	; 0x1c2
 8008d8c:	2b00      	cmp	r3, #0
 8008d8e:	bfb8      	it	lt
 8008d90:	425b      	neglt	r3, r3
 8008d92:	2b32      	cmp	r3, #50	; 0x32
 8008d94:	dd1b      	ble.n	8008dce <DMA1_Channel1_IRQHandler+0x1d2>
				if (maxLevel - NOMINAL_LEVEL > 0) {
 8008d96:	4b33      	ldr	r3, [pc, #204]	; (8008e64 <DMA1_Channel1_IRQHandler+0x268>)
 8008d98:	881b      	ldrh	r3, [r3, #0]
 8008d9a:	f5b3 7fe1 	cmp.w	r3, #450	; 0x1c2
 8008d9e:	d90c      	bls.n	8008dba <DMA1_Channel1_IRQHandler+0x1be>
					levelNominal = false;
 8008da0:	4b35      	ldr	r3, [pc, #212]	; (8008e78 <DMA1_Channel1_IRQHandler+0x27c>)
 8008da2:	2200      	movs	r2, #0
 8008da4:	701a      	strb	r2, [r3, #0]
					/* Сигнал сильный, понижаем уровень */
					#ifdef AD5245
					AD5245level(currentLevel--);
 8008da6:	4b35      	ldr	r3, [pc, #212]	; (8008e7c <DMA1_Channel1_IRQHandler+0x280>)
 8008da8:	781b      	ldrb	r3, [r3, #0]
 8008daa:	1e5a      	subs	r2, r3, #1
 8008dac:	b2d1      	uxtb	r1, r2
 8008dae:	4a33      	ldr	r2, [pc, #204]	; (8008e7c <DMA1_Channel1_IRQHandler+0x280>)
 8008db0:	7011      	strb	r1, [r2, #0]
 8008db2:	4618      	mov	r0, r3
 8008db4:	f7fb fb16 	bl	80043e4 <AD5245level>
 8008db8:	e00c      	b.n	8008dd4 <DMA1_Channel1_IRQHandler+0x1d8>
					#endif
				} else {
					/* Сигнал слабый, повышаем уровень */
					#ifdef AD5245
					AD5245level(currentLevel++);
 8008dba:	4b30      	ldr	r3, [pc, #192]	; (8008e7c <DMA1_Channel1_IRQHandler+0x280>)
 8008dbc:	781b      	ldrb	r3, [r3, #0]
 8008dbe:	1c5a      	adds	r2, r3, #1
 8008dc0:	b2d1      	uxtb	r1, r2
 8008dc2:	4a2e      	ldr	r2, [pc, #184]	; (8008e7c <DMA1_Channel1_IRQHandler+0x280>)
 8008dc4:	7011      	strb	r1, [r2, #0]
 8008dc6:	4618      	mov	r0, r3
 8008dc8:	f7fb fb0c 	bl	80043e4 <AD5245level>
 8008dcc:	e002      	b.n	8008dd4 <DMA1_Channel1_IRQHandler+0x1d8>
					#endif
				}
			} else {  /* Уровень в норме. Накапливаем данные для усреднения */
				levelNominal = true;
 8008dce:	4b2a      	ldr	r3, [pc, #168]	; (8008e78 <DMA1_Channel1_IRQHandler+0x27c>)
 8008dd0:	2201      	movs	r2, #1
 8008dd2:	701a      	strb	r2, [r3, #0]
			}
		}
		if (levelNominal) {
 8008dd4:	4b28      	ldr	r3, [pc, #160]	; (8008e78 <DMA1_Channel1_IRQHandler+0x27c>)
 8008dd6:	781b      	ldrb	r3, [r3, #0]
 8008dd8:	2b00      	cmp	r3, #0
 8008dda:	d033      	beq.n	8008e44 <DMA1_Channel1_IRQHandler+0x248>
			if (mesCount < MEASURE_COUNT - 1) {
 8008ddc:	4b28      	ldr	r3, [pc, #160]	; (8008e80 <DMA1_Channel1_IRQHandler+0x284>)
 8008dde:	881b      	ldrh	r3, [r3, #0]
 8008de0:	2b0e      	cmp	r3, #14
 8008de2:	d826      	bhi.n	8008e32 <DMA1_Channel1_IRQHandler+0x236>
				for (int ii = 0; ii < CONVERSION_COUNT; ii++) {
 8008de4:	2300      	movs	r3, #0
 8008de6:	603b      	str	r3, [r7, #0]
 8008de8:	e018      	b.n	8008e1c <DMA1_Channel1_IRQHandler+0x220>
					measArray[ii] = measArray[ii] + adcBuffer[ii];
 8008dea:	4a26      	ldr	r2, [pc, #152]	; (8008e84 <DMA1_Channel1_IRQHandler+0x288>)
 8008dec:	683b      	ldr	r3, [r7, #0]
 8008dee:	009b      	lsls	r3, r3, #2
 8008df0:	4413      	add	r3, r2
 8008df2:	ed93 7a00 	vldr	s14, [r3]
 8008df6:	4a1e      	ldr	r2, [pc, #120]	; (8008e70 <DMA1_Channel1_IRQHandler+0x274>)
 8008df8:	683b      	ldr	r3, [r7, #0]
 8008dfa:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008dfe:	ee07 3a90 	vmov	s15, r3
 8008e02:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008e06:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008e0a:	4a1e      	ldr	r2, [pc, #120]	; (8008e84 <DMA1_Channel1_IRQHandler+0x288>)
 8008e0c:	683b      	ldr	r3, [r7, #0]
 8008e0e:	009b      	lsls	r3, r3, #2
 8008e10:	4413      	add	r3, r2
 8008e12:	edc3 7a00 	vstr	s15, [r3]
				for (int ii = 0; ii < CONVERSION_COUNT; ii++) {
 8008e16:	683b      	ldr	r3, [r7, #0]
 8008e18:	3301      	adds	r3, #1
 8008e1a:	603b      	str	r3, [r7, #0]
 8008e1c:	683b      	ldr	r3, [r7, #0]
 8008e1e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008e22:	dbe2      	blt.n	8008dea <DMA1_Channel1_IRQHandler+0x1ee>
				}
				mesCount++;
 8008e24:	4b16      	ldr	r3, [pc, #88]	; (8008e80 <DMA1_Channel1_IRQHandler+0x284>)
 8008e26:	881b      	ldrh	r3, [r3, #0]
 8008e28:	3301      	adds	r3, #1
 8008e2a:	b29a      	uxth	r2, r3
 8008e2c:	4b14      	ldr	r3, [pc, #80]	; (8008e80 <DMA1_Channel1_IRQHandler+0x284>)
 8008e2e:	801a      	strh	r2, [r3, #0]
 8008e30:	e008      	b.n	8008e44 <DMA1_Channel1_IRQHandler+0x248>
			} else { /* Можно выполнять свертку */
				HAL_TIM_Base_Stop_IT(&htim4);
 8008e32:	4815      	ldr	r0, [pc, #84]	; (8008e88 <DMA1_Channel1_IRQHandler+0x28c>)
 8008e34:	f006 f896 	bl	800ef64 <HAL_TIM_Base_Stop_IT>
				mesCount = 0;
 8008e38:	4b11      	ldr	r3, [pc, #68]	; (8008e80 <DMA1_Channel1_IRQHandler+0x284>)
 8008e3a:	2200      	movs	r2, #0
 8008e3c:	801a      	strh	r2, [r3, #0]
				readyData = true;
 8008e3e:	4b13      	ldr	r3, [pc, #76]	; (8008e8c <DMA1_Channel1_IRQHandler+0x290>)
 8008e40:	2201      	movs	r2, #1
 8008e42:	701a      	strb	r2, [r3, #0]
			}
		}
	}

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8008e44:	4812      	ldr	r0, [pc, #72]	; (8008e90 <DMA1_Channel1_IRQHandler+0x294>)
 8008e46:	f002 ff3f 	bl	800bcc8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8008e4a:	bf00      	nop
 8008e4c:	3708      	adds	r7, #8
 8008e4e:	46bd      	mov	sp, r7
 8008e50:	bd80      	pop	{r7, pc}
 8008e52:	bf00      	nop
 8008e54:	200017d8 	.word	0x200017d8
 8008e58:	48000800 	.word	0x48000800
 8008e5c:	20000708 	.word	0x20000708
 8008e60:	200017dc 	.word	0x200017dc
 8008e64:	200017de 	.word	0x200017de
 8008e68:	200017e0 	.word	0x200017e0
 8008e6c:	200017e8 	.word	0x200017e8
 8008e70:	20000fd8 	.word	0x20000fd8
 8008e74:	44800000 	.word	0x44800000
 8008e78:	200017e4 	.word	0x200017e4
 8008e7c:	20000a08 	.word	0x20000a08
 8008e80:	200017da 	.word	0x200017da
 8008e84:	200017ec 	.word	0x200017ec
 8008e88:	2000092c 	.word	0x2000092c
 8008e8c:	200017e2 	.word	0x200017e2
 8008e90:	20000774 	.word	0x20000774

08008e94 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8008e94:	b580      	push	{r7, lr}
 8008e96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */
	LED_PULSE
 8008e98:	2201      	movs	r2, #1
 8008e9a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8008e9e:	4808      	ldr	r0, [pc, #32]	; (8008ec0 <TIM3_IRQHandler+0x2c>)
 8008ea0:	f003 f9e4 	bl	800c26c <HAL_GPIO_WritePin>
 8008ea4:	2200      	movs	r2, #0
 8008ea6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8008eaa:	4805      	ldr	r0, [pc, #20]	; (8008ec0 <TIM3_IRQHandler+0x2c>)
 8008eac:	f003 f9de 	bl	800c26c <HAL_GPIO_WritePin>
	readyCapture = true;
 8008eb0:	4b04      	ldr	r3, [pc, #16]	; (8008ec4 <TIM3_IRQHandler+0x30>)
 8008eb2:	2201      	movs	r2, #1
 8008eb4:	701a      	strb	r2, [r3, #0]
  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8008eb6:	4804      	ldr	r0, [pc, #16]	; (8008ec8 <TIM3_IRQHandler+0x34>)
 8008eb8:	f006 faec 	bl	800f494 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8008ebc:	bf00      	nop
 8008ebe:	bd80      	pop	{r7, pc}
 8008ec0:	48000800 	.word	0x48000800
 8008ec4:	200017e3 	.word	0x200017e3
 8008ec8:	200008e0 	.word	0x200008e0

08008ecc <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8008ecc:	b580      	push	{r7, lr}
 8008ece:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */
	HAL_TIM_OC_Stop(&htim1, TIM_CHANNEL_1);
 8008ed0:	2100      	movs	r1, #0
 8008ed2:	4818      	ldr	r0, [pc, #96]	; (8008f34 <TIM4_IRQHandler+0x68>)
 8008ed4:	f006 f9e8 	bl	800f2a8 <HAL_TIM_OC_Stop>
	HAL_TIM_OC_Start(&htim1, TIM_CHANNEL_1);
 8008ed8:	2100      	movs	r1, #0
 8008eda:	4816      	ldr	r0, [pc, #88]	; (8008f34 <TIM4_IRQHandler+0x68>)
 8008edc:	f006 f8d2 	bl	800f084 <HAL_TIM_OC_Start>
	//HAL_TIM_IC_Stop_IT(&htim2, TIM_CHANNEL_1);
	//HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_1);
	HAL_GPIO_WritePin(selZ1_GPIO_Port, selZ1_Pin, GPIO_PIN_SET);
 8008ee0:	2201      	movs	r2, #1
 8008ee2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8008ee6:	4814      	ldr	r0, [pc, #80]	; (8008f38 <TIM4_IRQHandler+0x6c>)
 8008ee8:	f003 f9c0 	bl	800c26c <HAL_GPIO_WritePin>
	haftConf = 1;
 8008eec:	4b13      	ldr	r3, [pc, #76]	; (8008f3c <TIM4_IRQHandler+0x70>)
 8008eee:	2201      	movs	r2, #1
 8008ef0:	801a      	strh	r2, [r3, #0]
	readyCapture = true;
 8008ef2:	4b13      	ldr	r3, [pc, #76]	; (8008f40 <TIM4_IRQHandler+0x74>)
 8008ef4:	2201      	movs	r2, #1
 8008ef6:	701a      	strb	r2, [r3, #0]
	LED_PULSE
 8008ef8:	2201      	movs	r2, #1
 8008efa:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8008efe:	4811      	ldr	r0, [pc, #68]	; (8008f44 <TIM4_IRQHandler+0x78>)
 8008f00:	f003 f9b4 	bl	800c26c <HAL_GPIO_WritePin>
 8008f04:	2200      	movs	r2, #0
 8008f06:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8008f0a:	480e      	ldr	r0, [pc, #56]	; (8008f44 <TIM4_IRQHandler+0x78>)
 8008f0c:	f003 f9ae 	bl	800c26c <HAL_GPIO_WritePin>
	if (! readyData) {
 8008f10:	4b0d      	ldr	r3, [pc, #52]	; (8008f48 <TIM4_IRQHandler+0x7c>)
 8008f12:	781b      	ldrb	r3, [r3, #0]
 8008f14:	f083 0301 	eor.w	r3, r3, #1
 8008f18:	b2db      	uxtb	r3, r3
 8008f1a:	2b00      	cmp	r3, #0
 8008f1c:	d005      	beq.n	8008f2a <TIM4_IRQHandler+0x5e>
		//HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_2);
		HAL_ADC_Start_DMA(&hadc1, (uint32_t*) adcBuffer, CONVERSION_COUNT);
 8008f1e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8008f22:	490a      	ldr	r1, [pc, #40]	; (8008f4c <TIM4_IRQHandler+0x80>)
 8008f24:	480a      	ldr	r0, [pc, #40]	; (8008f50 <TIM4_IRQHandler+0x84>)
 8008f26:	f001 fac7 	bl	800a4b8 <HAL_ADC_Start_DMA>
	}

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8008f2a:	480a      	ldr	r0, [pc, #40]	; (8008f54 <TIM4_IRQHandler+0x88>)
 8008f2c:	f006 fab2 	bl	800f494 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8008f30:	bf00      	nop
 8008f32:	bd80      	pop	{r7, pc}
 8008f34:	20000894 	.word	0x20000894
 8008f38:	48000400 	.word	0x48000400
 8008f3c:	200017d8 	.word	0x200017d8
 8008f40:	200017e3 	.word	0x200017e3
 8008f44:	48000800 	.word	0x48000800
 8008f48:	200017e2 	.word	0x200017e2
 8008f4c:	20000fd8 	.word	0x20000fd8
 8008f50:	20000708 	.word	0x20000708
 8008f54:	2000092c 	.word	0x2000092c

08008f58 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8008f58:	b480      	push	{r7}
 8008f5a:	af00      	add	r7, sp, #0
  return 1;
 8008f5c:	2301      	movs	r3, #1
}
 8008f5e:	4618      	mov	r0, r3
 8008f60:	46bd      	mov	sp, r7
 8008f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f66:	4770      	bx	lr

08008f68 <_kill>:

int _kill(int pid, int sig)
{
 8008f68:	b580      	push	{r7, lr}
 8008f6a:	b082      	sub	sp, #8
 8008f6c:	af00      	add	r7, sp, #0
 8008f6e:	6078      	str	r0, [r7, #4]
 8008f70:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8008f72:	f008 fb9b 	bl	80116ac <__errno>
 8008f76:	4603      	mov	r3, r0
 8008f78:	2216      	movs	r2, #22
 8008f7a:	601a      	str	r2, [r3, #0]
  return -1;
 8008f7c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8008f80:	4618      	mov	r0, r3
 8008f82:	3708      	adds	r7, #8
 8008f84:	46bd      	mov	sp, r7
 8008f86:	bd80      	pop	{r7, pc}

08008f88 <_exit>:

void _exit (int status)
{
 8008f88:	b580      	push	{r7, lr}
 8008f8a:	b082      	sub	sp, #8
 8008f8c:	af00      	add	r7, sp, #0
 8008f8e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8008f90:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8008f94:	6878      	ldr	r0, [r7, #4]
 8008f96:	f7ff ffe7 	bl	8008f68 <_kill>
  while (1) {}    /* Make sure we hang here */
 8008f9a:	e7fe      	b.n	8008f9a <_exit+0x12>

08008f9c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8008f9c:	b580      	push	{r7, lr}
 8008f9e:	b086      	sub	sp, #24
 8008fa0:	af00      	add	r7, sp, #0
 8008fa2:	60f8      	str	r0, [r7, #12]
 8008fa4:	60b9      	str	r1, [r7, #8]
 8008fa6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8008fa8:	2300      	movs	r3, #0
 8008faa:	617b      	str	r3, [r7, #20]
 8008fac:	e00a      	b.n	8008fc4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8008fae:	f3af 8000 	nop.w
 8008fb2:	4601      	mov	r1, r0
 8008fb4:	68bb      	ldr	r3, [r7, #8]
 8008fb6:	1c5a      	adds	r2, r3, #1
 8008fb8:	60ba      	str	r2, [r7, #8]
 8008fba:	b2ca      	uxtb	r2, r1
 8008fbc:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8008fbe:	697b      	ldr	r3, [r7, #20]
 8008fc0:	3301      	adds	r3, #1
 8008fc2:	617b      	str	r3, [r7, #20]
 8008fc4:	697a      	ldr	r2, [r7, #20]
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	429a      	cmp	r2, r3
 8008fca:	dbf0      	blt.n	8008fae <_read+0x12>
  }

  return len;
 8008fcc:	687b      	ldr	r3, [r7, #4]
}
 8008fce:	4618      	mov	r0, r3
 8008fd0:	3718      	adds	r7, #24
 8008fd2:	46bd      	mov	sp, r7
 8008fd4:	bd80      	pop	{r7, pc}

08008fd6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8008fd6:	b580      	push	{r7, lr}
 8008fd8:	b086      	sub	sp, #24
 8008fda:	af00      	add	r7, sp, #0
 8008fdc:	60f8      	str	r0, [r7, #12]
 8008fde:	60b9      	str	r1, [r7, #8]
 8008fe0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8008fe2:	2300      	movs	r3, #0
 8008fe4:	617b      	str	r3, [r7, #20]
 8008fe6:	e009      	b.n	8008ffc <_write+0x26>
  {
    __io_putchar(*ptr++);
 8008fe8:	68bb      	ldr	r3, [r7, #8]
 8008fea:	1c5a      	adds	r2, r3, #1
 8008fec:	60ba      	str	r2, [r7, #8]
 8008fee:	781b      	ldrb	r3, [r3, #0]
 8008ff0:	4618      	mov	r0, r3
 8008ff2:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8008ff6:	697b      	ldr	r3, [r7, #20]
 8008ff8:	3301      	adds	r3, #1
 8008ffa:	617b      	str	r3, [r7, #20]
 8008ffc:	697a      	ldr	r2, [r7, #20]
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	429a      	cmp	r2, r3
 8009002:	dbf1      	blt.n	8008fe8 <_write+0x12>
  }
  return len;
 8009004:	687b      	ldr	r3, [r7, #4]
}
 8009006:	4618      	mov	r0, r3
 8009008:	3718      	adds	r7, #24
 800900a:	46bd      	mov	sp, r7
 800900c:	bd80      	pop	{r7, pc}

0800900e <_close>:

int _close(int file)
{
 800900e:	b480      	push	{r7}
 8009010:	b083      	sub	sp, #12
 8009012:	af00      	add	r7, sp, #0
 8009014:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8009016:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800901a:	4618      	mov	r0, r3
 800901c:	370c      	adds	r7, #12
 800901e:	46bd      	mov	sp, r7
 8009020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009024:	4770      	bx	lr

08009026 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8009026:	b480      	push	{r7}
 8009028:	b083      	sub	sp, #12
 800902a:	af00      	add	r7, sp, #0
 800902c:	6078      	str	r0, [r7, #4]
 800902e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8009030:	683b      	ldr	r3, [r7, #0]
 8009032:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8009036:	605a      	str	r2, [r3, #4]
  return 0;
 8009038:	2300      	movs	r3, #0
}
 800903a:	4618      	mov	r0, r3
 800903c:	370c      	adds	r7, #12
 800903e:	46bd      	mov	sp, r7
 8009040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009044:	4770      	bx	lr

08009046 <_isatty>:

int _isatty(int file)
{
 8009046:	b480      	push	{r7}
 8009048:	b083      	sub	sp, #12
 800904a:	af00      	add	r7, sp, #0
 800904c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800904e:	2301      	movs	r3, #1
}
 8009050:	4618      	mov	r0, r3
 8009052:	370c      	adds	r7, #12
 8009054:	46bd      	mov	sp, r7
 8009056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800905a:	4770      	bx	lr

0800905c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800905c:	b480      	push	{r7}
 800905e:	b085      	sub	sp, #20
 8009060:	af00      	add	r7, sp, #0
 8009062:	60f8      	str	r0, [r7, #12]
 8009064:	60b9      	str	r1, [r7, #8]
 8009066:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8009068:	2300      	movs	r3, #0
}
 800906a:	4618      	mov	r0, r3
 800906c:	3714      	adds	r7, #20
 800906e:	46bd      	mov	sp, r7
 8009070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009074:	4770      	bx	lr
	...

08009078 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8009078:	b580      	push	{r7, lr}
 800907a:	b086      	sub	sp, #24
 800907c:	af00      	add	r7, sp, #0
 800907e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8009080:	4a14      	ldr	r2, [pc, #80]	; (80090d4 <_sbrk+0x5c>)
 8009082:	4b15      	ldr	r3, [pc, #84]	; (80090d8 <_sbrk+0x60>)
 8009084:	1ad3      	subs	r3, r2, r3
 8009086:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8009088:	697b      	ldr	r3, [r7, #20]
 800908a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800908c:	4b13      	ldr	r3, [pc, #76]	; (80090dc <_sbrk+0x64>)
 800908e:	681b      	ldr	r3, [r3, #0]
 8009090:	2b00      	cmp	r3, #0
 8009092:	d102      	bne.n	800909a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8009094:	4b11      	ldr	r3, [pc, #68]	; (80090dc <_sbrk+0x64>)
 8009096:	4a12      	ldr	r2, [pc, #72]	; (80090e0 <_sbrk+0x68>)
 8009098:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800909a:	4b10      	ldr	r3, [pc, #64]	; (80090dc <_sbrk+0x64>)
 800909c:	681a      	ldr	r2, [r3, #0]
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	4413      	add	r3, r2
 80090a2:	693a      	ldr	r2, [r7, #16]
 80090a4:	429a      	cmp	r2, r3
 80090a6:	d207      	bcs.n	80090b8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80090a8:	f008 fb00 	bl	80116ac <__errno>
 80090ac:	4603      	mov	r3, r0
 80090ae:	220c      	movs	r2, #12
 80090b0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80090b2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80090b6:	e009      	b.n	80090cc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80090b8:	4b08      	ldr	r3, [pc, #32]	; (80090dc <_sbrk+0x64>)
 80090ba:	681b      	ldr	r3, [r3, #0]
 80090bc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80090be:	4b07      	ldr	r3, [pc, #28]	; (80090dc <_sbrk+0x64>)
 80090c0:	681a      	ldr	r2, [r3, #0]
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	4413      	add	r3, r2
 80090c6:	4a05      	ldr	r2, [pc, #20]	; (80090dc <_sbrk+0x64>)
 80090c8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80090ca:	68fb      	ldr	r3, [r7, #12]
}
 80090cc:	4618      	mov	r0, r3
 80090ce:	3718      	adds	r7, #24
 80090d0:	46bd      	mov	sp, r7
 80090d2:	bd80      	pop	{r7, pc}
 80090d4:	20020000 	.word	0x20020000
 80090d8:	00000400 	.word	0x00000400
 80090dc:	200027f4 	.word	0x200027f4
 80090e0:	20002818 	.word	0x20002818

080090e4 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80090e4:	b480      	push	{r7}
 80090e6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80090e8:	4b06      	ldr	r3, [pc, #24]	; (8009104 <SystemInit+0x20>)
 80090ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80090ee:	4a05      	ldr	r2, [pc, #20]	; (8009104 <SystemInit+0x20>)
 80090f0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80090f4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80090f8:	bf00      	nop
 80090fa:	46bd      	mov	sp, r7
 80090fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009100:	4770      	bx	lr
 8009102:	bf00      	nop
 8009104:	e000ed00 	.word	0xe000ed00

08009108 <WIZCHIP_READ>:

#if   (_WIZCHIP_ == 5500)
////////////////////////////////////////////////////

uint8_t  WIZCHIP_READ(uint32_t AddrSel)
{
 8009108:	b580      	push	{r7, lr}
 800910a:	b084      	sub	sp, #16
 800910c:	af00      	add	r7, sp, #0
 800910e:	6078      	str	r0, [r7, #4]
   uint8_t ret;
   uint8_t spi_data[3];

   WIZCHIP_CRITICAL_ENTER();
 8009110:	4b22      	ldr	r3, [pc, #136]	; (800919c <WIZCHIP_READ+0x94>)
 8009112:	68db      	ldr	r3, [r3, #12]
 8009114:	4798      	blx	r3
   WIZCHIP.CS._select();
 8009116:	4b21      	ldr	r3, [pc, #132]	; (800919c <WIZCHIP_READ+0x94>)
 8009118:	695b      	ldr	r3, [r3, #20]
 800911a:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_READ_ | _W5500_SPI_VDM_OP_);

   if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
 800911c:	4b1f      	ldr	r3, [pc, #124]	; (800919c <WIZCHIP_READ+0x94>)
 800911e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009120:	2b00      	cmp	r3, #0
 8009122:	d003      	beq.n	800912c <WIZCHIP_READ+0x24>
 8009124:	4b1d      	ldr	r3, [pc, #116]	; (800919c <WIZCHIP_READ+0x94>)
 8009126:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009128:	2b00      	cmp	r3, #0
 800912a:	d114      	bne.n	8009156 <WIZCHIP_READ+0x4e>
   {
	   WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 800912c:	4b1b      	ldr	r3, [pc, #108]	; (800919c <WIZCHIP_READ+0x94>)
 800912e:	6a1b      	ldr	r3, [r3, #32]
 8009130:	687a      	ldr	r2, [r7, #4]
 8009132:	0c12      	lsrs	r2, r2, #16
 8009134:	b2d2      	uxtb	r2, r2
 8009136:	4610      	mov	r0, r2
 8009138:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 800913a:	4b18      	ldr	r3, [pc, #96]	; (800919c <WIZCHIP_READ+0x94>)
 800913c:	6a1b      	ldr	r3, [r3, #32]
 800913e:	687a      	ldr	r2, [r7, #4]
 8009140:	0a12      	lsrs	r2, r2, #8
 8009142:	b2d2      	uxtb	r2, r2
 8009144:	4610      	mov	r0, r2
 8009146:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 8009148:	4b14      	ldr	r3, [pc, #80]	; (800919c <WIZCHIP_READ+0x94>)
 800914a:	6a1b      	ldr	r3, [r3, #32]
 800914c:	687a      	ldr	r2, [r7, #4]
 800914e:	b2d2      	uxtb	r2, r2
 8009150:	4610      	mov	r0, r2
 8009152:	4798      	blx	r3
 8009154:	e011      	b.n	800917a <WIZCHIP_READ+0x72>
   }
   else																// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	0c1b      	lsrs	r3, r3, #16
 800915a:	b2db      	uxtb	r3, r3
 800915c:	733b      	strb	r3, [r7, #12]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 800915e:	687b      	ldr	r3, [r7, #4]
 8009160:	0a1b      	lsrs	r3, r3, #8
 8009162:	b2db      	uxtb	r3, r3
 8009164:	737b      	strb	r3, [r7, #13]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	b2db      	uxtb	r3, r3
 800916a:	73bb      	strb	r3, [r7, #14]
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
 800916c:	4b0b      	ldr	r3, [pc, #44]	; (800919c <WIZCHIP_READ+0x94>)
 800916e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009170:	f107 020c 	add.w	r2, r7, #12
 8009174:	2103      	movs	r1, #3
 8009176:	4610      	mov	r0, r2
 8009178:	4798      	blx	r3
   }
   ret = WIZCHIP.IF.SPI._read_byte();
 800917a:	4b08      	ldr	r3, [pc, #32]	; (800919c <WIZCHIP_READ+0x94>)
 800917c:	69db      	ldr	r3, [r3, #28]
 800917e:	4798      	blx	r3
 8009180:	4603      	mov	r3, r0
 8009182:	73fb      	strb	r3, [r7, #15]

   WIZCHIP.CS._deselect();
 8009184:	4b05      	ldr	r3, [pc, #20]	; (800919c <WIZCHIP_READ+0x94>)
 8009186:	699b      	ldr	r3, [r3, #24]
 8009188:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 800918a:	4b04      	ldr	r3, [pc, #16]	; (800919c <WIZCHIP_READ+0x94>)
 800918c:	691b      	ldr	r3, [r3, #16]
 800918e:	4798      	blx	r3
   return ret;
 8009190:	7bfb      	ldrb	r3, [r7, #15]
}
 8009192:	4618      	mov	r0, r3
 8009194:	3710      	adds	r7, #16
 8009196:	46bd      	mov	sp, r7
 8009198:	bd80      	pop	{r7, pc}
 800919a:	bf00      	nop
 800919c:	20000380 	.word	0x20000380

080091a0 <WIZCHIP_WRITE>:

void     WIZCHIP_WRITE(uint32_t AddrSel, uint8_t wb )
{
 80091a0:	b580      	push	{r7, lr}
 80091a2:	b084      	sub	sp, #16
 80091a4:	af00      	add	r7, sp, #0
 80091a6:	6078      	str	r0, [r7, #4]
 80091a8:	460b      	mov	r3, r1
 80091aa:	70fb      	strb	r3, [r7, #3]
   uint8_t spi_data[4];

   WIZCHIP_CRITICAL_ENTER();
 80091ac:	4b22      	ldr	r3, [pc, #136]	; (8009238 <WIZCHIP_WRITE+0x98>)
 80091ae:	68db      	ldr	r3, [r3, #12]
 80091b0:	4798      	blx	r3
   WIZCHIP.CS._select();
 80091b2:	4b21      	ldr	r3, [pc, #132]	; (8009238 <WIZCHIP_WRITE+0x98>)
 80091b4:	695b      	ldr	r3, [r3, #20]
 80091b6:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_WRITE_ | _W5500_SPI_VDM_OP_);
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	f043 0304 	orr.w	r3, r3, #4
 80091be:	607b      	str	r3, [r7, #4]

   //if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
   if(!WIZCHIP.IF.SPI._write_burst) 	// byte operation
 80091c0:	4b1d      	ldr	r3, [pc, #116]	; (8009238 <WIZCHIP_WRITE+0x98>)
 80091c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80091c4:	2b00      	cmp	r3, #0
 80091c6:	d119      	bne.n	80091fc <WIZCHIP_WRITE+0x5c>
   {
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 80091c8:	4b1b      	ldr	r3, [pc, #108]	; (8009238 <WIZCHIP_WRITE+0x98>)
 80091ca:	6a1b      	ldr	r3, [r3, #32]
 80091cc:	687a      	ldr	r2, [r7, #4]
 80091ce:	0c12      	lsrs	r2, r2, #16
 80091d0:	b2d2      	uxtb	r2, r2
 80091d2:	4610      	mov	r0, r2
 80091d4:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 80091d6:	4b18      	ldr	r3, [pc, #96]	; (8009238 <WIZCHIP_WRITE+0x98>)
 80091d8:	6a1b      	ldr	r3, [r3, #32]
 80091da:	687a      	ldr	r2, [r7, #4]
 80091dc:	0a12      	lsrs	r2, r2, #8
 80091de:	b2d2      	uxtb	r2, r2
 80091e0:	4610      	mov	r0, r2
 80091e2:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 80091e4:	4b14      	ldr	r3, [pc, #80]	; (8009238 <WIZCHIP_WRITE+0x98>)
 80091e6:	6a1b      	ldr	r3, [r3, #32]
 80091e8:	687a      	ldr	r2, [r7, #4]
 80091ea:	b2d2      	uxtb	r2, r2
 80091ec:	4610      	mov	r0, r2
 80091ee:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte(wb);
 80091f0:	4b11      	ldr	r3, [pc, #68]	; (8009238 <WIZCHIP_WRITE+0x98>)
 80091f2:	6a1b      	ldr	r3, [r3, #32]
 80091f4:	78fa      	ldrb	r2, [r7, #3]
 80091f6:	4610      	mov	r0, r2
 80091f8:	4798      	blx	r3
 80091fa:	e013      	b.n	8009224 <WIZCHIP_WRITE+0x84>
   }
   else									// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	0c1b      	lsrs	r3, r3, #16
 8009200:	b2db      	uxtb	r3, r3
 8009202:	733b      	strb	r3, [r7, #12]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	0a1b      	lsrs	r3, r3, #8
 8009208:	b2db      	uxtb	r3, r3
 800920a:	737b      	strb	r3, [r7, #13]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	b2db      	uxtb	r3, r3
 8009210:	73bb      	strb	r3, [r7, #14]
		spi_data[3] = wb;
 8009212:	78fb      	ldrb	r3, [r7, #3]
 8009214:	73fb      	strb	r3, [r7, #15]
		WIZCHIP.IF.SPI._write_burst(spi_data, 4);
 8009216:	4b08      	ldr	r3, [pc, #32]	; (8009238 <WIZCHIP_WRITE+0x98>)
 8009218:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800921a:	f107 020c 	add.w	r2, r7, #12
 800921e:	2104      	movs	r1, #4
 8009220:	4610      	mov	r0, r2
 8009222:	4798      	blx	r3
   }

   WIZCHIP.CS._deselect();
 8009224:	4b04      	ldr	r3, [pc, #16]	; (8009238 <WIZCHIP_WRITE+0x98>)
 8009226:	699b      	ldr	r3, [r3, #24]
 8009228:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 800922a:	4b03      	ldr	r3, [pc, #12]	; (8009238 <WIZCHIP_WRITE+0x98>)
 800922c:	691b      	ldr	r3, [r3, #16]
 800922e:	4798      	blx	r3
}
 8009230:	bf00      	nop
 8009232:	3710      	adds	r7, #16
 8009234:	46bd      	mov	sp, r7
 8009236:	bd80      	pop	{r7, pc}
 8009238:	20000380 	.word	0x20000380

0800923c <WIZCHIP_READ_BUF>:
         
void     WIZCHIP_READ_BUF (uint32_t AddrSel, uint8_t* pBuf, uint16_t len)
{
 800923c:	b590      	push	{r4, r7, lr}
 800923e:	b087      	sub	sp, #28
 8009240:	af00      	add	r7, sp, #0
 8009242:	60f8      	str	r0, [r7, #12]
 8009244:	60b9      	str	r1, [r7, #8]
 8009246:	4613      	mov	r3, r2
 8009248:	80fb      	strh	r3, [r7, #6]
   uint8_t spi_data[3];
   uint16_t i;

   WIZCHIP_CRITICAL_ENTER();
 800924a:	4b2b      	ldr	r3, [pc, #172]	; (80092f8 <WIZCHIP_READ_BUF+0xbc>)
 800924c:	68db      	ldr	r3, [r3, #12]
 800924e:	4798      	blx	r3
   WIZCHIP.CS._select();
 8009250:	4b29      	ldr	r3, [pc, #164]	; (80092f8 <WIZCHIP_READ_BUF+0xbc>)
 8009252:	695b      	ldr	r3, [r3, #20]
 8009254:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_READ_ | _W5500_SPI_VDM_OP_);

   if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
 8009256:	4b28      	ldr	r3, [pc, #160]	; (80092f8 <WIZCHIP_READ_BUF+0xbc>)
 8009258:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800925a:	2b00      	cmp	r3, #0
 800925c:	d003      	beq.n	8009266 <WIZCHIP_READ_BUF+0x2a>
 800925e:	4b26      	ldr	r3, [pc, #152]	; (80092f8 <WIZCHIP_READ_BUF+0xbc>)
 8009260:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009262:	2b00      	cmp	r3, #0
 8009264:	d126      	bne.n	80092b4 <WIZCHIP_READ_BUF+0x78>
   {
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 8009266:	4b24      	ldr	r3, [pc, #144]	; (80092f8 <WIZCHIP_READ_BUF+0xbc>)
 8009268:	6a1b      	ldr	r3, [r3, #32]
 800926a:	68fa      	ldr	r2, [r7, #12]
 800926c:	0c12      	lsrs	r2, r2, #16
 800926e:	b2d2      	uxtb	r2, r2
 8009270:	4610      	mov	r0, r2
 8009272:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 8009274:	4b20      	ldr	r3, [pc, #128]	; (80092f8 <WIZCHIP_READ_BUF+0xbc>)
 8009276:	6a1b      	ldr	r3, [r3, #32]
 8009278:	68fa      	ldr	r2, [r7, #12]
 800927a:	0a12      	lsrs	r2, r2, #8
 800927c:	b2d2      	uxtb	r2, r2
 800927e:	4610      	mov	r0, r2
 8009280:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 8009282:	4b1d      	ldr	r3, [pc, #116]	; (80092f8 <WIZCHIP_READ_BUF+0xbc>)
 8009284:	6a1b      	ldr	r3, [r3, #32]
 8009286:	68fa      	ldr	r2, [r7, #12]
 8009288:	b2d2      	uxtb	r2, r2
 800928a:	4610      	mov	r0, r2
 800928c:	4798      	blx	r3
		for(i = 0; i < len; i++)
 800928e:	2300      	movs	r3, #0
 8009290:	82fb      	strh	r3, [r7, #22]
 8009292:	e00a      	b.n	80092aa <WIZCHIP_READ_BUF+0x6e>
		   pBuf[i] = WIZCHIP.IF.SPI._read_byte();
 8009294:	4b18      	ldr	r3, [pc, #96]	; (80092f8 <WIZCHIP_READ_BUF+0xbc>)
 8009296:	69db      	ldr	r3, [r3, #28]
 8009298:	8afa      	ldrh	r2, [r7, #22]
 800929a:	68b9      	ldr	r1, [r7, #8]
 800929c:	188c      	adds	r4, r1, r2
 800929e:	4798      	blx	r3
 80092a0:	4603      	mov	r3, r0
 80092a2:	7023      	strb	r3, [r4, #0]
		for(i = 0; i < len; i++)
 80092a4:	8afb      	ldrh	r3, [r7, #22]
 80092a6:	3301      	adds	r3, #1
 80092a8:	82fb      	strh	r3, [r7, #22]
 80092aa:	8afa      	ldrh	r2, [r7, #22]
 80092ac:	88fb      	ldrh	r3, [r7, #6]
 80092ae:	429a      	cmp	r2, r3
 80092b0:	d3f0      	bcc.n	8009294 <WIZCHIP_READ_BUF+0x58>
   if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
 80092b2:	e017      	b.n	80092e4 <WIZCHIP_READ_BUF+0xa8>
   }
   else																// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 80092b4:	68fb      	ldr	r3, [r7, #12]
 80092b6:	0c1b      	lsrs	r3, r3, #16
 80092b8:	b2db      	uxtb	r3, r3
 80092ba:	743b      	strb	r3, [r7, #16]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 80092bc:	68fb      	ldr	r3, [r7, #12]
 80092be:	0a1b      	lsrs	r3, r3, #8
 80092c0:	b2db      	uxtb	r3, r3
 80092c2:	747b      	strb	r3, [r7, #17]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 80092c4:	68fb      	ldr	r3, [r7, #12]
 80092c6:	b2db      	uxtb	r3, r3
 80092c8:	74bb      	strb	r3, [r7, #18]
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
 80092ca:	4b0b      	ldr	r3, [pc, #44]	; (80092f8 <WIZCHIP_READ_BUF+0xbc>)
 80092cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80092ce:	f107 0210 	add.w	r2, r7, #16
 80092d2:	2103      	movs	r1, #3
 80092d4:	4610      	mov	r0, r2
 80092d6:	4798      	blx	r3
		WIZCHIP.IF.SPI._read_burst(pBuf, len);
 80092d8:	4b07      	ldr	r3, [pc, #28]	; (80092f8 <WIZCHIP_READ_BUF+0xbc>)
 80092da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80092dc:	88fa      	ldrh	r2, [r7, #6]
 80092de:	4611      	mov	r1, r2
 80092e0:	68b8      	ldr	r0, [r7, #8]
 80092e2:	4798      	blx	r3
   }

   WIZCHIP.CS._deselect();
 80092e4:	4b04      	ldr	r3, [pc, #16]	; (80092f8 <WIZCHIP_READ_BUF+0xbc>)
 80092e6:	699b      	ldr	r3, [r3, #24]
 80092e8:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 80092ea:	4b03      	ldr	r3, [pc, #12]	; (80092f8 <WIZCHIP_READ_BUF+0xbc>)
 80092ec:	691b      	ldr	r3, [r3, #16]
 80092ee:	4798      	blx	r3
}
 80092f0:	bf00      	nop
 80092f2:	371c      	adds	r7, #28
 80092f4:	46bd      	mov	sp, r7
 80092f6:	bd90      	pop	{r4, r7, pc}
 80092f8:	20000380 	.word	0x20000380

080092fc <WIZCHIP_WRITE_BUF>:

void     WIZCHIP_WRITE_BUF(uint32_t AddrSel, uint8_t* pBuf, uint16_t len)
{
 80092fc:	b580      	push	{r7, lr}
 80092fe:	b086      	sub	sp, #24
 8009300:	af00      	add	r7, sp, #0
 8009302:	60f8      	str	r0, [r7, #12]
 8009304:	60b9      	str	r1, [r7, #8]
 8009306:	4613      	mov	r3, r2
 8009308:	80fb      	strh	r3, [r7, #6]
   uint8_t spi_data[3];
   uint16_t i;

   WIZCHIP_CRITICAL_ENTER();
 800930a:	4b2b      	ldr	r3, [pc, #172]	; (80093b8 <WIZCHIP_WRITE_BUF+0xbc>)
 800930c:	68db      	ldr	r3, [r3, #12]
 800930e:	4798      	blx	r3
   WIZCHIP.CS._select();
 8009310:	4b29      	ldr	r3, [pc, #164]	; (80093b8 <WIZCHIP_WRITE_BUF+0xbc>)
 8009312:	695b      	ldr	r3, [r3, #20]
 8009314:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_WRITE_ | _W5500_SPI_VDM_OP_);
 8009316:	68fb      	ldr	r3, [r7, #12]
 8009318:	f043 0304 	orr.w	r3, r3, #4
 800931c:	60fb      	str	r3, [r7, #12]

   if(!WIZCHIP.IF.SPI._write_burst) 	// byte operation
 800931e:	4b26      	ldr	r3, [pc, #152]	; (80093b8 <WIZCHIP_WRITE_BUF+0xbc>)
 8009320:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009322:	2b00      	cmp	r3, #0
 8009324:	d126      	bne.n	8009374 <WIZCHIP_WRITE_BUF+0x78>
   {
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 8009326:	4b24      	ldr	r3, [pc, #144]	; (80093b8 <WIZCHIP_WRITE_BUF+0xbc>)
 8009328:	6a1b      	ldr	r3, [r3, #32]
 800932a:	68fa      	ldr	r2, [r7, #12]
 800932c:	0c12      	lsrs	r2, r2, #16
 800932e:	b2d2      	uxtb	r2, r2
 8009330:	4610      	mov	r0, r2
 8009332:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 8009334:	4b20      	ldr	r3, [pc, #128]	; (80093b8 <WIZCHIP_WRITE_BUF+0xbc>)
 8009336:	6a1b      	ldr	r3, [r3, #32]
 8009338:	68fa      	ldr	r2, [r7, #12]
 800933a:	0a12      	lsrs	r2, r2, #8
 800933c:	b2d2      	uxtb	r2, r2
 800933e:	4610      	mov	r0, r2
 8009340:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 8009342:	4b1d      	ldr	r3, [pc, #116]	; (80093b8 <WIZCHIP_WRITE_BUF+0xbc>)
 8009344:	6a1b      	ldr	r3, [r3, #32]
 8009346:	68fa      	ldr	r2, [r7, #12]
 8009348:	b2d2      	uxtb	r2, r2
 800934a:	4610      	mov	r0, r2
 800934c:	4798      	blx	r3
		for(i = 0; i < len; i++)
 800934e:	2300      	movs	r3, #0
 8009350:	82fb      	strh	r3, [r7, #22]
 8009352:	e00a      	b.n	800936a <WIZCHIP_WRITE_BUF+0x6e>
			WIZCHIP.IF.SPI._write_byte(pBuf[i]);
 8009354:	4b18      	ldr	r3, [pc, #96]	; (80093b8 <WIZCHIP_WRITE_BUF+0xbc>)
 8009356:	6a1b      	ldr	r3, [r3, #32]
 8009358:	8afa      	ldrh	r2, [r7, #22]
 800935a:	68b9      	ldr	r1, [r7, #8]
 800935c:	440a      	add	r2, r1
 800935e:	7812      	ldrb	r2, [r2, #0]
 8009360:	4610      	mov	r0, r2
 8009362:	4798      	blx	r3
		for(i = 0; i < len; i++)
 8009364:	8afb      	ldrh	r3, [r7, #22]
 8009366:	3301      	adds	r3, #1
 8009368:	82fb      	strh	r3, [r7, #22]
 800936a:	8afa      	ldrh	r2, [r7, #22]
 800936c:	88fb      	ldrh	r3, [r7, #6]
 800936e:	429a      	cmp	r2, r3
 8009370:	d3f0      	bcc.n	8009354 <WIZCHIP_WRITE_BUF+0x58>
 8009372:	e017      	b.n	80093a4 <WIZCHIP_WRITE_BUF+0xa8>
   }
   else									// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 8009374:	68fb      	ldr	r3, [r7, #12]
 8009376:	0c1b      	lsrs	r3, r3, #16
 8009378:	b2db      	uxtb	r3, r3
 800937a:	743b      	strb	r3, [r7, #16]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 800937c:	68fb      	ldr	r3, [r7, #12]
 800937e:	0a1b      	lsrs	r3, r3, #8
 8009380:	b2db      	uxtb	r3, r3
 8009382:	747b      	strb	r3, [r7, #17]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 8009384:	68fb      	ldr	r3, [r7, #12]
 8009386:	b2db      	uxtb	r3, r3
 8009388:	74bb      	strb	r3, [r7, #18]
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
 800938a:	4b0b      	ldr	r3, [pc, #44]	; (80093b8 <WIZCHIP_WRITE_BUF+0xbc>)
 800938c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800938e:	f107 0210 	add.w	r2, r7, #16
 8009392:	2103      	movs	r1, #3
 8009394:	4610      	mov	r0, r2
 8009396:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_burst(pBuf, len);
 8009398:	4b07      	ldr	r3, [pc, #28]	; (80093b8 <WIZCHIP_WRITE_BUF+0xbc>)
 800939a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800939c:	88fa      	ldrh	r2, [r7, #6]
 800939e:	4611      	mov	r1, r2
 80093a0:	68b8      	ldr	r0, [r7, #8]
 80093a2:	4798      	blx	r3
   }

   WIZCHIP.CS._deselect();
 80093a4:	4b04      	ldr	r3, [pc, #16]	; (80093b8 <WIZCHIP_WRITE_BUF+0xbc>)
 80093a6:	699b      	ldr	r3, [r3, #24]
 80093a8:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 80093aa:	4b03      	ldr	r3, [pc, #12]	; (80093b8 <WIZCHIP_WRITE_BUF+0xbc>)
 80093ac:	691b      	ldr	r3, [r3, #16]
 80093ae:	4798      	blx	r3
}
 80093b0:	bf00      	nop
 80093b2:	3718      	adds	r7, #24
 80093b4:	46bd      	mov	sp, r7
 80093b6:	bd80      	pop	{r7, pc}
 80093b8:	20000380 	.word	0x20000380

080093bc <getSn_TX_FSR>:


uint16_t getSn_TX_FSR(uint8_t sn)
{
 80093bc:	b590      	push	{r4, r7, lr}
 80093be:	b085      	sub	sp, #20
 80093c0:	af00      	add	r7, sp, #0
 80093c2:	4603      	mov	r3, r0
 80093c4:	71fb      	strb	r3, [r7, #7]
   uint16_t val=0,val1=0;
 80093c6:	2300      	movs	r3, #0
 80093c8:	81fb      	strh	r3, [r7, #14]
 80093ca:	2300      	movs	r3, #0
 80093cc:	81bb      	strh	r3, [r7, #12]

   do
   {
      val1 = WIZCHIP_READ(Sn_TX_FSR(sn));
 80093ce:	79fb      	ldrb	r3, [r7, #7]
 80093d0:	009b      	lsls	r3, r3, #2
 80093d2:	3301      	adds	r3, #1
 80093d4:	00db      	lsls	r3, r3, #3
 80093d6:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80093da:	4618      	mov	r0, r3
 80093dc:	f7ff fe94 	bl	8009108 <WIZCHIP_READ>
 80093e0:	4603      	mov	r3, r0
 80093e2:	81bb      	strh	r3, [r7, #12]
      val1 = (val1 << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_TX_FSR(sn),1));
 80093e4:	89bb      	ldrh	r3, [r7, #12]
 80093e6:	021b      	lsls	r3, r3, #8
 80093e8:	b29c      	uxth	r4, r3
 80093ea:	79fb      	ldrb	r3, [r7, #7]
 80093ec:	009b      	lsls	r3, r3, #2
 80093ee:	3301      	adds	r3, #1
 80093f0:	00db      	lsls	r3, r3, #3
 80093f2:	f503 5304 	add.w	r3, r3, #8448	; 0x2100
 80093f6:	4618      	mov	r0, r3
 80093f8:	f7ff fe86 	bl	8009108 <WIZCHIP_READ>
 80093fc:	4603      	mov	r3, r0
 80093fe:	b29b      	uxth	r3, r3
 8009400:	4423      	add	r3, r4
 8009402:	81bb      	strh	r3, [r7, #12]
      if (val1 != 0)
 8009404:	89bb      	ldrh	r3, [r7, #12]
 8009406:	2b00      	cmp	r3, #0
 8009408:	d01a      	beq.n	8009440 <getSn_TX_FSR+0x84>
      {
        val = WIZCHIP_READ(Sn_TX_FSR(sn));
 800940a:	79fb      	ldrb	r3, [r7, #7]
 800940c:	009b      	lsls	r3, r3, #2
 800940e:	3301      	adds	r3, #1
 8009410:	00db      	lsls	r3, r3, #3
 8009412:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8009416:	4618      	mov	r0, r3
 8009418:	f7ff fe76 	bl	8009108 <WIZCHIP_READ>
 800941c:	4603      	mov	r3, r0
 800941e:	81fb      	strh	r3, [r7, #14]
        val = (val << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_TX_FSR(sn),1));
 8009420:	89fb      	ldrh	r3, [r7, #14]
 8009422:	021b      	lsls	r3, r3, #8
 8009424:	b29c      	uxth	r4, r3
 8009426:	79fb      	ldrb	r3, [r7, #7]
 8009428:	009b      	lsls	r3, r3, #2
 800942a:	3301      	adds	r3, #1
 800942c:	00db      	lsls	r3, r3, #3
 800942e:	f503 5304 	add.w	r3, r3, #8448	; 0x2100
 8009432:	4618      	mov	r0, r3
 8009434:	f7ff fe68 	bl	8009108 <WIZCHIP_READ>
 8009438:	4603      	mov	r3, r0
 800943a:	b29b      	uxth	r3, r3
 800943c:	4423      	add	r3, r4
 800943e:	81fb      	strh	r3, [r7, #14]
      }
   }while (val != val1);
 8009440:	89fa      	ldrh	r2, [r7, #14]
 8009442:	89bb      	ldrh	r3, [r7, #12]
 8009444:	429a      	cmp	r2, r3
 8009446:	d1c2      	bne.n	80093ce <getSn_TX_FSR+0x12>
   return val;
 8009448:	89fb      	ldrh	r3, [r7, #14]
}
 800944a:	4618      	mov	r0, r3
 800944c:	3714      	adds	r7, #20
 800944e:	46bd      	mov	sp, r7
 8009450:	bd90      	pop	{r4, r7, pc}

08009452 <getSn_RX_RSR>:


uint16_t getSn_RX_RSR(uint8_t sn)
{
 8009452:	b590      	push	{r4, r7, lr}
 8009454:	b085      	sub	sp, #20
 8009456:	af00      	add	r7, sp, #0
 8009458:	4603      	mov	r3, r0
 800945a:	71fb      	strb	r3, [r7, #7]
   uint16_t val=0,val1=0;
 800945c:	2300      	movs	r3, #0
 800945e:	81fb      	strh	r3, [r7, #14]
 8009460:	2300      	movs	r3, #0
 8009462:	81bb      	strh	r3, [r7, #12]

   do
   {
      val1 = WIZCHIP_READ(Sn_RX_RSR(sn));
 8009464:	79fb      	ldrb	r3, [r7, #7]
 8009466:	009b      	lsls	r3, r3, #2
 8009468:	3301      	adds	r3, #1
 800946a:	00db      	lsls	r3, r3, #3
 800946c:	f503 5318 	add.w	r3, r3, #9728	; 0x2600
 8009470:	4618      	mov	r0, r3
 8009472:	f7ff fe49 	bl	8009108 <WIZCHIP_READ>
 8009476:	4603      	mov	r3, r0
 8009478:	81bb      	strh	r3, [r7, #12]
      val1 = (val1 << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_RX_RSR(sn),1));
 800947a:	89bb      	ldrh	r3, [r7, #12]
 800947c:	021b      	lsls	r3, r3, #8
 800947e:	b29c      	uxth	r4, r3
 8009480:	79fb      	ldrb	r3, [r7, #7]
 8009482:	009b      	lsls	r3, r3, #2
 8009484:	3301      	adds	r3, #1
 8009486:	00db      	lsls	r3, r3, #3
 8009488:	f503 531c 	add.w	r3, r3, #9984	; 0x2700
 800948c:	4618      	mov	r0, r3
 800948e:	f7ff fe3b 	bl	8009108 <WIZCHIP_READ>
 8009492:	4603      	mov	r3, r0
 8009494:	b29b      	uxth	r3, r3
 8009496:	4423      	add	r3, r4
 8009498:	81bb      	strh	r3, [r7, #12]
      if (val1 != 0)
 800949a:	89bb      	ldrh	r3, [r7, #12]
 800949c:	2b00      	cmp	r3, #0
 800949e:	d01a      	beq.n	80094d6 <getSn_RX_RSR+0x84>
      {
        val = WIZCHIP_READ(Sn_RX_RSR(sn));
 80094a0:	79fb      	ldrb	r3, [r7, #7]
 80094a2:	009b      	lsls	r3, r3, #2
 80094a4:	3301      	adds	r3, #1
 80094a6:	00db      	lsls	r3, r3, #3
 80094a8:	f503 5318 	add.w	r3, r3, #9728	; 0x2600
 80094ac:	4618      	mov	r0, r3
 80094ae:	f7ff fe2b 	bl	8009108 <WIZCHIP_READ>
 80094b2:	4603      	mov	r3, r0
 80094b4:	81fb      	strh	r3, [r7, #14]
        val = (val << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_RX_RSR(sn),1));
 80094b6:	89fb      	ldrh	r3, [r7, #14]
 80094b8:	021b      	lsls	r3, r3, #8
 80094ba:	b29c      	uxth	r4, r3
 80094bc:	79fb      	ldrb	r3, [r7, #7]
 80094be:	009b      	lsls	r3, r3, #2
 80094c0:	3301      	adds	r3, #1
 80094c2:	00db      	lsls	r3, r3, #3
 80094c4:	f503 531c 	add.w	r3, r3, #9984	; 0x2700
 80094c8:	4618      	mov	r0, r3
 80094ca:	f7ff fe1d 	bl	8009108 <WIZCHIP_READ>
 80094ce:	4603      	mov	r3, r0
 80094d0:	b29b      	uxth	r3, r3
 80094d2:	4423      	add	r3, r4
 80094d4:	81fb      	strh	r3, [r7, #14]
      }
   }while (val != val1);
 80094d6:	89fa      	ldrh	r2, [r7, #14]
 80094d8:	89bb      	ldrh	r3, [r7, #12]
 80094da:	429a      	cmp	r2, r3
 80094dc:	d1c2      	bne.n	8009464 <getSn_RX_RSR+0x12>
   return val;
 80094de:	89fb      	ldrh	r3, [r7, #14]
}
 80094e0:	4618      	mov	r0, r3
 80094e2:	3714      	adds	r7, #20
 80094e4:	46bd      	mov	sp, r7
 80094e6:	bd90      	pop	{r4, r7, pc}

080094e8 <wiz_send_data>:

void wiz_send_data(uint8_t sn, uint8_t *wizdata, uint16_t len)
{
 80094e8:	b590      	push	{r4, r7, lr}
 80094ea:	b085      	sub	sp, #20
 80094ec:	af00      	add	r7, sp, #0
 80094ee:	4603      	mov	r3, r0
 80094f0:	6039      	str	r1, [r7, #0]
 80094f2:	71fb      	strb	r3, [r7, #7]
 80094f4:	4613      	mov	r3, r2
 80094f6:	80bb      	strh	r3, [r7, #4]
   uint16_t ptr = 0;
 80094f8:	2300      	movs	r3, #0
 80094fa:	81fb      	strh	r3, [r7, #14]
   uint32_t addrsel = 0;
 80094fc:	2300      	movs	r3, #0
 80094fe:	60bb      	str	r3, [r7, #8]

   if(len == 0)  return;
 8009500:	88bb      	ldrh	r3, [r7, #4]
 8009502:	2b00      	cmp	r3, #0
 8009504:	d048      	beq.n	8009598 <wiz_send_data+0xb0>
   ptr = getSn_TX_WR(sn);
 8009506:	79fb      	ldrb	r3, [r7, #7]
 8009508:	009b      	lsls	r3, r3, #2
 800950a:	3301      	adds	r3, #1
 800950c:	00db      	lsls	r3, r3, #3
 800950e:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 8009512:	4618      	mov	r0, r3
 8009514:	f7ff fdf8 	bl	8009108 <WIZCHIP_READ>
 8009518:	4603      	mov	r3, r0
 800951a:	b29b      	uxth	r3, r3
 800951c:	021b      	lsls	r3, r3, #8
 800951e:	b29c      	uxth	r4, r3
 8009520:	79fb      	ldrb	r3, [r7, #7]
 8009522:	009b      	lsls	r3, r3, #2
 8009524:	3301      	adds	r3, #1
 8009526:	00db      	lsls	r3, r3, #3
 8009528:	f503 5314 	add.w	r3, r3, #9472	; 0x2500
 800952c:	4618      	mov	r0, r3
 800952e:	f7ff fdeb 	bl	8009108 <WIZCHIP_READ>
 8009532:	4603      	mov	r3, r0
 8009534:	b29b      	uxth	r3, r3
 8009536:	4423      	add	r3, r4
 8009538:	81fb      	strh	r3, [r7, #14]
   //M20140501 : implict type casting -> explict type casting
   //addrsel = (ptr << 8) + (WIZCHIP_TXBUF_BLOCK(sn) << 3);
   addrsel = ((uint32_t)ptr << 8) + (WIZCHIP_TXBUF_BLOCK(sn) << 3);
 800953a:	89fb      	ldrh	r3, [r7, #14]
 800953c:	021b      	lsls	r3, r3, #8
 800953e:	79fa      	ldrb	r2, [r7, #7]
 8009540:	0092      	lsls	r2, r2, #2
 8009542:	3202      	adds	r2, #2
 8009544:	00d2      	lsls	r2, r2, #3
 8009546:	4413      	add	r3, r2
 8009548:	60bb      	str	r3, [r7, #8]
   //
   WIZCHIP_WRITE_BUF(addrsel,wizdata, len);
 800954a:	88bb      	ldrh	r3, [r7, #4]
 800954c:	461a      	mov	r2, r3
 800954e:	6839      	ldr	r1, [r7, #0]
 8009550:	68b8      	ldr	r0, [r7, #8]
 8009552:	f7ff fed3 	bl	80092fc <WIZCHIP_WRITE_BUF>
   
   ptr += len;
 8009556:	89fa      	ldrh	r2, [r7, #14]
 8009558:	88bb      	ldrh	r3, [r7, #4]
 800955a:	4413      	add	r3, r2
 800955c:	81fb      	strh	r3, [r7, #14]
   setSn_TX_WR(sn,ptr);
 800955e:	79fb      	ldrb	r3, [r7, #7]
 8009560:	009b      	lsls	r3, r3, #2
 8009562:	3301      	adds	r3, #1
 8009564:	00db      	lsls	r3, r3, #3
 8009566:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 800956a:	461a      	mov	r2, r3
 800956c:	89fb      	ldrh	r3, [r7, #14]
 800956e:	0a1b      	lsrs	r3, r3, #8
 8009570:	b29b      	uxth	r3, r3
 8009572:	b2db      	uxtb	r3, r3
 8009574:	4619      	mov	r1, r3
 8009576:	4610      	mov	r0, r2
 8009578:	f7ff fe12 	bl	80091a0 <WIZCHIP_WRITE>
 800957c:	79fb      	ldrb	r3, [r7, #7]
 800957e:	009b      	lsls	r3, r3, #2
 8009580:	3301      	adds	r3, #1
 8009582:	00db      	lsls	r3, r3, #3
 8009584:	f503 5314 	add.w	r3, r3, #9472	; 0x2500
 8009588:	461a      	mov	r2, r3
 800958a:	89fb      	ldrh	r3, [r7, #14]
 800958c:	b2db      	uxtb	r3, r3
 800958e:	4619      	mov	r1, r3
 8009590:	4610      	mov	r0, r2
 8009592:	f7ff fe05 	bl	80091a0 <WIZCHIP_WRITE>
 8009596:	e000      	b.n	800959a <wiz_send_data+0xb2>
   if(len == 0)  return;
 8009598:	bf00      	nop
}
 800959a:	3714      	adds	r7, #20
 800959c:	46bd      	mov	sp, r7
 800959e:	bd90      	pop	{r4, r7, pc}

080095a0 <wiz_recv_data>:

void wiz_recv_data(uint8_t sn, uint8_t *wizdata, uint16_t len)
{
 80095a0:	b590      	push	{r4, r7, lr}
 80095a2:	b085      	sub	sp, #20
 80095a4:	af00      	add	r7, sp, #0
 80095a6:	4603      	mov	r3, r0
 80095a8:	6039      	str	r1, [r7, #0]
 80095aa:	71fb      	strb	r3, [r7, #7]
 80095ac:	4613      	mov	r3, r2
 80095ae:	80bb      	strh	r3, [r7, #4]
   uint16_t ptr = 0;
 80095b0:	2300      	movs	r3, #0
 80095b2:	81fb      	strh	r3, [r7, #14]
   uint32_t addrsel = 0;
 80095b4:	2300      	movs	r3, #0
 80095b6:	60bb      	str	r3, [r7, #8]
   
   if(len == 0) return;
 80095b8:	88bb      	ldrh	r3, [r7, #4]
 80095ba:	2b00      	cmp	r3, #0
 80095bc:	d048      	beq.n	8009650 <wiz_recv_data+0xb0>
   ptr = getSn_RX_RD(sn);
 80095be:	79fb      	ldrb	r3, [r7, #7]
 80095c0:	009b      	lsls	r3, r3, #2
 80095c2:	3301      	adds	r3, #1
 80095c4:	00db      	lsls	r3, r3, #3
 80095c6:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 80095ca:	4618      	mov	r0, r3
 80095cc:	f7ff fd9c 	bl	8009108 <WIZCHIP_READ>
 80095d0:	4603      	mov	r3, r0
 80095d2:	b29b      	uxth	r3, r3
 80095d4:	021b      	lsls	r3, r3, #8
 80095d6:	b29c      	uxth	r4, r3
 80095d8:	79fb      	ldrb	r3, [r7, #7]
 80095da:	009b      	lsls	r3, r3, #2
 80095dc:	3301      	adds	r3, #1
 80095de:	00db      	lsls	r3, r3, #3
 80095e0:	f503 5324 	add.w	r3, r3, #10496	; 0x2900
 80095e4:	4618      	mov	r0, r3
 80095e6:	f7ff fd8f 	bl	8009108 <WIZCHIP_READ>
 80095ea:	4603      	mov	r3, r0
 80095ec:	b29b      	uxth	r3, r3
 80095ee:	4423      	add	r3, r4
 80095f0:	81fb      	strh	r3, [r7, #14]
   //M20140501 : implict type casting -> explict type casting
   //addrsel = ((ptr << 8) + (WIZCHIP_RXBUF_BLOCK(sn) << 3);
   addrsel = ((uint32_t)ptr << 8) + (WIZCHIP_RXBUF_BLOCK(sn) << 3);
 80095f2:	89fb      	ldrh	r3, [r7, #14]
 80095f4:	021b      	lsls	r3, r3, #8
 80095f6:	79fa      	ldrb	r2, [r7, #7]
 80095f8:	0092      	lsls	r2, r2, #2
 80095fa:	3203      	adds	r2, #3
 80095fc:	00d2      	lsls	r2, r2, #3
 80095fe:	4413      	add	r3, r2
 8009600:	60bb      	str	r3, [r7, #8]
   //
   WIZCHIP_READ_BUF(addrsel, wizdata, len);
 8009602:	88bb      	ldrh	r3, [r7, #4]
 8009604:	461a      	mov	r2, r3
 8009606:	6839      	ldr	r1, [r7, #0]
 8009608:	68b8      	ldr	r0, [r7, #8]
 800960a:	f7ff fe17 	bl	800923c <WIZCHIP_READ_BUF>
   ptr += len;
 800960e:	89fa      	ldrh	r2, [r7, #14]
 8009610:	88bb      	ldrh	r3, [r7, #4]
 8009612:	4413      	add	r3, r2
 8009614:	81fb      	strh	r3, [r7, #14]
   
   setSn_RX_RD(sn,ptr);
 8009616:	79fb      	ldrb	r3, [r7, #7]
 8009618:	009b      	lsls	r3, r3, #2
 800961a:	3301      	adds	r3, #1
 800961c:	00db      	lsls	r3, r3, #3
 800961e:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 8009622:	461a      	mov	r2, r3
 8009624:	89fb      	ldrh	r3, [r7, #14]
 8009626:	0a1b      	lsrs	r3, r3, #8
 8009628:	b29b      	uxth	r3, r3
 800962a:	b2db      	uxtb	r3, r3
 800962c:	4619      	mov	r1, r3
 800962e:	4610      	mov	r0, r2
 8009630:	f7ff fdb6 	bl	80091a0 <WIZCHIP_WRITE>
 8009634:	79fb      	ldrb	r3, [r7, #7]
 8009636:	009b      	lsls	r3, r3, #2
 8009638:	3301      	adds	r3, #1
 800963a:	00db      	lsls	r3, r3, #3
 800963c:	f503 5324 	add.w	r3, r3, #10496	; 0x2900
 8009640:	461a      	mov	r2, r3
 8009642:	89fb      	ldrh	r3, [r7, #14]
 8009644:	b2db      	uxtb	r3, r3
 8009646:	4619      	mov	r1, r3
 8009648:	4610      	mov	r0, r2
 800964a:	f7ff fda9 	bl	80091a0 <WIZCHIP_WRITE>
 800964e:	e000      	b.n	8009652 <wiz_recv_data+0xb2>
   if(len == 0) return;
 8009650:	bf00      	nop
}
 8009652:	3714      	adds	r7, #20
 8009654:	46bd      	mov	sp, r7
 8009656:	bd90      	pop	{r4, r7, pc}

08009658 <wiz_recv_ignore>:


void wiz_recv_ignore(uint8_t sn, uint16_t len)
{
 8009658:	b590      	push	{r4, r7, lr}
 800965a:	b085      	sub	sp, #20
 800965c:	af00      	add	r7, sp, #0
 800965e:	4603      	mov	r3, r0
 8009660:	460a      	mov	r2, r1
 8009662:	71fb      	strb	r3, [r7, #7]
 8009664:	4613      	mov	r3, r2
 8009666:	80bb      	strh	r3, [r7, #4]
   uint16_t ptr = 0;
 8009668:	2300      	movs	r3, #0
 800966a:	81fb      	strh	r3, [r7, #14]

   ptr = getSn_RX_RD(sn);
 800966c:	79fb      	ldrb	r3, [r7, #7]
 800966e:	009b      	lsls	r3, r3, #2
 8009670:	3301      	adds	r3, #1
 8009672:	00db      	lsls	r3, r3, #3
 8009674:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 8009678:	4618      	mov	r0, r3
 800967a:	f7ff fd45 	bl	8009108 <WIZCHIP_READ>
 800967e:	4603      	mov	r3, r0
 8009680:	b29b      	uxth	r3, r3
 8009682:	021b      	lsls	r3, r3, #8
 8009684:	b29c      	uxth	r4, r3
 8009686:	79fb      	ldrb	r3, [r7, #7]
 8009688:	009b      	lsls	r3, r3, #2
 800968a:	3301      	adds	r3, #1
 800968c:	00db      	lsls	r3, r3, #3
 800968e:	f503 5324 	add.w	r3, r3, #10496	; 0x2900
 8009692:	4618      	mov	r0, r3
 8009694:	f7ff fd38 	bl	8009108 <WIZCHIP_READ>
 8009698:	4603      	mov	r3, r0
 800969a:	b29b      	uxth	r3, r3
 800969c:	4423      	add	r3, r4
 800969e:	81fb      	strh	r3, [r7, #14]
   ptr += len;
 80096a0:	89fa      	ldrh	r2, [r7, #14]
 80096a2:	88bb      	ldrh	r3, [r7, #4]
 80096a4:	4413      	add	r3, r2
 80096a6:	81fb      	strh	r3, [r7, #14]
   setSn_RX_RD(sn,ptr);
 80096a8:	79fb      	ldrb	r3, [r7, #7]
 80096aa:	009b      	lsls	r3, r3, #2
 80096ac:	3301      	adds	r3, #1
 80096ae:	00db      	lsls	r3, r3, #3
 80096b0:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 80096b4:	461a      	mov	r2, r3
 80096b6:	89fb      	ldrh	r3, [r7, #14]
 80096b8:	0a1b      	lsrs	r3, r3, #8
 80096ba:	b29b      	uxth	r3, r3
 80096bc:	b2db      	uxtb	r3, r3
 80096be:	4619      	mov	r1, r3
 80096c0:	4610      	mov	r0, r2
 80096c2:	f7ff fd6d 	bl	80091a0 <WIZCHIP_WRITE>
 80096c6:	79fb      	ldrb	r3, [r7, #7]
 80096c8:	009b      	lsls	r3, r3, #2
 80096ca:	3301      	adds	r3, #1
 80096cc:	00db      	lsls	r3, r3, #3
 80096ce:	f503 5324 	add.w	r3, r3, #10496	; 0x2900
 80096d2:	461a      	mov	r2, r3
 80096d4:	89fb      	ldrh	r3, [r7, #14]
 80096d6:	b2db      	uxtb	r3, r3
 80096d8:	4619      	mov	r1, r3
 80096da:	4610      	mov	r0, r2
 80096dc:	f7ff fd60 	bl	80091a0 <WIZCHIP_WRITE>
}
 80096e0:	bf00      	nop
 80096e2:	3714      	adds	r7, #20
 80096e4:	46bd      	mov	sp, r7
 80096e6:	bd90      	pop	{r4, r7, pc}

080096e8 <wizchip_cris_enter>:
 * @brief Default function to enable interrupt.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	  wizchip_cris_enter(void)           {};
void 	  wizchip_cris_enter(void)           {}
 80096e8:	b480      	push	{r7}
 80096ea:	af00      	add	r7, sp, #0
 80096ec:	bf00      	nop
 80096ee:	46bd      	mov	sp, r7
 80096f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096f4:	4770      	bx	lr

080096f6 <wizchip_cris_exit>:
 * @brief Default function to disable interrupt.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	  wizchip_cris_exit(void)          {};
void 	  wizchip_cris_exit(void)          {}
 80096f6:	b480      	push	{r7}
 80096f8:	af00      	add	r7, sp, #0
 80096fa:	bf00      	nop
 80096fc:	46bd      	mov	sp, r7
 80096fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009702:	4770      	bx	lr

08009704 <wizchip_cs_select>:
 * @brief Default function to select chip.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_cs_select(void)            {};
void 	wizchip_cs_select(void)            {}
 8009704:	b480      	push	{r7}
 8009706:	af00      	add	r7, sp, #0
 8009708:	bf00      	nop
 800970a:	46bd      	mov	sp, r7
 800970c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009710:	4770      	bx	lr

08009712 <wizchip_cs_deselect>:
 * @brief Default function to deselect chip.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_cs_deselect(void)          {};
void 	wizchip_cs_deselect(void)          {}
 8009712:	b480      	push	{r7}
 8009714:	af00      	add	r7, sp, #0
 8009716:	bf00      	nop
 8009718:	46bd      	mov	sp, r7
 800971a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800971e:	4770      	bx	lr

08009720 <wizchip_bus_readdata>:
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
 //M20150601 : Rename the function for integrating with W5300
//uint8_t wizchip_bus_readbyte(uint32_t AddrSel) { return * ((volatile uint8_t *)((ptrdiff_t) AddrSel)); }
iodata_t wizchip_bus_readdata(uint32_t AddrSel) { return * ((volatile iodata_t *)((ptrdiff_t) AddrSel)); }
 8009720:	b480      	push	{r7}
 8009722:	b083      	sub	sp, #12
 8009724:	af00      	add	r7, sp, #0
 8009726:	6078      	str	r0, [r7, #4]
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	781b      	ldrb	r3, [r3, #0]
 800972c:	b2db      	uxtb	r3, r3
 800972e:	4618      	mov	r0, r3
 8009730:	370c      	adds	r7, #12
 8009732:	46bd      	mov	sp, r7
 8009734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009738:	4770      	bx	lr

0800973a <wizchip_bus_writedata>:
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//M20150601 : Rename the function for integrating with W5300
//void 	wizchip_bus_writebyte(uint32_t AddrSel, uint8_t wb)  { *((volatile uint8_t*)((ptrdiff_t)AddrSel)) = wb; }
void 	wizchip_bus_writedata(uint32_t AddrSel, iodata_t wb)  { *((volatile iodata_t*)((ptrdiff_t)AddrSel)) = wb; }
 800973a:	b480      	push	{r7}
 800973c:	b083      	sub	sp, #12
 800973e:	af00      	add	r7, sp, #0
 8009740:	6078      	str	r0, [r7, #4]
 8009742:	460b      	mov	r3, r1
 8009744:	70fb      	strb	r3, [r7, #3]
 8009746:	687b      	ldr	r3, [r7, #4]
 8009748:	78fa      	ldrb	r2, [r7, #3]
 800974a:	701a      	strb	r2, [r3, #0]
 800974c:	bf00      	nop
 800974e:	370c      	adds	r7, #12
 8009750:	46bd      	mov	sp, r7
 8009752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009756:	4770      	bx	lr

08009758 <wizchip_spi_readbyte>:
 * @brief Default function to read in SPI interface.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//uint8_t wizchip_spi_readbyte(void)        {return 0;};
uint8_t wizchip_spi_readbyte(void)        {return 0;}
 8009758:	b480      	push	{r7}
 800975a:	af00      	add	r7, sp, #0
 800975c:	2300      	movs	r3, #0
 800975e:	4618      	mov	r0, r3
 8009760:	46bd      	mov	sp, r7
 8009762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009766:	4770      	bx	lr

08009768 <wizchip_spi_writebyte>:
 * @brief Default function to write in SPI interface.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_spi_writebyte(uint8_t wb) {};
void 	wizchip_spi_writebyte(uint8_t wb) {}
 8009768:	b480      	push	{r7}
 800976a:	b083      	sub	sp, #12
 800976c:	af00      	add	r7, sp, #0
 800976e:	4603      	mov	r3, r0
 8009770:	71fb      	strb	r3, [r7, #7]
 8009772:	bf00      	nop
 8009774:	370c      	adds	r7, #12
 8009776:	46bd      	mov	sp, r7
 8009778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800977c:	4770      	bx	lr

0800977e <wizchip_spi_readburst>:
 * @brief Default function to burst read in SPI interface.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_spi_readburst(uint8_t* pBuf, uint16_t len) 	{}; 
void 	wizchip_spi_readburst(uint8_t* pBuf, uint16_t len) 	{}
 800977e:	b480      	push	{r7}
 8009780:	b083      	sub	sp, #12
 8009782:	af00      	add	r7, sp, #0
 8009784:	6078      	str	r0, [r7, #4]
 8009786:	460b      	mov	r3, r1
 8009788:	807b      	strh	r3, [r7, #2]
 800978a:	bf00      	nop
 800978c:	370c      	adds	r7, #12
 800978e:	46bd      	mov	sp, r7
 8009790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009794:	4770      	bx	lr

08009796 <wizchip_spi_writeburst>:
 * @brief Default function to burst write in SPI interface.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_spi_writeburst(uint8_t* pBuf, uint16_t len) {};
void 	wizchip_spi_writeburst(uint8_t* pBuf, uint16_t len) {}
 8009796:	b480      	push	{r7}
 8009798:	b083      	sub	sp, #12
 800979a:	af00      	add	r7, sp, #0
 800979c:	6078      	str	r0, [r7, #4]
 800979e:	460b      	mov	r3, r1
 80097a0:	807b      	strh	r3, [r7, #2]
 80097a2:	bf00      	nop
 80097a4:	370c      	adds	r7, #12
 80097a6:	46bd      	mov	sp, r7
 80097a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097ac:	4770      	bx	lr
	...

080097b0 <reg_wizchip_cs_cbfunc>:
      WIZCHIP.CRIS._exit  = cris_ex;
   }
}

void reg_wizchip_cs_cbfunc(void(*cs_sel)(void), void(*cs_desel)(void))
{
 80097b0:	b480      	push	{r7}
 80097b2:	b083      	sub	sp, #12
 80097b4:	af00      	add	r7, sp, #0
 80097b6:	6078      	str	r0, [r7, #4]
 80097b8:	6039      	str	r1, [r7, #0]
   if(!cs_sel || !cs_desel)
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	2b00      	cmp	r3, #0
 80097be:	d002      	beq.n	80097c6 <reg_wizchip_cs_cbfunc+0x16>
 80097c0:	683b      	ldr	r3, [r7, #0]
 80097c2:	2b00      	cmp	r3, #0
 80097c4:	d106      	bne.n	80097d4 <reg_wizchip_cs_cbfunc+0x24>
   {
      WIZCHIP.CS._select   = wizchip_cs_select;
 80097c6:	4b0a      	ldr	r3, [pc, #40]	; (80097f0 <reg_wizchip_cs_cbfunc+0x40>)
 80097c8:	4a0a      	ldr	r2, [pc, #40]	; (80097f4 <reg_wizchip_cs_cbfunc+0x44>)
 80097ca:	615a      	str	r2, [r3, #20]
      WIZCHIP.CS._deselect = wizchip_cs_deselect;
 80097cc:	4b08      	ldr	r3, [pc, #32]	; (80097f0 <reg_wizchip_cs_cbfunc+0x40>)
 80097ce:	4a0a      	ldr	r2, [pc, #40]	; (80097f8 <reg_wizchip_cs_cbfunc+0x48>)
 80097d0:	619a      	str	r2, [r3, #24]
 80097d2:	e006      	b.n	80097e2 <reg_wizchip_cs_cbfunc+0x32>
   }
   else
   {
      WIZCHIP.CS._select   = cs_sel;
 80097d4:	4a06      	ldr	r2, [pc, #24]	; (80097f0 <reg_wizchip_cs_cbfunc+0x40>)
 80097d6:	687b      	ldr	r3, [r7, #4]
 80097d8:	6153      	str	r3, [r2, #20]
      WIZCHIP.CS._deselect = cs_desel;
 80097da:	4a05      	ldr	r2, [pc, #20]	; (80097f0 <reg_wizchip_cs_cbfunc+0x40>)
 80097dc:	683b      	ldr	r3, [r7, #0]
 80097de:	6193      	str	r3, [r2, #24]
   }
}
 80097e0:	bf00      	nop
 80097e2:	bf00      	nop
 80097e4:	370c      	adds	r7, #12
 80097e6:	46bd      	mov	sp, r7
 80097e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097ec:	4770      	bx	lr
 80097ee:	bf00      	nop
 80097f0:	20000380 	.word	0x20000380
 80097f4:	08009705 	.word	0x08009705
 80097f8:	08009713 	.word	0x08009713

080097fc <reg_wizchip_spi_cbfunc>:
      WIZCHIP.IF.BUS._write_data  = bus_wb;
   }
}

void reg_wizchip_spi_cbfunc(uint8_t (*spi_rb)(void), void (*spi_wb)(uint8_t wb))
{
 80097fc:	b480      	push	{r7}
 80097fe:	b083      	sub	sp, #12
 8009800:	af00      	add	r7, sp, #0
 8009802:	6078      	str	r0, [r7, #4]
 8009804:	6039      	str	r1, [r7, #0]
   while(!(WIZCHIP.if_mode & _WIZCHIP_IO_MODE_SPI_));
 8009806:	bf00      	nop
 8009808:	4b0f      	ldr	r3, [pc, #60]	; (8009848 <reg_wizchip_spi_cbfunc+0x4c>)
 800980a:	881b      	ldrh	r3, [r3, #0]
 800980c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009810:	2b00      	cmp	r3, #0
 8009812:	d0f9      	beq.n	8009808 <reg_wizchip_spi_cbfunc+0xc>
   
   if(!spi_rb || !spi_wb)
 8009814:	687b      	ldr	r3, [r7, #4]
 8009816:	2b00      	cmp	r3, #0
 8009818:	d002      	beq.n	8009820 <reg_wizchip_spi_cbfunc+0x24>
 800981a:	683b      	ldr	r3, [r7, #0]
 800981c:	2b00      	cmp	r3, #0
 800981e:	d106      	bne.n	800982e <reg_wizchip_spi_cbfunc+0x32>
   {
      WIZCHIP.IF.SPI._read_byte   = wizchip_spi_readbyte;
 8009820:	4b09      	ldr	r3, [pc, #36]	; (8009848 <reg_wizchip_spi_cbfunc+0x4c>)
 8009822:	4a0a      	ldr	r2, [pc, #40]	; (800984c <reg_wizchip_spi_cbfunc+0x50>)
 8009824:	61da      	str	r2, [r3, #28]
      WIZCHIP.IF.SPI._write_byte  = wizchip_spi_writebyte;
 8009826:	4b08      	ldr	r3, [pc, #32]	; (8009848 <reg_wizchip_spi_cbfunc+0x4c>)
 8009828:	4a09      	ldr	r2, [pc, #36]	; (8009850 <reg_wizchip_spi_cbfunc+0x54>)
 800982a:	621a      	str	r2, [r3, #32]
 800982c:	e006      	b.n	800983c <reg_wizchip_spi_cbfunc+0x40>
   }
   else
   {
      WIZCHIP.IF.SPI._read_byte   = spi_rb;
 800982e:	4a06      	ldr	r2, [pc, #24]	; (8009848 <reg_wizchip_spi_cbfunc+0x4c>)
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	61d3      	str	r3, [r2, #28]
      WIZCHIP.IF.SPI._write_byte  = spi_wb;
 8009834:	4a04      	ldr	r2, [pc, #16]	; (8009848 <reg_wizchip_spi_cbfunc+0x4c>)
 8009836:	683b      	ldr	r3, [r7, #0]
 8009838:	6213      	str	r3, [r2, #32]
   }
}
 800983a:	bf00      	nop
 800983c:	bf00      	nop
 800983e:	370c      	adds	r7, #12
 8009840:	46bd      	mov	sp, r7
 8009842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009846:	4770      	bx	lr
 8009848:	20000380 	.word	0x20000380
 800984c:	08009759 	.word	0x08009759
 8009850:	08009769 	.word	0x08009769

08009854 <reg_wizchip_spiburst_cbfunc>:

// 20140626 Eric Added for SPI burst operations
void reg_wizchip_spiburst_cbfunc(void (*spi_rb)(uint8_t* pBuf, uint16_t len), void (*spi_wb)(uint8_t* pBuf, uint16_t len))
{
 8009854:	b480      	push	{r7}
 8009856:	b083      	sub	sp, #12
 8009858:	af00      	add	r7, sp, #0
 800985a:	6078      	str	r0, [r7, #4]
 800985c:	6039      	str	r1, [r7, #0]
   while(!(WIZCHIP.if_mode & _WIZCHIP_IO_MODE_SPI_));
 800985e:	bf00      	nop
 8009860:	4b0f      	ldr	r3, [pc, #60]	; (80098a0 <reg_wizchip_spiburst_cbfunc+0x4c>)
 8009862:	881b      	ldrh	r3, [r3, #0]
 8009864:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009868:	2b00      	cmp	r3, #0
 800986a:	d0f9      	beq.n	8009860 <reg_wizchip_spiburst_cbfunc+0xc>

   if(!spi_rb || !spi_wb)
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	2b00      	cmp	r3, #0
 8009870:	d002      	beq.n	8009878 <reg_wizchip_spiburst_cbfunc+0x24>
 8009872:	683b      	ldr	r3, [r7, #0]
 8009874:	2b00      	cmp	r3, #0
 8009876:	d106      	bne.n	8009886 <reg_wizchip_spiburst_cbfunc+0x32>
   {
      WIZCHIP.IF.SPI._read_burst   = wizchip_spi_readburst;
 8009878:	4b09      	ldr	r3, [pc, #36]	; (80098a0 <reg_wizchip_spiburst_cbfunc+0x4c>)
 800987a:	4a0a      	ldr	r2, [pc, #40]	; (80098a4 <reg_wizchip_spiburst_cbfunc+0x50>)
 800987c:	625a      	str	r2, [r3, #36]	; 0x24
      WIZCHIP.IF.SPI._write_burst  = wizchip_spi_writeburst;
 800987e:	4b08      	ldr	r3, [pc, #32]	; (80098a0 <reg_wizchip_spiburst_cbfunc+0x4c>)
 8009880:	4a09      	ldr	r2, [pc, #36]	; (80098a8 <reg_wizchip_spiburst_cbfunc+0x54>)
 8009882:	629a      	str	r2, [r3, #40]	; 0x28
 8009884:	e006      	b.n	8009894 <reg_wizchip_spiburst_cbfunc+0x40>
   }
   else
   {
      WIZCHIP.IF.SPI._read_burst   = spi_rb;
 8009886:	4a06      	ldr	r2, [pc, #24]	; (80098a0 <reg_wizchip_spiburst_cbfunc+0x4c>)
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	6253      	str	r3, [r2, #36]	; 0x24
      WIZCHIP.IF.SPI._write_burst  = spi_wb;
 800988c:	4a04      	ldr	r2, [pc, #16]	; (80098a0 <reg_wizchip_spiburst_cbfunc+0x4c>)
 800988e:	683b      	ldr	r3, [r7, #0]
 8009890:	6293      	str	r3, [r2, #40]	; 0x28
   }
}
 8009892:	bf00      	nop
 8009894:	bf00      	nop
 8009896:	370c      	adds	r7, #12
 8009898:	46bd      	mov	sp, r7
 800989a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800989e:	4770      	bx	lr
 80098a0:	20000380 	.word	0x20000380
 80098a4:	0800977f 	.word	0x0800977f
 80098a8:	08009797 	.word	0x08009797

080098ac <wizchip_sw_reset>:
   }
   return 0;
}

void wizchip_sw_reset(void)
{
 80098ac:	b580      	push	{r7, lr}
 80098ae:	b086      	sub	sp, #24
 80098b0:	af00      	add	r7, sp, #0
#if _WIZCHIP_IO_MODE_  == _WIZCHIP_IO_MODE_BUS_INDIR_
   uint16_t mr = (uint16_t)getMR();
   setMR(mr | MR_IND);
#endif
//
   getSHAR(mac);
 80098b2:	1d3b      	adds	r3, r7, #4
 80098b4:	2206      	movs	r2, #6
 80098b6:	4619      	mov	r1, r3
 80098b8:	f44f 6010 	mov.w	r0, #2304	; 0x900
 80098bc:	f7ff fcbe 	bl	800923c <WIZCHIP_READ_BUF>
   getGAR(gw);  getSUBR(sn);  getSIPR(sip);
 80098c0:	f107 0314 	add.w	r3, r7, #20
 80098c4:	2204      	movs	r2, #4
 80098c6:	4619      	mov	r1, r3
 80098c8:	f44f 7080 	mov.w	r0, #256	; 0x100
 80098cc:	f7ff fcb6 	bl	800923c <WIZCHIP_READ_BUF>
 80098d0:	f107 0310 	add.w	r3, r7, #16
 80098d4:	2204      	movs	r2, #4
 80098d6:	4619      	mov	r1, r3
 80098d8:	f44f 60a0 	mov.w	r0, #1280	; 0x500
 80098dc:	f7ff fcae 	bl	800923c <WIZCHIP_READ_BUF>
 80098e0:	f107 030c 	add.w	r3, r7, #12
 80098e4:	2204      	movs	r2, #4
 80098e6:	4619      	mov	r1, r3
 80098e8:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 80098ec:	f7ff fca6 	bl	800923c <WIZCHIP_READ_BUF>
   setMR(MR_RST);
 80098f0:	2180      	movs	r1, #128	; 0x80
 80098f2:	2000      	movs	r0, #0
 80098f4:	f7ff fc54 	bl	80091a0 <WIZCHIP_WRITE>
   getMR(); // for delay
 80098f8:	2000      	movs	r0, #0
 80098fa:	f7ff fc05 	bl	8009108 <WIZCHIP_READ>
//A2015051 : For indirect bus mode 
#if _WIZCHIP_IO_MODE_  == _WIZCHIP_IO_MODE_BUS_INDIR_
   setMR(mr | MR_IND);
#endif
//
   setSHAR(mac);
 80098fe:	1d3b      	adds	r3, r7, #4
 8009900:	2206      	movs	r2, #6
 8009902:	4619      	mov	r1, r3
 8009904:	f44f 6010 	mov.w	r0, #2304	; 0x900
 8009908:	f7ff fcf8 	bl	80092fc <WIZCHIP_WRITE_BUF>
   setGAR(gw);
 800990c:	f107 0314 	add.w	r3, r7, #20
 8009910:	2204      	movs	r2, #4
 8009912:	4619      	mov	r1, r3
 8009914:	f44f 7080 	mov.w	r0, #256	; 0x100
 8009918:	f7ff fcf0 	bl	80092fc <WIZCHIP_WRITE_BUF>
   setSUBR(sn);
 800991c:	f107 0310 	add.w	r3, r7, #16
 8009920:	2204      	movs	r2, #4
 8009922:	4619      	mov	r1, r3
 8009924:	f44f 60a0 	mov.w	r0, #1280	; 0x500
 8009928:	f7ff fce8 	bl	80092fc <WIZCHIP_WRITE_BUF>
   setSIPR(sip);
 800992c:	f107 030c 	add.w	r3, r7, #12
 8009930:	2204      	movs	r2, #4
 8009932:	4619      	mov	r1, r3
 8009934:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 8009938:	f7ff fce0 	bl	80092fc <WIZCHIP_WRITE_BUF>
}
 800993c:	bf00      	nop
 800993e:	3718      	adds	r7, #24
 8009940:	46bd      	mov	sp, r7
 8009942:	bd80      	pop	{r7, pc}

08009944 <wizchip_init>:

int8_t wizchip_init(uint8_t* txsize, uint8_t* rxsize)
{
 8009944:	b580      	push	{r7, lr}
 8009946:	b084      	sub	sp, #16
 8009948:	af00      	add	r7, sp, #0
 800994a:	6078      	str	r0, [r7, #4]
 800994c:	6039      	str	r1, [r7, #0]
   int8_t i;
#if _WIZCHIP_ < W5200
   int8_t j;
#endif
   int8_t tmp = 0;
 800994e:	2300      	movs	r3, #0
 8009950:	73bb      	strb	r3, [r7, #14]
   wizchip_sw_reset();
 8009952:	f7ff ffab 	bl	80098ac <wizchip_sw_reset>
   if(txsize)
 8009956:	687b      	ldr	r3, [r7, #4]
 8009958:	2b00      	cmp	r3, #0
 800995a:	d03b      	beq.n	80099d4 <wizchip_init+0x90>
   {
      tmp = 0;
 800995c:	2300      	movs	r3, #0
 800995e:	73bb      	strb	r3, [r7, #14]
			tmp += txsize[i];
			if(tmp > 128) return -1;
		}
		if(tmp % 8) return -1;
   #else
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8009960:	2300      	movs	r3, #0
 8009962:	73fb      	strb	r3, [r7, #15]
 8009964:	e015      	b.n	8009992 <wizchip_init+0x4e>
		{
			tmp += txsize[i];
 8009966:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800996a:	687a      	ldr	r2, [r7, #4]
 800996c:	4413      	add	r3, r2
 800996e:	781a      	ldrb	r2, [r3, #0]
 8009970:	7bbb      	ldrb	r3, [r7, #14]
 8009972:	4413      	add	r3, r2
 8009974:	b2db      	uxtb	r3, r3
 8009976:	73bb      	strb	r3, [r7, #14]

		#if _WIZCHIP_ < W5200	//2016.10.28 peter add condition for w5100 and w5100s
			if(tmp > 8) return -1;
		#else
			if(tmp > 16) return -1;
 8009978:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800997c:	2b10      	cmp	r3, #16
 800997e:	dd02      	ble.n	8009986 <wizchip_init+0x42>
 8009980:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009984:	e066      	b.n	8009a54 <wizchip_init+0x110>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8009986:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800998a:	b2db      	uxtb	r3, r3
 800998c:	3301      	adds	r3, #1
 800998e:	b2db      	uxtb	r3, r3
 8009990:	73fb      	strb	r3, [r7, #15]
 8009992:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009996:	2b07      	cmp	r3, #7
 8009998:	dde5      	ble.n	8009966 <wizchip_init+0x22>
		#endif
		}
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 800999a:	2300      	movs	r3, #0
 800999c:	73fb      	strb	r3, [r7, #15]
 800999e:	e015      	b.n	80099cc <wizchip_init+0x88>
		#if _WIZCHIP_ < W5200	//2016.10.28 peter add condition for w5100
			j = 0;
			while((txsize[i] >> j != 1)&&(txsize[i] !=0)){j++;}
			setSn_TXBUF_SIZE(i, j);
		#else
			setSn_TXBUF_SIZE(i, txsize[i]);
 80099a0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80099a4:	009b      	lsls	r3, r3, #2
 80099a6:	3301      	adds	r3, #1
 80099a8:	00db      	lsls	r3, r3, #3
 80099aa:	f503 53f8 	add.w	r3, r3, #7936	; 0x1f00
 80099ae:	4618      	mov	r0, r3
 80099b0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80099b4:	687a      	ldr	r2, [r7, #4]
 80099b6:	4413      	add	r3, r2
 80099b8:	781b      	ldrb	r3, [r3, #0]
 80099ba:	4619      	mov	r1, r3
 80099bc:	f7ff fbf0 	bl	80091a0 <WIZCHIP_WRITE>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 80099c0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80099c4:	b2db      	uxtb	r3, r3
 80099c6:	3301      	adds	r3, #1
 80099c8:	b2db      	uxtb	r3, r3
 80099ca:	73fb      	strb	r3, [r7, #15]
 80099cc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80099d0:	2b07      	cmp	r3, #7
 80099d2:	dde5      	ble.n	80099a0 <wizchip_init+0x5c>
		}

	#endif
   }

   if(rxsize)
 80099d4:	683b      	ldr	r3, [r7, #0]
 80099d6:	2b00      	cmp	r3, #0
 80099d8:	d03b      	beq.n	8009a52 <wizchip_init+0x10e>
   {
      tmp = 0;
 80099da:	2300      	movs	r3, #0
 80099dc:	73bb      	strb	r3, [r7, #14]
			tmp += rxsize[i];
			if(tmp > 128) return -1;
		}
		if(tmp % 8) return -1;
   #else
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 80099de:	2300      	movs	r3, #0
 80099e0:	73fb      	strb	r3, [r7, #15]
 80099e2:	e015      	b.n	8009a10 <wizchip_init+0xcc>
		{
			tmp += rxsize[i];
 80099e4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80099e8:	683a      	ldr	r2, [r7, #0]
 80099ea:	4413      	add	r3, r2
 80099ec:	781a      	ldrb	r2, [r3, #0]
 80099ee:	7bbb      	ldrb	r3, [r7, #14]
 80099f0:	4413      	add	r3, r2
 80099f2:	b2db      	uxtb	r3, r3
 80099f4:	73bb      	strb	r3, [r7, #14]
		#if _WIZCHIP_ < W5200	//2016.10.28 peter add condition for w5100 and w5100s
			if(tmp > 8) return -1;
		#else
			if(tmp > 16) return -1;
 80099f6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80099fa:	2b10      	cmp	r3, #16
 80099fc:	dd02      	ble.n	8009a04 <wizchip_init+0xc0>
 80099fe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009a02:	e027      	b.n	8009a54 <wizchip_init+0x110>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8009a04:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009a08:	b2db      	uxtb	r3, r3
 8009a0a:	3301      	adds	r3, #1
 8009a0c:	b2db      	uxtb	r3, r3
 8009a0e:	73fb      	strb	r3, [r7, #15]
 8009a10:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009a14:	2b07      	cmp	r3, #7
 8009a16:	dde5      	ble.n	80099e4 <wizchip_init+0xa0>
		#endif
		}

		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8009a18:	2300      	movs	r3, #0
 8009a1a:	73fb      	strb	r3, [r7, #15]
 8009a1c:	e015      	b.n	8009a4a <wizchip_init+0x106>
		#if _WIZCHIP_ < W5200	// add condition for w5100
			j = 0;
			while((rxsize[i] >> j != 1)&&(txsize[i] !=0)){j++;}
			setSn_RXBUF_SIZE(i, j);
		#else
			setSn_RXBUF_SIZE(i, rxsize[i]);
 8009a1e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009a22:	009b      	lsls	r3, r3, #2
 8009a24:	3301      	adds	r3, #1
 8009a26:	00db      	lsls	r3, r3, #3
 8009a28:	f503 53f0 	add.w	r3, r3, #7680	; 0x1e00
 8009a2c:	4618      	mov	r0, r3
 8009a2e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009a32:	683a      	ldr	r2, [r7, #0]
 8009a34:	4413      	add	r3, r2
 8009a36:	781b      	ldrb	r3, [r3, #0]
 8009a38:	4619      	mov	r1, r3
 8009a3a:	f7ff fbb1 	bl	80091a0 <WIZCHIP_WRITE>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8009a3e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009a42:	b2db      	uxtb	r3, r3
 8009a44:	3301      	adds	r3, #1
 8009a46:	b2db      	uxtb	r3, r3
 8009a48:	73fb      	strb	r3, [r7, #15]
 8009a4a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009a4e:	2b07      	cmp	r3, #7
 8009a50:	dde5      	ble.n	8009a1e <wizchip_init+0xda>
		#endif
		}
	#endif
   }
   return 0;
 8009a52:	2300      	movs	r3, #0
}
 8009a54:	4618      	mov	r0, r3
 8009a56:	3710      	adds	r7, #16
 8009a58:	46bd      	mov	sp, r7
 8009a5a:	bd80      	pop	{r7, pc}

08009a5c <wizchip_setnetinfo>:
}
#endif


void wizchip_setnetinfo(wiz_NetInfo* pnetinfo)
{
 8009a5c:	b580      	push	{r7, lr}
 8009a5e:	b082      	sub	sp, #8
 8009a60:	af00      	add	r7, sp, #0
 8009a62:	6078      	str	r0, [r7, #4]
   setSHAR(pnetinfo->mac);
 8009a64:	687b      	ldr	r3, [r7, #4]
 8009a66:	2206      	movs	r2, #6
 8009a68:	4619      	mov	r1, r3
 8009a6a:	f44f 6010 	mov.w	r0, #2304	; 0x900
 8009a6e:	f7ff fc45 	bl	80092fc <WIZCHIP_WRITE_BUF>
   setGAR(pnetinfo->gw);
 8009a72:	687b      	ldr	r3, [r7, #4]
 8009a74:	330e      	adds	r3, #14
 8009a76:	2204      	movs	r2, #4
 8009a78:	4619      	mov	r1, r3
 8009a7a:	f44f 7080 	mov.w	r0, #256	; 0x100
 8009a7e:	f7ff fc3d 	bl	80092fc <WIZCHIP_WRITE_BUF>
   setSUBR(pnetinfo->sn);
 8009a82:	687b      	ldr	r3, [r7, #4]
 8009a84:	330a      	adds	r3, #10
 8009a86:	2204      	movs	r2, #4
 8009a88:	4619      	mov	r1, r3
 8009a8a:	f44f 60a0 	mov.w	r0, #1280	; 0x500
 8009a8e:	f7ff fc35 	bl	80092fc <WIZCHIP_WRITE_BUF>
   setSIPR(pnetinfo->ip);
 8009a92:	687b      	ldr	r3, [r7, #4]
 8009a94:	3306      	adds	r3, #6
 8009a96:	2204      	movs	r2, #4
 8009a98:	4619      	mov	r1, r3
 8009a9a:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 8009a9e:	f7ff fc2d 	bl	80092fc <WIZCHIP_WRITE_BUF>
   _DNS_[0] = pnetinfo->dns[0];
 8009aa2:	687b      	ldr	r3, [r7, #4]
 8009aa4:	7c9a      	ldrb	r2, [r3, #18]
 8009aa6:	4b0b      	ldr	r3, [pc, #44]	; (8009ad4 <wizchip_setnetinfo+0x78>)
 8009aa8:	701a      	strb	r2, [r3, #0]
   _DNS_[1] = pnetinfo->dns[1];
 8009aaa:	687b      	ldr	r3, [r7, #4]
 8009aac:	7cda      	ldrb	r2, [r3, #19]
 8009aae:	4b09      	ldr	r3, [pc, #36]	; (8009ad4 <wizchip_setnetinfo+0x78>)
 8009ab0:	705a      	strb	r2, [r3, #1]
   _DNS_[2] = pnetinfo->dns[2];
 8009ab2:	687b      	ldr	r3, [r7, #4]
 8009ab4:	7d1a      	ldrb	r2, [r3, #20]
 8009ab6:	4b07      	ldr	r3, [pc, #28]	; (8009ad4 <wizchip_setnetinfo+0x78>)
 8009ab8:	709a      	strb	r2, [r3, #2]
   _DNS_[3] = pnetinfo->dns[3];
 8009aba:	687b      	ldr	r3, [r7, #4]
 8009abc:	7d5a      	ldrb	r2, [r3, #21]
 8009abe:	4b05      	ldr	r3, [pc, #20]	; (8009ad4 <wizchip_setnetinfo+0x78>)
 8009ac0:	70da      	strb	r2, [r3, #3]
   _DHCP_   = pnetinfo->dhcp;
 8009ac2:	687b      	ldr	r3, [r7, #4]
 8009ac4:	f893 211d 	ldrb.w	r2, [r3, #285]	; 0x11d
 8009ac8:	4b03      	ldr	r3, [pc, #12]	; (8009ad8 <wizchip_setnetinfo+0x7c>)
 8009aca:	701a      	strb	r2, [r3, #0]
}
 8009acc:	bf00      	nop
 8009ace:	3708      	adds	r7, #8
 8009ad0:	46bd      	mov	sp, r7
 8009ad2:	bd80      	pop	{r7, pc}
 8009ad4:	200027f8 	.word	0x200027f8
 8009ad8:	200027fc 	.word	0x200027fc

08009adc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8009adc:	480d      	ldr	r0, [pc, #52]	; (8009b14 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8009ade:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8009ae0:	480d      	ldr	r0, [pc, #52]	; (8009b18 <LoopForever+0x6>)
  ldr r1, =_edata
 8009ae2:	490e      	ldr	r1, [pc, #56]	; (8009b1c <LoopForever+0xa>)
  ldr r2, =_sidata
 8009ae4:	4a0e      	ldr	r2, [pc, #56]	; (8009b20 <LoopForever+0xe>)
  movs r3, #0
 8009ae6:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8009ae8:	e002      	b.n	8009af0 <LoopCopyDataInit>

08009aea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8009aea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8009aec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8009aee:	3304      	adds	r3, #4

08009af0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8009af0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8009af2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8009af4:	d3f9      	bcc.n	8009aea <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8009af6:	4a0b      	ldr	r2, [pc, #44]	; (8009b24 <LoopForever+0x12>)
  ldr r4, =_ebss
 8009af8:	4c0b      	ldr	r4, [pc, #44]	; (8009b28 <LoopForever+0x16>)
  movs r3, #0
 8009afa:	2300      	movs	r3, #0
  b LoopFillZerobss
 8009afc:	e001      	b.n	8009b02 <LoopFillZerobss>

08009afe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8009afe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8009b00:	3204      	adds	r2, #4

08009b02 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8009b02:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8009b04:	d3fb      	bcc.n	8009afe <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8009b06:	f7ff faed 	bl	80090e4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8009b0a:	f007 fdd5 	bl	80116b8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8009b0e:	f7fa fd8b 	bl	8004628 <main>

08009b12 <LoopForever>:

LoopForever:
    b LoopForever
 8009b12:	e7fe      	b.n	8009b12 <LoopForever>
  ldr   r0, =_estack
 8009b14:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8009b18:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8009b1c:	20000584 	.word	0x20000584
  ldr r2, =_sidata
 8009b20:	0801b078 	.word	0x0801b078
  ldr r2, =_sbss
 8009b24:	20000584 	.word	0x20000584
  ldr r4, =_ebss
 8009b28:	20002814 	.word	0x20002814

08009b2c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8009b2c:	e7fe      	b.n	8009b2c <ADC1_2_IRQHandler>

08009b2e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8009b2e:	b580      	push	{r7, lr}
 8009b30:	b082      	sub	sp, #8
 8009b32:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8009b34:	2300      	movs	r3, #0
 8009b36:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8009b38:	2003      	movs	r0, #3
 8009b3a:	f001 ff05 	bl	800b948 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8009b3e:	2000      	movs	r0, #0
 8009b40:	f000 f80e 	bl	8009b60 <HAL_InitTick>
 8009b44:	4603      	mov	r3, r0
 8009b46:	2b00      	cmp	r3, #0
 8009b48:	d002      	beq.n	8009b50 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8009b4a:	2301      	movs	r3, #1
 8009b4c:	71fb      	strb	r3, [r7, #7]
 8009b4e:	e001      	b.n	8009b54 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8009b50:	f7fe fdbe 	bl	80086d0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8009b54:	79fb      	ldrb	r3, [r7, #7]

}
 8009b56:	4618      	mov	r0, r3
 8009b58:	3708      	adds	r7, #8
 8009b5a:	46bd      	mov	sp, r7
 8009b5c:	bd80      	pop	{r7, pc}
	...

08009b60 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8009b60:	b580      	push	{r7, lr}
 8009b62:	b084      	sub	sp, #16
 8009b64:	af00      	add	r7, sp, #0
 8009b66:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8009b68:	2300      	movs	r3, #0
 8009b6a:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8009b6c:	4b16      	ldr	r3, [pc, #88]	; (8009bc8 <HAL_InitTick+0x68>)
 8009b6e:	681b      	ldr	r3, [r3, #0]
 8009b70:	2b00      	cmp	r3, #0
 8009b72:	d022      	beq.n	8009bba <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8009b74:	4b15      	ldr	r3, [pc, #84]	; (8009bcc <HAL_InitTick+0x6c>)
 8009b76:	681a      	ldr	r2, [r3, #0]
 8009b78:	4b13      	ldr	r3, [pc, #76]	; (8009bc8 <HAL_InitTick+0x68>)
 8009b7a:	681b      	ldr	r3, [r3, #0]
 8009b7c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8009b80:	fbb1 f3f3 	udiv	r3, r1, r3
 8009b84:	fbb2 f3f3 	udiv	r3, r2, r3
 8009b88:	4618      	mov	r0, r3
 8009b8a:	f001 ff14 	bl	800b9b6 <HAL_SYSTICK_Config>
 8009b8e:	4603      	mov	r3, r0
 8009b90:	2b00      	cmp	r3, #0
 8009b92:	d10f      	bne.n	8009bb4 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8009b94:	687b      	ldr	r3, [r7, #4]
 8009b96:	2b0f      	cmp	r3, #15
 8009b98:	d809      	bhi.n	8009bae <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8009b9a:	2200      	movs	r2, #0
 8009b9c:	6879      	ldr	r1, [r7, #4]
 8009b9e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009ba2:	f001 fedc 	bl	800b95e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8009ba6:	4a0a      	ldr	r2, [pc, #40]	; (8009bd0 <HAL_InitTick+0x70>)
 8009ba8:	687b      	ldr	r3, [r7, #4]
 8009baa:	6013      	str	r3, [r2, #0]
 8009bac:	e007      	b.n	8009bbe <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8009bae:	2301      	movs	r3, #1
 8009bb0:	73fb      	strb	r3, [r7, #15]
 8009bb2:	e004      	b.n	8009bbe <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8009bb4:	2301      	movs	r3, #1
 8009bb6:	73fb      	strb	r3, [r7, #15]
 8009bb8:	e001      	b.n	8009bbe <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8009bba:	2301      	movs	r3, #1
 8009bbc:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8009bbe:	7bfb      	ldrb	r3, [r7, #15]
}
 8009bc0:	4618      	mov	r0, r3
 8009bc2:	3710      	adds	r7, #16
 8009bc4:	46bd      	mov	sp, r7
 8009bc6:	bd80      	pop	{r7, pc}
 8009bc8:	200003b0 	.word	0x200003b0
 8009bcc:	2000037c 	.word	0x2000037c
 8009bd0:	200003ac 	.word	0x200003ac

08009bd4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8009bd4:	b480      	push	{r7}
 8009bd6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8009bd8:	4b05      	ldr	r3, [pc, #20]	; (8009bf0 <HAL_IncTick+0x1c>)
 8009bda:	681a      	ldr	r2, [r3, #0]
 8009bdc:	4b05      	ldr	r3, [pc, #20]	; (8009bf4 <HAL_IncTick+0x20>)
 8009bde:	681b      	ldr	r3, [r3, #0]
 8009be0:	4413      	add	r3, r2
 8009be2:	4a03      	ldr	r2, [pc, #12]	; (8009bf0 <HAL_IncTick+0x1c>)
 8009be4:	6013      	str	r3, [r2, #0]
}
 8009be6:	bf00      	nop
 8009be8:	46bd      	mov	sp, r7
 8009bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bee:	4770      	bx	lr
 8009bf0:	20002800 	.word	0x20002800
 8009bf4:	200003b0 	.word	0x200003b0

08009bf8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8009bf8:	b480      	push	{r7}
 8009bfa:	af00      	add	r7, sp, #0
  return uwTick;
 8009bfc:	4b03      	ldr	r3, [pc, #12]	; (8009c0c <HAL_GetTick+0x14>)
 8009bfe:	681b      	ldr	r3, [r3, #0]
}
 8009c00:	4618      	mov	r0, r3
 8009c02:	46bd      	mov	sp, r7
 8009c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c08:	4770      	bx	lr
 8009c0a:	bf00      	nop
 8009c0c:	20002800 	.word	0x20002800

08009c10 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8009c10:	b580      	push	{r7, lr}
 8009c12:	b084      	sub	sp, #16
 8009c14:	af00      	add	r7, sp, #0
 8009c16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8009c18:	f7ff ffee 	bl	8009bf8 <HAL_GetTick>
 8009c1c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8009c1e:	687b      	ldr	r3, [r7, #4]
 8009c20:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8009c22:	68fb      	ldr	r3, [r7, #12]
 8009c24:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009c28:	d004      	beq.n	8009c34 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8009c2a:	4b09      	ldr	r3, [pc, #36]	; (8009c50 <HAL_Delay+0x40>)
 8009c2c:	681b      	ldr	r3, [r3, #0]
 8009c2e:	68fa      	ldr	r2, [r7, #12]
 8009c30:	4413      	add	r3, r2
 8009c32:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8009c34:	bf00      	nop
 8009c36:	f7ff ffdf 	bl	8009bf8 <HAL_GetTick>
 8009c3a:	4602      	mov	r2, r0
 8009c3c:	68bb      	ldr	r3, [r7, #8]
 8009c3e:	1ad3      	subs	r3, r2, r3
 8009c40:	68fa      	ldr	r2, [r7, #12]
 8009c42:	429a      	cmp	r2, r3
 8009c44:	d8f7      	bhi.n	8009c36 <HAL_Delay+0x26>
  {
  }
}
 8009c46:	bf00      	nop
 8009c48:	bf00      	nop
 8009c4a:	3710      	adds	r7, #16
 8009c4c:	46bd      	mov	sp, r7
 8009c4e:	bd80      	pop	{r7, pc}
 8009c50:	200003b0 	.word	0x200003b0

08009c54 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8009c54:	b480      	push	{r7}
 8009c56:	b083      	sub	sp, #12
 8009c58:	af00      	add	r7, sp, #0
 8009c5a:	6078      	str	r0, [r7, #4]
 8009c5c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8009c5e:	687b      	ldr	r3, [r7, #4]
 8009c60:	689b      	ldr	r3, [r3, #8]
 8009c62:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8009c66:	683b      	ldr	r3, [r7, #0]
 8009c68:	431a      	orrs	r2, r3
 8009c6a:	687b      	ldr	r3, [r7, #4]
 8009c6c:	609a      	str	r2, [r3, #8]
}
 8009c6e:	bf00      	nop
 8009c70:	370c      	adds	r7, #12
 8009c72:	46bd      	mov	sp, r7
 8009c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c78:	4770      	bx	lr

08009c7a <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8009c7a:	b480      	push	{r7}
 8009c7c:	b083      	sub	sp, #12
 8009c7e:	af00      	add	r7, sp, #0
 8009c80:	6078      	str	r0, [r7, #4]
 8009c82:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8009c84:	687b      	ldr	r3, [r7, #4]
 8009c86:	689b      	ldr	r3, [r3, #8]
 8009c88:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8009c8c:	683b      	ldr	r3, [r7, #0]
 8009c8e:	431a      	orrs	r2, r3
 8009c90:	687b      	ldr	r3, [r7, #4]
 8009c92:	609a      	str	r2, [r3, #8]
}
 8009c94:	bf00      	nop
 8009c96:	370c      	adds	r7, #12
 8009c98:	46bd      	mov	sp, r7
 8009c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c9e:	4770      	bx	lr

08009ca0 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8009ca0:	b480      	push	{r7}
 8009ca2:	b083      	sub	sp, #12
 8009ca4:	af00      	add	r7, sp, #0
 8009ca6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8009ca8:	687b      	ldr	r3, [r7, #4]
 8009caa:	689b      	ldr	r3, [r3, #8]
 8009cac:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8009cb0:	4618      	mov	r0, r3
 8009cb2:	370c      	adds	r7, #12
 8009cb4:	46bd      	mov	sp, r7
 8009cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cba:	4770      	bx	lr

08009cbc <LL_ADC_SetOffset>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8009cbc:	b480      	push	{r7}
 8009cbe:	b087      	sub	sp, #28
 8009cc0:	af00      	add	r7, sp, #0
 8009cc2:	60f8      	str	r0, [r7, #12]
 8009cc4:	60b9      	str	r1, [r7, #8]
 8009cc6:	607a      	str	r2, [r7, #4]
 8009cc8:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8009cca:	68fb      	ldr	r3, [r7, #12]
 8009ccc:	3360      	adds	r3, #96	; 0x60
 8009cce:	461a      	mov	r2, r3
 8009cd0:	68bb      	ldr	r3, [r7, #8]
 8009cd2:	009b      	lsls	r3, r3, #2
 8009cd4:	4413      	add	r3, r2
 8009cd6:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8009cd8:	697b      	ldr	r3, [r7, #20]
 8009cda:	681a      	ldr	r2, [r3, #0]
 8009cdc:	4b08      	ldr	r3, [pc, #32]	; (8009d00 <LL_ADC_SetOffset+0x44>)
 8009cde:	4013      	ands	r3, r2
 8009ce0:	687a      	ldr	r2, [r7, #4]
 8009ce2:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8009ce6:	683a      	ldr	r2, [r7, #0]
 8009ce8:	430a      	orrs	r2, r1
 8009cea:	4313      	orrs	r3, r2
 8009cec:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8009cf0:	697b      	ldr	r3, [r7, #20]
 8009cf2:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8009cf4:	bf00      	nop
 8009cf6:	371c      	adds	r7, #28
 8009cf8:	46bd      	mov	sp, r7
 8009cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cfe:	4770      	bx	lr
 8009d00:	03fff000 	.word	0x03fff000

08009d04 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8009d04:	b480      	push	{r7}
 8009d06:	b085      	sub	sp, #20
 8009d08:	af00      	add	r7, sp, #0
 8009d0a:	6078      	str	r0, [r7, #4]
 8009d0c:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8009d0e:	687b      	ldr	r3, [r7, #4]
 8009d10:	3360      	adds	r3, #96	; 0x60
 8009d12:	461a      	mov	r2, r3
 8009d14:	683b      	ldr	r3, [r7, #0]
 8009d16:	009b      	lsls	r3, r3, #2
 8009d18:	4413      	add	r3, r2
 8009d1a:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8009d1c:	68fb      	ldr	r3, [r7, #12]
 8009d1e:	681b      	ldr	r3, [r3, #0]
 8009d20:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8009d24:	4618      	mov	r0, r3
 8009d26:	3714      	adds	r7, #20
 8009d28:	46bd      	mov	sp, r7
 8009d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d2e:	4770      	bx	lr

08009d30 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8009d30:	b480      	push	{r7}
 8009d32:	b087      	sub	sp, #28
 8009d34:	af00      	add	r7, sp, #0
 8009d36:	60f8      	str	r0, [r7, #12]
 8009d38:	60b9      	str	r1, [r7, #8]
 8009d3a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8009d3c:	68fb      	ldr	r3, [r7, #12]
 8009d3e:	3360      	adds	r3, #96	; 0x60
 8009d40:	461a      	mov	r2, r3
 8009d42:	68bb      	ldr	r3, [r7, #8]
 8009d44:	009b      	lsls	r3, r3, #2
 8009d46:	4413      	add	r3, r2
 8009d48:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8009d4a:	697b      	ldr	r3, [r7, #20]
 8009d4c:	681b      	ldr	r3, [r3, #0]
 8009d4e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8009d52:	687b      	ldr	r3, [r7, #4]
 8009d54:	431a      	orrs	r2, r3
 8009d56:	697b      	ldr	r3, [r7, #20]
 8009d58:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8009d5a:	bf00      	nop
 8009d5c:	371c      	adds	r7, #28
 8009d5e:	46bd      	mov	sp, r7
 8009d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d64:	4770      	bx	lr

08009d66 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8009d66:	b480      	push	{r7}
 8009d68:	b087      	sub	sp, #28
 8009d6a:	af00      	add	r7, sp, #0
 8009d6c:	60f8      	str	r0, [r7, #12]
 8009d6e:	60b9      	str	r1, [r7, #8]
 8009d70:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8009d72:	68fb      	ldr	r3, [r7, #12]
 8009d74:	3360      	adds	r3, #96	; 0x60
 8009d76:	461a      	mov	r2, r3
 8009d78:	68bb      	ldr	r3, [r7, #8]
 8009d7a:	009b      	lsls	r3, r3, #2
 8009d7c:	4413      	add	r3, r2
 8009d7e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8009d80:	697b      	ldr	r3, [r7, #20]
 8009d82:	681b      	ldr	r3, [r3, #0]
 8009d84:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8009d88:	687b      	ldr	r3, [r7, #4]
 8009d8a:	431a      	orrs	r2, r3
 8009d8c:	697b      	ldr	r3, [r7, #20]
 8009d8e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8009d90:	bf00      	nop
 8009d92:	371c      	adds	r7, #28
 8009d94:	46bd      	mov	sp, r7
 8009d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d9a:	4770      	bx	lr

08009d9c <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8009d9c:	b480      	push	{r7}
 8009d9e:	b087      	sub	sp, #28
 8009da0:	af00      	add	r7, sp, #0
 8009da2:	60f8      	str	r0, [r7, #12]
 8009da4:	60b9      	str	r1, [r7, #8]
 8009da6:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8009da8:	68fb      	ldr	r3, [r7, #12]
 8009daa:	3360      	adds	r3, #96	; 0x60
 8009dac:	461a      	mov	r2, r3
 8009dae:	68bb      	ldr	r3, [r7, #8]
 8009db0:	009b      	lsls	r3, r3, #2
 8009db2:	4413      	add	r3, r2
 8009db4:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8009db6:	697b      	ldr	r3, [r7, #20]
 8009db8:	681b      	ldr	r3, [r3, #0]
 8009dba:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8009dbe:	687b      	ldr	r3, [r7, #4]
 8009dc0:	431a      	orrs	r2, r3
 8009dc2:	697b      	ldr	r3, [r7, #20]
 8009dc4:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8009dc6:	bf00      	nop
 8009dc8:	371c      	adds	r7, #28
 8009dca:	46bd      	mov	sp, r7
 8009dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dd0:	4770      	bx	lr

08009dd2 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8009dd2:	b480      	push	{r7}
 8009dd4:	b083      	sub	sp, #12
 8009dd6:	af00      	add	r7, sp, #0
 8009dd8:	6078      	str	r0, [r7, #4]
 8009dda:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8009ddc:	687b      	ldr	r3, [r7, #4]
 8009dde:	695b      	ldr	r3, [r3, #20]
 8009de0:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8009de4:	683b      	ldr	r3, [r7, #0]
 8009de6:	431a      	orrs	r2, r3
 8009de8:	687b      	ldr	r3, [r7, #4]
 8009dea:	615a      	str	r2, [r3, #20]
}
 8009dec:	bf00      	nop
 8009dee:	370c      	adds	r7, #12
 8009df0:	46bd      	mov	sp, r7
 8009df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009df6:	4770      	bx	lr

08009df8 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8009df8:	b480      	push	{r7}
 8009dfa:	b083      	sub	sp, #12
 8009dfc:	af00      	add	r7, sp, #0
 8009dfe:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8009e00:	687b      	ldr	r3, [r7, #4]
 8009e02:	68db      	ldr	r3, [r3, #12]
 8009e04:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8009e08:	2b00      	cmp	r3, #0
 8009e0a:	d101      	bne.n	8009e10 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8009e0c:	2301      	movs	r3, #1
 8009e0e:	e000      	b.n	8009e12 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8009e10:	2300      	movs	r3, #0
}
 8009e12:	4618      	mov	r0, r3
 8009e14:	370c      	adds	r7, #12
 8009e16:	46bd      	mov	sp, r7
 8009e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e1c:	4770      	bx	lr

08009e1e <LL_ADC_REG_SetSequencerRanks>:
  *         (8) On STM32G4, fast channel allows: 2.5 (sampling) + 12.5 (conversion) = 15 ADC clock cycles (fADC) to convert in 12-bit resolution.
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8009e1e:	b480      	push	{r7}
 8009e20:	b087      	sub	sp, #28
 8009e22:	af00      	add	r7, sp, #0
 8009e24:	60f8      	str	r0, [r7, #12]
 8009e26:	60b9      	str	r1, [r7, #8]
 8009e28:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8009e2a:	68fb      	ldr	r3, [r7, #12]
 8009e2c:	3330      	adds	r3, #48	; 0x30
 8009e2e:	461a      	mov	r2, r3
 8009e30:	68bb      	ldr	r3, [r7, #8]
 8009e32:	0a1b      	lsrs	r3, r3, #8
 8009e34:	009b      	lsls	r3, r3, #2
 8009e36:	f003 030c 	and.w	r3, r3, #12
 8009e3a:	4413      	add	r3, r2
 8009e3c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8009e3e:	697b      	ldr	r3, [r7, #20]
 8009e40:	681a      	ldr	r2, [r3, #0]
 8009e42:	68bb      	ldr	r3, [r7, #8]
 8009e44:	f003 031f 	and.w	r3, r3, #31
 8009e48:	211f      	movs	r1, #31
 8009e4a:	fa01 f303 	lsl.w	r3, r1, r3
 8009e4e:	43db      	mvns	r3, r3
 8009e50:	401a      	ands	r2, r3
 8009e52:	687b      	ldr	r3, [r7, #4]
 8009e54:	0e9b      	lsrs	r3, r3, #26
 8009e56:	f003 011f 	and.w	r1, r3, #31
 8009e5a:	68bb      	ldr	r3, [r7, #8]
 8009e5c:	f003 031f 	and.w	r3, r3, #31
 8009e60:	fa01 f303 	lsl.w	r3, r1, r3
 8009e64:	431a      	orrs	r2, r3
 8009e66:	697b      	ldr	r3, [r7, #20]
 8009e68:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8009e6a:	bf00      	nop
 8009e6c:	371c      	adds	r7, #28
 8009e6e:	46bd      	mov	sp, r7
 8009e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e74:	4770      	bx	lr

08009e76 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8009e76:	b480      	push	{r7}
 8009e78:	b087      	sub	sp, #28
 8009e7a:	af00      	add	r7, sp, #0
 8009e7c:	60f8      	str	r0, [r7, #12]
 8009e7e:	60b9      	str	r1, [r7, #8]
 8009e80:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8009e82:	68fb      	ldr	r3, [r7, #12]
 8009e84:	3314      	adds	r3, #20
 8009e86:	461a      	mov	r2, r3
 8009e88:	68bb      	ldr	r3, [r7, #8]
 8009e8a:	0e5b      	lsrs	r3, r3, #25
 8009e8c:	009b      	lsls	r3, r3, #2
 8009e8e:	f003 0304 	and.w	r3, r3, #4
 8009e92:	4413      	add	r3, r2
 8009e94:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8009e96:	697b      	ldr	r3, [r7, #20]
 8009e98:	681a      	ldr	r2, [r3, #0]
 8009e9a:	68bb      	ldr	r3, [r7, #8]
 8009e9c:	0d1b      	lsrs	r3, r3, #20
 8009e9e:	f003 031f 	and.w	r3, r3, #31
 8009ea2:	2107      	movs	r1, #7
 8009ea4:	fa01 f303 	lsl.w	r3, r1, r3
 8009ea8:	43db      	mvns	r3, r3
 8009eaa:	401a      	ands	r2, r3
 8009eac:	68bb      	ldr	r3, [r7, #8]
 8009eae:	0d1b      	lsrs	r3, r3, #20
 8009eb0:	f003 031f 	and.w	r3, r3, #31
 8009eb4:	6879      	ldr	r1, [r7, #4]
 8009eb6:	fa01 f303 	lsl.w	r3, r1, r3
 8009eba:	431a      	orrs	r2, r3
 8009ebc:	697b      	ldr	r3, [r7, #20]
 8009ebe:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8009ec0:	bf00      	nop
 8009ec2:	371c      	adds	r7, #28
 8009ec4:	46bd      	mov	sp, r7
 8009ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eca:	4770      	bx	lr

08009ecc <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8009ecc:	b480      	push	{r7}
 8009ece:	b085      	sub	sp, #20
 8009ed0:	af00      	add	r7, sp, #0
 8009ed2:	60f8      	str	r0, [r7, #12]
 8009ed4:	60b9      	str	r1, [r7, #8]
 8009ed6:	607a      	str	r2, [r7, #4]
  /* Bits for single or differential mode selection for each channel are set  */
  /* to 1 only when the differential mode is selected, and to 0 when the      */
  /* single mode is selected.                                                 */
  
  if (SingleDiff == LL_ADC_DIFFERENTIAL_ENDED)
 8009ed8:	687b      	ldr	r3, [r7, #4]
 8009eda:	4a0f      	ldr	r2, [pc, #60]	; (8009f18 <LL_ADC_SetChannelSingleDiff+0x4c>)
 8009edc:	4293      	cmp	r3, r2
 8009ede:	d10a      	bne.n	8009ef6 <LL_ADC_SetChannelSingleDiff+0x2a>
  {
    SET_BIT(ADCx->DIFSEL,
 8009ee0:	68fb      	ldr	r3, [r7, #12]
 8009ee2:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8009ee6:	68bb      	ldr	r3, [r7, #8]
 8009ee8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009eec:	431a      	orrs	r2, r3
 8009eee:	68fb      	ldr	r3, [r7, #12]
 8009ef0:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  else
  {
    CLEAR_BIT(ADCx->DIFSEL,
            Channel & ADC_SINGLEDIFF_CHANNEL_MASK);
  }
}
 8009ef4:	e00a      	b.n	8009f0c <LL_ADC_SetChannelSingleDiff+0x40>
    CLEAR_BIT(ADCx->DIFSEL,
 8009ef6:	68fb      	ldr	r3, [r7, #12]
 8009ef8:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8009efc:	68bb      	ldr	r3, [r7, #8]
 8009efe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009f02:	43db      	mvns	r3, r3
 8009f04:	401a      	ands	r2, r3
 8009f06:	68fb      	ldr	r3, [r7, #12]
 8009f08:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
 8009f0c:	bf00      	nop
 8009f0e:	3714      	adds	r7, #20
 8009f10:	46bd      	mov	sp, r7
 8009f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f16:	4770      	bx	lr
 8009f18:	407f0000 	.word	0x407f0000

08009f1c <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8009f1c:	b480      	push	{r7}
 8009f1e:	b083      	sub	sp, #12
 8009f20:	af00      	add	r7, sp, #0
 8009f22:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8009f24:	687b      	ldr	r3, [r7, #4]
 8009f26:	689b      	ldr	r3, [r3, #8]
 8009f28:	f003 031f 	and.w	r3, r3, #31
}
 8009f2c:	4618      	mov	r0, r3
 8009f2e:	370c      	adds	r7, #12
 8009f30:	46bd      	mov	sp, r7
 8009f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f36:	4770      	bx	lr

08009f38 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8009f38:	b480      	push	{r7}
 8009f3a:	b083      	sub	sp, #12
 8009f3c:	af00      	add	r7, sp, #0
 8009f3e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8009f40:	687b      	ldr	r3, [r7, #4]
 8009f42:	689b      	ldr	r3, [r3, #8]
 8009f44:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8009f48:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8009f4c:	687a      	ldr	r2, [r7, #4]
 8009f4e:	6093      	str	r3, [r2, #8]
}
 8009f50:	bf00      	nop
 8009f52:	370c      	adds	r7, #12
 8009f54:	46bd      	mov	sp, r7
 8009f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f5a:	4770      	bx	lr

08009f5c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8009f5c:	b480      	push	{r7}
 8009f5e:	b083      	sub	sp, #12
 8009f60:	af00      	add	r7, sp, #0
 8009f62:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8009f64:	687b      	ldr	r3, [r7, #4]
 8009f66:	689b      	ldr	r3, [r3, #8]
 8009f68:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009f6c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009f70:	d101      	bne.n	8009f76 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8009f72:	2301      	movs	r3, #1
 8009f74:	e000      	b.n	8009f78 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8009f76:	2300      	movs	r3, #0
}
 8009f78:	4618      	mov	r0, r3
 8009f7a:	370c      	adds	r7, #12
 8009f7c:	46bd      	mov	sp, r7
 8009f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f82:	4770      	bx	lr

08009f84 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8009f84:	b480      	push	{r7}
 8009f86:	b083      	sub	sp, #12
 8009f88:	af00      	add	r7, sp, #0
 8009f8a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8009f8c:	687b      	ldr	r3, [r7, #4]
 8009f8e:	689b      	ldr	r3, [r3, #8]
 8009f90:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8009f94:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8009f98:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8009f9c:	687b      	ldr	r3, [r7, #4]
 8009f9e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8009fa0:	bf00      	nop
 8009fa2:	370c      	adds	r7, #12
 8009fa4:	46bd      	mov	sp, r7
 8009fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009faa:	4770      	bx	lr

08009fac <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8009fac:	b480      	push	{r7}
 8009fae:	b083      	sub	sp, #12
 8009fb0:	af00      	add	r7, sp, #0
 8009fb2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8009fb4:	687b      	ldr	r3, [r7, #4]
 8009fb6:	689b      	ldr	r3, [r3, #8]
 8009fb8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009fbc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009fc0:	d101      	bne.n	8009fc6 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8009fc2:	2301      	movs	r3, #1
 8009fc4:	e000      	b.n	8009fc8 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8009fc6:	2300      	movs	r3, #0
}
 8009fc8:	4618      	mov	r0, r3
 8009fca:	370c      	adds	r7, #12
 8009fcc:	46bd      	mov	sp, r7
 8009fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fd2:	4770      	bx	lr

08009fd4 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8009fd4:	b480      	push	{r7}
 8009fd6:	b083      	sub	sp, #12
 8009fd8:	af00      	add	r7, sp, #0
 8009fda:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8009fdc:	687b      	ldr	r3, [r7, #4]
 8009fde:	689b      	ldr	r3, [r3, #8]
 8009fe0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009fe4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8009fe8:	f043 0201 	orr.w	r2, r3, #1
 8009fec:	687b      	ldr	r3, [r7, #4]
 8009fee:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8009ff0:	bf00      	nop
 8009ff2:	370c      	adds	r7, #12
 8009ff4:	46bd      	mov	sp, r7
 8009ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ffa:	4770      	bx	lr

08009ffc <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8009ffc:	b480      	push	{r7}
 8009ffe:	b083      	sub	sp, #12
 800a000:	af00      	add	r7, sp, #0
 800a002:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800a004:	687b      	ldr	r3, [r7, #4]
 800a006:	689b      	ldr	r3, [r3, #8]
 800a008:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a00c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800a010:	f043 0202 	orr.w	r2, r3, #2
 800a014:	687b      	ldr	r3, [r7, #4]
 800a016:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 800a018:	bf00      	nop
 800a01a:	370c      	adds	r7, #12
 800a01c:	46bd      	mov	sp, r7
 800a01e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a022:	4770      	bx	lr

0800a024 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 800a024:	b480      	push	{r7}
 800a026:	b083      	sub	sp, #12
 800a028:	af00      	add	r7, sp, #0
 800a02a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800a02c:	687b      	ldr	r3, [r7, #4]
 800a02e:	689b      	ldr	r3, [r3, #8]
 800a030:	f003 0301 	and.w	r3, r3, #1
 800a034:	2b01      	cmp	r3, #1
 800a036:	d101      	bne.n	800a03c <LL_ADC_IsEnabled+0x18>
 800a038:	2301      	movs	r3, #1
 800a03a:	e000      	b.n	800a03e <LL_ADC_IsEnabled+0x1a>
 800a03c:	2300      	movs	r3, #0
}
 800a03e:	4618      	mov	r0, r3
 800a040:	370c      	adds	r7, #12
 800a042:	46bd      	mov	sp, r7
 800a044:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a048:	4770      	bx	lr

0800a04a <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 800a04a:	b480      	push	{r7}
 800a04c:	b083      	sub	sp, #12
 800a04e:	af00      	add	r7, sp, #0
 800a050:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 800a052:	687b      	ldr	r3, [r7, #4]
 800a054:	689b      	ldr	r3, [r3, #8]
 800a056:	f003 0302 	and.w	r3, r3, #2
 800a05a:	2b02      	cmp	r3, #2
 800a05c:	d101      	bne.n	800a062 <LL_ADC_IsDisableOngoing+0x18>
 800a05e:	2301      	movs	r3, #1
 800a060:	e000      	b.n	800a064 <LL_ADC_IsDisableOngoing+0x1a>
 800a062:	2300      	movs	r3, #0
}
 800a064:	4618      	mov	r0, r3
 800a066:	370c      	adds	r7, #12
 800a068:	46bd      	mov	sp, r7
 800a06a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a06e:	4770      	bx	lr

0800a070 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 800a070:	b480      	push	{r7}
 800a072:	b083      	sub	sp, #12
 800a074:	af00      	add	r7, sp, #0
 800a076:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800a078:	687b      	ldr	r3, [r7, #4]
 800a07a:	689b      	ldr	r3, [r3, #8]
 800a07c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a080:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800a084:	f043 0204 	orr.w	r2, r3, #4
 800a088:	687b      	ldr	r3, [r7, #4]
 800a08a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 800a08c:	bf00      	nop
 800a08e:	370c      	adds	r7, #12
 800a090:	46bd      	mov	sp, r7
 800a092:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a096:	4770      	bx	lr

0800a098 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 800a098:	b480      	push	{r7}
 800a09a:	b083      	sub	sp, #12
 800a09c:	af00      	add	r7, sp, #0
 800a09e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800a0a0:	687b      	ldr	r3, [r7, #4]
 800a0a2:	689b      	ldr	r3, [r3, #8]
 800a0a4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a0a8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800a0ac:	f043 0210 	orr.w	r2, r3, #16
 800a0b0:	687b      	ldr	r3, [r7, #4]
 800a0b2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 800a0b4:	bf00      	nop
 800a0b6:	370c      	adds	r7, #12
 800a0b8:	46bd      	mov	sp, r7
 800a0ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0be:	4770      	bx	lr

0800a0c0 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800a0c0:	b480      	push	{r7}
 800a0c2:	b083      	sub	sp, #12
 800a0c4:	af00      	add	r7, sp, #0
 800a0c6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800a0c8:	687b      	ldr	r3, [r7, #4]
 800a0ca:	689b      	ldr	r3, [r3, #8]
 800a0cc:	f003 0304 	and.w	r3, r3, #4
 800a0d0:	2b04      	cmp	r3, #4
 800a0d2:	d101      	bne.n	800a0d8 <LL_ADC_REG_IsConversionOngoing+0x18>
 800a0d4:	2301      	movs	r3, #1
 800a0d6:	e000      	b.n	800a0da <LL_ADC_REG_IsConversionOngoing+0x1a>
 800a0d8:	2300      	movs	r3, #0
}
 800a0da:	4618      	mov	r0, r3
 800a0dc:	370c      	adds	r7, #12
 800a0de:	46bd      	mov	sp, r7
 800a0e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0e4:	4770      	bx	lr

0800a0e6 <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 800a0e6:	b480      	push	{r7}
 800a0e8:	b083      	sub	sp, #12
 800a0ea:	af00      	add	r7, sp, #0
 800a0ec:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800a0ee:	687b      	ldr	r3, [r7, #4]
 800a0f0:	689b      	ldr	r3, [r3, #8]
 800a0f2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a0f6:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800a0fa:	f043 0220 	orr.w	r2, r3, #32
 800a0fe:	687b      	ldr	r3, [r7, #4]
 800a100:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 800a102:	bf00      	nop
 800a104:	370c      	adds	r7, #12
 800a106:	46bd      	mov	sp, r7
 800a108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a10c:	4770      	bx	lr

0800a10e <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800a10e:	b480      	push	{r7}
 800a110:	b083      	sub	sp, #12
 800a112:	af00      	add	r7, sp, #0
 800a114:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800a116:	687b      	ldr	r3, [r7, #4]
 800a118:	689b      	ldr	r3, [r3, #8]
 800a11a:	f003 0308 	and.w	r3, r3, #8
 800a11e:	2b08      	cmp	r3, #8
 800a120:	d101      	bne.n	800a126 <LL_ADC_INJ_IsConversionOngoing+0x18>
 800a122:	2301      	movs	r3, #1
 800a124:	e000      	b.n	800a128 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 800a126:	2300      	movs	r3, #0
}
 800a128:	4618      	mov	r0, r3
 800a12a:	370c      	adds	r7, #12
 800a12c:	46bd      	mov	sp, r7
 800a12e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a132:	4770      	bx	lr

0800a134 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800a134:	b590      	push	{r4, r7, lr}
 800a136:	b089      	sub	sp, #36	; 0x24
 800a138:	af00      	add	r7, sp, #0
 800a13a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800a13c:	2300      	movs	r3, #0
 800a13e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 800a140:	2300      	movs	r3, #0
 800a142:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 800a144:	687b      	ldr	r3, [r7, #4]
 800a146:	2b00      	cmp	r3, #0
 800a148:	d101      	bne.n	800a14e <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800a14a:	2301      	movs	r3, #1
 800a14c:	e1af      	b.n	800a4ae <HAL_ADC_Init+0x37a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800a14e:	687b      	ldr	r3, [r7, #4]
 800a150:	695b      	ldr	r3, [r3, #20]
 800a152:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800a154:	687b      	ldr	r3, [r7, #4]
 800a156:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a158:	2b00      	cmp	r3, #0
 800a15a:	d109      	bne.n	800a170 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800a15c:	6878      	ldr	r0, [r7, #4]
 800a15e:	f7fe fadb 	bl	8008718 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800a162:	687b      	ldr	r3, [r7, #4]
 800a164:	2200      	movs	r2, #0
 800a166:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 800a168:	687b      	ldr	r3, [r7, #4]
 800a16a:	2200      	movs	r2, #0
 800a16c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 800a170:	687b      	ldr	r3, [r7, #4]
 800a172:	681b      	ldr	r3, [r3, #0]
 800a174:	4618      	mov	r0, r3
 800a176:	f7ff fef1 	bl	8009f5c <LL_ADC_IsDeepPowerDownEnabled>
 800a17a:	4603      	mov	r3, r0
 800a17c:	2b00      	cmp	r3, #0
 800a17e:	d004      	beq.n	800a18a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 800a180:	687b      	ldr	r3, [r7, #4]
 800a182:	681b      	ldr	r3, [r3, #0]
 800a184:	4618      	mov	r0, r3
 800a186:	f7ff fed7 	bl	8009f38 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800a18a:	687b      	ldr	r3, [r7, #4]
 800a18c:	681b      	ldr	r3, [r3, #0]
 800a18e:	4618      	mov	r0, r3
 800a190:	f7ff ff0c 	bl	8009fac <LL_ADC_IsInternalRegulatorEnabled>
 800a194:	4603      	mov	r3, r0
 800a196:	2b00      	cmp	r3, #0
 800a198:	d115      	bne.n	800a1c6 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800a19a:	687b      	ldr	r3, [r7, #4]
 800a19c:	681b      	ldr	r3, [r3, #0]
 800a19e:	4618      	mov	r0, r3
 800a1a0:	f7ff fef0 	bl	8009f84 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800a1a4:	4b9f      	ldr	r3, [pc, #636]	; (800a424 <HAL_ADC_Init+0x2f0>)
 800a1a6:	681b      	ldr	r3, [r3, #0]
 800a1a8:	099b      	lsrs	r3, r3, #6
 800a1aa:	4a9f      	ldr	r2, [pc, #636]	; (800a428 <HAL_ADC_Init+0x2f4>)
 800a1ac:	fba2 2303 	umull	r2, r3, r2, r3
 800a1b0:	099b      	lsrs	r3, r3, #6
 800a1b2:	3301      	adds	r3, #1
 800a1b4:	005b      	lsls	r3, r3, #1
 800a1b6:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800a1b8:	e002      	b.n	800a1c0 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 800a1ba:	68bb      	ldr	r3, [r7, #8]
 800a1bc:	3b01      	subs	r3, #1
 800a1be:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800a1c0:	68bb      	ldr	r3, [r7, #8]
 800a1c2:	2b00      	cmp	r3, #0
 800a1c4:	d1f9      	bne.n	800a1ba <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800a1c6:	687b      	ldr	r3, [r7, #4]
 800a1c8:	681b      	ldr	r3, [r3, #0]
 800a1ca:	4618      	mov	r0, r3
 800a1cc:	f7ff feee 	bl	8009fac <LL_ADC_IsInternalRegulatorEnabled>
 800a1d0:	4603      	mov	r3, r0
 800a1d2:	2b00      	cmp	r3, #0
 800a1d4:	d10d      	bne.n	800a1f2 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800a1d6:	687b      	ldr	r3, [r7, #4]
 800a1d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a1da:	f043 0210 	orr.w	r2, r3, #16
 800a1de:	687b      	ldr	r3, [r7, #4]
 800a1e0:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800a1e2:	687b      	ldr	r3, [r7, #4]
 800a1e4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a1e6:	f043 0201 	orr.w	r2, r3, #1
 800a1ea:	687b      	ldr	r3, [r7, #4]
 800a1ec:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 800a1ee:	2301      	movs	r3, #1
 800a1f0:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800a1f2:	687b      	ldr	r3, [r7, #4]
 800a1f4:	681b      	ldr	r3, [r3, #0]
 800a1f6:	4618      	mov	r0, r3
 800a1f8:	f7ff ff62 	bl	800a0c0 <LL_ADC_REG_IsConversionOngoing>
 800a1fc:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800a1fe:	687b      	ldr	r3, [r7, #4]
 800a200:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a202:	f003 0310 	and.w	r3, r3, #16
 800a206:	2b00      	cmp	r3, #0
 800a208:	f040 8148 	bne.w	800a49c <HAL_ADC_Init+0x368>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 800a20c:	697b      	ldr	r3, [r7, #20]
 800a20e:	2b00      	cmp	r3, #0
 800a210:	f040 8144 	bne.w	800a49c <HAL_ADC_Init+0x368>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800a214:	687b      	ldr	r3, [r7, #4]
 800a216:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a218:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 800a21c:	f043 0202 	orr.w	r2, r3, #2
 800a220:	687b      	ldr	r3, [r7, #4]
 800a222:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800a224:	687b      	ldr	r3, [r7, #4]
 800a226:	681b      	ldr	r3, [r3, #0]
 800a228:	4618      	mov	r0, r3
 800a22a:	f7ff fefb 	bl	800a024 <LL_ADC_IsEnabled>
 800a22e:	4603      	mov	r3, r0
 800a230:	2b00      	cmp	r3, #0
 800a232:	d141      	bne.n	800a2b8 <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800a234:	687b      	ldr	r3, [r7, #4]
 800a236:	681b      	ldr	r3, [r3, #0]
 800a238:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a23c:	d004      	beq.n	800a248 <HAL_ADC_Init+0x114>
 800a23e:	687b      	ldr	r3, [r7, #4]
 800a240:	681b      	ldr	r3, [r3, #0]
 800a242:	4a7a      	ldr	r2, [pc, #488]	; (800a42c <HAL_ADC_Init+0x2f8>)
 800a244:	4293      	cmp	r3, r2
 800a246:	d10f      	bne.n	800a268 <HAL_ADC_Init+0x134>
 800a248:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 800a24c:	f7ff feea 	bl	800a024 <LL_ADC_IsEnabled>
 800a250:	4604      	mov	r4, r0
 800a252:	4876      	ldr	r0, [pc, #472]	; (800a42c <HAL_ADC_Init+0x2f8>)
 800a254:	f7ff fee6 	bl	800a024 <LL_ADC_IsEnabled>
 800a258:	4603      	mov	r3, r0
 800a25a:	4323      	orrs	r3, r4
 800a25c:	2b00      	cmp	r3, #0
 800a25e:	bf0c      	ite	eq
 800a260:	2301      	moveq	r3, #1
 800a262:	2300      	movne	r3, #0
 800a264:	b2db      	uxtb	r3, r3
 800a266:	e012      	b.n	800a28e <HAL_ADC_Init+0x15a>
 800a268:	4871      	ldr	r0, [pc, #452]	; (800a430 <HAL_ADC_Init+0x2fc>)
 800a26a:	f7ff fedb 	bl	800a024 <LL_ADC_IsEnabled>
 800a26e:	4604      	mov	r4, r0
 800a270:	4870      	ldr	r0, [pc, #448]	; (800a434 <HAL_ADC_Init+0x300>)
 800a272:	f7ff fed7 	bl	800a024 <LL_ADC_IsEnabled>
 800a276:	4603      	mov	r3, r0
 800a278:	431c      	orrs	r4, r3
 800a27a:	486f      	ldr	r0, [pc, #444]	; (800a438 <HAL_ADC_Init+0x304>)
 800a27c:	f7ff fed2 	bl	800a024 <LL_ADC_IsEnabled>
 800a280:	4603      	mov	r3, r0
 800a282:	4323      	orrs	r3, r4
 800a284:	2b00      	cmp	r3, #0
 800a286:	bf0c      	ite	eq
 800a288:	2301      	moveq	r3, #1
 800a28a:	2300      	movne	r3, #0
 800a28c:	b2db      	uxtb	r3, r3
 800a28e:	2b00      	cmp	r3, #0
 800a290:	d012      	beq.n	800a2b8 <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800a292:	687b      	ldr	r3, [r7, #4]
 800a294:	681b      	ldr	r3, [r3, #0]
 800a296:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a29a:	d004      	beq.n	800a2a6 <HAL_ADC_Init+0x172>
 800a29c:	687b      	ldr	r3, [r7, #4]
 800a29e:	681b      	ldr	r3, [r3, #0]
 800a2a0:	4a62      	ldr	r2, [pc, #392]	; (800a42c <HAL_ADC_Init+0x2f8>)
 800a2a2:	4293      	cmp	r3, r2
 800a2a4:	d101      	bne.n	800a2aa <HAL_ADC_Init+0x176>
 800a2a6:	4a65      	ldr	r2, [pc, #404]	; (800a43c <HAL_ADC_Init+0x308>)
 800a2a8:	e000      	b.n	800a2ac <HAL_ADC_Init+0x178>
 800a2aa:	4a65      	ldr	r2, [pc, #404]	; (800a440 <HAL_ADC_Init+0x30c>)
 800a2ac:	687b      	ldr	r3, [r7, #4]
 800a2ae:	685b      	ldr	r3, [r3, #4]
 800a2b0:	4619      	mov	r1, r3
 800a2b2:	4610      	mov	r0, r2
 800a2b4:	f7ff fcce 	bl	8009c54 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800a2b8:	687b      	ldr	r3, [r7, #4]
 800a2ba:	7f5b      	ldrb	r3, [r3, #29]
 800a2bc:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 800a2be:	687b      	ldr	r3, [r7, #4]
 800a2c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800a2c2:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 800a2c4:	687b      	ldr	r3, [r7, #4]
 800a2c6:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 800a2c8:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 800a2ca:	687b      	ldr	r3, [r7, #4]
 800a2cc:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 800a2ce:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800a2d0:	687b      	ldr	r3, [r7, #4]
 800a2d2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800a2d6:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800a2d8:	4313      	orrs	r3, r2
 800a2da:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800a2dc:	687b      	ldr	r3, [r7, #4]
 800a2de:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800a2e2:	2b01      	cmp	r3, #1
 800a2e4:	d106      	bne.n	800a2f4 <HAL_ADC_Init+0x1c0>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800a2e6:	687b      	ldr	r3, [r7, #4]
 800a2e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a2ea:	3b01      	subs	r3, #1
 800a2ec:	045b      	lsls	r3, r3, #17
 800a2ee:	69ba      	ldr	r2, [r7, #24]
 800a2f0:	4313      	orrs	r3, r2
 800a2f2:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800a2f4:	687b      	ldr	r3, [r7, #4]
 800a2f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a2f8:	2b00      	cmp	r3, #0
 800a2fa:	d009      	beq.n	800a310 <HAL_ADC_Init+0x1dc>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800a2fc:	687b      	ldr	r3, [r7, #4]
 800a2fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a300:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 800a304:	687b      	ldr	r3, [r7, #4]
 800a306:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a308:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800a30a:	69ba      	ldr	r2, [r7, #24]
 800a30c:	4313      	orrs	r3, r2
 800a30e:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 800a310:	687b      	ldr	r3, [r7, #4]
 800a312:	681b      	ldr	r3, [r3, #0]
 800a314:	68da      	ldr	r2, [r3, #12]
 800a316:	4b4b      	ldr	r3, [pc, #300]	; (800a444 <HAL_ADC_Init+0x310>)
 800a318:	4013      	ands	r3, r2
 800a31a:	687a      	ldr	r2, [r7, #4]
 800a31c:	6812      	ldr	r2, [r2, #0]
 800a31e:	69b9      	ldr	r1, [r7, #24]
 800a320:	430b      	orrs	r3, r1
 800a322:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 800a324:	687b      	ldr	r3, [r7, #4]
 800a326:	681b      	ldr	r3, [r3, #0]
 800a328:	691b      	ldr	r3, [r3, #16]
 800a32a:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 800a32e:	687b      	ldr	r3, [r7, #4]
 800a330:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a332:	687b      	ldr	r3, [r7, #4]
 800a334:	681b      	ldr	r3, [r3, #0]
 800a336:	430a      	orrs	r2, r1
 800a338:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800a33a:	687b      	ldr	r3, [r7, #4]
 800a33c:	681b      	ldr	r3, [r3, #0]
 800a33e:	4618      	mov	r0, r3
 800a340:	f7ff febe 	bl	800a0c0 <LL_ADC_REG_IsConversionOngoing>
 800a344:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800a346:	687b      	ldr	r3, [r7, #4]
 800a348:	681b      	ldr	r3, [r3, #0]
 800a34a:	4618      	mov	r0, r3
 800a34c:	f7ff fedf 	bl	800a10e <LL_ADC_INJ_IsConversionOngoing>
 800a350:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800a352:	693b      	ldr	r3, [r7, #16]
 800a354:	2b00      	cmp	r3, #0
 800a356:	d17f      	bne.n	800a458 <HAL_ADC_Init+0x324>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800a358:	68fb      	ldr	r3, [r7, #12]
 800a35a:	2b00      	cmp	r3, #0
 800a35c:	d17c      	bne.n	800a458 <HAL_ADC_Init+0x324>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800a35e:	687b      	ldr	r3, [r7, #4]
 800a360:	7f1b      	ldrb	r3, [r3, #28]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 800a362:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800a364:	687b      	ldr	r3, [r7, #4]
 800a366:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800a36a:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 800a36c:	4313      	orrs	r3, r2
 800a36e:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 800a370:	687b      	ldr	r3, [r7, #4]
 800a372:	681b      	ldr	r3, [r3, #0]
 800a374:	68db      	ldr	r3, [r3, #12]
 800a376:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a37a:	f023 0302 	bic.w	r3, r3, #2
 800a37e:	687a      	ldr	r2, [r7, #4]
 800a380:	6812      	ldr	r2, [r2, #0]
 800a382:	69b9      	ldr	r1, [r7, #24]
 800a384:	430b      	orrs	r3, r1
 800a386:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 800a388:	687b      	ldr	r3, [r7, #4]
 800a38a:	691b      	ldr	r3, [r3, #16]
 800a38c:	2b00      	cmp	r3, #0
 800a38e:	d017      	beq.n	800a3c0 <HAL_ADC_Init+0x28c>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 800a390:	687b      	ldr	r3, [r7, #4]
 800a392:	681b      	ldr	r3, [r3, #0]
 800a394:	691a      	ldr	r2, [r3, #16]
 800a396:	687b      	ldr	r3, [r7, #4]
 800a398:	681b      	ldr	r3, [r3, #0]
 800a39a:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800a39e:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 800a3a0:	687b      	ldr	r3, [r7, #4]
 800a3a2:	681b      	ldr	r3, [r3, #0]
 800a3a4:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800a3a8:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 800a3ac:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800a3b0:	687a      	ldr	r2, [r7, #4]
 800a3b2:	6911      	ldr	r1, [r2, #16]
 800a3b4:	687a      	ldr	r2, [r7, #4]
 800a3b6:	6812      	ldr	r2, [r2, #0]
 800a3b8:	430b      	orrs	r3, r1
 800a3ba:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 800a3be:	e013      	b.n	800a3e8 <HAL_ADC_Init+0x2b4>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 800a3c0:	687b      	ldr	r3, [r7, #4]
 800a3c2:	681b      	ldr	r3, [r3, #0]
 800a3c4:	691a      	ldr	r2, [r3, #16]
 800a3c6:	687b      	ldr	r3, [r7, #4]
 800a3c8:	681b      	ldr	r3, [r3, #0]
 800a3ca:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800a3ce:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 800a3d0:	687b      	ldr	r3, [r7, #4]
 800a3d2:	681b      	ldr	r3, [r3, #0]
 800a3d4:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800a3d8:	687a      	ldr	r2, [r7, #4]
 800a3da:	6812      	ldr	r2, [r2, #0]
 800a3dc:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 800a3e0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800a3e4:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 800a3e8:	687b      	ldr	r3, [r7, #4]
 800a3ea:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800a3ee:	2b01      	cmp	r3, #1
 800a3f0:	d12a      	bne.n	800a448 <HAL_ADC_Init+0x314>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 800a3f2:	687b      	ldr	r3, [r7, #4]
 800a3f4:	681b      	ldr	r3, [r3, #0]
 800a3f6:	691b      	ldr	r3, [r3, #16]
 800a3f8:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800a3fc:	f023 0304 	bic.w	r3, r3, #4
 800a400:	687a      	ldr	r2, [r7, #4]
 800a402:	6c51      	ldr	r1, [r2, #68]	; 0x44
 800a404:	687a      	ldr	r2, [r7, #4]
 800a406:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800a408:	4311      	orrs	r1, r2
 800a40a:	687a      	ldr	r2, [r7, #4]
 800a40c:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800a40e:	4311      	orrs	r1, r2
 800a410:	687a      	ldr	r2, [r7, #4]
 800a412:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800a414:	430a      	orrs	r2, r1
 800a416:	431a      	orrs	r2, r3
 800a418:	687b      	ldr	r3, [r7, #4]
 800a41a:	681b      	ldr	r3, [r3, #0]
 800a41c:	f042 0201 	orr.w	r2, r2, #1
 800a420:	611a      	str	r2, [r3, #16]
 800a422:	e019      	b.n	800a458 <HAL_ADC_Init+0x324>
 800a424:	2000037c 	.word	0x2000037c
 800a428:	053e2d63 	.word	0x053e2d63
 800a42c:	50000100 	.word	0x50000100
 800a430:	50000400 	.word	0x50000400
 800a434:	50000500 	.word	0x50000500
 800a438:	50000600 	.word	0x50000600
 800a43c:	50000300 	.word	0x50000300
 800a440:	50000700 	.word	0x50000700
 800a444:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800a448:	687b      	ldr	r3, [r7, #4]
 800a44a:	681b      	ldr	r3, [r3, #0]
 800a44c:	691a      	ldr	r2, [r3, #16]
 800a44e:	687b      	ldr	r3, [r7, #4]
 800a450:	681b      	ldr	r3, [r3, #0]
 800a452:	f022 0201 	bic.w	r2, r2, #1
 800a456:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800a458:	687b      	ldr	r3, [r7, #4]
 800a45a:	695b      	ldr	r3, [r3, #20]
 800a45c:	2b01      	cmp	r3, #1
 800a45e:	d10c      	bne.n	800a47a <HAL_ADC_Init+0x346>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800a460:	687b      	ldr	r3, [r7, #4]
 800a462:	681b      	ldr	r3, [r3, #0]
 800a464:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a466:	f023 010f 	bic.w	r1, r3, #15
 800a46a:	687b      	ldr	r3, [r7, #4]
 800a46c:	6a1b      	ldr	r3, [r3, #32]
 800a46e:	1e5a      	subs	r2, r3, #1
 800a470:	687b      	ldr	r3, [r7, #4]
 800a472:	681b      	ldr	r3, [r3, #0]
 800a474:	430a      	orrs	r2, r1
 800a476:	631a      	str	r2, [r3, #48]	; 0x30
 800a478:	e007      	b.n	800a48a <HAL_ADC_Init+0x356>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800a47a:	687b      	ldr	r3, [r7, #4]
 800a47c:	681b      	ldr	r3, [r3, #0]
 800a47e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a480:	687b      	ldr	r3, [r7, #4]
 800a482:	681b      	ldr	r3, [r3, #0]
 800a484:	f022 020f 	bic.w	r2, r2, #15
 800a488:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800a48a:	687b      	ldr	r3, [r7, #4]
 800a48c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a48e:	f023 0303 	bic.w	r3, r3, #3
 800a492:	f043 0201 	orr.w	r2, r3, #1
 800a496:	687b      	ldr	r3, [r7, #4]
 800a498:	65da      	str	r2, [r3, #92]	; 0x5c
 800a49a:	e007      	b.n	800a4ac <HAL_ADC_Init+0x378>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800a49c:	687b      	ldr	r3, [r7, #4]
 800a49e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a4a0:	f043 0210 	orr.w	r2, r3, #16
 800a4a4:	687b      	ldr	r3, [r7, #4]
 800a4a6:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 800a4a8:	2301      	movs	r3, #1
 800a4aa:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 800a4ac:	7ffb      	ldrb	r3, [r7, #31]
}
 800a4ae:	4618      	mov	r0, r3
 800a4b0:	3724      	adds	r7, #36	; 0x24
 800a4b2:	46bd      	mov	sp, r7
 800a4b4:	bd90      	pop	{r4, r7, pc}
 800a4b6:	bf00      	nop

0800a4b8 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 800a4b8:	b580      	push	{r7, lr}
 800a4ba:	b086      	sub	sp, #24
 800a4bc:	af00      	add	r7, sp, #0
 800a4be:	60f8      	str	r0, [r7, #12]
 800a4c0:	60b9      	str	r1, [r7, #8]
 800a4c2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800a4c4:	68fb      	ldr	r3, [r7, #12]
 800a4c6:	681b      	ldr	r3, [r3, #0]
 800a4c8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a4cc:	d004      	beq.n	800a4d8 <HAL_ADC_Start_DMA+0x20>
 800a4ce:	68fb      	ldr	r3, [r7, #12]
 800a4d0:	681b      	ldr	r3, [r3, #0]
 800a4d2:	4a5a      	ldr	r2, [pc, #360]	; (800a63c <HAL_ADC_Start_DMA+0x184>)
 800a4d4:	4293      	cmp	r3, r2
 800a4d6:	d101      	bne.n	800a4dc <HAL_ADC_Start_DMA+0x24>
 800a4d8:	4b59      	ldr	r3, [pc, #356]	; (800a640 <HAL_ADC_Start_DMA+0x188>)
 800a4da:	e000      	b.n	800a4de <HAL_ADC_Start_DMA+0x26>
 800a4dc:	4b59      	ldr	r3, [pc, #356]	; (800a644 <HAL_ADC_Start_DMA+0x18c>)
 800a4de:	4618      	mov	r0, r3
 800a4e0:	f7ff fd1c 	bl	8009f1c <LL_ADC_GetMultimode>
 800a4e4:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800a4e6:	68fb      	ldr	r3, [r7, #12]
 800a4e8:	681b      	ldr	r3, [r3, #0]
 800a4ea:	4618      	mov	r0, r3
 800a4ec:	f7ff fde8 	bl	800a0c0 <LL_ADC_REG_IsConversionOngoing>
 800a4f0:	4603      	mov	r3, r0
 800a4f2:	2b00      	cmp	r3, #0
 800a4f4:	f040 809b 	bne.w	800a62e <HAL_ADC_Start_DMA+0x176>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800a4f8:	68fb      	ldr	r3, [r7, #12]
 800a4fa:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800a4fe:	2b01      	cmp	r3, #1
 800a500:	d101      	bne.n	800a506 <HAL_ADC_Start_DMA+0x4e>
 800a502:	2302      	movs	r3, #2
 800a504:	e096      	b.n	800a634 <HAL_ADC_Start_DMA+0x17c>
 800a506:	68fb      	ldr	r3, [r7, #12]
 800a508:	2201      	movs	r2, #1
 800a50a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 800a50e:	68fb      	ldr	r3, [r7, #12]
 800a510:	681b      	ldr	r3, [r3, #0]
 800a512:	4a4d      	ldr	r2, [pc, #308]	; (800a648 <HAL_ADC_Start_DMA+0x190>)
 800a514:	4293      	cmp	r3, r2
 800a516:	d008      	beq.n	800a52a <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800a518:	693b      	ldr	r3, [r7, #16]
 800a51a:	2b00      	cmp	r3, #0
 800a51c:	d005      	beq.n	800a52a <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800a51e:	693b      	ldr	r3, [r7, #16]
 800a520:	2b05      	cmp	r3, #5
 800a522:	d002      	beq.n	800a52a <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800a524:	693b      	ldr	r3, [r7, #16]
 800a526:	2b09      	cmp	r3, #9
 800a528:	d17a      	bne.n	800a620 <HAL_ADC_Start_DMA+0x168>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 800a52a:	68f8      	ldr	r0, [r7, #12]
 800a52c:	f000 fe14 	bl	800b158 <ADC_Enable>
 800a530:	4603      	mov	r3, r0
 800a532:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 800a534:	7dfb      	ldrb	r3, [r7, #23]
 800a536:	2b00      	cmp	r3, #0
 800a538:	d16d      	bne.n	800a616 <HAL_ADC_Start_DMA+0x15e>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 800a53a:	68fb      	ldr	r3, [r7, #12]
 800a53c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a53e:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800a542:	f023 0301 	bic.w	r3, r3, #1
 800a546:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800a54a:	68fb      	ldr	r3, [r7, #12]
 800a54c:	65da      	str	r2, [r3, #92]	; 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800a54e:	68fb      	ldr	r3, [r7, #12]
 800a550:	681b      	ldr	r3, [r3, #0]
 800a552:	4a3a      	ldr	r2, [pc, #232]	; (800a63c <HAL_ADC_Start_DMA+0x184>)
 800a554:	4293      	cmp	r3, r2
 800a556:	d009      	beq.n	800a56c <HAL_ADC_Start_DMA+0xb4>
 800a558:	68fb      	ldr	r3, [r7, #12]
 800a55a:	681b      	ldr	r3, [r3, #0]
 800a55c:	4a3b      	ldr	r2, [pc, #236]	; (800a64c <HAL_ADC_Start_DMA+0x194>)
 800a55e:	4293      	cmp	r3, r2
 800a560:	d002      	beq.n	800a568 <HAL_ADC_Start_DMA+0xb0>
 800a562:	68fb      	ldr	r3, [r7, #12]
 800a564:	681b      	ldr	r3, [r3, #0]
 800a566:	e003      	b.n	800a570 <HAL_ADC_Start_DMA+0xb8>
 800a568:	4b39      	ldr	r3, [pc, #228]	; (800a650 <HAL_ADC_Start_DMA+0x198>)
 800a56a:	e001      	b.n	800a570 <HAL_ADC_Start_DMA+0xb8>
 800a56c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800a570:	68fa      	ldr	r2, [r7, #12]
 800a572:	6812      	ldr	r2, [r2, #0]
 800a574:	4293      	cmp	r3, r2
 800a576:	d002      	beq.n	800a57e <HAL_ADC_Start_DMA+0xc6>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800a578:	693b      	ldr	r3, [r7, #16]
 800a57a:	2b00      	cmp	r3, #0
 800a57c:	d105      	bne.n	800a58a <HAL_ADC_Start_DMA+0xd2>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800a57e:	68fb      	ldr	r3, [r7, #12]
 800a580:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a582:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800a586:	68fb      	ldr	r3, [r7, #12]
 800a588:	65da      	str	r2, [r3, #92]	; 0x5c
        }
#endif

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 800a58a:	68fb      	ldr	r3, [r7, #12]
 800a58c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a58e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800a592:	2b00      	cmp	r3, #0
 800a594:	d006      	beq.n	800a5a4 <HAL_ADC_Start_DMA+0xec>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800a596:	68fb      	ldr	r3, [r7, #12]
 800a598:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a59a:	f023 0206 	bic.w	r2, r3, #6
 800a59e:	68fb      	ldr	r3, [r7, #12]
 800a5a0:	661a      	str	r2, [r3, #96]	; 0x60
 800a5a2:	e002      	b.n	800a5aa <HAL_ADC_Start_DMA+0xf2>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 800a5a4:	68fb      	ldr	r3, [r7, #12]
 800a5a6:	2200      	movs	r2, #0
 800a5a8:	661a      	str	r2, [r3, #96]	; 0x60
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800a5aa:	68fb      	ldr	r3, [r7, #12]
 800a5ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a5ae:	4a29      	ldr	r2, [pc, #164]	; (800a654 <HAL_ADC_Start_DMA+0x19c>)
 800a5b0:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800a5b2:	68fb      	ldr	r3, [r7, #12]
 800a5b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a5b6:	4a28      	ldr	r2, [pc, #160]	; (800a658 <HAL_ADC_Start_DMA+0x1a0>)
 800a5b8:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800a5ba:	68fb      	ldr	r3, [r7, #12]
 800a5bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a5be:	4a27      	ldr	r2, [pc, #156]	; (800a65c <HAL_ADC_Start_DMA+0x1a4>)
 800a5c0:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800a5c2:	68fb      	ldr	r3, [r7, #12]
 800a5c4:	681b      	ldr	r3, [r3, #0]
 800a5c6:	221c      	movs	r2, #28
 800a5c8:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 800a5ca:	68fb      	ldr	r3, [r7, #12]
 800a5cc:	2200      	movs	r2, #0
 800a5ce:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800a5d2:	68fb      	ldr	r3, [r7, #12]
 800a5d4:	681b      	ldr	r3, [r3, #0]
 800a5d6:	685a      	ldr	r2, [r3, #4]
 800a5d8:	68fb      	ldr	r3, [r7, #12]
 800a5da:	681b      	ldr	r3, [r3, #0]
 800a5dc:	f042 0210 	orr.w	r2, r2, #16
 800a5e0:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 800a5e2:	68fb      	ldr	r3, [r7, #12]
 800a5e4:	681b      	ldr	r3, [r3, #0]
 800a5e6:	68da      	ldr	r2, [r3, #12]
 800a5e8:	68fb      	ldr	r3, [r7, #12]
 800a5ea:	681b      	ldr	r3, [r3, #0]
 800a5ec:	f042 0201 	orr.w	r2, r2, #1
 800a5f0:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800a5f2:	68fb      	ldr	r3, [r7, #12]
 800a5f4:	6d58      	ldr	r0, [r3, #84]	; 0x54
 800a5f6:	68fb      	ldr	r3, [r7, #12]
 800a5f8:	681b      	ldr	r3, [r3, #0]
 800a5fa:	3340      	adds	r3, #64	; 0x40
 800a5fc:	4619      	mov	r1, r3
 800a5fe:	68ba      	ldr	r2, [r7, #8]
 800a600:	687b      	ldr	r3, [r7, #4]
 800a602:	f001 fa8d 	bl	800bb20 <HAL_DMA_Start_IT>
 800a606:	4603      	mov	r3, r0
 800a608:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 800a60a:	68fb      	ldr	r3, [r7, #12]
 800a60c:	681b      	ldr	r3, [r3, #0]
 800a60e:	4618      	mov	r0, r3
 800a610:	f7ff fd2e 	bl	800a070 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 800a614:	e00d      	b.n	800a632 <HAL_ADC_Start_DMA+0x17a>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800a616:	68fb      	ldr	r3, [r7, #12]
 800a618:	2200      	movs	r2, #0
 800a61a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
      if (tmp_hal_status == HAL_OK)
 800a61e:	e008      	b.n	800a632 <HAL_ADC_Start_DMA+0x17a>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 800a620:	2301      	movs	r3, #1
 800a622:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800a624:	68fb      	ldr	r3, [r7, #12]
 800a626:	2200      	movs	r2, #0
 800a628:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
 800a62c:	e001      	b.n	800a632 <HAL_ADC_Start_DMA+0x17a>
    }
#endif
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800a62e:	2302      	movs	r3, #2
 800a630:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 800a632:	7dfb      	ldrb	r3, [r7, #23]
}
 800a634:	4618      	mov	r0, r3
 800a636:	3718      	adds	r7, #24
 800a638:	46bd      	mov	sp, r7
 800a63a:	bd80      	pop	{r7, pc}
 800a63c:	50000100 	.word	0x50000100
 800a640:	50000300 	.word	0x50000300
 800a644:	50000700 	.word	0x50000700
 800a648:	50000600 	.word	0x50000600
 800a64c:	50000500 	.word	0x50000500
 800a650:	50000400 	.word	0x50000400
 800a654:	0800b2db 	.word	0x0800b2db
 800a658:	0800b3b3 	.word	0x0800b3b3
 800a65c:	0800b3cf 	.word	0x0800b3cf

0800a660 <HAL_ADC_Stop_DMA>:
  *         For multimode, the dedicated HAL_ADCEx_MultiModeStop_DMA() API must be used.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef *hadc)
{
 800a660:	b580      	push	{r7, lr}
 800a662:	b084      	sub	sp, #16
 800a664:	af00      	add	r7, sp, #0
 800a666:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 800a668:	687b      	ldr	r3, [r7, #4]
 800a66a:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800a66e:	2b01      	cmp	r3, #1
 800a670:	d101      	bne.n	800a676 <HAL_ADC_Stop_DMA+0x16>
 800a672:	2302      	movs	r3, #2
 800a674:	e051      	b.n	800a71a <HAL_ADC_Stop_DMA+0xba>
 800a676:	687b      	ldr	r3, [r7, #4]
 800a678:	2201      	movs	r2, #1
 800a67a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* 1. Stop potential ADC group regular conversion on going */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 800a67e:	2103      	movs	r1, #3
 800a680:	6878      	ldr	r0, [r7, #4]
 800a682:	f000 fcad 	bl	800afe0 <ADC_ConversionStop>
 800a686:	4603      	mov	r3, r0
 800a688:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 800a68a:	7bfb      	ldrb	r3, [r7, #15]
 800a68c:	2b00      	cmp	r3, #0
 800a68e:	d13f      	bne.n	800a710 <HAL_ADC_Stop_DMA+0xb0>
  {
    /* Disable ADC DMA (ADC DMA configuration of continuous requests is kept) */
    CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 800a690:	687b      	ldr	r3, [r7, #4]
 800a692:	681b      	ldr	r3, [r3, #0]
 800a694:	68da      	ldr	r2, [r3, #12]
 800a696:	687b      	ldr	r3, [r7, #4]
 800a698:	681b      	ldr	r3, [r3, #0]
 800a69a:	f022 0201 	bic.w	r2, r2, #1
 800a69e:	60da      	str	r2, [r3, #12]

    /* Disable the DMA channel (in case of DMA in circular mode or stop       */
    /* while DMA transfer is on going)                                        */
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 800a6a0:	687b      	ldr	r3, [r7, #4]
 800a6a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a6a4:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800a6a8:	b2db      	uxtb	r3, r3
 800a6aa:	2b02      	cmp	r3, #2
 800a6ac:	d10f      	bne.n	800a6ce <HAL_ADC_Stop_DMA+0x6e>
    {
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 800a6ae:	687b      	ldr	r3, [r7, #4]
 800a6b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a6b2:	4618      	mov	r0, r3
 800a6b4:	f001 faaf 	bl	800bc16 <HAL_DMA_Abort>
 800a6b8:	4603      	mov	r3, r0
 800a6ba:	73fb      	strb	r3, [r7, #15]

      /* Check if DMA channel effectively disabled */
      if (tmp_hal_status != HAL_OK)
 800a6bc:	7bfb      	ldrb	r3, [r7, #15]
 800a6be:	2b00      	cmp	r3, #0
 800a6c0:	d005      	beq.n	800a6ce <HAL_ADC_Stop_DMA+0x6e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800a6c2:	687b      	ldr	r3, [r7, #4]
 800a6c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a6c6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800a6ca:	687b      	ldr	r3, [r7, #4]
 800a6cc:	65da      	str	r2, [r3, #92]	; 0x5c
      }
    }

    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 800a6ce:	687b      	ldr	r3, [r7, #4]
 800a6d0:	681b      	ldr	r3, [r3, #0]
 800a6d2:	685a      	ldr	r2, [r3, #4]
 800a6d4:	687b      	ldr	r3, [r7, #4]
 800a6d6:	681b      	ldr	r3, [r3, #0]
 800a6d8:	f022 0210 	bic.w	r2, r2, #16
 800a6dc:	605a      	str	r2, [r3, #4]

    /* 2. Disable the ADC peripheral */
    /* Update "tmp_hal_status" only if DMA channel disabling passed,          */
    /* to keep in memory a potential failing status.                          */
    if (tmp_hal_status == HAL_OK)
 800a6de:	7bfb      	ldrb	r3, [r7, #15]
 800a6e0:	2b00      	cmp	r3, #0
 800a6e2:	d105      	bne.n	800a6f0 <HAL_ADC_Stop_DMA+0x90>
    {
      tmp_hal_status = ADC_Disable(hadc);
 800a6e4:	6878      	ldr	r0, [r7, #4]
 800a6e6:	f000 fd99 	bl	800b21c <ADC_Disable>
 800a6ea:	4603      	mov	r3, r0
 800a6ec:	73fb      	strb	r3, [r7, #15]
 800a6ee:	e002      	b.n	800a6f6 <HAL_ADC_Stop_DMA+0x96>
    }
    else
    {
      (void)ADC_Disable(hadc);
 800a6f0:	6878      	ldr	r0, [r7, #4]
 800a6f2:	f000 fd93 	bl	800b21c <ADC_Disable>
    }

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 800a6f6:	7bfb      	ldrb	r3, [r7, #15]
 800a6f8:	2b00      	cmp	r3, #0
 800a6fa:	d109      	bne.n	800a710 <HAL_ADC_Stop_DMA+0xb0>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800a6fc:	687b      	ldr	r3, [r7, #4]
 800a6fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a700:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800a704:	f023 0301 	bic.w	r3, r3, #1
 800a708:	f043 0201 	orr.w	r2, r3, #1
 800a70c:	687b      	ldr	r3, [r7, #4]
 800a70e:	65da      	str	r2, [r3, #92]	; 0x5c
    }

  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800a710:	687b      	ldr	r3, [r7, #4]
 800a712:	2200      	movs	r2, #0
 800a714:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 800a718:	7bfb      	ldrb	r3, [r7, #15]
}
 800a71a:	4618      	mov	r0, r3
 800a71c:	3710      	adds	r7, #16
 800a71e:	46bd      	mov	sp, r7
 800a720:	bd80      	pop	{r7, pc}

0800a722 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 800a722:	b480      	push	{r7}
 800a724:	b083      	sub	sp, #12
 800a726:	af00      	add	r7, sp, #0
 800a728:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 800a72a:	bf00      	nop
 800a72c:	370c      	adds	r7, #12
 800a72e:	46bd      	mov	sp, r7
 800a730:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a734:	4770      	bx	lr

0800a736 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 800a736:	b480      	push	{r7}
 800a738:	b083      	sub	sp, #12
 800a73a:	af00      	add	r7, sp, #0
 800a73c:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 800a73e:	bf00      	nop
 800a740:	370c      	adds	r7, #12
 800a742:	46bd      	mov	sp, r7
 800a744:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a748:	4770      	bx	lr

0800a74a <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800a74a:	b480      	push	{r7}
 800a74c:	b083      	sub	sp, #12
 800a74e:	af00      	add	r7, sp, #0
 800a750:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 800a752:	bf00      	nop
 800a754:	370c      	adds	r7, #12
 800a756:	46bd      	mov	sp, r7
 800a758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a75c:	4770      	bx	lr
	...

0800a760 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 800a760:	b580      	push	{r7, lr}
 800a762:	b0b6      	sub	sp, #216	; 0xd8
 800a764:	af00      	add	r7, sp, #0
 800a766:	6078      	str	r0, [r7, #4]
 800a768:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800a76a:	2300      	movs	r3, #0
 800a76c:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 800a770:	2300      	movs	r3, #0
 800a772:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800a774:	687b      	ldr	r3, [r7, #4]
 800a776:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800a77a:	2b01      	cmp	r3, #1
 800a77c:	d102      	bne.n	800a784 <HAL_ADC_ConfigChannel+0x24>
 800a77e:	2302      	movs	r3, #2
 800a780:	f000 bc13 	b.w	800afaa <HAL_ADC_ConfigChannel+0x84a>
 800a784:	687b      	ldr	r3, [r7, #4]
 800a786:	2201      	movs	r2, #1
 800a788:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800a78c:	687b      	ldr	r3, [r7, #4]
 800a78e:	681b      	ldr	r3, [r3, #0]
 800a790:	4618      	mov	r0, r3
 800a792:	f7ff fc95 	bl	800a0c0 <LL_ADC_REG_IsConversionOngoing>
 800a796:	4603      	mov	r3, r0
 800a798:	2b00      	cmp	r3, #0
 800a79a:	f040 83f3 	bne.w	800af84 <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 800a79e:	687b      	ldr	r3, [r7, #4]
 800a7a0:	6818      	ldr	r0, [r3, #0]
 800a7a2:	683b      	ldr	r3, [r7, #0]
 800a7a4:	6859      	ldr	r1, [r3, #4]
 800a7a6:	683b      	ldr	r3, [r7, #0]
 800a7a8:	681b      	ldr	r3, [r3, #0]
 800a7aa:	461a      	mov	r2, r3
 800a7ac:	f7ff fb37 	bl	8009e1e <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800a7b0:	687b      	ldr	r3, [r7, #4]
 800a7b2:	681b      	ldr	r3, [r3, #0]
 800a7b4:	4618      	mov	r0, r3
 800a7b6:	f7ff fc83 	bl	800a0c0 <LL_ADC_REG_IsConversionOngoing>
 800a7ba:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800a7be:	687b      	ldr	r3, [r7, #4]
 800a7c0:	681b      	ldr	r3, [r3, #0]
 800a7c2:	4618      	mov	r0, r3
 800a7c4:	f7ff fca3 	bl	800a10e <LL_ADC_INJ_IsConversionOngoing>
 800a7c8:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800a7cc:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800a7d0:	2b00      	cmp	r3, #0
 800a7d2:	f040 81d9 	bne.w	800ab88 <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800a7d6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800a7da:	2b00      	cmp	r3, #0
 800a7dc:	f040 81d4 	bne.w	800ab88 <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 800a7e0:	683b      	ldr	r3, [r7, #0]
 800a7e2:	689b      	ldr	r3, [r3, #8]
 800a7e4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a7e8:	d10f      	bne.n	800a80a <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 800a7ea:	687b      	ldr	r3, [r7, #4]
 800a7ec:	6818      	ldr	r0, [r3, #0]
 800a7ee:	683b      	ldr	r3, [r7, #0]
 800a7f0:	681b      	ldr	r3, [r3, #0]
 800a7f2:	2200      	movs	r2, #0
 800a7f4:	4619      	mov	r1, r3
 800a7f6:	f7ff fb3e 	bl	8009e76 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 800a7fa:	687b      	ldr	r3, [r7, #4]
 800a7fc:	681b      	ldr	r3, [r3, #0]
 800a7fe:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 800a802:	4618      	mov	r0, r3
 800a804:	f7ff fae5 	bl	8009dd2 <LL_ADC_SetSamplingTimeCommonConfig>
 800a808:	e00e      	b.n	800a828 <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 800a80a:	687b      	ldr	r3, [r7, #4]
 800a80c:	6818      	ldr	r0, [r3, #0]
 800a80e:	683b      	ldr	r3, [r7, #0]
 800a810:	6819      	ldr	r1, [r3, #0]
 800a812:	683b      	ldr	r3, [r7, #0]
 800a814:	689b      	ldr	r3, [r3, #8]
 800a816:	461a      	mov	r2, r3
 800a818:	f7ff fb2d 	bl	8009e76 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 800a81c:	687b      	ldr	r3, [r7, #4]
 800a81e:	681b      	ldr	r3, [r3, #0]
 800a820:	2100      	movs	r1, #0
 800a822:	4618      	mov	r0, r3
 800a824:	f7ff fad5 	bl	8009dd2 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 800a828:	683b      	ldr	r3, [r7, #0]
 800a82a:	695a      	ldr	r2, [r3, #20]
 800a82c:	687b      	ldr	r3, [r7, #4]
 800a82e:	681b      	ldr	r3, [r3, #0]
 800a830:	68db      	ldr	r3, [r3, #12]
 800a832:	08db      	lsrs	r3, r3, #3
 800a834:	f003 0303 	and.w	r3, r3, #3
 800a838:	005b      	lsls	r3, r3, #1
 800a83a:	fa02 f303 	lsl.w	r3, r2, r3
 800a83e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 800a842:	683b      	ldr	r3, [r7, #0]
 800a844:	691b      	ldr	r3, [r3, #16]
 800a846:	2b04      	cmp	r3, #4
 800a848:	d022      	beq.n	800a890 <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 800a84a:	687b      	ldr	r3, [r7, #4]
 800a84c:	6818      	ldr	r0, [r3, #0]
 800a84e:	683b      	ldr	r3, [r7, #0]
 800a850:	6919      	ldr	r1, [r3, #16]
 800a852:	683b      	ldr	r3, [r7, #0]
 800a854:	681a      	ldr	r2, [r3, #0]
 800a856:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800a85a:	f7ff fa2f 	bl	8009cbc <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(sConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 800a85e:	687b      	ldr	r3, [r7, #4]
 800a860:	6818      	ldr	r0, [r3, #0]
 800a862:	683b      	ldr	r3, [r7, #0]
 800a864:	6919      	ldr	r1, [r3, #16]
 800a866:	683b      	ldr	r3, [r7, #0]
 800a868:	699b      	ldr	r3, [r3, #24]
 800a86a:	461a      	mov	r2, r3
 800a86c:	f7ff fa7b 	bl	8009d66 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 800a870:	687b      	ldr	r3, [r7, #4]
 800a872:	6818      	ldr	r0, [r3, #0]
 800a874:	683b      	ldr	r3, [r7, #0]
 800a876:	6919      	ldr	r1, [r3, #16]
 800a878:	683b      	ldr	r3, [r7, #0]
 800a87a:	7f1b      	ldrb	r3, [r3, #28]
 800a87c:	2b01      	cmp	r3, #1
 800a87e:	d102      	bne.n	800a886 <HAL_ADC_ConfigChannel+0x126>
 800a880:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800a884:	e000      	b.n	800a888 <HAL_ADC_ConfigChannel+0x128>
 800a886:	2300      	movs	r3, #0
 800a888:	461a      	mov	r2, r3
 800a88a:	f7ff fa87 	bl	8009d9c <LL_ADC_SetOffsetSaturation>
 800a88e:	e17b      	b.n	800ab88 <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800a890:	687b      	ldr	r3, [r7, #4]
 800a892:	681b      	ldr	r3, [r3, #0]
 800a894:	2100      	movs	r1, #0
 800a896:	4618      	mov	r0, r3
 800a898:	f7ff fa34 	bl	8009d04 <LL_ADC_GetOffsetChannel>
 800a89c:	4603      	mov	r3, r0
 800a89e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a8a2:	2b00      	cmp	r3, #0
 800a8a4:	d10a      	bne.n	800a8bc <HAL_ADC_ConfigChannel+0x15c>
 800a8a6:	687b      	ldr	r3, [r7, #4]
 800a8a8:	681b      	ldr	r3, [r3, #0]
 800a8aa:	2100      	movs	r1, #0
 800a8ac:	4618      	mov	r0, r3
 800a8ae:	f7ff fa29 	bl	8009d04 <LL_ADC_GetOffsetChannel>
 800a8b2:	4603      	mov	r3, r0
 800a8b4:	0e9b      	lsrs	r3, r3, #26
 800a8b6:	f003 021f 	and.w	r2, r3, #31
 800a8ba:	e01e      	b.n	800a8fa <HAL_ADC_ConfigChannel+0x19a>
 800a8bc:	687b      	ldr	r3, [r7, #4]
 800a8be:	681b      	ldr	r3, [r3, #0]
 800a8c0:	2100      	movs	r1, #0
 800a8c2:	4618      	mov	r0, r3
 800a8c4:	f7ff fa1e 	bl	8009d04 <LL_ADC_GetOffsetChannel>
 800a8c8:	4603      	mov	r3, r0
 800a8ca:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a8ce:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800a8d2:	fa93 f3a3 	rbit	r3, r3
 800a8d6:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800a8da:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800a8de:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800a8e2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800a8e6:	2b00      	cmp	r3, #0
 800a8e8:	d101      	bne.n	800a8ee <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 800a8ea:	2320      	movs	r3, #32
 800a8ec:	e004      	b.n	800a8f8 <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 800a8ee:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800a8f2:	fab3 f383 	clz	r3, r3
 800a8f6:	b2db      	uxtb	r3, r3
 800a8f8:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800a8fa:	683b      	ldr	r3, [r7, #0]
 800a8fc:	681b      	ldr	r3, [r3, #0]
 800a8fe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a902:	2b00      	cmp	r3, #0
 800a904:	d105      	bne.n	800a912 <HAL_ADC_ConfigChannel+0x1b2>
 800a906:	683b      	ldr	r3, [r7, #0]
 800a908:	681b      	ldr	r3, [r3, #0]
 800a90a:	0e9b      	lsrs	r3, r3, #26
 800a90c:	f003 031f 	and.w	r3, r3, #31
 800a910:	e018      	b.n	800a944 <HAL_ADC_ConfigChannel+0x1e4>
 800a912:	683b      	ldr	r3, [r7, #0]
 800a914:	681b      	ldr	r3, [r3, #0]
 800a916:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a91a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800a91e:	fa93 f3a3 	rbit	r3, r3
 800a922:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 800a926:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800a92a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 800a92e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800a932:	2b00      	cmp	r3, #0
 800a934:	d101      	bne.n	800a93a <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 800a936:	2320      	movs	r3, #32
 800a938:	e004      	b.n	800a944 <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 800a93a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800a93e:	fab3 f383 	clz	r3, r3
 800a942:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800a944:	429a      	cmp	r2, r3
 800a946:	d106      	bne.n	800a956 <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 800a948:	687b      	ldr	r3, [r7, #4]
 800a94a:	681b      	ldr	r3, [r3, #0]
 800a94c:	2200      	movs	r2, #0
 800a94e:	2100      	movs	r1, #0
 800a950:	4618      	mov	r0, r3
 800a952:	f7ff f9ed 	bl	8009d30 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800a956:	687b      	ldr	r3, [r7, #4]
 800a958:	681b      	ldr	r3, [r3, #0]
 800a95a:	2101      	movs	r1, #1
 800a95c:	4618      	mov	r0, r3
 800a95e:	f7ff f9d1 	bl	8009d04 <LL_ADC_GetOffsetChannel>
 800a962:	4603      	mov	r3, r0
 800a964:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a968:	2b00      	cmp	r3, #0
 800a96a:	d10a      	bne.n	800a982 <HAL_ADC_ConfigChannel+0x222>
 800a96c:	687b      	ldr	r3, [r7, #4]
 800a96e:	681b      	ldr	r3, [r3, #0]
 800a970:	2101      	movs	r1, #1
 800a972:	4618      	mov	r0, r3
 800a974:	f7ff f9c6 	bl	8009d04 <LL_ADC_GetOffsetChannel>
 800a978:	4603      	mov	r3, r0
 800a97a:	0e9b      	lsrs	r3, r3, #26
 800a97c:	f003 021f 	and.w	r2, r3, #31
 800a980:	e01e      	b.n	800a9c0 <HAL_ADC_ConfigChannel+0x260>
 800a982:	687b      	ldr	r3, [r7, #4]
 800a984:	681b      	ldr	r3, [r3, #0]
 800a986:	2101      	movs	r1, #1
 800a988:	4618      	mov	r0, r3
 800a98a:	f7ff f9bb 	bl	8009d04 <LL_ADC_GetOffsetChannel>
 800a98e:	4603      	mov	r3, r0
 800a990:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a994:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800a998:	fa93 f3a3 	rbit	r3, r3
 800a99c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 800a9a0:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800a9a4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 800a9a8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800a9ac:	2b00      	cmp	r3, #0
 800a9ae:	d101      	bne.n	800a9b4 <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 800a9b0:	2320      	movs	r3, #32
 800a9b2:	e004      	b.n	800a9be <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 800a9b4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800a9b8:	fab3 f383 	clz	r3, r3
 800a9bc:	b2db      	uxtb	r3, r3
 800a9be:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800a9c0:	683b      	ldr	r3, [r7, #0]
 800a9c2:	681b      	ldr	r3, [r3, #0]
 800a9c4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a9c8:	2b00      	cmp	r3, #0
 800a9ca:	d105      	bne.n	800a9d8 <HAL_ADC_ConfigChannel+0x278>
 800a9cc:	683b      	ldr	r3, [r7, #0]
 800a9ce:	681b      	ldr	r3, [r3, #0]
 800a9d0:	0e9b      	lsrs	r3, r3, #26
 800a9d2:	f003 031f 	and.w	r3, r3, #31
 800a9d6:	e018      	b.n	800aa0a <HAL_ADC_ConfigChannel+0x2aa>
 800a9d8:	683b      	ldr	r3, [r7, #0]
 800a9da:	681b      	ldr	r3, [r3, #0]
 800a9dc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a9e0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800a9e4:	fa93 f3a3 	rbit	r3, r3
 800a9e8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 800a9ec:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800a9f0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 800a9f4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800a9f8:	2b00      	cmp	r3, #0
 800a9fa:	d101      	bne.n	800aa00 <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 800a9fc:	2320      	movs	r3, #32
 800a9fe:	e004      	b.n	800aa0a <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 800aa00:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800aa04:	fab3 f383 	clz	r3, r3
 800aa08:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800aa0a:	429a      	cmp	r2, r3
 800aa0c:	d106      	bne.n	800aa1c <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 800aa0e:	687b      	ldr	r3, [r7, #4]
 800aa10:	681b      	ldr	r3, [r3, #0]
 800aa12:	2200      	movs	r2, #0
 800aa14:	2101      	movs	r1, #1
 800aa16:	4618      	mov	r0, r3
 800aa18:	f7ff f98a 	bl	8009d30 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800aa1c:	687b      	ldr	r3, [r7, #4]
 800aa1e:	681b      	ldr	r3, [r3, #0]
 800aa20:	2102      	movs	r1, #2
 800aa22:	4618      	mov	r0, r3
 800aa24:	f7ff f96e 	bl	8009d04 <LL_ADC_GetOffsetChannel>
 800aa28:	4603      	mov	r3, r0
 800aa2a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800aa2e:	2b00      	cmp	r3, #0
 800aa30:	d10a      	bne.n	800aa48 <HAL_ADC_ConfigChannel+0x2e8>
 800aa32:	687b      	ldr	r3, [r7, #4]
 800aa34:	681b      	ldr	r3, [r3, #0]
 800aa36:	2102      	movs	r1, #2
 800aa38:	4618      	mov	r0, r3
 800aa3a:	f7ff f963 	bl	8009d04 <LL_ADC_GetOffsetChannel>
 800aa3e:	4603      	mov	r3, r0
 800aa40:	0e9b      	lsrs	r3, r3, #26
 800aa42:	f003 021f 	and.w	r2, r3, #31
 800aa46:	e01e      	b.n	800aa86 <HAL_ADC_ConfigChannel+0x326>
 800aa48:	687b      	ldr	r3, [r7, #4]
 800aa4a:	681b      	ldr	r3, [r3, #0]
 800aa4c:	2102      	movs	r1, #2
 800aa4e:	4618      	mov	r0, r3
 800aa50:	f7ff f958 	bl	8009d04 <LL_ADC_GetOffsetChannel>
 800aa54:	4603      	mov	r3, r0
 800aa56:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800aa5a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800aa5e:	fa93 f3a3 	rbit	r3, r3
 800aa62:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 800aa66:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800aa6a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 800aa6e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800aa72:	2b00      	cmp	r3, #0
 800aa74:	d101      	bne.n	800aa7a <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 800aa76:	2320      	movs	r3, #32
 800aa78:	e004      	b.n	800aa84 <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 800aa7a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800aa7e:	fab3 f383 	clz	r3, r3
 800aa82:	b2db      	uxtb	r3, r3
 800aa84:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800aa86:	683b      	ldr	r3, [r7, #0]
 800aa88:	681b      	ldr	r3, [r3, #0]
 800aa8a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800aa8e:	2b00      	cmp	r3, #0
 800aa90:	d105      	bne.n	800aa9e <HAL_ADC_ConfigChannel+0x33e>
 800aa92:	683b      	ldr	r3, [r7, #0]
 800aa94:	681b      	ldr	r3, [r3, #0]
 800aa96:	0e9b      	lsrs	r3, r3, #26
 800aa98:	f003 031f 	and.w	r3, r3, #31
 800aa9c:	e016      	b.n	800aacc <HAL_ADC_ConfigChannel+0x36c>
 800aa9e:	683b      	ldr	r3, [r7, #0]
 800aaa0:	681b      	ldr	r3, [r3, #0]
 800aaa2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800aaa6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800aaaa:	fa93 f3a3 	rbit	r3, r3
 800aaae:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 800aab0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800aab2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 800aab6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800aaba:	2b00      	cmp	r3, #0
 800aabc:	d101      	bne.n	800aac2 <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 800aabe:	2320      	movs	r3, #32
 800aac0:	e004      	b.n	800aacc <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 800aac2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800aac6:	fab3 f383 	clz	r3, r3
 800aaca:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800aacc:	429a      	cmp	r2, r3
 800aace:	d106      	bne.n	800aade <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 800aad0:	687b      	ldr	r3, [r7, #4]
 800aad2:	681b      	ldr	r3, [r3, #0]
 800aad4:	2200      	movs	r2, #0
 800aad6:	2102      	movs	r1, #2
 800aad8:	4618      	mov	r0, r3
 800aada:	f7ff f929 	bl	8009d30 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800aade:	687b      	ldr	r3, [r7, #4]
 800aae0:	681b      	ldr	r3, [r3, #0]
 800aae2:	2103      	movs	r1, #3
 800aae4:	4618      	mov	r0, r3
 800aae6:	f7ff f90d 	bl	8009d04 <LL_ADC_GetOffsetChannel>
 800aaea:	4603      	mov	r3, r0
 800aaec:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800aaf0:	2b00      	cmp	r3, #0
 800aaf2:	d10a      	bne.n	800ab0a <HAL_ADC_ConfigChannel+0x3aa>
 800aaf4:	687b      	ldr	r3, [r7, #4]
 800aaf6:	681b      	ldr	r3, [r3, #0]
 800aaf8:	2103      	movs	r1, #3
 800aafa:	4618      	mov	r0, r3
 800aafc:	f7ff f902 	bl	8009d04 <LL_ADC_GetOffsetChannel>
 800ab00:	4603      	mov	r3, r0
 800ab02:	0e9b      	lsrs	r3, r3, #26
 800ab04:	f003 021f 	and.w	r2, r3, #31
 800ab08:	e017      	b.n	800ab3a <HAL_ADC_ConfigChannel+0x3da>
 800ab0a:	687b      	ldr	r3, [r7, #4]
 800ab0c:	681b      	ldr	r3, [r3, #0]
 800ab0e:	2103      	movs	r1, #3
 800ab10:	4618      	mov	r0, r3
 800ab12:	f7ff f8f7 	bl	8009d04 <LL_ADC_GetOffsetChannel>
 800ab16:	4603      	mov	r3, r0
 800ab18:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800ab1a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800ab1c:	fa93 f3a3 	rbit	r3, r3
 800ab20:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 800ab22:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800ab24:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 800ab26:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ab28:	2b00      	cmp	r3, #0
 800ab2a:	d101      	bne.n	800ab30 <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 800ab2c:	2320      	movs	r3, #32
 800ab2e:	e003      	b.n	800ab38 <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 800ab30:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ab32:	fab3 f383 	clz	r3, r3
 800ab36:	b2db      	uxtb	r3, r3
 800ab38:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800ab3a:	683b      	ldr	r3, [r7, #0]
 800ab3c:	681b      	ldr	r3, [r3, #0]
 800ab3e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800ab42:	2b00      	cmp	r3, #0
 800ab44:	d105      	bne.n	800ab52 <HAL_ADC_ConfigChannel+0x3f2>
 800ab46:	683b      	ldr	r3, [r7, #0]
 800ab48:	681b      	ldr	r3, [r3, #0]
 800ab4a:	0e9b      	lsrs	r3, r3, #26
 800ab4c:	f003 031f 	and.w	r3, r3, #31
 800ab50:	e011      	b.n	800ab76 <HAL_ADC_ConfigChannel+0x416>
 800ab52:	683b      	ldr	r3, [r7, #0]
 800ab54:	681b      	ldr	r3, [r3, #0]
 800ab56:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800ab58:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800ab5a:	fa93 f3a3 	rbit	r3, r3
 800ab5e:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 800ab60:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ab62:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 800ab64:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ab66:	2b00      	cmp	r3, #0
 800ab68:	d101      	bne.n	800ab6e <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 800ab6a:	2320      	movs	r3, #32
 800ab6c:	e003      	b.n	800ab76 <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 800ab6e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ab70:	fab3 f383 	clz	r3, r3
 800ab74:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800ab76:	429a      	cmp	r2, r3
 800ab78:	d106      	bne.n	800ab88 <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 800ab7a:	687b      	ldr	r3, [r7, #4]
 800ab7c:	681b      	ldr	r3, [r3, #0]
 800ab7e:	2200      	movs	r2, #0
 800ab80:	2103      	movs	r1, #3
 800ab82:	4618      	mov	r0, r3
 800ab84:	f7ff f8d4 	bl	8009d30 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800ab88:	687b      	ldr	r3, [r7, #4]
 800ab8a:	681b      	ldr	r3, [r3, #0]
 800ab8c:	4618      	mov	r0, r3
 800ab8e:	f7ff fa49 	bl	800a024 <LL_ADC_IsEnabled>
 800ab92:	4603      	mov	r3, r0
 800ab94:	2b00      	cmp	r3, #0
 800ab96:	f040 813d 	bne.w	800ae14 <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 800ab9a:	687b      	ldr	r3, [r7, #4]
 800ab9c:	6818      	ldr	r0, [r3, #0]
 800ab9e:	683b      	ldr	r3, [r7, #0]
 800aba0:	6819      	ldr	r1, [r3, #0]
 800aba2:	683b      	ldr	r3, [r7, #0]
 800aba4:	68db      	ldr	r3, [r3, #12]
 800aba6:	461a      	mov	r2, r3
 800aba8:	f7ff f990 	bl	8009ecc <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800abac:	683b      	ldr	r3, [r7, #0]
 800abae:	68db      	ldr	r3, [r3, #12]
 800abb0:	4aa2      	ldr	r2, [pc, #648]	; (800ae3c <HAL_ADC_ConfigChannel+0x6dc>)
 800abb2:	4293      	cmp	r3, r2
 800abb4:	f040 812e 	bne.w	800ae14 <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800abb8:	687b      	ldr	r3, [r7, #4]
 800abba:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800abbc:	683b      	ldr	r3, [r7, #0]
 800abbe:	681b      	ldr	r3, [r3, #0]
 800abc0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800abc4:	2b00      	cmp	r3, #0
 800abc6:	d10b      	bne.n	800abe0 <HAL_ADC_ConfigChannel+0x480>
 800abc8:	683b      	ldr	r3, [r7, #0]
 800abca:	681b      	ldr	r3, [r3, #0]
 800abcc:	0e9b      	lsrs	r3, r3, #26
 800abce:	3301      	adds	r3, #1
 800abd0:	f003 031f 	and.w	r3, r3, #31
 800abd4:	2b09      	cmp	r3, #9
 800abd6:	bf94      	ite	ls
 800abd8:	2301      	movls	r3, #1
 800abda:	2300      	movhi	r3, #0
 800abdc:	b2db      	uxtb	r3, r3
 800abde:	e019      	b.n	800ac14 <HAL_ADC_ConfigChannel+0x4b4>
 800abe0:	683b      	ldr	r3, [r7, #0]
 800abe2:	681b      	ldr	r3, [r3, #0]
 800abe4:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800abe6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800abe8:	fa93 f3a3 	rbit	r3, r3
 800abec:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 800abee:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800abf0:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 800abf2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800abf4:	2b00      	cmp	r3, #0
 800abf6:	d101      	bne.n	800abfc <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 800abf8:	2320      	movs	r3, #32
 800abfa:	e003      	b.n	800ac04 <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 800abfc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800abfe:	fab3 f383 	clz	r3, r3
 800ac02:	b2db      	uxtb	r3, r3
 800ac04:	3301      	adds	r3, #1
 800ac06:	f003 031f 	and.w	r3, r3, #31
 800ac0a:	2b09      	cmp	r3, #9
 800ac0c:	bf94      	ite	ls
 800ac0e:	2301      	movls	r3, #1
 800ac10:	2300      	movhi	r3, #0
 800ac12:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800ac14:	2b00      	cmp	r3, #0
 800ac16:	d079      	beq.n	800ad0c <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800ac18:	683b      	ldr	r3, [r7, #0]
 800ac1a:	681b      	ldr	r3, [r3, #0]
 800ac1c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800ac20:	2b00      	cmp	r3, #0
 800ac22:	d107      	bne.n	800ac34 <HAL_ADC_ConfigChannel+0x4d4>
 800ac24:	683b      	ldr	r3, [r7, #0]
 800ac26:	681b      	ldr	r3, [r3, #0]
 800ac28:	0e9b      	lsrs	r3, r3, #26
 800ac2a:	3301      	adds	r3, #1
 800ac2c:	069b      	lsls	r3, r3, #26
 800ac2e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800ac32:	e015      	b.n	800ac60 <HAL_ADC_ConfigChannel+0x500>
 800ac34:	683b      	ldr	r3, [r7, #0]
 800ac36:	681b      	ldr	r3, [r3, #0]
 800ac38:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800ac3a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ac3c:	fa93 f3a3 	rbit	r3, r3
 800ac40:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 800ac42:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ac44:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 800ac46:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ac48:	2b00      	cmp	r3, #0
 800ac4a:	d101      	bne.n	800ac50 <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 800ac4c:	2320      	movs	r3, #32
 800ac4e:	e003      	b.n	800ac58 <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 800ac50:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ac52:	fab3 f383 	clz	r3, r3
 800ac56:	b2db      	uxtb	r3, r3
 800ac58:	3301      	adds	r3, #1
 800ac5a:	069b      	lsls	r3, r3, #26
 800ac5c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800ac60:	683b      	ldr	r3, [r7, #0]
 800ac62:	681b      	ldr	r3, [r3, #0]
 800ac64:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800ac68:	2b00      	cmp	r3, #0
 800ac6a:	d109      	bne.n	800ac80 <HAL_ADC_ConfigChannel+0x520>
 800ac6c:	683b      	ldr	r3, [r7, #0]
 800ac6e:	681b      	ldr	r3, [r3, #0]
 800ac70:	0e9b      	lsrs	r3, r3, #26
 800ac72:	3301      	adds	r3, #1
 800ac74:	f003 031f 	and.w	r3, r3, #31
 800ac78:	2101      	movs	r1, #1
 800ac7a:	fa01 f303 	lsl.w	r3, r1, r3
 800ac7e:	e017      	b.n	800acb0 <HAL_ADC_ConfigChannel+0x550>
 800ac80:	683b      	ldr	r3, [r7, #0]
 800ac82:	681b      	ldr	r3, [r3, #0]
 800ac84:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800ac86:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ac88:	fa93 f3a3 	rbit	r3, r3
 800ac8c:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 800ac8e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ac90:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 800ac92:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ac94:	2b00      	cmp	r3, #0
 800ac96:	d101      	bne.n	800ac9c <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 800ac98:	2320      	movs	r3, #32
 800ac9a:	e003      	b.n	800aca4 <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 800ac9c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ac9e:	fab3 f383 	clz	r3, r3
 800aca2:	b2db      	uxtb	r3, r3
 800aca4:	3301      	adds	r3, #1
 800aca6:	f003 031f 	and.w	r3, r3, #31
 800acaa:	2101      	movs	r1, #1
 800acac:	fa01 f303 	lsl.w	r3, r1, r3
 800acb0:	ea42 0103 	orr.w	r1, r2, r3
 800acb4:	683b      	ldr	r3, [r7, #0]
 800acb6:	681b      	ldr	r3, [r3, #0]
 800acb8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800acbc:	2b00      	cmp	r3, #0
 800acbe:	d10a      	bne.n	800acd6 <HAL_ADC_ConfigChannel+0x576>
 800acc0:	683b      	ldr	r3, [r7, #0]
 800acc2:	681b      	ldr	r3, [r3, #0]
 800acc4:	0e9b      	lsrs	r3, r3, #26
 800acc6:	3301      	adds	r3, #1
 800acc8:	f003 021f 	and.w	r2, r3, #31
 800accc:	4613      	mov	r3, r2
 800acce:	005b      	lsls	r3, r3, #1
 800acd0:	4413      	add	r3, r2
 800acd2:	051b      	lsls	r3, r3, #20
 800acd4:	e018      	b.n	800ad08 <HAL_ADC_ConfigChannel+0x5a8>
 800acd6:	683b      	ldr	r3, [r7, #0]
 800acd8:	681b      	ldr	r3, [r3, #0]
 800acda:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800acdc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800acde:	fa93 f3a3 	rbit	r3, r3
 800ace2:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 800ace4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ace6:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 800ace8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800acea:	2b00      	cmp	r3, #0
 800acec:	d101      	bne.n	800acf2 <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 800acee:	2320      	movs	r3, #32
 800acf0:	e003      	b.n	800acfa <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 800acf2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800acf4:	fab3 f383 	clz	r3, r3
 800acf8:	b2db      	uxtb	r3, r3
 800acfa:	3301      	adds	r3, #1
 800acfc:	f003 021f 	and.w	r2, r3, #31
 800ad00:	4613      	mov	r3, r2
 800ad02:	005b      	lsls	r3, r3, #1
 800ad04:	4413      	add	r3, r2
 800ad06:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800ad08:	430b      	orrs	r3, r1
 800ad0a:	e07e      	b.n	800ae0a <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800ad0c:	683b      	ldr	r3, [r7, #0]
 800ad0e:	681b      	ldr	r3, [r3, #0]
 800ad10:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800ad14:	2b00      	cmp	r3, #0
 800ad16:	d107      	bne.n	800ad28 <HAL_ADC_ConfigChannel+0x5c8>
 800ad18:	683b      	ldr	r3, [r7, #0]
 800ad1a:	681b      	ldr	r3, [r3, #0]
 800ad1c:	0e9b      	lsrs	r3, r3, #26
 800ad1e:	3301      	adds	r3, #1
 800ad20:	069b      	lsls	r3, r3, #26
 800ad22:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800ad26:	e015      	b.n	800ad54 <HAL_ADC_ConfigChannel+0x5f4>
 800ad28:	683b      	ldr	r3, [r7, #0]
 800ad2a:	681b      	ldr	r3, [r3, #0]
 800ad2c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800ad2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad30:	fa93 f3a3 	rbit	r3, r3
 800ad34:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 800ad36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad38:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 800ad3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad3c:	2b00      	cmp	r3, #0
 800ad3e:	d101      	bne.n	800ad44 <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 800ad40:	2320      	movs	r3, #32
 800ad42:	e003      	b.n	800ad4c <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 800ad44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad46:	fab3 f383 	clz	r3, r3
 800ad4a:	b2db      	uxtb	r3, r3
 800ad4c:	3301      	adds	r3, #1
 800ad4e:	069b      	lsls	r3, r3, #26
 800ad50:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800ad54:	683b      	ldr	r3, [r7, #0]
 800ad56:	681b      	ldr	r3, [r3, #0]
 800ad58:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800ad5c:	2b00      	cmp	r3, #0
 800ad5e:	d109      	bne.n	800ad74 <HAL_ADC_ConfigChannel+0x614>
 800ad60:	683b      	ldr	r3, [r7, #0]
 800ad62:	681b      	ldr	r3, [r3, #0]
 800ad64:	0e9b      	lsrs	r3, r3, #26
 800ad66:	3301      	adds	r3, #1
 800ad68:	f003 031f 	and.w	r3, r3, #31
 800ad6c:	2101      	movs	r1, #1
 800ad6e:	fa01 f303 	lsl.w	r3, r1, r3
 800ad72:	e017      	b.n	800ada4 <HAL_ADC_ConfigChannel+0x644>
 800ad74:	683b      	ldr	r3, [r7, #0]
 800ad76:	681b      	ldr	r3, [r3, #0]
 800ad78:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800ad7a:	6a3b      	ldr	r3, [r7, #32]
 800ad7c:	fa93 f3a3 	rbit	r3, r3
 800ad80:	61fb      	str	r3, [r7, #28]
  return result;
 800ad82:	69fb      	ldr	r3, [r7, #28]
 800ad84:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 800ad86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad88:	2b00      	cmp	r3, #0
 800ad8a:	d101      	bne.n	800ad90 <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 800ad8c:	2320      	movs	r3, #32
 800ad8e:	e003      	b.n	800ad98 <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 800ad90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad92:	fab3 f383 	clz	r3, r3
 800ad96:	b2db      	uxtb	r3, r3
 800ad98:	3301      	adds	r3, #1
 800ad9a:	f003 031f 	and.w	r3, r3, #31
 800ad9e:	2101      	movs	r1, #1
 800ada0:	fa01 f303 	lsl.w	r3, r1, r3
 800ada4:	ea42 0103 	orr.w	r1, r2, r3
 800ada8:	683b      	ldr	r3, [r7, #0]
 800adaa:	681b      	ldr	r3, [r3, #0]
 800adac:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800adb0:	2b00      	cmp	r3, #0
 800adb2:	d10d      	bne.n	800add0 <HAL_ADC_ConfigChannel+0x670>
 800adb4:	683b      	ldr	r3, [r7, #0]
 800adb6:	681b      	ldr	r3, [r3, #0]
 800adb8:	0e9b      	lsrs	r3, r3, #26
 800adba:	3301      	adds	r3, #1
 800adbc:	f003 021f 	and.w	r2, r3, #31
 800adc0:	4613      	mov	r3, r2
 800adc2:	005b      	lsls	r3, r3, #1
 800adc4:	4413      	add	r3, r2
 800adc6:	3b1e      	subs	r3, #30
 800adc8:	051b      	lsls	r3, r3, #20
 800adca:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800adce:	e01b      	b.n	800ae08 <HAL_ADC_ConfigChannel+0x6a8>
 800add0:	683b      	ldr	r3, [r7, #0]
 800add2:	681b      	ldr	r3, [r3, #0]
 800add4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800add6:	697b      	ldr	r3, [r7, #20]
 800add8:	fa93 f3a3 	rbit	r3, r3
 800addc:	613b      	str	r3, [r7, #16]
  return result;
 800adde:	693b      	ldr	r3, [r7, #16]
 800ade0:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800ade2:	69bb      	ldr	r3, [r7, #24]
 800ade4:	2b00      	cmp	r3, #0
 800ade6:	d101      	bne.n	800adec <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 800ade8:	2320      	movs	r3, #32
 800adea:	e003      	b.n	800adf4 <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 800adec:	69bb      	ldr	r3, [r7, #24]
 800adee:	fab3 f383 	clz	r3, r3
 800adf2:	b2db      	uxtb	r3, r3
 800adf4:	3301      	adds	r3, #1
 800adf6:	f003 021f 	and.w	r2, r3, #31
 800adfa:	4613      	mov	r3, r2
 800adfc:	005b      	lsls	r3, r3, #1
 800adfe:	4413      	add	r3, r2
 800ae00:	3b1e      	subs	r3, #30
 800ae02:	051b      	lsls	r3, r3, #20
 800ae04:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800ae08:	430b      	orrs	r3, r1
 800ae0a:	683a      	ldr	r2, [r7, #0]
 800ae0c:	6892      	ldr	r2, [r2, #8]
 800ae0e:	4619      	mov	r1, r3
 800ae10:	f7ff f831 	bl	8009e76 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 800ae14:	683b      	ldr	r3, [r7, #0]
 800ae16:	681a      	ldr	r2, [r3, #0]
 800ae18:	4b09      	ldr	r3, [pc, #36]	; (800ae40 <HAL_ADC_ConfigChannel+0x6e0>)
 800ae1a:	4013      	ands	r3, r2
 800ae1c:	2b00      	cmp	r3, #0
 800ae1e:	f000 80be 	beq.w	800af9e <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800ae22:	687b      	ldr	r3, [r7, #4]
 800ae24:	681b      	ldr	r3, [r3, #0]
 800ae26:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800ae2a:	d004      	beq.n	800ae36 <HAL_ADC_ConfigChannel+0x6d6>
 800ae2c:	687b      	ldr	r3, [r7, #4]
 800ae2e:	681b      	ldr	r3, [r3, #0]
 800ae30:	4a04      	ldr	r2, [pc, #16]	; (800ae44 <HAL_ADC_ConfigChannel+0x6e4>)
 800ae32:	4293      	cmp	r3, r2
 800ae34:	d10a      	bne.n	800ae4c <HAL_ADC_ConfigChannel+0x6ec>
 800ae36:	4b04      	ldr	r3, [pc, #16]	; (800ae48 <HAL_ADC_ConfigChannel+0x6e8>)
 800ae38:	e009      	b.n	800ae4e <HAL_ADC_ConfigChannel+0x6ee>
 800ae3a:	bf00      	nop
 800ae3c:	407f0000 	.word	0x407f0000
 800ae40:	80080000 	.word	0x80080000
 800ae44:	50000100 	.word	0x50000100
 800ae48:	50000300 	.word	0x50000300
 800ae4c:	4b59      	ldr	r3, [pc, #356]	; (800afb4 <HAL_ADC_ConfigChannel+0x854>)
 800ae4e:	4618      	mov	r0, r3
 800ae50:	f7fe ff26 	bl	8009ca0 <LL_ADC_GetCommonPathInternalCh>
 800ae54:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 800ae58:	683b      	ldr	r3, [r7, #0]
 800ae5a:	681b      	ldr	r3, [r3, #0]
 800ae5c:	4a56      	ldr	r2, [pc, #344]	; (800afb8 <HAL_ADC_ConfigChannel+0x858>)
 800ae5e:	4293      	cmp	r3, r2
 800ae60:	d004      	beq.n	800ae6c <HAL_ADC_ConfigChannel+0x70c>
 800ae62:	683b      	ldr	r3, [r7, #0]
 800ae64:	681b      	ldr	r3, [r3, #0]
 800ae66:	4a55      	ldr	r2, [pc, #340]	; (800afbc <HAL_ADC_ConfigChannel+0x85c>)
 800ae68:	4293      	cmp	r3, r2
 800ae6a:	d13a      	bne.n	800aee2 <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800ae6c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800ae70:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800ae74:	2b00      	cmp	r3, #0
 800ae76:	d134      	bne.n	800aee2 <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800ae78:	687b      	ldr	r3, [r7, #4]
 800ae7a:	681b      	ldr	r3, [r3, #0]
 800ae7c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800ae80:	d005      	beq.n	800ae8e <HAL_ADC_ConfigChannel+0x72e>
 800ae82:	687b      	ldr	r3, [r7, #4]
 800ae84:	681b      	ldr	r3, [r3, #0]
 800ae86:	4a4e      	ldr	r2, [pc, #312]	; (800afc0 <HAL_ADC_ConfigChannel+0x860>)
 800ae88:	4293      	cmp	r3, r2
 800ae8a:	f040 8085 	bne.w	800af98 <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800ae8e:	687b      	ldr	r3, [r7, #4]
 800ae90:	681b      	ldr	r3, [r3, #0]
 800ae92:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800ae96:	d004      	beq.n	800aea2 <HAL_ADC_ConfigChannel+0x742>
 800ae98:	687b      	ldr	r3, [r7, #4]
 800ae9a:	681b      	ldr	r3, [r3, #0]
 800ae9c:	4a49      	ldr	r2, [pc, #292]	; (800afc4 <HAL_ADC_ConfigChannel+0x864>)
 800ae9e:	4293      	cmp	r3, r2
 800aea0:	d101      	bne.n	800aea6 <HAL_ADC_ConfigChannel+0x746>
 800aea2:	4a49      	ldr	r2, [pc, #292]	; (800afc8 <HAL_ADC_ConfigChannel+0x868>)
 800aea4:	e000      	b.n	800aea8 <HAL_ADC_ConfigChannel+0x748>
 800aea6:	4a43      	ldr	r2, [pc, #268]	; (800afb4 <HAL_ADC_ConfigChannel+0x854>)
 800aea8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800aeac:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800aeb0:	4619      	mov	r1, r3
 800aeb2:	4610      	mov	r0, r2
 800aeb4:	f7fe fee1 	bl	8009c7a <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800aeb8:	4b44      	ldr	r3, [pc, #272]	; (800afcc <HAL_ADC_ConfigChannel+0x86c>)
 800aeba:	681b      	ldr	r3, [r3, #0]
 800aebc:	099b      	lsrs	r3, r3, #6
 800aebe:	4a44      	ldr	r2, [pc, #272]	; (800afd0 <HAL_ADC_ConfigChannel+0x870>)
 800aec0:	fba2 2303 	umull	r2, r3, r2, r3
 800aec4:	099b      	lsrs	r3, r3, #6
 800aec6:	1c5a      	adds	r2, r3, #1
 800aec8:	4613      	mov	r3, r2
 800aeca:	005b      	lsls	r3, r3, #1
 800aecc:	4413      	add	r3, r2
 800aece:	009b      	lsls	r3, r3, #2
 800aed0:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800aed2:	e002      	b.n	800aeda <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 800aed4:	68fb      	ldr	r3, [r7, #12]
 800aed6:	3b01      	subs	r3, #1
 800aed8:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800aeda:	68fb      	ldr	r3, [r7, #12]
 800aedc:	2b00      	cmp	r3, #0
 800aede:	d1f9      	bne.n	800aed4 <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800aee0:	e05a      	b.n	800af98 <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800aee2:	683b      	ldr	r3, [r7, #0]
 800aee4:	681b      	ldr	r3, [r3, #0]
 800aee6:	4a3b      	ldr	r2, [pc, #236]	; (800afd4 <HAL_ADC_ConfigChannel+0x874>)
 800aee8:	4293      	cmp	r3, r2
 800aeea:	d125      	bne.n	800af38 <HAL_ADC_ConfigChannel+0x7d8>
 800aeec:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800aef0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800aef4:	2b00      	cmp	r3, #0
 800aef6:	d11f      	bne.n	800af38 <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800aef8:	687b      	ldr	r3, [r7, #4]
 800aefa:	681b      	ldr	r3, [r3, #0]
 800aefc:	4a31      	ldr	r2, [pc, #196]	; (800afc4 <HAL_ADC_ConfigChannel+0x864>)
 800aefe:	4293      	cmp	r3, r2
 800af00:	d104      	bne.n	800af0c <HAL_ADC_ConfigChannel+0x7ac>
 800af02:	687b      	ldr	r3, [r7, #4]
 800af04:	681b      	ldr	r3, [r3, #0]
 800af06:	4a34      	ldr	r2, [pc, #208]	; (800afd8 <HAL_ADC_ConfigChannel+0x878>)
 800af08:	4293      	cmp	r3, r2
 800af0a:	d047      	beq.n	800af9c <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800af0c:	687b      	ldr	r3, [r7, #4]
 800af0e:	681b      	ldr	r3, [r3, #0]
 800af10:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800af14:	d004      	beq.n	800af20 <HAL_ADC_ConfigChannel+0x7c0>
 800af16:	687b      	ldr	r3, [r7, #4]
 800af18:	681b      	ldr	r3, [r3, #0]
 800af1a:	4a2a      	ldr	r2, [pc, #168]	; (800afc4 <HAL_ADC_ConfigChannel+0x864>)
 800af1c:	4293      	cmp	r3, r2
 800af1e:	d101      	bne.n	800af24 <HAL_ADC_ConfigChannel+0x7c4>
 800af20:	4a29      	ldr	r2, [pc, #164]	; (800afc8 <HAL_ADC_ConfigChannel+0x868>)
 800af22:	e000      	b.n	800af26 <HAL_ADC_ConfigChannel+0x7c6>
 800af24:	4a23      	ldr	r2, [pc, #140]	; (800afb4 <HAL_ADC_ConfigChannel+0x854>)
 800af26:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800af2a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800af2e:	4619      	mov	r1, r3
 800af30:	4610      	mov	r0, r2
 800af32:	f7fe fea2 	bl	8009c7a <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800af36:	e031      	b.n	800af9c <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 800af38:	683b      	ldr	r3, [r7, #0]
 800af3a:	681b      	ldr	r3, [r3, #0]
 800af3c:	4a27      	ldr	r2, [pc, #156]	; (800afdc <HAL_ADC_ConfigChannel+0x87c>)
 800af3e:	4293      	cmp	r3, r2
 800af40:	d12d      	bne.n	800af9e <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800af42:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800af46:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800af4a:	2b00      	cmp	r3, #0
 800af4c:	d127      	bne.n	800af9e <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 800af4e:	687b      	ldr	r3, [r7, #4]
 800af50:	681b      	ldr	r3, [r3, #0]
 800af52:	4a1c      	ldr	r2, [pc, #112]	; (800afc4 <HAL_ADC_ConfigChannel+0x864>)
 800af54:	4293      	cmp	r3, r2
 800af56:	d022      	beq.n	800af9e <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800af58:	687b      	ldr	r3, [r7, #4]
 800af5a:	681b      	ldr	r3, [r3, #0]
 800af5c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800af60:	d004      	beq.n	800af6c <HAL_ADC_ConfigChannel+0x80c>
 800af62:	687b      	ldr	r3, [r7, #4]
 800af64:	681b      	ldr	r3, [r3, #0]
 800af66:	4a17      	ldr	r2, [pc, #92]	; (800afc4 <HAL_ADC_ConfigChannel+0x864>)
 800af68:	4293      	cmp	r3, r2
 800af6a:	d101      	bne.n	800af70 <HAL_ADC_ConfigChannel+0x810>
 800af6c:	4a16      	ldr	r2, [pc, #88]	; (800afc8 <HAL_ADC_ConfigChannel+0x868>)
 800af6e:	e000      	b.n	800af72 <HAL_ADC_ConfigChannel+0x812>
 800af70:	4a10      	ldr	r2, [pc, #64]	; (800afb4 <HAL_ADC_ConfigChannel+0x854>)
 800af72:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800af76:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800af7a:	4619      	mov	r1, r3
 800af7c:	4610      	mov	r0, r2
 800af7e:	f7fe fe7c 	bl	8009c7a <LL_ADC_SetCommonPathInternalCh>
 800af82:	e00c      	b.n	800af9e <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800af84:	687b      	ldr	r3, [r7, #4]
 800af86:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800af88:	f043 0220 	orr.w	r2, r3, #32
 800af8c:	687b      	ldr	r3, [r7, #4]
 800af8e:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 800af90:	2301      	movs	r3, #1
 800af92:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 800af96:	e002      	b.n	800af9e <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800af98:	bf00      	nop
 800af9a:	e000      	b.n	800af9e <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800af9c:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800af9e:	687b      	ldr	r3, [r7, #4]
 800afa0:	2200      	movs	r2, #0
 800afa2:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 800afa6:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 800afaa:	4618      	mov	r0, r3
 800afac:	37d8      	adds	r7, #216	; 0xd8
 800afae:	46bd      	mov	sp, r7
 800afb0:	bd80      	pop	{r7, pc}
 800afb2:	bf00      	nop
 800afb4:	50000700 	.word	0x50000700
 800afb8:	c3210000 	.word	0xc3210000
 800afbc:	90c00010 	.word	0x90c00010
 800afc0:	50000600 	.word	0x50000600
 800afc4:	50000100 	.word	0x50000100
 800afc8:	50000300 	.word	0x50000300
 800afcc:	2000037c 	.word	0x2000037c
 800afd0:	053e2d63 	.word	0x053e2d63
 800afd4:	c7520000 	.word	0xc7520000
 800afd8:	50000500 	.word	0x50000500
 800afdc:	cb840000 	.word	0xcb840000

0800afe0 <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 800afe0:	b580      	push	{r7, lr}
 800afe2:	b088      	sub	sp, #32
 800afe4:	af00      	add	r7, sp, #0
 800afe6:	6078      	str	r0, [r7, #4]
 800afe8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 800afea:	2300      	movs	r3, #0
 800afec:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 800afee:	683b      	ldr	r3, [r7, #0]
 800aff0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800aff2:	687b      	ldr	r3, [r7, #4]
 800aff4:	681b      	ldr	r3, [r3, #0]
 800aff6:	4618      	mov	r0, r3
 800aff8:	f7ff f862 	bl	800a0c0 <LL_ADC_REG_IsConversionOngoing>
 800affc:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800affe:	687b      	ldr	r3, [r7, #4]
 800b000:	681b      	ldr	r3, [r3, #0]
 800b002:	4618      	mov	r0, r3
 800b004:	f7ff f883 	bl	800a10e <LL_ADC_INJ_IsConversionOngoing>
 800b008:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 800b00a:	693b      	ldr	r3, [r7, #16]
 800b00c:	2b00      	cmp	r3, #0
 800b00e:	d103      	bne.n	800b018 <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 800b010:	68fb      	ldr	r3, [r7, #12]
 800b012:	2b00      	cmp	r3, #0
 800b014:	f000 8098 	beq.w	800b148 <ADC_ConversionStop+0x168>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 800b018:	687b      	ldr	r3, [r7, #4]
 800b01a:	681b      	ldr	r3, [r3, #0]
 800b01c:	68db      	ldr	r3, [r3, #12]
 800b01e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b022:	2b00      	cmp	r3, #0
 800b024:	d02a      	beq.n	800b07c <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 800b026:	687b      	ldr	r3, [r7, #4]
 800b028:	7f5b      	ldrb	r3, [r3, #29]
 800b02a:	2b01      	cmp	r3, #1
 800b02c:	d126      	bne.n	800b07c <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 800b02e:	687b      	ldr	r3, [r7, #4]
 800b030:	7f1b      	ldrb	r3, [r3, #28]
 800b032:	2b01      	cmp	r3, #1
 800b034:	d122      	bne.n	800b07c <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 800b036:	2301      	movs	r3, #1
 800b038:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 800b03a:	e014      	b.n	800b066 <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 800b03c:	69fb      	ldr	r3, [r7, #28]
 800b03e:	4a45      	ldr	r2, [pc, #276]	; (800b154 <ADC_ConversionStop+0x174>)
 800b040:	4293      	cmp	r3, r2
 800b042:	d90d      	bls.n	800b060 <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800b044:	687b      	ldr	r3, [r7, #4]
 800b046:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b048:	f043 0210 	orr.w	r2, r3, #16
 800b04c:	687b      	ldr	r3, [r7, #4]
 800b04e:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800b050:	687b      	ldr	r3, [r7, #4]
 800b052:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b054:	f043 0201 	orr.w	r2, r3, #1
 800b058:	687b      	ldr	r3, [r7, #4]
 800b05a:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 800b05c:	2301      	movs	r3, #1
 800b05e:	e074      	b.n	800b14a <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
 800b060:	69fb      	ldr	r3, [r7, #28]
 800b062:	3301      	adds	r3, #1
 800b064:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 800b066:	687b      	ldr	r3, [r7, #4]
 800b068:	681b      	ldr	r3, [r3, #0]
 800b06a:	681b      	ldr	r3, [r3, #0]
 800b06c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b070:	2b40      	cmp	r3, #64	; 0x40
 800b072:	d1e3      	bne.n	800b03c <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 800b074:	687b      	ldr	r3, [r7, #4]
 800b076:	681b      	ldr	r3, [r3, #0]
 800b078:	2240      	movs	r2, #64	; 0x40
 800b07a:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 800b07c:	69bb      	ldr	r3, [r7, #24]
 800b07e:	2b02      	cmp	r3, #2
 800b080:	d014      	beq.n	800b0ac <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 800b082:	687b      	ldr	r3, [r7, #4]
 800b084:	681b      	ldr	r3, [r3, #0]
 800b086:	4618      	mov	r0, r3
 800b088:	f7ff f81a 	bl	800a0c0 <LL_ADC_REG_IsConversionOngoing>
 800b08c:	4603      	mov	r3, r0
 800b08e:	2b00      	cmp	r3, #0
 800b090:	d00c      	beq.n	800b0ac <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 800b092:	687b      	ldr	r3, [r7, #4]
 800b094:	681b      	ldr	r3, [r3, #0]
 800b096:	4618      	mov	r0, r3
 800b098:	f7fe ffd7 	bl	800a04a <LL_ADC_IsDisableOngoing>
 800b09c:	4603      	mov	r3, r0
 800b09e:	2b00      	cmp	r3, #0
 800b0a0:	d104      	bne.n	800b0ac <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 800b0a2:	687b      	ldr	r3, [r7, #4]
 800b0a4:	681b      	ldr	r3, [r3, #0]
 800b0a6:	4618      	mov	r0, r3
 800b0a8:	f7fe fff6 	bl	800a098 <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 800b0ac:	69bb      	ldr	r3, [r7, #24]
 800b0ae:	2b01      	cmp	r3, #1
 800b0b0:	d014      	beq.n	800b0dc <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 800b0b2:	687b      	ldr	r3, [r7, #4]
 800b0b4:	681b      	ldr	r3, [r3, #0]
 800b0b6:	4618      	mov	r0, r3
 800b0b8:	f7ff f829 	bl	800a10e <LL_ADC_INJ_IsConversionOngoing>
 800b0bc:	4603      	mov	r3, r0
 800b0be:	2b00      	cmp	r3, #0
 800b0c0:	d00c      	beq.n	800b0dc <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 800b0c2:	687b      	ldr	r3, [r7, #4]
 800b0c4:	681b      	ldr	r3, [r3, #0]
 800b0c6:	4618      	mov	r0, r3
 800b0c8:	f7fe ffbf 	bl	800a04a <LL_ADC_IsDisableOngoing>
 800b0cc:	4603      	mov	r3, r0
 800b0ce:	2b00      	cmp	r3, #0
 800b0d0:	d104      	bne.n	800b0dc <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 800b0d2:	687b      	ldr	r3, [r7, #4]
 800b0d4:	681b      	ldr	r3, [r3, #0]
 800b0d6:	4618      	mov	r0, r3
 800b0d8:	f7ff f805 	bl	800a0e6 <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 800b0dc:	69bb      	ldr	r3, [r7, #24]
 800b0de:	2b02      	cmp	r3, #2
 800b0e0:	d005      	beq.n	800b0ee <ADC_ConversionStop+0x10e>
 800b0e2:	69bb      	ldr	r3, [r7, #24]
 800b0e4:	2b03      	cmp	r3, #3
 800b0e6:	d105      	bne.n	800b0f4 <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 800b0e8:	230c      	movs	r3, #12
 800b0ea:	617b      	str	r3, [r7, #20]
        break;
 800b0ec:	e005      	b.n	800b0fa <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 800b0ee:	2308      	movs	r3, #8
 800b0f0:	617b      	str	r3, [r7, #20]
        break;
 800b0f2:	e002      	b.n	800b0fa <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 800b0f4:	2304      	movs	r3, #4
 800b0f6:	617b      	str	r3, [r7, #20]
        break;
 800b0f8:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 800b0fa:	f7fe fd7d 	bl	8009bf8 <HAL_GetTick>
 800b0fe:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 800b100:	e01b      	b.n	800b13a <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 800b102:	f7fe fd79 	bl	8009bf8 <HAL_GetTick>
 800b106:	4602      	mov	r2, r0
 800b108:	68bb      	ldr	r3, [r7, #8]
 800b10a:	1ad3      	subs	r3, r2, r3
 800b10c:	2b05      	cmp	r3, #5
 800b10e:	d914      	bls.n	800b13a <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 800b110:	687b      	ldr	r3, [r7, #4]
 800b112:	681b      	ldr	r3, [r3, #0]
 800b114:	689a      	ldr	r2, [r3, #8]
 800b116:	697b      	ldr	r3, [r7, #20]
 800b118:	4013      	ands	r3, r2
 800b11a:	2b00      	cmp	r3, #0
 800b11c:	d00d      	beq.n	800b13a <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800b11e:	687b      	ldr	r3, [r7, #4]
 800b120:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b122:	f043 0210 	orr.w	r2, r3, #16
 800b126:	687b      	ldr	r3, [r7, #4]
 800b128:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800b12a:	687b      	ldr	r3, [r7, #4]
 800b12c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b12e:	f043 0201 	orr.w	r2, r3, #1
 800b132:	687b      	ldr	r3, [r7, #4]
 800b134:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 800b136:	2301      	movs	r3, #1
 800b138:	e007      	b.n	800b14a <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 800b13a:	687b      	ldr	r3, [r7, #4]
 800b13c:	681b      	ldr	r3, [r3, #0]
 800b13e:	689a      	ldr	r2, [r3, #8]
 800b140:	697b      	ldr	r3, [r7, #20]
 800b142:	4013      	ands	r3, r2
 800b144:	2b00      	cmp	r3, #0
 800b146:	d1dc      	bne.n	800b102 <ADC_ConversionStop+0x122>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 800b148:	2300      	movs	r3, #0
}
 800b14a:	4618      	mov	r0, r3
 800b14c:	3720      	adds	r7, #32
 800b14e:	46bd      	mov	sp, r7
 800b150:	bd80      	pop	{r7, pc}
 800b152:	bf00      	nop
 800b154:	a33fffff 	.word	0xa33fffff

0800b158 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 800b158:	b580      	push	{r7, lr}
 800b15a:	b084      	sub	sp, #16
 800b15c:	af00      	add	r7, sp, #0
 800b15e:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800b160:	687b      	ldr	r3, [r7, #4]
 800b162:	681b      	ldr	r3, [r3, #0]
 800b164:	4618      	mov	r0, r3
 800b166:	f7fe ff5d 	bl	800a024 <LL_ADC_IsEnabled>
 800b16a:	4603      	mov	r3, r0
 800b16c:	2b00      	cmp	r3, #0
 800b16e:	d14d      	bne.n	800b20c <ADC_Enable+0xb4>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 800b170:	687b      	ldr	r3, [r7, #4]
 800b172:	681b      	ldr	r3, [r3, #0]
 800b174:	689a      	ldr	r2, [r3, #8]
 800b176:	4b28      	ldr	r3, [pc, #160]	; (800b218 <ADC_Enable+0xc0>)
 800b178:	4013      	ands	r3, r2
 800b17a:	2b00      	cmp	r3, #0
 800b17c:	d00d      	beq.n	800b19a <ADC_Enable+0x42>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800b17e:	687b      	ldr	r3, [r7, #4]
 800b180:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b182:	f043 0210 	orr.w	r2, r3, #16
 800b186:	687b      	ldr	r3, [r7, #4]
 800b188:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800b18a:	687b      	ldr	r3, [r7, #4]
 800b18c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b18e:	f043 0201 	orr.w	r2, r3, #1
 800b192:	687b      	ldr	r3, [r7, #4]
 800b194:	661a      	str	r2, [r3, #96]	; 0x60

      return HAL_ERROR;
 800b196:	2301      	movs	r3, #1
 800b198:	e039      	b.n	800b20e <ADC_Enable+0xb6>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800b19a:	687b      	ldr	r3, [r7, #4]
 800b19c:	681b      	ldr	r3, [r3, #0]
 800b19e:	4618      	mov	r0, r3
 800b1a0:	f7fe ff18 	bl	8009fd4 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 800b1a4:	f7fe fd28 	bl	8009bf8 <HAL_GetTick>
 800b1a8:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800b1aa:	e028      	b.n	800b1fe <ADC_Enable+0xa6>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800b1ac:	687b      	ldr	r3, [r7, #4]
 800b1ae:	681b      	ldr	r3, [r3, #0]
 800b1b0:	4618      	mov	r0, r3
 800b1b2:	f7fe ff37 	bl	800a024 <LL_ADC_IsEnabled>
 800b1b6:	4603      	mov	r3, r0
 800b1b8:	2b00      	cmp	r3, #0
 800b1ba:	d104      	bne.n	800b1c6 <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 800b1bc:	687b      	ldr	r3, [r7, #4]
 800b1be:	681b      	ldr	r3, [r3, #0]
 800b1c0:	4618      	mov	r0, r3
 800b1c2:	f7fe ff07 	bl	8009fd4 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800b1c6:	f7fe fd17 	bl	8009bf8 <HAL_GetTick>
 800b1ca:	4602      	mov	r2, r0
 800b1cc:	68fb      	ldr	r3, [r7, #12]
 800b1ce:	1ad3      	subs	r3, r2, r3
 800b1d0:	2b02      	cmp	r3, #2
 800b1d2:	d914      	bls.n	800b1fe <ADC_Enable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800b1d4:	687b      	ldr	r3, [r7, #4]
 800b1d6:	681b      	ldr	r3, [r3, #0]
 800b1d8:	681b      	ldr	r3, [r3, #0]
 800b1da:	f003 0301 	and.w	r3, r3, #1
 800b1de:	2b01      	cmp	r3, #1
 800b1e0:	d00d      	beq.n	800b1fe <ADC_Enable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800b1e2:	687b      	ldr	r3, [r7, #4]
 800b1e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b1e6:	f043 0210 	orr.w	r2, r3, #16
 800b1ea:	687b      	ldr	r3, [r7, #4]
 800b1ec:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800b1ee:	687b      	ldr	r3, [r7, #4]
 800b1f0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b1f2:	f043 0201 	orr.w	r2, r3, #1
 800b1f6:	687b      	ldr	r3, [r7, #4]
 800b1f8:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 800b1fa:	2301      	movs	r3, #1
 800b1fc:	e007      	b.n	800b20e <ADC_Enable+0xb6>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800b1fe:	687b      	ldr	r3, [r7, #4]
 800b200:	681b      	ldr	r3, [r3, #0]
 800b202:	681b      	ldr	r3, [r3, #0]
 800b204:	f003 0301 	and.w	r3, r3, #1
 800b208:	2b01      	cmp	r3, #1
 800b20a:	d1cf      	bne.n	800b1ac <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800b20c:	2300      	movs	r3, #0
}
 800b20e:	4618      	mov	r0, r3
 800b210:	3710      	adds	r7, #16
 800b212:	46bd      	mov	sp, r7
 800b214:	bd80      	pop	{r7, pc}
 800b216:	bf00      	nop
 800b218:	8000003f 	.word	0x8000003f

0800b21c <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 800b21c:	b580      	push	{r7, lr}
 800b21e:	b084      	sub	sp, #16
 800b220:	af00      	add	r7, sp, #0
 800b222:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 800b224:	687b      	ldr	r3, [r7, #4]
 800b226:	681b      	ldr	r3, [r3, #0]
 800b228:	4618      	mov	r0, r3
 800b22a:	f7fe ff0e 	bl	800a04a <LL_ADC_IsDisableOngoing>
 800b22e:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 800b230:	687b      	ldr	r3, [r7, #4]
 800b232:	681b      	ldr	r3, [r3, #0]
 800b234:	4618      	mov	r0, r3
 800b236:	f7fe fef5 	bl	800a024 <LL_ADC_IsEnabled>
 800b23a:	4603      	mov	r3, r0
 800b23c:	2b00      	cmp	r3, #0
 800b23e:	d047      	beq.n	800b2d0 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 800b240:	68fb      	ldr	r3, [r7, #12]
 800b242:	2b00      	cmp	r3, #0
 800b244:	d144      	bne.n	800b2d0 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 800b246:	687b      	ldr	r3, [r7, #4]
 800b248:	681b      	ldr	r3, [r3, #0]
 800b24a:	689b      	ldr	r3, [r3, #8]
 800b24c:	f003 030d 	and.w	r3, r3, #13
 800b250:	2b01      	cmp	r3, #1
 800b252:	d10c      	bne.n	800b26e <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 800b254:	687b      	ldr	r3, [r7, #4]
 800b256:	681b      	ldr	r3, [r3, #0]
 800b258:	4618      	mov	r0, r3
 800b25a:	f7fe fecf 	bl	8009ffc <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 800b25e:	687b      	ldr	r3, [r7, #4]
 800b260:	681b      	ldr	r3, [r3, #0]
 800b262:	2203      	movs	r2, #3
 800b264:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 800b266:	f7fe fcc7 	bl	8009bf8 <HAL_GetTick>
 800b26a:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800b26c:	e029      	b.n	800b2c2 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800b26e:	687b      	ldr	r3, [r7, #4]
 800b270:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b272:	f043 0210 	orr.w	r2, r3, #16
 800b276:	687b      	ldr	r3, [r7, #4]
 800b278:	65da      	str	r2, [r3, #92]	; 0x5c
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800b27a:	687b      	ldr	r3, [r7, #4]
 800b27c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b27e:	f043 0201 	orr.w	r2, r3, #1
 800b282:	687b      	ldr	r3, [r7, #4]
 800b284:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_ERROR;
 800b286:	2301      	movs	r3, #1
 800b288:	e023      	b.n	800b2d2 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800b28a:	f7fe fcb5 	bl	8009bf8 <HAL_GetTick>
 800b28e:	4602      	mov	r2, r0
 800b290:	68bb      	ldr	r3, [r7, #8]
 800b292:	1ad3      	subs	r3, r2, r3
 800b294:	2b02      	cmp	r3, #2
 800b296:	d914      	bls.n	800b2c2 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800b298:	687b      	ldr	r3, [r7, #4]
 800b29a:	681b      	ldr	r3, [r3, #0]
 800b29c:	689b      	ldr	r3, [r3, #8]
 800b29e:	f003 0301 	and.w	r3, r3, #1
 800b2a2:	2b00      	cmp	r3, #0
 800b2a4:	d00d      	beq.n	800b2c2 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800b2a6:	687b      	ldr	r3, [r7, #4]
 800b2a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b2aa:	f043 0210 	orr.w	r2, r3, #16
 800b2ae:	687b      	ldr	r3, [r7, #4]
 800b2b0:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800b2b2:	687b      	ldr	r3, [r7, #4]
 800b2b4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b2b6:	f043 0201 	orr.w	r2, r3, #1
 800b2ba:	687b      	ldr	r3, [r7, #4]
 800b2bc:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 800b2be:	2301      	movs	r3, #1
 800b2c0:	e007      	b.n	800b2d2 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800b2c2:	687b      	ldr	r3, [r7, #4]
 800b2c4:	681b      	ldr	r3, [r3, #0]
 800b2c6:	689b      	ldr	r3, [r3, #8]
 800b2c8:	f003 0301 	and.w	r3, r3, #1
 800b2cc:	2b00      	cmp	r3, #0
 800b2ce:	d1dc      	bne.n	800b28a <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800b2d0:	2300      	movs	r3, #0
}
 800b2d2:	4618      	mov	r0, r3
 800b2d4:	3710      	adds	r7, #16
 800b2d6:	46bd      	mov	sp, r7
 800b2d8:	bd80      	pop	{r7, pc}

0800b2da <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 800b2da:	b580      	push	{r7, lr}
 800b2dc:	b084      	sub	sp, #16
 800b2de:	af00      	add	r7, sp, #0
 800b2e0:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b2e2:	687b      	ldr	r3, [r7, #4]
 800b2e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b2e6:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 800b2e8:	68fb      	ldr	r3, [r7, #12]
 800b2ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b2ec:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800b2f0:	2b00      	cmp	r3, #0
 800b2f2:	d14b      	bne.n	800b38c <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800b2f4:	68fb      	ldr	r3, [r7, #12]
 800b2f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b2f8:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800b2fc:	68fb      	ldr	r3, [r7, #12]
 800b2fe:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 800b300:	68fb      	ldr	r3, [r7, #12]
 800b302:	681b      	ldr	r3, [r3, #0]
 800b304:	681b      	ldr	r3, [r3, #0]
 800b306:	f003 0308 	and.w	r3, r3, #8
 800b30a:	2b00      	cmp	r3, #0
 800b30c:	d021      	beq.n	800b352 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 800b30e:	68fb      	ldr	r3, [r7, #12]
 800b310:	681b      	ldr	r3, [r3, #0]
 800b312:	4618      	mov	r0, r3
 800b314:	f7fe fd70 	bl	8009df8 <LL_ADC_REG_IsTriggerSourceSWStart>
 800b318:	4603      	mov	r3, r0
 800b31a:	2b00      	cmp	r3, #0
 800b31c:	d032      	beq.n	800b384 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 800b31e:	68fb      	ldr	r3, [r7, #12]
 800b320:	681b      	ldr	r3, [r3, #0]
 800b322:	68db      	ldr	r3, [r3, #12]
 800b324:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800b328:	2b00      	cmp	r3, #0
 800b32a:	d12b      	bne.n	800b384 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800b32c:	68fb      	ldr	r3, [r7, #12]
 800b32e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b330:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800b334:	68fb      	ldr	r3, [r7, #12]
 800b336:	65da      	str	r2, [r3, #92]	; 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800b338:	68fb      	ldr	r3, [r7, #12]
 800b33a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b33c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800b340:	2b00      	cmp	r3, #0
 800b342:	d11f      	bne.n	800b384 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800b344:	68fb      	ldr	r3, [r7, #12]
 800b346:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b348:	f043 0201 	orr.w	r2, r3, #1
 800b34c:	68fb      	ldr	r3, [r7, #12]
 800b34e:	65da      	str	r2, [r3, #92]	; 0x5c
 800b350:	e018      	b.n	800b384 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 800b352:	68fb      	ldr	r3, [r7, #12]
 800b354:	681b      	ldr	r3, [r3, #0]
 800b356:	68db      	ldr	r3, [r3, #12]
 800b358:	f003 0302 	and.w	r3, r3, #2
 800b35c:	2b00      	cmp	r3, #0
 800b35e:	d111      	bne.n	800b384 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800b360:	68fb      	ldr	r3, [r7, #12]
 800b362:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b364:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800b368:	68fb      	ldr	r3, [r7, #12]
 800b36a:	65da      	str	r2, [r3, #92]	; 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800b36c:	68fb      	ldr	r3, [r7, #12]
 800b36e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b370:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800b374:	2b00      	cmp	r3, #0
 800b376:	d105      	bne.n	800b384 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800b378:	68fb      	ldr	r3, [r7, #12]
 800b37a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b37c:	f043 0201 	orr.w	r2, r3, #1
 800b380:	68fb      	ldr	r3, [r7, #12]
 800b382:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800b384:	68f8      	ldr	r0, [r7, #12]
 800b386:	f7ff f9cc 	bl	800a722 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800b38a:	e00e      	b.n	800b3aa <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 800b38c:	68fb      	ldr	r3, [r7, #12]
 800b38e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b390:	f003 0310 	and.w	r3, r3, #16
 800b394:	2b00      	cmp	r3, #0
 800b396:	d003      	beq.n	800b3a0 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 800b398:	68f8      	ldr	r0, [r7, #12]
 800b39a:	f7ff f9d6 	bl	800a74a <HAL_ADC_ErrorCallback>
}
 800b39e:	e004      	b.n	800b3aa <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 800b3a0:	68fb      	ldr	r3, [r7, #12]
 800b3a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b3a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b3a6:	6878      	ldr	r0, [r7, #4]
 800b3a8:	4798      	blx	r3
}
 800b3aa:	bf00      	nop
 800b3ac:	3710      	adds	r7, #16
 800b3ae:	46bd      	mov	sp, r7
 800b3b0:	bd80      	pop	{r7, pc}

0800b3b2 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 800b3b2:	b580      	push	{r7, lr}
 800b3b4:	b084      	sub	sp, #16
 800b3b6:	af00      	add	r7, sp, #0
 800b3b8:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b3ba:	687b      	ldr	r3, [r7, #4]
 800b3bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b3be:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800b3c0:	68f8      	ldr	r0, [r7, #12]
 800b3c2:	f7ff f9b8 	bl	800a736 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800b3c6:	bf00      	nop
 800b3c8:	3710      	adds	r7, #16
 800b3ca:	46bd      	mov	sp, r7
 800b3cc:	bd80      	pop	{r7, pc}

0800b3ce <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 800b3ce:	b580      	push	{r7, lr}
 800b3d0:	b084      	sub	sp, #16
 800b3d2:	af00      	add	r7, sp, #0
 800b3d4:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b3d6:	687b      	ldr	r3, [r7, #4]
 800b3d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b3da:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800b3dc:	68fb      	ldr	r3, [r7, #12]
 800b3de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b3e0:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800b3e4:	68fb      	ldr	r3, [r7, #12]
 800b3e6:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 800b3e8:	68fb      	ldr	r3, [r7, #12]
 800b3ea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b3ec:	f043 0204 	orr.w	r2, r3, #4
 800b3f0:	68fb      	ldr	r3, [r7, #12]
 800b3f2:	661a      	str	r2, [r3, #96]	; 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800b3f4:	68f8      	ldr	r0, [r7, #12]
 800b3f6:	f7ff f9a8 	bl	800a74a <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800b3fa:	bf00      	nop
 800b3fc:	3710      	adds	r7, #16
 800b3fe:	46bd      	mov	sp, r7
 800b400:	bd80      	pop	{r7, pc}

0800b402 <LL_ADC_IsEnabled>:
{
 800b402:	b480      	push	{r7}
 800b404:	b083      	sub	sp, #12
 800b406:	af00      	add	r7, sp, #0
 800b408:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800b40a:	687b      	ldr	r3, [r7, #4]
 800b40c:	689b      	ldr	r3, [r3, #8]
 800b40e:	f003 0301 	and.w	r3, r3, #1
 800b412:	2b01      	cmp	r3, #1
 800b414:	d101      	bne.n	800b41a <LL_ADC_IsEnabled+0x18>
 800b416:	2301      	movs	r3, #1
 800b418:	e000      	b.n	800b41c <LL_ADC_IsEnabled+0x1a>
 800b41a:	2300      	movs	r3, #0
}
 800b41c:	4618      	mov	r0, r3
 800b41e:	370c      	adds	r7, #12
 800b420:	46bd      	mov	sp, r7
 800b422:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b426:	4770      	bx	lr

0800b428 <LL_ADC_StartCalibration>:
{
 800b428:	b480      	push	{r7}
 800b42a:	b083      	sub	sp, #12
 800b42c:	af00      	add	r7, sp, #0
 800b42e:	6078      	str	r0, [r7, #4]
 800b430:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 800b432:	687b      	ldr	r3, [r7, #4]
 800b434:	689b      	ldr	r3, [r3, #8]
 800b436:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 800b43a:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800b43e:	683a      	ldr	r2, [r7, #0]
 800b440:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 800b444:	4313      	orrs	r3, r2
 800b446:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800b44a:	687b      	ldr	r3, [r7, #4]
 800b44c:	609a      	str	r2, [r3, #8]
}
 800b44e:	bf00      	nop
 800b450:	370c      	adds	r7, #12
 800b452:	46bd      	mov	sp, r7
 800b454:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b458:	4770      	bx	lr

0800b45a <LL_ADC_IsCalibrationOnGoing>:
{
 800b45a:	b480      	push	{r7}
 800b45c:	b083      	sub	sp, #12
 800b45e:	af00      	add	r7, sp, #0
 800b460:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 800b462:	687b      	ldr	r3, [r7, #4]
 800b464:	689b      	ldr	r3, [r3, #8]
 800b466:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800b46a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800b46e:	d101      	bne.n	800b474 <LL_ADC_IsCalibrationOnGoing+0x1a>
 800b470:	2301      	movs	r3, #1
 800b472:	e000      	b.n	800b476 <LL_ADC_IsCalibrationOnGoing+0x1c>
 800b474:	2300      	movs	r3, #0
}
 800b476:	4618      	mov	r0, r3
 800b478:	370c      	adds	r7, #12
 800b47a:	46bd      	mov	sp, r7
 800b47c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b480:	4770      	bx	lr

0800b482 <LL_ADC_REG_IsConversionOngoing>:
{
 800b482:	b480      	push	{r7}
 800b484:	b083      	sub	sp, #12
 800b486:	af00      	add	r7, sp, #0
 800b488:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800b48a:	687b      	ldr	r3, [r7, #4]
 800b48c:	689b      	ldr	r3, [r3, #8]
 800b48e:	f003 0304 	and.w	r3, r3, #4
 800b492:	2b04      	cmp	r3, #4
 800b494:	d101      	bne.n	800b49a <LL_ADC_REG_IsConversionOngoing+0x18>
 800b496:	2301      	movs	r3, #1
 800b498:	e000      	b.n	800b49c <LL_ADC_REG_IsConversionOngoing+0x1a>
 800b49a:	2300      	movs	r3, #0
}
 800b49c:	4618      	mov	r0, r3
 800b49e:	370c      	adds	r7, #12
 800b4a0:	46bd      	mov	sp, r7
 800b4a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4a6:	4770      	bx	lr

0800b4a8 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 800b4a8:	b580      	push	{r7, lr}
 800b4aa:	b084      	sub	sp, #16
 800b4ac:	af00      	add	r7, sp, #0
 800b4ae:	6078      	str	r0, [r7, #4]
 800b4b0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 800b4b2:	2300      	movs	r3, #0
 800b4b4:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 800b4b6:	687b      	ldr	r3, [r7, #4]
 800b4b8:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800b4bc:	2b01      	cmp	r3, #1
 800b4be:	d101      	bne.n	800b4c4 <HAL_ADCEx_Calibration_Start+0x1c>
 800b4c0:	2302      	movs	r3, #2
 800b4c2:	e04d      	b.n	800b560 <HAL_ADCEx_Calibration_Start+0xb8>
 800b4c4:	687b      	ldr	r3, [r7, #4]
 800b4c6:	2201      	movs	r2, #1
 800b4c8:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 800b4cc:	6878      	ldr	r0, [r7, #4]
 800b4ce:	f7ff fea5 	bl	800b21c <ADC_Disable>
 800b4d2:	4603      	mov	r3, r0
 800b4d4:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 800b4d6:	7bfb      	ldrb	r3, [r7, #15]
 800b4d8:	2b00      	cmp	r3, #0
 800b4da:	d136      	bne.n	800b54a <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800b4dc:	687b      	ldr	r3, [r7, #4]
 800b4de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b4e0:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800b4e4:	f023 0302 	bic.w	r3, r3, #2
 800b4e8:	f043 0202 	orr.w	r2, r3, #2
 800b4ec:	687b      	ldr	r3, [r7, #4]
 800b4ee:	65da      	str	r2, [r3, #92]	; 0x5c
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 800b4f0:	687b      	ldr	r3, [r7, #4]
 800b4f2:	681b      	ldr	r3, [r3, #0]
 800b4f4:	6839      	ldr	r1, [r7, #0]
 800b4f6:	4618      	mov	r0, r3
 800b4f8:	f7ff ff96 	bl	800b428 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 800b4fc:	e014      	b.n	800b528 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 800b4fe:	68bb      	ldr	r3, [r7, #8]
 800b500:	3301      	adds	r3, #1
 800b502:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 800b504:	68bb      	ldr	r3, [r7, #8]
 800b506:	4a18      	ldr	r2, [pc, #96]	; (800b568 <HAL_ADCEx_Calibration_Start+0xc0>)
 800b508:	4293      	cmp	r3, r2
 800b50a:	d90d      	bls.n	800b528 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 800b50c:	687b      	ldr	r3, [r7, #4]
 800b50e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b510:	f023 0312 	bic.w	r3, r3, #18
 800b514:	f043 0210 	orr.w	r2, r3, #16
 800b518:	687b      	ldr	r3, [r7, #4]
 800b51a:	65da      	str	r2, [r3, #92]	; 0x5c
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800b51c:	687b      	ldr	r3, [r7, #4]
 800b51e:	2200      	movs	r2, #0
 800b520:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

        return HAL_ERROR;
 800b524:	2301      	movs	r3, #1
 800b526:	e01b      	b.n	800b560 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 800b528:	687b      	ldr	r3, [r7, #4]
 800b52a:	681b      	ldr	r3, [r3, #0]
 800b52c:	4618      	mov	r0, r3
 800b52e:	f7ff ff94 	bl	800b45a <LL_ADC_IsCalibrationOnGoing>
 800b532:	4603      	mov	r3, r0
 800b534:	2b00      	cmp	r3, #0
 800b536:	d1e2      	bne.n	800b4fe <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800b538:	687b      	ldr	r3, [r7, #4]
 800b53a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b53c:	f023 0303 	bic.w	r3, r3, #3
 800b540:	f043 0201 	orr.w	r2, r3, #1
 800b544:	687b      	ldr	r3, [r7, #4]
 800b546:	65da      	str	r2, [r3, #92]	; 0x5c
 800b548:	e005      	b.n	800b556 <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800b54a:	687b      	ldr	r3, [r7, #4]
 800b54c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b54e:	f043 0210 	orr.w	r2, r3, #16
 800b552:	687b      	ldr	r3, [r7, #4]
 800b554:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800b556:	687b      	ldr	r3, [r7, #4]
 800b558:	2200      	movs	r2, #0
 800b55a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 800b55e:	7bfb      	ldrb	r3, [r7, #15]
}
 800b560:	4618      	mov	r0, r3
 800b562:	3710      	adds	r7, #16
 800b564:	46bd      	mov	sp, r7
 800b566:	bd80      	pop	{r7, pc}
 800b568:	0004de01 	.word	0x0004de01

0800b56c <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 800b56c:	b590      	push	{r4, r7, lr}
 800b56e:	b0a1      	sub	sp, #132	; 0x84
 800b570:	af00      	add	r7, sp, #0
 800b572:	6078      	str	r0, [r7, #4]
 800b574:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800b576:	2300      	movs	r3, #0
 800b578:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800b57c:	687b      	ldr	r3, [r7, #4]
 800b57e:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800b582:	2b01      	cmp	r3, #1
 800b584:	d101      	bne.n	800b58a <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 800b586:	2302      	movs	r3, #2
 800b588:	e0e7      	b.n	800b75a <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
 800b58a:	687b      	ldr	r3, [r7, #4]
 800b58c:	2201      	movs	r2, #1
 800b58e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 800b592:	2300      	movs	r3, #0
 800b594:	667b      	str	r3, [r7, #100]	; 0x64
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 800b596:	2300      	movs	r3, #0
 800b598:	66bb      	str	r3, [r7, #104]	; 0x68

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 800b59a:	687b      	ldr	r3, [r7, #4]
 800b59c:	681b      	ldr	r3, [r3, #0]
 800b59e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800b5a2:	d102      	bne.n	800b5aa <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 800b5a4:	4b6f      	ldr	r3, [pc, #444]	; (800b764 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 800b5a6:	60bb      	str	r3, [r7, #8]
 800b5a8:	e009      	b.n	800b5be <HAL_ADCEx_MultiModeConfigChannel+0x52>
 800b5aa:	687b      	ldr	r3, [r7, #4]
 800b5ac:	681b      	ldr	r3, [r3, #0]
 800b5ae:	4a6e      	ldr	r2, [pc, #440]	; (800b768 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 800b5b0:	4293      	cmp	r3, r2
 800b5b2:	d102      	bne.n	800b5ba <HAL_ADCEx_MultiModeConfigChannel+0x4e>
 800b5b4:	4b6d      	ldr	r3, [pc, #436]	; (800b76c <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 800b5b6:	60bb      	str	r3, [r7, #8]
 800b5b8:	e001      	b.n	800b5be <HAL_ADCEx_MultiModeConfigChannel+0x52>
 800b5ba:	2300      	movs	r3, #0
 800b5bc:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 800b5be:	68bb      	ldr	r3, [r7, #8]
 800b5c0:	2b00      	cmp	r3, #0
 800b5c2:	d10b      	bne.n	800b5dc <HAL_ADCEx_MultiModeConfigChannel+0x70>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800b5c4:	687b      	ldr	r3, [r7, #4]
 800b5c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b5c8:	f043 0220 	orr.w	r2, r3, #32
 800b5cc:	687b      	ldr	r3, [r7, #4]
 800b5ce:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800b5d0:	687b      	ldr	r3, [r7, #4]
 800b5d2:	2200      	movs	r2, #0
 800b5d4:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 800b5d8:	2301      	movs	r3, #1
 800b5da:	e0be      	b.n	800b75a <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 800b5dc:	68bb      	ldr	r3, [r7, #8]
 800b5de:	4618      	mov	r0, r3
 800b5e0:	f7ff ff4f 	bl	800b482 <LL_ADC_REG_IsConversionOngoing>
 800b5e4:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800b5e6:	687b      	ldr	r3, [r7, #4]
 800b5e8:	681b      	ldr	r3, [r3, #0]
 800b5ea:	4618      	mov	r0, r3
 800b5ec:	f7ff ff49 	bl	800b482 <LL_ADC_REG_IsConversionOngoing>
 800b5f0:	4603      	mov	r3, r0
 800b5f2:	2b00      	cmp	r3, #0
 800b5f4:	f040 80a0 	bne.w	800b738 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
      && (tmphadcSlave_conversion_on_going == 0UL))
 800b5f8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b5fa:	2b00      	cmp	r3, #0
 800b5fc:	f040 809c 	bne.w	800b738 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 800b600:	687b      	ldr	r3, [r7, #4]
 800b602:	681b      	ldr	r3, [r3, #0]
 800b604:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800b608:	d004      	beq.n	800b614 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 800b60a:	687b      	ldr	r3, [r7, #4]
 800b60c:	681b      	ldr	r3, [r3, #0]
 800b60e:	4a55      	ldr	r2, [pc, #340]	; (800b764 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 800b610:	4293      	cmp	r3, r2
 800b612:	d101      	bne.n	800b618 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 800b614:	4b56      	ldr	r3, [pc, #344]	; (800b770 <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 800b616:	e000      	b.n	800b61a <HAL_ADCEx_MultiModeConfigChannel+0xae>
 800b618:	4b56      	ldr	r3, [pc, #344]	; (800b774 <HAL_ADCEx_MultiModeConfigChannel+0x208>)
 800b61a:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800b61c:	683b      	ldr	r3, [r7, #0]
 800b61e:	681b      	ldr	r3, [r3, #0]
 800b620:	2b00      	cmp	r3, #0
 800b622:	d04b      	beq.n	800b6bc <HAL_ADCEx_MultiModeConfigChannel+0x150>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 800b624:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b626:	689b      	ldr	r3, [r3, #8]
 800b628:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800b62c:	683b      	ldr	r3, [r7, #0]
 800b62e:	6859      	ldr	r1, [r3, #4]
 800b630:	687b      	ldr	r3, [r7, #4]
 800b632:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800b636:	035b      	lsls	r3, r3, #13
 800b638:	430b      	orrs	r3, r1
 800b63a:	431a      	orrs	r2, r3
 800b63c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b63e:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800b640:	687b      	ldr	r3, [r7, #4]
 800b642:	681b      	ldr	r3, [r3, #0]
 800b644:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800b648:	d004      	beq.n	800b654 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 800b64a:	687b      	ldr	r3, [r7, #4]
 800b64c:	681b      	ldr	r3, [r3, #0]
 800b64e:	4a45      	ldr	r2, [pc, #276]	; (800b764 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 800b650:	4293      	cmp	r3, r2
 800b652:	d10f      	bne.n	800b674 <HAL_ADCEx_MultiModeConfigChannel+0x108>
 800b654:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 800b658:	f7ff fed3 	bl	800b402 <LL_ADC_IsEnabled>
 800b65c:	4604      	mov	r4, r0
 800b65e:	4841      	ldr	r0, [pc, #260]	; (800b764 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 800b660:	f7ff fecf 	bl	800b402 <LL_ADC_IsEnabled>
 800b664:	4603      	mov	r3, r0
 800b666:	4323      	orrs	r3, r4
 800b668:	2b00      	cmp	r3, #0
 800b66a:	bf0c      	ite	eq
 800b66c:	2301      	moveq	r3, #1
 800b66e:	2300      	movne	r3, #0
 800b670:	b2db      	uxtb	r3, r3
 800b672:	e012      	b.n	800b69a <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 800b674:	483c      	ldr	r0, [pc, #240]	; (800b768 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 800b676:	f7ff fec4 	bl	800b402 <LL_ADC_IsEnabled>
 800b67a:	4604      	mov	r4, r0
 800b67c:	483b      	ldr	r0, [pc, #236]	; (800b76c <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 800b67e:	f7ff fec0 	bl	800b402 <LL_ADC_IsEnabled>
 800b682:	4603      	mov	r3, r0
 800b684:	431c      	orrs	r4, r3
 800b686:	483c      	ldr	r0, [pc, #240]	; (800b778 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 800b688:	f7ff febb 	bl	800b402 <LL_ADC_IsEnabled>
 800b68c:	4603      	mov	r3, r0
 800b68e:	4323      	orrs	r3, r4
 800b690:	2b00      	cmp	r3, #0
 800b692:	bf0c      	ite	eq
 800b694:	2301      	moveq	r3, #1
 800b696:	2300      	movne	r3, #0
 800b698:	b2db      	uxtb	r3, r3
 800b69a:	2b00      	cmp	r3, #0
 800b69c:	d056      	beq.n	800b74c <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 800b69e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b6a0:	689b      	ldr	r3, [r3, #8]
 800b6a2:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 800b6a6:	f023 030f 	bic.w	r3, r3, #15
 800b6aa:	683a      	ldr	r2, [r7, #0]
 800b6ac:	6811      	ldr	r1, [r2, #0]
 800b6ae:	683a      	ldr	r2, [r7, #0]
 800b6b0:	6892      	ldr	r2, [r2, #8]
 800b6b2:	430a      	orrs	r2, r1
 800b6b4:	431a      	orrs	r2, r3
 800b6b6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b6b8:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800b6ba:	e047      	b.n	800b74c <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 800b6bc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b6be:	689b      	ldr	r3, [r3, #8]
 800b6c0:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800b6c4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b6c6:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800b6c8:	687b      	ldr	r3, [r7, #4]
 800b6ca:	681b      	ldr	r3, [r3, #0]
 800b6cc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800b6d0:	d004      	beq.n	800b6dc <HAL_ADCEx_MultiModeConfigChannel+0x170>
 800b6d2:	687b      	ldr	r3, [r7, #4]
 800b6d4:	681b      	ldr	r3, [r3, #0]
 800b6d6:	4a23      	ldr	r2, [pc, #140]	; (800b764 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 800b6d8:	4293      	cmp	r3, r2
 800b6da:	d10f      	bne.n	800b6fc <HAL_ADCEx_MultiModeConfigChannel+0x190>
 800b6dc:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 800b6e0:	f7ff fe8f 	bl	800b402 <LL_ADC_IsEnabled>
 800b6e4:	4604      	mov	r4, r0
 800b6e6:	481f      	ldr	r0, [pc, #124]	; (800b764 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 800b6e8:	f7ff fe8b 	bl	800b402 <LL_ADC_IsEnabled>
 800b6ec:	4603      	mov	r3, r0
 800b6ee:	4323      	orrs	r3, r4
 800b6f0:	2b00      	cmp	r3, #0
 800b6f2:	bf0c      	ite	eq
 800b6f4:	2301      	moveq	r3, #1
 800b6f6:	2300      	movne	r3, #0
 800b6f8:	b2db      	uxtb	r3, r3
 800b6fa:	e012      	b.n	800b722 <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 800b6fc:	481a      	ldr	r0, [pc, #104]	; (800b768 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 800b6fe:	f7ff fe80 	bl	800b402 <LL_ADC_IsEnabled>
 800b702:	4604      	mov	r4, r0
 800b704:	4819      	ldr	r0, [pc, #100]	; (800b76c <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 800b706:	f7ff fe7c 	bl	800b402 <LL_ADC_IsEnabled>
 800b70a:	4603      	mov	r3, r0
 800b70c:	431c      	orrs	r4, r3
 800b70e:	481a      	ldr	r0, [pc, #104]	; (800b778 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 800b710:	f7ff fe77 	bl	800b402 <LL_ADC_IsEnabled>
 800b714:	4603      	mov	r3, r0
 800b716:	4323      	orrs	r3, r4
 800b718:	2b00      	cmp	r3, #0
 800b71a:	bf0c      	ite	eq
 800b71c:	2301      	moveq	r3, #1
 800b71e:	2300      	movne	r3, #0
 800b720:	b2db      	uxtb	r3, r3
 800b722:	2b00      	cmp	r3, #0
 800b724:	d012      	beq.n	800b74c <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 800b726:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b728:	689b      	ldr	r3, [r3, #8]
 800b72a:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 800b72e:	f023 030f 	bic.w	r3, r3, #15
 800b732:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800b734:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800b736:	e009      	b.n	800b74c <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800b738:	687b      	ldr	r3, [r7, #4]
 800b73a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b73c:	f043 0220 	orr.w	r2, r3, #32
 800b740:	687b      	ldr	r3, [r7, #4]
 800b742:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 800b744:	2301      	movs	r3, #1
 800b746:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 800b74a:	e000      	b.n	800b74e <HAL_ADCEx_MultiModeConfigChannel+0x1e2>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800b74c:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800b74e:	687b      	ldr	r3, [r7, #4]
 800b750:	2200      	movs	r2, #0
 800b752:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 800b756:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 800b75a:	4618      	mov	r0, r3
 800b75c:	3784      	adds	r7, #132	; 0x84
 800b75e:	46bd      	mov	sp, r7
 800b760:	bd90      	pop	{r4, r7, pc}
 800b762:	bf00      	nop
 800b764:	50000100 	.word	0x50000100
 800b768:	50000400 	.word	0x50000400
 800b76c:	50000500 	.word	0x50000500
 800b770:	50000300 	.word	0x50000300
 800b774:	50000700 	.word	0x50000700
 800b778:	50000600 	.word	0x50000600

0800b77c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800b77c:	b480      	push	{r7}
 800b77e:	b085      	sub	sp, #20
 800b780:	af00      	add	r7, sp, #0
 800b782:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800b784:	687b      	ldr	r3, [r7, #4]
 800b786:	f003 0307 	and.w	r3, r3, #7
 800b78a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800b78c:	4b0c      	ldr	r3, [pc, #48]	; (800b7c0 <__NVIC_SetPriorityGrouping+0x44>)
 800b78e:	68db      	ldr	r3, [r3, #12]
 800b790:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800b792:	68ba      	ldr	r2, [r7, #8]
 800b794:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800b798:	4013      	ands	r3, r2
 800b79a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800b79c:	68fb      	ldr	r3, [r7, #12]
 800b79e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800b7a0:	68bb      	ldr	r3, [r7, #8]
 800b7a2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800b7a4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800b7a8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b7ac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800b7ae:	4a04      	ldr	r2, [pc, #16]	; (800b7c0 <__NVIC_SetPriorityGrouping+0x44>)
 800b7b0:	68bb      	ldr	r3, [r7, #8]
 800b7b2:	60d3      	str	r3, [r2, #12]
}
 800b7b4:	bf00      	nop
 800b7b6:	3714      	adds	r7, #20
 800b7b8:	46bd      	mov	sp, r7
 800b7ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7be:	4770      	bx	lr
 800b7c0:	e000ed00 	.word	0xe000ed00

0800b7c4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800b7c4:	b480      	push	{r7}
 800b7c6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800b7c8:	4b04      	ldr	r3, [pc, #16]	; (800b7dc <__NVIC_GetPriorityGrouping+0x18>)
 800b7ca:	68db      	ldr	r3, [r3, #12]
 800b7cc:	0a1b      	lsrs	r3, r3, #8
 800b7ce:	f003 0307 	and.w	r3, r3, #7
}
 800b7d2:	4618      	mov	r0, r3
 800b7d4:	46bd      	mov	sp, r7
 800b7d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7da:	4770      	bx	lr
 800b7dc:	e000ed00 	.word	0xe000ed00

0800b7e0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800b7e0:	b480      	push	{r7}
 800b7e2:	b083      	sub	sp, #12
 800b7e4:	af00      	add	r7, sp, #0
 800b7e6:	4603      	mov	r3, r0
 800b7e8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800b7ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b7ee:	2b00      	cmp	r3, #0
 800b7f0:	db0b      	blt.n	800b80a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800b7f2:	79fb      	ldrb	r3, [r7, #7]
 800b7f4:	f003 021f 	and.w	r2, r3, #31
 800b7f8:	4907      	ldr	r1, [pc, #28]	; (800b818 <__NVIC_EnableIRQ+0x38>)
 800b7fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b7fe:	095b      	lsrs	r3, r3, #5
 800b800:	2001      	movs	r0, #1
 800b802:	fa00 f202 	lsl.w	r2, r0, r2
 800b806:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800b80a:	bf00      	nop
 800b80c:	370c      	adds	r7, #12
 800b80e:	46bd      	mov	sp, r7
 800b810:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b814:	4770      	bx	lr
 800b816:	bf00      	nop
 800b818:	e000e100 	.word	0xe000e100

0800b81c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800b81c:	b480      	push	{r7}
 800b81e:	b083      	sub	sp, #12
 800b820:	af00      	add	r7, sp, #0
 800b822:	4603      	mov	r3, r0
 800b824:	6039      	str	r1, [r7, #0]
 800b826:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800b828:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b82c:	2b00      	cmp	r3, #0
 800b82e:	db0a      	blt.n	800b846 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800b830:	683b      	ldr	r3, [r7, #0]
 800b832:	b2da      	uxtb	r2, r3
 800b834:	490c      	ldr	r1, [pc, #48]	; (800b868 <__NVIC_SetPriority+0x4c>)
 800b836:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b83a:	0112      	lsls	r2, r2, #4
 800b83c:	b2d2      	uxtb	r2, r2
 800b83e:	440b      	add	r3, r1
 800b840:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800b844:	e00a      	b.n	800b85c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800b846:	683b      	ldr	r3, [r7, #0]
 800b848:	b2da      	uxtb	r2, r3
 800b84a:	4908      	ldr	r1, [pc, #32]	; (800b86c <__NVIC_SetPriority+0x50>)
 800b84c:	79fb      	ldrb	r3, [r7, #7]
 800b84e:	f003 030f 	and.w	r3, r3, #15
 800b852:	3b04      	subs	r3, #4
 800b854:	0112      	lsls	r2, r2, #4
 800b856:	b2d2      	uxtb	r2, r2
 800b858:	440b      	add	r3, r1
 800b85a:	761a      	strb	r2, [r3, #24]
}
 800b85c:	bf00      	nop
 800b85e:	370c      	adds	r7, #12
 800b860:	46bd      	mov	sp, r7
 800b862:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b866:	4770      	bx	lr
 800b868:	e000e100 	.word	0xe000e100
 800b86c:	e000ed00 	.word	0xe000ed00

0800b870 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800b870:	b480      	push	{r7}
 800b872:	b089      	sub	sp, #36	; 0x24
 800b874:	af00      	add	r7, sp, #0
 800b876:	60f8      	str	r0, [r7, #12]
 800b878:	60b9      	str	r1, [r7, #8]
 800b87a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800b87c:	68fb      	ldr	r3, [r7, #12]
 800b87e:	f003 0307 	and.w	r3, r3, #7
 800b882:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800b884:	69fb      	ldr	r3, [r7, #28]
 800b886:	f1c3 0307 	rsb	r3, r3, #7
 800b88a:	2b04      	cmp	r3, #4
 800b88c:	bf28      	it	cs
 800b88e:	2304      	movcs	r3, #4
 800b890:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800b892:	69fb      	ldr	r3, [r7, #28]
 800b894:	3304      	adds	r3, #4
 800b896:	2b06      	cmp	r3, #6
 800b898:	d902      	bls.n	800b8a0 <NVIC_EncodePriority+0x30>
 800b89a:	69fb      	ldr	r3, [r7, #28]
 800b89c:	3b03      	subs	r3, #3
 800b89e:	e000      	b.n	800b8a2 <NVIC_EncodePriority+0x32>
 800b8a0:	2300      	movs	r3, #0
 800b8a2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800b8a4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b8a8:	69bb      	ldr	r3, [r7, #24]
 800b8aa:	fa02 f303 	lsl.w	r3, r2, r3
 800b8ae:	43da      	mvns	r2, r3
 800b8b0:	68bb      	ldr	r3, [r7, #8]
 800b8b2:	401a      	ands	r2, r3
 800b8b4:	697b      	ldr	r3, [r7, #20]
 800b8b6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800b8b8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800b8bc:	697b      	ldr	r3, [r7, #20]
 800b8be:	fa01 f303 	lsl.w	r3, r1, r3
 800b8c2:	43d9      	mvns	r1, r3
 800b8c4:	687b      	ldr	r3, [r7, #4]
 800b8c6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800b8c8:	4313      	orrs	r3, r2
         );
}
 800b8ca:	4618      	mov	r0, r3
 800b8cc:	3724      	adds	r7, #36	; 0x24
 800b8ce:	46bd      	mov	sp, r7
 800b8d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8d4:	4770      	bx	lr
	...

0800b8d8 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 800b8d8:	b480      	push	{r7}
 800b8da:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 800b8dc:	f3bf 8f4f 	dsb	sy
}
 800b8e0:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 800b8e2:	4b06      	ldr	r3, [pc, #24]	; (800b8fc <__NVIC_SystemReset+0x24>)
 800b8e4:	68db      	ldr	r3, [r3, #12]
 800b8e6:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 800b8ea:	4904      	ldr	r1, [pc, #16]	; (800b8fc <__NVIC_SystemReset+0x24>)
 800b8ec:	4b04      	ldr	r3, [pc, #16]	; (800b900 <__NVIC_SystemReset+0x28>)
 800b8ee:	4313      	orrs	r3, r2
 800b8f0:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 800b8f2:	f3bf 8f4f 	dsb	sy
}
 800b8f6:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 800b8f8:	bf00      	nop
 800b8fa:	e7fd      	b.n	800b8f8 <__NVIC_SystemReset+0x20>
 800b8fc:	e000ed00 	.word	0xe000ed00
 800b900:	05fa0004 	.word	0x05fa0004

0800b904 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800b904:	b580      	push	{r7, lr}
 800b906:	b082      	sub	sp, #8
 800b908:	af00      	add	r7, sp, #0
 800b90a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800b90c:	687b      	ldr	r3, [r7, #4]
 800b90e:	3b01      	subs	r3, #1
 800b910:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800b914:	d301      	bcc.n	800b91a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800b916:	2301      	movs	r3, #1
 800b918:	e00f      	b.n	800b93a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800b91a:	4a0a      	ldr	r2, [pc, #40]	; (800b944 <SysTick_Config+0x40>)
 800b91c:	687b      	ldr	r3, [r7, #4]
 800b91e:	3b01      	subs	r3, #1
 800b920:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800b922:	210f      	movs	r1, #15
 800b924:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b928:	f7ff ff78 	bl	800b81c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800b92c:	4b05      	ldr	r3, [pc, #20]	; (800b944 <SysTick_Config+0x40>)
 800b92e:	2200      	movs	r2, #0
 800b930:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800b932:	4b04      	ldr	r3, [pc, #16]	; (800b944 <SysTick_Config+0x40>)
 800b934:	2207      	movs	r2, #7
 800b936:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800b938:	2300      	movs	r3, #0
}
 800b93a:	4618      	mov	r0, r3
 800b93c:	3708      	adds	r7, #8
 800b93e:	46bd      	mov	sp, r7
 800b940:	bd80      	pop	{r7, pc}
 800b942:	bf00      	nop
 800b944:	e000e010 	.word	0xe000e010

0800b948 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800b948:	b580      	push	{r7, lr}
 800b94a:	b082      	sub	sp, #8
 800b94c:	af00      	add	r7, sp, #0
 800b94e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800b950:	6878      	ldr	r0, [r7, #4]
 800b952:	f7ff ff13 	bl	800b77c <__NVIC_SetPriorityGrouping>
}
 800b956:	bf00      	nop
 800b958:	3708      	adds	r7, #8
 800b95a:	46bd      	mov	sp, r7
 800b95c:	bd80      	pop	{r7, pc}

0800b95e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800b95e:	b580      	push	{r7, lr}
 800b960:	b086      	sub	sp, #24
 800b962:	af00      	add	r7, sp, #0
 800b964:	4603      	mov	r3, r0
 800b966:	60b9      	str	r1, [r7, #8]
 800b968:	607a      	str	r2, [r7, #4]
 800b96a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800b96c:	f7ff ff2a 	bl	800b7c4 <__NVIC_GetPriorityGrouping>
 800b970:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800b972:	687a      	ldr	r2, [r7, #4]
 800b974:	68b9      	ldr	r1, [r7, #8]
 800b976:	6978      	ldr	r0, [r7, #20]
 800b978:	f7ff ff7a 	bl	800b870 <NVIC_EncodePriority>
 800b97c:	4602      	mov	r2, r0
 800b97e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b982:	4611      	mov	r1, r2
 800b984:	4618      	mov	r0, r3
 800b986:	f7ff ff49 	bl	800b81c <__NVIC_SetPriority>
}
 800b98a:	bf00      	nop
 800b98c:	3718      	adds	r7, #24
 800b98e:	46bd      	mov	sp, r7
 800b990:	bd80      	pop	{r7, pc}

0800b992 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800b992:	b580      	push	{r7, lr}
 800b994:	b082      	sub	sp, #8
 800b996:	af00      	add	r7, sp, #0
 800b998:	4603      	mov	r3, r0
 800b99a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800b99c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b9a0:	4618      	mov	r0, r3
 800b9a2:	f7ff ff1d 	bl	800b7e0 <__NVIC_EnableIRQ>
}
 800b9a6:	bf00      	nop
 800b9a8:	3708      	adds	r7, #8
 800b9aa:	46bd      	mov	sp, r7
 800b9ac:	bd80      	pop	{r7, pc}

0800b9ae <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiate a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 800b9ae:	b580      	push	{r7, lr}
 800b9b0:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 800b9b2:	f7ff ff91 	bl	800b8d8 <__NVIC_SystemReset>

0800b9b6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800b9b6:	b580      	push	{r7, lr}
 800b9b8:	b082      	sub	sp, #8
 800b9ba:	af00      	add	r7, sp, #0
 800b9bc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800b9be:	6878      	ldr	r0, [r7, #4]
 800b9c0:	f7ff ffa0 	bl	800b904 <SysTick_Config>
 800b9c4:	4603      	mov	r3, r0
}
 800b9c6:	4618      	mov	r0, r3
 800b9c8:	3708      	adds	r7, #8
 800b9ca:	46bd      	mov	sp, r7
 800b9cc:	bd80      	pop	{r7, pc}
	...

0800b9d0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800b9d0:	b580      	push	{r7, lr}
 800b9d2:	b084      	sub	sp, #16
 800b9d4:	af00      	add	r7, sp, #0
 800b9d6:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 800b9d8:	687b      	ldr	r3, [r7, #4]
 800b9da:	2b00      	cmp	r3, #0
 800b9dc:	d101      	bne.n	800b9e2 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800b9de:	2301      	movs	r3, #1
 800b9e0:	e08d      	b.n	800bafe <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800b9e2:	687b      	ldr	r3, [r7, #4]
 800b9e4:	681b      	ldr	r3, [r3, #0]
 800b9e6:	461a      	mov	r2, r3
 800b9e8:	4b47      	ldr	r3, [pc, #284]	; (800bb08 <HAL_DMA_Init+0x138>)
 800b9ea:	429a      	cmp	r2, r3
 800b9ec:	d80f      	bhi.n	800ba0e <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800b9ee:	687b      	ldr	r3, [r7, #4]
 800b9f0:	681b      	ldr	r3, [r3, #0]
 800b9f2:	461a      	mov	r2, r3
 800b9f4:	4b45      	ldr	r3, [pc, #276]	; (800bb0c <HAL_DMA_Init+0x13c>)
 800b9f6:	4413      	add	r3, r2
 800b9f8:	4a45      	ldr	r2, [pc, #276]	; (800bb10 <HAL_DMA_Init+0x140>)
 800b9fa:	fba2 2303 	umull	r2, r3, r2, r3
 800b9fe:	091b      	lsrs	r3, r3, #4
 800ba00:	009a      	lsls	r2, r3, #2
 800ba02:	687b      	ldr	r3, [r7, #4]
 800ba04:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 800ba06:	687b      	ldr	r3, [r7, #4]
 800ba08:	4a42      	ldr	r2, [pc, #264]	; (800bb14 <HAL_DMA_Init+0x144>)
 800ba0a:	641a      	str	r2, [r3, #64]	; 0x40
 800ba0c:	e00e      	b.n	800ba2c <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 800ba0e:	687b      	ldr	r3, [r7, #4]
 800ba10:	681b      	ldr	r3, [r3, #0]
 800ba12:	461a      	mov	r2, r3
 800ba14:	4b40      	ldr	r3, [pc, #256]	; (800bb18 <HAL_DMA_Init+0x148>)
 800ba16:	4413      	add	r3, r2
 800ba18:	4a3d      	ldr	r2, [pc, #244]	; (800bb10 <HAL_DMA_Init+0x140>)
 800ba1a:	fba2 2303 	umull	r2, r3, r2, r3
 800ba1e:	091b      	lsrs	r3, r3, #4
 800ba20:	009a      	lsls	r2, r3, #2
 800ba22:	687b      	ldr	r3, [r7, #4]
 800ba24:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 800ba26:	687b      	ldr	r3, [r7, #4]
 800ba28:	4a3c      	ldr	r2, [pc, #240]	; (800bb1c <HAL_DMA_Init+0x14c>)
 800ba2a:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800ba2c:	687b      	ldr	r3, [r7, #4]
 800ba2e:	2202      	movs	r2, #2
 800ba30:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800ba34:	687b      	ldr	r3, [r7, #4]
 800ba36:	681b      	ldr	r3, [r3, #0]
 800ba38:	681b      	ldr	r3, [r3, #0]
 800ba3a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 800ba3c:	68fb      	ldr	r3, [r7, #12]
 800ba3e:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800ba42:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ba46:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800ba48:	687b      	ldr	r3, [r7, #4]
 800ba4a:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800ba4c:	687b      	ldr	r3, [r7, #4]
 800ba4e:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 800ba50:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800ba52:	687b      	ldr	r3, [r7, #4]
 800ba54:	691b      	ldr	r3, [r3, #16]
 800ba56:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800ba58:	687b      	ldr	r3, [r7, #4]
 800ba5a:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800ba5c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800ba5e:	687b      	ldr	r3, [r7, #4]
 800ba60:	699b      	ldr	r3, [r3, #24]
 800ba62:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800ba64:	687b      	ldr	r3, [r7, #4]
 800ba66:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800ba68:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800ba6a:	687b      	ldr	r3, [r7, #4]
 800ba6c:	6a1b      	ldr	r3, [r3, #32]
 800ba6e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800ba70:	68fa      	ldr	r2, [r7, #12]
 800ba72:	4313      	orrs	r3, r2
 800ba74:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800ba76:	687b      	ldr	r3, [r7, #4]
 800ba78:	681b      	ldr	r3, [r3, #0]
 800ba7a:	68fa      	ldr	r2, [r7, #12]
 800ba7c:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800ba7e:	6878      	ldr	r0, [r7, #4]
 800ba80:	f000 fa10 	bl	800bea4 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800ba84:	687b      	ldr	r3, [r7, #4]
 800ba86:	689b      	ldr	r3, [r3, #8]
 800ba88:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800ba8c:	d102      	bne.n	800ba94 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800ba8e:	687b      	ldr	r3, [r7, #4]
 800ba90:	2200      	movs	r2, #0
 800ba92:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800ba94:	687b      	ldr	r3, [r7, #4]
 800ba96:	685a      	ldr	r2, [r3, #4]
 800ba98:	687b      	ldr	r3, [r7, #4]
 800ba9a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ba9c:	b2d2      	uxtb	r2, r2
 800ba9e:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800baa0:	687b      	ldr	r3, [r7, #4]
 800baa2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800baa4:	687a      	ldr	r2, [r7, #4]
 800baa6:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800baa8:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 800baaa:	687b      	ldr	r3, [r7, #4]
 800baac:	685b      	ldr	r3, [r3, #4]
 800baae:	2b00      	cmp	r3, #0
 800bab0:	d010      	beq.n	800bad4 <HAL_DMA_Init+0x104>
 800bab2:	687b      	ldr	r3, [r7, #4]
 800bab4:	685b      	ldr	r3, [r3, #4]
 800bab6:	2b04      	cmp	r3, #4
 800bab8:	d80c      	bhi.n	800bad4 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800baba:	6878      	ldr	r0, [r7, #4]
 800babc:	f000 fa30 	bl	800bf20 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 800bac0:	687b      	ldr	r3, [r7, #4]
 800bac2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bac4:	2200      	movs	r2, #0
 800bac6:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800bac8:	687b      	ldr	r3, [r7, #4]
 800baca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bacc:	687a      	ldr	r2, [r7, #4]
 800bace:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800bad0:	605a      	str	r2, [r3, #4]
 800bad2:	e008      	b.n	800bae6 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 800bad4:	687b      	ldr	r3, [r7, #4]
 800bad6:	2200      	movs	r2, #0
 800bad8:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 800bada:	687b      	ldr	r3, [r7, #4]
 800badc:	2200      	movs	r2, #0
 800bade:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 800bae0:	687b      	ldr	r3, [r7, #4]
 800bae2:	2200      	movs	r2, #0
 800bae4:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800bae6:	687b      	ldr	r3, [r7, #4]
 800bae8:	2200      	movs	r2, #0
 800baea:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 800baec:	687b      	ldr	r3, [r7, #4]
 800baee:	2201      	movs	r2, #1
 800baf0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800baf4:	687b      	ldr	r3, [r7, #4]
 800baf6:	2200      	movs	r2, #0
 800baf8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800bafc:	2300      	movs	r3, #0
}
 800bafe:	4618      	mov	r0, r3
 800bb00:	3710      	adds	r7, #16
 800bb02:	46bd      	mov	sp, r7
 800bb04:	bd80      	pop	{r7, pc}
 800bb06:	bf00      	nop
 800bb08:	40020407 	.word	0x40020407
 800bb0c:	bffdfff8 	.word	0xbffdfff8
 800bb10:	cccccccd 	.word	0xcccccccd
 800bb14:	40020000 	.word	0x40020000
 800bb18:	bffdfbf8 	.word	0xbffdfbf8
 800bb1c:	40020400 	.word	0x40020400

0800bb20 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 800bb20:	b580      	push	{r7, lr}
 800bb22:	b086      	sub	sp, #24
 800bb24:	af00      	add	r7, sp, #0
 800bb26:	60f8      	str	r0, [r7, #12]
 800bb28:	60b9      	str	r1, [r7, #8]
 800bb2a:	607a      	str	r2, [r7, #4]
 800bb2c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800bb2e:	2300      	movs	r3, #0
 800bb30:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800bb32:	68fb      	ldr	r3, [r7, #12]
 800bb34:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800bb38:	2b01      	cmp	r3, #1
 800bb3a:	d101      	bne.n	800bb40 <HAL_DMA_Start_IT+0x20>
 800bb3c:	2302      	movs	r3, #2
 800bb3e:	e066      	b.n	800bc0e <HAL_DMA_Start_IT+0xee>
 800bb40:	68fb      	ldr	r3, [r7, #12]
 800bb42:	2201      	movs	r2, #1
 800bb44:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 800bb48:	68fb      	ldr	r3, [r7, #12]
 800bb4a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800bb4e:	b2db      	uxtb	r3, r3
 800bb50:	2b01      	cmp	r3, #1
 800bb52:	d155      	bne.n	800bc00 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800bb54:	68fb      	ldr	r3, [r7, #12]
 800bb56:	2202      	movs	r2, #2
 800bb58:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800bb5c:	68fb      	ldr	r3, [r7, #12]
 800bb5e:	2200      	movs	r2, #0
 800bb60:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800bb62:	68fb      	ldr	r3, [r7, #12]
 800bb64:	681b      	ldr	r3, [r3, #0]
 800bb66:	681a      	ldr	r2, [r3, #0]
 800bb68:	68fb      	ldr	r3, [r7, #12]
 800bb6a:	681b      	ldr	r3, [r3, #0]
 800bb6c:	f022 0201 	bic.w	r2, r2, #1
 800bb70:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800bb72:	683b      	ldr	r3, [r7, #0]
 800bb74:	687a      	ldr	r2, [r7, #4]
 800bb76:	68b9      	ldr	r1, [r7, #8]
 800bb78:	68f8      	ldr	r0, [r7, #12]
 800bb7a:	f000 f954 	bl	800be26 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 800bb7e:	68fb      	ldr	r3, [r7, #12]
 800bb80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bb82:	2b00      	cmp	r3, #0
 800bb84:	d008      	beq.n	800bb98 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800bb86:	68fb      	ldr	r3, [r7, #12]
 800bb88:	681b      	ldr	r3, [r3, #0]
 800bb8a:	681a      	ldr	r2, [r3, #0]
 800bb8c:	68fb      	ldr	r3, [r7, #12]
 800bb8e:	681b      	ldr	r3, [r3, #0]
 800bb90:	f042 020e 	orr.w	r2, r2, #14
 800bb94:	601a      	str	r2, [r3, #0]
 800bb96:	e00f      	b.n	800bbb8 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800bb98:	68fb      	ldr	r3, [r7, #12]
 800bb9a:	681b      	ldr	r3, [r3, #0]
 800bb9c:	681a      	ldr	r2, [r3, #0]
 800bb9e:	68fb      	ldr	r3, [r7, #12]
 800bba0:	681b      	ldr	r3, [r3, #0]
 800bba2:	f022 0204 	bic.w	r2, r2, #4
 800bba6:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800bba8:	68fb      	ldr	r3, [r7, #12]
 800bbaa:	681b      	ldr	r3, [r3, #0]
 800bbac:	681a      	ldr	r2, [r3, #0]
 800bbae:	68fb      	ldr	r3, [r7, #12]
 800bbb0:	681b      	ldr	r3, [r3, #0]
 800bbb2:	f042 020a 	orr.w	r2, r2, #10
 800bbb6:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 800bbb8:	68fb      	ldr	r3, [r7, #12]
 800bbba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800bbbc:	681b      	ldr	r3, [r3, #0]
 800bbbe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800bbc2:	2b00      	cmp	r3, #0
 800bbc4:	d007      	beq.n	800bbd6 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800bbc6:	68fb      	ldr	r3, [r7, #12]
 800bbc8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800bbca:	681a      	ldr	r2, [r3, #0]
 800bbcc:	68fb      	ldr	r3, [r7, #12]
 800bbce:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800bbd0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800bbd4:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 800bbd6:	68fb      	ldr	r3, [r7, #12]
 800bbd8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bbda:	2b00      	cmp	r3, #0
 800bbdc:	d007      	beq.n	800bbee <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800bbde:	68fb      	ldr	r3, [r7, #12]
 800bbe0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bbe2:	681a      	ldr	r2, [r3, #0]
 800bbe4:	68fb      	ldr	r3, [r7, #12]
 800bbe6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bbe8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800bbec:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800bbee:	68fb      	ldr	r3, [r7, #12]
 800bbf0:	681b      	ldr	r3, [r3, #0]
 800bbf2:	681a      	ldr	r2, [r3, #0]
 800bbf4:	68fb      	ldr	r3, [r7, #12]
 800bbf6:	681b      	ldr	r3, [r3, #0]
 800bbf8:	f042 0201 	orr.w	r2, r2, #1
 800bbfc:	601a      	str	r2, [r3, #0]
 800bbfe:	e005      	b.n	800bc0c <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800bc00:	68fb      	ldr	r3, [r7, #12]
 800bc02:	2200      	movs	r2, #0
 800bc04:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 800bc08:	2302      	movs	r3, #2
 800bc0a:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 800bc0c:	7dfb      	ldrb	r3, [r7, #23]
}
 800bc0e:	4618      	mov	r0, r3
 800bc10:	3718      	adds	r7, #24
 800bc12:	46bd      	mov	sp, r7
 800bc14:	bd80      	pop	{r7, pc}

0800bc16 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800bc16:	b480      	push	{r7}
 800bc18:	b085      	sub	sp, #20
 800bc1a:	af00      	add	r7, sp, #0
 800bc1c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800bc1e:	2300      	movs	r3, #0
 800bc20:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 800bc22:	687b      	ldr	r3, [r7, #4]
 800bc24:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800bc28:	b2db      	uxtb	r3, r3
 800bc2a:	2b02      	cmp	r3, #2
 800bc2c:	d005      	beq.n	800bc3a <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800bc2e:	687b      	ldr	r3, [r7, #4]
 800bc30:	2204      	movs	r2, #4
 800bc32:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 800bc34:	2301      	movs	r3, #1
 800bc36:	73fb      	strb	r3, [r7, #15]
 800bc38:	e037      	b.n	800bcaa <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800bc3a:	687b      	ldr	r3, [r7, #4]
 800bc3c:	681b      	ldr	r3, [r3, #0]
 800bc3e:	681a      	ldr	r2, [r3, #0]
 800bc40:	687b      	ldr	r3, [r7, #4]
 800bc42:	681b      	ldr	r3, [r3, #0]
 800bc44:	f022 020e 	bic.w	r2, r2, #14
 800bc48:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800bc4a:	687b      	ldr	r3, [r7, #4]
 800bc4c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800bc4e:	681a      	ldr	r2, [r3, #0]
 800bc50:	687b      	ldr	r3, [r7, #4]
 800bc52:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800bc54:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800bc58:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 800bc5a:	687b      	ldr	r3, [r7, #4]
 800bc5c:	681b      	ldr	r3, [r3, #0]
 800bc5e:	681a      	ldr	r2, [r3, #0]
 800bc60:	687b      	ldr	r3, [r7, #4]
 800bc62:	681b      	ldr	r3, [r3, #0]
 800bc64:	f022 0201 	bic.w	r2, r2, #1
 800bc68:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800bc6a:	687b      	ldr	r3, [r7, #4]
 800bc6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bc6e:	f003 021f 	and.w	r2, r3, #31
 800bc72:	687b      	ldr	r3, [r7, #4]
 800bc74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bc76:	2101      	movs	r1, #1
 800bc78:	fa01 f202 	lsl.w	r2, r1, r2
 800bc7c:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800bc7e:	687b      	ldr	r3, [r7, #4]
 800bc80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bc82:	687a      	ldr	r2, [r7, #4]
 800bc84:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800bc86:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 800bc88:	687b      	ldr	r3, [r7, #4]
 800bc8a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bc8c:	2b00      	cmp	r3, #0
 800bc8e:	d00c      	beq.n	800bcaa <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800bc90:	687b      	ldr	r3, [r7, #4]
 800bc92:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bc94:	681a      	ldr	r2, [r3, #0]
 800bc96:	687b      	ldr	r3, [r7, #4]
 800bc98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bc9a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800bc9e:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800bca0:	687b      	ldr	r3, [r7, #4]
 800bca2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bca4:	687a      	ldr	r2, [r7, #4]
 800bca6:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800bca8:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800bcaa:	687b      	ldr	r3, [r7, #4]
 800bcac:	2201      	movs	r2, #1
 800bcae:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 800bcb2:	687b      	ldr	r3, [r7, #4]
 800bcb4:	2200      	movs	r2, #0
 800bcb6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return status;
 800bcba:	7bfb      	ldrb	r3, [r7, #15]
}
 800bcbc:	4618      	mov	r0, r3
 800bcbe:	3714      	adds	r7, #20
 800bcc0:	46bd      	mov	sp, r7
 800bcc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcc6:	4770      	bx	lr

0800bcc8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800bcc8:	b580      	push	{r7, lr}
 800bcca:	b084      	sub	sp, #16
 800bccc:	af00      	add	r7, sp, #0
 800bcce:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800bcd0:	687b      	ldr	r3, [r7, #4]
 800bcd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bcd4:	681b      	ldr	r3, [r3, #0]
 800bcd6:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800bcd8:	687b      	ldr	r3, [r7, #4]
 800bcda:	681b      	ldr	r3, [r3, #0]
 800bcdc:	681b      	ldr	r3, [r3, #0]
 800bcde:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 800bce0:	687b      	ldr	r3, [r7, #4]
 800bce2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bce4:	f003 031f 	and.w	r3, r3, #31
 800bce8:	2204      	movs	r2, #4
 800bcea:	409a      	lsls	r2, r3
 800bcec:	68fb      	ldr	r3, [r7, #12]
 800bcee:	4013      	ands	r3, r2
 800bcf0:	2b00      	cmp	r3, #0
 800bcf2:	d026      	beq.n	800bd42 <HAL_DMA_IRQHandler+0x7a>
 800bcf4:	68bb      	ldr	r3, [r7, #8]
 800bcf6:	f003 0304 	and.w	r3, r3, #4
 800bcfa:	2b00      	cmp	r3, #0
 800bcfc:	d021      	beq.n	800bd42 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800bcfe:	687b      	ldr	r3, [r7, #4]
 800bd00:	681b      	ldr	r3, [r3, #0]
 800bd02:	681b      	ldr	r3, [r3, #0]
 800bd04:	f003 0320 	and.w	r3, r3, #32
 800bd08:	2b00      	cmp	r3, #0
 800bd0a:	d107      	bne.n	800bd1c <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800bd0c:	687b      	ldr	r3, [r7, #4]
 800bd0e:	681b      	ldr	r3, [r3, #0]
 800bd10:	681a      	ldr	r2, [r3, #0]
 800bd12:	687b      	ldr	r3, [r7, #4]
 800bd14:	681b      	ldr	r3, [r3, #0]
 800bd16:	f022 0204 	bic.w	r2, r2, #4
 800bd1a:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 800bd1c:	687b      	ldr	r3, [r7, #4]
 800bd1e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bd20:	f003 021f 	and.w	r2, r3, #31
 800bd24:	687b      	ldr	r3, [r7, #4]
 800bd26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bd28:	2104      	movs	r1, #4
 800bd2a:	fa01 f202 	lsl.w	r2, r1, r2
 800bd2e:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 800bd30:	687b      	ldr	r3, [r7, #4]
 800bd32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bd34:	2b00      	cmp	r3, #0
 800bd36:	d071      	beq.n	800be1c <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800bd38:	687b      	ldr	r3, [r7, #4]
 800bd3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bd3c:	6878      	ldr	r0, [r7, #4]
 800bd3e:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 800bd40:	e06c      	b.n	800be1c <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 800bd42:	687b      	ldr	r3, [r7, #4]
 800bd44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bd46:	f003 031f 	and.w	r3, r3, #31
 800bd4a:	2202      	movs	r2, #2
 800bd4c:	409a      	lsls	r2, r3
 800bd4e:	68fb      	ldr	r3, [r7, #12]
 800bd50:	4013      	ands	r3, r2
 800bd52:	2b00      	cmp	r3, #0
 800bd54:	d02e      	beq.n	800bdb4 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 800bd56:	68bb      	ldr	r3, [r7, #8]
 800bd58:	f003 0302 	and.w	r3, r3, #2
 800bd5c:	2b00      	cmp	r3, #0
 800bd5e:	d029      	beq.n	800bdb4 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800bd60:	687b      	ldr	r3, [r7, #4]
 800bd62:	681b      	ldr	r3, [r3, #0]
 800bd64:	681b      	ldr	r3, [r3, #0]
 800bd66:	f003 0320 	and.w	r3, r3, #32
 800bd6a:	2b00      	cmp	r3, #0
 800bd6c:	d10b      	bne.n	800bd86 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800bd6e:	687b      	ldr	r3, [r7, #4]
 800bd70:	681b      	ldr	r3, [r3, #0]
 800bd72:	681a      	ldr	r2, [r3, #0]
 800bd74:	687b      	ldr	r3, [r7, #4]
 800bd76:	681b      	ldr	r3, [r3, #0]
 800bd78:	f022 020a 	bic.w	r2, r2, #10
 800bd7c:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800bd7e:	687b      	ldr	r3, [r7, #4]
 800bd80:	2201      	movs	r2, #1
 800bd82:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 800bd86:	687b      	ldr	r3, [r7, #4]
 800bd88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bd8a:	f003 021f 	and.w	r2, r3, #31
 800bd8e:	687b      	ldr	r3, [r7, #4]
 800bd90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bd92:	2102      	movs	r1, #2
 800bd94:	fa01 f202 	lsl.w	r2, r1, r2
 800bd98:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800bd9a:	687b      	ldr	r3, [r7, #4]
 800bd9c:	2200      	movs	r2, #0
 800bd9e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 800bda2:	687b      	ldr	r3, [r7, #4]
 800bda4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bda6:	2b00      	cmp	r3, #0
 800bda8:	d038      	beq.n	800be1c <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800bdaa:	687b      	ldr	r3, [r7, #4]
 800bdac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bdae:	6878      	ldr	r0, [r7, #4]
 800bdb0:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 800bdb2:	e033      	b.n	800be1c <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 800bdb4:	687b      	ldr	r3, [r7, #4]
 800bdb6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bdb8:	f003 031f 	and.w	r3, r3, #31
 800bdbc:	2208      	movs	r2, #8
 800bdbe:	409a      	lsls	r2, r3
 800bdc0:	68fb      	ldr	r3, [r7, #12]
 800bdc2:	4013      	ands	r3, r2
 800bdc4:	2b00      	cmp	r3, #0
 800bdc6:	d02a      	beq.n	800be1e <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 800bdc8:	68bb      	ldr	r3, [r7, #8]
 800bdca:	f003 0308 	and.w	r3, r3, #8
 800bdce:	2b00      	cmp	r3, #0
 800bdd0:	d025      	beq.n	800be1e <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800bdd2:	687b      	ldr	r3, [r7, #4]
 800bdd4:	681b      	ldr	r3, [r3, #0]
 800bdd6:	681a      	ldr	r2, [r3, #0]
 800bdd8:	687b      	ldr	r3, [r7, #4]
 800bdda:	681b      	ldr	r3, [r3, #0]
 800bddc:	f022 020e 	bic.w	r2, r2, #14
 800bde0:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800bde2:	687b      	ldr	r3, [r7, #4]
 800bde4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bde6:	f003 021f 	and.w	r2, r3, #31
 800bdea:	687b      	ldr	r3, [r7, #4]
 800bdec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bdee:	2101      	movs	r1, #1
 800bdf0:	fa01 f202 	lsl.w	r2, r1, r2
 800bdf4:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800bdf6:	687b      	ldr	r3, [r7, #4]
 800bdf8:	2201      	movs	r2, #1
 800bdfa:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800bdfc:	687b      	ldr	r3, [r7, #4]
 800bdfe:	2201      	movs	r2, #1
 800be00:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800be04:	687b      	ldr	r3, [r7, #4]
 800be06:	2200      	movs	r2, #0
 800be08:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 800be0c:	687b      	ldr	r3, [r7, #4]
 800be0e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800be10:	2b00      	cmp	r3, #0
 800be12:	d004      	beq.n	800be1e <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800be14:	687b      	ldr	r3, [r7, #4]
 800be16:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800be18:	6878      	ldr	r0, [r7, #4]
 800be1a:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800be1c:	bf00      	nop
 800be1e:	bf00      	nop
}
 800be20:	3710      	adds	r7, #16
 800be22:	46bd      	mov	sp, r7
 800be24:	bd80      	pop	{r7, pc}

0800be26 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800be26:	b480      	push	{r7}
 800be28:	b085      	sub	sp, #20
 800be2a:	af00      	add	r7, sp, #0
 800be2c:	60f8      	str	r0, [r7, #12]
 800be2e:	60b9      	str	r1, [r7, #8]
 800be30:	607a      	str	r2, [r7, #4]
 800be32:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800be34:	68fb      	ldr	r3, [r7, #12]
 800be36:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800be38:	68fa      	ldr	r2, [r7, #12]
 800be3a:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800be3c:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 800be3e:	68fb      	ldr	r3, [r7, #12]
 800be40:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800be42:	2b00      	cmp	r3, #0
 800be44:	d004      	beq.n	800be50 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800be46:	68fb      	ldr	r3, [r7, #12]
 800be48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800be4a:	68fa      	ldr	r2, [r7, #12]
 800be4c:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800be4e:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800be50:	68fb      	ldr	r3, [r7, #12]
 800be52:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800be54:	f003 021f 	and.w	r2, r3, #31
 800be58:	68fb      	ldr	r3, [r7, #12]
 800be5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800be5c:	2101      	movs	r1, #1
 800be5e:	fa01 f202 	lsl.w	r2, r1, r2
 800be62:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800be64:	68fb      	ldr	r3, [r7, #12]
 800be66:	681b      	ldr	r3, [r3, #0]
 800be68:	683a      	ldr	r2, [r7, #0]
 800be6a:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800be6c:	68fb      	ldr	r3, [r7, #12]
 800be6e:	689b      	ldr	r3, [r3, #8]
 800be70:	2b10      	cmp	r3, #16
 800be72:	d108      	bne.n	800be86 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800be74:	68fb      	ldr	r3, [r7, #12]
 800be76:	681b      	ldr	r3, [r3, #0]
 800be78:	687a      	ldr	r2, [r7, #4]
 800be7a:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800be7c:	68fb      	ldr	r3, [r7, #12]
 800be7e:	681b      	ldr	r3, [r3, #0]
 800be80:	68ba      	ldr	r2, [r7, #8]
 800be82:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800be84:	e007      	b.n	800be96 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 800be86:	68fb      	ldr	r3, [r7, #12]
 800be88:	681b      	ldr	r3, [r3, #0]
 800be8a:	68ba      	ldr	r2, [r7, #8]
 800be8c:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800be8e:	68fb      	ldr	r3, [r7, #12]
 800be90:	681b      	ldr	r3, [r3, #0]
 800be92:	687a      	ldr	r2, [r7, #4]
 800be94:	60da      	str	r2, [r3, #12]
}
 800be96:	bf00      	nop
 800be98:	3714      	adds	r7, #20
 800be9a:	46bd      	mov	sp, r7
 800be9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bea0:	4770      	bx	lr
	...

0800bea4 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800bea4:	b480      	push	{r7}
 800bea6:	b087      	sub	sp, #28
 800bea8:	af00      	add	r7, sp, #0
 800beaa:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 800beac:	687b      	ldr	r3, [r7, #4]
 800beae:	681b      	ldr	r3, [r3, #0]
 800beb0:	461a      	mov	r2, r3
 800beb2:	4b16      	ldr	r3, [pc, #88]	; (800bf0c <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 800beb4:	429a      	cmp	r2, r3
 800beb6:	d802      	bhi.n	800bebe <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 800beb8:	4b15      	ldr	r3, [pc, #84]	; (800bf10 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 800beba:	617b      	str	r3, [r7, #20]
 800bebc:	e001      	b.n	800bec2 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 800bebe:	4b15      	ldr	r3, [pc, #84]	; (800bf14 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 800bec0:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 800bec2:	697b      	ldr	r3, [r7, #20]
 800bec4:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 800bec6:	687b      	ldr	r3, [r7, #4]
 800bec8:	681b      	ldr	r3, [r3, #0]
 800beca:	b2db      	uxtb	r3, r3
 800becc:	3b08      	subs	r3, #8
 800bece:	4a12      	ldr	r2, [pc, #72]	; (800bf18 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 800bed0:	fba2 2303 	umull	r2, r3, r2, r3
 800bed4:	091b      	lsrs	r3, r3, #4
 800bed6:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 800bed8:	687b      	ldr	r3, [r7, #4]
 800beda:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bedc:	089b      	lsrs	r3, r3, #2
 800bede:	009a      	lsls	r2, r3, #2
 800bee0:	693b      	ldr	r3, [r7, #16]
 800bee2:	4413      	add	r3, r2
 800bee4:	461a      	mov	r2, r3
 800bee6:	687b      	ldr	r3, [r7, #4]
 800bee8:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800beea:	687b      	ldr	r3, [r7, #4]
 800beec:	4a0b      	ldr	r2, [pc, #44]	; (800bf1c <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 800beee:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 800bef0:	68fb      	ldr	r3, [r7, #12]
 800bef2:	f003 031f 	and.w	r3, r3, #31
 800bef6:	2201      	movs	r2, #1
 800bef8:	409a      	lsls	r2, r3
 800befa:	687b      	ldr	r3, [r7, #4]
 800befc:	651a      	str	r2, [r3, #80]	; 0x50
}
 800befe:	bf00      	nop
 800bf00:	371c      	adds	r7, #28
 800bf02:	46bd      	mov	sp, r7
 800bf04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf08:	4770      	bx	lr
 800bf0a:	bf00      	nop
 800bf0c:	40020407 	.word	0x40020407
 800bf10:	40020800 	.word	0x40020800
 800bf14:	40020820 	.word	0x40020820
 800bf18:	cccccccd 	.word	0xcccccccd
 800bf1c:	40020880 	.word	0x40020880

0800bf20 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800bf20:	b480      	push	{r7}
 800bf22:	b085      	sub	sp, #20
 800bf24:	af00      	add	r7, sp, #0
 800bf26:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 800bf28:	687b      	ldr	r3, [r7, #4]
 800bf2a:	685b      	ldr	r3, [r3, #4]
 800bf2c:	b2db      	uxtb	r3, r3
 800bf2e:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800bf30:	68fa      	ldr	r2, [r7, #12]
 800bf32:	4b0b      	ldr	r3, [pc, #44]	; (800bf60 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 800bf34:	4413      	add	r3, r2
 800bf36:	009b      	lsls	r3, r3, #2
 800bf38:	461a      	mov	r2, r3
 800bf3a:	687b      	ldr	r3, [r7, #4]
 800bf3c:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800bf3e:	687b      	ldr	r3, [r7, #4]
 800bf40:	4a08      	ldr	r2, [pc, #32]	; (800bf64 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 800bf42:	659a      	str	r2, [r3, #88]	; 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 800bf44:	68fb      	ldr	r3, [r7, #12]
 800bf46:	3b01      	subs	r3, #1
 800bf48:	f003 031f 	and.w	r3, r3, #31
 800bf4c:	2201      	movs	r2, #1
 800bf4e:	409a      	lsls	r2, r3
 800bf50:	687b      	ldr	r3, [r7, #4]
 800bf52:	65da      	str	r2, [r3, #92]	; 0x5c
}
 800bf54:	bf00      	nop
 800bf56:	3714      	adds	r7, #20
 800bf58:	46bd      	mov	sp, r7
 800bf5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf5e:	4770      	bx	lr
 800bf60:	1000823f 	.word	0x1000823f
 800bf64:	40020940 	.word	0x40020940

0800bf68 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800bf68:	b480      	push	{r7}
 800bf6a:	b087      	sub	sp, #28
 800bf6c:	af00      	add	r7, sp, #0
 800bf6e:	6078      	str	r0, [r7, #4]
 800bf70:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800bf72:	2300      	movs	r3, #0
 800bf74:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 800bf76:	e15a      	b.n	800c22e <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800bf78:	683b      	ldr	r3, [r7, #0]
 800bf7a:	681a      	ldr	r2, [r3, #0]
 800bf7c:	2101      	movs	r1, #1
 800bf7e:	697b      	ldr	r3, [r7, #20]
 800bf80:	fa01 f303 	lsl.w	r3, r1, r3
 800bf84:	4013      	ands	r3, r2
 800bf86:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800bf88:	68fb      	ldr	r3, [r7, #12]
 800bf8a:	2b00      	cmp	r3, #0
 800bf8c:	f000 814c 	beq.w	800c228 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800bf90:	683b      	ldr	r3, [r7, #0]
 800bf92:	685b      	ldr	r3, [r3, #4]
 800bf94:	f003 0303 	and.w	r3, r3, #3
 800bf98:	2b01      	cmp	r3, #1
 800bf9a:	d005      	beq.n	800bfa8 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800bf9c:	683b      	ldr	r3, [r7, #0]
 800bf9e:	685b      	ldr	r3, [r3, #4]
 800bfa0:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800bfa4:	2b02      	cmp	r3, #2
 800bfa6:	d130      	bne.n	800c00a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800bfa8:	687b      	ldr	r3, [r7, #4]
 800bfaa:	689b      	ldr	r3, [r3, #8]
 800bfac:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800bfae:	697b      	ldr	r3, [r7, #20]
 800bfb0:	005b      	lsls	r3, r3, #1
 800bfb2:	2203      	movs	r2, #3
 800bfb4:	fa02 f303 	lsl.w	r3, r2, r3
 800bfb8:	43db      	mvns	r3, r3
 800bfba:	693a      	ldr	r2, [r7, #16]
 800bfbc:	4013      	ands	r3, r2
 800bfbe:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800bfc0:	683b      	ldr	r3, [r7, #0]
 800bfc2:	68da      	ldr	r2, [r3, #12]
 800bfc4:	697b      	ldr	r3, [r7, #20]
 800bfc6:	005b      	lsls	r3, r3, #1
 800bfc8:	fa02 f303 	lsl.w	r3, r2, r3
 800bfcc:	693a      	ldr	r2, [r7, #16]
 800bfce:	4313      	orrs	r3, r2
 800bfd0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800bfd2:	687b      	ldr	r3, [r7, #4]
 800bfd4:	693a      	ldr	r2, [r7, #16]
 800bfd6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800bfd8:	687b      	ldr	r3, [r7, #4]
 800bfda:	685b      	ldr	r3, [r3, #4]
 800bfdc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800bfde:	2201      	movs	r2, #1
 800bfe0:	697b      	ldr	r3, [r7, #20]
 800bfe2:	fa02 f303 	lsl.w	r3, r2, r3
 800bfe6:	43db      	mvns	r3, r3
 800bfe8:	693a      	ldr	r2, [r7, #16]
 800bfea:	4013      	ands	r3, r2
 800bfec:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800bfee:	683b      	ldr	r3, [r7, #0]
 800bff0:	685b      	ldr	r3, [r3, #4]
 800bff2:	091b      	lsrs	r3, r3, #4
 800bff4:	f003 0201 	and.w	r2, r3, #1
 800bff8:	697b      	ldr	r3, [r7, #20]
 800bffa:	fa02 f303 	lsl.w	r3, r2, r3
 800bffe:	693a      	ldr	r2, [r7, #16]
 800c000:	4313      	orrs	r3, r2
 800c002:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800c004:	687b      	ldr	r3, [r7, #4]
 800c006:	693a      	ldr	r2, [r7, #16]
 800c008:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800c00a:	683b      	ldr	r3, [r7, #0]
 800c00c:	685b      	ldr	r3, [r3, #4]
 800c00e:	f003 0303 	and.w	r3, r3, #3
 800c012:	2b03      	cmp	r3, #3
 800c014:	d017      	beq.n	800c046 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800c016:	687b      	ldr	r3, [r7, #4]
 800c018:	68db      	ldr	r3, [r3, #12]
 800c01a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800c01c:	697b      	ldr	r3, [r7, #20]
 800c01e:	005b      	lsls	r3, r3, #1
 800c020:	2203      	movs	r2, #3
 800c022:	fa02 f303 	lsl.w	r3, r2, r3
 800c026:	43db      	mvns	r3, r3
 800c028:	693a      	ldr	r2, [r7, #16]
 800c02a:	4013      	ands	r3, r2
 800c02c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800c02e:	683b      	ldr	r3, [r7, #0]
 800c030:	689a      	ldr	r2, [r3, #8]
 800c032:	697b      	ldr	r3, [r7, #20]
 800c034:	005b      	lsls	r3, r3, #1
 800c036:	fa02 f303 	lsl.w	r3, r2, r3
 800c03a:	693a      	ldr	r2, [r7, #16]
 800c03c:	4313      	orrs	r3, r2
 800c03e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800c040:	687b      	ldr	r3, [r7, #4]
 800c042:	693a      	ldr	r2, [r7, #16]
 800c044:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800c046:	683b      	ldr	r3, [r7, #0]
 800c048:	685b      	ldr	r3, [r3, #4]
 800c04a:	f003 0303 	and.w	r3, r3, #3
 800c04e:	2b02      	cmp	r3, #2
 800c050:	d123      	bne.n	800c09a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800c052:	697b      	ldr	r3, [r7, #20]
 800c054:	08da      	lsrs	r2, r3, #3
 800c056:	687b      	ldr	r3, [r7, #4]
 800c058:	3208      	adds	r2, #8
 800c05a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c05e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800c060:	697b      	ldr	r3, [r7, #20]
 800c062:	f003 0307 	and.w	r3, r3, #7
 800c066:	009b      	lsls	r3, r3, #2
 800c068:	220f      	movs	r2, #15
 800c06a:	fa02 f303 	lsl.w	r3, r2, r3
 800c06e:	43db      	mvns	r3, r3
 800c070:	693a      	ldr	r2, [r7, #16]
 800c072:	4013      	ands	r3, r2
 800c074:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800c076:	683b      	ldr	r3, [r7, #0]
 800c078:	691a      	ldr	r2, [r3, #16]
 800c07a:	697b      	ldr	r3, [r7, #20]
 800c07c:	f003 0307 	and.w	r3, r3, #7
 800c080:	009b      	lsls	r3, r3, #2
 800c082:	fa02 f303 	lsl.w	r3, r2, r3
 800c086:	693a      	ldr	r2, [r7, #16]
 800c088:	4313      	orrs	r3, r2
 800c08a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 800c08c:	697b      	ldr	r3, [r7, #20]
 800c08e:	08da      	lsrs	r2, r3, #3
 800c090:	687b      	ldr	r3, [r7, #4]
 800c092:	3208      	adds	r2, #8
 800c094:	6939      	ldr	r1, [r7, #16]
 800c096:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800c09a:	687b      	ldr	r3, [r7, #4]
 800c09c:	681b      	ldr	r3, [r3, #0]
 800c09e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800c0a0:	697b      	ldr	r3, [r7, #20]
 800c0a2:	005b      	lsls	r3, r3, #1
 800c0a4:	2203      	movs	r2, #3
 800c0a6:	fa02 f303 	lsl.w	r3, r2, r3
 800c0aa:	43db      	mvns	r3, r3
 800c0ac:	693a      	ldr	r2, [r7, #16]
 800c0ae:	4013      	ands	r3, r2
 800c0b0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800c0b2:	683b      	ldr	r3, [r7, #0]
 800c0b4:	685b      	ldr	r3, [r3, #4]
 800c0b6:	f003 0203 	and.w	r2, r3, #3
 800c0ba:	697b      	ldr	r3, [r7, #20]
 800c0bc:	005b      	lsls	r3, r3, #1
 800c0be:	fa02 f303 	lsl.w	r3, r2, r3
 800c0c2:	693a      	ldr	r2, [r7, #16]
 800c0c4:	4313      	orrs	r3, r2
 800c0c6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800c0c8:	687b      	ldr	r3, [r7, #4]
 800c0ca:	693a      	ldr	r2, [r7, #16]
 800c0cc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800c0ce:	683b      	ldr	r3, [r7, #0]
 800c0d0:	685b      	ldr	r3, [r3, #4]
 800c0d2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800c0d6:	2b00      	cmp	r3, #0
 800c0d8:	f000 80a6 	beq.w	800c228 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800c0dc:	4b5b      	ldr	r3, [pc, #364]	; (800c24c <HAL_GPIO_Init+0x2e4>)
 800c0de:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c0e0:	4a5a      	ldr	r2, [pc, #360]	; (800c24c <HAL_GPIO_Init+0x2e4>)
 800c0e2:	f043 0301 	orr.w	r3, r3, #1
 800c0e6:	6613      	str	r3, [r2, #96]	; 0x60
 800c0e8:	4b58      	ldr	r3, [pc, #352]	; (800c24c <HAL_GPIO_Init+0x2e4>)
 800c0ea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c0ec:	f003 0301 	and.w	r3, r3, #1
 800c0f0:	60bb      	str	r3, [r7, #8]
 800c0f2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 800c0f4:	4a56      	ldr	r2, [pc, #344]	; (800c250 <HAL_GPIO_Init+0x2e8>)
 800c0f6:	697b      	ldr	r3, [r7, #20]
 800c0f8:	089b      	lsrs	r3, r3, #2
 800c0fa:	3302      	adds	r3, #2
 800c0fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c100:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800c102:	697b      	ldr	r3, [r7, #20]
 800c104:	f003 0303 	and.w	r3, r3, #3
 800c108:	009b      	lsls	r3, r3, #2
 800c10a:	220f      	movs	r2, #15
 800c10c:	fa02 f303 	lsl.w	r3, r2, r3
 800c110:	43db      	mvns	r3, r3
 800c112:	693a      	ldr	r2, [r7, #16]
 800c114:	4013      	ands	r3, r2
 800c116:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800c118:	687b      	ldr	r3, [r7, #4]
 800c11a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800c11e:	d01f      	beq.n	800c160 <HAL_GPIO_Init+0x1f8>
 800c120:	687b      	ldr	r3, [r7, #4]
 800c122:	4a4c      	ldr	r2, [pc, #304]	; (800c254 <HAL_GPIO_Init+0x2ec>)
 800c124:	4293      	cmp	r3, r2
 800c126:	d019      	beq.n	800c15c <HAL_GPIO_Init+0x1f4>
 800c128:	687b      	ldr	r3, [r7, #4]
 800c12a:	4a4b      	ldr	r2, [pc, #300]	; (800c258 <HAL_GPIO_Init+0x2f0>)
 800c12c:	4293      	cmp	r3, r2
 800c12e:	d013      	beq.n	800c158 <HAL_GPIO_Init+0x1f0>
 800c130:	687b      	ldr	r3, [r7, #4]
 800c132:	4a4a      	ldr	r2, [pc, #296]	; (800c25c <HAL_GPIO_Init+0x2f4>)
 800c134:	4293      	cmp	r3, r2
 800c136:	d00d      	beq.n	800c154 <HAL_GPIO_Init+0x1ec>
 800c138:	687b      	ldr	r3, [r7, #4]
 800c13a:	4a49      	ldr	r2, [pc, #292]	; (800c260 <HAL_GPIO_Init+0x2f8>)
 800c13c:	4293      	cmp	r3, r2
 800c13e:	d007      	beq.n	800c150 <HAL_GPIO_Init+0x1e8>
 800c140:	687b      	ldr	r3, [r7, #4]
 800c142:	4a48      	ldr	r2, [pc, #288]	; (800c264 <HAL_GPIO_Init+0x2fc>)
 800c144:	4293      	cmp	r3, r2
 800c146:	d101      	bne.n	800c14c <HAL_GPIO_Init+0x1e4>
 800c148:	2305      	movs	r3, #5
 800c14a:	e00a      	b.n	800c162 <HAL_GPIO_Init+0x1fa>
 800c14c:	2306      	movs	r3, #6
 800c14e:	e008      	b.n	800c162 <HAL_GPIO_Init+0x1fa>
 800c150:	2304      	movs	r3, #4
 800c152:	e006      	b.n	800c162 <HAL_GPIO_Init+0x1fa>
 800c154:	2303      	movs	r3, #3
 800c156:	e004      	b.n	800c162 <HAL_GPIO_Init+0x1fa>
 800c158:	2302      	movs	r3, #2
 800c15a:	e002      	b.n	800c162 <HAL_GPIO_Init+0x1fa>
 800c15c:	2301      	movs	r3, #1
 800c15e:	e000      	b.n	800c162 <HAL_GPIO_Init+0x1fa>
 800c160:	2300      	movs	r3, #0
 800c162:	697a      	ldr	r2, [r7, #20]
 800c164:	f002 0203 	and.w	r2, r2, #3
 800c168:	0092      	lsls	r2, r2, #2
 800c16a:	4093      	lsls	r3, r2
 800c16c:	693a      	ldr	r2, [r7, #16]
 800c16e:	4313      	orrs	r3, r2
 800c170:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800c172:	4937      	ldr	r1, [pc, #220]	; (800c250 <HAL_GPIO_Init+0x2e8>)
 800c174:	697b      	ldr	r3, [r7, #20]
 800c176:	089b      	lsrs	r3, r3, #2
 800c178:	3302      	adds	r3, #2
 800c17a:	693a      	ldr	r2, [r7, #16]
 800c17c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800c180:	4b39      	ldr	r3, [pc, #228]	; (800c268 <HAL_GPIO_Init+0x300>)
 800c182:	689b      	ldr	r3, [r3, #8]
 800c184:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800c186:	68fb      	ldr	r3, [r7, #12]
 800c188:	43db      	mvns	r3, r3
 800c18a:	693a      	ldr	r2, [r7, #16]
 800c18c:	4013      	ands	r3, r2
 800c18e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800c190:	683b      	ldr	r3, [r7, #0]
 800c192:	685b      	ldr	r3, [r3, #4]
 800c194:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800c198:	2b00      	cmp	r3, #0
 800c19a:	d003      	beq.n	800c1a4 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 800c19c:	693a      	ldr	r2, [r7, #16]
 800c19e:	68fb      	ldr	r3, [r7, #12]
 800c1a0:	4313      	orrs	r3, r2
 800c1a2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800c1a4:	4a30      	ldr	r2, [pc, #192]	; (800c268 <HAL_GPIO_Init+0x300>)
 800c1a6:	693b      	ldr	r3, [r7, #16]
 800c1a8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800c1aa:	4b2f      	ldr	r3, [pc, #188]	; (800c268 <HAL_GPIO_Init+0x300>)
 800c1ac:	68db      	ldr	r3, [r3, #12]
 800c1ae:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800c1b0:	68fb      	ldr	r3, [r7, #12]
 800c1b2:	43db      	mvns	r3, r3
 800c1b4:	693a      	ldr	r2, [r7, #16]
 800c1b6:	4013      	ands	r3, r2
 800c1b8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800c1ba:	683b      	ldr	r3, [r7, #0]
 800c1bc:	685b      	ldr	r3, [r3, #4]
 800c1be:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800c1c2:	2b00      	cmp	r3, #0
 800c1c4:	d003      	beq.n	800c1ce <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 800c1c6:	693a      	ldr	r2, [r7, #16]
 800c1c8:	68fb      	ldr	r3, [r7, #12]
 800c1ca:	4313      	orrs	r3, r2
 800c1cc:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800c1ce:	4a26      	ldr	r2, [pc, #152]	; (800c268 <HAL_GPIO_Init+0x300>)
 800c1d0:	693b      	ldr	r3, [r7, #16]
 800c1d2:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 800c1d4:	4b24      	ldr	r3, [pc, #144]	; (800c268 <HAL_GPIO_Init+0x300>)
 800c1d6:	685b      	ldr	r3, [r3, #4]
 800c1d8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800c1da:	68fb      	ldr	r3, [r7, #12]
 800c1dc:	43db      	mvns	r3, r3
 800c1de:	693a      	ldr	r2, [r7, #16]
 800c1e0:	4013      	ands	r3, r2
 800c1e2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800c1e4:	683b      	ldr	r3, [r7, #0]
 800c1e6:	685b      	ldr	r3, [r3, #4]
 800c1e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c1ec:	2b00      	cmp	r3, #0
 800c1ee:	d003      	beq.n	800c1f8 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 800c1f0:	693a      	ldr	r2, [r7, #16]
 800c1f2:	68fb      	ldr	r3, [r7, #12]
 800c1f4:	4313      	orrs	r3, r2
 800c1f6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800c1f8:	4a1b      	ldr	r2, [pc, #108]	; (800c268 <HAL_GPIO_Init+0x300>)
 800c1fa:	693b      	ldr	r3, [r7, #16]
 800c1fc:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800c1fe:	4b1a      	ldr	r3, [pc, #104]	; (800c268 <HAL_GPIO_Init+0x300>)
 800c200:	681b      	ldr	r3, [r3, #0]
 800c202:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800c204:	68fb      	ldr	r3, [r7, #12]
 800c206:	43db      	mvns	r3, r3
 800c208:	693a      	ldr	r2, [r7, #16]
 800c20a:	4013      	ands	r3, r2
 800c20c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800c20e:	683b      	ldr	r3, [r7, #0]
 800c210:	685b      	ldr	r3, [r3, #4]
 800c212:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800c216:	2b00      	cmp	r3, #0
 800c218:	d003      	beq.n	800c222 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800c21a:	693a      	ldr	r2, [r7, #16]
 800c21c:	68fb      	ldr	r3, [r7, #12]
 800c21e:	4313      	orrs	r3, r2
 800c220:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800c222:	4a11      	ldr	r2, [pc, #68]	; (800c268 <HAL_GPIO_Init+0x300>)
 800c224:	693b      	ldr	r3, [r7, #16]
 800c226:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800c228:	697b      	ldr	r3, [r7, #20]
 800c22a:	3301      	adds	r3, #1
 800c22c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 800c22e:	683b      	ldr	r3, [r7, #0]
 800c230:	681a      	ldr	r2, [r3, #0]
 800c232:	697b      	ldr	r3, [r7, #20]
 800c234:	fa22 f303 	lsr.w	r3, r2, r3
 800c238:	2b00      	cmp	r3, #0
 800c23a:	f47f ae9d 	bne.w	800bf78 <HAL_GPIO_Init+0x10>
  }
}
 800c23e:	bf00      	nop
 800c240:	bf00      	nop
 800c242:	371c      	adds	r7, #28
 800c244:	46bd      	mov	sp, r7
 800c246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c24a:	4770      	bx	lr
 800c24c:	40021000 	.word	0x40021000
 800c250:	40010000 	.word	0x40010000
 800c254:	48000400 	.word	0x48000400
 800c258:	48000800 	.word	0x48000800
 800c25c:	48000c00 	.word	0x48000c00
 800c260:	48001000 	.word	0x48001000
 800c264:	48001400 	.word	0x48001400
 800c268:	40010400 	.word	0x40010400

0800c26c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800c26c:	b480      	push	{r7}
 800c26e:	b083      	sub	sp, #12
 800c270:	af00      	add	r7, sp, #0
 800c272:	6078      	str	r0, [r7, #4]
 800c274:	460b      	mov	r3, r1
 800c276:	807b      	strh	r3, [r7, #2]
 800c278:	4613      	mov	r3, r2
 800c27a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800c27c:	787b      	ldrb	r3, [r7, #1]
 800c27e:	2b00      	cmp	r3, #0
 800c280:	d003      	beq.n	800c28a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800c282:	887a      	ldrh	r2, [r7, #2]
 800c284:	687b      	ldr	r3, [r7, #4]
 800c286:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800c288:	e002      	b.n	800c290 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800c28a:	887a      	ldrh	r2, [r7, #2]
 800c28c:	687b      	ldr	r3, [r7, #4]
 800c28e:	629a      	str	r2, [r3, #40]	; 0x28
}
 800c290:	bf00      	nop
 800c292:	370c      	adds	r7, #12
 800c294:	46bd      	mov	sp, r7
 800c296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c29a:	4770      	bx	lr

0800c29c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800c29c:	b580      	push	{r7, lr}
 800c29e:	b082      	sub	sp, #8
 800c2a0:	af00      	add	r7, sp, #0
 800c2a2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800c2a4:	687b      	ldr	r3, [r7, #4]
 800c2a6:	2b00      	cmp	r3, #0
 800c2a8:	d101      	bne.n	800c2ae <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800c2aa:	2301      	movs	r3, #1
 800c2ac:	e081      	b.n	800c3b2 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800c2ae:	687b      	ldr	r3, [r7, #4]
 800c2b0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c2b4:	b2db      	uxtb	r3, r3
 800c2b6:	2b00      	cmp	r3, #0
 800c2b8:	d106      	bne.n	800c2c8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800c2ba:	687b      	ldr	r3, [r7, #4]
 800c2bc:	2200      	movs	r2, #0
 800c2be:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800c2c2:	6878      	ldr	r0, [r7, #4]
 800c2c4:	f7fc faac 	bl	8008820 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800c2c8:	687b      	ldr	r3, [r7, #4]
 800c2ca:	2224      	movs	r2, #36	; 0x24
 800c2cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800c2d0:	687b      	ldr	r3, [r7, #4]
 800c2d2:	681b      	ldr	r3, [r3, #0]
 800c2d4:	681a      	ldr	r2, [r3, #0]
 800c2d6:	687b      	ldr	r3, [r7, #4]
 800c2d8:	681b      	ldr	r3, [r3, #0]
 800c2da:	f022 0201 	bic.w	r2, r2, #1
 800c2de:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800c2e0:	687b      	ldr	r3, [r7, #4]
 800c2e2:	685a      	ldr	r2, [r3, #4]
 800c2e4:	687b      	ldr	r3, [r7, #4]
 800c2e6:	681b      	ldr	r3, [r3, #0]
 800c2e8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800c2ec:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800c2ee:	687b      	ldr	r3, [r7, #4]
 800c2f0:	681b      	ldr	r3, [r3, #0]
 800c2f2:	689a      	ldr	r2, [r3, #8]
 800c2f4:	687b      	ldr	r3, [r7, #4]
 800c2f6:	681b      	ldr	r3, [r3, #0]
 800c2f8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800c2fc:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800c2fe:	687b      	ldr	r3, [r7, #4]
 800c300:	68db      	ldr	r3, [r3, #12]
 800c302:	2b01      	cmp	r3, #1
 800c304:	d107      	bne.n	800c316 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800c306:	687b      	ldr	r3, [r7, #4]
 800c308:	689a      	ldr	r2, [r3, #8]
 800c30a:	687b      	ldr	r3, [r7, #4]
 800c30c:	681b      	ldr	r3, [r3, #0]
 800c30e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800c312:	609a      	str	r2, [r3, #8]
 800c314:	e006      	b.n	800c324 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800c316:	687b      	ldr	r3, [r7, #4]
 800c318:	689a      	ldr	r2, [r3, #8]
 800c31a:	687b      	ldr	r3, [r7, #4]
 800c31c:	681b      	ldr	r3, [r3, #0]
 800c31e:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800c322:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800c324:	687b      	ldr	r3, [r7, #4]
 800c326:	68db      	ldr	r3, [r3, #12]
 800c328:	2b02      	cmp	r3, #2
 800c32a:	d104      	bne.n	800c336 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800c32c:	687b      	ldr	r3, [r7, #4]
 800c32e:	681b      	ldr	r3, [r3, #0]
 800c330:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800c334:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800c336:	687b      	ldr	r3, [r7, #4]
 800c338:	681b      	ldr	r3, [r3, #0]
 800c33a:	685b      	ldr	r3, [r3, #4]
 800c33c:	687a      	ldr	r2, [r7, #4]
 800c33e:	6812      	ldr	r2, [r2, #0]
 800c340:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800c344:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800c348:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800c34a:	687b      	ldr	r3, [r7, #4]
 800c34c:	681b      	ldr	r3, [r3, #0]
 800c34e:	68da      	ldr	r2, [r3, #12]
 800c350:	687b      	ldr	r3, [r7, #4]
 800c352:	681b      	ldr	r3, [r3, #0]
 800c354:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800c358:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800c35a:	687b      	ldr	r3, [r7, #4]
 800c35c:	691a      	ldr	r2, [r3, #16]
 800c35e:	687b      	ldr	r3, [r7, #4]
 800c360:	695b      	ldr	r3, [r3, #20]
 800c362:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800c366:	687b      	ldr	r3, [r7, #4]
 800c368:	699b      	ldr	r3, [r3, #24]
 800c36a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800c36c:	687b      	ldr	r3, [r7, #4]
 800c36e:	681b      	ldr	r3, [r3, #0]
 800c370:	430a      	orrs	r2, r1
 800c372:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800c374:	687b      	ldr	r3, [r7, #4]
 800c376:	69d9      	ldr	r1, [r3, #28]
 800c378:	687b      	ldr	r3, [r7, #4]
 800c37a:	6a1a      	ldr	r2, [r3, #32]
 800c37c:	687b      	ldr	r3, [r7, #4]
 800c37e:	681b      	ldr	r3, [r3, #0]
 800c380:	430a      	orrs	r2, r1
 800c382:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800c384:	687b      	ldr	r3, [r7, #4]
 800c386:	681b      	ldr	r3, [r3, #0]
 800c388:	681a      	ldr	r2, [r3, #0]
 800c38a:	687b      	ldr	r3, [r7, #4]
 800c38c:	681b      	ldr	r3, [r3, #0]
 800c38e:	f042 0201 	orr.w	r2, r2, #1
 800c392:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800c394:	687b      	ldr	r3, [r7, #4]
 800c396:	2200      	movs	r2, #0
 800c398:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800c39a:	687b      	ldr	r3, [r7, #4]
 800c39c:	2220      	movs	r2, #32
 800c39e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800c3a2:	687b      	ldr	r3, [r7, #4]
 800c3a4:	2200      	movs	r2, #0
 800c3a6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800c3a8:	687b      	ldr	r3, [r7, #4]
 800c3aa:	2200      	movs	r2, #0
 800c3ac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800c3b0:	2300      	movs	r3, #0
}
 800c3b2:	4618      	mov	r0, r3
 800c3b4:	3708      	adds	r7, #8
 800c3b6:	46bd      	mov	sp, r7
 800c3b8:	bd80      	pop	{r7, pc}
	...

0800c3bc <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800c3bc:	b580      	push	{r7, lr}
 800c3be:	b088      	sub	sp, #32
 800c3c0:	af02      	add	r7, sp, #8
 800c3c2:	60f8      	str	r0, [r7, #12]
 800c3c4:	4608      	mov	r0, r1
 800c3c6:	4611      	mov	r1, r2
 800c3c8:	461a      	mov	r2, r3
 800c3ca:	4603      	mov	r3, r0
 800c3cc:	817b      	strh	r3, [r7, #10]
 800c3ce:	460b      	mov	r3, r1
 800c3d0:	813b      	strh	r3, [r7, #8]
 800c3d2:	4613      	mov	r3, r2
 800c3d4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800c3d6:	68fb      	ldr	r3, [r7, #12]
 800c3d8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c3dc:	b2db      	uxtb	r3, r3
 800c3de:	2b20      	cmp	r3, #32
 800c3e0:	f040 80f9 	bne.w	800c5d6 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 800c3e4:	6a3b      	ldr	r3, [r7, #32]
 800c3e6:	2b00      	cmp	r3, #0
 800c3e8:	d002      	beq.n	800c3f0 <HAL_I2C_Mem_Write+0x34>
 800c3ea:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c3ec:	2b00      	cmp	r3, #0
 800c3ee:	d105      	bne.n	800c3fc <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800c3f0:	68fb      	ldr	r3, [r7, #12]
 800c3f2:	f44f 7200 	mov.w	r2, #512	; 0x200
 800c3f6:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800c3f8:	2301      	movs	r3, #1
 800c3fa:	e0ed      	b.n	800c5d8 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800c3fc:	68fb      	ldr	r3, [r7, #12]
 800c3fe:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800c402:	2b01      	cmp	r3, #1
 800c404:	d101      	bne.n	800c40a <HAL_I2C_Mem_Write+0x4e>
 800c406:	2302      	movs	r3, #2
 800c408:	e0e6      	b.n	800c5d8 <HAL_I2C_Mem_Write+0x21c>
 800c40a:	68fb      	ldr	r3, [r7, #12]
 800c40c:	2201      	movs	r2, #1
 800c40e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800c412:	f7fd fbf1 	bl	8009bf8 <HAL_GetTick>
 800c416:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800c418:	697b      	ldr	r3, [r7, #20]
 800c41a:	9300      	str	r3, [sp, #0]
 800c41c:	2319      	movs	r3, #25
 800c41e:	2201      	movs	r2, #1
 800c420:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800c424:	68f8      	ldr	r0, [r7, #12]
 800c426:	f000 fac3 	bl	800c9b0 <I2C_WaitOnFlagUntilTimeout>
 800c42a:	4603      	mov	r3, r0
 800c42c:	2b00      	cmp	r3, #0
 800c42e:	d001      	beq.n	800c434 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 800c430:	2301      	movs	r3, #1
 800c432:	e0d1      	b.n	800c5d8 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800c434:	68fb      	ldr	r3, [r7, #12]
 800c436:	2221      	movs	r2, #33	; 0x21
 800c438:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800c43c:	68fb      	ldr	r3, [r7, #12]
 800c43e:	2240      	movs	r2, #64	; 0x40
 800c440:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800c444:	68fb      	ldr	r3, [r7, #12]
 800c446:	2200      	movs	r2, #0
 800c448:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800c44a:	68fb      	ldr	r3, [r7, #12]
 800c44c:	6a3a      	ldr	r2, [r7, #32]
 800c44e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800c450:	68fb      	ldr	r3, [r7, #12]
 800c452:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800c454:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800c456:	68fb      	ldr	r3, [r7, #12]
 800c458:	2200      	movs	r2, #0
 800c45a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800c45c:	88f8      	ldrh	r0, [r7, #6]
 800c45e:	893a      	ldrh	r2, [r7, #8]
 800c460:	8979      	ldrh	r1, [r7, #10]
 800c462:	697b      	ldr	r3, [r7, #20]
 800c464:	9301      	str	r3, [sp, #4]
 800c466:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c468:	9300      	str	r3, [sp, #0]
 800c46a:	4603      	mov	r3, r0
 800c46c:	68f8      	ldr	r0, [r7, #12]
 800c46e:	f000 f9d3 	bl	800c818 <I2C_RequestMemoryWrite>
 800c472:	4603      	mov	r3, r0
 800c474:	2b00      	cmp	r3, #0
 800c476:	d005      	beq.n	800c484 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800c478:	68fb      	ldr	r3, [r7, #12]
 800c47a:	2200      	movs	r2, #0
 800c47c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 800c480:	2301      	movs	r3, #1
 800c482:	e0a9      	b.n	800c5d8 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800c484:	68fb      	ldr	r3, [r7, #12]
 800c486:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c488:	b29b      	uxth	r3, r3
 800c48a:	2bff      	cmp	r3, #255	; 0xff
 800c48c:	d90e      	bls.n	800c4ac <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800c48e:	68fb      	ldr	r3, [r7, #12]
 800c490:	22ff      	movs	r2, #255	; 0xff
 800c492:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800c494:	68fb      	ldr	r3, [r7, #12]
 800c496:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c498:	b2da      	uxtb	r2, r3
 800c49a:	8979      	ldrh	r1, [r7, #10]
 800c49c:	2300      	movs	r3, #0
 800c49e:	9300      	str	r3, [sp, #0]
 800c4a0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800c4a4:	68f8      	ldr	r0, [r7, #12]
 800c4a6:	f000 fc2b 	bl	800cd00 <I2C_TransferConfig>
 800c4aa:	e00f      	b.n	800c4cc <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800c4ac:	68fb      	ldr	r3, [r7, #12]
 800c4ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c4b0:	b29a      	uxth	r2, r3
 800c4b2:	68fb      	ldr	r3, [r7, #12]
 800c4b4:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800c4b6:	68fb      	ldr	r3, [r7, #12]
 800c4b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c4ba:	b2da      	uxtb	r2, r3
 800c4bc:	8979      	ldrh	r1, [r7, #10]
 800c4be:	2300      	movs	r3, #0
 800c4c0:	9300      	str	r3, [sp, #0]
 800c4c2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800c4c6:	68f8      	ldr	r0, [r7, #12]
 800c4c8:	f000 fc1a 	bl	800cd00 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800c4cc:	697a      	ldr	r2, [r7, #20]
 800c4ce:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800c4d0:	68f8      	ldr	r0, [r7, #12]
 800c4d2:	f000 faad 	bl	800ca30 <I2C_WaitOnTXISFlagUntilTimeout>
 800c4d6:	4603      	mov	r3, r0
 800c4d8:	2b00      	cmp	r3, #0
 800c4da:	d001      	beq.n	800c4e0 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 800c4dc:	2301      	movs	r3, #1
 800c4de:	e07b      	b.n	800c5d8 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800c4e0:	68fb      	ldr	r3, [r7, #12]
 800c4e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c4e4:	781a      	ldrb	r2, [r3, #0]
 800c4e6:	68fb      	ldr	r3, [r7, #12]
 800c4e8:	681b      	ldr	r3, [r3, #0]
 800c4ea:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800c4ec:	68fb      	ldr	r3, [r7, #12]
 800c4ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c4f0:	1c5a      	adds	r2, r3, #1
 800c4f2:	68fb      	ldr	r3, [r7, #12]
 800c4f4:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800c4f6:	68fb      	ldr	r3, [r7, #12]
 800c4f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c4fa:	b29b      	uxth	r3, r3
 800c4fc:	3b01      	subs	r3, #1
 800c4fe:	b29a      	uxth	r2, r3
 800c500:	68fb      	ldr	r3, [r7, #12]
 800c502:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800c504:	68fb      	ldr	r3, [r7, #12]
 800c506:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c508:	3b01      	subs	r3, #1
 800c50a:	b29a      	uxth	r2, r3
 800c50c:	68fb      	ldr	r3, [r7, #12]
 800c50e:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800c510:	68fb      	ldr	r3, [r7, #12]
 800c512:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c514:	b29b      	uxth	r3, r3
 800c516:	2b00      	cmp	r3, #0
 800c518:	d034      	beq.n	800c584 <HAL_I2C_Mem_Write+0x1c8>
 800c51a:	68fb      	ldr	r3, [r7, #12]
 800c51c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c51e:	2b00      	cmp	r3, #0
 800c520:	d130      	bne.n	800c584 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800c522:	697b      	ldr	r3, [r7, #20]
 800c524:	9300      	str	r3, [sp, #0]
 800c526:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c528:	2200      	movs	r2, #0
 800c52a:	2180      	movs	r1, #128	; 0x80
 800c52c:	68f8      	ldr	r0, [r7, #12]
 800c52e:	f000 fa3f 	bl	800c9b0 <I2C_WaitOnFlagUntilTimeout>
 800c532:	4603      	mov	r3, r0
 800c534:	2b00      	cmp	r3, #0
 800c536:	d001      	beq.n	800c53c <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 800c538:	2301      	movs	r3, #1
 800c53a:	e04d      	b.n	800c5d8 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800c53c:	68fb      	ldr	r3, [r7, #12]
 800c53e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c540:	b29b      	uxth	r3, r3
 800c542:	2bff      	cmp	r3, #255	; 0xff
 800c544:	d90e      	bls.n	800c564 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800c546:	68fb      	ldr	r3, [r7, #12]
 800c548:	22ff      	movs	r2, #255	; 0xff
 800c54a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800c54c:	68fb      	ldr	r3, [r7, #12]
 800c54e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c550:	b2da      	uxtb	r2, r3
 800c552:	8979      	ldrh	r1, [r7, #10]
 800c554:	2300      	movs	r3, #0
 800c556:	9300      	str	r3, [sp, #0]
 800c558:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800c55c:	68f8      	ldr	r0, [r7, #12]
 800c55e:	f000 fbcf 	bl	800cd00 <I2C_TransferConfig>
 800c562:	e00f      	b.n	800c584 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800c564:	68fb      	ldr	r3, [r7, #12]
 800c566:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c568:	b29a      	uxth	r2, r3
 800c56a:	68fb      	ldr	r3, [r7, #12]
 800c56c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800c56e:	68fb      	ldr	r3, [r7, #12]
 800c570:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c572:	b2da      	uxtb	r2, r3
 800c574:	8979      	ldrh	r1, [r7, #10]
 800c576:	2300      	movs	r3, #0
 800c578:	9300      	str	r3, [sp, #0]
 800c57a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800c57e:	68f8      	ldr	r0, [r7, #12]
 800c580:	f000 fbbe 	bl	800cd00 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 800c584:	68fb      	ldr	r3, [r7, #12]
 800c586:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c588:	b29b      	uxth	r3, r3
 800c58a:	2b00      	cmp	r3, #0
 800c58c:	d19e      	bne.n	800c4cc <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800c58e:	697a      	ldr	r2, [r7, #20]
 800c590:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800c592:	68f8      	ldr	r0, [r7, #12]
 800c594:	f000 fa8c 	bl	800cab0 <I2C_WaitOnSTOPFlagUntilTimeout>
 800c598:	4603      	mov	r3, r0
 800c59a:	2b00      	cmp	r3, #0
 800c59c:	d001      	beq.n	800c5a2 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 800c59e:	2301      	movs	r3, #1
 800c5a0:	e01a      	b.n	800c5d8 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800c5a2:	68fb      	ldr	r3, [r7, #12]
 800c5a4:	681b      	ldr	r3, [r3, #0]
 800c5a6:	2220      	movs	r2, #32
 800c5a8:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800c5aa:	68fb      	ldr	r3, [r7, #12]
 800c5ac:	681b      	ldr	r3, [r3, #0]
 800c5ae:	6859      	ldr	r1, [r3, #4]
 800c5b0:	68fb      	ldr	r3, [r7, #12]
 800c5b2:	681a      	ldr	r2, [r3, #0]
 800c5b4:	4b0a      	ldr	r3, [pc, #40]	; (800c5e0 <HAL_I2C_Mem_Write+0x224>)
 800c5b6:	400b      	ands	r3, r1
 800c5b8:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800c5ba:	68fb      	ldr	r3, [r7, #12]
 800c5bc:	2220      	movs	r2, #32
 800c5be:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800c5c2:	68fb      	ldr	r3, [r7, #12]
 800c5c4:	2200      	movs	r2, #0
 800c5c6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800c5ca:	68fb      	ldr	r3, [r7, #12]
 800c5cc:	2200      	movs	r2, #0
 800c5ce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800c5d2:	2300      	movs	r3, #0
 800c5d4:	e000      	b.n	800c5d8 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 800c5d6:	2302      	movs	r3, #2
  }
}
 800c5d8:	4618      	mov	r0, r3
 800c5da:	3718      	adds	r7, #24
 800c5dc:	46bd      	mov	sp, r7
 800c5de:	bd80      	pop	{r7, pc}
 800c5e0:	fe00e800 	.word	0xfe00e800

0800c5e4 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800c5e4:	b580      	push	{r7, lr}
 800c5e6:	b088      	sub	sp, #32
 800c5e8:	af02      	add	r7, sp, #8
 800c5ea:	60f8      	str	r0, [r7, #12]
 800c5ec:	4608      	mov	r0, r1
 800c5ee:	4611      	mov	r1, r2
 800c5f0:	461a      	mov	r2, r3
 800c5f2:	4603      	mov	r3, r0
 800c5f4:	817b      	strh	r3, [r7, #10]
 800c5f6:	460b      	mov	r3, r1
 800c5f8:	813b      	strh	r3, [r7, #8]
 800c5fa:	4613      	mov	r3, r2
 800c5fc:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800c5fe:	68fb      	ldr	r3, [r7, #12]
 800c600:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c604:	b2db      	uxtb	r3, r3
 800c606:	2b20      	cmp	r3, #32
 800c608:	f040 80fd 	bne.w	800c806 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 800c60c:	6a3b      	ldr	r3, [r7, #32]
 800c60e:	2b00      	cmp	r3, #0
 800c610:	d002      	beq.n	800c618 <HAL_I2C_Mem_Read+0x34>
 800c612:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c614:	2b00      	cmp	r3, #0
 800c616:	d105      	bne.n	800c624 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800c618:	68fb      	ldr	r3, [r7, #12]
 800c61a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800c61e:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800c620:	2301      	movs	r3, #1
 800c622:	e0f1      	b.n	800c808 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800c624:	68fb      	ldr	r3, [r7, #12]
 800c626:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800c62a:	2b01      	cmp	r3, #1
 800c62c:	d101      	bne.n	800c632 <HAL_I2C_Mem_Read+0x4e>
 800c62e:	2302      	movs	r3, #2
 800c630:	e0ea      	b.n	800c808 <HAL_I2C_Mem_Read+0x224>
 800c632:	68fb      	ldr	r3, [r7, #12]
 800c634:	2201      	movs	r2, #1
 800c636:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800c63a:	f7fd fadd 	bl	8009bf8 <HAL_GetTick>
 800c63e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800c640:	697b      	ldr	r3, [r7, #20]
 800c642:	9300      	str	r3, [sp, #0]
 800c644:	2319      	movs	r3, #25
 800c646:	2201      	movs	r2, #1
 800c648:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800c64c:	68f8      	ldr	r0, [r7, #12]
 800c64e:	f000 f9af 	bl	800c9b0 <I2C_WaitOnFlagUntilTimeout>
 800c652:	4603      	mov	r3, r0
 800c654:	2b00      	cmp	r3, #0
 800c656:	d001      	beq.n	800c65c <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 800c658:	2301      	movs	r3, #1
 800c65a:	e0d5      	b.n	800c808 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800c65c:	68fb      	ldr	r3, [r7, #12]
 800c65e:	2222      	movs	r2, #34	; 0x22
 800c660:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800c664:	68fb      	ldr	r3, [r7, #12]
 800c666:	2240      	movs	r2, #64	; 0x40
 800c668:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800c66c:	68fb      	ldr	r3, [r7, #12]
 800c66e:	2200      	movs	r2, #0
 800c670:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800c672:	68fb      	ldr	r3, [r7, #12]
 800c674:	6a3a      	ldr	r2, [r7, #32]
 800c676:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800c678:	68fb      	ldr	r3, [r7, #12]
 800c67a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800c67c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800c67e:	68fb      	ldr	r3, [r7, #12]
 800c680:	2200      	movs	r2, #0
 800c682:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800c684:	88f8      	ldrh	r0, [r7, #6]
 800c686:	893a      	ldrh	r2, [r7, #8]
 800c688:	8979      	ldrh	r1, [r7, #10]
 800c68a:	697b      	ldr	r3, [r7, #20]
 800c68c:	9301      	str	r3, [sp, #4]
 800c68e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c690:	9300      	str	r3, [sp, #0]
 800c692:	4603      	mov	r3, r0
 800c694:	68f8      	ldr	r0, [r7, #12]
 800c696:	f000 f913 	bl	800c8c0 <I2C_RequestMemoryRead>
 800c69a:	4603      	mov	r3, r0
 800c69c:	2b00      	cmp	r3, #0
 800c69e:	d005      	beq.n	800c6ac <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800c6a0:	68fb      	ldr	r3, [r7, #12]
 800c6a2:	2200      	movs	r2, #0
 800c6a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 800c6a8:	2301      	movs	r3, #1
 800c6aa:	e0ad      	b.n	800c808 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800c6ac:	68fb      	ldr	r3, [r7, #12]
 800c6ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c6b0:	b29b      	uxth	r3, r3
 800c6b2:	2bff      	cmp	r3, #255	; 0xff
 800c6b4:	d90e      	bls.n	800c6d4 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800c6b6:	68fb      	ldr	r3, [r7, #12]
 800c6b8:	22ff      	movs	r2, #255	; 0xff
 800c6ba:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800c6bc:	68fb      	ldr	r3, [r7, #12]
 800c6be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c6c0:	b2da      	uxtb	r2, r3
 800c6c2:	8979      	ldrh	r1, [r7, #10]
 800c6c4:	4b52      	ldr	r3, [pc, #328]	; (800c810 <HAL_I2C_Mem_Read+0x22c>)
 800c6c6:	9300      	str	r3, [sp, #0]
 800c6c8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800c6cc:	68f8      	ldr	r0, [r7, #12]
 800c6ce:	f000 fb17 	bl	800cd00 <I2C_TransferConfig>
 800c6d2:	e00f      	b.n	800c6f4 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800c6d4:	68fb      	ldr	r3, [r7, #12]
 800c6d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c6d8:	b29a      	uxth	r2, r3
 800c6da:	68fb      	ldr	r3, [r7, #12]
 800c6dc:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800c6de:	68fb      	ldr	r3, [r7, #12]
 800c6e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c6e2:	b2da      	uxtb	r2, r3
 800c6e4:	8979      	ldrh	r1, [r7, #10]
 800c6e6:	4b4a      	ldr	r3, [pc, #296]	; (800c810 <HAL_I2C_Mem_Read+0x22c>)
 800c6e8:	9300      	str	r3, [sp, #0]
 800c6ea:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800c6ee:	68f8      	ldr	r0, [r7, #12]
 800c6f0:	f000 fb06 	bl	800cd00 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 800c6f4:	697b      	ldr	r3, [r7, #20]
 800c6f6:	9300      	str	r3, [sp, #0]
 800c6f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c6fa:	2200      	movs	r2, #0
 800c6fc:	2104      	movs	r1, #4
 800c6fe:	68f8      	ldr	r0, [r7, #12]
 800c700:	f000 f956 	bl	800c9b0 <I2C_WaitOnFlagUntilTimeout>
 800c704:	4603      	mov	r3, r0
 800c706:	2b00      	cmp	r3, #0
 800c708:	d001      	beq.n	800c70e <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 800c70a:	2301      	movs	r3, #1
 800c70c:	e07c      	b.n	800c808 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800c70e:	68fb      	ldr	r3, [r7, #12]
 800c710:	681b      	ldr	r3, [r3, #0]
 800c712:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c714:	68fb      	ldr	r3, [r7, #12]
 800c716:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c718:	b2d2      	uxtb	r2, r2
 800c71a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800c71c:	68fb      	ldr	r3, [r7, #12]
 800c71e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c720:	1c5a      	adds	r2, r3, #1
 800c722:	68fb      	ldr	r3, [r7, #12]
 800c724:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800c726:	68fb      	ldr	r3, [r7, #12]
 800c728:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c72a:	3b01      	subs	r3, #1
 800c72c:	b29a      	uxth	r2, r3
 800c72e:	68fb      	ldr	r3, [r7, #12]
 800c730:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800c732:	68fb      	ldr	r3, [r7, #12]
 800c734:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c736:	b29b      	uxth	r3, r3
 800c738:	3b01      	subs	r3, #1
 800c73a:	b29a      	uxth	r2, r3
 800c73c:	68fb      	ldr	r3, [r7, #12]
 800c73e:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800c740:	68fb      	ldr	r3, [r7, #12]
 800c742:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c744:	b29b      	uxth	r3, r3
 800c746:	2b00      	cmp	r3, #0
 800c748:	d034      	beq.n	800c7b4 <HAL_I2C_Mem_Read+0x1d0>
 800c74a:	68fb      	ldr	r3, [r7, #12]
 800c74c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c74e:	2b00      	cmp	r3, #0
 800c750:	d130      	bne.n	800c7b4 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800c752:	697b      	ldr	r3, [r7, #20]
 800c754:	9300      	str	r3, [sp, #0]
 800c756:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c758:	2200      	movs	r2, #0
 800c75a:	2180      	movs	r1, #128	; 0x80
 800c75c:	68f8      	ldr	r0, [r7, #12]
 800c75e:	f000 f927 	bl	800c9b0 <I2C_WaitOnFlagUntilTimeout>
 800c762:	4603      	mov	r3, r0
 800c764:	2b00      	cmp	r3, #0
 800c766:	d001      	beq.n	800c76c <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 800c768:	2301      	movs	r3, #1
 800c76a:	e04d      	b.n	800c808 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800c76c:	68fb      	ldr	r3, [r7, #12]
 800c76e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c770:	b29b      	uxth	r3, r3
 800c772:	2bff      	cmp	r3, #255	; 0xff
 800c774:	d90e      	bls.n	800c794 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800c776:	68fb      	ldr	r3, [r7, #12]
 800c778:	22ff      	movs	r2, #255	; 0xff
 800c77a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 800c77c:	68fb      	ldr	r3, [r7, #12]
 800c77e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c780:	b2da      	uxtb	r2, r3
 800c782:	8979      	ldrh	r1, [r7, #10]
 800c784:	2300      	movs	r3, #0
 800c786:	9300      	str	r3, [sp, #0]
 800c788:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800c78c:	68f8      	ldr	r0, [r7, #12]
 800c78e:	f000 fab7 	bl	800cd00 <I2C_TransferConfig>
 800c792:	e00f      	b.n	800c7b4 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800c794:	68fb      	ldr	r3, [r7, #12]
 800c796:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c798:	b29a      	uxth	r2, r3
 800c79a:	68fb      	ldr	r3, [r7, #12]
 800c79c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800c79e:	68fb      	ldr	r3, [r7, #12]
 800c7a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c7a2:	b2da      	uxtb	r2, r3
 800c7a4:	8979      	ldrh	r1, [r7, #10]
 800c7a6:	2300      	movs	r3, #0
 800c7a8:	9300      	str	r3, [sp, #0]
 800c7aa:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800c7ae:	68f8      	ldr	r0, [r7, #12]
 800c7b0:	f000 faa6 	bl	800cd00 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 800c7b4:	68fb      	ldr	r3, [r7, #12]
 800c7b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c7b8:	b29b      	uxth	r3, r3
 800c7ba:	2b00      	cmp	r3, #0
 800c7bc:	d19a      	bne.n	800c6f4 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800c7be:	697a      	ldr	r2, [r7, #20]
 800c7c0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800c7c2:	68f8      	ldr	r0, [r7, #12]
 800c7c4:	f000 f974 	bl	800cab0 <I2C_WaitOnSTOPFlagUntilTimeout>
 800c7c8:	4603      	mov	r3, r0
 800c7ca:	2b00      	cmp	r3, #0
 800c7cc:	d001      	beq.n	800c7d2 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 800c7ce:	2301      	movs	r3, #1
 800c7d0:	e01a      	b.n	800c808 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800c7d2:	68fb      	ldr	r3, [r7, #12]
 800c7d4:	681b      	ldr	r3, [r3, #0]
 800c7d6:	2220      	movs	r2, #32
 800c7d8:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800c7da:	68fb      	ldr	r3, [r7, #12]
 800c7dc:	681b      	ldr	r3, [r3, #0]
 800c7de:	6859      	ldr	r1, [r3, #4]
 800c7e0:	68fb      	ldr	r3, [r7, #12]
 800c7e2:	681a      	ldr	r2, [r3, #0]
 800c7e4:	4b0b      	ldr	r3, [pc, #44]	; (800c814 <HAL_I2C_Mem_Read+0x230>)
 800c7e6:	400b      	ands	r3, r1
 800c7e8:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800c7ea:	68fb      	ldr	r3, [r7, #12]
 800c7ec:	2220      	movs	r2, #32
 800c7ee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800c7f2:	68fb      	ldr	r3, [r7, #12]
 800c7f4:	2200      	movs	r2, #0
 800c7f6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800c7fa:	68fb      	ldr	r3, [r7, #12]
 800c7fc:	2200      	movs	r2, #0
 800c7fe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800c802:	2300      	movs	r3, #0
 800c804:	e000      	b.n	800c808 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 800c806:	2302      	movs	r3, #2
  }
}
 800c808:	4618      	mov	r0, r3
 800c80a:	3718      	adds	r7, #24
 800c80c:	46bd      	mov	sp, r7
 800c80e:	bd80      	pop	{r7, pc}
 800c810:	80002400 	.word	0x80002400
 800c814:	fe00e800 	.word	0xfe00e800

0800c818 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 800c818:	b580      	push	{r7, lr}
 800c81a:	b086      	sub	sp, #24
 800c81c:	af02      	add	r7, sp, #8
 800c81e:	60f8      	str	r0, [r7, #12]
 800c820:	4608      	mov	r0, r1
 800c822:	4611      	mov	r1, r2
 800c824:	461a      	mov	r2, r3
 800c826:	4603      	mov	r3, r0
 800c828:	817b      	strh	r3, [r7, #10]
 800c82a:	460b      	mov	r3, r1
 800c82c:	813b      	strh	r3, [r7, #8]
 800c82e:	4613      	mov	r3, r2
 800c830:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800c832:	88fb      	ldrh	r3, [r7, #6]
 800c834:	b2da      	uxtb	r2, r3
 800c836:	8979      	ldrh	r1, [r7, #10]
 800c838:	4b20      	ldr	r3, [pc, #128]	; (800c8bc <I2C_RequestMemoryWrite+0xa4>)
 800c83a:	9300      	str	r3, [sp, #0]
 800c83c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800c840:	68f8      	ldr	r0, [r7, #12]
 800c842:	f000 fa5d 	bl	800cd00 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800c846:	69fa      	ldr	r2, [r7, #28]
 800c848:	69b9      	ldr	r1, [r7, #24]
 800c84a:	68f8      	ldr	r0, [r7, #12]
 800c84c:	f000 f8f0 	bl	800ca30 <I2C_WaitOnTXISFlagUntilTimeout>
 800c850:	4603      	mov	r3, r0
 800c852:	2b00      	cmp	r3, #0
 800c854:	d001      	beq.n	800c85a <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 800c856:	2301      	movs	r3, #1
 800c858:	e02c      	b.n	800c8b4 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800c85a:	88fb      	ldrh	r3, [r7, #6]
 800c85c:	2b01      	cmp	r3, #1
 800c85e:	d105      	bne.n	800c86c <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800c860:	893b      	ldrh	r3, [r7, #8]
 800c862:	b2da      	uxtb	r2, r3
 800c864:	68fb      	ldr	r3, [r7, #12]
 800c866:	681b      	ldr	r3, [r3, #0]
 800c868:	629a      	str	r2, [r3, #40]	; 0x28
 800c86a:	e015      	b.n	800c898 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800c86c:	893b      	ldrh	r3, [r7, #8]
 800c86e:	0a1b      	lsrs	r3, r3, #8
 800c870:	b29b      	uxth	r3, r3
 800c872:	b2da      	uxtb	r2, r3
 800c874:	68fb      	ldr	r3, [r7, #12]
 800c876:	681b      	ldr	r3, [r3, #0]
 800c878:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800c87a:	69fa      	ldr	r2, [r7, #28]
 800c87c:	69b9      	ldr	r1, [r7, #24]
 800c87e:	68f8      	ldr	r0, [r7, #12]
 800c880:	f000 f8d6 	bl	800ca30 <I2C_WaitOnTXISFlagUntilTimeout>
 800c884:	4603      	mov	r3, r0
 800c886:	2b00      	cmp	r3, #0
 800c888:	d001      	beq.n	800c88e <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 800c88a:	2301      	movs	r3, #1
 800c88c:	e012      	b.n	800c8b4 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800c88e:	893b      	ldrh	r3, [r7, #8]
 800c890:	b2da      	uxtb	r2, r3
 800c892:	68fb      	ldr	r3, [r7, #12]
 800c894:	681b      	ldr	r3, [r3, #0]
 800c896:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 800c898:	69fb      	ldr	r3, [r7, #28]
 800c89a:	9300      	str	r3, [sp, #0]
 800c89c:	69bb      	ldr	r3, [r7, #24]
 800c89e:	2200      	movs	r2, #0
 800c8a0:	2180      	movs	r1, #128	; 0x80
 800c8a2:	68f8      	ldr	r0, [r7, #12]
 800c8a4:	f000 f884 	bl	800c9b0 <I2C_WaitOnFlagUntilTimeout>
 800c8a8:	4603      	mov	r3, r0
 800c8aa:	2b00      	cmp	r3, #0
 800c8ac:	d001      	beq.n	800c8b2 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 800c8ae:	2301      	movs	r3, #1
 800c8b0:	e000      	b.n	800c8b4 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 800c8b2:	2300      	movs	r3, #0
}
 800c8b4:	4618      	mov	r0, r3
 800c8b6:	3710      	adds	r7, #16
 800c8b8:	46bd      	mov	sp, r7
 800c8ba:	bd80      	pop	{r7, pc}
 800c8bc:	80002000 	.word	0x80002000

0800c8c0 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 800c8c0:	b580      	push	{r7, lr}
 800c8c2:	b086      	sub	sp, #24
 800c8c4:	af02      	add	r7, sp, #8
 800c8c6:	60f8      	str	r0, [r7, #12]
 800c8c8:	4608      	mov	r0, r1
 800c8ca:	4611      	mov	r1, r2
 800c8cc:	461a      	mov	r2, r3
 800c8ce:	4603      	mov	r3, r0
 800c8d0:	817b      	strh	r3, [r7, #10]
 800c8d2:	460b      	mov	r3, r1
 800c8d4:	813b      	strh	r3, [r7, #8]
 800c8d6:	4613      	mov	r3, r2
 800c8d8:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800c8da:	88fb      	ldrh	r3, [r7, #6]
 800c8dc:	b2da      	uxtb	r2, r3
 800c8de:	8979      	ldrh	r1, [r7, #10]
 800c8e0:	4b20      	ldr	r3, [pc, #128]	; (800c964 <I2C_RequestMemoryRead+0xa4>)
 800c8e2:	9300      	str	r3, [sp, #0]
 800c8e4:	2300      	movs	r3, #0
 800c8e6:	68f8      	ldr	r0, [r7, #12]
 800c8e8:	f000 fa0a 	bl	800cd00 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800c8ec:	69fa      	ldr	r2, [r7, #28]
 800c8ee:	69b9      	ldr	r1, [r7, #24]
 800c8f0:	68f8      	ldr	r0, [r7, #12]
 800c8f2:	f000 f89d 	bl	800ca30 <I2C_WaitOnTXISFlagUntilTimeout>
 800c8f6:	4603      	mov	r3, r0
 800c8f8:	2b00      	cmp	r3, #0
 800c8fa:	d001      	beq.n	800c900 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 800c8fc:	2301      	movs	r3, #1
 800c8fe:	e02c      	b.n	800c95a <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800c900:	88fb      	ldrh	r3, [r7, #6]
 800c902:	2b01      	cmp	r3, #1
 800c904:	d105      	bne.n	800c912 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800c906:	893b      	ldrh	r3, [r7, #8]
 800c908:	b2da      	uxtb	r2, r3
 800c90a:	68fb      	ldr	r3, [r7, #12]
 800c90c:	681b      	ldr	r3, [r3, #0]
 800c90e:	629a      	str	r2, [r3, #40]	; 0x28
 800c910:	e015      	b.n	800c93e <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800c912:	893b      	ldrh	r3, [r7, #8]
 800c914:	0a1b      	lsrs	r3, r3, #8
 800c916:	b29b      	uxth	r3, r3
 800c918:	b2da      	uxtb	r2, r3
 800c91a:	68fb      	ldr	r3, [r7, #12]
 800c91c:	681b      	ldr	r3, [r3, #0]
 800c91e:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800c920:	69fa      	ldr	r2, [r7, #28]
 800c922:	69b9      	ldr	r1, [r7, #24]
 800c924:	68f8      	ldr	r0, [r7, #12]
 800c926:	f000 f883 	bl	800ca30 <I2C_WaitOnTXISFlagUntilTimeout>
 800c92a:	4603      	mov	r3, r0
 800c92c:	2b00      	cmp	r3, #0
 800c92e:	d001      	beq.n	800c934 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 800c930:	2301      	movs	r3, #1
 800c932:	e012      	b.n	800c95a <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800c934:	893b      	ldrh	r3, [r7, #8]
 800c936:	b2da      	uxtb	r2, r3
 800c938:	68fb      	ldr	r3, [r7, #12]
 800c93a:	681b      	ldr	r3, [r3, #0]
 800c93c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800c93e:	69fb      	ldr	r3, [r7, #28]
 800c940:	9300      	str	r3, [sp, #0]
 800c942:	69bb      	ldr	r3, [r7, #24]
 800c944:	2200      	movs	r2, #0
 800c946:	2140      	movs	r1, #64	; 0x40
 800c948:	68f8      	ldr	r0, [r7, #12]
 800c94a:	f000 f831 	bl	800c9b0 <I2C_WaitOnFlagUntilTimeout>
 800c94e:	4603      	mov	r3, r0
 800c950:	2b00      	cmp	r3, #0
 800c952:	d001      	beq.n	800c958 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 800c954:	2301      	movs	r3, #1
 800c956:	e000      	b.n	800c95a <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 800c958:	2300      	movs	r3, #0
}
 800c95a:	4618      	mov	r0, r3
 800c95c:	3710      	adds	r7, #16
 800c95e:	46bd      	mov	sp, r7
 800c960:	bd80      	pop	{r7, pc}
 800c962:	bf00      	nop
 800c964:	80002000 	.word	0x80002000

0800c968 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800c968:	b480      	push	{r7}
 800c96a:	b083      	sub	sp, #12
 800c96c:	af00      	add	r7, sp, #0
 800c96e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800c970:	687b      	ldr	r3, [r7, #4]
 800c972:	681b      	ldr	r3, [r3, #0]
 800c974:	699b      	ldr	r3, [r3, #24]
 800c976:	f003 0302 	and.w	r3, r3, #2
 800c97a:	2b02      	cmp	r3, #2
 800c97c:	d103      	bne.n	800c986 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800c97e:	687b      	ldr	r3, [r7, #4]
 800c980:	681b      	ldr	r3, [r3, #0]
 800c982:	2200      	movs	r2, #0
 800c984:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800c986:	687b      	ldr	r3, [r7, #4]
 800c988:	681b      	ldr	r3, [r3, #0]
 800c98a:	699b      	ldr	r3, [r3, #24]
 800c98c:	f003 0301 	and.w	r3, r3, #1
 800c990:	2b01      	cmp	r3, #1
 800c992:	d007      	beq.n	800c9a4 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800c994:	687b      	ldr	r3, [r7, #4]
 800c996:	681b      	ldr	r3, [r3, #0]
 800c998:	699a      	ldr	r2, [r3, #24]
 800c99a:	687b      	ldr	r3, [r7, #4]
 800c99c:	681b      	ldr	r3, [r3, #0]
 800c99e:	f042 0201 	orr.w	r2, r2, #1
 800c9a2:	619a      	str	r2, [r3, #24]
  }
}
 800c9a4:	bf00      	nop
 800c9a6:	370c      	adds	r7, #12
 800c9a8:	46bd      	mov	sp, r7
 800c9aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9ae:	4770      	bx	lr

0800c9b0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800c9b0:	b580      	push	{r7, lr}
 800c9b2:	b084      	sub	sp, #16
 800c9b4:	af00      	add	r7, sp, #0
 800c9b6:	60f8      	str	r0, [r7, #12]
 800c9b8:	60b9      	str	r1, [r7, #8]
 800c9ba:	603b      	str	r3, [r7, #0]
 800c9bc:	4613      	mov	r3, r2
 800c9be:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800c9c0:	e022      	b.n	800ca08 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800c9c2:	683b      	ldr	r3, [r7, #0]
 800c9c4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c9c8:	d01e      	beq.n	800ca08 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c9ca:	f7fd f915 	bl	8009bf8 <HAL_GetTick>
 800c9ce:	4602      	mov	r2, r0
 800c9d0:	69bb      	ldr	r3, [r7, #24]
 800c9d2:	1ad3      	subs	r3, r2, r3
 800c9d4:	683a      	ldr	r2, [r7, #0]
 800c9d6:	429a      	cmp	r2, r3
 800c9d8:	d302      	bcc.n	800c9e0 <I2C_WaitOnFlagUntilTimeout+0x30>
 800c9da:	683b      	ldr	r3, [r7, #0]
 800c9dc:	2b00      	cmp	r3, #0
 800c9de:	d113      	bne.n	800ca08 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800c9e0:	68fb      	ldr	r3, [r7, #12]
 800c9e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c9e4:	f043 0220 	orr.w	r2, r3, #32
 800c9e8:	68fb      	ldr	r3, [r7, #12]
 800c9ea:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800c9ec:	68fb      	ldr	r3, [r7, #12]
 800c9ee:	2220      	movs	r2, #32
 800c9f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800c9f4:	68fb      	ldr	r3, [r7, #12]
 800c9f6:	2200      	movs	r2, #0
 800c9f8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800c9fc:	68fb      	ldr	r3, [r7, #12]
 800c9fe:	2200      	movs	r2, #0
 800ca00:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 800ca04:	2301      	movs	r3, #1
 800ca06:	e00f      	b.n	800ca28 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800ca08:	68fb      	ldr	r3, [r7, #12]
 800ca0a:	681b      	ldr	r3, [r3, #0]
 800ca0c:	699a      	ldr	r2, [r3, #24]
 800ca0e:	68bb      	ldr	r3, [r7, #8]
 800ca10:	4013      	ands	r3, r2
 800ca12:	68ba      	ldr	r2, [r7, #8]
 800ca14:	429a      	cmp	r2, r3
 800ca16:	bf0c      	ite	eq
 800ca18:	2301      	moveq	r3, #1
 800ca1a:	2300      	movne	r3, #0
 800ca1c:	b2db      	uxtb	r3, r3
 800ca1e:	461a      	mov	r2, r3
 800ca20:	79fb      	ldrb	r3, [r7, #7]
 800ca22:	429a      	cmp	r2, r3
 800ca24:	d0cd      	beq.n	800c9c2 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800ca26:	2300      	movs	r3, #0
}
 800ca28:	4618      	mov	r0, r3
 800ca2a:	3710      	adds	r7, #16
 800ca2c:	46bd      	mov	sp, r7
 800ca2e:	bd80      	pop	{r7, pc}

0800ca30 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800ca30:	b580      	push	{r7, lr}
 800ca32:	b084      	sub	sp, #16
 800ca34:	af00      	add	r7, sp, #0
 800ca36:	60f8      	str	r0, [r7, #12]
 800ca38:	60b9      	str	r1, [r7, #8]
 800ca3a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800ca3c:	e02c      	b.n	800ca98 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800ca3e:	687a      	ldr	r2, [r7, #4]
 800ca40:	68b9      	ldr	r1, [r7, #8]
 800ca42:	68f8      	ldr	r0, [r7, #12]
 800ca44:	f000 f870 	bl	800cb28 <I2C_IsErrorOccurred>
 800ca48:	4603      	mov	r3, r0
 800ca4a:	2b00      	cmp	r3, #0
 800ca4c:	d001      	beq.n	800ca52 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800ca4e:	2301      	movs	r3, #1
 800ca50:	e02a      	b.n	800caa8 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800ca52:	68bb      	ldr	r3, [r7, #8]
 800ca54:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ca58:	d01e      	beq.n	800ca98 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800ca5a:	f7fd f8cd 	bl	8009bf8 <HAL_GetTick>
 800ca5e:	4602      	mov	r2, r0
 800ca60:	687b      	ldr	r3, [r7, #4]
 800ca62:	1ad3      	subs	r3, r2, r3
 800ca64:	68ba      	ldr	r2, [r7, #8]
 800ca66:	429a      	cmp	r2, r3
 800ca68:	d302      	bcc.n	800ca70 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800ca6a:	68bb      	ldr	r3, [r7, #8]
 800ca6c:	2b00      	cmp	r3, #0
 800ca6e:	d113      	bne.n	800ca98 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800ca70:	68fb      	ldr	r3, [r7, #12]
 800ca72:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ca74:	f043 0220 	orr.w	r2, r3, #32
 800ca78:	68fb      	ldr	r3, [r7, #12]
 800ca7a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800ca7c:	68fb      	ldr	r3, [r7, #12]
 800ca7e:	2220      	movs	r2, #32
 800ca80:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800ca84:	68fb      	ldr	r3, [r7, #12]
 800ca86:	2200      	movs	r2, #0
 800ca88:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800ca8c:	68fb      	ldr	r3, [r7, #12]
 800ca8e:	2200      	movs	r2, #0
 800ca90:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800ca94:	2301      	movs	r3, #1
 800ca96:	e007      	b.n	800caa8 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800ca98:	68fb      	ldr	r3, [r7, #12]
 800ca9a:	681b      	ldr	r3, [r3, #0]
 800ca9c:	699b      	ldr	r3, [r3, #24]
 800ca9e:	f003 0302 	and.w	r3, r3, #2
 800caa2:	2b02      	cmp	r3, #2
 800caa4:	d1cb      	bne.n	800ca3e <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800caa6:	2300      	movs	r3, #0
}
 800caa8:	4618      	mov	r0, r3
 800caaa:	3710      	adds	r7, #16
 800caac:	46bd      	mov	sp, r7
 800caae:	bd80      	pop	{r7, pc}

0800cab0 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800cab0:	b580      	push	{r7, lr}
 800cab2:	b084      	sub	sp, #16
 800cab4:	af00      	add	r7, sp, #0
 800cab6:	60f8      	str	r0, [r7, #12]
 800cab8:	60b9      	str	r1, [r7, #8]
 800caba:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800cabc:	e028      	b.n	800cb10 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800cabe:	687a      	ldr	r2, [r7, #4]
 800cac0:	68b9      	ldr	r1, [r7, #8]
 800cac2:	68f8      	ldr	r0, [r7, #12]
 800cac4:	f000 f830 	bl	800cb28 <I2C_IsErrorOccurred>
 800cac8:	4603      	mov	r3, r0
 800caca:	2b00      	cmp	r3, #0
 800cacc:	d001      	beq.n	800cad2 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800cace:	2301      	movs	r3, #1
 800cad0:	e026      	b.n	800cb20 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800cad2:	f7fd f891 	bl	8009bf8 <HAL_GetTick>
 800cad6:	4602      	mov	r2, r0
 800cad8:	687b      	ldr	r3, [r7, #4]
 800cada:	1ad3      	subs	r3, r2, r3
 800cadc:	68ba      	ldr	r2, [r7, #8]
 800cade:	429a      	cmp	r2, r3
 800cae0:	d302      	bcc.n	800cae8 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800cae2:	68bb      	ldr	r3, [r7, #8]
 800cae4:	2b00      	cmp	r3, #0
 800cae6:	d113      	bne.n	800cb10 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800cae8:	68fb      	ldr	r3, [r7, #12]
 800caea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800caec:	f043 0220 	orr.w	r2, r3, #32
 800caf0:	68fb      	ldr	r3, [r7, #12]
 800caf2:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800caf4:	68fb      	ldr	r3, [r7, #12]
 800caf6:	2220      	movs	r2, #32
 800caf8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800cafc:	68fb      	ldr	r3, [r7, #12]
 800cafe:	2200      	movs	r2, #0
 800cb00:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800cb04:	68fb      	ldr	r3, [r7, #12]
 800cb06:	2200      	movs	r2, #0
 800cb08:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800cb0c:	2301      	movs	r3, #1
 800cb0e:	e007      	b.n	800cb20 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800cb10:	68fb      	ldr	r3, [r7, #12]
 800cb12:	681b      	ldr	r3, [r3, #0]
 800cb14:	699b      	ldr	r3, [r3, #24]
 800cb16:	f003 0320 	and.w	r3, r3, #32
 800cb1a:	2b20      	cmp	r3, #32
 800cb1c:	d1cf      	bne.n	800cabe <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800cb1e:	2300      	movs	r3, #0
}
 800cb20:	4618      	mov	r0, r3
 800cb22:	3710      	adds	r7, #16
 800cb24:	46bd      	mov	sp, r7
 800cb26:	bd80      	pop	{r7, pc}

0800cb28 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800cb28:	b580      	push	{r7, lr}
 800cb2a:	b08a      	sub	sp, #40	; 0x28
 800cb2c:	af00      	add	r7, sp, #0
 800cb2e:	60f8      	str	r0, [r7, #12]
 800cb30:	60b9      	str	r1, [r7, #8]
 800cb32:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800cb34:	2300      	movs	r3, #0
 800cb36:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800cb3a:	68fb      	ldr	r3, [r7, #12]
 800cb3c:	681b      	ldr	r3, [r3, #0]
 800cb3e:	699b      	ldr	r3, [r3, #24]
 800cb40:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800cb42:	2300      	movs	r3, #0
 800cb44:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800cb46:	687b      	ldr	r3, [r7, #4]
 800cb48:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800cb4a:	69bb      	ldr	r3, [r7, #24]
 800cb4c:	f003 0310 	and.w	r3, r3, #16
 800cb50:	2b00      	cmp	r3, #0
 800cb52:	d075      	beq.n	800cc40 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800cb54:	68fb      	ldr	r3, [r7, #12]
 800cb56:	681b      	ldr	r3, [r3, #0]
 800cb58:	2210      	movs	r2, #16
 800cb5a:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800cb5c:	e056      	b.n	800cc0c <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800cb5e:	68bb      	ldr	r3, [r7, #8]
 800cb60:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800cb64:	d052      	beq.n	800cc0c <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800cb66:	f7fd f847 	bl	8009bf8 <HAL_GetTick>
 800cb6a:	4602      	mov	r2, r0
 800cb6c:	69fb      	ldr	r3, [r7, #28]
 800cb6e:	1ad3      	subs	r3, r2, r3
 800cb70:	68ba      	ldr	r2, [r7, #8]
 800cb72:	429a      	cmp	r2, r3
 800cb74:	d302      	bcc.n	800cb7c <I2C_IsErrorOccurred+0x54>
 800cb76:	68bb      	ldr	r3, [r7, #8]
 800cb78:	2b00      	cmp	r3, #0
 800cb7a:	d147      	bne.n	800cc0c <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800cb7c:	68fb      	ldr	r3, [r7, #12]
 800cb7e:	681b      	ldr	r3, [r3, #0]
 800cb80:	685b      	ldr	r3, [r3, #4]
 800cb82:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800cb86:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 800cb88:	68fb      	ldr	r3, [r7, #12]
 800cb8a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800cb8e:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800cb90:	68fb      	ldr	r3, [r7, #12]
 800cb92:	681b      	ldr	r3, [r3, #0]
 800cb94:	699b      	ldr	r3, [r3, #24]
 800cb96:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800cb9a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800cb9e:	d12e      	bne.n	800cbfe <I2C_IsErrorOccurred+0xd6>
 800cba0:	697b      	ldr	r3, [r7, #20]
 800cba2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800cba6:	d02a      	beq.n	800cbfe <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 800cba8:	7cfb      	ldrb	r3, [r7, #19]
 800cbaa:	2b20      	cmp	r3, #32
 800cbac:	d027      	beq.n	800cbfe <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800cbae:	68fb      	ldr	r3, [r7, #12]
 800cbb0:	681b      	ldr	r3, [r3, #0]
 800cbb2:	685a      	ldr	r2, [r3, #4]
 800cbb4:	68fb      	ldr	r3, [r7, #12]
 800cbb6:	681b      	ldr	r3, [r3, #0]
 800cbb8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800cbbc:	605a      	str	r2, [r3, #4]
            
            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800cbbe:	f7fd f81b 	bl	8009bf8 <HAL_GetTick>
 800cbc2:	61f8      	str	r0, [r7, #28]
          }
          
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800cbc4:	e01b      	b.n	800cbfe <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800cbc6:	f7fd f817 	bl	8009bf8 <HAL_GetTick>
 800cbca:	4602      	mov	r2, r0
 800cbcc:	69fb      	ldr	r3, [r7, #28]
 800cbce:	1ad3      	subs	r3, r2, r3
 800cbd0:	2b19      	cmp	r3, #25
 800cbd2:	d914      	bls.n	800cbfe <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800cbd4:	68fb      	ldr	r3, [r7, #12]
 800cbd6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cbd8:	f043 0220 	orr.w	r2, r3, #32
 800cbdc:	68fb      	ldr	r3, [r7, #12]
 800cbde:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 800cbe0:	68fb      	ldr	r3, [r7, #12]
 800cbe2:	2220      	movs	r2, #32
 800cbe4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 800cbe8:	68fb      	ldr	r3, [r7, #12]
 800cbea:	2200      	movs	r2, #0
 800cbec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
              
              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 800cbf0:	68fb      	ldr	r3, [r7, #12]
 800cbf2:	2200      	movs	r2, #0
 800cbf4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
              
              status = HAL_ERROR;
 800cbf8:	2301      	movs	r3, #1
 800cbfa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800cbfe:	68fb      	ldr	r3, [r7, #12]
 800cc00:	681b      	ldr	r3, [r3, #0]
 800cc02:	699b      	ldr	r3, [r3, #24]
 800cc04:	f003 0320 	and.w	r3, r3, #32
 800cc08:	2b20      	cmp	r3, #32
 800cc0a:	d1dc      	bne.n	800cbc6 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800cc0c:	68fb      	ldr	r3, [r7, #12]
 800cc0e:	681b      	ldr	r3, [r3, #0]
 800cc10:	699b      	ldr	r3, [r3, #24]
 800cc12:	f003 0320 	and.w	r3, r3, #32
 800cc16:	2b20      	cmp	r3, #32
 800cc18:	d003      	beq.n	800cc22 <I2C_IsErrorOccurred+0xfa>
 800cc1a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cc1e:	2b00      	cmp	r3, #0
 800cc20:	d09d      	beq.n	800cb5e <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800cc22:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cc26:	2b00      	cmp	r3, #0
 800cc28:	d103      	bne.n	800cc32 <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800cc2a:	68fb      	ldr	r3, [r7, #12]
 800cc2c:	681b      	ldr	r3, [r3, #0]
 800cc2e:	2220      	movs	r2, #32
 800cc30:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800cc32:	6a3b      	ldr	r3, [r7, #32]
 800cc34:	f043 0304 	orr.w	r3, r3, #4
 800cc38:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 800cc3a:	2301      	movs	r3, #1
 800cc3c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800cc40:	68fb      	ldr	r3, [r7, #12]
 800cc42:	681b      	ldr	r3, [r3, #0]
 800cc44:	699b      	ldr	r3, [r3, #24]
 800cc46:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800cc48:	69bb      	ldr	r3, [r7, #24]
 800cc4a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800cc4e:	2b00      	cmp	r3, #0
 800cc50:	d00b      	beq.n	800cc6a <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800cc52:	6a3b      	ldr	r3, [r7, #32]
 800cc54:	f043 0301 	orr.w	r3, r3, #1
 800cc58:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800cc5a:	68fb      	ldr	r3, [r7, #12]
 800cc5c:	681b      	ldr	r3, [r3, #0]
 800cc5e:	f44f 7280 	mov.w	r2, #256	; 0x100
 800cc62:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800cc64:	2301      	movs	r3, #1
 800cc66:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800cc6a:	69bb      	ldr	r3, [r7, #24]
 800cc6c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800cc70:	2b00      	cmp	r3, #0
 800cc72:	d00b      	beq.n	800cc8c <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800cc74:	6a3b      	ldr	r3, [r7, #32]
 800cc76:	f043 0308 	orr.w	r3, r3, #8
 800cc7a:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800cc7c:	68fb      	ldr	r3, [r7, #12]
 800cc7e:	681b      	ldr	r3, [r3, #0]
 800cc80:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800cc84:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800cc86:	2301      	movs	r3, #1
 800cc88:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800cc8c:	69bb      	ldr	r3, [r7, #24]
 800cc8e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800cc92:	2b00      	cmp	r3, #0
 800cc94:	d00b      	beq.n	800ccae <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800cc96:	6a3b      	ldr	r3, [r7, #32]
 800cc98:	f043 0302 	orr.w	r3, r3, #2
 800cc9c:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800cc9e:	68fb      	ldr	r3, [r7, #12]
 800cca0:	681b      	ldr	r3, [r3, #0]
 800cca2:	f44f 7200 	mov.w	r2, #512	; 0x200
 800cca6:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800cca8:	2301      	movs	r3, #1
 800ccaa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 800ccae:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ccb2:	2b00      	cmp	r3, #0
 800ccb4:	d01c      	beq.n	800ccf0 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800ccb6:	68f8      	ldr	r0, [r7, #12]
 800ccb8:	f7ff fe56 	bl	800c968 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800ccbc:	68fb      	ldr	r3, [r7, #12]
 800ccbe:	681b      	ldr	r3, [r3, #0]
 800ccc0:	6859      	ldr	r1, [r3, #4]
 800ccc2:	68fb      	ldr	r3, [r7, #12]
 800ccc4:	681a      	ldr	r2, [r3, #0]
 800ccc6:	4b0d      	ldr	r3, [pc, #52]	; (800ccfc <I2C_IsErrorOccurred+0x1d4>)
 800ccc8:	400b      	ands	r3, r1
 800ccca:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800cccc:	68fb      	ldr	r3, [r7, #12]
 800ccce:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800ccd0:	6a3b      	ldr	r3, [r7, #32]
 800ccd2:	431a      	orrs	r2, r3
 800ccd4:	68fb      	ldr	r3, [r7, #12]
 800ccd6:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800ccd8:	68fb      	ldr	r3, [r7, #12]
 800ccda:	2220      	movs	r2, #32
 800ccdc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800cce0:	68fb      	ldr	r3, [r7, #12]
 800cce2:	2200      	movs	r2, #0
 800cce4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800cce8:	68fb      	ldr	r3, [r7, #12]
 800ccea:	2200      	movs	r2, #0
 800ccec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 800ccf0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800ccf4:	4618      	mov	r0, r3
 800ccf6:	3728      	adds	r7, #40	; 0x28
 800ccf8:	46bd      	mov	sp, r7
 800ccfa:	bd80      	pop	{r7, pc}
 800ccfc:	fe00e800 	.word	0xfe00e800

0800cd00 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800cd00:	b480      	push	{r7}
 800cd02:	b087      	sub	sp, #28
 800cd04:	af00      	add	r7, sp, #0
 800cd06:	60f8      	str	r0, [r7, #12]
 800cd08:	607b      	str	r3, [r7, #4]
 800cd0a:	460b      	mov	r3, r1
 800cd0c:	817b      	strh	r3, [r7, #10]
 800cd0e:	4613      	mov	r3, r2
 800cd10:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800cd12:	897b      	ldrh	r3, [r7, #10]
 800cd14:	f3c3 0209 	ubfx	r2, r3, #0, #10
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800cd18:	7a7b      	ldrb	r3, [r7, #9]
 800cd1a:	041b      	lsls	r3, r3, #16
 800cd1c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800cd20:	431a      	orrs	r2, r3
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800cd22:	687b      	ldr	r3, [r7, #4]
 800cd24:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800cd26:	6a3b      	ldr	r3, [r7, #32]
 800cd28:	4313      	orrs	r3, r2
 800cd2a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800cd2e:	617b      	str	r3, [r7, #20]
                              (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800cd30:	68fb      	ldr	r3, [r7, #12]
 800cd32:	681b      	ldr	r3, [r3, #0]
 800cd34:	685a      	ldr	r2, [r3, #4]
 800cd36:	6a3b      	ldr	r3, [r7, #32]
 800cd38:	0d5b      	lsrs	r3, r3, #21
 800cd3a:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800cd3e:	4b08      	ldr	r3, [pc, #32]	; (800cd60 <I2C_TransferConfig+0x60>)
 800cd40:	430b      	orrs	r3, r1
 800cd42:	43db      	mvns	r3, r3
 800cd44:	ea02 0103 	and.w	r1, r2, r3
 800cd48:	68fb      	ldr	r3, [r7, #12]
 800cd4a:	681b      	ldr	r3, [r3, #0]
 800cd4c:	697a      	ldr	r2, [r7, #20]
 800cd4e:	430a      	orrs	r2, r1
 800cd50:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
                I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800cd52:	bf00      	nop
 800cd54:	371c      	adds	r7, #28
 800cd56:	46bd      	mov	sp, r7
 800cd58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd5c:	4770      	bx	lr
 800cd5e:	bf00      	nop
 800cd60:	03ff63ff 	.word	0x03ff63ff

0800cd64 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800cd64:	b480      	push	{r7}
 800cd66:	b083      	sub	sp, #12
 800cd68:	af00      	add	r7, sp, #0
 800cd6a:	6078      	str	r0, [r7, #4]
 800cd6c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800cd6e:	687b      	ldr	r3, [r7, #4]
 800cd70:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800cd74:	b2db      	uxtb	r3, r3
 800cd76:	2b20      	cmp	r3, #32
 800cd78:	d138      	bne.n	800cdec <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800cd7a:	687b      	ldr	r3, [r7, #4]
 800cd7c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800cd80:	2b01      	cmp	r3, #1
 800cd82:	d101      	bne.n	800cd88 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800cd84:	2302      	movs	r3, #2
 800cd86:	e032      	b.n	800cdee <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800cd88:	687b      	ldr	r3, [r7, #4]
 800cd8a:	2201      	movs	r2, #1
 800cd8c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800cd90:	687b      	ldr	r3, [r7, #4]
 800cd92:	2224      	movs	r2, #36	; 0x24
 800cd94:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800cd98:	687b      	ldr	r3, [r7, #4]
 800cd9a:	681b      	ldr	r3, [r3, #0]
 800cd9c:	681a      	ldr	r2, [r3, #0]
 800cd9e:	687b      	ldr	r3, [r7, #4]
 800cda0:	681b      	ldr	r3, [r3, #0]
 800cda2:	f022 0201 	bic.w	r2, r2, #1
 800cda6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800cda8:	687b      	ldr	r3, [r7, #4]
 800cdaa:	681b      	ldr	r3, [r3, #0]
 800cdac:	681a      	ldr	r2, [r3, #0]
 800cdae:	687b      	ldr	r3, [r7, #4]
 800cdb0:	681b      	ldr	r3, [r3, #0]
 800cdb2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800cdb6:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800cdb8:	687b      	ldr	r3, [r7, #4]
 800cdba:	681b      	ldr	r3, [r3, #0]
 800cdbc:	6819      	ldr	r1, [r3, #0]
 800cdbe:	687b      	ldr	r3, [r7, #4]
 800cdc0:	681b      	ldr	r3, [r3, #0]
 800cdc2:	683a      	ldr	r2, [r7, #0]
 800cdc4:	430a      	orrs	r2, r1
 800cdc6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800cdc8:	687b      	ldr	r3, [r7, #4]
 800cdca:	681b      	ldr	r3, [r3, #0]
 800cdcc:	681a      	ldr	r2, [r3, #0]
 800cdce:	687b      	ldr	r3, [r7, #4]
 800cdd0:	681b      	ldr	r3, [r3, #0]
 800cdd2:	f042 0201 	orr.w	r2, r2, #1
 800cdd6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800cdd8:	687b      	ldr	r3, [r7, #4]
 800cdda:	2220      	movs	r2, #32
 800cddc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800cde0:	687b      	ldr	r3, [r7, #4]
 800cde2:	2200      	movs	r2, #0
 800cde4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800cde8:	2300      	movs	r3, #0
 800cdea:	e000      	b.n	800cdee <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800cdec:	2302      	movs	r3, #2
  }
}
 800cdee:	4618      	mov	r0, r3
 800cdf0:	370c      	adds	r7, #12
 800cdf2:	46bd      	mov	sp, r7
 800cdf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdf8:	4770      	bx	lr

0800cdfa <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800cdfa:	b480      	push	{r7}
 800cdfc:	b085      	sub	sp, #20
 800cdfe:	af00      	add	r7, sp, #0
 800ce00:	6078      	str	r0, [r7, #4]
 800ce02:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800ce04:	687b      	ldr	r3, [r7, #4]
 800ce06:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800ce0a:	b2db      	uxtb	r3, r3
 800ce0c:	2b20      	cmp	r3, #32
 800ce0e:	d139      	bne.n	800ce84 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800ce10:	687b      	ldr	r3, [r7, #4]
 800ce12:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800ce16:	2b01      	cmp	r3, #1
 800ce18:	d101      	bne.n	800ce1e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800ce1a:	2302      	movs	r3, #2
 800ce1c:	e033      	b.n	800ce86 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800ce1e:	687b      	ldr	r3, [r7, #4]
 800ce20:	2201      	movs	r2, #1
 800ce22:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800ce26:	687b      	ldr	r3, [r7, #4]
 800ce28:	2224      	movs	r2, #36	; 0x24
 800ce2a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800ce2e:	687b      	ldr	r3, [r7, #4]
 800ce30:	681b      	ldr	r3, [r3, #0]
 800ce32:	681a      	ldr	r2, [r3, #0]
 800ce34:	687b      	ldr	r3, [r7, #4]
 800ce36:	681b      	ldr	r3, [r3, #0]
 800ce38:	f022 0201 	bic.w	r2, r2, #1
 800ce3c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800ce3e:	687b      	ldr	r3, [r7, #4]
 800ce40:	681b      	ldr	r3, [r3, #0]
 800ce42:	681b      	ldr	r3, [r3, #0]
 800ce44:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800ce46:	68fb      	ldr	r3, [r7, #12]
 800ce48:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800ce4c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800ce4e:	683b      	ldr	r3, [r7, #0]
 800ce50:	021b      	lsls	r3, r3, #8
 800ce52:	68fa      	ldr	r2, [r7, #12]
 800ce54:	4313      	orrs	r3, r2
 800ce56:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800ce58:	687b      	ldr	r3, [r7, #4]
 800ce5a:	681b      	ldr	r3, [r3, #0]
 800ce5c:	68fa      	ldr	r2, [r7, #12]
 800ce5e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800ce60:	687b      	ldr	r3, [r7, #4]
 800ce62:	681b      	ldr	r3, [r3, #0]
 800ce64:	681a      	ldr	r2, [r3, #0]
 800ce66:	687b      	ldr	r3, [r7, #4]
 800ce68:	681b      	ldr	r3, [r3, #0]
 800ce6a:	f042 0201 	orr.w	r2, r2, #1
 800ce6e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800ce70:	687b      	ldr	r3, [r7, #4]
 800ce72:	2220      	movs	r2, #32
 800ce74:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800ce78:	687b      	ldr	r3, [r7, #4]
 800ce7a:	2200      	movs	r2, #0
 800ce7c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800ce80:	2300      	movs	r3, #0
 800ce82:	e000      	b.n	800ce86 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800ce84:	2302      	movs	r3, #2
  }
}
 800ce86:	4618      	mov	r0, r3
 800ce88:	3714      	adds	r7, #20
 800ce8a:	46bd      	mov	sp, r7
 800ce8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce90:	4770      	bx	lr

0800ce92 <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 800ce92:	b580      	push	{r7, lr}
 800ce94:	b084      	sub	sp, #16
 800ce96:	af00      	add	r7, sp, #0
 800ce98:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 800ce9a:	687b      	ldr	r3, [r7, #4]
 800ce9c:	2b00      	cmp	r3, #0
 800ce9e:	d101      	bne.n	800cea4 <HAL_IWDG_Init+0x12>
  {
    return HAL_ERROR;
 800cea0:	2301      	movs	r3, #1
 800cea2:	e041      	b.n	800cf28 <HAL_IWDG_Init+0x96>
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));
  assert_param(IS_IWDG_WINDOW(hiwdg->Init.Window));

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 800cea4:	687b      	ldr	r3, [r7, #4]
 800cea6:	681b      	ldr	r3, [r3, #0]
 800cea8:	f64c 42cc 	movw	r2, #52428	; 0xcccc
 800ceac:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR, IWDG_RLR and IWDG_WINR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 800ceae:	687b      	ldr	r3, [r7, #4]
 800ceb0:	681b      	ldr	r3, [r3, #0]
 800ceb2:	f245 5255 	movw	r2, #21845	; 0x5555
 800ceb6:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 800ceb8:	687b      	ldr	r3, [r7, #4]
 800ceba:	681b      	ldr	r3, [r3, #0]
 800cebc:	687a      	ldr	r2, [r7, #4]
 800cebe:	6852      	ldr	r2, [r2, #4]
 800cec0:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 800cec2:	687b      	ldr	r3, [r7, #4]
 800cec4:	681b      	ldr	r3, [r3, #0]
 800cec6:	687a      	ldr	r2, [r7, #4]
 800cec8:	6892      	ldr	r2, [r2, #8]
 800ceca:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 800cecc:	f7fc fe94 	bl	8009bf8 <HAL_GetTick>
 800ced0:	60f8      	str	r0, [r7, #12]

  /* Wait for register to be updated */
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 800ced2:	e00f      	b.n	800cef4 <HAL_IWDG_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 800ced4:	f7fc fe90 	bl	8009bf8 <HAL_GetTick>
 800ced8:	4602      	mov	r2, r0
 800ceda:	68fb      	ldr	r3, [r7, #12]
 800cedc:	1ad3      	subs	r3, r2, r3
 800cede:	2b31      	cmp	r3, #49	; 0x31
 800cee0:	d908      	bls.n	800cef4 <HAL_IWDG_Init+0x62>
    {
      if ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 800cee2:	687b      	ldr	r3, [r7, #4]
 800cee4:	681b      	ldr	r3, [r3, #0]
 800cee6:	68db      	ldr	r3, [r3, #12]
 800cee8:	f003 0307 	and.w	r3, r3, #7
 800ceec:	2b00      	cmp	r3, #0
 800ceee:	d001      	beq.n	800cef4 <HAL_IWDG_Init+0x62>
      {
        return HAL_TIMEOUT;
 800cef0:	2303      	movs	r3, #3
 800cef2:	e019      	b.n	800cf28 <HAL_IWDG_Init+0x96>
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 800cef4:	687b      	ldr	r3, [r7, #4]
 800cef6:	681b      	ldr	r3, [r3, #0]
 800cef8:	68db      	ldr	r3, [r3, #12]
 800cefa:	f003 0307 	and.w	r3, r3, #7
 800cefe:	2b00      	cmp	r3, #0
 800cf00:	d1e8      	bne.n	800ced4 <HAL_IWDG_Init+0x42>
    }
  }

  /* If window parameter is different than current value, modify window
  register */
  if (hiwdg->Instance->WINR != hiwdg->Init.Window)
 800cf02:	687b      	ldr	r3, [r7, #4]
 800cf04:	681b      	ldr	r3, [r3, #0]
 800cf06:	691a      	ldr	r2, [r3, #16]
 800cf08:	687b      	ldr	r3, [r7, #4]
 800cf0a:	68db      	ldr	r3, [r3, #12]
 800cf0c:	429a      	cmp	r2, r3
 800cf0e:	d005      	beq.n	800cf1c <HAL_IWDG_Init+0x8a>
  {
    /* Write to IWDG WINR the IWDG_Window value to compare with. In any case,
    even if window feature is disabled, Watchdog will be reloaded by writing
    windows register */
    hiwdg->Instance->WINR = hiwdg->Init.Window;
 800cf10:	687b      	ldr	r3, [r7, #4]
 800cf12:	681b      	ldr	r3, [r3, #0]
 800cf14:	687a      	ldr	r2, [r7, #4]
 800cf16:	68d2      	ldr	r2, [r2, #12]
 800cf18:	611a      	str	r2, [r3, #16]
 800cf1a:	e004      	b.n	800cf26 <HAL_IWDG_Init+0x94>
  }
  else
  {
    /* Reload IWDG counter with value defined in the reload register */
    __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 800cf1c:	687b      	ldr	r3, [r7, #4]
 800cf1e:	681b      	ldr	r3, [r3, #0]
 800cf20:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 800cf24:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800cf26:	2300      	movs	r3, #0
}
 800cf28:	4618      	mov	r0, r3
 800cf2a:	3710      	adds	r7, #16
 800cf2c:	46bd      	mov	sp, r7
 800cf2e:	bd80      	pop	{r7, pc}

0800cf30 <HAL_IWDG_Refresh>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
 800cf30:	b480      	push	{r7}
 800cf32:	b083      	sub	sp, #12
 800cf34:	af00      	add	r7, sp, #0
 800cf36:	6078      	str	r0, [r7, #4]
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 800cf38:	687b      	ldr	r3, [r7, #4]
 800cf3a:	681b      	ldr	r3, [r3, #0]
 800cf3c:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 800cf40:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800cf42:	2300      	movs	r3, #0
}
 800cf44:	4618      	mov	r0, r3
 800cf46:	370c      	adds	r7, #12
 800cf48:	46bd      	mov	sp, r7
 800cf4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf4e:	4770      	bx	lr

0800cf50 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800cf50:	b480      	push	{r7}
 800cf52:	b085      	sub	sp, #20
 800cf54:	af00      	add	r7, sp, #0
 800cf56:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 800cf58:	687b      	ldr	r3, [r7, #4]
 800cf5a:	2b00      	cmp	r3, #0
 800cf5c:	d141      	bne.n	800cfe2 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800cf5e:	4b4b      	ldr	r3, [pc, #300]	; (800d08c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800cf60:	681b      	ldr	r3, [r3, #0]
 800cf62:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800cf66:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800cf6a:	d131      	bne.n	800cfd0 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800cf6c:	4b47      	ldr	r3, [pc, #284]	; (800d08c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800cf6e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800cf72:	4a46      	ldr	r2, [pc, #280]	; (800d08c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800cf74:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800cf78:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800cf7c:	4b43      	ldr	r3, [pc, #268]	; (800d08c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800cf7e:	681b      	ldr	r3, [r3, #0]
 800cf80:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800cf84:	4a41      	ldr	r2, [pc, #260]	; (800d08c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800cf86:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800cf8a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800cf8c:	4b40      	ldr	r3, [pc, #256]	; (800d090 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800cf8e:	681b      	ldr	r3, [r3, #0]
 800cf90:	2232      	movs	r2, #50	; 0x32
 800cf92:	fb02 f303 	mul.w	r3, r2, r3
 800cf96:	4a3f      	ldr	r2, [pc, #252]	; (800d094 <HAL_PWREx_ControlVoltageScaling+0x144>)
 800cf98:	fba2 2303 	umull	r2, r3, r2, r3
 800cf9c:	0c9b      	lsrs	r3, r3, #18
 800cf9e:	3301      	adds	r3, #1
 800cfa0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800cfa2:	e002      	b.n	800cfaa <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 800cfa4:	68fb      	ldr	r3, [r7, #12]
 800cfa6:	3b01      	subs	r3, #1
 800cfa8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800cfaa:	4b38      	ldr	r3, [pc, #224]	; (800d08c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800cfac:	695b      	ldr	r3, [r3, #20]
 800cfae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800cfb2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800cfb6:	d102      	bne.n	800cfbe <HAL_PWREx_ControlVoltageScaling+0x6e>
 800cfb8:	68fb      	ldr	r3, [r7, #12]
 800cfba:	2b00      	cmp	r3, #0
 800cfbc:	d1f2      	bne.n	800cfa4 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800cfbe:	4b33      	ldr	r3, [pc, #204]	; (800d08c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800cfc0:	695b      	ldr	r3, [r3, #20]
 800cfc2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800cfc6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800cfca:	d158      	bne.n	800d07e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800cfcc:	2303      	movs	r3, #3
 800cfce:	e057      	b.n	800d080 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800cfd0:	4b2e      	ldr	r3, [pc, #184]	; (800d08c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800cfd2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800cfd6:	4a2d      	ldr	r2, [pc, #180]	; (800d08c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800cfd8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800cfdc:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 800cfe0:	e04d      	b.n	800d07e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800cfe2:	687b      	ldr	r3, [r7, #4]
 800cfe4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800cfe8:	d141      	bne.n	800d06e <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800cfea:	4b28      	ldr	r3, [pc, #160]	; (800d08c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800cfec:	681b      	ldr	r3, [r3, #0]
 800cfee:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800cff2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800cff6:	d131      	bne.n	800d05c <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800cff8:	4b24      	ldr	r3, [pc, #144]	; (800d08c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800cffa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800cffe:	4a23      	ldr	r2, [pc, #140]	; (800d08c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800d000:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800d004:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800d008:	4b20      	ldr	r3, [pc, #128]	; (800d08c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800d00a:	681b      	ldr	r3, [r3, #0]
 800d00c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800d010:	4a1e      	ldr	r2, [pc, #120]	; (800d08c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800d012:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800d016:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800d018:	4b1d      	ldr	r3, [pc, #116]	; (800d090 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800d01a:	681b      	ldr	r3, [r3, #0]
 800d01c:	2232      	movs	r2, #50	; 0x32
 800d01e:	fb02 f303 	mul.w	r3, r2, r3
 800d022:	4a1c      	ldr	r2, [pc, #112]	; (800d094 <HAL_PWREx_ControlVoltageScaling+0x144>)
 800d024:	fba2 2303 	umull	r2, r3, r2, r3
 800d028:	0c9b      	lsrs	r3, r3, #18
 800d02a:	3301      	adds	r3, #1
 800d02c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800d02e:	e002      	b.n	800d036 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 800d030:	68fb      	ldr	r3, [r7, #12]
 800d032:	3b01      	subs	r3, #1
 800d034:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800d036:	4b15      	ldr	r3, [pc, #84]	; (800d08c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800d038:	695b      	ldr	r3, [r3, #20]
 800d03a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800d03e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800d042:	d102      	bne.n	800d04a <HAL_PWREx_ControlVoltageScaling+0xfa>
 800d044:	68fb      	ldr	r3, [r7, #12]
 800d046:	2b00      	cmp	r3, #0
 800d048:	d1f2      	bne.n	800d030 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800d04a:	4b10      	ldr	r3, [pc, #64]	; (800d08c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800d04c:	695b      	ldr	r3, [r3, #20]
 800d04e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800d052:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800d056:	d112      	bne.n	800d07e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800d058:	2303      	movs	r3, #3
 800d05a:	e011      	b.n	800d080 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800d05c:	4b0b      	ldr	r3, [pc, #44]	; (800d08c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800d05e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d062:	4a0a      	ldr	r2, [pc, #40]	; (800d08c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800d064:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800d068:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 800d06c:	e007      	b.n	800d07e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800d06e:	4b07      	ldr	r3, [pc, #28]	; (800d08c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800d070:	681b      	ldr	r3, [r3, #0]
 800d072:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800d076:	4a05      	ldr	r2, [pc, #20]	; (800d08c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800d078:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800d07c:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 800d07e:	2300      	movs	r3, #0
}
 800d080:	4618      	mov	r0, r3
 800d082:	3714      	adds	r7, #20
 800d084:	46bd      	mov	sp, r7
 800d086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d08a:	4770      	bx	lr
 800d08c:	40007000 	.word	0x40007000
 800d090:	2000037c 	.word	0x2000037c
 800d094:	431bde83 	.word	0x431bde83

0800d098 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800d098:	b580      	push	{r7, lr}
 800d09a:	b088      	sub	sp, #32
 800d09c:	af00      	add	r7, sp, #0
 800d09e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800d0a0:	687b      	ldr	r3, [r7, #4]
 800d0a2:	2b00      	cmp	r3, #0
 800d0a4:	d101      	bne.n	800d0aa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800d0a6:	2301      	movs	r3, #1
 800d0a8:	e306      	b.n	800d6b8 <HAL_RCC_OscConfig+0x620>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800d0aa:	687b      	ldr	r3, [r7, #4]
 800d0ac:	681b      	ldr	r3, [r3, #0]
 800d0ae:	f003 0301 	and.w	r3, r3, #1
 800d0b2:	2b00      	cmp	r3, #0
 800d0b4:	d075      	beq.n	800d1a2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800d0b6:	4b97      	ldr	r3, [pc, #604]	; (800d314 <HAL_RCC_OscConfig+0x27c>)
 800d0b8:	689b      	ldr	r3, [r3, #8]
 800d0ba:	f003 030c 	and.w	r3, r3, #12
 800d0be:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800d0c0:	4b94      	ldr	r3, [pc, #592]	; (800d314 <HAL_RCC_OscConfig+0x27c>)
 800d0c2:	68db      	ldr	r3, [r3, #12]
 800d0c4:	f003 0303 	and.w	r3, r3, #3
 800d0c8:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800d0ca:	69bb      	ldr	r3, [r7, #24]
 800d0cc:	2b0c      	cmp	r3, #12
 800d0ce:	d102      	bne.n	800d0d6 <HAL_RCC_OscConfig+0x3e>
 800d0d0:	697b      	ldr	r3, [r7, #20]
 800d0d2:	2b03      	cmp	r3, #3
 800d0d4:	d002      	beq.n	800d0dc <HAL_RCC_OscConfig+0x44>
 800d0d6:	69bb      	ldr	r3, [r7, #24]
 800d0d8:	2b08      	cmp	r3, #8
 800d0da:	d10b      	bne.n	800d0f4 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800d0dc:	4b8d      	ldr	r3, [pc, #564]	; (800d314 <HAL_RCC_OscConfig+0x27c>)
 800d0de:	681b      	ldr	r3, [r3, #0]
 800d0e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d0e4:	2b00      	cmp	r3, #0
 800d0e6:	d05b      	beq.n	800d1a0 <HAL_RCC_OscConfig+0x108>
 800d0e8:	687b      	ldr	r3, [r7, #4]
 800d0ea:	685b      	ldr	r3, [r3, #4]
 800d0ec:	2b00      	cmp	r3, #0
 800d0ee:	d157      	bne.n	800d1a0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800d0f0:	2301      	movs	r3, #1
 800d0f2:	e2e1      	b.n	800d6b8 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800d0f4:	687b      	ldr	r3, [r7, #4]
 800d0f6:	685b      	ldr	r3, [r3, #4]
 800d0f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d0fc:	d106      	bne.n	800d10c <HAL_RCC_OscConfig+0x74>
 800d0fe:	4b85      	ldr	r3, [pc, #532]	; (800d314 <HAL_RCC_OscConfig+0x27c>)
 800d100:	681b      	ldr	r3, [r3, #0]
 800d102:	4a84      	ldr	r2, [pc, #528]	; (800d314 <HAL_RCC_OscConfig+0x27c>)
 800d104:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800d108:	6013      	str	r3, [r2, #0]
 800d10a:	e01d      	b.n	800d148 <HAL_RCC_OscConfig+0xb0>
 800d10c:	687b      	ldr	r3, [r7, #4]
 800d10e:	685b      	ldr	r3, [r3, #4]
 800d110:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800d114:	d10c      	bne.n	800d130 <HAL_RCC_OscConfig+0x98>
 800d116:	4b7f      	ldr	r3, [pc, #508]	; (800d314 <HAL_RCC_OscConfig+0x27c>)
 800d118:	681b      	ldr	r3, [r3, #0]
 800d11a:	4a7e      	ldr	r2, [pc, #504]	; (800d314 <HAL_RCC_OscConfig+0x27c>)
 800d11c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800d120:	6013      	str	r3, [r2, #0]
 800d122:	4b7c      	ldr	r3, [pc, #496]	; (800d314 <HAL_RCC_OscConfig+0x27c>)
 800d124:	681b      	ldr	r3, [r3, #0]
 800d126:	4a7b      	ldr	r2, [pc, #492]	; (800d314 <HAL_RCC_OscConfig+0x27c>)
 800d128:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800d12c:	6013      	str	r3, [r2, #0]
 800d12e:	e00b      	b.n	800d148 <HAL_RCC_OscConfig+0xb0>
 800d130:	4b78      	ldr	r3, [pc, #480]	; (800d314 <HAL_RCC_OscConfig+0x27c>)
 800d132:	681b      	ldr	r3, [r3, #0]
 800d134:	4a77      	ldr	r2, [pc, #476]	; (800d314 <HAL_RCC_OscConfig+0x27c>)
 800d136:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800d13a:	6013      	str	r3, [r2, #0]
 800d13c:	4b75      	ldr	r3, [pc, #468]	; (800d314 <HAL_RCC_OscConfig+0x27c>)
 800d13e:	681b      	ldr	r3, [r3, #0]
 800d140:	4a74      	ldr	r2, [pc, #464]	; (800d314 <HAL_RCC_OscConfig+0x27c>)
 800d142:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800d146:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800d148:	687b      	ldr	r3, [r7, #4]
 800d14a:	685b      	ldr	r3, [r3, #4]
 800d14c:	2b00      	cmp	r3, #0
 800d14e:	d013      	beq.n	800d178 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d150:	f7fc fd52 	bl	8009bf8 <HAL_GetTick>
 800d154:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800d156:	e008      	b.n	800d16a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800d158:	f7fc fd4e 	bl	8009bf8 <HAL_GetTick>
 800d15c:	4602      	mov	r2, r0
 800d15e:	693b      	ldr	r3, [r7, #16]
 800d160:	1ad3      	subs	r3, r2, r3
 800d162:	2b64      	cmp	r3, #100	; 0x64
 800d164:	d901      	bls.n	800d16a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800d166:	2303      	movs	r3, #3
 800d168:	e2a6      	b.n	800d6b8 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800d16a:	4b6a      	ldr	r3, [pc, #424]	; (800d314 <HAL_RCC_OscConfig+0x27c>)
 800d16c:	681b      	ldr	r3, [r3, #0]
 800d16e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d172:	2b00      	cmp	r3, #0
 800d174:	d0f0      	beq.n	800d158 <HAL_RCC_OscConfig+0xc0>
 800d176:	e014      	b.n	800d1a2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d178:	f7fc fd3e 	bl	8009bf8 <HAL_GetTick>
 800d17c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800d17e:	e008      	b.n	800d192 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800d180:	f7fc fd3a 	bl	8009bf8 <HAL_GetTick>
 800d184:	4602      	mov	r2, r0
 800d186:	693b      	ldr	r3, [r7, #16]
 800d188:	1ad3      	subs	r3, r2, r3
 800d18a:	2b64      	cmp	r3, #100	; 0x64
 800d18c:	d901      	bls.n	800d192 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800d18e:	2303      	movs	r3, #3
 800d190:	e292      	b.n	800d6b8 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800d192:	4b60      	ldr	r3, [pc, #384]	; (800d314 <HAL_RCC_OscConfig+0x27c>)
 800d194:	681b      	ldr	r3, [r3, #0]
 800d196:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d19a:	2b00      	cmp	r3, #0
 800d19c:	d1f0      	bne.n	800d180 <HAL_RCC_OscConfig+0xe8>
 800d19e:	e000      	b.n	800d1a2 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800d1a0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800d1a2:	687b      	ldr	r3, [r7, #4]
 800d1a4:	681b      	ldr	r3, [r3, #0]
 800d1a6:	f003 0302 	and.w	r3, r3, #2
 800d1aa:	2b00      	cmp	r3, #0
 800d1ac:	d075      	beq.n	800d29a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800d1ae:	4b59      	ldr	r3, [pc, #356]	; (800d314 <HAL_RCC_OscConfig+0x27c>)
 800d1b0:	689b      	ldr	r3, [r3, #8]
 800d1b2:	f003 030c 	and.w	r3, r3, #12
 800d1b6:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800d1b8:	4b56      	ldr	r3, [pc, #344]	; (800d314 <HAL_RCC_OscConfig+0x27c>)
 800d1ba:	68db      	ldr	r3, [r3, #12]
 800d1bc:	f003 0303 	and.w	r3, r3, #3
 800d1c0:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 800d1c2:	69bb      	ldr	r3, [r7, #24]
 800d1c4:	2b0c      	cmp	r3, #12
 800d1c6:	d102      	bne.n	800d1ce <HAL_RCC_OscConfig+0x136>
 800d1c8:	697b      	ldr	r3, [r7, #20]
 800d1ca:	2b02      	cmp	r3, #2
 800d1cc:	d002      	beq.n	800d1d4 <HAL_RCC_OscConfig+0x13c>
 800d1ce:	69bb      	ldr	r3, [r7, #24]
 800d1d0:	2b04      	cmp	r3, #4
 800d1d2:	d11f      	bne.n	800d214 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800d1d4:	4b4f      	ldr	r3, [pc, #316]	; (800d314 <HAL_RCC_OscConfig+0x27c>)
 800d1d6:	681b      	ldr	r3, [r3, #0]
 800d1d8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800d1dc:	2b00      	cmp	r3, #0
 800d1de:	d005      	beq.n	800d1ec <HAL_RCC_OscConfig+0x154>
 800d1e0:	687b      	ldr	r3, [r7, #4]
 800d1e2:	68db      	ldr	r3, [r3, #12]
 800d1e4:	2b00      	cmp	r3, #0
 800d1e6:	d101      	bne.n	800d1ec <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 800d1e8:	2301      	movs	r3, #1
 800d1ea:	e265      	b.n	800d6b8 <HAL_RCC_OscConfig+0x620>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800d1ec:	4b49      	ldr	r3, [pc, #292]	; (800d314 <HAL_RCC_OscConfig+0x27c>)
 800d1ee:	685b      	ldr	r3, [r3, #4]
 800d1f0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800d1f4:	687b      	ldr	r3, [r7, #4]
 800d1f6:	691b      	ldr	r3, [r3, #16]
 800d1f8:	061b      	lsls	r3, r3, #24
 800d1fa:	4946      	ldr	r1, [pc, #280]	; (800d314 <HAL_RCC_OscConfig+0x27c>)
 800d1fc:	4313      	orrs	r3, r2
 800d1fe:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800d200:	4b45      	ldr	r3, [pc, #276]	; (800d318 <HAL_RCC_OscConfig+0x280>)
 800d202:	681b      	ldr	r3, [r3, #0]
 800d204:	4618      	mov	r0, r3
 800d206:	f7fc fcab 	bl	8009b60 <HAL_InitTick>
 800d20a:	4603      	mov	r3, r0
 800d20c:	2b00      	cmp	r3, #0
 800d20e:	d043      	beq.n	800d298 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 800d210:	2301      	movs	r3, #1
 800d212:	e251      	b.n	800d6b8 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800d214:	687b      	ldr	r3, [r7, #4]
 800d216:	68db      	ldr	r3, [r3, #12]
 800d218:	2b00      	cmp	r3, #0
 800d21a:	d023      	beq.n	800d264 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800d21c:	4b3d      	ldr	r3, [pc, #244]	; (800d314 <HAL_RCC_OscConfig+0x27c>)
 800d21e:	681b      	ldr	r3, [r3, #0]
 800d220:	4a3c      	ldr	r2, [pc, #240]	; (800d314 <HAL_RCC_OscConfig+0x27c>)
 800d222:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800d226:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d228:	f7fc fce6 	bl	8009bf8 <HAL_GetTick>
 800d22c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800d22e:	e008      	b.n	800d242 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800d230:	f7fc fce2 	bl	8009bf8 <HAL_GetTick>
 800d234:	4602      	mov	r2, r0
 800d236:	693b      	ldr	r3, [r7, #16]
 800d238:	1ad3      	subs	r3, r2, r3
 800d23a:	2b02      	cmp	r3, #2
 800d23c:	d901      	bls.n	800d242 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800d23e:	2303      	movs	r3, #3
 800d240:	e23a      	b.n	800d6b8 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800d242:	4b34      	ldr	r3, [pc, #208]	; (800d314 <HAL_RCC_OscConfig+0x27c>)
 800d244:	681b      	ldr	r3, [r3, #0]
 800d246:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800d24a:	2b00      	cmp	r3, #0
 800d24c:	d0f0      	beq.n	800d230 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800d24e:	4b31      	ldr	r3, [pc, #196]	; (800d314 <HAL_RCC_OscConfig+0x27c>)
 800d250:	685b      	ldr	r3, [r3, #4]
 800d252:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800d256:	687b      	ldr	r3, [r7, #4]
 800d258:	691b      	ldr	r3, [r3, #16]
 800d25a:	061b      	lsls	r3, r3, #24
 800d25c:	492d      	ldr	r1, [pc, #180]	; (800d314 <HAL_RCC_OscConfig+0x27c>)
 800d25e:	4313      	orrs	r3, r2
 800d260:	604b      	str	r3, [r1, #4]
 800d262:	e01a      	b.n	800d29a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800d264:	4b2b      	ldr	r3, [pc, #172]	; (800d314 <HAL_RCC_OscConfig+0x27c>)
 800d266:	681b      	ldr	r3, [r3, #0]
 800d268:	4a2a      	ldr	r2, [pc, #168]	; (800d314 <HAL_RCC_OscConfig+0x27c>)
 800d26a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800d26e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d270:	f7fc fcc2 	bl	8009bf8 <HAL_GetTick>
 800d274:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800d276:	e008      	b.n	800d28a <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800d278:	f7fc fcbe 	bl	8009bf8 <HAL_GetTick>
 800d27c:	4602      	mov	r2, r0
 800d27e:	693b      	ldr	r3, [r7, #16]
 800d280:	1ad3      	subs	r3, r2, r3
 800d282:	2b02      	cmp	r3, #2
 800d284:	d901      	bls.n	800d28a <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800d286:	2303      	movs	r3, #3
 800d288:	e216      	b.n	800d6b8 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800d28a:	4b22      	ldr	r3, [pc, #136]	; (800d314 <HAL_RCC_OscConfig+0x27c>)
 800d28c:	681b      	ldr	r3, [r3, #0]
 800d28e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800d292:	2b00      	cmp	r3, #0
 800d294:	d1f0      	bne.n	800d278 <HAL_RCC_OscConfig+0x1e0>
 800d296:	e000      	b.n	800d29a <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800d298:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800d29a:	687b      	ldr	r3, [r7, #4]
 800d29c:	681b      	ldr	r3, [r3, #0]
 800d29e:	f003 0308 	and.w	r3, r3, #8
 800d2a2:	2b00      	cmp	r3, #0
 800d2a4:	d041      	beq.n	800d32a <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800d2a6:	687b      	ldr	r3, [r7, #4]
 800d2a8:	695b      	ldr	r3, [r3, #20]
 800d2aa:	2b00      	cmp	r3, #0
 800d2ac:	d01c      	beq.n	800d2e8 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800d2ae:	4b19      	ldr	r3, [pc, #100]	; (800d314 <HAL_RCC_OscConfig+0x27c>)
 800d2b0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800d2b4:	4a17      	ldr	r2, [pc, #92]	; (800d314 <HAL_RCC_OscConfig+0x27c>)
 800d2b6:	f043 0301 	orr.w	r3, r3, #1
 800d2ba:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800d2be:	f7fc fc9b 	bl	8009bf8 <HAL_GetTick>
 800d2c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800d2c4:	e008      	b.n	800d2d8 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800d2c6:	f7fc fc97 	bl	8009bf8 <HAL_GetTick>
 800d2ca:	4602      	mov	r2, r0
 800d2cc:	693b      	ldr	r3, [r7, #16]
 800d2ce:	1ad3      	subs	r3, r2, r3
 800d2d0:	2b02      	cmp	r3, #2
 800d2d2:	d901      	bls.n	800d2d8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800d2d4:	2303      	movs	r3, #3
 800d2d6:	e1ef      	b.n	800d6b8 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800d2d8:	4b0e      	ldr	r3, [pc, #56]	; (800d314 <HAL_RCC_OscConfig+0x27c>)
 800d2da:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800d2de:	f003 0302 	and.w	r3, r3, #2
 800d2e2:	2b00      	cmp	r3, #0
 800d2e4:	d0ef      	beq.n	800d2c6 <HAL_RCC_OscConfig+0x22e>
 800d2e6:	e020      	b.n	800d32a <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800d2e8:	4b0a      	ldr	r3, [pc, #40]	; (800d314 <HAL_RCC_OscConfig+0x27c>)
 800d2ea:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800d2ee:	4a09      	ldr	r2, [pc, #36]	; (800d314 <HAL_RCC_OscConfig+0x27c>)
 800d2f0:	f023 0301 	bic.w	r3, r3, #1
 800d2f4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800d2f8:	f7fc fc7e 	bl	8009bf8 <HAL_GetTick>
 800d2fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800d2fe:	e00d      	b.n	800d31c <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800d300:	f7fc fc7a 	bl	8009bf8 <HAL_GetTick>
 800d304:	4602      	mov	r2, r0
 800d306:	693b      	ldr	r3, [r7, #16]
 800d308:	1ad3      	subs	r3, r2, r3
 800d30a:	2b02      	cmp	r3, #2
 800d30c:	d906      	bls.n	800d31c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800d30e:	2303      	movs	r3, #3
 800d310:	e1d2      	b.n	800d6b8 <HAL_RCC_OscConfig+0x620>
 800d312:	bf00      	nop
 800d314:	40021000 	.word	0x40021000
 800d318:	200003ac 	.word	0x200003ac
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800d31c:	4b8c      	ldr	r3, [pc, #560]	; (800d550 <HAL_RCC_OscConfig+0x4b8>)
 800d31e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800d322:	f003 0302 	and.w	r3, r3, #2
 800d326:	2b00      	cmp	r3, #0
 800d328:	d1ea      	bne.n	800d300 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800d32a:	687b      	ldr	r3, [r7, #4]
 800d32c:	681b      	ldr	r3, [r3, #0]
 800d32e:	f003 0304 	and.w	r3, r3, #4
 800d332:	2b00      	cmp	r3, #0
 800d334:	f000 80a6 	beq.w	800d484 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 800d338:	2300      	movs	r3, #0
 800d33a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800d33c:	4b84      	ldr	r3, [pc, #528]	; (800d550 <HAL_RCC_OscConfig+0x4b8>)
 800d33e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d340:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800d344:	2b00      	cmp	r3, #0
 800d346:	d101      	bne.n	800d34c <HAL_RCC_OscConfig+0x2b4>
 800d348:	2301      	movs	r3, #1
 800d34a:	e000      	b.n	800d34e <HAL_RCC_OscConfig+0x2b6>
 800d34c:	2300      	movs	r3, #0
 800d34e:	2b00      	cmp	r3, #0
 800d350:	d00d      	beq.n	800d36e <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800d352:	4b7f      	ldr	r3, [pc, #508]	; (800d550 <HAL_RCC_OscConfig+0x4b8>)
 800d354:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d356:	4a7e      	ldr	r2, [pc, #504]	; (800d550 <HAL_RCC_OscConfig+0x4b8>)
 800d358:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800d35c:	6593      	str	r3, [r2, #88]	; 0x58
 800d35e:	4b7c      	ldr	r3, [pc, #496]	; (800d550 <HAL_RCC_OscConfig+0x4b8>)
 800d360:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d362:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800d366:	60fb      	str	r3, [r7, #12]
 800d368:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800d36a:	2301      	movs	r3, #1
 800d36c:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800d36e:	4b79      	ldr	r3, [pc, #484]	; (800d554 <HAL_RCC_OscConfig+0x4bc>)
 800d370:	681b      	ldr	r3, [r3, #0]
 800d372:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d376:	2b00      	cmp	r3, #0
 800d378:	d118      	bne.n	800d3ac <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800d37a:	4b76      	ldr	r3, [pc, #472]	; (800d554 <HAL_RCC_OscConfig+0x4bc>)
 800d37c:	681b      	ldr	r3, [r3, #0]
 800d37e:	4a75      	ldr	r2, [pc, #468]	; (800d554 <HAL_RCC_OscConfig+0x4bc>)
 800d380:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800d384:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800d386:	f7fc fc37 	bl	8009bf8 <HAL_GetTick>
 800d38a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800d38c:	e008      	b.n	800d3a0 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800d38e:	f7fc fc33 	bl	8009bf8 <HAL_GetTick>
 800d392:	4602      	mov	r2, r0
 800d394:	693b      	ldr	r3, [r7, #16]
 800d396:	1ad3      	subs	r3, r2, r3
 800d398:	2b02      	cmp	r3, #2
 800d39a:	d901      	bls.n	800d3a0 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 800d39c:	2303      	movs	r3, #3
 800d39e:	e18b      	b.n	800d6b8 <HAL_RCC_OscConfig+0x620>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800d3a0:	4b6c      	ldr	r3, [pc, #432]	; (800d554 <HAL_RCC_OscConfig+0x4bc>)
 800d3a2:	681b      	ldr	r3, [r3, #0]
 800d3a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d3a8:	2b00      	cmp	r3, #0
 800d3aa:	d0f0      	beq.n	800d38e <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800d3ac:	687b      	ldr	r3, [r7, #4]
 800d3ae:	689b      	ldr	r3, [r3, #8]
 800d3b0:	2b01      	cmp	r3, #1
 800d3b2:	d108      	bne.n	800d3c6 <HAL_RCC_OscConfig+0x32e>
 800d3b4:	4b66      	ldr	r3, [pc, #408]	; (800d550 <HAL_RCC_OscConfig+0x4b8>)
 800d3b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d3ba:	4a65      	ldr	r2, [pc, #404]	; (800d550 <HAL_RCC_OscConfig+0x4b8>)
 800d3bc:	f043 0301 	orr.w	r3, r3, #1
 800d3c0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800d3c4:	e024      	b.n	800d410 <HAL_RCC_OscConfig+0x378>
 800d3c6:	687b      	ldr	r3, [r7, #4]
 800d3c8:	689b      	ldr	r3, [r3, #8]
 800d3ca:	2b05      	cmp	r3, #5
 800d3cc:	d110      	bne.n	800d3f0 <HAL_RCC_OscConfig+0x358>
 800d3ce:	4b60      	ldr	r3, [pc, #384]	; (800d550 <HAL_RCC_OscConfig+0x4b8>)
 800d3d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d3d4:	4a5e      	ldr	r2, [pc, #376]	; (800d550 <HAL_RCC_OscConfig+0x4b8>)
 800d3d6:	f043 0304 	orr.w	r3, r3, #4
 800d3da:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800d3de:	4b5c      	ldr	r3, [pc, #368]	; (800d550 <HAL_RCC_OscConfig+0x4b8>)
 800d3e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d3e4:	4a5a      	ldr	r2, [pc, #360]	; (800d550 <HAL_RCC_OscConfig+0x4b8>)
 800d3e6:	f043 0301 	orr.w	r3, r3, #1
 800d3ea:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800d3ee:	e00f      	b.n	800d410 <HAL_RCC_OscConfig+0x378>
 800d3f0:	4b57      	ldr	r3, [pc, #348]	; (800d550 <HAL_RCC_OscConfig+0x4b8>)
 800d3f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d3f6:	4a56      	ldr	r2, [pc, #344]	; (800d550 <HAL_RCC_OscConfig+0x4b8>)
 800d3f8:	f023 0301 	bic.w	r3, r3, #1
 800d3fc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800d400:	4b53      	ldr	r3, [pc, #332]	; (800d550 <HAL_RCC_OscConfig+0x4b8>)
 800d402:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d406:	4a52      	ldr	r2, [pc, #328]	; (800d550 <HAL_RCC_OscConfig+0x4b8>)
 800d408:	f023 0304 	bic.w	r3, r3, #4
 800d40c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800d410:	687b      	ldr	r3, [r7, #4]
 800d412:	689b      	ldr	r3, [r3, #8]
 800d414:	2b00      	cmp	r3, #0
 800d416:	d016      	beq.n	800d446 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800d418:	f7fc fbee 	bl	8009bf8 <HAL_GetTick>
 800d41c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800d41e:	e00a      	b.n	800d436 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800d420:	f7fc fbea 	bl	8009bf8 <HAL_GetTick>
 800d424:	4602      	mov	r2, r0
 800d426:	693b      	ldr	r3, [r7, #16]
 800d428:	1ad3      	subs	r3, r2, r3
 800d42a:	f241 3288 	movw	r2, #5000	; 0x1388
 800d42e:	4293      	cmp	r3, r2
 800d430:	d901      	bls.n	800d436 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800d432:	2303      	movs	r3, #3
 800d434:	e140      	b.n	800d6b8 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800d436:	4b46      	ldr	r3, [pc, #280]	; (800d550 <HAL_RCC_OscConfig+0x4b8>)
 800d438:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d43c:	f003 0302 	and.w	r3, r3, #2
 800d440:	2b00      	cmp	r3, #0
 800d442:	d0ed      	beq.n	800d420 <HAL_RCC_OscConfig+0x388>
 800d444:	e015      	b.n	800d472 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800d446:	f7fc fbd7 	bl	8009bf8 <HAL_GetTick>
 800d44a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800d44c:	e00a      	b.n	800d464 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800d44e:	f7fc fbd3 	bl	8009bf8 <HAL_GetTick>
 800d452:	4602      	mov	r2, r0
 800d454:	693b      	ldr	r3, [r7, #16]
 800d456:	1ad3      	subs	r3, r2, r3
 800d458:	f241 3288 	movw	r2, #5000	; 0x1388
 800d45c:	4293      	cmp	r3, r2
 800d45e:	d901      	bls.n	800d464 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 800d460:	2303      	movs	r3, #3
 800d462:	e129      	b.n	800d6b8 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800d464:	4b3a      	ldr	r3, [pc, #232]	; (800d550 <HAL_RCC_OscConfig+0x4b8>)
 800d466:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d46a:	f003 0302 	and.w	r3, r3, #2
 800d46e:	2b00      	cmp	r3, #0
 800d470:	d1ed      	bne.n	800d44e <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800d472:	7ffb      	ldrb	r3, [r7, #31]
 800d474:	2b01      	cmp	r3, #1
 800d476:	d105      	bne.n	800d484 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800d478:	4b35      	ldr	r3, [pc, #212]	; (800d550 <HAL_RCC_OscConfig+0x4b8>)
 800d47a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d47c:	4a34      	ldr	r2, [pc, #208]	; (800d550 <HAL_RCC_OscConfig+0x4b8>)
 800d47e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800d482:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800d484:	687b      	ldr	r3, [r7, #4]
 800d486:	681b      	ldr	r3, [r3, #0]
 800d488:	f003 0320 	and.w	r3, r3, #32
 800d48c:	2b00      	cmp	r3, #0
 800d48e:	d03c      	beq.n	800d50a <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800d490:	687b      	ldr	r3, [r7, #4]
 800d492:	699b      	ldr	r3, [r3, #24]
 800d494:	2b00      	cmp	r3, #0
 800d496:	d01c      	beq.n	800d4d2 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800d498:	4b2d      	ldr	r3, [pc, #180]	; (800d550 <HAL_RCC_OscConfig+0x4b8>)
 800d49a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800d49e:	4a2c      	ldr	r2, [pc, #176]	; (800d550 <HAL_RCC_OscConfig+0x4b8>)
 800d4a0:	f043 0301 	orr.w	r3, r3, #1
 800d4a4:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800d4a8:	f7fc fba6 	bl	8009bf8 <HAL_GetTick>
 800d4ac:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800d4ae:	e008      	b.n	800d4c2 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800d4b0:	f7fc fba2 	bl	8009bf8 <HAL_GetTick>
 800d4b4:	4602      	mov	r2, r0
 800d4b6:	693b      	ldr	r3, [r7, #16]
 800d4b8:	1ad3      	subs	r3, r2, r3
 800d4ba:	2b02      	cmp	r3, #2
 800d4bc:	d901      	bls.n	800d4c2 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 800d4be:	2303      	movs	r3, #3
 800d4c0:	e0fa      	b.n	800d6b8 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800d4c2:	4b23      	ldr	r3, [pc, #140]	; (800d550 <HAL_RCC_OscConfig+0x4b8>)
 800d4c4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800d4c8:	f003 0302 	and.w	r3, r3, #2
 800d4cc:	2b00      	cmp	r3, #0
 800d4ce:	d0ef      	beq.n	800d4b0 <HAL_RCC_OscConfig+0x418>
 800d4d0:	e01b      	b.n	800d50a <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800d4d2:	4b1f      	ldr	r3, [pc, #124]	; (800d550 <HAL_RCC_OscConfig+0x4b8>)
 800d4d4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800d4d8:	4a1d      	ldr	r2, [pc, #116]	; (800d550 <HAL_RCC_OscConfig+0x4b8>)
 800d4da:	f023 0301 	bic.w	r3, r3, #1
 800d4de:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800d4e2:	f7fc fb89 	bl	8009bf8 <HAL_GetTick>
 800d4e6:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800d4e8:	e008      	b.n	800d4fc <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800d4ea:	f7fc fb85 	bl	8009bf8 <HAL_GetTick>
 800d4ee:	4602      	mov	r2, r0
 800d4f0:	693b      	ldr	r3, [r7, #16]
 800d4f2:	1ad3      	subs	r3, r2, r3
 800d4f4:	2b02      	cmp	r3, #2
 800d4f6:	d901      	bls.n	800d4fc <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 800d4f8:	2303      	movs	r3, #3
 800d4fa:	e0dd      	b.n	800d6b8 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800d4fc:	4b14      	ldr	r3, [pc, #80]	; (800d550 <HAL_RCC_OscConfig+0x4b8>)
 800d4fe:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800d502:	f003 0302 	and.w	r3, r3, #2
 800d506:	2b00      	cmp	r3, #0
 800d508:	d1ef      	bne.n	800d4ea <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800d50a:	687b      	ldr	r3, [r7, #4]
 800d50c:	69db      	ldr	r3, [r3, #28]
 800d50e:	2b00      	cmp	r3, #0
 800d510:	f000 80d1 	beq.w	800d6b6 <HAL_RCC_OscConfig+0x61e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800d514:	4b0e      	ldr	r3, [pc, #56]	; (800d550 <HAL_RCC_OscConfig+0x4b8>)
 800d516:	689b      	ldr	r3, [r3, #8]
 800d518:	f003 030c 	and.w	r3, r3, #12
 800d51c:	2b0c      	cmp	r3, #12
 800d51e:	f000 808b 	beq.w	800d638 <HAL_RCC_OscConfig+0x5a0>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800d522:	687b      	ldr	r3, [r7, #4]
 800d524:	69db      	ldr	r3, [r3, #28]
 800d526:	2b02      	cmp	r3, #2
 800d528:	d15e      	bne.n	800d5e8 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800d52a:	4b09      	ldr	r3, [pc, #36]	; (800d550 <HAL_RCC_OscConfig+0x4b8>)
 800d52c:	681b      	ldr	r3, [r3, #0]
 800d52e:	4a08      	ldr	r2, [pc, #32]	; (800d550 <HAL_RCC_OscConfig+0x4b8>)
 800d530:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800d534:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d536:	f7fc fb5f 	bl	8009bf8 <HAL_GetTick>
 800d53a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800d53c:	e00c      	b.n	800d558 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800d53e:	f7fc fb5b 	bl	8009bf8 <HAL_GetTick>
 800d542:	4602      	mov	r2, r0
 800d544:	693b      	ldr	r3, [r7, #16]
 800d546:	1ad3      	subs	r3, r2, r3
 800d548:	2b02      	cmp	r3, #2
 800d54a:	d905      	bls.n	800d558 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 800d54c:	2303      	movs	r3, #3
 800d54e:	e0b3      	b.n	800d6b8 <HAL_RCC_OscConfig+0x620>
 800d550:	40021000 	.word	0x40021000
 800d554:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800d558:	4b59      	ldr	r3, [pc, #356]	; (800d6c0 <HAL_RCC_OscConfig+0x628>)
 800d55a:	681b      	ldr	r3, [r3, #0]
 800d55c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800d560:	2b00      	cmp	r3, #0
 800d562:	d1ec      	bne.n	800d53e <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800d564:	4b56      	ldr	r3, [pc, #344]	; (800d6c0 <HAL_RCC_OscConfig+0x628>)
 800d566:	68da      	ldr	r2, [r3, #12]
 800d568:	4b56      	ldr	r3, [pc, #344]	; (800d6c4 <HAL_RCC_OscConfig+0x62c>)
 800d56a:	4013      	ands	r3, r2
 800d56c:	687a      	ldr	r2, [r7, #4]
 800d56e:	6a11      	ldr	r1, [r2, #32]
 800d570:	687a      	ldr	r2, [r7, #4]
 800d572:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800d574:	3a01      	subs	r2, #1
 800d576:	0112      	lsls	r2, r2, #4
 800d578:	4311      	orrs	r1, r2
 800d57a:	687a      	ldr	r2, [r7, #4]
 800d57c:	6a92      	ldr	r2, [r2, #40]	; 0x28
 800d57e:	0212      	lsls	r2, r2, #8
 800d580:	4311      	orrs	r1, r2
 800d582:	687a      	ldr	r2, [r7, #4]
 800d584:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800d586:	0852      	lsrs	r2, r2, #1
 800d588:	3a01      	subs	r2, #1
 800d58a:	0552      	lsls	r2, r2, #21
 800d58c:	4311      	orrs	r1, r2
 800d58e:	687a      	ldr	r2, [r7, #4]
 800d590:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800d592:	0852      	lsrs	r2, r2, #1
 800d594:	3a01      	subs	r2, #1
 800d596:	0652      	lsls	r2, r2, #25
 800d598:	4311      	orrs	r1, r2
 800d59a:	687a      	ldr	r2, [r7, #4]
 800d59c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800d59e:	06d2      	lsls	r2, r2, #27
 800d5a0:	430a      	orrs	r2, r1
 800d5a2:	4947      	ldr	r1, [pc, #284]	; (800d6c0 <HAL_RCC_OscConfig+0x628>)
 800d5a4:	4313      	orrs	r3, r2
 800d5a6:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800d5a8:	4b45      	ldr	r3, [pc, #276]	; (800d6c0 <HAL_RCC_OscConfig+0x628>)
 800d5aa:	681b      	ldr	r3, [r3, #0]
 800d5ac:	4a44      	ldr	r2, [pc, #272]	; (800d6c0 <HAL_RCC_OscConfig+0x628>)
 800d5ae:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800d5b2:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800d5b4:	4b42      	ldr	r3, [pc, #264]	; (800d6c0 <HAL_RCC_OscConfig+0x628>)
 800d5b6:	68db      	ldr	r3, [r3, #12]
 800d5b8:	4a41      	ldr	r2, [pc, #260]	; (800d6c0 <HAL_RCC_OscConfig+0x628>)
 800d5ba:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800d5be:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d5c0:	f7fc fb1a 	bl	8009bf8 <HAL_GetTick>
 800d5c4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800d5c6:	e008      	b.n	800d5da <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800d5c8:	f7fc fb16 	bl	8009bf8 <HAL_GetTick>
 800d5cc:	4602      	mov	r2, r0
 800d5ce:	693b      	ldr	r3, [r7, #16]
 800d5d0:	1ad3      	subs	r3, r2, r3
 800d5d2:	2b02      	cmp	r3, #2
 800d5d4:	d901      	bls.n	800d5da <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 800d5d6:	2303      	movs	r3, #3
 800d5d8:	e06e      	b.n	800d6b8 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800d5da:	4b39      	ldr	r3, [pc, #228]	; (800d6c0 <HAL_RCC_OscConfig+0x628>)
 800d5dc:	681b      	ldr	r3, [r3, #0]
 800d5de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800d5e2:	2b00      	cmp	r3, #0
 800d5e4:	d0f0      	beq.n	800d5c8 <HAL_RCC_OscConfig+0x530>
 800d5e6:	e066      	b.n	800d6b6 <HAL_RCC_OscConfig+0x61e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800d5e8:	4b35      	ldr	r3, [pc, #212]	; (800d6c0 <HAL_RCC_OscConfig+0x628>)
 800d5ea:	681b      	ldr	r3, [r3, #0]
 800d5ec:	4a34      	ldr	r2, [pc, #208]	; (800d6c0 <HAL_RCC_OscConfig+0x628>)
 800d5ee:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800d5f2:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 800d5f4:	4b32      	ldr	r3, [pc, #200]	; (800d6c0 <HAL_RCC_OscConfig+0x628>)
 800d5f6:	68db      	ldr	r3, [r3, #12]
 800d5f8:	4a31      	ldr	r2, [pc, #196]	; (800d6c0 <HAL_RCC_OscConfig+0x628>)
 800d5fa:	f023 0303 	bic.w	r3, r3, #3
 800d5fe:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 800d600:	4b2f      	ldr	r3, [pc, #188]	; (800d6c0 <HAL_RCC_OscConfig+0x628>)
 800d602:	68db      	ldr	r3, [r3, #12]
 800d604:	4a2e      	ldr	r2, [pc, #184]	; (800d6c0 <HAL_RCC_OscConfig+0x628>)
 800d606:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 800d60a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800d60e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d610:	f7fc faf2 	bl	8009bf8 <HAL_GetTick>
 800d614:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800d616:	e008      	b.n	800d62a <HAL_RCC_OscConfig+0x592>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800d618:	f7fc faee 	bl	8009bf8 <HAL_GetTick>
 800d61c:	4602      	mov	r2, r0
 800d61e:	693b      	ldr	r3, [r7, #16]
 800d620:	1ad3      	subs	r3, r2, r3
 800d622:	2b02      	cmp	r3, #2
 800d624:	d901      	bls.n	800d62a <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 800d626:	2303      	movs	r3, #3
 800d628:	e046      	b.n	800d6b8 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800d62a:	4b25      	ldr	r3, [pc, #148]	; (800d6c0 <HAL_RCC_OscConfig+0x628>)
 800d62c:	681b      	ldr	r3, [r3, #0]
 800d62e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800d632:	2b00      	cmp	r3, #0
 800d634:	d1f0      	bne.n	800d618 <HAL_RCC_OscConfig+0x580>
 800d636:	e03e      	b.n	800d6b6 <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800d638:	687b      	ldr	r3, [r7, #4]
 800d63a:	69db      	ldr	r3, [r3, #28]
 800d63c:	2b01      	cmp	r3, #1
 800d63e:	d101      	bne.n	800d644 <HAL_RCC_OscConfig+0x5ac>
      {
        return HAL_ERROR;
 800d640:	2301      	movs	r3, #1
 800d642:	e039      	b.n	800d6b8 <HAL_RCC_OscConfig+0x620>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 800d644:	4b1e      	ldr	r3, [pc, #120]	; (800d6c0 <HAL_RCC_OscConfig+0x628>)
 800d646:	68db      	ldr	r3, [r3, #12]
 800d648:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800d64a:	697b      	ldr	r3, [r7, #20]
 800d64c:	f003 0203 	and.w	r2, r3, #3
 800d650:	687b      	ldr	r3, [r7, #4]
 800d652:	6a1b      	ldr	r3, [r3, #32]
 800d654:	429a      	cmp	r2, r3
 800d656:	d12c      	bne.n	800d6b2 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800d658:	697b      	ldr	r3, [r7, #20]
 800d65a:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800d65e:	687b      	ldr	r3, [r7, #4]
 800d660:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d662:	3b01      	subs	r3, #1
 800d664:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800d666:	429a      	cmp	r2, r3
 800d668:	d123      	bne.n	800d6b2 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800d66a:	697b      	ldr	r3, [r7, #20]
 800d66c:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800d670:	687b      	ldr	r3, [r7, #4]
 800d672:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d674:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800d676:	429a      	cmp	r2, r3
 800d678:	d11b      	bne.n	800d6b2 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800d67a:	697b      	ldr	r3, [r7, #20]
 800d67c:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800d680:	687b      	ldr	r3, [r7, #4]
 800d682:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d684:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800d686:	429a      	cmp	r2, r3
 800d688:	d113      	bne.n	800d6b2 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800d68a:	697b      	ldr	r3, [r7, #20]
 800d68c:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800d690:	687b      	ldr	r3, [r7, #4]
 800d692:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d694:	085b      	lsrs	r3, r3, #1
 800d696:	3b01      	subs	r3, #1
 800d698:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800d69a:	429a      	cmp	r2, r3
 800d69c:	d109      	bne.n	800d6b2 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800d69e:	697b      	ldr	r3, [r7, #20]
 800d6a0:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800d6a4:	687b      	ldr	r3, [r7, #4]
 800d6a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d6a8:	085b      	lsrs	r3, r3, #1
 800d6aa:	3b01      	subs	r3, #1
 800d6ac:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800d6ae:	429a      	cmp	r2, r3
 800d6b0:	d001      	beq.n	800d6b6 <HAL_RCC_OscConfig+0x61e>
      {
        return HAL_ERROR;
 800d6b2:	2301      	movs	r3, #1
 800d6b4:	e000      	b.n	800d6b8 <HAL_RCC_OscConfig+0x620>
      }
    }
  }
  }

  return HAL_OK;
 800d6b6:	2300      	movs	r3, #0
}
 800d6b8:	4618      	mov	r0, r3
 800d6ba:	3720      	adds	r7, #32
 800d6bc:	46bd      	mov	sp, r7
 800d6be:	bd80      	pop	{r7, pc}
 800d6c0:	40021000 	.word	0x40021000
 800d6c4:	019f800c 	.word	0x019f800c

0800d6c8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800d6c8:	b580      	push	{r7, lr}
 800d6ca:	b086      	sub	sp, #24
 800d6cc:	af00      	add	r7, sp, #0
 800d6ce:	6078      	str	r0, [r7, #4]
 800d6d0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800d6d2:	2300      	movs	r3, #0
 800d6d4:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800d6d6:	687b      	ldr	r3, [r7, #4]
 800d6d8:	2b00      	cmp	r3, #0
 800d6da:	d101      	bne.n	800d6e0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800d6dc:	2301      	movs	r3, #1
 800d6de:	e11e      	b.n	800d91e <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800d6e0:	4b91      	ldr	r3, [pc, #580]	; (800d928 <HAL_RCC_ClockConfig+0x260>)
 800d6e2:	681b      	ldr	r3, [r3, #0]
 800d6e4:	f003 030f 	and.w	r3, r3, #15
 800d6e8:	683a      	ldr	r2, [r7, #0]
 800d6ea:	429a      	cmp	r2, r3
 800d6ec:	d910      	bls.n	800d710 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800d6ee:	4b8e      	ldr	r3, [pc, #568]	; (800d928 <HAL_RCC_ClockConfig+0x260>)
 800d6f0:	681b      	ldr	r3, [r3, #0]
 800d6f2:	f023 020f 	bic.w	r2, r3, #15
 800d6f6:	498c      	ldr	r1, [pc, #560]	; (800d928 <HAL_RCC_ClockConfig+0x260>)
 800d6f8:	683b      	ldr	r3, [r7, #0]
 800d6fa:	4313      	orrs	r3, r2
 800d6fc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800d6fe:	4b8a      	ldr	r3, [pc, #552]	; (800d928 <HAL_RCC_ClockConfig+0x260>)
 800d700:	681b      	ldr	r3, [r3, #0]
 800d702:	f003 030f 	and.w	r3, r3, #15
 800d706:	683a      	ldr	r2, [r7, #0]
 800d708:	429a      	cmp	r2, r3
 800d70a:	d001      	beq.n	800d710 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800d70c:	2301      	movs	r3, #1
 800d70e:	e106      	b.n	800d91e <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800d710:	687b      	ldr	r3, [r7, #4]
 800d712:	681b      	ldr	r3, [r3, #0]
 800d714:	f003 0301 	and.w	r3, r3, #1
 800d718:	2b00      	cmp	r3, #0
 800d71a:	d073      	beq.n	800d804 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800d71c:	687b      	ldr	r3, [r7, #4]
 800d71e:	685b      	ldr	r3, [r3, #4]
 800d720:	2b03      	cmp	r3, #3
 800d722:	d129      	bne.n	800d778 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800d724:	4b81      	ldr	r3, [pc, #516]	; (800d92c <HAL_RCC_ClockConfig+0x264>)
 800d726:	681b      	ldr	r3, [r3, #0]
 800d728:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800d72c:	2b00      	cmp	r3, #0
 800d72e:	d101      	bne.n	800d734 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 800d730:	2301      	movs	r3, #1
 800d732:	e0f4      	b.n	800d91e <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 800d734:	f000 f99c 	bl	800da70 <RCC_GetSysClockFreqFromPLLSource>
 800d738:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800d73a:	693b      	ldr	r3, [r7, #16]
 800d73c:	4a7c      	ldr	r2, [pc, #496]	; (800d930 <HAL_RCC_ClockConfig+0x268>)
 800d73e:	4293      	cmp	r3, r2
 800d740:	d93f      	bls.n	800d7c2 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800d742:	4b7a      	ldr	r3, [pc, #488]	; (800d92c <HAL_RCC_ClockConfig+0x264>)
 800d744:	689b      	ldr	r3, [r3, #8]
 800d746:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800d74a:	2b00      	cmp	r3, #0
 800d74c:	d009      	beq.n	800d762 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800d74e:	687b      	ldr	r3, [r7, #4]
 800d750:	681b      	ldr	r3, [r3, #0]
 800d752:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800d756:	2b00      	cmp	r3, #0
 800d758:	d033      	beq.n	800d7c2 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800d75a:	687b      	ldr	r3, [r7, #4]
 800d75c:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800d75e:	2b00      	cmp	r3, #0
 800d760:	d12f      	bne.n	800d7c2 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800d762:	4b72      	ldr	r3, [pc, #456]	; (800d92c <HAL_RCC_ClockConfig+0x264>)
 800d764:	689b      	ldr	r3, [r3, #8]
 800d766:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800d76a:	4a70      	ldr	r2, [pc, #448]	; (800d92c <HAL_RCC_ClockConfig+0x264>)
 800d76c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d770:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800d772:	2380      	movs	r3, #128	; 0x80
 800d774:	617b      	str	r3, [r7, #20]
 800d776:	e024      	b.n	800d7c2 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800d778:	687b      	ldr	r3, [r7, #4]
 800d77a:	685b      	ldr	r3, [r3, #4]
 800d77c:	2b02      	cmp	r3, #2
 800d77e:	d107      	bne.n	800d790 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800d780:	4b6a      	ldr	r3, [pc, #424]	; (800d92c <HAL_RCC_ClockConfig+0x264>)
 800d782:	681b      	ldr	r3, [r3, #0]
 800d784:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d788:	2b00      	cmp	r3, #0
 800d78a:	d109      	bne.n	800d7a0 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800d78c:	2301      	movs	r3, #1
 800d78e:	e0c6      	b.n	800d91e <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800d790:	4b66      	ldr	r3, [pc, #408]	; (800d92c <HAL_RCC_ClockConfig+0x264>)
 800d792:	681b      	ldr	r3, [r3, #0]
 800d794:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800d798:	2b00      	cmp	r3, #0
 800d79a:	d101      	bne.n	800d7a0 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800d79c:	2301      	movs	r3, #1
 800d79e:	e0be      	b.n	800d91e <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 800d7a0:	f000 f8ce 	bl	800d940 <HAL_RCC_GetSysClockFreq>
 800d7a4:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800d7a6:	693b      	ldr	r3, [r7, #16]
 800d7a8:	4a61      	ldr	r2, [pc, #388]	; (800d930 <HAL_RCC_ClockConfig+0x268>)
 800d7aa:	4293      	cmp	r3, r2
 800d7ac:	d909      	bls.n	800d7c2 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800d7ae:	4b5f      	ldr	r3, [pc, #380]	; (800d92c <HAL_RCC_ClockConfig+0x264>)
 800d7b0:	689b      	ldr	r3, [r3, #8]
 800d7b2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800d7b6:	4a5d      	ldr	r2, [pc, #372]	; (800d92c <HAL_RCC_ClockConfig+0x264>)
 800d7b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d7bc:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800d7be:	2380      	movs	r3, #128	; 0x80
 800d7c0:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800d7c2:	4b5a      	ldr	r3, [pc, #360]	; (800d92c <HAL_RCC_ClockConfig+0x264>)
 800d7c4:	689b      	ldr	r3, [r3, #8]
 800d7c6:	f023 0203 	bic.w	r2, r3, #3
 800d7ca:	687b      	ldr	r3, [r7, #4]
 800d7cc:	685b      	ldr	r3, [r3, #4]
 800d7ce:	4957      	ldr	r1, [pc, #348]	; (800d92c <HAL_RCC_ClockConfig+0x264>)
 800d7d0:	4313      	orrs	r3, r2
 800d7d2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d7d4:	f7fc fa10 	bl	8009bf8 <HAL_GetTick>
 800d7d8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800d7da:	e00a      	b.n	800d7f2 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800d7dc:	f7fc fa0c 	bl	8009bf8 <HAL_GetTick>
 800d7e0:	4602      	mov	r2, r0
 800d7e2:	68fb      	ldr	r3, [r7, #12]
 800d7e4:	1ad3      	subs	r3, r2, r3
 800d7e6:	f241 3288 	movw	r2, #5000	; 0x1388
 800d7ea:	4293      	cmp	r3, r2
 800d7ec:	d901      	bls.n	800d7f2 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 800d7ee:	2303      	movs	r3, #3
 800d7f0:	e095      	b.n	800d91e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800d7f2:	4b4e      	ldr	r3, [pc, #312]	; (800d92c <HAL_RCC_ClockConfig+0x264>)
 800d7f4:	689b      	ldr	r3, [r3, #8]
 800d7f6:	f003 020c 	and.w	r2, r3, #12
 800d7fa:	687b      	ldr	r3, [r7, #4]
 800d7fc:	685b      	ldr	r3, [r3, #4]
 800d7fe:	009b      	lsls	r3, r3, #2
 800d800:	429a      	cmp	r2, r3
 800d802:	d1eb      	bne.n	800d7dc <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800d804:	687b      	ldr	r3, [r7, #4]
 800d806:	681b      	ldr	r3, [r3, #0]
 800d808:	f003 0302 	and.w	r3, r3, #2
 800d80c:	2b00      	cmp	r3, #0
 800d80e:	d023      	beq.n	800d858 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800d810:	687b      	ldr	r3, [r7, #4]
 800d812:	681b      	ldr	r3, [r3, #0]
 800d814:	f003 0304 	and.w	r3, r3, #4
 800d818:	2b00      	cmp	r3, #0
 800d81a:	d005      	beq.n	800d828 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800d81c:	4b43      	ldr	r3, [pc, #268]	; (800d92c <HAL_RCC_ClockConfig+0x264>)
 800d81e:	689b      	ldr	r3, [r3, #8]
 800d820:	4a42      	ldr	r2, [pc, #264]	; (800d92c <HAL_RCC_ClockConfig+0x264>)
 800d822:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800d826:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800d828:	687b      	ldr	r3, [r7, #4]
 800d82a:	681b      	ldr	r3, [r3, #0]
 800d82c:	f003 0308 	and.w	r3, r3, #8
 800d830:	2b00      	cmp	r3, #0
 800d832:	d007      	beq.n	800d844 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 800d834:	4b3d      	ldr	r3, [pc, #244]	; (800d92c <HAL_RCC_ClockConfig+0x264>)
 800d836:	689b      	ldr	r3, [r3, #8]
 800d838:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800d83c:	4a3b      	ldr	r2, [pc, #236]	; (800d92c <HAL_RCC_ClockConfig+0x264>)
 800d83e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800d842:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800d844:	4b39      	ldr	r3, [pc, #228]	; (800d92c <HAL_RCC_ClockConfig+0x264>)
 800d846:	689b      	ldr	r3, [r3, #8]
 800d848:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800d84c:	687b      	ldr	r3, [r7, #4]
 800d84e:	689b      	ldr	r3, [r3, #8]
 800d850:	4936      	ldr	r1, [pc, #216]	; (800d92c <HAL_RCC_ClockConfig+0x264>)
 800d852:	4313      	orrs	r3, r2
 800d854:	608b      	str	r3, [r1, #8]
 800d856:	e008      	b.n	800d86a <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 800d858:	697b      	ldr	r3, [r7, #20]
 800d85a:	2b80      	cmp	r3, #128	; 0x80
 800d85c:	d105      	bne.n	800d86a <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800d85e:	4b33      	ldr	r3, [pc, #204]	; (800d92c <HAL_RCC_ClockConfig+0x264>)
 800d860:	689b      	ldr	r3, [r3, #8]
 800d862:	4a32      	ldr	r2, [pc, #200]	; (800d92c <HAL_RCC_ClockConfig+0x264>)
 800d864:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800d868:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800d86a:	4b2f      	ldr	r3, [pc, #188]	; (800d928 <HAL_RCC_ClockConfig+0x260>)
 800d86c:	681b      	ldr	r3, [r3, #0]
 800d86e:	f003 030f 	and.w	r3, r3, #15
 800d872:	683a      	ldr	r2, [r7, #0]
 800d874:	429a      	cmp	r2, r3
 800d876:	d21d      	bcs.n	800d8b4 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800d878:	4b2b      	ldr	r3, [pc, #172]	; (800d928 <HAL_RCC_ClockConfig+0x260>)
 800d87a:	681b      	ldr	r3, [r3, #0]
 800d87c:	f023 020f 	bic.w	r2, r3, #15
 800d880:	4929      	ldr	r1, [pc, #164]	; (800d928 <HAL_RCC_ClockConfig+0x260>)
 800d882:	683b      	ldr	r3, [r7, #0]
 800d884:	4313      	orrs	r3, r2
 800d886:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800d888:	f7fc f9b6 	bl	8009bf8 <HAL_GetTick>
 800d88c:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800d88e:	e00a      	b.n	800d8a6 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800d890:	f7fc f9b2 	bl	8009bf8 <HAL_GetTick>
 800d894:	4602      	mov	r2, r0
 800d896:	68fb      	ldr	r3, [r7, #12]
 800d898:	1ad3      	subs	r3, r2, r3
 800d89a:	f241 3288 	movw	r2, #5000	; 0x1388
 800d89e:	4293      	cmp	r3, r2
 800d8a0:	d901      	bls.n	800d8a6 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800d8a2:	2303      	movs	r3, #3
 800d8a4:	e03b      	b.n	800d91e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800d8a6:	4b20      	ldr	r3, [pc, #128]	; (800d928 <HAL_RCC_ClockConfig+0x260>)
 800d8a8:	681b      	ldr	r3, [r3, #0]
 800d8aa:	f003 030f 	and.w	r3, r3, #15
 800d8ae:	683a      	ldr	r2, [r7, #0]
 800d8b0:	429a      	cmp	r2, r3
 800d8b2:	d1ed      	bne.n	800d890 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800d8b4:	687b      	ldr	r3, [r7, #4]
 800d8b6:	681b      	ldr	r3, [r3, #0]
 800d8b8:	f003 0304 	and.w	r3, r3, #4
 800d8bc:	2b00      	cmp	r3, #0
 800d8be:	d008      	beq.n	800d8d2 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800d8c0:	4b1a      	ldr	r3, [pc, #104]	; (800d92c <HAL_RCC_ClockConfig+0x264>)
 800d8c2:	689b      	ldr	r3, [r3, #8]
 800d8c4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800d8c8:	687b      	ldr	r3, [r7, #4]
 800d8ca:	68db      	ldr	r3, [r3, #12]
 800d8cc:	4917      	ldr	r1, [pc, #92]	; (800d92c <HAL_RCC_ClockConfig+0x264>)
 800d8ce:	4313      	orrs	r3, r2
 800d8d0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800d8d2:	687b      	ldr	r3, [r7, #4]
 800d8d4:	681b      	ldr	r3, [r3, #0]
 800d8d6:	f003 0308 	and.w	r3, r3, #8
 800d8da:	2b00      	cmp	r3, #0
 800d8dc:	d009      	beq.n	800d8f2 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800d8de:	4b13      	ldr	r3, [pc, #76]	; (800d92c <HAL_RCC_ClockConfig+0x264>)
 800d8e0:	689b      	ldr	r3, [r3, #8]
 800d8e2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800d8e6:	687b      	ldr	r3, [r7, #4]
 800d8e8:	691b      	ldr	r3, [r3, #16]
 800d8ea:	00db      	lsls	r3, r3, #3
 800d8ec:	490f      	ldr	r1, [pc, #60]	; (800d92c <HAL_RCC_ClockConfig+0x264>)
 800d8ee:	4313      	orrs	r3, r2
 800d8f0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800d8f2:	f000 f825 	bl	800d940 <HAL_RCC_GetSysClockFreq>
 800d8f6:	4602      	mov	r2, r0
 800d8f8:	4b0c      	ldr	r3, [pc, #48]	; (800d92c <HAL_RCC_ClockConfig+0x264>)
 800d8fa:	689b      	ldr	r3, [r3, #8]
 800d8fc:	091b      	lsrs	r3, r3, #4
 800d8fe:	f003 030f 	and.w	r3, r3, #15
 800d902:	490c      	ldr	r1, [pc, #48]	; (800d934 <HAL_RCC_ClockConfig+0x26c>)
 800d904:	5ccb      	ldrb	r3, [r1, r3]
 800d906:	f003 031f 	and.w	r3, r3, #31
 800d90a:	fa22 f303 	lsr.w	r3, r2, r3
 800d90e:	4a0a      	ldr	r2, [pc, #40]	; (800d938 <HAL_RCC_ClockConfig+0x270>)
 800d910:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800d912:	4b0a      	ldr	r3, [pc, #40]	; (800d93c <HAL_RCC_ClockConfig+0x274>)
 800d914:	681b      	ldr	r3, [r3, #0]
 800d916:	4618      	mov	r0, r3
 800d918:	f7fc f922 	bl	8009b60 <HAL_InitTick>
 800d91c:	4603      	mov	r3, r0
}
 800d91e:	4618      	mov	r0, r3
 800d920:	3718      	adds	r7, #24
 800d922:	46bd      	mov	sp, r7
 800d924:	bd80      	pop	{r7, pc}
 800d926:	bf00      	nop
 800d928:	40022000 	.word	0x40022000
 800d92c:	40021000 	.word	0x40021000
 800d930:	04c4b400 	.word	0x04c4b400
 800d934:	0801ac18 	.word	0x0801ac18
 800d938:	2000037c 	.word	0x2000037c
 800d93c:	200003ac 	.word	0x200003ac

0800d940 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800d940:	b480      	push	{r7}
 800d942:	b087      	sub	sp, #28
 800d944:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800d946:	4b2c      	ldr	r3, [pc, #176]	; (800d9f8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800d948:	689b      	ldr	r3, [r3, #8]
 800d94a:	f003 030c 	and.w	r3, r3, #12
 800d94e:	2b04      	cmp	r3, #4
 800d950:	d102      	bne.n	800d958 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800d952:	4b2a      	ldr	r3, [pc, #168]	; (800d9fc <HAL_RCC_GetSysClockFreq+0xbc>)
 800d954:	613b      	str	r3, [r7, #16]
 800d956:	e047      	b.n	800d9e8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 800d958:	4b27      	ldr	r3, [pc, #156]	; (800d9f8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800d95a:	689b      	ldr	r3, [r3, #8]
 800d95c:	f003 030c 	and.w	r3, r3, #12
 800d960:	2b08      	cmp	r3, #8
 800d962:	d102      	bne.n	800d96a <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800d964:	4b25      	ldr	r3, [pc, #148]	; (800d9fc <HAL_RCC_GetSysClockFreq+0xbc>)
 800d966:	613b      	str	r3, [r7, #16]
 800d968:	e03e      	b.n	800d9e8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800d96a:	4b23      	ldr	r3, [pc, #140]	; (800d9f8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800d96c:	689b      	ldr	r3, [r3, #8]
 800d96e:	f003 030c 	and.w	r3, r3, #12
 800d972:	2b0c      	cmp	r3, #12
 800d974:	d136      	bne.n	800d9e4 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800d976:	4b20      	ldr	r3, [pc, #128]	; (800d9f8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800d978:	68db      	ldr	r3, [r3, #12]
 800d97a:	f003 0303 	and.w	r3, r3, #3
 800d97e:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800d980:	4b1d      	ldr	r3, [pc, #116]	; (800d9f8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800d982:	68db      	ldr	r3, [r3, #12]
 800d984:	091b      	lsrs	r3, r3, #4
 800d986:	f003 030f 	and.w	r3, r3, #15
 800d98a:	3301      	adds	r3, #1
 800d98c:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800d98e:	68fb      	ldr	r3, [r7, #12]
 800d990:	2b03      	cmp	r3, #3
 800d992:	d10c      	bne.n	800d9ae <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800d994:	4a19      	ldr	r2, [pc, #100]	; (800d9fc <HAL_RCC_GetSysClockFreq+0xbc>)
 800d996:	68bb      	ldr	r3, [r7, #8]
 800d998:	fbb2 f3f3 	udiv	r3, r2, r3
 800d99c:	4a16      	ldr	r2, [pc, #88]	; (800d9f8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800d99e:	68d2      	ldr	r2, [r2, #12]
 800d9a0:	0a12      	lsrs	r2, r2, #8
 800d9a2:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800d9a6:	fb02 f303 	mul.w	r3, r2, r3
 800d9aa:	617b      	str	r3, [r7, #20]
      break;
 800d9ac:	e00c      	b.n	800d9c8 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800d9ae:	4a13      	ldr	r2, [pc, #76]	; (800d9fc <HAL_RCC_GetSysClockFreq+0xbc>)
 800d9b0:	68bb      	ldr	r3, [r7, #8]
 800d9b2:	fbb2 f3f3 	udiv	r3, r2, r3
 800d9b6:	4a10      	ldr	r2, [pc, #64]	; (800d9f8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800d9b8:	68d2      	ldr	r2, [r2, #12]
 800d9ba:	0a12      	lsrs	r2, r2, #8
 800d9bc:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800d9c0:	fb02 f303 	mul.w	r3, r2, r3
 800d9c4:	617b      	str	r3, [r7, #20]
      break;
 800d9c6:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800d9c8:	4b0b      	ldr	r3, [pc, #44]	; (800d9f8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800d9ca:	68db      	ldr	r3, [r3, #12]
 800d9cc:	0e5b      	lsrs	r3, r3, #25
 800d9ce:	f003 0303 	and.w	r3, r3, #3
 800d9d2:	3301      	adds	r3, #1
 800d9d4:	005b      	lsls	r3, r3, #1
 800d9d6:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 800d9d8:	697a      	ldr	r2, [r7, #20]
 800d9da:	687b      	ldr	r3, [r7, #4]
 800d9dc:	fbb2 f3f3 	udiv	r3, r2, r3
 800d9e0:	613b      	str	r3, [r7, #16]
 800d9e2:	e001      	b.n	800d9e8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 800d9e4:	2300      	movs	r3, #0
 800d9e6:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 800d9e8:	693b      	ldr	r3, [r7, #16]
}
 800d9ea:	4618      	mov	r0, r3
 800d9ec:	371c      	adds	r7, #28
 800d9ee:	46bd      	mov	sp, r7
 800d9f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9f4:	4770      	bx	lr
 800d9f6:	bf00      	nop
 800d9f8:	40021000 	.word	0x40021000
 800d9fc:	00f42400 	.word	0x00f42400

0800da00 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800da00:	b480      	push	{r7}
 800da02:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800da04:	4b03      	ldr	r3, [pc, #12]	; (800da14 <HAL_RCC_GetHCLKFreq+0x14>)
 800da06:	681b      	ldr	r3, [r3, #0]
}
 800da08:	4618      	mov	r0, r3
 800da0a:	46bd      	mov	sp, r7
 800da0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da10:	4770      	bx	lr
 800da12:	bf00      	nop
 800da14:	2000037c 	.word	0x2000037c

0800da18 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800da18:	b580      	push	{r7, lr}
 800da1a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800da1c:	f7ff fff0 	bl	800da00 <HAL_RCC_GetHCLKFreq>
 800da20:	4602      	mov	r2, r0
 800da22:	4b06      	ldr	r3, [pc, #24]	; (800da3c <HAL_RCC_GetPCLK1Freq+0x24>)
 800da24:	689b      	ldr	r3, [r3, #8]
 800da26:	0a1b      	lsrs	r3, r3, #8
 800da28:	f003 0307 	and.w	r3, r3, #7
 800da2c:	4904      	ldr	r1, [pc, #16]	; (800da40 <HAL_RCC_GetPCLK1Freq+0x28>)
 800da2e:	5ccb      	ldrb	r3, [r1, r3]
 800da30:	f003 031f 	and.w	r3, r3, #31
 800da34:	fa22 f303 	lsr.w	r3, r2, r3
}
 800da38:	4618      	mov	r0, r3
 800da3a:	bd80      	pop	{r7, pc}
 800da3c:	40021000 	.word	0x40021000
 800da40:	0801ac28 	.word	0x0801ac28

0800da44 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800da44:	b580      	push	{r7, lr}
 800da46:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800da48:	f7ff ffda 	bl	800da00 <HAL_RCC_GetHCLKFreq>
 800da4c:	4602      	mov	r2, r0
 800da4e:	4b06      	ldr	r3, [pc, #24]	; (800da68 <HAL_RCC_GetPCLK2Freq+0x24>)
 800da50:	689b      	ldr	r3, [r3, #8]
 800da52:	0adb      	lsrs	r3, r3, #11
 800da54:	f003 0307 	and.w	r3, r3, #7
 800da58:	4904      	ldr	r1, [pc, #16]	; (800da6c <HAL_RCC_GetPCLK2Freq+0x28>)
 800da5a:	5ccb      	ldrb	r3, [r1, r3]
 800da5c:	f003 031f 	and.w	r3, r3, #31
 800da60:	fa22 f303 	lsr.w	r3, r2, r3
}
 800da64:	4618      	mov	r0, r3
 800da66:	bd80      	pop	{r7, pc}
 800da68:	40021000 	.word	0x40021000
 800da6c:	0801ac28 	.word	0x0801ac28

0800da70 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 800da70:	b480      	push	{r7}
 800da72:	b087      	sub	sp, #28
 800da74:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800da76:	4b1e      	ldr	r3, [pc, #120]	; (800daf0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800da78:	68db      	ldr	r3, [r3, #12]
 800da7a:	f003 0303 	and.w	r3, r3, #3
 800da7e:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800da80:	4b1b      	ldr	r3, [pc, #108]	; (800daf0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800da82:	68db      	ldr	r3, [r3, #12]
 800da84:	091b      	lsrs	r3, r3, #4
 800da86:	f003 030f 	and.w	r3, r3, #15
 800da8a:	3301      	adds	r3, #1
 800da8c:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800da8e:	693b      	ldr	r3, [r7, #16]
 800da90:	2b03      	cmp	r3, #3
 800da92:	d10c      	bne.n	800daae <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800da94:	4a17      	ldr	r2, [pc, #92]	; (800daf4 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800da96:	68fb      	ldr	r3, [r7, #12]
 800da98:	fbb2 f3f3 	udiv	r3, r2, r3
 800da9c:	4a14      	ldr	r2, [pc, #80]	; (800daf0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800da9e:	68d2      	ldr	r2, [r2, #12]
 800daa0:	0a12      	lsrs	r2, r2, #8
 800daa2:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800daa6:	fb02 f303 	mul.w	r3, r2, r3
 800daaa:	617b      	str	r3, [r7, #20]
    break;
 800daac:	e00c      	b.n	800dac8 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800daae:	4a11      	ldr	r2, [pc, #68]	; (800daf4 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800dab0:	68fb      	ldr	r3, [r7, #12]
 800dab2:	fbb2 f3f3 	udiv	r3, r2, r3
 800dab6:	4a0e      	ldr	r2, [pc, #56]	; (800daf0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800dab8:	68d2      	ldr	r2, [r2, #12]
 800daba:	0a12      	lsrs	r2, r2, #8
 800dabc:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800dac0:	fb02 f303 	mul.w	r3, r2, r3
 800dac4:	617b      	str	r3, [r7, #20]
    break;
 800dac6:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800dac8:	4b09      	ldr	r3, [pc, #36]	; (800daf0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800daca:	68db      	ldr	r3, [r3, #12]
 800dacc:	0e5b      	lsrs	r3, r3, #25
 800dace:	f003 0303 	and.w	r3, r3, #3
 800dad2:	3301      	adds	r3, #1
 800dad4:	005b      	lsls	r3, r3, #1
 800dad6:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 800dad8:	697a      	ldr	r2, [r7, #20]
 800dada:	68bb      	ldr	r3, [r7, #8]
 800dadc:	fbb2 f3f3 	udiv	r3, r2, r3
 800dae0:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 800dae2:	687b      	ldr	r3, [r7, #4]
}
 800dae4:	4618      	mov	r0, r3
 800dae6:	371c      	adds	r7, #28
 800dae8:	46bd      	mov	sp, r7
 800daea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800daee:	4770      	bx	lr
 800daf0:	40021000 	.word	0x40021000
 800daf4:	00f42400 	.word	0x00f42400

0800daf8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800daf8:	b580      	push	{r7, lr}
 800dafa:	b086      	sub	sp, #24
 800dafc:	af00      	add	r7, sp, #0
 800dafe:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800db00:	2300      	movs	r3, #0
 800db02:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800db04:	2300      	movs	r3, #0
 800db06:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800db08:	687b      	ldr	r3, [r7, #4]
 800db0a:	681b      	ldr	r3, [r3, #0]
 800db0c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800db10:	2b00      	cmp	r3, #0
 800db12:	f000 8098 	beq.w	800dc46 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800db16:	2300      	movs	r3, #0
 800db18:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800db1a:	4b43      	ldr	r3, [pc, #268]	; (800dc28 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800db1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800db1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800db22:	2b00      	cmp	r3, #0
 800db24:	d10d      	bne.n	800db42 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800db26:	4b40      	ldr	r3, [pc, #256]	; (800dc28 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800db28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800db2a:	4a3f      	ldr	r2, [pc, #252]	; (800dc28 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800db2c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800db30:	6593      	str	r3, [r2, #88]	; 0x58
 800db32:	4b3d      	ldr	r3, [pc, #244]	; (800dc28 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800db34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800db36:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800db3a:	60bb      	str	r3, [r7, #8]
 800db3c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800db3e:	2301      	movs	r3, #1
 800db40:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800db42:	4b3a      	ldr	r3, [pc, #232]	; (800dc2c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800db44:	681b      	ldr	r3, [r3, #0]
 800db46:	4a39      	ldr	r2, [pc, #228]	; (800dc2c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800db48:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800db4c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800db4e:	f7fc f853 	bl	8009bf8 <HAL_GetTick>
 800db52:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800db54:	e009      	b.n	800db6a <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800db56:	f7fc f84f 	bl	8009bf8 <HAL_GetTick>
 800db5a:	4602      	mov	r2, r0
 800db5c:	68fb      	ldr	r3, [r7, #12]
 800db5e:	1ad3      	subs	r3, r2, r3
 800db60:	2b02      	cmp	r3, #2
 800db62:	d902      	bls.n	800db6a <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 800db64:	2303      	movs	r3, #3
 800db66:	74fb      	strb	r3, [r7, #19]
        break;
 800db68:	e005      	b.n	800db76 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800db6a:	4b30      	ldr	r3, [pc, #192]	; (800dc2c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800db6c:	681b      	ldr	r3, [r3, #0]
 800db6e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800db72:	2b00      	cmp	r3, #0
 800db74:	d0ef      	beq.n	800db56 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 800db76:	7cfb      	ldrb	r3, [r7, #19]
 800db78:	2b00      	cmp	r3, #0
 800db7a:	d159      	bne.n	800dc30 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800db7c:	4b2a      	ldr	r3, [pc, #168]	; (800dc28 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800db7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800db82:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800db86:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800db88:	697b      	ldr	r3, [r7, #20]
 800db8a:	2b00      	cmp	r3, #0
 800db8c:	d01e      	beq.n	800dbcc <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800db8e:	687b      	ldr	r3, [r7, #4]
 800db90:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800db92:	697a      	ldr	r2, [r7, #20]
 800db94:	429a      	cmp	r2, r3
 800db96:	d019      	beq.n	800dbcc <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800db98:	4b23      	ldr	r3, [pc, #140]	; (800dc28 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800db9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800db9e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800dba2:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800dba4:	4b20      	ldr	r3, [pc, #128]	; (800dc28 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800dba6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800dbaa:	4a1f      	ldr	r2, [pc, #124]	; (800dc28 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800dbac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800dbb0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800dbb4:	4b1c      	ldr	r3, [pc, #112]	; (800dc28 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800dbb6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800dbba:	4a1b      	ldr	r2, [pc, #108]	; (800dc28 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800dbbc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800dbc0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800dbc4:	4a18      	ldr	r2, [pc, #96]	; (800dc28 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800dbc6:	697b      	ldr	r3, [r7, #20]
 800dbc8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800dbcc:	697b      	ldr	r3, [r7, #20]
 800dbce:	f003 0301 	and.w	r3, r3, #1
 800dbd2:	2b00      	cmp	r3, #0
 800dbd4:	d016      	beq.n	800dc04 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800dbd6:	f7fc f80f 	bl	8009bf8 <HAL_GetTick>
 800dbda:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800dbdc:	e00b      	b.n	800dbf6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800dbde:	f7fc f80b 	bl	8009bf8 <HAL_GetTick>
 800dbe2:	4602      	mov	r2, r0
 800dbe4:	68fb      	ldr	r3, [r7, #12]
 800dbe6:	1ad3      	subs	r3, r2, r3
 800dbe8:	f241 3288 	movw	r2, #5000	; 0x1388
 800dbec:	4293      	cmp	r3, r2
 800dbee:	d902      	bls.n	800dbf6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 800dbf0:	2303      	movs	r3, #3
 800dbf2:	74fb      	strb	r3, [r7, #19]
            break;
 800dbf4:	e006      	b.n	800dc04 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800dbf6:	4b0c      	ldr	r3, [pc, #48]	; (800dc28 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800dbf8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800dbfc:	f003 0302 	and.w	r3, r3, #2
 800dc00:	2b00      	cmp	r3, #0
 800dc02:	d0ec      	beq.n	800dbde <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 800dc04:	7cfb      	ldrb	r3, [r7, #19]
 800dc06:	2b00      	cmp	r3, #0
 800dc08:	d10b      	bne.n	800dc22 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800dc0a:	4b07      	ldr	r3, [pc, #28]	; (800dc28 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800dc0c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800dc10:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800dc14:	687b      	ldr	r3, [r7, #4]
 800dc16:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800dc18:	4903      	ldr	r1, [pc, #12]	; (800dc28 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800dc1a:	4313      	orrs	r3, r2
 800dc1c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800dc20:	e008      	b.n	800dc34 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800dc22:	7cfb      	ldrb	r3, [r7, #19]
 800dc24:	74bb      	strb	r3, [r7, #18]
 800dc26:	e005      	b.n	800dc34 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 800dc28:	40021000 	.word	0x40021000
 800dc2c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800dc30:	7cfb      	ldrb	r3, [r7, #19]
 800dc32:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800dc34:	7c7b      	ldrb	r3, [r7, #17]
 800dc36:	2b01      	cmp	r3, #1
 800dc38:	d105      	bne.n	800dc46 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800dc3a:	4ba7      	ldr	r3, [pc, #668]	; (800ded8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800dc3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800dc3e:	4aa6      	ldr	r2, [pc, #664]	; (800ded8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800dc40:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800dc44:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800dc46:	687b      	ldr	r3, [r7, #4]
 800dc48:	681b      	ldr	r3, [r3, #0]
 800dc4a:	f003 0301 	and.w	r3, r3, #1
 800dc4e:	2b00      	cmp	r3, #0
 800dc50:	d00a      	beq.n	800dc68 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800dc52:	4ba1      	ldr	r3, [pc, #644]	; (800ded8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800dc54:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800dc58:	f023 0203 	bic.w	r2, r3, #3
 800dc5c:	687b      	ldr	r3, [r7, #4]
 800dc5e:	685b      	ldr	r3, [r3, #4]
 800dc60:	499d      	ldr	r1, [pc, #628]	; (800ded8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800dc62:	4313      	orrs	r3, r2
 800dc64:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800dc68:	687b      	ldr	r3, [r7, #4]
 800dc6a:	681b      	ldr	r3, [r3, #0]
 800dc6c:	f003 0302 	and.w	r3, r3, #2
 800dc70:	2b00      	cmp	r3, #0
 800dc72:	d00a      	beq.n	800dc8a <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800dc74:	4b98      	ldr	r3, [pc, #608]	; (800ded8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800dc76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800dc7a:	f023 020c 	bic.w	r2, r3, #12
 800dc7e:	687b      	ldr	r3, [r7, #4]
 800dc80:	689b      	ldr	r3, [r3, #8]
 800dc82:	4995      	ldr	r1, [pc, #596]	; (800ded8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800dc84:	4313      	orrs	r3, r2
 800dc86:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800dc8a:	687b      	ldr	r3, [r7, #4]
 800dc8c:	681b      	ldr	r3, [r3, #0]
 800dc8e:	f003 0304 	and.w	r3, r3, #4
 800dc92:	2b00      	cmp	r3, #0
 800dc94:	d00a      	beq.n	800dcac <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800dc96:	4b90      	ldr	r3, [pc, #576]	; (800ded8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800dc98:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800dc9c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800dca0:	687b      	ldr	r3, [r7, #4]
 800dca2:	68db      	ldr	r3, [r3, #12]
 800dca4:	498c      	ldr	r1, [pc, #560]	; (800ded8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800dca6:	4313      	orrs	r3, r2
 800dca8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800dcac:	687b      	ldr	r3, [r7, #4]
 800dcae:	681b      	ldr	r3, [r3, #0]
 800dcb0:	f003 0308 	and.w	r3, r3, #8
 800dcb4:	2b00      	cmp	r3, #0
 800dcb6:	d00a      	beq.n	800dcce <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800dcb8:	4b87      	ldr	r3, [pc, #540]	; (800ded8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800dcba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800dcbe:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800dcc2:	687b      	ldr	r3, [r7, #4]
 800dcc4:	691b      	ldr	r3, [r3, #16]
 800dcc6:	4984      	ldr	r1, [pc, #528]	; (800ded8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800dcc8:	4313      	orrs	r3, r2
 800dcca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800dcce:	687b      	ldr	r3, [r7, #4]
 800dcd0:	681b      	ldr	r3, [r3, #0]
 800dcd2:	f003 0310 	and.w	r3, r3, #16
 800dcd6:	2b00      	cmp	r3, #0
 800dcd8:	d00a      	beq.n	800dcf0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800dcda:	4b7f      	ldr	r3, [pc, #508]	; (800ded8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800dcdc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800dce0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800dce4:	687b      	ldr	r3, [r7, #4]
 800dce6:	695b      	ldr	r3, [r3, #20]
 800dce8:	497b      	ldr	r1, [pc, #492]	; (800ded8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800dcea:	4313      	orrs	r3, r2
 800dcec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800dcf0:	687b      	ldr	r3, [r7, #4]
 800dcf2:	681b      	ldr	r3, [r3, #0]
 800dcf4:	f003 0320 	and.w	r3, r3, #32
 800dcf8:	2b00      	cmp	r3, #0
 800dcfa:	d00a      	beq.n	800dd12 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800dcfc:	4b76      	ldr	r3, [pc, #472]	; (800ded8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800dcfe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800dd02:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800dd06:	687b      	ldr	r3, [r7, #4]
 800dd08:	699b      	ldr	r3, [r3, #24]
 800dd0a:	4973      	ldr	r1, [pc, #460]	; (800ded8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800dd0c:	4313      	orrs	r3, r2
 800dd0e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800dd12:	687b      	ldr	r3, [r7, #4]
 800dd14:	681b      	ldr	r3, [r3, #0]
 800dd16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800dd1a:	2b00      	cmp	r3, #0
 800dd1c:	d00a      	beq.n	800dd34 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800dd1e:	4b6e      	ldr	r3, [pc, #440]	; (800ded8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800dd20:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800dd24:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800dd28:	687b      	ldr	r3, [r7, #4]
 800dd2a:	69db      	ldr	r3, [r3, #28]
 800dd2c:	496a      	ldr	r1, [pc, #424]	; (800ded8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800dd2e:	4313      	orrs	r3, r2
 800dd30:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800dd34:	687b      	ldr	r3, [r7, #4]
 800dd36:	681b      	ldr	r3, [r3, #0]
 800dd38:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800dd3c:	2b00      	cmp	r3, #0
 800dd3e:	d00a      	beq.n	800dd56 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800dd40:	4b65      	ldr	r3, [pc, #404]	; (800ded8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800dd42:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800dd46:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800dd4a:	687b      	ldr	r3, [r7, #4]
 800dd4c:	6a1b      	ldr	r3, [r3, #32]
 800dd4e:	4962      	ldr	r1, [pc, #392]	; (800ded8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800dd50:	4313      	orrs	r3, r2
 800dd52:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800dd56:	687b      	ldr	r3, [r7, #4]
 800dd58:	681b      	ldr	r3, [r3, #0]
 800dd5a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800dd5e:	2b00      	cmp	r3, #0
 800dd60:	d00a      	beq.n	800dd78 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800dd62:	4b5d      	ldr	r3, [pc, #372]	; (800ded8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800dd64:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800dd68:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800dd6c:	687b      	ldr	r3, [r7, #4]
 800dd6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dd70:	4959      	ldr	r1, [pc, #356]	; (800ded8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800dd72:	4313      	orrs	r3, r2
 800dd74:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800dd78:	687b      	ldr	r3, [r7, #4]
 800dd7a:	681b      	ldr	r3, [r3, #0]
 800dd7c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800dd80:	2b00      	cmp	r3, #0
 800dd82:	d00a      	beq.n	800dd9a <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800dd84:	4b54      	ldr	r3, [pc, #336]	; (800ded8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800dd86:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800dd8a:	f023 0203 	bic.w	r2, r3, #3
 800dd8e:	687b      	ldr	r3, [r7, #4]
 800dd90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dd92:	4951      	ldr	r1, [pc, #324]	; (800ded8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800dd94:	4313      	orrs	r3, r2
 800dd96:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800dd9a:	687b      	ldr	r3, [r7, #4]
 800dd9c:	681b      	ldr	r3, [r3, #0]
 800dd9e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800dda2:	2b00      	cmp	r3, #0
 800dda4:	d00a      	beq.n	800ddbc <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800dda6:	4b4c      	ldr	r3, [pc, #304]	; (800ded8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800dda8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ddac:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800ddb0:	687b      	ldr	r3, [r7, #4]
 800ddb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ddb4:	4948      	ldr	r1, [pc, #288]	; (800ded8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800ddb6:	4313      	orrs	r3, r2
 800ddb8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800ddbc:	687b      	ldr	r3, [r7, #4]
 800ddbe:	681b      	ldr	r3, [r3, #0]
 800ddc0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800ddc4:	2b00      	cmp	r3, #0
 800ddc6:	d015      	beq.n	800ddf4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800ddc8:	4b43      	ldr	r3, [pc, #268]	; (800ded8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800ddca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ddce:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800ddd2:	687b      	ldr	r3, [r7, #4]
 800ddd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ddd6:	4940      	ldr	r1, [pc, #256]	; (800ded8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800ddd8:	4313      	orrs	r3, r2
 800ddda:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800ddde:	687b      	ldr	r3, [r7, #4]
 800dde0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dde2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800dde6:	d105      	bne.n	800ddf4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800dde8:	4b3b      	ldr	r3, [pc, #236]	; (800ded8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800ddea:	68db      	ldr	r3, [r3, #12]
 800ddec:	4a3a      	ldr	r2, [pc, #232]	; (800ded8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800ddee:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800ddf2:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800ddf4:	687b      	ldr	r3, [r7, #4]
 800ddf6:	681b      	ldr	r3, [r3, #0]
 800ddf8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800ddfc:	2b00      	cmp	r3, #0
 800ddfe:	d015      	beq.n	800de2c <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800de00:	4b35      	ldr	r3, [pc, #212]	; (800ded8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800de02:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800de06:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800de0a:	687b      	ldr	r3, [r7, #4]
 800de0c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800de0e:	4932      	ldr	r1, [pc, #200]	; (800ded8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800de10:	4313      	orrs	r3, r2
 800de12:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 800de16:	687b      	ldr	r3, [r7, #4]
 800de18:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800de1a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800de1e:	d105      	bne.n	800de2c <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800de20:	4b2d      	ldr	r3, [pc, #180]	; (800ded8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800de22:	68db      	ldr	r3, [r3, #12]
 800de24:	4a2c      	ldr	r2, [pc, #176]	; (800ded8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800de26:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800de2a:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800de2c:	687b      	ldr	r3, [r7, #4]
 800de2e:	681b      	ldr	r3, [r3, #0]
 800de30:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800de34:	2b00      	cmp	r3, #0
 800de36:	d015      	beq.n	800de64 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800de38:	4b27      	ldr	r3, [pc, #156]	; (800ded8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800de3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800de3e:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800de42:	687b      	ldr	r3, [r7, #4]
 800de44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800de46:	4924      	ldr	r1, [pc, #144]	; (800ded8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800de48:	4313      	orrs	r3, r2
 800de4a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800de4e:	687b      	ldr	r3, [r7, #4]
 800de50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800de52:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800de56:	d105      	bne.n	800de64 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800de58:	4b1f      	ldr	r3, [pc, #124]	; (800ded8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800de5a:	68db      	ldr	r3, [r3, #12]
 800de5c:	4a1e      	ldr	r2, [pc, #120]	; (800ded8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800de5e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800de62:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800de64:	687b      	ldr	r3, [r7, #4]
 800de66:	681b      	ldr	r3, [r3, #0]
 800de68:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800de6c:	2b00      	cmp	r3, #0
 800de6e:	d015      	beq.n	800de9c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800de70:	4b19      	ldr	r3, [pc, #100]	; (800ded8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800de72:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800de76:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800de7a:	687b      	ldr	r3, [r7, #4]
 800de7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800de7e:	4916      	ldr	r1, [pc, #88]	; (800ded8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800de80:	4313      	orrs	r3, r2
 800de82:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800de86:	687b      	ldr	r3, [r7, #4]
 800de88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800de8a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800de8e:	d105      	bne.n	800de9c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800de90:	4b11      	ldr	r3, [pc, #68]	; (800ded8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800de92:	68db      	ldr	r3, [r3, #12]
 800de94:	4a10      	ldr	r2, [pc, #64]	; (800ded8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800de96:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800de9a:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800de9c:	687b      	ldr	r3, [r7, #4]
 800de9e:	681b      	ldr	r3, [r3, #0]
 800dea0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800dea4:	2b00      	cmp	r3, #0
 800dea6:	d019      	beq.n	800dedc <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800dea8:	4b0b      	ldr	r3, [pc, #44]	; (800ded8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800deaa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800deae:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800deb2:	687b      	ldr	r3, [r7, #4]
 800deb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800deb6:	4908      	ldr	r1, [pc, #32]	; (800ded8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800deb8:	4313      	orrs	r3, r2
 800deba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800debe:	687b      	ldr	r3, [r7, #4]
 800dec0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dec2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800dec6:	d109      	bne.n	800dedc <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800dec8:	4b03      	ldr	r3, [pc, #12]	; (800ded8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800deca:	68db      	ldr	r3, [r3, #12]
 800decc:	4a02      	ldr	r2, [pc, #8]	; (800ded8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800dece:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800ded2:	60d3      	str	r3, [r2, #12]
 800ded4:	e002      	b.n	800dedc <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 800ded6:	bf00      	nop
 800ded8:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800dedc:	687b      	ldr	r3, [r7, #4]
 800dede:	681b      	ldr	r3, [r3, #0]
 800dee0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800dee4:	2b00      	cmp	r3, #0
 800dee6:	d015      	beq.n	800df14 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800dee8:	4b29      	ldr	r3, [pc, #164]	; (800df90 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800deea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800deee:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800def2:	687b      	ldr	r3, [r7, #4]
 800def4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800def6:	4926      	ldr	r1, [pc, #152]	; (800df90 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800def8:	4313      	orrs	r3, r2
 800defa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 800defe:	687b      	ldr	r3, [r7, #4]
 800df00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800df02:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800df06:	d105      	bne.n	800df14 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800df08:	4b21      	ldr	r3, [pc, #132]	; (800df90 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800df0a:	68db      	ldr	r3, [r3, #12]
 800df0c:	4a20      	ldr	r2, [pc, #128]	; (800df90 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800df0e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800df12:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 800df14:	687b      	ldr	r3, [r7, #4]
 800df16:	681b      	ldr	r3, [r3, #0]
 800df18:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800df1c:	2b00      	cmp	r3, #0
 800df1e:	d015      	beq.n	800df4c <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 800df20:	4b1b      	ldr	r3, [pc, #108]	; (800df90 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800df22:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800df26:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 800df2a:	687b      	ldr	r3, [r7, #4]
 800df2c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800df2e:	4918      	ldr	r1, [pc, #96]	; (800df90 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800df30:	4313      	orrs	r3, r2
 800df32:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 800df36:	687b      	ldr	r3, [r7, #4]
 800df38:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800df3a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800df3e:	d105      	bne.n	800df4c <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800df40:	4b13      	ldr	r3, [pc, #76]	; (800df90 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800df42:	68db      	ldr	r3, [r3, #12]
 800df44:	4a12      	ldr	r2, [pc, #72]	; (800df90 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800df46:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800df4a:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800df4c:	687b      	ldr	r3, [r7, #4]
 800df4e:	681b      	ldr	r3, [r3, #0]
 800df50:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800df54:	2b00      	cmp	r3, #0
 800df56:	d015      	beq.n	800df84 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800df58:	4b0d      	ldr	r3, [pc, #52]	; (800df90 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800df5a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800df5e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800df62:	687b      	ldr	r3, [r7, #4]
 800df64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800df66:	490a      	ldr	r1, [pc, #40]	; (800df90 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800df68:	4313      	orrs	r3, r2
 800df6a:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 800df6e:	687b      	ldr	r3, [r7, #4]
 800df70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800df72:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800df76:	d105      	bne.n	800df84 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800df78:	4b05      	ldr	r3, [pc, #20]	; (800df90 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800df7a:	68db      	ldr	r3, [r3, #12]
 800df7c:	4a04      	ldr	r2, [pc, #16]	; (800df90 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800df7e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800df82:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 800df84:	7cbb      	ldrb	r3, [r7, #18]
}
 800df86:	4618      	mov	r0, r3
 800df88:	3718      	adds	r7, #24
 800df8a:	46bd      	mov	sp, r7
 800df8c:	bd80      	pop	{r7, pc}
 800df8e:	bf00      	nop
 800df90:	40021000 	.word	0x40021000

0800df94 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800df94:	b580      	push	{r7, lr}
 800df96:	b084      	sub	sp, #16
 800df98:	af00      	add	r7, sp, #0
 800df9a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800df9c:	687b      	ldr	r3, [r7, #4]
 800df9e:	2b00      	cmp	r3, #0
 800dfa0:	d101      	bne.n	800dfa6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800dfa2:	2301      	movs	r3, #1
 800dfa4:	e09d      	b.n	800e0e2 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800dfa6:	687b      	ldr	r3, [r7, #4]
 800dfa8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dfaa:	2b00      	cmp	r3, #0
 800dfac:	d108      	bne.n	800dfc0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800dfae:	687b      	ldr	r3, [r7, #4]
 800dfb0:	685b      	ldr	r3, [r3, #4]
 800dfb2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800dfb6:	d009      	beq.n	800dfcc <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800dfb8:	687b      	ldr	r3, [r7, #4]
 800dfba:	2200      	movs	r2, #0
 800dfbc:	61da      	str	r2, [r3, #28]
 800dfbe:	e005      	b.n	800dfcc <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800dfc0:	687b      	ldr	r3, [r7, #4]
 800dfc2:	2200      	movs	r2, #0
 800dfc4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800dfc6:	687b      	ldr	r3, [r7, #4]
 800dfc8:	2200      	movs	r2, #0
 800dfca:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800dfcc:	687b      	ldr	r3, [r7, #4]
 800dfce:	2200      	movs	r2, #0
 800dfd0:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800dfd2:	687b      	ldr	r3, [r7, #4]
 800dfd4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800dfd8:	b2db      	uxtb	r3, r3
 800dfda:	2b00      	cmp	r3, #0
 800dfdc:	d106      	bne.n	800dfec <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800dfde:	687b      	ldr	r3, [r7, #4]
 800dfe0:	2200      	movs	r2, #0
 800dfe2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800dfe6:	6878      	ldr	r0, [r7, #4]
 800dfe8:	f7fa fc92 	bl	8008910 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800dfec:	687b      	ldr	r3, [r7, #4]
 800dfee:	2202      	movs	r2, #2
 800dff0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800dff4:	687b      	ldr	r3, [r7, #4]
 800dff6:	681b      	ldr	r3, [r3, #0]
 800dff8:	681a      	ldr	r2, [r3, #0]
 800dffa:	687b      	ldr	r3, [r7, #4]
 800dffc:	681b      	ldr	r3, [r3, #0]
 800dffe:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800e002:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800e004:	687b      	ldr	r3, [r7, #4]
 800e006:	68db      	ldr	r3, [r3, #12]
 800e008:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800e00c:	d902      	bls.n	800e014 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800e00e:	2300      	movs	r3, #0
 800e010:	60fb      	str	r3, [r7, #12]
 800e012:	e002      	b.n	800e01a <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800e014:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800e018:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800e01a:	687b      	ldr	r3, [r7, #4]
 800e01c:	68db      	ldr	r3, [r3, #12]
 800e01e:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800e022:	d007      	beq.n	800e034 <HAL_SPI_Init+0xa0>
 800e024:	687b      	ldr	r3, [r7, #4]
 800e026:	68db      	ldr	r3, [r3, #12]
 800e028:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800e02c:	d002      	beq.n	800e034 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800e02e:	687b      	ldr	r3, [r7, #4]
 800e030:	2200      	movs	r2, #0
 800e032:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800e034:	687b      	ldr	r3, [r7, #4]
 800e036:	685b      	ldr	r3, [r3, #4]
 800e038:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800e03c:	687b      	ldr	r3, [r7, #4]
 800e03e:	689b      	ldr	r3, [r3, #8]
 800e040:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800e044:	431a      	orrs	r2, r3
 800e046:	687b      	ldr	r3, [r7, #4]
 800e048:	691b      	ldr	r3, [r3, #16]
 800e04a:	f003 0302 	and.w	r3, r3, #2
 800e04e:	431a      	orrs	r2, r3
 800e050:	687b      	ldr	r3, [r7, #4]
 800e052:	695b      	ldr	r3, [r3, #20]
 800e054:	f003 0301 	and.w	r3, r3, #1
 800e058:	431a      	orrs	r2, r3
 800e05a:	687b      	ldr	r3, [r7, #4]
 800e05c:	699b      	ldr	r3, [r3, #24]
 800e05e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800e062:	431a      	orrs	r2, r3
 800e064:	687b      	ldr	r3, [r7, #4]
 800e066:	69db      	ldr	r3, [r3, #28]
 800e068:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800e06c:	431a      	orrs	r2, r3
 800e06e:	687b      	ldr	r3, [r7, #4]
 800e070:	6a1b      	ldr	r3, [r3, #32]
 800e072:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e076:	ea42 0103 	orr.w	r1, r2, r3
 800e07a:	687b      	ldr	r3, [r7, #4]
 800e07c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e07e:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800e082:	687b      	ldr	r3, [r7, #4]
 800e084:	681b      	ldr	r3, [r3, #0]
 800e086:	430a      	orrs	r2, r1
 800e088:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800e08a:	687b      	ldr	r3, [r7, #4]
 800e08c:	699b      	ldr	r3, [r3, #24]
 800e08e:	0c1b      	lsrs	r3, r3, #16
 800e090:	f003 0204 	and.w	r2, r3, #4
 800e094:	687b      	ldr	r3, [r7, #4]
 800e096:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e098:	f003 0310 	and.w	r3, r3, #16
 800e09c:	431a      	orrs	r2, r3
 800e09e:	687b      	ldr	r3, [r7, #4]
 800e0a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e0a2:	f003 0308 	and.w	r3, r3, #8
 800e0a6:	431a      	orrs	r2, r3
 800e0a8:	687b      	ldr	r3, [r7, #4]
 800e0aa:	68db      	ldr	r3, [r3, #12]
 800e0ac:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800e0b0:	ea42 0103 	orr.w	r1, r2, r3
 800e0b4:	68fb      	ldr	r3, [r7, #12]
 800e0b6:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800e0ba:	687b      	ldr	r3, [r7, #4]
 800e0bc:	681b      	ldr	r3, [r3, #0]
 800e0be:	430a      	orrs	r2, r1
 800e0c0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800e0c2:	687b      	ldr	r3, [r7, #4]
 800e0c4:	681b      	ldr	r3, [r3, #0]
 800e0c6:	69da      	ldr	r2, [r3, #28]
 800e0c8:	687b      	ldr	r3, [r7, #4]
 800e0ca:	681b      	ldr	r3, [r3, #0]
 800e0cc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800e0d0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800e0d2:	687b      	ldr	r3, [r7, #4]
 800e0d4:	2200      	movs	r2, #0
 800e0d6:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800e0d8:	687b      	ldr	r3, [r7, #4]
 800e0da:	2201      	movs	r2, #1
 800e0dc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 800e0e0:	2300      	movs	r3, #0
}
 800e0e2:	4618      	mov	r0, r3
 800e0e4:	3710      	adds	r7, #16
 800e0e6:	46bd      	mov	sp, r7
 800e0e8:	bd80      	pop	{r7, pc}

0800e0ea <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800e0ea:	b580      	push	{r7, lr}
 800e0ec:	b088      	sub	sp, #32
 800e0ee:	af00      	add	r7, sp, #0
 800e0f0:	60f8      	str	r0, [r7, #12]
 800e0f2:	60b9      	str	r1, [r7, #8]
 800e0f4:	603b      	str	r3, [r7, #0]
 800e0f6:	4613      	mov	r3, r2
 800e0f8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800e0fa:	2300      	movs	r3, #0
 800e0fc:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800e0fe:	68fb      	ldr	r3, [r7, #12]
 800e100:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800e104:	2b01      	cmp	r3, #1
 800e106:	d101      	bne.n	800e10c <HAL_SPI_Transmit+0x22>
 800e108:	2302      	movs	r3, #2
 800e10a:	e158      	b.n	800e3be <HAL_SPI_Transmit+0x2d4>
 800e10c:	68fb      	ldr	r3, [r7, #12]
 800e10e:	2201      	movs	r2, #1
 800e110:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800e114:	f7fb fd70 	bl	8009bf8 <HAL_GetTick>
 800e118:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800e11a:	88fb      	ldrh	r3, [r7, #6]
 800e11c:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800e11e:	68fb      	ldr	r3, [r7, #12]
 800e120:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800e124:	b2db      	uxtb	r3, r3
 800e126:	2b01      	cmp	r3, #1
 800e128:	d002      	beq.n	800e130 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800e12a:	2302      	movs	r3, #2
 800e12c:	77fb      	strb	r3, [r7, #31]
    goto error;
 800e12e:	e13d      	b.n	800e3ac <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 800e130:	68bb      	ldr	r3, [r7, #8]
 800e132:	2b00      	cmp	r3, #0
 800e134:	d002      	beq.n	800e13c <HAL_SPI_Transmit+0x52>
 800e136:	88fb      	ldrh	r3, [r7, #6]
 800e138:	2b00      	cmp	r3, #0
 800e13a:	d102      	bne.n	800e142 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800e13c:	2301      	movs	r3, #1
 800e13e:	77fb      	strb	r3, [r7, #31]
    goto error;
 800e140:	e134      	b.n	800e3ac <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800e142:	68fb      	ldr	r3, [r7, #12]
 800e144:	2203      	movs	r2, #3
 800e146:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800e14a:	68fb      	ldr	r3, [r7, #12]
 800e14c:	2200      	movs	r2, #0
 800e14e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800e150:	68fb      	ldr	r3, [r7, #12]
 800e152:	68ba      	ldr	r2, [r7, #8]
 800e154:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 800e156:	68fb      	ldr	r3, [r7, #12]
 800e158:	88fa      	ldrh	r2, [r7, #6]
 800e15a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 800e15c:	68fb      	ldr	r3, [r7, #12]
 800e15e:	88fa      	ldrh	r2, [r7, #6]
 800e160:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800e162:	68fb      	ldr	r3, [r7, #12]
 800e164:	2200      	movs	r2, #0
 800e166:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 800e168:	68fb      	ldr	r3, [r7, #12]
 800e16a:	2200      	movs	r2, #0
 800e16c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 800e170:	68fb      	ldr	r3, [r7, #12]
 800e172:	2200      	movs	r2, #0
 800e174:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 800e178:	68fb      	ldr	r3, [r7, #12]
 800e17a:	2200      	movs	r2, #0
 800e17c:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 800e17e:	68fb      	ldr	r3, [r7, #12]
 800e180:	2200      	movs	r2, #0
 800e182:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800e184:	68fb      	ldr	r3, [r7, #12]
 800e186:	689b      	ldr	r3, [r3, #8]
 800e188:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800e18c:	d10f      	bne.n	800e1ae <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800e18e:	68fb      	ldr	r3, [r7, #12]
 800e190:	681b      	ldr	r3, [r3, #0]
 800e192:	681a      	ldr	r2, [r3, #0]
 800e194:	68fb      	ldr	r3, [r7, #12]
 800e196:	681b      	ldr	r3, [r3, #0]
 800e198:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800e19c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800e19e:	68fb      	ldr	r3, [r7, #12]
 800e1a0:	681b      	ldr	r3, [r3, #0]
 800e1a2:	681a      	ldr	r2, [r3, #0]
 800e1a4:	68fb      	ldr	r3, [r7, #12]
 800e1a6:	681b      	ldr	r3, [r3, #0]
 800e1a8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800e1ac:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800e1ae:	68fb      	ldr	r3, [r7, #12]
 800e1b0:	681b      	ldr	r3, [r3, #0]
 800e1b2:	681b      	ldr	r3, [r3, #0]
 800e1b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e1b8:	2b40      	cmp	r3, #64	; 0x40
 800e1ba:	d007      	beq.n	800e1cc <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800e1bc:	68fb      	ldr	r3, [r7, #12]
 800e1be:	681b      	ldr	r3, [r3, #0]
 800e1c0:	681a      	ldr	r2, [r3, #0]
 800e1c2:	68fb      	ldr	r3, [r7, #12]
 800e1c4:	681b      	ldr	r3, [r3, #0]
 800e1c6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800e1ca:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800e1cc:	68fb      	ldr	r3, [r7, #12]
 800e1ce:	68db      	ldr	r3, [r3, #12]
 800e1d0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800e1d4:	d94b      	bls.n	800e26e <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800e1d6:	68fb      	ldr	r3, [r7, #12]
 800e1d8:	685b      	ldr	r3, [r3, #4]
 800e1da:	2b00      	cmp	r3, #0
 800e1dc:	d002      	beq.n	800e1e4 <HAL_SPI_Transmit+0xfa>
 800e1de:	8afb      	ldrh	r3, [r7, #22]
 800e1e0:	2b01      	cmp	r3, #1
 800e1e2:	d13e      	bne.n	800e262 <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800e1e4:	68fb      	ldr	r3, [r7, #12]
 800e1e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e1e8:	881a      	ldrh	r2, [r3, #0]
 800e1ea:	68fb      	ldr	r3, [r7, #12]
 800e1ec:	681b      	ldr	r3, [r3, #0]
 800e1ee:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800e1f0:	68fb      	ldr	r3, [r7, #12]
 800e1f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e1f4:	1c9a      	adds	r2, r3, #2
 800e1f6:	68fb      	ldr	r3, [r7, #12]
 800e1f8:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800e1fa:	68fb      	ldr	r3, [r7, #12]
 800e1fc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800e1fe:	b29b      	uxth	r3, r3
 800e200:	3b01      	subs	r3, #1
 800e202:	b29a      	uxth	r2, r3
 800e204:	68fb      	ldr	r3, [r7, #12]
 800e206:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800e208:	e02b      	b.n	800e262 <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800e20a:	68fb      	ldr	r3, [r7, #12]
 800e20c:	681b      	ldr	r3, [r3, #0]
 800e20e:	689b      	ldr	r3, [r3, #8]
 800e210:	f003 0302 	and.w	r3, r3, #2
 800e214:	2b02      	cmp	r3, #2
 800e216:	d112      	bne.n	800e23e <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800e218:	68fb      	ldr	r3, [r7, #12]
 800e21a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e21c:	881a      	ldrh	r2, [r3, #0]
 800e21e:	68fb      	ldr	r3, [r7, #12]
 800e220:	681b      	ldr	r3, [r3, #0]
 800e222:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800e224:	68fb      	ldr	r3, [r7, #12]
 800e226:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e228:	1c9a      	adds	r2, r3, #2
 800e22a:	68fb      	ldr	r3, [r7, #12]
 800e22c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800e22e:	68fb      	ldr	r3, [r7, #12]
 800e230:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800e232:	b29b      	uxth	r3, r3
 800e234:	3b01      	subs	r3, #1
 800e236:	b29a      	uxth	r2, r3
 800e238:	68fb      	ldr	r3, [r7, #12]
 800e23a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800e23c:	e011      	b.n	800e262 <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800e23e:	f7fb fcdb 	bl	8009bf8 <HAL_GetTick>
 800e242:	4602      	mov	r2, r0
 800e244:	69bb      	ldr	r3, [r7, #24]
 800e246:	1ad3      	subs	r3, r2, r3
 800e248:	683a      	ldr	r2, [r7, #0]
 800e24a:	429a      	cmp	r2, r3
 800e24c:	d803      	bhi.n	800e256 <HAL_SPI_Transmit+0x16c>
 800e24e:	683b      	ldr	r3, [r7, #0]
 800e250:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e254:	d102      	bne.n	800e25c <HAL_SPI_Transmit+0x172>
 800e256:	683b      	ldr	r3, [r7, #0]
 800e258:	2b00      	cmp	r3, #0
 800e25a:	d102      	bne.n	800e262 <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 800e25c:	2303      	movs	r3, #3
 800e25e:	77fb      	strb	r3, [r7, #31]
          goto error;
 800e260:	e0a4      	b.n	800e3ac <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 800e262:	68fb      	ldr	r3, [r7, #12]
 800e264:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800e266:	b29b      	uxth	r3, r3
 800e268:	2b00      	cmp	r3, #0
 800e26a:	d1ce      	bne.n	800e20a <HAL_SPI_Transmit+0x120>
 800e26c:	e07c      	b.n	800e368 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800e26e:	68fb      	ldr	r3, [r7, #12]
 800e270:	685b      	ldr	r3, [r3, #4]
 800e272:	2b00      	cmp	r3, #0
 800e274:	d002      	beq.n	800e27c <HAL_SPI_Transmit+0x192>
 800e276:	8afb      	ldrh	r3, [r7, #22]
 800e278:	2b01      	cmp	r3, #1
 800e27a:	d170      	bne.n	800e35e <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 800e27c:	68fb      	ldr	r3, [r7, #12]
 800e27e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800e280:	b29b      	uxth	r3, r3
 800e282:	2b01      	cmp	r3, #1
 800e284:	d912      	bls.n	800e2ac <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800e286:	68fb      	ldr	r3, [r7, #12]
 800e288:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e28a:	881a      	ldrh	r2, [r3, #0]
 800e28c:	68fb      	ldr	r3, [r7, #12]
 800e28e:	681b      	ldr	r3, [r3, #0]
 800e290:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800e292:	68fb      	ldr	r3, [r7, #12]
 800e294:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e296:	1c9a      	adds	r2, r3, #2
 800e298:	68fb      	ldr	r3, [r7, #12]
 800e29a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 800e29c:	68fb      	ldr	r3, [r7, #12]
 800e29e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800e2a0:	b29b      	uxth	r3, r3
 800e2a2:	3b02      	subs	r3, #2
 800e2a4:	b29a      	uxth	r2, r3
 800e2a6:	68fb      	ldr	r3, [r7, #12]
 800e2a8:	87da      	strh	r2, [r3, #62]	; 0x3e
 800e2aa:	e058      	b.n	800e35e <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800e2ac:	68fb      	ldr	r3, [r7, #12]
 800e2ae:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e2b0:	68fb      	ldr	r3, [r7, #12]
 800e2b2:	681b      	ldr	r3, [r3, #0]
 800e2b4:	330c      	adds	r3, #12
 800e2b6:	7812      	ldrb	r2, [r2, #0]
 800e2b8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 800e2ba:	68fb      	ldr	r3, [r7, #12]
 800e2bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e2be:	1c5a      	adds	r2, r3, #1
 800e2c0:	68fb      	ldr	r3, [r7, #12]
 800e2c2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800e2c4:	68fb      	ldr	r3, [r7, #12]
 800e2c6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800e2c8:	b29b      	uxth	r3, r3
 800e2ca:	3b01      	subs	r3, #1
 800e2cc:	b29a      	uxth	r2, r3
 800e2ce:	68fb      	ldr	r3, [r7, #12]
 800e2d0:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 800e2d2:	e044      	b.n	800e35e <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800e2d4:	68fb      	ldr	r3, [r7, #12]
 800e2d6:	681b      	ldr	r3, [r3, #0]
 800e2d8:	689b      	ldr	r3, [r3, #8]
 800e2da:	f003 0302 	and.w	r3, r3, #2
 800e2de:	2b02      	cmp	r3, #2
 800e2e0:	d12b      	bne.n	800e33a <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 800e2e2:	68fb      	ldr	r3, [r7, #12]
 800e2e4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800e2e6:	b29b      	uxth	r3, r3
 800e2e8:	2b01      	cmp	r3, #1
 800e2ea:	d912      	bls.n	800e312 <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800e2ec:	68fb      	ldr	r3, [r7, #12]
 800e2ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e2f0:	881a      	ldrh	r2, [r3, #0]
 800e2f2:	68fb      	ldr	r3, [r7, #12]
 800e2f4:	681b      	ldr	r3, [r3, #0]
 800e2f6:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800e2f8:	68fb      	ldr	r3, [r7, #12]
 800e2fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e2fc:	1c9a      	adds	r2, r3, #2
 800e2fe:	68fb      	ldr	r3, [r7, #12]
 800e300:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800e302:	68fb      	ldr	r3, [r7, #12]
 800e304:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800e306:	b29b      	uxth	r3, r3
 800e308:	3b02      	subs	r3, #2
 800e30a:	b29a      	uxth	r2, r3
 800e30c:	68fb      	ldr	r3, [r7, #12]
 800e30e:	87da      	strh	r2, [r3, #62]	; 0x3e
 800e310:	e025      	b.n	800e35e <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800e312:	68fb      	ldr	r3, [r7, #12]
 800e314:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e316:	68fb      	ldr	r3, [r7, #12]
 800e318:	681b      	ldr	r3, [r3, #0]
 800e31a:	330c      	adds	r3, #12
 800e31c:	7812      	ldrb	r2, [r2, #0]
 800e31e:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800e320:	68fb      	ldr	r3, [r7, #12]
 800e322:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e324:	1c5a      	adds	r2, r3, #1
 800e326:	68fb      	ldr	r3, [r7, #12]
 800e328:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 800e32a:	68fb      	ldr	r3, [r7, #12]
 800e32c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800e32e:	b29b      	uxth	r3, r3
 800e330:	3b01      	subs	r3, #1
 800e332:	b29a      	uxth	r2, r3
 800e334:	68fb      	ldr	r3, [r7, #12]
 800e336:	87da      	strh	r2, [r3, #62]	; 0x3e
 800e338:	e011      	b.n	800e35e <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800e33a:	f7fb fc5d 	bl	8009bf8 <HAL_GetTick>
 800e33e:	4602      	mov	r2, r0
 800e340:	69bb      	ldr	r3, [r7, #24]
 800e342:	1ad3      	subs	r3, r2, r3
 800e344:	683a      	ldr	r2, [r7, #0]
 800e346:	429a      	cmp	r2, r3
 800e348:	d803      	bhi.n	800e352 <HAL_SPI_Transmit+0x268>
 800e34a:	683b      	ldr	r3, [r7, #0]
 800e34c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e350:	d102      	bne.n	800e358 <HAL_SPI_Transmit+0x26e>
 800e352:	683b      	ldr	r3, [r7, #0]
 800e354:	2b00      	cmp	r3, #0
 800e356:	d102      	bne.n	800e35e <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 800e358:	2303      	movs	r3, #3
 800e35a:	77fb      	strb	r3, [r7, #31]
          goto error;
 800e35c:	e026      	b.n	800e3ac <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 800e35e:	68fb      	ldr	r3, [r7, #12]
 800e360:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800e362:	b29b      	uxth	r3, r3
 800e364:	2b00      	cmp	r3, #0
 800e366:	d1b5      	bne.n	800e2d4 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800e368:	69ba      	ldr	r2, [r7, #24]
 800e36a:	6839      	ldr	r1, [r7, #0]
 800e36c:	68f8      	ldr	r0, [r7, #12]
 800e36e:	f000 fce3 	bl	800ed38 <SPI_EndRxTxTransaction>
 800e372:	4603      	mov	r3, r0
 800e374:	2b00      	cmp	r3, #0
 800e376:	d002      	beq.n	800e37e <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800e378:	68fb      	ldr	r3, [r7, #12]
 800e37a:	2220      	movs	r2, #32
 800e37c:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800e37e:	68fb      	ldr	r3, [r7, #12]
 800e380:	689b      	ldr	r3, [r3, #8]
 800e382:	2b00      	cmp	r3, #0
 800e384:	d10a      	bne.n	800e39c <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800e386:	2300      	movs	r3, #0
 800e388:	613b      	str	r3, [r7, #16]
 800e38a:	68fb      	ldr	r3, [r7, #12]
 800e38c:	681b      	ldr	r3, [r3, #0]
 800e38e:	68db      	ldr	r3, [r3, #12]
 800e390:	613b      	str	r3, [r7, #16]
 800e392:	68fb      	ldr	r3, [r7, #12]
 800e394:	681b      	ldr	r3, [r3, #0]
 800e396:	689b      	ldr	r3, [r3, #8]
 800e398:	613b      	str	r3, [r7, #16]
 800e39a:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800e39c:	68fb      	ldr	r3, [r7, #12]
 800e39e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800e3a0:	2b00      	cmp	r3, #0
 800e3a2:	d002      	beq.n	800e3aa <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 800e3a4:	2301      	movs	r3, #1
 800e3a6:	77fb      	strb	r3, [r7, #31]
 800e3a8:	e000      	b.n	800e3ac <HAL_SPI_Transmit+0x2c2>
  }

error:
 800e3aa:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800e3ac:	68fb      	ldr	r3, [r7, #12]
 800e3ae:	2201      	movs	r2, #1
 800e3b0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800e3b4:	68fb      	ldr	r3, [r7, #12]
 800e3b6:	2200      	movs	r2, #0
 800e3b8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800e3bc:	7ffb      	ldrb	r3, [r7, #31]
}
 800e3be:	4618      	mov	r0, r3
 800e3c0:	3720      	adds	r7, #32
 800e3c2:	46bd      	mov	sp, r7
 800e3c4:	bd80      	pop	{r7, pc}

0800e3c6 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800e3c6:	b580      	push	{r7, lr}
 800e3c8:	b088      	sub	sp, #32
 800e3ca:	af02      	add	r7, sp, #8
 800e3cc:	60f8      	str	r0, [r7, #12]
 800e3ce:	60b9      	str	r1, [r7, #8]
 800e3d0:	603b      	str	r3, [r7, #0]
 800e3d2:	4613      	mov	r3, r2
 800e3d4:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800e3d6:	2300      	movs	r3, #0
 800e3d8:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800e3da:	68fb      	ldr	r3, [r7, #12]
 800e3dc:	685b      	ldr	r3, [r3, #4]
 800e3de:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800e3e2:	d112      	bne.n	800e40a <HAL_SPI_Receive+0x44>
 800e3e4:	68fb      	ldr	r3, [r7, #12]
 800e3e6:	689b      	ldr	r3, [r3, #8]
 800e3e8:	2b00      	cmp	r3, #0
 800e3ea:	d10e      	bne.n	800e40a <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800e3ec:	68fb      	ldr	r3, [r7, #12]
 800e3ee:	2204      	movs	r2, #4
 800e3f0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800e3f4:	88fa      	ldrh	r2, [r7, #6]
 800e3f6:	683b      	ldr	r3, [r7, #0]
 800e3f8:	9300      	str	r3, [sp, #0]
 800e3fa:	4613      	mov	r3, r2
 800e3fc:	68ba      	ldr	r2, [r7, #8]
 800e3fe:	68b9      	ldr	r1, [r7, #8]
 800e400:	68f8      	ldr	r0, [r7, #12]
 800e402:	f000 f910 	bl	800e626 <HAL_SPI_TransmitReceive>
 800e406:	4603      	mov	r3, r0
 800e408:	e109      	b.n	800e61e <HAL_SPI_Receive+0x258>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800e40a:	68fb      	ldr	r3, [r7, #12]
 800e40c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800e410:	2b01      	cmp	r3, #1
 800e412:	d101      	bne.n	800e418 <HAL_SPI_Receive+0x52>
 800e414:	2302      	movs	r3, #2
 800e416:	e102      	b.n	800e61e <HAL_SPI_Receive+0x258>
 800e418:	68fb      	ldr	r3, [r7, #12]
 800e41a:	2201      	movs	r2, #1
 800e41c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800e420:	f7fb fbea 	bl	8009bf8 <HAL_GetTick>
 800e424:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800e426:	68fb      	ldr	r3, [r7, #12]
 800e428:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800e42c:	b2db      	uxtb	r3, r3
 800e42e:	2b01      	cmp	r3, #1
 800e430:	d002      	beq.n	800e438 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 800e432:	2302      	movs	r3, #2
 800e434:	75fb      	strb	r3, [r7, #23]
    goto error;
 800e436:	e0e9      	b.n	800e60c <HAL_SPI_Receive+0x246>
  }

  if ((pData == NULL) || (Size == 0U))
 800e438:	68bb      	ldr	r3, [r7, #8]
 800e43a:	2b00      	cmp	r3, #0
 800e43c:	d002      	beq.n	800e444 <HAL_SPI_Receive+0x7e>
 800e43e:	88fb      	ldrh	r3, [r7, #6]
 800e440:	2b00      	cmp	r3, #0
 800e442:	d102      	bne.n	800e44a <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 800e444:	2301      	movs	r3, #1
 800e446:	75fb      	strb	r3, [r7, #23]
    goto error;
 800e448:	e0e0      	b.n	800e60c <HAL_SPI_Receive+0x246>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800e44a:	68fb      	ldr	r3, [r7, #12]
 800e44c:	2204      	movs	r2, #4
 800e44e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800e452:	68fb      	ldr	r3, [r7, #12]
 800e454:	2200      	movs	r2, #0
 800e456:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800e458:	68fb      	ldr	r3, [r7, #12]
 800e45a:	68ba      	ldr	r2, [r7, #8]
 800e45c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 800e45e:	68fb      	ldr	r3, [r7, #12]
 800e460:	88fa      	ldrh	r2, [r7, #6]
 800e462:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 800e466:	68fb      	ldr	r3, [r7, #12]
 800e468:	88fa      	ldrh	r2, [r7, #6]
 800e46a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800e46e:	68fb      	ldr	r3, [r7, #12]
 800e470:	2200      	movs	r2, #0
 800e472:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 800e474:	68fb      	ldr	r3, [r7, #12]
 800e476:	2200      	movs	r2, #0
 800e478:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 800e47a:	68fb      	ldr	r3, [r7, #12]
 800e47c:	2200      	movs	r2, #0
 800e47e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 800e480:	68fb      	ldr	r3, [r7, #12]
 800e482:	2200      	movs	r2, #0
 800e484:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800e486:	68fb      	ldr	r3, [r7, #12]
 800e488:	2200      	movs	r2, #0
 800e48a:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800e48c:	68fb      	ldr	r3, [r7, #12]
 800e48e:	68db      	ldr	r3, [r3, #12]
 800e490:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800e494:	d908      	bls.n	800e4a8 <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800e496:	68fb      	ldr	r3, [r7, #12]
 800e498:	681b      	ldr	r3, [r3, #0]
 800e49a:	685a      	ldr	r2, [r3, #4]
 800e49c:	68fb      	ldr	r3, [r7, #12]
 800e49e:	681b      	ldr	r3, [r3, #0]
 800e4a0:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800e4a4:	605a      	str	r2, [r3, #4]
 800e4a6:	e007      	b.n	800e4b8 <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800e4a8:	68fb      	ldr	r3, [r7, #12]
 800e4aa:	681b      	ldr	r3, [r3, #0]
 800e4ac:	685a      	ldr	r2, [r3, #4]
 800e4ae:	68fb      	ldr	r3, [r7, #12]
 800e4b0:	681b      	ldr	r3, [r3, #0]
 800e4b2:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800e4b6:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800e4b8:	68fb      	ldr	r3, [r7, #12]
 800e4ba:	689b      	ldr	r3, [r3, #8]
 800e4bc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800e4c0:	d10f      	bne.n	800e4e2 <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800e4c2:	68fb      	ldr	r3, [r7, #12]
 800e4c4:	681b      	ldr	r3, [r3, #0]
 800e4c6:	681a      	ldr	r2, [r3, #0]
 800e4c8:	68fb      	ldr	r3, [r7, #12]
 800e4ca:	681b      	ldr	r3, [r3, #0]
 800e4cc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800e4d0:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800e4d2:	68fb      	ldr	r3, [r7, #12]
 800e4d4:	681b      	ldr	r3, [r3, #0]
 800e4d6:	681a      	ldr	r2, [r3, #0]
 800e4d8:	68fb      	ldr	r3, [r7, #12]
 800e4da:	681b      	ldr	r3, [r3, #0]
 800e4dc:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800e4e0:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800e4e2:	68fb      	ldr	r3, [r7, #12]
 800e4e4:	681b      	ldr	r3, [r3, #0]
 800e4e6:	681b      	ldr	r3, [r3, #0]
 800e4e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e4ec:	2b40      	cmp	r3, #64	; 0x40
 800e4ee:	d007      	beq.n	800e500 <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800e4f0:	68fb      	ldr	r3, [r7, #12]
 800e4f2:	681b      	ldr	r3, [r3, #0]
 800e4f4:	681a      	ldr	r2, [r3, #0]
 800e4f6:	68fb      	ldr	r3, [r7, #12]
 800e4f8:	681b      	ldr	r3, [r3, #0]
 800e4fa:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800e4fe:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 800e500:	68fb      	ldr	r3, [r7, #12]
 800e502:	68db      	ldr	r3, [r3, #12]
 800e504:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800e508:	d867      	bhi.n	800e5da <HAL_SPI_Receive+0x214>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800e50a:	e030      	b.n	800e56e <HAL_SPI_Receive+0x1a8>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800e50c:	68fb      	ldr	r3, [r7, #12]
 800e50e:	681b      	ldr	r3, [r3, #0]
 800e510:	689b      	ldr	r3, [r3, #8]
 800e512:	f003 0301 	and.w	r3, r3, #1
 800e516:	2b01      	cmp	r3, #1
 800e518:	d117      	bne.n	800e54a <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800e51a:	68fb      	ldr	r3, [r7, #12]
 800e51c:	681b      	ldr	r3, [r3, #0]
 800e51e:	f103 020c 	add.w	r2, r3, #12
 800e522:	68fb      	ldr	r3, [r7, #12]
 800e524:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e526:	7812      	ldrb	r2, [r2, #0]
 800e528:	b2d2      	uxtb	r2, r2
 800e52a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800e52c:	68fb      	ldr	r3, [r7, #12]
 800e52e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e530:	1c5a      	adds	r2, r3, #1
 800e532:	68fb      	ldr	r3, [r7, #12]
 800e534:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800e536:	68fb      	ldr	r3, [r7, #12]
 800e538:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800e53c:	b29b      	uxth	r3, r3
 800e53e:	3b01      	subs	r3, #1
 800e540:	b29a      	uxth	r2, r3
 800e542:	68fb      	ldr	r3, [r7, #12]
 800e544:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 800e548:	e011      	b.n	800e56e <HAL_SPI_Receive+0x1a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800e54a:	f7fb fb55 	bl	8009bf8 <HAL_GetTick>
 800e54e:	4602      	mov	r2, r0
 800e550:	693b      	ldr	r3, [r7, #16]
 800e552:	1ad3      	subs	r3, r2, r3
 800e554:	683a      	ldr	r2, [r7, #0]
 800e556:	429a      	cmp	r2, r3
 800e558:	d803      	bhi.n	800e562 <HAL_SPI_Receive+0x19c>
 800e55a:	683b      	ldr	r3, [r7, #0]
 800e55c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e560:	d102      	bne.n	800e568 <HAL_SPI_Receive+0x1a2>
 800e562:	683b      	ldr	r3, [r7, #0]
 800e564:	2b00      	cmp	r3, #0
 800e566:	d102      	bne.n	800e56e <HAL_SPI_Receive+0x1a8>
        {
          errorcode = HAL_TIMEOUT;
 800e568:	2303      	movs	r3, #3
 800e56a:	75fb      	strb	r3, [r7, #23]
          goto error;
 800e56c:	e04e      	b.n	800e60c <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 800e56e:	68fb      	ldr	r3, [r7, #12]
 800e570:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800e574:	b29b      	uxth	r3, r3
 800e576:	2b00      	cmp	r3, #0
 800e578:	d1c8      	bne.n	800e50c <HAL_SPI_Receive+0x146>
 800e57a:	e034      	b.n	800e5e6 <HAL_SPI_Receive+0x220>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800e57c:	68fb      	ldr	r3, [r7, #12]
 800e57e:	681b      	ldr	r3, [r3, #0]
 800e580:	689b      	ldr	r3, [r3, #8]
 800e582:	f003 0301 	and.w	r3, r3, #1
 800e586:	2b01      	cmp	r3, #1
 800e588:	d115      	bne.n	800e5b6 <HAL_SPI_Receive+0x1f0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800e58a:	68fb      	ldr	r3, [r7, #12]
 800e58c:	681b      	ldr	r3, [r3, #0]
 800e58e:	68da      	ldr	r2, [r3, #12]
 800e590:	68fb      	ldr	r3, [r7, #12]
 800e592:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e594:	b292      	uxth	r2, r2
 800e596:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800e598:	68fb      	ldr	r3, [r7, #12]
 800e59a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e59c:	1c9a      	adds	r2, r3, #2
 800e59e:	68fb      	ldr	r3, [r7, #12]
 800e5a0:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800e5a2:	68fb      	ldr	r3, [r7, #12]
 800e5a4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800e5a8:	b29b      	uxth	r3, r3
 800e5aa:	3b01      	subs	r3, #1
 800e5ac:	b29a      	uxth	r2, r3
 800e5ae:	68fb      	ldr	r3, [r7, #12]
 800e5b0:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 800e5b4:	e011      	b.n	800e5da <HAL_SPI_Receive+0x214>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800e5b6:	f7fb fb1f 	bl	8009bf8 <HAL_GetTick>
 800e5ba:	4602      	mov	r2, r0
 800e5bc:	693b      	ldr	r3, [r7, #16]
 800e5be:	1ad3      	subs	r3, r2, r3
 800e5c0:	683a      	ldr	r2, [r7, #0]
 800e5c2:	429a      	cmp	r2, r3
 800e5c4:	d803      	bhi.n	800e5ce <HAL_SPI_Receive+0x208>
 800e5c6:	683b      	ldr	r3, [r7, #0]
 800e5c8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e5cc:	d102      	bne.n	800e5d4 <HAL_SPI_Receive+0x20e>
 800e5ce:	683b      	ldr	r3, [r7, #0]
 800e5d0:	2b00      	cmp	r3, #0
 800e5d2:	d102      	bne.n	800e5da <HAL_SPI_Receive+0x214>
        {
          errorcode = HAL_TIMEOUT;
 800e5d4:	2303      	movs	r3, #3
 800e5d6:	75fb      	strb	r3, [r7, #23]
          goto error;
 800e5d8:	e018      	b.n	800e60c <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 800e5da:	68fb      	ldr	r3, [r7, #12]
 800e5dc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800e5e0:	b29b      	uxth	r3, r3
 800e5e2:	2b00      	cmp	r3, #0
 800e5e4:	d1ca      	bne.n	800e57c <HAL_SPI_Receive+0x1b6>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800e5e6:	693a      	ldr	r2, [r7, #16]
 800e5e8:	6839      	ldr	r1, [r7, #0]
 800e5ea:	68f8      	ldr	r0, [r7, #12]
 800e5ec:	f000 fb4c 	bl	800ec88 <SPI_EndRxTransaction>
 800e5f0:	4603      	mov	r3, r0
 800e5f2:	2b00      	cmp	r3, #0
 800e5f4:	d002      	beq.n	800e5fc <HAL_SPI_Receive+0x236>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800e5f6:	68fb      	ldr	r3, [r7, #12]
 800e5f8:	2220      	movs	r2, #32
 800e5fa:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800e5fc:	68fb      	ldr	r3, [r7, #12]
 800e5fe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800e600:	2b00      	cmp	r3, #0
 800e602:	d002      	beq.n	800e60a <HAL_SPI_Receive+0x244>
  {
    errorcode = HAL_ERROR;
 800e604:	2301      	movs	r3, #1
 800e606:	75fb      	strb	r3, [r7, #23]
 800e608:	e000      	b.n	800e60c <HAL_SPI_Receive+0x246>
  }

error :
 800e60a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800e60c:	68fb      	ldr	r3, [r7, #12]
 800e60e:	2201      	movs	r2, #1
 800e610:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 800e614:	68fb      	ldr	r3, [r7, #12]
 800e616:	2200      	movs	r2, #0
 800e618:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800e61c:	7dfb      	ldrb	r3, [r7, #23]
}
 800e61e:	4618      	mov	r0, r3
 800e620:	3718      	adds	r7, #24
 800e622:	46bd      	mov	sp, r7
 800e624:	bd80      	pop	{r7, pc}

0800e626 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800e626:	b580      	push	{r7, lr}
 800e628:	b08a      	sub	sp, #40	; 0x28
 800e62a:	af00      	add	r7, sp, #0
 800e62c:	60f8      	str	r0, [r7, #12]
 800e62e:	60b9      	str	r1, [r7, #8]
 800e630:	607a      	str	r2, [r7, #4]
 800e632:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800e634:	2301      	movs	r3, #1
 800e636:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800e638:	2300      	movs	r3, #0
 800e63a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800e63e:	68fb      	ldr	r3, [r7, #12]
 800e640:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800e644:	2b01      	cmp	r3, #1
 800e646:	d101      	bne.n	800e64c <HAL_SPI_TransmitReceive+0x26>
 800e648:	2302      	movs	r3, #2
 800e64a:	e1fb      	b.n	800ea44 <HAL_SPI_TransmitReceive+0x41e>
 800e64c:	68fb      	ldr	r3, [r7, #12]
 800e64e:	2201      	movs	r2, #1
 800e650:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800e654:	f7fb fad0 	bl	8009bf8 <HAL_GetTick>
 800e658:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800e65a:	68fb      	ldr	r3, [r7, #12]
 800e65c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800e660:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 800e662:	68fb      	ldr	r3, [r7, #12]
 800e664:	685b      	ldr	r3, [r3, #4]
 800e666:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 800e668:	887b      	ldrh	r3, [r7, #2]
 800e66a:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 800e66c:	887b      	ldrh	r3, [r7, #2]
 800e66e:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800e670:	7efb      	ldrb	r3, [r7, #27]
 800e672:	2b01      	cmp	r3, #1
 800e674:	d00e      	beq.n	800e694 <HAL_SPI_TransmitReceive+0x6e>
 800e676:	697b      	ldr	r3, [r7, #20]
 800e678:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800e67c:	d106      	bne.n	800e68c <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800e67e:	68fb      	ldr	r3, [r7, #12]
 800e680:	689b      	ldr	r3, [r3, #8]
 800e682:	2b00      	cmp	r3, #0
 800e684:	d102      	bne.n	800e68c <HAL_SPI_TransmitReceive+0x66>
 800e686:	7efb      	ldrb	r3, [r7, #27]
 800e688:	2b04      	cmp	r3, #4
 800e68a:	d003      	beq.n	800e694 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 800e68c:	2302      	movs	r3, #2
 800e68e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 800e692:	e1cd      	b.n	800ea30 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800e694:	68bb      	ldr	r3, [r7, #8]
 800e696:	2b00      	cmp	r3, #0
 800e698:	d005      	beq.n	800e6a6 <HAL_SPI_TransmitReceive+0x80>
 800e69a:	687b      	ldr	r3, [r7, #4]
 800e69c:	2b00      	cmp	r3, #0
 800e69e:	d002      	beq.n	800e6a6 <HAL_SPI_TransmitReceive+0x80>
 800e6a0:	887b      	ldrh	r3, [r7, #2]
 800e6a2:	2b00      	cmp	r3, #0
 800e6a4:	d103      	bne.n	800e6ae <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 800e6a6:	2301      	movs	r3, #1
 800e6a8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 800e6ac:	e1c0      	b.n	800ea30 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800e6ae:	68fb      	ldr	r3, [r7, #12]
 800e6b0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800e6b4:	b2db      	uxtb	r3, r3
 800e6b6:	2b04      	cmp	r3, #4
 800e6b8:	d003      	beq.n	800e6c2 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800e6ba:	68fb      	ldr	r3, [r7, #12]
 800e6bc:	2205      	movs	r2, #5
 800e6be:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800e6c2:	68fb      	ldr	r3, [r7, #12]
 800e6c4:	2200      	movs	r2, #0
 800e6c6:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800e6c8:	68fb      	ldr	r3, [r7, #12]
 800e6ca:	687a      	ldr	r2, [r7, #4]
 800e6cc:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 800e6ce:	68fb      	ldr	r3, [r7, #12]
 800e6d0:	887a      	ldrh	r2, [r7, #2]
 800e6d2:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 800e6d6:	68fb      	ldr	r3, [r7, #12]
 800e6d8:	887a      	ldrh	r2, [r7, #2]
 800e6da:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800e6de:	68fb      	ldr	r3, [r7, #12]
 800e6e0:	68ba      	ldr	r2, [r7, #8]
 800e6e2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 800e6e4:	68fb      	ldr	r3, [r7, #12]
 800e6e6:	887a      	ldrh	r2, [r7, #2]
 800e6e8:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 800e6ea:	68fb      	ldr	r3, [r7, #12]
 800e6ec:	887a      	ldrh	r2, [r7, #2]
 800e6ee:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800e6f0:	68fb      	ldr	r3, [r7, #12]
 800e6f2:	2200      	movs	r2, #0
 800e6f4:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800e6f6:	68fb      	ldr	r3, [r7, #12]
 800e6f8:	2200      	movs	r2, #0
 800e6fa:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 800e6fc:	68fb      	ldr	r3, [r7, #12]
 800e6fe:	68db      	ldr	r3, [r3, #12]
 800e700:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800e704:	d802      	bhi.n	800e70c <HAL_SPI_TransmitReceive+0xe6>
 800e706:	8a3b      	ldrh	r3, [r7, #16]
 800e708:	2b01      	cmp	r3, #1
 800e70a:	d908      	bls.n	800e71e <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800e70c:	68fb      	ldr	r3, [r7, #12]
 800e70e:	681b      	ldr	r3, [r3, #0]
 800e710:	685a      	ldr	r2, [r3, #4]
 800e712:	68fb      	ldr	r3, [r7, #12]
 800e714:	681b      	ldr	r3, [r3, #0]
 800e716:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800e71a:	605a      	str	r2, [r3, #4]
 800e71c:	e007      	b.n	800e72e <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800e71e:	68fb      	ldr	r3, [r7, #12]
 800e720:	681b      	ldr	r3, [r3, #0]
 800e722:	685a      	ldr	r2, [r3, #4]
 800e724:	68fb      	ldr	r3, [r7, #12]
 800e726:	681b      	ldr	r3, [r3, #0]
 800e728:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800e72c:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800e72e:	68fb      	ldr	r3, [r7, #12]
 800e730:	681b      	ldr	r3, [r3, #0]
 800e732:	681b      	ldr	r3, [r3, #0]
 800e734:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e738:	2b40      	cmp	r3, #64	; 0x40
 800e73a:	d007      	beq.n	800e74c <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800e73c:	68fb      	ldr	r3, [r7, #12]
 800e73e:	681b      	ldr	r3, [r3, #0]
 800e740:	681a      	ldr	r2, [r3, #0]
 800e742:	68fb      	ldr	r3, [r7, #12]
 800e744:	681b      	ldr	r3, [r3, #0]
 800e746:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800e74a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800e74c:	68fb      	ldr	r3, [r7, #12]
 800e74e:	68db      	ldr	r3, [r3, #12]
 800e750:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800e754:	d97c      	bls.n	800e850 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800e756:	68fb      	ldr	r3, [r7, #12]
 800e758:	685b      	ldr	r3, [r3, #4]
 800e75a:	2b00      	cmp	r3, #0
 800e75c:	d002      	beq.n	800e764 <HAL_SPI_TransmitReceive+0x13e>
 800e75e:	8a7b      	ldrh	r3, [r7, #18]
 800e760:	2b01      	cmp	r3, #1
 800e762:	d169      	bne.n	800e838 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800e764:	68fb      	ldr	r3, [r7, #12]
 800e766:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e768:	881a      	ldrh	r2, [r3, #0]
 800e76a:	68fb      	ldr	r3, [r7, #12]
 800e76c:	681b      	ldr	r3, [r3, #0]
 800e76e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800e770:	68fb      	ldr	r3, [r7, #12]
 800e772:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e774:	1c9a      	adds	r2, r3, #2
 800e776:	68fb      	ldr	r3, [r7, #12]
 800e778:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800e77a:	68fb      	ldr	r3, [r7, #12]
 800e77c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800e77e:	b29b      	uxth	r3, r3
 800e780:	3b01      	subs	r3, #1
 800e782:	b29a      	uxth	r2, r3
 800e784:	68fb      	ldr	r3, [r7, #12]
 800e786:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800e788:	e056      	b.n	800e838 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800e78a:	68fb      	ldr	r3, [r7, #12]
 800e78c:	681b      	ldr	r3, [r3, #0]
 800e78e:	689b      	ldr	r3, [r3, #8]
 800e790:	f003 0302 	and.w	r3, r3, #2
 800e794:	2b02      	cmp	r3, #2
 800e796:	d11b      	bne.n	800e7d0 <HAL_SPI_TransmitReceive+0x1aa>
 800e798:	68fb      	ldr	r3, [r7, #12]
 800e79a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800e79c:	b29b      	uxth	r3, r3
 800e79e:	2b00      	cmp	r3, #0
 800e7a0:	d016      	beq.n	800e7d0 <HAL_SPI_TransmitReceive+0x1aa>
 800e7a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e7a4:	2b01      	cmp	r3, #1
 800e7a6:	d113      	bne.n	800e7d0 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800e7a8:	68fb      	ldr	r3, [r7, #12]
 800e7aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e7ac:	881a      	ldrh	r2, [r3, #0]
 800e7ae:	68fb      	ldr	r3, [r7, #12]
 800e7b0:	681b      	ldr	r3, [r3, #0]
 800e7b2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800e7b4:	68fb      	ldr	r3, [r7, #12]
 800e7b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e7b8:	1c9a      	adds	r2, r3, #2
 800e7ba:	68fb      	ldr	r3, [r7, #12]
 800e7bc:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800e7be:	68fb      	ldr	r3, [r7, #12]
 800e7c0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800e7c2:	b29b      	uxth	r3, r3
 800e7c4:	3b01      	subs	r3, #1
 800e7c6:	b29a      	uxth	r2, r3
 800e7c8:	68fb      	ldr	r3, [r7, #12]
 800e7ca:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800e7cc:	2300      	movs	r3, #0
 800e7ce:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800e7d0:	68fb      	ldr	r3, [r7, #12]
 800e7d2:	681b      	ldr	r3, [r3, #0]
 800e7d4:	689b      	ldr	r3, [r3, #8]
 800e7d6:	f003 0301 	and.w	r3, r3, #1
 800e7da:	2b01      	cmp	r3, #1
 800e7dc:	d11c      	bne.n	800e818 <HAL_SPI_TransmitReceive+0x1f2>
 800e7de:	68fb      	ldr	r3, [r7, #12]
 800e7e0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800e7e4:	b29b      	uxth	r3, r3
 800e7e6:	2b00      	cmp	r3, #0
 800e7e8:	d016      	beq.n	800e818 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800e7ea:	68fb      	ldr	r3, [r7, #12]
 800e7ec:	681b      	ldr	r3, [r3, #0]
 800e7ee:	68da      	ldr	r2, [r3, #12]
 800e7f0:	68fb      	ldr	r3, [r7, #12]
 800e7f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e7f4:	b292      	uxth	r2, r2
 800e7f6:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800e7f8:	68fb      	ldr	r3, [r7, #12]
 800e7fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e7fc:	1c9a      	adds	r2, r3, #2
 800e7fe:	68fb      	ldr	r3, [r7, #12]
 800e800:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800e802:	68fb      	ldr	r3, [r7, #12]
 800e804:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800e808:	b29b      	uxth	r3, r3
 800e80a:	3b01      	subs	r3, #1
 800e80c:	b29a      	uxth	r2, r3
 800e80e:	68fb      	ldr	r3, [r7, #12]
 800e810:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800e814:	2301      	movs	r3, #1
 800e816:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800e818:	f7fb f9ee 	bl	8009bf8 <HAL_GetTick>
 800e81c:	4602      	mov	r2, r0
 800e81e:	69fb      	ldr	r3, [r7, #28]
 800e820:	1ad3      	subs	r3, r2, r3
 800e822:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e824:	429a      	cmp	r2, r3
 800e826:	d807      	bhi.n	800e838 <HAL_SPI_TransmitReceive+0x212>
 800e828:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e82a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e82e:	d003      	beq.n	800e838 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 800e830:	2303      	movs	r3, #3
 800e832:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 800e836:	e0fb      	b.n	800ea30 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800e838:	68fb      	ldr	r3, [r7, #12]
 800e83a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800e83c:	b29b      	uxth	r3, r3
 800e83e:	2b00      	cmp	r3, #0
 800e840:	d1a3      	bne.n	800e78a <HAL_SPI_TransmitReceive+0x164>
 800e842:	68fb      	ldr	r3, [r7, #12]
 800e844:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800e848:	b29b      	uxth	r3, r3
 800e84a:	2b00      	cmp	r3, #0
 800e84c:	d19d      	bne.n	800e78a <HAL_SPI_TransmitReceive+0x164>
 800e84e:	e0df      	b.n	800ea10 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800e850:	68fb      	ldr	r3, [r7, #12]
 800e852:	685b      	ldr	r3, [r3, #4]
 800e854:	2b00      	cmp	r3, #0
 800e856:	d003      	beq.n	800e860 <HAL_SPI_TransmitReceive+0x23a>
 800e858:	8a7b      	ldrh	r3, [r7, #18]
 800e85a:	2b01      	cmp	r3, #1
 800e85c:	f040 80cb 	bne.w	800e9f6 <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 800e860:	68fb      	ldr	r3, [r7, #12]
 800e862:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800e864:	b29b      	uxth	r3, r3
 800e866:	2b01      	cmp	r3, #1
 800e868:	d912      	bls.n	800e890 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800e86a:	68fb      	ldr	r3, [r7, #12]
 800e86c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e86e:	881a      	ldrh	r2, [r3, #0]
 800e870:	68fb      	ldr	r3, [r7, #12]
 800e872:	681b      	ldr	r3, [r3, #0]
 800e874:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800e876:	68fb      	ldr	r3, [r7, #12]
 800e878:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e87a:	1c9a      	adds	r2, r3, #2
 800e87c:	68fb      	ldr	r3, [r7, #12]
 800e87e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 800e880:	68fb      	ldr	r3, [r7, #12]
 800e882:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800e884:	b29b      	uxth	r3, r3
 800e886:	3b02      	subs	r3, #2
 800e888:	b29a      	uxth	r2, r3
 800e88a:	68fb      	ldr	r3, [r7, #12]
 800e88c:	87da      	strh	r2, [r3, #62]	; 0x3e
 800e88e:	e0b2      	b.n	800e9f6 <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800e890:	68fb      	ldr	r3, [r7, #12]
 800e892:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e894:	68fb      	ldr	r3, [r7, #12]
 800e896:	681b      	ldr	r3, [r3, #0]
 800e898:	330c      	adds	r3, #12
 800e89a:	7812      	ldrb	r2, [r2, #0]
 800e89c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800e89e:	68fb      	ldr	r3, [r7, #12]
 800e8a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e8a2:	1c5a      	adds	r2, r3, #1
 800e8a4:	68fb      	ldr	r3, [r7, #12]
 800e8a6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800e8a8:	68fb      	ldr	r3, [r7, #12]
 800e8aa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800e8ac:	b29b      	uxth	r3, r3
 800e8ae:	3b01      	subs	r3, #1
 800e8b0:	b29a      	uxth	r2, r3
 800e8b2:	68fb      	ldr	r3, [r7, #12]
 800e8b4:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800e8b6:	e09e      	b.n	800e9f6 <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800e8b8:	68fb      	ldr	r3, [r7, #12]
 800e8ba:	681b      	ldr	r3, [r3, #0]
 800e8bc:	689b      	ldr	r3, [r3, #8]
 800e8be:	f003 0302 	and.w	r3, r3, #2
 800e8c2:	2b02      	cmp	r3, #2
 800e8c4:	d134      	bne.n	800e930 <HAL_SPI_TransmitReceive+0x30a>
 800e8c6:	68fb      	ldr	r3, [r7, #12]
 800e8c8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800e8ca:	b29b      	uxth	r3, r3
 800e8cc:	2b00      	cmp	r3, #0
 800e8ce:	d02f      	beq.n	800e930 <HAL_SPI_TransmitReceive+0x30a>
 800e8d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e8d2:	2b01      	cmp	r3, #1
 800e8d4:	d12c      	bne.n	800e930 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 800e8d6:	68fb      	ldr	r3, [r7, #12]
 800e8d8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800e8da:	b29b      	uxth	r3, r3
 800e8dc:	2b01      	cmp	r3, #1
 800e8de:	d912      	bls.n	800e906 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800e8e0:	68fb      	ldr	r3, [r7, #12]
 800e8e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e8e4:	881a      	ldrh	r2, [r3, #0]
 800e8e6:	68fb      	ldr	r3, [r7, #12]
 800e8e8:	681b      	ldr	r3, [r3, #0]
 800e8ea:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800e8ec:	68fb      	ldr	r3, [r7, #12]
 800e8ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e8f0:	1c9a      	adds	r2, r3, #2
 800e8f2:	68fb      	ldr	r3, [r7, #12]
 800e8f4:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800e8f6:	68fb      	ldr	r3, [r7, #12]
 800e8f8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800e8fa:	b29b      	uxth	r3, r3
 800e8fc:	3b02      	subs	r3, #2
 800e8fe:	b29a      	uxth	r2, r3
 800e900:	68fb      	ldr	r3, [r7, #12]
 800e902:	87da      	strh	r2, [r3, #62]	; 0x3e
 800e904:	e012      	b.n	800e92c <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800e906:	68fb      	ldr	r3, [r7, #12]
 800e908:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e90a:	68fb      	ldr	r3, [r7, #12]
 800e90c:	681b      	ldr	r3, [r3, #0]
 800e90e:	330c      	adds	r3, #12
 800e910:	7812      	ldrb	r2, [r2, #0]
 800e912:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800e914:	68fb      	ldr	r3, [r7, #12]
 800e916:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e918:	1c5a      	adds	r2, r3, #1
 800e91a:	68fb      	ldr	r3, [r7, #12]
 800e91c:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 800e91e:	68fb      	ldr	r3, [r7, #12]
 800e920:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800e922:	b29b      	uxth	r3, r3
 800e924:	3b01      	subs	r3, #1
 800e926:	b29a      	uxth	r2, r3
 800e928:	68fb      	ldr	r3, [r7, #12]
 800e92a:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800e92c:	2300      	movs	r3, #0
 800e92e:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800e930:	68fb      	ldr	r3, [r7, #12]
 800e932:	681b      	ldr	r3, [r3, #0]
 800e934:	689b      	ldr	r3, [r3, #8]
 800e936:	f003 0301 	and.w	r3, r3, #1
 800e93a:	2b01      	cmp	r3, #1
 800e93c:	d148      	bne.n	800e9d0 <HAL_SPI_TransmitReceive+0x3aa>
 800e93e:	68fb      	ldr	r3, [r7, #12]
 800e940:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800e944:	b29b      	uxth	r3, r3
 800e946:	2b00      	cmp	r3, #0
 800e948:	d042      	beq.n	800e9d0 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 800e94a:	68fb      	ldr	r3, [r7, #12]
 800e94c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800e950:	b29b      	uxth	r3, r3
 800e952:	2b01      	cmp	r3, #1
 800e954:	d923      	bls.n	800e99e <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800e956:	68fb      	ldr	r3, [r7, #12]
 800e958:	681b      	ldr	r3, [r3, #0]
 800e95a:	68da      	ldr	r2, [r3, #12]
 800e95c:	68fb      	ldr	r3, [r7, #12]
 800e95e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e960:	b292      	uxth	r2, r2
 800e962:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800e964:	68fb      	ldr	r3, [r7, #12]
 800e966:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e968:	1c9a      	adds	r2, r3, #2
 800e96a:	68fb      	ldr	r3, [r7, #12]
 800e96c:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 800e96e:	68fb      	ldr	r3, [r7, #12]
 800e970:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800e974:	b29b      	uxth	r3, r3
 800e976:	3b02      	subs	r3, #2
 800e978:	b29a      	uxth	r2, r3
 800e97a:	68fb      	ldr	r3, [r7, #12]
 800e97c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 800e980:	68fb      	ldr	r3, [r7, #12]
 800e982:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800e986:	b29b      	uxth	r3, r3
 800e988:	2b01      	cmp	r3, #1
 800e98a:	d81f      	bhi.n	800e9cc <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800e98c:	68fb      	ldr	r3, [r7, #12]
 800e98e:	681b      	ldr	r3, [r3, #0]
 800e990:	685a      	ldr	r2, [r3, #4]
 800e992:	68fb      	ldr	r3, [r7, #12]
 800e994:	681b      	ldr	r3, [r3, #0]
 800e996:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800e99a:	605a      	str	r2, [r3, #4]
 800e99c:	e016      	b.n	800e9cc <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800e99e:	68fb      	ldr	r3, [r7, #12]
 800e9a0:	681b      	ldr	r3, [r3, #0]
 800e9a2:	f103 020c 	add.w	r2, r3, #12
 800e9a6:	68fb      	ldr	r3, [r7, #12]
 800e9a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e9aa:	7812      	ldrb	r2, [r2, #0]
 800e9ac:	b2d2      	uxtb	r2, r2
 800e9ae:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 800e9b0:	68fb      	ldr	r3, [r7, #12]
 800e9b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e9b4:	1c5a      	adds	r2, r3, #1
 800e9b6:	68fb      	ldr	r3, [r7, #12]
 800e9b8:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 800e9ba:	68fb      	ldr	r3, [r7, #12]
 800e9bc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800e9c0:	b29b      	uxth	r3, r3
 800e9c2:	3b01      	subs	r3, #1
 800e9c4:	b29a      	uxth	r2, r3
 800e9c6:	68fb      	ldr	r3, [r7, #12]
 800e9c8:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800e9cc:	2301      	movs	r3, #1
 800e9ce:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800e9d0:	f7fb f912 	bl	8009bf8 <HAL_GetTick>
 800e9d4:	4602      	mov	r2, r0
 800e9d6:	69fb      	ldr	r3, [r7, #28]
 800e9d8:	1ad3      	subs	r3, r2, r3
 800e9da:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e9dc:	429a      	cmp	r2, r3
 800e9de:	d803      	bhi.n	800e9e8 <HAL_SPI_TransmitReceive+0x3c2>
 800e9e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e9e2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e9e6:	d102      	bne.n	800e9ee <HAL_SPI_TransmitReceive+0x3c8>
 800e9e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e9ea:	2b00      	cmp	r3, #0
 800e9ec:	d103      	bne.n	800e9f6 <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 800e9ee:	2303      	movs	r3, #3
 800e9f0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 800e9f4:	e01c      	b.n	800ea30 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800e9f6:	68fb      	ldr	r3, [r7, #12]
 800e9f8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800e9fa:	b29b      	uxth	r3, r3
 800e9fc:	2b00      	cmp	r3, #0
 800e9fe:	f47f af5b 	bne.w	800e8b8 <HAL_SPI_TransmitReceive+0x292>
 800ea02:	68fb      	ldr	r3, [r7, #12]
 800ea04:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800ea08:	b29b      	uxth	r3, r3
 800ea0a:	2b00      	cmp	r3, #0
 800ea0c:	f47f af54 	bne.w	800e8b8 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800ea10:	69fa      	ldr	r2, [r7, #28]
 800ea12:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800ea14:	68f8      	ldr	r0, [r7, #12]
 800ea16:	f000 f98f 	bl	800ed38 <SPI_EndRxTxTransaction>
 800ea1a:	4603      	mov	r3, r0
 800ea1c:	2b00      	cmp	r3, #0
 800ea1e:	d006      	beq.n	800ea2e <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 800ea20:	2301      	movs	r3, #1
 800ea22:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800ea26:	68fb      	ldr	r3, [r7, #12]
 800ea28:	2220      	movs	r2, #32
 800ea2a:	661a      	str	r2, [r3, #96]	; 0x60
 800ea2c:	e000      	b.n	800ea30 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 800ea2e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800ea30:	68fb      	ldr	r3, [r7, #12]
 800ea32:	2201      	movs	r2, #1
 800ea34:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 800ea38:	68fb      	ldr	r3, [r7, #12]
 800ea3a:	2200      	movs	r2, #0
 800ea3c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800ea40:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 800ea44:	4618      	mov	r0, r3
 800ea46:	3728      	adds	r7, #40	; 0x28
 800ea48:	46bd      	mov	sp, r7
 800ea4a:	bd80      	pop	{r7, pc}

0800ea4c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800ea4c:	b580      	push	{r7, lr}
 800ea4e:	b088      	sub	sp, #32
 800ea50:	af00      	add	r7, sp, #0
 800ea52:	60f8      	str	r0, [r7, #12]
 800ea54:	60b9      	str	r1, [r7, #8]
 800ea56:	603b      	str	r3, [r7, #0]
 800ea58:	4613      	mov	r3, r2
 800ea5a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800ea5c:	f7fb f8cc 	bl	8009bf8 <HAL_GetTick>
 800ea60:	4602      	mov	r2, r0
 800ea62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ea64:	1a9b      	subs	r3, r3, r2
 800ea66:	683a      	ldr	r2, [r7, #0]
 800ea68:	4413      	add	r3, r2
 800ea6a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800ea6c:	f7fb f8c4 	bl	8009bf8 <HAL_GetTick>
 800ea70:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800ea72:	4b39      	ldr	r3, [pc, #228]	; (800eb58 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800ea74:	681b      	ldr	r3, [r3, #0]
 800ea76:	015b      	lsls	r3, r3, #5
 800ea78:	0d1b      	lsrs	r3, r3, #20
 800ea7a:	69fa      	ldr	r2, [r7, #28]
 800ea7c:	fb02 f303 	mul.w	r3, r2, r3
 800ea80:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800ea82:	e054      	b.n	800eb2e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800ea84:	683b      	ldr	r3, [r7, #0]
 800ea86:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ea8a:	d050      	beq.n	800eb2e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800ea8c:	f7fb f8b4 	bl	8009bf8 <HAL_GetTick>
 800ea90:	4602      	mov	r2, r0
 800ea92:	69bb      	ldr	r3, [r7, #24]
 800ea94:	1ad3      	subs	r3, r2, r3
 800ea96:	69fa      	ldr	r2, [r7, #28]
 800ea98:	429a      	cmp	r2, r3
 800ea9a:	d902      	bls.n	800eaa2 <SPI_WaitFlagStateUntilTimeout+0x56>
 800ea9c:	69fb      	ldr	r3, [r7, #28]
 800ea9e:	2b00      	cmp	r3, #0
 800eaa0:	d13d      	bne.n	800eb1e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800eaa2:	68fb      	ldr	r3, [r7, #12]
 800eaa4:	681b      	ldr	r3, [r3, #0]
 800eaa6:	685a      	ldr	r2, [r3, #4]
 800eaa8:	68fb      	ldr	r3, [r7, #12]
 800eaaa:	681b      	ldr	r3, [r3, #0]
 800eaac:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800eab0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800eab2:	68fb      	ldr	r3, [r7, #12]
 800eab4:	685b      	ldr	r3, [r3, #4]
 800eab6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800eaba:	d111      	bne.n	800eae0 <SPI_WaitFlagStateUntilTimeout+0x94>
 800eabc:	68fb      	ldr	r3, [r7, #12]
 800eabe:	689b      	ldr	r3, [r3, #8]
 800eac0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800eac4:	d004      	beq.n	800ead0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800eac6:	68fb      	ldr	r3, [r7, #12]
 800eac8:	689b      	ldr	r3, [r3, #8]
 800eaca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800eace:	d107      	bne.n	800eae0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800ead0:	68fb      	ldr	r3, [r7, #12]
 800ead2:	681b      	ldr	r3, [r3, #0]
 800ead4:	681a      	ldr	r2, [r3, #0]
 800ead6:	68fb      	ldr	r3, [r7, #12]
 800ead8:	681b      	ldr	r3, [r3, #0]
 800eada:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800eade:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800eae0:	68fb      	ldr	r3, [r7, #12]
 800eae2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800eae4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800eae8:	d10f      	bne.n	800eb0a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800eaea:	68fb      	ldr	r3, [r7, #12]
 800eaec:	681b      	ldr	r3, [r3, #0]
 800eaee:	681a      	ldr	r2, [r3, #0]
 800eaf0:	68fb      	ldr	r3, [r7, #12]
 800eaf2:	681b      	ldr	r3, [r3, #0]
 800eaf4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800eaf8:	601a      	str	r2, [r3, #0]
 800eafa:	68fb      	ldr	r3, [r7, #12]
 800eafc:	681b      	ldr	r3, [r3, #0]
 800eafe:	681a      	ldr	r2, [r3, #0]
 800eb00:	68fb      	ldr	r3, [r7, #12]
 800eb02:	681b      	ldr	r3, [r3, #0]
 800eb04:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800eb08:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800eb0a:	68fb      	ldr	r3, [r7, #12]
 800eb0c:	2201      	movs	r2, #1
 800eb0e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800eb12:	68fb      	ldr	r3, [r7, #12]
 800eb14:	2200      	movs	r2, #0
 800eb16:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800eb1a:	2303      	movs	r3, #3
 800eb1c:	e017      	b.n	800eb4e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800eb1e:	697b      	ldr	r3, [r7, #20]
 800eb20:	2b00      	cmp	r3, #0
 800eb22:	d101      	bne.n	800eb28 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800eb24:	2300      	movs	r3, #0
 800eb26:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800eb28:	697b      	ldr	r3, [r7, #20]
 800eb2a:	3b01      	subs	r3, #1
 800eb2c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800eb2e:	68fb      	ldr	r3, [r7, #12]
 800eb30:	681b      	ldr	r3, [r3, #0]
 800eb32:	689a      	ldr	r2, [r3, #8]
 800eb34:	68bb      	ldr	r3, [r7, #8]
 800eb36:	4013      	ands	r3, r2
 800eb38:	68ba      	ldr	r2, [r7, #8]
 800eb3a:	429a      	cmp	r2, r3
 800eb3c:	bf0c      	ite	eq
 800eb3e:	2301      	moveq	r3, #1
 800eb40:	2300      	movne	r3, #0
 800eb42:	b2db      	uxtb	r3, r3
 800eb44:	461a      	mov	r2, r3
 800eb46:	79fb      	ldrb	r3, [r7, #7]
 800eb48:	429a      	cmp	r2, r3
 800eb4a:	d19b      	bne.n	800ea84 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800eb4c:	2300      	movs	r3, #0
}
 800eb4e:	4618      	mov	r0, r3
 800eb50:	3720      	adds	r7, #32
 800eb52:	46bd      	mov	sp, r7
 800eb54:	bd80      	pop	{r7, pc}
 800eb56:	bf00      	nop
 800eb58:	2000037c 	.word	0x2000037c

0800eb5c <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800eb5c:	b580      	push	{r7, lr}
 800eb5e:	b08a      	sub	sp, #40	; 0x28
 800eb60:	af00      	add	r7, sp, #0
 800eb62:	60f8      	str	r0, [r7, #12]
 800eb64:	60b9      	str	r1, [r7, #8]
 800eb66:	607a      	str	r2, [r7, #4]
 800eb68:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800eb6a:	2300      	movs	r3, #0
 800eb6c:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800eb6e:	f7fb f843 	bl	8009bf8 <HAL_GetTick>
 800eb72:	4602      	mov	r2, r0
 800eb74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eb76:	1a9b      	subs	r3, r3, r2
 800eb78:	683a      	ldr	r2, [r7, #0]
 800eb7a:	4413      	add	r3, r2
 800eb7c:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 800eb7e:	f7fb f83b 	bl	8009bf8 <HAL_GetTick>
 800eb82:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 800eb84:	68fb      	ldr	r3, [r7, #12]
 800eb86:	681b      	ldr	r3, [r3, #0]
 800eb88:	330c      	adds	r3, #12
 800eb8a:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800eb8c:	4b3d      	ldr	r3, [pc, #244]	; (800ec84 <SPI_WaitFifoStateUntilTimeout+0x128>)
 800eb8e:	681a      	ldr	r2, [r3, #0]
 800eb90:	4613      	mov	r3, r2
 800eb92:	009b      	lsls	r3, r3, #2
 800eb94:	4413      	add	r3, r2
 800eb96:	00da      	lsls	r2, r3, #3
 800eb98:	1ad3      	subs	r3, r2, r3
 800eb9a:	0d1b      	lsrs	r3, r3, #20
 800eb9c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800eb9e:	fb02 f303 	mul.w	r3, r2, r3
 800eba2:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 800eba4:	e060      	b.n	800ec68 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800eba6:	68bb      	ldr	r3, [r7, #8]
 800eba8:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800ebac:	d107      	bne.n	800ebbe <SPI_WaitFifoStateUntilTimeout+0x62>
 800ebae:	687b      	ldr	r3, [r7, #4]
 800ebb0:	2b00      	cmp	r3, #0
 800ebb2:	d104      	bne.n	800ebbe <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 800ebb4:	69fb      	ldr	r3, [r7, #28]
 800ebb6:	781b      	ldrb	r3, [r3, #0]
 800ebb8:	b2db      	uxtb	r3, r3
 800ebba:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 800ebbc:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800ebbe:	683b      	ldr	r3, [r7, #0]
 800ebc0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ebc4:	d050      	beq.n	800ec68 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800ebc6:	f7fb f817 	bl	8009bf8 <HAL_GetTick>
 800ebca:	4602      	mov	r2, r0
 800ebcc:	6a3b      	ldr	r3, [r7, #32]
 800ebce:	1ad3      	subs	r3, r2, r3
 800ebd0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ebd2:	429a      	cmp	r2, r3
 800ebd4:	d902      	bls.n	800ebdc <SPI_WaitFifoStateUntilTimeout+0x80>
 800ebd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ebd8:	2b00      	cmp	r3, #0
 800ebda:	d13d      	bne.n	800ec58 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800ebdc:	68fb      	ldr	r3, [r7, #12]
 800ebde:	681b      	ldr	r3, [r3, #0]
 800ebe0:	685a      	ldr	r2, [r3, #4]
 800ebe2:	68fb      	ldr	r3, [r7, #12]
 800ebe4:	681b      	ldr	r3, [r3, #0]
 800ebe6:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800ebea:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800ebec:	68fb      	ldr	r3, [r7, #12]
 800ebee:	685b      	ldr	r3, [r3, #4]
 800ebf0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800ebf4:	d111      	bne.n	800ec1a <SPI_WaitFifoStateUntilTimeout+0xbe>
 800ebf6:	68fb      	ldr	r3, [r7, #12]
 800ebf8:	689b      	ldr	r3, [r3, #8]
 800ebfa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ebfe:	d004      	beq.n	800ec0a <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800ec00:	68fb      	ldr	r3, [r7, #12]
 800ec02:	689b      	ldr	r3, [r3, #8]
 800ec04:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ec08:	d107      	bne.n	800ec1a <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800ec0a:	68fb      	ldr	r3, [r7, #12]
 800ec0c:	681b      	ldr	r3, [r3, #0]
 800ec0e:	681a      	ldr	r2, [r3, #0]
 800ec10:	68fb      	ldr	r3, [r7, #12]
 800ec12:	681b      	ldr	r3, [r3, #0]
 800ec14:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800ec18:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800ec1a:	68fb      	ldr	r3, [r7, #12]
 800ec1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ec1e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ec22:	d10f      	bne.n	800ec44 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 800ec24:	68fb      	ldr	r3, [r7, #12]
 800ec26:	681b      	ldr	r3, [r3, #0]
 800ec28:	681a      	ldr	r2, [r3, #0]
 800ec2a:	68fb      	ldr	r3, [r7, #12]
 800ec2c:	681b      	ldr	r3, [r3, #0]
 800ec2e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800ec32:	601a      	str	r2, [r3, #0]
 800ec34:	68fb      	ldr	r3, [r7, #12]
 800ec36:	681b      	ldr	r3, [r3, #0]
 800ec38:	681a      	ldr	r2, [r3, #0]
 800ec3a:	68fb      	ldr	r3, [r7, #12]
 800ec3c:	681b      	ldr	r3, [r3, #0]
 800ec3e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800ec42:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800ec44:	68fb      	ldr	r3, [r7, #12]
 800ec46:	2201      	movs	r2, #1
 800ec48:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800ec4c:	68fb      	ldr	r3, [r7, #12]
 800ec4e:	2200      	movs	r2, #0
 800ec50:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800ec54:	2303      	movs	r3, #3
 800ec56:	e010      	b.n	800ec7a <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800ec58:	69bb      	ldr	r3, [r7, #24]
 800ec5a:	2b00      	cmp	r3, #0
 800ec5c:	d101      	bne.n	800ec62 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 800ec5e:	2300      	movs	r3, #0
 800ec60:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 800ec62:	69bb      	ldr	r3, [r7, #24]
 800ec64:	3b01      	subs	r3, #1
 800ec66:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 800ec68:	68fb      	ldr	r3, [r7, #12]
 800ec6a:	681b      	ldr	r3, [r3, #0]
 800ec6c:	689a      	ldr	r2, [r3, #8]
 800ec6e:	68bb      	ldr	r3, [r7, #8]
 800ec70:	4013      	ands	r3, r2
 800ec72:	687a      	ldr	r2, [r7, #4]
 800ec74:	429a      	cmp	r2, r3
 800ec76:	d196      	bne.n	800eba6 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 800ec78:	2300      	movs	r3, #0
}
 800ec7a:	4618      	mov	r0, r3
 800ec7c:	3728      	adds	r7, #40	; 0x28
 800ec7e:	46bd      	mov	sp, r7
 800ec80:	bd80      	pop	{r7, pc}
 800ec82:	bf00      	nop
 800ec84:	2000037c 	.word	0x2000037c

0800ec88 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800ec88:	b580      	push	{r7, lr}
 800ec8a:	b086      	sub	sp, #24
 800ec8c:	af02      	add	r7, sp, #8
 800ec8e:	60f8      	str	r0, [r7, #12]
 800ec90:	60b9      	str	r1, [r7, #8]
 800ec92:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800ec94:	68fb      	ldr	r3, [r7, #12]
 800ec96:	685b      	ldr	r3, [r3, #4]
 800ec98:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800ec9c:	d111      	bne.n	800ecc2 <SPI_EndRxTransaction+0x3a>
 800ec9e:	68fb      	ldr	r3, [r7, #12]
 800eca0:	689b      	ldr	r3, [r3, #8]
 800eca2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800eca6:	d004      	beq.n	800ecb2 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800eca8:	68fb      	ldr	r3, [r7, #12]
 800ecaa:	689b      	ldr	r3, [r3, #8]
 800ecac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ecb0:	d107      	bne.n	800ecc2 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800ecb2:	68fb      	ldr	r3, [r7, #12]
 800ecb4:	681b      	ldr	r3, [r3, #0]
 800ecb6:	681a      	ldr	r2, [r3, #0]
 800ecb8:	68fb      	ldr	r3, [r7, #12]
 800ecba:	681b      	ldr	r3, [r3, #0]
 800ecbc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800ecc0:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800ecc2:	687b      	ldr	r3, [r7, #4]
 800ecc4:	9300      	str	r3, [sp, #0]
 800ecc6:	68bb      	ldr	r3, [r7, #8]
 800ecc8:	2200      	movs	r2, #0
 800ecca:	2180      	movs	r1, #128	; 0x80
 800eccc:	68f8      	ldr	r0, [r7, #12]
 800ecce:	f7ff febd 	bl	800ea4c <SPI_WaitFlagStateUntilTimeout>
 800ecd2:	4603      	mov	r3, r0
 800ecd4:	2b00      	cmp	r3, #0
 800ecd6:	d007      	beq.n	800ece8 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800ecd8:	68fb      	ldr	r3, [r7, #12]
 800ecda:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ecdc:	f043 0220 	orr.w	r2, r3, #32
 800ece0:	68fb      	ldr	r3, [r7, #12]
 800ece2:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800ece4:	2303      	movs	r3, #3
 800ece6:	e023      	b.n	800ed30 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800ece8:	68fb      	ldr	r3, [r7, #12]
 800ecea:	685b      	ldr	r3, [r3, #4]
 800ecec:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800ecf0:	d11d      	bne.n	800ed2e <SPI_EndRxTransaction+0xa6>
 800ecf2:	68fb      	ldr	r3, [r7, #12]
 800ecf4:	689b      	ldr	r3, [r3, #8]
 800ecf6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ecfa:	d004      	beq.n	800ed06 <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800ecfc:	68fb      	ldr	r3, [r7, #12]
 800ecfe:	689b      	ldr	r3, [r3, #8]
 800ed00:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ed04:	d113      	bne.n	800ed2e <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800ed06:	687b      	ldr	r3, [r7, #4]
 800ed08:	9300      	str	r3, [sp, #0]
 800ed0a:	68bb      	ldr	r3, [r7, #8]
 800ed0c:	2200      	movs	r2, #0
 800ed0e:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800ed12:	68f8      	ldr	r0, [r7, #12]
 800ed14:	f7ff ff22 	bl	800eb5c <SPI_WaitFifoStateUntilTimeout>
 800ed18:	4603      	mov	r3, r0
 800ed1a:	2b00      	cmp	r3, #0
 800ed1c:	d007      	beq.n	800ed2e <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800ed1e:	68fb      	ldr	r3, [r7, #12]
 800ed20:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ed22:	f043 0220 	orr.w	r2, r3, #32
 800ed26:	68fb      	ldr	r3, [r7, #12]
 800ed28:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 800ed2a:	2303      	movs	r3, #3
 800ed2c:	e000      	b.n	800ed30 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 800ed2e:	2300      	movs	r3, #0
}
 800ed30:	4618      	mov	r0, r3
 800ed32:	3710      	adds	r7, #16
 800ed34:	46bd      	mov	sp, r7
 800ed36:	bd80      	pop	{r7, pc}

0800ed38 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800ed38:	b580      	push	{r7, lr}
 800ed3a:	b086      	sub	sp, #24
 800ed3c:	af02      	add	r7, sp, #8
 800ed3e:	60f8      	str	r0, [r7, #12]
 800ed40:	60b9      	str	r1, [r7, #8]
 800ed42:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800ed44:	687b      	ldr	r3, [r7, #4]
 800ed46:	9300      	str	r3, [sp, #0]
 800ed48:	68bb      	ldr	r3, [r7, #8]
 800ed4a:	2200      	movs	r2, #0
 800ed4c:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 800ed50:	68f8      	ldr	r0, [r7, #12]
 800ed52:	f7ff ff03 	bl	800eb5c <SPI_WaitFifoStateUntilTimeout>
 800ed56:	4603      	mov	r3, r0
 800ed58:	2b00      	cmp	r3, #0
 800ed5a:	d007      	beq.n	800ed6c <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800ed5c:	68fb      	ldr	r3, [r7, #12]
 800ed5e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ed60:	f043 0220 	orr.w	r2, r3, #32
 800ed64:	68fb      	ldr	r3, [r7, #12]
 800ed66:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800ed68:	2303      	movs	r3, #3
 800ed6a:	e027      	b.n	800edbc <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800ed6c:	687b      	ldr	r3, [r7, #4]
 800ed6e:	9300      	str	r3, [sp, #0]
 800ed70:	68bb      	ldr	r3, [r7, #8]
 800ed72:	2200      	movs	r2, #0
 800ed74:	2180      	movs	r1, #128	; 0x80
 800ed76:	68f8      	ldr	r0, [r7, #12]
 800ed78:	f7ff fe68 	bl	800ea4c <SPI_WaitFlagStateUntilTimeout>
 800ed7c:	4603      	mov	r3, r0
 800ed7e:	2b00      	cmp	r3, #0
 800ed80:	d007      	beq.n	800ed92 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800ed82:	68fb      	ldr	r3, [r7, #12]
 800ed84:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ed86:	f043 0220 	orr.w	r2, r3, #32
 800ed8a:	68fb      	ldr	r3, [r7, #12]
 800ed8c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800ed8e:	2303      	movs	r3, #3
 800ed90:	e014      	b.n	800edbc <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800ed92:	687b      	ldr	r3, [r7, #4]
 800ed94:	9300      	str	r3, [sp, #0]
 800ed96:	68bb      	ldr	r3, [r7, #8]
 800ed98:	2200      	movs	r2, #0
 800ed9a:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800ed9e:	68f8      	ldr	r0, [r7, #12]
 800eda0:	f7ff fedc 	bl	800eb5c <SPI_WaitFifoStateUntilTimeout>
 800eda4:	4603      	mov	r3, r0
 800eda6:	2b00      	cmp	r3, #0
 800eda8:	d007      	beq.n	800edba <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800edaa:	68fb      	ldr	r3, [r7, #12]
 800edac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800edae:	f043 0220 	orr.w	r2, r3, #32
 800edb2:	68fb      	ldr	r3, [r7, #12]
 800edb4:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800edb6:	2303      	movs	r3, #3
 800edb8:	e000      	b.n	800edbc <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800edba:	2300      	movs	r3, #0
}
 800edbc:	4618      	mov	r0, r3
 800edbe:	3710      	adds	r7, #16
 800edc0:	46bd      	mov	sp, r7
 800edc2:	bd80      	pop	{r7, pc}

0800edc4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800edc4:	b580      	push	{r7, lr}
 800edc6:	b082      	sub	sp, #8
 800edc8:	af00      	add	r7, sp, #0
 800edca:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800edcc:	687b      	ldr	r3, [r7, #4]
 800edce:	2b00      	cmp	r3, #0
 800edd0:	d101      	bne.n	800edd6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800edd2:	2301      	movs	r3, #1
 800edd4:	e049      	b.n	800ee6a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800edd6:	687b      	ldr	r3, [r7, #4]
 800edd8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800eddc:	b2db      	uxtb	r3, r3
 800edde:	2b00      	cmp	r3, #0
 800ede0:	d106      	bne.n	800edf0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800ede2:	687b      	ldr	r3, [r7, #4]
 800ede4:	2200      	movs	r2, #0
 800ede6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800edea:	6878      	ldr	r0, [r7, #4]
 800edec:	f7f9 fdd2 	bl	8008994 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800edf0:	687b      	ldr	r3, [r7, #4]
 800edf2:	2202      	movs	r2, #2
 800edf4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800edf8:	687b      	ldr	r3, [r7, #4]
 800edfa:	681a      	ldr	r2, [r3, #0]
 800edfc:	687b      	ldr	r3, [r7, #4]
 800edfe:	3304      	adds	r3, #4
 800ee00:	4619      	mov	r1, r3
 800ee02:	4610      	mov	r0, r2
 800ee04:	f000 fec0 	bl	800fb88 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800ee08:	687b      	ldr	r3, [r7, #4]
 800ee0a:	2201      	movs	r2, #1
 800ee0c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ee10:	687b      	ldr	r3, [r7, #4]
 800ee12:	2201      	movs	r2, #1
 800ee14:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800ee18:	687b      	ldr	r3, [r7, #4]
 800ee1a:	2201      	movs	r2, #1
 800ee1c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800ee20:	687b      	ldr	r3, [r7, #4]
 800ee22:	2201      	movs	r2, #1
 800ee24:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800ee28:	687b      	ldr	r3, [r7, #4]
 800ee2a:	2201      	movs	r2, #1
 800ee2c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800ee30:	687b      	ldr	r3, [r7, #4]
 800ee32:	2201      	movs	r2, #1
 800ee34:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800ee38:	687b      	ldr	r3, [r7, #4]
 800ee3a:	2201      	movs	r2, #1
 800ee3c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ee40:	687b      	ldr	r3, [r7, #4]
 800ee42:	2201      	movs	r2, #1
 800ee44:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ee48:	687b      	ldr	r3, [r7, #4]
 800ee4a:	2201      	movs	r2, #1
 800ee4c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800ee50:	687b      	ldr	r3, [r7, #4]
 800ee52:	2201      	movs	r2, #1
 800ee54:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800ee58:	687b      	ldr	r3, [r7, #4]
 800ee5a:	2201      	movs	r2, #1
 800ee5c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800ee60:	687b      	ldr	r3, [r7, #4]
 800ee62:	2201      	movs	r2, #1
 800ee64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800ee68:	2300      	movs	r3, #0
}
 800ee6a:	4618      	mov	r0, r3
 800ee6c:	3708      	adds	r7, #8
 800ee6e:	46bd      	mov	sp, r7
 800ee70:	bd80      	pop	{r7, pc}
	...

0800ee74 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800ee74:	b480      	push	{r7}
 800ee76:	b085      	sub	sp, #20
 800ee78:	af00      	add	r7, sp, #0
 800ee7a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800ee7c:	687b      	ldr	r3, [r7, #4]
 800ee7e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ee82:	b2db      	uxtb	r3, r3
 800ee84:	2b01      	cmp	r3, #1
 800ee86:	d001      	beq.n	800ee8c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800ee88:	2301      	movs	r3, #1
 800ee8a:	e054      	b.n	800ef36 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ee8c:	687b      	ldr	r3, [r7, #4]
 800ee8e:	2202      	movs	r2, #2
 800ee90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800ee94:	687b      	ldr	r3, [r7, #4]
 800ee96:	681b      	ldr	r3, [r3, #0]
 800ee98:	68da      	ldr	r2, [r3, #12]
 800ee9a:	687b      	ldr	r3, [r7, #4]
 800ee9c:	681b      	ldr	r3, [r3, #0]
 800ee9e:	f042 0201 	orr.w	r2, r2, #1
 800eea2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800eea4:	687b      	ldr	r3, [r7, #4]
 800eea6:	681b      	ldr	r3, [r3, #0]
 800eea8:	4a26      	ldr	r2, [pc, #152]	; (800ef44 <HAL_TIM_Base_Start_IT+0xd0>)
 800eeaa:	4293      	cmp	r3, r2
 800eeac:	d022      	beq.n	800eef4 <HAL_TIM_Base_Start_IT+0x80>
 800eeae:	687b      	ldr	r3, [r7, #4]
 800eeb0:	681b      	ldr	r3, [r3, #0]
 800eeb2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800eeb6:	d01d      	beq.n	800eef4 <HAL_TIM_Base_Start_IT+0x80>
 800eeb8:	687b      	ldr	r3, [r7, #4]
 800eeba:	681b      	ldr	r3, [r3, #0]
 800eebc:	4a22      	ldr	r2, [pc, #136]	; (800ef48 <HAL_TIM_Base_Start_IT+0xd4>)
 800eebe:	4293      	cmp	r3, r2
 800eec0:	d018      	beq.n	800eef4 <HAL_TIM_Base_Start_IT+0x80>
 800eec2:	687b      	ldr	r3, [r7, #4]
 800eec4:	681b      	ldr	r3, [r3, #0]
 800eec6:	4a21      	ldr	r2, [pc, #132]	; (800ef4c <HAL_TIM_Base_Start_IT+0xd8>)
 800eec8:	4293      	cmp	r3, r2
 800eeca:	d013      	beq.n	800eef4 <HAL_TIM_Base_Start_IT+0x80>
 800eecc:	687b      	ldr	r3, [r7, #4]
 800eece:	681b      	ldr	r3, [r3, #0]
 800eed0:	4a1f      	ldr	r2, [pc, #124]	; (800ef50 <HAL_TIM_Base_Start_IT+0xdc>)
 800eed2:	4293      	cmp	r3, r2
 800eed4:	d00e      	beq.n	800eef4 <HAL_TIM_Base_Start_IT+0x80>
 800eed6:	687b      	ldr	r3, [r7, #4]
 800eed8:	681b      	ldr	r3, [r3, #0]
 800eeda:	4a1e      	ldr	r2, [pc, #120]	; (800ef54 <HAL_TIM_Base_Start_IT+0xe0>)
 800eedc:	4293      	cmp	r3, r2
 800eede:	d009      	beq.n	800eef4 <HAL_TIM_Base_Start_IT+0x80>
 800eee0:	687b      	ldr	r3, [r7, #4]
 800eee2:	681b      	ldr	r3, [r3, #0]
 800eee4:	4a1c      	ldr	r2, [pc, #112]	; (800ef58 <HAL_TIM_Base_Start_IT+0xe4>)
 800eee6:	4293      	cmp	r3, r2
 800eee8:	d004      	beq.n	800eef4 <HAL_TIM_Base_Start_IT+0x80>
 800eeea:	687b      	ldr	r3, [r7, #4]
 800eeec:	681b      	ldr	r3, [r3, #0]
 800eeee:	4a1b      	ldr	r2, [pc, #108]	; (800ef5c <HAL_TIM_Base_Start_IT+0xe8>)
 800eef0:	4293      	cmp	r3, r2
 800eef2:	d115      	bne.n	800ef20 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800eef4:	687b      	ldr	r3, [r7, #4]
 800eef6:	681b      	ldr	r3, [r3, #0]
 800eef8:	689a      	ldr	r2, [r3, #8]
 800eefa:	4b19      	ldr	r3, [pc, #100]	; (800ef60 <HAL_TIM_Base_Start_IT+0xec>)
 800eefc:	4013      	ands	r3, r2
 800eefe:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ef00:	68fb      	ldr	r3, [r7, #12]
 800ef02:	2b06      	cmp	r3, #6
 800ef04:	d015      	beq.n	800ef32 <HAL_TIM_Base_Start_IT+0xbe>
 800ef06:	68fb      	ldr	r3, [r7, #12]
 800ef08:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ef0c:	d011      	beq.n	800ef32 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800ef0e:	687b      	ldr	r3, [r7, #4]
 800ef10:	681b      	ldr	r3, [r3, #0]
 800ef12:	681a      	ldr	r2, [r3, #0]
 800ef14:	687b      	ldr	r3, [r7, #4]
 800ef16:	681b      	ldr	r3, [r3, #0]
 800ef18:	f042 0201 	orr.w	r2, r2, #1
 800ef1c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ef1e:	e008      	b.n	800ef32 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800ef20:	687b      	ldr	r3, [r7, #4]
 800ef22:	681b      	ldr	r3, [r3, #0]
 800ef24:	681a      	ldr	r2, [r3, #0]
 800ef26:	687b      	ldr	r3, [r7, #4]
 800ef28:	681b      	ldr	r3, [r3, #0]
 800ef2a:	f042 0201 	orr.w	r2, r2, #1
 800ef2e:	601a      	str	r2, [r3, #0]
 800ef30:	e000      	b.n	800ef34 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ef32:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800ef34:	2300      	movs	r3, #0
}
 800ef36:	4618      	mov	r0, r3
 800ef38:	3714      	adds	r7, #20
 800ef3a:	46bd      	mov	sp, r7
 800ef3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef40:	4770      	bx	lr
 800ef42:	bf00      	nop
 800ef44:	40012c00 	.word	0x40012c00
 800ef48:	40000400 	.word	0x40000400
 800ef4c:	40000800 	.word	0x40000800
 800ef50:	40000c00 	.word	0x40000c00
 800ef54:	40013400 	.word	0x40013400
 800ef58:	40014000 	.word	0x40014000
 800ef5c:	40015000 	.word	0x40015000
 800ef60:	00010007 	.word	0x00010007

0800ef64 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 800ef64:	b480      	push	{r7}
 800ef66:	b083      	sub	sp, #12
 800ef68:	af00      	add	r7, sp, #0
 800ef6a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 800ef6c:	687b      	ldr	r3, [r7, #4]
 800ef6e:	681b      	ldr	r3, [r3, #0]
 800ef70:	68da      	ldr	r2, [r3, #12]
 800ef72:	687b      	ldr	r3, [r7, #4]
 800ef74:	681b      	ldr	r3, [r3, #0]
 800ef76:	f022 0201 	bic.w	r2, r2, #1
 800ef7a:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800ef7c:	687b      	ldr	r3, [r7, #4]
 800ef7e:	681b      	ldr	r3, [r3, #0]
 800ef80:	6a1a      	ldr	r2, [r3, #32]
 800ef82:	f241 1311 	movw	r3, #4369	; 0x1111
 800ef86:	4013      	ands	r3, r2
 800ef88:	2b00      	cmp	r3, #0
 800ef8a:	d10f      	bne.n	800efac <HAL_TIM_Base_Stop_IT+0x48>
 800ef8c:	687b      	ldr	r3, [r7, #4]
 800ef8e:	681b      	ldr	r3, [r3, #0]
 800ef90:	6a1a      	ldr	r2, [r3, #32]
 800ef92:	f244 4344 	movw	r3, #17476	; 0x4444
 800ef96:	4013      	ands	r3, r2
 800ef98:	2b00      	cmp	r3, #0
 800ef9a:	d107      	bne.n	800efac <HAL_TIM_Base_Stop_IT+0x48>
 800ef9c:	687b      	ldr	r3, [r7, #4]
 800ef9e:	681b      	ldr	r3, [r3, #0]
 800efa0:	681a      	ldr	r2, [r3, #0]
 800efa2:	687b      	ldr	r3, [r7, #4]
 800efa4:	681b      	ldr	r3, [r3, #0]
 800efa6:	f022 0201 	bic.w	r2, r2, #1
 800efaa:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800efac:	687b      	ldr	r3, [r7, #4]
 800efae:	2201      	movs	r2, #1
 800efb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800efb4:	2300      	movs	r3, #0
}
 800efb6:	4618      	mov	r0, r3
 800efb8:	370c      	adds	r7, #12
 800efba:	46bd      	mov	sp, r7
 800efbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800efc0:	4770      	bx	lr

0800efc2 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 800efc2:	b580      	push	{r7, lr}
 800efc4:	b082      	sub	sp, #8
 800efc6:	af00      	add	r7, sp, #0
 800efc8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800efca:	687b      	ldr	r3, [r7, #4]
 800efcc:	2b00      	cmp	r3, #0
 800efce:	d101      	bne.n	800efd4 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 800efd0:	2301      	movs	r3, #1
 800efd2:	e049      	b.n	800f068 <HAL_TIM_OC_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800efd4:	687b      	ldr	r3, [r7, #4]
 800efd6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800efda:	b2db      	uxtb	r3, r3
 800efdc:	2b00      	cmp	r3, #0
 800efde:	d106      	bne.n	800efee <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800efe0:	687b      	ldr	r3, [r7, #4]
 800efe2:	2200      	movs	r2, #0
 800efe4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 800efe8:	6878      	ldr	r0, [r7, #4]
 800efea:	f000 f841 	bl	800f070 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800efee:	687b      	ldr	r3, [r7, #4]
 800eff0:	2202      	movs	r2, #2
 800eff2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 800eff6:	687b      	ldr	r3, [r7, #4]
 800eff8:	681a      	ldr	r2, [r3, #0]
 800effa:	687b      	ldr	r3, [r7, #4]
 800effc:	3304      	adds	r3, #4
 800effe:	4619      	mov	r1, r3
 800f000:	4610      	mov	r0, r2
 800f002:	f000 fdc1 	bl	800fb88 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800f006:	687b      	ldr	r3, [r7, #4]
 800f008:	2201      	movs	r2, #1
 800f00a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800f00e:	687b      	ldr	r3, [r7, #4]
 800f010:	2201      	movs	r2, #1
 800f012:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800f016:	687b      	ldr	r3, [r7, #4]
 800f018:	2201      	movs	r2, #1
 800f01a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800f01e:	687b      	ldr	r3, [r7, #4]
 800f020:	2201      	movs	r2, #1
 800f022:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800f026:	687b      	ldr	r3, [r7, #4]
 800f028:	2201      	movs	r2, #1
 800f02a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800f02e:	687b      	ldr	r3, [r7, #4]
 800f030:	2201      	movs	r2, #1
 800f032:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800f036:	687b      	ldr	r3, [r7, #4]
 800f038:	2201      	movs	r2, #1
 800f03a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800f03e:	687b      	ldr	r3, [r7, #4]
 800f040:	2201      	movs	r2, #1
 800f042:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800f046:	687b      	ldr	r3, [r7, #4]
 800f048:	2201      	movs	r2, #1
 800f04a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800f04e:	687b      	ldr	r3, [r7, #4]
 800f050:	2201      	movs	r2, #1
 800f052:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800f056:	687b      	ldr	r3, [r7, #4]
 800f058:	2201      	movs	r2, #1
 800f05a:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800f05e:	687b      	ldr	r3, [r7, #4]
 800f060:	2201      	movs	r2, #1
 800f062:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800f066:	2300      	movs	r3, #0
}
 800f068:	4618      	mov	r0, r3
 800f06a:	3708      	adds	r7, #8
 800f06c:	46bd      	mov	sp, r7
 800f06e:	bd80      	pop	{r7, pc}

0800f070 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 800f070:	b480      	push	{r7}
 800f072:	b083      	sub	sp, #12
 800f074:	af00      	add	r7, sp, #0
 800f076:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 800f078:	bf00      	nop
 800f07a:	370c      	adds	r7, #12
 800f07c:	46bd      	mov	sp, r7
 800f07e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f082:	4770      	bx	lr

0800f084 <HAL_TIM_OC_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800f084:	b580      	push	{r7, lr}
 800f086:	b084      	sub	sp, #16
 800f088:	af00      	add	r7, sp, #0
 800f08a:	6078      	str	r0, [r7, #4]
 800f08c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800f08e:	683b      	ldr	r3, [r7, #0]
 800f090:	2b00      	cmp	r3, #0
 800f092:	d109      	bne.n	800f0a8 <HAL_TIM_OC_Start+0x24>
 800f094:	687b      	ldr	r3, [r7, #4]
 800f096:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800f09a:	b2db      	uxtb	r3, r3
 800f09c:	2b01      	cmp	r3, #1
 800f09e:	bf14      	ite	ne
 800f0a0:	2301      	movne	r3, #1
 800f0a2:	2300      	moveq	r3, #0
 800f0a4:	b2db      	uxtb	r3, r3
 800f0a6:	e03c      	b.n	800f122 <HAL_TIM_OC_Start+0x9e>
 800f0a8:	683b      	ldr	r3, [r7, #0]
 800f0aa:	2b04      	cmp	r3, #4
 800f0ac:	d109      	bne.n	800f0c2 <HAL_TIM_OC_Start+0x3e>
 800f0ae:	687b      	ldr	r3, [r7, #4]
 800f0b0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800f0b4:	b2db      	uxtb	r3, r3
 800f0b6:	2b01      	cmp	r3, #1
 800f0b8:	bf14      	ite	ne
 800f0ba:	2301      	movne	r3, #1
 800f0bc:	2300      	moveq	r3, #0
 800f0be:	b2db      	uxtb	r3, r3
 800f0c0:	e02f      	b.n	800f122 <HAL_TIM_OC_Start+0x9e>
 800f0c2:	683b      	ldr	r3, [r7, #0]
 800f0c4:	2b08      	cmp	r3, #8
 800f0c6:	d109      	bne.n	800f0dc <HAL_TIM_OC_Start+0x58>
 800f0c8:	687b      	ldr	r3, [r7, #4]
 800f0ca:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800f0ce:	b2db      	uxtb	r3, r3
 800f0d0:	2b01      	cmp	r3, #1
 800f0d2:	bf14      	ite	ne
 800f0d4:	2301      	movne	r3, #1
 800f0d6:	2300      	moveq	r3, #0
 800f0d8:	b2db      	uxtb	r3, r3
 800f0da:	e022      	b.n	800f122 <HAL_TIM_OC_Start+0x9e>
 800f0dc:	683b      	ldr	r3, [r7, #0]
 800f0de:	2b0c      	cmp	r3, #12
 800f0e0:	d109      	bne.n	800f0f6 <HAL_TIM_OC_Start+0x72>
 800f0e2:	687b      	ldr	r3, [r7, #4]
 800f0e4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800f0e8:	b2db      	uxtb	r3, r3
 800f0ea:	2b01      	cmp	r3, #1
 800f0ec:	bf14      	ite	ne
 800f0ee:	2301      	movne	r3, #1
 800f0f0:	2300      	moveq	r3, #0
 800f0f2:	b2db      	uxtb	r3, r3
 800f0f4:	e015      	b.n	800f122 <HAL_TIM_OC_Start+0x9e>
 800f0f6:	683b      	ldr	r3, [r7, #0]
 800f0f8:	2b10      	cmp	r3, #16
 800f0fa:	d109      	bne.n	800f110 <HAL_TIM_OC_Start+0x8c>
 800f0fc:	687b      	ldr	r3, [r7, #4]
 800f0fe:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800f102:	b2db      	uxtb	r3, r3
 800f104:	2b01      	cmp	r3, #1
 800f106:	bf14      	ite	ne
 800f108:	2301      	movne	r3, #1
 800f10a:	2300      	moveq	r3, #0
 800f10c:	b2db      	uxtb	r3, r3
 800f10e:	e008      	b.n	800f122 <HAL_TIM_OC_Start+0x9e>
 800f110:	687b      	ldr	r3, [r7, #4]
 800f112:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800f116:	b2db      	uxtb	r3, r3
 800f118:	2b01      	cmp	r3, #1
 800f11a:	bf14      	ite	ne
 800f11c:	2301      	movne	r3, #1
 800f11e:	2300      	moveq	r3, #0
 800f120:	b2db      	uxtb	r3, r3
 800f122:	2b00      	cmp	r3, #0
 800f124:	d001      	beq.n	800f12a <HAL_TIM_OC_Start+0xa6>
  {
    return HAL_ERROR;
 800f126:	2301      	movs	r3, #1
 800f128:	e0a6      	b.n	800f278 <HAL_TIM_OC_Start+0x1f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800f12a:	683b      	ldr	r3, [r7, #0]
 800f12c:	2b00      	cmp	r3, #0
 800f12e:	d104      	bne.n	800f13a <HAL_TIM_OC_Start+0xb6>
 800f130:	687b      	ldr	r3, [r7, #4]
 800f132:	2202      	movs	r2, #2
 800f134:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800f138:	e023      	b.n	800f182 <HAL_TIM_OC_Start+0xfe>
 800f13a:	683b      	ldr	r3, [r7, #0]
 800f13c:	2b04      	cmp	r3, #4
 800f13e:	d104      	bne.n	800f14a <HAL_TIM_OC_Start+0xc6>
 800f140:	687b      	ldr	r3, [r7, #4]
 800f142:	2202      	movs	r2, #2
 800f144:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800f148:	e01b      	b.n	800f182 <HAL_TIM_OC_Start+0xfe>
 800f14a:	683b      	ldr	r3, [r7, #0]
 800f14c:	2b08      	cmp	r3, #8
 800f14e:	d104      	bne.n	800f15a <HAL_TIM_OC_Start+0xd6>
 800f150:	687b      	ldr	r3, [r7, #4]
 800f152:	2202      	movs	r2, #2
 800f154:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800f158:	e013      	b.n	800f182 <HAL_TIM_OC_Start+0xfe>
 800f15a:	683b      	ldr	r3, [r7, #0]
 800f15c:	2b0c      	cmp	r3, #12
 800f15e:	d104      	bne.n	800f16a <HAL_TIM_OC_Start+0xe6>
 800f160:	687b      	ldr	r3, [r7, #4]
 800f162:	2202      	movs	r2, #2
 800f164:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800f168:	e00b      	b.n	800f182 <HAL_TIM_OC_Start+0xfe>
 800f16a:	683b      	ldr	r3, [r7, #0]
 800f16c:	2b10      	cmp	r3, #16
 800f16e:	d104      	bne.n	800f17a <HAL_TIM_OC_Start+0xf6>
 800f170:	687b      	ldr	r3, [r7, #4]
 800f172:	2202      	movs	r2, #2
 800f174:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800f178:	e003      	b.n	800f182 <HAL_TIM_OC_Start+0xfe>
 800f17a:	687b      	ldr	r3, [r7, #4]
 800f17c:	2202      	movs	r2, #2
 800f17e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Output compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800f182:	687b      	ldr	r3, [r7, #4]
 800f184:	681b      	ldr	r3, [r3, #0]
 800f186:	2201      	movs	r2, #1
 800f188:	6839      	ldr	r1, [r7, #0]
 800f18a:	4618      	mov	r0, r3
 800f18c:	f001 fa40 	bl	8010610 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800f190:	687b      	ldr	r3, [r7, #4]
 800f192:	681b      	ldr	r3, [r3, #0]
 800f194:	4a3a      	ldr	r2, [pc, #232]	; (800f280 <HAL_TIM_OC_Start+0x1fc>)
 800f196:	4293      	cmp	r3, r2
 800f198:	d018      	beq.n	800f1cc <HAL_TIM_OC_Start+0x148>
 800f19a:	687b      	ldr	r3, [r7, #4]
 800f19c:	681b      	ldr	r3, [r3, #0]
 800f19e:	4a39      	ldr	r2, [pc, #228]	; (800f284 <HAL_TIM_OC_Start+0x200>)
 800f1a0:	4293      	cmp	r3, r2
 800f1a2:	d013      	beq.n	800f1cc <HAL_TIM_OC_Start+0x148>
 800f1a4:	687b      	ldr	r3, [r7, #4]
 800f1a6:	681b      	ldr	r3, [r3, #0]
 800f1a8:	4a37      	ldr	r2, [pc, #220]	; (800f288 <HAL_TIM_OC_Start+0x204>)
 800f1aa:	4293      	cmp	r3, r2
 800f1ac:	d00e      	beq.n	800f1cc <HAL_TIM_OC_Start+0x148>
 800f1ae:	687b      	ldr	r3, [r7, #4]
 800f1b0:	681b      	ldr	r3, [r3, #0]
 800f1b2:	4a36      	ldr	r2, [pc, #216]	; (800f28c <HAL_TIM_OC_Start+0x208>)
 800f1b4:	4293      	cmp	r3, r2
 800f1b6:	d009      	beq.n	800f1cc <HAL_TIM_OC_Start+0x148>
 800f1b8:	687b      	ldr	r3, [r7, #4]
 800f1ba:	681b      	ldr	r3, [r3, #0]
 800f1bc:	4a34      	ldr	r2, [pc, #208]	; (800f290 <HAL_TIM_OC_Start+0x20c>)
 800f1be:	4293      	cmp	r3, r2
 800f1c0:	d004      	beq.n	800f1cc <HAL_TIM_OC_Start+0x148>
 800f1c2:	687b      	ldr	r3, [r7, #4]
 800f1c4:	681b      	ldr	r3, [r3, #0]
 800f1c6:	4a33      	ldr	r2, [pc, #204]	; (800f294 <HAL_TIM_OC_Start+0x210>)
 800f1c8:	4293      	cmp	r3, r2
 800f1ca:	d101      	bne.n	800f1d0 <HAL_TIM_OC_Start+0x14c>
 800f1cc:	2301      	movs	r3, #1
 800f1ce:	e000      	b.n	800f1d2 <HAL_TIM_OC_Start+0x14e>
 800f1d0:	2300      	movs	r3, #0
 800f1d2:	2b00      	cmp	r3, #0
 800f1d4:	d007      	beq.n	800f1e6 <HAL_TIM_OC_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800f1d6:	687b      	ldr	r3, [r7, #4]
 800f1d8:	681b      	ldr	r3, [r3, #0]
 800f1da:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800f1dc:	687b      	ldr	r3, [r7, #4]
 800f1de:	681b      	ldr	r3, [r3, #0]
 800f1e0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800f1e4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800f1e6:	687b      	ldr	r3, [r7, #4]
 800f1e8:	681b      	ldr	r3, [r3, #0]
 800f1ea:	4a25      	ldr	r2, [pc, #148]	; (800f280 <HAL_TIM_OC_Start+0x1fc>)
 800f1ec:	4293      	cmp	r3, r2
 800f1ee:	d022      	beq.n	800f236 <HAL_TIM_OC_Start+0x1b2>
 800f1f0:	687b      	ldr	r3, [r7, #4]
 800f1f2:	681b      	ldr	r3, [r3, #0]
 800f1f4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f1f8:	d01d      	beq.n	800f236 <HAL_TIM_OC_Start+0x1b2>
 800f1fa:	687b      	ldr	r3, [r7, #4]
 800f1fc:	681b      	ldr	r3, [r3, #0]
 800f1fe:	4a26      	ldr	r2, [pc, #152]	; (800f298 <HAL_TIM_OC_Start+0x214>)
 800f200:	4293      	cmp	r3, r2
 800f202:	d018      	beq.n	800f236 <HAL_TIM_OC_Start+0x1b2>
 800f204:	687b      	ldr	r3, [r7, #4]
 800f206:	681b      	ldr	r3, [r3, #0]
 800f208:	4a24      	ldr	r2, [pc, #144]	; (800f29c <HAL_TIM_OC_Start+0x218>)
 800f20a:	4293      	cmp	r3, r2
 800f20c:	d013      	beq.n	800f236 <HAL_TIM_OC_Start+0x1b2>
 800f20e:	687b      	ldr	r3, [r7, #4]
 800f210:	681b      	ldr	r3, [r3, #0]
 800f212:	4a23      	ldr	r2, [pc, #140]	; (800f2a0 <HAL_TIM_OC_Start+0x21c>)
 800f214:	4293      	cmp	r3, r2
 800f216:	d00e      	beq.n	800f236 <HAL_TIM_OC_Start+0x1b2>
 800f218:	687b      	ldr	r3, [r7, #4]
 800f21a:	681b      	ldr	r3, [r3, #0]
 800f21c:	4a19      	ldr	r2, [pc, #100]	; (800f284 <HAL_TIM_OC_Start+0x200>)
 800f21e:	4293      	cmp	r3, r2
 800f220:	d009      	beq.n	800f236 <HAL_TIM_OC_Start+0x1b2>
 800f222:	687b      	ldr	r3, [r7, #4]
 800f224:	681b      	ldr	r3, [r3, #0]
 800f226:	4a18      	ldr	r2, [pc, #96]	; (800f288 <HAL_TIM_OC_Start+0x204>)
 800f228:	4293      	cmp	r3, r2
 800f22a:	d004      	beq.n	800f236 <HAL_TIM_OC_Start+0x1b2>
 800f22c:	687b      	ldr	r3, [r7, #4]
 800f22e:	681b      	ldr	r3, [r3, #0]
 800f230:	4a18      	ldr	r2, [pc, #96]	; (800f294 <HAL_TIM_OC_Start+0x210>)
 800f232:	4293      	cmp	r3, r2
 800f234:	d115      	bne.n	800f262 <HAL_TIM_OC_Start+0x1de>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800f236:	687b      	ldr	r3, [r7, #4]
 800f238:	681b      	ldr	r3, [r3, #0]
 800f23a:	689a      	ldr	r2, [r3, #8]
 800f23c:	4b19      	ldr	r3, [pc, #100]	; (800f2a4 <HAL_TIM_OC_Start+0x220>)
 800f23e:	4013      	ands	r3, r2
 800f240:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800f242:	68fb      	ldr	r3, [r7, #12]
 800f244:	2b06      	cmp	r3, #6
 800f246:	d015      	beq.n	800f274 <HAL_TIM_OC_Start+0x1f0>
 800f248:	68fb      	ldr	r3, [r7, #12]
 800f24a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800f24e:	d011      	beq.n	800f274 <HAL_TIM_OC_Start+0x1f0>
    {
      __HAL_TIM_ENABLE(htim);
 800f250:	687b      	ldr	r3, [r7, #4]
 800f252:	681b      	ldr	r3, [r3, #0]
 800f254:	681a      	ldr	r2, [r3, #0]
 800f256:	687b      	ldr	r3, [r7, #4]
 800f258:	681b      	ldr	r3, [r3, #0]
 800f25a:	f042 0201 	orr.w	r2, r2, #1
 800f25e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800f260:	e008      	b.n	800f274 <HAL_TIM_OC_Start+0x1f0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800f262:	687b      	ldr	r3, [r7, #4]
 800f264:	681b      	ldr	r3, [r3, #0]
 800f266:	681a      	ldr	r2, [r3, #0]
 800f268:	687b      	ldr	r3, [r7, #4]
 800f26a:	681b      	ldr	r3, [r3, #0]
 800f26c:	f042 0201 	orr.w	r2, r2, #1
 800f270:	601a      	str	r2, [r3, #0]
 800f272:	e000      	b.n	800f276 <HAL_TIM_OC_Start+0x1f2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800f274:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800f276:	2300      	movs	r3, #0
}
 800f278:	4618      	mov	r0, r3
 800f27a:	3710      	adds	r7, #16
 800f27c:	46bd      	mov	sp, r7
 800f27e:	bd80      	pop	{r7, pc}
 800f280:	40012c00 	.word	0x40012c00
 800f284:	40013400 	.word	0x40013400
 800f288:	40014000 	.word	0x40014000
 800f28c:	40014400 	.word	0x40014400
 800f290:	40014800 	.word	0x40014800
 800f294:	40015000 	.word	0x40015000
 800f298:	40000400 	.word	0x40000400
 800f29c:	40000800 	.word	0x40000800
 800f2a0:	40000c00 	.word	0x40000c00
 800f2a4:	00010007 	.word	0x00010007

0800f2a8 <HAL_TIM_OC_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800f2a8:	b580      	push	{r7, lr}
 800f2aa:	b082      	sub	sp, #8
 800f2ac:	af00      	add	r7, sp, #0
 800f2ae:	6078      	str	r0, [r7, #4]
 800f2b0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Output compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800f2b2:	687b      	ldr	r3, [r7, #4]
 800f2b4:	681b      	ldr	r3, [r3, #0]
 800f2b6:	2200      	movs	r2, #0
 800f2b8:	6839      	ldr	r1, [r7, #0]
 800f2ba:	4618      	mov	r0, r3
 800f2bc:	f001 f9a8 	bl	8010610 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800f2c0:	687b      	ldr	r3, [r7, #4]
 800f2c2:	681b      	ldr	r3, [r3, #0]
 800f2c4:	4a40      	ldr	r2, [pc, #256]	; (800f3c8 <HAL_TIM_OC_Stop+0x120>)
 800f2c6:	4293      	cmp	r3, r2
 800f2c8:	d018      	beq.n	800f2fc <HAL_TIM_OC_Stop+0x54>
 800f2ca:	687b      	ldr	r3, [r7, #4]
 800f2cc:	681b      	ldr	r3, [r3, #0]
 800f2ce:	4a3f      	ldr	r2, [pc, #252]	; (800f3cc <HAL_TIM_OC_Stop+0x124>)
 800f2d0:	4293      	cmp	r3, r2
 800f2d2:	d013      	beq.n	800f2fc <HAL_TIM_OC_Stop+0x54>
 800f2d4:	687b      	ldr	r3, [r7, #4]
 800f2d6:	681b      	ldr	r3, [r3, #0]
 800f2d8:	4a3d      	ldr	r2, [pc, #244]	; (800f3d0 <HAL_TIM_OC_Stop+0x128>)
 800f2da:	4293      	cmp	r3, r2
 800f2dc:	d00e      	beq.n	800f2fc <HAL_TIM_OC_Stop+0x54>
 800f2de:	687b      	ldr	r3, [r7, #4]
 800f2e0:	681b      	ldr	r3, [r3, #0]
 800f2e2:	4a3c      	ldr	r2, [pc, #240]	; (800f3d4 <HAL_TIM_OC_Stop+0x12c>)
 800f2e4:	4293      	cmp	r3, r2
 800f2e6:	d009      	beq.n	800f2fc <HAL_TIM_OC_Stop+0x54>
 800f2e8:	687b      	ldr	r3, [r7, #4]
 800f2ea:	681b      	ldr	r3, [r3, #0]
 800f2ec:	4a3a      	ldr	r2, [pc, #232]	; (800f3d8 <HAL_TIM_OC_Stop+0x130>)
 800f2ee:	4293      	cmp	r3, r2
 800f2f0:	d004      	beq.n	800f2fc <HAL_TIM_OC_Stop+0x54>
 800f2f2:	687b      	ldr	r3, [r7, #4]
 800f2f4:	681b      	ldr	r3, [r3, #0]
 800f2f6:	4a39      	ldr	r2, [pc, #228]	; (800f3dc <HAL_TIM_OC_Stop+0x134>)
 800f2f8:	4293      	cmp	r3, r2
 800f2fa:	d101      	bne.n	800f300 <HAL_TIM_OC_Stop+0x58>
 800f2fc:	2301      	movs	r3, #1
 800f2fe:	e000      	b.n	800f302 <HAL_TIM_OC_Stop+0x5a>
 800f300:	2300      	movs	r3, #0
 800f302:	2b00      	cmp	r3, #0
 800f304:	d017      	beq.n	800f336 <HAL_TIM_OC_Stop+0x8e>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 800f306:	687b      	ldr	r3, [r7, #4]
 800f308:	681b      	ldr	r3, [r3, #0]
 800f30a:	6a1a      	ldr	r2, [r3, #32]
 800f30c:	f241 1311 	movw	r3, #4369	; 0x1111
 800f310:	4013      	ands	r3, r2
 800f312:	2b00      	cmp	r3, #0
 800f314:	d10f      	bne.n	800f336 <HAL_TIM_OC_Stop+0x8e>
 800f316:	687b      	ldr	r3, [r7, #4]
 800f318:	681b      	ldr	r3, [r3, #0]
 800f31a:	6a1a      	ldr	r2, [r3, #32]
 800f31c:	f244 4344 	movw	r3, #17476	; 0x4444
 800f320:	4013      	ands	r3, r2
 800f322:	2b00      	cmp	r3, #0
 800f324:	d107      	bne.n	800f336 <HAL_TIM_OC_Stop+0x8e>
 800f326:	687b      	ldr	r3, [r7, #4]
 800f328:	681b      	ldr	r3, [r3, #0]
 800f32a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800f32c:	687b      	ldr	r3, [r7, #4]
 800f32e:	681b      	ldr	r3, [r3, #0]
 800f330:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800f334:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800f336:	687b      	ldr	r3, [r7, #4]
 800f338:	681b      	ldr	r3, [r3, #0]
 800f33a:	6a1a      	ldr	r2, [r3, #32]
 800f33c:	f241 1311 	movw	r3, #4369	; 0x1111
 800f340:	4013      	ands	r3, r2
 800f342:	2b00      	cmp	r3, #0
 800f344:	d10f      	bne.n	800f366 <HAL_TIM_OC_Stop+0xbe>
 800f346:	687b      	ldr	r3, [r7, #4]
 800f348:	681b      	ldr	r3, [r3, #0]
 800f34a:	6a1a      	ldr	r2, [r3, #32]
 800f34c:	f244 4344 	movw	r3, #17476	; 0x4444
 800f350:	4013      	ands	r3, r2
 800f352:	2b00      	cmp	r3, #0
 800f354:	d107      	bne.n	800f366 <HAL_TIM_OC_Stop+0xbe>
 800f356:	687b      	ldr	r3, [r7, #4]
 800f358:	681b      	ldr	r3, [r3, #0]
 800f35a:	681a      	ldr	r2, [r3, #0]
 800f35c:	687b      	ldr	r3, [r7, #4]
 800f35e:	681b      	ldr	r3, [r3, #0]
 800f360:	f022 0201 	bic.w	r2, r2, #1
 800f364:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800f366:	683b      	ldr	r3, [r7, #0]
 800f368:	2b00      	cmp	r3, #0
 800f36a:	d104      	bne.n	800f376 <HAL_TIM_OC_Stop+0xce>
 800f36c:	687b      	ldr	r3, [r7, #4]
 800f36e:	2201      	movs	r2, #1
 800f370:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800f374:	e023      	b.n	800f3be <HAL_TIM_OC_Stop+0x116>
 800f376:	683b      	ldr	r3, [r7, #0]
 800f378:	2b04      	cmp	r3, #4
 800f37a:	d104      	bne.n	800f386 <HAL_TIM_OC_Stop+0xde>
 800f37c:	687b      	ldr	r3, [r7, #4]
 800f37e:	2201      	movs	r2, #1
 800f380:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800f384:	e01b      	b.n	800f3be <HAL_TIM_OC_Stop+0x116>
 800f386:	683b      	ldr	r3, [r7, #0]
 800f388:	2b08      	cmp	r3, #8
 800f38a:	d104      	bne.n	800f396 <HAL_TIM_OC_Stop+0xee>
 800f38c:	687b      	ldr	r3, [r7, #4]
 800f38e:	2201      	movs	r2, #1
 800f390:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800f394:	e013      	b.n	800f3be <HAL_TIM_OC_Stop+0x116>
 800f396:	683b      	ldr	r3, [r7, #0]
 800f398:	2b0c      	cmp	r3, #12
 800f39a:	d104      	bne.n	800f3a6 <HAL_TIM_OC_Stop+0xfe>
 800f39c:	687b      	ldr	r3, [r7, #4]
 800f39e:	2201      	movs	r2, #1
 800f3a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800f3a4:	e00b      	b.n	800f3be <HAL_TIM_OC_Stop+0x116>
 800f3a6:	683b      	ldr	r3, [r7, #0]
 800f3a8:	2b10      	cmp	r3, #16
 800f3aa:	d104      	bne.n	800f3b6 <HAL_TIM_OC_Stop+0x10e>
 800f3ac:	687b      	ldr	r3, [r7, #4]
 800f3ae:	2201      	movs	r2, #1
 800f3b0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800f3b4:	e003      	b.n	800f3be <HAL_TIM_OC_Stop+0x116>
 800f3b6:	687b      	ldr	r3, [r7, #4]
 800f3b8:	2201      	movs	r2, #1
 800f3ba:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Return function status */
  return HAL_OK;
 800f3be:	2300      	movs	r3, #0
}
 800f3c0:	4618      	mov	r0, r3
 800f3c2:	3708      	adds	r7, #8
 800f3c4:	46bd      	mov	sp, r7
 800f3c6:	bd80      	pop	{r7, pc}
 800f3c8:	40012c00 	.word	0x40012c00
 800f3cc:	40013400 	.word	0x40013400
 800f3d0:	40014000 	.word	0x40014000
 800f3d4:	40014400 	.word	0x40014400
 800f3d8:	40014800 	.word	0x40014800
 800f3dc:	40015000 	.word	0x40015000

0800f3e0 <HAL_TIM_OnePulse_Init>:
  *            @arg TIM_OPMODE_SINGLE: Only one pulse will be generated.
  *            @arg TIM_OPMODE_REPETITIVE: Repetitive pulses will be generated.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Init(TIM_HandleTypeDef *htim, uint32_t OnePulseMode)
{
 800f3e0:	b580      	push	{r7, lr}
 800f3e2:	b082      	sub	sp, #8
 800f3e4:	af00      	add	r7, sp, #0
 800f3e6:	6078      	str	r0, [r7, #4]
 800f3e8:	6039      	str	r1, [r7, #0]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800f3ea:	687b      	ldr	r3, [r7, #4]
 800f3ec:	2b00      	cmp	r3, #0
 800f3ee:	d101      	bne.n	800f3f4 <HAL_TIM_OnePulse_Init+0x14>
  {
    return HAL_ERROR;
 800f3f0:	2301      	movs	r3, #1
 800f3f2:	e041      	b.n	800f478 <HAL_TIM_OnePulse_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_OPM_MODE(OnePulseMode));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800f3f4:	687b      	ldr	r3, [r7, #4]
 800f3f6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800f3fa:	b2db      	uxtb	r3, r3
 800f3fc:	2b00      	cmp	r3, #0
 800f3fe:	d106      	bne.n	800f40e <HAL_TIM_OnePulse_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800f400:	687b      	ldr	r3, [r7, #4]
 800f402:	2200      	movs	r2, #0
 800f404:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OnePulse_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OnePulse_MspInit(htim);
 800f408:	6878      	ldr	r0, [r7, #4]
 800f40a:	f000 f839 	bl	800f480 <HAL_TIM_OnePulse_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800f40e:	687b      	ldr	r3, [r7, #4]
 800f410:	2202      	movs	r2, #2
 800f412:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Configure the Time base in the One Pulse Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800f416:	687b      	ldr	r3, [r7, #4]
 800f418:	681a      	ldr	r2, [r3, #0]
 800f41a:	687b      	ldr	r3, [r7, #4]
 800f41c:	3304      	adds	r3, #4
 800f41e:	4619      	mov	r1, r3
 800f420:	4610      	mov	r0, r2
 800f422:	f000 fbb1 	bl	800fb88 <TIM_Base_SetConfig>

  /* Reset the OPM Bit */
  htim->Instance->CR1 &= ~TIM_CR1_OPM;
 800f426:	687b      	ldr	r3, [r7, #4]
 800f428:	681b      	ldr	r3, [r3, #0]
 800f42a:	681a      	ldr	r2, [r3, #0]
 800f42c:	687b      	ldr	r3, [r7, #4]
 800f42e:	681b      	ldr	r3, [r3, #0]
 800f430:	f022 0208 	bic.w	r2, r2, #8
 800f434:	601a      	str	r2, [r3, #0]

  /* Configure the OPM Mode */
  htim->Instance->CR1 |= OnePulseMode;
 800f436:	687b      	ldr	r3, [r7, #4]
 800f438:	681b      	ldr	r3, [r3, #0]
 800f43a:	6819      	ldr	r1, [r3, #0]
 800f43c:	687b      	ldr	r3, [r7, #4]
 800f43e:	681b      	ldr	r3, [r3, #0]
 800f440:	683a      	ldr	r2, [r7, #0]
 800f442:	430a      	orrs	r2, r1
 800f444:	601a      	str	r2, [r3, #0]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800f446:	687b      	ldr	r3, [r7, #4]
 800f448:	2201      	movs	r2, #1
 800f44a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800f44e:	687b      	ldr	r3, [r7, #4]
 800f450:	2201      	movs	r2, #1
 800f452:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800f456:	687b      	ldr	r3, [r7, #4]
 800f458:	2201      	movs	r2, #1
 800f45a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800f45e:	687b      	ldr	r3, [r7, #4]
 800f460:	2201      	movs	r2, #1
 800f462:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800f466:	687b      	ldr	r3, [r7, #4]
 800f468:	2201      	movs	r2, #1
 800f46a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800f46e:	687b      	ldr	r3, [r7, #4]
 800f470:	2201      	movs	r2, #1
 800f472:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800f476:	2300      	movs	r3, #0
}
 800f478:	4618      	mov	r0, r3
 800f47a:	3708      	adds	r7, #8
 800f47c:	46bd      	mov	sp, r7
 800f47e:	bd80      	pop	{r7, pc}

0800f480 <HAL_TIM_OnePulse_MspInit>:
  * @brief  Initializes the TIM One Pulse MSP.
  * @param  htim TIM One Pulse handle
  * @retval None
  */
__weak void HAL_TIM_OnePulse_MspInit(TIM_HandleTypeDef *htim)
{
 800f480:	b480      	push	{r7}
 800f482:	b083      	sub	sp, #12
 800f484:	af00      	add	r7, sp, #0
 800f486:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OnePulse_MspInit could be implemented in the user file
   */
}
 800f488:	bf00      	nop
 800f48a:	370c      	adds	r7, #12
 800f48c:	46bd      	mov	sp, r7
 800f48e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f492:	4770      	bx	lr

0800f494 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800f494:	b580      	push	{r7, lr}
 800f496:	b082      	sub	sp, #8
 800f498:	af00      	add	r7, sp, #0
 800f49a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800f49c:	687b      	ldr	r3, [r7, #4]
 800f49e:	681b      	ldr	r3, [r3, #0]
 800f4a0:	691b      	ldr	r3, [r3, #16]
 800f4a2:	f003 0302 	and.w	r3, r3, #2
 800f4a6:	2b02      	cmp	r3, #2
 800f4a8:	d122      	bne.n	800f4f0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800f4aa:	687b      	ldr	r3, [r7, #4]
 800f4ac:	681b      	ldr	r3, [r3, #0]
 800f4ae:	68db      	ldr	r3, [r3, #12]
 800f4b0:	f003 0302 	and.w	r3, r3, #2
 800f4b4:	2b02      	cmp	r3, #2
 800f4b6:	d11b      	bne.n	800f4f0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800f4b8:	687b      	ldr	r3, [r7, #4]
 800f4ba:	681b      	ldr	r3, [r3, #0]
 800f4bc:	f06f 0202 	mvn.w	r2, #2
 800f4c0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800f4c2:	687b      	ldr	r3, [r7, #4]
 800f4c4:	2201      	movs	r2, #1
 800f4c6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800f4c8:	687b      	ldr	r3, [r7, #4]
 800f4ca:	681b      	ldr	r3, [r3, #0]
 800f4cc:	699b      	ldr	r3, [r3, #24]
 800f4ce:	f003 0303 	and.w	r3, r3, #3
 800f4d2:	2b00      	cmp	r3, #0
 800f4d4:	d003      	beq.n	800f4de <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800f4d6:	6878      	ldr	r0, [r7, #4]
 800f4d8:	f000 fb38 	bl	800fb4c <HAL_TIM_IC_CaptureCallback>
 800f4dc:	e005      	b.n	800f4ea <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800f4de:	6878      	ldr	r0, [r7, #4]
 800f4e0:	f000 fb2a 	bl	800fb38 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800f4e4:	6878      	ldr	r0, [r7, #4]
 800f4e6:	f000 fb3b 	bl	800fb60 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800f4ea:	687b      	ldr	r3, [r7, #4]
 800f4ec:	2200      	movs	r2, #0
 800f4ee:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800f4f0:	687b      	ldr	r3, [r7, #4]
 800f4f2:	681b      	ldr	r3, [r3, #0]
 800f4f4:	691b      	ldr	r3, [r3, #16]
 800f4f6:	f003 0304 	and.w	r3, r3, #4
 800f4fa:	2b04      	cmp	r3, #4
 800f4fc:	d122      	bne.n	800f544 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800f4fe:	687b      	ldr	r3, [r7, #4]
 800f500:	681b      	ldr	r3, [r3, #0]
 800f502:	68db      	ldr	r3, [r3, #12]
 800f504:	f003 0304 	and.w	r3, r3, #4
 800f508:	2b04      	cmp	r3, #4
 800f50a:	d11b      	bne.n	800f544 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800f50c:	687b      	ldr	r3, [r7, #4]
 800f50e:	681b      	ldr	r3, [r3, #0]
 800f510:	f06f 0204 	mvn.w	r2, #4
 800f514:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800f516:	687b      	ldr	r3, [r7, #4]
 800f518:	2202      	movs	r2, #2
 800f51a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800f51c:	687b      	ldr	r3, [r7, #4]
 800f51e:	681b      	ldr	r3, [r3, #0]
 800f520:	699b      	ldr	r3, [r3, #24]
 800f522:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800f526:	2b00      	cmp	r3, #0
 800f528:	d003      	beq.n	800f532 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800f52a:	6878      	ldr	r0, [r7, #4]
 800f52c:	f000 fb0e 	bl	800fb4c <HAL_TIM_IC_CaptureCallback>
 800f530:	e005      	b.n	800f53e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800f532:	6878      	ldr	r0, [r7, #4]
 800f534:	f000 fb00 	bl	800fb38 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800f538:	6878      	ldr	r0, [r7, #4]
 800f53a:	f000 fb11 	bl	800fb60 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800f53e:	687b      	ldr	r3, [r7, #4]
 800f540:	2200      	movs	r2, #0
 800f542:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800f544:	687b      	ldr	r3, [r7, #4]
 800f546:	681b      	ldr	r3, [r3, #0]
 800f548:	691b      	ldr	r3, [r3, #16]
 800f54a:	f003 0308 	and.w	r3, r3, #8
 800f54e:	2b08      	cmp	r3, #8
 800f550:	d122      	bne.n	800f598 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800f552:	687b      	ldr	r3, [r7, #4]
 800f554:	681b      	ldr	r3, [r3, #0]
 800f556:	68db      	ldr	r3, [r3, #12]
 800f558:	f003 0308 	and.w	r3, r3, #8
 800f55c:	2b08      	cmp	r3, #8
 800f55e:	d11b      	bne.n	800f598 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800f560:	687b      	ldr	r3, [r7, #4]
 800f562:	681b      	ldr	r3, [r3, #0]
 800f564:	f06f 0208 	mvn.w	r2, #8
 800f568:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800f56a:	687b      	ldr	r3, [r7, #4]
 800f56c:	2204      	movs	r2, #4
 800f56e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800f570:	687b      	ldr	r3, [r7, #4]
 800f572:	681b      	ldr	r3, [r3, #0]
 800f574:	69db      	ldr	r3, [r3, #28]
 800f576:	f003 0303 	and.w	r3, r3, #3
 800f57a:	2b00      	cmp	r3, #0
 800f57c:	d003      	beq.n	800f586 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800f57e:	6878      	ldr	r0, [r7, #4]
 800f580:	f000 fae4 	bl	800fb4c <HAL_TIM_IC_CaptureCallback>
 800f584:	e005      	b.n	800f592 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800f586:	6878      	ldr	r0, [r7, #4]
 800f588:	f000 fad6 	bl	800fb38 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800f58c:	6878      	ldr	r0, [r7, #4]
 800f58e:	f000 fae7 	bl	800fb60 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800f592:	687b      	ldr	r3, [r7, #4]
 800f594:	2200      	movs	r2, #0
 800f596:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800f598:	687b      	ldr	r3, [r7, #4]
 800f59a:	681b      	ldr	r3, [r3, #0]
 800f59c:	691b      	ldr	r3, [r3, #16]
 800f59e:	f003 0310 	and.w	r3, r3, #16
 800f5a2:	2b10      	cmp	r3, #16
 800f5a4:	d122      	bne.n	800f5ec <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800f5a6:	687b      	ldr	r3, [r7, #4]
 800f5a8:	681b      	ldr	r3, [r3, #0]
 800f5aa:	68db      	ldr	r3, [r3, #12]
 800f5ac:	f003 0310 	and.w	r3, r3, #16
 800f5b0:	2b10      	cmp	r3, #16
 800f5b2:	d11b      	bne.n	800f5ec <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800f5b4:	687b      	ldr	r3, [r7, #4]
 800f5b6:	681b      	ldr	r3, [r3, #0]
 800f5b8:	f06f 0210 	mvn.w	r2, #16
 800f5bc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800f5be:	687b      	ldr	r3, [r7, #4]
 800f5c0:	2208      	movs	r2, #8
 800f5c2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800f5c4:	687b      	ldr	r3, [r7, #4]
 800f5c6:	681b      	ldr	r3, [r3, #0]
 800f5c8:	69db      	ldr	r3, [r3, #28]
 800f5ca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800f5ce:	2b00      	cmp	r3, #0
 800f5d0:	d003      	beq.n	800f5da <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800f5d2:	6878      	ldr	r0, [r7, #4]
 800f5d4:	f000 faba 	bl	800fb4c <HAL_TIM_IC_CaptureCallback>
 800f5d8:	e005      	b.n	800f5e6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800f5da:	6878      	ldr	r0, [r7, #4]
 800f5dc:	f000 faac 	bl	800fb38 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800f5e0:	6878      	ldr	r0, [r7, #4]
 800f5e2:	f000 fabd 	bl	800fb60 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800f5e6:	687b      	ldr	r3, [r7, #4]
 800f5e8:	2200      	movs	r2, #0
 800f5ea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800f5ec:	687b      	ldr	r3, [r7, #4]
 800f5ee:	681b      	ldr	r3, [r3, #0]
 800f5f0:	691b      	ldr	r3, [r3, #16]
 800f5f2:	f003 0301 	and.w	r3, r3, #1
 800f5f6:	2b01      	cmp	r3, #1
 800f5f8:	d10e      	bne.n	800f618 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800f5fa:	687b      	ldr	r3, [r7, #4]
 800f5fc:	681b      	ldr	r3, [r3, #0]
 800f5fe:	68db      	ldr	r3, [r3, #12]
 800f600:	f003 0301 	and.w	r3, r3, #1
 800f604:	2b01      	cmp	r3, #1
 800f606:	d107      	bne.n	800f618 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800f608:	687b      	ldr	r3, [r7, #4]
 800f60a:	681b      	ldr	r3, [r3, #0]
 800f60c:	f06f 0201 	mvn.w	r2, #1
 800f610:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800f612:	6878      	ldr	r0, [r7, #4]
 800f614:	f000 fa86 	bl	800fb24 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800f618:	687b      	ldr	r3, [r7, #4]
 800f61a:	681b      	ldr	r3, [r3, #0]
 800f61c:	691b      	ldr	r3, [r3, #16]
 800f61e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f622:	2b80      	cmp	r3, #128	; 0x80
 800f624:	d10e      	bne.n	800f644 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800f626:	687b      	ldr	r3, [r7, #4]
 800f628:	681b      	ldr	r3, [r3, #0]
 800f62a:	68db      	ldr	r3, [r3, #12]
 800f62c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f630:	2b80      	cmp	r3, #128	; 0x80
 800f632:	d107      	bne.n	800f644 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800f634:	687b      	ldr	r3, [r7, #4]
 800f636:	681b      	ldr	r3, [r3, #0]
 800f638:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800f63c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800f63e:	6878      	ldr	r0, [r7, #4]
 800f640:	f001 f95e 	bl	8010900 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800f644:	687b      	ldr	r3, [r7, #4]
 800f646:	681b      	ldr	r3, [r3, #0]
 800f648:	691b      	ldr	r3, [r3, #16]
 800f64a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f64e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800f652:	d10e      	bne.n	800f672 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800f654:	687b      	ldr	r3, [r7, #4]
 800f656:	681b      	ldr	r3, [r3, #0]
 800f658:	68db      	ldr	r3, [r3, #12]
 800f65a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f65e:	2b80      	cmp	r3, #128	; 0x80
 800f660:	d107      	bne.n	800f672 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800f662:	687b      	ldr	r3, [r7, #4]
 800f664:	681b      	ldr	r3, [r3, #0]
 800f666:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800f66a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800f66c:	6878      	ldr	r0, [r7, #4]
 800f66e:	f001 f951 	bl	8010914 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800f672:	687b      	ldr	r3, [r7, #4]
 800f674:	681b      	ldr	r3, [r3, #0]
 800f676:	691b      	ldr	r3, [r3, #16]
 800f678:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f67c:	2b40      	cmp	r3, #64	; 0x40
 800f67e:	d10e      	bne.n	800f69e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800f680:	687b      	ldr	r3, [r7, #4]
 800f682:	681b      	ldr	r3, [r3, #0]
 800f684:	68db      	ldr	r3, [r3, #12]
 800f686:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f68a:	2b40      	cmp	r3, #64	; 0x40
 800f68c:	d107      	bne.n	800f69e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800f68e:	687b      	ldr	r3, [r7, #4]
 800f690:	681b      	ldr	r3, [r3, #0]
 800f692:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800f696:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800f698:	6878      	ldr	r0, [r7, #4]
 800f69a:	f000 fa6b 	bl	800fb74 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800f69e:	687b      	ldr	r3, [r7, #4]
 800f6a0:	681b      	ldr	r3, [r3, #0]
 800f6a2:	691b      	ldr	r3, [r3, #16]
 800f6a4:	f003 0320 	and.w	r3, r3, #32
 800f6a8:	2b20      	cmp	r3, #32
 800f6aa:	d10e      	bne.n	800f6ca <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800f6ac:	687b      	ldr	r3, [r7, #4]
 800f6ae:	681b      	ldr	r3, [r3, #0]
 800f6b0:	68db      	ldr	r3, [r3, #12]
 800f6b2:	f003 0320 	and.w	r3, r3, #32
 800f6b6:	2b20      	cmp	r3, #32
 800f6b8:	d107      	bne.n	800f6ca <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800f6ba:	687b      	ldr	r3, [r7, #4]
 800f6bc:	681b      	ldr	r3, [r3, #0]
 800f6be:	f06f 0220 	mvn.w	r2, #32
 800f6c2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800f6c4:	6878      	ldr	r0, [r7, #4]
 800f6c6:	f001 f911 	bl	80108ec <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 800f6ca:	687b      	ldr	r3, [r7, #4]
 800f6cc:	681b      	ldr	r3, [r3, #0]
 800f6ce:	691b      	ldr	r3, [r3, #16]
 800f6d0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800f6d4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800f6d8:	d10f      	bne.n	800f6fa <HAL_TIM_IRQHandler+0x266>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 800f6da:	687b      	ldr	r3, [r7, #4]
 800f6dc:	681b      	ldr	r3, [r3, #0]
 800f6de:	68db      	ldr	r3, [r3, #12]
 800f6e0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800f6e4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800f6e8:	d107      	bne.n	800f6fa <HAL_TIM_IRQHandler+0x266>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 800f6ea:	687b      	ldr	r3, [r7, #4]
 800f6ec:	681b      	ldr	r3, [r3, #0]
 800f6ee:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 800f6f2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 800f6f4:	6878      	ldr	r0, [r7, #4]
 800f6f6:	f001 f917 	bl	8010928 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 800f6fa:	687b      	ldr	r3, [r7, #4]
 800f6fc:	681b      	ldr	r3, [r3, #0]
 800f6fe:	691b      	ldr	r3, [r3, #16]
 800f700:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800f704:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800f708:	d10f      	bne.n	800f72a <HAL_TIM_IRQHandler+0x296>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 800f70a:	687b      	ldr	r3, [r7, #4]
 800f70c:	681b      	ldr	r3, [r3, #0]
 800f70e:	68db      	ldr	r3, [r3, #12]
 800f710:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800f714:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800f718:	d107      	bne.n	800f72a <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 800f71a:	687b      	ldr	r3, [r7, #4]
 800f71c:	681b      	ldr	r3, [r3, #0]
 800f71e:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 800f722:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 800f724:	6878      	ldr	r0, [r7, #4]
 800f726:	f001 f909 	bl	801093c <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 800f72a:	687b      	ldr	r3, [r7, #4]
 800f72c:	681b      	ldr	r3, [r3, #0]
 800f72e:	691b      	ldr	r3, [r3, #16]
 800f730:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800f734:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800f738:	d10f      	bne.n	800f75a <HAL_TIM_IRQHandler+0x2c6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 800f73a:	687b      	ldr	r3, [r7, #4]
 800f73c:	681b      	ldr	r3, [r3, #0]
 800f73e:	68db      	ldr	r3, [r3, #12]
 800f740:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800f744:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800f748:	d107      	bne.n	800f75a <HAL_TIM_IRQHandler+0x2c6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 800f74a:	687b      	ldr	r3, [r7, #4]
 800f74c:	681b      	ldr	r3, [r3, #0]
 800f74e:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 800f752:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 800f754:	6878      	ldr	r0, [r7, #4]
 800f756:	f001 f8fb 	bl	8010950 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 800f75a:	687b      	ldr	r3, [r7, #4]
 800f75c:	681b      	ldr	r3, [r3, #0]
 800f75e:	691b      	ldr	r3, [r3, #16]
 800f760:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800f764:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800f768:	d10f      	bne.n	800f78a <HAL_TIM_IRQHandler+0x2f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 800f76a:	687b      	ldr	r3, [r7, #4]
 800f76c:	681b      	ldr	r3, [r3, #0]
 800f76e:	68db      	ldr	r3, [r3, #12]
 800f770:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800f774:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800f778:	d107      	bne.n	800f78a <HAL_TIM_IRQHandler+0x2f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 800f77a:	687b      	ldr	r3, [r7, #4]
 800f77c:	681b      	ldr	r3, [r3, #0]
 800f77e:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 800f782:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 800f784:	6878      	ldr	r0, [r7, #4]
 800f786:	f001 f8ed 	bl	8010964 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800f78a:	bf00      	nop
 800f78c:	3708      	adds	r7, #8
 800f78e:	46bd      	mov	sp, r7
 800f790:	bd80      	pop	{r7, pc}
	...

0800f794 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 800f794:	b580      	push	{r7, lr}
 800f796:	b086      	sub	sp, #24
 800f798:	af00      	add	r7, sp, #0
 800f79a:	60f8      	str	r0, [r7, #12]
 800f79c:	60b9      	str	r1, [r7, #8]
 800f79e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800f7a0:	2300      	movs	r3, #0
 800f7a2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_CHANNEL_MODE(sConfig->OCMode, Channel));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 800f7a4:	68fb      	ldr	r3, [r7, #12]
 800f7a6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800f7aa:	2b01      	cmp	r3, #1
 800f7ac:	d101      	bne.n	800f7b2 <HAL_TIM_OC_ConfigChannel+0x1e>
 800f7ae:	2302      	movs	r3, #2
 800f7b0:	e066      	b.n	800f880 <HAL_TIM_OC_ConfigChannel+0xec>
 800f7b2:	68fb      	ldr	r3, [r7, #12]
 800f7b4:	2201      	movs	r2, #1
 800f7b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800f7ba:	687b      	ldr	r3, [r7, #4]
 800f7bc:	2b14      	cmp	r3, #20
 800f7be:	d857      	bhi.n	800f870 <HAL_TIM_OC_ConfigChannel+0xdc>
 800f7c0:	a201      	add	r2, pc, #4	; (adr r2, 800f7c8 <HAL_TIM_OC_ConfigChannel+0x34>)
 800f7c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f7c6:	bf00      	nop
 800f7c8:	0800f81d 	.word	0x0800f81d
 800f7cc:	0800f871 	.word	0x0800f871
 800f7d0:	0800f871 	.word	0x0800f871
 800f7d4:	0800f871 	.word	0x0800f871
 800f7d8:	0800f82b 	.word	0x0800f82b
 800f7dc:	0800f871 	.word	0x0800f871
 800f7e0:	0800f871 	.word	0x0800f871
 800f7e4:	0800f871 	.word	0x0800f871
 800f7e8:	0800f839 	.word	0x0800f839
 800f7ec:	0800f871 	.word	0x0800f871
 800f7f0:	0800f871 	.word	0x0800f871
 800f7f4:	0800f871 	.word	0x0800f871
 800f7f8:	0800f847 	.word	0x0800f847
 800f7fc:	0800f871 	.word	0x0800f871
 800f800:	0800f871 	.word	0x0800f871
 800f804:	0800f871 	.word	0x0800f871
 800f808:	0800f855 	.word	0x0800f855
 800f80c:	0800f871 	.word	0x0800f871
 800f810:	0800f871 	.word	0x0800f871
 800f814:	0800f871 	.word	0x0800f871
 800f818:	0800f863 	.word	0x0800f863
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800f81c:	68fb      	ldr	r3, [r7, #12]
 800f81e:	681b      	ldr	r3, [r3, #0]
 800f820:	68b9      	ldr	r1, [r7, #8]
 800f822:	4618      	mov	r0, r3
 800f824:	f000 fa58 	bl	800fcd8 <TIM_OC1_SetConfig>
      break;
 800f828:	e025      	b.n	800f876 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800f82a:	68fb      	ldr	r3, [r7, #12]
 800f82c:	681b      	ldr	r3, [r3, #0]
 800f82e:	68b9      	ldr	r1, [r7, #8]
 800f830:	4618      	mov	r0, r3
 800f832:	f000 faeb 	bl	800fe0c <TIM_OC2_SetConfig>
      break;
 800f836:	e01e      	b.n	800f876 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800f838:	68fb      	ldr	r3, [r7, #12]
 800f83a:	681b      	ldr	r3, [r3, #0]
 800f83c:	68b9      	ldr	r1, [r7, #8]
 800f83e:	4618      	mov	r0, r3
 800f840:	f000 fb78 	bl	800ff34 <TIM_OC3_SetConfig>
      break;
 800f844:	e017      	b.n	800f876 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800f846:	68fb      	ldr	r3, [r7, #12]
 800f848:	681b      	ldr	r3, [r3, #0]
 800f84a:	68b9      	ldr	r1, [r7, #8]
 800f84c:	4618      	mov	r0, r3
 800f84e:	f000 fc03 	bl	8010058 <TIM_OC4_SetConfig>
      break;
 800f852:	e010      	b.n	800f876 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800f854:	68fb      	ldr	r3, [r7, #12]
 800f856:	681b      	ldr	r3, [r3, #0]
 800f858:	68b9      	ldr	r1, [r7, #8]
 800f85a:	4618      	mov	r0, r3
 800f85c:	f000 fc90 	bl	8010180 <TIM_OC5_SetConfig>
      break;
 800f860:	e009      	b.n	800f876 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800f862:	68fb      	ldr	r3, [r7, #12]
 800f864:	681b      	ldr	r3, [r3, #0]
 800f866:	68b9      	ldr	r1, [r7, #8]
 800f868:	4618      	mov	r0, r3
 800f86a:	f000 fcf3 	bl	8010254 <TIM_OC6_SetConfig>
      break;
 800f86e:	e002      	b.n	800f876 <HAL_TIM_OC_ConfigChannel+0xe2>
    }

    default:
      status = HAL_ERROR;
 800f870:	2301      	movs	r3, #1
 800f872:	75fb      	strb	r3, [r7, #23]
      break;
 800f874:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800f876:	68fb      	ldr	r3, [r7, #12]
 800f878:	2200      	movs	r2, #0
 800f87a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800f87e:	7dfb      	ldrb	r3, [r7, #23]
}
 800f880:	4618      	mov	r0, r3
 800f882:	3718      	adds	r7, #24
 800f884:	46bd      	mov	sp, r7
 800f886:	bd80      	pop	{r7, pc}

0800f888 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800f888:	b580      	push	{r7, lr}
 800f88a:	b084      	sub	sp, #16
 800f88c:	af00      	add	r7, sp, #0
 800f88e:	6078      	str	r0, [r7, #4]
 800f890:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800f892:	2300      	movs	r3, #0
 800f894:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800f896:	687b      	ldr	r3, [r7, #4]
 800f898:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800f89c:	2b01      	cmp	r3, #1
 800f89e:	d101      	bne.n	800f8a4 <HAL_TIM_ConfigClockSource+0x1c>
 800f8a0:	2302      	movs	r3, #2
 800f8a2:	e0ee      	b.n	800fa82 <HAL_TIM_ConfigClockSource+0x1fa>
 800f8a4:	687b      	ldr	r3, [r7, #4]
 800f8a6:	2201      	movs	r2, #1
 800f8a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800f8ac:	687b      	ldr	r3, [r7, #4]
 800f8ae:	2202      	movs	r2, #2
 800f8b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800f8b4:	687b      	ldr	r3, [r7, #4]
 800f8b6:	681b      	ldr	r3, [r3, #0]
 800f8b8:	689b      	ldr	r3, [r3, #8]
 800f8ba:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800f8bc:	68bb      	ldr	r3, [r7, #8]
 800f8be:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 800f8c2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800f8c6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800f8c8:	68bb      	ldr	r3, [r7, #8]
 800f8ca:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800f8ce:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800f8d0:	687b      	ldr	r3, [r7, #4]
 800f8d2:	681b      	ldr	r3, [r3, #0]
 800f8d4:	68ba      	ldr	r2, [r7, #8]
 800f8d6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800f8d8:	683b      	ldr	r3, [r7, #0]
 800f8da:	681b      	ldr	r3, [r3, #0]
 800f8dc:	4a6b      	ldr	r2, [pc, #428]	; (800fa8c <HAL_TIM_ConfigClockSource+0x204>)
 800f8de:	4293      	cmp	r3, r2
 800f8e0:	f000 80b9 	beq.w	800fa56 <HAL_TIM_ConfigClockSource+0x1ce>
 800f8e4:	4a69      	ldr	r2, [pc, #420]	; (800fa8c <HAL_TIM_ConfigClockSource+0x204>)
 800f8e6:	4293      	cmp	r3, r2
 800f8e8:	f200 80be 	bhi.w	800fa68 <HAL_TIM_ConfigClockSource+0x1e0>
 800f8ec:	4a68      	ldr	r2, [pc, #416]	; (800fa90 <HAL_TIM_ConfigClockSource+0x208>)
 800f8ee:	4293      	cmp	r3, r2
 800f8f0:	f000 80b1 	beq.w	800fa56 <HAL_TIM_ConfigClockSource+0x1ce>
 800f8f4:	4a66      	ldr	r2, [pc, #408]	; (800fa90 <HAL_TIM_ConfigClockSource+0x208>)
 800f8f6:	4293      	cmp	r3, r2
 800f8f8:	f200 80b6 	bhi.w	800fa68 <HAL_TIM_ConfigClockSource+0x1e0>
 800f8fc:	4a65      	ldr	r2, [pc, #404]	; (800fa94 <HAL_TIM_ConfigClockSource+0x20c>)
 800f8fe:	4293      	cmp	r3, r2
 800f900:	f000 80a9 	beq.w	800fa56 <HAL_TIM_ConfigClockSource+0x1ce>
 800f904:	4a63      	ldr	r2, [pc, #396]	; (800fa94 <HAL_TIM_ConfigClockSource+0x20c>)
 800f906:	4293      	cmp	r3, r2
 800f908:	f200 80ae 	bhi.w	800fa68 <HAL_TIM_ConfigClockSource+0x1e0>
 800f90c:	4a62      	ldr	r2, [pc, #392]	; (800fa98 <HAL_TIM_ConfigClockSource+0x210>)
 800f90e:	4293      	cmp	r3, r2
 800f910:	f000 80a1 	beq.w	800fa56 <HAL_TIM_ConfigClockSource+0x1ce>
 800f914:	4a60      	ldr	r2, [pc, #384]	; (800fa98 <HAL_TIM_ConfigClockSource+0x210>)
 800f916:	4293      	cmp	r3, r2
 800f918:	f200 80a6 	bhi.w	800fa68 <HAL_TIM_ConfigClockSource+0x1e0>
 800f91c:	4a5f      	ldr	r2, [pc, #380]	; (800fa9c <HAL_TIM_ConfigClockSource+0x214>)
 800f91e:	4293      	cmp	r3, r2
 800f920:	f000 8099 	beq.w	800fa56 <HAL_TIM_ConfigClockSource+0x1ce>
 800f924:	4a5d      	ldr	r2, [pc, #372]	; (800fa9c <HAL_TIM_ConfigClockSource+0x214>)
 800f926:	4293      	cmp	r3, r2
 800f928:	f200 809e 	bhi.w	800fa68 <HAL_TIM_ConfigClockSource+0x1e0>
 800f92c:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800f930:	f000 8091 	beq.w	800fa56 <HAL_TIM_ConfigClockSource+0x1ce>
 800f934:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800f938:	f200 8096 	bhi.w	800fa68 <HAL_TIM_ConfigClockSource+0x1e0>
 800f93c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800f940:	f000 8089 	beq.w	800fa56 <HAL_TIM_ConfigClockSource+0x1ce>
 800f944:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800f948:	f200 808e 	bhi.w	800fa68 <HAL_TIM_ConfigClockSource+0x1e0>
 800f94c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800f950:	d03e      	beq.n	800f9d0 <HAL_TIM_ConfigClockSource+0x148>
 800f952:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800f956:	f200 8087 	bhi.w	800fa68 <HAL_TIM_ConfigClockSource+0x1e0>
 800f95a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800f95e:	f000 8086 	beq.w	800fa6e <HAL_TIM_ConfigClockSource+0x1e6>
 800f962:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800f966:	d87f      	bhi.n	800fa68 <HAL_TIM_ConfigClockSource+0x1e0>
 800f968:	2b70      	cmp	r3, #112	; 0x70
 800f96a:	d01a      	beq.n	800f9a2 <HAL_TIM_ConfigClockSource+0x11a>
 800f96c:	2b70      	cmp	r3, #112	; 0x70
 800f96e:	d87b      	bhi.n	800fa68 <HAL_TIM_ConfigClockSource+0x1e0>
 800f970:	2b60      	cmp	r3, #96	; 0x60
 800f972:	d050      	beq.n	800fa16 <HAL_TIM_ConfigClockSource+0x18e>
 800f974:	2b60      	cmp	r3, #96	; 0x60
 800f976:	d877      	bhi.n	800fa68 <HAL_TIM_ConfigClockSource+0x1e0>
 800f978:	2b50      	cmp	r3, #80	; 0x50
 800f97a:	d03c      	beq.n	800f9f6 <HAL_TIM_ConfigClockSource+0x16e>
 800f97c:	2b50      	cmp	r3, #80	; 0x50
 800f97e:	d873      	bhi.n	800fa68 <HAL_TIM_ConfigClockSource+0x1e0>
 800f980:	2b40      	cmp	r3, #64	; 0x40
 800f982:	d058      	beq.n	800fa36 <HAL_TIM_ConfigClockSource+0x1ae>
 800f984:	2b40      	cmp	r3, #64	; 0x40
 800f986:	d86f      	bhi.n	800fa68 <HAL_TIM_ConfigClockSource+0x1e0>
 800f988:	2b30      	cmp	r3, #48	; 0x30
 800f98a:	d064      	beq.n	800fa56 <HAL_TIM_ConfigClockSource+0x1ce>
 800f98c:	2b30      	cmp	r3, #48	; 0x30
 800f98e:	d86b      	bhi.n	800fa68 <HAL_TIM_ConfigClockSource+0x1e0>
 800f990:	2b20      	cmp	r3, #32
 800f992:	d060      	beq.n	800fa56 <HAL_TIM_ConfigClockSource+0x1ce>
 800f994:	2b20      	cmp	r3, #32
 800f996:	d867      	bhi.n	800fa68 <HAL_TIM_ConfigClockSource+0x1e0>
 800f998:	2b00      	cmp	r3, #0
 800f99a:	d05c      	beq.n	800fa56 <HAL_TIM_ConfigClockSource+0x1ce>
 800f99c:	2b10      	cmp	r3, #16
 800f99e:	d05a      	beq.n	800fa56 <HAL_TIM_ConfigClockSource+0x1ce>
 800f9a0:	e062      	b.n	800fa68 <HAL_TIM_ConfigClockSource+0x1e0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800f9a2:	687b      	ldr	r3, [r7, #4]
 800f9a4:	6818      	ldr	r0, [r3, #0]
 800f9a6:	683b      	ldr	r3, [r7, #0]
 800f9a8:	6899      	ldr	r1, [r3, #8]
 800f9aa:	683b      	ldr	r3, [r7, #0]
 800f9ac:	685a      	ldr	r2, [r3, #4]
 800f9ae:	683b      	ldr	r3, [r7, #0]
 800f9b0:	68db      	ldr	r3, [r3, #12]
 800f9b2:	f000 fe0d 	bl	80105d0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800f9b6:	687b      	ldr	r3, [r7, #4]
 800f9b8:	681b      	ldr	r3, [r3, #0]
 800f9ba:	689b      	ldr	r3, [r3, #8]
 800f9bc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800f9be:	68bb      	ldr	r3, [r7, #8]
 800f9c0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800f9c4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800f9c6:	687b      	ldr	r3, [r7, #4]
 800f9c8:	681b      	ldr	r3, [r3, #0]
 800f9ca:	68ba      	ldr	r2, [r7, #8]
 800f9cc:	609a      	str	r2, [r3, #8]
      break;
 800f9ce:	e04f      	b.n	800fa70 <HAL_TIM_ConfigClockSource+0x1e8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800f9d0:	687b      	ldr	r3, [r7, #4]
 800f9d2:	6818      	ldr	r0, [r3, #0]
 800f9d4:	683b      	ldr	r3, [r7, #0]
 800f9d6:	6899      	ldr	r1, [r3, #8]
 800f9d8:	683b      	ldr	r3, [r7, #0]
 800f9da:	685a      	ldr	r2, [r3, #4]
 800f9dc:	683b      	ldr	r3, [r7, #0]
 800f9de:	68db      	ldr	r3, [r3, #12]
 800f9e0:	f000 fdf6 	bl	80105d0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800f9e4:	687b      	ldr	r3, [r7, #4]
 800f9e6:	681b      	ldr	r3, [r3, #0]
 800f9e8:	689a      	ldr	r2, [r3, #8]
 800f9ea:	687b      	ldr	r3, [r7, #4]
 800f9ec:	681b      	ldr	r3, [r3, #0]
 800f9ee:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800f9f2:	609a      	str	r2, [r3, #8]
      break;
 800f9f4:	e03c      	b.n	800fa70 <HAL_TIM_ConfigClockSource+0x1e8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800f9f6:	687b      	ldr	r3, [r7, #4]
 800f9f8:	6818      	ldr	r0, [r3, #0]
 800f9fa:	683b      	ldr	r3, [r7, #0]
 800f9fc:	6859      	ldr	r1, [r3, #4]
 800f9fe:	683b      	ldr	r3, [r7, #0]
 800fa00:	68db      	ldr	r3, [r3, #12]
 800fa02:	461a      	mov	r2, r3
 800fa04:	f000 fd68 	bl	80104d8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800fa08:	687b      	ldr	r3, [r7, #4]
 800fa0a:	681b      	ldr	r3, [r3, #0]
 800fa0c:	2150      	movs	r1, #80	; 0x50
 800fa0e:	4618      	mov	r0, r3
 800fa10:	f000 fdc1 	bl	8010596 <TIM_ITRx_SetConfig>
      break;
 800fa14:	e02c      	b.n	800fa70 <HAL_TIM_ConfigClockSource+0x1e8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800fa16:	687b      	ldr	r3, [r7, #4]
 800fa18:	6818      	ldr	r0, [r3, #0]
 800fa1a:	683b      	ldr	r3, [r7, #0]
 800fa1c:	6859      	ldr	r1, [r3, #4]
 800fa1e:	683b      	ldr	r3, [r7, #0]
 800fa20:	68db      	ldr	r3, [r3, #12]
 800fa22:	461a      	mov	r2, r3
 800fa24:	f000 fd87 	bl	8010536 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800fa28:	687b      	ldr	r3, [r7, #4]
 800fa2a:	681b      	ldr	r3, [r3, #0]
 800fa2c:	2160      	movs	r1, #96	; 0x60
 800fa2e:	4618      	mov	r0, r3
 800fa30:	f000 fdb1 	bl	8010596 <TIM_ITRx_SetConfig>
      break;
 800fa34:	e01c      	b.n	800fa70 <HAL_TIM_ConfigClockSource+0x1e8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800fa36:	687b      	ldr	r3, [r7, #4]
 800fa38:	6818      	ldr	r0, [r3, #0]
 800fa3a:	683b      	ldr	r3, [r7, #0]
 800fa3c:	6859      	ldr	r1, [r3, #4]
 800fa3e:	683b      	ldr	r3, [r7, #0]
 800fa40:	68db      	ldr	r3, [r3, #12]
 800fa42:	461a      	mov	r2, r3
 800fa44:	f000 fd48 	bl	80104d8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800fa48:	687b      	ldr	r3, [r7, #4]
 800fa4a:	681b      	ldr	r3, [r3, #0]
 800fa4c:	2140      	movs	r1, #64	; 0x40
 800fa4e:	4618      	mov	r0, r3
 800fa50:	f000 fda1 	bl	8010596 <TIM_ITRx_SetConfig>
      break;
 800fa54:	e00c      	b.n	800fa70 <HAL_TIM_ConfigClockSource+0x1e8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800fa56:	687b      	ldr	r3, [r7, #4]
 800fa58:	681a      	ldr	r2, [r3, #0]
 800fa5a:	683b      	ldr	r3, [r7, #0]
 800fa5c:	681b      	ldr	r3, [r3, #0]
 800fa5e:	4619      	mov	r1, r3
 800fa60:	4610      	mov	r0, r2
 800fa62:	f000 fd98 	bl	8010596 <TIM_ITRx_SetConfig>
      break;
 800fa66:	e003      	b.n	800fa70 <HAL_TIM_ConfigClockSource+0x1e8>
    }

    default:
      status = HAL_ERROR;
 800fa68:	2301      	movs	r3, #1
 800fa6a:	73fb      	strb	r3, [r7, #15]
      break;
 800fa6c:	e000      	b.n	800fa70 <HAL_TIM_ConfigClockSource+0x1e8>
      break;
 800fa6e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800fa70:	687b      	ldr	r3, [r7, #4]
 800fa72:	2201      	movs	r2, #1
 800fa74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800fa78:	687b      	ldr	r3, [r7, #4]
 800fa7a:	2200      	movs	r2, #0
 800fa7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800fa80:	7bfb      	ldrb	r3, [r7, #15]
}
 800fa82:	4618      	mov	r0, r3
 800fa84:	3710      	adds	r7, #16
 800fa86:	46bd      	mov	sp, r7
 800fa88:	bd80      	pop	{r7, pc}
 800fa8a:	bf00      	nop
 800fa8c:	00100070 	.word	0x00100070
 800fa90:	00100050 	.word	0x00100050
 800fa94:	00100040 	.word	0x00100040
 800fa98:	00100030 	.word	0x00100030
 800fa9c:	00100020 	.word	0x00100020

0800faa0 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1, Reset + Trigger, Gated + Reset).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 800faa0:	b580      	push	{r7, lr}
 800faa2:	b082      	sub	sp, #8
 800faa4:	af00      	add	r7, sp, #0
 800faa6:	6078      	str	r0, [r7, #4]
 800faa8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_INSTANCE(htim->Instance, sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 800faaa:	687b      	ldr	r3, [r7, #4]
 800faac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800fab0:	2b01      	cmp	r3, #1
 800fab2:	d101      	bne.n	800fab8 <HAL_TIM_SlaveConfigSynchro+0x18>
 800fab4:	2302      	movs	r3, #2
 800fab6:	e031      	b.n	800fb1c <HAL_TIM_SlaveConfigSynchro+0x7c>
 800fab8:	687b      	ldr	r3, [r7, #4]
 800faba:	2201      	movs	r2, #1
 800fabc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800fac0:	687b      	ldr	r3, [r7, #4]
 800fac2:	2202      	movs	r2, #2
 800fac4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 800fac8:	6839      	ldr	r1, [r7, #0]
 800faca:	6878      	ldr	r0, [r7, #4]
 800facc:	f000 fc2e 	bl	801032c <TIM_SlaveTimer_SetConfig>
 800fad0:	4603      	mov	r3, r0
 800fad2:	2b00      	cmp	r3, #0
 800fad4:	d009      	beq.n	800faea <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 800fad6:	687b      	ldr	r3, [r7, #4]
 800fad8:	2201      	movs	r2, #1
 800fada:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 800fade:	687b      	ldr	r3, [r7, #4]
 800fae0:	2200      	movs	r2, #0
 800fae2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 800fae6:	2301      	movs	r3, #1
 800fae8:	e018      	b.n	800fb1c <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 800faea:	687b      	ldr	r3, [r7, #4]
 800faec:	681b      	ldr	r3, [r3, #0]
 800faee:	68da      	ldr	r2, [r3, #12]
 800faf0:	687b      	ldr	r3, [r7, #4]
 800faf2:	681b      	ldr	r3, [r3, #0]
 800faf4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800faf8:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 800fafa:	687b      	ldr	r3, [r7, #4]
 800fafc:	681b      	ldr	r3, [r3, #0]
 800fafe:	68da      	ldr	r2, [r3, #12]
 800fb00:	687b      	ldr	r3, [r7, #4]
 800fb02:	681b      	ldr	r3, [r3, #0]
 800fb04:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800fb08:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 800fb0a:	687b      	ldr	r3, [r7, #4]
 800fb0c:	2201      	movs	r2, #1
 800fb0e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800fb12:	687b      	ldr	r3, [r7, #4]
 800fb14:	2200      	movs	r2, #0
 800fb16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800fb1a:	2300      	movs	r3, #0
}
 800fb1c:	4618      	mov	r0, r3
 800fb1e:	3708      	adds	r7, #8
 800fb20:	46bd      	mov	sp, r7
 800fb22:	bd80      	pop	{r7, pc}

0800fb24 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800fb24:	b480      	push	{r7}
 800fb26:	b083      	sub	sp, #12
 800fb28:	af00      	add	r7, sp, #0
 800fb2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800fb2c:	bf00      	nop
 800fb2e:	370c      	adds	r7, #12
 800fb30:	46bd      	mov	sp, r7
 800fb32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb36:	4770      	bx	lr

0800fb38 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800fb38:	b480      	push	{r7}
 800fb3a:	b083      	sub	sp, #12
 800fb3c:	af00      	add	r7, sp, #0
 800fb3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800fb40:	bf00      	nop
 800fb42:	370c      	adds	r7, #12
 800fb44:	46bd      	mov	sp, r7
 800fb46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb4a:	4770      	bx	lr

0800fb4c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800fb4c:	b480      	push	{r7}
 800fb4e:	b083      	sub	sp, #12
 800fb50:	af00      	add	r7, sp, #0
 800fb52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800fb54:	bf00      	nop
 800fb56:	370c      	adds	r7, #12
 800fb58:	46bd      	mov	sp, r7
 800fb5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb5e:	4770      	bx	lr

0800fb60 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800fb60:	b480      	push	{r7}
 800fb62:	b083      	sub	sp, #12
 800fb64:	af00      	add	r7, sp, #0
 800fb66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800fb68:	bf00      	nop
 800fb6a:	370c      	adds	r7, #12
 800fb6c:	46bd      	mov	sp, r7
 800fb6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb72:	4770      	bx	lr

0800fb74 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800fb74:	b480      	push	{r7}
 800fb76:	b083      	sub	sp, #12
 800fb78:	af00      	add	r7, sp, #0
 800fb7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800fb7c:	bf00      	nop
 800fb7e:	370c      	adds	r7, #12
 800fb80:	46bd      	mov	sp, r7
 800fb82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb86:	4770      	bx	lr

0800fb88 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800fb88:	b480      	push	{r7}
 800fb8a:	b085      	sub	sp, #20
 800fb8c:	af00      	add	r7, sp, #0
 800fb8e:	6078      	str	r0, [r7, #4]
 800fb90:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800fb92:	687b      	ldr	r3, [r7, #4]
 800fb94:	681b      	ldr	r3, [r3, #0]
 800fb96:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800fb98:	687b      	ldr	r3, [r7, #4]
 800fb9a:	4a46      	ldr	r2, [pc, #280]	; (800fcb4 <TIM_Base_SetConfig+0x12c>)
 800fb9c:	4293      	cmp	r3, r2
 800fb9e:	d017      	beq.n	800fbd0 <TIM_Base_SetConfig+0x48>
 800fba0:	687b      	ldr	r3, [r7, #4]
 800fba2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800fba6:	d013      	beq.n	800fbd0 <TIM_Base_SetConfig+0x48>
 800fba8:	687b      	ldr	r3, [r7, #4]
 800fbaa:	4a43      	ldr	r2, [pc, #268]	; (800fcb8 <TIM_Base_SetConfig+0x130>)
 800fbac:	4293      	cmp	r3, r2
 800fbae:	d00f      	beq.n	800fbd0 <TIM_Base_SetConfig+0x48>
 800fbb0:	687b      	ldr	r3, [r7, #4]
 800fbb2:	4a42      	ldr	r2, [pc, #264]	; (800fcbc <TIM_Base_SetConfig+0x134>)
 800fbb4:	4293      	cmp	r3, r2
 800fbb6:	d00b      	beq.n	800fbd0 <TIM_Base_SetConfig+0x48>
 800fbb8:	687b      	ldr	r3, [r7, #4]
 800fbba:	4a41      	ldr	r2, [pc, #260]	; (800fcc0 <TIM_Base_SetConfig+0x138>)
 800fbbc:	4293      	cmp	r3, r2
 800fbbe:	d007      	beq.n	800fbd0 <TIM_Base_SetConfig+0x48>
 800fbc0:	687b      	ldr	r3, [r7, #4]
 800fbc2:	4a40      	ldr	r2, [pc, #256]	; (800fcc4 <TIM_Base_SetConfig+0x13c>)
 800fbc4:	4293      	cmp	r3, r2
 800fbc6:	d003      	beq.n	800fbd0 <TIM_Base_SetConfig+0x48>
 800fbc8:	687b      	ldr	r3, [r7, #4]
 800fbca:	4a3f      	ldr	r2, [pc, #252]	; (800fcc8 <TIM_Base_SetConfig+0x140>)
 800fbcc:	4293      	cmp	r3, r2
 800fbce:	d108      	bne.n	800fbe2 <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800fbd0:	68fb      	ldr	r3, [r7, #12]
 800fbd2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800fbd6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800fbd8:	683b      	ldr	r3, [r7, #0]
 800fbda:	685b      	ldr	r3, [r3, #4]
 800fbdc:	68fa      	ldr	r2, [r7, #12]
 800fbde:	4313      	orrs	r3, r2
 800fbe0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800fbe2:	687b      	ldr	r3, [r7, #4]
 800fbe4:	4a33      	ldr	r2, [pc, #204]	; (800fcb4 <TIM_Base_SetConfig+0x12c>)
 800fbe6:	4293      	cmp	r3, r2
 800fbe8:	d023      	beq.n	800fc32 <TIM_Base_SetConfig+0xaa>
 800fbea:	687b      	ldr	r3, [r7, #4]
 800fbec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800fbf0:	d01f      	beq.n	800fc32 <TIM_Base_SetConfig+0xaa>
 800fbf2:	687b      	ldr	r3, [r7, #4]
 800fbf4:	4a30      	ldr	r2, [pc, #192]	; (800fcb8 <TIM_Base_SetConfig+0x130>)
 800fbf6:	4293      	cmp	r3, r2
 800fbf8:	d01b      	beq.n	800fc32 <TIM_Base_SetConfig+0xaa>
 800fbfa:	687b      	ldr	r3, [r7, #4]
 800fbfc:	4a2f      	ldr	r2, [pc, #188]	; (800fcbc <TIM_Base_SetConfig+0x134>)
 800fbfe:	4293      	cmp	r3, r2
 800fc00:	d017      	beq.n	800fc32 <TIM_Base_SetConfig+0xaa>
 800fc02:	687b      	ldr	r3, [r7, #4]
 800fc04:	4a2e      	ldr	r2, [pc, #184]	; (800fcc0 <TIM_Base_SetConfig+0x138>)
 800fc06:	4293      	cmp	r3, r2
 800fc08:	d013      	beq.n	800fc32 <TIM_Base_SetConfig+0xaa>
 800fc0a:	687b      	ldr	r3, [r7, #4]
 800fc0c:	4a2d      	ldr	r2, [pc, #180]	; (800fcc4 <TIM_Base_SetConfig+0x13c>)
 800fc0e:	4293      	cmp	r3, r2
 800fc10:	d00f      	beq.n	800fc32 <TIM_Base_SetConfig+0xaa>
 800fc12:	687b      	ldr	r3, [r7, #4]
 800fc14:	4a2d      	ldr	r2, [pc, #180]	; (800fccc <TIM_Base_SetConfig+0x144>)
 800fc16:	4293      	cmp	r3, r2
 800fc18:	d00b      	beq.n	800fc32 <TIM_Base_SetConfig+0xaa>
 800fc1a:	687b      	ldr	r3, [r7, #4]
 800fc1c:	4a2c      	ldr	r2, [pc, #176]	; (800fcd0 <TIM_Base_SetConfig+0x148>)
 800fc1e:	4293      	cmp	r3, r2
 800fc20:	d007      	beq.n	800fc32 <TIM_Base_SetConfig+0xaa>
 800fc22:	687b      	ldr	r3, [r7, #4]
 800fc24:	4a2b      	ldr	r2, [pc, #172]	; (800fcd4 <TIM_Base_SetConfig+0x14c>)
 800fc26:	4293      	cmp	r3, r2
 800fc28:	d003      	beq.n	800fc32 <TIM_Base_SetConfig+0xaa>
 800fc2a:	687b      	ldr	r3, [r7, #4]
 800fc2c:	4a26      	ldr	r2, [pc, #152]	; (800fcc8 <TIM_Base_SetConfig+0x140>)
 800fc2e:	4293      	cmp	r3, r2
 800fc30:	d108      	bne.n	800fc44 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800fc32:	68fb      	ldr	r3, [r7, #12]
 800fc34:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800fc38:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800fc3a:	683b      	ldr	r3, [r7, #0]
 800fc3c:	68db      	ldr	r3, [r3, #12]
 800fc3e:	68fa      	ldr	r2, [r7, #12]
 800fc40:	4313      	orrs	r3, r2
 800fc42:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800fc44:	68fb      	ldr	r3, [r7, #12]
 800fc46:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800fc4a:	683b      	ldr	r3, [r7, #0]
 800fc4c:	695b      	ldr	r3, [r3, #20]
 800fc4e:	4313      	orrs	r3, r2
 800fc50:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800fc52:	687b      	ldr	r3, [r7, #4]
 800fc54:	68fa      	ldr	r2, [r7, #12]
 800fc56:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800fc58:	683b      	ldr	r3, [r7, #0]
 800fc5a:	689a      	ldr	r2, [r3, #8]
 800fc5c:	687b      	ldr	r3, [r7, #4]
 800fc5e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800fc60:	683b      	ldr	r3, [r7, #0]
 800fc62:	681a      	ldr	r2, [r3, #0]
 800fc64:	687b      	ldr	r3, [r7, #4]
 800fc66:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800fc68:	687b      	ldr	r3, [r7, #4]
 800fc6a:	4a12      	ldr	r2, [pc, #72]	; (800fcb4 <TIM_Base_SetConfig+0x12c>)
 800fc6c:	4293      	cmp	r3, r2
 800fc6e:	d013      	beq.n	800fc98 <TIM_Base_SetConfig+0x110>
 800fc70:	687b      	ldr	r3, [r7, #4]
 800fc72:	4a14      	ldr	r2, [pc, #80]	; (800fcc4 <TIM_Base_SetConfig+0x13c>)
 800fc74:	4293      	cmp	r3, r2
 800fc76:	d00f      	beq.n	800fc98 <TIM_Base_SetConfig+0x110>
 800fc78:	687b      	ldr	r3, [r7, #4]
 800fc7a:	4a14      	ldr	r2, [pc, #80]	; (800fccc <TIM_Base_SetConfig+0x144>)
 800fc7c:	4293      	cmp	r3, r2
 800fc7e:	d00b      	beq.n	800fc98 <TIM_Base_SetConfig+0x110>
 800fc80:	687b      	ldr	r3, [r7, #4]
 800fc82:	4a13      	ldr	r2, [pc, #76]	; (800fcd0 <TIM_Base_SetConfig+0x148>)
 800fc84:	4293      	cmp	r3, r2
 800fc86:	d007      	beq.n	800fc98 <TIM_Base_SetConfig+0x110>
 800fc88:	687b      	ldr	r3, [r7, #4]
 800fc8a:	4a12      	ldr	r2, [pc, #72]	; (800fcd4 <TIM_Base_SetConfig+0x14c>)
 800fc8c:	4293      	cmp	r3, r2
 800fc8e:	d003      	beq.n	800fc98 <TIM_Base_SetConfig+0x110>
 800fc90:	687b      	ldr	r3, [r7, #4]
 800fc92:	4a0d      	ldr	r2, [pc, #52]	; (800fcc8 <TIM_Base_SetConfig+0x140>)
 800fc94:	4293      	cmp	r3, r2
 800fc96:	d103      	bne.n	800fca0 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800fc98:	683b      	ldr	r3, [r7, #0]
 800fc9a:	691a      	ldr	r2, [r3, #16]
 800fc9c:	687b      	ldr	r3, [r7, #4]
 800fc9e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800fca0:	687b      	ldr	r3, [r7, #4]
 800fca2:	2201      	movs	r2, #1
 800fca4:	615a      	str	r2, [r3, #20]
}
 800fca6:	bf00      	nop
 800fca8:	3714      	adds	r7, #20
 800fcaa:	46bd      	mov	sp, r7
 800fcac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fcb0:	4770      	bx	lr
 800fcb2:	bf00      	nop
 800fcb4:	40012c00 	.word	0x40012c00
 800fcb8:	40000400 	.word	0x40000400
 800fcbc:	40000800 	.word	0x40000800
 800fcc0:	40000c00 	.word	0x40000c00
 800fcc4:	40013400 	.word	0x40013400
 800fcc8:	40015000 	.word	0x40015000
 800fccc:	40014000 	.word	0x40014000
 800fcd0:	40014400 	.word	0x40014400
 800fcd4:	40014800 	.word	0x40014800

0800fcd8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800fcd8:	b480      	push	{r7}
 800fcda:	b087      	sub	sp, #28
 800fcdc:	af00      	add	r7, sp, #0
 800fcde:	6078      	str	r0, [r7, #4]
 800fce0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800fce2:	687b      	ldr	r3, [r7, #4]
 800fce4:	6a1b      	ldr	r3, [r3, #32]
 800fce6:	f023 0201 	bic.w	r2, r3, #1
 800fcea:	687b      	ldr	r3, [r7, #4]
 800fcec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800fcee:	687b      	ldr	r3, [r7, #4]
 800fcf0:	6a1b      	ldr	r3, [r3, #32]
 800fcf2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800fcf4:	687b      	ldr	r3, [r7, #4]
 800fcf6:	685b      	ldr	r3, [r3, #4]
 800fcf8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800fcfa:	687b      	ldr	r3, [r7, #4]
 800fcfc:	699b      	ldr	r3, [r3, #24]
 800fcfe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800fd00:	68fb      	ldr	r3, [r7, #12]
 800fd02:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800fd06:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800fd0a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800fd0c:	68fb      	ldr	r3, [r7, #12]
 800fd0e:	f023 0303 	bic.w	r3, r3, #3
 800fd12:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800fd14:	683b      	ldr	r3, [r7, #0]
 800fd16:	681b      	ldr	r3, [r3, #0]
 800fd18:	68fa      	ldr	r2, [r7, #12]
 800fd1a:	4313      	orrs	r3, r2
 800fd1c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800fd1e:	697b      	ldr	r3, [r7, #20]
 800fd20:	f023 0302 	bic.w	r3, r3, #2
 800fd24:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800fd26:	683b      	ldr	r3, [r7, #0]
 800fd28:	689b      	ldr	r3, [r3, #8]
 800fd2a:	697a      	ldr	r2, [r7, #20]
 800fd2c:	4313      	orrs	r3, r2
 800fd2e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800fd30:	687b      	ldr	r3, [r7, #4]
 800fd32:	4a30      	ldr	r2, [pc, #192]	; (800fdf4 <TIM_OC1_SetConfig+0x11c>)
 800fd34:	4293      	cmp	r3, r2
 800fd36:	d013      	beq.n	800fd60 <TIM_OC1_SetConfig+0x88>
 800fd38:	687b      	ldr	r3, [r7, #4]
 800fd3a:	4a2f      	ldr	r2, [pc, #188]	; (800fdf8 <TIM_OC1_SetConfig+0x120>)
 800fd3c:	4293      	cmp	r3, r2
 800fd3e:	d00f      	beq.n	800fd60 <TIM_OC1_SetConfig+0x88>
 800fd40:	687b      	ldr	r3, [r7, #4]
 800fd42:	4a2e      	ldr	r2, [pc, #184]	; (800fdfc <TIM_OC1_SetConfig+0x124>)
 800fd44:	4293      	cmp	r3, r2
 800fd46:	d00b      	beq.n	800fd60 <TIM_OC1_SetConfig+0x88>
 800fd48:	687b      	ldr	r3, [r7, #4]
 800fd4a:	4a2d      	ldr	r2, [pc, #180]	; (800fe00 <TIM_OC1_SetConfig+0x128>)
 800fd4c:	4293      	cmp	r3, r2
 800fd4e:	d007      	beq.n	800fd60 <TIM_OC1_SetConfig+0x88>
 800fd50:	687b      	ldr	r3, [r7, #4]
 800fd52:	4a2c      	ldr	r2, [pc, #176]	; (800fe04 <TIM_OC1_SetConfig+0x12c>)
 800fd54:	4293      	cmp	r3, r2
 800fd56:	d003      	beq.n	800fd60 <TIM_OC1_SetConfig+0x88>
 800fd58:	687b      	ldr	r3, [r7, #4]
 800fd5a:	4a2b      	ldr	r2, [pc, #172]	; (800fe08 <TIM_OC1_SetConfig+0x130>)
 800fd5c:	4293      	cmp	r3, r2
 800fd5e:	d10c      	bne.n	800fd7a <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800fd60:	697b      	ldr	r3, [r7, #20]
 800fd62:	f023 0308 	bic.w	r3, r3, #8
 800fd66:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800fd68:	683b      	ldr	r3, [r7, #0]
 800fd6a:	68db      	ldr	r3, [r3, #12]
 800fd6c:	697a      	ldr	r2, [r7, #20]
 800fd6e:	4313      	orrs	r3, r2
 800fd70:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800fd72:	697b      	ldr	r3, [r7, #20]
 800fd74:	f023 0304 	bic.w	r3, r3, #4
 800fd78:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800fd7a:	687b      	ldr	r3, [r7, #4]
 800fd7c:	4a1d      	ldr	r2, [pc, #116]	; (800fdf4 <TIM_OC1_SetConfig+0x11c>)
 800fd7e:	4293      	cmp	r3, r2
 800fd80:	d013      	beq.n	800fdaa <TIM_OC1_SetConfig+0xd2>
 800fd82:	687b      	ldr	r3, [r7, #4]
 800fd84:	4a1c      	ldr	r2, [pc, #112]	; (800fdf8 <TIM_OC1_SetConfig+0x120>)
 800fd86:	4293      	cmp	r3, r2
 800fd88:	d00f      	beq.n	800fdaa <TIM_OC1_SetConfig+0xd2>
 800fd8a:	687b      	ldr	r3, [r7, #4]
 800fd8c:	4a1b      	ldr	r2, [pc, #108]	; (800fdfc <TIM_OC1_SetConfig+0x124>)
 800fd8e:	4293      	cmp	r3, r2
 800fd90:	d00b      	beq.n	800fdaa <TIM_OC1_SetConfig+0xd2>
 800fd92:	687b      	ldr	r3, [r7, #4]
 800fd94:	4a1a      	ldr	r2, [pc, #104]	; (800fe00 <TIM_OC1_SetConfig+0x128>)
 800fd96:	4293      	cmp	r3, r2
 800fd98:	d007      	beq.n	800fdaa <TIM_OC1_SetConfig+0xd2>
 800fd9a:	687b      	ldr	r3, [r7, #4]
 800fd9c:	4a19      	ldr	r2, [pc, #100]	; (800fe04 <TIM_OC1_SetConfig+0x12c>)
 800fd9e:	4293      	cmp	r3, r2
 800fda0:	d003      	beq.n	800fdaa <TIM_OC1_SetConfig+0xd2>
 800fda2:	687b      	ldr	r3, [r7, #4]
 800fda4:	4a18      	ldr	r2, [pc, #96]	; (800fe08 <TIM_OC1_SetConfig+0x130>)
 800fda6:	4293      	cmp	r3, r2
 800fda8:	d111      	bne.n	800fdce <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800fdaa:	693b      	ldr	r3, [r7, #16]
 800fdac:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800fdb0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800fdb2:	693b      	ldr	r3, [r7, #16]
 800fdb4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800fdb8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800fdba:	683b      	ldr	r3, [r7, #0]
 800fdbc:	695b      	ldr	r3, [r3, #20]
 800fdbe:	693a      	ldr	r2, [r7, #16]
 800fdc0:	4313      	orrs	r3, r2
 800fdc2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800fdc4:	683b      	ldr	r3, [r7, #0]
 800fdc6:	699b      	ldr	r3, [r3, #24]
 800fdc8:	693a      	ldr	r2, [r7, #16]
 800fdca:	4313      	orrs	r3, r2
 800fdcc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800fdce:	687b      	ldr	r3, [r7, #4]
 800fdd0:	693a      	ldr	r2, [r7, #16]
 800fdd2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800fdd4:	687b      	ldr	r3, [r7, #4]
 800fdd6:	68fa      	ldr	r2, [r7, #12]
 800fdd8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800fdda:	683b      	ldr	r3, [r7, #0]
 800fddc:	685a      	ldr	r2, [r3, #4]
 800fdde:	687b      	ldr	r3, [r7, #4]
 800fde0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800fde2:	687b      	ldr	r3, [r7, #4]
 800fde4:	697a      	ldr	r2, [r7, #20]
 800fde6:	621a      	str	r2, [r3, #32]
}
 800fde8:	bf00      	nop
 800fdea:	371c      	adds	r7, #28
 800fdec:	46bd      	mov	sp, r7
 800fdee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fdf2:	4770      	bx	lr
 800fdf4:	40012c00 	.word	0x40012c00
 800fdf8:	40013400 	.word	0x40013400
 800fdfc:	40014000 	.word	0x40014000
 800fe00:	40014400 	.word	0x40014400
 800fe04:	40014800 	.word	0x40014800
 800fe08:	40015000 	.word	0x40015000

0800fe0c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800fe0c:	b480      	push	{r7}
 800fe0e:	b087      	sub	sp, #28
 800fe10:	af00      	add	r7, sp, #0
 800fe12:	6078      	str	r0, [r7, #4]
 800fe14:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800fe16:	687b      	ldr	r3, [r7, #4]
 800fe18:	6a1b      	ldr	r3, [r3, #32]
 800fe1a:	f023 0210 	bic.w	r2, r3, #16
 800fe1e:	687b      	ldr	r3, [r7, #4]
 800fe20:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800fe22:	687b      	ldr	r3, [r7, #4]
 800fe24:	6a1b      	ldr	r3, [r3, #32]
 800fe26:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800fe28:	687b      	ldr	r3, [r7, #4]
 800fe2a:	685b      	ldr	r3, [r3, #4]
 800fe2c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800fe2e:	687b      	ldr	r3, [r7, #4]
 800fe30:	699b      	ldr	r3, [r3, #24]
 800fe32:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800fe34:	68fb      	ldr	r3, [r7, #12]
 800fe36:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800fe3a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800fe3e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800fe40:	68fb      	ldr	r3, [r7, #12]
 800fe42:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800fe46:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800fe48:	683b      	ldr	r3, [r7, #0]
 800fe4a:	681b      	ldr	r3, [r3, #0]
 800fe4c:	021b      	lsls	r3, r3, #8
 800fe4e:	68fa      	ldr	r2, [r7, #12]
 800fe50:	4313      	orrs	r3, r2
 800fe52:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800fe54:	697b      	ldr	r3, [r7, #20]
 800fe56:	f023 0320 	bic.w	r3, r3, #32
 800fe5a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800fe5c:	683b      	ldr	r3, [r7, #0]
 800fe5e:	689b      	ldr	r3, [r3, #8]
 800fe60:	011b      	lsls	r3, r3, #4
 800fe62:	697a      	ldr	r2, [r7, #20]
 800fe64:	4313      	orrs	r3, r2
 800fe66:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800fe68:	687b      	ldr	r3, [r7, #4]
 800fe6a:	4a2c      	ldr	r2, [pc, #176]	; (800ff1c <TIM_OC2_SetConfig+0x110>)
 800fe6c:	4293      	cmp	r3, r2
 800fe6e:	d007      	beq.n	800fe80 <TIM_OC2_SetConfig+0x74>
 800fe70:	687b      	ldr	r3, [r7, #4]
 800fe72:	4a2b      	ldr	r2, [pc, #172]	; (800ff20 <TIM_OC2_SetConfig+0x114>)
 800fe74:	4293      	cmp	r3, r2
 800fe76:	d003      	beq.n	800fe80 <TIM_OC2_SetConfig+0x74>
 800fe78:	687b      	ldr	r3, [r7, #4]
 800fe7a:	4a2a      	ldr	r2, [pc, #168]	; (800ff24 <TIM_OC2_SetConfig+0x118>)
 800fe7c:	4293      	cmp	r3, r2
 800fe7e:	d10d      	bne.n	800fe9c <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800fe80:	697b      	ldr	r3, [r7, #20]
 800fe82:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800fe86:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800fe88:	683b      	ldr	r3, [r7, #0]
 800fe8a:	68db      	ldr	r3, [r3, #12]
 800fe8c:	011b      	lsls	r3, r3, #4
 800fe8e:	697a      	ldr	r2, [r7, #20]
 800fe90:	4313      	orrs	r3, r2
 800fe92:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800fe94:	697b      	ldr	r3, [r7, #20]
 800fe96:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800fe9a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800fe9c:	687b      	ldr	r3, [r7, #4]
 800fe9e:	4a1f      	ldr	r2, [pc, #124]	; (800ff1c <TIM_OC2_SetConfig+0x110>)
 800fea0:	4293      	cmp	r3, r2
 800fea2:	d013      	beq.n	800fecc <TIM_OC2_SetConfig+0xc0>
 800fea4:	687b      	ldr	r3, [r7, #4]
 800fea6:	4a1e      	ldr	r2, [pc, #120]	; (800ff20 <TIM_OC2_SetConfig+0x114>)
 800fea8:	4293      	cmp	r3, r2
 800feaa:	d00f      	beq.n	800fecc <TIM_OC2_SetConfig+0xc0>
 800feac:	687b      	ldr	r3, [r7, #4]
 800feae:	4a1e      	ldr	r2, [pc, #120]	; (800ff28 <TIM_OC2_SetConfig+0x11c>)
 800feb0:	4293      	cmp	r3, r2
 800feb2:	d00b      	beq.n	800fecc <TIM_OC2_SetConfig+0xc0>
 800feb4:	687b      	ldr	r3, [r7, #4]
 800feb6:	4a1d      	ldr	r2, [pc, #116]	; (800ff2c <TIM_OC2_SetConfig+0x120>)
 800feb8:	4293      	cmp	r3, r2
 800feba:	d007      	beq.n	800fecc <TIM_OC2_SetConfig+0xc0>
 800febc:	687b      	ldr	r3, [r7, #4]
 800febe:	4a1c      	ldr	r2, [pc, #112]	; (800ff30 <TIM_OC2_SetConfig+0x124>)
 800fec0:	4293      	cmp	r3, r2
 800fec2:	d003      	beq.n	800fecc <TIM_OC2_SetConfig+0xc0>
 800fec4:	687b      	ldr	r3, [r7, #4]
 800fec6:	4a17      	ldr	r2, [pc, #92]	; (800ff24 <TIM_OC2_SetConfig+0x118>)
 800fec8:	4293      	cmp	r3, r2
 800feca:	d113      	bne.n	800fef4 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800fecc:	693b      	ldr	r3, [r7, #16]
 800fece:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800fed2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800fed4:	693b      	ldr	r3, [r7, #16]
 800fed6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800feda:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800fedc:	683b      	ldr	r3, [r7, #0]
 800fede:	695b      	ldr	r3, [r3, #20]
 800fee0:	009b      	lsls	r3, r3, #2
 800fee2:	693a      	ldr	r2, [r7, #16]
 800fee4:	4313      	orrs	r3, r2
 800fee6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800fee8:	683b      	ldr	r3, [r7, #0]
 800feea:	699b      	ldr	r3, [r3, #24]
 800feec:	009b      	lsls	r3, r3, #2
 800feee:	693a      	ldr	r2, [r7, #16]
 800fef0:	4313      	orrs	r3, r2
 800fef2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800fef4:	687b      	ldr	r3, [r7, #4]
 800fef6:	693a      	ldr	r2, [r7, #16]
 800fef8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800fefa:	687b      	ldr	r3, [r7, #4]
 800fefc:	68fa      	ldr	r2, [r7, #12]
 800fefe:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800ff00:	683b      	ldr	r3, [r7, #0]
 800ff02:	685a      	ldr	r2, [r3, #4]
 800ff04:	687b      	ldr	r3, [r7, #4]
 800ff06:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ff08:	687b      	ldr	r3, [r7, #4]
 800ff0a:	697a      	ldr	r2, [r7, #20]
 800ff0c:	621a      	str	r2, [r3, #32]
}
 800ff0e:	bf00      	nop
 800ff10:	371c      	adds	r7, #28
 800ff12:	46bd      	mov	sp, r7
 800ff14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff18:	4770      	bx	lr
 800ff1a:	bf00      	nop
 800ff1c:	40012c00 	.word	0x40012c00
 800ff20:	40013400 	.word	0x40013400
 800ff24:	40015000 	.word	0x40015000
 800ff28:	40014000 	.word	0x40014000
 800ff2c:	40014400 	.word	0x40014400
 800ff30:	40014800 	.word	0x40014800

0800ff34 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800ff34:	b480      	push	{r7}
 800ff36:	b087      	sub	sp, #28
 800ff38:	af00      	add	r7, sp, #0
 800ff3a:	6078      	str	r0, [r7, #4]
 800ff3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800ff3e:	687b      	ldr	r3, [r7, #4]
 800ff40:	6a1b      	ldr	r3, [r3, #32]
 800ff42:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800ff46:	687b      	ldr	r3, [r7, #4]
 800ff48:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ff4a:	687b      	ldr	r3, [r7, #4]
 800ff4c:	6a1b      	ldr	r3, [r3, #32]
 800ff4e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ff50:	687b      	ldr	r3, [r7, #4]
 800ff52:	685b      	ldr	r3, [r3, #4]
 800ff54:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800ff56:	687b      	ldr	r3, [r7, #4]
 800ff58:	69db      	ldr	r3, [r3, #28]
 800ff5a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800ff5c:	68fb      	ldr	r3, [r7, #12]
 800ff5e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800ff62:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ff66:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800ff68:	68fb      	ldr	r3, [r7, #12]
 800ff6a:	f023 0303 	bic.w	r3, r3, #3
 800ff6e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800ff70:	683b      	ldr	r3, [r7, #0]
 800ff72:	681b      	ldr	r3, [r3, #0]
 800ff74:	68fa      	ldr	r2, [r7, #12]
 800ff76:	4313      	orrs	r3, r2
 800ff78:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800ff7a:	697b      	ldr	r3, [r7, #20]
 800ff7c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800ff80:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800ff82:	683b      	ldr	r3, [r7, #0]
 800ff84:	689b      	ldr	r3, [r3, #8]
 800ff86:	021b      	lsls	r3, r3, #8
 800ff88:	697a      	ldr	r2, [r7, #20]
 800ff8a:	4313      	orrs	r3, r2
 800ff8c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800ff8e:	687b      	ldr	r3, [r7, #4]
 800ff90:	4a2b      	ldr	r2, [pc, #172]	; (8010040 <TIM_OC3_SetConfig+0x10c>)
 800ff92:	4293      	cmp	r3, r2
 800ff94:	d007      	beq.n	800ffa6 <TIM_OC3_SetConfig+0x72>
 800ff96:	687b      	ldr	r3, [r7, #4]
 800ff98:	4a2a      	ldr	r2, [pc, #168]	; (8010044 <TIM_OC3_SetConfig+0x110>)
 800ff9a:	4293      	cmp	r3, r2
 800ff9c:	d003      	beq.n	800ffa6 <TIM_OC3_SetConfig+0x72>
 800ff9e:	687b      	ldr	r3, [r7, #4]
 800ffa0:	4a29      	ldr	r2, [pc, #164]	; (8010048 <TIM_OC3_SetConfig+0x114>)
 800ffa2:	4293      	cmp	r3, r2
 800ffa4:	d10d      	bne.n	800ffc2 <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800ffa6:	697b      	ldr	r3, [r7, #20]
 800ffa8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800ffac:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800ffae:	683b      	ldr	r3, [r7, #0]
 800ffb0:	68db      	ldr	r3, [r3, #12]
 800ffb2:	021b      	lsls	r3, r3, #8
 800ffb4:	697a      	ldr	r2, [r7, #20]
 800ffb6:	4313      	orrs	r3, r2
 800ffb8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800ffba:	697b      	ldr	r3, [r7, #20]
 800ffbc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800ffc0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ffc2:	687b      	ldr	r3, [r7, #4]
 800ffc4:	4a1e      	ldr	r2, [pc, #120]	; (8010040 <TIM_OC3_SetConfig+0x10c>)
 800ffc6:	4293      	cmp	r3, r2
 800ffc8:	d013      	beq.n	800fff2 <TIM_OC3_SetConfig+0xbe>
 800ffca:	687b      	ldr	r3, [r7, #4]
 800ffcc:	4a1d      	ldr	r2, [pc, #116]	; (8010044 <TIM_OC3_SetConfig+0x110>)
 800ffce:	4293      	cmp	r3, r2
 800ffd0:	d00f      	beq.n	800fff2 <TIM_OC3_SetConfig+0xbe>
 800ffd2:	687b      	ldr	r3, [r7, #4]
 800ffd4:	4a1d      	ldr	r2, [pc, #116]	; (801004c <TIM_OC3_SetConfig+0x118>)
 800ffd6:	4293      	cmp	r3, r2
 800ffd8:	d00b      	beq.n	800fff2 <TIM_OC3_SetConfig+0xbe>
 800ffda:	687b      	ldr	r3, [r7, #4]
 800ffdc:	4a1c      	ldr	r2, [pc, #112]	; (8010050 <TIM_OC3_SetConfig+0x11c>)
 800ffde:	4293      	cmp	r3, r2
 800ffe0:	d007      	beq.n	800fff2 <TIM_OC3_SetConfig+0xbe>
 800ffe2:	687b      	ldr	r3, [r7, #4]
 800ffe4:	4a1b      	ldr	r2, [pc, #108]	; (8010054 <TIM_OC3_SetConfig+0x120>)
 800ffe6:	4293      	cmp	r3, r2
 800ffe8:	d003      	beq.n	800fff2 <TIM_OC3_SetConfig+0xbe>
 800ffea:	687b      	ldr	r3, [r7, #4]
 800ffec:	4a16      	ldr	r2, [pc, #88]	; (8010048 <TIM_OC3_SetConfig+0x114>)
 800ffee:	4293      	cmp	r3, r2
 800fff0:	d113      	bne.n	801001a <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800fff2:	693b      	ldr	r3, [r7, #16]
 800fff4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800fff8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800fffa:	693b      	ldr	r3, [r7, #16]
 800fffc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8010000:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8010002:	683b      	ldr	r3, [r7, #0]
 8010004:	695b      	ldr	r3, [r3, #20]
 8010006:	011b      	lsls	r3, r3, #4
 8010008:	693a      	ldr	r2, [r7, #16]
 801000a:	4313      	orrs	r3, r2
 801000c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 801000e:	683b      	ldr	r3, [r7, #0]
 8010010:	699b      	ldr	r3, [r3, #24]
 8010012:	011b      	lsls	r3, r3, #4
 8010014:	693a      	ldr	r2, [r7, #16]
 8010016:	4313      	orrs	r3, r2
 8010018:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801001a:	687b      	ldr	r3, [r7, #4]
 801001c:	693a      	ldr	r2, [r7, #16]
 801001e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8010020:	687b      	ldr	r3, [r7, #4]
 8010022:	68fa      	ldr	r2, [r7, #12]
 8010024:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8010026:	683b      	ldr	r3, [r7, #0]
 8010028:	685a      	ldr	r2, [r3, #4]
 801002a:	687b      	ldr	r3, [r7, #4]
 801002c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801002e:	687b      	ldr	r3, [r7, #4]
 8010030:	697a      	ldr	r2, [r7, #20]
 8010032:	621a      	str	r2, [r3, #32]
}
 8010034:	bf00      	nop
 8010036:	371c      	adds	r7, #28
 8010038:	46bd      	mov	sp, r7
 801003a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801003e:	4770      	bx	lr
 8010040:	40012c00 	.word	0x40012c00
 8010044:	40013400 	.word	0x40013400
 8010048:	40015000 	.word	0x40015000
 801004c:	40014000 	.word	0x40014000
 8010050:	40014400 	.word	0x40014400
 8010054:	40014800 	.word	0x40014800

08010058 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8010058:	b480      	push	{r7}
 801005a:	b087      	sub	sp, #28
 801005c:	af00      	add	r7, sp, #0
 801005e:	6078      	str	r0, [r7, #4]
 8010060:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8010062:	687b      	ldr	r3, [r7, #4]
 8010064:	6a1b      	ldr	r3, [r3, #32]
 8010066:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 801006a:	687b      	ldr	r3, [r7, #4]
 801006c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801006e:	687b      	ldr	r3, [r7, #4]
 8010070:	6a1b      	ldr	r3, [r3, #32]
 8010072:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8010074:	687b      	ldr	r3, [r7, #4]
 8010076:	685b      	ldr	r3, [r3, #4]
 8010078:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 801007a:	687b      	ldr	r3, [r7, #4]
 801007c:	69db      	ldr	r3, [r3, #28]
 801007e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8010080:	68fb      	ldr	r3, [r7, #12]
 8010082:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8010086:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 801008a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 801008c:	68fb      	ldr	r3, [r7, #12]
 801008e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8010092:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8010094:	683b      	ldr	r3, [r7, #0]
 8010096:	681b      	ldr	r3, [r3, #0]
 8010098:	021b      	lsls	r3, r3, #8
 801009a:	68fa      	ldr	r2, [r7, #12]
 801009c:	4313      	orrs	r3, r2
 801009e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80100a0:	697b      	ldr	r3, [r7, #20]
 80100a2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80100a6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80100a8:	683b      	ldr	r3, [r7, #0]
 80100aa:	689b      	ldr	r3, [r3, #8]
 80100ac:	031b      	lsls	r3, r3, #12
 80100ae:	697a      	ldr	r2, [r7, #20]
 80100b0:	4313      	orrs	r3, r2
 80100b2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 80100b4:	687b      	ldr	r3, [r7, #4]
 80100b6:	4a2c      	ldr	r2, [pc, #176]	; (8010168 <TIM_OC4_SetConfig+0x110>)
 80100b8:	4293      	cmp	r3, r2
 80100ba:	d007      	beq.n	80100cc <TIM_OC4_SetConfig+0x74>
 80100bc:	687b      	ldr	r3, [r7, #4]
 80100be:	4a2b      	ldr	r2, [pc, #172]	; (801016c <TIM_OC4_SetConfig+0x114>)
 80100c0:	4293      	cmp	r3, r2
 80100c2:	d003      	beq.n	80100cc <TIM_OC4_SetConfig+0x74>
 80100c4:	687b      	ldr	r3, [r7, #4]
 80100c6:	4a2a      	ldr	r2, [pc, #168]	; (8010170 <TIM_OC4_SetConfig+0x118>)
 80100c8:	4293      	cmp	r3, r2
 80100ca:	d10d      	bne.n	80100e8 <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 80100cc:	697b      	ldr	r3, [r7, #20]
 80100ce:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80100d2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 80100d4:	683b      	ldr	r3, [r7, #0]
 80100d6:	68db      	ldr	r3, [r3, #12]
 80100d8:	031b      	lsls	r3, r3, #12
 80100da:	697a      	ldr	r2, [r7, #20]
 80100dc:	4313      	orrs	r3, r2
 80100de:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 80100e0:	697b      	ldr	r3, [r7, #20]
 80100e2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80100e6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80100e8:	687b      	ldr	r3, [r7, #4]
 80100ea:	4a1f      	ldr	r2, [pc, #124]	; (8010168 <TIM_OC4_SetConfig+0x110>)
 80100ec:	4293      	cmp	r3, r2
 80100ee:	d013      	beq.n	8010118 <TIM_OC4_SetConfig+0xc0>
 80100f0:	687b      	ldr	r3, [r7, #4]
 80100f2:	4a1e      	ldr	r2, [pc, #120]	; (801016c <TIM_OC4_SetConfig+0x114>)
 80100f4:	4293      	cmp	r3, r2
 80100f6:	d00f      	beq.n	8010118 <TIM_OC4_SetConfig+0xc0>
 80100f8:	687b      	ldr	r3, [r7, #4]
 80100fa:	4a1e      	ldr	r2, [pc, #120]	; (8010174 <TIM_OC4_SetConfig+0x11c>)
 80100fc:	4293      	cmp	r3, r2
 80100fe:	d00b      	beq.n	8010118 <TIM_OC4_SetConfig+0xc0>
 8010100:	687b      	ldr	r3, [r7, #4]
 8010102:	4a1d      	ldr	r2, [pc, #116]	; (8010178 <TIM_OC4_SetConfig+0x120>)
 8010104:	4293      	cmp	r3, r2
 8010106:	d007      	beq.n	8010118 <TIM_OC4_SetConfig+0xc0>
 8010108:	687b      	ldr	r3, [r7, #4]
 801010a:	4a1c      	ldr	r2, [pc, #112]	; (801017c <TIM_OC4_SetConfig+0x124>)
 801010c:	4293      	cmp	r3, r2
 801010e:	d003      	beq.n	8010118 <TIM_OC4_SetConfig+0xc0>
 8010110:	687b      	ldr	r3, [r7, #4]
 8010112:	4a17      	ldr	r2, [pc, #92]	; (8010170 <TIM_OC4_SetConfig+0x118>)
 8010114:	4293      	cmp	r3, r2
 8010116:	d113      	bne.n	8010140 <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8010118:	693b      	ldr	r3, [r7, #16]
 801011a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 801011e:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8010120:	693b      	ldr	r3, [r7, #16]
 8010122:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8010126:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8010128:	683b      	ldr	r3, [r7, #0]
 801012a:	695b      	ldr	r3, [r3, #20]
 801012c:	019b      	lsls	r3, r3, #6
 801012e:	693a      	ldr	r2, [r7, #16]
 8010130:	4313      	orrs	r3, r2
 8010132:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8010134:	683b      	ldr	r3, [r7, #0]
 8010136:	699b      	ldr	r3, [r3, #24]
 8010138:	019b      	lsls	r3, r3, #6
 801013a:	693a      	ldr	r2, [r7, #16]
 801013c:	4313      	orrs	r3, r2
 801013e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8010140:	687b      	ldr	r3, [r7, #4]
 8010142:	693a      	ldr	r2, [r7, #16]
 8010144:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8010146:	687b      	ldr	r3, [r7, #4]
 8010148:	68fa      	ldr	r2, [r7, #12]
 801014a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 801014c:	683b      	ldr	r3, [r7, #0]
 801014e:	685a      	ldr	r2, [r3, #4]
 8010150:	687b      	ldr	r3, [r7, #4]
 8010152:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8010154:	687b      	ldr	r3, [r7, #4]
 8010156:	697a      	ldr	r2, [r7, #20]
 8010158:	621a      	str	r2, [r3, #32]
}
 801015a:	bf00      	nop
 801015c:	371c      	adds	r7, #28
 801015e:	46bd      	mov	sp, r7
 8010160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010164:	4770      	bx	lr
 8010166:	bf00      	nop
 8010168:	40012c00 	.word	0x40012c00
 801016c:	40013400 	.word	0x40013400
 8010170:	40015000 	.word	0x40015000
 8010174:	40014000 	.word	0x40014000
 8010178:	40014400 	.word	0x40014400
 801017c:	40014800 	.word	0x40014800

08010180 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8010180:	b480      	push	{r7}
 8010182:	b087      	sub	sp, #28
 8010184:	af00      	add	r7, sp, #0
 8010186:	6078      	str	r0, [r7, #4]
 8010188:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 801018a:	687b      	ldr	r3, [r7, #4]
 801018c:	6a1b      	ldr	r3, [r3, #32]
 801018e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8010192:	687b      	ldr	r3, [r7, #4]
 8010194:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8010196:	687b      	ldr	r3, [r7, #4]
 8010198:	6a1b      	ldr	r3, [r3, #32]
 801019a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801019c:	687b      	ldr	r3, [r7, #4]
 801019e:	685b      	ldr	r3, [r3, #4]
 80101a0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80101a2:	687b      	ldr	r3, [r7, #4]
 80101a4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80101a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80101a8:	68fb      	ldr	r3, [r7, #12]
 80101aa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80101ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80101b2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80101b4:	683b      	ldr	r3, [r7, #0]
 80101b6:	681b      	ldr	r3, [r3, #0]
 80101b8:	68fa      	ldr	r2, [r7, #12]
 80101ba:	4313      	orrs	r3, r2
 80101bc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80101be:	693b      	ldr	r3, [r7, #16]
 80101c0:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80101c4:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80101c6:	683b      	ldr	r3, [r7, #0]
 80101c8:	689b      	ldr	r3, [r3, #8]
 80101ca:	041b      	lsls	r3, r3, #16
 80101cc:	693a      	ldr	r2, [r7, #16]
 80101ce:	4313      	orrs	r3, r2
 80101d0:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80101d2:	687b      	ldr	r3, [r7, #4]
 80101d4:	4a19      	ldr	r2, [pc, #100]	; (801023c <TIM_OC5_SetConfig+0xbc>)
 80101d6:	4293      	cmp	r3, r2
 80101d8:	d013      	beq.n	8010202 <TIM_OC5_SetConfig+0x82>
 80101da:	687b      	ldr	r3, [r7, #4]
 80101dc:	4a18      	ldr	r2, [pc, #96]	; (8010240 <TIM_OC5_SetConfig+0xc0>)
 80101de:	4293      	cmp	r3, r2
 80101e0:	d00f      	beq.n	8010202 <TIM_OC5_SetConfig+0x82>
 80101e2:	687b      	ldr	r3, [r7, #4]
 80101e4:	4a17      	ldr	r2, [pc, #92]	; (8010244 <TIM_OC5_SetConfig+0xc4>)
 80101e6:	4293      	cmp	r3, r2
 80101e8:	d00b      	beq.n	8010202 <TIM_OC5_SetConfig+0x82>
 80101ea:	687b      	ldr	r3, [r7, #4]
 80101ec:	4a16      	ldr	r2, [pc, #88]	; (8010248 <TIM_OC5_SetConfig+0xc8>)
 80101ee:	4293      	cmp	r3, r2
 80101f0:	d007      	beq.n	8010202 <TIM_OC5_SetConfig+0x82>
 80101f2:	687b      	ldr	r3, [r7, #4]
 80101f4:	4a15      	ldr	r2, [pc, #84]	; (801024c <TIM_OC5_SetConfig+0xcc>)
 80101f6:	4293      	cmp	r3, r2
 80101f8:	d003      	beq.n	8010202 <TIM_OC5_SetConfig+0x82>
 80101fa:	687b      	ldr	r3, [r7, #4]
 80101fc:	4a14      	ldr	r2, [pc, #80]	; (8010250 <TIM_OC5_SetConfig+0xd0>)
 80101fe:	4293      	cmp	r3, r2
 8010200:	d109      	bne.n	8010216 <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8010202:	697b      	ldr	r3, [r7, #20]
 8010204:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8010208:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 801020a:	683b      	ldr	r3, [r7, #0]
 801020c:	695b      	ldr	r3, [r3, #20]
 801020e:	021b      	lsls	r3, r3, #8
 8010210:	697a      	ldr	r2, [r7, #20]
 8010212:	4313      	orrs	r3, r2
 8010214:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8010216:	687b      	ldr	r3, [r7, #4]
 8010218:	697a      	ldr	r2, [r7, #20]
 801021a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 801021c:	687b      	ldr	r3, [r7, #4]
 801021e:	68fa      	ldr	r2, [r7, #12]
 8010220:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8010222:	683b      	ldr	r3, [r7, #0]
 8010224:	685a      	ldr	r2, [r3, #4]
 8010226:	687b      	ldr	r3, [r7, #4]
 8010228:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801022a:	687b      	ldr	r3, [r7, #4]
 801022c:	693a      	ldr	r2, [r7, #16]
 801022e:	621a      	str	r2, [r3, #32]
}
 8010230:	bf00      	nop
 8010232:	371c      	adds	r7, #28
 8010234:	46bd      	mov	sp, r7
 8010236:	f85d 7b04 	ldr.w	r7, [sp], #4
 801023a:	4770      	bx	lr
 801023c:	40012c00 	.word	0x40012c00
 8010240:	40013400 	.word	0x40013400
 8010244:	40014000 	.word	0x40014000
 8010248:	40014400 	.word	0x40014400
 801024c:	40014800 	.word	0x40014800
 8010250:	40015000 	.word	0x40015000

08010254 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8010254:	b480      	push	{r7}
 8010256:	b087      	sub	sp, #28
 8010258:	af00      	add	r7, sp, #0
 801025a:	6078      	str	r0, [r7, #4]
 801025c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 801025e:	687b      	ldr	r3, [r7, #4]
 8010260:	6a1b      	ldr	r3, [r3, #32]
 8010262:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8010266:	687b      	ldr	r3, [r7, #4]
 8010268:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801026a:	687b      	ldr	r3, [r7, #4]
 801026c:	6a1b      	ldr	r3, [r3, #32]
 801026e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8010270:	687b      	ldr	r3, [r7, #4]
 8010272:	685b      	ldr	r3, [r3, #4]
 8010274:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8010276:	687b      	ldr	r3, [r7, #4]
 8010278:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801027a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 801027c:	68fb      	ldr	r3, [r7, #12]
 801027e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8010282:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8010286:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8010288:	683b      	ldr	r3, [r7, #0]
 801028a:	681b      	ldr	r3, [r3, #0]
 801028c:	021b      	lsls	r3, r3, #8
 801028e:	68fa      	ldr	r2, [r7, #12]
 8010290:	4313      	orrs	r3, r2
 8010292:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8010294:	693b      	ldr	r3, [r7, #16]
 8010296:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 801029a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 801029c:	683b      	ldr	r3, [r7, #0]
 801029e:	689b      	ldr	r3, [r3, #8]
 80102a0:	051b      	lsls	r3, r3, #20
 80102a2:	693a      	ldr	r2, [r7, #16]
 80102a4:	4313      	orrs	r3, r2
 80102a6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80102a8:	687b      	ldr	r3, [r7, #4]
 80102aa:	4a1a      	ldr	r2, [pc, #104]	; (8010314 <TIM_OC6_SetConfig+0xc0>)
 80102ac:	4293      	cmp	r3, r2
 80102ae:	d013      	beq.n	80102d8 <TIM_OC6_SetConfig+0x84>
 80102b0:	687b      	ldr	r3, [r7, #4]
 80102b2:	4a19      	ldr	r2, [pc, #100]	; (8010318 <TIM_OC6_SetConfig+0xc4>)
 80102b4:	4293      	cmp	r3, r2
 80102b6:	d00f      	beq.n	80102d8 <TIM_OC6_SetConfig+0x84>
 80102b8:	687b      	ldr	r3, [r7, #4]
 80102ba:	4a18      	ldr	r2, [pc, #96]	; (801031c <TIM_OC6_SetConfig+0xc8>)
 80102bc:	4293      	cmp	r3, r2
 80102be:	d00b      	beq.n	80102d8 <TIM_OC6_SetConfig+0x84>
 80102c0:	687b      	ldr	r3, [r7, #4]
 80102c2:	4a17      	ldr	r2, [pc, #92]	; (8010320 <TIM_OC6_SetConfig+0xcc>)
 80102c4:	4293      	cmp	r3, r2
 80102c6:	d007      	beq.n	80102d8 <TIM_OC6_SetConfig+0x84>
 80102c8:	687b      	ldr	r3, [r7, #4]
 80102ca:	4a16      	ldr	r2, [pc, #88]	; (8010324 <TIM_OC6_SetConfig+0xd0>)
 80102cc:	4293      	cmp	r3, r2
 80102ce:	d003      	beq.n	80102d8 <TIM_OC6_SetConfig+0x84>
 80102d0:	687b      	ldr	r3, [r7, #4]
 80102d2:	4a15      	ldr	r2, [pc, #84]	; (8010328 <TIM_OC6_SetConfig+0xd4>)
 80102d4:	4293      	cmp	r3, r2
 80102d6:	d109      	bne.n	80102ec <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80102d8:	697b      	ldr	r3, [r7, #20]
 80102da:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80102de:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80102e0:	683b      	ldr	r3, [r7, #0]
 80102e2:	695b      	ldr	r3, [r3, #20]
 80102e4:	029b      	lsls	r3, r3, #10
 80102e6:	697a      	ldr	r2, [r7, #20]
 80102e8:	4313      	orrs	r3, r2
 80102ea:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80102ec:	687b      	ldr	r3, [r7, #4]
 80102ee:	697a      	ldr	r2, [r7, #20]
 80102f0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80102f2:	687b      	ldr	r3, [r7, #4]
 80102f4:	68fa      	ldr	r2, [r7, #12]
 80102f6:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80102f8:	683b      	ldr	r3, [r7, #0]
 80102fa:	685a      	ldr	r2, [r3, #4]
 80102fc:	687b      	ldr	r3, [r7, #4]
 80102fe:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8010300:	687b      	ldr	r3, [r7, #4]
 8010302:	693a      	ldr	r2, [r7, #16]
 8010304:	621a      	str	r2, [r3, #32]
}
 8010306:	bf00      	nop
 8010308:	371c      	adds	r7, #28
 801030a:	46bd      	mov	sp, r7
 801030c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010310:	4770      	bx	lr
 8010312:	bf00      	nop
 8010314:	40012c00 	.word	0x40012c00
 8010318:	40013400 	.word	0x40013400
 801031c:	40014000 	.word	0x40014000
 8010320:	40014400 	.word	0x40014400
 8010324:	40014800 	.word	0x40014800
 8010328:	40015000 	.word	0x40015000

0801032c <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 801032c:	b580      	push	{r7, lr}
 801032e:	b086      	sub	sp, #24
 8010330:	af00      	add	r7, sp, #0
 8010332:	6078      	str	r0, [r7, #4]
 8010334:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8010336:	2300      	movs	r3, #0
 8010338:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 801033a:	687b      	ldr	r3, [r7, #4]
 801033c:	681b      	ldr	r3, [r3, #0]
 801033e:	689b      	ldr	r3, [r3, #8]
 8010340:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8010342:	693b      	ldr	r3, [r7, #16]
 8010344:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8010348:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801034c:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 801034e:	683b      	ldr	r3, [r7, #0]
 8010350:	685b      	ldr	r3, [r3, #4]
 8010352:	693a      	ldr	r2, [r7, #16]
 8010354:	4313      	orrs	r3, r2
 8010356:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8010358:	693b      	ldr	r3, [r7, #16]
 801035a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 801035e:	f023 0307 	bic.w	r3, r3, #7
 8010362:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8010364:	683b      	ldr	r3, [r7, #0]
 8010366:	681b      	ldr	r3, [r3, #0]
 8010368:	693a      	ldr	r2, [r7, #16]
 801036a:	4313      	orrs	r3, r2
 801036c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 801036e:	687b      	ldr	r3, [r7, #4]
 8010370:	681b      	ldr	r3, [r3, #0]
 8010372:	693a      	ldr	r2, [r7, #16]
 8010374:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8010376:	683b      	ldr	r3, [r7, #0]
 8010378:	685b      	ldr	r3, [r3, #4]
 801037a:	4a52      	ldr	r2, [pc, #328]	; (80104c4 <TIM_SlaveTimer_SetConfig+0x198>)
 801037c:	4293      	cmp	r3, r2
 801037e:	f000 809a 	beq.w	80104b6 <TIM_SlaveTimer_SetConfig+0x18a>
 8010382:	4a50      	ldr	r2, [pc, #320]	; (80104c4 <TIM_SlaveTimer_SetConfig+0x198>)
 8010384:	4293      	cmp	r3, r2
 8010386:	f200 8093 	bhi.w	80104b0 <TIM_SlaveTimer_SetConfig+0x184>
 801038a:	4a4f      	ldr	r2, [pc, #316]	; (80104c8 <TIM_SlaveTimer_SetConfig+0x19c>)
 801038c:	4293      	cmp	r3, r2
 801038e:	f000 8092 	beq.w	80104b6 <TIM_SlaveTimer_SetConfig+0x18a>
 8010392:	4a4d      	ldr	r2, [pc, #308]	; (80104c8 <TIM_SlaveTimer_SetConfig+0x19c>)
 8010394:	4293      	cmp	r3, r2
 8010396:	f200 808b 	bhi.w	80104b0 <TIM_SlaveTimer_SetConfig+0x184>
 801039a:	4a4c      	ldr	r2, [pc, #304]	; (80104cc <TIM_SlaveTimer_SetConfig+0x1a0>)
 801039c:	4293      	cmp	r3, r2
 801039e:	f000 808a 	beq.w	80104b6 <TIM_SlaveTimer_SetConfig+0x18a>
 80103a2:	4a4a      	ldr	r2, [pc, #296]	; (80104cc <TIM_SlaveTimer_SetConfig+0x1a0>)
 80103a4:	4293      	cmp	r3, r2
 80103a6:	f200 8083 	bhi.w	80104b0 <TIM_SlaveTimer_SetConfig+0x184>
 80103aa:	4a49      	ldr	r2, [pc, #292]	; (80104d0 <TIM_SlaveTimer_SetConfig+0x1a4>)
 80103ac:	4293      	cmp	r3, r2
 80103ae:	f000 8082 	beq.w	80104b6 <TIM_SlaveTimer_SetConfig+0x18a>
 80103b2:	4a47      	ldr	r2, [pc, #284]	; (80104d0 <TIM_SlaveTimer_SetConfig+0x1a4>)
 80103b4:	4293      	cmp	r3, r2
 80103b6:	d87b      	bhi.n	80104b0 <TIM_SlaveTimer_SetConfig+0x184>
 80103b8:	4a46      	ldr	r2, [pc, #280]	; (80104d4 <TIM_SlaveTimer_SetConfig+0x1a8>)
 80103ba:	4293      	cmp	r3, r2
 80103bc:	d07b      	beq.n	80104b6 <TIM_SlaveTimer_SetConfig+0x18a>
 80103be:	4a45      	ldr	r2, [pc, #276]	; (80104d4 <TIM_SlaveTimer_SetConfig+0x1a8>)
 80103c0:	4293      	cmp	r3, r2
 80103c2:	d875      	bhi.n	80104b0 <TIM_SlaveTimer_SetConfig+0x184>
 80103c4:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 80103c8:	d075      	beq.n	80104b6 <TIM_SlaveTimer_SetConfig+0x18a>
 80103ca:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 80103ce:	d86f      	bhi.n	80104b0 <TIM_SlaveTimer_SetConfig+0x184>
 80103d0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80103d4:	d06f      	beq.n	80104b6 <TIM_SlaveTimer_SetConfig+0x18a>
 80103d6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80103da:	d869      	bhi.n	80104b0 <TIM_SlaveTimer_SetConfig+0x184>
 80103dc:	2b70      	cmp	r3, #112	; 0x70
 80103de:	d01a      	beq.n	8010416 <TIM_SlaveTimer_SetConfig+0xea>
 80103e0:	2b70      	cmp	r3, #112	; 0x70
 80103e2:	d865      	bhi.n	80104b0 <TIM_SlaveTimer_SetConfig+0x184>
 80103e4:	2b60      	cmp	r3, #96	; 0x60
 80103e6:	d059      	beq.n	801049c <TIM_SlaveTimer_SetConfig+0x170>
 80103e8:	2b60      	cmp	r3, #96	; 0x60
 80103ea:	d861      	bhi.n	80104b0 <TIM_SlaveTimer_SetConfig+0x184>
 80103ec:	2b50      	cmp	r3, #80	; 0x50
 80103ee:	d04b      	beq.n	8010488 <TIM_SlaveTimer_SetConfig+0x15c>
 80103f0:	2b50      	cmp	r3, #80	; 0x50
 80103f2:	d85d      	bhi.n	80104b0 <TIM_SlaveTimer_SetConfig+0x184>
 80103f4:	2b40      	cmp	r3, #64	; 0x40
 80103f6:	d019      	beq.n	801042c <TIM_SlaveTimer_SetConfig+0x100>
 80103f8:	2b40      	cmp	r3, #64	; 0x40
 80103fa:	d859      	bhi.n	80104b0 <TIM_SlaveTimer_SetConfig+0x184>
 80103fc:	2b30      	cmp	r3, #48	; 0x30
 80103fe:	d05a      	beq.n	80104b6 <TIM_SlaveTimer_SetConfig+0x18a>
 8010400:	2b30      	cmp	r3, #48	; 0x30
 8010402:	d855      	bhi.n	80104b0 <TIM_SlaveTimer_SetConfig+0x184>
 8010404:	2b20      	cmp	r3, #32
 8010406:	d056      	beq.n	80104b6 <TIM_SlaveTimer_SetConfig+0x18a>
 8010408:	2b20      	cmp	r3, #32
 801040a:	d851      	bhi.n	80104b0 <TIM_SlaveTimer_SetConfig+0x184>
 801040c:	2b00      	cmp	r3, #0
 801040e:	d052      	beq.n	80104b6 <TIM_SlaveTimer_SetConfig+0x18a>
 8010410:	2b10      	cmp	r3, #16
 8010412:	d050      	beq.n	80104b6 <TIM_SlaveTimer_SetConfig+0x18a>
 8010414:	e04c      	b.n	80104b0 <TIM_SlaveTimer_SetConfig+0x184>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 8010416:	687b      	ldr	r3, [r7, #4]
 8010418:	6818      	ldr	r0, [r3, #0]
 801041a:	683b      	ldr	r3, [r7, #0]
 801041c:	68d9      	ldr	r1, [r3, #12]
 801041e:	683b      	ldr	r3, [r7, #0]
 8010420:	689a      	ldr	r2, [r3, #8]
 8010422:	683b      	ldr	r3, [r7, #0]
 8010424:	691b      	ldr	r3, [r3, #16]
 8010426:	f000 f8d3 	bl	80105d0 <TIM_ETR_SetConfig>
                        sSlaveConfig->TriggerPrescaler,
                        sSlaveConfig->TriggerPolarity,
                        sSlaveConfig->TriggerFilter);
      break;
 801042a:	e045      	b.n	80104b8 <TIM_SlaveTimer_SetConfig+0x18c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if ((sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED) || \
 801042c:	683b      	ldr	r3, [r7, #0]
 801042e:	681b      	ldr	r3, [r3, #0]
 8010430:	2b05      	cmp	r3, #5
 8010432:	d004      	beq.n	801043e <TIM_SlaveTimer_SetConfig+0x112>
          (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_COMBINED_GATEDRESET))
 8010434:	683b      	ldr	r3, [r7, #0]
 8010436:	681b      	ldr	r3, [r3, #0]
      if ((sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED) || \
 8010438:	f1b3 1f01 	cmp.w	r3, #65537	; 0x10001
 801043c:	d101      	bne.n	8010442 <TIM_SlaveTimer_SetConfig+0x116>
      {
        return HAL_ERROR;
 801043e:	2301      	movs	r3, #1
 8010440:	e03b      	b.n	80104ba <TIM_SlaveTimer_SetConfig+0x18e>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 8010442:	687b      	ldr	r3, [r7, #4]
 8010444:	681b      	ldr	r3, [r3, #0]
 8010446:	6a1b      	ldr	r3, [r3, #32]
 8010448:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 801044a:	687b      	ldr	r3, [r7, #4]
 801044c:	681b      	ldr	r3, [r3, #0]
 801044e:	6a1a      	ldr	r2, [r3, #32]
 8010450:	687b      	ldr	r3, [r7, #4]
 8010452:	681b      	ldr	r3, [r3, #0]
 8010454:	f022 0201 	bic.w	r2, r2, #1
 8010458:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 801045a:	687b      	ldr	r3, [r7, #4]
 801045c:	681b      	ldr	r3, [r3, #0]
 801045e:	699b      	ldr	r3, [r3, #24]
 8010460:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8010462:	68bb      	ldr	r3, [r7, #8]
 8010464:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8010468:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 801046a:	683b      	ldr	r3, [r7, #0]
 801046c:	691b      	ldr	r3, [r3, #16]
 801046e:	011b      	lsls	r3, r3, #4
 8010470:	68ba      	ldr	r2, [r7, #8]
 8010472:	4313      	orrs	r3, r2
 8010474:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 8010476:	687b      	ldr	r3, [r7, #4]
 8010478:	681b      	ldr	r3, [r3, #0]
 801047a:	68ba      	ldr	r2, [r7, #8]
 801047c:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 801047e:	687b      	ldr	r3, [r7, #4]
 8010480:	681b      	ldr	r3, [r3, #0]
 8010482:	68fa      	ldr	r2, [r7, #12]
 8010484:	621a      	str	r2, [r3, #32]
      break;
 8010486:	e017      	b.n	80104b8 <TIM_SlaveTimer_SetConfig+0x18c>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 8010488:	687b      	ldr	r3, [r7, #4]
 801048a:	6818      	ldr	r0, [r3, #0]
 801048c:	683b      	ldr	r3, [r7, #0]
 801048e:	6899      	ldr	r1, [r3, #8]
 8010490:	683b      	ldr	r3, [r7, #0]
 8010492:	691b      	ldr	r3, [r3, #16]
 8010494:	461a      	mov	r2, r3
 8010496:	f000 f81f 	bl	80104d8 <TIM_TI1_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 801049a:	e00d      	b.n	80104b8 <TIM_SlaveTimer_SetConfig+0x18c>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 801049c:	687b      	ldr	r3, [r7, #4]
 801049e:	6818      	ldr	r0, [r3, #0]
 80104a0:	683b      	ldr	r3, [r7, #0]
 80104a2:	6899      	ldr	r1, [r3, #8]
 80104a4:	683b      	ldr	r3, [r7, #0]
 80104a6:	691b      	ldr	r3, [r3, #16]
 80104a8:	461a      	mov	r2, r3
 80104aa:	f000 f844 	bl	8010536 <TIM_TI2_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 80104ae:	e003      	b.n	80104b8 <TIM_SlaveTimer_SetConfig+0x18c>
      assert_param(IS_TIM_INTERNAL_TRIGGEREVENT_INSTANCE((htim->Instance), sSlaveConfig->InputTrigger));
      break;
    }

    default:
      status = HAL_ERROR;
 80104b0:	2301      	movs	r3, #1
 80104b2:	75fb      	strb	r3, [r7, #23]
      break;
 80104b4:	e000      	b.n	80104b8 <TIM_SlaveTimer_SetConfig+0x18c>
      break;
 80104b6:	bf00      	nop
  }

  return status;
 80104b8:	7dfb      	ldrb	r3, [r7, #23]
}
 80104ba:	4618      	mov	r0, r3
 80104bc:	3718      	adds	r7, #24
 80104be:	46bd      	mov	sp, r7
 80104c0:	bd80      	pop	{r7, pc}
 80104c2:	bf00      	nop
 80104c4:	00100070 	.word	0x00100070
 80104c8:	00100050 	.word	0x00100050
 80104cc:	00100040 	.word	0x00100040
 80104d0:	00100030 	.word	0x00100030
 80104d4:	00100020 	.word	0x00100020

080104d8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80104d8:	b480      	push	{r7}
 80104da:	b087      	sub	sp, #28
 80104dc:	af00      	add	r7, sp, #0
 80104de:	60f8      	str	r0, [r7, #12]
 80104e0:	60b9      	str	r1, [r7, #8]
 80104e2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80104e4:	68fb      	ldr	r3, [r7, #12]
 80104e6:	6a1b      	ldr	r3, [r3, #32]
 80104e8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80104ea:	68fb      	ldr	r3, [r7, #12]
 80104ec:	6a1b      	ldr	r3, [r3, #32]
 80104ee:	f023 0201 	bic.w	r2, r3, #1
 80104f2:	68fb      	ldr	r3, [r7, #12]
 80104f4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80104f6:	68fb      	ldr	r3, [r7, #12]
 80104f8:	699b      	ldr	r3, [r3, #24]
 80104fa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80104fc:	693b      	ldr	r3, [r7, #16]
 80104fe:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8010502:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8010504:	687b      	ldr	r3, [r7, #4]
 8010506:	011b      	lsls	r3, r3, #4
 8010508:	693a      	ldr	r2, [r7, #16]
 801050a:	4313      	orrs	r3, r2
 801050c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 801050e:	697b      	ldr	r3, [r7, #20]
 8010510:	f023 030a 	bic.w	r3, r3, #10
 8010514:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8010516:	697a      	ldr	r2, [r7, #20]
 8010518:	68bb      	ldr	r3, [r7, #8]
 801051a:	4313      	orrs	r3, r2
 801051c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 801051e:	68fb      	ldr	r3, [r7, #12]
 8010520:	693a      	ldr	r2, [r7, #16]
 8010522:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8010524:	68fb      	ldr	r3, [r7, #12]
 8010526:	697a      	ldr	r2, [r7, #20]
 8010528:	621a      	str	r2, [r3, #32]
}
 801052a:	bf00      	nop
 801052c:	371c      	adds	r7, #28
 801052e:	46bd      	mov	sp, r7
 8010530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010534:	4770      	bx	lr

08010536 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8010536:	b480      	push	{r7}
 8010538:	b087      	sub	sp, #28
 801053a:	af00      	add	r7, sp, #0
 801053c:	60f8      	str	r0, [r7, #12]
 801053e:	60b9      	str	r1, [r7, #8]
 8010540:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8010542:	68fb      	ldr	r3, [r7, #12]
 8010544:	6a1b      	ldr	r3, [r3, #32]
 8010546:	f023 0210 	bic.w	r2, r3, #16
 801054a:	68fb      	ldr	r3, [r7, #12]
 801054c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 801054e:	68fb      	ldr	r3, [r7, #12]
 8010550:	699b      	ldr	r3, [r3, #24]
 8010552:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8010554:	68fb      	ldr	r3, [r7, #12]
 8010556:	6a1b      	ldr	r3, [r3, #32]
 8010558:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 801055a:	697b      	ldr	r3, [r7, #20]
 801055c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8010560:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8010562:	687b      	ldr	r3, [r7, #4]
 8010564:	031b      	lsls	r3, r3, #12
 8010566:	697a      	ldr	r2, [r7, #20]
 8010568:	4313      	orrs	r3, r2
 801056a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 801056c:	693b      	ldr	r3, [r7, #16]
 801056e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8010572:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8010574:	68bb      	ldr	r3, [r7, #8]
 8010576:	011b      	lsls	r3, r3, #4
 8010578:	693a      	ldr	r2, [r7, #16]
 801057a:	4313      	orrs	r3, r2
 801057c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 801057e:	68fb      	ldr	r3, [r7, #12]
 8010580:	697a      	ldr	r2, [r7, #20]
 8010582:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8010584:	68fb      	ldr	r3, [r7, #12]
 8010586:	693a      	ldr	r2, [r7, #16]
 8010588:	621a      	str	r2, [r3, #32]
}
 801058a:	bf00      	nop
 801058c:	371c      	adds	r7, #28
 801058e:	46bd      	mov	sp, r7
 8010590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010594:	4770      	bx	lr

08010596 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8010596:	b480      	push	{r7}
 8010598:	b085      	sub	sp, #20
 801059a:	af00      	add	r7, sp, #0
 801059c:	6078      	str	r0, [r7, #4]
 801059e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80105a0:	687b      	ldr	r3, [r7, #4]
 80105a2:	689b      	ldr	r3, [r3, #8]
 80105a4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80105a6:	68fb      	ldr	r3, [r7, #12]
 80105a8:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 80105ac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80105b0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80105b2:	683a      	ldr	r2, [r7, #0]
 80105b4:	68fb      	ldr	r3, [r7, #12]
 80105b6:	4313      	orrs	r3, r2
 80105b8:	f043 0307 	orr.w	r3, r3, #7
 80105bc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80105be:	687b      	ldr	r3, [r7, #4]
 80105c0:	68fa      	ldr	r2, [r7, #12]
 80105c2:	609a      	str	r2, [r3, #8]
}
 80105c4:	bf00      	nop
 80105c6:	3714      	adds	r7, #20
 80105c8:	46bd      	mov	sp, r7
 80105ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80105ce:	4770      	bx	lr

080105d0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80105d0:	b480      	push	{r7}
 80105d2:	b087      	sub	sp, #28
 80105d4:	af00      	add	r7, sp, #0
 80105d6:	60f8      	str	r0, [r7, #12]
 80105d8:	60b9      	str	r1, [r7, #8]
 80105da:	607a      	str	r2, [r7, #4]
 80105dc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80105de:	68fb      	ldr	r3, [r7, #12]
 80105e0:	689b      	ldr	r3, [r3, #8]
 80105e2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80105e4:	697b      	ldr	r3, [r7, #20]
 80105e6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80105ea:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80105ec:	683b      	ldr	r3, [r7, #0]
 80105ee:	021a      	lsls	r2, r3, #8
 80105f0:	687b      	ldr	r3, [r7, #4]
 80105f2:	431a      	orrs	r2, r3
 80105f4:	68bb      	ldr	r3, [r7, #8]
 80105f6:	4313      	orrs	r3, r2
 80105f8:	697a      	ldr	r2, [r7, #20]
 80105fa:	4313      	orrs	r3, r2
 80105fc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80105fe:	68fb      	ldr	r3, [r7, #12]
 8010600:	697a      	ldr	r2, [r7, #20]
 8010602:	609a      	str	r2, [r3, #8]
}
 8010604:	bf00      	nop
 8010606:	371c      	adds	r7, #28
 8010608:	46bd      	mov	sp, r7
 801060a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801060e:	4770      	bx	lr

08010610 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8010610:	b480      	push	{r7}
 8010612:	b087      	sub	sp, #28
 8010614:	af00      	add	r7, sp, #0
 8010616:	60f8      	str	r0, [r7, #12]
 8010618:	60b9      	str	r1, [r7, #8]
 801061a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 801061c:	68bb      	ldr	r3, [r7, #8]
 801061e:	f003 031f 	and.w	r3, r3, #31
 8010622:	2201      	movs	r2, #1
 8010624:	fa02 f303 	lsl.w	r3, r2, r3
 8010628:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 801062a:	68fb      	ldr	r3, [r7, #12]
 801062c:	6a1a      	ldr	r2, [r3, #32]
 801062e:	697b      	ldr	r3, [r7, #20]
 8010630:	43db      	mvns	r3, r3
 8010632:	401a      	ands	r2, r3
 8010634:	68fb      	ldr	r3, [r7, #12]
 8010636:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8010638:	68fb      	ldr	r3, [r7, #12]
 801063a:	6a1a      	ldr	r2, [r3, #32]
 801063c:	68bb      	ldr	r3, [r7, #8]
 801063e:	f003 031f 	and.w	r3, r3, #31
 8010642:	6879      	ldr	r1, [r7, #4]
 8010644:	fa01 f303 	lsl.w	r3, r1, r3
 8010648:	431a      	orrs	r2, r3
 801064a:	68fb      	ldr	r3, [r7, #12]
 801064c:	621a      	str	r2, [r3, #32]
}
 801064e:	bf00      	nop
 8010650:	371c      	adds	r7, #28
 8010652:	46bd      	mov	sp, r7
 8010654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010658:	4770      	bx	lr
	...

0801065c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 801065c:	b480      	push	{r7}
 801065e:	b085      	sub	sp, #20
 8010660:	af00      	add	r7, sp, #0
 8010662:	6078      	str	r0, [r7, #4]
 8010664:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8010666:	687b      	ldr	r3, [r7, #4]
 8010668:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 801066c:	2b01      	cmp	r3, #1
 801066e:	d101      	bne.n	8010674 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8010670:	2302      	movs	r3, #2
 8010672:	e074      	b.n	801075e <HAL_TIMEx_MasterConfigSynchronization+0x102>
 8010674:	687b      	ldr	r3, [r7, #4]
 8010676:	2201      	movs	r2, #1
 8010678:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 801067c:	687b      	ldr	r3, [r7, #4]
 801067e:	2202      	movs	r2, #2
 8010680:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8010684:	687b      	ldr	r3, [r7, #4]
 8010686:	681b      	ldr	r3, [r3, #0]
 8010688:	685b      	ldr	r3, [r3, #4]
 801068a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 801068c:	687b      	ldr	r3, [r7, #4]
 801068e:	681b      	ldr	r3, [r3, #0]
 8010690:	689b      	ldr	r3, [r3, #8]
 8010692:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8010694:	687b      	ldr	r3, [r7, #4]
 8010696:	681b      	ldr	r3, [r3, #0]
 8010698:	4a34      	ldr	r2, [pc, #208]	; (801076c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 801069a:	4293      	cmp	r3, r2
 801069c:	d009      	beq.n	80106b2 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 801069e:	687b      	ldr	r3, [r7, #4]
 80106a0:	681b      	ldr	r3, [r3, #0]
 80106a2:	4a33      	ldr	r2, [pc, #204]	; (8010770 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80106a4:	4293      	cmp	r3, r2
 80106a6:	d004      	beq.n	80106b2 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 80106a8:	687b      	ldr	r3, [r7, #4]
 80106aa:	681b      	ldr	r3, [r3, #0]
 80106ac:	4a31      	ldr	r2, [pc, #196]	; (8010774 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80106ae:	4293      	cmp	r3, r2
 80106b0:	d108      	bne.n	80106c4 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80106b2:	68fb      	ldr	r3, [r7, #12]
 80106b4:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80106b8:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80106ba:	683b      	ldr	r3, [r7, #0]
 80106bc:	685b      	ldr	r3, [r3, #4]
 80106be:	68fa      	ldr	r2, [r7, #12]
 80106c0:	4313      	orrs	r3, r2
 80106c2:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80106c4:	68fb      	ldr	r3, [r7, #12]
 80106c6:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 80106ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80106ce:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80106d0:	683b      	ldr	r3, [r7, #0]
 80106d2:	681b      	ldr	r3, [r3, #0]
 80106d4:	68fa      	ldr	r2, [r7, #12]
 80106d6:	4313      	orrs	r3, r2
 80106d8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80106da:	687b      	ldr	r3, [r7, #4]
 80106dc:	681b      	ldr	r3, [r3, #0]
 80106de:	68fa      	ldr	r2, [r7, #12]
 80106e0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80106e2:	687b      	ldr	r3, [r7, #4]
 80106e4:	681b      	ldr	r3, [r3, #0]
 80106e6:	4a21      	ldr	r2, [pc, #132]	; (801076c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80106e8:	4293      	cmp	r3, r2
 80106ea:	d022      	beq.n	8010732 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80106ec:	687b      	ldr	r3, [r7, #4]
 80106ee:	681b      	ldr	r3, [r3, #0]
 80106f0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80106f4:	d01d      	beq.n	8010732 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80106f6:	687b      	ldr	r3, [r7, #4]
 80106f8:	681b      	ldr	r3, [r3, #0]
 80106fa:	4a1f      	ldr	r2, [pc, #124]	; (8010778 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 80106fc:	4293      	cmp	r3, r2
 80106fe:	d018      	beq.n	8010732 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8010700:	687b      	ldr	r3, [r7, #4]
 8010702:	681b      	ldr	r3, [r3, #0]
 8010704:	4a1d      	ldr	r2, [pc, #116]	; (801077c <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8010706:	4293      	cmp	r3, r2
 8010708:	d013      	beq.n	8010732 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 801070a:	687b      	ldr	r3, [r7, #4]
 801070c:	681b      	ldr	r3, [r3, #0]
 801070e:	4a1c      	ldr	r2, [pc, #112]	; (8010780 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8010710:	4293      	cmp	r3, r2
 8010712:	d00e      	beq.n	8010732 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8010714:	687b      	ldr	r3, [r7, #4]
 8010716:	681b      	ldr	r3, [r3, #0]
 8010718:	4a15      	ldr	r2, [pc, #84]	; (8010770 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 801071a:	4293      	cmp	r3, r2
 801071c:	d009      	beq.n	8010732 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 801071e:	687b      	ldr	r3, [r7, #4]
 8010720:	681b      	ldr	r3, [r3, #0]
 8010722:	4a18      	ldr	r2, [pc, #96]	; (8010784 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8010724:	4293      	cmp	r3, r2
 8010726:	d004      	beq.n	8010732 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8010728:	687b      	ldr	r3, [r7, #4]
 801072a:	681b      	ldr	r3, [r3, #0]
 801072c:	4a11      	ldr	r2, [pc, #68]	; (8010774 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 801072e:	4293      	cmp	r3, r2
 8010730:	d10c      	bne.n	801074c <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8010732:	68bb      	ldr	r3, [r7, #8]
 8010734:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8010738:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 801073a:	683b      	ldr	r3, [r7, #0]
 801073c:	689b      	ldr	r3, [r3, #8]
 801073e:	68ba      	ldr	r2, [r7, #8]
 8010740:	4313      	orrs	r3, r2
 8010742:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8010744:	687b      	ldr	r3, [r7, #4]
 8010746:	681b      	ldr	r3, [r3, #0]
 8010748:	68ba      	ldr	r2, [r7, #8]
 801074a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 801074c:	687b      	ldr	r3, [r7, #4]
 801074e:	2201      	movs	r2, #1
 8010750:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8010754:	687b      	ldr	r3, [r7, #4]
 8010756:	2200      	movs	r2, #0
 8010758:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 801075c:	2300      	movs	r3, #0
}
 801075e:	4618      	mov	r0, r3
 8010760:	3714      	adds	r7, #20
 8010762:	46bd      	mov	sp, r7
 8010764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010768:	4770      	bx	lr
 801076a:	bf00      	nop
 801076c:	40012c00 	.word	0x40012c00
 8010770:	40013400 	.word	0x40013400
 8010774:	40015000 	.word	0x40015000
 8010778:	40000400 	.word	0x40000400
 801077c:	40000800 	.word	0x40000800
 8010780:	40000c00 	.word	0x40000c00
 8010784:	40014000 	.word	0x40014000

08010788 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8010788:	b480      	push	{r7}
 801078a:	b085      	sub	sp, #20
 801078c:	af00      	add	r7, sp, #0
 801078e:	6078      	str	r0, [r7, #4]
 8010790:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8010792:	2300      	movs	r3, #0
 8010794:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8010796:	687b      	ldr	r3, [r7, #4]
 8010798:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 801079c:	2b01      	cmp	r3, #1
 801079e:	d101      	bne.n	80107a4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80107a0:	2302      	movs	r3, #2
 80107a2:	e096      	b.n	80108d2 <HAL_TIMEx_ConfigBreakDeadTime+0x14a>
 80107a4:	687b      	ldr	r3, [r7, #4]
 80107a6:	2201      	movs	r2, #1
 80107a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80107ac:	68fb      	ldr	r3, [r7, #12]
 80107ae:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80107b2:	683b      	ldr	r3, [r7, #0]
 80107b4:	68db      	ldr	r3, [r3, #12]
 80107b6:	4313      	orrs	r3, r2
 80107b8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80107ba:	68fb      	ldr	r3, [r7, #12]
 80107bc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80107c0:	683b      	ldr	r3, [r7, #0]
 80107c2:	689b      	ldr	r3, [r3, #8]
 80107c4:	4313      	orrs	r3, r2
 80107c6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80107c8:	68fb      	ldr	r3, [r7, #12]
 80107ca:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80107ce:	683b      	ldr	r3, [r7, #0]
 80107d0:	685b      	ldr	r3, [r3, #4]
 80107d2:	4313      	orrs	r3, r2
 80107d4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80107d6:	68fb      	ldr	r3, [r7, #12]
 80107d8:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80107dc:	683b      	ldr	r3, [r7, #0]
 80107de:	681b      	ldr	r3, [r3, #0]
 80107e0:	4313      	orrs	r3, r2
 80107e2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80107e4:	68fb      	ldr	r3, [r7, #12]
 80107e6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80107ea:	683b      	ldr	r3, [r7, #0]
 80107ec:	691b      	ldr	r3, [r3, #16]
 80107ee:	4313      	orrs	r3, r2
 80107f0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80107f2:	68fb      	ldr	r3, [r7, #12]
 80107f4:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80107f8:	683b      	ldr	r3, [r7, #0]
 80107fa:	695b      	ldr	r3, [r3, #20]
 80107fc:	4313      	orrs	r3, r2
 80107fe:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8010800:	68fb      	ldr	r3, [r7, #12]
 8010802:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8010806:	683b      	ldr	r3, [r7, #0]
 8010808:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801080a:	4313      	orrs	r3, r2
 801080c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 801080e:	68fb      	ldr	r3, [r7, #12]
 8010810:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8010814:	683b      	ldr	r3, [r7, #0]
 8010816:	699b      	ldr	r3, [r3, #24]
 8010818:	041b      	lsls	r3, r3, #16
 801081a:	4313      	orrs	r3, r2
 801081c:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 801081e:	687b      	ldr	r3, [r7, #4]
 8010820:	681b      	ldr	r3, [r3, #0]
 8010822:	4a2f      	ldr	r2, [pc, #188]	; (80108e0 <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 8010824:	4293      	cmp	r3, r2
 8010826:	d009      	beq.n	801083c <HAL_TIMEx_ConfigBreakDeadTime+0xb4>
 8010828:	687b      	ldr	r3, [r7, #4]
 801082a:	681b      	ldr	r3, [r3, #0]
 801082c:	4a2d      	ldr	r2, [pc, #180]	; (80108e4 <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 801082e:	4293      	cmp	r3, r2
 8010830:	d004      	beq.n	801083c <HAL_TIMEx_ConfigBreakDeadTime+0xb4>
 8010832:	687b      	ldr	r3, [r7, #4]
 8010834:	681b      	ldr	r3, [r3, #0]
 8010836:	4a2c      	ldr	r2, [pc, #176]	; (80108e8 <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 8010838:	4293      	cmp	r3, r2
 801083a:	d106      	bne.n	801084a <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 801083c:	68fb      	ldr	r3, [r7, #12]
 801083e:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8010842:	683b      	ldr	r3, [r7, #0]
 8010844:	69db      	ldr	r3, [r3, #28]
 8010846:	4313      	orrs	r3, r2
 8010848:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 801084a:	687b      	ldr	r3, [r7, #4]
 801084c:	681b      	ldr	r3, [r3, #0]
 801084e:	4a24      	ldr	r2, [pc, #144]	; (80108e0 <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 8010850:	4293      	cmp	r3, r2
 8010852:	d009      	beq.n	8010868 <HAL_TIMEx_ConfigBreakDeadTime+0xe0>
 8010854:	687b      	ldr	r3, [r7, #4]
 8010856:	681b      	ldr	r3, [r3, #0]
 8010858:	4a22      	ldr	r2, [pc, #136]	; (80108e4 <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 801085a:	4293      	cmp	r3, r2
 801085c:	d004      	beq.n	8010868 <HAL_TIMEx_ConfigBreakDeadTime+0xe0>
 801085e:	687b      	ldr	r3, [r7, #4]
 8010860:	681b      	ldr	r3, [r3, #0]
 8010862:	4a21      	ldr	r2, [pc, #132]	; (80108e8 <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 8010864:	4293      	cmp	r3, r2
 8010866:	d12b      	bne.n	80108c0 <HAL_TIMEx_ConfigBreakDeadTime+0x138>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8010868:	68fb      	ldr	r3, [r7, #12]
 801086a:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 801086e:	683b      	ldr	r3, [r7, #0]
 8010870:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010872:	051b      	lsls	r3, r3, #20
 8010874:	4313      	orrs	r3, r2
 8010876:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8010878:	68fb      	ldr	r3, [r7, #12]
 801087a:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 801087e:	683b      	ldr	r3, [r7, #0]
 8010880:	6a1b      	ldr	r3, [r3, #32]
 8010882:	4313      	orrs	r3, r2
 8010884:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8010886:	68fb      	ldr	r3, [r7, #12]
 8010888:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 801088c:	683b      	ldr	r3, [r7, #0]
 801088e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010890:	4313      	orrs	r3, r2
 8010892:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8010894:	687b      	ldr	r3, [r7, #4]
 8010896:	681b      	ldr	r3, [r3, #0]
 8010898:	4a11      	ldr	r2, [pc, #68]	; (80108e0 <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 801089a:	4293      	cmp	r3, r2
 801089c:	d009      	beq.n	80108b2 <HAL_TIMEx_ConfigBreakDeadTime+0x12a>
 801089e:	687b      	ldr	r3, [r7, #4]
 80108a0:	681b      	ldr	r3, [r3, #0]
 80108a2:	4a10      	ldr	r2, [pc, #64]	; (80108e4 <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 80108a4:	4293      	cmp	r3, r2
 80108a6:	d004      	beq.n	80108b2 <HAL_TIMEx_ConfigBreakDeadTime+0x12a>
 80108a8:	687b      	ldr	r3, [r7, #4]
 80108aa:	681b      	ldr	r3, [r3, #0]
 80108ac:	4a0e      	ldr	r2, [pc, #56]	; (80108e8 <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 80108ae:	4293      	cmp	r3, r2
 80108b0:	d106      	bne.n	80108c0 <HAL_TIMEx_ConfigBreakDeadTime+0x138>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 80108b2:	68fb      	ldr	r3, [r7, #12]
 80108b4:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 80108b8:	683b      	ldr	r3, [r7, #0]
 80108ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80108bc:	4313      	orrs	r3, r2
 80108be:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80108c0:	687b      	ldr	r3, [r7, #4]
 80108c2:	681b      	ldr	r3, [r3, #0]
 80108c4:	68fa      	ldr	r2, [r7, #12]
 80108c6:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80108c8:	687b      	ldr	r3, [r7, #4]
 80108ca:	2200      	movs	r2, #0
 80108cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80108d0:	2300      	movs	r3, #0
}
 80108d2:	4618      	mov	r0, r3
 80108d4:	3714      	adds	r7, #20
 80108d6:	46bd      	mov	sp, r7
 80108d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80108dc:	4770      	bx	lr
 80108de:	bf00      	nop
 80108e0:	40012c00 	.word	0x40012c00
 80108e4:	40013400 	.word	0x40013400
 80108e8:	40015000 	.word	0x40015000

080108ec <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80108ec:	b480      	push	{r7}
 80108ee:	b083      	sub	sp, #12
 80108f0:	af00      	add	r7, sp, #0
 80108f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80108f4:	bf00      	nop
 80108f6:	370c      	adds	r7, #12
 80108f8:	46bd      	mov	sp, r7
 80108fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80108fe:	4770      	bx	lr

08010900 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8010900:	b480      	push	{r7}
 8010902:	b083      	sub	sp, #12
 8010904:	af00      	add	r7, sp, #0
 8010906:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8010908:	bf00      	nop
 801090a:	370c      	adds	r7, #12
 801090c:	46bd      	mov	sp, r7
 801090e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010912:	4770      	bx	lr

08010914 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8010914:	b480      	push	{r7}
 8010916:	b083      	sub	sp, #12
 8010918:	af00      	add	r7, sp, #0
 801091a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 801091c:	bf00      	nop
 801091e:	370c      	adds	r7, #12
 8010920:	46bd      	mov	sp, r7
 8010922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010926:	4770      	bx	lr

08010928 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8010928:	b480      	push	{r7}
 801092a:	b083      	sub	sp, #12
 801092c:	af00      	add	r7, sp, #0
 801092e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8010930:	bf00      	nop
 8010932:	370c      	adds	r7, #12
 8010934:	46bd      	mov	sp, r7
 8010936:	f85d 7b04 	ldr.w	r7, [sp], #4
 801093a:	4770      	bx	lr

0801093c <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 801093c:	b480      	push	{r7}
 801093e:	b083      	sub	sp, #12
 8010940:	af00      	add	r7, sp, #0
 8010942:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8010944:	bf00      	nop
 8010946:	370c      	adds	r7, #12
 8010948:	46bd      	mov	sp, r7
 801094a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801094e:	4770      	bx	lr

08010950 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8010950:	b480      	push	{r7}
 8010952:	b083      	sub	sp, #12
 8010954:	af00      	add	r7, sp, #0
 8010956:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8010958:	bf00      	nop
 801095a:	370c      	adds	r7, #12
 801095c:	46bd      	mov	sp, r7
 801095e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010962:	4770      	bx	lr

08010964 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8010964:	b480      	push	{r7}
 8010966:	b083      	sub	sp, #12
 8010968:	af00      	add	r7, sp, #0
 801096a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 801096c:	bf00      	nop
 801096e:	370c      	adds	r7, #12
 8010970:	46bd      	mov	sp, r7
 8010972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010976:	4770      	bx	lr

08010978 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8010978:	b580      	push	{r7, lr}
 801097a:	b082      	sub	sp, #8
 801097c:	af00      	add	r7, sp, #0
 801097e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8010980:	687b      	ldr	r3, [r7, #4]
 8010982:	2b00      	cmp	r3, #0
 8010984:	d101      	bne.n	801098a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8010986:	2301      	movs	r3, #1
 8010988:	e042      	b.n	8010a10 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 801098a:	687b      	ldr	r3, [r7, #4]
 801098c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8010990:	2b00      	cmp	r3, #0
 8010992:	d106      	bne.n	80109a2 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8010994:	687b      	ldr	r3, [r7, #4]
 8010996:	2200      	movs	r2, #0
 8010998:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 801099c:	6878      	ldr	r0, [r7, #4]
 801099e:	f7f8 f899 	bl	8008ad4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80109a2:	687b      	ldr	r3, [r7, #4]
 80109a4:	2224      	movs	r2, #36	; 0x24
 80109a6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 80109aa:	687b      	ldr	r3, [r7, #4]
 80109ac:	681b      	ldr	r3, [r3, #0]
 80109ae:	681a      	ldr	r2, [r3, #0]
 80109b0:	687b      	ldr	r3, [r7, #4]
 80109b2:	681b      	ldr	r3, [r3, #0]
 80109b4:	f022 0201 	bic.w	r2, r2, #1
 80109b8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80109ba:	6878      	ldr	r0, [r7, #4]
 80109bc:	f000 f8c2 	bl	8010b44 <UART_SetConfig>
 80109c0:	4603      	mov	r3, r0
 80109c2:	2b01      	cmp	r3, #1
 80109c4:	d101      	bne.n	80109ca <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80109c6:	2301      	movs	r3, #1
 80109c8:	e022      	b.n	8010a10 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80109ca:	687b      	ldr	r3, [r7, #4]
 80109cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80109ce:	2b00      	cmp	r3, #0
 80109d0:	d002      	beq.n	80109d8 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80109d2:	6878      	ldr	r0, [r7, #4]
 80109d4:	f000 fbb2 	bl	801113c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80109d8:	687b      	ldr	r3, [r7, #4]
 80109da:	681b      	ldr	r3, [r3, #0]
 80109dc:	685a      	ldr	r2, [r3, #4]
 80109de:	687b      	ldr	r3, [r7, #4]
 80109e0:	681b      	ldr	r3, [r3, #0]
 80109e2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80109e6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80109e8:	687b      	ldr	r3, [r7, #4]
 80109ea:	681b      	ldr	r3, [r3, #0]
 80109ec:	689a      	ldr	r2, [r3, #8]
 80109ee:	687b      	ldr	r3, [r7, #4]
 80109f0:	681b      	ldr	r3, [r3, #0]
 80109f2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80109f6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80109f8:	687b      	ldr	r3, [r7, #4]
 80109fa:	681b      	ldr	r3, [r3, #0]
 80109fc:	681a      	ldr	r2, [r3, #0]
 80109fe:	687b      	ldr	r3, [r7, #4]
 8010a00:	681b      	ldr	r3, [r3, #0]
 8010a02:	f042 0201 	orr.w	r2, r2, #1
 8010a06:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8010a08:	6878      	ldr	r0, [r7, #4]
 8010a0a:	f000 fc39 	bl	8011280 <UART_CheckIdleState>
 8010a0e:	4603      	mov	r3, r0
}
 8010a10:	4618      	mov	r0, r3
 8010a12:	3708      	adds	r7, #8
 8010a14:	46bd      	mov	sp, r7
 8010a16:	bd80      	pop	{r7, pc}

08010a18 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8010a18:	b580      	push	{r7, lr}
 8010a1a:	b08a      	sub	sp, #40	; 0x28
 8010a1c:	af02      	add	r7, sp, #8
 8010a1e:	60f8      	str	r0, [r7, #12]
 8010a20:	60b9      	str	r1, [r7, #8]
 8010a22:	603b      	str	r3, [r7, #0]
 8010a24:	4613      	mov	r3, r2
 8010a26:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8010a28:	68fb      	ldr	r3, [r7, #12]
 8010a2a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8010a2e:	2b20      	cmp	r3, #32
 8010a30:	f040 8083 	bne.w	8010b3a <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 8010a34:	68bb      	ldr	r3, [r7, #8]
 8010a36:	2b00      	cmp	r3, #0
 8010a38:	d002      	beq.n	8010a40 <HAL_UART_Transmit+0x28>
 8010a3a:	88fb      	ldrh	r3, [r7, #6]
 8010a3c:	2b00      	cmp	r3, #0
 8010a3e:	d101      	bne.n	8010a44 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8010a40:	2301      	movs	r3, #1
 8010a42:	e07b      	b.n	8010b3c <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 8010a44:	68fb      	ldr	r3, [r7, #12]
 8010a46:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8010a4a:	2b01      	cmp	r3, #1
 8010a4c:	d101      	bne.n	8010a52 <HAL_UART_Transmit+0x3a>
 8010a4e:	2302      	movs	r3, #2
 8010a50:	e074      	b.n	8010b3c <HAL_UART_Transmit+0x124>
 8010a52:	68fb      	ldr	r3, [r7, #12]
 8010a54:	2201      	movs	r2, #1
 8010a56:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8010a5a:	68fb      	ldr	r3, [r7, #12]
 8010a5c:	2200      	movs	r2, #0
 8010a5e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8010a62:	68fb      	ldr	r3, [r7, #12]
 8010a64:	2221      	movs	r2, #33	; 0x21
 8010a66:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8010a6a:	f7f9 f8c5 	bl	8009bf8 <HAL_GetTick>
 8010a6e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8010a70:	68fb      	ldr	r3, [r7, #12]
 8010a72:	88fa      	ldrh	r2, [r7, #6]
 8010a74:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8010a78:	68fb      	ldr	r3, [r7, #12]
 8010a7a:	88fa      	ldrh	r2, [r7, #6]
 8010a7c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8010a80:	68fb      	ldr	r3, [r7, #12]
 8010a82:	689b      	ldr	r3, [r3, #8]
 8010a84:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8010a88:	d108      	bne.n	8010a9c <HAL_UART_Transmit+0x84>
 8010a8a:	68fb      	ldr	r3, [r7, #12]
 8010a8c:	691b      	ldr	r3, [r3, #16]
 8010a8e:	2b00      	cmp	r3, #0
 8010a90:	d104      	bne.n	8010a9c <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 8010a92:	2300      	movs	r3, #0
 8010a94:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8010a96:	68bb      	ldr	r3, [r7, #8]
 8010a98:	61bb      	str	r3, [r7, #24]
 8010a9a:	e003      	b.n	8010aa4 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8010a9c:	68bb      	ldr	r3, [r7, #8]
 8010a9e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8010aa0:	2300      	movs	r3, #0
 8010aa2:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8010aa4:	68fb      	ldr	r3, [r7, #12]
 8010aa6:	2200      	movs	r2, #0
 8010aa8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 8010aac:	e02c      	b.n	8010b08 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8010aae:	683b      	ldr	r3, [r7, #0]
 8010ab0:	9300      	str	r3, [sp, #0]
 8010ab2:	697b      	ldr	r3, [r7, #20]
 8010ab4:	2200      	movs	r2, #0
 8010ab6:	2180      	movs	r1, #128	; 0x80
 8010ab8:	68f8      	ldr	r0, [r7, #12]
 8010aba:	f000 fc2c 	bl	8011316 <UART_WaitOnFlagUntilTimeout>
 8010abe:	4603      	mov	r3, r0
 8010ac0:	2b00      	cmp	r3, #0
 8010ac2:	d001      	beq.n	8010ac8 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8010ac4:	2303      	movs	r3, #3
 8010ac6:	e039      	b.n	8010b3c <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 8010ac8:	69fb      	ldr	r3, [r7, #28]
 8010aca:	2b00      	cmp	r3, #0
 8010acc:	d10b      	bne.n	8010ae6 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8010ace:	69bb      	ldr	r3, [r7, #24]
 8010ad0:	881b      	ldrh	r3, [r3, #0]
 8010ad2:	461a      	mov	r2, r3
 8010ad4:	68fb      	ldr	r3, [r7, #12]
 8010ad6:	681b      	ldr	r3, [r3, #0]
 8010ad8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8010adc:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8010ade:	69bb      	ldr	r3, [r7, #24]
 8010ae0:	3302      	adds	r3, #2
 8010ae2:	61bb      	str	r3, [r7, #24]
 8010ae4:	e007      	b.n	8010af6 <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8010ae6:	69fb      	ldr	r3, [r7, #28]
 8010ae8:	781a      	ldrb	r2, [r3, #0]
 8010aea:	68fb      	ldr	r3, [r7, #12]
 8010aec:	681b      	ldr	r3, [r3, #0]
 8010aee:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8010af0:	69fb      	ldr	r3, [r7, #28]
 8010af2:	3301      	adds	r3, #1
 8010af4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8010af6:	68fb      	ldr	r3, [r7, #12]
 8010af8:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8010afc:	b29b      	uxth	r3, r3
 8010afe:	3b01      	subs	r3, #1
 8010b00:	b29a      	uxth	r2, r3
 8010b02:	68fb      	ldr	r3, [r7, #12]
 8010b04:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8010b08:	68fb      	ldr	r3, [r7, #12]
 8010b0a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8010b0e:	b29b      	uxth	r3, r3
 8010b10:	2b00      	cmp	r3, #0
 8010b12:	d1cc      	bne.n	8010aae <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8010b14:	683b      	ldr	r3, [r7, #0]
 8010b16:	9300      	str	r3, [sp, #0]
 8010b18:	697b      	ldr	r3, [r7, #20]
 8010b1a:	2200      	movs	r2, #0
 8010b1c:	2140      	movs	r1, #64	; 0x40
 8010b1e:	68f8      	ldr	r0, [r7, #12]
 8010b20:	f000 fbf9 	bl	8011316 <UART_WaitOnFlagUntilTimeout>
 8010b24:	4603      	mov	r3, r0
 8010b26:	2b00      	cmp	r3, #0
 8010b28:	d001      	beq.n	8010b2e <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 8010b2a:	2303      	movs	r3, #3
 8010b2c:	e006      	b.n	8010b3c <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8010b2e:	68fb      	ldr	r3, [r7, #12]
 8010b30:	2220      	movs	r2, #32
 8010b32:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 8010b36:	2300      	movs	r3, #0
 8010b38:	e000      	b.n	8010b3c <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 8010b3a:	2302      	movs	r3, #2
  }
}
 8010b3c:	4618      	mov	r0, r3
 8010b3e:	3720      	adds	r7, #32
 8010b40:	46bd      	mov	sp, r7
 8010b42:	bd80      	pop	{r7, pc}

08010b44 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8010b44:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8010b48:	b08c      	sub	sp, #48	; 0x30
 8010b4a:	af00      	add	r7, sp, #0
 8010b4c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8010b4e:	2300      	movs	r3, #0
 8010b50:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8010b54:	697b      	ldr	r3, [r7, #20]
 8010b56:	689a      	ldr	r2, [r3, #8]
 8010b58:	697b      	ldr	r3, [r7, #20]
 8010b5a:	691b      	ldr	r3, [r3, #16]
 8010b5c:	431a      	orrs	r2, r3
 8010b5e:	697b      	ldr	r3, [r7, #20]
 8010b60:	695b      	ldr	r3, [r3, #20]
 8010b62:	431a      	orrs	r2, r3
 8010b64:	697b      	ldr	r3, [r7, #20]
 8010b66:	69db      	ldr	r3, [r3, #28]
 8010b68:	4313      	orrs	r3, r2
 8010b6a:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8010b6c:	697b      	ldr	r3, [r7, #20]
 8010b6e:	681b      	ldr	r3, [r3, #0]
 8010b70:	681a      	ldr	r2, [r3, #0]
 8010b72:	4baa      	ldr	r3, [pc, #680]	; (8010e1c <UART_SetConfig+0x2d8>)
 8010b74:	4013      	ands	r3, r2
 8010b76:	697a      	ldr	r2, [r7, #20]
 8010b78:	6812      	ldr	r2, [r2, #0]
 8010b7a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8010b7c:	430b      	orrs	r3, r1
 8010b7e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8010b80:	697b      	ldr	r3, [r7, #20]
 8010b82:	681b      	ldr	r3, [r3, #0]
 8010b84:	685b      	ldr	r3, [r3, #4]
 8010b86:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8010b8a:	697b      	ldr	r3, [r7, #20]
 8010b8c:	68da      	ldr	r2, [r3, #12]
 8010b8e:	697b      	ldr	r3, [r7, #20]
 8010b90:	681b      	ldr	r3, [r3, #0]
 8010b92:	430a      	orrs	r2, r1
 8010b94:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8010b96:	697b      	ldr	r3, [r7, #20]
 8010b98:	699b      	ldr	r3, [r3, #24]
 8010b9a:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8010b9c:	697b      	ldr	r3, [r7, #20]
 8010b9e:	681b      	ldr	r3, [r3, #0]
 8010ba0:	4a9f      	ldr	r2, [pc, #636]	; (8010e20 <UART_SetConfig+0x2dc>)
 8010ba2:	4293      	cmp	r3, r2
 8010ba4:	d004      	beq.n	8010bb0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8010ba6:	697b      	ldr	r3, [r7, #20]
 8010ba8:	6a1b      	ldr	r3, [r3, #32]
 8010baa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010bac:	4313      	orrs	r3, r2
 8010bae:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8010bb0:	697b      	ldr	r3, [r7, #20]
 8010bb2:	681b      	ldr	r3, [r3, #0]
 8010bb4:	689b      	ldr	r3, [r3, #8]
 8010bb6:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8010bba:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8010bbe:	697a      	ldr	r2, [r7, #20]
 8010bc0:	6812      	ldr	r2, [r2, #0]
 8010bc2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8010bc4:	430b      	orrs	r3, r1
 8010bc6:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8010bc8:	697b      	ldr	r3, [r7, #20]
 8010bca:	681b      	ldr	r3, [r3, #0]
 8010bcc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010bce:	f023 010f 	bic.w	r1, r3, #15
 8010bd2:	697b      	ldr	r3, [r7, #20]
 8010bd4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8010bd6:	697b      	ldr	r3, [r7, #20]
 8010bd8:	681b      	ldr	r3, [r3, #0]
 8010bda:	430a      	orrs	r2, r1
 8010bdc:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8010bde:	697b      	ldr	r3, [r7, #20]
 8010be0:	681b      	ldr	r3, [r3, #0]
 8010be2:	4a90      	ldr	r2, [pc, #576]	; (8010e24 <UART_SetConfig+0x2e0>)
 8010be4:	4293      	cmp	r3, r2
 8010be6:	d125      	bne.n	8010c34 <UART_SetConfig+0xf0>
 8010be8:	4b8f      	ldr	r3, [pc, #572]	; (8010e28 <UART_SetConfig+0x2e4>)
 8010bea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8010bee:	f003 0303 	and.w	r3, r3, #3
 8010bf2:	2b03      	cmp	r3, #3
 8010bf4:	d81a      	bhi.n	8010c2c <UART_SetConfig+0xe8>
 8010bf6:	a201      	add	r2, pc, #4	; (adr r2, 8010bfc <UART_SetConfig+0xb8>)
 8010bf8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010bfc:	08010c0d 	.word	0x08010c0d
 8010c00:	08010c1d 	.word	0x08010c1d
 8010c04:	08010c15 	.word	0x08010c15
 8010c08:	08010c25 	.word	0x08010c25
 8010c0c:	2301      	movs	r3, #1
 8010c0e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8010c12:	e116      	b.n	8010e42 <UART_SetConfig+0x2fe>
 8010c14:	2302      	movs	r3, #2
 8010c16:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8010c1a:	e112      	b.n	8010e42 <UART_SetConfig+0x2fe>
 8010c1c:	2304      	movs	r3, #4
 8010c1e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8010c22:	e10e      	b.n	8010e42 <UART_SetConfig+0x2fe>
 8010c24:	2308      	movs	r3, #8
 8010c26:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8010c2a:	e10a      	b.n	8010e42 <UART_SetConfig+0x2fe>
 8010c2c:	2310      	movs	r3, #16
 8010c2e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8010c32:	e106      	b.n	8010e42 <UART_SetConfig+0x2fe>
 8010c34:	697b      	ldr	r3, [r7, #20]
 8010c36:	681b      	ldr	r3, [r3, #0]
 8010c38:	4a7c      	ldr	r2, [pc, #496]	; (8010e2c <UART_SetConfig+0x2e8>)
 8010c3a:	4293      	cmp	r3, r2
 8010c3c:	d138      	bne.n	8010cb0 <UART_SetConfig+0x16c>
 8010c3e:	4b7a      	ldr	r3, [pc, #488]	; (8010e28 <UART_SetConfig+0x2e4>)
 8010c40:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8010c44:	f003 030c 	and.w	r3, r3, #12
 8010c48:	2b0c      	cmp	r3, #12
 8010c4a:	d82d      	bhi.n	8010ca8 <UART_SetConfig+0x164>
 8010c4c:	a201      	add	r2, pc, #4	; (adr r2, 8010c54 <UART_SetConfig+0x110>)
 8010c4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010c52:	bf00      	nop
 8010c54:	08010c89 	.word	0x08010c89
 8010c58:	08010ca9 	.word	0x08010ca9
 8010c5c:	08010ca9 	.word	0x08010ca9
 8010c60:	08010ca9 	.word	0x08010ca9
 8010c64:	08010c99 	.word	0x08010c99
 8010c68:	08010ca9 	.word	0x08010ca9
 8010c6c:	08010ca9 	.word	0x08010ca9
 8010c70:	08010ca9 	.word	0x08010ca9
 8010c74:	08010c91 	.word	0x08010c91
 8010c78:	08010ca9 	.word	0x08010ca9
 8010c7c:	08010ca9 	.word	0x08010ca9
 8010c80:	08010ca9 	.word	0x08010ca9
 8010c84:	08010ca1 	.word	0x08010ca1
 8010c88:	2300      	movs	r3, #0
 8010c8a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8010c8e:	e0d8      	b.n	8010e42 <UART_SetConfig+0x2fe>
 8010c90:	2302      	movs	r3, #2
 8010c92:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8010c96:	e0d4      	b.n	8010e42 <UART_SetConfig+0x2fe>
 8010c98:	2304      	movs	r3, #4
 8010c9a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8010c9e:	e0d0      	b.n	8010e42 <UART_SetConfig+0x2fe>
 8010ca0:	2308      	movs	r3, #8
 8010ca2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8010ca6:	e0cc      	b.n	8010e42 <UART_SetConfig+0x2fe>
 8010ca8:	2310      	movs	r3, #16
 8010caa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8010cae:	e0c8      	b.n	8010e42 <UART_SetConfig+0x2fe>
 8010cb0:	697b      	ldr	r3, [r7, #20]
 8010cb2:	681b      	ldr	r3, [r3, #0]
 8010cb4:	4a5e      	ldr	r2, [pc, #376]	; (8010e30 <UART_SetConfig+0x2ec>)
 8010cb6:	4293      	cmp	r3, r2
 8010cb8:	d125      	bne.n	8010d06 <UART_SetConfig+0x1c2>
 8010cba:	4b5b      	ldr	r3, [pc, #364]	; (8010e28 <UART_SetConfig+0x2e4>)
 8010cbc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8010cc0:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8010cc4:	2b30      	cmp	r3, #48	; 0x30
 8010cc6:	d016      	beq.n	8010cf6 <UART_SetConfig+0x1b2>
 8010cc8:	2b30      	cmp	r3, #48	; 0x30
 8010cca:	d818      	bhi.n	8010cfe <UART_SetConfig+0x1ba>
 8010ccc:	2b20      	cmp	r3, #32
 8010cce:	d00a      	beq.n	8010ce6 <UART_SetConfig+0x1a2>
 8010cd0:	2b20      	cmp	r3, #32
 8010cd2:	d814      	bhi.n	8010cfe <UART_SetConfig+0x1ba>
 8010cd4:	2b00      	cmp	r3, #0
 8010cd6:	d002      	beq.n	8010cde <UART_SetConfig+0x19a>
 8010cd8:	2b10      	cmp	r3, #16
 8010cda:	d008      	beq.n	8010cee <UART_SetConfig+0x1aa>
 8010cdc:	e00f      	b.n	8010cfe <UART_SetConfig+0x1ba>
 8010cde:	2300      	movs	r3, #0
 8010ce0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8010ce4:	e0ad      	b.n	8010e42 <UART_SetConfig+0x2fe>
 8010ce6:	2302      	movs	r3, #2
 8010ce8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8010cec:	e0a9      	b.n	8010e42 <UART_SetConfig+0x2fe>
 8010cee:	2304      	movs	r3, #4
 8010cf0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8010cf4:	e0a5      	b.n	8010e42 <UART_SetConfig+0x2fe>
 8010cf6:	2308      	movs	r3, #8
 8010cf8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8010cfc:	e0a1      	b.n	8010e42 <UART_SetConfig+0x2fe>
 8010cfe:	2310      	movs	r3, #16
 8010d00:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8010d04:	e09d      	b.n	8010e42 <UART_SetConfig+0x2fe>
 8010d06:	697b      	ldr	r3, [r7, #20]
 8010d08:	681b      	ldr	r3, [r3, #0]
 8010d0a:	4a4a      	ldr	r2, [pc, #296]	; (8010e34 <UART_SetConfig+0x2f0>)
 8010d0c:	4293      	cmp	r3, r2
 8010d0e:	d125      	bne.n	8010d5c <UART_SetConfig+0x218>
 8010d10:	4b45      	ldr	r3, [pc, #276]	; (8010e28 <UART_SetConfig+0x2e4>)
 8010d12:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8010d16:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8010d1a:	2bc0      	cmp	r3, #192	; 0xc0
 8010d1c:	d016      	beq.n	8010d4c <UART_SetConfig+0x208>
 8010d1e:	2bc0      	cmp	r3, #192	; 0xc0
 8010d20:	d818      	bhi.n	8010d54 <UART_SetConfig+0x210>
 8010d22:	2b80      	cmp	r3, #128	; 0x80
 8010d24:	d00a      	beq.n	8010d3c <UART_SetConfig+0x1f8>
 8010d26:	2b80      	cmp	r3, #128	; 0x80
 8010d28:	d814      	bhi.n	8010d54 <UART_SetConfig+0x210>
 8010d2a:	2b00      	cmp	r3, #0
 8010d2c:	d002      	beq.n	8010d34 <UART_SetConfig+0x1f0>
 8010d2e:	2b40      	cmp	r3, #64	; 0x40
 8010d30:	d008      	beq.n	8010d44 <UART_SetConfig+0x200>
 8010d32:	e00f      	b.n	8010d54 <UART_SetConfig+0x210>
 8010d34:	2300      	movs	r3, #0
 8010d36:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8010d3a:	e082      	b.n	8010e42 <UART_SetConfig+0x2fe>
 8010d3c:	2302      	movs	r3, #2
 8010d3e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8010d42:	e07e      	b.n	8010e42 <UART_SetConfig+0x2fe>
 8010d44:	2304      	movs	r3, #4
 8010d46:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8010d4a:	e07a      	b.n	8010e42 <UART_SetConfig+0x2fe>
 8010d4c:	2308      	movs	r3, #8
 8010d4e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8010d52:	e076      	b.n	8010e42 <UART_SetConfig+0x2fe>
 8010d54:	2310      	movs	r3, #16
 8010d56:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8010d5a:	e072      	b.n	8010e42 <UART_SetConfig+0x2fe>
 8010d5c:	697b      	ldr	r3, [r7, #20]
 8010d5e:	681b      	ldr	r3, [r3, #0]
 8010d60:	4a35      	ldr	r2, [pc, #212]	; (8010e38 <UART_SetConfig+0x2f4>)
 8010d62:	4293      	cmp	r3, r2
 8010d64:	d12a      	bne.n	8010dbc <UART_SetConfig+0x278>
 8010d66:	4b30      	ldr	r3, [pc, #192]	; (8010e28 <UART_SetConfig+0x2e4>)
 8010d68:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8010d6c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8010d70:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8010d74:	d01a      	beq.n	8010dac <UART_SetConfig+0x268>
 8010d76:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8010d7a:	d81b      	bhi.n	8010db4 <UART_SetConfig+0x270>
 8010d7c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8010d80:	d00c      	beq.n	8010d9c <UART_SetConfig+0x258>
 8010d82:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8010d86:	d815      	bhi.n	8010db4 <UART_SetConfig+0x270>
 8010d88:	2b00      	cmp	r3, #0
 8010d8a:	d003      	beq.n	8010d94 <UART_SetConfig+0x250>
 8010d8c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8010d90:	d008      	beq.n	8010da4 <UART_SetConfig+0x260>
 8010d92:	e00f      	b.n	8010db4 <UART_SetConfig+0x270>
 8010d94:	2300      	movs	r3, #0
 8010d96:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8010d9a:	e052      	b.n	8010e42 <UART_SetConfig+0x2fe>
 8010d9c:	2302      	movs	r3, #2
 8010d9e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8010da2:	e04e      	b.n	8010e42 <UART_SetConfig+0x2fe>
 8010da4:	2304      	movs	r3, #4
 8010da6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8010daa:	e04a      	b.n	8010e42 <UART_SetConfig+0x2fe>
 8010dac:	2308      	movs	r3, #8
 8010dae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8010db2:	e046      	b.n	8010e42 <UART_SetConfig+0x2fe>
 8010db4:	2310      	movs	r3, #16
 8010db6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8010dba:	e042      	b.n	8010e42 <UART_SetConfig+0x2fe>
 8010dbc:	697b      	ldr	r3, [r7, #20]
 8010dbe:	681b      	ldr	r3, [r3, #0]
 8010dc0:	4a17      	ldr	r2, [pc, #92]	; (8010e20 <UART_SetConfig+0x2dc>)
 8010dc2:	4293      	cmp	r3, r2
 8010dc4:	d13a      	bne.n	8010e3c <UART_SetConfig+0x2f8>
 8010dc6:	4b18      	ldr	r3, [pc, #96]	; (8010e28 <UART_SetConfig+0x2e4>)
 8010dc8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8010dcc:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8010dd0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8010dd4:	d01a      	beq.n	8010e0c <UART_SetConfig+0x2c8>
 8010dd6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8010dda:	d81b      	bhi.n	8010e14 <UART_SetConfig+0x2d0>
 8010ddc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8010de0:	d00c      	beq.n	8010dfc <UART_SetConfig+0x2b8>
 8010de2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8010de6:	d815      	bhi.n	8010e14 <UART_SetConfig+0x2d0>
 8010de8:	2b00      	cmp	r3, #0
 8010dea:	d003      	beq.n	8010df4 <UART_SetConfig+0x2b0>
 8010dec:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8010df0:	d008      	beq.n	8010e04 <UART_SetConfig+0x2c0>
 8010df2:	e00f      	b.n	8010e14 <UART_SetConfig+0x2d0>
 8010df4:	2300      	movs	r3, #0
 8010df6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8010dfa:	e022      	b.n	8010e42 <UART_SetConfig+0x2fe>
 8010dfc:	2302      	movs	r3, #2
 8010dfe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8010e02:	e01e      	b.n	8010e42 <UART_SetConfig+0x2fe>
 8010e04:	2304      	movs	r3, #4
 8010e06:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8010e0a:	e01a      	b.n	8010e42 <UART_SetConfig+0x2fe>
 8010e0c:	2308      	movs	r3, #8
 8010e0e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8010e12:	e016      	b.n	8010e42 <UART_SetConfig+0x2fe>
 8010e14:	2310      	movs	r3, #16
 8010e16:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8010e1a:	e012      	b.n	8010e42 <UART_SetConfig+0x2fe>
 8010e1c:	cfff69f3 	.word	0xcfff69f3
 8010e20:	40008000 	.word	0x40008000
 8010e24:	40013800 	.word	0x40013800
 8010e28:	40021000 	.word	0x40021000
 8010e2c:	40004400 	.word	0x40004400
 8010e30:	40004800 	.word	0x40004800
 8010e34:	40004c00 	.word	0x40004c00
 8010e38:	40005000 	.word	0x40005000
 8010e3c:	2310      	movs	r3, #16
 8010e3e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8010e42:	697b      	ldr	r3, [r7, #20]
 8010e44:	681b      	ldr	r3, [r3, #0]
 8010e46:	4aae      	ldr	r2, [pc, #696]	; (8011100 <UART_SetConfig+0x5bc>)
 8010e48:	4293      	cmp	r3, r2
 8010e4a:	f040 8097 	bne.w	8010f7c <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8010e4e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8010e52:	2b08      	cmp	r3, #8
 8010e54:	d823      	bhi.n	8010e9e <UART_SetConfig+0x35a>
 8010e56:	a201      	add	r2, pc, #4	; (adr r2, 8010e5c <UART_SetConfig+0x318>)
 8010e58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010e5c:	08010e81 	.word	0x08010e81
 8010e60:	08010e9f 	.word	0x08010e9f
 8010e64:	08010e89 	.word	0x08010e89
 8010e68:	08010e9f 	.word	0x08010e9f
 8010e6c:	08010e8f 	.word	0x08010e8f
 8010e70:	08010e9f 	.word	0x08010e9f
 8010e74:	08010e9f 	.word	0x08010e9f
 8010e78:	08010e9f 	.word	0x08010e9f
 8010e7c:	08010e97 	.word	0x08010e97
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8010e80:	f7fc fdca 	bl	800da18 <HAL_RCC_GetPCLK1Freq>
 8010e84:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8010e86:	e010      	b.n	8010eaa <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8010e88:	4b9e      	ldr	r3, [pc, #632]	; (8011104 <UART_SetConfig+0x5c0>)
 8010e8a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8010e8c:	e00d      	b.n	8010eaa <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8010e8e:	f7fc fd57 	bl	800d940 <HAL_RCC_GetSysClockFreq>
 8010e92:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8010e94:	e009      	b.n	8010eaa <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8010e96:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8010e9a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8010e9c:	e005      	b.n	8010eaa <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8010e9e:	2300      	movs	r3, #0
 8010ea0:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8010ea2:	2301      	movs	r3, #1
 8010ea4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8010ea8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8010eaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010eac:	2b00      	cmp	r3, #0
 8010eae:	f000 8130 	beq.w	8011112 <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8010eb2:	697b      	ldr	r3, [r7, #20]
 8010eb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010eb6:	4a94      	ldr	r2, [pc, #592]	; (8011108 <UART_SetConfig+0x5c4>)
 8010eb8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8010ebc:	461a      	mov	r2, r3
 8010ebe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010ec0:	fbb3 f3f2 	udiv	r3, r3, r2
 8010ec4:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8010ec6:	697b      	ldr	r3, [r7, #20]
 8010ec8:	685a      	ldr	r2, [r3, #4]
 8010eca:	4613      	mov	r3, r2
 8010ecc:	005b      	lsls	r3, r3, #1
 8010ece:	4413      	add	r3, r2
 8010ed0:	69ba      	ldr	r2, [r7, #24]
 8010ed2:	429a      	cmp	r2, r3
 8010ed4:	d305      	bcc.n	8010ee2 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8010ed6:	697b      	ldr	r3, [r7, #20]
 8010ed8:	685b      	ldr	r3, [r3, #4]
 8010eda:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8010edc:	69ba      	ldr	r2, [r7, #24]
 8010ede:	429a      	cmp	r2, r3
 8010ee0:	d903      	bls.n	8010eea <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8010ee2:	2301      	movs	r3, #1
 8010ee4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8010ee8:	e113      	b.n	8011112 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8010eea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010eec:	2200      	movs	r2, #0
 8010eee:	60bb      	str	r3, [r7, #8]
 8010ef0:	60fa      	str	r2, [r7, #12]
 8010ef2:	697b      	ldr	r3, [r7, #20]
 8010ef4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010ef6:	4a84      	ldr	r2, [pc, #528]	; (8011108 <UART_SetConfig+0x5c4>)
 8010ef8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8010efc:	b29b      	uxth	r3, r3
 8010efe:	2200      	movs	r2, #0
 8010f00:	603b      	str	r3, [r7, #0]
 8010f02:	607a      	str	r2, [r7, #4]
 8010f04:	e9d7 2300 	ldrd	r2, r3, [r7]
 8010f08:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8010f0c:	f7ef ff14 	bl	8000d38 <__aeabi_uldivmod>
 8010f10:	4602      	mov	r2, r0
 8010f12:	460b      	mov	r3, r1
 8010f14:	4610      	mov	r0, r2
 8010f16:	4619      	mov	r1, r3
 8010f18:	f04f 0200 	mov.w	r2, #0
 8010f1c:	f04f 0300 	mov.w	r3, #0
 8010f20:	020b      	lsls	r3, r1, #8
 8010f22:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8010f26:	0202      	lsls	r2, r0, #8
 8010f28:	6979      	ldr	r1, [r7, #20]
 8010f2a:	6849      	ldr	r1, [r1, #4]
 8010f2c:	0849      	lsrs	r1, r1, #1
 8010f2e:	2000      	movs	r0, #0
 8010f30:	460c      	mov	r4, r1
 8010f32:	4605      	mov	r5, r0
 8010f34:	eb12 0804 	adds.w	r8, r2, r4
 8010f38:	eb43 0905 	adc.w	r9, r3, r5
 8010f3c:	697b      	ldr	r3, [r7, #20]
 8010f3e:	685b      	ldr	r3, [r3, #4]
 8010f40:	2200      	movs	r2, #0
 8010f42:	469a      	mov	sl, r3
 8010f44:	4693      	mov	fp, r2
 8010f46:	4652      	mov	r2, sl
 8010f48:	465b      	mov	r3, fp
 8010f4a:	4640      	mov	r0, r8
 8010f4c:	4649      	mov	r1, r9
 8010f4e:	f7ef fef3 	bl	8000d38 <__aeabi_uldivmod>
 8010f52:	4602      	mov	r2, r0
 8010f54:	460b      	mov	r3, r1
 8010f56:	4613      	mov	r3, r2
 8010f58:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8010f5a:	6a3b      	ldr	r3, [r7, #32]
 8010f5c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8010f60:	d308      	bcc.n	8010f74 <UART_SetConfig+0x430>
 8010f62:	6a3b      	ldr	r3, [r7, #32]
 8010f64:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8010f68:	d204      	bcs.n	8010f74 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8010f6a:	697b      	ldr	r3, [r7, #20]
 8010f6c:	681b      	ldr	r3, [r3, #0]
 8010f6e:	6a3a      	ldr	r2, [r7, #32]
 8010f70:	60da      	str	r2, [r3, #12]
 8010f72:	e0ce      	b.n	8011112 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8010f74:	2301      	movs	r3, #1
 8010f76:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8010f7a:	e0ca      	b.n	8011112 <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8010f7c:	697b      	ldr	r3, [r7, #20]
 8010f7e:	69db      	ldr	r3, [r3, #28]
 8010f80:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8010f84:	d166      	bne.n	8011054 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8010f86:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8010f8a:	2b08      	cmp	r3, #8
 8010f8c:	d827      	bhi.n	8010fde <UART_SetConfig+0x49a>
 8010f8e:	a201      	add	r2, pc, #4	; (adr r2, 8010f94 <UART_SetConfig+0x450>)
 8010f90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010f94:	08010fb9 	.word	0x08010fb9
 8010f98:	08010fc1 	.word	0x08010fc1
 8010f9c:	08010fc9 	.word	0x08010fc9
 8010fa0:	08010fdf 	.word	0x08010fdf
 8010fa4:	08010fcf 	.word	0x08010fcf
 8010fa8:	08010fdf 	.word	0x08010fdf
 8010fac:	08010fdf 	.word	0x08010fdf
 8010fb0:	08010fdf 	.word	0x08010fdf
 8010fb4:	08010fd7 	.word	0x08010fd7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8010fb8:	f7fc fd2e 	bl	800da18 <HAL_RCC_GetPCLK1Freq>
 8010fbc:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8010fbe:	e014      	b.n	8010fea <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8010fc0:	f7fc fd40 	bl	800da44 <HAL_RCC_GetPCLK2Freq>
 8010fc4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8010fc6:	e010      	b.n	8010fea <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8010fc8:	4b4e      	ldr	r3, [pc, #312]	; (8011104 <UART_SetConfig+0x5c0>)
 8010fca:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8010fcc:	e00d      	b.n	8010fea <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8010fce:	f7fc fcb7 	bl	800d940 <HAL_RCC_GetSysClockFreq>
 8010fd2:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8010fd4:	e009      	b.n	8010fea <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8010fd6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8010fda:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8010fdc:	e005      	b.n	8010fea <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8010fde:	2300      	movs	r3, #0
 8010fe0:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8010fe2:	2301      	movs	r3, #1
 8010fe4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8010fe8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8010fea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010fec:	2b00      	cmp	r3, #0
 8010fee:	f000 8090 	beq.w	8011112 <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8010ff2:	697b      	ldr	r3, [r7, #20]
 8010ff4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010ff6:	4a44      	ldr	r2, [pc, #272]	; (8011108 <UART_SetConfig+0x5c4>)
 8010ff8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8010ffc:	461a      	mov	r2, r3
 8010ffe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011000:	fbb3 f3f2 	udiv	r3, r3, r2
 8011004:	005a      	lsls	r2, r3, #1
 8011006:	697b      	ldr	r3, [r7, #20]
 8011008:	685b      	ldr	r3, [r3, #4]
 801100a:	085b      	lsrs	r3, r3, #1
 801100c:	441a      	add	r2, r3
 801100e:	697b      	ldr	r3, [r7, #20]
 8011010:	685b      	ldr	r3, [r3, #4]
 8011012:	fbb2 f3f3 	udiv	r3, r2, r3
 8011016:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8011018:	6a3b      	ldr	r3, [r7, #32]
 801101a:	2b0f      	cmp	r3, #15
 801101c:	d916      	bls.n	801104c <UART_SetConfig+0x508>
 801101e:	6a3b      	ldr	r3, [r7, #32]
 8011020:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8011024:	d212      	bcs.n	801104c <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8011026:	6a3b      	ldr	r3, [r7, #32]
 8011028:	b29b      	uxth	r3, r3
 801102a:	f023 030f 	bic.w	r3, r3, #15
 801102e:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8011030:	6a3b      	ldr	r3, [r7, #32]
 8011032:	085b      	lsrs	r3, r3, #1
 8011034:	b29b      	uxth	r3, r3
 8011036:	f003 0307 	and.w	r3, r3, #7
 801103a:	b29a      	uxth	r2, r3
 801103c:	8bfb      	ldrh	r3, [r7, #30]
 801103e:	4313      	orrs	r3, r2
 8011040:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8011042:	697b      	ldr	r3, [r7, #20]
 8011044:	681b      	ldr	r3, [r3, #0]
 8011046:	8bfa      	ldrh	r2, [r7, #30]
 8011048:	60da      	str	r2, [r3, #12]
 801104a:	e062      	b.n	8011112 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 801104c:	2301      	movs	r3, #1
 801104e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8011052:	e05e      	b.n	8011112 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8011054:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8011058:	2b08      	cmp	r3, #8
 801105a:	d828      	bhi.n	80110ae <UART_SetConfig+0x56a>
 801105c:	a201      	add	r2, pc, #4	; (adr r2, 8011064 <UART_SetConfig+0x520>)
 801105e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011062:	bf00      	nop
 8011064:	08011089 	.word	0x08011089
 8011068:	08011091 	.word	0x08011091
 801106c:	08011099 	.word	0x08011099
 8011070:	080110af 	.word	0x080110af
 8011074:	0801109f 	.word	0x0801109f
 8011078:	080110af 	.word	0x080110af
 801107c:	080110af 	.word	0x080110af
 8011080:	080110af 	.word	0x080110af
 8011084:	080110a7 	.word	0x080110a7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8011088:	f7fc fcc6 	bl	800da18 <HAL_RCC_GetPCLK1Freq>
 801108c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 801108e:	e014      	b.n	80110ba <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8011090:	f7fc fcd8 	bl	800da44 <HAL_RCC_GetPCLK2Freq>
 8011094:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8011096:	e010      	b.n	80110ba <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8011098:	4b1a      	ldr	r3, [pc, #104]	; (8011104 <UART_SetConfig+0x5c0>)
 801109a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 801109c:	e00d      	b.n	80110ba <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 801109e:	f7fc fc4f 	bl	800d940 <HAL_RCC_GetSysClockFreq>
 80110a2:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80110a4:	e009      	b.n	80110ba <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80110a6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80110aa:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80110ac:	e005      	b.n	80110ba <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 80110ae:	2300      	movs	r3, #0
 80110b0:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80110b2:	2301      	movs	r3, #1
 80110b4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80110b8:	bf00      	nop
    }

    if (pclk != 0U)
 80110ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80110bc:	2b00      	cmp	r3, #0
 80110be:	d028      	beq.n	8011112 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80110c0:	697b      	ldr	r3, [r7, #20]
 80110c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80110c4:	4a10      	ldr	r2, [pc, #64]	; (8011108 <UART_SetConfig+0x5c4>)
 80110c6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80110ca:	461a      	mov	r2, r3
 80110cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80110ce:	fbb3 f2f2 	udiv	r2, r3, r2
 80110d2:	697b      	ldr	r3, [r7, #20]
 80110d4:	685b      	ldr	r3, [r3, #4]
 80110d6:	085b      	lsrs	r3, r3, #1
 80110d8:	441a      	add	r2, r3
 80110da:	697b      	ldr	r3, [r7, #20]
 80110dc:	685b      	ldr	r3, [r3, #4]
 80110de:	fbb2 f3f3 	udiv	r3, r2, r3
 80110e2:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80110e4:	6a3b      	ldr	r3, [r7, #32]
 80110e6:	2b0f      	cmp	r3, #15
 80110e8:	d910      	bls.n	801110c <UART_SetConfig+0x5c8>
 80110ea:	6a3b      	ldr	r3, [r7, #32]
 80110ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80110f0:	d20c      	bcs.n	801110c <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80110f2:	6a3b      	ldr	r3, [r7, #32]
 80110f4:	b29a      	uxth	r2, r3
 80110f6:	697b      	ldr	r3, [r7, #20]
 80110f8:	681b      	ldr	r3, [r3, #0]
 80110fa:	60da      	str	r2, [r3, #12]
 80110fc:	e009      	b.n	8011112 <UART_SetConfig+0x5ce>
 80110fe:	bf00      	nop
 8011100:	40008000 	.word	0x40008000
 8011104:	00f42400 	.word	0x00f42400
 8011108:	0801ac30 	.word	0x0801ac30
      }
      else
      {
        ret = HAL_ERROR;
 801110c:	2301      	movs	r3, #1
 801110e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8011112:	697b      	ldr	r3, [r7, #20]
 8011114:	2201      	movs	r2, #1
 8011116:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 801111a:	697b      	ldr	r3, [r7, #20]
 801111c:	2201      	movs	r2, #1
 801111e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8011122:	697b      	ldr	r3, [r7, #20]
 8011124:	2200      	movs	r2, #0
 8011126:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8011128:	697b      	ldr	r3, [r7, #20]
 801112a:	2200      	movs	r2, #0
 801112c:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 801112e:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8011132:	4618      	mov	r0, r3
 8011134:	3730      	adds	r7, #48	; 0x30
 8011136:	46bd      	mov	sp, r7
 8011138:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0801113c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 801113c:	b480      	push	{r7}
 801113e:	b083      	sub	sp, #12
 8011140:	af00      	add	r7, sp, #0
 8011142:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8011144:	687b      	ldr	r3, [r7, #4]
 8011146:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011148:	f003 0301 	and.w	r3, r3, #1
 801114c:	2b00      	cmp	r3, #0
 801114e:	d00a      	beq.n	8011166 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8011150:	687b      	ldr	r3, [r7, #4]
 8011152:	681b      	ldr	r3, [r3, #0]
 8011154:	685b      	ldr	r3, [r3, #4]
 8011156:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 801115a:	687b      	ldr	r3, [r7, #4]
 801115c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801115e:	687b      	ldr	r3, [r7, #4]
 8011160:	681b      	ldr	r3, [r3, #0]
 8011162:	430a      	orrs	r2, r1
 8011164:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8011166:	687b      	ldr	r3, [r7, #4]
 8011168:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801116a:	f003 0302 	and.w	r3, r3, #2
 801116e:	2b00      	cmp	r3, #0
 8011170:	d00a      	beq.n	8011188 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8011172:	687b      	ldr	r3, [r7, #4]
 8011174:	681b      	ldr	r3, [r3, #0]
 8011176:	685b      	ldr	r3, [r3, #4]
 8011178:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 801117c:	687b      	ldr	r3, [r7, #4]
 801117e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8011180:	687b      	ldr	r3, [r7, #4]
 8011182:	681b      	ldr	r3, [r3, #0]
 8011184:	430a      	orrs	r2, r1
 8011186:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8011188:	687b      	ldr	r3, [r7, #4]
 801118a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801118c:	f003 0304 	and.w	r3, r3, #4
 8011190:	2b00      	cmp	r3, #0
 8011192:	d00a      	beq.n	80111aa <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8011194:	687b      	ldr	r3, [r7, #4]
 8011196:	681b      	ldr	r3, [r3, #0]
 8011198:	685b      	ldr	r3, [r3, #4]
 801119a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 801119e:	687b      	ldr	r3, [r7, #4]
 80111a0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80111a2:	687b      	ldr	r3, [r7, #4]
 80111a4:	681b      	ldr	r3, [r3, #0]
 80111a6:	430a      	orrs	r2, r1
 80111a8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80111aa:	687b      	ldr	r3, [r7, #4]
 80111ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80111ae:	f003 0308 	and.w	r3, r3, #8
 80111b2:	2b00      	cmp	r3, #0
 80111b4:	d00a      	beq.n	80111cc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80111b6:	687b      	ldr	r3, [r7, #4]
 80111b8:	681b      	ldr	r3, [r3, #0]
 80111ba:	685b      	ldr	r3, [r3, #4]
 80111bc:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80111c0:	687b      	ldr	r3, [r7, #4]
 80111c2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80111c4:	687b      	ldr	r3, [r7, #4]
 80111c6:	681b      	ldr	r3, [r3, #0]
 80111c8:	430a      	orrs	r2, r1
 80111ca:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80111cc:	687b      	ldr	r3, [r7, #4]
 80111ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80111d0:	f003 0310 	and.w	r3, r3, #16
 80111d4:	2b00      	cmp	r3, #0
 80111d6:	d00a      	beq.n	80111ee <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80111d8:	687b      	ldr	r3, [r7, #4]
 80111da:	681b      	ldr	r3, [r3, #0]
 80111dc:	689b      	ldr	r3, [r3, #8]
 80111de:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80111e2:	687b      	ldr	r3, [r7, #4]
 80111e4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80111e6:	687b      	ldr	r3, [r7, #4]
 80111e8:	681b      	ldr	r3, [r3, #0]
 80111ea:	430a      	orrs	r2, r1
 80111ec:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80111ee:	687b      	ldr	r3, [r7, #4]
 80111f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80111f2:	f003 0320 	and.w	r3, r3, #32
 80111f6:	2b00      	cmp	r3, #0
 80111f8:	d00a      	beq.n	8011210 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80111fa:	687b      	ldr	r3, [r7, #4]
 80111fc:	681b      	ldr	r3, [r3, #0]
 80111fe:	689b      	ldr	r3, [r3, #8]
 8011200:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8011204:	687b      	ldr	r3, [r7, #4]
 8011206:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8011208:	687b      	ldr	r3, [r7, #4]
 801120a:	681b      	ldr	r3, [r3, #0]
 801120c:	430a      	orrs	r2, r1
 801120e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8011210:	687b      	ldr	r3, [r7, #4]
 8011212:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011214:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011218:	2b00      	cmp	r3, #0
 801121a:	d01a      	beq.n	8011252 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 801121c:	687b      	ldr	r3, [r7, #4]
 801121e:	681b      	ldr	r3, [r3, #0]
 8011220:	685b      	ldr	r3, [r3, #4]
 8011222:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8011226:	687b      	ldr	r3, [r7, #4]
 8011228:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801122a:	687b      	ldr	r3, [r7, #4]
 801122c:	681b      	ldr	r3, [r3, #0]
 801122e:	430a      	orrs	r2, r1
 8011230:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8011232:	687b      	ldr	r3, [r7, #4]
 8011234:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011236:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 801123a:	d10a      	bne.n	8011252 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 801123c:	687b      	ldr	r3, [r7, #4]
 801123e:	681b      	ldr	r3, [r3, #0]
 8011240:	685b      	ldr	r3, [r3, #4]
 8011242:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8011246:	687b      	ldr	r3, [r7, #4]
 8011248:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 801124a:	687b      	ldr	r3, [r7, #4]
 801124c:	681b      	ldr	r3, [r3, #0]
 801124e:	430a      	orrs	r2, r1
 8011250:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8011252:	687b      	ldr	r3, [r7, #4]
 8011254:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011256:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801125a:	2b00      	cmp	r3, #0
 801125c:	d00a      	beq.n	8011274 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 801125e:	687b      	ldr	r3, [r7, #4]
 8011260:	681b      	ldr	r3, [r3, #0]
 8011262:	685b      	ldr	r3, [r3, #4]
 8011264:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8011268:	687b      	ldr	r3, [r7, #4]
 801126a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 801126c:	687b      	ldr	r3, [r7, #4]
 801126e:	681b      	ldr	r3, [r3, #0]
 8011270:	430a      	orrs	r2, r1
 8011272:	605a      	str	r2, [r3, #4]
  }
}
 8011274:	bf00      	nop
 8011276:	370c      	adds	r7, #12
 8011278:	46bd      	mov	sp, r7
 801127a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801127e:	4770      	bx	lr

08011280 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8011280:	b580      	push	{r7, lr}
 8011282:	b086      	sub	sp, #24
 8011284:	af02      	add	r7, sp, #8
 8011286:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8011288:	687b      	ldr	r3, [r7, #4]
 801128a:	2200      	movs	r2, #0
 801128c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8011290:	f7f8 fcb2 	bl	8009bf8 <HAL_GetTick>
 8011294:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8011296:	687b      	ldr	r3, [r7, #4]
 8011298:	681b      	ldr	r3, [r3, #0]
 801129a:	681b      	ldr	r3, [r3, #0]
 801129c:	f003 0308 	and.w	r3, r3, #8
 80112a0:	2b08      	cmp	r3, #8
 80112a2:	d10e      	bne.n	80112c2 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80112a4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80112a8:	9300      	str	r3, [sp, #0]
 80112aa:	68fb      	ldr	r3, [r7, #12]
 80112ac:	2200      	movs	r2, #0
 80112ae:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80112b2:	6878      	ldr	r0, [r7, #4]
 80112b4:	f000 f82f 	bl	8011316 <UART_WaitOnFlagUntilTimeout>
 80112b8:	4603      	mov	r3, r0
 80112ba:	2b00      	cmp	r3, #0
 80112bc:	d001      	beq.n	80112c2 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80112be:	2303      	movs	r3, #3
 80112c0:	e025      	b.n	801130e <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80112c2:	687b      	ldr	r3, [r7, #4]
 80112c4:	681b      	ldr	r3, [r3, #0]
 80112c6:	681b      	ldr	r3, [r3, #0]
 80112c8:	f003 0304 	and.w	r3, r3, #4
 80112cc:	2b04      	cmp	r3, #4
 80112ce:	d10e      	bne.n	80112ee <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80112d0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80112d4:	9300      	str	r3, [sp, #0]
 80112d6:	68fb      	ldr	r3, [r7, #12]
 80112d8:	2200      	movs	r2, #0
 80112da:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80112de:	6878      	ldr	r0, [r7, #4]
 80112e0:	f000 f819 	bl	8011316 <UART_WaitOnFlagUntilTimeout>
 80112e4:	4603      	mov	r3, r0
 80112e6:	2b00      	cmp	r3, #0
 80112e8:	d001      	beq.n	80112ee <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80112ea:	2303      	movs	r3, #3
 80112ec:	e00f      	b.n	801130e <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80112ee:	687b      	ldr	r3, [r7, #4]
 80112f0:	2220      	movs	r2, #32
 80112f2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 80112f6:	687b      	ldr	r3, [r7, #4]
 80112f8:	2220      	movs	r2, #32
 80112fa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80112fe:	687b      	ldr	r3, [r7, #4]
 8011300:	2200      	movs	r2, #0
 8011302:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8011304:	687b      	ldr	r3, [r7, #4]
 8011306:	2200      	movs	r2, #0
 8011308:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 801130c:	2300      	movs	r3, #0
}
 801130e:	4618      	mov	r0, r3
 8011310:	3710      	adds	r7, #16
 8011312:	46bd      	mov	sp, r7
 8011314:	bd80      	pop	{r7, pc}

08011316 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8011316:	b580      	push	{r7, lr}
 8011318:	b09c      	sub	sp, #112	; 0x70
 801131a:	af00      	add	r7, sp, #0
 801131c:	60f8      	str	r0, [r7, #12]
 801131e:	60b9      	str	r1, [r7, #8]
 8011320:	603b      	str	r3, [r7, #0]
 8011322:	4613      	mov	r3, r2
 8011324:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8011326:	e0a9      	b.n	801147c <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8011328:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801132a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801132e:	f000 80a5 	beq.w	801147c <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8011332:	f7f8 fc61 	bl	8009bf8 <HAL_GetTick>
 8011336:	4602      	mov	r2, r0
 8011338:	683b      	ldr	r3, [r7, #0]
 801133a:	1ad3      	subs	r3, r2, r3
 801133c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 801133e:	429a      	cmp	r2, r3
 8011340:	d302      	bcc.n	8011348 <UART_WaitOnFlagUntilTimeout+0x32>
 8011342:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8011344:	2b00      	cmp	r3, #0
 8011346:	d140      	bne.n	80113ca <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8011348:	68fb      	ldr	r3, [r7, #12]
 801134a:	681b      	ldr	r3, [r3, #0]
 801134c:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801134e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011350:	e853 3f00 	ldrex	r3, [r3]
 8011354:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8011356:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011358:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 801135c:	667b      	str	r3, [r7, #100]	; 0x64
 801135e:	68fb      	ldr	r3, [r7, #12]
 8011360:	681b      	ldr	r3, [r3, #0]
 8011362:	461a      	mov	r2, r3
 8011364:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8011366:	65fb      	str	r3, [r7, #92]	; 0x5c
 8011368:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801136a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 801136c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 801136e:	e841 2300 	strex	r3, r2, [r1]
 8011372:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8011374:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011376:	2b00      	cmp	r3, #0
 8011378:	d1e6      	bne.n	8011348 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801137a:	68fb      	ldr	r3, [r7, #12]
 801137c:	681b      	ldr	r3, [r3, #0]
 801137e:	3308      	adds	r3, #8
 8011380:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011382:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011384:	e853 3f00 	ldrex	r3, [r3]
 8011388:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 801138a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801138c:	f023 0301 	bic.w	r3, r3, #1
 8011390:	663b      	str	r3, [r7, #96]	; 0x60
 8011392:	68fb      	ldr	r3, [r7, #12]
 8011394:	681b      	ldr	r3, [r3, #0]
 8011396:	3308      	adds	r3, #8
 8011398:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 801139a:	64ba      	str	r2, [r7, #72]	; 0x48
 801139c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801139e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80113a0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80113a2:	e841 2300 	strex	r3, r2, [r1]
 80113a6:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80113a8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80113aa:	2b00      	cmp	r3, #0
 80113ac:	d1e5      	bne.n	801137a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80113ae:	68fb      	ldr	r3, [r7, #12]
 80113b0:	2220      	movs	r2, #32
 80113b2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 80113b6:	68fb      	ldr	r3, [r7, #12]
 80113b8:	2220      	movs	r2, #32
 80113ba:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 80113be:	68fb      	ldr	r3, [r7, #12]
 80113c0:	2200      	movs	r2, #0
 80113c2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 80113c6:	2303      	movs	r3, #3
 80113c8:	e069      	b.n	801149e <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80113ca:	68fb      	ldr	r3, [r7, #12]
 80113cc:	681b      	ldr	r3, [r3, #0]
 80113ce:	681b      	ldr	r3, [r3, #0]
 80113d0:	f003 0304 	and.w	r3, r3, #4
 80113d4:	2b00      	cmp	r3, #0
 80113d6:	d051      	beq.n	801147c <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80113d8:	68fb      	ldr	r3, [r7, #12]
 80113da:	681b      	ldr	r3, [r3, #0]
 80113dc:	69db      	ldr	r3, [r3, #28]
 80113de:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80113e2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80113e6:	d149      	bne.n	801147c <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80113e8:	68fb      	ldr	r3, [r7, #12]
 80113ea:	681b      	ldr	r3, [r3, #0]
 80113ec:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80113f0:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80113f2:	68fb      	ldr	r3, [r7, #12]
 80113f4:	681b      	ldr	r3, [r3, #0]
 80113f6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80113f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80113fa:	e853 3f00 	ldrex	r3, [r3]
 80113fe:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8011400:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011402:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8011406:	66fb      	str	r3, [r7, #108]	; 0x6c
 8011408:	68fb      	ldr	r3, [r7, #12]
 801140a:	681b      	ldr	r3, [r3, #0]
 801140c:	461a      	mov	r2, r3
 801140e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8011410:	637b      	str	r3, [r7, #52]	; 0x34
 8011412:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011414:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8011416:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8011418:	e841 2300 	strex	r3, r2, [r1]
 801141c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 801141e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011420:	2b00      	cmp	r3, #0
 8011422:	d1e6      	bne.n	80113f2 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8011424:	68fb      	ldr	r3, [r7, #12]
 8011426:	681b      	ldr	r3, [r3, #0]
 8011428:	3308      	adds	r3, #8
 801142a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801142c:	697b      	ldr	r3, [r7, #20]
 801142e:	e853 3f00 	ldrex	r3, [r3]
 8011432:	613b      	str	r3, [r7, #16]
   return(result);
 8011434:	693b      	ldr	r3, [r7, #16]
 8011436:	f023 0301 	bic.w	r3, r3, #1
 801143a:	66bb      	str	r3, [r7, #104]	; 0x68
 801143c:	68fb      	ldr	r3, [r7, #12]
 801143e:	681b      	ldr	r3, [r3, #0]
 8011440:	3308      	adds	r3, #8
 8011442:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8011444:	623a      	str	r2, [r7, #32]
 8011446:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011448:	69f9      	ldr	r1, [r7, #28]
 801144a:	6a3a      	ldr	r2, [r7, #32]
 801144c:	e841 2300 	strex	r3, r2, [r1]
 8011450:	61bb      	str	r3, [r7, #24]
   return(result);
 8011452:	69bb      	ldr	r3, [r7, #24]
 8011454:	2b00      	cmp	r3, #0
 8011456:	d1e5      	bne.n	8011424 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8011458:	68fb      	ldr	r3, [r7, #12]
 801145a:	2220      	movs	r2, #32
 801145c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8011460:	68fb      	ldr	r3, [r7, #12]
 8011462:	2220      	movs	r2, #32
 8011464:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8011468:	68fb      	ldr	r3, [r7, #12]
 801146a:	2220      	movs	r2, #32
 801146c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8011470:	68fb      	ldr	r3, [r7, #12]
 8011472:	2200      	movs	r2, #0
 8011474:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8011478:	2303      	movs	r3, #3
 801147a:	e010      	b.n	801149e <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 801147c:	68fb      	ldr	r3, [r7, #12]
 801147e:	681b      	ldr	r3, [r3, #0]
 8011480:	69da      	ldr	r2, [r3, #28]
 8011482:	68bb      	ldr	r3, [r7, #8]
 8011484:	4013      	ands	r3, r2
 8011486:	68ba      	ldr	r2, [r7, #8]
 8011488:	429a      	cmp	r2, r3
 801148a:	bf0c      	ite	eq
 801148c:	2301      	moveq	r3, #1
 801148e:	2300      	movne	r3, #0
 8011490:	b2db      	uxtb	r3, r3
 8011492:	461a      	mov	r2, r3
 8011494:	79fb      	ldrb	r3, [r7, #7]
 8011496:	429a      	cmp	r2, r3
 8011498:	f43f af46 	beq.w	8011328 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 801149c:	2300      	movs	r3, #0
}
 801149e:	4618      	mov	r0, r3
 80114a0:	3770      	adds	r7, #112	; 0x70
 80114a2:	46bd      	mov	sp, r7
 80114a4:	bd80      	pop	{r7, pc}

080114a6 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80114a6:	b480      	push	{r7}
 80114a8:	b085      	sub	sp, #20
 80114aa:	af00      	add	r7, sp, #0
 80114ac:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80114ae:	687b      	ldr	r3, [r7, #4]
 80114b0:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80114b4:	2b01      	cmp	r3, #1
 80114b6:	d101      	bne.n	80114bc <HAL_UARTEx_DisableFifoMode+0x16>
 80114b8:	2302      	movs	r3, #2
 80114ba:	e027      	b.n	801150c <HAL_UARTEx_DisableFifoMode+0x66>
 80114bc:	687b      	ldr	r3, [r7, #4]
 80114be:	2201      	movs	r2, #1
 80114c0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80114c4:	687b      	ldr	r3, [r7, #4]
 80114c6:	2224      	movs	r2, #36	; 0x24
 80114c8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80114cc:	687b      	ldr	r3, [r7, #4]
 80114ce:	681b      	ldr	r3, [r3, #0]
 80114d0:	681b      	ldr	r3, [r3, #0]
 80114d2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80114d4:	687b      	ldr	r3, [r7, #4]
 80114d6:	681b      	ldr	r3, [r3, #0]
 80114d8:	681a      	ldr	r2, [r3, #0]
 80114da:	687b      	ldr	r3, [r7, #4]
 80114dc:	681b      	ldr	r3, [r3, #0]
 80114de:	f022 0201 	bic.w	r2, r2, #1
 80114e2:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80114e4:	68fb      	ldr	r3, [r7, #12]
 80114e6:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80114ea:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80114ec:	687b      	ldr	r3, [r7, #4]
 80114ee:	2200      	movs	r2, #0
 80114f0:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80114f2:	687b      	ldr	r3, [r7, #4]
 80114f4:	681b      	ldr	r3, [r3, #0]
 80114f6:	68fa      	ldr	r2, [r7, #12]
 80114f8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80114fa:	687b      	ldr	r3, [r7, #4]
 80114fc:	2220      	movs	r2, #32
 80114fe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8011502:	687b      	ldr	r3, [r7, #4]
 8011504:	2200      	movs	r2, #0
 8011506:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 801150a:	2300      	movs	r3, #0
}
 801150c:	4618      	mov	r0, r3
 801150e:	3714      	adds	r7, #20
 8011510:	46bd      	mov	sp, r7
 8011512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011516:	4770      	bx	lr

08011518 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8011518:	b580      	push	{r7, lr}
 801151a:	b084      	sub	sp, #16
 801151c:	af00      	add	r7, sp, #0
 801151e:	6078      	str	r0, [r7, #4]
 8011520:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8011522:	687b      	ldr	r3, [r7, #4]
 8011524:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8011528:	2b01      	cmp	r3, #1
 801152a:	d101      	bne.n	8011530 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 801152c:	2302      	movs	r3, #2
 801152e:	e02d      	b.n	801158c <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8011530:	687b      	ldr	r3, [r7, #4]
 8011532:	2201      	movs	r2, #1
 8011534:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8011538:	687b      	ldr	r3, [r7, #4]
 801153a:	2224      	movs	r2, #36	; 0x24
 801153c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8011540:	687b      	ldr	r3, [r7, #4]
 8011542:	681b      	ldr	r3, [r3, #0]
 8011544:	681b      	ldr	r3, [r3, #0]
 8011546:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8011548:	687b      	ldr	r3, [r7, #4]
 801154a:	681b      	ldr	r3, [r3, #0]
 801154c:	681a      	ldr	r2, [r3, #0]
 801154e:	687b      	ldr	r3, [r7, #4]
 8011550:	681b      	ldr	r3, [r3, #0]
 8011552:	f022 0201 	bic.w	r2, r2, #1
 8011556:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8011558:	687b      	ldr	r3, [r7, #4]
 801155a:	681b      	ldr	r3, [r3, #0]
 801155c:	689b      	ldr	r3, [r3, #8]
 801155e:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8011562:	687b      	ldr	r3, [r7, #4]
 8011564:	681b      	ldr	r3, [r3, #0]
 8011566:	683a      	ldr	r2, [r7, #0]
 8011568:	430a      	orrs	r2, r1
 801156a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 801156c:	6878      	ldr	r0, [r7, #4]
 801156e:	f000 f84f 	bl	8011610 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8011572:	687b      	ldr	r3, [r7, #4]
 8011574:	681b      	ldr	r3, [r3, #0]
 8011576:	68fa      	ldr	r2, [r7, #12]
 8011578:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 801157a:	687b      	ldr	r3, [r7, #4]
 801157c:	2220      	movs	r2, #32
 801157e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8011582:	687b      	ldr	r3, [r7, #4]
 8011584:	2200      	movs	r2, #0
 8011586:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 801158a:	2300      	movs	r3, #0
}
 801158c:	4618      	mov	r0, r3
 801158e:	3710      	adds	r7, #16
 8011590:	46bd      	mov	sp, r7
 8011592:	bd80      	pop	{r7, pc}

08011594 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8011594:	b580      	push	{r7, lr}
 8011596:	b084      	sub	sp, #16
 8011598:	af00      	add	r7, sp, #0
 801159a:	6078      	str	r0, [r7, #4]
 801159c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 801159e:	687b      	ldr	r3, [r7, #4]
 80115a0:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80115a4:	2b01      	cmp	r3, #1
 80115a6:	d101      	bne.n	80115ac <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80115a8:	2302      	movs	r3, #2
 80115aa:	e02d      	b.n	8011608 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80115ac:	687b      	ldr	r3, [r7, #4]
 80115ae:	2201      	movs	r2, #1
 80115b0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80115b4:	687b      	ldr	r3, [r7, #4]
 80115b6:	2224      	movs	r2, #36	; 0x24
 80115b8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80115bc:	687b      	ldr	r3, [r7, #4]
 80115be:	681b      	ldr	r3, [r3, #0]
 80115c0:	681b      	ldr	r3, [r3, #0]
 80115c2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80115c4:	687b      	ldr	r3, [r7, #4]
 80115c6:	681b      	ldr	r3, [r3, #0]
 80115c8:	681a      	ldr	r2, [r3, #0]
 80115ca:	687b      	ldr	r3, [r7, #4]
 80115cc:	681b      	ldr	r3, [r3, #0]
 80115ce:	f022 0201 	bic.w	r2, r2, #1
 80115d2:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80115d4:	687b      	ldr	r3, [r7, #4]
 80115d6:	681b      	ldr	r3, [r3, #0]
 80115d8:	689b      	ldr	r3, [r3, #8]
 80115da:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 80115de:	687b      	ldr	r3, [r7, #4]
 80115e0:	681b      	ldr	r3, [r3, #0]
 80115e2:	683a      	ldr	r2, [r7, #0]
 80115e4:	430a      	orrs	r2, r1
 80115e6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80115e8:	6878      	ldr	r0, [r7, #4]
 80115ea:	f000 f811 	bl	8011610 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80115ee:	687b      	ldr	r3, [r7, #4]
 80115f0:	681b      	ldr	r3, [r3, #0]
 80115f2:	68fa      	ldr	r2, [r7, #12]
 80115f4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80115f6:	687b      	ldr	r3, [r7, #4]
 80115f8:	2220      	movs	r2, #32
 80115fa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80115fe:	687b      	ldr	r3, [r7, #4]
 8011600:	2200      	movs	r2, #0
 8011602:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8011606:	2300      	movs	r3, #0
}
 8011608:	4618      	mov	r0, r3
 801160a:	3710      	adds	r7, #16
 801160c:	46bd      	mov	sp, r7
 801160e:	bd80      	pop	{r7, pc}

08011610 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8011610:	b480      	push	{r7}
 8011612:	b085      	sub	sp, #20
 8011614:	af00      	add	r7, sp, #0
 8011616:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8011618:	687b      	ldr	r3, [r7, #4]
 801161a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 801161c:	2b00      	cmp	r3, #0
 801161e:	d108      	bne.n	8011632 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8011620:	687b      	ldr	r3, [r7, #4]
 8011622:	2201      	movs	r2, #1
 8011624:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8011628:	687b      	ldr	r3, [r7, #4]
 801162a:	2201      	movs	r2, #1
 801162c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8011630:	e031      	b.n	8011696 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8011632:	2308      	movs	r3, #8
 8011634:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8011636:	2308      	movs	r3, #8
 8011638:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 801163a:	687b      	ldr	r3, [r7, #4]
 801163c:	681b      	ldr	r3, [r3, #0]
 801163e:	689b      	ldr	r3, [r3, #8]
 8011640:	0e5b      	lsrs	r3, r3, #25
 8011642:	b2db      	uxtb	r3, r3
 8011644:	f003 0307 	and.w	r3, r3, #7
 8011648:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 801164a:	687b      	ldr	r3, [r7, #4]
 801164c:	681b      	ldr	r3, [r3, #0]
 801164e:	689b      	ldr	r3, [r3, #8]
 8011650:	0f5b      	lsrs	r3, r3, #29
 8011652:	b2db      	uxtb	r3, r3
 8011654:	f003 0307 	and.w	r3, r3, #7
 8011658:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 801165a:	7bbb      	ldrb	r3, [r7, #14]
 801165c:	7b3a      	ldrb	r2, [r7, #12]
 801165e:	4911      	ldr	r1, [pc, #68]	; (80116a4 <UARTEx_SetNbDataToProcess+0x94>)
 8011660:	5c8a      	ldrb	r2, [r1, r2]
 8011662:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8011666:	7b3a      	ldrb	r2, [r7, #12]
 8011668:	490f      	ldr	r1, [pc, #60]	; (80116a8 <UARTEx_SetNbDataToProcess+0x98>)
 801166a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 801166c:	fb93 f3f2 	sdiv	r3, r3, r2
 8011670:	b29a      	uxth	r2, r3
 8011672:	687b      	ldr	r3, [r7, #4]
 8011674:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8011678:	7bfb      	ldrb	r3, [r7, #15]
 801167a:	7b7a      	ldrb	r2, [r7, #13]
 801167c:	4909      	ldr	r1, [pc, #36]	; (80116a4 <UARTEx_SetNbDataToProcess+0x94>)
 801167e:	5c8a      	ldrb	r2, [r1, r2]
 8011680:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8011684:	7b7a      	ldrb	r2, [r7, #13]
 8011686:	4908      	ldr	r1, [pc, #32]	; (80116a8 <UARTEx_SetNbDataToProcess+0x98>)
 8011688:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 801168a:	fb93 f3f2 	sdiv	r3, r3, r2
 801168e:	b29a      	uxth	r2, r3
 8011690:	687b      	ldr	r3, [r7, #4]
 8011692:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8011696:	bf00      	nop
 8011698:	3714      	adds	r7, #20
 801169a:	46bd      	mov	sp, r7
 801169c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80116a0:	4770      	bx	lr
 80116a2:	bf00      	nop
 80116a4:	0801ac48 	.word	0x0801ac48
 80116a8:	0801ac50 	.word	0x0801ac50

080116ac <__errno>:
 80116ac:	4b01      	ldr	r3, [pc, #4]	; (80116b4 <__errno+0x8>)
 80116ae:	6818      	ldr	r0, [r3, #0]
 80116b0:	4770      	bx	lr
 80116b2:	bf00      	nop
 80116b4:	200003b4 	.word	0x200003b4

080116b8 <__libc_init_array>:
 80116b8:	b570      	push	{r4, r5, r6, lr}
 80116ba:	4d0d      	ldr	r5, [pc, #52]	; (80116f0 <__libc_init_array+0x38>)
 80116bc:	4c0d      	ldr	r4, [pc, #52]	; (80116f4 <__libc_init_array+0x3c>)
 80116be:	1b64      	subs	r4, r4, r5
 80116c0:	10a4      	asrs	r4, r4, #2
 80116c2:	2600      	movs	r6, #0
 80116c4:	42a6      	cmp	r6, r4
 80116c6:	d109      	bne.n	80116dc <__libc_init_array+0x24>
 80116c8:	4d0b      	ldr	r5, [pc, #44]	; (80116f8 <__libc_init_array+0x40>)
 80116ca:	4c0c      	ldr	r4, [pc, #48]	; (80116fc <__libc_init_array+0x44>)
 80116cc:	f003 f9e8 	bl	8014aa0 <_init>
 80116d0:	1b64      	subs	r4, r4, r5
 80116d2:	10a4      	asrs	r4, r4, #2
 80116d4:	2600      	movs	r6, #0
 80116d6:	42a6      	cmp	r6, r4
 80116d8:	d105      	bne.n	80116e6 <__libc_init_array+0x2e>
 80116da:	bd70      	pop	{r4, r5, r6, pc}
 80116dc:	f855 3b04 	ldr.w	r3, [r5], #4
 80116e0:	4798      	blx	r3
 80116e2:	3601      	adds	r6, #1
 80116e4:	e7ee      	b.n	80116c4 <__libc_init_array+0xc>
 80116e6:	f855 3b04 	ldr.w	r3, [r5], #4
 80116ea:	4798      	blx	r3
 80116ec:	3601      	adds	r6, #1
 80116ee:	e7f2      	b.n	80116d6 <__libc_init_array+0x1e>
 80116f0:	0801b070 	.word	0x0801b070
 80116f4:	0801b070 	.word	0x0801b070
 80116f8:	0801b070 	.word	0x0801b070
 80116fc:	0801b074 	.word	0x0801b074

08011700 <memcpy>:
 8011700:	440a      	add	r2, r1
 8011702:	4291      	cmp	r1, r2
 8011704:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8011708:	d100      	bne.n	801170c <memcpy+0xc>
 801170a:	4770      	bx	lr
 801170c:	b510      	push	{r4, lr}
 801170e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8011712:	f803 4f01 	strb.w	r4, [r3, #1]!
 8011716:	4291      	cmp	r1, r2
 8011718:	d1f9      	bne.n	801170e <memcpy+0xe>
 801171a:	bd10      	pop	{r4, pc}

0801171c <memset>:
 801171c:	4402      	add	r2, r0
 801171e:	4603      	mov	r3, r0
 8011720:	4293      	cmp	r3, r2
 8011722:	d100      	bne.n	8011726 <memset+0xa>
 8011724:	4770      	bx	lr
 8011726:	f803 1b01 	strb.w	r1, [r3], #1
 801172a:	e7f9      	b.n	8011720 <memset+0x4>

0801172c <__cvt>:
 801172c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8011730:	ec55 4b10 	vmov	r4, r5, d0
 8011734:	2d00      	cmp	r5, #0
 8011736:	460e      	mov	r6, r1
 8011738:	4619      	mov	r1, r3
 801173a:	462b      	mov	r3, r5
 801173c:	bfbb      	ittet	lt
 801173e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8011742:	461d      	movlt	r5, r3
 8011744:	2300      	movge	r3, #0
 8011746:	232d      	movlt	r3, #45	; 0x2d
 8011748:	700b      	strb	r3, [r1, #0]
 801174a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801174c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8011750:	4691      	mov	r9, r2
 8011752:	f023 0820 	bic.w	r8, r3, #32
 8011756:	bfbc      	itt	lt
 8011758:	4622      	movlt	r2, r4
 801175a:	4614      	movlt	r4, r2
 801175c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8011760:	d005      	beq.n	801176e <__cvt+0x42>
 8011762:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8011766:	d100      	bne.n	801176a <__cvt+0x3e>
 8011768:	3601      	adds	r6, #1
 801176a:	2102      	movs	r1, #2
 801176c:	e000      	b.n	8011770 <__cvt+0x44>
 801176e:	2103      	movs	r1, #3
 8011770:	ab03      	add	r3, sp, #12
 8011772:	9301      	str	r3, [sp, #4]
 8011774:	ab02      	add	r3, sp, #8
 8011776:	9300      	str	r3, [sp, #0]
 8011778:	ec45 4b10 	vmov	d0, r4, r5
 801177c:	4653      	mov	r3, sl
 801177e:	4632      	mov	r2, r6
 8011780:	f000 fcea 	bl	8012158 <_dtoa_r>
 8011784:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8011788:	4607      	mov	r7, r0
 801178a:	d102      	bne.n	8011792 <__cvt+0x66>
 801178c:	f019 0f01 	tst.w	r9, #1
 8011790:	d022      	beq.n	80117d8 <__cvt+0xac>
 8011792:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8011796:	eb07 0906 	add.w	r9, r7, r6
 801179a:	d110      	bne.n	80117be <__cvt+0x92>
 801179c:	783b      	ldrb	r3, [r7, #0]
 801179e:	2b30      	cmp	r3, #48	; 0x30
 80117a0:	d10a      	bne.n	80117b8 <__cvt+0x8c>
 80117a2:	2200      	movs	r2, #0
 80117a4:	2300      	movs	r3, #0
 80117a6:	4620      	mov	r0, r4
 80117a8:	4629      	mov	r1, r5
 80117aa:	f7ef f9b5 	bl	8000b18 <__aeabi_dcmpeq>
 80117ae:	b918      	cbnz	r0, 80117b8 <__cvt+0x8c>
 80117b0:	f1c6 0601 	rsb	r6, r6, #1
 80117b4:	f8ca 6000 	str.w	r6, [sl]
 80117b8:	f8da 3000 	ldr.w	r3, [sl]
 80117bc:	4499      	add	r9, r3
 80117be:	2200      	movs	r2, #0
 80117c0:	2300      	movs	r3, #0
 80117c2:	4620      	mov	r0, r4
 80117c4:	4629      	mov	r1, r5
 80117c6:	f7ef f9a7 	bl	8000b18 <__aeabi_dcmpeq>
 80117ca:	b108      	cbz	r0, 80117d0 <__cvt+0xa4>
 80117cc:	f8cd 900c 	str.w	r9, [sp, #12]
 80117d0:	2230      	movs	r2, #48	; 0x30
 80117d2:	9b03      	ldr	r3, [sp, #12]
 80117d4:	454b      	cmp	r3, r9
 80117d6:	d307      	bcc.n	80117e8 <__cvt+0xbc>
 80117d8:	9b03      	ldr	r3, [sp, #12]
 80117da:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80117dc:	1bdb      	subs	r3, r3, r7
 80117de:	4638      	mov	r0, r7
 80117e0:	6013      	str	r3, [r2, #0]
 80117e2:	b004      	add	sp, #16
 80117e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80117e8:	1c59      	adds	r1, r3, #1
 80117ea:	9103      	str	r1, [sp, #12]
 80117ec:	701a      	strb	r2, [r3, #0]
 80117ee:	e7f0      	b.n	80117d2 <__cvt+0xa6>

080117f0 <__exponent>:
 80117f0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80117f2:	4603      	mov	r3, r0
 80117f4:	2900      	cmp	r1, #0
 80117f6:	bfb8      	it	lt
 80117f8:	4249      	neglt	r1, r1
 80117fa:	f803 2b02 	strb.w	r2, [r3], #2
 80117fe:	bfb4      	ite	lt
 8011800:	222d      	movlt	r2, #45	; 0x2d
 8011802:	222b      	movge	r2, #43	; 0x2b
 8011804:	2909      	cmp	r1, #9
 8011806:	7042      	strb	r2, [r0, #1]
 8011808:	dd2a      	ble.n	8011860 <__exponent+0x70>
 801180a:	f10d 0407 	add.w	r4, sp, #7
 801180e:	46a4      	mov	ip, r4
 8011810:	270a      	movs	r7, #10
 8011812:	46a6      	mov	lr, r4
 8011814:	460a      	mov	r2, r1
 8011816:	fb91 f6f7 	sdiv	r6, r1, r7
 801181a:	fb07 1516 	mls	r5, r7, r6, r1
 801181e:	3530      	adds	r5, #48	; 0x30
 8011820:	2a63      	cmp	r2, #99	; 0x63
 8011822:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 8011826:	f80e 5c01 	strb.w	r5, [lr, #-1]
 801182a:	4631      	mov	r1, r6
 801182c:	dcf1      	bgt.n	8011812 <__exponent+0x22>
 801182e:	3130      	adds	r1, #48	; 0x30
 8011830:	f1ae 0502 	sub.w	r5, lr, #2
 8011834:	f804 1c01 	strb.w	r1, [r4, #-1]
 8011838:	1c44      	adds	r4, r0, #1
 801183a:	4629      	mov	r1, r5
 801183c:	4561      	cmp	r1, ip
 801183e:	d30a      	bcc.n	8011856 <__exponent+0x66>
 8011840:	f10d 0209 	add.w	r2, sp, #9
 8011844:	eba2 020e 	sub.w	r2, r2, lr
 8011848:	4565      	cmp	r5, ip
 801184a:	bf88      	it	hi
 801184c:	2200      	movhi	r2, #0
 801184e:	4413      	add	r3, r2
 8011850:	1a18      	subs	r0, r3, r0
 8011852:	b003      	add	sp, #12
 8011854:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011856:	f811 2b01 	ldrb.w	r2, [r1], #1
 801185a:	f804 2f01 	strb.w	r2, [r4, #1]!
 801185e:	e7ed      	b.n	801183c <__exponent+0x4c>
 8011860:	2330      	movs	r3, #48	; 0x30
 8011862:	3130      	adds	r1, #48	; 0x30
 8011864:	7083      	strb	r3, [r0, #2]
 8011866:	70c1      	strb	r1, [r0, #3]
 8011868:	1d03      	adds	r3, r0, #4
 801186a:	e7f1      	b.n	8011850 <__exponent+0x60>

0801186c <_printf_float>:
 801186c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011870:	ed2d 8b02 	vpush	{d8}
 8011874:	b08d      	sub	sp, #52	; 0x34
 8011876:	460c      	mov	r4, r1
 8011878:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 801187c:	4616      	mov	r6, r2
 801187e:	461f      	mov	r7, r3
 8011880:	4605      	mov	r5, r0
 8011882:	f001 fa57 	bl	8012d34 <_localeconv_r>
 8011886:	f8d0 a000 	ldr.w	sl, [r0]
 801188a:	4650      	mov	r0, sl
 801188c:	f7ee fcc8 	bl	8000220 <strlen>
 8011890:	2300      	movs	r3, #0
 8011892:	930a      	str	r3, [sp, #40]	; 0x28
 8011894:	6823      	ldr	r3, [r4, #0]
 8011896:	9305      	str	r3, [sp, #20]
 8011898:	f8d8 3000 	ldr.w	r3, [r8]
 801189c:	f894 b018 	ldrb.w	fp, [r4, #24]
 80118a0:	3307      	adds	r3, #7
 80118a2:	f023 0307 	bic.w	r3, r3, #7
 80118a6:	f103 0208 	add.w	r2, r3, #8
 80118aa:	f8c8 2000 	str.w	r2, [r8]
 80118ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80118b2:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80118b6:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 80118ba:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80118be:	9307      	str	r3, [sp, #28]
 80118c0:	f8cd 8018 	str.w	r8, [sp, #24]
 80118c4:	ee08 0a10 	vmov	s16, r0
 80118c8:	4b9f      	ldr	r3, [pc, #636]	; (8011b48 <_printf_float+0x2dc>)
 80118ca:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80118ce:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80118d2:	f7ef f953 	bl	8000b7c <__aeabi_dcmpun>
 80118d6:	bb88      	cbnz	r0, 801193c <_printf_float+0xd0>
 80118d8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80118dc:	4b9a      	ldr	r3, [pc, #616]	; (8011b48 <_printf_float+0x2dc>)
 80118de:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80118e2:	f7ef f92d 	bl	8000b40 <__aeabi_dcmple>
 80118e6:	bb48      	cbnz	r0, 801193c <_printf_float+0xd0>
 80118e8:	2200      	movs	r2, #0
 80118ea:	2300      	movs	r3, #0
 80118ec:	4640      	mov	r0, r8
 80118ee:	4649      	mov	r1, r9
 80118f0:	f7ef f91c 	bl	8000b2c <__aeabi_dcmplt>
 80118f4:	b110      	cbz	r0, 80118fc <_printf_float+0x90>
 80118f6:	232d      	movs	r3, #45	; 0x2d
 80118f8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80118fc:	4b93      	ldr	r3, [pc, #588]	; (8011b4c <_printf_float+0x2e0>)
 80118fe:	4894      	ldr	r0, [pc, #592]	; (8011b50 <_printf_float+0x2e4>)
 8011900:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8011904:	bf94      	ite	ls
 8011906:	4698      	movls	r8, r3
 8011908:	4680      	movhi	r8, r0
 801190a:	2303      	movs	r3, #3
 801190c:	6123      	str	r3, [r4, #16]
 801190e:	9b05      	ldr	r3, [sp, #20]
 8011910:	f023 0204 	bic.w	r2, r3, #4
 8011914:	6022      	str	r2, [r4, #0]
 8011916:	f04f 0900 	mov.w	r9, #0
 801191a:	9700      	str	r7, [sp, #0]
 801191c:	4633      	mov	r3, r6
 801191e:	aa0b      	add	r2, sp, #44	; 0x2c
 8011920:	4621      	mov	r1, r4
 8011922:	4628      	mov	r0, r5
 8011924:	f000 f9d8 	bl	8011cd8 <_printf_common>
 8011928:	3001      	adds	r0, #1
 801192a:	f040 8090 	bne.w	8011a4e <_printf_float+0x1e2>
 801192e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8011932:	b00d      	add	sp, #52	; 0x34
 8011934:	ecbd 8b02 	vpop	{d8}
 8011938:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801193c:	4642      	mov	r2, r8
 801193e:	464b      	mov	r3, r9
 8011940:	4640      	mov	r0, r8
 8011942:	4649      	mov	r1, r9
 8011944:	f7ef f91a 	bl	8000b7c <__aeabi_dcmpun>
 8011948:	b140      	cbz	r0, 801195c <_printf_float+0xf0>
 801194a:	464b      	mov	r3, r9
 801194c:	2b00      	cmp	r3, #0
 801194e:	bfbc      	itt	lt
 8011950:	232d      	movlt	r3, #45	; 0x2d
 8011952:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8011956:	487f      	ldr	r0, [pc, #508]	; (8011b54 <_printf_float+0x2e8>)
 8011958:	4b7f      	ldr	r3, [pc, #508]	; (8011b58 <_printf_float+0x2ec>)
 801195a:	e7d1      	b.n	8011900 <_printf_float+0x94>
 801195c:	6863      	ldr	r3, [r4, #4]
 801195e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8011962:	9206      	str	r2, [sp, #24]
 8011964:	1c5a      	adds	r2, r3, #1
 8011966:	d13f      	bne.n	80119e8 <_printf_float+0x17c>
 8011968:	2306      	movs	r3, #6
 801196a:	6063      	str	r3, [r4, #4]
 801196c:	9b05      	ldr	r3, [sp, #20]
 801196e:	6861      	ldr	r1, [r4, #4]
 8011970:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8011974:	2300      	movs	r3, #0
 8011976:	9303      	str	r3, [sp, #12]
 8011978:	ab0a      	add	r3, sp, #40	; 0x28
 801197a:	e9cd b301 	strd	fp, r3, [sp, #4]
 801197e:	ab09      	add	r3, sp, #36	; 0x24
 8011980:	ec49 8b10 	vmov	d0, r8, r9
 8011984:	9300      	str	r3, [sp, #0]
 8011986:	6022      	str	r2, [r4, #0]
 8011988:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 801198c:	4628      	mov	r0, r5
 801198e:	f7ff fecd 	bl	801172c <__cvt>
 8011992:	9b06      	ldr	r3, [sp, #24]
 8011994:	9909      	ldr	r1, [sp, #36]	; 0x24
 8011996:	2b47      	cmp	r3, #71	; 0x47
 8011998:	4680      	mov	r8, r0
 801199a:	d108      	bne.n	80119ae <_printf_float+0x142>
 801199c:	1cc8      	adds	r0, r1, #3
 801199e:	db02      	blt.n	80119a6 <_printf_float+0x13a>
 80119a0:	6863      	ldr	r3, [r4, #4]
 80119a2:	4299      	cmp	r1, r3
 80119a4:	dd41      	ble.n	8011a2a <_printf_float+0x1be>
 80119a6:	f1ab 0b02 	sub.w	fp, fp, #2
 80119aa:	fa5f fb8b 	uxtb.w	fp, fp
 80119ae:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80119b2:	d820      	bhi.n	80119f6 <_printf_float+0x18a>
 80119b4:	3901      	subs	r1, #1
 80119b6:	465a      	mov	r2, fp
 80119b8:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80119bc:	9109      	str	r1, [sp, #36]	; 0x24
 80119be:	f7ff ff17 	bl	80117f0 <__exponent>
 80119c2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80119c4:	1813      	adds	r3, r2, r0
 80119c6:	2a01      	cmp	r2, #1
 80119c8:	4681      	mov	r9, r0
 80119ca:	6123      	str	r3, [r4, #16]
 80119cc:	dc02      	bgt.n	80119d4 <_printf_float+0x168>
 80119ce:	6822      	ldr	r2, [r4, #0]
 80119d0:	07d2      	lsls	r2, r2, #31
 80119d2:	d501      	bpl.n	80119d8 <_printf_float+0x16c>
 80119d4:	3301      	adds	r3, #1
 80119d6:	6123      	str	r3, [r4, #16]
 80119d8:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80119dc:	2b00      	cmp	r3, #0
 80119de:	d09c      	beq.n	801191a <_printf_float+0xae>
 80119e0:	232d      	movs	r3, #45	; 0x2d
 80119e2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80119e6:	e798      	b.n	801191a <_printf_float+0xae>
 80119e8:	9a06      	ldr	r2, [sp, #24]
 80119ea:	2a47      	cmp	r2, #71	; 0x47
 80119ec:	d1be      	bne.n	801196c <_printf_float+0x100>
 80119ee:	2b00      	cmp	r3, #0
 80119f0:	d1bc      	bne.n	801196c <_printf_float+0x100>
 80119f2:	2301      	movs	r3, #1
 80119f4:	e7b9      	b.n	801196a <_printf_float+0xfe>
 80119f6:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80119fa:	d118      	bne.n	8011a2e <_printf_float+0x1c2>
 80119fc:	2900      	cmp	r1, #0
 80119fe:	6863      	ldr	r3, [r4, #4]
 8011a00:	dd0b      	ble.n	8011a1a <_printf_float+0x1ae>
 8011a02:	6121      	str	r1, [r4, #16]
 8011a04:	b913      	cbnz	r3, 8011a0c <_printf_float+0x1a0>
 8011a06:	6822      	ldr	r2, [r4, #0]
 8011a08:	07d0      	lsls	r0, r2, #31
 8011a0a:	d502      	bpl.n	8011a12 <_printf_float+0x1a6>
 8011a0c:	3301      	adds	r3, #1
 8011a0e:	440b      	add	r3, r1
 8011a10:	6123      	str	r3, [r4, #16]
 8011a12:	65a1      	str	r1, [r4, #88]	; 0x58
 8011a14:	f04f 0900 	mov.w	r9, #0
 8011a18:	e7de      	b.n	80119d8 <_printf_float+0x16c>
 8011a1a:	b913      	cbnz	r3, 8011a22 <_printf_float+0x1b6>
 8011a1c:	6822      	ldr	r2, [r4, #0]
 8011a1e:	07d2      	lsls	r2, r2, #31
 8011a20:	d501      	bpl.n	8011a26 <_printf_float+0x1ba>
 8011a22:	3302      	adds	r3, #2
 8011a24:	e7f4      	b.n	8011a10 <_printf_float+0x1a4>
 8011a26:	2301      	movs	r3, #1
 8011a28:	e7f2      	b.n	8011a10 <_printf_float+0x1a4>
 8011a2a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8011a2e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011a30:	4299      	cmp	r1, r3
 8011a32:	db05      	blt.n	8011a40 <_printf_float+0x1d4>
 8011a34:	6823      	ldr	r3, [r4, #0]
 8011a36:	6121      	str	r1, [r4, #16]
 8011a38:	07d8      	lsls	r0, r3, #31
 8011a3a:	d5ea      	bpl.n	8011a12 <_printf_float+0x1a6>
 8011a3c:	1c4b      	adds	r3, r1, #1
 8011a3e:	e7e7      	b.n	8011a10 <_printf_float+0x1a4>
 8011a40:	2900      	cmp	r1, #0
 8011a42:	bfd4      	ite	le
 8011a44:	f1c1 0202 	rsble	r2, r1, #2
 8011a48:	2201      	movgt	r2, #1
 8011a4a:	4413      	add	r3, r2
 8011a4c:	e7e0      	b.n	8011a10 <_printf_float+0x1a4>
 8011a4e:	6823      	ldr	r3, [r4, #0]
 8011a50:	055a      	lsls	r2, r3, #21
 8011a52:	d407      	bmi.n	8011a64 <_printf_float+0x1f8>
 8011a54:	6923      	ldr	r3, [r4, #16]
 8011a56:	4642      	mov	r2, r8
 8011a58:	4631      	mov	r1, r6
 8011a5a:	4628      	mov	r0, r5
 8011a5c:	47b8      	blx	r7
 8011a5e:	3001      	adds	r0, #1
 8011a60:	d12c      	bne.n	8011abc <_printf_float+0x250>
 8011a62:	e764      	b.n	801192e <_printf_float+0xc2>
 8011a64:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8011a68:	f240 80e0 	bls.w	8011c2c <_printf_float+0x3c0>
 8011a6c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8011a70:	2200      	movs	r2, #0
 8011a72:	2300      	movs	r3, #0
 8011a74:	f7ef f850 	bl	8000b18 <__aeabi_dcmpeq>
 8011a78:	2800      	cmp	r0, #0
 8011a7a:	d034      	beq.n	8011ae6 <_printf_float+0x27a>
 8011a7c:	4a37      	ldr	r2, [pc, #220]	; (8011b5c <_printf_float+0x2f0>)
 8011a7e:	2301      	movs	r3, #1
 8011a80:	4631      	mov	r1, r6
 8011a82:	4628      	mov	r0, r5
 8011a84:	47b8      	blx	r7
 8011a86:	3001      	adds	r0, #1
 8011a88:	f43f af51 	beq.w	801192e <_printf_float+0xc2>
 8011a8c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8011a90:	429a      	cmp	r2, r3
 8011a92:	db02      	blt.n	8011a9a <_printf_float+0x22e>
 8011a94:	6823      	ldr	r3, [r4, #0]
 8011a96:	07d8      	lsls	r0, r3, #31
 8011a98:	d510      	bpl.n	8011abc <_printf_float+0x250>
 8011a9a:	ee18 3a10 	vmov	r3, s16
 8011a9e:	4652      	mov	r2, sl
 8011aa0:	4631      	mov	r1, r6
 8011aa2:	4628      	mov	r0, r5
 8011aa4:	47b8      	blx	r7
 8011aa6:	3001      	adds	r0, #1
 8011aa8:	f43f af41 	beq.w	801192e <_printf_float+0xc2>
 8011aac:	f04f 0800 	mov.w	r8, #0
 8011ab0:	f104 091a 	add.w	r9, r4, #26
 8011ab4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011ab6:	3b01      	subs	r3, #1
 8011ab8:	4543      	cmp	r3, r8
 8011aba:	dc09      	bgt.n	8011ad0 <_printf_float+0x264>
 8011abc:	6823      	ldr	r3, [r4, #0]
 8011abe:	079b      	lsls	r3, r3, #30
 8011ac0:	f100 8105 	bmi.w	8011cce <_printf_float+0x462>
 8011ac4:	68e0      	ldr	r0, [r4, #12]
 8011ac6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8011ac8:	4298      	cmp	r0, r3
 8011aca:	bfb8      	it	lt
 8011acc:	4618      	movlt	r0, r3
 8011ace:	e730      	b.n	8011932 <_printf_float+0xc6>
 8011ad0:	2301      	movs	r3, #1
 8011ad2:	464a      	mov	r2, r9
 8011ad4:	4631      	mov	r1, r6
 8011ad6:	4628      	mov	r0, r5
 8011ad8:	47b8      	blx	r7
 8011ada:	3001      	adds	r0, #1
 8011adc:	f43f af27 	beq.w	801192e <_printf_float+0xc2>
 8011ae0:	f108 0801 	add.w	r8, r8, #1
 8011ae4:	e7e6      	b.n	8011ab4 <_printf_float+0x248>
 8011ae6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011ae8:	2b00      	cmp	r3, #0
 8011aea:	dc39      	bgt.n	8011b60 <_printf_float+0x2f4>
 8011aec:	4a1b      	ldr	r2, [pc, #108]	; (8011b5c <_printf_float+0x2f0>)
 8011aee:	2301      	movs	r3, #1
 8011af0:	4631      	mov	r1, r6
 8011af2:	4628      	mov	r0, r5
 8011af4:	47b8      	blx	r7
 8011af6:	3001      	adds	r0, #1
 8011af8:	f43f af19 	beq.w	801192e <_printf_float+0xc2>
 8011afc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8011b00:	4313      	orrs	r3, r2
 8011b02:	d102      	bne.n	8011b0a <_printf_float+0x29e>
 8011b04:	6823      	ldr	r3, [r4, #0]
 8011b06:	07d9      	lsls	r1, r3, #31
 8011b08:	d5d8      	bpl.n	8011abc <_printf_float+0x250>
 8011b0a:	ee18 3a10 	vmov	r3, s16
 8011b0e:	4652      	mov	r2, sl
 8011b10:	4631      	mov	r1, r6
 8011b12:	4628      	mov	r0, r5
 8011b14:	47b8      	blx	r7
 8011b16:	3001      	adds	r0, #1
 8011b18:	f43f af09 	beq.w	801192e <_printf_float+0xc2>
 8011b1c:	f04f 0900 	mov.w	r9, #0
 8011b20:	f104 0a1a 	add.w	sl, r4, #26
 8011b24:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011b26:	425b      	negs	r3, r3
 8011b28:	454b      	cmp	r3, r9
 8011b2a:	dc01      	bgt.n	8011b30 <_printf_float+0x2c4>
 8011b2c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011b2e:	e792      	b.n	8011a56 <_printf_float+0x1ea>
 8011b30:	2301      	movs	r3, #1
 8011b32:	4652      	mov	r2, sl
 8011b34:	4631      	mov	r1, r6
 8011b36:	4628      	mov	r0, r5
 8011b38:	47b8      	blx	r7
 8011b3a:	3001      	adds	r0, #1
 8011b3c:	f43f aef7 	beq.w	801192e <_printf_float+0xc2>
 8011b40:	f109 0901 	add.w	r9, r9, #1
 8011b44:	e7ee      	b.n	8011b24 <_printf_float+0x2b8>
 8011b46:	bf00      	nop
 8011b48:	7fefffff 	.word	0x7fefffff
 8011b4c:	0801ac5c 	.word	0x0801ac5c
 8011b50:	0801ac60 	.word	0x0801ac60
 8011b54:	0801ac68 	.word	0x0801ac68
 8011b58:	0801ac64 	.word	0x0801ac64
 8011b5c:	0801ac6c 	.word	0x0801ac6c
 8011b60:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8011b62:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8011b64:	429a      	cmp	r2, r3
 8011b66:	bfa8      	it	ge
 8011b68:	461a      	movge	r2, r3
 8011b6a:	2a00      	cmp	r2, #0
 8011b6c:	4691      	mov	r9, r2
 8011b6e:	dc37      	bgt.n	8011be0 <_printf_float+0x374>
 8011b70:	f04f 0b00 	mov.w	fp, #0
 8011b74:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8011b78:	f104 021a 	add.w	r2, r4, #26
 8011b7c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8011b7e:	9305      	str	r3, [sp, #20]
 8011b80:	eba3 0309 	sub.w	r3, r3, r9
 8011b84:	455b      	cmp	r3, fp
 8011b86:	dc33      	bgt.n	8011bf0 <_printf_float+0x384>
 8011b88:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8011b8c:	429a      	cmp	r2, r3
 8011b8e:	db3b      	blt.n	8011c08 <_printf_float+0x39c>
 8011b90:	6823      	ldr	r3, [r4, #0]
 8011b92:	07da      	lsls	r2, r3, #31
 8011b94:	d438      	bmi.n	8011c08 <_printf_float+0x39c>
 8011b96:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011b98:	9a05      	ldr	r2, [sp, #20]
 8011b9a:	9909      	ldr	r1, [sp, #36]	; 0x24
 8011b9c:	1a9a      	subs	r2, r3, r2
 8011b9e:	eba3 0901 	sub.w	r9, r3, r1
 8011ba2:	4591      	cmp	r9, r2
 8011ba4:	bfa8      	it	ge
 8011ba6:	4691      	movge	r9, r2
 8011ba8:	f1b9 0f00 	cmp.w	r9, #0
 8011bac:	dc35      	bgt.n	8011c1a <_printf_float+0x3ae>
 8011bae:	f04f 0800 	mov.w	r8, #0
 8011bb2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8011bb6:	f104 0a1a 	add.w	sl, r4, #26
 8011bba:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8011bbe:	1a9b      	subs	r3, r3, r2
 8011bc0:	eba3 0309 	sub.w	r3, r3, r9
 8011bc4:	4543      	cmp	r3, r8
 8011bc6:	f77f af79 	ble.w	8011abc <_printf_float+0x250>
 8011bca:	2301      	movs	r3, #1
 8011bcc:	4652      	mov	r2, sl
 8011bce:	4631      	mov	r1, r6
 8011bd0:	4628      	mov	r0, r5
 8011bd2:	47b8      	blx	r7
 8011bd4:	3001      	adds	r0, #1
 8011bd6:	f43f aeaa 	beq.w	801192e <_printf_float+0xc2>
 8011bda:	f108 0801 	add.w	r8, r8, #1
 8011bde:	e7ec      	b.n	8011bba <_printf_float+0x34e>
 8011be0:	4613      	mov	r3, r2
 8011be2:	4631      	mov	r1, r6
 8011be4:	4642      	mov	r2, r8
 8011be6:	4628      	mov	r0, r5
 8011be8:	47b8      	blx	r7
 8011bea:	3001      	adds	r0, #1
 8011bec:	d1c0      	bne.n	8011b70 <_printf_float+0x304>
 8011bee:	e69e      	b.n	801192e <_printf_float+0xc2>
 8011bf0:	2301      	movs	r3, #1
 8011bf2:	4631      	mov	r1, r6
 8011bf4:	4628      	mov	r0, r5
 8011bf6:	9205      	str	r2, [sp, #20]
 8011bf8:	47b8      	blx	r7
 8011bfa:	3001      	adds	r0, #1
 8011bfc:	f43f ae97 	beq.w	801192e <_printf_float+0xc2>
 8011c00:	9a05      	ldr	r2, [sp, #20]
 8011c02:	f10b 0b01 	add.w	fp, fp, #1
 8011c06:	e7b9      	b.n	8011b7c <_printf_float+0x310>
 8011c08:	ee18 3a10 	vmov	r3, s16
 8011c0c:	4652      	mov	r2, sl
 8011c0e:	4631      	mov	r1, r6
 8011c10:	4628      	mov	r0, r5
 8011c12:	47b8      	blx	r7
 8011c14:	3001      	adds	r0, #1
 8011c16:	d1be      	bne.n	8011b96 <_printf_float+0x32a>
 8011c18:	e689      	b.n	801192e <_printf_float+0xc2>
 8011c1a:	9a05      	ldr	r2, [sp, #20]
 8011c1c:	464b      	mov	r3, r9
 8011c1e:	4442      	add	r2, r8
 8011c20:	4631      	mov	r1, r6
 8011c22:	4628      	mov	r0, r5
 8011c24:	47b8      	blx	r7
 8011c26:	3001      	adds	r0, #1
 8011c28:	d1c1      	bne.n	8011bae <_printf_float+0x342>
 8011c2a:	e680      	b.n	801192e <_printf_float+0xc2>
 8011c2c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8011c2e:	2a01      	cmp	r2, #1
 8011c30:	dc01      	bgt.n	8011c36 <_printf_float+0x3ca>
 8011c32:	07db      	lsls	r3, r3, #31
 8011c34:	d538      	bpl.n	8011ca8 <_printf_float+0x43c>
 8011c36:	2301      	movs	r3, #1
 8011c38:	4642      	mov	r2, r8
 8011c3a:	4631      	mov	r1, r6
 8011c3c:	4628      	mov	r0, r5
 8011c3e:	47b8      	blx	r7
 8011c40:	3001      	adds	r0, #1
 8011c42:	f43f ae74 	beq.w	801192e <_printf_float+0xc2>
 8011c46:	ee18 3a10 	vmov	r3, s16
 8011c4a:	4652      	mov	r2, sl
 8011c4c:	4631      	mov	r1, r6
 8011c4e:	4628      	mov	r0, r5
 8011c50:	47b8      	blx	r7
 8011c52:	3001      	adds	r0, #1
 8011c54:	f43f ae6b 	beq.w	801192e <_printf_float+0xc2>
 8011c58:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8011c5c:	2200      	movs	r2, #0
 8011c5e:	2300      	movs	r3, #0
 8011c60:	f7ee ff5a 	bl	8000b18 <__aeabi_dcmpeq>
 8011c64:	b9d8      	cbnz	r0, 8011c9e <_printf_float+0x432>
 8011c66:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011c68:	f108 0201 	add.w	r2, r8, #1
 8011c6c:	3b01      	subs	r3, #1
 8011c6e:	4631      	mov	r1, r6
 8011c70:	4628      	mov	r0, r5
 8011c72:	47b8      	blx	r7
 8011c74:	3001      	adds	r0, #1
 8011c76:	d10e      	bne.n	8011c96 <_printf_float+0x42a>
 8011c78:	e659      	b.n	801192e <_printf_float+0xc2>
 8011c7a:	2301      	movs	r3, #1
 8011c7c:	4652      	mov	r2, sl
 8011c7e:	4631      	mov	r1, r6
 8011c80:	4628      	mov	r0, r5
 8011c82:	47b8      	blx	r7
 8011c84:	3001      	adds	r0, #1
 8011c86:	f43f ae52 	beq.w	801192e <_printf_float+0xc2>
 8011c8a:	f108 0801 	add.w	r8, r8, #1
 8011c8e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011c90:	3b01      	subs	r3, #1
 8011c92:	4543      	cmp	r3, r8
 8011c94:	dcf1      	bgt.n	8011c7a <_printf_float+0x40e>
 8011c96:	464b      	mov	r3, r9
 8011c98:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8011c9c:	e6dc      	b.n	8011a58 <_printf_float+0x1ec>
 8011c9e:	f04f 0800 	mov.w	r8, #0
 8011ca2:	f104 0a1a 	add.w	sl, r4, #26
 8011ca6:	e7f2      	b.n	8011c8e <_printf_float+0x422>
 8011ca8:	2301      	movs	r3, #1
 8011caa:	4642      	mov	r2, r8
 8011cac:	e7df      	b.n	8011c6e <_printf_float+0x402>
 8011cae:	2301      	movs	r3, #1
 8011cb0:	464a      	mov	r2, r9
 8011cb2:	4631      	mov	r1, r6
 8011cb4:	4628      	mov	r0, r5
 8011cb6:	47b8      	blx	r7
 8011cb8:	3001      	adds	r0, #1
 8011cba:	f43f ae38 	beq.w	801192e <_printf_float+0xc2>
 8011cbe:	f108 0801 	add.w	r8, r8, #1
 8011cc2:	68e3      	ldr	r3, [r4, #12]
 8011cc4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8011cc6:	1a5b      	subs	r3, r3, r1
 8011cc8:	4543      	cmp	r3, r8
 8011cca:	dcf0      	bgt.n	8011cae <_printf_float+0x442>
 8011ccc:	e6fa      	b.n	8011ac4 <_printf_float+0x258>
 8011cce:	f04f 0800 	mov.w	r8, #0
 8011cd2:	f104 0919 	add.w	r9, r4, #25
 8011cd6:	e7f4      	b.n	8011cc2 <_printf_float+0x456>

08011cd8 <_printf_common>:
 8011cd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011cdc:	4616      	mov	r6, r2
 8011cde:	4699      	mov	r9, r3
 8011ce0:	688a      	ldr	r2, [r1, #8]
 8011ce2:	690b      	ldr	r3, [r1, #16]
 8011ce4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8011ce8:	4293      	cmp	r3, r2
 8011cea:	bfb8      	it	lt
 8011cec:	4613      	movlt	r3, r2
 8011cee:	6033      	str	r3, [r6, #0]
 8011cf0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8011cf4:	4607      	mov	r7, r0
 8011cf6:	460c      	mov	r4, r1
 8011cf8:	b10a      	cbz	r2, 8011cfe <_printf_common+0x26>
 8011cfa:	3301      	adds	r3, #1
 8011cfc:	6033      	str	r3, [r6, #0]
 8011cfe:	6823      	ldr	r3, [r4, #0]
 8011d00:	0699      	lsls	r1, r3, #26
 8011d02:	bf42      	ittt	mi
 8011d04:	6833      	ldrmi	r3, [r6, #0]
 8011d06:	3302      	addmi	r3, #2
 8011d08:	6033      	strmi	r3, [r6, #0]
 8011d0a:	6825      	ldr	r5, [r4, #0]
 8011d0c:	f015 0506 	ands.w	r5, r5, #6
 8011d10:	d106      	bne.n	8011d20 <_printf_common+0x48>
 8011d12:	f104 0a19 	add.w	sl, r4, #25
 8011d16:	68e3      	ldr	r3, [r4, #12]
 8011d18:	6832      	ldr	r2, [r6, #0]
 8011d1a:	1a9b      	subs	r3, r3, r2
 8011d1c:	42ab      	cmp	r3, r5
 8011d1e:	dc26      	bgt.n	8011d6e <_printf_common+0x96>
 8011d20:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8011d24:	1e13      	subs	r3, r2, #0
 8011d26:	6822      	ldr	r2, [r4, #0]
 8011d28:	bf18      	it	ne
 8011d2a:	2301      	movne	r3, #1
 8011d2c:	0692      	lsls	r2, r2, #26
 8011d2e:	d42b      	bmi.n	8011d88 <_printf_common+0xb0>
 8011d30:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8011d34:	4649      	mov	r1, r9
 8011d36:	4638      	mov	r0, r7
 8011d38:	47c0      	blx	r8
 8011d3a:	3001      	adds	r0, #1
 8011d3c:	d01e      	beq.n	8011d7c <_printf_common+0xa4>
 8011d3e:	6823      	ldr	r3, [r4, #0]
 8011d40:	68e5      	ldr	r5, [r4, #12]
 8011d42:	6832      	ldr	r2, [r6, #0]
 8011d44:	f003 0306 	and.w	r3, r3, #6
 8011d48:	2b04      	cmp	r3, #4
 8011d4a:	bf08      	it	eq
 8011d4c:	1aad      	subeq	r5, r5, r2
 8011d4e:	68a3      	ldr	r3, [r4, #8]
 8011d50:	6922      	ldr	r2, [r4, #16]
 8011d52:	bf0c      	ite	eq
 8011d54:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8011d58:	2500      	movne	r5, #0
 8011d5a:	4293      	cmp	r3, r2
 8011d5c:	bfc4      	itt	gt
 8011d5e:	1a9b      	subgt	r3, r3, r2
 8011d60:	18ed      	addgt	r5, r5, r3
 8011d62:	2600      	movs	r6, #0
 8011d64:	341a      	adds	r4, #26
 8011d66:	42b5      	cmp	r5, r6
 8011d68:	d11a      	bne.n	8011da0 <_printf_common+0xc8>
 8011d6a:	2000      	movs	r0, #0
 8011d6c:	e008      	b.n	8011d80 <_printf_common+0xa8>
 8011d6e:	2301      	movs	r3, #1
 8011d70:	4652      	mov	r2, sl
 8011d72:	4649      	mov	r1, r9
 8011d74:	4638      	mov	r0, r7
 8011d76:	47c0      	blx	r8
 8011d78:	3001      	adds	r0, #1
 8011d7a:	d103      	bne.n	8011d84 <_printf_common+0xac>
 8011d7c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8011d80:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011d84:	3501      	adds	r5, #1
 8011d86:	e7c6      	b.n	8011d16 <_printf_common+0x3e>
 8011d88:	18e1      	adds	r1, r4, r3
 8011d8a:	1c5a      	adds	r2, r3, #1
 8011d8c:	2030      	movs	r0, #48	; 0x30
 8011d8e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8011d92:	4422      	add	r2, r4
 8011d94:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8011d98:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8011d9c:	3302      	adds	r3, #2
 8011d9e:	e7c7      	b.n	8011d30 <_printf_common+0x58>
 8011da0:	2301      	movs	r3, #1
 8011da2:	4622      	mov	r2, r4
 8011da4:	4649      	mov	r1, r9
 8011da6:	4638      	mov	r0, r7
 8011da8:	47c0      	blx	r8
 8011daa:	3001      	adds	r0, #1
 8011dac:	d0e6      	beq.n	8011d7c <_printf_common+0xa4>
 8011dae:	3601      	adds	r6, #1
 8011db0:	e7d9      	b.n	8011d66 <_printf_common+0x8e>
	...

08011db4 <_printf_i>:
 8011db4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8011db8:	7e0f      	ldrb	r7, [r1, #24]
 8011dba:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8011dbc:	2f78      	cmp	r7, #120	; 0x78
 8011dbe:	4691      	mov	r9, r2
 8011dc0:	4680      	mov	r8, r0
 8011dc2:	460c      	mov	r4, r1
 8011dc4:	469a      	mov	sl, r3
 8011dc6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8011dca:	d807      	bhi.n	8011ddc <_printf_i+0x28>
 8011dcc:	2f62      	cmp	r7, #98	; 0x62
 8011dce:	d80a      	bhi.n	8011de6 <_printf_i+0x32>
 8011dd0:	2f00      	cmp	r7, #0
 8011dd2:	f000 80d8 	beq.w	8011f86 <_printf_i+0x1d2>
 8011dd6:	2f58      	cmp	r7, #88	; 0x58
 8011dd8:	f000 80a3 	beq.w	8011f22 <_printf_i+0x16e>
 8011ddc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8011de0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8011de4:	e03a      	b.n	8011e5c <_printf_i+0xa8>
 8011de6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8011dea:	2b15      	cmp	r3, #21
 8011dec:	d8f6      	bhi.n	8011ddc <_printf_i+0x28>
 8011dee:	a101      	add	r1, pc, #4	; (adr r1, 8011df4 <_printf_i+0x40>)
 8011df0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8011df4:	08011e4d 	.word	0x08011e4d
 8011df8:	08011e61 	.word	0x08011e61
 8011dfc:	08011ddd 	.word	0x08011ddd
 8011e00:	08011ddd 	.word	0x08011ddd
 8011e04:	08011ddd 	.word	0x08011ddd
 8011e08:	08011ddd 	.word	0x08011ddd
 8011e0c:	08011e61 	.word	0x08011e61
 8011e10:	08011ddd 	.word	0x08011ddd
 8011e14:	08011ddd 	.word	0x08011ddd
 8011e18:	08011ddd 	.word	0x08011ddd
 8011e1c:	08011ddd 	.word	0x08011ddd
 8011e20:	08011f6d 	.word	0x08011f6d
 8011e24:	08011e91 	.word	0x08011e91
 8011e28:	08011f4f 	.word	0x08011f4f
 8011e2c:	08011ddd 	.word	0x08011ddd
 8011e30:	08011ddd 	.word	0x08011ddd
 8011e34:	08011f8f 	.word	0x08011f8f
 8011e38:	08011ddd 	.word	0x08011ddd
 8011e3c:	08011e91 	.word	0x08011e91
 8011e40:	08011ddd 	.word	0x08011ddd
 8011e44:	08011ddd 	.word	0x08011ddd
 8011e48:	08011f57 	.word	0x08011f57
 8011e4c:	682b      	ldr	r3, [r5, #0]
 8011e4e:	1d1a      	adds	r2, r3, #4
 8011e50:	681b      	ldr	r3, [r3, #0]
 8011e52:	602a      	str	r2, [r5, #0]
 8011e54:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8011e58:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8011e5c:	2301      	movs	r3, #1
 8011e5e:	e0a3      	b.n	8011fa8 <_printf_i+0x1f4>
 8011e60:	6820      	ldr	r0, [r4, #0]
 8011e62:	6829      	ldr	r1, [r5, #0]
 8011e64:	0606      	lsls	r6, r0, #24
 8011e66:	f101 0304 	add.w	r3, r1, #4
 8011e6a:	d50a      	bpl.n	8011e82 <_printf_i+0xce>
 8011e6c:	680e      	ldr	r6, [r1, #0]
 8011e6e:	602b      	str	r3, [r5, #0]
 8011e70:	2e00      	cmp	r6, #0
 8011e72:	da03      	bge.n	8011e7c <_printf_i+0xc8>
 8011e74:	232d      	movs	r3, #45	; 0x2d
 8011e76:	4276      	negs	r6, r6
 8011e78:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8011e7c:	485e      	ldr	r0, [pc, #376]	; (8011ff8 <_printf_i+0x244>)
 8011e7e:	230a      	movs	r3, #10
 8011e80:	e019      	b.n	8011eb6 <_printf_i+0x102>
 8011e82:	680e      	ldr	r6, [r1, #0]
 8011e84:	602b      	str	r3, [r5, #0]
 8011e86:	f010 0f40 	tst.w	r0, #64	; 0x40
 8011e8a:	bf18      	it	ne
 8011e8c:	b236      	sxthne	r6, r6
 8011e8e:	e7ef      	b.n	8011e70 <_printf_i+0xbc>
 8011e90:	682b      	ldr	r3, [r5, #0]
 8011e92:	6820      	ldr	r0, [r4, #0]
 8011e94:	1d19      	adds	r1, r3, #4
 8011e96:	6029      	str	r1, [r5, #0]
 8011e98:	0601      	lsls	r1, r0, #24
 8011e9a:	d501      	bpl.n	8011ea0 <_printf_i+0xec>
 8011e9c:	681e      	ldr	r6, [r3, #0]
 8011e9e:	e002      	b.n	8011ea6 <_printf_i+0xf2>
 8011ea0:	0646      	lsls	r6, r0, #25
 8011ea2:	d5fb      	bpl.n	8011e9c <_printf_i+0xe8>
 8011ea4:	881e      	ldrh	r6, [r3, #0]
 8011ea6:	4854      	ldr	r0, [pc, #336]	; (8011ff8 <_printf_i+0x244>)
 8011ea8:	2f6f      	cmp	r7, #111	; 0x6f
 8011eaa:	bf0c      	ite	eq
 8011eac:	2308      	moveq	r3, #8
 8011eae:	230a      	movne	r3, #10
 8011eb0:	2100      	movs	r1, #0
 8011eb2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8011eb6:	6865      	ldr	r5, [r4, #4]
 8011eb8:	60a5      	str	r5, [r4, #8]
 8011eba:	2d00      	cmp	r5, #0
 8011ebc:	bfa2      	ittt	ge
 8011ebe:	6821      	ldrge	r1, [r4, #0]
 8011ec0:	f021 0104 	bicge.w	r1, r1, #4
 8011ec4:	6021      	strge	r1, [r4, #0]
 8011ec6:	b90e      	cbnz	r6, 8011ecc <_printf_i+0x118>
 8011ec8:	2d00      	cmp	r5, #0
 8011eca:	d04d      	beq.n	8011f68 <_printf_i+0x1b4>
 8011ecc:	4615      	mov	r5, r2
 8011ece:	fbb6 f1f3 	udiv	r1, r6, r3
 8011ed2:	fb03 6711 	mls	r7, r3, r1, r6
 8011ed6:	5dc7      	ldrb	r7, [r0, r7]
 8011ed8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8011edc:	4637      	mov	r7, r6
 8011ede:	42bb      	cmp	r3, r7
 8011ee0:	460e      	mov	r6, r1
 8011ee2:	d9f4      	bls.n	8011ece <_printf_i+0x11a>
 8011ee4:	2b08      	cmp	r3, #8
 8011ee6:	d10b      	bne.n	8011f00 <_printf_i+0x14c>
 8011ee8:	6823      	ldr	r3, [r4, #0]
 8011eea:	07de      	lsls	r6, r3, #31
 8011eec:	d508      	bpl.n	8011f00 <_printf_i+0x14c>
 8011eee:	6923      	ldr	r3, [r4, #16]
 8011ef0:	6861      	ldr	r1, [r4, #4]
 8011ef2:	4299      	cmp	r1, r3
 8011ef4:	bfde      	ittt	le
 8011ef6:	2330      	movle	r3, #48	; 0x30
 8011ef8:	f805 3c01 	strble.w	r3, [r5, #-1]
 8011efc:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8011f00:	1b52      	subs	r2, r2, r5
 8011f02:	6122      	str	r2, [r4, #16]
 8011f04:	f8cd a000 	str.w	sl, [sp]
 8011f08:	464b      	mov	r3, r9
 8011f0a:	aa03      	add	r2, sp, #12
 8011f0c:	4621      	mov	r1, r4
 8011f0e:	4640      	mov	r0, r8
 8011f10:	f7ff fee2 	bl	8011cd8 <_printf_common>
 8011f14:	3001      	adds	r0, #1
 8011f16:	d14c      	bne.n	8011fb2 <_printf_i+0x1fe>
 8011f18:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8011f1c:	b004      	add	sp, #16
 8011f1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011f22:	4835      	ldr	r0, [pc, #212]	; (8011ff8 <_printf_i+0x244>)
 8011f24:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8011f28:	6829      	ldr	r1, [r5, #0]
 8011f2a:	6823      	ldr	r3, [r4, #0]
 8011f2c:	f851 6b04 	ldr.w	r6, [r1], #4
 8011f30:	6029      	str	r1, [r5, #0]
 8011f32:	061d      	lsls	r5, r3, #24
 8011f34:	d514      	bpl.n	8011f60 <_printf_i+0x1ac>
 8011f36:	07df      	lsls	r7, r3, #31
 8011f38:	bf44      	itt	mi
 8011f3a:	f043 0320 	orrmi.w	r3, r3, #32
 8011f3e:	6023      	strmi	r3, [r4, #0]
 8011f40:	b91e      	cbnz	r6, 8011f4a <_printf_i+0x196>
 8011f42:	6823      	ldr	r3, [r4, #0]
 8011f44:	f023 0320 	bic.w	r3, r3, #32
 8011f48:	6023      	str	r3, [r4, #0]
 8011f4a:	2310      	movs	r3, #16
 8011f4c:	e7b0      	b.n	8011eb0 <_printf_i+0xfc>
 8011f4e:	6823      	ldr	r3, [r4, #0]
 8011f50:	f043 0320 	orr.w	r3, r3, #32
 8011f54:	6023      	str	r3, [r4, #0]
 8011f56:	2378      	movs	r3, #120	; 0x78
 8011f58:	4828      	ldr	r0, [pc, #160]	; (8011ffc <_printf_i+0x248>)
 8011f5a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8011f5e:	e7e3      	b.n	8011f28 <_printf_i+0x174>
 8011f60:	0659      	lsls	r1, r3, #25
 8011f62:	bf48      	it	mi
 8011f64:	b2b6      	uxthmi	r6, r6
 8011f66:	e7e6      	b.n	8011f36 <_printf_i+0x182>
 8011f68:	4615      	mov	r5, r2
 8011f6a:	e7bb      	b.n	8011ee4 <_printf_i+0x130>
 8011f6c:	682b      	ldr	r3, [r5, #0]
 8011f6e:	6826      	ldr	r6, [r4, #0]
 8011f70:	6961      	ldr	r1, [r4, #20]
 8011f72:	1d18      	adds	r0, r3, #4
 8011f74:	6028      	str	r0, [r5, #0]
 8011f76:	0635      	lsls	r5, r6, #24
 8011f78:	681b      	ldr	r3, [r3, #0]
 8011f7a:	d501      	bpl.n	8011f80 <_printf_i+0x1cc>
 8011f7c:	6019      	str	r1, [r3, #0]
 8011f7e:	e002      	b.n	8011f86 <_printf_i+0x1d2>
 8011f80:	0670      	lsls	r0, r6, #25
 8011f82:	d5fb      	bpl.n	8011f7c <_printf_i+0x1c8>
 8011f84:	8019      	strh	r1, [r3, #0]
 8011f86:	2300      	movs	r3, #0
 8011f88:	6123      	str	r3, [r4, #16]
 8011f8a:	4615      	mov	r5, r2
 8011f8c:	e7ba      	b.n	8011f04 <_printf_i+0x150>
 8011f8e:	682b      	ldr	r3, [r5, #0]
 8011f90:	1d1a      	adds	r2, r3, #4
 8011f92:	602a      	str	r2, [r5, #0]
 8011f94:	681d      	ldr	r5, [r3, #0]
 8011f96:	6862      	ldr	r2, [r4, #4]
 8011f98:	2100      	movs	r1, #0
 8011f9a:	4628      	mov	r0, r5
 8011f9c:	f7ee f948 	bl	8000230 <memchr>
 8011fa0:	b108      	cbz	r0, 8011fa6 <_printf_i+0x1f2>
 8011fa2:	1b40      	subs	r0, r0, r5
 8011fa4:	6060      	str	r0, [r4, #4]
 8011fa6:	6863      	ldr	r3, [r4, #4]
 8011fa8:	6123      	str	r3, [r4, #16]
 8011faa:	2300      	movs	r3, #0
 8011fac:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8011fb0:	e7a8      	b.n	8011f04 <_printf_i+0x150>
 8011fb2:	6923      	ldr	r3, [r4, #16]
 8011fb4:	462a      	mov	r2, r5
 8011fb6:	4649      	mov	r1, r9
 8011fb8:	4640      	mov	r0, r8
 8011fba:	47d0      	blx	sl
 8011fbc:	3001      	adds	r0, #1
 8011fbe:	d0ab      	beq.n	8011f18 <_printf_i+0x164>
 8011fc0:	6823      	ldr	r3, [r4, #0]
 8011fc2:	079b      	lsls	r3, r3, #30
 8011fc4:	d413      	bmi.n	8011fee <_printf_i+0x23a>
 8011fc6:	68e0      	ldr	r0, [r4, #12]
 8011fc8:	9b03      	ldr	r3, [sp, #12]
 8011fca:	4298      	cmp	r0, r3
 8011fcc:	bfb8      	it	lt
 8011fce:	4618      	movlt	r0, r3
 8011fd0:	e7a4      	b.n	8011f1c <_printf_i+0x168>
 8011fd2:	2301      	movs	r3, #1
 8011fd4:	4632      	mov	r2, r6
 8011fd6:	4649      	mov	r1, r9
 8011fd8:	4640      	mov	r0, r8
 8011fda:	47d0      	blx	sl
 8011fdc:	3001      	adds	r0, #1
 8011fde:	d09b      	beq.n	8011f18 <_printf_i+0x164>
 8011fe0:	3501      	adds	r5, #1
 8011fe2:	68e3      	ldr	r3, [r4, #12]
 8011fe4:	9903      	ldr	r1, [sp, #12]
 8011fe6:	1a5b      	subs	r3, r3, r1
 8011fe8:	42ab      	cmp	r3, r5
 8011fea:	dcf2      	bgt.n	8011fd2 <_printf_i+0x21e>
 8011fec:	e7eb      	b.n	8011fc6 <_printf_i+0x212>
 8011fee:	2500      	movs	r5, #0
 8011ff0:	f104 0619 	add.w	r6, r4, #25
 8011ff4:	e7f5      	b.n	8011fe2 <_printf_i+0x22e>
 8011ff6:	bf00      	nop
 8011ff8:	0801ac6e 	.word	0x0801ac6e
 8011ffc:	0801ac7f 	.word	0x0801ac7f

08012000 <siprintf>:
 8012000:	b40e      	push	{r1, r2, r3}
 8012002:	b500      	push	{lr}
 8012004:	b09c      	sub	sp, #112	; 0x70
 8012006:	ab1d      	add	r3, sp, #116	; 0x74
 8012008:	9002      	str	r0, [sp, #8]
 801200a:	9006      	str	r0, [sp, #24]
 801200c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8012010:	4809      	ldr	r0, [pc, #36]	; (8012038 <siprintf+0x38>)
 8012012:	9107      	str	r1, [sp, #28]
 8012014:	9104      	str	r1, [sp, #16]
 8012016:	4909      	ldr	r1, [pc, #36]	; (801203c <siprintf+0x3c>)
 8012018:	f853 2b04 	ldr.w	r2, [r3], #4
 801201c:	9105      	str	r1, [sp, #20]
 801201e:	6800      	ldr	r0, [r0, #0]
 8012020:	9301      	str	r3, [sp, #4]
 8012022:	a902      	add	r1, sp, #8
 8012024:	f001 fb68 	bl	80136f8 <_svfiprintf_r>
 8012028:	9b02      	ldr	r3, [sp, #8]
 801202a:	2200      	movs	r2, #0
 801202c:	701a      	strb	r2, [r3, #0]
 801202e:	b01c      	add	sp, #112	; 0x70
 8012030:	f85d eb04 	ldr.w	lr, [sp], #4
 8012034:	b003      	add	sp, #12
 8012036:	4770      	bx	lr
 8012038:	200003b4 	.word	0x200003b4
 801203c:	ffff0208 	.word	0xffff0208

08012040 <quorem>:
 8012040:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012044:	6903      	ldr	r3, [r0, #16]
 8012046:	690c      	ldr	r4, [r1, #16]
 8012048:	42a3      	cmp	r3, r4
 801204a:	4607      	mov	r7, r0
 801204c:	f2c0 8081 	blt.w	8012152 <quorem+0x112>
 8012050:	3c01      	subs	r4, #1
 8012052:	f101 0814 	add.w	r8, r1, #20
 8012056:	f100 0514 	add.w	r5, r0, #20
 801205a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801205e:	9301      	str	r3, [sp, #4]
 8012060:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8012064:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8012068:	3301      	adds	r3, #1
 801206a:	429a      	cmp	r2, r3
 801206c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8012070:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8012074:	fbb2 f6f3 	udiv	r6, r2, r3
 8012078:	d331      	bcc.n	80120de <quorem+0x9e>
 801207a:	f04f 0e00 	mov.w	lr, #0
 801207e:	4640      	mov	r0, r8
 8012080:	46ac      	mov	ip, r5
 8012082:	46f2      	mov	sl, lr
 8012084:	f850 2b04 	ldr.w	r2, [r0], #4
 8012088:	b293      	uxth	r3, r2
 801208a:	fb06 e303 	mla	r3, r6, r3, lr
 801208e:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8012092:	b29b      	uxth	r3, r3
 8012094:	ebaa 0303 	sub.w	r3, sl, r3
 8012098:	f8dc a000 	ldr.w	sl, [ip]
 801209c:	0c12      	lsrs	r2, r2, #16
 801209e:	fa13 f38a 	uxtah	r3, r3, sl
 80120a2:	fb06 e202 	mla	r2, r6, r2, lr
 80120a6:	9300      	str	r3, [sp, #0]
 80120a8:	9b00      	ldr	r3, [sp, #0]
 80120aa:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80120ae:	b292      	uxth	r2, r2
 80120b0:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80120b4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80120b8:	f8bd 3000 	ldrh.w	r3, [sp]
 80120bc:	4581      	cmp	r9, r0
 80120be:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80120c2:	f84c 3b04 	str.w	r3, [ip], #4
 80120c6:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80120ca:	d2db      	bcs.n	8012084 <quorem+0x44>
 80120cc:	f855 300b 	ldr.w	r3, [r5, fp]
 80120d0:	b92b      	cbnz	r3, 80120de <quorem+0x9e>
 80120d2:	9b01      	ldr	r3, [sp, #4]
 80120d4:	3b04      	subs	r3, #4
 80120d6:	429d      	cmp	r5, r3
 80120d8:	461a      	mov	r2, r3
 80120da:	d32e      	bcc.n	801213a <quorem+0xfa>
 80120dc:	613c      	str	r4, [r7, #16]
 80120de:	4638      	mov	r0, r7
 80120e0:	f001 f8b6 	bl	8013250 <__mcmp>
 80120e4:	2800      	cmp	r0, #0
 80120e6:	db24      	blt.n	8012132 <quorem+0xf2>
 80120e8:	3601      	adds	r6, #1
 80120ea:	4628      	mov	r0, r5
 80120ec:	f04f 0c00 	mov.w	ip, #0
 80120f0:	f858 2b04 	ldr.w	r2, [r8], #4
 80120f4:	f8d0 e000 	ldr.w	lr, [r0]
 80120f8:	b293      	uxth	r3, r2
 80120fa:	ebac 0303 	sub.w	r3, ip, r3
 80120fe:	0c12      	lsrs	r2, r2, #16
 8012100:	fa13 f38e 	uxtah	r3, r3, lr
 8012104:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8012108:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801210c:	b29b      	uxth	r3, r3
 801210e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8012112:	45c1      	cmp	r9, r8
 8012114:	f840 3b04 	str.w	r3, [r0], #4
 8012118:	ea4f 4c22 	mov.w	ip, r2, asr #16
 801211c:	d2e8      	bcs.n	80120f0 <quorem+0xb0>
 801211e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8012122:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8012126:	b922      	cbnz	r2, 8012132 <quorem+0xf2>
 8012128:	3b04      	subs	r3, #4
 801212a:	429d      	cmp	r5, r3
 801212c:	461a      	mov	r2, r3
 801212e:	d30a      	bcc.n	8012146 <quorem+0x106>
 8012130:	613c      	str	r4, [r7, #16]
 8012132:	4630      	mov	r0, r6
 8012134:	b003      	add	sp, #12
 8012136:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801213a:	6812      	ldr	r2, [r2, #0]
 801213c:	3b04      	subs	r3, #4
 801213e:	2a00      	cmp	r2, #0
 8012140:	d1cc      	bne.n	80120dc <quorem+0x9c>
 8012142:	3c01      	subs	r4, #1
 8012144:	e7c7      	b.n	80120d6 <quorem+0x96>
 8012146:	6812      	ldr	r2, [r2, #0]
 8012148:	3b04      	subs	r3, #4
 801214a:	2a00      	cmp	r2, #0
 801214c:	d1f0      	bne.n	8012130 <quorem+0xf0>
 801214e:	3c01      	subs	r4, #1
 8012150:	e7eb      	b.n	801212a <quorem+0xea>
 8012152:	2000      	movs	r0, #0
 8012154:	e7ee      	b.n	8012134 <quorem+0xf4>
	...

08012158 <_dtoa_r>:
 8012158:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801215c:	ed2d 8b04 	vpush	{d8-d9}
 8012160:	ec57 6b10 	vmov	r6, r7, d0
 8012164:	b093      	sub	sp, #76	; 0x4c
 8012166:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8012168:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 801216c:	9106      	str	r1, [sp, #24]
 801216e:	ee10 aa10 	vmov	sl, s0
 8012172:	4604      	mov	r4, r0
 8012174:	9209      	str	r2, [sp, #36]	; 0x24
 8012176:	930c      	str	r3, [sp, #48]	; 0x30
 8012178:	46bb      	mov	fp, r7
 801217a:	b975      	cbnz	r5, 801219a <_dtoa_r+0x42>
 801217c:	2010      	movs	r0, #16
 801217e:	f000 fddd 	bl	8012d3c <malloc>
 8012182:	4602      	mov	r2, r0
 8012184:	6260      	str	r0, [r4, #36]	; 0x24
 8012186:	b920      	cbnz	r0, 8012192 <_dtoa_r+0x3a>
 8012188:	4ba7      	ldr	r3, [pc, #668]	; (8012428 <_dtoa_r+0x2d0>)
 801218a:	21ea      	movs	r1, #234	; 0xea
 801218c:	48a7      	ldr	r0, [pc, #668]	; (801242c <_dtoa_r+0x2d4>)
 801218e:	f001 fbc3 	bl	8013918 <__assert_func>
 8012192:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8012196:	6005      	str	r5, [r0, #0]
 8012198:	60c5      	str	r5, [r0, #12]
 801219a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801219c:	6819      	ldr	r1, [r3, #0]
 801219e:	b151      	cbz	r1, 80121b6 <_dtoa_r+0x5e>
 80121a0:	685a      	ldr	r2, [r3, #4]
 80121a2:	604a      	str	r2, [r1, #4]
 80121a4:	2301      	movs	r3, #1
 80121a6:	4093      	lsls	r3, r2
 80121a8:	608b      	str	r3, [r1, #8]
 80121aa:	4620      	mov	r0, r4
 80121ac:	f000 fe0e 	bl	8012dcc <_Bfree>
 80121b0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80121b2:	2200      	movs	r2, #0
 80121b4:	601a      	str	r2, [r3, #0]
 80121b6:	1e3b      	subs	r3, r7, #0
 80121b8:	bfaa      	itet	ge
 80121ba:	2300      	movge	r3, #0
 80121bc:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 80121c0:	f8c8 3000 	strge.w	r3, [r8]
 80121c4:	4b9a      	ldr	r3, [pc, #616]	; (8012430 <_dtoa_r+0x2d8>)
 80121c6:	bfbc      	itt	lt
 80121c8:	2201      	movlt	r2, #1
 80121ca:	f8c8 2000 	strlt.w	r2, [r8]
 80121ce:	ea33 030b 	bics.w	r3, r3, fp
 80121d2:	d11b      	bne.n	801220c <_dtoa_r+0xb4>
 80121d4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80121d6:	f242 730f 	movw	r3, #9999	; 0x270f
 80121da:	6013      	str	r3, [r2, #0]
 80121dc:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80121e0:	4333      	orrs	r3, r6
 80121e2:	f000 8592 	beq.w	8012d0a <_dtoa_r+0xbb2>
 80121e6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80121e8:	b963      	cbnz	r3, 8012204 <_dtoa_r+0xac>
 80121ea:	4b92      	ldr	r3, [pc, #584]	; (8012434 <_dtoa_r+0x2dc>)
 80121ec:	e022      	b.n	8012234 <_dtoa_r+0xdc>
 80121ee:	4b92      	ldr	r3, [pc, #584]	; (8012438 <_dtoa_r+0x2e0>)
 80121f0:	9301      	str	r3, [sp, #4]
 80121f2:	3308      	adds	r3, #8
 80121f4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80121f6:	6013      	str	r3, [r2, #0]
 80121f8:	9801      	ldr	r0, [sp, #4]
 80121fa:	b013      	add	sp, #76	; 0x4c
 80121fc:	ecbd 8b04 	vpop	{d8-d9}
 8012200:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012204:	4b8b      	ldr	r3, [pc, #556]	; (8012434 <_dtoa_r+0x2dc>)
 8012206:	9301      	str	r3, [sp, #4]
 8012208:	3303      	adds	r3, #3
 801220a:	e7f3      	b.n	80121f4 <_dtoa_r+0x9c>
 801220c:	2200      	movs	r2, #0
 801220e:	2300      	movs	r3, #0
 8012210:	4650      	mov	r0, sl
 8012212:	4659      	mov	r1, fp
 8012214:	f7ee fc80 	bl	8000b18 <__aeabi_dcmpeq>
 8012218:	ec4b ab19 	vmov	d9, sl, fp
 801221c:	4680      	mov	r8, r0
 801221e:	b158      	cbz	r0, 8012238 <_dtoa_r+0xe0>
 8012220:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8012222:	2301      	movs	r3, #1
 8012224:	6013      	str	r3, [r2, #0]
 8012226:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8012228:	2b00      	cmp	r3, #0
 801222a:	f000 856b 	beq.w	8012d04 <_dtoa_r+0xbac>
 801222e:	4883      	ldr	r0, [pc, #524]	; (801243c <_dtoa_r+0x2e4>)
 8012230:	6018      	str	r0, [r3, #0]
 8012232:	1e43      	subs	r3, r0, #1
 8012234:	9301      	str	r3, [sp, #4]
 8012236:	e7df      	b.n	80121f8 <_dtoa_r+0xa0>
 8012238:	ec4b ab10 	vmov	d0, sl, fp
 801223c:	aa10      	add	r2, sp, #64	; 0x40
 801223e:	a911      	add	r1, sp, #68	; 0x44
 8012240:	4620      	mov	r0, r4
 8012242:	f001 f8ab 	bl	801339c <__d2b>
 8012246:	f3cb 550a 	ubfx	r5, fp, #20, #11
 801224a:	ee08 0a10 	vmov	s16, r0
 801224e:	2d00      	cmp	r5, #0
 8012250:	f000 8084 	beq.w	801235c <_dtoa_r+0x204>
 8012254:	ee19 3a90 	vmov	r3, s19
 8012258:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801225c:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8012260:	4656      	mov	r6, sl
 8012262:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8012266:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 801226a:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 801226e:	4b74      	ldr	r3, [pc, #464]	; (8012440 <_dtoa_r+0x2e8>)
 8012270:	2200      	movs	r2, #0
 8012272:	4630      	mov	r0, r6
 8012274:	4639      	mov	r1, r7
 8012276:	f7ee f82f 	bl	80002d8 <__aeabi_dsub>
 801227a:	a365      	add	r3, pc, #404	; (adr r3, 8012410 <_dtoa_r+0x2b8>)
 801227c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012280:	f7ee f9e2 	bl	8000648 <__aeabi_dmul>
 8012284:	a364      	add	r3, pc, #400	; (adr r3, 8012418 <_dtoa_r+0x2c0>)
 8012286:	e9d3 2300 	ldrd	r2, r3, [r3]
 801228a:	f7ee f827 	bl	80002dc <__adddf3>
 801228e:	4606      	mov	r6, r0
 8012290:	4628      	mov	r0, r5
 8012292:	460f      	mov	r7, r1
 8012294:	f7ee f96e 	bl	8000574 <__aeabi_i2d>
 8012298:	a361      	add	r3, pc, #388	; (adr r3, 8012420 <_dtoa_r+0x2c8>)
 801229a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801229e:	f7ee f9d3 	bl	8000648 <__aeabi_dmul>
 80122a2:	4602      	mov	r2, r0
 80122a4:	460b      	mov	r3, r1
 80122a6:	4630      	mov	r0, r6
 80122a8:	4639      	mov	r1, r7
 80122aa:	f7ee f817 	bl	80002dc <__adddf3>
 80122ae:	4606      	mov	r6, r0
 80122b0:	460f      	mov	r7, r1
 80122b2:	f7ee fc79 	bl	8000ba8 <__aeabi_d2iz>
 80122b6:	2200      	movs	r2, #0
 80122b8:	9000      	str	r0, [sp, #0]
 80122ba:	2300      	movs	r3, #0
 80122bc:	4630      	mov	r0, r6
 80122be:	4639      	mov	r1, r7
 80122c0:	f7ee fc34 	bl	8000b2c <__aeabi_dcmplt>
 80122c4:	b150      	cbz	r0, 80122dc <_dtoa_r+0x184>
 80122c6:	9800      	ldr	r0, [sp, #0]
 80122c8:	f7ee f954 	bl	8000574 <__aeabi_i2d>
 80122cc:	4632      	mov	r2, r6
 80122ce:	463b      	mov	r3, r7
 80122d0:	f7ee fc22 	bl	8000b18 <__aeabi_dcmpeq>
 80122d4:	b910      	cbnz	r0, 80122dc <_dtoa_r+0x184>
 80122d6:	9b00      	ldr	r3, [sp, #0]
 80122d8:	3b01      	subs	r3, #1
 80122da:	9300      	str	r3, [sp, #0]
 80122dc:	9b00      	ldr	r3, [sp, #0]
 80122de:	2b16      	cmp	r3, #22
 80122e0:	d85a      	bhi.n	8012398 <_dtoa_r+0x240>
 80122e2:	9a00      	ldr	r2, [sp, #0]
 80122e4:	4b57      	ldr	r3, [pc, #348]	; (8012444 <_dtoa_r+0x2ec>)
 80122e6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80122ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80122ee:	ec51 0b19 	vmov	r0, r1, d9
 80122f2:	f7ee fc1b 	bl	8000b2c <__aeabi_dcmplt>
 80122f6:	2800      	cmp	r0, #0
 80122f8:	d050      	beq.n	801239c <_dtoa_r+0x244>
 80122fa:	9b00      	ldr	r3, [sp, #0]
 80122fc:	3b01      	subs	r3, #1
 80122fe:	9300      	str	r3, [sp, #0]
 8012300:	2300      	movs	r3, #0
 8012302:	930b      	str	r3, [sp, #44]	; 0x2c
 8012304:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8012306:	1b5d      	subs	r5, r3, r5
 8012308:	1e6b      	subs	r3, r5, #1
 801230a:	9305      	str	r3, [sp, #20]
 801230c:	bf45      	ittet	mi
 801230e:	f1c5 0301 	rsbmi	r3, r5, #1
 8012312:	9304      	strmi	r3, [sp, #16]
 8012314:	2300      	movpl	r3, #0
 8012316:	2300      	movmi	r3, #0
 8012318:	bf4c      	ite	mi
 801231a:	9305      	strmi	r3, [sp, #20]
 801231c:	9304      	strpl	r3, [sp, #16]
 801231e:	9b00      	ldr	r3, [sp, #0]
 8012320:	2b00      	cmp	r3, #0
 8012322:	db3d      	blt.n	80123a0 <_dtoa_r+0x248>
 8012324:	9b05      	ldr	r3, [sp, #20]
 8012326:	9a00      	ldr	r2, [sp, #0]
 8012328:	920a      	str	r2, [sp, #40]	; 0x28
 801232a:	4413      	add	r3, r2
 801232c:	9305      	str	r3, [sp, #20]
 801232e:	2300      	movs	r3, #0
 8012330:	9307      	str	r3, [sp, #28]
 8012332:	9b06      	ldr	r3, [sp, #24]
 8012334:	2b09      	cmp	r3, #9
 8012336:	f200 8089 	bhi.w	801244c <_dtoa_r+0x2f4>
 801233a:	2b05      	cmp	r3, #5
 801233c:	bfc4      	itt	gt
 801233e:	3b04      	subgt	r3, #4
 8012340:	9306      	strgt	r3, [sp, #24]
 8012342:	9b06      	ldr	r3, [sp, #24]
 8012344:	f1a3 0302 	sub.w	r3, r3, #2
 8012348:	bfcc      	ite	gt
 801234a:	2500      	movgt	r5, #0
 801234c:	2501      	movle	r5, #1
 801234e:	2b03      	cmp	r3, #3
 8012350:	f200 8087 	bhi.w	8012462 <_dtoa_r+0x30a>
 8012354:	e8df f003 	tbb	[pc, r3]
 8012358:	59383a2d 	.word	0x59383a2d
 801235c:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8012360:	441d      	add	r5, r3
 8012362:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8012366:	2b20      	cmp	r3, #32
 8012368:	bfc1      	itttt	gt
 801236a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 801236e:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8012372:	fa0b f303 	lslgt.w	r3, fp, r3
 8012376:	fa26 f000 	lsrgt.w	r0, r6, r0
 801237a:	bfda      	itte	le
 801237c:	f1c3 0320 	rsble	r3, r3, #32
 8012380:	fa06 f003 	lslle.w	r0, r6, r3
 8012384:	4318      	orrgt	r0, r3
 8012386:	f7ee f8e5 	bl	8000554 <__aeabi_ui2d>
 801238a:	2301      	movs	r3, #1
 801238c:	4606      	mov	r6, r0
 801238e:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8012392:	3d01      	subs	r5, #1
 8012394:	930e      	str	r3, [sp, #56]	; 0x38
 8012396:	e76a      	b.n	801226e <_dtoa_r+0x116>
 8012398:	2301      	movs	r3, #1
 801239a:	e7b2      	b.n	8012302 <_dtoa_r+0x1aa>
 801239c:	900b      	str	r0, [sp, #44]	; 0x2c
 801239e:	e7b1      	b.n	8012304 <_dtoa_r+0x1ac>
 80123a0:	9b04      	ldr	r3, [sp, #16]
 80123a2:	9a00      	ldr	r2, [sp, #0]
 80123a4:	1a9b      	subs	r3, r3, r2
 80123a6:	9304      	str	r3, [sp, #16]
 80123a8:	4253      	negs	r3, r2
 80123aa:	9307      	str	r3, [sp, #28]
 80123ac:	2300      	movs	r3, #0
 80123ae:	930a      	str	r3, [sp, #40]	; 0x28
 80123b0:	e7bf      	b.n	8012332 <_dtoa_r+0x1da>
 80123b2:	2300      	movs	r3, #0
 80123b4:	9308      	str	r3, [sp, #32]
 80123b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80123b8:	2b00      	cmp	r3, #0
 80123ba:	dc55      	bgt.n	8012468 <_dtoa_r+0x310>
 80123bc:	2301      	movs	r3, #1
 80123be:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80123c2:	461a      	mov	r2, r3
 80123c4:	9209      	str	r2, [sp, #36]	; 0x24
 80123c6:	e00c      	b.n	80123e2 <_dtoa_r+0x28a>
 80123c8:	2301      	movs	r3, #1
 80123ca:	e7f3      	b.n	80123b4 <_dtoa_r+0x25c>
 80123cc:	2300      	movs	r3, #0
 80123ce:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80123d0:	9308      	str	r3, [sp, #32]
 80123d2:	9b00      	ldr	r3, [sp, #0]
 80123d4:	4413      	add	r3, r2
 80123d6:	9302      	str	r3, [sp, #8]
 80123d8:	3301      	adds	r3, #1
 80123da:	2b01      	cmp	r3, #1
 80123dc:	9303      	str	r3, [sp, #12]
 80123de:	bfb8      	it	lt
 80123e0:	2301      	movlt	r3, #1
 80123e2:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80123e4:	2200      	movs	r2, #0
 80123e6:	6042      	str	r2, [r0, #4]
 80123e8:	2204      	movs	r2, #4
 80123ea:	f102 0614 	add.w	r6, r2, #20
 80123ee:	429e      	cmp	r6, r3
 80123f0:	6841      	ldr	r1, [r0, #4]
 80123f2:	d93d      	bls.n	8012470 <_dtoa_r+0x318>
 80123f4:	4620      	mov	r0, r4
 80123f6:	f000 fca9 	bl	8012d4c <_Balloc>
 80123fa:	9001      	str	r0, [sp, #4]
 80123fc:	2800      	cmp	r0, #0
 80123fe:	d13b      	bne.n	8012478 <_dtoa_r+0x320>
 8012400:	4b11      	ldr	r3, [pc, #68]	; (8012448 <_dtoa_r+0x2f0>)
 8012402:	4602      	mov	r2, r0
 8012404:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8012408:	e6c0      	b.n	801218c <_dtoa_r+0x34>
 801240a:	2301      	movs	r3, #1
 801240c:	e7df      	b.n	80123ce <_dtoa_r+0x276>
 801240e:	bf00      	nop
 8012410:	636f4361 	.word	0x636f4361
 8012414:	3fd287a7 	.word	0x3fd287a7
 8012418:	8b60c8b3 	.word	0x8b60c8b3
 801241c:	3fc68a28 	.word	0x3fc68a28
 8012420:	509f79fb 	.word	0x509f79fb
 8012424:	3fd34413 	.word	0x3fd34413
 8012428:	0801ac9d 	.word	0x0801ac9d
 801242c:	0801acb4 	.word	0x0801acb4
 8012430:	7ff00000 	.word	0x7ff00000
 8012434:	0801ac99 	.word	0x0801ac99
 8012438:	0801ac90 	.word	0x0801ac90
 801243c:	0801ac6d 	.word	0x0801ac6d
 8012440:	3ff80000 	.word	0x3ff80000
 8012444:	0801ada8 	.word	0x0801ada8
 8012448:	0801ad0f 	.word	0x0801ad0f
 801244c:	2501      	movs	r5, #1
 801244e:	2300      	movs	r3, #0
 8012450:	9306      	str	r3, [sp, #24]
 8012452:	9508      	str	r5, [sp, #32]
 8012454:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8012458:	e9cd 3302 	strd	r3, r3, [sp, #8]
 801245c:	2200      	movs	r2, #0
 801245e:	2312      	movs	r3, #18
 8012460:	e7b0      	b.n	80123c4 <_dtoa_r+0x26c>
 8012462:	2301      	movs	r3, #1
 8012464:	9308      	str	r3, [sp, #32]
 8012466:	e7f5      	b.n	8012454 <_dtoa_r+0x2fc>
 8012468:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801246a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 801246e:	e7b8      	b.n	80123e2 <_dtoa_r+0x28a>
 8012470:	3101      	adds	r1, #1
 8012472:	6041      	str	r1, [r0, #4]
 8012474:	0052      	lsls	r2, r2, #1
 8012476:	e7b8      	b.n	80123ea <_dtoa_r+0x292>
 8012478:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801247a:	9a01      	ldr	r2, [sp, #4]
 801247c:	601a      	str	r2, [r3, #0]
 801247e:	9b03      	ldr	r3, [sp, #12]
 8012480:	2b0e      	cmp	r3, #14
 8012482:	f200 809d 	bhi.w	80125c0 <_dtoa_r+0x468>
 8012486:	2d00      	cmp	r5, #0
 8012488:	f000 809a 	beq.w	80125c0 <_dtoa_r+0x468>
 801248c:	9b00      	ldr	r3, [sp, #0]
 801248e:	2b00      	cmp	r3, #0
 8012490:	dd32      	ble.n	80124f8 <_dtoa_r+0x3a0>
 8012492:	4ab7      	ldr	r2, [pc, #732]	; (8012770 <_dtoa_r+0x618>)
 8012494:	f003 030f 	and.w	r3, r3, #15
 8012498:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 801249c:	e9d3 8900 	ldrd	r8, r9, [r3]
 80124a0:	9b00      	ldr	r3, [sp, #0]
 80124a2:	05d8      	lsls	r0, r3, #23
 80124a4:	ea4f 1723 	mov.w	r7, r3, asr #4
 80124a8:	d516      	bpl.n	80124d8 <_dtoa_r+0x380>
 80124aa:	4bb2      	ldr	r3, [pc, #712]	; (8012774 <_dtoa_r+0x61c>)
 80124ac:	ec51 0b19 	vmov	r0, r1, d9
 80124b0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80124b4:	f7ee f9f2 	bl	800089c <__aeabi_ddiv>
 80124b8:	f007 070f 	and.w	r7, r7, #15
 80124bc:	4682      	mov	sl, r0
 80124be:	468b      	mov	fp, r1
 80124c0:	2503      	movs	r5, #3
 80124c2:	4eac      	ldr	r6, [pc, #688]	; (8012774 <_dtoa_r+0x61c>)
 80124c4:	b957      	cbnz	r7, 80124dc <_dtoa_r+0x384>
 80124c6:	4642      	mov	r2, r8
 80124c8:	464b      	mov	r3, r9
 80124ca:	4650      	mov	r0, sl
 80124cc:	4659      	mov	r1, fp
 80124ce:	f7ee f9e5 	bl	800089c <__aeabi_ddiv>
 80124d2:	4682      	mov	sl, r0
 80124d4:	468b      	mov	fp, r1
 80124d6:	e028      	b.n	801252a <_dtoa_r+0x3d2>
 80124d8:	2502      	movs	r5, #2
 80124da:	e7f2      	b.n	80124c2 <_dtoa_r+0x36a>
 80124dc:	07f9      	lsls	r1, r7, #31
 80124de:	d508      	bpl.n	80124f2 <_dtoa_r+0x39a>
 80124e0:	4640      	mov	r0, r8
 80124e2:	4649      	mov	r1, r9
 80124e4:	e9d6 2300 	ldrd	r2, r3, [r6]
 80124e8:	f7ee f8ae 	bl	8000648 <__aeabi_dmul>
 80124ec:	3501      	adds	r5, #1
 80124ee:	4680      	mov	r8, r0
 80124f0:	4689      	mov	r9, r1
 80124f2:	107f      	asrs	r7, r7, #1
 80124f4:	3608      	adds	r6, #8
 80124f6:	e7e5      	b.n	80124c4 <_dtoa_r+0x36c>
 80124f8:	f000 809b 	beq.w	8012632 <_dtoa_r+0x4da>
 80124fc:	9b00      	ldr	r3, [sp, #0]
 80124fe:	4f9d      	ldr	r7, [pc, #628]	; (8012774 <_dtoa_r+0x61c>)
 8012500:	425e      	negs	r6, r3
 8012502:	4b9b      	ldr	r3, [pc, #620]	; (8012770 <_dtoa_r+0x618>)
 8012504:	f006 020f 	and.w	r2, r6, #15
 8012508:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801250c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012510:	ec51 0b19 	vmov	r0, r1, d9
 8012514:	f7ee f898 	bl	8000648 <__aeabi_dmul>
 8012518:	1136      	asrs	r6, r6, #4
 801251a:	4682      	mov	sl, r0
 801251c:	468b      	mov	fp, r1
 801251e:	2300      	movs	r3, #0
 8012520:	2502      	movs	r5, #2
 8012522:	2e00      	cmp	r6, #0
 8012524:	d17a      	bne.n	801261c <_dtoa_r+0x4c4>
 8012526:	2b00      	cmp	r3, #0
 8012528:	d1d3      	bne.n	80124d2 <_dtoa_r+0x37a>
 801252a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801252c:	2b00      	cmp	r3, #0
 801252e:	f000 8082 	beq.w	8012636 <_dtoa_r+0x4de>
 8012532:	4b91      	ldr	r3, [pc, #580]	; (8012778 <_dtoa_r+0x620>)
 8012534:	2200      	movs	r2, #0
 8012536:	4650      	mov	r0, sl
 8012538:	4659      	mov	r1, fp
 801253a:	f7ee faf7 	bl	8000b2c <__aeabi_dcmplt>
 801253e:	2800      	cmp	r0, #0
 8012540:	d079      	beq.n	8012636 <_dtoa_r+0x4de>
 8012542:	9b03      	ldr	r3, [sp, #12]
 8012544:	2b00      	cmp	r3, #0
 8012546:	d076      	beq.n	8012636 <_dtoa_r+0x4de>
 8012548:	9b02      	ldr	r3, [sp, #8]
 801254a:	2b00      	cmp	r3, #0
 801254c:	dd36      	ble.n	80125bc <_dtoa_r+0x464>
 801254e:	9b00      	ldr	r3, [sp, #0]
 8012550:	4650      	mov	r0, sl
 8012552:	4659      	mov	r1, fp
 8012554:	1e5f      	subs	r7, r3, #1
 8012556:	2200      	movs	r2, #0
 8012558:	4b88      	ldr	r3, [pc, #544]	; (801277c <_dtoa_r+0x624>)
 801255a:	f7ee f875 	bl	8000648 <__aeabi_dmul>
 801255e:	9e02      	ldr	r6, [sp, #8]
 8012560:	4682      	mov	sl, r0
 8012562:	468b      	mov	fp, r1
 8012564:	3501      	adds	r5, #1
 8012566:	4628      	mov	r0, r5
 8012568:	f7ee f804 	bl	8000574 <__aeabi_i2d>
 801256c:	4652      	mov	r2, sl
 801256e:	465b      	mov	r3, fp
 8012570:	f7ee f86a 	bl	8000648 <__aeabi_dmul>
 8012574:	4b82      	ldr	r3, [pc, #520]	; (8012780 <_dtoa_r+0x628>)
 8012576:	2200      	movs	r2, #0
 8012578:	f7ed feb0 	bl	80002dc <__adddf3>
 801257c:	46d0      	mov	r8, sl
 801257e:	46d9      	mov	r9, fp
 8012580:	4682      	mov	sl, r0
 8012582:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8012586:	2e00      	cmp	r6, #0
 8012588:	d158      	bne.n	801263c <_dtoa_r+0x4e4>
 801258a:	4b7e      	ldr	r3, [pc, #504]	; (8012784 <_dtoa_r+0x62c>)
 801258c:	2200      	movs	r2, #0
 801258e:	4640      	mov	r0, r8
 8012590:	4649      	mov	r1, r9
 8012592:	f7ed fea1 	bl	80002d8 <__aeabi_dsub>
 8012596:	4652      	mov	r2, sl
 8012598:	465b      	mov	r3, fp
 801259a:	4680      	mov	r8, r0
 801259c:	4689      	mov	r9, r1
 801259e:	f7ee fae3 	bl	8000b68 <__aeabi_dcmpgt>
 80125a2:	2800      	cmp	r0, #0
 80125a4:	f040 8295 	bne.w	8012ad2 <_dtoa_r+0x97a>
 80125a8:	4652      	mov	r2, sl
 80125aa:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 80125ae:	4640      	mov	r0, r8
 80125b0:	4649      	mov	r1, r9
 80125b2:	f7ee fabb 	bl	8000b2c <__aeabi_dcmplt>
 80125b6:	2800      	cmp	r0, #0
 80125b8:	f040 8289 	bne.w	8012ace <_dtoa_r+0x976>
 80125bc:	ec5b ab19 	vmov	sl, fp, d9
 80125c0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80125c2:	2b00      	cmp	r3, #0
 80125c4:	f2c0 8148 	blt.w	8012858 <_dtoa_r+0x700>
 80125c8:	9a00      	ldr	r2, [sp, #0]
 80125ca:	2a0e      	cmp	r2, #14
 80125cc:	f300 8144 	bgt.w	8012858 <_dtoa_r+0x700>
 80125d0:	4b67      	ldr	r3, [pc, #412]	; (8012770 <_dtoa_r+0x618>)
 80125d2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80125d6:	e9d3 8900 	ldrd	r8, r9, [r3]
 80125da:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80125dc:	2b00      	cmp	r3, #0
 80125de:	f280 80d5 	bge.w	801278c <_dtoa_r+0x634>
 80125e2:	9b03      	ldr	r3, [sp, #12]
 80125e4:	2b00      	cmp	r3, #0
 80125e6:	f300 80d1 	bgt.w	801278c <_dtoa_r+0x634>
 80125ea:	f040 826f 	bne.w	8012acc <_dtoa_r+0x974>
 80125ee:	4b65      	ldr	r3, [pc, #404]	; (8012784 <_dtoa_r+0x62c>)
 80125f0:	2200      	movs	r2, #0
 80125f2:	4640      	mov	r0, r8
 80125f4:	4649      	mov	r1, r9
 80125f6:	f7ee f827 	bl	8000648 <__aeabi_dmul>
 80125fa:	4652      	mov	r2, sl
 80125fc:	465b      	mov	r3, fp
 80125fe:	f7ee faa9 	bl	8000b54 <__aeabi_dcmpge>
 8012602:	9e03      	ldr	r6, [sp, #12]
 8012604:	4637      	mov	r7, r6
 8012606:	2800      	cmp	r0, #0
 8012608:	f040 8245 	bne.w	8012a96 <_dtoa_r+0x93e>
 801260c:	9d01      	ldr	r5, [sp, #4]
 801260e:	2331      	movs	r3, #49	; 0x31
 8012610:	f805 3b01 	strb.w	r3, [r5], #1
 8012614:	9b00      	ldr	r3, [sp, #0]
 8012616:	3301      	adds	r3, #1
 8012618:	9300      	str	r3, [sp, #0]
 801261a:	e240      	b.n	8012a9e <_dtoa_r+0x946>
 801261c:	07f2      	lsls	r2, r6, #31
 801261e:	d505      	bpl.n	801262c <_dtoa_r+0x4d4>
 8012620:	e9d7 2300 	ldrd	r2, r3, [r7]
 8012624:	f7ee f810 	bl	8000648 <__aeabi_dmul>
 8012628:	3501      	adds	r5, #1
 801262a:	2301      	movs	r3, #1
 801262c:	1076      	asrs	r6, r6, #1
 801262e:	3708      	adds	r7, #8
 8012630:	e777      	b.n	8012522 <_dtoa_r+0x3ca>
 8012632:	2502      	movs	r5, #2
 8012634:	e779      	b.n	801252a <_dtoa_r+0x3d2>
 8012636:	9f00      	ldr	r7, [sp, #0]
 8012638:	9e03      	ldr	r6, [sp, #12]
 801263a:	e794      	b.n	8012566 <_dtoa_r+0x40e>
 801263c:	9901      	ldr	r1, [sp, #4]
 801263e:	4b4c      	ldr	r3, [pc, #304]	; (8012770 <_dtoa_r+0x618>)
 8012640:	4431      	add	r1, r6
 8012642:	910d      	str	r1, [sp, #52]	; 0x34
 8012644:	9908      	ldr	r1, [sp, #32]
 8012646:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 801264a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 801264e:	2900      	cmp	r1, #0
 8012650:	d043      	beq.n	80126da <_dtoa_r+0x582>
 8012652:	494d      	ldr	r1, [pc, #308]	; (8012788 <_dtoa_r+0x630>)
 8012654:	2000      	movs	r0, #0
 8012656:	f7ee f921 	bl	800089c <__aeabi_ddiv>
 801265a:	4652      	mov	r2, sl
 801265c:	465b      	mov	r3, fp
 801265e:	f7ed fe3b 	bl	80002d8 <__aeabi_dsub>
 8012662:	9d01      	ldr	r5, [sp, #4]
 8012664:	4682      	mov	sl, r0
 8012666:	468b      	mov	fp, r1
 8012668:	4649      	mov	r1, r9
 801266a:	4640      	mov	r0, r8
 801266c:	f7ee fa9c 	bl	8000ba8 <__aeabi_d2iz>
 8012670:	4606      	mov	r6, r0
 8012672:	f7ed ff7f 	bl	8000574 <__aeabi_i2d>
 8012676:	4602      	mov	r2, r0
 8012678:	460b      	mov	r3, r1
 801267a:	4640      	mov	r0, r8
 801267c:	4649      	mov	r1, r9
 801267e:	f7ed fe2b 	bl	80002d8 <__aeabi_dsub>
 8012682:	3630      	adds	r6, #48	; 0x30
 8012684:	f805 6b01 	strb.w	r6, [r5], #1
 8012688:	4652      	mov	r2, sl
 801268a:	465b      	mov	r3, fp
 801268c:	4680      	mov	r8, r0
 801268e:	4689      	mov	r9, r1
 8012690:	f7ee fa4c 	bl	8000b2c <__aeabi_dcmplt>
 8012694:	2800      	cmp	r0, #0
 8012696:	d163      	bne.n	8012760 <_dtoa_r+0x608>
 8012698:	4642      	mov	r2, r8
 801269a:	464b      	mov	r3, r9
 801269c:	4936      	ldr	r1, [pc, #216]	; (8012778 <_dtoa_r+0x620>)
 801269e:	2000      	movs	r0, #0
 80126a0:	f7ed fe1a 	bl	80002d8 <__aeabi_dsub>
 80126a4:	4652      	mov	r2, sl
 80126a6:	465b      	mov	r3, fp
 80126a8:	f7ee fa40 	bl	8000b2c <__aeabi_dcmplt>
 80126ac:	2800      	cmp	r0, #0
 80126ae:	f040 80b5 	bne.w	801281c <_dtoa_r+0x6c4>
 80126b2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80126b4:	429d      	cmp	r5, r3
 80126b6:	d081      	beq.n	80125bc <_dtoa_r+0x464>
 80126b8:	4b30      	ldr	r3, [pc, #192]	; (801277c <_dtoa_r+0x624>)
 80126ba:	2200      	movs	r2, #0
 80126bc:	4650      	mov	r0, sl
 80126be:	4659      	mov	r1, fp
 80126c0:	f7ed ffc2 	bl	8000648 <__aeabi_dmul>
 80126c4:	4b2d      	ldr	r3, [pc, #180]	; (801277c <_dtoa_r+0x624>)
 80126c6:	4682      	mov	sl, r0
 80126c8:	468b      	mov	fp, r1
 80126ca:	4640      	mov	r0, r8
 80126cc:	4649      	mov	r1, r9
 80126ce:	2200      	movs	r2, #0
 80126d0:	f7ed ffba 	bl	8000648 <__aeabi_dmul>
 80126d4:	4680      	mov	r8, r0
 80126d6:	4689      	mov	r9, r1
 80126d8:	e7c6      	b.n	8012668 <_dtoa_r+0x510>
 80126da:	4650      	mov	r0, sl
 80126dc:	4659      	mov	r1, fp
 80126de:	f7ed ffb3 	bl	8000648 <__aeabi_dmul>
 80126e2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80126e4:	9d01      	ldr	r5, [sp, #4]
 80126e6:	930f      	str	r3, [sp, #60]	; 0x3c
 80126e8:	4682      	mov	sl, r0
 80126ea:	468b      	mov	fp, r1
 80126ec:	4649      	mov	r1, r9
 80126ee:	4640      	mov	r0, r8
 80126f0:	f7ee fa5a 	bl	8000ba8 <__aeabi_d2iz>
 80126f4:	4606      	mov	r6, r0
 80126f6:	f7ed ff3d 	bl	8000574 <__aeabi_i2d>
 80126fa:	3630      	adds	r6, #48	; 0x30
 80126fc:	4602      	mov	r2, r0
 80126fe:	460b      	mov	r3, r1
 8012700:	4640      	mov	r0, r8
 8012702:	4649      	mov	r1, r9
 8012704:	f7ed fde8 	bl	80002d8 <__aeabi_dsub>
 8012708:	f805 6b01 	strb.w	r6, [r5], #1
 801270c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801270e:	429d      	cmp	r5, r3
 8012710:	4680      	mov	r8, r0
 8012712:	4689      	mov	r9, r1
 8012714:	f04f 0200 	mov.w	r2, #0
 8012718:	d124      	bne.n	8012764 <_dtoa_r+0x60c>
 801271a:	4b1b      	ldr	r3, [pc, #108]	; (8012788 <_dtoa_r+0x630>)
 801271c:	4650      	mov	r0, sl
 801271e:	4659      	mov	r1, fp
 8012720:	f7ed fddc 	bl	80002dc <__adddf3>
 8012724:	4602      	mov	r2, r0
 8012726:	460b      	mov	r3, r1
 8012728:	4640      	mov	r0, r8
 801272a:	4649      	mov	r1, r9
 801272c:	f7ee fa1c 	bl	8000b68 <__aeabi_dcmpgt>
 8012730:	2800      	cmp	r0, #0
 8012732:	d173      	bne.n	801281c <_dtoa_r+0x6c4>
 8012734:	4652      	mov	r2, sl
 8012736:	465b      	mov	r3, fp
 8012738:	4913      	ldr	r1, [pc, #76]	; (8012788 <_dtoa_r+0x630>)
 801273a:	2000      	movs	r0, #0
 801273c:	f7ed fdcc 	bl	80002d8 <__aeabi_dsub>
 8012740:	4602      	mov	r2, r0
 8012742:	460b      	mov	r3, r1
 8012744:	4640      	mov	r0, r8
 8012746:	4649      	mov	r1, r9
 8012748:	f7ee f9f0 	bl	8000b2c <__aeabi_dcmplt>
 801274c:	2800      	cmp	r0, #0
 801274e:	f43f af35 	beq.w	80125bc <_dtoa_r+0x464>
 8012752:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8012754:	1e6b      	subs	r3, r5, #1
 8012756:	930f      	str	r3, [sp, #60]	; 0x3c
 8012758:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 801275c:	2b30      	cmp	r3, #48	; 0x30
 801275e:	d0f8      	beq.n	8012752 <_dtoa_r+0x5fa>
 8012760:	9700      	str	r7, [sp, #0]
 8012762:	e049      	b.n	80127f8 <_dtoa_r+0x6a0>
 8012764:	4b05      	ldr	r3, [pc, #20]	; (801277c <_dtoa_r+0x624>)
 8012766:	f7ed ff6f 	bl	8000648 <__aeabi_dmul>
 801276a:	4680      	mov	r8, r0
 801276c:	4689      	mov	r9, r1
 801276e:	e7bd      	b.n	80126ec <_dtoa_r+0x594>
 8012770:	0801ada8 	.word	0x0801ada8
 8012774:	0801ad80 	.word	0x0801ad80
 8012778:	3ff00000 	.word	0x3ff00000
 801277c:	40240000 	.word	0x40240000
 8012780:	401c0000 	.word	0x401c0000
 8012784:	40140000 	.word	0x40140000
 8012788:	3fe00000 	.word	0x3fe00000
 801278c:	9d01      	ldr	r5, [sp, #4]
 801278e:	4656      	mov	r6, sl
 8012790:	465f      	mov	r7, fp
 8012792:	4642      	mov	r2, r8
 8012794:	464b      	mov	r3, r9
 8012796:	4630      	mov	r0, r6
 8012798:	4639      	mov	r1, r7
 801279a:	f7ee f87f 	bl	800089c <__aeabi_ddiv>
 801279e:	f7ee fa03 	bl	8000ba8 <__aeabi_d2iz>
 80127a2:	4682      	mov	sl, r0
 80127a4:	f7ed fee6 	bl	8000574 <__aeabi_i2d>
 80127a8:	4642      	mov	r2, r8
 80127aa:	464b      	mov	r3, r9
 80127ac:	f7ed ff4c 	bl	8000648 <__aeabi_dmul>
 80127b0:	4602      	mov	r2, r0
 80127b2:	460b      	mov	r3, r1
 80127b4:	4630      	mov	r0, r6
 80127b6:	4639      	mov	r1, r7
 80127b8:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 80127bc:	f7ed fd8c 	bl	80002d8 <__aeabi_dsub>
 80127c0:	f805 6b01 	strb.w	r6, [r5], #1
 80127c4:	9e01      	ldr	r6, [sp, #4]
 80127c6:	9f03      	ldr	r7, [sp, #12]
 80127c8:	1bae      	subs	r6, r5, r6
 80127ca:	42b7      	cmp	r7, r6
 80127cc:	4602      	mov	r2, r0
 80127ce:	460b      	mov	r3, r1
 80127d0:	d135      	bne.n	801283e <_dtoa_r+0x6e6>
 80127d2:	f7ed fd83 	bl	80002dc <__adddf3>
 80127d6:	4642      	mov	r2, r8
 80127d8:	464b      	mov	r3, r9
 80127da:	4606      	mov	r6, r0
 80127dc:	460f      	mov	r7, r1
 80127de:	f7ee f9c3 	bl	8000b68 <__aeabi_dcmpgt>
 80127e2:	b9d0      	cbnz	r0, 801281a <_dtoa_r+0x6c2>
 80127e4:	4642      	mov	r2, r8
 80127e6:	464b      	mov	r3, r9
 80127e8:	4630      	mov	r0, r6
 80127ea:	4639      	mov	r1, r7
 80127ec:	f7ee f994 	bl	8000b18 <__aeabi_dcmpeq>
 80127f0:	b110      	cbz	r0, 80127f8 <_dtoa_r+0x6a0>
 80127f2:	f01a 0f01 	tst.w	sl, #1
 80127f6:	d110      	bne.n	801281a <_dtoa_r+0x6c2>
 80127f8:	4620      	mov	r0, r4
 80127fa:	ee18 1a10 	vmov	r1, s16
 80127fe:	f000 fae5 	bl	8012dcc <_Bfree>
 8012802:	2300      	movs	r3, #0
 8012804:	9800      	ldr	r0, [sp, #0]
 8012806:	702b      	strb	r3, [r5, #0]
 8012808:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801280a:	3001      	adds	r0, #1
 801280c:	6018      	str	r0, [r3, #0]
 801280e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8012810:	2b00      	cmp	r3, #0
 8012812:	f43f acf1 	beq.w	80121f8 <_dtoa_r+0xa0>
 8012816:	601d      	str	r5, [r3, #0]
 8012818:	e4ee      	b.n	80121f8 <_dtoa_r+0xa0>
 801281a:	9f00      	ldr	r7, [sp, #0]
 801281c:	462b      	mov	r3, r5
 801281e:	461d      	mov	r5, r3
 8012820:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8012824:	2a39      	cmp	r2, #57	; 0x39
 8012826:	d106      	bne.n	8012836 <_dtoa_r+0x6de>
 8012828:	9a01      	ldr	r2, [sp, #4]
 801282a:	429a      	cmp	r2, r3
 801282c:	d1f7      	bne.n	801281e <_dtoa_r+0x6c6>
 801282e:	9901      	ldr	r1, [sp, #4]
 8012830:	2230      	movs	r2, #48	; 0x30
 8012832:	3701      	adds	r7, #1
 8012834:	700a      	strb	r2, [r1, #0]
 8012836:	781a      	ldrb	r2, [r3, #0]
 8012838:	3201      	adds	r2, #1
 801283a:	701a      	strb	r2, [r3, #0]
 801283c:	e790      	b.n	8012760 <_dtoa_r+0x608>
 801283e:	4ba6      	ldr	r3, [pc, #664]	; (8012ad8 <_dtoa_r+0x980>)
 8012840:	2200      	movs	r2, #0
 8012842:	f7ed ff01 	bl	8000648 <__aeabi_dmul>
 8012846:	2200      	movs	r2, #0
 8012848:	2300      	movs	r3, #0
 801284a:	4606      	mov	r6, r0
 801284c:	460f      	mov	r7, r1
 801284e:	f7ee f963 	bl	8000b18 <__aeabi_dcmpeq>
 8012852:	2800      	cmp	r0, #0
 8012854:	d09d      	beq.n	8012792 <_dtoa_r+0x63a>
 8012856:	e7cf      	b.n	80127f8 <_dtoa_r+0x6a0>
 8012858:	9a08      	ldr	r2, [sp, #32]
 801285a:	2a00      	cmp	r2, #0
 801285c:	f000 80d7 	beq.w	8012a0e <_dtoa_r+0x8b6>
 8012860:	9a06      	ldr	r2, [sp, #24]
 8012862:	2a01      	cmp	r2, #1
 8012864:	f300 80ba 	bgt.w	80129dc <_dtoa_r+0x884>
 8012868:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801286a:	2a00      	cmp	r2, #0
 801286c:	f000 80b2 	beq.w	80129d4 <_dtoa_r+0x87c>
 8012870:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8012874:	9e07      	ldr	r6, [sp, #28]
 8012876:	9d04      	ldr	r5, [sp, #16]
 8012878:	9a04      	ldr	r2, [sp, #16]
 801287a:	441a      	add	r2, r3
 801287c:	9204      	str	r2, [sp, #16]
 801287e:	9a05      	ldr	r2, [sp, #20]
 8012880:	2101      	movs	r1, #1
 8012882:	441a      	add	r2, r3
 8012884:	4620      	mov	r0, r4
 8012886:	9205      	str	r2, [sp, #20]
 8012888:	f000 fb58 	bl	8012f3c <__i2b>
 801288c:	4607      	mov	r7, r0
 801288e:	2d00      	cmp	r5, #0
 8012890:	dd0c      	ble.n	80128ac <_dtoa_r+0x754>
 8012892:	9b05      	ldr	r3, [sp, #20]
 8012894:	2b00      	cmp	r3, #0
 8012896:	dd09      	ble.n	80128ac <_dtoa_r+0x754>
 8012898:	42ab      	cmp	r3, r5
 801289a:	9a04      	ldr	r2, [sp, #16]
 801289c:	bfa8      	it	ge
 801289e:	462b      	movge	r3, r5
 80128a0:	1ad2      	subs	r2, r2, r3
 80128a2:	9204      	str	r2, [sp, #16]
 80128a4:	9a05      	ldr	r2, [sp, #20]
 80128a6:	1aed      	subs	r5, r5, r3
 80128a8:	1ad3      	subs	r3, r2, r3
 80128aa:	9305      	str	r3, [sp, #20]
 80128ac:	9b07      	ldr	r3, [sp, #28]
 80128ae:	b31b      	cbz	r3, 80128f8 <_dtoa_r+0x7a0>
 80128b0:	9b08      	ldr	r3, [sp, #32]
 80128b2:	2b00      	cmp	r3, #0
 80128b4:	f000 80af 	beq.w	8012a16 <_dtoa_r+0x8be>
 80128b8:	2e00      	cmp	r6, #0
 80128ba:	dd13      	ble.n	80128e4 <_dtoa_r+0x78c>
 80128bc:	4639      	mov	r1, r7
 80128be:	4632      	mov	r2, r6
 80128c0:	4620      	mov	r0, r4
 80128c2:	f000 fbfb 	bl	80130bc <__pow5mult>
 80128c6:	ee18 2a10 	vmov	r2, s16
 80128ca:	4601      	mov	r1, r0
 80128cc:	4607      	mov	r7, r0
 80128ce:	4620      	mov	r0, r4
 80128d0:	f000 fb4a 	bl	8012f68 <__multiply>
 80128d4:	ee18 1a10 	vmov	r1, s16
 80128d8:	4680      	mov	r8, r0
 80128da:	4620      	mov	r0, r4
 80128dc:	f000 fa76 	bl	8012dcc <_Bfree>
 80128e0:	ee08 8a10 	vmov	s16, r8
 80128e4:	9b07      	ldr	r3, [sp, #28]
 80128e6:	1b9a      	subs	r2, r3, r6
 80128e8:	d006      	beq.n	80128f8 <_dtoa_r+0x7a0>
 80128ea:	ee18 1a10 	vmov	r1, s16
 80128ee:	4620      	mov	r0, r4
 80128f0:	f000 fbe4 	bl	80130bc <__pow5mult>
 80128f4:	ee08 0a10 	vmov	s16, r0
 80128f8:	2101      	movs	r1, #1
 80128fa:	4620      	mov	r0, r4
 80128fc:	f000 fb1e 	bl	8012f3c <__i2b>
 8012900:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012902:	2b00      	cmp	r3, #0
 8012904:	4606      	mov	r6, r0
 8012906:	f340 8088 	ble.w	8012a1a <_dtoa_r+0x8c2>
 801290a:	461a      	mov	r2, r3
 801290c:	4601      	mov	r1, r0
 801290e:	4620      	mov	r0, r4
 8012910:	f000 fbd4 	bl	80130bc <__pow5mult>
 8012914:	9b06      	ldr	r3, [sp, #24]
 8012916:	2b01      	cmp	r3, #1
 8012918:	4606      	mov	r6, r0
 801291a:	f340 8081 	ble.w	8012a20 <_dtoa_r+0x8c8>
 801291e:	f04f 0800 	mov.w	r8, #0
 8012922:	6933      	ldr	r3, [r6, #16]
 8012924:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8012928:	6918      	ldr	r0, [r3, #16]
 801292a:	f000 fab7 	bl	8012e9c <__hi0bits>
 801292e:	f1c0 0020 	rsb	r0, r0, #32
 8012932:	9b05      	ldr	r3, [sp, #20]
 8012934:	4418      	add	r0, r3
 8012936:	f010 001f 	ands.w	r0, r0, #31
 801293a:	f000 8092 	beq.w	8012a62 <_dtoa_r+0x90a>
 801293e:	f1c0 0320 	rsb	r3, r0, #32
 8012942:	2b04      	cmp	r3, #4
 8012944:	f340 808a 	ble.w	8012a5c <_dtoa_r+0x904>
 8012948:	f1c0 001c 	rsb	r0, r0, #28
 801294c:	9b04      	ldr	r3, [sp, #16]
 801294e:	4403      	add	r3, r0
 8012950:	9304      	str	r3, [sp, #16]
 8012952:	9b05      	ldr	r3, [sp, #20]
 8012954:	4403      	add	r3, r0
 8012956:	4405      	add	r5, r0
 8012958:	9305      	str	r3, [sp, #20]
 801295a:	9b04      	ldr	r3, [sp, #16]
 801295c:	2b00      	cmp	r3, #0
 801295e:	dd07      	ble.n	8012970 <_dtoa_r+0x818>
 8012960:	ee18 1a10 	vmov	r1, s16
 8012964:	461a      	mov	r2, r3
 8012966:	4620      	mov	r0, r4
 8012968:	f000 fc02 	bl	8013170 <__lshift>
 801296c:	ee08 0a10 	vmov	s16, r0
 8012970:	9b05      	ldr	r3, [sp, #20]
 8012972:	2b00      	cmp	r3, #0
 8012974:	dd05      	ble.n	8012982 <_dtoa_r+0x82a>
 8012976:	4631      	mov	r1, r6
 8012978:	461a      	mov	r2, r3
 801297a:	4620      	mov	r0, r4
 801297c:	f000 fbf8 	bl	8013170 <__lshift>
 8012980:	4606      	mov	r6, r0
 8012982:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8012984:	2b00      	cmp	r3, #0
 8012986:	d06e      	beq.n	8012a66 <_dtoa_r+0x90e>
 8012988:	ee18 0a10 	vmov	r0, s16
 801298c:	4631      	mov	r1, r6
 801298e:	f000 fc5f 	bl	8013250 <__mcmp>
 8012992:	2800      	cmp	r0, #0
 8012994:	da67      	bge.n	8012a66 <_dtoa_r+0x90e>
 8012996:	9b00      	ldr	r3, [sp, #0]
 8012998:	3b01      	subs	r3, #1
 801299a:	ee18 1a10 	vmov	r1, s16
 801299e:	9300      	str	r3, [sp, #0]
 80129a0:	220a      	movs	r2, #10
 80129a2:	2300      	movs	r3, #0
 80129a4:	4620      	mov	r0, r4
 80129a6:	f000 fa33 	bl	8012e10 <__multadd>
 80129aa:	9b08      	ldr	r3, [sp, #32]
 80129ac:	ee08 0a10 	vmov	s16, r0
 80129b0:	2b00      	cmp	r3, #0
 80129b2:	f000 81b1 	beq.w	8012d18 <_dtoa_r+0xbc0>
 80129b6:	2300      	movs	r3, #0
 80129b8:	4639      	mov	r1, r7
 80129ba:	220a      	movs	r2, #10
 80129bc:	4620      	mov	r0, r4
 80129be:	f000 fa27 	bl	8012e10 <__multadd>
 80129c2:	9b02      	ldr	r3, [sp, #8]
 80129c4:	2b00      	cmp	r3, #0
 80129c6:	4607      	mov	r7, r0
 80129c8:	f300 808e 	bgt.w	8012ae8 <_dtoa_r+0x990>
 80129cc:	9b06      	ldr	r3, [sp, #24]
 80129ce:	2b02      	cmp	r3, #2
 80129d0:	dc51      	bgt.n	8012a76 <_dtoa_r+0x91e>
 80129d2:	e089      	b.n	8012ae8 <_dtoa_r+0x990>
 80129d4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80129d6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80129da:	e74b      	b.n	8012874 <_dtoa_r+0x71c>
 80129dc:	9b03      	ldr	r3, [sp, #12]
 80129de:	1e5e      	subs	r6, r3, #1
 80129e0:	9b07      	ldr	r3, [sp, #28]
 80129e2:	42b3      	cmp	r3, r6
 80129e4:	bfbf      	itttt	lt
 80129e6:	9b07      	ldrlt	r3, [sp, #28]
 80129e8:	9607      	strlt	r6, [sp, #28]
 80129ea:	1af2      	sublt	r2, r6, r3
 80129ec:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 80129ee:	bfb6      	itet	lt
 80129f0:	189b      	addlt	r3, r3, r2
 80129f2:	1b9e      	subge	r6, r3, r6
 80129f4:	930a      	strlt	r3, [sp, #40]	; 0x28
 80129f6:	9b03      	ldr	r3, [sp, #12]
 80129f8:	bfb8      	it	lt
 80129fa:	2600      	movlt	r6, #0
 80129fc:	2b00      	cmp	r3, #0
 80129fe:	bfb7      	itett	lt
 8012a00:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8012a04:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8012a08:	1a9d      	sublt	r5, r3, r2
 8012a0a:	2300      	movlt	r3, #0
 8012a0c:	e734      	b.n	8012878 <_dtoa_r+0x720>
 8012a0e:	9e07      	ldr	r6, [sp, #28]
 8012a10:	9d04      	ldr	r5, [sp, #16]
 8012a12:	9f08      	ldr	r7, [sp, #32]
 8012a14:	e73b      	b.n	801288e <_dtoa_r+0x736>
 8012a16:	9a07      	ldr	r2, [sp, #28]
 8012a18:	e767      	b.n	80128ea <_dtoa_r+0x792>
 8012a1a:	9b06      	ldr	r3, [sp, #24]
 8012a1c:	2b01      	cmp	r3, #1
 8012a1e:	dc18      	bgt.n	8012a52 <_dtoa_r+0x8fa>
 8012a20:	f1ba 0f00 	cmp.w	sl, #0
 8012a24:	d115      	bne.n	8012a52 <_dtoa_r+0x8fa>
 8012a26:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8012a2a:	b993      	cbnz	r3, 8012a52 <_dtoa_r+0x8fa>
 8012a2c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8012a30:	0d1b      	lsrs	r3, r3, #20
 8012a32:	051b      	lsls	r3, r3, #20
 8012a34:	b183      	cbz	r3, 8012a58 <_dtoa_r+0x900>
 8012a36:	9b04      	ldr	r3, [sp, #16]
 8012a38:	3301      	adds	r3, #1
 8012a3a:	9304      	str	r3, [sp, #16]
 8012a3c:	9b05      	ldr	r3, [sp, #20]
 8012a3e:	3301      	adds	r3, #1
 8012a40:	9305      	str	r3, [sp, #20]
 8012a42:	f04f 0801 	mov.w	r8, #1
 8012a46:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012a48:	2b00      	cmp	r3, #0
 8012a4a:	f47f af6a 	bne.w	8012922 <_dtoa_r+0x7ca>
 8012a4e:	2001      	movs	r0, #1
 8012a50:	e76f      	b.n	8012932 <_dtoa_r+0x7da>
 8012a52:	f04f 0800 	mov.w	r8, #0
 8012a56:	e7f6      	b.n	8012a46 <_dtoa_r+0x8ee>
 8012a58:	4698      	mov	r8, r3
 8012a5a:	e7f4      	b.n	8012a46 <_dtoa_r+0x8ee>
 8012a5c:	f43f af7d 	beq.w	801295a <_dtoa_r+0x802>
 8012a60:	4618      	mov	r0, r3
 8012a62:	301c      	adds	r0, #28
 8012a64:	e772      	b.n	801294c <_dtoa_r+0x7f4>
 8012a66:	9b03      	ldr	r3, [sp, #12]
 8012a68:	2b00      	cmp	r3, #0
 8012a6a:	dc37      	bgt.n	8012adc <_dtoa_r+0x984>
 8012a6c:	9b06      	ldr	r3, [sp, #24]
 8012a6e:	2b02      	cmp	r3, #2
 8012a70:	dd34      	ble.n	8012adc <_dtoa_r+0x984>
 8012a72:	9b03      	ldr	r3, [sp, #12]
 8012a74:	9302      	str	r3, [sp, #8]
 8012a76:	9b02      	ldr	r3, [sp, #8]
 8012a78:	b96b      	cbnz	r3, 8012a96 <_dtoa_r+0x93e>
 8012a7a:	4631      	mov	r1, r6
 8012a7c:	2205      	movs	r2, #5
 8012a7e:	4620      	mov	r0, r4
 8012a80:	f000 f9c6 	bl	8012e10 <__multadd>
 8012a84:	4601      	mov	r1, r0
 8012a86:	4606      	mov	r6, r0
 8012a88:	ee18 0a10 	vmov	r0, s16
 8012a8c:	f000 fbe0 	bl	8013250 <__mcmp>
 8012a90:	2800      	cmp	r0, #0
 8012a92:	f73f adbb 	bgt.w	801260c <_dtoa_r+0x4b4>
 8012a96:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012a98:	9d01      	ldr	r5, [sp, #4]
 8012a9a:	43db      	mvns	r3, r3
 8012a9c:	9300      	str	r3, [sp, #0]
 8012a9e:	f04f 0800 	mov.w	r8, #0
 8012aa2:	4631      	mov	r1, r6
 8012aa4:	4620      	mov	r0, r4
 8012aa6:	f000 f991 	bl	8012dcc <_Bfree>
 8012aaa:	2f00      	cmp	r7, #0
 8012aac:	f43f aea4 	beq.w	80127f8 <_dtoa_r+0x6a0>
 8012ab0:	f1b8 0f00 	cmp.w	r8, #0
 8012ab4:	d005      	beq.n	8012ac2 <_dtoa_r+0x96a>
 8012ab6:	45b8      	cmp	r8, r7
 8012ab8:	d003      	beq.n	8012ac2 <_dtoa_r+0x96a>
 8012aba:	4641      	mov	r1, r8
 8012abc:	4620      	mov	r0, r4
 8012abe:	f000 f985 	bl	8012dcc <_Bfree>
 8012ac2:	4639      	mov	r1, r7
 8012ac4:	4620      	mov	r0, r4
 8012ac6:	f000 f981 	bl	8012dcc <_Bfree>
 8012aca:	e695      	b.n	80127f8 <_dtoa_r+0x6a0>
 8012acc:	2600      	movs	r6, #0
 8012ace:	4637      	mov	r7, r6
 8012ad0:	e7e1      	b.n	8012a96 <_dtoa_r+0x93e>
 8012ad2:	9700      	str	r7, [sp, #0]
 8012ad4:	4637      	mov	r7, r6
 8012ad6:	e599      	b.n	801260c <_dtoa_r+0x4b4>
 8012ad8:	40240000 	.word	0x40240000
 8012adc:	9b08      	ldr	r3, [sp, #32]
 8012ade:	2b00      	cmp	r3, #0
 8012ae0:	f000 80ca 	beq.w	8012c78 <_dtoa_r+0xb20>
 8012ae4:	9b03      	ldr	r3, [sp, #12]
 8012ae6:	9302      	str	r3, [sp, #8]
 8012ae8:	2d00      	cmp	r5, #0
 8012aea:	dd05      	ble.n	8012af8 <_dtoa_r+0x9a0>
 8012aec:	4639      	mov	r1, r7
 8012aee:	462a      	mov	r2, r5
 8012af0:	4620      	mov	r0, r4
 8012af2:	f000 fb3d 	bl	8013170 <__lshift>
 8012af6:	4607      	mov	r7, r0
 8012af8:	f1b8 0f00 	cmp.w	r8, #0
 8012afc:	d05b      	beq.n	8012bb6 <_dtoa_r+0xa5e>
 8012afe:	6879      	ldr	r1, [r7, #4]
 8012b00:	4620      	mov	r0, r4
 8012b02:	f000 f923 	bl	8012d4c <_Balloc>
 8012b06:	4605      	mov	r5, r0
 8012b08:	b928      	cbnz	r0, 8012b16 <_dtoa_r+0x9be>
 8012b0a:	4b87      	ldr	r3, [pc, #540]	; (8012d28 <_dtoa_r+0xbd0>)
 8012b0c:	4602      	mov	r2, r0
 8012b0e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8012b12:	f7ff bb3b 	b.w	801218c <_dtoa_r+0x34>
 8012b16:	693a      	ldr	r2, [r7, #16]
 8012b18:	3202      	adds	r2, #2
 8012b1a:	0092      	lsls	r2, r2, #2
 8012b1c:	f107 010c 	add.w	r1, r7, #12
 8012b20:	300c      	adds	r0, #12
 8012b22:	f7fe fded 	bl	8011700 <memcpy>
 8012b26:	2201      	movs	r2, #1
 8012b28:	4629      	mov	r1, r5
 8012b2a:	4620      	mov	r0, r4
 8012b2c:	f000 fb20 	bl	8013170 <__lshift>
 8012b30:	9b01      	ldr	r3, [sp, #4]
 8012b32:	f103 0901 	add.w	r9, r3, #1
 8012b36:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8012b3a:	4413      	add	r3, r2
 8012b3c:	9305      	str	r3, [sp, #20]
 8012b3e:	f00a 0301 	and.w	r3, sl, #1
 8012b42:	46b8      	mov	r8, r7
 8012b44:	9304      	str	r3, [sp, #16]
 8012b46:	4607      	mov	r7, r0
 8012b48:	4631      	mov	r1, r6
 8012b4a:	ee18 0a10 	vmov	r0, s16
 8012b4e:	f7ff fa77 	bl	8012040 <quorem>
 8012b52:	4641      	mov	r1, r8
 8012b54:	9002      	str	r0, [sp, #8]
 8012b56:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8012b5a:	ee18 0a10 	vmov	r0, s16
 8012b5e:	f000 fb77 	bl	8013250 <__mcmp>
 8012b62:	463a      	mov	r2, r7
 8012b64:	9003      	str	r0, [sp, #12]
 8012b66:	4631      	mov	r1, r6
 8012b68:	4620      	mov	r0, r4
 8012b6a:	f000 fb8d 	bl	8013288 <__mdiff>
 8012b6e:	68c2      	ldr	r2, [r0, #12]
 8012b70:	f109 3bff 	add.w	fp, r9, #4294967295	; 0xffffffff
 8012b74:	4605      	mov	r5, r0
 8012b76:	bb02      	cbnz	r2, 8012bba <_dtoa_r+0xa62>
 8012b78:	4601      	mov	r1, r0
 8012b7a:	ee18 0a10 	vmov	r0, s16
 8012b7e:	f000 fb67 	bl	8013250 <__mcmp>
 8012b82:	4602      	mov	r2, r0
 8012b84:	4629      	mov	r1, r5
 8012b86:	4620      	mov	r0, r4
 8012b88:	9207      	str	r2, [sp, #28]
 8012b8a:	f000 f91f 	bl	8012dcc <_Bfree>
 8012b8e:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8012b92:	ea43 0102 	orr.w	r1, r3, r2
 8012b96:	9b04      	ldr	r3, [sp, #16]
 8012b98:	430b      	orrs	r3, r1
 8012b9a:	464d      	mov	r5, r9
 8012b9c:	d10f      	bne.n	8012bbe <_dtoa_r+0xa66>
 8012b9e:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8012ba2:	d02a      	beq.n	8012bfa <_dtoa_r+0xaa2>
 8012ba4:	9b03      	ldr	r3, [sp, #12]
 8012ba6:	2b00      	cmp	r3, #0
 8012ba8:	dd02      	ble.n	8012bb0 <_dtoa_r+0xa58>
 8012baa:	9b02      	ldr	r3, [sp, #8]
 8012bac:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8012bb0:	f88b a000 	strb.w	sl, [fp]
 8012bb4:	e775      	b.n	8012aa2 <_dtoa_r+0x94a>
 8012bb6:	4638      	mov	r0, r7
 8012bb8:	e7ba      	b.n	8012b30 <_dtoa_r+0x9d8>
 8012bba:	2201      	movs	r2, #1
 8012bbc:	e7e2      	b.n	8012b84 <_dtoa_r+0xa2c>
 8012bbe:	9b03      	ldr	r3, [sp, #12]
 8012bc0:	2b00      	cmp	r3, #0
 8012bc2:	db04      	blt.n	8012bce <_dtoa_r+0xa76>
 8012bc4:	9906      	ldr	r1, [sp, #24]
 8012bc6:	430b      	orrs	r3, r1
 8012bc8:	9904      	ldr	r1, [sp, #16]
 8012bca:	430b      	orrs	r3, r1
 8012bcc:	d122      	bne.n	8012c14 <_dtoa_r+0xabc>
 8012bce:	2a00      	cmp	r2, #0
 8012bd0:	ddee      	ble.n	8012bb0 <_dtoa_r+0xa58>
 8012bd2:	ee18 1a10 	vmov	r1, s16
 8012bd6:	2201      	movs	r2, #1
 8012bd8:	4620      	mov	r0, r4
 8012bda:	f000 fac9 	bl	8013170 <__lshift>
 8012bde:	4631      	mov	r1, r6
 8012be0:	ee08 0a10 	vmov	s16, r0
 8012be4:	f000 fb34 	bl	8013250 <__mcmp>
 8012be8:	2800      	cmp	r0, #0
 8012bea:	dc03      	bgt.n	8012bf4 <_dtoa_r+0xa9c>
 8012bec:	d1e0      	bne.n	8012bb0 <_dtoa_r+0xa58>
 8012bee:	f01a 0f01 	tst.w	sl, #1
 8012bf2:	d0dd      	beq.n	8012bb0 <_dtoa_r+0xa58>
 8012bf4:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8012bf8:	d1d7      	bne.n	8012baa <_dtoa_r+0xa52>
 8012bfa:	2339      	movs	r3, #57	; 0x39
 8012bfc:	f88b 3000 	strb.w	r3, [fp]
 8012c00:	462b      	mov	r3, r5
 8012c02:	461d      	mov	r5, r3
 8012c04:	3b01      	subs	r3, #1
 8012c06:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8012c0a:	2a39      	cmp	r2, #57	; 0x39
 8012c0c:	d071      	beq.n	8012cf2 <_dtoa_r+0xb9a>
 8012c0e:	3201      	adds	r2, #1
 8012c10:	701a      	strb	r2, [r3, #0]
 8012c12:	e746      	b.n	8012aa2 <_dtoa_r+0x94a>
 8012c14:	2a00      	cmp	r2, #0
 8012c16:	dd07      	ble.n	8012c28 <_dtoa_r+0xad0>
 8012c18:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8012c1c:	d0ed      	beq.n	8012bfa <_dtoa_r+0xaa2>
 8012c1e:	f10a 0301 	add.w	r3, sl, #1
 8012c22:	f88b 3000 	strb.w	r3, [fp]
 8012c26:	e73c      	b.n	8012aa2 <_dtoa_r+0x94a>
 8012c28:	9b05      	ldr	r3, [sp, #20]
 8012c2a:	f809 ac01 	strb.w	sl, [r9, #-1]
 8012c2e:	4599      	cmp	r9, r3
 8012c30:	d047      	beq.n	8012cc2 <_dtoa_r+0xb6a>
 8012c32:	ee18 1a10 	vmov	r1, s16
 8012c36:	2300      	movs	r3, #0
 8012c38:	220a      	movs	r2, #10
 8012c3a:	4620      	mov	r0, r4
 8012c3c:	f000 f8e8 	bl	8012e10 <__multadd>
 8012c40:	45b8      	cmp	r8, r7
 8012c42:	ee08 0a10 	vmov	s16, r0
 8012c46:	f04f 0300 	mov.w	r3, #0
 8012c4a:	f04f 020a 	mov.w	r2, #10
 8012c4e:	4641      	mov	r1, r8
 8012c50:	4620      	mov	r0, r4
 8012c52:	d106      	bne.n	8012c62 <_dtoa_r+0xb0a>
 8012c54:	f000 f8dc 	bl	8012e10 <__multadd>
 8012c58:	4680      	mov	r8, r0
 8012c5a:	4607      	mov	r7, r0
 8012c5c:	f109 0901 	add.w	r9, r9, #1
 8012c60:	e772      	b.n	8012b48 <_dtoa_r+0x9f0>
 8012c62:	f000 f8d5 	bl	8012e10 <__multadd>
 8012c66:	4639      	mov	r1, r7
 8012c68:	4680      	mov	r8, r0
 8012c6a:	2300      	movs	r3, #0
 8012c6c:	220a      	movs	r2, #10
 8012c6e:	4620      	mov	r0, r4
 8012c70:	f000 f8ce 	bl	8012e10 <__multadd>
 8012c74:	4607      	mov	r7, r0
 8012c76:	e7f1      	b.n	8012c5c <_dtoa_r+0xb04>
 8012c78:	9b03      	ldr	r3, [sp, #12]
 8012c7a:	9302      	str	r3, [sp, #8]
 8012c7c:	9d01      	ldr	r5, [sp, #4]
 8012c7e:	ee18 0a10 	vmov	r0, s16
 8012c82:	4631      	mov	r1, r6
 8012c84:	f7ff f9dc 	bl	8012040 <quorem>
 8012c88:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8012c8c:	9b01      	ldr	r3, [sp, #4]
 8012c8e:	f805 ab01 	strb.w	sl, [r5], #1
 8012c92:	1aea      	subs	r2, r5, r3
 8012c94:	9b02      	ldr	r3, [sp, #8]
 8012c96:	4293      	cmp	r3, r2
 8012c98:	dd09      	ble.n	8012cae <_dtoa_r+0xb56>
 8012c9a:	ee18 1a10 	vmov	r1, s16
 8012c9e:	2300      	movs	r3, #0
 8012ca0:	220a      	movs	r2, #10
 8012ca2:	4620      	mov	r0, r4
 8012ca4:	f000 f8b4 	bl	8012e10 <__multadd>
 8012ca8:	ee08 0a10 	vmov	s16, r0
 8012cac:	e7e7      	b.n	8012c7e <_dtoa_r+0xb26>
 8012cae:	9b02      	ldr	r3, [sp, #8]
 8012cb0:	2b00      	cmp	r3, #0
 8012cb2:	bfc8      	it	gt
 8012cb4:	461d      	movgt	r5, r3
 8012cb6:	9b01      	ldr	r3, [sp, #4]
 8012cb8:	bfd8      	it	le
 8012cba:	2501      	movle	r5, #1
 8012cbc:	441d      	add	r5, r3
 8012cbe:	f04f 0800 	mov.w	r8, #0
 8012cc2:	ee18 1a10 	vmov	r1, s16
 8012cc6:	2201      	movs	r2, #1
 8012cc8:	4620      	mov	r0, r4
 8012cca:	f000 fa51 	bl	8013170 <__lshift>
 8012cce:	4631      	mov	r1, r6
 8012cd0:	ee08 0a10 	vmov	s16, r0
 8012cd4:	f000 fabc 	bl	8013250 <__mcmp>
 8012cd8:	2800      	cmp	r0, #0
 8012cda:	dc91      	bgt.n	8012c00 <_dtoa_r+0xaa8>
 8012cdc:	d102      	bne.n	8012ce4 <_dtoa_r+0xb8c>
 8012cde:	f01a 0f01 	tst.w	sl, #1
 8012ce2:	d18d      	bne.n	8012c00 <_dtoa_r+0xaa8>
 8012ce4:	462b      	mov	r3, r5
 8012ce6:	461d      	mov	r5, r3
 8012ce8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8012cec:	2a30      	cmp	r2, #48	; 0x30
 8012cee:	d0fa      	beq.n	8012ce6 <_dtoa_r+0xb8e>
 8012cf0:	e6d7      	b.n	8012aa2 <_dtoa_r+0x94a>
 8012cf2:	9a01      	ldr	r2, [sp, #4]
 8012cf4:	429a      	cmp	r2, r3
 8012cf6:	d184      	bne.n	8012c02 <_dtoa_r+0xaaa>
 8012cf8:	9b00      	ldr	r3, [sp, #0]
 8012cfa:	3301      	adds	r3, #1
 8012cfc:	9300      	str	r3, [sp, #0]
 8012cfe:	2331      	movs	r3, #49	; 0x31
 8012d00:	7013      	strb	r3, [r2, #0]
 8012d02:	e6ce      	b.n	8012aa2 <_dtoa_r+0x94a>
 8012d04:	4b09      	ldr	r3, [pc, #36]	; (8012d2c <_dtoa_r+0xbd4>)
 8012d06:	f7ff ba95 	b.w	8012234 <_dtoa_r+0xdc>
 8012d0a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8012d0c:	2b00      	cmp	r3, #0
 8012d0e:	f47f aa6e 	bne.w	80121ee <_dtoa_r+0x96>
 8012d12:	4b07      	ldr	r3, [pc, #28]	; (8012d30 <_dtoa_r+0xbd8>)
 8012d14:	f7ff ba8e 	b.w	8012234 <_dtoa_r+0xdc>
 8012d18:	9b02      	ldr	r3, [sp, #8]
 8012d1a:	2b00      	cmp	r3, #0
 8012d1c:	dcae      	bgt.n	8012c7c <_dtoa_r+0xb24>
 8012d1e:	9b06      	ldr	r3, [sp, #24]
 8012d20:	2b02      	cmp	r3, #2
 8012d22:	f73f aea8 	bgt.w	8012a76 <_dtoa_r+0x91e>
 8012d26:	e7a9      	b.n	8012c7c <_dtoa_r+0xb24>
 8012d28:	0801ad0f 	.word	0x0801ad0f
 8012d2c:	0801ac6c 	.word	0x0801ac6c
 8012d30:	0801ac90 	.word	0x0801ac90

08012d34 <_localeconv_r>:
 8012d34:	4800      	ldr	r0, [pc, #0]	; (8012d38 <_localeconv_r+0x4>)
 8012d36:	4770      	bx	lr
 8012d38:	20000508 	.word	0x20000508

08012d3c <malloc>:
 8012d3c:	4b02      	ldr	r3, [pc, #8]	; (8012d48 <malloc+0xc>)
 8012d3e:	4601      	mov	r1, r0
 8012d40:	6818      	ldr	r0, [r3, #0]
 8012d42:	f000 bc09 	b.w	8013558 <_malloc_r>
 8012d46:	bf00      	nop
 8012d48:	200003b4 	.word	0x200003b4

08012d4c <_Balloc>:
 8012d4c:	b570      	push	{r4, r5, r6, lr}
 8012d4e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8012d50:	4604      	mov	r4, r0
 8012d52:	460d      	mov	r5, r1
 8012d54:	b976      	cbnz	r6, 8012d74 <_Balloc+0x28>
 8012d56:	2010      	movs	r0, #16
 8012d58:	f7ff fff0 	bl	8012d3c <malloc>
 8012d5c:	4602      	mov	r2, r0
 8012d5e:	6260      	str	r0, [r4, #36]	; 0x24
 8012d60:	b920      	cbnz	r0, 8012d6c <_Balloc+0x20>
 8012d62:	4b18      	ldr	r3, [pc, #96]	; (8012dc4 <_Balloc+0x78>)
 8012d64:	4818      	ldr	r0, [pc, #96]	; (8012dc8 <_Balloc+0x7c>)
 8012d66:	2166      	movs	r1, #102	; 0x66
 8012d68:	f000 fdd6 	bl	8013918 <__assert_func>
 8012d6c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8012d70:	6006      	str	r6, [r0, #0]
 8012d72:	60c6      	str	r6, [r0, #12]
 8012d74:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8012d76:	68f3      	ldr	r3, [r6, #12]
 8012d78:	b183      	cbz	r3, 8012d9c <_Balloc+0x50>
 8012d7a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8012d7c:	68db      	ldr	r3, [r3, #12]
 8012d7e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8012d82:	b9b8      	cbnz	r0, 8012db4 <_Balloc+0x68>
 8012d84:	2101      	movs	r1, #1
 8012d86:	fa01 f605 	lsl.w	r6, r1, r5
 8012d8a:	1d72      	adds	r2, r6, #5
 8012d8c:	0092      	lsls	r2, r2, #2
 8012d8e:	4620      	mov	r0, r4
 8012d90:	f000 fb60 	bl	8013454 <_calloc_r>
 8012d94:	b160      	cbz	r0, 8012db0 <_Balloc+0x64>
 8012d96:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8012d9a:	e00e      	b.n	8012dba <_Balloc+0x6e>
 8012d9c:	2221      	movs	r2, #33	; 0x21
 8012d9e:	2104      	movs	r1, #4
 8012da0:	4620      	mov	r0, r4
 8012da2:	f000 fb57 	bl	8013454 <_calloc_r>
 8012da6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8012da8:	60f0      	str	r0, [r6, #12]
 8012daa:	68db      	ldr	r3, [r3, #12]
 8012dac:	2b00      	cmp	r3, #0
 8012dae:	d1e4      	bne.n	8012d7a <_Balloc+0x2e>
 8012db0:	2000      	movs	r0, #0
 8012db2:	bd70      	pop	{r4, r5, r6, pc}
 8012db4:	6802      	ldr	r2, [r0, #0]
 8012db6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8012dba:	2300      	movs	r3, #0
 8012dbc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8012dc0:	e7f7      	b.n	8012db2 <_Balloc+0x66>
 8012dc2:	bf00      	nop
 8012dc4:	0801ac9d 	.word	0x0801ac9d
 8012dc8:	0801ad20 	.word	0x0801ad20

08012dcc <_Bfree>:
 8012dcc:	b570      	push	{r4, r5, r6, lr}
 8012dce:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8012dd0:	4605      	mov	r5, r0
 8012dd2:	460c      	mov	r4, r1
 8012dd4:	b976      	cbnz	r6, 8012df4 <_Bfree+0x28>
 8012dd6:	2010      	movs	r0, #16
 8012dd8:	f7ff ffb0 	bl	8012d3c <malloc>
 8012ddc:	4602      	mov	r2, r0
 8012dde:	6268      	str	r0, [r5, #36]	; 0x24
 8012de0:	b920      	cbnz	r0, 8012dec <_Bfree+0x20>
 8012de2:	4b09      	ldr	r3, [pc, #36]	; (8012e08 <_Bfree+0x3c>)
 8012de4:	4809      	ldr	r0, [pc, #36]	; (8012e0c <_Bfree+0x40>)
 8012de6:	218a      	movs	r1, #138	; 0x8a
 8012de8:	f000 fd96 	bl	8013918 <__assert_func>
 8012dec:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8012df0:	6006      	str	r6, [r0, #0]
 8012df2:	60c6      	str	r6, [r0, #12]
 8012df4:	b13c      	cbz	r4, 8012e06 <_Bfree+0x3a>
 8012df6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8012df8:	6862      	ldr	r2, [r4, #4]
 8012dfa:	68db      	ldr	r3, [r3, #12]
 8012dfc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8012e00:	6021      	str	r1, [r4, #0]
 8012e02:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8012e06:	bd70      	pop	{r4, r5, r6, pc}
 8012e08:	0801ac9d 	.word	0x0801ac9d
 8012e0c:	0801ad20 	.word	0x0801ad20

08012e10 <__multadd>:
 8012e10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012e14:	690d      	ldr	r5, [r1, #16]
 8012e16:	4607      	mov	r7, r0
 8012e18:	460c      	mov	r4, r1
 8012e1a:	461e      	mov	r6, r3
 8012e1c:	f101 0c14 	add.w	ip, r1, #20
 8012e20:	2000      	movs	r0, #0
 8012e22:	f8dc 3000 	ldr.w	r3, [ip]
 8012e26:	b299      	uxth	r1, r3
 8012e28:	fb02 6101 	mla	r1, r2, r1, r6
 8012e2c:	0c1e      	lsrs	r6, r3, #16
 8012e2e:	0c0b      	lsrs	r3, r1, #16
 8012e30:	fb02 3306 	mla	r3, r2, r6, r3
 8012e34:	b289      	uxth	r1, r1
 8012e36:	3001      	adds	r0, #1
 8012e38:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8012e3c:	4285      	cmp	r5, r0
 8012e3e:	f84c 1b04 	str.w	r1, [ip], #4
 8012e42:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8012e46:	dcec      	bgt.n	8012e22 <__multadd+0x12>
 8012e48:	b30e      	cbz	r6, 8012e8e <__multadd+0x7e>
 8012e4a:	68a3      	ldr	r3, [r4, #8]
 8012e4c:	42ab      	cmp	r3, r5
 8012e4e:	dc19      	bgt.n	8012e84 <__multadd+0x74>
 8012e50:	6861      	ldr	r1, [r4, #4]
 8012e52:	4638      	mov	r0, r7
 8012e54:	3101      	adds	r1, #1
 8012e56:	f7ff ff79 	bl	8012d4c <_Balloc>
 8012e5a:	4680      	mov	r8, r0
 8012e5c:	b928      	cbnz	r0, 8012e6a <__multadd+0x5a>
 8012e5e:	4602      	mov	r2, r0
 8012e60:	4b0c      	ldr	r3, [pc, #48]	; (8012e94 <__multadd+0x84>)
 8012e62:	480d      	ldr	r0, [pc, #52]	; (8012e98 <__multadd+0x88>)
 8012e64:	21b5      	movs	r1, #181	; 0xb5
 8012e66:	f000 fd57 	bl	8013918 <__assert_func>
 8012e6a:	6922      	ldr	r2, [r4, #16]
 8012e6c:	3202      	adds	r2, #2
 8012e6e:	f104 010c 	add.w	r1, r4, #12
 8012e72:	0092      	lsls	r2, r2, #2
 8012e74:	300c      	adds	r0, #12
 8012e76:	f7fe fc43 	bl	8011700 <memcpy>
 8012e7a:	4621      	mov	r1, r4
 8012e7c:	4638      	mov	r0, r7
 8012e7e:	f7ff ffa5 	bl	8012dcc <_Bfree>
 8012e82:	4644      	mov	r4, r8
 8012e84:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8012e88:	3501      	adds	r5, #1
 8012e8a:	615e      	str	r6, [r3, #20]
 8012e8c:	6125      	str	r5, [r4, #16]
 8012e8e:	4620      	mov	r0, r4
 8012e90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012e94:	0801ad0f 	.word	0x0801ad0f
 8012e98:	0801ad20 	.word	0x0801ad20

08012e9c <__hi0bits>:
 8012e9c:	0c03      	lsrs	r3, r0, #16
 8012e9e:	041b      	lsls	r3, r3, #16
 8012ea0:	b9d3      	cbnz	r3, 8012ed8 <__hi0bits+0x3c>
 8012ea2:	0400      	lsls	r0, r0, #16
 8012ea4:	2310      	movs	r3, #16
 8012ea6:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8012eaa:	bf04      	itt	eq
 8012eac:	0200      	lsleq	r0, r0, #8
 8012eae:	3308      	addeq	r3, #8
 8012eb0:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8012eb4:	bf04      	itt	eq
 8012eb6:	0100      	lsleq	r0, r0, #4
 8012eb8:	3304      	addeq	r3, #4
 8012eba:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8012ebe:	bf04      	itt	eq
 8012ec0:	0080      	lsleq	r0, r0, #2
 8012ec2:	3302      	addeq	r3, #2
 8012ec4:	2800      	cmp	r0, #0
 8012ec6:	db05      	blt.n	8012ed4 <__hi0bits+0x38>
 8012ec8:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8012ecc:	f103 0301 	add.w	r3, r3, #1
 8012ed0:	bf08      	it	eq
 8012ed2:	2320      	moveq	r3, #32
 8012ed4:	4618      	mov	r0, r3
 8012ed6:	4770      	bx	lr
 8012ed8:	2300      	movs	r3, #0
 8012eda:	e7e4      	b.n	8012ea6 <__hi0bits+0xa>

08012edc <__lo0bits>:
 8012edc:	6803      	ldr	r3, [r0, #0]
 8012ede:	f013 0207 	ands.w	r2, r3, #7
 8012ee2:	4601      	mov	r1, r0
 8012ee4:	d00b      	beq.n	8012efe <__lo0bits+0x22>
 8012ee6:	07da      	lsls	r2, r3, #31
 8012ee8:	d423      	bmi.n	8012f32 <__lo0bits+0x56>
 8012eea:	0798      	lsls	r0, r3, #30
 8012eec:	bf49      	itett	mi
 8012eee:	085b      	lsrmi	r3, r3, #1
 8012ef0:	089b      	lsrpl	r3, r3, #2
 8012ef2:	2001      	movmi	r0, #1
 8012ef4:	600b      	strmi	r3, [r1, #0]
 8012ef6:	bf5c      	itt	pl
 8012ef8:	600b      	strpl	r3, [r1, #0]
 8012efa:	2002      	movpl	r0, #2
 8012efc:	4770      	bx	lr
 8012efe:	b298      	uxth	r0, r3
 8012f00:	b9a8      	cbnz	r0, 8012f2e <__lo0bits+0x52>
 8012f02:	0c1b      	lsrs	r3, r3, #16
 8012f04:	2010      	movs	r0, #16
 8012f06:	b2da      	uxtb	r2, r3
 8012f08:	b90a      	cbnz	r2, 8012f0e <__lo0bits+0x32>
 8012f0a:	3008      	adds	r0, #8
 8012f0c:	0a1b      	lsrs	r3, r3, #8
 8012f0e:	071a      	lsls	r2, r3, #28
 8012f10:	bf04      	itt	eq
 8012f12:	091b      	lsreq	r3, r3, #4
 8012f14:	3004      	addeq	r0, #4
 8012f16:	079a      	lsls	r2, r3, #30
 8012f18:	bf04      	itt	eq
 8012f1a:	089b      	lsreq	r3, r3, #2
 8012f1c:	3002      	addeq	r0, #2
 8012f1e:	07da      	lsls	r2, r3, #31
 8012f20:	d403      	bmi.n	8012f2a <__lo0bits+0x4e>
 8012f22:	085b      	lsrs	r3, r3, #1
 8012f24:	f100 0001 	add.w	r0, r0, #1
 8012f28:	d005      	beq.n	8012f36 <__lo0bits+0x5a>
 8012f2a:	600b      	str	r3, [r1, #0]
 8012f2c:	4770      	bx	lr
 8012f2e:	4610      	mov	r0, r2
 8012f30:	e7e9      	b.n	8012f06 <__lo0bits+0x2a>
 8012f32:	2000      	movs	r0, #0
 8012f34:	4770      	bx	lr
 8012f36:	2020      	movs	r0, #32
 8012f38:	4770      	bx	lr
	...

08012f3c <__i2b>:
 8012f3c:	b510      	push	{r4, lr}
 8012f3e:	460c      	mov	r4, r1
 8012f40:	2101      	movs	r1, #1
 8012f42:	f7ff ff03 	bl	8012d4c <_Balloc>
 8012f46:	4602      	mov	r2, r0
 8012f48:	b928      	cbnz	r0, 8012f56 <__i2b+0x1a>
 8012f4a:	4b05      	ldr	r3, [pc, #20]	; (8012f60 <__i2b+0x24>)
 8012f4c:	4805      	ldr	r0, [pc, #20]	; (8012f64 <__i2b+0x28>)
 8012f4e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8012f52:	f000 fce1 	bl	8013918 <__assert_func>
 8012f56:	2301      	movs	r3, #1
 8012f58:	6144      	str	r4, [r0, #20]
 8012f5a:	6103      	str	r3, [r0, #16]
 8012f5c:	bd10      	pop	{r4, pc}
 8012f5e:	bf00      	nop
 8012f60:	0801ad0f 	.word	0x0801ad0f
 8012f64:	0801ad20 	.word	0x0801ad20

08012f68 <__multiply>:
 8012f68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012f6c:	4691      	mov	r9, r2
 8012f6e:	690a      	ldr	r2, [r1, #16]
 8012f70:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8012f74:	429a      	cmp	r2, r3
 8012f76:	bfb8      	it	lt
 8012f78:	460b      	movlt	r3, r1
 8012f7a:	460c      	mov	r4, r1
 8012f7c:	bfbc      	itt	lt
 8012f7e:	464c      	movlt	r4, r9
 8012f80:	4699      	movlt	r9, r3
 8012f82:	6927      	ldr	r7, [r4, #16]
 8012f84:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8012f88:	68a3      	ldr	r3, [r4, #8]
 8012f8a:	6861      	ldr	r1, [r4, #4]
 8012f8c:	eb07 060a 	add.w	r6, r7, sl
 8012f90:	42b3      	cmp	r3, r6
 8012f92:	b085      	sub	sp, #20
 8012f94:	bfb8      	it	lt
 8012f96:	3101      	addlt	r1, #1
 8012f98:	f7ff fed8 	bl	8012d4c <_Balloc>
 8012f9c:	b930      	cbnz	r0, 8012fac <__multiply+0x44>
 8012f9e:	4602      	mov	r2, r0
 8012fa0:	4b44      	ldr	r3, [pc, #272]	; (80130b4 <__multiply+0x14c>)
 8012fa2:	4845      	ldr	r0, [pc, #276]	; (80130b8 <__multiply+0x150>)
 8012fa4:	f240 115d 	movw	r1, #349	; 0x15d
 8012fa8:	f000 fcb6 	bl	8013918 <__assert_func>
 8012fac:	f100 0514 	add.w	r5, r0, #20
 8012fb0:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8012fb4:	462b      	mov	r3, r5
 8012fb6:	2200      	movs	r2, #0
 8012fb8:	4543      	cmp	r3, r8
 8012fba:	d321      	bcc.n	8013000 <__multiply+0x98>
 8012fbc:	f104 0314 	add.w	r3, r4, #20
 8012fc0:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8012fc4:	f109 0314 	add.w	r3, r9, #20
 8012fc8:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8012fcc:	9202      	str	r2, [sp, #8]
 8012fce:	1b3a      	subs	r2, r7, r4
 8012fd0:	3a15      	subs	r2, #21
 8012fd2:	f022 0203 	bic.w	r2, r2, #3
 8012fd6:	3204      	adds	r2, #4
 8012fd8:	f104 0115 	add.w	r1, r4, #21
 8012fdc:	428f      	cmp	r7, r1
 8012fde:	bf38      	it	cc
 8012fe0:	2204      	movcc	r2, #4
 8012fe2:	9201      	str	r2, [sp, #4]
 8012fe4:	9a02      	ldr	r2, [sp, #8]
 8012fe6:	9303      	str	r3, [sp, #12]
 8012fe8:	429a      	cmp	r2, r3
 8012fea:	d80c      	bhi.n	8013006 <__multiply+0x9e>
 8012fec:	2e00      	cmp	r6, #0
 8012fee:	dd03      	ble.n	8012ff8 <__multiply+0x90>
 8012ff0:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8012ff4:	2b00      	cmp	r3, #0
 8012ff6:	d05a      	beq.n	80130ae <__multiply+0x146>
 8012ff8:	6106      	str	r6, [r0, #16]
 8012ffa:	b005      	add	sp, #20
 8012ffc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013000:	f843 2b04 	str.w	r2, [r3], #4
 8013004:	e7d8      	b.n	8012fb8 <__multiply+0x50>
 8013006:	f8b3 a000 	ldrh.w	sl, [r3]
 801300a:	f1ba 0f00 	cmp.w	sl, #0
 801300e:	d024      	beq.n	801305a <__multiply+0xf2>
 8013010:	f104 0e14 	add.w	lr, r4, #20
 8013014:	46a9      	mov	r9, r5
 8013016:	f04f 0c00 	mov.w	ip, #0
 801301a:	f85e 2b04 	ldr.w	r2, [lr], #4
 801301e:	f8d9 1000 	ldr.w	r1, [r9]
 8013022:	fa1f fb82 	uxth.w	fp, r2
 8013026:	b289      	uxth	r1, r1
 8013028:	fb0a 110b 	mla	r1, sl, fp, r1
 801302c:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8013030:	f8d9 2000 	ldr.w	r2, [r9]
 8013034:	4461      	add	r1, ip
 8013036:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 801303a:	fb0a c20b 	mla	r2, sl, fp, ip
 801303e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8013042:	b289      	uxth	r1, r1
 8013044:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8013048:	4577      	cmp	r7, lr
 801304a:	f849 1b04 	str.w	r1, [r9], #4
 801304e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8013052:	d8e2      	bhi.n	801301a <__multiply+0xb2>
 8013054:	9a01      	ldr	r2, [sp, #4]
 8013056:	f845 c002 	str.w	ip, [r5, r2]
 801305a:	9a03      	ldr	r2, [sp, #12]
 801305c:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8013060:	3304      	adds	r3, #4
 8013062:	f1b9 0f00 	cmp.w	r9, #0
 8013066:	d020      	beq.n	80130aa <__multiply+0x142>
 8013068:	6829      	ldr	r1, [r5, #0]
 801306a:	f104 0c14 	add.w	ip, r4, #20
 801306e:	46ae      	mov	lr, r5
 8013070:	f04f 0a00 	mov.w	sl, #0
 8013074:	f8bc b000 	ldrh.w	fp, [ip]
 8013078:	f8be 2002 	ldrh.w	r2, [lr, #2]
 801307c:	fb09 220b 	mla	r2, r9, fp, r2
 8013080:	4492      	add	sl, r2
 8013082:	b289      	uxth	r1, r1
 8013084:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8013088:	f84e 1b04 	str.w	r1, [lr], #4
 801308c:	f85c 2b04 	ldr.w	r2, [ip], #4
 8013090:	f8be 1000 	ldrh.w	r1, [lr]
 8013094:	0c12      	lsrs	r2, r2, #16
 8013096:	fb09 1102 	mla	r1, r9, r2, r1
 801309a:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 801309e:	4567      	cmp	r7, ip
 80130a0:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80130a4:	d8e6      	bhi.n	8013074 <__multiply+0x10c>
 80130a6:	9a01      	ldr	r2, [sp, #4]
 80130a8:	50a9      	str	r1, [r5, r2]
 80130aa:	3504      	adds	r5, #4
 80130ac:	e79a      	b.n	8012fe4 <__multiply+0x7c>
 80130ae:	3e01      	subs	r6, #1
 80130b0:	e79c      	b.n	8012fec <__multiply+0x84>
 80130b2:	bf00      	nop
 80130b4:	0801ad0f 	.word	0x0801ad0f
 80130b8:	0801ad20 	.word	0x0801ad20

080130bc <__pow5mult>:
 80130bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80130c0:	4615      	mov	r5, r2
 80130c2:	f012 0203 	ands.w	r2, r2, #3
 80130c6:	4606      	mov	r6, r0
 80130c8:	460f      	mov	r7, r1
 80130ca:	d007      	beq.n	80130dc <__pow5mult+0x20>
 80130cc:	4c25      	ldr	r4, [pc, #148]	; (8013164 <__pow5mult+0xa8>)
 80130ce:	3a01      	subs	r2, #1
 80130d0:	2300      	movs	r3, #0
 80130d2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80130d6:	f7ff fe9b 	bl	8012e10 <__multadd>
 80130da:	4607      	mov	r7, r0
 80130dc:	10ad      	asrs	r5, r5, #2
 80130de:	d03d      	beq.n	801315c <__pow5mult+0xa0>
 80130e0:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80130e2:	b97c      	cbnz	r4, 8013104 <__pow5mult+0x48>
 80130e4:	2010      	movs	r0, #16
 80130e6:	f7ff fe29 	bl	8012d3c <malloc>
 80130ea:	4602      	mov	r2, r0
 80130ec:	6270      	str	r0, [r6, #36]	; 0x24
 80130ee:	b928      	cbnz	r0, 80130fc <__pow5mult+0x40>
 80130f0:	4b1d      	ldr	r3, [pc, #116]	; (8013168 <__pow5mult+0xac>)
 80130f2:	481e      	ldr	r0, [pc, #120]	; (801316c <__pow5mult+0xb0>)
 80130f4:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80130f8:	f000 fc0e 	bl	8013918 <__assert_func>
 80130fc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8013100:	6004      	str	r4, [r0, #0]
 8013102:	60c4      	str	r4, [r0, #12]
 8013104:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8013108:	f8d8 4008 	ldr.w	r4, [r8, #8]
 801310c:	b94c      	cbnz	r4, 8013122 <__pow5mult+0x66>
 801310e:	f240 2171 	movw	r1, #625	; 0x271
 8013112:	4630      	mov	r0, r6
 8013114:	f7ff ff12 	bl	8012f3c <__i2b>
 8013118:	2300      	movs	r3, #0
 801311a:	f8c8 0008 	str.w	r0, [r8, #8]
 801311e:	4604      	mov	r4, r0
 8013120:	6003      	str	r3, [r0, #0]
 8013122:	f04f 0900 	mov.w	r9, #0
 8013126:	07eb      	lsls	r3, r5, #31
 8013128:	d50a      	bpl.n	8013140 <__pow5mult+0x84>
 801312a:	4639      	mov	r1, r7
 801312c:	4622      	mov	r2, r4
 801312e:	4630      	mov	r0, r6
 8013130:	f7ff ff1a 	bl	8012f68 <__multiply>
 8013134:	4639      	mov	r1, r7
 8013136:	4680      	mov	r8, r0
 8013138:	4630      	mov	r0, r6
 801313a:	f7ff fe47 	bl	8012dcc <_Bfree>
 801313e:	4647      	mov	r7, r8
 8013140:	106d      	asrs	r5, r5, #1
 8013142:	d00b      	beq.n	801315c <__pow5mult+0xa0>
 8013144:	6820      	ldr	r0, [r4, #0]
 8013146:	b938      	cbnz	r0, 8013158 <__pow5mult+0x9c>
 8013148:	4622      	mov	r2, r4
 801314a:	4621      	mov	r1, r4
 801314c:	4630      	mov	r0, r6
 801314e:	f7ff ff0b 	bl	8012f68 <__multiply>
 8013152:	6020      	str	r0, [r4, #0]
 8013154:	f8c0 9000 	str.w	r9, [r0]
 8013158:	4604      	mov	r4, r0
 801315a:	e7e4      	b.n	8013126 <__pow5mult+0x6a>
 801315c:	4638      	mov	r0, r7
 801315e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013162:	bf00      	nop
 8013164:	0801ae70 	.word	0x0801ae70
 8013168:	0801ac9d 	.word	0x0801ac9d
 801316c:	0801ad20 	.word	0x0801ad20

08013170 <__lshift>:
 8013170:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013174:	460c      	mov	r4, r1
 8013176:	6849      	ldr	r1, [r1, #4]
 8013178:	6923      	ldr	r3, [r4, #16]
 801317a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 801317e:	68a3      	ldr	r3, [r4, #8]
 8013180:	4607      	mov	r7, r0
 8013182:	4691      	mov	r9, r2
 8013184:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8013188:	f108 0601 	add.w	r6, r8, #1
 801318c:	42b3      	cmp	r3, r6
 801318e:	db0b      	blt.n	80131a8 <__lshift+0x38>
 8013190:	4638      	mov	r0, r7
 8013192:	f7ff fddb 	bl	8012d4c <_Balloc>
 8013196:	4605      	mov	r5, r0
 8013198:	b948      	cbnz	r0, 80131ae <__lshift+0x3e>
 801319a:	4602      	mov	r2, r0
 801319c:	4b2a      	ldr	r3, [pc, #168]	; (8013248 <__lshift+0xd8>)
 801319e:	482b      	ldr	r0, [pc, #172]	; (801324c <__lshift+0xdc>)
 80131a0:	f240 11d9 	movw	r1, #473	; 0x1d9
 80131a4:	f000 fbb8 	bl	8013918 <__assert_func>
 80131a8:	3101      	adds	r1, #1
 80131aa:	005b      	lsls	r3, r3, #1
 80131ac:	e7ee      	b.n	801318c <__lshift+0x1c>
 80131ae:	2300      	movs	r3, #0
 80131b0:	f100 0114 	add.w	r1, r0, #20
 80131b4:	f100 0210 	add.w	r2, r0, #16
 80131b8:	4618      	mov	r0, r3
 80131ba:	4553      	cmp	r3, sl
 80131bc:	db37      	blt.n	801322e <__lshift+0xbe>
 80131be:	6920      	ldr	r0, [r4, #16]
 80131c0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80131c4:	f104 0314 	add.w	r3, r4, #20
 80131c8:	f019 091f 	ands.w	r9, r9, #31
 80131cc:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80131d0:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80131d4:	d02f      	beq.n	8013236 <__lshift+0xc6>
 80131d6:	f1c9 0e20 	rsb	lr, r9, #32
 80131da:	468a      	mov	sl, r1
 80131dc:	f04f 0c00 	mov.w	ip, #0
 80131e0:	681a      	ldr	r2, [r3, #0]
 80131e2:	fa02 f209 	lsl.w	r2, r2, r9
 80131e6:	ea42 020c 	orr.w	r2, r2, ip
 80131ea:	f84a 2b04 	str.w	r2, [sl], #4
 80131ee:	f853 2b04 	ldr.w	r2, [r3], #4
 80131f2:	4298      	cmp	r0, r3
 80131f4:	fa22 fc0e 	lsr.w	ip, r2, lr
 80131f8:	d8f2      	bhi.n	80131e0 <__lshift+0x70>
 80131fa:	1b03      	subs	r3, r0, r4
 80131fc:	3b15      	subs	r3, #21
 80131fe:	f023 0303 	bic.w	r3, r3, #3
 8013202:	3304      	adds	r3, #4
 8013204:	f104 0215 	add.w	r2, r4, #21
 8013208:	4290      	cmp	r0, r2
 801320a:	bf38      	it	cc
 801320c:	2304      	movcc	r3, #4
 801320e:	f841 c003 	str.w	ip, [r1, r3]
 8013212:	f1bc 0f00 	cmp.w	ip, #0
 8013216:	d001      	beq.n	801321c <__lshift+0xac>
 8013218:	f108 0602 	add.w	r6, r8, #2
 801321c:	3e01      	subs	r6, #1
 801321e:	4638      	mov	r0, r7
 8013220:	612e      	str	r6, [r5, #16]
 8013222:	4621      	mov	r1, r4
 8013224:	f7ff fdd2 	bl	8012dcc <_Bfree>
 8013228:	4628      	mov	r0, r5
 801322a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801322e:	f842 0f04 	str.w	r0, [r2, #4]!
 8013232:	3301      	adds	r3, #1
 8013234:	e7c1      	b.n	80131ba <__lshift+0x4a>
 8013236:	3904      	subs	r1, #4
 8013238:	f853 2b04 	ldr.w	r2, [r3], #4
 801323c:	f841 2f04 	str.w	r2, [r1, #4]!
 8013240:	4298      	cmp	r0, r3
 8013242:	d8f9      	bhi.n	8013238 <__lshift+0xc8>
 8013244:	e7ea      	b.n	801321c <__lshift+0xac>
 8013246:	bf00      	nop
 8013248:	0801ad0f 	.word	0x0801ad0f
 801324c:	0801ad20 	.word	0x0801ad20

08013250 <__mcmp>:
 8013250:	b530      	push	{r4, r5, lr}
 8013252:	6902      	ldr	r2, [r0, #16]
 8013254:	690c      	ldr	r4, [r1, #16]
 8013256:	1b12      	subs	r2, r2, r4
 8013258:	d10e      	bne.n	8013278 <__mcmp+0x28>
 801325a:	f100 0314 	add.w	r3, r0, #20
 801325e:	3114      	adds	r1, #20
 8013260:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8013264:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8013268:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 801326c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8013270:	42a5      	cmp	r5, r4
 8013272:	d003      	beq.n	801327c <__mcmp+0x2c>
 8013274:	d305      	bcc.n	8013282 <__mcmp+0x32>
 8013276:	2201      	movs	r2, #1
 8013278:	4610      	mov	r0, r2
 801327a:	bd30      	pop	{r4, r5, pc}
 801327c:	4283      	cmp	r3, r0
 801327e:	d3f3      	bcc.n	8013268 <__mcmp+0x18>
 8013280:	e7fa      	b.n	8013278 <__mcmp+0x28>
 8013282:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8013286:	e7f7      	b.n	8013278 <__mcmp+0x28>

08013288 <__mdiff>:
 8013288:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801328c:	460c      	mov	r4, r1
 801328e:	4606      	mov	r6, r0
 8013290:	4611      	mov	r1, r2
 8013292:	4620      	mov	r0, r4
 8013294:	4690      	mov	r8, r2
 8013296:	f7ff ffdb 	bl	8013250 <__mcmp>
 801329a:	1e05      	subs	r5, r0, #0
 801329c:	d110      	bne.n	80132c0 <__mdiff+0x38>
 801329e:	4629      	mov	r1, r5
 80132a0:	4630      	mov	r0, r6
 80132a2:	f7ff fd53 	bl	8012d4c <_Balloc>
 80132a6:	b930      	cbnz	r0, 80132b6 <__mdiff+0x2e>
 80132a8:	4b3a      	ldr	r3, [pc, #232]	; (8013394 <__mdiff+0x10c>)
 80132aa:	4602      	mov	r2, r0
 80132ac:	f240 2132 	movw	r1, #562	; 0x232
 80132b0:	4839      	ldr	r0, [pc, #228]	; (8013398 <__mdiff+0x110>)
 80132b2:	f000 fb31 	bl	8013918 <__assert_func>
 80132b6:	2301      	movs	r3, #1
 80132b8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80132bc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80132c0:	bfa4      	itt	ge
 80132c2:	4643      	movge	r3, r8
 80132c4:	46a0      	movge	r8, r4
 80132c6:	4630      	mov	r0, r6
 80132c8:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80132cc:	bfa6      	itte	ge
 80132ce:	461c      	movge	r4, r3
 80132d0:	2500      	movge	r5, #0
 80132d2:	2501      	movlt	r5, #1
 80132d4:	f7ff fd3a 	bl	8012d4c <_Balloc>
 80132d8:	b920      	cbnz	r0, 80132e4 <__mdiff+0x5c>
 80132da:	4b2e      	ldr	r3, [pc, #184]	; (8013394 <__mdiff+0x10c>)
 80132dc:	4602      	mov	r2, r0
 80132de:	f44f 7110 	mov.w	r1, #576	; 0x240
 80132e2:	e7e5      	b.n	80132b0 <__mdiff+0x28>
 80132e4:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80132e8:	6926      	ldr	r6, [r4, #16]
 80132ea:	60c5      	str	r5, [r0, #12]
 80132ec:	f104 0914 	add.w	r9, r4, #20
 80132f0:	f108 0514 	add.w	r5, r8, #20
 80132f4:	f100 0e14 	add.w	lr, r0, #20
 80132f8:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 80132fc:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8013300:	f108 0210 	add.w	r2, r8, #16
 8013304:	46f2      	mov	sl, lr
 8013306:	2100      	movs	r1, #0
 8013308:	f859 3b04 	ldr.w	r3, [r9], #4
 801330c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8013310:	fa1f f883 	uxth.w	r8, r3
 8013314:	fa11 f18b 	uxtah	r1, r1, fp
 8013318:	0c1b      	lsrs	r3, r3, #16
 801331a:	eba1 0808 	sub.w	r8, r1, r8
 801331e:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8013322:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8013326:	fa1f f888 	uxth.w	r8, r8
 801332a:	1419      	asrs	r1, r3, #16
 801332c:	454e      	cmp	r6, r9
 801332e:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8013332:	f84a 3b04 	str.w	r3, [sl], #4
 8013336:	d8e7      	bhi.n	8013308 <__mdiff+0x80>
 8013338:	1b33      	subs	r3, r6, r4
 801333a:	3b15      	subs	r3, #21
 801333c:	f023 0303 	bic.w	r3, r3, #3
 8013340:	3304      	adds	r3, #4
 8013342:	3415      	adds	r4, #21
 8013344:	42a6      	cmp	r6, r4
 8013346:	bf38      	it	cc
 8013348:	2304      	movcc	r3, #4
 801334a:	441d      	add	r5, r3
 801334c:	4473      	add	r3, lr
 801334e:	469e      	mov	lr, r3
 8013350:	462e      	mov	r6, r5
 8013352:	4566      	cmp	r6, ip
 8013354:	d30e      	bcc.n	8013374 <__mdiff+0xec>
 8013356:	f10c 0203 	add.w	r2, ip, #3
 801335a:	1b52      	subs	r2, r2, r5
 801335c:	f022 0203 	bic.w	r2, r2, #3
 8013360:	3d03      	subs	r5, #3
 8013362:	45ac      	cmp	ip, r5
 8013364:	bf38      	it	cc
 8013366:	2200      	movcc	r2, #0
 8013368:	441a      	add	r2, r3
 801336a:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 801336e:	b17b      	cbz	r3, 8013390 <__mdiff+0x108>
 8013370:	6107      	str	r7, [r0, #16]
 8013372:	e7a3      	b.n	80132bc <__mdiff+0x34>
 8013374:	f856 8b04 	ldr.w	r8, [r6], #4
 8013378:	fa11 f288 	uxtah	r2, r1, r8
 801337c:	1414      	asrs	r4, r2, #16
 801337e:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8013382:	b292      	uxth	r2, r2
 8013384:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8013388:	f84e 2b04 	str.w	r2, [lr], #4
 801338c:	1421      	asrs	r1, r4, #16
 801338e:	e7e0      	b.n	8013352 <__mdiff+0xca>
 8013390:	3f01      	subs	r7, #1
 8013392:	e7ea      	b.n	801336a <__mdiff+0xe2>
 8013394:	0801ad0f 	.word	0x0801ad0f
 8013398:	0801ad20 	.word	0x0801ad20

0801339c <__d2b>:
 801339c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80133a0:	4689      	mov	r9, r1
 80133a2:	2101      	movs	r1, #1
 80133a4:	ec57 6b10 	vmov	r6, r7, d0
 80133a8:	4690      	mov	r8, r2
 80133aa:	f7ff fccf 	bl	8012d4c <_Balloc>
 80133ae:	4604      	mov	r4, r0
 80133b0:	b930      	cbnz	r0, 80133c0 <__d2b+0x24>
 80133b2:	4602      	mov	r2, r0
 80133b4:	4b25      	ldr	r3, [pc, #148]	; (801344c <__d2b+0xb0>)
 80133b6:	4826      	ldr	r0, [pc, #152]	; (8013450 <__d2b+0xb4>)
 80133b8:	f240 310a 	movw	r1, #778	; 0x30a
 80133bc:	f000 faac 	bl	8013918 <__assert_func>
 80133c0:	f3c7 550a 	ubfx	r5, r7, #20, #11
 80133c4:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80133c8:	bb35      	cbnz	r5, 8013418 <__d2b+0x7c>
 80133ca:	2e00      	cmp	r6, #0
 80133cc:	9301      	str	r3, [sp, #4]
 80133ce:	d028      	beq.n	8013422 <__d2b+0x86>
 80133d0:	4668      	mov	r0, sp
 80133d2:	9600      	str	r6, [sp, #0]
 80133d4:	f7ff fd82 	bl	8012edc <__lo0bits>
 80133d8:	9900      	ldr	r1, [sp, #0]
 80133da:	b300      	cbz	r0, 801341e <__d2b+0x82>
 80133dc:	9a01      	ldr	r2, [sp, #4]
 80133de:	f1c0 0320 	rsb	r3, r0, #32
 80133e2:	fa02 f303 	lsl.w	r3, r2, r3
 80133e6:	430b      	orrs	r3, r1
 80133e8:	40c2      	lsrs	r2, r0
 80133ea:	6163      	str	r3, [r4, #20]
 80133ec:	9201      	str	r2, [sp, #4]
 80133ee:	9b01      	ldr	r3, [sp, #4]
 80133f0:	61a3      	str	r3, [r4, #24]
 80133f2:	2b00      	cmp	r3, #0
 80133f4:	bf14      	ite	ne
 80133f6:	2202      	movne	r2, #2
 80133f8:	2201      	moveq	r2, #1
 80133fa:	6122      	str	r2, [r4, #16]
 80133fc:	b1d5      	cbz	r5, 8013434 <__d2b+0x98>
 80133fe:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8013402:	4405      	add	r5, r0
 8013404:	f8c9 5000 	str.w	r5, [r9]
 8013408:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 801340c:	f8c8 0000 	str.w	r0, [r8]
 8013410:	4620      	mov	r0, r4
 8013412:	b003      	add	sp, #12
 8013414:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013418:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 801341c:	e7d5      	b.n	80133ca <__d2b+0x2e>
 801341e:	6161      	str	r1, [r4, #20]
 8013420:	e7e5      	b.n	80133ee <__d2b+0x52>
 8013422:	a801      	add	r0, sp, #4
 8013424:	f7ff fd5a 	bl	8012edc <__lo0bits>
 8013428:	9b01      	ldr	r3, [sp, #4]
 801342a:	6163      	str	r3, [r4, #20]
 801342c:	2201      	movs	r2, #1
 801342e:	6122      	str	r2, [r4, #16]
 8013430:	3020      	adds	r0, #32
 8013432:	e7e3      	b.n	80133fc <__d2b+0x60>
 8013434:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8013438:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 801343c:	f8c9 0000 	str.w	r0, [r9]
 8013440:	6918      	ldr	r0, [r3, #16]
 8013442:	f7ff fd2b 	bl	8012e9c <__hi0bits>
 8013446:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 801344a:	e7df      	b.n	801340c <__d2b+0x70>
 801344c:	0801ad0f 	.word	0x0801ad0f
 8013450:	0801ad20 	.word	0x0801ad20

08013454 <_calloc_r>:
 8013454:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8013456:	fba1 2402 	umull	r2, r4, r1, r2
 801345a:	b94c      	cbnz	r4, 8013470 <_calloc_r+0x1c>
 801345c:	4611      	mov	r1, r2
 801345e:	9201      	str	r2, [sp, #4]
 8013460:	f000 f87a 	bl	8013558 <_malloc_r>
 8013464:	9a01      	ldr	r2, [sp, #4]
 8013466:	4605      	mov	r5, r0
 8013468:	b930      	cbnz	r0, 8013478 <_calloc_r+0x24>
 801346a:	4628      	mov	r0, r5
 801346c:	b003      	add	sp, #12
 801346e:	bd30      	pop	{r4, r5, pc}
 8013470:	220c      	movs	r2, #12
 8013472:	6002      	str	r2, [r0, #0]
 8013474:	2500      	movs	r5, #0
 8013476:	e7f8      	b.n	801346a <_calloc_r+0x16>
 8013478:	4621      	mov	r1, r4
 801347a:	f7fe f94f 	bl	801171c <memset>
 801347e:	e7f4      	b.n	801346a <_calloc_r+0x16>

08013480 <_free_r>:
 8013480:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8013482:	2900      	cmp	r1, #0
 8013484:	d044      	beq.n	8013510 <_free_r+0x90>
 8013486:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801348a:	9001      	str	r0, [sp, #4]
 801348c:	2b00      	cmp	r3, #0
 801348e:	f1a1 0404 	sub.w	r4, r1, #4
 8013492:	bfb8      	it	lt
 8013494:	18e4      	addlt	r4, r4, r3
 8013496:	f000 fa9b 	bl	80139d0 <__malloc_lock>
 801349a:	4a1e      	ldr	r2, [pc, #120]	; (8013514 <_free_r+0x94>)
 801349c:	9801      	ldr	r0, [sp, #4]
 801349e:	6813      	ldr	r3, [r2, #0]
 80134a0:	b933      	cbnz	r3, 80134b0 <_free_r+0x30>
 80134a2:	6063      	str	r3, [r4, #4]
 80134a4:	6014      	str	r4, [r2, #0]
 80134a6:	b003      	add	sp, #12
 80134a8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80134ac:	f000 ba96 	b.w	80139dc <__malloc_unlock>
 80134b0:	42a3      	cmp	r3, r4
 80134b2:	d908      	bls.n	80134c6 <_free_r+0x46>
 80134b4:	6825      	ldr	r5, [r4, #0]
 80134b6:	1961      	adds	r1, r4, r5
 80134b8:	428b      	cmp	r3, r1
 80134ba:	bf01      	itttt	eq
 80134bc:	6819      	ldreq	r1, [r3, #0]
 80134be:	685b      	ldreq	r3, [r3, #4]
 80134c0:	1949      	addeq	r1, r1, r5
 80134c2:	6021      	streq	r1, [r4, #0]
 80134c4:	e7ed      	b.n	80134a2 <_free_r+0x22>
 80134c6:	461a      	mov	r2, r3
 80134c8:	685b      	ldr	r3, [r3, #4]
 80134ca:	b10b      	cbz	r3, 80134d0 <_free_r+0x50>
 80134cc:	42a3      	cmp	r3, r4
 80134ce:	d9fa      	bls.n	80134c6 <_free_r+0x46>
 80134d0:	6811      	ldr	r1, [r2, #0]
 80134d2:	1855      	adds	r5, r2, r1
 80134d4:	42a5      	cmp	r5, r4
 80134d6:	d10b      	bne.n	80134f0 <_free_r+0x70>
 80134d8:	6824      	ldr	r4, [r4, #0]
 80134da:	4421      	add	r1, r4
 80134dc:	1854      	adds	r4, r2, r1
 80134de:	42a3      	cmp	r3, r4
 80134e0:	6011      	str	r1, [r2, #0]
 80134e2:	d1e0      	bne.n	80134a6 <_free_r+0x26>
 80134e4:	681c      	ldr	r4, [r3, #0]
 80134e6:	685b      	ldr	r3, [r3, #4]
 80134e8:	6053      	str	r3, [r2, #4]
 80134ea:	4421      	add	r1, r4
 80134ec:	6011      	str	r1, [r2, #0]
 80134ee:	e7da      	b.n	80134a6 <_free_r+0x26>
 80134f0:	d902      	bls.n	80134f8 <_free_r+0x78>
 80134f2:	230c      	movs	r3, #12
 80134f4:	6003      	str	r3, [r0, #0]
 80134f6:	e7d6      	b.n	80134a6 <_free_r+0x26>
 80134f8:	6825      	ldr	r5, [r4, #0]
 80134fa:	1961      	adds	r1, r4, r5
 80134fc:	428b      	cmp	r3, r1
 80134fe:	bf04      	itt	eq
 8013500:	6819      	ldreq	r1, [r3, #0]
 8013502:	685b      	ldreq	r3, [r3, #4]
 8013504:	6063      	str	r3, [r4, #4]
 8013506:	bf04      	itt	eq
 8013508:	1949      	addeq	r1, r1, r5
 801350a:	6021      	streq	r1, [r4, #0]
 801350c:	6054      	str	r4, [r2, #4]
 801350e:	e7ca      	b.n	80134a6 <_free_r+0x26>
 8013510:	b003      	add	sp, #12
 8013512:	bd30      	pop	{r4, r5, pc}
 8013514:	20002804 	.word	0x20002804

08013518 <sbrk_aligned>:
 8013518:	b570      	push	{r4, r5, r6, lr}
 801351a:	4e0e      	ldr	r6, [pc, #56]	; (8013554 <sbrk_aligned+0x3c>)
 801351c:	460c      	mov	r4, r1
 801351e:	6831      	ldr	r1, [r6, #0]
 8013520:	4605      	mov	r5, r0
 8013522:	b911      	cbnz	r1, 801352a <sbrk_aligned+0x12>
 8013524:	f000 f9e8 	bl	80138f8 <_sbrk_r>
 8013528:	6030      	str	r0, [r6, #0]
 801352a:	4621      	mov	r1, r4
 801352c:	4628      	mov	r0, r5
 801352e:	f000 f9e3 	bl	80138f8 <_sbrk_r>
 8013532:	1c43      	adds	r3, r0, #1
 8013534:	d00a      	beq.n	801354c <sbrk_aligned+0x34>
 8013536:	1cc4      	adds	r4, r0, #3
 8013538:	f024 0403 	bic.w	r4, r4, #3
 801353c:	42a0      	cmp	r0, r4
 801353e:	d007      	beq.n	8013550 <sbrk_aligned+0x38>
 8013540:	1a21      	subs	r1, r4, r0
 8013542:	4628      	mov	r0, r5
 8013544:	f000 f9d8 	bl	80138f8 <_sbrk_r>
 8013548:	3001      	adds	r0, #1
 801354a:	d101      	bne.n	8013550 <sbrk_aligned+0x38>
 801354c:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8013550:	4620      	mov	r0, r4
 8013552:	bd70      	pop	{r4, r5, r6, pc}
 8013554:	20002808 	.word	0x20002808

08013558 <_malloc_r>:
 8013558:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801355c:	1ccd      	adds	r5, r1, #3
 801355e:	f025 0503 	bic.w	r5, r5, #3
 8013562:	3508      	adds	r5, #8
 8013564:	2d0c      	cmp	r5, #12
 8013566:	bf38      	it	cc
 8013568:	250c      	movcc	r5, #12
 801356a:	2d00      	cmp	r5, #0
 801356c:	4607      	mov	r7, r0
 801356e:	db01      	blt.n	8013574 <_malloc_r+0x1c>
 8013570:	42a9      	cmp	r1, r5
 8013572:	d905      	bls.n	8013580 <_malloc_r+0x28>
 8013574:	230c      	movs	r3, #12
 8013576:	603b      	str	r3, [r7, #0]
 8013578:	2600      	movs	r6, #0
 801357a:	4630      	mov	r0, r6
 801357c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013580:	4e2e      	ldr	r6, [pc, #184]	; (801363c <_malloc_r+0xe4>)
 8013582:	f000 fa25 	bl	80139d0 <__malloc_lock>
 8013586:	6833      	ldr	r3, [r6, #0]
 8013588:	461c      	mov	r4, r3
 801358a:	bb34      	cbnz	r4, 80135da <_malloc_r+0x82>
 801358c:	4629      	mov	r1, r5
 801358e:	4638      	mov	r0, r7
 8013590:	f7ff ffc2 	bl	8013518 <sbrk_aligned>
 8013594:	1c43      	adds	r3, r0, #1
 8013596:	4604      	mov	r4, r0
 8013598:	d14d      	bne.n	8013636 <_malloc_r+0xde>
 801359a:	6834      	ldr	r4, [r6, #0]
 801359c:	4626      	mov	r6, r4
 801359e:	2e00      	cmp	r6, #0
 80135a0:	d140      	bne.n	8013624 <_malloc_r+0xcc>
 80135a2:	6823      	ldr	r3, [r4, #0]
 80135a4:	4631      	mov	r1, r6
 80135a6:	4638      	mov	r0, r7
 80135a8:	eb04 0803 	add.w	r8, r4, r3
 80135ac:	f000 f9a4 	bl	80138f8 <_sbrk_r>
 80135b0:	4580      	cmp	r8, r0
 80135b2:	d13a      	bne.n	801362a <_malloc_r+0xd2>
 80135b4:	6821      	ldr	r1, [r4, #0]
 80135b6:	3503      	adds	r5, #3
 80135b8:	1a6d      	subs	r5, r5, r1
 80135ba:	f025 0503 	bic.w	r5, r5, #3
 80135be:	3508      	adds	r5, #8
 80135c0:	2d0c      	cmp	r5, #12
 80135c2:	bf38      	it	cc
 80135c4:	250c      	movcc	r5, #12
 80135c6:	4629      	mov	r1, r5
 80135c8:	4638      	mov	r0, r7
 80135ca:	f7ff ffa5 	bl	8013518 <sbrk_aligned>
 80135ce:	3001      	adds	r0, #1
 80135d0:	d02b      	beq.n	801362a <_malloc_r+0xd2>
 80135d2:	6823      	ldr	r3, [r4, #0]
 80135d4:	442b      	add	r3, r5
 80135d6:	6023      	str	r3, [r4, #0]
 80135d8:	e00e      	b.n	80135f8 <_malloc_r+0xa0>
 80135da:	6822      	ldr	r2, [r4, #0]
 80135dc:	1b52      	subs	r2, r2, r5
 80135de:	d41e      	bmi.n	801361e <_malloc_r+0xc6>
 80135e0:	2a0b      	cmp	r2, #11
 80135e2:	d916      	bls.n	8013612 <_malloc_r+0xba>
 80135e4:	1961      	adds	r1, r4, r5
 80135e6:	42a3      	cmp	r3, r4
 80135e8:	6025      	str	r5, [r4, #0]
 80135ea:	bf18      	it	ne
 80135ec:	6059      	strne	r1, [r3, #4]
 80135ee:	6863      	ldr	r3, [r4, #4]
 80135f0:	bf08      	it	eq
 80135f2:	6031      	streq	r1, [r6, #0]
 80135f4:	5162      	str	r2, [r4, r5]
 80135f6:	604b      	str	r3, [r1, #4]
 80135f8:	4638      	mov	r0, r7
 80135fa:	f104 060b 	add.w	r6, r4, #11
 80135fe:	f000 f9ed 	bl	80139dc <__malloc_unlock>
 8013602:	f026 0607 	bic.w	r6, r6, #7
 8013606:	1d23      	adds	r3, r4, #4
 8013608:	1af2      	subs	r2, r6, r3
 801360a:	d0b6      	beq.n	801357a <_malloc_r+0x22>
 801360c:	1b9b      	subs	r3, r3, r6
 801360e:	50a3      	str	r3, [r4, r2]
 8013610:	e7b3      	b.n	801357a <_malloc_r+0x22>
 8013612:	6862      	ldr	r2, [r4, #4]
 8013614:	42a3      	cmp	r3, r4
 8013616:	bf0c      	ite	eq
 8013618:	6032      	streq	r2, [r6, #0]
 801361a:	605a      	strne	r2, [r3, #4]
 801361c:	e7ec      	b.n	80135f8 <_malloc_r+0xa0>
 801361e:	4623      	mov	r3, r4
 8013620:	6864      	ldr	r4, [r4, #4]
 8013622:	e7b2      	b.n	801358a <_malloc_r+0x32>
 8013624:	4634      	mov	r4, r6
 8013626:	6876      	ldr	r6, [r6, #4]
 8013628:	e7b9      	b.n	801359e <_malloc_r+0x46>
 801362a:	230c      	movs	r3, #12
 801362c:	603b      	str	r3, [r7, #0]
 801362e:	4638      	mov	r0, r7
 8013630:	f000 f9d4 	bl	80139dc <__malloc_unlock>
 8013634:	e7a1      	b.n	801357a <_malloc_r+0x22>
 8013636:	6025      	str	r5, [r4, #0]
 8013638:	e7de      	b.n	80135f8 <_malloc_r+0xa0>
 801363a:	bf00      	nop
 801363c:	20002804 	.word	0x20002804

08013640 <__ssputs_r>:
 8013640:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013644:	688e      	ldr	r6, [r1, #8]
 8013646:	429e      	cmp	r6, r3
 8013648:	4682      	mov	sl, r0
 801364a:	460c      	mov	r4, r1
 801364c:	4690      	mov	r8, r2
 801364e:	461f      	mov	r7, r3
 8013650:	d838      	bhi.n	80136c4 <__ssputs_r+0x84>
 8013652:	898a      	ldrh	r2, [r1, #12]
 8013654:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8013658:	d032      	beq.n	80136c0 <__ssputs_r+0x80>
 801365a:	6825      	ldr	r5, [r4, #0]
 801365c:	6909      	ldr	r1, [r1, #16]
 801365e:	eba5 0901 	sub.w	r9, r5, r1
 8013662:	6965      	ldr	r5, [r4, #20]
 8013664:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8013668:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801366c:	3301      	adds	r3, #1
 801366e:	444b      	add	r3, r9
 8013670:	106d      	asrs	r5, r5, #1
 8013672:	429d      	cmp	r5, r3
 8013674:	bf38      	it	cc
 8013676:	461d      	movcc	r5, r3
 8013678:	0553      	lsls	r3, r2, #21
 801367a:	d531      	bpl.n	80136e0 <__ssputs_r+0xa0>
 801367c:	4629      	mov	r1, r5
 801367e:	f7ff ff6b 	bl	8013558 <_malloc_r>
 8013682:	4606      	mov	r6, r0
 8013684:	b950      	cbnz	r0, 801369c <__ssputs_r+0x5c>
 8013686:	230c      	movs	r3, #12
 8013688:	f8ca 3000 	str.w	r3, [sl]
 801368c:	89a3      	ldrh	r3, [r4, #12]
 801368e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013692:	81a3      	strh	r3, [r4, #12]
 8013694:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8013698:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801369c:	6921      	ldr	r1, [r4, #16]
 801369e:	464a      	mov	r2, r9
 80136a0:	f7fe f82e 	bl	8011700 <memcpy>
 80136a4:	89a3      	ldrh	r3, [r4, #12]
 80136a6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80136aa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80136ae:	81a3      	strh	r3, [r4, #12]
 80136b0:	6126      	str	r6, [r4, #16]
 80136b2:	6165      	str	r5, [r4, #20]
 80136b4:	444e      	add	r6, r9
 80136b6:	eba5 0509 	sub.w	r5, r5, r9
 80136ba:	6026      	str	r6, [r4, #0]
 80136bc:	60a5      	str	r5, [r4, #8]
 80136be:	463e      	mov	r6, r7
 80136c0:	42be      	cmp	r6, r7
 80136c2:	d900      	bls.n	80136c6 <__ssputs_r+0x86>
 80136c4:	463e      	mov	r6, r7
 80136c6:	6820      	ldr	r0, [r4, #0]
 80136c8:	4632      	mov	r2, r6
 80136ca:	4641      	mov	r1, r8
 80136cc:	f000 f966 	bl	801399c <memmove>
 80136d0:	68a3      	ldr	r3, [r4, #8]
 80136d2:	1b9b      	subs	r3, r3, r6
 80136d4:	60a3      	str	r3, [r4, #8]
 80136d6:	6823      	ldr	r3, [r4, #0]
 80136d8:	4433      	add	r3, r6
 80136da:	6023      	str	r3, [r4, #0]
 80136dc:	2000      	movs	r0, #0
 80136de:	e7db      	b.n	8013698 <__ssputs_r+0x58>
 80136e0:	462a      	mov	r2, r5
 80136e2:	f000 f981 	bl	80139e8 <_realloc_r>
 80136e6:	4606      	mov	r6, r0
 80136e8:	2800      	cmp	r0, #0
 80136ea:	d1e1      	bne.n	80136b0 <__ssputs_r+0x70>
 80136ec:	6921      	ldr	r1, [r4, #16]
 80136ee:	4650      	mov	r0, sl
 80136f0:	f7ff fec6 	bl	8013480 <_free_r>
 80136f4:	e7c7      	b.n	8013686 <__ssputs_r+0x46>
	...

080136f8 <_svfiprintf_r>:
 80136f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80136fc:	4698      	mov	r8, r3
 80136fe:	898b      	ldrh	r3, [r1, #12]
 8013700:	061b      	lsls	r3, r3, #24
 8013702:	b09d      	sub	sp, #116	; 0x74
 8013704:	4607      	mov	r7, r0
 8013706:	460d      	mov	r5, r1
 8013708:	4614      	mov	r4, r2
 801370a:	d50e      	bpl.n	801372a <_svfiprintf_r+0x32>
 801370c:	690b      	ldr	r3, [r1, #16]
 801370e:	b963      	cbnz	r3, 801372a <_svfiprintf_r+0x32>
 8013710:	2140      	movs	r1, #64	; 0x40
 8013712:	f7ff ff21 	bl	8013558 <_malloc_r>
 8013716:	6028      	str	r0, [r5, #0]
 8013718:	6128      	str	r0, [r5, #16]
 801371a:	b920      	cbnz	r0, 8013726 <_svfiprintf_r+0x2e>
 801371c:	230c      	movs	r3, #12
 801371e:	603b      	str	r3, [r7, #0]
 8013720:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8013724:	e0d1      	b.n	80138ca <_svfiprintf_r+0x1d2>
 8013726:	2340      	movs	r3, #64	; 0x40
 8013728:	616b      	str	r3, [r5, #20]
 801372a:	2300      	movs	r3, #0
 801372c:	9309      	str	r3, [sp, #36]	; 0x24
 801372e:	2320      	movs	r3, #32
 8013730:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8013734:	f8cd 800c 	str.w	r8, [sp, #12]
 8013738:	2330      	movs	r3, #48	; 0x30
 801373a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80138e4 <_svfiprintf_r+0x1ec>
 801373e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8013742:	f04f 0901 	mov.w	r9, #1
 8013746:	4623      	mov	r3, r4
 8013748:	469a      	mov	sl, r3
 801374a:	f813 2b01 	ldrb.w	r2, [r3], #1
 801374e:	b10a      	cbz	r2, 8013754 <_svfiprintf_r+0x5c>
 8013750:	2a25      	cmp	r2, #37	; 0x25
 8013752:	d1f9      	bne.n	8013748 <_svfiprintf_r+0x50>
 8013754:	ebba 0b04 	subs.w	fp, sl, r4
 8013758:	d00b      	beq.n	8013772 <_svfiprintf_r+0x7a>
 801375a:	465b      	mov	r3, fp
 801375c:	4622      	mov	r2, r4
 801375e:	4629      	mov	r1, r5
 8013760:	4638      	mov	r0, r7
 8013762:	f7ff ff6d 	bl	8013640 <__ssputs_r>
 8013766:	3001      	adds	r0, #1
 8013768:	f000 80aa 	beq.w	80138c0 <_svfiprintf_r+0x1c8>
 801376c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801376e:	445a      	add	r2, fp
 8013770:	9209      	str	r2, [sp, #36]	; 0x24
 8013772:	f89a 3000 	ldrb.w	r3, [sl]
 8013776:	2b00      	cmp	r3, #0
 8013778:	f000 80a2 	beq.w	80138c0 <_svfiprintf_r+0x1c8>
 801377c:	2300      	movs	r3, #0
 801377e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8013782:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8013786:	f10a 0a01 	add.w	sl, sl, #1
 801378a:	9304      	str	r3, [sp, #16]
 801378c:	9307      	str	r3, [sp, #28]
 801378e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8013792:	931a      	str	r3, [sp, #104]	; 0x68
 8013794:	4654      	mov	r4, sl
 8013796:	2205      	movs	r2, #5
 8013798:	f814 1b01 	ldrb.w	r1, [r4], #1
 801379c:	4851      	ldr	r0, [pc, #324]	; (80138e4 <_svfiprintf_r+0x1ec>)
 801379e:	f7ec fd47 	bl	8000230 <memchr>
 80137a2:	9a04      	ldr	r2, [sp, #16]
 80137a4:	b9d8      	cbnz	r0, 80137de <_svfiprintf_r+0xe6>
 80137a6:	06d0      	lsls	r0, r2, #27
 80137a8:	bf44      	itt	mi
 80137aa:	2320      	movmi	r3, #32
 80137ac:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80137b0:	0711      	lsls	r1, r2, #28
 80137b2:	bf44      	itt	mi
 80137b4:	232b      	movmi	r3, #43	; 0x2b
 80137b6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80137ba:	f89a 3000 	ldrb.w	r3, [sl]
 80137be:	2b2a      	cmp	r3, #42	; 0x2a
 80137c0:	d015      	beq.n	80137ee <_svfiprintf_r+0xf6>
 80137c2:	9a07      	ldr	r2, [sp, #28]
 80137c4:	4654      	mov	r4, sl
 80137c6:	2000      	movs	r0, #0
 80137c8:	f04f 0c0a 	mov.w	ip, #10
 80137cc:	4621      	mov	r1, r4
 80137ce:	f811 3b01 	ldrb.w	r3, [r1], #1
 80137d2:	3b30      	subs	r3, #48	; 0x30
 80137d4:	2b09      	cmp	r3, #9
 80137d6:	d94e      	bls.n	8013876 <_svfiprintf_r+0x17e>
 80137d8:	b1b0      	cbz	r0, 8013808 <_svfiprintf_r+0x110>
 80137da:	9207      	str	r2, [sp, #28]
 80137dc:	e014      	b.n	8013808 <_svfiprintf_r+0x110>
 80137de:	eba0 0308 	sub.w	r3, r0, r8
 80137e2:	fa09 f303 	lsl.w	r3, r9, r3
 80137e6:	4313      	orrs	r3, r2
 80137e8:	9304      	str	r3, [sp, #16]
 80137ea:	46a2      	mov	sl, r4
 80137ec:	e7d2      	b.n	8013794 <_svfiprintf_r+0x9c>
 80137ee:	9b03      	ldr	r3, [sp, #12]
 80137f0:	1d19      	adds	r1, r3, #4
 80137f2:	681b      	ldr	r3, [r3, #0]
 80137f4:	9103      	str	r1, [sp, #12]
 80137f6:	2b00      	cmp	r3, #0
 80137f8:	bfbb      	ittet	lt
 80137fa:	425b      	neglt	r3, r3
 80137fc:	f042 0202 	orrlt.w	r2, r2, #2
 8013800:	9307      	strge	r3, [sp, #28]
 8013802:	9307      	strlt	r3, [sp, #28]
 8013804:	bfb8      	it	lt
 8013806:	9204      	strlt	r2, [sp, #16]
 8013808:	7823      	ldrb	r3, [r4, #0]
 801380a:	2b2e      	cmp	r3, #46	; 0x2e
 801380c:	d10c      	bne.n	8013828 <_svfiprintf_r+0x130>
 801380e:	7863      	ldrb	r3, [r4, #1]
 8013810:	2b2a      	cmp	r3, #42	; 0x2a
 8013812:	d135      	bne.n	8013880 <_svfiprintf_r+0x188>
 8013814:	9b03      	ldr	r3, [sp, #12]
 8013816:	1d1a      	adds	r2, r3, #4
 8013818:	681b      	ldr	r3, [r3, #0]
 801381a:	9203      	str	r2, [sp, #12]
 801381c:	2b00      	cmp	r3, #0
 801381e:	bfb8      	it	lt
 8013820:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8013824:	3402      	adds	r4, #2
 8013826:	9305      	str	r3, [sp, #20]
 8013828:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80138f4 <_svfiprintf_r+0x1fc>
 801382c:	7821      	ldrb	r1, [r4, #0]
 801382e:	2203      	movs	r2, #3
 8013830:	4650      	mov	r0, sl
 8013832:	f7ec fcfd 	bl	8000230 <memchr>
 8013836:	b140      	cbz	r0, 801384a <_svfiprintf_r+0x152>
 8013838:	2340      	movs	r3, #64	; 0x40
 801383a:	eba0 000a 	sub.w	r0, r0, sl
 801383e:	fa03 f000 	lsl.w	r0, r3, r0
 8013842:	9b04      	ldr	r3, [sp, #16]
 8013844:	4303      	orrs	r3, r0
 8013846:	3401      	adds	r4, #1
 8013848:	9304      	str	r3, [sp, #16]
 801384a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801384e:	4826      	ldr	r0, [pc, #152]	; (80138e8 <_svfiprintf_r+0x1f0>)
 8013850:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8013854:	2206      	movs	r2, #6
 8013856:	f7ec fceb 	bl	8000230 <memchr>
 801385a:	2800      	cmp	r0, #0
 801385c:	d038      	beq.n	80138d0 <_svfiprintf_r+0x1d8>
 801385e:	4b23      	ldr	r3, [pc, #140]	; (80138ec <_svfiprintf_r+0x1f4>)
 8013860:	bb1b      	cbnz	r3, 80138aa <_svfiprintf_r+0x1b2>
 8013862:	9b03      	ldr	r3, [sp, #12]
 8013864:	3307      	adds	r3, #7
 8013866:	f023 0307 	bic.w	r3, r3, #7
 801386a:	3308      	adds	r3, #8
 801386c:	9303      	str	r3, [sp, #12]
 801386e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013870:	4433      	add	r3, r6
 8013872:	9309      	str	r3, [sp, #36]	; 0x24
 8013874:	e767      	b.n	8013746 <_svfiprintf_r+0x4e>
 8013876:	fb0c 3202 	mla	r2, ip, r2, r3
 801387a:	460c      	mov	r4, r1
 801387c:	2001      	movs	r0, #1
 801387e:	e7a5      	b.n	80137cc <_svfiprintf_r+0xd4>
 8013880:	2300      	movs	r3, #0
 8013882:	3401      	adds	r4, #1
 8013884:	9305      	str	r3, [sp, #20]
 8013886:	4619      	mov	r1, r3
 8013888:	f04f 0c0a 	mov.w	ip, #10
 801388c:	4620      	mov	r0, r4
 801388e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8013892:	3a30      	subs	r2, #48	; 0x30
 8013894:	2a09      	cmp	r2, #9
 8013896:	d903      	bls.n	80138a0 <_svfiprintf_r+0x1a8>
 8013898:	2b00      	cmp	r3, #0
 801389a:	d0c5      	beq.n	8013828 <_svfiprintf_r+0x130>
 801389c:	9105      	str	r1, [sp, #20]
 801389e:	e7c3      	b.n	8013828 <_svfiprintf_r+0x130>
 80138a0:	fb0c 2101 	mla	r1, ip, r1, r2
 80138a4:	4604      	mov	r4, r0
 80138a6:	2301      	movs	r3, #1
 80138a8:	e7f0      	b.n	801388c <_svfiprintf_r+0x194>
 80138aa:	ab03      	add	r3, sp, #12
 80138ac:	9300      	str	r3, [sp, #0]
 80138ae:	462a      	mov	r2, r5
 80138b0:	4b0f      	ldr	r3, [pc, #60]	; (80138f0 <_svfiprintf_r+0x1f8>)
 80138b2:	a904      	add	r1, sp, #16
 80138b4:	4638      	mov	r0, r7
 80138b6:	f7fd ffd9 	bl	801186c <_printf_float>
 80138ba:	1c42      	adds	r2, r0, #1
 80138bc:	4606      	mov	r6, r0
 80138be:	d1d6      	bne.n	801386e <_svfiprintf_r+0x176>
 80138c0:	89ab      	ldrh	r3, [r5, #12]
 80138c2:	065b      	lsls	r3, r3, #25
 80138c4:	f53f af2c 	bmi.w	8013720 <_svfiprintf_r+0x28>
 80138c8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80138ca:	b01d      	add	sp, #116	; 0x74
 80138cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80138d0:	ab03      	add	r3, sp, #12
 80138d2:	9300      	str	r3, [sp, #0]
 80138d4:	462a      	mov	r2, r5
 80138d6:	4b06      	ldr	r3, [pc, #24]	; (80138f0 <_svfiprintf_r+0x1f8>)
 80138d8:	a904      	add	r1, sp, #16
 80138da:	4638      	mov	r0, r7
 80138dc:	f7fe fa6a 	bl	8011db4 <_printf_i>
 80138e0:	e7eb      	b.n	80138ba <_svfiprintf_r+0x1c2>
 80138e2:	bf00      	nop
 80138e4:	0801ae7c 	.word	0x0801ae7c
 80138e8:	0801ae86 	.word	0x0801ae86
 80138ec:	0801186d 	.word	0x0801186d
 80138f0:	08013641 	.word	0x08013641
 80138f4:	0801ae82 	.word	0x0801ae82

080138f8 <_sbrk_r>:
 80138f8:	b538      	push	{r3, r4, r5, lr}
 80138fa:	4d06      	ldr	r5, [pc, #24]	; (8013914 <_sbrk_r+0x1c>)
 80138fc:	2300      	movs	r3, #0
 80138fe:	4604      	mov	r4, r0
 8013900:	4608      	mov	r0, r1
 8013902:	602b      	str	r3, [r5, #0]
 8013904:	f7f5 fbb8 	bl	8009078 <_sbrk>
 8013908:	1c43      	adds	r3, r0, #1
 801390a:	d102      	bne.n	8013912 <_sbrk_r+0x1a>
 801390c:	682b      	ldr	r3, [r5, #0]
 801390e:	b103      	cbz	r3, 8013912 <_sbrk_r+0x1a>
 8013910:	6023      	str	r3, [r4, #0]
 8013912:	bd38      	pop	{r3, r4, r5, pc}
 8013914:	2000280c 	.word	0x2000280c

08013918 <__assert_func>:
 8013918:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801391a:	4614      	mov	r4, r2
 801391c:	461a      	mov	r2, r3
 801391e:	4b09      	ldr	r3, [pc, #36]	; (8013944 <__assert_func+0x2c>)
 8013920:	681b      	ldr	r3, [r3, #0]
 8013922:	4605      	mov	r5, r0
 8013924:	68d8      	ldr	r0, [r3, #12]
 8013926:	b14c      	cbz	r4, 801393c <__assert_func+0x24>
 8013928:	4b07      	ldr	r3, [pc, #28]	; (8013948 <__assert_func+0x30>)
 801392a:	9100      	str	r1, [sp, #0]
 801392c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8013930:	4906      	ldr	r1, [pc, #24]	; (801394c <__assert_func+0x34>)
 8013932:	462b      	mov	r3, r5
 8013934:	f000 f80e 	bl	8013954 <fiprintf>
 8013938:	f000 faac 	bl	8013e94 <abort>
 801393c:	4b04      	ldr	r3, [pc, #16]	; (8013950 <__assert_func+0x38>)
 801393e:	461c      	mov	r4, r3
 8013940:	e7f3      	b.n	801392a <__assert_func+0x12>
 8013942:	bf00      	nop
 8013944:	200003b4 	.word	0x200003b4
 8013948:	0801ae8d 	.word	0x0801ae8d
 801394c:	0801ae9a 	.word	0x0801ae9a
 8013950:	0801aec8 	.word	0x0801aec8

08013954 <fiprintf>:
 8013954:	b40e      	push	{r1, r2, r3}
 8013956:	b503      	push	{r0, r1, lr}
 8013958:	4601      	mov	r1, r0
 801395a:	ab03      	add	r3, sp, #12
 801395c:	4805      	ldr	r0, [pc, #20]	; (8013974 <fiprintf+0x20>)
 801395e:	f853 2b04 	ldr.w	r2, [r3], #4
 8013962:	6800      	ldr	r0, [r0, #0]
 8013964:	9301      	str	r3, [sp, #4]
 8013966:	f000 f897 	bl	8013a98 <_vfiprintf_r>
 801396a:	b002      	add	sp, #8
 801396c:	f85d eb04 	ldr.w	lr, [sp], #4
 8013970:	b003      	add	sp, #12
 8013972:	4770      	bx	lr
 8013974:	200003b4 	.word	0x200003b4

08013978 <__ascii_mbtowc>:
 8013978:	b082      	sub	sp, #8
 801397a:	b901      	cbnz	r1, 801397e <__ascii_mbtowc+0x6>
 801397c:	a901      	add	r1, sp, #4
 801397e:	b142      	cbz	r2, 8013992 <__ascii_mbtowc+0x1a>
 8013980:	b14b      	cbz	r3, 8013996 <__ascii_mbtowc+0x1e>
 8013982:	7813      	ldrb	r3, [r2, #0]
 8013984:	600b      	str	r3, [r1, #0]
 8013986:	7812      	ldrb	r2, [r2, #0]
 8013988:	1e10      	subs	r0, r2, #0
 801398a:	bf18      	it	ne
 801398c:	2001      	movne	r0, #1
 801398e:	b002      	add	sp, #8
 8013990:	4770      	bx	lr
 8013992:	4610      	mov	r0, r2
 8013994:	e7fb      	b.n	801398e <__ascii_mbtowc+0x16>
 8013996:	f06f 0001 	mvn.w	r0, #1
 801399a:	e7f8      	b.n	801398e <__ascii_mbtowc+0x16>

0801399c <memmove>:
 801399c:	4288      	cmp	r0, r1
 801399e:	b510      	push	{r4, lr}
 80139a0:	eb01 0402 	add.w	r4, r1, r2
 80139a4:	d902      	bls.n	80139ac <memmove+0x10>
 80139a6:	4284      	cmp	r4, r0
 80139a8:	4623      	mov	r3, r4
 80139aa:	d807      	bhi.n	80139bc <memmove+0x20>
 80139ac:	1e43      	subs	r3, r0, #1
 80139ae:	42a1      	cmp	r1, r4
 80139b0:	d008      	beq.n	80139c4 <memmove+0x28>
 80139b2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80139b6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80139ba:	e7f8      	b.n	80139ae <memmove+0x12>
 80139bc:	4402      	add	r2, r0
 80139be:	4601      	mov	r1, r0
 80139c0:	428a      	cmp	r2, r1
 80139c2:	d100      	bne.n	80139c6 <memmove+0x2a>
 80139c4:	bd10      	pop	{r4, pc}
 80139c6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80139ca:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80139ce:	e7f7      	b.n	80139c0 <memmove+0x24>

080139d0 <__malloc_lock>:
 80139d0:	4801      	ldr	r0, [pc, #4]	; (80139d8 <__malloc_lock+0x8>)
 80139d2:	f000 bc1f 	b.w	8014214 <__retarget_lock_acquire_recursive>
 80139d6:	bf00      	nop
 80139d8:	20002810 	.word	0x20002810

080139dc <__malloc_unlock>:
 80139dc:	4801      	ldr	r0, [pc, #4]	; (80139e4 <__malloc_unlock+0x8>)
 80139de:	f000 bc1a 	b.w	8014216 <__retarget_lock_release_recursive>
 80139e2:	bf00      	nop
 80139e4:	20002810 	.word	0x20002810

080139e8 <_realloc_r>:
 80139e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80139ec:	4680      	mov	r8, r0
 80139ee:	4614      	mov	r4, r2
 80139f0:	460e      	mov	r6, r1
 80139f2:	b921      	cbnz	r1, 80139fe <_realloc_r+0x16>
 80139f4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80139f8:	4611      	mov	r1, r2
 80139fa:	f7ff bdad 	b.w	8013558 <_malloc_r>
 80139fe:	b92a      	cbnz	r2, 8013a0c <_realloc_r+0x24>
 8013a00:	f7ff fd3e 	bl	8013480 <_free_r>
 8013a04:	4625      	mov	r5, r4
 8013a06:	4628      	mov	r0, r5
 8013a08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013a0c:	f000 fc6a 	bl	80142e4 <_malloc_usable_size_r>
 8013a10:	4284      	cmp	r4, r0
 8013a12:	4607      	mov	r7, r0
 8013a14:	d802      	bhi.n	8013a1c <_realloc_r+0x34>
 8013a16:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8013a1a:	d812      	bhi.n	8013a42 <_realloc_r+0x5a>
 8013a1c:	4621      	mov	r1, r4
 8013a1e:	4640      	mov	r0, r8
 8013a20:	f7ff fd9a 	bl	8013558 <_malloc_r>
 8013a24:	4605      	mov	r5, r0
 8013a26:	2800      	cmp	r0, #0
 8013a28:	d0ed      	beq.n	8013a06 <_realloc_r+0x1e>
 8013a2a:	42bc      	cmp	r4, r7
 8013a2c:	4622      	mov	r2, r4
 8013a2e:	4631      	mov	r1, r6
 8013a30:	bf28      	it	cs
 8013a32:	463a      	movcs	r2, r7
 8013a34:	f7fd fe64 	bl	8011700 <memcpy>
 8013a38:	4631      	mov	r1, r6
 8013a3a:	4640      	mov	r0, r8
 8013a3c:	f7ff fd20 	bl	8013480 <_free_r>
 8013a40:	e7e1      	b.n	8013a06 <_realloc_r+0x1e>
 8013a42:	4635      	mov	r5, r6
 8013a44:	e7df      	b.n	8013a06 <_realloc_r+0x1e>

08013a46 <__sfputc_r>:
 8013a46:	6893      	ldr	r3, [r2, #8]
 8013a48:	3b01      	subs	r3, #1
 8013a4a:	2b00      	cmp	r3, #0
 8013a4c:	b410      	push	{r4}
 8013a4e:	6093      	str	r3, [r2, #8]
 8013a50:	da08      	bge.n	8013a64 <__sfputc_r+0x1e>
 8013a52:	6994      	ldr	r4, [r2, #24]
 8013a54:	42a3      	cmp	r3, r4
 8013a56:	db01      	blt.n	8013a5c <__sfputc_r+0x16>
 8013a58:	290a      	cmp	r1, #10
 8013a5a:	d103      	bne.n	8013a64 <__sfputc_r+0x1e>
 8013a5c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8013a60:	f000 b94a 	b.w	8013cf8 <__swbuf_r>
 8013a64:	6813      	ldr	r3, [r2, #0]
 8013a66:	1c58      	adds	r0, r3, #1
 8013a68:	6010      	str	r0, [r2, #0]
 8013a6a:	7019      	strb	r1, [r3, #0]
 8013a6c:	4608      	mov	r0, r1
 8013a6e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8013a72:	4770      	bx	lr

08013a74 <__sfputs_r>:
 8013a74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013a76:	4606      	mov	r6, r0
 8013a78:	460f      	mov	r7, r1
 8013a7a:	4614      	mov	r4, r2
 8013a7c:	18d5      	adds	r5, r2, r3
 8013a7e:	42ac      	cmp	r4, r5
 8013a80:	d101      	bne.n	8013a86 <__sfputs_r+0x12>
 8013a82:	2000      	movs	r0, #0
 8013a84:	e007      	b.n	8013a96 <__sfputs_r+0x22>
 8013a86:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013a8a:	463a      	mov	r2, r7
 8013a8c:	4630      	mov	r0, r6
 8013a8e:	f7ff ffda 	bl	8013a46 <__sfputc_r>
 8013a92:	1c43      	adds	r3, r0, #1
 8013a94:	d1f3      	bne.n	8013a7e <__sfputs_r+0xa>
 8013a96:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08013a98 <_vfiprintf_r>:
 8013a98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013a9c:	460d      	mov	r5, r1
 8013a9e:	b09d      	sub	sp, #116	; 0x74
 8013aa0:	4614      	mov	r4, r2
 8013aa2:	4698      	mov	r8, r3
 8013aa4:	4606      	mov	r6, r0
 8013aa6:	b118      	cbz	r0, 8013ab0 <_vfiprintf_r+0x18>
 8013aa8:	6983      	ldr	r3, [r0, #24]
 8013aaa:	b90b      	cbnz	r3, 8013ab0 <_vfiprintf_r+0x18>
 8013aac:	f000 fb14 	bl	80140d8 <__sinit>
 8013ab0:	4b89      	ldr	r3, [pc, #548]	; (8013cd8 <_vfiprintf_r+0x240>)
 8013ab2:	429d      	cmp	r5, r3
 8013ab4:	d11b      	bne.n	8013aee <_vfiprintf_r+0x56>
 8013ab6:	6875      	ldr	r5, [r6, #4]
 8013ab8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8013aba:	07d9      	lsls	r1, r3, #31
 8013abc:	d405      	bmi.n	8013aca <_vfiprintf_r+0x32>
 8013abe:	89ab      	ldrh	r3, [r5, #12]
 8013ac0:	059a      	lsls	r2, r3, #22
 8013ac2:	d402      	bmi.n	8013aca <_vfiprintf_r+0x32>
 8013ac4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8013ac6:	f000 fba5 	bl	8014214 <__retarget_lock_acquire_recursive>
 8013aca:	89ab      	ldrh	r3, [r5, #12]
 8013acc:	071b      	lsls	r3, r3, #28
 8013ace:	d501      	bpl.n	8013ad4 <_vfiprintf_r+0x3c>
 8013ad0:	692b      	ldr	r3, [r5, #16]
 8013ad2:	b9eb      	cbnz	r3, 8013b10 <_vfiprintf_r+0x78>
 8013ad4:	4629      	mov	r1, r5
 8013ad6:	4630      	mov	r0, r6
 8013ad8:	f000 f96e 	bl	8013db8 <__swsetup_r>
 8013adc:	b1c0      	cbz	r0, 8013b10 <_vfiprintf_r+0x78>
 8013ade:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8013ae0:	07dc      	lsls	r4, r3, #31
 8013ae2:	d50e      	bpl.n	8013b02 <_vfiprintf_r+0x6a>
 8013ae4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8013ae8:	b01d      	add	sp, #116	; 0x74
 8013aea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013aee:	4b7b      	ldr	r3, [pc, #492]	; (8013cdc <_vfiprintf_r+0x244>)
 8013af0:	429d      	cmp	r5, r3
 8013af2:	d101      	bne.n	8013af8 <_vfiprintf_r+0x60>
 8013af4:	68b5      	ldr	r5, [r6, #8]
 8013af6:	e7df      	b.n	8013ab8 <_vfiprintf_r+0x20>
 8013af8:	4b79      	ldr	r3, [pc, #484]	; (8013ce0 <_vfiprintf_r+0x248>)
 8013afa:	429d      	cmp	r5, r3
 8013afc:	bf08      	it	eq
 8013afe:	68f5      	ldreq	r5, [r6, #12]
 8013b00:	e7da      	b.n	8013ab8 <_vfiprintf_r+0x20>
 8013b02:	89ab      	ldrh	r3, [r5, #12]
 8013b04:	0598      	lsls	r0, r3, #22
 8013b06:	d4ed      	bmi.n	8013ae4 <_vfiprintf_r+0x4c>
 8013b08:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8013b0a:	f000 fb84 	bl	8014216 <__retarget_lock_release_recursive>
 8013b0e:	e7e9      	b.n	8013ae4 <_vfiprintf_r+0x4c>
 8013b10:	2300      	movs	r3, #0
 8013b12:	9309      	str	r3, [sp, #36]	; 0x24
 8013b14:	2320      	movs	r3, #32
 8013b16:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8013b1a:	f8cd 800c 	str.w	r8, [sp, #12]
 8013b1e:	2330      	movs	r3, #48	; 0x30
 8013b20:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8013ce4 <_vfiprintf_r+0x24c>
 8013b24:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8013b28:	f04f 0901 	mov.w	r9, #1
 8013b2c:	4623      	mov	r3, r4
 8013b2e:	469a      	mov	sl, r3
 8013b30:	f813 2b01 	ldrb.w	r2, [r3], #1
 8013b34:	b10a      	cbz	r2, 8013b3a <_vfiprintf_r+0xa2>
 8013b36:	2a25      	cmp	r2, #37	; 0x25
 8013b38:	d1f9      	bne.n	8013b2e <_vfiprintf_r+0x96>
 8013b3a:	ebba 0b04 	subs.w	fp, sl, r4
 8013b3e:	d00b      	beq.n	8013b58 <_vfiprintf_r+0xc0>
 8013b40:	465b      	mov	r3, fp
 8013b42:	4622      	mov	r2, r4
 8013b44:	4629      	mov	r1, r5
 8013b46:	4630      	mov	r0, r6
 8013b48:	f7ff ff94 	bl	8013a74 <__sfputs_r>
 8013b4c:	3001      	adds	r0, #1
 8013b4e:	f000 80aa 	beq.w	8013ca6 <_vfiprintf_r+0x20e>
 8013b52:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8013b54:	445a      	add	r2, fp
 8013b56:	9209      	str	r2, [sp, #36]	; 0x24
 8013b58:	f89a 3000 	ldrb.w	r3, [sl]
 8013b5c:	2b00      	cmp	r3, #0
 8013b5e:	f000 80a2 	beq.w	8013ca6 <_vfiprintf_r+0x20e>
 8013b62:	2300      	movs	r3, #0
 8013b64:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8013b68:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8013b6c:	f10a 0a01 	add.w	sl, sl, #1
 8013b70:	9304      	str	r3, [sp, #16]
 8013b72:	9307      	str	r3, [sp, #28]
 8013b74:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8013b78:	931a      	str	r3, [sp, #104]	; 0x68
 8013b7a:	4654      	mov	r4, sl
 8013b7c:	2205      	movs	r2, #5
 8013b7e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013b82:	4858      	ldr	r0, [pc, #352]	; (8013ce4 <_vfiprintf_r+0x24c>)
 8013b84:	f7ec fb54 	bl	8000230 <memchr>
 8013b88:	9a04      	ldr	r2, [sp, #16]
 8013b8a:	b9d8      	cbnz	r0, 8013bc4 <_vfiprintf_r+0x12c>
 8013b8c:	06d1      	lsls	r1, r2, #27
 8013b8e:	bf44      	itt	mi
 8013b90:	2320      	movmi	r3, #32
 8013b92:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8013b96:	0713      	lsls	r3, r2, #28
 8013b98:	bf44      	itt	mi
 8013b9a:	232b      	movmi	r3, #43	; 0x2b
 8013b9c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8013ba0:	f89a 3000 	ldrb.w	r3, [sl]
 8013ba4:	2b2a      	cmp	r3, #42	; 0x2a
 8013ba6:	d015      	beq.n	8013bd4 <_vfiprintf_r+0x13c>
 8013ba8:	9a07      	ldr	r2, [sp, #28]
 8013baa:	4654      	mov	r4, sl
 8013bac:	2000      	movs	r0, #0
 8013bae:	f04f 0c0a 	mov.w	ip, #10
 8013bb2:	4621      	mov	r1, r4
 8013bb4:	f811 3b01 	ldrb.w	r3, [r1], #1
 8013bb8:	3b30      	subs	r3, #48	; 0x30
 8013bba:	2b09      	cmp	r3, #9
 8013bbc:	d94e      	bls.n	8013c5c <_vfiprintf_r+0x1c4>
 8013bbe:	b1b0      	cbz	r0, 8013bee <_vfiprintf_r+0x156>
 8013bc0:	9207      	str	r2, [sp, #28]
 8013bc2:	e014      	b.n	8013bee <_vfiprintf_r+0x156>
 8013bc4:	eba0 0308 	sub.w	r3, r0, r8
 8013bc8:	fa09 f303 	lsl.w	r3, r9, r3
 8013bcc:	4313      	orrs	r3, r2
 8013bce:	9304      	str	r3, [sp, #16]
 8013bd0:	46a2      	mov	sl, r4
 8013bd2:	e7d2      	b.n	8013b7a <_vfiprintf_r+0xe2>
 8013bd4:	9b03      	ldr	r3, [sp, #12]
 8013bd6:	1d19      	adds	r1, r3, #4
 8013bd8:	681b      	ldr	r3, [r3, #0]
 8013bda:	9103      	str	r1, [sp, #12]
 8013bdc:	2b00      	cmp	r3, #0
 8013bde:	bfbb      	ittet	lt
 8013be0:	425b      	neglt	r3, r3
 8013be2:	f042 0202 	orrlt.w	r2, r2, #2
 8013be6:	9307      	strge	r3, [sp, #28]
 8013be8:	9307      	strlt	r3, [sp, #28]
 8013bea:	bfb8      	it	lt
 8013bec:	9204      	strlt	r2, [sp, #16]
 8013bee:	7823      	ldrb	r3, [r4, #0]
 8013bf0:	2b2e      	cmp	r3, #46	; 0x2e
 8013bf2:	d10c      	bne.n	8013c0e <_vfiprintf_r+0x176>
 8013bf4:	7863      	ldrb	r3, [r4, #1]
 8013bf6:	2b2a      	cmp	r3, #42	; 0x2a
 8013bf8:	d135      	bne.n	8013c66 <_vfiprintf_r+0x1ce>
 8013bfa:	9b03      	ldr	r3, [sp, #12]
 8013bfc:	1d1a      	adds	r2, r3, #4
 8013bfe:	681b      	ldr	r3, [r3, #0]
 8013c00:	9203      	str	r2, [sp, #12]
 8013c02:	2b00      	cmp	r3, #0
 8013c04:	bfb8      	it	lt
 8013c06:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8013c0a:	3402      	adds	r4, #2
 8013c0c:	9305      	str	r3, [sp, #20]
 8013c0e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8013cf4 <_vfiprintf_r+0x25c>
 8013c12:	7821      	ldrb	r1, [r4, #0]
 8013c14:	2203      	movs	r2, #3
 8013c16:	4650      	mov	r0, sl
 8013c18:	f7ec fb0a 	bl	8000230 <memchr>
 8013c1c:	b140      	cbz	r0, 8013c30 <_vfiprintf_r+0x198>
 8013c1e:	2340      	movs	r3, #64	; 0x40
 8013c20:	eba0 000a 	sub.w	r0, r0, sl
 8013c24:	fa03 f000 	lsl.w	r0, r3, r0
 8013c28:	9b04      	ldr	r3, [sp, #16]
 8013c2a:	4303      	orrs	r3, r0
 8013c2c:	3401      	adds	r4, #1
 8013c2e:	9304      	str	r3, [sp, #16]
 8013c30:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013c34:	482c      	ldr	r0, [pc, #176]	; (8013ce8 <_vfiprintf_r+0x250>)
 8013c36:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8013c3a:	2206      	movs	r2, #6
 8013c3c:	f7ec faf8 	bl	8000230 <memchr>
 8013c40:	2800      	cmp	r0, #0
 8013c42:	d03f      	beq.n	8013cc4 <_vfiprintf_r+0x22c>
 8013c44:	4b29      	ldr	r3, [pc, #164]	; (8013cec <_vfiprintf_r+0x254>)
 8013c46:	bb1b      	cbnz	r3, 8013c90 <_vfiprintf_r+0x1f8>
 8013c48:	9b03      	ldr	r3, [sp, #12]
 8013c4a:	3307      	adds	r3, #7
 8013c4c:	f023 0307 	bic.w	r3, r3, #7
 8013c50:	3308      	adds	r3, #8
 8013c52:	9303      	str	r3, [sp, #12]
 8013c54:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013c56:	443b      	add	r3, r7
 8013c58:	9309      	str	r3, [sp, #36]	; 0x24
 8013c5a:	e767      	b.n	8013b2c <_vfiprintf_r+0x94>
 8013c5c:	fb0c 3202 	mla	r2, ip, r2, r3
 8013c60:	460c      	mov	r4, r1
 8013c62:	2001      	movs	r0, #1
 8013c64:	e7a5      	b.n	8013bb2 <_vfiprintf_r+0x11a>
 8013c66:	2300      	movs	r3, #0
 8013c68:	3401      	adds	r4, #1
 8013c6a:	9305      	str	r3, [sp, #20]
 8013c6c:	4619      	mov	r1, r3
 8013c6e:	f04f 0c0a 	mov.w	ip, #10
 8013c72:	4620      	mov	r0, r4
 8013c74:	f810 2b01 	ldrb.w	r2, [r0], #1
 8013c78:	3a30      	subs	r2, #48	; 0x30
 8013c7a:	2a09      	cmp	r2, #9
 8013c7c:	d903      	bls.n	8013c86 <_vfiprintf_r+0x1ee>
 8013c7e:	2b00      	cmp	r3, #0
 8013c80:	d0c5      	beq.n	8013c0e <_vfiprintf_r+0x176>
 8013c82:	9105      	str	r1, [sp, #20]
 8013c84:	e7c3      	b.n	8013c0e <_vfiprintf_r+0x176>
 8013c86:	fb0c 2101 	mla	r1, ip, r1, r2
 8013c8a:	4604      	mov	r4, r0
 8013c8c:	2301      	movs	r3, #1
 8013c8e:	e7f0      	b.n	8013c72 <_vfiprintf_r+0x1da>
 8013c90:	ab03      	add	r3, sp, #12
 8013c92:	9300      	str	r3, [sp, #0]
 8013c94:	462a      	mov	r2, r5
 8013c96:	4b16      	ldr	r3, [pc, #88]	; (8013cf0 <_vfiprintf_r+0x258>)
 8013c98:	a904      	add	r1, sp, #16
 8013c9a:	4630      	mov	r0, r6
 8013c9c:	f7fd fde6 	bl	801186c <_printf_float>
 8013ca0:	4607      	mov	r7, r0
 8013ca2:	1c78      	adds	r0, r7, #1
 8013ca4:	d1d6      	bne.n	8013c54 <_vfiprintf_r+0x1bc>
 8013ca6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8013ca8:	07d9      	lsls	r1, r3, #31
 8013caa:	d405      	bmi.n	8013cb8 <_vfiprintf_r+0x220>
 8013cac:	89ab      	ldrh	r3, [r5, #12]
 8013cae:	059a      	lsls	r2, r3, #22
 8013cb0:	d402      	bmi.n	8013cb8 <_vfiprintf_r+0x220>
 8013cb2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8013cb4:	f000 faaf 	bl	8014216 <__retarget_lock_release_recursive>
 8013cb8:	89ab      	ldrh	r3, [r5, #12]
 8013cba:	065b      	lsls	r3, r3, #25
 8013cbc:	f53f af12 	bmi.w	8013ae4 <_vfiprintf_r+0x4c>
 8013cc0:	9809      	ldr	r0, [sp, #36]	; 0x24
 8013cc2:	e711      	b.n	8013ae8 <_vfiprintf_r+0x50>
 8013cc4:	ab03      	add	r3, sp, #12
 8013cc6:	9300      	str	r3, [sp, #0]
 8013cc8:	462a      	mov	r2, r5
 8013cca:	4b09      	ldr	r3, [pc, #36]	; (8013cf0 <_vfiprintf_r+0x258>)
 8013ccc:	a904      	add	r1, sp, #16
 8013cce:	4630      	mov	r0, r6
 8013cd0:	f7fe f870 	bl	8011db4 <_printf_i>
 8013cd4:	e7e4      	b.n	8013ca0 <_vfiprintf_r+0x208>
 8013cd6:	bf00      	nop
 8013cd8:	0801aff4 	.word	0x0801aff4
 8013cdc:	0801b014 	.word	0x0801b014
 8013ce0:	0801afd4 	.word	0x0801afd4
 8013ce4:	0801ae7c 	.word	0x0801ae7c
 8013ce8:	0801ae86 	.word	0x0801ae86
 8013cec:	0801186d 	.word	0x0801186d
 8013cf0:	08013a75 	.word	0x08013a75
 8013cf4:	0801ae82 	.word	0x0801ae82

08013cf8 <__swbuf_r>:
 8013cf8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013cfa:	460e      	mov	r6, r1
 8013cfc:	4614      	mov	r4, r2
 8013cfe:	4605      	mov	r5, r0
 8013d00:	b118      	cbz	r0, 8013d0a <__swbuf_r+0x12>
 8013d02:	6983      	ldr	r3, [r0, #24]
 8013d04:	b90b      	cbnz	r3, 8013d0a <__swbuf_r+0x12>
 8013d06:	f000 f9e7 	bl	80140d8 <__sinit>
 8013d0a:	4b21      	ldr	r3, [pc, #132]	; (8013d90 <__swbuf_r+0x98>)
 8013d0c:	429c      	cmp	r4, r3
 8013d0e:	d12b      	bne.n	8013d68 <__swbuf_r+0x70>
 8013d10:	686c      	ldr	r4, [r5, #4]
 8013d12:	69a3      	ldr	r3, [r4, #24]
 8013d14:	60a3      	str	r3, [r4, #8]
 8013d16:	89a3      	ldrh	r3, [r4, #12]
 8013d18:	071a      	lsls	r2, r3, #28
 8013d1a:	d52f      	bpl.n	8013d7c <__swbuf_r+0x84>
 8013d1c:	6923      	ldr	r3, [r4, #16]
 8013d1e:	b36b      	cbz	r3, 8013d7c <__swbuf_r+0x84>
 8013d20:	6923      	ldr	r3, [r4, #16]
 8013d22:	6820      	ldr	r0, [r4, #0]
 8013d24:	1ac0      	subs	r0, r0, r3
 8013d26:	6963      	ldr	r3, [r4, #20]
 8013d28:	b2f6      	uxtb	r6, r6
 8013d2a:	4283      	cmp	r3, r0
 8013d2c:	4637      	mov	r7, r6
 8013d2e:	dc04      	bgt.n	8013d3a <__swbuf_r+0x42>
 8013d30:	4621      	mov	r1, r4
 8013d32:	4628      	mov	r0, r5
 8013d34:	f000 f93c 	bl	8013fb0 <_fflush_r>
 8013d38:	bb30      	cbnz	r0, 8013d88 <__swbuf_r+0x90>
 8013d3a:	68a3      	ldr	r3, [r4, #8]
 8013d3c:	3b01      	subs	r3, #1
 8013d3e:	60a3      	str	r3, [r4, #8]
 8013d40:	6823      	ldr	r3, [r4, #0]
 8013d42:	1c5a      	adds	r2, r3, #1
 8013d44:	6022      	str	r2, [r4, #0]
 8013d46:	701e      	strb	r6, [r3, #0]
 8013d48:	6963      	ldr	r3, [r4, #20]
 8013d4a:	3001      	adds	r0, #1
 8013d4c:	4283      	cmp	r3, r0
 8013d4e:	d004      	beq.n	8013d5a <__swbuf_r+0x62>
 8013d50:	89a3      	ldrh	r3, [r4, #12]
 8013d52:	07db      	lsls	r3, r3, #31
 8013d54:	d506      	bpl.n	8013d64 <__swbuf_r+0x6c>
 8013d56:	2e0a      	cmp	r6, #10
 8013d58:	d104      	bne.n	8013d64 <__swbuf_r+0x6c>
 8013d5a:	4621      	mov	r1, r4
 8013d5c:	4628      	mov	r0, r5
 8013d5e:	f000 f927 	bl	8013fb0 <_fflush_r>
 8013d62:	b988      	cbnz	r0, 8013d88 <__swbuf_r+0x90>
 8013d64:	4638      	mov	r0, r7
 8013d66:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013d68:	4b0a      	ldr	r3, [pc, #40]	; (8013d94 <__swbuf_r+0x9c>)
 8013d6a:	429c      	cmp	r4, r3
 8013d6c:	d101      	bne.n	8013d72 <__swbuf_r+0x7a>
 8013d6e:	68ac      	ldr	r4, [r5, #8]
 8013d70:	e7cf      	b.n	8013d12 <__swbuf_r+0x1a>
 8013d72:	4b09      	ldr	r3, [pc, #36]	; (8013d98 <__swbuf_r+0xa0>)
 8013d74:	429c      	cmp	r4, r3
 8013d76:	bf08      	it	eq
 8013d78:	68ec      	ldreq	r4, [r5, #12]
 8013d7a:	e7ca      	b.n	8013d12 <__swbuf_r+0x1a>
 8013d7c:	4621      	mov	r1, r4
 8013d7e:	4628      	mov	r0, r5
 8013d80:	f000 f81a 	bl	8013db8 <__swsetup_r>
 8013d84:	2800      	cmp	r0, #0
 8013d86:	d0cb      	beq.n	8013d20 <__swbuf_r+0x28>
 8013d88:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8013d8c:	e7ea      	b.n	8013d64 <__swbuf_r+0x6c>
 8013d8e:	bf00      	nop
 8013d90:	0801aff4 	.word	0x0801aff4
 8013d94:	0801b014 	.word	0x0801b014
 8013d98:	0801afd4 	.word	0x0801afd4

08013d9c <__ascii_wctomb>:
 8013d9c:	b149      	cbz	r1, 8013db2 <__ascii_wctomb+0x16>
 8013d9e:	2aff      	cmp	r2, #255	; 0xff
 8013da0:	bf85      	ittet	hi
 8013da2:	238a      	movhi	r3, #138	; 0x8a
 8013da4:	6003      	strhi	r3, [r0, #0]
 8013da6:	700a      	strbls	r2, [r1, #0]
 8013da8:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 8013dac:	bf98      	it	ls
 8013dae:	2001      	movls	r0, #1
 8013db0:	4770      	bx	lr
 8013db2:	4608      	mov	r0, r1
 8013db4:	4770      	bx	lr
	...

08013db8 <__swsetup_r>:
 8013db8:	4b32      	ldr	r3, [pc, #200]	; (8013e84 <__swsetup_r+0xcc>)
 8013dba:	b570      	push	{r4, r5, r6, lr}
 8013dbc:	681d      	ldr	r5, [r3, #0]
 8013dbe:	4606      	mov	r6, r0
 8013dc0:	460c      	mov	r4, r1
 8013dc2:	b125      	cbz	r5, 8013dce <__swsetup_r+0x16>
 8013dc4:	69ab      	ldr	r3, [r5, #24]
 8013dc6:	b913      	cbnz	r3, 8013dce <__swsetup_r+0x16>
 8013dc8:	4628      	mov	r0, r5
 8013dca:	f000 f985 	bl	80140d8 <__sinit>
 8013dce:	4b2e      	ldr	r3, [pc, #184]	; (8013e88 <__swsetup_r+0xd0>)
 8013dd0:	429c      	cmp	r4, r3
 8013dd2:	d10f      	bne.n	8013df4 <__swsetup_r+0x3c>
 8013dd4:	686c      	ldr	r4, [r5, #4]
 8013dd6:	89a3      	ldrh	r3, [r4, #12]
 8013dd8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8013ddc:	0719      	lsls	r1, r3, #28
 8013dde:	d42c      	bmi.n	8013e3a <__swsetup_r+0x82>
 8013de0:	06dd      	lsls	r5, r3, #27
 8013de2:	d411      	bmi.n	8013e08 <__swsetup_r+0x50>
 8013de4:	2309      	movs	r3, #9
 8013de6:	6033      	str	r3, [r6, #0]
 8013de8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8013dec:	81a3      	strh	r3, [r4, #12]
 8013dee:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8013df2:	e03e      	b.n	8013e72 <__swsetup_r+0xba>
 8013df4:	4b25      	ldr	r3, [pc, #148]	; (8013e8c <__swsetup_r+0xd4>)
 8013df6:	429c      	cmp	r4, r3
 8013df8:	d101      	bne.n	8013dfe <__swsetup_r+0x46>
 8013dfa:	68ac      	ldr	r4, [r5, #8]
 8013dfc:	e7eb      	b.n	8013dd6 <__swsetup_r+0x1e>
 8013dfe:	4b24      	ldr	r3, [pc, #144]	; (8013e90 <__swsetup_r+0xd8>)
 8013e00:	429c      	cmp	r4, r3
 8013e02:	bf08      	it	eq
 8013e04:	68ec      	ldreq	r4, [r5, #12]
 8013e06:	e7e6      	b.n	8013dd6 <__swsetup_r+0x1e>
 8013e08:	0758      	lsls	r0, r3, #29
 8013e0a:	d512      	bpl.n	8013e32 <__swsetup_r+0x7a>
 8013e0c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8013e0e:	b141      	cbz	r1, 8013e22 <__swsetup_r+0x6a>
 8013e10:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8013e14:	4299      	cmp	r1, r3
 8013e16:	d002      	beq.n	8013e1e <__swsetup_r+0x66>
 8013e18:	4630      	mov	r0, r6
 8013e1a:	f7ff fb31 	bl	8013480 <_free_r>
 8013e1e:	2300      	movs	r3, #0
 8013e20:	6363      	str	r3, [r4, #52]	; 0x34
 8013e22:	89a3      	ldrh	r3, [r4, #12]
 8013e24:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8013e28:	81a3      	strh	r3, [r4, #12]
 8013e2a:	2300      	movs	r3, #0
 8013e2c:	6063      	str	r3, [r4, #4]
 8013e2e:	6923      	ldr	r3, [r4, #16]
 8013e30:	6023      	str	r3, [r4, #0]
 8013e32:	89a3      	ldrh	r3, [r4, #12]
 8013e34:	f043 0308 	orr.w	r3, r3, #8
 8013e38:	81a3      	strh	r3, [r4, #12]
 8013e3a:	6923      	ldr	r3, [r4, #16]
 8013e3c:	b94b      	cbnz	r3, 8013e52 <__swsetup_r+0x9a>
 8013e3e:	89a3      	ldrh	r3, [r4, #12]
 8013e40:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8013e44:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8013e48:	d003      	beq.n	8013e52 <__swsetup_r+0x9a>
 8013e4a:	4621      	mov	r1, r4
 8013e4c:	4630      	mov	r0, r6
 8013e4e:	f000 fa09 	bl	8014264 <__smakebuf_r>
 8013e52:	89a0      	ldrh	r0, [r4, #12]
 8013e54:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8013e58:	f010 0301 	ands.w	r3, r0, #1
 8013e5c:	d00a      	beq.n	8013e74 <__swsetup_r+0xbc>
 8013e5e:	2300      	movs	r3, #0
 8013e60:	60a3      	str	r3, [r4, #8]
 8013e62:	6963      	ldr	r3, [r4, #20]
 8013e64:	425b      	negs	r3, r3
 8013e66:	61a3      	str	r3, [r4, #24]
 8013e68:	6923      	ldr	r3, [r4, #16]
 8013e6a:	b943      	cbnz	r3, 8013e7e <__swsetup_r+0xc6>
 8013e6c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8013e70:	d1ba      	bne.n	8013de8 <__swsetup_r+0x30>
 8013e72:	bd70      	pop	{r4, r5, r6, pc}
 8013e74:	0781      	lsls	r1, r0, #30
 8013e76:	bf58      	it	pl
 8013e78:	6963      	ldrpl	r3, [r4, #20]
 8013e7a:	60a3      	str	r3, [r4, #8]
 8013e7c:	e7f4      	b.n	8013e68 <__swsetup_r+0xb0>
 8013e7e:	2000      	movs	r0, #0
 8013e80:	e7f7      	b.n	8013e72 <__swsetup_r+0xba>
 8013e82:	bf00      	nop
 8013e84:	200003b4 	.word	0x200003b4
 8013e88:	0801aff4 	.word	0x0801aff4
 8013e8c:	0801b014 	.word	0x0801b014
 8013e90:	0801afd4 	.word	0x0801afd4

08013e94 <abort>:
 8013e94:	b508      	push	{r3, lr}
 8013e96:	2006      	movs	r0, #6
 8013e98:	f000 fa54 	bl	8014344 <raise>
 8013e9c:	2001      	movs	r0, #1
 8013e9e:	f7f5 f873 	bl	8008f88 <_exit>
	...

08013ea4 <__sflush_r>:
 8013ea4:	898a      	ldrh	r2, [r1, #12]
 8013ea6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013eaa:	4605      	mov	r5, r0
 8013eac:	0710      	lsls	r0, r2, #28
 8013eae:	460c      	mov	r4, r1
 8013eb0:	d458      	bmi.n	8013f64 <__sflush_r+0xc0>
 8013eb2:	684b      	ldr	r3, [r1, #4]
 8013eb4:	2b00      	cmp	r3, #0
 8013eb6:	dc05      	bgt.n	8013ec4 <__sflush_r+0x20>
 8013eb8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8013eba:	2b00      	cmp	r3, #0
 8013ebc:	dc02      	bgt.n	8013ec4 <__sflush_r+0x20>
 8013ebe:	2000      	movs	r0, #0
 8013ec0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013ec4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8013ec6:	2e00      	cmp	r6, #0
 8013ec8:	d0f9      	beq.n	8013ebe <__sflush_r+0x1a>
 8013eca:	2300      	movs	r3, #0
 8013ecc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8013ed0:	682f      	ldr	r7, [r5, #0]
 8013ed2:	602b      	str	r3, [r5, #0]
 8013ed4:	d032      	beq.n	8013f3c <__sflush_r+0x98>
 8013ed6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8013ed8:	89a3      	ldrh	r3, [r4, #12]
 8013eda:	075a      	lsls	r2, r3, #29
 8013edc:	d505      	bpl.n	8013eea <__sflush_r+0x46>
 8013ede:	6863      	ldr	r3, [r4, #4]
 8013ee0:	1ac0      	subs	r0, r0, r3
 8013ee2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8013ee4:	b10b      	cbz	r3, 8013eea <__sflush_r+0x46>
 8013ee6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8013ee8:	1ac0      	subs	r0, r0, r3
 8013eea:	2300      	movs	r3, #0
 8013eec:	4602      	mov	r2, r0
 8013eee:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8013ef0:	6a21      	ldr	r1, [r4, #32]
 8013ef2:	4628      	mov	r0, r5
 8013ef4:	47b0      	blx	r6
 8013ef6:	1c43      	adds	r3, r0, #1
 8013ef8:	89a3      	ldrh	r3, [r4, #12]
 8013efa:	d106      	bne.n	8013f0a <__sflush_r+0x66>
 8013efc:	6829      	ldr	r1, [r5, #0]
 8013efe:	291d      	cmp	r1, #29
 8013f00:	d82c      	bhi.n	8013f5c <__sflush_r+0xb8>
 8013f02:	4a2a      	ldr	r2, [pc, #168]	; (8013fac <__sflush_r+0x108>)
 8013f04:	40ca      	lsrs	r2, r1
 8013f06:	07d6      	lsls	r6, r2, #31
 8013f08:	d528      	bpl.n	8013f5c <__sflush_r+0xb8>
 8013f0a:	2200      	movs	r2, #0
 8013f0c:	6062      	str	r2, [r4, #4]
 8013f0e:	04d9      	lsls	r1, r3, #19
 8013f10:	6922      	ldr	r2, [r4, #16]
 8013f12:	6022      	str	r2, [r4, #0]
 8013f14:	d504      	bpl.n	8013f20 <__sflush_r+0x7c>
 8013f16:	1c42      	adds	r2, r0, #1
 8013f18:	d101      	bne.n	8013f1e <__sflush_r+0x7a>
 8013f1a:	682b      	ldr	r3, [r5, #0]
 8013f1c:	b903      	cbnz	r3, 8013f20 <__sflush_r+0x7c>
 8013f1e:	6560      	str	r0, [r4, #84]	; 0x54
 8013f20:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8013f22:	602f      	str	r7, [r5, #0]
 8013f24:	2900      	cmp	r1, #0
 8013f26:	d0ca      	beq.n	8013ebe <__sflush_r+0x1a>
 8013f28:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8013f2c:	4299      	cmp	r1, r3
 8013f2e:	d002      	beq.n	8013f36 <__sflush_r+0x92>
 8013f30:	4628      	mov	r0, r5
 8013f32:	f7ff faa5 	bl	8013480 <_free_r>
 8013f36:	2000      	movs	r0, #0
 8013f38:	6360      	str	r0, [r4, #52]	; 0x34
 8013f3a:	e7c1      	b.n	8013ec0 <__sflush_r+0x1c>
 8013f3c:	6a21      	ldr	r1, [r4, #32]
 8013f3e:	2301      	movs	r3, #1
 8013f40:	4628      	mov	r0, r5
 8013f42:	47b0      	blx	r6
 8013f44:	1c41      	adds	r1, r0, #1
 8013f46:	d1c7      	bne.n	8013ed8 <__sflush_r+0x34>
 8013f48:	682b      	ldr	r3, [r5, #0]
 8013f4a:	2b00      	cmp	r3, #0
 8013f4c:	d0c4      	beq.n	8013ed8 <__sflush_r+0x34>
 8013f4e:	2b1d      	cmp	r3, #29
 8013f50:	d001      	beq.n	8013f56 <__sflush_r+0xb2>
 8013f52:	2b16      	cmp	r3, #22
 8013f54:	d101      	bne.n	8013f5a <__sflush_r+0xb6>
 8013f56:	602f      	str	r7, [r5, #0]
 8013f58:	e7b1      	b.n	8013ebe <__sflush_r+0x1a>
 8013f5a:	89a3      	ldrh	r3, [r4, #12]
 8013f5c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013f60:	81a3      	strh	r3, [r4, #12]
 8013f62:	e7ad      	b.n	8013ec0 <__sflush_r+0x1c>
 8013f64:	690f      	ldr	r7, [r1, #16]
 8013f66:	2f00      	cmp	r7, #0
 8013f68:	d0a9      	beq.n	8013ebe <__sflush_r+0x1a>
 8013f6a:	0793      	lsls	r3, r2, #30
 8013f6c:	680e      	ldr	r6, [r1, #0]
 8013f6e:	bf08      	it	eq
 8013f70:	694b      	ldreq	r3, [r1, #20]
 8013f72:	600f      	str	r7, [r1, #0]
 8013f74:	bf18      	it	ne
 8013f76:	2300      	movne	r3, #0
 8013f78:	eba6 0807 	sub.w	r8, r6, r7
 8013f7c:	608b      	str	r3, [r1, #8]
 8013f7e:	f1b8 0f00 	cmp.w	r8, #0
 8013f82:	dd9c      	ble.n	8013ebe <__sflush_r+0x1a>
 8013f84:	6a21      	ldr	r1, [r4, #32]
 8013f86:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8013f88:	4643      	mov	r3, r8
 8013f8a:	463a      	mov	r2, r7
 8013f8c:	4628      	mov	r0, r5
 8013f8e:	47b0      	blx	r6
 8013f90:	2800      	cmp	r0, #0
 8013f92:	dc06      	bgt.n	8013fa2 <__sflush_r+0xfe>
 8013f94:	89a3      	ldrh	r3, [r4, #12]
 8013f96:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013f9a:	81a3      	strh	r3, [r4, #12]
 8013f9c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8013fa0:	e78e      	b.n	8013ec0 <__sflush_r+0x1c>
 8013fa2:	4407      	add	r7, r0
 8013fa4:	eba8 0800 	sub.w	r8, r8, r0
 8013fa8:	e7e9      	b.n	8013f7e <__sflush_r+0xda>
 8013faa:	bf00      	nop
 8013fac:	20400001 	.word	0x20400001

08013fb0 <_fflush_r>:
 8013fb0:	b538      	push	{r3, r4, r5, lr}
 8013fb2:	690b      	ldr	r3, [r1, #16]
 8013fb4:	4605      	mov	r5, r0
 8013fb6:	460c      	mov	r4, r1
 8013fb8:	b913      	cbnz	r3, 8013fc0 <_fflush_r+0x10>
 8013fba:	2500      	movs	r5, #0
 8013fbc:	4628      	mov	r0, r5
 8013fbe:	bd38      	pop	{r3, r4, r5, pc}
 8013fc0:	b118      	cbz	r0, 8013fca <_fflush_r+0x1a>
 8013fc2:	6983      	ldr	r3, [r0, #24]
 8013fc4:	b90b      	cbnz	r3, 8013fca <_fflush_r+0x1a>
 8013fc6:	f000 f887 	bl	80140d8 <__sinit>
 8013fca:	4b14      	ldr	r3, [pc, #80]	; (801401c <_fflush_r+0x6c>)
 8013fcc:	429c      	cmp	r4, r3
 8013fce:	d11b      	bne.n	8014008 <_fflush_r+0x58>
 8013fd0:	686c      	ldr	r4, [r5, #4]
 8013fd2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013fd6:	2b00      	cmp	r3, #0
 8013fd8:	d0ef      	beq.n	8013fba <_fflush_r+0xa>
 8013fda:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8013fdc:	07d0      	lsls	r0, r2, #31
 8013fde:	d404      	bmi.n	8013fea <_fflush_r+0x3a>
 8013fe0:	0599      	lsls	r1, r3, #22
 8013fe2:	d402      	bmi.n	8013fea <_fflush_r+0x3a>
 8013fe4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8013fe6:	f000 f915 	bl	8014214 <__retarget_lock_acquire_recursive>
 8013fea:	4628      	mov	r0, r5
 8013fec:	4621      	mov	r1, r4
 8013fee:	f7ff ff59 	bl	8013ea4 <__sflush_r>
 8013ff2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8013ff4:	07da      	lsls	r2, r3, #31
 8013ff6:	4605      	mov	r5, r0
 8013ff8:	d4e0      	bmi.n	8013fbc <_fflush_r+0xc>
 8013ffa:	89a3      	ldrh	r3, [r4, #12]
 8013ffc:	059b      	lsls	r3, r3, #22
 8013ffe:	d4dd      	bmi.n	8013fbc <_fflush_r+0xc>
 8014000:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8014002:	f000 f908 	bl	8014216 <__retarget_lock_release_recursive>
 8014006:	e7d9      	b.n	8013fbc <_fflush_r+0xc>
 8014008:	4b05      	ldr	r3, [pc, #20]	; (8014020 <_fflush_r+0x70>)
 801400a:	429c      	cmp	r4, r3
 801400c:	d101      	bne.n	8014012 <_fflush_r+0x62>
 801400e:	68ac      	ldr	r4, [r5, #8]
 8014010:	e7df      	b.n	8013fd2 <_fflush_r+0x22>
 8014012:	4b04      	ldr	r3, [pc, #16]	; (8014024 <_fflush_r+0x74>)
 8014014:	429c      	cmp	r4, r3
 8014016:	bf08      	it	eq
 8014018:	68ec      	ldreq	r4, [r5, #12]
 801401a:	e7da      	b.n	8013fd2 <_fflush_r+0x22>
 801401c:	0801aff4 	.word	0x0801aff4
 8014020:	0801b014 	.word	0x0801b014
 8014024:	0801afd4 	.word	0x0801afd4

08014028 <std>:
 8014028:	2300      	movs	r3, #0
 801402a:	b510      	push	{r4, lr}
 801402c:	4604      	mov	r4, r0
 801402e:	e9c0 3300 	strd	r3, r3, [r0]
 8014032:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8014036:	6083      	str	r3, [r0, #8]
 8014038:	8181      	strh	r1, [r0, #12]
 801403a:	6643      	str	r3, [r0, #100]	; 0x64
 801403c:	81c2      	strh	r2, [r0, #14]
 801403e:	6183      	str	r3, [r0, #24]
 8014040:	4619      	mov	r1, r3
 8014042:	2208      	movs	r2, #8
 8014044:	305c      	adds	r0, #92	; 0x5c
 8014046:	f7fd fb69 	bl	801171c <memset>
 801404a:	4b05      	ldr	r3, [pc, #20]	; (8014060 <std+0x38>)
 801404c:	6263      	str	r3, [r4, #36]	; 0x24
 801404e:	4b05      	ldr	r3, [pc, #20]	; (8014064 <std+0x3c>)
 8014050:	62a3      	str	r3, [r4, #40]	; 0x28
 8014052:	4b05      	ldr	r3, [pc, #20]	; (8014068 <std+0x40>)
 8014054:	62e3      	str	r3, [r4, #44]	; 0x2c
 8014056:	4b05      	ldr	r3, [pc, #20]	; (801406c <std+0x44>)
 8014058:	6224      	str	r4, [r4, #32]
 801405a:	6323      	str	r3, [r4, #48]	; 0x30
 801405c:	bd10      	pop	{r4, pc}
 801405e:	bf00      	nop
 8014060:	0801437d 	.word	0x0801437d
 8014064:	0801439f 	.word	0x0801439f
 8014068:	080143d7 	.word	0x080143d7
 801406c:	080143fb 	.word	0x080143fb

08014070 <_cleanup_r>:
 8014070:	4901      	ldr	r1, [pc, #4]	; (8014078 <_cleanup_r+0x8>)
 8014072:	f000 b8af 	b.w	80141d4 <_fwalk_reent>
 8014076:	bf00      	nop
 8014078:	08013fb1 	.word	0x08013fb1

0801407c <__sfmoreglue>:
 801407c:	b570      	push	{r4, r5, r6, lr}
 801407e:	2268      	movs	r2, #104	; 0x68
 8014080:	1e4d      	subs	r5, r1, #1
 8014082:	4355      	muls	r5, r2
 8014084:	460e      	mov	r6, r1
 8014086:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801408a:	f7ff fa65 	bl	8013558 <_malloc_r>
 801408e:	4604      	mov	r4, r0
 8014090:	b140      	cbz	r0, 80140a4 <__sfmoreglue+0x28>
 8014092:	2100      	movs	r1, #0
 8014094:	e9c0 1600 	strd	r1, r6, [r0]
 8014098:	300c      	adds	r0, #12
 801409a:	60a0      	str	r0, [r4, #8]
 801409c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80140a0:	f7fd fb3c 	bl	801171c <memset>
 80140a4:	4620      	mov	r0, r4
 80140a6:	bd70      	pop	{r4, r5, r6, pc}

080140a8 <__sfp_lock_acquire>:
 80140a8:	4801      	ldr	r0, [pc, #4]	; (80140b0 <__sfp_lock_acquire+0x8>)
 80140aa:	f000 b8b3 	b.w	8014214 <__retarget_lock_acquire_recursive>
 80140ae:	bf00      	nop
 80140b0:	20002811 	.word	0x20002811

080140b4 <__sfp_lock_release>:
 80140b4:	4801      	ldr	r0, [pc, #4]	; (80140bc <__sfp_lock_release+0x8>)
 80140b6:	f000 b8ae 	b.w	8014216 <__retarget_lock_release_recursive>
 80140ba:	bf00      	nop
 80140bc:	20002811 	.word	0x20002811

080140c0 <__sinit_lock_acquire>:
 80140c0:	4801      	ldr	r0, [pc, #4]	; (80140c8 <__sinit_lock_acquire+0x8>)
 80140c2:	f000 b8a7 	b.w	8014214 <__retarget_lock_acquire_recursive>
 80140c6:	bf00      	nop
 80140c8:	20002812 	.word	0x20002812

080140cc <__sinit_lock_release>:
 80140cc:	4801      	ldr	r0, [pc, #4]	; (80140d4 <__sinit_lock_release+0x8>)
 80140ce:	f000 b8a2 	b.w	8014216 <__retarget_lock_release_recursive>
 80140d2:	bf00      	nop
 80140d4:	20002812 	.word	0x20002812

080140d8 <__sinit>:
 80140d8:	b510      	push	{r4, lr}
 80140da:	4604      	mov	r4, r0
 80140dc:	f7ff fff0 	bl	80140c0 <__sinit_lock_acquire>
 80140e0:	69a3      	ldr	r3, [r4, #24]
 80140e2:	b11b      	cbz	r3, 80140ec <__sinit+0x14>
 80140e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80140e8:	f7ff bff0 	b.w	80140cc <__sinit_lock_release>
 80140ec:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80140f0:	6523      	str	r3, [r4, #80]	; 0x50
 80140f2:	4b13      	ldr	r3, [pc, #76]	; (8014140 <__sinit+0x68>)
 80140f4:	4a13      	ldr	r2, [pc, #76]	; (8014144 <__sinit+0x6c>)
 80140f6:	681b      	ldr	r3, [r3, #0]
 80140f8:	62a2      	str	r2, [r4, #40]	; 0x28
 80140fa:	42a3      	cmp	r3, r4
 80140fc:	bf04      	itt	eq
 80140fe:	2301      	moveq	r3, #1
 8014100:	61a3      	streq	r3, [r4, #24]
 8014102:	4620      	mov	r0, r4
 8014104:	f000 f820 	bl	8014148 <__sfp>
 8014108:	6060      	str	r0, [r4, #4]
 801410a:	4620      	mov	r0, r4
 801410c:	f000 f81c 	bl	8014148 <__sfp>
 8014110:	60a0      	str	r0, [r4, #8]
 8014112:	4620      	mov	r0, r4
 8014114:	f000 f818 	bl	8014148 <__sfp>
 8014118:	2200      	movs	r2, #0
 801411a:	60e0      	str	r0, [r4, #12]
 801411c:	2104      	movs	r1, #4
 801411e:	6860      	ldr	r0, [r4, #4]
 8014120:	f7ff ff82 	bl	8014028 <std>
 8014124:	68a0      	ldr	r0, [r4, #8]
 8014126:	2201      	movs	r2, #1
 8014128:	2109      	movs	r1, #9
 801412a:	f7ff ff7d 	bl	8014028 <std>
 801412e:	68e0      	ldr	r0, [r4, #12]
 8014130:	2202      	movs	r2, #2
 8014132:	2112      	movs	r1, #18
 8014134:	f7ff ff78 	bl	8014028 <std>
 8014138:	2301      	movs	r3, #1
 801413a:	61a3      	str	r3, [r4, #24]
 801413c:	e7d2      	b.n	80140e4 <__sinit+0xc>
 801413e:	bf00      	nop
 8014140:	0801ac58 	.word	0x0801ac58
 8014144:	08014071 	.word	0x08014071

08014148 <__sfp>:
 8014148:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801414a:	4607      	mov	r7, r0
 801414c:	f7ff ffac 	bl	80140a8 <__sfp_lock_acquire>
 8014150:	4b1e      	ldr	r3, [pc, #120]	; (80141cc <__sfp+0x84>)
 8014152:	681e      	ldr	r6, [r3, #0]
 8014154:	69b3      	ldr	r3, [r6, #24]
 8014156:	b913      	cbnz	r3, 801415e <__sfp+0x16>
 8014158:	4630      	mov	r0, r6
 801415a:	f7ff ffbd 	bl	80140d8 <__sinit>
 801415e:	3648      	adds	r6, #72	; 0x48
 8014160:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8014164:	3b01      	subs	r3, #1
 8014166:	d503      	bpl.n	8014170 <__sfp+0x28>
 8014168:	6833      	ldr	r3, [r6, #0]
 801416a:	b30b      	cbz	r3, 80141b0 <__sfp+0x68>
 801416c:	6836      	ldr	r6, [r6, #0]
 801416e:	e7f7      	b.n	8014160 <__sfp+0x18>
 8014170:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8014174:	b9d5      	cbnz	r5, 80141ac <__sfp+0x64>
 8014176:	4b16      	ldr	r3, [pc, #88]	; (80141d0 <__sfp+0x88>)
 8014178:	60e3      	str	r3, [r4, #12]
 801417a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801417e:	6665      	str	r5, [r4, #100]	; 0x64
 8014180:	f000 f847 	bl	8014212 <__retarget_lock_init_recursive>
 8014184:	f7ff ff96 	bl	80140b4 <__sfp_lock_release>
 8014188:	e9c4 5501 	strd	r5, r5, [r4, #4]
 801418c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8014190:	6025      	str	r5, [r4, #0]
 8014192:	61a5      	str	r5, [r4, #24]
 8014194:	2208      	movs	r2, #8
 8014196:	4629      	mov	r1, r5
 8014198:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 801419c:	f7fd fabe 	bl	801171c <memset>
 80141a0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80141a4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80141a8:	4620      	mov	r0, r4
 80141aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80141ac:	3468      	adds	r4, #104	; 0x68
 80141ae:	e7d9      	b.n	8014164 <__sfp+0x1c>
 80141b0:	2104      	movs	r1, #4
 80141b2:	4638      	mov	r0, r7
 80141b4:	f7ff ff62 	bl	801407c <__sfmoreglue>
 80141b8:	4604      	mov	r4, r0
 80141ba:	6030      	str	r0, [r6, #0]
 80141bc:	2800      	cmp	r0, #0
 80141be:	d1d5      	bne.n	801416c <__sfp+0x24>
 80141c0:	f7ff ff78 	bl	80140b4 <__sfp_lock_release>
 80141c4:	230c      	movs	r3, #12
 80141c6:	603b      	str	r3, [r7, #0]
 80141c8:	e7ee      	b.n	80141a8 <__sfp+0x60>
 80141ca:	bf00      	nop
 80141cc:	0801ac58 	.word	0x0801ac58
 80141d0:	ffff0001 	.word	0xffff0001

080141d4 <_fwalk_reent>:
 80141d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80141d8:	4606      	mov	r6, r0
 80141da:	4688      	mov	r8, r1
 80141dc:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80141e0:	2700      	movs	r7, #0
 80141e2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80141e6:	f1b9 0901 	subs.w	r9, r9, #1
 80141ea:	d505      	bpl.n	80141f8 <_fwalk_reent+0x24>
 80141ec:	6824      	ldr	r4, [r4, #0]
 80141ee:	2c00      	cmp	r4, #0
 80141f0:	d1f7      	bne.n	80141e2 <_fwalk_reent+0xe>
 80141f2:	4638      	mov	r0, r7
 80141f4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80141f8:	89ab      	ldrh	r3, [r5, #12]
 80141fa:	2b01      	cmp	r3, #1
 80141fc:	d907      	bls.n	801420e <_fwalk_reent+0x3a>
 80141fe:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8014202:	3301      	adds	r3, #1
 8014204:	d003      	beq.n	801420e <_fwalk_reent+0x3a>
 8014206:	4629      	mov	r1, r5
 8014208:	4630      	mov	r0, r6
 801420a:	47c0      	blx	r8
 801420c:	4307      	orrs	r7, r0
 801420e:	3568      	adds	r5, #104	; 0x68
 8014210:	e7e9      	b.n	80141e6 <_fwalk_reent+0x12>

08014212 <__retarget_lock_init_recursive>:
 8014212:	4770      	bx	lr

08014214 <__retarget_lock_acquire_recursive>:
 8014214:	4770      	bx	lr

08014216 <__retarget_lock_release_recursive>:
 8014216:	4770      	bx	lr

08014218 <__swhatbuf_r>:
 8014218:	b570      	push	{r4, r5, r6, lr}
 801421a:	460e      	mov	r6, r1
 801421c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014220:	2900      	cmp	r1, #0
 8014222:	b096      	sub	sp, #88	; 0x58
 8014224:	4614      	mov	r4, r2
 8014226:	461d      	mov	r5, r3
 8014228:	da08      	bge.n	801423c <__swhatbuf_r+0x24>
 801422a:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 801422e:	2200      	movs	r2, #0
 8014230:	602a      	str	r2, [r5, #0]
 8014232:	061a      	lsls	r2, r3, #24
 8014234:	d410      	bmi.n	8014258 <__swhatbuf_r+0x40>
 8014236:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801423a:	e00e      	b.n	801425a <__swhatbuf_r+0x42>
 801423c:	466a      	mov	r2, sp
 801423e:	f000 f903 	bl	8014448 <_fstat_r>
 8014242:	2800      	cmp	r0, #0
 8014244:	dbf1      	blt.n	801422a <__swhatbuf_r+0x12>
 8014246:	9a01      	ldr	r2, [sp, #4]
 8014248:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 801424c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8014250:	425a      	negs	r2, r3
 8014252:	415a      	adcs	r2, r3
 8014254:	602a      	str	r2, [r5, #0]
 8014256:	e7ee      	b.n	8014236 <__swhatbuf_r+0x1e>
 8014258:	2340      	movs	r3, #64	; 0x40
 801425a:	2000      	movs	r0, #0
 801425c:	6023      	str	r3, [r4, #0]
 801425e:	b016      	add	sp, #88	; 0x58
 8014260:	bd70      	pop	{r4, r5, r6, pc}
	...

08014264 <__smakebuf_r>:
 8014264:	898b      	ldrh	r3, [r1, #12]
 8014266:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8014268:	079d      	lsls	r5, r3, #30
 801426a:	4606      	mov	r6, r0
 801426c:	460c      	mov	r4, r1
 801426e:	d507      	bpl.n	8014280 <__smakebuf_r+0x1c>
 8014270:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8014274:	6023      	str	r3, [r4, #0]
 8014276:	6123      	str	r3, [r4, #16]
 8014278:	2301      	movs	r3, #1
 801427a:	6163      	str	r3, [r4, #20]
 801427c:	b002      	add	sp, #8
 801427e:	bd70      	pop	{r4, r5, r6, pc}
 8014280:	ab01      	add	r3, sp, #4
 8014282:	466a      	mov	r2, sp
 8014284:	f7ff ffc8 	bl	8014218 <__swhatbuf_r>
 8014288:	9900      	ldr	r1, [sp, #0]
 801428a:	4605      	mov	r5, r0
 801428c:	4630      	mov	r0, r6
 801428e:	f7ff f963 	bl	8013558 <_malloc_r>
 8014292:	b948      	cbnz	r0, 80142a8 <__smakebuf_r+0x44>
 8014294:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014298:	059a      	lsls	r2, r3, #22
 801429a:	d4ef      	bmi.n	801427c <__smakebuf_r+0x18>
 801429c:	f023 0303 	bic.w	r3, r3, #3
 80142a0:	f043 0302 	orr.w	r3, r3, #2
 80142a4:	81a3      	strh	r3, [r4, #12]
 80142a6:	e7e3      	b.n	8014270 <__smakebuf_r+0xc>
 80142a8:	4b0d      	ldr	r3, [pc, #52]	; (80142e0 <__smakebuf_r+0x7c>)
 80142aa:	62b3      	str	r3, [r6, #40]	; 0x28
 80142ac:	89a3      	ldrh	r3, [r4, #12]
 80142ae:	6020      	str	r0, [r4, #0]
 80142b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80142b4:	81a3      	strh	r3, [r4, #12]
 80142b6:	9b00      	ldr	r3, [sp, #0]
 80142b8:	6163      	str	r3, [r4, #20]
 80142ba:	9b01      	ldr	r3, [sp, #4]
 80142bc:	6120      	str	r0, [r4, #16]
 80142be:	b15b      	cbz	r3, 80142d8 <__smakebuf_r+0x74>
 80142c0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80142c4:	4630      	mov	r0, r6
 80142c6:	f000 f8d1 	bl	801446c <_isatty_r>
 80142ca:	b128      	cbz	r0, 80142d8 <__smakebuf_r+0x74>
 80142cc:	89a3      	ldrh	r3, [r4, #12]
 80142ce:	f023 0303 	bic.w	r3, r3, #3
 80142d2:	f043 0301 	orr.w	r3, r3, #1
 80142d6:	81a3      	strh	r3, [r4, #12]
 80142d8:	89a0      	ldrh	r0, [r4, #12]
 80142da:	4305      	orrs	r5, r0
 80142dc:	81a5      	strh	r5, [r4, #12]
 80142de:	e7cd      	b.n	801427c <__smakebuf_r+0x18>
 80142e0:	08014071 	.word	0x08014071

080142e4 <_malloc_usable_size_r>:
 80142e4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80142e8:	1f18      	subs	r0, r3, #4
 80142ea:	2b00      	cmp	r3, #0
 80142ec:	bfbc      	itt	lt
 80142ee:	580b      	ldrlt	r3, [r1, r0]
 80142f0:	18c0      	addlt	r0, r0, r3
 80142f2:	4770      	bx	lr

080142f4 <_raise_r>:
 80142f4:	291f      	cmp	r1, #31
 80142f6:	b538      	push	{r3, r4, r5, lr}
 80142f8:	4604      	mov	r4, r0
 80142fa:	460d      	mov	r5, r1
 80142fc:	d904      	bls.n	8014308 <_raise_r+0x14>
 80142fe:	2316      	movs	r3, #22
 8014300:	6003      	str	r3, [r0, #0]
 8014302:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8014306:	bd38      	pop	{r3, r4, r5, pc}
 8014308:	6c42      	ldr	r2, [r0, #68]	; 0x44
 801430a:	b112      	cbz	r2, 8014312 <_raise_r+0x1e>
 801430c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8014310:	b94b      	cbnz	r3, 8014326 <_raise_r+0x32>
 8014312:	4620      	mov	r0, r4
 8014314:	f000 f830 	bl	8014378 <_getpid_r>
 8014318:	462a      	mov	r2, r5
 801431a:	4601      	mov	r1, r0
 801431c:	4620      	mov	r0, r4
 801431e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8014322:	f000 b817 	b.w	8014354 <_kill_r>
 8014326:	2b01      	cmp	r3, #1
 8014328:	d00a      	beq.n	8014340 <_raise_r+0x4c>
 801432a:	1c59      	adds	r1, r3, #1
 801432c:	d103      	bne.n	8014336 <_raise_r+0x42>
 801432e:	2316      	movs	r3, #22
 8014330:	6003      	str	r3, [r0, #0]
 8014332:	2001      	movs	r0, #1
 8014334:	e7e7      	b.n	8014306 <_raise_r+0x12>
 8014336:	2400      	movs	r4, #0
 8014338:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 801433c:	4628      	mov	r0, r5
 801433e:	4798      	blx	r3
 8014340:	2000      	movs	r0, #0
 8014342:	e7e0      	b.n	8014306 <_raise_r+0x12>

08014344 <raise>:
 8014344:	4b02      	ldr	r3, [pc, #8]	; (8014350 <raise+0xc>)
 8014346:	4601      	mov	r1, r0
 8014348:	6818      	ldr	r0, [r3, #0]
 801434a:	f7ff bfd3 	b.w	80142f4 <_raise_r>
 801434e:	bf00      	nop
 8014350:	200003b4 	.word	0x200003b4

08014354 <_kill_r>:
 8014354:	b538      	push	{r3, r4, r5, lr}
 8014356:	4d07      	ldr	r5, [pc, #28]	; (8014374 <_kill_r+0x20>)
 8014358:	2300      	movs	r3, #0
 801435a:	4604      	mov	r4, r0
 801435c:	4608      	mov	r0, r1
 801435e:	4611      	mov	r1, r2
 8014360:	602b      	str	r3, [r5, #0]
 8014362:	f7f4 fe01 	bl	8008f68 <_kill>
 8014366:	1c43      	adds	r3, r0, #1
 8014368:	d102      	bne.n	8014370 <_kill_r+0x1c>
 801436a:	682b      	ldr	r3, [r5, #0]
 801436c:	b103      	cbz	r3, 8014370 <_kill_r+0x1c>
 801436e:	6023      	str	r3, [r4, #0]
 8014370:	bd38      	pop	{r3, r4, r5, pc}
 8014372:	bf00      	nop
 8014374:	2000280c 	.word	0x2000280c

08014378 <_getpid_r>:
 8014378:	f7f4 bdee 	b.w	8008f58 <_getpid>

0801437c <__sread>:
 801437c:	b510      	push	{r4, lr}
 801437e:	460c      	mov	r4, r1
 8014380:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014384:	f000 f894 	bl	80144b0 <_read_r>
 8014388:	2800      	cmp	r0, #0
 801438a:	bfab      	itete	ge
 801438c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801438e:	89a3      	ldrhlt	r3, [r4, #12]
 8014390:	181b      	addge	r3, r3, r0
 8014392:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8014396:	bfac      	ite	ge
 8014398:	6563      	strge	r3, [r4, #84]	; 0x54
 801439a:	81a3      	strhlt	r3, [r4, #12]
 801439c:	bd10      	pop	{r4, pc}

0801439e <__swrite>:
 801439e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80143a2:	461f      	mov	r7, r3
 80143a4:	898b      	ldrh	r3, [r1, #12]
 80143a6:	05db      	lsls	r3, r3, #23
 80143a8:	4605      	mov	r5, r0
 80143aa:	460c      	mov	r4, r1
 80143ac:	4616      	mov	r6, r2
 80143ae:	d505      	bpl.n	80143bc <__swrite+0x1e>
 80143b0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80143b4:	2302      	movs	r3, #2
 80143b6:	2200      	movs	r2, #0
 80143b8:	f000 f868 	bl	801448c <_lseek_r>
 80143bc:	89a3      	ldrh	r3, [r4, #12]
 80143be:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80143c2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80143c6:	81a3      	strh	r3, [r4, #12]
 80143c8:	4632      	mov	r2, r6
 80143ca:	463b      	mov	r3, r7
 80143cc:	4628      	mov	r0, r5
 80143ce:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80143d2:	f000 b817 	b.w	8014404 <_write_r>

080143d6 <__sseek>:
 80143d6:	b510      	push	{r4, lr}
 80143d8:	460c      	mov	r4, r1
 80143da:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80143de:	f000 f855 	bl	801448c <_lseek_r>
 80143e2:	1c43      	adds	r3, r0, #1
 80143e4:	89a3      	ldrh	r3, [r4, #12]
 80143e6:	bf15      	itete	ne
 80143e8:	6560      	strne	r0, [r4, #84]	; 0x54
 80143ea:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80143ee:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80143f2:	81a3      	strheq	r3, [r4, #12]
 80143f4:	bf18      	it	ne
 80143f6:	81a3      	strhne	r3, [r4, #12]
 80143f8:	bd10      	pop	{r4, pc}

080143fa <__sclose>:
 80143fa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80143fe:	f000 b813 	b.w	8014428 <_close_r>
	...

08014404 <_write_r>:
 8014404:	b538      	push	{r3, r4, r5, lr}
 8014406:	4d07      	ldr	r5, [pc, #28]	; (8014424 <_write_r+0x20>)
 8014408:	4604      	mov	r4, r0
 801440a:	4608      	mov	r0, r1
 801440c:	4611      	mov	r1, r2
 801440e:	2200      	movs	r2, #0
 8014410:	602a      	str	r2, [r5, #0]
 8014412:	461a      	mov	r2, r3
 8014414:	f7f4 fddf 	bl	8008fd6 <_write>
 8014418:	1c43      	adds	r3, r0, #1
 801441a:	d102      	bne.n	8014422 <_write_r+0x1e>
 801441c:	682b      	ldr	r3, [r5, #0]
 801441e:	b103      	cbz	r3, 8014422 <_write_r+0x1e>
 8014420:	6023      	str	r3, [r4, #0]
 8014422:	bd38      	pop	{r3, r4, r5, pc}
 8014424:	2000280c 	.word	0x2000280c

08014428 <_close_r>:
 8014428:	b538      	push	{r3, r4, r5, lr}
 801442a:	4d06      	ldr	r5, [pc, #24]	; (8014444 <_close_r+0x1c>)
 801442c:	2300      	movs	r3, #0
 801442e:	4604      	mov	r4, r0
 8014430:	4608      	mov	r0, r1
 8014432:	602b      	str	r3, [r5, #0]
 8014434:	f7f4 fdeb 	bl	800900e <_close>
 8014438:	1c43      	adds	r3, r0, #1
 801443a:	d102      	bne.n	8014442 <_close_r+0x1a>
 801443c:	682b      	ldr	r3, [r5, #0]
 801443e:	b103      	cbz	r3, 8014442 <_close_r+0x1a>
 8014440:	6023      	str	r3, [r4, #0]
 8014442:	bd38      	pop	{r3, r4, r5, pc}
 8014444:	2000280c 	.word	0x2000280c

08014448 <_fstat_r>:
 8014448:	b538      	push	{r3, r4, r5, lr}
 801444a:	4d07      	ldr	r5, [pc, #28]	; (8014468 <_fstat_r+0x20>)
 801444c:	2300      	movs	r3, #0
 801444e:	4604      	mov	r4, r0
 8014450:	4608      	mov	r0, r1
 8014452:	4611      	mov	r1, r2
 8014454:	602b      	str	r3, [r5, #0]
 8014456:	f7f4 fde6 	bl	8009026 <_fstat>
 801445a:	1c43      	adds	r3, r0, #1
 801445c:	d102      	bne.n	8014464 <_fstat_r+0x1c>
 801445e:	682b      	ldr	r3, [r5, #0]
 8014460:	b103      	cbz	r3, 8014464 <_fstat_r+0x1c>
 8014462:	6023      	str	r3, [r4, #0]
 8014464:	bd38      	pop	{r3, r4, r5, pc}
 8014466:	bf00      	nop
 8014468:	2000280c 	.word	0x2000280c

0801446c <_isatty_r>:
 801446c:	b538      	push	{r3, r4, r5, lr}
 801446e:	4d06      	ldr	r5, [pc, #24]	; (8014488 <_isatty_r+0x1c>)
 8014470:	2300      	movs	r3, #0
 8014472:	4604      	mov	r4, r0
 8014474:	4608      	mov	r0, r1
 8014476:	602b      	str	r3, [r5, #0]
 8014478:	f7f4 fde5 	bl	8009046 <_isatty>
 801447c:	1c43      	adds	r3, r0, #1
 801447e:	d102      	bne.n	8014486 <_isatty_r+0x1a>
 8014480:	682b      	ldr	r3, [r5, #0]
 8014482:	b103      	cbz	r3, 8014486 <_isatty_r+0x1a>
 8014484:	6023      	str	r3, [r4, #0]
 8014486:	bd38      	pop	{r3, r4, r5, pc}
 8014488:	2000280c 	.word	0x2000280c

0801448c <_lseek_r>:
 801448c:	b538      	push	{r3, r4, r5, lr}
 801448e:	4d07      	ldr	r5, [pc, #28]	; (80144ac <_lseek_r+0x20>)
 8014490:	4604      	mov	r4, r0
 8014492:	4608      	mov	r0, r1
 8014494:	4611      	mov	r1, r2
 8014496:	2200      	movs	r2, #0
 8014498:	602a      	str	r2, [r5, #0]
 801449a:	461a      	mov	r2, r3
 801449c:	f7f4 fdde 	bl	800905c <_lseek>
 80144a0:	1c43      	adds	r3, r0, #1
 80144a2:	d102      	bne.n	80144aa <_lseek_r+0x1e>
 80144a4:	682b      	ldr	r3, [r5, #0]
 80144a6:	b103      	cbz	r3, 80144aa <_lseek_r+0x1e>
 80144a8:	6023      	str	r3, [r4, #0]
 80144aa:	bd38      	pop	{r3, r4, r5, pc}
 80144ac:	2000280c 	.word	0x2000280c

080144b0 <_read_r>:
 80144b0:	b538      	push	{r3, r4, r5, lr}
 80144b2:	4d07      	ldr	r5, [pc, #28]	; (80144d0 <_read_r+0x20>)
 80144b4:	4604      	mov	r4, r0
 80144b6:	4608      	mov	r0, r1
 80144b8:	4611      	mov	r1, r2
 80144ba:	2200      	movs	r2, #0
 80144bc:	602a      	str	r2, [r5, #0]
 80144be:	461a      	mov	r2, r3
 80144c0:	f7f4 fd6c 	bl	8008f9c <_read>
 80144c4:	1c43      	adds	r3, r0, #1
 80144c6:	d102      	bne.n	80144ce <_read_r+0x1e>
 80144c8:	682b      	ldr	r3, [r5, #0]
 80144ca:	b103      	cbz	r3, 80144ce <_read_r+0x1e>
 80144cc:	6023      	str	r3, [r4, #0]
 80144ce:	bd38      	pop	{r3, r4, r5, pc}
 80144d0:	2000280c 	.word	0x2000280c
 80144d4:	00000000 	.word	0x00000000

080144d8 <exp>:
 80144d8:	b538      	push	{r3, r4, r5, lr}
 80144da:	ed2d 8b02 	vpush	{d8}
 80144de:	ec55 4b10 	vmov	r4, r5, d0
 80144e2:	f000 f86d 	bl	80145c0 <__ieee754_exp>
 80144e6:	eeb0 8a40 	vmov.f32	s16, s0
 80144ea:	eef0 8a60 	vmov.f32	s17, s1
 80144ee:	ec45 4b10 	vmov	d0, r4, r5
 80144f2:	f000 fac9 	bl	8014a88 <finite>
 80144f6:	b168      	cbz	r0, 8014514 <exp+0x3c>
 80144f8:	a317      	add	r3, pc, #92	; (adr r3, 8014558 <exp+0x80>)
 80144fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80144fe:	4620      	mov	r0, r4
 8014500:	4629      	mov	r1, r5
 8014502:	f7ec fb31 	bl	8000b68 <__aeabi_dcmpgt>
 8014506:	b160      	cbz	r0, 8014522 <exp+0x4a>
 8014508:	f7fd f8d0 	bl	80116ac <__errno>
 801450c:	ed9f 8b0e 	vldr	d8, [pc, #56]	; 8014548 <exp+0x70>
 8014510:	2322      	movs	r3, #34	; 0x22
 8014512:	6003      	str	r3, [r0, #0]
 8014514:	eeb0 0a48 	vmov.f32	s0, s16
 8014518:	eef0 0a68 	vmov.f32	s1, s17
 801451c:	ecbd 8b02 	vpop	{d8}
 8014520:	bd38      	pop	{r3, r4, r5, pc}
 8014522:	a30f      	add	r3, pc, #60	; (adr r3, 8014560 <exp+0x88>)
 8014524:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014528:	4620      	mov	r0, r4
 801452a:	4629      	mov	r1, r5
 801452c:	f7ec fafe 	bl	8000b2c <__aeabi_dcmplt>
 8014530:	2800      	cmp	r0, #0
 8014532:	d0ef      	beq.n	8014514 <exp+0x3c>
 8014534:	f7fd f8ba 	bl	80116ac <__errno>
 8014538:	2322      	movs	r3, #34	; 0x22
 801453a:	ed9f 8b05 	vldr	d8, [pc, #20]	; 8014550 <exp+0x78>
 801453e:	6003      	str	r3, [r0, #0]
 8014540:	e7e8      	b.n	8014514 <exp+0x3c>
 8014542:	bf00      	nop
 8014544:	f3af 8000 	nop.w
 8014548:	00000000 	.word	0x00000000
 801454c:	7ff00000 	.word	0x7ff00000
	...
 8014558:	fefa39ef 	.word	0xfefa39ef
 801455c:	40862e42 	.word	0x40862e42
 8014560:	d52d3051 	.word	0xd52d3051
 8014564:	c0874910 	.word	0xc0874910

08014568 <sqrt>:
 8014568:	b538      	push	{r3, r4, r5, lr}
 801456a:	ed2d 8b02 	vpush	{d8}
 801456e:	ec55 4b10 	vmov	r4, r5, d0
 8014572:	f000 f9a7 	bl	80148c4 <__ieee754_sqrt>
 8014576:	4622      	mov	r2, r4
 8014578:	462b      	mov	r3, r5
 801457a:	4620      	mov	r0, r4
 801457c:	4629      	mov	r1, r5
 801457e:	eeb0 8a40 	vmov.f32	s16, s0
 8014582:	eef0 8a60 	vmov.f32	s17, s1
 8014586:	f7ec faf9 	bl	8000b7c <__aeabi_dcmpun>
 801458a:	b990      	cbnz	r0, 80145b2 <sqrt+0x4a>
 801458c:	2200      	movs	r2, #0
 801458e:	2300      	movs	r3, #0
 8014590:	4620      	mov	r0, r4
 8014592:	4629      	mov	r1, r5
 8014594:	f7ec faca 	bl	8000b2c <__aeabi_dcmplt>
 8014598:	b158      	cbz	r0, 80145b2 <sqrt+0x4a>
 801459a:	f7fd f887 	bl	80116ac <__errno>
 801459e:	2321      	movs	r3, #33	; 0x21
 80145a0:	6003      	str	r3, [r0, #0]
 80145a2:	2200      	movs	r2, #0
 80145a4:	2300      	movs	r3, #0
 80145a6:	4610      	mov	r0, r2
 80145a8:	4619      	mov	r1, r3
 80145aa:	f7ec f977 	bl	800089c <__aeabi_ddiv>
 80145ae:	ec41 0b18 	vmov	d8, r0, r1
 80145b2:	eeb0 0a48 	vmov.f32	s0, s16
 80145b6:	eef0 0a68 	vmov.f32	s1, s17
 80145ba:	ecbd 8b02 	vpop	{d8}
 80145be:	bd38      	pop	{r3, r4, r5, pc}

080145c0 <__ieee754_exp>:
 80145c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80145c4:	ec55 4b10 	vmov	r4, r5, d0
 80145c8:	49b5      	ldr	r1, [pc, #724]	; (80148a0 <__ieee754_exp+0x2e0>)
 80145ca:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 80145ce:	428b      	cmp	r3, r1
 80145d0:	ed2d 8b04 	vpush	{d8-d9}
 80145d4:	ea4f 76d5 	mov.w	r6, r5, lsr #31
 80145d8:	d93d      	bls.n	8014656 <__ieee754_exp+0x96>
 80145da:	49b2      	ldr	r1, [pc, #712]	; (80148a4 <__ieee754_exp+0x2e4>)
 80145dc:	428b      	cmp	r3, r1
 80145de:	d918      	bls.n	8014612 <__ieee754_exp+0x52>
 80145e0:	ee10 3a10 	vmov	r3, s0
 80145e4:	f3c5 0213 	ubfx	r2, r5, #0, #20
 80145e8:	4313      	orrs	r3, r2
 80145ea:	d009      	beq.n	8014600 <__ieee754_exp+0x40>
 80145ec:	ee10 2a10 	vmov	r2, s0
 80145f0:	462b      	mov	r3, r5
 80145f2:	4620      	mov	r0, r4
 80145f4:	4629      	mov	r1, r5
 80145f6:	f7eb fe71 	bl	80002dc <__adddf3>
 80145fa:	4604      	mov	r4, r0
 80145fc:	460d      	mov	r5, r1
 80145fe:	e002      	b.n	8014606 <__ieee754_exp+0x46>
 8014600:	b10e      	cbz	r6, 8014606 <__ieee754_exp+0x46>
 8014602:	2400      	movs	r4, #0
 8014604:	2500      	movs	r5, #0
 8014606:	ecbd 8b04 	vpop	{d8-d9}
 801460a:	ec45 4b10 	vmov	d0, r4, r5
 801460e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014612:	a38d      	add	r3, pc, #564	; (adr r3, 8014848 <__ieee754_exp+0x288>)
 8014614:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014618:	ee10 0a10 	vmov	r0, s0
 801461c:	4629      	mov	r1, r5
 801461e:	f7ec faa3 	bl	8000b68 <__aeabi_dcmpgt>
 8014622:	4607      	mov	r7, r0
 8014624:	b130      	cbz	r0, 8014634 <__ieee754_exp+0x74>
 8014626:	ecbd 8b04 	vpop	{d8-d9}
 801462a:	2000      	movs	r0, #0
 801462c:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014630:	f000 ba21 	b.w	8014a76 <__math_oflow>
 8014634:	a386      	add	r3, pc, #536	; (adr r3, 8014850 <__ieee754_exp+0x290>)
 8014636:	e9d3 2300 	ldrd	r2, r3, [r3]
 801463a:	4620      	mov	r0, r4
 801463c:	4629      	mov	r1, r5
 801463e:	f7ec fa75 	bl	8000b2c <__aeabi_dcmplt>
 8014642:	2800      	cmp	r0, #0
 8014644:	f000 808b 	beq.w	801475e <__ieee754_exp+0x19e>
 8014648:	ecbd 8b04 	vpop	{d8-d9}
 801464c:	4638      	mov	r0, r7
 801464e:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014652:	f000 ba07 	b.w	8014a64 <__math_uflow>
 8014656:	4a94      	ldr	r2, [pc, #592]	; (80148a8 <__ieee754_exp+0x2e8>)
 8014658:	4293      	cmp	r3, r2
 801465a:	f240 80ac 	bls.w	80147b6 <__ieee754_exp+0x1f6>
 801465e:	4a93      	ldr	r2, [pc, #588]	; (80148ac <__ieee754_exp+0x2ec>)
 8014660:	4293      	cmp	r3, r2
 8014662:	d87c      	bhi.n	801475e <__ieee754_exp+0x19e>
 8014664:	4b92      	ldr	r3, [pc, #584]	; (80148b0 <__ieee754_exp+0x2f0>)
 8014666:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 801466a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801466e:	ee10 0a10 	vmov	r0, s0
 8014672:	4629      	mov	r1, r5
 8014674:	f7eb fe30 	bl	80002d8 <__aeabi_dsub>
 8014678:	4b8e      	ldr	r3, [pc, #568]	; (80148b4 <__ieee754_exp+0x2f4>)
 801467a:	00f7      	lsls	r7, r6, #3
 801467c:	443b      	add	r3, r7
 801467e:	ed93 7b00 	vldr	d7, [r3]
 8014682:	f1c6 0a01 	rsb	sl, r6, #1
 8014686:	4680      	mov	r8, r0
 8014688:	4689      	mov	r9, r1
 801468a:	ebaa 0a06 	sub.w	sl, sl, r6
 801468e:	eeb0 8a47 	vmov.f32	s16, s14
 8014692:	eef0 8a67 	vmov.f32	s17, s15
 8014696:	ec53 2b18 	vmov	r2, r3, d8
 801469a:	4640      	mov	r0, r8
 801469c:	4649      	mov	r1, r9
 801469e:	f7eb fe1b 	bl	80002d8 <__aeabi_dsub>
 80146a2:	4604      	mov	r4, r0
 80146a4:	460d      	mov	r5, r1
 80146a6:	4622      	mov	r2, r4
 80146a8:	462b      	mov	r3, r5
 80146aa:	4620      	mov	r0, r4
 80146ac:	4629      	mov	r1, r5
 80146ae:	f7eb ffcb 	bl	8000648 <__aeabi_dmul>
 80146b2:	a369      	add	r3, pc, #420	; (adr r3, 8014858 <__ieee754_exp+0x298>)
 80146b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80146b8:	4606      	mov	r6, r0
 80146ba:	460f      	mov	r7, r1
 80146bc:	f7eb ffc4 	bl	8000648 <__aeabi_dmul>
 80146c0:	a367      	add	r3, pc, #412	; (adr r3, 8014860 <__ieee754_exp+0x2a0>)
 80146c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80146c6:	f7eb fe07 	bl	80002d8 <__aeabi_dsub>
 80146ca:	4632      	mov	r2, r6
 80146cc:	463b      	mov	r3, r7
 80146ce:	f7eb ffbb 	bl	8000648 <__aeabi_dmul>
 80146d2:	a365      	add	r3, pc, #404	; (adr r3, 8014868 <__ieee754_exp+0x2a8>)
 80146d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80146d8:	f7eb fe00 	bl	80002dc <__adddf3>
 80146dc:	4632      	mov	r2, r6
 80146de:	463b      	mov	r3, r7
 80146e0:	f7eb ffb2 	bl	8000648 <__aeabi_dmul>
 80146e4:	a362      	add	r3, pc, #392	; (adr r3, 8014870 <__ieee754_exp+0x2b0>)
 80146e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80146ea:	f7eb fdf5 	bl	80002d8 <__aeabi_dsub>
 80146ee:	4632      	mov	r2, r6
 80146f0:	463b      	mov	r3, r7
 80146f2:	f7eb ffa9 	bl	8000648 <__aeabi_dmul>
 80146f6:	a360      	add	r3, pc, #384	; (adr r3, 8014878 <__ieee754_exp+0x2b8>)
 80146f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80146fc:	f7eb fdee 	bl	80002dc <__adddf3>
 8014700:	4632      	mov	r2, r6
 8014702:	463b      	mov	r3, r7
 8014704:	f7eb ffa0 	bl	8000648 <__aeabi_dmul>
 8014708:	4602      	mov	r2, r0
 801470a:	460b      	mov	r3, r1
 801470c:	4620      	mov	r0, r4
 801470e:	4629      	mov	r1, r5
 8014710:	f7eb fde2 	bl	80002d8 <__aeabi_dsub>
 8014714:	4602      	mov	r2, r0
 8014716:	460b      	mov	r3, r1
 8014718:	4606      	mov	r6, r0
 801471a:	460f      	mov	r7, r1
 801471c:	4620      	mov	r0, r4
 801471e:	4629      	mov	r1, r5
 8014720:	f7eb ff92 	bl	8000648 <__aeabi_dmul>
 8014724:	ec41 0b19 	vmov	d9, r0, r1
 8014728:	f1ba 0f00 	cmp.w	sl, #0
 801472c:	d15d      	bne.n	80147ea <__ieee754_exp+0x22a>
 801472e:	2200      	movs	r2, #0
 8014730:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8014734:	4630      	mov	r0, r6
 8014736:	4639      	mov	r1, r7
 8014738:	f7eb fdce 	bl	80002d8 <__aeabi_dsub>
 801473c:	4602      	mov	r2, r0
 801473e:	460b      	mov	r3, r1
 8014740:	ec51 0b19 	vmov	r0, r1, d9
 8014744:	f7ec f8aa 	bl	800089c <__aeabi_ddiv>
 8014748:	4622      	mov	r2, r4
 801474a:	462b      	mov	r3, r5
 801474c:	f7eb fdc4 	bl	80002d8 <__aeabi_dsub>
 8014750:	4602      	mov	r2, r0
 8014752:	460b      	mov	r3, r1
 8014754:	2000      	movs	r0, #0
 8014756:	4958      	ldr	r1, [pc, #352]	; (80148b8 <__ieee754_exp+0x2f8>)
 8014758:	f7eb fdbe 	bl	80002d8 <__aeabi_dsub>
 801475c:	e74d      	b.n	80145fa <__ieee754_exp+0x3a>
 801475e:	4857      	ldr	r0, [pc, #348]	; (80148bc <__ieee754_exp+0x2fc>)
 8014760:	a347      	add	r3, pc, #284	; (adr r3, 8014880 <__ieee754_exp+0x2c0>)
 8014762:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014766:	eb00 06c6 	add.w	r6, r0, r6, lsl #3
 801476a:	4629      	mov	r1, r5
 801476c:	4620      	mov	r0, r4
 801476e:	f7eb ff6b 	bl	8000648 <__aeabi_dmul>
 8014772:	e9d6 2300 	ldrd	r2, r3, [r6]
 8014776:	f7eb fdb1 	bl	80002dc <__adddf3>
 801477a:	f7ec fa15 	bl	8000ba8 <__aeabi_d2iz>
 801477e:	4682      	mov	sl, r0
 8014780:	f7eb fef8 	bl	8000574 <__aeabi_i2d>
 8014784:	a340      	add	r3, pc, #256	; (adr r3, 8014888 <__ieee754_exp+0x2c8>)
 8014786:	e9d3 2300 	ldrd	r2, r3, [r3]
 801478a:	4606      	mov	r6, r0
 801478c:	460f      	mov	r7, r1
 801478e:	f7eb ff5b 	bl	8000648 <__aeabi_dmul>
 8014792:	4602      	mov	r2, r0
 8014794:	460b      	mov	r3, r1
 8014796:	4620      	mov	r0, r4
 8014798:	4629      	mov	r1, r5
 801479a:	f7eb fd9d 	bl	80002d8 <__aeabi_dsub>
 801479e:	a33c      	add	r3, pc, #240	; (adr r3, 8014890 <__ieee754_exp+0x2d0>)
 80147a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80147a4:	4680      	mov	r8, r0
 80147a6:	4689      	mov	r9, r1
 80147a8:	4630      	mov	r0, r6
 80147aa:	4639      	mov	r1, r7
 80147ac:	f7eb ff4c 	bl	8000648 <__aeabi_dmul>
 80147b0:	ec41 0b18 	vmov	d8, r0, r1
 80147b4:	e76f      	b.n	8014696 <__ieee754_exp+0xd6>
 80147b6:	4a42      	ldr	r2, [pc, #264]	; (80148c0 <__ieee754_exp+0x300>)
 80147b8:	4293      	cmp	r3, r2
 80147ba:	d811      	bhi.n	80147e0 <__ieee754_exp+0x220>
 80147bc:	a336      	add	r3, pc, #216	; (adr r3, 8014898 <__ieee754_exp+0x2d8>)
 80147be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80147c2:	ee10 0a10 	vmov	r0, s0
 80147c6:	4629      	mov	r1, r5
 80147c8:	f7eb fd88 	bl	80002dc <__adddf3>
 80147cc:	4b3a      	ldr	r3, [pc, #232]	; (80148b8 <__ieee754_exp+0x2f8>)
 80147ce:	2200      	movs	r2, #0
 80147d0:	f7ec f9ca 	bl	8000b68 <__aeabi_dcmpgt>
 80147d4:	b138      	cbz	r0, 80147e6 <__ieee754_exp+0x226>
 80147d6:	4b38      	ldr	r3, [pc, #224]	; (80148b8 <__ieee754_exp+0x2f8>)
 80147d8:	2200      	movs	r2, #0
 80147da:	4620      	mov	r0, r4
 80147dc:	4629      	mov	r1, r5
 80147de:	e70a      	b.n	80145f6 <__ieee754_exp+0x36>
 80147e0:	f04f 0a00 	mov.w	sl, #0
 80147e4:	e75f      	b.n	80146a6 <__ieee754_exp+0xe6>
 80147e6:	4682      	mov	sl, r0
 80147e8:	e75d      	b.n	80146a6 <__ieee754_exp+0xe6>
 80147ea:	4632      	mov	r2, r6
 80147ec:	463b      	mov	r3, r7
 80147ee:	2000      	movs	r0, #0
 80147f0:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 80147f4:	f7eb fd70 	bl	80002d8 <__aeabi_dsub>
 80147f8:	4602      	mov	r2, r0
 80147fa:	460b      	mov	r3, r1
 80147fc:	ec51 0b19 	vmov	r0, r1, d9
 8014800:	f7ec f84c 	bl	800089c <__aeabi_ddiv>
 8014804:	4602      	mov	r2, r0
 8014806:	460b      	mov	r3, r1
 8014808:	ec51 0b18 	vmov	r0, r1, d8
 801480c:	f7eb fd64 	bl	80002d8 <__aeabi_dsub>
 8014810:	4642      	mov	r2, r8
 8014812:	464b      	mov	r3, r9
 8014814:	f7eb fd60 	bl	80002d8 <__aeabi_dsub>
 8014818:	4602      	mov	r2, r0
 801481a:	460b      	mov	r3, r1
 801481c:	2000      	movs	r0, #0
 801481e:	4926      	ldr	r1, [pc, #152]	; (80148b8 <__ieee754_exp+0x2f8>)
 8014820:	f7eb fd5a 	bl	80002d8 <__aeabi_dsub>
 8014824:	f46f 727f 	mvn.w	r2, #1020	; 0x3fc
 8014828:	4592      	cmp	sl, r2
 801482a:	db02      	blt.n	8014832 <__ieee754_exp+0x272>
 801482c:	eb01 510a 	add.w	r1, r1, sl, lsl #20
 8014830:	e6e3      	b.n	80145fa <__ieee754_exp+0x3a>
 8014832:	f50a 7a7a 	add.w	sl, sl, #1000	; 0x3e8
 8014836:	eb01 510a 	add.w	r1, r1, sl, lsl #20
 801483a:	2200      	movs	r2, #0
 801483c:	f04f 73b8 	mov.w	r3, #24117248	; 0x1700000
 8014840:	f7eb ff02 	bl	8000648 <__aeabi_dmul>
 8014844:	e6d9      	b.n	80145fa <__ieee754_exp+0x3a>
 8014846:	bf00      	nop
 8014848:	fefa39ef 	.word	0xfefa39ef
 801484c:	40862e42 	.word	0x40862e42
 8014850:	d52d3051 	.word	0xd52d3051
 8014854:	c0874910 	.word	0xc0874910
 8014858:	72bea4d0 	.word	0x72bea4d0
 801485c:	3e663769 	.word	0x3e663769
 8014860:	c5d26bf1 	.word	0xc5d26bf1
 8014864:	3ebbbd41 	.word	0x3ebbbd41
 8014868:	af25de2c 	.word	0xaf25de2c
 801486c:	3f11566a 	.word	0x3f11566a
 8014870:	16bebd93 	.word	0x16bebd93
 8014874:	3f66c16c 	.word	0x3f66c16c
 8014878:	5555553e 	.word	0x5555553e
 801487c:	3fc55555 	.word	0x3fc55555
 8014880:	652b82fe 	.word	0x652b82fe
 8014884:	3ff71547 	.word	0x3ff71547
 8014888:	fee00000 	.word	0xfee00000
 801488c:	3fe62e42 	.word	0x3fe62e42
 8014890:	35793c76 	.word	0x35793c76
 8014894:	3dea39ef 	.word	0x3dea39ef
 8014898:	8800759c 	.word	0x8800759c
 801489c:	7e37e43c 	.word	0x7e37e43c
 80148a0:	40862e41 	.word	0x40862e41
 80148a4:	7fefffff 	.word	0x7fefffff
 80148a8:	3fd62e42 	.word	0x3fd62e42
 80148ac:	3ff0a2b1 	.word	0x3ff0a2b1
 80148b0:	0801b048 	.word	0x0801b048
 80148b4:	0801b058 	.word	0x0801b058
 80148b8:	3ff00000 	.word	0x3ff00000
 80148bc:	0801b038 	.word	0x0801b038
 80148c0:	3defffff 	.word	0x3defffff

080148c4 <__ieee754_sqrt>:
 80148c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80148c8:	ec55 4b10 	vmov	r4, r5, d0
 80148cc:	4e55      	ldr	r6, [pc, #340]	; (8014a24 <__ieee754_sqrt+0x160>)
 80148ce:	43ae      	bics	r6, r5
 80148d0:	ee10 0a10 	vmov	r0, s0
 80148d4:	ee10 3a10 	vmov	r3, s0
 80148d8:	462a      	mov	r2, r5
 80148da:	4629      	mov	r1, r5
 80148dc:	d110      	bne.n	8014900 <__ieee754_sqrt+0x3c>
 80148de:	ee10 2a10 	vmov	r2, s0
 80148e2:	462b      	mov	r3, r5
 80148e4:	f7eb feb0 	bl	8000648 <__aeabi_dmul>
 80148e8:	4602      	mov	r2, r0
 80148ea:	460b      	mov	r3, r1
 80148ec:	4620      	mov	r0, r4
 80148ee:	4629      	mov	r1, r5
 80148f0:	f7eb fcf4 	bl	80002dc <__adddf3>
 80148f4:	4604      	mov	r4, r0
 80148f6:	460d      	mov	r5, r1
 80148f8:	ec45 4b10 	vmov	d0, r4, r5
 80148fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014900:	2d00      	cmp	r5, #0
 8014902:	dc10      	bgt.n	8014926 <__ieee754_sqrt+0x62>
 8014904:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8014908:	4330      	orrs	r0, r6
 801490a:	d0f5      	beq.n	80148f8 <__ieee754_sqrt+0x34>
 801490c:	b15d      	cbz	r5, 8014926 <__ieee754_sqrt+0x62>
 801490e:	ee10 2a10 	vmov	r2, s0
 8014912:	462b      	mov	r3, r5
 8014914:	ee10 0a10 	vmov	r0, s0
 8014918:	f7eb fcde 	bl	80002d8 <__aeabi_dsub>
 801491c:	4602      	mov	r2, r0
 801491e:	460b      	mov	r3, r1
 8014920:	f7eb ffbc 	bl	800089c <__aeabi_ddiv>
 8014924:	e7e6      	b.n	80148f4 <__ieee754_sqrt+0x30>
 8014926:	1512      	asrs	r2, r2, #20
 8014928:	d074      	beq.n	8014a14 <__ieee754_sqrt+0x150>
 801492a:	07d4      	lsls	r4, r2, #31
 801492c:	f3c1 0113 	ubfx	r1, r1, #0, #20
 8014930:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 8014934:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8014938:	bf5e      	ittt	pl
 801493a:	0fda      	lsrpl	r2, r3, #31
 801493c:	005b      	lslpl	r3, r3, #1
 801493e:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 8014942:	2400      	movs	r4, #0
 8014944:	0fda      	lsrs	r2, r3, #31
 8014946:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 801494a:	107f      	asrs	r7, r7, #1
 801494c:	005b      	lsls	r3, r3, #1
 801494e:	2516      	movs	r5, #22
 8014950:	4620      	mov	r0, r4
 8014952:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8014956:	1886      	adds	r6, r0, r2
 8014958:	428e      	cmp	r6, r1
 801495a:	bfde      	ittt	le
 801495c:	1b89      	suble	r1, r1, r6
 801495e:	18b0      	addle	r0, r6, r2
 8014960:	18a4      	addle	r4, r4, r2
 8014962:	0049      	lsls	r1, r1, #1
 8014964:	3d01      	subs	r5, #1
 8014966:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 801496a:	ea4f 0252 	mov.w	r2, r2, lsr #1
 801496e:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8014972:	d1f0      	bne.n	8014956 <__ieee754_sqrt+0x92>
 8014974:	462a      	mov	r2, r5
 8014976:	f04f 0e20 	mov.w	lr, #32
 801497a:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 801497e:	4281      	cmp	r1, r0
 8014980:	eb06 0c05 	add.w	ip, r6, r5
 8014984:	dc02      	bgt.n	801498c <__ieee754_sqrt+0xc8>
 8014986:	d113      	bne.n	80149b0 <__ieee754_sqrt+0xec>
 8014988:	459c      	cmp	ip, r3
 801498a:	d811      	bhi.n	80149b0 <__ieee754_sqrt+0xec>
 801498c:	f1bc 0f00 	cmp.w	ip, #0
 8014990:	eb0c 0506 	add.w	r5, ip, r6
 8014994:	da43      	bge.n	8014a1e <__ieee754_sqrt+0x15a>
 8014996:	2d00      	cmp	r5, #0
 8014998:	db41      	blt.n	8014a1e <__ieee754_sqrt+0x15a>
 801499a:	f100 0801 	add.w	r8, r0, #1
 801499e:	1a09      	subs	r1, r1, r0
 80149a0:	459c      	cmp	ip, r3
 80149a2:	bf88      	it	hi
 80149a4:	f101 31ff 	addhi.w	r1, r1, #4294967295	; 0xffffffff
 80149a8:	eba3 030c 	sub.w	r3, r3, ip
 80149ac:	4432      	add	r2, r6
 80149ae:	4640      	mov	r0, r8
 80149b0:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 80149b4:	f1be 0e01 	subs.w	lr, lr, #1
 80149b8:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 80149bc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80149c0:	ea4f 0656 	mov.w	r6, r6, lsr #1
 80149c4:	d1db      	bne.n	801497e <__ieee754_sqrt+0xba>
 80149c6:	430b      	orrs	r3, r1
 80149c8:	d006      	beq.n	80149d8 <__ieee754_sqrt+0x114>
 80149ca:	1c50      	adds	r0, r2, #1
 80149cc:	bf13      	iteet	ne
 80149ce:	3201      	addne	r2, #1
 80149d0:	3401      	addeq	r4, #1
 80149d2:	4672      	moveq	r2, lr
 80149d4:	f022 0201 	bicne.w	r2, r2, #1
 80149d8:	1063      	asrs	r3, r4, #1
 80149da:	0852      	lsrs	r2, r2, #1
 80149dc:	07e1      	lsls	r1, r4, #31
 80149de:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 80149e2:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 80149e6:	bf48      	it	mi
 80149e8:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 80149ec:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 80149f0:	4614      	mov	r4, r2
 80149f2:	e781      	b.n	80148f8 <__ieee754_sqrt+0x34>
 80149f4:	0ad9      	lsrs	r1, r3, #11
 80149f6:	3815      	subs	r0, #21
 80149f8:	055b      	lsls	r3, r3, #21
 80149fa:	2900      	cmp	r1, #0
 80149fc:	d0fa      	beq.n	80149f4 <__ieee754_sqrt+0x130>
 80149fe:	02cd      	lsls	r5, r1, #11
 8014a00:	d50a      	bpl.n	8014a18 <__ieee754_sqrt+0x154>
 8014a02:	f1c2 0420 	rsb	r4, r2, #32
 8014a06:	fa23 f404 	lsr.w	r4, r3, r4
 8014a0a:	1e55      	subs	r5, r2, #1
 8014a0c:	4093      	lsls	r3, r2
 8014a0e:	4321      	orrs	r1, r4
 8014a10:	1b42      	subs	r2, r0, r5
 8014a12:	e78a      	b.n	801492a <__ieee754_sqrt+0x66>
 8014a14:	4610      	mov	r0, r2
 8014a16:	e7f0      	b.n	80149fa <__ieee754_sqrt+0x136>
 8014a18:	0049      	lsls	r1, r1, #1
 8014a1a:	3201      	adds	r2, #1
 8014a1c:	e7ef      	b.n	80149fe <__ieee754_sqrt+0x13a>
 8014a1e:	4680      	mov	r8, r0
 8014a20:	e7bd      	b.n	801499e <__ieee754_sqrt+0xda>
 8014a22:	bf00      	nop
 8014a24:	7ff00000 	.word	0x7ff00000

08014a28 <with_errno>:
 8014a28:	b570      	push	{r4, r5, r6, lr}
 8014a2a:	4604      	mov	r4, r0
 8014a2c:	460d      	mov	r5, r1
 8014a2e:	4616      	mov	r6, r2
 8014a30:	f7fc fe3c 	bl	80116ac <__errno>
 8014a34:	4629      	mov	r1, r5
 8014a36:	6006      	str	r6, [r0, #0]
 8014a38:	4620      	mov	r0, r4
 8014a3a:	bd70      	pop	{r4, r5, r6, pc}

08014a3c <xflow>:
 8014a3c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8014a3e:	4614      	mov	r4, r2
 8014a40:	461d      	mov	r5, r3
 8014a42:	b108      	cbz	r0, 8014a48 <xflow+0xc>
 8014a44:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8014a48:	e9cd 2300 	strd	r2, r3, [sp]
 8014a4c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8014a50:	4620      	mov	r0, r4
 8014a52:	4629      	mov	r1, r5
 8014a54:	f7eb fdf8 	bl	8000648 <__aeabi_dmul>
 8014a58:	2222      	movs	r2, #34	; 0x22
 8014a5a:	b003      	add	sp, #12
 8014a5c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8014a60:	f7ff bfe2 	b.w	8014a28 <with_errno>

08014a64 <__math_uflow>:
 8014a64:	b508      	push	{r3, lr}
 8014a66:	2200      	movs	r2, #0
 8014a68:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8014a6c:	f7ff ffe6 	bl	8014a3c <xflow>
 8014a70:	ec41 0b10 	vmov	d0, r0, r1
 8014a74:	bd08      	pop	{r3, pc}

08014a76 <__math_oflow>:
 8014a76:	b508      	push	{r3, lr}
 8014a78:	2200      	movs	r2, #0
 8014a7a:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 8014a7e:	f7ff ffdd 	bl	8014a3c <xflow>
 8014a82:	ec41 0b10 	vmov	d0, r0, r1
 8014a86:	bd08      	pop	{r3, pc}

08014a88 <finite>:
 8014a88:	b082      	sub	sp, #8
 8014a8a:	ed8d 0b00 	vstr	d0, [sp]
 8014a8e:	9801      	ldr	r0, [sp, #4]
 8014a90:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 8014a94:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8014a98:	0fc0      	lsrs	r0, r0, #31
 8014a9a:	b002      	add	sp, #8
 8014a9c:	4770      	bx	lr
	...

08014aa0 <_init>:
 8014aa0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014aa2:	bf00      	nop
 8014aa4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8014aa6:	bc08      	pop	{r3}
 8014aa8:	469e      	mov	lr, r3
 8014aaa:	4770      	bx	lr

08014aac <_fini>:
 8014aac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014aae:	bf00      	nop
 8014ab0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8014ab2:	bc08      	pop	{r3}
 8014ab4:	469e      	mov	lr, r3
 8014ab6:	4770      	bx	lr
