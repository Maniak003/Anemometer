
Anemometer_200_F303.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e408  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00005a74  0800e598  0800e598  0001e598  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801400c  0801400c  000301e4  2**0
                  CONTENTS
  4 .ARM          00000000  0801400c  0801400c  000301e4  2**0
                  CONTENTS
  5 .preinit_array 00000000  0801400c  0801400c  000301e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801400c  0801400c  0002400c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08014010  08014010  00024010  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e4  20000000  08014014  00030000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00008998  200001e8  080141f8  000301e8  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20008b80  080141f8  00038b80  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000301e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00019303  00000000  00000000  00030214  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002f98  00000000  00000000  00049517  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001548  00000000  00000000  0004c4b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000013e8  00000000  00000000  0004d9f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00022218  00000000  00000000  0004ede0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001db8f  00000000  00000000  00070ff8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c6954  00000000  00000000  0008eb87  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001554db  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006ca4  00000000  00000000  0015552c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001e8 	.word	0x200001e8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800e580 	.word	0x0800e580

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001ec 	.word	0x200001ec
 80001cc:	0800e580 	.word	0x0800e580

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <c_FFTImplementationCallback_doH>:
 */
void c_FFTImplementationCallback_doH(const double x[200], creal_T y[200],
                                     const creal_T wwc[199],
                                     const double costabinv[257],
                                     const double sintabinv[257])
{
 8000ba8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8000bac:	b09e      	sub	sp, #120	; 0x78
 8000bae:	af00      	add	r7, sp, #0
 8000bb0:	60f8      	str	r0, [r7, #12]
 8000bb2:	60b9      	str	r1, [r7, #8]
 8000bb4:	607a      	str	r2, [r7, #4]
 8000bb6:	603b      	str	r3, [r7, #0]
  boolean_T tst;
#ifdef FFTDEBUG
  extern char SndBuffer[100];
  HAL_UART_Transmit(&huart1, (uint8_t *) "TPFFT0\n\r", sizeof("TPFFT0\n\r"), 1000);
#endif
  for (i = 0; i < 128; i++) {
 8000bb8:	2300      	movs	r3, #0
 8000bba:	677b      	str	r3, [r7, #116]	; 0x74
 8000bbc:	e038      	b.n	8000c30 <c_FFTImplementationCallback_doH+0x88>
    iy = ((i + 1) << 1) - 2;
 8000bbe:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8000bc0:	3301      	adds	r3, #1
 8000bc2:	005b      	lsls	r3, r3, #1
 8000bc4:	3b02      	subs	r3, #2
 8000bc6:	66bb      	str	r3, [r7, #104]	; 0x68
#ifdef FFTDEBUG
    memset(SndBuffer, 0, sizeof(SndBuffer));
    sprintf(SndBuffer, "i: %d, iy: %d\n\r", i, iy);
	HAL_UART_Transmit(&huart1, (uint8_t *) SndBuffer, sizeof(SndBuffer), 1000);
#endif
	hcostab[i] = dv[iy];
 8000bc8:	4a76      	ldr	r2, [pc, #472]	; (8000da4 <c_FFTImplementationCallback_doH+0x1fc>)
 8000bca:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8000bcc:	00db      	lsls	r3, r3, #3
 8000bce:	4413      	add	r3, r2
 8000bd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000bd4:	4874      	ldr	r0, [pc, #464]	; (8000da8 <c_FFTImplementationCallback_doH+0x200>)
 8000bd6:	6f79      	ldr	r1, [r7, #116]	; 0x74
 8000bd8:	00c9      	lsls	r1, r1, #3
 8000bda:	4401      	add	r1, r0
 8000bdc:	e9c1 2300 	strd	r2, r3, [r1]
    hsintab[i] = dv1[iy];
 8000be0:	4a72      	ldr	r2, [pc, #456]	; (8000dac <c_FFTImplementationCallback_doH+0x204>)
 8000be2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8000be4:	00db      	lsls	r3, r3, #3
 8000be6:	4413      	add	r3, r2
 8000be8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000bec:	4870      	ldr	r0, [pc, #448]	; (8000db0 <c_FFTImplementationCallback_doH+0x208>)
 8000bee:	6f79      	ldr	r1, [r7, #116]	; 0x74
 8000bf0:	00c9      	lsls	r1, r1, #3
 8000bf2:	4401      	add	r1, r0
 8000bf4:	e9c1 2300 	strd	r2, r3, [r1]
    hcostabinv[i] = costabinv[iy];
 8000bf8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8000bfa:	00db      	lsls	r3, r3, #3
 8000bfc:	683a      	ldr	r2, [r7, #0]
 8000bfe:	4413      	add	r3, r2
 8000c00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000c04:	486b      	ldr	r0, [pc, #428]	; (8000db4 <c_FFTImplementationCallback_doH+0x20c>)
 8000c06:	6f79      	ldr	r1, [r7, #116]	; 0x74
 8000c08:	00c9      	lsls	r1, r1, #3
 8000c0a:	4401      	add	r1, r0
 8000c0c:	e9c1 2300 	strd	r2, r3, [r1]
    hsintabinv[i] = sintabinv[iy];
 8000c10:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8000c12:	00db      	lsls	r3, r3, #3
 8000c14:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8000c18:	4413      	add	r3, r2
 8000c1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000c1e:	4866      	ldr	r0, [pc, #408]	; (8000db8 <c_FFTImplementationCallback_doH+0x210>)
 8000c20:	6f79      	ldr	r1, [r7, #116]	; 0x74
 8000c22:	00c9      	lsls	r1, r1, #3
 8000c24:	4401      	add	r1, r0
 8000c26:	e9c1 2300 	strd	r2, r3, [r1]
  for (i = 0; i < 128; i++) {
 8000c2a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8000c2c:	3301      	adds	r3, #1
 8000c2e:	677b      	str	r3, [r7, #116]	; 0x74
 8000c30:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8000c32:	2b7f      	cmp	r3, #127	; 0x7f
 8000c34:	ddc3      	ble.n	8000bbe <c_FFTImplementationCallback_doH+0x16>
  }
#ifdef FFTDEBUG
  HAL_UART_Transmit(&huart1, (uint8_t *) "TPFFT1\n\r", sizeof("TPFFT1\n\r"), 1000);
#endif
  for (iy = 0; iy < 100; iy++) {
 8000c36:	2300      	movs	r3, #0
 8000c38:	66bb      	str	r3, [r7, #104]	; 0x68
 8000c3a:	e065      	b.n	8000d08 <c_FFTImplementationCallback_doH+0x160>
    temp_re_tmp = iy << 1;
 8000c3c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8000c3e:	005b      	lsls	r3, r3, #1
 8000c40:	613b      	str	r3, [r7, #16]
    temp_re = x[temp_re_tmp];
 8000c42:	693b      	ldr	r3, [r7, #16]
 8000c44:	00db      	lsls	r3, r3, #3
 8000c46:	68fa      	ldr	r2, [r7, #12]
 8000c48:	4413      	add	r3, r2
 8000c4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000c4e:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
    temp_im = x[temp_re_tmp + 1];
 8000c52:	693b      	ldr	r3, [r7, #16]
 8000c54:	3301      	adds	r3, #1
 8000c56:	00db      	lsls	r3, r3, #3
 8000c58:	68fa      	ldr	r2, [r7, #12]
 8000c5a:	4413      	add	r3, r2
 8000c5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000c60:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
    twid_im = wwc[iy + 99].re;
 8000c64:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8000c66:	3363      	adds	r3, #99	; 0x63
 8000c68:	011b      	lsls	r3, r3, #4
 8000c6a:	687a      	ldr	r2, [r7, #4]
 8000c6c:	4413      	add	r3, r2
 8000c6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000c72:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
    re_tmp = wwc[iy + 99].im;
 8000c76:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8000c78:	3363      	adds	r3, #99	; 0x63
 8000c7a:	011b      	lsls	r3, r3, #4
 8000c7c:	687a      	ldr	r2, [r7, #4]
 8000c7e:	4413      	add	r3, r2
 8000c80:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8000c84:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    ytmp[iy].re = twid_im * temp_re + re_tmp * temp_im;
 8000c88:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8000c8c:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8000c90:	f7ff fcb2 	bl	80005f8 <__aeabi_dmul>
 8000c94:	4602      	mov	r2, r0
 8000c96:	460b      	mov	r3, r1
 8000c98:	4614      	mov	r4, r2
 8000c9a:	461d      	mov	r5, r3
 8000c9c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8000ca0:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8000ca4:	f7ff fca8 	bl	80005f8 <__aeabi_dmul>
 8000ca8:	4602      	mov	r2, r0
 8000caa:	460b      	mov	r3, r1
 8000cac:	4620      	mov	r0, r4
 8000cae:	4629      	mov	r1, r5
 8000cb0:	f7ff faec 	bl	800028c <__adddf3>
 8000cb4:	4602      	mov	r2, r0
 8000cb6:	460b      	mov	r3, r1
 8000cb8:	4840      	ldr	r0, [pc, #256]	; (8000dbc <c_FFTImplementationCallback_doH+0x214>)
 8000cba:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8000cbc:	0109      	lsls	r1, r1, #4
 8000cbe:	4401      	add	r1, r0
 8000cc0:	e9c1 2300 	strd	r2, r3, [r1]
    ytmp[iy].im = twid_im * temp_im - re_tmp * temp_re;
 8000cc4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8000cc8:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8000ccc:	f7ff fc94 	bl	80005f8 <__aeabi_dmul>
 8000cd0:	4602      	mov	r2, r0
 8000cd2:	460b      	mov	r3, r1
 8000cd4:	4614      	mov	r4, r2
 8000cd6:	461d      	mov	r5, r3
 8000cd8:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8000cdc:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8000ce0:	f7ff fc8a 	bl	80005f8 <__aeabi_dmul>
 8000ce4:	4602      	mov	r2, r0
 8000ce6:	460b      	mov	r3, r1
 8000ce8:	4620      	mov	r0, r4
 8000cea:	4629      	mov	r1, r5
 8000cec:	f7ff facc 	bl	8000288 <__aeabi_dsub>
 8000cf0:	4602      	mov	r2, r0
 8000cf2:	460b      	mov	r3, r1
 8000cf4:	4831      	ldr	r0, [pc, #196]	; (8000dbc <c_FFTImplementationCallback_doH+0x214>)
 8000cf6:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8000cf8:	0109      	lsls	r1, r1, #4
 8000cfa:	4401      	add	r1, r0
 8000cfc:	3108      	adds	r1, #8
 8000cfe:	e9c1 2300 	strd	r2, r3, [r1]
  for (iy = 0; iy < 100; iy++) {
 8000d02:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8000d04:	3301      	adds	r3, #1
 8000d06:	66bb      	str	r3, [r7, #104]	; 0x68
 8000d08:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8000d0a:	2b63      	cmp	r3, #99	; 0x63
 8000d0c:	dd96      	ble.n	8000c3c <c_FFTImplementationCallback_doH+0x94>
  }
#ifdef FFTDEBUG
  HAL_UART_Transmit(&huart1, (uint8_t *) "TPFFT2\n\r", sizeof("TPFFT2\n\r"), 1000);
#endif
  memset(&fy[0], 0, 256U * sizeof(creal_T));
 8000d0e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000d12:	2100      	movs	r1, #0
 8000d14:	482a      	ldr	r0, [pc, #168]	; (8000dc0 <c_FFTImplementationCallback_doH+0x218>)
 8000d16:	f00a fc77 	bl	800b608 <memset>
  iy = 0;
 8000d1a:	2300      	movs	r3, #0
 8000d1c:	66bb      	str	r3, [r7, #104]	; 0x68
  ju = 0;
 8000d1e:	2300      	movs	r3, #0
 8000d20:	663b      	str	r3, [r7, #96]	; 0x60
  for (i = 0; i < 99; i++) {
 8000d22:	2300      	movs	r3, #0
 8000d24:	677b      	str	r3, [r7, #116]	; 0x74
 8000d26:	e02c      	b.n	8000d82 <c_FFTImplementationCallback_doH+0x1da>
    fy[iy] = ytmp[i];
 8000d28:	4a25      	ldr	r2, [pc, #148]	; (8000dc0 <c_FFTImplementationCallback_doH+0x218>)
 8000d2a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8000d2c:	011b      	lsls	r3, r3, #4
 8000d2e:	18d1      	adds	r1, r2, r3
 8000d30:	4a22      	ldr	r2, [pc, #136]	; (8000dbc <c_FFTImplementationCallback_doH+0x214>)
 8000d32:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8000d34:	011b      	lsls	r3, r3, #4
 8000d36:	4413      	add	r3, r2
 8000d38:	460c      	mov	r4, r1
 8000d3a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000d3c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    iy = 256;
 8000d40:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000d44:	66bb      	str	r3, [r7, #104]	; 0x68
    tst = true;
 8000d46:	2301      	movs	r3, #1
 8000d48:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
    while (tst) {
 8000d4c:	e010      	b.n	8000d70 <c_FFTImplementationCallback_doH+0x1c8>
      iy >>= 1;
 8000d4e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8000d50:	105b      	asrs	r3, r3, #1
 8000d52:	66bb      	str	r3, [r7, #104]	; 0x68
      ju ^= iy;
 8000d54:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8000d56:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8000d58:	4053      	eors	r3, r2
 8000d5a:	663b      	str	r3, [r7, #96]	; 0x60
      tst = ((ju & iy) == 0);
 8000d5c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8000d5e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8000d60:	4013      	ands	r3, r2
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	bf0c      	ite	eq
 8000d66:	2301      	moveq	r3, #1
 8000d68:	2300      	movne	r3, #0
 8000d6a:	b2db      	uxtb	r3, r3
 8000d6c:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
    while (tst) {
 8000d70:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 8000d74:	2b00      	cmp	r3, #0
 8000d76:	d1ea      	bne.n	8000d4e <c_FFTImplementationCallback_doH+0x1a6>
    }
    iy = ju;
 8000d78:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8000d7a:	66bb      	str	r3, [r7, #104]	; 0x68
  for (i = 0; i < 99; i++) {
 8000d7c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8000d7e:	3301      	adds	r3, #1
 8000d80:	677b      	str	r3, [r7, #116]	; 0x74
 8000d82:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8000d84:	2b62      	cmp	r3, #98	; 0x62
 8000d86:	ddcf      	ble.n	8000d28 <c_FFTImplementationCallback_doH+0x180>
  }
#ifdef FFTDEBUG
  HAL_UART_Transmit(&huart1, (uint8_t *) "TPFFT3\n\r", sizeof("TPFFT3\n\r"), 1000);
#endif
  fy[iy] = ytmp[99];
 8000d88:	4a0d      	ldr	r2, [pc, #52]	; (8000dc0 <c_FFTImplementationCallback_doH+0x218>)
 8000d8a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8000d8c:	011b      	lsls	r3, r3, #4
 8000d8e:	441a      	add	r2, r3
 8000d90:	4b0a      	ldr	r3, [pc, #40]	; (8000dbc <c_FFTImplementationCallback_doH+0x214>)
 8000d92:	4614      	mov	r4, r2
 8000d94:	f503 63c6 	add.w	r3, r3, #1584	; 0x630
 8000d98:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000d9a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  for (i = 0; i <= 254; i += 2) {
 8000d9e:	2300      	movs	r3, #0
 8000da0:	677b      	str	r3, [r7, #116]	; 0x74
 8000da2:	e072      	b.n	8000e8a <c_FFTImplementationCallback_doH+0x2e2>
 8000da4:	08012be8 	.word	0x08012be8
 8000da8:	20006b88 	.word	0x20006b88
 8000dac:	080133f0 	.word	0x080133f0
 8000db0:	20007388 	.word	0x20007388
 8000db4:	20006f88 	.word	0x20006f88
 8000db8:	20007788 	.word	0x20007788
 8000dbc:	200061b8 	.word	0x200061b8
 8000dc0:	20002278 	.word	0x20002278
    b_temp_re_tmp = fy[i + 1].re;
 8000dc4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8000dc6:	3301      	adds	r3, #1
 8000dc8:	4a7a      	ldr	r2, [pc, #488]	; (8000fb4 <c_FFTImplementationCallback_doH+0x40c>)
 8000dca:	011b      	lsls	r3, r3, #4
 8000dcc:	4413      	add	r3, r2
 8000dce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000dd2:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
    temp_im = fy[i + 1].im;
 8000dd6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8000dd8:	3301      	adds	r3, #1
 8000dda:	4a76      	ldr	r2, [pc, #472]	; (8000fb4 <c_FFTImplementationCallback_doH+0x40c>)
 8000ddc:	011b      	lsls	r3, r3, #4
 8000dde:	4413      	add	r3, r2
 8000de0:	3308      	adds	r3, #8
 8000de2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000de6:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
    re_tmp = fy[i].re;
 8000dea:	4a72      	ldr	r2, [pc, #456]	; (8000fb4 <c_FFTImplementationCallback_doH+0x40c>)
 8000dec:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8000dee:	011b      	lsls	r3, r3, #4
 8000df0:	4413      	add	r3, r2
 8000df2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000df6:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    twid_re = fy[i].im;
 8000dfa:	4a6e      	ldr	r2, [pc, #440]	; (8000fb4 <c_FFTImplementationCallback_doH+0x40c>)
 8000dfc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8000dfe:	011b      	lsls	r3, r3, #4
 8000e00:	4413      	add	r3, r2
 8000e02:	3308      	adds	r3, #8
 8000e04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e08:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
    fy[i + 1].re = re_tmp - b_temp_re_tmp;
 8000e0c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8000e0e:	1c5c      	adds	r4, r3, #1
 8000e10:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8000e14:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8000e18:	f7ff fa36 	bl	8000288 <__aeabi_dsub>
 8000e1c:	4602      	mov	r2, r0
 8000e1e:	460b      	mov	r3, r1
 8000e20:	4864      	ldr	r0, [pc, #400]	; (8000fb4 <c_FFTImplementationCallback_doH+0x40c>)
 8000e22:	0121      	lsls	r1, r4, #4
 8000e24:	4401      	add	r1, r0
 8000e26:	e9c1 2300 	strd	r2, r3, [r1]
    fy[i + 1].im = twid_re - temp_im;
 8000e2a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8000e2c:	1c5c      	adds	r4, r3, #1
 8000e2e:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8000e32:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8000e36:	f7ff fa27 	bl	8000288 <__aeabi_dsub>
 8000e3a:	4602      	mov	r2, r0
 8000e3c:	460b      	mov	r3, r1
 8000e3e:	485d      	ldr	r0, [pc, #372]	; (8000fb4 <c_FFTImplementationCallback_doH+0x40c>)
 8000e40:	0121      	lsls	r1, r4, #4
 8000e42:	4401      	add	r1, r0
 8000e44:	3108      	adds	r1, #8
 8000e46:	e9c1 2300 	strd	r2, r3, [r1]
    fy[i].re = re_tmp + b_temp_re_tmp;
 8000e4a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8000e4e:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8000e52:	f7ff fa1b 	bl	800028c <__adddf3>
 8000e56:	4602      	mov	r2, r0
 8000e58:	460b      	mov	r3, r1
 8000e5a:	4856      	ldr	r0, [pc, #344]	; (8000fb4 <c_FFTImplementationCallback_doH+0x40c>)
 8000e5c:	6f79      	ldr	r1, [r7, #116]	; 0x74
 8000e5e:	0109      	lsls	r1, r1, #4
 8000e60:	4401      	add	r1, r0
 8000e62:	e9c1 2300 	strd	r2, r3, [r1]
    fy[i].im = twid_re + temp_im;
 8000e66:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8000e6a:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8000e6e:	f7ff fa0d 	bl	800028c <__adddf3>
 8000e72:	4602      	mov	r2, r0
 8000e74:	460b      	mov	r3, r1
 8000e76:	484f      	ldr	r0, [pc, #316]	; (8000fb4 <c_FFTImplementationCallback_doH+0x40c>)
 8000e78:	6f79      	ldr	r1, [r7, #116]	; 0x74
 8000e7a:	0109      	lsls	r1, r1, #4
 8000e7c:	4401      	add	r1, r0
 8000e7e:	3108      	adds	r1, #8
 8000e80:	e9c1 2300 	strd	r2, r3, [r1]
  for (i = 0; i <= 254; i += 2) {
 8000e84:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8000e86:	3302      	adds	r3, #2
 8000e88:	677b      	str	r3, [r7, #116]	; 0x74
 8000e8a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8000e8c:	2bfe      	cmp	r3, #254	; 0xfe
 8000e8e:	dd99      	ble.n	8000dc4 <c_FFTImplementationCallback_doH+0x21c>
  }
#ifdef FFTDEBUG
  HAL_UART_Transmit(&huart1, (uint8_t *) "TPFFT4\n\r", sizeof("TPFFT4\n\r"), 1000);
#endif
  iy = 2;
 8000e90:	2302      	movs	r3, #2
 8000e92:	66bb      	str	r3, [r7, #104]	; 0x68
  ju = 4;
 8000e94:	2304      	movs	r3, #4
 8000e96:	663b      	str	r3, [r7, #96]	; 0x60
  k = 64;
 8000e98:	2340      	movs	r3, #64	; 0x40
 8000e9a:	65fb      	str	r3, [r7, #92]	; 0x5c
  iheight = 253;
 8000e9c:	23fd      	movs	r3, #253	; 0xfd
 8000e9e:	673b      	str	r3, [r7, #112]	; 0x70
  while (k > 0) {
 8000ea0:	e145      	b.n	800112e <c_FFTImplementationCallback_doH+0x586>
    for (i = 0; i < iheight; i += ju) {
 8000ea2:	2300      	movs	r3, #0
 8000ea4:	677b      	str	r3, [r7, #116]	; 0x74
 8000ea6:	e064      	b.n	8000f72 <c_FFTImplementationCallback_doH+0x3ca>
      temp_re_tmp = i + iy;
 8000ea8:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8000eaa:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8000eac:	4413      	add	r3, r2
 8000eae:	613b      	str	r3, [r7, #16]
      temp_re = fy[temp_re_tmp].re;
 8000eb0:	4a40      	ldr	r2, [pc, #256]	; (8000fb4 <c_FFTImplementationCallback_doH+0x40c>)
 8000eb2:	693b      	ldr	r3, [r7, #16]
 8000eb4:	011b      	lsls	r3, r3, #4
 8000eb6:	4413      	add	r3, r2
 8000eb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ebc:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
      temp_im = fy[temp_re_tmp].im;
 8000ec0:	4a3c      	ldr	r2, [pc, #240]	; (8000fb4 <c_FFTImplementationCallback_doH+0x40c>)
 8000ec2:	693b      	ldr	r3, [r7, #16]
 8000ec4:	011b      	lsls	r3, r3, #4
 8000ec6:	4413      	add	r3, r2
 8000ec8:	3308      	adds	r3, #8
 8000eca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ece:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
      fy[temp_re_tmp].re = fy[i].re - temp_re;
 8000ed2:	4a38      	ldr	r2, [pc, #224]	; (8000fb4 <c_FFTImplementationCallback_doH+0x40c>)
 8000ed4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8000ed6:	011b      	lsls	r3, r3, #4
 8000ed8:	4413      	add	r3, r2
 8000eda:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000ede:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8000ee2:	f7ff f9d1 	bl	8000288 <__aeabi_dsub>
 8000ee6:	4602      	mov	r2, r0
 8000ee8:	460b      	mov	r3, r1
 8000eea:	4832      	ldr	r0, [pc, #200]	; (8000fb4 <c_FFTImplementationCallback_doH+0x40c>)
 8000eec:	6939      	ldr	r1, [r7, #16]
 8000eee:	0109      	lsls	r1, r1, #4
 8000ef0:	4401      	add	r1, r0
 8000ef2:	e9c1 2300 	strd	r2, r3, [r1]
      fy[temp_re_tmp].im = fy[i].im - temp_im;
 8000ef6:	4a2f      	ldr	r2, [pc, #188]	; (8000fb4 <c_FFTImplementationCallback_doH+0x40c>)
 8000ef8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8000efa:	011b      	lsls	r3, r3, #4
 8000efc:	4413      	add	r3, r2
 8000efe:	3308      	adds	r3, #8
 8000f00:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000f04:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8000f08:	f7ff f9be 	bl	8000288 <__aeabi_dsub>
 8000f0c:	4602      	mov	r2, r0
 8000f0e:	460b      	mov	r3, r1
 8000f10:	4828      	ldr	r0, [pc, #160]	; (8000fb4 <c_FFTImplementationCallback_doH+0x40c>)
 8000f12:	6939      	ldr	r1, [r7, #16]
 8000f14:	0109      	lsls	r1, r1, #4
 8000f16:	4401      	add	r1, r0
 8000f18:	3108      	adds	r1, #8
 8000f1a:	e9c1 2300 	strd	r2, r3, [r1]
      fy[i].re += temp_re;
 8000f1e:	4a25      	ldr	r2, [pc, #148]	; (8000fb4 <c_FFTImplementationCallback_doH+0x40c>)
 8000f20:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8000f22:	011b      	lsls	r3, r3, #4
 8000f24:	4413      	add	r3, r2
 8000f26:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000f2a:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8000f2e:	f7ff f9ad 	bl	800028c <__adddf3>
 8000f32:	4602      	mov	r2, r0
 8000f34:	460b      	mov	r3, r1
 8000f36:	481f      	ldr	r0, [pc, #124]	; (8000fb4 <c_FFTImplementationCallback_doH+0x40c>)
 8000f38:	6f79      	ldr	r1, [r7, #116]	; 0x74
 8000f3a:	0109      	lsls	r1, r1, #4
 8000f3c:	4401      	add	r1, r0
 8000f3e:	e9c1 2300 	strd	r2, r3, [r1]
      fy[i].im += temp_im;
 8000f42:	4a1c      	ldr	r2, [pc, #112]	; (8000fb4 <c_FFTImplementationCallback_doH+0x40c>)
 8000f44:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8000f46:	011b      	lsls	r3, r3, #4
 8000f48:	4413      	add	r3, r2
 8000f4a:	3308      	adds	r3, #8
 8000f4c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000f50:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8000f54:	f7ff f99a 	bl	800028c <__adddf3>
 8000f58:	4602      	mov	r2, r0
 8000f5a:	460b      	mov	r3, r1
 8000f5c:	4815      	ldr	r0, [pc, #84]	; (8000fb4 <c_FFTImplementationCallback_doH+0x40c>)
 8000f5e:	6f79      	ldr	r1, [r7, #116]	; 0x74
 8000f60:	0109      	lsls	r1, r1, #4
 8000f62:	4401      	add	r1, r0
 8000f64:	3108      	adds	r1, #8
 8000f66:	e9c1 2300 	strd	r2, r3, [r1]
    for (i = 0; i < iheight; i += ju) {
 8000f6a:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8000f6c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8000f6e:	4413      	add	r3, r2
 8000f70:	677b      	str	r3, [r7, #116]	; 0x74
 8000f72:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8000f74:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8000f76:	429a      	cmp	r2, r3
 8000f78:	db96      	blt.n	8000ea8 <c_FFTImplementationCallback_doH+0x300>
    }
    istart = 1;
 8000f7a:	2301      	movs	r3, #1
 8000f7c:	66fb      	str	r3, [r7, #108]	; 0x6c
    for (j = k; j < 128; j += k) {
 8000f7e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000f80:	667b      	str	r3, [r7, #100]	; 0x64
 8000f82:	e0c2      	b.n	800110a <c_FFTImplementationCallback_doH+0x562>
      twid_re = hcostab[j];
 8000f84:	4a0c      	ldr	r2, [pc, #48]	; (8000fb8 <c_FFTImplementationCallback_doH+0x410>)
 8000f86:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000f88:	00db      	lsls	r3, r3, #3
 8000f8a:	4413      	add	r3, r2
 8000f8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f90:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
      twid_im = hsintab[j];
 8000f94:	4a09      	ldr	r2, [pc, #36]	; (8000fbc <c_FFTImplementationCallback_doH+0x414>)
 8000f96:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000f98:	00db      	lsls	r3, r3, #3
 8000f9a:	4413      	add	r3, r2
 8000f9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fa0:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
      i = istart;
 8000fa4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000fa6:	677b      	str	r3, [r7, #116]	; 0x74
      ihi = istart + iheight;
 8000fa8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8000faa:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8000fac:	4413      	add	r3, r2
 8000fae:	617b      	str	r3, [r7, #20]
      while (i < ihi) {
 8000fb0:	e09f      	b.n	80010f2 <c_FFTImplementationCallback_doH+0x54a>
 8000fb2:	bf00      	nop
 8000fb4:	20002278 	.word	0x20002278
 8000fb8:	20006b88 	.word	0x20006b88
 8000fbc:	20007388 	.word	0x20007388
        temp_re_tmp = i + iy;
 8000fc0:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8000fc2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8000fc4:	4413      	add	r3, r2
 8000fc6:	613b      	str	r3, [r7, #16]
        b_temp_re_tmp = fy[temp_re_tmp].im;
 8000fc8:	4a81      	ldr	r2, [pc, #516]	; (80011d0 <c_FFTImplementationCallback_doH+0x628>)
 8000fca:	693b      	ldr	r3, [r7, #16]
 8000fcc:	011b      	lsls	r3, r3, #4
 8000fce:	4413      	add	r3, r2
 8000fd0:	3308      	adds	r3, #8
 8000fd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fd6:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
        temp_im = fy[temp_re_tmp].re;
 8000fda:	4a7d      	ldr	r2, [pc, #500]	; (80011d0 <c_FFTImplementationCallback_doH+0x628>)
 8000fdc:	693b      	ldr	r3, [r7, #16]
 8000fde:	011b      	lsls	r3, r3, #4
 8000fe0:	4413      	add	r3, r2
 8000fe2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fe6:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
        temp_re = twid_re * temp_im - twid_im * b_temp_re_tmp;
 8000fea:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8000fee:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8000ff2:	f7ff fb01 	bl	80005f8 <__aeabi_dmul>
 8000ff6:	4602      	mov	r2, r0
 8000ff8:	460b      	mov	r3, r1
 8000ffa:	4614      	mov	r4, r2
 8000ffc:	461d      	mov	r5, r3
 8000ffe:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001002:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8001006:	f7ff faf7 	bl	80005f8 <__aeabi_dmul>
 800100a:	4602      	mov	r2, r0
 800100c:	460b      	mov	r3, r1
 800100e:	4620      	mov	r0, r4
 8001010:	4629      	mov	r1, r5
 8001012:	f7ff f939 	bl	8000288 <__aeabi_dsub>
 8001016:	4602      	mov	r2, r0
 8001018:	460b      	mov	r3, r1
 800101a:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
        temp_im = twid_re * b_temp_re_tmp + twid_im * temp_im;
 800101e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001022:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8001026:	f7ff fae7 	bl	80005f8 <__aeabi_dmul>
 800102a:	4602      	mov	r2, r0
 800102c:	460b      	mov	r3, r1
 800102e:	4614      	mov	r4, r2
 8001030:	461d      	mov	r5, r3
 8001032:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8001036:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 800103a:	f7ff fadd 	bl	80005f8 <__aeabi_dmul>
 800103e:	4602      	mov	r2, r0
 8001040:	460b      	mov	r3, r1
 8001042:	4620      	mov	r0, r4
 8001044:	4629      	mov	r1, r5
 8001046:	f7ff f921 	bl	800028c <__adddf3>
 800104a:	4602      	mov	r2, r0
 800104c:	460b      	mov	r3, r1
 800104e:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
        fy[temp_re_tmp].re = fy[i].re - temp_re;
 8001052:	4a5f      	ldr	r2, [pc, #380]	; (80011d0 <c_FFTImplementationCallback_doH+0x628>)
 8001054:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001056:	011b      	lsls	r3, r3, #4
 8001058:	4413      	add	r3, r2
 800105a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800105e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8001062:	f7ff f911 	bl	8000288 <__aeabi_dsub>
 8001066:	4602      	mov	r2, r0
 8001068:	460b      	mov	r3, r1
 800106a:	4859      	ldr	r0, [pc, #356]	; (80011d0 <c_FFTImplementationCallback_doH+0x628>)
 800106c:	6939      	ldr	r1, [r7, #16]
 800106e:	0109      	lsls	r1, r1, #4
 8001070:	4401      	add	r1, r0
 8001072:	e9c1 2300 	strd	r2, r3, [r1]
        fy[temp_re_tmp].im = fy[i].im - temp_im;
 8001076:	4a56      	ldr	r2, [pc, #344]	; (80011d0 <c_FFTImplementationCallback_doH+0x628>)
 8001078:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800107a:	011b      	lsls	r3, r3, #4
 800107c:	4413      	add	r3, r2
 800107e:	3308      	adds	r3, #8
 8001080:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001084:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8001088:	f7ff f8fe 	bl	8000288 <__aeabi_dsub>
 800108c:	4602      	mov	r2, r0
 800108e:	460b      	mov	r3, r1
 8001090:	484f      	ldr	r0, [pc, #316]	; (80011d0 <c_FFTImplementationCallback_doH+0x628>)
 8001092:	6939      	ldr	r1, [r7, #16]
 8001094:	0109      	lsls	r1, r1, #4
 8001096:	4401      	add	r1, r0
 8001098:	3108      	adds	r1, #8
 800109a:	e9c1 2300 	strd	r2, r3, [r1]
        fy[i].re += temp_re;
 800109e:	4a4c      	ldr	r2, [pc, #304]	; (80011d0 <c_FFTImplementationCallback_doH+0x628>)
 80010a0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80010a2:	011b      	lsls	r3, r3, #4
 80010a4:	4413      	add	r3, r2
 80010a6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80010aa:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80010ae:	f7ff f8ed 	bl	800028c <__adddf3>
 80010b2:	4602      	mov	r2, r0
 80010b4:	460b      	mov	r3, r1
 80010b6:	4846      	ldr	r0, [pc, #280]	; (80011d0 <c_FFTImplementationCallback_doH+0x628>)
 80010b8:	6f79      	ldr	r1, [r7, #116]	; 0x74
 80010ba:	0109      	lsls	r1, r1, #4
 80010bc:	4401      	add	r1, r0
 80010be:	e9c1 2300 	strd	r2, r3, [r1]
        fy[i].im += temp_im;
 80010c2:	4a43      	ldr	r2, [pc, #268]	; (80011d0 <c_FFTImplementationCallback_doH+0x628>)
 80010c4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80010c6:	011b      	lsls	r3, r3, #4
 80010c8:	4413      	add	r3, r2
 80010ca:	3308      	adds	r3, #8
 80010cc:	e9d3 0100 	ldrd	r0, r1, [r3]
 80010d0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80010d4:	f7ff f8da 	bl	800028c <__adddf3>
 80010d8:	4602      	mov	r2, r0
 80010da:	460b      	mov	r3, r1
 80010dc:	483c      	ldr	r0, [pc, #240]	; (80011d0 <c_FFTImplementationCallback_doH+0x628>)
 80010de:	6f79      	ldr	r1, [r7, #116]	; 0x74
 80010e0:	0109      	lsls	r1, r1, #4
 80010e2:	4401      	add	r1, r0
 80010e4:	3108      	adds	r1, #8
 80010e6:	e9c1 2300 	strd	r2, r3, [r1]
        i += ju;
 80010ea:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80010ec:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80010ee:	4413      	add	r3, r2
 80010f0:	677b      	str	r3, [r7, #116]	; 0x74
      while (i < ihi) {
 80010f2:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80010f4:	697b      	ldr	r3, [r7, #20]
 80010f6:	429a      	cmp	r2, r3
 80010f8:	f6ff af62 	blt.w	8000fc0 <c_FFTImplementationCallback_doH+0x418>
      }
      istart++;
 80010fc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80010fe:	3301      	adds	r3, #1
 8001100:	66fb      	str	r3, [r7, #108]	; 0x6c
    for (j = k; j < 128; j += k) {
 8001102:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8001104:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001106:	4413      	add	r3, r2
 8001108:	667b      	str	r3, [r7, #100]	; 0x64
 800110a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800110c:	2b7f      	cmp	r3, #127	; 0x7f
 800110e:	f77f af39 	ble.w	8000f84 <c_FFTImplementationCallback_doH+0x3dc>
    }
    k /= 2;
 8001112:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001114:	0fda      	lsrs	r2, r3, #31
 8001116:	4413      	add	r3, r2
 8001118:	105b      	asrs	r3, r3, #1
 800111a:	65fb      	str	r3, [r7, #92]	; 0x5c
    iy = ju;
 800111c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800111e:	66bb      	str	r3, [r7, #104]	; 0x68
    ju += ju;
 8001120:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001122:	005b      	lsls	r3, r3, #1
 8001124:	663b      	str	r3, [r7, #96]	; 0x60
    iheight -= iy;
 8001126:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8001128:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800112a:	1ad3      	subs	r3, r2, r3
 800112c:	673b      	str	r3, [r7, #112]	; 0x70
  while (k > 0) {
 800112e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001130:	2b00      	cmp	r3, #0
 8001132:	f73f aeb6 	bgt.w	8000ea2 <c_FFTImplementationCallback_doH+0x2fa>
  }
#ifdef FFTDEBUG
  HAL_UART_Transmit(&huart1, (uint8_t *) "TPFFT5\n\r", sizeof("TPFFT5\n\r"), 1000);
#endif
  memset(&fv[0], 0, 256U * sizeof(creal_T));
 8001136:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800113a:	2100      	movs	r1, #0
 800113c:	4825      	ldr	r0, [pc, #148]	; (80011d4 <c_FFTImplementationCallback_doH+0x62c>)
 800113e:	f00a fa63 	bl	800b608 <memset>
  iy = 0;
 8001142:	2300      	movs	r3, #0
 8001144:	66bb      	str	r3, [r7, #104]	; 0x68
  ju = 0;
 8001146:	2300      	movs	r3, #0
 8001148:	663b      	str	r3, [r7, #96]	; 0x60
  for (i = 0; i < 198; i++) {
 800114a:	2300      	movs	r3, #0
 800114c:	677b      	str	r3, [r7, #116]	; 0x74
 800114e:	e02d      	b.n	80011ac <c_FFTImplementationCallback_doH+0x604>
    fv[iy] = wwc[i];
 8001150:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001152:	011b      	lsls	r3, r3, #4
 8001154:	687a      	ldr	r2, [r7, #4]
 8001156:	18d1      	adds	r1, r2, r3
 8001158:	4a1e      	ldr	r2, [pc, #120]	; (80011d4 <c_FFTImplementationCallback_doH+0x62c>)
 800115a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800115c:	011b      	lsls	r3, r3, #4
 800115e:	4413      	add	r3, r2
 8001160:	461c      	mov	r4, r3
 8001162:	460b      	mov	r3, r1
 8001164:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001166:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    iy = 256;
 800116a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800116e:	66bb      	str	r3, [r7, #104]	; 0x68
    tst = true;
 8001170:	2301      	movs	r3, #1
 8001172:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
    while (tst) {
 8001176:	e010      	b.n	800119a <c_FFTImplementationCallback_doH+0x5f2>
      iy >>= 1;
 8001178:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800117a:	105b      	asrs	r3, r3, #1
 800117c:	66bb      	str	r3, [r7, #104]	; 0x68
      ju ^= iy;
 800117e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001180:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001182:	4053      	eors	r3, r2
 8001184:	663b      	str	r3, [r7, #96]	; 0x60
      tst = ((ju & iy) == 0);
 8001186:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001188:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800118a:	4013      	ands	r3, r2
 800118c:	2b00      	cmp	r3, #0
 800118e:	bf0c      	ite	eq
 8001190:	2301      	moveq	r3, #1
 8001192:	2300      	movne	r3, #0
 8001194:	b2db      	uxtb	r3, r3
 8001196:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
    while (tst) {
 800119a:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d1ea      	bne.n	8001178 <c_FFTImplementationCallback_doH+0x5d0>
    }
    iy = ju;
 80011a2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80011a4:	66bb      	str	r3, [r7, #104]	; 0x68
  for (i = 0; i < 198; i++) {
 80011a6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80011a8:	3301      	adds	r3, #1
 80011aa:	677b      	str	r3, [r7, #116]	; 0x74
 80011ac:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80011ae:	2bc5      	cmp	r3, #197	; 0xc5
 80011b0:	ddce      	ble.n	8001150 <c_FFTImplementationCallback_doH+0x5a8>
  }
#ifdef FFTDEBUG
  HAL_UART_Transmit(&huart1, (uint8_t *) "TPFFT6\n\r", sizeof("TPFFT6\n\r"), 1000);
#endif
  fv[iy] = wwc[198];
 80011b2:	4a08      	ldr	r2, [pc, #32]	; (80011d4 <c_FFTImplementationCallback_doH+0x62c>)
 80011b4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80011b6:	011b      	lsls	r3, r3, #4
 80011b8:	441a      	add	r2, r3
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	4614      	mov	r4, r2
 80011be:	f503 6346 	add.w	r3, r3, #3168	; 0xc60
 80011c2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80011c4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  for (i = 0; i <= 254; i += 2) {
 80011c8:	2300      	movs	r3, #0
 80011ca:	677b      	str	r3, [r7, #116]	; 0x74
 80011cc:	e067      	b.n	800129e <c_FFTImplementationCallback_doH+0x6f6>
 80011ce:	bf00      	nop
 80011d0:	20002278 	.word	0x20002278
 80011d4:	20000278 	.word	0x20000278
    b_temp_re_tmp = fv[i + 1].re;
 80011d8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80011da:	3301      	adds	r3, #1
 80011dc:	4a7a      	ldr	r2, [pc, #488]	; (80013c8 <c_FFTImplementationCallback_doH+0x820>)
 80011de:	011b      	lsls	r3, r3, #4
 80011e0:	4413      	add	r3, r2
 80011e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011e6:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
    temp_im = fv[i + 1].im;
 80011ea:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80011ec:	3301      	adds	r3, #1
 80011ee:	4a76      	ldr	r2, [pc, #472]	; (80013c8 <c_FFTImplementationCallback_doH+0x820>)
 80011f0:	011b      	lsls	r3, r3, #4
 80011f2:	4413      	add	r3, r2
 80011f4:	3308      	adds	r3, #8
 80011f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011fa:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
    re_tmp = fv[i].re;
 80011fe:	4a72      	ldr	r2, [pc, #456]	; (80013c8 <c_FFTImplementationCallback_doH+0x820>)
 8001200:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001202:	011b      	lsls	r3, r3, #4
 8001204:	4413      	add	r3, r2
 8001206:	e9d3 2300 	ldrd	r2, r3, [r3]
 800120a:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    twid_re = fv[i].im;
 800120e:	4a6e      	ldr	r2, [pc, #440]	; (80013c8 <c_FFTImplementationCallback_doH+0x820>)
 8001210:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001212:	011b      	lsls	r3, r3, #4
 8001214:	4413      	add	r3, r2
 8001216:	3308      	adds	r3, #8
 8001218:	e9d3 2300 	ldrd	r2, r3, [r3]
 800121c:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
    fv[i + 1].re = re_tmp - b_temp_re_tmp;
 8001220:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001222:	1c5c      	adds	r4, r3, #1
 8001224:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001228:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 800122c:	f7ff f82c 	bl	8000288 <__aeabi_dsub>
 8001230:	4602      	mov	r2, r0
 8001232:	460b      	mov	r3, r1
 8001234:	4864      	ldr	r0, [pc, #400]	; (80013c8 <c_FFTImplementationCallback_doH+0x820>)
 8001236:	0121      	lsls	r1, r4, #4
 8001238:	4401      	add	r1, r0
 800123a:	e9c1 2300 	strd	r2, r3, [r1]
    fv[i + 1].im = twid_re - temp_im;
 800123e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001240:	1c5c      	adds	r4, r3, #1
 8001242:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8001246:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800124a:	f7ff f81d 	bl	8000288 <__aeabi_dsub>
 800124e:	4602      	mov	r2, r0
 8001250:	460b      	mov	r3, r1
 8001252:	485d      	ldr	r0, [pc, #372]	; (80013c8 <c_FFTImplementationCallback_doH+0x820>)
 8001254:	0121      	lsls	r1, r4, #4
 8001256:	4401      	add	r1, r0
 8001258:	3108      	adds	r1, #8
 800125a:	e9c1 2300 	strd	r2, r3, [r1]
    fv[i].re = re_tmp + b_temp_re_tmp;
 800125e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001262:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8001266:	f7ff f811 	bl	800028c <__adddf3>
 800126a:	4602      	mov	r2, r0
 800126c:	460b      	mov	r3, r1
 800126e:	4856      	ldr	r0, [pc, #344]	; (80013c8 <c_FFTImplementationCallback_doH+0x820>)
 8001270:	6f79      	ldr	r1, [r7, #116]	; 0x74
 8001272:	0109      	lsls	r1, r1, #4
 8001274:	4401      	add	r1, r0
 8001276:	e9c1 2300 	strd	r2, r3, [r1]
    fv[i].im = twid_re + temp_im;
 800127a:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800127e:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8001282:	f7ff f803 	bl	800028c <__adddf3>
 8001286:	4602      	mov	r2, r0
 8001288:	460b      	mov	r3, r1
 800128a:	484f      	ldr	r0, [pc, #316]	; (80013c8 <c_FFTImplementationCallback_doH+0x820>)
 800128c:	6f79      	ldr	r1, [r7, #116]	; 0x74
 800128e:	0109      	lsls	r1, r1, #4
 8001290:	4401      	add	r1, r0
 8001292:	3108      	adds	r1, #8
 8001294:	e9c1 2300 	strd	r2, r3, [r1]
  for (i = 0; i <= 254; i += 2) {
 8001298:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800129a:	3302      	adds	r3, #2
 800129c:	677b      	str	r3, [r7, #116]	; 0x74
 800129e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80012a0:	2bfe      	cmp	r3, #254	; 0xfe
 80012a2:	dd99      	ble.n	80011d8 <c_FFTImplementationCallback_doH+0x630>
  }
#ifdef FFTDEBUG
  HAL_UART_Transmit(&huart1, (uint8_t *) "TPFFT7\n\r", sizeof("TPFFT7\n\r"), 1000);
#endif
  iy = 2;
 80012a4:	2302      	movs	r3, #2
 80012a6:	66bb      	str	r3, [r7, #104]	; 0x68
  ju = 4;
 80012a8:	2304      	movs	r3, #4
 80012aa:	663b      	str	r3, [r7, #96]	; 0x60
  k = 64;
 80012ac:	2340      	movs	r3, #64	; 0x40
 80012ae:	65fb      	str	r3, [r7, #92]	; 0x5c
  iheight = 253;
 80012b0:	23fd      	movs	r3, #253	; 0xfd
 80012b2:	673b      	str	r3, [r7, #112]	; 0x70
  while (k > 0) {
 80012b4:	e145      	b.n	8001542 <c_FFTImplementationCallback_doH+0x99a>
    for (i = 0; i < iheight; i += ju) {
 80012b6:	2300      	movs	r3, #0
 80012b8:	677b      	str	r3, [r7, #116]	; 0x74
 80012ba:	e064      	b.n	8001386 <c_FFTImplementationCallback_doH+0x7de>
      temp_re_tmp = i + iy;
 80012bc:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80012be:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80012c0:	4413      	add	r3, r2
 80012c2:	613b      	str	r3, [r7, #16]
      temp_re = fv[temp_re_tmp].re;
 80012c4:	4a40      	ldr	r2, [pc, #256]	; (80013c8 <c_FFTImplementationCallback_doH+0x820>)
 80012c6:	693b      	ldr	r3, [r7, #16]
 80012c8:	011b      	lsls	r3, r3, #4
 80012ca:	4413      	add	r3, r2
 80012cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012d0:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
      temp_im = fv[temp_re_tmp].im;
 80012d4:	4a3c      	ldr	r2, [pc, #240]	; (80013c8 <c_FFTImplementationCallback_doH+0x820>)
 80012d6:	693b      	ldr	r3, [r7, #16]
 80012d8:	011b      	lsls	r3, r3, #4
 80012da:	4413      	add	r3, r2
 80012dc:	3308      	adds	r3, #8
 80012de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012e2:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
      fv[temp_re_tmp].re = fv[i].re - temp_re;
 80012e6:	4a38      	ldr	r2, [pc, #224]	; (80013c8 <c_FFTImplementationCallback_doH+0x820>)
 80012e8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80012ea:	011b      	lsls	r3, r3, #4
 80012ec:	4413      	add	r3, r2
 80012ee:	e9d3 0100 	ldrd	r0, r1, [r3]
 80012f2:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80012f6:	f7fe ffc7 	bl	8000288 <__aeabi_dsub>
 80012fa:	4602      	mov	r2, r0
 80012fc:	460b      	mov	r3, r1
 80012fe:	4832      	ldr	r0, [pc, #200]	; (80013c8 <c_FFTImplementationCallback_doH+0x820>)
 8001300:	6939      	ldr	r1, [r7, #16]
 8001302:	0109      	lsls	r1, r1, #4
 8001304:	4401      	add	r1, r0
 8001306:	e9c1 2300 	strd	r2, r3, [r1]
      fv[temp_re_tmp].im = fv[i].im - temp_im;
 800130a:	4a2f      	ldr	r2, [pc, #188]	; (80013c8 <c_FFTImplementationCallback_doH+0x820>)
 800130c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800130e:	011b      	lsls	r3, r3, #4
 8001310:	4413      	add	r3, r2
 8001312:	3308      	adds	r3, #8
 8001314:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001318:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800131c:	f7fe ffb4 	bl	8000288 <__aeabi_dsub>
 8001320:	4602      	mov	r2, r0
 8001322:	460b      	mov	r3, r1
 8001324:	4828      	ldr	r0, [pc, #160]	; (80013c8 <c_FFTImplementationCallback_doH+0x820>)
 8001326:	6939      	ldr	r1, [r7, #16]
 8001328:	0109      	lsls	r1, r1, #4
 800132a:	4401      	add	r1, r0
 800132c:	3108      	adds	r1, #8
 800132e:	e9c1 2300 	strd	r2, r3, [r1]
      fv[i].re += temp_re;
 8001332:	4a25      	ldr	r2, [pc, #148]	; (80013c8 <c_FFTImplementationCallback_doH+0x820>)
 8001334:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001336:	011b      	lsls	r3, r3, #4
 8001338:	4413      	add	r3, r2
 800133a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800133e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8001342:	f7fe ffa3 	bl	800028c <__adddf3>
 8001346:	4602      	mov	r2, r0
 8001348:	460b      	mov	r3, r1
 800134a:	481f      	ldr	r0, [pc, #124]	; (80013c8 <c_FFTImplementationCallback_doH+0x820>)
 800134c:	6f79      	ldr	r1, [r7, #116]	; 0x74
 800134e:	0109      	lsls	r1, r1, #4
 8001350:	4401      	add	r1, r0
 8001352:	e9c1 2300 	strd	r2, r3, [r1]
      fv[i].im += temp_im;
 8001356:	4a1c      	ldr	r2, [pc, #112]	; (80013c8 <c_FFTImplementationCallback_doH+0x820>)
 8001358:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800135a:	011b      	lsls	r3, r3, #4
 800135c:	4413      	add	r3, r2
 800135e:	3308      	adds	r3, #8
 8001360:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001364:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8001368:	f7fe ff90 	bl	800028c <__adddf3>
 800136c:	4602      	mov	r2, r0
 800136e:	460b      	mov	r3, r1
 8001370:	4815      	ldr	r0, [pc, #84]	; (80013c8 <c_FFTImplementationCallback_doH+0x820>)
 8001372:	6f79      	ldr	r1, [r7, #116]	; 0x74
 8001374:	0109      	lsls	r1, r1, #4
 8001376:	4401      	add	r1, r0
 8001378:	3108      	adds	r1, #8
 800137a:	e9c1 2300 	strd	r2, r3, [r1]
    for (i = 0; i < iheight; i += ju) {
 800137e:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8001380:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001382:	4413      	add	r3, r2
 8001384:	677b      	str	r3, [r7, #116]	; 0x74
 8001386:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8001388:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800138a:	429a      	cmp	r2, r3
 800138c:	db96      	blt.n	80012bc <c_FFTImplementationCallback_doH+0x714>
    }
    istart = 1;
 800138e:	2301      	movs	r3, #1
 8001390:	66fb      	str	r3, [r7, #108]	; 0x6c
    for (j = k; j < 128; j += k) {
 8001392:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001394:	667b      	str	r3, [r7, #100]	; 0x64
 8001396:	e0c2      	b.n	800151e <c_FFTImplementationCallback_doH+0x976>
      twid_re = hcostab[j];
 8001398:	4a0c      	ldr	r2, [pc, #48]	; (80013cc <c_FFTImplementationCallback_doH+0x824>)
 800139a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800139c:	00db      	lsls	r3, r3, #3
 800139e:	4413      	add	r3, r2
 80013a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013a4:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
      twid_im = hsintab[j];
 80013a8:	4a09      	ldr	r2, [pc, #36]	; (80013d0 <c_FFTImplementationCallback_doH+0x828>)
 80013aa:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80013ac:	00db      	lsls	r3, r3, #3
 80013ae:	4413      	add	r3, r2
 80013b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013b4:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
      i = istart;
 80013b8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80013ba:	677b      	str	r3, [r7, #116]	; 0x74
      ihi = istart + iheight;
 80013bc:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80013be:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80013c0:	4413      	add	r3, r2
 80013c2:	617b      	str	r3, [r7, #20]
      while (i < ihi) {
 80013c4:	e09f      	b.n	8001506 <c_FFTImplementationCallback_doH+0x95e>
 80013c6:	bf00      	nop
 80013c8:	20000278 	.word	0x20000278
 80013cc:	20006b88 	.word	0x20006b88
 80013d0:	20007388 	.word	0x20007388
        temp_re_tmp = i + iy;
 80013d4:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80013d6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80013d8:	4413      	add	r3, r2
 80013da:	613b      	str	r3, [r7, #16]
        b_temp_re_tmp = fv[temp_re_tmp].im;
 80013dc:	4a9c      	ldr	r2, [pc, #624]	; (8001650 <c_FFTImplementationCallback_doH+0xaa8>)
 80013de:	693b      	ldr	r3, [r7, #16]
 80013e0:	011b      	lsls	r3, r3, #4
 80013e2:	4413      	add	r3, r2
 80013e4:	3308      	adds	r3, #8
 80013e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013ea:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
        temp_im = fv[temp_re_tmp].re;
 80013ee:	4a98      	ldr	r2, [pc, #608]	; (8001650 <c_FFTImplementationCallback_doH+0xaa8>)
 80013f0:	693b      	ldr	r3, [r7, #16]
 80013f2:	011b      	lsls	r3, r3, #4
 80013f4:	4413      	add	r3, r2
 80013f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013fa:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
        temp_re = twid_re * temp_im - twid_im * b_temp_re_tmp;
 80013fe:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8001402:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8001406:	f7ff f8f7 	bl	80005f8 <__aeabi_dmul>
 800140a:	4602      	mov	r2, r0
 800140c:	460b      	mov	r3, r1
 800140e:	4614      	mov	r4, r2
 8001410:	461d      	mov	r5, r3
 8001412:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001416:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 800141a:	f7ff f8ed 	bl	80005f8 <__aeabi_dmul>
 800141e:	4602      	mov	r2, r0
 8001420:	460b      	mov	r3, r1
 8001422:	4620      	mov	r0, r4
 8001424:	4629      	mov	r1, r5
 8001426:	f7fe ff2f 	bl	8000288 <__aeabi_dsub>
 800142a:	4602      	mov	r2, r0
 800142c:	460b      	mov	r3, r1
 800142e:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
        temp_im = twid_re * b_temp_re_tmp + twid_im * temp_im;
 8001432:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001436:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800143a:	f7ff f8dd 	bl	80005f8 <__aeabi_dmul>
 800143e:	4602      	mov	r2, r0
 8001440:	460b      	mov	r3, r1
 8001442:	4614      	mov	r4, r2
 8001444:	461d      	mov	r5, r3
 8001446:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800144a:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 800144e:	f7ff f8d3 	bl	80005f8 <__aeabi_dmul>
 8001452:	4602      	mov	r2, r0
 8001454:	460b      	mov	r3, r1
 8001456:	4620      	mov	r0, r4
 8001458:	4629      	mov	r1, r5
 800145a:	f7fe ff17 	bl	800028c <__adddf3>
 800145e:	4602      	mov	r2, r0
 8001460:	460b      	mov	r3, r1
 8001462:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
        fv[temp_re_tmp].re = fv[i].re - temp_re;
 8001466:	4a7a      	ldr	r2, [pc, #488]	; (8001650 <c_FFTImplementationCallback_doH+0xaa8>)
 8001468:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800146a:	011b      	lsls	r3, r3, #4
 800146c:	4413      	add	r3, r2
 800146e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001472:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8001476:	f7fe ff07 	bl	8000288 <__aeabi_dsub>
 800147a:	4602      	mov	r2, r0
 800147c:	460b      	mov	r3, r1
 800147e:	4874      	ldr	r0, [pc, #464]	; (8001650 <c_FFTImplementationCallback_doH+0xaa8>)
 8001480:	6939      	ldr	r1, [r7, #16]
 8001482:	0109      	lsls	r1, r1, #4
 8001484:	4401      	add	r1, r0
 8001486:	e9c1 2300 	strd	r2, r3, [r1]
        fv[temp_re_tmp].im = fv[i].im - temp_im;
 800148a:	4a71      	ldr	r2, [pc, #452]	; (8001650 <c_FFTImplementationCallback_doH+0xaa8>)
 800148c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800148e:	011b      	lsls	r3, r3, #4
 8001490:	4413      	add	r3, r2
 8001492:	3308      	adds	r3, #8
 8001494:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001498:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800149c:	f7fe fef4 	bl	8000288 <__aeabi_dsub>
 80014a0:	4602      	mov	r2, r0
 80014a2:	460b      	mov	r3, r1
 80014a4:	486a      	ldr	r0, [pc, #424]	; (8001650 <c_FFTImplementationCallback_doH+0xaa8>)
 80014a6:	6939      	ldr	r1, [r7, #16]
 80014a8:	0109      	lsls	r1, r1, #4
 80014aa:	4401      	add	r1, r0
 80014ac:	3108      	adds	r1, #8
 80014ae:	e9c1 2300 	strd	r2, r3, [r1]
        fv[i].re += temp_re;
 80014b2:	4a67      	ldr	r2, [pc, #412]	; (8001650 <c_FFTImplementationCallback_doH+0xaa8>)
 80014b4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80014b6:	011b      	lsls	r3, r3, #4
 80014b8:	4413      	add	r3, r2
 80014ba:	e9d3 0100 	ldrd	r0, r1, [r3]
 80014be:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80014c2:	f7fe fee3 	bl	800028c <__adddf3>
 80014c6:	4602      	mov	r2, r0
 80014c8:	460b      	mov	r3, r1
 80014ca:	4861      	ldr	r0, [pc, #388]	; (8001650 <c_FFTImplementationCallback_doH+0xaa8>)
 80014cc:	6f79      	ldr	r1, [r7, #116]	; 0x74
 80014ce:	0109      	lsls	r1, r1, #4
 80014d0:	4401      	add	r1, r0
 80014d2:	e9c1 2300 	strd	r2, r3, [r1]
        fv[i].im += temp_im;
 80014d6:	4a5e      	ldr	r2, [pc, #376]	; (8001650 <c_FFTImplementationCallback_doH+0xaa8>)
 80014d8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80014da:	011b      	lsls	r3, r3, #4
 80014dc:	4413      	add	r3, r2
 80014de:	3308      	adds	r3, #8
 80014e0:	e9d3 0100 	ldrd	r0, r1, [r3]
 80014e4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80014e8:	f7fe fed0 	bl	800028c <__adddf3>
 80014ec:	4602      	mov	r2, r0
 80014ee:	460b      	mov	r3, r1
 80014f0:	4857      	ldr	r0, [pc, #348]	; (8001650 <c_FFTImplementationCallback_doH+0xaa8>)
 80014f2:	6f79      	ldr	r1, [r7, #116]	; 0x74
 80014f4:	0109      	lsls	r1, r1, #4
 80014f6:	4401      	add	r1, r0
 80014f8:	3108      	adds	r1, #8
 80014fa:	e9c1 2300 	strd	r2, r3, [r1]
        i += ju;
 80014fe:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8001500:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001502:	4413      	add	r3, r2
 8001504:	677b      	str	r3, [r7, #116]	; 0x74
      while (i < ihi) {
 8001506:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8001508:	697b      	ldr	r3, [r7, #20]
 800150a:	429a      	cmp	r2, r3
 800150c:	f6ff af62 	blt.w	80013d4 <c_FFTImplementationCallback_doH+0x82c>
      }
      istart++;
 8001510:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001512:	3301      	adds	r3, #1
 8001514:	66fb      	str	r3, [r7, #108]	; 0x6c
    for (j = k; j < 128; j += k) {
 8001516:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8001518:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800151a:	4413      	add	r3, r2
 800151c:	667b      	str	r3, [r7, #100]	; 0x64
 800151e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001520:	2b7f      	cmp	r3, #127	; 0x7f
 8001522:	f77f af39 	ble.w	8001398 <c_FFTImplementationCallback_doH+0x7f0>
    }
    k /= 2;
 8001526:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001528:	0fda      	lsrs	r2, r3, #31
 800152a:	4413      	add	r3, r2
 800152c:	105b      	asrs	r3, r3, #1
 800152e:	65fb      	str	r3, [r7, #92]	; 0x5c
    iy = ju;
 8001530:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001532:	66bb      	str	r3, [r7, #104]	; 0x68
    ju += ju;
 8001534:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001536:	005b      	lsls	r3, r3, #1
 8001538:	663b      	str	r3, [r7, #96]	; 0x60
    iheight -= iy;
 800153a:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800153c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800153e:	1ad3      	subs	r3, r2, r3
 8001540:	673b      	str	r3, [r7, #112]	; 0x70
  while (k > 0) {
 8001542:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001544:	2b00      	cmp	r3, #0
 8001546:	f73f aeb6 	bgt.w	80012b6 <c_FFTImplementationCallback_doH+0x70e>
  }
#ifdef FFTDEBUG
  HAL_UART_Transmit(&huart1, (uint8_t *) "TPFFT8\n\r", sizeof("TPFFT8\n\r"), 1000);
#endif
  for (iy = 0; iy < 256; iy++) {
 800154a:	2300      	movs	r3, #0
 800154c:	66bb      	str	r3, [r7, #104]	; 0x68
 800154e:	e061      	b.n	8001614 <c_FFTImplementationCallback_doH+0xa6c>
    re_tmp = fy[iy].re;
 8001550:	4a40      	ldr	r2, [pc, #256]	; (8001654 <c_FFTImplementationCallback_doH+0xaac>)
 8001552:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001554:	011b      	lsls	r3, r3, #4
 8001556:	4413      	add	r3, r2
 8001558:	e9d3 2300 	ldrd	r2, r3, [r3]
 800155c:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    temp_im = fv[iy].im;
 8001560:	4a3b      	ldr	r2, [pc, #236]	; (8001650 <c_FFTImplementationCallback_doH+0xaa8>)
 8001562:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001564:	011b      	lsls	r3, r3, #4
 8001566:	4413      	add	r3, r2
 8001568:	3308      	adds	r3, #8
 800156a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800156e:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
    twid_re = fy[iy].im;
 8001572:	4a38      	ldr	r2, [pc, #224]	; (8001654 <c_FFTImplementationCallback_doH+0xaac>)
 8001574:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001576:	011b      	lsls	r3, r3, #4
 8001578:	4413      	add	r3, r2
 800157a:	3308      	adds	r3, #8
 800157c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001580:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
    twid_im = fv[iy].re;
 8001584:	4a32      	ldr	r2, [pc, #200]	; (8001650 <c_FFTImplementationCallback_doH+0xaa8>)
 8001586:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001588:	011b      	lsls	r3, r3, #4
 800158a:	4413      	add	r3, r2
 800158c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001590:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
    fy[iy].re = re_tmp * twid_im - twid_re * temp_im;
 8001594:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8001598:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 800159c:	f7ff f82c 	bl	80005f8 <__aeabi_dmul>
 80015a0:	4602      	mov	r2, r0
 80015a2:	460b      	mov	r3, r1
 80015a4:	4614      	mov	r4, r2
 80015a6:	461d      	mov	r5, r3
 80015a8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80015ac:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 80015b0:	f7ff f822 	bl	80005f8 <__aeabi_dmul>
 80015b4:	4602      	mov	r2, r0
 80015b6:	460b      	mov	r3, r1
 80015b8:	4620      	mov	r0, r4
 80015ba:	4629      	mov	r1, r5
 80015bc:	f7fe fe64 	bl	8000288 <__aeabi_dsub>
 80015c0:	4602      	mov	r2, r0
 80015c2:	460b      	mov	r3, r1
 80015c4:	4823      	ldr	r0, [pc, #140]	; (8001654 <c_FFTImplementationCallback_doH+0xaac>)
 80015c6:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80015c8:	0109      	lsls	r1, r1, #4
 80015ca:	4401      	add	r1, r0
 80015cc:	e9c1 2300 	strd	r2, r3, [r1]
    fy[iy].im = re_tmp * temp_im + twid_re * twid_im;
 80015d0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80015d4:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 80015d8:	f7ff f80e 	bl	80005f8 <__aeabi_dmul>
 80015dc:	4602      	mov	r2, r0
 80015de:	460b      	mov	r3, r1
 80015e0:	4614      	mov	r4, r2
 80015e2:	461d      	mov	r5, r3
 80015e4:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80015e8:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 80015ec:	f7ff f804 	bl	80005f8 <__aeabi_dmul>
 80015f0:	4602      	mov	r2, r0
 80015f2:	460b      	mov	r3, r1
 80015f4:	4620      	mov	r0, r4
 80015f6:	4629      	mov	r1, r5
 80015f8:	f7fe fe48 	bl	800028c <__adddf3>
 80015fc:	4602      	mov	r2, r0
 80015fe:	460b      	mov	r3, r1
 8001600:	4814      	ldr	r0, [pc, #80]	; (8001654 <c_FFTImplementationCallback_doH+0xaac>)
 8001602:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8001604:	0109      	lsls	r1, r1, #4
 8001606:	4401      	add	r1, r0
 8001608:	3108      	adds	r1, #8
 800160a:	e9c1 2300 	strd	r2, r3, [r1]
  for (iy = 0; iy < 256; iy++) {
 800160e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001610:	3301      	adds	r3, #1
 8001612:	66bb      	str	r3, [r7, #104]	; 0x68
 8001614:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001616:	2bff      	cmp	r3, #255	; 0xff
 8001618:	dd9a      	ble.n	8001550 <c_FFTImplementationCallback_doH+0x9a8>
  }
#ifdef FFTDEBUG
  HAL_UART_Transmit(&huart1, (uint8_t *) "TPFFT9\n\r", sizeof("TPFFT9\n\r"), 1000);
#endif
  iy = 0;
 800161a:	2300      	movs	r3, #0
 800161c:	66bb      	str	r3, [r7, #104]	; 0x68
  ju = 0;
 800161e:	2300      	movs	r3, #0
 8001620:	663b      	str	r3, [r7, #96]	; 0x60
  for (i = 0; i < 255; i++) {
 8001622:	2300      	movs	r3, #0
 8001624:	677b      	str	r3, [r7, #116]	; 0x74
 8001626:	e031      	b.n	800168c <c_FFTImplementationCallback_doH+0xae4>
    fv[iy] = fy[i];
 8001628:	4a09      	ldr	r2, [pc, #36]	; (8001650 <c_FFTImplementationCallback_doH+0xaa8>)
 800162a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800162c:	011b      	lsls	r3, r3, #4
 800162e:	18d1      	adds	r1, r2, r3
 8001630:	4a08      	ldr	r2, [pc, #32]	; (8001654 <c_FFTImplementationCallback_doH+0xaac>)
 8001632:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001634:	011b      	lsls	r3, r3, #4
 8001636:	4413      	add	r3, r2
 8001638:	460c      	mov	r4, r1
 800163a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800163c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    iy = 256;
 8001640:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001644:	66bb      	str	r3, [r7, #104]	; 0x68
    tst = true;
 8001646:	2301      	movs	r3, #1
 8001648:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
    while (tst) {
 800164c:	e015      	b.n	800167a <c_FFTImplementationCallback_doH+0xad2>
 800164e:	bf00      	nop
 8001650:	20000278 	.word	0x20000278
 8001654:	20002278 	.word	0x20002278
      iy >>= 1;
 8001658:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800165a:	105b      	asrs	r3, r3, #1
 800165c:	66bb      	str	r3, [r7, #104]	; 0x68
      ju ^= iy;
 800165e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001660:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001662:	4053      	eors	r3, r2
 8001664:	663b      	str	r3, [r7, #96]	; 0x60
      tst = ((ju & iy) == 0);
 8001666:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001668:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800166a:	4013      	ands	r3, r2
 800166c:	2b00      	cmp	r3, #0
 800166e:	bf0c      	ite	eq
 8001670:	2301      	moveq	r3, #1
 8001672:	2300      	movne	r3, #0
 8001674:	b2db      	uxtb	r3, r3
 8001676:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
    while (tst) {
 800167a:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 800167e:	2b00      	cmp	r3, #0
 8001680:	d1ea      	bne.n	8001658 <c_FFTImplementationCallback_doH+0xab0>
    }
    iy = ju;
 8001682:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001684:	66bb      	str	r3, [r7, #104]	; 0x68
  for (i = 0; i < 255; i++) {
 8001686:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001688:	3301      	adds	r3, #1
 800168a:	677b      	str	r3, [r7, #116]	; 0x74
 800168c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800168e:	2bfe      	cmp	r3, #254	; 0xfe
 8001690:	ddca      	ble.n	8001628 <c_FFTImplementationCallback_doH+0xa80>
  }
#ifdef FFTDEBUG
  HAL_UART_Transmit(&huart1, (uint8_t *) "TPFFTA\n\r", sizeof("TPFFTA\n\r"), 1000);
#endif
  fv[iy] = fy[255];
 8001692:	4a82      	ldr	r2, [pc, #520]	; (800189c <c_FFTImplementationCallback_doH+0xcf4>)
 8001694:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001696:	011b      	lsls	r3, r3, #4
 8001698:	441a      	add	r2, r3
 800169a:	4b81      	ldr	r3, [pc, #516]	; (80018a0 <c_FFTImplementationCallback_doH+0xcf8>)
 800169c:	4614      	mov	r4, r2
 800169e:	f503 637f 	add.w	r3, r3, #4080	; 0xff0
 80016a2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80016a4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  for (i = 0; i <= 254; i += 2) {
 80016a8:	2300      	movs	r3, #0
 80016aa:	677b      	str	r3, [r7, #116]	; 0x74
 80016ac:	e062      	b.n	8001774 <c_FFTImplementationCallback_doH+0xbcc>
    b_temp_re_tmp = fv[i + 1].re;
 80016ae:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80016b0:	3301      	adds	r3, #1
 80016b2:	4a7a      	ldr	r2, [pc, #488]	; (800189c <c_FFTImplementationCallback_doH+0xcf4>)
 80016b4:	011b      	lsls	r3, r3, #4
 80016b6:	4413      	add	r3, r2
 80016b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016bc:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
    temp_im = fv[i + 1].im;
 80016c0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80016c2:	3301      	adds	r3, #1
 80016c4:	4a75      	ldr	r2, [pc, #468]	; (800189c <c_FFTImplementationCallback_doH+0xcf4>)
 80016c6:	011b      	lsls	r3, r3, #4
 80016c8:	4413      	add	r3, r2
 80016ca:	3308      	adds	r3, #8
 80016cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016d0:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
    re_tmp = fv[i].re;
 80016d4:	4a71      	ldr	r2, [pc, #452]	; (800189c <c_FFTImplementationCallback_doH+0xcf4>)
 80016d6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80016d8:	011b      	lsls	r3, r3, #4
 80016da:	4413      	add	r3, r2
 80016dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016e0:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    twid_re = fv[i].im;
 80016e4:	4a6d      	ldr	r2, [pc, #436]	; (800189c <c_FFTImplementationCallback_doH+0xcf4>)
 80016e6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80016e8:	011b      	lsls	r3, r3, #4
 80016ea:	4413      	add	r3, r2
 80016ec:	3308      	adds	r3, #8
 80016ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016f2:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
    fv[i + 1].re = re_tmp - b_temp_re_tmp;
 80016f6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80016f8:	1c5c      	adds	r4, r3, #1
 80016fa:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80016fe:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8001702:	f7fe fdc1 	bl	8000288 <__aeabi_dsub>
 8001706:	4602      	mov	r2, r0
 8001708:	460b      	mov	r3, r1
 800170a:	4864      	ldr	r0, [pc, #400]	; (800189c <c_FFTImplementationCallback_doH+0xcf4>)
 800170c:	0121      	lsls	r1, r4, #4
 800170e:	4401      	add	r1, r0
 8001710:	e9c1 2300 	strd	r2, r3, [r1]
    fv[i + 1].im = twid_re - temp_im;
 8001714:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001716:	1c5c      	adds	r4, r3, #1
 8001718:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800171c:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8001720:	f7fe fdb2 	bl	8000288 <__aeabi_dsub>
 8001724:	4602      	mov	r2, r0
 8001726:	460b      	mov	r3, r1
 8001728:	485c      	ldr	r0, [pc, #368]	; (800189c <c_FFTImplementationCallback_doH+0xcf4>)
 800172a:	0121      	lsls	r1, r4, #4
 800172c:	4401      	add	r1, r0
 800172e:	3108      	adds	r1, #8
 8001730:	e9c1 2300 	strd	r2, r3, [r1]
    fv[i].re = re_tmp + b_temp_re_tmp;
 8001734:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001738:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 800173c:	f7fe fda6 	bl	800028c <__adddf3>
 8001740:	4602      	mov	r2, r0
 8001742:	460b      	mov	r3, r1
 8001744:	4855      	ldr	r0, [pc, #340]	; (800189c <c_FFTImplementationCallback_doH+0xcf4>)
 8001746:	6f79      	ldr	r1, [r7, #116]	; 0x74
 8001748:	0109      	lsls	r1, r1, #4
 800174a:	4401      	add	r1, r0
 800174c:	e9c1 2300 	strd	r2, r3, [r1]
    fv[i].im = twid_re + temp_im;
 8001750:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8001754:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8001758:	f7fe fd98 	bl	800028c <__adddf3>
 800175c:	4602      	mov	r2, r0
 800175e:	460b      	mov	r3, r1
 8001760:	484e      	ldr	r0, [pc, #312]	; (800189c <c_FFTImplementationCallback_doH+0xcf4>)
 8001762:	6f79      	ldr	r1, [r7, #116]	; 0x74
 8001764:	0109      	lsls	r1, r1, #4
 8001766:	4401      	add	r1, r0
 8001768:	3108      	adds	r1, #8
 800176a:	e9c1 2300 	strd	r2, r3, [r1]
  for (i = 0; i <= 254; i += 2) {
 800176e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001770:	3302      	adds	r3, #2
 8001772:	677b      	str	r3, [r7, #116]	; 0x74
 8001774:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001776:	2bfe      	cmp	r3, #254	; 0xfe
 8001778:	dd99      	ble.n	80016ae <c_FFTImplementationCallback_doH+0xb06>
  }
#ifdef FFTDEBUG
  HAL_UART_Transmit(&huart1, (uint8_t *) "TPFFTB\n\r", sizeof("TPFFTB\n\r"), 1000);
#endif
  iy = 2;
 800177a:	2302      	movs	r3, #2
 800177c:	66bb      	str	r3, [r7, #104]	; 0x68
  ju = 4;
 800177e:	2304      	movs	r3, #4
 8001780:	663b      	str	r3, [r7, #96]	; 0x60
  k = 64;
 8001782:	2340      	movs	r3, #64	; 0x40
 8001784:	65fb      	str	r3, [r7, #92]	; 0x5c
  iheight = 253;
 8001786:	23fd      	movs	r3, #253	; 0xfd
 8001788:	673b      	str	r3, [r7, #112]	; 0x70
  while (k > 0) {
 800178a:	e146      	b.n	8001a1a <c_FFTImplementationCallback_doH+0xe72>
    for (i = 0; i < iheight; i += ju) {
 800178c:	2300      	movs	r3, #0
 800178e:	677b      	str	r3, [r7, #116]	; 0x74
 8001790:	e064      	b.n	800185c <c_FFTImplementationCallback_doH+0xcb4>
      temp_re_tmp = i + iy;
 8001792:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8001794:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001796:	4413      	add	r3, r2
 8001798:	613b      	str	r3, [r7, #16]
      temp_re = fv[temp_re_tmp].re;
 800179a:	4a40      	ldr	r2, [pc, #256]	; (800189c <c_FFTImplementationCallback_doH+0xcf4>)
 800179c:	693b      	ldr	r3, [r7, #16]
 800179e:	011b      	lsls	r3, r3, #4
 80017a0:	4413      	add	r3, r2
 80017a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017a6:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
      temp_im = fv[temp_re_tmp].im;
 80017aa:	4a3c      	ldr	r2, [pc, #240]	; (800189c <c_FFTImplementationCallback_doH+0xcf4>)
 80017ac:	693b      	ldr	r3, [r7, #16]
 80017ae:	011b      	lsls	r3, r3, #4
 80017b0:	4413      	add	r3, r2
 80017b2:	3308      	adds	r3, #8
 80017b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017b8:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
      fv[temp_re_tmp].re = fv[i].re - temp_re;
 80017bc:	4a37      	ldr	r2, [pc, #220]	; (800189c <c_FFTImplementationCallback_doH+0xcf4>)
 80017be:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80017c0:	011b      	lsls	r3, r3, #4
 80017c2:	4413      	add	r3, r2
 80017c4:	e9d3 0100 	ldrd	r0, r1, [r3]
 80017c8:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80017cc:	f7fe fd5c 	bl	8000288 <__aeabi_dsub>
 80017d0:	4602      	mov	r2, r0
 80017d2:	460b      	mov	r3, r1
 80017d4:	4831      	ldr	r0, [pc, #196]	; (800189c <c_FFTImplementationCallback_doH+0xcf4>)
 80017d6:	6939      	ldr	r1, [r7, #16]
 80017d8:	0109      	lsls	r1, r1, #4
 80017da:	4401      	add	r1, r0
 80017dc:	e9c1 2300 	strd	r2, r3, [r1]
      fv[temp_re_tmp].im = fv[i].im - temp_im;
 80017e0:	4a2e      	ldr	r2, [pc, #184]	; (800189c <c_FFTImplementationCallback_doH+0xcf4>)
 80017e2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80017e4:	011b      	lsls	r3, r3, #4
 80017e6:	4413      	add	r3, r2
 80017e8:	3308      	adds	r3, #8
 80017ea:	e9d3 0100 	ldrd	r0, r1, [r3]
 80017ee:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80017f2:	f7fe fd49 	bl	8000288 <__aeabi_dsub>
 80017f6:	4602      	mov	r2, r0
 80017f8:	460b      	mov	r3, r1
 80017fa:	4828      	ldr	r0, [pc, #160]	; (800189c <c_FFTImplementationCallback_doH+0xcf4>)
 80017fc:	6939      	ldr	r1, [r7, #16]
 80017fe:	0109      	lsls	r1, r1, #4
 8001800:	4401      	add	r1, r0
 8001802:	3108      	adds	r1, #8
 8001804:	e9c1 2300 	strd	r2, r3, [r1]
      fv[i].re += temp_re;
 8001808:	4a24      	ldr	r2, [pc, #144]	; (800189c <c_FFTImplementationCallback_doH+0xcf4>)
 800180a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800180c:	011b      	lsls	r3, r3, #4
 800180e:	4413      	add	r3, r2
 8001810:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001814:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8001818:	f7fe fd38 	bl	800028c <__adddf3>
 800181c:	4602      	mov	r2, r0
 800181e:	460b      	mov	r3, r1
 8001820:	481e      	ldr	r0, [pc, #120]	; (800189c <c_FFTImplementationCallback_doH+0xcf4>)
 8001822:	6f79      	ldr	r1, [r7, #116]	; 0x74
 8001824:	0109      	lsls	r1, r1, #4
 8001826:	4401      	add	r1, r0
 8001828:	e9c1 2300 	strd	r2, r3, [r1]
      fv[i].im += temp_im;
 800182c:	4a1b      	ldr	r2, [pc, #108]	; (800189c <c_FFTImplementationCallback_doH+0xcf4>)
 800182e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001830:	011b      	lsls	r3, r3, #4
 8001832:	4413      	add	r3, r2
 8001834:	3308      	adds	r3, #8
 8001836:	e9d3 0100 	ldrd	r0, r1, [r3]
 800183a:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800183e:	f7fe fd25 	bl	800028c <__adddf3>
 8001842:	4602      	mov	r2, r0
 8001844:	460b      	mov	r3, r1
 8001846:	4815      	ldr	r0, [pc, #84]	; (800189c <c_FFTImplementationCallback_doH+0xcf4>)
 8001848:	6f79      	ldr	r1, [r7, #116]	; 0x74
 800184a:	0109      	lsls	r1, r1, #4
 800184c:	4401      	add	r1, r0
 800184e:	3108      	adds	r1, #8
 8001850:	e9c1 2300 	strd	r2, r3, [r1]
    for (i = 0; i < iheight; i += ju) {
 8001854:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8001856:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001858:	4413      	add	r3, r2
 800185a:	677b      	str	r3, [r7, #116]	; 0x74
 800185c:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800185e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001860:	429a      	cmp	r2, r3
 8001862:	db96      	blt.n	8001792 <c_FFTImplementationCallback_doH+0xbea>
    }
    istart = 1;
 8001864:	2301      	movs	r3, #1
 8001866:	66fb      	str	r3, [r7, #108]	; 0x6c
    for (j = k; j < 128; j += k) {
 8001868:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800186a:	667b      	str	r3, [r7, #100]	; 0x64
 800186c:	e0c3      	b.n	80019f6 <c_FFTImplementationCallback_doH+0xe4e>
      twid_re = hcostabinv[j];
 800186e:	4a0d      	ldr	r2, [pc, #52]	; (80018a4 <c_FFTImplementationCallback_doH+0xcfc>)
 8001870:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001872:	00db      	lsls	r3, r3, #3
 8001874:	4413      	add	r3, r2
 8001876:	e9d3 2300 	ldrd	r2, r3, [r3]
 800187a:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
      twid_im = hsintabinv[j];
 800187e:	4a0a      	ldr	r2, [pc, #40]	; (80018a8 <c_FFTImplementationCallback_doH+0xd00>)
 8001880:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001882:	00db      	lsls	r3, r3, #3
 8001884:	4413      	add	r3, r2
 8001886:	e9d3 2300 	ldrd	r2, r3, [r3]
 800188a:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
      i = istart;
 800188e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001890:	677b      	str	r3, [r7, #116]	; 0x74
      ihi = istart + iheight;
 8001892:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8001894:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001896:	4413      	add	r3, r2
 8001898:	617b      	str	r3, [r7, #20]
      while (i < ihi) {
 800189a:	e0a0      	b.n	80019de <c_FFTImplementationCallback_doH+0xe36>
 800189c:	20000278 	.word	0x20000278
 80018a0:	20002278 	.word	0x20002278
 80018a4:	20006f88 	.word	0x20006f88
 80018a8:	20007788 	.word	0x20007788
        temp_re_tmp = i + iy;
 80018ac:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80018ae:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80018b0:	4413      	add	r3, r2
 80018b2:	613b      	str	r3, [r7, #16]
        b_temp_re_tmp = fv[temp_re_tmp].im;
 80018b4:	4a75      	ldr	r2, [pc, #468]	; (8001a8c <c_FFTImplementationCallback_doH+0xee4>)
 80018b6:	693b      	ldr	r3, [r7, #16]
 80018b8:	011b      	lsls	r3, r3, #4
 80018ba:	4413      	add	r3, r2
 80018bc:	3308      	adds	r3, #8
 80018be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018c2:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
        temp_im = fv[temp_re_tmp].re;
 80018c6:	4a71      	ldr	r2, [pc, #452]	; (8001a8c <c_FFTImplementationCallback_doH+0xee4>)
 80018c8:	693b      	ldr	r3, [r7, #16]
 80018ca:	011b      	lsls	r3, r3, #4
 80018cc:	4413      	add	r3, r2
 80018ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018d2:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
        temp_re = twid_re * temp_im - twid_im * b_temp_re_tmp;
 80018d6:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80018da:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 80018de:	f7fe fe8b 	bl	80005f8 <__aeabi_dmul>
 80018e2:	4602      	mov	r2, r0
 80018e4:	460b      	mov	r3, r1
 80018e6:	4614      	mov	r4, r2
 80018e8:	461d      	mov	r5, r3
 80018ea:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80018ee:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 80018f2:	f7fe fe81 	bl	80005f8 <__aeabi_dmul>
 80018f6:	4602      	mov	r2, r0
 80018f8:	460b      	mov	r3, r1
 80018fa:	4620      	mov	r0, r4
 80018fc:	4629      	mov	r1, r5
 80018fe:	f7fe fcc3 	bl	8000288 <__aeabi_dsub>
 8001902:	4602      	mov	r2, r0
 8001904:	460b      	mov	r3, r1
 8001906:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
        temp_im = twid_re * b_temp_re_tmp + twid_im * temp_im;
 800190a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800190e:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8001912:	f7fe fe71 	bl	80005f8 <__aeabi_dmul>
 8001916:	4602      	mov	r2, r0
 8001918:	460b      	mov	r3, r1
 800191a:	4614      	mov	r4, r2
 800191c:	461d      	mov	r5, r3
 800191e:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8001922:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8001926:	f7fe fe67 	bl	80005f8 <__aeabi_dmul>
 800192a:	4602      	mov	r2, r0
 800192c:	460b      	mov	r3, r1
 800192e:	4620      	mov	r0, r4
 8001930:	4629      	mov	r1, r5
 8001932:	f7fe fcab 	bl	800028c <__adddf3>
 8001936:	4602      	mov	r2, r0
 8001938:	460b      	mov	r3, r1
 800193a:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
        fv[temp_re_tmp].re = fv[i].re - temp_re;
 800193e:	4a53      	ldr	r2, [pc, #332]	; (8001a8c <c_FFTImplementationCallback_doH+0xee4>)
 8001940:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001942:	011b      	lsls	r3, r3, #4
 8001944:	4413      	add	r3, r2
 8001946:	e9d3 0100 	ldrd	r0, r1, [r3]
 800194a:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800194e:	f7fe fc9b 	bl	8000288 <__aeabi_dsub>
 8001952:	4602      	mov	r2, r0
 8001954:	460b      	mov	r3, r1
 8001956:	484d      	ldr	r0, [pc, #308]	; (8001a8c <c_FFTImplementationCallback_doH+0xee4>)
 8001958:	6939      	ldr	r1, [r7, #16]
 800195a:	0109      	lsls	r1, r1, #4
 800195c:	4401      	add	r1, r0
 800195e:	e9c1 2300 	strd	r2, r3, [r1]
        fv[temp_re_tmp].im = fv[i].im - temp_im;
 8001962:	4a4a      	ldr	r2, [pc, #296]	; (8001a8c <c_FFTImplementationCallback_doH+0xee4>)
 8001964:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001966:	011b      	lsls	r3, r3, #4
 8001968:	4413      	add	r3, r2
 800196a:	3308      	adds	r3, #8
 800196c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001970:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8001974:	f7fe fc88 	bl	8000288 <__aeabi_dsub>
 8001978:	4602      	mov	r2, r0
 800197a:	460b      	mov	r3, r1
 800197c:	4843      	ldr	r0, [pc, #268]	; (8001a8c <c_FFTImplementationCallback_doH+0xee4>)
 800197e:	6939      	ldr	r1, [r7, #16]
 8001980:	0109      	lsls	r1, r1, #4
 8001982:	4401      	add	r1, r0
 8001984:	3108      	adds	r1, #8
 8001986:	e9c1 2300 	strd	r2, r3, [r1]
        fv[i].re += temp_re;
 800198a:	4a40      	ldr	r2, [pc, #256]	; (8001a8c <c_FFTImplementationCallback_doH+0xee4>)
 800198c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800198e:	011b      	lsls	r3, r3, #4
 8001990:	4413      	add	r3, r2
 8001992:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001996:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800199a:	f7fe fc77 	bl	800028c <__adddf3>
 800199e:	4602      	mov	r2, r0
 80019a0:	460b      	mov	r3, r1
 80019a2:	483a      	ldr	r0, [pc, #232]	; (8001a8c <c_FFTImplementationCallback_doH+0xee4>)
 80019a4:	6f79      	ldr	r1, [r7, #116]	; 0x74
 80019a6:	0109      	lsls	r1, r1, #4
 80019a8:	4401      	add	r1, r0
 80019aa:	e9c1 2300 	strd	r2, r3, [r1]
        fv[i].im += temp_im;
 80019ae:	4a37      	ldr	r2, [pc, #220]	; (8001a8c <c_FFTImplementationCallback_doH+0xee4>)
 80019b0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80019b2:	011b      	lsls	r3, r3, #4
 80019b4:	4413      	add	r3, r2
 80019b6:	3308      	adds	r3, #8
 80019b8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80019bc:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80019c0:	f7fe fc64 	bl	800028c <__adddf3>
 80019c4:	4602      	mov	r2, r0
 80019c6:	460b      	mov	r3, r1
 80019c8:	4830      	ldr	r0, [pc, #192]	; (8001a8c <c_FFTImplementationCallback_doH+0xee4>)
 80019ca:	6f79      	ldr	r1, [r7, #116]	; 0x74
 80019cc:	0109      	lsls	r1, r1, #4
 80019ce:	4401      	add	r1, r0
 80019d0:	3108      	adds	r1, #8
 80019d2:	e9c1 2300 	strd	r2, r3, [r1]
        i += ju;
 80019d6:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80019d8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80019da:	4413      	add	r3, r2
 80019dc:	677b      	str	r3, [r7, #116]	; 0x74
      while (i < ihi) {
 80019de:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80019e0:	697b      	ldr	r3, [r7, #20]
 80019e2:	429a      	cmp	r2, r3
 80019e4:	f6ff af62 	blt.w	80018ac <c_FFTImplementationCallback_doH+0xd04>
      }
      istart++;
 80019e8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80019ea:	3301      	adds	r3, #1
 80019ec:	66fb      	str	r3, [r7, #108]	; 0x6c
    for (j = k; j < 128; j += k) {
 80019ee:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80019f0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80019f2:	4413      	add	r3, r2
 80019f4:	667b      	str	r3, [r7, #100]	; 0x64
 80019f6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80019f8:	2b7f      	cmp	r3, #127	; 0x7f
 80019fa:	f77f af38 	ble.w	800186e <c_FFTImplementationCallback_doH+0xcc6>
    }
    k /= 2;
 80019fe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001a00:	0fda      	lsrs	r2, r3, #31
 8001a02:	4413      	add	r3, r2
 8001a04:	105b      	asrs	r3, r3, #1
 8001a06:	65fb      	str	r3, [r7, #92]	; 0x5c
    iy = ju;
 8001a08:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001a0a:	66bb      	str	r3, [r7, #104]	; 0x68
    ju += ju;
 8001a0c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001a0e:	005b      	lsls	r3, r3, #1
 8001a10:	663b      	str	r3, [r7, #96]	; 0x60
    iheight -= iy;
 8001a12:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8001a14:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001a16:	1ad3      	subs	r3, r2, r3
 8001a18:	673b      	str	r3, [r7, #112]	; 0x70
  while (k > 0) {
 8001a1a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	f73f aeb5 	bgt.w	800178c <c_FFTImplementationCallback_doH+0xbe4>
  }
#ifdef FFTDEBUG
  HAL_UART_Transmit(&huart1, (uint8_t *) "TPFFTC\n\r", sizeof("TPFFTC\n\r"), 1000);
#endif
  for (iy = 0; iy < 256; iy++) {
 8001a22:	2300      	movs	r3, #0
 8001a24:	66bb      	str	r3, [r7, #104]	; 0x68
 8001a26:	e02a      	b.n	8001a7e <c_FFTImplementationCallback_doH+0xed6>
    fv[iy].re *= 0.00390625;
 8001a28:	4a18      	ldr	r2, [pc, #96]	; (8001a8c <c_FFTImplementationCallback_doH+0xee4>)
 8001a2a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001a2c:	011b      	lsls	r3, r3, #4
 8001a2e:	4413      	add	r3, r2
 8001a30:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001a34:	f04f 0200 	mov.w	r2, #0
 8001a38:	4b15      	ldr	r3, [pc, #84]	; (8001a90 <c_FFTImplementationCallback_doH+0xee8>)
 8001a3a:	f7fe fddd 	bl	80005f8 <__aeabi_dmul>
 8001a3e:	4602      	mov	r2, r0
 8001a40:	460b      	mov	r3, r1
 8001a42:	4812      	ldr	r0, [pc, #72]	; (8001a8c <c_FFTImplementationCallback_doH+0xee4>)
 8001a44:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8001a46:	0109      	lsls	r1, r1, #4
 8001a48:	4401      	add	r1, r0
 8001a4a:	e9c1 2300 	strd	r2, r3, [r1]
    fv[iy].im *= 0.00390625;
 8001a4e:	4a0f      	ldr	r2, [pc, #60]	; (8001a8c <c_FFTImplementationCallback_doH+0xee4>)
 8001a50:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001a52:	011b      	lsls	r3, r3, #4
 8001a54:	4413      	add	r3, r2
 8001a56:	3308      	adds	r3, #8
 8001a58:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001a5c:	f04f 0200 	mov.w	r2, #0
 8001a60:	4b0b      	ldr	r3, [pc, #44]	; (8001a90 <c_FFTImplementationCallback_doH+0xee8>)
 8001a62:	f7fe fdc9 	bl	80005f8 <__aeabi_dmul>
 8001a66:	4602      	mov	r2, r0
 8001a68:	460b      	mov	r3, r1
 8001a6a:	4808      	ldr	r0, [pc, #32]	; (8001a8c <c_FFTImplementationCallback_doH+0xee4>)
 8001a6c:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8001a6e:	0109      	lsls	r1, r1, #4
 8001a70:	4401      	add	r1, r0
 8001a72:	3108      	adds	r1, #8
 8001a74:	e9c1 2300 	strd	r2, r3, [r1]
  for (iy = 0; iy < 256; iy++) {
 8001a78:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001a7a:	3301      	adds	r3, #1
 8001a7c:	66bb      	str	r3, [r7, #104]	; 0x68
 8001a7e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001a80:	2bff      	cmp	r3, #255	; 0xff
 8001a82:	ddd1      	ble.n	8001a28 <c_FFTImplementationCallback_doH+0xe80>
  }
  for (k = 0; k < 100; k++) {
 8001a84:	2300      	movs	r3, #0
 8001a86:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001a88:	e069      	b.n	8001b5e <c_FFTImplementationCallback_doH+0xfb6>
 8001a8a:	bf00      	nop
 8001a8c:	20000278 	.word	0x20000278
 8001a90:	3f700000 	.word	0x3f700000
    twid_im = wwc[k + 99].re;
 8001a94:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001a96:	3363      	adds	r3, #99	; 0x63
 8001a98:	011b      	lsls	r3, r3, #4
 8001a9a:	687a      	ldr	r2, [r7, #4]
 8001a9c:	4413      	add	r3, r2
 8001a9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001aa2:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
    re_tmp = fv[k + 99].im;
 8001aa6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001aa8:	3363      	adds	r3, #99	; 0x63
 8001aaa:	4a30      	ldr	r2, [pc, #192]	; (8001b6c <c_FFTImplementationCallback_doH+0xfc4>)
 8001aac:	011b      	lsls	r3, r3, #4
 8001aae:	4413      	add	r3, r2
 8001ab0:	3308      	adds	r3, #8
 8001ab2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ab6:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    temp_im = wwc[k + 99].im;
 8001aba:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001abc:	3363      	adds	r3, #99	; 0x63
 8001abe:	011b      	lsls	r3, r3, #4
 8001ac0:	687a      	ldr	r2, [r7, #4]
 8001ac2:	4413      	add	r3, r2
 8001ac4:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8001ac8:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
    twid_re = fv[k + 99].re;
 8001acc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001ace:	3363      	adds	r3, #99	; 0x63
 8001ad0:	4a26      	ldr	r2, [pc, #152]	; (8001b6c <c_FFTImplementationCallback_doH+0xfc4>)
 8001ad2:	011b      	lsls	r3, r3, #4
 8001ad4:	4413      	add	r3, r2
 8001ad6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ada:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
    ytmp[k].re = twid_im * twid_re + temp_im * re_tmp;
 8001ade:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8001ae2:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8001ae6:	f7fe fd87 	bl	80005f8 <__aeabi_dmul>
 8001aea:	4602      	mov	r2, r0
 8001aec:	460b      	mov	r3, r1
 8001aee:	4614      	mov	r4, r2
 8001af0:	461d      	mov	r5, r3
 8001af2:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8001af6:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8001afa:	f7fe fd7d 	bl	80005f8 <__aeabi_dmul>
 8001afe:	4602      	mov	r2, r0
 8001b00:	460b      	mov	r3, r1
 8001b02:	4620      	mov	r0, r4
 8001b04:	4629      	mov	r1, r5
 8001b06:	f7fe fbc1 	bl	800028c <__adddf3>
 8001b0a:	4602      	mov	r2, r0
 8001b0c:	460b      	mov	r3, r1
 8001b0e:	4818      	ldr	r0, [pc, #96]	; (8001b70 <c_FFTImplementationCallback_doH+0xfc8>)
 8001b10:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 8001b12:	0109      	lsls	r1, r1, #4
 8001b14:	4401      	add	r1, r0
 8001b16:	e9c1 2300 	strd	r2, r3, [r1]
    ytmp[k].im = twid_im * re_tmp - temp_im * twid_re;
 8001b1a:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8001b1e:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8001b22:	f7fe fd69 	bl	80005f8 <__aeabi_dmul>
 8001b26:	4602      	mov	r2, r0
 8001b28:	460b      	mov	r3, r1
 8001b2a:	4614      	mov	r4, r2
 8001b2c:	461d      	mov	r5, r3
 8001b2e:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8001b32:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8001b36:	f7fe fd5f 	bl	80005f8 <__aeabi_dmul>
 8001b3a:	4602      	mov	r2, r0
 8001b3c:	460b      	mov	r3, r1
 8001b3e:	4620      	mov	r0, r4
 8001b40:	4629      	mov	r1, r5
 8001b42:	f7fe fba1 	bl	8000288 <__aeabi_dsub>
 8001b46:	4602      	mov	r2, r0
 8001b48:	460b      	mov	r3, r1
 8001b4a:	4809      	ldr	r0, [pc, #36]	; (8001b70 <c_FFTImplementationCallback_doH+0xfc8>)
 8001b4c:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 8001b4e:	0109      	lsls	r1, r1, #4
 8001b50:	4401      	add	r1, r0
 8001b52:	3108      	adds	r1, #8
 8001b54:	e9c1 2300 	strd	r2, r3, [r1]
  for (k = 0; k < 100; k++) {
 8001b58:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001b5a:	3301      	adds	r3, #1
 8001b5c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001b5e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001b60:	2b63      	cmp	r3, #99	; 0x63
 8001b62:	dd97      	ble.n	8001a94 <c_FFTImplementationCallback_doH+0xeec>
  }
#ifdef FFTDEBUG
  HAL_UART_Transmit(&huart1, (uint8_t *) "TPFFTD\n\r", sizeof("TPFFTD\n\r"), 1000);
#endif
  for (i = 0; i < 100; i++) {
 8001b64:	2300      	movs	r3, #0
 8001b66:	677b      	str	r3, [r7, #116]	; 0x74
 8001b68:	e17e      	b.n	8001e68 <c_FFTImplementationCallback_doH+0x12c0>
 8001b6a:	bf00      	nop
 8001b6c:	20000278 	.word	0x20000278
 8001b70:	200061b8 	.word	0x200061b8
    double b_ytmp_re_tmp;
    double ytmp_re_tmp;
    temp_im = ytmp[i].re;
 8001b74:	4ab7      	ldr	r2, [pc, #732]	; (8001e54 <c_FFTImplementationCallback_doH+0x12ac>)
 8001b76:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001b78:	011b      	lsls	r3, r3, #4
 8001b7a:	4413      	add	r3, r2
 8001b7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b80:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
    twid_re = reconVar1[i].im;
 8001b84:	4ab4      	ldr	r2, [pc, #720]	; (8001e58 <c_FFTImplementationCallback_doH+0x12b0>)
 8001b86:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001b88:	011b      	lsls	r3, r3, #4
 8001b8a:	4413      	add	r3, r2
 8001b8c:	3308      	adds	r3, #8
 8001b8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b92:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
    twid_im = ytmp[i].im;
 8001b96:	4aaf      	ldr	r2, [pc, #700]	; (8001e54 <c_FFTImplementationCallback_doH+0x12ac>)
 8001b98:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001b9a:	011b      	lsls	r3, r3, #4
 8001b9c:	4413      	add	r3, r2
 8001b9e:	3308      	adds	r3, #8
 8001ba0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ba4:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
    re_tmp = reconVar1[i].re;
 8001ba8:	4aab      	ldr	r2, [pc, #684]	; (8001e58 <c_FFTImplementationCallback_doH+0x12b0>)
 8001baa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001bac:	011b      	lsls	r3, r3, #4
 8001bae:	4413      	add	r3, r2
 8001bb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001bb4:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    iy = iv[i] - 1;
 8001bb8:	4aa8      	ldr	r2, [pc, #672]	; (8001e5c <c_FFTImplementationCallback_doH+0x12b4>)
 8001bba:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001bbc:	4413      	add	r3, r2
 8001bbe:	f993 3000 	ldrsb.w	r3, [r3]
 8001bc2:	3b01      	subs	r3, #1
 8001bc4:	66bb      	str	r3, [r7, #104]	; 0x68
    temp_re = ytmp[iy].re;
 8001bc6:	4aa3      	ldr	r2, [pc, #652]	; (8001e54 <c_FFTImplementationCallback_doH+0x12ac>)
 8001bc8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001bca:	011b      	lsls	r3, r3, #4
 8001bcc:	4413      	add	r3, r2
 8001bce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001bd2:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
    b_temp_re_tmp = -ytmp[iy].im;
 8001bd6:	4a9f      	ldr	r2, [pc, #636]	; (8001e54 <c_FFTImplementationCallback_doH+0x12ac>)
 8001bd8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001bda:	011b      	lsls	r3, r3, #4
 8001bdc:	4413      	add	r3, r2
 8001bde:	3308      	adds	r3, #8
 8001be0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001be4:	4611      	mov	r1, r2
 8001be6:	62b9      	str	r1, [r7, #40]	; 0x28
 8001be8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8001bec:	62fb      	str	r3, [r7, #44]	; 0x2c
    ytmp_re_tmp = reconVar2[i].im;
 8001bee:	4a9c      	ldr	r2, [pc, #624]	; (8001e60 <c_FFTImplementationCallback_doH+0x12b8>)
 8001bf0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001bf2:	011b      	lsls	r3, r3, #4
 8001bf4:	4413      	add	r3, r2
 8001bf6:	3308      	adds	r3, #8
 8001bf8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001bfc:	e9c7 2308 	strd	r2, r3, [r7, #32]
    b_ytmp_re_tmp = reconVar2[i].re;
 8001c00:	4a97      	ldr	r2, [pc, #604]	; (8001e60 <c_FFTImplementationCallback_doH+0x12b8>)
 8001c02:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001c04:	011b      	lsls	r3, r3, #4
 8001c06:	4413      	add	r3, r2
 8001c08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c0c:	e9c7 2306 	strd	r2, r3, [r7, #24]
    y[i].re = 0.5 * ((temp_im * re_tmp - twid_im * twid_re) +
 8001c10:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8001c14:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8001c18:	f7fe fcee 	bl	80005f8 <__aeabi_dmul>
 8001c1c:	4602      	mov	r2, r0
 8001c1e:	460b      	mov	r3, r1
 8001c20:	4614      	mov	r4, r2
 8001c22:	461d      	mov	r5, r3
 8001c24:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8001c28:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8001c2c:	f7fe fce4 	bl	80005f8 <__aeabi_dmul>
 8001c30:	4602      	mov	r2, r0
 8001c32:	460b      	mov	r3, r1
 8001c34:	4620      	mov	r0, r4
 8001c36:	4629      	mov	r1, r5
 8001c38:	f7fe fb26 	bl	8000288 <__aeabi_dsub>
 8001c3c:	4602      	mov	r2, r0
 8001c3e:	460b      	mov	r3, r1
 8001c40:	4614      	mov	r4, r2
 8001c42:	461d      	mov	r5, r3
                     (temp_re * b_ytmp_re_tmp - b_temp_re_tmp * ytmp_re_tmp));
 8001c44:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001c48:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8001c4c:	f7fe fcd4 	bl	80005f8 <__aeabi_dmul>
 8001c50:	4602      	mov	r2, r0
 8001c52:	460b      	mov	r3, r1
 8001c54:	4690      	mov	r8, r2
 8001c56:	4699      	mov	r9, r3
 8001c58:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001c5c:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001c60:	f7fe fcca 	bl	80005f8 <__aeabi_dmul>
 8001c64:	4602      	mov	r2, r0
 8001c66:	460b      	mov	r3, r1
 8001c68:	4640      	mov	r0, r8
 8001c6a:	4649      	mov	r1, r9
 8001c6c:	f7fe fb0c 	bl	8000288 <__aeabi_dsub>
 8001c70:	4602      	mov	r2, r0
 8001c72:	460b      	mov	r3, r1
    y[i].re = 0.5 * ((temp_im * re_tmp - twid_im * twid_re) +
 8001c74:	4620      	mov	r0, r4
 8001c76:	4629      	mov	r1, r5
 8001c78:	f7fe fb08 	bl	800028c <__adddf3>
 8001c7c:	4602      	mov	r2, r0
 8001c7e:	460b      	mov	r3, r1
 8001c80:	4610      	mov	r0, r2
 8001c82:	4619      	mov	r1, r3
 8001c84:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001c86:	011b      	lsls	r3, r3, #4
 8001c88:	68ba      	ldr	r2, [r7, #8]
 8001c8a:	18d4      	adds	r4, r2, r3
 8001c8c:	f04f 0200 	mov.w	r2, #0
 8001c90:	4b74      	ldr	r3, [pc, #464]	; (8001e64 <c_FFTImplementationCallback_doH+0x12bc>)
 8001c92:	f7fe fcb1 	bl	80005f8 <__aeabi_dmul>
 8001c96:	4602      	mov	r2, r0
 8001c98:	460b      	mov	r3, r1
 8001c9a:	e9c4 2300 	strd	r2, r3, [r4]
    y[i].im = 0.5 * ((temp_im * twid_re + twid_im * re_tmp) +
 8001c9e:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8001ca2:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8001ca6:	f7fe fca7 	bl	80005f8 <__aeabi_dmul>
 8001caa:	4602      	mov	r2, r0
 8001cac:	460b      	mov	r3, r1
 8001cae:	4614      	mov	r4, r2
 8001cb0:	461d      	mov	r5, r3
 8001cb2:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8001cb6:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8001cba:	f7fe fc9d 	bl	80005f8 <__aeabi_dmul>
 8001cbe:	4602      	mov	r2, r0
 8001cc0:	460b      	mov	r3, r1
 8001cc2:	4620      	mov	r0, r4
 8001cc4:	4629      	mov	r1, r5
 8001cc6:	f7fe fae1 	bl	800028c <__adddf3>
 8001cca:	4602      	mov	r2, r0
 8001ccc:	460b      	mov	r3, r1
 8001cce:	4614      	mov	r4, r2
 8001cd0:	461d      	mov	r5, r3
                     (temp_re * ytmp_re_tmp + b_temp_re_tmp * b_ytmp_re_tmp));
 8001cd2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001cd6:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8001cda:	f7fe fc8d 	bl	80005f8 <__aeabi_dmul>
 8001cde:	4602      	mov	r2, r0
 8001ce0:	460b      	mov	r3, r1
 8001ce2:	4690      	mov	r8, r2
 8001ce4:	4699      	mov	r9, r3
 8001ce6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001cea:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001cee:	f7fe fc83 	bl	80005f8 <__aeabi_dmul>
 8001cf2:	4602      	mov	r2, r0
 8001cf4:	460b      	mov	r3, r1
 8001cf6:	4640      	mov	r0, r8
 8001cf8:	4649      	mov	r1, r9
 8001cfa:	f7fe fac7 	bl	800028c <__adddf3>
 8001cfe:	4602      	mov	r2, r0
 8001d00:	460b      	mov	r3, r1
    y[i].im = 0.5 * ((temp_im * twid_re + twid_im * re_tmp) +
 8001d02:	4620      	mov	r0, r4
 8001d04:	4629      	mov	r1, r5
 8001d06:	f7fe fac1 	bl	800028c <__adddf3>
 8001d0a:	4602      	mov	r2, r0
 8001d0c:	460b      	mov	r3, r1
 8001d0e:	4610      	mov	r0, r2
 8001d10:	4619      	mov	r1, r3
 8001d12:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001d14:	011b      	lsls	r3, r3, #4
 8001d16:	68ba      	ldr	r2, [r7, #8]
 8001d18:	18d4      	adds	r4, r2, r3
 8001d1a:	f04f 0200 	mov.w	r2, #0
 8001d1e:	4b51      	ldr	r3, [pc, #324]	; (8001e64 <c_FFTImplementationCallback_doH+0x12bc>)
 8001d20:	f7fe fc6a 	bl	80005f8 <__aeabi_dmul>
 8001d24:	4602      	mov	r2, r0
 8001d26:	460b      	mov	r3, r1
 8001d28:	e9c4 2302 	strd	r2, r3, [r4, #8]
    y[i + 100].re = 0.5 * ((temp_im * b_ytmp_re_tmp - twid_im * ytmp_re_tmp) +
 8001d2c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001d30:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8001d34:	f7fe fc60 	bl	80005f8 <__aeabi_dmul>
 8001d38:	4602      	mov	r2, r0
 8001d3a:	460b      	mov	r3, r1
 8001d3c:	4614      	mov	r4, r2
 8001d3e:	461d      	mov	r5, r3
 8001d40:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001d44:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8001d48:	f7fe fc56 	bl	80005f8 <__aeabi_dmul>
 8001d4c:	4602      	mov	r2, r0
 8001d4e:	460b      	mov	r3, r1
 8001d50:	4620      	mov	r0, r4
 8001d52:	4629      	mov	r1, r5
 8001d54:	f7fe fa98 	bl	8000288 <__aeabi_dsub>
 8001d58:	4602      	mov	r2, r0
 8001d5a:	460b      	mov	r3, r1
 8001d5c:	4614      	mov	r4, r2
 8001d5e:	461d      	mov	r5, r3
                           (temp_re * re_tmp - b_temp_re_tmp * twid_re));
 8001d60:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8001d64:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8001d68:	f7fe fc46 	bl	80005f8 <__aeabi_dmul>
 8001d6c:	4602      	mov	r2, r0
 8001d6e:	460b      	mov	r3, r1
 8001d70:	4690      	mov	r8, r2
 8001d72:	4699      	mov	r9, r3
 8001d74:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8001d78:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001d7c:	f7fe fc3c 	bl	80005f8 <__aeabi_dmul>
 8001d80:	4602      	mov	r2, r0
 8001d82:	460b      	mov	r3, r1
 8001d84:	4640      	mov	r0, r8
 8001d86:	4649      	mov	r1, r9
 8001d88:	f7fe fa7e 	bl	8000288 <__aeabi_dsub>
 8001d8c:	4602      	mov	r2, r0
 8001d8e:	460b      	mov	r3, r1
    y[i + 100].re = 0.5 * ((temp_im * b_ytmp_re_tmp - twid_im * ytmp_re_tmp) +
 8001d90:	4620      	mov	r0, r4
 8001d92:	4629      	mov	r1, r5
 8001d94:	f7fe fa7a 	bl	800028c <__adddf3>
 8001d98:	4602      	mov	r2, r0
 8001d9a:	460b      	mov	r3, r1
 8001d9c:	4610      	mov	r0, r2
 8001d9e:	4619      	mov	r1, r3
 8001da0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001da2:	3364      	adds	r3, #100	; 0x64
 8001da4:	011b      	lsls	r3, r3, #4
 8001da6:	68ba      	ldr	r2, [r7, #8]
 8001da8:	18d4      	adds	r4, r2, r3
 8001daa:	f04f 0200 	mov.w	r2, #0
 8001dae:	4b2d      	ldr	r3, [pc, #180]	; (8001e64 <c_FFTImplementationCallback_doH+0x12bc>)
 8001db0:	f7fe fc22 	bl	80005f8 <__aeabi_dmul>
 8001db4:	4602      	mov	r2, r0
 8001db6:	460b      	mov	r3, r1
 8001db8:	e9c4 2300 	strd	r2, r3, [r4]
    y[i + 100].im = 0.5 * ((temp_im * ytmp_re_tmp + twid_im * b_ytmp_re_tmp) +
 8001dbc:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001dc0:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8001dc4:	f7fe fc18 	bl	80005f8 <__aeabi_dmul>
 8001dc8:	4602      	mov	r2, r0
 8001dca:	460b      	mov	r3, r1
 8001dcc:	4614      	mov	r4, r2
 8001dce:	461d      	mov	r5, r3
 8001dd0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001dd4:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8001dd8:	f7fe fc0e 	bl	80005f8 <__aeabi_dmul>
 8001ddc:	4602      	mov	r2, r0
 8001dde:	460b      	mov	r3, r1
 8001de0:	4620      	mov	r0, r4
 8001de2:	4629      	mov	r1, r5
 8001de4:	f7fe fa52 	bl	800028c <__adddf3>
 8001de8:	4602      	mov	r2, r0
 8001dea:	460b      	mov	r3, r1
 8001dec:	4614      	mov	r4, r2
 8001dee:	461d      	mov	r5, r3
                           (temp_re * twid_re + b_temp_re_tmp * re_tmp));
 8001df0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8001df4:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8001df8:	f7fe fbfe 	bl	80005f8 <__aeabi_dmul>
 8001dfc:	4602      	mov	r2, r0
 8001dfe:	460b      	mov	r3, r1
 8001e00:	4690      	mov	r8, r2
 8001e02:	4699      	mov	r9, r3
 8001e04:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8001e08:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001e0c:	f7fe fbf4 	bl	80005f8 <__aeabi_dmul>
 8001e10:	4602      	mov	r2, r0
 8001e12:	460b      	mov	r3, r1
 8001e14:	4640      	mov	r0, r8
 8001e16:	4649      	mov	r1, r9
 8001e18:	f7fe fa38 	bl	800028c <__adddf3>
 8001e1c:	4602      	mov	r2, r0
 8001e1e:	460b      	mov	r3, r1
    y[i + 100].im = 0.5 * ((temp_im * ytmp_re_tmp + twid_im * b_ytmp_re_tmp) +
 8001e20:	4620      	mov	r0, r4
 8001e22:	4629      	mov	r1, r5
 8001e24:	f7fe fa32 	bl	800028c <__adddf3>
 8001e28:	4602      	mov	r2, r0
 8001e2a:	460b      	mov	r3, r1
 8001e2c:	4610      	mov	r0, r2
 8001e2e:	4619      	mov	r1, r3
 8001e30:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001e32:	3364      	adds	r3, #100	; 0x64
 8001e34:	011b      	lsls	r3, r3, #4
 8001e36:	68ba      	ldr	r2, [r7, #8]
 8001e38:	18d4      	adds	r4, r2, r3
 8001e3a:	f04f 0200 	mov.w	r2, #0
 8001e3e:	4b09      	ldr	r3, [pc, #36]	; (8001e64 <c_FFTImplementationCallback_doH+0x12bc>)
 8001e40:	f7fe fbda 	bl	80005f8 <__aeabi_dmul>
 8001e44:	4602      	mov	r2, r0
 8001e46:	460b      	mov	r3, r1
 8001e48:	e9c4 2302 	strd	r2, r3, [r4, #8]
  for (i = 0; i < 100; i++) {
 8001e4c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001e4e:	3301      	adds	r3, #1
 8001e50:	677b      	str	r3, [r7, #116]	; 0x74
 8001e52:	e009      	b.n	8001e68 <c_FFTImplementationCallback_doH+0x12c0>
 8001e54:	200061b8 	.word	0x200061b8
 8001e58:	0800e990 	.word	0x0800e990
 8001e5c:	0800efd0 	.word	0x0800efd0
 8001e60:	0800f038 	.word	0x0800f038
 8001e64:	3fe00000 	.word	0x3fe00000
 8001e68:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001e6a:	2b63      	cmp	r3, #99	; 0x63
 8001e6c:	f77f ae82 	ble.w	8001b74 <c_FFTImplementationCallback_doH+0xfcc>
  }
#ifdef FFTDEBUG
  HAL_UART_Transmit(&huart1, (uint8_t *) "TPFFTE\n\r", sizeof("TPFFTE\n\r"), 1000);
#endif
}
 8001e70:	bf00      	nop
 8001e72:	bf00      	nop
 8001e74:	3778      	adds	r7, #120	; 0x78
 8001e76:	46bd      	mov	sp, r7
 8001e78:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

08001e7c <AD5245level>:
}
#endif

#ifdef  AD5245
/* Управление усилением от 0 до 254 */
void AD5245level(uint8_t lev) {
 8001e7c:	b580      	push	{r7, lr}
 8001e7e:	b088      	sub	sp, #32
 8001e80:	af04      	add	r7, sp, #16
 8001e82:	4603      	mov	r3, r0
 8001e84:	71fb      	strb	r3, [r7, #7]
	uint8_t cmdBuff[2];
	uint16_t cmd = AD5245_WRITE;
 8001e86:	2300      	movs	r3, #0
 8001e88:	81fb      	strh	r3, [r7, #14]
	cmdBuff[0] = lev;
 8001e8a:	79fb      	ldrb	r3, [r7, #7]
 8001e8c:	733b      	strb	r3, [r7, #12]
	HAL_I2C_Mem_Write(&AD5245_I2C_PORT, AD5245_I2C_ADDR, cmd, 2, cmdBuff, 1, 100);
 8001e8e:	89fa      	ldrh	r2, [r7, #14]
 8001e90:	2364      	movs	r3, #100	; 0x64
 8001e92:	9302      	str	r3, [sp, #8]
 8001e94:	2301      	movs	r3, #1
 8001e96:	9301      	str	r3, [sp, #4]
 8001e98:	f107 030c 	add.w	r3, r7, #12
 8001e9c:	9300      	str	r3, [sp, #0]
 8001e9e:	2302      	movs	r3, #2
 8001ea0:	2158      	movs	r1, #88	; 0x58
 8001ea2:	4803      	ldr	r0, [pc, #12]	; (8001eb0 <AD5245level+0x34>)
 8001ea4:	f004 fd90 	bl	80069c8 <HAL_I2C_Mem_Write>
}
 8001ea8:	bf00      	nop
 8001eaa:	3710      	adds	r7, #16
 8001eac:	46bd      	mov	sp, r7
 8001eae:	bd80      	pop	{r7, pc}
 8001eb0:	2000688c 	.word	0x2000688c
 8001eb4:	00000000 	.word	0x00000000

08001eb8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001eb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001ebc:	ed2d 8b02 	vpush	{d8}
 8001ec0:	f5ad 7d57 	sub.w	sp, sp, #860	; 0x35c
 8001ec4:	af0a      	add	r7, sp, #40	; 0x28
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001ec6:	f002 fe09 	bl	8004adc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001eca:	f000 f9c7 	bl	800225c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001ece:	f000 fddb 	bl	8002a88 <MX_GPIO_Init>
  MX_DMA_Init();
 8001ed2:	f000 fdbb 	bl	8002a4c <MX_DMA_Init>
  MX_TIM1_Init();
 8001ed6:	f000 fb17 	bl	8002508 <MX_TIM1_Init>
  MX_ADC1_Init();
 8001eda:	f000 fa25 	bl	8002328 <MX_ADC1_Init>
  MX_I2C1_Init();
 8001ede:	f000 fa95 	bl	800240c <MX_I2C1_Init>
  MX_SPI2_Init();
 8001ee2:	f000 fad3 	bl	800248c <MX_SPI2_Init>
  MX_USART1_UART_Init();
 8001ee6:	f000 fd51 	bl	800298c <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8001eea:	f000 fd7f 	bl	80029ec <MX_USART2_UART_Init>
  MX_TIM4_Init();
 8001eee:	f000 fcff 	bl	80028f0 <MX_TIM4_Init>
  MX_TIM3_Init();
 8001ef2:	f000 fc69 	bl	80027c8 <MX_TIM3_Init>
  MX_TIM2_Init();
 8001ef6:	f000 fbdf 	bl	80026b8 <MX_TIM2_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  HAL_UART_Transmit(&huart1, (uint8_t *) START_TEXT, sizeof(START_TEXT), 1000);
 8001efa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001efe:	2216      	movs	r2, #22
 8001f00:	49bd      	ldr	r1, [pc, #756]	; (80021f8 <main+0x340>)
 8001f02:	48be      	ldr	r0, [pc, #760]	; (80021fc <main+0x344>)
 8001f04:	f008 fed4 	bl	800acb0 <HAL_UART_Transmit>
  mesCount = 0;
 8001f08:	4bbd      	ldr	r3, [pc, #756]	; (8002200 <main+0x348>)
 8001f0a:	2200      	movs	r2, #0
 8001f0c:	801a      	strh	r2, [r3, #0]
  TIM3->ARR = MEASURMENT_DALAY;
 8001f0e:	4bbd      	ldr	r3, [pc, #756]	; (8002204 <main+0x34c>)
 8001f10:	f649 4240 	movw	r2, #40000	; 0x9c40
 8001f14:	62da      	str	r2, [r3, #44]	; 0x2c
  for (int iii = 0; iii < CONVERSION_COUNT; iii++) {
 8001f16:	2300      	movs	r3, #0
 8001f18:	f8c7 332c 	str.w	r3, [r7, #812]	; 0x32c
 8001f1c:	e015      	b.n	8001f4a <main+0x92>
	  adcBuffer[iii] = 0;
 8001f1e:	4aba      	ldr	r2, [pc, #744]	; (8002208 <main+0x350>)
 8001f20:	f8d7 332c 	ldr.w	r3, [r7, #812]	; 0x32c
 8001f24:	2100      	movs	r1, #0
 8001f26:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	  measArray[iii] = 0;
 8001f2a:	4ab8      	ldr	r2, [pc, #736]	; (800220c <main+0x354>)
 8001f2c:	f8d7 332c 	ldr.w	r3, [r7, #812]	; 0x32c
 8001f30:	00db      	lsls	r3, r3, #3
 8001f32:	18d1      	adds	r1, r2, r3
 8001f34:	f04f 0200 	mov.w	r2, #0
 8001f38:	f04f 0300 	mov.w	r3, #0
 8001f3c:	e9c1 2300 	strd	r2, r3, [r1]
  for (int iii = 0; iii < CONVERSION_COUNT; iii++) {
 8001f40:	f8d7 332c 	ldr.w	r3, [r7, #812]	; 0x32c
 8001f44:	3301      	adds	r3, #1
 8001f46:	f8c7 332c 	str.w	r3, [r7, #812]	; 0x32c
 8001f4a:	f8d7 332c 	ldr.w	r3, [r7, #812]	; 0x32c
 8001f4e:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8001f52:	dbe4      	blt.n	8001f1e <main+0x66>
  }

  HAL_GPIO_WritePin(Z1Sel_GPIO_Port, Z1Sel_Pin, GPIO_PIN_RESET);
 8001f54:	2200      	movs	r2, #0
 8001f56:	2101      	movs	r1, #1
 8001f58:	48ad      	ldr	r0, [pc, #692]	; (8002210 <main+0x358>)
 8001f5a:	f004 fc8d 	bl	8006878 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(Z2Sel_GPIO_Port, Z2Sel_Pin, GPIO_PIN_RESET);
 8001f5e:	2200      	movs	r2, #0
 8001f60:	2102      	movs	r1, #2
 8001f62:	48ab      	ldr	r0, [pc, #684]	; (8002210 <main+0x358>)
 8001f64:	f004 fc88 	bl	8006878 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(Z3Sel_GPIO_Port, Z3Sel_Pin, GPIO_PIN_RESET);
 8001f68:	2200      	movs	r2, #0
 8001f6a:	2104      	movs	r1, #4
 8001f6c:	48a8      	ldr	r0, [pc, #672]	; (8002210 <main+0x358>)
 8001f6e:	f004 fc83 	bl	8006878 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(Z4Sel_GPIO_Port, Z4Sel_Pin, GPIO_PIN_RESET);
 8001f72:	2200      	movs	r2, #0
 8001f74:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001f78:	48a5      	ldr	r0, [pc, #660]	; (8002210 <main+0x358>)
 8001f7a:	f004 fc7d 	bl	8006878 <HAL_GPIO_WritePin>

  if ( (HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED) == HAL_OK)
 8001f7e:	2100      	movs	r1, #0
 8001f80:	48a4      	ldr	r0, [pc, #656]	; (8002214 <main+0x35c>)
 8001f82:	f003 f9b1 	bl	80052e8 <HAL_ADCEx_Calibration_Start>
 8001f86:	4603      	mov	r3, r0
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d113      	bne.n	8001fb4 <main+0xfc>
	&& (HAL_TIM_Base_Start_IT(&htim3) == HAL_OK)
 8001f8c:	48a2      	ldr	r0, [pc, #648]	; (8002218 <main+0x360>)
 8001f8e:	f006 fe53 	bl	8008c38 <HAL_TIM_Base_Start_IT>
 8001f92:	4603      	mov	r3, r0
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d10d      	bne.n	8001fb4 <main+0xfc>
	&& (HAL_TIM_Base_Start_IT(&htim4) == HAL_OK) ) {
 8001f98:	48a0      	ldr	r0, [pc, #640]	; (800221c <main+0x364>)
 8001f9a:	f006 fe4d 	bl	8008c38 <HAL_TIM_Base_Start_IT>
 8001f9e:	4603      	mov	r3, r0
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d107      	bne.n	8001fb4 <main+0xfc>
	  HAL_UART_Transmit(&huart1, (uint8_t *) FINISH_TEXT, sizeof(FINISH_TEXT), 1000);
 8001fa4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001fa8:	220f      	movs	r2, #15
 8001faa:	499d      	ldr	r1, [pc, #628]	; (8002220 <main+0x368>)
 8001fac:	4893      	ldr	r0, [pc, #588]	; (80021fc <main+0x344>)
 8001fae:	f008 fe7f 	bl	800acb0 <HAL_UART_Transmit>
 8001fb2:	e00c      	b.n	8001fce <main+0x116>
  } else {
	  HAL_UART_Transmit(&huart1, (uint8_t *) ERROR_TEXT, sizeof(ERROR_TEXT), 1000);
 8001fb4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001fb8:	2216      	movs	r2, #22
 8001fba:	499a      	ldr	r1, [pc, #616]	; (8002224 <main+0x36c>)
 8001fbc:	488f      	ldr	r0, [pc, #572]	; (80021fc <main+0x344>)
 8001fbe:	f008 fe77 	bl	800acb0 <HAL_UART_Transmit>
	  HAL_Delay(1000);
 8001fc2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001fc6:	f002 fdef 	bl	8004ba8 <HAL_Delay>
	  HAL_NVIC_SystemReset();
 8001fca:	f004 f8de 	bl	800618a <HAL_NVIC_SystemReset>
  }

  /* Test AD5245 */
	#ifdef AD5245
  currentLevel = 0;
 8001fce:	4b96      	ldr	r3, [pc, #600]	; (8002228 <main+0x370>)
 8001fd0:	2200      	movs	r2, #0
 8001fd2:	701a      	strb	r2, [r3, #0]
	  AD5245level(currentLevel);
 8001fd4:	4b94      	ldr	r3, [pc, #592]	; (8002228 <main+0x370>)
 8001fd6:	781b      	ldrb	r3, [r3, #0]
 8001fd8:	4618      	mov	r0, r3
 8001fda:	f7ff ff4f 	bl	8001e7c <AD5245level>
	#endif
	double refArray[REF_COUNT] =
 8001fde:	f507 734c 	add.w	r3, r7, #816	; 0x330
 8001fe2:	f5a3 734c 	sub.w	r3, r3, #816	; 0x330
 8001fe6:	4a91      	ldr	r2, [pc, #580]	; (800222c <main+0x374>)
 8001fe8:	4618      	mov	r0, r3
 8001fea:	4611      	mov	r1, r2
 8001fec:	f44f 7348 	mov.w	r3, #800	; 0x320
 8001ff0:	461a      	mov	r2, r3
 8001ff2:	f009 fafb 	bl	800b5ec <memcpy>
			-160.39, 713.11, 1325.14, 1472.77, 1122.73, 421.84, -380.02, -1039.83, -1317.47, -1153.01, -623.86, 80.94, 750.52, 1144.58,
			1139.43, 767.25
	};
  while (1)
  {
	  if (readyData) {
 8001ff6:	4b8e      	ldr	r3, [pc, #568]	; (8002230 <main+0x378>)
 8001ff8:	781b      	ldrb	r3, [r3, #0]
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d0fb      	beq.n	8001ff6 <main+0x13e>
		  HAL_TIM_Base_Stop_IT(&htim4);
 8001ffe:	4887      	ldr	r0, [pc, #540]	; (800221c <main+0x364>)
 8002000:	f006 fe84 	bl	8008d0c <HAL_TIM_Base_Stop_IT>
		  memset(SndBuffer, 0, sizeof(SndBuffer));
 8002004:	2264      	movs	r2, #100	; 0x64
 8002006:	2100      	movs	r1, #0
 8002008:	488a      	ldr	r0, [pc, #552]	; (8002234 <main+0x37c>)
 800200a:	f009 fafd 	bl	800b608 <memset>
		#ifdef RAW_DATA_OUT
		  HAL_UART_Transmit(&huart1, (uint8_t *) "---\n\r", sizeof("---\n\r"), 1000);
		#endif
		  for (int ii = 0; ii < CONVERSION_COUNT; ii++) {
 800200e:	2300      	movs	r3, #0
 8002010:	f8c7 3328 	str.w	r3, [r7, #808]	; 0x328
 8002014:	e022      	b.n	800205c <main+0x1a4>
			measArray[ii] = measArray[ii] / MEASURE_COUNT - avgLevel;
 8002016:	4a7d      	ldr	r2, [pc, #500]	; (800220c <main+0x354>)
 8002018:	f8d7 3328 	ldr.w	r3, [r7, #808]	; 0x328
 800201c:	00db      	lsls	r3, r3, #3
 800201e:	4413      	add	r3, r2
 8002020:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002024:	f04f 0200 	mov.w	r2, #0
 8002028:	4b83      	ldr	r3, [pc, #524]	; (8002238 <main+0x380>)
 800202a:	f7fe fc0f 	bl	800084c <__aeabi_ddiv>
 800202e:	4602      	mov	r2, r0
 8002030:	460b      	mov	r3, r1
 8002032:	4610      	mov	r0, r2
 8002034:	4619      	mov	r1, r3
 8002036:	4b81      	ldr	r3, [pc, #516]	; (800223c <main+0x384>)
 8002038:	e9d3 2300 	ldrd	r2, r3, [r3]
 800203c:	f7fe f924 	bl	8000288 <__aeabi_dsub>
 8002040:	4602      	mov	r2, r0
 8002042:	460b      	mov	r3, r1
 8002044:	4871      	ldr	r0, [pc, #452]	; (800220c <main+0x354>)
 8002046:	f8d7 1328 	ldr.w	r1, [r7, #808]	; 0x328
 800204a:	00c9      	lsls	r1, r1, #3
 800204c:	4401      	add	r1, r0
 800204e:	e9c1 2300 	strd	r2, r3, [r1]
		  for (int ii = 0; ii < CONVERSION_COUNT; ii++) {
 8002052:	f8d7 3328 	ldr.w	r3, [r7, #808]	; 0x328
 8002056:	3301      	adds	r3, #1
 8002058:	f8c7 3328 	str.w	r3, [r7, #808]	; 0x328
 800205c:	f8d7 3328 	ldr.w	r3, [r7, #808]	; 0x328
 8002060:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8002064:	dbd7      	blt.n	8002016 <main+0x15e>
		  }
		#ifdef RAW_DATA_OUT
		  HAL_UART_Transmit(&huart1, (uint8_t *) "---\n\r", sizeof("---\n\r"), 1000);
		#endif
		#ifndef RAW_DATA_OUT
			maxLev = 0;
 8002066:	4976      	ldr	r1, [pc, #472]	; (8002240 <main+0x388>)
 8002068:	f04f 0200 	mov.w	r2, #0
 800206c:	f04f 0300 	mov.w	r3, #0
 8002070:	e9c1 2300 	strd	r2, r3, [r1]
			maxIndex = 0;
 8002074:	4973      	ldr	r1, [pc, #460]	; (8002244 <main+0x38c>)
 8002076:	f04f 0200 	mov.w	r2, #0
 800207a:	f04f 0300 	mov.w	r3, #0
 800207e:	e9c1 2300 	strd	r2, r3, [r1]
			maxAmp = 0;
 8002082:	4971      	ldr	r1, [pc, #452]	; (8002248 <main+0x390>)
 8002084:	f04f 0200 	mov.w	r2, #0
 8002088:	f04f 0300 	mov.w	r3, #0
 800208c:	e9c1 2300 	strd	r2, r3, [r1]
			maxIdxAmp = 0;
 8002090:	496e      	ldr	r1, [pc, #440]	; (800224c <main+0x394>)
 8002092:	f04f 0200 	mov.w	r2, #0
 8002096:	f04f 0300 	mov.w	r3, #0
 800209a:	e9c1 2300 	strd	r2, r3, [r1]
		#ifdef FFTDEBUG
			HAL_UART_Transmit(&huart1, (uint8_t *) "Start calculate maxEnv\n\r", sizeof("Start calculate maxEnv\n\r"), 1000);
		#endif
			//argInit_200x1_real_T(b_dv);
			//argInit_76x1_real_T(b_dv1);
			maxIdxAmp = maxEnvHilbert(measArray, refArray);
 800209e:	463b      	mov	r3, r7
 80020a0:	4619      	mov	r1, r3
 80020a2:	485a      	ldr	r0, [pc, #360]	; (800220c <main+0x354>)
 80020a4:	f000 fe7c 	bl	8002da0 <maxEnvHilbert>
 80020a8:	eeb0 7a40 	vmov.f32	s14, s0
 80020ac:	eef0 7a60 	vmov.f32	s15, s1
 80020b0:	4b66      	ldr	r3, [pc, #408]	; (800224c <main+0x394>)
 80020b2:	ed83 7b00 	vstr	d7, [r3]
			maxIndex = maxIdxAmp;
 80020b6:	4b65      	ldr	r3, [pc, #404]	; (800224c <main+0x394>)
 80020b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020bc:	4961      	ldr	r1, [pc, #388]	; (8002244 <main+0x38c>)
 80020be:	e9c1 2300 	strd	r2, r3, [r1]
			//maxEnvHilbert_terminate();
		  memset(SndBuffer, 0, sizeof(SndBuffer));
 80020c2:	2264      	movs	r2, #100	; 0x64
 80020c4:	2100      	movs	r1, #0
 80020c6:	485b      	ldr	r0, [pc, #364]	; (8002234 <main+0x37c>)
 80020c8:	f009 fa9e 	bl	800b608 <memset>
		  //float vSound =
		  sprintf(SndBuffer, "Idx:%4.1f, maxLev: %6.2f, avgLev:%6.2f, CAP: %lu, V: %5.2f, Vc:%5.2f  \r",
 80020cc:	4b5f      	ldr	r3, [pc, #380]	; (800224c <main+0x394>)
 80020ce:	e9d3 ab00 	ldrd	sl, fp, [r3]
 80020d2:	4b5b      	ldr	r3, [pc, #364]	; (8002240 <main+0x388>)
 80020d4:	e9d3 4500 	ldrd	r4, r5, [r3]
 80020d8:	4b58      	ldr	r3, [pc, #352]	; (800223c <main+0x384>)
 80020da:	e9d3 8900 	ldrd	r8, r9, [r3]
 80020de:	4b5c      	ldr	r3, [pc, #368]	; (8002250 <main+0x398>)
 80020e0:	681e      	ldr	r6, [r3, #0]
				  maxIdxAmp, maxLev, avgLevel, finishCapture,
				  204000 / ((double) 1/72 * (MEASURMENT_DALAY + finishCapture + TIM1->ARR * TIM1->RCR)),
 80020e2:	4b5c      	ldr	r3, [pc, #368]	; (8002254 <main+0x39c>)
 80020e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020e6:	4a5b      	ldr	r2, [pc, #364]	; (8002254 <main+0x39c>)
 80020e8:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80020ea:	fb03 f202 	mul.w	r2, r3, r2
 80020ee:	4b58      	ldr	r3, [pc, #352]	; (8002250 <main+0x398>)
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	4413      	add	r3, r2
 80020f4:	f503 431c 	add.w	r3, r3, #39936	; 0x9c00
 80020f8:	3340      	adds	r3, #64	; 0x40
 80020fa:	4618      	mov	r0, r3
 80020fc:	f7fe fa02 	bl	8000504 <__aeabi_ui2d>
 8002100:	a335      	add	r3, pc, #212	; (adr r3, 80021d8 <main+0x320>)
 8002102:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002106:	f7fe fa77 	bl	80005f8 <__aeabi_dmul>
 800210a:	4602      	mov	r2, r0
 800210c:	460b      	mov	r3, r1
		  sprintf(SndBuffer, "Idx:%4.1f, maxLev: %6.2f, avgLev:%6.2f, CAP: %lu, V: %5.2f, Vc:%5.2f  \r",
 800210e:	a134      	add	r1, pc, #208	; (adr r1, 80021e0 <main+0x328>)
 8002110:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002114:	f7fe fb9a 	bl	800084c <__aeabi_ddiv>
 8002118:	4602      	mov	r2, r0
 800211a:	460b      	mov	r3, r1
 800211c:	ec43 2b18 	vmov	d8, r2, r3
				  204000 / ((double) 1/72 * (MEASURMENT_DALAY + maxIdxAmp * 32.258)));
 8002120:	4b4a      	ldr	r3, [pc, #296]	; (800224c <main+0x394>)
 8002122:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002126:	a330      	add	r3, pc, #192	; (adr r3, 80021e8 <main+0x330>)
 8002128:	e9d3 2300 	ldrd	r2, r3, [r3]
 800212c:	f7fe fa64 	bl	80005f8 <__aeabi_dmul>
 8002130:	4602      	mov	r2, r0
 8002132:	460b      	mov	r3, r1
 8002134:	4610      	mov	r0, r2
 8002136:	4619      	mov	r1, r3
 8002138:	a32d      	add	r3, pc, #180	; (adr r3, 80021f0 <main+0x338>)
 800213a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800213e:	f7fe f8a5 	bl	800028c <__adddf3>
 8002142:	4602      	mov	r2, r0
 8002144:	460b      	mov	r3, r1
 8002146:	4610      	mov	r0, r2
 8002148:	4619      	mov	r1, r3
 800214a:	a323      	add	r3, pc, #140	; (adr r3, 80021d8 <main+0x320>)
 800214c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002150:	f7fe fa52 	bl	80005f8 <__aeabi_dmul>
 8002154:	4602      	mov	r2, r0
 8002156:	460b      	mov	r3, r1
		  sprintf(SndBuffer, "Idx:%4.1f, maxLev: %6.2f, avgLev:%6.2f, CAP: %lu, V: %5.2f, Vc:%5.2f  \r",
 8002158:	a121      	add	r1, pc, #132	; (adr r1, 80021e0 <main+0x328>)
 800215a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800215e:	f7fe fb75 	bl	800084c <__aeabi_ddiv>
 8002162:	4602      	mov	r2, r0
 8002164:	460b      	mov	r3, r1
 8002166:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800216a:	ed8d 8b06 	vstr	d8, [sp, #24]
 800216e:	9604      	str	r6, [sp, #16]
 8002170:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8002174:	e9cd 4500 	strd	r4, r5, [sp]
 8002178:	4652      	mov	r2, sl
 800217a:	465b      	mov	r3, fp
 800217c:	4936      	ldr	r1, [pc, #216]	; (8002258 <main+0x3a0>)
 800217e:	482d      	ldr	r0, [pc, #180]	; (8002234 <main+0x37c>)
 8002180:	f009 feb4 	bl	800beec <siprintf>
	  	  HAL_UART_Transmit(&huart1, (uint8_t *) SndBuffer, sizeof(SndBuffer), 1000);
 8002184:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002188:	2264      	movs	r2, #100	; 0x64
 800218a:	492a      	ldr	r1, [pc, #168]	; (8002234 <main+0x37c>)
 800218c:	481b      	ldr	r0, [pc, #108]	; (80021fc <main+0x344>)
 800218e:	f008 fd8f 	bl	800acb0 <HAL_UART_Transmit>
		#endif
		  for (int ii = 0; ii < CONVERSION_COUNT; ii++) {
 8002192:	2300      	movs	r3, #0
 8002194:	f8c7 3324 	str.w	r3, [r7, #804]	; 0x324
 8002198:	e00f      	b.n	80021ba <main+0x302>
			  measArray[ii] = 0;
 800219a:	4a1c      	ldr	r2, [pc, #112]	; (800220c <main+0x354>)
 800219c:	f8d7 3324 	ldr.w	r3, [r7, #804]	; 0x324
 80021a0:	00db      	lsls	r3, r3, #3
 80021a2:	18d1      	adds	r1, r2, r3
 80021a4:	f04f 0200 	mov.w	r2, #0
 80021a8:	f04f 0300 	mov.w	r3, #0
 80021ac:	e9c1 2300 	strd	r2, r3, [r1]
		  for (int ii = 0; ii < CONVERSION_COUNT; ii++) {
 80021b0:	f8d7 3324 	ldr.w	r3, [r7, #804]	; 0x324
 80021b4:	3301      	adds	r3, #1
 80021b6:	f8c7 3324 	str.w	r3, [r7, #804]	; 0x324
 80021ba:	f8d7 3324 	ldr.w	r3, [r7, #804]	; 0x324
 80021be:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 80021c2:	dbea      	blt.n	800219a <main+0x2e2>
		  }
	  	  readyData = false;
 80021c4:	4b1a      	ldr	r3, [pc, #104]	; (8002230 <main+0x378>)
 80021c6:	2200      	movs	r2, #0
 80021c8:	701a      	strb	r2, [r3, #0]
	  	HAL_TIM_Base_Start_IT(&htim4);
 80021ca:	4814      	ldr	r0, [pc, #80]	; (800221c <main+0x364>)
 80021cc:	f006 fd34 	bl	8008c38 <HAL_TIM_Base_Start_IT>
	  if (readyData) {
 80021d0:	e711      	b.n	8001ff6 <main+0x13e>
 80021d2:	bf00      	nop
 80021d4:	f3af 8000 	nop.w
 80021d8:	1c71c71c 	.word	0x1c71c71c
 80021dc:	3f8c71c7 	.word	0x3f8c71c7
 80021e0:	00000000 	.word	0x00000000
 80021e4:	4108e700 	.word	0x4108e700
 80021e8:	24dd2f1b 	.word	0x24dd2f1b
 80021ec:	40402106 	.word	0x40402106
 80021f0:	00000000 	.word	0x00000000
 80021f4:	40e38800 	.word	0x40e38800
 80021f8:	0800e598 	.word	0x0800e598
 80021fc:	20006a74 	.word	0x20006a74
 8002200:	20007eaa 	.word	0x20007eaa
 8002204:	40000400 	.word	0x40000400
 8002208:	20007b88 	.word	0x20007b88
 800220c:	20007eb8 	.word	0x20007eb8
 8002210:	48000400 	.word	0x48000400
 8002214:	200067f8 	.word	0x200067f8
 8002218:	200069dc 	.word	0x200069dc
 800221c:	20006a28 	.word	0x20006a28
 8002220:	0800e5b0 	.word	0x0800e5b0
 8002224:	0800e5c0 	.word	0x0800e5c0
 8002228:	20000204 	.word	0x20000204
 800222c:	0800e620 	.word	0x0800e620
 8002230:	20008b38 	.word	0x20008b38
 8002234:	20000208 	.word	0x20000208
 8002238:	40590000 	.word	0x40590000
 800223c:	20008b40 	.word	0x20008b40
 8002240:	20008b48 	.word	0x20008b48
 8002244:	20008b60 	.word	0x20008b60
 8002248:	20008b50 	.word	0x20008b50
 800224c:	20008b58 	.word	0x20008b58
 8002250:	2000026c 	.word	0x2000026c
 8002254:	40012c00 	.word	0x40012c00
 8002258:	0800e5d8 	.word	0x0800e5d8

0800225c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800225c:	b580      	push	{r7, lr}
 800225e:	b09e      	sub	sp, #120	; 0x78
 8002260:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002262:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8002266:	2228      	movs	r2, #40	; 0x28
 8002268:	2100      	movs	r1, #0
 800226a:	4618      	mov	r0, r3
 800226c:	f009 f9cc 	bl	800b608 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002270:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002274:	2200      	movs	r2, #0
 8002276:	601a      	str	r2, [r3, #0]
 8002278:	605a      	str	r2, [r3, #4]
 800227a:	609a      	str	r2, [r3, #8]
 800227c:	60da      	str	r2, [r3, #12]
 800227e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002280:	463b      	mov	r3, r7
 8002282:	223c      	movs	r2, #60	; 0x3c
 8002284:	2100      	movs	r1, #0
 8002286:	4618      	mov	r0, r3
 8002288:	f009 f9be 	bl	800b608 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800228c:	2301      	movs	r3, #1
 800228e:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002290:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002294:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV2;
 8002296:	2301      	movs	r3, #1
 8002298:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800229a:	2301      	movs	r3, #1
 800229c:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800229e:	2302      	movs	r3, #2
 80022a0:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80022a2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80022a6:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80022a8:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80022ac:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80022ae:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80022b2:	4618      	mov	r0, r3
 80022b4:	f004 ff98 	bl	80071e8 <HAL_RCC_OscConfig>
 80022b8:	4603      	mov	r3, r0
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d001      	beq.n	80022c2 <SystemClock_Config+0x66>
  {
    Error_Handler();
 80022be:	f000 fcb1 	bl	8002c24 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80022c2:	230f      	movs	r3, #15
 80022c4:	63fb      	str	r3, [r7, #60]	; 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80022c6:	2302      	movs	r3, #2
 80022c8:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80022ca:	2300      	movs	r3, #0
 80022cc:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80022ce:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80022d2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80022d4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80022d8:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80022da:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80022de:	2102      	movs	r1, #2
 80022e0:	4618      	mov	r0, r3
 80022e2:	f005 ffbf 	bl	8008264 <HAL_RCC_ClockConfig>
 80022e6:	4603      	mov	r3, r0
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d001      	beq.n	80022f0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80022ec:	f000 fc9a 	bl	8002c24 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_USART2
 80022f0:	f241 03a3 	movw	r3, #4259	; 0x10a3
 80022f4:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_I2C1|RCC_PERIPHCLK_TIM1
                              |RCC_PERIPHCLK_ADC12;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80022f6:	2300      	movs	r3, #0
 80022f8:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80022fa:	2300      	movs	r3, #0
 80022fc:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12PLLCLK_DIV1;
 80022fe:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002302:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_SYSCLK;
 8002304:	2310      	movs	r3, #16
 8002306:	61fb      	str	r3, [r7, #28]
  PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLK_HCLK;
 8002308:	2300      	movs	r3, #0
 800230a:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800230c:	463b      	mov	r3, r7
 800230e:	4618      	mov	r0, r3
 8002310:	f006 f9e0 	bl	80086d4 <HAL_RCCEx_PeriphCLKConfig>
 8002314:	4603      	mov	r3, r0
 8002316:	2b00      	cmp	r3, #0
 8002318:	d001      	beq.n	800231e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800231a:	f000 fc83 	bl	8002c24 <Error_Handler>
  }
}
 800231e:	bf00      	nop
 8002320:	3778      	adds	r7, #120	; 0x78
 8002322:	46bd      	mov	sp, r7
 8002324:	bd80      	pop	{r7, pc}
	...

08002328 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8002328:	b580      	push	{r7, lr}
 800232a:	b08a      	sub	sp, #40	; 0x28
 800232c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800232e:	f107 031c 	add.w	r3, r7, #28
 8002332:	2200      	movs	r2, #0
 8002334:	601a      	str	r2, [r3, #0]
 8002336:	605a      	str	r2, [r3, #4]
 8002338:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800233a:	1d3b      	adds	r3, r7, #4
 800233c:	2200      	movs	r2, #0
 800233e:	601a      	str	r2, [r3, #0]
 8002340:	605a      	str	r2, [r3, #4]
 8002342:	609a      	str	r2, [r3, #8]
 8002344:	60da      	str	r2, [r3, #12]
 8002346:	611a      	str	r2, [r3, #16]
 8002348:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800234a:	4b2f      	ldr	r3, [pc, #188]	; (8002408 <MX_ADC1_Init+0xe0>)
 800234c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8002350:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8002352:	4b2d      	ldr	r3, [pc, #180]	; (8002408 <MX_ADC1_Init+0xe0>)
 8002354:	2200      	movs	r2, #0
 8002356:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8002358:	4b2b      	ldr	r3, [pc, #172]	; (8002408 <MX_ADC1_Init+0xe0>)
 800235a:	2200      	movs	r2, #0
 800235c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800235e:	4b2a      	ldr	r3, [pc, #168]	; (8002408 <MX_ADC1_Init+0xe0>)
 8002360:	2200      	movs	r2, #0
 8002362:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8002364:	4b28      	ldr	r3, [pc, #160]	; (8002408 <MX_ADC1_Init+0xe0>)
 8002366:	2201      	movs	r2, #1
 8002368:	765a      	strb	r2, [r3, #25]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800236a:	4b27      	ldr	r3, [pc, #156]	; (8002408 <MX_ADC1_Init+0xe0>)
 800236c:	2200      	movs	r2, #0
 800236e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8002372:	4b25      	ldr	r3, [pc, #148]	; (8002408 <MX_ADC1_Init+0xe0>)
 8002374:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002378:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T3_TRGO;
 800237a:	4b23      	ldr	r3, [pc, #140]	; (8002408 <MX_ADC1_Init+0xe0>)
 800237c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002380:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002382:	4b21      	ldr	r3, [pc, #132]	; (8002408 <MX_ADC1_Init+0xe0>)
 8002384:	2200      	movs	r2, #0
 8002386:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8002388:	4b1f      	ldr	r3, [pc, #124]	; (8002408 <MX_ADC1_Init+0xe0>)
 800238a:	2201      	movs	r2, #1
 800238c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 800238e:	4b1e      	ldr	r3, [pc, #120]	; (8002408 <MX_ADC1_Init+0xe0>)
 8002390:	2201      	movs	r2, #1
 8002392:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8002396:	4b1c      	ldr	r3, [pc, #112]	; (8002408 <MX_ADC1_Init+0xe0>)
 8002398:	2208      	movs	r2, #8
 800239a:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800239c:	4b1a      	ldr	r3, [pc, #104]	; (8002408 <MX_ADC1_Init+0xe0>)
 800239e:	2200      	movs	r2, #0
 80023a0:	761a      	strb	r2, [r3, #24]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 80023a2:	4b19      	ldr	r3, [pc, #100]	; (8002408 <MX_ADC1_Init+0xe0>)
 80023a4:	2200      	movs	r2, #0
 80023a6:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80023a8:	4817      	ldr	r0, [pc, #92]	; (8002408 <MX_ADC1_Init+0xe0>)
 80023aa:	f002 fc3f 	bl	8004c2c <HAL_ADC_Init>
 80023ae:	4603      	mov	r3, r0
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d001      	beq.n	80023b8 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80023b4:	f000 fc36 	bl	8002c24 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80023b8:	2300      	movs	r3, #0
 80023ba:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80023bc:	f107 031c 	add.w	r3, r7, #28
 80023c0:	4619      	mov	r1, r3
 80023c2:	4811      	ldr	r0, [pc, #68]	; (8002408 <MX_ADC1_Init+0xe0>)
 80023c4:	f003 faee 	bl	80059a4 <HAL_ADCEx_MultiModeConfigChannel>
 80023c8:	4603      	mov	r3, r0
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d001      	beq.n	80023d2 <MX_ADC1_Init+0xaa>
  {
    Error_Handler();
 80023ce:	f000 fc29 	bl	8002c24 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80023d2:	2301      	movs	r3, #1
 80023d4:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80023d6:	2301      	movs	r3, #1
 80023d8:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80023da:	2300      	movs	r3, #0
 80023dc:	613b      	str	r3, [r7, #16]
  sConfig.SamplingTime = ADC_SAMPLETIME_19CYCLES_5;
 80023de:	2304      	movs	r3, #4
 80023e0:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80023e2:	2300      	movs	r3, #0
 80023e4:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80023e6:	2300      	movs	r3, #0
 80023e8:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80023ea:	1d3b      	adds	r3, r7, #4
 80023ec:	4619      	mov	r1, r3
 80023ee:	4806      	ldr	r0, [pc, #24]	; (8002408 <MX_ADC1_Init+0xe0>)
 80023f0:	f002 ffec 	bl	80053cc <HAL_ADC_ConfigChannel>
 80023f4:	4603      	mov	r3, r0
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d001      	beq.n	80023fe <MX_ADC1_Init+0xd6>
  {
    Error_Handler();
 80023fa:	f000 fc13 	bl	8002c24 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80023fe:	bf00      	nop
 8002400:	3728      	adds	r7, #40	; 0x28
 8002402:	46bd      	mov	sp, r7
 8002404:	bd80      	pop	{r7, pc}
 8002406:	bf00      	nop
 8002408:	200067f8 	.word	0x200067f8

0800240c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800240c:	b580      	push	{r7, lr}
 800240e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002410:	4b1b      	ldr	r3, [pc, #108]	; (8002480 <MX_I2C1_Init+0x74>)
 8002412:	4a1c      	ldr	r2, [pc, #112]	; (8002484 <MX_I2C1_Init+0x78>)
 8002414:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10808DD3;
 8002416:	4b1a      	ldr	r3, [pc, #104]	; (8002480 <MX_I2C1_Init+0x74>)
 8002418:	4a1b      	ldr	r2, [pc, #108]	; (8002488 <MX_I2C1_Init+0x7c>)
 800241a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800241c:	4b18      	ldr	r3, [pc, #96]	; (8002480 <MX_I2C1_Init+0x74>)
 800241e:	2200      	movs	r2, #0
 8002420:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002422:	4b17      	ldr	r3, [pc, #92]	; (8002480 <MX_I2C1_Init+0x74>)
 8002424:	2201      	movs	r2, #1
 8002426:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002428:	4b15      	ldr	r3, [pc, #84]	; (8002480 <MX_I2C1_Init+0x74>)
 800242a:	2200      	movs	r2, #0
 800242c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800242e:	4b14      	ldr	r3, [pc, #80]	; (8002480 <MX_I2C1_Init+0x74>)
 8002430:	2200      	movs	r2, #0
 8002432:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002434:	4b12      	ldr	r3, [pc, #72]	; (8002480 <MX_I2C1_Init+0x74>)
 8002436:	2200      	movs	r2, #0
 8002438:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800243a:	4b11      	ldr	r3, [pc, #68]	; (8002480 <MX_I2C1_Init+0x74>)
 800243c:	2200      	movs	r2, #0
 800243e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002440:	4b0f      	ldr	r3, [pc, #60]	; (8002480 <MX_I2C1_Init+0x74>)
 8002442:	2200      	movs	r2, #0
 8002444:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002446:	480e      	ldr	r0, [pc, #56]	; (8002480 <MX_I2C1_Init+0x74>)
 8002448:	f004 fa2e 	bl	80068a8 <HAL_I2C_Init>
 800244c:	4603      	mov	r3, r0
 800244e:	2b00      	cmp	r3, #0
 8002450:	d001      	beq.n	8002456 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8002452:	f000 fbe7 	bl	8002c24 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002456:	2100      	movs	r1, #0
 8002458:	4809      	ldr	r0, [pc, #36]	; (8002480 <MX_I2C1_Init+0x74>)
 800245a:	f004 fe2d 	bl	80070b8 <HAL_I2CEx_ConfigAnalogFilter>
 800245e:	4603      	mov	r3, r0
 8002460:	2b00      	cmp	r3, #0
 8002462:	d001      	beq.n	8002468 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8002464:	f000 fbde 	bl	8002c24 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8002468:	2100      	movs	r1, #0
 800246a:	4805      	ldr	r0, [pc, #20]	; (8002480 <MX_I2C1_Init+0x74>)
 800246c:	f004 fe6f 	bl	800714e <HAL_I2CEx_ConfigDigitalFilter>
 8002470:	4603      	mov	r3, r0
 8002472:	2b00      	cmp	r3, #0
 8002474:	d001      	beq.n	800247a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8002476:	f000 fbd5 	bl	8002c24 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800247a:	bf00      	nop
 800247c:	bd80      	pop	{r7, pc}
 800247e:	bf00      	nop
 8002480:	2000688c 	.word	0x2000688c
 8002484:	40005400 	.word	0x40005400
 8002488:	10808dd3 	.word	0x10808dd3

0800248c <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 800248c:	b580      	push	{r7, lr}
 800248e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8002490:	4b1b      	ldr	r3, [pc, #108]	; (8002500 <MX_SPI2_Init+0x74>)
 8002492:	4a1c      	ldr	r2, [pc, #112]	; (8002504 <MX_SPI2_Init+0x78>)
 8002494:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8002496:	4b1a      	ldr	r3, [pc, #104]	; (8002500 <MX_SPI2_Init+0x74>)
 8002498:	f44f 7282 	mov.w	r2, #260	; 0x104
 800249c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800249e:	4b18      	ldr	r3, [pc, #96]	; (8002500 <MX_SPI2_Init+0x74>)
 80024a0:	2200      	movs	r2, #0
 80024a2:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 80024a4:	4b16      	ldr	r3, [pc, #88]	; (8002500 <MX_SPI2_Init+0x74>)
 80024a6:	f44f 7240 	mov.w	r2, #768	; 0x300
 80024aa:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80024ac:	4b14      	ldr	r3, [pc, #80]	; (8002500 <MX_SPI2_Init+0x74>)
 80024ae:	2200      	movs	r2, #0
 80024b0:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80024b2:	4b13      	ldr	r3, [pc, #76]	; (8002500 <MX_SPI2_Init+0x74>)
 80024b4:	2200      	movs	r2, #0
 80024b6:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_HARD_OUTPUT;
 80024b8:	4b11      	ldr	r3, [pc, #68]	; (8002500 <MX_SPI2_Init+0x74>)
 80024ba:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80024be:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80024c0:	4b0f      	ldr	r3, [pc, #60]	; (8002500 <MX_SPI2_Init+0x74>)
 80024c2:	2200      	movs	r2, #0
 80024c4:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80024c6:	4b0e      	ldr	r3, [pc, #56]	; (8002500 <MX_SPI2_Init+0x74>)
 80024c8:	2200      	movs	r2, #0
 80024ca:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80024cc:	4b0c      	ldr	r3, [pc, #48]	; (8002500 <MX_SPI2_Init+0x74>)
 80024ce:	2200      	movs	r2, #0
 80024d0:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80024d2:	4b0b      	ldr	r3, [pc, #44]	; (8002500 <MX_SPI2_Init+0x74>)
 80024d4:	2200      	movs	r2, #0
 80024d6:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 80024d8:	4b09      	ldr	r3, [pc, #36]	; (8002500 <MX_SPI2_Init+0x74>)
 80024da:	2207      	movs	r2, #7
 80024dc:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80024de:	4b08      	ldr	r3, [pc, #32]	; (8002500 <MX_SPI2_Init+0x74>)
 80024e0:	2200      	movs	r2, #0
 80024e2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80024e4:	4b06      	ldr	r3, [pc, #24]	; (8002500 <MX_SPI2_Init+0x74>)
 80024e6:	2208      	movs	r2, #8
 80024e8:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80024ea:	4805      	ldr	r0, [pc, #20]	; (8002500 <MX_SPI2_Init+0x74>)
 80024ec:	f006 faa2 	bl	8008a34 <HAL_SPI_Init>
 80024f0:	4603      	mov	r3, r0
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d001      	beq.n	80024fa <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 80024f6:	f000 fb95 	bl	8002c24 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80024fa:	bf00      	nop
 80024fc:	bd80      	pop	{r7, pc}
 80024fe:	bf00      	nop
 8002500:	200068e0 	.word	0x200068e0
 8002504:	40003800 	.word	0x40003800

08002508 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8002508:	b580      	push	{r7, lr}
 800250a:	b09a      	sub	sp, #104	; 0x68
 800250c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800250e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8002512:	2200      	movs	r2, #0
 8002514:	601a      	str	r2, [r3, #0]
 8002516:	605a      	str	r2, [r3, #4]
 8002518:	609a      	str	r2, [r3, #8]
 800251a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800251c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002520:	2200      	movs	r2, #0
 8002522:	601a      	str	r2, [r3, #0]
 8002524:	605a      	str	r2, [r3, #4]
 8002526:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002528:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800252c:	2200      	movs	r2, #0
 800252e:	601a      	str	r2, [r3, #0]
 8002530:	605a      	str	r2, [r3, #4]
 8002532:	609a      	str	r2, [r3, #8]
 8002534:	60da      	str	r2, [r3, #12]
 8002536:	611a      	str	r2, [r3, #16]
 8002538:	615a      	str	r2, [r3, #20]
 800253a:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800253c:	1d3b      	adds	r3, r7, #4
 800253e:	222c      	movs	r2, #44	; 0x2c
 8002540:	2100      	movs	r1, #0
 8002542:	4618      	mov	r0, r3
 8002544:	f009 f860 	bl	800b608 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002548:	4b59      	ldr	r3, [pc, #356]	; (80026b0 <MX_TIM1_Init+0x1a8>)
 800254a:	4a5a      	ldr	r2, [pc, #360]	; (80026b4 <MX_TIM1_Init+0x1ac>)
 800254c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800254e:	4b58      	ldr	r3, [pc, #352]	; (80026b0 <MX_TIM1_Init+0x1a8>)
 8002550:	2200      	movs	r2, #0
 8002552:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002554:	4b56      	ldr	r3, [pc, #344]	; (80026b0 <MX_TIM1_Init+0x1a8>)
 8002556:	2200      	movs	r2, #0
 8002558:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 179;
 800255a:	4b55      	ldr	r3, [pc, #340]	; (80026b0 <MX_TIM1_Init+0x1a8>)
 800255c:	22b3      	movs	r2, #179	; 0xb3
 800255e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002560:	4b53      	ldr	r3, [pc, #332]	; (80026b0 <MX_TIM1_Init+0x1a8>)
 8002562:	2200      	movs	r2, #0
 8002564:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 15;
 8002566:	4b52      	ldr	r3, [pc, #328]	; (80026b0 <MX_TIM1_Init+0x1a8>)
 8002568:	220f      	movs	r2, #15
 800256a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800256c:	4b50      	ldr	r3, [pc, #320]	; (80026b0 <MX_TIM1_Init+0x1a8>)
 800256e:	2200      	movs	r2, #0
 8002570:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8002572:	484f      	ldr	r0, [pc, #316]	; (80026b0 <MX_TIM1_Init+0x1a8>)
 8002574:	f006 fb09 	bl	8008b8a <HAL_TIM_Base_Init>
 8002578:	4603      	mov	r3, r0
 800257a:	2b00      	cmp	r3, #0
 800257c:	d001      	beq.n	8002582 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 800257e:	f000 fb51 	bl	8002c24 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002582:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002586:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8002588:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800258c:	4619      	mov	r1, r3
 800258e:	4848      	ldr	r0, [pc, #288]	; (80026b0 <MX_TIM1_Init+0x1a8>)
 8002590:	f007 fad4 	bl	8009b3c <HAL_TIM_ConfigClockSource>
 8002594:	4603      	mov	r3, r0
 8002596:	2b00      	cmp	r3, #0
 8002598:	d001      	beq.n	800259e <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 800259a:	f000 fb43 	bl	8002c24 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim1) != HAL_OK)
 800259e:	4844      	ldr	r0, [pc, #272]	; (80026b0 <MX_TIM1_Init+0x1a8>)
 80025a0:	f006 fbe3 	bl	8008d6a <HAL_TIM_OC_Init>
 80025a4:	4603      	mov	r3, r0
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d001      	beq.n	80025ae <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 80025aa:	f000 fb3b 	bl	8002c24 <Error_Handler>
  }
  if (HAL_TIM_OnePulse_Init(&htim1, TIM_OPMODE_SINGLE) != HAL_OK)
 80025ae:	2108      	movs	r1, #8
 80025b0:	483f      	ldr	r0, [pc, #252]	; (80026b0 <MX_TIM1_Init+0x1a8>)
 80025b2:	f007 f833 	bl	800961c <HAL_TIM_OnePulse_Init>
 80025b6:	4603      	mov	r3, r0
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d001      	beq.n	80025c0 <MX_TIM1_Init+0xb8>
  {
    Error_Handler();
 80025bc:	f000 fb32 	bl	8002c24 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80025c0:	2320      	movs	r3, #32
 80025c2:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80025c4:	2300      	movs	r3, #0
 80025c6:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80025c8:	2300      	movs	r3, #0
 80025ca:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80025cc:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80025d0:	4619      	mov	r1, r3
 80025d2:	4837      	ldr	r0, [pc, #220]	; (80026b0 <MX_TIM1_Init+0x1a8>)
 80025d4:	f008 fa02 	bl	800a9dc <HAL_TIMEx_MasterConfigSynchronization>
 80025d8:	4603      	mov	r3, r0
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d001      	beq.n	80025e2 <MX_TIM1_Init+0xda>
  {
    Error_Handler();
 80025de:	f000 fb21 	bl	8002c24 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TOGGLE;
 80025e2:	2330      	movs	r3, #48	; 0x30
 80025e4:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 80025e6:	2300      	movs	r3, #0
 80025e8:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80025ea:	2300      	movs	r3, #0
 80025ec:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80025ee:	2300      	movs	r3, #0
 80025f0:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80025f2:	2300      	movs	r3, #0
 80025f4:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80025f6:	2300      	movs	r3, #0
 80025f8:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80025fa:	2300      	movs	r3, #0
 80025fc:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80025fe:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002602:	2200      	movs	r2, #0
 8002604:	4619      	mov	r1, r3
 8002606:	482a      	ldr	r0, [pc, #168]	; (80026b0 <MX_TIM1_Init+0x1a8>)
 8002608:	f007 f982 	bl	8009910 <HAL_TIM_OC_ConfigChannel>
 800260c:	4603      	mov	r3, r0
 800260e:	2b00      	cmp	r3, #0
 8002610:	d001      	beq.n	8002616 <MX_TIM1_Init+0x10e>
  {
    Error_Handler();
 8002612:	f000 fb07 	bl	8002c24 <Error_Handler>
  }
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002616:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800261a:	2204      	movs	r2, #4
 800261c:	4619      	mov	r1, r3
 800261e:	4824      	ldr	r0, [pc, #144]	; (80026b0 <MX_TIM1_Init+0x1a8>)
 8002620:	f007 f976 	bl	8009910 <HAL_TIM_OC_ConfigChannel>
 8002624:	4603      	mov	r3, r0
 8002626:	2b00      	cmp	r3, #0
 8002628:	d001      	beq.n	800262e <MX_TIM1_Init+0x126>
  {
    Error_Handler();
 800262a:	f000 fafb 	bl	8002c24 <Error_Handler>
  }
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800262e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002632:	2208      	movs	r2, #8
 8002634:	4619      	mov	r1, r3
 8002636:	481e      	ldr	r0, [pc, #120]	; (80026b0 <MX_TIM1_Init+0x1a8>)
 8002638:	f007 f96a 	bl	8009910 <HAL_TIM_OC_ConfigChannel>
 800263c:	4603      	mov	r3, r0
 800263e:	2b00      	cmp	r3, #0
 8002640:	d001      	beq.n	8002646 <MX_TIM1_Init+0x13e>
  {
    Error_Handler();
 8002642:	f000 faef 	bl	8002c24 <Error_Handler>
  }
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8002646:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800264a:	220c      	movs	r2, #12
 800264c:	4619      	mov	r1, r3
 800264e:	4818      	ldr	r0, [pc, #96]	; (80026b0 <MX_TIM1_Init+0x1a8>)
 8002650:	f007 f95e 	bl	8009910 <HAL_TIM_OC_ConfigChannel>
 8002654:	4603      	mov	r3, r0
 8002656:	2b00      	cmp	r3, #0
 8002658:	d001      	beq.n	800265e <MX_TIM1_Init+0x156>
  {
    Error_Handler();
 800265a:	f000 fae3 	bl	8002c24 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800265e:	2300      	movs	r3, #0
 8002660:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002662:	2300      	movs	r3, #0
 8002664:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002666:	2300      	movs	r3, #0
 8002668:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800266a:	2300      	movs	r3, #0
 800266c:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800266e:	2300      	movs	r3, #0
 8002670:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002672:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002676:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8002678:	2300      	movs	r3, #0
 800267a:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 800267c:	2300      	movs	r3, #0
 800267e:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8002680:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002684:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8002686:	2300      	movs	r3, #0
 8002688:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800268a:	2300      	movs	r3, #0
 800268c:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800268e:	1d3b      	adds	r3, r7, #4
 8002690:	4619      	mov	r1, r3
 8002692:	4807      	ldr	r0, [pc, #28]	; (80026b0 <MX_TIM1_Init+0x1a8>)
 8002694:	f008 fa22 	bl	800aadc <HAL_TIMEx_ConfigBreakDeadTime>
 8002698:	4603      	mov	r3, r0
 800269a:	2b00      	cmp	r3, #0
 800269c:	d001      	beq.n	80026a2 <MX_TIM1_Init+0x19a>
  {
    Error_Handler();
 800269e:	f000 fac1 	bl	8002c24 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80026a2:	4803      	ldr	r0, [pc, #12]	; (80026b0 <MX_TIM1_Init+0x1a8>)
 80026a4:	f001 fe56 	bl	8004354 <HAL_TIM_MspPostInit>

}
 80026a8:	bf00      	nop
 80026aa:	3768      	adds	r7, #104	; 0x68
 80026ac:	46bd      	mov	sp, r7
 80026ae:	bd80      	pop	{r7, pc}
 80026b0:	20006944 	.word	0x20006944
 80026b4:	40012c00 	.word	0x40012c00

080026b8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80026b8:	b580      	push	{r7, lr}
 80026ba:	b090      	sub	sp, #64	; 0x40
 80026bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80026be:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80026c2:	2200      	movs	r2, #0
 80026c4:	601a      	str	r2, [r3, #0]
 80026c6:	605a      	str	r2, [r3, #4]
 80026c8:	609a      	str	r2, [r3, #8]
 80026ca:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 80026cc:	f107 031c 	add.w	r3, r7, #28
 80026d0:	2200      	movs	r2, #0
 80026d2:	601a      	str	r2, [r3, #0]
 80026d4:	605a      	str	r2, [r3, #4]
 80026d6:	609a      	str	r2, [r3, #8]
 80026d8:	60da      	str	r2, [r3, #12]
 80026da:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80026dc:	f107 0310 	add.w	r3, r7, #16
 80026e0:	2200      	movs	r2, #0
 80026e2:	601a      	str	r2, [r3, #0]
 80026e4:	605a      	str	r2, [r3, #4]
 80026e6:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80026e8:	463b      	mov	r3, r7
 80026ea:	2200      	movs	r2, #0
 80026ec:	601a      	str	r2, [r3, #0]
 80026ee:	605a      	str	r2, [r3, #4]
 80026f0:	609a      	str	r2, [r3, #8]
 80026f2:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80026f4:	4b33      	ldr	r3, [pc, #204]	; (80027c4 <MX_TIM2_Init+0x10c>)
 80026f6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80026fa:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80026fc:	4b31      	ldr	r3, [pc, #196]	; (80027c4 <MX_TIM2_Init+0x10c>)
 80026fe:	2200      	movs	r2, #0
 8002700:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002702:	4b30      	ldr	r3, [pc, #192]	; (80027c4 <MX_TIM2_Init+0x10c>)
 8002704:	2200      	movs	r2, #0
 8002706:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8002708:	4b2e      	ldr	r3, [pc, #184]	; (80027c4 <MX_TIM2_Init+0x10c>)
 800270a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800270e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002710:	4b2c      	ldr	r3, [pc, #176]	; (80027c4 <MX_TIM2_Init+0x10c>)
 8002712:	2200      	movs	r2, #0
 8002714:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002716:	4b2b      	ldr	r3, [pc, #172]	; (80027c4 <MX_TIM2_Init+0x10c>)
 8002718:	2280      	movs	r2, #128	; 0x80
 800271a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800271c:	4829      	ldr	r0, [pc, #164]	; (80027c4 <MX_TIM2_Init+0x10c>)
 800271e:	f006 fa34 	bl	8008b8a <HAL_TIM_Base_Init>
 8002722:	4603      	mov	r3, r0
 8002724:	2b00      	cmp	r3, #0
 8002726:	d001      	beq.n	800272c <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 8002728:	f000 fa7c 	bl	8002c24 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800272c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002730:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002732:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002736:	4619      	mov	r1, r3
 8002738:	4822      	ldr	r0, [pc, #136]	; (80027c4 <MX_TIM2_Init+0x10c>)
 800273a:	f007 f9ff 	bl	8009b3c <HAL_TIM_ConfigClockSource>
 800273e:	4603      	mov	r3, r0
 8002740:	2b00      	cmp	r3, #0
 8002742:	d001      	beq.n	8002748 <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 8002744:	f000 fa6e 	bl	8002c24 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 8002748:	481e      	ldr	r0, [pc, #120]	; (80027c4 <MX_TIM2_Init+0x10c>)
 800274a:	f006 fd05 	bl	8009158 <HAL_TIM_IC_Init>
 800274e:	4603      	mov	r3, r0
 8002750:	2b00      	cmp	r3, #0
 8002752:	d001      	beq.n	8002758 <MX_TIM2_Init+0xa0>
  {
    Error_Handler();
 8002754:	f000 fa66 	bl	8002c24 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 8002758:	2304      	movs	r3, #4
 800275a:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.InputTrigger = TIM_TS_ITR2;
 800275c:	2320      	movs	r3, #32
 800275e:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_SlaveConfigSynchro(&htim2, &sSlaveConfig) != HAL_OK)
 8002760:	f107 031c 	add.w	r3, r7, #28
 8002764:	4619      	mov	r1, r3
 8002766:	4817      	ldr	r0, [pc, #92]	; (80027c4 <MX_TIM2_Init+0x10c>)
 8002768:	f007 fab1 	bl	8009cce <HAL_TIM_SlaveConfigSynchro>
 800276c:	4603      	mov	r3, r0
 800276e:	2b00      	cmp	r3, #0
 8002770:	d001      	beq.n	8002776 <MX_TIM2_Init+0xbe>
  {
    Error_Handler();
 8002772:	f000 fa57 	bl	8002c24 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8002776:	2320      	movs	r3, #32
 8002778:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800277a:	2300      	movs	r3, #0
 800277c:	61bb      	str	r3, [r7, #24]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800277e:	f107 0310 	add.w	r3, r7, #16
 8002782:	4619      	mov	r1, r3
 8002784:	480f      	ldr	r0, [pc, #60]	; (80027c4 <MX_TIM2_Init+0x10c>)
 8002786:	f008 f929 	bl	800a9dc <HAL_TIMEx_MasterConfigSynchronization>
 800278a:	4603      	mov	r3, r0
 800278c:	2b00      	cmp	r3, #0
 800278e:	d001      	beq.n	8002794 <MX_TIM2_Init+0xdc>
  {
    Error_Handler();
 8002790:	f000 fa48 	bl	8002c24 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8002794:	2302      	movs	r3, #2
 8002796:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8002798:	2301      	movs	r3, #1
 800279a:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 800279c:	2300      	movs	r3, #0
 800279e:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 80027a0:	2300      	movs	r3, #0
 80027a2:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80027a4:	463b      	mov	r3, r7
 80027a6:	2200      	movs	r2, #0
 80027a8:	4619      	mov	r1, r3
 80027aa:	4806      	ldr	r0, [pc, #24]	; (80027c4 <MX_TIM2_Init+0x10c>)
 80027ac:	f007 f92a 	bl	8009a04 <HAL_TIM_IC_ConfigChannel>
 80027b0:	4603      	mov	r3, r0
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d001      	beq.n	80027ba <MX_TIM2_Init+0x102>
  {
    Error_Handler();
 80027b6:	f000 fa35 	bl	8002c24 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80027ba:	bf00      	nop
 80027bc:	3740      	adds	r7, #64	; 0x40
 80027be:	46bd      	mov	sp, r7
 80027c0:	bd80      	pop	{r7, pc}
 80027c2:	bf00      	nop
 80027c4:	20006990 	.word	0x20006990

080027c8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80027c8:	b580      	push	{r7, lr}
 80027ca:	b094      	sub	sp, #80	; 0x50
 80027cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80027ce:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80027d2:	2200      	movs	r2, #0
 80027d4:	601a      	str	r2, [r3, #0]
 80027d6:	605a      	str	r2, [r3, #4]
 80027d8:	609a      	str	r2, [r3, #8]
 80027da:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 80027dc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80027e0:	2200      	movs	r2, #0
 80027e2:	601a      	str	r2, [r3, #0]
 80027e4:	605a      	str	r2, [r3, #4]
 80027e6:	609a      	str	r2, [r3, #8]
 80027e8:	60da      	str	r2, [r3, #12]
 80027ea:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80027ec:	f107 0320 	add.w	r3, r7, #32
 80027f0:	2200      	movs	r2, #0
 80027f2:	601a      	str	r2, [r3, #0]
 80027f4:	605a      	str	r2, [r3, #4]
 80027f6:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80027f8:	1d3b      	adds	r3, r7, #4
 80027fa:	2200      	movs	r2, #0
 80027fc:	601a      	str	r2, [r3, #0]
 80027fe:	605a      	str	r2, [r3, #4]
 8002800:	609a      	str	r2, [r3, #8]
 8002802:	60da      	str	r2, [r3, #12]
 8002804:	611a      	str	r2, [r3, #16]
 8002806:	615a      	str	r2, [r3, #20]
 8002808:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800280a:	4b37      	ldr	r3, [pc, #220]	; (80028e8 <MX_TIM3_Init+0x120>)
 800280c:	4a37      	ldr	r2, [pc, #220]	; (80028ec <MX_TIM3_Init+0x124>)
 800280e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8002810:	4b35      	ldr	r3, [pc, #212]	; (80028e8 <MX_TIM3_Init+0x120>)
 8002812:	2200      	movs	r2, #0
 8002814:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002816:	4b34      	ldr	r3, [pc, #208]	; (80028e8 <MX_TIM3_Init+0x120>)
 8002818:	2200      	movs	r2, #0
 800281a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 38000;
 800281c:	4b32      	ldr	r3, [pc, #200]	; (80028e8 <MX_TIM3_Init+0x120>)
 800281e:	f249 4270 	movw	r2, #38000	; 0x9470
 8002822:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002824:	4b30      	ldr	r3, [pc, #192]	; (80028e8 <MX_TIM3_Init+0x120>)
 8002826:	2200      	movs	r2, #0
 8002828:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800282a:	4b2f      	ldr	r3, [pc, #188]	; (80028e8 <MX_TIM3_Init+0x120>)
 800282c:	2280      	movs	r2, #128	; 0x80
 800282e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002830:	482d      	ldr	r0, [pc, #180]	; (80028e8 <MX_TIM3_Init+0x120>)
 8002832:	f006 f9aa 	bl	8008b8a <HAL_TIM_Base_Init>
 8002836:	4603      	mov	r3, r0
 8002838:	2b00      	cmp	r3, #0
 800283a:	d001      	beq.n	8002840 <MX_TIM3_Init+0x78>
  {
    Error_Handler();
 800283c:	f000 f9f2 	bl	8002c24 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002840:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002844:	643b      	str	r3, [r7, #64]	; 0x40
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002846:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800284a:	4619      	mov	r1, r3
 800284c:	4826      	ldr	r0, [pc, #152]	; (80028e8 <MX_TIM3_Init+0x120>)
 800284e:	f007 f975 	bl	8009b3c <HAL_TIM_ConfigClockSource>
 8002852:	4603      	mov	r3, r0
 8002854:	2b00      	cmp	r3, #0
 8002856:	d001      	beq.n	800285c <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8002858:	f000 f9e4 	bl	8002c24 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim3) != HAL_OK)
 800285c:	4822      	ldr	r0, [pc, #136]	; (80028e8 <MX_TIM3_Init+0x120>)
 800285e:	f006 fa84 	bl	8008d6a <HAL_TIM_OC_Init>
 8002862:	4603      	mov	r3, r0
 8002864:	2b00      	cmp	r3, #0
 8002866:	d001      	beq.n	800286c <MX_TIM3_Init+0xa4>
  {
    Error_Handler();
 8002868:	f000 f9dc 	bl	8002c24 <Error_Handler>
  }
  if (HAL_TIM_OnePulse_Init(&htim3, TIM_OPMODE_SINGLE) != HAL_OK)
 800286c:	2108      	movs	r1, #8
 800286e:	481e      	ldr	r0, [pc, #120]	; (80028e8 <MX_TIM3_Init+0x120>)
 8002870:	f006 fed4 	bl	800961c <HAL_TIM_OnePulse_Init>
 8002874:	4603      	mov	r3, r0
 8002876:	2b00      	cmp	r3, #0
 8002878:	d001      	beq.n	800287e <MX_TIM3_Init+0xb6>
  {
    Error_Handler();
 800287a:	f000 f9d3 	bl	8002c24 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_TRIGGER;
 800287e:	2306      	movs	r3, #6
 8002880:	62fb      	str	r3, [r7, #44]	; 0x2c
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 8002882:	2300      	movs	r3, #0
 8002884:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIM_SlaveConfigSynchro(&htim3, &sSlaveConfig) != HAL_OK)
 8002886:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800288a:	4619      	mov	r1, r3
 800288c:	4816      	ldr	r0, [pc, #88]	; (80028e8 <MX_TIM3_Init+0x120>)
 800288e:	f007 fa1e 	bl	8009cce <HAL_TIM_SlaveConfigSynchro>
 8002892:	4603      	mov	r3, r0
 8002894:	2b00      	cmp	r3, #0
 8002896:	d001      	beq.n	800289c <MX_TIM3_Init+0xd4>
  {
    Error_Handler();
 8002898:	f000 f9c4 	bl	8002c24 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800289c:	2320      	movs	r3, #32
 800289e:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80028a0:	2300      	movs	r3, #0
 80028a2:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80028a4:	f107 0320 	add.w	r3, r7, #32
 80028a8:	4619      	mov	r1, r3
 80028aa:	480f      	ldr	r0, [pc, #60]	; (80028e8 <MX_TIM3_Init+0x120>)
 80028ac:	f008 f896 	bl	800a9dc <HAL_TIMEx_MasterConfigSynchronization>
 80028b0:	4603      	mov	r3, r0
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d001      	beq.n	80028ba <MX_TIM3_Init+0xf2>
  {
    Error_Handler();
 80028b6:	f000 f9b5 	bl	8002c24 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_ACTIVE;
 80028ba:	2310      	movs	r3, #16
 80028bc:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80028be:	2300      	movs	r3, #0
 80028c0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80028c2:	2300      	movs	r3, #0
 80028c4:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80028c6:	2300      	movs	r3, #0
 80028c8:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80028ca:	1d3b      	adds	r3, r7, #4
 80028cc:	2200      	movs	r2, #0
 80028ce:	4619      	mov	r1, r3
 80028d0:	4805      	ldr	r0, [pc, #20]	; (80028e8 <MX_TIM3_Init+0x120>)
 80028d2:	f007 f81d 	bl	8009910 <HAL_TIM_OC_ConfigChannel>
 80028d6:	4603      	mov	r3, r0
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d001      	beq.n	80028e0 <MX_TIM3_Init+0x118>
  {
    Error_Handler();
 80028dc:	f000 f9a2 	bl	8002c24 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80028e0:	bf00      	nop
 80028e2:	3750      	adds	r7, #80	; 0x50
 80028e4:	46bd      	mov	sp, r7
 80028e6:	bd80      	pop	{r7, pc}
 80028e8:	200069dc 	.word	0x200069dc
 80028ec:	40000400 	.word	0x40000400

080028f0 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80028f0:	b580      	push	{r7, lr}
 80028f2:	b088      	sub	sp, #32
 80028f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80028f6:	f107 0310 	add.w	r3, r7, #16
 80028fa:	2200      	movs	r2, #0
 80028fc:	601a      	str	r2, [r3, #0]
 80028fe:	605a      	str	r2, [r3, #4]
 8002900:	609a      	str	r2, [r3, #8]
 8002902:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002904:	1d3b      	adds	r3, r7, #4
 8002906:	2200      	movs	r2, #0
 8002908:	601a      	str	r2, [r3, #0]
 800290a:	605a      	str	r2, [r3, #4]
 800290c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800290e:	4b1d      	ldr	r3, [pc, #116]	; (8002984 <MX_TIM4_Init+0x94>)
 8002910:	4a1d      	ldr	r2, [pc, #116]	; (8002988 <MX_TIM4_Init+0x98>)
 8002912:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 12;
 8002914:	4b1b      	ldr	r3, [pc, #108]	; (8002984 <MX_TIM4_Init+0x94>)
 8002916:	220c      	movs	r2, #12
 8002918:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800291a:	4b1a      	ldr	r3, [pc, #104]	; (8002984 <MX_TIM4_Init+0x94>)
 800291c:	2200      	movs	r2, #0
 800291e:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8002920:	4b18      	ldr	r3, [pc, #96]	; (8002984 <MX_TIM4_Init+0x94>)
 8002922:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002926:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002928:	4b16      	ldr	r3, [pc, #88]	; (8002984 <MX_TIM4_Init+0x94>)
 800292a:	2200      	movs	r2, #0
 800292c:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800292e:	4b15      	ldr	r3, [pc, #84]	; (8002984 <MX_TIM4_Init+0x94>)
 8002930:	2200      	movs	r2, #0
 8002932:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8002934:	4813      	ldr	r0, [pc, #76]	; (8002984 <MX_TIM4_Init+0x94>)
 8002936:	f006 f928 	bl	8008b8a <HAL_TIM_Base_Init>
 800293a:	4603      	mov	r3, r0
 800293c:	2b00      	cmp	r3, #0
 800293e:	d001      	beq.n	8002944 <MX_TIM4_Init+0x54>
  {
    Error_Handler();
 8002940:	f000 f970 	bl	8002c24 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002944:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002948:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 800294a:	f107 0310 	add.w	r3, r7, #16
 800294e:	4619      	mov	r1, r3
 8002950:	480c      	ldr	r0, [pc, #48]	; (8002984 <MX_TIM4_Init+0x94>)
 8002952:	f007 f8f3 	bl	8009b3c <HAL_TIM_ConfigClockSource>
 8002956:	4603      	mov	r3, r0
 8002958:	2b00      	cmp	r3, #0
 800295a:	d001      	beq.n	8002960 <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 800295c:	f000 f962 	bl	8002c24 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002960:	2300      	movs	r3, #0
 8002962:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002964:	2300      	movs	r3, #0
 8002966:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002968:	1d3b      	adds	r3, r7, #4
 800296a:	4619      	mov	r1, r3
 800296c:	4805      	ldr	r0, [pc, #20]	; (8002984 <MX_TIM4_Init+0x94>)
 800296e:	f008 f835 	bl	800a9dc <HAL_TIMEx_MasterConfigSynchronization>
 8002972:	4603      	mov	r3, r0
 8002974:	2b00      	cmp	r3, #0
 8002976:	d001      	beq.n	800297c <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 8002978:	f000 f954 	bl	8002c24 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 800297c:	bf00      	nop
 800297e:	3720      	adds	r7, #32
 8002980:	46bd      	mov	sp, r7
 8002982:	bd80      	pop	{r7, pc}
 8002984:	20006a28 	.word	0x20006a28
 8002988:	40000800 	.word	0x40000800

0800298c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800298c:	b580      	push	{r7, lr}
 800298e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002990:	4b14      	ldr	r3, [pc, #80]	; (80029e4 <MX_USART1_UART_Init+0x58>)
 8002992:	4a15      	ldr	r2, [pc, #84]	; (80029e8 <MX_USART1_UART_Init+0x5c>)
 8002994:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002996:	4b13      	ldr	r3, [pc, #76]	; (80029e4 <MX_USART1_UART_Init+0x58>)
 8002998:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800299c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800299e:	4b11      	ldr	r3, [pc, #68]	; (80029e4 <MX_USART1_UART_Init+0x58>)
 80029a0:	2200      	movs	r2, #0
 80029a2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80029a4:	4b0f      	ldr	r3, [pc, #60]	; (80029e4 <MX_USART1_UART_Init+0x58>)
 80029a6:	2200      	movs	r2, #0
 80029a8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80029aa:	4b0e      	ldr	r3, [pc, #56]	; (80029e4 <MX_USART1_UART_Init+0x58>)
 80029ac:	2200      	movs	r2, #0
 80029ae:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80029b0:	4b0c      	ldr	r3, [pc, #48]	; (80029e4 <MX_USART1_UART_Init+0x58>)
 80029b2:	220c      	movs	r2, #12
 80029b4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80029b6:	4b0b      	ldr	r3, [pc, #44]	; (80029e4 <MX_USART1_UART_Init+0x58>)
 80029b8:	2200      	movs	r2, #0
 80029ba:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80029bc:	4b09      	ldr	r3, [pc, #36]	; (80029e4 <MX_USART1_UART_Init+0x58>)
 80029be:	2200      	movs	r2, #0
 80029c0:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80029c2:	4b08      	ldr	r3, [pc, #32]	; (80029e4 <MX_USART1_UART_Init+0x58>)
 80029c4:	2200      	movs	r2, #0
 80029c6:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80029c8:	4b06      	ldr	r3, [pc, #24]	; (80029e4 <MX_USART1_UART_Init+0x58>)
 80029ca:	2200      	movs	r2, #0
 80029cc:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80029ce:	4805      	ldr	r0, [pc, #20]	; (80029e4 <MX_USART1_UART_Init+0x58>)
 80029d0:	f008 f920 	bl	800ac14 <HAL_UART_Init>
 80029d4:	4603      	mov	r3, r0
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d001      	beq.n	80029de <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80029da:	f000 f923 	bl	8002c24 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80029de:	bf00      	nop
 80029e0:	bd80      	pop	{r7, pc}
 80029e2:	bf00      	nop
 80029e4:	20006a74 	.word	0x20006a74
 80029e8:	40013800 	.word	0x40013800

080029ec <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80029ec:	b580      	push	{r7, lr}
 80029ee:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80029f0:	4b14      	ldr	r3, [pc, #80]	; (8002a44 <MX_USART2_UART_Init+0x58>)
 80029f2:	4a15      	ldr	r2, [pc, #84]	; (8002a48 <MX_USART2_UART_Init+0x5c>)
 80029f4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80029f6:	4b13      	ldr	r3, [pc, #76]	; (8002a44 <MX_USART2_UART_Init+0x58>)
 80029f8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80029fc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80029fe:	4b11      	ldr	r3, [pc, #68]	; (8002a44 <MX_USART2_UART_Init+0x58>)
 8002a00:	2200      	movs	r2, #0
 8002a02:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002a04:	4b0f      	ldr	r3, [pc, #60]	; (8002a44 <MX_USART2_UART_Init+0x58>)
 8002a06:	2200      	movs	r2, #0
 8002a08:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002a0a:	4b0e      	ldr	r3, [pc, #56]	; (8002a44 <MX_USART2_UART_Init+0x58>)
 8002a0c:	2200      	movs	r2, #0
 8002a0e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002a10:	4b0c      	ldr	r3, [pc, #48]	; (8002a44 <MX_USART2_UART_Init+0x58>)
 8002a12:	220c      	movs	r2, #12
 8002a14:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002a16:	4b0b      	ldr	r3, [pc, #44]	; (8002a44 <MX_USART2_UART_Init+0x58>)
 8002a18:	2200      	movs	r2, #0
 8002a1a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002a1c:	4b09      	ldr	r3, [pc, #36]	; (8002a44 <MX_USART2_UART_Init+0x58>)
 8002a1e:	2200      	movs	r2, #0
 8002a20:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002a22:	4b08      	ldr	r3, [pc, #32]	; (8002a44 <MX_USART2_UART_Init+0x58>)
 8002a24:	2200      	movs	r2, #0
 8002a26:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002a28:	4b06      	ldr	r3, [pc, #24]	; (8002a44 <MX_USART2_UART_Init+0x58>)
 8002a2a:	2200      	movs	r2, #0
 8002a2c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002a2e:	4805      	ldr	r0, [pc, #20]	; (8002a44 <MX_USART2_UART_Init+0x58>)
 8002a30:	f008 f8f0 	bl	800ac14 <HAL_UART_Init>
 8002a34:	4603      	mov	r3, r0
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d001      	beq.n	8002a3e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8002a3a:	f000 f8f3 	bl	8002c24 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002a3e:	bf00      	nop
 8002a40:	bd80      	pop	{r7, pc}
 8002a42:	bf00      	nop
 8002a44:	20006afc 	.word	0x20006afc
 8002a48:	40004400 	.word	0x40004400

08002a4c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002a4c:	b580      	push	{r7, lr}
 8002a4e:	b082      	sub	sp, #8
 8002a50:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002a52:	4b0c      	ldr	r3, [pc, #48]	; (8002a84 <MX_DMA_Init+0x38>)
 8002a54:	695b      	ldr	r3, [r3, #20]
 8002a56:	4a0b      	ldr	r2, [pc, #44]	; (8002a84 <MX_DMA_Init+0x38>)
 8002a58:	f043 0301 	orr.w	r3, r3, #1
 8002a5c:	6153      	str	r3, [r2, #20]
 8002a5e:	4b09      	ldr	r3, [pc, #36]	; (8002a84 <MX_DMA_Init+0x38>)
 8002a60:	695b      	ldr	r3, [r3, #20]
 8002a62:	f003 0301 	and.w	r3, r3, #1
 8002a66:	607b      	str	r3, [r7, #4]
 8002a68:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8002a6a:	2200      	movs	r2, #0
 8002a6c:	2100      	movs	r1, #0
 8002a6e:	200b      	movs	r0, #11
 8002a70:	f003 fb61 	bl	8006136 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8002a74:	200b      	movs	r0, #11
 8002a76:	f003 fb7a 	bl	800616e <HAL_NVIC_EnableIRQ>

}
 8002a7a:	bf00      	nop
 8002a7c:	3708      	adds	r7, #8
 8002a7e:	46bd      	mov	sp, r7
 8002a80:	bd80      	pop	{r7, pc}
 8002a82:	bf00      	nop
 8002a84:	40021000 	.word	0x40021000

08002a88 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002a88:	b580      	push	{r7, lr}
 8002a8a:	b088      	sub	sp, #32
 8002a8c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a8e:	f107 030c 	add.w	r3, r7, #12
 8002a92:	2200      	movs	r2, #0
 8002a94:	601a      	str	r2, [r3, #0]
 8002a96:	605a      	str	r2, [r3, #4]
 8002a98:	609a      	str	r2, [r3, #8]
 8002a9a:	60da      	str	r2, [r3, #12]
 8002a9c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002a9e:	4b29      	ldr	r3, [pc, #164]	; (8002b44 <MX_GPIO_Init+0xbc>)
 8002aa0:	695b      	ldr	r3, [r3, #20]
 8002aa2:	4a28      	ldr	r2, [pc, #160]	; (8002b44 <MX_GPIO_Init+0xbc>)
 8002aa4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002aa8:	6153      	str	r3, [r2, #20]
 8002aaa:	4b26      	ldr	r3, [pc, #152]	; (8002b44 <MX_GPIO_Init+0xbc>)
 8002aac:	695b      	ldr	r3, [r3, #20]
 8002aae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002ab2:	60bb      	str	r3, [r7, #8]
 8002ab4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002ab6:	4b23      	ldr	r3, [pc, #140]	; (8002b44 <MX_GPIO_Init+0xbc>)
 8002ab8:	695b      	ldr	r3, [r3, #20]
 8002aba:	4a22      	ldr	r2, [pc, #136]	; (8002b44 <MX_GPIO_Init+0xbc>)
 8002abc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002ac0:	6153      	str	r3, [r2, #20]
 8002ac2:	4b20      	ldr	r3, [pc, #128]	; (8002b44 <MX_GPIO_Init+0xbc>)
 8002ac4:	695b      	ldr	r3, [r3, #20]
 8002ac6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002aca:	607b      	str	r3, [r7, #4]
 8002acc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002ace:	4b1d      	ldr	r3, [pc, #116]	; (8002b44 <MX_GPIO_Init+0xbc>)
 8002ad0:	695b      	ldr	r3, [r3, #20]
 8002ad2:	4a1c      	ldr	r2, [pc, #112]	; (8002b44 <MX_GPIO_Init+0xbc>)
 8002ad4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002ad8:	6153      	str	r3, [r2, #20]
 8002ada:	4b1a      	ldr	r3, [pc, #104]	; (8002b44 <MX_GPIO_Init+0xbc>)
 8002adc:	695b      	ldr	r3, [r3, #20]
 8002ade:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002ae2:	603b      	str	r3, [r7, #0]
 8002ae4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8002ae6:	2200      	movs	r2, #0
 8002ae8:	2140      	movs	r1, #64	; 0x40
 8002aea:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002aee:	f003 fec3 	bl	8006878 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, Z1Sel_Pin|Z2Sel_Pin|Z3Sel_Pin|Z4Sel_Pin
 8002af2:	2200      	movs	r2, #0
 8002af4:	f640 4127 	movw	r1, #3111	; 0xc27
 8002af8:	4813      	ldr	r0, [pc, #76]	; (8002b48 <MX_GPIO_Init+0xc0>)
 8002afa:	f003 febd 	bl	8006878 <HAL_GPIO_WritePin>
                          |EthRst_Pin|CS4_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8002afe:	2340      	movs	r3, #64	; 0x40
 8002b00:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002b02:	2301      	movs	r3, #1
 8002b04:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b06:	2300      	movs	r3, #0
 8002b08:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b0a:	2300      	movs	r3, #0
 8002b0c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8002b0e:	f107 030c 	add.w	r3, r7, #12
 8002b12:	4619      	mov	r1, r3
 8002b14:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002b18:	f003 fd34 	bl	8006584 <HAL_GPIO_Init>

  /*Configure GPIO pins : Z1Sel_Pin Z2Sel_Pin Z3Sel_Pin Z4Sel_Pin
                           EthRst_Pin CS4_Pin */
  GPIO_InitStruct.Pin = Z1Sel_Pin|Z2Sel_Pin|Z3Sel_Pin|Z4Sel_Pin
 8002b1c:	f640 4327 	movw	r3, #3111	; 0xc27
 8002b20:	60fb      	str	r3, [r7, #12]
                          |EthRst_Pin|CS4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002b22:	2301      	movs	r3, #1
 8002b24:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b26:	2300      	movs	r3, #0
 8002b28:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b2a:	2300      	movs	r3, #0
 8002b2c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002b2e:	f107 030c 	add.w	r3, r7, #12
 8002b32:	4619      	mov	r1, r3
 8002b34:	4804      	ldr	r0, [pc, #16]	; (8002b48 <MX_GPIO_Init+0xc0>)
 8002b36:	f003 fd25 	bl	8006584 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002b3a:	bf00      	nop
 8002b3c:	3720      	adds	r7, #32
 8002b3e:	46bd      	mov	sp, r7
 8002b40:	bd80      	pop	{r7, pc}
 8002b42:	bf00      	nop
 8002b44:	40021000 	.word	0x40021000
 8002b48:	48000400 	.word	0x48000400
 8002b4c:	00000000 	.word	0x00000000

08002b50 <HAL_TIM_IC_CaptureCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef* htim) {
 8002b50:	b5b0      	push	{r4, r5, r7, lr}
 8002b52:	b082      	sub	sp, #8
 8002b54:	af00      	add	r7, sp, #0
 8002b56:	6078      	str	r0, [r7, #4]
	if ((htim->Instance == TIM2) && (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1)) {
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002b60:	d147      	bne.n	8002bf2 <HAL_TIM_IC_CaptureCallback+0xa2>
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	7f1b      	ldrb	r3, [r3, #28]
 8002b66:	2b01      	cmp	r3, #1
 8002b68:	d143      	bne.n	8002bf2 <HAL_TIM_IC_CaptureCallback+0xa2>
		captureTIM2 = HAL_TIM_ReadCapturedValue(&htim2, TIM_CHANNEL_1);
 8002b6a:	2100      	movs	r1, #0
 8002b6c:	4828      	ldr	r0, [pc, #160]	; (8002c10 <HAL_TIM_IC_CaptureCallback+0xc0>)
 8002b6e:	f007 f8f1 	bl	8009d54 <HAL_TIM_ReadCapturedValue>
 8002b72:	4603      	mov	r3, r0
 8002b74:	4a27      	ldr	r2, [pc, #156]	; (8002c14 <HAL_TIM_IC_CaptureCallback+0xc4>)
 8002b76:	6013      	str	r3, [r2, #0]
		if (readyCapture && (captureTIM2 > (maxIndex * 32.258) + 5000) ) {
 8002b78:	4b27      	ldr	r3, [pc, #156]	; (8002c18 <HAL_TIM_IC_CaptureCallback+0xc8>)
 8002b7a:	781b      	ldrb	r3, [r3, #0]
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d038      	beq.n	8002bf2 <HAL_TIM_IC_CaptureCallback+0xa2>
 8002b80:	4b24      	ldr	r3, [pc, #144]	; (8002c14 <HAL_TIM_IC_CaptureCallback+0xc4>)
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	4618      	mov	r0, r3
 8002b86:	f7fd fcbd 	bl	8000504 <__aeabi_ui2d>
 8002b8a:	4604      	mov	r4, r0
 8002b8c:	460d      	mov	r5, r1
 8002b8e:	4b23      	ldr	r3, [pc, #140]	; (8002c1c <HAL_TIM_IC_CaptureCallback+0xcc>)
 8002b90:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002b94:	a31a      	add	r3, pc, #104	; (adr r3, 8002c00 <HAL_TIM_IC_CaptureCallback+0xb0>)
 8002b96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b9a:	f7fd fd2d 	bl	80005f8 <__aeabi_dmul>
 8002b9e:	4602      	mov	r2, r0
 8002ba0:	460b      	mov	r3, r1
 8002ba2:	4610      	mov	r0, r2
 8002ba4:	4619      	mov	r1, r3
 8002ba6:	a318      	add	r3, pc, #96	; (adr r3, 8002c08 <HAL_TIM_IC_CaptureCallback+0xb8>)
 8002ba8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002bac:	f7fd fb6e 	bl	800028c <__adddf3>
 8002bb0:	4602      	mov	r2, r0
 8002bb2:	460b      	mov	r3, r1
 8002bb4:	4620      	mov	r0, r4
 8002bb6:	4629      	mov	r1, r5
 8002bb8:	f7fd ffae 	bl	8000b18 <__aeabi_dcmpgt>
 8002bbc:	4603      	mov	r3, r0
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d100      	bne.n	8002bc4 <HAL_TIM_IC_CaptureCallback+0x74>
			HAL_TIM_IC_Stop_IT(&htim2, TIM_CHANNEL_1);
			readyCapture = false;
			finishCapture = captureTIM2;
		}
	}
}
 8002bc2:	e016      	b.n	8002bf2 <HAL_TIM_IC_CaptureCallback+0xa2>
			LED_PULSE
 8002bc4:	2201      	movs	r2, #1
 8002bc6:	2140      	movs	r1, #64	; 0x40
 8002bc8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002bcc:	f003 fe54 	bl	8006878 <HAL_GPIO_WritePin>
 8002bd0:	2200      	movs	r2, #0
 8002bd2:	2140      	movs	r1, #64	; 0x40
 8002bd4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002bd8:	f003 fe4e 	bl	8006878 <HAL_GPIO_WritePin>
			HAL_TIM_IC_Stop_IT(&htim2, TIM_CHANNEL_1);
 8002bdc:	2100      	movs	r1, #0
 8002bde:	480c      	ldr	r0, [pc, #48]	; (8002c10 <HAL_TIM_IC_CaptureCallback+0xc0>)
 8002be0:	f006 fc5e 	bl	80094a0 <HAL_TIM_IC_Stop_IT>
			readyCapture = false;
 8002be4:	4b0c      	ldr	r3, [pc, #48]	; (8002c18 <HAL_TIM_IC_CaptureCallback+0xc8>)
 8002be6:	2200      	movs	r2, #0
 8002be8:	701a      	strb	r2, [r3, #0]
			finishCapture = captureTIM2;
 8002bea:	4b0a      	ldr	r3, [pc, #40]	; (8002c14 <HAL_TIM_IC_CaptureCallback+0xc4>)
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	4a0c      	ldr	r2, [pc, #48]	; (8002c20 <HAL_TIM_IC_CaptureCallback+0xd0>)
 8002bf0:	6013      	str	r3, [r2, #0]
}
 8002bf2:	bf00      	nop
 8002bf4:	3708      	adds	r7, #8
 8002bf6:	46bd      	mov	sp, r7
 8002bf8:	bdb0      	pop	{r4, r5, r7, pc}
 8002bfa:	bf00      	nop
 8002bfc:	f3af 8000 	nop.w
 8002c00:	24dd2f1b 	.word	0x24dd2f1b
 8002c04:	40402106 	.word	0x40402106
 8002c08:	00000000 	.word	0x00000000
 8002c0c:	40b38800 	.word	0x40b38800
 8002c10:	20006990 	.word	0x20006990
 8002c14:	20000270 	.word	0x20000270
 8002c18:	20008b39 	.word	0x20008b39
 8002c1c:	20008b60 	.word	0x20008b60
 8002c20:	2000026c 	.word	0x2000026c

08002c24 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002c24:	b580      	push	{r7, lr}
 8002c26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
	HAL_UART_Transmit(&huart1, (uint8_t *) "Error handler\n\r", sizeof("Error handler\n\r"), 1000);
 8002c28:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002c2c:	2210      	movs	r2, #16
 8002c2e:	4903      	ldr	r1, [pc, #12]	; (8002c3c <Error_Handler+0x18>)
 8002c30:	4803      	ldr	r0, [pc, #12]	; (8002c40 <Error_Handler+0x1c>)
 8002c32:	f008 f83d 	bl	800acb0 <HAL_UART_Transmit>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002c36:	b672      	cpsid	i
}
 8002c38:	bf00      	nop
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002c3a:	e7fe      	b.n	8002c3a <Error_Handler+0x16>
 8002c3c:	0800e940 	.word	0x0800e940
 8002c40:	20006a74 	.word	0x20006a74
 8002c44:	00000000 	.word	0x00000000

08002c48 <rt_hypotd_snf>:
 * Arguments    : double u0
 *                double u1
 * Return Type  : double
 */
static double rt_hypotd_snf(double u0, double u1)
{
 8002c48:	b590      	push	{r4, r7, lr}
 8002c4a:	b08b      	sub	sp, #44	; 0x2c
 8002c4c:	af00      	add	r7, sp, #0
 8002c4e:	ed87 0b02 	vstr	d0, [r7, #8]
 8002c52:	ed87 1b00 	vstr	d1, [r7]
  double a;
  double b;
  double y;
  a = fabs(u0);
 8002c56:	68b8      	ldr	r0, [r7, #8]
 8002c58:	68fc      	ldr	r4, [r7, #12]
 8002c5a:	f024 4100 	bic.w	r1, r4, #2147483648	; 0x80000000
 8002c5e:	e9c7 0106 	strd	r0, r1, [r7, #24]
  b = fabs(u1);
 8002c62:	683a      	ldr	r2, [r7, #0]
 8002c64:	6879      	ldr	r1, [r7, #4]
 8002c66:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8002c6a:	e9c7 2304 	strd	r2, r3, [r7, #16]
  if (a < b) {
 8002c6e:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002c72:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002c76:	f7fd ff31 	bl	8000adc <__aeabi_dcmplt>
 8002c7a:	4603      	mov	r3, r0
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d02d      	beq.n	8002cdc <rt_hypotd_snf+0x94>
    a /= b;
 8002c80:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002c84:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002c88:	f7fd fde0 	bl	800084c <__aeabi_ddiv>
 8002c8c:	4602      	mov	r2, r0
 8002c8e:	460b      	mov	r3, r1
 8002c90:	e9c7 2306 	strd	r2, r3, [r7, #24]
    y = b * sqrt(a * a + 1.0);
 8002c94:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002c98:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002c9c:	f7fd fcac 	bl	80005f8 <__aeabi_dmul>
 8002ca0:	4602      	mov	r2, r0
 8002ca2:	460b      	mov	r3, r1
 8002ca4:	4610      	mov	r0, r2
 8002ca6:	4619      	mov	r1, r3
 8002ca8:	f04f 0200 	mov.w	r2, #0
 8002cac:	4b3a      	ldr	r3, [pc, #232]	; (8002d98 <rt_hypotd_snf+0x150>)
 8002cae:	f7fd faed 	bl	800028c <__adddf3>
 8002cb2:	4602      	mov	r2, r0
 8002cb4:	460b      	mov	r3, r1
 8002cb6:	ec43 2b17 	vmov	d7, r2, r3
 8002cba:	eeb0 0a47 	vmov.f32	s0, s14
 8002cbe:	eef0 0a67 	vmov.f32	s1, s15
 8002cc2:	f00b fb7f 	bl	800e3c4 <sqrt>
 8002cc6:	ec53 2b10 	vmov	r2, r3, d0
 8002cca:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002cce:	f7fd fc93 	bl	80005f8 <__aeabi_dmul>
 8002cd2:	4602      	mov	r2, r0
 8002cd4:	460b      	mov	r3, r1
 8002cd6:	e9c7 2308 	strd	r2, r3, [r7, #32]
 8002cda:	e04e      	b.n	8002d7a <rt_hypotd_snf+0x132>
  } else if (a > b) {
 8002cdc:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002ce0:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002ce4:	f7fd ff18 	bl	8000b18 <__aeabi_dcmpgt>
 8002ce8:	4603      	mov	r3, r0
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d02d      	beq.n	8002d4a <rt_hypotd_snf+0x102>
    b /= a;
 8002cee:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002cf2:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002cf6:	f7fd fda9 	bl	800084c <__aeabi_ddiv>
 8002cfa:	4602      	mov	r2, r0
 8002cfc:	460b      	mov	r3, r1
 8002cfe:	e9c7 2304 	strd	r2, r3, [r7, #16]
    y = a * sqrt(b * b + 1.0);
 8002d02:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002d06:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002d0a:	f7fd fc75 	bl	80005f8 <__aeabi_dmul>
 8002d0e:	4602      	mov	r2, r0
 8002d10:	460b      	mov	r3, r1
 8002d12:	4610      	mov	r0, r2
 8002d14:	4619      	mov	r1, r3
 8002d16:	f04f 0200 	mov.w	r2, #0
 8002d1a:	4b1f      	ldr	r3, [pc, #124]	; (8002d98 <rt_hypotd_snf+0x150>)
 8002d1c:	f7fd fab6 	bl	800028c <__adddf3>
 8002d20:	4602      	mov	r2, r0
 8002d22:	460b      	mov	r3, r1
 8002d24:	ec43 2b17 	vmov	d7, r2, r3
 8002d28:	eeb0 0a47 	vmov.f32	s0, s14
 8002d2c:	eef0 0a67 	vmov.f32	s1, s15
 8002d30:	f00b fb48 	bl	800e3c4 <sqrt>
 8002d34:	ec53 2b10 	vmov	r2, r3, d0
 8002d38:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002d3c:	f7fd fc5c 	bl	80005f8 <__aeabi_dmul>
 8002d40:	4602      	mov	r2, r0
 8002d42:	460b      	mov	r3, r1
 8002d44:	e9c7 2308 	strd	r2, r3, [r7, #32]
 8002d48:	e017      	b.n	8002d7a <rt_hypotd_snf+0x132>
  } else if (rtIsNaN(b)) {
 8002d4a:	ed97 0b04 	vldr	d0, [r7, #16]
 8002d4e:	f001 f93f 	bl	8003fd0 <rtIsNaN>
 8002d52:	4603      	mov	r3, r0
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d005      	beq.n	8002d64 <rt_hypotd_snf+0x11c>
    y = rtNaN;
 8002d58:	4b10      	ldr	r3, [pc, #64]	; (8002d9c <rt_hypotd_snf+0x154>)
 8002d5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d5e:	e9c7 2308 	strd	r2, r3, [r7, #32]
 8002d62:	e00a      	b.n	8002d7a <rt_hypotd_snf+0x132>
  } else {
    y = a * 1.4142135623730951;
 8002d64:	a30a      	add	r3, pc, #40	; (adr r3, 8002d90 <rt_hypotd_snf+0x148>)
 8002d66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d6a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002d6e:	f7fd fc43 	bl	80005f8 <__aeabi_dmul>
 8002d72:	4602      	mov	r2, r0
 8002d74:	460b      	mov	r3, r1
 8002d76:	e9c7 2308 	strd	r2, r3, [r7, #32]
  }
  return y;
 8002d7a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002d7e:	ec43 2b17 	vmov	d7, r2, r3
}
 8002d82:	eeb0 0a47 	vmov.f32	s0, s14
 8002d86:	eef0 0a67 	vmov.f32	s1, s15
 8002d8a:	372c      	adds	r7, #44	; 0x2c
 8002d8c:	46bd      	mov	sp, r7
 8002d8e:	bd90      	pop	{r4, r7, pc}
 8002d90:	667f3bcd 	.word	0x667f3bcd
 8002d94:	3ff6a09e 	.word	0x3ff6a09e
 8002d98:	3ff00000 	.word	0x3ff00000
 8002d9c:	20000000 	.word	0x20000000

08002da0 <maxEnvHilbert>:
 * Arguments    : const double A[200]
 *                const double B[76]
 * Return Type  : double
 */
double maxEnvHilbert(const double A[200], const double B[76])
{
 8002da0:	b5b0      	push	{r4, r5, r7, lr}
 8002da2:	b09e      	sub	sp, #120	; 0x78
 8002da4:	af02      	add	r7, sp, #8
 8002da6:	6078      	str	r0, [r7, #4]
 8002da8:	6039      	str	r1, [r7, #0]
  int iy;
  int j;
  int ju;
  int k;
  boolean_T tst;
  mx = 0.0;
 8002daa:	f04f 0200 	mov.w	r2, #0
 8002dae:	f04f 0300 	mov.w	r3, #0
 8002db2:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
  m = 0.0;
 8002db6:	f04f 0200 	mov.w	r2, #0
 8002dba:	f04f 0300 	mov.w	r3, #0
 8002dbe:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68
#ifdef FFTDEBUG
  HAL_UART_Transmit(&huart1, (uint8_t *) "Start CONV\n\r", sizeof("Start CONV\n\r"), 1000);
#endif
  memset(&z[0], 0, 200U * sizeof(double));
 8002dc2:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8002dc6:	2100      	movs	r1, #0
 8002dc8:	4868      	ldr	r0, [pc, #416]	; (8002f6c <maxEnvHilbert+0x1cc>)
 8002dca:	f008 fc1d 	bl	800b608 <memset>
  for (k = 0; k < 38; k++) {
 8002dce:	2300      	movs	r3, #0
 8002dd0:	637b      	str	r3, [r7, #52]	; 0x34
 8002dd2:	e034      	b.n	8002e3e <maxEnvHilbert+0x9e>
    iy = k + 161;
 8002dd4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002dd6:	33a1      	adds	r3, #161	; 0xa1
 8002dd8:	643b      	str	r3, [r7, #64]	; 0x40
    for (ju = 0; ju <= iy; ju++) {
 8002dda:	2300      	movs	r3, #0
 8002ddc:	63bb      	str	r3, [r7, #56]	; 0x38
 8002dde:	e027      	b.n	8002e30 <maxEnvHilbert+0x90>
      z[ju] += B[k] * A[(ju - k) + 38];
 8002de0:	4a62      	ldr	r2, [pc, #392]	; (8002f6c <maxEnvHilbert+0x1cc>)
 8002de2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002de4:	00db      	lsls	r3, r3, #3
 8002de6:	4413      	add	r3, r2
 8002de8:	e9d3 4500 	ldrd	r4, r5, [r3]
 8002dec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002dee:	00db      	lsls	r3, r3, #3
 8002df0:	683a      	ldr	r2, [r7, #0]
 8002df2:	4413      	add	r3, r2
 8002df4:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002df8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002dfa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002dfc:	1ad3      	subs	r3, r2, r3
 8002dfe:	3326      	adds	r3, #38	; 0x26
 8002e00:	00db      	lsls	r3, r3, #3
 8002e02:	687a      	ldr	r2, [r7, #4]
 8002e04:	4413      	add	r3, r2
 8002e06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e0a:	f7fd fbf5 	bl	80005f8 <__aeabi_dmul>
 8002e0e:	4602      	mov	r2, r0
 8002e10:	460b      	mov	r3, r1
 8002e12:	4620      	mov	r0, r4
 8002e14:	4629      	mov	r1, r5
 8002e16:	f7fd fa39 	bl	800028c <__adddf3>
 8002e1a:	4602      	mov	r2, r0
 8002e1c:	460b      	mov	r3, r1
 8002e1e:	4853      	ldr	r0, [pc, #332]	; (8002f6c <maxEnvHilbert+0x1cc>)
 8002e20:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002e22:	00c9      	lsls	r1, r1, #3
 8002e24:	4401      	add	r1, r0
 8002e26:	e9c1 2300 	strd	r2, r3, [r1]
    for (ju = 0; ju <= iy; ju++) {
 8002e2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e2c:	3301      	adds	r3, #1
 8002e2e:	63bb      	str	r3, [r7, #56]	; 0x38
 8002e30:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002e32:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002e34:	429a      	cmp	r2, r3
 8002e36:	ddd3      	ble.n	8002de0 <maxEnvHilbert+0x40>
  for (k = 0; k < 38; k++) {
 8002e38:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002e3a:	3301      	adds	r3, #1
 8002e3c:	637b      	str	r3, [r7, #52]	; 0x34
 8002e3e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002e40:	2b25      	cmp	r3, #37	; 0x25
 8002e42:	ddc7      	ble.n	8002dd4 <maxEnvHilbert+0x34>
    }
  }
  for (k = 0; k < 38; k++) {
 8002e44:	2300      	movs	r3, #0
 8002e46:	637b      	str	r3, [r7, #52]	; 0x34
 8002e48:	e037      	b.n	8002eba <maxEnvHilbert+0x11a>
    iy = 199 - k;
 8002e4a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002e4c:	f1c3 03c7 	rsb	r3, r3, #199	; 0xc7
 8002e50:	643b      	str	r3, [r7, #64]	; 0x40
    for (ju = 0; ju <= iy; ju++) {
 8002e52:	2300      	movs	r3, #0
 8002e54:	63bb      	str	r3, [r7, #56]	; 0x38
 8002e56:	e029      	b.n	8002eac <maxEnvHilbert+0x10c>
      iDelta2 = k + ju;
 8002e58:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002e5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e5c:	4413      	add	r3, r2
 8002e5e:	64bb      	str	r3, [r7, #72]	; 0x48
      z[iDelta2] += B[k + 38] * A[ju];
 8002e60:	4a42      	ldr	r2, [pc, #264]	; (8002f6c <maxEnvHilbert+0x1cc>)
 8002e62:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002e64:	00db      	lsls	r3, r3, #3
 8002e66:	4413      	add	r3, r2
 8002e68:	e9d3 4500 	ldrd	r4, r5, [r3]
 8002e6c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002e6e:	3326      	adds	r3, #38	; 0x26
 8002e70:	00db      	lsls	r3, r3, #3
 8002e72:	683a      	ldr	r2, [r7, #0]
 8002e74:	4413      	add	r3, r2
 8002e76:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002e7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e7c:	00db      	lsls	r3, r3, #3
 8002e7e:	687a      	ldr	r2, [r7, #4]
 8002e80:	4413      	add	r3, r2
 8002e82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e86:	f7fd fbb7 	bl	80005f8 <__aeabi_dmul>
 8002e8a:	4602      	mov	r2, r0
 8002e8c:	460b      	mov	r3, r1
 8002e8e:	4620      	mov	r0, r4
 8002e90:	4629      	mov	r1, r5
 8002e92:	f7fd f9fb 	bl	800028c <__adddf3>
 8002e96:	4602      	mov	r2, r0
 8002e98:	460b      	mov	r3, r1
 8002e9a:	4834      	ldr	r0, [pc, #208]	; (8002f6c <maxEnvHilbert+0x1cc>)
 8002e9c:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8002e9e:	00c9      	lsls	r1, r1, #3
 8002ea0:	4401      	add	r1, r0
 8002ea2:	e9c1 2300 	strd	r2, r3, [r1]
    for (ju = 0; ju <= iy; ju++) {
 8002ea6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ea8:	3301      	adds	r3, #1
 8002eaa:	63bb      	str	r3, [r7, #56]	; 0x38
 8002eac:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002eae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002eb0:	429a      	cmp	r2, r3
 8002eb2:	ddd1      	ble.n	8002e58 <maxEnvHilbert+0xb8>
  for (k = 0; k < 38; k++) {
 8002eb4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002eb6:	3301      	adds	r3, #1
 8002eb8:	637b      	str	r3, [r7, #52]	; 0x34
 8002eba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002ebc:	2b25      	cmp	r3, #37	; 0x25
 8002ebe:	ddc4      	ble.n	8002e4a <maxEnvHilbert+0xaa>
  }
#ifdef FFTDEBUG
  HAL_UART_Transmit(&huart1, (uint8_t *) "End CONV\n\r", sizeof("End CONV\n\r"), 1000);
  HAL_UART_Transmit(&huart1, (uint8_t *) "Start FFT\n\r", sizeof("Start FFT\n\r"), 1000);
#endif
  c_FFTImplementationCallback_doH(z, x, wwc, dv, sintabinv);
 8002ec0:	4b2b      	ldr	r3, [pc, #172]	; (8002f70 <maxEnvHilbert+0x1d0>)
 8002ec2:	9300      	str	r3, [sp, #0]
 8002ec4:	4b2b      	ldr	r3, [pc, #172]	; (8002f74 <maxEnvHilbert+0x1d4>)
 8002ec6:	4a2c      	ldr	r2, [pc, #176]	; (8002f78 <maxEnvHilbert+0x1d8>)
 8002ec8:	492c      	ldr	r1, [pc, #176]	; (8002f7c <maxEnvHilbert+0x1dc>)
 8002eca:	4828      	ldr	r0, [pc, #160]	; (8002f6c <maxEnvHilbert+0x1cc>)
 8002ecc:	f7fd fe6c 	bl	8000ba8 <c_FFTImplementationCallback_doH>
#ifdef FFTDEBUG
  HAL_UART_Transmit(&huart1, (uint8_t *) "TP0\n\r", sizeof("TP0\n\r"), 1000);
#endif
  for (i = 0; i < 99; i++) {
 8002ed0:	2300      	movs	r3, #0
 8002ed2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002ed4:	e044      	b.n	8002f60 <maxEnvHilbert+0x1c0>
    x[i + 1].re *= 2.0;
 8002ed6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002ed8:	3301      	adds	r3, #1
 8002eda:	4a28      	ldr	r2, [pc, #160]	; (8002f7c <maxEnvHilbert+0x1dc>)
 8002edc:	011b      	lsls	r3, r3, #4
 8002ede:	4413      	add	r3, r2
 8002ee0:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002ee4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002ee6:	1c5c      	adds	r4, r3, #1
 8002ee8:	4602      	mov	r2, r0
 8002eea:	460b      	mov	r3, r1
 8002eec:	f7fd f9ce 	bl	800028c <__adddf3>
 8002ef0:	4602      	mov	r2, r0
 8002ef2:	460b      	mov	r3, r1
 8002ef4:	4821      	ldr	r0, [pc, #132]	; (8002f7c <maxEnvHilbert+0x1dc>)
 8002ef6:	0121      	lsls	r1, r4, #4
 8002ef8:	4401      	add	r1, r0
 8002efa:	e9c1 2300 	strd	r2, r3, [r1]
    x[i + 1].im *= 2.0;
 8002efe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002f00:	3301      	adds	r3, #1
 8002f02:	4a1e      	ldr	r2, [pc, #120]	; (8002f7c <maxEnvHilbert+0x1dc>)
 8002f04:	011b      	lsls	r3, r3, #4
 8002f06:	4413      	add	r3, r2
 8002f08:	3308      	adds	r3, #8
 8002f0a:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002f0e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002f10:	1c5c      	adds	r4, r3, #1
 8002f12:	4602      	mov	r2, r0
 8002f14:	460b      	mov	r3, r1
 8002f16:	f7fd f9b9 	bl	800028c <__adddf3>
 8002f1a:	4602      	mov	r2, r0
 8002f1c:	460b      	mov	r3, r1
 8002f1e:	4817      	ldr	r0, [pc, #92]	; (8002f7c <maxEnvHilbert+0x1dc>)
 8002f20:	0121      	lsls	r1, r4, #4
 8002f22:	4401      	add	r1, r0
 8002f24:	3108      	adds	r1, #8
 8002f26:	e9c1 2300 	strd	r2, r3, [r1]
    x[i + 101].re = 0.0;
 8002f2a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002f2c:	3365      	adds	r3, #101	; 0x65
 8002f2e:	4a13      	ldr	r2, [pc, #76]	; (8002f7c <maxEnvHilbert+0x1dc>)
 8002f30:	011b      	lsls	r3, r3, #4
 8002f32:	18d1      	adds	r1, r2, r3
 8002f34:	f04f 0200 	mov.w	r2, #0
 8002f38:	f04f 0300 	mov.w	r3, #0
 8002f3c:	e9c1 2300 	strd	r2, r3, [r1]
    x[i + 101].im = 0.0;
 8002f40:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002f42:	3365      	adds	r3, #101	; 0x65
 8002f44:	4a0d      	ldr	r2, [pc, #52]	; (8002f7c <maxEnvHilbert+0x1dc>)
 8002f46:	011b      	lsls	r3, r3, #4
 8002f48:	4413      	add	r3, r2
 8002f4a:	f103 0108 	add.w	r1, r3, #8
 8002f4e:	f04f 0200 	mov.w	r2, #0
 8002f52:	f04f 0300 	mov.w	r3, #0
 8002f56:	e9c1 2300 	strd	r2, r3, [r1]
  for (i = 0; i < 99; i++) {
 8002f5a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002f5c:	3301      	adds	r3, #1
 8002f5e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002f60:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002f62:	2b62      	cmp	r3, #98	; 0x62
 8002f64:	ddb7      	ble.n	8002ed6 <maxEnvHilbert+0x136>
  }
#ifdef FFTDEBUG
  HAL_UART_Transmit(&huart1, (uint8_t *) "TP1\n\r", sizeof("TP1\n\r"), 1000);
#endif
  for (k = 0; k < 200; k++) {
 8002f66:	2300      	movs	r3, #0
 8002f68:	637b      	str	r3, [r7, #52]	; 0x34
 8002f6a:	e079      	b.n	8003060 <maxEnvHilbert+0x2c0>
 8002f6c:	20004278 	.word	0x20004278
 8002f70:	080102e8 	.word	0x080102e8
 8002f74:	08012be8 	.word	0x08012be8
 8002f78:	0800f678 	.word	0x0800f678
 8002f7c:	200048b8 	.word	0x200048b8
    b_x[k] = x[k];
 8002f80:	4a98      	ldr	r2, [pc, #608]	; (80031e4 <maxEnvHilbert+0x444>)
 8002f82:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002f84:	011b      	lsls	r3, r3, #4
 8002f86:	18d1      	adds	r1, r2, r3
 8002f88:	4a97      	ldr	r2, [pc, #604]	; (80031e8 <maxEnvHilbert+0x448>)
 8002f8a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002f8c:	011b      	lsls	r3, r3, #4
 8002f8e:	4413      	add	r3, r2
 8002f90:	460c      	mov	r4, r1
 8002f92:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002f94:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    twid_im = b_wwc[k + 199].re;
 8002f98:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002f9a:	33c7      	adds	r3, #199	; 0xc7
 8002f9c:	4a93      	ldr	r2, [pc, #588]	; (80031ec <maxEnvHilbert+0x44c>)
 8002f9e:	011b      	lsls	r3, r3, #4
 8002fa0:	4413      	add	r3, r2
 8002fa2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002fa6:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
    temp_im = b_x[k].im;
 8002faa:	4a8e      	ldr	r2, [pc, #568]	; (80031e4 <maxEnvHilbert+0x444>)
 8002fac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002fae:	011b      	lsls	r3, r3, #4
 8002fb0:	4413      	add	r3, r2
 8002fb2:	3308      	adds	r3, #8
 8002fb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002fb8:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58
    temp_re = b_wwc[k + 199].im;
 8002fbc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002fbe:	33c7      	adds	r3, #199	; 0xc7
 8002fc0:	4a8a      	ldr	r2, [pc, #552]	; (80031ec <maxEnvHilbert+0x44c>)
 8002fc2:	011b      	lsls	r3, r3, #4
 8002fc4:	4413      	add	r3, r2
 8002fc6:	3308      	adds	r3, #8
 8002fc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002fcc:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
    twid_re = b_x[k].re;
 8002fd0:	4a84      	ldr	r2, [pc, #528]	; (80031e4 <maxEnvHilbert+0x444>)
 8002fd2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002fd4:	011b      	lsls	r3, r3, #4
 8002fd6:	4413      	add	r3, r2
 8002fd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002fdc:	e9c7 2308 	strd	r2, r3, [r7, #32]
    x[k].re = twid_im * twid_re + temp_re * temp_im;
 8002fe0:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002fe4:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8002fe8:	f7fd fb06 	bl	80005f8 <__aeabi_dmul>
 8002fec:	4602      	mov	r2, r0
 8002fee:	460b      	mov	r3, r1
 8002ff0:	4614      	mov	r4, r2
 8002ff2:	461d      	mov	r5, r3
 8002ff4:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8002ff8:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002ffc:	f7fd fafc 	bl	80005f8 <__aeabi_dmul>
 8003000:	4602      	mov	r2, r0
 8003002:	460b      	mov	r3, r1
 8003004:	4620      	mov	r0, r4
 8003006:	4629      	mov	r1, r5
 8003008:	f7fd f940 	bl	800028c <__adddf3>
 800300c:	4602      	mov	r2, r0
 800300e:	460b      	mov	r3, r1
 8003010:	4875      	ldr	r0, [pc, #468]	; (80031e8 <maxEnvHilbert+0x448>)
 8003012:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8003014:	0109      	lsls	r1, r1, #4
 8003016:	4401      	add	r1, r0
 8003018:	e9c1 2300 	strd	r2, r3, [r1]
    x[k].im = twid_im * temp_im - temp_re * twid_re;
 800301c:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003020:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8003024:	f7fd fae8 	bl	80005f8 <__aeabi_dmul>
 8003028:	4602      	mov	r2, r0
 800302a:	460b      	mov	r3, r1
 800302c:	4614      	mov	r4, r2
 800302e:	461d      	mov	r5, r3
 8003030:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003034:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8003038:	f7fd fade 	bl	80005f8 <__aeabi_dmul>
 800303c:	4602      	mov	r2, r0
 800303e:	460b      	mov	r3, r1
 8003040:	4620      	mov	r0, r4
 8003042:	4629      	mov	r1, r5
 8003044:	f7fd f920 	bl	8000288 <__aeabi_dsub>
 8003048:	4602      	mov	r2, r0
 800304a:	460b      	mov	r3, r1
 800304c:	4866      	ldr	r0, [pc, #408]	; (80031e8 <maxEnvHilbert+0x448>)
 800304e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8003050:	0109      	lsls	r1, r1, #4
 8003052:	4401      	add	r1, r0
 8003054:	3108      	adds	r1, #8
 8003056:	e9c1 2300 	strd	r2, r3, [r1]
  for (k = 0; k < 200; k++) {
 800305a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800305c:	3301      	adds	r3, #1
 800305e:	637b      	str	r3, [r7, #52]	; 0x34
 8003060:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003062:	2bc7      	cmp	r3, #199	; 0xc7
 8003064:	dd8c      	ble.n	8002f80 <maxEnvHilbert+0x1e0>
  }
  memset(&fy[0], 0, 512U * sizeof(creal_T));
 8003066:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800306a:	2100      	movs	r1, #0
 800306c:	4860      	ldr	r0, [pc, #384]	; (80031f0 <maxEnvHilbert+0x450>)
 800306e:	f008 facb 	bl	800b608 <memset>
  iy = 0;
 8003072:	2300      	movs	r3, #0
 8003074:	643b      	str	r3, [r7, #64]	; 0x40
  ju = 0;
 8003076:	2300      	movs	r3, #0
 8003078:	63bb      	str	r3, [r7, #56]	; 0x38
  for (i = 0; i < 199; i++) {
 800307a:	2300      	movs	r3, #0
 800307c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800307e:	e02c      	b.n	80030da <maxEnvHilbert+0x33a>
    fy[iy] = x[i];
 8003080:	4a5b      	ldr	r2, [pc, #364]	; (80031f0 <maxEnvHilbert+0x450>)
 8003082:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003084:	011b      	lsls	r3, r3, #4
 8003086:	18d1      	adds	r1, r2, r3
 8003088:	4a57      	ldr	r2, [pc, #348]	; (80031e8 <maxEnvHilbert+0x448>)
 800308a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800308c:	011b      	lsls	r3, r3, #4
 800308e:	4413      	add	r3, r2
 8003090:	460c      	mov	r4, r1
 8003092:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003094:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    iy = 512;
 8003098:	f44f 7300 	mov.w	r3, #512	; 0x200
 800309c:	643b      	str	r3, [r7, #64]	; 0x40
    tst = true;
 800309e:	2301      	movs	r3, #1
 80030a0:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    while (tst) {
 80030a4:	e010      	b.n	80030c8 <maxEnvHilbert+0x328>
      iy >>= 1;
 80030a6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80030a8:	105b      	asrs	r3, r3, #1
 80030aa:	643b      	str	r3, [r7, #64]	; 0x40
      ju ^= iy;
 80030ac:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80030ae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80030b0:	4053      	eors	r3, r2
 80030b2:	63bb      	str	r3, [r7, #56]	; 0x38
      tst = ((ju & iy) == 0);
 80030b4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80030b6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80030b8:	4013      	ands	r3, r2
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	bf0c      	ite	eq
 80030be:	2301      	moveq	r3, #1
 80030c0:	2300      	movne	r3, #0
 80030c2:	b2db      	uxtb	r3, r3
 80030c4:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    while (tst) {
 80030c8:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d1ea      	bne.n	80030a6 <maxEnvHilbert+0x306>
    }
    iy = ju;
 80030d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80030d2:	643b      	str	r3, [r7, #64]	; 0x40
  for (i = 0; i < 199; i++) {
 80030d4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80030d6:	3301      	adds	r3, #1
 80030d8:	64fb      	str	r3, [r7, #76]	; 0x4c
 80030da:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80030dc:	2bc6      	cmp	r3, #198	; 0xc6
 80030de:	ddcf      	ble.n	8003080 <maxEnvHilbert+0x2e0>
  }
  fy[iy] = x[199];
 80030e0:	4a43      	ldr	r2, [pc, #268]	; (80031f0 <maxEnvHilbert+0x450>)
 80030e2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80030e4:	011b      	lsls	r3, r3, #4
 80030e6:	441a      	add	r2, r3
 80030e8:	4b3f      	ldr	r3, [pc, #252]	; (80031e8 <maxEnvHilbert+0x448>)
 80030ea:	4614      	mov	r4, r2
 80030ec:	f503 6347 	add.w	r3, r3, #3184	; 0xc70
 80030f0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80030f2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  for (i = 0; i <= 510; i += 2) {
 80030f6:	2300      	movs	r3, #0
 80030f8:	64fb      	str	r3, [r7, #76]	; 0x4c
 80030fa:	e062      	b.n	80031c2 <maxEnvHilbert+0x422>
    temp_re_tmp = fy[i + 1].re;
 80030fc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80030fe:	3301      	adds	r3, #1
 8003100:	4a3b      	ldr	r2, [pc, #236]	; (80031f0 <maxEnvHilbert+0x450>)
 8003102:	011b      	lsls	r3, r3, #4
 8003104:	4413      	add	r3, r2
 8003106:	e9d3 2300 	ldrd	r2, r3, [r3]
 800310a:	e9c7 2302 	strd	r2, r3, [r7, #8]
    temp_re = fy[i + 1].im;
 800310e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003110:	3301      	adds	r3, #1
 8003112:	4a37      	ldr	r2, [pc, #220]	; (80031f0 <maxEnvHilbert+0x450>)
 8003114:	011b      	lsls	r3, r3, #4
 8003116:	4413      	add	r3, r2
 8003118:	3308      	adds	r3, #8
 800311a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800311e:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
    re_tmp = fy[i].re;
 8003122:	4a33      	ldr	r2, [pc, #204]	; (80031f0 <maxEnvHilbert+0x450>)
 8003124:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003126:	011b      	lsls	r3, r3, #4
 8003128:	4413      	add	r3, r2
 800312a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800312e:	e9c7 2306 	strd	r2, r3, [r7, #24]
    twid_re = fy[i].im;
 8003132:	4a2f      	ldr	r2, [pc, #188]	; (80031f0 <maxEnvHilbert+0x450>)
 8003134:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003136:	011b      	lsls	r3, r3, #4
 8003138:	4413      	add	r3, r2
 800313a:	3308      	adds	r3, #8
 800313c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003140:	e9c7 2308 	strd	r2, r3, [r7, #32]
    fy[i + 1].re = re_tmp - temp_re_tmp;
 8003144:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003146:	1c5c      	adds	r4, r3, #1
 8003148:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800314c:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8003150:	f7fd f89a 	bl	8000288 <__aeabi_dsub>
 8003154:	4602      	mov	r2, r0
 8003156:	460b      	mov	r3, r1
 8003158:	4825      	ldr	r0, [pc, #148]	; (80031f0 <maxEnvHilbert+0x450>)
 800315a:	0121      	lsls	r1, r4, #4
 800315c:	4401      	add	r1, r0
 800315e:	e9c1 2300 	strd	r2, r3, [r1]
    fy[i + 1].im = twid_re - temp_re;
 8003162:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003164:	1c5c      	adds	r4, r3, #1
 8003166:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800316a:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800316e:	f7fd f88b 	bl	8000288 <__aeabi_dsub>
 8003172:	4602      	mov	r2, r0
 8003174:	460b      	mov	r3, r1
 8003176:	481e      	ldr	r0, [pc, #120]	; (80031f0 <maxEnvHilbert+0x450>)
 8003178:	0121      	lsls	r1, r4, #4
 800317a:	4401      	add	r1, r0
 800317c:	3108      	adds	r1, #8
 800317e:	e9c1 2300 	strd	r2, r3, [r1]
    fy[i].re = re_tmp + temp_re_tmp;
 8003182:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003186:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800318a:	f7fd f87f 	bl	800028c <__adddf3>
 800318e:	4602      	mov	r2, r0
 8003190:	460b      	mov	r3, r1
 8003192:	4817      	ldr	r0, [pc, #92]	; (80031f0 <maxEnvHilbert+0x450>)
 8003194:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8003196:	0109      	lsls	r1, r1, #4
 8003198:	4401      	add	r1, r0
 800319a:	e9c1 2300 	strd	r2, r3, [r1]
    fy[i].im = twid_re + temp_re;
 800319e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80031a2:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80031a6:	f7fd f871 	bl	800028c <__adddf3>
 80031aa:	4602      	mov	r2, r0
 80031ac:	460b      	mov	r3, r1
 80031ae:	4810      	ldr	r0, [pc, #64]	; (80031f0 <maxEnvHilbert+0x450>)
 80031b0:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 80031b2:	0109      	lsls	r1, r1, #4
 80031b4:	4401      	add	r1, r0
 80031b6:	3108      	adds	r1, #8
 80031b8:	e9c1 2300 	strd	r2, r3, [r1]
  for (i = 0; i <= 510; i += 2) {
 80031bc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80031be:	3302      	adds	r3, #2
 80031c0:	64fb      	str	r3, [r7, #76]	; 0x4c
 80031c2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80031c4:	f5b3 7fff 	cmp.w	r3, #510	; 0x1fe
 80031c8:	dd98      	ble.n	80030fc <maxEnvHilbert+0x35c>
  }
  iy = 2;
 80031ca:	2302      	movs	r3, #2
 80031cc:	643b      	str	r3, [r7, #64]	; 0x40
  iDelta2 = 4;
 80031ce:	2304      	movs	r3, #4
 80031d0:	64bb      	str	r3, [r7, #72]	; 0x48
  k = 128;
 80031d2:	2380      	movs	r3, #128	; 0x80
 80031d4:	637b      	str	r3, [r7, #52]	; 0x34
  ju = 509;
 80031d6:	f240 13fd 	movw	r3, #509	; 0x1fd
 80031da:	63bb      	str	r3, [r7, #56]	; 0x38
  while (k > 0) {
 80031dc:	e14d      	b.n	800347a <maxEnvHilbert+0x6da>
    for (i = 0; i < ju; i += iDelta2) {
 80031de:	2300      	movs	r3, #0
 80031e0:	64fb      	str	r3, [r7, #76]	; 0x4c
 80031e2:	e06c      	b.n	80032be <maxEnvHilbert+0x51e>
 80031e4:	20005538 	.word	0x20005538
 80031e8:	200048b8 	.word	0x200048b8
 80031ec:	08010af0 	.word	0x08010af0
 80031f0:	20002278 	.word	0x20002278
      b_temp_re_tmp = i + iy;
 80031f4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80031f6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80031f8:	4413      	add	r3, r2
 80031fa:	613b      	str	r3, [r7, #16]
      temp_re = fy[b_temp_re_tmp].re;
 80031fc:	4a40      	ldr	r2, [pc, #256]	; (8003300 <maxEnvHilbert+0x560>)
 80031fe:	693b      	ldr	r3, [r7, #16]
 8003200:	011b      	lsls	r3, r3, #4
 8003202:	4413      	add	r3, r2
 8003204:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003208:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
      temp_im = fy[b_temp_re_tmp].im;
 800320c:	4a3c      	ldr	r2, [pc, #240]	; (8003300 <maxEnvHilbert+0x560>)
 800320e:	693b      	ldr	r3, [r7, #16]
 8003210:	011b      	lsls	r3, r3, #4
 8003212:	4413      	add	r3, r2
 8003214:	3308      	adds	r3, #8
 8003216:	e9d3 2300 	ldrd	r2, r3, [r3]
 800321a:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58
      fy[b_temp_re_tmp].re = fy[i].re - temp_re;
 800321e:	4a38      	ldr	r2, [pc, #224]	; (8003300 <maxEnvHilbert+0x560>)
 8003220:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003222:	011b      	lsls	r3, r3, #4
 8003224:	4413      	add	r3, r2
 8003226:	e9d3 0100 	ldrd	r0, r1, [r3]
 800322a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800322e:	f7fd f82b 	bl	8000288 <__aeabi_dsub>
 8003232:	4602      	mov	r2, r0
 8003234:	460b      	mov	r3, r1
 8003236:	4832      	ldr	r0, [pc, #200]	; (8003300 <maxEnvHilbert+0x560>)
 8003238:	6939      	ldr	r1, [r7, #16]
 800323a:	0109      	lsls	r1, r1, #4
 800323c:	4401      	add	r1, r0
 800323e:	e9c1 2300 	strd	r2, r3, [r1]
      fy[b_temp_re_tmp].im = fy[i].im - temp_im;
 8003242:	4a2f      	ldr	r2, [pc, #188]	; (8003300 <maxEnvHilbert+0x560>)
 8003244:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003246:	011b      	lsls	r3, r3, #4
 8003248:	4413      	add	r3, r2
 800324a:	3308      	adds	r3, #8
 800324c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003250:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003254:	f7fd f818 	bl	8000288 <__aeabi_dsub>
 8003258:	4602      	mov	r2, r0
 800325a:	460b      	mov	r3, r1
 800325c:	4828      	ldr	r0, [pc, #160]	; (8003300 <maxEnvHilbert+0x560>)
 800325e:	6939      	ldr	r1, [r7, #16]
 8003260:	0109      	lsls	r1, r1, #4
 8003262:	4401      	add	r1, r0
 8003264:	3108      	adds	r1, #8
 8003266:	e9c1 2300 	strd	r2, r3, [r1]
      fy[i].re += temp_re;
 800326a:	4a25      	ldr	r2, [pc, #148]	; (8003300 <maxEnvHilbert+0x560>)
 800326c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800326e:	011b      	lsls	r3, r3, #4
 8003270:	4413      	add	r3, r2
 8003272:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003276:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800327a:	f7fd f807 	bl	800028c <__adddf3>
 800327e:	4602      	mov	r2, r0
 8003280:	460b      	mov	r3, r1
 8003282:	481f      	ldr	r0, [pc, #124]	; (8003300 <maxEnvHilbert+0x560>)
 8003284:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8003286:	0109      	lsls	r1, r1, #4
 8003288:	4401      	add	r1, r0
 800328a:	e9c1 2300 	strd	r2, r3, [r1]
      fy[i].im += temp_im;
 800328e:	4a1c      	ldr	r2, [pc, #112]	; (8003300 <maxEnvHilbert+0x560>)
 8003290:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003292:	011b      	lsls	r3, r3, #4
 8003294:	4413      	add	r3, r2
 8003296:	3308      	adds	r3, #8
 8003298:	e9d3 0100 	ldrd	r0, r1, [r3]
 800329c:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80032a0:	f7fc fff4 	bl	800028c <__adddf3>
 80032a4:	4602      	mov	r2, r0
 80032a6:	460b      	mov	r3, r1
 80032a8:	4815      	ldr	r0, [pc, #84]	; (8003300 <maxEnvHilbert+0x560>)
 80032aa:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 80032ac:	0109      	lsls	r1, r1, #4
 80032ae:	4401      	add	r1, r0
 80032b0:	3108      	adds	r1, #8
 80032b2:	e9c1 2300 	strd	r2, r3, [r1]
    for (i = 0; i < ju; i += iDelta2) {
 80032b6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80032b8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80032ba:	4413      	add	r3, r2
 80032bc:	64fb      	str	r3, [r7, #76]	; 0x4c
 80032be:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80032c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80032c2:	429a      	cmp	r2, r3
 80032c4:	db96      	blt.n	80031f4 <maxEnvHilbert+0x454>
    }
    istart = 1;
 80032c6:	2301      	movs	r3, #1
 80032c8:	647b      	str	r3, [r7, #68]	; 0x44
    for (j = k; j < 256; j += k) {
 80032ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80032cc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80032ce:	e0c2      	b.n	8003456 <maxEnvHilbert+0x6b6>
      twid_re = dv[j];
 80032d0:	4a0c      	ldr	r2, [pc, #48]	; (8003304 <maxEnvHilbert+0x564>)
 80032d2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80032d4:	00db      	lsls	r3, r3, #3
 80032d6:	4413      	add	r3, r2
 80032d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032dc:	e9c7 2308 	strd	r2, r3, [r7, #32]
      twid_im = dv1[j];
 80032e0:	4a09      	ldr	r2, [pc, #36]	; (8003308 <maxEnvHilbert+0x568>)
 80032e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80032e4:	00db      	lsls	r3, r3, #3
 80032e6:	4413      	add	r3, r2
 80032e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032ec:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
      i = istart;
 80032f0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80032f2:	64fb      	str	r3, [r7, #76]	; 0x4c
      ihi = istart + ju;
 80032f4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80032f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80032f8:	4413      	add	r3, r2
 80032fa:	617b      	str	r3, [r7, #20]
      while (i < ihi) {
 80032fc:	e09f      	b.n	800343e <maxEnvHilbert+0x69e>
 80032fe:	bf00      	nop
 8003300:	20002278 	.word	0x20002278
 8003304:	08012be8 	.word	0x08012be8
 8003308:	080133f0 	.word	0x080133f0
        b_temp_re_tmp = i + iy;
 800330c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800330e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003310:	4413      	add	r3, r2
 8003312:	613b      	str	r3, [r7, #16]
        temp_re_tmp = fy[b_temp_re_tmp].im;
 8003314:	4a82      	ldr	r2, [pc, #520]	; (8003520 <maxEnvHilbert+0x780>)
 8003316:	693b      	ldr	r3, [r7, #16]
 8003318:	011b      	lsls	r3, r3, #4
 800331a:	4413      	add	r3, r2
 800331c:	3308      	adds	r3, #8
 800331e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003322:	e9c7 2302 	strd	r2, r3, [r7, #8]
        temp_im = fy[b_temp_re_tmp].re;
 8003326:	4a7e      	ldr	r2, [pc, #504]	; (8003520 <maxEnvHilbert+0x780>)
 8003328:	693b      	ldr	r3, [r7, #16]
 800332a:	011b      	lsls	r3, r3, #4
 800332c:	4413      	add	r3, r2
 800332e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003332:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58
        temp_re = twid_re * temp_im - twid_im * temp_re_tmp;
 8003336:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800333a:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800333e:	f7fd f95b 	bl	80005f8 <__aeabi_dmul>
 8003342:	4602      	mov	r2, r0
 8003344:	460b      	mov	r3, r1
 8003346:	4614      	mov	r4, r2
 8003348:	461d      	mov	r5, r3
 800334a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800334e:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8003352:	f7fd f951 	bl	80005f8 <__aeabi_dmul>
 8003356:	4602      	mov	r2, r0
 8003358:	460b      	mov	r3, r1
 800335a:	4620      	mov	r0, r4
 800335c:	4629      	mov	r1, r5
 800335e:	f7fc ff93 	bl	8000288 <__aeabi_dsub>
 8003362:	4602      	mov	r2, r0
 8003364:	460b      	mov	r3, r1
 8003366:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
        temp_im = twid_re * temp_re_tmp + twid_im * temp_im;
 800336a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800336e:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8003372:	f7fd f941 	bl	80005f8 <__aeabi_dmul>
 8003376:	4602      	mov	r2, r0
 8003378:	460b      	mov	r3, r1
 800337a:	4614      	mov	r4, r2
 800337c:	461d      	mov	r5, r3
 800337e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003382:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8003386:	f7fd f937 	bl	80005f8 <__aeabi_dmul>
 800338a:	4602      	mov	r2, r0
 800338c:	460b      	mov	r3, r1
 800338e:	4620      	mov	r0, r4
 8003390:	4629      	mov	r1, r5
 8003392:	f7fc ff7b 	bl	800028c <__adddf3>
 8003396:	4602      	mov	r2, r0
 8003398:	460b      	mov	r3, r1
 800339a:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58
        fy[b_temp_re_tmp].re = fy[i].re - temp_re;
 800339e:	4a60      	ldr	r2, [pc, #384]	; (8003520 <maxEnvHilbert+0x780>)
 80033a0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80033a2:	011b      	lsls	r3, r3, #4
 80033a4:	4413      	add	r3, r2
 80033a6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80033aa:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80033ae:	f7fc ff6b 	bl	8000288 <__aeabi_dsub>
 80033b2:	4602      	mov	r2, r0
 80033b4:	460b      	mov	r3, r1
 80033b6:	485a      	ldr	r0, [pc, #360]	; (8003520 <maxEnvHilbert+0x780>)
 80033b8:	6939      	ldr	r1, [r7, #16]
 80033ba:	0109      	lsls	r1, r1, #4
 80033bc:	4401      	add	r1, r0
 80033be:	e9c1 2300 	strd	r2, r3, [r1]
        fy[b_temp_re_tmp].im = fy[i].im - temp_im;
 80033c2:	4a57      	ldr	r2, [pc, #348]	; (8003520 <maxEnvHilbert+0x780>)
 80033c4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80033c6:	011b      	lsls	r3, r3, #4
 80033c8:	4413      	add	r3, r2
 80033ca:	3308      	adds	r3, #8
 80033cc:	e9d3 0100 	ldrd	r0, r1, [r3]
 80033d0:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80033d4:	f7fc ff58 	bl	8000288 <__aeabi_dsub>
 80033d8:	4602      	mov	r2, r0
 80033da:	460b      	mov	r3, r1
 80033dc:	4850      	ldr	r0, [pc, #320]	; (8003520 <maxEnvHilbert+0x780>)
 80033de:	6939      	ldr	r1, [r7, #16]
 80033e0:	0109      	lsls	r1, r1, #4
 80033e2:	4401      	add	r1, r0
 80033e4:	3108      	adds	r1, #8
 80033e6:	e9c1 2300 	strd	r2, r3, [r1]
        fy[i].re += temp_re;
 80033ea:	4a4d      	ldr	r2, [pc, #308]	; (8003520 <maxEnvHilbert+0x780>)
 80033ec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80033ee:	011b      	lsls	r3, r3, #4
 80033f0:	4413      	add	r3, r2
 80033f2:	e9d3 0100 	ldrd	r0, r1, [r3]
 80033f6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80033fa:	f7fc ff47 	bl	800028c <__adddf3>
 80033fe:	4602      	mov	r2, r0
 8003400:	460b      	mov	r3, r1
 8003402:	4847      	ldr	r0, [pc, #284]	; (8003520 <maxEnvHilbert+0x780>)
 8003404:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8003406:	0109      	lsls	r1, r1, #4
 8003408:	4401      	add	r1, r0
 800340a:	e9c1 2300 	strd	r2, r3, [r1]
        fy[i].im += temp_im;
 800340e:	4a44      	ldr	r2, [pc, #272]	; (8003520 <maxEnvHilbert+0x780>)
 8003410:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003412:	011b      	lsls	r3, r3, #4
 8003414:	4413      	add	r3, r2
 8003416:	3308      	adds	r3, #8
 8003418:	e9d3 0100 	ldrd	r0, r1, [r3]
 800341c:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003420:	f7fc ff34 	bl	800028c <__adddf3>
 8003424:	4602      	mov	r2, r0
 8003426:	460b      	mov	r3, r1
 8003428:	483d      	ldr	r0, [pc, #244]	; (8003520 <maxEnvHilbert+0x780>)
 800342a:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800342c:	0109      	lsls	r1, r1, #4
 800342e:	4401      	add	r1, r0
 8003430:	3108      	adds	r1, #8
 8003432:	e9c1 2300 	strd	r2, r3, [r1]
        i += iDelta2;
 8003436:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003438:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800343a:	4413      	add	r3, r2
 800343c:	64fb      	str	r3, [r7, #76]	; 0x4c
      while (i < ihi) {
 800343e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003440:	697b      	ldr	r3, [r7, #20]
 8003442:	429a      	cmp	r2, r3
 8003444:	f6ff af62 	blt.w	800330c <maxEnvHilbert+0x56c>
      }
      istart++;
 8003448:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800344a:	3301      	adds	r3, #1
 800344c:	647b      	str	r3, [r7, #68]	; 0x44
    for (j = k; j < 256; j += k) {
 800344e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003450:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003452:	4413      	add	r3, r2
 8003454:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003456:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003458:	2bff      	cmp	r3, #255	; 0xff
 800345a:	f77f af39 	ble.w	80032d0 <maxEnvHilbert+0x530>
    }
    k /= 2;
 800345e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003460:	0fda      	lsrs	r2, r3, #31
 8003462:	4413      	add	r3, r2
 8003464:	105b      	asrs	r3, r3, #1
 8003466:	637b      	str	r3, [r7, #52]	; 0x34
    iy = iDelta2;
 8003468:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800346a:	643b      	str	r3, [r7, #64]	; 0x40
    iDelta2 += iDelta2;
 800346c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800346e:	005b      	lsls	r3, r3, #1
 8003470:	64bb      	str	r3, [r7, #72]	; 0x48
    ju -= iy;
 8003472:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003474:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003476:	1ad3      	subs	r3, r2, r3
 8003478:	63bb      	str	r3, [r7, #56]	; 0x38
  while (k > 0) {
 800347a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800347c:	2b00      	cmp	r3, #0
 800347e:	f73f aeae 	bgt.w	80031de <maxEnvHilbert+0x43e>
  }
  memset(&fv[0], 0, 512U * sizeof(creal_T));
 8003482:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003486:	2100      	movs	r1, #0
 8003488:	4826      	ldr	r0, [pc, #152]	; (8003524 <maxEnvHilbert+0x784>)
 800348a:	f008 f8bd 	bl	800b608 <memset>
  iy = 0;
 800348e:	2300      	movs	r3, #0
 8003490:	643b      	str	r3, [r7, #64]	; 0x40
  ju = 0;
 8003492:	2300      	movs	r3, #0
 8003494:	63bb      	str	r3, [r7, #56]	; 0x38
  for (i = 0; i < 398; i++) {
 8003496:	2300      	movs	r3, #0
 8003498:	64fb      	str	r3, [r7, #76]	; 0x4c
 800349a:	e02c      	b.n	80034f6 <maxEnvHilbert+0x756>
    fv[iy] = b_wwc[i];
 800349c:	4a21      	ldr	r2, [pc, #132]	; (8003524 <maxEnvHilbert+0x784>)
 800349e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80034a0:	011b      	lsls	r3, r3, #4
 80034a2:	18d1      	adds	r1, r2, r3
 80034a4:	4a20      	ldr	r2, [pc, #128]	; (8003528 <maxEnvHilbert+0x788>)
 80034a6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80034a8:	011b      	lsls	r3, r3, #4
 80034aa:	4413      	add	r3, r2
 80034ac:	460c      	mov	r4, r1
 80034ae:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80034b0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    iy = 512;
 80034b4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80034b8:	643b      	str	r3, [r7, #64]	; 0x40
    tst = true;
 80034ba:	2301      	movs	r3, #1
 80034bc:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    while (tst) {
 80034c0:	e010      	b.n	80034e4 <maxEnvHilbert+0x744>
      iy >>= 1;
 80034c2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80034c4:	105b      	asrs	r3, r3, #1
 80034c6:	643b      	str	r3, [r7, #64]	; 0x40
      ju ^= iy;
 80034c8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80034ca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80034cc:	4053      	eors	r3, r2
 80034ce:	63bb      	str	r3, [r7, #56]	; 0x38
      tst = ((ju & iy) == 0);
 80034d0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80034d2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80034d4:	4013      	ands	r3, r2
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	bf0c      	ite	eq
 80034da:	2301      	moveq	r3, #1
 80034dc:	2300      	movne	r3, #0
 80034de:	b2db      	uxtb	r3, r3
 80034e0:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    while (tst) {
 80034e4:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d1ea      	bne.n	80034c2 <maxEnvHilbert+0x722>
    }
    iy = ju;
 80034ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80034ee:	643b      	str	r3, [r7, #64]	; 0x40
  for (i = 0; i < 398; i++) {
 80034f0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80034f2:	3301      	adds	r3, #1
 80034f4:	64fb      	str	r3, [r7, #76]	; 0x4c
 80034f6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80034f8:	f5b3 7fc7 	cmp.w	r3, #398	; 0x18e
 80034fc:	dbce      	blt.n	800349c <maxEnvHilbert+0x6fc>
  }
  fv[iy] = b_wwc[398];
 80034fe:	4a09      	ldr	r2, [pc, #36]	; (8003524 <maxEnvHilbert+0x784>)
 8003500:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003502:	011b      	lsls	r3, r3, #4
 8003504:	441a      	add	r2, r3
 8003506:	4b08      	ldr	r3, [pc, #32]	; (8003528 <maxEnvHilbert+0x788>)
 8003508:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800350c:	4614      	mov	r4, r2
 800350e:	f503 630e 	add.w	r3, r3, #2272	; 0x8e0
 8003512:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003514:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  for (i = 0; i <= 510; i += 2) {
 8003518:	2300      	movs	r3, #0
 800351a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800351c:	e069      	b.n	80035f2 <maxEnvHilbert+0x852>
 800351e:	bf00      	nop
 8003520:	20002278 	.word	0x20002278
 8003524:	20000278 	.word	0x20000278
 8003528:	08010af0 	.word	0x08010af0
    temp_re_tmp = fv[i + 1].re;
 800352c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800352e:	3301      	adds	r3, #1
 8003530:	4a7b      	ldr	r2, [pc, #492]	; (8003720 <maxEnvHilbert+0x980>)
 8003532:	011b      	lsls	r3, r3, #4
 8003534:	4413      	add	r3, r2
 8003536:	e9d3 2300 	ldrd	r2, r3, [r3]
 800353a:	e9c7 2302 	strd	r2, r3, [r7, #8]
    temp_re = fv[i + 1].im;
 800353e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003540:	3301      	adds	r3, #1
 8003542:	4a77      	ldr	r2, [pc, #476]	; (8003720 <maxEnvHilbert+0x980>)
 8003544:	011b      	lsls	r3, r3, #4
 8003546:	4413      	add	r3, r2
 8003548:	3308      	adds	r3, #8
 800354a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800354e:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
    re_tmp = fv[i].re;
 8003552:	4a73      	ldr	r2, [pc, #460]	; (8003720 <maxEnvHilbert+0x980>)
 8003554:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003556:	011b      	lsls	r3, r3, #4
 8003558:	4413      	add	r3, r2
 800355a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800355e:	e9c7 2306 	strd	r2, r3, [r7, #24]
    twid_re = fv[i].im;
 8003562:	4a6f      	ldr	r2, [pc, #444]	; (8003720 <maxEnvHilbert+0x980>)
 8003564:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003566:	011b      	lsls	r3, r3, #4
 8003568:	4413      	add	r3, r2
 800356a:	3308      	adds	r3, #8
 800356c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003570:	e9c7 2308 	strd	r2, r3, [r7, #32]
    fv[i + 1].re = re_tmp - temp_re_tmp;
 8003574:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003576:	1c5c      	adds	r4, r3, #1
 8003578:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800357c:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8003580:	f7fc fe82 	bl	8000288 <__aeabi_dsub>
 8003584:	4602      	mov	r2, r0
 8003586:	460b      	mov	r3, r1
 8003588:	4865      	ldr	r0, [pc, #404]	; (8003720 <maxEnvHilbert+0x980>)
 800358a:	0121      	lsls	r1, r4, #4
 800358c:	4401      	add	r1, r0
 800358e:	e9c1 2300 	strd	r2, r3, [r1]
    fv[i + 1].im = twid_re - temp_re;
 8003592:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003594:	1c5c      	adds	r4, r3, #1
 8003596:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800359a:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800359e:	f7fc fe73 	bl	8000288 <__aeabi_dsub>
 80035a2:	4602      	mov	r2, r0
 80035a4:	460b      	mov	r3, r1
 80035a6:	485e      	ldr	r0, [pc, #376]	; (8003720 <maxEnvHilbert+0x980>)
 80035a8:	0121      	lsls	r1, r4, #4
 80035aa:	4401      	add	r1, r0
 80035ac:	3108      	adds	r1, #8
 80035ae:	e9c1 2300 	strd	r2, r3, [r1]
    fv[i].re = re_tmp + temp_re_tmp;
 80035b2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80035b6:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80035ba:	f7fc fe67 	bl	800028c <__adddf3>
 80035be:	4602      	mov	r2, r0
 80035c0:	460b      	mov	r3, r1
 80035c2:	4857      	ldr	r0, [pc, #348]	; (8003720 <maxEnvHilbert+0x980>)
 80035c4:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 80035c6:	0109      	lsls	r1, r1, #4
 80035c8:	4401      	add	r1, r0
 80035ca:	e9c1 2300 	strd	r2, r3, [r1]
    fv[i].im = twid_re + temp_re;
 80035ce:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80035d2:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80035d6:	f7fc fe59 	bl	800028c <__adddf3>
 80035da:	4602      	mov	r2, r0
 80035dc:	460b      	mov	r3, r1
 80035de:	4850      	ldr	r0, [pc, #320]	; (8003720 <maxEnvHilbert+0x980>)
 80035e0:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 80035e2:	0109      	lsls	r1, r1, #4
 80035e4:	4401      	add	r1, r0
 80035e6:	3108      	adds	r1, #8
 80035e8:	e9c1 2300 	strd	r2, r3, [r1]
  for (i = 0; i <= 510; i += 2) {
 80035ec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80035ee:	3302      	adds	r3, #2
 80035f0:	64fb      	str	r3, [r7, #76]	; 0x4c
 80035f2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80035f4:	f5b3 7fff 	cmp.w	r3, #510	; 0x1fe
 80035f8:	dd98      	ble.n	800352c <maxEnvHilbert+0x78c>
  }
  iy = 2;
 80035fa:	2302      	movs	r3, #2
 80035fc:	643b      	str	r3, [r7, #64]	; 0x40
  iDelta2 = 4;
 80035fe:	2304      	movs	r3, #4
 8003600:	64bb      	str	r3, [r7, #72]	; 0x48
  k = 128;
 8003602:	2380      	movs	r3, #128	; 0x80
 8003604:	637b      	str	r3, [r7, #52]	; 0x34
  ju = 509;
 8003606:	f240 13fd 	movw	r3, #509	; 0x1fd
 800360a:	63bb      	str	r3, [r7, #56]	; 0x38
  while (k > 0) {
 800360c:	e145      	b.n	800389a <maxEnvHilbert+0xafa>
    for (i = 0; i < ju; i += iDelta2) {
 800360e:	2300      	movs	r3, #0
 8003610:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003612:	e064      	b.n	80036de <maxEnvHilbert+0x93e>
      b_temp_re_tmp = i + iy;
 8003614:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003616:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003618:	4413      	add	r3, r2
 800361a:	613b      	str	r3, [r7, #16]
      temp_re = fv[b_temp_re_tmp].re;
 800361c:	4a40      	ldr	r2, [pc, #256]	; (8003720 <maxEnvHilbert+0x980>)
 800361e:	693b      	ldr	r3, [r7, #16]
 8003620:	011b      	lsls	r3, r3, #4
 8003622:	4413      	add	r3, r2
 8003624:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003628:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
      temp_im = fv[b_temp_re_tmp].im;
 800362c:	4a3c      	ldr	r2, [pc, #240]	; (8003720 <maxEnvHilbert+0x980>)
 800362e:	693b      	ldr	r3, [r7, #16]
 8003630:	011b      	lsls	r3, r3, #4
 8003632:	4413      	add	r3, r2
 8003634:	3308      	adds	r3, #8
 8003636:	e9d3 2300 	ldrd	r2, r3, [r3]
 800363a:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58
      fv[b_temp_re_tmp].re = fv[i].re - temp_re;
 800363e:	4a38      	ldr	r2, [pc, #224]	; (8003720 <maxEnvHilbert+0x980>)
 8003640:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003642:	011b      	lsls	r3, r3, #4
 8003644:	4413      	add	r3, r2
 8003646:	e9d3 0100 	ldrd	r0, r1, [r3]
 800364a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800364e:	f7fc fe1b 	bl	8000288 <__aeabi_dsub>
 8003652:	4602      	mov	r2, r0
 8003654:	460b      	mov	r3, r1
 8003656:	4832      	ldr	r0, [pc, #200]	; (8003720 <maxEnvHilbert+0x980>)
 8003658:	6939      	ldr	r1, [r7, #16]
 800365a:	0109      	lsls	r1, r1, #4
 800365c:	4401      	add	r1, r0
 800365e:	e9c1 2300 	strd	r2, r3, [r1]
      fv[b_temp_re_tmp].im = fv[i].im - temp_im;
 8003662:	4a2f      	ldr	r2, [pc, #188]	; (8003720 <maxEnvHilbert+0x980>)
 8003664:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003666:	011b      	lsls	r3, r3, #4
 8003668:	4413      	add	r3, r2
 800366a:	3308      	adds	r3, #8
 800366c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003670:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003674:	f7fc fe08 	bl	8000288 <__aeabi_dsub>
 8003678:	4602      	mov	r2, r0
 800367a:	460b      	mov	r3, r1
 800367c:	4828      	ldr	r0, [pc, #160]	; (8003720 <maxEnvHilbert+0x980>)
 800367e:	6939      	ldr	r1, [r7, #16]
 8003680:	0109      	lsls	r1, r1, #4
 8003682:	4401      	add	r1, r0
 8003684:	3108      	adds	r1, #8
 8003686:	e9c1 2300 	strd	r2, r3, [r1]
      fv[i].re += temp_re;
 800368a:	4a25      	ldr	r2, [pc, #148]	; (8003720 <maxEnvHilbert+0x980>)
 800368c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800368e:	011b      	lsls	r3, r3, #4
 8003690:	4413      	add	r3, r2
 8003692:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003696:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800369a:	f7fc fdf7 	bl	800028c <__adddf3>
 800369e:	4602      	mov	r2, r0
 80036a0:	460b      	mov	r3, r1
 80036a2:	481f      	ldr	r0, [pc, #124]	; (8003720 <maxEnvHilbert+0x980>)
 80036a4:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 80036a6:	0109      	lsls	r1, r1, #4
 80036a8:	4401      	add	r1, r0
 80036aa:	e9c1 2300 	strd	r2, r3, [r1]
      fv[i].im += temp_im;
 80036ae:	4a1c      	ldr	r2, [pc, #112]	; (8003720 <maxEnvHilbert+0x980>)
 80036b0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80036b2:	011b      	lsls	r3, r3, #4
 80036b4:	4413      	add	r3, r2
 80036b6:	3308      	adds	r3, #8
 80036b8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80036bc:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80036c0:	f7fc fde4 	bl	800028c <__adddf3>
 80036c4:	4602      	mov	r2, r0
 80036c6:	460b      	mov	r3, r1
 80036c8:	4815      	ldr	r0, [pc, #84]	; (8003720 <maxEnvHilbert+0x980>)
 80036ca:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 80036cc:	0109      	lsls	r1, r1, #4
 80036ce:	4401      	add	r1, r0
 80036d0:	3108      	adds	r1, #8
 80036d2:	e9c1 2300 	strd	r2, r3, [r1]
    for (i = 0; i < ju; i += iDelta2) {
 80036d6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80036d8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80036da:	4413      	add	r3, r2
 80036dc:	64fb      	str	r3, [r7, #76]	; 0x4c
 80036de:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80036e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80036e2:	429a      	cmp	r2, r3
 80036e4:	db96      	blt.n	8003614 <maxEnvHilbert+0x874>
    }
    istart = 1;
 80036e6:	2301      	movs	r3, #1
 80036e8:	647b      	str	r3, [r7, #68]	; 0x44
    for (j = k; j < 256; j += k) {
 80036ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80036ec:	63fb      	str	r3, [r7, #60]	; 0x3c
 80036ee:	e0c2      	b.n	8003876 <maxEnvHilbert+0xad6>
      twid_re = dv[j];
 80036f0:	4a0c      	ldr	r2, [pc, #48]	; (8003724 <maxEnvHilbert+0x984>)
 80036f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80036f4:	00db      	lsls	r3, r3, #3
 80036f6:	4413      	add	r3, r2
 80036f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036fc:	e9c7 2308 	strd	r2, r3, [r7, #32]
      twid_im = dv1[j];
 8003700:	4a09      	ldr	r2, [pc, #36]	; (8003728 <maxEnvHilbert+0x988>)
 8003702:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003704:	00db      	lsls	r3, r3, #3
 8003706:	4413      	add	r3, r2
 8003708:	e9d3 2300 	ldrd	r2, r3, [r3]
 800370c:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
      i = istart;
 8003710:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003712:	64fb      	str	r3, [r7, #76]	; 0x4c
      ihi = istart + ju;
 8003714:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003716:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003718:	4413      	add	r3, r2
 800371a:	617b      	str	r3, [r7, #20]
      while (i < ihi) {
 800371c:	e09f      	b.n	800385e <maxEnvHilbert+0xabe>
 800371e:	bf00      	nop
 8003720:	20000278 	.word	0x20000278
 8003724:	08012be8 	.word	0x08012be8
 8003728:	080133f0 	.word	0x080133f0
        b_temp_re_tmp = i + iy;
 800372c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800372e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003730:	4413      	add	r3, r2
 8003732:	613b      	str	r3, [r7, #16]
        temp_re_tmp = fv[b_temp_re_tmp].im;
 8003734:	4a9c      	ldr	r2, [pc, #624]	; (80039a8 <maxEnvHilbert+0xc08>)
 8003736:	693b      	ldr	r3, [r7, #16]
 8003738:	011b      	lsls	r3, r3, #4
 800373a:	4413      	add	r3, r2
 800373c:	3308      	adds	r3, #8
 800373e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003742:	e9c7 2302 	strd	r2, r3, [r7, #8]
        temp_im = fv[b_temp_re_tmp].re;
 8003746:	4a98      	ldr	r2, [pc, #608]	; (80039a8 <maxEnvHilbert+0xc08>)
 8003748:	693b      	ldr	r3, [r7, #16]
 800374a:	011b      	lsls	r3, r3, #4
 800374c:	4413      	add	r3, r2
 800374e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003752:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58
        temp_re = twid_re * temp_im - twid_im * temp_re_tmp;
 8003756:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800375a:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800375e:	f7fc ff4b 	bl	80005f8 <__aeabi_dmul>
 8003762:	4602      	mov	r2, r0
 8003764:	460b      	mov	r3, r1
 8003766:	4614      	mov	r4, r2
 8003768:	461d      	mov	r5, r3
 800376a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800376e:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8003772:	f7fc ff41 	bl	80005f8 <__aeabi_dmul>
 8003776:	4602      	mov	r2, r0
 8003778:	460b      	mov	r3, r1
 800377a:	4620      	mov	r0, r4
 800377c:	4629      	mov	r1, r5
 800377e:	f7fc fd83 	bl	8000288 <__aeabi_dsub>
 8003782:	4602      	mov	r2, r0
 8003784:	460b      	mov	r3, r1
 8003786:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
        temp_im = twid_re * temp_re_tmp + twid_im * temp_im;
 800378a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800378e:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8003792:	f7fc ff31 	bl	80005f8 <__aeabi_dmul>
 8003796:	4602      	mov	r2, r0
 8003798:	460b      	mov	r3, r1
 800379a:	4614      	mov	r4, r2
 800379c:	461d      	mov	r5, r3
 800379e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80037a2:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80037a6:	f7fc ff27 	bl	80005f8 <__aeabi_dmul>
 80037aa:	4602      	mov	r2, r0
 80037ac:	460b      	mov	r3, r1
 80037ae:	4620      	mov	r0, r4
 80037b0:	4629      	mov	r1, r5
 80037b2:	f7fc fd6b 	bl	800028c <__adddf3>
 80037b6:	4602      	mov	r2, r0
 80037b8:	460b      	mov	r3, r1
 80037ba:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58
        fv[b_temp_re_tmp].re = fv[i].re - temp_re;
 80037be:	4a7a      	ldr	r2, [pc, #488]	; (80039a8 <maxEnvHilbert+0xc08>)
 80037c0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80037c2:	011b      	lsls	r3, r3, #4
 80037c4:	4413      	add	r3, r2
 80037c6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80037ca:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80037ce:	f7fc fd5b 	bl	8000288 <__aeabi_dsub>
 80037d2:	4602      	mov	r2, r0
 80037d4:	460b      	mov	r3, r1
 80037d6:	4874      	ldr	r0, [pc, #464]	; (80039a8 <maxEnvHilbert+0xc08>)
 80037d8:	6939      	ldr	r1, [r7, #16]
 80037da:	0109      	lsls	r1, r1, #4
 80037dc:	4401      	add	r1, r0
 80037de:	e9c1 2300 	strd	r2, r3, [r1]
        fv[b_temp_re_tmp].im = fv[i].im - temp_im;
 80037e2:	4a71      	ldr	r2, [pc, #452]	; (80039a8 <maxEnvHilbert+0xc08>)
 80037e4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80037e6:	011b      	lsls	r3, r3, #4
 80037e8:	4413      	add	r3, r2
 80037ea:	3308      	adds	r3, #8
 80037ec:	e9d3 0100 	ldrd	r0, r1, [r3]
 80037f0:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80037f4:	f7fc fd48 	bl	8000288 <__aeabi_dsub>
 80037f8:	4602      	mov	r2, r0
 80037fa:	460b      	mov	r3, r1
 80037fc:	486a      	ldr	r0, [pc, #424]	; (80039a8 <maxEnvHilbert+0xc08>)
 80037fe:	6939      	ldr	r1, [r7, #16]
 8003800:	0109      	lsls	r1, r1, #4
 8003802:	4401      	add	r1, r0
 8003804:	3108      	adds	r1, #8
 8003806:	e9c1 2300 	strd	r2, r3, [r1]
        fv[i].re += temp_re;
 800380a:	4a67      	ldr	r2, [pc, #412]	; (80039a8 <maxEnvHilbert+0xc08>)
 800380c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800380e:	011b      	lsls	r3, r3, #4
 8003810:	4413      	add	r3, r2
 8003812:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003816:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800381a:	f7fc fd37 	bl	800028c <__adddf3>
 800381e:	4602      	mov	r2, r0
 8003820:	460b      	mov	r3, r1
 8003822:	4861      	ldr	r0, [pc, #388]	; (80039a8 <maxEnvHilbert+0xc08>)
 8003824:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8003826:	0109      	lsls	r1, r1, #4
 8003828:	4401      	add	r1, r0
 800382a:	e9c1 2300 	strd	r2, r3, [r1]
        fv[i].im += temp_im;
 800382e:	4a5e      	ldr	r2, [pc, #376]	; (80039a8 <maxEnvHilbert+0xc08>)
 8003830:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003832:	011b      	lsls	r3, r3, #4
 8003834:	4413      	add	r3, r2
 8003836:	3308      	adds	r3, #8
 8003838:	e9d3 0100 	ldrd	r0, r1, [r3]
 800383c:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003840:	f7fc fd24 	bl	800028c <__adddf3>
 8003844:	4602      	mov	r2, r0
 8003846:	460b      	mov	r3, r1
 8003848:	4857      	ldr	r0, [pc, #348]	; (80039a8 <maxEnvHilbert+0xc08>)
 800384a:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800384c:	0109      	lsls	r1, r1, #4
 800384e:	4401      	add	r1, r0
 8003850:	3108      	adds	r1, #8
 8003852:	e9c1 2300 	strd	r2, r3, [r1]
        i += iDelta2;
 8003856:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003858:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800385a:	4413      	add	r3, r2
 800385c:	64fb      	str	r3, [r7, #76]	; 0x4c
      while (i < ihi) {
 800385e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003860:	697b      	ldr	r3, [r7, #20]
 8003862:	429a      	cmp	r2, r3
 8003864:	f6ff af62 	blt.w	800372c <maxEnvHilbert+0x98c>
      }
      istart++;
 8003868:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800386a:	3301      	adds	r3, #1
 800386c:	647b      	str	r3, [r7, #68]	; 0x44
    for (j = k; j < 256; j += k) {
 800386e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003870:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003872:	4413      	add	r3, r2
 8003874:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003876:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003878:	2bff      	cmp	r3, #255	; 0xff
 800387a:	f77f af39 	ble.w	80036f0 <maxEnvHilbert+0x950>
    }
    k /= 2;
 800387e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003880:	0fda      	lsrs	r2, r3, #31
 8003882:	4413      	add	r3, r2
 8003884:	105b      	asrs	r3, r3, #1
 8003886:	637b      	str	r3, [r7, #52]	; 0x34
    iy = iDelta2;
 8003888:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800388a:	643b      	str	r3, [r7, #64]	; 0x40
    iDelta2 += iDelta2;
 800388c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800388e:	005b      	lsls	r3, r3, #1
 8003890:	64bb      	str	r3, [r7, #72]	; 0x48
    ju -= iy;
 8003892:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003894:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003896:	1ad3      	subs	r3, r2, r3
 8003898:	63bb      	str	r3, [r7, #56]	; 0x38
  while (k > 0) {
 800389a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800389c:	2b00      	cmp	r3, #0
 800389e:	f73f aeb6 	bgt.w	800360e <maxEnvHilbert+0x86e>
  }
  for (iy = 0; iy < 512; iy++) {
 80038a2:	2300      	movs	r3, #0
 80038a4:	643b      	str	r3, [r7, #64]	; 0x40
 80038a6:	e061      	b.n	800396c <maxEnvHilbert+0xbcc>
    re_tmp = fy[iy].re;
 80038a8:	4a40      	ldr	r2, [pc, #256]	; (80039ac <maxEnvHilbert+0xc0c>)
 80038aa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80038ac:	011b      	lsls	r3, r3, #4
 80038ae:	4413      	add	r3, r2
 80038b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038b4:	e9c7 2306 	strd	r2, r3, [r7, #24]
    temp_im = fv[iy].im;
 80038b8:	4a3b      	ldr	r2, [pc, #236]	; (80039a8 <maxEnvHilbert+0xc08>)
 80038ba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80038bc:	011b      	lsls	r3, r3, #4
 80038be:	4413      	add	r3, r2
 80038c0:	3308      	adds	r3, #8
 80038c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038c6:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58
    temp_re = fy[iy].im;
 80038ca:	4a38      	ldr	r2, [pc, #224]	; (80039ac <maxEnvHilbert+0xc0c>)
 80038cc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80038ce:	011b      	lsls	r3, r3, #4
 80038d0:	4413      	add	r3, r2
 80038d2:	3308      	adds	r3, #8
 80038d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038d8:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
    twid_re = fv[iy].re;
 80038dc:	4a32      	ldr	r2, [pc, #200]	; (80039a8 <maxEnvHilbert+0xc08>)
 80038de:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80038e0:	011b      	lsls	r3, r3, #4
 80038e2:	4413      	add	r3, r2
 80038e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038e8:	e9c7 2308 	strd	r2, r3, [r7, #32]
    fy[iy].re = re_tmp * twid_re - temp_re * temp_im;
 80038ec:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80038f0:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80038f4:	f7fc fe80 	bl	80005f8 <__aeabi_dmul>
 80038f8:	4602      	mov	r2, r0
 80038fa:	460b      	mov	r3, r1
 80038fc:	4614      	mov	r4, r2
 80038fe:	461d      	mov	r5, r3
 8003900:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003904:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8003908:	f7fc fe76 	bl	80005f8 <__aeabi_dmul>
 800390c:	4602      	mov	r2, r0
 800390e:	460b      	mov	r3, r1
 8003910:	4620      	mov	r0, r4
 8003912:	4629      	mov	r1, r5
 8003914:	f7fc fcb8 	bl	8000288 <__aeabi_dsub>
 8003918:	4602      	mov	r2, r0
 800391a:	460b      	mov	r3, r1
 800391c:	4823      	ldr	r0, [pc, #140]	; (80039ac <maxEnvHilbert+0xc0c>)
 800391e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003920:	0109      	lsls	r1, r1, #4
 8003922:	4401      	add	r1, r0
 8003924:	e9c1 2300 	strd	r2, r3, [r1]
    fy[iy].im = re_tmp * temp_im + temp_re * twid_re;
 8003928:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800392c:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8003930:	f7fc fe62 	bl	80005f8 <__aeabi_dmul>
 8003934:	4602      	mov	r2, r0
 8003936:	460b      	mov	r3, r1
 8003938:	4614      	mov	r4, r2
 800393a:	461d      	mov	r5, r3
 800393c:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003940:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8003944:	f7fc fe58 	bl	80005f8 <__aeabi_dmul>
 8003948:	4602      	mov	r2, r0
 800394a:	460b      	mov	r3, r1
 800394c:	4620      	mov	r0, r4
 800394e:	4629      	mov	r1, r5
 8003950:	f7fc fc9c 	bl	800028c <__adddf3>
 8003954:	4602      	mov	r2, r0
 8003956:	460b      	mov	r3, r1
 8003958:	4814      	ldr	r0, [pc, #80]	; (80039ac <maxEnvHilbert+0xc0c>)
 800395a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800395c:	0109      	lsls	r1, r1, #4
 800395e:	4401      	add	r1, r0
 8003960:	3108      	adds	r1, #8
 8003962:	e9c1 2300 	strd	r2, r3, [r1]
  for (iy = 0; iy < 512; iy++) {
 8003966:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003968:	3301      	adds	r3, #1
 800396a:	643b      	str	r3, [r7, #64]	; 0x40
 800396c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800396e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003972:	db99      	blt.n	80038a8 <maxEnvHilbert+0xb08>
  }
  iy = 0;
 8003974:	2300      	movs	r3, #0
 8003976:	643b      	str	r3, [r7, #64]	; 0x40
  ju = 0;
 8003978:	2300      	movs	r3, #0
 800397a:	63bb      	str	r3, [r7, #56]	; 0x38
  for (i = 0; i < 511; i++) {
 800397c:	2300      	movs	r3, #0
 800397e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003980:	e030      	b.n	80039e4 <maxEnvHilbert+0xc44>
    fv[iy] = fy[i];
 8003982:	4a09      	ldr	r2, [pc, #36]	; (80039a8 <maxEnvHilbert+0xc08>)
 8003984:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003986:	011b      	lsls	r3, r3, #4
 8003988:	18d1      	adds	r1, r2, r3
 800398a:	4a08      	ldr	r2, [pc, #32]	; (80039ac <maxEnvHilbert+0xc0c>)
 800398c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800398e:	011b      	lsls	r3, r3, #4
 8003990:	4413      	add	r3, r2
 8003992:	460c      	mov	r4, r1
 8003994:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003996:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    iy = 512;
 800399a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800399e:	643b      	str	r3, [r7, #64]	; 0x40
    tst = true;
 80039a0:	2301      	movs	r3, #1
 80039a2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    while (tst) {
 80039a6:	e014      	b.n	80039d2 <maxEnvHilbert+0xc32>
 80039a8:	20000278 	.word	0x20000278
 80039ac:	20002278 	.word	0x20002278
      iy >>= 1;
 80039b0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80039b2:	105b      	asrs	r3, r3, #1
 80039b4:	643b      	str	r3, [r7, #64]	; 0x40
      ju ^= iy;
 80039b6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80039b8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80039ba:	4053      	eors	r3, r2
 80039bc:	63bb      	str	r3, [r7, #56]	; 0x38
      tst = ((ju & iy) == 0);
 80039be:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80039c0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80039c2:	4013      	ands	r3, r2
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	bf0c      	ite	eq
 80039c8:	2301      	moveq	r3, #1
 80039ca:	2300      	movne	r3, #0
 80039cc:	b2db      	uxtb	r3, r3
 80039ce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    while (tst) {
 80039d2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d1ea      	bne.n	80039b0 <maxEnvHilbert+0xc10>
    }
    iy = ju;
 80039da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80039dc:	643b      	str	r3, [r7, #64]	; 0x40
  for (i = 0; i < 511; i++) {
 80039de:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80039e0:	3301      	adds	r3, #1
 80039e2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80039e4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80039e6:	f5b3 7fff 	cmp.w	r3, #510	; 0x1fe
 80039ea:	ddca      	ble.n	8003982 <maxEnvHilbert+0xbe2>
  }
  fv[iy] = fy[511];
 80039ec:	4a84      	ldr	r2, [pc, #528]	; (8003c00 <maxEnvHilbert+0xe60>)
 80039ee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80039f0:	011b      	lsls	r3, r3, #4
 80039f2:	441a      	add	r2, r3
 80039f4:	4b83      	ldr	r3, [pc, #524]	; (8003c04 <maxEnvHilbert+0xe64>)
 80039f6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80039fa:	4614      	mov	r4, r2
 80039fc:	f503 637f 	add.w	r3, r3, #4080	; 0xff0
 8003a00:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003a02:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  for (i = 0; i <= 510; i += 2) {
 8003a06:	2300      	movs	r3, #0
 8003a08:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003a0a:	e062      	b.n	8003ad2 <maxEnvHilbert+0xd32>
    temp_re_tmp = fv[i + 1].re;
 8003a0c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003a0e:	3301      	adds	r3, #1
 8003a10:	4a7b      	ldr	r2, [pc, #492]	; (8003c00 <maxEnvHilbert+0xe60>)
 8003a12:	011b      	lsls	r3, r3, #4
 8003a14:	4413      	add	r3, r2
 8003a16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a1a:	e9c7 2302 	strd	r2, r3, [r7, #8]
    temp_re = fv[i + 1].im;
 8003a1e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003a20:	3301      	adds	r3, #1
 8003a22:	4a77      	ldr	r2, [pc, #476]	; (8003c00 <maxEnvHilbert+0xe60>)
 8003a24:	011b      	lsls	r3, r3, #4
 8003a26:	4413      	add	r3, r2
 8003a28:	3308      	adds	r3, #8
 8003a2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a2e:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
    re_tmp = fv[i].re;
 8003a32:	4a73      	ldr	r2, [pc, #460]	; (8003c00 <maxEnvHilbert+0xe60>)
 8003a34:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003a36:	011b      	lsls	r3, r3, #4
 8003a38:	4413      	add	r3, r2
 8003a3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a3e:	e9c7 2306 	strd	r2, r3, [r7, #24]
    twid_re = fv[i].im;
 8003a42:	4a6f      	ldr	r2, [pc, #444]	; (8003c00 <maxEnvHilbert+0xe60>)
 8003a44:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003a46:	011b      	lsls	r3, r3, #4
 8003a48:	4413      	add	r3, r2
 8003a4a:	3308      	adds	r3, #8
 8003a4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a50:	e9c7 2308 	strd	r2, r3, [r7, #32]
    fv[i + 1].re = re_tmp - temp_re_tmp;
 8003a54:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003a56:	1c5c      	adds	r4, r3, #1
 8003a58:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003a5c:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8003a60:	f7fc fc12 	bl	8000288 <__aeabi_dsub>
 8003a64:	4602      	mov	r2, r0
 8003a66:	460b      	mov	r3, r1
 8003a68:	4865      	ldr	r0, [pc, #404]	; (8003c00 <maxEnvHilbert+0xe60>)
 8003a6a:	0121      	lsls	r1, r4, #4
 8003a6c:	4401      	add	r1, r0
 8003a6e:	e9c1 2300 	strd	r2, r3, [r1]
    fv[i + 1].im = twid_re - temp_re;
 8003a72:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003a74:	1c5c      	adds	r4, r3, #1
 8003a76:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003a7a:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8003a7e:	f7fc fc03 	bl	8000288 <__aeabi_dsub>
 8003a82:	4602      	mov	r2, r0
 8003a84:	460b      	mov	r3, r1
 8003a86:	485e      	ldr	r0, [pc, #376]	; (8003c00 <maxEnvHilbert+0xe60>)
 8003a88:	0121      	lsls	r1, r4, #4
 8003a8a:	4401      	add	r1, r0
 8003a8c:	3108      	adds	r1, #8
 8003a8e:	e9c1 2300 	strd	r2, r3, [r1]
    fv[i].re = re_tmp + temp_re_tmp;
 8003a92:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003a96:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8003a9a:	f7fc fbf7 	bl	800028c <__adddf3>
 8003a9e:	4602      	mov	r2, r0
 8003aa0:	460b      	mov	r3, r1
 8003aa2:	4857      	ldr	r0, [pc, #348]	; (8003c00 <maxEnvHilbert+0xe60>)
 8003aa4:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8003aa6:	0109      	lsls	r1, r1, #4
 8003aa8:	4401      	add	r1, r0
 8003aaa:	e9c1 2300 	strd	r2, r3, [r1]
    fv[i].im = twid_re + temp_re;
 8003aae:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003ab2:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8003ab6:	f7fc fbe9 	bl	800028c <__adddf3>
 8003aba:	4602      	mov	r2, r0
 8003abc:	460b      	mov	r3, r1
 8003abe:	4850      	ldr	r0, [pc, #320]	; (8003c00 <maxEnvHilbert+0xe60>)
 8003ac0:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8003ac2:	0109      	lsls	r1, r1, #4
 8003ac4:	4401      	add	r1, r0
 8003ac6:	3108      	adds	r1, #8
 8003ac8:	e9c1 2300 	strd	r2, r3, [r1]
  for (i = 0; i <= 510; i += 2) {
 8003acc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003ace:	3302      	adds	r3, #2
 8003ad0:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003ad2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003ad4:	f5b3 7fff 	cmp.w	r3, #510	; 0x1fe
 8003ad8:	dd98      	ble.n	8003a0c <maxEnvHilbert+0xc6c>
  }
  iy = 2;
 8003ada:	2302      	movs	r3, #2
 8003adc:	643b      	str	r3, [r7, #64]	; 0x40
  iDelta2 = 4;
 8003ade:	2304      	movs	r3, #4
 8003ae0:	64bb      	str	r3, [r7, #72]	; 0x48
  k = 128;
 8003ae2:	2380      	movs	r3, #128	; 0x80
 8003ae4:	637b      	str	r3, [r7, #52]	; 0x34
  ju = 509;
 8003ae6:	f240 13fd 	movw	r3, #509	; 0x1fd
 8003aea:	63bb      	str	r3, [r7, #56]	; 0x38
  while (k > 0) {
 8003aec:	e147      	b.n	8003d7e <maxEnvHilbert+0xfde>
    for (i = 0; i < ju; i += iDelta2) {
 8003aee:	2300      	movs	r3, #0
 8003af0:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003af2:	e064      	b.n	8003bbe <maxEnvHilbert+0xe1e>
      b_temp_re_tmp = i + iy;
 8003af4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003af6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003af8:	4413      	add	r3, r2
 8003afa:	613b      	str	r3, [r7, #16]
      temp_re = fv[b_temp_re_tmp].re;
 8003afc:	4a40      	ldr	r2, [pc, #256]	; (8003c00 <maxEnvHilbert+0xe60>)
 8003afe:	693b      	ldr	r3, [r7, #16]
 8003b00:	011b      	lsls	r3, r3, #4
 8003b02:	4413      	add	r3, r2
 8003b04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b08:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
      temp_im = fv[b_temp_re_tmp].im;
 8003b0c:	4a3c      	ldr	r2, [pc, #240]	; (8003c00 <maxEnvHilbert+0xe60>)
 8003b0e:	693b      	ldr	r3, [r7, #16]
 8003b10:	011b      	lsls	r3, r3, #4
 8003b12:	4413      	add	r3, r2
 8003b14:	3308      	adds	r3, #8
 8003b16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b1a:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58
      fv[b_temp_re_tmp].re = fv[i].re - temp_re;
 8003b1e:	4a38      	ldr	r2, [pc, #224]	; (8003c00 <maxEnvHilbert+0xe60>)
 8003b20:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003b22:	011b      	lsls	r3, r3, #4
 8003b24:	4413      	add	r3, r2
 8003b26:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003b2a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003b2e:	f7fc fbab 	bl	8000288 <__aeabi_dsub>
 8003b32:	4602      	mov	r2, r0
 8003b34:	460b      	mov	r3, r1
 8003b36:	4832      	ldr	r0, [pc, #200]	; (8003c00 <maxEnvHilbert+0xe60>)
 8003b38:	6939      	ldr	r1, [r7, #16]
 8003b3a:	0109      	lsls	r1, r1, #4
 8003b3c:	4401      	add	r1, r0
 8003b3e:	e9c1 2300 	strd	r2, r3, [r1]
      fv[b_temp_re_tmp].im = fv[i].im - temp_im;
 8003b42:	4a2f      	ldr	r2, [pc, #188]	; (8003c00 <maxEnvHilbert+0xe60>)
 8003b44:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003b46:	011b      	lsls	r3, r3, #4
 8003b48:	4413      	add	r3, r2
 8003b4a:	3308      	adds	r3, #8
 8003b4c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003b50:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003b54:	f7fc fb98 	bl	8000288 <__aeabi_dsub>
 8003b58:	4602      	mov	r2, r0
 8003b5a:	460b      	mov	r3, r1
 8003b5c:	4828      	ldr	r0, [pc, #160]	; (8003c00 <maxEnvHilbert+0xe60>)
 8003b5e:	6939      	ldr	r1, [r7, #16]
 8003b60:	0109      	lsls	r1, r1, #4
 8003b62:	4401      	add	r1, r0
 8003b64:	3108      	adds	r1, #8
 8003b66:	e9c1 2300 	strd	r2, r3, [r1]
      fv[i].re += temp_re;
 8003b6a:	4a25      	ldr	r2, [pc, #148]	; (8003c00 <maxEnvHilbert+0xe60>)
 8003b6c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003b6e:	011b      	lsls	r3, r3, #4
 8003b70:	4413      	add	r3, r2
 8003b72:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003b76:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003b7a:	f7fc fb87 	bl	800028c <__adddf3>
 8003b7e:	4602      	mov	r2, r0
 8003b80:	460b      	mov	r3, r1
 8003b82:	481f      	ldr	r0, [pc, #124]	; (8003c00 <maxEnvHilbert+0xe60>)
 8003b84:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8003b86:	0109      	lsls	r1, r1, #4
 8003b88:	4401      	add	r1, r0
 8003b8a:	e9c1 2300 	strd	r2, r3, [r1]
      fv[i].im += temp_im;
 8003b8e:	4a1c      	ldr	r2, [pc, #112]	; (8003c00 <maxEnvHilbert+0xe60>)
 8003b90:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003b92:	011b      	lsls	r3, r3, #4
 8003b94:	4413      	add	r3, r2
 8003b96:	3308      	adds	r3, #8
 8003b98:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003b9c:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003ba0:	f7fc fb74 	bl	800028c <__adddf3>
 8003ba4:	4602      	mov	r2, r0
 8003ba6:	460b      	mov	r3, r1
 8003ba8:	4815      	ldr	r0, [pc, #84]	; (8003c00 <maxEnvHilbert+0xe60>)
 8003baa:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8003bac:	0109      	lsls	r1, r1, #4
 8003bae:	4401      	add	r1, r0
 8003bb0:	3108      	adds	r1, #8
 8003bb2:	e9c1 2300 	strd	r2, r3, [r1]
    for (i = 0; i < ju; i += iDelta2) {
 8003bb6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003bb8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003bba:	4413      	add	r3, r2
 8003bbc:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003bbe:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003bc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003bc2:	429a      	cmp	r2, r3
 8003bc4:	db96      	blt.n	8003af4 <maxEnvHilbert+0xd54>
    }
    istart = 1;
 8003bc6:	2301      	movs	r3, #1
 8003bc8:	647b      	str	r3, [r7, #68]	; 0x44
    for (j = k; j < 256; j += k) {
 8003bca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003bcc:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003bce:	e0c4      	b.n	8003d5a <maxEnvHilbert+0xfba>
      twid_re = dv[j];
 8003bd0:	4a0d      	ldr	r2, [pc, #52]	; (8003c08 <maxEnvHilbert+0xe68>)
 8003bd2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003bd4:	00db      	lsls	r3, r3, #3
 8003bd6:	4413      	add	r3, r2
 8003bd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003bdc:	e9c7 2308 	strd	r2, r3, [r7, #32]
      twid_im = b_dv[j];
 8003be0:	4a0a      	ldr	r2, [pc, #40]	; (8003c0c <maxEnvHilbert+0xe6c>)
 8003be2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003be4:	00db      	lsls	r3, r3, #3
 8003be6:	4413      	add	r3, r2
 8003be8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003bec:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
      i = istart;
 8003bf0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003bf2:	64fb      	str	r3, [r7, #76]	; 0x4c
      ihi = istart + ju;
 8003bf4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003bf6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003bf8:	4413      	add	r3, r2
 8003bfa:	617b      	str	r3, [r7, #20]
      while (i < ihi) {
 8003bfc:	e0a1      	b.n	8003d42 <maxEnvHilbert+0xfa2>
 8003bfe:	bf00      	nop
 8003c00:	20000278 	.word	0x20000278
 8003c04:	20002278 	.word	0x20002278
 8003c08:	08012be8 	.word	0x08012be8
 8003c0c:	080123e0 	.word	0x080123e0
        b_temp_re_tmp = i + iy;
 8003c10:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003c12:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003c14:	4413      	add	r3, r2
 8003c16:	613b      	str	r3, [r7, #16]
        temp_re_tmp = fv[b_temp_re_tmp].im;
 8003c18:	4a75      	ldr	r2, [pc, #468]	; (8003df0 <maxEnvHilbert+0x1050>)
 8003c1a:	693b      	ldr	r3, [r7, #16]
 8003c1c:	011b      	lsls	r3, r3, #4
 8003c1e:	4413      	add	r3, r2
 8003c20:	3308      	adds	r3, #8
 8003c22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c26:	e9c7 2302 	strd	r2, r3, [r7, #8]
        temp_im = fv[b_temp_re_tmp].re;
 8003c2a:	4a71      	ldr	r2, [pc, #452]	; (8003df0 <maxEnvHilbert+0x1050>)
 8003c2c:	693b      	ldr	r3, [r7, #16]
 8003c2e:	011b      	lsls	r3, r3, #4
 8003c30:	4413      	add	r3, r2
 8003c32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c36:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58
        temp_re = twid_re * temp_im - twid_im * temp_re_tmp;
 8003c3a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003c3e:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8003c42:	f7fc fcd9 	bl	80005f8 <__aeabi_dmul>
 8003c46:	4602      	mov	r2, r0
 8003c48:	460b      	mov	r3, r1
 8003c4a:	4614      	mov	r4, r2
 8003c4c:	461d      	mov	r5, r3
 8003c4e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003c52:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8003c56:	f7fc fccf 	bl	80005f8 <__aeabi_dmul>
 8003c5a:	4602      	mov	r2, r0
 8003c5c:	460b      	mov	r3, r1
 8003c5e:	4620      	mov	r0, r4
 8003c60:	4629      	mov	r1, r5
 8003c62:	f7fc fb11 	bl	8000288 <__aeabi_dsub>
 8003c66:	4602      	mov	r2, r0
 8003c68:	460b      	mov	r3, r1
 8003c6a:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
        temp_im = twid_re * temp_re_tmp + twid_im * temp_im;
 8003c6e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003c72:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8003c76:	f7fc fcbf 	bl	80005f8 <__aeabi_dmul>
 8003c7a:	4602      	mov	r2, r0
 8003c7c:	460b      	mov	r3, r1
 8003c7e:	4614      	mov	r4, r2
 8003c80:	461d      	mov	r5, r3
 8003c82:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003c86:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8003c8a:	f7fc fcb5 	bl	80005f8 <__aeabi_dmul>
 8003c8e:	4602      	mov	r2, r0
 8003c90:	460b      	mov	r3, r1
 8003c92:	4620      	mov	r0, r4
 8003c94:	4629      	mov	r1, r5
 8003c96:	f7fc faf9 	bl	800028c <__adddf3>
 8003c9a:	4602      	mov	r2, r0
 8003c9c:	460b      	mov	r3, r1
 8003c9e:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58
        fv[b_temp_re_tmp].re = fv[i].re - temp_re;
 8003ca2:	4a53      	ldr	r2, [pc, #332]	; (8003df0 <maxEnvHilbert+0x1050>)
 8003ca4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003ca6:	011b      	lsls	r3, r3, #4
 8003ca8:	4413      	add	r3, r2
 8003caa:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003cae:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003cb2:	f7fc fae9 	bl	8000288 <__aeabi_dsub>
 8003cb6:	4602      	mov	r2, r0
 8003cb8:	460b      	mov	r3, r1
 8003cba:	484d      	ldr	r0, [pc, #308]	; (8003df0 <maxEnvHilbert+0x1050>)
 8003cbc:	6939      	ldr	r1, [r7, #16]
 8003cbe:	0109      	lsls	r1, r1, #4
 8003cc0:	4401      	add	r1, r0
 8003cc2:	e9c1 2300 	strd	r2, r3, [r1]
        fv[b_temp_re_tmp].im = fv[i].im - temp_im;
 8003cc6:	4a4a      	ldr	r2, [pc, #296]	; (8003df0 <maxEnvHilbert+0x1050>)
 8003cc8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003cca:	011b      	lsls	r3, r3, #4
 8003ccc:	4413      	add	r3, r2
 8003cce:	3308      	adds	r3, #8
 8003cd0:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003cd4:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003cd8:	f7fc fad6 	bl	8000288 <__aeabi_dsub>
 8003cdc:	4602      	mov	r2, r0
 8003cde:	460b      	mov	r3, r1
 8003ce0:	4843      	ldr	r0, [pc, #268]	; (8003df0 <maxEnvHilbert+0x1050>)
 8003ce2:	6939      	ldr	r1, [r7, #16]
 8003ce4:	0109      	lsls	r1, r1, #4
 8003ce6:	4401      	add	r1, r0
 8003ce8:	3108      	adds	r1, #8
 8003cea:	e9c1 2300 	strd	r2, r3, [r1]
        fv[i].re += temp_re;
 8003cee:	4a40      	ldr	r2, [pc, #256]	; (8003df0 <maxEnvHilbert+0x1050>)
 8003cf0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003cf2:	011b      	lsls	r3, r3, #4
 8003cf4:	4413      	add	r3, r2
 8003cf6:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003cfa:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003cfe:	f7fc fac5 	bl	800028c <__adddf3>
 8003d02:	4602      	mov	r2, r0
 8003d04:	460b      	mov	r3, r1
 8003d06:	483a      	ldr	r0, [pc, #232]	; (8003df0 <maxEnvHilbert+0x1050>)
 8003d08:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8003d0a:	0109      	lsls	r1, r1, #4
 8003d0c:	4401      	add	r1, r0
 8003d0e:	e9c1 2300 	strd	r2, r3, [r1]
        fv[i].im += temp_im;
 8003d12:	4a37      	ldr	r2, [pc, #220]	; (8003df0 <maxEnvHilbert+0x1050>)
 8003d14:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003d16:	011b      	lsls	r3, r3, #4
 8003d18:	4413      	add	r3, r2
 8003d1a:	3308      	adds	r3, #8
 8003d1c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003d20:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003d24:	f7fc fab2 	bl	800028c <__adddf3>
 8003d28:	4602      	mov	r2, r0
 8003d2a:	460b      	mov	r3, r1
 8003d2c:	4830      	ldr	r0, [pc, #192]	; (8003df0 <maxEnvHilbert+0x1050>)
 8003d2e:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8003d30:	0109      	lsls	r1, r1, #4
 8003d32:	4401      	add	r1, r0
 8003d34:	3108      	adds	r1, #8
 8003d36:	e9c1 2300 	strd	r2, r3, [r1]
        i += iDelta2;
 8003d3a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003d3c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003d3e:	4413      	add	r3, r2
 8003d40:	64fb      	str	r3, [r7, #76]	; 0x4c
      while (i < ihi) {
 8003d42:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003d44:	697b      	ldr	r3, [r7, #20]
 8003d46:	429a      	cmp	r2, r3
 8003d48:	f6ff af62 	blt.w	8003c10 <maxEnvHilbert+0xe70>
      }
      istart++;
 8003d4c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003d4e:	3301      	adds	r3, #1
 8003d50:	647b      	str	r3, [r7, #68]	; 0x44
    for (j = k; j < 256; j += k) {
 8003d52:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003d54:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003d56:	4413      	add	r3, r2
 8003d58:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003d5a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003d5c:	2bff      	cmp	r3, #255	; 0xff
 8003d5e:	f77f af37 	ble.w	8003bd0 <maxEnvHilbert+0xe30>
    }
    k /= 2;
 8003d62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003d64:	0fda      	lsrs	r2, r3, #31
 8003d66:	4413      	add	r3, r2
 8003d68:	105b      	asrs	r3, r3, #1
 8003d6a:	637b      	str	r3, [r7, #52]	; 0x34
    iy = iDelta2;
 8003d6c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003d6e:	643b      	str	r3, [r7, #64]	; 0x40
    iDelta2 += iDelta2;
 8003d70:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003d72:	005b      	lsls	r3, r3, #1
 8003d74:	64bb      	str	r3, [r7, #72]	; 0x48
    ju -= iy;
 8003d76:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003d78:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003d7a:	1ad3      	subs	r3, r2, r3
 8003d7c:	63bb      	str	r3, [r7, #56]	; 0x38
  while (k > 0) {
 8003d7e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	f73f aeb4 	bgt.w	8003aee <maxEnvHilbert+0xd4e>
  }
  for (iy = 0; iy < 512; iy++) {
 8003d86:	2300      	movs	r3, #0
 8003d88:	643b      	str	r3, [r7, #64]	; 0x40
 8003d8a:	e02a      	b.n	8003de2 <maxEnvHilbert+0x1042>
    fv[iy].re *= 0.001953125;
 8003d8c:	4a18      	ldr	r2, [pc, #96]	; (8003df0 <maxEnvHilbert+0x1050>)
 8003d8e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003d90:	011b      	lsls	r3, r3, #4
 8003d92:	4413      	add	r3, r2
 8003d94:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003d98:	f04f 0200 	mov.w	r2, #0
 8003d9c:	4b15      	ldr	r3, [pc, #84]	; (8003df4 <maxEnvHilbert+0x1054>)
 8003d9e:	f7fc fc2b 	bl	80005f8 <__aeabi_dmul>
 8003da2:	4602      	mov	r2, r0
 8003da4:	460b      	mov	r3, r1
 8003da6:	4812      	ldr	r0, [pc, #72]	; (8003df0 <maxEnvHilbert+0x1050>)
 8003da8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003daa:	0109      	lsls	r1, r1, #4
 8003dac:	4401      	add	r1, r0
 8003dae:	e9c1 2300 	strd	r2, r3, [r1]
    fv[iy].im *= 0.001953125;
 8003db2:	4a0f      	ldr	r2, [pc, #60]	; (8003df0 <maxEnvHilbert+0x1050>)
 8003db4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003db6:	011b      	lsls	r3, r3, #4
 8003db8:	4413      	add	r3, r2
 8003dba:	3308      	adds	r3, #8
 8003dbc:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003dc0:	f04f 0200 	mov.w	r2, #0
 8003dc4:	4b0b      	ldr	r3, [pc, #44]	; (8003df4 <maxEnvHilbert+0x1054>)
 8003dc6:	f7fc fc17 	bl	80005f8 <__aeabi_dmul>
 8003dca:	4602      	mov	r2, r0
 8003dcc:	460b      	mov	r3, r1
 8003dce:	4808      	ldr	r0, [pc, #32]	; (8003df0 <maxEnvHilbert+0x1050>)
 8003dd0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003dd2:	0109      	lsls	r1, r1, #4
 8003dd4:	4401      	add	r1, r0
 8003dd6:	3108      	adds	r1, #8
 8003dd8:	e9c1 2300 	strd	r2, r3, [r1]
  for (iy = 0; iy < 512; iy++) {
 8003ddc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003dde:	3301      	adds	r3, #1
 8003de0:	643b      	str	r3, [r7, #64]	; 0x40
 8003de2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003de4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003de8:	dbd0      	blt.n	8003d8c <maxEnvHilbert+0xfec>
  }
  for (i = 0; i < 200; i++) {
 8003dea:	2300      	movs	r3, #0
 8003dec:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003dee:	e0d1      	b.n	8003f94 <maxEnvHilbert+0x11f4>
 8003df0:	20000278 	.word	0x20000278
 8003df4:	3f600000 	.word	0x3f600000
    temp_im = b_wwc[i + 199].re;
 8003df8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003dfa:	33c7      	adds	r3, #199	; 0xc7
 8003dfc:	4a6f      	ldr	r2, [pc, #444]	; (8003fbc <maxEnvHilbert+0x121c>)
 8003dfe:	011b      	lsls	r3, r3, #4
 8003e00:	4413      	add	r3, r2
 8003e02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e06:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58
    temp_re = fv[i + 199].im;
 8003e0a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003e0c:	33c7      	adds	r3, #199	; 0xc7
 8003e0e:	4a6c      	ldr	r2, [pc, #432]	; (8003fc0 <maxEnvHilbert+0x1220>)
 8003e10:	011b      	lsls	r3, r3, #4
 8003e12:	4413      	add	r3, r2
 8003e14:	3308      	adds	r3, #8
 8003e16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e1a:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
    twid_re = b_wwc[i + 199].im;
 8003e1e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003e20:	33c7      	adds	r3, #199	; 0xc7
 8003e22:	4a66      	ldr	r2, [pc, #408]	; (8003fbc <maxEnvHilbert+0x121c>)
 8003e24:	011b      	lsls	r3, r3, #4
 8003e26:	4413      	add	r3, r2
 8003e28:	3308      	adds	r3, #8
 8003e2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e2e:	e9c7 2308 	strd	r2, r3, [r7, #32]
    twid_im = fv[i + 199].re;
 8003e32:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003e34:	33c7      	adds	r3, #199	; 0xc7
 8003e36:	4a62      	ldr	r2, [pc, #392]	; (8003fc0 <maxEnvHilbert+0x1220>)
 8003e38:	011b      	lsls	r3, r3, #4
 8003e3a:	4413      	add	r3, r2
 8003e3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e40:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
    re_tmp = temp_im * twid_im + twid_re * temp_re;
 8003e44:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8003e48:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8003e4c:	f7fc fbd4 	bl	80005f8 <__aeabi_dmul>
 8003e50:	4602      	mov	r2, r0
 8003e52:	460b      	mov	r3, r1
 8003e54:	4614      	mov	r4, r2
 8003e56:	461d      	mov	r5, r3
 8003e58:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003e5c:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8003e60:	f7fc fbca 	bl	80005f8 <__aeabi_dmul>
 8003e64:	4602      	mov	r2, r0
 8003e66:	460b      	mov	r3, r1
 8003e68:	4620      	mov	r0, r4
 8003e6a:	4629      	mov	r1, r5
 8003e6c:	f7fc fa0e 	bl	800028c <__adddf3>
 8003e70:	4602      	mov	r2, r0
 8003e72:	460b      	mov	r3, r1
 8003e74:	e9c7 2306 	strd	r2, r3, [r7, #24]
    temp_im = temp_im * temp_re - twid_re * twid_im;
 8003e78:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003e7c:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8003e80:	f7fc fbba 	bl	80005f8 <__aeabi_dmul>
 8003e84:	4602      	mov	r2, r0
 8003e86:	460b      	mov	r3, r1
 8003e88:	4614      	mov	r4, r2
 8003e8a:	461d      	mov	r5, r3
 8003e8c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8003e90:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8003e94:	f7fc fbb0 	bl	80005f8 <__aeabi_dmul>
 8003e98:	4602      	mov	r2, r0
 8003e9a:	460b      	mov	r3, r1
 8003e9c:	4620      	mov	r0, r4
 8003e9e:	4629      	mov	r1, r5
 8003ea0:	f7fc f9f2 	bl	8000288 <__aeabi_dsub>
 8003ea4:	4602      	mov	r2, r0
 8003ea6:	460b      	mov	r3, r1
 8003ea8:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58
    if (temp_im == 0.0) {
 8003eac:	f04f 0200 	mov.w	r2, #0
 8003eb0:	f04f 0300 	mov.w	r3, #0
 8003eb4:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8003eb8:	f7fc fe06 	bl	8000ac8 <__aeabi_dcmpeq>
 8003ebc:	4603      	mov	r3, r0
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d011      	beq.n	8003ee6 <maxEnvHilbert+0x1146>
      twid_im = re_tmp / 200.0;
 8003ec2:	f04f 0200 	mov.w	r2, #0
 8003ec6:	4b3f      	ldr	r3, [pc, #252]	; (8003fc4 <maxEnvHilbert+0x1224>)
 8003ec8:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8003ecc:	f7fc fcbe 	bl	800084c <__aeabi_ddiv>
 8003ed0:	4602      	mov	r2, r0
 8003ed2:	460b      	mov	r3, r1
 8003ed4:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
      temp_im = 0.0;
 8003ed8:	f04f 0200 	mov.w	r2, #0
 8003edc:	f04f 0300 	mov.w	r3, #0
 8003ee0:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58
 8003ee4:	e032      	b.n	8003f4c <maxEnvHilbert+0x11ac>
    } else if (re_tmp == 0.0) {
 8003ee6:	f04f 0200 	mov.w	r2, #0
 8003eea:	f04f 0300 	mov.w	r3, #0
 8003eee:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8003ef2:	f7fc fde9 	bl	8000ac8 <__aeabi_dcmpeq>
 8003ef6:	4603      	mov	r3, r0
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d011      	beq.n	8003f20 <maxEnvHilbert+0x1180>
      twid_im = 0.0;
 8003efc:	f04f 0200 	mov.w	r2, #0
 8003f00:	f04f 0300 	mov.w	r3, #0
 8003f04:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
      temp_im /= 200.0;
 8003f08:	f04f 0200 	mov.w	r2, #0
 8003f0c:	4b2d      	ldr	r3, [pc, #180]	; (8003fc4 <maxEnvHilbert+0x1224>)
 8003f0e:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8003f12:	f7fc fc9b 	bl	800084c <__aeabi_ddiv>
 8003f16:	4602      	mov	r2, r0
 8003f18:	460b      	mov	r3, r1
 8003f1a:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58
 8003f1e:	e015      	b.n	8003f4c <maxEnvHilbert+0x11ac>
    } else {
      twid_im = re_tmp / 200.0;
 8003f20:	f04f 0200 	mov.w	r2, #0
 8003f24:	4b27      	ldr	r3, [pc, #156]	; (8003fc4 <maxEnvHilbert+0x1224>)
 8003f26:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8003f2a:	f7fc fc8f 	bl	800084c <__aeabi_ddiv>
 8003f2e:	4602      	mov	r2, r0
 8003f30:	460b      	mov	r3, r1
 8003f32:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
      temp_im /= 200.0;
 8003f36:	f04f 0200 	mov.w	r2, #0
 8003f3a:	4b22      	ldr	r3, [pc, #136]	; (8003fc4 <maxEnvHilbert+0x1224>)
 8003f3c:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8003f40:	f7fc fc84 	bl	800084c <__aeabi_ddiv>
 8003f44:	4602      	mov	r2, r0
 8003f46:	460b      	mov	r3, r1
 8003f48:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58
    }
    twid_im = rt_hypotd_snf(twid_im, temp_im);
 8003f4c:	ed97 1b16 	vldr	d1, [r7, #88]	; 0x58
 8003f50:	ed97 0b14 	vldr	d0, [r7, #80]	; 0x50
 8003f54:	f7fe fe78 	bl	8002c48 <rt_hypotd_snf>
 8003f58:	ed87 0b14 	vstr	d0, [r7, #80]	; 0x50
#ifdef FFTDEBUG
    memset(SndBuffer, 0, sizeof(SndBuffer));
    sprintf(SndBuffer, "twid_im: %f, m: %f, mx: %f, \n\r", twid_im, m, mx);
	HAL_UART_Transmit(&huart1, (uint8_t *) SndBuffer, sizeof(SndBuffer), 1000);
#endif
    if (twid_im > m) {
 8003f5c:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8003f60:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8003f64:	f7fc fdd8 	bl	8000b18 <__aeabi_dcmpgt>
 8003f68:	4603      	mov	r3, r0
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d00f      	beq.n	8003f8e <maxEnvHilbert+0x11ee>
      m = twid_im;
 8003f6e:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8003f72:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68
      mx = (double)i + 1.0;
 8003f76:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8003f78:	f7fc fad4 	bl	8000524 <__aeabi_i2d>
 8003f7c:	f04f 0200 	mov.w	r2, #0
 8003f80:	4b11      	ldr	r3, [pc, #68]	; (8003fc8 <maxEnvHilbert+0x1228>)
 8003f82:	f7fc f983 	bl	800028c <__adddf3>
 8003f86:	4602      	mov	r2, r0
 8003f88:	460b      	mov	r3, r1
 8003f8a:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
  for (i = 0; i < 200; i++) {
 8003f8e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003f90:	3301      	adds	r3, #1
 8003f92:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003f94:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003f96:	2bc7      	cmp	r3, #199	; 0xc7
 8003f98:	f77f af2e 	ble.w	8003df8 <maxEnvHilbert+0x1058>
#ifdef FFTDEBUG
    memset(SndBuffer, 0, sizeof(SndBuffer));
    sprintf(SndBuffer, "mx: %f, \n\r", mx);
	HAL_UART_Transmit(&huart1, (uint8_t *) SndBuffer, sizeof(SndBuffer), 1000);
#endif
	maxLev = m;
 8003f9c:	490b      	ldr	r1, [pc, #44]	; (8003fcc <maxEnvHilbert+0x122c>)
 8003f9e:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8003fa2:	e9c1 2300 	strd	r2, r3, [r1]
	//maxIdxAmp = mx;
  return mx;
 8003fa6:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8003faa:	ec43 2b17 	vmov	d7, r2, r3
}
 8003fae:	eeb0 0a47 	vmov.f32	s0, s14
 8003fb2:	eef0 0a67 	vmov.f32	s1, s15
 8003fb6:	3770      	adds	r7, #112	; 0x70
 8003fb8:	46bd      	mov	sp, r7
 8003fba:	bdb0      	pop	{r4, r5, r7, pc}
 8003fbc:	08010af0 	.word	0x08010af0
 8003fc0:	20000278 	.word	0x20000278
 8003fc4:	40690000 	.word	0x40690000
 8003fc8:	3ff00000 	.word	0x3ff00000
 8003fcc:	20008b48 	.word	0x20008b48

08003fd0 <rtIsNaN>:
 * Function: rtIsNaN ==================================================
 *  Abstract:
 *  Test if value is not a number
 */
boolean_T rtIsNaN(real_T value)
{
 8003fd0:	b580      	push	{r7, lr}
 8003fd2:	b082      	sub	sp, #8
 8003fd4:	af00      	add	r7, sp, #0
 8003fd6:	ed87 0b00 	vstr	d0, [r7]
  return (isnan(value) != 0U);
 8003fda:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003fde:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003fe2:	f7fc fda3 	bl	8000b2c <__aeabi_dcmpun>
 8003fe6:	4603      	mov	r3, r0
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d001      	beq.n	8003ff0 <rtIsNaN+0x20>
 8003fec:	2301      	movs	r3, #1
 8003fee:	e000      	b.n	8003ff2 <rtIsNaN+0x22>
 8003ff0:	2300      	movs	r3, #0
}
 8003ff2:	4618      	mov	r0, r3
 8003ff4:	3708      	adds	r7, #8
 8003ff6:	46bd      	mov	sp, r7
 8003ff8:	bd80      	pop	{r7, pc}
	...

08003ffc <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003ffc:	b480      	push	{r7}
 8003ffe:	b083      	sub	sp, #12
 8004000:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004002:	4b0f      	ldr	r3, [pc, #60]	; (8004040 <HAL_MspInit+0x44>)
 8004004:	699b      	ldr	r3, [r3, #24]
 8004006:	4a0e      	ldr	r2, [pc, #56]	; (8004040 <HAL_MspInit+0x44>)
 8004008:	f043 0301 	orr.w	r3, r3, #1
 800400c:	6193      	str	r3, [r2, #24]
 800400e:	4b0c      	ldr	r3, [pc, #48]	; (8004040 <HAL_MspInit+0x44>)
 8004010:	699b      	ldr	r3, [r3, #24]
 8004012:	f003 0301 	and.w	r3, r3, #1
 8004016:	607b      	str	r3, [r7, #4]
 8004018:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800401a:	4b09      	ldr	r3, [pc, #36]	; (8004040 <HAL_MspInit+0x44>)
 800401c:	69db      	ldr	r3, [r3, #28]
 800401e:	4a08      	ldr	r2, [pc, #32]	; (8004040 <HAL_MspInit+0x44>)
 8004020:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004024:	61d3      	str	r3, [r2, #28]
 8004026:	4b06      	ldr	r3, [pc, #24]	; (8004040 <HAL_MspInit+0x44>)
 8004028:	69db      	ldr	r3, [r3, #28]
 800402a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800402e:	603b      	str	r3, [r7, #0]
 8004030:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004032:	bf00      	nop
 8004034:	370c      	adds	r7, #12
 8004036:	46bd      	mov	sp, r7
 8004038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800403c:	4770      	bx	lr
 800403e:	bf00      	nop
 8004040:	40021000 	.word	0x40021000

08004044 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8004044:	b580      	push	{r7, lr}
 8004046:	b08a      	sub	sp, #40	; 0x28
 8004048:	af00      	add	r7, sp, #0
 800404a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800404c:	f107 0314 	add.w	r3, r7, #20
 8004050:	2200      	movs	r2, #0
 8004052:	601a      	str	r2, [r3, #0]
 8004054:	605a      	str	r2, [r3, #4]
 8004056:	609a      	str	r2, [r3, #8]
 8004058:	60da      	str	r2, [r3, #12]
 800405a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004064:	d14d      	bne.n	8004102 <HAL_ADC_MspInit+0xbe>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8004066:	4b29      	ldr	r3, [pc, #164]	; (800410c <HAL_ADC_MspInit+0xc8>)
 8004068:	695b      	ldr	r3, [r3, #20]
 800406a:	4a28      	ldr	r2, [pc, #160]	; (800410c <HAL_ADC_MspInit+0xc8>)
 800406c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004070:	6153      	str	r3, [r2, #20]
 8004072:	4b26      	ldr	r3, [pc, #152]	; (800410c <HAL_ADC_MspInit+0xc8>)
 8004074:	695b      	ldr	r3, [r3, #20]
 8004076:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800407a:	613b      	str	r3, [r7, #16]
 800407c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800407e:	4b23      	ldr	r3, [pc, #140]	; (800410c <HAL_ADC_MspInit+0xc8>)
 8004080:	695b      	ldr	r3, [r3, #20]
 8004082:	4a22      	ldr	r2, [pc, #136]	; (800410c <HAL_ADC_MspInit+0xc8>)
 8004084:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004088:	6153      	str	r3, [r2, #20]
 800408a:	4b20      	ldr	r3, [pc, #128]	; (800410c <HAL_ADC_MspInit+0xc8>)
 800408c:	695b      	ldr	r3, [r3, #20]
 800408e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004092:	60fb      	str	r3, [r7, #12]
 8004094:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = AnIn1_Pin;
 8004096:	2301      	movs	r3, #1
 8004098:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800409a:	2303      	movs	r3, #3
 800409c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800409e:	2300      	movs	r3, #0
 80040a0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(AnIn1_GPIO_Port, &GPIO_InitStruct);
 80040a2:	f107 0314 	add.w	r3, r7, #20
 80040a6:	4619      	mov	r1, r3
 80040a8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80040ac:	f002 fa6a 	bl	8006584 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 80040b0:	4b17      	ldr	r3, [pc, #92]	; (8004110 <HAL_ADC_MspInit+0xcc>)
 80040b2:	4a18      	ldr	r2, [pc, #96]	; (8004114 <HAL_ADC_MspInit+0xd0>)
 80040b4:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80040b6:	4b16      	ldr	r3, [pc, #88]	; (8004110 <HAL_ADC_MspInit+0xcc>)
 80040b8:	2200      	movs	r2, #0
 80040ba:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80040bc:	4b14      	ldr	r3, [pc, #80]	; (8004110 <HAL_ADC_MspInit+0xcc>)
 80040be:	2200      	movs	r2, #0
 80040c0:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80040c2:	4b13      	ldr	r3, [pc, #76]	; (8004110 <HAL_ADC_MspInit+0xcc>)
 80040c4:	2280      	movs	r2, #128	; 0x80
 80040c6:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80040c8:	4b11      	ldr	r3, [pc, #68]	; (8004110 <HAL_ADC_MspInit+0xcc>)
 80040ca:	f44f 7280 	mov.w	r2, #256	; 0x100
 80040ce:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80040d0:	4b0f      	ldr	r3, [pc, #60]	; (8004110 <HAL_ADC_MspInit+0xcc>)
 80040d2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80040d6:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 80040d8:	4b0d      	ldr	r3, [pc, #52]	; (8004110 <HAL_ADC_MspInit+0xcc>)
 80040da:	2200      	movs	r2, #0
 80040dc:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_HIGH;
 80040de:	4b0c      	ldr	r3, [pc, #48]	; (8004110 <HAL_ADC_MspInit+0xcc>)
 80040e0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80040e4:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80040e6:	480a      	ldr	r0, [pc, #40]	; (8004110 <HAL_ADC_MspInit+0xcc>)
 80040e8:	f002 f85f 	bl	80061aa <HAL_DMA_Init>
 80040ec:	4603      	mov	r3, r0
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d001      	beq.n	80040f6 <HAL_ADC_MspInit+0xb2>
    {
      Error_Handler();
 80040f2:	f7fe fd97 	bl	8002c24 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	4a05      	ldr	r2, [pc, #20]	; (8004110 <HAL_ADC_MspInit+0xcc>)
 80040fa:	639a      	str	r2, [r3, #56]	; 0x38
 80040fc:	4a04      	ldr	r2, [pc, #16]	; (8004110 <HAL_ADC_MspInit+0xcc>)
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8004102:	bf00      	nop
 8004104:	3728      	adds	r7, #40	; 0x28
 8004106:	46bd      	mov	sp, r7
 8004108:	bd80      	pop	{r7, pc}
 800410a:	bf00      	nop
 800410c:	40021000 	.word	0x40021000
 8004110:	20006848 	.word	0x20006848
 8004114:	40020008 	.word	0x40020008

08004118 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8004118:	b580      	push	{r7, lr}
 800411a:	b08a      	sub	sp, #40	; 0x28
 800411c:	af00      	add	r7, sp, #0
 800411e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004120:	f107 0314 	add.w	r3, r7, #20
 8004124:	2200      	movs	r2, #0
 8004126:	601a      	str	r2, [r3, #0]
 8004128:	605a      	str	r2, [r3, #4]
 800412a:	609a      	str	r2, [r3, #8]
 800412c:	60da      	str	r2, [r3, #12]
 800412e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	4a17      	ldr	r2, [pc, #92]	; (8004194 <HAL_I2C_MspInit+0x7c>)
 8004136:	4293      	cmp	r3, r2
 8004138:	d128      	bne.n	800418c <HAL_I2C_MspInit+0x74>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800413a:	4b17      	ldr	r3, [pc, #92]	; (8004198 <HAL_I2C_MspInit+0x80>)
 800413c:	695b      	ldr	r3, [r3, #20]
 800413e:	4a16      	ldr	r2, [pc, #88]	; (8004198 <HAL_I2C_MspInit+0x80>)
 8004140:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004144:	6153      	str	r3, [r2, #20]
 8004146:	4b14      	ldr	r3, [pc, #80]	; (8004198 <HAL_I2C_MspInit+0x80>)
 8004148:	695b      	ldr	r3, [r3, #20]
 800414a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800414e:	613b      	str	r3, [r7, #16]
 8004150:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8004152:	f44f 7340 	mov.w	r3, #768	; 0x300
 8004156:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004158:	2312      	movs	r3, #18
 800415a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800415c:	2301      	movs	r3, #1
 800415e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004160:	2303      	movs	r3, #3
 8004162:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8004164:	2304      	movs	r3, #4
 8004166:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004168:	f107 0314 	add.w	r3, r7, #20
 800416c:	4619      	mov	r1, r3
 800416e:	480b      	ldr	r0, [pc, #44]	; (800419c <HAL_I2C_MspInit+0x84>)
 8004170:	f002 fa08 	bl	8006584 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8004174:	4b08      	ldr	r3, [pc, #32]	; (8004198 <HAL_I2C_MspInit+0x80>)
 8004176:	69db      	ldr	r3, [r3, #28]
 8004178:	4a07      	ldr	r2, [pc, #28]	; (8004198 <HAL_I2C_MspInit+0x80>)
 800417a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800417e:	61d3      	str	r3, [r2, #28]
 8004180:	4b05      	ldr	r3, [pc, #20]	; (8004198 <HAL_I2C_MspInit+0x80>)
 8004182:	69db      	ldr	r3, [r3, #28]
 8004184:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004188:	60fb      	str	r3, [r7, #12]
 800418a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800418c:	bf00      	nop
 800418e:	3728      	adds	r7, #40	; 0x28
 8004190:	46bd      	mov	sp, r7
 8004192:	bd80      	pop	{r7, pc}
 8004194:	40005400 	.word	0x40005400
 8004198:	40021000 	.word	0x40021000
 800419c:	48000400 	.word	0x48000400

080041a0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80041a0:	b580      	push	{r7, lr}
 80041a2:	b08a      	sub	sp, #40	; 0x28
 80041a4:	af00      	add	r7, sp, #0
 80041a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80041a8:	f107 0314 	add.w	r3, r7, #20
 80041ac:	2200      	movs	r2, #0
 80041ae:	601a      	str	r2, [r3, #0]
 80041b0:	605a      	str	r2, [r3, #4]
 80041b2:	609a      	str	r2, [r3, #8]
 80041b4:	60da      	str	r2, [r3, #12]
 80041b6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	4a17      	ldr	r2, [pc, #92]	; (800421c <HAL_SPI_MspInit+0x7c>)
 80041be:	4293      	cmp	r3, r2
 80041c0:	d128      	bne.n	8004214 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80041c2:	4b17      	ldr	r3, [pc, #92]	; (8004220 <HAL_SPI_MspInit+0x80>)
 80041c4:	69db      	ldr	r3, [r3, #28]
 80041c6:	4a16      	ldr	r2, [pc, #88]	; (8004220 <HAL_SPI_MspInit+0x80>)
 80041c8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80041cc:	61d3      	str	r3, [r2, #28]
 80041ce:	4b14      	ldr	r3, [pc, #80]	; (8004220 <HAL_SPI_MspInit+0x80>)
 80041d0:	69db      	ldr	r3, [r3, #28]
 80041d2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80041d6:	613b      	str	r3, [r7, #16]
 80041d8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80041da:	4b11      	ldr	r3, [pc, #68]	; (8004220 <HAL_SPI_MspInit+0x80>)
 80041dc:	695b      	ldr	r3, [r3, #20]
 80041de:	4a10      	ldr	r2, [pc, #64]	; (8004220 <HAL_SPI_MspInit+0x80>)
 80041e0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80041e4:	6153      	str	r3, [r2, #20]
 80041e6:	4b0e      	ldr	r3, [pc, #56]	; (8004220 <HAL_SPI_MspInit+0x80>)
 80041e8:	695b      	ldr	r3, [r3, #20]
 80041ea:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80041ee:	60fb      	str	r3, [r7, #12]
 80041f0:	68fb      	ldr	r3, [r7, #12]
    PB12     ------> SPI2_NSS
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 80041f2:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 80041f6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80041f8:	2302      	movs	r3, #2
 80041fa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80041fc:	2300      	movs	r3, #0
 80041fe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004200:	2303      	movs	r3, #3
 8004202:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8004204:	2305      	movs	r3, #5
 8004206:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004208:	f107 0314 	add.w	r3, r7, #20
 800420c:	4619      	mov	r1, r3
 800420e:	4805      	ldr	r0, [pc, #20]	; (8004224 <HAL_SPI_MspInit+0x84>)
 8004210:	f002 f9b8 	bl	8006584 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8004214:	bf00      	nop
 8004216:	3728      	adds	r7, #40	; 0x28
 8004218:	46bd      	mov	sp, r7
 800421a:	bd80      	pop	{r7, pc}
 800421c:	40003800 	.word	0x40003800
 8004220:	40021000 	.word	0x40021000
 8004224:	48000400 	.word	0x48000400

08004228 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8004228:	b580      	push	{r7, lr}
 800422a:	b08c      	sub	sp, #48	; 0x30
 800422c:	af00      	add	r7, sp, #0
 800422e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004230:	f107 031c 	add.w	r3, r7, #28
 8004234:	2200      	movs	r2, #0
 8004236:	601a      	str	r2, [r3, #0]
 8004238:	605a      	str	r2, [r3, #4]
 800423a:	609a      	str	r2, [r3, #8]
 800423c:	60da      	str	r2, [r3, #12]
 800423e:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	4a3f      	ldr	r2, [pc, #252]	; (8004344 <HAL_TIM_Base_MspInit+0x11c>)
 8004246:	4293      	cmp	r3, r2
 8004248:	d10c      	bne.n	8004264 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800424a:	4b3f      	ldr	r3, [pc, #252]	; (8004348 <HAL_TIM_Base_MspInit+0x120>)
 800424c:	699b      	ldr	r3, [r3, #24]
 800424e:	4a3e      	ldr	r2, [pc, #248]	; (8004348 <HAL_TIM_Base_MspInit+0x120>)
 8004250:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8004254:	6193      	str	r3, [r2, #24]
 8004256:	4b3c      	ldr	r3, [pc, #240]	; (8004348 <HAL_TIM_Base_MspInit+0x120>)
 8004258:	699b      	ldr	r3, [r3, #24]
 800425a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800425e:	61bb      	str	r3, [r7, #24]
 8004260:	69bb      	ldr	r3, [r7, #24]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8004262:	e06a      	b.n	800433a <HAL_TIM_Base_MspInit+0x112>
  else if(htim_base->Instance==TIM2)
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800426c:	d132      	bne.n	80042d4 <HAL_TIM_Base_MspInit+0xac>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800426e:	4b36      	ldr	r3, [pc, #216]	; (8004348 <HAL_TIM_Base_MspInit+0x120>)
 8004270:	69db      	ldr	r3, [r3, #28]
 8004272:	4a35      	ldr	r2, [pc, #212]	; (8004348 <HAL_TIM_Base_MspInit+0x120>)
 8004274:	f043 0301 	orr.w	r3, r3, #1
 8004278:	61d3      	str	r3, [r2, #28]
 800427a:	4b33      	ldr	r3, [pc, #204]	; (8004348 <HAL_TIM_Base_MspInit+0x120>)
 800427c:	69db      	ldr	r3, [r3, #28]
 800427e:	f003 0301 	and.w	r3, r3, #1
 8004282:	617b      	str	r3, [r7, #20]
 8004284:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004286:	4b30      	ldr	r3, [pc, #192]	; (8004348 <HAL_TIM_Base_MspInit+0x120>)
 8004288:	695b      	ldr	r3, [r3, #20]
 800428a:	4a2f      	ldr	r2, [pc, #188]	; (8004348 <HAL_TIM_Base_MspInit+0x120>)
 800428c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004290:	6153      	str	r3, [r2, #20]
 8004292:	4b2d      	ldr	r3, [pc, #180]	; (8004348 <HAL_TIM_Base_MspInit+0x120>)
 8004294:	695b      	ldr	r3, [r3, #20]
 8004296:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800429a:	613b      	str	r3, [r7, #16]
 800429c:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = Zero_Pin;
 800429e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80042a2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80042a4:	2302      	movs	r3, #2
 80042a6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80042a8:	2300      	movs	r3, #0
 80042aa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80042ac:	2300      	movs	r3, #0
 80042ae:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80042b0:	2301      	movs	r3, #1
 80042b2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(Zero_GPIO_Port, &GPIO_InitStruct);
 80042b4:	f107 031c 	add.w	r3, r7, #28
 80042b8:	4619      	mov	r1, r3
 80042ba:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80042be:	f002 f961 	bl	8006584 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80042c2:	2200      	movs	r2, #0
 80042c4:	2100      	movs	r1, #0
 80042c6:	201c      	movs	r0, #28
 80042c8:	f001 ff35 	bl	8006136 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80042cc:	201c      	movs	r0, #28
 80042ce:	f001 ff4e 	bl	800616e <HAL_NVIC_EnableIRQ>
}
 80042d2:	e032      	b.n	800433a <HAL_TIM_Base_MspInit+0x112>
  else if(htim_base->Instance==TIM3)
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	4a1c      	ldr	r2, [pc, #112]	; (800434c <HAL_TIM_Base_MspInit+0x124>)
 80042da:	4293      	cmp	r3, r2
 80042dc:	d114      	bne.n	8004308 <HAL_TIM_Base_MspInit+0xe0>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80042de:	4b1a      	ldr	r3, [pc, #104]	; (8004348 <HAL_TIM_Base_MspInit+0x120>)
 80042e0:	69db      	ldr	r3, [r3, #28]
 80042e2:	4a19      	ldr	r2, [pc, #100]	; (8004348 <HAL_TIM_Base_MspInit+0x120>)
 80042e4:	f043 0302 	orr.w	r3, r3, #2
 80042e8:	61d3      	str	r3, [r2, #28]
 80042ea:	4b17      	ldr	r3, [pc, #92]	; (8004348 <HAL_TIM_Base_MspInit+0x120>)
 80042ec:	69db      	ldr	r3, [r3, #28]
 80042ee:	f003 0302 	and.w	r3, r3, #2
 80042f2:	60fb      	str	r3, [r7, #12]
 80042f4:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80042f6:	2200      	movs	r2, #0
 80042f8:	2100      	movs	r1, #0
 80042fa:	201d      	movs	r0, #29
 80042fc:	f001 ff1b 	bl	8006136 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8004300:	201d      	movs	r0, #29
 8004302:	f001 ff34 	bl	800616e <HAL_NVIC_EnableIRQ>
}
 8004306:	e018      	b.n	800433a <HAL_TIM_Base_MspInit+0x112>
  else if(htim_base->Instance==TIM4)
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	4a10      	ldr	r2, [pc, #64]	; (8004350 <HAL_TIM_Base_MspInit+0x128>)
 800430e:	4293      	cmp	r3, r2
 8004310:	d113      	bne.n	800433a <HAL_TIM_Base_MspInit+0x112>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8004312:	4b0d      	ldr	r3, [pc, #52]	; (8004348 <HAL_TIM_Base_MspInit+0x120>)
 8004314:	69db      	ldr	r3, [r3, #28]
 8004316:	4a0c      	ldr	r2, [pc, #48]	; (8004348 <HAL_TIM_Base_MspInit+0x120>)
 8004318:	f043 0304 	orr.w	r3, r3, #4
 800431c:	61d3      	str	r3, [r2, #28]
 800431e:	4b0a      	ldr	r3, [pc, #40]	; (8004348 <HAL_TIM_Base_MspInit+0x120>)
 8004320:	69db      	ldr	r3, [r3, #28]
 8004322:	f003 0304 	and.w	r3, r3, #4
 8004326:	60bb      	str	r3, [r7, #8]
 8004328:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 800432a:	2200      	movs	r2, #0
 800432c:	2100      	movs	r1, #0
 800432e:	201e      	movs	r0, #30
 8004330:	f001 ff01 	bl	8006136 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8004334:	201e      	movs	r0, #30
 8004336:	f001 ff1a 	bl	800616e <HAL_NVIC_EnableIRQ>
}
 800433a:	bf00      	nop
 800433c:	3730      	adds	r7, #48	; 0x30
 800433e:	46bd      	mov	sp, r7
 8004340:	bd80      	pop	{r7, pc}
 8004342:	bf00      	nop
 8004344:	40012c00 	.word	0x40012c00
 8004348:	40021000 	.word	0x40021000
 800434c:	40000400 	.word	0x40000400
 8004350:	40000800 	.word	0x40000800

08004354 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8004354:	b580      	push	{r7, lr}
 8004356:	b088      	sub	sp, #32
 8004358:	af00      	add	r7, sp, #0
 800435a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800435c:	f107 030c 	add.w	r3, r7, #12
 8004360:	2200      	movs	r2, #0
 8004362:	601a      	str	r2, [r3, #0]
 8004364:	605a      	str	r2, [r3, #4]
 8004366:	609a      	str	r2, [r3, #8]
 8004368:	60da      	str	r2, [r3, #12]
 800436a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	4a1b      	ldr	r2, [pc, #108]	; (80043e0 <HAL_TIM_MspPostInit+0x8c>)
 8004372:	4293      	cmp	r3, r2
 8004374:	d12f      	bne.n	80043d6 <HAL_TIM_MspPostInit+0x82>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004376:	4b1b      	ldr	r3, [pc, #108]	; (80043e4 <HAL_TIM_MspPostInit+0x90>)
 8004378:	695b      	ldr	r3, [r3, #20]
 800437a:	4a1a      	ldr	r2, [pc, #104]	; (80043e4 <HAL_TIM_MspPostInit+0x90>)
 800437c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004380:	6153      	str	r3, [r2, #20]
 8004382:	4b18      	ldr	r3, [pc, #96]	; (80043e4 <HAL_TIM_MspPostInit+0x90>)
 8004384:	695b      	ldr	r3, [r3, #20]
 8004386:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800438a:	60bb      	str	r3, [r7, #8]
 800438c:	68bb      	ldr	r3, [r7, #8]
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    PA11     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = Z1_Pin|Z2_Pin|Z3_Pin;
 800438e:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8004392:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004394:	2302      	movs	r3, #2
 8004396:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004398:	2300      	movs	r3, #0
 800439a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800439c:	2300      	movs	r3, #0
 800439e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 80043a0:	2306      	movs	r3, #6
 80043a2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80043a4:	f107 030c 	add.w	r3, r7, #12
 80043a8:	4619      	mov	r1, r3
 80043aa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80043ae:	f002 f8e9 	bl	8006584 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = Z4_Pin;
 80043b2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80043b6:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80043b8:	2302      	movs	r3, #2
 80043ba:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80043bc:	2300      	movs	r3, #0
 80043be:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80043c0:	2300      	movs	r3, #0
 80043c2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF11_TIM1;
 80043c4:	230b      	movs	r3, #11
 80043c6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(Z4_GPIO_Port, &GPIO_InitStruct);
 80043c8:	f107 030c 	add.w	r3, r7, #12
 80043cc:	4619      	mov	r1, r3
 80043ce:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80043d2:	f002 f8d7 	bl	8006584 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80043d6:	bf00      	nop
 80043d8:	3720      	adds	r7, #32
 80043da:	46bd      	mov	sp, r7
 80043dc:	bd80      	pop	{r7, pc}
 80043de:	bf00      	nop
 80043e0:	40012c00 	.word	0x40012c00
 80043e4:	40021000 	.word	0x40021000

080043e8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80043e8:	b580      	push	{r7, lr}
 80043ea:	b08c      	sub	sp, #48	; 0x30
 80043ec:	af00      	add	r7, sp, #0
 80043ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80043f0:	f107 031c 	add.w	r3, r7, #28
 80043f4:	2200      	movs	r2, #0
 80043f6:	601a      	str	r2, [r3, #0]
 80043f8:	605a      	str	r2, [r3, #4]
 80043fa:	609a      	str	r2, [r3, #8]
 80043fc:	60da      	str	r2, [r3, #12]
 80043fe:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	4a2e      	ldr	r2, [pc, #184]	; (80044c0 <HAL_UART_MspInit+0xd8>)
 8004406:	4293      	cmp	r3, r2
 8004408:	d128      	bne.n	800445c <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800440a:	4b2e      	ldr	r3, [pc, #184]	; (80044c4 <HAL_UART_MspInit+0xdc>)
 800440c:	699b      	ldr	r3, [r3, #24]
 800440e:	4a2d      	ldr	r2, [pc, #180]	; (80044c4 <HAL_UART_MspInit+0xdc>)
 8004410:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004414:	6193      	str	r3, [r2, #24]
 8004416:	4b2b      	ldr	r3, [pc, #172]	; (80044c4 <HAL_UART_MspInit+0xdc>)
 8004418:	699b      	ldr	r3, [r3, #24]
 800441a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800441e:	61bb      	str	r3, [r7, #24]
 8004420:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004422:	4b28      	ldr	r3, [pc, #160]	; (80044c4 <HAL_UART_MspInit+0xdc>)
 8004424:	695b      	ldr	r3, [r3, #20]
 8004426:	4a27      	ldr	r2, [pc, #156]	; (80044c4 <HAL_UART_MspInit+0xdc>)
 8004428:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800442c:	6153      	str	r3, [r2, #20]
 800442e:	4b25      	ldr	r3, [pc, #148]	; (80044c4 <HAL_UART_MspInit+0xdc>)
 8004430:	695b      	ldr	r3, [r3, #20]
 8004432:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004436:	617b      	str	r3, [r7, #20]
 8004438:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800443a:	23c0      	movs	r3, #192	; 0xc0
 800443c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800443e:	2302      	movs	r3, #2
 8004440:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004442:	2300      	movs	r3, #0
 8004444:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004446:	2303      	movs	r3, #3
 8004448:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800444a:	2307      	movs	r3, #7
 800444c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800444e:	f107 031c 	add.w	r3, r7, #28
 8004452:	4619      	mov	r1, r3
 8004454:	481c      	ldr	r0, [pc, #112]	; (80044c8 <HAL_UART_MspInit+0xe0>)
 8004456:	f002 f895 	bl	8006584 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800445a:	e02c      	b.n	80044b6 <HAL_UART_MspInit+0xce>
  else if(huart->Instance==USART2)
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	4a1a      	ldr	r2, [pc, #104]	; (80044cc <HAL_UART_MspInit+0xe4>)
 8004462:	4293      	cmp	r3, r2
 8004464:	d127      	bne.n	80044b6 <HAL_UART_MspInit+0xce>
    __HAL_RCC_USART2_CLK_ENABLE();
 8004466:	4b17      	ldr	r3, [pc, #92]	; (80044c4 <HAL_UART_MspInit+0xdc>)
 8004468:	69db      	ldr	r3, [r3, #28]
 800446a:	4a16      	ldr	r2, [pc, #88]	; (80044c4 <HAL_UART_MspInit+0xdc>)
 800446c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004470:	61d3      	str	r3, [r2, #28]
 8004472:	4b14      	ldr	r3, [pc, #80]	; (80044c4 <HAL_UART_MspInit+0xdc>)
 8004474:	69db      	ldr	r3, [r3, #28]
 8004476:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800447a:	613b      	str	r3, [r7, #16]
 800447c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800447e:	4b11      	ldr	r3, [pc, #68]	; (80044c4 <HAL_UART_MspInit+0xdc>)
 8004480:	695b      	ldr	r3, [r3, #20]
 8004482:	4a10      	ldr	r2, [pc, #64]	; (80044c4 <HAL_UART_MspInit+0xdc>)
 8004484:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004488:	6153      	str	r3, [r2, #20]
 800448a:	4b0e      	ldr	r3, [pc, #56]	; (80044c4 <HAL_UART_MspInit+0xdc>)
 800448c:	695b      	ldr	r3, [r3, #20]
 800448e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004492:	60fb      	str	r3, [r7, #12]
 8004494:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 8004496:	2318      	movs	r3, #24
 8004498:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800449a:	2302      	movs	r3, #2
 800449c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800449e:	2300      	movs	r3, #0
 80044a0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80044a2:	2303      	movs	r3, #3
 80044a4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80044a6:	2307      	movs	r3, #7
 80044a8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80044aa:	f107 031c 	add.w	r3, r7, #28
 80044ae:	4619      	mov	r1, r3
 80044b0:	4805      	ldr	r0, [pc, #20]	; (80044c8 <HAL_UART_MspInit+0xe0>)
 80044b2:	f002 f867 	bl	8006584 <HAL_GPIO_Init>
}
 80044b6:	bf00      	nop
 80044b8:	3730      	adds	r7, #48	; 0x30
 80044ba:	46bd      	mov	sp, r7
 80044bc:	bd80      	pop	{r7, pc}
 80044be:	bf00      	nop
 80044c0:	40013800 	.word	0x40013800
 80044c4:	40021000 	.word	0x40021000
 80044c8:	48000400 	.word	0x48000400
 80044cc:	40004400 	.word	0x40004400

080044d0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80044d0:	b580      	push	{r7, lr}
 80044d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */
	HAL_UART_Transmit(&huart1, (uint8_t *) "NMI\n\r", sizeof("NMI\n\r"), 1000);
 80044d4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80044d8:	2206      	movs	r2, #6
 80044da:	4902      	ldr	r1, [pc, #8]	; (80044e4 <NMI_Handler+0x14>)
 80044dc:	4802      	ldr	r0, [pc, #8]	; (80044e8 <NMI_Handler+0x18>)
 80044de:	f006 fbe7 	bl	800acb0 <HAL_UART_Transmit>
  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80044e2:	e7fe      	b.n	80044e2 <NMI_Handler+0x12>
 80044e4:	0800e950 	.word	0x0800e950
 80044e8:	20006a74 	.word	0x20006a74

080044ec <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80044ec:	b580      	push	{r7, lr}
 80044ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */
	HAL_UART_Transmit(&huart1, (uint8_t *) "HardFault\n\r", sizeof("HardFault\n\r"), 1000);
 80044f0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80044f4:	220c      	movs	r2, #12
 80044f6:	4902      	ldr	r1, [pc, #8]	; (8004500 <HardFault_Handler+0x14>)
 80044f8:	4802      	ldr	r0, [pc, #8]	; (8004504 <HardFault_Handler+0x18>)
 80044fa:	f006 fbd9 	bl	800acb0 <HAL_UART_Transmit>
  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80044fe:	e7fe      	b.n	80044fe <HardFault_Handler+0x12>
 8004500:	0800e958 	.word	0x0800e958
 8004504:	20006a74 	.word	0x20006a74

08004508 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004508:	b580      	push	{r7, lr}
 800450a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */
	HAL_UART_Transmit(&huart1, (uint8_t *) "MemManage\n\r", sizeof("MemManage\n\r"), 1000);
 800450c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004510:	220c      	movs	r2, #12
 8004512:	4902      	ldr	r1, [pc, #8]	; (800451c <MemManage_Handler+0x14>)
 8004514:	4802      	ldr	r0, [pc, #8]	; (8004520 <MemManage_Handler+0x18>)
 8004516:	f006 fbcb 	bl	800acb0 <HAL_UART_Transmit>
  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800451a:	e7fe      	b.n	800451a <MemManage_Handler+0x12>
 800451c:	0800e964 	.word	0x0800e964
 8004520:	20006a74 	.word	0x20006a74

08004524 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004524:	b580      	push	{r7, lr}
 8004526:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */
	HAL_UART_Transmit(&huart1, (uint8_t *) "BusFault\n\r", sizeof("BusFault\n\r"), 1000);
 8004528:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800452c:	220b      	movs	r2, #11
 800452e:	4902      	ldr	r1, [pc, #8]	; (8004538 <BusFault_Handler+0x14>)
 8004530:	4802      	ldr	r0, [pc, #8]	; (800453c <BusFault_Handler+0x18>)
 8004532:	f006 fbbd 	bl	800acb0 <HAL_UART_Transmit>
  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004536:	e7fe      	b.n	8004536 <BusFault_Handler+0x12>
 8004538:	0800e970 	.word	0x0800e970
 800453c:	20006a74 	.word	0x20006a74

08004540 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004540:	b580      	push	{r7, lr}
 8004542:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */
	HAL_UART_Transmit(&huart1, (uint8_t *) "UsageFault\n\r", sizeof("UsageFault\n\r"), 1000);
 8004544:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004548:	220d      	movs	r2, #13
 800454a:	4902      	ldr	r1, [pc, #8]	; (8004554 <UsageFault_Handler+0x14>)
 800454c:	4802      	ldr	r0, [pc, #8]	; (8004558 <UsageFault_Handler+0x18>)
 800454e:	f006 fbaf 	bl	800acb0 <HAL_UART_Transmit>
  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004552:	e7fe      	b.n	8004552 <UsageFault_Handler+0x12>
 8004554:	0800e97c 	.word	0x0800e97c
 8004558:	20006a74 	.word	0x20006a74

0800455c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800455c:	b480      	push	{r7}
 800455e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004560:	bf00      	nop
 8004562:	46bd      	mov	sp, r7
 8004564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004568:	4770      	bx	lr

0800456a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800456a:	b480      	push	{r7}
 800456c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800456e:	bf00      	nop
 8004570:	46bd      	mov	sp, r7
 8004572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004576:	4770      	bx	lr

08004578 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004578:	b480      	push	{r7}
 800457a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800457c:	bf00      	nop
 800457e:	46bd      	mov	sp, r7
 8004580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004584:	4770      	bx	lr

08004586 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004586:	b580      	push	{r7, lr}
 8004588:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800458a:	f000 faed 	bl	8004b68 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800458e:	bf00      	nop
 8004590:	bd80      	pop	{r7, pc}
	...

08004594 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8004594:	b5b0      	push	{r4, r5, r7, lr}
 8004596:	b082      	sub	sp, #8
 8004598:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */
	if ( (haftConf--) == 0) { // Половина преобразования
 800459a:	4b91      	ldr	r3, [pc, #580]	; (80047e0 <DMA1_Channel1_IRQHandler+0x24c>)
 800459c:	881b      	ldrh	r3, [r3, #0]
 800459e:	1e5a      	subs	r2, r3, #1
 80045a0:	b291      	uxth	r1, r2
 80045a2:	4a8f      	ldr	r2, [pc, #572]	; (80047e0 <DMA1_Channel1_IRQHandler+0x24c>)
 80045a4:	8011      	strh	r1, [r2, #0]
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	f040 8113 	bne.w	80047d2 <DMA1_Channel1_IRQHandler+0x23e>
			//LED_PULSE
		HAL_ADC_Stop_DMA(&hadc1);
 80045ac:	488d      	ldr	r0, [pc, #564]	; (80047e4 <DMA1_Channel1_IRQHandler+0x250>)
 80045ae:	f000 fe39 	bl	8005224 <HAL_ADC_Stop_DMA>
		if (ajustCount++ > AJUST_DELAY) {
 80045b2:	4b8d      	ldr	r3, [pc, #564]	; (80047e8 <DMA1_Channel1_IRQHandler+0x254>)
 80045b4:	881b      	ldrh	r3, [r3, #0]
 80045b6:	1c5a      	adds	r2, r3, #1
 80045b8:	b291      	uxth	r1, r2
 80045ba:	4a8b      	ldr	r2, [pc, #556]	; (80047e8 <DMA1_Channel1_IRQHandler+0x254>)
 80045bc:	8011      	strh	r1, [r2, #0]
 80045be:	2b01      	cmp	r3, #1
 80045c0:	f240 8107 	bls.w	80047d2 <DMA1_Channel1_IRQHandler+0x23e>
			/* Автоматическая регулировка уровня сигнала */
			ajustCount = 0;
 80045c4:	4b88      	ldr	r3, [pc, #544]	; (80047e8 <DMA1_Channel1_IRQHandler+0x254>)
 80045c6:	2200      	movs	r2, #0
 80045c8:	801a      	strh	r2, [r3, #0]
			maxLevel = 0, minLevel = 4096, avgLevel = 0;;
 80045ca:	4b88      	ldr	r3, [pc, #544]	; (80047ec <DMA1_Channel1_IRQHandler+0x258>)
 80045cc:	2200      	movs	r2, #0
 80045ce:	801a      	strh	r2, [r3, #0]
 80045d0:	4b87      	ldr	r3, [pc, #540]	; (80047f0 <DMA1_Channel1_IRQHandler+0x25c>)
 80045d2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80045d6:	801a      	strh	r2, [r3, #0]
 80045d8:	4986      	ldr	r1, [pc, #536]	; (80047f4 <DMA1_Channel1_IRQHandler+0x260>)
 80045da:	f04f 0200 	mov.w	r2, #0
 80045de:	f04f 0300 	mov.w	r3, #0
 80045e2:	e9c1 2300 	strd	r2, r3, [r1]
			for (int ii = 0; ii < CONVERSION_COUNT; ii++) {
 80045e6:	2300      	movs	r3, #0
 80045e8:	607b      	str	r3, [r7, #4]
 80045ea:	e02f      	b.n	800464c <DMA1_Channel1_IRQHandler+0xb8>
				avgLevel = avgLevel + adcBuffer[ii];
 80045ec:	4a82      	ldr	r2, [pc, #520]	; (80047f8 <DMA1_Channel1_IRQHandler+0x264>)
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80045f4:	4618      	mov	r0, r3
 80045f6:	f7fb ff95 	bl	8000524 <__aeabi_i2d>
 80045fa:	4b7e      	ldr	r3, [pc, #504]	; (80047f4 <DMA1_Channel1_IRQHandler+0x260>)
 80045fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004600:	f7fb fe44 	bl	800028c <__adddf3>
 8004604:	4602      	mov	r2, r0
 8004606:	460b      	mov	r3, r1
 8004608:	497a      	ldr	r1, [pc, #488]	; (80047f4 <DMA1_Channel1_IRQHandler+0x260>)
 800460a:	e9c1 2300 	strd	r2, r3, [r1]
				if (maxLevel < adcBuffer[ii]) {
 800460e:	4a7a      	ldr	r2, [pc, #488]	; (80047f8 <DMA1_Channel1_IRQHandler+0x264>)
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8004616:	4b75      	ldr	r3, [pc, #468]	; (80047ec <DMA1_Channel1_IRQHandler+0x258>)
 8004618:	881b      	ldrh	r3, [r3, #0]
 800461a:	429a      	cmp	r2, r3
 800461c:	d905      	bls.n	800462a <DMA1_Channel1_IRQHandler+0x96>
					maxLevel = adcBuffer[ii];
 800461e:	4a76      	ldr	r2, [pc, #472]	; (80047f8 <DMA1_Channel1_IRQHandler+0x264>)
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8004626:	4b71      	ldr	r3, [pc, #452]	; (80047ec <DMA1_Channel1_IRQHandler+0x258>)
 8004628:	801a      	strh	r2, [r3, #0]
				}
				if (minLevel > adcBuffer[ii]) {
 800462a:	4a73      	ldr	r2, [pc, #460]	; (80047f8 <DMA1_Channel1_IRQHandler+0x264>)
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8004632:	4b6f      	ldr	r3, [pc, #444]	; (80047f0 <DMA1_Channel1_IRQHandler+0x25c>)
 8004634:	881b      	ldrh	r3, [r3, #0]
 8004636:	429a      	cmp	r2, r3
 8004638:	d205      	bcs.n	8004646 <DMA1_Channel1_IRQHandler+0xb2>
					minLevel = adcBuffer[ii];
 800463a:	4a6f      	ldr	r2, [pc, #444]	; (80047f8 <DMA1_Channel1_IRQHandler+0x264>)
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8004642:	4b6b      	ldr	r3, [pc, #428]	; (80047f0 <DMA1_Channel1_IRQHandler+0x25c>)
 8004644:	801a      	strh	r2, [r3, #0]
			for (int ii = 0; ii < CONVERSION_COUNT; ii++) {
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	3301      	adds	r3, #1
 800464a:	607b      	str	r3, [r7, #4]
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8004652:	dbcb      	blt.n	80045ec <DMA1_Channel1_IRQHandler+0x58>
				}
			}
			avgLevel = avgLevel / CONVERSION_COUNT;
 8004654:	4b67      	ldr	r3, [pc, #412]	; (80047f4 <DMA1_Channel1_IRQHandler+0x260>)
 8004656:	e9d3 0100 	ldrd	r0, r1, [r3]
 800465a:	f04f 0200 	mov.w	r2, #0
 800465e:	4b67      	ldr	r3, [pc, #412]	; (80047fc <DMA1_Channel1_IRQHandler+0x268>)
 8004660:	f7fc f8f4 	bl	800084c <__aeabi_ddiv>
 8004664:	4602      	mov	r2, r0
 8004666:	460b      	mov	r3, r1
 8004668:	4962      	ldr	r1, [pc, #392]	; (80047f4 <DMA1_Channel1_IRQHandler+0x260>)
 800466a:	e9c1 2300 	strd	r2, r3, [r1]
			if (abs(minLevel - avgLevel) > abs(maxLevel - avgLevel)) {
 800466e:	4b60      	ldr	r3, [pc, #384]	; (80047f0 <DMA1_Channel1_IRQHandler+0x25c>)
 8004670:	881b      	ldrh	r3, [r3, #0]
 8004672:	4618      	mov	r0, r3
 8004674:	f7fb ff56 	bl	8000524 <__aeabi_i2d>
 8004678:	4b5e      	ldr	r3, [pc, #376]	; (80047f4 <DMA1_Channel1_IRQHandler+0x260>)
 800467a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800467e:	f7fb fe03 	bl	8000288 <__aeabi_dsub>
 8004682:	4602      	mov	r2, r0
 8004684:	460b      	mov	r3, r1
 8004686:	4610      	mov	r0, r2
 8004688:	4619      	mov	r1, r3
 800468a:	f7fc fa65 	bl	8000b58 <__aeabi_d2iz>
 800468e:	4603      	mov	r3, r0
 8004690:	ea83 74e3 	eor.w	r4, r3, r3, asr #31
 8004694:	eba4 74e3 	sub.w	r4, r4, r3, asr #31
 8004698:	4b54      	ldr	r3, [pc, #336]	; (80047ec <DMA1_Channel1_IRQHandler+0x258>)
 800469a:	881b      	ldrh	r3, [r3, #0]
 800469c:	4618      	mov	r0, r3
 800469e:	f7fb ff41 	bl	8000524 <__aeabi_i2d>
 80046a2:	4b54      	ldr	r3, [pc, #336]	; (80047f4 <DMA1_Channel1_IRQHandler+0x260>)
 80046a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046a8:	f7fb fdee 	bl	8000288 <__aeabi_dsub>
 80046ac:	4602      	mov	r2, r0
 80046ae:	460b      	mov	r3, r1
 80046b0:	4610      	mov	r0, r2
 80046b2:	4619      	mov	r1, r3
 80046b4:	f7fc fa50 	bl	8000b58 <__aeabi_d2iz>
 80046b8:	4603      	mov	r3, r0
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	bfb8      	it	lt
 80046be:	425b      	neglt	r3, r3
 80046c0:	429c      	cmp	r4, r3
 80046c2:	dd17      	ble.n	80046f4 <DMA1_Channel1_IRQHandler+0x160>
				maxLevel = abs(minLevel - avgLevel);
 80046c4:	4b4a      	ldr	r3, [pc, #296]	; (80047f0 <DMA1_Channel1_IRQHandler+0x25c>)
 80046c6:	881b      	ldrh	r3, [r3, #0]
 80046c8:	4618      	mov	r0, r3
 80046ca:	f7fb ff2b 	bl	8000524 <__aeabi_i2d>
 80046ce:	4b49      	ldr	r3, [pc, #292]	; (80047f4 <DMA1_Channel1_IRQHandler+0x260>)
 80046d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046d4:	f7fb fdd8 	bl	8000288 <__aeabi_dsub>
 80046d8:	4602      	mov	r2, r0
 80046da:	460b      	mov	r3, r1
 80046dc:	4610      	mov	r0, r2
 80046de:	4619      	mov	r1, r3
 80046e0:	f7fc fa3a 	bl	8000b58 <__aeabi_d2iz>
 80046e4:	4603      	mov	r3, r0
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	bfb8      	it	lt
 80046ea:	425b      	neglt	r3, r3
 80046ec:	b29a      	uxth	r2, r3
 80046ee:	4b3f      	ldr	r3, [pc, #252]	; (80047ec <DMA1_Channel1_IRQHandler+0x258>)
 80046f0:	801a      	strh	r2, [r3, #0]
 80046f2:	e016      	b.n	8004722 <DMA1_Channel1_IRQHandler+0x18e>
			} else {
				maxLevel = abs(maxLevel - avgLevel);
 80046f4:	4b3d      	ldr	r3, [pc, #244]	; (80047ec <DMA1_Channel1_IRQHandler+0x258>)
 80046f6:	881b      	ldrh	r3, [r3, #0]
 80046f8:	4618      	mov	r0, r3
 80046fa:	f7fb ff13 	bl	8000524 <__aeabi_i2d>
 80046fe:	4b3d      	ldr	r3, [pc, #244]	; (80047f4 <DMA1_Channel1_IRQHandler+0x260>)
 8004700:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004704:	f7fb fdc0 	bl	8000288 <__aeabi_dsub>
 8004708:	4602      	mov	r2, r0
 800470a:	460b      	mov	r3, r1
 800470c:	4610      	mov	r0, r2
 800470e:	4619      	mov	r1, r3
 8004710:	f7fc fa22 	bl	8000b58 <__aeabi_d2iz>
 8004714:	4603      	mov	r3, r0
 8004716:	2b00      	cmp	r3, #0
 8004718:	bfb8      	it	lt
 800471a:	425b      	neglt	r3, r3
 800471c:	b29a      	uxth	r2, r3
 800471e:	4b33      	ldr	r3, [pc, #204]	; (80047ec <DMA1_Channel1_IRQHandler+0x258>)
 8004720:	801a      	strh	r2, [r3, #0]
			}
			if (abs(maxLevel - NOMINAL_LEVEL) > ACURACY_LEVEL) {
 8004722:	4b32      	ldr	r3, [pc, #200]	; (80047ec <DMA1_Channel1_IRQHandler+0x258>)
 8004724:	881b      	ldrh	r3, [r3, #0]
 8004726:	f5a3 63e1 	sub.w	r3, r3, #1800	; 0x708
 800472a:	2b00      	cmp	r3, #0
 800472c:	bfb8      	it	lt
 800472e:	425b      	neglt	r3, r3
 8004730:	2b64      	cmp	r3, #100	; 0x64
 8004732:	dd18      	ble.n	8004766 <DMA1_Channel1_IRQHandler+0x1d2>
				if (maxLevel - NOMINAL_LEVEL > 0) {
 8004734:	4b2d      	ldr	r3, [pc, #180]	; (80047ec <DMA1_Channel1_IRQHandler+0x258>)
 8004736:	881b      	ldrh	r3, [r3, #0]
 8004738:	f5b3 6fe1 	cmp.w	r3, #1800	; 0x708
 800473c:	d909      	bls.n	8004752 <DMA1_Channel1_IRQHandler+0x1be>
					/* Сигнал сильный, понижаем уровень */
					#ifdef X9CXXX
					levelUp(0, 1, DOWN);
					#endif
					#ifdef AD5245
					AD5245level(currentLevel--);
 800473e:	4b30      	ldr	r3, [pc, #192]	; (8004800 <DMA1_Channel1_IRQHandler+0x26c>)
 8004740:	781b      	ldrb	r3, [r3, #0]
 8004742:	1e5a      	subs	r2, r3, #1
 8004744:	b2d1      	uxtb	r1, r2
 8004746:	4a2e      	ldr	r2, [pc, #184]	; (8004800 <DMA1_Channel1_IRQHandler+0x26c>)
 8004748:	7011      	strb	r1, [r2, #0]
 800474a:	4618      	mov	r0, r3
 800474c:	f7fd fb96 	bl	8001e7c <AD5245level>
 8004750:	e03f      	b.n	80047d2 <DMA1_Channel1_IRQHandler+0x23e>
					/* Сигнал слабый, повышаем уровень */
					#ifdef X9CXXX
					levelUp(0, 1, UP);
					#endif
					#ifdef AD5245
					AD5245level(currentLevel++);
 8004752:	4b2b      	ldr	r3, [pc, #172]	; (8004800 <DMA1_Channel1_IRQHandler+0x26c>)
 8004754:	781b      	ldrb	r3, [r3, #0]
 8004756:	1c5a      	adds	r2, r3, #1
 8004758:	b2d1      	uxtb	r1, r2
 800475a:	4a29      	ldr	r2, [pc, #164]	; (8004800 <DMA1_Channel1_IRQHandler+0x26c>)
 800475c:	7011      	strb	r1, [r2, #0]
 800475e:	4618      	mov	r0, r3
 8004760:	f7fd fb8c 	bl	8001e7c <AD5245level>
 8004764:	e035      	b.n	80047d2 <DMA1_Channel1_IRQHandler+0x23e>
					#endif
				}
			} else {  /* Можно выполнять свертку */
				if (mesCount < MEASURE_COUNT) {
 8004766:	4b27      	ldr	r3, [pc, #156]	; (8004804 <DMA1_Channel1_IRQHandler+0x270>)
 8004768:	881b      	ldrh	r3, [r3, #0]
 800476a:	2b63      	cmp	r3, #99	; 0x63
 800476c:	d82b      	bhi.n	80047c6 <DMA1_Channel1_IRQHandler+0x232>
					for (int ii = 0; ii < CONVERSION_COUNT; ii++) {
 800476e:	2300      	movs	r3, #0
 8004770:	603b      	str	r3, [r7, #0]
 8004772:	e01d      	b.n	80047b0 <DMA1_Channel1_IRQHandler+0x21c>
						measArray[ii] = measArray[ii] + adcBuffer[ii];
 8004774:	4a24      	ldr	r2, [pc, #144]	; (8004808 <DMA1_Channel1_IRQHandler+0x274>)
 8004776:	683b      	ldr	r3, [r7, #0]
 8004778:	00db      	lsls	r3, r3, #3
 800477a:	4413      	add	r3, r2
 800477c:	e9d3 4500 	ldrd	r4, r5, [r3]
 8004780:	4a1d      	ldr	r2, [pc, #116]	; (80047f8 <DMA1_Channel1_IRQHandler+0x264>)
 8004782:	683b      	ldr	r3, [r7, #0]
 8004784:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004788:	4618      	mov	r0, r3
 800478a:	f7fb fecb 	bl	8000524 <__aeabi_i2d>
 800478e:	4602      	mov	r2, r0
 8004790:	460b      	mov	r3, r1
 8004792:	4620      	mov	r0, r4
 8004794:	4629      	mov	r1, r5
 8004796:	f7fb fd79 	bl	800028c <__adddf3>
 800479a:	4602      	mov	r2, r0
 800479c:	460b      	mov	r3, r1
 800479e:	481a      	ldr	r0, [pc, #104]	; (8004808 <DMA1_Channel1_IRQHandler+0x274>)
 80047a0:	6839      	ldr	r1, [r7, #0]
 80047a2:	00c9      	lsls	r1, r1, #3
 80047a4:	4401      	add	r1, r0
 80047a6:	e9c1 2300 	strd	r2, r3, [r1]
					for (int ii = 0; ii < CONVERSION_COUNT; ii++) {
 80047aa:	683b      	ldr	r3, [r7, #0]
 80047ac:	3301      	adds	r3, #1
 80047ae:	603b      	str	r3, [r7, #0]
 80047b0:	683b      	ldr	r3, [r7, #0]
 80047b2:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 80047b6:	dbdd      	blt.n	8004774 <DMA1_Channel1_IRQHandler+0x1e0>
					}
					mesCount++;
 80047b8:	4b12      	ldr	r3, [pc, #72]	; (8004804 <DMA1_Channel1_IRQHandler+0x270>)
 80047ba:	881b      	ldrh	r3, [r3, #0]
 80047bc:	3301      	adds	r3, #1
 80047be:	b29a      	uxth	r2, r3
 80047c0:	4b10      	ldr	r3, [pc, #64]	; (8004804 <DMA1_Channel1_IRQHandler+0x270>)
 80047c2:	801a      	strh	r2, [r3, #0]
 80047c4:	e005      	b.n	80047d2 <DMA1_Channel1_IRQHandler+0x23e>
				} else {
					mesCount = 0;
 80047c6:	4b0f      	ldr	r3, [pc, #60]	; (8004804 <DMA1_Channel1_IRQHandler+0x270>)
 80047c8:	2200      	movs	r2, #0
 80047ca:	801a      	strh	r2, [r3, #0]
					readyData = true;
 80047cc:	4b0f      	ldr	r3, [pc, #60]	; (800480c <DMA1_Channel1_IRQHandler+0x278>)
 80047ce:	2201      	movs	r2, #1
 80047d0:	701a      	strb	r2, [r3, #0]
				}
			}
		}
	}
  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80047d2:	480f      	ldr	r0, [pc, #60]	; (8004810 <DMA1_Channel1_IRQHandler+0x27c>)
 80047d4:	f001 fdc8 	bl	8006368 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80047d8:	bf00      	nop
 80047da:	3708      	adds	r7, #8
 80047dc:	46bd      	mov	sp, r7
 80047de:	bdb0      	pop	{r4, r5, r7, pc}
 80047e0:	20007ea8 	.word	0x20007ea8
 80047e4:	200067f8 	.word	0x200067f8
 80047e8:	20007eac 	.word	0x20007eac
 80047ec:	20007eae 	.word	0x20007eae
 80047f0:	20007eb0 	.word	0x20007eb0
 80047f4:	20008b40 	.word	0x20008b40
 80047f8:	20007b88 	.word	0x20007b88
 80047fc:	40790000 	.word	0x40790000
 8004800:	20000204 	.word	0x20000204
 8004804:	20007eaa 	.word	0x20007eaa
 8004808:	20007eb8 	.word	0x20007eb8
 800480c:	20008b38 	.word	0x20008b38
 8004810:	20006848 	.word	0x20006848

08004814 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8004814:	b580      	push	{r7, lr}
 8004816:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */
  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8004818:	4802      	ldr	r0, [pc, #8]	; (8004824 <TIM2_IRQHandler+0x10>)
 800481a:	f004 ff59 	bl	80096d0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800481e:	bf00      	nop
 8004820:	bd80      	pop	{r7, pc}
 8004822:	bf00      	nop
 8004824:	20006990 	.word	0x20006990

08004828 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8004828:	b580      	push	{r7, lr}
 800482a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */
	LED_PULSE
 800482c:	2201      	movs	r2, #1
 800482e:	2140      	movs	r1, #64	; 0x40
 8004830:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004834:	f002 f820 	bl	8006878 <HAL_GPIO_WritePin>
 8004838:	2200      	movs	r2, #0
 800483a:	2140      	movs	r1, #64	; 0x40
 800483c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004840:	f002 f81a 	bl	8006878 <HAL_GPIO_WritePin>
  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8004844:	4802      	ldr	r0, [pc, #8]	; (8004850 <TIM3_IRQHandler+0x28>)
 8004846:	f004 ff43 	bl	80096d0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800484a:	bf00      	nop
 800484c:	bd80      	pop	{r7, pc}
 800484e:	bf00      	nop
 8004850:	200069dc 	.word	0x200069dc

08004854 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8004854:	b580      	push	{r7, lr}
 8004856:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */
	HAL_TIM_OC_Stop(&htim1, TIM_CHANNEL_1);
 8004858:	2100      	movs	r1, #0
 800485a:	4816      	ldr	r0, [pc, #88]	; (80048b4 <TIM4_IRQHandler+0x60>)
 800485c:	f004 fbe6 	bl	800902c <HAL_TIM_OC_Stop>
	HAL_TIM_OC_Start(&htim1, TIM_CHANNEL_1);
 8004860:	2100      	movs	r1, #0
 8004862:	4814      	ldr	r0, [pc, #80]	; (80048b4 <TIM4_IRQHandler+0x60>)
 8004864:	f004 fae2 	bl	8008e2c <HAL_TIM_OC_Start>
	HAL_TIM_IC_Stop_IT(&htim2, TIM_CHANNEL_1);
 8004868:	2100      	movs	r1, #0
 800486a:	4813      	ldr	r0, [pc, #76]	; (80048b8 <TIM4_IRQHandler+0x64>)
 800486c:	f004 fe18 	bl	80094a0 <HAL_TIM_IC_Stop_IT>
	HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_1);
 8004870:	2100      	movs	r1, #0
 8004872:	4811      	ldr	r0, [pc, #68]	; (80048b8 <TIM4_IRQHandler+0x64>)
 8004874:	f004 fcd2 	bl	800921c <HAL_TIM_IC_Start_IT>
	HAL_GPIO_WritePin(Z1Sel_GPIO_Port, Z1Sel_Pin, GPIO_PIN_SET);
 8004878:	2201      	movs	r2, #1
 800487a:	2101      	movs	r1, #1
 800487c:	480f      	ldr	r0, [pc, #60]	; (80048bc <TIM4_IRQHandler+0x68>)
 800487e:	f001 fffb 	bl	8006878 <HAL_GPIO_WritePin>
	haftConf = 1;
 8004882:	4b0f      	ldr	r3, [pc, #60]	; (80048c0 <TIM4_IRQHandler+0x6c>)
 8004884:	2201      	movs	r2, #1
 8004886:	801a      	strh	r2, [r3, #0]
	readyCapture = true;
 8004888:	4b0e      	ldr	r3, [pc, #56]	; (80048c4 <TIM4_IRQHandler+0x70>)
 800488a:	2201      	movs	r2, #1
 800488c:	701a      	strb	r2, [r3, #0]
	if (! readyData) {
 800488e:	4b0e      	ldr	r3, [pc, #56]	; (80048c8 <TIM4_IRQHandler+0x74>)
 8004890:	781b      	ldrb	r3, [r3, #0]
 8004892:	f083 0301 	eor.w	r3, r3, #1
 8004896:	b2db      	uxtb	r3, r3
 8004898:	2b00      	cmp	r3, #0
 800489a:	d005      	beq.n	80048a8 <TIM4_IRQHandler+0x54>
		HAL_ADC_Start_DMA(&hadc1, (uint32_t*) adcBuffer, CONVERSION_COUNT);
 800489c:	f44f 72c8 	mov.w	r2, #400	; 0x190
 80048a0:	490a      	ldr	r1, [pc, #40]	; (80048cc <TIM4_IRQHandler+0x78>)
 80048a2:	480b      	ldr	r0, [pc, #44]	; (80048d0 <TIM4_IRQHandler+0x7c>)
 80048a4:	f000 fba2 	bl	8004fec <HAL_ADC_Start_DMA>
	}
  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80048a8:	480a      	ldr	r0, [pc, #40]	; (80048d4 <TIM4_IRQHandler+0x80>)
 80048aa:	f004 ff11 	bl	80096d0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80048ae:	bf00      	nop
 80048b0:	bd80      	pop	{r7, pc}
 80048b2:	bf00      	nop
 80048b4:	20006944 	.word	0x20006944
 80048b8:	20006990 	.word	0x20006990
 80048bc:	48000400 	.word	0x48000400
 80048c0:	20007ea8 	.word	0x20007ea8
 80048c4:	20008b39 	.word	0x20008b39
 80048c8:	20008b38 	.word	0x20008b38
 80048cc:	20007b88 	.word	0x20007b88
 80048d0:	200067f8 	.word	0x200067f8
 80048d4:	20006a28 	.word	0x20006a28

080048d8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80048d8:	b480      	push	{r7}
 80048da:	af00      	add	r7, sp, #0
	return 1;
 80048dc:	2301      	movs	r3, #1
}
 80048de:	4618      	mov	r0, r3
 80048e0:	46bd      	mov	sp, r7
 80048e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048e6:	4770      	bx	lr

080048e8 <_kill>:

int _kill(int pid, int sig)
{
 80048e8:	b580      	push	{r7, lr}
 80048ea:	b082      	sub	sp, #8
 80048ec:	af00      	add	r7, sp, #0
 80048ee:	6078      	str	r0, [r7, #4]
 80048f0:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80048f2:	f006 fe51 	bl	800b598 <__errno>
 80048f6:	4603      	mov	r3, r0
 80048f8:	2216      	movs	r2, #22
 80048fa:	601a      	str	r2, [r3, #0]
	return -1;
 80048fc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8004900:	4618      	mov	r0, r3
 8004902:	3708      	adds	r7, #8
 8004904:	46bd      	mov	sp, r7
 8004906:	bd80      	pop	{r7, pc}

08004908 <_exit>:

void _exit (int status)
{
 8004908:	b580      	push	{r7, lr}
 800490a:	b082      	sub	sp, #8
 800490c:	af00      	add	r7, sp, #0
 800490e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8004910:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8004914:	6878      	ldr	r0, [r7, #4]
 8004916:	f7ff ffe7 	bl	80048e8 <_kill>
	while (1) {}		/* Make sure we hang here */
 800491a:	e7fe      	b.n	800491a <_exit+0x12>

0800491c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800491c:	b580      	push	{r7, lr}
 800491e:	b086      	sub	sp, #24
 8004920:	af00      	add	r7, sp, #0
 8004922:	60f8      	str	r0, [r7, #12]
 8004924:	60b9      	str	r1, [r7, #8]
 8004926:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004928:	2300      	movs	r3, #0
 800492a:	617b      	str	r3, [r7, #20]
 800492c:	e00a      	b.n	8004944 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800492e:	f3af 8000 	nop.w
 8004932:	4601      	mov	r1, r0
 8004934:	68bb      	ldr	r3, [r7, #8]
 8004936:	1c5a      	adds	r2, r3, #1
 8004938:	60ba      	str	r2, [r7, #8]
 800493a:	b2ca      	uxtb	r2, r1
 800493c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800493e:	697b      	ldr	r3, [r7, #20]
 8004940:	3301      	adds	r3, #1
 8004942:	617b      	str	r3, [r7, #20]
 8004944:	697a      	ldr	r2, [r7, #20]
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	429a      	cmp	r2, r3
 800494a:	dbf0      	blt.n	800492e <_read+0x12>
	}

return len;
 800494c:	687b      	ldr	r3, [r7, #4]
}
 800494e:	4618      	mov	r0, r3
 8004950:	3718      	adds	r7, #24
 8004952:	46bd      	mov	sp, r7
 8004954:	bd80      	pop	{r7, pc}

08004956 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8004956:	b580      	push	{r7, lr}
 8004958:	b086      	sub	sp, #24
 800495a:	af00      	add	r7, sp, #0
 800495c:	60f8      	str	r0, [r7, #12]
 800495e:	60b9      	str	r1, [r7, #8]
 8004960:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004962:	2300      	movs	r3, #0
 8004964:	617b      	str	r3, [r7, #20]
 8004966:	e009      	b.n	800497c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8004968:	68bb      	ldr	r3, [r7, #8]
 800496a:	1c5a      	adds	r2, r3, #1
 800496c:	60ba      	str	r2, [r7, #8]
 800496e:	781b      	ldrb	r3, [r3, #0]
 8004970:	4618      	mov	r0, r3
 8004972:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004976:	697b      	ldr	r3, [r7, #20]
 8004978:	3301      	adds	r3, #1
 800497a:	617b      	str	r3, [r7, #20]
 800497c:	697a      	ldr	r2, [r7, #20]
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	429a      	cmp	r2, r3
 8004982:	dbf1      	blt.n	8004968 <_write+0x12>
	}
	return len;
 8004984:	687b      	ldr	r3, [r7, #4]
}
 8004986:	4618      	mov	r0, r3
 8004988:	3718      	adds	r7, #24
 800498a:	46bd      	mov	sp, r7
 800498c:	bd80      	pop	{r7, pc}

0800498e <_close>:

int _close(int file)
{
 800498e:	b480      	push	{r7}
 8004990:	b083      	sub	sp, #12
 8004992:	af00      	add	r7, sp, #0
 8004994:	6078      	str	r0, [r7, #4]
	return -1;
 8004996:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800499a:	4618      	mov	r0, r3
 800499c:	370c      	adds	r7, #12
 800499e:	46bd      	mov	sp, r7
 80049a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049a4:	4770      	bx	lr

080049a6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80049a6:	b480      	push	{r7}
 80049a8:	b083      	sub	sp, #12
 80049aa:	af00      	add	r7, sp, #0
 80049ac:	6078      	str	r0, [r7, #4]
 80049ae:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80049b0:	683b      	ldr	r3, [r7, #0]
 80049b2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80049b6:	605a      	str	r2, [r3, #4]
	return 0;
 80049b8:	2300      	movs	r3, #0
}
 80049ba:	4618      	mov	r0, r3
 80049bc:	370c      	adds	r7, #12
 80049be:	46bd      	mov	sp, r7
 80049c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049c4:	4770      	bx	lr

080049c6 <_isatty>:

int _isatty(int file)
{
 80049c6:	b480      	push	{r7}
 80049c8:	b083      	sub	sp, #12
 80049ca:	af00      	add	r7, sp, #0
 80049cc:	6078      	str	r0, [r7, #4]
	return 1;
 80049ce:	2301      	movs	r3, #1
}
 80049d0:	4618      	mov	r0, r3
 80049d2:	370c      	adds	r7, #12
 80049d4:	46bd      	mov	sp, r7
 80049d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049da:	4770      	bx	lr

080049dc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80049dc:	b480      	push	{r7}
 80049de:	b085      	sub	sp, #20
 80049e0:	af00      	add	r7, sp, #0
 80049e2:	60f8      	str	r0, [r7, #12]
 80049e4:	60b9      	str	r1, [r7, #8]
 80049e6:	607a      	str	r2, [r7, #4]
	return 0;
 80049e8:	2300      	movs	r3, #0
}
 80049ea:	4618      	mov	r0, r3
 80049ec:	3714      	adds	r7, #20
 80049ee:	46bd      	mov	sp, r7
 80049f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049f4:	4770      	bx	lr
	...

080049f8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80049f8:	b580      	push	{r7, lr}
 80049fa:	b086      	sub	sp, #24
 80049fc:	af00      	add	r7, sp, #0
 80049fe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004a00:	4a14      	ldr	r2, [pc, #80]	; (8004a54 <_sbrk+0x5c>)
 8004a02:	4b15      	ldr	r3, [pc, #84]	; (8004a58 <_sbrk+0x60>)
 8004a04:	1ad3      	subs	r3, r2, r3
 8004a06:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004a08:	697b      	ldr	r3, [r7, #20]
 8004a0a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004a0c:	4b13      	ldr	r3, [pc, #76]	; (8004a5c <_sbrk+0x64>)
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d102      	bne.n	8004a1a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004a14:	4b11      	ldr	r3, [pc, #68]	; (8004a5c <_sbrk+0x64>)
 8004a16:	4a12      	ldr	r2, [pc, #72]	; (8004a60 <_sbrk+0x68>)
 8004a18:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004a1a:	4b10      	ldr	r3, [pc, #64]	; (8004a5c <_sbrk+0x64>)
 8004a1c:	681a      	ldr	r2, [r3, #0]
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	4413      	add	r3, r2
 8004a22:	693a      	ldr	r2, [r7, #16]
 8004a24:	429a      	cmp	r2, r3
 8004a26:	d207      	bcs.n	8004a38 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004a28:	f006 fdb6 	bl	800b598 <__errno>
 8004a2c:	4603      	mov	r3, r0
 8004a2e:	220c      	movs	r2, #12
 8004a30:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8004a32:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004a36:	e009      	b.n	8004a4c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004a38:	4b08      	ldr	r3, [pc, #32]	; (8004a5c <_sbrk+0x64>)
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8004a3e:	4b07      	ldr	r3, [pc, #28]	; (8004a5c <_sbrk+0x64>)
 8004a40:	681a      	ldr	r2, [r3, #0]
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	4413      	add	r3, r2
 8004a46:	4a05      	ldr	r2, [pc, #20]	; (8004a5c <_sbrk+0x64>)
 8004a48:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8004a4a:	68fb      	ldr	r3, [r7, #12]
}
 8004a4c:	4618      	mov	r0, r3
 8004a4e:	3718      	adds	r7, #24
 8004a50:	46bd      	mov	sp, r7
 8004a52:	bd80      	pop	{r7, pc}
 8004a54:	2000a000 	.word	0x2000a000
 8004a58:	00000400 	.word	0x00000400
 8004a5c:	20008b68 	.word	0x20008b68
 8004a60:	20008b80 	.word	0x20008b80

08004a64 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004a64:	b480      	push	{r7}
 8004a66:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004a68:	4b06      	ldr	r3, [pc, #24]	; (8004a84 <SystemInit+0x20>)
 8004a6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a6e:	4a05      	ldr	r2, [pc, #20]	; (8004a84 <SystemInit+0x20>)
 8004a70:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004a74:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004a78:	bf00      	nop
 8004a7a:	46bd      	mov	sp, r7
 8004a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a80:	4770      	bx	lr
 8004a82:	bf00      	nop
 8004a84:	e000ed00 	.word	0xe000ed00

08004a88 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8004a88:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004ac0 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8004a8c:	f7ff ffea 	bl	8004a64 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8004a90:	480c      	ldr	r0, [pc, #48]	; (8004ac4 <LoopForever+0x6>)
  ldr r1, =_edata
 8004a92:	490d      	ldr	r1, [pc, #52]	; (8004ac8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8004a94:	4a0d      	ldr	r2, [pc, #52]	; (8004acc <LoopForever+0xe>)
  movs r3, #0
 8004a96:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004a98:	e002      	b.n	8004aa0 <LoopCopyDataInit>

08004a9a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004a9a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004a9c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004a9e:	3304      	adds	r3, #4

08004aa0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004aa0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004aa2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004aa4:	d3f9      	bcc.n	8004a9a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004aa6:	4a0a      	ldr	r2, [pc, #40]	; (8004ad0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8004aa8:	4c0a      	ldr	r4, [pc, #40]	; (8004ad4 <LoopForever+0x16>)
  movs r3, #0
 8004aaa:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004aac:	e001      	b.n	8004ab2 <LoopFillZerobss>

08004aae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004aae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004ab0:	3204      	adds	r2, #4

08004ab2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004ab2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004ab4:	d3fb      	bcc.n	8004aae <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8004ab6:	f006 fd75 	bl	800b5a4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8004aba:	f7fd f9fd 	bl	8001eb8 <main>

08004abe <LoopForever>:

LoopForever:
    b LoopForever
 8004abe:	e7fe      	b.n	8004abe <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8004ac0:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 8004ac4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004ac8:	200001e4 	.word	0x200001e4
  ldr r2, =_sidata
 8004acc:	08014014 	.word	0x08014014
  ldr r2, =_sbss
 8004ad0:	200001e8 	.word	0x200001e8
  ldr r4, =_ebss
 8004ad4:	20008b80 	.word	0x20008b80

08004ad8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8004ad8:	e7fe      	b.n	8004ad8 <ADC1_2_IRQHandler>
	...

08004adc <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004adc:	b580      	push	{r7, lr}
 8004ade:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004ae0:	4b08      	ldr	r3, [pc, #32]	; (8004b04 <HAL_Init+0x28>)
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	4a07      	ldr	r2, [pc, #28]	; (8004b04 <HAL_Init+0x28>)
 8004ae6:	f043 0310 	orr.w	r3, r3, #16
 8004aea:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004aec:	2003      	movs	r0, #3
 8004aee:	f001 fb17 	bl	8006120 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004af2:	2000      	movs	r0, #0
 8004af4:	f000 f808 	bl	8004b08 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004af8:	f7ff fa80 	bl	8003ffc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004afc:	2300      	movs	r3, #0
}
 8004afe:	4618      	mov	r0, r3
 8004b00:	bd80      	pop	{r7, pc}
 8004b02:	bf00      	nop
 8004b04:	40022000 	.word	0x40022000

08004b08 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004b08:	b580      	push	{r7, lr}
 8004b0a:	b082      	sub	sp, #8
 8004b0c:	af00      	add	r7, sp, #0
 8004b0e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004b10:	4b12      	ldr	r3, [pc, #72]	; (8004b5c <HAL_InitTick+0x54>)
 8004b12:	681a      	ldr	r2, [r3, #0]
 8004b14:	4b12      	ldr	r3, [pc, #72]	; (8004b60 <HAL_InitTick+0x58>)
 8004b16:	781b      	ldrb	r3, [r3, #0]
 8004b18:	4619      	mov	r1, r3
 8004b1a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004b1e:	fbb3 f3f1 	udiv	r3, r3, r1
 8004b22:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b26:	4618      	mov	r0, r3
 8004b28:	f001 fb33 	bl	8006192 <HAL_SYSTICK_Config>
 8004b2c:	4603      	mov	r3, r0
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d001      	beq.n	8004b36 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8004b32:	2301      	movs	r3, #1
 8004b34:	e00e      	b.n	8004b54 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	2b0f      	cmp	r3, #15
 8004b3a:	d80a      	bhi.n	8004b52 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004b3c:	2200      	movs	r2, #0
 8004b3e:	6879      	ldr	r1, [r7, #4]
 8004b40:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004b44:	f001 faf7 	bl	8006136 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004b48:	4a06      	ldr	r2, [pc, #24]	; (8004b64 <HAL_InitTick+0x5c>)
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8004b4e:	2300      	movs	r3, #0
 8004b50:	e000      	b.n	8004b54 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8004b52:	2301      	movs	r3, #1
}
 8004b54:	4618      	mov	r0, r3
 8004b56:	3708      	adds	r7, #8
 8004b58:	46bd      	mov	sp, r7
 8004b5a:	bd80      	pop	{r7, pc}
 8004b5c:	20000008 	.word	0x20000008
 8004b60:	20000010 	.word	0x20000010
 8004b64:	2000000c 	.word	0x2000000c

08004b68 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004b68:	b480      	push	{r7}
 8004b6a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004b6c:	4b06      	ldr	r3, [pc, #24]	; (8004b88 <HAL_IncTick+0x20>)
 8004b6e:	781b      	ldrb	r3, [r3, #0]
 8004b70:	461a      	mov	r2, r3
 8004b72:	4b06      	ldr	r3, [pc, #24]	; (8004b8c <HAL_IncTick+0x24>)
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	4413      	add	r3, r2
 8004b78:	4a04      	ldr	r2, [pc, #16]	; (8004b8c <HAL_IncTick+0x24>)
 8004b7a:	6013      	str	r3, [r2, #0]
}
 8004b7c:	bf00      	nop
 8004b7e:	46bd      	mov	sp, r7
 8004b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b84:	4770      	bx	lr
 8004b86:	bf00      	nop
 8004b88:	20000010 	.word	0x20000010
 8004b8c:	20008b6c 	.word	0x20008b6c

08004b90 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004b90:	b480      	push	{r7}
 8004b92:	af00      	add	r7, sp, #0
  return uwTick;  
 8004b94:	4b03      	ldr	r3, [pc, #12]	; (8004ba4 <HAL_GetTick+0x14>)
 8004b96:	681b      	ldr	r3, [r3, #0]
}
 8004b98:	4618      	mov	r0, r3
 8004b9a:	46bd      	mov	sp, r7
 8004b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ba0:	4770      	bx	lr
 8004ba2:	bf00      	nop
 8004ba4:	20008b6c 	.word	0x20008b6c

08004ba8 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004ba8:	b580      	push	{r7, lr}
 8004baa:	b084      	sub	sp, #16
 8004bac:	af00      	add	r7, sp, #0
 8004bae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004bb0:	f7ff ffee 	bl	8004b90 <HAL_GetTick>
 8004bb4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004bc0:	d005      	beq.n	8004bce <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004bc2:	4b0a      	ldr	r3, [pc, #40]	; (8004bec <HAL_Delay+0x44>)
 8004bc4:	781b      	ldrb	r3, [r3, #0]
 8004bc6:	461a      	mov	r2, r3
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	4413      	add	r3, r2
 8004bcc:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8004bce:	bf00      	nop
 8004bd0:	f7ff ffde 	bl	8004b90 <HAL_GetTick>
 8004bd4:	4602      	mov	r2, r0
 8004bd6:	68bb      	ldr	r3, [r7, #8]
 8004bd8:	1ad3      	subs	r3, r2, r3
 8004bda:	68fa      	ldr	r2, [r7, #12]
 8004bdc:	429a      	cmp	r2, r3
 8004bde:	d8f7      	bhi.n	8004bd0 <HAL_Delay+0x28>
  {
  }
}
 8004be0:	bf00      	nop
 8004be2:	bf00      	nop
 8004be4:	3710      	adds	r7, #16
 8004be6:	46bd      	mov	sp, r7
 8004be8:	bd80      	pop	{r7, pc}
 8004bea:	bf00      	nop
 8004bec:	20000010 	.word	0x20000010

08004bf0 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8004bf0:	b480      	push	{r7}
 8004bf2:	b083      	sub	sp, #12
 8004bf4:	af00      	add	r7, sp, #0
 8004bf6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8004bf8:	bf00      	nop
 8004bfa:	370c      	adds	r7, #12
 8004bfc:	46bd      	mov	sp, r7
 8004bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c02:	4770      	bx	lr

08004c04 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8004c04:	b480      	push	{r7}
 8004c06:	b083      	sub	sp, #12
 8004c08:	af00      	add	r7, sp, #0
 8004c0a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8004c0c:	bf00      	nop
 8004c0e:	370c      	adds	r7, #12
 8004c10:	46bd      	mov	sp, r7
 8004c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c16:	4770      	bx	lr

08004c18 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8004c18:	b480      	push	{r7}
 8004c1a:	b083      	sub	sp, #12
 8004c1c:	af00      	add	r7, sp, #0
 8004c1e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8004c20:	bf00      	nop
 8004c22:	370c      	adds	r7, #12
 8004c24:	46bd      	mov	sp, r7
 8004c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c2a:	4770      	bx	lr

08004c2c <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8004c2c:	b580      	push	{r7, lr}
 8004c2e:	b09a      	sub	sp, #104	; 0x68
 8004c30:	af00      	add	r7, sp, #0
 8004c32:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004c34:	2300      	movs	r3, #0
 8004c36:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 8004c3a:	2300      	movs	r3, #0
 8004c3c:	663b      	str	r3, [r7, #96]	; 0x60
  __IO uint32_t wait_loop_index = 0U;
 8004c3e:	2300      	movs	r3, #0
 8004c40:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d101      	bne.n	8004c4c <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 8004c48:	2301      	movs	r3, #1
 8004c4a:	e1c9      	b.n	8004fe0 <HAL_ADC_Init+0x3b4>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	691b      	ldr	r3, [r3, #16]
 8004c50:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c56:	f003 0310 	and.w	r3, r3, #16
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d176      	bne.n	8004d4c <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d152      	bne.n	8004d0c <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	2200      	movs	r2, #0
 8004c6a:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	2200      	movs	r2, #0
 8004c70:	64da      	str	r2, [r3, #76]	; 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	2200      	movs	r2, #0
 8004c76:	649a      	str	r2, [r3, #72]	; 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	2200      	movs	r2, #0
 8004c7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8004c80:	6878      	ldr	r0, [r7, #4]
 8004c82:	f7ff f9df 	bl	8004044 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	689b      	ldr	r3, [r3, #8]
 8004c8c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d13b      	bne.n	8004d0c <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 8004c94:	6878      	ldr	r0, [r7, #4]
 8004c96:	f001 f841 	bl	8005d1c <ADC_Disable>
 8004c9a:	4603      	mov	r3, r0
 8004c9c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ca4:	f003 0310 	and.w	r3, r3, #16
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d12f      	bne.n	8004d0c <HAL_ADC_Init+0xe0>
 8004cac:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d12b      	bne.n	8004d0c <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cb8:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8004cbc:	f023 0302 	bic.w	r3, r3, #2
 8004cc0:	f043 0202 	orr.w	r2, r3, #2
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	641a      	str	r2, [r3, #64]	; 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	689a      	ldr	r2, [r3, #8]
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8004cd6:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	689a      	ldr	r2, [r3, #8]
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8004ce6:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8004ce8:	4b86      	ldr	r3, [pc, #536]	; (8004f04 <HAL_ADC_Init+0x2d8>)
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	4a86      	ldr	r2, [pc, #536]	; (8004f08 <HAL_ADC_Init+0x2dc>)
 8004cee:	fba2 2303 	umull	r2, r3, r2, r3
 8004cf2:	0c9a      	lsrs	r2, r3, #18
 8004cf4:	4613      	mov	r3, r2
 8004cf6:	009b      	lsls	r3, r3, #2
 8004cf8:	4413      	add	r3, r2
 8004cfa:	005b      	lsls	r3, r3, #1
 8004cfc:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8004cfe:	e002      	b.n	8004d06 <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 8004d00:	68bb      	ldr	r3, [r7, #8]
 8004d02:	3b01      	subs	r3, #1
 8004d04:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8004d06:	68bb      	ldr	r3, [r7, #8]
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d1f9      	bne.n	8004d00 <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	689b      	ldr	r3, [r3, #8]
 8004d12:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d007      	beq.n	8004d2a <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	689b      	ldr	r3, [r3, #8]
 8004d20:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8004d24:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004d28:	d110      	bne.n	8004d4c <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d2e:	f023 0312 	bic.w	r3, r3, #18
 8004d32:	f043 0210 	orr.w	r2, r3, #16
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d3e:	f043 0201 	orr.w	r2, r3, #1
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	645a      	str	r2, [r3, #68]	; 0x44
      
      tmp_hal_status = HAL_ERROR;
 8004d46:	2301      	movs	r3, #1
 8004d48:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d50:	f003 0310 	and.w	r3, r3, #16
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	f040 8136 	bne.w	8004fc6 <HAL_ADC_Init+0x39a>
 8004d5a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	f040 8131 	bne.w	8004fc6 <HAL_ADC_Init+0x39a>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	689b      	ldr	r3, [r3, #8]
 8004d6a:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	f040 8129 	bne.w	8004fc6 <HAL_ADC_Init+0x39a>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d78:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8004d7c:	f043 0202 	orr.w	r2, r3, #2
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	641a      	str	r2, [r3, #64]	; 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004d8c:	d004      	beq.n	8004d98 <HAL_ADC_Init+0x16c>
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	4a5e      	ldr	r2, [pc, #376]	; (8004f0c <HAL_ADC_Init+0x2e0>)
 8004d94:	4293      	cmp	r3, r2
 8004d96:	d101      	bne.n	8004d9c <HAL_ADC_Init+0x170>
 8004d98:	4b5d      	ldr	r3, [pc, #372]	; (8004f10 <HAL_ADC_Init+0x2e4>)
 8004d9a:	e000      	b.n	8004d9e <HAL_ADC_Init+0x172>
 8004d9c:	4b5d      	ldr	r3, [pc, #372]	; (8004f14 <HAL_ADC_Init+0x2e8>)
 8004d9e:	65fb      	str	r3, [r7, #92]	; 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004da8:	d102      	bne.n	8004db0 <HAL_ADC_Init+0x184>
 8004daa:	4b58      	ldr	r3, [pc, #352]	; (8004f0c <HAL_ADC_Init+0x2e0>)
 8004dac:	60fb      	str	r3, [r7, #12]
 8004dae:	e01a      	b.n	8004de6 <HAL_ADC_Init+0x1ba>
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	4a55      	ldr	r2, [pc, #340]	; (8004f0c <HAL_ADC_Init+0x2e0>)
 8004db6:	4293      	cmp	r3, r2
 8004db8:	d103      	bne.n	8004dc2 <HAL_ADC_Init+0x196>
 8004dba:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8004dbe:	60fb      	str	r3, [r7, #12]
 8004dc0:	e011      	b.n	8004de6 <HAL_ADC_Init+0x1ba>
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	4a54      	ldr	r2, [pc, #336]	; (8004f18 <HAL_ADC_Init+0x2ec>)
 8004dc8:	4293      	cmp	r3, r2
 8004dca:	d102      	bne.n	8004dd2 <HAL_ADC_Init+0x1a6>
 8004dcc:	4b53      	ldr	r3, [pc, #332]	; (8004f1c <HAL_ADC_Init+0x2f0>)
 8004dce:	60fb      	str	r3, [r7, #12]
 8004dd0:	e009      	b.n	8004de6 <HAL_ADC_Init+0x1ba>
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	4a51      	ldr	r2, [pc, #324]	; (8004f1c <HAL_ADC_Init+0x2f0>)
 8004dd8:	4293      	cmp	r3, r2
 8004dda:	d102      	bne.n	8004de2 <HAL_ADC_Init+0x1b6>
 8004ddc:	4b4e      	ldr	r3, [pc, #312]	; (8004f18 <HAL_ADC_Init+0x2ec>)
 8004dde:	60fb      	str	r3, [r7, #12]
 8004de0:	e001      	b.n	8004de6 <HAL_ADC_Init+0x1ba>
 8004de2:	2300      	movs	r3, #0
 8004de4:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	689b      	ldr	r3, [r3, #8]
 8004dec:	f003 0303 	and.w	r3, r3, #3
 8004df0:	2b01      	cmp	r3, #1
 8004df2:	d108      	bne.n	8004e06 <HAL_ADC_Init+0x1da>
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	f003 0301 	and.w	r3, r3, #1
 8004dfe:	2b01      	cmp	r3, #1
 8004e00:	d101      	bne.n	8004e06 <HAL_ADC_Init+0x1da>
 8004e02:	2301      	movs	r3, #1
 8004e04:	e000      	b.n	8004e08 <HAL_ADC_Init+0x1dc>
 8004e06:	2300      	movs	r3, #0
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d11c      	bne.n	8004e46 <HAL_ADC_Init+0x21a>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8004e0c:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d010      	beq.n	8004e34 <HAL_ADC_Init+0x208>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	689b      	ldr	r3, [r3, #8]
 8004e16:	f003 0303 	and.w	r3, r3, #3
 8004e1a:	2b01      	cmp	r3, #1
 8004e1c:	d107      	bne.n	8004e2e <HAL_ADC_Init+0x202>
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	f003 0301 	and.w	r3, r3, #1
 8004e26:	2b01      	cmp	r3, #1
 8004e28:	d101      	bne.n	8004e2e <HAL_ADC_Init+0x202>
 8004e2a:	2301      	movs	r3, #1
 8004e2c:	e000      	b.n	8004e30 <HAL_ADC_Init+0x204>
 8004e2e:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d108      	bne.n	8004e46 <HAL_ADC_Init+0x21a>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 8004e34:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004e36:	689b      	ldr	r3, [r3, #8]
 8004e38:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	685b      	ldr	r3, [r3, #4]
 8004e40:	431a      	orrs	r2, r3
 8004e42:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004e44:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	7e5b      	ldrb	r3, [r3, #25]
 8004e4a:	035b      	lsls	r3, r3, #13
 8004e4c:	687a      	ldr	r2, [r7, #4]
 8004e4e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004e50:	2a01      	cmp	r2, #1
 8004e52:	d002      	beq.n	8004e5a <HAL_ADC_Init+0x22e>
 8004e54:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8004e58:	e000      	b.n	8004e5c <HAL_ADC_Init+0x230>
 8004e5a:	2200      	movs	r2, #0
 8004e5c:	431a      	orrs	r2, r3
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	68db      	ldr	r3, [r3, #12]
 8004e62:	431a      	orrs	r2, r3
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	689b      	ldr	r3, [r3, #8]
 8004e68:	4313      	orrs	r3, r2
 8004e6a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004e6c:	4313      	orrs	r3, r2
 8004e6e:	663b      	str	r3, [r7, #96]	; 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004e76:	2b01      	cmp	r3, #1
 8004e78:	d11b      	bne.n	8004eb2 <HAL_ADC_Init+0x286>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	7e5b      	ldrb	r3, [r3, #25]
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d109      	bne.n	8004e96 <HAL_ADC_Init+0x26a>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e86:	3b01      	subs	r3, #1
 8004e88:	045a      	lsls	r2, r3, #17
 8004e8a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004e8c:	4313      	orrs	r3, r2
 8004e8e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004e92:	663b      	str	r3, [r7, #96]	; 0x60
 8004e94:	e00d      	b.n	8004eb2 <HAL_ADC_Init+0x286>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e9a:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8004e9e:	f043 0220 	orr.w	r2, r3, #32
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004eaa:	f043 0201 	orr.w	r2, r3, #1
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	645a      	str	r2, [r3, #68]	; 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004eb6:	2b01      	cmp	r3, #1
 8004eb8:	d03a      	beq.n	8004f30 <HAL_ADC_Init+0x304>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	4a16      	ldr	r2, [pc, #88]	; (8004f18 <HAL_ADC_Init+0x2ec>)
 8004ec0:	4293      	cmp	r3, r2
 8004ec2:	d004      	beq.n	8004ece <HAL_ADC_Init+0x2a2>
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	4a14      	ldr	r2, [pc, #80]	; (8004f1c <HAL_ADC_Init+0x2f0>)
 8004eca:	4293      	cmp	r3, r2
 8004ecc:	d128      	bne.n	8004f20 <HAL_ADC_Init+0x2f4>
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ed2:	f5b3 7f30 	cmp.w	r3, #704	; 0x2c0
 8004ed6:	d012      	beq.n	8004efe <HAL_ADC_Init+0x2d2>
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004edc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004ee0:	d00a      	beq.n	8004ef8 <HAL_ADC_Init+0x2cc>
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ee6:	f5b3 7fe0 	cmp.w	r3, #448	; 0x1c0
 8004eea:	d002      	beq.n	8004ef2 <HAL_ADC_Init+0x2c6>
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ef0:	e018      	b.n	8004f24 <HAL_ADC_Init+0x2f8>
 8004ef2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004ef6:	e015      	b.n	8004f24 <HAL_ADC_Init+0x2f8>
 8004ef8:	f44f 7330 	mov.w	r3, #704	; 0x2c0
 8004efc:	e012      	b.n	8004f24 <HAL_ADC_Init+0x2f8>
 8004efe:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 8004f02:	e00f      	b.n	8004f24 <HAL_ADC_Init+0x2f8>
 8004f04:	20000008 	.word	0x20000008
 8004f08:	431bde83 	.word	0x431bde83
 8004f0c:	50000100 	.word	0x50000100
 8004f10:	50000300 	.word	0x50000300
 8004f14:	50000700 	.word	0x50000700
 8004f18:	50000400 	.word	0x50000400
 8004f1c:	50000500 	.word	0x50000500
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f24:	687a      	ldr	r2, [r7, #4]
 8004f26:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8004f28:	4313      	orrs	r3, r2
 8004f2a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004f2c:	4313      	orrs	r3, r2
 8004f2e:	663b      	str	r3, [r7, #96]	; 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	689b      	ldr	r3, [r3, #8]
 8004f36:	f003 030c 	and.w	r3, r3, #12
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d114      	bne.n	8004f68 <HAL_ADC_Init+0x33c>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	68db      	ldr	r3, [r3, #12]
 8004f44:	687a      	ldr	r2, [r7, #4]
 8004f46:	6812      	ldr	r2, [r2, #0]
 8004f48:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004f4c:	f023 0302 	bic.w	r3, r3, #2
 8004f50:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	7e1b      	ldrb	r3, [r3, #24]
 8004f56:	039a      	lsls	r2, r3, #14
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004f5e:	005b      	lsls	r3, r3, #1
 8004f60:	4313      	orrs	r3, r2
 8004f62:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004f64:	4313      	orrs	r3, r2
 8004f66:	663b      	str	r3, [r7, #96]	; 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	68da      	ldr	r2, [r3, #12]
 8004f6e:	4b1e      	ldr	r3, [pc, #120]	; (8004fe8 <HAL_ADC_Init+0x3bc>)
 8004f70:	4013      	ands	r3, r2
 8004f72:	687a      	ldr	r2, [r7, #4]
 8004f74:	6812      	ldr	r2, [r2, #0]
 8004f76:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8004f78:	430b      	orrs	r3, r1
 8004f7a:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	691b      	ldr	r3, [r3, #16]
 8004f80:	2b01      	cmp	r3, #1
 8004f82:	d10c      	bne.n	8004f9e <HAL_ADC_Init+0x372>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f8a:	f023 010f 	bic.w	r1, r3, #15
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	69db      	ldr	r3, [r3, #28]
 8004f92:	1e5a      	subs	r2, r3, #1
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	430a      	orrs	r2, r1
 8004f9a:	631a      	str	r2, [r3, #48]	; 0x30
 8004f9c:	e007      	b.n	8004fae <HAL_ADC_Init+0x382>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	f022 020f 	bic.w	r2, r2, #15
 8004fac:	631a      	str	r2, [r3, #48]	; 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	2200      	movs	r2, #0
 8004fb2:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fb8:	f023 0303 	bic.w	r3, r3, #3
 8004fbc:	f043 0201 	orr.w	r2, r3, #1
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	641a      	str	r2, [r3, #64]	; 0x40
 8004fc4:	e00a      	b.n	8004fdc <HAL_ADC_Init+0x3b0>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fca:	f023 0312 	bic.w	r3, r3, #18
 8004fce:	f043 0210 	orr.w	r2, r3, #16
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 8004fd6:	2301      	movs	r3, #1
 8004fd8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 8004fdc:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8004fe0:	4618      	mov	r0, r3
 8004fe2:	3768      	adds	r7, #104	; 0x68
 8004fe4:	46bd      	mov	sp, r7
 8004fe6:	bd80      	pop	{r7, pc}
 8004fe8:	fff0c007 	.word	0xfff0c007

08004fec <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8004fec:	b580      	push	{r7, lr}
 8004fee:	b086      	sub	sp, #24
 8004ff0:	af00      	add	r7, sp, #0
 8004ff2:	60f8      	str	r0, [r7, #12]
 8004ff4:	60b9      	str	r1, [r7, #8]
 8004ff6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004ff8:	2300      	movs	r3, #0
 8004ffa:	75fb      	strb	r3, [r7, #23]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	689b      	ldr	r3, [r3, #8]
 8005002:	f003 0304 	and.w	r3, r3, #4
 8005006:	2b00      	cmp	r3, #0
 8005008:	f040 80f7 	bne.w	80051fa <HAL_ADC_Start_DMA+0x20e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005012:	2b01      	cmp	r3, #1
 8005014:	d101      	bne.n	800501a <HAL_ADC_Start_DMA+0x2e>
 8005016:	2302      	movs	r3, #2
 8005018:	e0f2      	b.n	8005200 <HAL_ADC_Start_DMA+0x214>
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	2201      	movs	r2, #1
 800501e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Verification if multimode is disabled (for devices with several ADC)   */
    /* If multimode is enabled, dedicated function multimode conversion       */
    /* start DMA must be used.                                                */
    if(ADC_COMMON_CCR_MULTI(hadc) == RESET)
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800502a:	d004      	beq.n	8005036 <HAL_ADC_Start_DMA+0x4a>
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	4a75      	ldr	r2, [pc, #468]	; (8005208 <HAL_ADC_Start_DMA+0x21c>)
 8005032:	4293      	cmp	r3, r2
 8005034:	d109      	bne.n	800504a <HAL_ADC_Start_DMA+0x5e>
 8005036:	4b75      	ldr	r3, [pc, #468]	; (800520c <HAL_ADC_Start_DMA+0x220>)
 8005038:	689b      	ldr	r3, [r3, #8]
 800503a:	f003 031f 	and.w	r3, r3, #31
 800503e:	2b00      	cmp	r3, #0
 8005040:	bf0c      	ite	eq
 8005042:	2301      	moveq	r3, #1
 8005044:	2300      	movne	r3, #0
 8005046:	b2db      	uxtb	r3, r3
 8005048:	e008      	b.n	800505c <HAL_ADC_Start_DMA+0x70>
 800504a:	4b71      	ldr	r3, [pc, #452]	; (8005210 <HAL_ADC_Start_DMA+0x224>)
 800504c:	689b      	ldr	r3, [r3, #8]
 800504e:	f003 031f 	and.w	r3, r3, #31
 8005052:	2b00      	cmp	r3, #0
 8005054:	bf0c      	ite	eq
 8005056:	2301      	moveq	r3, #1
 8005058:	2300      	movne	r3, #0
 800505a:	b2db      	uxtb	r3, r3
 800505c:	2b00      	cmp	r3, #0
 800505e:	f000 80c5 	beq.w	80051ec <HAL_ADC_Start_DMA+0x200>
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8005062:	68f8      	ldr	r0, [r7, #12]
 8005064:	f000 fdf6 	bl	8005c54 <ADC_Enable>
 8005068:	4603      	mov	r3, r0
 800506a:	75fb      	strb	r3, [r7, #23]
      
      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 800506c:	7dfb      	ldrb	r3, [r7, #23]
 800506e:	2b00      	cmp	r3, #0
 8005070:	f040 80b7 	bne.w	80051e2 <HAL_ADC_Start_DMA+0x1f6>
      {
        /* Set ADC state                                                      */
        /* - Clear state bitfield related to regular group conversion results */
        /* - Set state bitfield related to regular operation                  */
        ADC_STATE_CLR_SET(hadc->State,
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005078:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800507c:	f023 0301 	bic.w	r3, r3, #1
 8005080:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_REG_BUSY);
        
        /* Set group injected state (from auto-injection) and multimode state */
        /* for all cases of multimode: independent mode, multimode ADC master */
        /* or multimode ADC slave (for devices with several ADCs):            */
        if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005090:	d004      	beq.n	800509c <HAL_ADC_Start_DMA+0xb0>
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	4a5c      	ldr	r2, [pc, #368]	; (8005208 <HAL_ADC_Start_DMA+0x21c>)
 8005098:	4293      	cmp	r3, r2
 800509a:	d106      	bne.n	80050aa <HAL_ADC_Start_DMA+0xbe>
 800509c:	4b5b      	ldr	r3, [pc, #364]	; (800520c <HAL_ADC_Start_DMA+0x220>)
 800509e:	689b      	ldr	r3, [r3, #8]
 80050a0:	f003 031f 	and.w	r3, r3, #31
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d010      	beq.n	80050ca <HAL_ADC_Start_DMA+0xde>
 80050a8:	e005      	b.n	80050b6 <HAL_ADC_Start_DMA+0xca>
 80050aa:	4b59      	ldr	r3, [pc, #356]	; (8005210 <HAL_ADC_Start_DMA+0x224>)
 80050ac:	689b      	ldr	r3, [r3, #8]
 80050ae:	f003 031f 	and.w	r3, r3, #31
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d009      	beq.n	80050ca <HAL_ADC_Start_DMA+0xde>
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80050be:	d004      	beq.n	80050ca <HAL_ADC_Start_DMA+0xde>
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	4a53      	ldr	r2, [pc, #332]	; (8005214 <HAL_ADC_Start_DMA+0x228>)
 80050c6:	4293      	cmp	r3, r2
 80050c8:	d115      	bne.n	80050f6 <HAL_ADC_Start_DMA+0x10a>
        {
          /* Set ADC state (ADC independent or master) */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050ce:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* If conversions on group regular are also triggering group injected,*/
          /* update ADC state.                                                  */
          if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	68db      	ldr	r3, [r3, #12]
 80050dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d036      	beq.n	8005152 <HAL_ADC_Start_DMA+0x166>
          {
            ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050e8:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80050ec:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	641a      	str	r2, [r3, #64]	; 0x40
          if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 80050f4:	e02d      	b.n	8005152 <HAL_ADC_Start_DMA+0x166>
          }
        }
        else
        {
          /* Set ADC state (ADC slave) */
          SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050fa:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* If conversions on group regular are also triggering group injected,*/
          /* update ADC state.                                                  */
          if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800510a:	d004      	beq.n	8005116 <HAL_ADC_Start_DMA+0x12a>
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	4a3d      	ldr	r2, [pc, #244]	; (8005208 <HAL_ADC_Start_DMA+0x21c>)
 8005112:	4293      	cmp	r3, r2
 8005114:	d10a      	bne.n	800512c <HAL_ADC_Start_DMA+0x140>
 8005116:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800511a:	68db      	ldr	r3, [r3, #12]
 800511c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005120:	2b00      	cmp	r3, #0
 8005122:	bf14      	ite	ne
 8005124:	2301      	movne	r3, #1
 8005126:	2300      	moveq	r3, #0
 8005128:	b2db      	uxtb	r3, r3
 800512a:	e008      	b.n	800513e <HAL_ADC_Start_DMA+0x152>
 800512c:	4b39      	ldr	r3, [pc, #228]	; (8005214 <HAL_ADC_Start_DMA+0x228>)
 800512e:	68db      	ldr	r3, [r3, #12]
 8005130:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005134:	2b00      	cmp	r3, #0
 8005136:	bf14      	ite	ne
 8005138:	2301      	movne	r3, #1
 800513a:	2300      	moveq	r3, #0
 800513c:	b2db      	uxtb	r3, r3
 800513e:	2b00      	cmp	r3, #0
 8005140:	d007      	beq.n	8005152 <HAL_ADC_Start_DMA+0x166>
          {
            ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005146:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800514a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	641a      	str	r2, [r3, #64]	; 0x40
          }
        }
        
        /* State machine update: Check if an injected conversion is ongoing */
        if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005156:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800515a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800515e:	d106      	bne.n	800516e <HAL_ADC_Start_DMA+0x182>
        {
          /* Reset ADC error code fields related to conversions on group regular*/
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005164:	f023 0206 	bic.w	r2, r3, #6
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	645a      	str	r2, [r3, #68]	; 0x44
 800516c:	e002      	b.n	8005174 <HAL_ADC_Start_DMA+0x188>
        }
        else
        {
          /* Reset ADC all error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	2200      	movs	r2, #0
 8005172:	645a      	str	r2, [r3, #68]	; 0x44
        }
        
        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	2200      	movs	r2, #0
 8005178:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        
        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005180:	4a25      	ldr	r2, [pc, #148]	; (8005218 <HAL_ADC_Start_DMA+0x22c>)
 8005182:	629a      	str	r2, [r3, #40]	; 0x28

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005188:	4a24      	ldr	r2, [pc, #144]	; (800521c <HAL_ADC_Start_DMA+0x230>)
 800518a:	62da      	str	r2, [r3, #44]	; 0x2c
        
        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005190:	4a23      	ldr	r2, [pc, #140]	; (8005220 <HAL_ADC_Start_DMA+0x234>)
 8005192:	631a      	str	r2, [r3, #48]	; 0x30
        /* start (in case of SW start):                                       */
        
        /* Clear regular group conversion flag and overrun flag */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	221c      	movs	r2, #28
 800519a:	601a      	str	r2, [r3, #0]
        
        /* Enable ADC overrun interrupt */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	685a      	ldr	r2, [r3, #4]
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	f042 0210 	orr.w	r2, r2, #16
 80051aa:	605a      	str	r2, [r3, #4]
        
        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	68da      	ldr	r2, [r3, #12]
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	f042 0201 	orr.w	r2, r2, #1
 80051ba:	60da      	str	r2, [r3, #12]
        
        /* Start the DMA channel */
        HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	3340      	adds	r3, #64	; 0x40
 80051c6:	4619      	mov	r1, r3
 80051c8:	68ba      	ldr	r2, [r7, #8]
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	f001 f834 	bl	8006238 <HAL_DMA_Start_IT>
                 
        /* Enable conversion of regular group.                                */
        /* If software start has been selected, conversion starts immediately.*/
        /* If external trigger has been selected, conversion will start at    */
        /* next trigger event.                                                */
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	689a      	ldr	r2, [r3, #8]
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	f042 0204 	orr.w	r2, r2, #4
 80051de:	609a      	str	r2, [r3, #8]
 80051e0:	e00d      	b.n	80051fe <HAL_ADC_Start_DMA+0x212>
        
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	2200      	movs	r2, #0
 80051e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80051ea:	e008      	b.n	80051fe <HAL_ADC_Start_DMA+0x212>
      }
    }
    else
    {
      tmp_hal_status = HAL_ERROR;
 80051ec:	2301      	movs	r3, #1
 80051ee:	75fb      	strb	r3, [r7, #23]
      
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	2200      	movs	r2, #0
 80051f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80051f8:	e001      	b.n	80051fe <HAL_ADC_Start_DMA+0x212>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80051fa:	2302      	movs	r3, #2
 80051fc:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80051fe:	7dfb      	ldrb	r3, [r7, #23]
}
 8005200:	4618      	mov	r0, r3
 8005202:	3718      	adds	r7, #24
 8005204:	46bd      	mov	sp, r7
 8005206:	bd80      	pop	{r7, pc}
 8005208:	50000100 	.word	0x50000100
 800520c:	50000300 	.word	0x50000300
 8005210:	50000700 	.word	0x50000700
 8005214:	50000400 	.word	0x50000400
 8005218:	08005b89 	.word	0x08005b89
 800521c:	08005c03 	.word	0x08005c03
 8005220:	08005c1f 	.word	0x08005c1f

08005224 <HAL_ADC_Stop_DMA>:
  *         dedicated MultimodeStop function.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef* hadc)
{  
 8005224:	b580      	push	{r7, lr}
 8005226:	b084      	sub	sp, #16
 8005228:	af00      	add	r7, sp, #0
 800522a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800522c:	2300      	movs	r3, #0
 800522e:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005236:	2b01      	cmp	r3, #1
 8005238:	d101      	bne.n	800523e <HAL_ADC_Stop_DMA+0x1a>
 800523a:	2302      	movs	r3, #2
 800523c:	e050      	b.n	80052e0 <HAL_ADC_Stop_DMA+0xbc>
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	2201      	movs	r2, #1
 8005242:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* 1. Stop potential conversion on going, on regular and injected groups */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 8005246:	216c      	movs	r1, #108	; 0x6c
 8005248:	6878      	ldr	r0, [r7, #4]
 800524a:	f000 fdcd 	bl	8005de8 <ADC_ConversionStop>
 800524e:	4603      	mov	r3, r0
 8005250:	73fb      	strb	r3, [r7, #15]
  
  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8005252:	7bfb      	ldrb	r3, [r7, #15]
 8005254:	2b00      	cmp	r3, #0
 8005256:	d13e      	bne.n	80052d6 <HAL_ADC_Stop_DMA+0xb2>
  {
    /* Disable ADC DMA (ADC DMA configuration ADC_CFGR_DMACFG is kept) */
    CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	68da      	ldr	r2, [r3, #12]
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	f022 0201 	bic.w	r2, r2, #1
 8005266:	60da      	str	r2, [r3, #12]
    
    /* Disable the DMA channel (in case of DMA in circular mode or stop while */
    /* while DMA transfer is on going)                                        */
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800526c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8005270:	2b02      	cmp	r3, #2
 8005272:	d10f      	bne.n	8005294 <HAL_ADC_Stop_DMA+0x70>
    {
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);   
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005278:	4618      	mov	r0, r3
 800527a:	f001 f83c 	bl	80062f6 <HAL_DMA_Abort>
 800527e:	4603      	mov	r3, r0
 8005280:	73fb      	strb	r3, [r7, #15]
      
      /* Check if DMA channel effectively disabled */
      if (tmp_hal_status != HAL_OK)
 8005282:	7bfb      	ldrb	r3, [r7, #15]
 8005284:	2b00      	cmp	r3, #0
 8005286:	d005      	beq.n	8005294 <HAL_ADC_Stop_DMA+0x70>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);     
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800528c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }

    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	685a      	ldr	r2, [r3, #4]
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	f022 0210 	bic.w	r2, r2, #16
 80052a2:	605a      	str	r2, [r3, #4]
    
    /* 2. Disable the ADC peripheral */
    /* Update "tmp_hal_status" only if DMA channel disabling passed,          */
    /* to retain a potential failing status.                                  */
    if (tmp_hal_status == HAL_OK)
 80052a4:	7bfb      	ldrb	r3, [r7, #15]
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d105      	bne.n	80052b6 <HAL_ADC_Stop_DMA+0x92>
    {
      tmp_hal_status = ADC_Disable(hadc);
 80052aa:	6878      	ldr	r0, [r7, #4]
 80052ac:	f000 fd36 	bl	8005d1c <ADC_Disable>
 80052b0:	4603      	mov	r3, r0
 80052b2:	73fb      	strb	r3, [r7, #15]
 80052b4:	e002      	b.n	80052bc <HAL_ADC_Stop_DMA+0x98>
    }
    else
    {
      ADC_Disable(hadc);
 80052b6:	6878      	ldr	r0, [r7, #4]
 80052b8:	f000 fd30 	bl	8005d1c <ADC_Disable>
    }
    
    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 80052bc:	7bfb      	ldrb	r3, [r7, #15]
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d109      	bne.n	80052d6 <HAL_ADC_Stop_DMA+0xb2>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052c6:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80052ca:	f023 0301 	bic.w	r3, r3, #1
 80052ce:	f043 0201 	orr.w	r2, r3, #1
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	2200      	movs	r2, #0
 80052da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 80052de:	7bfb      	ldrb	r3, [r7, #15]
}
 80052e0:	4618      	mov	r0, r3
 80052e2:	3710      	adds	r7, #16
 80052e4:	46bd      	mov	sp, r7
 80052e6:	bd80      	pop	{r7, pc}

080052e8 <HAL_ADCEx_Calibration_Start>:
  *            @arg ADC_SINGLE_ENDED: Channel in mode input single ended
  *            @arg ADC_DIFFERENTIAL_ENDED: Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc, uint32_t SingleDiff)
{
 80052e8:	b580      	push	{r7, lr}
 80052ea:	b084      	sub	sp, #16
 80052ec:	af00      	add	r7, sp, #0
 80052ee:	6078      	str	r0, [r7, #4]
 80052f0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80052f2:	2300      	movs	r3, #0
 80052f4:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80052fc:	2b01      	cmp	r3, #1
 80052fe:	d101      	bne.n	8005304 <HAL_ADCEx_Calibration_Start+0x1c>
 8005300:	2302      	movs	r3, #2
 8005302:	e05f      	b.n	80053c4 <HAL_ADCEx_Calibration_Start+0xdc>
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	2201      	movs	r2, #1
 8005308:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
   
  /* Calibration prerequisite: ADC must be disabled. */
   
  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 800530c:	6878      	ldr	r0, [r7, #4]
 800530e:	f000 fd05 	bl	8005d1c <ADC_Disable>
 8005312:	4603      	mov	r3, r0
 8005314:	73fb      	strb	r3, [r7, #15]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8005316:	7bfb      	ldrb	r3, [r7, #15]
 8005318:	2b00      	cmp	r3, #0
 800531a:	d14e      	bne.n	80053ba <HAL_ADCEx_Calibration_Start+0xd2>
  {
    /* Change ADC state */
    hadc->State = HAL_ADC_STATE_READY;
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	2201      	movs	r2, #1
 8005320:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Select calibration mode single ended or differential ended */
    hadc->Instance->CR &= (~ADC_CR_ADCALDIF);
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	689a      	ldr	r2, [r3, #8]
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	f022 4280 	bic.w	r2, r2, #1073741824	; 0x40000000
 8005330:	609a      	str	r2, [r3, #8]
    if (SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8005332:	683b      	ldr	r3, [r7, #0]
 8005334:	2b01      	cmp	r3, #1
 8005336:	d107      	bne.n	8005348 <HAL_ADCEx_Calibration_Start+0x60>
    {
      hadc->Instance->CR |= ADC_CR_ADCALDIF;
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	689a      	ldr	r2, [r3, #8]
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8005346:	609a      	str	r2, [r3, #8]
    }

    /* Start ADC calibration */
    hadc->Instance->CR |= ADC_CR_ADCAL;
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	689a      	ldr	r2, [r3, #8]
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8005356:	609a      	str	r2, [r3, #8]

    tickstart = HAL_GetTick();  
 8005358:	f7ff fc1a 	bl	8004b90 <HAL_GetTick>
 800535c:	60b8      	str	r0, [r7, #8]

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 800535e:	e01c      	b.n	800539a <HAL_ADCEx_Calibration_Start+0xb2>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8005360:	f7ff fc16 	bl	8004b90 <HAL_GetTick>
 8005364:	4602      	mov	r2, r0
 8005366:	68bb      	ldr	r3, [r7, #8]
 8005368:	1ad3      	subs	r3, r2, r3
 800536a:	2b0a      	cmp	r3, #10
 800536c:	d915      	bls.n	800539a <HAL_ADCEx_Calibration_Start+0xb2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	689b      	ldr	r3, [r3, #8]
 8005374:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005378:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800537c:	d10d      	bne.n	800539a <HAL_ADCEx_Calibration_Start+0xb2>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005382:	f023 0312 	bic.w	r3, r3, #18
 8005386:	f043 0210 	orr.w	r2, r3, #16
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	641a      	str	r2, [r3, #64]	; 0x40
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	2200      	movs	r2, #0
 8005392:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8005396:	2301      	movs	r3, #1
 8005398:	e014      	b.n	80053c4 <HAL_ADCEx_Calibration_Start+0xdc>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	689b      	ldr	r3, [r3, #8]
 80053a0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80053a4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80053a8:	d0da      	beq.n	8005360 <HAL_ADCEx_Calibration_Start+0x78>
        }
      }
    }
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053ae:	f023 0303 	bic.w	r3, r3, #3
 80053b2:	f043 0201 	orr.w	r2, r3, #1
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	2200      	movs	r2, #0
 80053be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 80053c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80053c4:	4618      	mov	r0, r3
 80053c6:	3710      	adds	r7, #16
 80053c8:	46bd      	mov	sp, r7
 80053ca:	bd80      	pop	{r7, pc}

080053cc <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80053cc:	b480      	push	{r7}
 80053ce:	b09b      	sub	sp, #108	; 0x6c
 80053d0:	af00      	add	r7, sp, #0
 80053d2:	6078      	str	r0, [r7, #4]
 80053d4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80053d6:	2300      	movs	r3, #0
 80053d8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 80053dc:	2300      	movs	r3, #0
 80053de:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80053e6:	2b01      	cmp	r3, #1
 80053e8:	d101      	bne.n	80053ee <HAL_ADC_ConfigChannel+0x22>
 80053ea:	2302      	movs	r3, #2
 80053ec:	e2ca      	b.n	8005984 <HAL_ADC_ConfigChannel+0x5b8>
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	2201      	movs	r2, #1
 80053f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	689b      	ldr	r3, [r3, #8]
 80053fc:	f003 0304 	and.w	r3, r3, #4
 8005400:	2b00      	cmp	r3, #0
 8005402:	f040 82ae 	bne.w	8005962 <HAL_ADC_ConfigChannel+0x596>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 8005406:	683b      	ldr	r3, [r7, #0]
 8005408:	685b      	ldr	r3, [r3, #4]
 800540a:	2b04      	cmp	r3, #4
 800540c:	d81c      	bhi.n	8005448 <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8005414:	683b      	ldr	r3, [r7, #0]
 8005416:	685a      	ldr	r2, [r3, #4]
 8005418:	4613      	mov	r3, r2
 800541a:	005b      	lsls	r3, r3, #1
 800541c:	4413      	add	r3, r2
 800541e:	005b      	lsls	r3, r3, #1
 8005420:	461a      	mov	r2, r3
 8005422:	231f      	movs	r3, #31
 8005424:	4093      	lsls	r3, r2
 8005426:	43db      	mvns	r3, r3
 8005428:	4019      	ands	r1, r3
 800542a:	683b      	ldr	r3, [r7, #0]
 800542c:	6818      	ldr	r0, [r3, #0]
 800542e:	683b      	ldr	r3, [r7, #0]
 8005430:	685a      	ldr	r2, [r3, #4]
 8005432:	4613      	mov	r3, r2
 8005434:	005b      	lsls	r3, r3, #1
 8005436:	4413      	add	r3, r2
 8005438:	005b      	lsls	r3, r3, #1
 800543a:	fa00 f203 	lsl.w	r2, r0, r3
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	430a      	orrs	r2, r1
 8005444:	631a      	str	r2, [r3, #48]	; 0x30
 8005446:	e063      	b.n	8005510 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 8005448:	683b      	ldr	r3, [r7, #0]
 800544a:	685b      	ldr	r3, [r3, #4]
 800544c:	2b09      	cmp	r3, #9
 800544e:	d81e      	bhi.n	800548e <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8005456:	683b      	ldr	r3, [r7, #0]
 8005458:	685a      	ldr	r2, [r3, #4]
 800545a:	4613      	mov	r3, r2
 800545c:	005b      	lsls	r3, r3, #1
 800545e:	4413      	add	r3, r2
 8005460:	005b      	lsls	r3, r3, #1
 8005462:	3b1e      	subs	r3, #30
 8005464:	221f      	movs	r2, #31
 8005466:	fa02 f303 	lsl.w	r3, r2, r3
 800546a:	43db      	mvns	r3, r3
 800546c:	4019      	ands	r1, r3
 800546e:	683b      	ldr	r3, [r7, #0]
 8005470:	6818      	ldr	r0, [r3, #0]
 8005472:	683b      	ldr	r3, [r7, #0]
 8005474:	685a      	ldr	r2, [r3, #4]
 8005476:	4613      	mov	r3, r2
 8005478:	005b      	lsls	r3, r3, #1
 800547a:	4413      	add	r3, r2
 800547c:	005b      	lsls	r3, r3, #1
 800547e:	3b1e      	subs	r3, #30
 8005480:	fa00 f203 	lsl.w	r2, r0, r3
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	430a      	orrs	r2, r1
 800548a:	635a      	str	r2, [r3, #52]	; 0x34
 800548c:	e040      	b.n	8005510 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 800548e:	683b      	ldr	r3, [r7, #0]
 8005490:	685b      	ldr	r3, [r3, #4]
 8005492:	2b0e      	cmp	r3, #14
 8005494:	d81e      	bhi.n	80054d4 <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	6b99      	ldr	r1, [r3, #56]	; 0x38
 800549c:	683b      	ldr	r3, [r7, #0]
 800549e:	685a      	ldr	r2, [r3, #4]
 80054a0:	4613      	mov	r3, r2
 80054a2:	005b      	lsls	r3, r3, #1
 80054a4:	4413      	add	r3, r2
 80054a6:	005b      	lsls	r3, r3, #1
 80054a8:	3b3c      	subs	r3, #60	; 0x3c
 80054aa:	221f      	movs	r2, #31
 80054ac:	fa02 f303 	lsl.w	r3, r2, r3
 80054b0:	43db      	mvns	r3, r3
 80054b2:	4019      	ands	r1, r3
 80054b4:	683b      	ldr	r3, [r7, #0]
 80054b6:	6818      	ldr	r0, [r3, #0]
 80054b8:	683b      	ldr	r3, [r7, #0]
 80054ba:	685a      	ldr	r2, [r3, #4]
 80054bc:	4613      	mov	r3, r2
 80054be:	005b      	lsls	r3, r3, #1
 80054c0:	4413      	add	r3, r2
 80054c2:	005b      	lsls	r3, r3, #1
 80054c4:	3b3c      	subs	r3, #60	; 0x3c
 80054c6:	fa00 f203 	lsl.w	r2, r0, r3
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	430a      	orrs	r2, r1
 80054d0:	639a      	str	r2, [r3, #56]	; 0x38
 80054d2:	e01d      	b.n	8005510 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 80054da:	683b      	ldr	r3, [r7, #0]
 80054dc:	685a      	ldr	r2, [r3, #4]
 80054de:	4613      	mov	r3, r2
 80054e0:	005b      	lsls	r3, r3, #1
 80054e2:	4413      	add	r3, r2
 80054e4:	005b      	lsls	r3, r3, #1
 80054e6:	3b5a      	subs	r3, #90	; 0x5a
 80054e8:	221f      	movs	r2, #31
 80054ea:	fa02 f303 	lsl.w	r3, r2, r3
 80054ee:	43db      	mvns	r3, r3
 80054f0:	4019      	ands	r1, r3
 80054f2:	683b      	ldr	r3, [r7, #0]
 80054f4:	6818      	ldr	r0, [r3, #0]
 80054f6:	683b      	ldr	r3, [r7, #0]
 80054f8:	685a      	ldr	r2, [r3, #4]
 80054fa:	4613      	mov	r3, r2
 80054fc:	005b      	lsls	r3, r3, #1
 80054fe:	4413      	add	r3, r2
 8005500:	005b      	lsls	r3, r3, #1
 8005502:	3b5a      	subs	r3, #90	; 0x5a
 8005504:	fa00 f203 	lsl.w	r2, r0, r3
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	430a      	orrs	r2, r1
 800550e:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	689b      	ldr	r3, [r3, #8]
 8005516:	f003 030c 	and.w	r3, r3, #12
 800551a:	2b00      	cmp	r3, #0
 800551c:	f040 80e5 	bne.w	80056ea <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 8005520:	683b      	ldr	r3, [r7, #0]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	2b09      	cmp	r3, #9
 8005526:	d91c      	bls.n	8005562 <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	6999      	ldr	r1, [r3, #24]
 800552e:	683b      	ldr	r3, [r7, #0]
 8005530:	681a      	ldr	r2, [r3, #0]
 8005532:	4613      	mov	r3, r2
 8005534:	005b      	lsls	r3, r3, #1
 8005536:	4413      	add	r3, r2
 8005538:	3b1e      	subs	r3, #30
 800553a:	2207      	movs	r2, #7
 800553c:	fa02 f303 	lsl.w	r3, r2, r3
 8005540:	43db      	mvns	r3, r3
 8005542:	4019      	ands	r1, r3
 8005544:	683b      	ldr	r3, [r7, #0]
 8005546:	6898      	ldr	r0, [r3, #8]
 8005548:	683b      	ldr	r3, [r7, #0]
 800554a:	681a      	ldr	r2, [r3, #0]
 800554c:	4613      	mov	r3, r2
 800554e:	005b      	lsls	r3, r3, #1
 8005550:	4413      	add	r3, r2
 8005552:	3b1e      	subs	r3, #30
 8005554:	fa00 f203 	lsl.w	r2, r0, r3
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	430a      	orrs	r2, r1
 800555e:	619a      	str	r2, [r3, #24]
 8005560:	e019      	b.n	8005596 <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	6959      	ldr	r1, [r3, #20]
 8005568:	683b      	ldr	r3, [r7, #0]
 800556a:	681a      	ldr	r2, [r3, #0]
 800556c:	4613      	mov	r3, r2
 800556e:	005b      	lsls	r3, r3, #1
 8005570:	4413      	add	r3, r2
 8005572:	2207      	movs	r2, #7
 8005574:	fa02 f303 	lsl.w	r3, r2, r3
 8005578:	43db      	mvns	r3, r3
 800557a:	4019      	ands	r1, r3
 800557c:	683b      	ldr	r3, [r7, #0]
 800557e:	6898      	ldr	r0, [r3, #8]
 8005580:	683b      	ldr	r3, [r7, #0]
 8005582:	681a      	ldr	r2, [r3, #0]
 8005584:	4613      	mov	r3, r2
 8005586:	005b      	lsls	r3, r3, #1
 8005588:	4413      	add	r3, r2
 800558a:	fa00 f203 	lsl.w	r2, r0, r3
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	430a      	orrs	r2, r1
 8005594:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 8005596:	683b      	ldr	r3, [r7, #0]
 8005598:	695a      	ldr	r2, [r3, #20]
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	68db      	ldr	r3, [r3, #12]
 80055a0:	08db      	lsrs	r3, r3, #3
 80055a2:	f003 0303 	and.w	r3, r3, #3
 80055a6:	005b      	lsls	r3, r3, #1
 80055a8:	fa02 f303 	lsl.w	r3, r2, r3
 80055ac:	663b      	str	r3, [r7, #96]	; 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 80055ae:	683b      	ldr	r3, [r7, #0]
 80055b0:	691b      	ldr	r3, [r3, #16]
 80055b2:	3b01      	subs	r3, #1
 80055b4:	2b03      	cmp	r3, #3
 80055b6:	d84f      	bhi.n	8005658 <HAL_ADC_ConfigChannel+0x28c>
 80055b8:	a201      	add	r2, pc, #4	; (adr r2, 80055c0 <HAL_ADC_ConfigChannel+0x1f4>)
 80055ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055be:	bf00      	nop
 80055c0:	080055d1 	.word	0x080055d1
 80055c4:	080055f3 	.word	0x080055f3
 80055c8:	08005615 	.word	0x08005615
 80055cc:	08005637 	.word	0x08005637
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80055d6:	4b9a      	ldr	r3, [pc, #616]	; (8005840 <HAL_ADC_ConfigChannel+0x474>)
 80055d8:	4013      	ands	r3, r2
 80055da:	683a      	ldr	r2, [r7, #0]
 80055dc:	6812      	ldr	r2, [r2, #0]
 80055de:	0691      	lsls	r1, r2, #26
 80055e0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80055e2:	430a      	orrs	r2, r1
 80055e4:	431a      	orrs	r2, r3
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80055ee:	661a      	str	r2, [r3, #96]	; 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80055f0:	e07e      	b.n	80056f0 <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80055f8:	4b91      	ldr	r3, [pc, #580]	; (8005840 <HAL_ADC_ConfigChannel+0x474>)
 80055fa:	4013      	ands	r3, r2
 80055fc:	683a      	ldr	r2, [r7, #0]
 80055fe:	6812      	ldr	r2, [r2, #0]
 8005600:	0691      	lsls	r1, r2, #26
 8005602:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005604:	430a      	orrs	r2, r1
 8005606:	431a      	orrs	r2, r3
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8005610:	665a      	str	r2, [r3, #100]	; 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8005612:	e06d      	b.n	80056f0 <HAL_ADC_ConfigChannel+0x324>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800561a:	4b89      	ldr	r3, [pc, #548]	; (8005840 <HAL_ADC_ConfigChannel+0x474>)
 800561c:	4013      	ands	r3, r2
 800561e:	683a      	ldr	r2, [r7, #0]
 8005620:	6812      	ldr	r2, [r2, #0]
 8005622:	0691      	lsls	r1, r2, #26
 8005624:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005626:	430a      	orrs	r2, r1
 8005628:	431a      	orrs	r2, r3
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8005632:	669a      	str	r2, [r3, #104]	; 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8005634:	e05c      	b.n	80056f0 <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800563c:	4b80      	ldr	r3, [pc, #512]	; (8005840 <HAL_ADC_ConfigChannel+0x474>)
 800563e:	4013      	ands	r3, r2
 8005640:	683a      	ldr	r2, [r7, #0]
 8005642:	6812      	ldr	r2, [r2, #0]
 8005644:	0691      	lsls	r1, r2, #26
 8005646:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005648:	430a      	orrs	r2, r1
 800564a:	431a      	orrs	r2, r3
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8005654:	66da      	str	r2, [r3, #108]	; 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8005656:	e04b      	b.n	80056f0 <HAL_ADC_ConfigChannel+0x324>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800565e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8005662:	683b      	ldr	r3, [r7, #0]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	069b      	lsls	r3, r3, #26
 8005668:	429a      	cmp	r2, r3
 800566a:	d107      	bne.n	800567c <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800567a:	661a      	str	r2, [r3, #96]	; 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005682:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8005686:	683b      	ldr	r3, [r7, #0]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	069b      	lsls	r3, r3, #26
 800568c:	429a      	cmp	r2, r3
 800568e:	d107      	bne.n	80056a0 <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800569e:	665a      	str	r2, [r3, #100]	; 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80056a6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80056aa:	683b      	ldr	r3, [r7, #0]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	069b      	lsls	r3, r3, #26
 80056b0:	429a      	cmp	r2, r3
 80056b2:	d107      	bne.n	80056c4 <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80056c2:	669a      	str	r2, [r3, #104]	; 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80056ca:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80056ce:	683b      	ldr	r3, [r7, #0]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	069b      	lsls	r3, r3, #26
 80056d4:	429a      	cmp	r2, r3
 80056d6:	d10a      	bne.n	80056ee <HAL_ADC_ConfigChannel+0x322>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80056e6:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      break;
 80056e8:	e001      	b.n	80056ee <HAL_ADC_ConfigChannel+0x322>
    }

  }
 80056ea:	bf00      	nop
 80056ec:	e000      	b.n	80056f0 <HAL_ADC_ConfigChannel+0x324>
      break;
 80056ee:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	689b      	ldr	r3, [r3, #8]
 80056f6:	f003 0303 	and.w	r3, r3, #3
 80056fa:	2b01      	cmp	r3, #1
 80056fc:	d108      	bne.n	8005710 <HAL_ADC_ConfigChannel+0x344>
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	f003 0301 	and.w	r3, r3, #1
 8005708:	2b01      	cmp	r3, #1
 800570a:	d101      	bne.n	8005710 <HAL_ADC_ConfigChannel+0x344>
 800570c:	2301      	movs	r3, #1
 800570e:	e000      	b.n	8005712 <HAL_ADC_ConfigChannel+0x346>
 8005710:	2300      	movs	r3, #0
 8005712:	2b00      	cmp	r3, #0
 8005714:	f040 8130 	bne.w	8005978 <HAL_ADC_ConfigChannel+0x5ac>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8005718:	683b      	ldr	r3, [r7, #0]
 800571a:	68db      	ldr	r3, [r3, #12]
 800571c:	2b01      	cmp	r3, #1
 800571e:	d00f      	beq.n	8005740 <HAL_ADC_ConfigChannel+0x374>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8005728:	683b      	ldr	r3, [r7, #0]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	2201      	movs	r2, #1
 800572e:	fa02 f303 	lsl.w	r3, r2, r3
 8005732:	43da      	mvns	r2, r3
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	400a      	ands	r2, r1
 800573a:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 800573e:	e049      	b.n	80057d4 <HAL_ADC_ConfigChannel+0x408>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8005748:	683b      	ldr	r3, [r7, #0]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	2201      	movs	r2, #1
 800574e:	409a      	lsls	r2, r3
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	430a      	orrs	r2, r1
 8005756:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 800575a:	683b      	ldr	r3, [r7, #0]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	2b09      	cmp	r3, #9
 8005760:	d91c      	bls.n	800579c <HAL_ADC_ConfigChannel+0x3d0>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	6999      	ldr	r1, [r3, #24]
 8005768:	683b      	ldr	r3, [r7, #0]
 800576a:	681a      	ldr	r2, [r3, #0]
 800576c:	4613      	mov	r3, r2
 800576e:	005b      	lsls	r3, r3, #1
 8005770:	4413      	add	r3, r2
 8005772:	3b1b      	subs	r3, #27
 8005774:	2207      	movs	r2, #7
 8005776:	fa02 f303 	lsl.w	r3, r2, r3
 800577a:	43db      	mvns	r3, r3
 800577c:	4019      	ands	r1, r3
 800577e:	683b      	ldr	r3, [r7, #0]
 8005780:	6898      	ldr	r0, [r3, #8]
 8005782:	683b      	ldr	r3, [r7, #0]
 8005784:	681a      	ldr	r2, [r3, #0]
 8005786:	4613      	mov	r3, r2
 8005788:	005b      	lsls	r3, r3, #1
 800578a:	4413      	add	r3, r2
 800578c:	3b1b      	subs	r3, #27
 800578e:	fa00 f203 	lsl.w	r2, r0, r3
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	430a      	orrs	r2, r1
 8005798:	619a      	str	r2, [r3, #24]
 800579a:	e01b      	b.n	80057d4 <HAL_ADC_ConfigChannel+0x408>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	6959      	ldr	r1, [r3, #20]
 80057a2:	683b      	ldr	r3, [r7, #0]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	1c5a      	adds	r2, r3, #1
 80057a8:	4613      	mov	r3, r2
 80057aa:	005b      	lsls	r3, r3, #1
 80057ac:	4413      	add	r3, r2
 80057ae:	2207      	movs	r2, #7
 80057b0:	fa02 f303 	lsl.w	r3, r2, r3
 80057b4:	43db      	mvns	r3, r3
 80057b6:	4019      	ands	r1, r3
 80057b8:	683b      	ldr	r3, [r7, #0]
 80057ba:	6898      	ldr	r0, [r3, #8]
 80057bc:	683b      	ldr	r3, [r7, #0]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	1c5a      	adds	r2, r3, #1
 80057c2:	4613      	mov	r3, r2
 80057c4:	005b      	lsls	r3, r3, #1
 80057c6:	4413      	add	r3, r2
 80057c8:	fa00 f203 	lsl.w	r2, r0, r3
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	430a      	orrs	r2, r1
 80057d2:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80057dc:	d004      	beq.n	80057e8 <HAL_ADC_ConfigChannel+0x41c>
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	4a18      	ldr	r2, [pc, #96]	; (8005844 <HAL_ADC_ConfigChannel+0x478>)
 80057e4:	4293      	cmp	r3, r2
 80057e6:	d101      	bne.n	80057ec <HAL_ADC_ConfigChannel+0x420>
 80057e8:	4b17      	ldr	r3, [pc, #92]	; (8005848 <HAL_ADC_ConfigChannel+0x47c>)
 80057ea:	e000      	b.n	80057ee <HAL_ADC_ConfigChannel+0x422>
 80057ec:	4b17      	ldr	r3, [pc, #92]	; (800584c <HAL_ADC_ConfigChannel+0x480>)
 80057ee:	65fb      	str	r3, [r7, #92]	; 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80057f0:	683b      	ldr	r3, [r7, #0]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	2b10      	cmp	r3, #16
 80057f6:	d105      	bne.n	8005804 <HAL_ADC_ConfigChannel+0x438>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 80057f8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80057fa:	689b      	ldr	r3, [r3, #8]
 80057fc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8005800:	2b00      	cmp	r3, #0
 8005802:	d015      	beq.n	8005830 <HAL_ADC_ConfigChannel+0x464>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8005804:	683b      	ldr	r3, [r7, #0]
 8005806:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8005808:	2b11      	cmp	r3, #17
 800580a:	d105      	bne.n	8005818 <HAL_ADC_ConfigChannel+0x44c>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 800580c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800580e:	689b      	ldr	r3, [r3, #8]
 8005810:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8005814:	2b00      	cmp	r3, #0
 8005816:	d00b      	beq.n	8005830 <HAL_ADC_ConfigChannel+0x464>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8005818:	683b      	ldr	r3, [r7, #0]
 800581a:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 800581c:	2b12      	cmp	r3, #18
 800581e:	f040 80ab 	bne.w	8005978 <HAL_ADC_ConfigChannel+0x5ac>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 8005822:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005824:	689b      	ldr	r3, [r3, #8]
 8005826:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 800582a:	2b00      	cmp	r3, #0
 800582c:	f040 80a4 	bne.w	8005978 <HAL_ADC_ConfigChannel+0x5ac>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005838:	d10a      	bne.n	8005850 <HAL_ADC_ConfigChannel+0x484>
 800583a:	4b02      	ldr	r3, [pc, #8]	; (8005844 <HAL_ADC_ConfigChannel+0x478>)
 800583c:	60fb      	str	r3, [r7, #12]
 800583e:	e022      	b.n	8005886 <HAL_ADC_ConfigChannel+0x4ba>
 8005840:	83fff000 	.word	0x83fff000
 8005844:	50000100 	.word	0x50000100
 8005848:	50000300 	.word	0x50000300
 800584c:	50000700 	.word	0x50000700
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	4a4e      	ldr	r2, [pc, #312]	; (8005990 <HAL_ADC_ConfigChannel+0x5c4>)
 8005856:	4293      	cmp	r3, r2
 8005858:	d103      	bne.n	8005862 <HAL_ADC_ConfigChannel+0x496>
 800585a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800585e:	60fb      	str	r3, [r7, #12]
 8005860:	e011      	b.n	8005886 <HAL_ADC_ConfigChannel+0x4ba>
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	4a4b      	ldr	r2, [pc, #300]	; (8005994 <HAL_ADC_ConfigChannel+0x5c8>)
 8005868:	4293      	cmp	r3, r2
 800586a:	d102      	bne.n	8005872 <HAL_ADC_ConfigChannel+0x4a6>
 800586c:	4b4a      	ldr	r3, [pc, #296]	; (8005998 <HAL_ADC_ConfigChannel+0x5cc>)
 800586e:	60fb      	str	r3, [r7, #12]
 8005870:	e009      	b.n	8005886 <HAL_ADC_ConfigChannel+0x4ba>
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	4a48      	ldr	r2, [pc, #288]	; (8005998 <HAL_ADC_ConfigChannel+0x5cc>)
 8005878:	4293      	cmp	r3, r2
 800587a:	d102      	bne.n	8005882 <HAL_ADC_ConfigChannel+0x4b6>
 800587c:	4b45      	ldr	r3, [pc, #276]	; (8005994 <HAL_ADC_ConfigChannel+0x5c8>)
 800587e:	60fb      	str	r3, [r7, #12]
 8005880:	e001      	b.n	8005886 <HAL_ADC_ConfigChannel+0x4ba>
 8005882:	2300      	movs	r3, #0
 8005884:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	689b      	ldr	r3, [r3, #8]
 800588c:	f003 0303 	and.w	r3, r3, #3
 8005890:	2b01      	cmp	r3, #1
 8005892:	d108      	bne.n	80058a6 <HAL_ADC_ConfigChannel+0x4da>
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	f003 0301 	and.w	r3, r3, #1
 800589e:	2b01      	cmp	r3, #1
 80058a0:	d101      	bne.n	80058a6 <HAL_ADC_ConfigChannel+0x4da>
 80058a2:	2301      	movs	r3, #1
 80058a4:	e000      	b.n	80058a8 <HAL_ADC_ConfigChannel+0x4dc>
 80058a6:	2300      	movs	r3, #0
 80058a8:	2b00      	cmp	r3, #0
 80058aa:	d150      	bne.n	800594e <HAL_ADC_ConfigChannel+0x582>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80058ac:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d010      	beq.n	80058d4 <HAL_ADC_ConfigChannel+0x508>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	689b      	ldr	r3, [r3, #8]
 80058b6:	f003 0303 	and.w	r3, r3, #3
 80058ba:	2b01      	cmp	r3, #1
 80058bc:	d107      	bne.n	80058ce <HAL_ADC_ConfigChannel+0x502>
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	f003 0301 	and.w	r3, r3, #1
 80058c6:	2b01      	cmp	r3, #1
 80058c8:	d101      	bne.n	80058ce <HAL_ADC_ConfigChannel+0x502>
 80058ca:	2301      	movs	r3, #1
 80058cc:	e000      	b.n	80058d0 <HAL_ADC_ConfigChannel+0x504>
 80058ce:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	d13c      	bne.n	800594e <HAL_ADC_ConfigChannel+0x582>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80058d4:	683b      	ldr	r3, [r7, #0]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	2b10      	cmp	r3, #16
 80058da:	d11d      	bne.n	8005918 <HAL_ADC_ConfigChannel+0x54c>
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80058e4:	d118      	bne.n	8005918 <HAL_ADC_ConfigChannel+0x54c>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 80058e6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80058e8:	689b      	ldr	r3, [r3, #8]
 80058ea:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80058ee:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80058f0:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80058f2:	4b2a      	ldr	r3, [pc, #168]	; (800599c <HAL_ADC_ConfigChannel+0x5d0>)
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	4a2a      	ldr	r2, [pc, #168]	; (80059a0 <HAL_ADC_ConfigChannel+0x5d4>)
 80058f8:	fba2 2303 	umull	r2, r3, r2, r3
 80058fc:	0c9a      	lsrs	r2, r3, #18
 80058fe:	4613      	mov	r3, r2
 8005900:	009b      	lsls	r3, r3, #2
 8005902:	4413      	add	r3, r2
 8005904:	005b      	lsls	r3, r3, #1
 8005906:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8005908:	e002      	b.n	8005910 <HAL_ADC_ConfigChannel+0x544>
          {
            wait_loop_index--;
 800590a:	68bb      	ldr	r3, [r7, #8]
 800590c:	3b01      	subs	r3, #1
 800590e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8005910:	68bb      	ldr	r3, [r7, #8]
 8005912:	2b00      	cmp	r3, #0
 8005914:	d1f9      	bne.n	800590a <HAL_ADC_ConfigChannel+0x53e>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8005916:	e02e      	b.n	8005976 <HAL_ADC_ConfigChannel+0x5aa>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 8005918:	683b      	ldr	r3, [r7, #0]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	2b11      	cmp	r3, #17
 800591e:	d10b      	bne.n	8005938 <HAL_ADC_ConfigChannel+0x56c>
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005928:	d106      	bne.n	8005938 <HAL_ADC_ConfigChannel+0x56c>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 800592a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800592c:	689b      	ldr	r3, [r3, #8]
 800592e:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 8005932:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005934:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8005936:	e01e      	b.n	8005976 <HAL_ADC_ConfigChannel+0x5aa>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 8005938:	683b      	ldr	r3, [r7, #0]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	2b12      	cmp	r3, #18
 800593e:	d11a      	bne.n	8005976 <HAL_ADC_ConfigChannel+0x5aa>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 8005940:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005942:	689b      	ldr	r3, [r3, #8]
 8005944:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8005948:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800594a:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 800594c:	e013      	b.n	8005976 <HAL_ADC_ConfigChannel+0x5aa>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005952:	f043 0220 	orr.w	r2, r3, #32
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	641a      	str	r2, [r3, #64]	; 0x40
        
        tmp_hal_status = HAL_ERROR;
 800595a:	2301      	movs	r3, #1
 800595c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8005960:	e00a      	b.n	8005978 <HAL_ADC_ConfigChannel+0x5ac>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005966:	f043 0220 	orr.w	r2, r3, #32
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 800596e:	2301      	movs	r3, #1
 8005970:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8005974:	e000      	b.n	8005978 <HAL_ADC_ConfigChannel+0x5ac>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8005976:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	2200      	movs	r2, #0
 800597c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8005980:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8005984:	4618      	mov	r0, r3
 8005986:	376c      	adds	r7, #108	; 0x6c
 8005988:	46bd      	mov	sp, r7
 800598a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800598e:	4770      	bx	lr
 8005990:	50000100 	.word	0x50000100
 8005994:	50000400 	.word	0x50000400
 8005998:	50000500 	.word	0x50000500
 800599c:	20000008 	.word	0x20000008
 80059a0:	431bde83 	.word	0x431bde83

080059a4 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param  hadc ADC handle
  * @param  multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef* hadc, ADC_MultiModeTypeDef* multimode)
{
 80059a4:	b480      	push	{r7}
 80059a6:	b099      	sub	sp, #100	; 0x64
 80059a8:	af00      	add	r7, sp, #0
 80059aa:	6078      	str	r0, [r7, #4]
 80059ac:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80059ae:	2300      	movs	r3, #0
 80059b0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    assert_param(IS_ADC_DMA_ACCESS_MODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }
  
  /* Set handle of the other ADC sharing the same common register             */
  ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80059bc:	d102      	bne.n	80059c4 <HAL_ADCEx_MultiModeConfigChannel+0x20>
 80059be:	4b6d      	ldr	r3, [pc, #436]	; (8005b74 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 80059c0:	60bb      	str	r3, [r7, #8]
 80059c2:	e01a      	b.n	80059fa <HAL_ADCEx_MultiModeConfigChannel+0x56>
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	4a6a      	ldr	r2, [pc, #424]	; (8005b74 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 80059ca:	4293      	cmp	r3, r2
 80059cc:	d103      	bne.n	80059d6 <HAL_ADCEx_MultiModeConfigChannel+0x32>
 80059ce:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80059d2:	60bb      	str	r3, [r7, #8]
 80059d4:	e011      	b.n	80059fa <HAL_ADCEx_MultiModeConfigChannel+0x56>
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	4a67      	ldr	r2, [pc, #412]	; (8005b78 <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 80059dc:	4293      	cmp	r3, r2
 80059de:	d102      	bne.n	80059e6 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 80059e0:	4b66      	ldr	r3, [pc, #408]	; (8005b7c <HAL_ADCEx_MultiModeConfigChannel+0x1d8>)
 80059e2:	60bb      	str	r3, [r7, #8]
 80059e4:	e009      	b.n	80059fa <HAL_ADCEx_MultiModeConfigChannel+0x56>
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	4a64      	ldr	r2, [pc, #400]	; (8005b7c <HAL_ADCEx_MultiModeConfigChannel+0x1d8>)
 80059ec:	4293      	cmp	r3, r2
 80059ee:	d102      	bne.n	80059f6 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 80059f0:	4b61      	ldr	r3, [pc, #388]	; (8005b78 <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 80059f2:	60bb      	str	r3, [r7, #8]
 80059f4:	e001      	b.n	80059fa <HAL_ADCEx_MultiModeConfigChannel+0x56>
 80059f6:	2300      	movs	r3, #0
 80059f8:	60bb      	str	r3, [r7, #8]
  if (tmphadcSharingSameCommonRegister.Instance == NULL)
 80059fa:	68bb      	ldr	r3, [r7, #8]
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	d101      	bne.n	8005a04 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Return function status */
    return HAL_ERROR;
 8005a00:	2301      	movs	r3, #1
 8005a02:	e0b0      	b.n	8005b66 <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005a0a:	2b01      	cmp	r3, #1
 8005a0c:	d101      	bne.n	8005a12 <HAL_ADCEx_MultiModeConfigChannel+0x6e>
 8005a0e:	2302      	movs	r3, #2
 8005a10:	e0a9      	b.n	8005b66 <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	2201      	movs	r2, #1
 8005a16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  if ( (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET) 
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	689b      	ldr	r3, [r3, #8]
 8005a20:	f003 0304 	and.w	r3, r3, #4
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	f040 808d 	bne.w	8005b44 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
    && (ADC_IS_CONVERSION_ONGOING_REGULAR(&tmphadcSharingSameCommonRegister) == RESET) )
 8005a2a:	68bb      	ldr	r3, [r7, #8]
 8005a2c:	689b      	ldr	r3, [r3, #8]
 8005a2e:	f003 0304 	and.w	r3, r3, #4
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	f040 8086 	bne.w	8005b44 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
  {
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005a40:	d004      	beq.n	8005a4c <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	4a4b      	ldr	r2, [pc, #300]	; (8005b74 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 8005a48:	4293      	cmp	r3, r2
 8005a4a:	d101      	bne.n	8005a50 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 8005a4c:	4b4c      	ldr	r3, [pc, #304]	; (8005b80 <HAL_ADCEx_MultiModeConfigChannel+0x1dc>)
 8005a4e:	e000      	b.n	8005a52 <HAL_ADCEx_MultiModeConfigChannel+0xae>
 8005a50:	4b4c      	ldr	r3, [pc, #304]	; (8005b84 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>)
 8005a52:	65bb      	str	r3, [r7, #88]	; 0x58
    
    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8005a54:	683b      	ldr	r3, [r7, #0]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	d040      	beq.n	8005ade <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    {
      /* Configuration of ADC common group ADC1&ADC2, ADC3&ADC4 if available    */
      /* (ADC2, ADC3, ADC4 availability depends on STM32 product)               */
      /*  - DMA access mode                                                     */
      MODIFY_REG(tmpADC_Common->CCR                                          ,
 8005a5c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005a5e:	689b      	ldr	r3, [r3, #8]
 8005a60:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005a64:	683b      	ldr	r3, [r7, #0]
 8005a66:	6859      	ldr	r1, [r3, #4]
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005a6e:	035b      	lsls	r3, r3, #13
 8005a70:	430b      	orrs	r3, r1
 8005a72:	431a      	orrs	r2, r3
 8005a74:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005a76:	609a      	str	r2, [r3, #8]
      /*       parameters, their setting is bypassed without error reporting    */
      /*       (as it can be the expected behaviour in case of intended action  */
      /*       to update parameter above (which fulfills the ADC state          */
      /*       condition: no conversion on going on group regular)              */
      /*       on the fly).                                                     */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	689b      	ldr	r3, [r3, #8]
 8005a7e:	f003 0303 	and.w	r3, r3, #3
 8005a82:	2b01      	cmp	r3, #1
 8005a84:	d108      	bne.n	8005a98 <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	f003 0301 	and.w	r3, r3, #1
 8005a90:	2b01      	cmp	r3, #1
 8005a92:	d101      	bne.n	8005a98 <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 8005a94:	2301      	movs	r3, #1
 8005a96:	e000      	b.n	8005a9a <HAL_ADCEx_MultiModeConfigChannel+0xf6>
 8005a98:	2300      	movs	r3, #0
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d15c      	bne.n	8005b58 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8005a9e:	68bb      	ldr	r3, [r7, #8]
 8005aa0:	689b      	ldr	r3, [r3, #8]
 8005aa2:	f003 0303 	and.w	r3, r3, #3
 8005aa6:	2b01      	cmp	r3, #1
 8005aa8:	d107      	bne.n	8005aba <HAL_ADCEx_MultiModeConfigChannel+0x116>
 8005aaa:	68bb      	ldr	r3, [r7, #8]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	f003 0301 	and.w	r3, r3, #1
 8005ab2:	2b01      	cmp	r3, #1
 8005ab4:	d101      	bne.n	8005aba <HAL_ADCEx_MultiModeConfigChannel+0x116>
 8005ab6:	2301      	movs	r3, #1
 8005ab8:	e000      	b.n	8005abc <HAL_ADCEx_MultiModeConfigChannel+0x118>
 8005aba:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	d14b      	bne.n	8005b58 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        MODIFY_REG(tmpADC_Common->CCR                                          ,
 8005ac0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005ac2:	689b      	ldr	r3, [r3, #8]
 8005ac4:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8005ac8:	f023 030f 	bic.w	r3, r3, #15
 8005acc:	683a      	ldr	r2, [r7, #0]
 8005ace:	6811      	ldr	r1, [r2, #0]
 8005ad0:	683a      	ldr	r2, [r7, #0]
 8005ad2:	6892      	ldr	r2, [r2, #8]
 8005ad4:	430a      	orrs	r2, r1
 8005ad6:	431a      	orrs	r2, r3
 8005ad8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005ada:	609a      	str	r2, [r3, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8005adc:	e03c      	b.n	8005b58 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
                   multimode->TwoSamplingDelay                                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8005ade:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005ae0:	689b      	ldr	r3, [r3, #8]
 8005ae2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005ae6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005ae8:	609a      	str	r2, [r3, #8]
      
      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	689b      	ldr	r3, [r3, #8]
 8005af0:	f003 0303 	and.w	r3, r3, #3
 8005af4:	2b01      	cmp	r3, #1
 8005af6:	d108      	bne.n	8005b0a <HAL_ADCEx_MultiModeConfigChannel+0x166>
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	f003 0301 	and.w	r3, r3, #1
 8005b02:	2b01      	cmp	r3, #1
 8005b04:	d101      	bne.n	8005b0a <HAL_ADCEx_MultiModeConfigChannel+0x166>
 8005b06:	2301      	movs	r3, #1
 8005b08:	e000      	b.n	8005b0c <HAL_ADCEx_MultiModeConfigChannel+0x168>
 8005b0a:	2300      	movs	r3, #0
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	d123      	bne.n	8005b58 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8005b10:	68bb      	ldr	r3, [r7, #8]
 8005b12:	689b      	ldr	r3, [r3, #8]
 8005b14:	f003 0303 	and.w	r3, r3, #3
 8005b18:	2b01      	cmp	r3, #1
 8005b1a:	d107      	bne.n	8005b2c <HAL_ADCEx_MultiModeConfigChannel+0x188>
 8005b1c:	68bb      	ldr	r3, [r7, #8]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	f003 0301 	and.w	r3, r3, #1
 8005b24:	2b01      	cmp	r3, #1
 8005b26:	d101      	bne.n	8005b2c <HAL_ADCEx_MultiModeConfigChannel+0x188>
 8005b28:	2301      	movs	r3, #1
 8005b2a:	e000      	b.n	8005b2e <HAL_ADCEx_MultiModeConfigChannel+0x18a>
 8005b2c:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	d112      	bne.n	8005b58 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI | ADC_CCR_DELAY);
 8005b32:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005b34:	689b      	ldr	r3, [r3, #8]
 8005b36:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8005b3a:	f023 030f 	bic.w	r3, r3, #15
 8005b3e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005b40:	6093      	str	r3, [r2, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8005b42:	e009      	b.n	8005b58 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b48:	f043 0220 	orr.w	r2, r3, #32
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 8005b50:	2301      	movs	r3, #1
 8005b52:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8005b56:	e000      	b.n	8005b5a <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8005b58:	bf00      	nop
  }
    
    
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	2200      	movs	r2, #0
 8005b5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8005b62:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
} 
 8005b66:	4618      	mov	r0, r3
 8005b68:	3764      	adds	r7, #100	; 0x64
 8005b6a:	46bd      	mov	sp, r7
 8005b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b70:	4770      	bx	lr
 8005b72:	bf00      	nop
 8005b74:	50000100 	.word	0x50000100
 8005b78:	50000400 	.word	0x50000400
 8005b7c:	50000500 	.word	0x50000500
 8005b80:	50000300 	.word	0x50000300
 8005b84:	50000700 	.word	0x50000700

08005b88 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8005b88:	b580      	push	{r7, lr}
 8005b8a:	b084      	sub	sp, #16
 8005b8c:	af00      	add	r7, sp, #0
 8005b8e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b94:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b9a:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	d126      	bne.n	8005bf0 <ADC_DMAConvCplt+0x68>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ba6:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	641a      	str	r2, [r3, #64]	; 0x40
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F3 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	68db      	ldr	r3, [r3, #12]
 8005bb4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	d115      	bne.n	8005be8 <ADC_DMAConvCplt+0x60>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	7e5b      	ldrb	r3, [r3, #25]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	d111      	bne.n	8005be8 <ADC_DMAConvCplt+0x60>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bc8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bd4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005bd8:	2b00      	cmp	r3, #0
 8005bda:	d105      	bne.n	8005be8 <ADC_DMAConvCplt+0x60>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005be0:	f043 0201 	orr.w	r2, r3, #1
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 8005be8:	68f8      	ldr	r0, [r7, #12]
 8005bea:	f7ff f801 	bl	8004bf0 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 8005bee:	e004      	b.n	8005bfa <ADC_DMAConvCplt+0x72>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005bf6:	6878      	ldr	r0, [r7, #4]
 8005bf8:	4798      	blx	r3
}
 8005bfa:	bf00      	nop
 8005bfc:	3710      	adds	r7, #16
 8005bfe:	46bd      	mov	sp, r7
 8005c00:	bd80      	pop	{r7, pc}

08005c02 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8005c02:	b580      	push	{r7, lr}
 8005c04:	b084      	sub	sp, #16
 8005c06:	af00      	add	r7, sp, #0
 8005c08:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c0e:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8005c10:	68f8      	ldr	r0, [r7, #12]
 8005c12:	f7fe fff7 	bl	8004c04 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */ 
}
 8005c16:	bf00      	nop
 8005c18:	3710      	adds	r7, #16
 8005c1a:	46bd      	mov	sp, r7
 8005c1c:	bd80      	pop	{r7, pc}

08005c1e <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8005c1e:	b580      	push	{r7, lr}
 8005c20:	b084      	sub	sp, #16
 8005c22:	af00      	add	r7, sp, #0
 8005c24:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c2a:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c30:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	641a      	str	r2, [r3, #64]	; 0x40
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005c3c:	f043 0204 	orr.w	r2, r3, #4
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	645a      	str	r2, [r3, #68]	; 0x44
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8005c44:	68f8      	ldr	r0, [r7, #12]
 8005c46:	f7fe ffe7 	bl	8004c18 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8005c4a:	bf00      	nop
 8005c4c:	3710      	adds	r7, #16
 8005c4e:	46bd      	mov	sp, r7
 8005c50:	bd80      	pop	{r7, pc}
	...

08005c54 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8005c54:	b580      	push	{r7, lr}
 8005c56:	b084      	sub	sp, #16
 8005c58:	af00      	add	r7, sp, #0
 8005c5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005c5c:	2300      	movs	r3, #0
 8005c5e:	60fb      	str	r3, [r7, #12]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	689b      	ldr	r3, [r3, #8]
 8005c66:	f003 0303 	and.w	r3, r3, #3
 8005c6a:	2b01      	cmp	r3, #1
 8005c6c:	d108      	bne.n	8005c80 <ADC_Enable+0x2c>
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	f003 0301 	and.w	r3, r3, #1
 8005c78:	2b01      	cmp	r3, #1
 8005c7a:	d101      	bne.n	8005c80 <ADC_Enable+0x2c>
 8005c7c:	2301      	movs	r3, #1
 8005c7e:	e000      	b.n	8005c82 <ADC_Enable+0x2e>
 8005c80:	2300      	movs	r3, #0
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	d143      	bne.n	8005d0e <ADC_Enable+0xba>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	689a      	ldr	r2, [r3, #8]
 8005c8c:	4b22      	ldr	r3, [pc, #136]	; (8005d18 <ADC_Enable+0xc4>)
 8005c8e:	4013      	ands	r3, r2
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	d00d      	beq.n	8005cb0 <ADC_Enable+0x5c>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c98:	f043 0210 	orr.w	r2, r3, #16
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005ca4:	f043 0201 	orr.w	r2, r3, #1
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	645a      	str	r2, [r3, #68]	; 0x44
      
      return HAL_ERROR;
 8005cac:	2301      	movs	r3, #1
 8005cae:	e02f      	b.n	8005d10 <ADC_Enable+0xbc>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	689a      	ldr	r2, [r3, #8]
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	f042 0201 	orr.w	r2, r2, #1
 8005cbe:	609a      	str	r2, [r3, #8]
    
    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();  
 8005cc0:	f7fe ff66 	bl	8004b90 <HAL_GetTick>
 8005cc4:	60f8      	str	r0, [r7, #12]
    
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8005cc6:	e01b      	b.n	8005d00 <ADC_Enable+0xac>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8005cc8:	f7fe ff62 	bl	8004b90 <HAL_GetTick>
 8005ccc:	4602      	mov	r2, r0
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	1ad3      	subs	r3, r2, r3
 8005cd2:	2b02      	cmp	r3, #2
 8005cd4:	d914      	bls.n	8005d00 <ADC_Enable+0xac>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	f003 0301 	and.w	r3, r3, #1
 8005ce0:	2b01      	cmp	r3, #1
 8005ce2:	d00d      	beq.n	8005d00 <ADC_Enable+0xac>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ce8:	f043 0210 	orr.w	r2, r3, #16
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005cf4:	f043 0201 	orr.w	r2, r3, #1
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 8005cfc:	2301      	movs	r3, #1
 8005cfe:	e007      	b.n	8005d10 <ADC_Enable+0xbc>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	f003 0301 	and.w	r3, r3, #1
 8005d0a:	2b01      	cmp	r3, #1
 8005d0c:	d1dc      	bne.n	8005cc8 <ADC_Enable+0x74>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8005d0e:	2300      	movs	r3, #0
}
 8005d10:	4618      	mov	r0, r3
 8005d12:	3710      	adds	r7, #16
 8005d14:	46bd      	mov	sp, r7
 8005d16:	bd80      	pop	{r7, pc}
 8005d18:	8000003f 	.word	0x8000003f

08005d1c <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 8005d1c:	b580      	push	{r7, lr}
 8005d1e:	b084      	sub	sp, #16
 8005d20:	af00      	add	r7, sp, #0
 8005d22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005d24:	2300      	movs	r3, #0
 8005d26:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	689b      	ldr	r3, [r3, #8]
 8005d2e:	f003 0303 	and.w	r3, r3, #3
 8005d32:	2b01      	cmp	r3, #1
 8005d34:	d108      	bne.n	8005d48 <ADC_Disable+0x2c>
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	f003 0301 	and.w	r3, r3, #1
 8005d40:	2b01      	cmp	r3, #1
 8005d42:	d101      	bne.n	8005d48 <ADC_Disable+0x2c>
 8005d44:	2301      	movs	r3, #1
 8005d46:	e000      	b.n	8005d4a <ADC_Disable+0x2e>
 8005d48:	2300      	movs	r3, #0
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	d047      	beq.n	8005dde <ADC_Disable+0xc2>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	689b      	ldr	r3, [r3, #8]
 8005d54:	f003 030d 	and.w	r3, r3, #13
 8005d58:	2b01      	cmp	r3, #1
 8005d5a:	d10f      	bne.n	8005d7c <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	689a      	ldr	r2, [r3, #8]
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	f042 0202 	orr.w	r2, r2, #2
 8005d6a:	609a      	str	r2, [r3, #8]
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	2203      	movs	r2, #3
 8005d72:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 8005d74:	f7fe ff0c 	bl	8004b90 <HAL_GetTick>
 8005d78:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8005d7a:	e029      	b.n	8005dd0 <ADC_Disable+0xb4>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d80:	f043 0210 	orr.w	r2, r3, #16
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	641a      	str	r2, [r3, #64]	; 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d8c:	f043 0201 	orr.w	r2, r3, #1
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	645a      	str	r2, [r3, #68]	; 0x44
      return HAL_ERROR;
 8005d94:	2301      	movs	r3, #1
 8005d96:	e023      	b.n	8005de0 <ADC_Disable+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8005d98:	f7fe fefa 	bl	8004b90 <HAL_GetTick>
 8005d9c:	4602      	mov	r2, r0
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	1ad3      	subs	r3, r2, r3
 8005da2:	2b02      	cmp	r3, #2
 8005da4:	d914      	bls.n	8005dd0 <ADC_Disable+0xb4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	689b      	ldr	r3, [r3, #8]
 8005dac:	f003 0301 	and.w	r3, r3, #1
 8005db0:	2b01      	cmp	r3, #1
 8005db2:	d10d      	bne.n	8005dd0 <ADC_Disable+0xb4>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005db8:	f043 0210 	orr.w	r2, r3, #16
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005dc4:	f043 0201 	orr.w	r2, r3, #1
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 8005dcc:	2301      	movs	r3, #1
 8005dce:	e007      	b.n	8005de0 <ADC_Disable+0xc4>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	689b      	ldr	r3, [r3, #8]
 8005dd6:	f003 0301 	and.w	r3, r3, #1
 8005dda:	2b01      	cmp	r3, #1
 8005ddc:	d0dc      	beq.n	8005d98 <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8005dde:	2300      	movs	r3, #0
}
 8005de0:	4618      	mov	r0, r3
 8005de2:	3710      	adds	r7, #16
 8005de4:	46bd      	mov	sp, r7
 8005de6:	bd80      	pop	{r7, pc}

08005de8 <ADC_ConversionStop>:
  *            @arg ADC_INJECTED_GROUP: ADC injected conversion type.
  *            @arg ADC_REGULAR_INJECTED_GROUP: ADC regular and injected conversion type.
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef* hadc, uint32_t ConversionGroup)
{
 8005de8:	b580      	push	{r7, lr}
 8005dea:	b086      	sub	sp, #24
 8005dec:	af00      	add	r7, sp, #0
 8005dee:	6078      	str	r0, [r7, #4]
 8005df0:	6039      	str	r1, [r7, #0]
  uint32_t tmp_ADC_CR_ADSTART_JADSTART = 0U;
 8005df2:	2300      	movs	r3, #0
 8005df4:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 8005df6:	2300      	movs	r3, #0
 8005df8:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles = 0U;
 8005dfa:	2300      	movs	r3, #0
 8005dfc:	613b      	str	r3, [r7, #16]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));
    
  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc))
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	689b      	ldr	r3, [r3, #8]
 8005e04:	f003 030c 	and.w	r3, r3, #12
 8005e08:	2b00      	cmp	r3, #0
 8005e0a:	f000 809b 	beq.w	8005f44 <ADC_ConversionStop+0x15c>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1U, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if ((HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_JAUTO)) &&
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	68db      	ldr	r3, [r3, #12]
 8005e14:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005e18:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005e1c:	d12a      	bne.n	8005e74 <ADC_ConversionStop+0x8c>
         (hadc->Init.ContinuousConvMode==ENABLE)               &&
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	7e5b      	ldrb	r3, [r3, #25]
    if ((HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_JAUTO)) &&
 8005e22:	2b01      	cmp	r3, #1
 8005e24:	d126      	bne.n	8005e74 <ADC_ConversionStop+0x8c>
         (hadc->Init.LowPowerAutoWait==ENABLE)                   )
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	7e1b      	ldrb	r3, [r3, #24]
         (hadc->Init.ContinuousConvMode==ENABLE)               &&
 8005e2a:	2b01      	cmp	r3, #1
 8005e2c:	d122      	bne.n	8005e74 <ADC_ConversionStop+0x8c>
    {
      /* Use stop of regular group */
      ConversionGroup = ADC_REGULAR_GROUP;
 8005e2e:	230c      	movs	r3, #12
 8005e30:	603b      	str	r3, [r7, #0]
      
      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == RESET)
 8005e32:	e014      	b.n	8005e5e <ADC_ConversionStop+0x76>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES *4U))
 8005e34:	693b      	ldr	r3, [r7, #16]
 8005e36:	4a46      	ldr	r2, [pc, #280]	; (8005f50 <ADC_ConversionStop+0x168>)
 8005e38:	4293      	cmp	r3, r2
 8005e3a:	d90d      	bls.n	8005e58 <ADC_ConversionStop+0x70>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e40:	f043 0210 	orr.w	r2, r3, #16
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e4c:	f043 0201 	orr.w	r2, r3, #1
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	645a      	str	r2, [r3, #68]	; 0x44
          
          return HAL_ERROR;
 8005e54:	2301      	movs	r3, #1
 8005e56:	e076      	b.n	8005f46 <ADC_ConversionStop+0x15e>
        }
        Conversion_Timeout_CPU_cycles ++;
 8005e58:	693b      	ldr	r3, [r7, #16]
 8005e5a:	3301      	adds	r3, #1
 8005e5c:	613b      	str	r3, [r7, #16]
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == RESET)
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e68:	2b40      	cmp	r3, #64	; 0x40
 8005e6a:	d1e3      	bne.n	8005e34 <ADC_ConversionStop+0x4c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	2240      	movs	r2, #64	; 0x40
 8005e72:	601a      	str	r2, [r3, #0]
    }
    
    /* Stop potential conversion on going on regular group */
    if (ConversionGroup != ADC_INJECTED_GROUP)
 8005e74:	683b      	ldr	r3, [r7, #0]
 8005e76:	2b60      	cmp	r3, #96	; 0x60
 8005e78:	d015      	beq.n	8005ea6 <ADC_ConversionStop+0xbe>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0U */
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	689b      	ldr	r3, [r3, #8]
 8005e80:	f003 0304 	and.w	r3, r3, #4
 8005e84:	2b04      	cmp	r3, #4
 8005e86:	d10e      	bne.n	8005ea6 <ADC_ConversionStop+0xbe>
          HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS)     )
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	689b      	ldr	r3, [r3, #8]
 8005e8e:	f003 0302 	and.w	r3, r3, #2
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	d107      	bne.n	8005ea6 <ADC_ConversionStop+0xbe>
      {
        /* Stop conversions on regular group */
        hadc->Instance->CR |= ADC_CR_ADSTP;
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	689a      	ldr	r2, [r3, #8]
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	f042 0210 	orr.w	r2, r2, #16
 8005ea4:	609a      	str	r2, [r3, #8]
      }
    }

    /* Stop potential conversion on going on injected group */
    if (ConversionGroup != ADC_REGULAR_GROUP)
 8005ea6:	683b      	ldr	r3, [r7, #0]
 8005ea8:	2b0c      	cmp	r3, #12
 8005eaa:	d015      	beq.n	8005ed8 <ADC_ConversionStop+0xf0>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0U */
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_JADSTART) && 
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	689b      	ldr	r3, [r3, #8]
 8005eb2:	f003 0308 	and.w	r3, r3, #8
 8005eb6:	2b08      	cmp	r3, #8
 8005eb8:	d10e      	bne.n	8005ed8 <ADC_ConversionStop+0xf0>
          HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS)      )
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	689b      	ldr	r3, [r3, #8]
 8005ec0:	f003 0302 	and.w	r3, r3, #2
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_JADSTART) && 
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	d107      	bne.n	8005ed8 <ADC_ConversionStop+0xf0>
      {
        /* Stop conversions on injected group */
        hadc->Instance->CR |= ADC_CR_JADSTP;
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	689a      	ldr	r2, [r3, #8]
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	f042 0220 	orr.w	r2, r2, #32
 8005ed6:	609a      	str	r2, [r3, #8]
      }
    }

    /* Selection of start and stop bits in function of regular or injected group */
    switch(ConversionGroup)
 8005ed8:	683b      	ldr	r3, [r7, #0]
 8005eda:	2b60      	cmp	r3, #96	; 0x60
 8005edc:	d005      	beq.n	8005eea <ADC_ConversionStop+0x102>
 8005ede:	683b      	ldr	r3, [r7, #0]
 8005ee0:	2b6c      	cmp	r3, #108	; 0x6c
 8005ee2:	d105      	bne.n	8005ef0 <ADC_ConversionStop+0x108>
    {
    case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 8005ee4:	230c      	movs	r3, #12
 8005ee6:	617b      	str	r3, [r7, #20]
        break;
 8005ee8:	e005      	b.n	8005ef6 <ADC_ConversionStop+0x10e>
    case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 8005eea:	2308      	movs	r3, #8
 8005eec:	617b      	str	r3, [r7, #20]
        break;
 8005eee:	e002      	b.n	8005ef6 <ADC_ConversionStop+0x10e>
    /* Case ADC_REGULAR_GROUP */
    default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 8005ef0:	2304      	movs	r3, #4
 8005ef2:	617b      	str	r3, [r7, #20]
        break;
 8005ef4:	bf00      	nop
    }
    
    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 8005ef6:	f7fe fe4b 	bl	8004b90 <HAL_GetTick>
 8005efa:	60f8      	str	r0, [r7, #12]
      
    while((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != RESET)
 8005efc:	e01b      	b.n	8005f36 <ADC_ConversionStop+0x14e>
    {
      if((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8005efe:	f7fe fe47 	bl	8004b90 <HAL_GetTick>
 8005f02:	4602      	mov	r2, r0
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	1ad3      	subs	r3, r2, r3
 8005f08:	2b0b      	cmp	r3, #11
 8005f0a:	d914      	bls.n	8005f36 <ADC_ConversionStop+0x14e>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != RESET)
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	689a      	ldr	r2, [r3, #8]
 8005f12:	697b      	ldr	r3, [r7, #20]
 8005f14:	4013      	ands	r3, r2
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	d00d      	beq.n	8005f36 <ADC_ConversionStop+0x14e>
        {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f1e:	f043 0210 	orr.w	r2, r3, #16
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005f2a:	f043 0201 	orr.w	r2, r3, #1
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	645a      	str	r2, [r3, #68]	; 0x44
        
        return HAL_ERROR;
 8005f32:	2301      	movs	r3, #1
 8005f34:	e007      	b.n	8005f46 <ADC_ConversionStop+0x15e>
    while((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != RESET)
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	689a      	ldr	r2, [r3, #8]
 8005f3c:	697b      	ldr	r3, [r7, #20]
 8005f3e:	4013      	ands	r3, r2
 8005f40:	2b00      	cmp	r3, #0
 8005f42:	d1dc      	bne.n	8005efe <ADC_ConversionStop+0x116>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8005f44:	2300      	movs	r3, #0
}
 8005f46:	4618      	mov	r0, r3
 8005f48:	3718      	adds	r7, #24
 8005f4a:	46bd      	mov	sp, r7
 8005f4c:	bd80      	pop	{r7, pc}
 8005f4e:	bf00      	nop
 8005f50:	000993ff 	.word	0x000993ff

08005f54 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005f54:	b480      	push	{r7}
 8005f56:	b085      	sub	sp, #20
 8005f58:	af00      	add	r7, sp, #0
 8005f5a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	f003 0307 	and.w	r3, r3, #7
 8005f62:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005f64:	4b0c      	ldr	r3, [pc, #48]	; (8005f98 <__NVIC_SetPriorityGrouping+0x44>)
 8005f66:	68db      	ldr	r3, [r3, #12]
 8005f68:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005f6a:	68ba      	ldr	r2, [r7, #8]
 8005f6c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005f70:	4013      	ands	r3, r2
 8005f72:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005f78:	68bb      	ldr	r3, [r7, #8]
 8005f7a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005f7c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8005f80:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005f84:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005f86:	4a04      	ldr	r2, [pc, #16]	; (8005f98 <__NVIC_SetPriorityGrouping+0x44>)
 8005f88:	68bb      	ldr	r3, [r7, #8]
 8005f8a:	60d3      	str	r3, [r2, #12]
}
 8005f8c:	bf00      	nop
 8005f8e:	3714      	adds	r7, #20
 8005f90:	46bd      	mov	sp, r7
 8005f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f96:	4770      	bx	lr
 8005f98:	e000ed00 	.word	0xe000ed00

08005f9c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005f9c:	b480      	push	{r7}
 8005f9e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005fa0:	4b04      	ldr	r3, [pc, #16]	; (8005fb4 <__NVIC_GetPriorityGrouping+0x18>)
 8005fa2:	68db      	ldr	r3, [r3, #12]
 8005fa4:	0a1b      	lsrs	r3, r3, #8
 8005fa6:	f003 0307 	and.w	r3, r3, #7
}
 8005faa:	4618      	mov	r0, r3
 8005fac:	46bd      	mov	sp, r7
 8005fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fb2:	4770      	bx	lr
 8005fb4:	e000ed00 	.word	0xe000ed00

08005fb8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005fb8:	b480      	push	{r7}
 8005fba:	b083      	sub	sp, #12
 8005fbc:	af00      	add	r7, sp, #0
 8005fbe:	4603      	mov	r3, r0
 8005fc0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005fc2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	db0b      	blt.n	8005fe2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005fca:	79fb      	ldrb	r3, [r7, #7]
 8005fcc:	f003 021f 	and.w	r2, r3, #31
 8005fd0:	4907      	ldr	r1, [pc, #28]	; (8005ff0 <__NVIC_EnableIRQ+0x38>)
 8005fd2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005fd6:	095b      	lsrs	r3, r3, #5
 8005fd8:	2001      	movs	r0, #1
 8005fda:	fa00 f202 	lsl.w	r2, r0, r2
 8005fde:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8005fe2:	bf00      	nop
 8005fe4:	370c      	adds	r7, #12
 8005fe6:	46bd      	mov	sp, r7
 8005fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fec:	4770      	bx	lr
 8005fee:	bf00      	nop
 8005ff0:	e000e100 	.word	0xe000e100

08005ff4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005ff4:	b480      	push	{r7}
 8005ff6:	b083      	sub	sp, #12
 8005ff8:	af00      	add	r7, sp, #0
 8005ffa:	4603      	mov	r3, r0
 8005ffc:	6039      	str	r1, [r7, #0]
 8005ffe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006000:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006004:	2b00      	cmp	r3, #0
 8006006:	db0a      	blt.n	800601e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006008:	683b      	ldr	r3, [r7, #0]
 800600a:	b2da      	uxtb	r2, r3
 800600c:	490c      	ldr	r1, [pc, #48]	; (8006040 <__NVIC_SetPriority+0x4c>)
 800600e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006012:	0112      	lsls	r2, r2, #4
 8006014:	b2d2      	uxtb	r2, r2
 8006016:	440b      	add	r3, r1
 8006018:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800601c:	e00a      	b.n	8006034 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800601e:	683b      	ldr	r3, [r7, #0]
 8006020:	b2da      	uxtb	r2, r3
 8006022:	4908      	ldr	r1, [pc, #32]	; (8006044 <__NVIC_SetPriority+0x50>)
 8006024:	79fb      	ldrb	r3, [r7, #7]
 8006026:	f003 030f 	and.w	r3, r3, #15
 800602a:	3b04      	subs	r3, #4
 800602c:	0112      	lsls	r2, r2, #4
 800602e:	b2d2      	uxtb	r2, r2
 8006030:	440b      	add	r3, r1
 8006032:	761a      	strb	r2, [r3, #24]
}
 8006034:	bf00      	nop
 8006036:	370c      	adds	r7, #12
 8006038:	46bd      	mov	sp, r7
 800603a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800603e:	4770      	bx	lr
 8006040:	e000e100 	.word	0xe000e100
 8006044:	e000ed00 	.word	0xe000ed00

08006048 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006048:	b480      	push	{r7}
 800604a:	b089      	sub	sp, #36	; 0x24
 800604c:	af00      	add	r7, sp, #0
 800604e:	60f8      	str	r0, [r7, #12]
 8006050:	60b9      	str	r1, [r7, #8]
 8006052:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	f003 0307 	and.w	r3, r3, #7
 800605a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800605c:	69fb      	ldr	r3, [r7, #28]
 800605e:	f1c3 0307 	rsb	r3, r3, #7
 8006062:	2b04      	cmp	r3, #4
 8006064:	bf28      	it	cs
 8006066:	2304      	movcs	r3, #4
 8006068:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800606a:	69fb      	ldr	r3, [r7, #28]
 800606c:	3304      	adds	r3, #4
 800606e:	2b06      	cmp	r3, #6
 8006070:	d902      	bls.n	8006078 <NVIC_EncodePriority+0x30>
 8006072:	69fb      	ldr	r3, [r7, #28]
 8006074:	3b03      	subs	r3, #3
 8006076:	e000      	b.n	800607a <NVIC_EncodePriority+0x32>
 8006078:	2300      	movs	r3, #0
 800607a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800607c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006080:	69bb      	ldr	r3, [r7, #24]
 8006082:	fa02 f303 	lsl.w	r3, r2, r3
 8006086:	43da      	mvns	r2, r3
 8006088:	68bb      	ldr	r3, [r7, #8]
 800608a:	401a      	ands	r2, r3
 800608c:	697b      	ldr	r3, [r7, #20]
 800608e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006090:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8006094:	697b      	ldr	r3, [r7, #20]
 8006096:	fa01 f303 	lsl.w	r3, r1, r3
 800609a:	43d9      	mvns	r1, r3
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80060a0:	4313      	orrs	r3, r2
         );
}
 80060a2:	4618      	mov	r0, r3
 80060a4:	3724      	adds	r7, #36	; 0x24
 80060a6:	46bd      	mov	sp, r7
 80060a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ac:	4770      	bx	lr
	...

080060b0 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 80060b0:	b480      	push	{r7}
 80060b2:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80060b4:	f3bf 8f4f 	dsb	sy
}
 80060b8:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 80060ba:	4b06      	ldr	r3, [pc, #24]	; (80060d4 <__NVIC_SystemReset+0x24>)
 80060bc:	68db      	ldr	r3, [r3, #12]
 80060be:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 80060c2:	4904      	ldr	r1, [pc, #16]	; (80060d4 <__NVIC_SystemReset+0x24>)
 80060c4:	4b04      	ldr	r3, [pc, #16]	; (80060d8 <__NVIC_SystemReset+0x28>)
 80060c6:	4313      	orrs	r3, r2
 80060c8:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 80060ca:	f3bf 8f4f 	dsb	sy
}
 80060ce:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 80060d0:	bf00      	nop
 80060d2:	e7fd      	b.n	80060d0 <__NVIC_SystemReset+0x20>
 80060d4:	e000ed00 	.word	0xe000ed00
 80060d8:	05fa0004 	.word	0x05fa0004

080060dc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80060dc:	b580      	push	{r7, lr}
 80060de:	b082      	sub	sp, #8
 80060e0:	af00      	add	r7, sp, #0
 80060e2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	3b01      	subs	r3, #1
 80060e8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80060ec:	d301      	bcc.n	80060f2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80060ee:	2301      	movs	r3, #1
 80060f0:	e00f      	b.n	8006112 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80060f2:	4a0a      	ldr	r2, [pc, #40]	; (800611c <SysTick_Config+0x40>)
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	3b01      	subs	r3, #1
 80060f8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80060fa:	210f      	movs	r1, #15
 80060fc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006100:	f7ff ff78 	bl	8005ff4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8006104:	4b05      	ldr	r3, [pc, #20]	; (800611c <SysTick_Config+0x40>)
 8006106:	2200      	movs	r2, #0
 8006108:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800610a:	4b04      	ldr	r3, [pc, #16]	; (800611c <SysTick_Config+0x40>)
 800610c:	2207      	movs	r2, #7
 800610e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8006110:	2300      	movs	r3, #0
}
 8006112:	4618      	mov	r0, r3
 8006114:	3708      	adds	r7, #8
 8006116:	46bd      	mov	sp, r7
 8006118:	bd80      	pop	{r7, pc}
 800611a:	bf00      	nop
 800611c:	e000e010 	.word	0xe000e010

08006120 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006120:	b580      	push	{r7, lr}
 8006122:	b082      	sub	sp, #8
 8006124:	af00      	add	r7, sp, #0
 8006126:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8006128:	6878      	ldr	r0, [r7, #4]
 800612a:	f7ff ff13 	bl	8005f54 <__NVIC_SetPriorityGrouping>
}
 800612e:	bf00      	nop
 8006130:	3708      	adds	r7, #8
 8006132:	46bd      	mov	sp, r7
 8006134:	bd80      	pop	{r7, pc}

08006136 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006136:	b580      	push	{r7, lr}
 8006138:	b086      	sub	sp, #24
 800613a:	af00      	add	r7, sp, #0
 800613c:	4603      	mov	r3, r0
 800613e:	60b9      	str	r1, [r7, #8]
 8006140:	607a      	str	r2, [r7, #4]
 8006142:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8006144:	2300      	movs	r3, #0
 8006146:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8006148:	f7ff ff28 	bl	8005f9c <__NVIC_GetPriorityGrouping>
 800614c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800614e:	687a      	ldr	r2, [r7, #4]
 8006150:	68b9      	ldr	r1, [r7, #8]
 8006152:	6978      	ldr	r0, [r7, #20]
 8006154:	f7ff ff78 	bl	8006048 <NVIC_EncodePriority>
 8006158:	4602      	mov	r2, r0
 800615a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800615e:	4611      	mov	r1, r2
 8006160:	4618      	mov	r0, r3
 8006162:	f7ff ff47 	bl	8005ff4 <__NVIC_SetPriority>
}
 8006166:	bf00      	nop
 8006168:	3718      	adds	r7, #24
 800616a:	46bd      	mov	sp, r7
 800616c:	bd80      	pop	{r7, pc}

0800616e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800616e:	b580      	push	{r7, lr}
 8006170:	b082      	sub	sp, #8
 8006172:	af00      	add	r7, sp, #0
 8006174:	4603      	mov	r3, r0
 8006176:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8006178:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800617c:	4618      	mov	r0, r3
 800617e:	f7ff ff1b 	bl	8005fb8 <__NVIC_EnableIRQ>
}
 8006182:	bf00      	nop
 8006184:	3708      	adds	r7, #8
 8006186:	46bd      	mov	sp, r7
 8006188:	bd80      	pop	{r7, pc}

0800618a <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiates a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 800618a:	b580      	push	{r7, lr}
 800618c:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 800618e:	f7ff ff8f 	bl	80060b0 <__NVIC_SystemReset>

08006192 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8006192:	b580      	push	{r7, lr}
 8006194:	b082      	sub	sp, #8
 8006196:	af00      	add	r7, sp, #0
 8006198:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800619a:	6878      	ldr	r0, [r7, #4]
 800619c:	f7ff ff9e 	bl	80060dc <SysTick_Config>
 80061a0:	4603      	mov	r3, r0
}
 80061a2:	4618      	mov	r0, r3
 80061a4:	3708      	adds	r7, #8
 80061a6:	46bd      	mov	sp, r7
 80061a8:	bd80      	pop	{r7, pc}

080061aa <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 80061aa:	b580      	push	{r7, lr}
 80061ac:	b084      	sub	sp, #16
 80061ae:	af00      	add	r7, sp, #0
 80061b0:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80061b2:	2300      	movs	r3, #0
 80061b4:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	2b00      	cmp	r3, #0
 80061ba:	d101      	bne.n	80061c0 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 80061bc:	2301      	movs	r3, #1
 80061be:	e037      	b.n	8006230 <HAL_DMA_Init+0x86>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	2202      	movs	r2, #2
 80061c4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80061d6:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80061da:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 80061e4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	68db      	ldr	r3, [r3, #12]
 80061ea:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80061f0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	695b      	ldr	r3, [r3, #20]
 80061f6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80061fc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	69db      	ldr	r3, [r3, #28]
 8006202:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8006204:	68fa      	ldr	r2, [r7, #12]
 8006206:	4313      	orrs	r3, r2
 8006208:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	68fa      	ldr	r2, [r7, #12]
 8006210:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 8006212:	6878      	ldr	r0, [r7, #4]
 8006214:	f000 f97a 	bl	800650c <DMA_CalcBaseAndBitshift>
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	2200      	movs	r2, #0
 800621c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	2201      	movs	r2, #1
 8006222:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	2200      	movs	r2, #0
 800622a:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 800622e:	2300      	movs	r3, #0
}  
 8006230:	4618      	mov	r0, r3
 8006232:	3710      	adds	r7, #16
 8006234:	46bd      	mov	sp, r7
 8006236:	bd80      	pop	{r7, pc}

08006238 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006238:	b580      	push	{r7, lr}
 800623a:	b086      	sub	sp, #24
 800623c:	af00      	add	r7, sp, #0
 800623e:	60f8      	str	r0, [r7, #12]
 8006240:	60b9      	str	r1, [r7, #8]
 8006242:	607a      	str	r2, [r7, #4]
 8006244:	603b      	str	r3, [r7, #0]
	HAL_StatusTypeDef status = HAL_OK;
 8006246:	2300      	movs	r3, #0
 8006248:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Process locked */
  __HAL_LOCK(hdma);
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006250:	2b01      	cmp	r3, #1
 8006252:	d101      	bne.n	8006258 <HAL_DMA_Start_IT+0x20>
 8006254:	2302      	movs	r3, #2
 8006256:	e04a      	b.n	80062ee <HAL_DMA_Start_IT+0xb6>
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	2201      	movs	r2, #1
 800625c:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8006266:	2b01      	cmp	r3, #1
 8006268:	d13a      	bne.n	80062e0 <HAL_DMA_Start_IT+0xa8>
  {
  	/* Change DMA peripheral state */  
  	hdma->State = HAL_DMA_STATE_BUSY;
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	2202      	movs	r2, #2
 800626e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	2200      	movs	r2, #0
 8006276:	639a      	str	r2, [r3, #56]	; 0x38
  	
  	/* Disable the peripheral */
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	681a      	ldr	r2, [r3, #0]
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	f022 0201 	bic.w	r2, r2, #1
 8006286:	601a      	str	r2, [r3, #0]
  	
  	/* Configure the source, destination address and the data length */  
  	DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8006288:	683b      	ldr	r3, [r7, #0]
 800628a:	687a      	ldr	r2, [r7, #4]
 800628c:	68b9      	ldr	r1, [r7, #8]
 800628e:	68f8      	ldr	r0, [r7, #12]
 8006290:	f000 f90d 	bl	80064ae <DMA_SetConfig>
  	
  	/* Enable the transfer complete, & transfer error interrupts */
  	/* Half transfer interrupt is optional: enable it only if associated callback is available */
    if(NULL != hdma->XferHalfCpltCallback )
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006298:	2b00      	cmp	r3, #0
 800629a:	d008      	beq.n	80062ae <HAL_DMA_Start_IT+0x76>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	681a      	ldr	r2, [r3, #0]
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	f042 020e 	orr.w	r2, r2, #14
 80062aa:	601a      	str	r2, [r3, #0]
 80062ac:	e00f      	b.n	80062ce <HAL_DMA_Start_IT+0x96>
    }
  	else
  	{
  		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	681a      	ldr	r2, [r3, #0]
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	f042 020a 	orr.w	r2, r2, #10
 80062bc:	601a      	str	r2, [r3, #0]
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	681a      	ldr	r2, [r3, #0]
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	f022 0204 	bic.w	r2, r2, #4
 80062cc:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Enable the Peripheral */
  	hdma->Instance->CCR |= DMA_CCR_EN;
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	681a      	ldr	r2, [r3, #0]
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	f042 0201 	orr.w	r2, r2, #1
 80062dc:	601a      	str	r2, [r3, #0]
 80062de:	e005      	b.n	80062ec <HAL_DMA_Start_IT+0xb4>
  }
  else
  {
  	/* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	2200      	movs	r2, #0
 80062e4:	f883 2020 	strb.w	r2, [r3, #32]
  
    /* Remain BUSY */
    status = HAL_BUSY;
 80062e8:	2302      	movs	r3, #2
 80062ea:	75fb      	strb	r3, [r7, #23]
  }     
  
  return status;    
 80062ec:	7dfb      	ldrb	r3, [r7, #23]
} 
 80062ee:	4618      	mov	r0, r3
 80062f0:	3718      	adds	r7, #24
 80062f2:	46bd      	mov	sp, r7
 80062f4:	bd80      	pop	{r7, pc}

080062f6 <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80062f6:	b480      	push	{r7}
 80062f8:	b083      	sub	sp, #12
 80062fa:	af00      	add	r7, sp, #0
 80062fc:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8006304:	2b02      	cmp	r3, #2
 8006306:	d008      	beq.n	800631a <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	2204      	movs	r2, #4
 800630c:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	2200      	movs	r2, #0
 8006312:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8006316:	2301      	movs	r3, #1
 8006318:	e020      	b.n	800635c <HAL_DMA_Abort+0x66>
  }
  else
  {
    /* Disable DMA IT */
     hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	681a      	ldr	r2, [r3, #0]
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	f022 020e 	bic.w	r2, r2, #14
 8006328:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	681a      	ldr	r2, [r3, #0]
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	f022 0201 	bic.w	r2, r2, #1
 8006338:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006342:	2101      	movs	r1, #1
 8006344:	fa01 f202 	lsl.w	r2, r1, r2
 8006348:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	2201      	movs	r2, #1
 800634e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	2200      	movs	r2, #0
 8006356:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 800635a:	2300      	movs	r3, #0
}
 800635c:	4618      	mov	r0, r3
 800635e:	370c      	adds	r7, #12
 8006360:	46bd      	mov	sp, r7
 8006362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006366:	4770      	bx	lr

08006368 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8006368:	b580      	push	{r7, lr}
 800636a:	b084      	sub	sp, #16
 800636c:	af00      	add	r7, sp, #0
 800636e:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006384:	2204      	movs	r2, #4
 8006386:	409a      	lsls	r2, r3
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	4013      	ands	r3, r2
 800638c:	2b00      	cmp	r3, #0
 800638e:	d024      	beq.n	80063da <HAL_DMA_IRQHandler+0x72>
 8006390:	68bb      	ldr	r3, [r7, #8]
 8006392:	f003 0304 	and.w	r3, r3, #4
 8006396:	2b00      	cmp	r3, #0
 8006398:	d01f      	beq.n	80063da <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	f003 0320 	and.w	r3, r3, #32
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	d107      	bne.n	80063b8 <HAL_DMA_IRQHandler+0x50>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	681a      	ldr	r2, [r3, #0]
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	f022 0204 	bic.w	r2, r2, #4
 80063b6:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80063c0:	2104      	movs	r1, #4
 80063c2:	fa01 f202 	lsl.w	r2, r1, r2
 80063c6:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063cc:	2b00      	cmp	r3, #0
 80063ce:	d06a      	beq.n	80064a6 <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063d4:	6878      	ldr	r0, [r7, #4]
 80063d6:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 80063d8:	e065      	b.n	80064a6 <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063de:	2202      	movs	r2, #2
 80063e0:	409a      	lsls	r2, r3
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	4013      	ands	r3, r2
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	d02c      	beq.n	8006444 <HAL_DMA_IRQHandler+0xdc>
 80063ea:	68bb      	ldr	r3, [r7, #8]
 80063ec:	f003 0302 	and.w	r3, r3, #2
 80063f0:	2b00      	cmp	r3, #0
 80063f2:	d027      	beq.n	8006444 <HAL_DMA_IRQHandler+0xdc>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	f003 0320 	and.w	r3, r3, #32
 80063fe:	2b00      	cmp	r3, #0
 8006400:	d10b      	bne.n	800641a <HAL_DMA_IRQHandler+0xb2>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	681a      	ldr	r2, [r3, #0]
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	f022 020a 	bic.w	r2, r2, #10
 8006410:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	2201      	movs	r2, #1
 8006416:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006422:	2102      	movs	r1, #2
 8006424:	fa01 f202 	lsl.w	r2, r1, r2
 8006428:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	2200      	movs	r2, #0
 800642e:	f883 2020 	strb.w	r2, [r3, #32]
  	
  	if(hdma->XferCpltCallback != NULL)
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006436:	2b00      	cmp	r3, #0
 8006438:	d035      	beq.n	80064a6 <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800643e:	6878      	ldr	r0, [r7, #4]
 8006440:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 8006442:	e030      	b.n	80064a6 <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006448:	2208      	movs	r2, #8
 800644a:	409a      	lsls	r2, r3
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	4013      	ands	r3, r2
 8006450:	2b00      	cmp	r3, #0
 8006452:	d028      	beq.n	80064a6 <HAL_DMA_IRQHandler+0x13e>
 8006454:	68bb      	ldr	r3, [r7, #8]
 8006456:	f003 0308 	and.w	r3, r3, #8
 800645a:	2b00      	cmp	r3, #0
 800645c:	d023      	beq.n	80064a6 <HAL_DMA_IRQHandler+0x13e>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	681a      	ldr	r2, [r3, #0]
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	f022 020e 	bic.w	r2, r2, #14
 800646c:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006476:	2101      	movs	r1, #1
 8006478:	fa01 f202 	lsl.w	r2, r1, r2
 800647c:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	2201      	movs	r2, #1
 8006482:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	2201      	movs	r2, #1
 8006488:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	2200      	movs	r2, #0
 8006490:	f883 2020 	strb.w	r2, [r3, #32]
    
    if(hdma->XferErrorCallback != NULL)
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006498:	2b00      	cmp	r3, #0
 800649a:	d004      	beq.n	80064a6 <HAL_DMA_IRQHandler+0x13e>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80064a0:	6878      	ldr	r0, [r7, #4]
 80064a2:	4798      	blx	r3
    }
  }
}  
 80064a4:	e7ff      	b.n	80064a6 <HAL_DMA_IRQHandler+0x13e>
 80064a6:	bf00      	nop
 80064a8:	3710      	adds	r7, #16
 80064aa:	46bd      	mov	sp, r7
 80064ac:	bd80      	pop	{r7, pc}

080064ae <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80064ae:	b480      	push	{r7}
 80064b0:	b085      	sub	sp, #20
 80064b2:	af00      	add	r7, sp, #0
 80064b4:	60f8      	str	r0, [r7, #12]
 80064b6:	60b9      	str	r1, [r7, #8]
 80064b8:	607a      	str	r2, [r7, #4]
 80064ba:	603b      	str	r3, [r7, #0]
	/* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80064c4:	2101      	movs	r1, #1
 80064c6:	fa01 f202 	lsl.w	r2, r1, r2
 80064ca:	605a      	str	r2, [r3, #4]
  
  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	683a      	ldr	r2, [r7, #0]
 80064d2:	605a      	str	r2, [r3, #4]
  
  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	685b      	ldr	r3, [r3, #4]
 80064d8:	2b10      	cmp	r3, #16
 80064da:	d108      	bne.n	80064ee <DMA_SetConfig+0x40>
  {   
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	687a      	ldr	r2, [r7, #4]
 80064e2:	609a      	str	r2, [r3, #8]
    
    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	68ba      	ldr	r2, [r7, #8]
 80064ea:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;
    
    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80064ec:	e007      	b.n	80064fe <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	68ba      	ldr	r2, [r7, #8]
 80064f4:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	687a      	ldr	r2, [r7, #4]
 80064fc:	60da      	str	r2, [r3, #12]
}
 80064fe:	bf00      	nop
 8006500:	3714      	adds	r7, #20
 8006502:	46bd      	mov	sp, r7
 8006504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006508:	4770      	bx	lr
	...

0800650c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800650c:	b480      	push	{r7}
 800650e:	b083      	sub	sp, #12
 8006510:	af00      	add	r7, sp, #0
 8006512:	6078      	str	r0, [r7, #4]
#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	461a      	mov	r2, r3
 800651a:	4b14      	ldr	r3, [pc, #80]	; (800656c <DMA_CalcBaseAndBitshift+0x60>)
 800651c:	429a      	cmp	r2, r3
 800651e:	d80f      	bhi.n	8006540 <DMA_CalcBaseAndBitshift+0x34>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	461a      	mov	r2, r3
 8006526:	4b12      	ldr	r3, [pc, #72]	; (8006570 <DMA_CalcBaseAndBitshift+0x64>)
 8006528:	4413      	add	r3, r2
 800652a:	4a12      	ldr	r2, [pc, #72]	; (8006574 <DMA_CalcBaseAndBitshift+0x68>)
 800652c:	fba2 2303 	umull	r2, r3, r2, r3
 8006530:	091b      	lsrs	r3, r3, #4
 8006532:	009a      	lsls	r2, r3, #2
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA1;
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	4a0f      	ldr	r2, [pc, #60]	; (8006578 <DMA_CalcBaseAndBitshift+0x6c>)
 800653c:	63da      	str	r2, [r3, #60]	; 0x3c
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif
}
 800653e:	e00e      	b.n	800655e <DMA_CalcBaseAndBitshift+0x52>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	461a      	mov	r2, r3
 8006546:	4b0d      	ldr	r3, [pc, #52]	; (800657c <DMA_CalcBaseAndBitshift+0x70>)
 8006548:	4413      	add	r3, r2
 800654a:	4a0a      	ldr	r2, [pc, #40]	; (8006574 <DMA_CalcBaseAndBitshift+0x68>)
 800654c:	fba2 2303 	umull	r2, r3, r2, r3
 8006550:	091b      	lsrs	r3, r3, #4
 8006552:	009a      	lsls	r2, r3, #2
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA2;
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	4a09      	ldr	r2, [pc, #36]	; (8006580 <DMA_CalcBaseAndBitshift+0x74>)
 800655c:	63da      	str	r2, [r3, #60]	; 0x3c
}
 800655e:	bf00      	nop
 8006560:	370c      	adds	r7, #12
 8006562:	46bd      	mov	sp, r7
 8006564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006568:	4770      	bx	lr
 800656a:	bf00      	nop
 800656c:	40020407 	.word	0x40020407
 8006570:	bffdfff8 	.word	0xbffdfff8
 8006574:	cccccccd 	.word	0xcccccccd
 8006578:	40020000 	.word	0x40020000
 800657c:	bffdfbf8 	.word	0xbffdfbf8
 8006580:	40020400 	.word	0x40020400

08006584 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006584:	b480      	push	{r7}
 8006586:	b087      	sub	sp, #28
 8006588:	af00      	add	r7, sp, #0
 800658a:	6078      	str	r0, [r7, #4]
 800658c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800658e:	2300      	movs	r3, #0
 8006590:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8006592:	e154      	b.n	800683e <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8006594:	683b      	ldr	r3, [r7, #0]
 8006596:	681a      	ldr	r2, [r3, #0]
 8006598:	2101      	movs	r1, #1
 800659a:	697b      	ldr	r3, [r7, #20]
 800659c:	fa01 f303 	lsl.w	r3, r1, r3
 80065a0:	4013      	ands	r3, r2
 80065a2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80065a4:	68fb      	ldr	r3, [r7, #12]
 80065a6:	2b00      	cmp	r3, #0
 80065a8:	f000 8146 	beq.w	8006838 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80065ac:	683b      	ldr	r3, [r7, #0]
 80065ae:	685b      	ldr	r3, [r3, #4]
 80065b0:	f003 0303 	and.w	r3, r3, #3
 80065b4:	2b01      	cmp	r3, #1
 80065b6:	d005      	beq.n	80065c4 <HAL_GPIO_Init+0x40>
 80065b8:	683b      	ldr	r3, [r7, #0]
 80065ba:	685b      	ldr	r3, [r3, #4]
 80065bc:	f003 0303 	and.w	r3, r3, #3
 80065c0:	2b02      	cmp	r3, #2
 80065c2:	d130      	bne.n	8006626 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	689b      	ldr	r3, [r3, #8]
 80065c8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80065ca:	697b      	ldr	r3, [r7, #20]
 80065cc:	005b      	lsls	r3, r3, #1
 80065ce:	2203      	movs	r2, #3
 80065d0:	fa02 f303 	lsl.w	r3, r2, r3
 80065d4:	43db      	mvns	r3, r3
 80065d6:	693a      	ldr	r2, [r7, #16]
 80065d8:	4013      	ands	r3, r2
 80065da:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80065dc:	683b      	ldr	r3, [r7, #0]
 80065de:	68da      	ldr	r2, [r3, #12]
 80065e0:	697b      	ldr	r3, [r7, #20]
 80065e2:	005b      	lsls	r3, r3, #1
 80065e4:	fa02 f303 	lsl.w	r3, r2, r3
 80065e8:	693a      	ldr	r2, [r7, #16]
 80065ea:	4313      	orrs	r3, r2
 80065ec:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	693a      	ldr	r2, [r7, #16]
 80065f2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	685b      	ldr	r3, [r3, #4]
 80065f8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80065fa:	2201      	movs	r2, #1
 80065fc:	697b      	ldr	r3, [r7, #20]
 80065fe:	fa02 f303 	lsl.w	r3, r2, r3
 8006602:	43db      	mvns	r3, r3
 8006604:	693a      	ldr	r2, [r7, #16]
 8006606:	4013      	ands	r3, r2
 8006608:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800660a:	683b      	ldr	r3, [r7, #0]
 800660c:	685b      	ldr	r3, [r3, #4]
 800660e:	091b      	lsrs	r3, r3, #4
 8006610:	f003 0201 	and.w	r2, r3, #1
 8006614:	697b      	ldr	r3, [r7, #20]
 8006616:	fa02 f303 	lsl.w	r3, r2, r3
 800661a:	693a      	ldr	r2, [r7, #16]
 800661c:	4313      	orrs	r3, r2
 800661e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	693a      	ldr	r2, [r7, #16]
 8006624:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8006626:	683b      	ldr	r3, [r7, #0]
 8006628:	685b      	ldr	r3, [r3, #4]
 800662a:	f003 0303 	and.w	r3, r3, #3
 800662e:	2b03      	cmp	r3, #3
 8006630:	d017      	beq.n	8006662 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	68db      	ldr	r3, [r3, #12]
 8006636:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8006638:	697b      	ldr	r3, [r7, #20]
 800663a:	005b      	lsls	r3, r3, #1
 800663c:	2203      	movs	r2, #3
 800663e:	fa02 f303 	lsl.w	r3, r2, r3
 8006642:	43db      	mvns	r3, r3
 8006644:	693a      	ldr	r2, [r7, #16]
 8006646:	4013      	ands	r3, r2
 8006648:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800664a:	683b      	ldr	r3, [r7, #0]
 800664c:	689a      	ldr	r2, [r3, #8]
 800664e:	697b      	ldr	r3, [r7, #20]
 8006650:	005b      	lsls	r3, r3, #1
 8006652:	fa02 f303 	lsl.w	r3, r2, r3
 8006656:	693a      	ldr	r2, [r7, #16]
 8006658:	4313      	orrs	r3, r2
 800665a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	693a      	ldr	r2, [r7, #16]
 8006660:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006662:	683b      	ldr	r3, [r7, #0]
 8006664:	685b      	ldr	r3, [r3, #4]
 8006666:	f003 0303 	and.w	r3, r3, #3
 800666a:	2b02      	cmp	r3, #2
 800666c:	d123      	bne.n	80066b6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800666e:	697b      	ldr	r3, [r7, #20]
 8006670:	08da      	lsrs	r2, r3, #3
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	3208      	adds	r2, #8
 8006676:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800667a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800667c:	697b      	ldr	r3, [r7, #20]
 800667e:	f003 0307 	and.w	r3, r3, #7
 8006682:	009b      	lsls	r3, r3, #2
 8006684:	220f      	movs	r2, #15
 8006686:	fa02 f303 	lsl.w	r3, r2, r3
 800668a:	43db      	mvns	r3, r3
 800668c:	693a      	ldr	r2, [r7, #16]
 800668e:	4013      	ands	r3, r2
 8006690:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8006692:	683b      	ldr	r3, [r7, #0]
 8006694:	691a      	ldr	r2, [r3, #16]
 8006696:	697b      	ldr	r3, [r7, #20]
 8006698:	f003 0307 	and.w	r3, r3, #7
 800669c:	009b      	lsls	r3, r3, #2
 800669e:	fa02 f303 	lsl.w	r3, r2, r3
 80066a2:	693a      	ldr	r2, [r7, #16]
 80066a4:	4313      	orrs	r3, r2
 80066a6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80066a8:	697b      	ldr	r3, [r7, #20]
 80066aa:	08da      	lsrs	r2, r3, #3
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	3208      	adds	r2, #8
 80066b0:	6939      	ldr	r1, [r7, #16]
 80066b2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80066bc:	697b      	ldr	r3, [r7, #20]
 80066be:	005b      	lsls	r3, r3, #1
 80066c0:	2203      	movs	r2, #3
 80066c2:	fa02 f303 	lsl.w	r3, r2, r3
 80066c6:	43db      	mvns	r3, r3
 80066c8:	693a      	ldr	r2, [r7, #16]
 80066ca:	4013      	ands	r3, r2
 80066cc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80066ce:	683b      	ldr	r3, [r7, #0]
 80066d0:	685b      	ldr	r3, [r3, #4]
 80066d2:	f003 0203 	and.w	r2, r3, #3
 80066d6:	697b      	ldr	r3, [r7, #20]
 80066d8:	005b      	lsls	r3, r3, #1
 80066da:	fa02 f303 	lsl.w	r3, r2, r3
 80066de:	693a      	ldr	r2, [r7, #16]
 80066e0:	4313      	orrs	r3, r2
 80066e2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	693a      	ldr	r2, [r7, #16]
 80066e8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80066ea:	683b      	ldr	r3, [r7, #0]
 80066ec:	685b      	ldr	r3, [r3, #4]
 80066ee:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80066f2:	2b00      	cmp	r3, #0
 80066f4:	f000 80a0 	beq.w	8006838 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80066f8:	4b58      	ldr	r3, [pc, #352]	; (800685c <HAL_GPIO_Init+0x2d8>)
 80066fa:	699b      	ldr	r3, [r3, #24]
 80066fc:	4a57      	ldr	r2, [pc, #348]	; (800685c <HAL_GPIO_Init+0x2d8>)
 80066fe:	f043 0301 	orr.w	r3, r3, #1
 8006702:	6193      	str	r3, [r2, #24]
 8006704:	4b55      	ldr	r3, [pc, #340]	; (800685c <HAL_GPIO_Init+0x2d8>)
 8006706:	699b      	ldr	r3, [r3, #24]
 8006708:	f003 0301 	and.w	r3, r3, #1
 800670c:	60bb      	str	r3, [r7, #8]
 800670e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8006710:	4a53      	ldr	r2, [pc, #332]	; (8006860 <HAL_GPIO_Init+0x2dc>)
 8006712:	697b      	ldr	r3, [r7, #20]
 8006714:	089b      	lsrs	r3, r3, #2
 8006716:	3302      	adds	r3, #2
 8006718:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800671c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800671e:	697b      	ldr	r3, [r7, #20]
 8006720:	f003 0303 	and.w	r3, r3, #3
 8006724:	009b      	lsls	r3, r3, #2
 8006726:	220f      	movs	r2, #15
 8006728:	fa02 f303 	lsl.w	r3, r2, r3
 800672c:	43db      	mvns	r3, r3
 800672e:	693a      	ldr	r2, [r7, #16]
 8006730:	4013      	ands	r3, r2
 8006732:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800673a:	d019      	beq.n	8006770 <HAL_GPIO_Init+0x1ec>
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	4a49      	ldr	r2, [pc, #292]	; (8006864 <HAL_GPIO_Init+0x2e0>)
 8006740:	4293      	cmp	r3, r2
 8006742:	d013      	beq.n	800676c <HAL_GPIO_Init+0x1e8>
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	4a48      	ldr	r2, [pc, #288]	; (8006868 <HAL_GPIO_Init+0x2e4>)
 8006748:	4293      	cmp	r3, r2
 800674a:	d00d      	beq.n	8006768 <HAL_GPIO_Init+0x1e4>
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	4a47      	ldr	r2, [pc, #284]	; (800686c <HAL_GPIO_Init+0x2e8>)
 8006750:	4293      	cmp	r3, r2
 8006752:	d007      	beq.n	8006764 <HAL_GPIO_Init+0x1e0>
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	4a46      	ldr	r2, [pc, #280]	; (8006870 <HAL_GPIO_Init+0x2ec>)
 8006758:	4293      	cmp	r3, r2
 800675a:	d101      	bne.n	8006760 <HAL_GPIO_Init+0x1dc>
 800675c:	2304      	movs	r3, #4
 800675e:	e008      	b.n	8006772 <HAL_GPIO_Init+0x1ee>
 8006760:	2305      	movs	r3, #5
 8006762:	e006      	b.n	8006772 <HAL_GPIO_Init+0x1ee>
 8006764:	2303      	movs	r3, #3
 8006766:	e004      	b.n	8006772 <HAL_GPIO_Init+0x1ee>
 8006768:	2302      	movs	r3, #2
 800676a:	e002      	b.n	8006772 <HAL_GPIO_Init+0x1ee>
 800676c:	2301      	movs	r3, #1
 800676e:	e000      	b.n	8006772 <HAL_GPIO_Init+0x1ee>
 8006770:	2300      	movs	r3, #0
 8006772:	697a      	ldr	r2, [r7, #20]
 8006774:	f002 0203 	and.w	r2, r2, #3
 8006778:	0092      	lsls	r2, r2, #2
 800677a:	4093      	lsls	r3, r2
 800677c:	693a      	ldr	r2, [r7, #16]
 800677e:	4313      	orrs	r3, r2
 8006780:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8006782:	4937      	ldr	r1, [pc, #220]	; (8006860 <HAL_GPIO_Init+0x2dc>)
 8006784:	697b      	ldr	r3, [r7, #20]
 8006786:	089b      	lsrs	r3, r3, #2
 8006788:	3302      	adds	r3, #2
 800678a:	693a      	ldr	r2, [r7, #16]
 800678c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8006790:	4b38      	ldr	r3, [pc, #224]	; (8006874 <HAL_GPIO_Init+0x2f0>)
 8006792:	689b      	ldr	r3, [r3, #8]
 8006794:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	43db      	mvns	r3, r3
 800679a:	693a      	ldr	r2, [r7, #16]
 800679c:	4013      	ands	r3, r2
 800679e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80067a0:	683b      	ldr	r3, [r7, #0]
 80067a2:	685b      	ldr	r3, [r3, #4]
 80067a4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80067a8:	2b00      	cmp	r3, #0
 80067aa:	d003      	beq.n	80067b4 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 80067ac:	693a      	ldr	r2, [r7, #16]
 80067ae:	68fb      	ldr	r3, [r7, #12]
 80067b0:	4313      	orrs	r3, r2
 80067b2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80067b4:	4a2f      	ldr	r2, [pc, #188]	; (8006874 <HAL_GPIO_Init+0x2f0>)
 80067b6:	693b      	ldr	r3, [r7, #16]
 80067b8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80067ba:	4b2e      	ldr	r3, [pc, #184]	; (8006874 <HAL_GPIO_Init+0x2f0>)
 80067bc:	68db      	ldr	r3, [r3, #12]
 80067be:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80067c0:	68fb      	ldr	r3, [r7, #12]
 80067c2:	43db      	mvns	r3, r3
 80067c4:	693a      	ldr	r2, [r7, #16]
 80067c6:	4013      	ands	r3, r2
 80067c8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80067ca:	683b      	ldr	r3, [r7, #0]
 80067cc:	685b      	ldr	r3, [r3, #4]
 80067ce:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80067d2:	2b00      	cmp	r3, #0
 80067d4:	d003      	beq.n	80067de <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 80067d6:	693a      	ldr	r2, [r7, #16]
 80067d8:	68fb      	ldr	r3, [r7, #12]
 80067da:	4313      	orrs	r3, r2
 80067dc:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80067de:	4a25      	ldr	r2, [pc, #148]	; (8006874 <HAL_GPIO_Init+0x2f0>)
 80067e0:	693b      	ldr	r3, [r7, #16]
 80067e2:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80067e4:	4b23      	ldr	r3, [pc, #140]	; (8006874 <HAL_GPIO_Init+0x2f0>)
 80067e6:	685b      	ldr	r3, [r3, #4]
 80067e8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80067ea:	68fb      	ldr	r3, [r7, #12]
 80067ec:	43db      	mvns	r3, r3
 80067ee:	693a      	ldr	r2, [r7, #16]
 80067f0:	4013      	ands	r3, r2
 80067f2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80067f4:	683b      	ldr	r3, [r7, #0]
 80067f6:	685b      	ldr	r3, [r3, #4]
 80067f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80067fc:	2b00      	cmp	r3, #0
 80067fe:	d003      	beq.n	8006808 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8006800:	693a      	ldr	r2, [r7, #16]
 8006802:	68fb      	ldr	r3, [r7, #12]
 8006804:	4313      	orrs	r3, r2
 8006806:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8006808:	4a1a      	ldr	r2, [pc, #104]	; (8006874 <HAL_GPIO_Init+0x2f0>)
 800680a:	693b      	ldr	r3, [r7, #16]
 800680c:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800680e:	4b19      	ldr	r3, [pc, #100]	; (8006874 <HAL_GPIO_Init+0x2f0>)
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	43db      	mvns	r3, r3
 8006818:	693a      	ldr	r2, [r7, #16]
 800681a:	4013      	ands	r3, r2
 800681c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800681e:	683b      	ldr	r3, [r7, #0]
 8006820:	685b      	ldr	r3, [r3, #4]
 8006822:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006826:	2b00      	cmp	r3, #0
 8006828:	d003      	beq.n	8006832 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800682a:	693a      	ldr	r2, [r7, #16]
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	4313      	orrs	r3, r2
 8006830:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8006832:	4a10      	ldr	r2, [pc, #64]	; (8006874 <HAL_GPIO_Init+0x2f0>)
 8006834:	693b      	ldr	r3, [r7, #16]
 8006836:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8006838:	697b      	ldr	r3, [r7, #20]
 800683a:	3301      	adds	r3, #1
 800683c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800683e:	683b      	ldr	r3, [r7, #0]
 8006840:	681a      	ldr	r2, [r3, #0]
 8006842:	697b      	ldr	r3, [r7, #20]
 8006844:	fa22 f303 	lsr.w	r3, r2, r3
 8006848:	2b00      	cmp	r3, #0
 800684a:	f47f aea3 	bne.w	8006594 <HAL_GPIO_Init+0x10>
  }
}
 800684e:	bf00      	nop
 8006850:	bf00      	nop
 8006852:	371c      	adds	r7, #28
 8006854:	46bd      	mov	sp, r7
 8006856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800685a:	4770      	bx	lr
 800685c:	40021000 	.word	0x40021000
 8006860:	40010000 	.word	0x40010000
 8006864:	48000400 	.word	0x48000400
 8006868:	48000800 	.word	0x48000800
 800686c:	48000c00 	.word	0x48000c00
 8006870:	48001000 	.word	0x48001000
 8006874:	40010400 	.word	0x40010400

08006878 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006878:	b480      	push	{r7}
 800687a:	b083      	sub	sp, #12
 800687c:	af00      	add	r7, sp, #0
 800687e:	6078      	str	r0, [r7, #4]
 8006880:	460b      	mov	r3, r1
 8006882:	807b      	strh	r3, [r7, #2]
 8006884:	4613      	mov	r3, r2
 8006886:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8006888:	787b      	ldrb	r3, [r7, #1]
 800688a:	2b00      	cmp	r3, #0
 800688c:	d003      	beq.n	8006896 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800688e:	887a      	ldrh	r2, [r7, #2]
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8006894:	e002      	b.n	800689c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8006896:	887a      	ldrh	r2, [r7, #2]
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800689c:	bf00      	nop
 800689e:	370c      	adds	r7, #12
 80068a0:	46bd      	mov	sp, r7
 80068a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068a6:	4770      	bx	lr

080068a8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80068a8:	b580      	push	{r7, lr}
 80068aa:	b082      	sub	sp, #8
 80068ac:	af00      	add	r7, sp, #0
 80068ae:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	2b00      	cmp	r3, #0
 80068b4:	d101      	bne.n	80068ba <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80068b6:	2301      	movs	r3, #1
 80068b8:	e081      	b.n	80069be <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80068c0:	b2db      	uxtb	r3, r3
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	d106      	bne.n	80068d4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	2200      	movs	r2, #0
 80068ca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80068ce:	6878      	ldr	r0, [r7, #4]
 80068d0:	f7fd fc22 	bl	8004118 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	2224      	movs	r2, #36	; 0x24
 80068d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	681a      	ldr	r2, [r3, #0]
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	f022 0201 	bic.w	r2, r2, #1
 80068ea:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	685a      	ldr	r2, [r3, #4]
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80068f8:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	689a      	ldr	r2, [r3, #8]
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006908:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	68db      	ldr	r3, [r3, #12]
 800690e:	2b01      	cmp	r3, #1
 8006910:	d107      	bne.n	8006922 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	689a      	ldr	r2, [r3, #8]
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800691e:	609a      	str	r2, [r3, #8]
 8006920:	e006      	b.n	8006930 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	689a      	ldr	r2, [r3, #8]
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800692e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	68db      	ldr	r3, [r3, #12]
 8006934:	2b02      	cmp	r3, #2
 8006936:	d104      	bne.n	8006942 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006940:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	685b      	ldr	r3, [r3, #4]
 8006948:	687a      	ldr	r2, [r7, #4]
 800694a:	6812      	ldr	r2, [r2, #0]
 800694c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8006950:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006954:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	68da      	ldr	r2, [r3, #12]
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006964:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	691a      	ldr	r2, [r3, #16]
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	695b      	ldr	r3, [r3, #20]
 800696e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	699b      	ldr	r3, [r3, #24]
 8006976:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	430a      	orrs	r2, r1
 800697e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	69d9      	ldr	r1, [r3, #28]
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	6a1a      	ldr	r2, [r3, #32]
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	430a      	orrs	r2, r1
 800698e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	681a      	ldr	r2, [r3, #0]
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	f042 0201 	orr.w	r2, r2, #1
 800699e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	2200      	movs	r2, #0
 80069a4:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	2220      	movs	r2, #32
 80069aa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	2200      	movs	r2, #0
 80069b2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	2200      	movs	r2, #0
 80069b8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80069bc:	2300      	movs	r3, #0
}
 80069be:	4618      	mov	r0, r3
 80069c0:	3708      	adds	r7, #8
 80069c2:	46bd      	mov	sp, r7
 80069c4:	bd80      	pop	{r7, pc}
	...

080069c8 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80069c8:	b580      	push	{r7, lr}
 80069ca:	b088      	sub	sp, #32
 80069cc:	af02      	add	r7, sp, #8
 80069ce:	60f8      	str	r0, [r7, #12]
 80069d0:	4608      	mov	r0, r1
 80069d2:	4611      	mov	r1, r2
 80069d4:	461a      	mov	r2, r3
 80069d6:	4603      	mov	r3, r0
 80069d8:	817b      	strh	r3, [r7, #10]
 80069da:	460b      	mov	r3, r1
 80069dc:	813b      	strh	r3, [r7, #8]
 80069de:	4613      	mov	r3, r2
 80069e0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80069e2:	68fb      	ldr	r3, [r7, #12]
 80069e4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80069e8:	b2db      	uxtb	r3, r3
 80069ea:	2b20      	cmp	r3, #32
 80069ec:	f040 80f9 	bne.w	8006be2 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 80069f0:	6a3b      	ldr	r3, [r7, #32]
 80069f2:	2b00      	cmp	r3, #0
 80069f4:	d002      	beq.n	80069fc <HAL_I2C_Mem_Write+0x34>
 80069f6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80069f8:	2b00      	cmp	r3, #0
 80069fa:	d105      	bne.n	8006a08 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80069fc:	68fb      	ldr	r3, [r7, #12]
 80069fe:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006a02:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8006a04:	2301      	movs	r3, #1
 8006a06:	e0ed      	b.n	8006be4 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006a08:	68fb      	ldr	r3, [r7, #12]
 8006a0a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006a0e:	2b01      	cmp	r3, #1
 8006a10:	d101      	bne.n	8006a16 <HAL_I2C_Mem_Write+0x4e>
 8006a12:	2302      	movs	r3, #2
 8006a14:	e0e6      	b.n	8006be4 <HAL_I2C_Mem_Write+0x21c>
 8006a16:	68fb      	ldr	r3, [r7, #12]
 8006a18:	2201      	movs	r2, #1
 8006a1a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8006a1e:	f7fe f8b7 	bl	8004b90 <HAL_GetTick>
 8006a22:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8006a24:	697b      	ldr	r3, [r7, #20]
 8006a26:	9300      	str	r3, [sp, #0]
 8006a28:	2319      	movs	r3, #25
 8006a2a:	2201      	movs	r2, #1
 8006a2c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006a30:	68f8      	ldr	r0, [r7, #12]
 8006a32:	f000 f955 	bl	8006ce0 <I2C_WaitOnFlagUntilTimeout>
 8006a36:	4603      	mov	r3, r0
 8006a38:	2b00      	cmp	r3, #0
 8006a3a:	d001      	beq.n	8006a40 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8006a3c:	2301      	movs	r3, #1
 8006a3e:	e0d1      	b.n	8006be4 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8006a40:	68fb      	ldr	r3, [r7, #12]
 8006a42:	2221      	movs	r2, #33	; 0x21
 8006a44:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	2240      	movs	r2, #64	; 0x40
 8006a4c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006a50:	68fb      	ldr	r3, [r7, #12]
 8006a52:	2200      	movs	r2, #0
 8006a54:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8006a56:	68fb      	ldr	r3, [r7, #12]
 8006a58:	6a3a      	ldr	r2, [r7, #32]
 8006a5a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8006a5c:	68fb      	ldr	r3, [r7, #12]
 8006a5e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8006a60:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8006a62:	68fb      	ldr	r3, [r7, #12]
 8006a64:	2200      	movs	r2, #0
 8006a66:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006a68:	88f8      	ldrh	r0, [r7, #6]
 8006a6a:	893a      	ldrh	r2, [r7, #8]
 8006a6c:	8979      	ldrh	r1, [r7, #10]
 8006a6e:	697b      	ldr	r3, [r7, #20]
 8006a70:	9301      	str	r3, [sp, #4]
 8006a72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a74:	9300      	str	r3, [sp, #0]
 8006a76:	4603      	mov	r3, r0
 8006a78:	68f8      	ldr	r0, [r7, #12]
 8006a7a:	f000 f8b9 	bl	8006bf0 <I2C_RequestMemoryWrite>
 8006a7e:	4603      	mov	r3, r0
 8006a80:	2b00      	cmp	r3, #0
 8006a82:	d005      	beq.n	8006a90 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006a84:	68fb      	ldr	r3, [r7, #12]
 8006a86:	2200      	movs	r2, #0
 8006a88:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8006a8c:	2301      	movs	r3, #1
 8006a8e:	e0a9      	b.n	8006be4 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006a90:	68fb      	ldr	r3, [r7, #12]
 8006a92:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006a94:	b29b      	uxth	r3, r3
 8006a96:	2bff      	cmp	r3, #255	; 0xff
 8006a98:	d90e      	bls.n	8006ab8 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8006a9a:	68fb      	ldr	r3, [r7, #12]
 8006a9c:	22ff      	movs	r2, #255	; 0xff
 8006a9e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8006aa0:	68fb      	ldr	r3, [r7, #12]
 8006aa2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006aa4:	b2da      	uxtb	r2, r3
 8006aa6:	8979      	ldrh	r1, [r7, #10]
 8006aa8:	2300      	movs	r3, #0
 8006aaa:	9300      	str	r3, [sp, #0]
 8006aac:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006ab0:	68f8      	ldr	r0, [r7, #12]
 8006ab2:	f000 facf 	bl	8007054 <I2C_TransferConfig>
 8006ab6:	e00f      	b.n	8006ad8 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8006ab8:	68fb      	ldr	r3, [r7, #12]
 8006aba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006abc:	b29a      	uxth	r2, r3
 8006abe:	68fb      	ldr	r3, [r7, #12]
 8006ac0:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8006ac2:	68fb      	ldr	r3, [r7, #12]
 8006ac4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006ac6:	b2da      	uxtb	r2, r3
 8006ac8:	8979      	ldrh	r1, [r7, #10]
 8006aca:	2300      	movs	r3, #0
 8006acc:	9300      	str	r3, [sp, #0]
 8006ace:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006ad2:	68f8      	ldr	r0, [r7, #12]
 8006ad4:	f000 fabe 	bl	8007054 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006ad8:	697a      	ldr	r2, [r7, #20]
 8006ada:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006adc:	68f8      	ldr	r0, [r7, #12]
 8006ade:	f000 f94e 	bl	8006d7e <I2C_WaitOnTXISFlagUntilTimeout>
 8006ae2:	4603      	mov	r3, r0
 8006ae4:	2b00      	cmp	r3, #0
 8006ae6:	d001      	beq.n	8006aec <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8006ae8:	2301      	movs	r3, #1
 8006aea:	e07b      	b.n	8006be4 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8006aec:	68fb      	ldr	r3, [r7, #12]
 8006aee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006af0:	781a      	ldrb	r2, [r3, #0]
 8006af2:	68fb      	ldr	r3, [r7, #12]
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006af8:	68fb      	ldr	r3, [r7, #12]
 8006afa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006afc:	1c5a      	adds	r2, r3, #1
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8006b02:	68fb      	ldr	r3, [r7, #12]
 8006b04:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006b06:	b29b      	uxth	r3, r3
 8006b08:	3b01      	subs	r3, #1
 8006b0a:	b29a      	uxth	r2, r3
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8006b10:	68fb      	ldr	r3, [r7, #12]
 8006b12:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006b14:	3b01      	subs	r3, #1
 8006b16:	b29a      	uxth	r2, r3
 8006b18:	68fb      	ldr	r3, [r7, #12]
 8006b1a:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8006b1c:	68fb      	ldr	r3, [r7, #12]
 8006b1e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006b20:	b29b      	uxth	r3, r3
 8006b22:	2b00      	cmp	r3, #0
 8006b24:	d034      	beq.n	8006b90 <HAL_I2C_Mem_Write+0x1c8>
 8006b26:	68fb      	ldr	r3, [r7, #12]
 8006b28:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006b2a:	2b00      	cmp	r3, #0
 8006b2c:	d130      	bne.n	8006b90 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8006b2e:	697b      	ldr	r3, [r7, #20]
 8006b30:	9300      	str	r3, [sp, #0]
 8006b32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b34:	2200      	movs	r2, #0
 8006b36:	2180      	movs	r1, #128	; 0x80
 8006b38:	68f8      	ldr	r0, [r7, #12]
 8006b3a:	f000 f8d1 	bl	8006ce0 <I2C_WaitOnFlagUntilTimeout>
 8006b3e:	4603      	mov	r3, r0
 8006b40:	2b00      	cmp	r3, #0
 8006b42:	d001      	beq.n	8006b48 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8006b44:	2301      	movs	r3, #1
 8006b46:	e04d      	b.n	8006be4 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006b48:	68fb      	ldr	r3, [r7, #12]
 8006b4a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006b4c:	b29b      	uxth	r3, r3
 8006b4e:	2bff      	cmp	r3, #255	; 0xff
 8006b50:	d90e      	bls.n	8006b70 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	22ff      	movs	r2, #255	; 0xff
 8006b56:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8006b58:	68fb      	ldr	r3, [r7, #12]
 8006b5a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006b5c:	b2da      	uxtb	r2, r3
 8006b5e:	8979      	ldrh	r1, [r7, #10]
 8006b60:	2300      	movs	r3, #0
 8006b62:	9300      	str	r3, [sp, #0]
 8006b64:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006b68:	68f8      	ldr	r0, [r7, #12]
 8006b6a:	f000 fa73 	bl	8007054 <I2C_TransferConfig>
 8006b6e:	e00f      	b.n	8006b90 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8006b70:	68fb      	ldr	r3, [r7, #12]
 8006b72:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006b74:	b29a      	uxth	r2, r3
 8006b76:	68fb      	ldr	r3, [r7, #12]
 8006b78:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8006b7a:	68fb      	ldr	r3, [r7, #12]
 8006b7c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006b7e:	b2da      	uxtb	r2, r3
 8006b80:	8979      	ldrh	r1, [r7, #10]
 8006b82:	2300      	movs	r3, #0
 8006b84:	9300      	str	r3, [sp, #0]
 8006b86:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006b8a:	68f8      	ldr	r0, [r7, #12]
 8006b8c:	f000 fa62 	bl	8007054 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8006b90:	68fb      	ldr	r3, [r7, #12]
 8006b92:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006b94:	b29b      	uxth	r3, r3
 8006b96:	2b00      	cmp	r3, #0
 8006b98:	d19e      	bne.n	8006ad8 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006b9a:	697a      	ldr	r2, [r7, #20]
 8006b9c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006b9e:	68f8      	ldr	r0, [r7, #12]
 8006ba0:	f000 f934 	bl	8006e0c <I2C_WaitOnSTOPFlagUntilTimeout>
 8006ba4:	4603      	mov	r3, r0
 8006ba6:	2b00      	cmp	r3, #0
 8006ba8:	d001      	beq.n	8006bae <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8006baa:	2301      	movs	r3, #1
 8006bac:	e01a      	b.n	8006be4 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006bae:	68fb      	ldr	r3, [r7, #12]
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	2220      	movs	r2, #32
 8006bb4:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8006bb6:	68fb      	ldr	r3, [r7, #12]
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	6859      	ldr	r1, [r3, #4]
 8006bbc:	68fb      	ldr	r3, [r7, #12]
 8006bbe:	681a      	ldr	r2, [r3, #0]
 8006bc0:	4b0a      	ldr	r3, [pc, #40]	; (8006bec <HAL_I2C_Mem_Write+0x224>)
 8006bc2:	400b      	ands	r3, r1
 8006bc4:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8006bc6:	68fb      	ldr	r3, [r7, #12]
 8006bc8:	2220      	movs	r2, #32
 8006bca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8006bce:	68fb      	ldr	r3, [r7, #12]
 8006bd0:	2200      	movs	r2, #0
 8006bd2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006bd6:	68fb      	ldr	r3, [r7, #12]
 8006bd8:	2200      	movs	r2, #0
 8006bda:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8006bde:	2300      	movs	r3, #0
 8006be0:	e000      	b.n	8006be4 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8006be2:	2302      	movs	r3, #2
  }
}
 8006be4:	4618      	mov	r0, r3
 8006be6:	3718      	adds	r7, #24
 8006be8:	46bd      	mov	sp, r7
 8006bea:	bd80      	pop	{r7, pc}
 8006bec:	fe00e800 	.word	0xfe00e800

08006bf0 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8006bf0:	b580      	push	{r7, lr}
 8006bf2:	b086      	sub	sp, #24
 8006bf4:	af02      	add	r7, sp, #8
 8006bf6:	60f8      	str	r0, [r7, #12]
 8006bf8:	4608      	mov	r0, r1
 8006bfa:	4611      	mov	r1, r2
 8006bfc:	461a      	mov	r2, r3
 8006bfe:	4603      	mov	r3, r0
 8006c00:	817b      	strh	r3, [r7, #10]
 8006c02:	460b      	mov	r3, r1
 8006c04:	813b      	strh	r3, [r7, #8]
 8006c06:	4613      	mov	r3, r2
 8006c08:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8006c0a:	88fb      	ldrh	r3, [r7, #6]
 8006c0c:	b2da      	uxtb	r2, r3
 8006c0e:	8979      	ldrh	r1, [r7, #10]
 8006c10:	4b20      	ldr	r3, [pc, #128]	; (8006c94 <I2C_RequestMemoryWrite+0xa4>)
 8006c12:	9300      	str	r3, [sp, #0]
 8006c14:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006c18:	68f8      	ldr	r0, [r7, #12]
 8006c1a:	f000 fa1b 	bl	8007054 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006c1e:	69fa      	ldr	r2, [r7, #28]
 8006c20:	69b9      	ldr	r1, [r7, #24]
 8006c22:	68f8      	ldr	r0, [r7, #12]
 8006c24:	f000 f8ab 	bl	8006d7e <I2C_WaitOnTXISFlagUntilTimeout>
 8006c28:	4603      	mov	r3, r0
 8006c2a:	2b00      	cmp	r3, #0
 8006c2c:	d001      	beq.n	8006c32 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8006c2e:	2301      	movs	r3, #1
 8006c30:	e02c      	b.n	8006c8c <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006c32:	88fb      	ldrh	r3, [r7, #6]
 8006c34:	2b01      	cmp	r3, #1
 8006c36:	d105      	bne.n	8006c44 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006c38:	893b      	ldrh	r3, [r7, #8]
 8006c3a:	b2da      	uxtb	r2, r3
 8006c3c:	68fb      	ldr	r3, [r7, #12]
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	629a      	str	r2, [r3, #40]	; 0x28
 8006c42:	e015      	b.n	8006c70 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8006c44:	893b      	ldrh	r3, [r7, #8]
 8006c46:	0a1b      	lsrs	r3, r3, #8
 8006c48:	b29b      	uxth	r3, r3
 8006c4a:	b2da      	uxtb	r2, r3
 8006c4c:	68fb      	ldr	r3, [r7, #12]
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006c52:	69fa      	ldr	r2, [r7, #28]
 8006c54:	69b9      	ldr	r1, [r7, #24]
 8006c56:	68f8      	ldr	r0, [r7, #12]
 8006c58:	f000 f891 	bl	8006d7e <I2C_WaitOnTXISFlagUntilTimeout>
 8006c5c:	4603      	mov	r3, r0
 8006c5e:	2b00      	cmp	r3, #0
 8006c60:	d001      	beq.n	8006c66 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8006c62:	2301      	movs	r3, #1
 8006c64:	e012      	b.n	8006c8c <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006c66:	893b      	ldrh	r3, [r7, #8]
 8006c68:	b2da      	uxtb	r2, r3
 8006c6a:	68fb      	ldr	r3, [r7, #12]
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8006c70:	69fb      	ldr	r3, [r7, #28]
 8006c72:	9300      	str	r3, [sp, #0]
 8006c74:	69bb      	ldr	r3, [r7, #24]
 8006c76:	2200      	movs	r2, #0
 8006c78:	2180      	movs	r1, #128	; 0x80
 8006c7a:	68f8      	ldr	r0, [r7, #12]
 8006c7c:	f000 f830 	bl	8006ce0 <I2C_WaitOnFlagUntilTimeout>
 8006c80:	4603      	mov	r3, r0
 8006c82:	2b00      	cmp	r3, #0
 8006c84:	d001      	beq.n	8006c8a <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8006c86:	2301      	movs	r3, #1
 8006c88:	e000      	b.n	8006c8c <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8006c8a:	2300      	movs	r3, #0
}
 8006c8c:	4618      	mov	r0, r3
 8006c8e:	3710      	adds	r7, #16
 8006c90:	46bd      	mov	sp, r7
 8006c92:	bd80      	pop	{r7, pc}
 8006c94:	80002000 	.word	0x80002000

08006c98 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8006c98:	b480      	push	{r7}
 8006c9a:	b083      	sub	sp, #12
 8006c9c:	af00      	add	r7, sp, #0
 8006c9e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	699b      	ldr	r3, [r3, #24]
 8006ca6:	f003 0302 	and.w	r3, r3, #2
 8006caa:	2b02      	cmp	r3, #2
 8006cac:	d103      	bne.n	8006cb6 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	2200      	movs	r2, #0
 8006cb4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	699b      	ldr	r3, [r3, #24]
 8006cbc:	f003 0301 	and.w	r3, r3, #1
 8006cc0:	2b01      	cmp	r3, #1
 8006cc2:	d007      	beq.n	8006cd4 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	699a      	ldr	r2, [r3, #24]
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	f042 0201 	orr.w	r2, r2, #1
 8006cd2:	619a      	str	r2, [r3, #24]
  }
}
 8006cd4:	bf00      	nop
 8006cd6:	370c      	adds	r7, #12
 8006cd8:	46bd      	mov	sp, r7
 8006cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cde:	4770      	bx	lr

08006ce0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8006ce0:	b580      	push	{r7, lr}
 8006ce2:	b084      	sub	sp, #16
 8006ce4:	af00      	add	r7, sp, #0
 8006ce6:	60f8      	str	r0, [r7, #12]
 8006ce8:	60b9      	str	r1, [r7, #8]
 8006cea:	603b      	str	r3, [r7, #0]
 8006cec:	4613      	mov	r3, r2
 8006cee:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006cf0:	e031      	b.n	8006d56 <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006cf2:	683b      	ldr	r3, [r7, #0]
 8006cf4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006cf8:	d02d      	beq.n	8006d56 <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006cfa:	f7fd ff49 	bl	8004b90 <HAL_GetTick>
 8006cfe:	4602      	mov	r2, r0
 8006d00:	69bb      	ldr	r3, [r7, #24]
 8006d02:	1ad3      	subs	r3, r2, r3
 8006d04:	683a      	ldr	r2, [r7, #0]
 8006d06:	429a      	cmp	r2, r3
 8006d08:	d302      	bcc.n	8006d10 <I2C_WaitOnFlagUntilTimeout+0x30>
 8006d0a:	683b      	ldr	r3, [r7, #0]
 8006d0c:	2b00      	cmp	r3, #0
 8006d0e:	d122      	bne.n	8006d56 <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8006d10:	68fb      	ldr	r3, [r7, #12]
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	699a      	ldr	r2, [r3, #24]
 8006d16:	68bb      	ldr	r3, [r7, #8]
 8006d18:	4013      	ands	r3, r2
 8006d1a:	68ba      	ldr	r2, [r7, #8]
 8006d1c:	429a      	cmp	r2, r3
 8006d1e:	bf0c      	ite	eq
 8006d20:	2301      	moveq	r3, #1
 8006d22:	2300      	movne	r3, #0
 8006d24:	b2db      	uxtb	r3, r3
 8006d26:	461a      	mov	r2, r3
 8006d28:	79fb      	ldrb	r3, [r7, #7]
 8006d2a:	429a      	cmp	r2, r3
 8006d2c:	d113      	bne.n	8006d56 <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006d2e:	68fb      	ldr	r3, [r7, #12]
 8006d30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006d32:	f043 0220 	orr.w	r2, r3, #32
 8006d36:	68fb      	ldr	r3, [r7, #12]
 8006d38:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8006d3a:	68fb      	ldr	r3, [r7, #12]
 8006d3c:	2220      	movs	r2, #32
 8006d3e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8006d42:	68fb      	ldr	r3, [r7, #12]
 8006d44:	2200      	movs	r2, #0
 8006d46:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006d4a:	68fb      	ldr	r3, [r7, #12]
 8006d4c:	2200      	movs	r2, #0
 8006d4e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 8006d52:	2301      	movs	r3, #1
 8006d54:	e00f      	b.n	8006d76 <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006d56:	68fb      	ldr	r3, [r7, #12]
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	699a      	ldr	r2, [r3, #24]
 8006d5c:	68bb      	ldr	r3, [r7, #8]
 8006d5e:	4013      	ands	r3, r2
 8006d60:	68ba      	ldr	r2, [r7, #8]
 8006d62:	429a      	cmp	r2, r3
 8006d64:	bf0c      	ite	eq
 8006d66:	2301      	moveq	r3, #1
 8006d68:	2300      	movne	r3, #0
 8006d6a:	b2db      	uxtb	r3, r3
 8006d6c:	461a      	mov	r2, r3
 8006d6e:	79fb      	ldrb	r3, [r7, #7]
 8006d70:	429a      	cmp	r2, r3
 8006d72:	d0be      	beq.n	8006cf2 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006d74:	2300      	movs	r3, #0
}
 8006d76:	4618      	mov	r0, r3
 8006d78:	3710      	adds	r7, #16
 8006d7a:	46bd      	mov	sp, r7
 8006d7c:	bd80      	pop	{r7, pc}

08006d7e <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8006d7e:	b580      	push	{r7, lr}
 8006d80:	b084      	sub	sp, #16
 8006d82:	af00      	add	r7, sp, #0
 8006d84:	60f8      	str	r0, [r7, #12]
 8006d86:	60b9      	str	r1, [r7, #8]
 8006d88:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8006d8a:	e033      	b.n	8006df4 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8006d8c:	687a      	ldr	r2, [r7, #4]
 8006d8e:	68b9      	ldr	r1, [r7, #8]
 8006d90:	68f8      	ldr	r0, [r7, #12]
 8006d92:	f000 f87f 	bl	8006e94 <I2C_IsErrorOccurred>
 8006d96:	4603      	mov	r3, r0
 8006d98:	2b00      	cmp	r3, #0
 8006d9a:	d001      	beq.n	8006da0 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8006d9c:	2301      	movs	r3, #1
 8006d9e:	e031      	b.n	8006e04 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006da0:	68bb      	ldr	r3, [r7, #8]
 8006da2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006da6:	d025      	beq.n	8006df4 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006da8:	f7fd fef2 	bl	8004b90 <HAL_GetTick>
 8006dac:	4602      	mov	r2, r0
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	1ad3      	subs	r3, r2, r3
 8006db2:	68ba      	ldr	r2, [r7, #8]
 8006db4:	429a      	cmp	r2, r3
 8006db6:	d302      	bcc.n	8006dbe <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8006db8:	68bb      	ldr	r3, [r7, #8]
 8006dba:	2b00      	cmp	r3, #0
 8006dbc:	d11a      	bne.n	8006df4 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8006dbe:	68fb      	ldr	r3, [r7, #12]
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	699b      	ldr	r3, [r3, #24]
 8006dc4:	f003 0302 	and.w	r3, r3, #2
 8006dc8:	2b02      	cmp	r3, #2
 8006dca:	d013      	beq.n	8006df4 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006dcc:	68fb      	ldr	r3, [r7, #12]
 8006dce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006dd0:	f043 0220 	orr.w	r2, r3, #32
 8006dd4:	68fb      	ldr	r3, [r7, #12]
 8006dd6:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8006dd8:	68fb      	ldr	r3, [r7, #12]
 8006dda:	2220      	movs	r2, #32
 8006ddc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8006de0:	68fb      	ldr	r3, [r7, #12]
 8006de2:	2200      	movs	r2, #0
 8006de4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006de8:	68fb      	ldr	r3, [r7, #12]
 8006dea:	2200      	movs	r2, #0
 8006dec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8006df0:	2301      	movs	r3, #1
 8006df2:	e007      	b.n	8006e04 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8006df4:	68fb      	ldr	r3, [r7, #12]
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	699b      	ldr	r3, [r3, #24]
 8006dfa:	f003 0302 	and.w	r3, r3, #2
 8006dfe:	2b02      	cmp	r3, #2
 8006e00:	d1c4      	bne.n	8006d8c <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8006e02:	2300      	movs	r3, #0
}
 8006e04:	4618      	mov	r0, r3
 8006e06:	3710      	adds	r7, #16
 8006e08:	46bd      	mov	sp, r7
 8006e0a:	bd80      	pop	{r7, pc}

08006e0c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8006e0c:	b580      	push	{r7, lr}
 8006e0e:	b084      	sub	sp, #16
 8006e10:	af00      	add	r7, sp, #0
 8006e12:	60f8      	str	r0, [r7, #12]
 8006e14:	60b9      	str	r1, [r7, #8]
 8006e16:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006e18:	e02f      	b.n	8006e7a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8006e1a:	687a      	ldr	r2, [r7, #4]
 8006e1c:	68b9      	ldr	r1, [r7, #8]
 8006e1e:	68f8      	ldr	r0, [r7, #12]
 8006e20:	f000 f838 	bl	8006e94 <I2C_IsErrorOccurred>
 8006e24:	4603      	mov	r3, r0
 8006e26:	2b00      	cmp	r3, #0
 8006e28:	d001      	beq.n	8006e2e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8006e2a:	2301      	movs	r3, #1
 8006e2c:	e02d      	b.n	8006e8a <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006e2e:	f7fd feaf 	bl	8004b90 <HAL_GetTick>
 8006e32:	4602      	mov	r2, r0
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	1ad3      	subs	r3, r2, r3
 8006e38:	68ba      	ldr	r2, [r7, #8]
 8006e3a:	429a      	cmp	r2, r3
 8006e3c:	d302      	bcc.n	8006e44 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8006e3e:	68bb      	ldr	r3, [r7, #8]
 8006e40:	2b00      	cmp	r3, #0
 8006e42:	d11a      	bne.n	8006e7a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8006e44:	68fb      	ldr	r3, [r7, #12]
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	699b      	ldr	r3, [r3, #24]
 8006e4a:	f003 0320 	and.w	r3, r3, #32
 8006e4e:	2b20      	cmp	r3, #32
 8006e50:	d013      	beq.n	8006e7a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006e52:	68fb      	ldr	r3, [r7, #12]
 8006e54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006e56:	f043 0220 	orr.w	r2, r3, #32
 8006e5a:	68fb      	ldr	r3, [r7, #12]
 8006e5c:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8006e5e:	68fb      	ldr	r3, [r7, #12]
 8006e60:	2220      	movs	r2, #32
 8006e62:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006e66:	68fb      	ldr	r3, [r7, #12]
 8006e68:	2200      	movs	r2, #0
 8006e6a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006e6e:	68fb      	ldr	r3, [r7, #12]
 8006e70:	2200      	movs	r2, #0
 8006e72:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8006e76:	2301      	movs	r3, #1
 8006e78:	e007      	b.n	8006e8a <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006e7a:	68fb      	ldr	r3, [r7, #12]
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	699b      	ldr	r3, [r3, #24]
 8006e80:	f003 0320 	and.w	r3, r3, #32
 8006e84:	2b20      	cmp	r3, #32
 8006e86:	d1c8      	bne.n	8006e1a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006e88:	2300      	movs	r3, #0
}
 8006e8a:	4618      	mov	r0, r3
 8006e8c:	3710      	adds	r7, #16
 8006e8e:	46bd      	mov	sp, r7
 8006e90:	bd80      	pop	{r7, pc}
	...

08006e94 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006e94:	b580      	push	{r7, lr}
 8006e96:	b08a      	sub	sp, #40	; 0x28
 8006e98:	af00      	add	r7, sp, #0
 8006e9a:	60f8      	str	r0, [r7, #12]
 8006e9c:	60b9      	str	r1, [r7, #8]
 8006e9e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006ea0:	2300      	movs	r3, #0
 8006ea2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8006ea6:	68fb      	ldr	r3, [r7, #12]
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	699b      	ldr	r3, [r3, #24]
 8006eac:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8006eae:	2300      	movs	r3, #0
 8006eb0:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8006eb6:	69bb      	ldr	r3, [r7, #24]
 8006eb8:	f003 0310 	and.w	r3, r3, #16
 8006ebc:	2b00      	cmp	r3, #0
 8006ebe:	d068      	beq.n	8006f92 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006ec0:	68fb      	ldr	r3, [r7, #12]
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	2210      	movs	r2, #16
 8006ec6:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8006ec8:	e049      	b.n	8006f5e <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8006eca:	68bb      	ldr	r3, [r7, #8]
 8006ecc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006ed0:	d045      	beq.n	8006f5e <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8006ed2:	f7fd fe5d 	bl	8004b90 <HAL_GetTick>
 8006ed6:	4602      	mov	r2, r0
 8006ed8:	69fb      	ldr	r3, [r7, #28]
 8006eda:	1ad3      	subs	r3, r2, r3
 8006edc:	68ba      	ldr	r2, [r7, #8]
 8006ede:	429a      	cmp	r2, r3
 8006ee0:	d302      	bcc.n	8006ee8 <I2C_IsErrorOccurred+0x54>
 8006ee2:	68bb      	ldr	r3, [r7, #8]
 8006ee4:	2b00      	cmp	r3, #0
 8006ee6:	d13a      	bne.n	8006f5e <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8006ee8:	68fb      	ldr	r3, [r7, #12]
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	685b      	ldr	r3, [r3, #4]
 8006eee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006ef2:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8006ef4:	68fb      	ldr	r3, [r7, #12]
 8006ef6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006efa:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8006efc:	68fb      	ldr	r3, [r7, #12]
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	699b      	ldr	r3, [r3, #24]
 8006f02:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006f06:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006f0a:	d121      	bne.n	8006f50 <I2C_IsErrorOccurred+0xbc>
 8006f0c:	697b      	ldr	r3, [r7, #20]
 8006f0e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006f12:	d01d      	beq.n	8006f50 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8006f14:	7cfb      	ldrb	r3, [r7, #19]
 8006f16:	2b20      	cmp	r3, #32
 8006f18:	d01a      	beq.n	8006f50 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8006f1a:	68fb      	ldr	r3, [r7, #12]
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	685a      	ldr	r2, [r3, #4]
 8006f20:	68fb      	ldr	r3, [r7, #12]
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006f28:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8006f2a:	f7fd fe31 	bl	8004b90 <HAL_GetTick>
 8006f2e:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006f30:	e00e      	b.n	8006f50 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8006f32:	f7fd fe2d 	bl	8004b90 <HAL_GetTick>
 8006f36:	4602      	mov	r2, r0
 8006f38:	69fb      	ldr	r3, [r7, #28]
 8006f3a:	1ad3      	subs	r3, r2, r3
 8006f3c:	2b19      	cmp	r3, #25
 8006f3e:	d907      	bls.n	8006f50 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8006f40:	6a3b      	ldr	r3, [r7, #32]
 8006f42:	f043 0320 	orr.w	r3, r3, #32
 8006f46:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8006f48:	2301      	movs	r3, #1
 8006f4a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 8006f4e:	e006      	b.n	8006f5e <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006f50:	68fb      	ldr	r3, [r7, #12]
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	699b      	ldr	r3, [r3, #24]
 8006f56:	f003 0320 	and.w	r3, r3, #32
 8006f5a:	2b20      	cmp	r3, #32
 8006f5c:	d1e9      	bne.n	8006f32 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8006f5e:	68fb      	ldr	r3, [r7, #12]
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	699b      	ldr	r3, [r3, #24]
 8006f64:	f003 0320 	and.w	r3, r3, #32
 8006f68:	2b20      	cmp	r3, #32
 8006f6a:	d003      	beq.n	8006f74 <I2C_IsErrorOccurred+0xe0>
 8006f6c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006f70:	2b00      	cmp	r3, #0
 8006f72:	d0aa      	beq.n	8006eca <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8006f74:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006f78:	2b00      	cmp	r3, #0
 8006f7a:	d103      	bne.n	8006f84 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006f7c:	68fb      	ldr	r3, [r7, #12]
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	2220      	movs	r2, #32
 8006f82:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8006f84:	6a3b      	ldr	r3, [r7, #32]
 8006f86:	f043 0304 	orr.w	r3, r3, #4
 8006f8a:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8006f8c:	2301      	movs	r3, #1
 8006f8e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8006f92:	68fb      	ldr	r3, [r7, #12]
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	699b      	ldr	r3, [r3, #24]
 8006f98:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8006f9a:	69bb      	ldr	r3, [r7, #24]
 8006f9c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006fa0:	2b00      	cmp	r3, #0
 8006fa2:	d00b      	beq.n	8006fbc <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8006fa4:	6a3b      	ldr	r3, [r7, #32]
 8006fa6:	f043 0301 	orr.w	r3, r3, #1
 8006faa:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8006fac:	68fb      	ldr	r3, [r7, #12]
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006fb4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8006fb6:	2301      	movs	r3, #1
 8006fb8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8006fbc:	69bb      	ldr	r3, [r7, #24]
 8006fbe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006fc2:	2b00      	cmp	r3, #0
 8006fc4:	d00b      	beq.n	8006fde <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8006fc6:	6a3b      	ldr	r3, [r7, #32]
 8006fc8:	f043 0308 	orr.w	r3, r3, #8
 8006fcc:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8006fce:	68fb      	ldr	r3, [r7, #12]
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006fd6:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8006fd8:	2301      	movs	r3, #1
 8006fda:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8006fde:	69bb      	ldr	r3, [r7, #24]
 8006fe0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006fe4:	2b00      	cmp	r3, #0
 8006fe6:	d00b      	beq.n	8007000 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8006fe8:	6a3b      	ldr	r3, [r7, #32]
 8006fea:	f043 0302 	orr.w	r3, r3, #2
 8006fee:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8006ff0:	68fb      	ldr	r3, [r7, #12]
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006ff8:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8006ffa:	2301      	movs	r3, #1
 8006ffc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8007000:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007004:	2b00      	cmp	r3, #0
 8007006:	d01c      	beq.n	8007042 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8007008:	68f8      	ldr	r0, [r7, #12]
 800700a:	f7ff fe45 	bl	8006c98 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800700e:	68fb      	ldr	r3, [r7, #12]
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	6859      	ldr	r1, [r3, #4]
 8007014:	68fb      	ldr	r3, [r7, #12]
 8007016:	681a      	ldr	r2, [r3, #0]
 8007018:	4b0d      	ldr	r3, [pc, #52]	; (8007050 <I2C_IsErrorOccurred+0x1bc>)
 800701a:	400b      	ands	r3, r1
 800701c:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800701e:	68fb      	ldr	r3, [r7, #12]
 8007020:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007022:	6a3b      	ldr	r3, [r7, #32]
 8007024:	431a      	orrs	r2, r3
 8007026:	68fb      	ldr	r3, [r7, #12]
 8007028:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800702a:	68fb      	ldr	r3, [r7, #12]
 800702c:	2220      	movs	r2, #32
 800702e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8007032:	68fb      	ldr	r3, [r7, #12]
 8007034:	2200      	movs	r2, #0
 8007036:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800703a:	68fb      	ldr	r3, [r7, #12]
 800703c:	2200      	movs	r2, #0
 800703e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8007042:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8007046:	4618      	mov	r0, r3
 8007048:	3728      	adds	r7, #40	; 0x28
 800704a:	46bd      	mov	sp, r7
 800704c:	bd80      	pop	{r7, pc}
 800704e:	bf00      	nop
 8007050:	fe00e800 	.word	0xfe00e800

08007054 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8007054:	b480      	push	{r7}
 8007056:	b087      	sub	sp, #28
 8007058:	af00      	add	r7, sp, #0
 800705a:	60f8      	str	r0, [r7, #12]
 800705c:	607b      	str	r3, [r7, #4]
 800705e:	460b      	mov	r3, r1
 8007060:	817b      	strh	r3, [r7, #10]
 8007062:	4613      	mov	r3, r2
 8007064:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8007066:	897b      	ldrh	r3, [r7, #10]
 8007068:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800706c:	7a7b      	ldrb	r3, [r7, #9]
 800706e:	041b      	lsls	r3, r3, #16
 8007070:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8007074:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800707a:	6a3b      	ldr	r3, [r7, #32]
 800707c:	4313      	orrs	r3, r2
 800707e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007082:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8007084:	68fb      	ldr	r3, [r7, #12]
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	685a      	ldr	r2, [r3, #4]
 800708a:	6a3b      	ldr	r3, [r7, #32]
 800708c:	0d5b      	lsrs	r3, r3, #21
 800708e:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8007092:	4b08      	ldr	r3, [pc, #32]	; (80070b4 <I2C_TransferConfig+0x60>)
 8007094:	430b      	orrs	r3, r1
 8007096:	43db      	mvns	r3, r3
 8007098:	ea02 0103 	and.w	r1, r2, r3
 800709c:	68fb      	ldr	r3, [r7, #12]
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	697a      	ldr	r2, [r7, #20]
 80070a2:	430a      	orrs	r2, r1
 80070a4:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80070a6:	bf00      	nop
 80070a8:	371c      	adds	r7, #28
 80070aa:	46bd      	mov	sp, r7
 80070ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070b0:	4770      	bx	lr
 80070b2:	bf00      	nop
 80070b4:	03ff63ff 	.word	0x03ff63ff

080070b8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80070b8:	b480      	push	{r7}
 80070ba:	b083      	sub	sp, #12
 80070bc:	af00      	add	r7, sp, #0
 80070be:	6078      	str	r0, [r7, #4]
 80070c0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80070c8:	b2db      	uxtb	r3, r3
 80070ca:	2b20      	cmp	r3, #32
 80070cc:	d138      	bne.n	8007140 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80070d4:	2b01      	cmp	r3, #1
 80070d6:	d101      	bne.n	80070dc <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80070d8:	2302      	movs	r3, #2
 80070da:	e032      	b.n	8007142 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	2201      	movs	r2, #1
 80070e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	2224      	movs	r2, #36	; 0x24
 80070e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	681a      	ldr	r2, [r3, #0]
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	f022 0201 	bic.w	r2, r2, #1
 80070fa:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	681a      	ldr	r2, [r3, #0]
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800710a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	6819      	ldr	r1, [r3, #0]
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	683a      	ldr	r2, [r7, #0]
 8007118:	430a      	orrs	r2, r1
 800711a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	681a      	ldr	r2, [r3, #0]
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	f042 0201 	orr.w	r2, r2, #1
 800712a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	2220      	movs	r2, #32
 8007130:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	2200      	movs	r2, #0
 8007138:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800713c:	2300      	movs	r3, #0
 800713e:	e000      	b.n	8007142 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8007140:	2302      	movs	r3, #2
  }
}
 8007142:	4618      	mov	r0, r3
 8007144:	370c      	adds	r7, #12
 8007146:	46bd      	mov	sp, r7
 8007148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800714c:	4770      	bx	lr

0800714e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800714e:	b480      	push	{r7}
 8007150:	b085      	sub	sp, #20
 8007152:	af00      	add	r7, sp, #0
 8007154:	6078      	str	r0, [r7, #4]
 8007156:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800715e:	b2db      	uxtb	r3, r3
 8007160:	2b20      	cmp	r3, #32
 8007162:	d139      	bne.n	80071d8 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800716a:	2b01      	cmp	r3, #1
 800716c:	d101      	bne.n	8007172 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800716e:	2302      	movs	r3, #2
 8007170:	e033      	b.n	80071da <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	2201      	movs	r2, #1
 8007176:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	2224      	movs	r2, #36	; 0x24
 800717e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	681a      	ldr	r2, [r3, #0]
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	f022 0201 	bic.w	r2, r2, #1
 8007190:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800719a:	68fb      	ldr	r3, [r7, #12]
 800719c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80071a0:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80071a2:	683b      	ldr	r3, [r7, #0]
 80071a4:	021b      	lsls	r3, r3, #8
 80071a6:	68fa      	ldr	r2, [r7, #12]
 80071a8:	4313      	orrs	r3, r2
 80071aa:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	68fa      	ldr	r2, [r7, #12]
 80071b2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	681a      	ldr	r2, [r3, #0]
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	f042 0201 	orr.w	r2, r2, #1
 80071c2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	2220      	movs	r2, #32
 80071c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	2200      	movs	r2, #0
 80071d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80071d4:	2300      	movs	r3, #0
 80071d6:	e000      	b.n	80071da <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80071d8:	2302      	movs	r3, #2
  }
}
 80071da:	4618      	mov	r0, r3
 80071dc:	3714      	adds	r7, #20
 80071de:	46bd      	mov	sp, r7
 80071e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071e4:	4770      	bx	lr
	...

080071e8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80071e8:	b580      	push	{r7, lr}
 80071ea:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 80071ee:	af00      	add	r7, sp, #0
 80071f0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80071f4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80071f8:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80071fa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80071fe:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	2b00      	cmp	r3, #0
 8007206:	d102      	bne.n	800720e <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8007208:	2301      	movs	r3, #1
 800720a:	f001 b823 	b.w	8008254 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800720e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007212:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	f003 0301 	and.w	r3, r3, #1
 800721e:	2b00      	cmp	r3, #0
 8007220:	f000 817d 	beq.w	800751e <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8007224:	4bbc      	ldr	r3, [pc, #752]	; (8007518 <HAL_RCC_OscConfig+0x330>)
 8007226:	685b      	ldr	r3, [r3, #4]
 8007228:	f003 030c 	and.w	r3, r3, #12
 800722c:	2b04      	cmp	r3, #4
 800722e:	d00c      	beq.n	800724a <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8007230:	4bb9      	ldr	r3, [pc, #740]	; (8007518 <HAL_RCC_OscConfig+0x330>)
 8007232:	685b      	ldr	r3, [r3, #4]
 8007234:	f003 030c 	and.w	r3, r3, #12
 8007238:	2b08      	cmp	r3, #8
 800723a:	d15c      	bne.n	80072f6 <HAL_RCC_OscConfig+0x10e>
 800723c:	4bb6      	ldr	r3, [pc, #728]	; (8007518 <HAL_RCC_OscConfig+0x330>)
 800723e:	685b      	ldr	r3, [r3, #4]
 8007240:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007244:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007248:	d155      	bne.n	80072f6 <HAL_RCC_OscConfig+0x10e>
 800724a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800724e:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007252:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8007256:	fa93 f3a3 	rbit	r3, r3
 800725a:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800725e:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007262:	fab3 f383 	clz	r3, r3
 8007266:	b2db      	uxtb	r3, r3
 8007268:	095b      	lsrs	r3, r3, #5
 800726a:	b2db      	uxtb	r3, r3
 800726c:	f043 0301 	orr.w	r3, r3, #1
 8007270:	b2db      	uxtb	r3, r3
 8007272:	2b01      	cmp	r3, #1
 8007274:	d102      	bne.n	800727c <HAL_RCC_OscConfig+0x94>
 8007276:	4ba8      	ldr	r3, [pc, #672]	; (8007518 <HAL_RCC_OscConfig+0x330>)
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	e015      	b.n	80072a8 <HAL_RCC_OscConfig+0xc0>
 800727c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8007280:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007284:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8007288:	fa93 f3a3 	rbit	r3, r3
 800728c:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8007290:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8007294:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8007298:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 800729c:	fa93 f3a3 	rbit	r3, r3
 80072a0:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 80072a4:	4b9c      	ldr	r3, [pc, #624]	; (8007518 <HAL_RCC_OscConfig+0x330>)
 80072a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072a8:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80072ac:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 80072b0:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 80072b4:	fa92 f2a2 	rbit	r2, r2
 80072b8:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 80072bc:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 80072c0:	fab2 f282 	clz	r2, r2
 80072c4:	b2d2      	uxtb	r2, r2
 80072c6:	f042 0220 	orr.w	r2, r2, #32
 80072ca:	b2d2      	uxtb	r2, r2
 80072cc:	f002 021f 	and.w	r2, r2, #31
 80072d0:	2101      	movs	r1, #1
 80072d2:	fa01 f202 	lsl.w	r2, r1, r2
 80072d6:	4013      	ands	r3, r2
 80072d8:	2b00      	cmp	r3, #0
 80072da:	f000 811f 	beq.w	800751c <HAL_RCC_OscConfig+0x334>
 80072de:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80072e2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	685b      	ldr	r3, [r3, #4]
 80072ea:	2b00      	cmp	r3, #0
 80072ec:	f040 8116 	bne.w	800751c <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 80072f0:	2301      	movs	r3, #1
 80072f2:	f000 bfaf 	b.w	8008254 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80072f6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80072fa:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	685b      	ldr	r3, [r3, #4]
 8007302:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007306:	d106      	bne.n	8007316 <HAL_RCC_OscConfig+0x12e>
 8007308:	4b83      	ldr	r3, [pc, #524]	; (8007518 <HAL_RCC_OscConfig+0x330>)
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	4a82      	ldr	r2, [pc, #520]	; (8007518 <HAL_RCC_OscConfig+0x330>)
 800730e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007312:	6013      	str	r3, [r2, #0]
 8007314:	e036      	b.n	8007384 <HAL_RCC_OscConfig+0x19c>
 8007316:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800731a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	685b      	ldr	r3, [r3, #4]
 8007322:	2b00      	cmp	r3, #0
 8007324:	d10c      	bne.n	8007340 <HAL_RCC_OscConfig+0x158>
 8007326:	4b7c      	ldr	r3, [pc, #496]	; (8007518 <HAL_RCC_OscConfig+0x330>)
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	4a7b      	ldr	r2, [pc, #492]	; (8007518 <HAL_RCC_OscConfig+0x330>)
 800732c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007330:	6013      	str	r3, [r2, #0]
 8007332:	4b79      	ldr	r3, [pc, #484]	; (8007518 <HAL_RCC_OscConfig+0x330>)
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	4a78      	ldr	r2, [pc, #480]	; (8007518 <HAL_RCC_OscConfig+0x330>)
 8007338:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800733c:	6013      	str	r3, [r2, #0]
 800733e:	e021      	b.n	8007384 <HAL_RCC_OscConfig+0x19c>
 8007340:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007344:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	685b      	ldr	r3, [r3, #4]
 800734c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007350:	d10c      	bne.n	800736c <HAL_RCC_OscConfig+0x184>
 8007352:	4b71      	ldr	r3, [pc, #452]	; (8007518 <HAL_RCC_OscConfig+0x330>)
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	4a70      	ldr	r2, [pc, #448]	; (8007518 <HAL_RCC_OscConfig+0x330>)
 8007358:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800735c:	6013      	str	r3, [r2, #0]
 800735e:	4b6e      	ldr	r3, [pc, #440]	; (8007518 <HAL_RCC_OscConfig+0x330>)
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	4a6d      	ldr	r2, [pc, #436]	; (8007518 <HAL_RCC_OscConfig+0x330>)
 8007364:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007368:	6013      	str	r3, [r2, #0]
 800736a:	e00b      	b.n	8007384 <HAL_RCC_OscConfig+0x19c>
 800736c:	4b6a      	ldr	r3, [pc, #424]	; (8007518 <HAL_RCC_OscConfig+0x330>)
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	4a69      	ldr	r2, [pc, #420]	; (8007518 <HAL_RCC_OscConfig+0x330>)
 8007372:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007376:	6013      	str	r3, [r2, #0]
 8007378:	4b67      	ldr	r3, [pc, #412]	; (8007518 <HAL_RCC_OscConfig+0x330>)
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	4a66      	ldr	r2, [pc, #408]	; (8007518 <HAL_RCC_OscConfig+0x330>)
 800737e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007382:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8007384:	4b64      	ldr	r3, [pc, #400]	; (8007518 <HAL_RCC_OscConfig+0x330>)
 8007386:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007388:	f023 020f 	bic.w	r2, r3, #15
 800738c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007390:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	689b      	ldr	r3, [r3, #8]
 8007398:	495f      	ldr	r1, [pc, #380]	; (8007518 <HAL_RCC_OscConfig+0x330>)
 800739a:	4313      	orrs	r3, r2
 800739c:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800739e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80073a2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	685b      	ldr	r3, [r3, #4]
 80073aa:	2b00      	cmp	r3, #0
 80073ac:	d059      	beq.n	8007462 <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80073ae:	f7fd fbef 	bl	8004b90 <HAL_GetTick>
 80073b2:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80073b6:	e00a      	b.n	80073ce <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80073b8:	f7fd fbea 	bl	8004b90 <HAL_GetTick>
 80073bc:	4602      	mov	r2, r0
 80073be:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80073c2:	1ad3      	subs	r3, r2, r3
 80073c4:	2b64      	cmp	r3, #100	; 0x64
 80073c6:	d902      	bls.n	80073ce <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 80073c8:	2303      	movs	r3, #3
 80073ca:	f000 bf43 	b.w	8008254 <HAL_RCC_OscConfig+0x106c>
 80073ce:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80073d2:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80073d6:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 80073da:	fa93 f3a3 	rbit	r3, r3
 80073de:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 80073e2:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80073e6:	fab3 f383 	clz	r3, r3
 80073ea:	b2db      	uxtb	r3, r3
 80073ec:	095b      	lsrs	r3, r3, #5
 80073ee:	b2db      	uxtb	r3, r3
 80073f0:	f043 0301 	orr.w	r3, r3, #1
 80073f4:	b2db      	uxtb	r3, r3
 80073f6:	2b01      	cmp	r3, #1
 80073f8:	d102      	bne.n	8007400 <HAL_RCC_OscConfig+0x218>
 80073fa:	4b47      	ldr	r3, [pc, #284]	; (8007518 <HAL_RCC_OscConfig+0x330>)
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	e015      	b.n	800742c <HAL_RCC_OscConfig+0x244>
 8007400:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8007404:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007408:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 800740c:	fa93 f3a3 	rbit	r3, r3
 8007410:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8007414:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8007418:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 800741c:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8007420:	fa93 f3a3 	rbit	r3, r3
 8007424:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8007428:	4b3b      	ldr	r3, [pc, #236]	; (8007518 <HAL_RCC_OscConfig+0x330>)
 800742a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800742c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8007430:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8007434:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8007438:	fa92 f2a2 	rbit	r2, r2
 800743c:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8007440:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8007444:	fab2 f282 	clz	r2, r2
 8007448:	b2d2      	uxtb	r2, r2
 800744a:	f042 0220 	orr.w	r2, r2, #32
 800744e:	b2d2      	uxtb	r2, r2
 8007450:	f002 021f 	and.w	r2, r2, #31
 8007454:	2101      	movs	r1, #1
 8007456:	fa01 f202 	lsl.w	r2, r1, r2
 800745a:	4013      	ands	r3, r2
 800745c:	2b00      	cmp	r3, #0
 800745e:	d0ab      	beq.n	80073b8 <HAL_RCC_OscConfig+0x1d0>
 8007460:	e05d      	b.n	800751e <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007462:	f7fd fb95 	bl	8004b90 <HAL_GetTick>
 8007466:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800746a:	e00a      	b.n	8007482 <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800746c:	f7fd fb90 	bl	8004b90 <HAL_GetTick>
 8007470:	4602      	mov	r2, r0
 8007472:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8007476:	1ad3      	subs	r3, r2, r3
 8007478:	2b64      	cmp	r3, #100	; 0x64
 800747a:	d902      	bls.n	8007482 <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 800747c:	2303      	movs	r3, #3
 800747e:	f000 bee9 	b.w	8008254 <HAL_RCC_OscConfig+0x106c>
 8007482:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8007486:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800748a:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 800748e:	fa93 f3a3 	rbit	r3, r3
 8007492:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8007496:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800749a:	fab3 f383 	clz	r3, r3
 800749e:	b2db      	uxtb	r3, r3
 80074a0:	095b      	lsrs	r3, r3, #5
 80074a2:	b2db      	uxtb	r3, r3
 80074a4:	f043 0301 	orr.w	r3, r3, #1
 80074a8:	b2db      	uxtb	r3, r3
 80074aa:	2b01      	cmp	r3, #1
 80074ac:	d102      	bne.n	80074b4 <HAL_RCC_OscConfig+0x2cc>
 80074ae:	4b1a      	ldr	r3, [pc, #104]	; (8007518 <HAL_RCC_OscConfig+0x330>)
 80074b0:	681b      	ldr	r3, [r3, #0]
 80074b2:	e015      	b.n	80074e0 <HAL_RCC_OscConfig+0x2f8>
 80074b4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80074b8:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80074bc:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 80074c0:	fa93 f3a3 	rbit	r3, r3
 80074c4:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 80074c8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80074cc:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 80074d0:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 80074d4:	fa93 f3a3 	rbit	r3, r3
 80074d8:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 80074dc:	4b0e      	ldr	r3, [pc, #56]	; (8007518 <HAL_RCC_OscConfig+0x330>)
 80074de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074e0:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80074e4:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 80074e8:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 80074ec:	fa92 f2a2 	rbit	r2, r2
 80074f0:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 80074f4:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 80074f8:	fab2 f282 	clz	r2, r2
 80074fc:	b2d2      	uxtb	r2, r2
 80074fe:	f042 0220 	orr.w	r2, r2, #32
 8007502:	b2d2      	uxtb	r2, r2
 8007504:	f002 021f 	and.w	r2, r2, #31
 8007508:	2101      	movs	r1, #1
 800750a:	fa01 f202 	lsl.w	r2, r1, r2
 800750e:	4013      	ands	r3, r2
 8007510:	2b00      	cmp	r3, #0
 8007512:	d1ab      	bne.n	800746c <HAL_RCC_OscConfig+0x284>
 8007514:	e003      	b.n	800751e <HAL_RCC_OscConfig+0x336>
 8007516:	bf00      	nop
 8007518:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800751c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800751e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007522:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	f003 0302 	and.w	r3, r3, #2
 800752e:	2b00      	cmp	r3, #0
 8007530:	f000 817d 	beq.w	800782e <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8007534:	4ba6      	ldr	r3, [pc, #664]	; (80077d0 <HAL_RCC_OscConfig+0x5e8>)
 8007536:	685b      	ldr	r3, [r3, #4]
 8007538:	f003 030c 	and.w	r3, r3, #12
 800753c:	2b00      	cmp	r3, #0
 800753e:	d00b      	beq.n	8007558 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8007540:	4ba3      	ldr	r3, [pc, #652]	; (80077d0 <HAL_RCC_OscConfig+0x5e8>)
 8007542:	685b      	ldr	r3, [r3, #4]
 8007544:	f003 030c 	and.w	r3, r3, #12
 8007548:	2b08      	cmp	r3, #8
 800754a:	d172      	bne.n	8007632 <HAL_RCC_OscConfig+0x44a>
 800754c:	4ba0      	ldr	r3, [pc, #640]	; (80077d0 <HAL_RCC_OscConfig+0x5e8>)
 800754e:	685b      	ldr	r3, [r3, #4]
 8007550:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007554:	2b00      	cmp	r3, #0
 8007556:	d16c      	bne.n	8007632 <HAL_RCC_OscConfig+0x44a>
 8007558:	2302      	movs	r3, #2
 800755a:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800755e:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8007562:	fa93 f3a3 	rbit	r3, r3
 8007566:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 800756a:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800756e:	fab3 f383 	clz	r3, r3
 8007572:	b2db      	uxtb	r3, r3
 8007574:	095b      	lsrs	r3, r3, #5
 8007576:	b2db      	uxtb	r3, r3
 8007578:	f043 0301 	orr.w	r3, r3, #1
 800757c:	b2db      	uxtb	r3, r3
 800757e:	2b01      	cmp	r3, #1
 8007580:	d102      	bne.n	8007588 <HAL_RCC_OscConfig+0x3a0>
 8007582:	4b93      	ldr	r3, [pc, #588]	; (80077d0 <HAL_RCC_OscConfig+0x5e8>)
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	e013      	b.n	80075b0 <HAL_RCC_OscConfig+0x3c8>
 8007588:	2302      	movs	r3, #2
 800758a:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800758e:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8007592:	fa93 f3a3 	rbit	r3, r3
 8007596:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 800759a:	2302      	movs	r3, #2
 800759c:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 80075a0:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80075a4:	fa93 f3a3 	rbit	r3, r3
 80075a8:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 80075ac:	4b88      	ldr	r3, [pc, #544]	; (80077d0 <HAL_RCC_OscConfig+0x5e8>)
 80075ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075b0:	2202      	movs	r2, #2
 80075b2:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 80075b6:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 80075ba:	fa92 f2a2 	rbit	r2, r2
 80075be:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 80075c2:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 80075c6:	fab2 f282 	clz	r2, r2
 80075ca:	b2d2      	uxtb	r2, r2
 80075cc:	f042 0220 	orr.w	r2, r2, #32
 80075d0:	b2d2      	uxtb	r2, r2
 80075d2:	f002 021f 	and.w	r2, r2, #31
 80075d6:	2101      	movs	r1, #1
 80075d8:	fa01 f202 	lsl.w	r2, r1, r2
 80075dc:	4013      	ands	r3, r2
 80075de:	2b00      	cmp	r3, #0
 80075e0:	d00a      	beq.n	80075f8 <HAL_RCC_OscConfig+0x410>
 80075e2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80075e6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	691b      	ldr	r3, [r3, #16]
 80075ee:	2b01      	cmp	r3, #1
 80075f0:	d002      	beq.n	80075f8 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 80075f2:	2301      	movs	r3, #1
 80075f4:	f000 be2e 	b.w	8008254 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80075f8:	4b75      	ldr	r3, [pc, #468]	; (80077d0 <HAL_RCC_OscConfig+0x5e8>)
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007600:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007604:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8007608:	681b      	ldr	r3, [r3, #0]
 800760a:	695b      	ldr	r3, [r3, #20]
 800760c:	21f8      	movs	r1, #248	; 0xf8
 800760e:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007612:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8007616:	fa91 f1a1 	rbit	r1, r1
 800761a:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 800761e:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8007622:	fab1 f181 	clz	r1, r1
 8007626:	b2c9      	uxtb	r1, r1
 8007628:	408b      	lsls	r3, r1
 800762a:	4969      	ldr	r1, [pc, #420]	; (80077d0 <HAL_RCC_OscConfig+0x5e8>)
 800762c:	4313      	orrs	r3, r2
 800762e:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007630:	e0fd      	b.n	800782e <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8007632:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007636:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	691b      	ldr	r3, [r3, #16]
 800763e:	2b00      	cmp	r3, #0
 8007640:	f000 8088 	beq.w	8007754 <HAL_RCC_OscConfig+0x56c>
 8007644:	2301      	movs	r3, #1
 8007646:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800764a:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 800764e:	fa93 f3a3 	rbit	r3, r3
 8007652:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8007656:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800765a:	fab3 f383 	clz	r3, r3
 800765e:	b2db      	uxtb	r3, r3
 8007660:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8007664:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8007668:	009b      	lsls	r3, r3, #2
 800766a:	461a      	mov	r2, r3
 800766c:	2301      	movs	r3, #1
 800766e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007670:	f7fd fa8e 	bl	8004b90 <HAL_GetTick>
 8007674:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007678:	e00a      	b.n	8007690 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800767a:	f7fd fa89 	bl	8004b90 <HAL_GetTick>
 800767e:	4602      	mov	r2, r0
 8007680:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8007684:	1ad3      	subs	r3, r2, r3
 8007686:	2b02      	cmp	r3, #2
 8007688:	d902      	bls.n	8007690 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 800768a:	2303      	movs	r3, #3
 800768c:	f000 bde2 	b.w	8008254 <HAL_RCC_OscConfig+0x106c>
 8007690:	2302      	movs	r3, #2
 8007692:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007696:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 800769a:	fa93 f3a3 	rbit	r3, r3
 800769e:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 80076a2:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80076a6:	fab3 f383 	clz	r3, r3
 80076aa:	b2db      	uxtb	r3, r3
 80076ac:	095b      	lsrs	r3, r3, #5
 80076ae:	b2db      	uxtb	r3, r3
 80076b0:	f043 0301 	orr.w	r3, r3, #1
 80076b4:	b2db      	uxtb	r3, r3
 80076b6:	2b01      	cmp	r3, #1
 80076b8:	d102      	bne.n	80076c0 <HAL_RCC_OscConfig+0x4d8>
 80076ba:	4b45      	ldr	r3, [pc, #276]	; (80077d0 <HAL_RCC_OscConfig+0x5e8>)
 80076bc:	681b      	ldr	r3, [r3, #0]
 80076be:	e013      	b.n	80076e8 <HAL_RCC_OscConfig+0x500>
 80076c0:	2302      	movs	r3, #2
 80076c2:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80076c6:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 80076ca:	fa93 f3a3 	rbit	r3, r3
 80076ce:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 80076d2:	2302      	movs	r3, #2
 80076d4:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 80076d8:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 80076dc:	fa93 f3a3 	rbit	r3, r3
 80076e0:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 80076e4:	4b3a      	ldr	r3, [pc, #232]	; (80077d0 <HAL_RCC_OscConfig+0x5e8>)
 80076e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076e8:	2202      	movs	r2, #2
 80076ea:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 80076ee:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 80076f2:	fa92 f2a2 	rbit	r2, r2
 80076f6:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 80076fa:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 80076fe:	fab2 f282 	clz	r2, r2
 8007702:	b2d2      	uxtb	r2, r2
 8007704:	f042 0220 	orr.w	r2, r2, #32
 8007708:	b2d2      	uxtb	r2, r2
 800770a:	f002 021f 	and.w	r2, r2, #31
 800770e:	2101      	movs	r1, #1
 8007710:	fa01 f202 	lsl.w	r2, r1, r2
 8007714:	4013      	ands	r3, r2
 8007716:	2b00      	cmp	r3, #0
 8007718:	d0af      	beq.n	800767a <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800771a:	4b2d      	ldr	r3, [pc, #180]	; (80077d0 <HAL_RCC_OscConfig+0x5e8>)
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007722:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007726:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800772a:	681b      	ldr	r3, [r3, #0]
 800772c:	695b      	ldr	r3, [r3, #20]
 800772e:	21f8      	movs	r1, #248	; 0xf8
 8007730:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007734:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8007738:	fa91 f1a1 	rbit	r1, r1
 800773c:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8007740:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8007744:	fab1 f181 	clz	r1, r1
 8007748:	b2c9      	uxtb	r1, r1
 800774a:	408b      	lsls	r3, r1
 800774c:	4920      	ldr	r1, [pc, #128]	; (80077d0 <HAL_RCC_OscConfig+0x5e8>)
 800774e:	4313      	orrs	r3, r2
 8007750:	600b      	str	r3, [r1, #0]
 8007752:	e06c      	b.n	800782e <HAL_RCC_OscConfig+0x646>
 8007754:	2301      	movs	r3, #1
 8007756:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800775a:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800775e:	fa93 f3a3 	rbit	r3, r3
 8007762:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8007766:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800776a:	fab3 f383 	clz	r3, r3
 800776e:	b2db      	uxtb	r3, r3
 8007770:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8007774:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8007778:	009b      	lsls	r3, r3, #2
 800777a:	461a      	mov	r2, r3
 800777c:	2300      	movs	r3, #0
 800777e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007780:	f7fd fa06 	bl	8004b90 <HAL_GetTick>
 8007784:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007788:	e00a      	b.n	80077a0 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800778a:	f7fd fa01 	bl	8004b90 <HAL_GetTick>
 800778e:	4602      	mov	r2, r0
 8007790:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8007794:	1ad3      	subs	r3, r2, r3
 8007796:	2b02      	cmp	r3, #2
 8007798:	d902      	bls.n	80077a0 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 800779a:	2303      	movs	r3, #3
 800779c:	f000 bd5a 	b.w	8008254 <HAL_RCC_OscConfig+0x106c>
 80077a0:	2302      	movs	r3, #2
 80077a2:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80077a6:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80077aa:	fa93 f3a3 	rbit	r3, r3
 80077ae:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 80077b2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80077b6:	fab3 f383 	clz	r3, r3
 80077ba:	b2db      	uxtb	r3, r3
 80077bc:	095b      	lsrs	r3, r3, #5
 80077be:	b2db      	uxtb	r3, r3
 80077c0:	f043 0301 	orr.w	r3, r3, #1
 80077c4:	b2db      	uxtb	r3, r3
 80077c6:	2b01      	cmp	r3, #1
 80077c8:	d104      	bne.n	80077d4 <HAL_RCC_OscConfig+0x5ec>
 80077ca:	4b01      	ldr	r3, [pc, #4]	; (80077d0 <HAL_RCC_OscConfig+0x5e8>)
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	e015      	b.n	80077fc <HAL_RCC_OscConfig+0x614>
 80077d0:	40021000 	.word	0x40021000
 80077d4:	2302      	movs	r3, #2
 80077d6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80077da:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80077de:	fa93 f3a3 	rbit	r3, r3
 80077e2:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80077e6:	2302      	movs	r3, #2
 80077e8:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80077ec:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80077f0:	fa93 f3a3 	rbit	r3, r3
 80077f4:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80077f8:	4bc8      	ldr	r3, [pc, #800]	; (8007b1c <HAL_RCC_OscConfig+0x934>)
 80077fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077fc:	2202      	movs	r2, #2
 80077fe:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8007802:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8007806:	fa92 f2a2 	rbit	r2, r2
 800780a:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 800780e:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8007812:	fab2 f282 	clz	r2, r2
 8007816:	b2d2      	uxtb	r2, r2
 8007818:	f042 0220 	orr.w	r2, r2, #32
 800781c:	b2d2      	uxtb	r2, r2
 800781e:	f002 021f 	and.w	r2, r2, #31
 8007822:	2101      	movs	r1, #1
 8007824:	fa01 f202 	lsl.w	r2, r1, r2
 8007828:	4013      	ands	r3, r2
 800782a:	2b00      	cmp	r3, #0
 800782c:	d1ad      	bne.n	800778a <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800782e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007832:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8007836:	681b      	ldr	r3, [r3, #0]
 8007838:	681b      	ldr	r3, [r3, #0]
 800783a:	f003 0308 	and.w	r3, r3, #8
 800783e:	2b00      	cmp	r3, #0
 8007840:	f000 8110 	beq.w	8007a64 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8007844:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007848:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800784c:	681b      	ldr	r3, [r3, #0]
 800784e:	699b      	ldr	r3, [r3, #24]
 8007850:	2b00      	cmp	r3, #0
 8007852:	d079      	beq.n	8007948 <HAL_RCC_OscConfig+0x760>
 8007854:	2301      	movs	r3, #1
 8007856:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800785a:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800785e:	fa93 f3a3 	rbit	r3, r3
 8007862:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8007866:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800786a:	fab3 f383 	clz	r3, r3
 800786e:	b2db      	uxtb	r3, r3
 8007870:	461a      	mov	r2, r3
 8007872:	4bab      	ldr	r3, [pc, #684]	; (8007b20 <HAL_RCC_OscConfig+0x938>)
 8007874:	4413      	add	r3, r2
 8007876:	009b      	lsls	r3, r3, #2
 8007878:	461a      	mov	r2, r3
 800787a:	2301      	movs	r3, #1
 800787c:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800787e:	f7fd f987 	bl	8004b90 <HAL_GetTick>
 8007882:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007886:	e00a      	b.n	800789e <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007888:	f7fd f982 	bl	8004b90 <HAL_GetTick>
 800788c:	4602      	mov	r2, r0
 800788e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8007892:	1ad3      	subs	r3, r2, r3
 8007894:	2b02      	cmp	r3, #2
 8007896:	d902      	bls.n	800789e <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8007898:	2303      	movs	r3, #3
 800789a:	f000 bcdb 	b.w	8008254 <HAL_RCC_OscConfig+0x106c>
 800789e:	2302      	movs	r3, #2
 80078a0:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80078a4:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80078a8:	fa93 f3a3 	rbit	r3, r3
 80078ac:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80078b0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80078b4:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80078b8:	2202      	movs	r2, #2
 80078ba:	601a      	str	r2, [r3, #0]
 80078bc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80078c0:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80078c4:	681b      	ldr	r3, [r3, #0]
 80078c6:	fa93 f2a3 	rbit	r2, r3
 80078ca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80078ce:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80078d2:	601a      	str	r2, [r3, #0]
 80078d4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80078d8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80078dc:	2202      	movs	r2, #2
 80078de:	601a      	str	r2, [r3, #0]
 80078e0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80078e4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	fa93 f2a3 	rbit	r2, r3
 80078ee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80078f2:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80078f6:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80078f8:	4b88      	ldr	r3, [pc, #544]	; (8007b1c <HAL_RCC_OscConfig+0x934>)
 80078fa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80078fc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007900:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8007904:	2102      	movs	r1, #2
 8007906:	6019      	str	r1, [r3, #0]
 8007908:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800790c:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8007910:	681b      	ldr	r3, [r3, #0]
 8007912:	fa93 f1a3 	rbit	r1, r3
 8007916:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800791a:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800791e:	6019      	str	r1, [r3, #0]
  return result;
 8007920:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007924:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8007928:	681b      	ldr	r3, [r3, #0]
 800792a:	fab3 f383 	clz	r3, r3
 800792e:	b2db      	uxtb	r3, r3
 8007930:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8007934:	b2db      	uxtb	r3, r3
 8007936:	f003 031f 	and.w	r3, r3, #31
 800793a:	2101      	movs	r1, #1
 800793c:	fa01 f303 	lsl.w	r3, r1, r3
 8007940:	4013      	ands	r3, r2
 8007942:	2b00      	cmp	r3, #0
 8007944:	d0a0      	beq.n	8007888 <HAL_RCC_OscConfig+0x6a0>
 8007946:	e08d      	b.n	8007a64 <HAL_RCC_OscConfig+0x87c>
 8007948:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800794c:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8007950:	2201      	movs	r2, #1
 8007952:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007954:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007958:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 800795c:	681b      	ldr	r3, [r3, #0]
 800795e:	fa93 f2a3 	rbit	r2, r3
 8007962:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007966:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800796a:	601a      	str	r2, [r3, #0]
  return result;
 800796c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007970:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8007974:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007976:	fab3 f383 	clz	r3, r3
 800797a:	b2db      	uxtb	r3, r3
 800797c:	461a      	mov	r2, r3
 800797e:	4b68      	ldr	r3, [pc, #416]	; (8007b20 <HAL_RCC_OscConfig+0x938>)
 8007980:	4413      	add	r3, r2
 8007982:	009b      	lsls	r3, r3, #2
 8007984:	461a      	mov	r2, r3
 8007986:	2300      	movs	r3, #0
 8007988:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800798a:	f7fd f901 	bl	8004b90 <HAL_GetTick>
 800798e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007992:	e00a      	b.n	80079aa <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007994:	f7fd f8fc 	bl	8004b90 <HAL_GetTick>
 8007998:	4602      	mov	r2, r0
 800799a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800799e:	1ad3      	subs	r3, r2, r3
 80079a0:	2b02      	cmp	r3, #2
 80079a2:	d902      	bls.n	80079aa <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 80079a4:	2303      	movs	r3, #3
 80079a6:	f000 bc55 	b.w	8008254 <HAL_RCC_OscConfig+0x106c>
 80079aa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80079ae:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80079b2:	2202      	movs	r2, #2
 80079b4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80079b6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80079ba:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80079be:	681b      	ldr	r3, [r3, #0]
 80079c0:	fa93 f2a3 	rbit	r2, r3
 80079c4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80079c8:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80079cc:	601a      	str	r2, [r3, #0]
 80079ce:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80079d2:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80079d6:	2202      	movs	r2, #2
 80079d8:	601a      	str	r2, [r3, #0]
 80079da:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80079de:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80079e2:	681b      	ldr	r3, [r3, #0]
 80079e4:	fa93 f2a3 	rbit	r2, r3
 80079e8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80079ec:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80079f0:	601a      	str	r2, [r3, #0]
 80079f2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80079f6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80079fa:	2202      	movs	r2, #2
 80079fc:	601a      	str	r2, [r3, #0]
 80079fe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007a02:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007a06:	681b      	ldr	r3, [r3, #0]
 8007a08:	fa93 f2a3 	rbit	r2, r3
 8007a0c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007a10:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8007a14:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007a16:	4b41      	ldr	r3, [pc, #260]	; (8007b1c <HAL_RCC_OscConfig+0x934>)
 8007a18:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007a1a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007a1e:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8007a22:	2102      	movs	r1, #2
 8007a24:	6019      	str	r1, [r3, #0]
 8007a26:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007a2a:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	fa93 f1a3 	rbit	r1, r3
 8007a34:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007a38:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8007a3c:	6019      	str	r1, [r3, #0]
  return result;
 8007a3e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007a42:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8007a46:	681b      	ldr	r3, [r3, #0]
 8007a48:	fab3 f383 	clz	r3, r3
 8007a4c:	b2db      	uxtb	r3, r3
 8007a4e:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8007a52:	b2db      	uxtb	r3, r3
 8007a54:	f003 031f 	and.w	r3, r3, #31
 8007a58:	2101      	movs	r1, #1
 8007a5a:	fa01 f303 	lsl.w	r3, r1, r3
 8007a5e:	4013      	ands	r3, r2
 8007a60:	2b00      	cmp	r3, #0
 8007a62:	d197      	bne.n	8007994 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007a64:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007a68:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8007a6c:	681b      	ldr	r3, [r3, #0]
 8007a6e:	681b      	ldr	r3, [r3, #0]
 8007a70:	f003 0304 	and.w	r3, r3, #4
 8007a74:	2b00      	cmp	r3, #0
 8007a76:	f000 81a1 	beq.w	8007dbc <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007a7a:	2300      	movs	r3, #0
 8007a7c:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007a80:	4b26      	ldr	r3, [pc, #152]	; (8007b1c <HAL_RCC_OscConfig+0x934>)
 8007a82:	69db      	ldr	r3, [r3, #28]
 8007a84:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007a88:	2b00      	cmp	r3, #0
 8007a8a:	d116      	bne.n	8007aba <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007a8c:	4b23      	ldr	r3, [pc, #140]	; (8007b1c <HAL_RCC_OscConfig+0x934>)
 8007a8e:	69db      	ldr	r3, [r3, #28]
 8007a90:	4a22      	ldr	r2, [pc, #136]	; (8007b1c <HAL_RCC_OscConfig+0x934>)
 8007a92:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007a96:	61d3      	str	r3, [r2, #28]
 8007a98:	4b20      	ldr	r3, [pc, #128]	; (8007b1c <HAL_RCC_OscConfig+0x934>)
 8007a9a:	69db      	ldr	r3, [r3, #28]
 8007a9c:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8007aa0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007aa4:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8007aa8:	601a      	str	r2, [r3, #0]
 8007aaa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007aae:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8007ab2:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8007ab4:	2301      	movs	r3, #1
 8007ab6:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007aba:	4b1a      	ldr	r3, [pc, #104]	; (8007b24 <HAL_RCC_OscConfig+0x93c>)
 8007abc:	681b      	ldr	r3, [r3, #0]
 8007abe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007ac2:	2b00      	cmp	r3, #0
 8007ac4:	d11a      	bne.n	8007afc <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8007ac6:	4b17      	ldr	r3, [pc, #92]	; (8007b24 <HAL_RCC_OscConfig+0x93c>)
 8007ac8:	681b      	ldr	r3, [r3, #0]
 8007aca:	4a16      	ldr	r2, [pc, #88]	; (8007b24 <HAL_RCC_OscConfig+0x93c>)
 8007acc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007ad0:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007ad2:	f7fd f85d 	bl	8004b90 <HAL_GetTick>
 8007ad6:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007ada:	e009      	b.n	8007af0 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007adc:	f7fd f858 	bl	8004b90 <HAL_GetTick>
 8007ae0:	4602      	mov	r2, r0
 8007ae2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8007ae6:	1ad3      	subs	r3, r2, r3
 8007ae8:	2b64      	cmp	r3, #100	; 0x64
 8007aea:	d901      	bls.n	8007af0 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 8007aec:	2303      	movs	r3, #3
 8007aee:	e3b1      	b.n	8008254 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007af0:	4b0c      	ldr	r3, [pc, #48]	; (8007b24 <HAL_RCC_OscConfig+0x93c>)
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007af8:	2b00      	cmp	r3, #0
 8007afa:	d0ef      	beq.n	8007adc <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007afc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007b00:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8007b04:	681b      	ldr	r3, [r3, #0]
 8007b06:	68db      	ldr	r3, [r3, #12]
 8007b08:	2b01      	cmp	r3, #1
 8007b0a:	d10d      	bne.n	8007b28 <HAL_RCC_OscConfig+0x940>
 8007b0c:	4b03      	ldr	r3, [pc, #12]	; (8007b1c <HAL_RCC_OscConfig+0x934>)
 8007b0e:	6a1b      	ldr	r3, [r3, #32]
 8007b10:	4a02      	ldr	r2, [pc, #8]	; (8007b1c <HAL_RCC_OscConfig+0x934>)
 8007b12:	f043 0301 	orr.w	r3, r3, #1
 8007b16:	6213      	str	r3, [r2, #32]
 8007b18:	e03c      	b.n	8007b94 <HAL_RCC_OscConfig+0x9ac>
 8007b1a:	bf00      	nop
 8007b1c:	40021000 	.word	0x40021000
 8007b20:	10908120 	.word	0x10908120
 8007b24:	40007000 	.word	0x40007000
 8007b28:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007b2c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8007b30:	681b      	ldr	r3, [r3, #0]
 8007b32:	68db      	ldr	r3, [r3, #12]
 8007b34:	2b00      	cmp	r3, #0
 8007b36:	d10c      	bne.n	8007b52 <HAL_RCC_OscConfig+0x96a>
 8007b38:	4bc1      	ldr	r3, [pc, #772]	; (8007e40 <HAL_RCC_OscConfig+0xc58>)
 8007b3a:	6a1b      	ldr	r3, [r3, #32]
 8007b3c:	4ac0      	ldr	r2, [pc, #768]	; (8007e40 <HAL_RCC_OscConfig+0xc58>)
 8007b3e:	f023 0301 	bic.w	r3, r3, #1
 8007b42:	6213      	str	r3, [r2, #32]
 8007b44:	4bbe      	ldr	r3, [pc, #760]	; (8007e40 <HAL_RCC_OscConfig+0xc58>)
 8007b46:	6a1b      	ldr	r3, [r3, #32]
 8007b48:	4abd      	ldr	r2, [pc, #756]	; (8007e40 <HAL_RCC_OscConfig+0xc58>)
 8007b4a:	f023 0304 	bic.w	r3, r3, #4
 8007b4e:	6213      	str	r3, [r2, #32]
 8007b50:	e020      	b.n	8007b94 <HAL_RCC_OscConfig+0x9ac>
 8007b52:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007b56:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8007b5a:	681b      	ldr	r3, [r3, #0]
 8007b5c:	68db      	ldr	r3, [r3, #12]
 8007b5e:	2b05      	cmp	r3, #5
 8007b60:	d10c      	bne.n	8007b7c <HAL_RCC_OscConfig+0x994>
 8007b62:	4bb7      	ldr	r3, [pc, #732]	; (8007e40 <HAL_RCC_OscConfig+0xc58>)
 8007b64:	6a1b      	ldr	r3, [r3, #32]
 8007b66:	4ab6      	ldr	r2, [pc, #728]	; (8007e40 <HAL_RCC_OscConfig+0xc58>)
 8007b68:	f043 0304 	orr.w	r3, r3, #4
 8007b6c:	6213      	str	r3, [r2, #32]
 8007b6e:	4bb4      	ldr	r3, [pc, #720]	; (8007e40 <HAL_RCC_OscConfig+0xc58>)
 8007b70:	6a1b      	ldr	r3, [r3, #32]
 8007b72:	4ab3      	ldr	r2, [pc, #716]	; (8007e40 <HAL_RCC_OscConfig+0xc58>)
 8007b74:	f043 0301 	orr.w	r3, r3, #1
 8007b78:	6213      	str	r3, [r2, #32]
 8007b7a:	e00b      	b.n	8007b94 <HAL_RCC_OscConfig+0x9ac>
 8007b7c:	4bb0      	ldr	r3, [pc, #704]	; (8007e40 <HAL_RCC_OscConfig+0xc58>)
 8007b7e:	6a1b      	ldr	r3, [r3, #32]
 8007b80:	4aaf      	ldr	r2, [pc, #700]	; (8007e40 <HAL_RCC_OscConfig+0xc58>)
 8007b82:	f023 0301 	bic.w	r3, r3, #1
 8007b86:	6213      	str	r3, [r2, #32]
 8007b88:	4bad      	ldr	r3, [pc, #692]	; (8007e40 <HAL_RCC_OscConfig+0xc58>)
 8007b8a:	6a1b      	ldr	r3, [r3, #32]
 8007b8c:	4aac      	ldr	r2, [pc, #688]	; (8007e40 <HAL_RCC_OscConfig+0xc58>)
 8007b8e:	f023 0304 	bic.w	r3, r3, #4
 8007b92:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8007b94:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007b98:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8007b9c:	681b      	ldr	r3, [r3, #0]
 8007b9e:	68db      	ldr	r3, [r3, #12]
 8007ba0:	2b00      	cmp	r3, #0
 8007ba2:	f000 8081 	beq.w	8007ca8 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007ba6:	f7fc fff3 	bl	8004b90 <HAL_GetTick>
 8007baa:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007bae:	e00b      	b.n	8007bc8 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007bb0:	f7fc ffee 	bl	8004b90 <HAL_GetTick>
 8007bb4:	4602      	mov	r2, r0
 8007bb6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8007bba:	1ad3      	subs	r3, r2, r3
 8007bbc:	f241 3288 	movw	r2, #5000	; 0x1388
 8007bc0:	4293      	cmp	r3, r2
 8007bc2:	d901      	bls.n	8007bc8 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 8007bc4:	2303      	movs	r3, #3
 8007bc6:	e345      	b.n	8008254 <HAL_RCC_OscConfig+0x106c>
 8007bc8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007bcc:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8007bd0:	2202      	movs	r2, #2
 8007bd2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007bd4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007bd8:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8007bdc:	681b      	ldr	r3, [r3, #0]
 8007bde:	fa93 f2a3 	rbit	r2, r3
 8007be2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007be6:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8007bea:	601a      	str	r2, [r3, #0]
 8007bec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007bf0:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8007bf4:	2202      	movs	r2, #2
 8007bf6:	601a      	str	r2, [r3, #0]
 8007bf8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007bfc:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8007c00:	681b      	ldr	r3, [r3, #0]
 8007c02:	fa93 f2a3 	rbit	r2, r3
 8007c06:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007c0a:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8007c0e:	601a      	str	r2, [r3, #0]
  return result;
 8007c10:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007c14:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8007c18:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007c1a:	fab3 f383 	clz	r3, r3
 8007c1e:	b2db      	uxtb	r3, r3
 8007c20:	095b      	lsrs	r3, r3, #5
 8007c22:	b2db      	uxtb	r3, r3
 8007c24:	f043 0302 	orr.w	r3, r3, #2
 8007c28:	b2db      	uxtb	r3, r3
 8007c2a:	2b02      	cmp	r3, #2
 8007c2c:	d102      	bne.n	8007c34 <HAL_RCC_OscConfig+0xa4c>
 8007c2e:	4b84      	ldr	r3, [pc, #528]	; (8007e40 <HAL_RCC_OscConfig+0xc58>)
 8007c30:	6a1b      	ldr	r3, [r3, #32]
 8007c32:	e013      	b.n	8007c5c <HAL_RCC_OscConfig+0xa74>
 8007c34:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007c38:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8007c3c:	2202      	movs	r2, #2
 8007c3e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007c40:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007c44:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8007c48:	681b      	ldr	r3, [r3, #0]
 8007c4a:	fa93 f2a3 	rbit	r2, r3
 8007c4e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007c52:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8007c56:	601a      	str	r2, [r3, #0]
 8007c58:	4b79      	ldr	r3, [pc, #484]	; (8007e40 <HAL_RCC_OscConfig+0xc58>)
 8007c5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c5c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8007c60:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8007c64:	2102      	movs	r1, #2
 8007c66:	6011      	str	r1, [r2, #0]
 8007c68:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8007c6c:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8007c70:	6812      	ldr	r2, [r2, #0]
 8007c72:	fa92 f1a2 	rbit	r1, r2
 8007c76:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8007c7a:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8007c7e:	6011      	str	r1, [r2, #0]
  return result;
 8007c80:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8007c84:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8007c88:	6812      	ldr	r2, [r2, #0]
 8007c8a:	fab2 f282 	clz	r2, r2
 8007c8e:	b2d2      	uxtb	r2, r2
 8007c90:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007c94:	b2d2      	uxtb	r2, r2
 8007c96:	f002 021f 	and.w	r2, r2, #31
 8007c9a:	2101      	movs	r1, #1
 8007c9c:	fa01 f202 	lsl.w	r2, r1, r2
 8007ca0:	4013      	ands	r3, r2
 8007ca2:	2b00      	cmp	r3, #0
 8007ca4:	d084      	beq.n	8007bb0 <HAL_RCC_OscConfig+0x9c8>
 8007ca6:	e07f      	b.n	8007da8 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007ca8:	f7fc ff72 	bl	8004b90 <HAL_GetTick>
 8007cac:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007cb0:	e00b      	b.n	8007cca <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007cb2:	f7fc ff6d 	bl	8004b90 <HAL_GetTick>
 8007cb6:	4602      	mov	r2, r0
 8007cb8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8007cbc:	1ad3      	subs	r3, r2, r3
 8007cbe:	f241 3288 	movw	r2, #5000	; 0x1388
 8007cc2:	4293      	cmp	r3, r2
 8007cc4:	d901      	bls.n	8007cca <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 8007cc6:	2303      	movs	r3, #3
 8007cc8:	e2c4      	b.n	8008254 <HAL_RCC_OscConfig+0x106c>
 8007cca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007cce:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8007cd2:	2202      	movs	r2, #2
 8007cd4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007cd6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007cda:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8007cde:	681b      	ldr	r3, [r3, #0]
 8007ce0:	fa93 f2a3 	rbit	r2, r3
 8007ce4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007ce8:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8007cec:	601a      	str	r2, [r3, #0]
 8007cee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007cf2:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8007cf6:	2202      	movs	r2, #2
 8007cf8:	601a      	str	r2, [r3, #0]
 8007cfa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007cfe:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8007d02:	681b      	ldr	r3, [r3, #0]
 8007d04:	fa93 f2a3 	rbit	r2, r3
 8007d08:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007d0c:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8007d10:	601a      	str	r2, [r3, #0]
  return result;
 8007d12:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007d16:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8007d1a:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007d1c:	fab3 f383 	clz	r3, r3
 8007d20:	b2db      	uxtb	r3, r3
 8007d22:	095b      	lsrs	r3, r3, #5
 8007d24:	b2db      	uxtb	r3, r3
 8007d26:	f043 0302 	orr.w	r3, r3, #2
 8007d2a:	b2db      	uxtb	r3, r3
 8007d2c:	2b02      	cmp	r3, #2
 8007d2e:	d102      	bne.n	8007d36 <HAL_RCC_OscConfig+0xb4e>
 8007d30:	4b43      	ldr	r3, [pc, #268]	; (8007e40 <HAL_RCC_OscConfig+0xc58>)
 8007d32:	6a1b      	ldr	r3, [r3, #32]
 8007d34:	e013      	b.n	8007d5e <HAL_RCC_OscConfig+0xb76>
 8007d36:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007d3a:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8007d3e:	2202      	movs	r2, #2
 8007d40:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007d42:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007d46:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8007d4a:	681b      	ldr	r3, [r3, #0]
 8007d4c:	fa93 f2a3 	rbit	r2, r3
 8007d50:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007d54:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8007d58:	601a      	str	r2, [r3, #0]
 8007d5a:	4b39      	ldr	r3, [pc, #228]	; (8007e40 <HAL_RCC_OscConfig+0xc58>)
 8007d5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d5e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8007d62:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8007d66:	2102      	movs	r1, #2
 8007d68:	6011      	str	r1, [r2, #0]
 8007d6a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8007d6e:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8007d72:	6812      	ldr	r2, [r2, #0]
 8007d74:	fa92 f1a2 	rbit	r1, r2
 8007d78:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8007d7c:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8007d80:	6011      	str	r1, [r2, #0]
  return result;
 8007d82:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8007d86:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8007d8a:	6812      	ldr	r2, [r2, #0]
 8007d8c:	fab2 f282 	clz	r2, r2
 8007d90:	b2d2      	uxtb	r2, r2
 8007d92:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007d96:	b2d2      	uxtb	r2, r2
 8007d98:	f002 021f 	and.w	r2, r2, #31
 8007d9c:	2101      	movs	r1, #1
 8007d9e:	fa01 f202 	lsl.w	r2, r1, r2
 8007da2:	4013      	ands	r3, r2
 8007da4:	2b00      	cmp	r3, #0
 8007da6:	d184      	bne.n	8007cb2 <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8007da8:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8007dac:	2b01      	cmp	r3, #1
 8007dae:	d105      	bne.n	8007dbc <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007db0:	4b23      	ldr	r3, [pc, #140]	; (8007e40 <HAL_RCC_OscConfig+0xc58>)
 8007db2:	69db      	ldr	r3, [r3, #28]
 8007db4:	4a22      	ldr	r2, [pc, #136]	; (8007e40 <HAL_RCC_OscConfig+0xc58>)
 8007db6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007dba:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007dbc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007dc0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8007dc4:	681b      	ldr	r3, [r3, #0]
 8007dc6:	69db      	ldr	r3, [r3, #28]
 8007dc8:	2b00      	cmp	r3, #0
 8007dca:	f000 8242 	beq.w	8008252 <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8007dce:	4b1c      	ldr	r3, [pc, #112]	; (8007e40 <HAL_RCC_OscConfig+0xc58>)
 8007dd0:	685b      	ldr	r3, [r3, #4]
 8007dd2:	f003 030c 	and.w	r3, r3, #12
 8007dd6:	2b08      	cmp	r3, #8
 8007dd8:	f000 8213 	beq.w	8008202 <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007ddc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007de0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8007de4:	681b      	ldr	r3, [r3, #0]
 8007de6:	69db      	ldr	r3, [r3, #28]
 8007de8:	2b02      	cmp	r3, #2
 8007dea:	f040 8162 	bne.w	80080b2 <HAL_RCC_OscConfig+0xeca>
 8007dee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007df2:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8007df6:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8007dfa:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007dfc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007e00:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8007e04:	681b      	ldr	r3, [r3, #0]
 8007e06:	fa93 f2a3 	rbit	r2, r3
 8007e0a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007e0e:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8007e12:	601a      	str	r2, [r3, #0]
  return result;
 8007e14:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007e18:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8007e1c:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007e1e:	fab3 f383 	clz	r3, r3
 8007e22:	b2db      	uxtb	r3, r3
 8007e24:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8007e28:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8007e2c:	009b      	lsls	r3, r3, #2
 8007e2e:	461a      	mov	r2, r3
 8007e30:	2300      	movs	r3, #0
 8007e32:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007e34:	f7fc feac 	bl	8004b90 <HAL_GetTick>
 8007e38:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8007e3c:	e00c      	b.n	8007e58 <HAL_RCC_OscConfig+0xc70>
 8007e3e:	bf00      	nop
 8007e40:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007e44:	f7fc fea4 	bl	8004b90 <HAL_GetTick>
 8007e48:	4602      	mov	r2, r0
 8007e4a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8007e4e:	1ad3      	subs	r3, r2, r3
 8007e50:	2b02      	cmp	r3, #2
 8007e52:	d901      	bls.n	8007e58 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 8007e54:	2303      	movs	r3, #3
 8007e56:	e1fd      	b.n	8008254 <HAL_RCC_OscConfig+0x106c>
 8007e58:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007e5c:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8007e60:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8007e64:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007e66:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007e6a:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8007e6e:	681b      	ldr	r3, [r3, #0]
 8007e70:	fa93 f2a3 	rbit	r2, r3
 8007e74:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007e78:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8007e7c:	601a      	str	r2, [r3, #0]
  return result;
 8007e7e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007e82:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8007e86:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8007e88:	fab3 f383 	clz	r3, r3
 8007e8c:	b2db      	uxtb	r3, r3
 8007e8e:	095b      	lsrs	r3, r3, #5
 8007e90:	b2db      	uxtb	r3, r3
 8007e92:	f043 0301 	orr.w	r3, r3, #1
 8007e96:	b2db      	uxtb	r3, r3
 8007e98:	2b01      	cmp	r3, #1
 8007e9a:	d102      	bne.n	8007ea2 <HAL_RCC_OscConfig+0xcba>
 8007e9c:	4bb0      	ldr	r3, [pc, #704]	; (8008160 <HAL_RCC_OscConfig+0xf78>)
 8007e9e:	681b      	ldr	r3, [r3, #0]
 8007ea0:	e027      	b.n	8007ef2 <HAL_RCC_OscConfig+0xd0a>
 8007ea2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007ea6:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8007eaa:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8007eae:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007eb0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007eb4:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8007eb8:	681b      	ldr	r3, [r3, #0]
 8007eba:	fa93 f2a3 	rbit	r2, r3
 8007ebe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007ec2:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8007ec6:	601a      	str	r2, [r3, #0]
 8007ec8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007ecc:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8007ed0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8007ed4:	601a      	str	r2, [r3, #0]
 8007ed6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007eda:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8007ede:	681b      	ldr	r3, [r3, #0]
 8007ee0:	fa93 f2a3 	rbit	r2, r3
 8007ee4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007ee8:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8007eec:	601a      	str	r2, [r3, #0]
 8007eee:	4b9c      	ldr	r3, [pc, #624]	; (8008160 <HAL_RCC_OscConfig+0xf78>)
 8007ef0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ef2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8007ef6:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8007efa:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8007efe:	6011      	str	r1, [r2, #0]
 8007f00:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8007f04:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8007f08:	6812      	ldr	r2, [r2, #0]
 8007f0a:	fa92 f1a2 	rbit	r1, r2
 8007f0e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8007f12:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8007f16:	6011      	str	r1, [r2, #0]
  return result;
 8007f18:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8007f1c:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8007f20:	6812      	ldr	r2, [r2, #0]
 8007f22:	fab2 f282 	clz	r2, r2
 8007f26:	b2d2      	uxtb	r2, r2
 8007f28:	f042 0220 	orr.w	r2, r2, #32
 8007f2c:	b2d2      	uxtb	r2, r2
 8007f2e:	f002 021f 	and.w	r2, r2, #31
 8007f32:	2101      	movs	r1, #1
 8007f34:	fa01 f202 	lsl.w	r2, r1, r2
 8007f38:	4013      	ands	r3, r2
 8007f3a:	2b00      	cmp	r3, #0
 8007f3c:	d182      	bne.n	8007e44 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007f3e:	4b88      	ldr	r3, [pc, #544]	; (8008160 <HAL_RCC_OscConfig+0xf78>)
 8007f40:	685b      	ldr	r3, [r3, #4]
 8007f42:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8007f46:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007f4a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8007f4e:	681b      	ldr	r3, [r3, #0]
 8007f50:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8007f52:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007f56:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8007f5a:	681b      	ldr	r3, [r3, #0]
 8007f5c:	6a1b      	ldr	r3, [r3, #32]
 8007f5e:	430b      	orrs	r3, r1
 8007f60:	497f      	ldr	r1, [pc, #508]	; (8008160 <HAL_RCC_OscConfig+0xf78>)
 8007f62:	4313      	orrs	r3, r2
 8007f64:	604b      	str	r3, [r1, #4]
 8007f66:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007f6a:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8007f6e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8007f72:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007f74:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007f78:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8007f7c:	681b      	ldr	r3, [r3, #0]
 8007f7e:	fa93 f2a3 	rbit	r2, r3
 8007f82:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007f86:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8007f8a:	601a      	str	r2, [r3, #0]
  return result;
 8007f8c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007f90:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8007f94:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007f96:	fab3 f383 	clz	r3, r3
 8007f9a:	b2db      	uxtb	r3, r3
 8007f9c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8007fa0:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8007fa4:	009b      	lsls	r3, r3, #2
 8007fa6:	461a      	mov	r2, r3
 8007fa8:	2301      	movs	r3, #1
 8007faa:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007fac:	f7fc fdf0 	bl	8004b90 <HAL_GetTick>
 8007fb0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8007fb4:	e009      	b.n	8007fca <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007fb6:	f7fc fdeb 	bl	8004b90 <HAL_GetTick>
 8007fba:	4602      	mov	r2, r0
 8007fbc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8007fc0:	1ad3      	subs	r3, r2, r3
 8007fc2:	2b02      	cmp	r3, #2
 8007fc4:	d901      	bls.n	8007fca <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 8007fc6:	2303      	movs	r3, #3
 8007fc8:	e144      	b.n	8008254 <HAL_RCC_OscConfig+0x106c>
 8007fca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007fce:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8007fd2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8007fd6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007fd8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007fdc:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8007fe0:	681b      	ldr	r3, [r3, #0]
 8007fe2:	fa93 f2a3 	rbit	r2, r3
 8007fe6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007fea:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8007fee:	601a      	str	r2, [r3, #0]
  return result;
 8007ff0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007ff4:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8007ff8:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8007ffa:	fab3 f383 	clz	r3, r3
 8007ffe:	b2db      	uxtb	r3, r3
 8008000:	095b      	lsrs	r3, r3, #5
 8008002:	b2db      	uxtb	r3, r3
 8008004:	f043 0301 	orr.w	r3, r3, #1
 8008008:	b2db      	uxtb	r3, r3
 800800a:	2b01      	cmp	r3, #1
 800800c:	d102      	bne.n	8008014 <HAL_RCC_OscConfig+0xe2c>
 800800e:	4b54      	ldr	r3, [pc, #336]	; (8008160 <HAL_RCC_OscConfig+0xf78>)
 8008010:	681b      	ldr	r3, [r3, #0]
 8008012:	e027      	b.n	8008064 <HAL_RCC_OscConfig+0xe7c>
 8008014:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8008018:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 800801c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8008020:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008022:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8008026:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 800802a:	681b      	ldr	r3, [r3, #0]
 800802c:	fa93 f2a3 	rbit	r2, r3
 8008030:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8008034:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8008038:	601a      	str	r2, [r3, #0]
 800803a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800803e:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8008042:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8008046:	601a      	str	r2, [r3, #0]
 8008048:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800804c:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8008050:	681b      	ldr	r3, [r3, #0]
 8008052:	fa93 f2a3 	rbit	r2, r3
 8008056:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800805a:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 800805e:	601a      	str	r2, [r3, #0]
 8008060:	4b3f      	ldr	r3, [pc, #252]	; (8008160 <HAL_RCC_OscConfig+0xf78>)
 8008062:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008064:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8008068:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 800806c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8008070:	6011      	str	r1, [r2, #0]
 8008072:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8008076:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 800807a:	6812      	ldr	r2, [r2, #0]
 800807c:	fa92 f1a2 	rbit	r1, r2
 8008080:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8008084:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8008088:	6011      	str	r1, [r2, #0]
  return result;
 800808a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800808e:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8008092:	6812      	ldr	r2, [r2, #0]
 8008094:	fab2 f282 	clz	r2, r2
 8008098:	b2d2      	uxtb	r2, r2
 800809a:	f042 0220 	orr.w	r2, r2, #32
 800809e:	b2d2      	uxtb	r2, r2
 80080a0:	f002 021f 	and.w	r2, r2, #31
 80080a4:	2101      	movs	r1, #1
 80080a6:	fa01 f202 	lsl.w	r2, r1, r2
 80080aa:	4013      	ands	r3, r2
 80080ac:	2b00      	cmp	r3, #0
 80080ae:	d082      	beq.n	8007fb6 <HAL_RCC_OscConfig+0xdce>
 80080b0:	e0cf      	b.n	8008252 <HAL_RCC_OscConfig+0x106a>
 80080b2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80080b6:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 80080ba:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80080be:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80080c0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80080c4:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 80080c8:	681b      	ldr	r3, [r3, #0]
 80080ca:	fa93 f2a3 	rbit	r2, r3
 80080ce:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80080d2:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 80080d6:	601a      	str	r2, [r3, #0]
  return result;
 80080d8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80080dc:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 80080e0:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80080e2:	fab3 f383 	clz	r3, r3
 80080e6:	b2db      	uxtb	r3, r3
 80080e8:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80080ec:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80080f0:	009b      	lsls	r3, r3, #2
 80080f2:	461a      	mov	r2, r3
 80080f4:	2300      	movs	r3, #0
 80080f6:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80080f8:	f7fc fd4a 	bl	8004b90 <HAL_GetTick>
 80080fc:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8008100:	e009      	b.n	8008116 <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008102:	f7fc fd45 	bl	8004b90 <HAL_GetTick>
 8008106:	4602      	mov	r2, r0
 8008108:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800810c:	1ad3      	subs	r3, r2, r3
 800810e:	2b02      	cmp	r3, #2
 8008110:	d901      	bls.n	8008116 <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 8008112:	2303      	movs	r3, #3
 8008114:	e09e      	b.n	8008254 <HAL_RCC_OscConfig+0x106c>
 8008116:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800811a:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 800811e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8008122:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008124:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8008128:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 800812c:	681b      	ldr	r3, [r3, #0]
 800812e:	fa93 f2a3 	rbit	r2, r3
 8008132:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8008136:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 800813a:	601a      	str	r2, [r3, #0]
  return result;
 800813c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8008140:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8008144:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8008146:	fab3 f383 	clz	r3, r3
 800814a:	b2db      	uxtb	r3, r3
 800814c:	095b      	lsrs	r3, r3, #5
 800814e:	b2db      	uxtb	r3, r3
 8008150:	f043 0301 	orr.w	r3, r3, #1
 8008154:	b2db      	uxtb	r3, r3
 8008156:	2b01      	cmp	r3, #1
 8008158:	d104      	bne.n	8008164 <HAL_RCC_OscConfig+0xf7c>
 800815a:	4b01      	ldr	r3, [pc, #4]	; (8008160 <HAL_RCC_OscConfig+0xf78>)
 800815c:	681b      	ldr	r3, [r3, #0]
 800815e:	e029      	b.n	80081b4 <HAL_RCC_OscConfig+0xfcc>
 8008160:	40021000 	.word	0x40021000
 8008164:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8008168:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 800816c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8008170:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008172:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8008176:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 800817a:	681b      	ldr	r3, [r3, #0]
 800817c:	fa93 f2a3 	rbit	r2, r3
 8008180:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8008184:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8008188:	601a      	str	r2, [r3, #0]
 800818a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800818e:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8008192:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8008196:	601a      	str	r2, [r3, #0]
 8008198:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800819c:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 80081a0:	681b      	ldr	r3, [r3, #0]
 80081a2:	fa93 f2a3 	rbit	r2, r3
 80081a6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80081aa:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 80081ae:	601a      	str	r2, [r3, #0]
 80081b0:	4b2b      	ldr	r3, [pc, #172]	; (8008260 <HAL_RCC_OscConfig+0x1078>)
 80081b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081b4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80081b8:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 80081bc:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80081c0:	6011      	str	r1, [r2, #0]
 80081c2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80081c6:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 80081ca:	6812      	ldr	r2, [r2, #0]
 80081cc:	fa92 f1a2 	rbit	r1, r2
 80081d0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80081d4:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 80081d8:	6011      	str	r1, [r2, #0]
  return result;
 80081da:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80081de:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 80081e2:	6812      	ldr	r2, [r2, #0]
 80081e4:	fab2 f282 	clz	r2, r2
 80081e8:	b2d2      	uxtb	r2, r2
 80081ea:	f042 0220 	orr.w	r2, r2, #32
 80081ee:	b2d2      	uxtb	r2, r2
 80081f0:	f002 021f 	and.w	r2, r2, #31
 80081f4:	2101      	movs	r1, #1
 80081f6:	fa01 f202 	lsl.w	r2, r1, r2
 80081fa:	4013      	ands	r3, r2
 80081fc:	2b00      	cmp	r3, #0
 80081fe:	d180      	bne.n	8008102 <HAL_RCC_OscConfig+0xf1a>
 8008200:	e027      	b.n	8008252 <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8008202:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8008206:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800820a:	681b      	ldr	r3, [r3, #0]
 800820c:	69db      	ldr	r3, [r3, #28]
 800820e:	2b01      	cmp	r3, #1
 8008210:	d101      	bne.n	8008216 <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 8008212:	2301      	movs	r3, #1
 8008214:	e01e      	b.n	8008254 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8008216:	4b12      	ldr	r3, [pc, #72]	; (8008260 <HAL_RCC_OscConfig+0x1078>)
 8008218:	685b      	ldr	r3, [r3, #4]
 800821a:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800821e:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8008222:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8008226:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800822a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800822e:	681b      	ldr	r3, [r3, #0]
 8008230:	6a1b      	ldr	r3, [r3, #32]
 8008232:	429a      	cmp	r2, r3
 8008234:	d10b      	bne.n	800824e <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8008236:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800823a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800823e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8008242:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8008246:	681b      	ldr	r3, [r3, #0]
 8008248:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800824a:	429a      	cmp	r2, r3
 800824c:	d001      	beq.n	8008252 <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 800824e:	2301      	movs	r3, #1
 8008250:	e000      	b.n	8008254 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 8008252:	2300      	movs	r3, #0
}
 8008254:	4618      	mov	r0, r3
 8008256:	f507 7700 	add.w	r7, r7, #512	; 0x200
 800825a:	46bd      	mov	sp, r7
 800825c:	bd80      	pop	{r7, pc}
 800825e:	bf00      	nop
 8008260:	40021000 	.word	0x40021000

08008264 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008264:	b580      	push	{r7, lr}
 8008266:	b09e      	sub	sp, #120	; 0x78
 8008268:	af00      	add	r7, sp, #0
 800826a:	6078      	str	r0, [r7, #4]
 800826c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800826e:	2300      	movs	r3, #0
 8008270:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	2b00      	cmp	r3, #0
 8008276:	d101      	bne.n	800827c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8008278:	2301      	movs	r3, #1
 800827a:	e162      	b.n	8008542 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800827c:	4b90      	ldr	r3, [pc, #576]	; (80084c0 <HAL_RCC_ClockConfig+0x25c>)
 800827e:	681b      	ldr	r3, [r3, #0]
 8008280:	f003 0307 	and.w	r3, r3, #7
 8008284:	683a      	ldr	r2, [r7, #0]
 8008286:	429a      	cmp	r2, r3
 8008288:	d910      	bls.n	80082ac <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800828a:	4b8d      	ldr	r3, [pc, #564]	; (80084c0 <HAL_RCC_ClockConfig+0x25c>)
 800828c:	681b      	ldr	r3, [r3, #0]
 800828e:	f023 0207 	bic.w	r2, r3, #7
 8008292:	498b      	ldr	r1, [pc, #556]	; (80084c0 <HAL_RCC_ClockConfig+0x25c>)
 8008294:	683b      	ldr	r3, [r7, #0]
 8008296:	4313      	orrs	r3, r2
 8008298:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800829a:	4b89      	ldr	r3, [pc, #548]	; (80084c0 <HAL_RCC_ClockConfig+0x25c>)
 800829c:	681b      	ldr	r3, [r3, #0]
 800829e:	f003 0307 	and.w	r3, r3, #7
 80082a2:	683a      	ldr	r2, [r7, #0]
 80082a4:	429a      	cmp	r2, r3
 80082a6:	d001      	beq.n	80082ac <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80082a8:	2301      	movs	r3, #1
 80082aa:	e14a      	b.n	8008542 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	681b      	ldr	r3, [r3, #0]
 80082b0:	f003 0302 	and.w	r3, r3, #2
 80082b4:	2b00      	cmp	r3, #0
 80082b6:	d008      	beq.n	80082ca <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80082b8:	4b82      	ldr	r3, [pc, #520]	; (80084c4 <HAL_RCC_ClockConfig+0x260>)
 80082ba:	685b      	ldr	r3, [r3, #4]
 80082bc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	689b      	ldr	r3, [r3, #8]
 80082c4:	497f      	ldr	r1, [pc, #508]	; (80084c4 <HAL_RCC_ClockConfig+0x260>)
 80082c6:	4313      	orrs	r3, r2
 80082c8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	681b      	ldr	r3, [r3, #0]
 80082ce:	f003 0301 	and.w	r3, r3, #1
 80082d2:	2b00      	cmp	r3, #0
 80082d4:	f000 80dc 	beq.w	8008490 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	685b      	ldr	r3, [r3, #4]
 80082dc:	2b01      	cmp	r3, #1
 80082de:	d13c      	bne.n	800835a <HAL_RCC_ClockConfig+0xf6>
 80082e0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80082e4:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80082e6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80082e8:	fa93 f3a3 	rbit	r3, r3
 80082ec:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 80082ee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80082f0:	fab3 f383 	clz	r3, r3
 80082f4:	b2db      	uxtb	r3, r3
 80082f6:	095b      	lsrs	r3, r3, #5
 80082f8:	b2db      	uxtb	r3, r3
 80082fa:	f043 0301 	orr.w	r3, r3, #1
 80082fe:	b2db      	uxtb	r3, r3
 8008300:	2b01      	cmp	r3, #1
 8008302:	d102      	bne.n	800830a <HAL_RCC_ClockConfig+0xa6>
 8008304:	4b6f      	ldr	r3, [pc, #444]	; (80084c4 <HAL_RCC_ClockConfig+0x260>)
 8008306:	681b      	ldr	r3, [r3, #0]
 8008308:	e00f      	b.n	800832a <HAL_RCC_ClockConfig+0xc6>
 800830a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800830e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008310:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008312:	fa93 f3a3 	rbit	r3, r3
 8008316:	667b      	str	r3, [r7, #100]	; 0x64
 8008318:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800831c:	663b      	str	r3, [r7, #96]	; 0x60
 800831e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008320:	fa93 f3a3 	rbit	r3, r3
 8008324:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008326:	4b67      	ldr	r3, [pc, #412]	; (80084c4 <HAL_RCC_ClockConfig+0x260>)
 8008328:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800832a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800832e:	65ba      	str	r2, [r7, #88]	; 0x58
 8008330:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008332:	fa92 f2a2 	rbit	r2, r2
 8008336:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8008338:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800833a:	fab2 f282 	clz	r2, r2
 800833e:	b2d2      	uxtb	r2, r2
 8008340:	f042 0220 	orr.w	r2, r2, #32
 8008344:	b2d2      	uxtb	r2, r2
 8008346:	f002 021f 	and.w	r2, r2, #31
 800834a:	2101      	movs	r1, #1
 800834c:	fa01 f202 	lsl.w	r2, r1, r2
 8008350:	4013      	ands	r3, r2
 8008352:	2b00      	cmp	r3, #0
 8008354:	d17b      	bne.n	800844e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8008356:	2301      	movs	r3, #1
 8008358:	e0f3      	b.n	8008542 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	685b      	ldr	r3, [r3, #4]
 800835e:	2b02      	cmp	r3, #2
 8008360:	d13c      	bne.n	80083dc <HAL_RCC_ClockConfig+0x178>
 8008362:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8008366:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008368:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800836a:	fa93 f3a3 	rbit	r3, r3
 800836e:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8008370:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008372:	fab3 f383 	clz	r3, r3
 8008376:	b2db      	uxtb	r3, r3
 8008378:	095b      	lsrs	r3, r3, #5
 800837a:	b2db      	uxtb	r3, r3
 800837c:	f043 0301 	orr.w	r3, r3, #1
 8008380:	b2db      	uxtb	r3, r3
 8008382:	2b01      	cmp	r3, #1
 8008384:	d102      	bne.n	800838c <HAL_RCC_ClockConfig+0x128>
 8008386:	4b4f      	ldr	r3, [pc, #316]	; (80084c4 <HAL_RCC_ClockConfig+0x260>)
 8008388:	681b      	ldr	r3, [r3, #0]
 800838a:	e00f      	b.n	80083ac <HAL_RCC_ClockConfig+0x148>
 800838c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8008390:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008392:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008394:	fa93 f3a3 	rbit	r3, r3
 8008398:	647b      	str	r3, [r7, #68]	; 0x44
 800839a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800839e:	643b      	str	r3, [r7, #64]	; 0x40
 80083a0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80083a2:	fa93 f3a3 	rbit	r3, r3
 80083a6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80083a8:	4b46      	ldr	r3, [pc, #280]	; (80084c4 <HAL_RCC_ClockConfig+0x260>)
 80083aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083ac:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80083b0:	63ba      	str	r2, [r7, #56]	; 0x38
 80083b2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80083b4:	fa92 f2a2 	rbit	r2, r2
 80083b8:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 80083ba:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80083bc:	fab2 f282 	clz	r2, r2
 80083c0:	b2d2      	uxtb	r2, r2
 80083c2:	f042 0220 	orr.w	r2, r2, #32
 80083c6:	b2d2      	uxtb	r2, r2
 80083c8:	f002 021f 	and.w	r2, r2, #31
 80083cc:	2101      	movs	r1, #1
 80083ce:	fa01 f202 	lsl.w	r2, r1, r2
 80083d2:	4013      	ands	r3, r2
 80083d4:	2b00      	cmp	r3, #0
 80083d6:	d13a      	bne.n	800844e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80083d8:	2301      	movs	r3, #1
 80083da:	e0b2      	b.n	8008542 <HAL_RCC_ClockConfig+0x2de>
 80083dc:	2302      	movs	r3, #2
 80083de:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80083e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083e2:	fa93 f3a3 	rbit	r3, r3
 80083e6:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80083e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80083ea:	fab3 f383 	clz	r3, r3
 80083ee:	b2db      	uxtb	r3, r3
 80083f0:	095b      	lsrs	r3, r3, #5
 80083f2:	b2db      	uxtb	r3, r3
 80083f4:	f043 0301 	orr.w	r3, r3, #1
 80083f8:	b2db      	uxtb	r3, r3
 80083fa:	2b01      	cmp	r3, #1
 80083fc:	d102      	bne.n	8008404 <HAL_RCC_ClockConfig+0x1a0>
 80083fe:	4b31      	ldr	r3, [pc, #196]	; (80084c4 <HAL_RCC_ClockConfig+0x260>)
 8008400:	681b      	ldr	r3, [r3, #0]
 8008402:	e00d      	b.n	8008420 <HAL_RCC_ClockConfig+0x1bc>
 8008404:	2302      	movs	r3, #2
 8008406:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008408:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800840a:	fa93 f3a3 	rbit	r3, r3
 800840e:	627b      	str	r3, [r7, #36]	; 0x24
 8008410:	2302      	movs	r3, #2
 8008412:	623b      	str	r3, [r7, #32]
 8008414:	6a3b      	ldr	r3, [r7, #32]
 8008416:	fa93 f3a3 	rbit	r3, r3
 800841a:	61fb      	str	r3, [r7, #28]
 800841c:	4b29      	ldr	r3, [pc, #164]	; (80084c4 <HAL_RCC_ClockConfig+0x260>)
 800841e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008420:	2202      	movs	r2, #2
 8008422:	61ba      	str	r2, [r7, #24]
 8008424:	69ba      	ldr	r2, [r7, #24]
 8008426:	fa92 f2a2 	rbit	r2, r2
 800842a:	617a      	str	r2, [r7, #20]
  return result;
 800842c:	697a      	ldr	r2, [r7, #20]
 800842e:	fab2 f282 	clz	r2, r2
 8008432:	b2d2      	uxtb	r2, r2
 8008434:	f042 0220 	orr.w	r2, r2, #32
 8008438:	b2d2      	uxtb	r2, r2
 800843a:	f002 021f 	and.w	r2, r2, #31
 800843e:	2101      	movs	r1, #1
 8008440:	fa01 f202 	lsl.w	r2, r1, r2
 8008444:	4013      	ands	r3, r2
 8008446:	2b00      	cmp	r3, #0
 8008448:	d101      	bne.n	800844e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800844a:	2301      	movs	r3, #1
 800844c:	e079      	b.n	8008542 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800844e:	4b1d      	ldr	r3, [pc, #116]	; (80084c4 <HAL_RCC_ClockConfig+0x260>)
 8008450:	685b      	ldr	r3, [r3, #4]
 8008452:	f023 0203 	bic.w	r2, r3, #3
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	685b      	ldr	r3, [r3, #4]
 800845a:	491a      	ldr	r1, [pc, #104]	; (80084c4 <HAL_RCC_ClockConfig+0x260>)
 800845c:	4313      	orrs	r3, r2
 800845e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8008460:	f7fc fb96 	bl	8004b90 <HAL_GetTick>
 8008464:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008466:	e00a      	b.n	800847e <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008468:	f7fc fb92 	bl	8004b90 <HAL_GetTick>
 800846c:	4602      	mov	r2, r0
 800846e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008470:	1ad3      	subs	r3, r2, r3
 8008472:	f241 3288 	movw	r2, #5000	; 0x1388
 8008476:	4293      	cmp	r3, r2
 8008478:	d901      	bls.n	800847e <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 800847a:	2303      	movs	r3, #3
 800847c:	e061      	b.n	8008542 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800847e:	4b11      	ldr	r3, [pc, #68]	; (80084c4 <HAL_RCC_ClockConfig+0x260>)
 8008480:	685b      	ldr	r3, [r3, #4]
 8008482:	f003 020c 	and.w	r2, r3, #12
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	685b      	ldr	r3, [r3, #4]
 800848a:	009b      	lsls	r3, r3, #2
 800848c:	429a      	cmp	r2, r3
 800848e:	d1eb      	bne.n	8008468 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8008490:	4b0b      	ldr	r3, [pc, #44]	; (80084c0 <HAL_RCC_ClockConfig+0x25c>)
 8008492:	681b      	ldr	r3, [r3, #0]
 8008494:	f003 0307 	and.w	r3, r3, #7
 8008498:	683a      	ldr	r2, [r7, #0]
 800849a:	429a      	cmp	r2, r3
 800849c:	d214      	bcs.n	80084c8 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800849e:	4b08      	ldr	r3, [pc, #32]	; (80084c0 <HAL_RCC_ClockConfig+0x25c>)
 80084a0:	681b      	ldr	r3, [r3, #0]
 80084a2:	f023 0207 	bic.w	r2, r3, #7
 80084a6:	4906      	ldr	r1, [pc, #24]	; (80084c0 <HAL_RCC_ClockConfig+0x25c>)
 80084a8:	683b      	ldr	r3, [r7, #0]
 80084aa:	4313      	orrs	r3, r2
 80084ac:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80084ae:	4b04      	ldr	r3, [pc, #16]	; (80084c0 <HAL_RCC_ClockConfig+0x25c>)
 80084b0:	681b      	ldr	r3, [r3, #0]
 80084b2:	f003 0307 	and.w	r3, r3, #7
 80084b6:	683a      	ldr	r2, [r7, #0]
 80084b8:	429a      	cmp	r2, r3
 80084ba:	d005      	beq.n	80084c8 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 80084bc:	2301      	movs	r3, #1
 80084be:	e040      	b.n	8008542 <HAL_RCC_ClockConfig+0x2de>
 80084c0:	40022000 	.word	0x40022000
 80084c4:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	681b      	ldr	r3, [r3, #0]
 80084cc:	f003 0304 	and.w	r3, r3, #4
 80084d0:	2b00      	cmp	r3, #0
 80084d2:	d008      	beq.n	80084e6 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80084d4:	4b1d      	ldr	r3, [pc, #116]	; (800854c <HAL_RCC_ClockConfig+0x2e8>)
 80084d6:	685b      	ldr	r3, [r3, #4]
 80084d8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	68db      	ldr	r3, [r3, #12]
 80084e0:	491a      	ldr	r1, [pc, #104]	; (800854c <HAL_RCC_ClockConfig+0x2e8>)
 80084e2:	4313      	orrs	r3, r2
 80084e4:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	681b      	ldr	r3, [r3, #0]
 80084ea:	f003 0308 	and.w	r3, r3, #8
 80084ee:	2b00      	cmp	r3, #0
 80084f0:	d009      	beq.n	8008506 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80084f2:	4b16      	ldr	r3, [pc, #88]	; (800854c <HAL_RCC_ClockConfig+0x2e8>)
 80084f4:	685b      	ldr	r3, [r3, #4]
 80084f6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	691b      	ldr	r3, [r3, #16]
 80084fe:	00db      	lsls	r3, r3, #3
 8008500:	4912      	ldr	r1, [pc, #72]	; (800854c <HAL_RCC_ClockConfig+0x2e8>)
 8008502:	4313      	orrs	r3, r2
 8008504:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8008506:	f000 f829 	bl	800855c <HAL_RCC_GetSysClockFreq>
 800850a:	4601      	mov	r1, r0
 800850c:	4b0f      	ldr	r3, [pc, #60]	; (800854c <HAL_RCC_ClockConfig+0x2e8>)
 800850e:	685b      	ldr	r3, [r3, #4]
 8008510:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008514:	22f0      	movs	r2, #240	; 0xf0
 8008516:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008518:	693a      	ldr	r2, [r7, #16]
 800851a:	fa92 f2a2 	rbit	r2, r2
 800851e:	60fa      	str	r2, [r7, #12]
  return result;
 8008520:	68fa      	ldr	r2, [r7, #12]
 8008522:	fab2 f282 	clz	r2, r2
 8008526:	b2d2      	uxtb	r2, r2
 8008528:	40d3      	lsrs	r3, r2
 800852a:	4a09      	ldr	r2, [pc, #36]	; (8008550 <HAL_RCC_ClockConfig+0x2ec>)
 800852c:	5cd3      	ldrb	r3, [r2, r3]
 800852e:	fa21 f303 	lsr.w	r3, r1, r3
 8008532:	4a08      	ldr	r2, [pc, #32]	; (8008554 <HAL_RCC_ClockConfig+0x2f0>)
 8008534:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8008536:	4b08      	ldr	r3, [pc, #32]	; (8008558 <HAL_RCC_ClockConfig+0x2f4>)
 8008538:	681b      	ldr	r3, [r3, #0]
 800853a:	4618      	mov	r0, r3
 800853c:	f7fc fae4 	bl	8004b08 <HAL_InitTick>
  
  return HAL_OK;
 8008540:	2300      	movs	r3, #0
}
 8008542:	4618      	mov	r0, r3
 8008544:	3778      	adds	r7, #120	; 0x78
 8008546:	46bd      	mov	sp, r7
 8008548:	bd80      	pop	{r7, pc}
 800854a:	bf00      	nop
 800854c:	40021000 	.word	0x40021000
 8008550:	08013bf8 	.word	0x08013bf8
 8008554:	20000008 	.word	0x20000008
 8008558:	2000000c 	.word	0x2000000c

0800855c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800855c:	b480      	push	{r7}
 800855e:	b08b      	sub	sp, #44	; 0x2c
 8008560:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8008562:	2300      	movs	r3, #0
 8008564:	61fb      	str	r3, [r7, #28]
 8008566:	2300      	movs	r3, #0
 8008568:	61bb      	str	r3, [r7, #24]
 800856a:	2300      	movs	r3, #0
 800856c:	627b      	str	r3, [r7, #36]	; 0x24
 800856e:	2300      	movs	r3, #0
 8008570:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8008572:	2300      	movs	r3, #0
 8008574:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8008576:	4b29      	ldr	r3, [pc, #164]	; (800861c <HAL_RCC_GetSysClockFreq+0xc0>)
 8008578:	685b      	ldr	r3, [r3, #4]
 800857a:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800857c:	69fb      	ldr	r3, [r7, #28]
 800857e:	f003 030c 	and.w	r3, r3, #12
 8008582:	2b04      	cmp	r3, #4
 8008584:	d002      	beq.n	800858c <HAL_RCC_GetSysClockFreq+0x30>
 8008586:	2b08      	cmp	r3, #8
 8008588:	d003      	beq.n	8008592 <HAL_RCC_GetSysClockFreq+0x36>
 800858a:	e03c      	b.n	8008606 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800858c:	4b24      	ldr	r3, [pc, #144]	; (8008620 <HAL_RCC_GetSysClockFreq+0xc4>)
 800858e:	623b      	str	r3, [r7, #32]
      break;
 8008590:	e03c      	b.n	800860c <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8008592:	69fb      	ldr	r3, [r7, #28]
 8008594:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8008598:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 800859c:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800859e:	68ba      	ldr	r2, [r7, #8]
 80085a0:	fa92 f2a2 	rbit	r2, r2
 80085a4:	607a      	str	r2, [r7, #4]
  return result;
 80085a6:	687a      	ldr	r2, [r7, #4]
 80085a8:	fab2 f282 	clz	r2, r2
 80085ac:	b2d2      	uxtb	r2, r2
 80085ae:	40d3      	lsrs	r3, r2
 80085b0:	4a1c      	ldr	r2, [pc, #112]	; (8008624 <HAL_RCC_GetSysClockFreq+0xc8>)
 80085b2:	5cd3      	ldrb	r3, [r2, r3]
 80085b4:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 80085b6:	4b19      	ldr	r3, [pc, #100]	; (800861c <HAL_RCC_GetSysClockFreq+0xc0>)
 80085b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80085ba:	f003 030f 	and.w	r3, r3, #15
 80085be:	220f      	movs	r2, #15
 80085c0:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80085c2:	693a      	ldr	r2, [r7, #16]
 80085c4:	fa92 f2a2 	rbit	r2, r2
 80085c8:	60fa      	str	r2, [r7, #12]
  return result;
 80085ca:	68fa      	ldr	r2, [r7, #12]
 80085cc:	fab2 f282 	clz	r2, r2
 80085d0:	b2d2      	uxtb	r2, r2
 80085d2:	40d3      	lsrs	r3, r2
 80085d4:	4a14      	ldr	r2, [pc, #80]	; (8008628 <HAL_RCC_GetSysClockFreq+0xcc>)
 80085d6:	5cd3      	ldrb	r3, [r2, r3]
 80085d8:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 80085da:	69fb      	ldr	r3, [r7, #28]
 80085dc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80085e0:	2b00      	cmp	r3, #0
 80085e2:	d008      	beq.n	80085f6 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80085e4:	4a0e      	ldr	r2, [pc, #56]	; (8008620 <HAL_RCC_GetSysClockFreq+0xc4>)
 80085e6:	69bb      	ldr	r3, [r7, #24]
 80085e8:	fbb2 f2f3 	udiv	r2, r2, r3
 80085ec:	697b      	ldr	r3, [r7, #20]
 80085ee:	fb02 f303 	mul.w	r3, r2, r3
 80085f2:	627b      	str	r3, [r7, #36]	; 0x24
 80085f4:	e004      	b.n	8008600 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 80085f6:	697b      	ldr	r3, [r7, #20]
 80085f8:	4a0c      	ldr	r2, [pc, #48]	; (800862c <HAL_RCC_GetSysClockFreq+0xd0>)
 80085fa:	fb02 f303 	mul.w	r3, r2, r3
 80085fe:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8008600:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008602:	623b      	str	r3, [r7, #32]
      break;
 8008604:	e002      	b.n	800860c <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8008606:	4b0a      	ldr	r3, [pc, #40]	; (8008630 <HAL_RCC_GetSysClockFreq+0xd4>)
 8008608:	623b      	str	r3, [r7, #32]
      break;
 800860a:	bf00      	nop
    }
  }
  return sysclockfreq;
 800860c:	6a3b      	ldr	r3, [r7, #32]
}
 800860e:	4618      	mov	r0, r3
 8008610:	372c      	adds	r7, #44	; 0x2c
 8008612:	46bd      	mov	sp, r7
 8008614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008618:	4770      	bx	lr
 800861a:	bf00      	nop
 800861c:	40021000 	.word	0x40021000
 8008620:	00f42400 	.word	0x00f42400
 8008624:	08013c10 	.word	0x08013c10
 8008628:	08013c20 	.word	0x08013c20
 800862c:	003d0900 	.word	0x003d0900
 8008630:	007a1200 	.word	0x007a1200

08008634 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008634:	b480      	push	{r7}
 8008636:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8008638:	4b03      	ldr	r3, [pc, #12]	; (8008648 <HAL_RCC_GetHCLKFreq+0x14>)
 800863a:	681b      	ldr	r3, [r3, #0]
}
 800863c:	4618      	mov	r0, r3
 800863e:	46bd      	mov	sp, r7
 8008640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008644:	4770      	bx	lr
 8008646:	bf00      	nop
 8008648:	20000008 	.word	0x20000008

0800864c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800864c:	b580      	push	{r7, lr}
 800864e:	b082      	sub	sp, #8
 8008650:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8008652:	f7ff ffef 	bl	8008634 <HAL_RCC_GetHCLKFreq>
 8008656:	4601      	mov	r1, r0
 8008658:	4b0b      	ldr	r3, [pc, #44]	; (8008688 <HAL_RCC_GetPCLK1Freq+0x3c>)
 800865a:	685b      	ldr	r3, [r3, #4]
 800865c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8008660:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8008664:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008666:	687a      	ldr	r2, [r7, #4]
 8008668:	fa92 f2a2 	rbit	r2, r2
 800866c:	603a      	str	r2, [r7, #0]
  return result;
 800866e:	683a      	ldr	r2, [r7, #0]
 8008670:	fab2 f282 	clz	r2, r2
 8008674:	b2d2      	uxtb	r2, r2
 8008676:	40d3      	lsrs	r3, r2
 8008678:	4a04      	ldr	r2, [pc, #16]	; (800868c <HAL_RCC_GetPCLK1Freq+0x40>)
 800867a:	5cd3      	ldrb	r3, [r2, r3]
 800867c:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8008680:	4618      	mov	r0, r3
 8008682:	3708      	adds	r7, #8
 8008684:	46bd      	mov	sp, r7
 8008686:	bd80      	pop	{r7, pc}
 8008688:	40021000 	.word	0x40021000
 800868c:	08013c08 	.word	0x08013c08

08008690 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008690:	b580      	push	{r7, lr}
 8008692:	b082      	sub	sp, #8
 8008694:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8008696:	f7ff ffcd 	bl	8008634 <HAL_RCC_GetHCLKFreq>
 800869a:	4601      	mov	r1, r0
 800869c:	4b0b      	ldr	r3, [pc, #44]	; (80086cc <HAL_RCC_GetPCLK2Freq+0x3c>)
 800869e:	685b      	ldr	r3, [r3, #4]
 80086a0:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 80086a4:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 80086a8:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80086aa:	687a      	ldr	r2, [r7, #4]
 80086ac:	fa92 f2a2 	rbit	r2, r2
 80086b0:	603a      	str	r2, [r7, #0]
  return result;
 80086b2:	683a      	ldr	r2, [r7, #0]
 80086b4:	fab2 f282 	clz	r2, r2
 80086b8:	b2d2      	uxtb	r2, r2
 80086ba:	40d3      	lsrs	r3, r2
 80086bc:	4a04      	ldr	r2, [pc, #16]	; (80086d0 <HAL_RCC_GetPCLK2Freq+0x40>)
 80086be:	5cd3      	ldrb	r3, [r2, r3]
 80086c0:	fa21 f303 	lsr.w	r3, r1, r3
} 
 80086c4:	4618      	mov	r0, r3
 80086c6:	3708      	adds	r7, #8
 80086c8:	46bd      	mov	sp, r7
 80086ca:	bd80      	pop	{r7, pc}
 80086cc:	40021000 	.word	0x40021000
 80086d0:	08013c08 	.word	0x08013c08

080086d4 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80086d4:	b580      	push	{r7, lr}
 80086d6:	b092      	sub	sp, #72	; 0x48
 80086d8:	af00      	add	r7, sp, #0
 80086da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80086dc:	2300      	movs	r3, #0
 80086de:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 80086e0:	2300      	movs	r3, #0
 80086e2:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 80086e4:	2300      	movs	r3, #0
 80086e6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	681b      	ldr	r3, [r3, #0]
 80086ee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80086f2:	2b00      	cmp	r3, #0
 80086f4:	f000 80d4 	beq.w	80088a0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80086f8:	4b4e      	ldr	r3, [pc, #312]	; (8008834 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80086fa:	69db      	ldr	r3, [r3, #28]
 80086fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008700:	2b00      	cmp	r3, #0
 8008702:	d10e      	bne.n	8008722 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008704:	4b4b      	ldr	r3, [pc, #300]	; (8008834 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8008706:	69db      	ldr	r3, [r3, #28]
 8008708:	4a4a      	ldr	r2, [pc, #296]	; (8008834 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800870a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800870e:	61d3      	str	r3, [r2, #28]
 8008710:	4b48      	ldr	r3, [pc, #288]	; (8008834 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8008712:	69db      	ldr	r3, [r3, #28]
 8008714:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008718:	60bb      	str	r3, [r7, #8]
 800871a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800871c:	2301      	movs	r3, #1
 800871e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008722:	4b45      	ldr	r3, [pc, #276]	; (8008838 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8008724:	681b      	ldr	r3, [r3, #0]
 8008726:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800872a:	2b00      	cmp	r3, #0
 800872c:	d118      	bne.n	8008760 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800872e:	4b42      	ldr	r3, [pc, #264]	; (8008838 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8008730:	681b      	ldr	r3, [r3, #0]
 8008732:	4a41      	ldr	r2, [pc, #260]	; (8008838 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8008734:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008738:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800873a:	f7fc fa29 	bl	8004b90 <HAL_GetTick>
 800873e:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008740:	e008      	b.n	8008754 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008742:	f7fc fa25 	bl	8004b90 <HAL_GetTick>
 8008746:	4602      	mov	r2, r0
 8008748:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800874a:	1ad3      	subs	r3, r2, r3
 800874c:	2b64      	cmp	r3, #100	; 0x64
 800874e:	d901      	bls.n	8008754 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8008750:	2303      	movs	r3, #3
 8008752:	e169      	b.n	8008a28 <HAL_RCCEx_PeriphCLKConfig+0x354>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008754:	4b38      	ldr	r3, [pc, #224]	; (8008838 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8008756:	681b      	ldr	r3, [r3, #0]
 8008758:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800875c:	2b00      	cmp	r3, #0
 800875e:	d0f0      	beq.n	8008742 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8008760:	4b34      	ldr	r3, [pc, #208]	; (8008834 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8008762:	6a1b      	ldr	r3, [r3, #32]
 8008764:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008768:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800876a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800876c:	2b00      	cmp	r3, #0
 800876e:	f000 8084 	beq.w	800887a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	685b      	ldr	r3, [r3, #4]
 8008776:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800877a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800877c:	429a      	cmp	r2, r3
 800877e:	d07c      	beq.n	800887a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8008780:	4b2c      	ldr	r3, [pc, #176]	; (8008834 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8008782:	6a1b      	ldr	r3, [r3, #32]
 8008784:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008788:	63fb      	str	r3, [r7, #60]	; 0x3c
 800878a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800878e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008790:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008792:	fa93 f3a3 	rbit	r3, r3
 8008796:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8008798:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800879a:	fab3 f383 	clz	r3, r3
 800879e:	b2db      	uxtb	r3, r3
 80087a0:	461a      	mov	r2, r3
 80087a2:	4b26      	ldr	r3, [pc, #152]	; (800883c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80087a4:	4413      	add	r3, r2
 80087a6:	009b      	lsls	r3, r3, #2
 80087a8:	461a      	mov	r2, r3
 80087aa:	2301      	movs	r3, #1
 80087ac:	6013      	str	r3, [r2, #0]
 80087ae:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80087b2:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80087b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80087b6:	fa93 f3a3 	rbit	r3, r3
 80087ba:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80087bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 80087be:	fab3 f383 	clz	r3, r3
 80087c2:	b2db      	uxtb	r3, r3
 80087c4:	461a      	mov	r2, r3
 80087c6:	4b1d      	ldr	r3, [pc, #116]	; (800883c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80087c8:	4413      	add	r3, r2
 80087ca:	009b      	lsls	r3, r3, #2
 80087cc:	461a      	mov	r2, r3
 80087ce:	2300      	movs	r3, #0
 80087d0:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80087d2:	4a18      	ldr	r2, [pc, #96]	; (8008834 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80087d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80087d6:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80087d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80087da:	f003 0301 	and.w	r3, r3, #1
 80087de:	2b00      	cmp	r3, #0
 80087e0:	d04b      	beq.n	800887a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80087e2:	f7fc f9d5 	bl	8004b90 <HAL_GetTick>
 80087e6:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80087e8:	e00a      	b.n	8008800 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80087ea:	f7fc f9d1 	bl	8004b90 <HAL_GetTick>
 80087ee:	4602      	mov	r2, r0
 80087f0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80087f2:	1ad3      	subs	r3, r2, r3
 80087f4:	f241 3288 	movw	r2, #5000	; 0x1388
 80087f8:	4293      	cmp	r3, r2
 80087fa:	d901      	bls.n	8008800 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 80087fc:	2303      	movs	r3, #3
 80087fe:	e113      	b.n	8008a28 <HAL_RCCEx_PeriphCLKConfig+0x354>
 8008800:	2302      	movs	r3, #2
 8008802:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008804:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008806:	fa93 f3a3 	rbit	r3, r3
 800880a:	627b      	str	r3, [r7, #36]	; 0x24
 800880c:	2302      	movs	r3, #2
 800880e:	623b      	str	r3, [r7, #32]
 8008810:	6a3b      	ldr	r3, [r7, #32]
 8008812:	fa93 f3a3 	rbit	r3, r3
 8008816:	61fb      	str	r3, [r7, #28]
  return result;
 8008818:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800881a:	fab3 f383 	clz	r3, r3
 800881e:	b2db      	uxtb	r3, r3
 8008820:	095b      	lsrs	r3, r3, #5
 8008822:	b2db      	uxtb	r3, r3
 8008824:	f043 0302 	orr.w	r3, r3, #2
 8008828:	b2db      	uxtb	r3, r3
 800882a:	2b02      	cmp	r3, #2
 800882c:	d108      	bne.n	8008840 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 800882e:	4b01      	ldr	r3, [pc, #4]	; (8008834 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8008830:	6a1b      	ldr	r3, [r3, #32]
 8008832:	e00d      	b.n	8008850 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8008834:	40021000 	.word	0x40021000
 8008838:	40007000 	.word	0x40007000
 800883c:	10908100 	.word	0x10908100
 8008840:	2302      	movs	r3, #2
 8008842:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008844:	69bb      	ldr	r3, [r7, #24]
 8008846:	fa93 f3a3 	rbit	r3, r3
 800884a:	617b      	str	r3, [r7, #20]
 800884c:	4b78      	ldr	r3, [pc, #480]	; (8008a30 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800884e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008850:	2202      	movs	r2, #2
 8008852:	613a      	str	r2, [r7, #16]
 8008854:	693a      	ldr	r2, [r7, #16]
 8008856:	fa92 f2a2 	rbit	r2, r2
 800885a:	60fa      	str	r2, [r7, #12]
  return result;
 800885c:	68fa      	ldr	r2, [r7, #12]
 800885e:	fab2 f282 	clz	r2, r2
 8008862:	b2d2      	uxtb	r2, r2
 8008864:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008868:	b2d2      	uxtb	r2, r2
 800886a:	f002 021f 	and.w	r2, r2, #31
 800886e:	2101      	movs	r1, #1
 8008870:	fa01 f202 	lsl.w	r2, r1, r2
 8008874:	4013      	ands	r3, r2
 8008876:	2b00      	cmp	r3, #0
 8008878:	d0b7      	beq.n	80087ea <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 800887a:	4b6d      	ldr	r3, [pc, #436]	; (8008a30 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800887c:	6a1b      	ldr	r3, [r3, #32]
 800887e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	685b      	ldr	r3, [r3, #4]
 8008886:	496a      	ldr	r1, [pc, #424]	; (8008a30 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8008888:	4313      	orrs	r3, r2
 800888a:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800888c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8008890:	2b01      	cmp	r3, #1
 8008892:	d105      	bne.n	80088a0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008894:	4b66      	ldr	r3, [pc, #408]	; (8008a30 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8008896:	69db      	ldr	r3, [r3, #28]
 8008898:	4a65      	ldr	r2, [pc, #404]	; (8008a30 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800889a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800889e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	681b      	ldr	r3, [r3, #0]
 80088a4:	f003 0301 	and.w	r3, r3, #1
 80088a8:	2b00      	cmp	r3, #0
 80088aa:	d008      	beq.n	80088be <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80088ac:	4b60      	ldr	r3, [pc, #384]	; (8008a30 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80088ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80088b0:	f023 0203 	bic.w	r2, r3, #3
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	689b      	ldr	r3, [r3, #8]
 80088b8:	495d      	ldr	r1, [pc, #372]	; (8008a30 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80088ba:	4313      	orrs	r3, r2
 80088bc:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	681b      	ldr	r3, [r3, #0]
 80088c2:	f003 0302 	and.w	r3, r3, #2
 80088c6:	2b00      	cmp	r3, #0
 80088c8:	d008      	beq.n	80088dc <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80088ca:	4b59      	ldr	r3, [pc, #356]	; (8008a30 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80088cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80088ce:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	68db      	ldr	r3, [r3, #12]
 80088d6:	4956      	ldr	r1, [pc, #344]	; (8008a30 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80088d8:	4313      	orrs	r3, r2
 80088da:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	681b      	ldr	r3, [r3, #0]
 80088e0:	f003 0304 	and.w	r3, r3, #4
 80088e4:	2b00      	cmp	r3, #0
 80088e6:	d008      	beq.n	80088fa <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80088e8:	4b51      	ldr	r3, [pc, #324]	; (8008a30 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80088ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80088ec:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	691b      	ldr	r3, [r3, #16]
 80088f4:	494e      	ldr	r1, [pc, #312]	; (8008a30 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80088f6:	4313      	orrs	r3, r2
 80088f8:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	681b      	ldr	r3, [r3, #0]
 80088fe:	f003 0320 	and.w	r3, r3, #32
 8008902:	2b00      	cmp	r3, #0
 8008904:	d008      	beq.n	8008918 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8008906:	4b4a      	ldr	r3, [pc, #296]	; (8008a30 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8008908:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800890a:	f023 0210 	bic.w	r2, r3, #16
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	69db      	ldr	r3, [r3, #28]
 8008912:	4947      	ldr	r1, [pc, #284]	; (8008a30 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8008914:	4313      	orrs	r3, r2
 8008916:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	681b      	ldr	r3, [r3, #0]
 800891c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008920:	2b00      	cmp	r3, #0
 8008922:	d008      	beq.n	8008936 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8008924:	4b42      	ldr	r3, [pc, #264]	; (8008a30 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8008926:	685b      	ldr	r3, [r3, #4]
 8008928:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008930:	493f      	ldr	r1, [pc, #252]	; (8008a30 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8008932:	4313      	orrs	r3, r2
 8008934:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	681b      	ldr	r3, [r3, #0]
 800893a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800893e:	2b00      	cmp	r3, #0
 8008940:	d008      	beq.n	8008954 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8008942:	4b3b      	ldr	r3, [pc, #236]	; (8008a30 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8008944:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008946:	f023 0220 	bic.w	r2, r3, #32
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	6a1b      	ldr	r3, [r3, #32]
 800894e:	4938      	ldr	r1, [pc, #224]	; (8008a30 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8008950:	4313      	orrs	r3, r2
 8008952:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	681b      	ldr	r3, [r3, #0]
 8008958:	f003 0308 	and.w	r3, r3, #8
 800895c:	2b00      	cmp	r3, #0
 800895e:	d008      	beq.n	8008972 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8008960:	4b33      	ldr	r3, [pc, #204]	; (8008a30 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8008962:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008964:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	695b      	ldr	r3, [r3, #20]
 800896c:	4930      	ldr	r1, [pc, #192]	; (8008a30 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800896e:	4313      	orrs	r3, r2
 8008970:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	681b      	ldr	r3, [r3, #0]
 8008976:	f003 0310 	and.w	r3, r3, #16
 800897a:	2b00      	cmp	r3, #0
 800897c:	d008      	beq.n	8008990 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800897e:	4b2c      	ldr	r3, [pc, #176]	; (8008a30 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8008980:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008982:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	699b      	ldr	r3, [r3, #24]
 800898a:	4929      	ldr	r1, [pc, #164]	; (8008a30 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800898c:	4313      	orrs	r3, r2
 800898e:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	681b      	ldr	r3, [r3, #0]
 8008994:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008998:	2b00      	cmp	r3, #0
 800899a:	d008      	beq.n	80089ae <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800899c:	4b24      	ldr	r3, [pc, #144]	; (8008a30 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800899e:	685b      	ldr	r3, [r3, #4]
 80089a0:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80089a8:	4921      	ldr	r1, [pc, #132]	; (8008a30 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80089aa:	4313      	orrs	r3, r2
 80089ac:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	681b      	ldr	r3, [r3, #0]
 80089b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80089b6:	2b00      	cmp	r3, #0
 80089b8:	d008      	beq.n	80089cc <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80089ba:	4b1d      	ldr	r3, [pc, #116]	; (8008a30 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80089bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80089be:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089c6:	491a      	ldr	r1, [pc, #104]	; (8008a30 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80089c8:	4313      	orrs	r3, r2
 80089ca:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	681b      	ldr	r3, [r3, #0]
 80089d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80089d4:	2b00      	cmp	r3, #0
 80089d6:	d008      	beq.n	80089ea <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 80089d8:	4b15      	ldr	r3, [pc, #84]	; (8008a30 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80089da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80089dc:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80089e4:	4912      	ldr	r1, [pc, #72]	; (8008a30 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80089e6:	4313      	orrs	r3, r2
 80089e8:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	681b      	ldr	r3, [r3, #0]
 80089ee:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80089f2:	2b00      	cmp	r3, #0
 80089f4:	d008      	beq.n	8008a08 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80089f6:	4b0e      	ldr	r3, [pc, #56]	; (8008a30 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80089f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80089fa:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008a02:	490b      	ldr	r1, [pc, #44]	; (8008a30 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8008a04:	4313      	orrs	r3, r2
 8008a06:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	681b      	ldr	r3, [r3, #0]
 8008a0c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008a10:	2b00      	cmp	r3, #0
 8008a12:	d008      	beq.n	8008a26 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8008a14:	4b06      	ldr	r3, [pc, #24]	; (8008a30 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8008a16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008a18:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008a20:	4903      	ldr	r1, [pc, #12]	; (8008a30 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8008a22:	4313      	orrs	r3, r2
 8008a24:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8008a26:	2300      	movs	r3, #0
}
 8008a28:	4618      	mov	r0, r3
 8008a2a:	3748      	adds	r7, #72	; 0x48
 8008a2c:	46bd      	mov	sp, r7
 8008a2e:	bd80      	pop	{r7, pc}
 8008a30:	40021000 	.word	0x40021000

08008a34 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8008a34:	b580      	push	{r7, lr}
 8008a36:	b084      	sub	sp, #16
 8008a38:	af00      	add	r7, sp, #0
 8008a3a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	2b00      	cmp	r3, #0
 8008a40:	d101      	bne.n	8008a46 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8008a42:	2301      	movs	r3, #1
 8008a44:	e09d      	b.n	8008b82 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a4a:	2b00      	cmp	r3, #0
 8008a4c:	d108      	bne.n	8008a60 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	685b      	ldr	r3, [r3, #4]
 8008a52:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008a56:	d009      	beq.n	8008a6c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	2200      	movs	r2, #0
 8008a5c:	61da      	str	r2, [r3, #28]
 8008a5e:	e005      	b.n	8008a6c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	2200      	movs	r2, #0
 8008a64:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	2200      	movs	r2, #0
 8008a6a:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	2200      	movs	r2, #0
 8008a70:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8008a78:	b2db      	uxtb	r3, r3
 8008a7a:	2b00      	cmp	r3, #0
 8008a7c:	d106      	bne.n	8008a8c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	2200      	movs	r2, #0
 8008a82:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8008a86:	6878      	ldr	r0, [r7, #4]
 8008a88:	f7fb fb8a 	bl	80041a0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	2202      	movs	r2, #2
 8008a90:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	681b      	ldr	r3, [r3, #0]
 8008a98:	681a      	ldr	r2, [r3, #0]
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	681b      	ldr	r3, [r3, #0]
 8008a9e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008aa2:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	68db      	ldr	r3, [r3, #12]
 8008aa8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8008aac:	d902      	bls.n	8008ab4 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8008aae:	2300      	movs	r3, #0
 8008ab0:	60fb      	str	r3, [r7, #12]
 8008ab2:	e002      	b.n	8008aba <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8008ab4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008ab8:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	68db      	ldr	r3, [r3, #12]
 8008abe:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8008ac2:	d007      	beq.n	8008ad4 <HAL_SPI_Init+0xa0>
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	68db      	ldr	r3, [r3, #12]
 8008ac8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8008acc:	d002      	beq.n	8008ad4 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	2200      	movs	r2, #0
 8008ad2:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	685b      	ldr	r3, [r3, #4]
 8008ad8:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	689b      	ldr	r3, [r3, #8]
 8008ae0:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8008ae4:	431a      	orrs	r2, r3
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	691b      	ldr	r3, [r3, #16]
 8008aea:	f003 0302 	and.w	r3, r3, #2
 8008aee:	431a      	orrs	r2, r3
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	695b      	ldr	r3, [r3, #20]
 8008af4:	f003 0301 	and.w	r3, r3, #1
 8008af8:	431a      	orrs	r2, r3
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	699b      	ldr	r3, [r3, #24]
 8008afe:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008b02:	431a      	orrs	r2, r3
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	69db      	ldr	r3, [r3, #28]
 8008b08:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008b0c:	431a      	orrs	r2, r3
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	6a1b      	ldr	r3, [r3, #32]
 8008b12:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008b16:	ea42 0103 	orr.w	r1, r2, r3
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008b1e:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	681b      	ldr	r3, [r3, #0]
 8008b26:	430a      	orrs	r2, r1
 8008b28:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	699b      	ldr	r3, [r3, #24]
 8008b2e:	0c1b      	lsrs	r3, r3, #16
 8008b30:	f003 0204 	and.w	r2, r3, #4
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b38:	f003 0310 	and.w	r3, r3, #16
 8008b3c:	431a      	orrs	r2, r3
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008b42:	f003 0308 	and.w	r3, r3, #8
 8008b46:	431a      	orrs	r2, r3
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	68db      	ldr	r3, [r3, #12]
 8008b4c:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8008b50:	ea42 0103 	orr.w	r1, r2, r3
 8008b54:	68fb      	ldr	r3, [r7, #12]
 8008b56:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	681b      	ldr	r3, [r3, #0]
 8008b5e:	430a      	orrs	r2, r1
 8008b60:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	681b      	ldr	r3, [r3, #0]
 8008b66:	69da      	ldr	r2, [r3, #28]
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	681b      	ldr	r3, [r3, #0]
 8008b6c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008b70:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	2200      	movs	r2, #0
 8008b76:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	2201      	movs	r2, #1
 8008b7c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8008b80:	2300      	movs	r3, #0
}
 8008b82:	4618      	mov	r0, r3
 8008b84:	3710      	adds	r7, #16
 8008b86:	46bd      	mov	sp, r7
 8008b88:	bd80      	pop	{r7, pc}

08008b8a <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008b8a:	b580      	push	{r7, lr}
 8008b8c:	b082      	sub	sp, #8
 8008b8e:	af00      	add	r7, sp, #0
 8008b90:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	2b00      	cmp	r3, #0
 8008b96:	d101      	bne.n	8008b9c <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008b98:	2301      	movs	r3, #1
 8008b9a:	e049      	b.n	8008c30 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008ba2:	b2db      	uxtb	r3, r3
 8008ba4:	2b00      	cmp	r3, #0
 8008ba6:	d106      	bne.n	8008bb6 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	2200      	movs	r2, #0
 8008bac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008bb0:	6878      	ldr	r0, [r7, #4]
 8008bb2:	f7fb fb39 	bl	8004228 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	2202      	movs	r2, #2
 8008bba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	681a      	ldr	r2, [r3, #0]
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	3304      	adds	r3, #4
 8008bc6:	4619      	mov	r1, r3
 8008bc8:	4610      	mov	r0, r2
 8008bca:	f001 f92f 	bl	8009e2c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	2201      	movs	r2, #1
 8008bd2:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	2201      	movs	r2, #1
 8008bda:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	2201      	movs	r2, #1
 8008be2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	2201      	movs	r2, #1
 8008bea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	2201      	movs	r2, #1
 8008bf2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	2201      	movs	r2, #1
 8008bfa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	2201      	movs	r2, #1
 8008c02:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	2201      	movs	r2, #1
 8008c0a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	2201      	movs	r2, #1
 8008c12:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	2201      	movs	r2, #1
 8008c1a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	2201      	movs	r2, #1
 8008c22:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	2201      	movs	r2, #1
 8008c2a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008c2e:	2300      	movs	r3, #0
}
 8008c30:	4618      	mov	r0, r3
 8008c32:	3708      	adds	r7, #8
 8008c34:	46bd      	mov	sp, r7
 8008c36:	bd80      	pop	{r7, pc}

08008c38 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008c38:	b480      	push	{r7}
 8008c3a:	b085      	sub	sp, #20
 8008c3c:	af00      	add	r7, sp, #0
 8008c3e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008c46:	b2db      	uxtb	r3, r3
 8008c48:	2b01      	cmp	r3, #1
 8008c4a:	d001      	beq.n	8008c50 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8008c4c:	2301      	movs	r3, #1
 8008c4e:	e04a      	b.n	8008ce6 <HAL_TIM_Base_Start_IT+0xae>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	2202      	movs	r2, #2
 8008c54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	681b      	ldr	r3, [r3, #0]
 8008c5c:	68da      	ldr	r2, [r3, #12]
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	681b      	ldr	r3, [r3, #0]
 8008c62:	f042 0201 	orr.w	r2, r2, #1
 8008c66:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	681b      	ldr	r3, [r3, #0]
 8008c6c:	4a21      	ldr	r2, [pc, #132]	; (8008cf4 <HAL_TIM_Base_Start_IT+0xbc>)
 8008c6e:	4293      	cmp	r3, r2
 8008c70:	d018      	beq.n	8008ca4 <HAL_TIM_Base_Start_IT+0x6c>
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	681b      	ldr	r3, [r3, #0]
 8008c76:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008c7a:	d013      	beq.n	8008ca4 <HAL_TIM_Base_Start_IT+0x6c>
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	681b      	ldr	r3, [r3, #0]
 8008c80:	4a1d      	ldr	r2, [pc, #116]	; (8008cf8 <HAL_TIM_Base_Start_IT+0xc0>)
 8008c82:	4293      	cmp	r3, r2
 8008c84:	d00e      	beq.n	8008ca4 <HAL_TIM_Base_Start_IT+0x6c>
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	681b      	ldr	r3, [r3, #0]
 8008c8a:	4a1c      	ldr	r2, [pc, #112]	; (8008cfc <HAL_TIM_Base_Start_IT+0xc4>)
 8008c8c:	4293      	cmp	r3, r2
 8008c8e:	d009      	beq.n	8008ca4 <HAL_TIM_Base_Start_IT+0x6c>
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	681b      	ldr	r3, [r3, #0]
 8008c94:	4a1a      	ldr	r2, [pc, #104]	; (8008d00 <HAL_TIM_Base_Start_IT+0xc8>)
 8008c96:	4293      	cmp	r3, r2
 8008c98:	d004      	beq.n	8008ca4 <HAL_TIM_Base_Start_IT+0x6c>
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	681b      	ldr	r3, [r3, #0]
 8008c9e:	4a19      	ldr	r2, [pc, #100]	; (8008d04 <HAL_TIM_Base_Start_IT+0xcc>)
 8008ca0:	4293      	cmp	r3, r2
 8008ca2:	d115      	bne.n	8008cd0 <HAL_TIM_Base_Start_IT+0x98>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	681b      	ldr	r3, [r3, #0]
 8008ca8:	689a      	ldr	r2, [r3, #8]
 8008caa:	4b17      	ldr	r3, [pc, #92]	; (8008d08 <HAL_TIM_Base_Start_IT+0xd0>)
 8008cac:	4013      	ands	r3, r2
 8008cae:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008cb0:	68fb      	ldr	r3, [r7, #12]
 8008cb2:	2b06      	cmp	r3, #6
 8008cb4:	d015      	beq.n	8008ce2 <HAL_TIM_Base_Start_IT+0xaa>
 8008cb6:	68fb      	ldr	r3, [r7, #12]
 8008cb8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008cbc:	d011      	beq.n	8008ce2 <HAL_TIM_Base_Start_IT+0xaa>
    {
      __HAL_TIM_ENABLE(htim);
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	681b      	ldr	r3, [r3, #0]
 8008cc2:	681a      	ldr	r2, [r3, #0]
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	681b      	ldr	r3, [r3, #0]
 8008cc8:	f042 0201 	orr.w	r2, r2, #1
 8008ccc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008cce:	e008      	b.n	8008ce2 <HAL_TIM_Base_Start_IT+0xaa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	681b      	ldr	r3, [r3, #0]
 8008cd4:	681a      	ldr	r2, [r3, #0]
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	681b      	ldr	r3, [r3, #0]
 8008cda:	f042 0201 	orr.w	r2, r2, #1
 8008cde:	601a      	str	r2, [r3, #0]
 8008ce0:	e000      	b.n	8008ce4 <HAL_TIM_Base_Start_IT+0xac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008ce2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8008ce4:	2300      	movs	r3, #0
}
 8008ce6:	4618      	mov	r0, r3
 8008ce8:	3714      	adds	r7, #20
 8008cea:	46bd      	mov	sp, r7
 8008cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cf0:	4770      	bx	lr
 8008cf2:	bf00      	nop
 8008cf4:	40012c00 	.word	0x40012c00
 8008cf8:	40000400 	.word	0x40000400
 8008cfc:	40000800 	.word	0x40000800
 8008d00:	40013400 	.word	0x40013400
 8008d04:	40014000 	.word	0x40014000
 8008d08:	00010007 	.word	0x00010007

08008d0c <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8008d0c:	b480      	push	{r7}
 8008d0e:	b083      	sub	sp, #12
 8008d10:	af00      	add	r7, sp, #0
 8008d12:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	681b      	ldr	r3, [r3, #0]
 8008d18:	68da      	ldr	r2, [r3, #12]
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	681b      	ldr	r3, [r3, #0]
 8008d1e:	f022 0201 	bic.w	r2, r2, #1
 8008d22:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	681b      	ldr	r3, [r3, #0]
 8008d28:	6a1a      	ldr	r2, [r3, #32]
 8008d2a:	f241 1311 	movw	r3, #4369	; 0x1111
 8008d2e:	4013      	ands	r3, r2
 8008d30:	2b00      	cmp	r3, #0
 8008d32:	d10f      	bne.n	8008d54 <HAL_TIM_Base_Stop_IT+0x48>
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	681b      	ldr	r3, [r3, #0]
 8008d38:	6a1a      	ldr	r2, [r3, #32]
 8008d3a:	f240 4344 	movw	r3, #1092	; 0x444
 8008d3e:	4013      	ands	r3, r2
 8008d40:	2b00      	cmp	r3, #0
 8008d42:	d107      	bne.n	8008d54 <HAL_TIM_Base_Stop_IT+0x48>
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	681b      	ldr	r3, [r3, #0]
 8008d48:	681a      	ldr	r2, [r3, #0]
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	681b      	ldr	r3, [r3, #0]
 8008d4e:	f022 0201 	bic.w	r2, r2, #1
 8008d52:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	2201      	movs	r2, #1
 8008d58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8008d5c:	2300      	movs	r3, #0
}
 8008d5e:	4618      	mov	r0, r3
 8008d60:	370c      	adds	r7, #12
 8008d62:	46bd      	mov	sp, r7
 8008d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d68:	4770      	bx	lr

08008d6a <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8008d6a:	b580      	push	{r7, lr}
 8008d6c:	b082      	sub	sp, #8
 8008d6e:	af00      	add	r7, sp, #0
 8008d70:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	2b00      	cmp	r3, #0
 8008d76:	d101      	bne.n	8008d7c <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8008d78:	2301      	movs	r3, #1
 8008d7a:	e049      	b.n	8008e10 <HAL_TIM_OC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008d82:	b2db      	uxtb	r3, r3
 8008d84:	2b00      	cmp	r3, #0
 8008d86:	d106      	bne.n	8008d96 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	2200      	movs	r2, #0
 8008d8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8008d90:	6878      	ldr	r0, [r7, #4]
 8008d92:	f000 f841 	bl	8008e18 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	2202      	movs	r2, #2
 8008d9a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	681a      	ldr	r2, [r3, #0]
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	3304      	adds	r3, #4
 8008da6:	4619      	mov	r1, r3
 8008da8:	4610      	mov	r0, r2
 8008daa:	f001 f83f 	bl	8009e2c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	2201      	movs	r2, #1
 8008db2:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	2201      	movs	r2, #1
 8008dba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	2201      	movs	r2, #1
 8008dc2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	2201      	movs	r2, #1
 8008dca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	2201      	movs	r2, #1
 8008dd2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	2201      	movs	r2, #1
 8008dda:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	2201      	movs	r2, #1
 8008de2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	2201      	movs	r2, #1
 8008dea:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	2201      	movs	r2, #1
 8008df2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	2201      	movs	r2, #1
 8008dfa:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	2201      	movs	r2, #1
 8008e02:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	2201      	movs	r2, #1
 8008e0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008e0e:	2300      	movs	r3, #0
}
 8008e10:	4618      	mov	r0, r3
 8008e12:	3708      	adds	r7, #8
 8008e14:	46bd      	mov	sp, r7
 8008e16:	bd80      	pop	{r7, pc}

08008e18 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8008e18:	b480      	push	{r7}
 8008e1a:	b083      	sub	sp, #12
 8008e1c:	af00      	add	r7, sp, #0
 8008e1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8008e20:	bf00      	nop
 8008e22:	370c      	adds	r7, #12
 8008e24:	46bd      	mov	sp, r7
 8008e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e2a:	4770      	bx	lr

08008e2c <HAL_TIM_OC_Start>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008e2c:	b580      	push	{r7, lr}
 8008e2e:	b084      	sub	sp, #16
 8008e30:	af00      	add	r7, sp, #0
 8008e32:	6078      	str	r0, [r7, #4]
 8008e34:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8008e36:	683b      	ldr	r3, [r7, #0]
 8008e38:	2b00      	cmp	r3, #0
 8008e3a:	d109      	bne.n	8008e50 <HAL_TIM_OC_Start+0x24>
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008e42:	b2db      	uxtb	r3, r3
 8008e44:	2b01      	cmp	r3, #1
 8008e46:	bf14      	ite	ne
 8008e48:	2301      	movne	r3, #1
 8008e4a:	2300      	moveq	r3, #0
 8008e4c:	b2db      	uxtb	r3, r3
 8008e4e:	e03c      	b.n	8008eca <HAL_TIM_OC_Start+0x9e>
 8008e50:	683b      	ldr	r3, [r7, #0]
 8008e52:	2b04      	cmp	r3, #4
 8008e54:	d109      	bne.n	8008e6a <HAL_TIM_OC_Start+0x3e>
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8008e5c:	b2db      	uxtb	r3, r3
 8008e5e:	2b01      	cmp	r3, #1
 8008e60:	bf14      	ite	ne
 8008e62:	2301      	movne	r3, #1
 8008e64:	2300      	moveq	r3, #0
 8008e66:	b2db      	uxtb	r3, r3
 8008e68:	e02f      	b.n	8008eca <HAL_TIM_OC_Start+0x9e>
 8008e6a:	683b      	ldr	r3, [r7, #0]
 8008e6c:	2b08      	cmp	r3, #8
 8008e6e:	d109      	bne.n	8008e84 <HAL_TIM_OC_Start+0x58>
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008e76:	b2db      	uxtb	r3, r3
 8008e78:	2b01      	cmp	r3, #1
 8008e7a:	bf14      	ite	ne
 8008e7c:	2301      	movne	r3, #1
 8008e7e:	2300      	moveq	r3, #0
 8008e80:	b2db      	uxtb	r3, r3
 8008e82:	e022      	b.n	8008eca <HAL_TIM_OC_Start+0x9e>
 8008e84:	683b      	ldr	r3, [r7, #0]
 8008e86:	2b0c      	cmp	r3, #12
 8008e88:	d109      	bne.n	8008e9e <HAL_TIM_OC_Start+0x72>
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008e90:	b2db      	uxtb	r3, r3
 8008e92:	2b01      	cmp	r3, #1
 8008e94:	bf14      	ite	ne
 8008e96:	2301      	movne	r3, #1
 8008e98:	2300      	moveq	r3, #0
 8008e9a:	b2db      	uxtb	r3, r3
 8008e9c:	e015      	b.n	8008eca <HAL_TIM_OC_Start+0x9e>
 8008e9e:	683b      	ldr	r3, [r7, #0]
 8008ea0:	2b10      	cmp	r3, #16
 8008ea2:	d109      	bne.n	8008eb8 <HAL_TIM_OC_Start+0x8c>
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8008eaa:	b2db      	uxtb	r3, r3
 8008eac:	2b01      	cmp	r3, #1
 8008eae:	bf14      	ite	ne
 8008eb0:	2301      	movne	r3, #1
 8008eb2:	2300      	moveq	r3, #0
 8008eb4:	b2db      	uxtb	r3, r3
 8008eb6:	e008      	b.n	8008eca <HAL_TIM_OC_Start+0x9e>
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8008ebe:	b2db      	uxtb	r3, r3
 8008ec0:	2b01      	cmp	r3, #1
 8008ec2:	bf14      	ite	ne
 8008ec4:	2301      	movne	r3, #1
 8008ec6:	2300      	moveq	r3, #0
 8008ec8:	b2db      	uxtb	r3, r3
 8008eca:	2b00      	cmp	r3, #0
 8008ecc:	d001      	beq.n	8008ed2 <HAL_TIM_OC_Start+0xa6>
  {
    return HAL_ERROR;
 8008ece:	2301      	movs	r3, #1
 8008ed0:	e097      	b.n	8009002 <HAL_TIM_OC_Start+0x1d6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8008ed2:	683b      	ldr	r3, [r7, #0]
 8008ed4:	2b00      	cmp	r3, #0
 8008ed6:	d104      	bne.n	8008ee2 <HAL_TIM_OC_Start+0xb6>
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	2202      	movs	r2, #2
 8008edc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008ee0:	e023      	b.n	8008f2a <HAL_TIM_OC_Start+0xfe>
 8008ee2:	683b      	ldr	r3, [r7, #0]
 8008ee4:	2b04      	cmp	r3, #4
 8008ee6:	d104      	bne.n	8008ef2 <HAL_TIM_OC_Start+0xc6>
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	2202      	movs	r2, #2
 8008eec:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008ef0:	e01b      	b.n	8008f2a <HAL_TIM_OC_Start+0xfe>
 8008ef2:	683b      	ldr	r3, [r7, #0]
 8008ef4:	2b08      	cmp	r3, #8
 8008ef6:	d104      	bne.n	8008f02 <HAL_TIM_OC_Start+0xd6>
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	2202      	movs	r2, #2
 8008efc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008f00:	e013      	b.n	8008f2a <HAL_TIM_OC_Start+0xfe>
 8008f02:	683b      	ldr	r3, [r7, #0]
 8008f04:	2b0c      	cmp	r3, #12
 8008f06:	d104      	bne.n	8008f12 <HAL_TIM_OC_Start+0xe6>
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	2202      	movs	r2, #2
 8008f0c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8008f10:	e00b      	b.n	8008f2a <HAL_TIM_OC_Start+0xfe>
 8008f12:	683b      	ldr	r3, [r7, #0]
 8008f14:	2b10      	cmp	r3, #16
 8008f16:	d104      	bne.n	8008f22 <HAL_TIM_OC_Start+0xf6>
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	2202      	movs	r2, #2
 8008f1c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008f20:	e003      	b.n	8008f2a <HAL_TIM_OC_Start+0xfe>
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	2202      	movs	r2, #2
 8008f26:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Output compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	681b      	ldr	r3, [r3, #0]
 8008f2e:	2201      	movs	r2, #1
 8008f30:	6839      	ldr	r1, [r7, #0]
 8008f32:	4618      	mov	r0, r3
 8008f34:	f001 fd2c 	bl	800a990 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	681b      	ldr	r3, [r3, #0]
 8008f3c:	4a33      	ldr	r2, [pc, #204]	; (800900c <HAL_TIM_OC_Start+0x1e0>)
 8008f3e:	4293      	cmp	r3, r2
 8008f40:	d013      	beq.n	8008f6a <HAL_TIM_OC_Start+0x13e>
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	681b      	ldr	r3, [r3, #0]
 8008f46:	4a32      	ldr	r2, [pc, #200]	; (8009010 <HAL_TIM_OC_Start+0x1e4>)
 8008f48:	4293      	cmp	r3, r2
 8008f4a:	d00e      	beq.n	8008f6a <HAL_TIM_OC_Start+0x13e>
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	681b      	ldr	r3, [r3, #0]
 8008f50:	4a30      	ldr	r2, [pc, #192]	; (8009014 <HAL_TIM_OC_Start+0x1e8>)
 8008f52:	4293      	cmp	r3, r2
 8008f54:	d009      	beq.n	8008f6a <HAL_TIM_OC_Start+0x13e>
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	681b      	ldr	r3, [r3, #0]
 8008f5a:	4a2f      	ldr	r2, [pc, #188]	; (8009018 <HAL_TIM_OC_Start+0x1ec>)
 8008f5c:	4293      	cmp	r3, r2
 8008f5e:	d004      	beq.n	8008f6a <HAL_TIM_OC_Start+0x13e>
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	681b      	ldr	r3, [r3, #0]
 8008f64:	4a2d      	ldr	r2, [pc, #180]	; (800901c <HAL_TIM_OC_Start+0x1f0>)
 8008f66:	4293      	cmp	r3, r2
 8008f68:	d101      	bne.n	8008f6e <HAL_TIM_OC_Start+0x142>
 8008f6a:	2301      	movs	r3, #1
 8008f6c:	e000      	b.n	8008f70 <HAL_TIM_OC_Start+0x144>
 8008f6e:	2300      	movs	r3, #0
 8008f70:	2b00      	cmp	r3, #0
 8008f72:	d007      	beq.n	8008f84 <HAL_TIM_OC_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	681b      	ldr	r3, [r3, #0]
 8008f78:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	681b      	ldr	r3, [r3, #0]
 8008f7e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008f82:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	681b      	ldr	r3, [r3, #0]
 8008f88:	4a20      	ldr	r2, [pc, #128]	; (800900c <HAL_TIM_OC_Start+0x1e0>)
 8008f8a:	4293      	cmp	r3, r2
 8008f8c:	d018      	beq.n	8008fc0 <HAL_TIM_OC_Start+0x194>
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	681b      	ldr	r3, [r3, #0]
 8008f92:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008f96:	d013      	beq.n	8008fc0 <HAL_TIM_OC_Start+0x194>
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	681b      	ldr	r3, [r3, #0]
 8008f9c:	4a20      	ldr	r2, [pc, #128]	; (8009020 <HAL_TIM_OC_Start+0x1f4>)
 8008f9e:	4293      	cmp	r3, r2
 8008fa0:	d00e      	beq.n	8008fc0 <HAL_TIM_OC_Start+0x194>
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	681b      	ldr	r3, [r3, #0]
 8008fa6:	4a1f      	ldr	r2, [pc, #124]	; (8009024 <HAL_TIM_OC_Start+0x1f8>)
 8008fa8:	4293      	cmp	r3, r2
 8008faa:	d009      	beq.n	8008fc0 <HAL_TIM_OC_Start+0x194>
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	681b      	ldr	r3, [r3, #0]
 8008fb0:	4a17      	ldr	r2, [pc, #92]	; (8009010 <HAL_TIM_OC_Start+0x1e4>)
 8008fb2:	4293      	cmp	r3, r2
 8008fb4:	d004      	beq.n	8008fc0 <HAL_TIM_OC_Start+0x194>
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	681b      	ldr	r3, [r3, #0]
 8008fba:	4a16      	ldr	r2, [pc, #88]	; (8009014 <HAL_TIM_OC_Start+0x1e8>)
 8008fbc:	4293      	cmp	r3, r2
 8008fbe:	d115      	bne.n	8008fec <HAL_TIM_OC_Start+0x1c0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	681b      	ldr	r3, [r3, #0]
 8008fc4:	689a      	ldr	r2, [r3, #8]
 8008fc6:	4b18      	ldr	r3, [pc, #96]	; (8009028 <HAL_TIM_OC_Start+0x1fc>)
 8008fc8:	4013      	ands	r3, r2
 8008fca:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008fcc:	68fb      	ldr	r3, [r7, #12]
 8008fce:	2b06      	cmp	r3, #6
 8008fd0:	d015      	beq.n	8008ffe <HAL_TIM_OC_Start+0x1d2>
 8008fd2:	68fb      	ldr	r3, [r7, #12]
 8008fd4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008fd8:	d011      	beq.n	8008ffe <HAL_TIM_OC_Start+0x1d2>
    {
      __HAL_TIM_ENABLE(htim);
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	681b      	ldr	r3, [r3, #0]
 8008fde:	681a      	ldr	r2, [r3, #0]
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	681b      	ldr	r3, [r3, #0]
 8008fe4:	f042 0201 	orr.w	r2, r2, #1
 8008fe8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008fea:	e008      	b.n	8008ffe <HAL_TIM_OC_Start+0x1d2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	681b      	ldr	r3, [r3, #0]
 8008ff0:	681a      	ldr	r2, [r3, #0]
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	681b      	ldr	r3, [r3, #0]
 8008ff6:	f042 0201 	orr.w	r2, r2, #1
 8008ffa:	601a      	str	r2, [r3, #0]
 8008ffc:	e000      	b.n	8009000 <HAL_TIM_OC_Start+0x1d4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008ffe:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8009000:	2300      	movs	r3, #0
}
 8009002:	4618      	mov	r0, r3
 8009004:	3710      	adds	r7, #16
 8009006:	46bd      	mov	sp, r7
 8009008:	bd80      	pop	{r7, pc}
 800900a:	bf00      	nop
 800900c:	40012c00 	.word	0x40012c00
 8009010:	40013400 	.word	0x40013400
 8009014:	40014000 	.word	0x40014000
 8009018:	40014400 	.word	0x40014400
 800901c:	40014800 	.word	0x40014800
 8009020:	40000400 	.word	0x40000400
 8009024:	40000800 	.word	0x40000800
 8009028:	00010007 	.word	0x00010007

0800902c <HAL_TIM_OC_Stop>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800902c:	b580      	push	{r7, lr}
 800902e:	b082      	sub	sp, #8
 8009030:	af00      	add	r7, sp, #0
 8009032:	6078      	str	r0, [r7, #4]
 8009034:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Output compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	681b      	ldr	r3, [r3, #0]
 800903a:	2200      	movs	r2, #0
 800903c:	6839      	ldr	r1, [r7, #0]
 800903e:	4618      	mov	r0, r3
 8009040:	f001 fca6 	bl	800a990 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	681b      	ldr	r3, [r3, #0]
 8009048:	4a3e      	ldr	r2, [pc, #248]	; (8009144 <HAL_TIM_OC_Stop+0x118>)
 800904a:	4293      	cmp	r3, r2
 800904c:	d013      	beq.n	8009076 <HAL_TIM_OC_Stop+0x4a>
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	681b      	ldr	r3, [r3, #0]
 8009052:	4a3d      	ldr	r2, [pc, #244]	; (8009148 <HAL_TIM_OC_Stop+0x11c>)
 8009054:	4293      	cmp	r3, r2
 8009056:	d00e      	beq.n	8009076 <HAL_TIM_OC_Stop+0x4a>
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	681b      	ldr	r3, [r3, #0]
 800905c:	4a3b      	ldr	r2, [pc, #236]	; (800914c <HAL_TIM_OC_Stop+0x120>)
 800905e:	4293      	cmp	r3, r2
 8009060:	d009      	beq.n	8009076 <HAL_TIM_OC_Stop+0x4a>
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	681b      	ldr	r3, [r3, #0]
 8009066:	4a3a      	ldr	r2, [pc, #232]	; (8009150 <HAL_TIM_OC_Stop+0x124>)
 8009068:	4293      	cmp	r3, r2
 800906a:	d004      	beq.n	8009076 <HAL_TIM_OC_Stop+0x4a>
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	681b      	ldr	r3, [r3, #0]
 8009070:	4a38      	ldr	r2, [pc, #224]	; (8009154 <HAL_TIM_OC_Stop+0x128>)
 8009072:	4293      	cmp	r3, r2
 8009074:	d101      	bne.n	800907a <HAL_TIM_OC_Stop+0x4e>
 8009076:	2301      	movs	r3, #1
 8009078:	e000      	b.n	800907c <HAL_TIM_OC_Stop+0x50>
 800907a:	2300      	movs	r3, #0
 800907c:	2b00      	cmp	r3, #0
 800907e:	d017      	beq.n	80090b0 <HAL_TIM_OC_Stop+0x84>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	681b      	ldr	r3, [r3, #0]
 8009084:	6a1a      	ldr	r2, [r3, #32]
 8009086:	f241 1311 	movw	r3, #4369	; 0x1111
 800908a:	4013      	ands	r3, r2
 800908c:	2b00      	cmp	r3, #0
 800908e:	d10f      	bne.n	80090b0 <HAL_TIM_OC_Stop+0x84>
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	681b      	ldr	r3, [r3, #0]
 8009094:	6a1a      	ldr	r2, [r3, #32]
 8009096:	f240 4344 	movw	r3, #1092	; 0x444
 800909a:	4013      	ands	r3, r2
 800909c:	2b00      	cmp	r3, #0
 800909e:	d107      	bne.n	80090b0 <HAL_TIM_OC_Stop+0x84>
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	681b      	ldr	r3, [r3, #0]
 80090a4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	681b      	ldr	r3, [r3, #0]
 80090aa:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80090ae:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	681b      	ldr	r3, [r3, #0]
 80090b4:	6a1a      	ldr	r2, [r3, #32]
 80090b6:	f241 1311 	movw	r3, #4369	; 0x1111
 80090ba:	4013      	ands	r3, r2
 80090bc:	2b00      	cmp	r3, #0
 80090be:	d10f      	bne.n	80090e0 <HAL_TIM_OC_Stop+0xb4>
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	681b      	ldr	r3, [r3, #0]
 80090c4:	6a1a      	ldr	r2, [r3, #32]
 80090c6:	f240 4344 	movw	r3, #1092	; 0x444
 80090ca:	4013      	ands	r3, r2
 80090cc:	2b00      	cmp	r3, #0
 80090ce:	d107      	bne.n	80090e0 <HAL_TIM_OC_Stop+0xb4>
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	681b      	ldr	r3, [r3, #0]
 80090d4:	681a      	ldr	r2, [r3, #0]
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	681b      	ldr	r3, [r3, #0]
 80090da:	f022 0201 	bic.w	r2, r2, #1
 80090de:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80090e0:	683b      	ldr	r3, [r7, #0]
 80090e2:	2b00      	cmp	r3, #0
 80090e4:	d104      	bne.n	80090f0 <HAL_TIM_OC_Stop+0xc4>
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	2201      	movs	r2, #1
 80090ea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80090ee:	e023      	b.n	8009138 <HAL_TIM_OC_Stop+0x10c>
 80090f0:	683b      	ldr	r3, [r7, #0]
 80090f2:	2b04      	cmp	r3, #4
 80090f4:	d104      	bne.n	8009100 <HAL_TIM_OC_Stop+0xd4>
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	2201      	movs	r2, #1
 80090fa:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80090fe:	e01b      	b.n	8009138 <HAL_TIM_OC_Stop+0x10c>
 8009100:	683b      	ldr	r3, [r7, #0]
 8009102:	2b08      	cmp	r3, #8
 8009104:	d104      	bne.n	8009110 <HAL_TIM_OC_Stop+0xe4>
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	2201      	movs	r2, #1
 800910a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800910e:	e013      	b.n	8009138 <HAL_TIM_OC_Stop+0x10c>
 8009110:	683b      	ldr	r3, [r7, #0]
 8009112:	2b0c      	cmp	r3, #12
 8009114:	d104      	bne.n	8009120 <HAL_TIM_OC_Stop+0xf4>
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	2201      	movs	r2, #1
 800911a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800911e:	e00b      	b.n	8009138 <HAL_TIM_OC_Stop+0x10c>
 8009120:	683b      	ldr	r3, [r7, #0]
 8009122:	2b10      	cmp	r3, #16
 8009124:	d104      	bne.n	8009130 <HAL_TIM_OC_Stop+0x104>
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	2201      	movs	r2, #1
 800912a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800912e:	e003      	b.n	8009138 <HAL_TIM_OC_Stop+0x10c>
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	2201      	movs	r2, #1
 8009134:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Return function status */
  return HAL_OK;
 8009138:	2300      	movs	r3, #0
}
 800913a:	4618      	mov	r0, r3
 800913c:	3708      	adds	r7, #8
 800913e:	46bd      	mov	sp, r7
 8009140:	bd80      	pop	{r7, pc}
 8009142:	bf00      	nop
 8009144:	40012c00 	.word	0x40012c00
 8009148:	40013400 	.word	0x40013400
 800914c:	40014000 	.word	0x40014000
 8009150:	40014400 	.word	0x40014400
 8009154:	40014800 	.word	0x40014800

08009158 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8009158:	b580      	push	{r7, lr}
 800915a:	b082      	sub	sp, #8
 800915c:	af00      	add	r7, sp, #0
 800915e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	2b00      	cmp	r3, #0
 8009164:	d101      	bne.n	800916a <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8009166:	2301      	movs	r3, #1
 8009168:	e049      	b.n	80091fe <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009170:	b2db      	uxtb	r3, r3
 8009172:	2b00      	cmp	r3, #0
 8009174:	d106      	bne.n	8009184 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	2200      	movs	r2, #0
 800917a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 800917e:	6878      	ldr	r0, [r7, #4]
 8009180:	f000 f841 	bl	8009206 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	2202      	movs	r2, #2
 8009188:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	681a      	ldr	r2, [r3, #0]
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	3304      	adds	r3, #4
 8009194:	4619      	mov	r1, r3
 8009196:	4610      	mov	r0, r2
 8009198:	f000 fe48 	bl	8009e2c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	2201      	movs	r2, #1
 80091a0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	2201      	movs	r2, #1
 80091a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	2201      	movs	r2, #1
 80091b0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	2201      	movs	r2, #1
 80091b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	2201      	movs	r2, #1
 80091c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	2201      	movs	r2, #1
 80091c8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	2201      	movs	r2, #1
 80091d0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	2201      	movs	r2, #1
 80091d8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	2201      	movs	r2, #1
 80091e0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	2201      	movs	r2, #1
 80091e8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	2201      	movs	r2, #1
 80091f0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80091f4:	687b      	ldr	r3, [r7, #4]
 80091f6:	2201      	movs	r2, #1
 80091f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80091fc:	2300      	movs	r3, #0
}
 80091fe:	4618      	mov	r0, r3
 8009200:	3708      	adds	r7, #8
 8009202:	46bd      	mov	sp, r7
 8009204:	bd80      	pop	{r7, pc}

08009206 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8009206:	b480      	push	{r7}
 8009208:	b083      	sub	sp, #12
 800920a:	af00      	add	r7, sp, #0
 800920c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 800920e:	bf00      	nop
 8009210:	370c      	adds	r7, #12
 8009212:	46bd      	mov	sp, r7
 8009214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009218:	4770      	bx	lr
	...

0800921c <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800921c:	b580      	push	{r7, lr}
 800921e:	b084      	sub	sp, #16
 8009220:	af00      	add	r7, sp, #0
 8009222:	6078      	str	r0, [r7, #4]
 8009224:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8009226:	2300      	movs	r3, #0
 8009228:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 800922a:	683b      	ldr	r3, [r7, #0]
 800922c:	2b00      	cmp	r3, #0
 800922e:	d104      	bne.n	800923a <HAL_TIM_IC_Start_IT+0x1e>
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009236:	b2db      	uxtb	r3, r3
 8009238:	e023      	b.n	8009282 <HAL_TIM_IC_Start_IT+0x66>
 800923a:	683b      	ldr	r3, [r7, #0]
 800923c:	2b04      	cmp	r3, #4
 800923e:	d104      	bne.n	800924a <HAL_TIM_IC_Start_IT+0x2e>
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8009246:	b2db      	uxtb	r3, r3
 8009248:	e01b      	b.n	8009282 <HAL_TIM_IC_Start_IT+0x66>
 800924a:	683b      	ldr	r3, [r7, #0]
 800924c:	2b08      	cmp	r3, #8
 800924e:	d104      	bne.n	800925a <HAL_TIM_IC_Start_IT+0x3e>
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8009256:	b2db      	uxtb	r3, r3
 8009258:	e013      	b.n	8009282 <HAL_TIM_IC_Start_IT+0x66>
 800925a:	683b      	ldr	r3, [r7, #0]
 800925c:	2b0c      	cmp	r3, #12
 800925e:	d104      	bne.n	800926a <HAL_TIM_IC_Start_IT+0x4e>
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009266:	b2db      	uxtb	r3, r3
 8009268:	e00b      	b.n	8009282 <HAL_TIM_IC_Start_IT+0x66>
 800926a:	683b      	ldr	r3, [r7, #0]
 800926c:	2b10      	cmp	r3, #16
 800926e:	d104      	bne.n	800927a <HAL_TIM_IC_Start_IT+0x5e>
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8009276:	b2db      	uxtb	r3, r3
 8009278:	e003      	b.n	8009282 <HAL_TIM_IC_Start_IT+0x66>
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8009280:	b2db      	uxtb	r3, r3
 8009282:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8009284:	683b      	ldr	r3, [r7, #0]
 8009286:	2b00      	cmp	r3, #0
 8009288:	d104      	bne.n	8009294 <HAL_TIM_IC_Start_IT+0x78>
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009290:	b2db      	uxtb	r3, r3
 8009292:	e013      	b.n	80092bc <HAL_TIM_IC_Start_IT+0xa0>
 8009294:	683b      	ldr	r3, [r7, #0]
 8009296:	2b04      	cmp	r3, #4
 8009298:	d104      	bne.n	80092a4 <HAL_TIM_IC_Start_IT+0x88>
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80092a0:	b2db      	uxtb	r3, r3
 80092a2:	e00b      	b.n	80092bc <HAL_TIM_IC_Start_IT+0xa0>
 80092a4:	683b      	ldr	r3, [r7, #0]
 80092a6:	2b08      	cmp	r3, #8
 80092a8:	d104      	bne.n	80092b4 <HAL_TIM_IC_Start_IT+0x98>
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 80092b0:	b2db      	uxtb	r3, r3
 80092b2:	e003      	b.n	80092bc <HAL_TIM_IC_Start_IT+0xa0>
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 80092ba:	b2db      	uxtb	r3, r3
 80092bc:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 80092be:	7bbb      	ldrb	r3, [r7, #14]
 80092c0:	2b01      	cmp	r3, #1
 80092c2:	d102      	bne.n	80092ca <HAL_TIM_IC_Start_IT+0xae>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 80092c4:	7b7b      	ldrb	r3, [r7, #13]
 80092c6:	2b01      	cmp	r3, #1
 80092c8:	d001      	beq.n	80092ce <HAL_TIM_IC_Start_IT+0xb2>
  {
    return HAL_ERROR;
 80092ca:	2301      	movs	r3, #1
 80092cc:	e0d8      	b.n	8009480 <HAL_TIM_IC_Start_IT+0x264>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80092ce:	683b      	ldr	r3, [r7, #0]
 80092d0:	2b00      	cmp	r3, #0
 80092d2:	d104      	bne.n	80092de <HAL_TIM_IC_Start_IT+0xc2>
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	2202      	movs	r2, #2
 80092d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80092dc:	e023      	b.n	8009326 <HAL_TIM_IC_Start_IT+0x10a>
 80092de:	683b      	ldr	r3, [r7, #0]
 80092e0:	2b04      	cmp	r3, #4
 80092e2:	d104      	bne.n	80092ee <HAL_TIM_IC_Start_IT+0xd2>
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	2202      	movs	r2, #2
 80092e8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80092ec:	e01b      	b.n	8009326 <HAL_TIM_IC_Start_IT+0x10a>
 80092ee:	683b      	ldr	r3, [r7, #0]
 80092f0:	2b08      	cmp	r3, #8
 80092f2:	d104      	bne.n	80092fe <HAL_TIM_IC_Start_IT+0xe2>
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	2202      	movs	r2, #2
 80092f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80092fc:	e013      	b.n	8009326 <HAL_TIM_IC_Start_IT+0x10a>
 80092fe:	683b      	ldr	r3, [r7, #0]
 8009300:	2b0c      	cmp	r3, #12
 8009302:	d104      	bne.n	800930e <HAL_TIM_IC_Start_IT+0xf2>
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	2202      	movs	r2, #2
 8009308:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800930c:	e00b      	b.n	8009326 <HAL_TIM_IC_Start_IT+0x10a>
 800930e:	683b      	ldr	r3, [r7, #0]
 8009310:	2b10      	cmp	r3, #16
 8009312:	d104      	bne.n	800931e <HAL_TIM_IC_Start_IT+0x102>
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	2202      	movs	r2, #2
 8009318:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800931c:	e003      	b.n	8009326 <HAL_TIM_IC_Start_IT+0x10a>
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	2202      	movs	r2, #2
 8009322:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8009326:	683b      	ldr	r3, [r7, #0]
 8009328:	2b00      	cmp	r3, #0
 800932a:	d104      	bne.n	8009336 <HAL_TIM_IC_Start_IT+0x11a>
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	2202      	movs	r2, #2
 8009330:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009334:	e013      	b.n	800935e <HAL_TIM_IC_Start_IT+0x142>
 8009336:	683b      	ldr	r3, [r7, #0]
 8009338:	2b04      	cmp	r3, #4
 800933a:	d104      	bne.n	8009346 <HAL_TIM_IC_Start_IT+0x12a>
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	2202      	movs	r2, #2
 8009340:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009344:	e00b      	b.n	800935e <HAL_TIM_IC_Start_IT+0x142>
 8009346:	683b      	ldr	r3, [r7, #0]
 8009348:	2b08      	cmp	r3, #8
 800934a:	d104      	bne.n	8009356 <HAL_TIM_IC_Start_IT+0x13a>
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	2202      	movs	r2, #2
 8009350:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8009354:	e003      	b.n	800935e <HAL_TIM_IC_Start_IT+0x142>
 8009356:	687b      	ldr	r3, [r7, #4]
 8009358:	2202      	movs	r2, #2
 800935a:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  switch (Channel)
 800935e:	683b      	ldr	r3, [r7, #0]
 8009360:	2b0c      	cmp	r3, #12
 8009362:	d841      	bhi.n	80093e8 <HAL_TIM_IC_Start_IT+0x1cc>
 8009364:	a201      	add	r2, pc, #4	; (adr r2, 800936c <HAL_TIM_IC_Start_IT+0x150>)
 8009366:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800936a:	bf00      	nop
 800936c:	080093a1 	.word	0x080093a1
 8009370:	080093e9 	.word	0x080093e9
 8009374:	080093e9 	.word	0x080093e9
 8009378:	080093e9 	.word	0x080093e9
 800937c:	080093b3 	.word	0x080093b3
 8009380:	080093e9 	.word	0x080093e9
 8009384:	080093e9 	.word	0x080093e9
 8009388:	080093e9 	.word	0x080093e9
 800938c:	080093c5 	.word	0x080093c5
 8009390:	080093e9 	.word	0x080093e9
 8009394:	080093e9 	.word	0x080093e9
 8009398:	080093e9 	.word	0x080093e9
 800939c:	080093d7 	.word	0x080093d7
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	681b      	ldr	r3, [r3, #0]
 80093a4:	68da      	ldr	r2, [r3, #12]
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	681b      	ldr	r3, [r3, #0]
 80093aa:	f042 0202 	orr.w	r2, r2, #2
 80093ae:	60da      	str	r2, [r3, #12]
      break;
 80093b0:	e01d      	b.n	80093ee <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	681b      	ldr	r3, [r3, #0]
 80093b6:	68da      	ldr	r2, [r3, #12]
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	681b      	ldr	r3, [r3, #0]
 80093bc:	f042 0204 	orr.w	r2, r2, #4
 80093c0:	60da      	str	r2, [r3, #12]
      break;
 80093c2:	e014      	b.n	80093ee <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	681b      	ldr	r3, [r3, #0]
 80093c8:	68da      	ldr	r2, [r3, #12]
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	681b      	ldr	r3, [r3, #0]
 80093ce:	f042 0208 	orr.w	r2, r2, #8
 80093d2:	60da      	str	r2, [r3, #12]
      break;
 80093d4:	e00b      	b.n	80093ee <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	681b      	ldr	r3, [r3, #0]
 80093da:	68da      	ldr	r2, [r3, #12]
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	681b      	ldr	r3, [r3, #0]
 80093e0:	f042 0210 	orr.w	r2, r2, #16
 80093e4:	60da      	str	r2, [r3, #12]
      break;
 80093e6:	e002      	b.n	80093ee <HAL_TIM_IC_Start_IT+0x1d2>
    }

    default:
      status = HAL_ERROR;
 80093e8:	2301      	movs	r3, #1
 80093ea:	73fb      	strb	r3, [r7, #15]
      break;
 80093ec:	bf00      	nop
  }

  if (status == HAL_OK)
 80093ee:	7bfb      	ldrb	r3, [r7, #15]
 80093f0:	2b00      	cmp	r3, #0
 80093f2:	d144      	bne.n	800947e <HAL_TIM_IC_Start_IT+0x262>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	681b      	ldr	r3, [r3, #0]
 80093f8:	2201      	movs	r2, #1
 80093fa:	6839      	ldr	r1, [r7, #0]
 80093fc:	4618      	mov	r0, r3
 80093fe:	f001 fac7 	bl	800a990 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009402:	687b      	ldr	r3, [r7, #4]
 8009404:	681b      	ldr	r3, [r3, #0]
 8009406:	4a20      	ldr	r2, [pc, #128]	; (8009488 <HAL_TIM_IC_Start_IT+0x26c>)
 8009408:	4293      	cmp	r3, r2
 800940a:	d018      	beq.n	800943e <HAL_TIM_IC_Start_IT+0x222>
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	681b      	ldr	r3, [r3, #0]
 8009410:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009414:	d013      	beq.n	800943e <HAL_TIM_IC_Start_IT+0x222>
 8009416:	687b      	ldr	r3, [r7, #4]
 8009418:	681b      	ldr	r3, [r3, #0]
 800941a:	4a1c      	ldr	r2, [pc, #112]	; (800948c <HAL_TIM_IC_Start_IT+0x270>)
 800941c:	4293      	cmp	r3, r2
 800941e:	d00e      	beq.n	800943e <HAL_TIM_IC_Start_IT+0x222>
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	681b      	ldr	r3, [r3, #0]
 8009424:	4a1a      	ldr	r2, [pc, #104]	; (8009490 <HAL_TIM_IC_Start_IT+0x274>)
 8009426:	4293      	cmp	r3, r2
 8009428:	d009      	beq.n	800943e <HAL_TIM_IC_Start_IT+0x222>
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	681b      	ldr	r3, [r3, #0]
 800942e:	4a19      	ldr	r2, [pc, #100]	; (8009494 <HAL_TIM_IC_Start_IT+0x278>)
 8009430:	4293      	cmp	r3, r2
 8009432:	d004      	beq.n	800943e <HAL_TIM_IC_Start_IT+0x222>
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	681b      	ldr	r3, [r3, #0]
 8009438:	4a17      	ldr	r2, [pc, #92]	; (8009498 <HAL_TIM_IC_Start_IT+0x27c>)
 800943a:	4293      	cmp	r3, r2
 800943c:	d115      	bne.n	800946a <HAL_TIM_IC_Start_IT+0x24e>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	681b      	ldr	r3, [r3, #0]
 8009442:	689a      	ldr	r2, [r3, #8]
 8009444:	4b15      	ldr	r3, [pc, #84]	; (800949c <HAL_TIM_IC_Start_IT+0x280>)
 8009446:	4013      	ands	r3, r2
 8009448:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800944a:	68bb      	ldr	r3, [r7, #8]
 800944c:	2b06      	cmp	r3, #6
 800944e:	d015      	beq.n	800947c <HAL_TIM_IC_Start_IT+0x260>
 8009450:	68bb      	ldr	r3, [r7, #8]
 8009452:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009456:	d011      	beq.n	800947c <HAL_TIM_IC_Start_IT+0x260>
      {
        __HAL_TIM_ENABLE(htim);
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	681b      	ldr	r3, [r3, #0]
 800945c:	681a      	ldr	r2, [r3, #0]
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	681b      	ldr	r3, [r3, #0]
 8009462:	f042 0201 	orr.w	r2, r2, #1
 8009466:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009468:	e008      	b.n	800947c <HAL_TIM_IC_Start_IT+0x260>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	681b      	ldr	r3, [r3, #0]
 800946e:	681a      	ldr	r2, [r3, #0]
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	681b      	ldr	r3, [r3, #0]
 8009474:	f042 0201 	orr.w	r2, r2, #1
 8009478:	601a      	str	r2, [r3, #0]
 800947a:	e000      	b.n	800947e <HAL_TIM_IC_Start_IT+0x262>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800947c:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 800947e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009480:	4618      	mov	r0, r3
 8009482:	3710      	adds	r7, #16
 8009484:	46bd      	mov	sp, r7
 8009486:	bd80      	pop	{r7, pc}
 8009488:	40012c00 	.word	0x40012c00
 800948c:	40000400 	.word	0x40000400
 8009490:	40000800 	.word	0x40000800
 8009494:	40013400 	.word	0x40013400
 8009498:	40014000 	.word	0x40014000
 800949c:	00010007 	.word	0x00010007

080094a0 <HAL_TIM_IC_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80094a0:	b580      	push	{r7, lr}
 80094a2:	b084      	sub	sp, #16
 80094a4:	af00      	add	r7, sp, #0
 80094a6:	6078      	str	r0, [r7, #4]
 80094a8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80094aa:	2300      	movs	r3, #0
 80094ac:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 80094ae:	683b      	ldr	r3, [r7, #0]
 80094b0:	2b0c      	cmp	r3, #12
 80094b2:	d841      	bhi.n	8009538 <HAL_TIM_IC_Stop_IT+0x98>
 80094b4:	a201      	add	r2, pc, #4	; (adr r2, 80094bc <HAL_TIM_IC_Stop_IT+0x1c>)
 80094b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80094ba:	bf00      	nop
 80094bc:	080094f1 	.word	0x080094f1
 80094c0:	08009539 	.word	0x08009539
 80094c4:	08009539 	.word	0x08009539
 80094c8:	08009539 	.word	0x08009539
 80094cc:	08009503 	.word	0x08009503
 80094d0:	08009539 	.word	0x08009539
 80094d4:	08009539 	.word	0x08009539
 80094d8:	08009539 	.word	0x08009539
 80094dc:	08009515 	.word	0x08009515
 80094e0:	08009539 	.word	0x08009539
 80094e4:	08009539 	.word	0x08009539
 80094e8:	08009539 	.word	0x08009539
 80094ec:	08009527 	.word	0x08009527
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	681b      	ldr	r3, [r3, #0]
 80094f4:	68da      	ldr	r2, [r3, #12]
 80094f6:	687b      	ldr	r3, [r7, #4]
 80094f8:	681b      	ldr	r3, [r3, #0]
 80094fa:	f022 0202 	bic.w	r2, r2, #2
 80094fe:	60da      	str	r2, [r3, #12]
      break;
 8009500:	e01d      	b.n	800953e <HAL_TIM_IC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	681b      	ldr	r3, [r3, #0]
 8009506:	68da      	ldr	r2, [r3, #12]
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	681b      	ldr	r3, [r3, #0]
 800950c:	f022 0204 	bic.w	r2, r2, #4
 8009510:	60da      	str	r2, [r3, #12]
      break;
 8009512:	e014      	b.n	800953e <HAL_TIM_IC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	681b      	ldr	r3, [r3, #0]
 8009518:	68da      	ldr	r2, [r3, #12]
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	681b      	ldr	r3, [r3, #0]
 800951e:	f022 0208 	bic.w	r2, r2, #8
 8009522:	60da      	str	r2, [r3, #12]
      break;
 8009524:	e00b      	b.n	800953e <HAL_TIM_IC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 8009526:	687b      	ldr	r3, [r7, #4]
 8009528:	681b      	ldr	r3, [r3, #0]
 800952a:	68da      	ldr	r2, [r3, #12]
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	681b      	ldr	r3, [r3, #0]
 8009530:	f022 0210 	bic.w	r2, r2, #16
 8009534:	60da      	str	r2, [r3, #12]
      break;
 8009536:	e002      	b.n	800953e <HAL_TIM_IC_Stop_IT+0x9e>
    }

    default:
      status = HAL_ERROR;
 8009538:	2301      	movs	r3, #1
 800953a:	73fb      	strb	r3, [r7, #15]
      break;
 800953c:	bf00      	nop
  }

  if (status == HAL_OK)
 800953e:	7bfb      	ldrb	r3, [r7, #15]
 8009540:	2b00      	cmp	r3, #0
 8009542:	d166      	bne.n	8009612 <HAL_TIM_IC_Stop_IT+0x172>
  {
    /* Disable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	681b      	ldr	r3, [r3, #0]
 8009548:	2200      	movs	r2, #0
 800954a:	6839      	ldr	r1, [r7, #0]
 800954c:	4618      	mov	r0, r3
 800954e:	f001 fa1f 	bl	800a990 <TIM_CCxChannelCmd>

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	681b      	ldr	r3, [r3, #0]
 8009556:	6a1a      	ldr	r2, [r3, #32]
 8009558:	f241 1311 	movw	r3, #4369	; 0x1111
 800955c:	4013      	ands	r3, r2
 800955e:	2b00      	cmp	r3, #0
 8009560:	d10f      	bne.n	8009582 <HAL_TIM_IC_Stop_IT+0xe2>
 8009562:	687b      	ldr	r3, [r7, #4]
 8009564:	681b      	ldr	r3, [r3, #0]
 8009566:	6a1a      	ldr	r2, [r3, #32]
 8009568:	f240 4344 	movw	r3, #1092	; 0x444
 800956c:	4013      	ands	r3, r2
 800956e:	2b00      	cmp	r3, #0
 8009570:	d107      	bne.n	8009582 <HAL_TIM_IC_Stop_IT+0xe2>
 8009572:	687b      	ldr	r3, [r7, #4]
 8009574:	681b      	ldr	r3, [r3, #0]
 8009576:	681a      	ldr	r2, [r3, #0]
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	681b      	ldr	r3, [r3, #0]
 800957c:	f022 0201 	bic.w	r2, r2, #1
 8009580:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8009582:	683b      	ldr	r3, [r7, #0]
 8009584:	2b00      	cmp	r3, #0
 8009586:	d104      	bne.n	8009592 <HAL_TIM_IC_Stop_IT+0xf2>
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	2201      	movs	r2, #1
 800958c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009590:	e023      	b.n	80095da <HAL_TIM_IC_Stop_IT+0x13a>
 8009592:	683b      	ldr	r3, [r7, #0]
 8009594:	2b04      	cmp	r3, #4
 8009596:	d104      	bne.n	80095a2 <HAL_TIM_IC_Stop_IT+0x102>
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	2201      	movs	r2, #1
 800959c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80095a0:	e01b      	b.n	80095da <HAL_TIM_IC_Stop_IT+0x13a>
 80095a2:	683b      	ldr	r3, [r7, #0]
 80095a4:	2b08      	cmp	r3, #8
 80095a6:	d104      	bne.n	80095b2 <HAL_TIM_IC_Stop_IT+0x112>
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	2201      	movs	r2, #1
 80095ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80095b0:	e013      	b.n	80095da <HAL_TIM_IC_Stop_IT+0x13a>
 80095b2:	683b      	ldr	r3, [r7, #0]
 80095b4:	2b0c      	cmp	r3, #12
 80095b6:	d104      	bne.n	80095c2 <HAL_TIM_IC_Stop_IT+0x122>
 80095b8:	687b      	ldr	r3, [r7, #4]
 80095ba:	2201      	movs	r2, #1
 80095bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80095c0:	e00b      	b.n	80095da <HAL_TIM_IC_Stop_IT+0x13a>
 80095c2:	683b      	ldr	r3, [r7, #0]
 80095c4:	2b10      	cmp	r3, #16
 80095c6:	d104      	bne.n	80095d2 <HAL_TIM_IC_Stop_IT+0x132>
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	2201      	movs	r2, #1
 80095cc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80095d0:	e003      	b.n	80095da <HAL_TIM_IC_Stop_IT+0x13a>
 80095d2:	687b      	ldr	r3, [r7, #4]
 80095d4:	2201      	movs	r2, #1
 80095d6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80095da:	683b      	ldr	r3, [r7, #0]
 80095dc:	2b00      	cmp	r3, #0
 80095de:	d104      	bne.n	80095ea <HAL_TIM_IC_Stop_IT+0x14a>
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	2201      	movs	r2, #1
 80095e4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80095e8:	e013      	b.n	8009612 <HAL_TIM_IC_Stop_IT+0x172>
 80095ea:	683b      	ldr	r3, [r7, #0]
 80095ec:	2b04      	cmp	r3, #4
 80095ee:	d104      	bne.n	80095fa <HAL_TIM_IC_Stop_IT+0x15a>
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	2201      	movs	r2, #1
 80095f4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80095f8:	e00b      	b.n	8009612 <HAL_TIM_IC_Stop_IT+0x172>
 80095fa:	683b      	ldr	r3, [r7, #0]
 80095fc:	2b08      	cmp	r3, #8
 80095fe:	d104      	bne.n	800960a <HAL_TIM_IC_Stop_IT+0x16a>
 8009600:	687b      	ldr	r3, [r7, #4]
 8009602:	2201      	movs	r2, #1
 8009604:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8009608:	e003      	b.n	8009612 <HAL_TIM_IC_Stop_IT+0x172>
 800960a:	687b      	ldr	r3, [r7, #4]
 800960c:	2201      	movs	r2, #1
 800960e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
  }

  /* Return function status */
  return status;
 8009612:	7bfb      	ldrb	r3, [r7, #15]
}
 8009614:	4618      	mov	r0, r3
 8009616:	3710      	adds	r7, #16
 8009618:	46bd      	mov	sp, r7
 800961a:	bd80      	pop	{r7, pc}

0800961c <HAL_TIM_OnePulse_Init>:
  *            @arg TIM_OPMODE_SINGLE: Only one pulse will be generated.
  *            @arg TIM_OPMODE_REPETITIVE: Repetitive pulses will be generated.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Init(TIM_HandleTypeDef *htim, uint32_t OnePulseMode)
{
 800961c:	b580      	push	{r7, lr}
 800961e:	b082      	sub	sp, #8
 8009620:	af00      	add	r7, sp, #0
 8009622:	6078      	str	r0, [r7, #4]
 8009624:	6039      	str	r1, [r7, #0]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	2b00      	cmp	r3, #0
 800962a:	d101      	bne.n	8009630 <HAL_TIM_OnePulse_Init+0x14>
  {
    return HAL_ERROR;
 800962c:	2301      	movs	r3, #1
 800962e:	e041      	b.n	80096b4 <HAL_TIM_OnePulse_Init+0x98>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_OPM_MODE(OnePulseMode));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009636:	b2db      	uxtb	r3, r3
 8009638:	2b00      	cmp	r3, #0
 800963a:	d106      	bne.n	800964a <HAL_TIM_OnePulse_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	2200      	movs	r2, #0
 8009640:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OnePulse_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OnePulse_MspInit(htim);
 8009644:	6878      	ldr	r0, [r7, #4]
 8009646:	f000 f839 	bl	80096bc <HAL_TIM_OnePulse_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	2202      	movs	r2, #2
 800964e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Configure the Time base in the One Pulse Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009652:	687b      	ldr	r3, [r7, #4]
 8009654:	681a      	ldr	r2, [r3, #0]
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	3304      	adds	r3, #4
 800965a:	4619      	mov	r1, r3
 800965c:	4610      	mov	r0, r2
 800965e:	f000 fbe5 	bl	8009e2c <TIM_Base_SetConfig>

  /* Reset the OPM Bit */
  htim->Instance->CR1 &= ~TIM_CR1_OPM;
 8009662:	687b      	ldr	r3, [r7, #4]
 8009664:	681b      	ldr	r3, [r3, #0]
 8009666:	681a      	ldr	r2, [r3, #0]
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	681b      	ldr	r3, [r3, #0]
 800966c:	f022 0208 	bic.w	r2, r2, #8
 8009670:	601a      	str	r2, [r3, #0]

  /* Configure the OPM Mode */
  htim->Instance->CR1 |= OnePulseMode;
 8009672:	687b      	ldr	r3, [r7, #4]
 8009674:	681b      	ldr	r3, [r3, #0]
 8009676:	6819      	ldr	r1, [r3, #0]
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	681b      	ldr	r3, [r3, #0]
 800967c:	683a      	ldr	r2, [r7, #0]
 800967e:	430a      	orrs	r2, r1
 8009680:	601a      	str	r2, [r3, #0]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009682:	687b      	ldr	r3, [r7, #4]
 8009684:	2201      	movs	r2, #1
 8009686:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800968a:	687b      	ldr	r3, [r7, #4]
 800968c:	2201      	movs	r2, #1
 800968e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8009692:	687b      	ldr	r3, [r7, #4]
 8009694:	2201      	movs	r2, #1
 8009696:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800969a:	687b      	ldr	r3, [r7, #4]
 800969c:	2201      	movs	r2, #1
 800969e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80096a2:	687b      	ldr	r3, [r7, #4]
 80096a4:	2201      	movs	r2, #1
 80096a6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	2201      	movs	r2, #1
 80096ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80096b2:	2300      	movs	r3, #0
}
 80096b4:	4618      	mov	r0, r3
 80096b6:	3708      	adds	r7, #8
 80096b8:	46bd      	mov	sp, r7
 80096ba:	bd80      	pop	{r7, pc}

080096bc <HAL_TIM_OnePulse_MspInit>:
  * @brief  Initializes the TIM One Pulse MSP.
  * @param  htim TIM One Pulse handle
  * @retval None
  */
__weak void HAL_TIM_OnePulse_MspInit(TIM_HandleTypeDef *htim)
{
 80096bc:	b480      	push	{r7}
 80096be:	b083      	sub	sp, #12
 80096c0:	af00      	add	r7, sp, #0
 80096c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OnePulse_MspInit could be implemented in the user file
   */
}
 80096c4:	bf00      	nop
 80096c6:	370c      	adds	r7, #12
 80096c8:	46bd      	mov	sp, r7
 80096ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096ce:	4770      	bx	lr

080096d0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80096d0:	b580      	push	{r7, lr}
 80096d2:	b082      	sub	sp, #8
 80096d4:	af00      	add	r7, sp, #0
 80096d6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80096d8:	687b      	ldr	r3, [r7, #4]
 80096da:	681b      	ldr	r3, [r3, #0]
 80096dc:	691b      	ldr	r3, [r3, #16]
 80096de:	f003 0302 	and.w	r3, r3, #2
 80096e2:	2b02      	cmp	r3, #2
 80096e4:	d122      	bne.n	800972c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80096e6:	687b      	ldr	r3, [r7, #4]
 80096e8:	681b      	ldr	r3, [r3, #0]
 80096ea:	68db      	ldr	r3, [r3, #12]
 80096ec:	f003 0302 	and.w	r3, r3, #2
 80096f0:	2b02      	cmp	r3, #2
 80096f2:	d11b      	bne.n	800972c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80096f4:	687b      	ldr	r3, [r7, #4]
 80096f6:	681b      	ldr	r3, [r3, #0]
 80096f8:	f06f 0202 	mvn.w	r2, #2
 80096fc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80096fe:	687b      	ldr	r3, [r7, #4]
 8009700:	2201      	movs	r2, #1
 8009702:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	681b      	ldr	r3, [r3, #0]
 8009708:	699b      	ldr	r3, [r3, #24]
 800970a:	f003 0303 	and.w	r3, r3, #3
 800970e:	2b00      	cmp	r3, #0
 8009710:	d003      	beq.n	800971a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8009712:	6878      	ldr	r0, [r7, #4]
 8009714:	f7f9 fa1c 	bl	8002b50 <HAL_TIM_IC_CaptureCallback>
 8009718:	e005      	b.n	8009726 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800971a:	6878      	ldr	r0, [r7, #4]
 800971c:	f000 fb68 	bl	8009df0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009720:	6878      	ldr	r0, [r7, #4]
 8009722:	f000 fb6f 	bl	8009e04 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009726:	687b      	ldr	r3, [r7, #4]
 8009728:	2200      	movs	r2, #0
 800972a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800972c:	687b      	ldr	r3, [r7, #4]
 800972e:	681b      	ldr	r3, [r3, #0]
 8009730:	691b      	ldr	r3, [r3, #16]
 8009732:	f003 0304 	and.w	r3, r3, #4
 8009736:	2b04      	cmp	r3, #4
 8009738:	d122      	bne.n	8009780 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	681b      	ldr	r3, [r3, #0]
 800973e:	68db      	ldr	r3, [r3, #12]
 8009740:	f003 0304 	and.w	r3, r3, #4
 8009744:	2b04      	cmp	r3, #4
 8009746:	d11b      	bne.n	8009780 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	681b      	ldr	r3, [r3, #0]
 800974c:	f06f 0204 	mvn.w	r2, #4
 8009750:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009752:	687b      	ldr	r3, [r7, #4]
 8009754:	2202      	movs	r2, #2
 8009756:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	681b      	ldr	r3, [r3, #0]
 800975c:	699b      	ldr	r3, [r3, #24]
 800975e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009762:	2b00      	cmp	r3, #0
 8009764:	d003      	beq.n	800976e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009766:	6878      	ldr	r0, [r7, #4]
 8009768:	f7f9 f9f2 	bl	8002b50 <HAL_TIM_IC_CaptureCallback>
 800976c:	e005      	b.n	800977a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800976e:	6878      	ldr	r0, [r7, #4]
 8009770:	f000 fb3e 	bl	8009df0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009774:	6878      	ldr	r0, [r7, #4]
 8009776:	f000 fb45 	bl	8009e04 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800977a:	687b      	ldr	r3, [r7, #4]
 800977c:	2200      	movs	r2, #0
 800977e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	681b      	ldr	r3, [r3, #0]
 8009784:	691b      	ldr	r3, [r3, #16]
 8009786:	f003 0308 	and.w	r3, r3, #8
 800978a:	2b08      	cmp	r3, #8
 800978c:	d122      	bne.n	80097d4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800978e:	687b      	ldr	r3, [r7, #4]
 8009790:	681b      	ldr	r3, [r3, #0]
 8009792:	68db      	ldr	r3, [r3, #12]
 8009794:	f003 0308 	and.w	r3, r3, #8
 8009798:	2b08      	cmp	r3, #8
 800979a:	d11b      	bne.n	80097d4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800979c:	687b      	ldr	r3, [r7, #4]
 800979e:	681b      	ldr	r3, [r3, #0]
 80097a0:	f06f 0208 	mvn.w	r2, #8
 80097a4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80097a6:	687b      	ldr	r3, [r7, #4]
 80097a8:	2204      	movs	r2, #4
 80097aa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80097ac:	687b      	ldr	r3, [r7, #4]
 80097ae:	681b      	ldr	r3, [r3, #0]
 80097b0:	69db      	ldr	r3, [r3, #28]
 80097b2:	f003 0303 	and.w	r3, r3, #3
 80097b6:	2b00      	cmp	r3, #0
 80097b8:	d003      	beq.n	80097c2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80097ba:	6878      	ldr	r0, [r7, #4]
 80097bc:	f7f9 f9c8 	bl	8002b50 <HAL_TIM_IC_CaptureCallback>
 80097c0:	e005      	b.n	80097ce <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80097c2:	6878      	ldr	r0, [r7, #4]
 80097c4:	f000 fb14 	bl	8009df0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80097c8:	6878      	ldr	r0, [r7, #4]
 80097ca:	f000 fb1b 	bl	8009e04 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80097ce:	687b      	ldr	r3, [r7, #4]
 80097d0:	2200      	movs	r2, #0
 80097d2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	681b      	ldr	r3, [r3, #0]
 80097d8:	691b      	ldr	r3, [r3, #16]
 80097da:	f003 0310 	and.w	r3, r3, #16
 80097de:	2b10      	cmp	r3, #16
 80097e0:	d122      	bne.n	8009828 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80097e2:	687b      	ldr	r3, [r7, #4]
 80097e4:	681b      	ldr	r3, [r3, #0]
 80097e6:	68db      	ldr	r3, [r3, #12]
 80097e8:	f003 0310 	and.w	r3, r3, #16
 80097ec:	2b10      	cmp	r3, #16
 80097ee:	d11b      	bne.n	8009828 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	681b      	ldr	r3, [r3, #0]
 80097f4:	f06f 0210 	mvn.w	r2, #16
 80097f8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80097fa:	687b      	ldr	r3, [r7, #4]
 80097fc:	2208      	movs	r2, #8
 80097fe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	681b      	ldr	r3, [r3, #0]
 8009804:	69db      	ldr	r3, [r3, #28]
 8009806:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800980a:	2b00      	cmp	r3, #0
 800980c:	d003      	beq.n	8009816 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800980e:	6878      	ldr	r0, [r7, #4]
 8009810:	f7f9 f99e 	bl	8002b50 <HAL_TIM_IC_CaptureCallback>
 8009814:	e005      	b.n	8009822 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009816:	6878      	ldr	r0, [r7, #4]
 8009818:	f000 faea 	bl	8009df0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800981c:	6878      	ldr	r0, [r7, #4]
 800981e:	f000 faf1 	bl	8009e04 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	2200      	movs	r2, #0
 8009826:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8009828:	687b      	ldr	r3, [r7, #4]
 800982a:	681b      	ldr	r3, [r3, #0]
 800982c:	691b      	ldr	r3, [r3, #16]
 800982e:	f003 0301 	and.w	r3, r3, #1
 8009832:	2b01      	cmp	r3, #1
 8009834:	d10e      	bne.n	8009854 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8009836:	687b      	ldr	r3, [r7, #4]
 8009838:	681b      	ldr	r3, [r3, #0]
 800983a:	68db      	ldr	r3, [r3, #12]
 800983c:	f003 0301 	and.w	r3, r3, #1
 8009840:	2b01      	cmp	r3, #1
 8009842:	d107      	bne.n	8009854 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8009844:	687b      	ldr	r3, [r7, #4]
 8009846:	681b      	ldr	r3, [r3, #0]
 8009848:	f06f 0201 	mvn.w	r2, #1
 800984c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800984e:	6878      	ldr	r0, [r7, #4]
 8009850:	f000 fac4 	bl	8009ddc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	681b      	ldr	r3, [r3, #0]
 8009858:	691b      	ldr	r3, [r3, #16]
 800985a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800985e:	2b80      	cmp	r3, #128	; 0x80
 8009860:	d10e      	bne.n	8009880 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8009862:	687b      	ldr	r3, [r7, #4]
 8009864:	681b      	ldr	r3, [r3, #0]
 8009866:	68db      	ldr	r3, [r3, #12]
 8009868:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800986c:	2b80      	cmp	r3, #128	; 0x80
 800986e:	d107      	bne.n	8009880 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	681b      	ldr	r3, [r3, #0]
 8009874:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8009878:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800987a:	6878      	ldr	r0, [r7, #4]
 800987c:	f001 f9b6 	bl	800abec <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	681b      	ldr	r3, [r3, #0]
 8009884:	691b      	ldr	r3, [r3, #16]
 8009886:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800988a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800988e:	d10e      	bne.n	80098ae <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8009890:	687b      	ldr	r3, [r7, #4]
 8009892:	681b      	ldr	r3, [r3, #0]
 8009894:	68db      	ldr	r3, [r3, #12]
 8009896:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800989a:	2b80      	cmp	r3, #128	; 0x80
 800989c:	d107      	bne.n	80098ae <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800989e:	687b      	ldr	r3, [r7, #4]
 80098a0:	681b      	ldr	r3, [r3, #0]
 80098a2:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80098a6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80098a8:	6878      	ldr	r0, [r7, #4]
 80098aa:	f001 f9a9 	bl	800ac00 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80098ae:	687b      	ldr	r3, [r7, #4]
 80098b0:	681b      	ldr	r3, [r3, #0]
 80098b2:	691b      	ldr	r3, [r3, #16]
 80098b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80098b8:	2b40      	cmp	r3, #64	; 0x40
 80098ba:	d10e      	bne.n	80098da <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80098bc:	687b      	ldr	r3, [r7, #4]
 80098be:	681b      	ldr	r3, [r3, #0]
 80098c0:	68db      	ldr	r3, [r3, #12]
 80098c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80098c6:	2b40      	cmp	r3, #64	; 0x40
 80098c8:	d107      	bne.n	80098da <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80098ca:	687b      	ldr	r3, [r7, #4]
 80098cc:	681b      	ldr	r3, [r3, #0]
 80098ce:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80098d2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80098d4:	6878      	ldr	r0, [r7, #4]
 80098d6:	f000 fa9f 	bl	8009e18 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80098da:	687b      	ldr	r3, [r7, #4]
 80098dc:	681b      	ldr	r3, [r3, #0]
 80098de:	691b      	ldr	r3, [r3, #16]
 80098e0:	f003 0320 	and.w	r3, r3, #32
 80098e4:	2b20      	cmp	r3, #32
 80098e6:	d10e      	bne.n	8009906 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80098e8:	687b      	ldr	r3, [r7, #4]
 80098ea:	681b      	ldr	r3, [r3, #0]
 80098ec:	68db      	ldr	r3, [r3, #12]
 80098ee:	f003 0320 	and.w	r3, r3, #32
 80098f2:	2b20      	cmp	r3, #32
 80098f4:	d107      	bne.n	8009906 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80098f6:	687b      	ldr	r3, [r7, #4]
 80098f8:	681b      	ldr	r3, [r3, #0]
 80098fa:	f06f 0220 	mvn.w	r2, #32
 80098fe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8009900:	6878      	ldr	r0, [r7, #4]
 8009902:	f001 f969 	bl	800abd8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8009906:	bf00      	nop
 8009908:	3708      	adds	r7, #8
 800990a:	46bd      	mov	sp, r7
 800990c:	bd80      	pop	{r7, pc}
	...

08009910 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8009910:	b580      	push	{r7, lr}
 8009912:	b086      	sub	sp, #24
 8009914:	af00      	add	r7, sp, #0
 8009916:	60f8      	str	r0, [r7, #12]
 8009918:	60b9      	str	r1, [r7, #8]
 800991a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800991c:	2300      	movs	r3, #0
 800991e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8009920:	68fb      	ldr	r3, [r7, #12]
 8009922:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009926:	2b01      	cmp	r3, #1
 8009928:	d101      	bne.n	800992e <HAL_TIM_OC_ConfigChannel+0x1e>
 800992a:	2302      	movs	r3, #2
 800992c:	e066      	b.n	80099fc <HAL_TIM_OC_ConfigChannel+0xec>
 800992e:	68fb      	ldr	r3, [r7, #12]
 8009930:	2201      	movs	r2, #1
 8009932:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8009936:	687b      	ldr	r3, [r7, #4]
 8009938:	2b14      	cmp	r3, #20
 800993a:	d857      	bhi.n	80099ec <HAL_TIM_OC_ConfigChannel+0xdc>
 800993c:	a201      	add	r2, pc, #4	; (adr r2, 8009944 <HAL_TIM_OC_ConfigChannel+0x34>)
 800993e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009942:	bf00      	nop
 8009944:	08009999 	.word	0x08009999
 8009948:	080099ed 	.word	0x080099ed
 800994c:	080099ed 	.word	0x080099ed
 8009950:	080099ed 	.word	0x080099ed
 8009954:	080099a7 	.word	0x080099a7
 8009958:	080099ed 	.word	0x080099ed
 800995c:	080099ed 	.word	0x080099ed
 8009960:	080099ed 	.word	0x080099ed
 8009964:	080099b5 	.word	0x080099b5
 8009968:	080099ed 	.word	0x080099ed
 800996c:	080099ed 	.word	0x080099ed
 8009970:	080099ed 	.word	0x080099ed
 8009974:	080099c3 	.word	0x080099c3
 8009978:	080099ed 	.word	0x080099ed
 800997c:	080099ed 	.word	0x080099ed
 8009980:	080099ed 	.word	0x080099ed
 8009984:	080099d1 	.word	0x080099d1
 8009988:	080099ed 	.word	0x080099ed
 800998c:	080099ed 	.word	0x080099ed
 8009990:	080099ed 	.word	0x080099ed
 8009994:	080099df 	.word	0x080099df
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8009998:	68fb      	ldr	r3, [r7, #12]
 800999a:	681b      	ldr	r3, [r3, #0]
 800999c:	68b9      	ldr	r1, [r7, #8]
 800999e:	4618      	mov	r0, r3
 80099a0:	f000 fad4 	bl	8009f4c <TIM_OC1_SetConfig>
      break;
 80099a4:	e025      	b.n	80099f2 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80099a6:	68fb      	ldr	r3, [r7, #12]
 80099a8:	681b      	ldr	r3, [r3, #0]
 80099aa:	68b9      	ldr	r1, [r7, #8]
 80099ac:	4618      	mov	r0, r3
 80099ae:	f000 fb5d 	bl	800a06c <TIM_OC2_SetConfig>
      break;
 80099b2:	e01e      	b.n	80099f2 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80099b4:	68fb      	ldr	r3, [r7, #12]
 80099b6:	681b      	ldr	r3, [r3, #0]
 80099b8:	68b9      	ldr	r1, [r7, #8]
 80099ba:	4618      	mov	r0, r3
 80099bc:	f000 fbe0 	bl	800a180 <TIM_OC3_SetConfig>
      break;
 80099c0:	e017      	b.n	80099f2 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80099c2:	68fb      	ldr	r3, [r7, #12]
 80099c4:	681b      	ldr	r3, [r3, #0]
 80099c6:	68b9      	ldr	r1, [r7, #8]
 80099c8:	4618      	mov	r0, r3
 80099ca:	f000 fc61 	bl	800a290 <TIM_OC4_SetConfig>
      break;
 80099ce:	e010      	b.n	80099f2 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80099d0:	68fb      	ldr	r3, [r7, #12]
 80099d2:	681b      	ldr	r3, [r3, #0]
 80099d4:	68b9      	ldr	r1, [r7, #8]
 80099d6:	4618      	mov	r0, r3
 80099d8:	f000 fcc4 	bl	800a364 <TIM_OC5_SetConfig>
      break;
 80099dc:	e009      	b.n	80099f2 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80099de:	68fb      	ldr	r3, [r7, #12]
 80099e0:	681b      	ldr	r3, [r3, #0]
 80099e2:	68b9      	ldr	r1, [r7, #8]
 80099e4:	4618      	mov	r0, r3
 80099e6:	f000 fd21 	bl	800a42c <TIM_OC6_SetConfig>
      break;
 80099ea:	e002      	b.n	80099f2 <HAL_TIM_OC_ConfigChannel+0xe2>
    }
#endif /* TIM_CCER_CC6E */

    default:
      status = HAL_ERROR;
 80099ec:	2301      	movs	r3, #1
 80099ee:	75fb      	strb	r3, [r7, #23]
      break;
 80099f0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80099f2:	68fb      	ldr	r3, [r7, #12]
 80099f4:	2200      	movs	r2, #0
 80099f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80099fa:	7dfb      	ldrb	r3, [r7, #23]
}
 80099fc:	4618      	mov	r0, r3
 80099fe:	3718      	adds	r7, #24
 8009a00:	46bd      	mov	sp, r7
 8009a02:	bd80      	pop	{r7, pc}

08009a04 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8009a04:	b580      	push	{r7, lr}
 8009a06:	b086      	sub	sp, #24
 8009a08:	af00      	add	r7, sp, #0
 8009a0a:	60f8      	str	r0, [r7, #12]
 8009a0c:	60b9      	str	r1, [r7, #8]
 8009a0e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009a10:	2300      	movs	r3, #0
 8009a12:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8009a14:	68fb      	ldr	r3, [r7, #12]
 8009a16:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009a1a:	2b01      	cmp	r3, #1
 8009a1c:	d101      	bne.n	8009a22 <HAL_TIM_IC_ConfigChannel+0x1e>
 8009a1e:	2302      	movs	r3, #2
 8009a20:	e088      	b.n	8009b34 <HAL_TIM_IC_ConfigChannel+0x130>
 8009a22:	68fb      	ldr	r3, [r7, #12]
 8009a24:	2201      	movs	r2, #1
 8009a26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8009a2a:	687b      	ldr	r3, [r7, #4]
 8009a2c:	2b00      	cmp	r3, #0
 8009a2e:	d11b      	bne.n	8009a68 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8009a30:	68fb      	ldr	r3, [r7, #12]
 8009a32:	6818      	ldr	r0, [r3, #0]
 8009a34:	68bb      	ldr	r3, [r7, #8]
 8009a36:	6819      	ldr	r1, [r3, #0]
 8009a38:	68bb      	ldr	r3, [r7, #8]
 8009a3a:	685a      	ldr	r2, [r3, #4]
 8009a3c:	68bb      	ldr	r3, [r7, #8]
 8009a3e:	68db      	ldr	r3, [r3, #12]
 8009a40:	f000 fdee 	bl	800a620 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8009a44:	68fb      	ldr	r3, [r7, #12]
 8009a46:	681b      	ldr	r3, [r3, #0]
 8009a48:	699a      	ldr	r2, [r3, #24]
 8009a4a:	68fb      	ldr	r3, [r7, #12]
 8009a4c:	681b      	ldr	r3, [r3, #0]
 8009a4e:	f022 020c 	bic.w	r2, r2, #12
 8009a52:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8009a54:	68fb      	ldr	r3, [r7, #12]
 8009a56:	681b      	ldr	r3, [r3, #0]
 8009a58:	6999      	ldr	r1, [r3, #24]
 8009a5a:	68bb      	ldr	r3, [r7, #8]
 8009a5c:	689a      	ldr	r2, [r3, #8]
 8009a5e:	68fb      	ldr	r3, [r7, #12]
 8009a60:	681b      	ldr	r3, [r3, #0]
 8009a62:	430a      	orrs	r2, r1
 8009a64:	619a      	str	r2, [r3, #24]
 8009a66:	e060      	b.n	8009b2a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8009a68:	687b      	ldr	r3, [r7, #4]
 8009a6a:	2b04      	cmp	r3, #4
 8009a6c:	d11c      	bne.n	8009aa8 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8009a6e:	68fb      	ldr	r3, [r7, #12]
 8009a70:	6818      	ldr	r0, [r3, #0]
 8009a72:	68bb      	ldr	r3, [r7, #8]
 8009a74:	6819      	ldr	r1, [r3, #0]
 8009a76:	68bb      	ldr	r3, [r7, #8]
 8009a78:	685a      	ldr	r2, [r3, #4]
 8009a7a:	68bb      	ldr	r3, [r7, #8]
 8009a7c:	68db      	ldr	r3, [r3, #12]
 8009a7e:	f000 fe66 	bl	800a74e <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8009a82:	68fb      	ldr	r3, [r7, #12]
 8009a84:	681b      	ldr	r3, [r3, #0]
 8009a86:	699a      	ldr	r2, [r3, #24]
 8009a88:	68fb      	ldr	r3, [r7, #12]
 8009a8a:	681b      	ldr	r3, [r3, #0]
 8009a8c:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8009a90:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8009a92:	68fb      	ldr	r3, [r7, #12]
 8009a94:	681b      	ldr	r3, [r3, #0]
 8009a96:	6999      	ldr	r1, [r3, #24]
 8009a98:	68bb      	ldr	r3, [r7, #8]
 8009a9a:	689b      	ldr	r3, [r3, #8]
 8009a9c:	021a      	lsls	r2, r3, #8
 8009a9e:	68fb      	ldr	r3, [r7, #12]
 8009aa0:	681b      	ldr	r3, [r3, #0]
 8009aa2:	430a      	orrs	r2, r1
 8009aa4:	619a      	str	r2, [r3, #24]
 8009aa6:	e040      	b.n	8009b2a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8009aa8:	687b      	ldr	r3, [r7, #4]
 8009aaa:	2b08      	cmp	r3, #8
 8009aac:	d11b      	bne.n	8009ae6 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8009aae:	68fb      	ldr	r3, [r7, #12]
 8009ab0:	6818      	ldr	r0, [r3, #0]
 8009ab2:	68bb      	ldr	r3, [r7, #8]
 8009ab4:	6819      	ldr	r1, [r3, #0]
 8009ab6:	68bb      	ldr	r3, [r7, #8]
 8009ab8:	685a      	ldr	r2, [r3, #4]
 8009aba:	68bb      	ldr	r3, [r7, #8]
 8009abc:	68db      	ldr	r3, [r3, #12]
 8009abe:	f000 feb3 	bl	800a828 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8009ac2:	68fb      	ldr	r3, [r7, #12]
 8009ac4:	681b      	ldr	r3, [r3, #0]
 8009ac6:	69da      	ldr	r2, [r3, #28]
 8009ac8:	68fb      	ldr	r3, [r7, #12]
 8009aca:	681b      	ldr	r3, [r3, #0]
 8009acc:	f022 020c 	bic.w	r2, r2, #12
 8009ad0:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8009ad2:	68fb      	ldr	r3, [r7, #12]
 8009ad4:	681b      	ldr	r3, [r3, #0]
 8009ad6:	69d9      	ldr	r1, [r3, #28]
 8009ad8:	68bb      	ldr	r3, [r7, #8]
 8009ada:	689a      	ldr	r2, [r3, #8]
 8009adc:	68fb      	ldr	r3, [r7, #12]
 8009ade:	681b      	ldr	r3, [r3, #0]
 8009ae0:	430a      	orrs	r2, r1
 8009ae2:	61da      	str	r2, [r3, #28]
 8009ae4:	e021      	b.n	8009b2a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8009ae6:	687b      	ldr	r3, [r7, #4]
 8009ae8:	2b0c      	cmp	r3, #12
 8009aea:	d11c      	bne.n	8009b26 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8009aec:	68fb      	ldr	r3, [r7, #12]
 8009aee:	6818      	ldr	r0, [r3, #0]
 8009af0:	68bb      	ldr	r3, [r7, #8]
 8009af2:	6819      	ldr	r1, [r3, #0]
 8009af4:	68bb      	ldr	r3, [r7, #8]
 8009af6:	685a      	ldr	r2, [r3, #4]
 8009af8:	68bb      	ldr	r3, [r7, #8]
 8009afa:	68db      	ldr	r3, [r3, #12]
 8009afc:	f000 fed0 	bl	800a8a0 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8009b00:	68fb      	ldr	r3, [r7, #12]
 8009b02:	681b      	ldr	r3, [r3, #0]
 8009b04:	69da      	ldr	r2, [r3, #28]
 8009b06:	68fb      	ldr	r3, [r7, #12]
 8009b08:	681b      	ldr	r3, [r3, #0]
 8009b0a:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8009b0e:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8009b10:	68fb      	ldr	r3, [r7, #12]
 8009b12:	681b      	ldr	r3, [r3, #0]
 8009b14:	69d9      	ldr	r1, [r3, #28]
 8009b16:	68bb      	ldr	r3, [r7, #8]
 8009b18:	689b      	ldr	r3, [r3, #8]
 8009b1a:	021a      	lsls	r2, r3, #8
 8009b1c:	68fb      	ldr	r3, [r7, #12]
 8009b1e:	681b      	ldr	r3, [r3, #0]
 8009b20:	430a      	orrs	r2, r1
 8009b22:	61da      	str	r2, [r3, #28]
 8009b24:	e001      	b.n	8009b2a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8009b26:	2301      	movs	r3, #1
 8009b28:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8009b2a:	68fb      	ldr	r3, [r7, #12]
 8009b2c:	2200      	movs	r2, #0
 8009b2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8009b32:	7dfb      	ldrb	r3, [r7, #23]
}
 8009b34:	4618      	mov	r0, r3
 8009b36:	3718      	adds	r7, #24
 8009b38:	46bd      	mov	sp, r7
 8009b3a:	bd80      	pop	{r7, pc}

08009b3c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8009b3c:	b580      	push	{r7, lr}
 8009b3e:	b084      	sub	sp, #16
 8009b40:	af00      	add	r7, sp, #0
 8009b42:	6078      	str	r0, [r7, #4]
 8009b44:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8009b46:	2300      	movs	r3, #0
 8009b48:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8009b4a:	687b      	ldr	r3, [r7, #4]
 8009b4c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009b50:	2b01      	cmp	r3, #1
 8009b52:	d101      	bne.n	8009b58 <HAL_TIM_ConfigClockSource+0x1c>
 8009b54:	2302      	movs	r3, #2
 8009b56:	e0b6      	b.n	8009cc6 <HAL_TIM_ConfigClockSource+0x18a>
 8009b58:	687b      	ldr	r3, [r7, #4]
 8009b5a:	2201      	movs	r2, #1
 8009b5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8009b60:	687b      	ldr	r3, [r7, #4]
 8009b62:	2202      	movs	r2, #2
 8009b64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8009b68:	687b      	ldr	r3, [r7, #4]
 8009b6a:	681b      	ldr	r3, [r3, #0]
 8009b6c:	689b      	ldr	r3, [r3, #8]
 8009b6e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8009b70:	68bb      	ldr	r3, [r7, #8]
 8009b72:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009b76:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8009b7a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009b7c:	68bb      	ldr	r3, [r7, #8]
 8009b7e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009b82:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8009b84:	687b      	ldr	r3, [r7, #4]
 8009b86:	681b      	ldr	r3, [r3, #0]
 8009b88:	68ba      	ldr	r2, [r7, #8]
 8009b8a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8009b8c:	683b      	ldr	r3, [r7, #0]
 8009b8e:	681b      	ldr	r3, [r3, #0]
 8009b90:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009b94:	d03e      	beq.n	8009c14 <HAL_TIM_ConfigClockSource+0xd8>
 8009b96:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009b9a:	f200 8087 	bhi.w	8009cac <HAL_TIM_ConfigClockSource+0x170>
 8009b9e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009ba2:	f000 8086 	beq.w	8009cb2 <HAL_TIM_ConfigClockSource+0x176>
 8009ba6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009baa:	d87f      	bhi.n	8009cac <HAL_TIM_ConfigClockSource+0x170>
 8009bac:	2b70      	cmp	r3, #112	; 0x70
 8009bae:	d01a      	beq.n	8009be6 <HAL_TIM_ConfigClockSource+0xaa>
 8009bb0:	2b70      	cmp	r3, #112	; 0x70
 8009bb2:	d87b      	bhi.n	8009cac <HAL_TIM_ConfigClockSource+0x170>
 8009bb4:	2b60      	cmp	r3, #96	; 0x60
 8009bb6:	d050      	beq.n	8009c5a <HAL_TIM_ConfigClockSource+0x11e>
 8009bb8:	2b60      	cmp	r3, #96	; 0x60
 8009bba:	d877      	bhi.n	8009cac <HAL_TIM_ConfigClockSource+0x170>
 8009bbc:	2b50      	cmp	r3, #80	; 0x50
 8009bbe:	d03c      	beq.n	8009c3a <HAL_TIM_ConfigClockSource+0xfe>
 8009bc0:	2b50      	cmp	r3, #80	; 0x50
 8009bc2:	d873      	bhi.n	8009cac <HAL_TIM_ConfigClockSource+0x170>
 8009bc4:	2b40      	cmp	r3, #64	; 0x40
 8009bc6:	d058      	beq.n	8009c7a <HAL_TIM_ConfigClockSource+0x13e>
 8009bc8:	2b40      	cmp	r3, #64	; 0x40
 8009bca:	d86f      	bhi.n	8009cac <HAL_TIM_ConfigClockSource+0x170>
 8009bcc:	2b30      	cmp	r3, #48	; 0x30
 8009bce:	d064      	beq.n	8009c9a <HAL_TIM_ConfigClockSource+0x15e>
 8009bd0:	2b30      	cmp	r3, #48	; 0x30
 8009bd2:	d86b      	bhi.n	8009cac <HAL_TIM_ConfigClockSource+0x170>
 8009bd4:	2b20      	cmp	r3, #32
 8009bd6:	d060      	beq.n	8009c9a <HAL_TIM_ConfigClockSource+0x15e>
 8009bd8:	2b20      	cmp	r3, #32
 8009bda:	d867      	bhi.n	8009cac <HAL_TIM_ConfigClockSource+0x170>
 8009bdc:	2b00      	cmp	r3, #0
 8009bde:	d05c      	beq.n	8009c9a <HAL_TIM_ConfigClockSource+0x15e>
 8009be0:	2b10      	cmp	r3, #16
 8009be2:	d05a      	beq.n	8009c9a <HAL_TIM_ConfigClockSource+0x15e>
 8009be4:	e062      	b.n	8009cac <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009be6:	687b      	ldr	r3, [r7, #4]
 8009be8:	6818      	ldr	r0, [r3, #0]
 8009bea:	683b      	ldr	r3, [r7, #0]
 8009bec:	6899      	ldr	r1, [r3, #8]
 8009bee:	683b      	ldr	r3, [r7, #0]
 8009bf0:	685a      	ldr	r2, [r3, #4]
 8009bf2:	683b      	ldr	r3, [r7, #0]
 8009bf4:	68db      	ldr	r3, [r3, #12]
 8009bf6:	f000 feab 	bl	800a950 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8009bfa:	687b      	ldr	r3, [r7, #4]
 8009bfc:	681b      	ldr	r3, [r3, #0]
 8009bfe:	689b      	ldr	r3, [r3, #8]
 8009c00:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8009c02:	68bb      	ldr	r3, [r7, #8]
 8009c04:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8009c08:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8009c0a:	687b      	ldr	r3, [r7, #4]
 8009c0c:	681b      	ldr	r3, [r3, #0]
 8009c0e:	68ba      	ldr	r2, [r7, #8]
 8009c10:	609a      	str	r2, [r3, #8]
      break;
 8009c12:	e04f      	b.n	8009cb4 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009c14:	687b      	ldr	r3, [r7, #4]
 8009c16:	6818      	ldr	r0, [r3, #0]
 8009c18:	683b      	ldr	r3, [r7, #0]
 8009c1a:	6899      	ldr	r1, [r3, #8]
 8009c1c:	683b      	ldr	r3, [r7, #0]
 8009c1e:	685a      	ldr	r2, [r3, #4]
 8009c20:	683b      	ldr	r3, [r7, #0]
 8009c22:	68db      	ldr	r3, [r3, #12]
 8009c24:	f000 fe94 	bl	800a950 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8009c28:	687b      	ldr	r3, [r7, #4]
 8009c2a:	681b      	ldr	r3, [r3, #0]
 8009c2c:	689a      	ldr	r2, [r3, #8]
 8009c2e:	687b      	ldr	r3, [r7, #4]
 8009c30:	681b      	ldr	r3, [r3, #0]
 8009c32:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8009c36:	609a      	str	r2, [r3, #8]
      break;
 8009c38:	e03c      	b.n	8009cb4 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8009c3a:	687b      	ldr	r3, [r7, #4]
 8009c3c:	6818      	ldr	r0, [r3, #0]
 8009c3e:	683b      	ldr	r3, [r7, #0]
 8009c40:	6859      	ldr	r1, [r3, #4]
 8009c42:	683b      	ldr	r3, [r7, #0]
 8009c44:	68db      	ldr	r3, [r3, #12]
 8009c46:	461a      	mov	r2, r3
 8009c48:	f000 fd52 	bl	800a6f0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8009c4c:	687b      	ldr	r3, [r7, #4]
 8009c4e:	681b      	ldr	r3, [r3, #0]
 8009c50:	2150      	movs	r1, #80	; 0x50
 8009c52:	4618      	mov	r0, r3
 8009c54:	f000 fe61 	bl	800a91a <TIM_ITRx_SetConfig>
      break;
 8009c58:	e02c      	b.n	8009cb4 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8009c5a:	687b      	ldr	r3, [r7, #4]
 8009c5c:	6818      	ldr	r0, [r3, #0]
 8009c5e:	683b      	ldr	r3, [r7, #0]
 8009c60:	6859      	ldr	r1, [r3, #4]
 8009c62:	683b      	ldr	r3, [r7, #0]
 8009c64:	68db      	ldr	r3, [r3, #12]
 8009c66:	461a      	mov	r2, r3
 8009c68:	f000 fdae 	bl	800a7c8 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8009c6c:	687b      	ldr	r3, [r7, #4]
 8009c6e:	681b      	ldr	r3, [r3, #0]
 8009c70:	2160      	movs	r1, #96	; 0x60
 8009c72:	4618      	mov	r0, r3
 8009c74:	f000 fe51 	bl	800a91a <TIM_ITRx_SetConfig>
      break;
 8009c78:	e01c      	b.n	8009cb4 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8009c7a:	687b      	ldr	r3, [r7, #4]
 8009c7c:	6818      	ldr	r0, [r3, #0]
 8009c7e:	683b      	ldr	r3, [r7, #0]
 8009c80:	6859      	ldr	r1, [r3, #4]
 8009c82:	683b      	ldr	r3, [r7, #0]
 8009c84:	68db      	ldr	r3, [r3, #12]
 8009c86:	461a      	mov	r2, r3
 8009c88:	f000 fd32 	bl	800a6f0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8009c8c:	687b      	ldr	r3, [r7, #4]
 8009c8e:	681b      	ldr	r3, [r3, #0]
 8009c90:	2140      	movs	r1, #64	; 0x40
 8009c92:	4618      	mov	r0, r3
 8009c94:	f000 fe41 	bl	800a91a <TIM_ITRx_SetConfig>
      break;
 8009c98:	e00c      	b.n	8009cb4 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8009c9a:	687b      	ldr	r3, [r7, #4]
 8009c9c:	681a      	ldr	r2, [r3, #0]
 8009c9e:	683b      	ldr	r3, [r7, #0]
 8009ca0:	681b      	ldr	r3, [r3, #0]
 8009ca2:	4619      	mov	r1, r3
 8009ca4:	4610      	mov	r0, r2
 8009ca6:	f000 fe38 	bl	800a91a <TIM_ITRx_SetConfig>
      break;
 8009caa:	e003      	b.n	8009cb4 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8009cac:	2301      	movs	r3, #1
 8009cae:	73fb      	strb	r3, [r7, #15]
      break;
 8009cb0:	e000      	b.n	8009cb4 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8009cb2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8009cb4:	687b      	ldr	r3, [r7, #4]
 8009cb6:	2201      	movs	r2, #1
 8009cb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009cbc:	687b      	ldr	r3, [r7, #4]
 8009cbe:	2200      	movs	r2, #0
 8009cc0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8009cc4:	7bfb      	ldrb	r3, [r7, #15]
}
 8009cc6:	4618      	mov	r0, r3
 8009cc8:	3710      	adds	r7, #16
 8009cca:	46bd      	mov	sp, r7
 8009ccc:	bd80      	pop	{r7, pc}

08009cce <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8009cce:	b580      	push	{r7, lr}
 8009cd0:	b082      	sub	sp, #8
 8009cd2:	af00      	add	r7, sp, #0
 8009cd4:	6078      	str	r0, [r7, #4]
 8009cd6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8009cd8:	687b      	ldr	r3, [r7, #4]
 8009cda:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009cde:	2b01      	cmp	r3, #1
 8009ce0:	d101      	bne.n	8009ce6 <HAL_TIM_SlaveConfigSynchro+0x18>
 8009ce2:	2302      	movs	r3, #2
 8009ce4:	e031      	b.n	8009d4a <HAL_TIM_SlaveConfigSynchro+0x7c>
 8009ce6:	687b      	ldr	r3, [r7, #4]
 8009ce8:	2201      	movs	r2, #1
 8009cea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8009cee:	687b      	ldr	r3, [r7, #4]
 8009cf0:	2202      	movs	r2, #2
 8009cf2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8009cf6:	6839      	ldr	r1, [r7, #0]
 8009cf8:	6878      	ldr	r0, [r7, #4]
 8009cfa:	f000 fbfd 	bl	800a4f8 <TIM_SlaveTimer_SetConfig>
 8009cfe:	4603      	mov	r3, r0
 8009d00:	2b00      	cmp	r3, #0
 8009d02:	d009      	beq.n	8009d18 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 8009d04:	687b      	ldr	r3, [r7, #4]
 8009d06:	2201      	movs	r2, #1
 8009d08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 8009d0c:	687b      	ldr	r3, [r7, #4]
 8009d0e:	2200      	movs	r2, #0
 8009d10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 8009d14:	2301      	movs	r3, #1
 8009d16:	e018      	b.n	8009d4a <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8009d18:	687b      	ldr	r3, [r7, #4]
 8009d1a:	681b      	ldr	r3, [r3, #0]
 8009d1c:	68da      	ldr	r2, [r3, #12]
 8009d1e:	687b      	ldr	r3, [r7, #4]
 8009d20:	681b      	ldr	r3, [r3, #0]
 8009d22:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009d26:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8009d28:	687b      	ldr	r3, [r7, #4]
 8009d2a:	681b      	ldr	r3, [r3, #0]
 8009d2c:	68da      	ldr	r2, [r3, #12]
 8009d2e:	687b      	ldr	r3, [r7, #4]
 8009d30:	681b      	ldr	r3, [r3, #0]
 8009d32:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8009d36:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8009d38:	687b      	ldr	r3, [r7, #4]
 8009d3a:	2201      	movs	r2, #1
 8009d3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009d40:	687b      	ldr	r3, [r7, #4]
 8009d42:	2200      	movs	r2, #0
 8009d44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009d48:	2300      	movs	r3, #0
}
 8009d4a:	4618      	mov	r0, r3
 8009d4c:	3708      	adds	r7, #8
 8009d4e:	46bd      	mov	sp, r7
 8009d50:	bd80      	pop	{r7, pc}
	...

08009d54 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(const TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8009d54:	b480      	push	{r7}
 8009d56:	b085      	sub	sp, #20
 8009d58:	af00      	add	r7, sp, #0
 8009d5a:	6078      	str	r0, [r7, #4]
 8009d5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8009d5e:	2300      	movs	r3, #0
 8009d60:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 8009d62:	683b      	ldr	r3, [r7, #0]
 8009d64:	2b0c      	cmp	r3, #12
 8009d66:	d831      	bhi.n	8009dcc <HAL_TIM_ReadCapturedValue+0x78>
 8009d68:	a201      	add	r2, pc, #4	; (adr r2, 8009d70 <HAL_TIM_ReadCapturedValue+0x1c>)
 8009d6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009d6e:	bf00      	nop
 8009d70:	08009da5 	.word	0x08009da5
 8009d74:	08009dcd 	.word	0x08009dcd
 8009d78:	08009dcd 	.word	0x08009dcd
 8009d7c:	08009dcd 	.word	0x08009dcd
 8009d80:	08009daf 	.word	0x08009daf
 8009d84:	08009dcd 	.word	0x08009dcd
 8009d88:	08009dcd 	.word	0x08009dcd
 8009d8c:	08009dcd 	.word	0x08009dcd
 8009d90:	08009db9 	.word	0x08009db9
 8009d94:	08009dcd 	.word	0x08009dcd
 8009d98:	08009dcd 	.word	0x08009dcd
 8009d9c:	08009dcd 	.word	0x08009dcd
 8009da0:	08009dc3 	.word	0x08009dc3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8009da4:	687b      	ldr	r3, [r7, #4]
 8009da6:	681b      	ldr	r3, [r3, #0]
 8009da8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009daa:	60fb      	str	r3, [r7, #12]

      break;
 8009dac:	e00f      	b.n	8009dce <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8009dae:	687b      	ldr	r3, [r7, #4]
 8009db0:	681b      	ldr	r3, [r3, #0]
 8009db2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009db4:	60fb      	str	r3, [r7, #12]

      break;
 8009db6:	e00a      	b.n	8009dce <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8009db8:	687b      	ldr	r3, [r7, #4]
 8009dba:	681b      	ldr	r3, [r3, #0]
 8009dbc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009dbe:	60fb      	str	r3, [r7, #12]

      break;
 8009dc0:	e005      	b.n	8009dce <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8009dc2:	687b      	ldr	r3, [r7, #4]
 8009dc4:	681b      	ldr	r3, [r3, #0]
 8009dc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009dc8:	60fb      	str	r3, [r7, #12]

      break;
 8009dca:	e000      	b.n	8009dce <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8009dcc:	bf00      	nop
  }

  return tmpreg;
 8009dce:	68fb      	ldr	r3, [r7, #12]
}
 8009dd0:	4618      	mov	r0, r3
 8009dd2:	3714      	adds	r7, #20
 8009dd4:	46bd      	mov	sp, r7
 8009dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dda:	4770      	bx	lr

08009ddc <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009ddc:	b480      	push	{r7}
 8009dde:	b083      	sub	sp, #12
 8009de0:	af00      	add	r7, sp, #0
 8009de2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8009de4:	bf00      	nop
 8009de6:	370c      	adds	r7, #12
 8009de8:	46bd      	mov	sp, r7
 8009dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dee:	4770      	bx	lr

08009df0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009df0:	b480      	push	{r7}
 8009df2:	b083      	sub	sp, #12
 8009df4:	af00      	add	r7, sp, #0
 8009df6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8009df8:	bf00      	nop
 8009dfa:	370c      	adds	r7, #12
 8009dfc:	46bd      	mov	sp, r7
 8009dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e02:	4770      	bx	lr

08009e04 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8009e04:	b480      	push	{r7}
 8009e06:	b083      	sub	sp, #12
 8009e08:	af00      	add	r7, sp, #0
 8009e0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8009e0c:	bf00      	nop
 8009e0e:	370c      	adds	r7, #12
 8009e10:	46bd      	mov	sp, r7
 8009e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e16:	4770      	bx	lr

08009e18 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8009e18:	b480      	push	{r7}
 8009e1a:	b083      	sub	sp, #12
 8009e1c:	af00      	add	r7, sp, #0
 8009e1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8009e20:	bf00      	nop
 8009e22:	370c      	adds	r7, #12
 8009e24:	46bd      	mov	sp, r7
 8009e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e2a:	4770      	bx	lr

08009e2c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8009e2c:	b480      	push	{r7}
 8009e2e:	b085      	sub	sp, #20
 8009e30:	af00      	add	r7, sp, #0
 8009e32:	6078      	str	r0, [r7, #4]
 8009e34:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009e36:	687b      	ldr	r3, [r7, #4]
 8009e38:	681b      	ldr	r3, [r3, #0]
 8009e3a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009e3c:	687b      	ldr	r3, [r7, #4]
 8009e3e:	4a3c      	ldr	r2, [pc, #240]	; (8009f30 <TIM_Base_SetConfig+0x104>)
 8009e40:	4293      	cmp	r3, r2
 8009e42:	d00f      	beq.n	8009e64 <TIM_Base_SetConfig+0x38>
 8009e44:	687b      	ldr	r3, [r7, #4]
 8009e46:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009e4a:	d00b      	beq.n	8009e64 <TIM_Base_SetConfig+0x38>
 8009e4c:	687b      	ldr	r3, [r7, #4]
 8009e4e:	4a39      	ldr	r2, [pc, #228]	; (8009f34 <TIM_Base_SetConfig+0x108>)
 8009e50:	4293      	cmp	r3, r2
 8009e52:	d007      	beq.n	8009e64 <TIM_Base_SetConfig+0x38>
 8009e54:	687b      	ldr	r3, [r7, #4]
 8009e56:	4a38      	ldr	r2, [pc, #224]	; (8009f38 <TIM_Base_SetConfig+0x10c>)
 8009e58:	4293      	cmp	r3, r2
 8009e5a:	d003      	beq.n	8009e64 <TIM_Base_SetConfig+0x38>
 8009e5c:	687b      	ldr	r3, [r7, #4]
 8009e5e:	4a37      	ldr	r2, [pc, #220]	; (8009f3c <TIM_Base_SetConfig+0x110>)
 8009e60:	4293      	cmp	r3, r2
 8009e62:	d108      	bne.n	8009e76 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009e64:	68fb      	ldr	r3, [r7, #12]
 8009e66:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009e6a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009e6c:	683b      	ldr	r3, [r7, #0]
 8009e6e:	685b      	ldr	r3, [r3, #4]
 8009e70:	68fa      	ldr	r2, [r7, #12]
 8009e72:	4313      	orrs	r3, r2
 8009e74:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009e76:	687b      	ldr	r3, [r7, #4]
 8009e78:	4a2d      	ldr	r2, [pc, #180]	; (8009f30 <TIM_Base_SetConfig+0x104>)
 8009e7a:	4293      	cmp	r3, r2
 8009e7c:	d01b      	beq.n	8009eb6 <TIM_Base_SetConfig+0x8a>
 8009e7e:	687b      	ldr	r3, [r7, #4]
 8009e80:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009e84:	d017      	beq.n	8009eb6 <TIM_Base_SetConfig+0x8a>
 8009e86:	687b      	ldr	r3, [r7, #4]
 8009e88:	4a2a      	ldr	r2, [pc, #168]	; (8009f34 <TIM_Base_SetConfig+0x108>)
 8009e8a:	4293      	cmp	r3, r2
 8009e8c:	d013      	beq.n	8009eb6 <TIM_Base_SetConfig+0x8a>
 8009e8e:	687b      	ldr	r3, [r7, #4]
 8009e90:	4a29      	ldr	r2, [pc, #164]	; (8009f38 <TIM_Base_SetConfig+0x10c>)
 8009e92:	4293      	cmp	r3, r2
 8009e94:	d00f      	beq.n	8009eb6 <TIM_Base_SetConfig+0x8a>
 8009e96:	687b      	ldr	r3, [r7, #4]
 8009e98:	4a28      	ldr	r2, [pc, #160]	; (8009f3c <TIM_Base_SetConfig+0x110>)
 8009e9a:	4293      	cmp	r3, r2
 8009e9c:	d00b      	beq.n	8009eb6 <TIM_Base_SetConfig+0x8a>
 8009e9e:	687b      	ldr	r3, [r7, #4]
 8009ea0:	4a27      	ldr	r2, [pc, #156]	; (8009f40 <TIM_Base_SetConfig+0x114>)
 8009ea2:	4293      	cmp	r3, r2
 8009ea4:	d007      	beq.n	8009eb6 <TIM_Base_SetConfig+0x8a>
 8009ea6:	687b      	ldr	r3, [r7, #4]
 8009ea8:	4a26      	ldr	r2, [pc, #152]	; (8009f44 <TIM_Base_SetConfig+0x118>)
 8009eaa:	4293      	cmp	r3, r2
 8009eac:	d003      	beq.n	8009eb6 <TIM_Base_SetConfig+0x8a>
 8009eae:	687b      	ldr	r3, [r7, #4]
 8009eb0:	4a25      	ldr	r2, [pc, #148]	; (8009f48 <TIM_Base_SetConfig+0x11c>)
 8009eb2:	4293      	cmp	r3, r2
 8009eb4:	d108      	bne.n	8009ec8 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8009eb6:	68fb      	ldr	r3, [r7, #12]
 8009eb8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009ebc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009ebe:	683b      	ldr	r3, [r7, #0]
 8009ec0:	68db      	ldr	r3, [r3, #12]
 8009ec2:	68fa      	ldr	r2, [r7, #12]
 8009ec4:	4313      	orrs	r3, r2
 8009ec6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009ec8:	68fb      	ldr	r3, [r7, #12]
 8009eca:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8009ece:	683b      	ldr	r3, [r7, #0]
 8009ed0:	695b      	ldr	r3, [r3, #20]
 8009ed2:	4313      	orrs	r3, r2
 8009ed4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8009ed6:	687b      	ldr	r3, [r7, #4]
 8009ed8:	68fa      	ldr	r2, [r7, #12]
 8009eda:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009edc:	683b      	ldr	r3, [r7, #0]
 8009ede:	689a      	ldr	r2, [r3, #8]
 8009ee0:	687b      	ldr	r3, [r7, #4]
 8009ee2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009ee4:	683b      	ldr	r3, [r7, #0]
 8009ee6:	681a      	ldr	r2, [r3, #0]
 8009ee8:	687b      	ldr	r3, [r7, #4]
 8009eea:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009eec:	687b      	ldr	r3, [r7, #4]
 8009eee:	4a10      	ldr	r2, [pc, #64]	; (8009f30 <TIM_Base_SetConfig+0x104>)
 8009ef0:	4293      	cmp	r3, r2
 8009ef2:	d00f      	beq.n	8009f14 <TIM_Base_SetConfig+0xe8>
 8009ef4:	687b      	ldr	r3, [r7, #4]
 8009ef6:	4a11      	ldr	r2, [pc, #68]	; (8009f3c <TIM_Base_SetConfig+0x110>)
 8009ef8:	4293      	cmp	r3, r2
 8009efa:	d00b      	beq.n	8009f14 <TIM_Base_SetConfig+0xe8>
 8009efc:	687b      	ldr	r3, [r7, #4]
 8009efe:	4a10      	ldr	r2, [pc, #64]	; (8009f40 <TIM_Base_SetConfig+0x114>)
 8009f00:	4293      	cmp	r3, r2
 8009f02:	d007      	beq.n	8009f14 <TIM_Base_SetConfig+0xe8>
 8009f04:	687b      	ldr	r3, [r7, #4]
 8009f06:	4a0f      	ldr	r2, [pc, #60]	; (8009f44 <TIM_Base_SetConfig+0x118>)
 8009f08:	4293      	cmp	r3, r2
 8009f0a:	d003      	beq.n	8009f14 <TIM_Base_SetConfig+0xe8>
 8009f0c:	687b      	ldr	r3, [r7, #4]
 8009f0e:	4a0e      	ldr	r2, [pc, #56]	; (8009f48 <TIM_Base_SetConfig+0x11c>)
 8009f10:	4293      	cmp	r3, r2
 8009f12:	d103      	bne.n	8009f1c <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009f14:	683b      	ldr	r3, [r7, #0]
 8009f16:	691a      	ldr	r2, [r3, #16]
 8009f18:	687b      	ldr	r3, [r7, #4]
 8009f1a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009f1c:	687b      	ldr	r3, [r7, #4]
 8009f1e:	2201      	movs	r2, #1
 8009f20:	615a      	str	r2, [r3, #20]
}
 8009f22:	bf00      	nop
 8009f24:	3714      	adds	r7, #20
 8009f26:	46bd      	mov	sp, r7
 8009f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f2c:	4770      	bx	lr
 8009f2e:	bf00      	nop
 8009f30:	40012c00 	.word	0x40012c00
 8009f34:	40000400 	.word	0x40000400
 8009f38:	40000800 	.word	0x40000800
 8009f3c:	40013400 	.word	0x40013400
 8009f40:	40014000 	.word	0x40014000
 8009f44:	40014400 	.word	0x40014400
 8009f48:	40014800 	.word	0x40014800

08009f4c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009f4c:	b480      	push	{r7}
 8009f4e:	b087      	sub	sp, #28
 8009f50:	af00      	add	r7, sp, #0
 8009f52:	6078      	str	r0, [r7, #4]
 8009f54:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009f56:	687b      	ldr	r3, [r7, #4]
 8009f58:	6a1b      	ldr	r3, [r3, #32]
 8009f5a:	f023 0201 	bic.w	r2, r3, #1
 8009f5e:	687b      	ldr	r3, [r7, #4]
 8009f60:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009f62:	687b      	ldr	r3, [r7, #4]
 8009f64:	6a1b      	ldr	r3, [r3, #32]
 8009f66:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009f68:	687b      	ldr	r3, [r7, #4]
 8009f6a:	685b      	ldr	r3, [r3, #4]
 8009f6c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009f6e:	687b      	ldr	r3, [r7, #4]
 8009f70:	699b      	ldr	r3, [r3, #24]
 8009f72:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8009f74:	68fb      	ldr	r3, [r7, #12]
 8009f76:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009f7a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009f7e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8009f80:	68fb      	ldr	r3, [r7, #12]
 8009f82:	f023 0303 	bic.w	r3, r3, #3
 8009f86:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009f88:	683b      	ldr	r3, [r7, #0]
 8009f8a:	681b      	ldr	r3, [r3, #0]
 8009f8c:	68fa      	ldr	r2, [r7, #12]
 8009f8e:	4313      	orrs	r3, r2
 8009f90:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8009f92:	697b      	ldr	r3, [r7, #20]
 8009f94:	f023 0302 	bic.w	r3, r3, #2
 8009f98:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8009f9a:	683b      	ldr	r3, [r7, #0]
 8009f9c:	689b      	ldr	r3, [r3, #8]
 8009f9e:	697a      	ldr	r2, [r7, #20]
 8009fa0:	4313      	orrs	r3, r2
 8009fa2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8009fa4:	687b      	ldr	r3, [r7, #4]
 8009fa6:	4a2c      	ldr	r2, [pc, #176]	; (800a058 <TIM_OC1_SetConfig+0x10c>)
 8009fa8:	4293      	cmp	r3, r2
 8009faa:	d00f      	beq.n	8009fcc <TIM_OC1_SetConfig+0x80>
 8009fac:	687b      	ldr	r3, [r7, #4]
 8009fae:	4a2b      	ldr	r2, [pc, #172]	; (800a05c <TIM_OC1_SetConfig+0x110>)
 8009fb0:	4293      	cmp	r3, r2
 8009fb2:	d00b      	beq.n	8009fcc <TIM_OC1_SetConfig+0x80>
 8009fb4:	687b      	ldr	r3, [r7, #4]
 8009fb6:	4a2a      	ldr	r2, [pc, #168]	; (800a060 <TIM_OC1_SetConfig+0x114>)
 8009fb8:	4293      	cmp	r3, r2
 8009fba:	d007      	beq.n	8009fcc <TIM_OC1_SetConfig+0x80>
 8009fbc:	687b      	ldr	r3, [r7, #4]
 8009fbe:	4a29      	ldr	r2, [pc, #164]	; (800a064 <TIM_OC1_SetConfig+0x118>)
 8009fc0:	4293      	cmp	r3, r2
 8009fc2:	d003      	beq.n	8009fcc <TIM_OC1_SetConfig+0x80>
 8009fc4:	687b      	ldr	r3, [r7, #4]
 8009fc6:	4a28      	ldr	r2, [pc, #160]	; (800a068 <TIM_OC1_SetConfig+0x11c>)
 8009fc8:	4293      	cmp	r3, r2
 8009fca:	d10c      	bne.n	8009fe6 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8009fcc:	697b      	ldr	r3, [r7, #20]
 8009fce:	f023 0308 	bic.w	r3, r3, #8
 8009fd2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8009fd4:	683b      	ldr	r3, [r7, #0]
 8009fd6:	68db      	ldr	r3, [r3, #12]
 8009fd8:	697a      	ldr	r2, [r7, #20]
 8009fda:	4313      	orrs	r3, r2
 8009fdc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8009fde:	697b      	ldr	r3, [r7, #20]
 8009fe0:	f023 0304 	bic.w	r3, r3, #4
 8009fe4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009fe6:	687b      	ldr	r3, [r7, #4]
 8009fe8:	4a1b      	ldr	r2, [pc, #108]	; (800a058 <TIM_OC1_SetConfig+0x10c>)
 8009fea:	4293      	cmp	r3, r2
 8009fec:	d00f      	beq.n	800a00e <TIM_OC1_SetConfig+0xc2>
 8009fee:	687b      	ldr	r3, [r7, #4]
 8009ff0:	4a1a      	ldr	r2, [pc, #104]	; (800a05c <TIM_OC1_SetConfig+0x110>)
 8009ff2:	4293      	cmp	r3, r2
 8009ff4:	d00b      	beq.n	800a00e <TIM_OC1_SetConfig+0xc2>
 8009ff6:	687b      	ldr	r3, [r7, #4]
 8009ff8:	4a19      	ldr	r2, [pc, #100]	; (800a060 <TIM_OC1_SetConfig+0x114>)
 8009ffa:	4293      	cmp	r3, r2
 8009ffc:	d007      	beq.n	800a00e <TIM_OC1_SetConfig+0xc2>
 8009ffe:	687b      	ldr	r3, [r7, #4]
 800a000:	4a18      	ldr	r2, [pc, #96]	; (800a064 <TIM_OC1_SetConfig+0x118>)
 800a002:	4293      	cmp	r3, r2
 800a004:	d003      	beq.n	800a00e <TIM_OC1_SetConfig+0xc2>
 800a006:	687b      	ldr	r3, [r7, #4]
 800a008:	4a17      	ldr	r2, [pc, #92]	; (800a068 <TIM_OC1_SetConfig+0x11c>)
 800a00a:	4293      	cmp	r3, r2
 800a00c:	d111      	bne.n	800a032 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800a00e:	693b      	ldr	r3, [r7, #16]
 800a010:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a014:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800a016:	693b      	ldr	r3, [r7, #16]
 800a018:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800a01c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800a01e:	683b      	ldr	r3, [r7, #0]
 800a020:	695b      	ldr	r3, [r3, #20]
 800a022:	693a      	ldr	r2, [r7, #16]
 800a024:	4313      	orrs	r3, r2
 800a026:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800a028:	683b      	ldr	r3, [r7, #0]
 800a02a:	699b      	ldr	r3, [r3, #24]
 800a02c:	693a      	ldr	r2, [r7, #16]
 800a02e:	4313      	orrs	r3, r2
 800a030:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a032:	687b      	ldr	r3, [r7, #4]
 800a034:	693a      	ldr	r2, [r7, #16]
 800a036:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a038:	687b      	ldr	r3, [r7, #4]
 800a03a:	68fa      	ldr	r2, [r7, #12]
 800a03c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800a03e:	683b      	ldr	r3, [r7, #0]
 800a040:	685a      	ldr	r2, [r3, #4]
 800a042:	687b      	ldr	r3, [r7, #4]
 800a044:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a046:	687b      	ldr	r3, [r7, #4]
 800a048:	697a      	ldr	r2, [r7, #20]
 800a04a:	621a      	str	r2, [r3, #32]
}
 800a04c:	bf00      	nop
 800a04e:	371c      	adds	r7, #28
 800a050:	46bd      	mov	sp, r7
 800a052:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a056:	4770      	bx	lr
 800a058:	40012c00 	.word	0x40012c00
 800a05c:	40013400 	.word	0x40013400
 800a060:	40014000 	.word	0x40014000
 800a064:	40014400 	.word	0x40014400
 800a068:	40014800 	.word	0x40014800

0800a06c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800a06c:	b480      	push	{r7}
 800a06e:	b087      	sub	sp, #28
 800a070:	af00      	add	r7, sp, #0
 800a072:	6078      	str	r0, [r7, #4]
 800a074:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a076:	687b      	ldr	r3, [r7, #4]
 800a078:	6a1b      	ldr	r3, [r3, #32]
 800a07a:	f023 0210 	bic.w	r2, r3, #16
 800a07e:	687b      	ldr	r3, [r7, #4]
 800a080:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a082:	687b      	ldr	r3, [r7, #4]
 800a084:	6a1b      	ldr	r3, [r3, #32]
 800a086:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a088:	687b      	ldr	r3, [r7, #4]
 800a08a:	685b      	ldr	r3, [r3, #4]
 800a08c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a08e:	687b      	ldr	r3, [r7, #4]
 800a090:	699b      	ldr	r3, [r3, #24]
 800a092:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800a094:	68fb      	ldr	r3, [r7, #12]
 800a096:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800a09a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a09e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800a0a0:	68fb      	ldr	r3, [r7, #12]
 800a0a2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a0a6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a0a8:	683b      	ldr	r3, [r7, #0]
 800a0aa:	681b      	ldr	r3, [r3, #0]
 800a0ac:	021b      	lsls	r3, r3, #8
 800a0ae:	68fa      	ldr	r2, [r7, #12]
 800a0b0:	4313      	orrs	r3, r2
 800a0b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800a0b4:	697b      	ldr	r3, [r7, #20]
 800a0b6:	f023 0320 	bic.w	r3, r3, #32
 800a0ba:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800a0bc:	683b      	ldr	r3, [r7, #0]
 800a0be:	689b      	ldr	r3, [r3, #8]
 800a0c0:	011b      	lsls	r3, r3, #4
 800a0c2:	697a      	ldr	r2, [r7, #20]
 800a0c4:	4313      	orrs	r3, r2
 800a0c6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800a0c8:	687b      	ldr	r3, [r7, #4]
 800a0ca:	4a28      	ldr	r2, [pc, #160]	; (800a16c <TIM_OC2_SetConfig+0x100>)
 800a0cc:	4293      	cmp	r3, r2
 800a0ce:	d003      	beq.n	800a0d8 <TIM_OC2_SetConfig+0x6c>
 800a0d0:	687b      	ldr	r3, [r7, #4]
 800a0d2:	4a27      	ldr	r2, [pc, #156]	; (800a170 <TIM_OC2_SetConfig+0x104>)
 800a0d4:	4293      	cmp	r3, r2
 800a0d6:	d10d      	bne.n	800a0f4 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800a0d8:	697b      	ldr	r3, [r7, #20]
 800a0da:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a0de:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800a0e0:	683b      	ldr	r3, [r7, #0]
 800a0e2:	68db      	ldr	r3, [r3, #12]
 800a0e4:	011b      	lsls	r3, r3, #4
 800a0e6:	697a      	ldr	r2, [r7, #20]
 800a0e8:	4313      	orrs	r3, r2
 800a0ea:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800a0ec:	697b      	ldr	r3, [r7, #20]
 800a0ee:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a0f2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a0f4:	687b      	ldr	r3, [r7, #4]
 800a0f6:	4a1d      	ldr	r2, [pc, #116]	; (800a16c <TIM_OC2_SetConfig+0x100>)
 800a0f8:	4293      	cmp	r3, r2
 800a0fa:	d00f      	beq.n	800a11c <TIM_OC2_SetConfig+0xb0>
 800a0fc:	687b      	ldr	r3, [r7, #4]
 800a0fe:	4a1c      	ldr	r2, [pc, #112]	; (800a170 <TIM_OC2_SetConfig+0x104>)
 800a100:	4293      	cmp	r3, r2
 800a102:	d00b      	beq.n	800a11c <TIM_OC2_SetConfig+0xb0>
 800a104:	687b      	ldr	r3, [r7, #4]
 800a106:	4a1b      	ldr	r2, [pc, #108]	; (800a174 <TIM_OC2_SetConfig+0x108>)
 800a108:	4293      	cmp	r3, r2
 800a10a:	d007      	beq.n	800a11c <TIM_OC2_SetConfig+0xb0>
 800a10c:	687b      	ldr	r3, [r7, #4]
 800a10e:	4a1a      	ldr	r2, [pc, #104]	; (800a178 <TIM_OC2_SetConfig+0x10c>)
 800a110:	4293      	cmp	r3, r2
 800a112:	d003      	beq.n	800a11c <TIM_OC2_SetConfig+0xb0>
 800a114:	687b      	ldr	r3, [r7, #4]
 800a116:	4a19      	ldr	r2, [pc, #100]	; (800a17c <TIM_OC2_SetConfig+0x110>)
 800a118:	4293      	cmp	r3, r2
 800a11a:	d113      	bne.n	800a144 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800a11c:	693b      	ldr	r3, [r7, #16]
 800a11e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800a122:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800a124:	693b      	ldr	r3, [r7, #16]
 800a126:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800a12a:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800a12c:	683b      	ldr	r3, [r7, #0]
 800a12e:	695b      	ldr	r3, [r3, #20]
 800a130:	009b      	lsls	r3, r3, #2
 800a132:	693a      	ldr	r2, [r7, #16]
 800a134:	4313      	orrs	r3, r2
 800a136:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800a138:	683b      	ldr	r3, [r7, #0]
 800a13a:	699b      	ldr	r3, [r3, #24]
 800a13c:	009b      	lsls	r3, r3, #2
 800a13e:	693a      	ldr	r2, [r7, #16]
 800a140:	4313      	orrs	r3, r2
 800a142:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a144:	687b      	ldr	r3, [r7, #4]
 800a146:	693a      	ldr	r2, [r7, #16]
 800a148:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a14a:	687b      	ldr	r3, [r7, #4]
 800a14c:	68fa      	ldr	r2, [r7, #12]
 800a14e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800a150:	683b      	ldr	r3, [r7, #0]
 800a152:	685a      	ldr	r2, [r3, #4]
 800a154:	687b      	ldr	r3, [r7, #4]
 800a156:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a158:	687b      	ldr	r3, [r7, #4]
 800a15a:	697a      	ldr	r2, [r7, #20]
 800a15c:	621a      	str	r2, [r3, #32]
}
 800a15e:	bf00      	nop
 800a160:	371c      	adds	r7, #28
 800a162:	46bd      	mov	sp, r7
 800a164:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a168:	4770      	bx	lr
 800a16a:	bf00      	nop
 800a16c:	40012c00 	.word	0x40012c00
 800a170:	40013400 	.word	0x40013400
 800a174:	40014000 	.word	0x40014000
 800a178:	40014400 	.word	0x40014400
 800a17c:	40014800 	.word	0x40014800

0800a180 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800a180:	b480      	push	{r7}
 800a182:	b087      	sub	sp, #28
 800a184:	af00      	add	r7, sp, #0
 800a186:	6078      	str	r0, [r7, #4]
 800a188:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800a18a:	687b      	ldr	r3, [r7, #4]
 800a18c:	6a1b      	ldr	r3, [r3, #32]
 800a18e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800a192:	687b      	ldr	r3, [r7, #4]
 800a194:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a196:	687b      	ldr	r3, [r7, #4]
 800a198:	6a1b      	ldr	r3, [r3, #32]
 800a19a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a19c:	687b      	ldr	r3, [r7, #4]
 800a19e:	685b      	ldr	r3, [r3, #4]
 800a1a0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a1a2:	687b      	ldr	r3, [r7, #4]
 800a1a4:	69db      	ldr	r3, [r3, #28]
 800a1a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800a1a8:	68fb      	ldr	r3, [r7, #12]
 800a1aa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a1ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a1b2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800a1b4:	68fb      	ldr	r3, [r7, #12]
 800a1b6:	f023 0303 	bic.w	r3, r3, #3
 800a1ba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a1bc:	683b      	ldr	r3, [r7, #0]
 800a1be:	681b      	ldr	r3, [r3, #0]
 800a1c0:	68fa      	ldr	r2, [r7, #12]
 800a1c2:	4313      	orrs	r3, r2
 800a1c4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800a1c6:	697b      	ldr	r3, [r7, #20]
 800a1c8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800a1cc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800a1ce:	683b      	ldr	r3, [r7, #0]
 800a1d0:	689b      	ldr	r3, [r3, #8]
 800a1d2:	021b      	lsls	r3, r3, #8
 800a1d4:	697a      	ldr	r2, [r7, #20]
 800a1d6:	4313      	orrs	r3, r2
 800a1d8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800a1da:	687b      	ldr	r3, [r7, #4]
 800a1dc:	4a27      	ldr	r2, [pc, #156]	; (800a27c <TIM_OC3_SetConfig+0xfc>)
 800a1de:	4293      	cmp	r3, r2
 800a1e0:	d003      	beq.n	800a1ea <TIM_OC3_SetConfig+0x6a>
 800a1e2:	687b      	ldr	r3, [r7, #4]
 800a1e4:	4a26      	ldr	r2, [pc, #152]	; (800a280 <TIM_OC3_SetConfig+0x100>)
 800a1e6:	4293      	cmp	r3, r2
 800a1e8:	d10d      	bne.n	800a206 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800a1ea:	697b      	ldr	r3, [r7, #20]
 800a1ec:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800a1f0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800a1f2:	683b      	ldr	r3, [r7, #0]
 800a1f4:	68db      	ldr	r3, [r3, #12]
 800a1f6:	021b      	lsls	r3, r3, #8
 800a1f8:	697a      	ldr	r2, [r7, #20]
 800a1fa:	4313      	orrs	r3, r2
 800a1fc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800a1fe:	697b      	ldr	r3, [r7, #20]
 800a200:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800a204:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a206:	687b      	ldr	r3, [r7, #4]
 800a208:	4a1c      	ldr	r2, [pc, #112]	; (800a27c <TIM_OC3_SetConfig+0xfc>)
 800a20a:	4293      	cmp	r3, r2
 800a20c:	d00f      	beq.n	800a22e <TIM_OC3_SetConfig+0xae>
 800a20e:	687b      	ldr	r3, [r7, #4]
 800a210:	4a1b      	ldr	r2, [pc, #108]	; (800a280 <TIM_OC3_SetConfig+0x100>)
 800a212:	4293      	cmp	r3, r2
 800a214:	d00b      	beq.n	800a22e <TIM_OC3_SetConfig+0xae>
 800a216:	687b      	ldr	r3, [r7, #4]
 800a218:	4a1a      	ldr	r2, [pc, #104]	; (800a284 <TIM_OC3_SetConfig+0x104>)
 800a21a:	4293      	cmp	r3, r2
 800a21c:	d007      	beq.n	800a22e <TIM_OC3_SetConfig+0xae>
 800a21e:	687b      	ldr	r3, [r7, #4]
 800a220:	4a19      	ldr	r2, [pc, #100]	; (800a288 <TIM_OC3_SetConfig+0x108>)
 800a222:	4293      	cmp	r3, r2
 800a224:	d003      	beq.n	800a22e <TIM_OC3_SetConfig+0xae>
 800a226:	687b      	ldr	r3, [r7, #4]
 800a228:	4a18      	ldr	r2, [pc, #96]	; (800a28c <TIM_OC3_SetConfig+0x10c>)
 800a22a:	4293      	cmp	r3, r2
 800a22c:	d113      	bne.n	800a256 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800a22e:	693b      	ldr	r3, [r7, #16]
 800a230:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a234:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800a236:	693b      	ldr	r3, [r7, #16]
 800a238:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800a23c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800a23e:	683b      	ldr	r3, [r7, #0]
 800a240:	695b      	ldr	r3, [r3, #20]
 800a242:	011b      	lsls	r3, r3, #4
 800a244:	693a      	ldr	r2, [r7, #16]
 800a246:	4313      	orrs	r3, r2
 800a248:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800a24a:	683b      	ldr	r3, [r7, #0]
 800a24c:	699b      	ldr	r3, [r3, #24]
 800a24e:	011b      	lsls	r3, r3, #4
 800a250:	693a      	ldr	r2, [r7, #16]
 800a252:	4313      	orrs	r3, r2
 800a254:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a256:	687b      	ldr	r3, [r7, #4]
 800a258:	693a      	ldr	r2, [r7, #16]
 800a25a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a25c:	687b      	ldr	r3, [r7, #4]
 800a25e:	68fa      	ldr	r2, [r7, #12]
 800a260:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800a262:	683b      	ldr	r3, [r7, #0]
 800a264:	685a      	ldr	r2, [r3, #4]
 800a266:	687b      	ldr	r3, [r7, #4]
 800a268:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a26a:	687b      	ldr	r3, [r7, #4]
 800a26c:	697a      	ldr	r2, [r7, #20]
 800a26e:	621a      	str	r2, [r3, #32]
}
 800a270:	bf00      	nop
 800a272:	371c      	adds	r7, #28
 800a274:	46bd      	mov	sp, r7
 800a276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a27a:	4770      	bx	lr
 800a27c:	40012c00 	.word	0x40012c00
 800a280:	40013400 	.word	0x40013400
 800a284:	40014000 	.word	0x40014000
 800a288:	40014400 	.word	0x40014400
 800a28c:	40014800 	.word	0x40014800

0800a290 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800a290:	b480      	push	{r7}
 800a292:	b087      	sub	sp, #28
 800a294:	af00      	add	r7, sp, #0
 800a296:	6078      	str	r0, [r7, #4]
 800a298:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800a29a:	687b      	ldr	r3, [r7, #4]
 800a29c:	6a1b      	ldr	r3, [r3, #32]
 800a29e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800a2a2:	687b      	ldr	r3, [r7, #4]
 800a2a4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a2a6:	687b      	ldr	r3, [r7, #4]
 800a2a8:	6a1b      	ldr	r3, [r3, #32]
 800a2aa:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a2ac:	687b      	ldr	r3, [r7, #4]
 800a2ae:	685b      	ldr	r3, [r3, #4]
 800a2b0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a2b2:	687b      	ldr	r3, [r7, #4]
 800a2b4:	69db      	ldr	r3, [r3, #28]
 800a2b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800a2b8:	68fb      	ldr	r3, [r7, #12]
 800a2ba:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800a2be:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a2c2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800a2c4:	68fb      	ldr	r3, [r7, #12]
 800a2c6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a2ca:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a2cc:	683b      	ldr	r3, [r7, #0]
 800a2ce:	681b      	ldr	r3, [r3, #0]
 800a2d0:	021b      	lsls	r3, r3, #8
 800a2d2:	68fa      	ldr	r2, [r7, #12]
 800a2d4:	4313      	orrs	r3, r2
 800a2d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800a2d8:	693b      	ldr	r3, [r7, #16]
 800a2da:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800a2de:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800a2e0:	683b      	ldr	r3, [r7, #0]
 800a2e2:	689b      	ldr	r3, [r3, #8]
 800a2e4:	031b      	lsls	r3, r3, #12
 800a2e6:	693a      	ldr	r2, [r7, #16]
 800a2e8:	4313      	orrs	r3, r2
 800a2ea:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a2ec:	687b      	ldr	r3, [r7, #4]
 800a2ee:	4a18      	ldr	r2, [pc, #96]	; (800a350 <TIM_OC4_SetConfig+0xc0>)
 800a2f0:	4293      	cmp	r3, r2
 800a2f2:	d00f      	beq.n	800a314 <TIM_OC4_SetConfig+0x84>
 800a2f4:	687b      	ldr	r3, [r7, #4]
 800a2f6:	4a17      	ldr	r2, [pc, #92]	; (800a354 <TIM_OC4_SetConfig+0xc4>)
 800a2f8:	4293      	cmp	r3, r2
 800a2fa:	d00b      	beq.n	800a314 <TIM_OC4_SetConfig+0x84>
 800a2fc:	687b      	ldr	r3, [r7, #4]
 800a2fe:	4a16      	ldr	r2, [pc, #88]	; (800a358 <TIM_OC4_SetConfig+0xc8>)
 800a300:	4293      	cmp	r3, r2
 800a302:	d007      	beq.n	800a314 <TIM_OC4_SetConfig+0x84>
 800a304:	687b      	ldr	r3, [r7, #4]
 800a306:	4a15      	ldr	r2, [pc, #84]	; (800a35c <TIM_OC4_SetConfig+0xcc>)
 800a308:	4293      	cmp	r3, r2
 800a30a:	d003      	beq.n	800a314 <TIM_OC4_SetConfig+0x84>
 800a30c:	687b      	ldr	r3, [r7, #4]
 800a30e:	4a14      	ldr	r2, [pc, #80]	; (800a360 <TIM_OC4_SetConfig+0xd0>)
 800a310:	4293      	cmp	r3, r2
 800a312:	d109      	bne.n	800a328 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800a314:	697b      	ldr	r3, [r7, #20]
 800a316:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a31a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800a31c:	683b      	ldr	r3, [r7, #0]
 800a31e:	695b      	ldr	r3, [r3, #20]
 800a320:	019b      	lsls	r3, r3, #6
 800a322:	697a      	ldr	r2, [r7, #20]
 800a324:	4313      	orrs	r3, r2
 800a326:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a328:	687b      	ldr	r3, [r7, #4]
 800a32a:	697a      	ldr	r2, [r7, #20]
 800a32c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a32e:	687b      	ldr	r3, [r7, #4]
 800a330:	68fa      	ldr	r2, [r7, #12]
 800a332:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800a334:	683b      	ldr	r3, [r7, #0]
 800a336:	685a      	ldr	r2, [r3, #4]
 800a338:	687b      	ldr	r3, [r7, #4]
 800a33a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a33c:	687b      	ldr	r3, [r7, #4]
 800a33e:	693a      	ldr	r2, [r7, #16]
 800a340:	621a      	str	r2, [r3, #32]
}
 800a342:	bf00      	nop
 800a344:	371c      	adds	r7, #28
 800a346:	46bd      	mov	sp, r7
 800a348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a34c:	4770      	bx	lr
 800a34e:	bf00      	nop
 800a350:	40012c00 	.word	0x40012c00
 800a354:	40013400 	.word	0x40013400
 800a358:	40014000 	.word	0x40014000
 800a35c:	40014400 	.word	0x40014400
 800a360:	40014800 	.word	0x40014800

0800a364 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800a364:	b480      	push	{r7}
 800a366:	b087      	sub	sp, #28
 800a368:	af00      	add	r7, sp, #0
 800a36a:	6078      	str	r0, [r7, #4]
 800a36c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800a36e:	687b      	ldr	r3, [r7, #4]
 800a370:	6a1b      	ldr	r3, [r3, #32]
 800a372:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800a376:	687b      	ldr	r3, [r7, #4]
 800a378:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a37a:	687b      	ldr	r3, [r7, #4]
 800a37c:	6a1b      	ldr	r3, [r3, #32]
 800a37e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a380:	687b      	ldr	r3, [r7, #4]
 800a382:	685b      	ldr	r3, [r3, #4]
 800a384:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800a386:	687b      	ldr	r3, [r7, #4]
 800a388:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a38a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800a38c:	68fb      	ldr	r3, [r7, #12]
 800a38e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a392:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a396:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a398:	683b      	ldr	r3, [r7, #0]
 800a39a:	681b      	ldr	r3, [r3, #0]
 800a39c:	68fa      	ldr	r2, [r7, #12]
 800a39e:	4313      	orrs	r3, r2
 800a3a0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800a3a2:	693b      	ldr	r3, [r7, #16]
 800a3a4:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800a3a8:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800a3aa:	683b      	ldr	r3, [r7, #0]
 800a3ac:	689b      	ldr	r3, [r3, #8]
 800a3ae:	041b      	lsls	r3, r3, #16
 800a3b0:	693a      	ldr	r2, [r7, #16]
 800a3b2:	4313      	orrs	r3, r2
 800a3b4:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a3b6:	687b      	ldr	r3, [r7, #4]
 800a3b8:	4a17      	ldr	r2, [pc, #92]	; (800a418 <TIM_OC5_SetConfig+0xb4>)
 800a3ba:	4293      	cmp	r3, r2
 800a3bc:	d00f      	beq.n	800a3de <TIM_OC5_SetConfig+0x7a>
 800a3be:	687b      	ldr	r3, [r7, #4]
 800a3c0:	4a16      	ldr	r2, [pc, #88]	; (800a41c <TIM_OC5_SetConfig+0xb8>)
 800a3c2:	4293      	cmp	r3, r2
 800a3c4:	d00b      	beq.n	800a3de <TIM_OC5_SetConfig+0x7a>
 800a3c6:	687b      	ldr	r3, [r7, #4]
 800a3c8:	4a15      	ldr	r2, [pc, #84]	; (800a420 <TIM_OC5_SetConfig+0xbc>)
 800a3ca:	4293      	cmp	r3, r2
 800a3cc:	d007      	beq.n	800a3de <TIM_OC5_SetConfig+0x7a>
 800a3ce:	687b      	ldr	r3, [r7, #4]
 800a3d0:	4a14      	ldr	r2, [pc, #80]	; (800a424 <TIM_OC5_SetConfig+0xc0>)
 800a3d2:	4293      	cmp	r3, r2
 800a3d4:	d003      	beq.n	800a3de <TIM_OC5_SetConfig+0x7a>
 800a3d6:	687b      	ldr	r3, [r7, #4]
 800a3d8:	4a13      	ldr	r2, [pc, #76]	; (800a428 <TIM_OC5_SetConfig+0xc4>)
 800a3da:	4293      	cmp	r3, r2
 800a3dc:	d109      	bne.n	800a3f2 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800a3de:	697b      	ldr	r3, [r7, #20]
 800a3e0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a3e4:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800a3e6:	683b      	ldr	r3, [r7, #0]
 800a3e8:	695b      	ldr	r3, [r3, #20]
 800a3ea:	021b      	lsls	r3, r3, #8
 800a3ec:	697a      	ldr	r2, [r7, #20]
 800a3ee:	4313      	orrs	r3, r2
 800a3f0:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a3f2:	687b      	ldr	r3, [r7, #4]
 800a3f4:	697a      	ldr	r2, [r7, #20]
 800a3f6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800a3f8:	687b      	ldr	r3, [r7, #4]
 800a3fa:	68fa      	ldr	r2, [r7, #12]
 800a3fc:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800a3fe:	683b      	ldr	r3, [r7, #0]
 800a400:	685a      	ldr	r2, [r3, #4]
 800a402:	687b      	ldr	r3, [r7, #4]
 800a404:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a406:	687b      	ldr	r3, [r7, #4]
 800a408:	693a      	ldr	r2, [r7, #16]
 800a40a:	621a      	str	r2, [r3, #32]
}
 800a40c:	bf00      	nop
 800a40e:	371c      	adds	r7, #28
 800a410:	46bd      	mov	sp, r7
 800a412:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a416:	4770      	bx	lr
 800a418:	40012c00 	.word	0x40012c00
 800a41c:	40013400 	.word	0x40013400
 800a420:	40014000 	.word	0x40014000
 800a424:	40014400 	.word	0x40014400
 800a428:	40014800 	.word	0x40014800

0800a42c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800a42c:	b480      	push	{r7}
 800a42e:	b087      	sub	sp, #28
 800a430:	af00      	add	r7, sp, #0
 800a432:	6078      	str	r0, [r7, #4]
 800a434:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800a436:	687b      	ldr	r3, [r7, #4]
 800a438:	6a1b      	ldr	r3, [r3, #32]
 800a43a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800a43e:	687b      	ldr	r3, [r7, #4]
 800a440:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a442:	687b      	ldr	r3, [r7, #4]
 800a444:	6a1b      	ldr	r3, [r3, #32]
 800a446:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a448:	687b      	ldr	r3, [r7, #4]
 800a44a:	685b      	ldr	r3, [r3, #4]
 800a44c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800a44e:	687b      	ldr	r3, [r7, #4]
 800a450:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a452:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800a454:	68fb      	ldr	r3, [r7, #12]
 800a456:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800a45a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a45e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a460:	683b      	ldr	r3, [r7, #0]
 800a462:	681b      	ldr	r3, [r3, #0]
 800a464:	021b      	lsls	r3, r3, #8
 800a466:	68fa      	ldr	r2, [r7, #12]
 800a468:	4313      	orrs	r3, r2
 800a46a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800a46c:	693b      	ldr	r3, [r7, #16]
 800a46e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800a472:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800a474:	683b      	ldr	r3, [r7, #0]
 800a476:	689b      	ldr	r3, [r3, #8]
 800a478:	051b      	lsls	r3, r3, #20
 800a47a:	693a      	ldr	r2, [r7, #16]
 800a47c:	4313      	orrs	r3, r2
 800a47e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a480:	687b      	ldr	r3, [r7, #4]
 800a482:	4a18      	ldr	r2, [pc, #96]	; (800a4e4 <TIM_OC6_SetConfig+0xb8>)
 800a484:	4293      	cmp	r3, r2
 800a486:	d00f      	beq.n	800a4a8 <TIM_OC6_SetConfig+0x7c>
 800a488:	687b      	ldr	r3, [r7, #4]
 800a48a:	4a17      	ldr	r2, [pc, #92]	; (800a4e8 <TIM_OC6_SetConfig+0xbc>)
 800a48c:	4293      	cmp	r3, r2
 800a48e:	d00b      	beq.n	800a4a8 <TIM_OC6_SetConfig+0x7c>
 800a490:	687b      	ldr	r3, [r7, #4]
 800a492:	4a16      	ldr	r2, [pc, #88]	; (800a4ec <TIM_OC6_SetConfig+0xc0>)
 800a494:	4293      	cmp	r3, r2
 800a496:	d007      	beq.n	800a4a8 <TIM_OC6_SetConfig+0x7c>
 800a498:	687b      	ldr	r3, [r7, #4]
 800a49a:	4a15      	ldr	r2, [pc, #84]	; (800a4f0 <TIM_OC6_SetConfig+0xc4>)
 800a49c:	4293      	cmp	r3, r2
 800a49e:	d003      	beq.n	800a4a8 <TIM_OC6_SetConfig+0x7c>
 800a4a0:	687b      	ldr	r3, [r7, #4]
 800a4a2:	4a14      	ldr	r2, [pc, #80]	; (800a4f4 <TIM_OC6_SetConfig+0xc8>)
 800a4a4:	4293      	cmp	r3, r2
 800a4a6:	d109      	bne.n	800a4bc <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800a4a8:	697b      	ldr	r3, [r7, #20]
 800a4aa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800a4ae:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800a4b0:	683b      	ldr	r3, [r7, #0]
 800a4b2:	695b      	ldr	r3, [r3, #20]
 800a4b4:	029b      	lsls	r3, r3, #10
 800a4b6:	697a      	ldr	r2, [r7, #20]
 800a4b8:	4313      	orrs	r3, r2
 800a4ba:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a4bc:	687b      	ldr	r3, [r7, #4]
 800a4be:	697a      	ldr	r2, [r7, #20]
 800a4c0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800a4c2:	687b      	ldr	r3, [r7, #4]
 800a4c4:	68fa      	ldr	r2, [r7, #12]
 800a4c6:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800a4c8:	683b      	ldr	r3, [r7, #0]
 800a4ca:	685a      	ldr	r2, [r3, #4]
 800a4cc:	687b      	ldr	r3, [r7, #4]
 800a4ce:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a4d0:	687b      	ldr	r3, [r7, #4]
 800a4d2:	693a      	ldr	r2, [r7, #16]
 800a4d4:	621a      	str	r2, [r3, #32]
}
 800a4d6:	bf00      	nop
 800a4d8:	371c      	adds	r7, #28
 800a4da:	46bd      	mov	sp, r7
 800a4dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4e0:	4770      	bx	lr
 800a4e2:	bf00      	nop
 800a4e4:	40012c00 	.word	0x40012c00
 800a4e8:	40013400 	.word	0x40013400
 800a4ec:	40014000 	.word	0x40014000
 800a4f0:	40014400 	.word	0x40014400
 800a4f4:	40014800 	.word	0x40014800

0800a4f8 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 800a4f8:	b580      	push	{r7, lr}
 800a4fa:	b086      	sub	sp, #24
 800a4fc:	af00      	add	r7, sp, #0
 800a4fe:	6078      	str	r0, [r7, #4]
 800a500:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800a502:	2300      	movs	r3, #0
 800a504:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a506:	687b      	ldr	r3, [r7, #4]
 800a508:	681b      	ldr	r3, [r3, #0]
 800a50a:	689b      	ldr	r3, [r3, #8]
 800a50c:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800a50e:	693b      	ldr	r3, [r7, #16]
 800a510:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a514:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 800a516:	683b      	ldr	r3, [r7, #0]
 800a518:	685b      	ldr	r3, [r3, #4]
 800a51a:	693a      	ldr	r2, [r7, #16]
 800a51c:	4313      	orrs	r3, r2
 800a51e:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 800a520:	693b      	ldr	r3, [r7, #16]
 800a522:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a526:	f023 0307 	bic.w	r3, r3, #7
 800a52a:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 800a52c:	683b      	ldr	r3, [r7, #0]
 800a52e:	681b      	ldr	r3, [r3, #0]
 800a530:	693a      	ldr	r2, [r7, #16]
 800a532:	4313      	orrs	r3, r2
 800a534:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800a536:	687b      	ldr	r3, [r7, #4]
 800a538:	681b      	ldr	r3, [r3, #0]
 800a53a:	693a      	ldr	r2, [r7, #16]
 800a53c:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 800a53e:	683b      	ldr	r3, [r7, #0]
 800a540:	685b      	ldr	r3, [r3, #4]
 800a542:	2b70      	cmp	r3, #112	; 0x70
 800a544:	d01a      	beq.n	800a57c <TIM_SlaveTimer_SetConfig+0x84>
 800a546:	2b70      	cmp	r3, #112	; 0x70
 800a548:	d860      	bhi.n	800a60c <TIM_SlaveTimer_SetConfig+0x114>
 800a54a:	2b60      	cmp	r3, #96	; 0x60
 800a54c:	d054      	beq.n	800a5f8 <TIM_SlaveTimer_SetConfig+0x100>
 800a54e:	2b60      	cmp	r3, #96	; 0x60
 800a550:	d85c      	bhi.n	800a60c <TIM_SlaveTimer_SetConfig+0x114>
 800a552:	2b50      	cmp	r3, #80	; 0x50
 800a554:	d046      	beq.n	800a5e4 <TIM_SlaveTimer_SetConfig+0xec>
 800a556:	2b50      	cmp	r3, #80	; 0x50
 800a558:	d858      	bhi.n	800a60c <TIM_SlaveTimer_SetConfig+0x114>
 800a55a:	2b40      	cmp	r3, #64	; 0x40
 800a55c:	d019      	beq.n	800a592 <TIM_SlaveTimer_SetConfig+0x9a>
 800a55e:	2b40      	cmp	r3, #64	; 0x40
 800a560:	d854      	bhi.n	800a60c <TIM_SlaveTimer_SetConfig+0x114>
 800a562:	2b30      	cmp	r3, #48	; 0x30
 800a564:	d055      	beq.n	800a612 <TIM_SlaveTimer_SetConfig+0x11a>
 800a566:	2b30      	cmp	r3, #48	; 0x30
 800a568:	d850      	bhi.n	800a60c <TIM_SlaveTimer_SetConfig+0x114>
 800a56a:	2b20      	cmp	r3, #32
 800a56c:	d051      	beq.n	800a612 <TIM_SlaveTimer_SetConfig+0x11a>
 800a56e:	2b20      	cmp	r3, #32
 800a570:	d84c      	bhi.n	800a60c <TIM_SlaveTimer_SetConfig+0x114>
 800a572:	2b00      	cmp	r3, #0
 800a574:	d04d      	beq.n	800a612 <TIM_SlaveTimer_SetConfig+0x11a>
 800a576:	2b10      	cmp	r3, #16
 800a578:	d04b      	beq.n	800a612 <TIM_SlaveTimer_SetConfig+0x11a>
 800a57a:	e047      	b.n	800a60c <TIM_SlaveTimer_SetConfig+0x114>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 800a57c:	687b      	ldr	r3, [r7, #4]
 800a57e:	6818      	ldr	r0, [r3, #0]
 800a580:	683b      	ldr	r3, [r7, #0]
 800a582:	68d9      	ldr	r1, [r3, #12]
 800a584:	683b      	ldr	r3, [r7, #0]
 800a586:	689a      	ldr	r2, [r3, #8]
 800a588:	683b      	ldr	r3, [r7, #0]
 800a58a:	691b      	ldr	r3, [r3, #16]
 800a58c:	f000 f9e0 	bl	800a950 <TIM_ETR_SetConfig>
                        sSlaveConfig->TriggerPrescaler,
                        sSlaveConfig->TriggerPolarity,
                        sSlaveConfig->TriggerFilter);
      break;
 800a590:	e040      	b.n	800a614 <TIM_SlaveTimer_SetConfig+0x11c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 800a592:	683b      	ldr	r3, [r7, #0]
 800a594:	681b      	ldr	r3, [r3, #0]
 800a596:	2b05      	cmp	r3, #5
 800a598:	d101      	bne.n	800a59e <TIM_SlaveTimer_SetConfig+0xa6>
      {
        return HAL_ERROR;
 800a59a:	2301      	movs	r3, #1
 800a59c:	e03b      	b.n	800a616 <TIM_SlaveTimer_SetConfig+0x11e>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 800a59e:	687b      	ldr	r3, [r7, #4]
 800a5a0:	681b      	ldr	r3, [r3, #0]
 800a5a2:	6a1b      	ldr	r3, [r3, #32]
 800a5a4:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 800a5a6:	687b      	ldr	r3, [r7, #4]
 800a5a8:	681b      	ldr	r3, [r3, #0]
 800a5aa:	6a1a      	ldr	r2, [r3, #32]
 800a5ac:	687b      	ldr	r3, [r7, #4]
 800a5ae:	681b      	ldr	r3, [r3, #0]
 800a5b0:	f022 0201 	bic.w	r2, r2, #1
 800a5b4:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 800a5b6:	687b      	ldr	r3, [r7, #4]
 800a5b8:	681b      	ldr	r3, [r3, #0]
 800a5ba:	699b      	ldr	r3, [r3, #24]
 800a5bc:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800a5be:	68bb      	ldr	r3, [r7, #8]
 800a5c0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800a5c4:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 800a5c6:	683b      	ldr	r3, [r7, #0]
 800a5c8:	691b      	ldr	r3, [r3, #16]
 800a5ca:	011b      	lsls	r3, r3, #4
 800a5cc:	68ba      	ldr	r2, [r7, #8]
 800a5ce:	4313      	orrs	r3, r2
 800a5d0:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 800a5d2:	687b      	ldr	r3, [r7, #4]
 800a5d4:	681b      	ldr	r3, [r3, #0]
 800a5d6:	68ba      	ldr	r2, [r7, #8]
 800a5d8:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 800a5da:	687b      	ldr	r3, [r7, #4]
 800a5dc:	681b      	ldr	r3, [r3, #0]
 800a5de:	68fa      	ldr	r2, [r7, #12]
 800a5e0:	621a      	str	r2, [r3, #32]
      break;
 800a5e2:	e017      	b.n	800a614 <TIM_SlaveTimer_SetConfig+0x11c>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 800a5e4:	687b      	ldr	r3, [r7, #4]
 800a5e6:	6818      	ldr	r0, [r3, #0]
 800a5e8:	683b      	ldr	r3, [r7, #0]
 800a5ea:	6899      	ldr	r1, [r3, #8]
 800a5ec:	683b      	ldr	r3, [r7, #0]
 800a5ee:	691b      	ldr	r3, [r3, #16]
 800a5f0:	461a      	mov	r2, r3
 800a5f2:	f000 f87d 	bl	800a6f0 <TIM_TI1_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 800a5f6:	e00d      	b.n	800a614 <TIM_SlaveTimer_SetConfig+0x11c>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 800a5f8:	687b      	ldr	r3, [r7, #4]
 800a5fa:	6818      	ldr	r0, [r3, #0]
 800a5fc:	683b      	ldr	r3, [r7, #0]
 800a5fe:	6899      	ldr	r1, [r3, #8]
 800a600:	683b      	ldr	r3, [r7, #0]
 800a602:	691b      	ldr	r3, [r3, #16]
 800a604:	461a      	mov	r2, r3
 800a606:	f000 f8df 	bl	800a7c8 <TIM_TI2_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 800a60a:	e003      	b.n	800a614 <TIM_SlaveTimer_SetConfig+0x11c>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 800a60c:	2301      	movs	r3, #1
 800a60e:	75fb      	strb	r3, [r7, #23]
      break;
 800a610:	e000      	b.n	800a614 <TIM_SlaveTimer_SetConfig+0x11c>
      break;
 800a612:	bf00      	nop
  }

  return status;
 800a614:	7dfb      	ldrb	r3, [r7, #23]
}
 800a616:	4618      	mov	r0, r3
 800a618:	3718      	adds	r7, #24
 800a61a:	46bd      	mov	sp, r7
 800a61c:	bd80      	pop	{r7, pc}
	...

0800a620 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 800a620:	b480      	push	{r7}
 800a622:	b087      	sub	sp, #28
 800a624:	af00      	add	r7, sp, #0
 800a626:	60f8      	str	r0, [r7, #12]
 800a628:	60b9      	str	r1, [r7, #8]
 800a62a:	607a      	str	r2, [r7, #4]
 800a62c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a62e:	68fb      	ldr	r3, [r7, #12]
 800a630:	6a1b      	ldr	r3, [r3, #32]
 800a632:	f023 0201 	bic.w	r2, r3, #1
 800a636:	68fb      	ldr	r3, [r7, #12]
 800a638:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a63a:	68fb      	ldr	r3, [r7, #12]
 800a63c:	699b      	ldr	r3, [r3, #24]
 800a63e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800a640:	68fb      	ldr	r3, [r7, #12]
 800a642:	6a1b      	ldr	r3, [r3, #32]
 800a644:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800a646:	68fb      	ldr	r3, [r7, #12]
 800a648:	4a24      	ldr	r2, [pc, #144]	; (800a6dc <TIM_TI1_SetConfig+0xbc>)
 800a64a:	4293      	cmp	r3, r2
 800a64c:	d013      	beq.n	800a676 <TIM_TI1_SetConfig+0x56>
 800a64e:	68fb      	ldr	r3, [r7, #12]
 800a650:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a654:	d00f      	beq.n	800a676 <TIM_TI1_SetConfig+0x56>
 800a656:	68fb      	ldr	r3, [r7, #12]
 800a658:	4a21      	ldr	r2, [pc, #132]	; (800a6e0 <TIM_TI1_SetConfig+0xc0>)
 800a65a:	4293      	cmp	r3, r2
 800a65c:	d00b      	beq.n	800a676 <TIM_TI1_SetConfig+0x56>
 800a65e:	68fb      	ldr	r3, [r7, #12]
 800a660:	4a20      	ldr	r2, [pc, #128]	; (800a6e4 <TIM_TI1_SetConfig+0xc4>)
 800a662:	4293      	cmp	r3, r2
 800a664:	d007      	beq.n	800a676 <TIM_TI1_SetConfig+0x56>
 800a666:	68fb      	ldr	r3, [r7, #12]
 800a668:	4a1f      	ldr	r2, [pc, #124]	; (800a6e8 <TIM_TI1_SetConfig+0xc8>)
 800a66a:	4293      	cmp	r3, r2
 800a66c:	d003      	beq.n	800a676 <TIM_TI1_SetConfig+0x56>
 800a66e:	68fb      	ldr	r3, [r7, #12]
 800a670:	4a1e      	ldr	r2, [pc, #120]	; (800a6ec <TIM_TI1_SetConfig+0xcc>)
 800a672:	4293      	cmp	r3, r2
 800a674:	d101      	bne.n	800a67a <TIM_TI1_SetConfig+0x5a>
 800a676:	2301      	movs	r3, #1
 800a678:	e000      	b.n	800a67c <TIM_TI1_SetConfig+0x5c>
 800a67a:	2300      	movs	r3, #0
 800a67c:	2b00      	cmp	r3, #0
 800a67e:	d008      	beq.n	800a692 <TIM_TI1_SetConfig+0x72>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 800a680:	697b      	ldr	r3, [r7, #20]
 800a682:	f023 0303 	bic.w	r3, r3, #3
 800a686:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 800a688:	697a      	ldr	r2, [r7, #20]
 800a68a:	687b      	ldr	r3, [r7, #4]
 800a68c:	4313      	orrs	r3, r2
 800a68e:	617b      	str	r3, [r7, #20]
 800a690:	e003      	b.n	800a69a <TIM_TI1_SetConfig+0x7a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800a692:	697b      	ldr	r3, [r7, #20]
 800a694:	f043 0301 	orr.w	r3, r3, #1
 800a698:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800a69a:	697b      	ldr	r3, [r7, #20]
 800a69c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800a6a0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800a6a2:	683b      	ldr	r3, [r7, #0]
 800a6a4:	011b      	lsls	r3, r3, #4
 800a6a6:	b2db      	uxtb	r3, r3
 800a6a8:	697a      	ldr	r2, [r7, #20]
 800a6aa:	4313      	orrs	r3, r2
 800a6ac:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800a6ae:	693b      	ldr	r3, [r7, #16]
 800a6b0:	f023 030a 	bic.w	r3, r3, #10
 800a6b4:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800a6b6:	68bb      	ldr	r3, [r7, #8]
 800a6b8:	f003 030a 	and.w	r3, r3, #10
 800a6bc:	693a      	ldr	r2, [r7, #16]
 800a6be:	4313      	orrs	r3, r2
 800a6c0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800a6c2:	68fb      	ldr	r3, [r7, #12]
 800a6c4:	697a      	ldr	r2, [r7, #20]
 800a6c6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a6c8:	68fb      	ldr	r3, [r7, #12]
 800a6ca:	693a      	ldr	r2, [r7, #16]
 800a6cc:	621a      	str	r2, [r3, #32]
}
 800a6ce:	bf00      	nop
 800a6d0:	371c      	adds	r7, #28
 800a6d2:	46bd      	mov	sp, r7
 800a6d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6d8:	4770      	bx	lr
 800a6da:	bf00      	nop
 800a6dc:	40012c00 	.word	0x40012c00
 800a6e0:	40000400 	.word	0x40000400
 800a6e4:	40000800 	.word	0x40000800
 800a6e8:	40013400 	.word	0x40013400
 800a6ec:	40014000 	.word	0x40014000

0800a6f0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a6f0:	b480      	push	{r7}
 800a6f2:	b087      	sub	sp, #28
 800a6f4:	af00      	add	r7, sp, #0
 800a6f6:	60f8      	str	r0, [r7, #12]
 800a6f8:	60b9      	str	r1, [r7, #8]
 800a6fa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800a6fc:	68fb      	ldr	r3, [r7, #12]
 800a6fe:	6a1b      	ldr	r3, [r3, #32]
 800a700:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a702:	68fb      	ldr	r3, [r7, #12]
 800a704:	6a1b      	ldr	r3, [r3, #32]
 800a706:	f023 0201 	bic.w	r2, r3, #1
 800a70a:	68fb      	ldr	r3, [r7, #12]
 800a70c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a70e:	68fb      	ldr	r3, [r7, #12]
 800a710:	699b      	ldr	r3, [r3, #24]
 800a712:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800a714:	693b      	ldr	r3, [r7, #16]
 800a716:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800a71a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800a71c:	687b      	ldr	r3, [r7, #4]
 800a71e:	011b      	lsls	r3, r3, #4
 800a720:	693a      	ldr	r2, [r7, #16]
 800a722:	4313      	orrs	r3, r2
 800a724:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800a726:	697b      	ldr	r3, [r7, #20]
 800a728:	f023 030a 	bic.w	r3, r3, #10
 800a72c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800a72e:	697a      	ldr	r2, [r7, #20]
 800a730:	68bb      	ldr	r3, [r7, #8]
 800a732:	4313      	orrs	r3, r2
 800a734:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800a736:	68fb      	ldr	r3, [r7, #12]
 800a738:	693a      	ldr	r2, [r7, #16]
 800a73a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a73c:	68fb      	ldr	r3, [r7, #12]
 800a73e:	697a      	ldr	r2, [r7, #20]
 800a740:	621a      	str	r2, [r3, #32]
}
 800a742:	bf00      	nop
 800a744:	371c      	adds	r7, #28
 800a746:	46bd      	mov	sp, r7
 800a748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a74c:	4770      	bx	lr

0800a74e <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800a74e:	b480      	push	{r7}
 800a750:	b087      	sub	sp, #28
 800a752:	af00      	add	r7, sp, #0
 800a754:	60f8      	str	r0, [r7, #12]
 800a756:	60b9      	str	r1, [r7, #8]
 800a758:	607a      	str	r2, [r7, #4]
 800a75a:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a75c:	68fb      	ldr	r3, [r7, #12]
 800a75e:	6a1b      	ldr	r3, [r3, #32]
 800a760:	f023 0210 	bic.w	r2, r3, #16
 800a764:	68fb      	ldr	r3, [r7, #12]
 800a766:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a768:	68fb      	ldr	r3, [r7, #12]
 800a76a:	699b      	ldr	r3, [r3, #24]
 800a76c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800a76e:	68fb      	ldr	r3, [r7, #12]
 800a770:	6a1b      	ldr	r3, [r3, #32]
 800a772:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 800a774:	697b      	ldr	r3, [r7, #20]
 800a776:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a77a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 800a77c:	687b      	ldr	r3, [r7, #4]
 800a77e:	021b      	lsls	r3, r3, #8
 800a780:	697a      	ldr	r2, [r7, #20]
 800a782:	4313      	orrs	r3, r2
 800a784:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800a786:	697b      	ldr	r3, [r7, #20]
 800a788:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800a78c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800a78e:	683b      	ldr	r3, [r7, #0]
 800a790:	031b      	lsls	r3, r3, #12
 800a792:	b29b      	uxth	r3, r3
 800a794:	697a      	ldr	r2, [r7, #20]
 800a796:	4313      	orrs	r3, r2
 800a798:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800a79a:	693b      	ldr	r3, [r7, #16]
 800a79c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800a7a0:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800a7a2:	68bb      	ldr	r3, [r7, #8]
 800a7a4:	011b      	lsls	r3, r3, #4
 800a7a6:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800a7aa:	693a      	ldr	r2, [r7, #16]
 800a7ac:	4313      	orrs	r3, r2
 800a7ae:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800a7b0:	68fb      	ldr	r3, [r7, #12]
 800a7b2:	697a      	ldr	r2, [r7, #20]
 800a7b4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a7b6:	68fb      	ldr	r3, [r7, #12]
 800a7b8:	693a      	ldr	r2, [r7, #16]
 800a7ba:	621a      	str	r2, [r3, #32]
}
 800a7bc:	bf00      	nop
 800a7be:	371c      	adds	r7, #28
 800a7c0:	46bd      	mov	sp, r7
 800a7c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7c6:	4770      	bx	lr

0800a7c8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a7c8:	b480      	push	{r7}
 800a7ca:	b087      	sub	sp, #28
 800a7cc:	af00      	add	r7, sp, #0
 800a7ce:	60f8      	str	r0, [r7, #12]
 800a7d0:	60b9      	str	r1, [r7, #8]
 800a7d2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a7d4:	68fb      	ldr	r3, [r7, #12]
 800a7d6:	6a1b      	ldr	r3, [r3, #32]
 800a7d8:	f023 0210 	bic.w	r2, r3, #16
 800a7dc:	68fb      	ldr	r3, [r7, #12]
 800a7de:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a7e0:	68fb      	ldr	r3, [r7, #12]
 800a7e2:	699b      	ldr	r3, [r3, #24]
 800a7e4:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800a7e6:	68fb      	ldr	r3, [r7, #12]
 800a7e8:	6a1b      	ldr	r3, [r3, #32]
 800a7ea:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800a7ec:	697b      	ldr	r3, [r7, #20]
 800a7ee:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800a7f2:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800a7f4:	687b      	ldr	r3, [r7, #4]
 800a7f6:	031b      	lsls	r3, r3, #12
 800a7f8:	697a      	ldr	r2, [r7, #20]
 800a7fa:	4313      	orrs	r3, r2
 800a7fc:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800a7fe:	693b      	ldr	r3, [r7, #16]
 800a800:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800a804:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800a806:	68bb      	ldr	r3, [r7, #8]
 800a808:	011b      	lsls	r3, r3, #4
 800a80a:	693a      	ldr	r2, [r7, #16]
 800a80c:	4313      	orrs	r3, r2
 800a80e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800a810:	68fb      	ldr	r3, [r7, #12]
 800a812:	697a      	ldr	r2, [r7, #20]
 800a814:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a816:	68fb      	ldr	r3, [r7, #12]
 800a818:	693a      	ldr	r2, [r7, #16]
 800a81a:	621a      	str	r2, [r3, #32]
}
 800a81c:	bf00      	nop
 800a81e:	371c      	adds	r7, #28
 800a820:	46bd      	mov	sp, r7
 800a822:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a826:	4770      	bx	lr

0800a828 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800a828:	b480      	push	{r7}
 800a82a:	b087      	sub	sp, #28
 800a82c:	af00      	add	r7, sp, #0
 800a82e:	60f8      	str	r0, [r7, #12]
 800a830:	60b9      	str	r1, [r7, #8]
 800a832:	607a      	str	r2, [r7, #4]
 800a834:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800a836:	68fb      	ldr	r3, [r7, #12]
 800a838:	6a1b      	ldr	r3, [r3, #32]
 800a83a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800a83e:	68fb      	ldr	r3, [r7, #12]
 800a840:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800a842:	68fb      	ldr	r3, [r7, #12]
 800a844:	69db      	ldr	r3, [r3, #28]
 800a846:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800a848:	68fb      	ldr	r3, [r7, #12]
 800a84a:	6a1b      	ldr	r3, [r3, #32]
 800a84c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800a84e:	697b      	ldr	r3, [r7, #20]
 800a850:	f023 0303 	bic.w	r3, r3, #3
 800a854:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 800a856:	697a      	ldr	r2, [r7, #20]
 800a858:	687b      	ldr	r3, [r7, #4]
 800a85a:	4313      	orrs	r3, r2
 800a85c:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800a85e:	697b      	ldr	r3, [r7, #20]
 800a860:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800a864:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800a866:	683b      	ldr	r3, [r7, #0]
 800a868:	011b      	lsls	r3, r3, #4
 800a86a:	b2db      	uxtb	r3, r3
 800a86c:	697a      	ldr	r2, [r7, #20]
 800a86e:	4313      	orrs	r3, r2
 800a870:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800a872:	693b      	ldr	r3, [r7, #16]
 800a874:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 800a878:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800a87a:	68bb      	ldr	r3, [r7, #8]
 800a87c:	021b      	lsls	r3, r3, #8
 800a87e:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 800a882:	693a      	ldr	r2, [r7, #16]
 800a884:	4313      	orrs	r3, r2
 800a886:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800a888:	68fb      	ldr	r3, [r7, #12]
 800a88a:	697a      	ldr	r2, [r7, #20]
 800a88c:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800a88e:	68fb      	ldr	r3, [r7, #12]
 800a890:	693a      	ldr	r2, [r7, #16]
 800a892:	621a      	str	r2, [r3, #32]
}
 800a894:	bf00      	nop
 800a896:	371c      	adds	r7, #28
 800a898:	46bd      	mov	sp, r7
 800a89a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a89e:	4770      	bx	lr

0800a8a0 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800a8a0:	b480      	push	{r7}
 800a8a2:	b087      	sub	sp, #28
 800a8a4:	af00      	add	r7, sp, #0
 800a8a6:	60f8      	str	r0, [r7, #12]
 800a8a8:	60b9      	str	r1, [r7, #8]
 800a8aa:	607a      	str	r2, [r7, #4]
 800a8ac:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800a8ae:	68fb      	ldr	r3, [r7, #12]
 800a8b0:	6a1b      	ldr	r3, [r3, #32]
 800a8b2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800a8b6:	68fb      	ldr	r3, [r7, #12]
 800a8b8:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800a8ba:	68fb      	ldr	r3, [r7, #12]
 800a8bc:	69db      	ldr	r3, [r3, #28]
 800a8be:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800a8c0:	68fb      	ldr	r3, [r7, #12]
 800a8c2:	6a1b      	ldr	r3, [r3, #32]
 800a8c4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800a8c6:	697b      	ldr	r3, [r7, #20]
 800a8c8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a8cc:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800a8ce:	687b      	ldr	r3, [r7, #4]
 800a8d0:	021b      	lsls	r3, r3, #8
 800a8d2:	697a      	ldr	r2, [r7, #20]
 800a8d4:	4313      	orrs	r3, r2
 800a8d6:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 800a8d8:	697b      	ldr	r3, [r7, #20]
 800a8da:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800a8de:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 800a8e0:	683b      	ldr	r3, [r7, #0]
 800a8e2:	031b      	lsls	r3, r3, #12
 800a8e4:	b29b      	uxth	r3, r3
 800a8e6:	697a      	ldr	r2, [r7, #20]
 800a8e8:	4313      	orrs	r3, r2
 800a8ea:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 800a8ec:	693b      	ldr	r3, [r7, #16]
 800a8ee:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 800a8f2:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 800a8f4:	68bb      	ldr	r3, [r7, #8]
 800a8f6:	031b      	lsls	r3, r3, #12
 800a8f8:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 800a8fc:	693a      	ldr	r2, [r7, #16]
 800a8fe:	4313      	orrs	r3, r2
 800a900:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800a902:	68fb      	ldr	r3, [r7, #12]
 800a904:	697a      	ldr	r2, [r7, #20]
 800a906:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 800a908:	68fb      	ldr	r3, [r7, #12]
 800a90a:	693a      	ldr	r2, [r7, #16]
 800a90c:	621a      	str	r2, [r3, #32]
}
 800a90e:	bf00      	nop
 800a910:	371c      	adds	r7, #28
 800a912:	46bd      	mov	sp, r7
 800a914:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a918:	4770      	bx	lr

0800a91a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800a91a:	b480      	push	{r7}
 800a91c:	b085      	sub	sp, #20
 800a91e:	af00      	add	r7, sp, #0
 800a920:	6078      	str	r0, [r7, #4]
 800a922:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800a924:	687b      	ldr	r3, [r7, #4]
 800a926:	689b      	ldr	r3, [r3, #8]
 800a928:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800a92a:	68fb      	ldr	r3, [r7, #12]
 800a92c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a930:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800a932:	683a      	ldr	r2, [r7, #0]
 800a934:	68fb      	ldr	r3, [r7, #12]
 800a936:	4313      	orrs	r3, r2
 800a938:	f043 0307 	orr.w	r3, r3, #7
 800a93c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a93e:	687b      	ldr	r3, [r7, #4]
 800a940:	68fa      	ldr	r2, [r7, #12]
 800a942:	609a      	str	r2, [r3, #8]
}
 800a944:	bf00      	nop
 800a946:	3714      	adds	r7, #20
 800a948:	46bd      	mov	sp, r7
 800a94a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a94e:	4770      	bx	lr

0800a950 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800a950:	b480      	push	{r7}
 800a952:	b087      	sub	sp, #28
 800a954:	af00      	add	r7, sp, #0
 800a956:	60f8      	str	r0, [r7, #12]
 800a958:	60b9      	str	r1, [r7, #8]
 800a95a:	607a      	str	r2, [r7, #4]
 800a95c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800a95e:	68fb      	ldr	r3, [r7, #12]
 800a960:	689b      	ldr	r3, [r3, #8]
 800a962:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a964:	697b      	ldr	r3, [r7, #20]
 800a966:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800a96a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800a96c:	683b      	ldr	r3, [r7, #0]
 800a96e:	021a      	lsls	r2, r3, #8
 800a970:	687b      	ldr	r3, [r7, #4]
 800a972:	431a      	orrs	r2, r3
 800a974:	68bb      	ldr	r3, [r7, #8]
 800a976:	4313      	orrs	r3, r2
 800a978:	697a      	ldr	r2, [r7, #20]
 800a97a:	4313      	orrs	r3, r2
 800a97c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a97e:	68fb      	ldr	r3, [r7, #12]
 800a980:	697a      	ldr	r2, [r7, #20]
 800a982:	609a      	str	r2, [r3, #8]
}
 800a984:	bf00      	nop
 800a986:	371c      	adds	r7, #28
 800a988:	46bd      	mov	sp, r7
 800a98a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a98e:	4770      	bx	lr

0800a990 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800a990:	b480      	push	{r7}
 800a992:	b087      	sub	sp, #28
 800a994:	af00      	add	r7, sp, #0
 800a996:	60f8      	str	r0, [r7, #12]
 800a998:	60b9      	str	r1, [r7, #8]
 800a99a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800a99c:	68bb      	ldr	r3, [r7, #8]
 800a99e:	f003 031f 	and.w	r3, r3, #31
 800a9a2:	2201      	movs	r2, #1
 800a9a4:	fa02 f303 	lsl.w	r3, r2, r3
 800a9a8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800a9aa:	68fb      	ldr	r3, [r7, #12]
 800a9ac:	6a1a      	ldr	r2, [r3, #32]
 800a9ae:	697b      	ldr	r3, [r7, #20]
 800a9b0:	43db      	mvns	r3, r3
 800a9b2:	401a      	ands	r2, r3
 800a9b4:	68fb      	ldr	r3, [r7, #12]
 800a9b6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800a9b8:	68fb      	ldr	r3, [r7, #12]
 800a9ba:	6a1a      	ldr	r2, [r3, #32]
 800a9bc:	68bb      	ldr	r3, [r7, #8]
 800a9be:	f003 031f 	and.w	r3, r3, #31
 800a9c2:	6879      	ldr	r1, [r7, #4]
 800a9c4:	fa01 f303 	lsl.w	r3, r1, r3
 800a9c8:	431a      	orrs	r2, r3
 800a9ca:	68fb      	ldr	r3, [r7, #12]
 800a9cc:	621a      	str	r2, [r3, #32]
}
 800a9ce:	bf00      	nop
 800a9d0:	371c      	adds	r7, #28
 800a9d2:	46bd      	mov	sp, r7
 800a9d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9d8:	4770      	bx	lr
	...

0800a9dc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800a9dc:	b480      	push	{r7}
 800a9de:	b085      	sub	sp, #20
 800a9e0:	af00      	add	r7, sp, #0
 800a9e2:	6078      	str	r0, [r7, #4]
 800a9e4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800a9e6:	687b      	ldr	r3, [r7, #4]
 800a9e8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a9ec:	2b01      	cmp	r3, #1
 800a9ee:	d101      	bne.n	800a9f4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800a9f0:	2302      	movs	r3, #2
 800a9f2:	e063      	b.n	800aabc <HAL_TIMEx_MasterConfigSynchronization+0xe0>
 800a9f4:	687b      	ldr	r3, [r7, #4]
 800a9f6:	2201      	movs	r2, #1
 800a9f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a9fc:	687b      	ldr	r3, [r7, #4]
 800a9fe:	2202      	movs	r2, #2
 800aa00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800aa04:	687b      	ldr	r3, [r7, #4]
 800aa06:	681b      	ldr	r3, [r3, #0]
 800aa08:	685b      	ldr	r3, [r3, #4]
 800aa0a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800aa0c:	687b      	ldr	r3, [r7, #4]
 800aa0e:	681b      	ldr	r3, [r3, #0]
 800aa10:	689b      	ldr	r3, [r3, #8]
 800aa12:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800aa14:	687b      	ldr	r3, [r7, #4]
 800aa16:	681b      	ldr	r3, [r3, #0]
 800aa18:	4a2b      	ldr	r2, [pc, #172]	; (800aac8 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800aa1a:	4293      	cmp	r3, r2
 800aa1c:	d004      	beq.n	800aa28 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800aa1e:	687b      	ldr	r3, [r7, #4]
 800aa20:	681b      	ldr	r3, [r3, #0]
 800aa22:	4a2a      	ldr	r2, [pc, #168]	; (800aacc <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800aa24:	4293      	cmp	r3, r2
 800aa26:	d108      	bne.n	800aa3a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800aa28:	68fb      	ldr	r3, [r7, #12]
 800aa2a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800aa2e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800aa30:	683b      	ldr	r3, [r7, #0]
 800aa32:	685b      	ldr	r3, [r3, #4]
 800aa34:	68fa      	ldr	r2, [r7, #12]
 800aa36:	4313      	orrs	r3, r2
 800aa38:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800aa3a:	68fb      	ldr	r3, [r7, #12]
 800aa3c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800aa40:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800aa42:	683b      	ldr	r3, [r7, #0]
 800aa44:	681b      	ldr	r3, [r3, #0]
 800aa46:	68fa      	ldr	r2, [r7, #12]
 800aa48:	4313      	orrs	r3, r2
 800aa4a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800aa4c:	687b      	ldr	r3, [r7, #4]
 800aa4e:	681b      	ldr	r3, [r3, #0]
 800aa50:	68fa      	ldr	r2, [r7, #12]
 800aa52:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800aa54:	687b      	ldr	r3, [r7, #4]
 800aa56:	681b      	ldr	r3, [r3, #0]
 800aa58:	4a1b      	ldr	r2, [pc, #108]	; (800aac8 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800aa5a:	4293      	cmp	r3, r2
 800aa5c:	d018      	beq.n	800aa90 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 800aa5e:	687b      	ldr	r3, [r7, #4]
 800aa60:	681b      	ldr	r3, [r3, #0]
 800aa62:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800aa66:	d013      	beq.n	800aa90 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 800aa68:	687b      	ldr	r3, [r7, #4]
 800aa6a:	681b      	ldr	r3, [r3, #0]
 800aa6c:	4a18      	ldr	r2, [pc, #96]	; (800aad0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800aa6e:	4293      	cmp	r3, r2
 800aa70:	d00e      	beq.n	800aa90 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 800aa72:	687b      	ldr	r3, [r7, #4]
 800aa74:	681b      	ldr	r3, [r3, #0]
 800aa76:	4a17      	ldr	r2, [pc, #92]	; (800aad4 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800aa78:	4293      	cmp	r3, r2
 800aa7a:	d009      	beq.n	800aa90 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 800aa7c:	687b      	ldr	r3, [r7, #4]
 800aa7e:	681b      	ldr	r3, [r3, #0]
 800aa80:	4a12      	ldr	r2, [pc, #72]	; (800aacc <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800aa82:	4293      	cmp	r3, r2
 800aa84:	d004      	beq.n	800aa90 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 800aa86:	687b      	ldr	r3, [r7, #4]
 800aa88:	681b      	ldr	r3, [r3, #0]
 800aa8a:	4a13      	ldr	r2, [pc, #76]	; (800aad8 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800aa8c:	4293      	cmp	r3, r2
 800aa8e:	d10c      	bne.n	800aaaa <HAL_TIMEx_MasterConfigSynchronization+0xce>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800aa90:	68bb      	ldr	r3, [r7, #8]
 800aa92:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800aa96:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800aa98:	683b      	ldr	r3, [r7, #0]
 800aa9a:	689b      	ldr	r3, [r3, #8]
 800aa9c:	68ba      	ldr	r2, [r7, #8]
 800aa9e:	4313      	orrs	r3, r2
 800aaa0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800aaa2:	687b      	ldr	r3, [r7, #4]
 800aaa4:	681b      	ldr	r3, [r3, #0]
 800aaa6:	68ba      	ldr	r2, [r7, #8]
 800aaa8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800aaaa:	687b      	ldr	r3, [r7, #4]
 800aaac:	2201      	movs	r2, #1
 800aaae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800aab2:	687b      	ldr	r3, [r7, #4]
 800aab4:	2200      	movs	r2, #0
 800aab6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800aaba:	2300      	movs	r3, #0
}
 800aabc:	4618      	mov	r0, r3
 800aabe:	3714      	adds	r7, #20
 800aac0:	46bd      	mov	sp, r7
 800aac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aac6:	4770      	bx	lr
 800aac8:	40012c00 	.word	0x40012c00
 800aacc:	40013400 	.word	0x40013400
 800aad0:	40000400 	.word	0x40000400
 800aad4:	40000800 	.word	0x40000800
 800aad8:	40014000 	.word	0x40014000

0800aadc <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800aadc:	b480      	push	{r7}
 800aade:	b085      	sub	sp, #20
 800aae0:	af00      	add	r7, sp, #0
 800aae2:	6078      	str	r0, [r7, #4]
 800aae4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800aae6:	2300      	movs	r3, #0
 800aae8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
#endif /* TIM_BDTR_BKF */
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800aaea:	687b      	ldr	r3, [r7, #4]
 800aaec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800aaf0:	2b01      	cmp	r3, #1
 800aaf2:	d101      	bne.n	800aaf8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800aaf4:	2302      	movs	r3, #2
 800aaf6:	e065      	b.n	800abc4 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 800aaf8:	687b      	ldr	r3, [r7, #4]
 800aafa:	2201      	movs	r2, #1
 800aafc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800ab00:	68fb      	ldr	r3, [r7, #12]
 800ab02:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800ab06:	683b      	ldr	r3, [r7, #0]
 800ab08:	68db      	ldr	r3, [r3, #12]
 800ab0a:	4313      	orrs	r3, r2
 800ab0c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800ab0e:	68fb      	ldr	r3, [r7, #12]
 800ab10:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800ab14:	683b      	ldr	r3, [r7, #0]
 800ab16:	689b      	ldr	r3, [r3, #8]
 800ab18:	4313      	orrs	r3, r2
 800ab1a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800ab1c:	68fb      	ldr	r3, [r7, #12]
 800ab1e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800ab22:	683b      	ldr	r3, [r7, #0]
 800ab24:	685b      	ldr	r3, [r3, #4]
 800ab26:	4313      	orrs	r3, r2
 800ab28:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800ab2a:	68fb      	ldr	r3, [r7, #12]
 800ab2c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800ab30:	683b      	ldr	r3, [r7, #0]
 800ab32:	681b      	ldr	r3, [r3, #0]
 800ab34:	4313      	orrs	r3, r2
 800ab36:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800ab38:	68fb      	ldr	r3, [r7, #12]
 800ab3a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800ab3e:	683b      	ldr	r3, [r7, #0]
 800ab40:	691b      	ldr	r3, [r3, #16]
 800ab42:	4313      	orrs	r3, r2
 800ab44:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800ab46:	68fb      	ldr	r3, [r7, #12]
 800ab48:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800ab4c:	683b      	ldr	r3, [r7, #0]
 800ab4e:	695b      	ldr	r3, [r3, #20]
 800ab50:	4313      	orrs	r3, r2
 800ab52:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800ab54:	68fb      	ldr	r3, [r7, #12]
 800ab56:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800ab5a:	683b      	ldr	r3, [r7, #0]
 800ab5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ab5e:	4313      	orrs	r3, r2
 800ab60:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKF)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800ab62:	68fb      	ldr	r3, [r7, #12]
 800ab64:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800ab68:	683b      	ldr	r3, [r7, #0]
 800ab6a:	699b      	ldr	r3, [r3, #24]
 800ab6c:	041b      	lsls	r3, r3, #16
 800ab6e:	4313      	orrs	r3, r2
 800ab70:	60fb      	str	r3, [r7, #12]
#endif /* TIM_BDTR_BKF */

#if defined(TIM_BDTR_BK2E)
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800ab72:	687b      	ldr	r3, [r7, #4]
 800ab74:	681b      	ldr	r3, [r3, #0]
 800ab76:	4a16      	ldr	r2, [pc, #88]	; (800abd0 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 800ab78:	4293      	cmp	r3, r2
 800ab7a:	d004      	beq.n	800ab86 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800ab7c:	687b      	ldr	r3, [r7, #4]
 800ab7e:	681b      	ldr	r3, [r3, #0]
 800ab80:	4a14      	ldr	r2, [pc, #80]	; (800abd4 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 800ab82:	4293      	cmp	r3, r2
 800ab84:	d115      	bne.n	800abb2 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800ab86:	68fb      	ldr	r3, [r7, #12]
 800ab88:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800ab8c:	683b      	ldr	r3, [r7, #0]
 800ab8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab90:	051b      	lsls	r3, r3, #20
 800ab92:	4313      	orrs	r3, r2
 800ab94:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800ab96:	68fb      	ldr	r3, [r7, #12]
 800ab98:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800ab9c:	683b      	ldr	r3, [r7, #0]
 800ab9e:	69db      	ldr	r3, [r3, #28]
 800aba0:	4313      	orrs	r3, r2
 800aba2:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800aba4:	68fb      	ldr	r3, [r7, #12]
 800aba6:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800abaa:	683b      	ldr	r3, [r7, #0]
 800abac:	6a1b      	ldr	r3, [r3, #32]
 800abae:	4313      	orrs	r3, r2
 800abb0:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_BDTR_BK2E */

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800abb2:	687b      	ldr	r3, [r7, #4]
 800abb4:	681b      	ldr	r3, [r3, #0]
 800abb6:	68fa      	ldr	r2, [r7, #12]
 800abb8:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800abba:	687b      	ldr	r3, [r7, #4]
 800abbc:	2200      	movs	r2, #0
 800abbe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800abc2:	2300      	movs	r3, #0
}
 800abc4:	4618      	mov	r0, r3
 800abc6:	3714      	adds	r7, #20
 800abc8:	46bd      	mov	sp, r7
 800abca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abce:	4770      	bx	lr
 800abd0:	40012c00 	.word	0x40012c00
 800abd4:	40013400 	.word	0x40013400

0800abd8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800abd8:	b480      	push	{r7}
 800abda:	b083      	sub	sp, #12
 800abdc:	af00      	add	r7, sp, #0
 800abde:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800abe0:	bf00      	nop
 800abe2:	370c      	adds	r7, #12
 800abe4:	46bd      	mov	sp, r7
 800abe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abea:	4770      	bx	lr

0800abec <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800abec:	b480      	push	{r7}
 800abee:	b083      	sub	sp, #12
 800abf0:	af00      	add	r7, sp, #0
 800abf2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800abf4:	bf00      	nop
 800abf6:	370c      	adds	r7, #12
 800abf8:	46bd      	mov	sp, r7
 800abfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abfe:	4770      	bx	lr

0800ac00 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800ac00:	b480      	push	{r7}
 800ac02:	b083      	sub	sp, #12
 800ac04:	af00      	add	r7, sp, #0
 800ac06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800ac08:	bf00      	nop
 800ac0a:	370c      	adds	r7, #12
 800ac0c:	46bd      	mov	sp, r7
 800ac0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac12:	4770      	bx	lr

0800ac14 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800ac14:	b580      	push	{r7, lr}
 800ac16:	b082      	sub	sp, #8
 800ac18:	af00      	add	r7, sp, #0
 800ac1a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800ac1c:	687b      	ldr	r3, [r7, #4]
 800ac1e:	2b00      	cmp	r3, #0
 800ac20:	d101      	bne.n	800ac26 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800ac22:	2301      	movs	r3, #1
 800ac24:	e040      	b.n	800aca8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800ac26:	687b      	ldr	r3, [r7, #4]
 800ac28:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ac2a:	2b00      	cmp	r3, #0
 800ac2c:	d106      	bne.n	800ac3c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800ac2e:	687b      	ldr	r3, [r7, #4]
 800ac30:	2200      	movs	r2, #0
 800ac32:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800ac36:	6878      	ldr	r0, [r7, #4]
 800ac38:	f7f9 fbd6 	bl	80043e8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800ac3c:	687b      	ldr	r3, [r7, #4]
 800ac3e:	2224      	movs	r2, #36	; 0x24
 800ac40:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 800ac42:	687b      	ldr	r3, [r7, #4]
 800ac44:	681b      	ldr	r3, [r3, #0]
 800ac46:	681a      	ldr	r2, [r3, #0]
 800ac48:	687b      	ldr	r3, [r7, #4]
 800ac4a:	681b      	ldr	r3, [r3, #0]
 800ac4c:	f022 0201 	bic.w	r2, r2, #1
 800ac50:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800ac52:	6878      	ldr	r0, [r7, #4]
 800ac54:	f000 f8b6 	bl	800adc4 <UART_SetConfig>
 800ac58:	4603      	mov	r3, r0
 800ac5a:	2b01      	cmp	r3, #1
 800ac5c:	d101      	bne.n	800ac62 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800ac5e:	2301      	movs	r3, #1
 800ac60:	e022      	b.n	800aca8 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800ac62:	687b      	ldr	r3, [r7, #4]
 800ac64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac66:	2b00      	cmp	r3, #0
 800ac68:	d002      	beq.n	800ac70 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800ac6a:	6878      	ldr	r0, [r7, #4]
 800ac6c:	f000 fa7e 	bl	800b16c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800ac70:	687b      	ldr	r3, [r7, #4]
 800ac72:	681b      	ldr	r3, [r3, #0]
 800ac74:	685a      	ldr	r2, [r3, #4]
 800ac76:	687b      	ldr	r3, [r7, #4]
 800ac78:	681b      	ldr	r3, [r3, #0]
 800ac7a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800ac7e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800ac80:	687b      	ldr	r3, [r7, #4]
 800ac82:	681b      	ldr	r3, [r3, #0]
 800ac84:	689a      	ldr	r2, [r3, #8]
 800ac86:	687b      	ldr	r3, [r7, #4]
 800ac88:	681b      	ldr	r3, [r3, #0]
 800ac8a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800ac8e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800ac90:	687b      	ldr	r3, [r7, #4]
 800ac92:	681b      	ldr	r3, [r3, #0]
 800ac94:	681a      	ldr	r2, [r3, #0]
 800ac96:	687b      	ldr	r3, [r7, #4]
 800ac98:	681b      	ldr	r3, [r3, #0]
 800ac9a:	f042 0201 	orr.w	r2, r2, #1
 800ac9e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800aca0:	6878      	ldr	r0, [r7, #4]
 800aca2:	f000 fb05 	bl	800b2b0 <UART_CheckIdleState>
 800aca6:	4603      	mov	r3, r0
}
 800aca8:	4618      	mov	r0, r3
 800acaa:	3708      	adds	r7, #8
 800acac:	46bd      	mov	sp, r7
 800acae:	bd80      	pop	{r7, pc}

0800acb0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800acb0:	b580      	push	{r7, lr}
 800acb2:	b08a      	sub	sp, #40	; 0x28
 800acb4:	af02      	add	r7, sp, #8
 800acb6:	60f8      	str	r0, [r7, #12]
 800acb8:	60b9      	str	r1, [r7, #8]
 800acba:	603b      	str	r3, [r7, #0]
 800acbc:	4613      	mov	r3, r2
 800acbe:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800acc0:	68fb      	ldr	r3, [r7, #12]
 800acc2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800acc4:	2b20      	cmp	r3, #32
 800acc6:	d178      	bne.n	800adba <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 800acc8:	68bb      	ldr	r3, [r7, #8]
 800acca:	2b00      	cmp	r3, #0
 800accc:	d002      	beq.n	800acd4 <HAL_UART_Transmit+0x24>
 800acce:	88fb      	ldrh	r3, [r7, #6]
 800acd0:	2b00      	cmp	r3, #0
 800acd2:	d101      	bne.n	800acd8 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 800acd4:	2301      	movs	r3, #1
 800acd6:	e071      	b.n	800adbc <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800acd8:	68fb      	ldr	r3, [r7, #12]
 800acda:	2200      	movs	r2, #0
 800acdc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800ace0:	68fb      	ldr	r3, [r7, #12]
 800ace2:	2221      	movs	r2, #33	; 0x21
 800ace4:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800ace6:	f7f9 ff53 	bl	8004b90 <HAL_GetTick>
 800acea:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800acec:	68fb      	ldr	r3, [r7, #12]
 800acee:	88fa      	ldrh	r2, [r7, #6]
 800acf0:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800acf4:	68fb      	ldr	r3, [r7, #12]
 800acf6:	88fa      	ldrh	r2, [r7, #6]
 800acf8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800acfc:	68fb      	ldr	r3, [r7, #12]
 800acfe:	689b      	ldr	r3, [r3, #8]
 800ad00:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ad04:	d108      	bne.n	800ad18 <HAL_UART_Transmit+0x68>
 800ad06:	68fb      	ldr	r3, [r7, #12]
 800ad08:	691b      	ldr	r3, [r3, #16]
 800ad0a:	2b00      	cmp	r3, #0
 800ad0c:	d104      	bne.n	800ad18 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800ad0e:	2300      	movs	r3, #0
 800ad10:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800ad12:	68bb      	ldr	r3, [r7, #8]
 800ad14:	61bb      	str	r3, [r7, #24]
 800ad16:	e003      	b.n	800ad20 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 800ad18:	68bb      	ldr	r3, [r7, #8]
 800ad1a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800ad1c:	2300      	movs	r3, #0
 800ad1e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800ad20:	e030      	b.n	800ad84 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800ad22:	683b      	ldr	r3, [r7, #0]
 800ad24:	9300      	str	r3, [sp, #0]
 800ad26:	697b      	ldr	r3, [r7, #20]
 800ad28:	2200      	movs	r2, #0
 800ad2a:	2180      	movs	r1, #128	; 0x80
 800ad2c:	68f8      	ldr	r0, [r7, #12]
 800ad2e:	f000 fb67 	bl	800b400 <UART_WaitOnFlagUntilTimeout>
 800ad32:	4603      	mov	r3, r0
 800ad34:	2b00      	cmp	r3, #0
 800ad36:	d004      	beq.n	800ad42 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 800ad38:	68fb      	ldr	r3, [r7, #12]
 800ad3a:	2220      	movs	r2, #32
 800ad3c:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 800ad3e:	2303      	movs	r3, #3
 800ad40:	e03c      	b.n	800adbc <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 800ad42:	69fb      	ldr	r3, [r7, #28]
 800ad44:	2b00      	cmp	r3, #0
 800ad46:	d10b      	bne.n	800ad60 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800ad48:	69bb      	ldr	r3, [r7, #24]
 800ad4a:	881a      	ldrh	r2, [r3, #0]
 800ad4c:	68fb      	ldr	r3, [r7, #12]
 800ad4e:	681b      	ldr	r3, [r3, #0]
 800ad50:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800ad54:	b292      	uxth	r2, r2
 800ad56:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800ad58:	69bb      	ldr	r3, [r7, #24]
 800ad5a:	3302      	adds	r3, #2
 800ad5c:	61bb      	str	r3, [r7, #24]
 800ad5e:	e008      	b.n	800ad72 <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800ad60:	69fb      	ldr	r3, [r7, #28]
 800ad62:	781a      	ldrb	r2, [r3, #0]
 800ad64:	68fb      	ldr	r3, [r7, #12]
 800ad66:	681b      	ldr	r3, [r3, #0]
 800ad68:	b292      	uxth	r2, r2
 800ad6a:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800ad6c:	69fb      	ldr	r3, [r7, #28]
 800ad6e:	3301      	adds	r3, #1
 800ad70:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800ad72:	68fb      	ldr	r3, [r7, #12]
 800ad74:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800ad78:	b29b      	uxth	r3, r3
 800ad7a:	3b01      	subs	r3, #1
 800ad7c:	b29a      	uxth	r2, r3
 800ad7e:	68fb      	ldr	r3, [r7, #12]
 800ad80:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800ad84:	68fb      	ldr	r3, [r7, #12]
 800ad86:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800ad8a:	b29b      	uxth	r3, r3
 800ad8c:	2b00      	cmp	r3, #0
 800ad8e:	d1c8      	bne.n	800ad22 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800ad90:	683b      	ldr	r3, [r7, #0]
 800ad92:	9300      	str	r3, [sp, #0]
 800ad94:	697b      	ldr	r3, [r7, #20]
 800ad96:	2200      	movs	r2, #0
 800ad98:	2140      	movs	r1, #64	; 0x40
 800ad9a:	68f8      	ldr	r0, [r7, #12]
 800ad9c:	f000 fb30 	bl	800b400 <UART_WaitOnFlagUntilTimeout>
 800ada0:	4603      	mov	r3, r0
 800ada2:	2b00      	cmp	r3, #0
 800ada4:	d004      	beq.n	800adb0 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 800ada6:	68fb      	ldr	r3, [r7, #12]
 800ada8:	2220      	movs	r2, #32
 800adaa:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 800adac:	2303      	movs	r3, #3
 800adae:	e005      	b.n	800adbc <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800adb0:	68fb      	ldr	r3, [r7, #12]
 800adb2:	2220      	movs	r2, #32
 800adb4:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 800adb6:	2300      	movs	r3, #0
 800adb8:	e000      	b.n	800adbc <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 800adba:	2302      	movs	r3, #2
  }
}
 800adbc:	4618      	mov	r0, r3
 800adbe:	3720      	adds	r7, #32
 800adc0:	46bd      	mov	sp, r7
 800adc2:	bd80      	pop	{r7, pc}

0800adc4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800adc4:	b580      	push	{r7, lr}
 800adc6:	b088      	sub	sp, #32
 800adc8:	af00      	add	r7, sp, #0
 800adca:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800adcc:	2300      	movs	r3, #0
 800adce:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800add0:	687b      	ldr	r3, [r7, #4]
 800add2:	689a      	ldr	r2, [r3, #8]
 800add4:	687b      	ldr	r3, [r7, #4]
 800add6:	691b      	ldr	r3, [r3, #16]
 800add8:	431a      	orrs	r2, r3
 800adda:	687b      	ldr	r3, [r7, #4]
 800addc:	695b      	ldr	r3, [r3, #20]
 800adde:	431a      	orrs	r2, r3
 800ade0:	687b      	ldr	r3, [r7, #4]
 800ade2:	69db      	ldr	r3, [r3, #28]
 800ade4:	4313      	orrs	r3, r2
 800ade6:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800ade8:	687b      	ldr	r3, [r7, #4]
 800adea:	681b      	ldr	r3, [r3, #0]
 800adec:	681b      	ldr	r3, [r3, #0]
 800adee:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800adf2:	f023 030c 	bic.w	r3, r3, #12
 800adf6:	687a      	ldr	r2, [r7, #4]
 800adf8:	6812      	ldr	r2, [r2, #0]
 800adfa:	6979      	ldr	r1, [r7, #20]
 800adfc:	430b      	orrs	r3, r1
 800adfe:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800ae00:	687b      	ldr	r3, [r7, #4]
 800ae02:	681b      	ldr	r3, [r3, #0]
 800ae04:	685b      	ldr	r3, [r3, #4]
 800ae06:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800ae0a:	687b      	ldr	r3, [r7, #4]
 800ae0c:	68da      	ldr	r2, [r3, #12]
 800ae0e:	687b      	ldr	r3, [r7, #4]
 800ae10:	681b      	ldr	r3, [r3, #0]
 800ae12:	430a      	orrs	r2, r1
 800ae14:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800ae16:	687b      	ldr	r3, [r7, #4]
 800ae18:	699b      	ldr	r3, [r3, #24]
 800ae1a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800ae1c:	687b      	ldr	r3, [r7, #4]
 800ae1e:	6a1b      	ldr	r3, [r3, #32]
 800ae20:	697a      	ldr	r2, [r7, #20]
 800ae22:	4313      	orrs	r3, r2
 800ae24:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800ae26:	687b      	ldr	r3, [r7, #4]
 800ae28:	681b      	ldr	r3, [r3, #0]
 800ae2a:	689b      	ldr	r3, [r3, #8]
 800ae2c:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800ae30:	687b      	ldr	r3, [r7, #4]
 800ae32:	681b      	ldr	r3, [r3, #0]
 800ae34:	697a      	ldr	r2, [r7, #20]
 800ae36:	430a      	orrs	r2, r1
 800ae38:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800ae3a:	687b      	ldr	r3, [r7, #4]
 800ae3c:	681b      	ldr	r3, [r3, #0]
 800ae3e:	4aa7      	ldr	r2, [pc, #668]	; (800b0dc <UART_SetConfig+0x318>)
 800ae40:	4293      	cmp	r3, r2
 800ae42:	d120      	bne.n	800ae86 <UART_SetConfig+0xc2>
 800ae44:	4ba6      	ldr	r3, [pc, #664]	; (800b0e0 <UART_SetConfig+0x31c>)
 800ae46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ae48:	f003 0303 	and.w	r3, r3, #3
 800ae4c:	2b03      	cmp	r3, #3
 800ae4e:	d817      	bhi.n	800ae80 <UART_SetConfig+0xbc>
 800ae50:	a201      	add	r2, pc, #4	; (adr r2, 800ae58 <UART_SetConfig+0x94>)
 800ae52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ae56:	bf00      	nop
 800ae58:	0800ae69 	.word	0x0800ae69
 800ae5c:	0800ae75 	.word	0x0800ae75
 800ae60:	0800ae7b 	.word	0x0800ae7b
 800ae64:	0800ae6f 	.word	0x0800ae6f
 800ae68:	2301      	movs	r3, #1
 800ae6a:	77fb      	strb	r3, [r7, #31]
 800ae6c:	e0b5      	b.n	800afda <UART_SetConfig+0x216>
 800ae6e:	2302      	movs	r3, #2
 800ae70:	77fb      	strb	r3, [r7, #31]
 800ae72:	e0b2      	b.n	800afda <UART_SetConfig+0x216>
 800ae74:	2304      	movs	r3, #4
 800ae76:	77fb      	strb	r3, [r7, #31]
 800ae78:	e0af      	b.n	800afda <UART_SetConfig+0x216>
 800ae7a:	2308      	movs	r3, #8
 800ae7c:	77fb      	strb	r3, [r7, #31]
 800ae7e:	e0ac      	b.n	800afda <UART_SetConfig+0x216>
 800ae80:	2310      	movs	r3, #16
 800ae82:	77fb      	strb	r3, [r7, #31]
 800ae84:	e0a9      	b.n	800afda <UART_SetConfig+0x216>
 800ae86:	687b      	ldr	r3, [r7, #4]
 800ae88:	681b      	ldr	r3, [r3, #0]
 800ae8a:	4a96      	ldr	r2, [pc, #600]	; (800b0e4 <UART_SetConfig+0x320>)
 800ae8c:	4293      	cmp	r3, r2
 800ae8e:	d124      	bne.n	800aeda <UART_SetConfig+0x116>
 800ae90:	4b93      	ldr	r3, [pc, #588]	; (800b0e0 <UART_SetConfig+0x31c>)
 800ae92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ae94:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800ae98:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800ae9c:	d011      	beq.n	800aec2 <UART_SetConfig+0xfe>
 800ae9e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800aea2:	d817      	bhi.n	800aed4 <UART_SetConfig+0x110>
 800aea4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800aea8:	d011      	beq.n	800aece <UART_SetConfig+0x10a>
 800aeaa:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800aeae:	d811      	bhi.n	800aed4 <UART_SetConfig+0x110>
 800aeb0:	2b00      	cmp	r3, #0
 800aeb2:	d003      	beq.n	800aebc <UART_SetConfig+0xf8>
 800aeb4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800aeb8:	d006      	beq.n	800aec8 <UART_SetConfig+0x104>
 800aeba:	e00b      	b.n	800aed4 <UART_SetConfig+0x110>
 800aebc:	2300      	movs	r3, #0
 800aebe:	77fb      	strb	r3, [r7, #31]
 800aec0:	e08b      	b.n	800afda <UART_SetConfig+0x216>
 800aec2:	2302      	movs	r3, #2
 800aec4:	77fb      	strb	r3, [r7, #31]
 800aec6:	e088      	b.n	800afda <UART_SetConfig+0x216>
 800aec8:	2304      	movs	r3, #4
 800aeca:	77fb      	strb	r3, [r7, #31]
 800aecc:	e085      	b.n	800afda <UART_SetConfig+0x216>
 800aece:	2308      	movs	r3, #8
 800aed0:	77fb      	strb	r3, [r7, #31]
 800aed2:	e082      	b.n	800afda <UART_SetConfig+0x216>
 800aed4:	2310      	movs	r3, #16
 800aed6:	77fb      	strb	r3, [r7, #31]
 800aed8:	e07f      	b.n	800afda <UART_SetConfig+0x216>
 800aeda:	687b      	ldr	r3, [r7, #4]
 800aedc:	681b      	ldr	r3, [r3, #0]
 800aede:	4a82      	ldr	r2, [pc, #520]	; (800b0e8 <UART_SetConfig+0x324>)
 800aee0:	4293      	cmp	r3, r2
 800aee2:	d124      	bne.n	800af2e <UART_SetConfig+0x16a>
 800aee4:	4b7e      	ldr	r3, [pc, #504]	; (800b0e0 <UART_SetConfig+0x31c>)
 800aee6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aee8:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 800aeec:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800aef0:	d011      	beq.n	800af16 <UART_SetConfig+0x152>
 800aef2:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800aef6:	d817      	bhi.n	800af28 <UART_SetConfig+0x164>
 800aef8:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800aefc:	d011      	beq.n	800af22 <UART_SetConfig+0x15e>
 800aefe:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800af02:	d811      	bhi.n	800af28 <UART_SetConfig+0x164>
 800af04:	2b00      	cmp	r3, #0
 800af06:	d003      	beq.n	800af10 <UART_SetConfig+0x14c>
 800af08:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800af0c:	d006      	beq.n	800af1c <UART_SetConfig+0x158>
 800af0e:	e00b      	b.n	800af28 <UART_SetConfig+0x164>
 800af10:	2300      	movs	r3, #0
 800af12:	77fb      	strb	r3, [r7, #31]
 800af14:	e061      	b.n	800afda <UART_SetConfig+0x216>
 800af16:	2302      	movs	r3, #2
 800af18:	77fb      	strb	r3, [r7, #31]
 800af1a:	e05e      	b.n	800afda <UART_SetConfig+0x216>
 800af1c:	2304      	movs	r3, #4
 800af1e:	77fb      	strb	r3, [r7, #31]
 800af20:	e05b      	b.n	800afda <UART_SetConfig+0x216>
 800af22:	2308      	movs	r3, #8
 800af24:	77fb      	strb	r3, [r7, #31]
 800af26:	e058      	b.n	800afda <UART_SetConfig+0x216>
 800af28:	2310      	movs	r3, #16
 800af2a:	77fb      	strb	r3, [r7, #31]
 800af2c:	e055      	b.n	800afda <UART_SetConfig+0x216>
 800af2e:	687b      	ldr	r3, [r7, #4]
 800af30:	681b      	ldr	r3, [r3, #0]
 800af32:	4a6e      	ldr	r2, [pc, #440]	; (800b0ec <UART_SetConfig+0x328>)
 800af34:	4293      	cmp	r3, r2
 800af36:	d124      	bne.n	800af82 <UART_SetConfig+0x1be>
 800af38:	4b69      	ldr	r3, [pc, #420]	; (800b0e0 <UART_SetConfig+0x31c>)
 800af3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800af3c:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 800af40:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800af44:	d011      	beq.n	800af6a <UART_SetConfig+0x1a6>
 800af46:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800af4a:	d817      	bhi.n	800af7c <UART_SetConfig+0x1b8>
 800af4c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800af50:	d011      	beq.n	800af76 <UART_SetConfig+0x1b2>
 800af52:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800af56:	d811      	bhi.n	800af7c <UART_SetConfig+0x1b8>
 800af58:	2b00      	cmp	r3, #0
 800af5a:	d003      	beq.n	800af64 <UART_SetConfig+0x1a0>
 800af5c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800af60:	d006      	beq.n	800af70 <UART_SetConfig+0x1ac>
 800af62:	e00b      	b.n	800af7c <UART_SetConfig+0x1b8>
 800af64:	2300      	movs	r3, #0
 800af66:	77fb      	strb	r3, [r7, #31]
 800af68:	e037      	b.n	800afda <UART_SetConfig+0x216>
 800af6a:	2302      	movs	r3, #2
 800af6c:	77fb      	strb	r3, [r7, #31]
 800af6e:	e034      	b.n	800afda <UART_SetConfig+0x216>
 800af70:	2304      	movs	r3, #4
 800af72:	77fb      	strb	r3, [r7, #31]
 800af74:	e031      	b.n	800afda <UART_SetConfig+0x216>
 800af76:	2308      	movs	r3, #8
 800af78:	77fb      	strb	r3, [r7, #31]
 800af7a:	e02e      	b.n	800afda <UART_SetConfig+0x216>
 800af7c:	2310      	movs	r3, #16
 800af7e:	77fb      	strb	r3, [r7, #31]
 800af80:	e02b      	b.n	800afda <UART_SetConfig+0x216>
 800af82:	687b      	ldr	r3, [r7, #4]
 800af84:	681b      	ldr	r3, [r3, #0]
 800af86:	4a5a      	ldr	r2, [pc, #360]	; (800b0f0 <UART_SetConfig+0x32c>)
 800af88:	4293      	cmp	r3, r2
 800af8a:	d124      	bne.n	800afd6 <UART_SetConfig+0x212>
 800af8c:	4b54      	ldr	r3, [pc, #336]	; (800b0e0 <UART_SetConfig+0x31c>)
 800af8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800af90:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 800af94:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800af98:	d011      	beq.n	800afbe <UART_SetConfig+0x1fa>
 800af9a:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800af9e:	d817      	bhi.n	800afd0 <UART_SetConfig+0x20c>
 800afa0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800afa4:	d011      	beq.n	800afca <UART_SetConfig+0x206>
 800afa6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800afaa:	d811      	bhi.n	800afd0 <UART_SetConfig+0x20c>
 800afac:	2b00      	cmp	r3, #0
 800afae:	d003      	beq.n	800afb8 <UART_SetConfig+0x1f4>
 800afb0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800afb4:	d006      	beq.n	800afc4 <UART_SetConfig+0x200>
 800afb6:	e00b      	b.n	800afd0 <UART_SetConfig+0x20c>
 800afb8:	2300      	movs	r3, #0
 800afba:	77fb      	strb	r3, [r7, #31]
 800afbc:	e00d      	b.n	800afda <UART_SetConfig+0x216>
 800afbe:	2302      	movs	r3, #2
 800afc0:	77fb      	strb	r3, [r7, #31]
 800afc2:	e00a      	b.n	800afda <UART_SetConfig+0x216>
 800afc4:	2304      	movs	r3, #4
 800afc6:	77fb      	strb	r3, [r7, #31]
 800afc8:	e007      	b.n	800afda <UART_SetConfig+0x216>
 800afca:	2308      	movs	r3, #8
 800afcc:	77fb      	strb	r3, [r7, #31]
 800afce:	e004      	b.n	800afda <UART_SetConfig+0x216>
 800afd0:	2310      	movs	r3, #16
 800afd2:	77fb      	strb	r3, [r7, #31]
 800afd4:	e001      	b.n	800afda <UART_SetConfig+0x216>
 800afd6:	2310      	movs	r3, #16
 800afd8:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800afda:	687b      	ldr	r3, [r7, #4]
 800afdc:	69db      	ldr	r3, [r3, #28]
 800afde:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800afe2:	d15b      	bne.n	800b09c <UART_SetConfig+0x2d8>
  {
    switch (clocksource)
 800afe4:	7ffb      	ldrb	r3, [r7, #31]
 800afe6:	2b08      	cmp	r3, #8
 800afe8:	d827      	bhi.n	800b03a <UART_SetConfig+0x276>
 800afea:	a201      	add	r2, pc, #4	; (adr r2, 800aff0 <UART_SetConfig+0x22c>)
 800afec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aff0:	0800b015 	.word	0x0800b015
 800aff4:	0800b01d 	.word	0x0800b01d
 800aff8:	0800b025 	.word	0x0800b025
 800affc:	0800b03b 	.word	0x0800b03b
 800b000:	0800b02b 	.word	0x0800b02b
 800b004:	0800b03b 	.word	0x0800b03b
 800b008:	0800b03b 	.word	0x0800b03b
 800b00c:	0800b03b 	.word	0x0800b03b
 800b010:	0800b033 	.word	0x0800b033
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b014:	f7fd fb1a 	bl	800864c <HAL_RCC_GetPCLK1Freq>
 800b018:	61b8      	str	r0, [r7, #24]
        break;
 800b01a:	e013      	b.n	800b044 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b01c:	f7fd fb38 	bl	8008690 <HAL_RCC_GetPCLK2Freq>
 800b020:	61b8      	str	r0, [r7, #24]
        break;
 800b022:	e00f      	b.n	800b044 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800b024:	4b33      	ldr	r3, [pc, #204]	; (800b0f4 <UART_SetConfig+0x330>)
 800b026:	61bb      	str	r3, [r7, #24]
        break;
 800b028:	e00c      	b.n	800b044 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800b02a:	f7fd fa97 	bl	800855c <HAL_RCC_GetSysClockFreq>
 800b02e:	61b8      	str	r0, [r7, #24]
        break;
 800b030:	e008      	b.n	800b044 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b032:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b036:	61bb      	str	r3, [r7, #24]
        break;
 800b038:	e004      	b.n	800b044 <UART_SetConfig+0x280>
      default:
        pclk = 0U;
 800b03a:	2300      	movs	r3, #0
 800b03c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800b03e:	2301      	movs	r3, #1
 800b040:	77bb      	strb	r3, [r7, #30]
        break;
 800b042:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800b044:	69bb      	ldr	r3, [r7, #24]
 800b046:	2b00      	cmp	r3, #0
 800b048:	f000 8082 	beq.w	800b150 <UART_SetConfig+0x38c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800b04c:	69bb      	ldr	r3, [r7, #24]
 800b04e:	005a      	lsls	r2, r3, #1
 800b050:	687b      	ldr	r3, [r7, #4]
 800b052:	685b      	ldr	r3, [r3, #4]
 800b054:	085b      	lsrs	r3, r3, #1
 800b056:	441a      	add	r2, r3
 800b058:	687b      	ldr	r3, [r7, #4]
 800b05a:	685b      	ldr	r3, [r3, #4]
 800b05c:	fbb2 f3f3 	udiv	r3, r2, r3
 800b060:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b062:	693b      	ldr	r3, [r7, #16]
 800b064:	2b0f      	cmp	r3, #15
 800b066:	d916      	bls.n	800b096 <UART_SetConfig+0x2d2>
 800b068:	693b      	ldr	r3, [r7, #16]
 800b06a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b06e:	d212      	bcs.n	800b096 <UART_SetConfig+0x2d2>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800b070:	693b      	ldr	r3, [r7, #16]
 800b072:	b29b      	uxth	r3, r3
 800b074:	f023 030f 	bic.w	r3, r3, #15
 800b078:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800b07a:	693b      	ldr	r3, [r7, #16]
 800b07c:	085b      	lsrs	r3, r3, #1
 800b07e:	b29b      	uxth	r3, r3
 800b080:	f003 0307 	and.w	r3, r3, #7
 800b084:	b29a      	uxth	r2, r3
 800b086:	89fb      	ldrh	r3, [r7, #14]
 800b088:	4313      	orrs	r3, r2
 800b08a:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800b08c:	687b      	ldr	r3, [r7, #4]
 800b08e:	681b      	ldr	r3, [r3, #0]
 800b090:	89fa      	ldrh	r2, [r7, #14]
 800b092:	60da      	str	r2, [r3, #12]
 800b094:	e05c      	b.n	800b150 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 800b096:	2301      	movs	r3, #1
 800b098:	77bb      	strb	r3, [r7, #30]
 800b09a:	e059      	b.n	800b150 <UART_SetConfig+0x38c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800b09c:	7ffb      	ldrb	r3, [r7, #31]
 800b09e:	2b08      	cmp	r3, #8
 800b0a0:	d835      	bhi.n	800b10e <UART_SetConfig+0x34a>
 800b0a2:	a201      	add	r2, pc, #4	; (adr r2, 800b0a8 <UART_SetConfig+0x2e4>)
 800b0a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b0a8:	0800b0cd 	.word	0x0800b0cd
 800b0ac:	0800b0d5 	.word	0x0800b0d5
 800b0b0:	0800b0f9 	.word	0x0800b0f9
 800b0b4:	0800b10f 	.word	0x0800b10f
 800b0b8:	0800b0ff 	.word	0x0800b0ff
 800b0bc:	0800b10f 	.word	0x0800b10f
 800b0c0:	0800b10f 	.word	0x0800b10f
 800b0c4:	0800b10f 	.word	0x0800b10f
 800b0c8:	0800b107 	.word	0x0800b107
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b0cc:	f7fd fabe 	bl	800864c <HAL_RCC_GetPCLK1Freq>
 800b0d0:	61b8      	str	r0, [r7, #24]
        break;
 800b0d2:	e021      	b.n	800b118 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b0d4:	f7fd fadc 	bl	8008690 <HAL_RCC_GetPCLK2Freq>
 800b0d8:	61b8      	str	r0, [r7, #24]
        break;
 800b0da:	e01d      	b.n	800b118 <UART_SetConfig+0x354>
 800b0dc:	40013800 	.word	0x40013800
 800b0e0:	40021000 	.word	0x40021000
 800b0e4:	40004400 	.word	0x40004400
 800b0e8:	40004800 	.word	0x40004800
 800b0ec:	40004c00 	.word	0x40004c00
 800b0f0:	40005000 	.word	0x40005000
 800b0f4:	007a1200 	.word	0x007a1200
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800b0f8:	4b1b      	ldr	r3, [pc, #108]	; (800b168 <UART_SetConfig+0x3a4>)
 800b0fa:	61bb      	str	r3, [r7, #24]
        break;
 800b0fc:	e00c      	b.n	800b118 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800b0fe:	f7fd fa2d 	bl	800855c <HAL_RCC_GetSysClockFreq>
 800b102:	61b8      	str	r0, [r7, #24]
        break;
 800b104:	e008      	b.n	800b118 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b106:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b10a:	61bb      	str	r3, [r7, #24]
        break;
 800b10c:	e004      	b.n	800b118 <UART_SetConfig+0x354>
      default:
        pclk = 0U;
 800b10e:	2300      	movs	r3, #0
 800b110:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800b112:	2301      	movs	r3, #1
 800b114:	77bb      	strb	r3, [r7, #30]
        break;
 800b116:	bf00      	nop
    }

    if (pclk != 0U)
 800b118:	69bb      	ldr	r3, [r7, #24]
 800b11a:	2b00      	cmp	r3, #0
 800b11c:	d018      	beq.n	800b150 <UART_SetConfig+0x38c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800b11e:	687b      	ldr	r3, [r7, #4]
 800b120:	685b      	ldr	r3, [r3, #4]
 800b122:	085a      	lsrs	r2, r3, #1
 800b124:	69bb      	ldr	r3, [r7, #24]
 800b126:	441a      	add	r2, r3
 800b128:	687b      	ldr	r3, [r7, #4]
 800b12a:	685b      	ldr	r3, [r3, #4]
 800b12c:	fbb2 f3f3 	udiv	r3, r2, r3
 800b130:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b132:	693b      	ldr	r3, [r7, #16]
 800b134:	2b0f      	cmp	r3, #15
 800b136:	d909      	bls.n	800b14c <UART_SetConfig+0x388>
 800b138:	693b      	ldr	r3, [r7, #16]
 800b13a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b13e:	d205      	bcs.n	800b14c <UART_SetConfig+0x388>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800b140:	693b      	ldr	r3, [r7, #16]
 800b142:	b29a      	uxth	r2, r3
 800b144:	687b      	ldr	r3, [r7, #4]
 800b146:	681b      	ldr	r3, [r3, #0]
 800b148:	60da      	str	r2, [r3, #12]
 800b14a:	e001      	b.n	800b150 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 800b14c:	2301      	movs	r3, #1
 800b14e:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800b150:	687b      	ldr	r3, [r7, #4]
 800b152:	2200      	movs	r2, #0
 800b154:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 800b156:	687b      	ldr	r3, [r7, #4]
 800b158:	2200      	movs	r2, #0
 800b15a:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 800b15c:	7fbb      	ldrb	r3, [r7, #30]
}
 800b15e:	4618      	mov	r0, r3
 800b160:	3720      	adds	r7, #32
 800b162:	46bd      	mov	sp, r7
 800b164:	bd80      	pop	{r7, pc}
 800b166:	bf00      	nop
 800b168:	007a1200 	.word	0x007a1200

0800b16c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800b16c:	b480      	push	{r7}
 800b16e:	b083      	sub	sp, #12
 800b170:	af00      	add	r7, sp, #0
 800b172:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800b174:	687b      	ldr	r3, [r7, #4]
 800b176:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b178:	f003 0301 	and.w	r3, r3, #1
 800b17c:	2b00      	cmp	r3, #0
 800b17e:	d00a      	beq.n	800b196 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800b180:	687b      	ldr	r3, [r7, #4]
 800b182:	681b      	ldr	r3, [r3, #0]
 800b184:	685b      	ldr	r3, [r3, #4]
 800b186:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800b18a:	687b      	ldr	r3, [r7, #4]
 800b18c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800b18e:	687b      	ldr	r3, [r7, #4]
 800b190:	681b      	ldr	r3, [r3, #0]
 800b192:	430a      	orrs	r2, r1
 800b194:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800b196:	687b      	ldr	r3, [r7, #4]
 800b198:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b19a:	f003 0302 	and.w	r3, r3, #2
 800b19e:	2b00      	cmp	r3, #0
 800b1a0:	d00a      	beq.n	800b1b8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800b1a2:	687b      	ldr	r3, [r7, #4]
 800b1a4:	681b      	ldr	r3, [r3, #0]
 800b1a6:	685b      	ldr	r3, [r3, #4]
 800b1a8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800b1ac:	687b      	ldr	r3, [r7, #4]
 800b1ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b1b0:	687b      	ldr	r3, [r7, #4]
 800b1b2:	681b      	ldr	r3, [r3, #0]
 800b1b4:	430a      	orrs	r2, r1
 800b1b6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800b1b8:	687b      	ldr	r3, [r7, #4]
 800b1ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b1bc:	f003 0304 	and.w	r3, r3, #4
 800b1c0:	2b00      	cmp	r3, #0
 800b1c2:	d00a      	beq.n	800b1da <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800b1c4:	687b      	ldr	r3, [r7, #4]
 800b1c6:	681b      	ldr	r3, [r3, #0]
 800b1c8:	685b      	ldr	r3, [r3, #4]
 800b1ca:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800b1ce:	687b      	ldr	r3, [r7, #4]
 800b1d0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b1d2:	687b      	ldr	r3, [r7, #4]
 800b1d4:	681b      	ldr	r3, [r3, #0]
 800b1d6:	430a      	orrs	r2, r1
 800b1d8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800b1da:	687b      	ldr	r3, [r7, #4]
 800b1dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b1de:	f003 0308 	and.w	r3, r3, #8
 800b1e2:	2b00      	cmp	r3, #0
 800b1e4:	d00a      	beq.n	800b1fc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800b1e6:	687b      	ldr	r3, [r7, #4]
 800b1e8:	681b      	ldr	r3, [r3, #0]
 800b1ea:	685b      	ldr	r3, [r3, #4]
 800b1ec:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800b1f0:	687b      	ldr	r3, [r7, #4]
 800b1f2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b1f4:	687b      	ldr	r3, [r7, #4]
 800b1f6:	681b      	ldr	r3, [r3, #0]
 800b1f8:	430a      	orrs	r2, r1
 800b1fa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800b1fc:	687b      	ldr	r3, [r7, #4]
 800b1fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b200:	f003 0310 	and.w	r3, r3, #16
 800b204:	2b00      	cmp	r3, #0
 800b206:	d00a      	beq.n	800b21e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800b208:	687b      	ldr	r3, [r7, #4]
 800b20a:	681b      	ldr	r3, [r3, #0]
 800b20c:	689b      	ldr	r3, [r3, #8]
 800b20e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800b212:	687b      	ldr	r3, [r7, #4]
 800b214:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b216:	687b      	ldr	r3, [r7, #4]
 800b218:	681b      	ldr	r3, [r3, #0]
 800b21a:	430a      	orrs	r2, r1
 800b21c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800b21e:	687b      	ldr	r3, [r7, #4]
 800b220:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b222:	f003 0320 	and.w	r3, r3, #32
 800b226:	2b00      	cmp	r3, #0
 800b228:	d00a      	beq.n	800b240 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800b22a:	687b      	ldr	r3, [r7, #4]
 800b22c:	681b      	ldr	r3, [r3, #0]
 800b22e:	689b      	ldr	r3, [r3, #8]
 800b230:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800b234:	687b      	ldr	r3, [r7, #4]
 800b236:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800b238:	687b      	ldr	r3, [r7, #4]
 800b23a:	681b      	ldr	r3, [r3, #0]
 800b23c:	430a      	orrs	r2, r1
 800b23e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800b240:	687b      	ldr	r3, [r7, #4]
 800b242:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b244:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b248:	2b00      	cmp	r3, #0
 800b24a:	d01a      	beq.n	800b282 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800b24c:	687b      	ldr	r3, [r7, #4]
 800b24e:	681b      	ldr	r3, [r3, #0]
 800b250:	685b      	ldr	r3, [r3, #4]
 800b252:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800b256:	687b      	ldr	r3, [r7, #4]
 800b258:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800b25a:	687b      	ldr	r3, [r7, #4]
 800b25c:	681b      	ldr	r3, [r3, #0]
 800b25e:	430a      	orrs	r2, r1
 800b260:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800b262:	687b      	ldr	r3, [r7, #4]
 800b264:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b266:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b26a:	d10a      	bne.n	800b282 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800b26c:	687b      	ldr	r3, [r7, #4]
 800b26e:	681b      	ldr	r3, [r3, #0]
 800b270:	685b      	ldr	r3, [r3, #4]
 800b272:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800b276:	687b      	ldr	r3, [r7, #4]
 800b278:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b27a:	687b      	ldr	r3, [r7, #4]
 800b27c:	681b      	ldr	r3, [r3, #0]
 800b27e:	430a      	orrs	r2, r1
 800b280:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800b282:	687b      	ldr	r3, [r7, #4]
 800b284:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b286:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b28a:	2b00      	cmp	r3, #0
 800b28c:	d00a      	beq.n	800b2a4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800b28e:	687b      	ldr	r3, [r7, #4]
 800b290:	681b      	ldr	r3, [r3, #0]
 800b292:	685b      	ldr	r3, [r3, #4]
 800b294:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800b298:	687b      	ldr	r3, [r7, #4]
 800b29a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800b29c:	687b      	ldr	r3, [r7, #4]
 800b29e:	681b      	ldr	r3, [r3, #0]
 800b2a0:	430a      	orrs	r2, r1
 800b2a2:	605a      	str	r2, [r3, #4]
  }
}
 800b2a4:	bf00      	nop
 800b2a6:	370c      	adds	r7, #12
 800b2a8:	46bd      	mov	sp, r7
 800b2aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2ae:	4770      	bx	lr

0800b2b0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800b2b0:	b580      	push	{r7, lr}
 800b2b2:	b098      	sub	sp, #96	; 0x60
 800b2b4:	af02      	add	r7, sp, #8
 800b2b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b2b8:	687b      	ldr	r3, [r7, #4]
 800b2ba:	2200      	movs	r2, #0
 800b2bc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800b2c0:	f7f9 fc66 	bl	8004b90 <HAL_GetTick>
 800b2c4:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800b2c6:	687b      	ldr	r3, [r7, #4]
 800b2c8:	681b      	ldr	r3, [r3, #0]
 800b2ca:	681b      	ldr	r3, [r3, #0]
 800b2cc:	f003 0308 	and.w	r3, r3, #8
 800b2d0:	2b08      	cmp	r3, #8
 800b2d2:	d12e      	bne.n	800b332 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b2d4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800b2d8:	9300      	str	r3, [sp, #0]
 800b2da:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b2dc:	2200      	movs	r2, #0
 800b2de:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800b2e2:	6878      	ldr	r0, [r7, #4]
 800b2e4:	f000 f88c 	bl	800b400 <UART_WaitOnFlagUntilTimeout>
 800b2e8:	4603      	mov	r3, r0
 800b2ea:	2b00      	cmp	r3, #0
 800b2ec:	d021      	beq.n	800b332 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800b2ee:	687b      	ldr	r3, [r7, #4]
 800b2f0:	681b      	ldr	r3, [r3, #0]
 800b2f2:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b2f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b2f6:	e853 3f00 	ldrex	r3, [r3]
 800b2fa:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800b2fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b2fe:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b302:	653b      	str	r3, [r7, #80]	; 0x50
 800b304:	687b      	ldr	r3, [r7, #4]
 800b306:	681b      	ldr	r3, [r3, #0]
 800b308:	461a      	mov	r2, r3
 800b30a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b30c:	647b      	str	r3, [r7, #68]	; 0x44
 800b30e:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b310:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800b312:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b314:	e841 2300 	strex	r3, r2, [r1]
 800b318:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800b31a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b31c:	2b00      	cmp	r3, #0
 800b31e:	d1e6      	bne.n	800b2ee <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800b320:	687b      	ldr	r3, [r7, #4]
 800b322:	2220      	movs	r2, #32
 800b324:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 800b326:	687b      	ldr	r3, [r7, #4]
 800b328:	2200      	movs	r2, #0
 800b32a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b32e:	2303      	movs	r3, #3
 800b330:	e062      	b.n	800b3f8 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800b332:	687b      	ldr	r3, [r7, #4]
 800b334:	681b      	ldr	r3, [r3, #0]
 800b336:	681b      	ldr	r3, [r3, #0]
 800b338:	f003 0304 	and.w	r3, r3, #4
 800b33c:	2b04      	cmp	r3, #4
 800b33e:	d149      	bne.n	800b3d4 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b340:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800b344:	9300      	str	r3, [sp, #0]
 800b346:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b348:	2200      	movs	r2, #0
 800b34a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800b34e:	6878      	ldr	r0, [r7, #4]
 800b350:	f000 f856 	bl	800b400 <UART_WaitOnFlagUntilTimeout>
 800b354:	4603      	mov	r3, r0
 800b356:	2b00      	cmp	r3, #0
 800b358:	d03c      	beq.n	800b3d4 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800b35a:	687b      	ldr	r3, [r7, #4]
 800b35c:	681b      	ldr	r3, [r3, #0]
 800b35e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b360:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b362:	e853 3f00 	ldrex	r3, [r3]
 800b366:	623b      	str	r3, [r7, #32]
   return(result);
 800b368:	6a3b      	ldr	r3, [r7, #32]
 800b36a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800b36e:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b370:	687b      	ldr	r3, [r7, #4]
 800b372:	681b      	ldr	r3, [r3, #0]
 800b374:	461a      	mov	r2, r3
 800b376:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b378:	633b      	str	r3, [r7, #48]	; 0x30
 800b37a:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b37c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800b37e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b380:	e841 2300 	strex	r3, r2, [r1]
 800b384:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800b386:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b388:	2b00      	cmp	r3, #0
 800b38a:	d1e6      	bne.n	800b35a <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b38c:	687b      	ldr	r3, [r7, #4]
 800b38e:	681b      	ldr	r3, [r3, #0]
 800b390:	3308      	adds	r3, #8
 800b392:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b394:	693b      	ldr	r3, [r7, #16]
 800b396:	e853 3f00 	ldrex	r3, [r3]
 800b39a:	60fb      	str	r3, [r7, #12]
   return(result);
 800b39c:	68fb      	ldr	r3, [r7, #12]
 800b39e:	f023 0301 	bic.w	r3, r3, #1
 800b3a2:	64bb      	str	r3, [r7, #72]	; 0x48
 800b3a4:	687b      	ldr	r3, [r7, #4]
 800b3a6:	681b      	ldr	r3, [r3, #0]
 800b3a8:	3308      	adds	r3, #8
 800b3aa:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b3ac:	61fa      	str	r2, [r7, #28]
 800b3ae:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b3b0:	69b9      	ldr	r1, [r7, #24]
 800b3b2:	69fa      	ldr	r2, [r7, #28]
 800b3b4:	e841 2300 	strex	r3, r2, [r1]
 800b3b8:	617b      	str	r3, [r7, #20]
   return(result);
 800b3ba:	697b      	ldr	r3, [r7, #20]
 800b3bc:	2b00      	cmp	r3, #0
 800b3be:	d1e5      	bne.n	800b38c <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 800b3c0:	687b      	ldr	r3, [r7, #4]
 800b3c2:	2220      	movs	r2, #32
 800b3c4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 800b3c8:	687b      	ldr	r3, [r7, #4]
 800b3ca:	2200      	movs	r2, #0
 800b3cc:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b3d0:	2303      	movs	r3, #3
 800b3d2:	e011      	b.n	800b3f8 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800b3d4:	687b      	ldr	r3, [r7, #4]
 800b3d6:	2220      	movs	r2, #32
 800b3d8:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800b3da:	687b      	ldr	r3, [r7, #4]
 800b3dc:	2220      	movs	r2, #32
 800b3de:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b3e2:	687b      	ldr	r3, [r7, #4]
 800b3e4:	2200      	movs	r2, #0
 800b3e6:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b3e8:	687b      	ldr	r3, [r7, #4]
 800b3ea:	2200      	movs	r2, #0
 800b3ec:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 800b3ee:	687b      	ldr	r3, [r7, #4]
 800b3f0:	2200      	movs	r2, #0
 800b3f2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 800b3f6:	2300      	movs	r3, #0
}
 800b3f8:	4618      	mov	r0, r3
 800b3fa:	3758      	adds	r7, #88	; 0x58
 800b3fc:	46bd      	mov	sp, r7
 800b3fe:	bd80      	pop	{r7, pc}

0800b400 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800b400:	b580      	push	{r7, lr}
 800b402:	b084      	sub	sp, #16
 800b404:	af00      	add	r7, sp, #0
 800b406:	60f8      	str	r0, [r7, #12]
 800b408:	60b9      	str	r1, [r7, #8]
 800b40a:	603b      	str	r3, [r7, #0]
 800b40c:	4613      	mov	r3, r2
 800b40e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b410:	e049      	b.n	800b4a6 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b412:	69bb      	ldr	r3, [r7, #24]
 800b414:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b418:	d045      	beq.n	800b4a6 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b41a:	f7f9 fbb9 	bl	8004b90 <HAL_GetTick>
 800b41e:	4602      	mov	r2, r0
 800b420:	683b      	ldr	r3, [r7, #0]
 800b422:	1ad3      	subs	r3, r2, r3
 800b424:	69ba      	ldr	r2, [r7, #24]
 800b426:	429a      	cmp	r2, r3
 800b428:	d302      	bcc.n	800b430 <UART_WaitOnFlagUntilTimeout+0x30>
 800b42a:	69bb      	ldr	r3, [r7, #24]
 800b42c:	2b00      	cmp	r3, #0
 800b42e:	d101      	bne.n	800b434 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800b430:	2303      	movs	r3, #3
 800b432:	e048      	b.n	800b4c6 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800b434:	68fb      	ldr	r3, [r7, #12]
 800b436:	681b      	ldr	r3, [r3, #0]
 800b438:	681b      	ldr	r3, [r3, #0]
 800b43a:	f003 0304 	and.w	r3, r3, #4
 800b43e:	2b00      	cmp	r3, #0
 800b440:	d031      	beq.n	800b4a6 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800b442:	68fb      	ldr	r3, [r7, #12]
 800b444:	681b      	ldr	r3, [r3, #0]
 800b446:	69db      	ldr	r3, [r3, #28]
 800b448:	f003 0308 	and.w	r3, r3, #8
 800b44c:	2b08      	cmp	r3, #8
 800b44e:	d110      	bne.n	800b472 <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800b450:	68fb      	ldr	r3, [r7, #12]
 800b452:	681b      	ldr	r3, [r3, #0]
 800b454:	2208      	movs	r2, #8
 800b456:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 800b458:	68f8      	ldr	r0, [r7, #12]
 800b45a:	f000 f838 	bl	800b4ce <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 800b45e:	68fb      	ldr	r3, [r7, #12]
 800b460:	2208      	movs	r2, #8
 800b462:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 800b466:	68fb      	ldr	r3, [r7, #12]
 800b468:	2200      	movs	r2, #0
 800b46a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

           return HAL_ERROR;
 800b46e:	2301      	movs	r3, #1
 800b470:	e029      	b.n	800b4c6 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800b472:	68fb      	ldr	r3, [r7, #12]
 800b474:	681b      	ldr	r3, [r3, #0]
 800b476:	69db      	ldr	r3, [r3, #28]
 800b478:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b47c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b480:	d111      	bne.n	800b4a6 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800b482:	68fb      	ldr	r3, [r7, #12]
 800b484:	681b      	ldr	r3, [r3, #0]
 800b486:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800b48a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800b48c:	68f8      	ldr	r0, [r7, #12]
 800b48e:	f000 f81e 	bl	800b4ce <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800b492:	68fb      	ldr	r3, [r7, #12]
 800b494:	2220      	movs	r2, #32
 800b496:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800b49a:	68fb      	ldr	r3, [r7, #12]
 800b49c:	2200      	movs	r2, #0
 800b49e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 800b4a2:	2303      	movs	r3, #3
 800b4a4:	e00f      	b.n	800b4c6 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b4a6:	68fb      	ldr	r3, [r7, #12]
 800b4a8:	681b      	ldr	r3, [r3, #0]
 800b4aa:	69da      	ldr	r2, [r3, #28]
 800b4ac:	68bb      	ldr	r3, [r7, #8]
 800b4ae:	4013      	ands	r3, r2
 800b4b0:	68ba      	ldr	r2, [r7, #8]
 800b4b2:	429a      	cmp	r2, r3
 800b4b4:	bf0c      	ite	eq
 800b4b6:	2301      	moveq	r3, #1
 800b4b8:	2300      	movne	r3, #0
 800b4ba:	b2db      	uxtb	r3, r3
 800b4bc:	461a      	mov	r2, r3
 800b4be:	79fb      	ldrb	r3, [r7, #7]
 800b4c0:	429a      	cmp	r2, r3
 800b4c2:	d0a6      	beq.n	800b412 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800b4c4:	2300      	movs	r3, #0
}
 800b4c6:	4618      	mov	r0, r3
 800b4c8:	3710      	adds	r7, #16
 800b4ca:	46bd      	mov	sp, r7
 800b4cc:	bd80      	pop	{r7, pc}

0800b4ce <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800b4ce:	b480      	push	{r7}
 800b4d0:	b095      	sub	sp, #84	; 0x54
 800b4d2:	af00      	add	r7, sp, #0
 800b4d4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800b4d6:	687b      	ldr	r3, [r7, #4]
 800b4d8:	681b      	ldr	r3, [r3, #0]
 800b4da:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b4dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b4de:	e853 3f00 	ldrex	r3, [r3]
 800b4e2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800b4e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b4e6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800b4ea:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b4ec:	687b      	ldr	r3, [r7, #4]
 800b4ee:	681b      	ldr	r3, [r3, #0]
 800b4f0:	461a      	mov	r2, r3
 800b4f2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b4f4:	643b      	str	r3, [r7, #64]	; 0x40
 800b4f6:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b4f8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800b4fa:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800b4fc:	e841 2300 	strex	r3, r2, [r1]
 800b500:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800b502:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b504:	2b00      	cmp	r3, #0
 800b506:	d1e6      	bne.n	800b4d6 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b508:	687b      	ldr	r3, [r7, #4]
 800b50a:	681b      	ldr	r3, [r3, #0]
 800b50c:	3308      	adds	r3, #8
 800b50e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b510:	6a3b      	ldr	r3, [r7, #32]
 800b512:	e853 3f00 	ldrex	r3, [r3]
 800b516:	61fb      	str	r3, [r7, #28]
   return(result);
 800b518:	69fb      	ldr	r3, [r7, #28]
 800b51a:	f023 0301 	bic.w	r3, r3, #1
 800b51e:	64bb      	str	r3, [r7, #72]	; 0x48
 800b520:	687b      	ldr	r3, [r7, #4]
 800b522:	681b      	ldr	r3, [r3, #0]
 800b524:	3308      	adds	r3, #8
 800b526:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b528:	62fa      	str	r2, [r7, #44]	; 0x2c
 800b52a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b52c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800b52e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b530:	e841 2300 	strex	r3, r2, [r1]
 800b534:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800b536:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b538:	2b00      	cmp	r3, #0
 800b53a:	d1e5      	bne.n	800b508 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b53c:	687b      	ldr	r3, [r7, #4]
 800b53e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b540:	2b01      	cmp	r3, #1
 800b542:	d118      	bne.n	800b576 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b544:	687b      	ldr	r3, [r7, #4]
 800b546:	681b      	ldr	r3, [r3, #0]
 800b548:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b54a:	68fb      	ldr	r3, [r7, #12]
 800b54c:	e853 3f00 	ldrex	r3, [r3]
 800b550:	60bb      	str	r3, [r7, #8]
   return(result);
 800b552:	68bb      	ldr	r3, [r7, #8]
 800b554:	f023 0310 	bic.w	r3, r3, #16
 800b558:	647b      	str	r3, [r7, #68]	; 0x44
 800b55a:	687b      	ldr	r3, [r7, #4]
 800b55c:	681b      	ldr	r3, [r3, #0]
 800b55e:	461a      	mov	r2, r3
 800b560:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b562:	61bb      	str	r3, [r7, #24]
 800b564:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b566:	6979      	ldr	r1, [r7, #20]
 800b568:	69ba      	ldr	r2, [r7, #24]
 800b56a:	e841 2300 	strex	r3, r2, [r1]
 800b56e:	613b      	str	r3, [r7, #16]
   return(result);
 800b570:	693b      	ldr	r3, [r7, #16]
 800b572:	2b00      	cmp	r3, #0
 800b574:	d1e6      	bne.n	800b544 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800b576:	687b      	ldr	r3, [r7, #4]
 800b578:	2220      	movs	r2, #32
 800b57a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b57e:	687b      	ldr	r3, [r7, #4]
 800b580:	2200      	movs	r2, #0
 800b582:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800b584:	687b      	ldr	r3, [r7, #4]
 800b586:	2200      	movs	r2, #0
 800b588:	669a      	str	r2, [r3, #104]	; 0x68
}
 800b58a:	bf00      	nop
 800b58c:	3754      	adds	r7, #84	; 0x54
 800b58e:	46bd      	mov	sp, r7
 800b590:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b594:	4770      	bx	lr
	...

0800b598 <__errno>:
 800b598:	4b01      	ldr	r3, [pc, #4]	; (800b5a0 <__errno+0x8>)
 800b59a:	6818      	ldr	r0, [r3, #0]
 800b59c:	4770      	bx	lr
 800b59e:	bf00      	nop
 800b5a0:	20000014 	.word	0x20000014

0800b5a4 <__libc_init_array>:
 800b5a4:	b570      	push	{r4, r5, r6, lr}
 800b5a6:	4d0d      	ldr	r5, [pc, #52]	; (800b5dc <__libc_init_array+0x38>)
 800b5a8:	4c0d      	ldr	r4, [pc, #52]	; (800b5e0 <__libc_init_array+0x3c>)
 800b5aa:	1b64      	subs	r4, r4, r5
 800b5ac:	10a4      	asrs	r4, r4, #2
 800b5ae:	2600      	movs	r6, #0
 800b5b0:	42a6      	cmp	r6, r4
 800b5b2:	d109      	bne.n	800b5c8 <__libc_init_array+0x24>
 800b5b4:	4d0b      	ldr	r5, [pc, #44]	; (800b5e4 <__libc_init_array+0x40>)
 800b5b6:	4c0c      	ldr	r4, [pc, #48]	; (800b5e8 <__libc_init_array+0x44>)
 800b5b8:	f002 ffe2 	bl	800e580 <_init>
 800b5bc:	1b64      	subs	r4, r4, r5
 800b5be:	10a4      	asrs	r4, r4, #2
 800b5c0:	2600      	movs	r6, #0
 800b5c2:	42a6      	cmp	r6, r4
 800b5c4:	d105      	bne.n	800b5d2 <__libc_init_array+0x2e>
 800b5c6:	bd70      	pop	{r4, r5, r6, pc}
 800b5c8:	f855 3b04 	ldr.w	r3, [r5], #4
 800b5cc:	4798      	blx	r3
 800b5ce:	3601      	adds	r6, #1
 800b5d0:	e7ee      	b.n	800b5b0 <__libc_init_array+0xc>
 800b5d2:	f855 3b04 	ldr.w	r3, [r5], #4
 800b5d6:	4798      	blx	r3
 800b5d8:	3601      	adds	r6, #1
 800b5da:	e7f2      	b.n	800b5c2 <__libc_init_array+0x1e>
 800b5dc:	0801400c 	.word	0x0801400c
 800b5e0:	0801400c 	.word	0x0801400c
 800b5e4:	0801400c 	.word	0x0801400c
 800b5e8:	08014010 	.word	0x08014010

0800b5ec <memcpy>:
 800b5ec:	440a      	add	r2, r1
 800b5ee:	4291      	cmp	r1, r2
 800b5f0:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800b5f4:	d100      	bne.n	800b5f8 <memcpy+0xc>
 800b5f6:	4770      	bx	lr
 800b5f8:	b510      	push	{r4, lr}
 800b5fa:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b5fe:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b602:	4291      	cmp	r1, r2
 800b604:	d1f9      	bne.n	800b5fa <memcpy+0xe>
 800b606:	bd10      	pop	{r4, pc}

0800b608 <memset>:
 800b608:	4402      	add	r2, r0
 800b60a:	4603      	mov	r3, r0
 800b60c:	4293      	cmp	r3, r2
 800b60e:	d100      	bne.n	800b612 <memset+0xa>
 800b610:	4770      	bx	lr
 800b612:	f803 1b01 	strb.w	r1, [r3], #1
 800b616:	e7f9      	b.n	800b60c <memset+0x4>

0800b618 <__cvt>:
 800b618:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b61c:	ec55 4b10 	vmov	r4, r5, d0
 800b620:	2d00      	cmp	r5, #0
 800b622:	460e      	mov	r6, r1
 800b624:	4619      	mov	r1, r3
 800b626:	462b      	mov	r3, r5
 800b628:	bfbb      	ittet	lt
 800b62a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800b62e:	461d      	movlt	r5, r3
 800b630:	2300      	movge	r3, #0
 800b632:	232d      	movlt	r3, #45	; 0x2d
 800b634:	700b      	strb	r3, [r1, #0]
 800b636:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b638:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800b63c:	4691      	mov	r9, r2
 800b63e:	f023 0820 	bic.w	r8, r3, #32
 800b642:	bfbc      	itt	lt
 800b644:	4622      	movlt	r2, r4
 800b646:	4614      	movlt	r4, r2
 800b648:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800b64c:	d005      	beq.n	800b65a <__cvt+0x42>
 800b64e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800b652:	d100      	bne.n	800b656 <__cvt+0x3e>
 800b654:	3601      	adds	r6, #1
 800b656:	2102      	movs	r1, #2
 800b658:	e000      	b.n	800b65c <__cvt+0x44>
 800b65a:	2103      	movs	r1, #3
 800b65c:	ab03      	add	r3, sp, #12
 800b65e:	9301      	str	r3, [sp, #4]
 800b660:	ab02      	add	r3, sp, #8
 800b662:	9300      	str	r3, [sp, #0]
 800b664:	ec45 4b10 	vmov	d0, r4, r5
 800b668:	4653      	mov	r3, sl
 800b66a:	4632      	mov	r2, r6
 800b66c:	f000 fcec 	bl	800c048 <_dtoa_r>
 800b670:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800b674:	4607      	mov	r7, r0
 800b676:	d102      	bne.n	800b67e <__cvt+0x66>
 800b678:	f019 0f01 	tst.w	r9, #1
 800b67c:	d022      	beq.n	800b6c4 <__cvt+0xac>
 800b67e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800b682:	eb07 0906 	add.w	r9, r7, r6
 800b686:	d110      	bne.n	800b6aa <__cvt+0x92>
 800b688:	783b      	ldrb	r3, [r7, #0]
 800b68a:	2b30      	cmp	r3, #48	; 0x30
 800b68c:	d10a      	bne.n	800b6a4 <__cvt+0x8c>
 800b68e:	2200      	movs	r2, #0
 800b690:	2300      	movs	r3, #0
 800b692:	4620      	mov	r0, r4
 800b694:	4629      	mov	r1, r5
 800b696:	f7f5 fa17 	bl	8000ac8 <__aeabi_dcmpeq>
 800b69a:	b918      	cbnz	r0, 800b6a4 <__cvt+0x8c>
 800b69c:	f1c6 0601 	rsb	r6, r6, #1
 800b6a0:	f8ca 6000 	str.w	r6, [sl]
 800b6a4:	f8da 3000 	ldr.w	r3, [sl]
 800b6a8:	4499      	add	r9, r3
 800b6aa:	2200      	movs	r2, #0
 800b6ac:	2300      	movs	r3, #0
 800b6ae:	4620      	mov	r0, r4
 800b6b0:	4629      	mov	r1, r5
 800b6b2:	f7f5 fa09 	bl	8000ac8 <__aeabi_dcmpeq>
 800b6b6:	b108      	cbz	r0, 800b6bc <__cvt+0xa4>
 800b6b8:	f8cd 900c 	str.w	r9, [sp, #12]
 800b6bc:	2230      	movs	r2, #48	; 0x30
 800b6be:	9b03      	ldr	r3, [sp, #12]
 800b6c0:	454b      	cmp	r3, r9
 800b6c2:	d307      	bcc.n	800b6d4 <__cvt+0xbc>
 800b6c4:	9b03      	ldr	r3, [sp, #12]
 800b6c6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b6c8:	1bdb      	subs	r3, r3, r7
 800b6ca:	4638      	mov	r0, r7
 800b6cc:	6013      	str	r3, [r2, #0]
 800b6ce:	b004      	add	sp, #16
 800b6d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b6d4:	1c59      	adds	r1, r3, #1
 800b6d6:	9103      	str	r1, [sp, #12]
 800b6d8:	701a      	strb	r2, [r3, #0]
 800b6da:	e7f0      	b.n	800b6be <__cvt+0xa6>

0800b6dc <__exponent>:
 800b6dc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b6de:	4603      	mov	r3, r0
 800b6e0:	2900      	cmp	r1, #0
 800b6e2:	bfb8      	it	lt
 800b6e4:	4249      	neglt	r1, r1
 800b6e6:	f803 2b02 	strb.w	r2, [r3], #2
 800b6ea:	bfb4      	ite	lt
 800b6ec:	222d      	movlt	r2, #45	; 0x2d
 800b6ee:	222b      	movge	r2, #43	; 0x2b
 800b6f0:	2909      	cmp	r1, #9
 800b6f2:	7042      	strb	r2, [r0, #1]
 800b6f4:	dd2a      	ble.n	800b74c <__exponent+0x70>
 800b6f6:	f10d 0407 	add.w	r4, sp, #7
 800b6fa:	46a4      	mov	ip, r4
 800b6fc:	270a      	movs	r7, #10
 800b6fe:	46a6      	mov	lr, r4
 800b700:	460a      	mov	r2, r1
 800b702:	fb91 f6f7 	sdiv	r6, r1, r7
 800b706:	fb07 1516 	mls	r5, r7, r6, r1
 800b70a:	3530      	adds	r5, #48	; 0x30
 800b70c:	2a63      	cmp	r2, #99	; 0x63
 800b70e:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 800b712:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800b716:	4631      	mov	r1, r6
 800b718:	dcf1      	bgt.n	800b6fe <__exponent+0x22>
 800b71a:	3130      	adds	r1, #48	; 0x30
 800b71c:	f1ae 0502 	sub.w	r5, lr, #2
 800b720:	f804 1c01 	strb.w	r1, [r4, #-1]
 800b724:	1c44      	adds	r4, r0, #1
 800b726:	4629      	mov	r1, r5
 800b728:	4561      	cmp	r1, ip
 800b72a:	d30a      	bcc.n	800b742 <__exponent+0x66>
 800b72c:	f10d 0209 	add.w	r2, sp, #9
 800b730:	eba2 020e 	sub.w	r2, r2, lr
 800b734:	4565      	cmp	r5, ip
 800b736:	bf88      	it	hi
 800b738:	2200      	movhi	r2, #0
 800b73a:	4413      	add	r3, r2
 800b73c:	1a18      	subs	r0, r3, r0
 800b73e:	b003      	add	sp, #12
 800b740:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b742:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b746:	f804 2f01 	strb.w	r2, [r4, #1]!
 800b74a:	e7ed      	b.n	800b728 <__exponent+0x4c>
 800b74c:	2330      	movs	r3, #48	; 0x30
 800b74e:	3130      	adds	r1, #48	; 0x30
 800b750:	7083      	strb	r3, [r0, #2]
 800b752:	70c1      	strb	r1, [r0, #3]
 800b754:	1d03      	adds	r3, r0, #4
 800b756:	e7f1      	b.n	800b73c <__exponent+0x60>

0800b758 <_printf_float>:
 800b758:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b75c:	ed2d 8b02 	vpush	{d8}
 800b760:	b08d      	sub	sp, #52	; 0x34
 800b762:	460c      	mov	r4, r1
 800b764:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800b768:	4616      	mov	r6, r2
 800b76a:	461f      	mov	r7, r3
 800b76c:	4605      	mov	r5, r0
 800b76e:	f001 fa59 	bl	800cc24 <_localeconv_r>
 800b772:	f8d0 a000 	ldr.w	sl, [r0]
 800b776:	4650      	mov	r0, sl
 800b778:	f7f4 fd2a 	bl	80001d0 <strlen>
 800b77c:	2300      	movs	r3, #0
 800b77e:	930a      	str	r3, [sp, #40]	; 0x28
 800b780:	6823      	ldr	r3, [r4, #0]
 800b782:	9305      	str	r3, [sp, #20]
 800b784:	f8d8 3000 	ldr.w	r3, [r8]
 800b788:	f894 b018 	ldrb.w	fp, [r4, #24]
 800b78c:	3307      	adds	r3, #7
 800b78e:	f023 0307 	bic.w	r3, r3, #7
 800b792:	f103 0208 	add.w	r2, r3, #8
 800b796:	f8c8 2000 	str.w	r2, [r8]
 800b79a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b79e:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800b7a2:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800b7a6:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800b7aa:	9307      	str	r3, [sp, #28]
 800b7ac:	f8cd 8018 	str.w	r8, [sp, #24]
 800b7b0:	ee08 0a10 	vmov	s16, r0
 800b7b4:	4b9f      	ldr	r3, [pc, #636]	; (800ba34 <_printf_float+0x2dc>)
 800b7b6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b7ba:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b7be:	f7f5 f9b5 	bl	8000b2c <__aeabi_dcmpun>
 800b7c2:	bb88      	cbnz	r0, 800b828 <_printf_float+0xd0>
 800b7c4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b7c8:	4b9a      	ldr	r3, [pc, #616]	; (800ba34 <_printf_float+0x2dc>)
 800b7ca:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b7ce:	f7f5 f98f 	bl	8000af0 <__aeabi_dcmple>
 800b7d2:	bb48      	cbnz	r0, 800b828 <_printf_float+0xd0>
 800b7d4:	2200      	movs	r2, #0
 800b7d6:	2300      	movs	r3, #0
 800b7d8:	4640      	mov	r0, r8
 800b7da:	4649      	mov	r1, r9
 800b7dc:	f7f5 f97e 	bl	8000adc <__aeabi_dcmplt>
 800b7e0:	b110      	cbz	r0, 800b7e8 <_printf_float+0x90>
 800b7e2:	232d      	movs	r3, #45	; 0x2d
 800b7e4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b7e8:	4b93      	ldr	r3, [pc, #588]	; (800ba38 <_printf_float+0x2e0>)
 800b7ea:	4894      	ldr	r0, [pc, #592]	; (800ba3c <_printf_float+0x2e4>)
 800b7ec:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800b7f0:	bf94      	ite	ls
 800b7f2:	4698      	movls	r8, r3
 800b7f4:	4680      	movhi	r8, r0
 800b7f6:	2303      	movs	r3, #3
 800b7f8:	6123      	str	r3, [r4, #16]
 800b7fa:	9b05      	ldr	r3, [sp, #20]
 800b7fc:	f023 0204 	bic.w	r2, r3, #4
 800b800:	6022      	str	r2, [r4, #0]
 800b802:	f04f 0900 	mov.w	r9, #0
 800b806:	9700      	str	r7, [sp, #0]
 800b808:	4633      	mov	r3, r6
 800b80a:	aa0b      	add	r2, sp, #44	; 0x2c
 800b80c:	4621      	mov	r1, r4
 800b80e:	4628      	mov	r0, r5
 800b810:	f000 f9d8 	bl	800bbc4 <_printf_common>
 800b814:	3001      	adds	r0, #1
 800b816:	f040 8090 	bne.w	800b93a <_printf_float+0x1e2>
 800b81a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b81e:	b00d      	add	sp, #52	; 0x34
 800b820:	ecbd 8b02 	vpop	{d8}
 800b824:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b828:	4642      	mov	r2, r8
 800b82a:	464b      	mov	r3, r9
 800b82c:	4640      	mov	r0, r8
 800b82e:	4649      	mov	r1, r9
 800b830:	f7f5 f97c 	bl	8000b2c <__aeabi_dcmpun>
 800b834:	b140      	cbz	r0, 800b848 <_printf_float+0xf0>
 800b836:	464b      	mov	r3, r9
 800b838:	2b00      	cmp	r3, #0
 800b83a:	bfbc      	itt	lt
 800b83c:	232d      	movlt	r3, #45	; 0x2d
 800b83e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800b842:	487f      	ldr	r0, [pc, #508]	; (800ba40 <_printf_float+0x2e8>)
 800b844:	4b7f      	ldr	r3, [pc, #508]	; (800ba44 <_printf_float+0x2ec>)
 800b846:	e7d1      	b.n	800b7ec <_printf_float+0x94>
 800b848:	6863      	ldr	r3, [r4, #4]
 800b84a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800b84e:	9206      	str	r2, [sp, #24]
 800b850:	1c5a      	adds	r2, r3, #1
 800b852:	d13f      	bne.n	800b8d4 <_printf_float+0x17c>
 800b854:	2306      	movs	r3, #6
 800b856:	6063      	str	r3, [r4, #4]
 800b858:	9b05      	ldr	r3, [sp, #20]
 800b85a:	6861      	ldr	r1, [r4, #4]
 800b85c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800b860:	2300      	movs	r3, #0
 800b862:	9303      	str	r3, [sp, #12]
 800b864:	ab0a      	add	r3, sp, #40	; 0x28
 800b866:	e9cd b301 	strd	fp, r3, [sp, #4]
 800b86a:	ab09      	add	r3, sp, #36	; 0x24
 800b86c:	ec49 8b10 	vmov	d0, r8, r9
 800b870:	9300      	str	r3, [sp, #0]
 800b872:	6022      	str	r2, [r4, #0]
 800b874:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800b878:	4628      	mov	r0, r5
 800b87a:	f7ff fecd 	bl	800b618 <__cvt>
 800b87e:	9b06      	ldr	r3, [sp, #24]
 800b880:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b882:	2b47      	cmp	r3, #71	; 0x47
 800b884:	4680      	mov	r8, r0
 800b886:	d108      	bne.n	800b89a <_printf_float+0x142>
 800b888:	1cc8      	adds	r0, r1, #3
 800b88a:	db02      	blt.n	800b892 <_printf_float+0x13a>
 800b88c:	6863      	ldr	r3, [r4, #4]
 800b88e:	4299      	cmp	r1, r3
 800b890:	dd41      	ble.n	800b916 <_printf_float+0x1be>
 800b892:	f1ab 0b02 	sub.w	fp, fp, #2
 800b896:	fa5f fb8b 	uxtb.w	fp, fp
 800b89a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800b89e:	d820      	bhi.n	800b8e2 <_printf_float+0x18a>
 800b8a0:	3901      	subs	r1, #1
 800b8a2:	465a      	mov	r2, fp
 800b8a4:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800b8a8:	9109      	str	r1, [sp, #36]	; 0x24
 800b8aa:	f7ff ff17 	bl	800b6dc <__exponent>
 800b8ae:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b8b0:	1813      	adds	r3, r2, r0
 800b8b2:	2a01      	cmp	r2, #1
 800b8b4:	4681      	mov	r9, r0
 800b8b6:	6123      	str	r3, [r4, #16]
 800b8b8:	dc02      	bgt.n	800b8c0 <_printf_float+0x168>
 800b8ba:	6822      	ldr	r2, [r4, #0]
 800b8bc:	07d2      	lsls	r2, r2, #31
 800b8be:	d501      	bpl.n	800b8c4 <_printf_float+0x16c>
 800b8c0:	3301      	adds	r3, #1
 800b8c2:	6123      	str	r3, [r4, #16]
 800b8c4:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800b8c8:	2b00      	cmp	r3, #0
 800b8ca:	d09c      	beq.n	800b806 <_printf_float+0xae>
 800b8cc:	232d      	movs	r3, #45	; 0x2d
 800b8ce:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b8d2:	e798      	b.n	800b806 <_printf_float+0xae>
 800b8d4:	9a06      	ldr	r2, [sp, #24]
 800b8d6:	2a47      	cmp	r2, #71	; 0x47
 800b8d8:	d1be      	bne.n	800b858 <_printf_float+0x100>
 800b8da:	2b00      	cmp	r3, #0
 800b8dc:	d1bc      	bne.n	800b858 <_printf_float+0x100>
 800b8de:	2301      	movs	r3, #1
 800b8e0:	e7b9      	b.n	800b856 <_printf_float+0xfe>
 800b8e2:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800b8e6:	d118      	bne.n	800b91a <_printf_float+0x1c2>
 800b8e8:	2900      	cmp	r1, #0
 800b8ea:	6863      	ldr	r3, [r4, #4]
 800b8ec:	dd0b      	ble.n	800b906 <_printf_float+0x1ae>
 800b8ee:	6121      	str	r1, [r4, #16]
 800b8f0:	b913      	cbnz	r3, 800b8f8 <_printf_float+0x1a0>
 800b8f2:	6822      	ldr	r2, [r4, #0]
 800b8f4:	07d0      	lsls	r0, r2, #31
 800b8f6:	d502      	bpl.n	800b8fe <_printf_float+0x1a6>
 800b8f8:	3301      	adds	r3, #1
 800b8fa:	440b      	add	r3, r1
 800b8fc:	6123      	str	r3, [r4, #16]
 800b8fe:	65a1      	str	r1, [r4, #88]	; 0x58
 800b900:	f04f 0900 	mov.w	r9, #0
 800b904:	e7de      	b.n	800b8c4 <_printf_float+0x16c>
 800b906:	b913      	cbnz	r3, 800b90e <_printf_float+0x1b6>
 800b908:	6822      	ldr	r2, [r4, #0]
 800b90a:	07d2      	lsls	r2, r2, #31
 800b90c:	d501      	bpl.n	800b912 <_printf_float+0x1ba>
 800b90e:	3302      	adds	r3, #2
 800b910:	e7f4      	b.n	800b8fc <_printf_float+0x1a4>
 800b912:	2301      	movs	r3, #1
 800b914:	e7f2      	b.n	800b8fc <_printf_float+0x1a4>
 800b916:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800b91a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b91c:	4299      	cmp	r1, r3
 800b91e:	db05      	blt.n	800b92c <_printf_float+0x1d4>
 800b920:	6823      	ldr	r3, [r4, #0]
 800b922:	6121      	str	r1, [r4, #16]
 800b924:	07d8      	lsls	r0, r3, #31
 800b926:	d5ea      	bpl.n	800b8fe <_printf_float+0x1a6>
 800b928:	1c4b      	adds	r3, r1, #1
 800b92a:	e7e7      	b.n	800b8fc <_printf_float+0x1a4>
 800b92c:	2900      	cmp	r1, #0
 800b92e:	bfd4      	ite	le
 800b930:	f1c1 0202 	rsble	r2, r1, #2
 800b934:	2201      	movgt	r2, #1
 800b936:	4413      	add	r3, r2
 800b938:	e7e0      	b.n	800b8fc <_printf_float+0x1a4>
 800b93a:	6823      	ldr	r3, [r4, #0]
 800b93c:	055a      	lsls	r2, r3, #21
 800b93e:	d407      	bmi.n	800b950 <_printf_float+0x1f8>
 800b940:	6923      	ldr	r3, [r4, #16]
 800b942:	4642      	mov	r2, r8
 800b944:	4631      	mov	r1, r6
 800b946:	4628      	mov	r0, r5
 800b948:	47b8      	blx	r7
 800b94a:	3001      	adds	r0, #1
 800b94c:	d12c      	bne.n	800b9a8 <_printf_float+0x250>
 800b94e:	e764      	b.n	800b81a <_printf_float+0xc2>
 800b950:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800b954:	f240 80e0 	bls.w	800bb18 <_printf_float+0x3c0>
 800b958:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800b95c:	2200      	movs	r2, #0
 800b95e:	2300      	movs	r3, #0
 800b960:	f7f5 f8b2 	bl	8000ac8 <__aeabi_dcmpeq>
 800b964:	2800      	cmp	r0, #0
 800b966:	d034      	beq.n	800b9d2 <_printf_float+0x27a>
 800b968:	4a37      	ldr	r2, [pc, #220]	; (800ba48 <_printf_float+0x2f0>)
 800b96a:	2301      	movs	r3, #1
 800b96c:	4631      	mov	r1, r6
 800b96e:	4628      	mov	r0, r5
 800b970:	47b8      	blx	r7
 800b972:	3001      	adds	r0, #1
 800b974:	f43f af51 	beq.w	800b81a <_printf_float+0xc2>
 800b978:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b97c:	429a      	cmp	r2, r3
 800b97e:	db02      	blt.n	800b986 <_printf_float+0x22e>
 800b980:	6823      	ldr	r3, [r4, #0]
 800b982:	07d8      	lsls	r0, r3, #31
 800b984:	d510      	bpl.n	800b9a8 <_printf_float+0x250>
 800b986:	ee18 3a10 	vmov	r3, s16
 800b98a:	4652      	mov	r2, sl
 800b98c:	4631      	mov	r1, r6
 800b98e:	4628      	mov	r0, r5
 800b990:	47b8      	blx	r7
 800b992:	3001      	adds	r0, #1
 800b994:	f43f af41 	beq.w	800b81a <_printf_float+0xc2>
 800b998:	f04f 0800 	mov.w	r8, #0
 800b99c:	f104 091a 	add.w	r9, r4, #26
 800b9a0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b9a2:	3b01      	subs	r3, #1
 800b9a4:	4543      	cmp	r3, r8
 800b9a6:	dc09      	bgt.n	800b9bc <_printf_float+0x264>
 800b9a8:	6823      	ldr	r3, [r4, #0]
 800b9aa:	079b      	lsls	r3, r3, #30
 800b9ac:	f100 8105 	bmi.w	800bbba <_printf_float+0x462>
 800b9b0:	68e0      	ldr	r0, [r4, #12]
 800b9b2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b9b4:	4298      	cmp	r0, r3
 800b9b6:	bfb8      	it	lt
 800b9b8:	4618      	movlt	r0, r3
 800b9ba:	e730      	b.n	800b81e <_printf_float+0xc6>
 800b9bc:	2301      	movs	r3, #1
 800b9be:	464a      	mov	r2, r9
 800b9c0:	4631      	mov	r1, r6
 800b9c2:	4628      	mov	r0, r5
 800b9c4:	47b8      	blx	r7
 800b9c6:	3001      	adds	r0, #1
 800b9c8:	f43f af27 	beq.w	800b81a <_printf_float+0xc2>
 800b9cc:	f108 0801 	add.w	r8, r8, #1
 800b9d0:	e7e6      	b.n	800b9a0 <_printf_float+0x248>
 800b9d2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b9d4:	2b00      	cmp	r3, #0
 800b9d6:	dc39      	bgt.n	800ba4c <_printf_float+0x2f4>
 800b9d8:	4a1b      	ldr	r2, [pc, #108]	; (800ba48 <_printf_float+0x2f0>)
 800b9da:	2301      	movs	r3, #1
 800b9dc:	4631      	mov	r1, r6
 800b9de:	4628      	mov	r0, r5
 800b9e0:	47b8      	blx	r7
 800b9e2:	3001      	adds	r0, #1
 800b9e4:	f43f af19 	beq.w	800b81a <_printf_float+0xc2>
 800b9e8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b9ec:	4313      	orrs	r3, r2
 800b9ee:	d102      	bne.n	800b9f6 <_printf_float+0x29e>
 800b9f0:	6823      	ldr	r3, [r4, #0]
 800b9f2:	07d9      	lsls	r1, r3, #31
 800b9f4:	d5d8      	bpl.n	800b9a8 <_printf_float+0x250>
 800b9f6:	ee18 3a10 	vmov	r3, s16
 800b9fa:	4652      	mov	r2, sl
 800b9fc:	4631      	mov	r1, r6
 800b9fe:	4628      	mov	r0, r5
 800ba00:	47b8      	blx	r7
 800ba02:	3001      	adds	r0, #1
 800ba04:	f43f af09 	beq.w	800b81a <_printf_float+0xc2>
 800ba08:	f04f 0900 	mov.w	r9, #0
 800ba0c:	f104 0a1a 	add.w	sl, r4, #26
 800ba10:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ba12:	425b      	negs	r3, r3
 800ba14:	454b      	cmp	r3, r9
 800ba16:	dc01      	bgt.n	800ba1c <_printf_float+0x2c4>
 800ba18:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ba1a:	e792      	b.n	800b942 <_printf_float+0x1ea>
 800ba1c:	2301      	movs	r3, #1
 800ba1e:	4652      	mov	r2, sl
 800ba20:	4631      	mov	r1, r6
 800ba22:	4628      	mov	r0, r5
 800ba24:	47b8      	blx	r7
 800ba26:	3001      	adds	r0, #1
 800ba28:	f43f aef7 	beq.w	800b81a <_printf_float+0xc2>
 800ba2c:	f109 0901 	add.w	r9, r9, #1
 800ba30:	e7ee      	b.n	800ba10 <_printf_float+0x2b8>
 800ba32:	bf00      	nop
 800ba34:	7fefffff 	.word	0x7fefffff
 800ba38:	08013c34 	.word	0x08013c34
 800ba3c:	08013c38 	.word	0x08013c38
 800ba40:	08013c40 	.word	0x08013c40
 800ba44:	08013c3c 	.word	0x08013c3c
 800ba48:	08013c44 	.word	0x08013c44
 800ba4c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ba4e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800ba50:	429a      	cmp	r2, r3
 800ba52:	bfa8      	it	ge
 800ba54:	461a      	movge	r2, r3
 800ba56:	2a00      	cmp	r2, #0
 800ba58:	4691      	mov	r9, r2
 800ba5a:	dc37      	bgt.n	800bacc <_printf_float+0x374>
 800ba5c:	f04f 0b00 	mov.w	fp, #0
 800ba60:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800ba64:	f104 021a 	add.w	r2, r4, #26
 800ba68:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800ba6a:	9305      	str	r3, [sp, #20]
 800ba6c:	eba3 0309 	sub.w	r3, r3, r9
 800ba70:	455b      	cmp	r3, fp
 800ba72:	dc33      	bgt.n	800badc <_printf_float+0x384>
 800ba74:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800ba78:	429a      	cmp	r2, r3
 800ba7a:	db3b      	blt.n	800baf4 <_printf_float+0x39c>
 800ba7c:	6823      	ldr	r3, [r4, #0]
 800ba7e:	07da      	lsls	r2, r3, #31
 800ba80:	d438      	bmi.n	800baf4 <_printf_float+0x39c>
 800ba82:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ba84:	9a05      	ldr	r2, [sp, #20]
 800ba86:	9909      	ldr	r1, [sp, #36]	; 0x24
 800ba88:	1a9a      	subs	r2, r3, r2
 800ba8a:	eba3 0901 	sub.w	r9, r3, r1
 800ba8e:	4591      	cmp	r9, r2
 800ba90:	bfa8      	it	ge
 800ba92:	4691      	movge	r9, r2
 800ba94:	f1b9 0f00 	cmp.w	r9, #0
 800ba98:	dc35      	bgt.n	800bb06 <_printf_float+0x3ae>
 800ba9a:	f04f 0800 	mov.w	r8, #0
 800ba9e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800baa2:	f104 0a1a 	add.w	sl, r4, #26
 800baa6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800baaa:	1a9b      	subs	r3, r3, r2
 800baac:	eba3 0309 	sub.w	r3, r3, r9
 800bab0:	4543      	cmp	r3, r8
 800bab2:	f77f af79 	ble.w	800b9a8 <_printf_float+0x250>
 800bab6:	2301      	movs	r3, #1
 800bab8:	4652      	mov	r2, sl
 800baba:	4631      	mov	r1, r6
 800babc:	4628      	mov	r0, r5
 800babe:	47b8      	blx	r7
 800bac0:	3001      	adds	r0, #1
 800bac2:	f43f aeaa 	beq.w	800b81a <_printf_float+0xc2>
 800bac6:	f108 0801 	add.w	r8, r8, #1
 800baca:	e7ec      	b.n	800baa6 <_printf_float+0x34e>
 800bacc:	4613      	mov	r3, r2
 800bace:	4631      	mov	r1, r6
 800bad0:	4642      	mov	r2, r8
 800bad2:	4628      	mov	r0, r5
 800bad4:	47b8      	blx	r7
 800bad6:	3001      	adds	r0, #1
 800bad8:	d1c0      	bne.n	800ba5c <_printf_float+0x304>
 800bada:	e69e      	b.n	800b81a <_printf_float+0xc2>
 800badc:	2301      	movs	r3, #1
 800bade:	4631      	mov	r1, r6
 800bae0:	4628      	mov	r0, r5
 800bae2:	9205      	str	r2, [sp, #20]
 800bae4:	47b8      	blx	r7
 800bae6:	3001      	adds	r0, #1
 800bae8:	f43f ae97 	beq.w	800b81a <_printf_float+0xc2>
 800baec:	9a05      	ldr	r2, [sp, #20]
 800baee:	f10b 0b01 	add.w	fp, fp, #1
 800baf2:	e7b9      	b.n	800ba68 <_printf_float+0x310>
 800baf4:	ee18 3a10 	vmov	r3, s16
 800baf8:	4652      	mov	r2, sl
 800bafa:	4631      	mov	r1, r6
 800bafc:	4628      	mov	r0, r5
 800bafe:	47b8      	blx	r7
 800bb00:	3001      	adds	r0, #1
 800bb02:	d1be      	bne.n	800ba82 <_printf_float+0x32a>
 800bb04:	e689      	b.n	800b81a <_printf_float+0xc2>
 800bb06:	9a05      	ldr	r2, [sp, #20]
 800bb08:	464b      	mov	r3, r9
 800bb0a:	4442      	add	r2, r8
 800bb0c:	4631      	mov	r1, r6
 800bb0e:	4628      	mov	r0, r5
 800bb10:	47b8      	blx	r7
 800bb12:	3001      	adds	r0, #1
 800bb14:	d1c1      	bne.n	800ba9a <_printf_float+0x342>
 800bb16:	e680      	b.n	800b81a <_printf_float+0xc2>
 800bb18:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800bb1a:	2a01      	cmp	r2, #1
 800bb1c:	dc01      	bgt.n	800bb22 <_printf_float+0x3ca>
 800bb1e:	07db      	lsls	r3, r3, #31
 800bb20:	d538      	bpl.n	800bb94 <_printf_float+0x43c>
 800bb22:	2301      	movs	r3, #1
 800bb24:	4642      	mov	r2, r8
 800bb26:	4631      	mov	r1, r6
 800bb28:	4628      	mov	r0, r5
 800bb2a:	47b8      	blx	r7
 800bb2c:	3001      	adds	r0, #1
 800bb2e:	f43f ae74 	beq.w	800b81a <_printf_float+0xc2>
 800bb32:	ee18 3a10 	vmov	r3, s16
 800bb36:	4652      	mov	r2, sl
 800bb38:	4631      	mov	r1, r6
 800bb3a:	4628      	mov	r0, r5
 800bb3c:	47b8      	blx	r7
 800bb3e:	3001      	adds	r0, #1
 800bb40:	f43f ae6b 	beq.w	800b81a <_printf_float+0xc2>
 800bb44:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800bb48:	2200      	movs	r2, #0
 800bb4a:	2300      	movs	r3, #0
 800bb4c:	f7f4 ffbc 	bl	8000ac8 <__aeabi_dcmpeq>
 800bb50:	b9d8      	cbnz	r0, 800bb8a <_printf_float+0x432>
 800bb52:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bb54:	f108 0201 	add.w	r2, r8, #1
 800bb58:	3b01      	subs	r3, #1
 800bb5a:	4631      	mov	r1, r6
 800bb5c:	4628      	mov	r0, r5
 800bb5e:	47b8      	blx	r7
 800bb60:	3001      	adds	r0, #1
 800bb62:	d10e      	bne.n	800bb82 <_printf_float+0x42a>
 800bb64:	e659      	b.n	800b81a <_printf_float+0xc2>
 800bb66:	2301      	movs	r3, #1
 800bb68:	4652      	mov	r2, sl
 800bb6a:	4631      	mov	r1, r6
 800bb6c:	4628      	mov	r0, r5
 800bb6e:	47b8      	blx	r7
 800bb70:	3001      	adds	r0, #1
 800bb72:	f43f ae52 	beq.w	800b81a <_printf_float+0xc2>
 800bb76:	f108 0801 	add.w	r8, r8, #1
 800bb7a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bb7c:	3b01      	subs	r3, #1
 800bb7e:	4543      	cmp	r3, r8
 800bb80:	dcf1      	bgt.n	800bb66 <_printf_float+0x40e>
 800bb82:	464b      	mov	r3, r9
 800bb84:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800bb88:	e6dc      	b.n	800b944 <_printf_float+0x1ec>
 800bb8a:	f04f 0800 	mov.w	r8, #0
 800bb8e:	f104 0a1a 	add.w	sl, r4, #26
 800bb92:	e7f2      	b.n	800bb7a <_printf_float+0x422>
 800bb94:	2301      	movs	r3, #1
 800bb96:	4642      	mov	r2, r8
 800bb98:	e7df      	b.n	800bb5a <_printf_float+0x402>
 800bb9a:	2301      	movs	r3, #1
 800bb9c:	464a      	mov	r2, r9
 800bb9e:	4631      	mov	r1, r6
 800bba0:	4628      	mov	r0, r5
 800bba2:	47b8      	blx	r7
 800bba4:	3001      	adds	r0, #1
 800bba6:	f43f ae38 	beq.w	800b81a <_printf_float+0xc2>
 800bbaa:	f108 0801 	add.w	r8, r8, #1
 800bbae:	68e3      	ldr	r3, [r4, #12]
 800bbb0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800bbb2:	1a5b      	subs	r3, r3, r1
 800bbb4:	4543      	cmp	r3, r8
 800bbb6:	dcf0      	bgt.n	800bb9a <_printf_float+0x442>
 800bbb8:	e6fa      	b.n	800b9b0 <_printf_float+0x258>
 800bbba:	f04f 0800 	mov.w	r8, #0
 800bbbe:	f104 0919 	add.w	r9, r4, #25
 800bbc2:	e7f4      	b.n	800bbae <_printf_float+0x456>

0800bbc4 <_printf_common>:
 800bbc4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bbc8:	4616      	mov	r6, r2
 800bbca:	4699      	mov	r9, r3
 800bbcc:	688a      	ldr	r2, [r1, #8]
 800bbce:	690b      	ldr	r3, [r1, #16]
 800bbd0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800bbd4:	4293      	cmp	r3, r2
 800bbd6:	bfb8      	it	lt
 800bbd8:	4613      	movlt	r3, r2
 800bbda:	6033      	str	r3, [r6, #0]
 800bbdc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800bbe0:	4607      	mov	r7, r0
 800bbe2:	460c      	mov	r4, r1
 800bbe4:	b10a      	cbz	r2, 800bbea <_printf_common+0x26>
 800bbe6:	3301      	adds	r3, #1
 800bbe8:	6033      	str	r3, [r6, #0]
 800bbea:	6823      	ldr	r3, [r4, #0]
 800bbec:	0699      	lsls	r1, r3, #26
 800bbee:	bf42      	ittt	mi
 800bbf0:	6833      	ldrmi	r3, [r6, #0]
 800bbf2:	3302      	addmi	r3, #2
 800bbf4:	6033      	strmi	r3, [r6, #0]
 800bbf6:	6825      	ldr	r5, [r4, #0]
 800bbf8:	f015 0506 	ands.w	r5, r5, #6
 800bbfc:	d106      	bne.n	800bc0c <_printf_common+0x48>
 800bbfe:	f104 0a19 	add.w	sl, r4, #25
 800bc02:	68e3      	ldr	r3, [r4, #12]
 800bc04:	6832      	ldr	r2, [r6, #0]
 800bc06:	1a9b      	subs	r3, r3, r2
 800bc08:	42ab      	cmp	r3, r5
 800bc0a:	dc26      	bgt.n	800bc5a <_printf_common+0x96>
 800bc0c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800bc10:	1e13      	subs	r3, r2, #0
 800bc12:	6822      	ldr	r2, [r4, #0]
 800bc14:	bf18      	it	ne
 800bc16:	2301      	movne	r3, #1
 800bc18:	0692      	lsls	r2, r2, #26
 800bc1a:	d42b      	bmi.n	800bc74 <_printf_common+0xb0>
 800bc1c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800bc20:	4649      	mov	r1, r9
 800bc22:	4638      	mov	r0, r7
 800bc24:	47c0      	blx	r8
 800bc26:	3001      	adds	r0, #1
 800bc28:	d01e      	beq.n	800bc68 <_printf_common+0xa4>
 800bc2a:	6823      	ldr	r3, [r4, #0]
 800bc2c:	68e5      	ldr	r5, [r4, #12]
 800bc2e:	6832      	ldr	r2, [r6, #0]
 800bc30:	f003 0306 	and.w	r3, r3, #6
 800bc34:	2b04      	cmp	r3, #4
 800bc36:	bf08      	it	eq
 800bc38:	1aad      	subeq	r5, r5, r2
 800bc3a:	68a3      	ldr	r3, [r4, #8]
 800bc3c:	6922      	ldr	r2, [r4, #16]
 800bc3e:	bf0c      	ite	eq
 800bc40:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800bc44:	2500      	movne	r5, #0
 800bc46:	4293      	cmp	r3, r2
 800bc48:	bfc4      	itt	gt
 800bc4a:	1a9b      	subgt	r3, r3, r2
 800bc4c:	18ed      	addgt	r5, r5, r3
 800bc4e:	2600      	movs	r6, #0
 800bc50:	341a      	adds	r4, #26
 800bc52:	42b5      	cmp	r5, r6
 800bc54:	d11a      	bne.n	800bc8c <_printf_common+0xc8>
 800bc56:	2000      	movs	r0, #0
 800bc58:	e008      	b.n	800bc6c <_printf_common+0xa8>
 800bc5a:	2301      	movs	r3, #1
 800bc5c:	4652      	mov	r2, sl
 800bc5e:	4649      	mov	r1, r9
 800bc60:	4638      	mov	r0, r7
 800bc62:	47c0      	blx	r8
 800bc64:	3001      	adds	r0, #1
 800bc66:	d103      	bne.n	800bc70 <_printf_common+0xac>
 800bc68:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800bc6c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bc70:	3501      	adds	r5, #1
 800bc72:	e7c6      	b.n	800bc02 <_printf_common+0x3e>
 800bc74:	18e1      	adds	r1, r4, r3
 800bc76:	1c5a      	adds	r2, r3, #1
 800bc78:	2030      	movs	r0, #48	; 0x30
 800bc7a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800bc7e:	4422      	add	r2, r4
 800bc80:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800bc84:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800bc88:	3302      	adds	r3, #2
 800bc8a:	e7c7      	b.n	800bc1c <_printf_common+0x58>
 800bc8c:	2301      	movs	r3, #1
 800bc8e:	4622      	mov	r2, r4
 800bc90:	4649      	mov	r1, r9
 800bc92:	4638      	mov	r0, r7
 800bc94:	47c0      	blx	r8
 800bc96:	3001      	adds	r0, #1
 800bc98:	d0e6      	beq.n	800bc68 <_printf_common+0xa4>
 800bc9a:	3601      	adds	r6, #1
 800bc9c:	e7d9      	b.n	800bc52 <_printf_common+0x8e>
	...

0800bca0 <_printf_i>:
 800bca0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800bca4:	7e0f      	ldrb	r7, [r1, #24]
 800bca6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800bca8:	2f78      	cmp	r7, #120	; 0x78
 800bcaa:	4691      	mov	r9, r2
 800bcac:	4680      	mov	r8, r0
 800bcae:	460c      	mov	r4, r1
 800bcb0:	469a      	mov	sl, r3
 800bcb2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800bcb6:	d807      	bhi.n	800bcc8 <_printf_i+0x28>
 800bcb8:	2f62      	cmp	r7, #98	; 0x62
 800bcba:	d80a      	bhi.n	800bcd2 <_printf_i+0x32>
 800bcbc:	2f00      	cmp	r7, #0
 800bcbe:	f000 80d8 	beq.w	800be72 <_printf_i+0x1d2>
 800bcc2:	2f58      	cmp	r7, #88	; 0x58
 800bcc4:	f000 80a3 	beq.w	800be0e <_printf_i+0x16e>
 800bcc8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800bccc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800bcd0:	e03a      	b.n	800bd48 <_printf_i+0xa8>
 800bcd2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800bcd6:	2b15      	cmp	r3, #21
 800bcd8:	d8f6      	bhi.n	800bcc8 <_printf_i+0x28>
 800bcda:	a101      	add	r1, pc, #4	; (adr r1, 800bce0 <_printf_i+0x40>)
 800bcdc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800bce0:	0800bd39 	.word	0x0800bd39
 800bce4:	0800bd4d 	.word	0x0800bd4d
 800bce8:	0800bcc9 	.word	0x0800bcc9
 800bcec:	0800bcc9 	.word	0x0800bcc9
 800bcf0:	0800bcc9 	.word	0x0800bcc9
 800bcf4:	0800bcc9 	.word	0x0800bcc9
 800bcf8:	0800bd4d 	.word	0x0800bd4d
 800bcfc:	0800bcc9 	.word	0x0800bcc9
 800bd00:	0800bcc9 	.word	0x0800bcc9
 800bd04:	0800bcc9 	.word	0x0800bcc9
 800bd08:	0800bcc9 	.word	0x0800bcc9
 800bd0c:	0800be59 	.word	0x0800be59
 800bd10:	0800bd7d 	.word	0x0800bd7d
 800bd14:	0800be3b 	.word	0x0800be3b
 800bd18:	0800bcc9 	.word	0x0800bcc9
 800bd1c:	0800bcc9 	.word	0x0800bcc9
 800bd20:	0800be7b 	.word	0x0800be7b
 800bd24:	0800bcc9 	.word	0x0800bcc9
 800bd28:	0800bd7d 	.word	0x0800bd7d
 800bd2c:	0800bcc9 	.word	0x0800bcc9
 800bd30:	0800bcc9 	.word	0x0800bcc9
 800bd34:	0800be43 	.word	0x0800be43
 800bd38:	682b      	ldr	r3, [r5, #0]
 800bd3a:	1d1a      	adds	r2, r3, #4
 800bd3c:	681b      	ldr	r3, [r3, #0]
 800bd3e:	602a      	str	r2, [r5, #0]
 800bd40:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800bd44:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800bd48:	2301      	movs	r3, #1
 800bd4a:	e0a3      	b.n	800be94 <_printf_i+0x1f4>
 800bd4c:	6820      	ldr	r0, [r4, #0]
 800bd4e:	6829      	ldr	r1, [r5, #0]
 800bd50:	0606      	lsls	r6, r0, #24
 800bd52:	f101 0304 	add.w	r3, r1, #4
 800bd56:	d50a      	bpl.n	800bd6e <_printf_i+0xce>
 800bd58:	680e      	ldr	r6, [r1, #0]
 800bd5a:	602b      	str	r3, [r5, #0]
 800bd5c:	2e00      	cmp	r6, #0
 800bd5e:	da03      	bge.n	800bd68 <_printf_i+0xc8>
 800bd60:	232d      	movs	r3, #45	; 0x2d
 800bd62:	4276      	negs	r6, r6
 800bd64:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800bd68:	485e      	ldr	r0, [pc, #376]	; (800bee4 <_printf_i+0x244>)
 800bd6a:	230a      	movs	r3, #10
 800bd6c:	e019      	b.n	800bda2 <_printf_i+0x102>
 800bd6e:	680e      	ldr	r6, [r1, #0]
 800bd70:	602b      	str	r3, [r5, #0]
 800bd72:	f010 0f40 	tst.w	r0, #64	; 0x40
 800bd76:	bf18      	it	ne
 800bd78:	b236      	sxthne	r6, r6
 800bd7a:	e7ef      	b.n	800bd5c <_printf_i+0xbc>
 800bd7c:	682b      	ldr	r3, [r5, #0]
 800bd7e:	6820      	ldr	r0, [r4, #0]
 800bd80:	1d19      	adds	r1, r3, #4
 800bd82:	6029      	str	r1, [r5, #0]
 800bd84:	0601      	lsls	r1, r0, #24
 800bd86:	d501      	bpl.n	800bd8c <_printf_i+0xec>
 800bd88:	681e      	ldr	r6, [r3, #0]
 800bd8a:	e002      	b.n	800bd92 <_printf_i+0xf2>
 800bd8c:	0646      	lsls	r6, r0, #25
 800bd8e:	d5fb      	bpl.n	800bd88 <_printf_i+0xe8>
 800bd90:	881e      	ldrh	r6, [r3, #0]
 800bd92:	4854      	ldr	r0, [pc, #336]	; (800bee4 <_printf_i+0x244>)
 800bd94:	2f6f      	cmp	r7, #111	; 0x6f
 800bd96:	bf0c      	ite	eq
 800bd98:	2308      	moveq	r3, #8
 800bd9a:	230a      	movne	r3, #10
 800bd9c:	2100      	movs	r1, #0
 800bd9e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800bda2:	6865      	ldr	r5, [r4, #4]
 800bda4:	60a5      	str	r5, [r4, #8]
 800bda6:	2d00      	cmp	r5, #0
 800bda8:	bfa2      	ittt	ge
 800bdaa:	6821      	ldrge	r1, [r4, #0]
 800bdac:	f021 0104 	bicge.w	r1, r1, #4
 800bdb0:	6021      	strge	r1, [r4, #0]
 800bdb2:	b90e      	cbnz	r6, 800bdb8 <_printf_i+0x118>
 800bdb4:	2d00      	cmp	r5, #0
 800bdb6:	d04d      	beq.n	800be54 <_printf_i+0x1b4>
 800bdb8:	4615      	mov	r5, r2
 800bdba:	fbb6 f1f3 	udiv	r1, r6, r3
 800bdbe:	fb03 6711 	mls	r7, r3, r1, r6
 800bdc2:	5dc7      	ldrb	r7, [r0, r7]
 800bdc4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800bdc8:	4637      	mov	r7, r6
 800bdca:	42bb      	cmp	r3, r7
 800bdcc:	460e      	mov	r6, r1
 800bdce:	d9f4      	bls.n	800bdba <_printf_i+0x11a>
 800bdd0:	2b08      	cmp	r3, #8
 800bdd2:	d10b      	bne.n	800bdec <_printf_i+0x14c>
 800bdd4:	6823      	ldr	r3, [r4, #0]
 800bdd6:	07de      	lsls	r6, r3, #31
 800bdd8:	d508      	bpl.n	800bdec <_printf_i+0x14c>
 800bdda:	6923      	ldr	r3, [r4, #16]
 800bddc:	6861      	ldr	r1, [r4, #4]
 800bdde:	4299      	cmp	r1, r3
 800bde0:	bfde      	ittt	le
 800bde2:	2330      	movle	r3, #48	; 0x30
 800bde4:	f805 3c01 	strble.w	r3, [r5, #-1]
 800bde8:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800bdec:	1b52      	subs	r2, r2, r5
 800bdee:	6122      	str	r2, [r4, #16]
 800bdf0:	f8cd a000 	str.w	sl, [sp]
 800bdf4:	464b      	mov	r3, r9
 800bdf6:	aa03      	add	r2, sp, #12
 800bdf8:	4621      	mov	r1, r4
 800bdfa:	4640      	mov	r0, r8
 800bdfc:	f7ff fee2 	bl	800bbc4 <_printf_common>
 800be00:	3001      	adds	r0, #1
 800be02:	d14c      	bne.n	800be9e <_printf_i+0x1fe>
 800be04:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800be08:	b004      	add	sp, #16
 800be0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800be0e:	4835      	ldr	r0, [pc, #212]	; (800bee4 <_printf_i+0x244>)
 800be10:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800be14:	6829      	ldr	r1, [r5, #0]
 800be16:	6823      	ldr	r3, [r4, #0]
 800be18:	f851 6b04 	ldr.w	r6, [r1], #4
 800be1c:	6029      	str	r1, [r5, #0]
 800be1e:	061d      	lsls	r5, r3, #24
 800be20:	d514      	bpl.n	800be4c <_printf_i+0x1ac>
 800be22:	07df      	lsls	r7, r3, #31
 800be24:	bf44      	itt	mi
 800be26:	f043 0320 	orrmi.w	r3, r3, #32
 800be2a:	6023      	strmi	r3, [r4, #0]
 800be2c:	b91e      	cbnz	r6, 800be36 <_printf_i+0x196>
 800be2e:	6823      	ldr	r3, [r4, #0]
 800be30:	f023 0320 	bic.w	r3, r3, #32
 800be34:	6023      	str	r3, [r4, #0]
 800be36:	2310      	movs	r3, #16
 800be38:	e7b0      	b.n	800bd9c <_printf_i+0xfc>
 800be3a:	6823      	ldr	r3, [r4, #0]
 800be3c:	f043 0320 	orr.w	r3, r3, #32
 800be40:	6023      	str	r3, [r4, #0]
 800be42:	2378      	movs	r3, #120	; 0x78
 800be44:	4828      	ldr	r0, [pc, #160]	; (800bee8 <_printf_i+0x248>)
 800be46:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800be4a:	e7e3      	b.n	800be14 <_printf_i+0x174>
 800be4c:	0659      	lsls	r1, r3, #25
 800be4e:	bf48      	it	mi
 800be50:	b2b6      	uxthmi	r6, r6
 800be52:	e7e6      	b.n	800be22 <_printf_i+0x182>
 800be54:	4615      	mov	r5, r2
 800be56:	e7bb      	b.n	800bdd0 <_printf_i+0x130>
 800be58:	682b      	ldr	r3, [r5, #0]
 800be5a:	6826      	ldr	r6, [r4, #0]
 800be5c:	6961      	ldr	r1, [r4, #20]
 800be5e:	1d18      	adds	r0, r3, #4
 800be60:	6028      	str	r0, [r5, #0]
 800be62:	0635      	lsls	r5, r6, #24
 800be64:	681b      	ldr	r3, [r3, #0]
 800be66:	d501      	bpl.n	800be6c <_printf_i+0x1cc>
 800be68:	6019      	str	r1, [r3, #0]
 800be6a:	e002      	b.n	800be72 <_printf_i+0x1d2>
 800be6c:	0670      	lsls	r0, r6, #25
 800be6e:	d5fb      	bpl.n	800be68 <_printf_i+0x1c8>
 800be70:	8019      	strh	r1, [r3, #0]
 800be72:	2300      	movs	r3, #0
 800be74:	6123      	str	r3, [r4, #16]
 800be76:	4615      	mov	r5, r2
 800be78:	e7ba      	b.n	800bdf0 <_printf_i+0x150>
 800be7a:	682b      	ldr	r3, [r5, #0]
 800be7c:	1d1a      	adds	r2, r3, #4
 800be7e:	602a      	str	r2, [r5, #0]
 800be80:	681d      	ldr	r5, [r3, #0]
 800be82:	6862      	ldr	r2, [r4, #4]
 800be84:	2100      	movs	r1, #0
 800be86:	4628      	mov	r0, r5
 800be88:	f7f4 f9aa 	bl	80001e0 <memchr>
 800be8c:	b108      	cbz	r0, 800be92 <_printf_i+0x1f2>
 800be8e:	1b40      	subs	r0, r0, r5
 800be90:	6060      	str	r0, [r4, #4]
 800be92:	6863      	ldr	r3, [r4, #4]
 800be94:	6123      	str	r3, [r4, #16]
 800be96:	2300      	movs	r3, #0
 800be98:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800be9c:	e7a8      	b.n	800bdf0 <_printf_i+0x150>
 800be9e:	6923      	ldr	r3, [r4, #16]
 800bea0:	462a      	mov	r2, r5
 800bea2:	4649      	mov	r1, r9
 800bea4:	4640      	mov	r0, r8
 800bea6:	47d0      	blx	sl
 800bea8:	3001      	adds	r0, #1
 800beaa:	d0ab      	beq.n	800be04 <_printf_i+0x164>
 800beac:	6823      	ldr	r3, [r4, #0]
 800beae:	079b      	lsls	r3, r3, #30
 800beb0:	d413      	bmi.n	800beda <_printf_i+0x23a>
 800beb2:	68e0      	ldr	r0, [r4, #12]
 800beb4:	9b03      	ldr	r3, [sp, #12]
 800beb6:	4298      	cmp	r0, r3
 800beb8:	bfb8      	it	lt
 800beba:	4618      	movlt	r0, r3
 800bebc:	e7a4      	b.n	800be08 <_printf_i+0x168>
 800bebe:	2301      	movs	r3, #1
 800bec0:	4632      	mov	r2, r6
 800bec2:	4649      	mov	r1, r9
 800bec4:	4640      	mov	r0, r8
 800bec6:	47d0      	blx	sl
 800bec8:	3001      	adds	r0, #1
 800beca:	d09b      	beq.n	800be04 <_printf_i+0x164>
 800becc:	3501      	adds	r5, #1
 800bece:	68e3      	ldr	r3, [r4, #12]
 800bed0:	9903      	ldr	r1, [sp, #12]
 800bed2:	1a5b      	subs	r3, r3, r1
 800bed4:	42ab      	cmp	r3, r5
 800bed6:	dcf2      	bgt.n	800bebe <_printf_i+0x21e>
 800bed8:	e7eb      	b.n	800beb2 <_printf_i+0x212>
 800beda:	2500      	movs	r5, #0
 800bedc:	f104 0619 	add.w	r6, r4, #25
 800bee0:	e7f5      	b.n	800bece <_printf_i+0x22e>
 800bee2:	bf00      	nop
 800bee4:	08013c46 	.word	0x08013c46
 800bee8:	08013c57 	.word	0x08013c57

0800beec <siprintf>:
 800beec:	b40e      	push	{r1, r2, r3}
 800beee:	b500      	push	{lr}
 800bef0:	b09c      	sub	sp, #112	; 0x70
 800bef2:	ab1d      	add	r3, sp, #116	; 0x74
 800bef4:	9002      	str	r0, [sp, #8]
 800bef6:	9006      	str	r0, [sp, #24]
 800bef8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800befc:	4809      	ldr	r0, [pc, #36]	; (800bf24 <siprintf+0x38>)
 800befe:	9107      	str	r1, [sp, #28]
 800bf00:	9104      	str	r1, [sp, #16]
 800bf02:	4909      	ldr	r1, [pc, #36]	; (800bf28 <siprintf+0x3c>)
 800bf04:	f853 2b04 	ldr.w	r2, [r3], #4
 800bf08:	9105      	str	r1, [sp, #20]
 800bf0a:	6800      	ldr	r0, [r0, #0]
 800bf0c:	9301      	str	r3, [sp, #4]
 800bf0e:	a902      	add	r1, sp, #8
 800bf10:	f001 fb6a 	bl	800d5e8 <_svfiprintf_r>
 800bf14:	9b02      	ldr	r3, [sp, #8]
 800bf16:	2200      	movs	r2, #0
 800bf18:	701a      	strb	r2, [r3, #0]
 800bf1a:	b01c      	add	sp, #112	; 0x70
 800bf1c:	f85d eb04 	ldr.w	lr, [sp], #4
 800bf20:	b003      	add	sp, #12
 800bf22:	4770      	bx	lr
 800bf24:	20000014 	.word	0x20000014
 800bf28:	ffff0208 	.word	0xffff0208

0800bf2c <quorem>:
 800bf2c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bf30:	6903      	ldr	r3, [r0, #16]
 800bf32:	690c      	ldr	r4, [r1, #16]
 800bf34:	42a3      	cmp	r3, r4
 800bf36:	4607      	mov	r7, r0
 800bf38:	f2c0 8081 	blt.w	800c03e <quorem+0x112>
 800bf3c:	3c01      	subs	r4, #1
 800bf3e:	f101 0814 	add.w	r8, r1, #20
 800bf42:	f100 0514 	add.w	r5, r0, #20
 800bf46:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800bf4a:	9301      	str	r3, [sp, #4]
 800bf4c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800bf50:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800bf54:	3301      	adds	r3, #1
 800bf56:	429a      	cmp	r2, r3
 800bf58:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800bf5c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800bf60:	fbb2 f6f3 	udiv	r6, r2, r3
 800bf64:	d331      	bcc.n	800bfca <quorem+0x9e>
 800bf66:	f04f 0e00 	mov.w	lr, #0
 800bf6a:	4640      	mov	r0, r8
 800bf6c:	46ac      	mov	ip, r5
 800bf6e:	46f2      	mov	sl, lr
 800bf70:	f850 2b04 	ldr.w	r2, [r0], #4
 800bf74:	b293      	uxth	r3, r2
 800bf76:	fb06 e303 	mla	r3, r6, r3, lr
 800bf7a:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800bf7e:	b29b      	uxth	r3, r3
 800bf80:	ebaa 0303 	sub.w	r3, sl, r3
 800bf84:	f8dc a000 	ldr.w	sl, [ip]
 800bf88:	0c12      	lsrs	r2, r2, #16
 800bf8a:	fa13 f38a 	uxtah	r3, r3, sl
 800bf8e:	fb06 e202 	mla	r2, r6, r2, lr
 800bf92:	9300      	str	r3, [sp, #0]
 800bf94:	9b00      	ldr	r3, [sp, #0]
 800bf96:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800bf9a:	b292      	uxth	r2, r2
 800bf9c:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800bfa0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800bfa4:	f8bd 3000 	ldrh.w	r3, [sp]
 800bfa8:	4581      	cmp	r9, r0
 800bfaa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800bfae:	f84c 3b04 	str.w	r3, [ip], #4
 800bfb2:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800bfb6:	d2db      	bcs.n	800bf70 <quorem+0x44>
 800bfb8:	f855 300b 	ldr.w	r3, [r5, fp]
 800bfbc:	b92b      	cbnz	r3, 800bfca <quorem+0x9e>
 800bfbe:	9b01      	ldr	r3, [sp, #4]
 800bfc0:	3b04      	subs	r3, #4
 800bfc2:	429d      	cmp	r5, r3
 800bfc4:	461a      	mov	r2, r3
 800bfc6:	d32e      	bcc.n	800c026 <quorem+0xfa>
 800bfc8:	613c      	str	r4, [r7, #16]
 800bfca:	4638      	mov	r0, r7
 800bfcc:	f001 f8b8 	bl	800d140 <__mcmp>
 800bfd0:	2800      	cmp	r0, #0
 800bfd2:	db24      	blt.n	800c01e <quorem+0xf2>
 800bfd4:	3601      	adds	r6, #1
 800bfd6:	4628      	mov	r0, r5
 800bfd8:	f04f 0c00 	mov.w	ip, #0
 800bfdc:	f858 2b04 	ldr.w	r2, [r8], #4
 800bfe0:	f8d0 e000 	ldr.w	lr, [r0]
 800bfe4:	b293      	uxth	r3, r2
 800bfe6:	ebac 0303 	sub.w	r3, ip, r3
 800bfea:	0c12      	lsrs	r2, r2, #16
 800bfec:	fa13 f38e 	uxtah	r3, r3, lr
 800bff0:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800bff4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800bff8:	b29b      	uxth	r3, r3
 800bffa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800bffe:	45c1      	cmp	r9, r8
 800c000:	f840 3b04 	str.w	r3, [r0], #4
 800c004:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800c008:	d2e8      	bcs.n	800bfdc <quorem+0xb0>
 800c00a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800c00e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800c012:	b922      	cbnz	r2, 800c01e <quorem+0xf2>
 800c014:	3b04      	subs	r3, #4
 800c016:	429d      	cmp	r5, r3
 800c018:	461a      	mov	r2, r3
 800c01a:	d30a      	bcc.n	800c032 <quorem+0x106>
 800c01c:	613c      	str	r4, [r7, #16]
 800c01e:	4630      	mov	r0, r6
 800c020:	b003      	add	sp, #12
 800c022:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c026:	6812      	ldr	r2, [r2, #0]
 800c028:	3b04      	subs	r3, #4
 800c02a:	2a00      	cmp	r2, #0
 800c02c:	d1cc      	bne.n	800bfc8 <quorem+0x9c>
 800c02e:	3c01      	subs	r4, #1
 800c030:	e7c7      	b.n	800bfc2 <quorem+0x96>
 800c032:	6812      	ldr	r2, [r2, #0]
 800c034:	3b04      	subs	r3, #4
 800c036:	2a00      	cmp	r2, #0
 800c038:	d1f0      	bne.n	800c01c <quorem+0xf0>
 800c03a:	3c01      	subs	r4, #1
 800c03c:	e7eb      	b.n	800c016 <quorem+0xea>
 800c03e:	2000      	movs	r0, #0
 800c040:	e7ee      	b.n	800c020 <quorem+0xf4>
 800c042:	0000      	movs	r0, r0
 800c044:	0000      	movs	r0, r0
	...

0800c048 <_dtoa_r>:
 800c048:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c04c:	ed2d 8b04 	vpush	{d8-d9}
 800c050:	ec57 6b10 	vmov	r6, r7, d0
 800c054:	b093      	sub	sp, #76	; 0x4c
 800c056:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800c058:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800c05c:	9106      	str	r1, [sp, #24]
 800c05e:	ee10 aa10 	vmov	sl, s0
 800c062:	4604      	mov	r4, r0
 800c064:	9209      	str	r2, [sp, #36]	; 0x24
 800c066:	930c      	str	r3, [sp, #48]	; 0x30
 800c068:	46bb      	mov	fp, r7
 800c06a:	b975      	cbnz	r5, 800c08a <_dtoa_r+0x42>
 800c06c:	2010      	movs	r0, #16
 800c06e:	f000 fddd 	bl	800cc2c <malloc>
 800c072:	4602      	mov	r2, r0
 800c074:	6260      	str	r0, [r4, #36]	; 0x24
 800c076:	b920      	cbnz	r0, 800c082 <_dtoa_r+0x3a>
 800c078:	4ba7      	ldr	r3, [pc, #668]	; (800c318 <_dtoa_r+0x2d0>)
 800c07a:	21ea      	movs	r1, #234	; 0xea
 800c07c:	48a7      	ldr	r0, [pc, #668]	; (800c31c <_dtoa_r+0x2d4>)
 800c07e:	f001 fbc3 	bl	800d808 <__assert_func>
 800c082:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800c086:	6005      	str	r5, [r0, #0]
 800c088:	60c5      	str	r5, [r0, #12]
 800c08a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c08c:	6819      	ldr	r1, [r3, #0]
 800c08e:	b151      	cbz	r1, 800c0a6 <_dtoa_r+0x5e>
 800c090:	685a      	ldr	r2, [r3, #4]
 800c092:	604a      	str	r2, [r1, #4]
 800c094:	2301      	movs	r3, #1
 800c096:	4093      	lsls	r3, r2
 800c098:	608b      	str	r3, [r1, #8]
 800c09a:	4620      	mov	r0, r4
 800c09c:	f000 fe0e 	bl	800ccbc <_Bfree>
 800c0a0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c0a2:	2200      	movs	r2, #0
 800c0a4:	601a      	str	r2, [r3, #0]
 800c0a6:	1e3b      	subs	r3, r7, #0
 800c0a8:	bfaa      	itet	ge
 800c0aa:	2300      	movge	r3, #0
 800c0ac:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 800c0b0:	f8c8 3000 	strge.w	r3, [r8]
 800c0b4:	4b9a      	ldr	r3, [pc, #616]	; (800c320 <_dtoa_r+0x2d8>)
 800c0b6:	bfbc      	itt	lt
 800c0b8:	2201      	movlt	r2, #1
 800c0ba:	f8c8 2000 	strlt.w	r2, [r8]
 800c0be:	ea33 030b 	bics.w	r3, r3, fp
 800c0c2:	d11b      	bne.n	800c0fc <_dtoa_r+0xb4>
 800c0c4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800c0c6:	f242 730f 	movw	r3, #9999	; 0x270f
 800c0ca:	6013      	str	r3, [r2, #0]
 800c0cc:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800c0d0:	4333      	orrs	r3, r6
 800c0d2:	f000 8592 	beq.w	800cbfa <_dtoa_r+0xbb2>
 800c0d6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c0d8:	b963      	cbnz	r3, 800c0f4 <_dtoa_r+0xac>
 800c0da:	4b92      	ldr	r3, [pc, #584]	; (800c324 <_dtoa_r+0x2dc>)
 800c0dc:	e022      	b.n	800c124 <_dtoa_r+0xdc>
 800c0de:	4b92      	ldr	r3, [pc, #584]	; (800c328 <_dtoa_r+0x2e0>)
 800c0e0:	9301      	str	r3, [sp, #4]
 800c0e2:	3308      	adds	r3, #8
 800c0e4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800c0e6:	6013      	str	r3, [r2, #0]
 800c0e8:	9801      	ldr	r0, [sp, #4]
 800c0ea:	b013      	add	sp, #76	; 0x4c
 800c0ec:	ecbd 8b04 	vpop	{d8-d9}
 800c0f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c0f4:	4b8b      	ldr	r3, [pc, #556]	; (800c324 <_dtoa_r+0x2dc>)
 800c0f6:	9301      	str	r3, [sp, #4]
 800c0f8:	3303      	adds	r3, #3
 800c0fa:	e7f3      	b.n	800c0e4 <_dtoa_r+0x9c>
 800c0fc:	2200      	movs	r2, #0
 800c0fe:	2300      	movs	r3, #0
 800c100:	4650      	mov	r0, sl
 800c102:	4659      	mov	r1, fp
 800c104:	f7f4 fce0 	bl	8000ac8 <__aeabi_dcmpeq>
 800c108:	ec4b ab19 	vmov	d9, sl, fp
 800c10c:	4680      	mov	r8, r0
 800c10e:	b158      	cbz	r0, 800c128 <_dtoa_r+0xe0>
 800c110:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800c112:	2301      	movs	r3, #1
 800c114:	6013      	str	r3, [r2, #0]
 800c116:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c118:	2b00      	cmp	r3, #0
 800c11a:	f000 856b 	beq.w	800cbf4 <_dtoa_r+0xbac>
 800c11e:	4883      	ldr	r0, [pc, #524]	; (800c32c <_dtoa_r+0x2e4>)
 800c120:	6018      	str	r0, [r3, #0]
 800c122:	1e43      	subs	r3, r0, #1
 800c124:	9301      	str	r3, [sp, #4]
 800c126:	e7df      	b.n	800c0e8 <_dtoa_r+0xa0>
 800c128:	ec4b ab10 	vmov	d0, sl, fp
 800c12c:	aa10      	add	r2, sp, #64	; 0x40
 800c12e:	a911      	add	r1, sp, #68	; 0x44
 800c130:	4620      	mov	r0, r4
 800c132:	f001 f8ab 	bl	800d28c <__d2b>
 800c136:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800c13a:	ee08 0a10 	vmov	s16, r0
 800c13e:	2d00      	cmp	r5, #0
 800c140:	f000 8084 	beq.w	800c24c <_dtoa_r+0x204>
 800c144:	ee19 3a90 	vmov	r3, s19
 800c148:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c14c:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800c150:	4656      	mov	r6, sl
 800c152:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800c156:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800c15a:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800c15e:	4b74      	ldr	r3, [pc, #464]	; (800c330 <_dtoa_r+0x2e8>)
 800c160:	2200      	movs	r2, #0
 800c162:	4630      	mov	r0, r6
 800c164:	4639      	mov	r1, r7
 800c166:	f7f4 f88f 	bl	8000288 <__aeabi_dsub>
 800c16a:	a365      	add	r3, pc, #404	; (adr r3, 800c300 <_dtoa_r+0x2b8>)
 800c16c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c170:	f7f4 fa42 	bl	80005f8 <__aeabi_dmul>
 800c174:	a364      	add	r3, pc, #400	; (adr r3, 800c308 <_dtoa_r+0x2c0>)
 800c176:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c17a:	f7f4 f887 	bl	800028c <__adddf3>
 800c17e:	4606      	mov	r6, r0
 800c180:	4628      	mov	r0, r5
 800c182:	460f      	mov	r7, r1
 800c184:	f7f4 f9ce 	bl	8000524 <__aeabi_i2d>
 800c188:	a361      	add	r3, pc, #388	; (adr r3, 800c310 <_dtoa_r+0x2c8>)
 800c18a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c18e:	f7f4 fa33 	bl	80005f8 <__aeabi_dmul>
 800c192:	4602      	mov	r2, r0
 800c194:	460b      	mov	r3, r1
 800c196:	4630      	mov	r0, r6
 800c198:	4639      	mov	r1, r7
 800c19a:	f7f4 f877 	bl	800028c <__adddf3>
 800c19e:	4606      	mov	r6, r0
 800c1a0:	460f      	mov	r7, r1
 800c1a2:	f7f4 fcd9 	bl	8000b58 <__aeabi_d2iz>
 800c1a6:	2200      	movs	r2, #0
 800c1a8:	9000      	str	r0, [sp, #0]
 800c1aa:	2300      	movs	r3, #0
 800c1ac:	4630      	mov	r0, r6
 800c1ae:	4639      	mov	r1, r7
 800c1b0:	f7f4 fc94 	bl	8000adc <__aeabi_dcmplt>
 800c1b4:	b150      	cbz	r0, 800c1cc <_dtoa_r+0x184>
 800c1b6:	9800      	ldr	r0, [sp, #0]
 800c1b8:	f7f4 f9b4 	bl	8000524 <__aeabi_i2d>
 800c1bc:	4632      	mov	r2, r6
 800c1be:	463b      	mov	r3, r7
 800c1c0:	f7f4 fc82 	bl	8000ac8 <__aeabi_dcmpeq>
 800c1c4:	b910      	cbnz	r0, 800c1cc <_dtoa_r+0x184>
 800c1c6:	9b00      	ldr	r3, [sp, #0]
 800c1c8:	3b01      	subs	r3, #1
 800c1ca:	9300      	str	r3, [sp, #0]
 800c1cc:	9b00      	ldr	r3, [sp, #0]
 800c1ce:	2b16      	cmp	r3, #22
 800c1d0:	d85a      	bhi.n	800c288 <_dtoa_r+0x240>
 800c1d2:	9a00      	ldr	r2, [sp, #0]
 800c1d4:	4b57      	ldr	r3, [pc, #348]	; (800c334 <_dtoa_r+0x2ec>)
 800c1d6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c1da:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c1de:	ec51 0b19 	vmov	r0, r1, d9
 800c1e2:	f7f4 fc7b 	bl	8000adc <__aeabi_dcmplt>
 800c1e6:	2800      	cmp	r0, #0
 800c1e8:	d050      	beq.n	800c28c <_dtoa_r+0x244>
 800c1ea:	9b00      	ldr	r3, [sp, #0]
 800c1ec:	3b01      	subs	r3, #1
 800c1ee:	9300      	str	r3, [sp, #0]
 800c1f0:	2300      	movs	r3, #0
 800c1f2:	930b      	str	r3, [sp, #44]	; 0x2c
 800c1f4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800c1f6:	1b5d      	subs	r5, r3, r5
 800c1f8:	1e6b      	subs	r3, r5, #1
 800c1fa:	9305      	str	r3, [sp, #20]
 800c1fc:	bf45      	ittet	mi
 800c1fe:	f1c5 0301 	rsbmi	r3, r5, #1
 800c202:	9304      	strmi	r3, [sp, #16]
 800c204:	2300      	movpl	r3, #0
 800c206:	2300      	movmi	r3, #0
 800c208:	bf4c      	ite	mi
 800c20a:	9305      	strmi	r3, [sp, #20]
 800c20c:	9304      	strpl	r3, [sp, #16]
 800c20e:	9b00      	ldr	r3, [sp, #0]
 800c210:	2b00      	cmp	r3, #0
 800c212:	db3d      	blt.n	800c290 <_dtoa_r+0x248>
 800c214:	9b05      	ldr	r3, [sp, #20]
 800c216:	9a00      	ldr	r2, [sp, #0]
 800c218:	920a      	str	r2, [sp, #40]	; 0x28
 800c21a:	4413      	add	r3, r2
 800c21c:	9305      	str	r3, [sp, #20]
 800c21e:	2300      	movs	r3, #0
 800c220:	9307      	str	r3, [sp, #28]
 800c222:	9b06      	ldr	r3, [sp, #24]
 800c224:	2b09      	cmp	r3, #9
 800c226:	f200 8089 	bhi.w	800c33c <_dtoa_r+0x2f4>
 800c22a:	2b05      	cmp	r3, #5
 800c22c:	bfc4      	itt	gt
 800c22e:	3b04      	subgt	r3, #4
 800c230:	9306      	strgt	r3, [sp, #24]
 800c232:	9b06      	ldr	r3, [sp, #24]
 800c234:	f1a3 0302 	sub.w	r3, r3, #2
 800c238:	bfcc      	ite	gt
 800c23a:	2500      	movgt	r5, #0
 800c23c:	2501      	movle	r5, #1
 800c23e:	2b03      	cmp	r3, #3
 800c240:	f200 8087 	bhi.w	800c352 <_dtoa_r+0x30a>
 800c244:	e8df f003 	tbb	[pc, r3]
 800c248:	59383a2d 	.word	0x59383a2d
 800c24c:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800c250:	441d      	add	r5, r3
 800c252:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800c256:	2b20      	cmp	r3, #32
 800c258:	bfc1      	itttt	gt
 800c25a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800c25e:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800c262:	fa0b f303 	lslgt.w	r3, fp, r3
 800c266:	fa26 f000 	lsrgt.w	r0, r6, r0
 800c26a:	bfda      	itte	le
 800c26c:	f1c3 0320 	rsble	r3, r3, #32
 800c270:	fa06 f003 	lslle.w	r0, r6, r3
 800c274:	4318      	orrgt	r0, r3
 800c276:	f7f4 f945 	bl	8000504 <__aeabi_ui2d>
 800c27a:	2301      	movs	r3, #1
 800c27c:	4606      	mov	r6, r0
 800c27e:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800c282:	3d01      	subs	r5, #1
 800c284:	930e      	str	r3, [sp, #56]	; 0x38
 800c286:	e76a      	b.n	800c15e <_dtoa_r+0x116>
 800c288:	2301      	movs	r3, #1
 800c28a:	e7b2      	b.n	800c1f2 <_dtoa_r+0x1aa>
 800c28c:	900b      	str	r0, [sp, #44]	; 0x2c
 800c28e:	e7b1      	b.n	800c1f4 <_dtoa_r+0x1ac>
 800c290:	9b04      	ldr	r3, [sp, #16]
 800c292:	9a00      	ldr	r2, [sp, #0]
 800c294:	1a9b      	subs	r3, r3, r2
 800c296:	9304      	str	r3, [sp, #16]
 800c298:	4253      	negs	r3, r2
 800c29a:	9307      	str	r3, [sp, #28]
 800c29c:	2300      	movs	r3, #0
 800c29e:	930a      	str	r3, [sp, #40]	; 0x28
 800c2a0:	e7bf      	b.n	800c222 <_dtoa_r+0x1da>
 800c2a2:	2300      	movs	r3, #0
 800c2a4:	9308      	str	r3, [sp, #32]
 800c2a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c2a8:	2b00      	cmp	r3, #0
 800c2aa:	dc55      	bgt.n	800c358 <_dtoa_r+0x310>
 800c2ac:	2301      	movs	r3, #1
 800c2ae:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800c2b2:	461a      	mov	r2, r3
 800c2b4:	9209      	str	r2, [sp, #36]	; 0x24
 800c2b6:	e00c      	b.n	800c2d2 <_dtoa_r+0x28a>
 800c2b8:	2301      	movs	r3, #1
 800c2ba:	e7f3      	b.n	800c2a4 <_dtoa_r+0x25c>
 800c2bc:	2300      	movs	r3, #0
 800c2be:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c2c0:	9308      	str	r3, [sp, #32]
 800c2c2:	9b00      	ldr	r3, [sp, #0]
 800c2c4:	4413      	add	r3, r2
 800c2c6:	9302      	str	r3, [sp, #8]
 800c2c8:	3301      	adds	r3, #1
 800c2ca:	2b01      	cmp	r3, #1
 800c2cc:	9303      	str	r3, [sp, #12]
 800c2ce:	bfb8      	it	lt
 800c2d0:	2301      	movlt	r3, #1
 800c2d2:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800c2d4:	2200      	movs	r2, #0
 800c2d6:	6042      	str	r2, [r0, #4]
 800c2d8:	2204      	movs	r2, #4
 800c2da:	f102 0614 	add.w	r6, r2, #20
 800c2de:	429e      	cmp	r6, r3
 800c2e0:	6841      	ldr	r1, [r0, #4]
 800c2e2:	d93d      	bls.n	800c360 <_dtoa_r+0x318>
 800c2e4:	4620      	mov	r0, r4
 800c2e6:	f000 fca9 	bl	800cc3c <_Balloc>
 800c2ea:	9001      	str	r0, [sp, #4]
 800c2ec:	2800      	cmp	r0, #0
 800c2ee:	d13b      	bne.n	800c368 <_dtoa_r+0x320>
 800c2f0:	4b11      	ldr	r3, [pc, #68]	; (800c338 <_dtoa_r+0x2f0>)
 800c2f2:	4602      	mov	r2, r0
 800c2f4:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800c2f8:	e6c0      	b.n	800c07c <_dtoa_r+0x34>
 800c2fa:	2301      	movs	r3, #1
 800c2fc:	e7df      	b.n	800c2be <_dtoa_r+0x276>
 800c2fe:	bf00      	nop
 800c300:	636f4361 	.word	0x636f4361
 800c304:	3fd287a7 	.word	0x3fd287a7
 800c308:	8b60c8b3 	.word	0x8b60c8b3
 800c30c:	3fc68a28 	.word	0x3fc68a28
 800c310:	509f79fb 	.word	0x509f79fb
 800c314:	3fd34413 	.word	0x3fd34413
 800c318:	08013c75 	.word	0x08013c75
 800c31c:	08013c8c 	.word	0x08013c8c
 800c320:	7ff00000 	.word	0x7ff00000
 800c324:	08013c71 	.word	0x08013c71
 800c328:	08013c68 	.word	0x08013c68
 800c32c:	08013c45 	.word	0x08013c45
 800c330:	3ff80000 	.word	0x3ff80000
 800c334:	08013d80 	.word	0x08013d80
 800c338:	08013ce7 	.word	0x08013ce7
 800c33c:	2501      	movs	r5, #1
 800c33e:	2300      	movs	r3, #0
 800c340:	9306      	str	r3, [sp, #24]
 800c342:	9508      	str	r5, [sp, #32]
 800c344:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800c348:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800c34c:	2200      	movs	r2, #0
 800c34e:	2312      	movs	r3, #18
 800c350:	e7b0      	b.n	800c2b4 <_dtoa_r+0x26c>
 800c352:	2301      	movs	r3, #1
 800c354:	9308      	str	r3, [sp, #32]
 800c356:	e7f5      	b.n	800c344 <_dtoa_r+0x2fc>
 800c358:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c35a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800c35e:	e7b8      	b.n	800c2d2 <_dtoa_r+0x28a>
 800c360:	3101      	adds	r1, #1
 800c362:	6041      	str	r1, [r0, #4]
 800c364:	0052      	lsls	r2, r2, #1
 800c366:	e7b8      	b.n	800c2da <_dtoa_r+0x292>
 800c368:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c36a:	9a01      	ldr	r2, [sp, #4]
 800c36c:	601a      	str	r2, [r3, #0]
 800c36e:	9b03      	ldr	r3, [sp, #12]
 800c370:	2b0e      	cmp	r3, #14
 800c372:	f200 809d 	bhi.w	800c4b0 <_dtoa_r+0x468>
 800c376:	2d00      	cmp	r5, #0
 800c378:	f000 809a 	beq.w	800c4b0 <_dtoa_r+0x468>
 800c37c:	9b00      	ldr	r3, [sp, #0]
 800c37e:	2b00      	cmp	r3, #0
 800c380:	dd32      	ble.n	800c3e8 <_dtoa_r+0x3a0>
 800c382:	4ab7      	ldr	r2, [pc, #732]	; (800c660 <_dtoa_r+0x618>)
 800c384:	f003 030f 	and.w	r3, r3, #15
 800c388:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800c38c:	e9d3 8900 	ldrd	r8, r9, [r3]
 800c390:	9b00      	ldr	r3, [sp, #0]
 800c392:	05d8      	lsls	r0, r3, #23
 800c394:	ea4f 1723 	mov.w	r7, r3, asr #4
 800c398:	d516      	bpl.n	800c3c8 <_dtoa_r+0x380>
 800c39a:	4bb2      	ldr	r3, [pc, #712]	; (800c664 <_dtoa_r+0x61c>)
 800c39c:	ec51 0b19 	vmov	r0, r1, d9
 800c3a0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800c3a4:	f7f4 fa52 	bl	800084c <__aeabi_ddiv>
 800c3a8:	f007 070f 	and.w	r7, r7, #15
 800c3ac:	4682      	mov	sl, r0
 800c3ae:	468b      	mov	fp, r1
 800c3b0:	2503      	movs	r5, #3
 800c3b2:	4eac      	ldr	r6, [pc, #688]	; (800c664 <_dtoa_r+0x61c>)
 800c3b4:	b957      	cbnz	r7, 800c3cc <_dtoa_r+0x384>
 800c3b6:	4642      	mov	r2, r8
 800c3b8:	464b      	mov	r3, r9
 800c3ba:	4650      	mov	r0, sl
 800c3bc:	4659      	mov	r1, fp
 800c3be:	f7f4 fa45 	bl	800084c <__aeabi_ddiv>
 800c3c2:	4682      	mov	sl, r0
 800c3c4:	468b      	mov	fp, r1
 800c3c6:	e028      	b.n	800c41a <_dtoa_r+0x3d2>
 800c3c8:	2502      	movs	r5, #2
 800c3ca:	e7f2      	b.n	800c3b2 <_dtoa_r+0x36a>
 800c3cc:	07f9      	lsls	r1, r7, #31
 800c3ce:	d508      	bpl.n	800c3e2 <_dtoa_r+0x39a>
 800c3d0:	4640      	mov	r0, r8
 800c3d2:	4649      	mov	r1, r9
 800c3d4:	e9d6 2300 	ldrd	r2, r3, [r6]
 800c3d8:	f7f4 f90e 	bl	80005f8 <__aeabi_dmul>
 800c3dc:	3501      	adds	r5, #1
 800c3de:	4680      	mov	r8, r0
 800c3e0:	4689      	mov	r9, r1
 800c3e2:	107f      	asrs	r7, r7, #1
 800c3e4:	3608      	adds	r6, #8
 800c3e6:	e7e5      	b.n	800c3b4 <_dtoa_r+0x36c>
 800c3e8:	f000 809b 	beq.w	800c522 <_dtoa_r+0x4da>
 800c3ec:	9b00      	ldr	r3, [sp, #0]
 800c3ee:	4f9d      	ldr	r7, [pc, #628]	; (800c664 <_dtoa_r+0x61c>)
 800c3f0:	425e      	negs	r6, r3
 800c3f2:	4b9b      	ldr	r3, [pc, #620]	; (800c660 <_dtoa_r+0x618>)
 800c3f4:	f006 020f 	and.w	r2, r6, #15
 800c3f8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c3fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c400:	ec51 0b19 	vmov	r0, r1, d9
 800c404:	f7f4 f8f8 	bl	80005f8 <__aeabi_dmul>
 800c408:	1136      	asrs	r6, r6, #4
 800c40a:	4682      	mov	sl, r0
 800c40c:	468b      	mov	fp, r1
 800c40e:	2300      	movs	r3, #0
 800c410:	2502      	movs	r5, #2
 800c412:	2e00      	cmp	r6, #0
 800c414:	d17a      	bne.n	800c50c <_dtoa_r+0x4c4>
 800c416:	2b00      	cmp	r3, #0
 800c418:	d1d3      	bne.n	800c3c2 <_dtoa_r+0x37a>
 800c41a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c41c:	2b00      	cmp	r3, #0
 800c41e:	f000 8082 	beq.w	800c526 <_dtoa_r+0x4de>
 800c422:	4b91      	ldr	r3, [pc, #580]	; (800c668 <_dtoa_r+0x620>)
 800c424:	2200      	movs	r2, #0
 800c426:	4650      	mov	r0, sl
 800c428:	4659      	mov	r1, fp
 800c42a:	f7f4 fb57 	bl	8000adc <__aeabi_dcmplt>
 800c42e:	2800      	cmp	r0, #0
 800c430:	d079      	beq.n	800c526 <_dtoa_r+0x4de>
 800c432:	9b03      	ldr	r3, [sp, #12]
 800c434:	2b00      	cmp	r3, #0
 800c436:	d076      	beq.n	800c526 <_dtoa_r+0x4de>
 800c438:	9b02      	ldr	r3, [sp, #8]
 800c43a:	2b00      	cmp	r3, #0
 800c43c:	dd36      	ble.n	800c4ac <_dtoa_r+0x464>
 800c43e:	9b00      	ldr	r3, [sp, #0]
 800c440:	4650      	mov	r0, sl
 800c442:	4659      	mov	r1, fp
 800c444:	1e5f      	subs	r7, r3, #1
 800c446:	2200      	movs	r2, #0
 800c448:	4b88      	ldr	r3, [pc, #544]	; (800c66c <_dtoa_r+0x624>)
 800c44a:	f7f4 f8d5 	bl	80005f8 <__aeabi_dmul>
 800c44e:	9e02      	ldr	r6, [sp, #8]
 800c450:	4682      	mov	sl, r0
 800c452:	468b      	mov	fp, r1
 800c454:	3501      	adds	r5, #1
 800c456:	4628      	mov	r0, r5
 800c458:	f7f4 f864 	bl	8000524 <__aeabi_i2d>
 800c45c:	4652      	mov	r2, sl
 800c45e:	465b      	mov	r3, fp
 800c460:	f7f4 f8ca 	bl	80005f8 <__aeabi_dmul>
 800c464:	4b82      	ldr	r3, [pc, #520]	; (800c670 <_dtoa_r+0x628>)
 800c466:	2200      	movs	r2, #0
 800c468:	f7f3 ff10 	bl	800028c <__adddf3>
 800c46c:	46d0      	mov	r8, sl
 800c46e:	46d9      	mov	r9, fp
 800c470:	4682      	mov	sl, r0
 800c472:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800c476:	2e00      	cmp	r6, #0
 800c478:	d158      	bne.n	800c52c <_dtoa_r+0x4e4>
 800c47a:	4b7e      	ldr	r3, [pc, #504]	; (800c674 <_dtoa_r+0x62c>)
 800c47c:	2200      	movs	r2, #0
 800c47e:	4640      	mov	r0, r8
 800c480:	4649      	mov	r1, r9
 800c482:	f7f3 ff01 	bl	8000288 <__aeabi_dsub>
 800c486:	4652      	mov	r2, sl
 800c488:	465b      	mov	r3, fp
 800c48a:	4680      	mov	r8, r0
 800c48c:	4689      	mov	r9, r1
 800c48e:	f7f4 fb43 	bl	8000b18 <__aeabi_dcmpgt>
 800c492:	2800      	cmp	r0, #0
 800c494:	f040 8295 	bne.w	800c9c2 <_dtoa_r+0x97a>
 800c498:	4652      	mov	r2, sl
 800c49a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800c49e:	4640      	mov	r0, r8
 800c4a0:	4649      	mov	r1, r9
 800c4a2:	f7f4 fb1b 	bl	8000adc <__aeabi_dcmplt>
 800c4a6:	2800      	cmp	r0, #0
 800c4a8:	f040 8289 	bne.w	800c9be <_dtoa_r+0x976>
 800c4ac:	ec5b ab19 	vmov	sl, fp, d9
 800c4b0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800c4b2:	2b00      	cmp	r3, #0
 800c4b4:	f2c0 8148 	blt.w	800c748 <_dtoa_r+0x700>
 800c4b8:	9a00      	ldr	r2, [sp, #0]
 800c4ba:	2a0e      	cmp	r2, #14
 800c4bc:	f300 8144 	bgt.w	800c748 <_dtoa_r+0x700>
 800c4c0:	4b67      	ldr	r3, [pc, #412]	; (800c660 <_dtoa_r+0x618>)
 800c4c2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c4c6:	e9d3 8900 	ldrd	r8, r9, [r3]
 800c4ca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c4cc:	2b00      	cmp	r3, #0
 800c4ce:	f280 80d5 	bge.w	800c67c <_dtoa_r+0x634>
 800c4d2:	9b03      	ldr	r3, [sp, #12]
 800c4d4:	2b00      	cmp	r3, #0
 800c4d6:	f300 80d1 	bgt.w	800c67c <_dtoa_r+0x634>
 800c4da:	f040 826f 	bne.w	800c9bc <_dtoa_r+0x974>
 800c4de:	4b65      	ldr	r3, [pc, #404]	; (800c674 <_dtoa_r+0x62c>)
 800c4e0:	2200      	movs	r2, #0
 800c4e2:	4640      	mov	r0, r8
 800c4e4:	4649      	mov	r1, r9
 800c4e6:	f7f4 f887 	bl	80005f8 <__aeabi_dmul>
 800c4ea:	4652      	mov	r2, sl
 800c4ec:	465b      	mov	r3, fp
 800c4ee:	f7f4 fb09 	bl	8000b04 <__aeabi_dcmpge>
 800c4f2:	9e03      	ldr	r6, [sp, #12]
 800c4f4:	4637      	mov	r7, r6
 800c4f6:	2800      	cmp	r0, #0
 800c4f8:	f040 8245 	bne.w	800c986 <_dtoa_r+0x93e>
 800c4fc:	9d01      	ldr	r5, [sp, #4]
 800c4fe:	2331      	movs	r3, #49	; 0x31
 800c500:	f805 3b01 	strb.w	r3, [r5], #1
 800c504:	9b00      	ldr	r3, [sp, #0]
 800c506:	3301      	adds	r3, #1
 800c508:	9300      	str	r3, [sp, #0]
 800c50a:	e240      	b.n	800c98e <_dtoa_r+0x946>
 800c50c:	07f2      	lsls	r2, r6, #31
 800c50e:	d505      	bpl.n	800c51c <_dtoa_r+0x4d4>
 800c510:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c514:	f7f4 f870 	bl	80005f8 <__aeabi_dmul>
 800c518:	3501      	adds	r5, #1
 800c51a:	2301      	movs	r3, #1
 800c51c:	1076      	asrs	r6, r6, #1
 800c51e:	3708      	adds	r7, #8
 800c520:	e777      	b.n	800c412 <_dtoa_r+0x3ca>
 800c522:	2502      	movs	r5, #2
 800c524:	e779      	b.n	800c41a <_dtoa_r+0x3d2>
 800c526:	9f00      	ldr	r7, [sp, #0]
 800c528:	9e03      	ldr	r6, [sp, #12]
 800c52a:	e794      	b.n	800c456 <_dtoa_r+0x40e>
 800c52c:	9901      	ldr	r1, [sp, #4]
 800c52e:	4b4c      	ldr	r3, [pc, #304]	; (800c660 <_dtoa_r+0x618>)
 800c530:	4431      	add	r1, r6
 800c532:	910d      	str	r1, [sp, #52]	; 0x34
 800c534:	9908      	ldr	r1, [sp, #32]
 800c536:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800c53a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800c53e:	2900      	cmp	r1, #0
 800c540:	d043      	beq.n	800c5ca <_dtoa_r+0x582>
 800c542:	494d      	ldr	r1, [pc, #308]	; (800c678 <_dtoa_r+0x630>)
 800c544:	2000      	movs	r0, #0
 800c546:	f7f4 f981 	bl	800084c <__aeabi_ddiv>
 800c54a:	4652      	mov	r2, sl
 800c54c:	465b      	mov	r3, fp
 800c54e:	f7f3 fe9b 	bl	8000288 <__aeabi_dsub>
 800c552:	9d01      	ldr	r5, [sp, #4]
 800c554:	4682      	mov	sl, r0
 800c556:	468b      	mov	fp, r1
 800c558:	4649      	mov	r1, r9
 800c55a:	4640      	mov	r0, r8
 800c55c:	f7f4 fafc 	bl	8000b58 <__aeabi_d2iz>
 800c560:	4606      	mov	r6, r0
 800c562:	f7f3 ffdf 	bl	8000524 <__aeabi_i2d>
 800c566:	4602      	mov	r2, r0
 800c568:	460b      	mov	r3, r1
 800c56a:	4640      	mov	r0, r8
 800c56c:	4649      	mov	r1, r9
 800c56e:	f7f3 fe8b 	bl	8000288 <__aeabi_dsub>
 800c572:	3630      	adds	r6, #48	; 0x30
 800c574:	f805 6b01 	strb.w	r6, [r5], #1
 800c578:	4652      	mov	r2, sl
 800c57a:	465b      	mov	r3, fp
 800c57c:	4680      	mov	r8, r0
 800c57e:	4689      	mov	r9, r1
 800c580:	f7f4 faac 	bl	8000adc <__aeabi_dcmplt>
 800c584:	2800      	cmp	r0, #0
 800c586:	d163      	bne.n	800c650 <_dtoa_r+0x608>
 800c588:	4642      	mov	r2, r8
 800c58a:	464b      	mov	r3, r9
 800c58c:	4936      	ldr	r1, [pc, #216]	; (800c668 <_dtoa_r+0x620>)
 800c58e:	2000      	movs	r0, #0
 800c590:	f7f3 fe7a 	bl	8000288 <__aeabi_dsub>
 800c594:	4652      	mov	r2, sl
 800c596:	465b      	mov	r3, fp
 800c598:	f7f4 faa0 	bl	8000adc <__aeabi_dcmplt>
 800c59c:	2800      	cmp	r0, #0
 800c59e:	f040 80b5 	bne.w	800c70c <_dtoa_r+0x6c4>
 800c5a2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c5a4:	429d      	cmp	r5, r3
 800c5a6:	d081      	beq.n	800c4ac <_dtoa_r+0x464>
 800c5a8:	4b30      	ldr	r3, [pc, #192]	; (800c66c <_dtoa_r+0x624>)
 800c5aa:	2200      	movs	r2, #0
 800c5ac:	4650      	mov	r0, sl
 800c5ae:	4659      	mov	r1, fp
 800c5b0:	f7f4 f822 	bl	80005f8 <__aeabi_dmul>
 800c5b4:	4b2d      	ldr	r3, [pc, #180]	; (800c66c <_dtoa_r+0x624>)
 800c5b6:	4682      	mov	sl, r0
 800c5b8:	468b      	mov	fp, r1
 800c5ba:	4640      	mov	r0, r8
 800c5bc:	4649      	mov	r1, r9
 800c5be:	2200      	movs	r2, #0
 800c5c0:	f7f4 f81a 	bl	80005f8 <__aeabi_dmul>
 800c5c4:	4680      	mov	r8, r0
 800c5c6:	4689      	mov	r9, r1
 800c5c8:	e7c6      	b.n	800c558 <_dtoa_r+0x510>
 800c5ca:	4650      	mov	r0, sl
 800c5cc:	4659      	mov	r1, fp
 800c5ce:	f7f4 f813 	bl	80005f8 <__aeabi_dmul>
 800c5d2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c5d4:	9d01      	ldr	r5, [sp, #4]
 800c5d6:	930f      	str	r3, [sp, #60]	; 0x3c
 800c5d8:	4682      	mov	sl, r0
 800c5da:	468b      	mov	fp, r1
 800c5dc:	4649      	mov	r1, r9
 800c5de:	4640      	mov	r0, r8
 800c5e0:	f7f4 faba 	bl	8000b58 <__aeabi_d2iz>
 800c5e4:	4606      	mov	r6, r0
 800c5e6:	f7f3 ff9d 	bl	8000524 <__aeabi_i2d>
 800c5ea:	3630      	adds	r6, #48	; 0x30
 800c5ec:	4602      	mov	r2, r0
 800c5ee:	460b      	mov	r3, r1
 800c5f0:	4640      	mov	r0, r8
 800c5f2:	4649      	mov	r1, r9
 800c5f4:	f7f3 fe48 	bl	8000288 <__aeabi_dsub>
 800c5f8:	f805 6b01 	strb.w	r6, [r5], #1
 800c5fc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c5fe:	429d      	cmp	r5, r3
 800c600:	4680      	mov	r8, r0
 800c602:	4689      	mov	r9, r1
 800c604:	f04f 0200 	mov.w	r2, #0
 800c608:	d124      	bne.n	800c654 <_dtoa_r+0x60c>
 800c60a:	4b1b      	ldr	r3, [pc, #108]	; (800c678 <_dtoa_r+0x630>)
 800c60c:	4650      	mov	r0, sl
 800c60e:	4659      	mov	r1, fp
 800c610:	f7f3 fe3c 	bl	800028c <__adddf3>
 800c614:	4602      	mov	r2, r0
 800c616:	460b      	mov	r3, r1
 800c618:	4640      	mov	r0, r8
 800c61a:	4649      	mov	r1, r9
 800c61c:	f7f4 fa7c 	bl	8000b18 <__aeabi_dcmpgt>
 800c620:	2800      	cmp	r0, #0
 800c622:	d173      	bne.n	800c70c <_dtoa_r+0x6c4>
 800c624:	4652      	mov	r2, sl
 800c626:	465b      	mov	r3, fp
 800c628:	4913      	ldr	r1, [pc, #76]	; (800c678 <_dtoa_r+0x630>)
 800c62a:	2000      	movs	r0, #0
 800c62c:	f7f3 fe2c 	bl	8000288 <__aeabi_dsub>
 800c630:	4602      	mov	r2, r0
 800c632:	460b      	mov	r3, r1
 800c634:	4640      	mov	r0, r8
 800c636:	4649      	mov	r1, r9
 800c638:	f7f4 fa50 	bl	8000adc <__aeabi_dcmplt>
 800c63c:	2800      	cmp	r0, #0
 800c63e:	f43f af35 	beq.w	800c4ac <_dtoa_r+0x464>
 800c642:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800c644:	1e6b      	subs	r3, r5, #1
 800c646:	930f      	str	r3, [sp, #60]	; 0x3c
 800c648:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800c64c:	2b30      	cmp	r3, #48	; 0x30
 800c64e:	d0f8      	beq.n	800c642 <_dtoa_r+0x5fa>
 800c650:	9700      	str	r7, [sp, #0]
 800c652:	e049      	b.n	800c6e8 <_dtoa_r+0x6a0>
 800c654:	4b05      	ldr	r3, [pc, #20]	; (800c66c <_dtoa_r+0x624>)
 800c656:	f7f3 ffcf 	bl	80005f8 <__aeabi_dmul>
 800c65a:	4680      	mov	r8, r0
 800c65c:	4689      	mov	r9, r1
 800c65e:	e7bd      	b.n	800c5dc <_dtoa_r+0x594>
 800c660:	08013d80 	.word	0x08013d80
 800c664:	08013d58 	.word	0x08013d58
 800c668:	3ff00000 	.word	0x3ff00000
 800c66c:	40240000 	.word	0x40240000
 800c670:	401c0000 	.word	0x401c0000
 800c674:	40140000 	.word	0x40140000
 800c678:	3fe00000 	.word	0x3fe00000
 800c67c:	9d01      	ldr	r5, [sp, #4]
 800c67e:	4656      	mov	r6, sl
 800c680:	465f      	mov	r7, fp
 800c682:	4642      	mov	r2, r8
 800c684:	464b      	mov	r3, r9
 800c686:	4630      	mov	r0, r6
 800c688:	4639      	mov	r1, r7
 800c68a:	f7f4 f8df 	bl	800084c <__aeabi_ddiv>
 800c68e:	f7f4 fa63 	bl	8000b58 <__aeabi_d2iz>
 800c692:	4682      	mov	sl, r0
 800c694:	f7f3 ff46 	bl	8000524 <__aeabi_i2d>
 800c698:	4642      	mov	r2, r8
 800c69a:	464b      	mov	r3, r9
 800c69c:	f7f3 ffac 	bl	80005f8 <__aeabi_dmul>
 800c6a0:	4602      	mov	r2, r0
 800c6a2:	460b      	mov	r3, r1
 800c6a4:	4630      	mov	r0, r6
 800c6a6:	4639      	mov	r1, r7
 800c6a8:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800c6ac:	f7f3 fdec 	bl	8000288 <__aeabi_dsub>
 800c6b0:	f805 6b01 	strb.w	r6, [r5], #1
 800c6b4:	9e01      	ldr	r6, [sp, #4]
 800c6b6:	9f03      	ldr	r7, [sp, #12]
 800c6b8:	1bae      	subs	r6, r5, r6
 800c6ba:	42b7      	cmp	r7, r6
 800c6bc:	4602      	mov	r2, r0
 800c6be:	460b      	mov	r3, r1
 800c6c0:	d135      	bne.n	800c72e <_dtoa_r+0x6e6>
 800c6c2:	f7f3 fde3 	bl	800028c <__adddf3>
 800c6c6:	4642      	mov	r2, r8
 800c6c8:	464b      	mov	r3, r9
 800c6ca:	4606      	mov	r6, r0
 800c6cc:	460f      	mov	r7, r1
 800c6ce:	f7f4 fa23 	bl	8000b18 <__aeabi_dcmpgt>
 800c6d2:	b9d0      	cbnz	r0, 800c70a <_dtoa_r+0x6c2>
 800c6d4:	4642      	mov	r2, r8
 800c6d6:	464b      	mov	r3, r9
 800c6d8:	4630      	mov	r0, r6
 800c6da:	4639      	mov	r1, r7
 800c6dc:	f7f4 f9f4 	bl	8000ac8 <__aeabi_dcmpeq>
 800c6e0:	b110      	cbz	r0, 800c6e8 <_dtoa_r+0x6a0>
 800c6e2:	f01a 0f01 	tst.w	sl, #1
 800c6e6:	d110      	bne.n	800c70a <_dtoa_r+0x6c2>
 800c6e8:	4620      	mov	r0, r4
 800c6ea:	ee18 1a10 	vmov	r1, s16
 800c6ee:	f000 fae5 	bl	800ccbc <_Bfree>
 800c6f2:	2300      	movs	r3, #0
 800c6f4:	9800      	ldr	r0, [sp, #0]
 800c6f6:	702b      	strb	r3, [r5, #0]
 800c6f8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c6fa:	3001      	adds	r0, #1
 800c6fc:	6018      	str	r0, [r3, #0]
 800c6fe:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c700:	2b00      	cmp	r3, #0
 800c702:	f43f acf1 	beq.w	800c0e8 <_dtoa_r+0xa0>
 800c706:	601d      	str	r5, [r3, #0]
 800c708:	e4ee      	b.n	800c0e8 <_dtoa_r+0xa0>
 800c70a:	9f00      	ldr	r7, [sp, #0]
 800c70c:	462b      	mov	r3, r5
 800c70e:	461d      	mov	r5, r3
 800c710:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c714:	2a39      	cmp	r2, #57	; 0x39
 800c716:	d106      	bne.n	800c726 <_dtoa_r+0x6de>
 800c718:	9a01      	ldr	r2, [sp, #4]
 800c71a:	429a      	cmp	r2, r3
 800c71c:	d1f7      	bne.n	800c70e <_dtoa_r+0x6c6>
 800c71e:	9901      	ldr	r1, [sp, #4]
 800c720:	2230      	movs	r2, #48	; 0x30
 800c722:	3701      	adds	r7, #1
 800c724:	700a      	strb	r2, [r1, #0]
 800c726:	781a      	ldrb	r2, [r3, #0]
 800c728:	3201      	adds	r2, #1
 800c72a:	701a      	strb	r2, [r3, #0]
 800c72c:	e790      	b.n	800c650 <_dtoa_r+0x608>
 800c72e:	4ba6      	ldr	r3, [pc, #664]	; (800c9c8 <_dtoa_r+0x980>)
 800c730:	2200      	movs	r2, #0
 800c732:	f7f3 ff61 	bl	80005f8 <__aeabi_dmul>
 800c736:	2200      	movs	r2, #0
 800c738:	2300      	movs	r3, #0
 800c73a:	4606      	mov	r6, r0
 800c73c:	460f      	mov	r7, r1
 800c73e:	f7f4 f9c3 	bl	8000ac8 <__aeabi_dcmpeq>
 800c742:	2800      	cmp	r0, #0
 800c744:	d09d      	beq.n	800c682 <_dtoa_r+0x63a>
 800c746:	e7cf      	b.n	800c6e8 <_dtoa_r+0x6a0>
 800c748:	9a08      	ldr	r2, [sp, #32]
 800c74a:	2a00      	cmp	r2, #0
 800c74c:	f000 80d7 	beq.w	800c8fe <_dtoa_r+0x8b6>
 800c750:	9a06      	ldr	r2, [sp, #24]
 800c752:	2a01      	cmp	r2, #1
 800c754:	f300 80ba 	bgt.w	800c8cc <_dtoa_r+0x884>
 800c758:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800c75a:	2a00      	cmp	r2, #0
 800c75c:	f000 80b2 	beq.w	800c8c4 <_dtoa_r+0x87c>
 800c760:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800c764:	9e07      	ldr	r6, [sp, #28]
 800c766:	9d04      	ldr	r5, [sp, #16]
 800c768:	9a04      	ldr	r2, [sp, #16]
 800c76a:	441a      	add	r2, r3
 800c76c:	9204      	str	r2, [sp, #16]
 800c76e:	9a05      	ldr	r2, [sp, #20]
 800c770:	2101      	movs	r1, #1
 800c772:	441a      	add	r2, r3
 800c774:	4620      	mov	r0, r4
 800c776:	9205      	str	r2, [sp, #20]
 800c778:	f000 fb58 	bl	800ce2c <__i2b>
 800c77c:	4607      	mov	r7, r0
 800c77e:	2d00      	cmp	r5, #0
 800c780:	dd0c      	ble.n	800c79c <_dtoa_r+0x754>
 800c782:	9b05      	ldr	r3, [sp, #20]
 800c784:	2b00      	cmp	r3, #0
 800c786:	dd09      	ble.n	800c79c <_dtoa_r+0x754>
 800c788:	42ab      	cmp	r3, r5
 800c78a:	9a04      	ldr	r2, [sp, #16]
 800c78c:	bfa8      	it	ge
 800c78e:	462b      	movge	r3, r5
 800c790:	1ad2      	subs	r2, r2, r3
 800c792:	9204      	str	r2, [sp, #16]
 800c794:	9a05      	ldr	r2, [sp, #20]
 800c796:	1aed      	subs	r5, r5, r3
 800c798:	1ad3      	subs	r3, r2, r3
 800c79a:	9305      	str	r3, [sp, #20]
 800c79c:	9b07      	ldr	r3, [sp, #28]
 800c79e:	b31b      	cbz	r3, 800c7e8 <_dtoa_r+0x7a0>
 800c7a0:	9b08      	ldr	r3, [sp, #32]
 800c7a2:	2b00      	cmp	r3, #0
 800c7a4:	f000 80af 	beq.w	800c906 <_dtoa_r+0x8be>
 800c7a8:	2e00      	cmp	r6, #0
 800c7aa:	dd13      	ble.n	800c7d4 <_dtoa_r+0x78c>
 800c7ac:	4639      	mov	r1, r7
 800c7ae:	4632      	mov	r2, r6
 800c7b0:	4620      	mov	r0, r4
 800c7b2:	f000 fbfb 	bl	800cfac <__pow5mult>
 800c7b6:	ee18 2a10 	vmov	r2, s16
 800c7ba:	4601      	mov	r1, r0
 800c7bc:	4607      	mov	r7, r0
 800c7be:	4620      	mov	r0, r4
 800c7c0:	f000 fb4a 	bl	800ce58 <__multiply>
 800c7c4:	ee18 1a10 	vmov	r1, s16
 800c7c8:	4680      	mov	r8, r0
 800c7ca:	4620      	mov	r0, r4
 800c7cc:	f000 fa76 	bl	800ccbc <_Bfree>
 800c7d0:	ee08 8a10 	vmov	s16, r8
 800c7d4:	9b07      	ldr	r3, [sp, #28]
 800c7d6:	1b9a      	subs	r2, r3, r6
 800c7d8:	d006      	beq.n	800c7e8 <_dtoa_r+0x7a0>
 800c7da:	ee18 1a10 	vmov	r1, s16
 800c7de:	4620      	mov	r0, r4
 800c7e0:	f000 fbe4 	bl	800cfac <__pow5mult>
 800c7e4:	ee08 0a10 	vmov	s16, r0
 800c7e8:	2101      	movs	r1, #1
 800c7ea:	4620      	mov	r0, r4
 800c7ec:	f000 fb1e 	bl	800ce2c <__i2b>
 800c7f0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c7f2:	2b00      	cmp	r3, #0
 800c7f4:	4606      	mov	r6, r0
 800c7f6:	f340 8088 	ble.w	800c90a <_dtoa_r+0x8c2>
 800c7fa:	461a      	mov	r2, r3
 800c7fc:	4601      	mov	r1, r0
 800c7fe:	4620      	mov	r0, r4
 800c800:	f000 fbd4 	bl	800cfac <__pow5mult>
 800c804:	9b06      	ldr	r3, [sp, #24]
 800c806:	2b01      	cmp	r3, #1
 800c808:	4606      	mov	r6, r0
 800c80a:	f340 8081 	ble.w	800c910 <_dtoa_r+0x8c8>
 800c80e:	f04f 0800 	mov.w	r8, #0
 800c812:	6933      	ldr	r3, [r6, #16]
 800c814:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800c818:	6918      	ldr	r0, [r3, #16]
 800c81a:	f000 fab7 	bl	800cd8c <__hi0bits>
 800c81e:	f1c0 0020 	rsb	r0, r0, #32
 800c822:	9b05      	ldr	r3, [sp, #20]
 800c824:	4418      	add	r0, r3
 800c826:	f010 001f 	ands.w	r0, r0, #31
 800c82a:	f000 8092 	beq.w	800c952 <_dtoa_r+0x90a>
 800c82e:	f1c0 0320 	rsb	r3, r0, #32
 800c832:	2b04      	cmp	r3, #4
 800c834:	f340 808a 	ble.w	800c94c <_dtoa_r+0x904>
 800c838:	f1c0 001c 	rsb	r0, r0, #28
 800c83c:	9b04      	ldr	r3, [sp, #16]
 800c83e:	4403      	add	r3, r0
 800c840:	9304      	str	r3, [sp, #16]
 800c842:	9b05      	ldr	r3, [sp, #20]
 800c844:	4403      	add	r3, r0
 800c846:	4405      	add	r5, r0
 800c848:	9305      	str	r3, [sp, #20]
 800c84a:	9b04      	ldr	r3, [sp, #16]
 800c84c:	2b00      	cmp	r3, #0
 800c84e:	dd07      	ble.n	800c860 <_dtoa_r+0x818>
 800c850:	ee18 1a10 	vmov	r1, s16
 800c854:	461a      	mov	r2, r3
 800c856:	4620      	mov	r0, r4
 800c858:	f000 fc02 	bl	800d060 <__lshift>
 800c85c:	ee08 0a10 	vmov	s16, r0
 800c860:	9b05      	ldr	r3, [sp, #20]
 800c862:	2b00      	cmp	r3, #0
 800c864:	dd05      	ble.n	800c872 <_dtoa_r+0x82a>
 800c866:	4631      	mov	r1, r6
 800c868:	461a      	mov	r2, r3
 800c86a:	4620      	mov	r0, r4
 800c86c:	f000 fbf8 	bl	800d060 <__lshift>
 800c870:	4606      	mov	r6, r0
 800c872:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c874:	2b00      	cmp	r3, #0
 800c876:	d06e      	beq.n	800c956 <_dtoa_r+0x90e>
 800c878:	ee18 0a10 	vmov	r0, s16
 800c87c:	4631      	mov	r1, r6
 800c87e:	f000 fc5f 	bl	800d140 <__mcmp>
 800c882:	2800      	cmp	r0, #0
 800c884:	da67      	bge.n	800c956 <_dtoa_r+0x90e>
 800c886:	9b00      	ldr	r3, [sp, #0]
 800c888:	3b01      	subs	r3, #1
 800c88a:	ee18 1a10 	vmov	r1, s16
 800c88e:	9300      	str	r3, [sp, #0]
 800c890:	220a      	movs	r2, #10
 800c892:	2300      	movs	r3, #0
 800c894:	4620      	mov	r0, r4
 800c896:	f000 fa33 	bl	800cd00 <__multadd>
 800c89a:	9b08      	ldr	r3, [sp, #32]
 800c89c:	ee08 0a10 	vmov	s16, r0
 800c8a0:	2b00      	cmp	r3, #0
 800c8a2:	f000 81b1 	beq.w	800cc08 <_dtoa_r+0xbc0>
 800c8a6:	2300      	movs	r3, #0
 800c8a8:	4639      	mov	r1, r7
 800c8aa:	220a      	movs	r2, #10
 800c8ac:	4620      	mov	r0, r4
 800c8ae:	f000 fa27 	bl	800cd00 <__multadd>
 800c8b2:	9b02      	ldr	r3, [sp, #8]
 800c8b4:	2b00      	cmp	r3, #0
 800c8b6:	4607      	mov	r7, r0
 800c8b8:	f300 808e 	bgt.w	800c9d8 <_dtoa_r+0x990>
 800c8bc:	9b06      	ldr	r3, [sp, #24]
 800c8be:	2b02      	cmp	r3, #2
 800c8c0:	dc51      	bgt.n	800c966 <_dtoa_r+0x91e>
 800c8c2:	e089      	b.n	800c9d8 <_dtoa_r+0x990>
 800c8c4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800c8c6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800c8ca:	e74b      	b.n	800c764 <_dtoa_r+0x71c>
 800c8cc:	9b03      	ldr	r3, [sp, #12]
 800c8ce:	1e5e      	subs	r6, r3, #1
 800c8d0:	9b07      	ldr	r3, [sp, #28]
 800c8d2:	42b3      	cmp	r3, r6
 800c8d4:	bfbf      	itttt	lt
 800c8d6:	9b07      	ldrlt	r3, [sp, #28]
 800c8d8:	9607      	strlt	r6, [sp, #28]
 800c8da:	1af2      	sublt	r2, r6, r3
 800c8dc:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800c8de:	bfb6      	itet	lt
 800c8e0:	189b      	addlt	r3, r3, r2
 800c8e2:	1b9e      	subge	r6, r3, r6
 800c8e4:	930a      	strlt	r3, [sp, #40]	; 0x28
 800c8e6:	9b03      	ldr	r3, [sp, #12]
 800c8e8:	bfb8      	it	lt
 800c8ea:	2600      	movlt	r6, #0
 800c8ec:	2b00      	cmp	r3, #0
 800c8ee:	bfb7      	itett	lt
 800c8f0:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800c8f4:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800c8f8:	1a9d      	sublt	r5, r3, r2
 800c8fa:	2300      	movlt	r3, #0
 800c8fc:	e734      	b.n	800c768 <_dtoa_r+0x720>
 800c8fe:	9e07      	ldr	r6, [sp, #28]
 800c900:	9d04      	ldr	r5, [sp, #16]
 800c902:	9f08      	ldr	r7, [sp, #32]
 800c904:	e73b      	b.n	800c77e <_dtoa_r+0x736>
 800c906:	9a07      	ldr	r2, [sp, #28]
 800c908:	e767      	b.n	800c7da <_dtoa_r+0x792>
 800c90a:	9b06      	ldr	r3, [sp, #24]
 800c90c:	2b01      	cmp	r3, #1
 800c90e:	dc18      	bgt.n	800c942 <_dtoa_r+0x8fa>
 800c910:	f1ba 0f00 	cmp.w	sl, #0
 800c914:	d115      	bne.n	800c942 <_dtoa_r+0x8fa>
 800c916:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800c91a:	b993      	cbnz	r3, 800c942 <_dtoa_r+0x8fa>
 800c91c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800c920:	0d1b      	lsrs	r3, r3, #20
 800c922:	051b      	lsls	r3, r3, #20
 800c924:	b183      	cbz	r3, 800c948 <_dtoa_r+0x900>
 800c926:	9b04      	ldr	r3, [sp, #16]
 800c928:	3301      	adds	r3, #1
 800c92a:	9304      	str	r3, [sp, #16]
 800c92c:	9b05      	ldr	r3, [sp, #20]
 800c92e:	3301      	adds	r3, #1
 800c930:	9305      	str	r3, [sp, #20]
 800c932:	f04f 0801 	mov.w	r8, #1
 800c936:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c938:	2b00      	cmp	r3, #0
 800c93a:	f47f af6a 	bne.w	800c812 <_dtoa_r+0x7ca>
 800c93e:	2001      	movs	r0, #1
 800c940:	e76f      	b.n	800c822 <_dtoa_r+0x7da>
 800c942:	f04f 0800 	mov.w	r8, #0
 800c946:	e7f6      	b.n	800c936 <_dtoa_r+0x8ee>
 800c948:	4698      	mov	r8, r3
 800c94a:	e7f4      	b.n	800c936 <_dtoa_r+0x8ee>
 800c94c:	f43f af7d 	beq.w	800c84a <_dtoa_r+0x802>
 800c950:	4618      	mov	r0, r3
 800c952:	301c      	adds	r0, #28
 800c954:	e772      	b.n	800c83c <_dtoa_r+0x7f4>
 800c956:	9b03      	ldr	r3, [sp, #12]
 800c958:	2b00      	cmp	r3, #0
 800c95a:	dc37      	bgt.n	800c9cc <_dtoa_r+0x984>
 800c95c:	9b06      	ldr	r3, [sp, #24]
 800c95e:	2b02      	cmp	r3, #2
 800c960:	dd34      	ble.n	800c9cc <_dtoa_r+0x984>
 800c962:	9b03      	ldr	r3, [sp, #12]
 800c964:	9302      	str	r3, [sp, #8]
 800c966:	9b02      	ldr	r3, [sp, #8]
 800c968:	b96b      	cbnz	r3, 800c986 <_dtoa_r+0x93e>
 800c96a:	4631      	mov	r1, r6
 800c96c:	2205      	movs	r2, #5
 800c96e:	4620      	mov	r0, r4
 800c970:	f000 f9c6 	bl	800cd00 <__multadd>
 800c974:	4601      	mov	r1, r0
 800c976:	4606      	mov	r6, r0
 800c978:	ee18 0a10 	vmov	r0, s16
 800c97c:	f000 fbe0 	bl	800d140 <__mcmp>
 800c980:	2800      	cmp	r0, #0
 800c982:	f73f adbb 	bgt.w	800c4fc <_dtoa_r+0x4b4>
 800c986:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c988:	9d01      	ldr	r5, [sp, #4]
 800c98a:	43db      	mvns	r3, r3
 800c98c:	9300      	str	r3, [sp, #0]
 800c98e:	f04f 0800 	mov.w	r8, #0
 800c992:	4631      	mov	r1, r6
 800c994:	4620      	mov	r0, r4
 800c996:	f000 f991 	bl	800ccbc <_Bfree>
 800c99a:	2f00      	cmp	r7, #0
 800c99c:	f43f aea4 	beq.w	800c6e8 <_dtoa_r+0x6a0>
 800c9a0:	f1b8 0f00 	cmp.w	r8, #0
 800c9a4:	d005      	beq.n	800c9b2 <_dtoa_r+0x96a>
 800c9a6:	45b8      	cmp	r8, r7
 800c9a8:	d003      	beq.n	800c9b2 <_dtoa_r+0x96a>
 800c9aa:	4641      	mov	r1, r8
 800c9ac:	4620      	mov	r0, r4
 800c9ae:	f000 f985 	bl	800ccbc <_Bfree>
 800c9b2:	4639      	mov	r1, r7
 800c9b4:	4620      	mov	r0, r4
 800c9b6:	f000 f981 	bl	800ccbc <_Bfree>
 800c9ba:	e695      	b.n	800c6e8 <_dtoa_r+0x6a0>
 800c9bc:	2600      	movs	r6, #0
 800c9be:	4637      	mov	r7, r6
 800c9c0:	e7e1      	b.n	800c986 <_dtoa_r+0x93e>
 800c9c2:	9700      	str	r7, [sp, #0]
 800c9c4:	4637      	mov	r7, r6
 800c9c6:	e599      	b.n	800c4fc <_dtoa_r+0x4b4>
 800c9c8:	40240000 	.word	0x40240000
 800c9cc:	9b08      	ldr	r3, [sp, #32]
 800c9ce:	2b00      	cmp	r3, #0
 800c9d0:	f000 80ca 	beq.w	800cb68 <_dtoa_r+0xb20>
 800c9d4:	9b03      	ldr	r3, [sp, #12]
 800c9d6:	9302      	str	r3, [sp, #8]
 800c9d8:	2d00      	cmp	r5, #0
 800c9da:	dd05      	ble.n	800c9e8 <_dtoa_r+0x9a0>
 800c9dc:	4639      	mov	r1, r7
 800c9de:	462a      	mov	r2, r5
 800c9e0:	4620      	mov	r0, r4
 800c9e2:	f000 fb3d 	bl	800d060 <__lshift>
 800c9e6:	4607      	mov	r7, r0
 800c9e8:	f1b8 0f00 	cmp.w	r8, #0
 800c9ec:	d05b      	beq.n	800caa6 <_dtoa_r+0xa5e>
 800c9ee:	6879      	ldr	r1, [r7, #4]
 800c9f0:	4620      	mov	r0, r4
 800c9f2:	f000 f923 	bl	800cc3c <_Balloc>
 800c9f6:	4605      	mov	r5, r0
 800c9f8:	b928      	cbnz	r0, 800ca06 <_dtoa_r+0x9be>
 800c9fa:	4b87      	ldr	r3, [pc, #540]	; (800cc18 <_dtoa_r+0xbd0>)
 800c9fc:	4602      	mov	r2, r0
 800c9fe:	f240 21ea 	movw	r1, #746	; 0x2ea
 800ca02:	f7ff bb3b 	b.w	800c07c <_dtoa_r+0x34>
 800ca06:	693a      	ldr	r2, [r7, #16]
 800ca08:	3202      	adds	r2, #2
 800ca0a:	0092      	lsls	r2, r2, #2
 800ca0c:	f107 010c 	add.w	r1, r7, #12
 800ca10:	300c      	adds	r0, #12
 800ca12:	f7fe fdeb 	bl	800b5ec <memcpy>
 800ca16:	2201      	movs	r2, #1
 800ca18:	4629      	mov	r1, r5
 800ca1a:	4620      	mov	r0, r4
 800ca1c:	f000 fb20 	bl	800d060 <__lshift>
 800ca20:	9b01      	ldr	r3, [sp, #4]
 800ca22:	f103 0901 	add.w	r9, r3, #1
 800ca26:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800ca2a:	4413      	add	r3, r2
 800ca2c:	9305      	str	r3, [sp, #20]
 800ca2e:	f00a 0301 	and.w	r3, sl, #1
 800ca32:	46b8      	mov	r8, r7
 800ca34:	9304      	str	r3, [sp, #16]
 800ca36:	4607      	mov	r7, r0
 800ca38:	4631      	mov	r1, r6
 800ca3a:	ee18 0a10 	vmov	r0, s16
 800ca3e:	f7ff fa75 	bl	800bf2c <quorem>
 800ca42:	4641      	mov	r1, r8
 800ca44:	9002      	str	r0, [sp, #8]
 800ca46:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800ca4a:	ee18 0a10 	vmov	r0, s16
 800ca4e:	f000 fb77 	bl	800d140 <__mcmp>
 800ca52:	463a      	mov	r2, r7
 800ca54:	9003      	str	r0, [sp, #12]
 800ca56:	4631      	mov	r1, r6
 800ca58:	4620      	mov	r0, r4
 800ca5a:	f000 fb8d 	bl	800d178 <__mdiff>
 800ca5e:	68c2      	ldr	r2, [r0, #12]
 800ca60:	f109 3bff 	add.w	fp, r9, #4294967295	; 0xffffffff
 800ca64:	4605      	mov	r5, r0
 800ca66:	bb02      	cbnz	r2, 800caaa <_dtoa_r+0xa62>
 800ca68:	4601      	mov	r1, r0
 800ca6a:	ee18 0a10 	vmov	r0, s16
 800ca6e:	f000 fb67 	bl	800d140 <__mcmp>
 800ca72:	4602      	mov	r2, r0
 800ca74:	4629      	mov	r1, r5
 800ca76:	4620      	mov	r0, r4
 800ca78:	9207      	str	r2, [sp, #28]
 800ca7a:	f000 f91f 	bl	800ccbc <_Bfree>
 800ca7e:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800ca82:	ea43 0102 	orr.w	r1, r3, r2
 800ca86:	9b04      	ldr	r3, [sp, #16]
 800ca88:	430b      	orrs	r3, r1
 800ca8a:	464d      	mov	r5, r9
 800ca8c:	d10f      	bne.n	800caae <_dtoa_r+0xa66>
 800ca8e:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800ca92:	d02a      	beq.n	800caea <_dtoa_r+0xaa2>
 800ca94:	9b03      	ldr	r3, [sp, #12]
 800ca96:	2b00      	cmp	r3, #0
 800ca98:	dd02      	ble.n	800caa0 <_dtoa_r+0xa58>
 800ca9a:	9b02      	ldr	r3, [sp, #8]
 800ca9c:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800caa0:	f88b a000 	strb.w	sl, [fp]
 800caa4:	e775      	b.n	800c992 <_dtoa_r+0x94a>
 800caa6:	4638      	mov	r0, r7
 800caa8:	e7ba      	b.n	800ca20 <_dtoa_r+0x9d8>
 800caaa:	2201      	movs	r2, #1
 800caac:	e7e2      	b.n	800ca74 <_dtoa_r+0xa2c>
 800caae:	9b03      	ldr	r3, [sp, #12]
 800cab0:	2b00      	cmp	r3, #0
 800cab2:	db04      	blt.n	800cabe <_dtoa_r+0xa76>
 800cab4:	9906      	ldr	r1, [sp, #24]
 800cab6:	430b      	orrs	r3, r1
 800cab8:	9904      	ldr	r1, [sp, #16]
 800caba:	430b      	orrs	r3, r1
 800cabc:	d122      	bne.n	800cb04 <_dtoa_r+0xabc>
 800cabe:	2a00      	cmp	r2, #0
 800cac0:	ddee      	ble.n	800caa0 <_dtoa_r+0xa58>
 800cac2:	ee18 1a10 	vmov	r1, s16
 800cac6:	2201      	movs	r2, #1
 800cac8:	4620      	mov	r0, r4
 800caca:	f000 fac9 	bl	800d060 <__lshift>
 800cace:	4631      	mov	r1, r6
 800cad0:	ee08 0a10 	vmov	s16, r0
 800cad4:	f000 fb34 	bl	800d140 <__mcmp>
 800cad8:	2800      	cmp	r0, #0
 800cada:	dc03      	bgt.n	800cae4 <_dtoa_r+0xa9c>
 800cadc:	d1e0      	bne.n	800caa0 <_dtoa_r+0xa58>
 800cade:	f01a 0f01 	tst.w	sl, #1
 800cae2:	d0dd      	beq.n	800caa0 <_dtoa_r+0xa58>
 800cae4:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800cae8:	d1d7      	bne.n	800ca9a <_dtoa_r+0xa52>
 800caea:	2339      	movs	r3, #57	; 0x39
 800caec:	f88b 3000 	strb.w	r3, [fp]
 800caf0:	462b      	mov	r3, r5
 800caf2:	461d      	mov	r5, r3
 800caf4:	3b01      	subs	r3, #1
 800caf6:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800cafa:	2a39      	cmp	r2, #57	; 0x39
 800cafc:	d071      	beq.n	800cbe2 <_dtoa_r+0xb9a>
 800cafe:	3201      	adds	r2, #1
 800cb00:	701a      	strb	r2, [r3, #0]
 800cb02:	e746      	b.n	800c992 <_dtoa_r+0x94a>
 800cb04:	2a00      	cmp	r2, #0
 800cb06:	dd07      	ble.n	800cb18 <_dtoa_r+0xad0>
 800cb08:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800cb0c:	d0ed      	beq.n	800caea <_dtoa_r+0xaa2>
 800cb0e:	f10a 0301 	add.w	r3, sl, #1
 800cb12:	f88b 3000 	strb.w	r3, [fp]
 800cb16:	e73c      	b.n	800c992 <_dtoa_r+0x94a>
 800cb18:	9b05      	ldr	r3, [sp, #20]
 800cb1a:	f809 ac01 	strb.w	sl, [r9, #-1]
 800cb1e:	4599      	cmp	r9, r3
 800cb20:	d047      	beq.n	800cbb2 <_dtoa_r+0xb6a>
 800cb22:	ee18 1a10 	vmov	r1, s16
 800cb26:	2300      	movs	r3, #0
 800cb28:	220a      	movs	r2, #10
 800cb2a:	4620      	mov	r0, r4
 800cb2c:	f000 f8e8 	bl	800cd00 <__multadd>
 800cb30:	45b8      	cmp	r8, r7
 800cb32:	ee08 0a10 	vmov	s16, r0
 800cb36:	f04f 0300 	mov.w	r3, #0
 800cb3a:	f04f 020a 	mov.w	r2, #10
 800cb3e:	4641      	mov	r1, r8
 800cb40:	4620      	mov	r0, r4
 800cb42:	d106      	bne.n	800cb52 <_dtoa_r+0xb0a>
 800cb44:	f000 f8dc 	bl	800cd00 <__multadd>
 800cb48:	4680      	mov	r8, r0
 800cb4a:	4607      	mov	r7, r0
 800cb4c:	f109 0901 	add.w	r9, r9, #1
 800cb50:	e772      	b.n	800ca38 <_dtoa_r+0x9f0>
 800cb52:	f000 f8d5 	bl	800cd00 <__multadd>
 800cb56:	4639      	mov	r1, r7
 800cb58:	4680      	mov	r8, r0
 800cb5a:	2300      	movs	r3, #0
 800cb5c:	220a      	movs	r2, #10
 800cb5e:	4620      	mov	r0, r4
 800cb60:	f000 f8ce 	bl	800cd00 <__multadd>
 800cb64:	4607      	mov	r7, r0
 800cb66:	e7f1      	b.n	800cb4c <_dtoa_r+0xb04>
 800cb68:	9b03      	ldr	r3, [sp, #12]
 800cb6a:	9302      	str	r3, [sp, #8]
 800cb6c:	9d01      	ldr	r5, [sp, #4]
 800cb6e:	ee18 0a10 	vmov	r0, s16
 800cb72:	4631      	mov	r1, r6
 800cb74:	f7ff f9da 	bl	800bf2c <quorem>
 800cb78:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800cb7c:	9b01      	ldr	r3, [sp, #4]
 800cb7e:	f805 ab01 	strb.w	sl, [r5], #1
 800cb82:	1aea      	subs	r2, r5, r3
 800cb84:	9b02      	ldr	r3, [sp, #8]
 800cb86:	4293      	cmp	r3, r2
 800cb88:	dd09      	ble.n	800cb9e <_dtoa_r+0xb56>
 800cb8a:	ee18 1a10 	vmov	r1, s16
 800cb8e:	2300      	movs	r3, #0
 800cb90:	220a      	movs	r2, #10
 800cb92:	4620      	mov	r0, r4
 800cb94:	f000 f8b4 	bl	800cd00 <__multadd>
 800cb98:	ee08 0a10 	vmov	s16, r0
 800cb9c:	e7e7      	b.n	800cb6e <_dtoa_r+0xb26>
 800cb9e:	9b02      	ldr	r3, [sp, #8]
 800cba0:	2b00      	cmp	r3, #0
 800cba2:	bfc8      	it	gt
 800cba4:	461d      	movgt	r5, r3
 800cba6:	9b01      	ldr	r3, [sp, #4]
 800cba8:	bfd8      	it	le
 800cbaa:	2501      	movle	r5, #1
 800cbac:	441d      	add	r5, r3
 800cbae:	f04f 0800 	mov.w	r8, #0
 800cbb2:	ee18 1a10 	vmov	r1, s16
 800cbb6:	2201      	movs	r2, #1
 800cbb8:	4620      	mov	r0, r4
 800cbba:	f000 fa51 	bl	800d060 <__lshift>
 800cbbe:	4631      	mov	r1, r6
 800cbc0:	ee08 0a10 	vmov	s16, r0
 800cbc4:	f000 fabc 	bl	800d140 <__mcmp>
 800cbc8:	2800      	cmp	r0, #0
 800cbca:	dc91      	bgt.n	800caf0 <_dtoa_r+0xaa8>
 800cbcc:	d102      	bne.n	800cbd4 <_dtoa_r+0xb8c>
 800cbce:	f01a 0f01 	tst.w	sl, #1
 800cbd2:	d18d      	bne.n	800caf0 <_dtoa_r+0xaa8>
 800cbd4:	462b      	mov	r3, r5
 800cbd6:	461d      	mov	r5, r3
 800cbd8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800cbdc:	2a30      	cmp	r2, #48	; 0x30
 800cbde:	d0fa      	beq.n	800cbd6 <_dtoa_r+0xb8e>
 800cbe0:	e6d7      	b.n	800c992 <_dtoa_r+0x94a>
 800cbe2:	9a01      	ldr	r2, [sp, #4]
 800cbe4:	429a      	cmp	r2, r3
 800cbe6:	d184      	bne.n	800caf2 <_dtoa_r+0xaaa>
 800cbe8:	9b00      	ldr	r3, [sp, #0]
 800cbea:	3301      	adds	r3, #1
 800cbec:	9300      	str	r3, [sp, #0]
 800cbee:	2331      	movs	r3, #49	; 0x31
 800cbf0:	7013      	strb	r3, [r2, #0]
 800cbf2:	e6ce      	b.n	800c992 <_dtoa_r+0x94a>
 800cbf4:	4b09      	ldr	r3, [pc, #36]	; (800cc1c <_dtoa_r+0xbd4>)
 800cbf6:	f7ff ba95 	b.w	800c124 <_dtoa_r+0xdc>
 800cbfa:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800cbfc:	2b00      	cmp	r3, #0
 800cbfe:	f47f aa6e 	bne.w	800c0de <_dtoa_r+0x96>
 800cc02:	4b07      	ldr	r3, [pc, #28]	; (800cc20 <_dtoa_r+0xbd8>)
 800cc04:	f7ff ba8e 	b.w	800c124 <_dtoa_r+0xdc>
 800cc08:	9b02      	ldr	r3, [sp, #8]
 800cc0a:	2b00      	cmp	r3, #0
 800cc0c:	dcae      	bgt.n	800cb6c <_dtoa_r+0xb24>
 800cc0e:	9b06      	ldr	r3, [sp, #24]
 800cc10:	2b02      	cmp	r3, #2
 800cc12:	f73f aea8 	bgt.w	800c966 <_dtoa_r+0x91e>
 800cc16:	e7a9      	b.n	800cb6c <_dtoa_r+0xb24>
 800cc18:	08013ce7 	.word	0x08013ce7
 800cc1c:	08013c44 	.word	0x08013c44
 800cc20:	08013c68 	.word	0x08013c68

0800cc24 <_localeconv_r>:
 800cc24:	4800      	ldr	r0, [pc, #0]	; (800cc28 <_localeconv_r+0x4>)
 800cc26:	4770      	bx	lr
 800cc28:	20000168 	.word	0x20000168

0800cc2c <malloc>:
 800cc2c:	4b02      	ldr	r3, [pc, #8]	; (800cc38 <malloc+0xc>)
 800cc2e:	4601      	mov	r1, r0
 800cc30:	6818      	ldr	r0, [r3, #0]
 800cc32:	f000 bc09 	b.w	800d448 <_malloc_r>
 800cc36:	bf00      	nop
 800cc38:	20000014 	.word	0x20000014

0800cc3c <_Balloc>:
 800cc3c:	b570      	push	{r4, r5, r6, lr}
 800cc3e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800cc40:	4604      	mov	r4, r0
 800cc42:	460d      	mov	r5, r1
 800cc44:	b976      	cbnz	r6, 800cc64 <_Balloc+0x28>
 800cc46:	2010      	movs	r0, #16
 800cc48:	f7ff fff0 	bl	800cc2c <malloc>
 800cc4c:	4602      	mov	r2, r0
 800cc4e:	6260      	str	r0, [r4, #36]	; 0x24
 800cc50:	b920      	cbnz	r0, 800cc5c <_Balloc+0x20>
 800cc52:	4b18      	ldr	r3, [pc, #96]	; (800ccb4 <_Balloc+0x78>)
 800cc54:	4818      	ldr	r0, [pc, #96]	; (800ccb8 <_Balloc+0x7c>)
 800cc56:	2166      	movs	r1, #102	; 0x66
 800cc58:	f000 fdd6 	bl	800d808 <__assert_func>
 800cc5c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800cc60:	6006      	str	r6, [r0, #0]
 800cc62:	60c6      	str	r6, [r0, #12]
 800cc64:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800cc66:	68f3      	ldr	r3, [r6, #12]
 800cc68:	b183      	cbz	r3, 800cc8c <_Balloc+0x50>
 800cc6a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800cc6c:	68db      	ldr	r3, [r3, #12]
 800cc6e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800cc72:	b9b8      	cbnz	r0, 800cca4 <_Balloc+0x68>
 800cc74:	2101      	movs	r1, #1
 800cc76:	fa01 f605 	lsl.w	r6, r1, r5
 800cc7a:	1d72      	adds	r2, r6, #5
 800cc7c:	0092      	lsls	r2, r2, #2
 800cc7e:	4620      	mov	r0, r4
 800cc80:	f000 fb60 	bl	800d344 <_calloc_r>
 800cc84:	b160      	cbz	r0, 800cca0 <_Balloc+0x64>
 800cc86:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800cc8a:	e00e      	b.n	800ccaa <_Balloc+0x6e>
 800cc8c:	2221      	movs	r2, #33	; 0x21
 800cc8e:	2104      	movs	r1, #4
 800cc90:	4620      	mov	r0, r4
 800cc92:	f000 fb57 	bl	800d344 <_calloc_r>
 800cc96:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800cc98:	60f0      	str	r0, [r6, #12]
 800cc9a:	68db      	ldr	r3, [r3, #12]
 800cc9c:	2b00      	cmp	r3, #0
 800cc9e:	d1e4      	bne.n	800cc6a <_Balloc+0x2e>
 800cca0:	2000      	movs	r0, #0
 800cca2:	bd70      	pop	{r4, r5, r6, pc}
 800cca4:	6802      	ldr	r2, [r0, #0]
 800cca6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800ccaa:	2300      	movs	r3, #0
 800ccac:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800ccb0:	e7f7      	b.n	800cca2 <_Balloc+0x66>
 800ccb2:	bf00      	nop
 800ccb4:	08013c75 	.word	0x08013c75
 800ccb8:	08013cf8 	.word	0x08013cf8

0800ccbc <_Bfree>:
 800ccbc:	b570      	push	{r4, r5, r6, lr}
 800ccbe:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800ccc0:	4605      	mov	r5, r0
 800ccc2:	460c      	mov	r4, r1
 800ccc4:	b976      	cbnz	r6, 800cce4 <_Bfree+0x28>
 800ccc6:	2010      	movs	r0, #16
 800ccc8:	f7ff ffb0 	bl	800cc2c <malloc>
 800cccc:	4602      	mov	r2, r0
 800ccce:	6268      	str	r0, [r5, #36]	; 0x24
 800ccd0:	b920      	cbnz	r0, 800ccdc <_Bfree+0x20>
 800ccd2:	4b09      	ldr	r3, [pc, #36]	; (800ccf8 <_Bfree+0x3c>)
 800ccd4:	4809      	ldr	r0, [pc, #36]	; (800ccfc <_Bfree+0x40>)
 800ccd6:	218a      	movs	r1, #138	; 0x8a
 800ccd8:	f000 fd96 	bl	800d808 <__assert_func>
 800ccdc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800cce0:	6006      	str	r6, [r0, #0]
 800cce2:	60c6      	str	r6, [r0, #12]
 800cce4:	b13c      	cbz	r4, 800ccf6 <_Bfree+0x3a>
 800cce6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800cce8:	6862      	ldr	r2, [r4, #4]
 800ccea:	68db      	ldr	r3, [r3, #12]
 800ccec:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800ccf0:	6021      	str	r1, [r4, #0]
 800ccf2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800ccf6:	bd70      	pop	{r4, r5, r6, pc}
 800ccf8:	08013c75 	.word	0x08013c75
 800ccfc:	08013cf8 	.word	0x08013cf8

0800cd00 <__multadd>:
 800cd00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cd04:	690d      	ldr	r5, [r1, #16]
 800cd06:	4607      	mov	r7, r0
 800cd08:	460c      	mov	r4, r1
 800cd0a:	461e      	mov	r6, r3
 800cd0c:	f101 0c14 	add.w	ip, r1, #20
 800cd10:	2000      	movs	r0, #0
 800cd12:	f8dc 3000 	ldr.w	r3, [ip]
 800cd16:	b299      	uxth	r1, r3
 800cd18:	fb02 6101 	mla	r1, r2, r1, r6
 800cd1c:	0c1e      	lsrs	r6, r3, #16
 800cd1e:	0c0b      	lsrs	r3, r1, #16
 800cd20:	fb02 3306 	mla	r3, r2, r6, r3
 800cd24:	b289      	uxth	r1, r1
 800cd26:	3001      	adds	r0, #1
 800cd28:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800cd2c:	4285      	cmp	r5, r0
 800cd2e:	f84c 1b04 	str.w	r1, [ip], #4
 800cd32:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800cd36:	dcec      	bgt.n	800cd12 <__multadd+0x12>
 800cd38:	b30e      	cbz	r6, 800cd7e <__multadd+0x7e>
 800cd3a:	68a3      	ldr	r3, [r4, #8]
 800cd3c:	42ab      	cmp	r3, r5
 800cd3e:	dc19      	bgt.n	800cd74 <__multadd+0x74>
 800cd40:	6861      	ldr	r1, [r4, #4]
 800cd42:	4638      	mov	r0, r7
 800cd44:	3101      	adds	r1, #1
 800cd46:	f7ff ff79 	bl	800cc3c <_Balloc>
 800cd4a:	4680      	mov	r8, r0
 800cd4c:	b928      	cbnz	r0, 800cd5a <__multadd+0x5a>
 800cd4e:	4602      	mov	r2, r0
 800cd50:	4b0c      	ldr	r3, [pc, #48]	; (800cd84 <__multadd+0x84>)
 800cd52:	480d      	ldr	r0, [pc, #52]	; (800cd88 <__multadd+0x88>)
 800cd54:	21b5      	movs	r1, #181	; 0xb5
 800cd56:	f000 fd57 	bl	800d808 <__assert_func>
 800cd5a:	6922      	ldr	r2, [r4, #16]
 800cd5c:	3202      	adds	r2, #2
 800cd5e:	f104 010c 	add.w	r1, r4, #12
 800cd62:	0092      	lsls	r2, r2, #2
 800cd64:	300c      	adds	r0, #12
 800cd66:	f7fe fc41 	bl	800b5ec <memcpy>
 800cd6a:	4621      	mov	r1, r4
 800cd6c:	4638      	mov	r0, r7
 800cd6e:	f7ff ffa5 	bl	800ccbc <_Bfree>
 800cd72:	4644      	mov	r4, r8
 800cd74:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800cd78:	3501      	adds	r5, #1
 800cd7a:	615e      	str	r6, [r3, #20]
 800cd7c:	6125      	str	r5, [r4, #16]
 800cd7e:	4620      	mov	r0, r4
 800cd80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cd84:	08013ce7 	.word	0x08013ce7
 800cd88:	08013cf8 	.word	0x08013cf8

0800cd8c <__hi0bits>:
 800cd8c:	0c03      	lsrs	r3, r0, #16
 800cd8e:	041b      	lsls	r3, r3, #16
 800cd90:	b9d3      	cbnz	r3, 800cdc8 <__hi0bits+0x3c>
 800cd92:	0400      	lsls	r0, r0, #16
 800cd94:	2310      	movs	r3, #16
 800cd96:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800cd9a:	bf04      	itt	eq
 800cd9c:	0200      	lsleq	r0, r0, #8
 800cd9e:	3308      	addeq	r3, #8
 800cda0:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800cda4:	bf04      	itt	eq
 800cda6:	0100      	lsleq	r0, r0, #4
 800cda8:	3304      	addeq	r3, #4
 800cdaa:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800cdae:	bf04      	itt	eq
 800cdb0:	0080      	lsleq	r0, r0, #2
 800cdb2:	3302      	addeq	r3, #2
 800cdb4:	2800      	cmp	r0, #0
 800cdb6:	db05      	blt.n	800cdc4 <__hi0bits+0x38>
 800cdb8:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800cdbc:	f103 0301 	add.w	r3, r3, #1
 800cdc0:	bf08      	it	eq
 800cdc2:	2320      	moveq	r3, #32
 800cdc4:	4618      	mov	r0, r3
 800cdc6:	4770      	bx	lr
 800cdc8:	2300      	movs	r3, #0
 800cdca:	e7e4      	b.n	800cd96 <__hi0bits+0xa>

0800cdcc <__lo0bits>:
 800cdcc:	6803      	ldr	r3, [r0, #0]
 800cdce:	f013 0207 	ands.w	r2, r3, #7
 800cdd2:	4601      	mov	r1, r0
 800cdd4:	d00b      	beq.n	800cdee <__lo0bits+0x22>
 800cdd6:	07da      	lsls	r2, r3, #31
 800cdd8:	d423      	bmi.n	800ce22 <__lo0bits+0x56>
 800cdda:	0798      	lsls	r0, r3, #30
 800cddc:	bf49      	itett	mi
 800cdde:	085b      	lsrmi	r3, r3, #1
 800cde0:	089b      	lsrpl	r3, r3, #2
 800cde2:	2001      	movmi	r0, #1
 800cde4:	600b      	strmi	r3, [r1, #0]
 800cde6:	bf5c      	itt	pl
 800cde8:	600b      	strpl	r3, [r1, #0]
 800cdea:	2002      	movpl	r0, #2
 800cdec:	4770      	bx	lr
 800cdee:	b298      	uxth	r0, r3
 800cdf0:	b9a8      	cbnz	r0, 800ce1e <__lo0bits+0x52>
 800cdf2:	0c1b      	lsrs	r3, r3, #16
 800cdf4:	2010      	movs	r0, #16
 800cdf6:	b2da      	uxtb	r2, r3
 800cdf8:	b90a      	cbnz	r2, 800cdfe <__lo0bits+0x32>
 800cdfa:	3008      	adds	r0, #8
 800cdfc:	0a1b      	lsrs	r3, r3, #8
 800cdfe:	071a      	lsls	r2, r3, #28
 800ce00:	bf04      	itt	eq
 800ce02:	091b      	lsreq	r3, r3, #4
 800ce04:	3004      	addeq	r0, #4
 800ce06:	079a      	lsls	r2, r3, #30
 800ce08:	bf04      	itt	eq
 800ce0a:	089b      	lsreq	r3, r3, #2
 800ce0c:	3002      	addeq	r0, #2
 800ce0e:	07da      	lsls	r2, r3, #31
 800ce10:	d403      	bmi.n	800ce1a <__lo0bits+0x4e>
 800ce12:	085b      	lsrs	r3, r3, #1
 800ce14:	f100 0001 	add.w	r0, r0, #1
 800ce18:	d005      	beq.n	800ce26 <__lo0bits+0x5a>
 800ce1a:	600b      	str	r3, [r1, #0]
 800ce1c:	4770      	bx	lr
 800ce1e:	4610      	mov	r0, r2
 800ce20:	e7e9      	b.n	800cdf6 <__lo0bits+0x2a>
 800ce22:	2000      	movs	r0, #0
 800ce24:	4770      	bx	lr
 800ce26:	2020      	movs	r0, #32
 800ce28:	4770      	bx	lr
	...

0800ce2c <__i2b>:
 800ce2c:	b510      	push	{r4, lr}
 800ce2e:	460c      	mov	r4, r1
 800ce30:	2101      	movs	r1, #1
 800ce32:	f7ff ff03 	bl	800cc3c <_Balloc>
 800ce36:	4602      	mov	r2, r0
 800ce38:	b928      	cbnz	r0, 800ce46 <__i2b+0x1a>
 800ce3a:	4b05      	ldr	r3, [pc, #20]	; (800ce50 <__i2b+0x24>)
 800ce3c:	4805      	ldr	r0, [pc, #20]	; (800ce54 <__i2b+0x28>)
 800ce3e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800ce42:	f000 fce1 	bl	800d808 <__assert_func>
 800ce46:	2301      	movs	r3, #1
 800ce48:	6144      	str	r4, [r0, #20]
 800ce4a:	6103      	str	r3, [r0, #16]
 800ce4c:	bd10      	pop	{r4, pc}
 800ce4e:	bf00      	nop
 800ce50:	08013ce7 	.word	0x08013ce7
 800ce54:	08013cf8 	.word	0x08013cf8

0800ce58 <__multiply>:
 800ce58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ce5c:	4691      	mov	r9, r2
 800ce5e:	690a      	ldr	r2, [r1, #16]
 800ce60:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800ce64:	429a      	cmp	r2, r3
 800ce66:	bfb8      	it	lt
 800ce68:	460b      	movlt	r3, r1
 800ce6a:	460c      	mov	r4, r1
 800ce6c:	bfbc      	itt	lt
 800ce6e:	464c      	movlt	r4, r9
 800ce70:	4699      	movlt	r9, r3
 800ce72:	6927      	ldr	r7, [r4, #16]
 800ce74:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800ce78:	68a3      	ldr	r3, [r4, #8]
 800ce7a:	6861      	ldr	r1, [r4, #4]
 800ce7c:	eb07 060a 	add.w	r6, r7, sl
 800ce80:	42b3      	cmp	r3, r6
 800ce82:	b085      	sub	sp, #20
 800ce84:	bfb8      	it	lt
 800ce86:	3101      	addlt	r1, #1
 800ce88:	f7ff fed8 	bl	800cc3c <_Balloc>
 800ce8c:	b930      	cbnz	r0, 800ce9c <__multiply+0x44>
 800ce8e:	4602      	mov	r2, r0
 800ce90:	4b44      	ldr	r3, [pc, #272]	; (800cfa4 <__multiply+0x14c>)
 800ce92:	4845      	ldr	r0, [pc, #276]	; (800cfa8 <__multiply+0x150>)
 800ce94:	f240 115d 	movw	r1, #349	; 0x15d
 800ce98:	f000 fcb6 	bl	800d808 <__assert_func>
 800ce9c:	f100 0514 	add.w	r5, r0, #20
 800cea0:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800cea4:	462b      	mov	r3, r5
 800cea6:	2200      	movs	r2, #0
 800cea8:	4543      	cmp	r3, r8
 800ceaa:	d321      	bcc.n	800cef0 <__multiply+0x98>
 800ceac:	f104 0314 	add.w	r3, r4, #20
 800ceb0:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800ceb4:	f109 0314 	add.w	r3, r9, #20
 800ceb8:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800cebc:	9202      	str	r2, [sp, #8]
 800cebe:	1b3a      	subs	r2, r7, r4
 800cec0:	3a15      	subs	r2, #21
 800cec2:	f022 0203 	bic.w	r2, r2, #3
 800cec6:	3204      	adds	r2, #4
 800cec8:	f104 0115 	add.w	r1, r4, #21
 800cecc:	428f      	cmp	r7, r1
 800cece:	bf38      	it	cc
 800ced0:	2204      	movcc	r2, #4
 800ced2:	9201      	str	r2, [sp, #4]
 800ced4:	9a02      	ldr	r2, [sp, #8]
 800ced6:	9303      	str	r3, [sp, #12]
 800ced8:	429a      	cmp	r2, r3
 800ceda:	d80c      	bhi.n	800cef6 <__multiply+0x9e>
 800cedc:	2e00      	cmp	r6, #0
 800cede:	dd03      	ble.n	800cee8 <__multiply+0x90>
 800cee0:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800cee4:	2b00      	cmp	r3, #0
 800cee6:	d05a      	beq.n	800cf9e <__multiply+0x146>
 800cee8:	6106      	str	r6, [r0, #16]
 800ceea:	b005      	add	sp, #20
 800ceec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cef0:	f843 2b04 	str.w	r2, [r3], #4
 800cef4:	e7d8      	b.n	800cea8 <__multiply+0x50>
 800cef6:	f8b3 a000 	ldrh.w	sl, [r3]
 800cefa:	f1ba 0f00 	cmp.w	sl, #0
 800cefe:	d024      	beq.n	800cf4a <__multiply+0xf2>
 800cf00:	f104 0e14 	add.w	lr, r4, #20
 800cf04:	46a9      	mov	r9, r5
 800cf06:	f04f 0c00 	mov.w	ip, #0
 800cf0a:	f85e 2b04 	ldr.w	r2, [lr], #4
 800cf0e:	f8d9 1000 	ldr.w	r1, [r9]
 800cf12:	fa1f fb82 	uxth.w	fp, r2
 800cf16:	b289      	uxth	r1, r1
 800cf18:	fb0a 110b 	mla	r1, sl, fp, r1
 800cf1c:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800cf20:	f8d9 2000 	ldr.w	r2, [r9]
 800cf24:	4461      	add	r1, ip
 800cf26:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800cf2a:	fb0a c20b 	mla	r2, sl, fp, ip
 800cf2e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800cf32:	b289      	uxth	r1, r1
 800cf34:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800cf38:	4577      	cmp	r7, lr
 800cf3a:	f849 1b04 	str.w	r1, [r9], #4
 800cf3e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800cf42:	d8e2      	bhi.n	800cf0a <__multiply+0xb2>
 800cf44:	9a01      	ldr	r2, [sp, #4]
 800cf46:	f845 c002 	str.w	ip, [r5, r2]
 800cf4a:	9a03      	ldr	r2, [sp, #12]
 800cf4c:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800cf50:	3304      	adds	r3, #4
 800cf52:	f1b9 0f00 	cmp.w	r9, #0
 800cf56:	d020      	beq.n	800cf9a <__multiply+0x142>
 800cf58:	6829      	ldr	r1, [r5, #0]
 800cf5a:	f104 0c14 	add.w	ip, r4, #20
 800cf5e:	46ae      	mov	lr, r5
 800cf60:	f04f 0a00 	mov.w	sl, #0
 800cf64:	f8bc b000 	ldrh.w	fp, [ip]
 800cf68:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800cf6c:	fb09 220b 	mla	r2, r9, fp, r2
 800cf70:	4492      	add	sl, r2
 800cf72:	b289      	uxth	r1, r1
 800cf74:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800cf78:	f84e 1b04 	str.w	r1, [lr], #4
 800cf7c:	f85c 2b04 	ldr.w	r2, [ip], #4
 800cf80:	f8be 1000 	ldrh.w	r1, [lr]
 800cf84:	0c12      	lsrs	r2, r2, #16
 800cf86:	fb09 1102 	mla	r1, r9, r2, r1
 800cf8a:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800cf8e:	4567      	cmp	r7, ip
 800cf90:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800cf94:	d8e6      	bhi.n	800cf64 <__multiply+0x10c>
 800cf96:	9a01      	ldr	r2, [sp, #4]
 800cf98:	50a9      	str	r1, [r5, r2]
 800cf9a:	3504      	adds	r5, #4
 800cf9c:	e79a      	b.n	800ced4 <__multiply+0x7c>
 800cf9e:	3e01      	subs	r6, #1
 800cfa0:	e79c      	b.n	800cedc <__multiply+0x84>
 800cfa2:	bf00      	nop
 800cfa4:	08013ce7 	.word	0x08013ce7
 800cfa8:	08013cf8 	.word	0x08013cf8

0800cfac <__pow5mult>:
 800cfac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cfb0:	4615      	mov	r5, r2
 800cfb2:	f012 0203 	ands.w	r2, r2, #3
 800cfb6:	4606      	mov	r6, r0
 800cfb8:	460f      	mov	r7, r1
 800cfba:	d007      	beq.n	800cfcc <__pow5mult+0x20>
 800cfbc:	4c25      	ldr	r4, [pc, #148]	; (800d054 <__pow5mult+0xa8>)
 800cfbe:	3a01      	subs	r2, #1
 800cfc0:	2300      	movs	r3, #0
 800cfc2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800cfc6:	f7ff fe9b 	bl	800cd00 <__multadd>
 800cfca:	4607      	mov	r7, r0
 800cfcc:	10ad      	asrs	r5, r5, #2
 800cfce:	d03d      	beq.n	800d04c <__pow5mult+0xa0>
 800cfd0:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800cfd2:	b97c      	cbnz	r4, 800cff4 <__pow5mult+0x48>
 800cfd4:	2010      	movs	r0, #16
 800cfd6:	f7ff fe29 	bl	800cc2c <malloc>
 800cfda:	4602      	mov	r2, r0
 800cfdc:	6270      	str	r0, [r6, #36]	; 0x24
 800cfde:	b928      	cbnz	r0, 800cfec <__pow5mult+0x40>
 800cfe0:	4b1d      	ldr	r3, [pc, #116]	; (800d058 <__pow5mult+0xac>)
 800cfe2:	481e      	ldr	r0, [pc, #120]	; (800d05c <__pow5mult+0xb0>)
 800cfe4:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800cfe8:	f000 fc0e 	bl	800d808 <__assert_func>
 800cfec:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800cff0:	6004      	str	r4, [r0, #0]
 800cff2:	60c4      	str	r4, [r0, #12]
 800cff4:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800cff8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800cffc:	b94c      	cbnz	r4, 800d012 <__pow5mult+0x66>
 800cffe:	f240 2171 	movw	r1, #625	; 0x271
 800d002:	4630      	mov	r0, r6
 800d004:	f7ff ff12 	bl	800ce2c <__i2b>
 800d008:	2300      	movs	r3, #0
 800d00a:	f8c8 0008 	str.w	r0, [r8, #8]
 800d00e:	4604      	mov	r4, r0
 800d010:	6003      	str	r3, [r0, #0]
 800d012:	f04f 0900 	mov.w	r9, #0
 800d016:	07eb      	lsls	r3, r5, #31
 800d018:	d50a      	bpl.n	800d030 <__pow5mult+0x84>
 800d01a:	4639      	mov	r1, r7
 800d01c:	4622      	mov	r2, r4
 800d01e:	4630      	mov	r0, r6
 800d020:	f7ff ff1a 	bl	800ce58 <__multiply>
 800d024:	4639      	mov	r1, r7
 800d026:	4680      	mov	r8, r0
 800d028:	4630      	mov	r0, r6
 800d02a:	f7ff fe47 	bl	800ccbc <_Bfree>
 800d02e:	4647      	mov	r7, r8
 800d030:	106d      	asrs	r5, r5, #1
 800d032:	d00b      	beq.n	800d04c <__pow5mult+0xa0>
 800d034:	6820      	ldr	r0, [r4, #0]
 800d036:	b938      	cbnz	r0, 800d048 <__pow5mult+0x9c>
 800d038:	4622      	mov	r2, r4
 800d03a:	4621      	mov	r1, r4
 800d03c:	4630      	mov	r0, r6
 800d03e:	f7ff ff0b 	bl	800ce58 <__multiply>
 800d042:	6020      	str	r0, [r4, #0]
 800d044:	f8c0 9000 	str.w	r9, [r0]
 800d048:	4604      	mov	r4, r0
 800d04a:	e7e4      	b.n	800d016 <__pow5mult+0x6a>
 800d04c:	4638      	mov	r0, r7
 800d04e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d052:	bf00      	nop
 800d054:	08013e48 	.word	0x08013e48
 800d058:	08013c75 	.word	0x08013c75
 800d05c:	08013cf8 	.word	0x08013cf8

0800d060 <__lshift>:
 800d060:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d064:	460c      	mov	r4, r1
 800d066:	6849      	ldr	r1, [r1, #4]
 800d068:	6923      	ldr	r3, [r4, #16]
 800d06a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800d06e:	68a3      	ldr	r3, [r4, #8]
 800d070:	4607      	mov	r7, r0
 800d072:	4691      	mov	r9, r2
 800d074:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800d078:	f108 0601 	add.w	r6, r8, #1
 800d07c:	42b3      	cmp	r3, r6
 800d07e:	db0b      	blt.n	800d098 <__lshift+0x38>
 800d080:	4638      	mov	r0, r7
 800d082:	f7ff fddb 	bl	800cc3c <_Balloc>
 800d086:	4605      	mov	r5, r0
 800d088:	b948      	cbnz	r0, 800d09e <__lshift+0x3e>
 800d08a:	4602      	mov	r2, r0
 800d08c:	4b2a      	ldr	r3, [pc, #168]	; (800d138 <__lshift+0xd8>)
 800d08e:	482b      	ldr	r0, [pc, #172]	; (800d13c <__lshift+0xdc>)
 800d090:	f240 11d9 	movw	r1, #473	; 0x1d9
 800d094:	f000 fbb8 	bl	800d808 <__assert_func>
 800d098:	3101      	adds	r1, #1
 800d09a:	005b      	lsls	r3, r3, #1
 800d09c:	e7ee      	b.n	800d07c <__lshift+0x1c>
 800d09e:	2300      	movs	r3, #0
 800d0a0:	f100 0114 	add.w	r1, r0, #20
 800d0a4:	f100 0210 	add.w	r2, r0, #16
 800d0a8:	4618      	mov	r0, r3
 800d0aa:	4553      	cmp	r3, sl
 800d0ac:	db37      	blt.n	800d11e <__lshift+0xbe>
 800d0ae:	6920      	ldr	r0, [r4, #16]
 800d0b0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800d0b4:	f104 0314 	add.w	r3, r4, #20
 800d0b8:	f019 091f 	ands.w	r9, r9, #31
 800d0bc:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800d0c0:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800d0c4:	d02f      	beq.n	800d126 <__lshift+0xc6>
 800d0c6:	f1c9 0e20 	rsb	lr, r9, #32
 800d0ca:	468a      	mov	sl, r1
 800d0cc:	f04f 0c00 	mov.w	ip, #0
 800d0d0:	681a      	ldr	r2, [r3, #0]
 800d0d2:	fa02 f209 	lsl.w	r2, r2, r9
 800d0d6:	ea42 020c 	orr.w	r2, r2, ip
 800d0da:	f84a 2b04 	str.w	r2, [sl], #4
 800d0de:	f853 2b04 	ldr.w	r2, [r3], #4
 800d0e2:	4298      	cmp	r0, r3
 800d0e4:	fa22 fc0e 	lsr.w	ip, r2, lr
 800d0e8:	d8f2      	bhi.n	800d0d0 <__lshift+0x70>
 800d0ea:	1b03      	subs	r3, r0, r4
 800d0ec:	3b15      	subs	r3, #21
 800d0ee:	f023 0303 	bic.w	r3, r3, #3
 800d0f2:	3304      	adds	r3, #4
 800d0f4:	f104 0215 	add.w	r2, r4, #21
 800d0f8:	4290      	cmp	r0, r2
 800d0fa:	bf38      	it	cc
 800d0fc:	2304      	movcc	r3, #4
 800d0fe:	f841 c003 	str.w	ip, [r1, r3]
 800d102:	f1bc 0f00 	cmp.w	ip, #0
 800d106:	d001      	beq.n	800d10c <__lshift+0xac>
 800d108:	f108 0602 	add.w	r6, r8, #2
 800d10c:	3e01      	subs	r6, #1
 800d10e:	4638      	mov	r0, r7
 800d110:	612e      	str	r6, [r5, #16]
 800d112:	4621      	mov	r1, r4
 800d114:	f7ff fdd2 	bl	800ccbc <_Bfree>
 800d118:	4628      	mov	r0, r5
 800d11a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d11e:	f842 0f04 	str.w	r0, [r2, #4]!
 800d122:	3301      	adds	r3, #1
 800d124:	e7c1      	b.n	800d0aa <__lshift+0x4a>
 800d126:	3904      	subs	r1, #4
 800d128:	f853 2b04 	ldr.w	r2, [r3], #4
 800d12c:	f841 2f04 	str.w	r2, [r1, #4]!
 800d130:	4298      	cmp	r0, r3
 800d132:	d8f9      	bhi.n	800d128 <__lshift+0xc8>
 800d134:	e7ea      	b.n	800d10c <__lshift+0xac>
 800d136:	bf00      	nop
 800d138:	08013ce7 	.word	0x08013ce7
 800d13c:	08013cf8 	.word	0x08013cf8

0800d140 <__mcmp>:
 800d140:	b530      	push	{r4, r5, lr}
 800d142:	6902      	ldr	r2, [r0, #16]
 800d144:	690c      	ldr	r4, [r1, #16]
 800d146:	1b12      	subs	r2, r2, r4
 800d148:	d10e      	bne.n	800d168 <__mcmp+0x28>
 800d14a:	f100 0314 	add.w	r3, r0, #20
 800d14e:	3114      	adds	r1, #20
 800d150:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800d154:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800d158:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800d15c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800d160:	42a5      	cmp	r5, r4
 800d162:	d003      	beq.n	800d16c <__mcmp+0x2c>
 800d164:	d305      	bcc.n	800d172 <__mcmp+0x32>
 800d166:	2201      	movs	r2, #1
 800d168:	4610      	mov	r0, r2
 800d16a:	bd30      	pop	{r4, r5, pc}
 800d16c:	4283      	cmp	r3, r0
 800d16e:	d3f3      	bcc.n	800d158 <__mcmp+0x18>
 800d170:	e7fa      	b.n	800d168 <__mcmp+0x28>
 800d172:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800d176:	e7f7      	b.n	800d168 <__mcmp+0x28>

0800d178 <__mdiff>:
 800d178:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d17c:	460c      	mov	r4, r1
 800d17e:	4606      	mov	r6, r0
 800d180:	4611      	mov	r1, r2
 800d182:	4620      	mov	r0, r4
 800d184:	4690      	mov	r8, r2
 800d186:	f7ff ffdb 	bl	800d140 <__mcmp>
 800d18a:	1e05      	subs	r5, r0, #0
 800d18c:	d110      	bne.n	800d1b0 <__mdiff+0x38>
 800d18e:	4629      	mov	r1, r5
 800d190:	4630      	mov	r0, r6
 800d192:	f7ff fd53 	bl	800cc3c <_Balloc>
 800d196:	b930      	cbnz	r0, 800d1a6 <__mdiff+0x2e>
 800d198:	4b3a      	ldr	r3, [pc, #232]	; (800d284 <__mdiff+0x10c>)
 800d19a:	4602      	mov	r2, r0
 800d19c:	f240 2132 	movw	r1, #562	; 0x232
 800d1a0:	4839      	ldr	r0, [pc, #228]	; (800d288 <__mdiff+0x110>)
 800d1a2:	f000 fb31 	bl	800d808 <__assert_func>
 800d1a6:	2301      	movs	r3, #1
 800d1a8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800d1ac:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d1b0:	bfa4      	itt	ge
 800d1b2:	4643      	movge	r3, r8
 800d1b4:	46a0      	movge	r8, r4
 800d1b6:	4630      	mov	r0, r6
 800d1b8:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800d1bc:	bfa6      	itte	ge
 800d1be:	461c      	movge	r4, r3
 800d1c0:	2500      	movge	r5, #0
 800d1c2:	2501      	movlt	r5, #1
 800d1c4:	f7ff fd3a 	bl	800cc3c <_Balloc>
 800d1c8:	b920      	cbnz	r0, 800d1d4 <__mdiff+0x5c>
 800d1ca:	4b2e      	ldr	r3, [pc, #184]	; (800d284 <__mdiff+0x10c>)
 800d1cc:	4602      	mov	r2, r0
 800d1ce:	f44f 7110 	mov.w	r1, #576	; 0x240
 800d1d2:	e7e5      	b.n	800d1a0 <__mdiff+0x28>
 800d1d4:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800d1d8:	6926      	ldr	r6, [r4, #16]
 800d1da:	60c5      	str	r5, [r0, #12]
 800d1dc:	f104 0914 	add.w	r9, r4, #20
 800d1e0:	f108 0514 	add.w	r5, r8, #20
 800d1e4:	f100 0e14 	add.w	lr, r0, #20
 800d1e8:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800d1ec:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800d1f0:	f108 0210 	add.w	r2, r8, #16
 800d1f4:	46f2      	mov	sl, lr
 800d1f6:	2100      	movs	r1, #0
 800d1f8:	f859 3b04 	ldr.w	r3, [r9], #4
 800d1fc:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800d200:	fa1f f883 	uxth.w	r8, r3
 800d204:	fa11 f18b 	uxtah	r1, r1, fp
 800d208:	0c1b      	lsrs	r3, r3, #16
 800d20a:	eba1 0808 	sub.w	r8, r1, r8
 800d20e:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800d212:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800d216:	fa1f f888 	uxth.w	r8, r8
 800d21a:	1419      	asrs	r1, r3, #16
 800d21c:	454e      	cmp	r6, r9
 800d21e:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800d222:	f84a 3b04 	str.w	r3, [sl], #4
 800d226:	d8e7      	bhi.n	800d1f8 <__mdiff+0x80>
 800d228:	1b33      	subs	r3, r6, r4
 800d22a:	3b15      	subs	r3, #21
 800d22c:	f023 0303 	bic.w	r3, r3, #3
 800d230:	3304      	adds	r3, #4
 800d232:	3415      	adds	r4, #21
 800d234:	42a6      	cmp	r6, r4
 800d236:	bf38      	it	cc
 800d238:	2304      	movcc	r3, #4
 800d23a:	441d      	add	r5, r3
 800d23c:	4473      	add	r3, lr
 800d23e:	469e      	mov	lr, r3
 800d240:	462e      	mov	r6, r5
 800d242:	4566      	cmp	r6, ip
 800d244:	d30e      	bcc.n	800d264 <__mdiff+0xec>
 800d246:	f10c 0203 	add.w	r2, ip, #3
 800d24a:	1b52      	subs	r2, r2, r5
 800d24c:	f022 0203 	bic.w	r2, r2, #3
 800d250:	3d03      	subs	r5, #3
 800d252:	45ac      	cmp	ip, r5
 800d254:	bf38      	it	cc
 800d256:	2200      	movcc	r2, #0
 800d258:	441a      	add	r2, r3
 800d25a:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800d25e:	b17b      	cbz	r3, 800d280 <__mdiff+0x108>
 800d260:	6107      	str	r7, [r0, #16]
 800d262:	e7a3      	b.n	800d1ac <__mdiff+0x34>
 800d264:	f856 8b04 	ldr.w	r8, [r6], #4
 800d268:	fa11 f288 	uxtah	r2, r1, r8
 800d26c:	1414      	asrs	r4, r2, #16
 800d26e:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800d272:	b292      	uxth	r2, r2
 800d274:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800d278:	f84e 2b04 	str.w	r2, [lr], #4
 800d27c:	1421      	asrs	r1, r4, #16
 800d27e:	e7e0      	b.n	800d242 <__mdiff+0xca>
 800d280:	3f01      	subs	r7, #1
 800d282:	e7ea      	b.n	800d25a <__mdiff+0xe2>
 800d284:	08013ce7 	.word	0x08013ce7
 800d288:	08013cf8 	.word	0x08013cf8

0800d28c <__d2b>:
 800d28c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800d290:	4689      	mov	r9, r1
 800d292:	2101      	movs	r1, #1
 800d294:	ec57 6b10 	vmov	r6, r7, d0
 800d298:	4690      	mov	r8, r2
 800d29a:	f7ff fccf 	bl	800cc3c <_Balloc>
 800d29e:	4604      	mov	r4, r0
 800d2a0:	b930      	cbnz	r0, 800d2b0 <__d2b+0x24>
 800d2a2:	4602      	mov	r2, r0
 800d2a4:	4b25      	ldr	r3, [pc, #148]	; (800d33c <__d2b+0xb0>)
 800d2a6:	4826      	ldr	r0, [pc, #152]	; (800d340 <__d2b+0xb4>)
 800d2a8:	f240 310a 	movw	r1, #778	; 0x30a
 800d2ac:	f000 faac 	bl	800d808 <__assert_func>
 800d2b0:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800d2b4:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800d2b8:	bb35      	cbnz	r5, 800d308 <__d2b+0x7c>
 800d2ba:	2e00      	cmp	r6, #0
 800d2bc:	9301      	str	r3, [sp, #4]
 800d2be:	d028      	beq.n	800d312 <__d2b+0x86>
 800d2c0:	4668      	mov	r0, sp
 800d2c2:	9600      	str	r6, [sp, #0]
 800d2c4:	f7ff fd82 	bl	800cdcc <__lo0bits>
 800d2c8:	9900      	ldr	r1, [sp, #0]
 800d2ca:	b300      	cbz	r0, 800d30e <__d2b+0x82>
 800d2cc:	9a01      	ldr	r2, [sp, #4]
 800d2ce:	f1c0 0320 	rsb	r3, r0, #32
 800d2d2:	fa02 f303 	lsl.w	r3, r2, r3
 800d2d6:	430b      	orrs	r3, r1
 800d2d8:	40c2      	lsrs	r2, r0
 800d2da:	6163      	str	r3, [r4, #20]
 800d2dc:	9201      	str	r2, [sp, #4]
 800d2de:	9b01      	ldr	r3, [sp, #4]
 800d2e0:	61a3      	str	r3, [r4, #24]
 800d2e2:	2b00      	cmp	r3, #0
 800d2e4:	bf14      	ite	ne
 800d2e6:	2202      	movne	r2, #2
 800d2e8:	2201      	moveq	r2, #1
 800d2ea:	6122      	str	r2, [r4, #16]
 800d2ec:	b1d5      	cbz	r5, 800d324 <__d2b+0x98>
 800d2ee:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800d2f2:	4405      	add	r5, r0
 800d2f4:	f8c9 5000 	str.w	r5, [r9]
 800d2f8:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800d2fc:	f8c8 0000 	str.w	r0, [r8]
 800d300:	4620      	mov	r0, r4
 800d302:	b003      	add	sp, #12
 800d304:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d308:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800d30c:	e7d5      	b.n	800d2ba <__d2b+0x2e>
 800d30e:	6161      	str	r1, [r4, #20]
 800d310:	e7e5      	b.n	800d2de <__d2b+0x52>
 800d312:	a801      	add	r0, sp, #4
 800d314:	f7ff fd5a 	bl	800cdcc <__lo0bits>
 800d318:	9b01      	ldr	r3, [sp, #4]
 800d31a:	6163      	str	r3, [r4, #20]
 800d31c:	2201      	movs	r2, #1
 800d31e:	6122      	str	r2, [r4, #16]
 800d320:	3020      	adds	r0, #32
 800d322:	e7e3      	b.n	800d2ec <__d2b+0x60>
 800d324:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800d328:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800d32c:	f8c9 0000 	str.w	r0, [r9]
 800d330:	6918      	ldr	r0, [r3, #16]
 800d332:	f7ff fd2b 	bl	800cd8c <__hi0bits>
 800d336:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800d33a:	e7df      	b.n	800d2fc <__d2b+0x70>
 800d33c:	08013ce7 	.word	0x08013ce7
 800d340:	08013cf8 	.word	0x08013cf8

0800d344 <_calloc_r>:
 800d344:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800d346:	fba1 2402 	umull	r2, r4, r1, r2
 800d34a:	b94c      	cbnz	r4, 800d360 <_calloc_r+0x1c>
 800d34c:	4611      	mov	r1, r2
 800d34e:	9201      	str	r2, [sp, #4]
 800d350:	f000 f87a 	bl	800d448 <_malloc_r>
 800d354:	9a01      	ldr	r2, [sp, #4]
 800d356:	4605      	mov	r5, r0
 800d358:	b930      	cbnz	r0, 800d368 <_calloc_r+0x24>
 800d35a:	4628      	mov	r0, r5
 800d35c:	b003      	add	sp, #12
 800d35e:	bd30      	pop	{r4, r5, pc}
 800d360:	220c      	movs	r2, #12
 800d362:	6002      	str	r2, [r0, #0]
 800d364:	2500      	movs	r5, #0
 800d366:	e7f8      	b.n	800d35a <_calloc_r+0x16>
 800d368:	4621      	mov	r1, r4
 800d36a:	f7fe f94d 	bl	800b608 <memset>
 800d36e:	e7f4      	b.n	800d35a <_calloc_r+0x16>

0800d370 <_free_r>:
 800d370:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800d372:	2900      	cmp	r1, #0
 800d374:	d044      	beq.n	800d400 <_free_r+0x90>
 800d376:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d37a:	9001      	str	r0, [sp, #4]
 800d37c:	2b00      	cmp	r3, #0
 800d37e:	f1a1 0404 	sub.w	r4, r1, #4
 800d382:	bfb8      	it	lt
 800d384:	18e4      	addlt	r4, r4, r3
 800d386:	f000 fa9b 	bl	800d8c0 <__malloc_lock>
 800d38a:	4a1e      	ldr	r2, [pc, #120]	; (800d404 <_free_r+0x94>)
 800d38c:	9801      	ldr	r0, [sp, #4]
 800d38e:	6813      	ldr	r3, [r2, #0]
 800d390:	b933      	cbnz	r3, 800d3a0 <_free_r+0x30>
 800d392:	6063      	str	r3, [r4, #4]
 800d394:	6014      	str	r4, [r2, #0]
 800d396:	b003      	add	sp, #12
 800d398:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800d39c:	f000 ba96 	b.w	800d8cc <__malloc_unlock>
 800d3a0:	42a3      	cmp	r3, r4
 800d3a2:	d908      	bls.n	800d3b6 <_free_r+0x46>
 800d3a4:	6825      	ldr	r5, [r4, #0]
 800d3a6:	1961      	adds	r1, r4, r5
 800d3a8:	428b      	cmp	r3, r1
 800d3aa:	bf01      	itttt	eq
 800d3ac:	6819      	ldreq	r1, [r3, #0]
 800d3ae:	685b      	ldreq	r3, [r3, #4]
 800d3b0:	1949      	addeq	r1, r1, r5
 800d3b2:	6021      	streq	r1, [r4, #0]
 800d3b4:	e7ed      	b.n	800d392 <_free_r+0x22>
 800d3b6:	461a      	mov	r2, r3
 800d3b8:	685b      	ldr	r3, [r3, #4]
 800d3ba:	b10b      	cbz	r3, 800d3c0 <_free_r+0x50>
 800d3bc:	42a3      	cmp	r3, r4
 800d3be:	d9fa      	bls.n	800d3b6 <_free_r+0x46>
 800d3c0:	6811      	ldr	r1, [r2, #0]
 800d3c2:	1855      	adds	r5, r2, r1
 800d3c4:	42a5      	cmp	r5, r4
 800d3c6:	d10b      	bne.n	800d3e0 <_free_r+0x70>
 800d3c8:	6824      	ldr	r4, [r4, #0]
 800d3ca:	4421      	add	r1, r4
 800d3cc:	1854      	adds	r4, r2, r1
 800d3ce:	42a3      	cmp	r3, r4
 800d3d0:	6011      	str	r1, [r2, #0]
 800d3d2:	d1e0      	bne.n	800d396 <_free_r+0x26>
 800d3d4:	681c      	ldr	r4, [r3, #0]
 800d3d6:	685b      	ldr	r3, [r3, #4]
 800d3d8:	6053      	str	r3, [r2, #4]
 800d3da:	4421      	add	r1, r4
 800d3dc:	6011      	str	r1, [r2, #0]
 800d3de:	e7da      	b.n	800d396 <_free_r+0x26>
 800d3e0:	d902      	bls.n	800d3e8 <_free_r+0x78>
 800d3e2:	230c      	movs	r3, #12
 800d3e4:	6003      	str	r3, [r0, #0]
 800d3e6:	e7d6      	b.n	800d396 <_free_r+0x26>
 800d3e8:	6825      	ldr	r5, [r4, #0]
 800d3ea:	1961      	adds	r1, r4, r5
 800d3ec:	428b      	cmp	r3, r1
 800d3ee:	bf04      	itt	eq
 800d3f0:	6819      	ldreq	r1, [r3, #0]
 800d3f2:	685b      	ldreq	r3, [r3, #4]
 800d3f4:	6063      	str	r3, [r4, #4]
 800d3f6:	bf04      	itt	eq
 800d3f8:	1949      	addeq	r1, r1, r5
 800d3fa:	6021      	streq	r1, [r4, #0]
 800d3fc:	6054      	str	r4, [r2, #4]
 800d3fe:	e7ca      	b.n	800d396 <_free_r+0x26>
 800d400:	b003      	add	sp, #12
 800d402:	bd30      	pop	{r4, r5, pc}
 800d404:	20008b70 	.word	0x20008b70

0800d408 <sbrk_aligned>:
 800d408:	b570      	push	{r4, r5, r6, lr}
 800d40a:	4e0e      	ldr	r6, [pc, #56]	; (800d444 <sbrk_aligned+0x3c>)
 800d40c:	460c      	mov	r4, r1
 800d40e:	6831      	ldr	r1, [r6, #0]
 800d410:	4605      	mov	r5, r0
 800d412:	b911      	cbnz	r1, 800d41a <sbrk_aligned+0x12>
 800d414:	f000 f9e8 	bl	800d7e8 <_sbrk_r>
 800d418:	6030      	str	r0, [r6, #0]
 800d41a:	4621      	mov	r1, r4
 800d41c:	4628      	mov	r0, r5
 800d41e:	f000 f9e3 	bl	800d7e8 <_sbrk_r>
 800d422:	1c43      	adds	r3, r0, #1
 800d424:	d00a      	beq.n	800d43c <sbrk_aligned+0x34>
 800d426:	1cc4      	adds	r4, r0, #3
 800d428:	f024 0403 	bic.w	r4, r4, #3
 800d42c:	42a0      	cmp	r0, r4
 800d42e:	d007      	beq.n	800d440 <sbrk_aligned+0x38>
 800d430:	1a21      	subs	r1, r4, r0
 800d432:	4628      	mov	r0, r5
 800d434:	f000 f9d8 	bl	800d7e8 <_sbrk_r>
 800d438:	3001      	adds	r0, #1
 800d43a:	d101      	bne.n	800d440 <sbrk_aligned+0x38>
 800d43c:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800d440:	4620      	mov	r0, r4
 800d442:	bd70      	pop	{r4, r5, r6, pc}
 800d444:	20008b74 	.word	0x20008b74

0800d448 <_malloc_r>:
 800d448:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d44c:	1ccd      	adds	r5, r1, #3
 800d44e:	f025 0503 	bic.w	r5, r5, #3
 800d452:	3508      	adds	r5, #8
 800d454:	2d0c      	cmp	r5, #12
 800d456:	bf38      	it	cc
 800d458:	250c      	movcc	r5, #12
 800d45a:	2d00      	cmp	r5, #0
 800d45c:	4607      	mov	r7, r0
 800d45e:	db01      	blt.n	800d464 <_malloc_r+0x1c>
 800d460:	42a9      	cmp	r1, r5
 800d462:	d905      	bls.n	800d470 <_malloc_r+0x28>
 800d464:	230c      	movs	r3, #12
 800d466:	603b      	str	r3, [r7, #0]
 800d468:	2600      	movs	r6, #0
 800d46a:	4630      	mov	r0, r6
 800d46c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d470:	4e2e      	ldr	r6, [pc, #184]	; (800d52c <_malloc_r+0xe4>)
 800d472:	f000 fa25 	bl	800d8c0 <__malloc_lock>
 800d476:	6833      	ldr	r3, [r6, #0]
 800d478:	461c      	mov	r4, r3
 800d47a:	bb34      	cbnz	r4, 800d4ca <_malloc_r+0x82>
 800d47c:	4629      	mov	r1, r5
 800d47e:	4638      	mov	r0, r7
 800d480:	f7ff ffc2 	bl	800d408 <sbrk_aligned>
 800d484:	1c43      	adds	r3, r0, #1
 800d486:	4604      	mov	r4, r0
 800d488:	d14d      	bne.n	800d526 <_malloc_r+0xde>
 800d48a:	6834      	ldr	r4, [r6, #0]
 800d48c:	4626      	mov	r6, r4
 800d48e:	2e00      	cmp	r6, #0
 800d490:	d140      	bne.n	800d514 <_malloc_r+0xcc>
 800d492:	6823      	ldr	r3, [r4, #0]
 800d494:	4631      	mov	r1, r6
 800d496:	4638      	mov	r0, r7
 800d498:	eb04 0803 	add.w	r8, r4, r3
 800d49c:	f000 f9a4 	bl	800d7e8 <_sbrk_r>
 800d4a0:	4580      	cmp	r8, r0
 800d4a2:	d13a      	bne.n	800d51a <_malloc_r+0xd2>
 800d4a4:	6821      	ldr	r1, [r4, #0]
 800d4a6:	3503      	adds	r5, #3
 800d4a8:	1a6d      	subs	r5, r5, r1
 800d4aa:	f025 0503 	bic.w	r5, r5, #3
 800d4ae:	3508      	adds	r5, #8
 800d4b0:	2d0c      	cmp	r5, #12
 800d4b2:	bf38      	it	cc
 800d4b4:	250c      	movcc	r5, #12
 800d4b6:	4629      	mov	r1, r5
 800d4b8:	4638      	mov	r0, r7
 800d4ba:	f7ff ffa5 	bl	800d408 <sbrk_aligned>
 800d4be:	3001      	adds	r0, #1
 800d4c0:	d02b      	beq.n	800d51a <_malloc_r+0xd2>
 800d4c2:	6823      	ldr	r3, [r4, #0]
 800d4c4:	442b      	add	r3, r5
 800d4c6:	6023      	str	r3, [r4, #0]
 800d4c8:	e00e      	b.n	800d4e8 <_malloc_r+0xa0>
 800d4ca:	6822      	ldr	r2, [r4, #0]
 800d4cc:	1b52      	subs	r2, r2, r5
 800d4ce:	d41e      	bmi.n	800d50e <_malloc_r+0xc6>
 800d4d0:	2a0b      	cmp	r2, #11
 800d4d2:	d916      	bls.n	800d502 <_malloc_r+0xba>
 800d4d4:	1961      	adds	r1, r4, r5
 800d4d6:	42a3      	cmp	r3, r4
 800d4d8:	6025      	str	r5, [r4, #0]
 800d4da:	bf18      	it	ne
 800d4dc:	6059      	strne	r1, [r3, #4]
 800d4de:	6863      	ldr	r3, [r4, #4]
 800d4e0:	bf08      	it	eq
 800d4e2:	6031      	streq	r1, [r6, #0]
 800d4e4:	5162      	str	r2, [r4, r5]
 800d4e6:	604b      	str	r3, [r1, #4]
 800d4e8:	4638      	mov	r0, r7
 800d4ea:	f104 060b 	add.w	r6, r4, #11
 800d4ee:	f000 f9ed 	bl	800d8cc <__malloc_unlock>
 800d4f2:	f026 0607 	bic.w	r6, r6, #7
 800d4f6:	1d23      	adds	r3, r4, #4
 800d4f8:	1af2      	subs	r2, r6, r3
 800d4fa:	d0b6      	beq.n	800d46a <_malloc_r+0x22>
 800d4fc:	1b9b      	subs	r3, r3, r6
 800d4fe:	50a3      	str	r3, [r4, r2]
 800d500:	e7b3      	b.n	800d46a <_malloc_r+0x22>
 800d502:	6862      	ldr	r2, [r4, #4]
 800d504:	42a3      	cmp	r3, r4
 800d506:	bf0c      	ite	eq
 800d508:	6032      	streq	r2, [r6, #0]
 800d50a:	605a      	strne	r2, [r3, #4]
 800d50c:	e7ec      	b.n	800d4e8 <_malloc_r+0xa0>
 800d50e:	4623      	mov	r3, r4
 800d510:	6864      	ldr	r4, [r4, #4]
 800d512:	e7b2      	b.n	800d47a <_malloc_r+0x32>
 800d514:	4634      	mov	r4, r6
 800d516:	6876      	ldr	r6, [r6, #4]
 800d518:	e7b9      	b.n	800d48e <_malloc_r+0x46>
 800d51a:	230c      	movs	r3, #12
 800d51c:	603b      	str	r3, [r7, #0]
 800d51e:	4638      	mov	r0, r7
 800d520:	f000 f9d4 	bl	800d8cc <__malloc_unlock>
 800d524:	e7a1      	b.n	800d46a <_malloc_r+0x22>
 800d526:	6025      	str	r5, [r4, #0]
 800d528:	e7de      	b.n	800d4e8 <_malloc_r+0xa0>
 800d52a:	bf00      	nop
 800d52c:	20008b70 	.word	0x20008b70

0800d530 <__ssputs_r>:
 800d530:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d534:	688e      	ldr	r6, [r1, #8]
 800d536:	429e      	cmp	r6, r3
 800d538:	4682      	mov	sl, r0
 800d53a:	460c      	mov	r4, r1
 800d53c:	4690      	mov	r8, r2
 800d53e:	461f      	mov	r7, r3
 800d540:	d838      	bhi.n	800d5b4 <__ssputs_r+0x84>
 800d542:	898a      	ldrh	r2, [r1, #12]
 800d544:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800d548:	d032      	beq.n	800d5b0 <__ssputs_r+0x80>
 800d54a:	6825      	ldr	r5, [r4, #0]
 800d54c:	6909      	ldr	r1, [r1, #16]
 800d54e:	eba5 0901 	sub.w	r9, r5, r1
 800d552:	6965      	ldr	r5, [r4, #20]
 800d554:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800d558:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800d55c:	3301      	adds	r3, #1
 800d55e:	444b      	add	r3, r9
 800d560:	106d      	asrs	r5, r5, #1
 800d562:	429d      	cmp	r5, r3
 800d564:	bf38      	it	cc
 800d566:	461d      	movcc	r5, r3
 800d568:	0553      	lsls	r3, r2, #21
 800d56a:	d531      	bpl.n	800d5d0 <__ssputs_r+0xa0>
 800d56c:	4629      	mov	r1, r5
 800d56e:	f7ff ff6b 	bl	800d448 <_malloc_r>
 800d572:	4606      	mov	r6, r0
 800d574:	b950      	cbnz	r0, 800d58c <__ssputs_r+0x5c>
 800d576:	230c      	movs	r3, #12
 800d578:	f8ca 3000 	str.w	r3, [sl]
 800d57c:	89a3      	ldrh	r3, [r4, #12]
 800d57e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d582:	81a3      	strh	r3, [r4, #12]
 800d584:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d588:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d58c:	6921      	ldr	r1, [r4, #16]
 800d58e:	464a      	mov	r2, r9
 800d590:	f7fe f82c 	bl	800b5ec <memcpy>
 800d594:	89a3      	ldrh	r3, [r4, #12]
 800d596:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800d59a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d59e:	81a3      	strh	r3, [r4, #12]
 800d5a0:	6126      	str	r6, [r4, #16]
 800d5a2:	6165      	str	r5, [r4, #20]
 800d5a4:	444e      	add	r6, r9
 800d5a6:	eba5 0509 	sub.w	r5, r5, r9
 800d5aa:	6026      	str	r6, [r4, #0]
 800d5ac:	60a5      	str	r5, [r4, #8]
 800d5ae:	463e      	mov	r6, r7
 800d5b0:	42be      	cmp	r6, r7
 800d5b2:	d900      	bls.n	800d5b6 <__ssputs_r+0x86>
 800d5b4:	463e      	mov	r6, r7
 800d5b6:	6820      	ldr	r0, [r4, #0]
 800d5b8:	4632      	mov	r2, r6
 800d5ba:	4641      	mov	r1, r8
 800d5bc:	f000 f966 	bl	800d88c <memmove>
 800d5c0:	68a3      	ldr	r3, [r4, #8]
 800d5c2:	1b9b      	subs	r3, r3, r6
 800d5c4:	60a3      	str	r3, [r4, #8]
 800d5c6:	6823      	ldr	r3, [r4, #0]
 800d5c8:	4433      	add	r3, r6
 800d5ca:	6023      	str	r3, [r4, #0]
 800d5cc:	2000      	movs	r0, #0
 800d5ce:	e7db      	b.n	800d588 <__ssputs_r+0x58>
 800d5d0:	462a      	mov	r2, r5
 800d5d2:	f000 f981 	bl	800d8d8 <_realloc_r>
 800d5d6:	4606      	mov	r6, r0
 800d5d8:	2800      	cmp	r0, #0
 800d5da:	d1e1      	bne.n	800d5a0 <__ssputs_r+0x70>
 800d5dc:	6921      	ldr	r1, [r4, #16]
 800d5de:	4650      	mov	r0, sl
 800d5e0:	f7ff fec6 	bl	800d370 <_free_r>
 800d5e4:	e7c7      	b.n	800d576 <__ssputs_r+0x46>
	...

0800d5e8 <_svfiprintf_r>:
 800d5e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d5ec:	4698      	mov	r8, r3
 800d5ee:	898b      	ldrh	r3, [r1, #12]
 800d5f0:	061b      	lsls	r3, r3, #24
 800d5f2:	b09d      	sub	sp, #116	; 0x74
 800d5f4:	4607      	mov	r7, r0
 800d5f6:	460d      	mov	r5, r1
 800d5f8:	4614      	mov	r4, r2
 800d5fa:	d50e      	bpl.n	800d61a <_svfiprintf_r+0x32>
 800d5fc:	690b      	ldr	r3, [r1, #16]
 800d5fe:	b963      	cbnz	r3, 800d61a <_svfiprintf_r+0x32>
 800d600:	2140      	movs	r1, #64	; 0x40
 800d602:	f7ff ff21 	bl	800d448 <_malloc_r>
 800d606:	6028      	str	r0, [r5, #0]
 800d608:	6128      	str	r0, [r5, #16]
 800d60a:	b920      	cbnz	r0, 800d616 <_svfiprintf_r+0x2e>
 800d60c:	230c      	movs	r3, #12
 800d60e:	603b      	str	r3, [r7, #0]
 800d610:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d614:	e0d1      	b.n	800d7ba <_svfiprintf_r+0x1d2>
 800d616:	2340      	movs	r3, #64	; 0x40
 800d618:	616b      	str	r3, [r5, #20]
 800d61a:	2300      	movs	r3, #0
 800d61c:	9309      	str	r3, [sp, #36]	; 0x24
 800d61e:	2320      	movs	r3, #32
 800d620:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d624:	f8cd 800c 	str.w	r8, [sp, #12]
 800d628:	2330      	movs	r3, #48	; 0x30
 800d62a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800d7d4 <_svfiprintf_r+0x1ec>
 800d62e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d632:	f04f 0901 	mov.w	r9, #1
 800d636:	4623      	mov	r3, r4
 800d638:	469a      	mov	sl, r3
 800d63a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d63e:	b10a      	cbz	r2, 800d644 <_svfiprintf_r+0x5c>
 800d640:	2a25      	cmp	r2, #37	; 0x25
 800d642:	d1f9      	bne.n	800d638 <_svfiprintf_r+0x50>
 800d644:	ebba 0b04 	subs.w	fp, sl, r4
 800d648:	d00b      	beq.n	800d662 <_svfiprintf_r+0x7a>
 800d64a:	465b      	mov	r3, fp
 800d64c:	4622      	mov	r2, r4
 800d64e:	4629      	mov	r1, r5
 800d650:	4638      	mov	r0, r7
 800d652:	f7ff ff6d 	bl	800d530 <__ssputs_r>
 800d656:	3001      	adds	r0, #1
 800d658:	f000 80aa 	beq.w	800d7b0 <_svfiprintf_r+0x1c8>
 800d65c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d65e:	445a      	add	r2, fp
 800d660:	9209      	str	r2, [sp, #36]	; 0x24
 800d662:	f89a 3000 	ldrb.w	r3, [sl]
 800d666:	2b00      	cmp	r3, #0
 800d668:	f000 80a2 	beq.w	800d7b0 <_svfiprintf_r+0x1c8>
 800d66c:	2300      	movs	r3, #0
 800d66e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800d672:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d676:	f10a 0a01 	add.w	sl, sl, #1
 800d67a:	9304      	str	r3, [sp, #16]
 800d67c:	9307      	str	r3, [sp, #28]
 800d67e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d682:	931a      	str	r3, [sp, #104]	; 0x68
 800d684:	4654      	mov	r4, sl
 800d686:	2205      	movs	r2, #5
 800d688:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d68c:	4851      	ldr	r0, [pc, #324]	; (800d7d4 <_svfiprintf_r+0x1ec>)
 800d68e:	f7f2 fda7 	bl	80001e0 <memchr>
 800d692:	9a04      	ldr	r2, [sp, #16]
 800d694:	b9d8      	cbnz	r0, 800d6ce <_svfiprintf_r+0xe6>
 800d696:	06d0      	lsls	r0, r2, #27
 800d698:	bf44      	itt	mi
 800d69a:	2320      	movmi	r3, #32
 800d69c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d6a0:	0711      	lsls	r1, r2, #28
 800d6a2:	bf44      	itt	mi
 800d6a4:	232b      	movmi	r3, #43	; 0x2b
 800d6a6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d6aa:	f89a 3000 	ldrb.w	r3, [sl]
 800d6ae:	2b2a      	cmp	r3, #42	; 0x2a
 800d6b0:	d015      	beq.n	800d6de <_svfiprintf_r+0xf6>
 800d6b2:	9a07      	ldr	r2, [sp, #28]
 800d6b4:	4654      	mov	r4, sl
 800d6b6:	2000      	movs	r0, #0
 800d6b8:	f04f 0c0a 	mov.w	ip, #10
 800d6bc:	4621      	mov	r1, r4
 800d6be:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d6c2:	3b30      	subs	r3, #48	; 0x30
 800d6c4:	2b09      	cmp	r3, #9
 800d6c6:	d94e      	bls.n	800d766 <_svfiprintf_r+0x17e>
 800d6c8:	b1b0      	cbz	r0, 800d6f8 <_svfiprintf_r+0x110>
 800d6ca:	9207      	str	r2, [sp, #28]
 800d6cc:	e014      	b.n	800d6f8 <_svfiprintf_r+0x110>
 800d6ce:	eba0 0308 	sub.w	r3, r0, r8
 800d6d2:	fa09 f303 	lsl.w	r3, r9, r3
 800d6d6:	4313      	orrs	r3, r2
 800d6d8:	9304      	str	r3, [sp, #16]
 800d6da:	46a2      	mov	sl, r4
 800d6dc:	e7d2      	b.n	800d684 <_svfiprintf_r+0x9c>
 800d6de:	9b03      	ldr	r3, [sp, #12]
 800d6e0:	1d19      	adds	r1, r3, #4
 800d6e2:	681b      	ldr	r3, [r3, #0]
 800d6e4:	9103      	str	r1, [sp, #12]
 800d6e6:	2b00      	cmp	r3, #0
 800d6e8:	bfbb      	ittet	lt
 800d6ea:	425b      	neglt	r3, r3
 800d6ec:	f042 0202 	orrlt.w	r2, r2, #2
 800d6f0:	9307      	strge	r3, [sp, #28]
 800d6f2:	9307      	strlt	r3, [sp, #28]
 800d6f4:	bfb8      	it	lt
 800d6f6:	9204      	strlt	r2, [sp, #16]
 800d6f8:	7823      	ldrb	r3, [r4, #0]
 800d6fa:	2b2e      	cmp	r3, #46	; 0x2e
 800d6fc:	d10c      	bne.n	800d718 <_svfiprintf_r+0x130>
 800d6fe:	7863      	ldrb	r3, [r4, #1]
 800d700:	2b2a      	cmp	r3, #42	; 0x2a
 800d702:	d135      	bne.n	800d770 <_svfiprintf_r+0x188>
 800d704:	9b03      	ldr	r3, [sp, #12]
 800d706:	1d1a      	adds	r2, r3, #4
 800d708:	681b      	ldr	r3, [r3, #0]
 800d70a:	9203      	str	r2, [sp, #12]
 800d70c:	2b00      	cmp	r3, #0
 800d70e:	bfb8      	it	lt
 800d710:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800d714:	3402      	adds	r4, #2
 800d716:	9305      	str	r3, [sp, #20]
 800d718:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800d7e4 <_svfiprintf_r+0x1fc>
 800d71c:	7821      	ldrb	r1, [r4, #0]
 800d71e:	2203      	movs	r2, #3
 800d720:	4650      	mov	r0, sl
 800d722:	f7f2 fd5d 	bl	80001e0 <memchr>
 800d726:	b140      	cbz	r0, 800d73a <_svfiprintf_r+0x152>
 800d728:	2340      	movs	r3, #64	; 0x40
 800d72a:	eba0 000a 	sub.w	r0, r0, sl
 800d72e:	fa03 f000 	lsl.w	r0, r3, r0
 800d732:	9b04      	ldr	r3, [sp, #16]
 800d734:	4303      	orrs	r3, r0
 800d736:	3401      	adds	r4, #1
 800d738:	9304      	str	r3, [sp, #16]
 800d73a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d73e:	4826      	ldr	r0, [pc, #152]	; (800d7d8 <_svfiprintf_r+0x1f0>)
 800d740:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d744:	2206      	movs	r2, #6
 800d746:	f7f2 fd4b 	bl	80001e0 <memchr>
 800d74a:	2800      	cmp	r0, #0
 800d74c:	d038      	beq.n	800d7c0 <_svfiprintf_r+0x1d8>
 800d74e:	4b23      	ldr	r3, [pc, #140]	; (800d7dc <_svfiprintf_r+0x1f4>)
 800d750:	bb1b      	cbnz	r3, 800d79a <_svfiprintf_r+0x1b2>
 800d752:	9b03      	ldr	r3, [sp, #12]
 800d754:	3307      	adds	r3, #7
 800d756:	f023 0307 	bic.w	r3, r3, #7
 800d75a:	3308      	adds	r3, #8
 800d75c:	9303      	str	r3, [sp, #12]
 800d75e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d760:	4433      	add	r3, r6
 800d762:	9309      	str	r3, [sp, #36]	; 0x24
 800d764:	e767      	b.n	800d636 <_svfiprintf_r+0x4e>
 800d766:	fb0c 3202 	mla	r2, ip, r2, r3
 800d76a:	460c      	mov	r4, r1
 800d76c:	2001      	movs	r0, #1
 800d76e:	e7a5      	b.n	800d6bc <_svfiprintf_r+0xd4>
 800d770:	2300      	movs	r3, #0
 800d772:	3401      	adds	r4, #1
 800d774:	9305      	str	r3, [sp, #20]
 800d776:	4619      	mov	r1, r3
 800d778:	f04f 0c0a 	mov.w	ip, #10
 800d77c:	4620      	mov	r0, r4
 800d77e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d782:	3a30      	subs	r2, #48	; 0x30
 800d784:	2a09      	cmp	r2, #9
 800d786:	d903      	bls.n	800d790 <_svfiprintf_r+0x1a8>
 800d788:	2b00      	cmp	r3, #0
 800d78a:	d0c5      	beq.n	800d718 <_svfiprintf_r+0x130>
 800d78c:	9105      	str	r1, [sp, #20]
 800d78e:	e7c3      	b.n	800d718 <_svfiprintf_r+0x130>
 800d790:	fb0c 2101 	mla	r1, ip, r1, r2
 800d794:	4604      	mov	r4, r0
 800d796:	2301      	movs	r3, #1
 800d798:	e7f0      	b.n	800d77c <_svfiprintf_r+0x194>
 800d79a:	ab03      	add	r3, sp, #12
 800d79c:	9300      	str	r3, [sp, #0]
 800d79e:	462a      	mov	r2, r5
 800d7a0:	4b0f      	ldr	r3, [pc, #60]	; (800d7e0 <_svfiprintf_r+0x1f8>)
 800d7a2:	a904      	add	r1, sp, #16
 800d7a4:	4638      	mov	r0, r7
 800d7a6:	f7fd ffd7 	bl	800b758 <_printf_float>
 800d7aa:	1c42      	adds	r2, r0, #1
 800d7ac:	4606      	mov	r6, r0
 800d7ae:	d1d6      	bne.n	800d75e <_svfiprintf_r+0x176>
 800d7b0:	89ab      	ldrh	r3, [r5, #12]
 800d7b2:	065b      	lsls	r3, r3, #25
 800d7b4:	f53f af2c 	bmi.w	800d610 <_svfiprintf_r+0x28>
 800d7b8:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d7ba:	b01d      	add	sp, #116	; 0x74
 800d7bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d7c0:	ab03      	add	r3, sp, #12
 800d7c2:	9300      	str	r3, [sp, #0]
 800d7c4:	462a      	mov	r2, r5
 800d7c6:	4b06      	ldr	r3, [pc, #24]	; (800d7e0 <_svfiprintf_r+0x1f8>)
 800d7c8:	a904      	add	r1, sp, #16
 800d7ca:	4638      	mov	r0, r7
 800d7cc:	f7fe fa68 	bl	800bca0 <_printf_i>
 800d7d0:	e7eb      	b.n	800d7aa <_svfiprintf_r+0x1c2>
 800d7d2:	bf00      	nop
 800d7d4:	08013e54 	.word	0x08013e54
 800d7d8:	08013e5e 	.word	0x08013e5e
 800d7dc:	0800b759 	.word	0x0800b759
 800d7e0:	0800d531 	.word	0x0800d531
 800d7e4:	08013e5a 	.word	0x08013e5a

0800d7e8 <_sbrk_r>:
 800d7e8:	b538      	push	{r3, r4, r5, lr}
 800d7ea:	4d06      	ldr	r5, [pc, #24]	; (800d804 <_sbrk_r+0x1c>)
 800d7ec:	2300      	movs	r3, #0
 800d7ee:	4604      	mov	r4, r0
 800d7f0:	4608      	mov	r0, r1
 800d7f2:	602b      	str	r3, [r5, #0]
 800d7f4:	f7f7 f900 	bl	80049f8 <_sbrk>
 800d7f8:	1c43      	adds	r3, r0, #1
 800d7fa:	d102      	bne.n	800d802 <_sbrk_r+0x1a>
 800d7fc:	682b      	ldr	r3, [r5, #0]
 800d7fe:	b103      	cbz	r3, 800d802 <_sbrk_r+0x1a>
 800d800:	6023      	str	r3, [r4, #0]
 800d802:	bd38      	pop	{r3, r4, r5, pc}
 800d804:	20008b78 	.word	0x20008b78

0800d808 <__assert_func>:
 800d808:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800d80a:	4614      	mov	r4, r2
 800d80c:	461a      	mov	r2, r3
 800d80e:	4b09      	ldr	r3, [pc, #36]	; (800d834 <__assert_func+0x2c>)
 800d810:	681b      	ldr	r3, [r3, #0]
 800d812:	4605      	mov	r5, r0
 800d814:	68d8      	ldr	r0, [r3, #12]
 800d816:	b14c      	cbz	r4, 800d82c <__assert_func+0x24>
 800d818:	4b07      	ldr	r3, [pc, #28]	; (800d838 <__assert_func+0x30>)
 800d81a:	9100      	str	r1, [sp, #0]
 800d81c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800d820:	4906      	ldr	r1, [pc, #24]	; (800d83c <__assert_func+0x34>)
 800d822:	462b      	mov	r3, r5
 800d824:	f000 f80e 	bl	800d844 <fiprintf>
 800d828:	f000 faac 	bl	800dd84 <abort>
 800d82c:	4b04      	ldr	r3, [pc, #16]	; (800d840 <__assert_func+0x38>)
 800d82e:	461c      	mov	r4, r3
 800d830:	e7f3      	b.n	800d81a <__assert_func+0x12>
 800d832:	bf00      	nop
 800d834:	20000014 	.word	0x20000014
 800d838:	08013e65 	.word	0x08013e65
 800d83c:	08013e72 	.word	0x08013e72
 800d840:	08013ea0 	.word	0x08013ea0

0800d844 <fiprintf>:
 800d844:	b40e      	push	{r1, r2, r3}
 800d846:	b503      	push	{r0, r1, lr}
 800d848:	4601      	mov	r1, r0
 800d84a:	ab03      	add	r3, sp, #12
 800d84c:	4805      	ldr	r0, [pc, #20]	; (800d864 <fiprintf+0x20>)
 800d84e:	f853 2b04 	ldr.w	r2, [r3], #4
 800d852:	6800      	ldr	r0, [r0, #0]
 800d854:	9301      	str	r3, [sp, #4]
 800d856:	f000 f897 	bl	800d988 <_vfiprintf_r>
 800d85a:	b002      	add	sp, #8
 800d85c:	f85d eb04 	ldr.w	lr, [sp], #4
 800d860:	b003      	add	sp, #12
 800d862:	4770      	bx	lr
 800d864:	20000014 	.word	0x20000014

0800d868 <__ascii_mbtowc>:
 800d868:	b082      	sub	sp, #8
 800d86a:	b901      	cbnz	r1, 800d86e <__ascii_mbtowc+0x6>
 800d86c:	a901      	add	r1, sp, #4
 800d86e:	b142      	cbz	r2, 800d882 <__ascii_mbtowc+0x1a>
 800d870:	b14b      	cbz	r3, 800d886 <__ascii_mbtowc+0x1e>
 800d872:	7813      	ldrb	r3, [r2, #0]
 800d874:	600b      	str	r3, [r1, #0]
 800d876:	7812      	ldrb	r2, [r2, #0]
 800d878:	1e10      	subs	r0, r2, #0
 800d87a:	bf18      	it	ne
 800d87c:	2001      	movne	r0, #1
 800d87e:	b002      	add	sp, #8
 800d880:	4770      	bx	lr
 800d882:	4610      	mov	r0, r2
 800d884:	e7fb      	b.n	800d87e <__ascii_mbtowc+0x16>
 800d886:	f06f 0001 	mvn.w	r0, #1
 800d88a:	e7f8      	b.n	800d87e <__ascii_mbtowc+0x16>

0800d88c <memmove>:
 800d88c:	4288      	cmp	r0, r1
 800d88e:	b510      	push	{r4, lr}
 800d890:	eb01 0402 	add.w	r4, r1, r2
 800d894:	d902      	bls.n	800d89c <memmove+0x10>
 800d896:	4284      	cmp	r4, r0
 800d898:	4623      	mov	r3, r4
 800d89a:	d807      	bhi.n	800d8ac <memmove+0x20>
 800d89c:	1e43      	subs	r3, r0, #1
 800d89e:	42a1      	cmp	r1, r4
 800d8a0:	d008      	beq.n	800d8b4 <memmove+0x28>
 800d8a2:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d8a6:	f803 2f01 	strb.w	r2, [r3, #1]!
 800d8aa:	e7f8      	b.n	800d89e <memmove+0x12>
 800d8ac:	4402      	add	r2, r0
 800d8ae:	4601      	mov	r1, r0
 800d8b0:	428a      	cmp	r2, r1
 800d8b2:	d100      	bne.n	800d8b6 <memmove+0x2a>
 800d8b4:	bd10      	pop	{r4, pc}
 800d8b6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800d8ba:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800d8be:	e7f7      	b.n	800d8b0 <memmove+0x24>

0800d8c0 <__malloc_lock>:
 800d8c0:	4801      	ldr	r0, [pc, #4]	; (800d8c8 <__malloc_lock+0x8>)
 800d8c2:	f000 bc1f 	b.w	800e104 <__retarget_lock_acquire_recursive>
 800d8c6:	bf00      	nop
 800d8c8:	20008b7c 	.word	0x20008b7c

0800d8cc <__malloc_unlock>:
 800d8cc:	4801      	ldr	r0, [pc, #4]	; (800d8d4 <__malloc_unlock+0x8>)
 800d8ce:	f000 bc1a 	b.w	800e106 <__retarget_lock_release_recursive>
 800d8d2:	bf00      	nop
 800d8d4:	20008b7c 	.word	0x20008b7c

0800d8d8 <_realloc_r>:
 800d8d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d8dc:	4680      	mov	r8, r0
 800d8de:	4614      	mov	r4, r2
 800d8e0:	460e      	mov	r6, r1
 800d8e2:	b921      	cbnz	r1, 800d8ee <_realloc_r+0x16>
 800d8e4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d8e8:	4611      	mov	r1, r2
 800d8ea:	f7ff bdad 	b.w	800d448 <_malloc_r>
 800d8ee:	b92a      	cbnz	r2, 800d8fc <_realloc_r+0x24>
 800d8f0:	f7ff fd3e 	bl	800d370 <_free_r>
 800d8f4:	4625      	mov	r5, r4
 800d8f6:	4628      	mov	r0, r5
 800d8f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d8fc:	f000 fc6a 	bl	800e1d4 <_malloc_usable_size_r>
 800d900:	4284      	cmp	r4, r0
 800d902:	4607      	mov	r7, r0
 800d904:	d802      	bhi.n	800d90c <_realloc_r+0x34>
 800d906:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800d90a:	d812      	bhi.n	800d932 <_realloc_r+0x5a>
 800d90c:	4621      	mov	r1, r4
 800d90e:	4640      	mov	r0, r8
 800d910:	f7ff fd9a 	bl	800d448 <_malloc_r>
 800d914:	4605      	mov	r5, r0
 800d916:	2800      	cmp	r0, #0
 800d918:	d0ed      	beq.n	800d8f6 <_realloc_r+0x1e>
 800d91a:	42bc      	cmp	r4, r7
 800d91c:	4622      	mov	r2, r4
 800d91e:	4631      	mov	r1, r6
 800d920:	bf28      	it	cs
 800d922:	463a      	movcs	r2, r7
 800d924:	f7fd fe62 	bl	800b5ec <memcpy>
 800d928:	4631      	mov	r1, r6
 800d92a:	4640      	mov	r0, r8
 800d92c:	f7ff fd20 	bl	800d370 <_free_r>
 800d930:	e7e1      	b.n	800d8f6 <_realloc_r+0x1e>
 800d932:	4635      	mov	r5, r6
 800d934:	e7df      	b.n	800d8f6 <_realloc_r+0x1e>

0800d936 <__sfputc_r>:
 800d936:	6893      	ldr	r3, [r2, #8]
 800d938:	3b01      	subs	r3, #1
 800d93a:	2b00      	cmp	r3, #0
 800d93c:	b410      	push	{r4}
 800d93e:	6093      	str	r3, [r2, #8]
 800d940:	da08      	bge.n	800d954 <__sfputc_r+0x1e>
 800d942:	6994      	ldr	r4, [r2, #24]
 800d944:	42a3      	cmp	r3, r4
 800d946:	db01      	blt.n	800d94c <__sfputc_r+0x16>
 800d948:	290a      	cmp	r1, #10
 800d94a:	d103      	bne.n	800d954 <__sfputc_r+0x1e>
 800d94c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d950:	f000 b94a 	b.w	800dbe8 <__swbuf_r>
 800d954:	6813      	ldr	r3, [r2, #0]
 800d956:	1c58      	adds	r0, r3, #1
 800d958:	6010      	str	r0, [r2, #0]
 800d95a:	7019      	strb	r1, [r3, #0]
 800d95c:	4608      	mov	r0, r1
 800d95e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d962:	4770      	bx	lr

0800d964 <__sfputs_r>:
 800d964:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d966:	4606      	mov	r6, r0
 800d968:	460f      	mov	r7, r1
 800d96a:	4614      	mov	r4, r2
 800d96c:	18d5      	adds	r5, r2, r3
 800d96e:	42ac      	cmp	r4, r5
 800d970:	d101      	bne.n	800d976 <__sfputs_r+0x12>
 800d972:	2000      	movs	r0, #0
 800d974:	e007      	b.n	800d986 <__sfputs_r+0x22>
 800d976:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d97a:	463a      	mov	r2, r7
 800d97c:	4630      	mov	r0, r6
 800d97e:	f7ff ffda 	bl	800d936 <__sfputc_r>
 800d982:	1c43      	adds	r3, r0, #1
 800d984:	d1f3      	bne.n	800d96e <__sfputs_r+0xa>
 800d986:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800d988 <_vfiprintf_r>:
 800d988:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d98c:	460d      	mov	r5, r1
 800d98e:	b09d      	sub	sp, #116	; 0x74
 800d990:	4614      	mov	r4, r2
 800d992:	4698      	mov	r8, r3
 800d994:	4606      	mov	r6, r0
 800d996:	b118      	cbz	r0, 800d9a0 <_vfiprintf_r+0x18>
 800d998:	6983      	ldr	r3, [r0, #24]
 800d99a:	b90b      	cbnz	r3, 800d9a0 <_vfiprintf_r+0x18>
 800d99c:	f000 fb14 	bl	800dfc8 <__sinit>
 800d9a0:	4b89      	ldr	r3, [pc, #548]	; (800dbc8 <_vfiprintf_r+0x240>)
 800d9a2:	429d      	cmp	r5, r3
 800d9a4:	d11b      	bne.n	800d9de <_vfiprintf_r+0x56>
 800d9a6:	6875      	ldr	r5, [r6, #4]
 800d9a8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d9aa:	07d9      	lsls	r1, r3, #31
 800d9ac:	d405      	bmi.n	800d9ba <_vfiprintf_r+0x32>
 800d9ae:	89ab      	ldrh	r3, [r5, #12]
 800d9b0:	059a      	lsls	r2, r3, #22
 800d9b2:	d402      	bmi.n	800d9ba <_vfiprintf_r+0x32>
 800d9b4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d9b6:	f000 fba5 	bl	800e104 <__retarget_lock_acquire_recursive>
 800d9ba:	89ab      	ldrh	r3, [r5, #12]
 800d9bc:	071b      	lsls	r3, r3, #28
 800d9be:	d501      	bpl.n	800d9c4 <_vfiprintf_r+0x3c>
 800d9c0:	692b      	ldr	r3, [r5, #16]
 800d9c2:	b9eb      	cbnz	r3, 800da00 <_vfiprintf_r+0x78>
 800d9c4:	4629      	mov	r1, r5
 800d9c6:	4630      	mov	r0, r6
 800d9c8:	f000 f96e 	bl	800dca8 <__swsetup_r>
 800d9cc:	b1c0      	cbz	r0, 800da00 <_vfiprintf_r+0x78>
 800d9ce:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d9d0:	07dc      	lsls	r4, r3, #31
 800d9d2:	d50e      	bpl.n	800d9f2 <_vfiprintf_r+0x6a>
 800d9d4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d9d8:	b01d      	add	sp, #116	; 0x74
 800d9da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d9de:	4b7b      	ldr	r3, [pc, #492]	; (800dbcc <_vfiprintf_r+0x244>)
 800d9e0:	429d      	cmp	r5, r3
 800d9e2:	d101      	bne.n	800d9e8 <_vfiprintf_r+0x60>
 800d9e4:	68b5      	ldr	r5, [r6, #8]
 800d9e6:	e7df      	b.n	800d9a8 <_vfiprintf_r+0x20>
 800d9e8:	4b79      	ldr	r3, [pc, #484]	; (800dbd0 <_vfiprintf_r+0x248>)
 800d9ea:	429d      	cmp	r5, r3
 800d9ec:	bf08      	it	eq
 800d9ee:	68f5      	ldreq	r5, [r6, #12]
 800d9f0:	e7da      	b.n	800d9a8 <_vfiprintf_r+0x20>
 800d9f2:	89ab      	ldrh	r3, [r5, #12]
 800d9f4:	0598      	lsls	r0, r3, #22
 800d9f6:	d4ed      	bmi.n	800d9d4 <_vfiprintf_r+0x4c>
 800d9f8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d9fa:	f000 fb84 	bl	800e106 <__retarget_lock_release_recursive>
 800d9fe:	e7e9      	b.n	800d9d4 <_vfiprintf_r+0x4c>
 800da00:	2300      	movs	r3, #0
 800da02:	9309      	str	r3, [sp, #36]	; 0x24
 800da04:	2320      	movs	r3, #32
 800da06:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800da0a:	f8cd 800c 	str.w	r8, [sp, #12]
 800da0e:	2330      	movs	r3, #48	; 0x30
 800da10:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800dbd4 <_vfiprintf_r+0x24c>
 800da14:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800da18:	f04f 0901 	mov.w	r9, #1
 800da1c:	4623      	mov	r3, r4
 800da1e:	469a      	mov	sl, r3
 800da20:	f813 2b01 	ldrb.w	r2, [r3], #1
 800da24:	b10a      	cbz	r2, 800da2a <_vfiprintf_r+0xa2>
 800da26:	2a25      	cmp	r2, #37	; 0x25
 800da28:	d1f9      	bne.n	800da1e <_vfiprintf_r+0x96>
 800da2a:	ebba 0b04 	subs.w	fp, sl, r4
 800da2e:	d00b      	beq.n	800da48 <_vfiprintf_r+0xc0>
 800da30:	465b      	mov	r3, fp
 800da32:	4622      	mov	r2, r4
 800da34:	4629      	mov	r1, r5
 800da36:	4630      	mov	r0, r6
 800da38:	f7ff ff94 	bl	800d964 <__sfputs_r>
 800da3c:	3001      	adds	r0, #1
 800da3e:	f000 80aa 	beq.w	800db96 <_vfiprintf_r+0x20e>
 800da42:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800da44:	445a      	add	r2, fp
 800da46:	9209      	str	r2, [sp, #36]	; 0x24
 800da48:	f89a 3000 	ldrb.w	r3, [sl]
 800da4c:	2b00      	cmp	r3, #0
 800da4e:	f000 80a2 	beq.w	800db96 <_vfiprintf_r+0x20e>
 800da52:	2300      	movs	r3, #0
 800da54:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800da58:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800da5c:	f10a 0a01 	add.w	sl, sl, #1
 800da60:	9304      	str	r3, [sp, #16]
 800da62:	9307      	str	r3, [sp, #28]
 800da64:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800da68:	931a      	str	r3, [sp, #104]	; 0x68
 800da6a:	4654      	mov	r4, sl
 800da6c:	2205      	movs	r2, #5
 800da6e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800da72:	4858      	ldr	r0, [pc, #352]	; (800dbd4 <_vfiprintf_r+0x24c>)
 800da74:	f7f2 fbb4 	bl	80001e0 <memchr>
 800da78:	9a04      	ldr	r2, [sp, #16]
 800da7a:	b9d8      	cbnz	r0, 800dab4 <_vfiprintf_r+0x12c>
 800da7c:	06d1      	lsls	r1, r2, #27
 800da7e:	bf44      	itt	mi
 800da80:	2320      	movmi	r3, #32
 800da82:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800da86:	0713      	lsls	r3, r2, #28
 800da88:	bf44      	itt	mi
 800da8a:	232b      	movmi	r3, #43	; 0x2b
 800da8c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800da90:	f89a 3000 	ldrb.w	r3, [sl]
 800da94:	2b2a      	cmp	r3, #42	; 0x2a
 800da96:	d015      	beq.n	800dac4 <_vfiprintf_r+0x13c>
 800da98:	9a07      	ldr	r2, [sp, #28]
 800da9a:	4654      	mov	r4, sl
 800da9c:	2000      	movs	r0, #0
 800da9e:	f04f 0c0a 	mov.w	ip, #10
 800daa2:	4621      	mov	r1, r4
 800daa4:	f811 3b01 	ldrb.w	r3, [r1], #1
 800daa8:	3b30      	subs	r3, #48	; 0x30
 800daaa:	2b09      	cmp	r3, #9
 800daac:	d94e      	bls.n	800db4c <_vfiprintf_r+0x1c4>
 800daae:	b1b0      	cbz	r0, 800dade <_vfiprintf_r+0x156>
 800dab0:	9207      	str	r2, [sp, #28]
 800dab2:	e014      	b.n	800dade <_vfiprintf_r+0x156>
 800dab4:	eba0 0308 	sub.w	r3, r0, r8
 800dab8:	fa09 f303 	lsl.w	r3, r9, r3
 800dabc:	4313      	orrs	r3, r2
 800dabe:	9304      	str	r3, [sp, #16]
 800dac0:	46a2      	mov	sl, r4
 800dac2:	e7d2      	b.n	800da6a <_vfiprintf_r+0xe2>
 800dac4:	9b03      	ldr	r3, [sp, #12]
 800dac6:	1d19      	adds	r1, r3, #4
 800dac8:	681b      	ldr	r3, [r3, #0]
 800daca:	9103      	str	r1, [sp, #12]
 800dacc:	2b00      	cmp	r3, #0
 800dace:	bfbb      	ittet	lt
 800dad0:	425b      	neglt	r3, r3
 800dad2:	f042 0202 	orrlt.w	r2, r2, #2
 800dad6:	9307      	strge	r3, [sp, #28]
 800dad8:	9307      	strlt	r3, [sp, #28]
 800dada:	bfb8      	it	lt
 800dadc:	9204      	strlt	r2, [sp, #16]
 800dade:	7823      	ldrb	r3, [r4, #0]
 800dae0:	2b2e      	cmp	r3, #46	; 0x2e
 800dae2:	d10c      	bne.n	800dafe <_vfiprintf_r+0x176>
 800dae4:	7863      	ldrb	r3, [r4, #1]
 800dae6:	2b2a      	cmp	r3, #42	; 0x2a
 800dae8:	d135      	bne.n	800db56 <_vfiprintf_r+0x1ce>
 800daea:	9b03      	ldr	r3, [sp, #12]
 800daec:	1d1a      	adds	r2, r3, #4
 800daee:	681b      	ldr	r3, [r3, #0]
 800daf0:	9203      	str	r2, [sp, #12]
 800daf2:	2b00      	cmp	r3, #0
 800daf4:	bfb8      	it	lt
 800daf6:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800dafa:	3402      	adds	r4, #2
 800dafc:	9305      	str	r3, [sp, #20]
 800dafe:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800dbe4 <_vfiprintf_r+0x25c>
 800db02:	7821      	ldrb	r1, [r4, #0]
 800db04:	2203      	movs	r2, #3
 800db06:	4650      	mov	r0, sl
 800db08:	f7f2 fb6a 	bl	80001e0 <memchr>
 800db0c:	b140      	cbz	r0, 800db20 <_vfiprintf_r+0x198>
 800db0e:	2340      	movs	r3, #64	; 0x40
 800db10:	eba0 000a 	sub.w	r0, r0, sl
 800db14:	fa03 f000 	lsl.w	r0, r3, r0
 800db18:	9b04      	ldr	r3, [sp, #16]
 800db1a:	4303      	orrs	r3, r0
 800db1c:	3401      	adds	r4, #1
 800db1e:	9304      	str	r3, [sp, #16]
 800db20:	f814 1b01 	ldrb.w	r1, [r4], #1
 800db24:	482c      	ldr	r0, [pc, #176]	; (800dbd8 <_vfiprintf_r+0x250>)
 800db26:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800db2a:	2206      	movs	r2, #6
 800db2c:	f7f2 fb58 	bl	80001e0 <memchr>
 800db30:	2800      	cmp	r0, #0
 800db32:	d03f      	beq.n	800dbb4 <_vfiprintf_r+0x22c>
 800db34:	4b29      	ldr	r3, [pc, #164]	; (800dbdc <_vfiprintf_r+0x254>)
 800db36:	bb1b      	cbnz	r3, 800db80 <_vfiprintf_r+0x1f8>
 800db38:	9b03      	ldr	r3, [sp, #12]
 800db3a:	3307      	adds	r3, #7
 800db3c:	f023 0307 	bic.w	r3, r3, #7
 800db40:	3308      	adds	r3, #8
 800db42:	9303      	str	r3, [sp, #12]
 800db44:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800db46:	443b      	add	r3, r7
 800db48:	9309      	str	r3, [sp, #36]	; 0x24
 800db4a:	e767      	b.n	800da1c <_vfiprintf_r+0x94>
 800db4c:	fb0c 3202 	mla	r2, ip, r2, r3
 800db50:	460c      	mov	r4, r1
 800db52:	2001      	movs	r0, #1
 800db54:	e7a5      	b.n	800daa2 <_vfiprintf_r+0x11a>
 800db56:	2300      	movs	r3, #0
 800db58:	3401      	adds	r4, #1
 800db5a:	9305      	str	r3, [sp, #20]
 800db5c:	4619      	mov	r1, r3
 800db5e:	f04f 0c0a 	mov.w	ip, #10
 800db62:	4620      	mov	r0, r4
 800db64:	f810 2b01 	ldrb.w	r2, [r0], #1
 800db68:	3a30      	subs	r2, #48	; 0x30
 800db6a:	2a09      	cmp	r2, #9
 800db6c:	d903      	bls.n	800db76 <_vfiprintf_r+0x1ee>
 800db6e:	2b00      	cmp	r3, #0
 800db70:	d0c5      	beq.n	800dafe <_vfiprintf_r+0x176>
 800db72:	9105      	str	r1, [sp, #20]
 800db74:	e7c3      	b.n	800dafe <_vfiprintf_r+0x176>
 800db76:	fb0c 2101 	mla	r1, ip, r1, r2
 800db7a:	4604      	mov	r4, r0
 800db7c:	2301      	movs	r3, #1
 800db7e:	e7f0      	b.n	800db62 <_vfiprintf_r+0x1da>
 800db80:	ab03      	add	r3, sp, #12
 800db82:	9300      	str	r3, [sp, #0]
 800db84:	462a      	mov	r2, r5
 800db86:	4b16      	ldr	r3, [pc, #88]	; (800dbe0 <_vfiprintf_r+0x258>)
 800db88:	a904      	add	r1, sp, #16
 800db8a:	4630      	mov	r0, r6
 800db8c:	f7fd fde4 	bl	800b758 <_printf_float>
 800db90:	4607      	mov	r7, r0
 800db92:	1c78      	adds	r0, r7, #1
 800db94:	d1d6      	bne.n	800db44 <_vfiprintf_r+0x1bc>
 800db96:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800db98:	07d9      	lsls	r1, r3, #31
 800db9a:	d405      	bmi.n	800dba8 <_vfiprintf_r+0x220>
 800db9c:	89ab      	ldrh	r3, [r5, #12]
 800db9e:	059a      	lsls	r2, r3, #22
 800dba0:	d402      	bmi.n	800dba8 <_vfiprintf_r+0x220>
 800dba2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800dba4:	f000 faaf 	bl	800e106 <__retarget_lock_release_recursive>
 800dba8:	89ab      	ldrh	r3, [r5, #12]
 800dbaa:	065b      	lsls	r3, r3, #25
 800dbac:	f53f af12 	bmi.w	800d9d4 <_vfiprintf_r+0x4c>
 800dbb0:	9809      	ldr	r0, [sp, #36]	; 0x24
 800dbb2:	e711      	b.n	800d9d8 <_vfiprintf_r+0x50>
 800dbb4:	ab03      	add	r3, sp, #12
 800dbb6:	9300      	str	r3, [sp, #0]
 800dbb8:	462a      	mov	r2, r5
 800dbba:	4b09      	ldr	r3, [pc, #36]	; (800dbe0 <_vfiprintf_r+0x258>)
 800dbbc:	a904      	add	r1, sp, #16
 800dbbe:	4630      	mov	r0, r6
 800dbc0:	f7fe f86e 	bl	800bca0 <_printf_i>
 800dbc4:	e7e4      	b.n	800db90 <_vfiprintf_r+0x208>
 800dbc6:	bf00      	nop
 800dbc8:	08013fcc 	.word	0x08013fcc
 800dbcc:	08013fec 	.word	0x08013fec
 800dbd0:	08013fac 	.word	0x08013fac
 800dbd4:	08013e54 	.word	0x08013e54
 800dbd8:	08013e5e 	.word	0x08013e5e
 800dbdc:	0800b759 	.word	0x0800b759
 800dbe0:	0800d965 	.word	0x0800d965
 800dbe4:	08013e5a 	.word	0x08013e5a

0800dbe8 <__swbuf_r>:
 800dbe8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dbea:	460e      	mov	r6, r1
 800dbec:	4614      	mov	r4, r2
 800dbee:	4605      	mov	r5, r0
 800dbf0:	b118      	cbz	r0, 800dbfa <__swbuf_r+0x12>
 800dbf2:	6983      	ldr	r3, [r0, #24]
 800dbf4:	b90b      	cbnz	r3, 800dbfa <__swbuf_r+0x12>
 800dbf6:	f000 f9e7 	bl	800dfc8 <__sinit>
 800dbfa:	4b21      	ldr	r3, [pc, #132]	; (800dc80 <__swbuf_r+0x98>)
 800dbfc:	429c      	cmp	r4, r3
 800dbfe:	d12b      	bne.n	800dc58 <__swbuf_r+0x70>
 800dc00:	686c      	ldr	r4, [r5, #4]
 800dc02:	69a3      	ldr	r3, [r4, #24]
 800dc04:	60a3      	str	r3, [r4, #8]
 800dc06:	89a3      	ldrh	r3, [r4, #12]
 800dc08:	071a      	lsls	r2, r3, #28
 800dc0a:	d52f      	bpl.n	800dc6c <__swbuf_r+0x84>
 800dc0c:	6923      	ldr	r3, [r4, #16]
 800dc0e:	b36b      	cbz	r3, 800dc6c <__swbuf_r+0x84>
 800dc10:	6923      	ldr	r3, [r4, #16]
 800dc12:	6820      	ldr	r0, [r4, #0]
 800dc14:	1ac0      	subs	r0, r0, r3
 800dc16:	6963      	ldr	r3, [r4, #20]
 800dc18:	b2f6      	uxtb	r6, r6
 800dc1a:	4283      	cmp	r3, r0
 800dc1c:	4637      	mov	r7, r6
 800dc1e:	dc04      	bgt.n	800dc2a <__swbuf_r+0x42>
 800dc20:	4621      	mov	r1, r4
 800dc22:	4628      	mov	r0, r5
 800dc24:	f000 f93c 	bl	800dea0 <_fflush_r>
 800dc28:	bb30      	cbnz	r0, 800dc78 <__swbuf_r+0x90>
 800dc2a:	68a3      	ldr	r3, [r4, #8]
 800dc2c:	3b01      	subs	r3, #1
 800dc2e:	60a3      	str	r3, [r4, #8]
 800dc30:	6823      	ldr	r3, [r4, #0]
 800dc32:	1c5a      	adds	r2, r3, #1
 800dc34:	6022      	str	r2, [r4, #0]
 800dc36:	701e      	strb	r6, [r3, #0]
 800dc38:	6963      	ldr	r3, [r4, #20]
 800dc3a:	3001      	adds	r0, #1
 800dc3c:	4283      	cmp	r3, r0
 800dc3e:	d004      	beq.n	800dc4a <__swbuf_r+0x62>
 800dc40:	89a3      	ldrh	r3, [r4, #12]
 800dc42:	07db      	lsls	r3, r3, #31
 800dc44:	d506      	bpl.n	800dc54 <__swbuf_r+0x6c>
 800dc46:	2e0a      	cmp	r6, #10
 800dc48:	d104      	bne.n	800dc54 <__swbuf_r+0x6c>
 800dc4a:	4621      	mov	r1, r4
 800dc4c:	4628      	mov	r0, r5
 800dc4e:	f000 f927 	bl	800dea0 <_fflush_r>
 800dc52:	b988      	cbnz	r0, 800dc78 <__swbuf_r+0x90>
 800dc54:	4638      	mov	r0, r7
 800dc56:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800dc58:	4b0a      	ldr	r3, [pc, #40]	; (800dc84 <__swbuf_r+0x9c>)
 800dc5a:	429c      	cmp	r4, r3
 800dc5c:	d101      	bne.n	800dc62 <__swbuf_r+0x7a>
 800dc5e:	68ac      	ldr	r4, [r5, #8]
 800dc60:	e7cf      	b.n	800dc02 <__swbuf_r+0x1a>
 800dc62:	4b09      	ldr	r3, [pc, #36]	; (800dc88 <__swbuf_r+0xa0>)
 800dc64:	429c      	cmp	r4, r3
 800dc66:	bf08      	it	eq
 800dc68:	68ec      	ldreq	r4, [r5, #12]
 800dc6a:	e7ca      	b.n	800dc02 <__swbuf_r+0x1a>
 800dc6c:	4621      	mov	r1, r4
 800dc6e:	4628      	mov	r0, r5
 800dc70:	f000 f81a 	bl	800dca8 <__swsetup_r>
 800dc74:	2800      	cmp	r0, #0
 800dc76:	d0cb      	beq.n	800dc10 <__swbuf_r+0x28>
 800dc78:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800dc7c:	e7ea      	b.n	800dc54 <__swbuf_r+0x6c>
 800dc7e:	bf00      	nop
 800dc80:	08013fcc 	.word	0x08013fcc
 800dc84:	08013fec 	.word	0x08013fec
 800dc88:	08013fac 	.word	0x08013fac

0800dc8c <__ascii_wctomb>:
 800dc8c:	b149      	cbz	r1, 800dca2 <__ascii_wctomb+0x16>
 800dc8e:	2aff      	cmp	r2, #255	; 0xff
 800dc90:	bf85      	ittet	hi
 800dc92:	238a      	movhi	r3, #138	; 0x8a
 800dc94:	6003      	strhi	r3, [r0, #0]
 800dc96:	700a      	strbls	r2, [r1, #0]
 800dc98:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 800dc9c:	bf98      	it	ls
 800dc9e:	2001      	movls	r0, #1
 800dca0:	4770      	bx	lr
 800dca2:	4608      	mov	r0, r1
 800dca4:	4770      	bx	lr
	...

0800dca8 <__swsetup_r>:
 800dca8:	4b32      	ldr	r3, [pc, #200]	; (800dd74 <__swsetup_r+0xcc>)
 800dcaa:	b570      	push	{r4, r5, r6, lr}
 800dcac:	681d      	ldr	r5, [r3, #0]
 800dcae:	4606      	mov	r6, r0
 800dcb0:	460c      	mov	r4, r1
 800dcb2:	b125      	cbz	r5, 800dcbe <__swsetup_r+0x16>
 800dcb4:	69ab      	ldr	r3, [r5, #24]
 800dcb6:	b913      	cbnz	r3, 800dcbe <__swsetup_r+0x16>
 800dcb8:	4628      	mov	r0, r5
 800dcba:	f000 f985 	bl	800dfc8 <__sinit>
 800dcbe:	4b2e      	ldr	r3, [pc, #184]	; (800dd78 <__swsetup_r+0xd0>)
 800dcc0:	429c      	cmp	r4, r3
 800dcc2:	d10f      	bne.n	800dce4 <__swsetup_r+0x3c>
 800dcc4:	686c      	ldr	r4, [r5, #4]
 800dcc6:	89a3      	ldrh	r3, [r4, #12]
 800dcc8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800dccc:	0719      	lsls	r1, r3, #28
 800dcce:	d42c      	bmi.n	800dd2a <__swsetup_r+0x82>
 800dcd0:	06dd      	lsls	r5, r3, #27
 800dcd2:	d411      	bmi.n	800dcf8 <__swsetup_r+0x50>
 800dcd4:	2309      	movs	r3, #9
 800dcd6:	6033      	str	r3, [r6, #0]
 800dcd8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800dcdc:	81a3      	strh	r3, [r4, #12]
 800dcde:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800dce2:	e03e      	b.n	800dd62 <__swsetup_r+0xba>
 800dce4:	4b25      	ldr	r3, [pc, #148]	; (800dd7c <__swsetup_r+0xd4>)
 800dce6:	429c      	cmp	r4, r3
 800dce8:	d101      	bne.n	800dcee <__swsetup_r+0x46>
 800dcea:	68ac      	ldr	r4, [r5, #8]
 800dcec:	e7eb      	b.n	800dcc6 <__swsetup_r+0x1e>
 800dcee:	4b24      	ldr	r3, [pc, #144]	; (800dd80 <__swsetup_r+0xd8>)
 800dcf0:	429c      	cmp	r4, r3
 800dcf2:	bf08      	it	eq
 800dcf4:	68ec      	ldreq	r4, [r5, #12]
 800dcf6:	e7e6      	b.n	800dcc6 <__swsetup_r+0x1e>
 800dcf8:	0758      	lsls	r0, r3, #29
 800dcfa:	d512      	bpl.n	800dd22 <__swsetup_r+0x7a>
 800dcfc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800dcfe:	b141      	cbz	r1, 800dd12 <__swsetup_r+0x6a>
 800dd00:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800dd04:	4299      	cmp	r1, r3
 800dd06:	d002      	beq.n	800dd0e <__swsetup_r+0x66>
 800dd08:	4630      	mov	r0, r6
 800dd0a:	f7ff fb31 	bl	800d370 <_free_r>
 800dd0e:	2300      	movs	r3, #0
 800dd10:	6363      	str	r3, [r4, #52]	; 0x34
 800dd12:	89a3      	ldrh	r3, [r4, #12]
 800dd14:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800dd18:	81a3      	strh	r3, [r4, #12]
 800dd1a:	2300      	movs	r3, #0
 800dd1c:	6063      	str	r3, [r4, #4]
 800dd1e:	6923      	ldr	r3, [r4, #16]
 800dd20:	6023      	str	r3, [r4, #0]
 800dd22:	89a3      	ldrh	r3, [r4, #12]
 800dd24:	f043 0308 	orr.w	r3, r3, #8
 800dd28:	81a3      	strh	r3, [r4, #12]
 800dd2a:	6923      	ldr	r3, [r4, #16]
 800dd2c:	b94b      	cbnz	r3, 800dd42 <__swsetup_r+0x9a>
 800dd2e:	89a3      	ldrh	r3, [r4, #12]
 800dd30:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800dd34:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800dd38:	d003      	beq.n	800dd42 <__swsetup_r+0x9a>
 800dd3a:	4621      	mov	r1, r4
 800dd3c:	4630      	mov	r0, r6
 800dd3e:	f000 fa09 	bl	800e154 <__smakebuf_r>
 800dd42:	89a0      	ldrh	r0, [r4, #12]
 800dd44:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800dd48:	f010 0301 	ands.w	r3, r0, #1
 800dd4c:	d00a      	beq.n	800dd64 <__swsetup_r+0xbc>
 800dd4e:	2300      	movs	r3, #0
 800dd50:	60a3      	str	r3, [r4, #8]
 800dd52:	6963      	ldr	r3, [r4, #20]
 800dd54:	425b      	negs	r3, r3
 800dd56:	61a3      	str	r3, [r4, #24]
 800dd58:	6923      	ldr	r3, [r4, #16]
 800dd5a:	b943      	cbnz	r3, 800dd6e <__swsetup_r+0xc6>
 800dd5c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800dd60:	d1ba      	bne.n	800dcd8 <__swsetup_r+0x30>
 800dd62:	bd70      	pop	{r4, r5, r6, pc}
 800dd64:	0781      	lsls	r1, r0, #30
 800dd66:	bf58      	it	pl
 800dd68:	6963      	ldrpl	r3, [r4, #20]
 800dd6a:	60a3      	str	r3, [r4, #8]
 800dd6c:	e7f4      	b.n	800dd58 <__swsetup_r+0xb0>
 800dd6e:	2000      	movs	r0, #0
 800dd70:	e7f7      	b.n	800dd62 <__swsetup_r+0xba>
 800dd72:	bf00      	nop
 800dd74:	20000014 	.word	0x20000014
 800dd78:	08013fcc 	.word	0x08013fcc
 800dd7c:	08013fec 	.word	0x08013fec
 800dd80:	08013fac 	.word	0x08013fac

0800dd84 <abort>:
 800dd84:	b508      	push	{r3, lr}
 800dd86:	2006      	movs	r0, #6
 800dd88:	f000 fa54 	bl	800e234 <raise>
 800dd8c:	2001      	movs	r0, #1
 800dd8e:	f7f6 fdbb 	bl	8004908 <_exit>
	...

0800dd94 <__sflush_r>:
 800dd94:	898a      	ldrh	r2, [r1, #12]
 800dd96:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dd9a:	4605      	mov	r5, r0
 800dd9c:	0710      	lsls	r0, r2, #28
 800dd9e:	460c      	mov	r4, r1
 800dda0:	d458      	bmi.n	800de54 <__sflush_r+0xc0>
 800dda2:	684b      	ldr	r3, [r1, #4]
 800dda4:	2b00      	cmp	r3, #0
 800dda6:	dc05      	bgt.n	800ddb4 <__sflush_r+0x20>
 800dda8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800ddaa:	2b00      	cmp	r3, #0
 800ddac:	dc02      	bgt.n	800ddb4 <__sflush_r+0x20>
 800ddae:	2000      	movs	r0, #0
 800ddb0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ddb4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ddb6:	2e00      	cmp	r6, #0
 800ddb8:	d0f9      	beq.n	800ddae <__sflush_r+0x1a>
 800ddba:	2300      	movs	r3, #0
 800ddbc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800ddc0:	682f      	ldr	r7, [r5, #0]
 800ddc2:	602b      	str	r3, [r5, #0]
 800ddc4:	d032      	beq.n	800de2c <__sflush_r+0x98>
 800ddc6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800ddc8:	89a3      	ldrh	r3, [r4, #12]
 800ddca:	075a      	lsls	r2, r3, #29
 800ddcc:	d505      	bpl.n	800ddda <__sflush_r+0x46>
 800ddce:	6863      	ldr	r3, [r4, #4]
 800ddd0:	1ac0      	subs	r0, r0, r3
 800ddd2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800ddd4:	b10b      	cbz	r3, 800ddda <__sflush_r+0x46>
 800ddd6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800ddd8:	1ac0      	subs	r0, r0, r3
 800ddda:	2300      	movs	r3, #0
 800dddc:	4602      	mov	r2, r0
 800ddde:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800dde0:	6a21      	ldr	r1, [r4, #32]
 800dde2:	4628      	mov	r0, r5
 800dde4:	47b0      	blx	r6
 800dde6:	1c43      	adds	r3, r0, #1
 800dde8:	89a3      	ldrh	r3, [r4, #12]
 800ddea:	d106      	bne.n	800ddfa <__sflush_r+0x66>
 800ddec:	6829      	ldr	r1, [r5, #0]
 800ddee:	291d      	cmp	r1, #29
 800ddf0:	d82c      	bhi.n	800de4c <__sflush_r+0xb8>
 800ddf2:	4a2a      	ldr	r2, [pc, #168]	; (800de9c <__sflush_r+0x108>)
 800ddf4:	40ca      	lsrs	r2, r1
 800ddf6:	07d6      	lsls	r6, r2, #31
 800ddf8:	d528      	bpl.n	800de4c <__sflush_r+0xb8>
 800ddfa:	2200      	movs	r2, #0
 800ddfc:	6062      	str	r2, [r4, #4]
 800ddfe:	04d9      	lsls	r1, r3, #19
 800de00:	6922      	ldr	r2, [r4, #16]
 800de02:	6022      	str	r2, [r4, #0]
 800de04:	d504      	bpl.n	800de10 <__sflush_r+0x7c>
 800de06:	1c42      	adds	r2, r0, #1
 800de08:	d101      	bne.n	800de0e <__sflush_r+0x7a>
 800de0a:	682b      	ldr	r3, [r5, #0]
 800de0c:	b903      	cbnz	r3, 800de10 <__sflush_r+0x7c>
 800de0e:	6560      	str	r0, [r4, #84]	; 0x54
 800de10:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800de12:	602f      	str	r7, [r5, #0]
 800de14:	2900      	cmp	r1, #0
 800de16:	d0ca      	beq.n	800ddae <__sflush_r+0x1a>
 800de18:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800de1c:	4299      	cmp	r1, r3
 800de1e:	d002      	beq.n	800de26 <__sflush_r+0x92>
 800de20:	4628      	mov	r0, r5
 800de22:	f7ff faa5 	bl	800d370 <_free_r>
 800de26:	2000      	movs	r0, #0
 800de28:	6360      	str	r0, [r4, #52]	; 0x34
 800de2a:	e7c1      	b.n	800ddb0 <__sflush_r+0x1c>
 800de2c:	6a21      	ldr	r1, [r4, #32]
 800de2e:	2301      	movs	r3, #1
 800de30:	4628      	mov	r0, r5
 800de32:	47b0      	blx	r6
 800de34:	1c41      	adds	r1, r0, #1
 800de36:	d1c7      	bne.n	800ddc8 <__sflush_r+0x34>
 800de38:	682b      	ldr	r3, [r5, #0]
 800de3a:	2b00      	cmp	r3, #0
 800de3c:	d0c4      	beq.n	800ddc8 <__sflush_r+0x34>
 800de3e:	2b1d      	cmp	r3, #29
 800de40:	d001      	beq.n	800de46 <__sflush_r+0xb2>
 800de42:	2b16      	cmp	r3, #22
 800de44:	d101      	bne.n	800de4a <__sflush_r+0xb6>
 800de46:	602f      	str	r7, [r5, #0]
 800de48:	e7b1      	b.n	800ddae <__sflush_r+0x1a>
 800de4a:	89a3      	ldrh	r3, [r4, #12]
 800de4c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800de50:	81a3      	strh	r3, [r4, #12]
 800de52:	e7ad      	b.n	800ddb0 <__sflush_r+0x1c>
 800de54:	690f      	ldr	r7, [r1, #16]
 800de56:	2f00      	cmp	r7, #0
 800de58:	d0a9      	beq.n	800ddae <__sflush_r+0x1a>
 800de5a:	0793      	lsls	r3, r2, #30
 800de5c:	680e      	ldr	r6, [r1, #0]
 800de5e:	bf08      	it	eq
 800de60:	694b      	ldreq	r3, [r1, #20]
 800de62:	600f      	str	r7, [r1, #0]
 800de64:	bf18      	it	ne
 800de66:	2300      	movne	r3, #0
 800de68:	eba6 0807 	sub.w	r8, r6, r7
 800de6c:	608b      	str	r3, [r1, #8]
 800de6e:	f1b8 0f00 	cmp.w	r8, #0
 800de72:	dd9c      	ble.n	800ddae <__sflush_r+0x1a>
 800de74:	6a21      	ldr	r1, [r4, #32]
 800de76:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800de78:	4643      	mov	r3, r8
 800de7a:	463a      	mov	r2, r7
 800de7c:	4628      	mov	r0, r5
 800de7e:	47b0      	blx	r6
 800de80:	2800      	cmp	r0, #0
 800de82:	dc06      	bgt.n	800de92 <__sflush_r+0xfe>
 800de84:	89a3      	ldrh	r3, [r4, #12]
 800de86:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800de8a:	81a3      	strh	r3, [r4, #12]
 800de8c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800de90:	e78e      	b.n	800ddb0 <__sflush_r+0x1c>
 800de92:	4407      	add	r7, r0
 800de94:	eba8 0800 	sub.w	r8, r8, r0
 800de98:	e7e9      	b.n	800de6e <__sflush_r+0xda>
 800de9a:	bf00      	nop
 800de9c:	20400001 	.word	0x20400001

0800dea0 <_fflush_r>:
 800dea0:	b538      	push	{r3, r4, r5, lr}
 800dea2:	690b      	ldr	r3, [r1, #16]
 800dea4:	4605      	mov	r5, r0
 800dea6:	460c      	mov	r4, r1
 800dea8:	b913      	cbnz	r3, 800deb0 <_fflush_r+0x10>
 800deaa:	2500      	movs	r5, #0
 800deac:	4628      	mov	r0, r5
 800deae:	bd38      	pop	{r3, r4, r5, pc}
 800deb0:	b118      	cbz	r0, 800deba <_fflush_r+0x1a>
 800deb2:	6983      	ldr	r3, [r0, #24]
 800deb4:	b90b      	cbnz	r3, 800deba <_fflush_r+0x1a>
 800deb6:	f000 f887 	bl	800dfc8 <__sinit>
 800deba:	4b14      	ldr	r3, [pc, #80]	; (800df0c <_fflush_r+0x6c>)
 800debc:	429c      	cmp	r4, r3
 800debe:	d11b      	bne.n	800def8 <_fflush_r+0x58>
 800dec0:	686c      	ldr	r4, [r5, #4]
 800dec2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800dec6:	2b00      	cmp	r3, #0
 800dec8:	d0ef      	beq.n	800deaa <_fflush_r+0xa>
 800deca:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800decc:	07d0      	lsls	r0, r2, #31
 800dece:	d404      	bmi.n	800deda <_fflush_r+0x3a>
 800ded0:	0599      	lsls	r1, r3, #22
 800ded2:	d402      	bmi.n	800deda <_fflush_r+0x3a>
 800ded4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ded6:	f000 f915 	bl	800e104 <__retarget_lock_acquire_recursive>
 800deda:	4628      	mov	r0, r5
 800dedc:	4621      	mov	r1, r4
 800dede:	f7ff ff59 	bl	800dd94 <__sflush_r>
 800dee2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800dee4:	07da      	lsls	r2, r3, #31
 800dee6:	4605      	mov	r5, r0
 800dee8:	d4e0      	bmi.n	800deac <_fflush_r+0xc>
 800deea:	89a3      	ldrh	r3, [r4, #12]
 800deec:	059b      	lsls	r3, r3, #22
 800deee:	d4dd      	bmi.n	800deac <_fflush_r+0xc>
 800def0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800def2:	f000 f908 	bl	800e106 <__retarget_lock_release_recursive>
 800def6:	e7d9      	b.n	800deac <_fflush_r+0xc>
 800def8:	4b05      	ldr	r3, [pc, #20]	; (800df10 <_fflush_r+0x70>)
 800defa:	429c      	cmp	r4, r3
 800defc:	d101      	bne.n	800df02 <_fflush_r+0x62>
 800defe:	68ac      	ldr	r4, [r5, #8]
 800df00:	e7df      	b.n	800dec2 <_fflush_r+0x22>
 800df02:	4b04      	ldr	r3, [pc, #16]	; (800df14 <_fflush_r+0x74>)
 800df04:	429c      	cmp	r4, r3
 800df06:	bf08      	it	eq
 800df08:	68ec      	ldreq	r4, [r5, #12]
 800df0a:	e7da      	b.n	800dec2 <_fflush_r+0x22>
 800df0c:	08013fcc 	.word	0x08013fcc
 800df10:	08013fec 	.word	0x08013fec
 800df14:	08013fac 	.word	0x08013fac

0800df18 <std>:
 800df18:	2300      	movs	r3, #0
 800df1a:	b510      	push	{r4, lr}
 800df1c:	4604      	mov	r4, r0
 800df1e:	e9c0 3300 	strd	r3, r3, [r0]
 800df22:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800df26:	6083      	str	r3, [r0, #8]
 800df28:	8181      	strh	r1, [r0, #12]
 800df2a:	6643      	str	r3, [r0, #100]	; 0x64
 800df2c:	81c2      	strh	r2, [r0, #14]
 800df2e:	6183      	str	r3, [r0, #24]
 800df30:	4619      	mov	r1, r3
 800df32:	2208      	movs	r2, #8
 800df34:	305c      	adds	r0, #92	; 0x5c
 800df36:	f7fd fb67 	bl	800b608 <memset>
 800df3a:	4b05      	ldr	r3, [pc, #20]	; (800df50 <std+0x38>)
 800df3c:	6263      	str	r3, [r4, #36]	; 0x24
 800df3e:	4b05      	ldr	r3, [pc, #20]	; (800df54 <std+0x3c>)
 800df40:	62a3      	str	r3, [r4, #40]	; 0x28
 800df42:	4b05      	ldr	r3, [pc, #20]	; (800df58 <std+0x40>)
 800df44:	62e3      	str	r3, [r4, #44]	; 0x2c
 800df46:	4b05      	ldr	r3, [pc, #20]	; (800df5c <std+0x44>)
 800df48:	6224      	str	r4, [r4, #32]
 800df4a:	6323      	str	r3, [r4, #48]	; 0x30
 800df4c:	bd10      	pop	{r4, pc}
 800df4e:	bf00      	nop
 800df50:	0800e26d 	.word	0x0800e26d
 800df54:	0800e28f 	.word	0x0800e28f
 800df58:	0800e2c7 	.word	0x0800e2c7
 800df5c:	0800e2eb 	.word	0x0800e2eb

0800df60 <_cleanup_r>:
 800df60:	4901      	ldr	r1, [pc, #4]	; (800df68 <_cleanup_r+0x8>)
 800df62:	f000 b8af 	b.w	800e0c4 <_fwalk_reent>
 800df66:	bf00      	nop
 800df68:	0800dea1 	.word	0x0800dea1

0800df6c <__sfmoreglue>:
 800df6c:	b570      	push	{r4, r5, r6, lr}
 800df6e:	2268      	movs	r2, #104	; 0x68
 800df70:	1e4d      	subs	r5, r1, #1
 800df72:	4355      	muls	r5, r2
 800df74:	460e      	mov	r6, r1
 800df76:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800df7a:	f7ff fa65 	bl	800d448 <_malloc_r>
 800df7e:	4604      	mov	r4, r0
 800df80:	b140      	cbz	r0, 800df94 <__sfmoreglue+0x28>
 800df82:	2100      	movs	r1, #0
 800df84:	e9c0 1600 	strd	r1, r6, [r0]
 800df88:	300c      	adds	r0, #12
 800df8a:	60a0      	str	r0, [r4, #8]
 800df8c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800df90:	f7fd fb3a 	bl	800b608 <memset>
 800df94:	4620      	mov	r0, r4
 800df96:	bd70      	pop	{r4, r5, r6, pc}

0800df98 <__sfp_lock_acquire>:
 800df98:	4801      	ldr	r0, [pc, #4]	; (800dfa0 <__sfp_lock_acquire+0x8>)
 800df9a:	f000 b8b3 	b.w	800e104 <__retarget_lock_acquire_recursive>
 800df9e:	bf00      	nop
 800dfa0:	20008b7d 	.word	0x20008b7d

0800dfa4 <__sfp_lock_release>:
 800dfa4:	4801      	ldr	r0, [pc, #4]	; (800dfac <__sfp_lock_release+0x8>)
 800dfa6:	f000 b8ae 	b.w	800e106 <__retarget_lock_release_recursive>
 800dfaa:	bf00      	nop
 800dfac:	20008b7d 	.word	0x20008b7d

0800dfb0 <__sinit_lock_acquire>:
 800dfb0:	4801      	ldr	r0, [pc, #4]	; (800dfb8 <__sinit_lock_acquire+0x8>)
 800dfb2:	f000 b8a7 	b.w	800e104 <__retarget_lock_acquire_recursive>
 800dfb6:	bf00      	nop
 800dfb8:	20008b7e 	.word	0x20008b7e

0800dfbc <__sinit_lock_release>:
 800dfbc:	4801      	ldr	r0, [pc, #4]	; (800dfc4 <__sinit_lock_release+0x8>)
 800dfbe:	f000 b8a2 	b.w	800e106 <__retarget_lock_release_recursive>
 800dfc2:	bf00      	nop
 800dfc4:	20008b7e 	.word	0x20008b7e

0800dfc8 <__sinit>:
 800dfc8:	b510      	push	{r4, lr}
 800dfca:	4604      	mov	r4, r0
 800dfcc:	f7ff fff0 	bl	800dfb0 <__sinit_lock_acquire>
 800dfd0:	69a3      	ldr	r3, [r4, #24]
 800dfd2:	b11b      	cbz	r3, 800dfdc <__sinit+0x14>
 800dfd4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800dfd8:	f7ff bff0 	b.w	800dfbc <__sinit_lock_release>
 800dfdc:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800dfe0:	6523      	str	r3, [r4, #80]	; 0x50
 800dfe2:	4b13      	ldr	r3, [pc, #76]	; (800e030 <__sinit+0x68>)
 800dfe4:	4a13      	ldr	r2, [pc, #76]	; (800e034 <__sinit+0x6c>)
 800dfe6:	681b      	ldr	r3, [r3, #0]
 800dfe8:	62a2      	str	r2, [r4, #40]	; 0x28
 800dfea:	42a3      	cmp	r3, r4
 800dfec:	bf04      	itt	eq
 800dfee:	2301      	moveq	r3, #1
 800dff0:	61a3      	streq	r3, [r4, #24]
 800dff2:	4620      	mov	r0, r4
 800dff4:	f000 f820 	bl	800e038 <__sfp>
 800dff8:	6060      	str	r0, [r4, #4]
 800dffa:	4620      	mov	r0, r4
 800dffc:	f000 f81c 	bl	800e038 <__sfp>
 800e000:	60a0      	str	r0, [r4, #8]
 800e002:	4620      	mov	r0, r4
 800e004:	f000 f818 	bl	800e038 <__sfp>
 800e008:	2200      	movs	r2, #0
 800e00a:	60e0      	str	r0, [r4, #12]
 800e00c:	2104      	movs	r1, #4
 800e00e:	6860      	ldr	r0, [r4, #4]
 800e010:	f7ff ff82 	bl	800df18 <std>
 800e014:	68a0      	ldr	r0, [r4, #8]
 800e016:	2201      	movs	r2, #1
 800e018:	2109      	movs	r1, #9
 800e01a:	f7ff ff7d 	bl	800df18 <std>
 800e01e:	68e0      	ldr	r0, [r4, #12]
 800e020:	2202      	movs	r2, #2
 800e022:	2112      	movs	r1, #18
 800e024:	f7ff ff78 	bl	800df18 <std>
 800e028:	2301      	movs	r3, #1
 800e02a:	61a3      	str	r3, [r4, #24]
 800e02c:	e7d2      	b.n	800dfd4 <__sinit+0xc>
 800e02e:	bf00      	nop
 800e030:	08013c30 	.word	0x08013c30
 800e034:	0800df61 	.word	0x0800df61

0800e038 <__sfp>:
 800e038:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e03a:	4607      	mov	r7, r0
 800e03c:	f7ff ffac 	bl	800df98 <__sfp_lock_acquire>
 800e040:	4b1e      	ldr	r3, [pc, #120]	; (800e0bc <__sfp+0x84>)
 800e042:	681e      	ldr	r6, [r3, #0]
 800e044:	69b3      	ldr	r3, [r6, #24]
 800e046:	b913      	cbnz	r3, 800e04e <__sfp+0x16>
 800e048:	4630      	mov	r0, r6
 800e04a:	f7ff ffbd 	bl	800dfc8 <__sinit>
 800e04e:	3648      	adds	r6, #72	; 0x48
 800e050:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800e054:	3b01      	subs	r3, #1
 800e056:	d503      	bpl.n	800e060 <__sfp+0x28>
 800e058:	6833      	ldr	r3, [r6, #0]
 800e05a:	b30b      	cbz	r3, 800e0a0 <__sfp+0x68>
 800e05c:	6836      	ldr	r6, [r6, #0]
 800e05e:	e7f7      	b.n	800e050 <__sfp+0x18>
 800e060:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800e064:	b9d5      	cbnz	r5, 800e09c <__sfp+0x64>
 800e066:	4b16      	ldr	r3, [pc, #88]	; (800e0c0 <__sfp+0x88>)
 800e068:	60e3      	str	r3, [r4, #12]
 800e06a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800e06e:	6665      	str	r5, [r4, #100]	; 0x64
 800e070:	f000 f847 	bl	800e102 <__retarget_lock_init_recursive>
 800e074:	f7ff ff96 	bl	800dfa4 <__sfp_lock_release>
 800e078:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800e07c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800e080:	6025      	str	r5, [r4, #0]
 800e082:	61a5      	str	r5, [r4, #24]
 800e084:	2208      	movs	r2, #8
 800e086:	4629      	mov	r1, r5
 800e088:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800e08c:	f7fd fabc 	bl	800b608 <memset>
 800e090:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800e094:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800e098:	4620      	mov	r0, r4
 800e09a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e09c:	3468      	adds	r4, #104	; 0x68
 800e09e:	e7d9      	b.n	800e054 <__sfp+0x1c>
 800e0a0:	2104      	movs	r1, #4
 800e0a2:	4638      	mov	r0, r7
 800e0a4:	f7ff ff62 	bl	800df6c <__sfmoreglue>
 800e0a8:	4604      	mov	r4, r0
 800e0aa:	6030      	str	r0, [r6, #0]
 800e0ac:	2800      	cmp	r0, #0
 800e0ae:	d1d5      	bne.n	800e05c <__sfp+0x24>
 800e0b0:	f7ff ff78 	bl	800dfa4 <__sfp_lock_release>
 800e0b4:	230c      	movs	r3, #12
 800e0b6:	603b      	str	r3, [r7, #0]
 800e0b8:	e7ee      	b.n	800e098 <__sfp+0x60>
 800e0ba:	bf00      	nop
 800e0bc:	08013c30 	.word	0x08013c30
 800e0c0:	ffff0001 	.word	0xffff0001

0800e0c4 <_fwalk_reent>:
 800e0c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e0c8:	4606      	mov	r6, r0
 800e0ca:	4688      	mov	r8, r1
 800e0cc:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800e0d0:	2700      	movs	r7, #0
 800e0d2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800e0d6:	f1b9 0901 	subs.w	r9, r9, #1
 800e0da:	d505      	bpl.n	800e0e8 <_fwalk_reent+0x24>
 800e0dc:	6824      	ldr	r4, [r4, #0]
 800e0de:	2c00      	cmp	r4, #0
 800e0e0:	d1f7      	bne.n	800e0d2 <_fwalk_reent+0xe>
 800e0e2:	4638      	mov	r0, r7
 800e0e4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e0e8:	89ab      	ldrh	r3, [r5, #12]
 800e0ea:	2b01      	cmp	r3, #1
 800e0ec:	d907      	bls.n	800e0fe <_fwalk_reent+0x3a>
 800e0ee:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800e0f2:	3301      	adds	r3, #1
 800e0f4:	d003      	beq.n	800e0fe <_fwalk_reent+0x3a>
 800e0f6:	4629      	mov	r1, r5
 800e0f8:	4630      	mov	r0, r6
 800e0fa:	47c0      	blx	r8
 800e0fc:	4307      	orrs	r7, r0
 800e0fe:	3568      	adds	r5, #104	; 0x68
 800e100:	e7e9      	b.n	800e0d6 <_fwalk_reent+0x12>

0800e102 <__retarget_lock_init_recursive>:
 800e102:	4770      	bx	lr

0800e104 <__retarget_lock_acquire_recursive>:
 800e104:	4770      	bx	lr

0800e106 <__retarget_lock_release_recursive>:
 800e106:	4770      	bx	lr

0800e108 <__swhatbuf_r>:
 800e108:	b570      	push	{r4, r5, r6, lr}
 800e10a:	460e      	mov	r6, r1
 800e10c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e110:	2900      	cmp	r1, #0
 800e112:	b096      	sub	sp, #88	; 0x58
 800e114:	4614      	mov	r4, r2
 800e116:	461d      	mov	r5, r3
 800e118:	da08      	bge.n	800e12c <__swhatbuf_r+0x24>
 800e11a:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800e11e:	2200      	movs	r2, #0
 800e120:	602a      	str	r2, [r5, #0]
 800e122:	061a      	lsls	r2, r3, #24
 800e124:	d410      	bmi.n	800e148 <__swhatbuf_r+0x40>
 800e126:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e12a:	e00e      	b.n	800e14a <__swhatbuf_r+0x42>
 800e12c:	466a      	mov	r2, sp
 800e12e:	f000 f903 	bl	800e338 <_fstat_r>
 800e132:	2800      	cmp	r0, #0
 800e134:	dbf1      	blt.n	800e11a <__swhatbuf_r+0x12>
 800e136:	9a01      	ldr	r2, [sp, #4]
 800e138:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800e13c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800e140:	425a      	negs	r2, r3
 800e142:	415a      	adcs	r2, r3
 800e144:	602a      	str	r2, [r5, #0]
 800e146:	e7ee      	b.n	800e126 <__swhatbuf_r+0x1e>
 800e148:	2340      	movs	r3, #64	; 0x40
 800e14a:	2000      	movs	r0, #0
 800e14c:	6023      	str	r3, [r4, #0]
 800e14e:	b016      	add	sp, #88	; 0x58
 800e150:	bd70      	pop	{r4, r5, r6, pc}
	...

0800e154 <__smakebuf_r>:
 800e154:	898b      	ldrh	r3, [r1, #12]
 800e156:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800e158:	079d      	lsls	r5, r3, #30
 800e15a:	4606      	mov	r6, r0
 800e15c:	460c      	mov	r4, r1
 800e15e:	d507      	bpl.n	800e170 <__smakebuf_r+0x1c>
 800e160:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800e164:	6023      	str	r3, [r4, #0]
 800e166:	6123      	str	r3, [r4, #16]
 800e168:	2301      	movs	r3, #1
 800e16a:	6163      	str	r3, [r4, #20]
 800e16c:	b002      	add	sp, #8
 800e16e:	bd70      	pop	{r4, r5, r6, pc}
 800e170:	ab01      	add	r3, sp, #4
 800e172:	466a      	mov	r2, sp
 800e174:	f7ff ffc8 	bl	800e108 <__swhatbuf_r>
 800e178:	9900      	ldr	r1, [sp, #0]
 800e17a:	4605      	mov	r5, r0
 800e17c:	4630      	mov	r0, r6
 800e17e:	f7ff f963 	bl	800d448 <_malloc_r>
 800e182:	b948      	cbnz	r0, 800e198 <__smakebuf_r+0x44>
 800e184:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e188:	059a      	lsls	r2, r3, #22
 800e18a:	d4ef      	bmi.n	800e16c <__smakebuf_r+0x18>
 800e18c:	f023 0303 	bic.w	r3, r3, #3
 800e190:	f043 0302 	orr.w	r3, r3, #2
 800e194:	81a3      	strh	r3, [r4, #12]
 800e196:	e7e3      	b.n	800e160 <__smakebuf_r+0xc>
 800e198:	4b0d      	ldr	r3, [pc, #52]	; (800e1d0 <__smakebuf_r+0x7c>)
 800e19a:	62b3      	str	r3, [r6, #40]	; 0x28
 800e19c:	89a3      	ldrh	r3, [r4, #12]
 800e19e:	6020      	str	r0, [r4, #0]
 800e1a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e1a4:	81a3      	strh	r3, [r4, #12]
 800e1a6:	9b00      	ldr	r3, [sp, #0]
 800e1a8:	6163      	str	r3, [r4, #20]
 800e1aa:	9b01      	ldr	r3, [sp, #4]
 800e1ac:	6120      	str	r0, [r4, #16]
 800e1ae:	b15b      	cbz	r3, 800e1c8 <__smakebuf_r+0x74>
 800e1b0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e1b4:	4630      	mov	r0, r6
 800e1b6:	f000 f8d1 	bl	800e35c <_isatty_r>
 800e1ba:	b128      	cbz	r0, 800e1c8 <__smakebuf_r+0x74>
 800e1bc:	89a3      	ldrh	r3, [r4, #12]
 800e1be:	f023 0303 	bic.w	r3, r3, #3
 800e1c2:	f043 0301 	orr.w	r3, r3, #1
 800e1c6:	81a3      	strh	r3, [r4, #12]
 800e1c8:	89a0      	ldrh	r0, [r4, #12]
 800e1ca:	4305      	orrs	r5, r0
 800e1cc:	81a5      	strh	r5, [r4, #12]
 800e1ce:	e7cd      	b.n	800e16c <__smakebuf_r+0x18>
 800e1d0:	0800df61 	.word	0x0800df61

0800e1d4 <_malloc_usable_size_r>:
 800e1d4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e1d8:	1f18      	subs	r0, r3, #4
 800e1da:	2b00      	cmp	r3, #0
 800e1dc:	bfbc      	itt	lt
 800e1de:	580b      	ldrlt	r3, [r1, r0]
 800e1e0:	18c0      	addlt	r0, r0, r3
 800e1e2:	4770      	bx	lr

0800e1e4 <_raise_r>:
 800e1e4:	291f      	cmp	r1, #31
 800e1e6:	b538      	push	{r3, r4, r5, lr}
 800e1e8:	4604      	mov	r4, r0
 800e1ea:	460d      	mov	r5, r1
 800e1ec:	d904      	bls.n	800e1f8 <_raise_r+0x14>
 800e1ee:	2316      	movs	r3, #22
 800e1f0:	6003      	str	r3, [r0, #0]
 800e1f2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800e1f6:	bd38      	pop	{r3, r4, r5, pc}
 800e1f8:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800e1fa:	b112      	cbz	r2, 800e202 <_raise_r+0x1e>
 800e1fc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800e200:	b94b      	cbnz	r3, 800e216 <_raise_r+0x32>
 800e202:	4620      	mov	r0, r4
 800e204:	f000 f830 	bl	800e268 <_getpid_r>
 800e208:	462a      	mov	r2, r5
 800e20a:	4601      	mov	r1, r0
 800e20c:	4620      	mov	r0, r4
 800e20e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e212:	f000 b817 	b.w	800e244 <_kill_r>
 800e216:	2b01      	cmp	r3, #1
 800e218:	d00a      	beq.n	800e230 <_raise_r+0x4c>
 800e21a:	1c59      	adds	r1, r3, #1
 800e21c:	d103      	bne.n	800e226 <_raise_r+0x42>
 800e21e:	2316      	movs	r3, #22
 800e220:	6003      	str	r3, [r0, #0]
 800e222:	2001      	movs	r0, #1
 800e224:	e7e7      	b.n	800e1f6 <_raise_r+0x12>
 800e226:	2400      	movs	r4, #0
 800e228:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800e22c:	4628      	mov	r0, r5
 800e22e:	4798      	blx	r3
 800e230:	2000      	movs	r0, #0
 800e232:	e7e0      	b.n	800e1f6 <_raise_r+0x12>

0800e234 <raise>:
 800e234:	4b02      	ldr	r3, [pc, #8]	; (800e240 <raise+0xc>)
 800e236:	4601      	mov	r1, r0
 800e238:	6818      	ldr	r0, [r3, #0]
 800e23a:	f7ff bfd3 	b.w	800e1e4 <_raise_r>
 800e23e:	bf00      	nop
 800e240:	20000014 	.word	0x20000014

0800e244 <_kill_r>:
 800e244:	b538      	push	{r3, r4, r5, lr}
 800e246:	4d07      	ldr	r5, [pc, #28]	; (800e264 <_kill_r+0x20>)
 800e248:	2300      	movs	r3, #0
 800e24a:	4604      	mov	r4, r0
 800e24c:	4608      	mov	r0, r1
 800e24e:	4611      	mov	r1, r2
 800e250:	602b      	str	r3, [r5, #0]
 800e252:	f7f6 fb49 	bl	80048e8 <_kill>
 800e256:	1c43      	adds	r3, r0, #1
 800e258:	d102      	bne.n	800e260 <_kill_r+0x1c>
 800e25a:	682b      	ldr	r3, [r5, #0]
 800e25c:	b103      	cbz	r3, 800e260 <_kill_r+0x1c>
 800e25e:	6023      	str	r3, [r4, #0]
 800e260:	bd38      	pop	{r3, r4, r5, pc}
 800e262:	bf00      	nop
 800e264:	20008b78 	.word	0x20008b78

0800e268 <_getpid_r>:
 800e268:	f7f6 bb36 	b.w	80048d8 <_getpid>

0800e26c <__sread>:
 800e26c:	b510      	push	{r4, lr}
 800e26e:	460c      	mov	r4, r1
 800e270:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e274:	f000 f894 	bl	800e3a0 <_read_r>
 800e278:	2800      	cmp	r0, #0
 800e27a:	bfab      	itete	ge
 800e27c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800e27e:	89a3      	ldrhlt	r3, [r4, #12]
 800e280:	181b      	addge	r3, r3, r0
 800e282:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800e286:	bfac      	ite	ge
 800e288:	6563      	strge	r3, [r4, #84]	; 0x54
 800e28a:	81a3      	strhlt	r3, [r4, #12]
 800e28c:	bd10      	pop	{r4, pc}

0800e28e <__swrite>:
 800e28e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e292:	461f      	mov	r7, r3
 800e294:	898b      	ldrh	r3, [r1, #12]
 800e296:	05db      	lsls	r3, r3, #23
 800e298:	4605      	mov	r5, r0
 800e29a:	460c      	mov	r4, r1
 800e29c:	4616      	mov	r6, r2
 800e29e:	d505      	bpl.n	800e2ac <__swrite+0x1e>
 800e2a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e2a4:	2302      	movs	r3, #2
 800e2a6:	2200      	movs	r2, #0
 800e2a8:	f000 f868 	bl	800e37c <_lseek_r>
 800e2ac:	89a3      	ldrh	r3, [r4, #12]
 800e2ae:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e2b2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800e2b6:	81a3      	strh	r3, [r4, #12]
 800e2b8:	4632      	mov	r2, r6
 800e2ba:	463b      	mov	r3, r7
 800e2bc:	4628      	mov	r0, r5
 800e2be:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e2c2:	f000 b817 	b.w	800e2f4 <_write_r>

0800e2c6 <__sseek>:
 800e2c6:	b510      	push	{r4, lr}
 800e2c8:	460c      	mov	r4, r1
 800e2ca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e2ce:	f000 f855 	bl	800e37c <_lseek_r>
 800e2d2:	1c43      	adds	r3, r0, #1
 800e2d4:	89a3      	ldrh	r3, [r4, #12]
 800e2d6:	bf15      	itete	ne
 800e2d8:	6560      	strne	r0, [r4, #84]	; 0x54
 800e2da:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800e2de:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800e2e2:	81a3      	strheq	r3, [r4, #12]
 800e2e4:	bf18      	it	ne
 800e2e6:	81a3      	strhne	r3, [r4, #12]
 800e2e8:	bd10      	pop	{r4, pc}

0800e2ea <__sclose>:
 800e2ea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e2ee:	f000 b813 	b.w	800e318 <_close_r>
	...

0800e2f4 <_write_r>:
 800e2f4:	b538      	push	{r3, r4, r5, lr}
 800e2f6:	4d07      	ldr	r5, [pc, #28]	; (800e314 <_write_r+0x20>)
 800e2f8:	4604      	mov	r4, r0
 800e2fa:	4608      	mov	r0, r1
 800e2fc:	4611      	mov	r1, r2
 800e2fe:	2200      	movs	r2, #0
 800e300:	602a      	str	r2, [r5, #0]
 800e302:	461a      	mov	r2, r3
 800e304:	f7f6 fb27 	bl	8004956 <_write>
 800e308:	1c43      	adds	r3, r0, #1
 800e30a:	d102      	bne.n	800e312 <_write_r+0x1e>
 800e30c:	682b      	ldr	r3, [r5, #0]
 800e30e:	b103      	cbz	r3, 800e312 <_write_r+0x1e>
 800e310:	6023      	str	r3, [r4, #0]
 800e312:	bd38      	pop	{r3, r4, r5, pc}
 800e314:	20008b78 	.word	0x20008b78

0800e318 <_close_r>:
 800e318:	b538      	push	{r3, r4, r5, lr}
 800e31a:	4d06      	ldr	r5, [pc, #24]	; (800e334 <_close_r+0x1c>)
 800e31c:	2300      	movs	r3, #0
 800e31e:	4604      	mov	r4, r0
 800e320:	4608      	mov	r0, r1
 800e322:	602b      	str	r3, [r5, #0]
 800e324:	f7f6 fb33 	bl	800498e <_close>
 800e328:	1c43      	adds	r3, r0, #1
 800e32a:	d102      	bne.n	800e332 <_close_r+0x1a>
 800e32c:	682b      	ldr	r3, [r5, #0]
 800e32e:	b103      	cbz	r3, 800e332 <_close_r+0x1a>
 800e330:	6023      	str	r3, [r4, #0]
 800e332:	bd38      	pop	{r3, r4, r5, pc}
 800e334:	20008b78 	.word	0x20008b78

0800e338 <_fstat_r>:
 800e338:	b538      	push	{r3, r4, r5, lr}
 800e33a:	4d07      	ldr	r5, [pc, #28]	; (800e358 <_fstat_r+0x20>)
 800e33c:	2300      	movs	r3, #0
 800e33e:	4604      	mov	r4, r0
 800e340:	4608      	mov	r0, r1
 800e342:	4611      	mov	r1, r2
 800e344:	602b      	str	r3, [r5, #0]
 800e346:	f7f6 fb2e 	bl	80049a6 <_fstat>
 800e34a:	1c43      	adds	r3, r0, #1
 800e34c:	d102      	bne.n	800e354 <_fstat_r+0x1c>
 800e34e:	682b      	ldr	r3, [r5, #0]
 800e350:	b103      	cbz	r3, 800e354 <_fstat_r+0x1c>
 800e352:	6023      	str	r3, [r4, #0]
 800e354:	bd38      	pop	{r3, r4, r5, pc}
 800e356:	bf00      	nop
 800e358:	20008b78 	.word	0x20008b78

0800e35c <_isatty_r>:
 800e35c:	b538      	push	{r3, r4, r5, lr}
 800e35e:	4d06      	ldr	r5, [pc, #24]	; (800e378 <_isatty_r+0x1c>)
 800e360:	2300      	movs	r3, #0
 800e362:	4604      	mov	r4, r0
 800e364:	4608      	mov	r0, r1
 800e366:	602b      	str	r3, [r5, #0]
 800e368:	f7f6 fb2d 	bl	80049c6 <_isatty>
 800e36c:	1c43      	adds	r3, r0, #1
 800e36e:	d102      	bne.n	800e376 <_isatty_r+0x1a>
 800e370:	682b      	ldr	r3, [r5, #0]
 800e372:	b103      	cbz	r3, 800e376 <_isatty_r+0x1a>
 800e374:	6023      	str	r3, [r4, #0]
 800e376:	bd38      	pop	{r3, r4, r5, pc}
 800e378:	20008b78 	.word	0x20008b78

0800e37c <_lseek_r>:
 800e37c:	b538      	push	{r3, r4, r5, lr}
 800e37e:	4d07      	ldr	r5, [pc, #28]	; (800e39c <_lseek_r+0x20>)
 800e380:	4604      	mov	r4, r0
 800e382:	4608      	mov	r0, r1
 800e384:	4611      	mov	r1, r2
 800e386:	2200      	movs	r2, #0
 800e388:	602a      	str	r2, [r5, #0]
 800e38a:	461a      	mov	r2, r3
 800e38c:	f7f6 fb26 	bl	80049dc <_lseek>
 800e390:	1c43      	adds	r3, r0, #1
 800e392:	d102      	bne.n	800e39a <_lseek_r+0x1e>
 800e394:	682b      	ldr	r3, [r5, #0]
 800e396:	b103      	cbz	r3, 800e39a <_lseek_r+0x1e>
 800e398:	6023      	str	r3, [r4, #0]
 800e39a:	bd38      	pop	{r3, r4, r5, pc}
 800e39c:	20008b78 	.word	0x20008b78

0800e3a0 <_read_r>:
 800e3a0:	b538      	push	{r3, r4, r5, lr}
 800e3a2:	4d07      	ldr	r5, [pc, #28]	; (800e3c0 <_read_r+0x20>)
 800e3a4:	4604      	mov	r4, r0
 800e3a6:	4608      	mov	r0, r1
 800e3a8:	4611      	mov	r1, r2
 800e3aa:	2200      	movs	r2, #0
 800e3ac:	602a      	str	r2, [r5, #0]
 800e3ae:	461a      	mov	r2, r3
 800e3b0:	f7f6 fab4 	bl	800491c <_read>
 800e3b4:	1c43      	adds	r3, r0, #1
 800e3b6:	d102      	bne.n	800e3be <_read_r+0x1e>
 800e3b8:	682b      	ldr	r3, [r5, #0]
 800e3ba:	b103      	cbz	r3, 800e3be <_read_r+0x1e>
 800e3bc:	6023      	str	r3, [r4, #0]
 800e3be:	bd38      	pop	{r3, r4, r5, pc}
 800e3c0:	20008b78 	.word	0x20008b78

0800e3c4 <sqrt>:
 800e3c4:	b538      	push	{r3, r4, r5, lr}
 800e3c6:	ed2d 8b02 	vpush	{d8}
 800e3ca:	ec55 4b10 	vmov	r4, r5, d0
 800e3ce:	f000 f825 	bl	800e41c <__ieee754_sqrt>
 800e3d2:	4622      	mov	r2, r4
 800e3d4:	462b      	mov	r3, r5
 800e3d6:	4620      	mov	r0, r4
 800e3d8:	4629      	mov	r1, r5
 800e3da:	eeb0 8a40 	vmov.f32	s16, s0
 800e3de:	eef0 8a60 	vmov.f32	s17, s1
 800e3e2:	f7f2 fba3 	bl	8000b2c <__aeabi_dcmpun>
 800e3e6:	b990      	cbnz	r0, 800e40e <sqrt+0x4a>
 800e3e8:	2200      	movs	r2, #0
 800e3ea:	2300      	movs	r3, #0
 800e3ec:	4620      	mov	r0, r4
 800e3ee:	4629      	mov	r1, r5
 800e3f0:	f7f2 fb74 	bl	8000adc <__aeabi_dcmplt>
 800e3f4:	b158      	cbz	r0, 800e40e <sqrt+0x4a>
 800e3f6:	f7fd f8cf 	bl	800b598 <__errno>
 800e3fa:	2321      	movs	r3, #33	; 0x21
 800e3fc:	6003      	str	r3, [r0, #0]
 800e3fe:	2200      	movs	r2, #0
 800e400:	2300      	movs	r3, #0
 800e402:	4610      	mov	r0, r2
 800e404:	4619      	mov	r1, r3
 800e406:	f7f2 fa21 	bl	800084c <__aeabi_ddiv>
 800e40a:	ec41 0b18 	vmov	d8, r0, r1
 800e40e:	eeb0 0a48 	vmov.f32	s0, s16
 800e412:	eef0 0a68 	vmov.f32	s1, s17
 800e416:	ecbd 8b02 	vpop	{d8}
 800e41a:	bd38      	pop	{r3, r4, r5, pc}

0800e41c <__ieee754_sqrt>:
 800e41c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e420:	ec55 4b10 	vmov	r4, r5, d0
 800e424:	4e55      	ldr	r6, [pc, #340]	; (800e57c <__ieee754_sqrt+0x160>)
 800e426:	43ae      	bics	r6, r5
 800e428:	ee10 0a10 	vmov	r0, s0
 800e42c:	ee10 3a10 	vmov	r3, s0
 800e430:	462a      	mov	r2, r5
 800e432:	4629      	mov	r1, r5
 800e434:	d110      	bne.n	800e458 <__ieee754_sqrt+0x3c>
 800e436:	ee10 2a10 	vmov	r2, s0
 800e43a:	462b      	mov	r3, r5
 800e43c:	f7f2 f8dc 	bl	80005f8 <__aeabi_dmul>
 800e440:	4602      	mov	r2, r0
 800e442:	460b      	mov	r3, r1
 800e444:	4620      	mov	r0, r4
 800e446:	4629      	mov	r1, r5
 800e448:	f7f1 ff20 	bl	800028c <__adddf3>
 800e44c:	4604      	mov	r4, r0
 800e44e:	460d      	mov	r5, r1
 800e450:	ec45 4b10 	vmov	d0, r4, r5
 800e454:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e458:	2d00      	cmp	r5, #0
 800e45a:	dc10      	bgt.n	800e47e <__ieee754_sqrt+0x62>
 800e45c:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800e460:	4330      	orrs	r0, r6
 800e462:	d0f5      	beq.n	800e450 <__ieee754_sqrt+0x34>
 800e464:	b15d      	cbz	r5, 800e47e <__ieee754_sqrt+0x62>
 800e466:	ee10 2a10 	vmov	r2, s0
 800e46a:	462b      	mov	r3, r5
 800e46c:	ee10 0a10 	vmov	r0, s0
 800e470:	f7f1 ff0a 	bl	8000288 <__aeabi_dsub>
 800e474:	4602      	mov	r2, r0
 800e476:	460b      	mov	r3, r1
 800e478:	f7f2 f9e8 	bl	800084c <__aeabi_ddiv>
 800e47c:	e7e6      	b.n	800e44c <__ieee754_sqrt+0x30>
 800e47e:	1512      	asrs	r2, r2, #20
 800e480:	d074      	beq.n	800e56c <__ieee754_sqrt+0x150>
 800e482:	07d4      	lsls	r4, r2, #31
 800e484:	f3c1 0113 	ubfx	r1, r1, #0, #20
 800e488:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 800e48c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800e490:	bf5e      	ittt	pl
 800e492:	0fda      	lsrpl	r2, r3, #31
 800e494:	005b      	lslpl	r3, r3, #1
 800e496:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 800e49a:	2400      	movs	r4, #0
 800e49c:	0fda      	lsrs	r2, r3, #31
 800e49e:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 800e4a2:	107f      	asrs	r7, r7, #1
 800e4a4:	005b      	lsls	r3, r3, #1
 800e4a6:	2516      	movs	r5, #22
 800e4a8:	4620      	mov	r0, r4
 800e4aa:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800e4ae:	1886      	adds	r6, r0, r2
 800e4b0:	428e      	cmp	r6, r1
 800e4b2:	bfde      	ittt	le
 800e4b4:	1b89      	suble	r1, r1, r6
 800e4b6:	18b0      	addle	r0, r6, r2
 800e4b8:	18a4      	addle	r4, r4, r2
 800e4ba:	0049      	lsls	r1, r1, #1
 800e4bc:	3d01      	subs	r5, #1
 800e4be:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 800e4c2:	ea4f 0252 	mov.w	r2, r2, lsr #1
 800e4c6:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800e4ca:	d1f0      	bne.n	800e4ae <__ieee754_sqrt+0x92>
 800e4cc:	462a      	mov	r2, r5
 800e4ce:	f04f 0e20 	mov.w	lr, #32
 800e4d2:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800e4d6:	4281      	cmp	r1, r0
 800e4d8:	eb06 0c05 	add.w	ip, r6, r5
 800e4dc:	dc02      	bgt.n	800e4e4 <__ieee754_sqrt+0xc8>
 800e4de:	d113      	bne.n	800e508 <__ieee754_sqrt+0xec>
 800e4e0:	459c      	cmp	ip, r3
 800e4e2:	d811      	bhi.n	800e508 <__ieee754_sqrt+0xec>
 800e4e4:	f1bc 0f00 	cmp.w	ip, #0
 800e4e8:	eb0c 0506 	add.w	r5, ip, r6
 800e4ec:	da43      	bge.n	800e576 <__ieee754_sqrt+0x15a>
 800e4ee:	2d00      	cmp	r5, #0
 800e4f0:	db41      	blt.n	800e576 <__ieee754_sqrt+0x15a>
 800e4f2:	f100 0801 	add.w	r8, r0, #1
 800e4f6:	1a09      	subs	r1, r1, r0
 800e4f8:	459c      	cmp	ip, r3
 800e4fa:	bf88      	it	hi
 800e4fc:	f101 31ff 	addhi.w	r1, r1, #4294967295	; 0xffffffff
 800e500:	eba3 030c 	sub.w	r3, r3, ip
 800e504:	4432      	add	r2, r6
 800e506:	4640      	mov	r0, r8
 800e508:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 800e50c:	f1be 0e01 	subs.w	lr, lr, #1
 800e510:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 800e514:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800e518:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800e51c:	d1db      	bne.n	800e4d6 <__ieee754_sqrt+0xba>
 800e51e:	430b      	orrs	r3, r1
 800e520:	d006      	beq.n	800e530 <__ieee754_sqrt+0x114>
 800e522:	1c50      	adds	r0, r2, #1
 800e524:	bf13      	iteet	ne
 800e526:	3201      	addne	r2, #1
 800e528:	3401      	addeq	r4, #1
 800e52a:	4672      	moveq	r2, lr
 800e52c:	f022 0201 	bicne.w	r2, r2, #1
 800e530:	1063      	asrs	r3, r4, #1
 800e532:	0852      	lsrs	r2, r2, #1
 800e534:	07e1      	lsls	r1, r4, #31
 800e536:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800e53a:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800e53e:	bf48      	it	mi
 800e540:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 800e544:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 800e548:	4614      	mov	r4, r2
 800e54a:	e781      	b.n	800e450 <__ieee754_sqrt+0x34>
 800e54c:	0ad9      	lsrs	r1, r3, #11
 800e54e:	3815      	subs	r0, #21
 800e550:	055b      	lsls	r3, r3, #21
 800e552:	2900      	cmp	r1, #0
 800e554:	d0fa      	beq.n	800e54c <__ieee754_sqrt+0x130>
 800e556:	02cd      	lsls	r5, r1, #11
 800e558:	d50a      	bpl.n	800e570 <__ieee754_sqrt+0x154>
 800e55a:	f1c2 0420 	rsb	r4, r2, #32
 800e55e:	fa23 f404 	lsr.w	r4, r3, r4
 800e562:	1e55      	subs	r5, r2, #1
 800e564:	4093      	lsls	r3, r2
 800e566:	4321      	orrs	r1, r4
 800e568:	1b42      	subs	r2, r0, r5
 800e56a:	e78a      	b.n	800e482 <__ieee754_sqrt+0x66>
 800e56c:	4610      	mov	r0, r2
 800e56e:	e7f0      	b.n	800e552 <__ieee754_sqrt+0x136>
 800e570:	0049      	lsls	r1, r1, #1
 800e572:	3201      	adds	r2, #1
 800e574:	e7ef      	b.n	800e556 <__ieee754_sqrt+0x13a>
 800e576:	4680      	mov	r8, r0
 800e578:	e7bd      	b.n	800e4f6 <__ieee754_sqrt+0xda>
 800e57a:	bf00      	nop
 800e57c:	7ff00000 	.word	0x7ff00000

0800e580 <_init>:
 800e580:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e582:	bf00      	nop
 800e584:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e586:	bc08      	pop	{r3}
 800e588:	469e      	mov	lr, r3
 800e58a:	4770      	bx	lr

0800e58c <_fini>:
 800e58c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e58e:	bf00      	nop
 800e590:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e592:	bc08      	pop	{r3}
 800e594:	469e      	mov	lr, r3
 800e596:	4770      	bx	lr
