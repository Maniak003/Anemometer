
Anemometer_G473CBT6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c230  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000046c  0800c410  0800c410  0001c410  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c87c  0800c87c  000201dc  2**0
                  CONTENTS
  4 .ARM          00000008  0800c87c  0800c87c  0001c87c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c884  0800c884  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c884  0800c884  0001c884  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c888  0800c888  0001c888  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  0800c88c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001644  200001dc  0800ca68  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001820  0800ca68  00021820  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001c76e  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000306e  00000000  00000000  0003c97a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001820  00000000  00000000  0003f9e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000016f8  00000000  00000000  00041208  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00024740  00000000  00000000  00042900  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001bdb9  00000000  00000000  00067040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f3a9c  00000000  00000000  00082df9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00176895  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007ac8  00000000  00000000  001768e8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	200001dc 	.word	0x200001dc
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800c3f8 	.word	0x0800c3f8

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	200001e0 	.word	0x200001e0
 800021c:	0800c3f8 	.word	0x0800c3f8

08000220 <strlen>:
 8000220:	4603      	mov	r3, r0
 8000222:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000226:	2a00      	cmp	r2, #0
 8000228:	d1fb      	bne.n	8000222 <strlen+0x2>
 800022a:	1a18      	subs	r0, r3, r0
 800022c:	3801      	subs	r0, #1
 800022e:	4770      	bx	lr

08000230 <memchr>:
 8000230:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000234:	2a10      	cmp	r2, #16
 8000236:	db2b      	blt.n	8000290 <memchr+0x60>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	d008      	beq.n	8000250 <memchr+0x20>
 800023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	428b      	cmp	r3, r1
 8000246:	d02d      	beq.n	80002a4 <memchr+0x74>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	b342      	cbz	r2, 80002a0 <memchr+0x70>
 800024e:	d1f6      	bne.n	800023e <memchr+0xe>
 8000250:	b4f0      	push	{r4, r5, r6, r7}
 8000252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800025a:	f022 0407 	bic.w	r4, r2, #7
 800025e:	f07f 0700 	mvns.w	r7, #0
 8000262:	2300      	movs	r3, #0
 8000264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000268:	3c08      	subs	r4, #8
 800026a:	ea85 0501 	eor.w	r5, r5, r1
 800026e:	ea86 0601 	eor.w	r6, r6, r1
 8000272:	fa85 f547 	uadd8	r5, r5, r7
 8000276:	faa3 f587 	sel	r5, r3, r7
 800027a:	fa86 f647 	uadd8	r6, r6, r7
 800027e:	faa5 f687 	sel	r6, r5, r7
 8000282:	b98e      	cbnz	r6, 80002a8 <memchr+0x78>
 8000284:	d1ee      	bne.n	8000264 <memchr+0x34>
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
 8000288:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800028c:	f002 0207 	and.w	r2, r2, #7
 8000290:	b132      	cbz	r2, 80002a0 <memchr+0x70>
 8000292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000296:	3a01      	subs	r2, #1
 8000298:	ea83 0301 	eor.w	r3, r3, r1
 800029c:	b113      	cbz	r3, 80002a4 <memchr+0x74>
 800029e:	d1f8      	bne.n	8000292 <memchr+0x62>
 80002a0:	2000      	movs	r0, #0
 80002a2:	4770      	bx	lr
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	bf06      	itte	eq
 80002ac:	4635      	moveq	r5, r6
 80002ae:	3803      	subeq	r0, #3
 80002b0:	3807      	subne	r0, #7
 80002b2:	f015 0f01 	tst.w	r5, #1
 80002b6:	d107      	bne.n	80002c8 <memchr+0x98>
 80002b8:	3001      	adds	r0, #1
 80002ba:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002be:	bf02      	ittt	eq
 80002c0:	3001      	addeq	r0, #1
 80002c2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002c6:	3001      	addeq	r0, #1
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ca:	3801      	subs	r0, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	; 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	3c01      	subs	r4, #1
 800040c:	bf28      	it	cs
 800040e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000412:	d2e9      	bcs.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpun>:
 8000b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x10>
 8000b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8a:	d10a      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x20>
 8000b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0001 	mov.w	r0, #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2iz>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d215      	bcs.n	8000bde <__aeabi_d2iz+0x36>
 8000bb2:	d511      	bpl.n	8000bd8 <__aeabi_d2iz+0x30>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d912      	bls.n	8000be4 <__aeabi_d2iz+0x3c>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d105      	bne.n	8000bf0 <__aeabi_d2iz+0x48>
 8000be4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	bf08      	it	eq
 8000bea:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_uldivmod>:
 8000bf8:	b953      	cbnz	r3, 8000c10 <__aeabi_uldivmod+0x18>
 8000bfa:	b94a      	cbnz	r2, 8000c10 <__aeabi_uldivmod+0x18>
 8000bfc:	2900      	cmp	r1, #0
 8000bfe:	bf08      	it	eq
 8000c00:	2800      	cmpeq	r0, #0
 8000c02:	bf1c      	itt	ne
 8000c04:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000c08:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000c0c:	f000 b974 	b.w	8000ef8 <__aeabi_idiv0>
 8000c10:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c14:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c18:	f000 f806 	bl	8000c28 <__udivmoddi4>
 8000c1c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c20:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c24:	b004      	add	sp, #16
 8000c26:	4770      	bx	lr

08000c28 <__udivmoddi4>:
 8000c28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c2c:	9d08      	ldr	r5, [sp, #32]
 8000c2e:	4604      	mov	r4, r0
 8000c30:	468e      	mov	lr, r1
 8000c32:	2b00      	cmp	r3, #0
 8000c34:	d14d      	bne.n	8000cd2 <__udivmoddi4+0xaa>
 8000c36:	428a      	cmp	r2, r1
 8000c38:	4694      	mov	ip, r2
 8000c3a:	d969      	bls.n	8000d10 <__udivmoddi4+0xe8>
 8000c3c:	fab2 f282 	clz	r2, r2
 8000c40:	b152      	cbz	r2, 8000c58 <__udivmoddi4+0x30>
 8000c42:	fa01 f302 	lsl.w	r3, r1, r2
 8000c46:	f1c2 0120 	rsb	r1, r2, #32
 8000c4a:	fa20 f101 	lsr.w	r1, r0, r1
 8000c4e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c52:	ea41 0e03 	orr.w	lr, r1, r3
 8000c56:	4094      	lsls	r4, r2
 8000c58:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c5c:	0c21      	lsrs	r1, r4, #16
 8000c5e:	fbbe f6f8 	udiv	r6, lr, r8
 8000c62:	fa1f f78c 	uxth.w	r7, ip
 8000c66:	fb08 e316 	mls	r3, r8, r6, lr
 8000c6a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c6e:	fb06 f107 	mul.w	r1, r6, r7
 8000c72:	4299      	cmp	r1, r3
 8000c74:	d90a      	bls.n	8000c8c <__udivmoddi4+0x64>
 8000c76:	eb1c 0303 	adds.w	r3, ip, r3
 8000c7a:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000c7e:	f080 811f 	bcs.w	8000ec0 <__udivmoddi4+0x298>
 8000c82:	4299      	cmp	r1, r3
 8000c84:	f240 811c 	bls.w	8000ec0 <__udivmoddi4+0x298>
 8000c88:	3e02      	subs	r6, #2
 8000c8a:	4463      	add	r3, ip
 8000c8c:	1a5b      	subs	r3, r3, r1
 8000c8e:	b2a4      	uxth	r4, r4
 8000c90:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c94:	fb08 3310 	mls	r3, r8, r0, r3
 8000c98:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c9c:	fb00 f707 	mul.w	r7, r0, r7
 8000ca0:	42a7      	cmp	r7, r4
 8000ca2:	d90a      	bls.n	8000cba <__udivmoddi4+0x92>
 8000ca4:	eb1c 0404 	adds.w	r4, ip, r4
 8000ca8:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000cac:	f080 810a 	bcs.w	8000ec4 <__udivmoddi4+0x29c>
 8000cb0:	42a7      	cmp	r7, r4
 8000cb2:	f240 8107 	bls.w	8000ec4 <__udivmoddi4+0x29c>
 8000cb6:	4464      	add	r4, ip
 8000cb8:	3802      	subs	r0, #2
 8000cba:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000cbe:	1be4      	subs	r4, r4, r7
 8000cc0:	2600      	movs	r6, #0
 8000cc2:	b11d      	cbz	r5, 8000ccc <__udivmoddi4+0xa4>
 8000cc4:	40d4      	lsrs	r4, r2
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	e9c5 4300 	strd	r4, r3, [r5]
 8000ccc:	4631      	mov	r1, r6
 8000cce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cd2:	428b      	cmp	r3, r1
 8000cd4:	d909      	bls.n	8000cea <__udivmoddi4+0xc2>
 8000cd6:	2d00      	cmp	r5, #0
 8000cd8:	f000 80ef 	beq.w	8000eba <__udivmoddi4+0x292>
 8000cdc:	2600      	movs	r6, #0
 8000cde:	e9c5 0100 	strd	r0, r1, [r5]
 8000ce2:	4630      	mov	r0, r6
 8000ce4:	4631      	mov	r1, r6
 8000ce6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cea:	fab3 f683 	clz	r6, r3
 8000cee:	2e00      	cmp	r6, #0
 8000cf0:	d14a      	bne.n	8000d88 <__udivmoddi4+0x160>
 8000cf2:	428b      	cmp	r3, r1
 8000cf4:	d302      	bcc.n	8000cfc <__udivmoddi4+0xd4>
 8000cf6:	4282      	cmp	r2, r0
 8000cf8:	f200 80f9 	bhi.w	8000eee <__udivmoddi4+0x2c6>
 8000cfc:	1a84      	subs	r4, r0, r2
 8000cfe:	eb61 0303 	sbc.w	r3, r1, r3
 8000d02:	2001      	movs	r0, #1
 8000d04:	469e      	mov	lr, r3
 8000d06:	2d00      	cmp	r5, #0
 8000d08:	d0e0      	beq.n	8000ccc <__udivmoddi4+0xa4>
 8000d0a:	e9c5 4e00 	strd	r4, lr, [r5]
 8000d0e:	e7dd      	b.n	8000ccc <__udivmoddi4+0xa4>
 8000d10:	b902      	cbnz	r2, 8000d14 <__udivmoddi4+0xec>
 8000d12:	deff      	udf	#255	; 0xff
 8000d14:	fab2 f282 	clz	r2, r2
 8000d18:	2a00      	cmp	r2, #0
 8000d1a:	f040 8092 	bne.w	8000e42 <__udivmoddi4+0x21a>
 8000d1e:	eba1 010c 	sub.w	r1, r1, ip
 8000d22:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d26:	fa1f fe8c 	uxth.w	lr, ip
 8000d2a:	2601      	movs	r6, #1
 8000d2c:	0c20      	lsrs	r0, r4, #16
 8000d2e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000d32:	fb07 1113 	mls	r1, r7, r3, r1
 8000d36:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d3a:	fb0e f003 	mul.w	r0, lr, r3
 8000d3e:	4288      	cmp	r0, r1
 8000d40:	d908      	bls.n	8000d54 <__udivmoddi4+0x12c>
 8000d42:	eb1c 0101 	adds.w	r1, ip, r1
 8000d46:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000d4a:	d202      	bcs.n	8000d52 <__udivmoddi4+0x12a>
 8000d4c:	4288      	cmp	r0, r1
 8000d4e:	f200 80cb 	bhi.w	8000ee8 <__udivmoddi4+0x2c0>
 8000d52:	4643      	mov	r3, r8
 8000d54:	1a09      	subs	r1, r1, r0
 8000d56:	b2a4      	uxth	r4, r4
 8000d58:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d5c:	fb07 1110 	mls	r1, r7, r0, r1
 8000d60:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d64:	fb0e fe00 	mul.w	lr, lr, r0
 8000d68:	45a6      	cmp	lr, r4
 8000d6a:	d908      	bls.n	8000d7e <__udivmoddi4+0x156>
 8000d6c:	eb1c 0404 	adds.w	r4, ip, r4
 8000d70:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000d74:	d202      	bcs.n	8000d7c <__udivmoddi4+0x154>
 8000d76:	45a6      	cmp	lr, r4
 8000d78:	f200 80bb 	bhi.w	8000ef2 <__udivmoddi4+0x2ca>
 8000d7c:	4608      	mov	r0, r1
 8000d7e:	eba4 040e 	sub.w	r4, r4, lr
 8000d82:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d86:	e79c      	b.n	8000cc2 <__udivmoddi4+0x9a>
 8000d88:	f1c6 0720 	rsb	r7, r6, #32
 8000d8c:	40b3      	lsls	r3, r6
 8000d8e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d92:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d96:	fa20 f407 	lsr.w	r4, r0, r7
 8000d9a:	fa01 f306 	lsl.w	r3, r1, r6
 8000d9e:	431c      	orrs	r4, r3
 8000da0:	40f9      	lsrs	r1, r7
 8000da2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000da6:	fa00 f306 	lsl.w	r3, r0, r6
 8000daa:	fbb1 f8f9 	udiv	r8, r1, r9
 8000dae:	0c20      	lsrs	r0, r4, #16
 8000db0:	fa1f fe8c 	uxth.w	lr, ip
 8000db4:	fb09 1118 	mls	r1, r9, r8, r1
 8000db8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000dbc:	fb08 f00e 	mul.w	r0, r8, lr
 8000dc0:	4288      	cmp	r0, r1
 8000dc2:	fa02 f206 	lsl.w	r2, r2, r6
 8000dc6:	d90b      	bls.n	8000de0 <__udivmoddi4+0x1b8>
 8000dc8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dcc:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000dd0:	f080 8088 	bcs.w	8000ee4 <__udivmoddi4+0x2bc>
 8000dd4:	4288      	cmp	r0, r1
 8000dd6:	f240 8085 	bls.w	8000ee4 <__udivmoddi4+0x2bc>
 8000dda:	f1a8 0802 	sub.w	r8, r8, #2
 8000dde:	4461      	add	r1, ip
 8000de0:	1a09      	subs	r1, r1, r0
 8000de2:	b2a4      	uxth	r4, r4
 8000de4:	fbb1 f0f9 	udiv	r0, r1, r9
 8000de8:	fb09 1110 	mls	r1, r9, r0, r1
 8000dec:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000df0:	fb00 fe0e 	mul.w	lr, r0, lr
 8000df4:	458e      	cmp	lr, r1
 8000df6:	d908      	bls.n	8000e0a <__udivmoddi4+0x1e2>
 8000df8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dfc:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000e00:	d26c      	bcs.n	8000edc <__udivmoddi4+0x2b4>
 8000e02:	458e      	cmp	lr, r1
 8000e04:	d96a      	bls.n	8000edc <__udivmoddi4+0x2b4>
 8000e06:	3802      	subs	r0, #2
 8000e08:	4461      	add	r1, ip
 8000e0a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e0e:	fba0 9402 	umull	r9, r4, r0, r2
 8000e12:	eba1 010e 	sub.w	r1, r1, lr
 8000e16:	42a1      	cmp	r1, r4
 8000e18:	46c8      	mov	r8, r9
 8000e1a:	46a6      	mov	lr, r4
 8000e1c:	d356      	bcc.n	8000ecc <__udivmoddi4+0x2a4>
 8000e1e:	d053      	beq.n	8000ec8 <__udivmoddi4+0x2a0>
 8000e20:	b15d      	cbz	r5, 8000e3a <__udivmoddi4+0x212>
 8000e22:	ebb3 0208 	subs.w	r2, r3, r8
 8000e26:	eb61 010e 	sbc.w	r1, r1, lr
 8000e2a:	fa01 f707 	lsl.w	r7, r1, r7
 8000e2e:	fa22 f306 	lsr.w	r3, r2, r6
 8000e32:	40f1      	lsrs	r1, r6
 8000e34:	431f      	orrs	r7, r3
 8000e36:	e9c5 7100 	strd	r7, r1, [r5]
 8000e3a:	2600      	movs	r6, #0
 8000e3c:	4631      	mov	r1, r6
 8000e3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e42:	f1c2 0320 	rsb	r3, r2, #32
 8000e46:	40d8      	lsrs	r0, r3
 8000e48:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e4c:	fa21 f303 	lsr.w	r3, r1, r3
 8000e50:	4091      	lsls	r1, r2
 8000e52:	4301      	orrs	r1, r0
 8000e54:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e58:	fa1f fe8c 	uxth.w	lr, ip
 8000e5c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e60:	fb07 3610 	mls	r6, r7, r0, r3
 8000e64:	0c0b      	lsrs	r3, r1, #16
 8000e66:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e6a:	fb00 f60e 	mul.w	r6, r0, lr
 8000e6e:	429e      	cmp	r6, r3
 8000e70:	fa04 f402 	lsl.w	r4, r4, r2
 8000e74:	d908      	bls.n	8000e88 <__udivmoddi4+0x260>
 8000e76:	eb1c 0303 	adds.w	r3, ip, r3
 8000e7a:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000e7e:	d22f      	bcs.n	8000ee0 <__udivmoddi4+0x2b8>
 8000e80:	429e      	cmp	r6, r3
 8000e82:	d92d      	bls.n	8000ee0 <__udivmoddi4+0x2b8>
 8000e84:	3802      	subs	r0, #2
 8000e86:	4463      	add	r3, ip
 8000e88:	1b9b      	subs	r3, r3, r6
 8000e8a:	b289      	uxth	r1, r1
 8000e8c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000e90:	fb07 3316 	mls	r3, r7, r6, r3
 8000e94:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e98:	fb06 f30e 	mul.w	r3, r6, lr
 8000e9c:	428b      	cmp	r3, r1
 8000e9e:	d908      	bls.n	8000eb2 <__udivmoddi4+0x28a>
 8000ea0:	eb1c 0101 	adds.w	r1, ip, r1
 8000ea4:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000ea8:	d216      	bcs.n	8000ed8 <__udivmoddi4+0x2b0>
 8000eaa:	428b      	cmp	r3, r1
 8000eac:	d914      	bls.n	8000ed8 <__udivmoddi4+0x2b0>
 8000eae:	3e02      	subs	r6, #2
 8000eb0:	4461      	add	r1, ip
 8000eb2:	1ac9      	subs	r1, r1, r3
 8000eb4:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000eb8:	e738      	b.n	8000d2c <__udivmoddi4+0x104>
 8000eba:	462e      	mov	r6, r5
 8000ebc:	4628      	mov	r0, r5
 8000ebe:	e705      	b.n	8000ccc <__udivmoddi4+0xa4>
 8000ec0:	4606      	mov	r6, r0
 8000ec2:	e6e3      	b.n	8000c8c <__udivmoddi4+0x64>
 8000ec4:	4618      	mov	r0, r3
 8000ec6:	e6f8      	b.n	8000cba <__udivmoddi4+0x92>
 8000ec8:	454b      	cmp	r3, r9
 8000eca:	d2a9      	bcs.n	8000e20 <__udivmoddi4+0x1f8>
 8000ecc:	ebb9 0802 	subs.w	r8, r9, r2
 8000ed0:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000ed4:	3801      	subs	r0, #1
 8000ed6:	e7a3      	b.n	8000e20 <__udivmoddi4+0x1f8>
 8000ed8:	4646      	mov	r6, r8
 8000eda:	e7ea      	b.n	8000eb2 <__udivmoddi4+0x28a>
 8000edc:	4620      	mov	r0, r4
 8000ede:	e794      	b.n	8000e0a <__udivmoddi4+0x1e2>
 8000ee0:	4640      	mov	r0, r8
 8000ee2:	e7d1      	b.n	8000e88 <__udivmoddi4+0x260>
 8000ee4:	46d0      	mov	r8, sl
 8000ee6:	e77b      	b.n	8000de0 <__udivmoddi4+0x1b8>
 8000ee8:	3b02      	subs	r3, #2
 8000eea:	4461      	add	r1, ip
 8000eec:	e732      	b.n	8000d54 <__udivmoddi4+0x12c>
 8000eee:	4630      	mov	r0, r6
 8000ef0:	e709      	b.n	8000d06 <__udivmoddi4+0xde>
 8000ef2:	4464      	add	r4, ip
 8000ef4:	3802      	subs	r0, #2
 8000ef6:	e742      	b.n	8000d7e <__udivmoddi4+0x156>

08000ef8 <__aeabi_idiv0>:
 8000ef8:	4770      	bx	lr
 8000efa:	bf00      	nop

08000efc <AD5245level>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
#ifdef  AD5245
/* Управление усилением от 0 до 254 */
void AD5245level(uint8_t lev) {
 8000efc:	b580      	push	{r7, lr}
 8000efe:	b088      	sub	sp, #32
 8000f00:	af04      	add	r7, sp, #16
 8000f02:	4603      	mov	r3, r0
 8000f04:	71fb      	strb	r3, [r7, #7]
	uint8_t cmdBuff[2];
	uint16_t cmd = AD5245_WRITE;
 8000f06:	2300      	movs	r3, #0
 8000f08:	81fb      	strh	r3, [r7, #14]
	cmdBuff[0] = lev;
 8000f0a:	79fb      	ldrb	r3, [r7, #7]
 8000f0c:	733b      	strb	r3, [r7, #12]
	HAL_I2C_Mem_Write(&AD5245_I2C_PORT, AD5245_I2C_ADDR, cmd, 2, cmdBuff, 1, 100);
 8000f0e:	89fa      	ldrh	r2, [r7, #14]
 8000f10:	2364      	movs	r3, #100	; 0x64
 8000f12:	9302      	str	r3, [sp, #8]
 8000f14:	2301      	movs	r3, #1
 8000f16:	9301      	str	r3, [sp, #4]
 8000f18:	f107 030c 	add.w	r3, r7, #12
 8000f1c:	9300      	str	r3, [sp, #0]
 8000f1e:	2302      	movs	r3, #2
 8000f20:	2158      	movs	r1, #88	; 0x58
 8000f22:	4803      	ldr	r0, [pc, #12]	; (8000f30 <AD5245level+0x34>)
 8000f24:	f003 fe8a 	bl	8004c3c <HAL_I2C_Mem_Write>
}
 8000f28:	bf00      	nop
 8000f2a:	3710      	adds	r7, #16
 8000f2c:	46bd      	mov	sp, r7
 8000f2e:	bd80      	pop	{r7, pc}
 8000f30:	200002c4 	.word	0x200002c4

08000f34 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f34:	b580      	push	{r7, lr}
 8000f36:	b082      	sub	sp, #8
 8000f38:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f3a:	f001 fa38 	bl	80023ae <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f3e:	f000 f8d1 	bl	80010e4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f42:	f000 fc91 	bl	8001868 <MX_GPIO_Init>
  MX_DMA_Init();
 8000f46:	f000 fc65 	bl	8001814 <MX_DMA_Init>
  MX_ADC1_Init();
 8000f4a:	f000 f915 	bl	8001178 <MX_ADC1_Init>
  MX_I2C1_Init();
 8000f4e:	f000 f98d 	bl	800126c <MX_I2C1_Init>
  MX_TIM1_Init();
 8000f52:	f000 f9cb 	bl	80012ec <MX_TIM1_Init>
  MX_USART1_UART_Init();
 8000f56:	f000 fc11 	bl	800177c <MX_USART1_UART_Init>
  MX_TIM2_Init();
 8000f5a:	f000 faa5 	bl	80014a8 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000f5e:	f000 fb2b 	bl	80015b8 <MX_TIM3_Init>
  MX_TIM4_Init();
 8000f62:	f000 fbbd 	bl	80016e0 <MX_TIM4_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  HAL_UART_Transmit(&huart1, (uint8_t *) START_TEXT, sizeof(START_TEXT), 1000);
 8000f66:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f6a:	2216      	movs	r2, #22
 8000f6c:	494e      	ldr	r1, [pc, #312]	; (80010a8 <main+0x174>)
 8000f6e:	484f      	ldr	r0, [pc, #316]	; (80010ac <main+0x178>)
 8000f70:	f007 fce4 	bl	800893c <HAL_UART_Transmit>

  HAL_GPIO_WritePin(selZ1_GPIO_Port, selZ1_Pin, GPIO_PIN_RESET);
 8000f74:	2200      	movs	r2, #0
 8000f76:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000f7a:	484d      	ldr	r0, [pc, #308]	; (80010b0 <main+0x17c>)
 8000f7c:	f003 fdb6 	bl	8004aec <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(selZ2_GPIO_Port, selZ2_Pin, GPIO_PIN_RESET);
 8000f80:	2200      	movs	r2, #0
 8000f82:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000f86:	484a      	ldr	r0, [pc, #296]	; (80010b0 <main+0x17c>)
 8000f88:	f003 fdb0 	bl	8004aec <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(selZ3_GPIO_Port, selZ3_Pin, GPIO_PIN_RESET);
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000f92:	4847      	ldr	r0, [pc, #284]	; (80010b0 <main+0x17c>)
 8000f94:	f003 fdaa 	bl	8004aec <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(selZ4_GPIO_Port, selZ4_Pin, GPIO_PIN_RESET);
 8000f98:	2200      	movs	r2, #0
 8000f9a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000f9e:	4844      	ldr	r0, [pc, #272]	; (80010b0 <main+0x17c>)
 8000fa0:	f003 fda4 	bl	8004aec <HAL_GPIO_WritePin>

  if ( (HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED) == HAL_OK)
 8000fa4:	217f      	movs	r1, #127	; 0x7f
 8000fa6:	4843      	ldr	r0, [pc, #268]	; (80010b4 <main+0x180>)
 8000fa8:	f002 febe 	bl	8003d28 <HAL_ADCEx_Calibration_Start>
 8000fac:	4603      	mov	r3, r0
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	d113      	bne.n	8000fda <main+0xa6>
	&& (HAL_TIM_Base_Start_IT(&htim3) == HAL_OK)
 8000fb2:	4841      	ldr	r0, [pc, #260]	; (80010b8 <main+0x184>)
 8000fb4:	f005 faba 	bl	800652c <HAL_TIM_Base_Start_IT>
 8000fb8:	4603      	mov	r3, r0
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	d10d      	bne.n	8000fda <main+0xa6>
	&& (HAL_TIM_Base_Start_IT(&htim4) == HAL_OK) ) {
 8000fbe:	483f      	ldr	r0, [pc, #252]	; (80010bc <main+0x188>)
 8000fc0:	f005 fab4 	bl	800652c <HAL_TIM_Base_Start_IT>
 8000fc4:	4603      	mov	r3, r0
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d107      	bne.n	8000fda <main+0xa6>
	  HAL_UART_Transmit(&huart1, (uint8_t *) FINISH_TEXT, sizeof(FINISH_TEXT), 1000);
 8000fca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000fce:	220f      	movs	r2, #15
 8000fd0:	493b      	ldr	r1, [pc, #236]	; (80010c0 <main+0x18c>)
 8000fd2:	4836      	ldr	r0, [pc, #216]	; (80010ac <main+0x178>)
 8000fd4:	f007 fcb2 	bl	800893c <HAL_UART_Transmit>
 8000fd8:	e00c      	b.n	8000ff4 <main+0xc0>
  } else {
	  HAL_UART_Transmit(&huart1, (uint8_t *) ERROR_TEXT, sizeof(ERROR_TEXT), 1000);
 8000fda:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000fde:	2216      	movs	r2, #22
 8000fe0:	4938      	ldr	r1, [pc, #224]	; (80010c4 <main+0x190>)
 8000fe2:	4832      	ldr	r0, [pc, #200]	; (80010ac <main+0x178>)
 8000fe4:	f007 fcaa 	bl	800893c <HAL_UART_Transmit>
	  HAL_Delay(1000);
 8000fe8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000fec:	f001 fa50 	bl	8002490 <HAL_Delay>
	  HAL_NVIC_SystemReset();
 8000ff0:	f003 f91d 	bl	800422e <HAL_NVIC_SystemReset>
  }

  /* Test AD5245 */
	#ifdef AD5245
  	  currentLevel = 0;
 8000ff4:	4b34      	ldr	r3, [pc, #208]	; (80010c8 <main+0x194>)
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	701a      	strb	r2, [r3, #0]
	  AD5245level(currentLevel);
 8000ffa:	4b33      	ldr	r3, [pc, #204]	; (80010c8 <main+0x194>)
 8000ffc:	781b      	ldrb	r3, [r3, #0]
 8000ffe:	4618      	mov	r0, r3
 8001000:	f7ff ff7c 	bl	8000efc <AD5245level>
	#endif

  while (1)
  {
	  if (readyData) {
 8001004:	4b31      	ldr	r3, [pc, #196]	; (80010cc <main+0x198>)
 8001006:	781b      	ldrb	r3, [r3, #0]
 8001008:	2b00      	cmp	r3, #0
 800100a:	d048      	beq.n	800109e <main+0x16a>
		  #ifndef RAW_DATA_OUT
		  float maxLev = 0;
		  #endif
		  HAL_TIM_Base_Stop_IT(&htim4);
 800100c:	482b      	ldr	r0, [pc, #172]	; (80010bc <main+0x188>)
 800100e:	f005 fb05 	bl	800661c <HAL_TIM_Base_Stop_IT>
		  memset(SndBuffer, 0, sizeof(SndBuffer));
 8001012:	2264      	movs	r2, #100	; 0x64
 8001014:	2100      	movs	r1, #0
 8001016:	482e      	ldr	r0, [pc, #184]	; (80010d0 <main+0x19c>)
 8001018:	f008 fb04 	bl	8009624 <memset>
		  for (int ii = 0; ii < CONVERSION_COUNT; ii++) {
 800101c:	2300      	movs	r3, #0
 800101e:	607b      	str	r3, [r7, #4]
 8001020:	e02c      	b.n	800107c <main+0x148>
			measArray[ii] = measArray[ii] / MEASURE_COUNT - avgLevel;
 8001022:	4a2c      	ldr	r2, [pc, #176]	; (80010d4 <main+0x1a0>)
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	009b      	lsls	r3, r3, #2
 8001028:	4413      	add	r3, r2
 800102a:	edd3 7a00 	vldr	s15, [r3]
 800102e:	eef3 6a00 	vmov.f32	s13, #48	; 0x41800000  16.0
 8001032:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001036:	4b28      	ldr	r3, [pc, #160]	; (80010d8 <main+0x1a4>)
 8001038:	edd3 7a00 	vldr	s15, [r3]
 800103c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001040:	4a24      	ldr	r2, [pc, #144]	; (80010d4 <main+0x1a0>)
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	009b      	lsls	r3, r3, #2
 8001046:	4413      	add	r3, r2
 8001048:	edc3 7a00 	vstr	s15, [r3]

			#ifdef RAW_DATA_OUT
			sprintf(SndBuffer, "%6.2f \n\r", measArray[ii]);
 800104c:	4a21      	ldr	r2, [pc, #132]	; (80010d4 <main+0x1a0>)
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	009b      	lsls	r3, r3, #2
 8001052:	4413      	add	r3, r2
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	4618      	mov	r0, r3
 8001058:	f7ff fa9e 	bl	8000598 <__aeabi_f2d>
 800105c:	4602      	mov	r2, r0
 800105e:	460b      	mov	r3, r1
 8001060:	491e      	ldr	r1, [pc, #120]	; (80010dc <main+0x1a8>)
 8001062:	481b      	ldr	r0, [pc, #108]	; (80010d0 <main+0x19c>)
 8001064:	f008 ff50 	bl	8009f08 <siprintf>
			HAL_UART_Transmit(&huart1, (uint8_t *) SndBuffer, sizeof(SndBuffer), 1000);
 8001068:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800106c:	2264      	movs	r2, #100	; 0x64
 800106e:	4918      	ldr	r1, [pc, #96]	; (80010d0 <main+0x19c>)
 8001070:	480e      	ldr	r0, [pc, #56]	; (80010ac <main+0x178>)
 8001072:	f007 fc63 	bl	800893c <HAL_UART_Transmit>
		  for (int ii = 0; ii < CONVERSION_COUNT; ii++) {
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	3301      	adds	r3, #1
 800107a:	607b      	str	r3, [r7, #4]
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8001082:	dbce      	blt.n	8001022 <main+0xee>
			#endif
		  }
		  #ifdef RAW_DATA_OUT
		  HAL_UART_Transmit(&huart1, (uint8_t *) "---\n\r", sizeof("---\n\r"), 1000);
 8001084:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001088:	2206      	movs	r2, #6
 800108a:	4915      	ldr	r1, [pc, #84]	; (80010e0 <main+0x1ac>)
 800108c:	4807      	ldr	r0, [pc, #28]	; (80010ac <main+0x178>)
 800108e:	f007 fc55 	bl	800893c <HAL_UART_Transmit>
				  maxIdxAmp, maxLev, avgLevel, finishCapture,
				  204000 / ((float) 1/72 * (MEASURMENT_DALAY + finishCapture)),
				  204000 / ((float) 1/72 * (MEASURMENT_DALAY + maxIdxAmp * SAMPLE_RATE )));
		  HAL_UART_Transmit(&huart1, (uint8_t *) SndBuffer, sizeof(SndBuffer), 1000);
		  #endif
		  HAL_TIM_Base_Start_IT(&htim4);
 8001092:	480a      	ldr	r0, [pc, #40]	; (80010bc <main+0x188>)
 8001094:	f005 fa4a 	bl	800652c <HAL_TIM_Base_Start_IT>
		  readyData = false;
 8001098:	4b0c      	ldr	r3, [pc, #48]	; (80010cc <main+0x198>)
 800109a:	2200      	movs	r2, #0
 800109c:	701a      	strb	r2, [r3, #0]
	  }
	  //HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
	  //HAL_Delay(100);
	  //HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
	  HAL_Delay(100);
 800109e:	2064      	movs	r0, #100	; 0x64
 80010a0:	f001 f9f6 	bl	8002490 <HAL_Delay>
	  if (readyData) {
 80010a4:	e7ae      	b.n	8001004 <main+0xd0>
 80010a6:	bf00      	nop
 80010a8:	0800c410 	.word	0x0800c410
 80010ac:	20000440 	.word	0x20000440
 80010b0:	48000400 	.word	0x48000400
 80010b4:	200001f8 	.word	0x200001f8
 80010b8:	200003a8 	.word	0x200003a8
 80010bc:	200003f4 	.word	0x200003f4
 80010c0:	0800c428 	.word	0x0800c428
 80010c4:	0800c438 	.word	0x0800c438
 80010c8:	200004d0 	.word	0x200004d0
 80010cc:	20000b82 	.word	0x20000b82
 80010d0:	200004d4 	.word	0x200004d4
 80010d4:	20000b88 	.word	0x20000b88
 80010d8:	20000b84 	.word	0x20000b84
 80010dc:	0800c450 	.word	0x0800c450
 80010e0:	0800c45c 	.word	0x0800c45c

080010e4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80010e4:	b580      	push	{r7, lr}
 80010e6:	b094      	sub	sp, #80	; 0x50
 80010e8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80010ea:	f107 0318 	add.w	r3, r7, #24
 80010ee:	2238      	movs	r2, #56	; 0x38
 80010f0:	2100      	movs	r1, #0
 80010f2:	4618      	mov	r0, r3
 80010f4:	f008 fa96 	bl	8009624 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80010f8:	1d3b      	adds	r3, r7, #4
 80010fa:	2200      	movs	r2, #0
 80010fc:	601a      	str	r2, [r3, #0]
 80010fe:	605a      	str	r2, [r3, #4]
 8001100:	609a      	str	r2, [r3, #8]
 8001102:	60da      	str	r2, [r3, #12]
 8001104:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8001106:	2000      	movs	r0, #0
 8001108:	f004 f996 	bl	8005438 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800110c:	2301      	movs	r3, #1
 800110e:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001110:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001114:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001116:	2302      	movs	r3, #2
 8001118:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800111a:	2303      	movs	r3, #3
 800111c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 800111e:	2304      	movs	r3, #4
 8001120:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8001122:	2355      	movs	r3, #85	; 0x55
 8001124:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001126:	2302      	movs	r3, #2
 8001128:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800112a:	2302      	movs	r3, #2
 800112c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800112e:	2302      	movs	r3, #2
 8001130:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001132:	f107 0318 	add.w	r3, r7, #24
 8001136:	4618      	mov	r0, r3
 8001138:	f004 fa22 	bl	8005580 <HAL_RCC_OscConfig>
 800113c:	4603      	mov	r3, r0
 800113e:	2b00      	cmp	r3, #0
 8001140:	d001      	beq.n	8001146 <SystemClock_Config+0x62>
  {
    Error_Handler();
 8001142:	f000 fc01 	bl	8001948 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001146:	230f      	movs	r3, #15
 8001148:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800114a:	2303      	movs	r3, #3
 800114c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800114e:	2300      	movs	r3, #0
 8001150:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001152:	2300      	movs	r3, #0
 8001154:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001156:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800115a:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800115c:	1d3b      	adds	r3, r7, #4
 800115e:	2104      	movs	r1, #4
 8001160:	4618      	mov	r0, r3
 8001162:	f004 fd25 	bl	8005bb0 <HAL_RCC_ClockConfig>
 8001166:	4603      	mov	r3, r0
 8001168:	2b00      	cmp	r3, #0
 800116a:	d001      	beq.n	8001170 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 800116c:	f000 fbec 	bl	8001948 <Error_Handler>
  }
}
 8001170:	bf00      	nop
 8001172:	3750      	adds	r7, #80	; 0x50
 8001174:	46bd      	mov	sp, r7
 8001176:	bd80      	pop	{r7, pc}

08001178 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001178:	b580      	push	{r7, lr}
 800117a:	b08c      	sub	sp, #48	; 0x30
 800117c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800117e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001182:	2200      	movs	r2, #0
 8001184:	601a      	str	r2, [r3, #0]
 8001186:	605a      	str	r2, [r3, #4]
 8001188:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800118a:	1d3b      	adds	r3, r7, #4
 800118c:	2220      	movs	r2, #32
 800118e:	2100      	movs	r1, #0
 8001190:	4618      	mov	r0, r3
 8001192:	f008 fa47 	bl	8009624 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001196:	4b33      	ldr	r3, [pc, #204]	; (8001264 <MX_ADC1_Init+0xec>)
 8001198:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800119c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800119e:	4b31      	ldr	r3, [pc, #196]	; (8001264 <MX_ADC1_Init+0xec>)
 80011a0:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80011a4:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80011a6:	4b2f      	ldr	r3, [pc, #188]	; (8001264 <MX_ADC1_Init+0xec>)
 80011a8:	2200      	movs	r2, #0
 80011aa:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80011ac:	4b2d      	ldr	r3, [pc, #180]	; (8001264 <MX_ADC1_Init+0xec>)
 80011ae:	2200      	movs	r2, #0
 80011b0:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 80011b2:	4b2c      	ldr	r3, [pc, #176]	; (8001264 <MX_ADC1_Init+0xec>)
 80011b4:	2200      	movs	r2, #0
 80011b6:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80011b8:	4b2a      	ldr	r3, [pc, #168]	; (8001264 <MX_ADC1_Init+0xec>)
 80011ba:	2200      	movs	r2, #0
 80011bc:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 80011be:	4b29      	ldr	r3, [pc, #164]	; (8001264 <MX_ADC1_Init+0xec>)
 80011c0:	2208      	movs	r2, #8
 80011c2:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80011c4:	4b27      	ldr	r3, [pc, #156]	; (8001264 <MX_ADC1_Init+0xec>)
 80011c6:	2200      	movs	r2, #0
 80011c8:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80011ca:	4b26      	ldr	r3, [pc, #152]	; (8001264 <MX_ADC1_Init+0xec>)
 80011cc:	2201      	movs	r2, #1
 80011ce:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 80011d0:	4b24      	ldr	r3, [pc, #144]	; (8001264 <MX_ADC1_Init+0xec>)
 80011d2:	2201      	movs	r2, #1
 80011d4:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80011d6:	4b23      	ldr	r3, [pc, #140]	; (8001264 <MX_ADC1_Init+0xec>)
 80011d8:	2200      	movs	r2, #0
 80011da:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T3_TRGO;
 80011de:	4b21      	ldr	r3, [pc, #132]	; (8001264 <MX_ADC1_Init+0xec>)
 80011e0:	f44f 6290 	mov.w	r2, #1152	; 0x480
 80011e4:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 80011e6:	4b1f      	ldr	r3, [pc, #124]	; (8001264 <MX_ADC1_Init+0xec>)
 80011e8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80011ec:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80011ee:	4b1d      	ldr	r3, [pc, #116]	; (8001264 <MX_ADC1_Init+0xec>)
 80011f0:	2201      	movs	r2, #1
 80011f2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80011f6:	4b1b      	ldr	r3, [pc, #108]	; (8001264 <MX_ADC1_Init+0xec>)
 80011f8:	2200      	movs	r2, #0
 80011fa:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 80011fc:	4b19      	ldr	r3, [pc, #100]	; (8001264 <MX_ADC1_Init+0xec>)
 80011fe:	2200      	movs	r2, #0
 8001200:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001204:	4817      	ldr	r0, [pc, #92]	; (8001264 <MX_ADC1_Init+0xec>)
 8001206:	f001 fbd5 	bl	80029b4 <HAL_ADC_Init>
 800120a:	4603      	mov	r3, r0
 800120c:	2b00      	cmp	r3, #0
 800120e:	d001      	beq.n	8001214 <MX_ADC1_Init+0x9c>
  {
    Error_Handler();
 8001210:	f000 fb9a 	bl	8001948 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8001214:	2300      	movs	r3, #0
 8001216:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8001218:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800121c:	4619      	mov	r1, r3
 800121e:	4811      	ldr	r0, [pc, #68]	; (8001264 <MX_ADC1_Init+0xec>)
 8001220:	f002 fde4 	bl	8003dec <HAL_ADCEx_MultiModeConfigChannel>
 8001224:	4603      	mov	r3, r0
 8001226:	2b00      	cmp	r3, #0
 8001228:	d001      	beq.n	800122e <MX_ADC1_Init+0xb6>
  {
    Error_Handler();
 800122a:	f000 fb8d 	bl	8001948 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800122e:	4b0e      	ldr	r3, [pc, #56]	; (8001268 <MX_ADC1_Init+0xf0>)
 8001230:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001232:	2306      	movs	r3, #6
 8001234:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_6CYCLES_5;
 8001236:	2301      	movs	r3, #1
 8001238:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800123a:	237f      	movs	r3, #127	; 0x7f
 800123c:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800123e:	2304      	movs	r3, #4
 8001240:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8001242:	2300      	movs	r3, #0
 8001244:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001246:	1d3b      	adds	r3, r7, #4
 8001248:	4619      	mov	r1, r3
 800124a:	4806      	ldr	r0, [pc, #24]	; (8001264 <MX_ADC1_Init+0xec>)
 800124c:	f001 fec8 	bl	8002fe0 <HAL_ADC_ConfigChannel>
 8001250:	4603      	mov	r3, r0
 8001252:	2b00      	cmp	r3, #0
 8001254:	d001      	beq.n	800125a <MX_ADC1_Init+0xe2>
  {
    Error_Handler();
 8001256:	f000 fb77 	bl	8001948 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800125a:	bf00      	nop
 800125c:	3730      	adds	r7, #48	; 0x30
 800125e:	46bd      	mov	sp, r7
 8001260:	bd80      	pop	{r7, pc}
 8001262:	bf00      	nop
 8001264:	200001f8 	.word	0x200001f8
 8001268:	04300002 	.word	0x04300002

0800126c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800126c:	b580      	push	{r7, lr}
 800126e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001270:	4b1b      	ldr	r3, [pc, #108]	; (80012e0 <MX_I2C1_Init+0x74>)
 8001272:	4a1c      	ldr	r2, [pc, #112]	; (80012e4 <MX_I2C1_Init+0x78>)
 8001274:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x30A0A7FB;
 8001276:	4b1a      	ldr	r3, [pc, #104]	; (80012e0 <MX_I2C1_Init+0x74>)
 8001278:	4a1b      	ldr	r2, [pc, #108]	; (80012e8 <MX_I2C1_Init+0x7c>)
 800127a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800127c:	4b18      	ldr	r3, [pc, #96]	; (80012e0 <MX_I2C1_Init+0x74>)
 800127e:	2200      	movs	r2, #0
 8001280:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001282:	4b17      	ldr	r3, [pc, #92]	; (80012e0 <MX_I2C1_Init+0x74>)
 8001284:	2201      	movs	r2, #1
 8001286:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001288:	4b15      	ldr	r3, [pc, #84]	; (80012e0 <MX_I2C1_Init+0x74>)
 800128a:	2200      	movs	r2, #0
 800128c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800128e:	4b14      	ldr	r3, [pc, #80]	; (80012e0 <MX_I2C1_Init+0x74>)
 8001290:	2200      	movs	r2, #0
 8001292:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001294:	4b12      	ldr	r3, [pc, #72]	; (80012e0 <MX_I2C1_Init+0x74>)
 8001296:	2200      	movs	r2, #0
 8001298:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800129a:	4b11      	ldr	r3, [pc, #68]	; (80012e0 <MX_I2C1_Init+0x74>)
 800129c:	2200      	movs	r2, #0
 800129e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80012a0:	4b0f      	ldr	r3, [pc, #60]	; (80012e0 <MX_I2C1_Init+0x74>)
 80012a2:	2200      	movs	r2, #0
 80012a4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80012a6:	480e      	ldr	r0, [pc, #56]	; (80012e0 <MX_I2C1_Init+0x74>)
 80012a8:	f003 fc38 	bl	8004b1c <HAL_I2C_Init>
 80012ac:	4603      	mov	r3, r0
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d001      	beq.n	80012b6 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80012b2:	f000 fb49 	bl	8001948 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80012b6:	2100      	movs	r1, #0
 80012b8:	4809      	ldr	r0, [pc, #36]	; (80012e0 <MX_I2C1_Init+0x74>)
 80012ba:	f004 f825 	bl	8005308 <HAL_I2CEx_ConfigAnalogFilter>
 80012be:	4603      	mov	r3, r0
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d001      	beq.n	80012c8 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80012c4:	f000 fb40 	bl	8001948 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80012c8:	2100      	movs	r1, #0
 80012ca:	4805      	ldr	r0, [pc, #20]	; (80012e0 <MX_I2C1_Init+0x74>)
 80012cc:	f004 f867 	bl	800539e <HAL_I2CEx_ConfigDigitalFilter>
 80012d0:	4603      	mov	r3, r0
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d001      	beq.n	80012da <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80012d6:	f000 fb37 	bl	8001948 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80012da:	bf00      	nop
 80012dc:	bd80      	pop	{r7, pc}
 80012de:	bf00      	nop
 80012e0:	200002c4 	.word	0x200002c4
 80012e4:	40005400 	.word	0x40005400
 80012e8:	30a0a7fb 	.word	0x30a0a7fb

080012ec <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80012ec:	b580      	push	{r7, lr}
 80012ee:	b09c      	sub	sp, #112	; 0x70
 80012f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80012f2:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80012f6:	2200      	movs	r2, #0
 80012f8:	601a      	str	r2, [r3, #0]
 80012fa:	605a      	str	r2, [r3, #4]
 80012fc:	609a      	str	r2, [r3, #8]
 80012fe:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001300:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001304:	2200      	movs	r2, #0
 8001306:	601a      	str	r2, [r3, #0]
 8001308:	605a      	str	r2, [r3, #4]
 800130a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800130c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001310:	2200      	movs	r2, #0
 8001312:	601a      	str	r2, [r3, #0]
 8001314:	605a      	str	r2, [r3, #4]
 8001316:	609a      	str	r2, [r3, #8]
 8001318:	60da      	str	r2, [r3, #12]
 800131a:	611a      	str	r2, [r3, #16]
 800131c:	615a      	str	r2, [r3, #20]
 800131e:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001320:	1d3b      	adds	r3, r7, #4
 8001322:	2234      	movs	r2, #52	; 0x34
 8001324:	2100      	movs	r1, #0
 8001326:	4618      	mov	r0, r3
 8001328:	f008 f97c 	bl	8009624 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800132c:	4b5c      	ldr	r3, [pc, #368]	; (80014a0 <MX_TIM1_Init+0x1b4>)
 800132e:	4a5d      	ldr	r2, [pc, #372]	; (80014a4 <MX_TIM1_Init+0x1b8>)
 8001330:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001332:	4b5b      	ldr	r3, [pc, #364]	; (80014a0 <MX_TIM1_Init+0x1b4>)
 8001334:	2200      	movs	r2, #0
 8001336:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001338:	4b59      	ldr	r3, [pc, #356]	; (80014a0 <MX_TIM1_Init+0x1b4>)
 800133a:	2200      	movs	r2, #0
 800133c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 424;
 800133e:	4b58      	ldr	r3, [pc, #352]	; (80014a0 <MX_TIM1_Init+0x1b4>)
 8001340:	f44f 72d4 	mov.w	r2, #424	; 0x1a8
 8001344:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001346:	4b56      	ldr	r3, [pc, #344]	; (80014a0 <MX_TIM1_Init+0x1b4>)
 8001348:	2200      	movs	r2, #0
 800134a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 13;
 800134c:	4b54      	ldr	r3, [pc, #336]	; (80014a0 <MX_TIM1_Init+0x1b4>)
 800134e:	220d      	movs	r2, #13
 8001350:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001352:	4b53      	ldr	r3, [pc, #332]	; (80014a0 <MX_TIM1_Init+0x1b4>)
 8001354:	2280      	movs	r2, #128	; 0x80
 8001356:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001358:	4851      	ldr	r0, [pc, #324]	; (80014a0 <MX_TIM1_Init+0x1b4>)
 800135a:	f005 f88f 	bl	800647c <HAL_TIM_Base_Init>
 800135e:	4603      	mov	r3, r0
 8001360:	2b00      	cmp	r3, #0
 8001362:	d001      	beq.n	8001368 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8001364:	f000 faf0 	bl	8001948 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001368:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800136c:	663b      	str	r3, [r7, #96]	; 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800136e:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8001372:	4619      	mov	r1, r3
 8001374:	484a      	ldr	r0, [pc, #296]	; (80014a0 <MX_TIM1_Init+0x1b4>)
 8001376:	f006 f8ef 	bl	8007558 <HAL_TIM_ConfigClockSource>
 800137a:	4603      	mov	r3, r0
 800137c:	2b00      	cmp	r3, #0
 800137e:	d001      	beq.n	8001384 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8001380:	f000 fae2 	bl	8001948 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim1) != HAL_OK)
 8001384:	4846      	ldr	r0, [pc, #280]	; (80014a0 <MX_TIM1_Init+0x1b4>)
 8001386:	f005 f978 	bl	800667a <HAL_TIM_OC_Init>
 800138a:	4603      	mov	r3, r0
 800138c:	2b00      	cmp	r3, #0
 800138e:	d001      	beq.n	8001394 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8001390:	f000 fada 	bl	8001948 <Error_Handler>
  }
  if (HAL_TIM_OnePulse_Init(&htim1, TIM_OPMODE_SINGLE) != HAL_OK)
 8001394:	2108      	movs	r1, #8
 8001396:	4842      	ldr	r0, [pc, #264]	; (80014a0 <MX_TIM1_Init+0x1b4>)
 8001398:	f005 fdee 	bl	8006f78 <HAL_TIM_OnePulse_Init>
 800139c:	4603      	mov	r3, r0
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d001      	beq.n	80013a6 <MX_TIM1_Init+0xba>
  {
    Error_Handler();
 80013a2:	f000 fad1 	bl	8001948 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80013a6:	2320      	movs	r3, #32
 80013a8:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80013aa:	2300      	movs	r3, #0
 80013ac:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80013ae:	2300      	movs	r3, #0
 80013b0:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80013b2:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80013b6:	4619      	mov	r1, r3
 80013b8:	4839      	ldr	r0, [pc, #228]	; (80014a0 <MX_TIM1_Init+0x1b4>)
 80013ba:	f007 f8e1 	bl	8008580 <HAL_TIMEx_MasterConfigSynchronization>
 80013be:	4603      	mov	r3, r0
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d001      	beq.n	80013c8 <MX_TIM1_Init+0xdc>
  {
    Error_Handler();
 80013c4:	f000 fac0 	bl	8001948 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TOGGLE;
 80013c8:	2330      	movs	r3, #48	; 0x30
 80013ca:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 0;
 80013cc:	2300      	movs	r3, #0
 80013ce:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80013d0:	2300      	movs	r3, #0
 80013d2:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80013d4:	2300      	movs	r3, #0
 80013d6:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80013d8:	2300      	movs	r3, #0
 80013da:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80013dc:	2300      	movs	r3, #0
 80013de:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80013e0:	2300      	movs	r3, #0
 80013e2:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80013e4:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80013e8:	2200      	movs	r2, #0
 80013ea:	4619      	mov	r1, r3
 80013ec:	482c      	ldr	r0, [pc, #176]	; (80014a0 <MX_TIM1_Init+0x1b4>)
 80013ee:	f005 ff9d 	bl	800732c <HAL_TIM_OC_ConfigChannel>
 80013f2:	4603      	mov	r3, r0
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d001      	beq.n	80013fc <MX_TIM1_Init+0x110>
  {
    Error_Handler();
 80013f8:	f000 faa6 	bl	8001948 <Error_Handler>
  }
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80013fc:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001400:	2204      	movs	r2, #4
 8001402:	4619      	mov	r1, r3
 8001404:	4826      	ldr	r0, [pc, #152]	; (80014a0 <MX_TIM1_Init+0x1b4>)
 8001406:	f005 ff91 	bl	800732c <HAL_TIM_OC_ConfigChannel>
 800140a:	4603      	mov	r3, r0
 800140c:	2b00      	cmp	r3, #0
 800140e:	d001      	beq.n	8001414 <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 8001410:	f000 fa9a 	bl	8001948 <Error_Handler>
  }
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001414:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001418:	2208      	movs	r2, #8
 800141a:	4619      	mov	r1, r3
 800141c:	4820      	ldr	r0, [pc, #128]	; (80014a0 <MX_TIM1_Init+0x1b4>)
 800141e:	f005 ff85 	bl	800732c <HAL_TIM_OC_ConfigChannel>
 8001422:	4603      	mov	r3, r0
 8001424:	2b00      	cmp	r3, #0
 8001426:	d001      	beq.n	800142c <MX_TIM1_Init+0x140>
  {
    Error_Handler();
 8001428:	f000 fa8e 	bl	8001948 <Error_Handler>
  }
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800142c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001430:	220c      	movs	r2, #12
 8001432:	4619      	mov	r1, r3
 8001434:	481a      	ldr	r0, [pc, #104]	; (80014a0 <MX_TIM1_Init+0x1b4>)
 8001436:	f005 ff79 	bl	800732c <HAL_TIM_OC_ConfigChannel>
 800143a:	4603      	mov	r3, r0
 800143c:	2b00      	cmp	r3, #0
 800143e:	d001      	beq.n	8001444 <MX_TIM1_Init+0x158>
  {
    Error_Handler();
 8001440:	f000 fa82 	bl	8001948 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001444:	2300      	movs	r3, #0
 8001446:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001448:	2300      	movs	r3, #0
 800144a:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800144c:	2300      	movs	r3, #0
 800144e:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001450:	2300      	movs	r3, #0
 8001452:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001454:	2300      	movs	r3, #0
 8001456:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001458:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800145c:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800145e:	2300      	movs	r3, #0
 8001460:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8001462:	2300      	movs	r3, #0
 8001464:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001466:	2300      	movs	r3, #0
 8001468:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800146a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800146e:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001470:	2300      	movs	r3, #0
 8001472:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8001474:	2300      	movs	r3, #0
 8001476:	633b      	str	r3, [r7, #48]	; 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001478:	2300      	movs	r3, #0
 800147a:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800147c:	1d3b      	adds	r3, r7, #4
 800147e:	4619      	mov	r1, r3
 8001480:	4807      	ldr	r0, [pc, #28]	; (80014a0 <MX_TIM1_Init+0x1b4>)
 8001482:	f007 f913 	bl	80086ac <HAL_TIMEx_ConfigBreakDeadTime>
 8001486:	4603      	mov	r3, r0
 8001488:	2b00      	cmp	r3, #0
 800148a:	d001      	beq.n	8001490 <MX_TIM1_Init+0x1a4>
  {
    Error_Handler();
 800148c:	f000 fa5c 	bl	8001948 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001490:	4803      	ldr	r0, [pc, #12]	; (80014a0 <MX_TIM1_Init+0x1b4>)
 8001492:	f000 fc13 	bl	8001cbc <HAL_TIM_MspPostInit>

}
 8001496:	bf00      	nop
 8001498:	3770      	adds	r7, #112	; 0x70
 800149a:	46bd      	mov	sp, r7
 800149c:	bd80      	pop	{r7, pc}
 800149e:	bf00      	nop
 80014a0:	20000310 	.word	0x20000310
 80014a4:	40012c00 	.word	0x40012c00

080014a8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80014a8:	b580      	push	{r7, lr}
 80014aa:	b090      	sub	sp, #64	; 0x40
 80014ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80014ae:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80014b2:	2200      	movs	r2, #0
 80014b4:	601a      	str	r2, [r3, #0]
 80014b6:	605a      	str	r2, [r3, #4]
 80014b8:	609a      	str	r2, [r3, #8]
 80014ba:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 80014bc:	f107 031c 	add.w	r3, r7, #28
 80014c0:	2200      	movs	r2, #0
 80014c2:	601a      	str	r2, [r3, #0]
 80014c4:	605a      	str	r2, [r3, #4]
 80014c6:	609a      	str	r2, [r3, #8]
 80014c8:	60da      	str	r2, [r3, #12]
 80014ca:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80014cc:	f107 0310 	add.w	r3, r7, #16
 80014d0:	2200      	movs	r2, #0
 80014d2:	601a      	str	r2, [r3, #0]
 80014d4:	605a      	str	r2, [r3, #4]
 80014d6:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80014d8:	463b      	mov	r3, r7
 80014da:	2200      	movs	r2, #0
 80014dc:	601a      	str	r2, [r3, #0]
 80014de:	605a      	str	r2, [r3, #4]
 80014e0:	609a      	str	r2, [r3, #8]
 80014e2:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80014e4:	4b33      	ldr	r3, [pc, #204]	; (80015b4 <MX_TIM2_Init+0x10c>)
 80014e6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80014ea:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80014ec:	4b31      	ldr	r3, [pc, #196]	; (80015b4 <MX_TIM2_Init+0x10c>)
 80014ee:	2200      	movs	r2, #0
 80014f0:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014f2:	4b30      	ldr	r3, [pc, #192]	; (80015b4 <MX_TIM2_Init+0x10c>)
 80014f4:	2200      	movs	r2, #0
 80014f6:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4.294967295E9;
 80014f8:	4b2e      	ldr	r3, [pc, #184]	; (80015b4 <MX_TIM2_Init+0x10c>)
 80014fa:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80014fe:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001500:	4b2c      	ldr	r3, [pc, #176]	; (80015b4 <MX_TIM2_Init+0x10c>)
 8001502:	2200      	movs	r2, #0
 8001504:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001506:	4b2b      	ldr	r3, [pc, #172]	; (80015b4 <MX_TIM2_Init+0x10c>)
 8001508:	2280      	movs	r2, #128	; 0x80
 800150a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800150c:	4829      	ldr	r0, [pc, #164]	; (80015b4 <MX_TIM2_Init+0x10c>)
 800150e:	f004 ffb5 	bl	800647c <HAL_TIM_Base_Init>
 8001512:	4603      	mov	r3, r0
 8001514:	2b00      	cmp	r3, #0
 8001516:	d001      	beq.n	800151c <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 8001518:	f000 fa16 	bl	8001948 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800151c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001520:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001522:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001526:	4619      	mov	r1, r3
 8001528:	4822      	ldr	r0, [pc, #136]	; (80015b4 <MX_TIM2_Init+0x10c>)
 800152a:	f006 f815 	bl	8007558 <HAL_TIM_ConfigClockSource>
 800152e:	4603      	mov	r3, r0
 8001530:	2b00      	cmp	r3, #0
 8001532:	d001      	beq.n	8001538 <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 8001534:	f000 fa08 	bl	8001948 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 8001538:	481e      	ldr	r0, [pc, #120]	; (80015b4 <MX_TIM2_Init+0x10c>)
 800153a:	f005 faad 	bl	8006a98 <HAL_TIM_IC_Init>
 800153e:	4603      	mov	r3, r0
 8001540:	2b00      	cmp	r3, #0
 8001542:	d001      	beq.n	8001548 <MX_TIM2_Init+0xa0>
  {
    Error_Handler();
 8001544:	f000 fa00 	bl	8001948 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 8001548:	2304      	movs	r3, #4
 800154a:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.InputTrigger = TIM_TS_ITR2;
 800154c:	2320      	movs	r3, #32
 800154e:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_SlaveConfigSynchro(&htim2, &sSlaveConfig) != HAL_OK)
 8001550:	f107 031c 	add.w	r3, r7, #28
 8001554:	4619      	mov	r1, r3
 8001556:	4817      	ldr	r0, [pc, #92]	; (80015b4 <MX_TIM2_Init+0x10c>)
 8001558:	f006 f90a 	bl	8007770 <HAL_TIM_SlaveConfigSynchro>
 800155c:	4603      	mov	r3, r0
 800155e:	2b00      	cmp	r3, #0
 8001560:	d001      	beq.n	8001566 <MX_TIM2_Init+0xbe>
  {
    Error_Handler();
 8001562:	f000 f9f1 	bl	8001948 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001566:	2300      	movs	r3, #0
 8001568:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800156a:	2300      	movs	r3, #0
 800156c:	61bb      	str	r3, [r7, #24]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800156e:	f107 0310 	add.w	r3, r7, #16
 8001572:	4619      	mov	r1, r3
 8001574:	480f      	ldr	r0, [pc, #60]	; (80015b4 <MX_TIM2_Init+0x10c>)
 8001576:	f007 f803 	bl	8008580 <HAL_TIMEx_MasterConfigSynchronization>
 800157a:	4603      	mov	r3, r0
 800157c:	2b00      	cmp	r3, #0
 800157e:	d001      	beq.n	8001584 <MX_TIM2_Init+0xdc>
  {
    Error_Handler();
 8001580:	f000 f9e2 	bl	8001948 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001584:	2300      	movs	r3, #0
 8001586:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001588:	2301      	movs	r3, #1
 800158a:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 800158c:	2300      	movs	r3, #0
 800158e:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8001590:	2300      	movs	r3, #0
 8001592:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8001594:	463b      	mov	r3, r7
 8001596:	2204      	movs	r2, #4
 8001598:	4619      	mov	r1, r3
 800159a:	4806      	ldr	r0, [pc, #24]	; (80015b4 <MX_TIM2_Init+0x10c>)
 800159c:	f005 ff40 	bl	8007420 <HAL_TIM_IC_ConfigChannel>
 80015a0:	4603      	mov	r3, r0
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d001      	beq.n	80015aa <MX_TIM2_Init+0x102>
  {
    Error_Handler();
 80015a6:	f000 f9cf 	bl	8001948 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80015aa:	bf00      	nop
 80015ac:	3740      	adds	r7, #64	; 0x40
 80015ae:	46bd      	mov	sp, r7
 80015b0:	bd80      	pop	{r7, pc}
 80015b2:	bf00      	nop
 80015b4:	2000035c 	.word	0x2000035c

080015b8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80015b8:	b580      	push	{r7, lr}
 80015ba:	b094      	sub	sp, #80	; 0x50
 80015bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80015be:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80015c2:	2200      	movs	r2, #0
 80015c4:	601a      	str	r2, [r3, #0]
 80015c6:	605a      	str	r2, [r3, #4]
 80015c8:	609a      	str	r2, [r3, #8]
 80015ca:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 80015cc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80015d0:	2200      	movs	r2, #0
 80015d2:	601a      	str	r2, [r3, #0]
 80015d4:	605a      	str	r2, [r3, #4]
 80015d6:	609a      	str	r2, [r3, #8]
 80015d8:	60da      	str	r2, [r3, #12]
 80015da:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80015dc:	f107 0320 	add.w	r3, r7, #32
 80015e0:	2200      	movs	r2, #0
 80015e2:	601a      	str	r2, [r3, #0]
 80015e4:	605a      	str	r2, [r3, #4]
 80015e6:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80015e8:	1d3b      	adds	r3, r7, #4
 80015ea:	2200      	movs	r2, #0
 80015ec:	601a      	str	r2, [r3, #0]
 80015ee:	605a      	str	r2, [r3, #4]
 80015f0:	609a      	str	r2, [r3, #8]
 80015f2:	60da      	str	r2, [r3, #12]
 80015f4:	611a      	str	r2, [r3, #16]
 80015f6:	615a      	str	r2, [r3, #20]
 80015f8:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80015fa:	4b37      	ldr	r3, [pc, #220]	; (80016d8 <MX_TIM3_Init+0x120>)
 80015fc:	4a37      	ldr	r2, [pc, #220]	; (80016dc <MX_TIM3_Init+0x124>)
 80015fe:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001600:	4b35      	ldr	r3, [pc, #212]	; (80016d8 <MX_TIM3_Init+0x120>)
 8001602:	2200      	movs	r2, #0
 8001604:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001606:	4b34      	ldr	r3, [pc, #208]	; (80016d8 <MX_TIM3_Init+0x120>)
 8001608:	2200      	movs	r2, #0
 800160a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 800160c:	4b32      	ldr	r3, [pc, #200]	; (80016d8 <MX_TIM3_Init+0x120>)
 800160e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001612:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001614:	4b30      	ldr	r3, [pc, #192]	; (80016d8 <MX_TIM3_Init+0x120>)
 8001616:	2200      	movs	r2, #0
 8001618:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800161a:	4b2f      	ldr	r3, [pc, #188]	; (80016d8 <MX_TIM3_Init+0x120>)
 800161c:	2280      	movs	r2, #128	; 0x80
 800161e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001620:	482d      	ldr	r0, [pc, #180]	; (80016d8 <MX_TIM3_Init+0x120>)
 8001622:	f004 ff2b 	bl	800647c <HAL_TIM_Base_Init>
 8001626:	4603      	mov	r3, r0
 8001628:	2b00      	cmp	r3, #0
 800162a:	d001      	beq.n	8001630 <MX_TIM3_Init+0x78>
  {
    Error_Handler();
 800162c:	f000 f98c 	bl	8001948 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001630:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001634:	643b      	str	r3, [r7, #64]	; 0x40
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001636:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800163a:	4619      	mov	r1, r3
 800163c:	4826      	ldr	r0, [pc, #152]	; (80016d8 <MX_TIM3_Init+0x120>)
 800163e:	f005 ff8b 	bl	8007558 <HAL_TIM_ConfigClockSource>
 8001642:	4603      	mov	r3, r0
 8001644:	2b00      	cmp	r3, #0
 8001646:	d001      	beq.n	800164c <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8001648:	f000 f97e 	bl	8001948 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim3) != HAL_OK)
 800164c:	4822      	ldr	r0, [pc, #136]	; (80016d8 <MX_TIM3_Init+0x120>)
 800164e:	f005 f814 	bl	800667a <HAL_TIM_OC_Init>
 8001652:	4603      	mov	r3, r0
 8001654:	2b00      	cmp	r3, #0
 8001656:	d001      	beq.n	800165c <MX_TIM3_Init+0xa4>
  {
    Error_Handler();
 8001658:	f000 f976 	bl	8001948 <Error_Handler>
  }
  if (HAL_TIM_OnePulse_Init(&htim3, TIM_OPMODE_SINGLE) != HAL_OK)
 800165c:	2108      	movs	r1, #8
 800165e:	481e      	ldr	r0, [pc, #120]	; (80016d8 <MX_TIM3_Init+0x120>)
 8001660:	f005 fc8a 	bl	8006f78 <HAL_TIM_OnePulse_Init>
 8001664:	4603      	mov	r3, r0
 8001666:	2b00      	cmp	r3, #0
 8001668:	d001      	beq.n	800166e <MX_TIM3_Init+0xb6>
  {
    Error_Handler();
 800166a:	f000 f96d 	bl	8001948 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_TRIGGER;
 800166e:	2306      	movs	r3, #6
 8001670:	62fb      	str	r3, [r7, #44]	; 0x2c
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 8001672:	2300      	movs	r3, #0
 8001674:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIM_SlaveConfigSynchro(&htim3, &sSlaveConfig) != HAL_OK)
 8001676:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800167a:	4619      	mov	r1, r3
 800167c:	4816      	ldr	r0, [pc, #88]	; (80016d8 <MX_TIM3_Init+0x120>)
 800167e:	f006 f877 	bl	8007770 <HAL_TIM_SlaveConfigSynchro>
 8001682:	4603      	mov	r3, r0
 8001684:	2b00      	cmp	r3, #0
 8001686:	d001      	beq.n	800168c <MX_TIM3_Init+0xd4>
  {
    Error_Handler();
 8001688:	f000 f95e 	bl	8001948 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800168c:	2320      	movs	r3, #32
 800168e:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001690:	2300      	movs	r3, #0
 8001692:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001694:	f107 0320 	add.w	r3, r7, #32
 8001698:	4619      	mov	r1, r3
 800169a:	480f      	ldr	r0, [pc, #60]	; (80016d8 <MX_TIM3_Init+0x120>)
 800169c:	f006 ff70 	bl	8008580 <HAL_TIMEx_MasterConfigSynchronization>
 80016a0:	4603      	mov	r3, r0
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d001      	beq.n	80016aa <MX_TIM3_Init+0xf2>
  {
    Error_Handler();
 80016a6:	f000 f94f 	bl	8001948 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_ACTIVE;
 80016aa:	2310      	movs	r3, #16
 80016ac:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80016ae:	2300      	movs	r3, #0
 80016b0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80016b2:	2300      	movs	r3, #0
 80016b4:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80016b6:	2300      	movs	r3, #0
 80016b8:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80016ba:	1d3b      	adds	r3, r7, #4
 80016bc:	2200      	movs	r2, #0
 80016be:	4619      	mov	r1, r3
 80016c0:	4805      	ldr	r0, [pc, #20]	; (80016d8 <MX_TIM3_Init+0x120>)
 80016c2:	f005 fe33 	bl	800732c <HAL_TIM_OC_ConfigChannel>
 80016c6:	4603      	mov	r3, r0
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d001      	beq.n	80016d0 <MX_TIM3_Init+0x118>
  {
    Error_Handler();
 80016cc:	f000 f93c 	bl	8001948 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80016d0:	bf00      	nop
 80016d2:	3750      	adds	r7, #80	; 0x50
 80016d4:	46bd      	mov	sp, r7
 80016d6:	bd80      	pop	{r7, pc}
 80016d8:	200003a8 	.word	0x200003a8
 80016dc:	40000400 	.word	0x40000400

080016e0 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80016e0:	b580      	push	{r7, lr}
 80016e2:	b088      	sub	sp, #32
 80016e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80016e6:	f107 0310 	add.w	r3, r7, #16
 80016ea:	2200      	movs	r2, #0
 80016ec:	601a      	str	r2, [r3, #0]
 80016ee:	605a      	str	r2, [r3, #4]
 80016f0:	609a      	str	r2, [r3, #8]
 80016f2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80016f4:	1d3b      	adds	r3, r7, #4
 80016f6:	2200      	movs	r2, #0
 80016f8:	601a      	str	r2, [r3, #0]
 80016fa:	605a      	str	r2, [r3, #4]
 80016fc:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80016fe:	4b1d      	ldr	r3, [pc, #116]	; (8001774 <MX_TIM4_Init+0x94>)
 8001700:	4a1d      	ldr	r2, [pc, #116]	; (8001778 <MX_TIM4_Init+0x98>)
 8001702:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 12;
 8001704:	4b1b      	ldr	r3, [pc, #108]	; (8001774 <MX_TIM4_Init+0x94>)
 8001706:	220c      	movs	r2, #12
 8001708:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800170a:	4b1a      	ldr	r3, [pc, #104]	; (8001774 <MX_TIM4_Init+0x94>)
 800170c:	2200      	movs	r2, #0
 800170e:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8001710:	4b18      	ldr	r3, [pc, #96]	; (8001774 <MX_TIM4_Init+0x94>)
 8001712:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001716:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001718:	4b16      	ldr	r3, [pc, #88]	; (8001774 <MX_TIM4_Init+0x94>)
 800171a:	2200      	movs	r2, #0
 800171c:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800171e:	4b15      	ldr	r3, [pc, #84]	; (8001774 <MX_TIM4_Init+0x94>)
 8001720:	2200      	movs	r2, #0
 8001722:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001724:	4813      	ldr	r0, [pc, #76]	; (8001774 <MX_TIM4_Init+0x94>)
 8001726:	f004 fea9 	bl	800647c <HAL_TIM_Base_Init>
 800172a:	4603      	mov	r3, r0
 800172c:	2b00      	cmp	r3, #0
 800172e:	d001      	beq.n	8001734 <MX_TIM4_Init+0x54>
  {
    Error_Handler();
 8001730:	f000 f90a 	bl	8001948 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001734:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001738:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 800173a:	f107 0310 	add.w	r3, r7, #16
 800173e:	4619      	mov	r1, r3
 8001740:	480c      	ldr	r0, [pc, #48]	; (8001774 <MX_TIM4_Init+0x94>)
 8001742:	f005 ff09 	bl	8007558 <HAL_TIM_ConfigClockSource>
 8001746:	4603      	mov	r3, r0
 8001748:	2b00      	cmp	r3, #0
 800174a:	d001      	beq.n	8001750 <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 800174c:	f000 f8fc 	bl	8001948 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001750:	2300      	movs	r3, #0
 8001752:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001754:	2300      	movs	r3, #0
 8001756:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001758:	1d3b      	adds	r3, r7, #4
 800175a:	4619      	mov	r1, r3
 800175c:	4805      	ldr	r0, [pc, #20]	; (8001774 <MX_TIM4_Init+0x94>)
 800175e:	f006 ff0f 	bl	8008580 <HAL_TIMEx_MasterConfigSynchronization>
 8001762:	4603      	mov	r3, r0
 8001764:	2b00      	cmp	r3, #0
 8001766:	d001      	beq.n	800176c <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 8001768:	f000 f8ee 	bl	8001948 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 800176c:	bf00      	nop
 800176e:	3720      	adds	r7, #32
 8001770:	46bd      	mov	sp, r7
 8001772:	bd80      	pop	{r7, pc}
 8001774:	200003f4 	.word	0x200003f4
 8001778:	40000800 	.word	0x40000800

0800177c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800177c:	b580      	push	{r7, lr}
 800177e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001780:	4b22      	ldr	r3, [pc, #136]	; (800180c <MX_USART1_UART_Init+0x90>)
 8001782:	4a23      	ldr	r2, [pc, #140]	; (8001810 <MX_USART1_UART_Init+0x94>)
 8001784:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 460800;
 8001786:	4b21      	ldr	r3, [pc, #132]	; (800180c <MX_USART1_UART_Init+0x90>)
 8001788:	f44f 22e1 	mov.w	r2, #460800	; 0x70800
 800178c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800178e:	4b1f      	ldr	r3, [pc, #124]	; (800180c <MX_USART1_UART_Init+0x90>)
 8001790:	2200      	movs	r2, #0
 8001792:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001794:	4b1d      	ldr	r3, [pc, #116]	; (800180c <MX_USART1_UART_Init+0x90>)
 8001796:	2200      	movs	r2, #0
 8001798:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800179a:	4b1c      	ldr	r3, [pc, #112]	; (800180c <MX_USART1_UART_Init+0x90>)
 800179c:	2200      	movs	r2, #0
 800179e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80017a0:	4b1a      	ldr	r3, [pc, #104]	; (800180c <MX_USART1_UART_Init+0x90>)
 80017a2:	220c      	movs	r2, #12
 80017a4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80017a6:	4b19      	ldr	r3, [pc, #100]	; (800180c <MX_USART1_UART_Init+0x90>)
 80017a8:	2200      	movs	r2, #0
 80017aa:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80017ac:	4b17      	ldr	r3, [pc, #92]	; (800180c <MX_USART1_UART_Init+0x90>)
 80017ae:	2200      	movs	r2, #0
 80017b0:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80017b2:	4b16      	ldr	r3, [pc, #88]	; (800180c <MX_USART1_UART_Init+0x90>)
 80017b4:	2200      	movs	r2, #0
 80017b6:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80017b8:	4b14      	ldr	r3, [pc, #80]	; (800180c <MX_USART1_UART_Init+0x90>)
 80017ba:	2200      	movs	r2, #0
 80017bc:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80017be:	4b13      	ldr	r3, [pc, #76]	; (800180c <MX_USART1_UART_Init+0x90>)
 80017c0:	2200      	movs	r2, #0
 80017c2:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80017c4:	4811      	ldr	r0, [pc, #68]	; (800180c <MX_USART1_UART_Init+0x90>)
 80017c6:	f007 f869 	bl	800889c <HAL_UART_Init>
 80017ca:	4603      	mov	r3, r0
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d001      	beq.n	80017d4 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 80017d0:	f000 f8ba 	bl	8001948 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80017d4:	2100      	movs	r1, #0
 80017d6:	480d      	ldr	r0, [pc, #52]	; (800180c <MX_USART1_UART_Init+0x90>)
 80017d8:	f007 fe30 	bl	800943c <HAL_UARTEx_SetTxFifoThreshold>
 80017dc:	4603      	mov	r3, r0
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d001      	beq.n	80017e6 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 80017e2:	f000 f8b1 	bl	8001948 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80017e6:	2100      	movs	r1, #0
 80017e8:	4808      	ldr	r0, [pc, #32]	; (800180c <MX_USART1_UART_Init+0x90>)
 80017ea:	f007 fe65 	bl	80094b8 <HAL_UARTEx_SetRxFifoThreshold>
 80017ee:	4603      	mov	r3, r0
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d001      	beq.n	80017f8 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 80017f4:	f000 f8a8 	bl	8001948 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80017f8:	4804      	ldr	r0, [pc, #16]	; (800180c <MX_USART1_UART_Init+0x90>)
 80017fa:	f007 fde6 	bl	80093ca <HAL_UARTEx_DisableFifoMode>
 80017fe:	4603      	mov	r3, r0
 8001800:	2b00      	cmp	r3, #0
 8001802:	d001      	beq.n	8001808 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8001804:	f000 f8a0 	bl	8001948 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001808:	bf00      	nop
 800180a:	bd80      	pop	{r7, pc}
 800180c:	20000440 	.word	0x20000440
 8001810:	40013800 	.word	0x40013800

08001814 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001814:	b580      	push	{r7, lr}
 8001816:	b082      	sub	sp, #8
 8001818:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 800181a:	4b12      	ldr	r3, [pc, #72]	; (8001864 <MX_DMA_Init+0x50>)
 800181c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800181e:	4a11      	ldr	r2, [pc, #68]	; (8001864 <MX_DMA_Init+0x50>)
 8001820:	f043 0304 	orr.w	r3, r3, #4
 8001824:	6493      	str	r3, [r2, #72]	; 0x48
 8001826:	4b0f      	ldr	r3, [pc, #60]	; (8001864 <MX_DMA_Init+0x50>)
 8001828:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800182a:	f003 0304 	and.w	r3, r3, #4
 800182e:	607b      	str	r3, [r7, #4]
 8001830:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001832:	4b0c      	ldr	r3, [pc, #48]	; (8001864 <MX_DMA_Init+0x50>)
 8001834:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001836:	4a0b      	ldr	r2, [pc, #44]	; (8001864 <MX_DMA_Init+0x50>)
 8001838:	f043 0301 	orr.w	r3, r3, #1
 800183c:	6493      	str	r3, [r2, #72]	; 0x48
 800183e:	4b09      	ldr	r3, [pc, #36]	; (8001864 <MX_DMA_Init+0x50>)
 8001840:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001842:	f003 0301 	and.w	r3, r3, #1
 8001846:	603b      	str	r3, [r7, #0]
 8001848:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800184a:	2200      	movs	r2, #0
 800184c:	2100      	movs	r1, #0
 800184e:	200b      	movs	r0, #11
 8001850:	f002 fcc5 	bl	80041de <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001854:	200b      	movs	r0, #11
 8001856:	f002 fcdc 	bl	8004212 <HAL_NVIC_EnableIRQ>

}
 800185a:	bf00      	nop
 800185c:	3708      	adds	r7, #8
 800185e:	46bd      	mov	sp, r7
 8001860:	bd80      	pop	{r7, pc}
 8001862:	bf00      	nop
 8001864:	40021000 	.word	0x40021000

08001868 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001868:	b580      	push	{r7, lr}
 800186a:	b08a      	sub	sp, #40	; 0x28
 800186c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800186e:	f107 0314 	add.w	r3, r7, #20
 8001872:	2200      	movs	r2, #0
 8001874:	601a      	str	r2, [r3, #0]
 8001876:	605a      	str	r2, [r3, #4]
 8001878:	609a      	str	r2, [r3, #8]
 800187a:	60da      	str	r2, [r3, #12]
 800187c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800187e:	4b2f      	ldr	r3, [pc, #188]	; (800193c <MX_GPIO_Init+0xd4>)
 8001880:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001882:	4a2e      	ldr	r2, [pc, #184]	; (800193c <MX_GPIO_Init+0xd4>)
 8001884:	f043 0304 	orr.w	r3, r3, #4
 8001888:	64d3      	str	r3, [r2, #76]	; 0x4c
 800188a:	4b2c      	ldr	r3, [pc, #176]	; (800193c <MX_GPIO_Init+0xd4>)
 800188c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800188e:	f003 0304 	and.w	r3, r3, #4
 8001892:	613b      	str	r3, [r7, #16]
 8001894:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001896:	4b29      	ldr	r3, [pc, #164]	; (800193c <MX_GPIO_Init+0xd4>)
 8001898:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800189a:	4a28      	ldr	r2, [pc, #160]	; (800193c <MX_GPIO_Init+0xd4>)
 800189c:	f043 0320 	orr.w	r3, r3, #32
 80018a0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80018a2:	4b26      	ldr	r3, [pc, #152]	; (800193c <MX_GPIO_Init+0xd4>)
 80018a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018a6:	f003 0320 	and.w	r3, r3, #32
 80018aa:	60fb      	str	r3, [r7, #12]
 80018ac:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80018ae:	4b23      	ldr	r3, [pc, #140]	; (800193c <MX_GPIO_Init+0xd4>)
 80018b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018b2:	4a22      	ldr	r2, [pc, #136]	; (800193c <MX_GPIO_Init+0xd4>)
 80018b4:	f043 0301 	orr.w	r3, r3, #1
 80018b8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80018ba:	4b20      	ldr	r3, [pc, #128]	; (800193c <MX_GPIO_Init+0xd4>)
 80018bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018be:	f003 0301 	and.w	r3, r3, #1
 80018c2:	60bb      	str	r3, [r7, #8]
 80018c4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80018c6:	4b1d      	ldr	r3, [pc, #116]	; (800193c <MX_GPIO_Init+0xd4>)
 80018c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018ca:	4a1c      	ldr	r2, [pc, #112]	; (800193c <MX_GPIO_Init+0xd4>)
 80018cc:	f043 0302 	orr.w	r3, r3, #2
 80018d0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80018d2:	4b1a      	ldr	r3, [pc, #104]	; (800193c <MX_GPIO_Init+0xd4>)
 80018d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018d6:	f003 0302 	and.w	r3, r3, #2
 80018da:	607b      	str	r3, [r7, #4]
 80018dc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 80018de:	2200      	movs	r2, #0
 80018e0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80018e4:	4816      	ldr	r0, [pc, #88]	; (8001940 <MX_GPIO_Init+0xd8>)
 80018e6:	f003 f901 	bl	8004aec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, selZ1_Pin|selZ2_Pin|selZ3_Pin|selZ4_Pin, GPIO_PIN_RESET);
 80018ea:	2200      	movs	r2, #0
 80018ec:	f44f 41f0 	mov.w	r1, #30720	; 0x7800
 80018f0:	4814      	ldr	r0, [pc, #80]	; (8001944 <MX_GPIO_Init+0xdc>)
 80018f2:	f003 f8fb 	bl	8004aec <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 80018f6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80018fa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018fc:	2301      	movs	r3, #1
 80018fe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001900:	2300      	movs	r3, #0
 8001902:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001904:	2300      	movs	r3, #0
 8001906:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8001908:	f107 0314 	add.w	r3, r7, #20
 800190c:	4619      	mov	r1, r3
 800190e:	480c      	ldr	r0, [pc, #48]	; (8001940 <MX_GPIO_Init+0xd8>)
 8001910:	f002 ff6a 	bl	80047e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : selZ1_Pin selZ2_Pin selZ3_Pin selZ4_Pin */
  GPIO_InitStruct.Pin = selZ1_Pin|selZ2_Pin|selZ3_Pin|selZ4_Pin;
 8001914:	f44f 43f0 	mov.w	r3, #30720	; 0x7800
 8001918:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800191a:	2301      	movs	r3, #1
 800191c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800191e:	2300      	movs	r3, #0
 8001920:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001922:	2300      	movs	r3, #0
 8001924:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001926:	f107 0314 	add.w	r3, r7, #20
 800192a:	4619      	mov	r1, r3
 800192c:	4805      	ldr	r0, [pc, #20]	; (8001944 <MX_GPIO_Init+0xdc>)
 800192e:	f002 ff5b 	bl	80047e8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001932:	bf00      	nop
 8001934:	3728      	adds	r7, #40	; 0x28
 8001936:	46bd      	mov	sp, r7
 8001938:	bd80      	pop	{r7, pc}
 800193a:	bf00      	nop
 800193c:	40021000 	.word	0x40021000
 8001940:	48000800 	.word	0x48000800
 8001944:	48000400 	.word	0x48000400

08001948 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001948:	b480      	push	{r7}
 800194a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800194c:	b672      	cpsid	i
}
 800194e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001950:	e7fe      	b.n	8001950 <Error_Handler+0x8>
	...

08001954 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001954:	b480      	push	{r7}
 8001956:	b083      	sub	sp, #12
 8001958:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800195a:	4b0f      	ldr	r3, [pc, #60]	; (8001998 <HAL_MspInit+0x44>)
 800195c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800195e:	4a0e      	ldr	r2, [pc, #56]	; (8001998 <HAL_MspInit+0x44>)
 8001960:	f043 0301 	orr.w	r3, r3, #1
 8001964:	6613      	str	r3, [r2, #96]	; 0x60
 8001966:	4b0c      	ldr	r3, [pc, #48]	; (8001998 <HAL_MspInit+0x44>)
 8001968:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800196a:	f003 0301 	and.w	r3, r3, #1
 800196e:	607b      	str	r3, [r7, #4]
 8001970:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001972:	4b09      	ldr	r3, [pc, #36]	; (8001998 <HAL_MspInit+0x44>)
 8001974:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001976:	4a08      	ldr	r2, [pc, #32]	; (8001998 <HAL_MspInit+0x44>)
 8001978:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800197c:	6593      	str	r3, [r2, #88]	; 0x58
 800197e:	4b06      	ldr	r3, [pc, #24]	; (8001998 <HAL_MspInit+0x44>)
 8001980:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001982:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001986:	603b      	str	r3, [r7, #0]
 8001988:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800198a:	bf00      	nop
 800198c:	370c      	adds	r7, #12
 800198e:	46bd      	mov	sp, r7
 8001990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001994:	4770      	bx	lr
 8001996:	bf00      	nop
 8001998:	40021000 	.word	0x40021000

0800199c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800199c:	b580      	push	{r7, lr}
 800199e:	b09e      	sub	sp, #120	; 0x78
 80019a0:	af00      	add	r7, sp, #0
 80019a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019a4:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80019a8:	2200      	movs	r2, #0
 80019aa:	601a      	str	r2, [r3, #0]
 80019ac:	605a      	str	r2, [r3, #4]
 80019ae:	609a      	str	r2, [r3, #8]
 80019b0:	60da      	str	r2, [r3, #12]
 80019b2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80019b4:	f107 0310 	add.w	r3, r7, #16
 80019b8:	2254      	movs	r2, #84	; 0x54
 80019ba:	2100      	movs	r1, #0
 80019bc:	4618      	mov	r0, r3
 80019be:	f007 fe31 	bl	8009624 <memset>
  if(hadc->Instance==ADC1)
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80019ca:	d15f      	bne.n	8001a8c <HAL_ADC_MspInit+0xf0>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 80019cc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80019d0:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 80019d2:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 80019d6:	657b      	str	r3, [r7, #84]	; 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80019d8:	f107 0310 	add.w	r3, r7, #16
 80019dc:	4618      	mov	r0, r3
 80019de:	f004 faff 	bl	8005fe0 <HAL_RCCEx_PeriphCLKConfig>
 80019e2:	4603      	mov	r3, r0
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d001      	beq.n	80019ec <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 80019e8:	f7ff ffae 	bl	8001948 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 80019ec:	4b29      	ldr	r3, [pc, #164]	; (8001a94 <HAL_ADC_MspInit+0xf8>)
 80019ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019f0:	4a28      	ldr	r2, [pc, #160]	; (8001a94 <HAL_ADC_MspInit+0xf8>)
 80019f2:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80019f6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80019f8:	4b26      	ldr	r3, [pc, #152]	; (8001a94 <HAL_ADC_MspInit+0xf8>)
 80019fa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019fc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001a00:	60fb      	str	r3, [r7, #12]
 8001a02:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a04:	4b23      	ldr	r3, [pc, #140]	; (8001a94 <HAL_ADC_MspInit+0xf8>)
 8001a06:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a08:	4a22      	ldr	r2, [pc, #136]	; (8001a94 <HAL_ADC_MspInit+0xf8>)
 8001a0a:	f043 0301 	orr.w	r3, r3, #1
 8001a0e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001a10:	4b20      	ldr	r3, [pc, #128]	; (8001a94 <HAL_ADC_MspInit+0xf8>)
 8001a12:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a14:	f003 0301 	and.w	r3, r3, #1
 8001a18:	60bb      	str	r3, [r7, #8]
 8001a1a:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = AIn_Pin;
 8001a1c:	2301      	movs	r3, #1
 8001a1e:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001a20:	2303      	movs	r3, #3
 8001a22:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a24:	2300      	movs	r3, #0
 8001a26:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(AIn_GPIO_Port, &GPIO_InitStruct);
 8001a28:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001a2c:	4619      	mov	r1, r3
 8001a2e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001a32:	f002 fed9 	bl	80047e8 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8001a36:	4b18      	ldr	r3, [pc, #96]	; (8001a98 <HAL_ADC_MspInit+0xfc>)
 8001a38:	4a18      	ldr	r2, [pc, #96]	; (8001a9c <HAL_ADC_MspInit+0x100>)
 8001a3a:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8001a3c:	4b16      	ldr	r3, [pc, #88]	; (8001a98 <HAL_ADC_MspInit+0xfc>)
 8001a3e:	2205      	movs	r2, #5
 8001a40:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001a42:	4b15      	ldr	r3, [pc, #84]	; (8001a98 <HAL_ADC_MspInit+0xfc>)
 8001a44:	2200      	movs	r2, #0
 8001a46:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001a48:	4b13      	ldr	r3, [pc, #76]	; (8001a98 <HAL_ADC_MspInit+0xfc>)
 8001a4a:	2200      	movs	r2, #0
 8001a4c:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001a4e:	4b12      	ldr	r3, [pc, #72]	; (8001a98 <HAL_ADC_MspInit+0xfc>)
 8001a50:	2280      	movs	r2, #128	; 0x80
 8001a52:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001a54:	4b10      	ldr	r3, [pc, #64]	; (8001a98 <HAL_ADC_MspInit+0xfc>)
 8001a56:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001a5a:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001a5c:	4b0e      	ldr	r3, [pc, #56]	; (8001a98 <HAL_ADC_MspInit+0xfc>)
 8001a5e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001a62:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8001a64:	4b0c      	ldr	r3, [pc, #48]	; (8001a98 <HAL_ADC_MspInit+0xfc>)
 8001a66:	2200      	movs	r2, #0
 8001a68:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001a6a:	4b0b      	ldr	r3, [pc, #44]	; (8001a98 <HAL_ADC_MspInit+0xfc>)
 8001a6c:	2200      	movs	r2, #0
 8001a6e:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001a70:	4809      	ldr	r0, [pc, #36]	; (8001a98 <HAL_ADC_MspInit+0xfc>)
 8001a72:	f002 fbed 	bl	8004250 <HAL_DMA_Init>
 8001a76:	4603      	mov	r3, r0
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d001      	beq.n	8001a80 <HAL_ADC_MspInit+0xe4>
    {
      Error_Handler();
 8001a7c:	f7ff ff64 	bl	8001948 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	4a05      	ldr	r2, [pc, #20]	; (8001a98 <HAL_ADC_MspInit+0xfc>)
 8001a84:	655a      	str	r2, [r3, #84]	; 0x54
 8001a86:	4a04      	ldr	r2, [pc, #16]	; (8001a98 <HAL_ADC_MspInit+0xfc>)
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001a8c:	bf00      	nop
 8001a8e:	3778      	adds	r7, #120	; 0x78
 8001a90:	46bd      	mov	sp, r7
 8001a92:	bd80      	pop	{r7, pc}
 8001a94:	40021000 	.word	0x40021000
 8001a98:	20000264 	.word	0x20000264
 8001a9c:	40020008 	.word	0x40020008

08001aa0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001aa0:	b580      	push	{r7, lr}
 8001aa2:	b0a0      	sub	sp, #128	; 0x80
 8001aa4:	af00      	add	r7, sp, #0
 8001aa6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001aa8:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001aac:	2200      	movs	r2, #0
 8001aae:	601a      	str	r2, [r3, #0]
 8001ab0:	605a      	str	r2, [r3, #4]
 8001ab2:	609a      	str	r2, [r3, #8]
 8001ab4:	60da      	str	r2, [r3, #12]
 8001ab6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001ab8:	f107 0318 	add.w	r3, r7, #24
 8001abc:	2254      	movs	r2, #84	; 0x54
 8001abe:	2100      	movs	r1, #0
 8001ac0:	4618      	mov	r0, r3
 8001ac2:	f007 fdaf 	bl	8009624 <memset>
  if(hi2c->Instance==I2C1)
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	4a2e      	ldr	r2, [pc, #184]	; (8001b84 <HAL_I2C_MspInit+0xe4>)
 8001acc:	4293      	cmp	r3, r2
 8001ace:	d154      	bne.n	8001b7a <HAL_I2C_MspInit+0xda>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001ad0:	2340      	movs	r3, #64	; 0x40
 8001ad2:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001ad4:	2300      	movs	r3, #0
 8001ad6:	637b      	str	r3, [r7, #52]	; 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001ad8:	f107 0318 	add.w	r3, r7, #24
 8001adc:	4618      	mov	r0, r3
 8001ade:	f004 fa7f 	bl	8005fe0 <HAL_RCCEx_PeriphCLKConfig>
 8001ae2:	4603      	mov	r3, r0
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d001      	beq.n	8001aec <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8001ae8:	f7ff ff2e 	bl	8001948 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001aec:	4b26      	ldr	r3, [pc, #152]	; (8001b88 <HAL_I2C_MspInit+0xe8>)
 8001aee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001af0:	4a25      	ldr	r2, [pc, #148]	; (8001b88 <HAL_I2C_MspInit+0xe8>)
 8001af2:	f043 0301 	orr.w	r3, r3, #1
 8001af6:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001af8:	4b23      	ldr	r3, [pc, #140]	; (8001b88 <HAL_I2C_MspInit+0xe8>)
 8001afa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001afc:	f003 0301 	and.w	r3, r3, #1
 8001b00:	617b      	str	r3, [r7, #20]
 8001b02:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b04:	4b20      	ldr	r3, [pc, #128]	; (8001b88 <HAL_I2C_MspInit+0xe8>)
 8001b06:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b08:	4a1f      	ldr	r2, [pc, #124]	; (8001b88 <HAL_I2C_MspInit+0xe8>)
 8001b0a:	f043 0302 	orr.w	r3, r3, #2
 8001b0e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001b10:	4b1d      	ldr	r3, [pc, #116]	; (8001b88 <HAL_I2C_MspInit+0xe8>)
 8001b12:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b14:	f003 0302 	and.w	r3, r3, #2
 8001b18:	613b      	str	r3, [r7, #16]
 8001b1a:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PA15     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = SCL_Pin;
 8001b1c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001b20:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001b22:	2312      	movs	r3, #18
 8001b24:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001b26:	2301      	movs	r3, #1
 8001b28:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b2a:	2300      	movs	r3, #0
 8001b2c:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001b2e:	2304      	movs	r3, #4
 8001b30:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(SCL_GPIO_Port, &GPIO_InitStruct);
 8001b32:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001b36:	4619      	mov	r1, r3
 8001b38:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001b3c:	f002 fe54 	bl	80047e8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SDA_Pin;
 8001b40:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001b44:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001b46:	2312      	movs	r3, #18
 8001b48:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001b4a:	2301      	movs	r3, #1
 8001b4c:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b4e:	2300      	movs	r3, #0
 8001b50:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001b52:	2304      	movs	r3, #4
 8001b54:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(SDA_GPIO_Port, &GPIO_InitStruct);
 8001b56:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001b5a:	4619      	mov	r1, r3
 8001b5c:	480b      	ldr	r0, [pc, #44]	; (8001b8c <HAL_I2C_MspInit+0xec>)
 8001b5e:	f002 fe43 	bl	80047e8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001b62:	4b09      	ldr	r3, [pc, #36]	; (8001b88 <HAL_I2C_MspInit+0xe8>)
 8001b64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b66:	4a08      	ldr	r2, [pc, #32]	; (8001b88 <HAL_I2C_MspInit+0xe8>)
 8001b68:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001b6c:	6593      	str	r3, [r2, #88]	; 0x58
 8001b6e:	4b06      	ldr	r3, [pc, #24]	; (8001b88 <HAL_I2C_MspInit+0xe8>)
 8001b70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b72:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001b76:	60fb      	str	r3, [r7, #12]
 8001b78:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001b7a:	bf00      	nop
 8001b7c:	3780      	adds	r7, #128	; 0x80
 8001b7e:	46bd      	mov	sp, r7
 8001b80:	bd80      	pop	{r7, pc}
 8001b82:	bf00      	nop
 8001b84:	40005400 	.word	0x40005400
 8001b88:	40021000 	.word	0x40021000
 8001b8c:	48000400 	.word	0x48000400

08001b90 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001b90:	b580      	push	{r7, lr}
 8001b92:	b08c      	sub	sp, #48	; 0x30
 8001b94:	af00      	add	r7, sp, #0
 8001b96:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b98:	f107 031c 	add.w	r3, r7, #28
 8001b9c:	2200      	movs	r2, #0
 8001b9e:	601a      	str	r2, [r3, #0]
 8001ba0:	605a      	str	r2, [r3, #4]
 8001ba2:	609a      	str	r2, [r3, #8]
 8001ba4:	60da      	str	r2, [r3, #12]
 8001ba6:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	4a3e      	ldr	r2, [pc, #248]	; (8001ca8 <HAL_TIM_Base_MspInit+0x118>)
 8001bae:	4293      	cmp	r3, r2
 8001bb0:	d10c      	bne.n	8001bcc <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001bb2:	4b3e      	ldr	r3, [pc, #248]	; (8001cac <HAL_TIM_Base_MspInit+0x11c>)
 8001bb4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001bb6:	4a3d      	ldr	r2, [pc, #244]	; (8001cac <HAL_TIM_Base_MspInit+0x11c>)
 8001bb8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001bbc:	6613      	str	r3, [r2, #96]	; 0x60
 8001bbe:	4b3b      	ldr	r3, [pc, #236]	; (8001cac <HAL_TIM_Base_MspInit+0x11c>)
 8001bc0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001bc2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001bc6:	61bb      	str	r3, [r7, #24]
 8001bc8:	69bb      	ldr	r3, [r7, #24]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8001bca:	e068      	b.n	8001c9e <HAL_TIM_Base_MspInit+0x10e>
  else if(htim_base->Instance==TIM2)
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001bd4:	d130      	bne.n	8001c38 <HAL_TIM_Base_MspInit+0xa8>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001bd6:	4b35      	ldr	r3, [pc, #212]	; (8001cac <HAL_TIM_Base_MspInit+0x11c>)
 8001bd8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001bda:	4a34      	ldr	r2, [pc, #208]	; (8001cac <HAL_TIM_Base_MspInit+0x11c>)
 8001bdc:	f043 0301 	orr.w	r3, r3, #1
 8001be0:	6593      	str	r3, [r2, #88]	; 0x58
 8001be2:	4b32      	ldr	r3, [pc, #200]	; (8001cac <HAL_TIM_Base_MspInit+0x11c>)
 8001be4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001be6:	f003 0301 	and.w	r3, r3, #1
 8001bea:	617b      	str	r3, [r7, #20]
 8001bec:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001bee:	4b2f      	ldr	r3, [pc, #188]	; (8001cac <HAL_TIM_Base_MspInit+0x11c>)
 8001bf0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001bf2:	4a2e      	ldr	r2, [pc, #184]	; (8001cac <HAL_TIM_Base_MspInit+0x11c>)
 8001bf4:	f043 0302 	orr.w	r3, r3, #2
 8001bf8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001bfa:	4b2c      	ldr	r3, [pc, #176]	; (8001cac <HAL_TIM_Base_MspInit+0x11c>)
 8001bfc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001bfe:	f003 0302 	and.w	r3, r3, #2
 8001c02:	613b      	str	r3, [r7, #16]
 8001c04:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = capture_Pin;
 8001c06:	2308      	movs	r3, #8
 8001c08:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c0a:	2302      	movs	r3, #2
 8001c0c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c0e:	2300      	movs	r3, #0
 8001c10:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c12:	2300      	movs	r3, #0
 8001c14:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001c16:	2301      	movs	r3, #1
 8001c18:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(capture_GPIO_Port, &GPIO_InitStruct);
 8001c1a:	f107 031c 	add.w	r3, r7, #28
 8001c1e:	4619      	mov	r1, r3
 8001c20:	4823      	ldr	r0, [pc, #140]	; (8001cb0 <HAL_TIM_Base_MspInit+0x120>)
 8001c22:	f002 fde1 	bl	80047e8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001c26:	2200      	movs	r2, #0
 8001c28:	2100      	movs	r1, #0
 8001c2a:	201c      	movs	r0, #28
 8001c2c:	f002 fad7 	bl	80041de <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001c30:	201c      	movs	r0, #28
 8001c32:	f002 faee 	bl	8004212 <HAL_NVIC_EnableIRQ>
}
 8001c36:	e032      	b.n	8001c9e <HAL_TIM_Base_MspInit+0x10e>
  else if(htim_base->Instance==TIM3)
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	4a1d      	ldr	r2, [pc, #116]	; (8001cb4 <HAL_TIM_Base_MspInit+0x124>)
 8001c3e:	4293      	cmp	r3, r2
 8001c40:	d114      	bne.n	8001c6c <HAL_TIM_Base_MspInit+0xdc>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001c42:	4b1a      	ldr	r3, [pc, #104]	; (8001cac <HAL_TIM_Base_MspInit+0x11c>)
 8001c44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c46:	4a19      	ldr	r2, [pc, #100]	; (8001cac <HAL_TIM_Base_MspInit+0x11c>)
 8001c48:	f043 0302 	orr.w	r3, r3, #2
 8001c4c:	6593      	str	r3, [r2, #88]	; 0x58
 8001c4e:	4b17      	ldr	r3, [pc, #92]	; (8001cac <HAL_TIM_Base_MspInit+0x11c>)
 8001c50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c52:	f003 0302 	and.w	r3, r3, #2
 8001c56:	60fb      	str	r3, [r7, #12]
 8001c58:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001c5a:	2200      	movs	r2, #0
 8001c5c:	2100      	movs	r1, #0
 8001c5e:	201d      	movs	r0, #29
 8001c60:	f002 fabd 	bl	80041de <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001c64:	201d      	movs	r0, #29
 8001c66:	f002 fad4 	bl	8004212 <HAL_NVIC_EnableIRQ>
}
 8001c6a:	e018      	b.n	8001c9e <HAL_TIM_Base_MspInit+0x10e>
  else if(htim_base->Instance==TIM4)
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	4a11      	ldr	r2, [pc, #68]	; (8001cb8 <HAL_TIM_Base_MspInit+0x128>)
 8001c72:	4293      	cmp	r3, r2
 8001c74:	d113      	bne.n	8001c9e <HAL_TIM_Base_MspInit+0x10e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001c76:	4b0d      	ldr	r3, [pc, #52]	; (8001cac <HAL_TIM_Base_MspInit+0x11c>)
 8001c78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c7a:	4a0c      	ldr	r2, [pc, #48]	; (8001cac <HAL_TIM_Base_MspInit+0x11c>)
 8001c7c:	f043 0304 	orr.w	r3, r3, #4
 8001c80:	6593      	str	r3, [r2, #88]	; 0x58
 8001c82:	4b0a      	ldr	r3, [pc, #40]	; (8001cac <HAL_TIM_Base_MspInit+0x11c>)
 8001c84:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c86:	f003 0304 	and.w	r3, r3, #4
 8001c8a:	60bb      	str	r3, [r7, #8]
 8001c8c:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8001c8e:	2200      	movs	r2, #0
 8001c90:	2100      	movs	r1, #0
 8001c92:	201e      	movs	r0, #30
 8001c94:	f002 faa3 	bl	80041de <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001c98:	201e      	movs	r0, #30
 8001c9a:	f002 faba 	bl	8004212 <HAL_NVIC_EnableIRQ>
}
 8001c9e:	bf00      	nop
 8001ca0:	3730      	adds	r7, #48	; 0x30
 8001ca2:	46bd      	mov	sp, r7
 8001ca4:	bd80      	pop	{r7, pc}
 8001ca6:	bf00      	nop
 8001ca8:	40012c00 	.word	0x40012c00
 8001cac:	40021000 	.word	0x40021000
 8001cb0:	48000400 	.word	0x48000400
 8001cb4:	40000400 	.word	0x40000400
 8001cb8:	40000800 	.word	0x40000800

08001cbc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001cbc:	b580      	push	{r7, lr}
 8001cbe:	b088      	sub	sp, #32
 8001cc0:	af00      	add	r7, sp, #0
 8001cc2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cc4:	f107 030c 	add.w	r3, r7, #12
 8001cc8:	2200      	movs	r2, #0
 8001cca:	601a      	str	r2, [r3, #0]
 8001ccc:	605a      	str	r2, [r3, #4]
 8001cce:	609a      	str	r2, [r3, #8]
 8001cd0:	60da      	str	r2, [r3, #12]
 8001cd2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	4a1b      	ldr	r2, [pc, #108]	; (8001d48 <HAL_TIM_MspPostInit+0x8c>)
 8001cda:	4293      	cmp	r3, r2
 8001cdc:	d12f      	bne.n	8001d3e <HAL_TIM_MspPostInit+0x82>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cde:	4b1b      	ldr	r3, [pc, #108]	; (8001d4c <HAL_TIM_MspPostInit+0x90>)
 8001ce0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ce2:	4a1a      	ldr	r2, [pc, #104]	; (8001d4c <HAL_TIM_MspPostInit+0x90>)
 8001ce4:	f043 0301 	orr.w	r3, r3, #1
 8001ce8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001cea:	4b18      	ldr	r3, [pc, #96]	; (8001d4c <HAL_TIM_MspPostInit+0x90>)
 8001cec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001cee:	f003 0301 	and.w	r3, r3, #1
 8001cf2:	60bb      	str	r3, [r7, #8]
 8001cf4:	68bb      	ldr	r3, [r7, #8]
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    PA11     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = Z1_Pin|Z2_Pin|Z3_Pin;
 8001cf6:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8001cfa:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cfc:	2302      	movs	r3, #2
 8001cfe:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d00:	2300      	movs	r3, #0
 8001d02:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d04:	2300      	movs	r3, #0
 8001d06:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8001d08:	2306      	movs	r3, #6
 8001d0a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d0c:	f107 030c 	add.w	r3, r7, #12
 8001d10:	4619      	mov	r1, r3
 8001d12:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001d16:	f002 fd67 	bl	80047e8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = Z4_Pin;
 8001d1a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001d1e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d20:	2302      	movs	r3, #2
 8001d22:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d24:	2300      	movs	r3, #0
 8001d26:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d28:	2300      	movs	r3, #0
 8001d2a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF11_TIM1;
 8001d2c:	230b      	movs	r3, #11
 8001d2e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(Z4_GPIO_Port, &GPIO_InitStruct);
 8001d30:	f107 030c 	add.w	r3, r7, #12
 8001d34:	4619      	mov	r1, r3
 8001d36:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001d3a:	f002 fd55 	bl	80047e8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001d3e:	bf00      	nop
 8001d40:	3720      	adds	r7, #32
 8001d42:	46bd      	mov	sp, r7
 8001d44:	bd80      	pop	{r7, pc}
 8001d46:	bf00      	nop
 8001d48:	40012c00 	.word	0x40012c00
 8001d4c:	40021000 	.word	0x40021000

08001d50 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001d50:	b580      	push	{r7, lr}
 8001d52:	b09e      	sub	sp, #120	; 0x78
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d58:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001d5c:	2200      	movs	r2, #0
 8001d5e:	601a      	str	r2, [r3, #0]
 8001d60:	605a      	str	r2, [r3, #4]
 8001d62:	609a      	str	r2, [r3, #8]
 8001d64:	60da      	str	r2, [r3, #12]
 8001d66:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001d68:	f107 0310 	add.w	r3, r7, #16
 8001d6c:	2254      	movs	r2, #84	; 0x54
 8001d6e:	2100      	movs	r1, #0
 8001d70:	4618      	mov	r0, r3
 8001d72:	f007 fc57 	bl	8009624 <memset>
  if(huart->Instance==USART1)
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	4a1e      	ldr	r2, [pc, #120]	; (8001df4 <HAL_UART_MspInit+0xa4>)
 8001d7c:	4293      	cmp	r3, r2
 8001d7e:	d135      	bne.n	8001dec <HAL_UART_MspInit+0x9c>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001d80:	2301      	movs	r3, #1
 8001d82:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001d84:	2300      	movs	r3, #0
 8001d86:	617b      	str	r3, [r7, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001d88:	f107 0310 	add.w	r3, r7, #16
 8001d8c:	4618      	mov	r0, r3
 8001d8e:	f004 f927 	bl	8005fe0 <HAL_RCCEx_PeriphCLKConfig>
 8001d92:	4603      	mov	r3, r0
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d001      	beq.n	8001d9c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001d98:	f7ff fdd6 	bl	8001948 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001d9c:	4b16      	ldr	r3, [pc, #88]	; (8001df8 <HAL_UART_MspInit+0xa8>)
 8001d9e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001da0:	4a15      	ldr	r2, [pc, #84]	; (8001df8 <HAL_UART_MspInit+0xa8>)
 8001da2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001da6:	6613      	str	r3, [r2, #96]	; 0x60
 8001da8:	4b13      	ldr	r3, [pc, #76]	; (8001df8 <HAL_UART_MspInit+0xa8>)
 8001daa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001dac:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001db0:	60fb      	str	r3, [r7, #12]
 8001db2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001db4:	4b10      	ldr	r3, [pc, #64]	; (8001df8 <HAL_UART_MspInit+0xa8>)
 8001db6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001db8:	4a0f      	ldr	r2, [pc, #60]	; (8001df8 <HAL_UART_MspInit+0xa8>)
 8001dba:	f043 0302 	orr.w	r3, r3, #2
 8001dbe:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001dc0:	4b0d      	ldr	r3, [pc, #52]	; (8001df8 <HAL_UART_MspInit+0xa8>)
 8001dc2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001dc4:	f003 0302 	and.w	r3, r3, #2
 8001dc8:	60bb      	str	r3, [r7, #8]
 8001dca:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = TX_Pin|RX_Pin;
 8001dcc:	23c0      	movs	r3, #192	; 0xc0
 8001dce:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dd0:	2302      	movs	r3, #2
 8001dd2:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dd4:	2300      	movs	r3, #0
 8001dd6:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001dd8:	2300      	movs	r3, #0
 8001dda:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001ddc:	2307      	movs	r3, #7
 8001dde:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001de0:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001de4:	4619      	mov	r1, r3
 8001de6:	4805      	ldr	r0, [pc, #20]	; (8001dfc <HAL_UART_MspInit+0xac>)
 8001de8:	f002 fcfe 	bl	80047e8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001dec:	bf00      	nop
 8001dee:	3778      	adds	r7, #120	; 0x78
 8001df0:	46bd      	mov	sp, r7
 8001df2:	bd80      	pop	{r7, pc}
 8001df4:	40013800 	.word	0x40013800
 8001df8:	40021000 	.word	0x40021000
 8001dfc:	48000400 	.word	0x48000400

08001e00 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001e00:	b480      	push	{r7}
 8001e02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001e04:	e7fe      	b.n	8001e04 <NMI_Handler+0x4>

08001e06 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001e06:	b480      	push	{r7}
 8001e08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001e0a:	e7fe      	b.n	8001e0a <HardFault_Handler+0x4>

08001e0c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001e0c:	b480      	push	{r7}
 8001e0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001e10:	e7fe      	b.n	8001e10 <MemManage_Handler+0x4>

08001e12 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001e12:	b480      	push	{r7}
 8001e14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001e16:	e7fe      	b.n	8001e16 <BusFault_Handler+0x4>

08001e18 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001e18:	b480      	push	{r7}
 8001e1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001e1c:	e7fe      	b.n	8001e1c <UsageFault_Handler+0x4>

08001e1e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001e1e:	b480      	push	{r7}
 8001e20:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001e22:	bf00      	nop
 8001e24:	46bd      	mov	sp, r7
 8001e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e2a:	4770      	bx	lr

08001e2c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001e2c:	b480      	push	{r7}
 8001e2e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001e30:	bf00      	nop
 8001e32:	46bd      	mov	sp, r7
 8001e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e38:	4770      	bx	lr

08001e3a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001e3a:	b480      	push	{r7}
 8001e3c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001e3e:	bf00      	nop
 8001e40:	46bd      	mov	sp, r7
 8001e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e46:	4770      	bx	lr

08001e48 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001e48:	b580      	push	{r7, lr}
 8001e4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001e4c:	f000 fb02 	bl	8002454 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001e50:	bf00      	nop
 8001e52:	bd80      	pop	{r7, pc}

08001e54 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001e54:	b580      	push	{r7, lr}
 8001e56:	b082      	sub	sp, #8
 8001e58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */
	if ( (haftConf--) == 0) { // Половина преобразования
 8001e5a:	4b8d      	ldr	r3, [pc, #564]	; (8002090 <DMA1_Channel1_IRQHandler+0x23c>)
 8001e5c:	881b      	ldrh	r3, [r3, #0]
 8001e5e:	1e5a      	subs	r2, r3, #1
 8001e60:	b291      	uxth	r1, r2
 8001e62:	4a8b      	ldr	r2, [pc, #556]	; (8002090 <DMA1_Channel1_IRQHandler+0x23c>)
 8001e64:	8011      	strh	r1, [r2, #0]
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	f040 810b 	bne.w	8002082 <DMA1_Channel1_IRQHandler+0x22e>
			LED_PULSE
 8001e6c:	2201      	movs	r2, #1
 8001e6e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001e72:	4888      	ldr	r0, [pc, #544]	; (8002094 <DMA1_Channel1_IRQHandler+0x240>)
 8001e74:	f002 fe3a 	bl	8004aec <HAL_GPIO_WritePin>
 8001e78:	2200      	movs	r2, #0
 8001e7a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001e7e:	4885      	ldr	r0, [pc, #532]	; (8002094 <DMA1_Channel1_IRQHandler+0x240>)
 8001e80:	f002 fe34 	bl	8004aec <HAL_GPIO_WritePin>
		HAL_ADC_Stop_DMA(&hadc1);
 8001e84:	4884      	ldr	r0, [pc, #528]	; (8002098 <DMA1_Channel1_IRQHandler+0x244>)
 8001e86:	f001 f82b 	bl	8002ee0 <HAL_ADC_Stop_DMA>
		if (ajustCount++ > AJUST_DELAY) {
 8001e8a:	4b84      	ldr	r3, [pc, #528]	; (800209c <DMA1_Channel1_IRQHandler+0x248>)
 8001e8c:	881b      	ldrh	r3, [r3, #0]
 8001e8e:	1c5a      	adds	r2, r3, #1
 8001e90:	b291      	uxth	r1, r2
 8001e92:	4a82      	ldr	r2, [pc, #520]	; (800209c <DMA1_Channel1_IRQHandler+0x248>)
 8001e94:	8011      	strh	r1, [r2, #0]
 8001e96:	2b01      	cmp	r3, #1
 8001e98:	f240 80f3 	bls.w	8002082 <DMA1_Channel1_IRQHandler+0x22e>
			/* Автоматическая регулировка уровня сигнала */
			ajustCount = 0;
 8001e9c:	4b7f      	ldr	r3, [pc, #508]	; (800209c <DMA1_Channel1_IRQHandler+0x248>)
 8001e9e:	2200      	movs	r2, #0
 8001ea0:	801a      	strh	r2, [r3, #0]
			maxLevel = 0, minLevel = 4096, avgLevel = 0;;
 8001ea2:	4b7f      	ldr	r3, [pc, #508]	; (80020a0 <DMA1_Channel1_IRQHandler+0x24c>)
 8001ea4:	2200      	movs	r2, #0
 8001ea6:	801a      	strh	r2, [r3, #0]
 8001ea8:	4b7e      	ldr	r3, [pc, #504]	; (80020a4 <DMA1_Channel1_IRQHandler+0x250>)
 8001eaa:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001eae:	801a      	strh	r2, [r3, #0]
 8001eb0:	4b7d      	ldr	r3, [pc, #500]	; (80020a8 <DMA1_Channel1_IRQHandler+0x254>)
 8001eb2:	f04f 0200 	mov.w	r2, #0
 8001eb6:	601a      	str	r2, [r3, #0]
			for (int ii = 0; ii < CONVERSION_COUNT; ii++) {
 8001eb8:	2300      	movs	r3, #0
 8001eba:	607b      	str	r3, [r7, #4]
 8001ebc:	e02e      	b.n	8001f1c <DMA1_Channel1_IRQHandler+0xc8>
				avgLevel = avgLevel + adcBuffer[ii];
 8001ebe:	4a7b      	ldr	r2, [pc, #492]	; (80020ac <DMA1_Channel1_IRQHandler+0x258>)
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001ec6:	ee07 3a90 	vmov	s15, r3
 8001eca:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001ece:	4b76      	ldr	r3, [pc, #472]	; (80020a8 <DMA1_Channel1_IRQHandler+0x254>)
 8001ed0:	edd3 7a00 	vldr	s15, [r3]
 8001ed4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001ed8:	4b73      	ldr	r3, [pc, #460]	; (80020a8 <DMA1_Channel1_IRQHandler+0x254>)
 8001eda:	edc3 7a00 	vstr	s15, [r3]
				if (maxLevel < adcBuffer[ii]) {
 8001ede:	4a73      	ldr	r2, [pc, #460]	; (80020ac <DMA1_Channel1_IRQHandler+0x258>)
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8001ee6:	4b6e      	ldr	r3, [pc, #440]	; (80020a0 <DMA1_Channel1_IRQHandler+0x24c>)
 8001ee8:	881b      	ldrh	r3, [r3, #0]
 8001eea:	429a      	cmp	r2, r3
 8001eec:	d905      	bls.n	8001efa <DMA1_Channel1_IRQHandler+0xa6>
					maxLevel = adcBuffer[ii];
 8001eee:	4a6f      	ldr	r2, [pc, #444]	; (80020ac <DMA1_Channel1_IRQHandler+0x258>)
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8001ef6:	4b6a      	ldr	r3, [pc, #424]	; (80020a0 <DMA1_Channel1_IRQHandler+0x24c>)
 8001ef8:	801a      	strh	r2, [r3, #0]
				}
				if (minLevel > adcBuffer[ii]) {
 8001efa:	4a6c      	ldr	r2, [pc, #432]	; (80020ac <DMA1_Channel1_IRQHandler+0x258>)
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8001f02:	4b68      	ldr	r3, [pc, #416]	; (80020a4 <DMA1_Channel1_IRQHandler+0x250>)
 8001f04:	881b      	ldrh	r3, [r3, #0]
 8001f06:	429a      	cmp	r2, r3
 8001f08:	d205      	bcs.n	8001f16 <DMA1_Channel1_IRQHandler+0xc2>
					minLevel = adcBuffer[ii];
 8001f0a:	4a68      	ldr	r2, [pc, #416]	; (80020ac <DMA1_Channel1_IRQHandler+0x258>)
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8001f12:	4b64      	ldr	r3, [pc, #400]	; (80020a4 <DMA1_Channel1_IRQHandler+0x250>)
 8001f14:	801a      	strh	r2, [r3, #0]
			for (int ii = 0; ii < CONVERSION_COUNT; ii++) {
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	3301      	adds	r3, #1
 8001f1a:	607b      	str	r3, [r7, #4]
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8001f22:	dbcc      	blt.n	8001ebe <DMA1_Channel1_IRQHandler+0x6a>
				}
			}
			avgLevel = avgLevel / CONVERSION_COUNT;
 8001f24:	4b60      	ldr	r3, [pc, #384]	; (80020a8 <DMA1_Channel1_IRQHandler+0x254>)
 8001f26:	ed93 7a00 	vldr	s14, [r3]
 8001f2a:	eddf 6a61 	vldr	s13, [pc, #388]	; 80020b0 <DMA1_Channel1_IRQHandler+0x25c>
 8001f2e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001f32:	4b5d      	ldr	r3, [pc, #372]	; (80020a8 <DMA1_Channel1_IRQHandler+0x254>)
 8001f34:	edc3 7a00 	vstr	s15, [r3]
			if (abs(minLevel - avgLevel) > abs(maxLevel - avgLevel)) {
 8001f38:	4b5a      	ldr	r3, [pc, #360]	; (80020a4 <DMA1_Channel1_IRQHandler+0x250>)
 8001f3a:	881b      	ldrh	r3, [r3, #0]
 8001f3c:	ee07 3a90 	vmov	s15, r3
 8001f40:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001f44:	4b58      	ldr	r3, [pc, #352]	; (80020a8 <DMA1_Channel1_IRQHandler+0x254>)
 8001f46:	edd3 7a00 	vldr	s15, [r3]
 8001f4a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001f4e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001f52:	ee17 3a90 	vmov	r3, s15
 8001f56:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8001f5a:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8001f5e:	4b50      	ldr	r3, [pc, #320]	; (80020a0 <DMA1_Channel1_IRQHandler+0x24c>)
 8001f60:	881b      	ldrh	r3, [r3, #0]
 8001f62:	ee07 3a90 	vmov	s15, r3
 8001f66:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001f6a:	4b4f      	ldr	r3, [pc, #316]	; (80020a8 <DMA1_Channel1_IRQHandler+0x254>)
 8001f6c:	edd3 7a00 	vldr	s15, [r3]
 8001f70:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001f74:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001f78:	ee17 3a90 	vmov	r3, s15
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	bfb8      	it	lt
 8001f80:	425b      	neglt	r3, r3
 8001f82:	429a      	cmp	r2, r3
 8001f84:	dd15      	ble.n	8001fb2 <DMA1_Channel1_IRQHandler+0x15e>
				maxLevel = abs(minLevel - avgLevel);
 8001f86:	4b47      	ldr	r3, [pc, #284]	; (80020a4 <DMA1_Channel1_IRQHandler+0x250>)
 8001f88:	881b      	ldrh	r3, [r3, #0]
 8001f8a:	ee07 3a90 	vmov	s15, r3
 8001f8e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001f92:	4b45      	ldr	r3, [pc, #276]	; (80020a8 <DMA1_Channel1_IRQHandler+0x254>)
 8001f94:	edd3 7a00 	vldr	s15, [r3]
 8001f98:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001f9c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001fa0:	ee17 3a90 	vmov	r3, s15
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	bfb8      	it	lt
 8001fa8:	425b      	neglt	r3, r3
 8001faa:	b29a      	uxth	r2, r3
 8001fac:	4b3c      	ldr	r3, [pc, #240]	; (80020a0 <DMA1_Channel1_IRQHandler+0x24c>)
 8001fae:	801a      	strh	r2, [r3, #0]
 8001fb0:	e014      	b.n	8001fdc <DMA1_Channel1_IRQHandler+0x188>
			} else {
				maxLevel = abs(maxLevel - avgLevel);
 8001fb2:	4b3b      	ldr	r3, [pc, #236]	; (80020a0 <DMA1_Channel1_IRQHandler+0x24c>)
 8001fb4:	881b      	ldrh	r3, [r3, #0]
 8001fb6:	ee07 3a90 	vmov	s15, r3
 8001fba:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001fbe:	4b3a      	ldr	r3, [pc, #232]	; (80020a8 <DMA1_Channel1_IRQHandler+0x254>)
 8001fc0:	edd3 7a00 	vldr	s15, [r3]
 8001fc4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001fc8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001fcc:	ee17 3a90 	vmov	r3, s15
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	bfb8      	it	lt
 8001fd4:	425b      	neglt	r3, r3
 8001fd6:	b29a      	uxth	r2, r3
 8001fd8:	4b31      	ldr	r3, [pc, #196]	; (80020a0 <DMA1_Channel1_IRQHandler+0x24c>)
 8001fda:	801a      	strh	r2, [r3, #0]
			}
			if (abs(maxLevel - NOMINAL_LEVEL) > ACURACY_LEVEL) {
 8001fdc:	4b30      	ldr	r3, [pc, #192]	; (80020a0 <DMA1_Channel1_IRQHandler+0x24c>)
 8001fde:	881b      	ldrh	r3, [r3, #0]
 8001fe0:	f5a3 63e1 	sub.w	r3, r3, #1800	; 0x708
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	bfb8      	it	lt
 8001fe8:	425b      	neglt	r3, r3
 8001fea:	2b64      	cmp	r3, #100	; 0x64
 8001fec:	dd18      	ble.n	8002020 <DMA1_Channel1_IRQHandler+0x1cc>
				if (maxLevel - NOMINAL_LEVEL > 0) {
 8001fee:	4b2c      	ldr	r3, [pc, #176]	; (80020a0 <DMA1_Channel1_IRQHandler+0x24c>)
 8001ff0:	881b      	ldrh	r3, [r3, #0]
 8001ff2:	f5b3 6fe1 	cmp.w	r3, #1800	; 0x708
 8001ff6:	d909      	bls.n	800200c <DMA1_Channel1_IRQHandler+0x1b8>
					/* Сигнал сильный, понижаем уровень */
					#ifdef AD5245
					AD5245level(currentLevel--);
 8001ff8:	4b2e      	ldr	r3, [pc, #184]	; (80020b4 <DMA1_Channel1_IRQHandler+0x260>)
 8001ffa:	781b      	ldrb	r3, [r3, #0]
 8001ffc:	1e5a      	subs	r2, r3, #1
 8001ffe:	b2d1      	uxtb	r1, r2
 8002000:	4a2c      	ldr	r2, [pc, #176]	; (80020b4 <DMA1_Channel1_IRQHandler+0x260>)
 8002002:	7011      	strb	r1, [r2, #0]
 8002004:	4618      	mov	r0, r3
 8002006:	f7fe ff79 	bl	8000efc <AD5245level>
 800200a:	e03a      	b.n	8002082 <DMA1_Channel1_IRQHandler+0x22e>
					#endif
				} else {
					/* Сигнал слабый, повышаем уровень */
					#ifdef AD5245
					AD5245level(currentLevel++);
 800200c:	4b29      	ldr	r3, [pc, #164]	; (80020b4 <DMA1_Channel1_IRQHandler+0x260>)
 800200e:	781b      	ldrb	r3, [r3, #0]
 8002010:	1c5a      	adds	r2, r3, #1
 8002012:	b2d1      	uxtb	r1, r2
 8002014:	4a27      	ldr	r2, [pc, #156]	; (80020b4 <DMA1_Channel1_IRQHandler+0x260>)
 8002016:	7011      	strb	r1, [r2, #0]
 8002018:	4618      	mov	r0, r3
 800201a:	f7fe ff6f 	bl	8000efc <AD5245level>
 800201e:	e030      	b.n	8002082 <DMA1_Channel1_IRQHandler+0x22e>
					#endif
				}
			} else {  /* Уровень в норме. Накапливаем данные для усреднения */
				if (mesCount < MEASURE_COUNT) {
 8002020:	4b25      	ldr	r3, [pc, #148]	; (80020b8 <DMA1_Channel1_IRQHandler+0x264>)
 8002022:	881b      	ldrh	r3, [r3, #0]
 8002024:	2b0f      	cmp	r3, #15
 8002026:	d826      	bhi.n	8002076 <DMA1_Channel1_IRQHandler+0x222>
					for (int ii = 0; ii < CONVERSION_COUNT; ii++) {
 8002028:	2300      	movs	r3, #0
 800202a:	603b      	str	r3, [r7, #0]
 800202c:	e018      	b.n	8002060 <DMA1_Channel1_IRQHandler+0x20c>
						measArray[ii] = measArray[ii] + adcBuffer[ii];
 800202e:	4a23      	ldr	r2, [pc, #140]	; (80020bc <DMA1_Channel1_IRQHandler+0x268>)
 8002030:	683b      	ldr	r3, [r7, #0]
 8002032:	009b      	lsls	r3, r3, #2
 8002034:	4413      	add	r3, r2
 8002036:	ed93 7a00 	vldr	s14, [r3]
 800203a:	4a1c      	ldr	r2, [pc, #112]	; (80020ac <DMA1_Channel1_IRQHandler+0x258>)
 800203c:	683b      	ldr	r3, [r7, #0]
 800203e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002042:	ee07 3a90 	vmov	s15, r3
 8002046:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800204a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800204e:	4a1b      	ldr	r2, [pc, #108]	; (80020bc <DMA1_Channel1_IRQHandler+0x268>)
 8002050:	683b      	ldr	r3, [r7, #0]
 8002052:	009b      	lsls	r3, r3, #2
 8002054:	4413      	add	r3, r2
 8002056:	edc3 7a00 	vstr	s15, [r3]
					for (int ii = 0; ii < CONVERSION_COUNT; ii++) {
 800205a:	683b      	ldr	r3, [r7, #0]
 800205c:	3301      	adds	r3, #1
 800205e:	603b      	str	r3, [r7, #0]
 8002060:	683b      	ldr	r3, [r7, #0]
 8002062:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8002066:	dbe2      	blt.n	800202e <DMA1_Channel1_IRQHandler+0x1da>
					}
					mesCount++;
 8002068:	4b13      	ldr	r3, [pc, #76]	; (80020b8 <DMA1_Channel1_IRQHandler+0x264>)
 800206a:	881b      	ldrh	r3, [r3, #0]
 800206c:	3301      	adds	r3, #1
 800206e:	b29a      	uxth	r2, r3
 8002070:	4b11      	ldr	r3, [pc, #68]	; (80020b8 <DMA1_Channel1_IRQHandler+0x264>)
 8002072:	801a      	strh	r2, [r3, #0]
 8002074:	e005      	b.n	8002082 <DMA1_Channel1_IRQHandler+0x22e>
				} else { /* Можно выполнять свертку */
					mesCount = 0;
 8002076:	4b10      	ldr	r3, [pc, #64]	; (80020b8 <DMA1_Channel1_IRQHandler+0x264>)
 8002078:	2200      	movs	r2, #0
 800207a:	801a      	strh	r2, [r3, #0]
					readyData = true;
 800207c:	4b10      	ldr	r3, [pc, #64]	; (80020c0 <DMA1_Channel1_IRQHandler+0x26c>)
 800207e:	2201      	movs	r2, #1
 8002080:	701a      	strb	r2, [r3, #0]
			}
		}
	}

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002082:	4810      	ldr	r0, [pc, #64]	; (80020c4 <DMA1_Channel1_IRQHandler+0x270>)
 8002084:	f002 fa60 	bl	8004548 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8002088:	bf00      	nop
 800208a:	3708      	adds	r7, #8
 800208c:	46bd      	mov	sp, r7
 800208e:	bd80      	pop	{r7, pc}
 8002090:	20000b78 	.word	0x20000b78
 8002094:	48000800 	.word	0x48000800
 8002098:	200001f8 	.word	0x200001f8
 800209c:	20000b7c 	.word	0x20000b7c
 80020a0:	20000b7e 	.word	0x20000b7e
 80020a4:	20000b80 	.word	0x20000b80
 80020a8:	20000b84 	.word	0x20000b84
 80020ac:	20000538 	.word	0x20000538
 80020b0:	44480000 	.word	0x44480000
 80020b4:	200004d0 	.word	0x200004d0
 80020b8:	20000b7a 	.word	0x20000b7a
 80020bc:	20000b88 	.word	0x20000b88
 80020c0:	20000b82 	.word	0x20000b82
 80020c4:	20000264 	.word	0x20000264

080020c8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80020c8:	b580      	push	{r7, lr}
 80020ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80020cc:	4802      	ldr	r0, [pc, #8]	; (80020d8 <TIM2_IRQHandler+0x10>)
 80020ce:	f004 ffad 	bl	800702c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80020d2:	bf00      	nop
 80020d4:	bd80      	pop	{r7, pc}
 80020d6:	bf00      	nop
 80020d8:	2000035c 	.word	0x2000035c

080020dc <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80020dc:	b580      	push	{r7, lr}
 80020de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */
	LED_PULSE
 80020e0:	2201      	movs	r2, #1
 80020e2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80020e6:	4807      	ldr	r0, [pc, #28]	; (8002104 <TIM3_IRQHandler+0x28>)
 80020e8:	f002 fd00 	bl	8004aec <HAL_GPIO_WritePin>
 80020ec:	2200      	movs	r2, #0
 80020ee:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80020f2:	4804      	ldr	r0, [pc, #16]	; (8002104 <TIM3_IRQHandler+0x28>)
 80020f4:	f002 fcfa 	bl	8004aec <HAL_GPIO_WritePin>
  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80020f8:	4803      	ldr	r0, [pc, #12]	; (8002108 <TIM3_IRQHandler+0x2c>)
 80020fa:	f004 ff97 	bl	800702c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80020fe:	bf00      	nop
 8002100:	bd80      	pop	{r7, pc}
 8002102:	bf00      	nop
 8002104:	48000800 	.word	0x48000800
 8002108:	200003a8 	.word	0x200003a8

0800210c <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 800210c:	b580      	push	{r7, lr}
 800210e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */
	HAL_TIM_OC_Stop(&htim1, TIM_CHANNEL_1);
 8002110:	2100      	movs	r1, #0
 8002112:	481c      	ldr	r0, [pc, #112]	; (8002184 <TIM4_IRQHandler+0x78>)
 8002114:	f004 fc24 	bl	8006960 <HAL_TIM_OC_Stop>
	HAL_TIM_OC_Start(&htim1, TIM_CHANNEL_1);
 8002118:	2100      	movs	r1, #0
 800211a:	481a      	ldr	r0, [pc, #104]	; (8002184 <TIM4_IRQHandler+0x78>)
 800211c:	f004 fb0e 	bl	800673c <HAL_TIM_OC_Start>
	HAL_TIM_IC_Stop_IT(&htim2, TIM_CHANNEL_1);
 8002120:	2100      	movs	r1, #0
 8002122:	4819      	ldr	r0, [pc, #100]	; (8002188 <TIM4_IRQHandler+0x7c>)
 8002124:	f004 fe6a 	bl	8006dfc <HAL_TIM_IC_Stop_IT>
	HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_1);
 8002128:	2100      	movs	r1, #0
 800212a:	4817      	ldr	r0, [pc, #92]	; (8002188 <TIM4_IRQHandler+0x7c>)
 800212c:	f004 fd16 	bl	8006b5c <HAL_TIM_IC_Start_IT>
	HAL_GPIO_WritePin(selZ1_GPIO_Port, selZ1_Pin, GPIO_PIN_SET);
 8002130:	2201      	movs	r2, #1
 8002132:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002136:	4815      	ldr	r0, [pc, #84]	; (800218c <TIM4_IRQHandler+0x80>)
 8002138:	f002 fcd8 	bl	8004aec <HAL_GPIO_WritePin>
	haftConf = 1;
 800213c:	4b14      	ldr	r3, [pc, #80]	; (8002190 <TIM4_IRQHandler+0x84>)
 800213e:	2201      	movs	r2, #1
 8002140:	801a      	strh	r2, [r3, #0]
	readyCapture = true;
 8002142:	4b14      	ldr	r3, [pc, #80]	; (8002194 <TIM4_IRQHandler+0x88>)
 8002144:	2201      	movs	r2, #1
 8002146:	701a      	strb	r2, [r3, #0]
	LED_PULSE
 8002148:	2201      	movs	r2, #1
 800214a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800214e:	4812      	ldr	r0, [pc, #72]	; (8002198 <TIM4_IRQHandler+0x8c>)
 8002150:	f002 fccc 	bl	8004aec <HAL_GPIO_WritePin>
 8002154:	2200      	movs	r2, #0
 8002156:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800215a:	480f      	ldr	r0, [pc, #60]	; (8002198 <TIM4_IRQHandler+0x8c>)
 800215c:	f002 fcc6 	bl	8004aec <HAL_GPIO_WritePin>
	if (! readyData) {
 8002160:	4b0e      	ldr	r3, [pc, #56]	; (800219c <TIM4_IRQHandler+0x90>)
 8002162:	781b      	ldrb	r3, [r3, #0]
 8002164:	f083 0301 	eor.w	r3, r3, #1
 8002168:	b2db      	uxtb	r3, r3
 800216a:	2b00      	cmp	r3, #0
 800216c:	d005      	beq.n	800217a <TIM4_IRQHandler+0x6e>
		HAL_ADC_Start_DMA(&hadc1, (uint32_t*) adcBuffer, CONVERSION_COUNT);
 800216e:	f44f 7248 	mov.w	r2, #800	; 0x320
 8002172:	490b      	ldr	r1, [pc, #44]	; (80021a0 <TIM4_IRQHandler+0x94>)
 8002174:	480b      	ldr	r0, [pc, #44]	; (80021a4 <TIM4_IRQHandler+0x98>)
 8002176:	f000 fddf 	bl	8002d38 <HAL_ADC_Start_DMA>
	}

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 800217a:	480b      	ldr	r0, [pc, #44]	; (80021a8 <TIM4_IRQHandler+0x9c>)
 800217c:	f004 ff56 	bl	800702c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8002180:	bf00      	nop
 8002182:	bd80      	pop	{r7, pc}
 8002184:	20000310 	.word	0x20000310
 8002188:	2000035c 	.word	0x2000035c
 800218c:	48000400 	.word	0x48000400
 8002190:	20000b78 	.word	0x20000b78
 8002194:	20000b83 	.word	0x20000b83
 8002198:	48000800 	.word	0x48000800
 800219c:	20000b82 	.word	0x20000b82
 80021a0:	20000538 	.word	0x20000538
 80021a4:	200001f8 	.word	0x200001f8
 80021a8:	200003f4 	.word	0x200003f4

080021ac <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80021ac:	b480      	push	{r7}
 80021ae:	af00      	add	r7, sp, #0
  return 1;
 80021b0:	2301      	movs	r3, #1
}
 80021b2:	4618      	mov	r0, r3
 80021b4:	46bd      	mov	sp, r7
 80021b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ba:	4770      	bx	lr

080021bc <_kill>:

int _kill(int pid, int sig)
{
 80021bc:	b580      	push	{r7, lr}
 80021be:	b082      	sub	sp, #8
 80021c0:	af00      	add	r7, sp, #0
 80021c2:	6078      	str	r0, [r7, #4]
 80021c4:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80021c6:	f007 fa03 	bl	80095d0 <__errno>
 80021ca:	4603      	mov	r3, r0
 80021cc:	2216      	movs	r2, #22
 80021ce:	601a      	str	r2, [r3, #0]
  return -1;
 80021d0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80021d4:	4618      	mov	r0, r3
 80021d6:	3708      	adds	r7, #8
 80021d8:	46bd      	mov	sp, r7
 80021da:	bd80      	pop	{r7, pc}

080021dc <_exit>:

void _exit (int status)
{
 80021dc:	b580      	push	{r7, lr}
 80021de:	b082      	sub	sp, #8
 80021e0:	af00      	add	r7, sp, #0
 80021e2:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80021e4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80021e8:	6878      	ldr	r0, [r7, #4]
 80021ea:	f7ff ffe7 	bl	80021bc <_kill>
  while (1) {}    /* Make sure we hang here */
 80021ee:	e7fe      	b.n	80021ee <_exit+0x12>

080021f0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80021f0:	b580      	push	{r7, lr}
 80021f2:	b086      	sub	sp, #24
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	60f8      	str	r0, [r7, #12]
 80021f8:	60b9      	str	r1, [r7, #8]
 80021fa:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80021fc:	2300      	movs	r3, #0
 80021fe:	617b      	str	r3, [r7, #20]
 8002200:	e00a      	b.n	8002218 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002202:	f3af 8000 	nop.w
 8002206:	4601      	mov	r1, r0
 8002208:	68bb      	ldr	r3, [r7, #8]
 800220a:	1c5a      	adds	r2, r3, #1
 800220c:	60ba      	str	r2, [r7, #8]
 800220e:	b2ca      	uxtb	r2, r1
 8002210:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002212:	697b      	ldr	r3, [r7, #20]
 8002214:	3301      	adds	r3, #1
 8002216:	617b      	str	r3, [r7, #20]
 8002218:	697a      	ldr	r2, [r7, #20]
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	429a      	cmp	r2, r3
 800221e:	dbf0      	blt.n	8002202 <_read+0x12>
  }

  return len;
 8002220:	687b      	ldr	r3, [r7, #4]
}
 8002222:	4618      	mov	r0, r3
 8002224:	3718      	adds	r7, #24
 8002226:	46bd      	mov	sp, r7
 8002228:	bd80      	pop	{r7, pc}

0800222a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800222a:	b580      	push	{r7, lr}
 800222c:	b086      	sub	sp, #24
 800222e:	af00      	add	r7, sp, #0
 8002230:	60f8      	str	r0, [r7, #12]
 8002232:	60b9      	str	r1, [r7, #8]
 8002234:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002236:	2300      	movs	r3, #0
 8002238:	617b      	str	r3, [r7, #20]
 800223a:	e009      	b.n	8002250 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800223c:	68bb      	ldr	r3, [r7, #8]
 800223e:	1c5a      	adds	r2, r3, #1
 8002240:	60ba      	str	r2, [r7, #8]
 8002242:	781b      	ldrb	r3, [r3, #0]
 8002244:	4618      	mov	r0, r3
 8002246:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800224a:	697b      	ldr	r3, [r7, #20]
 800224c:	3301      	adds	r3, #1
 800224e:	617b      	str	r3, [r7, #20]
 8002250:	697a      	ldr	r2, [r7, #20]
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	429a      	cmp	r2, r3
 8002256:	dbf1      	blt.n	800223c <_write+0x12>
  }
  return len;
 8002258:	687b      	ldr	r3, [r7, #4]
}
 800225a:	4618      	mov	r0, r3
 800225c:	3718      	adds	r7, #24
 800225e:	46bd      	mov	sp, r7
 8002260:	bd80      	pop	{r7, pc}

08002262 <_close>:

int _close(int file)
{
 8002262:	b480      	push	{r7}
 8002264:	b083      	sub	sp, #12
 8002266:	af00      	add	r7, sp, #0
 8002268:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800226a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800226e:	4618      	mov	r0, r3
 8002270:	370c      	adds	r7, #12
 8002272:	46bd      	mov	sp, r7
 8002274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002278:	4770      	bx	lr

0800227a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800227a:	b480      	push	{r7}
 800227c:	b083      	sub	sp, #12
 800227e:	af00      	add	r7, sp, #0
 8002280:	6078      	str	r0, [r7, #4]
 8002282:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002284:	683b      	ldr	r3, [r7, #0]
 8002286:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800228a:	605a      	str	r2, [r3, #4]
  return 0;
 800228c:	2300      	movs	r3, #0
}
 800228e:	4618      	mov	r0, r3
 8002290:	370c      	adds	r7, #12
 8002292:	46bd      	mov	sp, r7
 8002294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002298:	4770      	bx	lr

0800229a <_isatty>:

int _isatty(int file)
{
 800229a:	b480      	push	{r7}
 800229c:	b083      	sub	sp, #12
 800229e:	af00      	add	r7, sp, #0
 80022a0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80022a2:	2301      	movs	r3, #1
}
 80022a4:	4618      	mov	r0, r3
 80022a6:	370c      	adds	r7, #12
 80022a8:	46bd      	mov	sp, r7
 80022aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ae:	4770      	bx	lr

080022b0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80022b0:	b480      	push	{r7}
 80022b2:	b085      	sub	sp, #20
 80022b4:	af00      	add	r7, sp, #0
 80022b6:	60f8      	str	r0, [r7, #12]
 80022b8:	60b9      	str	r1, [r7, #8]
 80022ba:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80022bc:	2300      	movs	r3, #0
}
 80022be:	4618      	mov	r0, r3
 80022c0:	3714      	adds	r7, #20
 80022c2:	46bd      	mov	sp, r7
 80022c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c8:	4770      	bx	lr
	...

080022cc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80022cc:	b580      	push	{r7, lr}
 80022ce:	b086      	sub	sp, #24
 80022d0:	af00      	add	r7, sp, #0
 80022d2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80022d4:	4a14      	ldr	r2, [pc, #80]	; (8002328 <_sbrk+0x5c>)
 80022d6:	4b15      	ldr	r3, [pc, #84]	; (800232c <_sbrk+0x60>)
 80022d8:	1ad3      	subs	r3, r2, r3
 80022da:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80022dc:	697b      	ldr	r3, [r7, #20]
 80022de:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80022e0:	4b13      	ldr	r3, [pc, #76]	; (8002330 <_sbrk+0x64>)
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d102      	bne.n	80022ee <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80022e8:	4b11      	ldr	r3, [pc, #68]	; (8002330 <_sbrk+0x64>)
 80022ea:	4a12      	ldr	r2, [pc, #72]	; (8002334 <_sbrk+0x68>)
 80022ec:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80022ee:	4b10      	ldr	r3, [pc, #64]	; (8002330 <_sbrk+0x64>)
 80022f0:	681a      	ldr	r2, [r3, #0]
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	4413      	add	r3, r2
 80022f6:	693a      	ldr	r2, [r7, #16]
 80022f8:	429a      	cmp	r2, r3
 80022fa:	d207      	bcs.n	800230c <_sbrk+0x40>
  {
    errno = ENOMEM;
 80022fc:	f007 f968 	bl	80095d0 <__errno>
 8002300:	4603      	mov	r3, r0
 8002302:	220c      	movs	r2, #12
 8002304:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002306:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800230a:	e009      	b.n	8002320 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800230c:	4b08      	ldr	r3, [pc, #32]	; (8002330 <_sbrk+0x64>)
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002312:	4b07      	ldr	r3, [pc, #28]	; (8002330 <_sbrk+0x64>)
 8002314:	681a      	ldr	r2, [r3, #0]
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	4413      	add	r3, r2
 800231a:	4a05      	ldr	r2, [pc, #20]	; (8002330 <_sbrk+0x64>)
 800231c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800231e:	68fb      	ldr	r3, [r7, #12]
}
 8002320:	4618      	mov	r0, r3
 8002322:	3718      	adds	r7, #24
 8002324:	46bd      	mov	sp, r7
 8002326:	bd80      	pop	{r7, pc}
 8002328:	20020000 	.word	0x20020000
 800232c:	00000400 	.word	0x00000400
 8002330:	20001808 	.word	0x20001808
 8002334:	20001820 	.word	0x20001820

08002338 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8002338:	b480      	push	{r7}
 800233a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800233c:	4b06      	ldr	r3, [pc, #24]	; (8002358 <SystemInit+0x20>)
 800233e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002342:	4a05      	ldr	r2, [pc, #20]	; (8002358 <SystemInit+0x20>)
 8002344:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002348:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800234c:	bf00      	nop
 800234e:	46bd      	mov	sp, r7
 8002350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002354:	4770      	bx	lr
 8002356:	bf00      	nop
 8002358:	e000ed00 	.word	0xe000ed00

0800235c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800235c:	480d      	ldr	r0, [pc, #52]	; (8002394 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800235e:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002360:	480d      	ldr	r0, [pc, #52]	; (8002398 <LoopForever+0x6>)
  ldr r1, =_edata
 8002362:	490e      	ldr	r1, [pc, #56]	; (800239c <LoopForever+0xa>)
  ldr r2, =_sidata
 8002364:	4a0e      	ldr	r2, [pc, #56]	; (80023a0 <LoopForever+0xe>)
  movs r3, #0
 8002366:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8002368:	e002      	b.n	8002370 <LoopCopyDataInit>

0800236a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800236a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800236c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800236e:	3304      	adds	r3, #4

08002370 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002370:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002372:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002374:	d3f9      	bcc.n	800236a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002376:	4a0b      	ldr	r2, [pc, #44]	; (80023a4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002378:	4c0b      	ldr	r4, [pc, #44]	; (80023a8 <LoopForever+0x16>)
  movs r3, #0
 800237a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800237c:	e001      	b.n	8002382 <LoopFillZerobss>

0800237e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800237e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002380:	3204      	adds	r2, #4

08002382 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002382:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002384:	d3fb      	bcc.n	800237e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002386:	f7ff ffd7 	bl	8002338 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800238a:	f007 f927 	bl	80095dc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800238e:	f7fe fdd1 	bl	8000f34 <main>

08002392 <LoopForever>:

LoopForever:
    b LoopForever
 8002392:	e7fe      	b.n	8002392 <LoopForever>
  ldr   r0, =_estack
 8002394:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002398:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800239c:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 80023a0:	0800c88c 	.word	0x0800c88c
  ldr r2, =_sbss
 80023a4:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 80023a8:	20001820 	.word	0x20001820

080023ac <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80023ac:	e7fe      	b.n	80023ac <ADC1_2_IRQHandler>

080023ae <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80023ae:	b580      	push	{r7, lr}
 80023b0:	b082      	sub	sp, #8
 80023b2:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80023b4:	2300      	movs	r3, #0
 80023b6:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80023b8:	2003      	movs	r0, #3
 80023ba:	f001 ff05 	bl	80041c8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80023be:	2000      	movs	r0, #0
 80023c0:	f000 f80e 	bl	80023e0 <HAL_InitTick>
 80023c4:	4603      	mov	r3, r0
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d002      	beq.n	80023d0 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80023ca:	2301      	movs	r3, #1
 80023cc:	71fb      	strb	r3, [r7, #7]
 80023ce:	e001      	b.n	80023d4 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80023d0:	f7ff fac0 	bl	8001954 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80023d4:	79fb      	ldrb	r3, [r7, #7]

}
 80023d6:	4618      	mov	r0, r3
 80023d8:	3708      	adds	r7, #8
 80023da:	46bd      	mov	sp, r7
 80023dc:	bd80      	pop	{r7, pc}
	...

080023e0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80023e0:	b580      	push	{r7, lr}
 80023e2:	b084      	sub	sp, #16
 80023e4:	af00      	add	r7, sp, #0
 80023e6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80023e8:	2300      	movs	r3, #0
 80023ea:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 80023ec:	4b16      	ldr	r3, [pc, #88]	; (8002448 <HAL_InitTick+0x68>)
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d022      	beq.n	800243a <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80023f4:	4b15      	ldr	r3, [pc, #84]	; (800244c <HAL_InitTick+0x6c>)
 80023f6:	681a      	ldr	r2, [r3, #0]
 80023f8:	4b13      	ldr	r3, [pc, #76]	; (8002448 <HAL_InitTick+0x68>)
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8002400:	fbb1 f3f3 	udiv	r3, r1, r3
 8002404:	fbb2 f3f3 	udiv	r3, r2, r3
 8002408:	4618      	mov	r0, r3
 800240a:	f001 ff14 	bl	8004236 <HAL_SYSTICK_Config>
 800240e:	4603      	mov	r3, r0
 8002410:	2b00      	cmp	r3, #0
 8002412:	d10f      	bne.n	8002434 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	2b0f      	cmp	r3, #15
 8002418:	d809      	bhi.n	800242e <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800241a:	2200      	movs	r2, #0
 800241c:	6879      	ldr	r1, [r7, #4]
 800241e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002422:	f001 fedc 	bl	80041de <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002426:	4a0a      	ldr	r2, [pc, #40]	; (8002450 <HAL_InitTick+0x70>)
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	6013      	str	r3, [r2, #0]
 800242c:	e007      	b.n	800243e <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 800242e:	2301      	movs	r3, #1
 8002430:	73fb      	strb	r3, [r7, #15]
 8002432:	e004      	b.n	800243e <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002434:	2301      	movs	r3, #1
 8002436:	73fb      	strb	r3, [r7, #15]
 8002438:	e001      	b.n	800243e <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 800243a:	2301      	movs	r3, #1
 800243c:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800243e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002440:	4618      	mov	r0, r3
 8002442:	3710      	adds	r7, #16
 8002444:	46bd      	mov	sp, r7
 8002446:	bd80      	pop	{r7, pc}
 8002448:	20000008 	.word	0x20000008
 800244c:	20000000 	.word	0x20000000
 8002450:	20000004 	.word	0x20000004

08002454 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002454:	b480      	push	{r7}
 8002456:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002458:	4b05      	ldr	r3, [pc, #20]	; (8002470 <HAL_IncTick+0x1c>)
 800245a:	681a      	ldr	r2, [r3, #0]
 800245c:	4b05      	ldr	r3, [pc, #20]	; (8002474 <HAL_IncTick+0x20>)
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	4413      	add	r3, r2
 8002462:	4a03      	ldr	r2, [pc, #12]	; (8002470 <HAL_IncTick+0x1c>)
 8002464:	6013      	str	r3, [r2, #0]
}
 8002466:	bf00      	nop
 8002468:	46bd      	mov	sp, r7
 800246a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800246e:	4770      	bx	lr
 8002470:	2000180c 	.word	0x2000180c
 8002474:	20000008 	.word	0x20000008

08002478 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002478:	b480      	push	{r7}
 800247a:	af00      	add	r7, sp, #0
  return uwTick;
 800247c:	4b03      	ldr	r3, [pc, #12]	; (800248c <HAL_GetTick+0x14>)
 800247e:	681b      	ldr	r3, [r3, #0]
}
 8002480:	4618      	mov	r0, r3
 8002482:	46bd      	mov	sp, r7
 8002484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002488:	4770      	bx	lr
 800248a:	bf00      	nop
 800248c:	2000180c 	.word	0x2000180c

08002490 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002490:	b580      	push	{r7, lr}
 8002492:	b084      	sub	sp, #16
 8002494:	af00      	add	r7, sp, #0
 8002496:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002498:	f7ff ffee 	bl	8002478 <HAL_GetTick>
 800249c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80024a8:	d004      	beq.n	80024b4 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 80024aa:	4b09      	ldr	r3, [pc, #36]	; (80024d0 <HAL_Delay+0x40>)
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	68fa      	ldr	r2, [r7, #12]
 80024b0:	4413      	add	r3, r2
 80024b2:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80024b4:	bf00      	nop
 80024b6:	f7ff ffdf 	bl	8002478 <HAL_GetTick>
 80024ba:	4602      	mov	r2, r0
 80024bc:	68bb      	ldr	r3, [r7, #8]
 80024be:	1ad3      	subs	r3, r2, r3
 80024c0:	68fa      	ldr	r2, [r7, #12]
 80024c2:	429a      	cmp	r2, r3
 80024c4:	d8f7      	bhi.n	80024b6 <HAL_Delay+0x26>
  {
  }
}
 80024c6:	bf00      	nop
 80024c8:	bf00      	nop
 80024ca:	3710      	adds	r7, #16
 80024cc:	46bd      	mov	sp, r7
 80024ce:	bd80      	pop	{r7, pc}
 80024d0:	20000008 	.word	0x20000008

080024d4 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80024d4:	b480      	push	{r7}
 80024d6:	b083      	sub	sp, #12
 80024d8:	af00      	add	r7, sp, #0
 80024da:	6078      	str	r0, [r7, #4]
 80024dc:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	689b      	ldr	r3, [r3, #8]
 80024e2:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 80024e6:	683b      	ldr	r3, [r7, #0]
 80024e8:	431a      	orrs	r2, r3
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	609a      	str	r2, [r3, #8]
}
 80024ee:	bf00      	nop
 80024f0:	370c      	adds	r7, #12
 80024f2:	46bd      	mov	sp, r7
 80024f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f8:	4770      	bx	lr

080024fa <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80024fa:	b480      	push	{r7}
 80024fc:	b083      	sub	sp, #12
 80024fe:	af00      	add	r7, sp, #0
 8002500:	6078      	str	r0, [r7, #4]
 8002502:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	689b      	ldr	r3, [r3, #8]
 8002508:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 800250c:	683b      	ldr	r3, [r7, #0]
 800250e:	431a      	orrs	r2, r3
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	609a      	str	r2, [r3, #8]
}
 8002514:	bf00      	nop
 8002516:	370c      	adds	r7, #12
 8002518:	46bd      	mov	sp, r7
 800251a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800251e:	4770      	bx	lr

08002520 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002520:	b480      	push	{r7}
 8002522:	b083      	sub	sp, #12
 8002524:	af00      	add	r7, sp, #0
 8002526:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	689b      	ldr	r3, [r3, #8]
 800252c:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8002530:	4618      	mov	r0, r3
 8002532:	370c      	adds	r7, #12
 8002534:	46bd      	mov	sp, r7
 8002536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800253a:	4770      	bx	lr

0800253c <LL_ADC_SetOffset>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 800253c:	b480      	push	{r7}
 800253e:	b087      	sub	sp, #28
 8002540:	af00      	add	r7, sp, #0
 8002542:	60f8      	str	r0, [r7, #12]
 8002544:	60b9      	str	r1, [r7, #8]
 8002546:	607a      	str	r2, [r7, #4]
 8002548:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	3360      	adds	r3, #96	; 0x60
 800254e:	461a      	mov	r2, r3
 8002550:	68bb      	ldr	r3, [r7, #8]
 8002552:	009b      	lsls	r3, r3, #2
 8002554:	4413      	add	r3, r2
 8002556:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002558:	697b      	ldr	r3, [r7, #20]
 800255a:	681a      	ldr	r2, [r3, #0]
 800255c:	4b08      	ldr	r3, [pc, #32]	; (8002580 <LL_ADC_SetOffset+0x44>)
 800255e:	4013      	ands	r3, r2
 8002560:	687a      	ldr	r2, [r7, #4]
 8002562:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8002566:	683a      	ldr	r2, [r7, #0]
 8002568:	430a      	orrs	r2, r1
 800256a:	4313      	orrs	r3, r2
 800256c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002570:	697b      	ldr	r3, [r7, #20]
 8002572:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8002574:	bf00      	nop
 8002576:	371c      	adds	r7, #28
 8002578:	46bd      	mov	sp, r7
 800257a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800257e:	4770      	bx	lr
 8002580:	03fff000 	.word	0x03fff000

08002584 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8002584:	b480      	push	{r7}
 8002586:	b085      	sub	sp, #20
 8002588:	af00      	add	r7, sp, #0
 800258a:	6078      	str	r0, [r7, #4]
 800258c:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	3360      	adds	r3, #96	; 0x60
 8002592:	461a      	mov	r2, r3
 8002594:	683b      	ldr	r3, [r7, #0]
 8002596:	009b      	lsls	r3, r3, #2
 8002598:	4413      	add	r3, r2
 800259a:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 80025a4:	4618      	mov	r0, r3
 80025a6:	3714      	adds	r7, #20
 80025a8:	46bd      	mov	sp, r7
 80025aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ae:	4770      	bx	lr

080025b0 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80025b0:	b480      	push	{r7}
 80025b2:	b087      	sub	sp, #28
 80025b4:	af00      	add	r7, sp, #0
 80025b6:	60f8      	str	r0, [r7, #12]
 80025b8:	60b9      	str	r1, [r7, #8]
 80025ba:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	3360      	adds	r3, #96	; 0x60
 80025c0:	461a      	mov	r2, r3
 80025c2:	68bb      	ldr	r3, [r7, #8]
 80025c4:	009b      	lsls	r3, r3, #2
 80025c6:	4413      	add	r3, r2
 80025c8:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80025ca:	697b      	ldr	r3, [r7, #20]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	431a      	orrs	r2, r3
 80025d6:	697b      	ldr	r3, [r7, #20]
 80025d8:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80025da:	bf00      	nop
 80025dc:	371c      	adds	r7, #28
 80025de:	46bd      	mov	sp, r7
 80025e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e4:	4770      	bx	lr

080025e6 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 80025e6:	b480      	push	{r7}
 80025e8:	b087      	sub	sp, #28
 80025ea:	af00      	add	r7, sp, #0
 80025ec:	60f8      	str	r0, [r7, #12]
 80025ee:	60b9      	str	r1, [r7, #8]
 80025f0:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	3360      	adds	r3, #96	; 0x60
 80025f6:	461a      	mov	r2, r3
 80025f8:	68bb      	ldr	r3, [r7, #8]
 80025fa:	009b      	lsls	r3, r3, #2
 80025fc:	4413      	add	r3, r2
 80025fe:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002600:	697b      	ldr	r3, [r7, #20]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	431a      	orrs	r2, r3
 800260c:	697b      	ldr	r3, [r7, #20]
 800260e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8002610:	bf00      	nop
 8002612:	371c      	adds	r7, #28
 8002614:	46bd      	mov	sp, r7
 8002616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800261a:	4770      	bx	lr

0800261c <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 800261c:	b480      	push	{r7}
 800261e:	b087      	sub	sp, #28
 8002620:	af00      	add	r7, sp, #0
 8002622:	60f8      	str	r0, [r7, #12]
 8002624:	60b9      	str	r1, [r7, #8]
 8002626:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	3360      	adds	r3, #96	; 0x60
 800262c:	461a      	mov	r2, r3
 800262e:	68bb      	ldr	r3, [r7, #8]
 8002630:	009b      	lsls	r3, r3, #2
 8002632:	4413      	add	r3, r2
 8002634:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002636:	697b      	ldr	r3, [r7, #20]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	431a      	orrs	r2, r3
 8002642:	697b      	ldr	r3, [r7, #20]
 8002644:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8002646:	bf00      	nop
 8002648:	371c      	adds	r7, #28
 800264a:	46bd      	mov	sp, r7
 800264c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002650:	4770      	bx	lr

08002652 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8002652:	b480      	push	{r7}
 8002654:	b083      	sub	sp, #12
 8002656:	af00      	add	r7, sp, #0
 8002658:	6078      	str	r0, [r7, #4]
 800265a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	695b      	ldr	r3, [r3, #20]
 8002660:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002664:	683b      	ldr	r3, [r7, #0]
 8002666:	431a      	orrs	r2, r3
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	615a      	str	r2, [r3, #20]
}
 800266c:	bf00      	nop
 800266e:	370c      	adds	r7, #12
 8002670:	46bd      	mov	sp, r7
 8002672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002676:	4770      	bx	lr

08002678 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8002678:	b480      	push	{r7}
 800267a:	b083      	sub	sp, #12
 800267c:	af00      	add	r7, sp, #0
 800267e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	68db      	ldr	r3, [r3, #12]
 8002684:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002688:	2b00      	cmp	r3, #0
 800268a:	d101      	bne.n	8002690 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 800268c:	2301      	movs	r3, #1
 800268e:	e000      	b.n	8002692 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8002690:	2300      	movs	r3, #0
}
 8002692:	4618      	mov	r0, r3
 8002694:	370c      	adds	r7, #12
 8002696:	46bd      	mov	sp, r7
 8002698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800269c:	4770      	bx	lr

0800269e <LL_ADC_REG_SetSequencerRanks>:
  *         (8) On STM32G4, fast channel allows: 2.5 (sampling) + 12.5 (conversion) = 15 ADC clock cycles (fADC) to convert in 12-bit resolution.
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800269e:	b480      	push	{r7}
 80026a0:	b087      	sub	sp, #28
 80026a2:	af00      	add	r7, sp, #0
 80026a4:	60f8      	str	r0, [r7, #12]
 80026a6:	60b9      	str	r1, [r7, #8]
 80026a8:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	3330      	adds	r3, #48	; 0x30
 80026ae:	461a      	mov	r2, r3
 80026b0:	68bb      	ldr	r3, [r7, #8]
 80026b2:	0a1b      	lsrs	r3, r3, #8
 80026b4:	009b      	lsls	r3, r3, #2
 80026b6:	f003 030c 	and.w	r3, r3, #12
 80026ba:	4413      	add	r3, r2
 80026bc:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80026be:	697b      	ldr	r3, [r7, #20]
 80026c0:	681a      	ldr	r2, [r3, #0]
 80026c2:	68bb      	ldr	r3, [r7, #8]
 80026c4:	f003 031f 	and.w	r3, r3, #31
 80026c8:	211f      	movs	r1, #31
 80026ca:	fa01 f303 	lsl.w	r3, r1, r3
 80026ce:	43db      	mvns	r3, r3
 80026d0:	401a      	ands	r2, r3
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	0e9b      	lsrs	r3, r3, #26
 80026d6:	f003 011f 	and.w	r1, r3, #31
 80026da:	68bb      	ldr	r3, [r7, #8]
 80026dc:	f003 031f 	and.w	r3, r3, #31
 80026e0:	fa01 f303 	lsl.w	r3, r1, r3
 80026e4:	431a      	orrs	r2, r3
 80026e6:	697b      	ldr	r3, [r7, #20]
 80026e8:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80026ea:	bf00      	nop
 80026ec:	371c      	adds	r7, #28
 80026ee:	46bd      	mov	sp, r7
 80026f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f4:	4770      	bx	lr

080026f6 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80026f6:	b480      	push	{r7}
 80026f8:	b087      	sub	sp, #28
 80026fa:	af00      	add	r7, sp, #0
 80026fc:	60f8      	str	r0, [r7, #12]
 80026fe:	60b9      	str	r1, [r7, #8]
 8002700:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	3314      	adds	r3, #20
 8002706:	461a      	mov	r2, r3
 8002708:	68bb      	ldr	r3, [r7, #8]
 800270a:	0e5b      	lsrs	r3, r3, #25
 800270c:	009b      	lsls	r3, r3, #2
 800270e:	f003 0304 	and.w	r3, r3, #4
 8002712:	4413      	add	r3, r2
 8002714:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002716:	697b      	ldr	r3, [r7, #20]
 8002718:	681a      	ldr	r2, [r3, #0]
 800271a:	68bb      	ldr	r3, [r7, #8]
 800271c:	0d1b      	lsrs	r3, r3, #20
 800271e:	f003 031f 	and.w	r3, r3, #31
 8002722:	2107      	movs	r1, #7
 8002724:	fa01 f303 	lsl.w	r3, r1, r3
 8002728:	43db      	mvns	r3, r3
 800272a:	401a      	ands	r2, r3
 800272c:	68bb      	ldr	r3, [r7, #8]
 800272e:	0d1b      	lsrs	r3, r3, #20
 8002730:	f003 031f 	and.w	r3, r3, #31
 8002734:	6879      	ldr	r1, [r7, #4]
 8002736:	fa01 f303 	lsl.w	r3, r1, r3
 800273a:	431a      	orrs	r2, r3
 800273c:	697b      	ldr	r3, [r7, #20]
 800273e:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8002740:	bf00      	nop
 8002742:	371c      	adds	r7, #28
 8002744:	46bd      	mov	sp, r7
 8002746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800274a:	4770      	bx	lr

0800274c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 800274c:	b480      	push	{r7}
 800274e:	b085      	sub	sp, #20
 8002750:	af00      	add	r7, sp, #0
 8002752:	60f8      	str	r0, [r7, #12]
 8002754:	60b9      	str	r1, [r7, #8]
 8002756:	607a      	str	r2, [r7, #4]
  /* Bits for single or differential mode selection for each channel are set  */
  /* to 1 only when the differential mode is selected, and to 0 when the      */
  /* single mode is selected.                                                 */
  
  if (SingleDiff == LL_ADC_DIFFERENTIAL_ENDED)
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	4a0f      	ldr	r2, [pc, #60]	; (8002798 <LL_ADC_SetChannelSingleDiff+0x4c>)
 800275c:	4293      	cmp	r3, r2
 800275e:	d10a      	bne.n	8002776 <LL_ADC_SetChannelSingleDiff+0x2a>
  {
    SET_BIT(ADCx->DIFSEL,
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8002766:	68bb      	ldr	r3, [r7, #8]
 8002768:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800276c:	431a      	orrs	r2, r3
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  else
  {
    CLEAR_BIT(ADCx->DIFSEL,
            Channel & ADC_SINGLEDIFF_CHANNEL_MASK);
  }
}
 8002774:	e00a      	b.n	800278c <LL_ADC_SetChannelSingleDiff+0x40>
    CLEAR_BIT(ADCx->DIFSEL,
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 800277c:	68bb      	ldr	r3, [r7, #8]
 800277e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002782:	43db      	mvns	r3, r3
 8002784:	401a      	ands	r2, r3
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
 800278c:	bf00      	nop
 800278e:	3714      	adds	r7, #20
 8002790:	46bd      	mov	sp, r7
 8002792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002796:	4770      	bx	lr
 8002798:	407f0000 	.word	0x407f0000

0800279c <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 800279c:	b480      	push	{r7}
 800279e:	b083      	sub	sp, #12
 80027a0:	af00      	add	r7, sp, #0
 80027a2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	689b      	ldr	r3, [r3, #8]
 80027a8:	f003 031f 	and.w	r3, r3, #31
}
 80027ac:	4618      	mov	r0, r3
 80027ae:	370c      	adds	r7, #12
 80027b0:	46bd      	mov	sp, r7
 80027b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b6:	4770      	bx	lr

080027b8 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80027b8:	b480      	push	{r7}
 80027ba:	b083      	sub	sp, #12
 80027bc:	af00      	add	r7, sp, #0
 80027be:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	689b      	ldr	r3, [r3, #8]
 80027c4:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 80027c8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80027cc:	687a      	ldr	r2, [r7, #4]
 80027ce:	6093      	str	r3, [r2, #8]
}
 80027d0:	bf00      	nop
 80027d2:	370c      	adds	r7, #12
 80027d4:	46bd      	mov	sp, r7
 80027d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027da:	4770      	bx	lr

080027dc <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 80027dc:	b480      	push	{r7}
 80027de:	b083      	sub	sp, #12
 80027e0:	af00      	add	r7, sp, #0
 80027e2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	689b      	ldr	r3, [r3, #8]
 80027e8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80027ec:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80027f0:	d101      	bne.n	80027f6 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80027f2:	2301      	movs	r3, #1
 80027f4:	e000      	b.n	80027f8 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80027f6:	2300      	movs	r3, #0
}
 80027f8:	4618      	mov	r0, r3
 80027fa:	370c      	adds	r7, #12
 80027fc:	46bd      	mov	sp, r7
 80027fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002802:	4770      	bx	lr

08002804 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002804:	b480      	push	{r7}
 8002806:	b083      	sub	sp, #12
 8002808:	af00      	add	r7, sp, #0
 800280a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	689b      	ldr	r3, [r3, #8]
 8002810:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8002814:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002818:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002820:	bf00      	nop
 8002822:	370c      	adds	r7, #12
 8002824:	46bd      	mov	sp, r7
 8002826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800282a:	4770      	bx	lr

0800282c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 800282c:	b480      	push	{r7}
 800282e:	b083      	sub	sp, #12
 8002830:	af00      	add	r7, sp, #0
 8002832:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	689b      	ldr	r3, [r3, #8]
 8002838:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800283c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002840:	d101      	bne.n	8002846 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002842:	2301      	movs	r3, #1
 8002844:	e000      	b.n	8002848 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8002846:	2300      	movs	r3, #0
}
 8002848:	4618      	mov	r0, r3
 800284a:	370c      	adds	r7, #12
 800284c:	46bd      	mov	sp, r7
 800284e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002852:	4770      	bx	lr

08002854 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8002854:	b480      	push	{r7}
 8002856:	b083      	sub	sp, #12
 8002858:	af00      	add	r7, sp, #0
 800285a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	689b      	ldr	r3, [r3, #8]
 8002860:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002864:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002868:	f043 0201 	orr.w	r2, r3, #1
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8002870:	bf00      	nop
 8002872:	370c      	adds	r7, #12
 8002874:	46bd      	mov	sp, r7
 8002876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800287a:	4770      	bx	lr

0800287c <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 800287c:	b480      	push	{r7}
 800287e:	b083      	sub	sp, #12
 8002880:	af00      	add	r7, sp, #0
 8002882:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	689b      	ldr	r3, [r3, #8]
 8002888:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800288c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002890:	f043 0202 	orr.w	r2, r3, #2
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8002898:	bf00      	nop
 800289a:	370c      	adds	r7, #12
 800289c:	46bd      	mov	sp, r7
 800289e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a2:	4770      	bx	lr

080028a4 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 80028a4:	b480      	push	{r7}
 80028a6:	b083      	sub	sp, #12
 80028a8:	af00      	add	r7, sp, #0
 80028aa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	689b      	ldr	r3, [r3, #8]
 80028b0:	f003 0301 	and.w	r3, r3, #1
 80028b4:	2b01      	cmp	r3, #1
 80028b6:	d101      	bne.n	80028bc <LL_ADC_IsEnabled+0x18>
 80028b8:	2301      	movs	r3, #1
 80028ba:	e000      	b.n	80028be <LL_ADC_IsEnabled+0x1a>
 80028bc:	2300      	movs	r3, #0
}
 80028be:	4618      	mov	r0, r3
 80028c0:	370c      	adds	r7, #12
 80028c2:	46bd      	mov	sp, r7
 80028c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c8:	4770      	bx	lr

080028ca <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 80028ca:	b480      	push	{r7}
 80028cc:	b083      	sub	sp, #12
 80028ce:	af00      	add	r7, sp, #0
 80028d0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	689b      	ldr	r3, [r3, #8]
 80028d6:	f003 0302 	and.w	r3, r3, #2
 80028da:	2b02      	cmp	r3, #2
 80028dc:	d101      	bne.n	80028e2 <LL_ADC_IsDisableOngoing+0x18>
 80028de:	2301      	movs	r3, #1
 80028e0:	e000      	b.n	80028e4 <LL_ADC_IsDisableOngoing+0x1a>
 80028e2:	2300      	movs	r3, #0
}
 80028e4:	4618      	mov	r0, r3
 80028e6:	370c      	adds	r7, #12
 80028e8:	46bd      	mov	sp, r7
 80028ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ee:	4770      	bx	lr

080028f0 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80028f0:	b480      	push	{r7}
 80028f2:	b083      	sub	sp, #12
 80028f4:	af00      	add	r7, sp, #0
 80028f6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	689b      	ldr	r3, [r3, #8]
 80028fc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002900:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002904:	f043 0204 	orr.w	r2, r3, #4
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 800290c:	bf00      	nop
 800290e:	370c      	adds	r7, #12
 8002910:	46bd      	mov	sp, r7
 8002912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002916:	4770      	bx	lr

08002918 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 8002918:	b480      	push	{r7}
 800291a:	b083      	sub	sp, #12
 800291c:	af00      	add	r7, sp, #0
 800291e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	689b      	ldr	r3, [r3, #8]
 8002924:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002928:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800292c:	f043 0210 	orr.w	r2, r3, #16
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 8002934:	bf00      	nop
 8002936:	370c      	adds	r7, #12
 8002938:	46bd      	mov	sp, r7
 800293a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800293e:	4770      	bx	lr

08002940 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002940:	b480      	push	{r7}
 8002942:	b083      	sub	sp, #12
 8002944:	af00      	add	r7, sp, #0
 8002946:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	689b      	ldr	r3, [r3, #8]
 800294c:	f003 0304 	and.w	r3, r3, #4
 8002950:	2b04      	cmp	r3, #4
 8002952:	d101      	bne.n	8002958 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002954:	2301      	movs	r3, #1
 8002956:	e000      	b.n	800295a <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002958:	2300      	movs	r3, #0
}
 800295a:	4618      	mov	r0, r3
 800295c:	370c      	adds	r7, #12
 800295e:	46bd      	mov	sp, r7
 8002960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002964:	4770      	bx	lr

08002966 <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 8002966:	b480      	push	{r7}
 8002968:	b083      	sub	sp, #12
 800296a:	af00      	add	r7, sp, #0
 800296c:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	689b      	ldr	r3, [r3, #8]
 8002972:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002976:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800297a:	f043 0220 	orr.w	r2, r3, #32
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 8002982:	bf00      	nop
 8002984:	370c      	adds	r7, #12
 8002986:	46bd      	mov	sp, r7
 8002988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800298c:	4770      	bx	lr

0800298e <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800298e:	b480      	push	{r7}
 8002990:	b083      	sub	sp, #12
 8002992:	af00      	add	r7, sp, #0
 8002994:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	689b      	ldr	r3, [r3, #8]
 800299a:	f003 0308 	and.w	r3, r3, #8
 800299e:	2b08      	cmp	r3, #8
 80029a0:	d101      	bne.n	80029a6 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80029a2:	2301      	movs	r3, #1
 80029a4:	e000      	b.n	80029a8 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80029a6:	2300      	movs	r3, #0
}
 80029a8:	4618      	mov	r0, r3
 80029aa:	370c      	adds	r7, #12
 80029ac:	46bd      	mov	sp, r7
 80029ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b2:	4770      	bx	lr

080029b4 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80029b4:	b590      	push	{r4, r7, lr}
 80029b6:	b089      	sub	sp, #36	; 0x24
 80029b8:	af00      	add	r7, sp, #0
 80029ba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80029bc:	2300      	movs	r3, #0
 80029be:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80029c0:	2300      	movs	r3, #0
 80029c2:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d101      	bne.n	80029ce <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80029ca:	2301      	movs	r3, #1
 80029cc:	e1af      	b.n	8002d2e <HAL_ADC_Init+0x37a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	695b      	ldr	r3, [r3, #20]
 80029d2:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d109      	bne.n	80029f0 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80029dc:	6878      	ldr	r0, [r7, #4]
 80029de:	f7fe ffdd 	bl	800199c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	2200      	movs	r2, #0
 80029e6:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	2200      	movs	r2, #0
 80029ec:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	4618      	mov	r0, r3
 80029f6:	f7ff fef1 	bl	80027dc <LL_ADC_IsDeepPowerDownEnabled>
 80029fa:	4603      	mov	r3, r0
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d004      	beq.n	8002a0a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	4618      	mov	r0, r3
 8002a06:	f7ff fed7 	bl	80027b8 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	4618      	mov	r0, r3
 8002a10:	f7ff ff0c 	bl	800282c <LL_ADC_IsInternalRegulatorEnabled>
 8002a14:	4603      	mov	r3, r0
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d115      	bne.n	8002a46 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	4618      	mov	r0, r3
 8002a20:	f7ff fef0 	bl	8002804 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002a24:	4b9f      	ldr	r3, [pc, #636]	; (8002ca4 <HAL_ADC_Init+0x2f0>)
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	099b      	lsrs	r3, r3, #6
 8002a2a:	4a9f      	ldr	r2, [pc, #636]	; (8002ca8 <HAL_ADC_Init+0x2f4>)
 8002a2c:	fba2 2303 	umull	r2, r3, r2, r3
 8002a30:	099b      	lsrs	r3, r3, #6
 8002a32:	3301      	adds	r3, #1
 8002a34:	005b      	lsls	r3, r3, #1
 8002a36:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002a38:	e002      	b.n	8002a40 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8002a3a:	68bb      	ldr	r3, [r7, #8]
 8002a3c:	3b01      	subs	r3, #1
 8002a3e:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002a40:	68bb      	ldr	r3, [r7, #8]
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d1f9      	bne.n	8002a3a <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	4618      	mov	r0, r3
 8002a4c:	f7ff feee 	bl	800282c <LL_ADC_IsInternalRegulatorEnabled>
 8002a50:	4603      	mov	r3, r0
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d10d      	bne.n	8002a72 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a5a:	f043 0210 	orr.w	r2, r3, #16
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002a66:	f043 0201 	orr.w	r2, r3, #1
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 8002a6e:	2301      	movs	r3, #1
 8002a70:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	4618      	mov	r0, r3
 8002a78:	f7ff ff62 	bl	8002940 <LL_ADC_REG_IsConversionOngoing>
 8002a7c:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a82:	f003 0310 	and.w	r3, r3, #16
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	f040 8148 	bne.w	8002d1c <HAL_ADC_Init+0x368>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8002a8c:	697b      	ldr	r3, [r7, #20]
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	f040 8144 	bne.w	8002d1c <HAL_ADC_Init+0x368>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a98:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8002a9c:	f043 0202 	orr.w	r2, r3, #2
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	4618      	mov	r0, r3
 8002aaa:	f7ff fefb 	bl	80028a4 <LL_ADC_IsEnabled>
 8002aae:	4603      	mov	r3, r0
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d141      	bne.n	8002b38 <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002abc:	d004      	beq.n	8002ac8 <HAL_ADC_Init+0x114>
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	4a7a      	ldr	r2, [pc, #488]	; (8002cac <HAL_ADC_Init+0x2f8>)
 8002ac4:	4293      	cmp	r3, r2
 8002ac6:	d10f      	bne.n	8002ae8 <HAL_ADC_Init+0x134>
 8002ac8:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8002acc:	f7ff feea 	bl	80028a4 <LL_ADC_IsEnabled>
 8002ad0:	4604      	mov	r4, r0
 8002ad2:	4876      	ldr	r0, [pc, #472]	; (8002cac <HAL_ADC_Init+0x2f8>)
 8002ad4:	f7ff fee6 	bl	80028a4 <LL_ADC_IsEnabled>
 8002ad8:	4603      	mov	r3, r0
 8002ada:	4323      	orrs	r3, r4
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	bf0c      	ite	eq
 8002ae0:	2301      	moveq	r3, #1
 8002ae2:	2300      	movne	r3, #0
 8002ae4:	b2db      	uxtb	r3, r3
 8002ae6:	e012      	b.n	8002b0e <HAL_ADC_Init+0x15a>
 8002ae8:	4871      	ldr	r0, [pc, #452]	; (8002cb0 <HAL_ADC_Init+0x2fc>)
 8002aea:	f7ff fedb 	bl	80028a4 <LL_ADC_IsEnabled>
 8002aee:	4604      	mov	r4, r0
 8002af0:	4870      	ldr	r0, [pc, #448]	; (8002cb4 <HAL_ADC_Init+0x300>)
 8002af2:	f7ff fed7 	bl	80028a4 <LL_ADC_IsEnabled>
 8002af6:	4603      	mov	r3, r0
 8002af8:	431c      	orrs	r4, r3
 8002afa:	486f      	ldr	r0, [pc, #444]	; (8002cb8 <HAL_ADC_Init+0x304>)
 8002afc:	f7ff fed2 	bl	80028a4 <LL_ADC_IsEnabled>
 8002b00:	4603      	mov	r3, r0
 8002b02:	4323      	orrs	r3, r4
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	bf0c      	ite	eq
 8002b08:	2301      	moveq	r3, #1
 8002b0a:	2300      	movne	r3, #0
 8002b0c:	b2db      	uxtb	r3, r3
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d012      	beq.n	8002b38 <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002b1a:	d004      	beq.n	8002b26 <HAL_ADC_Init+0x172>
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	4a62      	ldr	r2, [pc, #392]	; (8002cac <HAL_ADC_Init+0x2f8>)
 8002b22:	4293      	cmp	r3, r2
 8002b24:	d101      	bne.n	8002b2a <HAL_ADC_Init+0x176>
 8002b26:	4a65      	ldr	r2, [pc, #404]	; (8002cbc <HAL_ADC_Init+0x308>)
 8002b28:	e000      	b.n	8002b2c <HAL_ADC_Init+0x178>
 8002b2a:	4a65      	ldr	r2, [pc, #404]	; (8002cc0 <HAL_ADC_Init+0x30c>)
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	685b      	ldr	r3, [r3, #4]
 8002b30:	4619      	mov	r1, r3
 8002b32:	4610      	mov	r0, r2
 8002b34:	f7ff fcce 	bl	80024d4 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	7f5b      	ldrb	r3, [r3, #29]
 8002b3c:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002b42:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8002b48:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8002b4e:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002b56:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002b58:	4313      	orrs	r3, r2
 8002b5a:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002b62:	2b01      	cmp	r3, #1
 8002b64:	d106      	bne.n	8002b74 <HAL_ADC_Init+0x1c0>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b6a:	3b01      	subs	r3, #1
 8002b6c:	045b      	lsls	r3, r3, #17
 8002b6e:	69ba      	ldr	r2, [r7, #24]
 8002b70:	4313      	orrs	r3, r2
 8002b72:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d009      	beq.n	8002b90 <HAL_ADC_Init+0x1dc>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b80:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b88:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002b8a:	69ba      	ldr	r2, [r7, #24]
 8002b8c:	4313      	orrs	r3, r2
 8002b8e:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	68da      	ldr	r2, [r3, #12]
 8002b96:	4b4b      	ldr	r3, [pc, #300]	; (8002cc4 <HAL_ADC_Init+0x310>)
 8002b98:	4013      	ands	r3, r2
 8002b9a:	687a      	ldr	r2, [r7, #4]
 8002b9c:	6812      	ldr	r2, [r2, #0]
 8002b9e:	69b9      	ldr	r1, [r7, #24]
 8002ba0:	430b      	orrs	r3, r1
 8002ba2:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	691b      	ldr	r3, [r3, #16]
 8002baa:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	430a      	orrs	r2, r1
 8002bb8:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	4618      	mov	r0, r3
 8002bc0:	f7ff febe 	bl	8002940 <LL_ADC_REG_IsConversionOngoing>
 8002bc4:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	4618      	mov	r0, r3
 8002bcc:	f7ff fedf 	bl	800298e <LL_ADC_INJ_IsConversionOngoing>
 8002bd0:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002bd2:	693b      	ldr	r3, [r7, #16]
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d17f      	bne.n	8002cd8 <HAL_ADC_Init+0x324>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d17c      	bne.n	8002cd8 <HAL_ADC_Init+0x324>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	7f1b      	ldrb	r3, [r3, #28]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8002be2:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002bea:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8002bec:	4313      	orrs	r3, r2
 8002bee:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	68db      	ldr	r3, [r3, #12]
 8002bf6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002bfa:	f023 0302 	bic.w	r3, r3, #2
 8002bfe:	687a      	ldr	r2, [r7, #4]
 8002c00:	6812      	ldr	r2, [r2, #0]
 8002c02:	69b9      	ldr	r1, [r7, #24]
 8002c04:	430b      	orrs	r3, r1
 8002c06:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	691b      	ldr	r3, [r3, #16]
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d017      	beq.n	8002c40 <HAL_ADC_Init+0x28c>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	691a      	ldr	r2, [r3, #16]
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8002c1e:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8002c28:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8002c2c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002c30:	687a      	ldr	r2, [r7, #4]
 8002c32:	6911      	ldr	r1, [r2, #16]
 8002c34:	687a      	ldr	r2, [r7, #4]
 8002c36:	6812      	ldr	r2, [r2, #0]
 8002c38:	430b      	orrs	r3, r1
 8002c3a:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 8002c3e:	e013      	b.n	8002c68 <HAL_ADC_Init+0x2b4>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	691a      	ldr	r2, [r3, #16]
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002c4e:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8002c58:	687a      	ldr	r2, [r7, #4]
 8002c5a:	6812      	ldr	r2, [r2, #0]
 8002c5c:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8002c60:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002c64:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002c6e:	2b01      	cmp	r3, #1
 8002c70:	d12a      	bne.n	8002cc8 <HAL_ADC_Init+0x314>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	691b      	ldr	r3, [r3, #16]
 8002c78:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8002c7c:	f023 0304 	bic.w	r3, r3, #4
 8002c80:	687a      	ldr	r2, [r7, #4]
 8002c82:	6c51      	ldr	r1, [r2, #68]	; 0x44
 8002c84:	687a      	ldr	r2, [r7, #4]
 8002c86:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002c88:	4311      	orrs	r1, r2
 8002c8a:	687a      	ldr	r2, [r7, #4]
 8002c8c:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8002c8e:	4311      	orrs	r1, r2
 8002c90:	687a      	ldr	r2, [r7, #4]
 8002c92:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8002c94:	430a      	orrs	r2, r1
 8002c96:	431a      	orrs	r2, r3
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	f042 0201 	orr.w	r2, r2, #1
 8002ca0:	611a      	str	r2, [r3, #16]
 8002ca2:	e019      	b.n	8002cd8 <HAL_ADC_Init+0x324>
 8002ca4:	20000000 	.word	0x20000000
 8002ca8:	053e2d63 	.word	0x053e2d63
 8002cac:	50000100 	.word	0x50000100
 8002cb0:	50000400 	.word	0x50000400
 8002cb4:	50000500 	.word	0x50000500
 8002cb8:	50000600 	.word	0x50000600
 8002cbc:	50000300 	.word	0x50000300
 8002cc0:	50000700 	.word	0x50000700
 8002cc4:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	691a      	ldr	r2, [r3, #16]
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	f022 0201 	bic.w	r2, r2, #1
 8002cd6:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	695b      	ldr	r3, [r3, #20]
 8002cdc:	2b01      	cmp	r3, #1
 8002cde:	d10c      	bne.n	8002cfa <HAL_ADC_Init+0x346>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ce6:	f023 010f 	bic.w	r1, r3, #15
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	6a1b      	ldr	r3, [r3, #32]
 8002cee:	1e5a      	subs	r2, r3, #1
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	430a      	orrs	r2, r1
 8002cf6:	631a      	str	r2, [r3, #48]	; 0x30
 8002cf8:	e007      	b.n	8002d0a <HAL_ADC_Init+0x356>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	f022 020f 	bic.w	r2, r2, #15
 8002d08:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d0e:	f023 0303 	bic.w	r3, r3, #3
 8002d12:	f043 0201 	orr.w	r2, r3, #1
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	65da      	str	r2, [r3, #92]	; 0x5c
 8002d1a:	e007      	b.n	8002d2c <HAL_ADC_Init+0x378>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d20:	f043 0210 	orr.w	r2, r3, #16
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8002d28:	2301      	movs	r3, #1
 8002d2a:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002d2c:	7ffb      	ldrb	r3, [r7, #31]
}
 8002d2e:	4618      	mov	r0, r3
 8002d30:	3724      	adds	r7, #36	; 0x24
 8002d32:	46bd      	mov	sp, r7
 8002d34:	bd90      	pop	{r4, r7, pc}
 8002d36:	bf00      	nop

08002d38 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8002d38:	b580      	push	{r7, lr}
 8002d3a:	b086      	sub	sp, #24
 8002d3c:	af00      	add	r7, sp, #0
 8002d3e:	60f8      	str	r0, [r7, #12]
 8002d40:	60b9      	str	r1, [r7, #8]
 8002d42:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002d4c:	d004      	beq.n	8002d58 <HAL_ADC_Start_DMA+0x20>
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	4a5a      	ldr	r2, [pc, #360]	; (8002ebc <HAL_ADC_Start_DMA+0x184>)
 8002d54:	4293      	cmp	r3, r2
 8002d56:	d101      	bne.n	8002d5c <HAL_ADC_Start_DMA+0x24>
 8002d58:	4b59      	ldr	r3, [pc, #356]	; (8002ec0 <HAL_ADC_Start_DMA+0x188>)
 8002d5a:	e000      	b.n	8002d5e <HAL_ADC_Start_DMA+0x26>
 8002d5c:	4b59      	ldr	r3, [pc, #356]	; (8002ec4 <HAL_ADC_Start_DMA+0x18c>)
 8002d5e:	4618      	mov	r0, r3
 8002d60:	f7ff fd1c 	bl	800279c <LL_ADC_GetMultimode>
 8002d64:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	4618      	mov	r0, r3
 8002d6c:	f7ff fde8 	bl	8002940 <LL_ADC_REG_IsConversionOngoing>
 8002d70:	4603      	mov	r3, r0
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	f040 809b 	bne.w	8002eae <HAL_ADC_Start_DMA+0x176>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8002d7e:	2b01      	cmp	r3, #1
 8002d80:	d101      	bne.n	8002d86 <HAL_ADC_Start_DMA+0x4e>
 8002d82:	2302      	movs	r3, #2
 8002d84:	e096      	b.n	8002eb4 <HAL_ADC_Start_DMA+0x17c>
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	2201      	movs	r2, #1
 8002d8a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	4a4d      	ldr	r2, [pc, #308]	; (8002ec8 <HAL_ADC_Start_DMA+0x190>)
 8002d94:	4293      	cmp	r3, r2
 8002d96:	d008      	beq.n	8002daa <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002d98:	693b      	ldr	r3, [r7, #16]
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d005      	beq.n	8002daa <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002d9e:	693b      	ldr	r3, [r7, #16]
 8002da0:	2b05      	cmp	r3, #5
 8002da2:	d002      	beq.n	8002daa <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002da4:	693b      	ldr	r3, [r7, #16]
 8002da6:	2b09      	cmp	r3, #9
 8002da8:	d17a      	bne.n	8002ea0 <HAL_ADC_Start_DMA+0x168>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8002daa:	68f8      	ldr	r0, [r7, #12]
 8002dac:	f000 fe14 	bl	80039d8 <ADC_Enable>
 8002db0:	4603      	mov	r3, r0
 8002db2:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8002db4:	7dfb      	ldrb	r3, [r7, #23]
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d16d      	bne.n	8002e96 <HAL_ADC_Start_DMA+0x15e>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002dbe:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002dc2:	f023 0301 	bic.w	r3, r3, #1
 8002dc6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	65da      	str	r2, [r3, #92]	; 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	4a3a      	ldr	r2, [pc, #232]	; (8002ebc <HAL_ADC_Start_DMA+0x184>)
 8002dd4:	4293      	cmp	r3, r2
 8002dd6:	d009      	beq.n	8002dec <HAL_ADC_Start_DMA+0xb4>
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	4a3b      	ldr	r2, [pc, #236]	; (8002ecc <HAL_ADC_Start_DMA+0x194>)
 8002dde:	4293      	cmp	r3, r2
 8002de0:	d002      	beq.n	8002de8 <HAL_ADC_Start_DMA+0xb0>
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	e003      	b.n	8002df0 <HAL_ADC_Start_DMA+0xb8>
 8002de8:	4b39      	ldr	r3, [pc, #228]	; (8002ed0 <HAL_ADC_Start_DMA+0x198>)
 8002dea:	e001      	b.n	8002df0 <HAL_ADC_Start_DMA+0xb8>
 8002dec:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002df0:	68fa      	ldr	r2, [r7, #12]
 8002df2:	6812      	ldr	r2, [r2, #0]
 8002df4:	4293      	cmp	r3, r2
 8002df6:	d002      	beq.n	8002dfe <HAL_ADC_Start_DMA+0xc6>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002df8:	693b      	ldr	r3, [r7, #16]
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d105      	bne.n	8002e0a <HAL_ADC_Start_DMA+0xd2>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e02:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	65da      	str	r2, [r3, #92]	; 0x5c
        }
#endif

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e0e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d006      	beq.n	8002e24 <HAL_ADC_Start_DMA+0xec>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002e1a:	f023 0206 	bic.w	r2, r3, #6
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	661a      	str	r2, [r3, #96]	; 0x60
 8002e22:	e002      	b.n	8002e2a <HAL_ADC_Start_DMA+0xf2>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	2200      	movs	r2, #0
 8002e28:	661a      	str	r2, [r3, #96]	; 0x60
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e2e:	4a29      	ldr	r2, [pc, #164]	; (8002ed4 <HAL_ADC_Start_DMA+0x19c>)
 8002e30:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e36:	4a28      	ldr	r2, [pc, #160]	; (8002ed8 <HAL_ADC_Start_DMA+0x1a0>)
 8002e38:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e3e:	4a27      	ldr	r2, [pc, #156]	; (8002edc <HAL_ADC_Start_DMA+0x1a4>)
 8002e40:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	221c      	movs	r2, #28
 8002e48:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	2200      	movs	r2, #0
 8002e4e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	685a      	ldr	r2, [r3, #4]
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	f042 0210 	orr.w	r2, r2, #16
 8002e60:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	68da      	ldr	r2, [r3, #12]
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	f042 0201 	orr.w	r2, r2, #1
 8002e70:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	6d58      	ldr	r0, [r3, #84]	; 0x54
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	3340      	adds	r3, #64	; 0x40
 8002e7c:	4619      	mov	r1, r3
 8002e7e:	68ba      	ldr	r2, [r7, #8]
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	f001 fa8d 	bl	80043a0 <HAL_DMA_Start_IT>
 8002e86:	4603      	mov	r3, r0
 8002e88:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	4618      	mov	r0, r3
 8002e90:	f7ff fd2e 	bl	80028f0 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8002e94:	e00d      	b.n	8002eb2 <HAL_ADC_Start_DMA+0x17a>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	2200      	movs	r2, #0
 8002e9a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
      if (tmp_hal_status == HAL_OK)
 8002e9e:	e008      	b.n	8002eb2 <HAL_ADC_Start_DMA+0x17a>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 8002ea0:	2301      	movs	r3, #1
 8002ea2:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	2200      	movs	r2, #0
 8002ea8:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
 8002eac:	e001      	b.n	8002eb2 <HAL_ADC_Start_DMA+0x17a>
    }
#endif
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002eae:	2302      	movs	r3, #2
 8002eb0:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8002eb2:	7dfb      	ldrb	r3, [r7, #23]
}
 8002eb4:	4618      	mov	r0, r3
 8002eb6:	3718      	adds	r7, #24
 8002eb8:	46bd      	mov	sp, r7
 8002eba:	bd80      	pop	{r7, pc}
 8002ebc:	50000100 	.word	0x50000100
 8002ec0:	50000300 	.word	0x50000300
 8002ec4:	50000700 	.word	0x50000700
 8002ec8:	50000600 	.word	0x50000600
 8002ecc:	50000500 	.word	0x50000500
 8002ed0:	50000400 	.word	0x50000400
 8002ed4:	08003b5b 	.word	0x08003b5b
 8002ed8:	08003c33 	.word	0x08003c33
 8002edc:	08003c4f 	.word	0x08003c4f

08002ee0 <HAL_ADC_Stop_DMA>:
  *         For multimode, the dedicated HAL_ADCEx_MultiModeStop_DMA() API must be used.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef *hadc)
{
 8002ee0:	b580      	push	{r7, lr}
 8002ee2:	b084      	sub	sp, #16
 8002ee4:	af00      	add	r7, sp, #0
 8002ee6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8002eee:	2b01      	cmp	r3, #1
 8002ef0:	d101      	bne.n	8002ef6 <HAL_ADC_Stop_DMA+0x16>
 8002ef2:	2302      	movs	r3, #2
 8002ef4:	e051      	b.n	8002f9a <HAL_ADC_Stop_DMA+0xba>
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	2201      	movs	r2, #1
 8002efa:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* 1. Stop potential ADC group regular conversion on going */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 8002efe:	2103      	movs	r1, #3
 8002f00:	6878      	ldr	r0, [r7, #4]
 8002f02:	f000 fcad 	bl	8003860 <ADC_ConversionStop>
 8002f06:	4603      	mov	r3, r0
 8002f08:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8002f0a:	7bfb      	ldrb	r3, [r7, #15]
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d13f      	bne.n	8002f90 <HAL_ADC_Stop_DMA+0xb0>
  {
    /* Disable ADC DMA (ADC DMA configuration of continuous requests is kept) */
    CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	68da      	ldr	r2, [r3, #12]
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	f022 0201 	bic.w	r2, r2, #1
 8002f1e:	60da      	str	r2, [r3, #12]

    /* Disable the DMA channel (in case of DMA in circular mode or stop       */
    /* while DMA transfer is on going)                                        */
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f24:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002f28:	b2db      	uxtb	r3, r3
 8002f2a:	2b02      	cmp	r3, #2
 8002f2c:	d10f      	bne.n	8002f4e <HAL_ADC_Stop_DMA+0x6e>
    {
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f32:	4618      	mov	r0, r3
 8002f34:	f001 faaf 	bl	8004496 <HAL_DMA_Abort>
 8002f38:	4603      	mov	r3, r0
 8002f3a:	73fb      	strb	r3, [r7, #15]

      /* Check if DMA channel effectively disabled */
      if (tmp_hal_status != HAL_OK)
 8002f3c:	7bfb      	ldrb	r3, [r7, #15]
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d005      	beq.n	8002f4e <HAL_ADC_Stop_DMA+0x6e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f46:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	65da      	str	r2, [r3, #92]	; 0x5c
      }
    }

    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	685a      	ldr	r2, [r3, #4]
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	f022 0210 	bic.w	r2, r2, #16
 8002f5c:	605a      	str	r2, [r3, #4]

    /* 2. Disable the ADC peripheral */
    /* Update "tmp_hal_status" only if DMA channel disabling passed,          */
    /* to keep in memory a potential failing status.                          */
    if (tmp_hal_status == HAL_OK)
 8002f5e:	7bfb      	ldrb	r3, [r7, #15]
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d105      	bne.n	8002f70 <HAL_ADC_Stop_DMA+0x90>
    {
      tmp_hal_status = ADC_Disable(hadc);
 8002f64:	6878      	ldr	r0, [r7, #4]
 8002f66:	f000 fd99 	bl	8003a9c <ADC_Disable>
 8002f6a:	4603      	mov	r3, r0
 8002f6c:	73fb      	strb	r3, [r7, #15]
 8002f6e:	e002      	b.n	8002f76 <HAL_ADC_Stop_DMA+0x96>
    }
    else
    {
      (void)ADC_Disable(hadc);
 8002f70:	6878      	ldr	r0, [r7, #4]
 8002f72:	f000 fd93 	bl	8003a9c <ADC_Disable>
    }

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8002f76:	7bfb      	ldrb	r3, [r7, #15]
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d109      	bne.n	8002f90 <HAL_ADC_Stop_DMA+0xb0>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f80:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002f84:	f023 0301 	bic.w	r3, r3, #1
 8002f88:	f043 0201 	orr.w	r2, r3, #1
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	65da      	str	r2, [r3, #92]	; 0x5c
    }

  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	2200      	movs	r2, #0
 8002f94:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8002f98:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f9a:	4618      	mov	r0, r3
 8002f9c:	3710      	adds	r7, #16
 8002f9e:	46bd      	mov	sp, r7
 8002fa0:	bd80      	pop	{r7, pc}

08002fa2 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002fa2:	b480      	push	{r7}
 8002fa4:	b083      	sub	sp, #12
 8002fa6:	af00      	add	r7, sp, #0
 8002fa8:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8002faa:	bf00      	nop
 8002fac:	370c      	adds	r7, #12
 8002fae:	46bd      	mov	sp, r7
 8002fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb4:	4770      	bx	lr

08002fb6 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002fb6:	b480      	push	{r7}
 8002fb8:	b083      	sub	sp, #12
 8002fba:	af00      	add	r7, sp, #0
 8002fbc:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8002fbe:	bf00      	nop
 8002fc0:	370c      	adds	r7, #12
 8002fc2:	46bd      	mov	sp, r7
 8002fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc8:	4770      	bx	lr

08002fca <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002fca:	b480      	push	{r7}
 8002fcc:	b083      	sub	sp, #12
 8002fce:	af00      	add	r7, sp, #0
 8002fd0:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8002fd2:	bf00      	nop
 8002fd4:	370c      	adds	r7, #12
 8002fd6:	46bd      	mov	sp, r7
 8002fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fdc:	4770      	bx	lr
	...

08002fe0 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002fe0:	b580      	push	{r7, lr}
 8002fe2:	b0b6      	sub	sp, #216	; 0xd8
 8002fe4:	af00      	add	r7, sp, #0
 8002fe6:	6078      	str	r0, [r7, #4]
 8002fe8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002fea:	2300      	movs	r3, #0
 8002fec:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002ff0:	2300      	movs	r3, #0
 8002ff2:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8002ffa:	2b01      	cmp	r3, #1
 8002ffc:	d102      	bne.n	8003004 <HAL_ADC_ConfigChannel+0x24>
 8002ffe:	2302      	movs	r3, #2
 8003000:	f000 bc13 	b.w	800382a <HAL_ADC_ConfigChannel+0x84a>
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	2201      	movs	r2, #1
 8003008:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	4618      	mov	r0, r3
 8003012:	f7ff fc95 	bl	8002940 <LL_ADC_REG_IsConversionOngoing>
 8003016:	4603      	mov	r3, r0
 8003018:	2b00      	cmp	r3, #0
 800301a:	f040 83f3 	bne.w	8003804 <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	6818      	ldr	r0, [r3, #0]
 8003022:	683b      	ldr	r3, [r7, #0]
 8003024:	6859      	ldr	r1, [r3, #4]
 8003026:	683b      	ldr	r3, [r7, #0]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	461a      	mov	r2, r3
 800302c:	f7ff fb37 	bl	800269e <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	4618      	mov	r0, r3
 8003036:	f7ff fc83 	bl	8002940 <LL_ADC_REG_IsConversionOngoing>
 800303a:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	4618      	mov	r0, r3
 8003044:	f7ff fca3 	bl	800298e <LL_ADC_INJ_IsConversionOngoing>
 8003048:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800304c:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8003050:	2b00      	cmp	r3, #0
 8003052:	f040 81d9 	bne.w	8003408 <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003056:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800305a:	2b00      	cmp	r3, #0
 800305c:	f040 81d4 	bne.w	8003408 <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8003060:	683b      	ldr	r3, [r7, #0]
 8003062:	689b      	ldr	r3, [r3, #8]
 8003064:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003068:	d10f      	bne.n	800308a <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	6818      	ldr	r0, [r3, #0]
 800306e:	683b      	ldr	r3, [r7, #0]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	2200      	movs	r2, #0
 8003074:	4619      	mov	r1, r3
 8003076:	f7ff fb3e 	bl	80026f6 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8003082:	4618      	mov	r0, r3
 8003084:	f7ff fae5 	bl	8002652 <LL_ADC_SetSamplingTimeCommonConfig>
 8003088:	e00e      	b.n	80030a8 <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	6818      	ldr	r0, [r3, #0]
 800308e:	683b      	ldr	r3, [r7, #0]
 8003090:	6819      	ldr	r1, [r3, #0]
 8003092:	683b      	ldr	r3, [r7, #0]
 8003094:	689b      	ldr	r3, [r3, #8]
 8003096:	461a      	mov	r2, r3
 8003098:	f7ff fb2d 	bl	80026f6 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	2100      	movs	r1, #0
 80030a2:	4618      	mov	r0, r3
 80030a4:	f7ff fad5 	bl	8002652 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80030a8:	683b      	ldr	r3, [r7, #0]
 80030aa:	695a      	ldr	r2, [r3, #20]
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	68db      	ldr	r3, [r3, #12]
 80030b2:	08db      	lsrs	r3, r3, #3
 80030b4:	f003 0303 	and.w	r3, r3, #3
 80030b8:	005b      	lsls	r3, r3, #1
 80030ba:	fa02 f303 	lsl.w	r3, r2, r3
 80030be:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80030c2:	683b      	ldr	r3, [r7, #0]
 80030c4:	691b      	ldr	r3, [r3, #16]
 80030c6:	2b04      	cmp	r3, #4
 80030c8:	d022      	beq.n	8003110 <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	6818      	ldr	r0, [r3, #0]
 80030ce:	683b      	ldr	r3, [r7, #0]
 80030d0:	6919      	ldr	r1, [r3, #16]
 80030d2:	683b      	ldr	r3, [r7, #0]
 80030d4:	681a      	ldr	r2, [r3, #0]
 80030d6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80030da:	f7ff fa2f 	bl	800253c <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(sConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	6818      	ldr	r0, [r3, #0]
 80030e2:	683b      	ldr	r3, [r7, #0]
 80030e4:	6919      	ldr	r1, [r3, #16]
 80030e6:	683b      	ldr	r3, [r7, #0]
 80030e8:	699b      	ldr	r3, [r3, #24]
 80030ea:	461a      	mov	r2, r3
 80030ec:	f7ff fa7b 	bl	80025e6 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	6818      	ldr	r0, [r3, #0]
 80030f4:	683b      	ldr	r3, [r7, #0]
 80030f6:	6919      	ldr	r1, [r3, #16]
 80030f8:	683b      	ldr	r3, [r7, #0]
 80030fa:	7f1b      	ldrb	r3, [r3, #28]
 80030fc:	2b01      	cmp	r3, #1
 80030fe:	d102      	bne.n	8003106 <HAL_ADC_ConfigChannel+0x126>
 8003100:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003104:	e000      	b.n	8003108 <HAL_ADC_ConfigChannel+0x128>
 8003106:	2300      	movs	r3, #0
 8003108:	461a      	mov	r2, r3
 800310a:	f7ff fa87 	bl	800261c <LL_ADC_SetOffsetSaturation>
 800310e:	e17b      	b.n	8003408 <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	2100      	movs	r1, #0
 8003116:	4618      	mov	r0, r3
 8003118:	f7ff fa34 	bl	8002584 <LL_ADC_GetOffsetChannel>
 800311c:	4603      	mov	r3, r0
 800311e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003122:	2b00      	cmp	r3, #0
 8003124:	d10a      	bne.n	800313c <HAL_ADC_ConfigChannel+0x15c>
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	2100      	movs	r1, #0
 800312c:	4618      	mov	r0, r3
 800312e:	f7ff fa29 	bl	8002584 <LL_ADC_GetOffsetChannel>
 8003132:	4603      	mov	r3, r0
 8003134:	0e9b      	lsrs	r3, r3, #26
 8003136:	f003 021f 	and.w	r2, r3, #31
 800313a:	e01e      	b.n	800317a <HAL_ADC_ConfigChannel+0x19a>
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	2100      	movs	r1, #0
 8003142:	4618      	mov	r0, r3
 8003144:	f7ff fa1e 	bl	8002584 <LL_ADC_GetOffsetChannel>
 8003148:	4603      	mov	r3, r0
 800314a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800314e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8003152:	fa93 f3a3 	rbit	r3, r3
 8003156:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800315a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800315e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8003162:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003166:	2b00      	cmp	r3, #0
 8003168:	d101      	bne.n	800316e <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 800316a:	2320      	movs	r3, #32
 800316c:	e004      	b.n	8003178 <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 800316e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003172:	fab3 f383 	clz	r3, r3
 8003176:	b2db      	uxtb	r3, r3
 8003178:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800317a:	683b      	ldr	r3, [r7, #0]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003182:	2b00      	cmp	r3, #0
 8003184:	d105      	bne.n	8003192 <HAL_ADC_ConfigChannel+0x1b2>
 8003186:	683b      	ldr	r3, [r7, #0]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	0e9b      	lsrs	r3, r3, #26
 800318c:	f003 031f 	and.w	r3, r3, #31
 8003190:	e018      	b.n	80031c4 <HAL_ADC_ConfigChannel+0x1e4>
 8003192:	683b      	ldr	r3, [r7, #0]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800319a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800319e:	fa93 f3a3 	rbit	r3, r3
 80031a2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 80031a6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80031aa:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 80031ae:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d101      	bne.n	80031ba <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 80031b6:	2320      	movs	r3, #32
 80031b8:	e004      	b.n	80031c4 <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 80031ba:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80031be:	fab3 f383 	clz	r3, r3
 80031c2:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80031c4:	429a      	cmp	r2, r3
 80031c6:	d106      	bne.n	80031d6 <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	2200      	movs	r2, #0
 80031ce:	2100      	movs	r1, #0
 80031d0:	4618      	mov	r0, r3
 80031d2:	f7ff f9ed 	bl	80025b0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	2101      	movs	r1, #1
 80031dc:	4618      	mov	r0, r3
 80031de:	f7ff f9d1 	bl	8002584 <LL_ADC_GetOffsetChannel>
 80031e2:	4603      	mov	r3, r0
 80031e4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d10a      	bne.n	8003202 <HAL_ADC_ConfigChannel+0x222>
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	2101      	movs	r1, #1
 80031f2:	4618      	mov	r0, r3
 80031f4:	f7ff f9c6 	bl	8002584 <LL_ADC_GetOffsetChannel>
 80031f8:	4603      	mov	r3, r0
 80031fa:	0e9b      	lsrs	r3, r3, #26
 80031fc:	f003 021f 	and.w	r2, r3, #31
 8003200:	e01e      	b.n	8003240 <HAL_ADC_ConfigChannel+0x260>
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	2101      	movs	r1, #1
 8003208:	4618      	mov	r0, r3
 800320a:	f7ff f9bb 	bl	8002584 <LL_ADC_GetOffsetChannel>
 800320e:	4603      	mov	r3, r0
 8003210:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003214:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8003218:	fa93 f3a3 	rbit	r3, r3
 800321c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8003220:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003224:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8003228:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800322c:	2b00      	cmp	r3, #0
 800322e:	d101      	bne.n	8003234 <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 8003230:	2320      	movs	r3, #32
 8003232:	e004      	b.n	800323e <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 8003234:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8003238:	fab3 f383 	clz	r3, r3
 800323c:	b2db      	uxtb	r3, r3
 800323e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003240:	683b      	ldr	r3, [r7, #0]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003248:	2b00      	cmp	r3, #0
 800324a:	d105      	bne.n	8003258 <HAL_ADC_ConfigChannel+0x278>
 800324c:	683b      	ldr	r3, [r7, #0]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	0e9b      	lsrs	r3, r3, #26
 8003252:	f003 031f 	and.w	r3, r3, #31
 8003256:	e018      	b.n	800328a <HAL_ADC_ConfigChannel+0x2aa>
 8003258:	683b      	ldr	r3, [r7, #0]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003260:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003264:	fa93 f3a3 	rbit	r3, r3
 8003268:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 800326c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8003270:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8003274:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003278:	2b00      	cmp	r3, #0
 800327a:	d101      	bne.n	8003280 <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 800327c:	2320      	movs	r3, #32
 800327e:	e004      	b.n	800328a <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 8003280:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003284:	fab3 f383 	clz	r3, r3
 8003288:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800328a:	429a      	cmp	r2, r3
 800328c:	d106      	bne.n	800329c <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	2200      	movs	r2, #0
 8003294:	2101      	movs	r1, #1
 8003296:	4618      	mov	r0, r3
 8003298:	f7ff f98a 	bl	80025b0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	2102      	movs	r1, #2
 80032a2:	4618      	mov	r0, r3
 80032a4:	f7ff f96e 	bl	8002584 <LL_ADC_GetOffsetChannel>
 80032a8:	4603      	mov	r3, r0
 80032aa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d10a      	bne.n	80032c8 <HAL_ADC_ConfigChannel+0x2e8>
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	2102      	movs	r1, #2
 80032b8:	4618      	mov	r0, r3
 80032ba:	f7ff f963 	bl	8002584 <LL_ADC_GetOffsetChannel>
 80032be:	4603      	mov	r3, r0
 80032c0:	0e9b      	lsrs	r3, r3, #26
 80032c2:	f003 021f 	and.w	r2, r3, #31
 80032c6:	e01e      	b.n	8003306 <HAL_ADC_ConfigChannel+0x326>
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	2102      	movs	r1, #2
 80032ce:	4618      	mov	r0, r3
 80032d0:	f7ff f958 	bl	8002584 <LL_ADC_GetOffsetChannel>
 80032d4:	4603      	mov	r3, r0
 80032d6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032da:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80032de:	fa93 f3a3 	rbit	r3, r3
 80032e2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 80032e6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80032ea:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 80032ee:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d101      	bne.n	80032fa <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 80032f6:	2320      	movs	r3, #32
 80032f8:	e004      	b.n	8003304 <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 80032fa:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80032fe:	fab3 f383 	clz	r3, r3
 8003302:	b2db      	uxtb	r3, r3
 8003304:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003306:	683b      	ldr	r3, [r7, #0]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800330e:	2b00      	cmp	r3, #0
 8003310:	d105      	bne.n	800331e <HAL_ADC_ConfigChannel+0x33e>
 8003312:	683b      	ldr	r3, [r7, #0]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	0e9b      	lsrs	r3, r3, #26
 8003318:	f003 031f 	and.w	r3, r3, #31
 800331c:	e016      	b.n	800334c <HAL_ADC_ConfigChannel+0x36c>
 800331e:	683b      	ldr	r3, [r7, #0]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003326:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800332a:	fa93 f3a3 	rbit	r3, r3
 800332e:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8003330:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003332:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8003336:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800333a:	2b00      	cmp	r3, #0
 800333c:	d101      	bne.n	8003342 <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 800333e:	2320      	movs	r3, #32
 8003340:	e004      	b.n	800334c <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 8003342:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003346:	fab3 f383 	clz	r3, r3
 800334a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800334c:	429a      	cmp	r2, r3
 800334e:	d106      	bne.n	800335e <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	2200      	movs	r2, #0
 8003356:	2102      	movs	r1, #2
 8003358:	4618      	mov	r0, r3
 800335a:	f7ff f929 	bl	80025b0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	2103      	movs	r1, #3
 8003364:	4618      	mov	r0, r3
 8003366:	f7ff f90d 	bl	8002584 <LL_ADC_GetOffsetChannel>
 800336a:	4603      	mov	r3, r0
 800336c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003370:	2b00      	cmp	r3, #0
 8003372:	d10a      	bne.n	800338a <HAL_ADC_ConfigChannel+0x3aa>
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	2103      	movs	r1, #3
 800337a:	4618      	mov	r0, r3
 800337c:	f7ff f902 	bl	8002584 <LL_ADC_GetOffsetChannel>
 8003380:	4603      	mov	r3, r0
 8003382:	0e9b      	lsrs	r3, r3, #26
 8003384:	f003 021f 	and.w	r2, r3, #31
 8003388:	e017      	b.n	80033ba <HAL_ADC_ConfigChannel+0x3da>
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	2103      	movs	r1, #3
 8003390:	4618      	mov	r0, r3
 8003392:	f7ff f8f7 	bl	8002584 <LL_ADC_GetOffsetChannel>
 8003396:	4603      	mov	r3, r0
 8003398:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800339a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800339c:	fa93 f3a3 	rbit	r3, r3
 80033a0:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 80033a2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80033a4:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 80033a6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d101      	bne.n	80033b0 <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 80033ac:	2320      	movs	r3, #32
 80033ae:	e003      	b.n	80033b8 <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 80033b0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80033b2:	fab3 f383 	clz	r3, r3
 80033b6:	b2db      	uxtb	r3, r3
 80033b8:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80033ba:	683b      	ldr	r3, [r7, #0]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d105      	bne.n	80033d2 <HAL_ADC_ConfigChannel+0x3f2>
 80033c6:	683b      	ldr	r3, [r7, #0]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	0e9b      	lsrs	r3, r3, #26
 80033cc:	f003 031f 	and.w	r3, r3, #31
 80033d0:	e011      	b.n	80033f6 <HAL_ADC_ConfigChannel+0x416>
 80033d2:	683b      	ldr	r3, [r7, #0]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033d8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80033da:	fa93 f3a3 	rbit	r3, r3
 80033de:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 80033e0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80033e2:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 80033e4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d101      	bne.n	80033ee <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 80033ea:	2320      	movs	r3, #32
 80033ec:	e003      	b.n	80033f6 <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 80033ee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80033f0:	fab3 f383 	clz	r3, r3
 80033f4:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80033f6:	429a      	cmp	r2, r3
 80033f8:	d106      	bne.n	8003408 <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	2200      	movs	r2, #0
 8003400:	2103      	movs	r1, #3
 8003402:	4618      	mov	r0, r3
 8003404:	f7ff f8d4 	bl	80025b0 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	4618      	mov	r0, r3
 800340e:	f7ff fa49 	bl	80028a4 <LL_ADC_IsEnabled>
 8003412:	4603      	mov	r3, r0
 8003414:	2b00      	cmp	r3, #0
 8003416:	f040 813d 	bne.w	8003694 <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	6818      	ldr	r0, [r3, #0]
 800341e:	683b      	ldr	r3, [r7, #0]
 8003420:	6819      	ldr	r1, [r3, #0]
 8003422:	683b      	ldr	r3, [r7, #0]
 8003424:	68db      	ldr	r3, [r3, #12]
 8003426:	461a      	mov	r2, r3
 8003428:	f7ff f990 	bl	800274c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800342c:	683b      	ldr	r3, [r7, #0]
 800342e:	68db      	ldr	r3, [r3, #12]
 8003430:	4aa2      	ldr	r2, [pc, #648]	; (80036bc <HAL_ADC_ConfigChannel+0x6dc>)
 8003432:	4293      	cmp	r3, r2
 8003434:	f040 812e 	bne.w	8003694 <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800343c:	683b      	ldr	r3, [r7, #0]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003444:	2b00      	cmp	r3, #0
 8003446:	d10b      	bne.n	8003460 <HAL_ADC_ConfigChannel+0x480>
 8003448:	683b      	ldr	r3, [r7, #0]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	0e9b      	lsrs	r3, r3, #26
 800344e:	3301      	adds	r3, #1
 8003450:	f003 031f 	and.w	r3, r3, #31
 8003454:	2b09      	cmp	r3, #9
 8003456:	bf94      	ite	ls
 8003458:	2301      	movls	r3, #1
 800345a:	2300      	movhi	r3, #0
 800345c:	b2db      	uxtb	r3, r3
 800345e:	e019      	b.n	8003494 <HAL_ADC_ConfigChannel+0x4b4>
 8003460:	683b      	ldr	r3, [r7, #0]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003466:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003468:	fa93 f3a3 	rbit	r3, r3
 800346c:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 800346e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003470:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8003472:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003474:	2b00      	cmp	r3, #0
 8003476:	d101      	bne.n	800347c <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 8003478:	2320      	movs	r3, #32
 800347a:	e003      	b.n	8003484 <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 800347c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800347e:	fab3 f383 	clz	r3, r3
 8003482:	b2db      	uxtb	r3, r3
 8003484:	3301      	adds	r3, #1
 8003486:	f003 031f 	and.w	r3, r3, #31
 800348a:	2b09      	cmp	r3, #9
 800348c:	bf94      	ite	ls
 800348e:	2301      	movls	r3, #1
 8003490:	2300      	movhi	r3, #0
 8003492:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003494:	2b00      	cmp	r3, #0
 8003496:	d079      	beq.n	800358c <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003498:	683b      	ldr	r3, [r7, #0]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d107      	bne.n	80034b4 <HAL_ADC_ConfigChannel+0x4d4>
 80034a4:	683b      	ldr	r3, [r7, #0]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	0e9b      	lsrs	r3, r3, #26
 80034aa:	3301      	adds	r3, #1
 80034ac:	069b      	lsls	r3, r3, #26
 80034ae:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80034b2:	e015      	b.n	80034e0 <HAL_ADC_ConfigChannel+0x500>
 80034b4:	683b      	ldr	r3, [r7, #0]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034ba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80034bc:	fa93 f3a3 	rbit	r3, r3
 80034c0:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80034c2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80034c4:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 80034c6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d101      	bne.n	80034d0 <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 80034cc:	2320      	movs	r3, #32
 80034ce:	e003      	b.n	80034d8 <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 80034d0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80034d2:	fab3 f383 	clz	r3, r3
 80034d6:	b2db      	uxtb	r3, r3
 80034d8:	3301      	adds	r3, #1
 80034da:	069b      	lsls	r3, r3, #26
 80034dc:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80034e0:	683b      	ldr	r3, [r7, #0]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d109      	bne.n	8003500 <HAL_ADC_ConfigChannel+0x520>
 80034ec:	683b      	ldr	r3, [r7, #0]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	0e9b      	lsrs	r3, r3, #26
 80034f2:	3301      	adds	r3, #1
 80034f4:	f003 031f 	and.w	r3, r3, #31
 80034f8:	2101      	movs	r1, #1
 80034fa:	fa01 f303 	lsl.w	r3, r1, r3
 80034fe:	e017      	b.n	8003530 <HAL_ADC_ConfigChannel+0x550>
 8003500:	683b      	ldr	r3, [r7, #0]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003506:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003508:	fa93 f3a3 	rbit	r3, r3
 800350c:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 800350e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003510:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8003512:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003514:	2b00      	cmp	r3, #0
 8003516:	d101      	bne.n	800351c <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 8003518:	2320      	movs	r3, #32
 800351a:	e003      	b.n	8003524 <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 800351c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800351e:	fab3 f383 	clz	r3, r3
 8003522:	b2db      	uxtb	r3, r3
 8003524:	3301      	adds	r3, #1
 8003526:	f003 031f 	and.w	r3, r3, #31
 800352a:	2101      	movs	r1, #1
 800352c:	fa01 f303 	lsl.w	r3, r1, r3
 8003530:	ea42 0103 	orr.w	r1, r2, r3
 8003534:	683b      	ldr	r3, [r7, #0]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800353c:	2b00      	cmp	r3, #0
 800353e:	d10a      	bne.n	8003556 <HAL_ADC_ConfigChannel+0x576>
 8003540:	683b      	ldr	r3, [r7, #0]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	0e9b      	lsrs	r3, r3, #26
 8003546:	3301      	adds	r3, #1
 8003548:	f003 021f 	and.w	r2, r3, #31
 800354c:	4613      	mov	r3, r2
 800354e:	005b      	lsls	r3, r3, #1
 8003550:	4413      	add	r3, r2
 8003552:	051b      	lsls	r3, r3, #20
 8003554:	e018      	b.n	8003588 <HAL_ADC_ConfigChannel+0x5a8>
 8003556:	683b      	ldr	r3, [r7, #0]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800355c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800355e:	fa93 f3a3 	rbit	r3, r3
 8003562:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8003564:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003566:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8003568:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800356a:	2b00      	cmp	r3, #0
 800356c:	d101      	bne.n	8003572 <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 800356e:	2320      	movs	r3, #32
 8003570:	e003      	b.n	800357a <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 8003572:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003574:	fab3 f383 	clz	r3, r3
 8003578:	b2db      	uxtb	r3, r3
 800357a:	3301      	adds	r3, #1
 800357c:	f003 021f 	and.w	r2, r3, #31
 8003580:	4613      	mov	r3, r2
 8003582:	005b      	lsls	r3, r3, #1
 8003584:	4413      	add	r3, r2
 8003586:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003588:	430b      	orrs	r3, r1
 800358a:	e07e      	b.n	800368a <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800358c:	683b      	ldr	r3, [r7, #0]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003594:	2b00      	cmp	r3, #0
 8003596:	d107      	bne.n	80035a8 <HAL_ADC_ConfigChannel+0x5c8>
 8003598:	683b      	ldr	r3, [r7, #0]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	0e9b      	lsrs	r3, r3, #26
 800359e:	3301      	adds	r3, #1
 80035a0:	069b      	lsls	r3, r3, #26
 80035a2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80035a6:	e015      	b.n	80035d4 <HAL_ADC_ConfigChannel+0x5f4>
 80035a8:	683b      	ldr	r3, [r7, #0]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035b0:	fa93 f3a3 	rbit	r3, r3
 80035b4:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 80035b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035b8:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 80035ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d101      	bne.n	80035c4 <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 80035c0:	2320      	movs	r3, #32
 80035c2:	e003      	b.n	80035cc <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 80035c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035c6:	fab3 f383 	clz	r3, r3
 80035ca:	b2db      	uxtb	r3, r3
 80035cc:	3301      	adds	r3, #1
 80035ce:	069b      	lsls	r3, r3, #26
 80035d0:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80035d4:	683b      	ldr	r3, [r7, #0]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d109      	bne.n	80035f4 <HAL_ADC_ConfigChannel+0x614>
 80035e0:	683b      	ldr	r3, [r7, #0]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	0e9b      	lsrs	r3, r3, #26
 80035e6:	3301      	adds	r3, #1
 80035e8:	f003 031f 	and.w	r3, r3, #31
 80035ec:	2101      	movs	r1, #1
 80035ee:	fa01 f303 	lsl.w	r3, r1, r3
 80035f2:	e017      	b.n	8003624 <HAL_ADC_ConfigChannel+0x644>
 80035f4:	683b      	ldr	r3, [r7, #0]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035fa:	6a3b      	ldr	r3, [r7, #32]
 80035fc:	fa93 f3a3 	rbit	r3, r3
 8003600:	61fb      	str	r3, [r7, #28]
  return result;
 8003602:	69fb      	ldr	r3, [r7, #28]
 8003604:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8003606:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003608:	2b00      	cmp	r3, #0
 800360a:	d101      	bne.n	8003610 <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 800360c:	2320      	movs	r3, #32
 800360e:	e003      	b.n	8003618 <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 8003610:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003612:	fab3 f383 	clz	r3, r3
 8003616:	b2db      	uxtb	r3, r3
 8003618:	3301      	adds	r3, #1
 800361a:	f003 031f 	and.w	r3, r3, #31
 800361e:	2101      	movs	r1, #1
 8003620:	fa01 f303 	lsl.w	r3, r1, r3
 8003624:	ea42 0103 	orr.w	r1, r2, r3
 8003628:	683b      	ldr	r3, [r7, #0]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003630:	2b00      	cmp	r3, #0
 8003632:	d10d      	bne.n	8003650 <HAL_ADC_ConfigChannel+0x670>
 8003634:	683b      	ldr	r3, [r7, #0]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	0e9b      	lsrs	r3, r3, #26
 800363a:	3301      	adds	r3, #1
 800363c:	f003 021f 	and.w	r2, r3, #31
 8003640:	4613      	mov	r3, r2
 8003642:	005b      	lsls	r3, r3, #1
 8003644:	4413      	add	r3, r2
 8003646:	3b1e      	subs	r3, #30
 8003648:	051b      	lsls	r3, r3, #20
 800364a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800364e:	e01b      	b.n	8003688 <HAL_ADC_ConfigChannel+0x6a8>
 8003650:	683b      	ldr	r3, [r7, #0]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003656:	697b      	ldr	r3, [r7, #20]
 8003658:	fa93 f3a3 	rbit	r3, r3
 800365c:	613b      	str	r3, [r7, #16]
  return result;
 800365e:	693b      	ldr	r3, [r7, #16]
 8003660:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8003662:	69bb      	ldr	r3, [r7, #24]
 8003664:	2b00      	cmp	r3, #0
 8003666:	d101      	bne.n	800366c <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 8003668:	2320      	movs	r3, #32
 800366a:	e003      	b.n	8003674 <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 800366c:	69bb      	ldr	r3, [r7, #24]
 800366e:	fab3 f383 	clz	r3, r3
 8003672:	b2db      	uxtb	r3, r3
 8003674:	3301      	adds	r3, #1
 8003676:	f003 021f 	and.w	r2, r3, #31
 800367a:	4613      	mov	r3, r2
 800367c:	005b      	lsls	r3, r3, #1
 800367e:	4413      	add	r3, r2
 8003680:	3b1e      	subs	r3, #30
 8003682:	051b      	lsls	r3, r3, #20
 8003684:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003688:	430b      	orrs	r3, r1
 800368a:	683a      	ldr	r2, [r7, #0]
 800368c:	6892      	ldr	r2, [r2, #8]
 800368e:	4619      	mov	r1, r3
 8003690:	f7ff f831 	bl	80026f6 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8003694:	683b      	ldr	r3, [r7, #0]
 8003696:	681a      	ldr	r2, [r3, #0]
 8003698:	4b09      	ldr	r3, [pc, #36]	; (80036c0 <HAL_ADC_ConfigChannel+0x6e0>)
 800369a:	4013      	ands	r3, r2
 800369c:	2b00      	cmp	r3, #0
 800369e:	f000 80be 	beq.w	800381e <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80036aa:	d004      	beq.n	80036b6 <HAL_ADC_ConfigChannel+0x6d6>
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	4a04      	ldr	r2, [pc, #16]	; (80036c4 <HAL_ADC_ConfigChannel+0x6e4>)
 80036b2:	4293      	cmp	r3, r2
 80036b4:	d10a      	bne.n	80036cc <HAL_ADC_ConfigChannel+0x6ec>
 80036b6:	4b04      	ldr	r3, [pc, #16]	; (80036c8 <HAL_ADC_ConfigChannel+0x6e8>)
 80036b8:	e009      	b.n	80036ce <HAL_ADC_ConfigChannel+0x6ee>
 80036ba:	bf00      	nop
 80036bc:	407f0000 	.word	0x407f0000
 80036c0:	80080000 	.word	0x80080000
 80036c4:	50000100 	.word	0x50000100
 80036c8:	50000300 	.word	0x50000300
 80036cc:	4b59      	ldr	r3, [pc, #356]	; (8003834 <HAL_ADC_ConfigChannel+0x854>)
 80036ce:	4618      	mov	r0, r3
 80036d0:	f7fe ff26 	bl	8002520 <LL_ADC_GetCommonPathInternalCh>
 80036d4:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 80036d8:	683b      	ldr	r3, [r7, #0]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	4a56      	ldr	r2, [pc, #344]	; (8003838 <HAL_ADC_ConfigChannel+0x858>)
 80036de:	4293      	cmp	r3, r2
 80036e0:	d004      	beq.n	80036ec <HAL_ADC_ConfigChannel+0x70c>
 80036e2:	683b      	ldr	r3, [r7, #0]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	4a55      	ldr	r2, [pc, #340]	; (800383c <HAL_ADC_ConfigChannel+0x85c>)
 80036e8:	4293      	cmp	r3, r2
 80036ea:	d13a      	bne.n	8003762 <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80036ec:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80036f0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d134      	bne.n	8003762 <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003700:	d005      	beq.n	800370e <HAL_ADC_ConfigChannel+0x72e>
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	4a4e      	ldr	r2, [pc, #312]	; (8003840 <HAL_ADC_ConfigChannel+0x860>)
 8003708:	4293      	cmp	r3, r2
 800370a:	f040 8085 	bne.w	8003818 <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003716:	d004      	beq.n	8003722 <HAL_ADC_ConfigChannel+0x742>
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	4a49      	ldr	r2, [pc, #292]	; (8003844 <HAL_ADC_ConfigChannel+0x864>)
 800371e:	4293      	cmp	r3, r2
 8003720:	d101      	bne.n	8003726 <HAL_ADC_ConfigChannel+0x746>
 8003722:	4a49      	ldr	r2, [pc, #292]	; (8003848 <HAL_ADC_ConfigChannel+0x868>)
 8003724:	e000      	b.n	8003728 <HAL_ADC_ConfigChannel+0x748>
 8003726:	4a43      	ldr	r2, [pc, #268]	; (8003834 <HAL_ADC_ConfigChannel+0x854>)
 8003728:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800372c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003730:	4619      	mov	r1, r3
 8003732:	4610      	mov	r0, r2
 8003734:	f7fe fee1 	bl	80024fa <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003738:	4b44      	ldr	r3, [pc, #272]	; (800384c <HAL_ADC_ConfigChannel+0x86c>)
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	099b      	lsrs	r3, r3, #6
 800373e:	4a44      	ldr	r2, [pc, #272]	; (8003850 <HAL_ADC_ConfigChannel+0x870>)
 8003740:	fba2 2303 	umull	r2, r3, r2, r3
 8003744:	099b      	lsrs	r3, r3, #6
 8003746:	1c5a      	adds	r2, r3, #1
 8003748:	4613      	mov	r3, r2
 800374a:	005b      	lsls	r3, r3, #1
 800374c:	4413      	add	r3, r2
 800374e:	009b      	lsls	r3, r3, #2
 8003750:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8003752:	e002      	b.n	800375a <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	3b01      	subs	r3, #1
 8003758:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	2b00      	cmp	r3, #0
 800375e:	d1f9      	bne.n	8003754 <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003760:	e05a      	b.n	8003818 <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003762:	683b      	ldr	r3, [r7, #0]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	4a3b      	ldr	r2, [pc, #236]	; (8003854 <HAL_ADC_ConfigChannel+0x874>)
 8003768:	4293      	cmp	r3, r2
 800376a:	d125      	bne.n	80037b8 <HAL_ADC_ConfigChannel+0x7d8>
 800376c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003770:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003774:	2b00      	cmp	r3, #0
 8003776:	d11f      	bne.n	80037b8 <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	4a31      	ldr	r2, [pc, #196]	; (8003844 <HAL_ADC_ConfigChannel+0x864>)
 800377e:	4293      	cmp	r3, r2
 8003780:	d104      	bne.n	800378c <HAL_ADC_ConfigChannel+0x7ac>
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	4a34      	ldr	r2, [pc, #208]	; (8003858 <HAL_ADC_ConfigChannel+0x878>)
 8003788:	4293      	cmp	r3, r2
 800378a:	d047      	beq.n	800381c <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003794:	d004      	beq.n	80037a0 <HAL_ADC_ConfigChannel+0x7c0>
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	4a2a      	ldr	r2, [pc, #168]	; (8003844 <HAL_ADC_ConfigChannel+0x864>)
 800379c:	4293      	cmp	r3, r2
 800379e:	d101      	bne.n	80037a4 <HAL_ADC_ConfigChannel+0x7c4>
 80037a0:	4a29      	ldr	r2, [pc, #164]	; (8003848 <HAL_ADC_ConfigChannel+0x868>)
 80037a2:	e000      	b.n	80037a6 <HAL_ADC_ConfigChannel+0x7c6>
 80037a4:	4a23      	ldr	r2, [pc, #140]	; (8003834 <HAL_ADC_ConfigChannel+0x854>)
 80037a6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80037aa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80037ae:	4619      	mov	r1, r3
 80037b0:	4610      	mov	r0, r2
 80037b2:	f7fe fea2 	bl	80024fa <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80037b6:	e031      	b.n	800381c <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 80037b8:	683b      	ldr	r3, [r7, #0]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	4a27      	ldr	r2, [pc, #156]	; (800385c <HAL_ADC_ConfigChannel+0x87c>)
 80037be:	4293      	cmp	r3, r2
 80037c0:	d12d      	bne.n	800381e <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80037c2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80037c6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d127      	bne.n	800381e <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	4a1c      	ldr	r2, [pc, #112]	; (8003844 <HAL_ADC_ConfigChannel+0x864>)
 80037d4:	4293      	cmp	r3, r2
 80037d6:	d022      	beq.n	800381e <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80037e0:	d004      	beq.n	80037ec <HAL_ADC_ConfigChannel+0x80c>
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	4a17      	ldr	r2, [pc, #92]	; (8003844 <HAL_ADC_ConfigChannel+0x864>)
 80037e8:	4293      	cmp	r3, r2
 80037ea:	d101      	bne.n	80037f0 <HAL_ADC_ConfigChannel+0x810>
 80037ec:	4a16      	ldr	r2, [pc, #88]	; (8003848 <HAL_ADC_ConfigChannel+0x868>)
 80037ee:	e000      	b.n	80037f2 <HAL_ADC_ConfigChannel+0x812>
 80037f0:	4a10      	ldr	r2, [pc, #64]	; (8003834 <HAL_ADC_ConfigChannel+0x854>)
 80037f2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80037f6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80037fa:	4619      	mov	r1, r3
 80037fc:	4610      	mov	r0, r2
 80037fe:	f7fe fe7c 	bl	80024fa <LL_ADC_SetCommonPathInternalCh>
 8003802:	e00c      	b.n	800381e <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003808:	f043 0220 	orr.w	r2, r3, #32
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8003810:	2301      	movs	r3, #1
 8003812:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 8003816:	e002      	b.n	800381e <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003818:	bf00      	nop
 800381a:	e000      	b.n	800381e <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800381c:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	2200      	movs	r2, #0
 8003822:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8003826:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 800382a:	4618      	mov	r0, r3
 800382c:	37d8      	adds	r7, #216	; 0xd8
 800382e:	46bd      	mov	sp, r7
 8003830:	bd80      	pop	{r7, pc}
 8003832:	bf00      	nop
 8003834:	50000700 	.word	0x50000700
 8003838:	c3210000 	.word	0xc3210000
 800383c:	90c00010 	.word	0x90c00010
 8003840:	50000600 	.word	0x50000600
 8003844:	50000100 	.word	0x50000100
 8003848:	50000300 	.word	0x50000300
 800384c:	20000000 	.word	0x20000000
 8003850:	053e2d63 	.word	0x053e2d63
 8003854:	c7520000 	.word	0xc7520000
 8003858:	50000500 	.word	0x50000500
 800385c:	cb840000 	.word	0xcb840000

08003860 <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 8003860:	b580      	push	{r7, lr}
 8003862:	b088      	sub	sp, #32
 8003864:	af00      	add	r7, sp, #0
 8003866:	6078      	str	r0, [r7, #4]
 8003868:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 800386a:	2300      	movs	r3, #0
 800386c:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 800386e:	683b      	ldr	r3, [r7, #0]
 8003870:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	4618      	mov	r0, r3
 8003878:	f7ff f862 	bl	8002940 <LL_ADC_REG_IsConversionOngoing>
 800387c:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	4618      	mov	r0, r3
 8003884:	f7ff f883 	bl	800298e <LL_ADC_INJ_IsConversionOngoing>
 8003888:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 800388a:	693b      	ldr	r3, [r7, #16]
 800388c:	2b00      	cmp	r3, #0
 800388e:	d103      	bne.n	8003898 <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	2b00      	cmp	r3, #0
 8003894:	f000 8098 	beq.w	80039c8 <ADC_ConversionStop+0x168>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	68db      	ldr	r3, [r3, #12]
 800389e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d02a      	beq.n	80038fc <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	7f5b      	ldrb	r3, [r3, #29]
 80038aa:	2b01      	cmp	r3, #1
 80038ac:	d126      	bne.n	80038fc <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	7f1b      	ldrb	r3, [r3, #28]
 80038b2:	2b01      	cmp	r3, #1
 80038b4:	d122      	bne.n	80038fc <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 80038b6:	2301      	movs	r3, #1
 80038b8:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 80038ba:	e014      	b.n	80038e6 <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 80038bc:	69fb      	ldr	r3, [r7, #28]
 80038be:	4a45      	ldr	r2, [pc, #276]	; (80039d4 <ADC_ConversionStop+0x174>)
 80038c0:	4293      	cmp	r3, r2
 80038c2:	d90d      	bls.n	80038e0 <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80038c8:	f043 0210 	orr.w	r2, r3, #16
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80038d4:	f043 0201 	orr.w	r2, r3, #1
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 80038dc:	2301      	movs	r3, #1
 80038de:	e074      	b.n	80039ca <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
 80038e0:	69fb      	ldr	r3, [r7, #28]
 80038e2:	3301      	adds	r3, #1
 80038e4:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038f0:	2b40      	cmp	r3, #64	; 0x40
 80038f2:	d1e3      	bne.n	80038bc <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	2240      	movs	r2, #64	; 0x40
 80038fa:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 80038fc:	69bb      	ldr	r3, [r7, #24]
 80038fe:	2b02      	cmp	r3, #2
 8003900:	d014      	beq.n	800392c <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	4618      	mov	r0, r3
 8003908:	f7ff f81a 	bl	8002940 <LL_ADC_REG_IsConversionOngoing>
 800390c:	4603      	mov	r3, r0
 800390e:	2b00      	cmp	r3, #0
 8003910:	d00c      	beq.n	800392c <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	4618      	mov	r0, r3
 8003918:	f7fe ffd7 	bl	80028ca <LL_ADC_IsDisableOngoing>
 800391c:	4603      	mov	r3, r0
 800391e:	2b00      	cmp	r3, #0
 8003920:	d104      	bne.n	800392c <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	4618      	mov	r0, r3
 8003928:	f7fe fff6 	bl	8002918 <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 800392c:	69bb      	ldr	r3, [r7, #24]
 800392e:	2b01      	cmp	r3, #1
 8003930:	d014      	beq.n	800395c <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	4618      	mov	r0, r3
 8003938:	f7ff f829 	bl	800298e <LL_ADC_INJ_IsConversionOngoing>
 800393c:	4603      	mov	r3, r0
 800393e:	2b00      	cmp	r3, #0
 8003940:	d00c      	beq.n	800395c <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	4618      	mov	r0, r3
 8003948:	f7fe ffbf 	bl	80028ca <LL_ADC_IsDisableOngoing>
 800394c:	4603      	mov	r3, r0
 800394e:	2b00      	cmp	r3, #0
 8003950:	d104      	bne.n	800395c <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	4618      	mov	r0, r3
 8003958:	f7ff f805 	bl	8002966 <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 800395c:	69bb      	ldr	r3, [r7, #24]
 800395e:	2b02      	cmp	r3, #2
 8003960:	d005      	beq.n	800396e <ADC_ConversionStop+0x10e>
 8003962:	69bb      	ldr	r3, [r7, #24]
 8003964:	2b03      	cmp	r3, #3
 8003966:	d105      	bne.n	8003974 <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 8003968:	230c      	movs	r3, #12
 800396a:	617b      	str	r3, [r7, #20]
        break;
 800396c:	e005      	b.n	800397a <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 800396e:	2308      	movs	r3, #8
 8003970:	617b      	str	r3, [r7, #20]
        break;
 8003972:	e002      	b.n	800397a <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 8003974:	2304      	movs	r3, #4
 8003976:	617b      	str	r3, [r7, #20]
        break;
 8003978:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 800397a:	f7fe fd7d 	bl	8002478 <HAL_GetTick>
 800397e:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8003980:	e01b      	b.n	80039ba <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8003982:	f7fe fd79 	bl	8002478 <HAL_GetTick>
 8003986:	4602      	mov	r2, r0
 8003988:	68bb      	ldr	r3, [r7, #8]
 800398a:	1ad3      	subs	r3, r2, r3
 800398c:	2b05      	cmp	r3, #5
 800398e:	d914      	bls.n	80039ba <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	689a      	ldr	r2, [r3, #8]
 8003996:	697b      	ldr	r3, [r7, #20]
 8003998:	4013      	ands	r3, r2
 800399a:	2b00      	cmp	r3, #0
 800399c:	d00d      	beq.n	80039ba <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80039a2:	f043 0210 	orr.w	r2, r3, #16
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80039ae:	f043 0201 	orr.w	r2, r3, #1
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 80039b6:	2301      	movs	r3, #1
 80039b8:	e007      	b.n	80039ca <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	689a      	ldr	r2, [r3, #8]
 80039c0:	697b      	ldr	r3, [r7, #20]
 80039c2:	4013      	ands	r3, r2
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d1dc      	bne.n	8003982 <ADC_ConversionStop+0x122>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 80039c8:	2300      	movs	r3, #0
}
 80039ca:	4618      	mov	r0, r3
 80039cc:	3720      	adds	r7, #32
 80039ce:	46bd      	mov	sp, r7
 80039d0:	bd80      	pop	{r7, pc}
 80039d2:	bf00      	nop
 80039d4:	a33fffff 	.word	0xa33fffff

080039d8 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80039d8:	b580      	push	{r7, lr}
 80039da:	b084      	sub	sp, #16
 80039dc:	af00      	add	r7, sp, #0
 80039de:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	4618      	mov	r0, r3
 80039e6:	f7fe ff5d 	bl	80028a4 <LL_ADC_IsEnabled>
 80039ea:	4603      	mov	r3, r0
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d14d      	bne.n	8003a8c <ADC_Enable+0xb4>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	689a      	ldr	r2, [r3, #8]
 80039f6:	4b28      	ldr	r3, [pc, #160]	; (8003a98 <ADC_Enable+0xc0>)
 80039f8:	4013      	ands	r3, r2
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d00d      	beq.n	8003a1a <ADC_Enable+0x42>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a02:	f043 0210 	orr.w	r2, r3, #16
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003a0e:	f043 0201 	orr.w	r2, r3, #1
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	661a      	str	r2, [r3, #96]	; 0x60

      return HAL_ERROR;
 8003a16:	2301      	movs	r3, #1
 8003a18:	e039      	b.n	8003a8e <ADC_Enable+0xb6>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	4618      	mov	r0, r3
 8003a20:	f7fe ff18 	bl	8002854 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8003a24:	f7fe fd28 	bl	8002478 <HAL_GetTick>
 8003a28:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003a2a:	e028      	b.n	8003a7e <ADC_Enable+0xa6>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	4618      	mov	r0, r3
 8003a32:	f7fe ff37 	bl	80028a4 <LL_ADC_IsEnabled>
 8003a36:	4603      	mov	r3, r0
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d104      	bne.n	8003a46 <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	4618      	mov	r0, r3
 8003a42:	f7fe ff07 	bl	8002854 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003a46:	f7fe fd17 	bl	8002478 <HAL_GetTick>
 8003a4a:	4602      	mov	r2, r0
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	1ad3      	subs	r3, r2, r3
 8003a50:	2b02      	cmp	r3, #2
 8003a52:	d914      	bls.n	8003a7e <ADC_Enable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	f003 0301 	and.w	r3, r3, #1
 8003a5e:	2b01      	cmp	r3, #1
 8003a60:	d00d      	beq.n	8003a7e <ADC_Enable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a66:	f043 0210 	orr.w	r2, r3, #16
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003a72:	f043 0201 	orr.w	r2, r3, #1
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 8003a7a:	2301      	movs	r3, #1
 8003a7c:	e007      	b.n	8003a8e <ADC_Enable+0xb6>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	f003 0301 	and.w	r3, r3, #1
 8003a88:	2b01      	cmp	r3, #1
 8003a8a:	d1cf      	bne.n	8003a2c <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003a8c:	2300      	movs	r3, #0
}
 8003a8e:	4618      	mov	r0, r3
 8003a90:	3710      	adds	r7, #16
 8003a92:	46bd      	mov	sp, r7
 8003a94:	bd80      	pop	{r7, pc}
 8003a96:	bf00      	nop
 8003a98:	8000003f 	.word	0x8000003f

08003a9c <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8003a9c:	b580      	push	{r7, lr}
 8003a9e:	b084      	sub	sp, #16
 8003aa0:	af00      	add	r7, sp, #0
 8003aa2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	4618      	mov	r0, r3
 8003aaa:	f7fe ff0e 	bl	80028ca <LL_ADC_IsDisableOngoing>
 8003aae:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	4618      	mov	r0, r3
 8003ab6:	f7fe fef5 	bl	80028a4 <LL_ADC_IsEnabled>
 8003aba:	4603      	mov	r3, r0
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d047      	beq.n	8003b50 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d144      	bne.n	8003b50 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	689b      	ldr	r3, [r3, #8]
 8003acc:	f003 030d 	and.w	r3, r3, #13
 8003ad0:	2b01      	cmp	r3, #1
 8003ad2:	d10c      	bne.n	8003aee <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	4618      	mov	r0, r3
 8003ada:	f7fe fecf 	bl	800287c <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	2203      	movs	r2, #3
 8003ae4:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003ae6:	f7fe fcc7 	bl	8002478 <HAL_GetTick>
 8003aea:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003aec:	e029      	b.n	8003b42 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003af2:	f043 0210 	orr.w	r2, r3, #16
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	65da      	str	r2, [r3, #92]	; 0x5c
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003afe:	f043 0201 	orr.w	r2, r3, #1
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_ERROR;
 8003b06:	2301      	movs	r3, #1
 8003b08:	e023      	b.n	8003b52 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8003b0a:	f7fe fcb5 	bl	8002478 <HAL_GetTick>
 8003b0e:	4602      	mov	r2, r0
 8003b10:	68bb      	ldr	r3, [r7, #8]
 8003b12:	1ad3      	subs	r3, r2, r3
 8003b14:	2b02      	cmp	r3, #2
 8003b16:	d914      	bls.n	8003b42 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	689b      	ldr	r3, [r3, #8]
 8003b1e:	f003 0301 	and.w	r3, r3, #1
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d00d      	beq.n	8003b42 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b2a:	f043 0210 	orr.w	r2, r3, #16
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003b36:	f043 0201 	orr.w	r2, r3, #1
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 8003b3e:	2301      	movs	r3, #1
 8003b40:	e007      	b.n	8003b52 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	689b      	ldr	r3, [r3, #8]
 8003b48:	f003 0301 	and.w	r3, r3, #1
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d1dc      	bne.n	8003b0a <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003b50:	2300      	movs	r3, #0
}
 8003b52:	4618      	mov	r0, r3
 8003b54:	3710      	adds	r7, #16
 8003b56:	46bd      	mov	sp, r7
 8003b58:	bd80      	pop	{r7, pc}

08003b5a <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8003b5a:	b580      	push	{r7, lr}
 8003b5c:	b084      	sub	sp, #16
 8003b5e:	af00      	add	r7, sp, #0
 8003b60:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b66:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b6c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d14b      	bne.n	8003c0c <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b78:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	f003 0308 	and.w	r3, r3, #8
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d021      	beq.n	8003bd2 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	4618      	mov	r0, r3
 8003b94:	f7fe fd70 	bl	8002678 <LL_ADC_REG_IsTriggerSourceSWStart>
 8003b98:	4603      	mov	r3, r0
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d032      	beq.n	8003c04 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	68db      	ldr	r3, [r3, #12]
 8003ba4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d12b      	bne.n	8003c04 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003bb0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	65da      	str	r2, [r3, #92]	; 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003bbc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d11f      	bne.n	8003c04 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003bc8:	f043 0201 	orr.w	r2, r3, #1
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	65da      	str	r2, [r3, #92]	; 0x5c
 8003bd0:	e018      	b.n	8003c04 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	68db      	ldr	r3, [r3, #12]
 8003bd8:	f003 0302 	and.w	r3, r3, #2
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d111      	bne.n	8003c04 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003be4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	65da      	str	r2, [r3, #92]	; 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003bf0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d105      	bne.n	8003c04 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003bfc:	f043 0201 	orr.w	r2, r3, #1
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003c04:	68f8      	ldr	r0, [r7, #12]
 8003c06:	f7ff f9cc 	bl	8002fa2 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8003c0a:	e00e      	b.n	8003c2a <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c10:	f003 0310 	and.w	r3, r3, #16
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d003      	beq.n	8003c20 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8003c18:	68f8      	ldr	r0, [r7, #12]
 8003c1a:	f7ff f9d6 	bl	8002fca <HAL_ADC_ErrorCallback>
}
 8003c1e:	e004      	b.n	8003c2a <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c24:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c26:	6878      	ldr	r0, [r7, #4]
 8003c28:	4798      	blx	r3
}
 8003c2a:	bf00      	nop
 8003c2c:	3710      	adds	r7, #16
 8003c2e:	46bd      	mov	sp, r7
 8003c30:	bd80      	pop	{r7, pc}

08003c32 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8003c32:	b580      	push	{r7, lr}
 8003c34:	b084      	sub	sp, #16
 8003c36:	af00      	add	r7, sp, #0
 8003c38:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c3e:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8003c40:	68f8      	ldr	r0, [r7, #12]
 8003c42:	f7ff f9b8 	bl	8002fb6 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003c46:	bf00      	nop
 8003c48:	3710      	adds	r7, #16
 8003c4a:	46bd      	mov	sp, r7
 8003c4c:	bd80      	pop	{r7, pc}

08003c4e <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8003c4e:	b580      	push	{r7, lr}
 8003c50:	b084      	sub	sp, #16
 8003c52:	af00      	add	r7, sp, #0
 8003c54:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c5a:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c60:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003c6c:	f043 0204 	orr.w	r2, r3, #4
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	661a      	str	r2, [r3, #96]	; 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8003c74:	68f8      	ldr	r0, [r7, #12]
 8003c76:	f7ff f9a8 	bl	8002fca <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003c7a:	bf00      	nop
 8003c7c:	3710      	adds	r7, #16
 8003c7e:	46bd      	mov	sp, r7
 8003c80:	bd80      	pop	{r7, pc}

08003c82 <LL_ADC_IsEnabled>:
{
 8003c82:	b480      	push	{r7}
 8003c84:	b083      	sub	sp, #12
 8003c86:	af00      	add	r7, sp, #0
 8003c88:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	689b      	ldr	r3, [r3, #8]
 8003c8e:	f003 0301 	and.w	r3, r3, #1
 8003c92:	2b01      	cmp	r3, #1
 8003c94:	d101      	bne.n	8003c9a <LL_ADC_IsEnabled+0x18>
 8003c96:	2301      	movs	r3, #1
 8003c98:	e000      	b.n	8003c9c <LL_ADC_IsEnabled+0x1a>
 8003c9a:	2300      	movs	r3, #0
}
 8003c9c:	4618      	mov	r0, r3
 8003c9e:	370c      	adds	r7, #12
 8003ca0:	46bd      	mov	sp, r7
 8003ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ca6:	4770      	bx	lr

08003ca8 <LL_ADC_StartCalibration>:
{
 8003ca8:	b480      	push	{r7}
 8003caa:	b083      	sub	sp, #12
 8003cac:	af00      	add	r7, sp, #0
 8003cae:	6078      	str	r0, [r7, #4]
 8003cb0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	689b      	ldr	r3, [r3, #8]
 8003cb6:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8003cba:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003cbe:	683a      	ldr	r2, [r7, #0]
 8003cc0:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8003cc4:	4313      	orrs	r3, r2
 8003cc6:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	609a      	str	r2, [r3, #8]
}
 8003cce:	bf00      	nop
 8003cd0:	370c      	adds	r7, #12
 8003cd2:	46bd      	mov	sp, r7
 8003cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cd8:	4770      	bx	lr

08003cda <LL_ADC_IsCalibrationOnGoing>:
{
 8003cda:	b480      	push	{r7}
 8003cdc:	b083      	sub	sp, #12
 8003cde:	af00      	add	r7, sp, #0
 8003ce0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	689b      	ldr	r3, [r3, #8]
 8003ce6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003cea:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003cee:	d101      	bne.n	8003cf4 <LL_ADC_IsCalibrationOnGoing+0x1a>
 8003cf0:	2301      	movs	r3, #1
 8003cf2:	e000      	b.n	8003cf6 <LL_ADC_IsCalibrationOnGoing+0x1c>
 8003cf4:	2300      	movs	r3, #0
}
 8003cf6:	4618      	mov	r0, r3
 8003cf8:	370c      	adds	r7, #12
 8003cfa:	46bd      	mov	sp, r7
 8003cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d00:	4770      	bx	lr

08003d02 <LL_ADC_REG_IsConversionOngoing>:
{
 8003d02:	b480      	push	{r7}
 8003d04:	b083      	sub	sp, #12
 8003d06:	af00      	add	r7, sp, #0
 8003d08:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	689b      	ldr	r3, [r3, #8]
 8003d0e:	f003 0304 	and.w	r3, r3, #4
 8003d12:	2b04      	cmp	r3, #4
 8003d14:	d101      	bne.n	8003d1a <LL_ADC_REG_IsConversionOngoing+0x18>
 8003d16:	2301      	movs	r3, #1
 8003d18:	e000      	b.n	8003d1c <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003d1a:	2300      	movs	r3, #0
}
 8003d1c:	4618      	mov	r0, r3
 8003d1e:	370c      	adds	r7, #12
 8003d20:	46bd      	mov	sp, r7
 8003d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d26:	4770      	bx	lr

08003d28 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 8003d28:	b580      	push	{r7, lr}
 8003d2a:	b084      	sub	sp, #16
 8003d2c:	af00      	add	r7, sp, #0
 8003d2e:	6078      	str	r0, [r7, #4]
 8003d30:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8003d32:	2300      	movs	r3, #0
 8003d34:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8003d3c:	2b01      	cmp	r3, #1
 8003d3e:	d101      	bne.n	8003d44 <HAL_ADCEx_Calibration_Start+0x1c>
 8003d40:	2302      	movs	r3, #2
 8003d42:	e04d      	b.n	8003de0 <HAL_ADCEx_Calibration_Start+0xb8>
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	2201      	movs	r2, #1
 8003d48:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8003d4c:	6878      	ldr	r0, [r7, #4]
 8003d4e:	f7ff fea5 	bl	8003a9c <ADC_Disable>
 8003d52:	4603      	mov	r3, r0
 8003d54:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8003d56:	7bfb      	ldrb	r3, [r7, #15]
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d136      	bne.n	8003dca <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d60:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003d64:	f023 0302 	bic.w	r3, r3, #2
 8003d68:	f043 0202 	orr.w	r2, r3, #2
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	65da      	str	r2, [r3, #92]	; 0x5c
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	6839      	ldr	r1, [r7, #0]
 8003d76:	4618      	mov	r0, r3
 8003d78:	f7ff ff96 	bl	8003ca8 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8003d7c:	e014      	b.n	8003da8 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 8003d7e:	68bb      	ldr	r3, [r7, #8]
 8003d80:	3301      	adds	r3, #1
 8003d82:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8003d84:	68bb      	ldr	r3, [r7, #8]
 8003d86:	4a18      	ldr	r2, [pc, #96]	; (8003de8 <HAL_ADCEx_Calibration_Start+0xc0>)
 8003d88:	4293      	cmp	r3, r2
 8003d8a:	d90d      	bls.n	8003da8 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d90:	f023 0312 	bic.w	r3, r3, #18
 8003d94:	f043 0210 	orr.w	r2, r3, #16
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	65da      	str	r2, [r3, #92]	; 0x5c
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	2200      	movs	r2, #0
 8003da0:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

        return HAL_ERROR;
 8003da4:	2301      	movs	r3, #1
 8003da6:	e01b      	b.n	8003de0 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	4618      	mov	r0, r3
 8003dae:	f7ff ff94 	bl	8003cda <LL_ADC_IsCalibrationOnGoing>
 8003db2:	4603      	mov	r3, r0
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d1e2      	bne.n	8003d7e <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003dbc:	f023 0303 	bic.w	r3, r3, #3
 8003dc0:	f043 0201 	orr.w	r2, r3, #1
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	65da      	str	r2, [r3, #92]	; 0x5c
 8003dc8:	e005      	b.n	8003dd6 <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003dce:	f043 0210 	orr.w	r2, r3, #16
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	2200      	movs	r2, #0
 8003dda:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8003dde:	7bfb      	ldrb	r3, [r7, #15]
}
 8003de0:	4618      	mov	r0, r3
 8003de2:	3710      	adds	r7, #16
 8003de4:	46bd      	mov	sp, r7
 8003de6:	bd80      	pop	{r7, pc}
 8003de8:	0004de01 	.word	0x0004de01

08003dec <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8003dec:	b590      	push	{r4, r7, lr}
 8003dee:	b0a1      	sub	sp, #132	; 0x84
 8003df0:	af00      	add	r7, sp, #0
 8003df2:	6078      	str	r0, [r7, #4]
 8003df4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003df6:	2300      	movs	r3, #0
 8003df8:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8003e02:	2b01      	cmp	r3, #1
 8003e04:	d101      	bne.n	8003e0a <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8003e06:	2302      	movs	r3, #2
 8003e08:	e0e7      	b.n	8003fda <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	2201      	movs	r2, #1
 8003e0e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 8003e12:	2300      	movs	r3, #0
 8003e14:	667b      	str	r3, [r7, #100]	; 0x64
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 8003e16:	2300      	movs	r3, #0
 8003e18:	66bb      	str	r3, [r7, #104]	; 0x68

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003e22:	d102      	bne.n	8003e2a <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8003e24:	4b6f      	ldr	r3, [pc, #444]	; (8003fe4 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003e26:	60bb      	str	r3, [r7, #8]
 8003e28:	e009      	b.n	8003e3e <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	4a6e      	ldr	r2, [pc, #440]	; (8003fe8 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8003e30:	4293      	cmp	r3, r2
 8003e32:	d102      	bne.n	8003e3a <HAL_ADCEx_MultiModeConfigChannel+0x4e>
 8003e34:	4b6d      	ldr	r3, [pc, #436]	; (8003fec <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8003e36:	60bb      	str	r3, [r7, #8]
 8003e38:	e001      	b.n	8003e3e <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8003e3a:	2300      	movs	r3, #0
 8003e3c:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8003e3e:	68bb      	ldr	r3, [r7, #8]
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d10b      	bne.n	8003e5c <HAL_ADCEx_MultiModeConfigChannel+0x70>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e48:	f043 0220 	orr.w	r2, r3, #32
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	2200      	movs	r2, #0
 8003e54:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 8003e58:	2301      	movs	r3, #1
 8003e5a:	e0be      	b.n	8003fda <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8003e5c:	68bb      	ldr	r3, [r7, #8]
 8003e5e:	4618      	mov	r0, r3
 8003e60:	f7ff ff4f 	bl	8003d02 <LL_ADC_REG_IsConversionOngoing>
 8003e64:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	4618      	mov	r0, r3
 8003e6c:	f7ff ff49 	bl	8003d02 <LL_ADC_REG_IsConversionOngoing>
 8003e70:	4603      	mov	r3, r0
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	f040 80a0 	bne.w	8003fb8 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8003e78:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	f040 809c 	bne.w	8003fb8 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003e88:	d004      	beq.n	8003e94 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	4a55      	ldr	r2, [pc, #340]	; (8003fe4 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003e90:	4293      	cmp	r3, r2
 8003e92:	d101      	bne.n	8003e98 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 8003e94:	4b56      	ldr	r3, [pc, #344]	; (8003ff0 <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 8003e96:	e000      	b.n	8003e9a <HAL_ADCEx_MultiModeConfigChannel+0xae>
 8003e98:	4b56      	ldr	r3, [pc, #344]	; (8003ff4 <HAL_ADCEx_MultiModeConfigChannel+0x208>)
 8003e9a:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003e9c:	683b      	ldr	r3, [r7, #0]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d04b      	beq.n	8003f3c <HAL_ADCEx_MultiModeConfigChannel+0x150>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8003ea4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003ea6:	689b      	ldr	r3, [r3, #8]
 8003ea8:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003eac:	683b      	ldr	r3, [r7, #0]
 8003eae:	6859      	ldr	r1, [r3, #4]
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003eb6:	035b      	lsls	r3, r3, #13
 8003eb8:	430b      	orrs	r3, r1
 8003eba:	431a      	orrs	r2, r3
 8003ebc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003ebe:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003ec8:	d004      	beq.n	8003ed4 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	4a45      	ldr	r2, [pc, #276]	; (8003fe4 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003ed0:	4293      	cmp	r3, r2
 8003ed2:	d10f      	bne.n	8003ef4 <HAL_ADCEx_MultiModeConfigChannel+0x108>
 8003ed4:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8003ed8:	f7ff fed3 	bl	8003c82 <LL_ADC_IsEnabled>
 8003edc:	4604      	mov	r4, r0
 8003ede:	4841      	ldr	r0, [pc, #260]	; (8003fe4 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003ee0:	f7ff fecf 	bl	8003c82 <LL_ADC_IsEnabled>
 8003ee4:	4603      	mov	r3, r0
 8003ee6:	4323      	orrs	r3, r4
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	bf0c      	ite	eq
 8003eec:	2301      	moveq	r3, #1
 8003eee:	2300      	movne	r3, #0
 8003ef0:	b2db      	uxtb	r3, r3
 8003ef2:	e012      	b.n	8003f1a <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 8003ef4:	483c      	ldr	r0, [pc, #240]	; (8003fe8 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8003ef6:	f7ff fec4 	bl	8003c82 <LL_ADC_IsEnabled>
 8003efa:	4604      	mov	r4, r0
 8003efc:	483b      	ldr	r0, [pc, #236]	; (8003fec <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8003efe:	f7ff fec0 	bl	8003c82 <LL_ADC_IsEnabled>
 8003f02:	4603      	mov	r3, r0
 8003f04:	431c      	orrs	r4, r3
 8003f06:	483c      	ldr	r0, [pc, #240]	; (8003ff8 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8003f08:	f7ff febb 	bl	8003c82 <LL_ADC_IsEnabled>
 8003f0c:	4603      	mov	r3, r0
 8003f0e:	4323      	orrs	r3, r4
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	bf0c      	ite	eq
 8003f14:	2301      	moveq	r3, #1
 8003f16:	2300      	movne	r3, #0
 8003f18:	b2db      	uxtb	r3, r3
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d056      	beq.n	8003fcc <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8003f1e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003f20:	689b      	ldr	r3, [r3, #8]
 8003f22:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8003f26:	f023 030f 	bic.w	r3, r3, #15
 8003f2a:	683a      	ldr	r2, [r7, #0]
 8003f2c:	6811      	ldr	r1, [r2, #0]
 8003f2e:	683a      	ldr	r2, [r7, #0]
 8003f30:	6892      	ldr	r2, [r2, #8]
 8003f32:	430a      	orrs	r2, r1
 8003f34:	431a      	orrs	r2, r3
 8003f36:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003f38:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003f3a:	e047      	b.n	8003fcc <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8003f3c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003f3e:	689b      	ldr	r3, [r3, #8]
 8003f40:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003f44:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003f46:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003f50:	d004      	beq.n	8003f5c <HAL_ADCEx_MultiModeConfigChannel+0x170>
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	4a23      	ldr	r2, [pc, #140]	; (8003fe4 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003f58:	4293      	cmp	r3, r2
 8003f5a:	d10f      	bne.n	8003f7c <HAL_ADCEx_MultiModeConfigChannel+0x190>
 8003f5c:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8003f60:	f7ff fe8f 	bl	8003c82 <LL_ADC_IsEnabled>
 8003f64:	4604      	mov	r4, r0
 8003f66:	481f      	ldr	r0, [pc, #124]	; (8003fe4 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003f68:	f7ff fe8b 	bl	8003c82 <LL_ADC_IsEnabled>
 8003f6c:	4603      	mov	r3, r0
 8003f6e:	4323      	orrs	r3, r4
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	bf0c      	ite	eq
 8003f74:	2301      	moveq	r3, #1
 8003f76:	2300      	movne	r3, #0
 8003f78:	b2db      	uxtb	r3, r3
 8003f7a:	e012      	b.n	8003fa2 <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 8003f7c:	481a      	ldr	r0, [pc, #104]	; (8003fe8 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8003f7e:	f7ff fe80 	bl	8003c82 <LL_ADC_IsEnabled>
 8003f82:	4604      	mov	r4, r0
 8003f84:	4819      	ldr	r0, [pc, #100]	; (8003fec <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8003f86:	f7ff fe7c 	bl	8003c82 <LL_ADC_IsEnabled>
 8003f8a:	4603      	mov	r3, r0
 8003f8c:	431c      	orrs	r4, r3
 8003f8e:	481a      	ldr	r0, [pc, #104]	; (8003ff8 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8003f90:	f7ff fe77 	bl	8003c82 <LL_ADC_IsEnabled>
 8003f94:	4603      	mov	r3, r0
 8003f96:	4323      	orrs	r3, r4
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	bf0c      	ite	eq
 8003f9c:	2301      	moveq	r3, #1
 8003f9e:	2300      	movne	r3, #0
 8003fa0:	b2db      	uxtb	r3, r3
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d012      	beq.n	8003fcc <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8003fa6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003fa8:	689b      	ldr	r3, [r3, #8]
 8003faa:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8003fae:	f023 030f 	bic.w	r3, r3, #15
 8003fb2:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8003fb4:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003fb6:	e009      	b.n	8003fcc <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003fbc:	f043 0220 	orr.w	r2, r3, #32
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8003fc4:	2301      	movs	r3, #1
 8003fc6:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8003fca:	e000      	b.n	8003fce <HAL_ADCEx_MultiModeConfigChannel+0x1e2>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003fcc:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	2200      	movs	r2, #0
 8003fd2:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8003fd6:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8003fda:	4618      	mov	r0, r3
 8003fdc:	3784      	adds	r7, #132	; 0x84
 8003fde:	46bd      	mov	sp, r7
 8003fe0:	bd90      	pop	{r4, r7, pc}
 8003fe2:	bf00      	nop
 8003fe4:	50000100 	.word	0x50000100
 8003fe8:	50000400 	.word	0x50000400
 8003fec:	50000500 	.word	0x50000500
 8003ff0:	50000300 	.word	0x50000300
 8003ff4:	50000700 	.word	0x50000700
 8003ff8:	50000600 	.word	0x50000600

08003ffc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003ffc:	b480      	push	{r7}
 8003ffe:	b085      	sub	sp, #20
 8004000:	af00      	add	r7, sp, #0
 8004002:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	f003 0307 	and.w	r3, r3, #7
 800400a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800400c:	4b0c      	ldr	r3, [pc, #48]	; (8004040 <__NVIC_SetPriorityGrouping+0x44>)
 800400e:	68db      	ldr	r3, [r3, #12]
 8004010:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004012:	68ba      	ldr	r2, [r7, #8]
 8004014:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004018:	4013      	ands	r3, r2
 800401a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004020:	68bb      	ldr	r3, [r7, #8]
 8004022:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004024:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004028:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800402c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800402e:	4a04      	ldr	r2, [pc, #16]	; (8004040 <__NVIC_SetPriorityGrouping+0x44>)
 8004030:	68bb      	ldr	r3, [r7, #8]
 8004032:	60d3      	str	r3, [r2, #12]
}
 8004034:	bf00      	nop
 8004036:	3714      	adds	r7, #20
 8004038:	46bd      	mov	sp, r7
 800403a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800403e:	4770      	bx	lr
 8004040:	e000ed00 	.word	0xe000ed00

08004044 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004044:	b480      	push	{r7}
 8004046:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004048:	4b04      	ldr	r3, [pc, #16]	; (800405c <__NVIC_GetPriorityGrouping+0x18>)
 800404a:	68db      	ldr	r3, [r3, #12]
 800404c:	0a1b      	lsrs	r3, r3, #8
 800404e:	f003 0307 	and.w	r3, r3, #7
}
 8004052:	4618      	mov	r0, r3
 8004054:	46bd      	mov	sp, r7
 8004056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800405a:	4770      	bx	lr
 800405c:	e000ed00 	.word	0xe000ed00

08004060 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004060:	b480      	push	{r7}
 8004062:	b083      	sub	sp, #12
 8004064:	af00      	add	r7, sp, #0
 8004066:	4603      	mov	r3, r0
 8004068:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800406a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800406e:	2b00      	cmp	r3, #0
 8004070:	db0b      	blt.n	800408a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004072:	79fb      	ldrb	r3, [r7, #7]
 8004074:	f003 021f 	and.w	r2, r3, #31
 8004078:	4907      	ldr	r1, [pc, #28]	; (8004098 <__NVIC_EnableIRQ+0x38>)
 800407a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800407e:	095b      	lsrs	r3, r3, #5
 8004080:	2001      	movs	r0, #1
 8004082:	fa00 f202 	lsl.w	r2, r0, r2
 8004086:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800408a:	bf00      	nop
 800408c:	370c      	adds	r7, #12
 800408e:	46bd      	mov	sp, r7
 8004090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004094:	4770      	bx	lr
 8004096:	bf00      	nop
 8004098:	e000e100 	.word	0xe000e100

0800409c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800409c:	b480      	push	{r7}
 800409e:	b083      	sub	sp, #12
 80040a0:	af00      	add	r7, sp, #0
 80040a2:	4603      	mov	r3, r0
 80040a4:	6039      	str	r1, [r7, #0]
 80040a6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80040a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	db0a      	blt.n	80040c6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80040b0:	683b      	ldr	r3, [r7, #0]
 80040b2:	b2da      	uxtb	r2, r3
 80040b4:	490c      	ldr	r1, [pc, #48]	; (80040e8 <__NVIC_SetPriority+0x4c>)
 80040b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80040ba:	0112      	lsls	r2, r2, #4
 80040bc:	b2d2      	uxtb	r2, r2
 80040be:	440b      	add	r3, r1
 80040c0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80040c4:	e00a      	b.n	80040dc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80040c6:	683b      	ldr	r3, [r7, #0]
 80040c8:	b2da      	uxtb	r2, r3
 80040ca:	4908      	ldr	r1, [pc, #32]	; (80040ec <__NVIC_SetPriority+0x50>)
 80040cc:	79fb      	ldrb	r3, [r7, #7]
 80040ce:	f003 030f 	and.w	r3, r3, #15
 80040d2:	3b04      	subs	r3, #4
 80040d4:	0112      	lsls	r2, r2, #4
 80040d6:	b2d2      	uxtb	r2, r2
 80040d8:	440b      	add	r3, r1
 80040da:	761a      	strb	r2, [r3, #24]
}
 80040dc:	bf00      	nop
 80040de:	370c      	adds	r7, #12
 80040e0:	46bd      	mov	sp, r7
 80040e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040e6:	4770      	bx	lr
 80040e8:	e000e100 	.word	0xe000e100
 80040ec:	e000ed00 	.word	0xe000ed00

080040f0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80040f0:	b480      	push	{r7}
 80040f2:	b089      	sub	sp, #36	; 0x24
 80040f4:	af00      	add	r7, sp, #0
 80040f6:	60f8      	str	r0, [r7, #12]
 80040f8:	60b9      	str	r1, [r7, #8]
 80040fa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	f003 0307 	and.w	r3, r3, #7
 8004102:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004104:	69fb      	ldr	r3, [r7, #28]
 8004106:	f1c3 0307 	rsb	r3, r3, #7
 800410a:	2b04      	cmp	r3, #4
 800410c:	bf28      	it	cs
 800410e:	2304      	movcs	r3, #4
 8004110:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004112:	69fb      	ldr	r3, [r7, #28]
 8004114:	3304      	adds	r3, #4
 8004116:	2b06      	cmp	r3, #6
 8004118:	d902      	bls.n	8004120 <NVIC_EncodePriority+0x30>
 800411a:	69fb      	ldr	r3, [r7, #28]
 800411c:	3b03      	subs	r3, #3
 800411e:	e000      	b.n	8004122 <NVIC_EncodePriority+0x32>
 8004120:	2300      	movs	r3, #0
 8004122:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004124:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004128:	69bb      	ldr	r3, [r7, #24]
 800412a:	fa02 f303 	lsl.w	r3, r2, r3
 800412e:	43da      	mvns	r2, r3
 8004130:	68bb      	ldr	r3, [r7, #8]
 8004132:	401a      	ands	r2, r3
 8004134:	697b      	ldr	r3, [r7, #20]
 8004136:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004138:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800413c:	697b      	ldr	r3, [r7, #20]
 800413e:	fa01 f303 	lsl.w	r3, r1, r3
 8004142:	43d9      	mvns	r1, r3
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004148:	4313      	orrs	r3, r2
         );
}
 800414a:	4618      	mov	r0, r3
 800414c:	3724      	adds	r7, #36	; 0x24
 800414e:	46bd      	mov	sp, r7
 8004150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004154:	4770      	bx	lr
	...

08004158 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8004158:	b480      	push	{r7}
 800415a:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 800415c:	f3bf 8f4f 	dsb	sy
}
 8004160:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8004162:	4b06      	ldr	r3, [pc, #24]	; (800417c <__NVIC_SystemReset+0x24>)
 8004164:	68db      	ldr	r3, [r3, #12]
 8004166:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 800416a:	4904      	ldr	r1, [pc, #16]	; (800417c <__NVIC_SystemReset+0x24>)
 800416c:	4b04      	ldr	r3, [pc, #16]	; (8004180 <__NVIC_SystemReset+0x28>)
 800416e:	4313      	orrs	r3, r2
 8004170:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8004172:	f3bf 8f4f 	dsb	sy
}
 8004176:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8004178:	bf00      	nop
 800417a:	e7fd      	b.n	8004178 <__NVIC_SystemReset+0x20>
 800417c:	e000ed00 	.word	0xe000ed00
 8004180:	05fa0004 	.word	0x05fa0004

08004184 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004184:	b580      	push	{r7, lr}
 8004186:	b082      	sub	sp, #8
 8004188:	af00      	add	r7, sp, #0
 800418a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	3b01      	subs	r3, #1
 8004190:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004194:	d301      	bcc.n	800419a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004196:	2301      	movs	r3, #1
 8004198:	e00f      	b.n	80041ba <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800419a:	4a0a      	ldr	r2, [pc, #40]	; (80041c4 <SysTick_Config+0x40>)
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	3b01      	subs	r3, #1
 80041a0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80041a2:	210f      	movs	r1, #15
 80041a4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80041a8:	f7ff ff78 	bl	800409c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80041ac:	4b05      	ldr	r3, [pc, #20]	; (80041c4 <SysTick_Config+0x40>)
 80041ae:	2200      	movs	r2, #0
 80041b0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80041b2:	4b04      	ldr	r3, [pc, #16]	; (80041c4 <SysTick_Config+0x40>)
 80041b4:	2207      	movs	r2, #7
 80041b6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80041b8:	2300      	movs	r3, #0
}
 80041ba:	4618      	mov	r0, r3
 80041bc:	3708      	adds	r7, #8
 80041be:	46bd      	mov	sp, r7
 80041c0:	bd80      	pop	{r7, pc}
 80041c2:	bf00      	nop
 80041c4:	e000e010 	.word	0xe000e010

080041c8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80041c8:	b580      	push	{r7, lr}
 80041ca:	b082      	sub	sp, #8
 80041cc:	af00      	add	r7, sp, #0
 80041ce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80041d0:	6878      	ldr	r0, [r7, #4]
 80041d2:	f7ff ff13 	bl	8003ffc <__NVIC_SetPriorityGrouping>
}
 80041d6:	bf00      	nop
 80041d8:	3708      	adds	r7, #8
 80041da:	46bd      	mov	sp, r7
 80041dc:	bd80      	pop	{r7, pc}

080041de <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80041de:	b580      	push	{r7, lr}
 80041e0:	b086      	sub	sp, #24
 80041e2:	af00      	add	r7, sp, #0
 80041e4:	4603      	mov	r3, r0
 80041e6:	60b9      	str	r1, [r7, #8]
 80041e8:	607a      	str	r2, [r7, #4]
 80041ea:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80041ec:	f7ff ff2a 	bl	8004044 <__NVIC_GetPriorityGrouping>
 80041f0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80041f2:	687a      	ldr	r2, [r7, #4]
 80041f4:	68b9      	ldr	r1, [r7, #8]
 80041f6:	6978      	ldr	r0, [r7, #20]
 80041f8:	f7ff ff7a 	bl	80040f0 <NVIC_EncodePriority>
 80041fc:	4602      	mov	r2, r0
 80041fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004202:	4611      	mov	r1, r2
 8004204:	4618      	mov	r0, r3
 8004206:	f7ff ff49 	bl	800409c <__NVIC_SetPriority>
}
 800420a:	bf00      	nop
 800420c:	3718      	adds	r7, #24
 800420e:	46bd      	mov	sp, r7
 8004210:	bd80      	pop	{r7, pc}

08004212 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004212:	b580      	push	{r7, lr}
 8004214:	b082      	sub	sp, #8
 8004216:	af00      	add	r7, sp, #0
 8004218:	4603      	mov	r3, r0
 800421a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800421c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004220:	4618      	mov	r0, r3
 8004222:	f7ff ff1d 	bl	8004060 <__NVIC_EnableIRQ>
}
 8004226:	bf00      	nop
 8004228:	3708      	adds	r7, #8
 800422a:	46bd      	mov	sp, r7
 800422c:	bd80      	pop	{r7, pc}

0800422e <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiate a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 800422e:	b580      	push	{r7, lr}
 8004230:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 8004232:	f7ff ff91 	bl	8004158 <__NVIC_SystemReset>

08004236 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004236:	b580      	push	{r7, lr}
 8004238:	b082      	sub	sp, #8
 800423a:	af00      	add	r7, sp, #0
 800423c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800423e:	6878      	ldr	r0, [r7, #4]
 8004240:	f7ff ffa0 	bl	8004184 <SysTick_Config>
 8004244:	4603      	mov	r3, r0
}
 8004246:	4618      	mov	r0, r3
 8004248:	3708      	adds	r7, #8
 800424a:	46bd      	mov	sp, r7
 800424c:	bd80      	pop	{r7, pc}
	...

08004250 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004250:	b580      	push	{r7, lr}
 8004252:	b084      	sub	sp, #16
 8004254:	af00      	add	r7, sp, #0
 8004256:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	2b00      	cmp	r3, #0
 800425c:	d101      	bne.n	8004262 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800425e:	2301      	movs	r3, #1
 8004260:	e08d      	b.n	800437e <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	461a      	mov	r2, r3
 8004268:	4b47      	ldr	r3, [pc, #284]	; (8004388 <HAL_DMA_Init+0x138>)
 800426a:	429a      	cmp	r2, r3
 800426c:	d80f      	bhi.n	800428e <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	461a      	mov	r2, r3
 8004274:	4b45      	ldr	r3, [pc, #276]	; (800438c <HAL_DMA_Init+0x13c>)
 8004276:	4413      	add	r3, r2
 8004278:	4a45      	ldr	r2, [pc, #276]	; (8004390 <HAL_DMA_Init+0x140>)
 800427a:	fba2 2303 	umull	r2, r3, r2, r3
 800427e:	091b      	lsrs	r3, r3, #4
 8004280:	009a      	lsls	r2, r3, #2
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	4a42      	ldr	r2, [pc, #264]	; (8004394 <HAL_DMA_Init+0x144>)
 800428a:	641a      	str	r2, [r3, #64]	; 0x40
 800428c:	e00e      	b.n	80042ac <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	461a      	mov	r2, r3
 8004294:	4b40      	ldr	r3, [pc, #256]	; (8004398 <HAL_DMA_Init+0x148>)
 8004296:	4413      	add	r3, r2
 8004298:	4a3d      	ldr	r2, [pc, #244]	; (8004390 <HAL_DMA_Init+0x140>)
 800429a:	fba2 2303 	umull	r2, r3, r2, r3
 800429e:	091b      	lsrs	r3, r3, #4
 80042a0:	009a      	lsls	r2, r3, #2
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	4a3c      	ldr	r2, [pc, #240]	; (800439c <HAL_DMA_Init+0x14c>)
 80042aa:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	2202      	movs	r2, #2
 80042b0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80042c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80042c6:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80042d0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	691b      	ldr	r3, [r3, #16]
 80042d6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80042dc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	699b      	ldr	r3, [r3, #24]
 80042e2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80042e8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	6a1b      	ldr	r3, [r3, #32]
 80042ee:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80042f0:	68fa      	ldr	r2, [r7, #12]
 80042f2:	4313      	orrs	r3, r2
 80042f4:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	68fa      	ldr	r2, [r7, #12]
 80042fc:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80042fe:	6878      	ldr	r0, [r7, #4]
 8004300:	f000 fa10 	bl	8004724 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	689b      	ldr	r3, [r3, #8]
 8004308:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800430c:	d102      	bne.n	8004314 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	2200      	movs	r2, #0
 8004312:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	685a      	ldr	r2, [r3, #4]
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800431c:	b2d2      	uxtb	r2, r2
 800431e:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004324:	687a      	ldr	r2, [r7, #4]
 8004326:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8004328:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	685b      	ldr	r3, [r3, #4]
 800432e:	2b00      	cmp	r3, #0
 8004330:	d010      	beq.n	8004354 <HAL_DMA_Init+0x104>
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	685b      	ldr	r3, [r3, #4]
 8004336:	2b04      	cmp	r3, #4
 8004338:	d80c      	bhi.n	8004354 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800433a:	6878      	ldr	r0, [r7, #4]
 800433c:	f000 fa30 	bl	80047a0 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004344:	2200      	movs	r2, #0
 8004346:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800434c:	687a      	ldr	r2, [r7, #4]
 800434e:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8004350:	605a      	str	r2, [r3, #4]
 8004352:	e008      	b.n	8004366 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	2200      	movs	r2, #0
 8004358:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	2200      	movs	r2, #0
 800435e:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	2200      	movs	r2, #0
 8004364:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	2200      	movs	r2, #0
 800436a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	2201      	movs	r2, #1
 8004370:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	2200      	movs	r2, #0
 8004378:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800437c:	2300      	movs	r3, #0
}
 800437e:	4618      	mov	r0, r3
 8004380:	3710      	adds	r7, #16
 8004382:	46bd      	mov	sp, r7
 8004384:	bd80      	pop	{r7, pc}
 8004386:	bf00      	nop
 8004388:	40020407 	.word	0x40020407
 800438c:	bffdfff8 	.word	0xbffdfff8
 8004390:	cccccccd 	.word	0xcccccccd
 8004394:	40020000 	.word	0x40020000
 8004398:	bffdfbf8 	.word	0xbffdfbf8
 800439c:	40020400 	.word	0x40020400

080043a0 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 80043a0:	b580      	push	{r7, lr}
 80043a2:	b086      	sub	sp, #24
 80043a4:	af00      	add	r7, sp, #0
 80043a6:	60f8      	str	r0, [r7, #12]
 80043a8:	60b9      	str	r1, [r7, #8]
 80043aa:	607a      	str	r2, [r7, #4]
 80043ac:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80043ae:	2300      	movs	r3, #0
 80043b0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80043b8:	2b01      	cmp	r3, #1
 80043ba:	d101      	bne.n	80043c0 <HAL_DMA_Start_IT+0x20>
 80043bc:	2302      	movs	r3, #2
 80043be:	e066      	b.n	800448e <HAL_DMA_Start_IT+0xee>
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	2201      	movs	r2, #1
 80043c4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80043ce:	b2db      	uxtb	r3, r3
 80043d0:	2b01      	cmp	r3, #1
 80043d2:	d155      	bne.n	8004480 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	2202      	movs	r2, #2
 80043d8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	2200      	movs	r2, #0
 80043e0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	681a      	ldr	r2, [r3, #0]
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	f022 0201 	bic.w	r2, r2, #1
 80043f0:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80043f2:	683b      	ldr	r3, [r7, #0]
 80043f4:	687a      	ldr	r2, [r7, #4]
 80043f6:	68b9      	ldr	r1, [r7, #8]
 80043f8:	68f8      	ldr	r0, [r7, #12]
 80043fa:	f000 f954 	bl	80046a6 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004402:	2b00      	cmp	r3, #0
 8004404:	d008      	beq.n	8004418 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	681a      	ldr	r2, [r3, #0]
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	f042 020e 	orr.w	r2, r2, #14
 8004414:	601a      	str	r2, [r3, #0]
 8004416:	e00f      	b.n	8004438 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	681a      	ldr	r2, [r3, #0]
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	f022 0204 	bic.w	r2, r2, #4
 8004426:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	681a      	ldr	r2, [r3, #0]
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	f042 020a 	orr.w	r2, r2, #10
 8004436:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004442:	2b00      	cmp	r3, #0
 8004444:	d007      	beq.n	8004456 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800444a:	681a      	ldr	r2, [r3, #0]
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004450:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004454:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800445a:	2b00      	cmp	r3, #0
 800445c:	d007      	beq.n	800446e <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004462:	681a      	ldr	r2, [r3, #0]
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004468:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800446c:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	681a      	ldr	r2, [r3, #0]
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	f042 0201 	orr.w	r2, r2, #1
 800447c:	601a      	str	r2, [r3, #0]
 800447e:	e005      	b.n	800448c <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	2200      	movs	r2, #0
 8004484:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8004488:	2302      	movs	r3, #2
 800448a:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 800448c:	7dfb      	ldrb	r3, [r7, #23]
}
 800448e:	4618      	mov	r0, r3
 8004490:	3718      	adds	r7, #24
 8004492:	46bd      	mov	sp, r7
 8004494:	bd80      	pop	{r7, pc}

08004496 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004496:	b480      	push	{r7}
 8004498:	b085      	sub	sp, #20
 800449a:	af00      	add	r7, sp, #0
 800449c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800449e:	2300      	movs	r3, #0
 80044a0:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80044a8:	b2db      	uxtb	r3, r3
 80044aa:	2b02      	cmp	r3, #2
 80044ac:	d005      	beq.n	80044ba <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	2204      	movs	r2, #4
 80044b2:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80044b4:	2301      	movs	r3, #1
 80044b6:	73fb      	strb	r3, [r7, #15]
 80044b8:	e037      	b.n	800452a <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	681a      	ldr	r2, [r3, #0]
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	f022 020e 	bic.w	r2, r2, #14
 80044c8:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80044ce:	681a      	ldr	r2, [r3, #0]
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80044d4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80044d8:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	681a      	ldr	r2, [r3, #0]
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	f022 0201 	bic.w	r2, r2, #1
 80044e8:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80044ee:	f003 021f 	and.w	r2, r3, #31
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044f6:	2101      	movs	r1, #1
 80044f8:	fa01 f202 	lsl.w	r2, r1, r2
 80044fc:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004502:	687a      	ldr	r2, [r7, #4]
 8004504:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8004506:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800450c:	2b00      	cmp	r3, #0
 800450e:	d00c      	beq.n	800452a <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004514:	681a      	ldr	r2, [r3, #0]
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800451a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800451e:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004524:	687a      	ldr	r2, [r7, #4]
 8004526:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8004528:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	2201      	movs	r2, #1
 800452e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	2200      	movs	r2, #0
 8004536:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return status;
 800453a:	7bfb      	ldrb	r3, [r7, #15]
}
 800453c:	4618      	mov	r0, r3
 800453e:	3714      	adds	r7, #20
 8004540:	46bd      	mov	sp, r7
 8004542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004546:	4770      	bx	lr

08004548 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004548:	b580      	push	{r7, lr}
 800454a:	b084      	sub	sp, #16
 800454c:	af00      	add	r7, sp, #0
 800454e:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004564:	f003 031f 	and.w	r3, r3, #31
 8004568:	2204      	movs	r2, #4
 800456a:	409a      	lsls	r2, r3
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	4013      	ands	r3, r2
 8004570:	2b00      	cmp	r3, #0
 8004572:	d026      	beq.n	80045c2 <HAL_DMA_IRQHandler+0x7a>
 8004574:	68bb      	ldr	r3, [r7, #8]
 8004576:	f003 0304 	and.w	r3, r3, #4
 800457a:	2b00      	cmp	r3, #0
 800457c:	d021      	beq.n	80045c2 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	f003 0320 	and.w	r3, r3, #32
 8004588:	2b00      	cmp	r3, #0
 800458a:	d107      	bne.n	800459c <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	681a      	ldr	r2, [r3, #0]
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	f022 0204 	bic.w	r2, r2, #4
 800459a:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045a0:	f003 021f 	and.w	r2, r3, #31
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045a8:	2104      	movs	r1, #4
 80045aa:	fa01 f202 	lsl.w	r2, r1, r2
 80045ae:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d071      	beq.n	800469c <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045bc:	6878      	ldr	r0, [r7, #4]
 80045be:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 80045c0:	e06c      	b.n	800469c <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045c6:	f003 031f 	and.w	r3, r3, #31
 80045ca:	2202      	movs	r2, #2
 80045cc:	409a      	lsls	r2, r3
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	4013      	ands	r3, r2
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d02e      	beq.n	8004634 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 80045d6:	68bb      	ldr	r3, [r7, #8]
 80045d8:	f003 0302 	and.w	r3, r3, #2
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d029      	beq.n	8004634 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	f003 0320 	and.w	r3, r3, #32
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d10b      	bne.n	8004606 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	681a      	ldr	r2, [r3, #0]
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	f022 020a 	bic.w	r2, r2, #10
 80045fc:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	2201      	movs	r2, #1
 8004602:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800460a:	f003 021f 	and.w	r2, r3, #31
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004612:	2102      	movs	r1, #2
 8004614:	fa01 f202 	lsl.w	r2, r1, r2
 8004618:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	2200      	movs	r2, #0
 800461e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004626:	2b00      	cmp	r3, #0
 8004628:	d038      	beq.n	800469c <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800462e:	6878      	ldr	r0, [r7, #4]
 8004630:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8004632:	e033      	b.n	800469c <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004638:	f003 031f 	and.w	r3, r3, #31
 800463c:	2208      	movs	r2, #8
 800463e:	409a      	lsls	r2, r3
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	4013      	ands	r3, r2
 8004644:	2b00      	cmp	r3, #0
 8004646:	d02a      	beq.n	800469e <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8004648:	68bb      	ldr	r3, [r7, #8]
 800464a:	f003 0308 	and.w	r3, r3, #8
 800464e:	2b00      	cmp	r3, #0
 8004650:	d025      	beq.n	800469e <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	681a      	ldr	r2, [r3, #0]
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	f022 020e 	bic.w	r2, r2, #14
 8004660:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004666:	f003 021f 	and.w	r2, r3, #31
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800466e:	2101      	movs	r1, #1
 8004670:	fa01 f202 	lsl.w	r2, r1, r2
 8004674:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	2201      	movs	r2, #1
 800467a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	2201      	movs	r2, #1
 8004680:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	2200      	movs	r2, #0
 8004688:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004690:	2b00      	cmp	r3, #0
 8004692:	d004      	beq.n	800469e <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004698:	6878      	ldr	r0, [r7, #4]
 800469a:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800469c:	bf00      	nop
 800469e:	bf00      	nop
}
 80046a0:	3710      	adds	r7, #16
 80046a2:	46bd      	mov	sp, r7
 80046a4:	bd80      	pop	{r7, pc}

080046a6 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80046a6:	b480      	push	{r7}
 80046a8:	b085      	sub	sp, #20
 80046aa:	af00      	add	r7, sp, #0
 80046ac:	60f8      	str	r0, [r7, #12]
 80046ae:	60b9      	str	r1, [r7, #8]
 80046b0:	607a      	str	r2, [r7, #4]
 80046b2:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80046b8:	68fa      	ldr	r2, [r7, #12]
 80046ba:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80046bc:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d004      	beq.n	80046d0 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80046ca:	68fa      	ldr	r2, [r7, #12]
 80046cc:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80046ce:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80046d4:	f003 021f 	and.w	r2, r3, #31
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046dc:	2101      	movs	r1, #1
 80046de:	fa01 f202 	lsl.w	r2, r1, r2
 80046e2:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	683a      	ldr	r2, [r7, #0]
 80046ea:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	689b      	ldr	r3, [r3, #8]
 80046f0:	2b10      	cmp	r3, #16
 80046f2:	d108      	bne.n	8004706 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	687a      	ldr	r2, [r7, #4]
 80046fa:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	68ba      	ldr	r2, [r7, #8]
 8004702:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8004704:	e007      	b.n	8004716 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	68ba      	ldr	r2, [r7, #8]
 800470c:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	687a      	ldr	r2, [r7, #4]
 8004714:	60da      	str	r2, [r3, #12]
}
 8004716:	bf00      	nop
 8004718:	3714      	adds	r7, #20
 800471a:	46bd      	mov	sp, r7
 800471c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004720:	4770      	bx	lr
	...

08004724 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004724:	b480      	push	{r7}
 8004726:	b087      	sub	sp, #28
 8004728:	af00      	add	r7, sp, #0
 800472a:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	461a      	mov	r2, r3
 8004732:	4b16      	ldr	r3, [pc, #88]	; (800478c <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8004734:	429a      	cmp	r2, r3
 8004736:	d802      	bhi.n	800473e <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8004738:	4b15      	ldr	r3, [pc, #84]	; (8004790 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 800473a:	617b      	str	r3, [r7, #20]
 800473c:	e001      	b.n	8004742 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 800473e:	4b15      	ldr	r3, [pc, #84]	; (8004794 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8004740:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8004742:	697b      	ldr	r3, [r7, #20]
 8004744:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	b2db      	uxtb	r3, r3
 800474c:	3b08      	subs	r3, #8
 800474e:	4a12      	ldr	r2, [pc, #72]	; (8004798 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8004750:	fba2 2303 	umull	r2, r3, r2, r3
 8004754:	091b      	lsrs	r3, r3, #4
 8004756:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800475c:	089b      	lsrs	r3, r3, #2
 800475e:	009a      	lsls	r2, r3, #2
 8004760:	693b      	ldr	r3, [r7, #16]
 8004762:	4413      	add	r3, r2
 8004764:	461a      	mov	r2, r3
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	4a0b      	ldr	r2, [pc, #44]	; (800479c <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 800476e:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	f003 031f 	and.w	r3, r3, #31
 8004776:	2201      	movs	r2, #1
 8004778:	409a      	lsls	r2, r3
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	651a      	str	r2, [r3, #80]	; 0x50
}
 800477e:	bf00      	nop
 8004780:	371c      	adds	r7, #28
 8004782:	46bd      	mov	sp, r7
 8004784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004788:	4770      	bx	lr
 800478a:	bf00      	nop
 800478c:	40020407 	.word	0x40020407
 8004790:	40020800 	.word	0x40020800
 8004794:	40020820 	.word	0x40020820
 8004798:	cccccccd 	.word	0xcccccccd
 800479c:	40020880 	.word	0x40020880

080047a0 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80047a0:	b480      	push	{r7}
 80047a2:	b085      	sub	sp, #20
 80047a4:	af00      	add	r7, sp, #0
 80047a6:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	685b      	ldr	r3, [r3, #4]
 80047ac:	b2db      	uxtb	r3, r3
 80047ae:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80047b0:	68fa      	ldr	r2, [r7, #12]
 80047b2:	4b0b      	ldr	r3, [pc, #44]	; (80047e0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 80047b4:	4413      	add	r3, r2
 80047b6:	009b      	lsls	r3, r3, #2
 80047b8:	461a      	mov	r2, r3
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	4a08      	ldr	r2, [pc, #32]	; (80047e4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 80047c2:	659a      	str	r2, [r3, #88]	; 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	3b01      	subs	r3, #1
 80047c8:	f003 031f 	and.w	r3, r3, #31
 80047cc:	2201      	movs	r2, #1
 80047ce:	409a      	lsls	r2, r3
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	65da      	str	r2, [r3, #92]	; 0x5c
}
 80047d4:	bf00      	nop
 80047d6:	3714      	adds	r7, #20
 80047d8:	46bd      	mov	sp, r7
 80047da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047de:	4770      	bx	lr
 80047e0:	1000823f 	.word	0x1000823f
 80047e4:	40020940 	.word	0x40020940

080047e8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80047e8:	b480      	push	{r7}
 80047ea:	b087      	sub	sp, #28
 80047ec:	af00      	add	r7, sp, #0
 80047ee:	6078      	str	r0, [r7, #4]
 80047f0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80047f2:	2300      	movs	r3, #0
 80047f4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 80047f6:	e15a      	b.n	8004aae <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80047f8:	683b      	ldr	r3, [r7, #0]
 80047fa:	681a      	ldr	r2, [r3, #0]
 80047fc:	2101      	movs	r1, #1
 80047fe:	697b      	ldr	r3, [r7, #20]
 8004800:	fa01 f303 	lsl.w	r3, r1, r3
 8004804:	4013      	ands	r3, r2
 8004806:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	2b00      	cmp	r3, #0
 800480c:	f000 814c 	beq.w	8004aa8 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8004810:	683b      	ldr	r3, [r7, #0]
 8004812:	685b      	ldr	r3, [r3, #4]
 8004814:	f003 0303 	and.w	r3, r3, #3
 8004818:	2b01      	cmp	r3, #1
 800481a:	d005      	beq.n	8004828 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800481c:	683b      	ldr	r3, [r7, #0]
 800481e:	685b      	ldr	r3, [r3, #4]
 8004820:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8004824:	2b02      	cmp	r3, #2
 8004826:	d130      	bne.n	800488a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	689b      	ldr	r3, [r3, #8]
 800482c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800482e:	697b      	ldr	r3, [r7, #20]
 8004830:	005b      	lsls	r3, r3, #1
 8004832:	2203      	movs	r2, #3
 8004834:	fa02 f303 	lsl.w	r3, r2, r3
 8004838:	43db      	mvns	r3, r3
 800483a:	693a      	ldr	r2, [r7, #16]
 800483c:	4013      	ands	r3, r2
 800483e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004840:	683b      	ldr	r3, [r7, #0]
 8004842:	68da      	ldr	r2, [r3, #12]
 8004844:	697b      	ldr	r3, [r7, #20]
 8004846:	005b      	lsls	r3, r3, #1
 8004848:	fa02 f303 	lsl.w	r3, r2, r3
 800484c:	693a      	ldr	r2, [r7, #16]
 800484e:	4313      	orrs	r3, r2
 8004850:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	693a      	ldr	r2, [r7, #16]
 8004856:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	685b      	ldr	r3, [r3, #4]
 800485c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800485e:	2201      	movs	r2, #1
 8004860:	697b      	ldr	r3, [r7, #20]
 8004862:	fa02 f303 	lsl.w	r3, r2, r3
 8004866:	43db      	mvns	r3, r3
 8004868:	693a      	ldr	r2, [r7, #16]
 800486a:	4013      	ands	r3, r2
 800486c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800486e:	683b      	ldr	r3, [r7, #0]
 8004870:	685b      	ldr	r3, [r3, #4]
 8004872:	091b      	lsrs	r3, r3, #4
 8004874:	f003 0201 	and.w	r2, r3, #1
 8004878:	697b      	ldr	r3, [r7, #20]
 800487a:	fa02 f303 	lsl.w	r3, r2, r3
 800487e:	693a      	ldr	r2, [r7, #16]
 8004880:	4313      	orrs	r3, r2
 8004882:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	693a      	ldr	r2, [r7, #16]
 8004888:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800488a:	683b      	ldr	r3, [r7, #0]
 800488c:	685b      	ldr	r3, [r3, #4]
 800488e:	f003 0303 	and.w	r3, r3, #3
 8004892:	2b03      	cmp	r3, #3
 8004894:	d017      	beq.n	80048c6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	68db      	ldr	r3, [r3, #12]
 800489a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800489c:	697b      	ldr	r3, [r7, #20]
 800489e:	005b      	lsls	r3, r3, #1
 80048a0:	2203      	movs	r2, #3
 80048a2:	fa02 f303 	lsl.w	r3, r2, r3
 80048a6:	43db      	mvns	r3, r3
 80048a8:	693a      	ldr	r2, [r7, #16]
 80048aa:	4013      	ands	r3, r2
 80048ac:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80048ae:	683b      	ldr	r3, [r7, #0]
 80048b0:	689a      	ldr	r2, [r3, #8]
 80048b2:	697b      	ldr	r3, [r7, #20]
 80048b4:	005b      	lsls	r3, r3, #1
 80048b6:	fa02 f303 	lsl.w	r3, r2, r3
 80048ba:	693a      	ldr	r2, [r7, #16]
 80048bc:	4313      	orrs	r3, r2
 80048be:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	693a      	ldr	r2, [r7, #16]
 80048c4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80048c6:	683b      	ldr	r3, [r7, #0]
 80048c8:	685b      	ldr	r3, [r3, #4]
 80048ca:	f003 0303 	and.w	r3, r3, #3
 80048ce:	2b02      	cmp	r3, #2
 80048d0:	d123      	bne.n	800491a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80048d2:	697b      	ldr	r3, [r7, #20]
 80048d4:	08da      	lsrs	r2, r3, #3
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	3208      	adds	r2, #8
 80048da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80048de:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80048e0:	697b      	ldr	r3, [r7, #20]
 80048e2:	f003 0307 	and.w	r3, r3, #7
 80048e6:	009b      	lsls	r3, r3, #2
 80048e8:	220f      	movs	r2, #15
 80048ea:	fa02 f303 	lsl.w	r3, r2, r3
 80048ee:	43db      	mvns	r3, r3
 80048f0:	693a      	ldr	r2, [r7, #16]
 80048f2:	4013      	ands	r3, r2
 80048f4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80048f6:	683b      	ldr	r3, [r7, #0]
 80048f8:	691a      	ldr	r2, [r3, #16]
 80048fa:	697b      	ldr	r3, [r7, #20]
 80048fc:	f003 0307 	and.w	r3, r3, #7
 8004900:	009b      	lsls	r3, r3, #2
 8004902:	fa02 f303 	lsl.w	r3, r2, r3
 8004906:	693a      	ldr	r2, [r7, #16]
 8004908:	4313      	orrs	r3, r2
 800490a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 800490c:	697b      	ldr	r3, [r7, #20]
 800490e:	08da      	lsrs	r2, r3, #3
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	3208      	adds	r2, #8
 8004914:	6939      	ldr	r1, [r7, #16]
 8004916:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004920:	697b      	ldr	r3, [r7, #20]
 8004922:	005b      	lsls	r3, r3, #1
 8004924:	2203      	movs	r2, #3
 8004926:	fa02 f303 	lsl.w	r3, r2, r3
 800492a:	43db      	mvns	r3, r3
 800492c:	693a      	ldr	r2, [r7, #16]
 800492e:	4013      	ands	r3, r2
 8004930:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004932:	683b      	ldr	r3, [r7, #0]
 8004934:	685b      	ldr	r3, [r3, #4]
 8004936:	f003 0203 	and.w	r2, r3, #3
 800493a:	697b      	ldr	r3, [r7, #20]
 800493c:	005b      	lsls	r3, r3, #1
 800493e:	fa02 f303 	lsl.w	r3, r2, r3
 8004942:	693a      	ldr	r2, [r7, #16]
 8004944:	4313      	orrs	r3, r2
 8004946:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	693a      	ldr	r2, [r7, #16]
 800494c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800494e:	683b      	ldr	r3, [r7, #0]
 8004950:	685b      	ldr	r3, [r3, #4]
 8004952:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004956:	2b00      	cmp	r3, #0
 8004958:	f000 80a6 	beq.w	8004aa8 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800495c:	4b5b      	ldr	r3, [pc, #364]	; (8004acc <HAL_GPIO_Init+0x2e4>)
 800495e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004960:	4a5a      	ldr	r2, [pc, #360]	; (8004acc <HAL_GPIO_Init+0x2e4>)
 8004962:	f043 0301 	orr.w	r3, r3, #1
 8004966:	6613      	str	r3, [r2, #96]	; 0x60
 8004968:	4b58      	ldr	r3, [pc, #352]	; (8004acc <HAL_GPIO_Init+0x2e4>)
 800496a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800496c:	f003 0301 	and.w	r3, r3, #1
 8004970:	60bb      	str	r3, [r7, #8]
 8004972:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004974:	4a56      	ldr	r2, [pc, #344]	; (8004ad0 <HAL_GPIO_Init+0x2e8>)
 8004976:	697b      	ldr	r3, [r7, #20]
 8004978:	089b      	lsrs	r3, r3, #2
 800497a:	3302      	adds	r3, #2
 800497c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004980:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8004982:	697b      	ldr	r3, [r7, #20]
 8004984:	f003 0303 	and.w	r3, r3, #3
 8004988:	009b      	lsls	r3, r3, #2
 800498a:	220f      	movs	r2, #15
 800498c:	fa02 f303 	lsl.w	r3, r2, r3
 8004990:	43db      	mvns	r3, r3
 8004992:	693a      	ldr	r2, [r7, #16]
 8004994:	4013      	ands	r3, r2
 8004996:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800499e:	d01f      	beq.n	80049e0 <HAL_GPIO_Init+0x1f8>
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	4a4c      	ldr	r2, [pc, #304]	; (8004ad4 <HAL_GPIO_Init+0x2ec>)
 80049a4:	4293      	cmp	r3, r2
 80049a6:	d019      	beq.n	80049dc <HAL_GPIO_Init+0x1f4>
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	4a4b      	ldr	r2, [pc, #300]	; (8004ad8 <HAL_GPIO_Init+0x2f0>)
 80049ac:	4293      	cmp	r3, r2
 80049ae:	d013      	beq.n	80049d8 <HAL_GPIO_Init+0x1f0>
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	4a4a      	ldr	r2, [pc, #296]	; (8004adc <HAL_GPIO_Init+0x2f4>)
 80049b4:	4293      	cmp	r3, r2
 80049b6:	d00d      	beq.n	80049d4 <HAL_GPIO_Init+0x1ec>
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	4a49      	ldr	r2, [pc, #292]	; (8004ae0 <HAL_GPIO_Init+0x2f8>)
 80049bc:	4293      	cmp	r3, r2
 80049be:	d007      	beq.n	80049d0 <HAL_GPIO_Init+0x1e8>
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	4a48      	ldr	r2, [pc, #288]	; (8004ae4 <HAL_GPIO_Init+0x2fc>)
 80049c4:	4293      	cmp	r3, r2
 80049c6:	d101      	bne.n	80049cc <HAL_GPIO_Init+0x1e4>
 80049c8:	2305      	movs	r3, #5
 80049ca:	e00a      	b.n	80049e2 <HAL_GPIO_Init+0x1fa>
 80049cc:	2306      	movs	r3, #6
 80049ce:	e008      	b.n	80049e2 <HAL_GPIO_Init+0x1fa>
 80049d0:	2304      	movs	r3, #4
 80049d2:	e006      	b.n	80049e2 <HAL_GPIO_Init+0x1fa>
 80049d4:	2303      	movs	r3, #3
 80049d6:	e004      	b.n	80049e2 <HAL_GPIO_Init+0x1fa>
 80049d8:	2302      	movs	r3, #2
 80049da:	e002      	b.n	80049e2 <HAL_GPIO_Init+0x1fa>
 80049dc:	2301      	movs	r3, #1
 80049de:	e000      	b.n	80049e2 <HAL_GPIO_Init+0x1fa>
 80049e0:	2300      	movs	r3, #0
 80049e2:	697a      	ldr	r2, [r7, #20]
 80049e4:	f002 0203 	and.w	r2, r2, #3
 80049e8:	0092      	lsls	r2, r2, #2
 80049ea:	4093      	lsls	r3, r2
 80049ec:	693a      	ldr	r2, [r7, #16]
 80049ee:	4313      	orrs	r3, r2
 80049f0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80049f2:	4937      	ldr	r1, [pc, #220]	; (8004ad0 <HAL_GPIO_Init+0x2e8>)
 80049f4:	697b      	ldr	r3, [r7, #20]
 80049f6:	089b      	lsrs	r3, r3, #2
 80049f8:	3302      	adds	r3, #2
 80049fa:	693a      	ldr	r2, [r7, #16]
 80049fc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004a00:	4b39      	ldr	r3, [pc, #228]	; (8004ae8 <HAL_GPIO_Init+0x300>)
 8004a02:	689b      	ldr	r3, [r3, #8]
 8004a04:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	43db      	mvns	r3, r3
 8004a0a:	693a      	ldr	r2, [r7, #16]
 8004a0c:	4013      	ands	r3, r2
 8004a0e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004a10:	683b      	ldr	r3, [r7, #0]
 8004a12:	685b      	ldr	r3, [r3, #4]
 8004a14:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d003      	beq.n	8004a24 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8004a1c:	693a      	ldr	r2, [r7, #16]
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	4313      	orrs	r3, r2
 8004a22:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8004a24:	4a30      	ldr	r2, [pc, #192]	; (8004ae8 <HAL_GPIO_Init+0x300>)
 8004a26:	693b      	ldr	r3, [r7, #16]
 8004a28:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8004a2a:	4b2f      	ldr	r3, [pc, #188]	; (8004ae8 <HAL_GPIO_Init+0x300>)
 8004a2c:	68db      	ldr	r3, [r3, #12]
 8004a2e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	43db      	mvns	r3, r3
 8004a34:	693a      	ldr	r2, [r7, #16]
 8004a36:	4013      	ands	r3, r2
 8004a38:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004a3a:	683b      	ldr	r3, [r7, #0]
 8004a3c:	685b      	ldr	r3, [r3, #4]
 8004a3e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d003      	beq.n	8004a4e <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8004a46:	693a      	ldr	r2, [r7, #16]
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	4313      	orrs	r3, r2
 8004a4c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8004a4e:	4a26      	ldr	r2, [pc, #152]	; (8004ae8 <HAL_GPIO_Init+0x300>)
 8004a50:	693b      	ldr	r3, [r7, #16]
 8004a52:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8004a54:	4b24      	ldr	r3, [pc, #144]	; (8004ae8 <HAL_GPIO_Init+0x300>)
 8004a56:	685b      	ldr	r3, [r3, #4]
 8004a58:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	43db      	mvns	r3, r3
 8004a5e:	693a      	ldr	r2, [r7, #16]
 8004a60:	4013      	ands	r3, r2
 8004a62:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004a64:	683b      	ldr	r3, [r7, #0]
 8004a66:	685b      	ldr	r3, [r3, #4]
 8004a68:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d003      	beq.n	8004a78 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8004a70:	693a      	ldr	r2, [r7, #16]
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	4313      	orrs	r3, r2
 8004a76:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8004a78:	4a1b      	ldr	r2, [pc, #108]	; (8004ae8 <HAL_GPIO_Init+0x300>)
 8004a7a:	693b      	ldr	r3, [r7, #16]
 8004a7c:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8004a7e:	4b1a      	ldr	r3, [pc, #104]	; (8004ae8 <HAL_GPIO_Init+0x300>)
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	43db      	mvns	r3, r3
 8004a88:	693a      	ldr	r2, [r7, #16]
 8004a8a:	4013      	ands	r3, r2
 8004a8c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004a8e:	683b      	ldr	r3, [r7, #0]
 8004a90:	685b      	ldr	r3, [r3, #4]
 8004a92:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d003      	beq.n	8004aa2 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8004a9a:	693a      	ldr	r2, [r7, #16]
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	4313      	orrs	r3, r2
 8004aa0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8004aa2:	4a11      	ldr	r2, [pc, #68]	; (8004ae8 <HAL_GPIO_Init+0x300>)
 8004aa4:	693b      	ldr	r3, [r7, #16]
 8004aa6:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8004aa8:	697b      	ldr	r3, [r7, #20]
 8004aaa:	3301      	adds	r3, #1
 8004aac:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8004aae:	683b      	ldr	r3, [r7, #0]
 8004ab0:	681a      	ldr	r2, [r3, #0]
 8004ab2:	697b      	ldr	r3, [r7, #20]
 8004ab4:	fa22 f303 	lsr.w	r3, r2, r3
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	f47f ae9d 	bne.w	80047f8 <HAL_GPIO_Init+0x10>
  }
}
 8004abe:	bf00      	nop
 8004ac0:	bf00      	nop
 8004ac2:	371c      	adds	r7, #28
 8004ac4:	46bd      	mov	sp, r7
 8004ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aca:	4770      	bx	lr
 8004acc:	40021000 	.word	0x40021000
 8004ad0:	40010000 	.word	0x40010000
 8004ad4:	48000400 	.word	0x48000400
 8004ad8:	48000800 	.word	0x48000800
 8004adc:	48000c00 	.word	0x48000c00
 8004ae0:	48001000 	.word	0x48001000
 8004ae4:	48001400 	.word	0x48001400
 8004ae8:	40010400 	.word	0x40010400

08004aec <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004aec:	b480      	push	{r7}
 8004aee:	b083      	sub	sp, #12
 8004af0:	af00      	add	r7, sp, #0
 8004af2:	6078      	str	r0, [r7, #4]
 8004af4:	460b      	mov	r3, r1
 8004af6:	807b      	strh	r3, [r7, #2]
 8004af8:	4613      	mov	r3, r2
 8004afa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004afc:	787b      	ldrb	r3, [r7, #1]
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d003      	beq.n	8004b0a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004b02:	887a      	ldrh	r2, [r7, #2]
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004b08:	e002      	b.n	8004b10 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004b0a:	887a      	ldrh	r2, [r7, #2]
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004b10:	bf00      	nop
 8004b12:	370c      	adds	r7, #12
 8004b14:	46bd      	mov	sp, r7
 8004b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b1a:	4770      	bx	lr

08004b1c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004b1c:	b580      	push	{r7, lr}
 8004b1e:	b082      	sub	sp, #8
 8004b20:	af00      	add	r7, sp, #0
 8004b22:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d101      	bne.n	8004b2e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004b2a:	2301      	movs	r3, #1
 8004b2c:	e081      	b.n	8004c32 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004b34:	b2db      	uxtb	r3, r3
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d106      	bne.n	8004b48 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	2200      	movs	r2, #0
 8004b3e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8004b42:	6878      	ldr	r0, [r7, #4]
 8004b44:	f7fc ffac 	bl	8001aa0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	2224      	movs	r2, #36	; 0x24
 8004b4c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	681a      	ldr	r2, [r3, #0]
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	f022 0201 	bic.w	r2, r2, #1
 8004b5e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	685a      	ldr	r2, [r3, #4]
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004b6c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	689a      	ldr	r2, [r3, #8]
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004b7c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	68db      	ldr	r3, [r3, #12]
 8004b82:	2b01      	cmp	r3, #1
 8004b84:	d107      	bne.n	8004b96 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	689a      	ldr	r2, [r3, #8]
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004b92:	609a      	str	r2, [r3, #8]
 8004b94:	e006      	b.n	8004ba4 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	689a      	ldr	r2, [r3, #8]
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8004ba2:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	68db      	ldr	r3, [r3, #12]
 8004ba8:	2b02      	cmp	r3, #2
 8004baa:	d104      	bne.n	8004bb6 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004bb4:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	685b      	ldr	r3, [r3, #4]
 8004bbc:	687a      	ldr	r2, [r7, #4]
 8004bbe:	6812      	ldr	r2, [r2, #0]
 8004bc0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004bc4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004bc8:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	68da      	ldr	r2, [r3, #12]
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004bd8:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	691a      	ldr	r2, [r3, #16]
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	695b      	ldr	r3, [r3, #20]
 8004be2:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	699b      	ldr	r3, [r3, #24]
 8004bea:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	430a      	orrs	r2, r1
 8004bf2:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	69d9      	ldr	r1, [r3, #28]
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	6a1a      	ldr	r2, [r3, #32]
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	430a      	orrs	r2, r1
 8004c02:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	681a      	ldr	r2, [r3, #0]
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	f042 0201 	orr.w	r2, r2, #1
 8004c12:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	2200      	movs	r2, #0
 8004c18:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	2220      	movs	r2, #32
 8004c1e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	2200      	movs	r2, #0
 8004c26:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	2200      	movs	r2, #0
 8004c2c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8004c30:	2300      	movs	r3, #0
}
 8004c32:	4618      	mov	r0, r3
 8004c34:	3708      	adds	r7, #8
 8004c36:	46bd      	mov	sp, r7
 8004c38:	bd80      	pop	{r7, pc}
	...

08004c3c <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004c3c:	b580      	push	{r7, lr}
 8004c3e:	b088      	sub	sp, #32
 8004c40:	af02      	add	r7, sp, #8
 8004c42:	60f8      	str	r0, [r7, #12]
 8004c44:	4608      	mov	r0, r1
 8004c46:	4611      	mov	r1, r2
 8004c48:	461a      	mov	r2, r3
 8004c4a:	4603      	mov	r3, r0
 8004c4c:	817b      	strh	r3, [r7, #10]
 8004c4e:	460b      	mov	r3, r1
 8004c50:	813b      	strh	r3, [r7, #8]
 8004c52:	4613      	mov	r3, r2
 8004c54:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004c5c:	b2db      	uxtb	r3, r3
 8004c5e:	2b20      	cmp	r3, #32
 8004c60:	f040 80f9 	bne.w	8004e56 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004c64:	6a3b      	ldr	r3, [r7, #32]
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d002      	beq.n	8004c70 <HAL_I2C_Mem_Write+0x34>
 8004c6a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d105      	bne.n	8004c7c <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004c76:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8004c78:	2301      	movs	r3, #1
 8004c7a:	e0ed      	b.n	8004e58 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004c82:	2b01      	cmp	r3, #1
 8004c84:	d101      	bne.n	8004c8a <HAL_I2C_Mem_Write+0x4e>
 8004c86:	2302      	movs	r3, #2
 8004c88:	e0e6      	b.n	8004e58 <HAL_I2C_Mem_Write+0x21c>
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	2201      	movs	r2, #1
 8004c8e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004c92:	f7fd fbf1 	bl	8002478 <HAL_GetTick>
 8004c96:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004c98:	697b      	ldr	r3, [r7, #20]
 8004c9a:	9300      	str	r3, [sp, #0]
 8004c9c:	2319      	movs	r3, #25
 8004c9e:	2201      	movs	r2, #1
 8004ca0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004ca4:	68f8      	ldr	r0, [r7, #12]
 8004ca6:	f000 f955 	bl	8004f54 <I2C_WaitOnFlagUntilTimeout>
 8004caa:	4603      	mov	r3, r0
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d001      	beq.n	8004cb4 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8004cb0:	2301      	movs	r3, #1
 8004cb2:	e0d1      	b.n	8004e58 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	2221      	movs	r2, #33	; 0x21
 8004cb8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	2240      	movs	r2, #64	; 0x40
 8004cc0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	2200      	movs	r2, #0
 8004cc8:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	6a3a      	ldr	r2, [r7, #32]
 8004cce:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8004cd4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	2200      	movs	r2, #0
 8004cda:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004cdc:	88f8      	ldrh	r0, [r7, #6]
 8004cde:	893a      	ldrh	r2, [r7, #8]
 8004ce0:	8979      	ldrh	r1, [r7, #10]
 8004ce2:	697b      	ldr	r3, [r7, #20]
 8004ce4:	9301      	str	r3, [sp, #4]
 8004ce6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ce8:	9300      	str	r3, [sp, #0]
 8004cea:	4603      	mov	r3, r0
 8004cec:	68f8      	ldr	r0, [r7, #12]
 8004cee:	f000 f8b9 	bl	8004e64 <I2C_RequestMemoryWrite>
 8004cf2:	4603      	mov	r3, r0
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d005      	beq.n	8004d04 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	2200      	movs	r2, #0
 8004cfc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8004d00:	2301      	movs	r3, #1
 8004d02:	e0a9      	b.n	8004e58 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d08:	b29b      	uxth	r3, r3
 8004d0a:	2bff      	cmp	r3, #255	; 0xff
 8004d0c:	d90e      	bls.n	8004d2c <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	22ff      	movs	r2, #255	; 0xff
 8004d12:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d18:	b2da      	uxtb	r2, r3
 8004d1a:	8979      	ldrh	r1, [r7, #10]
 8004d1c:	2300      	movs	r3, #0
 8004d1e:	9300      	str	r3, [sp, #0]
 8004d20:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004d24:	68f8      	ldr	r0, [r7, #12]
 8004d26:	f000 fabd 	bl	80052a4 <I2C_TransferConfig>
 8004d2a:	e00f      	b.n	8004d4c <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d30:	b29a      	uxth	r2, r3
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d3a:	b2da      	uxtb	r2, r3
 8004d3c:	8979      	ldrh	r1, [r7, #10]
 8004d3e:	2300      	movs	r3, #0
 8004d40:	9300      	str	r3, [sp, #0]
 8004d42:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004d46:	68f8      	ldr	r0, [r7, #12]
 8004d48:	f000 faac 	bl	80052a4 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004d4c:	697a      	ldr	r2, [r7, #20]
 8004d4e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004d50:	68f8      	ldr	r0, [r7, #12]
 8004d52:	f000 f93f 	bl	8004fd4 <I2C_WaitOnTXISFlagUntilTimeout>
 8004d56:	4603      	mov	r3, r0
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d001      	beq.n	8004d60 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8004d5c:	2301      	movs	r3, #1
 8004d5e:	e07b      	b.n	8004e58 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d64:	781a      	ldrb	r2, [r3, #0]
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d70:	1c5a      	adds	r2, r3, #1
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d7a:	b29b      	uxth	r3, r3
 8004d7c:	3b01      	subs	r3, #1
 8004d7e:	b29a      	uxth	r2, r3
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d88:	3b01      	subs	r3, #1
 8004d8a:	b29a      	uxth	r2, r3
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d94:	b29b      	uxth	r3, r3
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d034      	beq.n	8004e04 <HAL_I2C_Mem_Write+0x1c8>
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d130      	bne.n	8004e04 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004da2:	697b      	ldr	r3, [r7, #20]
 8004da4:	9300      	str	r3, [sp, #0]
 8004da6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004da8:	2200      	movs	r2, #0
 8004daa:	2180      	movs	r1, #128	; 0x80
 8004dac:	68f8      	ldr	r0, [r7, #12]
 8004dae:	f000 f8d1 	bl	8004f54 <I2C_WaitOnFlagUntilTimeout>
 8004db2:	4603      	mov	r3, r0
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d001      	beq.n	8004dbc <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8004db8:	2301      	movs	r3, #1
 8004dba:	e04d      	b.n	8004e58 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004dc0:	b29b      	uxth	r3, r3
 8004dc2:	2bff      	cmp	r3, #255	; 0xff
 8004dc4:	d90e      	bls.n	8004de4 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	22ff      	movs	r2, #255	; 0xff
 8004dca:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004dd0:	b2da      	uxtb	r2, r3
 8004dd2:	8979      	ldrh	r1, [r7, #10]
 8004dd4:	2300      	movs	r3, #0
 8004dd6:	9300      	str	r3, [sp, #0]
 8004dd8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004ddc:	68f8      	ldr	r0, [r7, #12]
 8004dde:	f000 fa61 	bl	80052a4 <I2C_TransferConfig>
 8004de2:	e00f      	b.n	8004e04 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004de8:	b29a      	uxth	r2, r3
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004df2:	b2da      	uxtb	r2, r3
 8004df4:	8979      	ldrh	r1, [r7, #10]
 8004df6:	2300      	movs	r3, #0
 8004df8:	9300      	str	r3, [sp, #0]
 8004dfa:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004dfe:	68f8      	ldr	r0, [r7, #12]
 8004e00:	f000 fa50 	bl	80052a4 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e08:	b29b      	uxth	r3, r3
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d19e      	bne.n	8004d4c <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004e0e:	697a      	ldr	r2, [r7, #20]
 8004e10:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004e12:	68f8      	ldr	r0, [r7, #12]
 8004e14:	f000 f91e 	bl	8005054 <I2C_WaitOnSTOPFlagUntilTimeout>
 8004e18:	4603      	mov	r3, r0
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d001      	beq.n	8004e22 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8004e1e:	2301      	movs	r3, #1
 8004e20:	e01a      	b.n	8004e58 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	2220      	movs	r2, #32
 8004e28:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	6859      	ldr	r1, [r3, #4]
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	681a      	ldr	r2, [r3, #0]
 8004e34:	4b0a      	ldr	r3, [pc, #40]	; (8004e60 <HAL_I2C_Mem_Write+0x224>)
 8004e36:	400b      	ands	r3, r1
 8004e38:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	2220      	movs	r2, #32
 8004e3e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	2200      	movs	r2, #0
 8004e46:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	2200      	movs	r2, #0
 8004e4e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004e52:	2300      	movs	r3, #0
 8004e54:	e000      	b.n	8004e58 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8004e56:	2302      	movs	r3, #2
  }
}
 8004e58:	4618      	mov	r0, r3
 8004e5a:	3718      	adds	r7, #24
 8004e5c:	46bd      	mov	sp, r7
 8004e5e:	bd80      	pop	{r7, pc}
 8004e60:	fe00e800 	.word	0xfe00e800

08004e64 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8004e64:	b580      	push	{r7, lr}
 8004e66:	b086      	sub	sp, #24
 8004e68:	af02      	add	r7, sp, #8
 8004e6a:	60f8      	str	r0, [r7, #12]
 8004e6c:	4608      	mov	r0, r1
 8004e6e:	4611      	mov	r1, r2
 8004e70:	461a      	mov	r2, r3
 8004e72:	4603      	mov	r3, r0
 8004e74:	817b      	strh	r3, [r7, #10]
 8004e76:	460b      	mov	r3, r1
 8004e78:	813b      	strh	r3, [r7, #8]
 8004e7a:	4613      	mov	r3, r2
 8004e7c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8004e7e:	88fb      	ldrh	r3, [r7, #6]
 8004e80:	b2da      	uxtb	r2, r3
 8004e82:	8979      	ldrh	r1, [r7, #10]
 8004e84:	4b20      	ldr	r3, [pc, #128]	; (8004f08 <I2C_RequestMemoryWrite+0xa4>)
 8004e86:	9300      	str	r3, [sp, #0]
 8004e88:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004e8c:	68f8      	ldr	r0, [r7, #12]
 8004e8e:	f000 fa09 	bl	80052a4 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004e92:	69fa      	ldr	r2, [r7, #28]
 8004e94:	69b9      	ldr	r1, [r7, #24]
 8004e96:	68f8      	ldr	r0, [r7, #12]
 8004e98:	f000 f89c 	bl	8004fd4 <I2C_WaitOnTXISFlagUntilTimeout>
 8004e9c:	4603      	mov	r3, r0
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d001      	beq.n	8004ea6 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8004ea2:	2301      	movs	r3, #1
 8004ea4:	e02c      	b.n	8004f00 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004ea6:	88fb      	ldrh	r3, [r7, #6]
 8004ea8:	2b01      	cmp	r3, #1
 8004eaa:	d105      	bne.n	8004eb8 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004eac:	893b      	ldrh	r3, [r7, #8]
 8004eae:	b2da      	uxtb	r2, r3
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	629a      	str	r2, [r3, #40]	; 0x28
 8004eb6:	e015      	b.n	8004ee4 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8004eb8:	893b      	ldrh	r3, [r7, #8]
 8004eba:	0a1b      	lsrs	r3, r3, #8
 8004ebc:	b29b      	uxth	r3, r3
 8004ebe:	b2da      	uxtb	r2, r3
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004ec6:	69fa      	ldr	r2, [r7, #28]
 8004ec8:	69b9      	ldr	r1, [r7, #24]
 8004eca:	68f8      	ldr	r0, [r7, #12]
 8004ecc:	f000 f882 	bl	8004fd4 <I2C_WaitOnTXISFlagUntilTimeout>
 8004ed0:	4603      	mov	r3, r0
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d001      	beq.n	8004eda <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8004ed6:	2301      	movs	r3, #1
 8004ed8:	e012      	b.n	8004f00 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004eda:	893b      	ldrh	r3, [r7, #8]
 8004edc:	b2da      	uxtb	r2, r3
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8004ee4:	69fb      	ldr	r3, [r7, #28]
 8004ee6:	9300      	str	r3, [sp, #0]
 8004ee8:	69bb      	ldr	r3, [r7, #24]
 8004eea:	2200      	movs	r2, #0
 8004eec:	2180      	movs	r1, #128	; 0x80
 8004eee:	68f8      	ldr	r0, [r7, #12]
 8004ef0:	f000 f830 	bl	8004f54 <I2C_WaitOnFlagUntilTimeout>
 8004ef4:	4603      	mov	r3, r0
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d001      	beq.n	8004efe <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8004efa:	2301      	movs	r3, #1
 8004efc:	e000      	b.n	8004f00 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8004efe:	2300      	movs	r3, #0
}
 8004f00:	4618      	mov	r0, r3
 8004f02:	3710      	adds	r7, #16
 8004f04:	46bd      	mov	sp, r7
 8004f06:	bd80      	pop	{r7, pc}
 8004f08:	80002000 	.word	0x80002000

08004f0c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8004f0c:	b480      	push	{r7}
 8004f0e:	b083      	sub	sp, #12
 8004f10:	af00      	add	r7, sp, #0
 8004f12:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	699b      	ldr	r3, [r3, #24]
 8004f1a:	f003 0302 	and.w	r3, r3, #2
 8004f1e:	2b02      	cmp	r3, #2
 8004f20:	d103      	bne.n	8004f2a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	2200      	movs	r2, #0
 8004f28:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	699b      	ldr	r3, [r3, #24]
 8004f30:	f003 0301 	and.w	r3, r3, #1
 8004f34:	2b01      	cmp	r3, #1
 8004f36:	d007      	beq.n	8004f48 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	699a      	ldr	r2, [r3, #24]
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	f042 0201 	orr.w	r2, r2, #1
 8004f46:	619a      	str	r2, [r3, #24]
  }
}
 8004f48:	bf00      	nop
 8004f4a:	370c      	adds	r7, #12
 8004f4c:	46bd      	mov	sp, r7
 8004f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f52:	4770      	bx	lr

08004f54 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8004f54:	b580      	push	{r7, lr}
 8004f56:	b084      	sub	sp, #16
 8004f58:	af00      	add	r7, sp, #0
 8004f5a:	60f8      	str	r0, [r7, #12]
 8004f5c:	60b9      	str	r1, [r7, #8]
 8004f5e:	603b      	str	r3, [r7, #0]
 8004f60:	4613      	mov	r3, r2
 8004f62:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004f64:	e022      	b.n	8004fac <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004f66:	683b      	ldr	r3, [r7, #0]
 8004f68:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004f6c:	d01e      	beq.n	8004fac <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004f6e:	f7fd fa83 	bl	8002478 <HAL_GetTick>
 8004f72:	4602      	mov	r2, r0
 8004f74:	69bb      	ldr	r3, [r7, #24]
 8004f76:	1ad3      	subs	r3, r2, r3
 8004f78:	683a      	ldr	r2, [r7, #0]
 8004f7a:	429a      	cmp	r2, r3
 8004f7c:	d302      	bcc.n	8004f84 <I2C_WaitOnFlagUntilTimeout+0x30>
 8004f7e:	683b      	ldr	r3, [r7, #0]
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	d113      	bne.n	8004fac <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f88:	f043 0220 	orr.w	r2, r3, #32
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	2220      	movs	r2, #32
 8004f94:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	2200      	movs	r2, #0
 8004f9c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	2200      	movs	r2, #0
 8004fa4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8004fa8:	2301      	movs	r3, #1
 8004faa:	e00f      	b.n	8004fcc <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	699a      	ldr	r2, [r3, #24]
 8004fb2:	68bb      	ldr	r3, [r7, #8]
 8004fb4:	4013      	ands	r3, r2
 8004fb6:	68ba      	ldr	r2, [r7, #8]
 8004fb8:	429a      	cmp	r2, r3
 8004fba:	bf0c      	ite	eq
 8004fbc:	2301      	moveq	r3, #1
 8004fbe:	2300      	movne	r3, #0
 8004fc0:	b2db      	uxtb	r3, r3
 8004fc2:	461a      	mov	r2, r3
 8004fc4:	79fb      	ldrb	r3, [r7, #7]
 8004fc6:	429a      	cmp	r2, r3
 8004fc8:	d0cd      	beq.n	8004f66 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004fca:	2300      	movs	r3, #0
}
 8004fcc:	4618      	mov	r0, r3
 8004fce:	3710      	adds	r7, #16
 8004fd0:	46bd      	mov	sp, r7
 8004fd2:	bd80      	pop	{r7, pc}

08004fd4 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004fd4:	b580      	push	{r7, lr}
 8004fd6:	b084      	sub	sp, #16
 8004fd8:	af00      	add	r7, sp, #0
 8004fda:	60f8      	str	r0, [r7, #12]
 8004fdc:	60b9      	str	r1, [r7, #8]
 8004fde:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004fe0:	e02c      	b.n	800503c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004fe2:	687a      	ldr	r2, [r7, #4]
 8004fe4:	68b9      	ldr	r1, [r7, #8]
 8004fe6:	68f8      	ldr	r0, [r7, #12]
 8004fe8:	f000 f870 	bl	80050cc <I2C_IsErrorOccurred>
 8004fec:	4603      	mov	r3, r0
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d001      	beq.n	8004ff6 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004ff2:	2301      	movs	r3, #1
 8004ff4:	e02a      	b.n	800504c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004ff6:	68bb      	ldr	r3, [r7, #8]
 8004ff8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004ffc:	d01e      	beq.n	800503c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004ffe:	f7fd fa3b 	bl	8002478 <HAL_GetTick>
 8005002:	4602      	mov	r2, r0
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	1ad3      	subs	r3, r2, r3
 8005008:	68ba      	ldr	r2, [r7, #8]
 800500a:	429a      	cmp	r2, r3
 800500c:	d302      	bcc.n	8005014 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800500e:	68bb      	ldr	r3, [r7, #8]
 8005010:	2b00      	cmp	r3, #0
 8005012:	d113      	bne.n	800503c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005018:	f043 0220 	orr.w	r2, r3, #32
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	2220      	movs	r2, #32
 8005024:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	2200      	movs	r2, #0
 800502c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	2200      	movs	r2, #0
 8005034:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8005038:	2301      	movs	r3, #1
 800503a:	e007      	b.n	800504c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	699b      	ldr	r3, [r3, #24]
 8005042:	f003 0302 	and.w	r3, r3, #2
 8005046:	2b02      	cmp	r3, #2
 8005048:	d1cb      	bne.n	8004fe2 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800504a:	2300      	movs	r3, #0
}
 800504c:	4618      	mov	r0, r3
 800504e:	3710      	adds	r7, #16
 8005050:	46bd      	mov	sp, r7
 8005052:	bd80      	pop	{r7, pc}

08005054 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8005054:	b580      	push	{r7, lr}
 8005056:	b084      	sub	sp, #16
 8005058:	af00      	add	r7, sp, #0
 800505a:	60f8      	str	r0, [r7, #12]
 800505c:	60b9      	str	r1, [r7, #8]
 800505e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005060:	e028      	b.n	80050b4 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8005062:	687a      	ldr	r2, [r7, #4]
 8005064:	68b9      	ldr	r1, [r7, #8]
 8005066:	68f8      	ldr	r0, [r7, #12]
 8005068:	f000 f830 	bl	80050cc <I2C_IsErrorOccurred>
 800506c:	4603      	mov	r3, r0
 800506e:	2b00      	cmp	r3, #0
 8005070:	d001      	beq.n	8005076 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005072:	2301      	movs	r3, #1
 8005074:	e026      	b.n	80050c4 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005076:	f7fd f9ff 	bl	8002478 <HAL_GetTick>
 800507a:	4602      	mov	r2, r0
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	1ad3      	subs	r3, r2, r3
 8005080:	68ba      	ldr	r2, [r7, #8]
 8005082:	429a      	cmp	r2, r3
 8005084:	d302      	bcc.n	800508c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8005086:	68bb      	ldr	r3, [r7, #8]
 8005088:	2b00      	cmp	r3, #0
 800508a:	d113      	bne.n	80050b4 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005090:	f043 0220 	orr.w	r2, r3, #32
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	2220      	movs	r2, #32
 800509c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	2200      	movs	r2, #0
 80050a4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	2200      	movs	r2, #0
 80050ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80050b0:	2301      	movs	r3, #1
 80050b2:	e007      	b.n	80050c4 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	699b      	ldr	r3, [r3, #24]
 80050ba:	f003 0320 	and.w	r3, r3, #32
 80050be:	2b20      	cmp	r3, #32
 80050c0:	d1cf      	bne.n	8005062 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80050c2:	2300      	movs	r3, #0
}
 80050c4:	4618      	mov	r0, r3
 80050c6:	3710      	adds	r7, #16
 80050c8:	46bd      	mov	sp, r7
 80050ca:	bd80      	pop	{r7, pc}

080050cc <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80050cc:	b580      	push	{r7, lr}
 80050ce:	b08a      	sub	sp, #40	; 0x28
 80050d0:	af00      	add	r7, sp, #0
 80050d2:	60f8      	str	r0, [r7, #12]
 80050d4:	60b9      	str	r1, [r7, #8]
 80050d6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80050d8:	2300      	movs	r3, #0
 80050da:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	699b      	ldr	r3, [r3, #24]
 80050e4:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80050e6:	2300      	movs	r3, #0
 80050e8:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80050ee:	69bb      	ldr	r3, [r7, #24]
 80050f0:	f003 0310 	and.w	r3, r3, #16
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	d075      	beq.n	80051e4 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	2210      	movs	r2, #16
 80050fe:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8005100:	e056      	b.n	80051b0 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8005102:	68bb      	ldr	r3, [r7, #8]
 8005104:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005108:	d052      	beq.n	80051b0 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800510a:	f7fd f9b5 	bl	8002478 <HAL_GetTick>
 800510e:	4602      	mov	r2, r0
 8005110:	69fb      	ldr	r3, [r7, #28]
 8005112:	1ad3      	subs	r3, r2, r3
 8005114:	68ba      	ldr	r2, [r7, #8]
 8005116:	429a      	cmp	r2, r3
 8005118:	d302      	bcc.n	8005120 <I2C_IsErrorOccurred+0x54>
 800511a:	68bb      	ldr	r3, [r7, #8]
 800511c:	2b00      	cmp	r3, #0
 800511e:	d147      	bne.n	80051b0 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	685b      	ldr	r3, [r3, #4]
 8005126:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800512a:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005132:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	699b      	ldr	r3, [r3, #24]
 800513a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800513e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005142:	d12e      	bne.n	80051a2 <I2C_IsErrorOccurred+0xd6>
 8005144:	697b      	ldr	r3, [r7, #20]
 8005146:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800514a:	d02a      	beq.n	80051a2 <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 800514c:	7cfb      	ldrb	r3, [r7, #19]
 800514e:	2b20      	cmp	r3, #32
 8005150:	d027      	beq.n	80051a2 <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	685a      	ldr	r2, [r3, #4]
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005160:	605a      	str	r2, [r3, #4]
            
            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8005162:	f7fd f989 	bl	8002478 <HAL_GetTick>
 8005166:	61f8      	str	r0, [r7, #28]
          }
          
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005168:	e01b      	b.n	80051a2 <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800516a:	f7fd f985 	bl	8002478 <HAL_GetTick>
 800516e:	4602      	mov	r2, r0
 8005170:	69fb      	ldr	r3, [r7, #28]
 8005172:	1ad3      	subs	r3, r2, r3
 8005174:	2b19      	cmp	r3, #25
 8005176:	d914      	bls.n	80051a2 <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800517c:	f043 0220 	orr.w	r2, r3, #32
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	2220      	movs	r2, #32
 8005188:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	2200      	movs	r2, #0
 8005190:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
              
              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	2200      	movs	r2, #0
 8005198:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
              
              status = HAL_ERROR;
 800519c:	2301      	movs	r3, #1
 800519e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	699b      	ldr	r3, [r3, #24]
 80051a8:	f003 0320 	and.w	r3, r3, #32
 80051ac:	2b20      	cmp	r3, #32
 80051ae:	d1dc      	bne.n	800516a <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	699b      	ldr	r3, [r3, #24]
 80051b6:	f003 0320 	and.w	r3, r3, #32
 80051ba:	2b20      	cmp	r3, #32
 80051bc:	d003      	beq.n	80051c6 <I2C_IsErrorOccurred+0xfa>
 80051be:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d09d      	beq.n	8005102 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80051c6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d103      	bne.n	80051d6 <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	2220      	movs	r2, #32
 80051d4:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80051d6:	6a3b      	ldr	r3, [r7, #32]
 80051d8:	f043 0304 	orr.w	r3, r3, #4
 80051dc:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80051de:	2301      	movs	r3, #1
 80051e0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	699b      	ldr	r3, [r3, #24]
 80051ea:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80051ec:	69bb      	ldr	r3, [r7, #24]
 80051ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d00b      	beq.n	800520e <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80051f6:	6a3b      	ldr	r3, [r7, #32]
 80051f8:	f043 0301 	orr.w	r3, r3, #1
 80051fc:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005206:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005208:	2301      	movs	r3, #1
 800520a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800520e:	69bb      	ldr	r3, [r7, #24]
 8005210:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005214:	2b00      	cmp	r3, #0
 8005216:	d00b      	beq.n	8005230 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8005218:	6a3b      	ldr	r3, [r7, #32]
 800521a:	f043 0308 	orr.w	r3, r3, #8
 800521e:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005228:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800522a:	2301      	movs	r3, #1
 800522c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8005230:	69bb      	ldr	r3, [r7, #24]
 8005232:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005236:	2b00      	cmp	r3, #0
 8005238:	d00b      	beq.n	8005252 <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800523a:	6a3b      	ldr	r3, [r7, #32]
 800523c:	f043 0302 	orr.w	r3, r3, #2
 8005240:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	f44f 7200 	mov.w	r2, #512	; 0x200
 800524a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800524c:	2301      	movs	r3, #1
 800524e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8005252:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005256:	2b00      	cmp	r3, #0
 8005258:	d01c      	beq.n	8005294 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800525a:	68f8      	ldr	r0, [r7, #12]
 800525c:	f7ff fe56 	bl	8004f0c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	6859      	ldr	r1, [r3, #4]
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	681a      	ldr	r2, [r3, #0]
 800526a:	4b0d      	ldr	r3, [pc, #52]	; (80052a0 <I2C_IsErrorOccurred+0x1d4>)
 800526c:	400b      	ands	r3, r1
 800526e:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005274:	6a3b      	ldr	r3, [r7, #32]
 8005276:	431a      	orrs	r2, r3
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	2220      	movs	r2, #32
 8005280:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	2200      	movs	r2, #0
 8005288:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	2200      	movs	r2, #0
 8005290:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8005294:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8005298:	4618      	mov	r0, r3
 800529a:	3728      	adds	r7, #40	; 0x28
 800529c:	46bd      	mov	sp, r7
 800529e:	bd80      	pop	{r7, pc}
 80052a0:	fe00e800 	.word	0xfe00e800

080052a4 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80052a4:	b480      	push	{r7}
 80052a6:	b087      	sub	sp, #28
 80052a8:	af00      	add	r7, sp, #0
 80052aa:	60f8      	str	r0, [r7, #12]
 80052ac:	607b      	str	r3, [r7, #4]
 80052ae:	460b      	mov	r3, r1
 80052b0:	817b      	strh	r3, [r7, #10]
 80052b2:	4613      	mov	r3, r2
 80052b4:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80052b6:	897b      	ldrh	r3, [r7, #10]
 80052b8:	f3c3 0209 	ubfx	r2, r3, #0, #10
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80052bc:	7a7b      	ldrb	r3, [r7, #9]
 80052be:	041b      	lsls	r3, r3, #16
 80052c0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80052c4:	431a      	orrs	r2, r3
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80052ca:	6a3b      	ldr	r3, [r7, #32]
 80052cc:	4313      	orrs	r3, r2
 80052ce:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80052d2:	617b      	str	r3, [r7, #20]
                              (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	685a      	ldr	r2, [r3, #4]
 80052da:	6a3b      	ldr	r3, [r7, #32]
 80052dc:	0d5b      	lsrs	r3, r3, #21
 80052de:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80052e2:	4b08      	ldr	r3, [pc, #32]	; (8005304 <I2C_TransferConfig+0x60>)
 80052e4:	430b      	orrs	r3, r1
 80052e6:	43db      	mvns	r3, r3
 80052e8:	ea02 0103 	and.w	r1, r2, r3
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	697a      	ldr	r2, [r7, #20]
 80052f2:	430a      	orrs	r2, r1
 80052f4:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
                I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80052f6:	bf00      	nop
 80052f8:	371c      	adds	r7, #28
 80052fa:	46bd      	mov	sp, r7
 80052fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005300:	4770      	bx	lr
 8005302:	bf00      	nop
 8005304:	03ff63ff 	.word	0x03ff63ff

08005308 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8005308:	b480      	push	{r7}
 800530a:	b083      	sub	sp, #12
 800530c:	af00      	add	r7, sp, #0
 800530e:	6078      	str	r0, [r7, #4]
 8005310:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005318:	b2db      	uxtb	r3, r3
 800531a:	2b20      	cmp	r3, #32
 800531c:	d138      	bne.n	8005390 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005324:	2b01      	cmp	r3, #1
 8005326:	d101      	bne.n	800532c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8005328:	2302      	movs	r3, #2
 800532a:	e032      	b.n	8005392 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	2201      	movs	r2, #1
 8005330:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	2224      	movs	r2, #36	; 0x24
 8005338:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	681a      	ldr	r2, [r3, #0]
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	f022 0201 	bic.w	r2, r2, #1
 800534a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	681a      	ldr	r2, [r3, #0]
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800535a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	6819      	ldr	r1, [r3, #0]
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	683a      	ldr	r2, [r7, #0]
 8005368:	430a      	orrs	r2, r1
 800536a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	681a      	ldr	r2, [r3, #0]
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	f042 0201 	orr.w	r2, r2, #1
 800537a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	2220      	movs	r2, #32
 8005380:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	2200      	movs	r2, #0
 8005388:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800538c:	2300      	movs	r3, #0
 800538e:	e000      	b.n	8005392 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8005390:	2302      	movs	r3, #2
  }
}
 8005392:	4618      	mov	r0, r3
 8005394:	370c      	adds	r7, #12
 8005396:	46bd      	mov	sp, r7
 8005398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800539c:	4770      	bx	lr

0800539e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800539e:	b480      	push	{r7}
 80053a0:	b085      	sub	sp, #20
 80053a2:	af00      	add	r7, sp, #0
 80053a4:	6078      	str	r0, [r7, #4]
 80053a6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80053ae:	b2db      	uxtb	r3, r3
 80053b0:	2b20      	cmp	r3, #32
 80053b2:	d139      	bne.n	8005428 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80053ba:	2b01      	cmp	r3, #1
 80053bc:	d101      	bne.n	80053c2 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80053be:	2302      	movs	r3, #2
 80053c0:	e033      	b.n	800542a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	2201      	movs	r2, #1
 80053c6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	2224      	movs	r2, #36	; 0x24
 80053ce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	681a      	ldr	r2, [r3, #0]
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	f022 0201 	bic.w	r2, r2, #1
 80053e0:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80053f0:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80053f2:	683b      	ldr	r3, [r7, #0]
 80053f4:	021b      	lsls	r3, r3, #8
 80053f6:	68fa      	ldr	r2, [r7, #12]
 80053f8:	4313      	orrs	r3, r2
 80053fa:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	68fa      	ldr	r2, [r7, #12]
 8005402:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	681a      	ldr	r2, [r3, #0]
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	f042 0201 	orr.w	r2, r2, #1
 8005412:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	2220      	movs	r2, #32
 8005418:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	2200      	movs	r2, #0
 8005420:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005424:	2300      	movs	r3, #0
 8005426:	e000      	b.n	800542a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8005428:	2302      	movs	r3, #2
  }
}
 800542a:	4618      	mov	r0, r3
 800542c:	3714      	adds	r7, #20
 800542e:	46bd      	mov	sp, r7
 8005430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005434:	4770      	bx	lr
	...

08005438 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8005438:	b480      	push	{r7}
 800543a:	b085      	sub	sp, #20
 800543c:	af00      	add	r7, sp, #0
 800543e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	2b00      	cmp	r3, #0
 8005444:	d141      	bne.n	80054ca <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8005446:	4b4b      	ldr	r3, [pc, #300]	; (8005574 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800544e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005452:	d131      	bne.n	80054b8 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005454:	4b47      	ldr	r3, [pc, #284]	; (8005574 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005456:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800545a:	4a46      	ldr	r2, [pc, #280]	; (8005574 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800545c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005460:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8005464:	4b43      	ldr	r3, [pc, #268]	; (8005574 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800546c:	4a41      	ldr	r2, [pc, #260]	; (8005574 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800546e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005472:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8005474:	4b40      	ldr	r3, [pc, #256]	; (8005578 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	2232      	movs	r2, #50	; 0x32
 800547a:	fb02 f303 	mul.w	r3, r2, r3
 800547e:	4a3f      	ldr	r2, [pc, #252]	; (800557c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8005480:	fba2 2303 	umull	r2, r3, r2, r3
 8005484:	0c9b      	lsrs	r3, r3, #18
 8005486:	3301      	adds	r3, #1
 8005488:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800548a:	e002      	b.n	8005492 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	3b01      	subs	r3, #1
 8005490:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005492:	4b38      	ldr	r3, [pc, #224]	; (8005574 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005494:	695b      	ldr	r3, [r3, #20]
 8005496:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800549a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800549e:	d102      	bne.n	80054a6 <HAL_PWREx_ControlVoltageScaling+0x6e>
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d1f2      	bne.n	800548c <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80054a6:	4b33      	ldr	r3, [pc, #204]	; (8005574 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80054a8:	695b      	ldr	r3, [r3, #20]
 80054aa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80054ae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80054b2:	d158      	bne.n	8005566 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80054b4:	2303      	movs	r3, #3
 80054b6:	e057      	b.n	8005568 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80054b8:	4b2e      	ldr	r3, [pc, #184]	; (8005574 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80054ba:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80054be:	4a2d      	ldr	r2, [pc, #180]	; (8005574 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80054c0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80054c4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80054c8:	e04d      	b.n	8005566 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80054d0:	d141      	bne.n	8005556 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80054d2:	4b28      	ldr	r3, [pc, #160]	; (8005574 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80054da:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80054de:	d131      	bne.n	8005544 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80054e0:	4b24      	ldr	r3, [pc, #144]	; (8005574 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80054e2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80054e6:	4a23      	ldr	r2, [pc, #140]	; (8005574 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80054e8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80054ec:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80054f0:	4b20      	ldr	r3, [pc, #128]	; (8005574 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80054f8:	4a1e      	ldr	r2, [pc, #120]	; (8005574 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80054fa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80054fe:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8005500:	4b1d      	ldr	r3, [pc, #116]	; (8005578 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	2232      	movs	r2, #50	; 0x32
 8005506:	fb02 f303 	mul.w	r3, r2, r3
 800550a:	4a1c      	ldr	r2, [pc, #112]	; (800557c <HAL_PWREx_ControlVoltageScaling+0x144>)
 800550c:	fba2 2303 	umull	r2, r3, r2, r3
 8005510:	0c9b      	lsrs	r3, r3, #18
 8005512:	3301      	adds	r3, #1
 8005514:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005516:	e002      	b.n	800551e <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	3b01      	subs	r3, #1
 800551c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800551e:	4b15      	ldr	r3, [pc, #84]	; (8005574 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005520:	695b      	ldr	r3, [r3, #20]
 8005522:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005526:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800552a:	d102      	bne.n	8005532 <HAL_PWREx_ControlVoltageScaling+0xfa>
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	2b00      	cmp	r3, #0
 8005530:	d1f2      	bne.n	8005518 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8005532:	4b10      	ldr	r3, [pc, #64]	; (8005574 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005534:	695b      	ldr	r3, [r3, #20]
 8005536:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800553a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800553e:	d112      	bne.n	8005566 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8005540:	2303      	movs	r3, #3
 8005542:	e011      	b.n	8005568 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005544:	4b0b      	ldr	r3, [pc, #44]	; (8005574 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005546:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800554a:	4a0a      	ldr	r2, [pc, #40]	; (8005574 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800554c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005550:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8005554:	e007      	b.n	8005566 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8005556:	4b07      	ldr	r3, [pc, #28]	; (8005574 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800555e:	4a05      	ldr	r2, [pc, #20]	; (8005574 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005560:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005564:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8005566:	2300      	movs	r3, #0
}
 8005568:	4618      	mov	r0, r3
 800556a:	3714      	adds	r7, #20
 800556c:	46bd      	mov	sp, r7
 800556e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005572:	4770      	bx	lr
 8005574:	40007000 	.word	0x40007000
 8005578:	20000000 	.word	0x20000000
 800557c:	431bde83 	.word	0x431bde83

08005580 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005580:	b580      	push	{r7, lr}
 8005582:	b088      	sub	sp, #32
 8005584:	af00      	add	r7, sp, #0
 8005586:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	2b00      	cmp	r3, #0
 800558c:	d101      	bne.n	8005592 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800558e:	2301      	movs	r3, #1
 8005590:	e306      	b.n	8005ba0 <HAL_RCC_OscConfig+0x620>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	f003 0301 	and.w	r3, r3, #1
 800559a:	2b00      	cmp	r3, #0
 800559c:	d075      	beq.n	800568a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800559e:	4b97      	ldr	r3, [pc, #604]	; (80057fc <HAL_RCC_OscConfig+0x27c>)
 80055a0:	689b      	ldr	r3, [r3, #8]
 80055a2:	f003 030c 	and.w	r3, r3, #12
 80055a6:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80055a8:	4b94      	ldr	r3, [pc, #592]	; (80057fc <HAL_RCC_OscConfig+0x27c>)
 80055aa:	68db      	ldr	r3, [r3, #12]
 80055ac:	f003 0303 	and.w	r3, r3, #3
 80055b0:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80055b2:	69bb      	ldr	r3, [r7, #24]
 80055b4:	2b0c      	cmp	r3, #12
 80055b6:	d102      	bne.n	80055be <HAL_RCC_OscConfig+0x3e>
 80055b8:	697b      	ldr	r3, [r7, #20]
 80055ba:	2b03      	cmp	r3, #3
 80055bc:	d002      	beq.n	80055c4 <HAL_RCC_OscConfig+0x44>
 80055be:	69bb      	ldr	r3, [r7, #24]
 80055c0:	2b08      	cmp	r3, #8
 80055c2:	d10b      	bne.n	80055dc <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80055c4:	4b8d      	ldr	r3, [pc, #564]	; (80057fc <HAL_RCC_OscConfig+0x27c>)
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	d05b      	beq.n	8005688 <HAL_RCC_OscConfig+0x108>
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	685b      	ldr	r3, [r3, #4]
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d157      	bne.n	8005688 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80055d8:	2301      	movs	r3, #1
 80055da:	e2e1      	b.n	8005ba0 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	685b      	ldr	r3, [r3, #4]
 80055e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80055e4:	d106      	bne.n	80055f4 <HAL_RCC_OscConfig+0x74>
 80055e6:	4b85      	ldr	r3, [pc, #532]	; (80057fc <HAL_RCC_OscConfig+0x27c>)
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	4a84      	ldr	r2, [pc, #528]	; (80057fc <HAL_RCC_OscConfig+0x27c>)
 80055ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80055f0:	6013      	str	r3, [r2, #0]
 80055f2:	e01d      	b.n	8005630 <HAL_RCC_OscConfig+0xb0>
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	685b      	ldr	r3, [r3, #4]
 80055f8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80055fc:	d10c      	bne.n	8005618 <HAL_RCC_OscConfig+0x98>
 80055fe:	4b7f      	ldr	r3, [pc, #508]	; (80057fc <HAL_RCC_OscConfig+0x27c>)
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	4a7e      	ldr	r2, [pc, #504]	; (80057fc <HAL_RCC_OscConfig+0x27c>)
 8005604:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005608:	6013      	str	r3, [r2, #0]
 800560a:	4b7c      	ldr	r3, [pc, #496]	; (80057fc <HAL_RCC_OscConfig+0x27c>)
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	4a7b      	ldr	r2, [pc, #492]	; (80057fc <HAL_RCC_OscConfig+0x27c>)
 8005610:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005614:	6013      	str	r3, [r2, #0]
 8005616:	e00b      	b.n	8005630 <HAL_RCC_OscConfig+0xb0>
 8005618:	4b78      	ldr	r3, [pc, #480]	; (80057fc <HAL_RCC_OscConfig+0x27c>)
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	4a77      	ldr	r2, [pc, #476]	; (80057fc <HAL_RCC_OscConfig+0x27c>)
 800561e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005622:	6013      	str	r3, [r2, #0]
 8005624:	4b75      	ldr	r3, [pc, #468]	; (80057fc <HAL_RCC_OscConfig+0x27c>)
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	4a74      	ldr	r2, [pc, #464]	; (80057fc <HAL_RCC_OscConfig+0x27c>)
 800562a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800562e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	685b      	ldr	r3, [r3, #4]
 8005634:	2b00      	cmp	r3, #0
 8005636:	d013      	beq.n	8005660 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005638:	f7fc ff1e 	bl	8002478 <HAL_GetTick>
 800563c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800563e:	e008      	b.n	8005652 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005640:	f7fc ff1a 	bl	8002478 <HAL_GetTick>
 8005644:	4602      	mov	r2, r0
 8005646:	693b      	ldr	r3, [r7, #16]
 8005648:	1ad3      	subs	r3, r2, r3
 800564a:	2b64      	cmp	r3, #100	; 0x64
 800564c:	d901      	bls.n	8005652 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800564e:	2303      	movs	r3, #3
 8005650:	e2a6      	b.n	8005ba0 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005652:	4b6a      	ldr	r3, [pc, #424]	; (80057fc <HAL_RCC_OscConfig+0x27c>)
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800565a:	2b00      	cmp	r3, #0
 800565c:	d0f0      	beq.n	8005640 <HAL_RCC_OscConfig+0xc0>
 800565e:	e014      	b.n	800568a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005660:	f7fc ff0a 	bl	8002478 <HAL_GetTick>
 8005664:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005666:	e008      	b.n	800567a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005668:	f7fc ff06 	bl	8002478 <HAL_GetTick>
 800566c:	4602      	mov	r2, r0
 800566e:	693b      	ldr	r3, [r7, #16]
 8005670:	1ad3      	subs	r3, r2, r3
 8005672:	2b64      	cmp	r3, #100	; 0x64
 8005674:	d901      	bls.n	800567a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005676:	2303      	movs	r3, #3
 8005678:	e292      	b.n	8005ba0 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800567a:	4b60      	ldr	r3, [pc, #384]	; (80057fc <HAL_RCC_OscConfig+0x27c>)
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005682:	2b00      	cmp	r3, #0
 8005684:	d1f0      	bne.n	8005668 <HAL_RCC_OscConfig+0xe8>
 8005686:	e000      	b.n	800568a <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005688:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	f003 0302 	and.w	r3, r3, #2
 8005692:	2b00      	cmp	r3, #0
 8005694:	d075      	beq.n	8005782 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005696:	4b59      	ldr	r3, [pc, #356]	; (80057fc <HAL_RCC_OscConfig+0x27c>)
 8005698:	689b      	ldr	r3, [r3, #8]
 800569a:	f003 030c 	and.w	r3, r3, #12
 800569e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80056a0:	4b56      	ldr	r3, [pc, #344]	; (80057fc <HAL_RCC_OscConfig+0x27c>)
 80056a2:	68db      	ldr	r3, [r3, #12]
 80056a4:	f003 0303 	and.w	r3, r3, #3
 80056a8:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80056aa:	69bb      	ldr	r3, [r7, #24]
 80056ac:	2b0c      	cmp	r3, #12
 80056ae:	d102      	bne.n	80056b6 <HAL_RCC_OscConfig+0x136>
 80056b0:	697b      	ldr	r3, [r7, #20]
 80056b2:	2b02      	cmp	r3, #2
 80056b4:	d002      	beq.n	80056bc <HAL_RCC_OscConfig+0x13c>
 80056b6:	69bb      	ldr	r3, [r7, #24]
 80056b8:	2b04      	cmp	r3, #4
 80056ba:	d11f      	bne.n	80056fc <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80056bc:	4b4f      	ldr	r3, [pc, #316]	; (80057fc <HAL_RCC_OscConfig+0x27c>)
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80056c4:	2b00      	cmp	r3, #0
 80056c6:	d005      	beq.n	80056d4 <HAL_RCC_OscConfig+0x154>
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	68db      	ldr	r3, [r3, #12]
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	d101      	bne.n	80056d4 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 80056d0:	2301      	movs	r3, #1
 80056d2:	e265      	b.n	8005ba0 <HAL_RCC_OscConfig+0x620>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80056d4:	4b49      	ldr	r3, [pc, #292]	; (80057fc <HAL_RCC_OscConfig+0x27c>)
 80056d6:	685b      	ldr	r3, [r3, #4]
 80056d8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	691b      	ldr	r3, [r3, #16]
 80056e0:	061b      	lsls	r3, r3, #24
 80056e2:	4946      	ldr	r1, [pc, #280]	; (80057fc <HAL_RCC_OscConfig+0x27c>)
 80056e4:	4313      	orrs	r3, r2
 80056e6:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80056e8:	4b45      	ldr	r3, [pc, #276]	; (8005800 <HAL_RCC_OscConfig+0x280>)
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	4618      	mov	r0, r3
 80056ee:	f7fc fe77 	bl	80023e0 <HAL_InitTick>
 80056f2:	4603      	mov	r3, r0
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d043      	beq.n	8005780 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 80056f8:	2301      	movs	r3, #1
 80056fa:	e251      	b.n	8005ba0 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	68db      	ldr	r3, [r3, #12]
 8005700:	2b00      	cmp	r3, #0
 8005702:	d023      	beq.n	800574c <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005704:	4b3d      	ldr	r3, [pc, #244]	; (80057fc <HAL_RCC_OscConfig+0x27c>)
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	4a3c      	ldr	r2, [pc, #240]	; (80057fc <HAL_RCC_OscConfig+0x27c>)
 800570a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800570e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005710:	f7fc feb2 	bl	8002478 <HAL_GetTick>
 8005714:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005716:	e008      	b.n	800572a <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005718:	f7fc feae 	bl	8002478 <HAL_GetTick>
 800571c:	4602      	mov	r2, r0
 800571e:	693b      	ldr	r3, [r7, #16]
 8005720:	1ad3      	subs	r3, r2, r3
 8005722:	2b02      	cmp	r3, #2
 8005724:	d901      	bls.n	800572a <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8005726:	2303      	movs	r3, #3
 8005728:	e23a      	b.n	8005ba0 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800572a:	4b34      	ldr	r3, [pc, #208]	; (80057fc <HAL_RCC_OscConfig+0x27c>)
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005732:	2b00      	cmp	r3, #0
 8005734:	d0f0      	beq.n	8005718 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005736:	4b31      	ldr	r3, [pc, #196]	; (80057fc <HAL_RCC_OscConfig+0x27c>)
 8005738:	685b      	ldr	r3, [r3, #4]
 800573a:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	691b      	ldr	r3, [r3, #16]
 8005742:	061b      	lsls	r3, r3, #24
 8005744:	492d      	ldr	r1, [pc, #180]	; (80057fc <HAL_RCC_OscConfig+0x27c>)
 8005746:	4313      	orrs	r3, r2
 8005748:	604b      	str	r3, [r1, #4]
 800574a:	e01a      	b.n	8005782 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800574c:	4b2b      	ldr	r3, [pc, #172]	; (80057fc <HAL_RCC_OscConfig+0x27c>)
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	4a2a      	ldr	r2, [pc, #168]	; (80057fc <HAL_RCC_OscConfig+0x27c>)
 8005752:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005756:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005758:	f7fc fe8e 	bl	8002478 <HAL_GetTick>
 800575c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800575e:	e008      	b.n	8005772 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005760:	f7fc fe8a 	bl	8002478 <HAL_GetTick>
 8005764:	4602      	mov	r2, r0
 8005766:	693b      	ldr	r3, [r7, #16]
 8005768:	1ad3      	subs	r3, r2, r3
 800576a:	2b02      	cmp	r3, #2
 800576c:	d901      	bls.n	8005772 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800576e:	2303      	movs	r3, #3
 8005770:	e216      	b.n	8005ba0 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005772:	4b22      	ldr	r3, [pc, #136]	; (80057fc <HAL_RCC_OscConfig+0x27c>)
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800577a:	2b00      	cmp	r3, #0
 800577c:	d1f0      	bne.n	8005760 <HAL_RCC_OscConfig+0x1e0>
 800577e:	e000      	b.n	8005782 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005780:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	f003 0308 	and.w	r3, r3, #8
 800578a:	2b00      	cmp	r3, #0
 800578c:	d041      	beq.n	8005812 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	695b      	ldr	r3, [r3, #20]
 8005792:	2b00      	cmp	r3, #0
 8005794:	d01c      	beq.n	80057d0 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005796:	4b19      	ldr	r3, [pc, #100]	; (80057fc <HAL_RCC_OscConfig+0x27c>)
 8005798:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800579c:	4a17      	ldr	r2, [pc, #92]	; (80057fc <HAL_RCC_OscConfig+0x27c>)
 800579e:	f043 0301 	orr.w	r3, r3, #1
 80057a2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80057a6:	f7fc fe67 	bl	8002478 <HAL_GetTick>
 80057aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80057ac:	e008      	b.n	80057c0 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80057ae:	f7fc fe63 	bl	8002478 <HAL_GetTick>
 80057b2:	4602      	mov	r2, r0
 80057b4:	693b      	ldr	r3, [r7, #16]
 80057b6:	1ad3      	subs	r3, r2, r3
 80057b8:	2b02      	cmp	r3, #2
 80057ba:	d901      	bls.n	80057c0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80057bc:	2303      	movs	r3, #3
 80057be:	e1ef      	b.n	8005ba0 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80057c0:	4b0e      	ldr	r3, [pc, #56]	; (80057fc <HAL_RCC_OscConfig+0x27c>)
 80057c2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80057c6:	f003 0302 	and.w	r3, r3, #2
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	d0ef      	beq.n	80057ae <HAL_RCC_OscConfig+0x22e>
 80057ce:	e020      	b.n	8005812 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80057d0:	4b0a      	ldr	r3, [pc, #40]	; (80057fc <HAL_RCC_OscConfig+0x27c>)
 80057d2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80057d6:	4a09      	ldr	r2, [pc, #36]	; (80057fc <HAL_RCC_OscConfig+0x27c>)
 80057d8:	f023 0301 	bic.w	r3, r3, #1
 80057dc:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80057e0:	f7fc fe4a 	bl	8002478 <HAL_GetTick>
 80057e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80057e6:	e00d      	b.n	8005804 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80057e8:	f7fc fe46 	bl	8002478 <HAL_GetTick>
 80057ec:	4602      	mov	r2, r0
 80057ee:	693b      	ldr	r3, [r7, #16]
 80057f0:	1ad3      	subs	r3, r2, r3
 80057f2:	2b02      	cmp	r3, #2
 80057f4:	d906      	bls.n	8005804 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80057f6:	2303      	movs	r3, #3
 80057f8:	e1d2      	b.n	8005ba0 <HAL_RCC_OscConfig+0x620>
 80057fa:	bf00      	nop
 80057fc:	40021000 	.word	0x40021000
 8005800:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005804:	4b8c      	ldr	r3, [pc, #560]	; (8005a38 <HAL_RCC_OscConfig+0x4b8>)
 8005806:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800580a:	f003 0302 	and.w	r3, r3, #2
 800580e:	2b00      	cmp	r3, #0
 8005810:	d1ea      	bne.n	80057e8 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	f003 0304 	and.w	r3, r3, #4
 800581a:	2b00      	cmp	r3, #0
 800581c:	f000 80a6 	beq.w	800596c <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005820:	2300      	movs	r3, #0
 8005822:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8005824:	4b84      	ldr	r3, [pc, #528]	; (8005a38 <HAL_RCC_OscConfig+0x4b8>)
 8005826:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005828:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800582c:	2b00      	cmp	r3, #0
 800582e:	d101      	bne.n	8005834 <HAL_RCC_OscConfig+0x2b4>
 8005830:	2301      	movs	r3, #1
 8005832:	e000      	b.n	8005836 <HAL_RCC_OscConfig+0x2b6>
 8005834:	2300      	movs	r3, #0
 8005836:	2b00      	cmp	r3, #0
 8005838:	d00d      	beq.n	8005856 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800583a:	4b7f      	ldr	r3, [pc, #508]	; (8005a38 <HAL_RCC_OscConfig+0x4b8>)
 800583c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800583e:	4a7e      	ldr	r2, [pc, #504]	; (8005a38 <HAL_RCC_OscConfig+0x4b8>)
 8005840:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005844:	6593      	str	r3, [r2, #88]	; 0x58
 8005846:	4b7c      	ldr	r3, [pc, #496]	; (8005a38 <HAL_RCC_OscConfig+0x4b8>)
 8005848:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800584a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800584e:	60fb      	str	r3, [r7, #12]
 8005850:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8005852:	2301      	movs	r3, #1
 8005854:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005856:	4b79      	ldr	r3, [pc, #484]	; (8005a3c <HAL_RCC_OscConfig+0x4bc>)
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800585e:	2b00      	cmp	r3, #0
 8005860:	d118      	bne.n	8005894 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005862:	4b76      	ldr	r3, [pc, #472]	; (8005a3c <HAL_RCC_OscConfig+0x4bc>)
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	4a75      	ldr	r2, [pc, #468]	; (8005a3c <HAL_RCC_OscConfig+0x4bc>)
 8005868:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800586c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800586e:	f7fc fe03 	bl	8002478 <HAL_GetTick>
 8005872:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005874:	e008      	b.n	8005888 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005876:	f7fc fdff 	bl	8002478 <HAL_GetTick>
 800587a:	4602      	mov	r2, r0
 800587c:	693b      	ldr	r3, [r7, #16]
 800587e:	1ad3      	subs	r3, r2, r3
 8005880:	2b02      	cmp	r3, #2
 8005882:	d901      	bls.n	8005888 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8005884:	2303      	movs	r3, #3
 8005886:	e18b      	b.n	8005ba0 <HAL_RCC_OscConfig+0x620>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005888:	4b6c      	ldr	r3, [pc, #432]	; (8005a3c <HAL_RCC_OscConfig+0x4bc>)
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005890:	2b00      	cmp	r3, #0
 8005892:	d0f0      	beq.n	8005876 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	689b      	ldr	r3, [r3, #8]
 8005898:	2b01      	cmp	r3, #1
 800589a:	d108      	bne.n	80058ae <HAL_RCC_OscConfig+0x32e>
 800589c:	4b66      	ldr	r3, [pc, #408]	; (8005a38 <HAL_RCC_OscConfig+0x4b8>)
 800589e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80058a2:	4a65      	ldr	r2, [pc, #404]	; (8005a38 <HAL_RCC_OscConfig+0x4b8>)
 80058a4:	f043 0301 	orr.w	r3, r3, #1
 80058a8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80058ac:	e024      	b.n	80058f8 <HAL_RCC_OscConfig+0x378>
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	689b      	ldr	r3, [r3, #8]
 80058b2:	2b05      	cmp	r3, #5
 80058b4:	d110      	bne.n	80058d8 <HAL_RCC_OscConfig+0x358>
 80058b6:	4b60      	ldr	r3, [pc, #384]	; (8005a38 <HAL_RCC_OscConfig+0x4b8>)
 80058b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80058bc:	4a5e      	ldr	r2, [pc, #376]	; (8005a38 <HAL_RCC_OscConfig+0x4b8>)
 80058be:	f043 0304 	orr.w	r3, r3, #4
 80058c2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80058c6:	4b5c      	ldr	r3, [pc, #368]	; (8005a38 <HAL_RCC_OscConfig+0x4b8>)
 80058c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80058cc:	4a5a      	ldr	r2, [pc, #360]	; (8005a38 <HAL_RCC_OscConfig+0x4b8>)
 80058ce:	f043 0301 	orr.w	r3, r3, #1
 80058d2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80058d6:	e00f      	b.n	80058f8 <HAL_RCC_OscConfig+0x378>
 80058d8:	4b57      	ldr	r3, [pc, #348]	; (8005a38 <HAL_RCC_OscConfig+0x4b8>)
 80058da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80058de:	4a56      	ldr	r2, [pc, #344]	; (8005a38 <HAL_RCC_OscConfig+0x4b8>)
 80058e0:	f023 0301 	bic.w	r3, r3, #1
 80058e4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80058e8:	4b53      	ldr	r3, [pc, #332]	; (8005a38 <HAL_RCC_OscConfig+0x4b8>)
 80058ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80058ee:	4a52      	ldr	r2, [pc, #328]	; (8005a38 <HAL_RCC_OscConfig+0x4b8>)
 80058f0:	f023 0304 	bic.w	r3, r3, #4
 80058f4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	689b      	ldr	r3, [r3, #8]
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	d016      	beq.n	800592e <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005900:	f7fc fdba 	bl	8002478 <HAL_GetTick>
 8005904:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005906:	e00a      	b.n	800591e <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005908:	f7fc fdb6 	bl	8002478 <HAL_GetTick>
 800590c:	4602      	mov	r2, r0
 800590e:	693b      	ldr	r3, [r7, #16]
 8005910:	1ad3      	subs	r3, r2, r3
 8005912:	f241 3288 	movw	r2, #5000	; 0x1388
 8005916:	4293      	cmp	r3, r2
 8005918:	d901      	bls.n	800591e <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800591a:	2303      	movs	r3, #3
 800591c:	e140      	b.n	8005ba0 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800591e:	4b46      	ldr	r3, [pc, #280]	; (8005a38 <HAL_RCC_OscConfig+0x4b8>)
 8005920:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005924:	f003 0302 	and.w	r3, r3, #2
 8005928:	2b00      	cmp	r3, #0
 800592a:	d0ed      	beq.n	8005908 <HAL_RCC_OscConfig+0x388>
 800592c:	e015      	b.n	800595a <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800592e:	f7fc fda3 	bl	8002478 <HAL_GetTick>
 8005932:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005934:	e00a      	b.n	800594c <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005936:	f7fc fd9f 	bl	8002478 <HAL_GetTick>
 800593a:	4602      	mov	r2, r0
 800593c:	693b      	ldr	r3, [r7, #16]
 800593e:	1ad3      	subs	r3, r2, r3
 8005940:	f241 3288 	movw	r2, #5000	; 0x1388
 8005944:	4293      	cmp	r3, r2
 8005946:	d901      	bls.n	800594c <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8005948:	2303      	movs	r3, #3
 800594a:	e129      	b.n	8005ba0 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800594c:	4b3a      	ldr	r3, [pc, #232]	; (8005a38 <HAL_RCC_OscConfig+0x4b8>)
 800594e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005952:	f003 0302 	and.w	r3, r3, #2
 8005956:	2b00      	cmp	r3, #0
 8005958:	d1ed      	bne.n	8005936 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800595a:	7ffb      	ldrb	r3, [r7, #31]
 800595c:	2b01      	cmp	r3, #1
 800595e:	d105      	bne.n	800596c <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005960:	4b35      	ldr	r3, [pc, #212]	; (8005a38 <HAL_RCC_OscConfig+0x4b8>)
 8005962:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005964:	4a34      	ldr	r2, [pc, #208]	; (8005a38 <HAL_RCC_OscConfig+0x4b8>)
 8005966:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800596a:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	f003 0320 	and.w	r3, r3, #32
 8005974:	2b00      	cmp	r3, #0
 8005976:	d03c      	beq.n	80059f2 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	699b      	ldr	r3, [r3, #24]
 800597c:	2b00      	cmp	r3, #0
 800597e:	d01c      	beq.n	80059ba <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005980:	4b2d      	ldr	r3, [pc, #180]	; (8005a38 <HAL_RCC_OscConfig+0x4b8>)
 8005982:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005986:	4a2c      	ldr	r2, [pc, #176]	; (8005a38 <HAL_RCC_OscConfig+0x4b8>)
 8005988:	f043 0301 	orr.w	r3, r3, #1
 800598c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005990:	f7fc fd72 	bl	8002478 <HAL_GetTick>
 8005994:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8005996:	e008      	b.n	80059aa <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005998:	f7fc fd6e 	bl	8002478 <HAL_GetTick>
 800599c:	4602      	mov	r2, r0
 800599e:	693b      	ldr	r3, [r7, #16]
 80059a0:	1ad3      	subs	r3, r2, r3
 80059a2:	2b02      	cmp	r3, #2
 80059a4:	d901      	bls.n	80059aa <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 80059a6:	2303      	movs	r3, #3
 80059a8:	e0fa      	b.n	8005ba0 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80059aa:	4b23      	ldr	r3, [pc, #140]	; (8005a38 <HAL_RCC_OscConfig+0x4b8>)
 80059ac:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80059b0:	f003 0302 	and.w	r3, r3, #2
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	d0ef      	beq.n	8005998 <HAL_RCC_OscConfig+0x418>
 80059b8:	e01b      	b.n	80059f2 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80059ba:	4b1f      	ldr	r3, [pc, #124]	; (8005a38 <HAL_RCC_OscConfig+0x4b8>)
 80059bc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80059c0:	4a1d      	ldr	r2, [pc, #116]	; (8005a38 <HAL_RCC_OscConfig+0x4b8>)
 80059c2:	f023 0301 	bic.w	r3, r3, #1
 80059c6:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80059ca:	f7fc fd55 	bl	8002478 <HAL_GetTick>
 80059ce:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80059d0:	e008      	b.n	80059e4 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80059d2:	f7fc fd51 	bl	8002478 <HAL_GetTick>
 80059d6:	4602      	mov	r2, r0
 80059d8:	693b      	ldr	r3, [r7, #16]
 80059da:	1ad3      	subs	r3, r2, r3
 80059dc:	2b02      	cmp	r3, #2
 80059de:	d901      	bls.n	80059e4 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 80059e0:	2303      	movs	r3, #3
 80059e2:	e0dd      	b.n	8005ba0 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80059e4:	4b14      	ldr	r3, [pc, #80]	; (8005a38 <HAL_RCC_OscConfig+0x4b8>)
 80059e6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80059ea:	f003 0302 	and.w	r3, r3, #2
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d1ef      	bne.n	80059d2 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	69db      	ldr	r3, [r3, #28]
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	f000 80d1 	beq.w	8005b9e <HAL_RCC_OscConfig+0x61e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80059fc:	4b0e      	ldr	r3, [pc, #56]	; (8005a38 <HAL_RCC_OscConfig+0x4b8>)
 80059fe:	689b      	ldr	r3, [r3, #8]
 8005a00:	f003 030c 	and.w	r3, r3, #12
 8005a04:	2b0c      	cmp	r3, #12
 8005a06:	f000 808b 	beq.w	8005b20 <HAL_RCC_OscConfig+0x5a0>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	69db      	ldr	r3, [r3, #28]
 8005a0e:	2b02      	cmp	r3, #2
 8005a10:	d15e      	bne.n	8005ad0 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005a12:	4b09      	ldr	r3, [pc, #36]	; (8005a38 <HAL_RCC_OscConfig+0x4b8>)
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	4a08      	ldr	r2, [pc, #32]	; (8005a38 <HAL_RCC_OscConfig+0x4b8>)
 8005a18:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005a1c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a1e:	f7fc fd2b 	bl	8002478 <HAL_GetTick>
 8005a22:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005a24:	e00c      	b.n	8005a40 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005a26:	f7fc fd27 	bl	8002478 <HAL_GetTick>
 8005a2a:	4602      	mov	r2, r0
 8005a2c:	693b      	ldr	r3, [r7, #16]
 8005a2e:	1ad3      	subs	r3, r2, r3
 8005a30:	2b02      	cmp	r3, #2
 8005a32:	d905      	bls.n	8005a40 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8005a34:	2303      	movs	r3, #3
 8005a36:	e0b3      	b.n	8005ba0 <HAL_RCC_OscConfig+0x620>
 8005a38:	40021000 	.word	0x40021000
 8005a3c:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005a40:	4b59      	ldr	r3, [pc, #356]	; (8005ba8 <HAL_RCC_OscConfig+0x628>)
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	d1ec      	bne.n	8005a26 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005a4c:	4b56      	ldr	r3, [pc, #344]	; (8005ba8 <HAL_RCC_OscConfig+0x628>)
 8005a4e:	68da      	ldr	r2, [r3, #12]
 8005a50:	4b56      	ldr	r3, [pc, #344]	; (8005bac <HAL_RCC_OscConfig+0x62c>)
 8005a52:	4013      	ands	r3, r2
 8005a54:	687a      	ldr	r2, [r7, #4]
 8005a56:	6a11      	ldr	r1, [r2, #32]
 8005a58:	687a      	ldr	r2, [r7, #4]
 8005a5a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005a5c:	3a01      	subs	r2, #1
 8005a5e:	0112      	lsls	r2, r2, #4
 8005a60:	4311      	orrs	r1, r2
 8005a62:	687a      	ldr	r2, [r7, #4]
 8005a64:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8005a66:	0212      	lsls	r2, r2, #8
 8005a68:	4311      	orrs	r1, r2
 8005a6a:	687a      	ldr	r2, [r7, #4]
 8005a6c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8005a6e:	0852      	lsrs	r2, r2, #1
 8005a70:	3a01      	subs	r2, #1
 8005a72:	0552      	lsls	r2, r2, #21
 8005a74:	4311      	orrs	r1, r2
 8005a76:	687a      	ldr	r2, [r7, #4]
 8005a78:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005a7a:	0852      	lsrs	r2, r2, #1
 8005a7c:	3a01      	subs	r2, #1
 8005a7e:	0652      	lsls	r2, r2, #25
 8005a80:	4311      	orrs	r1, r2
 8005a82:	687a      	ldr	r2, [r7, #4]
 8005a84:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8005a86:	06d2      	lsls	r2, r2, #27
 8005a88:	430a      	orrs	r2, r1
 8005a8a:	4947      	ldr	r1, [pc, #284]	; (8005ba8 <HAL_RCC_OscConfig+0x628>)
 8005a8c:	4313      	orrs	r3, r2
 8005a8e:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005a90:	4b45      	ldr	r3, [pc, #276]	; (8005ba8 <HAL_RCC_OscConfig+0x628>)
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	4a44      	ldr	r2, [pc, #272]	; (8005ba8 <HAL_RCC_OscConfig+0x628>)
 8005a96:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005a9a:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005a9c:	4b42      	ldr	r3, [pc, #264]	; (8005ba8 <HAL_RCC_OscConfig+0x628>)
 8005a9e:	68db      	ldr	r3, [r3, #12]
 8005aa0:	4a41      	ldr	r2, [pc, #260]	; (8005ba8 <HAL_RCC_OscConfig+0x628>)
 8005aa2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005aa6:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005aa8:	f7fc fce6 	bl	8002478 <HAL_GetTick>
 8005aac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005aae:	e008      	b.n	8005ac2 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005ab0:	f7fc fce2 	bl	8002478 <HAL_GetTick>
 8005ab4:	4602      	mov	r2, r0
 8005ab6:	693b      	ldr	r3, [r7, #16]
 8005ab8:	1ad3      	subs	r3, r2, r3
 8005aba:	2b02      	cmp	r3, #2
 8005abc:	d901      	bls.n	8005ac2 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8005abe:	2303      	movs	r3, #3
 8005ac0:	e06e      	b.n	8005ba0 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005ac2:	4b39      	ldr	r3, [pc, #228]	; (8005ba8 <HAL_RCC_OscConfig+0x628>)
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	d0f0      	beq.n	8005ab0 <HAL_RCC_OscConfig+0x530>
 8005ace:	e066      	b.n	8005b9e <HAL_RCC_OscConfig+0x61e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005ad0:	4b35      	ldr	r3, [pc, #212]	; (8005ba8 <HAL_RCC_OscConfig+0x628>)
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	4a34      	ldr	r2, [pc, #208]	; (8005ba8 <HAL_RCC_OscConfig+0x628>)
 8005ad6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005ada:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8005adc:	4b32      	ldr	r3, [pc, #200]	; (8005ba8 <HAL_RCC_OscConfig+0x628>)
 8005ade:	68db      	ldr	r3, [r3, #12]
 8005ae0:	4a31      	ldr	r2, [pc, #196]	; (8005ba8 <HAL_RCC_OscConfig+0x628>)
 8005ae2:	f023 0303 	bic.w	r3, r3, #3
 8005ae6:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8005ae8:	4b2f      	ldr	r3, [pc, #188]	; (8005ba8 <HAL_RCC_OscConfig+0x628>)
 8005aea:	68db      	ldr	r3, [r3, #12]
 8005aec:	4a2e      	ldr	r2, [pc, #184]	; (8005ba8 <HAL_RCC_OscConfig+0x628>)
 8005aee:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8005af2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005af6:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005af8:	f7fc fcbe 	bl	8002478 <HAL_GetTick>
 8005afc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005afe:	e008      	b.n	8005b12 <HAL_RCC_OscConfig+0x592>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005b00:	f7fc fcba 	bl	8002478 <HAL_GetTick>
 8005b04:	4602      	mov	r2, r0
 8005b06:	693b      	ldr	r3, [r7, #16]
 8005b08:	1ad3      	subs	r3, r2, r3
 8005b0a:	2b02      	cmp	r3, #2
 8005b0c:	d901      	bls.n	8005b12 <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 8005b0e:	2303      	movs	r3, #3
 8005b10:	e046      	b.n	8005ba0 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005b12:	4b25      	ldr	r3, [pc, #148]	; (8005ba8 <HAL_RCC_OscConfig+0x628>)
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	d1f0      	bne.n	8005b00 <HAL_RCC_OscConfig+0x580>
 8005b1e:	e03e      	b.n	8005b9e <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	69db      	ldr	r3, [r3, #28]
 8005b24:	2b01      	cmp	r3, #1
 8005b26:	d101      	bne.n	8005b2c <HAL_RCC_OscConfig+0x5ac>
      {
        return HAL_ERROR;
 8005b28:	2301      	movs	r3, #1
 8005b2a:	e039      	b.n	8005ba0 <HAL_RCC_OscConfig+0x620>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8005b2c:	4b1e      	ldr	r3, [pc, #120]	; (8005ba8 <HAL_RCC_OscConfig+0x628>)
 8005b2e:	68db      	ldr	r3, [r3, #12]
 8005b30:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005b32:	697b      	ldr	r3, [r7, #20]
 8005b34:	f003 0203 	and.w	r2, r3, #3
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	6a1b      	ldr	r3, [r3, #32]
 8005b3c:	429a      	cmp	r2, r3
 8005b3e:	d12c      	bne.n	8005b9a <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005b40:	697b      	ldr	r3, [r7, #20]
 8005b42:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b4a:	3b01      	subs	r3, #1
 8005b4c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005b4e:	429a      	cmp	r2, r3
 8005b50:	d123      	bne.n	8005b9a <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8005b52:	697b      	ldr	r3, [r7, #20]
 8005b54:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b5c:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005b5e:	429a      	cmp	r2, r3
 8005b60:	d11b      	bne.n	8005b9a <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005b62:	697b      	ldr	r3, [r7, #20]
 8005b64:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b6c:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8005b6e:	429a      	cmp	r2, r3
 8005b70:	d113      	bne.n	8005b9a <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005b72:	697b      	ldr	r3, [r7, #20]
 8005b74:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b7c:	085b      	lsrs	r3, r3, #1
 8005b7e:	3b01      	subs	r3, #1
 8005b80:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005b82:	429a      	cmp	r2, r3
 8005b84:	d109      	bne.n	8005b9a <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8005b86:	697b      	ldr	r3, [r7, #20]
 8005b88:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005b90:	085b      	lsrs	r3, r3, #1
 8005b92:	3b01      	subs	r3, #1
 8005b94:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005b96:	429a      	cmp	r2, r3
 8005b98:	d001      	beq.n	8005b9e <HAL_RCC_OscConfig+0x61e>
      {
        return HAL_ERROR;
 8005b9a:	2301      	movs	r3, #1
 8005b9c:	e000      	b.n	8005ba0 <HAL_RCC_OscConfig+0x620>
      }
    }
  }
  }

  return HAL_OK;
 8005b9e:	2300      	movs	r3, #0
}
 8005ba0:	4618      	mov	r0, r3
 8005ba2:	3720      	adds	r7, #32
 8005ba4:	46bd      	mov	sp, r7
 8005ba6:	bd80      	pop	{r7, pc}
 8005ba8:	40021000 	.word	0x40021000
 8005bac:	019f800c 	.word	0x019f800c

08005bb0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005bb0:	b580      	push	{r7, lr}
 8005bb2:	b086      	sub	sp, #24
 8005bb4:	af00      	add	r7, sp, #0
 8005bb6:	6078      	str	r0, [r7, #4]
 8005bb8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8005bba:	2300      	movs	r3, #0
 8005bbc:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	d101      	bne.n	8005bc8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8005bc4:	2301      	movs	r3, #1
 8005bc6:	e11e      	b.n	8005e06 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005bc8:	4b91      	ldr	r3, [pc, #580]	; (8005e10 <HAL_RCC_ClockConfig+0x260>)
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	f003 030f 	and.w	r3, r3, #15
 8005bd0:	683a      	ldr	r2, [r7, #0]
 8005bd2:	429a      	cmp	r2, r3
 8005bd4:	d910      	bls.n	8005bf8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005bd6:	4b8e      	ldr	r3, [pc, #568]	; (8005e10 <HAL_RCC_ClockConfig+0x260>)
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	f023 020f 	bic.w	r2, r3, #15
 8005bde:	498c      	ldr	r1, [pc, #560]	; (8005e10 <HAL_RCC_ClockConfig+0x260>)
 8005be0:	683b      	ldr	r3, [r7, #0]
 8005be2:	4313      	orrs	r3, r2
 8005be4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005be6:	4b8a      	ldr	r3, [pc, #552]	; (8005e10 <HAL_RCC_ClockConfig+0x260>)
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	f003 030f 	and.w	r3, r3, #15
 8005bee:	683a      	ldr	r2, [r7, #0]
 8005bf0:	429a      	cmp	r2, r3
 8005bf2:	d001      	beq.n	8005bf8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8005bf4:	2301      	movs	r3, #1
 8005bf6:	e106      	b.n	8005e06 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	f003 0301 	and.w	r3, r3, #1
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	d073      	beq.n	8005cec <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	685b      	ldr	r3, [r3, #4]
 8005c08:	2b03      	cmp	r3, #3
 8005c0a:	d129      	bne.n	8005c60 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005c0c:	4b81      	ldr	r3, [pc, #516]	; (8005e14 <HAL_RCC_ClockConfig+0x264>)
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	d101      	bne.n	8005c1c <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8005c18:	2301      	movs	r3, #1
 8005c1a:	e0f4      	b.n	8005e06 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8005c1c:	f000 f99c 	bl	8005f58 <RCC_GetSysClockFreqFromPLLSource>
 8005c20:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8005c22:	693b      	ldr	r3, [r7, #16]
 8005c24:	4a7c      	ldr	r2, [pc, #496]	; (8005e18 <HAL_RCC_ClockConfig+0x268>)
 8005c26:	4293      	cmp	r3, r2
 8005c28:	d93f      	bls.n	8005caa <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8005c2a:	4b7a      	ldr	r3, [pc, #488]	; (8005e14 <HAL_RCC_ClockConfig+0x264>)
 8005c2c:	689b      	ldr	r3, [r3, #8]
 8005c2e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d009      	beq.n	8005c4a <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	d033      	beq.n	8005caa <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	d12f      	bne.n	8005caa <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8005c4a:	4b72      	ldr	r3, [pc, #456]	; (8005e14 <HAL_RCC_ClockConfig+0x264>)
 8005c4c:	689b      	ldr	r3, [r3, #8]
 8005c4e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005c52:	4a70      	ldr	r2, [pc, #448]	; (8005e14 <HAL_RCC_ClockConfig+0x264>)
 8005c54:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005c58:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8005c5a:	2380      	movs	r3, #128	; 0x80
 8005c5c:	617b      	str	r3, [r7, #20]
 8005c5e:	e024      	b.n	8005caa <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	685b      	ldr	r3, [r3, #4]
 8005c64:	2b02      	cmp	r3, #2
 8005c66:	d107      	bne.n	8005c78 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005c68:	4b6a      	ldr	r3, [pc, #424]	; (8005e14 <HAL_RCC_ClockConfig+0x264>)
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	d109      	bne.n	8005c88 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8005c74:	2301      	movs	r3, #1
 8005c76:	e0c6      	b.n	8005e06 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005c78:	4b66      	ldr	r3, [pc, #408]	; (8005e14 <HAL_RCC_ClockConfig+0x264>)
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	d101      	bne.n	8005c88 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8005c84:	2301      	movs	r3, #1
 8005c86:	e0be      	b.n	8005e06 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8005c88:	f000 f8ce 	bl	8005e28 <HAL_RCC_GetSysClockFreq>
 8005c8c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8005c8e:	693b      	ldr	r3, [r7, #16]
 8005c90:	4a61      	ldr	r2, [pc, #388]	; (8005e18 <HAL_RCC_ClockConfig+0x268>)
 8005c92:	4293      	cmp	r3, r2
 8005c94:	d909      	bls.n	8005caa <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8005c96:	4b5f      	ldr	r3, [pc, #380]	; (8005e14 <HAL_RCC_ClockConfig+0x264>)
 8005c98:	689b      	ldr	r3, [r3, #8]
 8005c9a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005c9e:	4a5d      	ldr	r2, [pc, #372]	; (8005e14 <HAL_RCC_ClockConfig+0x264>)
 8005ca0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005ca4:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8005ca6:	2380      	movs	r3, #128	; 0x80
 8005ca8:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005caa:	4b5a      	ldr	r3, [pc, #360]	; (8005e14 <HAL_RCC_ClockConfig+0x264>)
 8005cac:	689b      	ldr	r3, [r3, #8]
 8005cae:	f023 0203 	bic.w	r2, r3, #3
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	685b      	ldr	r3, [r3, #4]
 8005cb6:	4957      	ldr	r1, [pc, #348]	; (8005e14 <HAL_RCC_ClockConfig+0x264>)
 8005cb8:	4313      	orrs	r3, r2
 8005cba:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005cbc:	f7fc fbdc 	bl	8002478 <HAL_GetTick>
 8005cc0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005cc2:	e00a      	b.n	8005cda <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005cc4:	f7fc fbd8 	bl	8002478 <HAL_GetTick>
 8005cc8:	4602      	mov	r2, r0
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	1ad3      	subs	r3, r2, r3
 8005cce:	f241 3288 	movw	r2, #5000	; 0x1388
 8005cd2:	4293      	cmp	r3, r2
 8005cd4:	d901      	bls.n	8005cda <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8005cd6:	2303      	movs	r3, #3
 8005cd8:	e095      	b.n	8005e06 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005cda:	4b4e      	ldr	r3, [pc, #312]	; (8005e14 <HAL_RCC_ClockConfig+0x264>)
 8005cdc:	689b      	ldr	r3, [r3, #8]
 8005cde:	f003 020c 	and.w	r2, r3, #12
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	685b      	ldr	r3, [r3, #4]
 8005ce6:	009b      	lsls	r3, r3, #2
 8005ce8:	429a      	cmp	r2, r3
 8005cea:	d1eb      	bne.n	8005cc4 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	f003 0302 	and.w	r3, r3, #2
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	d023      	beq.n	8005d40 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	f003 0304 	and.w	r3, r3, #4
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	d005      	beq.n	8005d10 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005d04:	4b43      	ldr	r3, [pc, #268]	; (8005e14 <HAL_RCC_ClockConfig+0x264>)
 8005d06:	689b      	ldr	r3, [r3, #8]
 8005d08:	4a42      	ldr	r2, [pc, #264]	; (8005e14 <HAL_RCC_ClockConfig+0x264>)
 8005d0a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8005d0e:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	f003 0308 	and.w	r3, r3, #8
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	d007      	beq.n	8005d2c <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8005d1c:	4b3d      	ldr	r3, [pc, #244]	; (8005e14 <HAL_RCC_ClockConfig+0x264>)
 8005d1e:	689b      	ldr	r3, [r3, #8]
 8005d20:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8005d24:	4a3b      	ldr	r2, [pc, #236]	; (8005e14 <HAL_RCC_ClockConfig+0x264>)
 8005d26:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8005d2a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005d2c:	4b39      	ldr	r3, [pc, #228]	; (8005e14 <HAL_RCC_ClockConfig+0x264>)
 8005d2e:	689b      	ldr	r3, [r3, #8]
 8005d30:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	689b      	ldr	r3, [r3, #8]
 8005d38:	4936      	ldr	r1, [pc, #216]	; (8005e14 <HAL_RCC_ClockConfig+0x264>)
 8005d3a:	4313      	orrs	r3, r2
 8005d3c:	608b      	str	r3, [r1, #8]
 8005d3e:	e008      	b.n	8005d52 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8005d40:	697b      	ldr	r3, [r7, #20]
 8005d42:	2b80      	cmp	r3, #128	; 0x80
 8005d44:	d105      	bne.n	8005d52 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8005d46:	4b33      	ldr	r3, [pc, #204]	; (8005e14 <HAL_RCC_ClockConfig+0x264>)
 8005d48:	689b      	ldr	r3, [r3, #8]
 8005d4a:	4a32      	ldr	r2, [pc, #200]	; (8005e14 <HAL_RCC_ClockConfig+0x264>)
 8005d4c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005d50:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005d52:	4b2f      	ldr	r3, [pc, #188]	; (8005e10 <HAL_RCC_ClockConfig+0x260>)
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	f003 030f 	and.w	r3, r3, #15
 8005d5a:	683a      	ldr	r2, [r7, #0]
 8005d5c:	429a      	cmp	r2, r3
 8005d5e:	d21d      	bcs.n	8005d9c <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005d60:	4b2b      	ldr	r3, [pc, #172]	; (8005e10 <HAL_RCC_ClockConfig+0x260>)
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	f023 020f 	bic.w	r2, r3, #15
 8005d68:	4929      	ldr	r1, [pc, #164]	; (8005e10 <HAL_RCC_ClockConfig+0x260>)
 8005d6a:	683b      	ldr	r3, [r7, #0]
 8005d6c:	4313      	orrs	r3, r2
 8005d6e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8005d70:	f7fc fb82 	bl	8002478 <HAL_GetTick>
 8005d74:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005d76:	e00a      	b.n	8005d8e <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005d78:	f7fc fb7e 	bl	8002478 <HAL_GetTick>
 8005d7c:	4602      	mov	r2, r0
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	1ad3      	subs	r3, r2, r3
 8005d82:	f241 3288 	movw	r2, #5000	; 0x1388
 8005d86:	4293      	cmp	r3, r2
 8005d88:	d901      	bls.n	8005d8e <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8005d8a:	2303      	movs	r3, #3
 8005d8c:	e03b      	b.n	8005e06 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005d8e:	4b20      	ldr	r3, [pc, #128]	; (8005e10 <HAL_RCC_ClockConfig+0x260>)
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	f003 030f 	and.w	r3, r3, #15
 8005d96:	683a      	ldr	r2, [r7, #0]
 8005d98:	429a      	cmp	r2, r3
 8005d9a:	d1ed      	bne.n	8005d78 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	f003 0304 	and.w	r3, r3, #4
 8005da4:	2b00      	cmp	r3, #0
 8005da6:	d008      	beq.n	8005dba <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005da8:	4b1a      	ldr	r3, [pc, #104]	; (8005e14 <HAL_RCC_ClockConfig+0x264>)
 8005daa:	689b      	ldr	r3, [r3, #8]
 8005dac:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	68db      	ldr	r3, [r3, #12]
 8005db4:	4917      	ldr	r1, [pc, #92]	; (8005e14 <HAL_RCC_ClockConfig+0x264>)
 8005db6:	4313      	orrs	r3, r2
 8005db8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	f003 0308 	and.w	r3, r3, #8
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	d009      	beq.n	8005dda <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005dc6:	4b13      	ldr	r3, [pc, #76]	; (8005e14 <HAL_RCC_ClockConfig+0x264>)
 8005dc8:	689b      	ldr	r3, [r3, #8]
 8005dca:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	691b      	ldr	r3, [r3, #16]
 8005dd2:	00db      	lsls	r3, r3, #3
 8005dd4:	490f      	ldr	r1, [pc, #60]	; (8005e14 <HAL_RCC_ClockConfig+0x264>)
 8005dd6:	4313      	orrs	r3, r2
 8005dd8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005dda:	f000 f825 	bl	8005e28 <HAL_RCC_GetSysClockFreq>
 8005dde:	4602      	mov	r2, r0
 8005de0:	4b0c      	ldr	r3, [pc, #48]	; (8005e14 <HAL_RCC_ClockConfig+0x264>)
 8005de2:	689b      	ldr	r3, [r3, #8]
 8005de4:	091b      	lsrs	r3, r3, #4
 8005de6:	f003 030f 	and.w	r3, r3, #15
 8005dea:	490c      	ldr	r1, [pc, #48]	; (8005e1c <HAL_RCC_ClockConfig+0x26c>)
 8005dec:	5ccb      	ldrb	r3, [r1, r3]
 8005dee:	f003 031f 	and.w	r3, r3, #31
 8005df2:	fa22 f303 	lsr.w	r3, r2, r3
 8005df6:	4a0a      	ldr	r2, [pc, #40]	; (8005e20 <HAL_RCC_ClockConfig+0x270>)
 8005df8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8005dfa:	4b0a      	ldr	r3, [pc, #40]	; (8005e24 <HAL_RCC_ClockConfig+0x274>)
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	4618      	mov	r0, r3
 8005e00:	f7fc faee 	bl	80023e0 <HAL_InitTick>
 8005e04:	4603      	mov	r3, r0
}
 8005e06:	4618      	mov	r0, r3
 8005e08:	3718      	adds	r7, #24
 8005e0a:	46bd      	mov	sp, r7
 8005e0c:	bd80      	pop	{r7, pc}
 8005e0e:	bf00      	nop
 8005e10:	40022000 	.word	0x40022000
 8005e14:	40021000 	.word	0x40021000
 8005e18:	04c4b400 	.word	0x04c4b400
 8005e1c:	0800c464 	.word	0x0800c464
 8005e20:	20000000 	.word	0x20000000
 8005e24:	20000004 	.word	0x20000004

08005e28 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005e28:	b480      	push	{r7}
 8005e2a:	b087      	sub	sp, #28
 8005e2c:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8005e2e:	4b2c      	ldr	r3, [pc, #176]	; (8005ee0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005e30:	689b      	ldr	r3, [r3, #8]
 8005e32:	f003 030c 	and.w	r3, r3, #12
 8005e36:	2b04      	cmp	r3, #4
 8005e38:	d102      	bne.n	8005e40 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8005e3a:	4b2a      	ldr	r3, [pc, #168]	; (8005ee4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8005e3c:	613b      	str	r3, [r7, #16]
 8005e3e:	e047      	b.n	8005ed0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8005e40:	4b27      	ldr	r3, [pc, #156]	; (8005ee0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005e42:	689b      	ldr	r3, [r3, #8]
 8005e44:	f003 030c 	and.w	r3, r3, #12
 8005e48:	2b08      	cmp	r3, #8
 8005e4a:	d102      	bne.n	8005e52 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005e4c:	4b25      	ldr	r3, [pc, #148]	; (8005ee4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8005e4e:	613b      	str	r3, [r7, #16]
 8005e50:	e03e      	b.n	8005ed0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8005e52:	4b23      	ldr	r3, [pc, #140]	; (8005ee0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005e54:	689b      	ldr	r3, [r3, #8]
 8005e56:	f003 030c 	and.w	r3, r3, #12
 8005e5a:	2b0c      	cmp	r3, #12
 8005e5c:	d136      	bne.n	8005ecc <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005e5e:	4b20      	ldr	r3, [pc, #128]	; (8005ee0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005e60:	68db      	ldr	r3, [r3, #12]
 8005e62:	f003 0303 	and.w	r3, r3, #3
 8005e66:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005e68:	4b1d      	ldr	r3, [pc, #116]	; (8005ee0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005e6a:	68db      	ldr	r3, [r3, #12]
 8005e6c:	091b      	lsrs	r3, r3, #4
 8005e6e:	f003 030f 	and.w	r3, r3, #15
 8005e72:	3301      	adds	r3, #1
 8005e74:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	2b03      	cmp	r3, #3
 8005e7a:	d10c      	bne.n	8005e96 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005e7c:	4a19      	ldr	r2, [pc, #100]	; (8005ee4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8005e7e:	68bb      	ldr	r3, [r7, #8]
 8005e80:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e84:	4a16      	ldr	r2, [pc, #88]	; (8005ee0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005e86:	68d2      	ldr	r2, [r2, #12]
 8005e88:	0a12      	lsrs	r2, r2, #8
 8005e8a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8005e8e:	fb02 f303 	mul.w	r3, r2, r3
 8005e92:	617b      	str	r3, [r7, #20]
      break;
 8005e94:	e00c      	b.n	8005eb0 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005e96:	4a13      	ldr	r2, [pc, #76]	; (8005ee4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8005e98:	68bb      	ldr	r3, [r7, #8]
 8005e9a:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e9e:	4a10      	ldr	r2, [pc, #64]	; (8005ee0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005ea0:	68d2      	ldr	r2, [r2, #12]
 8005ea2:	0a12      	lsrs	r2, r2, #8
 8005ea4:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8005ea8:	fb02 f303 	mul.w	r3, r2, r3
 8005eac:	617b      	str	r3, [r7, #20]
      break;
 8005eae:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005eb0:	4b0b      	ldr	r3, [pc, #44]	; (8005ee0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005eb2:	68db      	ldr	r3, [r3, #12]
 8005eb4:	0e5b      	lsrs	r3, r3, #25
 8005eb6:	f003 0303 	and.w	r3, r3, #3
 8005eba:	3301      	adds	r3, #1
 8005ebc:	005b      	lsls	r3, r3, #1
 8005ebe:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8005ec0:	697a      	ldr	r2, [r7, #20]
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ec8:	613b      	str	r3, [r7, #16]
 8005eca:	e001      	b.n	8005ed0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8005ecc:	2300      	movs	r3, #0
 8005ece:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8005ed0:	693b      	ldr	r3, [r7, #16]
}
 8005ed2:	4618      	mov	r0, r3
 8005ed4:	371c      	adds	r7, #28
 8005ed6:	46bd      	mov	sp, r7
 8005ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005edc:	4770      	bx	lr
 8005ede:	bf00      	nop
 8005ee0:	40021000 	.word	0x40021000
 8005ee4:	00f42400 	.word	0x00f42400

08005ee8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005ee8:	b480      	push	{r7}
 8005eea:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005eec:	4b03      	ldr	r3, [pc, #12]	; (8005efc <HAL_RCC_GetHCLKFreq+0x14>)
 8005eee:	681b      	ldr	r3, [r3, #0]
}
 8005ef0:	4618      	mov	r0, r3
 8005ef2:	46bd      	mov	sp, r7
 8005ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ef8:	4770      	bx	lr
 8005efa:	bf00      	nop
 8005efc:	20000000 	.word	0x20000000

08005f00 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005f00:	b580      	push	{r7, lr}
 8005f02:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8005f04:	f7ff fff0 	bl	8005ee8 <HAL_RCC_GetHCLKFreq>
 8005f08:	4602      	mov	r2, r0
 8005f0a:	4b06      	ldr	r3, [pc, #24]	; (8005f24 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005f0c:	689b      	ldr	r3, [r3, #8]
 8005f0e:	0a1b      	lsrs	r3, r3, #8
 8005f10:	f003 0307 	and.w	r3, r3, #7
 8005f14:	4904      	ldr	r1, [pc, #16]	; (8005f28 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005f16:	5ccb      	ldrb	r3, [r1, r3]
 8005f18:	f003 031f 	and.w	r3, r3, #31
 8005f1c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005f20:	4618      	mov	r0, r3
 8005f22:	bd80      	pop	{r7, pc}
 8005f24:	40021000 	.word	0x40021000
 8005f28:	0800c474 	.word	0x0800c474

08005f2c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005f2c:	b580      	push	{r7, lr}
 8005f2e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8005f30:	f7ff ffda 	bl	8005ee8 <HAL_RCC_GetHCLKFreq>
 8005f34:	4602      	mov	r2, r0
 8005f36:	4b06      	ldr	r3, [pc, #24]	; (8005f50 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005f38:	689b      	ldr	r3, [r3, #8]
 8005f3a:	0adb      	lsrs	r3, r3, #11
 8005f3c:	f003 0307 	and.w	r3, r3, #7
 8005f40:	4904      	ldr	r1, [pc, #16]	; (8005f54 <HAL_RCC_GetPCLK2Freq+0x28>)
 8005f42:	5ccb      	ldrb	r3, [r1, r3]
 8005f44:	f003 031f 	and.w	r3, r3, #31
 8005f48:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005f4c:	4618      	mov	r0, r3
 8005f4e:	bd80      	pop	{r7, pc}
 8005f50:	40021000 	.word	0x40021000
 8005f54:	0800c474 	.word	0x0800c474

08005f58 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8005f58:	b480      	push	{r7}
 8005f5a:	b087      	sub	sp, #28
 8005f5c:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005f5e:	4b1e      	ldr	r3, [pc, #120]	; (8005fd8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005f60:	68db      	ldr	r3, [r3, #12]
 8005f62:	f003 0303 	and.w	r3, r3, #3
 8005f66:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005f68:	4b1b      	ldr	r3, [pc, #108]	; (8005fd8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005f6a:	68db      	ldr	r3, [r3, #12]
 8005f6c:	091b      	lsrs	r3, r3, #4
 8005f6e:	f003 030f 	and.w	r3, r3, #15
 8005f72:	3301      	adds	r3, #1
 8005f74:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8005f76:	693b      	ldr	r3, [r7, #16]
 8005f78:	2b03      	cmp	r3, #3
 8005f7a:	d10c      	bne.n	8005f96 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005f7c:	4a17      	ldr	r2, [pc, #92]	; (8005fdc <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f84:	4a14      	ldr	r2, [pc, #80]	; (8005fd8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005f86:	68d2      	ldr	r2, [r2, #12]
 8005f88:	0a12      	lsrs	r2, r2, #8
 8005f8a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8005f8e:	fb02 f303 	mul.w	r3, r2, r3
 8005f92:	617b      	str	r3, [r7, #20]
    break;
 8005f94:	e00c      	b.n	8005fb0 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005f96:	4a11      	ldr	r2, [pc, #68]	; (8005fdc <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f9e:	4a0e      	ldr	r2, [pc, #56]	; (8005fd8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005fa0:	68d2      	ldr	r2, [r2, #12]
 8005fa2:	0a12      	lsrs	r2, r2, #8
 8005fa4:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8005fa8:	fb02 f303 	mul.w	r3, r2, r3
 8005fac:	617b      	str	r3, [r7, #20]
    break;
 8005fae:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005fb0:	4b09      	ldr	r3, [pc, #36]	; (8005fd8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005fb2:	68db      	ldr	r3, [r3, #12]
 8005fb4:	0e5b      	lsrs	r3, r3, #25
 8005fb6:	f003 0303 	and.w	r3, r3, #3
 8005fba:	3301      	adds	r3, #1
 8005fbc:	005b      	lsls	r3, r3, #1
 8005fbe:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8005fc0:	697a      	ldr	r2, [r7, #20]
 8005fc2:	68bb      	ldr	r3, [r7, #8]
 8005fc4:	fbb2 f3f3 	udiv	r3, r2, r3
 8005fc8:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8005fca:	687b      	ldr	r3, [r7, #4]
}
 8005fcc:	4618      	mov	r0, r3
 8005fce:	371c      	adds	r7, #28
 8005fd0:	46bd      	mov	sp, r7
 8005fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fd6:	4770      	bx	lr
 8005fd8:	40021000 	.word	0x40021000
 8005fdc:	00f42400 	.word	0x00f42400

08005fe0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005fe0:	b580      	push	{r7, lr}
 8005fe2:	b086      	sub	sp, #24
 8005fe4:	af00      	add	r7, sp, #0
 8005fe6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005fe8:	2300      	movs	r3, #0
 8005fea:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005fec:	2300      	movs	r3, #0
 8005fee:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005ff8:	2b00      	cmp	r3, #0
 8005ffa:	f000 8098 	beq.w	800612e <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005ffe:	2300      	movs	r3, #0
 8006000:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006002:	4b43      	ldr	r3, [pc, #268]	; (8006110 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006004:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006006:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800600a:	2b00      	cmp	r3, #0
 800600c:	d10d      	bne.n	800602a <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800600e:	4b40      	ldr	r3, [pc, #256]	; (8006110 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006010:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006012:	4a3f      	ldr	r2, [pc, #252]	; (8006110 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006014:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006018:	6593      	str	r3, [r2, #88]	; 0x58
 800601a:	4b3d      	ldr	r3, [pc, #244]	; (8006110 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800601c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800601e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006022:	60bb      	str	r3, [r7, #8]
 8006024:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006026:	2301      	movs	r3, #1
 8006028:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800602a:	4b3a      	ldr	r3, [pc, #232]	; (8006114 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	4a39      	ldr	r2, [pc, #228]	; (8006114 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8006030:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006034:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006036:	f7fc fa1f 	bl	8002478 <HAL_GetTick>
 800603a:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800603c:	e009      	b.n	8006052 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800603e:	f7fc fa1b 	bl	8002478 <HAL_GetTick>
 8006042:	4602      	mov	r2, r0
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	1ad3      	subs	r3, r2, r3
 8006048:	2b02      	cmp	r3, #2
 800604a:	d902      	bls.n	8006052 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 800604c:	2303      	movs	r3, #3
 800604e:	74fb      	strb	r3, [r7, #19]
        break;
 8006050:	e005      	b.n	800605e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006052:	4b30      	ldr	r3, [pc, #192]	; (8006114 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800605a:	2b00      	cmp	r3, #0
 800605c:	d0ef      	beq.n	800603e <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 800605e:	7cfb      	ldrb	r3, [r7, #19]
 8006060:	2b00      	cmp	r3, #0
 8006062:	d159      	bne.n	8006118 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8006064:	4b2a      	ldr	r3, [pc, #168]	; (8006110 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006066:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800606a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800606e:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8006070:	697b      	ldr	r3, [r7, #20]
 8006072:	2b00      	cmp	r3, #0
 8006074:	d01e      	beq.n	80060b4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800607a:	697a      	ldr	r2, [r7, #20]
 800607c:	429a      	cmp	r2, r3
 800607e:	d019      	beq.n	80060b4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8006080:	4b23      	ldr	r3, [pc, #140]	; (8006110 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006082:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006086:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800608a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800608c:	4b20      	ldr	r3, [pc, #128]	; (8006110 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800608e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006092:	4a1f      	ldr	r2, [pc, #124]	; (8006110 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006094:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006098:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800609c:	4b1c      	ldr	r3, [pc, #112]	; (8006110 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800609e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80060a2:	4a1b      	ldr	r2, [pc, #108]	; (8006110 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80060a4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80060a8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80060ac:	4a18      	ldr	r2, [pc, #96]	; (8006110 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80060ae:	697b      	ldr	r3, [r7, #20]
 80060b0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80060b4:	697b      	ldr	r3, [r7, #20]
 80060b6:	f003 0301 	and.w	r3, r3, #1
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	d016      	beq.n	80060ec <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80060be:	f7fc f9db 	bl	8002478 <HAL_GetTick>
 80060c2:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80060c4:	e00b      	b.n	80060de <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80060c6:	f7fc f9d7 	bl	8002478 <HAL_GetTick>
 80060ca:	4602      	mov	r2, r0
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	1ad3      	subs	r3, r2, r3
 80060d0:	f241 3288 	movw	r2, #5000	; 0x1388
 80060d4:	4293      	cmp	r3, r2
 80060d6:	d902      	bls.n	80060de <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 80060d8:	2303      	movs	r3, #3
 80060da:	74fb      	strb	r3, [r7, #19]
            break;
 80060dc:	e006      	b.n	80060ec <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80060de:	4b0c      	ldr	r3, [pc, #48]	; (8006110 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80060e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80060e4:	f003 0302 	and.w	r3, r3, #2
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	d0ec      	beq.n	80060c6 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 80060ec:	7cfb      	ldrb	r3, [r7, #19]
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	d10b      	bne.n	800610a <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80060f2:	4b07      	ldr	r3, [pc, #28]	; (8006110 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80060f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80060f8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006100:	4903      	ldr	r1, [pc, #12]	; (8006110 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006102:	4313      	orrs	r3, r2
 8006104:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8006108:	e008      	b.n	800611c <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800610a:	7cfb      	ldrb	r3, [r7, #19]
 800610c:	74bb      	strb	r3, [r7, #18]
 800610e:	e005      	b.n	800611c <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8006110:	40021000 	.word	0x40021000
 8006114:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006118:	7cfb      	ldrb	r3, [r7, #19]
 800611a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800611c:	7c7b      	ldrb	r3, [r7, #17]
 800611e:	2b01      	cmp	r3, #1
 8006120:	d105      	bne.n	800612e <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006122:	4ba7      	ldr	r3, [pc, #668]	; (80063c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006124:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006126:	4aa6      	ldr	r2, [pc, #664]	; (80063c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006128:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800612c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	f003 0301 	and.w	r3, r3, #1
 8006136:	2b00      	cmp	r3, #0
 8006138:	d00a      	beq.n	8006150 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800613a:	4ba1      	ldr	r3, [pc, #644]	; (80063c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800613c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006140:	f023 0203 	bic.w	r2, r3, #3
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	685b      	ldr	r3, [r3, #4]
 8006148:	499d      	ldr	r1, [pc, #628]	; (80063c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800614a:	4313      	orrs	r3, r2
 800614c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	f003 0302 	and.w	r3, r3, #2
 8006158:	2b00      	cmp	r3, #0
 800615a:	d00a      	beq.n	8006172 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800615c:	4b98      	ldr	r3, [pc, #608]	; (80063c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800615e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006162:	f023 020c 	bic.w	r2, r3, #12
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	689b      	ldr	r3, [r3, #8]
 800616a:	4995      	ldr	r1, [pc, #596]	; (80063c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800616c:	4313      	orrs	r3, r2
 800616e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	f003 0304 	and.w	r3, r3, #4
 800617a:	2b00      	cmp	r3, #0
 800617c:	d00a      	beq.n	8006194 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800617e:	4b90      	ldr	r3, [pc, #576]	; (80063c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006180:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006184:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	68db      	ldr	r3, [r3, #12]
 800618c:	498c      	ldr	r1, [pc, #560]	; (80063c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800618e:	4313      	orrs	r3, r2
 8006190:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	f003 0308 	and.w	r3, r3, #8
 800619c:	2b00      	cmp	r3, #0
 800619e:	d00a      	beq.n	80061b6 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80061a0:	4b87      	ldr	r3, [pc, #540]	; (80063c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80061a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80061a6:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	691b      	ldr	r3, [r3, #16]
 80061ae:	4984      	ldr	r1, [pc, #528]	; (80063c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80061b0:	4313      	orrs	r3, r2
 80061b2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	f003 0310 	and.w	r3, r3, #16
 80061be:	2b00      	cmp	r3, #0
 80061c0:	d00a      	beq.n	80061d8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80061c2:	4b7f      	ldr	r3, [pc, #508]	; (80063c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80061c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80061c8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	695b      	ldr	r3, [r3, #20]
 80061d0:	497b      	ldr	r1, [pc, #492]	; (80063c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80061d2:	4313      	orrs	r3, r2
 80061d4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	f003 0320 	and.w	r3, r3, #32
 80061e0:	2b00      	cmp	r3, #0
 80061e2:	d00a      	beq.n	80061fa <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80061e4:	4b76      	ldr	r3, [pc, #472]	; (80063c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80061e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80061ea:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	699b      	ldr	r3, [r3, #24]
 80061f2:	4973      	ldr	r1, [pc, #460]	; (80063c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80061f4:	4313      	orrs	r3, r2
 80061f6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006202:	2b00      	cmp	r3, #0
 8006204:	d00a      	beq.n	800621c <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006206:	4b6e      	ldr	r3, [pc, #440]	; (80063c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006208:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800620c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	69db      	ldr	r3, [r3, #28]
 8006214:	496a      	ldr	r1, [pc, #424]	; (80063c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006216:	4313      	orrs	r3, r2
 8006218:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006224:	2b00      	cmp	r3, #0
 8006226:	d00a      	beq.n	800623e <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8006228:	4b65      	ldr	r3, [pc, #404]	; (80063c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800622a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800622e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	6a1b      	ldr	r3, [r3, #32]
 8006236:	4962      	ldr	r1, [pc, #392]	; (80063c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006238:	4313      	orrs	r3, r2
 800623a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006246:	2b00      	cmp	r3, #0
 8006248:	d00a      	beq.n	8006260 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800624a:	4b5d      	ldr	r3, [pc, #372]	; (80063c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800624c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006250:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006258:	4959      	ldr	r1, [pc, #356]	; (80063c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800625a:	4313      	orrs	r3, r2
 800625c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006268:	2b00      	cmp	r3, #0
 800626a:	d00a      	beq.n	8006282 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800626c:	4b54      	ldr	r3, [pc, #336]	; (80063c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800626e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006272:	f023 0203 	bic.w	r2, r3, #3
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800627a:	4951      	ldr	r1, [pc, #324]	; (80063c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800627c:	4313      	orrs	r3, r2
 800627e:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800628a:	2b00      	cmp	r3, #0
 800628c:	d00a      	beq.n	80062a4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800628e:	4b4c      	ldr	r3, [pc, #304]	; (80063c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006290:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006294:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800629c:	4948      	ldr	r1, [pc, #288]	; (80063c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800629e:	4313      	orrs	r3, r2
 80062a0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80062ac:	2b00      	cmp	r3, #0
 80062ae:	d015      	beq.n	80062dc <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80062b0:	4b43      	ldr	r3, [pc, #268]	; (80063c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80062b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80062b6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062be:	4940      	ldr	r1, [pc, #256]	; (80063c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80062c0:	4313      	orrs	r3, r2
 80062c2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062ca:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80062ce:	d105      	bne.n	80062dc <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80062d0:	4b3b      	ldr	r3, [pc, #236]	; (80063c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80062d2:	68db      	ldr	r3, [r3, #12]
 80062d4:	4a3a      	ldr	r2, [pc, #232]	; (80063c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80062d6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80062da:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80062e4:	2b00      	cmp	r3, #0
 80062e6:	d015      	beq.n	8006314 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80062e8:	4b35      	ldr	r3, [pc, #212]	; (80063c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80062ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80062ee:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80062f6:	4932      	ldr	r1, [pc, #200]	; (80063c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80062f8:	4313      	orrs	r3, r2
 80062fa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006302:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006306:	d105      	bne.n	8006314 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006308:	4b2d      	ldr	r3, [pc, #180]	; (80063c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800630a:	68db      	ldr	r3, [r3, #12]
 800630c:	4a2c      	ldr	r2, [pc, #176]	; (80063c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800630e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006312:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800631c:	2b00      	cmp	r3, #0
 800631e:	d015      	beq.n	800634c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8006320:	4b27      	ldr	r3, [pc, #156]	; (80063c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006322:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006326:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800632e:	4924      	ldr	r1, [pc, #144]	; (80063c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006330:	4313      	orrs	r3, r2
 8006332:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800633a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800633e:	d105      	bne.n	800634c <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006340:	4b1f      	ldr	r3, [pc, #124]	; (80063c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006342:	68db      	ldr	r3, [r3, #12]
 8006344:	4a1e      	ldr	r2, [pc, #120]	; (80063c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006346:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800634a:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006354:	2b00      	cmp	r3, #0
 8006356:	d015      	beq.n	8006384 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006358:	4b19      	ldr	r3, [pc, #100]	; (80063c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800635a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800635e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006366:	4916      	ldr	r1, [pc, #88]	; (80063c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006368:	4313      	orrs	r3, r2
 800636a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006372:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006376:	d105      	bne.n	8006384 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006378:	4b11      	ldr	r3, [pc, #68]	; (80063c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800637a:	68db      	ldr	r3, [r3, #12]
 800637c:	4a10      	ldr	r2, [pc, #64]	; (80063c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800637e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006382:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800638c:	2b00      	cmp	r3, #0
 800638e:	d019      	beq.n	80063c4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006390:	4b0b      	ldr	r3, [pc, #44]	; (80063c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006392:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006396:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800639e:	4908      	ldr	r1, [pc, #32]	; (80063c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80063a0:	4313      	orrs	r3, r2
 80063a2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063aa:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80063ae:	d109      	bne.n	80063c4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80063b0:	4b03      	ldr	r3, [pc, #12]	; (80063c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80063b2:	68db      	ldr	r3, [r3, #12]
 80063b4:	4a02      	ldr	r2, [pc, #8]	; (80063c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80063b6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80063ba:	60d3      	str	r3, [r2, #12]
 80063bc:	e002      	b.n	80063c4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 80063be:	bf00      	nop
 80063c0:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80063cc:	2b00      	cmp	r3, #0
 80063ce:	d015      	beq.n	80063fc <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80063d0:	4b29      	ldr	r3, [pc, #164]	; (8006478 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80063d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80063d6:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80063de:	4926      	ldr	r1, [pc, #152]	; (8006478 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80063e0:	4313      	orrs	r3, r2
 80063e2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80063ea:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80063ee:	d105      	bne.n	80063fc <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80063f0:	4b21      	ldr	r3, [pc, #132]	; (8006478 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80063f2:	68db      	ldr	r3, [r3, #12]
 80063f4:	4a20      	ldr	r2, [pc, #128]	; (8006478 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80063f6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80063fa:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006404:	2b00      	cmp	r3, #0
 8006406:	d015      	beq.n	8006434 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8006408:	4b1b      	ldr	r3, [pc, #108]	; (8006478 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800640a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800640e:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006416:	4918      	ldr	r1, [pc, #96]	; (8006478 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006418:	4313      	orrs	r3, r2
 800641a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006422:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006426:	d105      	bne.n	8006434 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8006428:	4b13      	ldr	r3, [pc, #76]	; (8006478 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800642a:	68db      	ldr	r3, [r3, #12]
 800642c:	4a12      	ldr	r2, [pc, #72]	; (8006478 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800642e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006432:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800643c:	2b00      	cmp	r3, #0
 800643e:	d015      	beq.n	800646c <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8006440:	4b0d      	ldr	r3, [pc, #52]	; (8006478 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006442:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006446:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800644e:	490a      	ldr	r1, [pc, #40]	; (8006478 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006450:	4313      	orrs	r3, r2
 8006452:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800645a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800645e:	d105      	bne.n	800646c <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006460:	4b05      	ldr	r3, [pc, #20]	; (8006478 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006462:	68db      	ldr	r3, [r3, #12]
 8006464:	4a04      	ldr	r2, [pc, #16]	; (8006478 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006466:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800646a:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 800646c:	7cbb      	ldrb	r3, [r7, #18]
}
 800646e:	4618      	mov	r0, r3
 8006470:	3718      	adds	r7, #24
 8006472:	46bd      	mov	sp, r7
 8006474:	bd80      	pop	{r7, pc}
 8006476:	bf00      	nop
 8006478:	40021000 	.word	0x40021000

0800647c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800647c:	b580      	push	{r7, lr}
 800647e:	b082      	sub	sp, #8
 8006480:	af00      	add	r7, sp, #0
 8006482:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	2b00      	cmp	r3, #0
 8006488:	d101      	bne.n	800648e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800648a:	2301      	movs	r3, #1
 800648c:	e049      	b.n	8006522 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006494:	b2db      	uxtb	r3, r3
 8006496:	2b00      	cmp	r3, #0
 8006498:	d106      	bne.n	80064a8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	2200      	movs	r2, #0
 800649e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80064a2:	6878      	ldr	r0, [r7, #4]
 80064a4:	f7fb fb74 	bl	8001b90 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	2202      	movs	r2, #2
 80064ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	681a      	ldr	r2, [r3, #0]
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	3304      	adds	r3, #4
 80064b8:	4619      	mov	r1, r3
 80064ba:	4610      	mov	r0, r2
 80064bc:	f001 f9cc 	bl	8007858 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	2201      	movs	r2, #1
 80064c4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	2201      	movs	r2, #1
 80064cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	2201      	movs	r2, #1
 80064d4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	2201      	movs	r2, #1
 80064dc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	2201      	movs	r2, #1
 80064e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	2201      	movs	r2, #1
 80064ec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	2201      	movs	r2, #1
 80064f4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	2201      	movs	r2, #1
 80064fc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	2201      	movs	r2, #1
 8006504:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	2201      	movs	r2, #1
 800650c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	2201      	movs	r2, #1
 8006514:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	2201      	movs	r2, #1
 800651c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006520:	2300      	movs	r3, #0
}
 8006522:	4618      	mov	r0, r3
 8006524:	3708      	adds	r7, #8
 8006526:	46bd      	mov	sp, r7
 8006528:	bd80      	pop	{r7, pc}
	...

0800652c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800652c:	b480      	push	{r7}
 800652e:	b085      	sub	sp, #20
 8006530:	af00      	add	r7, sp, #0
 8006532:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800653a:	b2db      	uxtb	r3, r3
 800653c:	2b01      	cmp	r3, #1
 800653e:	d001      	beq.n	8006544 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006540:	2301      	movs	r3, #1
 8006542:	e054      	b.n	80065ee <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	2202      	movs	r2, #2
 8006548:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	68da      	ldr	r2, [r3, #12]
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	f042 0201 	orr.w	r2, r2, #1
 800655a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	4a26      	ldr	r2, [pc, #152]	; (80065fc <HAL_TIM_Base_Start_IT+0xd0>)
 8006562:	4293      	cmp	r3, r2
 8006564:	d022      	beq.n	80065ac <HAL_TIM_Base_Start_IT+0x80>
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800656e:	d01d      	beq.n	80065ac <HAL_TIM_Base_Start_IT+0x80>
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	4a22      	ldr	r2, [pc, #136]	; (8006600 <HAL_TIM_Base_Start_IT+0xd4>)
 8006576:	4293      	cmp	r3, r2
 8006578:	d018      	beq.n	80065ac <HAL_TIM_Base_Start_IT+0x80>
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	4a21      	ldr	r2, [pc, #132]	; (8006604 <HAL_TIM_Base_Start_IT+0xd8>)
 8006580:	4293      	cmp	r3, r2
 8006582:	d013      	beq.n	80065ac <HAL_TIM_Base_Start_IT+0x80>
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	4a1f      	ldr	r2, [pc, #124]	; (8006608 <HAL_TIM_Base_Start_IT+0xdc>)
 800658a:	4293      	cmp	r3, r2
 800658c:	d00e      	beq.n	80065ac <HAL_TIM_Base_Start_IT+0x80>
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	4a1e      	ldr	r2, [pc, #120]	; (800660c <HAL_TIM_Base_Start_IT+0xe0>)
 8006594:	4293      	cmp	r3, r2
 8006596:	d009      	beq.n	80065ac <HAL_TIM_Base_Start_IT+0x80>
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	4a1c      	ldr	r2, [pc, #112]	; (8006610 <HAL_TIM_Base_Start_IT+0xe4>)
 800659e:	4293      	cmp	r3, r2
 80065a0:	d004      	beq.n	80065ac <HAL_TIM_Base_Start_IT+0x80>
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	4a1b      	ldr	r2, [pc, #108]	; (8006614 <HAL_TIM_Base_Start_IT+0xe8>)
 80065a8:	4293      	cmp	r3, r2
 80065aa:	d115      	bne.n	80065d8 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	689a      	ldr	r2, [r3, #8]
 80065b2:	4b19      	ldr	r3, [pc, #100]	; (8006618 <HAL_TIM_Base_Start_IT+0xec>)
 80065b4:	4013      	ands	r3, r2
 80065b6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	2b06      	cmp	r3, #6
 80065bc:	d015      	beq.n	80065ea <HAL_TIM_Base_Start_IT+0xbe>
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80065c4:	d011      	beq.n	80065ea <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	681a      	ldr	r2, [r3, #0]
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	f042 0201 	orr.w	r2, r2, #1
 80065d4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80065d6:	e008      	b.n	80065ea <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	681a      	ldr	r2, [r3, #0]
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	f042 0201 	orr.w	r2, r2, #1
 80065e6:	601a      	str	r2, [r3, #0]
 80065e8:	e000      	b.n	80065ec <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80065ea:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80065ec:	2300      	movs	r3, #0
}
 80065ee:	4618      	mov	r0, r3
 80065f0:	3714      	adds	r7, #20
 80065f2:	46bd      	mov	sp, r7
 80065f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065f8:	4770      	bx	lr
 80065fa:	bf00      	nop
 80065fc:	40012c00 	.word	0x40012c00
 8006600:	40000400 	.word	0x40000400
 8006604:	40000800 	.word	0x40000800
 8006608:	40000c00 	.word	0x40000c00
 800660c:	40013400 	.word	0x40013400
 8006610:	40014000 	.word	0x40014000
 8006614:	40015000 	.word	0x40015000
 8006618:	00010007 	.word	0x00010007

0800661c <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 800661c:	b480      	push	{r7}
 800661e:	b083      	sub	sp, #12
 8006620:	af00      	add	r7, sp, #0
 8006622:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	68da      	ldr	r2, [r3, #12]
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	f022 0201 	bic.w	r2, r2, #1
 8006632:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	6a1a      	ldr	r2, [r3, #32]
 800663a:	f241 1311 	movw	r3, #4369	; 0x1111
 800663e:	4013      	ands	r3, r2
 8006640:	2b00      	cmp	r3, #0
 8006642:	d10f      	bne.n	8006664 <HAL_TIM_Base_Stop_IT+0x48>
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	6a1a      	ldr	r2, [r3, #32]
 800664a:	f244 4344 	movw	r3, #17476	; 0x4444
 800664e:	4013      	ands	r3, r2
 8006650:	2b00      	cmp	r3, #0
 8006652:	d107      	bne.n	8006664 <HAL_TIM_Base_Stop_IT+0x48>
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	681a      	ldr	r2, [r3, #0]
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	f022 0201 	bic.w	r2, r2, #1
 8006662:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	2201      	movs	r2, #1
 8006668:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800666c:	2300      	movs	r3, #0
}
 800666e:	4618      	mov	r0, r3
 8006670:	370c      	adds	r7, #12
 8006672:	46bd      	mov	sp, r7
 8006674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006678:	4770      	bx	lr

0800667a <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 800667a:	b580      	push	{r7, lr}
 800667c:	b082      	sub	sp, #8
 800667e:	af00      	add	r7, sp, #0
 8006680:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	2b00      	cmp	r3, #0
 8006686:	d101      	bne.n	800668c <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8006688:	2301      	movs	r3, #1
 800668a:	e049      	b.n	8006720 <HAL_TIM_OC_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006692:	b2db      	uxtb	r3, r3
 8006694:	2b00      	cmp	r3, #0
 8006696:	d106      	bne.n	80066a6 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	2200      	movs	r2, #0
 800669c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 80066a0:	6878      	ldr	r0, [r7, #4]
 80066a2:	f000 f841 	bl	8006728 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	2202      	movs	r2, #2
 80066aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	681a      	ldr	r2, [r3, #0]
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	3304      	adds	r3, #4
 80066b6:	4619      	mov	r1, r3
 80066b8:	4610      	mov	r0, r2
 80066ba:	f001 f8cd 	bl	8007858 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	2201      	movs	r2, #1
 80066c2:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	2201      	movs	r2, #1
 80066ca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	2201      	movs	r2, #1
 80066d2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	2201      	movs	r2, #1
 80066da:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	2201      	movs	r2, #1
 80066e2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	2201      	movs	r2, #1
 80066ea:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	2201      	movs	r2, #1
 80066f2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	2201      	movs	r2, #1
 80066fa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	2201      	movs	r2, #1
 8006702:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	2201      	movs	r2, #1
 800670a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	2201      	movs	r2, #1
 8006712:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	2201      	movs	r2, #1
 800671a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800671e:	2300      	movs	r3, #0
}
 8006720:	4618      	mov	r0, r3
 8006722:	3708      	adds	r7, #8
 8006724:	46bd      	mov	sp, r7
 8006726:	bd80      	pop	{r7, pc}

08006728 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8006728:	b480      	push	{r7}
 800672a:	b083      	sub	sp, #12
 800672c:	af00      	add	r7, sp, #0
 800672e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8006730:	bf00      	nop
 8006732:	370c      	adds	r7, #12
 8006734:	46bd      	mov	sp, r7
 8006736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800673a:	4770      	bx	lr

0800673c <HAL_TIM_OC_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800673c:	b580      	push	{r7, lr}
 800673e:	b084      	sub	sp, #16
 8006740:	af00      	add	r7, sp, #0
 8006742:	6078      	str	r0, [r7, #4]
 8006744:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006746:	683b      	ldr	r3, [r7, #0]
 8006748:	2b00      	cmp	r3, #0
 800674a:	d109      	bne.n	8006760 <HAL_TIM_OC_Start+0x24>
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006752:	b2db      	uxtb	r3, r3
 8006754:	2b01      	cmp	r3, #1
 8006756:	bf14      	ite	ne
 8006758:	2301      	movne	r3, #1
 800675a:	2300      	moveq	r3, #0
 800675c:	b2db      	uxtb	r3, r3
 800675e:	e03c      	b.n	80067da <HAL_TIM_OC_Start+0x9e>
 8006760:	683b      	ldr	r3, [r7, #0]
 8006762:	2b04      	cmp	r3, #4
 8006764:	d109      	bne.n	800677a <HAL_TIM_OC_Start+0x3e>
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800676c:	b2db      	uxtb	r3, r3
 800676e:	2b01      	cmp	r3, #1
 8006770:	bf14      	ite	ne
 8006772:	2301      	movne	r3, #1
 8006774:	2300      	moveq	r3, #0
 8006776:	b2db      	uxtb	r3, r3
 8006778:	e02f      	b.n	80067da <HAL_TIM_OC_Start+0x9e>
 800677a:	683b      	ldr	r3, [r7, #0]
 800677c:	2b08      	cmp	r3, #8
 800677e:	d109      	bne.n	8006794 <HAL_TIM_OC_Start+0x58>
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006786:	b2db      	uxtb	r3, r3
 8006788:	2b01      	cmp	r3, #1
 800678a:	bf14      	ite	ne
 800678c:	2301      	movne	r3, #1
 800678e:	2300      	moveq	r3, #0
 8006790:	b2db      	uxtb	r3, r3
 8006792:	e022      	b.n	80067da <HAL_TIM_OC_Start+0x9e>
 8006794:	683b      	ldr	r3, [r7, #0]
 8006796:	2b0c      	cmp	r3, #12
 8006798:	d109      	bne.n	80067ae <HAL_TIM_OC_Start+0x72>
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80067a0:	b2db      	uxtb	r3, r3
 80067a2:	2b01      	cmp	r3, #1
 80067a4:	bf14      	ite	ne
 80067a6:	2301      	movne	r3, #1
 80067a8:	2300      	moveq	r3, #0
 80067aa:	b2db      	uxtb	r3, r3
 80067ac:	e015      	b.n	80067da <HAL_TIM_OC_Start+0x9e>
 80067ae:	683b      	ldr	r3, [r7, #0]
 80067b0:	2b10      	cmp	r3, #16
 80067b2:	d109      	bne.n	80067c8 <HAL_TIM_OC_Start+0x8c>
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80067ba:	b2db      	uxtb	r3, r3
 80067bc:	2b01      	cmp	r3, #1
 80067be:	bf14      	ite	ne
 80067c0:	2301      	movne	r3, #1
 80067c2:	2300      	moveq	r3, #0
 80067c4:	b2db      	uxtb	r3, r3
 80067c6:	e008      	b.n	80067da <HAL_TIM_OC_Start+0x9e>
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80067ce:	b2db      	uxtb	r3, r3
 80067d0:	2b01      	cmp	r3, #1
 80067d2:	bf14      	ite	ne
 80067d4:	2301      	movne	r3, #1
 80067d6:	2300      	moveq	r3, #0
 80067d8:	b2db      	uxtb	r3, r3
 80067da:	2b00      	cmp	r3, #0
 80067dc:	d001      	beq.n	80067e2 <HAL_TIM_OC_Start+0xa6>
  {
    return HAL_ERROR;
 80067de:	2301      	movs	r3, #1
 80067e0:	e0a6      	b.n	8006930 <HAL_TIM_OC_Start+0x1f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80067e2:	683b      	ldr	r3, [r7, #0]
 80067e4:	2b00      	cmp	r3, #0
 80067e6:	d104      	bne.n	80067f2 <HAL_TIM_OC_Start+0xb6>
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	2202      	movs	r2, #2
 80067ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80067f0:	e023      	b.n	800683a <HAL_TIM_OC_Start+0xfe>
 80067f2:	683b      	ldr	r3, [r7, #0]
 80067f4:	2b04      	cmp	r3, #4
 80067f6:	d104      	bne.n	8006802 <HAL_TIM_OC_Start+0xc6>
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	2202      	movs	r2, #2
 80067fc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006800:	e01b      	b.n	800683a <HAL_TIM_OC_Start+0xfe>
 8006802:	683b      	ldr	r3, [r7, #0]
 8006804:	2b08      	cmp	r3, #8
 8006806:	d104      	bne.n	8006812 <HAL_TIM_OC_Start+0xd6>
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	2202      	movs	r2, #2
 800680c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006810:	e013      	b.n	800683a <HAL_TIM_OC_Start+0xfe>
 8006812:	683b      	ldr	r3, [r7, #0]
 8006814:	2b0c      	cmp	r3, #12
 8006816:	d104      	bne.n	8006822 <HAL_TIM_OC_Start+0xe6>
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	2202      	movs	r2, #2
 800681c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006820:	e00b      	b.n	800683a <HAL_TIM_OC_Start+0xfe>
 8006822:	683b      	ldr	r3, [r7, #0]
 8006824:	2b10      	cmp	r3, #16
 8006826:	d104      	bne.n	8006832 <HAL_TIM_OC_Start+0xf6>
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	2202      	movs	r2, #2
 800682c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006830:	e003      	b.n	800683a <HAL_TIM_OC_Start+0xfe>
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	2202      	movs	r2, #2
 8006836:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Output compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	2201      	movs	r2, #1
 8006840:	6839      	ldr	r1, [r7, #0]
 8006842:	4618      	mov	r0, r3
 8006844:	f001 fe76 	bl	8008534 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	4a3a      	ldr	r2, [pc, #232]	; (8006938 <HAL_TIM_OC_Start+0x1fc>)
 800684e:	4293      	cmp	r3, r2
 8006850:	d018      	beq.n	8006884 <HAL_TIM_OC_Start+0x148>
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	4a39      	ldr	r2, [pc, #228]	; (800693c <HAL_TIM_OC_Start+0x200>)
 8006858:	4293      	cmp	r3, r2
 800685a:	d013      	beq.n	8006884 <HAL_TIM_OC_Start+0x148>
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	4a37      	ldr	r2, [pc, #220]	; (8006940 <HAL_TIM_OC_Start+0x204>)
 8006862:	4293      	cmp	r3, r2
 8006864:	d00e      	beq.n	8006884 <HAL_TIM_OC_Start+0x148>
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	4a36      	ldr	r2, [pc, #216]	; (8006944 <HAL_TIM_OC_Start+0x208>)
 800686c:	4293      	cmp	r3, r2
 800686e:	d009      	beq.n	8006884 <HAL_TIM_OC_Start+0x148>
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	4a34      	ldr	r2, [pc, #208]	; (8006948 <HAL_TIM_OC_Start+0x20c>)
 8006876:	4293      	cmp	r3, r2
 8006878:	d004      	beq.n	8006884 <HAL_TIM_OC_Start+0x148>
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	4a33      	ldr	r2, [pc, #204]	; (800694c <HAL_TIM_OC_Start+0x210>)
 8006880:	4293      	cmp	r3, r2
 8006882:	d101      	bne.n	8006888 <HAL_TIM_OC_Start+0x14c>
 8006884:	2301      	movs	r3, #1
 8006886:	e000      	b.n	800688a <HAL_TIM_OC_Start+0x14e>
 8006888:	2300      	movs	r3, #0
 800688a:	2b00      	cmp	r3, #0
 800688c:	d007      	beq.n	800689e <HAL_TIM_OC_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800689c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	4a25      	ldr	r2, [pc, #148]	; (8006938 <HAL_TIM_OC_Start+0x1fc>)
 80068a4:	4293      	cmp	r3, r2
 80068a6:	d022      	beq.n	80068ee <HAL_TIM_OC_Start+0x1b2>
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80068b0:	d01d      	beq.n	80068ee <HAL_TIM_OC_Start+0x1b2>
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	4a26      	ldr	r2, [pc, #152]	; (8006950 <HAL_TIM_OC_Start+0x214>)
 80068b8:	4293      	cmp	r3, r2
 80068ba:	d018      	beq.n	80068ee <HAL_TIM_OC_Start+0x1b2>
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	4a24      	ldr	r2, [pc, #144]	; (8006954 <HAL_TIM_OC_Start+0x218>)
 80068c2:	4293      	cmp	r3, r2
 80068c4:	d013      	beq.n	80068ee <HAL_TIM_OC_Start+0x1b2>
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	4a23      	ldr	r2, [pc, #140]	; (8006958 <HAL_TIM_OC_Start+0x21c>)
 80068cc:	4293      	cmp	r3, r2
 80068ce:	d00e      	beq.n	80068ee <HAL_TIM_OC_Start+0x1b2>
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	4a19      	ldr	r2, [pc, #100]	; (800693c <HAL_TIM_OC_Start+0x200>)
 80068d6:	4293      	cmp	r3, r2
 80068d8:	d009      	beq.n	80068ee <HAL_TIM_OC_Start+0x1b2>
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	4a18      	ldr	r2, [pc, #96]	; (8006940 <HAL_TIM_OC_Start+0x204>)
 80068e0:	4293      	cmp	r3, r2
 80068e2:	d004      	beq.n	80068ee <HAL_TIM_OC_Start+0x1b2>
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	4a18      	ldr	r2, [pc, #96]	; (800694c <HAL_TIM_OC_Start+0x210>)
 80068ea:	4293      	cmp	r3, r2
 80068ec:	d115      	bne.n	800691a <HAL_TIM_OC_Start+0x1de>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	689a      	ldr	r2, [r3, #8]
 80068f4:	4b19      	ldr	r3, [pc, #100]	; (800695c <HAL_TIM_OC_Start+0x220>)
 80068f6:	4013      	ands	r3, r2
 80068f8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80068fa:	68fb      	ldr	r3, [r7, #12]
 80068fc:	2b06      	cmp	r3, #6
 80068fe:	d015      	beq.n	800692c <HAL_TIM_OC_Start+0x1f0>
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006906:	d011      	beq.n	800692c <HAL_TIM_OC_Start+0x1f0>
    {
      __HAL_TIM_ENABLE(htim);
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	681a      	ldr	r2, [r3, #0]
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	f042 0201 	orr.w	r2, r2, #1
 8006916:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006918:	e008      	b.n	800692c <HAL_TIM_OC_Start+0x1f0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	681a      	ldr	r2, [r3, #0]
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	f042 0201 	orr.w	r2, r2, #1
 8006928:	601a      	str	r2, [r3, #0]
 800692a:	e000      	b.n	800692e <HAL_TIM_OC_Start+0x1f2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800692c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800692e:	2300      	movs	r3, #0
}
 8006930:	4618      	mov	r0, r3
 8006932:	3710      	adds	r7, #16
 8006934:	46bd      	mov	sp, r7
 8006936:	bd80      	pop	{r7, pc}
 8006938:	40012c00 	.word	0x40012c00
 800693c:	40013400 	.word	0x40013400
 8006940:	40014000 	.word	0x40014000
 8006944:	40014400 	.word	0x40014400
 8006948:	40014800 	.word	0x40014800
 800694c:	40015000 	.word	0x40015000
 8006950:	40000400 	.word	0x40000400
 8006954:	40000800 	.word	0x40000800
 8006958:	40000c00 	.word	0x40000c00
 800695c:	00010007 	.word	0x00010007

08006960 <HAL_TIM_OC_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006960:	b580      	push	{r7, lr}
 8006962:	b082      	sub	sp, #8
 8006964:	af00      	add	r7, sp, #0
 8006966:	6078      	str	r0, [r7, #4]
 8006968:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Output compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	2200      	movs	r2, #0
 8006970:	6839      	ldr	r1, [r7, #0]
 8006972:	4618      	mov	r0, r3
 8006974:	f001 fdde 	bl	8008534 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	4a40      	ldr	r2, [pc, #256]	; (8006a80 <HAL_TIM_OC_Stop+0x120>)
 800697e:	4293      	cmp	r3, r2
 8006980:	d018      	beq.n	80069b4 <HAL_TIM_OC_Stop+0x54>
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	4a3f      	ldr	r2, [pc, #252]	; (8006a84 <HAL_TIM_OC_Stop+0x124>)
 8006988:	4293      	cmp	r3, r2
 800698a:	d013      	beq.n	80069b4 <HAL_TIM_OC_Stop+0x54>
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	4a3d      	ldr	r2, [pc, #244]	; (8006a88 <HAL_TIM_OC_Stop+0x128>)
 8006992:	4293      	cmp	r3, r2
 8006994:	d00e      	beq.n	80069b4 <HAL_TIM_OC_Stop+0x54>
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	4a3c      	ldr	r2, [pc, #240]	; (8006a8c <HAL_TIM_OC_Stop+0x12c>)
 800699c:	4293      	cmp	r3, r2
 800699e:	d009      	beq.n	80069b4 <HAL_TIM_OC_Stop+0x54>
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	4a3a      	ldr	r2, [pc, #232]	; (8006a90 <HAL_TIM_OC_Stop+0x130>)
 80069a6:	4293      	cmp	r3, r2
 80069a8:	d004      	beq.n	80069b4 <HAL_TIM_OC_Stop+0x54>
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	4a39      	ldr	r2, [pc, #228]	; (8006a94 <HAL_TIM_OC_Stop+0x134>)
 80069b0:	4293      	cmp	r3, r2
 80069b2:	d101      	bne.n	80069b8 <HAL_TIM_OC_Stop+0x58>
 80069b4:	2301      	movs	r3, #1
 80069b6:	e000      	b.n	80069ba <HAL_TIM_OC_Stop+0x5a>
 80069b8:	2300      	movs	r3, #0
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	d017      	beq.n	80069ee <HAL_TIM_OC_Stop+0x8e>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	6a1a      	ldr	r2, [r3, #32]
 80069c4:	f241 1311 	movw	r3, #4369	; 0x1111
 80069c8:	4013      	ands	r3, r2
 80069ca:	2b00      	cmp	r3, #0
 80069cc:	d10f      	bne.n	80069ee <HAL_TIM_OC_Stop+0x8e>
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	6a1a      	ldr	r2, [r3, #32]
 80069d4:	f244 4344 	movw	r3, #17476	; 0x4444
 80069d8:	4013      	ands	r3, r2
 80069da:	2b00      	cmp	r3, #0
 80069dc:	d107      	bne.n	80069ee <HAL_TIM_OC_Stop+0x8e>
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80069ec:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	6a1a      	ldr	r2, [r3, #32]
 80069f4:	f241 1311 	movw	r3, #4369	; 0x1111
 80069f8:	4013      	ands	r3, r2
 80069fa:	2b00      	cmp	r3, #0
 80069fc:	d10f      	bne.n	8006a1e <HAL_TIM_OC_Stop+0xbe>
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	6a1a      	ldr	r2, [r3, #32]
 8006a04:	f244 4344 	movw	r3, #17476	; 0x4444
 8006a08:	4013      	ands	r3, r2
 8006a0a:	2b00      	cmp	r3, #0
 8006a0c:	d107      	bne.n	8006a1e <HAL_TIM_OC_Stop+0xbe>
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	681a      	ldr	r2, [r3, #0]
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	f022 0201 	bic.w	r2, r2, #1
 8006a1c:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8006a1e:	683b      	ldr	r3, [r7, #0]
 8006a20:	2b00      	cmp	r3, #0
 8006a22:	d104      	bne.n	8006a2e <HAL_TIM_OC_Stop+0xce>
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	2201      	movs	r2, #1
 8006a28:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006a2c:	e023      	b.n	8006a76 <HAL_TIM_OC_Stop+0x116>
 8006a2e:	683b      	ldr	r3, [r7, #0]
 8006a30:	2b04      	cmp	r3, #4
 8006a32:	d104      	bne.n	8006a3e <HAL_TIM_OC_Stop+0xde>
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	2201      	movs	r2, #1
 8006a38:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006a3c:	e01b      	b.n	8006a76 <HAL_TIM_OC_Stop+0x116>
 8006a3e:	683b      	ldr	r3, [r7, #0]
 8006a40:	2b08      	cmp	r3, #8
 8006a42:	d104      	bne.n	8006a4e <HAL_TIM_OC_Stop+0xee>
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	2201      	movs	r2, #1
 8006a48:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006a4c:	e013      	b.n	8006a76 <HAL_TIM_OC_Stop+0x116>
 8006a4e:	683b      	ldr	r3, [r7, #0]
 8006a50:	2b0c      	cmp	r3, #12
 8006a52:	d104      	bne.n	8006a5e <HAL_TIM_OC_Stop+0xfe>
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	2201      	movs	r2, #1
 8006a58:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006a5c:	e00b      	b.n	8006a76 <HAL_TIM_OC_Stop+0x116>
 8006a5e:	683b      	ldr	r3, [r7, #0]
 8006a60:	2b10      	cmp	r3, #16
 8006a62:	d104      	bne.n	8006a6e <HAL_TIM_OC_Stop+0x10e>
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	2201      	movs	r2, #1
 8006a68:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006a6c:	e003      	b.n	8006a76 <HAL_TIM_OC_Stop+0x116>
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	2201      	movs	r2, #1
 8006a72:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Return function status */
  return HAL_OK;
 8006a76:	2300      	movs	r3, #0
}
 8006a78:	4618      	mov	r0, r3
 8006a7a:	3708      	adds	r7, #8
 8006a7c:	46bd      	mov	sp, r7
 8006a7e:	bd80      	pop	{r7, pc}
 8006a80:	40012c00 	.word	0x40012c00
 8006a84:	40013400 	.word	0x40013400
 8006a88:	40014000 	.word	0x40014000
 8006a8c:	40014400 	.word	0x40014400
 8006a90:	40014800 	.word	0x40014800
 8006a94:	40015000 	.word	0x40015000

08006a98 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8006a98:	b580      	push	{r7, lr}
 8006a9a:	b082      	sub	sp, #8
 8006a9c:	af00      	add	r7, sp, #0
 8006a9e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	2b00      	cmp	r3, #0
 8006aa4:	d101      	bne.n	8006aaa <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8006aa6:	2301      	movs	r3, #1
 8006aa8:	e049      	b.n	8006b3e <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006ab0:	b2db      	uxtb	r3, r3
 8006ab2:	2b00      	cmp	r3, #0
 8006ab4:	d106      	bne.n	8006ac4 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	2200      	movs	r2, #0
 8006aba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8006abe:	6878      	ldr	r0, [r7, #4]
 8006ac0:	f000 f841 	bl	8006b46 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	2202      	movs	r2, #2
 8006ac8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	681a      	ldr	r2, [r3, #0]
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	3304      	adds	r3, #4
 8006ad4:	4619      	mov	r1, r3
 8006ad6:	4610      	mov	r0, r2
 8006ad8:	f000 febe 	bl	8007858 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	2201      	movs	r2, #1
 8006ae0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	2201      	movs	r2, #1
 8006ae8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	2201      	movs	r2, #1
 8006af0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	2201      	movs	r2, #1
 8006af8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	2201      	movs	r2, #1
 8006b00:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	2201      	movs	r2, #1
 8006b08:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	2201      	movs	r2, #1
 8006b10:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	2201      	movs	r2, #1
 8006b18:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	2201      	movs	r2, #1
 8006b20:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	2201      	movs	r2, #1
 8006b28:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	2201      	movs	r2, #1
 8006b30:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	2201      	movs	r2, #1
 8006b38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006b3c:	2300      	movs	r3, #0
}
 8006b3e:	4618      	mov	r0, r3
 8006b40:	3708      	adds	r7, #8
 8006b42:	46bd      	mov	sp, r7
 8006b44:	bd80      	pop	{r7, pc}

08006b46 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8006b46:	b480      	push	{r7}
 8006b48:	b083      	sub	sp, #12
 8006b4a:	af00      	add	r7, sp, #0
 8006b4c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8006b4e:	bf00      	nop
 8006b50:	370c      	adds	r7, #12
 8006b52:	46bd      	mov	sp, r7
 8006b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b58:	4770      	bx	lr
	...

08006b5c <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006b5c:	b580      	push	{r7, lr}
 8006b5e:	b084      	sub	sp, #16
 8006b60:	af00      	add	r7, sp, #0
 8006b62:	6078      	str	r0, [r7, #4]
 8006b64:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006b66:	2300      	movs	r3, #0
 8006b68:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8006b6a:	683b      	ldr	r3, [r7, #0]
 8006b6c:	2b00      	cmp	r3, #0
 8006b6e:	d104      	bne.n	8006b7a <HAL_TIM_IC_Start_IT+0x1e>
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006b76:	b2db      	uxtb	r3, r3
 8006b78:	e023      	b.n	8006bc2 <HAL_TIM_IC_Start_IT+0x66>
 8006b7a:	683b      	ldr	r3, [r7, #0]
 8006b7c:	2b04      	cmp	r3, #4
 8006b7e:	d104      	bne.n	8006b8a <HAL_TIM_IC_Start_IT+0x2e>
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006b86:	b2db      	uxtb	r3, r3
 8006b88:	e01b      	b.n	8006bc2 <HAL_TIM_IC_Start_IT+0x66>
 8006b8a:	683b      	ldr	r3, [r7, #0]
 8006b8c:	2b08      	cmp	r3, #8
 8006b8e:	d104      	bne.n	8006b9a <HAL_TIM_IC_Start_IT+0x3e>
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006b96:	b2db      	uxtb	r3, r3
 8006b98:	e013      	b.n	8006bc2 <HAL_TIM_IC_Start_IT+0x66>
 8006b9a:	683b      	ldr	r3, [r7, #0]
 8006b9c:	2b0c      	cmp	r3, #12
 8006b9e:	d104      	bne.n	8006baa <HAL_TIM_IC_Start_IT+0x4e>
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006ba6:	b2db      	uxtb	r3, r3
 8006ba8:	e00b      	b.n	8006bc2 <HAL_TIM_IC_Start_IT+0x66>
 8006baa:	683b      	ldr	r3, [r7, #0]
 8006bac:	2b10      	cmp	r3, #16
 8006bae:	d104      	bne.n	8006bba <HAL_TIM_IC_Start_IT+0x5e>
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006bb6:	b2db      	uxtb	r3, r3
 8006bb8:	e003      	b.n	8006bc2 <HAL_TIM_IC_Start_IT+0x66>
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8006bc0:	b2db      	uxtb	r3, r3
 8006bc2:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8006bc4:	683b      	ldr	r3, [r7, #0]
 8006bc6:	2b00      	cmp	r3, #0
 8006bc8:	d104      	bne.n	8006bd4 <HAL_TIM_IC_Start_IT+0x78>
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006bd0:	b2db      	uxtb	r3, r3
 8006bd2:	e013      	b.n	8006bfc <HAL_TIM_IC_Start_IT+0xa0>
 8006bd4:	683b      	ldr	r3, [r7, #0]
 8006bd6:	2b04      	cmp	r3, #4
 8006bd8:	d104      	bne.n	8006be4 <HAL_TIM_IC_Start_IT+0x88>
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006be0:	b2db      	uxtb	r3, r3
 8006be2:	e00b      	b.n	8006bfc <HAL_TIM_IC_Start_IT+0xa0>
 8006be4:	683b      	ldr	r3, [r7, #0]
 8006be6:	2b08      	cmp	r3, #8
 8006be8:	d104      	bne.n	8006bf4 <HAL_TIM_IC_Start_IT+0x98>
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8006bf0:	b2db      	uxtb	r3, r3
 8006bf2:	e003      	b.n	8006bfc <HAL_TIM_IC_Start_IT+0xa0>
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 8006bfa:	b2db      	uxtb	r3, r3
 8006bfc:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8006bfe:	7bbb      	ldrb	r3, [r7, #14]
 8006c00:	2b01      	cmp	r3, #1
 8006c02:	d102      	bne.n	8006c0a <HAL_TIM_IC_Start_IT+0xae>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8006c04:	7b7b      	ldrb	r3, [r7, #13]
 8006c06:	2b01      	cmp	r3, #1
 8006c08:	d001      	beq.n	8006c0e <HAL_TIM_IC_Start_IT+0xb2>
  {
    return HAL_ERROR;
 8006c0a:	2301      	movs	r3, #1
 8006c0c:	e0e2      	b.n	8006dd4 <HAL_TIM_IC_Start_IT+0x278>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006c0e:	683b      	ldr	r3, [r7, #0]
 8006c10:	2b00      	cmp	r3, #0
 8006c12:	d104      	bne.n	8006c1e <HAL_TIM_IC_Start_IT+0xc2>
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	2202      	movs	r2, #2
 8006c18:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006c1c:	e023      	b.n	8006c66 <HAL_TIM_IC_Start_IT+0x10a>
 8006c1e:	683b      	ldr	r3, [r7, #0]
 8006c20:	2b04      	cmp	r3, #4
 8006c22:	d104      	bne.n	8006c2e <HAL_TIM_IC_Start_IT+0xd2>
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	2202      	movs	r2, #2
 8006c28:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006c2c:	e01b      	b.n	8006c66 <HAL_TIM_IC_Start_IT+0x10a>
 8006c2e:	683b      	ldr	r3, [r7, #0]
 8006c30:	2b08      	cmp	r3, #8
 8006c32:	d104      	bne.n	8006c3e <HAL_TIM_IC_Start_IT+0xe2>
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	2202      	movs	r2, #2
 8006c38:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006c3c:	e013      	b.n	8006c66 <HAL_TIM_IC_Start_IT+0x10a>
 8006c3e:	683b      	ldr	r3, [r7, #0]
 8006c40:	2b0c      	cmp	r3, #12
 8006c42:	d104      	bne.n	8006c4e <HAL_TIM_IC_Start_IT+0xf2>
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	2202      	movs	r2, #2
 8006c48:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006c4c:	e00b      	b.n	8006c66 <HAL_TIM_IC_Start_IT+0x10a>
 8006c4e:	683b      	ldr	r3, [r7, #0]
 8006c50:	2b10      	cmp	r3, #16
 8006c52:	d104      	bne.n	8006c5e <HAL_TIM_IC_Start_IT+0x102>
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	2202      	movs	r2, #2
 8006c58:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006c5c:	e003      	b.n	8006c66 <HAL_TIM_IC_Start_IT+0x10a>
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	2202      	movs	r2, #2
 8006c62:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006c66:	683b      	ldr	r3, [r7, #0]
 8006c68:	2b00      	cmp	r3, #0
 8006c6a:	d104      	bne.n	8006c76 <HAL_TIM_IC_Start_IT+0x11a>
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	2202      	movs	r2, #2
 8006c70:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006c74:	e013      	b.n	8006c9e <HAL_TIM_IC_Start_IT+0x142>
 8006c76:	683b      	ldr	r3, [r7, #0]
 8006c78:	2b04      	cmp	r3, #4
 8006c7a:	d104      	bne.n	8006c86 <HAL_TIM_IC_Start_IT+0x12a>
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	2202      	movs	r2, #2
 8006c80:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006c84:	e00b      	b.n	8006c9e <HAL_TIM_IC_Start_IT+0x142>
 8006c86:	683b      	ldr	r3, [r7, #0]
 8006c88:	2b08      	cmp	r3, #8
 8006c8a:	d104      	bne.n	8006c96 <HAL_TIM_IC_Start_IT+0x13a>
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	2202      	movs	r2, #2
 8006c90:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006c94:	e003      	b.n	8006c9e <HAL_TIM_IC_Start_IT+0x142>
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	2202      	movs	r2, #2
 8006c9a:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  switch (Channel)
 8006c9e:	683b      	ldr	r3, [r7, #0]
 8006ca0:	2b0c      	cmp	r3, #12
 8006ca2:	d841      	bhi.n	8006d28 <HAL_TIM_IC_Start_IT+0x1cc>
 8006ca4:	a201      	add	r2, pc, #4	; (adr r2, 8006cac <HAL_TIM_IC_Start_IT+0x150>)
 8006ca6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006caa:	bf00      	nop
 8006cac:	08006ce1 	.word	0x08006ce1
 8006cb0:	08006d29 	.word	0x08006d29
 8006cb4:	08006d29 	.word	0x08006d29
 8006cb8:	08006d29 	.word	0x08006d29
 8006cbc:	08006cf3 	.word	0x08006cf3
 8006cc0:	08006d29 	.word	0x08006d29
 8006cc4:	08006d29 	.word	0x08006d29
 8006cc8:	08006d29 	.word	0x08006d29
 8006ccc:	08006d05 	.word	0x08006d05
 8006cd0:	08006d29 	.word	0x08006d29
 8006cd4:	08006d29 	.word	0x08006d29
 8006cd8:	08006d29 	.word	0x08006d29
 8006cdc:	08006d17 	.word	0x08006d17
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	68da      	ldr	r2, [r3, #12]
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	f042 0202 	orr.w	r2, r2, #2
 8006cee:	60da      	str	r2, [r3, #12]
      break;
 8006cf0:	e01d      	b.n	8006d2e <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	68da      	ldr	r2, [r3, #12]
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	f042 0204 	orr.w	r2, r2, #4
 8006d00:	60da      	str	r2, [r3, #12]
      break;
 8006d02:	e014      	b.n	8006d2e <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	68da      	ldr	r2, [r3, #12]
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	f042 0208 	orr.w	r2, r2, #8
 8006d12:	60da      	str	r2, [r3, #12]
      break;
 8006d14:	e00b      	b.n	8006d2e <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	68da      	ldr	r2, [r3, #12]
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	f042 0210 	orr.w	r2, r2, #16
 8006d24:	60da      	str	r2, [r3, #12]
      break;
 8006d26:	e002      	b.n	8006d2e <HAL_TIM_IC_Start_IT+0x1d2>
    }

    default:
      status = HAL_ERROR;
 8006d28:	2301      	movs	r3, #1
 8006d2a:	73fb      	strb	r3, [r7, #15]
      break;
 8006d2c:	bf00      	nop
  }

  if (status == HAL_OK)
 8006d2e:	7bfb      	ldrb	r3, [r7, #15]
 8006d30:	2b00      	cmp	r3, #0
 8006d32:	d14e      	bne.n	8006dd2 <HAL_TIM_IC_Start_IT+0x276>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	2201      	movs	r2, #1
 8006d3a:	6839      	ldr	r1, [r7, #0]
 8006d3c:	4618      	mov	r0, r3
 8006d3e:	f001 fbf9 	bl	8008534 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	4a25      	ldr	r2, [pc, #148]	; (8006ddc <HAL_TIM_IC_Start_IT+0x280>)
 8006d48:	4293      	cmp	r3, r2
 8006d4a:	d022      	beq.n	8006d92 <HAL_TIM_IC_Start_IT+0x236>
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006d54:	d01d      	beq.n	8006d92 <HAL_TIM_IC_Start_IT+0x236>
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	4a21      	ldr	r2, [pc, #132]	; (8006de0 <HAL_TIM_IC_Start_IT+0x284>)
 8006d5c:	4293      	cmp	r3, r2
 8006d5e:	d018      	beq.n	8006d92 <HAL_TIM_IC_Start_IT+0x236>
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	4a1f      	ldr	r2, [pc, #124]	; (8006de4 <HAL_TIM_IC_Start_IT+0x288>)
 8006d66:	4293      	cmp	r3, r2
 8006d68:	d013      	beq.n	8006d92 <HAL_TIM_IC_Start_IT+0x236>
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	4a1e      	ldr	r2, [pc, #120]	; (8006de8 <HAL_TIM_IC_Start_IT+0x28c>)
 8006d70:	4293      	cmp	r3, r2
 8006d72:	d00e      	beq.n	8006d92 <HAL_TIM_IC_Start_IT+0x236>
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	4a1c      	ldr	r2, [pc, #112]	; (8006dec <HAL_TIM_IC_Start_IT+0x290>)
 8006d7a:	4293      	cmp	r3, r2
 8006d7c:	d009      	beq.n	8006d92 <HAL_TIM_IC_Start_IT+0x236>
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	4a1b      	ldr	r2, [pc, #108]	; (8006df0 <HAL_TIM_IC_Start_IT+0x294>)
 8006d84:	4293      	cmp	r3, r2
 8006d86:	d004      	beq.n	8006d92 <HAL_TIM_IC_Start_IT+0x236>
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	4a19      	ldr	r2, [pc, #100]	; (8006df4 <HAL_TIM_IC_Start_IT+0x298>)
 8006d8e:	4293      	cmp	r3, r2
 8006d90:	d115      	bne.n	8006dbe <HAL_TIM_IC_Start_IT+0x262>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	689a      	ldr	r2, [r3, #8]
 8006d98:	4b17      	ldr	r3, [pc, #92]	; (8006df8 <HAL_TIM_IC_Start_IT+0x29c>)
 8006d9a:	4013      	ands	r3, r2
 8006d9c:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006d9e:	68bb      	ldr	r3, [r7, #8]
 8006da0:	2b06      	cmp	r3, #6
 8006da2:	d015      	beq.n	8006dd0 <HAL_TIM_IC_Start_IT+0x274>
 8006da4:	68bb      	ldr	r3, [r7, #8]
 8006da6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006daa:	d011      	beq.n	8006dd0 <HAL_TIM_IC_Start_IT+0x274>
      {
        __HAL_TIM_ENABLE(htim);
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	681a      	ldr	r2, [r3, #0]
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	f042 0201 	orr.w	r2, r2, #1
 8006dba:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006dbc:	e008      	b.n	8006dd0 <HAL_TIM_IC_Start_IT+0x274>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	681a      	ldr	r2, [r3, #0]
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	f042 0201 	orr.w	r2, r2, #1
 8006dcc:	601a      	str	r2, [r3, #0]
 8006dce:	e000      	b.n	8006dd2 <HAL_TIM_IC_Start_IT+0x276>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006dd0:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 8006dd2:	7bfb      	ldrb	r3, [r7, #15]
}
 8006dd4:	4618      	mov	r0, r3
 8006dd6:	3710      	adds	r7, #16
 8006dd8:	46bd      	mov	sp, r7
 8006dda:	bd80      	pop	{r7, pc}
 8006ddc:	40012c00 	.word	0x40012c00
 8006de0:	40000400 	.word	0x40000400
 8006de4:	40000800 	.word	0x40000800
 8006de8:	40000c00 	.word	0x40000c00
 8006dec:	40013400 	.word	0x40013400
 8006df0:	40014000 	.word	0x40014000
 8006df4:	40015000 	.word	0x40015000
 8006df8:	00010007 	.word	0x00010007

08006dfc <HAL_TIM_IC_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006dfc:	b580      	push	{r7, lr}
 8006dfe:	b084      	sub	sp, #16
 8006e00:	af00      	add	r7, sp, #0
 8006e02:	6078      	str	r0, [r7, #4]
 8006e04:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006e06:	2300      	movs	r3, #0
 8006e08:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8006e0a:	683b      	ldr	r3, [r7, #0]
 8006e0c:	2b0c      	cmp	r3, #12
 8006e0e:	d841      	bhi.n	8006e94 <HAL_TIM_IC_Stop_IT+0x98>
 8006e10:	a201      	add	r2, pc, #4	; (adr r2, 8006e18 <HAL_TIM_IC_Stop_IT+0x1c>)
 8006e12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e16:	bf00      	nop
 8006e18:	08006e4d 	.word	0x08006e4d
 8006e1c:	08006e95 	.word	0x08006e95
 8006e20:	08006e95 	.word	0x08006e95
 8006e24:	08006e95 	.word	0x08006e95
 8006e28:	08006e5f 	.word	0x08006e5f
 8006e2c:	08006e95 	.word	0x08006e95
 8006e30:	08006e95 	.word	0x08006e95
 8006e34:	08006e95 	.word	0x08006e95
 8006e38:	08006e71 	.word	0x08006e71
 8006e3c:	08006e95 	.word	0x08006e95
 8006e40:	08006e95 	.word	0x08006e95
 8006e44:	08006e95 	.word	0x08006e95
 8006e48:	08006e83 	.word	0x08006e83
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	68da      	ldr	r2, [r3, #12]
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	f022 0202 	bic.w	r2, r2, #2
 8006e5a:	60da      	str	r2, [r3, #12]
      break;
 8006e5c:	e01d      	b.n	8006e9a <HAL_TIM_IC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	68da      	ldr	r2, [r3, #12]
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	f022 0204 	bic.w	r2, r2, #4
 8006e6c:	60da      	str	r2, [r3, #12]
      break;
 8006e6e:	e014      	b.n	8006e9a <HAL_TIM_IC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	68da      	ldr	r2, [r3, #12]
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	f022 0208 	bic.w	r2, r2, #8
 8006e7e:	60da      	str	r2, [r3, #12]
      break;
 8006e80:	e00b      	b.n	8006e9a <HAL_TIM_IC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	68da      	ldr	r2, [r3, #12]
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	f022 0210 	bic.w	r2, r2, #16
 8006e90:	60da      	str	r2, [r3, #12]
      break;
 8006e92:	e002      	b.n	8006e9a <HAL_TIM_IC_Stop_IT+0x9e>
    }

    default:
      status = HAL_ERROR;
 8006e94:	2301      	movs	r3, #1
 8006e96:	73fb      	strb	r3, [r7, #15]
      break;
 8006e98:	bf00      	nop
  }

  if (status == HAL_OK)
 8006e9a:	7bfb      	ldrb	r3, [r7, #15]
 8006e9c:	2b00      	cmp	r3, #0
 8006e9e:	d166      	bne.n	8006f6e <HAL_TIM_IC_Stop_IT+0x172>
  {
    /* Disable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	2200      	movs	r2, #0
 8006ea6:	6839      	ldr	r1, [r7, #0]
 8006ea8:	4618      	mov	r0, r3
 8006eaa:	f001 fb43 	bl	8008534 <TIM_CCxChannelCmd>

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	6a1a      	ldr	r2, [r3, #32]
 8006eb4:	f241 1311 	movw	r3, #4369	; 0x1111
 8006eb8:	4013      	ands	r3, r2
 8006eba:	2b00      	cmp	r3, #0
 8006ebc:	d10f      	bne.n	8006ede <HAL_TIM_IC_Stop_IT+0xe2>
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	6a1a      	ldr	r2, [r3, #32]
 8006ec4:	f244 4344 	movw	r3, #17476	; 0x4444
 8006ec8:	4013      	ands	r3, r2
 8006eca:	2b00      	cmp	r3, #0
 8006ecc:	d107      	bne.n	8006ede <HAL_TIM_IC_Stop_IT+0xe2>
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	681a      	ldr	r2, [r3, #0]
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	f022 0201 	bic.w	r2, r2, #1
 8006edc:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8006ede:	683b      	ldr	r3, [r7, #0]
 8006ee0:	2b00      	cmp	r3, #0
 8006ee2:	d104      	bne.n	8006eee <HAL_TIM_IC_Stop_IT+0xf2>
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	2201      	movs	r2, #1
 8006ee8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006eec:	e023      	b.n	8006f36 <HAL_TIM_IC_Stop_IT+0x13a>
 8006eee:	683b      	ldr	r3, [r7, #0]
 8006ef0:	2b04      	cmp	r3, #4
 8006ef2:	d104      	bne.n	8006efe <HAL_TIM_IC_Stop_IT+0x102>
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	2201      	movs	r2, #1
 8006ef8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006efc:	e01b      	b.n	8006f36 <HAL_TIM_IC_Stop_IT+0x13a>
 8006efe:	683b      	ldr	r3, [r7, #0]
 8006f00:	2b08      	cmp	r3, #8
 8006f02:	d104      	bne.n	8006f0e <HAL_TIM_IC_Stop_IT+0x112>
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	2201      	movs	r2, #1
 8006f08:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006f0c:	e013      	b.n	8006f36 <HAL_TIM_IC_Stop_IT+0x13a>
 8006f0e:	683b      	ldr	r3, [r7, #0]
 8006f10:	2b0c      	cmp	r3, #12
 8006f12:	d104      	bne.n	8006f1e <HAL_TIM_IC_Stop_IT+0x122>
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	2201      	movs	r2, #1
 8006f18:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006f1c:	e00b      	b.n	8006f36 <HAL_TIM_IC_Stop_IT+0x13a>
 8006f1e:	683b      	ldr	r3, [r7, #0]
 8006f20:	2b10      	cmp	r3, #16
 8006f22:	d104      	bne.n	8006f2e <HAL_TIM_IC_Stop_IT+0x132>
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	2201      	movs	r2, #1
 8006f28:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006f2c:	e003      	b.n	8006f36 <HAL_TIM_IC_Stop_IT+0x13a>
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	2201      	movs	r2, #1
 8006f32:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8006f36:	683b      	ldr	r3, [r7, #0]
 8006f38:	2b00      	cmp	r3, #0
 8006f3a:	d104      	bne.n	8006f46 <HAL_TIM_IC_Stop_IT+0x14a>
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	2201      	movs	r2, #1
 8006f40:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006f44:	e013      	b.n	8006f6e <HAL_TIM_IC_Stop_IT+0x172>
 8006f46:	683b      	ldr	r3, [r7, #0]
 8006f48:	2b04      	cmp	r3, #4
 8006f4a:	d104      	bne.n	8006f56 <HAL_TIM_IC_Stop_IT+0x15a>
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	2201      	movs	r2, #1
 8006f50:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006f54:	e00b      	b.n	8006f6e <HAL_TIM_IC_Stop_IT+0x172>
 8006f56:	683b      	ldr	r3, [r7, #0]
 8006f58:	2b08      	cmp	r3, #8
 8006f5a:	d104      	bne.n	8006f66 <HAL_TIM_IC_Stop_IT+0x16a>
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	2201      	movs	r2, #1
 8006f60:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006f64:	e003      	b.n	8006f6e <HAL_TIM_IC_Stop_IT+0x172>
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	2201      	movs	r2, #1
 8006f6a:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
  }

  /* Return function status */
  return status;
 8006f6e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f70:	4618      	mov	r0, r3
 8006f72:	3710      	adds	r7, #16
 8006f74:	46bd      	mov	sp, r7
 8006f76:	bd80      	pop	{r7, pc}

08006f78 <HAL_TIM_OnePulse_Init>:
  *            @arg TIM_OPMODE_SINGLE: Only one pulse will be generated.
  *            @arg TIM_OPMODE_REPETITIVE: Repetitive pulses will be generated.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Init(TIM_HandleTypeDef *htim, uint32_t OnePulseMode)
{
 8006f78:	b580      	push	{r7, lr}
 8006f7a:	b082      	sub	sp, #8
 8006f7c:	af00      	add	r7, sp, #0
 8006f7e:	6078      	str	r0, [r7, #4]
 8006f80:	6039      	str	r1, [r7, #0]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	2b00      	cmp	r3, #0
 8006f86:	d101      	bne.n	8006f8c <HAL_TIM_OnePulse_Init+0x14>
  {
    return HAL_ERROR;
 8006f88:	2301      	movs	r3, #1
 8006f8a:	e041      	b.n	8007010 <HAL_TIM_OnePulse_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_OPM_MODE(OnePulseMode));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006f92:	b2db      	uxtb	r3, r3
 8006f94:	2b00      	cmp	r3, #0
 8006f96:	d106      	bne.n	8006fa6 <HAL_TIM_OnePulse_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	2200      	movs	r2, #0
 8006f9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OnePulse_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OnePulse_MspInit(htim);
 8006fa0:	6878      	ldr	r0, [r7, #4]
 8006fa2:	f000 f839 	bl	8007018 <HAL_TIM_OnePulse_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	2202      	movs	r2, #2
 8006faa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Configure the Time base in the One Pulse Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	681a      	ldr	r2, [r3, #0]
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	3304      	adds	r3, #4
 8006fb6:	4619      	mov	r1, r3
 8006fb8:	4610      	mov	r0, r2
 8006fba:	f000 fc4d 	bl	8007858 <TIM_Base_SetConfig>

  /* Reset the OPM Bit */
  htim->Instance->CR1 &= ~TIM_CR1_OPM;
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	681a      	ldr	r2, [r3, #0]
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	f022 0208 	bic.w	r2, r2, #8
 8006fcc:	601a      	str	r2, [r3, #0]

  /* Configure the OPM Mode */
  htim->Instance->CR1 |= OnePulseMode;
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	6819      	ldr	r1, [r3, #0]
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	683a      	ldr	r2, [r7, #0]
 8006fda:	430a      	orrs	r2, r1
 8006fdc:	601a      	str	r2, [r3, #0]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	2201      	movs	r2, #1
 8006fe2:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	2201      	movs	r2, #1
 8006fea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	2201      	movs	r2, #1
 8006ff2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	2201      	movs	r2, #1
 8006ffa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	2201      	movs	r2, #1
 8007002:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	2201      	movs	r2, #1
 800700a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800700e:	2300      	movs	r3, #0
}
 8007010:	4618      	mov	r0, r3
 8007012:	3708      	adds	r7, #8
 8007014:	46bd      	mov	sp, r7
 8007016:	bd80      	pop	{r7, pc}

08007018 <HAL_TIM_OnePulse_MspInit>:
  * @brief  Initializes the TIM One Pulse MSP.
  * @param  htim TIM One Pulse handle
  * @retval None
  */
__weak void HAL_TIM_OnePulse_MspInit(TIM_HandleTypeDef *htim)
{
 8007018:	b480      	push	{r7}
 800701a:	b083      	sub	sp, #12
 800701c:	af00      	add	r7, sp, #0
 800701e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OnePulse_MspInit could be implemented in the user file
   */
}
 8007020:	bf00      	nop
 8007022:	370c      	adds	r7, #12
 8007024:	46bd      	mov	sp, r7
 8007026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800702a:	4770      	bx	lr

0800702c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800702c:	b580      	push	{r7, lr}
 800702e:	b082      	sub	sp, #8
 8007030:	af00      	add	r7, sp, #0
 8007032:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	691b      	ldr	r3, [r3, #16]
 800703a:	f003 0302 	and.w	r3, r3, #2
 800703e:	2b02      	cmp	r3, #2
 8007040:	d122      	bne.n	8007088 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	68db      	ldr	r3, [r3, #12]
 8007048:	f003 0302 	and.w	r3, r3, #2
 800704c:	2b02      	cmp	r3, #2
 800704e:	d11b      	bne.n	8007088 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	f06f 0202 	mvn.w	r2, #2
 8007058:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	2201      	movs	r2, #1
 800705e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	699b      	ldr	r3, [r3, #24]
 8007066:	f003 0303 	and.w	r3, r3, #3
 800706a:	2b00      	cmp	r3, #0
 800706c:	d003      	beq.n	8007076 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800706e:	6878      	ldr	r0, [r7, #4]
 8007070:	f000 fbd4 	bl	800781c <HAL_TIM_IC_CaptureCallback>
 8007074:	e005      	b.n	8007082 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007076:	6878      	ldr	r0, [r7, #4]
 8007078:	f000 fbc6 	bl	8007808 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800707c:	6878      	ldr	r0, [r7, #4]
 800707e:	f000 fbd7 	bl	8007830 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	2200      	movs	r2, #0
 8007086:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	691b      	ldr	r3, [r3, #16]
 800708e:	f003 0304 	and.w	r3, r3, #4
 8007092:	2b04      	cmp	r3, #4
 8007094:	d122      	bne.n	80070dc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	68db      	ldr	r3, [r3, #12]
 800709c:	f003 0304 	and.w	r3, r3, #4
 80070a0:	2b04      	cmp	r3, #4
 80070a2:	d11b      	bne.n	80070dc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	f06f 0204 	mvn.w	r2, #4
 80070ac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	2202      	movs	r2, #2
 80070b2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	699b      	ldr	r3, [r3, #24]
 80070ba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80070be:	2b00      	cmp	r3, #0
 80070c0:	d003      	beq.n	80070ca <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80070c2:	6878      	ldr	r0, [r7, #4]
 80070c4:	f000 fbaa 	bl	800781c <HAL_TIM_IC_CaptureCallback>
 80070c8:	e005      	b.n	80070d6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80070ca:	6878      	ldr	r0, [r7, #4]
 80070cc:	f000 fb9c 	bl	8007808 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80070d0:	6878      	ldr	r0, [r7, #4]
 80070d2:	f000 fbad 	bl	8007830 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	2200      	movs	r2, #0
 80070da:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	691b      	ldr	r3, [r3, #16]
 80070e2:	f003 0308 	and.w	r3, r3, #8
 80070e6:	2b08      	cmp	r3, #8
 80070e8:	d122      	bne.n	8007130 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	681b      	ldr	r3, [r3, #0]
 80070ee:	68db      	ldr	r3, [r3, #12]
 80070f0:	f003 0308 	and.w	r3, r3, #8
 80070f4:	2b08      	cmp	r3, #8
 80070f6:	d11b      	bne.n	8007130 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	f06f 0208 	mvn.w	r2, #8
 8007100:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	2204      	movs	r2, #4
 8007106:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	69db      	ldr	r3, [r3, #28]
 800710e:	f003 0303 	and.w	r3, r3, #3
 8007112:	2b00      	cmp	r3, #0
 8007114:	d003      	beq.n	800711e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007116:	6878      	ldr	r0, [r7, #4]
 8007118:	f000 fb80 	bl	800781c <HAL_TIM_IC_CaptureCallback>
 800711c:	e005      	b.n	800712a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800711e:	6878      	ldr	r0, [r7, #4]
 8007120:	f000 fb72 	bl	8007808 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007124:	6878      	ldr	r0, [r7, #4]
 8007126:	f000 fb83 	bl	8007830 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	2200      	movs	r2, #0
 800712e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	691b      	ldr	r3, [r3, #16]
 8007136:	f003 0310 	and.w	r3, r3, #16
 800713a:	2b10      	cmp	r3, #16
 800713c:	d122      	bne.n	8007184 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	68db      	ldr	r3, [r3, #12]
 8007144:	f003 0310 	and.w	r3, r3, #16
 8007148:	2b10      	cmp	r3, #16
 800714a:	d11b      	bne.n	8007184 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	f06f 0210 	mvn.w	r2, #16
 8007154:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	2208      	movs	r2, #8
 800715a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	69db      	ldr	r3, [r3, #28]
 8007162:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007166:	2b00      	cmp	r3, #0
 8007168:	d003      	beq.n	8007172 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800716a:	6878      	ldr	r0, [r7, #4]
 800716c:	f000 fb56 	bl	800781c <HAL_TIM_IC_CaptureCallback>
 8007170:	e005      	b.n	800717e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007172:	6878      	ldr	r0, [r7, #4]
 8007174:	f000 fb48 	bl	8007808 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007178:	6878      	ldr	r0, [r7, #4]
 800717a:	f000 fb59 	bl	8007830 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	2200      	movs	r2, #0
 8007182:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	691b      	ldr	r3, [r3, #16]
 800718a:	f003 0301 	and.w	r3, r3, #1
 800718e:	2b01      	cmp	r3, #1
 8007190:	d10e      	bne.n	80071b0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	68db      	ldr	r3, [r3, #12]
 8007198:	f003 0301 	and.w	r3, r3, #1
 800719c:	2b01      	cmp	r3, #1
 800719e:	d107      	bne.n	80071b0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	f06f 0201 	mvn.w	r2, #1
 80071a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80071aa:	6878      	ldr	r0, [r7, #4]
 80071ac:	f000 fb22 	bl	80077f4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	691b      	ldr	r3, [r3, #16]
 80071b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80071ba:	2b80      	cmp	r3, #128	; 0x80
 80071bc:	d10e      	bne.n	80071dc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	68db      	ldr	r3, [r3, #12]
 80071c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80071c8:	2b80      	cmp	r3, #128	; 0x80
 80071ca:	d107      	bne.n	80071dc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80071d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80071d6:	6878      	ldr	r0, [r7, #4]
 80071d8:	f001 fb24 	bl	8008824 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	691b      	ldr	r3, [r3, #16]
 80071e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80071e6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80071ea:	d10e      	bne.n	800720a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	68db      	ldr	r3, [r3, #12]
 80071f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80071f6:	2b80      	cmp	r3, #128	; 0x80
 80071f8:	d107      	bne.n	800720a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8007202:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8007204:	6878      	ldr	r0, [r7, #4]
 8007206:	f001 fb17 	bl	8008838 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	691b      	ldr	r3, [r3, #16]
 8007210:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007214:	2b40      	cmp	r3, #64	; 0x40
 8007216:	d10e      	bne.n	8007236 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	68db      	ldr	r3, [r3, #12]
 800721e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007222:	2b40      	cmp	r3, #64	; 0x40
 8007224:	d107      	bne.n	8007236 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800722e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007230:	6878      	ldr	r0, [r7, #4]
 8007232:	f000 fb07 	bl	8007844 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	691b      	ldr	r3, [r3, #16]
 800723c:	f003 0320 	and.w	r3, r3, #32
 8007240:	2b20      	cmp	r3, #32
 8007242:	d10e      	bne.n	8007262 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	68db      	ldr	r3, [r3, #12]
 800724a:	f003 0320 	and.w	r3, r3, #32
 800724e:	2b20      	cmp	r3, #32
 8007250:	d107      	bne.n	8007262 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	f06f 0220 	mvn.w	r2, #32
 800725a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800725c:	6878      	ldr	r0, [r7, #4]
 800725e:	f001 fad7 	bl	8008810 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	691b      	ldr	r3, [r3, #16]
 8007268:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800726c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007270:	d10f      	bne.n	8007292 <HAL_TIM_IRQHandler+0x266>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	68db      	ldr	r3, [r3, #12]
 8007278:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800727c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007280:	d107      	bne.n	8007292 <HAL_TIM_IRQHandler+0x266>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 800728a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 800728c:	6878      	ldr	r0, [r7, #4]
 800728e:	f001 fadd 	bl	800884c <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	691b      	ldr	r3, [r3, #16]
 8007298:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800729c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80072a0:	d10f      	bne.n	80072c2 <HAL_TIM_IRQHandler+0x296>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	68db      	ldr	r3, [r3, #12]
 80072a8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80072ac:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80072b0:	d107      	bne.n	80072c2 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 80072ba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 80072bc:	6878      	ldr	r0, [r7, #4]
 80072be:	f001 facf 	bl	8008860 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	691b      	ldr	r3, [r3, #16]
 80072c8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80072cc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80072d0:	d10f      	bne.n	80072f2 <HAL_TIM_IRQHandler+0x2c6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	68db      	ldr	r3, [r3, #12]
 80072d8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80072dc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80072e0:	d107      	bne.n	80072f2 <HAL_TIM_IRQHandler+0x2c6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 80072ea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 80072ec:	6878      	ldr	r0, [r7, #4]
 80072ee:	f001 fac1 	bl	8008874 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	691b      	ldr	r3, [r3, #16]
 80072f8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80072fc:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007300:	d10f      	bne.n	8007322 <HAL_TIM_IRQHandler+0x2f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	681b      	ldr	r3, [r3, #0]
 8007306:	68db      	ldr	r3, [r3, #12]
 8007308:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800730c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007310:	d107      	bne.n	8007322 <HAL_TIM_IRQHandler+0x2f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 800731a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 800731c:	6878      	ldr	r0, [r7, #4]
 800731e:	f001 fab3 	bl	8008888 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007322:	bf00      	nop
 8007324:	3708      	adds	r7, #8
 8007326:	46bd      	mov	sp, r7
 8007328:	bd80      	pop	{r7, pc}
	...

0800732c <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 800732c:	b580      	push	{r7, lr}
 800732e:	b086      	sub	sp, #24
 8007330:	af00      	add	r7, sp, #0
 8007332:	60f8      	str	r0, [r7, #12]
 8007334:	60b9      	str	r1, [r7, #8]
 8007336:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007338:	2300      	movs	r3, #0
 800733a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_CHANNEL_MODE(sConfig->OCMode, Channel));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 800733c:	68fb      	ldr	r3, [r7, #12]
 800733e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007342:	2b01      	cmp	r3, #1
 8007344:	d101      	bne.n	800734a <HAL_TIM_OC_ConfigChannel+0x1e>
 8007346:	2302      	movs	r3, #2
 8007348:	e066      	b.n	8007418 <HAL_TIM_OC_ConfigChannel+0xec>
 800734a:	68fb      	ldr	r3, [r7, #12]
 800734c:	2201      	movs	r2, #1
 800734e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	2b14      	cmp	r3, #20
 8007356:	d857      	bhi.n	8007408 <HAL_TIM_OC_ConfigChannel+0xdc>
 8007358:	a201      	add	r2, pc, #4	; (adr r2, 8007360 <HAL_TIM_OC_ConfigChannel+0x34>)
 800735a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800735e:	bf00      	nop
 8007360:	080073b5 	.word	0x080073b5
 8007364:	08007409 	.word	0x08007409
 8007368:	08007409 	.word	0x08007409
 800736c:	08007409 	.word	0x08007409
 8007370:	080073c3 	.word	0x080073c3
 8007374:	08007409 	.word	0x08007409
 8007378:	08007409 	.word	0x08007409
 800737c:	08007409 	.word	0x08007409
 8007380:	080073d1 	.word	0x080073d1
 8007384:	08007409 	.word	0x08007409
 8007388:	08007409 	.word	0x08007409
 800738c:	08007409 	.word	0x08007409
 8007390:	080073df 	.word	0x080073df
 8007394:	08007409 	.word	0x08007409
 8007398:	08007409 	.word	0x08007409
 800739c:	08007409 	.word	0x08007409
 80073a0:	080073ed 	.word	0x080073ed
 80073a4:	08007409 	.word	0x08007409
 80073a8:	08007409 	.word	0x08007409
 80073ac:	08007409 	.word	0x08007409
 80073b0:	080073fb 	.word	0x080073fb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80073b4:	68fb      	ldr	r3, [r7, #12]
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	68b9      	ldr	r1, [r7, #8]
 80073ba:	4618      	mov	r0, r3
 80073bc:	f000 faf4 	bl	80079a8 <TIM_OC1_SetConfig>
      break;
 80073c0:	e025      	b.n	800740e <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80073c2:	68fb      	ldr	r3, [r7, #12]
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	68b9      	ldr	r1, [r7, #8]
 80073c8:	4618      	mov	r0, r3
 80073ca:	f000 fb87 	bl	8007adc <TIM_OC2_SetConfig>
      break;
 80073ce:	e01e      	b.n	800740e <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80073d0:	68fb      	ldr	r3, [r7, #12]
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	68b9      	ldr	r1, [r7, #8]
 80073d6:	4618      	mov	r0, r3
 80073d8:	f000 fc14 	bl	8007c04 <TIM_OC3_SetConfig>
      break;
 80073dc:	e017      	b.n	800740e <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80073de:	68fb      	ldr	r3, [r7, #12]
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	68b9      	ldr	r1, [r7, #8]
 80073e4:	4618      	mov	r0, r3
 80073e6:	f000 fc9f 	bl	8007d28 <TIM_OC4_SetConfig>
      break;
 80073ea:	e010      	b.n	800740e <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80073ec:	68fb      	ldr	r3, [r7, #12]
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	68b9      	ldr	r1, [r7, #8]
 80073f2:	4618      	mov	r0, r3
 80073f4:	f000 fd2c 	bl	8007e50 <TIM_OC5_SetConfig>
      break;
 80073f8:	e009      	b.n	800740e <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80073fa:	68fb      	ldr	r3, [r7, #12]
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	68b9      	ldr	r1, [r7, #8]
 8007400:	4618      	mov	r0, r3
 8007402:	f000 fd8f 	bl	8007f24 <TIM_OC6_SetConfig>
      break;
 8007406:	e002      	b.n	800740e <HAL_TIM_OC_ConfigChannel+0xe2>
    }

    default:
      status = HAL_ERROR;
 8007408:	2301      	movs	r3, #1
 800740a:	75fb      	strb	r3, [r7, #23]
      break;
 800740c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800740e:	68fb      	ldr	r3, [r7, #12]
 8007410:	2200      	movs	r2, #0
 8007412:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007416:	7dfb      	ldrb	r3, [r7, #23]
}
 8007418:	4618      	mov	r0, r3
 800741a:	3718      	adds	r7, #24
 800741c:	46bd      	mov	sp, r7
 800741e:	bd80      	pop	{r7, pc}

08007420 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8007420:	b580      	push	{r7, lr}
 8007422:	b086      	sub	sp, #24
 8007424:	af00      	add	r7, sp, #0
 8007426:	60f8      	str	r0, [r7, #12]
 8007428:	60b9      	str	r1, [r7, #8]
 800742a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800742c:	2300      	movs	r3, #0
 800742e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007430:	68fb      	ldr	r3, [r7, #12]
 8007432:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007436:	2b01      	cmp	r3, #1
 8007438:	d101      	bne.n	800743e <HAL_TIM_IC_ConfigChannel+0x1e>
 800743a:	2302      	movs	r3, #2
 800743c:	e088      	b.n	8007550 <HAL_TIM_IC_ConfigChannel+0x130>
 800743e:	68fb      	ldr	r3, [r7, #12]
 8007440:	2201      	movs	r2, #1
 8007442:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	2b00      	cmp	r3, #0
 800744a:	d11b      	bne.n	8007484 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 800744c:	68fb      	ldr	r3, [r7, #12]
 800744e:	6818      	ldr	r0, [r3, #0]
 8007450:	68bb      	ldr	r3, [r7, #8]
 8007452:	6819      	ldr	r1, [r3, #0]
 8007454:	68bb      	ldr	r3, [r7, #8]
 8007456:	685a      	ldr	r2, [r3, #4]
 8007458:	68bb      	ldr	r3, [r7, #8]
 800745a:	68db      	ldr	r3, [r3, #12]
 800745c:	f000 fea4 	bl	80081a8 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8007460:	68fb      	ldr	r3, [r7, #12]
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	699a      	ldr	r2, [r3, #24]
 8007466:	68fb      	ldr	r3, [r7, #12]
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	f022 020c 	bic.w	r2, r2, #12
 800746e:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8007470:	68fb      	ldr	r3, [r7, #12]
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	6999      	ldr	r1, [r3, #24]
 8007476:	68bb      	ldr	r3, [r7, #8]
 8007478:	689a      	ldr	r2, [r3, #8]
 800747a:	68fb      	ldr	r3, [r7, #12]
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	430a      	orrs	r2, r1
 8007480:	619a      	str	r2, [r3, #24]
 8007482:	e060      	b.n	8007546 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	2b04      	cmp	r3, #4
 8007488:	d11c      	bne.n	80074c4 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 800748a:	68fb      	ldr	r3, [r7, #12]
 800748c:	6818      	ldr	r0, [r3, #0]
 800748e:	68bb      	ldr	r3, [r7, #8]
 8007490:	6819      	ldr	r1, [r3, #0]
 8007492:	68bb      	ldr	r3, [r7, #8]
 8007494:	685a      	ldr	r2, [r3, #4]
 8007496:	68bb      	ldr	r3, [r7, #8]
 8007498:	68db      	ldr	r3, [r3, #12]
 800749a:	f000 ff28 	bl	80082ee <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 800749e:	68fb      	ldr	r3, [r7, #12]
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	699a      	ldr	r2, [r3, #24]
 80074a4:	68fb      	ldr	r3, [r7, #12]
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80074ac:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 80074ae:	68fb      	ldr	r3, [r7, #12]
 80074b0:	681b      	ldr	r3, [r3, #0]
 80074b2:	6999      	ldr	r1, [r3, #24]
 80074b4:	68bb      	ldr	r3, [r7, #8]
 80074b6:	689b      	ldr	r3, [r3, #8]
 80074b8:	021a      	lsls	r2, r3, #8
 80074ba:	68fb      	ldr	r3, [r7, #12]
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	430a      	orrs	r2, r1
 80074c0:	619a      	str	r2, [r3, #24]
 80074c2:	e040      	b.n	8007546 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	2b08      	cmp	r3, #8
 80074c8:	d11b      	bne.n	8007502 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 80074ca:	68fb      	ldr	r3, [r7, #12]
 80074cc:	6818      	ldr	r0, [r3, #0]
 80074ce:	68bb      	ldr	r3, [r7, #8]
 80074d0:	6819      	ldr	r1, [r3, #0]
 80074d2:	68bb      	ldr	r3, [r7, #8]
 80074d4:	685a      	ldr	r2, [r3, #4]
 80074d6:	68bb      	ldr	r3, [r7, #8]
 80074d8:	68db      	ldr	r3, [r3, #12]
 80074da:	f000 ff75 	bl	80083c8 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 80074de:	68fb      	ldr	r3, [r7, #12]
 80074e0:	681b      	ldr	r3, [r3, #0]
 80074e2:	69da      	ldr	r2, [r3, #28]
 80074e4:	68fb      	ldr	r3, [r7, #12]
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	f022 020c 	bic.w	r2, r2, #12
 80074ec:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 80074ee:	68fb      	ldr	r3, [r7, #12]
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	69d9      	ldr	r1, [r3, #28]
 80074f4:	68bb      	ldr	r3, [r7, #8]
 80074f6:	689a      	ldr	r2, [r3, #8]
 80074f8:	68fb      	ldr	r3, [r7, #12]
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	430a      	orrs	r2, r1
 80074fe:	61da      	str	r2, [r3, #28]
 8007500:	e021      	b.n	8007546 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	2b0c      	cmp	r3, #12
 8007506:	d11c      	bne.n	8007542 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8007508:	68fb      	ldr	r3, [r7, #12]
 800750a:	6818      	ldr	r0, [r3, #0]
 800750c:	68bb      	ldr	r3, [r7, #8]
 800750e:	6819      	ldr	r1, [r3, #0]
 8007510:	68bb      	ldr	r3, [r7, #8]
 8007512:	685a      	ldr	r2, [r3, #4]
 8007514:	68bb      	ldr	r3, [r7, #8]
 8007516:	68db      	ldr	r3, [r3, #12]
 8007518:	f000 ff92 	bl	8008440 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 800751c:	68fb      	ldr	r3, [r7, #12]
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	69da      	ldr	r2, [r3, #28]
 8007522:	68fb      	ldr	r3, [r7, #12]
 8007524:	681b      	ldr	r3, [r3, #0]
 8007526:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800752a:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 800752c:	68fb      	ldr	r3, [r7, #12]
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	69d9      	ldr	r1, [r3, #28]
 8007532:	68bb      	ldr	r3, [r7, #8]
 8007534:	689b      	ldr	r3, [r3, #8]
 8007536:	021a      	lsls	r2, r3, #8
 8007538:	68fb      	ldr	r3, [r7, #12]
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	430a      	orrs	r2, r1
 800753e:	61da      	str	r2, [r3, #28]
 8007540:	e001      	b.n	8007546 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8007542:	2301      	movs	r3, #1
 8007544:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8007546:	68fb      	ldr	r3, [r7, #12]
 8007548:	2200      	movs	r2, #0
 800754a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800754e:	7dfb      	ldrb	r3, [r7, #23]
}
 8007550:	4618      	mov	r0, r3
 8007552:	3718      	adds	r7, #24
 8007554:	46bd      	mov	sp, r7
 8007556:	bd80      	pop	{r7, pc}

08007558 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007558:	b580      	push	{r7, lr}
 800755a:	b084      	sub	sp, #16
 800755c:	af00      	add	r7, sp, #0
 800755e:	6078      	str	r0, [r7, #4]
 8007560:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007562:	2300      	movs	r3, #0
 8007564:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800756c:	2b01      	cmp	r3, #1
 800756e:	d101      	bne.n	8007574 <HAL_TIM_ConfigClockSource+0x1c>
 8007570:	2302      	movs	r3, #2
 8007572:	e0ee      	b.n	8007752 <HAL_TIM_ConfigClockSource+0x1fa>
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	2201      	movs	r2, #1
 8007578:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	2202      	movs	r2, #2
 8007580:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	681b      	ldr	r3, [r3, #0]
 8007588:	689b      	ldr	r3, [r3, #8]
 800758a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800758c:	68bb      	ldr	r3, [r7, #8]
 800758e:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 8007592:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8007596:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007598:	68bb      	ldr	r3, [r7, #8]
 800759a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800759e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	68ba      	ldr	r2, [r7, #8]
 80075a6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80075a8:	683b      	ldr	r3, [r7, #0]
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	4a6b      	ldr	r2, [pc, #428]	; (800775c <HAL_TIM_ConfigClockSource+0x204>)
 80075ae:	4293      	cmp	r3, r2
 80075b0:	f000 80b9 	beq.w	8007726 <HAL_TIM_ConfigClockSource+0x1ce>
 80075b4:	4a69      	ldr	r2, [pc, #420]	; (800775c <HAL_TIM_ConfigClockSource+0x204>)
 80075b6:	4293      	cmp	r3, r2
 80075b8:	f200 80be 	bhi.w	8007738 <HAL_TIM_ConfigClockSource+0x1e0>
 80075bc:	4a68      	ldr	r2, [pc, #416]	; (8007760 <HAL_TIM_ConfigClockSource+0x208>)
 80075be:	4293      	cmp	r3, r2
 80075c0:	f000 80b1 	beq.w	8007726 <HAL_TIM_ConfigClockSource+0x1ce>
 80075c4:	4a66      	ldr	r2, [pc, #408]	; (8007760 <HAL_TIM_ConfigClockSource+0x208>)
 80075c6:	4293      	cmp	r3, r2
 80075c8:	f200 80b6 	bhi.w	8007738 <HAL_TIM_ConfigClockSource+0x1e0>
 80075cc:	4a65      	ldr	r2, [pc, #404]	; (8007764 <HAL_TIM_ConfigClockSource+0x20c>)
 80075ce:	4293      	cmp	r3, r2
 80075d0:	f000 80a9 	beq.w	8007726 <HAL_TIM_ConfigClockSource+0x1ce>
 80075d4:	4a63      	ldr	r2, [pc, #396]	; (8007764 <HAL_TIM_ConfigClockSource+0x20c>)
 80075d6:	4293      	cmp	r3, r2
 80075d8:	f200 80ae 	bhi.w	8007738 <HAL_TIM_ConfigClockSource+0x1e0>
 80075dc:	4a62      	ldr	r2, [pc, #392]	; (8007768 <HAL_TIM_ConfigClockSource+0x210>)
 80075de:	4293      	cmp	r3, r2
 80075e0:	f000 80a1 	beq.w	8007726 <HAL_TIM_ConfigClockSource+0x1ce>
 80075e4:	4a60      	ldr	r2, [pc, #384]	; (8007768 <HAL_TIM_ConfigClockSource+0x210>)
 80075e6:	4293      	cmp	r3, r2
 80075e8:	f200 80a6 	bhi.w	8007738 <HAL_TIM_ConfigClockSource+0x1e0>
 80075ec:	4a5f      	ldr	r2, [pc, #380]	; (800776c <HAL_TIM_ConfigClockSource+0x214>)
 80075ee:	4293      	cmp	r3, r2
 80075f0:	f000 8099 	beq.w	8007726 <HAL_TIM_ConfigClockSource+0x1ce>
 80075f4:	4a5d      	ldr	r2, [pc, #372]	; (800776c <HAL_TIM_ConfigClockSource+0x214>)
 80075f6:	4293      	cmp	r3, r2
 80075f8:	f200 809e 	bhi.w	8007738 <HAL_TIM_ConfigClockSource+0x1e0>
 80075fc:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8007600:	f000 8091 	beq.w	8007726 <HAL_TIM_ConfigClockSource+0x1ce>
 8007604:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8007608:	f200 8096 	bhi.w	8007738 <HAL_TIM_ConfigClockSource+0x1e0>
 800760c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007610:	f000 8089 	beq.w	8007726 <HAL_TIM_ConfigClockSource+0x1ce>
 8007614:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007618:	f200 808e 	bhi.w	8007738 <HAL_TIM_ConfigClockSource+0x1e0>
 800761c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007620:	d03e      	beq.n	80076a0 <HAL_TIM_ConfigClockSource+0x148>
 8007622:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007626:	f200 8087 	bhi.w	8007738 <HAL_TIM_ConfigClockSource+0x1e0>
 800762a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800762e:	f000 8086 	beq.w	800773e <HAL_TIM_ConfigClockSource+0x1e6>
 8007632:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007636:	d87f      	bhi.n	8007738 <HAL_TIM_ConfigClockSource+0x1e0>
 8007638:	2b70      	cmp	r3, #112	; 0x70
 800763a:	d01a      	beq.n	8007672 <HAL_TIM_ConfigClockSource+0x11a>
 800763c:	2b70      	cmp	r3, #112	; 0x70
 800763e:	d87b      	bhi.n	8007738 <HAL_TIM_ConfigClockSource+0x1e0>
 8007640:	2b60      	cmp	r3, #96	; 0x60
 8007642:	d050      	beq.n	80076e6 <HAL_TIM_ConfigClockSource+0x18e>
 8007644:	2b60      	cmp	r3, #96	; 0x60
 8007646:	d877      	bhi.n	8007738 <HAL_TIM_ConfigClockSource+0x1e0>
 8007648:	2b50      	cmp	r3, #80	; 0x50
 800764a:	d03c      	beq.n	80076c6 <HAL_TIM_ConfigClockSource+0x16e>
 800764c:	2b50      	cmp	r3, #80	; 0x50
 800764e:	d873      	bhi.n	8007738 <HAL_TIM_ConfigClockSource+0x1e0>
 8007650:	2b40      	cmp	r3, #64	; 0x40
 8007652:	d058      	beq.n	8007706 <HAL_TIM_ConfigClockSource+0x1ae>
 8007654:	2b40      	cmp	r3, #64	; 0x40
 8007656:	d86f      	bhi.n	8007738 <HAL_TIM_ConfigClockSource+0x1e0>
 8007658:	2b30      	cmp	r3, #48	; 0x30
 800765a:	d064      	beq.n	8007726 <HAL_TIM_ConfigClockSource+0x1ce>
 800765c:	2b30      	cmp	r3, #48	; 0x30
 800765e:	d86b      	bhi.n	8007738 <HAL_TIM_ConfigClockSource+0x1e0>
 8007660:	2b20      	cmp	r3, #32
 8007662:	d060      	beq.n	8007726 <HAL_TIM_ConfigClockSource+0x1ce>
 8007664:	2b20      	cmp	r3, #32
 8007666:	d867      	bhi.n	8007738 <HAL_TIM_ConfigClockSource+0x1e0>
 8007668:	2b00      	cmp	r3, #0
 800766a:	d05c      	beq.n	8007726 <HAL_TIM_ConfigClockSource+0x1ce>
 800766c:	2b10      	cmp	r3, #16
 800766e:	d05a      	beq.n	8007726 <HAL_TIM_ConfigClockSource+0x1ce>
 8007670:	e062      	b.n	8007738 <HAL_TIM_ConfigClockSource+0x1e0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	6818      	ldr	r0, [r3, #0]
 8007676:	683b      	ldr	r3, [r7, #0]
 8007678:	6899      	ldr	r1, [r3, #8]
 800767a:	683b      	ldr	r3, [r7, #0]
 800767c:	685a      	ldr	r2, [r3, #4]
 800767e:	683b      	ldr	r3, [r7, #0]
 8007680:	68db      	ldr	r3, [r3, #12]
 8007682:	f000 ff37 	bl	80084f4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	689b      	ldr	r3, [r3, #8]
 800768c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800768e:	68bb      	ldr	r3, [r7, #8]
 8007690:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8007694:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	68ba      	ldr	r2, [r7, #8]
 800769c:	609a      	str	r2, [r3, #8]
      break;
 800769e:	e04f      	b.n	8007740 <HAL_TIM_ConfigClockSource+0x1e8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	6818      	ldr	r0, [r3, #0]
 80076a4:	683b      	ldr	r3, [r7, #0]
 80076a6:	6899      	ldr	r1, [r3, #8]
 80076a8:	683b      	ldr	r3, [r7, #0]
 80076aa:	685a      	ldr	r2, [r3, #4]
 80076ac:	683b      	ldr	r3, [r7, #0]
 80076ae:	68db      	ldr	r3, [r3, #12]
 80076b0:	f000 ff20 	bl	80084f4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	689a      	ldr	r2, [r3, #8]
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	681b      	ldr	r3, [r3, #0]
 80076be:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80076c2:	609a      	str	r2, [r3, #8]
      break;
 80076c4:	e03c      	b.n	8007740 <HAL_TIM_ConfigClockSource+0x1e8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	6818      	ldr	r0, [r3, #0]
 80076ca:	683b      	ldr	r3, [r7, #0]
 80076cc:	6859      	ldr	r1, [r3, #4]
 80076ce:	683b      	ldr	r3, [r7, #0]
 80076d0:	68db      	ldr	r3, [r3, #12]
 80076d2:	461a      	mov	r2, r3
 80076d4:	f000 fddc 	bl	8008290 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	681b      	ldr	r3, [r3, #0]
 80076dc:	2150      	movs	r1, #80	; 0x50
 80076de:	4618      	mov	r0, r3
 80076e0:	f000 feeb 	bl	80084ba <TIM_ITRx_SetConfig>
      break;
 80076e4:	e02c      	b.n	8007740 <HAL_TIM_ConfigClockSource+0x1e8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	6818      	ldr	r0, [r3, #0]
 80076ea:	683b      	ldr	r3, [r7, #0]
 80076ec:	6859      	ldr	r1, [r3, #4]
 80076ee:	683b      	ldr	r3, [r7, #0]
 80076f0:	68db      	ldr	r3, [r3, #12]
 80076f2:	461a      	mov	r2, r3
 80076f4:	f000 fe38 	bl	8008368 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	2160      	movs	r1, #96	; 0x60
 80076fe:	4618      	mov	r0, r3
 8007700:	f000 fedb 	bl	80084ba <TIM_ITRx_SetConfig>
      break;
 8007704:	e01c      	b.n	8007740 <HAL_TIM_ConfigClockSource+0x1e8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	6818      	ldr	r0, [r3, #0]
 800770a:	683b      	ldr	r3, [r7, #0]
 800770c:	6859      	ldr	r1, [r3, #4]
 800770e:	683b      	ldr	r3, [r7, #0]
 8007710:	68db      	ldr	r3, [r3, #12]
 8007712:	461a      	mov	r2, r3
 8007714:	f000 fdbc 	bl	8008290 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	2140      	movs	r1, #64	; 0x40
 800771e:	4618      	mov	r0, r3
 8007720:	f000 fecb 	bl	80084ba <TIM_ITRx_SetConfig>
      break;
 8007724:	e00c      	b.n	8007740 <HAL_TIM_ConfigClockSource+0x1e8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	681a      	ldr	r2, [r3, #0]
 800772a:	683b      	ldr	r3, [r7, #0]
 800772c:	681b      	ldr	r3, [r3, #0]
 800772e:	4619      	mov	r1, r3
 8007730:	4610      	mov	r0, r2
 8007732:	f000 fec2 	bl	80084ba <TIM_ITRx_SetConfig>
      break;
 8007736:	e003      	b.n	8007740 <HAL_TIM_ConfigClockSource+0x1e8>
    }

    default:
      status = HAL_ERROR;
 8007738:	2301      	movs	r3, #1
 800773a:	73fb      	strb	r3, [r7, #15]
      break;
 800773c:	e000      	b.n	8007740 <HAL_TIM_ConfigClockSource+0x1e8>
      break;
 800773e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	2201      	movs	r2, #1
 8007744:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	2200      	movs	r2, #0
 800774c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007750:	7bfb      	ldrb	r3, [r7, #15]
}
 8007752:	4618      	mov	r0, r3
 8007754:	3710      	adds	r7, #16
 8007756:	46bd      	mov	sp, r7
 8007758:	bd80      	pop	{r7, pc}
 800775a:	bf00      	nop
 800775c:	00100070 	.word	0x00100070
 8007760:	00100050 	.word	0x00100050
 8007764:	00100040 	.word	0x00100040
 8007768:	00100030 	.word	0x00100030
 800776c:	00100020 	.word	0x00100020

08007770 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1, Reset + Trigger, Gated + Reset).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8007770:	b580      	push	{r7, lr}
 8007772:	b082      	sub	sp, #8
 8007774:	af00      	add	r7, sp, #0
 8007776:	6078      	str	r0, [r7, #4]
 8007778:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_INSTANCE(htim->Instance, sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007780:	2b01      	cmp	r3, #1
 8007782:	d101      	bne.n	8007788 <HAL_TIM_SlaveConfigSynchro+0x18>
 8007784:	2302      	movs	r3, #2
 8007786:	e031      	b.n	80077ec <HAL_TIM_SlaveConfigSynchro+0x7c>
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	2201      	movs	r2, #1
 800778c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	2202      	movs	r2, #2
 8007794:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8007798:	6839      	ldr	r1, [r7, #0]
 800779a:	6878      	ldr	r0, [r7, #4]
 800779c:	f000 fc2e 	bl	8007ffc <TIM_SlaveTimer_SetConfig>
 80077a0:	4603      	mov	r3, r0
 80077a2:	2b00      	cmp	r3, #0
 80077a4:	d009      	beq.n	80077ba <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	2201      	movs	r2, #1
 80077aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	2200      	movs	r2, #0
 80077b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 80077b6:	2301      	movs	r3, #1
 80077b8:	e018      	b.n	80077ec <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	681b      	ldr	r3, [r3, #0]
 80077be:	68da      	ldr	r2, [r3, #12]
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	681b      	ldr	r3, [r3, #0]
 80077c4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80077c8:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	68da      	ldr	r2, [r3, #12]
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80077d8:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	2201      	movs	r2, #1
 80077de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	2200      	movs	r2, #0
 80077e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80077ea:	2300      	movs	r3, #0
}
 80077ec:	4618      	mov	r0, r3
 80077ee:	3708      	adds	r7, #8
 80077f0:	46bd      	mov	sp, r7
 80077f2:	bd80      	pop	{r7, pc}

080077f4 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80077f4:	b480      	push	{r7}
 80077f6:	b083      	sub	sp, #12
 80077f8:	af00      	add	r7, sp, #0
 80077fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80077fc:	bf00      	nop
 80077fe:	370c      	adds	r7, #12
 8007800:	46bd      	mov	sp, r7
 8007802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007806:	4770      	bx	lr

08007808 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007808:	b480      	push	{r7}
 800780a:	b083      	sub	sp, #12
 800780c:	af00      	add	r7, sp, #0
 800780e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007810:	bf00      	nop
 8007812:	370c      	adds	r7, #12
 8007814:	46bd      	mov	sp, r7
 8007816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800781a:	4770      	bx	lr

0800781c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800781c:	b480      	push	{r7}
 800781e:	b083      	sub	sp, #12
 8007820:	af00      	add	r7, sp, #0
 8007822:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007824:	bf00      	nop
 8007826:	370c      	adds	r7, #12
 8007828:	46bd      	mov	sp, r7
 800782a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800782e:	4770      	bx	lr

08007830 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007830:	b480      	push	{r7}
 8007832:	b083      	sub	sp, #12
 8007834:	af00      	add	r7, sp, #0
 8007836:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007838:	bf00      	nop
 800783a:	370c      	adds	r7, #12
 800783c:	46bd      	mov	sp, r7
 800783e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007842:	4770      	bx	lr

08007844 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007844:	b480      	push	{r7}
 8007846:	b083      	sub	sp, #12
 8007848:	af00      	add	r7, sp, #0
 800784a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800784c:	bf00      	nop
 800784e:	370c      	adds	r7, #12
 8007850:	46bd      	mov	sp, r7
 8007852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007856:	4770      	bx	lr

08007858 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007858:	b480      	push	{r7}
 800785a:	b085      	sub	sp, #20
 800785c:	af00      	add	r7, sp, #0
 800785e:	6078      	str	r0, [r7, #4]
 8007860:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	681b      	ldr	r3, [r3, #0]
 8007866:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	4a46      	ldr	r2, [pc, #280]	; (8007984 <TIM_Base_SetConfig+0x12c>)
 800786c:	4293      	cmp	r3, r2
 800786e:	d017      	beq.n	80078a0 <TIM_Base_SetConfig+0x48>
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007876:	d013      	beq.n	80078a0 <TIM_Base_SetConfig+0x48>
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	4a43      	ldr	r2, [pc, #268]	; (8007988 <TIM_Base_SetConfig+0x130>)
 800787c:	4293      	cmp	r3, r2
 800787e:	d00f      	beq.n	80078a0 <TIM_Base_SetConfig+0x48>
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	4a42      	ldr	r2, [pc, #264]	; (800798c <TIM_Base_SetConfig+0x134>)
 8007884:	4293      	cmp	r3, r2
 8007886:	d00b      	beq.n	80078a0 <TIM_Base_SetConfig+0x48>
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	4a41      	ldr	r2, [pc, #260]	; (8007990 <TIM_Base_SetConfig+0x138>)
 800788c:	4293      	cmp	r3, r2
 800788e:	d007      	beq.n	80078a0 <TIM_Base_SetConfig+0x48>
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	4a40      	ldr	r2, [pc, #256]	; (8007994 <TIM_Base_SetConfig+0x13c>)
 8007894:	4293      	cmp	r3, r2
 8007896:	d003      	beq.n	80078a0 <TIM_Base_SetConfig+0x48>
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	4a3f      	ldr	r2, [pc, #252]	; (8007998 <TIM_Base_SetConfig+0x140>)
 800789c:	4293      	cmp	r3, r2
 800789e:	d108      	bne.n	80078b2 <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80078a0:	68fb      	ldr	r3, [r7, #12]
 80078a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80078a6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80078a8:	683b      	ldr	r3, [r7, #0]
 80078aa:	685b      	ldr	r3, [r3, #4]
 80078ac:	68fa      	ldr	r2, [r7, #12]
 80078ae:	4313      	orrs	r3, r2
 80078b0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	4a33      	ldr	r2, [pc, #204]	; (8007984 <TIM_Base_SetConfig+0x12c>)
 80078b6:	4293      	cmp	r3, r2
 80078b8:	d023      	beq.n	8007902 <TIM_Base_SetConfig+0xaa>
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80078c0:	d01f      	beq.n	8007902 <TIM_Base_SetConfig+0xaa>
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	4a30      	ldr	r2, [pc, #192]	; (8007988 <TIM_Base_SetConfig+0x130>)
 80078c6:	4293      	cmp	r3, r2
 80078c8:	d01b      	beq.n	8007902 <TIM_Base_SetConfig+0xaa>
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	4a2f      	ldr	r2, [pc, #188]	; (800798c <TIM_Base_SetConfig+0x134>)
 80078ce:	4293      	cmp	r3, r2
 80078d0:	d017      	beq.n	8007902 <TIM_Base_SetConfig+0xaa>
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	4a2e      	ldr	r2, [pc, #184]	; (8007990 <TIM_Base_SetConfig+0x138>)
 80078d6:	4293      	cmp	r3, r2
 80078d8:	d013      	beq.n	8007902 <TIM_Base_SetConfig+0xaa>
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	4a2d      	ldr	r2, [pc, #180]	; (8007994 <TIM_Base_SetConfig+0x13c>)
 80078de:	4293      	cmp	r3, r2
 80078e0:	d00f      	beq.n	8007902 <TIM_Base_SetConfig+0xaa>
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	4a2d      	ldr	r2, [pc, #180]	; (800799c <TIM_Base_SetConfig+0x144>)
 80078e6:	4293      	cmp	r3, r2
 80078e8:	d00b      	beq.n	8007902 <TIM_Base_SetConfig+0xaa>
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	4a2c      	ldr	r2, [pc, #176]	; (80079a0 <TIM_Base_SetConfig+0x148>)
 80078ee:	4293      	cmp	r3, r2
 80078f0:	d007      	beq.n	8007902 <TIM_Base_SetConfig+0xaa>
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	4a2b      	ldr	r2, [pc, #172]	; (80079a4 <TIM_Base_SetConfig+0x14c>)
 80078f6:	4293      	cmp	r3, r2
 80078f8:	d003      	beq.n	8007902 <TIM_Base_SetConfig+0xaa>
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	4a26      	ldr	r2, [pc, #152]	; (8007998 <TIM_Base_SetConfig+0x140>)
 80078fe:	4293      	cmp	r3, r2
 8007900:	d108      	bne.n	8007914 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007902:	68fb      	ldr	r3, [r7, #12]
 8007904:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007908:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800790a:	683b      	ldr	r3, [r7, #0]
 800790c:	68db      	ldr	r3, [r3, #12]
 800790e:	68fa      	ldr	r2, [r7, #12]
 8007910:	4313      	orrs	r3, r2
 8007912:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007914:	68fb      	ldr	r3, [r7, #12]
 8007916:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800791a:	683b      	ldr	r3, [r7, #0]
 800791c:	695b      	ldr	r3, [r3, #20]
 800791e:	4313      	orrs	r3, r2
 8007920:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	68fa      	ldr	r2, [r7, #12]
 8007926:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007928:	683b      	ldr	r3, [r7, #0]
 800792a:	689a      	ldr	r2, [r3, #8]
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007930:	683b      	ldr	r3, [r7, #0]
 8007932:	681a      	ldr	r2, [r3, #0]
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	4a12      	ldr	r2, [pc, #72]	; (8007984 <TIM_Base_SetConfig+0x12c>)
 800793c:	4293      	cmp	r3, r2
 800793e:	d013      	beq.n	8007968 <TIM_Base_SetConfig+0x110>
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	4a14      	ldr	r2, [pc, #80]	; (8007994 <TIM_Base_SetConfig+0x13c>)
 8007944:	4293      	cmp	r3, r2
 8007946:	d00f      	beq.n	8007968 <TIM_Base_SetConfig+0x110>
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	4a14      	ldr	r2, [pc, #80]	; (800799c <TIM_Base_SetConfig+0x144>)
 800794c:	4293      	cmp	r3, r2
 800794e:	d00b      	beq.n	8007968 <TIM_Base_SetConfig+0x110>
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	4a13      	ldr	r2, [pc, #76]	; (80079a0 <TIM_Base_SetConfig+0x148>)
 8007954:	4293      	cmp	r3, r2
 8007956:	d007      	beq.n	8007968 <TIM_Base_SetConfig+0x110>
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	4a12      	ldr	r2, [pc, #72]	; (80079a4 <TIM_Base_SetConfig+0x14c>)
 800795c:	4293      	cmp	r3, r2
 800795e:	d003      	beq.n	8007968 <TIM_Base_SetConfig+0x110>
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	4a0d      	ldr	r2, [pc, #52]	; (8007998 <TIM_Base_SetConfig+0x140>)
 8007964:	4293      	cmp	r3, r2
 8007966:	d103      	bne.n	8007970 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007968:	683b      	ldr	r3, [r7, #0]
 800796a:	691a      	ldr	r2, [r3, #16]
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	2201      	movs	r2, #1
 8007974:	615a      	str	r2, [r3, #20]
}
 8007976:	bf00      	nop
 8007978:	3714      	adds	r7, #20
 800797a:	46bd      	mov	sp, r7
 800797c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007980:	4770      	bx	lr
 8007982:	bf00      	nop
 8007984:	40012c00 	.word	0x40012c00
 8007988:	40000400 	.word	0x40000400
 800798c:	40000800 	.word	0x40000800
 8007990:	40000c00 	.word	0x40000c00
 8007994:	40013400 	.word	0x40013400
 8007998:	40015000 	.word	0x40015000
 800799c:	40014000 	.word	0x40014000
 80079a0:	40014400 	.word	0x40014400
 80079a4:	40014800 	.word	0x40014800

080079a8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80079a8:	b480      	push	{r7}
 80079aa:	b087      	sub	sp, #28
 80079ac:	af00      	add	r7, sp, #0
 80079ae:	6078      	str	r0, [r7, #4]
 80079b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	6a1b      	ldr	r3, [r3, #32]
 80079b6:	f023 0201 	bic.w	r2, r3, #1
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	6a1b      	ldr	r3, [r3, #32]
 80079c2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	685b      	ldr	r3, [r3, #4]
 80079c8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	699b      	ldr	r3, [r3, #24]
 80079ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80079d0:	68fb      	ldr	r3, [r7, #12]
 80079d2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80079d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80079da:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80079dc:	68fb      	ldr	r3, [r7, #12]
 80079de:	f023 0303 	bic.w	r3, r3, #3
 80079e2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80079e4:	683b      	ldr	r3, [r7, #0]
 80079e6:	681b      	ldr	r3, [r3, #0]
 80079e8:	68fa      	ldr	r2, [r7, #12]
 80079ea:	4313      	orrs	r3, r2
 80079ec:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80079ee:	697b      	ldr	r3, [r7, #20]
 80079f0:	f023 0302 	bic.w	r3, r3, #2
 80079f4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80079f6:	683b      	ldr	r3, [r7, #0]
 80079f8:	689b      	ldr	r3, [r3, #8]
 80079fa:	697a      	ldr	r2, [r7, #20]
 80079fc:	4313      	orrs	r3, r2
 80079fe:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	4a30      	ldr	r2, [pc, #192]	; (8007ac4 <TIM_OC1_SetConfig+0x11c>)
 8007a04:	4293      	cmp	r3, r2
 8007a06:	d013      	beq.n	8007a30 <TIM_OC1_SetConfig+0x88>
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	4a2f      	ldr	r2, [pc, #188]	; (8007ac8 <TIM_OC1_SetConfig+0x120>)
 8007a0c:	4293      	cmp	r3, r2
 8007a0e:	d00f      	beq.n	8007a30 <TIM_OC1_SetConfig+0x88>
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	4a2e      	ldr	r2, [pc, #184]	; (8007acc <TIM_OC1_SetConfig+0x124>)
 8007a14:	4293      	cmp	r3, r2
 8007a16:	d00b      	beq.n	8007a30 <TIM_OC1_SetConfig+0x88>
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	4a2d      	ldr	r2, [pc, #180]	; (8007ad0 <TIM_OC1_SetConfig+0x128>)
 8007a1c:	4293      	cmp	r3, r2
 8007a1e:	d007      	beq.n	8007a30 <TIM_OC1_SetConfig+0x88>
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	4a2c      	ldr	r2, [pc, #176]	; (8007ad4 <TIM_OC1_SetConfig+0x12c>)
 8007a24:	4293      	cmp	r3, r2
 8007a26:	d003      	beq.n	8007a30 <TIM_OC1_SetConfig+0x88>
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	4a2b      	ldr	r2, [pc, #172]	; (8007ad8 <TIM_OC1_SetConfig+0x130>)
 8007a2c:	4293      	cmp	r3, r2
 8007a2e:	d10c      	bne.n	8007a4a <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007a30:	697b      	ldr	r3, [r7, #20]
 8007a32:	f023 0308 	bic.w	r3, r3, #8
 8007a36:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007a38:	683b      	ldr	r3, [r7, #0]
 8007a3a:	68db      	ldr	r3, [r3, #12]
 8007a3c:	697a      	ldr	r2, [r7, #20]
 8007a3e:	4313      	orrs	r3, r2
 8007a40:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007a42:	697b      	ldr	r3, [r7, #20]
 8007a44:	f023 0304 	bic.w	r3, r3, #4
 8007a48:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	4a1d      	ldr	r2, [pc, #116]	; (8007ac4 <TIM_OC1_SetConfig+0x11c>)
 8007a4e:	4293      	cmp	r3, r2
 8007a50:	d013      	beq.n	8007a7a <TIM_OC1_SetConfig+0xd2>
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	4a1c      	ldr	r2, [pc, #112]	; (8007ac8 <TIM_OC1_SetConfig+0x120>)
 8007a56:	4293      	cmp	r3, r2
 8007a58:	d00f      	beq.n	8007a7a <TIM_OC1_SetConfig+0xd2>
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	4a1b      	ldr	r2, [pc, #108]	; (8007acc <TIM_OC1_SetConfig+0x124>)
 8007a5e:	4293      	cmp	r3, r2
 8007a60:	d00b      	beq.n	8007a7a <TIM_OC1_SetConfig+0xd2>
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	4a1a      	ldr	r2, [pc, #104]	; (8007ad0 <TIM_OC1_SetConfig+0x128>)
 8007a66:	4293      	cmp	r3, r2
 8007a68:	d007      	beq.n	8007a7a <TIM_OC1_SetConfig+0xd2>
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	4a19      	ldr	r2, [pc, #100]	; (8007ad4 <TIM_OC1_SetConfig+0x12c>)
 8007a6e:	4293      	cmp	r3, r2
 8007a70:	d003      	beq.n	8007a7a <TIM_OC1_SetConfig+0xd2>
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	4a18      	ldr	r2, [pc, #96]	; (8007ad8 <TIM_OC1_SetConfig+0x130>)
 8007a76:	4293      	cmp	r3, r2
 8007a78:	d111      	bne.n	8007a9e <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007a7a:	693b      	ldr	r3, [r7, #16]
 8007a7c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007a80:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007a82:	693b      	ldr	r3, [r7, #16]
 8007a84:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007a88:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007a8a:	683b      	ldr	r3, [r7, #0]
 8007a8c:	695b      	ldr	r3, [r3, #20]
 8007a8e:	693a      	ldr	r2, [r7, #16]
 8007a90:	4313      	orrs	r3, r2
 8007a92:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007a94:	683b      	ldr	r3, [r7, #0]
 8007a96:	699b      	ldr	r3, [r3, #24]
 8007a98:	693a      	ldr	r2, [r7, #16]
 8007a9a:	4313      	orrs	r3, r2
 8007a9c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	693a      	ldr	r2, [r7, #16]
 8007aa2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	68fa      	ldr	r2, [r7, #12]
 8007aa8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007aaa:	683b      	ldr	r3, [r7, #0]
 8007aac:	685a      	ldr	r2, [r3, #4]
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	697a      	ldr	r2, [r7, #20]
 8007ab6:	621a      	str	r2, [r3, #32]
}
 8007ab8:	bf00      	nop
 8007aba:	371c      	adds	r7, #28
 8007abc:	46bd      	mov	sp, r7
 8007abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ac2:	4770      	bx	lr
 8007ac4:	40012c00 	.word	0x40012c00
 8007ac8:	40013400 	.word	0x40013400
 8007acc:	40014000 	.word	0x40014000
 8007ad0:	40014400 	.word	0x40014400
 8007ad4:	40014800 	.word	0x40014800
 8007ad8:	40015000 	.word	0x40015000

08007adc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007adc:	b480      	push	{r7}
 8007ade:	b087      	sub	sp, #28
 8007ae0:	af00      	add	r7, sp, #0
 8007ae2:	6078      	str	r0, [r7, #4]
 8007ae4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	6a1b      	ldr	r3, [r3, #32]
 8007aea:	f023 0210 	bic.w	r2, r3, #16
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	6a1b      	ldr	r3, [r3, #32]
 8007af6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	685b      	ldr	r3, [r3, #4]
 8007afc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	699b      	ldr	r3, [r3, #24]
 8007b02:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007b04:	68fb      	ldr	r3, [r7, #12]
 8007b06:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007b0a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007b0e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007b10:	68fb      	ldr	r3, [r7, #12]
 8007b12:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007b16:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007b18:	683b      	ldr	r3, [r7, #0]
 8007b1a:	681b      	ldr	r3, [r3, #0]
 8007b1c:	021b      	lsls	r3, r3, #8
 8007b1e:	68fa      	ldr	r2, [r7, #12]
 8007b20:	4313      	orrs	r3, r2
 8007b22:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007b24:	697b      	ldr	r3, [r7, #20]
 8007b26:	f023 0320 	bic.w	r3, r3, #32
 8007b2a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007b2c:	683b      	ldr	r3, [r7, #0]
 8007b2e:	689b      	ldr	r3, [r3, #8]
 8007b30:	011b      	lsls	r3, r3, #4
 8007b32:	697a      	ldr	r2, [r7, #20]
 8007b34:	4313      	orrs	r3, r2
 8007b36:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	4a2c      	ldr	r2, [pc, #176]	; (8007bec <TIM_OC2_SetConfig+0x110>)
 8007b3c:	4293      	cmp	r3, r2
 8007b3e:	d007      	beq.n	8007b50 <TIM_OC2_SetConfig+0x74>
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	4a2b      	ldr	r2, [pc, #172]	; (8007bf0 <TIM_OC2_SetConfig+0x114>)
 8007b44:	4293      	cmp	r3, r2
 8007b46:	d003      	beq.n	8007b50 <TIM_OC2_SetConfig+0x74>
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	4a2a      	ldr	r2, [pc, #168]	; (8007bf4 <TIM_OC2_SetConfig+0x118>)
 8007b4c:	4293      	cmp	r3, r2
 8007b4e:	d10d      	bne.n	8007b6c <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007b50:	697b      	ldr	r3, [r7, #20]
 8007b52:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007b56:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007b58:	683b      	ldr	r3, [r7, #0]
 8007b5a:	68db      	ldr	r3, [r3, #12]
 8007b5c:	011b      	lsls	r3, r3, #4
 8007b5e:	697a      	ldr	r2, [r7, #20]
 8007b60:	4313      	orrs	r3, r2
 8007b62:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007b64:	697b      	ldr	r3, [r7, #20]
 8007b66:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007b6a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	4a1f      	ldr	r2, [pc, #124]	; (8007bec <TIM_OC2_SetConfig+0x110>)
 8007b70:	4293      	cmp	r3, r2
 8007b72:	d013      	beq.n	8007b9c <TIM_OC2_SetConfig+0xc0>
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	4a1e      	ldr	r2, [pc, #120]	; (8007bf0 <TIM_OC2_SetConfig+0x114>)
 8007b78:	4293      	cmp	r3, r2
 8007b7a:	d00f      	beq.n	8007b9c <TIM_OC2_SetConfig+0xc0>
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	4a1e      	ldr	r2, [pc, #120]	; (8007bf8 <TIM_OC2_SetConfig+0x11c>)
 8007b80:	4293      	cmp	r3, r2
 8007b82:	d00b      	beq.n	8007b9c <TIM_OC2_SetConfig+0xc0>
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	4a1d      	ldr	r2, [pc, #116]	; (8007bfc <TIM_OC2_SetConfig+0x120>)
 8007b88:	4293      	cmp	r3, r2
 8007b8a:	d007      	beq.n	8007b9c <TIM_OC2_SetConfig+0xc0>
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	4a1c      	ldr	r2, [pc, #112]	; (8007c00 <TIM_OC2_SetConfig+0x124>)
 8007b90:	4293      	cmp	r3, r2
 8007b92:	d003      	beq.n	8007b9c <TIM_OC2_SetConfig+0xc0>
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	4a17      	ldr	r2, [pc, #92]	; (8007bf4 <TIM_OC2_SetConfig+0x118>)
 8007b98:	4293      	cmp	r3, r2
 8007b9a:	d113      	bne.n	8007bc4 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007b9c:	693b      	ldr	r3, [r7, #16]
 8007b9e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007ba2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007ba4:	693b      	ldr	r3, [r7, #16]
 8007ba6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007baa:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007bac:	683b      	ldr	r3, [r7, #0]
 8007bae:	695b      	ldr	r3, [r3, #20]
 8007bb0:	009b      	lsls	r3, r3, #2
 8007bb2:	693a      	ldr	r2, [r7, #16]
 8007bb4:	4313      	orrs	r3, r2
 8007bb6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007bb8:	683b      	ldr	r3, [r7, #0]
 8007bba:	699b      	ldr	r3, [r3, #24]
 8007bbc:	009b      	lsls	r3, r3, #2
 8007bbe:	693a      	ldr	r2, [r7, #16]
 8007bc0:	4313      	orrs	r3, r2
 8007bc2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	693a      	ldr	r2, [r7, #16]
 8007bc8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	68fa      	ldr	r2, [r7, #12]
 8007bce:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007bd0:	683b      	ldr	r3, [r7, #0]
 8007bd2:	685a      	ldr	r2, [r3, #4]
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	697a      	ldr	r2, [r7, #20]
 8007bdc:	621a      	str	r2, [r3, #32]
}
 8007bde:	bf00      	nop
 8007be0:	371c      	adds	r7, #28
 8007be2:	46bd      	mov	sp, r7
 8007be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007be8:	4770      	bx	lr
 8007bea:	bf00      	nop
 8007bec:	40012c00 	.word	0x40012c00
 8007bf0:	40013400 	.word	0x40013400
 8007bf4:	40015000 	.word	0x40015000
 8007bf8:	40014000 	.word	0x40014000
 8007bfc:	40014400 	.word	0x40014400
 8007c00:	40014800 	.word	0x40014800

08007c04 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007c04:	b480      	push	{r7}
 8007c06:	b087      	sub	sp, #28
 8007c08:	af00      	add	r7, sp, #0
 8007c0a:	6078      	str	r0, [r7, #4]
 8007c0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	6a1b      	ldr	r3, [r3, #32]
 8007c12:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	6a1b      	ldr	r3, [r3, #32]
 8007c1e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	685b      	ldr	r3, [r3, #4]
 8007c24:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	69db      	ldr	r3, [r3, #28]
 8007c2a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007c2c:	68fb      	ldr	r3, [r7, #12]
 8007c2e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007c32:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007c36:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007c38:	68fb      	ldr	r3, [r7, #12]
 8007c3a:	f023 0303 	bic.w	r3, r3, #3
 8007c3e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007c40:	683b      	ldr	r3, [r7, #0]
 8007c42:	681b      	ldr	r3, [r3, #0]
 8007c44:	68fa      	ldr	r2, [r7, #12]
 8007c46:	4313      	orrs	r3, r2
 8007c48:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007c4a:	697b      	ldr	r3, [r7, #20]
 8007c4c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007c50:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007c52:	683b      	ldr	r3, [r7, #0]
 8007c54:	689b      	ldr	r3, [r3, #8]
 8007c56:	021b      	lsls	r3, r3, #8
 8007c58:	697a      	ldr	r2, [r7, #20]
 8007c5a:	4313      	orrs	r3, r2
 8007c5c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	4a2b      	ldr	r2, [pc, #172]	; (8007d10 <TIM_OC3_SetConfig+0x10c>)
 8007c62:	4293      	cmp	r3, r2
 8007c64:	d007      	beq.n	8007c76 <TIM_OC3_SetConfig+0x72>
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	4a2a      	ldr	r2, [pc, #168]	; (8007d14 <TIM_OC3_SetConfig+0x110>)
 8007c6a:	4293      	cmp	r3, r2
 8007c6c:	d003      	beq.n	8007c76 <TIM_OC3_SetConfig+0x72>
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	4a29      	ldr	r2, [pc, #164]	; (8007d18 <TIM_OC3_SetConfig+0x114>)
 8007c72:	4293      	cmp	r3, r2
 8007c74:	d10d      	bne.n	8007c92 <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007c76:	697b      	ldr	r3, [r7, #20]
 8007c78:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007c7c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007c7e:	683b      	ldr	r3, [r7, #0]
 8007c80:	68db      	ldr	r3, [r3, #12]
 8007c82:	021b      	lsls	r3, r3, #8
 8007c84:	697a      	ldr	r2, [r7, #20]
 8007c86:	4313      	orrs	r3, r2
 8007c88:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007c8a:	697b      	ldr	r3, [r7, #20]
 8007c8c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007c90:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	4a1e      	ldr	r2, [pc, #120]	; (8007d10 <TIM_OC3_SetConfig+0x10c>)
 8007c96:	4293      	cmp	r3, r2
 8007c98:	d013      	beq.n	8007cc2 <TIM_OC3_SetConfig+0xbe>
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	4a1d      	ldr	r2, [pc, #116]	; (8007d14 <TIM_OC3_SetConfig+0x110>)
 8007c9e:	4293      	cmp	r3, r2
 8007ca0:	d00f      	beq.n	8007cc2 <TIM_OC3_SetConfig+0xbe>
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	4a1d      	ldr	r2, [pc, #116]	; (8007d1c <TIM_OC3_SetConfig+0x118>)
 8007ca6:	4293      	cmp	r3, r2
 8007ca8:	d00b      	beq.n	8007cc2 <TIM_OC3_SetConfig+0xbe>
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	4a1c      	ldr	r2, [pc, #112]	; (8007d20 <TIM_OC3_SetConfig+0x11c>)
 8007cae:	4293      	cmp	r3, r2
 8007cb0:	d007      	beq.n	8007cc2 <TIM_OC3_SetConfig+0xbe>
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	4a1b      	ldr	r2, [pc, #108]	; (8007d24 <TIM_OC3_SetConfig+0x120>)
 8007cb6:	4293      	cmp	r3, r2
 8007cb8:	d003      	beq.n	8007cc2 <TIM_OC3_SetConfig+0xbe>
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	4a16      	ldr	r2, [pc, #88]	; (8007d18 <TIM_OC3_SetConfig+0x114>)
 8007cbe:	4293      	cmp	r3, r2
 8007cc0:	d113      	bne.n	8007cea <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007cc2:	693b      	ldr	r3, [r7, #16]
 8007cc4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007cc8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007cca:	693b      	ldr	r3, [r7, #16]
 8007ccc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007cd0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007cd2:	683b      	ldr	r3, [r7, #0]
 8007cd4:	695b      	ldr	r3, [r3, #20]
 8007cd6:	011b      	lsls	r3, r3, #4
 8007cd8:	693a      	ldr	r2, [r7, #16]
 8007cda:	4313      	orrs	r3, r2
 8007cdc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007cde:	683b      	ldr	r3, [r7, #0]
 8007ce0:	699b      	ldr	r3, [r3, #24]
 8007ce2:	011b      	lsls	r3, r3, #4
 8007ce4:	693a      	ldr	r2, [r7, #16]
 8007ce6:	4313      	orrs	r3, r2
 8007ce8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	693a      	ldr	r2, [r7, #16]
 8007cee:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	68fa      	ldr	r2, [r7, #12]
 8007cf4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007cf6:	683b      	ldr	r3, [r7, #0]
 8007cf8:	685a      	ldr	r2, [r3, #4]
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	697a      	ldr	r2, [r7, #20]
 8007d02:	621a      	str	r2, [r3, #32]
}
 8007d04:	bf00      	nop
 8007d06:	371c      	adds	r7, #28
 8007d08:	46bd      	mov	sp, r7
 8007d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d0e:	4770      	bx	lr
 8007d10:	40012c00 	.word	0x40012c00
 8007d14:	40013400 	.word	0x40013400
 8007d18:	40015000 	.word	0x40015000
 8007d1c:	40014000 	.word	0x40014000
 8007d20:	40014400 	.word	0x40014400
 8007d24:	40014800 	.word	0x40014800

08007d28 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007d28:	b480      	push	{r7}
 8007d2a:	b087      	sub	sp, #28
 8007d2c:	af00      	add	r7, sp, #0
 8007d2e:	6078      	str	r0, [r7, #4]
 8007d30:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	6a1b      	ldr	r3, [r3, #32]
 8007d36:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	6a1b      	ldr	r3, [r3, #32]
 8007d42:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	685b      	ldr	r3, [r3, #4]
 8007d48:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	69db      	ldr	r3, [r3, #28]
 8007d4e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007d50:	68fb      	ldr	r3, [r7, #12]
 8007d52:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007d56:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007d5a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007d5c:	68fb      	ldr	r3, [r7, #12]
 8007d5e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007d62:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007d64:	683b      	ldr	r3, [r7, #0]
 8007d66:	681b      	ldr	r3, [r3, #0]
 8007d68:	021b      	lsls	r3, r3, #8
 8007d6a:	68fa      	ldr	r2, [r7, #12]
 8007d6c:	4313      	orrs	r3, r2
 8007d6e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007d70:	697b      	ldr	r3, [r7, #20]
 8007d72:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007d76:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007d78:	683b      	ldr	r3, [r7, #0]
 8007d7a:	689b      	ldr	r3, [r3, #8]
 8007d7c:	031b      	lsls	r3, r3, #12
 8007d7e:	697a      	ldr	r2, [r7, #20]
 8007d80:	4313      	orrs	r3, r2
 8007d82:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	4a2c      	ldr	r2, [pc, #176]	; (8007e38 <TIM_OC4_SetConfig+0x110>)
 8007d88:	4293      	cmp	r3, r2
 8007d8a:	d007      	beq.n	8007d9c <TIM_OC4_SetConfig+0x74>
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	4a2b      	ldr	r2, [pc, #172]	; (8007e3c <TIM_OC4_SetConfig+0x114>)
 8007d90:	4293      	cmp	r3, r2
 8007d92:	d003      	beq.n	8007d9c <TIM_OC4_SetConfig+0x74>
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	4a2a      	ldr	r2, [pc, #168]	; (8007e40 <TIM_OC4_SetConfig+0x118>)
 8007d98:	4293      	cmp	r3, r2
 8007d9a:	d10d      	bne.n	8007db8 <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8007d9c:	697b      	ldr	r3, [r7, #20]
 8007d9e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007da2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8007da4:	683b      	ldr	r3, [r7, #0]
 8007da6:	68db      	ldr	r3, [r3, #12]
 8007da8:	031b      	lsls	r3, r3, #12
 8007daa:	697a      	ldr	r2, [r7, #20]
 8007dac:	4313      	orrs	r3, r2
 8007dae:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8007db0:	697b      	ldr	r3, [r7, #20]
 8007db2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007db6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	4a1f      	ldr	r2, [pc, #124]	; (8007e38 <TIM_OC4_SetConfig+0x110>)
 8007dbc:	4293      	cmp	r3, r2
 8007dbe:	d013      	beq.n	8007de8 <TIM_OC4_SetConfig+0xc0>
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	4a1e      	ldr	r2, [pc, #120]	; (8007e3c <TIM_OC4_SetConfig+0x114>)
 8007dc4:	4293      	cmp	r3, r2
 8007dc6:	d00f      	beq.n	8007de8 <TIM_OC4_SetConfig+0xc0>
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	4a1e      	ldr	r2, [pc, #120]	; (8007e44 <TIM_OC4_SetConfig+0x11c>)
 8007dcc:	4293      	cmp	r3, r2
 8007dce:	d00b      	beq.n	8007de8 <TIM_OC4_SetConfig+0xc0>
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	4a1d      	ldr	r2, [pc, #116]	; (8007e48 <TIM_OC4_SetConfig+0x120>)
 8007dd4:	4293      	cmp	r3, r2
 8007dd6:	d007      	beq.n	8007de8 <TIM_OC4_SetConfig+0xc0>
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	4a1c      	ldr	r2, [pc, #112]	; (8007e4c <TIM_OC4_SetConfig+0x124>)
 8007ddc:	4293      	cmp	r3, r2
 8007dde:	d003      	beq.n	8007de8 <TIM_OC4_SetConfig+0xc0>
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	4a17      	ldr	r2, [pc, #92]	; (8007e40 <TIM_OC4_SetConfig+0x118>)
 8007de4:	4293      	cmp	r3, r2
 8007de6:	d113      	bne.n	8007e10 <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007de8:	693b      	ldr	r3, [r7, #16]
 8007dea:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007dee:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8007df0:	693b      	ldr	r3, [r7, #16]
 8007df2:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007df6:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007df8:	683b      	ldr	r3, [r7, #0]
 8007dfa:	695b      	ldr	r3, [r3, #20]
 8007dfc:	019b      	lsls	r3, r3, #6
 8007dfe:	693a      	ldr	r2, [r7, #16]
 8007e00:	4313      	orrs	r3, r2
 8007e02:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8007e04:	683b      	ldr	r3, [r7, #0]
 8007e06:	699b      	ldr	r3, [r3, #24]
 8007e08:	019b      	lsls	r3, r3, #6
 8007e0a:	693a      	ldr	r2, [r7, #16]
 8007e0c:	4313      	orrs	r3, r2
 8007e0e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	693a      	ldr	r2, [r7, #16]
 8007e14:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	68fa      	ldr	r2, [r7, #12]
 8007e1a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007e1c:	683b      	ldr	r3, [r7, #0]
 8007e1e:	685a      	ldr	r2, [r3, #4]
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	697a      	ldr	r2, [r7, #20]
 8007e28:	621a      	str	r2, [r3, #32]
}
 8007e2a:	bf00      	nop
 8007e2c:	371c      	adds	r7, #28
 8007e2e:	46bd      	mov	sp, r7
 8007e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e34:	4770      	bx	lr
 8007e36:	bf00      	nop
 8007e38:	40012c00 	.word	0x40012c00
 8007e3c:	40013400 	.word	0x40013400
 8007e40:	40015000 	.word	0x40015000
 8007e44:	40014000 	.word	0x40014000
 8007e48:	40014400 	.word	0x40014400
 8007e4c:	40014800 	.word	0x40014800

08007e50 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8007e50:	b480      	push	{r7}
 8007e52:	b087      	sub	sp, #28
 8007e54:	af00      	add	r7, sp, #0
 8007e56:	6078      	str	r0, [r7, #4]
 8007e58:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	6a1b      	ldr	r3, [r3, #32]
 8007e5e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	6a1b      	ldr	r3, [r3, #32]
 8007e6a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	685b      	ldr	r3, [r3, #4]
 8007e70:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007e76:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8007e78:	68fb      	ldr	r3, [r7, #12]
 8007e7a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007e7e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007e82:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007e84:	683b      	ldr	r3, [r7, #0]
 8007e86:	681b      	ldr	r3, [r3, #0]
 8007e88:	68fa      	ldr	r2, [r7, #12]
 8007e8a:	4313      	orrs	r3, r2
 8007e8c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8007e8e:	693b      	ldr	r3, [r7, #16]
 8007e90:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8007e94:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8007e96:	683b      	ldr	r3, [r7, #0]
 8007e98:	689b      	ldr	r3, [r3, #8]
 8007e9a:	041b      	lsls	r3, r3, #16
 8007e9c:	693a      	ldr	r2, [r7, #16]
 8007e9e:	4313      	orrs	r3, r2
 8007ea0:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	4a19      	ldr	r2, [pc, #100]	; (8007f0c <TIM_OC5_SetConfig+0xbc>)
 8007ea6:	4293      	cmp	r3, r2
 8007ea8:	d013      	beq.n	8007ed2 <TIM_OC5_SetConfig+0x82>
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	4a18      	ldr	r2, [pc, #96]	; (8007f10 <TIM_OC5_SetConfig+0xc0>)
 8007eae:	4293      	cmp	r3, r2
 8007eb0:	d00f      	beq.n	8007ed2 <TIM_OC5_SetConfig+0x82>
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	4a17      	ldr	r2, [pc, #92]	; (8007f14 <TIM_OC5_SetConfig+0xc4>)
 8007eb6:	4293      	cmp	r3, r2
 8007eb8:	d00b      	beq.n	8007ed2 <TIM_OC5_SetConfig+0x82>
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	4a16      	ldr	r2, [pc, #88]	; (8007f18 <TIM_OC5_SetConfig+0xc8>)
 8007ebe:	4293      	cmp	r3, r2
 8007ec0:	d007      	beq.n	8007ed2 <TIM_OC5_SetConfig+0x82>
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	4a15      	ldr	r2, [pc, #84]	; (8007f1c <TIM_OC5_SetConfig+0xcc>)
 8007ec6:	4293      	cmp	r3, r2
 8007ec8:	d003      	beq.n	8007ed2 <TIM_OC5_SetConfig+0x82>
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	4a14      	ldr	r2, [pc, #80]	; (8007f20 <TIM_OC5_SetConfig+0xd0>)
 8007ece:	4293      	cmp	r3, r2
 8007ed0:	d109      	bne.n	8007ee6 <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8007ed2:	697b      	ldr	r3, [r7, #20]
 8007ed4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007ed8:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8007eda:	683b      	ldr	r3, [r7, #0]
 8007edc:	695b      	ldr	r3, [r3, #20]
 8007ede:	021b      	lsls	r3, r3, #8
 8007ee0:	697a      	ldr	r2, [r7, #20]
 8007ee2:	4313      	orrs	r3, r2
 8007ee4:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	697a      	ldr	r2, [r7, #20]
 8007eea:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	68fa      	ldr	r2, [r7, #12]
 8007ef0:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8007ef2:	683b      	ldr	r3, [r7, #0]
 8007ef4:	685a      	ldr	r2, [r3, #4]
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	693a      	ldr	r2, [r7, #16]
 8007efe:	621a      	str	r2, [r3, #32]
}
 8007f00:	bf00      	nop
 8007f02:	371c      	adds	r7, #28
 8007f04:	46bd      	mov	sp, r7
 8007f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f0a:	4770      	bx	lr
 8007f0c:	40012c00 	.word	0x40012c00
 8007f10:	40013400 	.word	0x40013400
 8007f14:	40014000 	.word	0x40014000
 8007f18:	40014400 	.word	0x40014400
 8007f1c:	40014800 	.word	0x40014800
 8007f20:	40015000 	.word	0x40015000

08007f24 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8007f24:	b480      	push	{r7}
 8007f26:	b087      	sub	sp, #28
 8007f28:	af00      	add	r7, sp, #0
 8007f2a:	6078      	str	r0, [r7, #4]
 8007f2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	6a1b      	ldr	r3, [r3, #32]
 8007f32:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	6a1b      	ldr	r3, [r3, #32]
 8007f3e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	685b      	ldr	r3, [r3, #4]
 8007f44:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007f4a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8007f4c:	68fb      	ldr	r3, [r7, #12]
 8007f4e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007f52:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007f56:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007f58:	683b      	ldr	r3, [r7, #0]
 8007f5a:	681b      	ldr	r3, [r3, #0]
 8007f5c:	021b      	lsls	r3, r3, #8
 8007f5e:	68fa      	ldr	r2, [r7, #12]
 8007f60:	4313      	orrs	r3, r2
 8007f62:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8007f64:	693b      	ldr	r3, [r7, #16]
 8007f66:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007f6a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8007f6c:	683b      	ldr	r3, [r7, #0]
 8007f6e:	689b      	ldr	r3, [r3, #8]
 8007f70:	051b      	lsls	r3, r3, #20
 8007f72:	693a      	ldr	r2, [r7, #16]
 8007f74:	4313      	orrs	r3, r2
 8007f76:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	4a1a      	ldr	r2, [pc, #104]	; (8007fe4 <TIM_OC6_SetConfig+0xc0>)
 8007f7c:	4293      	cmp	r3, r2
 8007f7e:	d013      	beq.n	8007fa8 <TIM_OC6_SetConfig+0x84>
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	4a19      	ldr	r2, [pc, #100]	; (8007fe8 <TIM_OC6_SetConfig+0xc4>)
 8007f84:	4293      	cmp	r3, r2
 8007f86:	d00f      	beq.n	8007fa8 <TIM_OC6_SetConfig+0x84>
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	4a18      	ldr	r2, [pc, #96]	; (8007fec <TIM_OC6_SetConfig+0xc8>)
 8007f8c:	4293      	cmp	r3, r2
 8007f8e:	d00b      	beq.n	8007fa8 <TIM_OC6_SetConfig+0x84>
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	4a17      	ldr	r2, [pc, #92]	; (8007ff0 <TIM_OC6_SetConfig+0xcc>)
 8007f94:	4293      	cmp	r3, r2
 8007f96:	d007      	beq.n	8007fa8 <TIM_OC6_SetConfig+0x84>
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	4a16      	ldr	r2, [pc, #88]	; (8007ff4 <TIM_OC6_SetConfig+0xd0>)
 8007f9c:	4293      	cmp	r3, r2
 8007f9e:	d003      	beq.n	8007fa8 <TIM_OC6_SetConfig+0x84>
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	4a15      	ldr	r2, [pc, #84]	; (8007ff8 <TIM_OC6_SetConfig+0xd4>)
 8007fa4:	4293      	cmp	r3, r2
 8007fa6:	d109      	bne.n	8007fbc <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8007fa8:	697b      	ldr	r3, [r7, #20]
 8007faa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007fae:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8007fb0:	683b      	ldr	r3, [r7, #0]
 8007fb2:	695b      	ldr	r3, [r3, #20]
 8007fb4:	029b      	lsls	r3, r3, #10
 8007fb6:	697a      	ldr	r2, [r7, #20]
 8007fb8:	4313      	orrs	r3, r2
 8007fba:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	697a      	ldr	r2, [r7, #20]
 8007fc0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	68fa      	ldr	r2, [r7, #12]
 8007fc6:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8007fc8:	683b      	ldr	r3, [r7, #0]
 8007fca:	685a      	ldr	r2, [r3, #4]
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	693a      	ldr	r2, [r7, #16]
 8007fd4:	621a      	str	r2, [r3, #32]
}
 8007fd6:	bf00      	nop
 8007fd8:	371c      	adds	r7, #28
 8007fda:	46bd      	mov	sp, r7
 8007fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fe0:	4770      	bx	lr
 8007fe2:	bf00      	nop
 8007fe4:	40012c00 	.word	0x40012c00
 8007fe8:	40013400 	.word	0x40013400
 8007fec:	40014000 	.word	0x40014000
 8007ff0:	40014400 	.word	0x40014400
 8007ff4:	40014800 	.word	0x40014800
 8007ff8:	40015000 	.word	0x40015000

08007ffc <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8007ffc:	b580      	push	{r7, lr}
 8007ffe:	b086      	sub	sp, #24
 8008000:	af00      	add	r7, sp, #0
 8008002:	6078      	str	r0, [r7, #4]
 8008004:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008006:	2300      	movs	r3, #0
 8008008:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	681b      	ldr	r3, [r3, #0]
 800800e:	689b      	ldr	r3, [r3, #8]
 8008010:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008012:	693b      	ldr	r3, [r7, #16]
 8008014:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8008018:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800801c:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 800801e:	683b      	ldr	r3, [r7, #0]
 8008020:	685b      	ldr	r3, [r3, #4]
 8008022:	693a      	ldr	r2, [r7, #16]
 8008024:	4313      	orrs	r3, r2
 8008026:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8008028:	693b      	ldr	r3, [r7, #16]
 800802a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800802e:	f023 0307 	bic.w	r3, r3, #7
 8008032:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8008034:	683b      	ldr	r3, [r7, #0]
 8008036:	681b      	ldr	r3, [r3, #0]
 8008038:	693a      	ldr	r2, [r7, #16]
 800803a:	4313      	orrs	r3, r2
 800803c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	681b      	ldr	r3, [r3, #0]
 8008042:	693a      	ldr	r2, [r7, #16]
 8008044:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8008046:	683b      	ldr	r3, [r7, #0]
 8008048:	685b      	ldr	r3, [r3, #4]
 800804a:	4a52      	ldr	r2, [pc, #328]	; (8008194 <TIM_SlaveTimer_SetConfig+0x198>)
 800804c:	4293      	cmp	r3, r2
 800804e:	f000 809a 	beq.w	8008186 <TIM_SlaveTimer_SetConfig+0x18a>
 8008052:	4a50      	ldr	r2, [pc, #320]	; (8008194 <TIM_SlaveTimer_SetConfig+0x198>)
 8008054:	4293      	cmp	r3, r2
 8008056:	f200 8093 	bhi.w	8008180 <TIM_SlaveTimer_SetConfig+0x184>
 800805a:	4a4f      	ldr	r2, [pc, #316]	; (8008198 <TIM_SlaveTimer_SetConfig+0x19c>)
 800805c:	4293      	cmp	r3, r2
 800805e:	f000 8092 	beq.w	8008186 <TIM_SlaveTimer_SetConfig+0x18a>
 8008062:	4a4d      	ldr	r2, [pc, #308]	; (8008198 <TIM_SlaveTimer_SetConfig+0x19c>)
 8008064:	4293      	cmp	r3, r2
 8008066:	f200 808b 	bhi.w	8008180 <TIM_SlaveTimer_SetConfig+0x184>
 800806a:	4a4c      	ldr	r2, [pc, #304]	; (800819c <TIM_SlaveTimer_SetConfig+0x1a0>)
 800806c:	4293      	cmp	r3, r2
 800806e:	f000 808a 	beq.w	8008186 <TIM_SlaveTimer_SetConfig+0x18a>
 8008072:	4a4a      	ldr	r2, [pc, #296]	; (800819c <TIM_SlaveTimer_SetConfig+0x1a0>)
 8008074:	4293      	cmp	r3, r2
 8008076:	f200 8083 	bhi.w	8008180 <TIM_SlaveTimer_SetConfig+0x184>
 800807a:	4a49      	ldr	r2, [pc, #292]	; (80081a0 <TIM_SlaveTimer_SetConfig+0x1a4>)
 800807c:	4293      	cmp	r3, r2
 800807e:	f000 8082 	beq.w	8008186 <TIM_SlaveTimer_SetConfig+0x18a>
 8008082:	4a47      	ldr	r2, [pc, #284]	; (80081a0 <TIM_SlaveTimer_SetConfig+0x1a4>)
 8008084:	4293      	cmp	r3, r2
 8008086:	d87b      	bhi.n	8008180 <TIM_SlaveTimer_SetConfig+0x184>
 8008088:	4a46      	ldr	r2, [pc, #280]	; (80081a4 <TIM_SlaveTimer_SetConfig+0x1a8>)
 800808a:	4293      	cmp	r3, r2
 800808c:	d07b      	beq.n	8008186 <TIM_SlaveTimer_SetConfig+0x18a>
 800808e:	4a45      	ldr	r2, [pc, #276]	; (80081a4 <TIM_SlaveTimer_SetConfig+0x1a8>)
 8008090:	4293      	cmp	r3, r2
 8008092:	d875      	bhi.n	8008180 <TIM_SlaveTimer_SetConfig+0x184>
 8008094:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8008098:	d075      	beq.n	8008186 <TIM_SlaveTimer_SetConfig+0x18a>
 800809a:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800809e:	d86f      	bhi.n	8008180 <TIM_SlaveTimer_SetConfig+0x184>
 80080a0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80080a4:	d06f      	beq.n	8008186 <TIM_SlaveTimer_SetConfig+0x18a>
 80080a6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80080aa:	d869      	bhi.n	8008180 <TIM_SlaveTimer_SetConfig+0x184>
 80080ac:	2b70      	cmp	r3, #112	; 0x70
 80080ae:	d01a      	beq.n	80080e6 <TIM_SlaveTimer_SetConfig+0xea>
 80080b0:	2b70      	cmp	r3, #112	; 0x70
 80080b2:	d865      	bhi.n	8008180 <TIM_SlaveTimer_SetConfig+0x184>
 80080b4:	2b60      	cmp	r3, #96	; 0x60
 80080b6:	d059      	beq.n	800816c <TIM_SlaveTimer_SetConfig+0x170>
 80080b8:	2b60      	cmp	r3, #96	; 0x60
 80080ba:	d861      	bhi.n	8008180 <TIM_SlaveTimer_SetConfig+0x184>
 80080bc:	2b50      	cmp	r3, #80	; 0x50
 80080be:	d04b      	beq.n	8008158 <TIM_SlaveTimer_SetConfig+0x15c>
 80080c0:	2b50      	cmp	r3, #80	; 0x50
 80080c2:	d85d      	bhi.n	8008180 <TIM_SlaveTimer_SetConfig+0x184>
 80080c4:	2b40      	cmp	r3, #64	; 0x40
 80080c6:	d019      	beq.n	80080fc <TIM_SlaveTimer_SetConfig+0x100>
 80080c8:	2b40      	cmp	r3, #64	; 0x40
 80080ca:	d859      	bhi.n	8008180 <TIM_SlaveTimer_SetConfig+0x184>
 80080cc:	2b30      	cmp	r3, #48	; 0x30
 80080ce:	d05a      	beq.n	8008186 <TIM_SlaveTimer_SetConfig+0x18a>
 80080d0:	2b30      	cmp	r3, #48	; 0x30
 80080d2:	d855      	bhi.n	8008180 <TIM_SlaveTimer_SetConfig+0x184>
 80080d4:	2b20      	cmp	r3, #32
 80080d6:	d056      	beq.n	8008186 <TIM_SlaveTimer_SetConfig+0x18a>
 80080d8:	2b20      	cmp	r3, #32
 80080da:	d851      	bhi.n	8008180 <TIM_SlaveTimer_SetConfig+0x184>
 80080dc:	2b00      	cmp	r3, #0
 80080de:	d052      	beq.n	8008186 <TIM_SlaveTimer_SetConfig+0x18a>
 80080e0:	2b10      	cmp	r3, #16
 80080e2:	d050      	beq.n	8008186 <TIM_SlaveTimer_SetConfig+0x18a>
 80080e4:	e04c      	b.n	8008180 <TIM_SlaveTimer_SetConfig+0x184>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	6818      	ldr	r0, [r3, #0]
 80080ea:	683b      	ldr	r3, [r7, #0]
 80080ec:	68d9      	ldr	r1, [r3, #12]
 80080ee:	683b      	ldr	r3, [r7, #0]
 80080f0:	689a      	ldr	r2, [r3, #8]
 80080f2:	683b      	ldr	r3, [r7, #0]
 80080f4:	691b      	ldr	r3, [r3, #16]
 80080f6:	f000 f9fd 	bl	80084f4 <TIM_ETR_SetConfig>
                        sSlaveConfig->TriggerPrescaler,
                        sSlaveConfig->TriggerPolarity,
                        sSlaveConfig->TriggerFilter);
      break;
 80080fa:	e045      	b.n	8008188 <TIM_SlaveTimer_SetConfig+0x18c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if ((sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED) || \
 80080fc:	683b      	ldr	r3, [r7, #0]
 80080fe:	681b      	ldr	r3, [r3, #0]
 8008100:	2b05      	cmp	r3, #5
 8008102:	d004      	beq.n	800810e <TIM_SlaveTimer_SetConfig+0x112>
          (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_COMBINED_GATEDRESET))
 8008104:	683b      	ldr	r3, [r7, #0]
 8008106:	681b      	ldr	r3, [r3, #0]
      if ((sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED) || \
 8008108:	f1b3 1f01 	cmp.w	r3, #65537	; 0x10001
 800810c:	d101      	bne.n	8008112 <TIM_SlaveTimer_SetConfig+0x116>
      {
        return HAL_ERROR;
 800810e:	2301      	movs	r3, #1
 8008110:	e03b      	b.n	800818a <TIM_SlaveTimer_SetConfig+0x18e>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	681b      	ldr	r3, [r3, #0]
 8008116:	6a1b      	ldr	r3, [r3, #32]
 8008118:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	681b      	ldr	r3, [r3, #0]
 800811e:	6a1a      	ldr	r2, [r3, #32]
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	681b      	ldr	r3, [r3, #0]
 8008124:	f022 0201 	bic.w	r2, r2, #1
 8008128:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	681b      	ldr	r3, [r3, #0]
 800812e:	699b      	ldr	r3, [r3, #24]
 8008130:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008132:	68bb      	ldr	r3, [r7, #8]
 8008134:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008138:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 800813a:	683b      	ldr	r3, [r7, #0]
 800813c:	691b      	ldr	r3, [r3, #16]
 800813e:	011b      	lsls	r3, r3, #4
 8008140:	68ba      	ldr	r2, [r7, #8]
 8008142:	4313      	orrs	r3, r2
 8008144:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	681b      	ldr	r3, [r3, #0]
 800814a:	68ba      	ldr	r2, [r7, #8]
 800814c:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	681b      	ldr	r3, [r3, #0]
 8008152:	68fa      	ldr	r2, [r7, #12]
 8008154:	621a      	str	r2, [r3, #32]
      break;
 8008156:	e017      	b.n	8008188 <TIM_SlaveTimer_SetConfig+0x18c>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	6818      	ldr	r0, [r3, #0]
 800815c:	683b      	ldr	r3, [r7, #0]
 800815e:	6899      	ldr	r1, [r3, #8]
 8008160:	683b      	ldr	r3, [r7, #0]
 8008162:	691b      	ldr	r3, [r3, #16]
 8008164:	461a      	mov	r2, r3
 8008166:	f000 f893 	bl	8008290 <TIM_TI1_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 800816a:	e00d      	b.n	8008188 <TIM_SlaveTimer_SetConfig+0x18c>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	6818      	ldr	r0, [r3, #0]
 8008170:	683b      	ldr	r3, [r7, #0]
 8008172:	6899      	ldr	r1, [r3, #8]
 8008174:	683b      	ldr	r3, [r7, #0]
 8008176:	691b      	ldr	r3, [r3, #16]
 8008178:	461a      	mov	r2, r3
 800817a:	f000 f8f5 	bl	8008368 <TIM_TI2_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 800817e:	e003      	b.n	8008188 <TIM_SlaveTimer_SetConfig+0x18c>
      assert_param(IS_TIM_INTERNAL_TRIGGEREVENT_INSTANCE((htim->Instance), sSlaveConfig->InputTrigger));
      break;
    }

    default:
      status = HAL_ERROR;
 8008180:	2301      	movs	r3, #1
 8008182:	75fb      	strb	r3, [r7, #23]
      break;
 8008184:	e000      	b.n	8008188 <TIM_SlaveTimer_SetConfig+0x18c>
      break;
 8008186:	bf00      	nop
  }

  return status;
 8008188:	7dfb      	ldrb	r3, [r7, #23]
}
 800818a:	4618      	mov	r0, r3
 800818c:	3718      	adds	r7, #24
 800818e:	46bd      	mov	sp, r7
 8008190:	bd80      	pop	{r7, pc}
 8008192:	bf00      	nop
 8008194:	00100070 	.word	0x00100070
 8008198:	00100050 	.word	0x00100050
 800819c:	00100040 	.word	0x00100040
 80081a0:	00100030 	.word	0x00100030
 80081a4:	00100020 	.word	0x00100020

080081a8 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 80081a8:	b480      	push	{r7}
 80081aa:	b087      	sub	sp, #28
 80081ac:	af00      	add	r7, sp, #0
 80081ae:	60f8      	str	r0, [r7, #12]
 80081b0:	60b9      	str	r1, [r7, #8]
 80081b2:	607a      	str	r2, [r7, #4]
 80081b4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80081b6:	68fb      	ldr	r3, [r7, #12]
 80081b8:	6a1b      	ldr	r3, [r3, #32]
 80081ba:	f023 0201 	bic.w	r2, r3, #1
 80081be:	68fb      	ldr	r3, [r7, #12]
 80081c0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80081c2:	68fb      	ldr	r3, [r7, #12]
 80081c4:	699b      	ldr	r3, [r3, #24]
 80081c6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80081c8:	68fb      	ldr	r3, [r7, #12]
 80081ca:	6a1b      	ldr	r3, [r3, #32]
 80081cc:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80081ce:	68fb      	ldr	r3, [r7, #12]
 80081d0:	4a28      	ldr	r2, [pc, #160]	; (8008274 <TIM_TI1_SetConfig+0xcc>)
 80081d2:	4293      	cmp	r3, r2
 80081d4:	d01b      	beq.n	800820e <TIM_TI1_SetConfig+0x66>
 80081d6:	68fb      	ldr	r3, [r7, #12]
 80081d8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80081dc:	d017      	beq.n	800820e <TIM_TI1_SetConfig+0x66>
 80081de:	68fb      	ldr	r3, [r7, #12]
 80081e0:	4a25      	ldr	r2, [pc, #148]	; (8008278 <TIM_TI1_SetConfig+0xd0>)
 80081e2:	4293      	cmp	r3, r2
 80081e4:	d013      	beq.n	800820e <TIM_TI1_SetConfig+0x66>
 80081e6:	68fb      	ldr	r3, [r7, #12]
 80081e8:	4a24      	ldr	r2, [pc, #144]	; (800827c <TIM_TI1_SetConfig+0xd4>)
 80081ea:	4293      	cmp	r3, r2
 80081ec:	d00f      	beq.n	800820e <TIM_TI1_SetConfig+0x66>
 80081ee:	68fb      	ldr	r3, [r7, #12]
 80081f0:	4a23      	ldr	r2, [pc, #140]	; (8008280 <TIM_TI1_SetConfig+0xd8>)
 80081f2:	4293      	cmp	r3, r2
 80081f4:	d00b      	beq.n	800820e <TIM_TI1_SetConfig+0x66>
 80081f6:	68fb      	ldr	r3, [r7, #12]
 80081f8:	4a22      	ldr	r2, [pc, #136]	; (8008284 <TIM_TI1_SetConfig+0xdc>)
 80081fa:	4293      	cmp	r3, r2
 80081fc:	d007      	beq.n	800820e <TIM_TI1_SetConfig+0x66>
 80081fe:	68fb      	ldr	r3, [r7, #12]
 8008200:	4a21      	ldr	r2, [pc, #132]	; (8008288 <TIM_TI1_SetConfig+0xe0>)
 8008202:	4293      	cmp	r3, r2
 8008204:	d003      	beq.n	800820e <TIM_TI1_SetConfig+0x66>
 8008206:	68fb      	ldr	r3, [r7, #12]
 8008208:	4a20      	ldr	r2, [pc, #128]	; (800828c <TIM_TI1_SetConfig+0xe4>)
 800820a:	4293      	cmp	r3, r2
 800820c:	d101      	bne.n	8008212 <TIM_TI1_SetConfig+0x6a>
 800820e:	2301      	movs	r3, #1
 8008210:	e000      	b.n	8008214 <TIM_TI1_SetConfig+0x6c>
 8008212:	2300      	movs	r3, #0
 8008214:	2b00      	cmp	r3, #0
 8008216:	d008      	beq.n	800822a <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8008218:	697b      	ldr	r3, [r7, #20]
 800821a:	f023 0303 	bic.w	r3, r3, #3
 800821e:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8008220:	697a      	ldr	r2, [r7, #20]
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	4313      	orrs	r3, r2
 8008226:	617b      	str	r3, [r7, #20]
 8008228:	e003      	b.n	8008232 <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800822a:	697b      	ldr	r3, [r7, #20]
 800822c:	f043 0301 	orr.w	r3, r3, #1
 8008230:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008232:	697b      	ldr	r3, [r7, #20]
 8008234:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008238:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800823a:	683b      	ldr	r3, [r7, #0]
 800823c:	011b      	lsls	r3, r3, #4
 800823e:	b2db      	uxtb	r3, r3
 8008240:	697a      	ldr	r2, [r7, #20]
 8008242:	4313      	orrs	r3, r2
 8008244:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008246:	693b      	ldr	r3, [r7, #16]
 8008248:	f023 030a 	bic.w	r3, r3, #10
 800824c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800824e:	68bb      	ldr	r3, [r7, #8]
 8008250:	f003 030a 	and.w	r3, r3, #10
 8008254:	693a      	ldr	r2, [r7, #16]
 8008256:	4313      	orrs	r3, r2
 8008258:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800825a:	68fb      	ldr	r3, [r7, #12]
 800825c:	697a      	ldr	r2, [r7, #20]
 800825e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008260:	68fb      	ldr	r3, [r7, #12]
 8008262:	693a      	ldr	r2, [r7, #16]
 8008264:	621a      	str	r2, [r3, #32]
}
 8008266:	bf00      	nop
 8008268:	371c      	adds	r7, #28
 800826a:	46bd      	mov	sp, r7
 800826c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008270:	4770      	bx	lr
 8008272:	bf00      	nop
 8008274:	40012c00 	.word	0x40012c00
 8008278:	40000400 	.word	0x40000400
 800827c:	40000800 	.word	0x40000800
 8008280:	40000c00 	.word	0x40000c00
 8008284:	40013400 	.word	0x40013400
 8008288:	40014000 	.word	0x40014000
 800828c:	40015000 	.word	0x40015000

08008290 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008290:	b480      	push	{r7}
 8008292:	b087      	sub	sp, #28
 8008294:	af00      	add	r7, sp, #0
 8008296:	60f8      	str	r0, [r7, #12]
 8008298:	60b9      	str	r1, [r7, #8]
 800829a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800829c:	68fb      	ldr	r3, [r7, #12]
 800829e:	6a1b      	ldr	r3, [r3, #32]
 80082a0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80082a2:	68fb      	ldr	r3, [r7, #12]
 80082a4:	6a1b      	ldr	r3, [r3, #32]
 80082a6:	f023 0201 	bic.w	r2, r3, #1
 80082aa:	68fb      	ldr	r3, [r7, #12]
 80082ac:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80082ae:	68fb      	ldr	r3, [r7, #12]
 80082b0:	699b      	ldr	r3, [r3, #24]
 80082b2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80082b4:	693b      	ldr	r3, [r7, #16]
 80082b6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80082ba:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	011b      	lsls	r3, r3, #4
 80082c0:	693a      	ldr	r2, [r7, #16]
 80082c2:	4313      	orrs	r3, r2
 80082c4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80082c6:	697b      	ldr	r3, [r7, #20]
 80082c8:	f023 030a 	bic.w	r3, r3, #10
 80082cc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80082ce:	697a      	ldr	r2, [r7, #20]
 80082d0:	68bb      	ldr	r3, [r7, #8]
 80082d2:	4313      	orrs	r3, r2
 80082d4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80082d6:	68fb      	ldr	r3, [r7, #12]
 80082d8:	693a      	ldr	r2, [r7, #16]
 80082da:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80082dc:	68fb      	ldr	r3, [r7, #12]
 80082de:	697a      	ldr	r2, [r7, #20]
 80082e0:	621a      	str	r2, [r3, #32]
}
 80082e2:	bf00      	nop
 80082e4:	371c      	adds	r7, #28
 80082e6:	46bd      	mov	sp, r7
 80082e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082ec:	4770      	bx	lr

080082ee <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80082ee:	b480      	push	{r7}
 80082f0:	b087      	sub	sp, #28
 80082f2:	af00      	add	r7, sp, #0
 80082f4:	60f8      	str	r0, [r7, #12]
 80082f6:	60b9      	str	r1, [r7, #8]
 80082f8:	607a      	str	r2, [r7, #4]
 80082fa:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80082fc:	68fb      	ldr	r3, [r7, #12]
 80082fe:	6a1b      	ldr	r3, [r3, #32]
 8008300:	f023 0210 	bic.w	r2, r3, #16
 8008304:	68fb      	ldr	r3, [r7, #12]
 8008306:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008308:	68fb      	ldr	r3, [r7, #12]
 800830a:	699b      	ldr	r3, [r3, #24]
 800830c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800830e:	68fb      	ldr	r3, [r7, #12]
 8008310:	6a1b      	ldr	r3, [r3, #32]
 8008312:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8008314:	697b      	ldr	r3, [r7, #20]
 8008316:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800831a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	021b      	lsls	r3, r3, #8
 8008320:	697a      	ldr	r2, [r7, #20]
 8008322:	4313      	orrs	r3, r2
 8008324:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008326:	697b      	ldr	r3, [r7, #20]
 8008328:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800832c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800832e:	683b      	ldr	r3, [r7, #0]
 8008330:	031b      	lsls	r3, r3, #12
 8008332:	b29b      	uxth	r3, r3
 8008334:	697a      	ldr	r2, [r7, #20]
 8008336:	4313      	orrs	r3, r2
 8008338:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800833a:	693b      	ldr	r3, [r7, #16]
 800833c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8008340:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8008342:	68bb      	ldr	r3, [r7, #8]
 8008344:	011b      	lsls	r3, r3, #4
 8008346:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800834a:	693a      	ldr	r2, [r7, #16]
 800834c:	4313      	orrs	r3, r2
 800834e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008350:	68fb      	ldr	r3, [r7, #12]
 8008352:	697a      	ldr	r2, [r7, #20]
 8008354:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008356:	68fb      	ldr	r3, [r7, #12]
 8008358:	693a      	ldr	r2, [r7, #16]
 800835a:	621a      	str	r2, [r3, #32]
}
 800835c:	bf00      	nop
 800835e:	371c      	adds	r7, #28
 8008360:	46bd      	mov	sp, r7
 8008362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008366:	4770      	bx	lr

08008368 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008368:	b480      	push	{r7}
 800836a:	b087      	sub	sp, #28
 800836c:	af00      	add	r7, sp, #0
 800836e:	60f8      	str	r0, [r7, #12]
 8008370:	60b9      	str	r1, [r7, #8]
 8008372:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008374:	68fb      	ldr	r3, [r7, #12]
 8008376:	6a1b      	ldr	r3, [r3, #32]
 8008378:	f023 0210 	bic.w	r2, r3, #16
 800837c:	68fb      	ldr	r3, [r7, #12]
 800837e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008380:	68fb      	ldr	r3, [r7, #12]
 8008382:	699b      	ldr	r3, [r3, #24]
 8008384:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008386:	68fb      	ldr	r3, [r7, #12]
 8008388:	6a1b      	ldr	r3, [r3, #32]
 800838a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800838c:	697b      	ldr	r3, [r7, #20]
 800838e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008392:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	031b      	lsls	r3, r3, #12
 8008398:	697a      	ldr	r2, [r7, #20]
 800839a:	4313      	orrs	r3, r2
 800839c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800839e:	693b      	ldr	r3, [r7, #16]
 80083a0:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80083a4:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80083a6:	68bb      	ldr	r3, [r7, #8]
 80083a8:	011b      	lsls	r3, r3, #4
 80083aa:	693a      	ldr	r2, [r7, #16]
 80083ac:	4313      	orrs	r3, r2
 80083ae:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80083b0:	68fb      	ldr	r3, [r7, #12]
 80083b2:	697a      	ldr	r2, [r7, #20]
 80083b4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80083b6:	68fb      	ldr	r3, [r7, #12]
 80083b8:	693a      	ldr	r2, [r7, #16]
 80083ba:	621a      	str	r2, [r3, #32]
}
 80083bc:	bf00      	nop
 80083be:	371c      	adds	r7, #28
 80083c0:	46bd      	mov	sp, r7
 80083c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083c6:	4770      	bx	lr

080083c8 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80083c8:	b480      	push	{r7}
 80083ca:	b087      	sub	sp, #28
 80083cc:	af00      	add	r7, sp, #0
 80083ce:	60f8      	str	r0, [r7, #12]
 80083d0:	60b9      	str	r1, [r7, #8]
 80083d2:	607a      	str	r2, [r7, #4]
 80083d4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80083d6:	68fb      	ldr	r3, [r7, #12]
 80083d8:	6a1b      	ldr	r3, [r3, #32]
 80083da:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80083de:	68fb      	ldr	r3, [r7, #12]
 80083e0:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80083e2:	68fb      	ldr	r3, [r7, #12]
 80083e4:	69db      	ldr	r3, [r3, #28]
 80083e6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80083e8:	68fb      	ldr	r3, [r7, #12]
 80083ea:	6a1b      	ldr	r3, [r3, #32]
 80083ec:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 80083ee:	697b      	ldr	r3, [r7, #20]
 80083f0:	f023 0303 	bic.w	r3, r3, #3
 80083f4:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 80083f6:	697a      	ldr	r2, [r7, #20]
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	4313      	orrs	r3, r2
 80083fc:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 80083fe:	697b      	ldr	r3, [r7, #20]
 8008400:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008404:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8008406:	683b      	ldr	r3, [r7, #0]
 8008408:	011b      	lsls	r3, r3, #4
 800840a:	b2db      	uxtb	r3, r3
 800840c:	697a      	ldr	r2, [r7, #20]
 800840e:	4313      	orrs	r3, r2
 8008410:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8008412:	693b      	ldr	r3, [r7, #16]
 8008414:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8008418:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800841a:	68bb      	ldr	r3, [r7, #8]
 800841c:	021b      	lsls	r3, r3, #8
 800841e:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8008422:	693a      	ldr	r2, [r7, #16]
 8008424:	4313      	orrs	r3, r2
 8008426:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8008428:	68fb      	ldr	r3, [r7, #12]
 800842a:	697a      	ldr	r2, [r7, #20]
 800842c:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800842e:	68fb      	ldr	r3, [r7, #12]
 8008430:	693a      	ldr	r2, [r7, #16]
 8008432:	621a      	str	r2, [r3, #32]
}
 8008434:	bf00      	nop
 8008436:	371c      	adds	r7, #28
 8008438:	46bd      	mov	sp, r7
 800843a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800843e:	4770      	bx	lr

08008440 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8008440:	b480      	push	{r7}
 8008442:	b087      	sub	sp, #28
 8008444:	af00      	add	r7, sp, #0
 8008446:	60f8      	str	r0, [r7, #12]
 8008448:	60b9      	str	r1, [r7, #8]
 800844a:	607a      	str	r2, [r7, #4]
 800844c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800844e:	68fb      	ldr	r3, [r7, #12]
 8008450:	6a1b      	ldr	r3, [r3, #32]
 8008452:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8008456:	68fb      	ldr	r3, [r7, #12]
 8008458:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800845a:	68fb      	ldr	r3, [r7, #12]
 800845c:	69db      	ldr	r3, [r3, #28]
 800845e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008460:	68fb      	ldr	r3, [r7, #12]
 8008462:	6a1b      	ldr	r3, [r3, #32]
 8008464:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8008466:	697b      	ldr	r3, [r7, #20]
 8008468:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800846c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	021b      	lsls	r3, r3, #8
 8008472:	697a      	ldr	r2, [r7, #20]
 8008474:	4313      	orrs	r3, r2
 8008476:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8008478:	697b      	ldr	r3, [r7, #20]
 800847a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800847e:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8008480:	683b      	ldr	r3, [r7, #0]
 8008482:	031b      	lsls	r3, r3, #12
 8008484:	b29b      	uxth	r3, r3
 8008486:	697a      	ldr	r2, [r7, #20]
 8008488:	4313      	orrs	r3, r2
 800848a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 800848c:	693b      	ldr	r3, [r7, #16]
 800848e:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8008492:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8008494:	68bb      	ldr	r3, [r7, #8]
 8008496:	031b      	lsls	r3, r3, #12
 8008498:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 800849c:	693a      	ldr	r2, [r7, #16]
 800849e:	4313      	orrs	r3, r2
 80084a0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80084a2:	68fb      	ldr	r3, [r7, #12]
 80084a4:	697a      	ldr	r2, [r7, #20]
 80084a6:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 80084a8:	68fb      	ldr	r3, [r7, #12]
 80084aa:	693a      	ldr	r2, [r7, #16]
 80084ac:	621a      	str	r2, [r3, #32]
}
 80084ae:	bf00      	nop
 80084b0:	371c      	adds	r7, #28
 80084b2:	46bd      	mov	sp, r7
 80084b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084b8:	4770      	bx	lr

080084ba <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80084ba:	b480      	push	{r7}
 80084bc:	b085      	sub	sp, #20
 80084be:	af00      	add	r7, sp, #0
 80084c0:	6078      	str	r0, [r7, #4]
 80084c2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	689b      	ldr	r3, [r3, #8]
 80084c8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80084ca:	68fb      	ldr	r3, [r7, #12]
 80084cc:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 80084d0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80084d4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80084d6:	683a      	ldr	r2, [r7, #0]
 80084d8:	68fb      	ldr	r3, [r7, #12]
 80084da:	4313      	orrs	r3, r2
 80084dc:	f043 0307 	orr.w	r3, r3, #7
 80084e0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	68fa      	ldr	r2, [r7, #12]
 80084e6:	609a      	str	r2, [r3, #8]
}
 80084e8:	bf00      	nop
 80084ea:	3714      	adds	r7, #20
 80084ec:	46bd      	mov	sp, r7
 80084ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084f2:	4770      	bx	lr

080084f4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80084f4:	b480      	push	{r7}
 80084f6:	b087      	sub	sp, #28
 80084f8:	af00      	add	r7, sp, #0
 80084fa:	60f8      	str	r0, [r7, #12]
 80084fc:	60b9      	str	r1, [r7, #8]
 80084fe:	607a      	str	r2, [r7, #4]
 8008500:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008502:	68fb      	ldr	r3, [r7, #12]
 8008504:	689b      	ldr	r3, [r3, #8]
 8008506:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008508:	697b      	ldr	r3, [r7, #20]
 800850a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800850e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008510:	683b      	ldr	r3, [r7, #0]
 8008512:	021a      	lsls	r2, r3, #8
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	431a      	orrs	r2, r3
 8008518:	68bb      	ldr	r3, [r7, #8]
 800851a:	4313      	orrs	r3, r2
 800851c:	697a      	ldr	r2, [r7, #20]
 800851e:	4313      	orrs	r3, r2
 8008520:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008522:	68fb      	ldr	r3, [r7, #12]
 8008524:	697a      	ldr	r2, [r7, #20]
 8008526:	609a      	str	r2, [r3, #8]
}
 8008528:	bf00      	nop
 800852a:	371c      	adds	r7, #28
 800852c:	46bd      	mov	sp, r7
 800852e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008532:	4770      	bx	lr

08008534 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8008534:	b480      	push	{r7}
 8008536:	b087      	sub	sp, #28
 8008538:	af00      	add	r7, sp, #0
 800853a:	60f8      	str	r0, [r7, #12]
 800853c:	60b9      	str	r1, [r7, #8]
 800853e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8008540:	68bb      	ldr	r3, [r7, #8]
 8008542:	f003 031f 	and.w	r3, r3, #31
 8008546:	2201      	movs	r2, #1
 8008548:	fa02 f303 	lsl.w	r3, r2, r3
 800854c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800854e:	68fb      	ldr	r3, [r7, #12]
 8008550:	6a1a      	ldr	r2, [r3, #32]
 8008552:	697b      	ldr	r3, [r7, #20]
 8008554:	43db      	mvns	r3, r3
 8008556:	401a      	ands	r2, r3
 8008558:	68fb      	ldr	r3, [r7, #12]
 800855a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800855c:	68fb      	ldr	r3, [r7, #12]
 800855e:	6a1a      	ldr	r2, [r3, #32]
 8008560:	68bb      	ldr	r3, [r7, #8]
 8008562:	f003 031f 	and.w	r3, r3, #31
 8008566:	6879      	ldr	r1, [r7, #4]
 8008568:	fa01 f303 	lsl.w	r3, r1, r3
 800856c:	431a      	orrs	r2, r3
 800856e:	68fb      	ldr	r3, [r7, #12]
 8008570:	621a      	str	r2, [r3, #32]
}
 8008572:	bf00      	nop
 8008574:	371c      	adds	r7, #28
 8008576:	46bd      	mov	sp, r7
 8008578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800857c:	4770      	bx	lr
	...

08008580 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008580:	b480      	push	{r7}
 8008582:	b085      	sub	sp, #20
 8008584:	af00      	add	r7, sp, #0
 8008586:	6078      	str	r0, [r7, #4]
 8008588:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008590:	2b01      	cmp	r3, #1
 8008592:	d101      	bne.n	8008598 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008594:	2302      	movs	r3, #2
 8008596:	e074      	b.n	8008682 <HAL_TIMEx_MasterConfigSynchronization+0x102>
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	2201      	movs	r2, #1
 800859c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	2202      	movs	r2, #2
 80085a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	681b      	ldr	r3, [r3, #0]
 80085ac:	685b      	ldr	r3, [r3, #4]
 80085ae:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	681b      	ldr	r3, [r3, #0]
 80085b4:	689b      	ldr	r3, [r3, #8]
 80085b6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	681b      	ldr	r3, [r3, #0]
 80085bc:	4a34      	ldr	r2, [pc, #208]	; (8008690 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80085be:	4293      	cmp	r3, r2
 80085c0:	d009      	beq.n	80085d6 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	681b      	ldr	r3, [r3, #0]
 80085c6:	4a33      	ldr	r2, [pc, #204]	; (8008694 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80085c8:	4293      	cmp	r3, r2
 80085ca:	d004      	beq.n	80085d6 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	681b      	ldr	r3, [r3, #0]
 80085d0:	4a31      	ldr	r2, [pc, #196]	; (8008698 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80085d2:	4293      	cmp	r3, r2
 80085d4:	d108      	bne.n	80085e8 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80085d6:	68fb      	ldr	r3, [r7, #12]
 80085d8:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80085dc:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80085de:	683b      	ldr	r3, [r7, #0]
 80085e0:	685b      	ldr	r3, [r3, #4]
 80085e2:	68fa      	ldr	r2, [r7, #12]
 80085e4:	4313      	orrs	r3, r2
 80085e6:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80085e8:	68fb      	ldr	r3, [r7, #12]
 80085ea:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 80085ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80085f2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80085f4:	683b      	ldr	r3, [r7, #0]
 80085f6:	681b      	ldr	r3, [r3, #0]
 80085f8:	68fa      	ldr	r2, [r7, #12]
 80085fa:	4313      	orrs	r3, r2
 80085fc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	681b      	ldr	r3, [r3, #0]
 8008602:	68fa      	ldr	r2, [r7, #12]
 8008604:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	681b      	ldr	r3, [r3, #0]
 800860a:	4a21      	ldr	r2, [pc, #132]	; (8008690 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800860c:	4293      	cmp	r3, r2
 800860e:	d022      	beq.n	8008656 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	681b      	ldr	r3, [r3, #0]
 8008614:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008618:	d01d      	beq.n	8008656 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	681b      	ldr	r3, [r3, #0]
 800861e:	4a1f      	ldr	r2, [pc, #124]	; (800869c <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8008620:	4293      	cmp	r3, r2
 8008622:	d018      	beq.n	8008656 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	681b      	ldr	r3, [r3, #0]
 8008628:	4a1d      	ldr	r2, [pc, #116]	; (80086a0 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 800862a:	4293      	cmp	r3, r2
 800862c:	d013      	beq.n	8008656 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	681b      	ldr	r3, [r3, #0]
 8008632:	4a1c      	ldr	r2, [pc, #112]	; (80086a4 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8008634:	4293      	cmp	r3, r2
 8008636:	d00e      	beq.n	8008656 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	681b      	ldr	r3, [r3, #0]
 800863c:	4a15      	ldr	r2, [pc, #84]	; (8008694 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800863e:	4293      	cmp	r3, r2
 8008640:	d009      	beq.n	8008656 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	681b      	ldr	r3, [r3, #0]
 8008646:	4a18      	ldr	r2, [pc, #96]	; (80086a8 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8008648:	4293      	cmp	r3, r2
 800864a:	d004      	beq.n	8008656 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	681b      	ldr	r3, [r3, #0]
 8008650:	4a11      	ldr	r2, [pc, #68]	; (8008698 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8008652:	4293      	cmp	r3, r2
 8008654:	d10c      	bne.n	8008670 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008656:	68bb      	ldr	r3, [r7, #8]
 8008658:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800865c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800865e:	683b      	ldr	r3, [r7, #0]
 8008660:	689b      	ldr	r3, [r3, #8]
 8008662:	68ba      	ldr	r2, [r7, #8]
 8008664:	4313      	orrs	r3, r2
 8008666:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	681b      	ldr	r3, [r3, #0]
 800866c:	68ba      	ldr	r2, [r7, #8]
 800866e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	2201      	movs	r2, #1
 8008674:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	2200      	movs	r2, #0
 800867c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008680:	2300      	movs	r3, #0
}
 8008682:	4618      	mov	r0, r3
 8008684:	3714      	adds	r7, #20
 8008686:	46bd      	mov	sp, r7
 8008688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800868c:	4770      	bx	lr
 800868e:	bf00      	nop
 8008690:	40012c00 	.word	0x40012c00
 8008694:	40013400 	.word	0x40013400
 8008698:	40015000 	.word	0x40015000
 800869c:	40000400 	.word	0x40000400
 80086a0:	40000800 	.word	0x40000800
 80086a4:	40000c00 	.word	0x40000c00
 80086a8:	40014000 	.word	0x40014000

080086ac <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80086ac:	b480      	push	{r7}
 80086ae:	b085      	sub	sp, #20
 80086b0:	af00      	add	r7, sp, #0
 80086b2:	6078      	str	r0, [r7, #4]
 80086b4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80086b6:	2300      	movs	r3, #0
 80086b8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80086c0:	2b01      	cmp	r3, #1
 80086c2:	d101      	bne.n	80086c8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80086c4:	2302      	movs	r3, #2
 80086c6:	e096      	b.n	80087f6 <HAL_TIMEx_ConfigBreakDeadTime+0x14a>
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	2201      	movs	r2, #1
 80086cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80086d0:	68fb      	ldr	r3, [r7, #12]
 80086d2:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80086d6:	683b      	ldr	r3, [r7, #0]
 80086d8:	68db      	ldr	r3, [r3, #12]
 80086da:	4313      	orrs	r3, r2
 80086dc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80086de:	68fb      	ldr	r3, [r7, #12]
 80086e0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80086e4:	683b      	ldr	r3, [r7, #0]
 80086e6:	689b      	ldr	r3, [r3, #8]
 80086e8:	4313      	orrs	r3, r2
 80086ea:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80086ec:	68fb      	ldr	r3, [r7, #12]
 80086ee:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80086f2:	683b      	ldr	r3, [r7, #0]
 80086f4:	685b      	ldr	r3, [r3, #4]
 80086f6:	4313      	orrs	r3, r2
 80086f8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80086fa:	68fb      	ldr	r3, [r7, #12]
 80086fc:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8008700:	683b      	ldr	r3, [r7, #0]
 8008702:	681b      	ldr	r3, [r3, #0]
 8008704:	4313      	orrs	r3, r2
 8008706:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8008708:	68fb      	ldr	r3, [r7, #12]
 800870a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800870e:	683b      	ldr	r3, [r7, #0]
 8008710:	691b      	ldr	r3, [r3, #16]
 8008712:	4313      	orrs	r3, r2
 8008714:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8008716:	68fb      	ldr	r3, [r7, #12]
 8008718:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800871c:	683b      	ldr	r3, [r7, #0]
 800871e:	695b      	ldr	r3, [r3, #20]
 8008720:	4313      	orrs	r3, r2
 8008722:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8008724:	68fb      	ldr	r3, [r7, #12]
 8008726:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800872a:	683b      	ldr	r3, [r7, #0]
 800872c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800872e:	4313      	orrs	r3, r2
 8008730:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8008732:	68fb      	ldr	r3, [r7, #12]
 8008734:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8008738:	683b      	ldr	r3, [r7, #0]
 800873a:	699b      	ldr	r3, [r3, #24]
 800873c:	041b      	lsls	r3, r3, #16
 800873e:	4313      	orrs	r3, r2
 8008740:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	681b      	ldr	r3, [r3, #0]
 8008746:	4a2f      	ldr	r2, [pc, #188]	; (8008804 <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 8008748:	4293      	cmp	r3, r2
 800874a:	d009      	beq.n	8008760 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	681b      	ldr	r3, [r3, #0]
 8008750:	4a2d      	ldr	r2, [pc, #180]	; (8008808 <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 8008752:	4293      	cmp	r3, r2
 8008754:	d004      	beq.n	8008760 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	681b      	ldr	r3, [r3, #0]
 800875a:	4a2c      	ldr	r2, [pc, #176]	; (800880c <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 800875c:	4293      	cmp	r3, r2
 800875e:	d106      	bne.n	800876e <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8008760:	68fb      	ldr	r3, [r7, #12]
 8008762:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8008766:	683b      	ldr	r3, [r7, #0]
 8008768:	69db      	ldr	r3, [r3, #28]
 800876a:	4313      	orrs	r3, r2
 800876c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	681b      	ldr	r3, [r3, #0]
 8008772:	4a24      	ldr	r2, [pc, #144]	; (8008804 <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 8008774:	4293      	cmp	r3, r2
 8008776:	d009      	beq.n	800878c <HAL_TIMEx_ConfigBreakDeadTime+0xe0>
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	681b      	ldr	r3, [r3, #0]
 800877c:	4a22      	ldr	r2, [pc, #136]	; (8008808 <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 800877e:	4293      	cmp	r3, r2
 8008780:	d004      	beq.n	800878c <HAL_TIMEx_ConfigBreakDeadTime+0xe0>
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	681b      	ldr	r3, [r3, #0]
 8008786:	4a21      	ldr	r2, [pc, #132]	; (800880c <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 8008788:	4293      	cmp	r3, r2
 800878a:	d12b      	bne.n	80087e4 <HAL_TIMEx_ConfigBreakDeadTime+0x138>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800878c:	68fb      	ldr	r3, [r7, #12]
 800878e:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8008792:	683b      	ldr	r3, [r7, #0]
 8008794:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008796:	051b      	lsls	r3, r3, #20
 8008798:	4313      	orrs	r3, r2
 800879a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800879c:	68fb      	ldr	r3, [r7, #12]
 800879e:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80087a2:	683b      	ldr	r3, [r7, #0]
 80087a4:	6a1b      	ldr	r3, [r3, #32]
 80087a6:	4313      	orrs	r3, r2
 80087a8:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80087aa:	68fb      	ldr	r3, [r7, #12]
 80087ac:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80087b0:	683b      	ldr	r3, [r7, #0]
 80087b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087b4:	4313      	orrs	r3, r2
 80087b6:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	681b      	ldr	r3, [r3, #0]
 80087bc:	4a11      	ldr	r2, [pc, #68]	; (8008804 <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 80087be:	4293      	cmp	r3, r2
 80087c0:	d009      	beq.n	80087d6 <HAL_TIMEx_ConfigBreakDeadTime+0x12a>
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	681b      	ldr	r3, [r3, #0]
 80087c6:	4a10      	ldr	r2, [pc, #64]	; (8008808 <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 80087c8:	4293      	cmp	r3, r2
 80087ca:	d004      	beq.n	80087d6 <HAL_TIMEx_ConfigBreakDeadTime+0x12a>
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	681b      	ldr	r3, [r3, #0]
 80087d0:	4a0e      	ldr	r2, [pc, #56]	; (800880c <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 80087d2:	4293      	cmp	r3, r2
 80087d4:	d106      	bne.n	80087e4 <HAL_TIMEx_ConfigBreakDeadTime+0x138>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 80087d6:	68fb      	ldr	r3, [r7, #12]
 80087d8:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 80087dc:	683b      	ldr	r3, [r7, #0]
 80087de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80087e0:	4313      	orrs	r3, r2
 80087e2:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	681b      	ldr	r3, [r3, #0]
 80087e8:	68fa      	ldr	r2, [r7, #12]
 80087ea:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	2200      	movs	r2, #0
 80087f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80087f4:	2300      	movs	r3, #0
}
 80087f6:	4618      	mov	r0, r3
 80087f8:	3714      	adds	r7, #20
 80087fa:	46bd      	mov	sp, r7
 80087fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008800:	4770      	bx	lr
 8008802:	bf00      	nop
 8008804:	40012c00 	.word	0x40012c00
 8008808:	40013400 	.word	0x40013400
 800880c:	40015000 	.word	0x40015000

08008810 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008810:	b480      	push	{r7}
 8008812:	b083      	sub	sp, #12
 8008814:	af00      	add	r7, sp, #0
 8008816:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008818:	bf00      	nop
 800881a:	370c      	adds	r7, #12
 800881c:	46bd      	mov	sp, r7
 800881e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008822:	4770      	bx	lr

08008824 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008824:	b480      	push	{r7}
 8008826:	b083      	sub	sp, #12
 8008828:	af00      	add	r7, sp, #0
 800882a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800882c:	bf00      	nop
 800882e:	370c      	adds	r7, #12
 8008830:	46bd      	mov	sp, r7
 8008832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008836:	4770      	bx	lr

08008838 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8008838:	b480      	push	{r7}
 800883a:	b083      	sub	sp, #12
 800883c:	af00      	add	r7, sp, #0
 800883e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8008840:	bf00      	nop
 8008842:	370c      	adds	r7, #12
 8008844:	46bd      	mov	sp, r7
 8008846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800884a:	4770      	bx	lr

0800884c <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 800884c:	b480      	push	{r7}
 800884e:	b083      	sub	sp, #12
 8008850:	af00      	add	r7, sp, #0
 8008852:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8008854:	bf00      	nop
 8008856:	370c      	adds	r7, #12
 8008858:	46bd      	mov	sp, r7
 800885a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800885e:	4770      	bx	lr

08008860 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8008860:	b480      	push	{r7}
 8008862:	b083      	sub	sp, #12
 8008864:	af00      	add	r7, sp, #0
 8008866:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8008868:	bf00      	nop
 800886a:	370c      	adds	r7, #12
 800886c:	46bd      	mov	sp, r7
 800886e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008872:	4770      	bx	lr

08008874 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8008874:	b480      	push	{r7}
 8008876:	b083      	sub	sp, #12
 8008878:	af00      	add	r7, sp, #0
 800887a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 800887c:	bf00      	nop
 800887e:	370c      	adds	r7, #12
 8008880:	46bd      	mov	sp, r7
 8008882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008886:	4770      	bx	lr

08008888 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8008888:	b480      	push	{r7}
 800888a:	b083      	sub	sp, #12
 800888c:	af00      	add	r7, sp, #0
 800888e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8008890:	bf00      	nop
 8008892:	370c      	adds	r7, #12
 8008894:	46bd      	mov	sp, r7
 8008896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800889a:	4770      	bx	lr

0800889c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800889c:	b580      	push	{r7, lr}
 800889e:	b082      	sub	sp, #8
 80088a0:	af00      	add	r7, sp, #0
 80088a2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	2b00      	cmp	r3, #0
 80088a8:	d101      	bne.n	80088ae <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80088aa:	2301      	movs	r3, #1
 80088ac:	e042      	b.n	8008934 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80088b4:	2b00      	cmp	r3, #0
 80088b6:	d106      	bne.n	80088c6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	2200      	movs	r2, #0
 80088bc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80088c0:	6878      	ldr	r0, [r7, #4]
 80088c2:	f7f9 fa45 	bl	8001d50 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	2224      	movs	r2, #36	; 0x24
 80088ca:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	681b      	ldr	r3, [r3, #0]
 80088d2:	681a      	ldr	r2, [r3, #0]
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	681b      	ldr	r3, [r3, #0]
 80088d8:	f022 0201 	bic.w	r2, r2, #1
 80088dc:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80088de:	6878      	ldr	r0, [r7, #4]
 80088e0:	f000 f8c2 	bl	8008a68 <UART_SetConfig>
 80088e4:	4603      	mov	r3, r0
 80088e6:	2b01      	cmp	r3, #1
 80088e8:	d101      	bne.n	80088ee <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80088ea:	2301      	movs	r3, #1
 80088ec:	e022      	b.n	8008934 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80088f2:	2b00      	cmp	r3, #0
 80088f4:	d002      	beq.n	80088fc <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80088f6:	6878      	ldr	r0, [r7, #4]
 80088f8:	f000 fbb2 	bl	8009060 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	681b      	ldr	r3, [r3, #0]
 8008900:	685a      	ldr	r2, [r3, #4]
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	681b      	ldr	r3, [r3, #0]
 8008906:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800890a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	681b      	ldr	r3, [r3, #0]
 8008910:	689a      	ldr	r2, [r3, #8]
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	681b      	ldr	r3, [r3, #0]
 8008916:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800891a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	681b      	ldr	r3, [r3, #0]
 8008920:	681a      	ldr	r2, [r3, #0]
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	681b      	ldr	r3, [r3, #0]
 8008926:	f042 0201 	orr.w	r2, r2, #1
 800892a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800892c:	6878      	ldr	r0, [r7, #4]
 800892e:	f000 fc39 	bl	80091a4 <UART_CheckIdleState>
 8008932:	4603      	mov	r3, r0
}
 8008934:	4618      	mov	r0, r3
 8008936:	3708      	adds	r7, #8
 8008938:	46bd      	mov	sp, r7
 800893a:	bd80      	pop	{r7, pc}

0800893c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800893c:	b580      	push	{r7, lr}
 800893e:	b08a      	sub	sp, #40	; 0x28
 8008940:	af02      	add	r7, sp, #8
 8008942:	60f8      	str	r0, [r7, #12]
 8008944:	60b9      	str	r1, [r7, #8]
 8008946:	603b      	str	r3, [r7, #0]
 8008948:	4613      	mov	r3, r2
 800894a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800894c:	68fb      	ldr	r3, [r7, #12]
 800894e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008952:	2b20      	cmp	r3, #32
 8008954:	f040 8083 	bne.w	8008a5e <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 8008958:	68bb      	ldr	r3, [r7, #8]
 800895a:	2b00      	cmp	r3, #0
 800895c:	d002      	beq.n	8008964 <HAL_UART_Transmit+0x28>
 800895e:	88fb      	ldrh	r3, [r7, #6]
 8008960:	2b00      	cmp	r3, #0
 8008962:	d101      	bne.n	8008968 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8008964:	2301      	movs	r3, #1
 8008966:	e07b      	b.n	8008a60 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 8008968:	68fb      	ldr	r3, [r7, #12]
 800896a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800896e:	2b01      	cmp	r3, #1
 8008970:	d101      	bne.n	8008976 <HAL_UART_Transmit+0x3a>
 8008972:	2302      	movs	r3, #2
 8008974:	e074      	b.n	8008a60 <HAL_UART_Transmit+0x124>
 8008976:	68fb      	ldr	r3, [r7, #12]
 8008978:	2201      	movs	r2, #1
 800897a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800897e:	68fb      	ldr	r3, [r7, #12]
 8008980:	2200      	movs	r2, #0
 8008982:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008986:	68fb      	ldr	r3, [r7, #12]
 8008988:	2221      	movs	r2, #33	; 0x21
 800898a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800898e:	f7f9 fd73 	bl	8002478 <HAL_GetTick>
 8008992:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8008994:	68fb      	ldr	r3, [r7, #12]
 8008996:	88fa      	ldrh	r2, [r7, #6]
 8008998:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800899c:	68fb      	ldr	r3, [r7, #12]
 800899e:	88fa      	ldrh	r2, [r7, #6]
 80089a0:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80089a4:	68fb      	ldr	r3, [r7, #12]
 80089a6:	689b      	ldr	r3, [r3, #8]
 80089a8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80089ac:	d108      	bne.n	80089c0 <HAL_UART_Transmit+0x84>
 80089ae:	68fb      	ldr	r3, [r7, #12]
 80089b0:	691b      	ldr	r3, [r3, #16]
 80089b2:	2b00      	cmp	r3, #0
 80089b4:	d104      	bne.n	80089c0 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 80089b6:	2300      	movs	r3, #0
 80089b8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80089ba:	68bb      	ldr	r3, [r7, #8]
 80089bc:	61bb      	str	r3, [r7, #24]
 80089be:	e003      	b.n	80089c8 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 80089c0:	68bb      	ldr	r3, [r7, #8]
 80089c2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80089c4:	2300      	movs	r3, #0
 80089c6:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80089c8:	68fb      	ldr	r3, [r7, #12]
 80089ca:	2200      	movs	r2, #0
 80089cc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 80089d0:	e02c      	b.n	8008a2c <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80089d2:	683b      	ldr	r3, [r7, #0]
 80089d4:	9300      	str	r3, [sp, #0]
 80089d6:	697b      	ldr	r3, [r7, #20]
 80089d8:	2200      	movs	r2, #0
 80089da:	2180      	movs	r1, #128	; 0x80
 80089dc:	68f8      	ldr	r0, [r7, #12]
 80089de:	f000 fc2c 	bl	800923a <UART_WaitOnFlagUntilTimeout>
 80089e2:	4603      	mov	r3, r0
 80089e4:	2b00      	cmp	r3, #0
 80089e6:	d001      	beq.n	80089ec <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 80089e8:	2303      	movs	r3, #3
 80089ea:	e039      	b.n	8008a60 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 80089ec:	69fb      	ldr	r3, [r7, #28]
 80089ee:	2b00      	cmp	r3, #0
 80089f0:	d10b      	bne.n	8008a0a <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80089f2:	69bb      	ldr	r3, [r7, #24]
 80089f4:	881b      	ldrh	r3, [r3, #0]
 80089f6:	461a      	mov	r2, r3
 80089f8:	68fb      	ldr	r3, [r7, #12]
 80089fa:	681b      	ldr	r3, [r3, #0]
 80089fc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008a00:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8008a02:	69bb      	ldr	r3, [r7, #24]
 8008a04:	3302      	adds	r3, #2
 8008a06:	61bb      	str	r3, [r7, #24]
 8008a08:	e007      	b.n	8008a1a <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8008a0a:	69fb      	ldr	r3, [r7, #28]
 8008a0c:	781a      	ldrb	r2, [r3, #0]
 8008a0e:	68fb      	ldr	r3, [r7, #12]
 8008a10:	681b      	ldr	r3, [r3, #0]
 8008a12:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8008a14:	69fb      	ldr	r3, [r7, #28]
 8008a16:	3301      	adds	r3, #1
 8008a18:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8008a1a:	68fb      	ldr	r3, [r7, #12]
 8008a1c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8008a20:	b29b      	uxth	r3, r3
 8008a22:	3b01      	subs	r3, #1
 8008a24:	b29a      	uxth	r2, r3
 8008a26:	68fb      	ldr	r3, [r7, #12]
 8008a28:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8008a2c:	68fb      	ldr	r3, [r7, #12]
 8008a2e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8008a32:	b29b      	uxth	r3, r3
 8008a34:	2b00      	cmp	r3, #0
 8008a36:	d1cc      	bne.n	80089d2 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008a38:	683b      	ldr	r3, [r7, #0]
 8008a3a:	9300      	str	r3, [sp, #0]
 8008a3c:	697b      	ldr	r3, [r7, #20]
 8008a3e:	2200      	movs	r2, #0
 8008a40:	2140      	movs	r1, #64	; 0x40
 8008a42:	68f8      	ldr	r0, [r7, #12]
 8008a44:	f000 fbf9 	bl	800923a <UART_WaitOnFlagUntilTimeout>
 8008a48:	4603      	mov	r3, r0
 8008a4a:	2b00      	cmp	r3, #0
 8008a4c:	d001      	beq.n	8008a52 <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 8008a4e:	2303      	movs	r3, #3
 8008a50:	e006      	b.n	8008a60 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8008a52:	68fb      	ldr	r3, [r7, #12]
 8008a54:	2220      	movs	r2, #32
 8008a56:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 8008a5a:	2300      	movs	r3, #0
 8008a5c:	e000      	b.n	8008a60 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 8008a5e:	2302      	movs	r3, #2
  }
}
 8008a60:	4618      	mov	r0, r3
 8008a62:	3720      	adds	r7, #32
 8008a64:	46bd      	mov	sp, r7
 8008a66:	bd80      	pop	{r7, pc}

08008a68 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008a68:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008a6c:	b08c      	sub	sp, #48	; 0x30
 8008a6e:	af00      	add	r7, sp, #0
 8008a70:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8008a72:	2300      	movs	r3, #0
 8008a74:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008a78:	697b      	ldr	r3, [r7, #20]
 8008a7a:	689a      	ldr	r2, [r3, #8]
 8008a7c:	697b      	ldr	r3, [r7, #20]
 8008a7e:	691b      	ldr	r3, [r3, #16]
 8008a80:	431a      	orrs	r2, r3
 8008a82:	697b      	ldr	r3, [r7, #20]
 8008a84:	695b      	ldr	r3, [r3, #20]
 8008a86:	431a      	orrs	r2, r3
 8008a88:	697b      	ldr	r3, [r7, #20]
 8008a8a:	69db      	ldr	r3, [r3, #28]
 8008a8c:	4313      	orrs	r3, r2
 8008a8e:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008a90:	697b      	ldr	r3, [r7, #20]
 8008a92:	681b      	ldr	r3, [r3, #0]
 8008a94:	681a      	ldr	r2, [r3, #0]
 8008a96:	4baa      	ldr	r3, [pc, #680]	; (8008d40 <UART_SetConfig+0x2d8>)
 8008a98:	4013      	ands	r3, r2
 8008a9a:	697a      	ldr	r2, [r7, #20]
 8008a9c:	6812      	ldr	r2, [r2, #0]
 8008a9e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008aa0:	430b      	orrs	r3, r1
 8008aa2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008aa4:	697b      	ldr	r3, [r7, #20]
 8008aa6:	681b      	ldr	r3, [r3, #0]
 8008aa8:	685b      	ldr	r3, [r3, #4]
 8008aaa:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8008aae:	697b      	ldr	r3, [r7, #20]
 8008ab0:	68da      	ldr	r2, [r3, #12]
 8008ab2:	697b      	ldr	r3, [r7, #20]
 8008ab4:	681b      	ldr	r3, [r3, #0]
 8008ab6:	430a      	orrs	r2, r1
 8008ab8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8008aba:	697b      	ldr	r3, [r7, #20]
 8008abc:	699b      	ldr	r3, [r3, #24]
 8008abe:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8008ac0:	697b      	ldr	r3, [r7, #20]
 8008ac2:	681b      	ldr	r3, [r3, #0]
 8008ac4:	4a9f      	ldr	r2, [pc, #636]	; (8008d44 <UART_SetConfig+0x2dc>)
 8008ac6:	4293      	cmp	r3, r2
 8008ac8:	d004      	beq.n	8008ad4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8008aca:	697b      	ldr	r3, [r7, #20]
 8008acc:	6a1b      	ldr	r3, [r3, #32]
 8008ace:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008ad0:	4313      	orrs	r3, r2
 8008ad2:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008ad4:	697b      	ldr	r3, [r7, #20]
 8008ad6:	681b      	ldr	r3, [r3, #0]
 8008ad8:	689b      	ldr	r3, [r3, #8]
 8008ada:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8008ade:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8008ae2:	697a      	ldr	r2, [r7, #20]
 8008ae4:	6812      	ldr	r2, [r2, #0]
 8008ae6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008ae8:	430b      	orrs	r3, r1
 8008aea:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8008aec:	697b      	ldr	r3, [r7, #20]
 8008aee:	681b      	ldr	r3, [r3, #0]
 8008af0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008af2:	f023 010f 	bic.w	r1, r3, #15
 8008af6:	697b      	ldr	r3, [r7, #20]
 8008af8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008afa:	697b      	ldr	r3, [r7, #20]
 8008afc:	681b      	ldr	r3, [r3, #0]
 8008afe:	430a      	orrs	r2, r1
 8008b00:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008b02:	697b      	ldr	r3, [r7, #20]
 8008b04:	681b      	ldr	r3, [r3, #0]
 8008b06:	4a90      	ldr	r2, [pc, #576]	; (8008d48 <UART_SetConfig+0x2e0>)
 8008b08:	4293      	cmp	r3, r2
 8008b0a:	d125      	bne.n	8008b58 <UART_SetConfig+0xf0>
 8008b0c:	4b8f      	ldr	r3, [pc, #572]	; (8008d4c <UART_SetConfig+0x2e4>)
 8008b0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008b12:	f003 0303 	and.w	r3, r3, #3
 8008b16:	2b03      	cmp	r3, #3
 8008b18:	d81a      	bhi.n	8008b50 <UART_SetConfig+0xe8>
 8008b1a:	a201      	add	r2, pc, #4	; (adr r2, 8008b20 <UART_SetConfig+0xb8>)
 8008b1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b20:	08008b31 	.word	0x08008b31
 8008b24:	08008b41 	.word	0x08008b41
 8008b28:	08008b39 	.word	0x08008b39
 8008b2c:	08008b49 	.word	0x08008b49
 8008b30:	2301      	movs	r3, #1
 8008b32:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008b36:	e116      	b.n	8008d66 <UART_SetConfig+0x2fe>
 8008b38:	2302      	movs	r3, #2
 8008b3a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008b3e:	e112      	b.n	8008d66 <UART_SetConfig+0x2fe>
 8008b40:	2304      	movs	r3, #4
 8008b42:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008b46:	e10e      	b.n	8008d66 <UART_SetConfig+0x2fe>
 8008b48:	2308      	movs	r3, #8
 8008b4a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008b4e:	e10a      	b.n	8008d66 <UART_SetConfig+0x2fe>
 8008b50:	2310      	movs	r3, #16
 8008b52:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008b56:	e106      	b.n	8008d66 <UART_SetConfig+0x2fe>
 8008b58:	697b      	ldr	r3, [r7, #20]
 8008b5a:	681b      	ldr	r3, [r3, #0]
 8008b5c:	4a7c      	ldr	r2, [pc, #496]	; (8008d50 <UART_SetConfig+0x2e8>)
 8008b5e:	4293      	cmp	r3, r2
 8008b60:	d138      	bne.n	8008bd4 <UART_SetConfig+0x16c>
 8008b62:	4b7a      	ldr	r3, [pc, #488]	; (8008d4c <UART_SetConfig+0x2e4>)
 8008b64:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008b68:	f003 030c 	and.w	r3, r3, #12
 8008b6c:	2b0c      	cmp	r3, #12
 8008b6e:	d82d      	bhi.n	8008bcc <UART_SetConfig+0x164>
 8008b70:	a201      	add	r2, pc, #4	; (adr r2, 8008b78 <UART_SetConfig+0x110>)
 8008b72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b76:	bf00      	nop
 8008b78:	08008bad 	.word	0x08008bad
 8008b7c:	08008bcd 	.word	0x08008bcd
 8008b80:	08008bcd 	.word	0x08008bcd
 8008b84:	08008bcd 	.word	0x08008bcd
 8008b88:	08008bbd 	.word	0x08008bbd
 8008b8c:	08008bcd 	.word	0x08008bcd
 8008b90:	08008bcd 	.word	0x08008bcd
 8008b94:	08008bcd 	.word	0x08008bcd
 8008b98:	08008bb5 	.word	0x08008bb5
 8008b9c:	08008bcd 	.word	0x08008bcd
 8008ba0:	08008bcd 	.word	0x08008bcd
 8008ba4:	08008bcd 	.word	0x08008bcd
 8008ba8:	08008bc5 	.word	0x08008bc5
 8008bac:	2300      	movs	r3, #0
 8008bae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008bb2:	e0d8      	b.n	8008d66 <UART_SetConfig+0x2fe>
 8008bb4:	2302      	movs	r3, #2
 8008bb6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008bba:	e0d4      	b.n	8008d66 <UART_SetConfig+0x2fe>
 8008bbc:	2304      	movs	r3, #4
 8008bbe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008bc2:	e0d0      	b.n	8008d66 <UART_SetConfig+0x2fe>
 8008bc4:	2308      	movs	r3, #8
 8008bc6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008bca:	e0cc      	b.n	8008d66 <UART_SetConfig+0x2fe>
 8008bcc:	2310      	movs	r3, #16
 8008bce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008bd2:	e0c8      	b.n	8008d66 <UART_SetConfig+0x2fe>
 8008bd4:	697b      	ldr	r3, [r7, #20]
 8008bd6:	681b      	ldr	r3, [r3, #0]
 8008bd8:	4a5e      	ldr	r2, [pc, #376]	; (8008d54 <UART_SetConfig+0x2ec>)
 8008bda:	4293      	cmp	r3, r2
 8008bdc:	d125      	bne.n	8008c2a <UART_SetConfig+0x1c2>
 8008bde:	4b5b      	ldr	r3, [pc, #364]	; (8008d4c <UART_SetConfig+0x2e4>)
 8008be0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008be4:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8008be8:	2b30      	cmp	r3, #48	; 0x30
 8008bea:	d016      	beq.n	8008c1a <UART_SetConfig+0x1b2>
 8008bec:	2b30      	cmp	r3, #48	; 0x30
 8008bee:	d818      	bhi.n	8008c22 <UART_SetConfig+0x1ba>
 8008bf0:	2b20      	cmp	r3, #32
 8008bf2:	d00a      	beq.n	8008c0a <UART_SetConfig+0x1a2>
 8008bf4:	2b20      	cmp	r3, #32
 8008bf6:	d814      	bhi.n	8008c22 <UART_SetConfig+0x1ba>
 8008bf8:	2b00      	cmp	r3, #0
 8008bfa:	d002      	beq.n	8008c02 <UART_SetConfig+0x19a>
 8008bfc:	2b10      	cmp	r3, #16
 8008bfe:	d008      	beq.n	8008c12 <UART_SetConfig+0x1aa>
 8008c00:	e00f      	b.n	8008c22 <UART_SetConfig+0x1ba>
 8008c02:	2300      	movs	r3, #0
 8008c04:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008c08:	e0ad      	b.n	8008d66 <UART_SetConfig+0x2fe>
 8008c0a:	2302      	movs	r3, #2
 8008c0c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008c10:	e0a9      	b.n	8008d66 <UART_SetConfig+0x2fe>
 8008c12:	2304      	movs	r3, #4
 8008c14:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008c18:	e0a5      	b.n	8008d66 <UART_SetConfig+0x2fe>
 8008c1a:	2308      	movs	r3, #8
 8008c1c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008c20:	e0a1      	b.n	8008d66 <UART_SetConfig+0x2fe>
 8008c22:	2310      	movs	r3, #16
 8008c24:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008c28:	e09d      	b.n	8008d66 <UART_SetConfig+0x2fe>
 8008c2a:	697b      	ldr	r3, [r7, #20]
 8008c2c:	681b      	ldr	r3, [r3, #0]
 8008c2e:	4a4a      	ldr	r2, [pc, #296]	; (8008d58 <UART_SetConfig+0x2f0>)
 8008c30:	4293      	cmp	r3, r2
 8008c32:	d125      	bne.n	8008c80 <UART_SetConfig+0x218>
 8008c34:	4b45      	ldr	r3, [pc, #276]	; (8008d4c <UART_SetConfig+0x2e4>)
 8008c36:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008c3a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8008c3e:	2bc0      	cmp	r3, #192	; 0xc0
 8008c40:	d016      	beq.n	8008c70 <UART_SetConfig+0x208>
 8008c42:	2bc0      	cmp	r3, #192	; 0xc0
 8008c44:	d818      	bhi.n	8008c78 <UART_SetConfig+0x210>
 8008c46:	2b80      	cmp	r3, #128	; 0x80
 8008c48:	d00a      	beq.n	8008c60 <UART_SetConfig+0x1f8>
 8008c4a:	2b80      	cmp	r3, #128	; 0x80
 8008c4c:	d814      	bhi.n	8008c78 <UART_SetConfig+0x210>
 8008c4e:	2b00      	cmp	r3, #0
 8008c50:	d002      	beq.n	8008c58 <UART_SetConfig+0x1f0>
 8008c52:	2b40      	cmp	r3, #64	; 0x40
 8008c54:	d008      	beq.n	8008c68 <UART_SetConfig+0x200>
 8008c56:	e00f      	b.n	8008c78 <UART_SetConfig+0x210>
 8008c58:	2300      	movs	r3, #0
 8008c5a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008c5e:	e082      	b.n	8008d66 <UART_SetConfig+0x2fe>
 8008c60:	2302      	movs	r3, #2
 8008c62:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008c66:	e07e      	b.n	8008d66 <UART_SetConfig+0x2fe>
 8008c68:	2304      	movs	r3, #4
 8008c6a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008c6e:	e07a      	b.n	8008d66 <UART_SetConfig+0x2fe>
 8008c70:	2308      	movs	r3, #8
 8008c72:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008c76:	e076      	b.n	8008d66 <UART_SetConfig+0x2fe>
 8008c78:	2310      	movs	r3, #16
 8008c7a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008c7e:	e072      	b.n	8008d66 <UART_SetConfig+0x2fe>
 8008c80:	697b      	ldr	r3, [r7, #20]
 8008c82:	681b      	ldr	r3, [r3, #0]
 8008c84:	4a35      	ldr	r2, [pc, #212]	; (8008d5c <UART_SetConfig+0x2f4>)
 8008c86:	4293      	cmp	r3, r2
 8008c88:	d12a      	bne.n	8008ce0 <UART_SetConfig+0x278>
 8008c8a:	4b30      	ldr	r3, [pc, #192]	; (8008d4c <UART_SetConfig+0x2e4>)
 8008c8c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008c90:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008c94:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008c98:	d01a      	beq.n	8008cd0 <UART_SetConfig+0x268>
 8008c9a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008c9e:	d81b      	bhi.n	8008cd8 <UART_SetConfig+0x270>
 8008ca0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008ca4:	d00c      	beq.n	8008cc0 <UART_SetConfig+0x258>
 8008ca6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008caa:	d815      	bhi.n	8008cd8 <UART_SetConfig+0x270>
 8008cac:	2b00      	cmp	r3, #0
 8008cae:	d003      	beq.n	8008cb8 <UART_SetConfig+0x250>
 8008cb0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008cb4:	d008      	beq.n	8008cc8 <UART_SetConfig+0x260>
 8008cb6:	e00f      	b.n	8008cd8 <UART_SetConfig+0x270>
 8008cb8:	2300      	movs	r3, #0
 8008cba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008cbe:	e052      	b.n	8008d66 <UART_SetConfig+0x2fe>
 8008cc0:	2302      	movs	r3, #2
 8008cc2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008cc6:	e04e      	b.n	8008d66 <UART_SetConfig+0x2fe>
 8008cc8:	2304      	movs	r3, #4
 8008cca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008cce:	e04a      	b.n	8008d66 <UART_SetConfig+0x2fe>
 8008cd0:	2308      	movs	r3, #8
 8008cd2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008cd6:	e046      	b.n	8008d66 <UART_SetConfig+0x2fe>
 8008cd8:	2310      	movs	r3, #16
 8008cda:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008cde:	e042      	b.n	8008d66 <UART_SetConfig+0x2fe>
 8008ce0:	697b      	ldr	r3, [r7, #20]
 8008ce2:	681b      	ldr	r3, [r3, #0]
 8008ce4:	4a17      	ldr	r2, [pc, #92]	; (8008d44 <UART_SetConfig+0x2dc>)
 8008ce6:	4293      	cmp	r3, r2
 8008ce8:	d13a      	bne.n	8008d60 <UART_SetConfig+0x2f8>
 8008cea:	4b18      	ldr	r3, [pc, #96]	; (8008d4c <UART_SetConfig+0x2e4>)
 8008cec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008cf0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8008cf4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008cf8:	d01a      	beq.n	8008d30 <UART_SetConfig+0x2c8>
 8008cfa:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008cfe:	d81b      	bhi.n	8008d38 <UART_SetConfig+0x2d0>
 8008d00:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008d04:	d00c      	beq.n	8008d20 <UART_SetConfig+0x2b8>
 8008d06:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008d0a:	d815      	bhi.n	8008d38 <UART_SetConfig+0x2d0>
 8008d0c:	2b00      	cmp	r3, #0
 8008d0e:	d003      	beq.n	8008d18 <UART_SetConfig+0x2b0>
 8008d10:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008d14:	d008      	beq.n	8008d28 <UART_SetConfig+0x2c0>
 8008d16:	e00f      	b.n	8008d38 <UART_SetConfig+0x2d0>
 8008d18:	2300      	movs	r3, #0
 8008d1a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008d1e:	e022      	b.n	8008d66 <UART_SetConfig+0x2fe>
 8008d20:	2302      	movs	r3, #2
 8008d22:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008d26:	e01e      	b.n	8008d66 <UART_SetConfig+0x2fe>
 8008d28:	2304      	movs	r3, #4
 8008d2a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008d2e:	e01a      	b.n	8008d66 <UART_SetConfig+0x2fe>
 8008d30:	2308      	movs	r3, #8
 8008d32:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008d36:	e016      	b.n	8008d66 <UART_SetConfig+0x2fe>
 8008d38:	2310      	movs	r3, #16
 8008d3a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008d3e:	e012      	b.n	8008d66 <UART_SetConfig+0x2fe>
 8008d40:	cfff69f3 	.word	0xcfff69f3
 8008d44:	40008000 	.word	0x40008000
 8008d48:	40013800 	.word	0x40013800
 8008d4c:	40021000 	.word	0x40021000
 8008d50:	40004400 	.word	0x40004400
 8008d54:	40004800 	.word	0x40004800
 8008d58:	40004c00 	.word	0x40004c00
 8008d5c:	40005000 	.word	0x40005000
 8008d60:	2310      	movs	r3, #16
 8008d62:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8008d66:	697b      	ldr	r3, [r7, #20]
 8008d68:	681b      	ldr	r3, [r3, #0]
 8008d6a:	4aae      	ldr	r2, [pc, #696]	; (8009024 <UART_SetConfig+0x5bc>)
 8008d6c:	4293      	cmp	r3, r2
 8008d6e:	f040 8097 	bne.w	8008ea0 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8008d72:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8008d76:	2b08      	cmp	r3, #8
 8008d78:	d823      	bhi.n	8008dc2 <UART_SetConfig+0x35a>
 8008d7a:	a201      	add	r2, pc, #4	; (adr r2, 8008d80 <UART_SetConfig+0x318>)
 8008d7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d80:	08008da5 	.word	0x08008da5
 8008d84:	08008dc3 	.word	0x08008dc3
 8008d88:	08008dad 	.word	0x08008dad
 8008d8c:	08008dc3 	.word	0x08008dc3
 8008d90:	08008db3 	.word	0x08008db3
 8008d94:	08008dc3 	.word	0x08008dc3
 8008d98:	08008dc3 	.word	0x08008dc3
 8008d9c:	08008dc3 	.word	0x08008dc3
 8008da0:	08008dbb 	.word	0x08008dbb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008da4:	f7fd f8ac 	bl	8005f00 <HAL_RCC_GetPCLK1Freq>
 8008da8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008daa:	e010      	b.n	8008dce <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008dac:	4b9e      	ldr	r3, [pc, #632]	; (8009028 <UART_SetConfig+0x5c0>)
 8008dae:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008db0:	e00d      	b.n	8008dce <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008db2:	f7fd f839 	bl	8005e28 <HAL_RCC_GetSysClockFreq>
 8008db6:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008db8:	e009      	b.n	8008dce <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008dba:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008dbe:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008dc0:	e005      	b.n	8008dce <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8008dc2:	2300      	movs	r3, #0
 8008dc4:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8008dc6:	2301      	movs	r3, #1
 8008dc8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8008dcc:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8008dce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008dd0:	2b00      	cmp	r3, #0
 8008dd2:	f000 8130 	beq.w	8009036 <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8008dd6:	697b      	ldr	r3, [r7, #20]
 8008dd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008dda:	4a94      	ldr	r2, [pc, #592]	; (800902c <UART_SetConfig+0x5c4>)
 8008ddc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008de0:	461a      	mov	r2, r3
 8008de2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008de4:	fbb3 f3f2 	udiv	r3, r3, r2
 8008de8:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008dea:	697b      	ldr	r3, [r7, #20]
 8008dec:	685a      	ldr	r2, [r3, #4]
 8008dee:	4613      	mov	r3, r2
 8008df0:	005b      	lsls	r3, r3, #1
 8008df2:	4413      	add	r3, r2
 8008df4:	69ba      	ldr	r2, [r7, #24]
 8008df6:	429a      	cmp	r2, r3
 8008df8:	d305      	bcc.n	8008e06 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8008dfa:	697b      	ldr	r3, [r7, #20]
 8008dfc:	685b      	ldr	r3, [r3, #4]
 8008dfe:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008e00:	69ba      	ldr	r2, [r7, #24]
 8008e02:	429a      	cmp	r2, r3
 8008e04:	d903      	bls.n	8008e0e <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8008e06:	2301      	movs	r3, #1
 8008e08:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8008e0c:	e113      	b.n	8009036 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008e0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e10:	2200      	movs	r2, #0
 8008e12:	60bb      	str	r3, [r7, #8]
 8008e14:	60fa      	str	r2, [r7, #12]
 8008e16:	697b      	ldr	r3, [r7, #20]
 8008e18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e1a:	4a84      	ldr	r2, [pc, #528]	; (800902c <UART_SetConfig+0x5c4>)
 8008e1c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008e20:	b29b      	uxth	r3, r3
 8008e22:	2200      	movs	r2, #0
 8008e24:	603b      	str	r3, [r7, #0]
 8008e26:	607a      	str	r2, [r7, #4]
 8008e28:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008e2c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8008e30:	f7f7 fee2 	bl	8000bf8 <__aeabi_uldivmod>
 8008e34:	4602      	mov	r2, r0
 8008e36:	460b      	mov	r3, r1
 8008e38:	4610      	mov	r0, r2
 8008e3a:	4619      	mov	r1, r3
 8008e3c:	f04f 0200 	mov.w	r2, #0
 8008e40:	f04f 0300 	mov.w	r3, #0
 8008e44:	020b      	lsls	r3, r1, #8
 8008e46:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8008e4a:	0202      	lsls	r2, r0, #8
 8008e4c:	6979      	ldr	r1, [r7, #20]
 8008e4e:	6849      	ldr	r1, [r1, #4]
 8008e50:	0849      	lsrs	r1, r1, #1
 8008e52:	2000      	movs	r0, #0
 8008e54:	460c      	mov	r4, r1
 8008e56:	4605      	mov	r5, r0
 8008e58:	eb12 0804 	adds.w	r8, r2, r4
 8008e5c:	eb43 0905 	adc.w	r9, r3, r5
 8008e60:	697b      	ldr	r3, [r7, #20]
 8008e62:	685b      	ldr	r3, [r3, #4]
 8008e64:	2200      	movs	r2, #0
 8008e66:	469a      	mov	sl, r3
 8008e68:	4693      	mov	fp, r2
 8008e6a:	4652      	mov	r2, sl
 8008e6c:	465b      	mov	r3, fp
 8008e6e:	4640      	mov	r0, r8
 8008e70:	4649      	mov	r1, r9
 8008e72:	f7f7 fec1 	bl	8000bf8 <__aeabi_uldivmod>
 8008e76:	4602      	mov	r2, r0
 8008e78:	460b      	mov	r3, r1
 8008e7a:	4613      	mov	r3, r2
 8008e7c:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8008e7e:	6a3b      	ldr	r3, [r7, #32]
 8008e80:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008e84:	d308      	bcc.n	8008e98 <UART_SetConfig+0x430>
 8008e86:	6a3b      	ldr	r3, [r7, #32]
 8008e88:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008e8c:	d204      	bcs.n	8008e98 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8008e8e:	697b      	ldr	r3, [r7, #20]
 8008e90:	681b      	ldr	r3, [r3, #0]
 8008e92:	6a3a      	ldr	r2, [r7, #32]
 8008e94:	60da      	str	r2, [r3, #12]
 8008e96:	e0ce      	b.n	8009036 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8008e98:	2301      	movs	r3, #1
 8008e9a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8008e9e:	e0ca      	b.n	8009036 <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008ea0:	697b      	ldr	r3, [r7, #20]
 8008ea2:	69db      	ldr	r3, [r3, #28]
 8008ea4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008ea8:	d166      	bne.n	8008f78 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8008eaa:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8008eae:	2b08      	cmp	r3, #8
 8008eb0:	d827      	bhi.n	8008f02 <UART_SetConfig+0x49a>
 8008eb2:	a201      	add	r2, pc, #4	; (adr r2, 8008eb8 <UART_SetConfig+0x450>)
 8008eb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008eb8:	08008edd 	.word	0x08008edd
 8008ebc:	08008ee5 	.word	0x08008ee5
 8008ec0:	08008eed 	.word	0x08008eed
 8008ec4:	08008f03 	.word	0x08008f03
 8008ec8:	08008ef3 	.word	0x08008ef3
 8008ecc:	08008f03 	.word	0x08008f03
 8008ed0:	08008f03 	.word	0x08008f03
 8008ed4:	08008f03 	.word	0x08008f03
 8008ed8:	08008efb 	.word	0x08008efb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008edc:	f7fd f810 	bl	8005f00 <HAL_RCC_GetPCLK1Freq>
 8008ee0:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008ee2:	e014      	b.n	8008f0e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008ee4:	f7fd f822 	bl	8005f2c <HAL_RCC_GetPCLK2Freq>
 8008ee8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008eea:	e010      	b.n	8008f0e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008eec:	4b4e      	ldr	r3, [pc, #312]	; (8009028 <UART_SetConfig+0x5c0>)
 8008eee:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008ef0:	e00d      	b.n	8008f0e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008ef2:	f7fc ff99 	bl	8005e28 <HAL_RCC_GetSysClockFreq>
 8008ef6:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008ef8:	e009      	b.n	8008f0e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008efa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008efe:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008f00:	e005      	b.n	8008f0e <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8008f02:	2300      	movs	r3, #0
 8008f04:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8008f06:	2301      	movs	r3, #1
 8008f08:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8008f0c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8008f0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f10:	2b00      	cmp	r3, #0
 8008f12:	f000 8090 	beq.w	8009036 <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008f16:	697b      	ldr	r3, [r7, #20]
 8008f18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f1a:	4a44      	ldr	r2, [pc, #272]	; (800902c <UART_SetConfig+0x5c4>)
 8008f1c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008f20:	461a      	mov	r2, r3
 8008f22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f24:	fbb3 f3f2 	udiv	r3, r3, r2
 8008f28:	005a      	lsls	r2, r3, #1
 8008f2a:	697b      	ldr	r3, [r7, #20]
 8008f2c:	685b      	ldr	r3, [r3, #4]
 8008f2e:	085b      	lsrs	r3, r3, #1
 8008f30:	441a      	add	r2, r3
 8008f32:	697b      	ldr	r3, [r7, #20]
 8008f34:	685b      	ldr	r3, [r3, #4]
 8008f36:	fbb2 f3f3 	udiv	r3, r2, r3
 8008f3a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008f3c:	6a3b      	ldr	r3, [r7, #32]
 8008f3e:	2b0f      	cmp	r3, #15
 8008f40:	d916      	bls.n	8008f70 <UART_SetConfig+0x508>
 8008f42:	6a3b      	ldr	r3, [r7, #32]
 8008f44:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008f48:	d212      	bcs.n	8008f70 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008f4a:	6a3b      	ldr	r3, [r7, #32]
 8008f4c:	b29b      	uxth	r3, r3
 8008f4e:	f023 030f 	bic.w	r3, r3, #15
 8008f52:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008f54:	6a3b      	ldr	r3, [r7, #32]
 8008f56:	085b      	lsrs	r3, r3, #1
 8008f58:	b29b      	uxth	r3, r3
 8008f5a:	f003 0307 	and.w	r3, r3, #7
 8008f5e:	b29a      	uxth	r2, r3
 8008f60:	8bfb      	ldrh	r3, [r7, #30]
 8008f62:	4313      	orrs	r3, r2
 8008f64:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8008f66:	697b      	ldr	r3, [r7, #20]
 8008f68:	681b      	ldr	r3, [r3, #0]
 8008f6a:	8bfa      	ldrh	r2, [r7, #30]
 8008f6c:	60da      	str	r2, [r3, #12]
 8008f6e:	e062      	b.n	8009036 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8008f70:	2301      	movs	r3, #1
 8008f72:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8008f76:	e05e      	b.n	8009036 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8008f78:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8008f7c:	2b08      	cmp	r3, #8
 8008f7e:	d828      	bhi.n	8008fd2 <UART_SetConfig+0x56a>
 8008f80:	a201      	add	r2, pc, #4	; (adr r2, 8008f88 <UART_SetConfig+0x520>)
 8008f82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f86:	bf00      	nop
 8008f88:	08008fad 	.word	0x08008fad
 8008f8c:	08008fb5 	.word	0x08008fb5
 8008f90:	08008fbd 	.word	0x08008fbd
 8008f94:	08008fd3 	.word	0x08008fd3
 8008f98:	08008fc3 	.word	0x08008fc3
 8008f9c:	08008fd3 	.word	0x08008fd3
 8008fa0:	08008fd3 	.word	0x08008fd3
 8008fa4:	08008fd3 	.word	0x08008fd3
 8008fa8:	08008fcb 	.word	0x08008fcb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008fac:	f7fc ffa8 	bl	8005f00 <HAL_RCC_GetPCLK1Freq>
 8008fb0:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008fb2:	e014      	b.n	8008fde <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008fb4:	f7fc ffba 	bl	8005f2c <HAL_RCC_GetPCLK2Freq>
 8008fb8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008fba:	e010      	b.n	8008fde <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008fbc:	4b1a      	ldr	r3, [pc, #104]	; (8009028 <UART_SetConfig+0x5c0>)
 8008fbe:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008fc0:	e00d      	b.n	8008fde <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008fc2:	f7fc ff31 	bl	8005e28 <HAL_RCC_GetSysClockFreq>
 8008fc6:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008fc8:	e009      	b.n	8008fde <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008fca:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008fce:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008fd0:	e005      	b.n	8008fde <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8008fd2:	2300      	movs	r3, #0
 8008fd4:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8008fd6:	2301      	movs	r3, #1
 8008fd8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8008fdc:	bf00      	nop
    }

    if (pclk != 0U)
 8008fde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008fe0:	2b00      	cmp	r3, #0
 8008fe2:	d028      	beq.n	8009036 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008fe4:	697b      	ldr	r3, [r7, #20]
 8008fe6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008fe8:	4a10      	ldr	r2, [pc, #64]	; (800902c <UART_SetConfig+0x5c4>)
 8008fea:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008fee:	461a      	mov	r2, r3
 8008ff0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ff2:	fbb3 f2f2 	udiv	r2, r3, r2
 8008ff6:	697b      	ldr	r3, [r7, #20]
 8008ff8:	685b      	ldr	r3, [r3, #4]
 8008ffa:	085b      	lsrs	r3, r3, #1
 8008ffc:	441a      	add	r2, r3
 8008ffe:	697b      	ldr	r3, [r7, #20]
 8009000:	685b      	ldr	r3, [r3, #4]
 8009002:	fbb2 f3f3 	udiv	r3, r2, r3
 8009006:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009008:	6a3b      	ldr	r3, [r7, #32]
 800900a:	2b0f      	cmp	r3, #15
 800900c:	d910      	bls.n	8009030 <UART_SetConfig+0x5c8>
 800900e:	6a3b      	ldr	r3, [r7, #32]
 8009010:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009014:	d20c      	bcs.n	8009030 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8009016:	6a3b      	ldr	r3, [r7, #32]
 8009018:	b29a      	uxth	r2, r3
 800901a:	697b      	ldr	r3, [r7, #20]
 800901c:	681b      	ldr	r3, [r3, #0]
 800901e:	60da      	str	r2, [r3, #12]
 8009020:	e009      	b.n	8009036 <UART_SetConfig+0x5ce>
 8009022:	bf00      	nop
 8009024:	40008000 	.word	0x40008000
 8009028:	00f42400 	.word	0x00f42400
 800902c:	0800c47c 	.word	0x0800c47c
      }
      else
      {
        ret = HAL_ERROR;
 8009030:	2301      	movs	r3, #1
 8009032:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8009036:	697b      	ldr	r3, [r7, #20]
 8009038:	2201      	movs	r2, #1
 800903a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800903e:	697b      	ldr	r3, [r7, #20]
 8009040:	2201      	movs	r2, #1
 8009042:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8009046:	697b      	ldr	r3, [r7, #20]
 8009048:	2200      	movs	r2, #0
 800904a:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800904c:	697b      	ldr	r3, [r7, #20]
 800904e:	2200      	movs	r2, #0
 8009050:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8009052:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8009056:	4618      	mov	r0, r3
 8009058:	3730      	adds	r7, #48	; 0x30
 800905a:	46bd      	mov	sp, r7
 800905c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08009060 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8009060:	b480      	push	{r7}
 8009062:	b083      	sub	sp, #12
 8009064:	af00      	add	r7, sp, #0
 8009066:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800906c:	f003 0301 	and.w	r3, r3, #1
 8009070:	2b00      	cmp	r3, #0
 8009072:	d00a      	beq.n	800908a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	681b      	ldr	r3, [r3, #0]
 8009078:	685b      	ldr	r3, [r3, #4]
 800907a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	681b      	ldr	r3, [r3, #0]
 8009086:	430a      	orrs	r2, r1
 8009088:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800908e:	f003 0302 	and.w	r3, r3, #2
 8009092:	2b00      	cmp	r3, #0
 8009094:	d00a      	beq.n	80090ac <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	681b      	ldr	r3, [r3, #0]
 800909a:	685b      	ldr	r3, [r3, #4]
 800909c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	681b      	ldr	r3, [r3, #0]
 80090a8:	430a      	orrs	r2, r1
 80090aa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80090b0:	f003 0304 	and.w	r3, r3, #4
 80090b4:	2b00      	cmp	r3, #0
 80090b6:	d00a      	beq.n	80090ce <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	681b      	ldr	r3, [r3, #0]
 80090bc:	685b      	ldr	r3, [r3, #4]
 80090be:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	681b      	ldr	r3, [r3, #0]
 80090ca:	430a      	orrs	r2, r1
 80090cc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80090d2:	f003 0308 	and.w	r3, r3, #8
 80090d6:	2b00      	cmp	r3, #0
 80090d8:	d00a      	beq.n	80090f0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	681b      	ldr	r3, [r3, #0]
 80090de:	685b      	ldr	r3, [r3, #4]
 80090e0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	681b      	ldr	r3, [r3, #0]
 80090ec:	430a      	orrs	r2, r1
 80090ee:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80090f4:	f003 0310 	and.w	r3, r3, #16
 80090f8:	2b00      	cmp	r3, #0
 80090fa:	d00a      	beq.n	8009112 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	681b      	ldr	r3, [r3, #0]
 8009100:	689b      	ldr	r3, [r3, #8]
 8009102:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	681b      	ldr	r3, [r3, #0]
 800910e:	430a      	orrs	r2, r1
 8009110:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8009112:	687b      	ldr	r3, [r7, #4]
 8009114:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009116:	f003 0320 	and.w	r3, r3, #32
 800911a:	2b00      	cmp	r3, #0
 800911c:	d00a      	beq.n	8009134 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800911e:	687b      	ldr	r3, [r7, #4]
 8009120:	681b      	ldr	r3, [r3, #0]
 8009122:	689b      	ldr	r3, [r3, #8]
 8009124:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	681b      	ldr	r3, [r3, #0]
 8009130:	430a      	orrs	r2, r1
 8009132:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009138:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800913c:	2b00      	cmp	r3, #0
 800913e:	d01a      	beq.n	8009176 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	681b      	ldr	r3, [r3, #0]
 8009144:	685b      	ldr	r3, [r3, #4]
 8009146:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	681b      	ldr	r3, [r3, #0]
 8009152:	430a      	orrs	r2, r1
 8009154:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800915a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800915e:	d10a      	bne.n	8009176 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	681b      	ldr	r3, [r3, #0]
 8009164:	685b      	ldr	r3, [r3, #4]
 8009166:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	681b      	ldr	r3, [r3, #0]
 8009172:	430a      	orrs	r2, r1
 8009174:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800917a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800917e:	2b00      	cmp	r3, #0
 8009180:	d00a      	beq.n	8009198 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	681b      	ldr	r3, [r3, #0]
 8009186:	685b      	ldr	r3, [r3, #4]
 8009188:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	681b      	ldr	r3, [r3, #0]
 8009194:	430a      	orrs	r2, r1
 8009196:	605a      	str	r2, [r3, #4]
  }
}
 8009198:	bf00      	nop
 800919a:	370c      	adds	r7, #12
 800919c:	46bd      	mov	sp, r7
 800919e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091a2:	4770      	bx	lr

080091a4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80091a4:	b580      	push	{r7, lr}
 80091a6:	b086      	sub	sp, #24
 80091a8:	af02      	add	r7, sp, #8
 80091aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	2200      	movs	r2, #0
 80091b0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80091b4:	f7f9 f960 	bl	8002478 <HAL_GetTick>
 80091b8:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	681b      	ldr	r3, [r3, #0]
 80091be:	681b      	ldr	r3, [r3, #0]
 80091c0:	f003 0308 	and.w	r3, r3, #8
 80091c4:	2b08      	cmp	r3, #8
 80091c6:	d10e      	bne.n	80091e6 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80091c8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80091cc:	9300      	str	r3, [sp, #0]
 80091ce:	68fb      	ldr	r3, [r7, #12]
 80091d0:	2200      	movs	r2, #0
 80091d2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80091d6:	6878      	ldr	r0, [r7, #4]
 80091d8:	f000 f82f 	bl	800923a <UART_WaitOnFlagUntilTimeout>
 80091dc:	4603      	mov	r3, r0
 80091de:	2b00      	cmp	r3, #0
 80091e0:	d001      	beq.n	80091e6 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80091e2:	2303      	movs	r3, #3
 80091e4:	e025      	b.n	8009232 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	681b      	ldr	r3, [r3, #0]
 80091ea:	681b      	ldr	r3, [r3, #0]
 80091ec:	f003 0304 	and.w	r3, r3, #4
 80091f0:	2b04      	cmp	r3, #4
 80091f2:	d10e      	bne.n	8009212 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80091f4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80091f8:	9300      	str	r3, [sp, #0]
 80091fa:	68fb      	ldr	r3, [r7, #12]
 80091fc:	2200      	movs	r2, #0
 80091fe:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8009202:	6878      	ldr	r0, [r7, #4]
 8009204:	f000 f819 	bl	800923a <UART_WaitOnFlagUntilTimeout>
 8009208:	4603      	mov	r3, r0
 800920a:	2b00      	cmp	r3, #0
 800920c:	d001      	beq.n	8009212 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800920e:	2303      	movs	r3, #3
 8009210:	e00f      	b.n	8009232 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	2220      	movs	r2, #32
 8009216:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	2220      	movs	r2, #32
 800921e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	2200      	movs	r2, #0
 8009226:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	2200      	movs	r2, #0
 800922c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8009230:	2300      	movs	r3, #0
}
 8009232:	4618      	mov	r0, r3
 8009234:	3710      	adds	r7, #16
 8009236:	46bd      	mov	sp, r7
 8009238:	bd80      	pop	{r7, pc}

0800923a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800923a:	b580      	push	{r7, lr}
 800923c:	b09c      	sub	sp, #112	; 0x70
 800923e:	af00      	add	r7, sp, #0
 8009240:	60f8      	str	r0, [r7, #12]
 8009242:	60b9      	str	r1, [r7, #8]
 8009244:	603b      	str	r3, [r7, #0]
 8009246:	4613      	mov	r3, r2
 8009248:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800924a:	e0a9      	b.n	80093a0 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800924c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800924e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009252:	f000 80a5 	beq.w	80093a0 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009256:	f7f9 f90f 	bl	8002478 <HAL_GetTick>
 800925a:	4602      	mov	r2, r0
 800925c:	683b      	ldr	r3, [r7, #0]
 800925e:	1ad3      	subs	r3, r2, r3
 8009260:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8009262:	429a      	cmp	r2, r3
 8009264:	d302      	bcc.n	800926c <UART_WaitOnFlagUntilTimeout+0x32>
 8009266:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009268:	2b00      	cmp	r3, #0
 800926a:	d140      	bne.n	80092ee <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800926c:	68fb      	ldr	r3, [r7, #12]
 800926e:	681b      	ldr	r3, [r3, #0]
 8009270:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009272:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009274:	e853 3f00 	ldrex	r3, [r3]
 8009278:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800927a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800927c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8009280:	667b      	str	r3, [r7, #100]	; 0x64
 8009282:	68fb      	ldr	r3, [r7, #12]
 8009284:	681b      	ldr	r3, [r3, #0]
 8009286:	461a      	mov	r2, r3
 8009288:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800928a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800928c:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800928e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8009290:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8009292:	e841 2300 	strex	r3, r2, [r1]
 8009296:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8009298:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800929a:	2b00      	cmp	r3, #0
 800929c:	d1e6      	bne.n	800926c <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800929e:	68fb      	ldr	r3, [r7, #12]
 80092a0:	681b      	ldr	r3, [r3, #0]
 80092a2:	3308      	adds	r3, #8
 80092a4:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80092a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80092a8:	e853 3f00 	ldrex	r3, [r3]
 80092ac:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80092ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80092b0:	f023 0301 	bic.w	r3, r3, #1
 80092b4:	663b      	str	r3, [r7, #96]	; 0x60
 80092b6:	68fb      	ldr	r3, [r7, #12]
 80092b8:	681b      	ldr	r3, [r3, #0]
 80092ba:	3308      	adds	r3, #8
 80092bc:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80092be:	64ba      	str	r2, [r7, #72]	; 0x48
 80092c0:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80092c2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80092c4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80092c6:	e841 2300 	strex	r3, r2, [r1]
 80092ca:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80092cc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80092ce:	2b00      	cmp	r3, #0
 80092d0:	d1e5      	bne.n	800929e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80092d2:	68fb      	ldr	r3, [r7, #12]
 80092d4:	2220      	movs	r2, #32
 80092d6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 80092da:	68fb      	ldr	r3, [r7, #12]
 80092dc:	2220      	movs	r2, #32
 80092de:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 80092e2:	68fb      	ldr	r3, [r7, #12]
 80092e4:	2200      	movs	r2, #0
 80092e6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 80092ea:	2303      	movs	r3, #3
 80092ec:	e069      	b.n	80093c2 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80092ee:	68fb      	ldr	r3, [r7, #12]
 80092f0:	681b      	ldr	r3, [r3, #0]
 80092f2:	681b      	ldr	r3, [r3, #0]
 80092f4:	f003 0304 	and.w	r3, r3, #4
 80092f8:	2b00      	cmp	r3, #0
 80092fa:	d051      	beq.n	80093a0 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80092fc:	68fb      	ldr	r3, [r7, #12]
 80092fe:	681b      	ldr	r3, [r3, #0]
 8009300:	69db      	ldr	r3, [r3, #28]
 8009302:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009306:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800930a:	d149      	bne.n	80093a0 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800930c:	68fb      	ldr	r3, [r7, #12]
 800930e:	681b      	ldr	r3, [r3, #0]
 8009310:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009314:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8009316:	68fb      	ldr	r3, [r7, #12]
 8009318:	681b      	ldr	r3, [r3, #0]
 800931a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800931c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800931e:	e853 3f00 	ldrex	r3, [r3]
 8009322:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009324:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009326:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800932a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800932c:	68fb      	ldr	r3, [r7, #12]
 800932e:	681b      	ldr	r3, [r3, #0]
 8009330:	461a      	mov	r2, r3
 8009332:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009334:	637b      	str	r3, [r7, #52]	; 0x34
 8009336:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009338:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800933a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800933c:	e841 2300 	strex	r3, r2, [r1]
 8009340:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8009342:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009344:	2b00      	cmp	r3, #0
 8009346:	d1e6      	bne.n	8009316 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009348:	68fb      	ldr	r3, [r7, #12]
 800934a:	681b      	ldr	r3, [r3, #0]
 800934c:	3308      	adds	r3, #8
 800934e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009350:	697b      	ldr	r3, [r7, #20]
 8009352:	e853 3f00 	ldrex	r3, [r3]
 8009356:	613b      	str	r3, [r7, #16]
   return(result);
 8009358:	693b      	ldr	r3, [r7, #16]
 800935a:	f023 0301 	bic.w	r3, r3, #1
 800935e:	66bb      	str	r3, [r7, #104]	; 0x68
 8009360:	68fb      	ldr	r3, [r7, #12]
 8009362:	681b      	ldr	r3, [r3, #0]
 8009364:	3308      	adds	r3, #8
 8009366:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8009368:	623a      	str	r2, [r7, #32]
 800936a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800936c:	69f9      	ldr	r1, [r7, #28]
 800936e:	6a3a      	ldr	r2, [r7, #32]
 8009370:	e841 2300 	strex	r3, r2, [r1]
 8009374:	61bb      	str	r3, [r7, #24]
   return(result);
 8009376:	69bb      	ldr	r3, [r7, #24]
 8009378:	2b00      	cmp	r3, #0
 800937a:	d1e5      	bne.n	8009348 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 800937c:	68fb      	ldr	r3, [r7, #12]
 800937e:	2220      	movs	r2, #32
 8009380:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8009384:	68fb      	ldr	r3, [r7, #12]
 8009386:	2220      	movs	r2, #32
 8009388:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800938c:	68fb      	ldr	r3, [r7, #12]
 800938e:	2220      	movs	r2, #32
 8009390:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009394:	68fb      	ldr	r3, [r7, #12]
 8009396:	2200      	movs	r2, #0
 8009398:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800939c:	2303      	movs	r3, #3
 800939e:	e010      	b.n	80093c2 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80093a0:	68fb      	ldr	r3, [r7, #12]
 80093a2:	681b      	ldr	r3, [r3, #0]
 80093a4:	69da      	ldr	r2, [r3, #28]
 80093a6:	68bb      	ldr	r3, [r7, #8]
 80093a8:	4013      	ands	r3, r2
 80093aa:	68ba      	ldr	r2, [r7, #8]
 80093ac:	429a      	cmp	r2, r3
 80093ae:	bf0c      	ite	eq
 80093b0:	2301      	moveq	r3, #1
 80093b2:	2300      	movne	r3, #0
 80093b4:	b2db      	uxtb	r3, r3
 80093b6:	461a      	mov	r2, r3
 80093b8:	79fb      	ldrb	r3, [r7, #7]
 80093ba:	429a      	cmp	r2, r3
 80093bc:	f43f af46 	beq.w	800924c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80093c0:	2300      	movs	r3, #0
}
 80093c2:	4618      	mov	r0, r3
 80093c4:	3770      	adds	r7, #112	; 0x70
 80093c6:	46bd      	mov	sp, r7
 80093c8:	bd80      	pop	{r7, pc}

080093ca <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80093ca:	b480      	push	{r7}
 80093cc:	b085      	sub	sp, #20
 80093ce:	af00      	add	r7, sp, #0
 80093d0:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80093d8:	2b01      	cmp	r3, #1
 80093da:	d101      	bne.n	80093e0 <HAL_UARTEx_DisableFifoMode+0x16>
 80093dc:	2302      	movs	r3, #2
 80093de:	e027      	b.n	8009430 <HAL_UARTEx_DisableFifoMode+0x66>
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	2201      	movs	r2, #1
 80093e4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	2224      	movs	r2, #36	; 0x24
 80093ec:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	681b      	ldr	r3, [r3, #0]
 80093f4:	681b      	ldr	r3, [r3, #0]
 80093f6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	681b      	ldr	r3, [r3, #0]
 80093fc:	681a      	ldr	r2, [r3, #0]
 80093fe:	687b      	ldr	r3, [r7, #4]
 8009400:	681b      	ldr	r3, [r3, #0]
 8009402:	f022 0201 	bic.w	r2, r2, #1
 8009406:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8009408:	68fb      	ldr	r3, [r7, #12]
 800940a:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800940e:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	2200      	movs	r2, #0
 8009414:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009416:	687b      	ldr	r3, [r7, #4]
 8009418:	681b      	ldr	r3, [r3, #0]
 800941a:	68fa      	ldr	r2, [r7, #12]
 800941c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	2220      	movs	r2, #32
 8009422:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009426:	687b      	ldr	r3, [r7, #4]
 8009428:	2200      	movs	r2, #0
 800942a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800942e:	2300      	movs	r3, #0
}
 8009430:	4618      	mov	r0, r3
 8009432:	3714      	adds	r7, #20
 8009434:	46bd      	mov	sp, r7
 8009436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800943a:	4770      	bx	lr

0800943c <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800943c:	b580      	push	{r7, lr}
 800943e:	b084      	sub	sp, #16
 8009440:	af00      	add	r7, sp, #0
 8009442:	6078      	str	r0, [r7, #4]
 8009444:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800944c:	2b01      	cmp	r3, #1
 800944e:	d101      	bne.n	8009454 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8009450:	2302      	movs	r3, #2
 8009452:	e02d      	b.n	80094b0 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	2201      	movs	r2, #1
 8009458:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	2224      	movs	r2, #36	; 0x24
 8009460:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	681b      	ldr	r3, [r3, #0]
 8009468:	681b      	ldr	r3, [r3, #0]
 800946a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	681b      	ldr	r3, [r3, #0]
 8009470:	681a      	ldr	r2, [r3, #0]
 8009472:	687b      	ldr	r3, [r7, #4]
 8009474:	681b      	ldr	r3, [r3, #0]
 8009476:	f022 0201 	bic.w	r2, r2, #1
 800947a:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	681b      	ldr	r3, [r3, #0]
 8009480:	689b      	ldr	r3, [r3, #8]
 8009482:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	681b      	ldr	r3, [r3, #0]
 800948a:	683a      	ldr	r2, [r7, #0]
 800948c:	430a      	orrs	r2, r1
 800948e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009490:	6878      	ldr	r0, [r7, #4]
 8009492:	f000 f84f 	bl	8009534 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009496:	687b      	ldr	r3, [r7, #4]
 8009498:	681b      	ldr	r3, [r3, #0]
 800949a:	68fa      	ldr	r2, [r7, #12]
 800949c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800949e:	687b      	ldr	r3, [r7, #4]
 80094a0:	2220      	movs	r2, #32
 80094a2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80094a6:	687b      	ldr	r3, [r7, #4]
 80094a8:	2200      	movs	r2, #0
 80094aa:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80094ae:	2300      	movs	r3, #0
}
 80094b0:	4618      	mov	r0, r3
 80094b2:	3710      	adds	r7, #16
 80094b4:	46bd      	mov	sp, r7
 80094b6:	bd80      	pop	{r7, pc}

080094b8 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80094b8:	b580      	push	{r7, lr}
 80094ba:	b084      	sub	sp, #16
 80094bc:	af00      	add	r7, sp, #0
 80094be:	6078      	str	r0, [r7, #4]
 80094c0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80094c2:	687b      	ldr	r3, [r7, #4]
 80094c4:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80094c8:	2b01      	cmp	r3, #1
 80094ca:	d101      	bne.n	80094d0 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80094cc:	2302      	movs	r3, #2
 80094ce:	e02d      	b.n	800952c <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	2201      	movs	r2, #1
 80094d4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	2224      	movs	r2, #36	; 0x24
 80094dc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	681b      	ldr	r3, [r3, #0]
 80094e4:	681b      	ldr	r3, [r3, #0]
 80094e6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	681b      	ldr	r3, [r3, #0]
 80094ec:	681a      	ldr	r2, [r3, #0]
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	681b      	ldr	r3, [r3, #0]
 80094f2:	f022 0201 	bic.w	r2, r2, #1
 80094f6:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	681b      	ldr	r3, [r3, #0]
 80094fc:	689b      	ldr	r3, [r3, #8]
 80094fe:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	681b      	ldr	r3, [r3, #0]
 8009506:	683a      	ldr	r2, [r7, #0]
 8009508:	430a      	orrs	r2, r1
 800950a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800950c:	6878      	ldr	r0, [r7, #4]
 800950e:	f000 f811 	bl	8009534 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	681b      	ldr	r3, [r3, #0]
 8009516:	68fa      	ldr	r2, [r7, #12]
 8009518:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	2220      	movs	r2, #32
 800951e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	2200      	movs	r2, #0
 8009526:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800952a:	2300      	movs	r3, #0
}
 800952c:	4618      	mov	r0, r3
 800952e:	3710      	adds	r7, #16
 8009530:	46bd      	mov	sp, r7
 8009532:	bd80      	pop	{r7, pc}

08009534 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8009534:	b480      	push	{r7}
 8009536:	b085      	sub	sp, #20
 8009538:	af00      	add	r7, sp, #0
 800953a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800953c:	687b      	ldr	r3, [r7, #4]
 800953e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009540:	2b00      	cmp	r3, #0
 8009542:	d108      	bne.n	8009556 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	2201      	movs	r2, #1
 8009548:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	2201      	movs	r2, #1
 8009550:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8009554:	e031      	b.n	80095ba <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8009556:	2308      	movs	r3, #8
 8009558:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800955a:	2308      	movs	r3, #8
 800955c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	681b      	ldr	r3, [r3, #0]
 8009562:	689b      	ldr	r3, [r3, #8]
 8009564:	0e5b      	lsrs	r3, r3, #25
 8009566:	b2db      	uxtb	r3, r3
 8009568:	f003 0307 	and.w	r3, r3, #7
 800956c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800956e:	687b      	ldr	r3, [r7, #4]
 8009570:	681b      	ldr	r3, [r3, #0]
 8009572:	689b      	ldr	r3, [r3, #8]
 8009574:	0f5b      	lsrs	r3, r3, #29
 8009576:	b2db      	uxtb	r3, r3
 8009578:	f003 0307 	and.w	r3, r3, #7
 800957c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800957e:	7bbb      	ldrb	r3, [r7, #14]
 8009580:	7b3a      	ldrb	r2, [r7, #12]
 8009582:	4911      	ldr	r1, [pc, #68]	; (80095c8 <UARTEx_SetNbDataToProcess+0x94>)
 8009584:	5c8a      	ldrb	r2, [r1, r2]
 8009586:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800958a:	7b3a      	ldrb	r2, [r7, #12]
 800958c:	490f      	ldr	r1, [pc, #60]	; (80095cc <UARTEx_SetNbDataToProcess+0x98>)
 800958e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009590:	fb93 f3f2 	sdiv	r3, r3, r2
 8009594:	b29a      	uxth	r2, r3
 8009596:	687b      	ldr	r3, [r7, #4]
 8009598:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800959c:	7bfb      	ldrb	r3, [r7, #15]
 800959e:	7b7a      	ldrb	r2, [r7, #13]
 80095a0:	4909      	ldr	r1, [pc, #36]	; (80095c8 <UARTEx_SetNbDataToProcess+0x94>)
 80095a2:	5c8a      	ldrb	r2, [r1, r2]
 80095a4:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80095a8:	7b7a      	ldrb	r2, [r7, #13]
 80095aa:	4908      	ldr	r1, [pc, #32]	; (80095cc <UARTEx_SetNbDataToProcess+0x98>)
 80095ac:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80095ae:	fb93 f3f2 	sdiv	r3, r3, r2
 80095b2:	b29a      	uxth	r2, r3
 80095b4:	687b      	ldr	r3, [r7, #4]
 80095b6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80095ba:	bf00      	nop
 80095bc:	3714      	adds	r7, #20
 80095be:	46bd      	mov	sp, r7
 80095c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095c4:	4770      	bx	lr
 80095c6:	bf00      	nop
 80095c8:	0800c494 	.word	0x0800c494
 80095cc:	0800c49c 	.word	0x0800c49c

080095d0 <__errno>:
 80095d0:	4b01      	ldr	r3, [pc, #4]	; (80095d8 <__errno+0x8>)
 80095d2:	6818      	ldr	r0, [r3, #0]
 80095d4:	4770      	bx	lr
 80095d6:	bf00      	nop
 80095d8:	2000000c 	.word	0x2000000c

080095dc <__libc_init_array>:
 80095dc:	b570      	push	{r4, r5, r6, lr}
 80095de:	4d0d      	ldr	r5, [pc, #52]	; (8009614 <__libc_init_array+0x38>)
 80095e0:	4c0d      	ldr	r4, [pc, #52]	; (8009618 <__libc_init_array+0x3c>)
 80095e2:	1b64      	subs	r4, r4, r5
 80095e4:	10a4      	asrs	r4, r4, #2
 80095e6:	2600      	movs	r6, #0
 80095e8:	42a6      	cmp	r6, r4
 80095ea:	d109      	bne.n	8009600 <__libc_init_array+0x24>
 80095ec:	4d0b      	ldr	r5, [pc, #44]	; (800961c <__libc_init_array+0x40>)
 80095ee:	4c0c      	ldr	r4, [pc, #48]	; (8009620 <__libc_init_array+0x44>)
 80095f0:	f002 ff02 	bl	800c3f8 <_init>
 80095f4:	1b64      	subs	r4, r4, r5
 80095f6:	10a4      	asrs	r4, r4, #2
 80095f8:	2600      	movs	r6, #0
 80095fa:	42a6      	cmp	r6, r4
 80095fc:	d105      	bne.n	800960a <__libc_init_array+0x2e>
 80095fe:	bd70      	pop	{r4, r5, r6, pc}
 8009600:	f855 3b04 	ldr.w	r3, [r5], #4
 8009604:	4798      	blx	r3
 8009606:	3601      	adds	r6, #1
 8009608:	e7ee      	b.n	80095e8 <__libc_init_array+0xc>
 800960a:	f855 3b04 	ldr.w	r3, [r5], #4
 800960e:	4798      	blx	r3
 8009610:	3601      	adds	r6, #1
 8009612:	e7f2      	b.n	80095fa <__libc_init_array+0x1e>
 8009614:	0800c884 	.word	0x0800c884
 8009618:	0800c884 	.word	0x0800c884
 800961c:	0800c884 	.word	0x0800c884
 8009620:	0800c888 	.word	0x0800c888

08009624 <memset>:
 8009624:	4402      	add	r2, r0
 8009626:	4603      	mov	r3, r0
 8009628:	4293      	cmp	r3, r2
 800962a:	d100      	bne.n	800962e <memset+0xa>
 800962c:	4770      	bx	lr
 800962e:	f803 1b01 	strb.w	r1, [r3], #1
 8009632:	e7f9      	b.n	8009628 <memset+0x4>

08009634 <__cvt>:
 8009634:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009638:	ec55 4b10 	vmov	r4, r5, d0
 800963c:	2d00      	cmp	r5, #0
 800963e:	460e      	mov	r6, r1
 8009640:	4619      	mov	r1, r3
 8009642:	462b      	mov	r3, r5
 8009644:	bfbb      	ittet	lt
 8009646:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800964a:	461d      	movlt	r5, r3
 800964c:	2300      	movge	r3, #0
 800964e:	232d      	movlt	r3, #45	; 0x2d
 8009650:	700b      	strb	r3, [r1, #0]
 8009652:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009654:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8009658:	4691      	mov	r9, r2
 800965a:	f023 0820 	bic.w	r8, r3, #32
 800965e:	bfbc      	itt	lt
 8009660:	4622      	movlt	r2, r4
 8009662:	4614      	movlt	r4, r2
 8009664:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8009668:	d005      	beq.n	8009676 <__cvt+0x42>
 800966a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800966e:	d100      	bne.n	8009672 <__cvt+0x3e>
 8009670:	3601      	adds	r6, #1
 8009672:	2102      	movs	r1, #2
 8009674:	e000      	b.n	8009678 <__cvt+0x44>
 8009676:	2103      	movs	r1, #3
 8009678:	ab03      	add	r3, sp, #12
 800967a:	9301      	str	r3, [sp, #4]
 800967c:	ab02      	add	r3, sp, #8
 800967e:	9300      	str	r3, [sp, #0]
 8009680:	ec45 4b10 	vmov	d0, r4, r5
 8009684:	4653      	mov	r3, sl
 8009686:	4632      	mov	r2, r6
 8009688:	f000 fcea 	bl	800a060 <_dtoa_r>
 800968c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8009690:	4607      	mov	r7, r0
 8009692:	d102      	bne.n	800969a <__cvt+0x66>
 8009694:	f019 0f01 	tst.w	r9, #1
 8009698:	d022      	beq.n	80096e0 <__cvt+0xac>
 800969a:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800969e:	eb07 0906 	add.w	r9, r7, r6
 80096a2:	d110      	bne.n	80096c6 <__cvt+0x92>
 80096a4:	783b      	ldrb	r3, [r7, #0]
 80096a6:	2b30      	cmp	r3, #48	; 0x30
 80096a8:	d10a      	bne.n	80096c0 <__cvt+0x8c>
 80096aa:	2200      	movs	r2, #0
 80096ac:	2300      	movs	r3, #0
 80096ae:	4620      	mov	r0, r4
 80096b0:	4629      	mov	r1, r5
 80096b2:	f7f7 fa31 	bl	8000b18 <__aeabi_dcmpeq>
 80096b6:	b918      	cbnz	r0, 80096c0 <__cvt+0x8c>
 80096b8:	f1c6 0601 	rsb	r6, r6, #1
 80096bc:	f8ca 6000 	str.w	r6, [sl]
 80096c0:	f8da 3000 	ldr.w	r3, [sl]
 80096c4:	4499      	add	r9, r3
 80096c6:	2200      	movs	r2, #0
 80096c8:	2300      	movs	r3, #0
 80096ca:	4620      	mov	r0, r4
 80096cc:	4629      	mov	r1, r5
 80096ce:	f7f7 fa23 	bl	8000b18 <__aeabi_dcmpeq>
 80096d2:	b108      	cbz	r0, 80096d8 <__cvt+0xa4>
 80096d4:	f8cd 900c 	str.w	r9, [sp, #12]
 80096d8:	2230      	movs	r2, #48	; 0x30
 80096da:	9b03      	ldr	r3, [sp, #12]
 80096dc:	454b      	cmp	r3, r9
 80096de:	d307      	bcc.n	80096f0 <__cvt+0xbc>
 80096e0:	9b03      	ldr	r3, [sp, #12]
 80096e2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80096e4:	1bdb      	subs	r3, r3, r7
 80096e6:	4638      	mov	r0, r7
 80096e8:	6013      	str	r3, [r2, #0]
 80096ea:	b004      	add	sp, #16
 80096ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80096f0:	1c59      	adds	r1, r3, #1
 80096f2:	9103      	str	r1, [sp, #12]
 80096f4:	701a      	strb	r2, [r3, #0]
 80096f6:	e7f0      	b.n	80096da <__cvt+0xa6>

080096f8 <__exponent>:
 80096f8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80096fa:	4603      	mov	r3, r0
 80096fc:	2900      	cmp	r1, #0
 80096fe:	bfb8      	it	lt
 8009700:	4249      	neglt	r1, r1
 8009702:	f803 2b02 	strb.w	r2, [r3], #2
 8009706:	bfb4      	ite	lt
 8009708:	222d      	movlt	r2, #45	; 0x2d
 800970a:	222b      	movge	r2, #43	; 0x2b
 800970c:	2909      	cmp	r1, #9
 800970e:	7042      	strb	r2, [r0, #1]
 8009710:	dd2a      	ble.n	8009768 <__exponent+0x70>
 8009712:	f10d 0407 	add.w	r4, sp, #7
 8009716:	46a4      	mov	ip, r4
 8009718:	270a      	movs	r7, #10
 800971a:	46a6      	mov	lr, r4
 800971c:	460a      	mov	r2, r1
 800971e:	fb91 f6f7 	sdiv	r6, r1, r7
 8009722:	fb07 1516 	mls	r5, r7, r6, r1
 8009726:	3530      	adds	r5, #48	; 0x30
 8009728:	2a63      	cmp	r2, #99	; 0x63
 800972a:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 800972e:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8009732:	4631      	mov	r1, r6
 8009734:	dcf1      	bgt.n	800971a <__exponent+0x22>
 8009736:	3130      	adds	r1, #48	; 0x30
 8009738:	f1ae 0502 	sub.w	r5, lr, #2
 800973c:	f804 1c01 	strb.w	r1, [r4, #-1]
 8009740:	1c44      	adds	r4, r0, #1
 8009742:	4629      	mov	r1, r5
 8009744:	4561      	cmp	r1, ip
 8009746:	d30a      	bcc.n	800975e <__exponent+0x66>
 8009748:	f10d 0209 	add.w	r2, sp, #9
 800974c:	eba2 020e 	sub.w	r2, r2, lr
 8009750:	4565      	cmp	r5, ip
 8009752:	bf88      	it	hi
 8009754:	2200      	movhi	r2, #0
 8009756:	4413      	add	r3, r2
 8009758:	1a18      	subs	r0, r3, r0
 800975a:	b003      	add	sp, #12
 800975c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800975e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009762:	f804 2f01 	strb.w	r2, [r4, #1]!
 8009766:	e7ed      	b.n	8009744 <__exponent+0x4c>
 8009768:	2330      	movs	r3, #48	; 0x30
 800976a:	3130      	adds	r1, #48	; 0x30
 800976c:	7083      	strb	r3, [r0, #2]
 800976e:	70c1      	strb	r1, [r0, #3]
 8009770:	1d03      	adds	r3, r0, #4
 8009772:	e7f1      	b.n	8009758 <__exponent+0x60>

08009774 <_printf_float>:
 8009774:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009778:	ed2d 8b02 	vpush	{d8}
 800977c:	b08d      	sub	sp, #52	; 0x34
 800977e:	460c      	mov	r4, r1
 8009780:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8009784:	4616      	mov	r6, r2
 8009786:	461f      	mov	r7, r3
 8009788:	4605      	mov	r5, r0
 800978a:	f001 fa57 	bl	800ac3c <_localeconv_r>
 800978e:	f8d0 a000 	ldr.w	sl, [r0]
 8009792:	4650      	mov	r0, sl
 8009794:	f7f6 fd44 	bl	8000220 <strlen>
 8009798:	2300      	movs	r3, #0
 800979a:	930a      	str	r3, [sp, #40]	; 0x28
 800979c:	6823      	ldr	r3, [r4, #0]
 800979e:	9305      	str	r3, [sp, #20]
 80097a0:	f8d8 3000 	ldr.w	r3, [r8]
 80097a4:	f894 b018 	ldrb.w	fp, [r4, #24]
 80097a8:	3307      	adds	r3, #7
 80097aa:	f023 0307 	bic.w	r3, r3, #7
 80097ae:	f103 0208 	add.w	r2, r3, #8
 80097b2:	f8c8 2000 	str.w	r2, [r8]
 80097b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097ba:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80097be:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 80097c2:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80097c6:	9307      	str	r3, [sp, #28]
 80097c8:	f8cd 8018 	str.w	r8, [sp, #24]
 80097cc:	ee08 0a10 	vmov	s16, r0
 80097d0:	4b9f      	ldr	r3, [pc, #636]	; (8009a50 <_printf_float+0x2dc>)
 80097d2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80097d6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80097da:	f7f7 f9cf 	bl	8000b7c <__aeabi_dcmpun>
 80097de:	bb88      	cbnz	r0, 8009844 <_printf_float+0xd0>
 80097e0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80097e4:	4b9a      	ldr	r3, [pc, #616]	; (8009a50 <_printf_float+0x2dc>)
 80097e6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80097ea:	f7f7 f9a9 	bl	8000b40 <__aeabi_dcmple>
 80097ee:	bb48      	cbnz	r0, 8009844 <_printf_float+0xd0>
 80097f0:	2200      	movs	r2, #0
 80097f2:	2300      	movs	r3, #0
 80097f4:	4640      	mov	r0, r8
 80097f6:	4649      	mov	r1, r9
 80097f8:	f7f7 f998 	bl	8000b2c <__aeabi_dcmplt>
 80097fc:	b110      	cbz	r0, 8009804 <_printf_float+0x90>
 80097fe:	232d      	movs	r3, #45	; 0x2d
 8009800:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009804:	4b93      	ldr	r3, [pc, #588]	; (8009a54 <_printf_float+0x2e0>)
 8009806:	4894      	ldr	r0, [pc, #592]	; (8009a58 <_printf_float+0x2e4>)
 8009808:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800980c:	bf94      	ite	ls
 800980e:	4698      	movls	r8, r3
 8009810:	4680      	movhi	r8, r0
 8009812:	2303      	movs	r3, #3
 8009814:	6123      	str	r3, [r4, #16]
 8009816:	9b05      	ldr	r3, [sp, #20]
 8009818:	f023 0204 	bic.w	r2, r3, #4
 800981c:	6022      	str	r2, [r4, #0]
 800981e:	f04f 0900 	mov.w	r9, #0
 8009822:	9700      	str	r7, [sp, #0]
 8009824:	4633      	mov	r3, r6
 8009826:	aa0b      	add	r2, sp, #44	; 0x2c
 8009828:	4621      	mov	r1, r4
 800982a:	4628      	mov	r0, r5
 800982c:	f000 f9d8 	bl	8009be0 <_printf_common>
 8009830:	3001      	adds	r0, #1
 8009832:	f040 8090 	bne.w	8009956 <_printf_float+0x1e2>
 8009836:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800983a:	b00d      	add	sp, #52	; 0x34
 800983c:	ecbd 8b02 	vpop	{d8}
 8009840:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009844:	4642      	mov	r2, r8
 8009846:	464b      	mov	r3, r9
 8009848:	4640      	mov	r0, r8
 800984a:	4649      	mov	r1, r9
 800984c:	f7f7 f996 	bl	8000b7c <__aeabi_dcmpun>
 8009850:	b140      	cbz	r0, 8009864 <_printf_float+0xf0>
 8009852:	464b      	mov	r3, r9
 8009854:	2b00      	cmp	r3, #0
 8009856:	bfbc      	itt	lt
 8009858:	232d      	movlt	r3, #45	; 0x2d
 800985a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800985e:	487f      	ldr	r0, [pc, #508]	; (8009a5c <_printf_float+0x2e8>)
 8009860:	4b7f      	ldr	r3, [pc, #508]	; (8009a60 <_printf_float+0x2ec>)
 8009862:	e7d1      	b.n	8009808 <_printf_float+0x94>
 8009864:	6863      	ldr	r3, [r4, #4]
 8009866:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800986a:	9206      	str	r2, [sp, #24]
 800986c:	1c5a      	adds	r2, r3, #1
 800986e:	d13f      	bne.n	80098f0 <_printf_float+0x17c>
 8009870:	2306      	movs	r3, #6
 8009872:	6063      	str	r3, [r4, #4]
 8009874:	9b05      	ldr	r3, [sp, #20]
 8009876:	6861      	ldr	r1, [r4, #4]
 8009878:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800987c:	2300      	movs	r3, #0
 800987e:	9303      	str	r3, [sp, #12]
 8009880:	ab0a      	add	r3, sp, #40	; 0x28
 8009882:	e9cd b301 	strd	fp, r3, [sp, #4]
 8009886:	ab09      	add	r3, sp, #36	; 0x24
 8009888:	ec49 8b10 	vmov	d0, r8, r9
 800988c:	9300      	str	r3, [sp, #0]
 800988e:	6022      	str	r2, [r4, #0]
 8009890:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8009894:	4628      	mov	r0, r5
 8009896:	f7ff fecd 	bl	8009634 <__cvt>
 800989a:	9b06      	ldr	r3, [sp, #24]
 800989c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800989e:	2b47      	cmp	r3, #71	; 0x47
 80098a0:	4680      	mov	r8, r0
 80098a2:	d108      	bne.n	80098b6 <_printf_float+0x142>
 80098a4:	1cc8      	adds	r0, r1, #3
 80098a6:	db02      	blt.n	80098ae <_printf_float+0x13a>
 80098a8:	6863      	ldr	r3, [r4, #4]
 80098aa:	4299      	cmp	r1, r3
 80098ac:	dd41      	ble.n	8009932 <_printf_float+0x1be>
 80098ae:	f1ab 0b02 	sub.w	fp, fp, #2
 80098b2:	fa5f fb8b 	uxtb.w	fp, fp
 80098b6:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80098ba:	d820      	bhi.n	80098fe <_printf_float+0x18a>
 80098bc:	3901      	subs	r1, #1
 80098be:	465a      	mov	r2, fp
 80098c0:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80098c4:	9109      	str	r1, [sp, #36]	; 0x24
 80098c6:	f7ff ff17 	bl	80096f8 <__exponent>
 80098ca:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80098cc:	1813      	adds	r3, r2, r0
 80098ce:	2a01      	cmp	r2, #1
 80098d0:	4681      	mov	r9, r0
 80098d2:	6123      	str	r3, [r4, #16]
 80098d4:	dc02      	bgt.n	80098dc <_printf_float+0x168>
 80098d6:	6822      	ldr	r2, [r4, #0]
 80098d8:	07d2      	lsls	r2, r2, #31
 80098da:	d501      	bpl.n	80098e0 <_printf_float+0x16c>
 80098dc:	3301      	adds	r3, #1
 80098de:	6123      	str	r3, [r4, #16]
 80098e0:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80098e4:	2b00      	cmp	r3, #0
 80098e6:	d09c      	beq.n	8009822 <_printf_float+0xae>
 80098e8:	232d      	movs	r3, #45	; 0x2d
 80098ea:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80098ee:	e798      	b.n	8009822 <_printf_float+0xae>
 80098f0:	9a06      	ldr	r2, [sp, #24]
 80098f2:	2a47      	cmp	r2, #71	; 0x47
 80098f4:	d1be      	bne.n	8009874 <_printf_float+0x100>
 80098f6:	2b00      	cmp	r3, #0
 80098f8:	d1bc      	bne.n	8009874 <_printf_float+0x100>
 80098fa:	2301      	movs	r3, #1
 80098fc:	e7b9      	b.n	8009872 <_printf_float+0xfe>
 80098fe:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8009902:	d118      	bne.n	8009936 <_printf_float+0x1c2>
 8009904:	2900      	cmp	r1, #0
 8009906:	6863      	ldr	r3, [r4, #4]
 8009908:	dd0b      	ble.n	8009922 <_printf_float+0x1ae>
 800990a:	6121      	str	r1, [r4, #16]
 800990c:	b913      	cbnz	r3, 8009914 <_printf_float+0x1a0>
 800990e:	6822      	ldr	r2, [r4, #0]
 8009910:	07d0      	lsls	r0, r2, #31
 8009912:	d502      	bpl.n	800991a <_printf_float+0x1a6>
 8009914:	3301      	adds	r3, #1
 8009916:	440b      	add	r3, r1
 8009918:	6123      	str	r3, [r4, #16]
 800991a:	65a1      	str	r1, [r4, #88]	; 0x58
 800991c:	f04f 0900 	mov.w	r9, #0
 8009920:	e7de      	b.n	80098e0 <_printf_float+0x16c>
 8009922:	b913      	cbnz	r3, 800992a <_printf_float+0x1b6>
 8009924:	6822      	ldr	r2, [r4, #0]
 8009926:	07d2      	lsls	r2, r2, #31
 8009928:	d501      	bpl.n	800992e <_printf_float+0x1ba>
 800992a:	3302      	adds	r3, #2
 800992c:	e7f4      	b.n	8009918 <_printf_float+0x1a4>
 800992e:	2301      	movs	r3, #1
 8009930:	e7f2      	b.n	8009918 <_printf_float+0x1a4>
 8009932:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8009936:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009938:	4299      	cmp	r1, r3
 800993a:	db05      	blt.n	8009948 <_printf_float+0x1d4>
 800993c:	6823      	ldr	r3, [r4, #0]
 800993e:	6121      	str	r1, [r4, #16]
 8009940:	07d8      	lsls	r0, r3, #31
 8009942:	d5ea      	bpl.n	800991a <_printf_float+0x1a6>
 8009944:	1c4b      	adds	r3, r1, #1
 8009946:	e7e7      	b.n	8009918 <_printf_float+0x1a4>
 8009948:	2900      	cmp	r1, #0
 800994a:	bfd4      	ite	le
 800994c:	f1c1 0202 	rsble	r2, r1, #2
 8009950:	2201      	movgt	r2, #1
 8009952:	4413      	add	r3, r2
 8009954:	e7e0      	b.n	8009918 <_printf_float+0x1a4>
 8009956:	6823      	ldr	r3, [r4, #0]
 8009958:	055a      	lsls	r2, r3, #21
 800995a:	d407      	bmi.n	800996c <_printf_float+0x1f8>
 800995c:	6923      	ldr	r3, [r4, #16]
 800995e:	4642      	mov	r2, r8
 8009960:	4631      	mov	r1, r6
 8009962:	4628      	mov	r0, r5
 8009964:	47b8      	blx	r7
 8009966:	3001      	adds	r0, #1
 8009968:	d12c      	bne.n	80099c4 <_printf_float+0x250>
 800996a:	e764      	b.n	8009836 <_printf_float+0xc2>
 800996c:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8009970:	f240 80e0 	bls.w	8009b34 <_printf_float+0x3c0>
 8009974:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8009978:	2200      	movs	r2, #0
 800997a:	2300      	movs	r3, #0
 800997c:	f7f7 f8cc 	bl	8000b18 <__aeabi_dcmpeq>
 8009980:	2800      	cmp	r0, #0
 8009982:	d034      	beq.n	80099ee <_printf_float+0x27a>
 8009984:	4a37      	ldr	r2, [pc, #220]	; (8009a64 <_printf_float+0x2f0>)
 8009986:	2301      	movs	r3, #1
 8009988:	4631      	mov	r1, r6
 800998a:	4628      	mov	r0, r5
 800998c:	47b8      	blx	r7
 800998e:	3001      	adds	r0, #1
 8009990:	f43f af51 	beq.w	8009836 <_printf_float+0xc2>
 8009994:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009998:	429a      	cmp	r2, r3
 800999a:	db02      	blt.n	80099a2 <_printf_float+0x22e>
 800999c:	6823      	ldr	r3, [r4, #0]
 800999e:	07d8      	lsls	r0, r3, #31
 80099a0:	d510      	bpl.n	80099c4 <_printf_float+0x250>
 80099a2:	ee18 3a10 	vmov	r3, s16
 80099a6:	4652      	mov	r2, sl
 80099a8:	4631      	mov	r1, r6
 80099aa:	4628      	mov	r0, r5
 80099ac:	47b8      	blx	r7
 80099ae:	3001      	adds	r0, #1
 80099b0:	f43f af41 	beq.w	8009836 <_printf_float+0xc2>
 80099b4:	f04f 0800 	mov.w	r8, #0
 80099b8:	f104 091a 	add.w	r9, r4, #26
 80099bc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80099be:	3b01      	subs	r3, #1
 80099c0:	4543      	cmp	r3, r8
 80099c2:	dc09      	bgt.n	80099d8 <_printf_float+0x264>
 80099c4:	6823      	ldr	r3, [r4, #0]
 80099c6:	079b      	lsls	r3, r3, #30
 80099c8:	f100 8105 	bmi.w	8009bd6 <_printf_float+0x462>
 80099cc:	68e0      	ldr	r0, [r4, #12]
 80099ce:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80099d0:	4298      	cmp	r0, r3
 80099d2:	bfb8      	it	lt
 80099d4:	4618      	movlt	r0, r3
 80099d6:	e730      	b.n	800983a <_printf_float+0xc6>
 80099d8:	2301      	movs	r3, #1
 80099da:	464a      	mov	r2, r9
 80099dc:	4631      	mov	r1, r6
 80099de:	4628      	mov	r0, r5
 80099e0:	47b8      	blx	r7
 80099e2:	3001      	adds	r0, #1
 80099e4:	f43f af27 	beq.w	8009836 <_printf_float+0xc2>
 80099e8:	f108 0801 	add.w	r8, r8, #1
 80099ec:	e7e6      	b.n	80099bc <_printf_float+0x248>
 80099ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80099f0:	2b00      	cmp	r3, #0
 80099f2:	dc39      	bgt.n	8009a68 <_printf_float+0x2f4>
 80099f4:	4a1b      	ldr	r2, [pc, #108]	; (8009a64 <_printf_float+0x2f0>)
 80099f6:	2301      	movs	r3, #1
 80099f8:	4631      	mov	r1, r6
 80099fa:	4628      	mov	r0, r5
 80099fc:	47b8      	blx	r7
 80099fe:	3001      	adds	r0, #1
 8009a00:	f43f af19 	beq.w	8009836 <_printf_float+0xc2>
 8009a04:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009a08:	4313      	orrs	r3, r2
 8009a0a:	d102      	bne.n	8009a12 <_printf_float+0x29e>
 8009a0c:	6823      	ldr	r3, [r4, #0]
 8009a0e:	07d9      	lsls	r1, r3, #31
 8009a10:	d5d8      	bpl.n	80099c4 <_printf_float+0x250>
 8009a12:	ee18 3a10 	vmov	r3, s16
 8009a16:	4652      	mov	r2, sl
 8009a18:	4631      	mov	r1, r6
 8009a1a:	4628      	mov	r0, r5
 8009a1c:	47b8      	blx	r7
 8009a1e:	3001      	adds	r0, #1
 8009a20:	f43f af09 	beq.w	8009836 <_printf_float+0xc2>
 8009a24:	f04f 0900 	mov.w	r9, #0
 8009a28:	f104 0a1a 	add.w	sl, r4, #26
 8009a2c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009a2e:	425b      	negs	r3, r3
 8009a30:	454b      	cmp	r3, r9
 8009a32:	dc01      	bgt.n	8009a38 <_printf_float+0x2c4>
 8009a34:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009a36:	e792      	b.n	800995e <_printf_float+0x1ea>
 8009a38:	2301      	movs	r3, #1
 8009a3a:	4652      	mov	r2, sl
 8009a3c:	4631      	mov	r1, r6
 8009a3e:	4628      	mov	r0, r5
 8009a40:	47b8      	blx	r7
 8009a42:	3001      	adds	r0, #1
 8009a44:	f43f aef7 	beq.w	8009836 <_printf_float+0xc2>
 8009a48:	f109 0901 	add.w	r9, r9, #1
 8009a4c:	e7ee      	b.n	8009a2c <_printf_float+0x2b8>
 8009a4e:	bf00      	nop
 8009a50:	7fefffff 	.word	0x7fefffff
 8009a54:	0800c4a8 	.word	0x0800c4a8
 8009a58:	0800c4ac 	.word	0x0800c4ac
 8009a5c:	0800c4b4 	.word	0x0800c4b4
 8009a60:	0800c4b0 	.word	0x0800c4b0
 8009a64:	0800c4b8 	.word	0x0800c4b8
 8009a68:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009a6a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009a6c:	429a      	cmp	r2, r3
 8009a6e:	bfa8      	it	ge
 8009a70:	461a      	movge	r2, r3
 8009a72:	2a00      	cmp	r2, #0
 8009a74:	4691      	mov	r9, r2
 8009a76:	dc37      	bgt.n	8009ae8 <_printf_float+0x374>
 8009a78:	f04f 0b00 	mov.w	fp, #0
 8009a7c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009a80:	f104 021a 	add.w	r2, r4, #26
 8009a84:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009a86:	9305      	str	r3, [sp, #20]
 8009a88:	eba3 0309 	sub.w	r3, r3, r9
 8009a8c:	455b      	cmp	r3, fp
 8009a8e:	dc33      	bgt.n	8009af8 <_printf_float+0x384>
 8009a90:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009a94:	429a      	cmp	r2, r3
 8009a96:	db3b      	blt.n	8009b10 <_printf_float+0x39c>
 8009a98:	6823      	ldr	r3, [r4, #0]
 8009a9a:	07da      	lsls	r2, r3, #31
 8009a9c:	d438      	bmi.n	8009b10 <_printf_float+0x39c>
 8009a9e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009aa0:	9a05      	ldr	r2, [sp, #20]
 8009aa2:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009aa4:	1a9a      	subs	r2, r3, r2
 8009aa6:	eba3 0901 	sub.w	r9, r3, r1
 8009aaa:	4591      	cmp	r9, r2
 8009aac:	bfa8      	it	ge
 8009aae:	4691      	movge	r9, r2
 8009ab0:	f1b9 0f00 	cmp.w	r9, #0
 8009ab4:	dc35      	bgt.n	8009b22 <_printf_float+0x3ae>
 8009ab6:	f04f 0800 	mov.w	r8, #0
 8009aba:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009abe:	f104 0a1a 	add.w	sl, r4, #26
 8009ac2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009ac6:	1a9b      	subs	r3, r3, r2
 8009ac8:	eba3 0309 	sub.w	r3, r3, r9
 8009acc:	4543      	cmp	r3, r8
 8009ace:	f77f af79 	ble.w	80099c4 <_printf_float+0x250>
 8009ad2:	2301      	movs	r3, #1
 8009ad4:	4652      	mov	r2, sl
 8009ad6:	4631      	mov	r1, r6
 8009ad8:	4628      	mov	r0, r5
 8009ada:	47b8      	blx	r7
 8009adc:	3001      	adds	r0, #1
 8009ade:	f43f aeaa 	beq.w	8009836 <_printf_float+0xc2>
 8009ae2:	f108 0801 	add.w	r8, r8, #1
 8009ae6:	e7ec      	b.n	8009ac2 <_printf_float+0x34e>
 8009ae8:	4613      	mov	r3, r2
 8009aea:	4631      	mov	r1, r6
 8009aec:	4642      	mov	r2, r8
 8009aee:	4628      	mov	r0, r5
 8009af0:	47b8      	blx	r7
 8009af2:	3001      	adds	r0, #1
 8009af4:	d1c0      	bne.n	8009a78 <_printf_float+0x304>
 8009af6:	e69e      	b.n	8009836 <_printf_float+0xc2>
 8009af8:	2301      	movs	r3, #1
 8009afa:	4631      	mov	r1, r6
 8009afc:	4628      	mov	r0, r5
 8009afe:	9205      	str	r2, [sp, #20]
 8009b00:	47b8      	blx	r7
 8009b02:	3001      	adds	r0, #1
 8009b04:	f43f ae97 	beq.w	8009836 <_printf_float+0xc2>
 8009b08:	9a05      	ldr	r2, [sp, #20]
 8009b0a:	f10b 0b01 	add.w	fp, fp, #1
 8009b0e:	e7b9      	b.n	8009a84 <_printf_float+0x310>
 8009b10:	ee18 3a10 	vmov	r3, s16
 8009b14:	4652      	mov	r2, sl
 8009b16:	4631      	mov	r1, r6
 8009b18:	4628      	mov	r0, r5
 8009b1a:	47b8      	blx	r7
 8009b1c:	3001      	adds	r0, #1
 8009b1e:	d1be      	bne.n	8009a9e <_printf_float+0x32a>
 8009b20:	e689      	b.n	8009836 <_printf_float+0xc2>
 8009b22:	9a05      	ldr	r2, [sp, #20]
 8009b24:	464b      	mov	r3, r9
 8009b26:	4442      	add	r2, r8
 8009b28:	4631      	mov	r1, r6
 8009b2a:	4628      	mov	r0, r5
 8009b2c:	47b8      	blx	r7
 8009b2e:	3001      	adds	r0, #1
 8009b30:	d1c1      	bne.n	8009ab6 <_printf_float+0x342>
 8009b32:	e680      	b.n	8009836 <_printf_float+0xc2>
 8009b34:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009b36:	2a01      	cmp	r2, #1
 8009b38:	dc01      	bgt.n	8009b3e <_printf_float+0x3ca>
 8009b3a:	07db      	lsls	r3, r3, #31
 8009b3c:	d538      	bpl.n	8009bb0 <_printf_float+0x43c>
 8009b3e:	2301      	movs	r3, #1
 8009b40:	4642      	mov	r2, r8
 8009b42:	4631      	mov	r1, r6
 8009b44:	4628      	mov	r0, r5
 8009b46:	47b8      	blx	r7
 8009b48:	3001      	adds	r0, #1
 8009b4a:	f43f ae74 	beq.w	8009836 <_printf_float+0xc2>
 8009b4e:	ee18 3a10 	vmov	r3, s16
 8009b52:	4652      	mov	r2, sl
 8009b54:	4631      	mov	r1, r6
 8009b56:	4628      	mov	r0, r5
 8009b58:	47b8      	blx	r7
 8009b5a:	3001      	adds	r0, #1
 8009b5c:	f43f ae6b 	beq.w	8009836 <_printf_float+0xc2>
 8009b60:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8009b64:	2200      	movs	r2, #0
 8009b66:	2300      	movs	r3, #0
 8009b68:	f7f6 ffd6 	bl	8000b18 <__aeabi_dcmpeq>
 8009b6c:	b9d8      	cbnz	r0, 8009ba6 <_printf_float+0x432>
 8009b6e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009b70:	f108 0201 	add.w	r2, r8, #1
 8009b74:	3b01      	subs	r3, #1
 8009b76:	4631      	mov	r1, r6
 8009b78:	4628      	mov	r0, r5
 8009b7a:	47b8      	blx	r7
 8009b7c:	3001      	adds	r0, #1
 8009b7e:	d10e      	bne.n	8009b9e <_printf_float+0x42a>
 8009b80:	e659      	b.n	8009836 <_printf_float+0xc2>
 8009b82:	2301      	movs	r3, #1
 8009b84:	4652      	mov	r2, sl
 8009b86:	4631      	mov	r1, r6
 8009b88:	4628      	mov	r0, r5
 8009b8a:	47b8      	blx	r7
 8009b8c:	3001      	adds	r0, #1
 8009b8e:	f43f ae52 	beq.w	8009836 <_printf_float+0xc2>
 8009b92:	f108 0801 	add.w	r8, r8, #1
 8009b96:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009b98:	3b01      	subs	r3, #1
 8009b9a:	4543      	cmp	r3, r8
 8009b9c:	dcf1      	bgt.n	8009b82 <_printf_float+0x40e>
 8009b9e:	464b      	mov	r3, r9
 8009ba0:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8009ba4:	e6dc      	b.n	8009960 <_printf_float+0x1ec>
 8009ba6:	f04f 0800 	mov.w	r8, #0
 8009baa:	f104 0a1a 	add.w	sl, r4, #26
 8009bae:	e7f2      	b.n	8009b96 <_printf_float+0x422>
 8009bb0:	2301      	movs	r3, #1
 8009bb2:	4642      	mov	r2, r8
 8009bb4:	e7df      	b.n	8009b76 <_printf_float+0x402>
 8009bb6:	2301      	movs	r3, #1
 8009bb8:	464a      	mov	r2, r9
 8009bba:	4631      	mov	r1, r6
 8009bbc:	4628      	mov	r0, r5
 8009bbe:	47b8      	blx	r7
 8009bc0:	3001      	adds	r0, #1
 8009bc2:	f43f ae38 	beq.w	8009836 <_printf_float+0xc2>
 8009bc6:	f108 0801 	add.w	r8, r8, #1
 8009bca:	68e3      	ldr	r3, [r4, #12]
 8009bcc:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009bce:	1a5b      	subs	r3, r3, r1
 8009bd0:	4543      	cmp	r3, r8
 8009bd2:	dcf0      	bgt.n	8009bb6 <_printf_float+0x442>
 8009bd4:	e6fa      	b.n	80099cc <_printf_float+0x258>
 8009bd6:	f04f 0800 	mov.w	r8, #0
 8009bda:	f104 0919 	add.w	r9, r4, #25
 8009bde:	e7f4      	b.n	8009bca <_printf_float+0x456>

08009be0 <_printf_common>:
 8009be0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009be4:	4616      	mov	r6, r2
 8009be6:	4699      	mov	r9, r3
 8009be8:	688a      	ldr	r2, [r1, #8]
 8009bea:	690b      	ldr	r3, [r1, #16]
 8009bec:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009bf0:	4293      	cmp	r3, r2
 8009bf2:	bfb8      	it	lt
 8009bf4:	4613      	movlt	r3, r2
 8009bf6:	6033      	str	r3, [r6, #0]
 8009bf8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009bfc:	4607      	mov	r7, r0
 8009bfe:	460c      	mov	r4, r1
 8009c00:	b10a      	cbz	r2, 8009c06 <_printf_common+0x26>
 8009c02:	3301      	adds	r3, #1
 8009c04:	6033      	str	r3, [r6, #0]
 8009c06:	6823      	ldr	r3, [r4, #0]
 8009c08:	0699      	lsls	r1, r3, #26
 8009c0a:	bf42      	ittt	mi
 8009c0c:	6833      	ldrmi	r3, [r6, #0]
 8009c0e:	3302      	addmi	r3, #2
 8009c10:	6033      	strmi	r3, [r6, #0]
 8009c12:	6825      	ldr	r5, [r4, #0]
 8009c14:	f015 0506 	ands.w	r5, r5, #6
 8009c18:	d106      	bne.n	8009c28 <_printf_common+0x48>
 8009c1a:	f104 0a19 	add.w	sl, r4, #25
 8009c1e:	68e3      	ldr	r3, [r4, #12]
 8009c20:	6832      	ldr	r2, [r6, #0]
 8009c22:	1a9b      	subs	r3, r3, r2
 8009c24:	42ab      	cmp	r3, r5
 8009c26:	dc26      	bgt.n	8009c76 <_printf_common+0x96>
 8009c28:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009c2c:	1e13      	subs	r3, r2, #0
 8009c2e:	6822      	ldr	r2, [r4, #0]
 8009c30:	bf18      	it	ne
 8009c32:	2301      	movne	r3, #1
 8009c34:	0692      	lsls	r2, r2, #26
 8009c36:	d42b      	bmi.n	8009c90 <_printf_common+0xb0>
 8009c38:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009c3c:	4649      	mov	r1, r9
 8009c3e:	4638      	mov	r0, r7
 8009c40:	47c0      	blx	r8
 8009c42:	3001      	adds	r0, #1
 8009c44:	d01e      	beq.n	8009c84 <_printf_common+0xa4>
 8009c46:	6823      	ldr	r3, [r4, #0]
 8009c48:	68e5      	ldr	r5, [r4, #12]
 8009c4a:	6832      	ldr	r2, [r6, #0]
 8009c4c:	f003 0306 	and.w	r3, r3, #6
 8009c50:	2b04      	cmp	r3, #4
 8009c52:	bf08      	it	eq
 8009c54:	1aad      	subeq	r5, r5, r2
 8009c56:	68a3      	ldr	r3, [r4, #8]
 8009c58:	6922      	ldr	r2, [r4, #16]
 8009c5a:	bf0c      	ite	eq
 8009c5c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009c60:	2500      	movne	r5, #0
 8009c62:	4293      	cmp	r3, r2
 8009c64:	bfc4      	itt	gt
 8009c66:	1a9b      	subgt	r3, r3, r2
 8009c68:	18ed      	addgt	r5, r5, r3
 8009c6a:	2600      	movs	r6, #0
 8009c6c:	341a      	adds	r4, #26
 8009c6e:	42b5      	cmp	r5, r6
 8009c70:	d11a      	bne.n	8009ca8 <_printf_common+0xc8>
 8009c72:	2000      	movs	r0, #0
 8009c74:	e008      	b.n	8009c88 <_printf_common+0xa8>
 8009c76:	2301      	movs	r3, #1
 8009c78:	4652      	mov	r2, sl
 8009c7a:	4649      	mov	r1, r9
 8009c7c:	4638      	mov	r0, r7
 8009c7e:	47c0      	blx	r8
 8009c80:	3001      	adds	r0, #1
 8009c82:	d103      	bne.n	8009c8c <_printf_common+0xac>
 8009c84:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009c88:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009c8c:	3501      	adds	r5, #1
 8009c8e:	e7c6      	b.n	8009c1e <_printf_common+0x3e>
 8009c90:	18e1      	adds	r1, r4, r3
 8009c92:	1c5a      	adds	r2, r3, #1
 8009c94:	2030      	movs	r0, #48	; 0x30
 8009c96:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009c9a:	4422      	add	r2, r4
 8009c9c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009ca0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009ca4:	3302      	adds	r3, #2
 8009ca6:	e7c7      	b.n	8009c38 <_printf_common+0x58>
 8009ca8:	2301      	movs	r3, #1
 8009caa:	4622      	mov	r2, r4
 8009cac:	4649      	mov	r1, r9
 8009cae:	4638      	mov	r0, r7
 8009cb0:	47c0      	blx	r8
 8009cb2:	3001      	adds	r0, #1
 8009cb4:	d0e6      	beq.n	8009c84 <_printf_common+0xa4>
 8009cb6:	3601      	adds	r6, #1
 8009cb8:	e7d9      	b.n	8009c6e <_printf_common+0x8e>
	...

08009cbc <_printf_i>:
 8009cbc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009cc0:	7e0f      	ldrb	r7, [r1, #24]
 8009cc2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8009cc4:	2f78      	cmp	r7, #120	; 0x78
 8009cc6:	4691      	mov	r9, r2
 8009cc8:	4680      	mov	r8, r0
 8009cca:	460c      	mov	r4, r1
 8009ccc:	469a      	mov	sl, r3
 8009cce:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8009cd2:	d807      	bhi.n	8009ce4 <_printf_i+0x28>
 8009cd4:	2f62      	cmp	r7, #98	; 0x62
 8009cd6:	d80a      	bhi.n	8009cee <_printf_i+0x32>
 8009cd8:	2f00      	cmp	r7, #0
 8009cda:	f000 80d8 	beq.w	8009e8e <_printf_i+0x1d2>
 8009cde:	2f58      	cmp	r7, #88	; 0x58
 8009ce0:	f000 80a3 	beq.w	8009e2a <_printf_i+0x16e>
 8009ce4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009ce8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009cec:	e03a      	b.n	8009d64 <_printf_i+0xa8>
 8009cee:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8009cf2:	2b15      	cmp	r3, #21
 8009cf4:	d8f6      	bhi.n	8009ce4 <_printf_i+0x28>
 8009cf6:	a101      	add	r1, pc, #4	; (adr r1, 8009cfc <_printf_i+0x40>)
 8009cf8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009cfc:	08009d55 	.word	0x08009d55
 8009d00:	08009d69 	.word	0x08009d69
 8009d04:	08009ce5 	.word	0x08009ce5
 8009d08:	08009ce5 	.word	0x08009ce5
 8009d0c:	08009ce5 	.word	0x08009ce5
 8009d10:	08009ce5 	.word	0x08009ce5
 8009d14:	08009d69 	.word	0x08009d69
 8009d18:	08009ce5 	.word	0x08009ce5
 8009d1c:	08009ce5 	.word	0x08009ce5
 8009d20:	08009ce5 	.word	0x08009ce5
 8009d24:	08009ce5 	.word	0x08009ce5
 8009d28:	08009e75 	.word	0x08009e75
 8009d2c:	08009d99 	.word	0x08009d99
 8009d30:	08009e57 	.word	0x08009e57
 8009d34:	08009ce5 	.word	0x08009ce5
 8009d38:	08009ce5 	.word	0x08009ce5
 8009d3c:	08009e97 	.word	0x08009e97
 8009d40:	08009ce5 	.word	0x08009ce5
 8009d44:	08009d99 	.word	0x08009d99
 8009d48:	08009ce5 	.word	0x08009ce5
 8009d4c:	08009ce5 	.word	0x08009ce5
 8009d50:	08009e5f 	.word	0x08009e5f
 8009d54:	682b      	ldr	r3, [r5, #0]
 8009d56:	1d1a      	adds	r2, r3, #4
 8009d58:	681b      	ldr	r3, [r3, #0]
 8009d5a:	602a      	str	r2, [r5, #0]
 8009d5c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009d60:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009d64:	2301      	movs	r3, #1
 8009d66:	e0a3      	b.n	8009eb0 <_printf_i+0x1f4>
 8009d68:	6820      	ldr	r0, [r4, #0]
 8009d6a:	6829      	ldr	r1, [r5, #0]
 8009d6c:	0606      	lsls	r6, r0, #24
 8009d6e:	f101 0304 	add.w	r3, r1, #4
 8009d72:	d50a      	bpl.n	8009d8a <_printf_i+0xce>
 8009d74:	680e      	ldr	r6, [r1, #0]
 8009d76:	602b      	str	r3, [r5, #0]
 8009d78:	2e00      	cmp	r6, #0
 8009d7a:	da03      	bge.n	8009d84 <_printf_i+0xc8>
 8009d7c:	232d      	movs	r3, #45	; 0x2d
 8009d7e:	4276      	negs	r6, r6
 8009d80:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009d84:	485e      	ldr	r0, [pc, #376]	; (8009f00 <_printf_i+0x244>)
 8009d86:	230a      	movs	r3, #10
 8009d88:	e019      	b.n	8009dbe <_printf_i+0x102>
 8009d8a:	680e      	ldr	r6, [r1, #0]
 8009d8c:	602b      	str	r3, [r5, #0]
 8009d8e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8009d92:	bf18      	it	ne
 8009d94:	b236      	sxthne	r6, r6
 8009d96:	e7ef      	b.n	8009d78 <_printf_i+0xbc>
 8009d98:	682b      	ldr	r3, [r5, #0]
 8009d9a:	6820      	ldr	r0, [r4, #0]
 8009d9c:	1d19      	adds	r1, r3, #4
 8009d9e:	6029      	str	r1, [r5, #0]
 8009da0:	0601      	lsls	r1, r0, #24
 8009da2:	d501      	bpl.n	8009da8 <_printf_i+0xec>
 8009da4:	681e      	ldr	r6, [r3, #0]
 8009da6:	e002      	b.n	8009dae <_printf_i+0xf2>
 8009da8:	0646      	lsls	r6, r0, #25
 8009daa:	d5fb      	bpl.n	8009da4 <_printf_i+0xe8>
 8009dac:	881e      	ldrh	r6, [r3, #0]
 8009dae:	4854      	ldr	r0, [pc, #336]	; (8009f00 <_printf_i+0x244>)
 8009db0:	2f6f      	cmp	r7, #111	; 0x6f
 8009db2:	bf0c      	ite	eq
 8009db4:	2308      	moveq	r3, #8
 8009db6:	230a      	movne	r3, #10
 8009db8:	2100      	movs	r1, #0
 8009dba:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009dbe:	6865      	ldr	r5, [r4, #4]
 8009dc0:	60a5      	str	r5, [r4, #8]
 8009dc2:	2d00      	cmp	r5, #0
 8009dc4:	bfa2      	ittt	ge
 8009dc6:	6821      	ldrge	r1, [r4, #0]
 8009dc8:	f021 0104 	bicge.w	r1, r1, #4
 8009dcc:	6021      	strge	r1, [r4, #0]
 8009dce:	b90e      	cbnz	r6, 8009dd4 <_printf_i+0x118>
 8009dd0:	2d00      	cmp	r5, #0
 8009dd2:	d04d      	beq.n	8009e70 <_printf_i+0x1b4>
 8009dd4:	4615      	mov	r5, r2
 8009dd6:	fbb6 f1f3 	udiv	r1, r6, r3
 8009dda:	fb03 6711 	mls	r7, r3, r1, r6
 8009dde:	5dc7      	ldrb	r7, [r0, r7]
 8009de0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8009de4:	4637      	mov	r7, r6
 8009de6:	42bb      	cmp	r3, r7
 8009de8:	460e      	mov	r6, r1
 8009dea:	d9f4      	bls.n	8009dd6 <_printf_i+0x11a>
 8009dec:	2b08      	cmp	r3, #8
 8009dee:	d10b      	bne.n	8009e08 <_printf_i+0x14c>
 8009df0:	6823      	ldr	r3, [r4, #0]
 8009df2:	07de      	lsls	r6, r3, #31
 8009df4:	d508      	bpl.n	8009e08 <_printf_i+0x14c>
 8009df6:	6923      	ldr	r3, [r4, #16]
 8009df8:	6861      	ldr	r1, [r4, #4]
 8009dfa:	4299      	cmp	r1, r3
 8009dfc:	bfde      	ittt	le
 8009dfe:	2330      	movle	r3, #48	; 0x30
 8009e00:	f805 3c01 	strble.w	r3, [r5, #-1]
 8009e04:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8009e08:	1b52      	subs	r2, r2, r5
 8009e0a:	6122      	str	r2, [r4, #16]
 8009e0c:	f8cd a000 	str.w	sl, [sp]
 8009e10:	464b      	mov	r3, r9
 8009e12:	aa03      	add	r2, sp, #12
 8009e14:	4621      	mov	r1, r4
 8009e16:	4640      	mov	r0, r8
 8009e18:	f7ff fee2 	bl	8009be0 <_printf_common>
 8009e1c:	3001      	adds	r0, #1
 8009e1e:	d14c      	bne.n	8009eba <_printf_i+0x1fe>
 8009e20:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009e24:	b004      	add	sp, #16
 8009e26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009e2a:	4835      	ldr	r0, [pc, #212]	; (8009f00 <_printf_i+0x244>)
 8009e2c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8009e30:	6829      	ldr	r1, [r5, #0]
 8009e32:	6823      	ldr	r3, [r4, #0]
 8009e34:	f851 6b04 	ldr.w	r6, [r1], #4
 8009e38:	6029      	str	r1, [r5, #0]
 8009e3a:	061d      	lsls	r5, r3, #24
 8009e3c:	d514      	bpl.n	8009e68 <_printf_i+0x1ac>
 8009e3e:	07df      	lsls	r7, r3, #31
 8009e40:	bf44      	itt	mi
 8009e42:	f043 0320 	orrmi.w	r3, r3, #32
 8009e46:	6023      	strmi	r3, [r4, #0]
 8009e48:	b91e      	cbnz	r6, 8009e52 <_printf_i+0x196>
 8009e4a:	6823      	ldr	r3, [r4, #0]
 8009e4c:	f023 0320 	bic.w	r3, r3, #32
 8009e50:	6023      	str	r3, [r4, #0]
 8009e52:	2310      	movs	r3, #16
 8009e54:	e7b0      	b.n	8009db8 <_printf_i+0xfc>
 8009e56:	6823      	ldr	r3, [r4, #0]
 8009e58:	f043 0320 	orr.w	r3, r3, #32
 8009e5c:	6023      	str	r3, [r4, #0]
 8009e5e:	2378      	movs	r3, #120	; 0x78
 8009e60:	4828      	ldr	r0, [pc, #160]	; (8009f04 <_printf_i+0x248>)
 8009e62:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8009e66:	e7e3      	b.n	8009e30 <_printf_i+0x174>
 8009e68:	0659      	lsls	r1, r3, #25
 8009e6a:	bf48      	it	mi
 8009e6c:	b2b6      	uxthmi	r6, r6
 8009e6e:	e7e6      	b.n	8009e3e <_printf_i+0x182>
 8009e70:	4615      	mov	r5, r2
 8009e72:	e7bb      	b.n	8009dec <_printf_i+0x130>
 8009e74:	682b      	ldr	r3, [r5, #0]
 8009e76:	6826      	ldr	r6, [r4, #0]
 8009e78:	6961      	ldr	r1, [r4, #20]
 8009e7a:	1d18      	adds	r0, r3, #4
 8009e7c:	6028      	str	r0, [r5, #0]
 8009e7e:	0635      	lsls	r5, r6, #24
 8009e80:	681b      	ldr	r3, [r3, #0]
 8009e82:	d501      	bpl.n	8009e88 <_printf_i+0x1cc>
 8009e84:	6019      	str	r1, [r3, #0]
 8009e86:	e002      	b.n	8009e8e <_printf_i+0x1d2>
 8009e88:	0670      	lsls	r0, r6, #25
 8009e8a:	d5fb      	bpl.n	8009e84 <_printf_i+0x1c8>
 8009e8c:	8019      	strh	r1, [r3, #0]
 8009e8e:	2300      	movs	r3, #0
 8009e90:	6123      	str	r3, [r4, #16]
 8009e92:	4615      	mov	r5, r2
 8009e94:	e7ba      	b.n	8009e0c <_printf_i+0x150>
 8009e96:	682b      	ldr	r3, [r5, #0]
 8009e98:	1d1a      	adds	r2, r3, #4
 8009e9a:	602a      	str	r2, [r5, #0]
 8009e9c:	681d      	ldr	r5, [r3, #0]
 8009e9e:	6862      	ldr	r2, [r4, #4]
 8009ea0:	2100      	movs	r1, #0
 8009ea2:	4628      	mov	r0, r5
 8009ea4:	f7f6 f9c4 	bl	8000230 <memchr>
 8009ea8:	b108      	cbz	r0, 8009eae <_printf_i+0x1f2>
 8009eaa:	1b40      	subs	r0, r0, r5
 8009eac:	6060      	str	r0, [r4, #4]
 8009eae:	6863      	ldr	r3, [r4, #4]
 8009eb0:	6123      	str	r3, [r4, #16]
 8009eb2:	2300      	movs	r3, #0
 8009eb4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009eb8:	e7a8      	b.n	8009e0c <_printf_i+0x150>
 8009eba:	6923      	ldr	r3, [r4, #16]
 8009ebc:	462a      	mov	r2, r5
 8009ebe:	4649      	mov	r1, r9
 8009ec0:	4640      	mov	r0, r8
 8009ec2:	47d0      	blx	sl
 8009ec4:	3001      	adds	r0, #1
 8009ec6:	d0ab      	beq.n	8009e20 <_printf_i+0x164>
 8009ec8:	6823      	ldr	r3, [r4, #0]
 8009eca:	079b      	lsls	r3, r3, #30
 8009ecc:	d413      	bmi.n	8009ef6 <_printf_i+0x23a>
 8009ece:	68e0      	ldr	r0, [r4, #12]
 8009ed0:	9b03      	ldr	r3, [sp, #12]
 8009ed2:	4298      	cmp	r0, r3
 8009ed4:	bfb8      	it	lt
 8009ed6:	4618      	movlt	r0, r3
 8009ed8:	e7a4      	b.n	8009e24 <_printf_i+0x168>
 8009eda:	2301      	movs	r3, #1
 8009edc:	4632      	mov	r2, r6
 8009ede:	4649      	mov	r1, r9
 8009ee0:	4640      	mov	r0, r8
 8009ee2:	47d0      	blx	sl
 8009ee4:	3001      	adds	r0, #1
 8009ee6:	d09b      	beq.n	8009e20 <_printf_i+0x164>
 8009ee8:	3501      	adds	r5, #1
 8009eea:	68e3      	ldr	r3, [r4, #12]
 8009eec:	9903      	ldr	r1, [sp, #12]
 8009eee:	1a5b      	subs	r3, r3, r1
 8009ef0:	42ab      	cmp	r3, r5
 8009ef2:	dcf2      	bgt.n	8009eda <_printf_i+0x21e>
 8009ef4:	e7eb      	b.n	8009ece <_printf_i+0x212>
 8009ef6:	2500      	movs	r5, #0
 8009ef8:	f104 0619 	add.w	r6, r4, #25
 8009efc:	e7f5      	b.n	8009eea <_printf_i+0x22e>
 8009efe:	bf00      	nop
 8009f00:	0800c4ba 	.word	0x0800c4ba
 8009f04:	0800c4cb 	.word	0x0800c4cb

08009f08 <siprintf>:
 8009f08:	b40e      	push	{r1, r2, r3}
 8009f0a:	b500      	push	{lr}
 8009f0c:	b09c      	sub	sp, #112	; 0x70
 8009f0e:	ab1d      	add	r3, sp, #116	; 0x74
 8009f10:	9002      	str	r0, [sp, #8]
 8009f12:	9006      	str	r0, [sp, #24]
 8009f14:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8009f18:	4809      	ldr	r0, [pc, #36]	; (8009f40 <siprintf+0x38>)
 8009f1a:	9107      	str	r1, [sp, #28]
 8009f1c:	9104      	str	r1, [sp, #16]
 8009f1e:	4909      	ldr	r1, [pc, #36]	; (8009f44 <siprintf+0x3c>)
 8009f20:	f853 2b04 	ldr.w	r2, [r3], #4
 8009f24:	9105      	str	r1, [sp, #20]
 8009f26:	6800      	ldr	r0, [r0, #0]
 8009f28:	9301      	str	r3, [sp, #4]
 8009f2a:	a902      	add	r1, sp, #8
 8009f2c:	f001 fb76 	bl	800b61c <_svfiprintf_r>
 8009f30:	9b02      	ldr	r3, [sp, #8]
 8009f32:	2200      	movs	r2, #0
 8009f34:	701a      	strb	r2, [r3, #0]
 8009f36:	b01c      	add	sp, #112	; 0x70
 8009f38:	f85d eb04 	ldr.w	lr, [sp], #4
 8009f3c:	b003      	add	sp, #12
 8009f3e:	4770      	bx	lr
 8009f40:	2000000c 	.word	0x2000000c
 8009f44:	ffff0208 	.word	0xffff0208

08009f48 <quorem>:
 8009f48:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009f4c:	6903      	ldr	r3, [r0, #16]
 8009f4e:	690c      	ldr	r4, [r1, #16]
 8009f50:	42a3      	cmp	r3, r4
 8009f52:	4607      	mov	r7, r0
 8009f54:	f2c0 8081 	blt.w	800a05a <quorem+0x112>
 8009f58:	3c01      	subs	r4, #1
 8009f5a:	f101 0814 	add.w	r8, r1, #20
 8009f5e:	f100 0514 	add.w	r5, r0, #20
 8009f62:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009f66:	9301      	str	r3, [sp, #4]
 8009f68:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8009f6c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009f70:	3301      	adds	r3, #1
 8009f72:	429a      	cmp	r2, r3
 8009f74:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8009f78:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8009f7c:	fbb2 f6f3 	udiv	r6, r2, r3
 8009f80:	d331      	bcc.n	8009fe6 <quorem+0x9e>
 8009f82:	f04f 0e00 	mov.w	lr, #0
 8009f86:	4640      	mov	r0, r8
 8009f88:	46ac      	mov	ip, r5
 8009f8a:	46f2      	mov	sl, lr
 8009f8c:	f850 2b04 	ldr.w	r2, [r0], #4
 8009f90:	b293      	uxth	r3, r2
 8009f92:	fb06 e303 	mla	r3, r6, r3, lr
 8009f96:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8009f9a:	b29b      	uxth	r3, r3
 8009f9c:	ebaa 0303 	sub.w	r3, sl, r3
 8009fa0:	f8dc a000 	ldr.w	sl, [ip]
 8009fa4:	0c12      	lsrs	r2, r2, #16
 8009fa6:	fa13 f38a 	uxtah	r3, r3, sl
 8009faa:	fb06 e202 	mla	r2, r6, r2, lr
 8009fae:	9300      	str	r3, [sp, #0]
 8009fb0:	9b00      	ldr	r3, [sp, #0]
 8009fb2:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8009fb6:	b292      	uxth	r2, r2
 8009fb8:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8009fbc:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009fc0:	f8bd 3000 	ldrh.w	r3, [sp]
 8009fc4:	4581      	cmp	r9, r0
 8009fc6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009fca:	f84c 3b04 	str.w	r3, [ip], #4
 8009fce:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8009fd2:	d2db      	bcs.n	8009f8c <quorem+0x44>
 8009fd4:	f855 300b 	ldr.w	r3, [r5, fp]
 8009fd8:	b92b      	cbnz	r3, 8009fe6 <quorem+0x9e>
 8009fda:	9b01      	ldr	r3, [sp, #4]
 8009fdc:	3b04      	subs	r3, #4
 8009fde:	429d      	cmp	r5, r3
 8009fe0:	461a      	mov	r2, r3
 8009fe2:	d32e      	bcc.n	800a042 <quorem+0xfa>
 8009fe4:	613c      	str	r4, [r7, #16]
 8009fe6:	4638      	mov	r0, r7
 8009fe8:	f001 f8c4 	bl	800b174 <__mcmp>
 8009fec:	2800      	cmp	r0, #0
 8009fee:	db24      	blt.n	800a03a <quorem+0xf2>
 8009ff0:	3601      	adds	r6, #1
 8009ff2:	4628      	mov	r0, r5
 8009ff4:	f04f 0c00 	mov.w	ip, #0
 8009ff8:	f858 2b04 	ldr.w	r2, [r8], #4
 8009ffc:	f8d0 e000 	ldr.w	lr, [r0]
 800a000:	b293      	uxth	r3, r2
 800a002:	ebac 0303 	sub.w	r3, ip, r3
 800a006:	0c12      	lsrs	r2, r2, #16
 800a008:	fa13 f38e 	uxtah	r3, r3, lr
 800a00c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800a010:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a014:	b29b      	uxth	r3, r3
 800a016:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a01a:	45c1      	cmp	r9, r8
 800a01c:	f840 3b04 	str.w	r3, [r0], #4
 800a020:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800a024:	d2e8      	bcs.n	8009ff8 <quorem+0xb0>
 800a026:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a02a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a02e:	b922      	cbnz	r2, 800a03a <quorem+0xf2>
 800a030:	3b04      	subs	r3, #4
 800a032:	429d      	cmp	r5, r3
 800a034:	461a      	mov	r2, r3
 800a036:	d30a      	bcc.n	800a04e <quorem+0x106>
 800a038:	613c      	str	r4, [r7, #16]
 800a03a:	4630      	mov	r0, r6
 800a03c:	b003      	add	sp, #12
 800a03e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a042:	6812      	ldr	r2, [r2, #0]
 800a044:	3b04      	subs	r3, #4
 800a046:	2a00      	cmp	r2, #0
 800a048:	d1cc      	bne.n	8009fe4 <quorem+0x9c>
 800a04a:	3c01      	subs	r4, #1
 800a04c:	e7c7      	b.n	8009fde <quorem+0x96>
 800a04e:	6812      	ldr	r2, [r2, #0]
 800a050:	3b04      	subs	r3, #4
 800a052:	2a00      	cmp	r2, #0
 800a054:	d1f0      	bne.n	800a038 <quorem+0xf0>
 800a056:	3c01      	subs	r4, #1
 800a058:	e7eb      	b.n	800a032 <quorem+0xea>
 800a05a:	2000      	movs	r0, #0
 800a05c:	e7ee      	b.n	800a03c <quorem+0xf4>
	...

0800a060 <_dtoa_r>:
 800a060:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a064:	ed2d 8b04 	vpush	{d8-d9}
 800a068:	ec57 6b10 	vmov	r6, r7, d0
 800a06c:	b093      	sub	sp, #76	; 0x4c
 800a06e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800a070:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800a074:	9106      	str	r1, [sp, #24]
 800a076:	ee10 aa10 	vmov	sl, s0
 800a07a:	4604      	mov	r4, r0
 800a07c:	9209      	str	r2, [sp, #36]	; 0x24
 800a07e:	930c      	str	r3, [sp, #48]	; 0x30
 800a080:	46bb      	mov	fp, r7
 800a082:	b975      	cbnz	r5, 800a0a2 <_dtoa_r+0x42>
 800a084:	2010      	movs	r0, #16
 800a086:	f000 fddd 	bl	800ac44 <malloc>
 800a08a:	4602      	mov	r2, r0
 800a08c:	6260      	str	r0, [r4, #36]	; 0x24
 800a08e:	b920      	cbnz	r0, 800a09a <_dtoa_r+0x3a>
 800a090:	4ba7      	ldr	r3, [pc, #668]	; (800a330 <_dtoa_r+0x2d0>)
 800a092:	21ea      	movs	r1, #234	; 0xea
 800a094:	48a7      	ldr	r0, [pc, #668]	; (800a334 <_dtoa_r+0x2d4>)
 800a096:	f001 fbd1 	bl	800b83c <__assert_func>
 800a09a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800a09e:	6005      	str	r5, [r0, #0]
 800a0a0:	60c5      	str	r5, [r0, #12]
 800a0a2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a0a4:	6819      	ldr	r1, [r3, #0]
 800a0a6:	b151      	cbz	r1, 800a0be <_dtoa_r+0x5e>
 800a0a8:	685a      	ldr	r2, [r3, #4]
 800a0aa:	604a      	str	r2, [r1, #4]
 800a0ac:	2301      	movs	r3, #1
 800a0ae:	4093      	lsls	r3, r2
 800a0b0:	608b      	str	r3, [r1, #8]
 800a0b2:	4620      	mov	r0, r4
 800a0b4:	f000 fe1c 	bl	800acf0 <_Bfree>
 800a0b8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a0ba:	2200      	movs	r2, #0
 800a0bc:	601a      	str	r2, [r3, #0]
 800a0be:	1e3b      	subs	r3, r7, #0
 800a0c0:	bfaa      	itet	ge
 800a0c2:	2300      	movge	r3, #0
 800a0c4:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 800a0c8:	f8c8 3000 	strge.w	r3, [r8]
 800a0cc:	4b9a      	ldr	r3, [pc, #616]	; (800a338 <_dtoa_r+0x2d8>)
 800a0ce:	bfbc      	itt	lt
 800a0d0:	2201      	movlt	r2, #1
 800a0d2:	f8c8 2000 	strlt.w	r2, [r8]
 800a0d6:	ea33 030b 	bics.w	r3, r3, fp
 800a0da:	d11b      	bne.n	800a114 <_dtoa_r+0xb4>
 800a0dc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a0de:	f242 730f 	movw	r3, #9999	; 0x270f
 800a0e2:	6013      	str	r3, [r2, #0]
 800a0e4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800a0e8:	4333      	orrs	r3, r6
 800a0ea:	f000 8592 	beq.w	800ac12 <_dtoa_r+0xbb2>
 800a0ee:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a0f0:	b963      	cbnz	r3, 800a10c <_dtoa_r+0xac>
 800a0f2:	4b92      	ldr	r3, [pc, #584]	; (800a33c <_dtoa_r+0x2dc>)
 800a0f4:	e022      	b.n	800a13c <_dtoa_r+0xdc>
 800a0f6:	4b92      	ldr	r3, [pc, #584]	; (800a340 <_dtoa_r+0x2e0>)
 800a0f8:	9301      	str	r3, [sp, #4]
 800a0fa:	3308      	adds	r3, #8
 800a0fc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800a0fe:	6013      	str	r3, [r2, #0]
 800a100:	9801      	ldr	r0, [sp, #4]
 800a102:	b013      	add	sp, #76	; 0x4c
 800a104:	ecbd 8b04 	vpop	{d8-d9}
 800a108:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a10c:	4b8b      	ldr	r3, [pc, #556]	; (800a33c <_dtoa_r+0x2dc>)
 800a10e:	9301      	str	r3, [sp, #4]
 800a110:	3303      	adds	r3, #3
 800a112:	e7f3      	b.n	800a0fc <_dtoa_r+0x9c>
 800a114:	2200      	movs	r2, #0
 800a116:	2300      	movs	r3, #0
 800a118:	4650      	mov	r0, sl
 800a11a:	4659      	mov	r1, fp
 800a11c:	f7f6 fcfc 	bl	8000b18 <__aeabi_dcmpeq>
 800a120:	ec4b ab19 	vmov	d9, sl, fp
 800a124:	4680      	mov	r8, r0
 800a126:	b158      	cbz	r0, 800a140 <_dtoa_r+0xe0>
 800a128:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a12a:	2301      	movs	r3, #1
 800a12c:	6013      	str	r3, [r2, #0]
 800a12e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a130:	2b00      	cmp	r3, #0
 800a132:	f000 856b 	beq.w	800ac0c <_dtoa_r+0xbac>
 800a136:	4883      	ldr	r0, [pc, #524]	; (800a344 <_dtoa_r+0x2e4>)
 800a138:	6018      	str	r0, [r3, #0]
 800a13a:	1e43      	subs	r3, r0, #1
 800a13c:	9301      	str	r3, [sp, #4]
 800a13e:	e7df      	b.n	800a100 <_dtoa_r+0xa0>
 800a140:	ec4b ab10 	vmov	d0, sl, fp
 800a144:	aa10      	add	r2, sp, #64	; 0x40
 800a146:	a911      	add	r1, sp, #68	; 0x44
 800a148:	4620      	mov	r0, r4
 800a14a:	f001 f8b9 	bl	800b2c0 <__d2b>
 800a14e:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800a152:	ee08 0a10 	vmov	s16, r0
 800a156:	2d00      	cmp	r5, #0
 800a158:	f000 8084 	beq.w	800a264 <_dtoa_r+0x204>
 800a15c:	ee19 3a90 	vmov	r3, s19
 800a160:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a164:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800a168:	4656      	mov	r6, sl
 800a16a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800a16e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800a172:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800a176:	4b74      	ldr	r3, [pc, #464]	; (800a348 <_dtoa_r+0x2e8>)
 800a178:	2200      	movs	r2, #0
 800a17a:	4630      	mov	r0, r6
 800a17c:	4639      	mov	r1, r7
 800a17e:	f7f6 f8ab 	bl	80002d8 <__aeabi_dsub>
 800a182:	a365      	add	r3, pc, #404	; (adr r3, 800a318 <_dtoa_r+0x2b8>)
 800a184:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a188:	f7f6 fa5e 	bl	8000648 <__aeabi_dmul>
 800a18c:	a364      	add	r3, pc, #400	; (adr r3, 800a320 <_dtoa_r+0x2c0>)
 800a18e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a192:	f7f6 f8a3 	bl	80002dc <__adddf3>
 800a196:	4606      	mov	r6, r0
 800a198:	4628      	mov	r0, r5
 800a19a:	460f      	mov	r7, r1
 800a19c:	f7f6 f9ea 	bl	8000574 <__aeabi_i2d>
 800a1a0:	a361      	add	r3, pc, #388	; (adr r3, 800a328 <_dtoa_r+0x2c8>)
 800a1a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a1a6:	f7f6 fa4f 	bl	8000648 <__aeabi_dmul>
 800a1aa:	4602      	mov	r2, r0
 800a1ac:	460b      	mov	r3, r1
 800a1ae:	4630      	mov	r0, r6
 800a1b0:	4639      	mov	r1, r7
 800a1b2:	f7f6 f893 	bl	80002dc <__adddf3>
 800a1b6:	4606      	mov	r6, r0
 800a1b8:	460f      	mov	r7, r1
 800a1ba:	f7f6 fcf5 	bl	8000ba8 <__aeabi_d2iz>
 800a1be:	2200      	movs	r2, #0
 800a1c0:	9000      	str	r0, [sp, #0]
 800a1c2:	2300      	movs	r3, #0
 800a1c4:	4630      	mov	r0, r6
 800a1c6:	4639      	mov	r1, r7
 800a1c8:	f7f6 fcb0 	bl	8000b2c <__aeabi_dcmplt>
 800a1cc:	b150      	cbz	r0, 800a1e4 <_dtoa_r+0x184>
 800a1ce:	9800      	ldr	r0, [sp, #0]
 800a1d0:	f7f6 f9d0 	bl	8000574 <__aeabi_i2d>
 800a1d4:	4632      	mov	r2, r6
 800a1d6:	463b      	mov	r3, r7
 800a1d8:	f7f6 fc9e 	bl	8000b18 <__aeabi_dcmpeq>
 800a1dc:	b910      	cbnz	r0, 800a1e4 <_dtoa_r+0x184>
 800a1de:	9b00      	ldr	r3, [sp, #0]
 800a1e0:	3b01      	subs	r3, #1
 800a1e2:	9300      	str	r3, [sp, #0]
 800a1e4:	9b00      	ldr	r3, [sp, #0]
 800a1e6:	2b16      	cmp	r3, #22
 800a1e8:	d85a      	bhi.n	800a2a0 <_dtoa_r+0x240>
 800a1ea:	9a00      	ldr	r2, [sp, #0]
 800a1ec:	4b57      	ldr	r3, [pc, #348]	; (800a34c <_dtoa_r+0x2ec>)
 800a1ee:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a1f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a1f6:	ec51 0b19 	vmov	r0, r1, d9
 800a1fa:	f7f6 fc97 	bl	8000b2c <__aeabi_dcmplt>
 800a1fe:	2800      	cmp	r0, #0
 800a200:	d050      	beq.n	800a2a4 <_dtoa_r+0x244>
 800a202:	9b00      	ldr	r3, [sp, #0]
 800a204:	3b01      	subs	r3, #1
 800a206:	9300      	str	r3, [sp, #0]
 800a208:	2300      	movs	r3, #0
 800a20a:	930b      	str	r3, [sp, #44]	; 0x2c
 800a20c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a20e:	1b5d      	subs	r5, r3, r5
 800a210:	1e6b      	subs	r3, r5, #1
 800a212:	9305      	str	r3, [sp, #20]
 800a214:	bf45      	ittet	mi
 800a216:	f1c5 0301 	rsbmi	r3, r5, #1
 800a21a:	9304      	strmi	r3, [sp, #16]
 800a21c:	2300      	movpl	r3, #0
 800a21e:	2300      	movmi	r3, #0
 800a220:	bf4c      	ite	mi
 800a222:	9305      	strmi	r3, [sp, #20]
 800a224:	9304      	strpl	r3, [sp, #16]
 800a226:	9b00      	ldr	r3, [sp, #0]
 800a228:	2b00      	cmp	r3, #0
 800a22a:	db3d      	blt.n	800a2a8 <_dtoa_r+0x248>
 800a22c:	9b05      	ldr	r3, [sp, #20]
 800a22e:	9a00      	ldr	r2, [sp, #0]
 800a230:	920a      	str	r2, [sp, #40]	; 0x28
 800a232:	4413      	add	r3, r2
 800a234:	9305      	str	r3, [sp, #20]
 800a236:	2300      	movs	r3, #0
 800a238:	9307      	str	r3, [sp, #28]
 800a23a:	9b06      	ldr	r3, [sp, #24]
 800a23c:	2b09      	cmp	r3, #9
 800a23e:	f200 8089 	bhi.w	800a354 <_dtoa_r+0x2f4>
 800a242:	2b05      	cmp	r3, #5
 800a244:	bfc4      	itt	gt
 800a246:	3b04      	subgt	r3, #4
 800a248:	9306      	strgt	r3, [sp, #24]
 800a24a:	9b06      	ldr	r3, [sp, #24]
 800a24c:	f1a3 0302 	sub.w	r3, r3, #2
 800a250:	bfcc      	ite	gt
 800a252:	2500      	movgt	r5, #0
 800a254:	2501      	movle	r5, #1
 800a256:	2b03      	cmp	r3, #3
 800a258:	f200 8087 	bhi.w	800a36a <_dtoa_r+0x30a>
 800a25c:	e8df f003 	tbb	[pc, r3]
 800a260:	59383a2d 	.word	0x59383a2d
 800a264:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800a268:	441d      	add	r5, r3
 800a26a:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800a26e:	2b20      	cmp	r3, #32
 800a270:	bfc1      	itttt	gt
 800a272:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800a276:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800a27a:	fa0b f303 	lslgt.w	r3, fp, r3
 800a27e:	fa26 f000 	lsrgt.w	r0, r6, r0
 800a282:	bfda      	itte	le
 800a284:	f1c3 0320 	rsble	r3, r3, #32
 800a288:	fa06 f003 	lslle.w	r0, r6, r3
 800a28c:	4318      	orrgt	r0, r3
 800a28e:	f7f6 f961 	bl	8000554 <__aeabi_ui2d>
 800a292:	2301      	movs	r3, #1
 800a294:	4606      	mov	r6, r0
 800a296:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800a29a:	3d01      	subs	r5, #1
 800a29c:	930e      	str	r3, [sp, #56]	; 0x38
 800a29e:	e76a      	b.n	800a176 <_dtoa_r+0x116>
 800a2a0:	2301      	movs	r3, #1
 800a2a2:	e7b2      	b.n	800a20a <_dtoa_r+0x1aa>
 800a2a4:	900b      	str	r0, [sp, #44]	; 0x2c
 800a2a6:	e7b1      	b.n	800a20c <_dtoa_r+0x1ac>
 800a2a8:	9b04      	ldr	r3, [sp, #16]
 800a2aa:	9a00      	ldr	r2, [sp, #0]
 800a2ac:	1a9b      	subs	r3, r3, r2
 800a2ae:	9304      	str	r3, [sp, #16]
 800a2b0:	4253      	negs	r3, r2
 800a2b2:	9307      	str	r3, [sp, #28]
 800a2b4:	2300      	movs	r3, #0
 800a2b6:	930a      	str	r3, [sp, #40]	; 0x28
 800a2b8:	e7bf      	b.n	800a23a <_dtoa_r+0x1da>
 800a2ba:	2300      	movs	r3, #0
 800a2bc:	9308      	str	r3, [sp, #32]
 800a2be:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a2c0:	2b00      	cmp	r3, #0
 800a2c2:	dc55      	bgt.n	800a370 <_dtoa_r+0x310>
 800a2c4:	2301      	movs	r3, #1
 800a2c6:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800a2ca:	461a      	mov	r2, r3
 800a2cc:	9209      	str	r2, [sp, #36]	; 0x24
 800a2ce:	e00c      	b.n	800a2ea <_dtoa_r+0x28a>
 800a2d0:	2301      	movs	r3, #1
 800a2d2:	e7f3      	b.n	800a2bc <_dtoa_r+0x25c>
 800a2d4:	2300      	movs	r3, #0
 800a2d6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a2d8:	9308      	str	r3, [sp, #32]
 800a2da:	9b00      	ldr	r3, [sp, #0]
 800a2dc:	4413      	add	r3, r2
 800a2de:	9302      	str	r3, [sp, #8]
 800a2e0:	3301      	adds	r3, #1
 800a2e2:	2b01      	cmp	r3, #1
 800a2e4:	9303      	str	r3, [sp, #12]
 800a2e6:	bfb8      	it	lt
 800a2e8:	2301      	movlt	r3, #1
 800a2ea:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800a2ec:	2200      	movs	r2, #0
 800a2ee:	6042      	str	r2, [r0, #4]
 800a2f0:	2204      	movs	r2, #4
 800a2f2:	f102 0614 	add.w	r6, r2, #20
 800a2f6:	429e      	cmp	r6, r3
 800a2f8:	6841      	ldr	r1, [r0, #4]
 800a2fa:	d93d      	bls.n	800a378 <_dtoa_r+0x318>
 800a2fc:	4620      	mov	r0, r4
 800a2fe:	f000 fcb7 	bl	800ac70 <_Balloc>
 800a302:	9001      	str	r0, [sp, #4]
 800a304:	2800      	cmp	r0, #0
 800a306:	d13b      	bne.n	800a380 <_dtoa_r+0x320>
 800a308:	4b11      	ldr	r3, [pc, #68]	; (800a350 <_dtoa_r+0x2f0>)
 800a30a:	4602      	mov	r2, r0
 800a30c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800a310:	e6c0      	b.n	800a094 <_dtoa_r+0x34>
 800a312:	2301      	movs	r3, #1
 800a314:	e7df      	b.n	800a2d6 <_dtoa_r+0x276>
 800a316:	bf00      	nop
 800a318:	636f4361 	.word	0x636f4361
 800a31c:	3fd287a7 	.word	0x3fd287a7
 800a320:	8b60c8b3 	.word	0x8b60c8b3
 800a324:	3fc68a28 	.word	0x3fc68a28
 800a328:	509f79fb 	.word	0x509f79fb
 800a32c:	3fd34413 	.word	0x3fd34413
 800a330:	0800c4e9 	.word	0x0800c4e9
 800a334:	0800c500 	.word	0x0800c500
 800a338:	7ff00000 	.word	0x7ff00000
 800a33c:	0800c4e5 	.word	0x0800c4e5
 800a340:	0800c4dc 	.word	0x0800c4dc
 800a344:	0800c4b9 	.word	0x0800c4b9
 800a348:	3ff80000 	.word	0x3ff80000
 800a34c:	0800c5f0 	.word	0x0800c5f0
 800a350:	0800c55b 	.word	0x0800c55b
 800a354:	2501      	movs	r5, #1
 800a356:	2300      	movs	r3, #0
 800a358:	9306      	str	r3, [sp, #24]
 800a35a:	9508      	str	r5, [sp, #32]
 800a35c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a360:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800a364:	2200      	movs	r2, #0
 800a366:	2312      	movs	r3, #18
 800a368:	e7b0      	b.n	800a2cc <_dtoa_r+0x26c>
 800a36a:	2301      	movs	r3, #1
 800a36c:	9308      	str	r3, [sp, #32]
 800a36e:	e7f5      	b.n	800a35c <_dtoa_r+0x2fc>
 800a370:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a372:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800a376:	e7b8      	b.n	800a2ea <_dtoa_r+0x28a>
 800a378:	3101      	adds	r1, #1
 800a37a:	6041      	str	r1, [r0, #4]
 800a37c:	0052      	lsls	r2, r2, #1
 800a37e:	e7b8      	b.n	800a2f2 <_dtoa_r+0x292>
 800a380:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a382:	9a01      	ldr	r2, [sp, #4]
 800a384:	601a      	str	r2, [r3, #0]
 800a386:	9b03      	ldr	r3, [sp, #12]
 800a388:	2b0e      	cmp	r3, #14
 800a38a:	f200 809d 	bhi.w	800a4c8 <_dtoa_r+0x468>
 800a38e:	2d00      	cmp	r5, #0
 800a390:	f000 809a 	beq.w	800a4c8 <_dtoa_r+0x468>
 800a394:	9b00      	ldr	r3, [sp, #0]
 800a396:	2b00      	cmp	r3, #0
 800a398:	dd32      	ble.n	800a400 <_dtoa_r+0x3a0>
 800a39a:	4ab7      	ldr	r2, [pc, #732]	; (800a678 <_dtoa_r+0x618>)
 800a39c:	f003 030f 	and.w	r3, r3, #15
 800a3a0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800a3a4:	e9d3 8900 	ldrd	r8, r9, [r3]
 800a3a8:	9b00      	ldr	r3, [sp, #0]
 800a3aa:	05d8      	lsls	r0, r3, #23
 800a3ac:	ea4f 1723 	mov.w	r7, r3, asr #4
 800a3b0:	d516      	bpl.n	800a3e0 <_dtoa_r+0x380>
 800a3b2:	4bb2      	ldr	r3, [pc, #712]	; (800a67c <_dtoa_r+0x61c>)
 800a3b4:	ec51 0b19 	vmov	r0, r1, d9
 800a3b8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800a3bc:	f7f6 fa6e 	bl	800089c <__aeabi_ddiv>
 800a3c0:	f007 070f 	and.w	r7, r7, #15
 800a3c4:	4682      	mov	sl, r0
 800a3c6:	468b      	mov	fp, r1
 800a3c8:	2503      	movs	r5, #3
 800a3ca:	4eac      	ldr	r6, [pc, #688]	; (800a67c <_dtoa_r+0x61c>)
 800a3cc:	b957      	cbnz	r7, 800a3e4 <_dtoa_r+0x384>
 800a3ce:	4642      	mov	r2, r8
 800a3d0:	464b      	mov	r3, r9
 800a3d2:	4650      	mov	r0, sl
 800a3d4:	4659      	mov	r1, fp
 800a3d6:	f7f6 fa61 	bl	800089c <__aeabi_ddiv>
 800a3da:	4682      	mov	sl, r0
 800a3dc:	468b      	mov	fp, r1
 800a3de:	e028      	b.n	800a432 <_dtoa_r+0x3d2>
 800a3e0:	2502      	movs	r5, #2
 800a3e2:	e7f2      	b.n	800a3ca <_dtoa_r+0x36a>
 800a3e4:	07f9      	lsls	r1, r7, #31
 800a3e6:	d508      	bpl.n	800a3fa <_dtoa_r+0x39a>
 800a3e8:	4640      	mov	r0, r8
 800a3ea:	4649      	mov	r1, r9
 800a3ec:	e9d6 2300 	ldrd	r2, r3, [r6]
 800a3f0:	f7f6 f92a 	bl	8000648 <__aeabi_dmul>
 800a3f4:	3501      	adds	r5, #1
 800a3f6:	4680      	mov	r8, r0
 800a3f8:	4689      	mov	r9, r1
 800a3fa:	107f      	asrs	r7, r7, #1
 800a3fc:	3608      	adds	r6, #8
 800a3fe:	e7e5      	b.n	800a3cc <_dtoa_r+0x36c>
 800a400:	f000 809b 	beq.w	800a53a <_dtoa_r+0x4da>
 800a404:	9b00      	ldr	r3, [sp, #0]
 800a406:	4f9d      	ldr	r7, [pc, #628]	; (800a67c <_dtoa_r+0x61c>)
 800a408:	425e      	negs	r6, r3
 800a40a:	4b9b      	ldr	r3, [pc, #620]	; (800a678 <_dtoa_r+0x618>)
 800a40c:	f006 020f 	and.w	r2, r6, #15
 800a410:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a414:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a418:	ec51 0b19 	vmov	r0, r1, d9
 800a41c:	f7f6 f914 	bl	8000648 <__aeabi_dmul>
 800a420:	1136      	asrs	r6, r6, #4
 800a422:	4682      	mov	sl, r0
 800a424:	468b      	mov	fp, r1
 800a426:	2300      	movs	r3, #0
 800a428:	2502      	movs	r5, #2
 800a42a:	2e00      	cmp	r6, #0
 800a42c:	d17a      	bne.n	800a524 <_dtoa_r+0x4c4>
 800a42e:	2b00      	cmp	r3, #0
 800a430:	d1d3      	bne.n	800a3da <_dtoa_r+0x37a>
 800a432:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a434:	2b00      	cmp	r3, #0
 800a436:	f000 8082 	beq.w	800a53e <_dtoa_r+0x4de>
 800a43a:	4b91      	ldr	r3, [pc, #580]	; (800a680 <_dtoa_r+0x620>)
 800a43c:	2200      	movs	r2, #0
 800a43e:	4650      	mov	r0, sl
 800a440:	4659      	mov	r1, fp
 800a442:	f7f6 fb73 	bl	8000b2c <__aeabi_dcmplt>
 800a446:	2800      	cmp	r0, #0
 800a448:	d079      	beq.n	800a53e <_dtoa_r+0x4de>
 800a44a:	9b03      	ldr	r3, [sp, #12]
 800a44c:	2b00      	cmp	r3, #0
 800a44e:	d076      	beq.n	800a53e <_dtoa_r+0x4de>
 800a450:	9b02      	ldr	r3, [sp, #8]
 800a452:	2b00      	cmp	r3, #0
 800a454:	dd36      	ble.n	800a4c4 <_dtoa_r+0x464>
 800a456:	9b00      	ldr	r3, [sp, #0]
 800a458:	4650      	mov	r0, sl
 800a45a:	4659      	mov	r1, fp
 800a45c:	1e5f      	subs	r7, r3, #1
 800a45e:	2200      	movs	r2, #0
 800a460:	4b88      	ldr	r3, [pc, #544]	; (800a684 <_dtoa_r+0x624>)
 800a462:	f7f6 f8f1 	bl	8000648 <__aeabi_dmul>
 800a466:	9e02      	ldr	r6, [sp, #8]
 800a468:	4682      	mov	sl, r0
 800a46a:	468b      	mov	fp, r1
 800a46c:	3501      	adds	r5, #1
 800a46e:	4628      	mov	r0, r5
 800a470:	f7f6 f880 	bl	8000574 <__aeabi_i2d>
 800a474:	4652      	mov	r2, sl
 800a476:	465b      	mov	r3, fp
 800a478:	f7f6 f8e6 	bl	8000648 <__aeabi_dmul>
 800a47c:	4b82      	ldr	r3, [pc, #520]	; (800a688 <_dtoa_r+0x628>)
 800a47e:	2200      	movs	r2, #0
 800a480:	f7f5 ff2c 	bl	80002dc <__adddf3>
 800a484:	46d0      	mov	r8, sl
 800a486:	46d9      	mov	r9, fp
 800a488:	4682      	mov	sl, r0
 800a48a:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800a48e:	2e00      	cmp	r6, #0
 800a490:	d158      	bne.n	800a544 <_dtoa_r+0x4e4>
 800a492:	4b7e      	ldr	r3, [pc, #504]	; (800a68c <_dtoa_r+0x62c>)
 800a494:	2200      	movs	r2, #0
 800a496:	4640      	mov	r0, r8
 800a498:	4649      	mov	r1, r9
 800a49a:	f7f5 ff1d 	bl	80002d8 <__aeabi_dsub>
 800a49e:	4652      	mov	r2, sl
 800a4a0:	465b      	mov	r3, fp
 800a4a2:	4680      	mov	r8, r0
 800a4a4:	4689      	mov	r9, r1
 800a4a6:	f7f6 fb5f 	bl	8000b68 <__aeabi_dcmpgt>
 800a4aa:	2800      	cmp	r0, #0
 800a4ac:	f040 8295 	bne.w	800a9da <_dtoa_r+0x97a>
 800a4b0:	4652      	mov	r2, sl
 800a4b2:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800a4b6:	4640      	mov	r0, r8
 800a4b8:	4649      	mov	r1, r9
 800a4ba:	f7f6 fb37 	bl	8000b2c <__aeabi_dcmplt>
 800a4be:	2800      	cmp	r0, #0
 800a4c0:	f040 8289 	bne.w	800a9d6 <_dtoa_r+0x976>
 800a4c4:	ec5b ab19 	vmov	sl, fp, d9
 800a4c8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a4ca:	2b00      	cmp	r3, #0
 800a4cc:	f2c0 8148 	blt.w	800a760 <_dtoa_r+0x700>
 800a4d0:	9a00      	ldr	r2, [sp, #0]
 800a4d2:	2a0e      	cmp	r2, #14
 800a4d4:	f300 8144 	bgt.w	800a760 <_dtoa_r+0x700>
 800a4d8:	4b67      	ldr	r3, [pc, #412]	; (800a678 <_dtoa_r+0x618>)
 800a4da:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a4de:	e9d3 8900 	ldrd	r8, r9, [r3]
 800a4e2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a4e4:	2b00      	cmp	r3, #0
 800a4e6:	f280 80d5 	bge.w	800a694 <_dtoa_r+0x634>
 800a4ea:	9b03      	ldr	r3, [sp, #12]
 800a4ec:	2b00      	cmp	r3, #0
 800a4ee:	f300 80d1 	bgt.w	800a694 <_dtoa_r+0x634>
 800a4f2:	f040 826f 	bne.w	800a9d4 <_dtoa_r+0x974>
 800a4f6:	4b65      	ldr	r3, [pc, #404]	; (800a68c <_dtoa_r+0x62c>)
 800a4f8:	2200      	movs	r2, #0
 800a4fa:	4640      	mov	r0, r8
 800a4fc:	4649      	mov	r1, r9
 800a4fe:	f7f6 f8a3 	bl	8000648 <__aeabi_dmul>
 800a502:	4652      	mov	r2, sl
 800a504:	465b      	mov	r3, fp
 800a506:	f7f6 fb25 	bl	8000b54 <__aeabi_dcmpge>
 800a50a:	9e03      	ldr	r6, [sp, #12]
 800a50c:	4637      	mov	r7, r6
 800a50e:	2800      	cmp	r0, #0
 800a510:	f040 8245 	bne.w	800a99e <_dtoa_r+0x93e>
 800a514:	9d01      	ldr	r5, [sp, #4]
 800a516:	2331      	movs	r3, #49	; 0x31
 800a518:	f805 3b01 	strb.w	r3, [r5], #1
 800a51c:	9b00      	ldr	r3, [sp, #0]
 800a51e:	3301      	adds	r3, #1
 800a520:	9300      	str	r3, [sp, #0]
 800a522:	e240      	b.n	800a9a6 <_dtoa_r+0x946>
 800a524:	07f2      	lsls	r2, r6, #31
 800a526:	d505      	bpl.n	800a534 <_dtoa_r+0x4d4>
 800a528:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a52c:	f7f6 f88c 	bl	8000648 <__aeabi_dmul>
 800a530:	3501      	adds	r5, #1
 800a532:	2301      	movs	r3, #1
 800a534:	1076      	asrs	r6, r6, #1
 800a536:	3708      	adds	r7, #8
 800a538:	e777      	b.n	800a42a <_dtoa_r+0x3ca>
 800a53a:	2502      	movs	r5, #2
 800a53c:	e779      	b.n	800a432 <_dtoa_r+0x3d2>
 800a53e:	9f00      	ldr	r7, [sp, #0]
 800a540:	9e03      	ldr	r6, [sp, #12]
 800a542:	e794      	b.n	800a46e <_dtoa_r+0x40e>
 800a544:	9901      	ldr	r1, [sp, #4]
 800a546:	4b4c      	ldr	r3, [pc, #304]	; (800a678 <_dtoa_r+0x618>)
 800a548:	4431      	add	r1, r6
 800a54a:	910d      	str	r1, [sp, #52]	; 0x34
 800a54c:	9908      	ldr	r1, [sp, #32]
 800a54e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800a552:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800a556:	2900      	cmp	r1, #0
 800a558:	d043      	beq.n	800a5e2 <_dtoa_r+0x582>
 800a55a:	494d      	ldr	r1, [pc, #308]	; (800a690 <_dtoa_r+0x630>)
 800a55c:	2000      	movs	r0, #0
 800a55e:	f7f6 f99d 	bl	800089c <__aeabi_ddiv>
 800a562:	4652      	mov	r2, sl
 800a564:	465b      	mov	r3, fp
 800a566:	f7f5 feb7 	bl	80002d8 <__aeabi_dsub>
 800a56a:	9d01      	ldr	r5, [sp, #4]
 800a56c:	4682      	mov	sl, r0
 800a56e:	468b      	mov	fp, r1
 800a570:	4649      	mov	r1, r9
 800a572:	4640      	mov	r0, r8
 800a574:	f7f6 fb18 	bl	8000ba8 <__aeabi_d2iz>
 800a578:	4606      	mov	r6, r0
 800a57a:	f7f5 fffb 	bl	8000574 <__aeabi_i2d>
 800a57e:	4602      	mov	r2, r0
 800a580:	460b      	mov	r3, r1
 800a582:	4640      	mov	r0, r8
 800a584:	4649      	mov	r1, r9
 800a586:	f7f5 fea7 	bl	80002d8 <__aeabi_dsub>
 800a58a:	3630      	adds	r6, #48	; 0x30
 800a58c:	f805 6b01 	strb.w	r6, [r5], #1
 800a590:	4652      	mov	r2, sl
 800a592:	465b      	mov	r3, fp
 800a594:	4680      	mov	r8, r0
 800a596:	4689      	mov	r9, r1
 800a598:	f7f6 fac8 	bl	8000b2c <__aeabi_dcmplt>
 800a59c:	2800      	cmp	r0, #0
 800a59e:	d163      	bne.n	800a668 <_dtoa_r+0x608>
 800a5a0:	4642      	mov	r2, r8
 800a5a2:	464b      	mov	r3, r9
 800a5a4:	4936      	ldr	r1, [pc, #216]	; (800a680 <_dtoa_r+0x620>)
 800a5a6:	2000      	movs	r0, #0
 800a5a8:	f7f5 fe96 	bl	80002d8 <__aeabi_dsub>
 800a5ac:	4652      	mov	r2, sl
 800a5ae:	465b      	mov	r3, fp
 800a5b0:	f7f6 fabc 	bl	8000b2c <__aeabi_dcmplt>
 800a5b4:	2800      	cmp	r0, #0
 800a5b6:	f040 80b5 	bne.w	800a724 <_dtoa_r+0x6c4>
 800a5ba:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a5bc:	429d      	cmp	r5, r3
 800a5be:	d081      	beq.n	800a4c4 <_dtoa_r+0x464>
 800a5c0:	4b30      	ldr	r3, [pc, #192]	; (800a684 <_dtoa_r+0x624>)
 800a5c2:	2200      	movs	r2, #0
 800a5c4:	4650      	mov	r0, sl
 800a5c6:	4659      	mov	r1, fp
 800a5c8:	f7f6 f83e 	bl	8000648 <__aeabi_dmul>
 800a5cc:	4b2d      	ldr	r3, [pc, #180]	; (800a684 <_dtoa_r+0x624>)
 800a5ce:	4682      	mov	sl, r0
 800a5d0:	468b      	mov	fp, r1
 800a5d2:	4640      	mov	r0, r8
 800a5d4:	4649      	mov	r1, r9
 800a5d6:	2200      	movs	r2, #0
 800a5d8:	f7f6 f836 	bl	8000648 <__aeabi_dmul>
 800a5dc:	4680      	mov	r8, r0
 800a5de:	4689      	mov	r9, r1
 800a5e0:	e7c6      	b.n	800a570 <_dtoa_r+0x510>
 800a5e2:	4650      	mov	r0, sl
 800a5e4:	4659      	mov	r1, fp
 800a5e6:	f7f6 f82f 	bl	8000648 <__aeabi_dmul>
 800a5ea:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a5ec:	9d01      	ldr	r5, [sp, #4]
 800a5ee:	930f      	str	r3, [sp, #60]	; 0x3c
 800a5f0:	4682      	mov	sl, r0
 800a5f2:	468b      	mov	fp, r1
 800a5f4:	4649      	mov	r1, r9
 800a5f6:	4640      	mov	r0, r8
 800a5f8:	f7f6 fad6 	bl	8000ba8 <__aeabi_d2iz>
 800a5fc:	4606      	mov	r6, r0
 800a5fe:	f7f5 ffb9 	bl	8000574 <__aeabi_i2d>
 800a602:	3630      	adds	r6, #48	; 0x30
 800a604:	4602      	mov	r2, r0
 800a606:	460b      	mov	r3, r1
 800a608:	4640      	mov	r0, r8
 800a60a:	4649      	mov	r1, r9
 800a60c:	f7f5 fe64 	bl	80002d8 <__aeabi_dsub>
 800a610:	f805 6b01 	strb.w	r6, [r5], #1
 800a614:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a616:	429d      	cmp	r5, r3
 800a618:	4680      	mov	r8, r0
 800a61a:	4689      	mov	r9, r1
 800a61c:	f04f 0200 	mov.w	r2, #0
 800a620:	d124      	bne.n	800a66c <_dtoa_r+0x60c>
 800a622:	4b1b      	ldr	r3, [pc, #108]	; (800a690 <_dtoa_r+0x630>)
 800a624:	4650      	mov	r0, sl
 800a626:	4659      	mov	r1, fp
 800a628:	f7f5 fe58 	bl	80002dc <__adddf3>
 800a62c:	4602      	mov	r2, r0
 800a62e:	460b      	mov	r3, r1
 800a630:	4640      	mov	r0, r8
 800a632:	4649      	mov	r1, r9
 800a634:	f7f6 fa98 	bl	8000b68 <__aeabi_dcmpgt>
 800a638:	2800      	cmp	r0, #0
 800a63a:	d173      	bne.n	800a724 <_dtoa_r+0x6c4>
 800a63c:	4652      	mov	r2, sl
 800a63e:	465b      	mov	r3, fp
 800a640:	4913      	ldr	r1, [pc, #76]	; (800a690 <_dtoa_r+0x630>)
 800a642:	2000      	movs	r0, #0
 800a644:	f7f5 fe48 	bl	80002d8 <__aeabi_dsub>
 800a648:	4602      	mov	r2, r0
 800a64a:	460b      	mov	r3, r1
 800a64c:	4640      	mov	r0, r8
 800a64e:	4649      	mov	r1, r9
 800a650:	f7f6 fa6c 	bl	8000b2c <__aeabi_dcmplt>
 800a654:	2800      	cmp	r0, #0
 800a656:	f43f af35 	beq.w	800a4c4 <_dtoa_r+0x464>
 800a65a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800a65c:	1e6b      	subs	r3, r5, #1
 800a65e:	930f      	str	r3, [sp, #60]	; 0x3c
 800a660:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800a664:	2b30      	cmp	r3, #48	; 0x30
 800a666:	d0f8      	beq.n	800a65a <_dtoa_r+0x5fa>
 800a668:	9700      	str	r7, [sp, #0]
 800a66a:	e049      	b.n	800a700 <_dtoa_r+0x6a0>
 800a66c:	4b05      	ldr	r3, [pc, #20]	; (800a684 <_dtoa_r+0x624>)
 800a66e:	f7f5 ffeb 	bl	8000648 <__aeabi_dmul>
 800a672:	4680      	mov	r8, r0
 800a674:	4689      	mov	r9, r1
 800a676:	e7bd      	b.n	800a5f4 <_dtoa_r+0x594>
 800a678:	0800c5f0 	.word	0x0800c5f0
 800a67c:	0800c5c8 	.word	0x0800c5c8
 800a680:	3ff00000 	.word	0x3ff00000
 800a684:	40240000 	.word	0x40240000
 800a688:	401c0000 	.word	0x401c0000
 800a68c:	40140000 	.word	0x40140000
 800a690:	3fe00000 	.word	0x3fe00000
 800a694:	9d01      	ldr	r5, [sp, #4]
 800a696:	4656      	mov	r6, sl
 800a698:	465f      	mov	r7, fp
 800a69a:	4642      	mov	r2, r8
 800a69c:	464b      	mov	r3, r9
 800a69e:	4630      	mov	r0, r6
 800a6a0:	4639      	mov	r1, r7
 800a6a2:	f7f6 f8fb 	bl	800089c <__aeabi_ddiv>
 800a6a6:	f7f6 fa7f 	bl	8000ba8 <__aeabi_d2iz>
 800a6aa:	4682      	mov	sl, r0
 800a6ac:	f7f5 ff62 	bl	8000574 <__aeabi_i2d>
 800a6b0:	4642      	mov	r2, r8
 800a6b2:	464b      	mov	r3, r9
 800a6b4:	f7f5 ffc8 	bl	8000648 <__aeabi_dmul>
 800a6b8:	4602      	mov	r2, r0
 800a6ba:	460b      	mov	r3, r1
 800a6bc:	4630      	mov	r0, r6
 800a6be:	4639      	mov	r1, r7
 800a6c0:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800a6c4:	f7f5 fe08 	bl	80002d8 <__aeabi_dsub>
 800a6c8:	f805 6b01 	strb.w	r6, [r5], #1
 800a6cc:	9e01      	ldr	r6, [sp, #4]
 800a6ce:	9f03      	ldr	r7, [sp, #12]
 800a6d0:	1bae      	subs	r6, r5, r6
 800a6d2:	42b7      	cmp	r7, r6
 800a6d4:	4602      	mov	r2, r0
 800a6d6:	460b      	mov	r3, r1
 800a6d8:	d135      	bne.n	800a746 <_dtoa_r+0x6e6>
 800a6da:	f7f5 fdff 	bl	80002dc <__adddf3>
 800a6de:	4642      	mov	r2, r8
 800a6e0:	464b      	mov	r3, r9
 800a6e2:	4606      	mov	r6, r0
 800a6e4:	460f      	mov	r7, r1
 800a6e6:	f7f6 fa3f 	bl	8000b68 <__aeabi_dcmpgt>
 800a6ea:	b9d0      	cbnz	r0, 800a722 <_dtoa_r+0x6c2>
 800a6ec:	4642      	mov	r2, r8
 800a6ee:	464b      	mov	r3, r9
 800a6f0:	4630      	mov	r0, r6
 800a6f2:	4639      	mov	r1, r7
 800a6f4:	f7f6 fa10 	bl	8000b18 <__aeabi_dcmpeq>
 800a6f8:	b110      	cbz	r0, 800a700 <_dtoa_r+0x6a0>
 800a6fa:	f01a 0f01 	tst.w	sl, #1
 800a6fe:	d110      	bne.n	800a722 <_dtoa_r+0x6c2>
 800a700:	4620      	mov	r0, r4
 800a702:	ee18 1a10 	vmov	r1, s16
 800a706:	f000 faf3 	bl	800acf0 <_Bfree>
 800a70a:	2300      	movs	r3, #0
 800a70c:	9800      	ldr	r0, [sp, #0]
 800a70e:	702b      	strb	r3, [r5, #0]
 800a710:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a712:	3001      	adds	r0, #1
 800a714:	6018      	str	r0, [r3, #0]
 800a716:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a718:	2b00      	cmp	r3, #0
 800a71a:	f43f acf1 	beq.w	800a100 <_dtoa_r+0xa0>
 800a71e:	601d      	str	r5, [r3, #0]
 800a720:	e4ee      	b.n	800a100 <_dtoa_r+0xa0>
 800a722:	9f00      	ldr	r7, [sp, #0]
 800a724:	462b      	mov	r3, r5
 800a726:	461d      	mov	r5, r3
 800a728:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a72c:	2a39      	cmp	r2, #57	; 0x39
 800a72e:	d106      	bne.n	800a73e <_dtoa_r+0x6de>
 800a730:	9a01      	ldr	r2, [sp, #4]
 800a732:	429a      	cmp	r2, r3
 800a734:	d1f7      	bne.n	800a726 <_dtoa_r+0x6c6>
 800a736:	9901      	ldr	r1, [sp, #4]
 800a738:	2230      	movs	r2, #48	; 0x30
 800a73a:	3701      	adds	r7, #1
 800a73c:	700a      	strb	r2, [r1, #0]
 800a73e:	781a      	ldrb	r2, [r3, #0]
 800a740:	3201      	adds	r2, #1
 800a742:	701a      	strb	r2, [r3, #0]
 800a744:	e790      	b.n	800a668 <_dtoa_r+0x608>
 800a746:	4ba6      	ldr	r3, [pc, #664]	; (800a9e0 <_dtoa_r+0x980>)
 800a748:	2200      	movs	r2, #0
 800a74a:	f7f5 ff7d 	bl	8000648 <__aeabi_dmul>
 800a74e:	2200      	movs	r2, #0
 800a750:	2300      	movs	r3, #0
 800a752:	4606      	mov	r6, r0
 800a754:	460f      	mov	r7, r1
 800a756:	f7f6 f9df 	bl	8000b18 <__aeabi_dcmpeq>
 800a75a:	2800      	cmp	r0, #0
 800a75c:	d09d      	beq.n	800a69a <_dtoa_r+0x63a>
 800a75e:	e7cf      	b.n	800a700 <_dtoa_r+0x6a0>
 800a760:	9a08      	ldr	r2, [sp, #32]
 800a762:	2a00      	cmp	r2, #0
 800a764:	f000 80d7 	beq.w	800a916 <_dtoa_r+0x8b6>
 800a768:	9a06      	ldr	r2, [sp, #24]
 800a76a:	2a01      	cmp	r2, #1
 800a76c:	f300 80ba 	bgt.w	800a8e4 <_dtoa_r+0x884>
 800a770:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a772:	2a00      	cmp	r2, #0
 800a774:	f000 80b2 	beq.w	800a8dc <_dtoa_r+0x87c>
 800a778:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800a77c:	9e07      	ldr	r6, [sp, #28]
 800a77e:	9d04      	ldr	r5, [sp, #16]
 800a780:	9a04      	ldr	r2, [sp, #16]
 800a782:	441a      	add	r2, r3
 800a784:	9204      	str	r2, [sp, #16]
 800a786:	9a05      	ldr	r2, [sp, #20]
 800a788:	2101      	movs	r1, #1
 800a78a:	441a      	add	r2, r3
 800a78c:	4620      	mov	r0, r4
 800a78e:	9205      	str	r2, [sp, #20]
 800a790:	f000 fb66 	bl	800ae60 <__i2b>
 800a794:	4607      	mov	r7, r0
 800a796:	2d00      	cmp	r5, #0
 800a798:	dd0c      	ble.n	800a7b4 <_dtoa_r+0x754>
 800a79a:	9b05      	ldr	r3, [sp, #20]
 800a79c:	2b00      	cmp	r3, #0
 800a79e:	dd09      	ble.n	800a7b4 <_dtoa_r+0x754>
 800a7a0:	42ab      	cmp	r3, r5
 800a7a2:	9a04      	ldr	r2, [sp, #16]
 800a7a4:	bfa8      	it	ge
 800a7a6:	462b      	movge	r3, r5
 800a7a8:	1ad2      	subs	r2, r2, r3
 800a7aa:	9204      	str	r2, [sp, #16]
 800a7ac:	9a05      	ldr	r2, [sp, #20]
 800a7ae:	1aed      	subs	r5, r5, r3
 800a7b0:	1ad3      	subs	r3, r2, r3
 800a7b2:	9305      	str	r3, [sp, #20]
 800a7b4:	9b07      	ldr	r3, [sp, #28]
 800a7b6:	b31b      	cbz	r3, 800a800 <_dtoa_r+0x7a0>
 800a7b8:	9b08      	ldr	r3, [sp, #32]
 800a7ba:	2b00      	cmp	r3, #0
 800a7bc:	f000 80af 	beq.w	800a91e <_dtoa_r+0x8be>
 800a7c0:	2e00      	cmp	r6, #0
 800a7c2:	dd13      	ble.n	800a7ec <_dtoa_r+0x78c>
 800a7c4:	4639      	mov	r1, r7
 800a7c6:	4632      	mov	r2, r6
 800a7c8:	4620      	mov	r0, r4
 800a7ca:	f000 fc09 	bl	800afe0 <__pow5mult>
 800a7ce:	ee18 2a10 	vmov	r2, s16
 800a7d2:	4601      	mov	r1, r0
 800a7d4:	4607      	mov	r7, r0
 800a7d6:	4620      	mov	r0, r4
 800a7d8:	f000 fb58 	bl	800ae8c <__multiply>
 800a7dc:	ee18 1a10 	vmov	r1, s16
 800a7e0:	4680      	mov	r8, r0
 800a7e2:	4620      	mov	r0, r4
 800a7e4:	f000 fa84 	bl	800acf0 <_Bfree>
 800a7e8:	ee08 8a10 	vmov	s16, r8
 800a7ec:	9b07      	ldr	r3, [sp, #28]
 800a7ee:	1b9a      	subs	r2, r3, r6
 800a7f0:	d006      	beq.n	800a800 <_dtoa_r+0x7a0>
 800a7f2:	ee18 1a10 	vmov	r1, s16
 800a7f6:	4620      	mov	r0, r4
 800a7f8:	f000 fbf2 	bl	800afe0 <__pow5mult>
 800a7fc:	ee08 0a10 	vmov	s16, r0
 800a800:	2101      	movs	r1, #1
 800a802:	4620      	mov	r0, r4
 800a804:	f000 fb2c 	bl	800ae60 <__i2b>
 800a808:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a80a:	2b00      	cmp	r3, #0
 800a80c:	4606      	mov	r6, r0
 800a80e:	f340 8088 	ble.w	800a922 <_dtoa_r+0x8c2>
 800a812:	461a      	mov	r2, r3
 800a814:	4601      	mov	r1, r0
 800a816:	4620      	mov	r0, r4
 800a818:	f000 fbe2 	bl	800afe0 <__pow5mult>
 800a81c:	9b06      	ldr	r3, [sp, #24]
 800a81e:	2b01      	cmp	r3, #1
 800a820:	4606      	mov	r6, r0
 800a822:	f340 8081 	ble.w	800a928 <_dtoa_r+0x8c8>
 800a826:	f04f 0800 	mov.w	r8, #0
 800a82a:	6933      	ldr	r3, [r6, #16]
 800a82c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800a830:	6918      	ldr	r0, [r3, #16]
 800a832:	f000 fac5 	bl	800adc0 <__hi0bits>
 800a836:	f1c0 0020 	rsb	r0, r0, #32
 800a83a:	9b05      	ldr	r3, [sp, #20]
 800a83c:	4418      	add	r0, r3
 800a83e:	f010 001f 	ands.w	r0, r0, #31
 800a842:	f000 8092 	beq.w	800a96a <_dtoa_r+0x90a>
 800a846:	f1c0 0320 	rsb	r3, r0, #32
 800a84a:	2b04      	cmp	r3, #4
 800a84c:	f340 808a 	ble.w	800a964 <_dtoa_r+0x904>
 800a850:	f1c0 001c 	rsb	r0, r0, #28
 800a854:	9b04      	ldr	r3, [sp, #16]
 800a856:	4403      	add	r3, r0
 800a858:	9304      	str	r3, [sp, #16]
 800a85a:	9b05      	ldr	r3, [sp, #20]
 800a85c:	4403      	add	r3, r0
 800a85e:	4405      	add	r5, r0
 800a860:	9305      	str	r3, [sp, #20]
 800a862:	9b04      	ldr	r3, [sp, #16]
 800a864:	2b00      	cmp	r3, #0
 800a866:	dd07      	ble.n	800a878 <_dtoa_r+0x818>
 800a868:	ee18 1a10 	vmov	r1, s16
 800a86c:	461a      	mov	r2, r3
 800a86e:	4620      	mov	r0, r4
 800a870:	f000 fc10 	bl	800b094 <__lshift>
 800a874:	ee08 0a10 	vmov	s16, r0
 800a878:	9b05      	ldr	r3, [sp, #20]
 800a87a:	2b00      	cmp	r3, #0
 800a87c:	dd05      	ble.n	800a88a <_dtoa_r+0x82a>
 800a87e:	4631      	mov	r1, r6
 800a880:	461a      	mov	r2, r3
 800a882:	4620      	mov	r0, r4
 800a884:	f000 fc06 	bl	800b094 <__lshift>
 800a888:	4606      	mov	r6, r0
 800a88a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a88c:	2b00      	cmp	r3, #0
 800a88e:	d06e      	beq.n	800a96e <_dtoa_r+0x90e>
 800a890:	ee18 0a10 	vmov	r0, s16
 800a894:	4631      	mov	r1, r6
 800a896:	f000 fc6d 	bl	800b174 <__mcmp>
 800a89a:	2800      	cmp	r0, #0
 800a89c:	da67      	bge.n	800a96e <_dtoa_r+0x90e>
 800a89e:	9b00      	ldr	r3, [sp, #0]
 800a8a0:	3b01      	subs	r3, #1
 800a8a2:	ee18 1a10 	vmov	r1, s16
 800a8a6:	9300      	str	r3, [sp, #0]
 800a8a8:	220a      	movs	r2, #10
 800a8aa:	2300      	movs	r3, #0
 800a8ac:	4620      	mov	r0, r4
 800a8ae:	f000 fa41 	bl	800ad34 <__multadd>
 800a8b2:	9b08      	ldr	r3, [sp, #32]
 800a8b4:	ee08 0a10 	vmov	s16, r0
 800a8b8:	2b00      	cmp	r3, #0
 800a8ba:	f000 81b1 	beq.w	800ac20 <_dtoa_r+0xbc0>
 800a8be:	2300      	movs	r3, #0
 800a8c0:	4639      	mov	r1, r7
 800a8c2:	220a      	movs	r2, #10
 800a8c4:	4620      	mov	r0, r4
 800a8c6:	f000 fa35 	bl	800ad34 <__multadd>
 800a8ca:	9b02      	ldr	r3, [sp, #8]
 800a8cc:	2b00      	cmp	r3, #0
 800a8ce:	4607      	mov	r7, r0
 800a8d0:	f300 808e 	bgt.w	800a9f0 <_dtoa_r+0x990>
 800a8d4:	9b06      	ldr	r3, [sp, #24]
 800a8d6:	2b02      	cmp	r3, #2
 800a8d8:	dc51      	bgt.n	800a97e <_dtoa_r+0x91e>
 800a8da:	e089      	b.n	800a9f0 <_dtoa_r+0x990>
 800a8dc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a8de:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800a8e2:	e74b      	b.n	800a77c <_dtoa_r+0x71c>
 800a8e4:	9b03      	ldr	r3, [sp, #12]
 800a8e6:	1e5e      	subs	r6, r3, #1
 800a8e8:	9b07      	ldr	r3, [sp, #28]
 800a8ea:	42b3      	cmp	r3, r6
 800a8ec:	bfbf      	itttt	lt
 800a8ee:	9b07      	ldrlt	r3, [sp, #28]
 800a8f0:	9607      	strlt	r6, [sp, #28]
 800a8f2:	1af2      	sublt	r2, r6, r3
 800a8f4:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800a8f6:	bfb6      	itet	lt
 800a8f8:	189b      	addlt	r3, r3, r2
 800a8fa:	1b9e      	subge	r6, r3, r6
 800a8fc:	930a      	strlt	r3, [sp, #40]	; 0x28
 800a8fe:	9b03      	ldr	r3, [sp, #12]
 800a900:	bfb8      	it	lt
 800a902:	2600      	movlt	r6, #0
 800a904:	2b00      	cmp	r3, #0
 800a906:	bfb7      	itett	lt
 800a908:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800a90c:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800a910:	1a9d      	sublt	r5, r3, r2
 800a912:	2300      	movlt	r3, #0
 800a914:	e734      	b.n	800a780 <_dtoa_r+0x720>
 800a916:	9e07      	ldr	r6, [sp, #28]
 800a918:	9d04      	ldr	r5, [sp, #16]
 800a91a:	9f08      	ldr	r7, [sp, #32]
 800a91c:	e73b      	b.n	800a796 <_dtoa_r+0x736>
 800a91e:	9a07      	ldr	r2, [sp, #28]
 800a920:	e767      	b.n	800a7f2 <_dtoa_r+0x792>
 800a922:	9b06      	ldr	r3, [sp, #24]
 800a924:	2b01      	cmp	r3, #1
 800a926:	dc18      	bgt.n	800a95a <_dtoa_r+0x8fa>
 800a928:	f1ba 0f00 	cmp.w	sl, #0
 800a92c:	d115      	bne.n	800a95a <_dtoa_r+0x8fa>
 800a92e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800a932:	b993      	cbnz	r3, 800a95a <_dtoa_r+0x8fa>
 800a934:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800a938:	0d1b      	lsrs	r3, r3, #20
 800a93a:	051b      	lsls	r3, r3, #20
 800a93c:	b183      	cbz	r3, 800a960 <_dtoa_r+0x900>
 800a93e:	9b04      	ldr	r3, [sp, #16]
 800a940:	3301      	adds	r3, #1
 800a942:	9304      	str	r3, [sp, #16]
 800a944:	9b05      	ldr	r3, [sp, #20]
 800a946:	3301      	adds	r3, #1
 800a948:	9305      	str	r3, [sp, #20]
 800a94a:	f04f 0801 	mov.w	r8, #1
 800a94e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a950:	2b00      	cmp	r3, #0
 800a952:	f47f af6a 	bne.w	800a82a <_dtoa_r+0x7ca>
 800a956:	2001      	movs	r0, #1
 800a958:	e76f      	b.n	800a83a <_dtoa_r+0x7da>
 800a95a:	f04f 0800 	mov.w	r8, #0
 800a95e:	e7f6      	b.n	800a94e <_dtoa_r+0x8ee>
 800a960:	4698      	mov	r8, r3
 800a962:	e7f4      	b.n	800a94e <_dtoa_r+0x8ee>
 800a964:	f43f af7d 	beq.w	800a862 <_dtoa_r+0x802>
 800a968:	4618      	mov	r0, r3
 800a96a:	301c      	adds	r0, #28
 800a96c:	e772      	b.n	800a854 <_dtoa_r+0x7f4>
 800a96e:	9b03      	ldr	r3, [sp, #12]
 800a970:	2b00      	cmp	r3, #0
 800a972:	dc37      	bgt.n	800a9e4 <_dtoa_r+0x984>
 800a974:	9b06      	ldr	r3, [sp, #24]
 800a976:	2b02      	cmp	r3, #2
 800a978:	dd34      	ble.n	800a9e4 <_dtoa_r+0x984>
 800a97a:	9b03      	ldr	r3, [sp, #12]
 800a97c:	9302      	str	r3, [sp, #8]
 800a97e:	9b02      	ldr	r3, [sp, #8]
 800a980:	b96b      	cbnz	r3, 800a99e <_dtoa_r+0x93e>
 800a982:	4631      	mov	r1, r6
 800a984:	2205      	movs	r2, #5
 800a986:	4620      	mov	r0, r4
 800a988:	f000 f9d4 	bl	800ad34 <__multadd>
 800a98c:	4601      	mov	r1, r0
 800a98e:	4606      	mov	r6, r0
 800a990:	ee18 0a10 	vmov	r0, s16
 800a994:	f000 fbee 	bl	800b174 <__mcmp>
 800a998:	2800      	cmp	r0, #0
 800a99a:	f73f adbb 	bgt.w	800a514 <_dtoa_r+0x4b4>
 800a99e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a9a0:	9d01      	ldr	r5, [sp, #4]
 800a9a2:	43db      	mvns	r3, r3
 800a9a4:	9300      	str	r3, [sp, #0]
 800a9a6:	f04f 0800 	mov.w	r8, #0
 800a9aa:	4631      	mov	r1, r6
 800a9ac:	4620      	mov	r0, r4
 800a9ae:	f000 f99f 	bl	800acf0 <_Bfree>
 800a9b2:	2f00      	cmp	r7, #0
 800a9b4:	f43f aea4 	beq.w	800a700 <_dtoa_r+0x6a0>
 800a9b8:	f1b8 0f00 	cmp.w	r8, #0
 800a9bc:	d005      	beq.n	800a9ca <_dtoa_r+0x96a>
 800a9be:	45b8      	cmp	r8, r7
 800a9c0:	d003      	beq.n	800a9ca <_dtoa_r+0x96a>
 800a9c2:	4641      	mov	r1, r8
 800a9c4:	4620      	mov	r0, r4
 800a9c6:	f000 f993 	bl	800acf0 <_Bfree>
 800a9ca:	4639      	mov	r1, r7
 800a9cc:	4620      	mov	r0, r4
 800a9ce:	f000 f98f 	bl	800acf0 <_Bfree>
 800a9d2:	e695      	b.n	800a700 <_dtoa_r+0x6a0>
 800a9d4:	2600      	movs	r6, #0
 800a9d6:	4637      	mov	r7, r6
 800a9d8:	e7e1      	b.n	800a99e <_dtoa_r+0x93e>
 800a9da:	9700      	str	r7, [sp, #0]
 800a9dc:	4637      	mov	r7, r6
 800a9de:	e599      	b.n	800a514 <_dtoa_r+0x4b4>
 800a9e0:	40240000 	.word	0x40240000
 800a9e4:	9b08      	ldr	r3, [sp, #32]
 800a9e6:	2b00      	cmp	r3, #0
 800a9e8:	f000 80ca 	beq.w	800ab80 <_dtoa_r+0xb20>
 800a9ec:	9b03      	ldr	r3, [sp, #12]
 800a9ee:	9302      	str	r3, [sp, #8]
 800a9f0:	2d00      	cmp	r5, #0
 800a9f2:	dd05      	ble.n	800aa00 <_dtoa_r+0x9a0>
 800a9f4:	4639      	mov	r1, r7
 800a9f6:	462a      	mov	r2, r5
 800a9f8:	4620      	mov	r0, r4
 800a9fa:	f000 fb4b 	bl	800b094 <__lshift>
 800a9fe:	4607      	mov	r7, r0
 800aa00:	f1b8 0f00 	cmp.w	r8, #0
 800aa04:	d05b      	beq.n	800aabe <_dtoa_r+0xa5e>
 800aa06:	6879      	ldr	r1, [r7, #4]
 800aa08:	4620      	mov	r0, r4
 800aa0a:	f000 f931 	bl	800ac70 <_Balloc>
 800aa0e:	4605      	mov	r5, r0
 800aa10:	b928      	cbnz	r0, 800aa1e <_dtoa_r+0x9be>
 800aa12:	4b87      	ldr	r3, [pc, #540]	; (800ac30 <_dtoa_r+0xbd0>)
 800aa14:	4602      	mov	r2, r0
 800aa16:	f240 21ea 	movw	r1, #746	; 0x2ea
 800aa1a:	f7ff bb3b 	b.w	800a094 <_dtoa_r+0x34>
 800aa1e:	693a      	ldr	r2, [r7, #16]
 800aa20:	3202      	adds	r2, #2
 800aa22:	0092      	lsls	r2, r2, #2
 800aa24:	f107 010c 	add.w	r1, r7, #12
 800aa28:	300c      	adds	r0, #12
 800aa2a:	f000 f913 	bl	800ac54 <memcpy>
 800aa2e:	2201      	movs	r2, #1
 800aa30:	4629      	mov	r1, r5
 800aa32:	4620      	mov	r0, r4
 800aa34:	f000 fb2e 	bl	800b094 <__lshift>
 800aa38:	9b01      	ldr	r3, [sp, #4]
 800aa3a:	f103 0901 	add.w	r9, r3, #1
 800aa3e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800aa42:	4413      	add	r3, r2
 800aa44:	9305      	str	r3, [sp, #20]
 800aa46:	f00a 0301 	and.w	r3, sl, #1
 800aa4a:	46b8      	mov	r8, r7
 800aa4c:	9304      	str	r3, [sp, #16]
 800aa4e:	4607      	mov	r7, r0
 800aa50:	4631      	mov	r1, r6
 800aa52:	ee18 0a10 	vmov	r0, s16
 800aa56:	f7ff fa77 	bl	8009f48 <quorem>
 800aa5a:	4641      	mov	r1, r8
 800aa5c:	9002      	str	r0, [sp, #8]
 800aa5e:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800aa62:	ee18 0a10 	vmov	r0, s16
 800aa66:	f000 fb85 	bl	800b174 <__mcmp>
 800aa6a:	463a      	mov	r2, r7
 800aa6c:	9003      	str	r0, [sp, #12]
 800aa6e:	4631      	mov	r1, r6
 800aa70:	4620      	mov	r0, r4
 800aa72:	f000 fb9b 	bl	800b1ac <__mdiff>
 800aa76:	68c2      	ldr	r2, [r0, #12]
 800aa78:	f109 3bff 	add.w	fp, r9, #4294967295	; 0xffffffff
 800aa7c:	4605      	mov	r5, r0
 800aa7e:	bb02      	cbnz	r2, 800aac2 <_dtoa_r+0xa62>
 800aa80:	4601      	mov	r1, r0
 800aa82:	ee18 0a10 	vmov	r0, s16
 800aa86:	f000 fb75 	bl	800b174 <__mcmp>
 800aa8a:	4602      	mov	r2, r0
 800aa8c:	4629      	mov	r1, r5
 800aa8e:	4620      	mov	r0, r4
 800aa90:	9207      	str	r2, [sp, #28]
 800aa92:	f000 f92d 	bl	800acf0 <_Bfree>
 800aa96:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800aa9a:	ea43 0102 	orr.w	r1, r3, r2
 800aa9e:	9b04      	ldr	r3, [sp, #16]
 800aaa0:	430b      	orrs	r3, r1
 800aaa2:	464d      	mov	r5, r9
 800aaa4:	d10f      	bne.n	800aac6 <_dtoa_r+0xa66>
 800aaa6:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800aaaa:	d02a      	beq.n	800ab02 <_dtoa_r+0xaa2>
 800aaac:	9b03      	ldr	r3, [sp, #12]
 800aaae:	2b00      	cmp	r3, #0
 800aab0:	dd02      	ble.n	800aab8 <_dtoa_r+0xa58>
 800aab2:	9b02      	ldr	r3, [sp, #8]
 800aab4:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800aab8:	f88b a000 	strb.w	sl, [fp]
 800aabc:	e775      	b.n	800a9aa <_dtoa_r+0x94a>
 800aabe:	4638      	mov	r0, r7
 800aac0:	e7ba      	b.n	800aa38 <_dtoa_r+0x9d8>
 800aac2:	2201      	movs	r2, #1
 800aac4:	e7e2      	b.n	800aa8c <_dtoa_r+0xa2c>
 800aac6:	9b03      	ldr	r3, [sp, #12]
 800aac8:	2b00      	cmp	r3, #0
 800aaca:	db04      	blt.n	800aad6 <_dtoa_r+0xa76>
 800aacc:	9906      	ldr	r1, [sp, #24]
 800aace:	430b      	orrs	r3, r1
 800aad0:	9904      	ldr	r1, [sp, #16]
 800aad2:	430b      	orrs	r3, r1
 800aad4:	d122      	bne.n	800ab1c <_dtoa_r+0xabc>
 800aad6:	2a00      	cmp	r2, #0
 800aad8:	ddee      	ble.n	800aab8 <_dtoa_r+0xa58>
 800aada:	ee18 1a10 	vmov	r1, s16
 800aade:	2201      	movs	r2, #1
 800aae0:	4620      	mov	r0, r4
 800aae2:	f000 fad7 	bl	800b094 <__lshift>
 800aae6:	4631      	mov	r1, r6
 800aae8:	ee08 0a10 	vmov	s16, r0
 800aaec:	f000 fb42 	bl	800b174 <__mcmp>
 800aaf0:	2800      	cmp	r0, #0
 800aaf2:	dc03      	bgt.n	800aafc <_dtoa_r+0xa9c>
 800aaf4:	d1e0      	bne.n	800aab8 <_dtoa_r+0xa58>
 800aaf6:	f01a 0f01 	tst.w	sl, #1
 800aafa:	d0dd      	beq.n	800aab8 <_dtoa_r+0xa58>
 800aafc:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800ab00:	d1d7      	bne.n	800aab2 <_dtoa_r+0xa52>
 800ab02:	2339      	movs	r3, #57	; 0x39
 800ab04:	f88b 3000 	strb.w	r3, [fp]
 800ab08:	462b      	mov	r3, r5
 800ab0a:	461d      	mov	r5, r3
 800ab0c:	3b01      	subs	r3, #1
 800ab0e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800ab12:	2a39      	cmp	r2, #57	; 0x39
 800ab14:	d071      	beq.n	800abfa <_dtoa_r+0xb9a>
 800ab16:	3201      	adds	r2, #1
 800ab18:	701a      	strb	r2, [r3, #0]
 800ab1a:	e746      	b.n	800a9aa <_dtoa_r+0x94a>
 800ab1c:	2a00      	cmp	r2, #0
 800ab1e:	dd07      	ble.n	800ab30 <_dtoa_r+0xad0>
 800ab20:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800ab24:	d0ed      	beq.n	800ab02 <_dtoa_r+0xaa2>
 800ab26:	f10a 0301 	add.w	r3, sl, #1
 800ab2a:	f88b 3000 	strb.w	r3, [fp]
 800ab2e:	e73c      	b.n	800a9aa <_dtoa_r+0x94a>
 800ab30:	9b05      	ldr	r3, [sp, #20]
 800ab32:	f809 ac01 	strb.w	sl, [r9, #-1]
 800ab36:	4599      	cmp	r9, r3
 800ab38:	d047      	beq.n	800abca <_dtoa_r+0xb6a>
 800ab3a:	ee18 1a10 	vmov	r1, s16
 800ab3e:	2300      	movs	r3, #0
 800ab40:	220a      	movs	r2, #10
 800ab42:	4620      	mov	r0, r4
 800ab44:	f000 f8f6 	bl	800ad34 <__multadd>
 800ab48:	45b8      	cmp	r8, r7
 800ab4a:	ee08 0a10 	vmov	s16, r0
 800ab4e:	f04f 0300 	mov.w	r3, #0
 800ab52:	f04f 020a 	mov.w	r2, #10
 800ab56:	4641      	mov	r1, r8
 800ab58:	4620      	mov	r0, r4
 800ab5a:	d106      	bne.n	800ab6a <_dtoa_r+0xb0a>
 800ab5c:	f000 f8ea 	bl	800ad34 <__multadd>
 800ab60:	4680      	mov	r8, r0
 800ab62:	4607      	mov	r7, r0
 800ab64:	f109 0901 	add.w	r9, r9, #1
 800ab68:	e772      	b.n	800aa50 <_dtoa_r+0x9f0>
 800ab6a:	f000 f8e3 	bl	800ad34 <__multadd>
 800ab6e:	4639      	mov	r1, r7
 800ab70:	4680      	mov	r8, r0
 800ab72:	2300      	movs	r3, #0
 800ab74:	220a      	movs	r2, #10
 800ab76:	4620      	mov	r0, r4
 800ab78:	f000 f8dc 	bl	800ad34 <__multadd>
 800ab7c:	4607      	mov	r7, r0
 800ab7e:	e7f1      	b.n	800ab64 <_dtoa_r+0xb04>
 800ab80:	9b03      	ldr	r3, [sp, #12]
 800ab82:	9302      	str	r3, [sp, #8]
 800ab84:	9d01      	ldr	r5, [sp, #4]
 800ab86:	ee18 0a10 	vmov	r0, s16
 800ab8a:	4631      	mov	r1, r6
 800ab8c:	f7ff f9dc 	bl	8009f48 <quorem>
 800ab90:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800ab94:	9b01      	ldr	r3, [sp, #4]
 800ab96:	f805 ab01 	strb.w	sl, [r5], #1
 800ab9a:	1aea      	subs	r2, r5, r3
 800ab9c:	9b02      	ldr	r3, [sp, #8]
 800ab9e:	4293      	cmp	r3, r2
 800aba0:	dd09      	ble.n	800abb6 <_dtoa_r+0xb56>
 800aba2:	ee18 1a10 	vmov	r1, s16
 800aba6:	2300      	movs	r3, #0
 800aba8:	220a      	movs	r2, #10
 800abaa:	4620      	mov	r0, r4
 800abac:	f000 f8c2 	bl	800ad34 <__multadd>
 800abb0:	ee08 0a10 	vmov	s16, r0
 800abb4:	e7e7      	b.n	800ab86 <_dtoa_r+0xb26>
 800abb6:	9b02      	ldr	r3, [sp, #8]
 800abb8:	2b00      	cmp	r3, #0
 800abba:	bfc8      	it	gt
 800abbc:	461d      	movgt	r5, r3
 800abbe:	9b01      	ldr	r3, [sp, #4]
 800abc0:	bfd8      	it	le
 800abc2:	2501      	movle	r5, #1
 800abc4:	441d      	add	r5, r3
 800abc6:	f04f 0800 	mov.w	r8, #0
 800abca:	ee18 1a10 	vmov	r1, s16
 800abce:	2201      	movs	r2, #1
 800abd0:	4620      	mov	r0, r4
 800abd2:	f000 fa5f 	bl	800b094 <__lshift>
 800abd6:	4631      	mov	r1, r6
 800abd8:	ee08 0a10 	vmov	s16, r0
 800abdc:	f000 faca 	bl	800b174 <__mcmp>
 800abe0:	2800      	cmp	r0, #0
 800abe2:	dc91      	bgt.n	800ab08 <_dtoa_r+0xaa8>
 800abe4:	d102      	bne.n	800abec <_dtoa_r+0xb8c>
 800abe6:	f01a 0f01 	tst.w	sl, #1
 800abea:	d18d      	bne.n	800ab08 <_dtoa_r+0xaa8>
 800abec:	462b      	mov	r3, r5
 800abee:	461d      	mov	r5, r3
 800abf0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800abf4:	2a30      	cmp	r2, #48	; 0x30
 800abf6:	d0fa      	beq.n	800abee <_dtoa_r+0xb8e>
 800abf8:	e6d7      	b.n	800a9aa <_dtoa_r+0x94a>
 800abfa:	9a01      	ldr	r2, [sp, #4]
 800abfc:	429a      	cmp	r2, r3
 800abfe:	d184      	bne.n	800ab0a <_dtoa_r+0xaaa>
 800ac00:	9b00      	ldr	r3, [sp, #0]
 800ac02:	3301      	adds	r3, #1
 800ac04:	9300      	str	r3, [sp, #0]
 800ac06:	2331      	movs	r3, #49	; 0x31
 800ac08:	7013      	strb	r3, [r2, #0]
 800ac0a:	e6ce      	b.n	800a9aa <_dtoa_r+0x94a>
 800ac0c:	4b09      	ldr	r3, [pc, #36]	; (800ac34 <_dtoa_r+0xbd4>)
 800ac0e:	f7ff ba95 	b.w	800a13c <_dtoa_r+0xdc>
 800ac12:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ac14:	2b00      	cmp	r3, #0
 800ac16:	f47f aa6e 	bne.w	800a0f6 <_dtoa_r+0x96>
 800ac1a:	4b07      	ldr	r3, [pc, #28]	; (800ac38 <_dtoa_r+0xbd8>)
 800ac1c:	f7ff ba8e 	b.w	800a13c <_dtoa_r+0xdc>
 800ac20:	9b02      	ldr	r3, [sp, #8]
 800ac22:	2b00      	cmp	r3, #0
 800ac24:	dcae      	bgt.n	800ab84 <_dtoa_r+0xb24>
 800ac26:	9b06      	ldr	r3, [sp, #24]
 800ac28:	2b02      	cmp	r3, #2
 800ac2a:	f73f aea8 	bgt.w	800a97e <_dtoa_r+0x91e>
 800ac2e:	e7a9      	b.n	800ab84 <_dtoa_r+0xb24>
 800ac30:	0800c55b 	.word	0x0800c55b
 800ac34:	0800c4b8 	.word	0x0800c4b8
 800ac38:	0800c4dc 	.word	0x0800c4dc

0800ac3c <_localeconv_r>:
 800ac3c:	4800      	ldr	r0, [pc, #0]	; (800ac40 <_localeconv_r+0x4>)
 800ac3e:	4770      	bx	lr
 800ac40:	20000160 	.word	0x20000160

0800ac44 <malloc>:
 800ac44:	4b02      	ldr	r3, [pc, #8]	; (800ac50 <malloc+0xc>)
 800ac46:	4601      	mov	r1, r0
 800ac48:	6818      	ldr	r0, [r3, #0]
 800ac4a:	f000 bc17 	b.w	800b47c <_malloc_r>
 800ac4e:	bf00      	nop
 800ac50:	2000000c 	.word	0x2000000c

0800ac54 <memcpy>:
 800ac54:	440a      	add	r2, r1
 800ac56:	4291      	cmp	r1, r2
 800ac58:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800ac5c:	d100      	bne.n	800ac60 <memcpy+0xc>
 800ac5e:	4770      	bx	lr
 800ac60:	b510      	push	{r4, lr}
 800ac62:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ac66:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ac6a:	4291      	cmp	r1, r2
 800ac6c:	d1f9      	bne.n	800ac62 <memcpy+0xe>
 800ac6e:	bd10      	pop	{r4, pc}

0800ac70 <_Balloc>:
 800ac70:	b570      	push	{r4, r5, r6, lr}
 800ac72:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800ac74:	4604      	mov	r4, r0
 800ac76:	460d      	mov	r5, r1
 800ac78:	b976      	cbnz	r6, 800ac98 <_Balloc+0x28>
 800ac7a:	2010      	movs	r0, #16
 800ac7c:	f7ff ffe2 	bl	800ac44 <malloc>
 800ac80:	4602      	mov	r2, r0
 800ac82:	6260      	str	r0, [r4, #36]	; 0x24
 800ac84:	b920      	cbnz	r0, 800ac90 <_Balloc+0x20>
 800ac86:	4b18      	ldr	r3, [pc, #96]	; (800ace8 <_Balloc+0x78>)
 800ac88:	4818      	ldr	r0, [pc, #96]	; (800acec <_Balloc+0x7c>)
 800ac8a:	2166      	movs	r1, #102	; 0x66
 800ac8c:	f000 fdd6 	bl	800b83c <__assert_func>
 800ac90:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ac94:	6006      	str	r6, [r0, #0]
 800ac96:	60c6      	str	r6, [r0, #12]
 800ac98:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800ac9a:	68f3      	ldr	r3, [r6, #12]
 800ac9c:	b183      	cbz	r3, 800acc0 <_Balloc+0x50>
 800ac9e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800aca0:	68db      	ldr	r3, [r3, #12]
 800aca2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800aca6:	b9b8      	cbnz	r0, 800acd8 <_Balloc+0x68>
 800aca8:	2101      	movs	r1, #1
 800acaa:	fa01 f605 	lsl.w	r6, r1, r5
 800acae:	1d72      	adds	r2, r6, #5
 800acb0:	0092      	lsls	r2, r2, #2
 800acb2:	4620      	mov	r0, r4
 800acb4:	f000 fb60 	bl	800b378 <_calloc_r>
 800acb8:	b160      	cbz	r0, 800acd4 <_Balloc+0x64>
 800acba:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800acbe:	e00e      	b.n	800acde <_Balloc+0x6e>
 800acc0:	2221      	movs	r2, #33	; 0x21
 800acc2:	2104      	movs	r1, #4
 800acc4:	4620      	mov	r0, r4
 800acc6:	f000 fb57 	bl	800b378 <_calloc_r>
 800acca:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800accc:	60f0      	str	r0, [r6, #12]
 800acce:	68db      	ldr	r3, [r3, #12]
 800acd0:	2b00      	cmp	r3, #0
 800acd2:	d1e4      	bne.n	800ac9e <_Balloc+0x2e>
 800acd4:	2000      	movs	r0, #0
 800acd6:	bd70      	pop	{r4, r5, r6, pc}
 800acd8:	6802      	ldr	r2, [r0, #0]
 800acda:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800acde:	2300      	movs	r3, #0
 800ace0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800ace4:	e7f7      	b.n	800acd6 <_Balloc+0x66>
 800ace6:	bf00      	nop
 800ace8:	0800c4e9 	.word	0x0800c4e9
 800acec:	0800c56c 	.word	0x0800c56c

0800acf0 <_Bfree>:
 800acf0:	b570      	push	{r4, r5, r6, lr}
 800acf2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800acf4:	4605      	mov	r5, r0
 800acf6:	460c      	mov	r4, r1
 800acf8:	b976      	cbnz	r6, 800ad18 <_Bfree+0x28>
 800acfa:	2010      	movs	r0, #16
 800acfc:	f7ff ffa2 	bl	800ac44 <malloc>
 800ad00:	4602      	mov	r2, r0
 800ad02:	6268      	str	r0, [r5, #36]	; 0x24
 800ad04:	b920      	cbnz	r0, 800ad10 <_Bfree+0x20>
 800ad06:	4b09      	ldr	r3, [pc, #36]	; (800ad2c <_Bfree+0x3c>)
 800ad08:	4809      	ldr	r0, [pc, #36]	; (800ad30 <_Bfree+0x40>)
 800ad0a:	218a      	movs	r1, #138	; 0x8a
 800ad0c:	f000 fd96 	bl	800b83c <__assert_func>
 800ad10:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ad14:	6006      	str	r6, [r0, #0]
 800ad16:	60c6      	str	r6, [r0, #12]
 800ad18:	b13c      	cbz	r4, 800ad2a <_Bfree+0x3a>
 800ad1a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800ad1c:	6862      	ldr	r2, [r4, #4]
 800ad1e:	68db      	ldr	r3, [r3, #12]
 800ad20:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800ad24:	6021      	str	r1, [r4, #0]
 800ad26:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800ad2a:	bd70      	pop	{r4, r5, r6, pc}
 800ad2c:	0800c4e9 	.word	0x0800c4e9
 800ad30:	0800c56c 	.word	0x0800c56c

0800ad34 <__multadd>:
 800ad34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ad38:	690d      	ldr	r5, [r1, #16]
 800ad3a:	4607      	mov	r7, r0
 800ad3c:	460c      	mov	r4, r1
 800ad3e:	461e      	mov	r6, r3
 800ad40:	f101 0c14 	add.w	ip, r1, #20
 800ad44:	2000      	movs	r0, #0
 800ad46:	f8dc 3000 	ldr.w	r3, [ip]
 800ad4a:	b299      	uxth	r1, r3
 800ad4c:	fb02 6101 	mla	r1, r2, r1, r6
 800ad50:	0c1e      	lsrs	r6, r3, #16
 800ad52:	0c0b      	lsrs	r3, r1, #16
 800ad54:	fb02 3306 	mla	r3, r2, r6, r3
 800ad58:	b289      	uxth	r1, r1
 800ad5a:	3001      	adds	r0, #1
 800ad5c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800ad60:	4285      	cmp	r5, r0
 800ad62:	f84c 1b04 	str.w	r1, [ip], #4
 800ad66:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800ad6a:	dcec      	bgt.n	800ad46 <__multadd+0x12>
 800ad6c:	b30e      	cbz	r6, 800adb2 <__multadd+0x7e>
 800ad6e:	68a3      	ldr	r3, [r4, #8]
 800ad70:	42ab      	cmp	r3, r5
 800ad72:	dc19      	bgt.n	800ada8 <__multadd+0x74>
 800ad74:	6861      	ldr	r1, [r4, #4]
 800ad76:	4638      	mov	r0, r7
 800ad78:	3101      	adds	r1, #1
 800ad7a:	f7ff ff79 	bl	800ac70 <_Balloc>
 800ad7e:	4680      	mov	r8, r0
 800ad80:	b928      	cbnz	r0, 800ad8e <__multadd+0x5a>
 800ad82:	4602      	mov	r2, r0
 800ad84:	4b0c      	ldr	r3, [pc, #48]	; (800adb8 <__multadd+0x84>)
 800ad86:	480d      	ldr	r0, [pc, #52]	; (800adbc <__multadd+0x88>)
 800ad88:	21b5      	movs	r1, #181	; 0xb5
 800ad8a:	f000 fd57 	bl	800b83c <__assert_func>
 800ad8e:	6922      	ldr	r2, [r4, #16]
 800ad90:	3202      	adds	r2, #2
 800ad92:	f104 010c 	add.w	r1, r4, #12
 800ad96:	0092      	lsls	r2, r2, #2
 800ad98:	300c      	adds	r0, #12
 800ad9a:	f7ff ff5b 	bl	800ac54 <memcpy>
 800ad9e:	4621      	mov	r1, r4
 800ada0:	4638      	mov	r0, r7
 800ada2:	f7ff ffa5 	bl	800acf0 <_Bfree>
 800ada6:	4644      	mov	r4, r8
 800ada8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800adac:	3501      	adds	r5, #1
 800adae:	615e      	str	r6, [r3, #20]
 800adb0:	6125      	str	r5, [r4, #16]
 800adb2:	4620      	mov	r0, r4
 800adb4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800adb8:	0800c55b 	.word	0x0800c55b
 800adbc:	0800c56c 	.word	0x0800c56c

0800adc0 <__hi0bits>:
 800adc0:	0c03      	lsrs	r3, r0, #16
 800adc2:	041b      	lsls	r3, r3, #16
 800adc4:	b9d3      	cbnz	r3, 800adfc <__hi0bits+0x3c>
 800adc6:	0400      	lsls	r0, r0, #16
 800adc8:	2310      	movs	r3, #16
 800adca:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800adce:	bf04      	itt	eq
 800add0:	0200      	lsleq	r0, r0, #8
 800add2:	3308      	addeq	r3, #8
 800add4:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800add8:	bf04      	itt	eq
 800adda:	0100      	lsleq	r0, r0, #4
 800addc:	3304      	addeq	r3, #4
 800adde:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800ade2:	bf04      	itt	eq
 800ade4:	0080      	lsleq	r0, r0, #2
 800ade6:	3302      	addeq	r3, #2
 800ade8:	2800      	cmp	r0, #0
 800adea:	db05      	blt.n	800adf8 <__hi0bits+0x38>
 800adec:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800adf0:	f103 0301 	add.w	r3, r3, #1
 800adf4:	bf08      	it	eq
 800adf6:	2320      	moveq	r3, #32
 800adf8:	4618      	mov	r0, r3
 800adfa:	4770      	bx	lr
 800adfc:	2300      	movs	r3, #0
 800adfe:	e7e4      	b.n	800adca <__hi0bits+0xa>

0800ae00 <__lo0bits>:
 800ae00:	6803      	ldr	r3, [r0, #0]
 800ae02:	f013 0207 	ands.w	r2, r3, #7
 800ae06:	4601      	mov	r1, r0
 800ae08:	d00b      	beq.n	800ae22 <__lo0bits+0x22>
 800ae0a:	07da      	lsls	r2, r3, #31
 800ae0c:	d423      	bmi.n	800ae56 <__lo0bits+0x56>
 800ae0e:	0798      	lsls	r0, r3, #30
 800ae10:	bf49      	itett	mi
 800ae12:	085b      	lsrmi	r3, r3, #1
 800ae14:	089b      	lsrpl	r3, r3, #2
 800ae16:	2001      	movmi	r0, #1
 800ae18:	600b      	strmi	r3, [r1, #0]
 800ae1a:	bf5c      	itt	pl
 800ae1c:	600b      	strpl	r3, [r1, #0]
 800ae1e:	2002      	movpl	r0, #2
 800ae20:	4770      	bx	lr
 800ae22:	b298      	uxth	r0, r3
 800ae24:	b9a8      	cbnz	r0, 800ae52 <__lo0bits+0x52>
 800ae26:	0c1b      	lsrs	r3, r3, #16
 800ae28:	2010      	movs	r0, #16
 800ae2a:	b2da      	uxtb	r2, r3
 800ae2c:	b90a      	cbnz	r2, 800ae32 <__lo0bits+0x32>
 800ae2e:	3008      	adds	r0, #8
 800ae30:	0a1b      	lsrs	r3, r3, #8
 800ae32:	071a      	lsls	r2, r3, #28
 800ae34:	bf04      	itt	eq
 800ae36:	091b      	lsreq	r3, r3, #4
 800ae38:	3004      	addeq	r0, #4
 800ae3a:	079a      	lsls	r2, r3, #30
 800ae3c:	bf04      	itt	eq
 800ae3e:	089b      	lsreq	r3, r3, #2
 800ae40:	3002      	addeq	r0, #2
 800ae42:	07da      	lsls	r2, r3, #31
 800ae44:	d403      	bmi.n	800ae4e <__lo0bits+0x4e>
 800ae46:	085b      	lsrs	r3, r3, #1
 800ae48:	f100 0001 	add.w	r0, r0, #1
 800ae4c:	d005      	beq.n	800ae5a <__lo0bits+0x5a>
 800ae4e:	600b      	str	r3, [r1, #0]
 800ae50:	4770      	bx	lr
 800ae52:	4610      	mov	r0, r2
 800ae54:	e7e9      	b.n	800ae2a <__lo0bits+0x2a>
 800ae56:	2000      	movs	r0, #0
 800ae58:	4770      	bx	lr
 800ae5a:	2020      	movs	r0, #32
 800ae5c:	4770      	bx	lr
	...

0800ae60 <__i2b>:
 800ae60:	b510      	push	{r4, lr}
 800ae62:	460c      	mov	r4, r1
 800ae64:	2101      	movs	r1, #1
 800ae66:	f7ff ff03 	bl	800ac70 <_Balloc>
 800ae6a:	4602      	mov	r2, r0
 800ae6c:	b928      	cbnz	r0, 800ae7a <__i2b+0x1a>
 800ae6e:	4b05      	ldr	r3, [pc, #20]	; (800ae84 <__i2b+0x24>)
 800ae70:	4805      	ldr	r0, [pc, #20]	; (800ae88 <__i2b+0x28>)
 800ae72:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800ae76:	f000 fce1 	bl	800b83c <__assert_func>
 800ae7a:	2301      	movs	r3, #1
 800ae7c:	6144      	str	r4, [r0, #20]
 800ae7e:	6103      	str	r3, [r0, #16]
 800ae80:	bd10      	pop	{r4, pc}
 800ae82:	bf00      	nop
 800ae84:	0800c55b 	.word	0x0800c55b
 800ae88:	0800c56c 	.word	0x0800c56c

0800ae8c <__multiply>:
 800ae8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ae90:	4691      	mov	r9, r2
 800ae92:	690a      	ldr	r2, [r1, #16]
 800ae94:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800ae98:	429a      	cmp	r2, r3
 800ae9a:	bfb8      	it	lt
 800ae9c:	460b      	movlt	r3, r1
 800ae9e:	460c      	mov	r4, r1
 800aea0:	bfbc      	itt	lt
 800aea2:	464c      	movlt	r4, r9
 800aea4:	4699      	movlt	r9, r3
 800aea6:	6927      	ldr	r7, [r4, #16]
 800aea8:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800aeac:	68a3      	ldr	r3, [r4, #8]
 800aeae:	6861      	ldr	r1, [r4, #4]
 800aeb0:	eb07 060a 	add.w	r6, r7, sl
 800aeb4:	42b3      	cmp	r3, r6
 800aeb6:	b085      	sub	sp, #20
 800aeb8:	bfb8      	it	lt
 800aeba:	3101      	addlt	r1, #1
 800aebc:	f7ff fed8 	bl	800ac70 <_Balloc>
 800aec0:	b930      	cbnz	r0, 800aed0 <__multiply+0x44>
 800aec2:	4602      	mov	r2, r0
 800aec4:	4b44      	ldr	r3, [pc, #272]	; (800afd8 <__multiply+0x14c>)
 800aec6:	4845      	ldr	r0, [pc, #276]	; (800afdc <__multiply+0x150>)
 800aec8:	f240 115d 	movw	r1, #349	; 0x15d
 800aecc:	f000 fcb6 	bl	800b83c <__assert_func>
 800aed0:	f100 0514 	add.w	r5, r0, #20
 800aed4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800aed8:	462b      	mov	r3, r5
 800aeda:	2200      	movs	r2, #0
 800aedc:	4543      	cmp	r3, r8
 800aede:	d321      	bcc.n	800af24 <__multiply+0x98>
 800aee0:	f104 0314 	add.w	r3, r4, #20
 800aee4:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800aee8:	f109 0314 	add.w	r3, r9, #20
 800aeec:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800aef0:	9202      	str	r2, [sp, #8]
 800aef2:	1b3a      	subs	r2, r7, r4
 800aef4:	3a15      	subs	r2, #21
 800aef6:	f022 0203 	bic.w	r2, r2, #3
 800aefa:	3204      	adds	r2, #4
 800aefc:	f104 0115 	add.w	r1, r4, #21
 800af00:	428f      	cmp	r7, r1
 800af02:	bf38      	it	cc
 800af04:	2204      	movcc	r2, #4
 800af06:	9201      	str	r2, [sp, #4]
 800af08:	9a02      	ldr	r2, [sp, #8]
 800af0a:	9303      	str	r3, [sp, #12]
 800af0c:	429a      	cmp	r2, r3
 800af0e:	d80c      	bhi.n	800af2a <__multiply+0x9e>
 800af10:	2e00      	cmp	r6, #0
 800af12:	dd03      	ble.n	800af1c <__multiply+0x90>
 800af14:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800af18:	2b00      	cmp	r3, #0
 800af1a:	d05a      	beq.n	800afd2 <__multiply+0x146>
 800af1c:	6106      	str	r6, [r0, #16]
 800af1e:	b005      	add	sp, #20
 800af20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800af24:	f843 2b04 	str.w	r2, [r3], #4
 800af28:	e7d8      	b.n	800aedc <__multiply+0x50>
 800af2a:	f8b3 a000 	ldrh.w	sl, [r3]
 800af2e:	f1ba 0f00 	cmp.w	sl, #0
 800af32:	d024      	beq.n	800af7e <__multiply+0xf2>
 800af34:	f104 0e14 	add.w	lr, r4, #20
 800af38:	46a9      	mov	r9, r5
 800af3a:	f04f 0c00 	mov.w	ip, #0
 800af3e:	f85e 2b04 	ldr.w	r2, [lr], #4
 800af42:	f8d9 1000 	ldr.w	r1, [r9]
 800af46:	fa1f fb82 	uxth.w	fp, r2
 800af4a:	b289      	uxth	r1, r1
 800af4c:	fb0a 110b 	mla	r1, sl, fp, r1
 800af50:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800af54:	f8d9 2000 	ldr.w	r2, [r9]
 800af58:	4461      	add	r1, ip
 800af5a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800af5e:	fb0a c20b 	mla	r2, sl, fp, ip
 800af62:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800af66:	b289      	uxth	r1, r1
 800af68:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800af6c:	4577      	cmp	r7, lr
 800af6e:	f849 1b04 	str.w	r1, [r9], #4
 800af72:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800af76:	d8e2      	bhi.n	800af3e <__multiply+0xb2>
 800af78:	9a01      	ldr	r2, [sp, #4]
 800af7a:	f845 c002 	str.w	ip, [r5, r2]
 800af7e:	9a03      	ldr	r2, [sp, #12]
 800af80:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800af84:	3304      	adds	r3, #4
 800af86:	f1b9 0f00 	cmp.w	r9, #0
 800af8a:	d020      	beq.n	800afce <__multiply+0x142>
 800af8c:	6829      	ldr	r1, [r5, #0]
 800af8e:	f104 0c14 	add.w	ip, r4, #20
 800af92:	46ae      	mov	lr, r5
 800af94:	f04f 0a00 	mov.w	sl, #0
 800af98:	f8bc b000 	ldrh.w	fp, [ip]
 800af9c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800afa0:	fb09 220b 	mla	r2, r9, fp, r2
 800afa4:	4492      	add	sl, r2
 800afa6:	b289      	uxth	r1, r1
 800afa8:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800afac:	f84e 1b04 	str.w	r1, [lr], #4
 800afb0:	f85c 2b04 	ldr.w	r2, [ip], #4
 800afb4:	f8be 1000 	ldrh.w	r1, [lr]
 800afb8:	0c12      	lsrs	r2, r2, #16
 800afba:	fb09 1102 	mla	r1, r9, r2, r1
 800afbe:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800afc2:	4567      	cmp	r7, ip
 800afc4:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800afc8:	d8e6      	bhi.n	800af98 <__multiply+0x10c>
 800afca:	9a01      	ldr	r2, [sp, #4]
 800afcc:	50a9      	str	r1, [r5, r2]
 800afce:	3504      	adds	r5, #4
 800afd0:	e79a      	b.n	800af08 <__multiply+0x7c>
 800afd2:	3e01      	subs	r6, #1
 800afd4:	e79c      	b.n	800af10 <__multiply+0x84>
 800afd6:	bf00      	nop
 800afd8:	0800c55b 	.word	0x0800c55b
 800afdc:	0800c56c 	.word	0x0800c56c

0800afe0 <__pow5mult>:
 800afe0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800afe4:	4615      	mov	r5, r2
 800afe6:	f012 0203 	ands.w	r2, r2, #3
 800afea:	4606      	mov	r6, r0
 800afec:	460f      	mov	r7, r1
 800afee:	d007      	beq.n	800b000 <__pow5mult+0x20>
 800aff0:	4c25      	ldr	r4, [pc, #148]	; (800b088 <__pow5mult+0xa8>)
 800aff2:	3a01      	subs	r2, #1
 800aff4:	2300      	movs	r3, #0
 800aff6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800affa:	f7ff fe9b 	bl	800ad34 <__multadd>
 800affe:	4607      	mov	r7, r0
 800b000:	10ad      	asrs	r5, r5, #2
 800b002:	d03d      	beq.n	800b080 <__pow5mult+0xa0>
 800b004:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800b006:	b97c      	cbnz	r4, 800b028 <__pow5mult+0x48>
 800b008:	2010      	movs	r0, #16
 800b00a:	f7ff fe1b 	bl	800ac44 <malloc>
 800b00e:	4602      	mov	r2, r0
 800b010:	6270      	str	r0, [r6, #36]	; 0x24
 800b012:	b928      	cbnz	r0, 800b020 <__pow5mult+0x40>
 800b014:	4b1d      	ldr	r3, [pc, #116]	; (800b08c <__pow5mult+0xac>)
 800b016:	481e      	ldr	r0, [pc, #120]	; (800b090 <__pow5mult+0xb0>)
 800b018:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800b01c:	f000 fc0e 	bl	800b83c <__assert_func>
 800b020:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800b024:	6004      	str	r4, [r0, #0]
 800b026:	60c4      	str	r4, [r0, #12]
 800b028:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800b02c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800b030:	b94c      	cbnz	r4, 800b046 <__pow5mult+0x66>
 800b032:	f240 2171 	movw	r1, #625	; 0x271
 800b036:	4630      	mov	r0, r6
 800b038:	f7ff ff12 	bl	800ae60 <__i2b>
 800b03c:	2300      	movs	r3, #0
 800b03e:	f8c8 0008 	str.w	r0, [r8, #8]
 800b042:	4604      	mov	r4, r0
 800b044:	6003      	str	r3, [r0, #0]
 800b046:	f04f 0900 	mov.w	r9, #0
 800b04a:	07eb      	lsls	r3, r5, #31
 800b04c:	d50a      	bpl.n	800b064 <__pow5mult+0x84>
 800b04e:	4639      	mov	r1, r7
 800b050:	4622      	mov	r2, r4
 800b052:	4630      	mov	r0, r6
 800b054:	f7ff ff1a 	bl	800ae8c <__multiply>
 800b058:	4639      	mov	r1, r7
 800b05a:	4680      	mov	r8, r0
 800b05c:	4630      	mov	r0, r6
 800b05e:	f7ff fe47 	bl	800acf0 <_Bfree>
 800b062:	4647      	mov	r7, r8
 800b064:	106d      	asrs	r5, r5, #1
 800b066:	d00b      	beq.n	800b080 <__pow5mult+0xa0>
 800b068:	6820      	ldr	r0, [r4, #0]
 800b06a:	b938      	cbnz	r0, 800b07c <__pow5mult+0x9c>
 800b06c:	4622      	mov	r2, r4
 800b06e:	4621      	mov	r1, r4
 800b070:	4630      	mov	r0, r6
 800b072:	f7ff ff0b 	bl	800ae8c <__multiply>
 800b076:	6020      	str	r0, [r4, #0]
 800b078:	f8c0 9000 	str.w	r9, [r0]
 800b07c:	4604      	mov	r4, r0
 800b07e:	e7e4      	b.n	800b04a <__pow5mult+0x6a>
 800b080:	4638      	mov	r0, r7
 800b082:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b086:	bf00      	nop
 800b088:	0800c6b8 	.word	0x0800c6b8
 800b08c:	0800c4e9 	.word	0x0800c4e9
 800b090:	0800c56c 	.word	0x0800c56c

0800b094 <__lshift>:
 800b094:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b098:	460c      	mov	r4, r1
 800b09a:	6849      	ldr	r1, [r1, #4]
 800b09c:	6923      	ldr	r3, [r4, #16]
 800b09e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800b0a2:	68a3      	ldr	r3, [r4, #8]
 800b0a4:	4607      	mov	r7, r0
 800b0a6:	4691      	mov	r9, r2
 800b0a8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800b0ac:	f108 0601 	add.w	r6, r8, #1
 800b0b0:	42b3      	cmp	r3, r6
 800b0b2:	db0b      	blt.n	800b0cc <__lshift+0x38>
 800b0b4:	4638      	mov	r0, r7
 800b0b6:	f7ff fddb 	bl	800ac70 <_Balloc>
 800b0ba:	4605      	mov	r5, r0
 800b0bc:	b948      	cbnz	r0, 800b0d2 <__lshift+0x3e>
 800b0be:	4602      	mov	r2, r0
 800b0c0:	4b2a      	ldr	r3, [pc, #168]	; (800b16c <__lshift+0xd8>)
 800b0c2:	482b      	ldr	r0, [pc, #172]	; (800b170 <__lshift+0xdc>)
 800b0c4:	f240 11d9 	movw	r1, #473	; 0x1d9
 800b0c8:	f000 fbb8 	bl	800b83c <__assert_func>
 800b0cc:	3101      	adds	r1, #1
 800b0ce:	005b      	lsls	r3, r3, #1
 800b0d0:	e7ee      	b.n	800b0b0 <__lshift+0x1c>
 800b0d2:	2300      	movs	r3, #0
 800b0d4:	f100 0114 	add.w	r1, r0, #20
 800b0d8:	f100 0210 	add.w	r2, r0, #16
 800b0dc:	4618      	mov	r0, r3
 800b0de:	4553      	cmp	r3, sl
 800b0e0:	db37      	blt.n	800b152 <__lshift+0xbe>
 800b0e2:	6920      	ldr	r0, [r4, #16]
 800b0e4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800b0e8:	f104 0314 	add.w	r3, r4, #20
 800b0ec:	f019 091f 	ands.w	r9, r9, #31
 800b0f0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800b0f4:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800b0f8:	d02f      	beq.n	800b15a <__lshift+0xc6>
 800b0fa:	f1c9 0e20 	rsb	lr, r9, #32
 800b0fe:	468a      	mov	sl, r1
 800b100:	f04f 0c00 	mov.w	ip, #0
 800b104:	681a      	ldr	r2, [r3, #0]
 800b106:	fa02 f209 	lsl.w	r2, r2, r9
 800b10a:	ea42 020c 	orr.w	r2, r2, ip
 800b10e:	f84a 2b04 	str.w	r2, [sl], #4
 800b112:	f853 2b04 	ldr.w	r2, [r3], #4
 800b116:	4298      	cmp	r0, r3
 800b118:	fa22 fc0e 	lsr.w	ip, r2, lr
 800b11c:	d8f2      	bhi.n	800b104 <__lshift+0x70>
 800b11e:	1b03      	subs	r3, r0, r4
 800b120:	3b15      	subs	r3, #21
 800b122:	f023 0303 	bic.w	r3, r3, #3
 800b126:	3304      	adds	r3, #4
 800b128:	f104 0215 	add.w	r2, r4, #21
 800b12c:	4290      	cmp	r0, r2
 800b12e:	bf38      	it	cc
 800b130:	2304      	movcc	r3, #4
 800b132:	f841 c003 	str.w	ip, [r1, r3]
 800b136:	f1bc 0f00 	cmp.w	ip, #0
 800b13a:	d001      	beq.n	800b140 <__lshift+0xac>
 800b13c:	f108 0602 	add.w	r6, r8, #2
 800b140:	3e01      	subs	r6, #1
 800b142:	4638      	mov	r0, r7
 800b144:	612e      	str	r6, [r5, #16]
 800b146:	4621      	mov	r1, r4
 800b148:	f7ff fdd2 	bl	800acf0 <_Bfree>
 800b14c:	4628      	mov	r0, r5
 800b14e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b152:	f842 0f04 	str.w	r0, [r2, #4]!
 800b156:	3301      	adds	r3, #1
 800b158:	e7c1      	b.n	800b0de <__lshift+0x4a>
 800b15a:	3904      	subs	r1, #4
 800b15c:	f853 2b04 	ldr.w	r2, [r3], #4
 800b160:	f841 2f04 	str.w	r2, [r1, #4]!
 800b164:	4298      	cmp	r0, r3
 800b166:	d8f9      	bhi.n	800b15c <__lshift+0xc8>
 800b168:	e7ea      	b.n	800b140 <__lshift+0xac>
 800b16a:	bf00      	nop
 800b16c:	0800c55b 	.word	0x0800c55b
 800b170:	0800c56c 	.word	0x0800c56c

0800b174 <__mcmp>:
 800b174:	b530      	push	{r4, r5, lr}
 800b176:	6902      	ldr	r2, [r0, #16]
 800b178:	690c      	ldr	r4, [r1, #16]
 800b17a:	1b12      	subs	r2, r2, r4
 800b17c:	d10e      	bne.n	800b19c <__mcmp+0x28>
 800b17e:	f100 0314 	add.w	r3, r0, #20
 800b182:	3114      	adds	r1, #20
 800b184:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800b188:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800b18c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800b190:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800b194:	42a5      	cmp	r5, r4
 800b196:	d003      	beq.n	800b1a0 <__mcmp+0x2c>
 800b198:	d305      	bcc.n	800b1a6 <__mcmp+0x32>
 800b19a:	2201      	movs	r2, #1
 800b19c:	4610      	mov	r0, r2
 800b19e:	bd30      	pop	{r4, r5, pc}
 800b1a0:	4283      	cmp	r3, r0
 800b1a2:	d3f3      	bcc.n	800b18c <__mcmp+0x18>
 800b1a4:	e7fa      	b.n	800b19c <__mcmp+0x28>
 800b1a6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b1aa:	e7f7      	b.n	800b19c <__mcmp+0x28>

0800b1ac <__mdiff>:
 800b1ac:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b1b0:	460c      	mov	r4, r1
 800b1b2:	4606      	mov	r6, r0
 800b1b4:	4611      	mov	r1, r2
 800b1b6:	4620      	mov	r0, r4
 800b1b8:	4690      	mov	r8, r2
 800b1ba:	f7ff ffdb 	bl	800b174 <__mcmp>
 800b1be:	1e05      	subs	r5, r0, #0
 800b1c0:	d110      	bne.n	800b1e4 <__mdiff+0x38>
 800b1c2:	4629      	mov	r1, r5
 800b1c4:	4630      	mov	r0, r6
 800b1c6:	f7ff fd53 	bl	800ac70 <_Balloc>
 800b1ca:	b930      	cbnz	r0, 800b1da <__mdiff+0x2e>
 800b1cc:	4b3a      	ldr	r3, [pc, #232]	; (800b2b8 <__mdiff+0x10c>)
 800b1ce:	4602      	mov	r2, r0
 800b1d0:	f240 2132 	movw	r1, #562	; 0x232
 800b1d4:	4839      	ldr	r0, [pc, #228]	; (800b2bc <__mdiff+0x110>)
 800b1d6:	f000 fb31 	bl	800b83c <__assert_func>
 800b1da:	2301      	movs	r3, #1
 800b1dc:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800b1e0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b1e4:	bfa4      	itt	ge
 800b1e6:	4643      	movge	r3, r8
 800b1e8:	46a0      	movge	r8, r4
 800b1ea:	4630      	mov	r0, r6
 800b1ec:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800b1f0:	bfa6      	itte	ge
 800b1f2:	461c      	movge	r4, r3
 800b1f4:	2500      	movge	r5, #0
 800b1f6:	2501      	movlt	r5, #1
 800b1f8:	f7ff fd3a 	bl	800ac70 <_Balloc>
 800b1fc:	b920      	cbnz	r0, 800b208 <__mdiff+0x5c>
 800b1fe:	4b2e      	ldr	r3, [pc, #184]	; (800b2b8 <__mdiff+0x10c>)
 800b200:	4602      	mov	r2, r0
 800b202:	f44f 7110 	mov.w	r1, #576	; 0x240
 800b206:	e7e5      	b.n	800b1d4 <__mdiff+0x28>
 800b208:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800b20c:	6926      	ldr	r6, [r4, #16]
 800b20e:	60c5      	str	r5, [r0, #12]
 800b210:	f104 0914 	add.w	r9, r4, #20
 800b214:	f108 0514 	add.w	r5, r8, #20
 800b218:	f100 0e14 	add.w	lr, r0, #20
 800b21c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800b220:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800b224:	f108 0210 	add.w	r2, r8, #16
 800b228:	46f2      	mov	sl, lr
 800b22a:	2100      	movs	r1, #0
 800b22c:	f859 3b04 	ldr.w	r3, [r9], #4
 800b230:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800b234:	fa1f f883 	uxth.w	r8, r3
 800b238:	fa11 f18b 	uxtah	r1, r1, fp
 800b23c:	0c1b      	lsrs	r3, r3, #16
 800b23e:	eba1 0808 	sub.w	r8, r1, r8
 800b242:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800b246:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800b24a:	fa1f f888 	uxth.w	r8, r8
 800b24e:	1419      	asrs	r1, r3, #16
 800b250:	454e      	cmp	r6, r9
 800b252:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800b256:	f84a 3b04 	str.w	r3, [sl], #4
 800b25a:	d8e7      	bhi.n	800b22c <__mdiff+0x80>
 800b25c:	1b33      	subs	r3, r6, r4
 800b25e:	3b15      	subs	r3, #21
 800b260:	f023 0303 	bic.w	r3, r3, #3
 800b264:	3304      	adds	r3, #4
 800b266:	3415      	adds	r4, #21
 800b268:	42a6      	cmp	r6, r4
 800b26a:	bf38      	it	cc
 800b26c:	2304      	movcc	r3, #4
 800b26e:	441d      	add	r5, r3
 800b270:	4473      	add	r3, lr
 800b272:	469e      	mov	lr, r3
 800b274:	462e      	mov	r6, r5
 800b276:	4566      	cmp	r6, ip
 800b278:	d30e      	bcc.n	800b298 <__mdiff+0xec>
 800b27a:	f10c 0203 	add.w	r2, ip, #3
 800b27e:	1b52      	subs	r2, r2, r5
 800b280:	f022 0203 	bic.w	r2, r2, #3
 800b284:	3d03      	subs	r5, #3
 800b286:	45ac      	cmp	ip, r5
 800b288:	bf38      	it	cc
 800b28a:	2200      	movcc	r2, #0
 800b28c:	441a      	add	r2, r3
 800b28e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800b292:	b17b      	cbz	r3, 800b2b4 <__mdiff+0x108>
 800b294:	6107      	str	r7, [r0, #16]
 800b296:	e7a3      	b.n	800b1e0 <__mdiff+0x34>
 800b298:	f856 8b04 	ldr.w	r8, [r6], #4
 800b29c:	fa11 f288 	uxtah	r2, r1, r8
 800b2a0:	1414      	asrs	r4, r2, #16
 800b2a2:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800b2a6:	b292      	uxth	r2, r2
 800b2a8:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800b2ac:	f84e 2b04 	str.w	r2, [lr], #4
 800b2b0:	1421      	asrs	r1, r4, #16
 800b2b2:	e7e0      	b.n	800b276 <__mdiff+0xca>
 800b2b4:	3f01      	subs	r7, #1
 800b2b6:	e7ea      	b.n	800b28e <__mdiff+0xe2>
 800b2b8:	0800c55b 	.word	0x0800c55b
 800b2bc:	0800c56c 	.word	0x0800c56c

0800b2c0 <__d2b>:
 800b2c0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800b2c4:	4689      	mov	r9, r1
 800b2c6:	2101      	movs	r1, #1
 800b2c8:	ec57 6b10 	vmov	r6, r7, d0
 800b2cc:	4690      	mov	r8, r2
 800b2ce:	f7ff fccf 	bl	800ac70 <_Balloc>
 800b2d2:	4604      	mov	r4, r0
 800b2d4:	b930      	cbnz	r0, 800b2e4 <__d2b+0x24>
 800b2d6:	4602      	mov	r2, r0
 800b2d8:	4b25      	ldr	r3, [pc, #148]	; (800b370 <__d2b+0xb0>)
 800b2da:	4826      	ldr	r0, [pc, #152]	; (800b374 <__d2b+0xb4>)
 800b2dc:	f240 310a 	movw	r1, #778	; 0x30a
 800b2e0:	f000 faac 	bl	800b83c <__assert_func>
 800b2e4:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800b2e8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800b2ec:	bb35      	cbnz	r5, 800b33c <__d2b+0x7c>
 800b2ee:	2e00      	cmp	r6, #0
 800b2f0:	9301      	str	r3, [sp, #4]
 800b2f2:	d028      	beq.n	800b346 <__d2b+0x86>
 800b2f4:	4668      	mov	r0, sp
 800b2f6:	9600      	str	r6, [sp, #0]
 800b2f8:	f7ff fd82 	bl	800ae00 <__lo0bits>
 800b2fc:	9900      	ldr	r1, [sp, #0]
 800b2fe:	b300      	cbz	r0, 800b342 <__d2b+0x82>
 800b300:	9a01      	ldr	r2, [sp, #4]
 800b302:	f1c0 0320 	rsb	r3, r0, #32
 800b306:	fa02 f303 	lsl.w	r3, r2, r3
 800b30a:	430b      	orrs	r3, r1
 800b30c:	40c2      	lsrs	r2, r0
 800b30e:	6163      	str	r3, [r4, #20]
 800b310:	9201      	str	r2, [sp, #4]
 800b312:	9b01      	ldr	r3, [sp, #4]
 800b314:	61a3      	str	r3, [r4, #24]
 800b316:	2b00      	cmp	r3, #0
 800b318:	bf14      	ite	ne
 800b31a:	2202      	movne	r2, #2
 800b31c:	2201      	moveq	r2, #1
 800b31e:	6122      	str	r2, [r4, #16]
 800b320:	b1d5      	cbz	r5, 800b358 <__d2b+0x98>
 800b322:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800b326:	4405      	add	r5, r0
 800b328:	f8c9 5000 	str.w	r5, [r9]
 800b32c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800b330:	f8c8 0000 	str.w	r0, [r8]
 800b334:	4620      	mov	r0, r4
 800b336:	b003      	add	sp, #12
 800b338:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b33c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b340:	e7d5      	b.n	800b2ee <__d2b+0x2e>
 800b342:	6161      	str	r1, [r4, #20]
 800b344:	e7e5      	b.n	800b312 <__d2b+0x52>
 800b346:	a801      	add	r0, sp, #4
 800b348:	f7ff fd5a 	bl	800ae00 <__lo0bits>
 800b34c:	9b01      	ldr	r3, [sp, #4]
 800b34e:	6163      	str	r3, [r4, #20]
 800b350:	2201      	movs	r2, #1
 800b352:	6122      	str	r2, [r4, #16]
 800b354:	3020      	adds	r0, #32
 800b356:	e7e3      	b.n	800b320 <__d2b+0x60>
 800b358:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800b35c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800b360:	f8c9 0000 	str.w	r0, [r9]
 800b364:	6918      	ldr	r0, [r3, #16]
 800b366:	f7ff fd2b 	bl	800adc0 <__hi0bits>
 800b36a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800b36e:	e7df      	b.n	800b330 <__d2b+0x70>
 800b370:	0800c55b 	.word	0x0800c55b
 800b374:	0800c56c 	.word	0x0800c56c

0800b378 <_calloc_r>:
 800b378:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b37a:	fba1 2402 	umull	r2, r4, r1, r2
 800b37e:	b94c      	cbnz	r4, 800b394 <_calloc_r+0x1c>
 800b380:	4611      	mov	r1, r2
 800b382:	9201      	str	r2, [sp, #4]
 800b384:	f000 f87a 	bl	800b47c <_malloc_r>
 800b388:	9a01      	ldr	r2, [sp, #4]
 800b38a:	4605      	mov	r5, r0
 800b38c:	b930      	cbnz	r0, 800b39c <_calloc_r+0x24>
 800b38e:	4628      	mov	r0, r5
 800b390:	b003      	add	sp, #12
 800b392:	bd30      	pop	{r4, r5, pc}
 800b394:	220c      	movs	r2, #12
 800b396:	6002      	str	r2, [r0, #0]
 800b398:	2500      	movs	r5, #0
 800b39a:	e7f8      	b.n	800b38e <_calloc_r+0x16>
 800b39c:	4621      	mov	r1, r4
 800b39e:	f7fe f941 	bl	8009624 <memset>
 800b3a2:	e7f4      	b.n	800b38e <_calloc_r+0x16>

0800b3a4 <_free_r>:
 800b3a4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b3a6:	2900      	cmp	r1, #0
 800b3a8:	d044      	beq.n	800b434 <_free_r+0x90>
 800b3aa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b3ae:	9001      	str	r0, [sp, #4]
 800b3b0:	2b00      	cmp	r3, #0
 800b3b2:	f1a1 0404 	sub.w	r4, r1, #4
 800b3b6:	bfb8      	it	lt
 800b3b8:	18e4      	addlt	r4, r4, r3
 800b3ba:	f000 fa9b 	bl	800b8f4 <__malloc_lock>
 800b3be:	4a1e      	ldr	r2, [pc, #120]	; (800b438 <_free_r+0x94>)
 800b3c0:	9801      	ldr	r0, [sp, #4]
 800b3c2:	6813      	ldr	r3, [r2, #0]
 800b3c4:	b933      	cbnz	r3, 800b3d4 <_free_r+0x30>
 800b3c6:	6063      	str	r3, [r4, #4]
 800b3c8:	6014      	str	r4, [r2, #0]
 800b3ca:	b003      	add	sp, #12
 800b3cc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b3d0:	f000 ba96 	b.w	800b900 <__malloc_unlock>
 800b3d4:	42a3      	cmp	r3, r4
 800b3d6:	d908      	bls.n	800b3ea <_free_r+0x46>
 800b3d8:	6825      	ldr	r5, [r4, #0]
 800b3da:	1961      	adds	r1, r4, r5
 800b3dc:	428b      	cmp	r3, r1
 800b3de:	bf01      	itttt	eq
 800b3e0:	6819      	ldreq	r1, [r3, #0]
 800b3e2:	685b      	ldreq	r3, [r3, #4]
 800b3e4:	1949      	addeq	r1, r1, r5
 800b3e6:	6021      	streq	r1, [r4, #0]
 800b3e8:	e7ed      	b.n	800b3c6 <_free_r+0x22>
 800b3ea:	461a      	mov	r2, r3
 800b3ec:	685b      	ldr	r3, [r3, #4]
 800b3ee:	b10b      	cbz	r3, 800b3f4 <_free_r+0x50>
 800b3f0:	42a3      	cmp	r3, r4
 800b3f2:	d9fa      	bls.n	800b3ea <_free_r+0x46>
 800b3f4:	6811      	ldr	r1, [r2, #0]
 800b3f6:	1855      	adds	r5, r2, r1
 800b3f8:	42a5      	cmp	r5, r4
 800b3fa:	d10b      	bne.n	800b414 <_free_r+0x70>
 800b3fc:	6824      	ldr	r4, [r4, #0]
 800b3fe:	4421      	add	r1, r4
 800b400:	1854      	adds	r4, r2, r1
 800b402:	42a3      	cmp	r3, r4
 800b404:	6011      	str	r1, [r2, #0]
 800b406:	d1e0      	bne.n	800b3ca <_free_r+0x26>
 800b408:	681c      	ldr	r4, [r3, #0]
 800b40a:	685b      	ldr	r3, [r3, #4]
 800b40c:	6053      	str	r3, [r2, #4]
 800b40e:	4421      	add	r1, r4
 800b410:	6011      	str	r1, [r2, #0]
 800b412:	e7da      	b.n	800b3ca <_free_r+0x26>
 800b414:	d902      	bls.n	800b41c <_free_r+0x78>
 800b416:	230c      	movs	r3, #12
 800b418:	6003      	str	r3, [r0, #0]
 800b41a:	e7d6      	b.n	800b3ca <_free_r+0x26>
 800b41c:	6825      	ldr	r5, [r4, #0]
 800b41e:	1961      	adds	r1, r4, r5
 800b420:	428b      	cmp	r3, r1
 800b422:	bf04      	itt	eq
 800b424:	6819      	ldreq	r1, [r3, #0]
 800b426:	685b      	ldreq	r3, [r3, #4]
 800b428:	6063      	str	r3, [r4, #4]
 800b42a:	bf04      	itt	eq
 800b42c:	1949      	addeq	r1, r1, r5
 800b42e:	6021      	streq	r1, [r4, #0]
 800b430:	6054      	str	r4, [r2, #4]
 800b432:	e7ca      	b.n	800b3ca <_free_r+0x26>
 800b434:	b003      	add	sp, #12
 800b436:	bd30      	pop	{r4, r5, pc}
 800b438:	20001810 	.word	0x20001810

0800b43c <sbrk_aligned>:
 800b43c:	b570      	push	{r4, r5, r6, lr}
 800b43e:	4e0e      	ldr	r6, [pc, #56]	; (800b478 <sbrk_aligned+0x3c>)
 800b440:	460c      	mov	r4, r1
 800b442:	6831      	ldr	r1, [r6, #0]
 800b444:	4605      	mov	r5, r0
 800b446:	b911      	cbnz	r1, 800b44e <sbrk_aligned+0x12>
 800b448:	f000 f9e8 	bl	800b81c <_sbrk_r>
 800b44c:	6030      	str	r0, [r6, #0]
 800b44e:	4621      	mov	r1, r4
 800b450:	4628      	mov	r0, r5
 800b452:	f000 f9e3 	bl	800b81c <_sbrk_r>
 800b456:	1c43      	adds	r3, r0, #1
 800b458:	d00a      	beq.n	800b470 <sbrk_aligned+0x34>
 800b45a:	1cc4      	adds	r4, r0, #3
 800b45c:	f024 0403 	bic.w	r4, r4, #3
 800b460:	42a0      	cmp	r0, r4
 800b462:	d007      	beq.n	800b474 <sbrk_aligned+0x38>
 800b464:	1a21      	subs	r1, r4, r0
 800b466:	4628      	mov	r0, r5
 800b468:	f000 f9d8 	bl	800b81c <_sbrk_r>
 800b46c:	3001      	adds	r0, #1
 800b46e:	d101      	bne.n	800b474 <sbrk_aligned+0x38>
 800b470:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800b474:	4620      	mov	r0, r4
 800b476:	bd70      	pop	{r4, r5, r6, pc}
 800b478:	20001814 	.word	0x20001814

0800b47c <_malloc_r>:
 800b47c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b480:	1ccd      	adds	r5, r1, #3
 800b482:	f025 0503 	bic.w	r5, r5, #3
 800b486:	3508      	adds	r5, #8
 800b488:	2d0c      	cmp	r5, #12
 800b48a:	bf38      	it	cc
 800b48c:	250c      	movcc	r5, #12
 800b48e:	2d00      	cmp	r5, #0
 800b490:	4607      	mov	r7, r0
 800b492:	db01      	blt.n	800b498 <_malloc_r+0x1c>
 800b494:	42a9      	cmp	r1, r5
 800b496:	d905      	bls.n	800b4a4 <_malloc_r+0x28>
 800b498:	230c      	movs	r3, #12
 800b49a:	603b      	str	r3, [r7, #0]
 800b49c:	2600      	movs	r6, #0
 800b49e:	4630      	mov	r0, r6
 800b4a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b4a4:	4e2e      	ldr	r6, [pc, #184]	; (800b560 <_malloc_r+0xe4>)
 800b4a6:	f000 fa25 	bl	800b8f4 <__malloc_lock>
 800b4aa:	6833      	ldr	r3, [r6, #0]
 800b4ac:	461c      	mov	r4, r3
 800b4ae:	bb34      	cbnz	r4, 800b4fe <_malloc_r+0x82>
 800b4b0:	4629      	mov	r1, r5
 800b4b2:	4638      	mov	r0, r7
 800b4b4:	f7ff ffc2 	bl	800b43c <sbrk_aligned>
 800b4b8:	1c43      	adds	r3, r0, #1
 800b4ba:	4604      	mov	r4, r0
 800b4bc:	d14d      	bne.n	800b55a <_malloc_r+0xde>
 800b4be:	6834      	ldr	r4, [r6, #0]
 800b4c0:	4626      	mov	r6, r4
 800b4c2:	2e00      	cmp	r6, #0
 800b4c4:	d140      	bne.n	800b548 <_malloc_r+0xcc>
 800b4c6:	6823      	ldr	r3, [r4, #0]
 800b4c8:	4631      	mov	r1, r6
 800b4ca:	4638      	mov	r0, r7
 800b4cc:	eb04 0803 	add.w	r8, r4, r3
 800b4d0:	f000 f9a4 	bl	800b81c <_sbrk_r>
 800b4d4:	4580      	cmp	r8, r0
 800b4d6:	d13a      	bne.n	800b54e <_malloc_r+0xd2>
 800b4d8:	6821      	ldr	r1, [r4, #0]
 800b4da:	3503      	adds	r5, #3
 800b4dc:	1a6d      	subs	r5, r5, r1
 800b4de:	f025 0503 	bic.w	r5, r5, #3
 800b4e2:	3508      	adds	r5, #8
 800b4e4:	2d0c      	cmp	r5, #12
 800b4e6:	bf38      	it	cc
 800b4e8:	250c      	movcc	r5, #12
 800b4ea:	4629      	mov	r1, r5
 800b4ec:	4638      	mov	r0, r7
 800b4ee:	f7ff ffa5 	bl	800b43c <sbrk_aligned>
 800b4f2:	3001      	adds	r0, #1
 800b4f4:	d02b      	beq.n	800b54e <_malloc_r+0xd2>
 800b4f6:	6823      	ldr	r3, [r4, #0]
 800b4f8:	442b      	add	r3, r5
 800b4fa:	6023      	str	r3, [r4, #0]
 800b4fc:	e00e      	b.n	800b51c <_malloc_r+0xa0>
 800b4fe:	6822      	ldr	r2, [r4, #0]
 800b500:	1b52      	subs	r2, r2, r5
 800b502:	d41e      	bmi.n	800b542 <_malloc_r+0xc6>
 800b504:	2a0b      	cmp	r2, #11
 800b506:	d916      	bls.n	800b536 <_malloc_r+0xba>
 800b508:	1961      	adds	r1, r4, r5
 800b50a:	42a3      	cmp	r3, r4
 800b50c:	6025      	str	r5, [r4, #0]
 800b50e:	bf18      	it	ne
 800b510:	6059      	strne	r1, [r3, #4]
 800b512:	6863      	ldr	r3, [r4, #4]
 800b514:	bf08      	it	eq
 800b516:	6031      	streq	r1, [r6, #0]
 800b518:	5162      	str	r2, [r4, r5]
 800b51a:	604b      	str	r3, [r1, #4]
 800b51c:	4638      	mov	r0, r7
 800b51e:	f104 060b 	add.w	r6, r4, #11
 800b522:	f000 f9ed 	bl	800b900 <__malloc_unlock>
 800b526:	f026 0607 	bic.w	r6, r6, #7
 800b52a:	1d23      	adds	r3, r4, #4
 800b52c:	1af2      	subs	r2, r6, r3
 800b52e:	d0b6      	beq.n	800b49e <_malloc_r+0x22>
 800b530:	1b9b      	subs	r3, r3, r6
 800b532:	50a3      	str	r3, [r4, r2]
 800b534:	e7b3      	b.n	800b49e <_malloc_r+0x22>
 800b536:	6862      	ldr	r2, [r4, #4]
 800b538:	42a3      	cmp	r3, r4
 800b53a:	bf0c      	ite	eq
 800b53c:	6032      	streq	r2, [r6, #0]
 800b53e:	605a      	strne	r2, [r3, #4]
 800b540:	e7ec      	b.n	800b51c <_malloc_r+0xa0>
 800b542:	4623      	mov	r3, r4
 800b544:	6864      	ldr	r4, [r4, #4]
 800b546:	e7b2      	b.n	800b4ae <_malloc_r+0x32>
 800b548:	4634      	mov	r4, r6
 800b54a:	6876      	ldr	r6, [r6, #4]
 800b54c:	e7b9      	b.n	800b4c2 <_malloc_r+0x46>
 800b54e:	230c      	movs	r3, #12
 800b550:	603b      	str	r3, [r7, #0]
 800b552:	4638      	mov	r0, r7
 800b554:	f000 f9d4 	bl	800b900 <__malloc_unlock>
 800b558:	e7a1      	b.n	800b49e <_malloc_r+0x22>
 800b55a:	6025      	str	r5, [r4, #0]
 800b55c:	e7de      	b.n	800b51c <_malloc_r+0xa0>
 800b55e:	bf00      	nop
 800b560:	20001810 	.word	0x20001810

0800b564 <__ssputs_r>:
 800b564:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b568:	688e      	ldr	r6, [r1, #8]
 800b56a:	429e      	cmp	r6, r3
 800b56c:	4682      	mov	sl, r0
 800b56e:	460c      	mov	r4, r1
 800b570:	4690      	mov	r8, r2
 800b572:	461f      	mov	r7, r3
 800b574:	d838      	bhi.n	800b5e8 <__ssputs_r+0x84>
 800b576:	898a      	ldrh	r2, [r1, #12]
 800b578:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800b57c:	d032      	beq.n	800b5e4 <__ssputs_r+0x80>
 800b57e:	6825      	ldr	r5, [r4, #0]
 800b580:	6909      	ldr	r1, [r1, #16]
 800b582:	eba5 0901 	sub.w	r9, r5, r1
 800b586:	6965      	ldr	r5, [r4, #20]
 800b588:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b58c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b590:	3301      	adds	r3, #1
 800b592:	444b      	add	r3, r9
 800b594:	106d      	asrs	r5, r5, #1
 800b596:	429d      	cmp	r5, r3
 800b598:	bf38      	it	cc
 800b59a:	461d      	movcc	r5, r3
 800b59c:	0553      	lsls	r3, r2, #21
 800b59e:	d531      	bpl.n	800b604 <__ssputs_r+0xa0>
 800b5a0:	4629      	mov	r1, r5
 800b5a2:	f7ff ff6b 	bl	800b47c <_malloc_r>
 800b5a6:	4606      	mov	r6, r0
 800b5a8:	b950      	cbnz	r0, 800b5c0 <__ssputs_r+0x5c>
 800b5aa:	230c      	movs	r3, #12
 800b5ac:	f8ca 3000 	str.w	r3, [sl]
 800b5b0:	89a3      	ldrh	r3, [r4, #12]
 800b5b2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b5b6:	81a3      	strh	r3, [r4, #12]
 800b5b8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b5bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b5c0:	6921      	ldr	r1, [r4, #16]
 800b5c2:	464a      	mov	r2, r9
 800b5c4:	f7ff fb46 	bl	800ac54 <memcpy>
 800b5c8:	89a3      	ldrh	r3, [r4, #12]
 800b5ca:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800b5ce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b5d2:	81a3      	strh	r3, [r4, #12]
 800b5d4:	6126      	str	r6, [r4, #16]
 800b5d6:	6165      	str	r5, [r4, #20]
 800b5d8:	444e      	add	r6, r9
 800b5da:	eba5 0509 	sub.w	r5, r5, r9
 800b5de:	6026      	str	r6, [r4, #0]
 800b5e0:	60a5      	str	r5, [r4, #8]
 800b5e2:	463e      	mov	r6, r7
 800b5e4:	42be      	cmp	r6, r7
 800b5e6:	d900      	bls.n	800b5ea <__ssputs_r+0x86>
 800b5e8:	463e      	mov	r6, r7
 800b5ea:	6820      	ldr	r0, [r4, #0]
 800b5ec:	4632      	mov	r2, r6
 800b5ee:	4641      	mov	r1, r8
 800b5f0:	f000 f966 	bl	800b8c0 <memmove>
 800b5f4:	68a3      	ldr	r3, [r4, #8]
 800b5f6:	1b9b      	subs	r3, r3, r6
 800b5f8:	60a3      	str	r3, [r4, #8]
 800b5fa:	6823      	ldr	r3, [r4, #0]
 800b5fc:	4433      	add	r3, r6
 800b5fe:	6023      	str	r3, [r4, #0]
 800b600:	2000      	movs	r0, #0
 800b602:	e7db      	b.n	800b5bc <__ssputs_r+0x58>
 800b604:	462a      	mov	r2, r5
 800b606:	f000 f981 	bl	800b90c <_realloc_r>
 800b60a:	4606      	mov	r6, r0
 800b60c:	2800      	cmp	r0, #0
 800b60e:	d1e1      	bne.n	800b5d4 <__ssputs_r+0x70>
 800b610:	6921      	ldr	r1, [r4, #16]
 800b612:	4650      	mov	r0, sl
 800b614:	f7ff fec6 	bl	800b3a4 <_free_r>
 800b618:	e7c7      	b.n	800b5aa <__ssputs_r+0x46>
	...

0800b61c <_svfiprintf_r>:
 800b61c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b620:	4698      	mov	r8, r3
 800b622:	898b      	ldrh	r3, [r1, #12]
 800b624:	061b      	lsls	r3, r3, #24
 800b626:	b09d      	sub	sp, #116	; 0x74
 800b628:	4607      	mov	r7, r0
 800b62a:	460d      	mov	r5, r1
 800b62c:	4614      	mov	r4, r2
 800b62e:	d50e      	bpl.n	800b64e <_svfiprintf_r+0x32>
 800b630:	690b      	ldr	r3, [r1, #16]
 800b632:	b963      	cbnz	r3, 800b64e <_svfiprintf_r+0x32>
 800b634:	2140      	movs	r1, #64	; 0x40
 800b636:	f7ff ff21 	bl	800b47c <_malloc_r>
 800b63a:	6028      	str	r0, [r5, #0]
 800b63c:	6128      	str	r0, [r5, #16]
 800b63e:	b920      	cbnz	r0, 800b64a <_svfiprintf_r+0x2e>
 800b640:	230c      	movs	r3, #12
 800b642:	603b      	str	r3, [r7, #0]
 800b644:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b648:	e0d1      	b.n	800b7ee <_svfiprintf_r+0x1d2>
 800b64a:	2340      	movs	r3, #64	; 0x40
 800b64c:	616b      	str	r3, [r5, #20]
 800b64e:	2300      	movs	r3, #0
 800b650:	9309      	str	r3, [sp, #36]	; 0x24
 800b652:	2320      	movs	r3, #32
 800b654:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b658:	f8cd 800c 	str.w	r8, [sp, #12]
 800b65c:	2330      	movs	r3, #48	; 0x30
 800b65e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800b808 <_svfiprintf_r+0x1ec>
 800b662:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b666:	f04f 0901 	mov.w	r9, #1
 800b66a:	4623      	mov	r3, r4
 800b66c:	469a      	mov	sl, r3
 800b66e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b672:	b10a      	cbz	r2, 800b678 <_svfiprintf_r+0x5c>
 800b674:	2a25      	cmp	r2, #37	; 0x25
 800b676:	d1f9      	bne.n	800b66c <_svfiprintf_r+0x50>
 800b678:	ebba 0b04 	subs.w	fp, sl, r4
 800b67c:	d00b      	beq.n	800b696 <_svfiprintf_r+0x7a>
 800b67e:	465b      	mov	r3, fp
 800b680:	4622      	mov	r2, r4
 800b682:	4629      	mov	r1, r5
 800b684:	4638      	mov	r0, r7
 800b686:	f7ff ff6d 	bl	800b564 <__ssputs_r>
 800b68a:	3001      	adds	r0, #1
 800b68c:	f000 80aa 	beq.w	800b7e4 <_svfiprintf_r+0x1c8>
 800b690:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b692:	445a      	add	r2, fp
 800b694:	9209      	str	r2, [sp, #36]	; 0x24
 800b696:	f89a 3000 	ldrb.w	r3, [sl]
 800b69a:	2b00      	cmp	r3, #0
 800b69c:	f000 80a2 	beq.w	800b7e4 <_svfiprintf_r+0x1c8>
 800b6a0:	2300      	movs	r3, #0
 800b6a2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b6a6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b6aa:	f10a 0a01 	add.w	sl, sl, #1
 800b6ae:	9304      	str	r3, [sp, #16]
 800b6b0:	9307      	str	r3, [sp, #28]
 800b6b2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b6b6:	931a      	str	r3, [sp, #104]	; 0x68
 800b6b8:	4654      	mov	r4, sl
 800b6ba:	2205      	movs	r2, #5
 800b6bc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b6c0:	4851      	ldr	r0, [pc, #324]	; (800b808 <_svfiprintf_r+0x1ec>)
 800b6c2:	f7f4 fdb5 	bl	8000230 <memchr>
 800b6c6:	9a04      	ldr	r2, [sp, #16]
 800b6c8:	b9d8      	cbnz	r0, 800b702 <_svfiprintf_r+0xe6>
 800b6ca:	06d0      	lsls	r0, r2, #27
 800b6cc:	bf44      	itt	mi
 800b6ce:	2320      	movmi	r3, #32
 800b6d0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b6d4:	0711      	lsls	r1, r2, #28
 800b6d6:	bf44      	itt	mi
 800b6d8:	232b      	movmi	r3, #43	; 0x2b
 800b6da:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b6de:	f89a 3000 	ldrb.w	r3, [sl]
 800b6e2:	2b2a      	cmp	r3, #42	; 0x2a
 800b6e4:	d015      	beq.n	800b712 <_svfiprintf_r+0xf6>
 800b6e6:	9a07      	ldr	r2, [sp, #28]
 800b6e8:	4654      	mov	r4, sl
 800b6ea:	2000      	movs	r0, #0
 800b6ec:	f04f 0c0a 	mov.w	ip, #10
 800b6f0:	4621      	mov	r1, r4
 800b6f2:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b6f6:	3b30      	subs	r3, #48	; 0x30
 800b6f8:	2b09      	cmp	r3, #9
 800b6fa:	d94e      	bls.n	800b79a <_svfiprintf_r+0x17e>
 800b6fc:	b1b0      	cbz	r0, 800b72c <_svfiprintf_r+0x110>
 800b6fe:	9207      	str	r2, [sp, #28]
 800b700:	e014      	b.n	800b72c <_svfiprintf_r+0x110>
 800b702:	eba0 0308 	sub.w	r3, r0, r8
 800b706:	fa09 f303 	lsl.w	r3, r9, r3
 800b70a:	4313      	orrs	r3, r2
 800b70c:	9304      	str	r3, [sp, #16]
 800b70e:	46a2      	mov	sl, r4
 800b710:	e7d2      	b.n	800b6b8 <_svfiprintf_r+0x9c>
 800b712:	9b03      	ldr	r3, [sp, #12]
 800b714:	1d19      	adds	r1, r3, #4
 800b716:	681b      	ldr	r3, [r3, #0]
 800b718:	9103      	str	r1, [sp, #12]
 800b71a:	2b00      	cmp	r3, #0
 800b71c:	bfbb      	ittet	lt
 800b71e:	425b      	neglt	r3, r3
 800b720:	f042 0202 	orrlt.w	r2, r2, #2
 800b724:	9307      	strge	r3, [sp, #28]
 800b726:	9307      	strlt	r3, [sp, #28]
 800b728:	bfb8      	it	lt
 800b72a:	9204      	strlt	r2, [sp, #16]
 800b72c:	7823      	ldrb	r3, [r4, #0]
 800b72e:	2b2e      	cmp	r3, #46	; 0x2e
 800b730:	d10c      	bne.n	800b74c <_svfiprintf_r+0x130>
 800b732:	7863      	ldrb	r3, [r4, #1]
 800b734:	2b2a      	cmp	r3, #42	; 0x2a
 800b736:	d135      	bne.n	800b7a4 <_svfiprintf_r+0x188>
 800b738:	9b03      	ldr	r3, [sp, #12]
 800b73a:	1d1a      	adds	r2, r3, #4
 800b73c:	681b      	ldr	r3, [r3, #0]
 800b73e:	9203      	str	r2, [sp, #12]
 800b740:	2b00      	cmp	r3, #0
 800b742:	bfb8      	it	lt
 800b744:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800b748:	3402      	adds	r4, #2
 800b74a:	9305      	str	r3, [sp, #20]
 800b74c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800b818 <_svfiprintf_r+0x1fc>
 800b750:	7821      	ldrb	r1, [r4, #0]
 800b752:	2203      	movs	r2, #3
 800b754:	4650      	mov	r0, sl
 800b756:	f7f4 fd6b 	bl	8000230 <memchr>
 800b75a:	b140      	cbz	r0, 800b76e <_svfiprintf_r+0x152>
 800b75c:	2340      	movs	r3, #64	; 0x40
 800b75e:	eba0 000a 	sub.w	r0, r0, sl
 800b762:	fa03 f000 	lsl.w	r0, r3, r0
 800b766:	9b04      	ldr	r3, [sp, #16]
 800b768:	4303      	orrs	r3, r0
 800b76a:	3401      	adds	r4, #1
 800b76c:	9304      	str	r3, [sp, #16]
 800b76e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b772:	4826      	ldr	r0, [pc, #152]	; (800b80c <_svfiprintf_r+0x1f0>)
 800b774:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b778:	2206      	movs	r2, #6
 800b77a:	f7f4 fd59 	bl	8000230 <memchr>
 800b77e:	2800      	cmp	r0, #0
 800b780:	d038      	beq.n	800b7f4 <_svfiprintf_r+0x1d8>
 800b782:	4b23      	ldr	r3, [pc, #140]	; (800b810 <_svfiprintf_r+0x1f4>)
 800b784:	bb1b      	cbnz	r3, 800b7ce <_svfiprintf_r+0x1b2>
 800b786:	9b03      	ldr	r3, [sp, #12]
 800b788:	3307      	adds	r3, #7
 800b78a:	f023 0307 	bic.w	r3, r3, #7
 800b78e:	3308      	adds	r3, #8
 800b790:	9303      	str	r3, [sp, #12]
 800b792:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b794:	4433      	add	r3, r6
 800b796:	9309      	str	r3, [sp, #36]	; 0x24
 800b798:	e767      	b.n	800b66a <_svfiprintf_r+0x4e>
 800b79a:	fb0c 3202 	mla	r2, ip, r2, r3
 800b79e:	460c      	mov	r4, r1
 800b7a0:	2001      	movs	r0, #1
 800b7a2:	e7a5      	b.n	800b6f0 <_svfiprintf_r+0xd4>
 800b7a4:	2300      	movs	r3, #0
 800b7a6:	3401      	adds	r4, #1
 800b7a8:	9305      	str	r3, [sp, #20]
 800b7aa:	4619      	mov	r1, r3
 800b7ac:	f04f 0c0a 	mov.w	ip, #10
 800b7b0:	4620      	mov	r0, r4
 800b7b2:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b7b6:	3a30      	subs	r2, #48	; 0x30
 800b7b8:	2a09      	cmp	r2, #9
 800b7ba:	d903      	bls.n	800b7c4 <_svfiprintf_r+0x1a8>
 800b7bc:	2b00      	cmp	r3, #0
 800b7be:	d0c5      	beq.n	800b74c <_svfiprintf_r+0x130>
 800b7c0:	9105      	str	r1, [sp, #20]
 800b7c2:	e7c3      	b.n	800b74c <_svfiprintf_r+0x130>
 800b7c4:	fb0c 2101 	mla	r1, ip, r1, r2
 800b7c8:	4604      	mov	r4, r0
 800b7ca:	2301      	movs	r3, #1
 800b7cc:	e7f0      	b.n	800b7b0 <_svfiprintf_r+0x194>
 800b7ce:	ab03      	add	r3, sp, #12
 800b7d0:	9300      	str	r3, [sp, #0]
 800b7d2:	462a      	mov	r2, r5
 800b7d4:	4b0f      	ldr	r3, [pc, #60]	; (800b814 <_svfiprintf_r+0x1f8>)
 800b7d6:	a904      	add	r1, sp, #16
 800b7d8:	4638      	mov	r0, r7
 800b7da:	f7fd ffcb 	bl	8009774 <_printf_float>
 800b7de:	1c42      	adds	r2, r0, #1
 800b7e0:	4606      	mov	r6, r0
 800b7e2:	d1d6      	bne.n	800b792 <_svfiprintf_r+0x176>
 800b7e4:	89ab      	ldrh	r3, [r5, #12]
 800b7e6:	065b      	lsls	r3, r3, #25
 800b7e8:	f53f af2c 	bmi.w	800b644 <_svfiprintf_r+0x28>
 800b7ec:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b7ee:	b01d      	add	sp, #116	; 0x74
 800b7f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b7f4:	ab03      	add	r3, sp, #12
 800b7f6:	9300      	str	r3, [sp, #0]
 800b7f8:	462a      	mov	r2, r5
 800b7fa:	4b06      	ldr	r3, [pc, #24]	; (800b814 <_svfiprintf_r+0x1f8>)
 800b7fc:	a904      	add	r1, sp, #16
 800b7fe:	4638      	mov	r0, r7
 800b800:	f7fe fa5c 	bl	8009cbc <_printf_i>
 800b804:	e7eb      	b.n	800b7de <_svfiprintf_r+0x1c2>
 800b806:	bf00      	nop
 800b808:	0800c6c4 	.word	0x0800c6c4
 800b80c:	0800c6ce 	.word	0x0800c6ce
 800b810:	08009775 	.word	0x08009775
 800b814:	0800b565 	.word	0x0800b565
 800b818:	0800c6ca 	.word	0x0800c6ca

0800b81c <_sbrk_r>:
 800b81c:	b538      	push	{r3, r4, r5, lr}
 800b81e:	4d06      	ldr	r5, [pc, #24]	; (800b838 <_sbrk_r+0x1c>)
 800b820:	2300      	movs	r3, #0
 800b822:	4604      	mov	r4, r0
 800b824:	4608      	mov	r0, r1
 800b826:	602b      	str	r3, [r5, #0]
 800b828:	f7f6 fd50 	bl	80022cc <_sbrk>
 800b82c:	1c43      	adds	r3, r0, #1
 800b82e:	d102      	bne.n	800b836 <_sbrk_r+0x1a>
 800b830:	682b      	ldr	r3, [r5, #0]
 800b832:	b103      	cbz	r3, 800b836 <_sbrk_r+0x1a>
 800b834:	6023      	str	r3, [r4, #0]
 800b836:	bd38      	pop	{r3, r4, r5, pc}
 800b838:	20001818 	.word	0x20001818

0800b83c <__assert_func>:
 800b83c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b83e:	4614      	mov	r4, r2
 800b840:	461a      	mov	r2, r3
 800b842:	4b09      	ldr	r3, [pc, #36]	; (800b868 <__assert_func+0x2c>)
 800b844:	681b      	ldr	r3, [r3, #0]
 800b846:	4605      	mov	r5, r0
 800b848:	68d8      	ldr	r0, [r3, #12]
 800b84a:	b14c      	cbz	r4, 800b860 <__assert_func+0x24>
 800b84c:	4b07      	ldr	r3, [pc, #28]	; (800b86c <__assert_func+0x30>)
 800b84e:	9100      	str	r1, [sp, #0]
 800b850:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800b854:	4906      	ldr	r1, [pc, #24]	; (800b870 <__assert_func+0x34>)
 800b856:	462b      	mov	r3, r5
 800b858:	f000 f80e 	bl	800b878 <fiprintf>
 800b85c:	f000 faac 	bl	800bdb8 <abort>
 800b860:	4b04      	ldr	r3, [pc, #16]	; (800b874 <__assert_func+0x38>)
 800b862:	461c      	mov	r4, r3
 800b864:	e7f3      	b.n	800b84e <__assert_func+0x12>
 800b866:	bf00      	nop
 800b868:	2000000c 	.word	0x2000000c
 800b86c:	0800c6d5 	.word	0x0800c6d5
 800b870:	0800c6e2 	.word	0x0800c6e2
 800b874:	0800c710 	.word	0x0800c710

0800b878 <fiprintf>:
 800b878:	b40e      	push	{r1, r2, r3}
 800b87a:	b503      	push	{r0, r1, lr}
 800b87c:	4601      	mov	r1, r0
 800b87e:	ab03      	add	r3, sp, #12
 800b880:	4805      	ldr	r0, [pc, #20]	; (800b898 <fiprintf+0x20>)
 800b882:	f853 2b04 	ldr.w	r2, [r3], #4
 800b886:	6800      	ldr	r0, [r0, #0]
 800b888:	9301      	str	r3, [sp, #4]
 800b88a:	f000 f897 	bl	800b9bc <_vfiprintf_r>
 800b88e:	b002      	add	sp, #8
 800b890:	f85d eb04 	ldr.w	lr, [sp], #4
 800b894:	b003      	add	sp, #12
 800b896:	4770      	bx	lr
 800b898:	2000000c 	.word	0x2000000c

0800b89c <__ascii_mbtowc>:
 800b89c:	b082      	sub	sp, #8
 800b89e:	b901      	cbnz	r1, 800b8a2 <__ascii_mbtowc+0x6>
 800b8a0:	a901      	add	r1, sp, #4
 800b8a2:	b142      	cbz	r2, 800b8b6 <__ascii_mbtowc+0x1a>
 800b8a4:	b14b      	cbz	r3, 800b8ba <__ascii_mbtowc+0x1e>
 800b8a6:	7813      	ldrb	r3, [r2, #0]
 800b8a8:	600b      	str	r3, [r1, #0]
 800b8aa:	7812      	ldrb	r2, [r2, #0]
 800b8ac:	1e10      	subs	r0, r2, #0
 800b8ae:	bf18      	it	ne
 800b8b0:	2001      	movne	r0, #1
 800b8b2:	b002      	add	sp, #8
 800b8b4:	4770      	bx	lr
 800b8b6:	4610      	mov	r0, r2
 800b8b8:	e7fb      	b.n	800b8b2 <__ascii_mbtowc+0x16>
 800b8ba:	f06f 0001 	mvn.w	r0, #1
 800b8be:	e7f8      	b.n	800b8b2 <__ascii_mbtowc+0x16>

0800b8c0 <memmove>:
 800b8c0:	4288      	cmp	r0, r1
 800b8c2:	b510      	push	{r4, lr}
 800b8c4:	eb01 0402 	add.w	r4, r1, r2
 800b8c8:	d902      	bls.n	800b8d0 <memmove+0x10>
 800b8ca:	4284      	cmp	r4, r0
 800b8cc:	4623      	mov	r3, r4
 800b8ce:	d807      	bhi.n	800b8e0 <memmove+0x20>
 800b8d0:	1e43      	subs	r3, r0, #1
 800b8d2:	42a1      	cmp	r1, r4
 800b8d4:	d008      	beq.n	800b8e8 <memmove+0x28>
 800b8d6:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b8da:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b8de:	e7f8      	b.n	800b8d2 <memmove+0x12>
 800b8e0:	4402      	add	r2, r0
 800b8e2:	4601      	mov	r1, r0
 800b8e4:	428a      	cmp	r2, r1
 800b8e6:	d100      	bne.n	800b8ea <memmove+0x2a>
 800b8e8:	bd10      	pop	{r4, pc}
 800b8ea:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b8ee:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b8f2:	e7f7      	b.n	800b8e4 <memmove+0x24>

0800b8f4 <__malloc_lock>:
 800b8f4:	4801      	ldr	r0, [pc, #4]	; (800b8fc <__malloc_lock+0x8>)
 800b8f6:	f000 bc1f 	b.w	800c138 <__retarget_lock_acquire_recursive>
 800b8fa:	bf00      	nop
 800b8fc:	2000181c 	.word	0x2000181c

0800b900 <__malloc_unlock>:
 800b900:	4801      	ldr	r0, [pc, #4]	; (800b908 <__malloc_unlock+0x8>)
 800b902:	f000 bc1a 	b.w	800c13a <__retarget_lock_release_recursive>
 800b906:	bf00      	nop
 800b908:	2000181c 	.word	0x2000181c

0800b90c <_realloc_r>:
 800b90c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b910:	4680      	mov	r8, r0
 800b912:	4614      	mov	r4, r2
 800b914:	460e      	mov	r6, r1
 800b916:	b921      	cbnz	r1, 800b922 <_realloc_r+0x16>
 800b918:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b91c:	4611      	mov	r1, r2
 800b91e:	f7ff bdad 	b.w	800b47c <_malloc_r>
 800b922:	b92a      	cbnz	r2, 800b930 <_realloc_r+0x24>
 800b924:	f7ff fd3e 	bl	800b3a4 <_free_r>
 800b928:	4625      	mov	r5, r4
 800b92a:	4628      	mov	r0, r5
 800b92c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b930:	f000 fc6a 	bl	800c208 <_malloc_usable_size_r>
 800b934:	4284      	cmp	r4, r0
 800b936:	4607      	mov	r7, r0
 800b938:	d802      	bhi.n	800b940 <_realloc_r+0x34>
 800b93a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800b93e:	d812      	bhi.n	800b966 <_realloc_r+0x5a>
 800b940:	4621      	mov	r1, r4
 800b942:	4640      	mov	r0, r8
 800b944:	f7ff fd9a 	bl	800b47c <_malloc_r>
 800b948:	4605      	mov	r5, r0
 800b94a:	2800      	cmp	r0, #0
 800b94c:	d0ed      	beq.n	800b92a <_realloc_r+0x1e>
 800b94e:	42bc      	cmp	r4, r7
 800b950:	4622      	mov	r2, r4
 800b952:	4631      	mov	r1, r6
 800b954:	bf28      	it	cs
 800b956:	463a      	movcs	r2, r7
 800b958:	f7ff f97c 	bl	800ac54 <memcpy>
 800b95c:	4631      	mov	r1, r6
 800b95e:	4640      	mov	r0, r8
 800b960:	f7ff fd20 	bl	800b3a4 <_free_r>
 800b964:	e7e1      	b.n	800b92a <_realloc_r+0x1e>
 800b966:	4635      	mov	r5, r6
 800b968:	e7df      	b.n	800b92a <_realloc_r+0x1e>

0800b96a <__sfputc_r>:
 800b96a:	6893      	ldr	r3, [r2, #8]
 800b96c:	3b01      	subs	r3, #1
 800b96e:	2b00      	cmp	r3, #0
 800b970:	b410      	push	{r4}
 800b972:	6093      	str	r3, [r2, #8]
 800b974:	da08      	bge.n	800b988 <__sfputc_r+0x1e>
 800b976:	6994      	ldr	r4, [r2, #24]
 800b978:	42a3      	cmp	r3, r4
 800b97a:	db01      	blt.n	800b980 <__sfputc_r+0x16>
 800b97c:	290a      	cmp	r1, #10
 800b97e:	d103      	bne.n	800b988 <__sfputc_r+0x1e>
 800b980:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b984:	f000 b94a 	b.w	800bc1c <__swbuf_r>
 800b988:	6813      	ldr	r3, [r2, #0]
 800b98a:	1c58      	adds	r0, r3, #1
 800b98c:	6010      	str	r0, [r2, #0]
 800b98e:	7019      	strb	r1, [r3, #0]
 800b990:	4608      	mov	r0, r1
 800b992:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b996:	4770      	bx	lr

0800b998 <__sfputs_r>:
 800b998:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b99a:	4606      	mov	r6, r0
 800b99c:	460f      	mov	r7, r1
 800b99e:	4614      	mov	r4, r2
 800b9a0:	18d5      	adds	r5, r2, r3
 800b9a2:	42ac      	cmp	r4, r5
 800b9a4:	d101      	bne.n	800b9aa <__sfputs_r+0x12>
 800b9a6:	2000      	movs	r0, #0
 800b9a8:	e007      	b.n	800b9ba <__sfputs_r+0x22>
 800b9aa:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b9ae:	463a      	mov	r2, r7
 800b9b0:	4630      	mov	r0, r6
 800b9b2:	f7ff ffda 	bl	800b96a <__sfputc_r>
 800b9b6:	1c43      	adds	r3, r0, #1
 800b9b8:	d1f3      	bne.n	800b9a2 <__sfputs_r+0xa>
 800b9ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800b9bc <_vfiprintf_r>:
 800b9bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b9c0:	460d      	mov	r5, r1
 800b9c2:	b09d      	sub	sp, #116	; 0x74
 800b9c4:	4614      	mov	r4, r2
 800b9c6:	4698      	mov	r8, r3
 800b9c8:	4606      	mov	r6, r0
 800b9ca:	b118      	cbz	r0, 800b9d4 <_vfiprintf_r+0x18>
 800b9cc:	6983      	ldr	r3, [r0, #24]
 800b9ce:	b90b      	cbnz	r3, 800b9d4 <_vfiprintf_r+0x18>
 800b9d0:	f000 fb14 	bl	800bffc <__sinit>
 800b9d4:	4b89      	ldr	r3, [pc, #548]	; (800bbfc <_vfiprintf_r+0x240>)
 800b9d6:	429d      	cmp	r5, r3
 800b9d8:	d11b      	bne.n	800ba12 <_vfiprintf_r+0x56>
 800b9da:	6875      	ldr	r5, [r6, #4]
 800b9dc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b9de:	07d9      	lsls	r1, r3, #31
 800b9e0:	d405      	bmi.n	800b9ee <_vfiprintf_r+0x32>
 800b9e2:	89ab      	ldrh	r3, [r5, #12]
 800b9e4:	059a      	lsls	r2, r3, #22
 800b9e6:	d402      	bmi.n	800b9ee <_vfiprintf_r+0x32>
 800b9e8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b9ea:	f000 fba5 	bl	800c138 <__retarget_lock_acquire_recursive>
 800b9ee:	89ab      	ldrh	r3, [r5, #12]
 800b9f0:	071b      	lsls	r3, r3, #28
 800b9f2:	d501      	bpl.n	800b9f8 <_vfiprintf_r+0x3c>
 800b9f4:	692b      	ldr	r3, [r5, #16]
 800b9f6:	b9eb      	cbnz	r3, 800ba34 <_vfiprintf_r+0x78>
 800b9f8:	4629      	mov	r1, r5
 800b9fa:	4630      	mov	r0, r6
 800b9fc:	f000 f96e 	bl	800bcdc <__swsetup_r>
 800ba00:	b1c0      	cbz	r0, 800ba34 <_vfiprintf_r+0x78>
 800ba02:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ba04:	07dc      	lsls	r4, r3, #31
 800ba06:	d50e      	bpl.n	800ba26 <_vfiprintf_r+0x6a>
 800ba08:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ba0c:	b01d      	add	sp, #116	; 0x74
 800ba0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ba12:	4b7b      	ldr	r3, [pc, #492]	; (800bc00 <_vfiprintf_r+0x244>)
 800ba14:	429d      	cmp	r5, r3
 800ba16:	d101      	bne.n	800ba1c <_vfiprintf_r+0x60>
 800ba18:	68b5      	ldr	r5, [r6, #8]
 800ba1a:	e7df      	b.n	800b9dc <_vfiprintf_r+0x20>
 800ba1c:	4b79      	ldr	r3, [pc, #484]	; (800bc04 <_vfiprintf_r+0x248>)
 800ba1e:	429d      	cmp	r5, r3
 800ba20:	bf08      	it	eq
 800ba22:	68f5      	ldreq	r5, [r6, #12]
 800ba24:	e7da      	b.n	800b9dc <_vfiprintf_r+0x20>
 800ba26:	89ab      	ldrh	r3, [r5, #12]
 800ba28:	0598      	lsls	r0, r3, #22
 800ba2a:	d4ed      	bmi.n	800ba08 <_vfiprintf_r+0x4c>
 800ba2c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ba2e:	f000 fb84 	bl	800c13a <__retarget_lock_release_recursive>
 800ba32:	e7e9      	b.n	800ba08 <_vfiprintf_r+0x4c>
 800ba34:	2300      	movs	r3, #0
 800ba36:	9309      	str	r3, [sp, #36]	; 0x24
 800ba38:	2320      	movs	r3, #32
 800ba3a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ba3e:	f8cd 800c 	str.w	r8, [sp, #12]
 800ba42:	2330      	movs	r3, #48	; 0x30
 800ba44:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800bc08 <_vfiprintf_r+0x24c>
 800ba48:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ba4c:	f04f 0901 	mov.w	r9, #1
 800ba50:	4623      	mov	r3, r4
 800ba52:	469a      	mov	sl, r3
 800ba54:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ba58:	b10a      	cbz	r2, 800ba5e <_vfiprintf_r+0xa2>
 800ba5a:	2a25      	cmp	r2, #37	; 0x25
 800ba5c:	d1f9      	bne.n	800ba52 <_vfiprintf_r+0x96>
 800ba5e:	ebba 0b04 	subs.w	fp, sl, r4
 800ba62:	d00b      	beq.n	800ba7c <_vfiprintf_r+0xc0>
 800ba64:	465b      	mov	r3, fp
 800ba66:	4622      	mov	r2, r4
 800ba68:	4629      	mov	r1, r5
 800ba6a:	4630      	mov	r0, r6
 800ba6c:	f7ff ff94 	bl	800b998 <__sfputs_r>
 800ba70:	3001      	adds	r0, #1
 800ba72:	f000 80aa 	beq.w	800bbca <_vfiprintf_r+0x20e>
 800ba76:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ba78:	445a      	add	r2, fp
 800ba7a:	9209      	str	r2, [sp, #36]	; 0x24
 800ba7c:	f89a 3000 	ldrb.w	r3, [sl]
 800ba80:	2b00      	cmp	r3, #0
 800ba82:	f000 80a2 	beq.w	800bbca <_vfiprintf_r+0x20e>
 800ba86:	2300      	movs	r3, #0
 800ba88:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800ba8c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ba90:	f10a 0a01 	add.w	sl, sl, #1
 800ba94:	9304      	str	r3, [sp, #16]
 800ba96:	9307      	str	r3, [sp, #28]
 800ba98:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ba9c:	931a      	str	r3, [sp, #104]	; 0x68
 800ba9e:	4654      	mov	r4, sl
 800baa0:	2205      	movs	r2, #5
 800baa2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800baa6:	4858      	ldr	r0, [pc, #352]	; (800bc08 <_vfiprintf_r+0x24c>)
 800baa8:	f7f4 fbc2 	bl	8000230 <memchr>
 800baac:	9a04      	ldr	r2, [sp, #16]
 800baae:	b9d8      	cbnz	r0, 800bae8 <_vfiprintf_r+0x12c>
 800bab0:	06d1      	lsls	r1, r2, #27
 800bab2:	bf44      	itt	mi
 800bab4:	2320      	movmi	r3, #32
 800bab6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800baba:	0713      	lsls	r3, r2, #28
 800babc:	bf44      	itt	mi
 800babe:	232b      	movmi	r3, #43	; 0x2b
 800bac0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bac4:	f89a 3000 	ldrb.w	r3, [sl]
 800bac8:	2b2a      	cmp	r3, #42	; 0x2a
 800baca:	d015      	beq.n	800baf8 <_vfiprintf_r+0x13c>
 800bacc:	9a07      	ldr	r2, [sp, #28]
 800bace:	4654      	mov	r4, sl
 800bad0:	2000      	movs	r0, #0
 800bad2:	f04f 0c0a 	mov.w	ip, #10
 800bad6:	4621      	mov	r1, r4
 800bad8:	f811 3b01 	ldrb.w	r3, [r1], #1
 800badc:	3b30      	subs	r3, #48	; 0x30
 800bade:	2b09      	cmp	r3, #9
 800bae0:	d94e      	bls.n	800bb80 <_vfiprintf_r+0x1c4>
 800bae2:	b1b0      	cbz	r0, 800bb12 <_vfiprintf_r+0x156>
 800bae4:	9207      	str	r2, [sp, #28]
 800bae6:	e014      	b.n	800bb12 <_vfiprintf_r+0x156>
 800bae8:	eba0 0308 	sub.w	r3, r0, r8
 800baec:	fa09 f303 	lsl.w	r3, r9, r3
 800baf0:	4313      	orrs	r3, r2
 800baf2:	9304      	str	r3, [sp, #16]
 800baf4:	46a2      	mov	sl, r4
 800baf6:	e7d2      	b.n	800ba9e <_vfiprintf_r+0xe2>
 800baf8:	9b03      	ldr	r3, [sp, #12]
 800bafa:	1d19      	adds	r1, r3, #4
 800bafc:	681b      	ldr	r3, [r3, #0]
 800bafe:	9103      	str	r1, [sp, #12]
 800bb00:	2b00      	cmp	r3, #0
 800bb02:	bfbb      	ittet	lt
 800bb04:	425b      	neglt	r3, r3
 800bb06:	f042 0202 	orrlt.w	r2, r2, #2
 800bb0a:	9307      	strge	r3, [sp, #28]
 800bb0c:	9307      	strlt	r3, [sp, #28]
 800bb0e:	bfb8      	it	lt
 800bb10:	9204      	strlt	r2, [sp, #16]
 800bb12:	7823      	ldrb	r3, [r4, #0]
 800bb14:	2b2e      	cmp	r3, #46	; 0x2e
 800bb16:	d10c      	bne.n	800bb32 <_vfiprintf_r+0x176>
 800bb18:	7863      	ldrb	r3, [r4, #1]
 800bb1a:	2b2a      	cmp	r3, #42	; 0x2a
 800bb1c:	d135      	bne.n	800bb8a <_vfiprintf_r+0x1ce>
 800bb1e:	9b03      	ldr	r3, [sp, #12]
 800bb20:	1d1a      	adds	r2, r3, #4
 800bb22:	681b      	ldr	r3, [r3, #0]
 800bb24:	9203      	str	r2, [sp, #12]
 800bb26:	2b00      	cmp	r3, #0
 800bb28:	bfb8      	it	lt
 800bb2a:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800bb2e:	3402      	adds	r4, #2
 800bb30:	9305      	str	r3, [sp, #20]
 800bb32:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800bc18 <_vfiprintf_r+0x25c>
 800bb36:	7821      	ldrb	r1, [r4, #0]
 800bb38:	2203      	movs	r2, #3
 800bb3a:	4650      	mov	r0, sl
 800bb3c:	f7f4 fb78 	bl	8000230 <memchr>
 800bb40:	b140      	cbz	r0, 800bb54 <_vfiprintf_r+0x198>
 800bb42:	2340      	movs	r3, #64	; 0x40
 800bb44:	eba0 000a 	sub.w	r0, r0, sl
 800bb48:	fa03 f000 	lsl.w	r0, r3, r0
 800bb4c:	9b04      	ldr	r3, [sp, #16]
 800bb4e:	4303      	orrs	r3, r0
 800bb50:	3401      	adds	r4, #1
 800bb52:	9304      	str	r3, [sp, #16]
 800bb54:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bb58:	482c      	ldr	r0, [pc, #176]	; (800bc0c <_vfiprintf_r+0x250>)
 800bb5a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800bb5e:	2206      	movs	r2, #6
 800bb60:	f7f4 fb66 	bl	8000230 <memchr>
 800bb64:	2800      	cmp	r0, #0
 800bb66:	d03f      	beq.n	800bbe8 <_vfiprintf_r+0x22c>
 800bb68:	4b29      	ldr	r3, [pc, #164]	; (800bc10 <_vfiprintf_r+0x254>)
 800bb6a:	bb1b      	cbnz	r3, 800bbb4 <_vfiprintf_r+0x1f8>
 800bb6c:	9b03      	ldr	r3, [sp, #12]
 800bb6e:	3307      	adds	r3, #7
 800bb70:	f023 0307 	bic.w	r3, r3, #7
 800bb74:	3308      	adds	r3, #8
 800bb76:	9303      	str	r3, [sp, #12]
 800bb78:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bb7a:	443b      	add	r3, r7
 800bb7c:	9309      	str	r3, [sp, #36]	; 0x24
 800bb7e:	e767      	b.n	800ba50 <_vfiprintf_r+0x94>
 800bb80:	fb0c 3202 	mla	r2, ip, r2, r3
 800bb84:	460c      	mov	r4, r1
 800bb86:	2001      	movs	r0, #1
 800bb88:	e7a5      	b.n	800bad6 <_vfiprintf_r+0x11a>
 800bb8a:	2300      	movs	r3, #0
 800bb8c:	3401      	adds	r4, #1
 800bb8e:	9305      	str	r3, [sp, #20]
 800bb90:	4619      	mov	r1, r3
 800bb92:	f04f 0c0a 	mov.w	ip, #10
 800bb96:	4620      	mov	r0, r4
 800bb98:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bb9c:	3a30      	subs	r2, #48	; 0x30
 800bb9e:	2a09      	cmp	r2, #9
 800bba0:	d903      	bls.n	800bbaa <_vfiprintf_r+0x1ee>
 800bba2:	2b00      	cmp	r3, #0
 800bba4:	d0c5      	beq.n	800bb32 <_vfiprintf_r+0x176>
 800bba6:	9105      	str	r1, [sp, #20]
 800bba8:	e7c3      	b.n	800bb32 <_vfiprintf_r+0x176>
 800bbaa:	fb0c 2101 	mla	r1, ip, r1, r2
 800bbae:	4604      	mov	r4, r0
 800bbb0:	2301      	movs	r3, #1
 800bbb2:	e7f0      	b.n	800bb96 <_vfiprintf_r+0x1da>
 800bbb4:	ab03      	add	r3, sp, #12
 800bbb6:	9300      	str	r3, [sp, #0]
 800bbb8:	462a      	mov	r2, r5
 800bbba:	4b16      	ldr	r3, [pc, #88]	; (800bc14 <_vfiprintf_r+0x258>)
 800bbbc:	a904      	add	r1, sp, #16
 800bbbe:	4630      	mov	r0, r6
 800bbc0:	f7fd fdd8 	bl	8009774 <_printf_float>
 800bbc4:	4607      	mov	r7, r0
 800bbc6:	1c78      	adds	r0, r7, #1
 800bbc8:	d1d6      	bne.n	800bb78 <_vfiprintf_r+0x1bc>
 800bbca:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800bbcc:	07d9      	lsls	r1, r3, #31
 800bbce:	d405      	bmi.n	800bbdc <_vfiprintf_r+0x220>
 800bbd0:	89ab      	ldrh	r3, [r5, #12]
 800bbd2:	059a      	lsls	r2, r3, #22
 800bbd4:	d402      	bmi.n	800bbdc <_vfiprintf_r+0x220>
 800bbd6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800bbd8:	f000 faaf 	bl	800c13a <__retarget_lock_release_recursive>
 800bbdc:	89ab      	ldrh	r3, [r5, #12]
 800bbde:	065b      	lsls	r3, r3, #25
 800bbe0:	f53f af12 	bmi.w	800ba08 <_vfiprintf_r+0x4c>
 800bbe4:	9809      	ldr	r0, [sp, #36]	; 0x24
 800bbe6:	e711      	b.n	800ba0c <_vfiprintf_r+0x50>
 800bbe8:	ab03      	add	r3, sp, #12
 800bbea:	9300      	str	r3, [sp, #0]
 800bbec:	462a      	mov	r2, r5
 800bbee:	4b09      	ldr	r3, [pc, #36]	; (800bc14 <_vfiprintf_r+0x258>)
 800bbf0:	a904      	add	r1, sp, #16
 800bbf2:	4630      	mov	r0, r6
 800bbf4:	f7fe f862 	bl	8009cbc <_printf_i>
 800bbf8:	e7e4      	b.n	800bbc4 <_vfiprintf_r+0x208>
 800bbfa:	bf00      	nop
 800bbfc:	0800c83c 	.word	0x0800c83c
 800bc00:	0800c85c 	.word	0x0800c85c
 800bc04:	0800c81c 	.word	0x0800c81c
 800bc08:	0800c6c4 	.word	0x0800c6c4
 800bc0c:	0800c6ce 	.word	0x0800c6ce
 800bc10:	08009775 	.word	0x08009775
 800bc14:	0800b999 	.word	0x0800b999
 800bc18:	0800c6ca 	.word	0x0800c6ca

0800bc1c <__swbuf_r>:
 800bc1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bc1e:	460e      	mov	r6, r1
 800bc20:	4614      	mov	r4, r2
 800bc22:	4605      	mov	r5, r0
 800bc24:	b118      	cbz	r0, 800bc2e <__swbuf_r+0x12>
 800bc26:	6983      	ldr	r3, [r0, #24]
 800bc28:	b90b      	cbnz	r3, 800bc2e <__swbuf_r+0x12>
 800bc2a:	f000 f9e7 	bl	800bffc <__sinit>
 800bc2e:	4b21      	ldr	r3, [pc, #132]	; (800bcb4 <__swbuf_r+0x98>)
 800bc30:	429c      	cmp	r4, r3
 800bc32:	d12b      	bne.n	800bc8c <__swbuf_r+0x70>
 800bc34:	686c      	ldr	r4, [r5, #4]
 800bc36:	69a3      	ldr	r3, [r4, #24]
 800bc38:	60a3      	str	r3, [r4, #8]
 800bc3a:	89a3      	ldrh	r3, [r4, #12]
 800bc3c:	071a      	lsls	r2, r3, #28
 800bc3e:	d52f      	bpl.n	800bca0 <__swbuf_r+0x84>
 800bc40:	6923      	ldr	r3, [r4, #16]
 800bc42:	b36b      	cbz	r3, 800bca0 <__swbuf_r+0x84>
 800bc44:	6923      	ldr	r3, [r4, #16]
 800bc46:	6820      	ldr	r0, [r4, #0]
 800bc48:	1ac0      	subs	r0, r0, r3
 800bc4a:	6963      	ldr	r3, [r4, #20]
 800bc4c:	b2f6      	uxtb	r6, r6
 800bc4e:	4283      	cmp	r3, r0
 800bc50:	4637      	mov	r7, r6
 800bc52:	dc04      	bgt.n	800bc5e <__swbuf_r+0x42>
 800bc54:	4621      	mov	r1, r4
 800bc56:	4628      	mov	r0, r5
 800bc58:	f000 f93c 	bl	800bed4 <_fflush_r>
 800bc5c:	bb30      	cbnz	r0, 800bcac <__swbuf_r+0x90>
 800bc5e:	68a3      	ldr	r3, [r4, #8]
 800bc60:	3b01      	subs	r3, #1
 800bc62:	60a3      	str	r3, [r4, #8]
 800bc64:	6823      	ldr	r3, [r4, #0]
 800bc66:	1c5a      	adds	r2, r3, #1
 800bc68:	6022      	str	r2, [r4, #0]
 800bc6a:	701e      	strb	r6, [r3, #0]
 800bc6c:	6963      	ldr	r3, [r4, #20]
 800bc6e:	3001      	adds	r0, #1
 800bc70:	4283      	cmp	r3, r0
 800bc72:	d004      	beq.n	800bc7e <__swbuf_r+0x62>
 800bc74:	89a3      	ldrh	r3, [r4, #12]
 800bc76:	07db      	lsls	r3, r3, #31
 800bc78:	d506      	bpl.n	800bc88 <__swbuf_r+0x6c>
 800bc7a:	2e0a      	cmp	r6, #10
 800bc7c:	d104      	bne.n	800bc88 <__swbuf_r+0x6c>
 800bc7e:	4621      	mov	r1, r4
 800bc80:	4628      	mov	r0, r5
 800bc82:	f000 f927 	bl	800bed4 <_fflush_r>
 800bc86:	b988      	cbnz	r0, 800bcac <__swbuf_r+0x90>
 800bc88:	4638      	mov	r0, r7
 800bc8a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bc8c:	4b0a      	ldr	r3, [pc, #40]	; (800bcb8 <__swbuf_r+0x9c>)
 800bc8e:	429c      	cmp	r4, r3
 800bc90:	d101      	bne.n	800bc96 <__swbuf_r+0x7a>
 800bc92:	68ac      	ldr	r4, [r5, #8]
 800bc94:	e7cf      	b.n	800bc36 <__swbuf_r+0x1a>
 800bc96:	4b09      	ldr	r3, [pc, #36]	; (800bcbc <__swbuf_r+0xa0>)
 800bc98:	429c      	cmp	r4, r3
 800bc9a:	bf08      	it	eq
 800bc9c:	68ec      	ldreq	r4, [r5, #12]
 800bc9e:	e7ca      	b.n	800bc36 <__swbuf_r+0x1a>
 800bca0:	4621      	mov	r1, r4
 800bca2:	4628      	mov	r0, r5
 800bca4:	f000 f81a 	bl	800bcdc <__swsetup_r>
 800bca8:	2800      	cmp	r0, #0
 800bcaa:	d0cb      	beq.n	800bc44 <__swbuf_r+0x28>
 800bcac:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800bcb0:	e7ea      	b.n	800bc88 <__swbuf_r+0x6c>
 800bcb2:	bf00      	nop
 800bcb4:	0800c83c 	.word	0x0800c83c
 800bcb8:	0800c85c 	.word	0x0800c85c
 800bcbc:	0800c81c 	.word	0x0800c81c

0800bcc0 <__ascii_wctomb>:
 800bcc0:	b149      	cbz	r1, 800bcd6 <__ascii_wctomb+0x16>
 800bcc2:	2aff      	cmp	r2, #255	; 0xff
 800bcc4:	bf85      	ittet	hi
 800bcc6:	238a      	movhi	r3, #138	; 0x8a
 800bcc8:	6003      	strhi	r3, [r0, #0]
 800bcca:	700a      	strbls	r2, [r1, #0]
 800bccc:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 800bcd0:	bf98      	it	ls
 800bcd2:	2001      	movls	r0, #1
 800bcd4:	4770      	bx	lr
 800bcd6:	4608      	mov	r0, r1
 800bcd8:	4770      	bx	lr
	...

0800bcdc <__swsetup_r>:
 800bcdc:	4b32      	ldr	r3, [pc, #200]	; (800bda8 <__swsetup_r+0xcc>)
 800bcde:	b570      	push	{r4, r5, r6, lr}
 800bce0:	681d      	ldr	r5, [r3, #0]
 800bce2:	4606      	mov	r6, r0
 800bce4:	460c      	mov	r4, r1
 800bce6:	b125      	cbz	r5, 800bcf2 <__swsetup_r+0x16>
 800bce8:	69ab      	ldr	r3, [r5, #24]
 800bcea:	b913      	cbnz	r3, 800bcf2 <__swsetup_r+0x16>
 800bcec:	4628      	mov	r0, r5
 800bcee:	f000 f985 	bl	800bffc <__sinit>
 800bcf2:	4b2e      	ldr	r3, [pc, #184]	; (800bdac <__swsetup_r+0xd0>)
 800bcf4:	429c      	cmp	r4, r3
 800bcf6:	d10f      	bne.n	800bd18 <__swsetup_r+0x3c>
 800bcf8:	686c      	ldr	r4, [r5, #4]
 800bcfa:	89a3      	ldrh	r3, [r4, #12]
 800bcfc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800bd00:	0719      	lsls	r1, r3, #28
 800bd02:	d42c      	bmi.n	800bd5e <__swsetup_r+0x82>
 800bd04:	06dd      	lsls	r5, r3, #27
 800bd06:	d411      	bmi.n	800bd2c <__swsetup_r+0x50>
 800bd08:	2309      	movs	r3, #9
 800bd0a:	6033      	str	r3, [r6, #0]
 800bd0c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800bd10:	81a3      	strh	r3, [r4, #12]
 800bd12:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800bd16:	e03e      	b.n	800bd96 <__swsetup_r+0xba>
 800bd18:	4b25      	ldr	r3, [pc, #148]	; (800bdb0 <__swsetup_r+0xd4>)
 800bd1a:	429c      	cmp	r4, r3
 800bd1c:	d101      	bne.n	800bd22 <__swsetup_r+0x46>
 800bd1e:	68ac      	ldr	r4, [r5, #8]
 800bd20:	e7eb      	b.n	800bcfa <__swsetup_r+0x1e>
 800bd22:	4b24      	ldr	r3, [pc, #144]	; (800bdb4 <__swsetup_r+0xd8>)
 800bd24:	429c      	cmp	r4, r3
 800bd26:	bf08      	it	eq
 800bd28:	68ec      	ldreq	r4, [r5, #12]
 800bd2a:	e7e6      	b.n	800bcfa <__swsetup_r+0x1e>
 800bd2c:	0758      	lsls	r0, r3, #29
 800bd2e:	d512      	bpl.n	800bd56 <__swsetup_r+0x7a>
 800bd30:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800bd32:	b141      	cbz	r1, 800bd46 <__swsetup_r+0x6a>
 800bd34:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800bd38:	4299      	cmp	r1, r3
 800bd3a:	d002      	beq.n	800bd42 <__swsetup_r+0x66>
 800bd3c:	4630      	mov	r0, r6
 800bd3e:	f7ff fb31 	bl	800b3a4 <_free_r>
 800bd42:	2300      	movs	r3, #0
 800bd44:	6363      	str	r3, [r4, #52]	; 0x34
 800bd46:	89a3      	ldrh	r3, [r4, #12]
 800bd48:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800bd4c:	81a3      	strh	r3, [r4, #12]
 800bd4e:	2300      	movs	r3, #0
 800bd50:	6063      	str	r3, [r4, #4]
 800bd52:	6923      	ldr	r3, [r4, #16]
 800bd54:	6023      	str	r3, [r4, #0]
 800bd56:	89a3      	ldrh	r3, [r4, #12]
 800bd58:	f043 0308 	orr.w	r3, r3, #8
 800bd5c:	81a3      	strh	r3, [r4, #12]
 800bd5e:	6923      	ldr	r3, [r4, #16]
 800bd60:	b94b      	cbnz	r3, 800bd76 <__swsetup_r+0x9a>
 800bd62:	89a3      	ldrh	r3, [r4, #12]
 800bd64:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800bd68:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800bd6c:	d003      	beq.n	800bd76 <__swsetup_r+0x9a>
 800bd6e:	4621      	mov	r1, r4
 800bd70:	4630      	mov	r0, r6
 800bd72:	f000 fa09 	bl	800c188 <__smakebuf_r>
 800bd76:	89a0      	ldrh	r0, [r4, #12]
 800bd78:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800bd7c:	f010 0301 	ands.w	r3, r0, #1
 800bd80:	d00a      	beq.n	800bd98 <__swsetup_r+0xbc>
 800bd82:	2300      	movs	r3, #0
 800bd84:	60a3      	str	r3, [r4, #8]
 800bd86:	6963      	ldr	r3, [r4, #20]
 800bd88:	425b      	negs	r3, r3
 800bd8a:	61a3      	str	r3, [r4, #24]
 800bd8c:	6923      	ldr	r3, [r4, #16]
 800bd8e:	b943      	cbnz	r3, 800bda2 <__swsetup_r+0xc6>
 800bd90:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800bd94:	d1ba      	bne.n	800bd0c <__swsetup_r+0x30>
 800bd96:	bd70      	pop	{r4, r5, r6, pc}
 800bd98:	0781      	lsls	r1, r0, #30
 800bd9a:	bf58      	it	pl
 800bd9c:	6963      	ldrpl	r3, [r4, #20]
 800bd9e:	60a3      	str	r3, [r4, #8]
 800bda0:	e7f4      	b.n	800bd8c <__swsetup_r+0xb0>
 800bda2:	2000      	movs	r0, #0
 800bda4:	e7f7      	b.n	800bd96 <__swsetup_r+0xba>
 800bda6:	bf00      	nop
 800bda8:	2000000c 	.word	0x2000000c
 800bdac:	0800c83c 	.word	0x0800c83c
 800bdb0:	0800c85c 	.word	0x0800c85c
 800bdb4:	0800c81c 	.word	0x0800c81c

0800bdb8 <abort>:
 800bdb8:	b508      	push	{r3, lr}
 800bdba:	2006      	movs	r0, #6
 800bdbc:	f000 fa54 	bl	800c268 <raise>
 800bdc0:	2001      	movs	r0, #1
 800bdc2:	f7f6 fa0b 	bl	80021dc <_exit>
	...

0800bdc8 <__sflush_r>:
 800bdc8:	898a      	ldrh	r2, [r1, #12]
 800bdca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bdce:	4605      	mov	r5, r0
 800bdd0:	0710      	lsls	r0, r2, #28
 800bdd2:	460c      	mov	r4, r1
 800bdd4:	d458      	bmi.n	800be88 <__sflush_r+0xc0>
 800bdd6:	684b      	ldr	r3, [r1, #4]
 800bdd8:	2b00      	cmp	r3, #0
 800bdda:	dc05      	bgt.n	800bde8 <__sflush_r+0x20>
 800bddc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800bdde:	2b00      	cmp	r3, #0
 800bde0:	dc02      	bgt.n	800bde8 <__sflush_r+0x20>
 800bde2:	2000      	movs	r0, #0
 800bde4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bde8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800bdea:	2e00      	cmp	r6, #0
 800bdec:	d0f9      	beq.n	800bde2 <__sflush_r+0x1a>
 800bdee:	2300      	movs	r3, #0
 800bdf0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800bdf4:	682f      	ldr	r7, [r5, #0]
 800bdf6:	602b      	str	r3, [r5, #0]
 800bdf8:	d032      	beq.n	800be60 <__sflush_r+0x98>
 800bdfa:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800bdfc:	89a3      	ldrh	r3, [r4, #12]
 800bdfe:	075a      	lsls	r2, r3, #29
 800be00:	d505      	bpl.n	800be0e <__sflush_r+0x46>
 800be02:	6863      	ldr	r3, [r4, #4]
 800be04:	1ac0      	subs	r0, r0, r3
 800be06:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800be08:	b10b      	cbz	r3, 800be0e <__sflush_r+0x46>
 800be0a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800be0c:	1ac0      	subs	r0, r0, r3
 800be0e:	2300      	movs	r3, #0
 800be10:	4602      	mov	r2, r0
 800be12:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800be14:	6a21      	ldr	r1, [r4, #32]
 800be16:	4628      	mov	r0, r5
 800be18:	47b0      	blx	r6
 800be1a:	1c43      	adds	r3, r0, #1
 800be1c:	89a3      	ldrh	r3, [r4, #12]
 800be1e:	d106      	bne.n	800be2e <__sflush_r+0x66>
 800be20:	6829      	ldr	r1, [r5, #0]
 800be22:	291d      	cmp	r1, #29
 800be24:	d82c      	bhi.n	800be80 <__sflush_r+0xb8>
 800be26:	4a2a      	ldr	r2, [pc, #168]	; (800bed0 <__sflush_r+0x108>)
 800be28:	40ca      	lsrs	r2, r1
 800be2a:	07d6      	lsls	r6, r2, #31
 800be2c:	d528      	bpl.n	800be80 <__sflush_r+0xb8>
 800be2e:	2200      	movs	r2, #0
 800be30:	6062      	str	r2, [r4, #4]
 800be32:	04d9      	lsls	r1, r3, #19
 800be34:	6922      	ldr	r2, [r4, #16]
 800be36:	6022      	str	r2, [r4, #0]
 800be38:	d504      	bpl.n	800be44 <__sflush_r+0x7c>
 800be3a:	1c42      	adds	r2, r0, #1
 800be3c:	d101      	bne.n	800be42 <__sflush_r+0x7a>
 800be3e:	682b      	ldr	r3, [r5, #0]
 800be40:	b903      	cbnz	r3, 800be44 <__sflush_r+0x7c>
 800be42:	6560      	str	r0, [r4, #84]	; 0x54
 800be44:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800be46:	602f      	str	r7, [r5, #0]
 800be48:	2900      	cmp	r1, #0
 800be4a:	d0ca      	beq.n	800bde2 <__sflush_r+0x1a>
 800be4c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800be50:	4299      	cmp	r1, r3
 800be52:	d002      	beq.n	800be5a <__sflush_r+0x92>
 800be54:	4628      	mov	r0, r5
 800be56:	f7ff faa5 	bl	800b3a4 <_free_r>
 800be5a:	2000      	movs	r0, #0
 800be5c:	6360      	str	r0, [r4, #52]	; 0x34
 800be5e:	e7c1      	b.n	800bde4 <__sflush_r+0x1c>
 800be60:	6a21      	ldr	r1, [r4, #32]
 800be62:	2301      	movs	r3, #1
 800be64:	4628      	mov	r0, r5
 800be66:	47b0      	blx	r6
 800be68:	1c41      	adds	r1, r0, #1
 800be6a:	d1c7      	bne.n	800bdfc <__sflush_r+0x34>
 800be6c:	682b      	ldr	r3, [r5, #0]
 800be6e:	2b00      	cmp	r3, #0
 800be70:	d0c4      	beq.n	800bdfc <__sflush_r+0x34>
 800be72:	2b1d      	cmp	r3, #29
 800be74:	d001      	beq.n	800be7a <__sflush_r+0xb2>
 800be76:	2b16      	cmp	r3, #22
 800be78:	d101      	bne.n	800be7e <__sflush_r+0xb6>
 800be7a:	602f      	str	r7, [r5, #0]
 800be7c:	e7b1      	b.n	800bde2 <__sflush_r+0x1a>
 800be7e:	89a3      	ldrh	r3, [r4, #12]
 800be80:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800be84:	81a3      	strh	r3, [r4, #12]
 800be86:	e7ad      	b.n	800bde4 <__sflush_r+0x1c>
 800be88:	690f      	ldr	r7, [r1, #16]
 800be8a:	2f00      	cmp	r7, #0
 800be8c:	d0a9      	beq.n	800bde2 <__sflush_r+0x1a>
 800be8e:	0793      	lsls	r3, r2, #30
 800be90:	680e      	ldr	r6, [r1, #0]
 800be92:	bf08      	it	eq
 800be94:	694b      	ldreq	r3, [r1, #20]
 800be96:	600f      	str	r7, [r1, #0]
 800be98:	bf18      	it	ne
 800be9a:	2300      	movne	r3, #0
 800be9c:	eba6 0807 	sub.w	r8, r6, r7
 800bea0:	608b      	str	r3, [r1, #8]
 800bea2:	f1b8 0f00 	cmp.w	r8, #0
 800bea6:	dd9c      	ble.n	800bde2 <__sflush_r+0x1a>
 800bea8:	6a21      	ldr	r1, [r4, #32]
 800beaa:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800beac:	4643      	mov	r3, r8
 800beae:	463a      	mov	r2, r7
 800beb0:	4628      	mov	r0, r5
 800beb2:	47b0      	blx	r6
 800beb4:	2800      	cmp	r0, #0
 800beb6:	dc06      	bgt.n	800bec6 <__sflush_r+0xfe>
 800beb8:	89a3      	ldrh	r3, [r4, #12]
 800beba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bebe:	81a3      	strh	r3, [r4, #12]
 800bec0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800bec4:	e78e      	b.n	800bde4 <__sflush_r+0x1c>
 800bec6:	4407      	add	r7, r0
 800bec8:	eba8 0800 	sub.w	r8, r8, r0
 800becc:	e7e9      	b.n	800bea2 <__sflush_r+0xda>
 800bece:	bf00      	nop
 800bed0:	20400001 	.word	0x20400001

0800bed4 <_fflush_r>:
 800bed4:	b538      	push	{r3, r4, r5, lr}
 800bed6:	690b      	ldr	r3, [r1, #16]
 800bed8:	4605      	mov	r5, r0
 800beda:	460c      	mov	r4, r1
 800bedc:	b913      	cbnz	r3, 800bee4 <_fflush_r+0x10>
 800bede:	2500      	movs	r5, #0
 800bee0:	4628      	mov	r0, r5
 800bee2:	bd38      	pop	{r3, r4, r5, pc}
 800bee4:	b118      	cbz	r0, 800beee <_fflush_r+0x1a>
 800bee6:	6983      	ldr	r3, [r0, #24]
 800bee8:	b90b      	cbnz	r3, 800beee <_fflush_r+0x1a>
 800beea:	f000 f887 	bl	800bffc <__sinit>
 800beee:	4b14      	ldr	r3, [pc, #80]	; (800bf40 <_fflush_r+0x6c>)
 800bef0:	429c      	cmp	r4, r3
 800bef2:	d11b      	bne.n	800bf2c <_fflush_r+0x58>
 800bef4:	686c      	ldr	r4, [r5, #4]
 800bef6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800befa:	2b00      	cmp	r3, #0
 800befc:	d0ef      	beq.n	800bede <_fflush_r+0xa>
 800befe:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800bf00:	07d0      	lsls	r0, r2, #31
 800bf02:	d404      	bmi.n	800bf0e <_fflush_r+0x3a>
 800bf04:	0599      	lsls	r1, r3, #22
 800bf06:	d402      	bmi.n	800bf0e <_fflush_r+0x3a>
 800bf08:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800bf0a:	f000 f915 	bl	800c138 <__retarget_lock_acquire_recursive>
 800bf0e:	4628      	mov	r0, r5
 800bf10:	4621      	mov	r1, r4
 800bf12:	f7ff ff59 	bl	800bdc8 <__sflush_r>
 800bf16:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800bf18:	07da      	lsls	r2, r3, #31
 800bf1a:	4605      	mov	r5, r0
 800bf1c:	d4e0      	bmi.n	800bee0 <_fflush_r+0xc>
 800bf1e:	89a3      	ldrh	r3, [r4, #12]
 800bf20:	059b      	lsls	r3, r3, #22
 800bf22:	d4dd      	bmi.n	800bee0 <_fflush_r+0xc>
 800bf24:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800bf26:	f000 f908 	bl	800c13a <__retarget_lock_release_recursive>
 800bf2a:	e7d9      	b.n	800bee0 <_fflush_r+0xc>
 800bf2c:	4b05      	ldr	r3, [pc, #20]	; (800bf44 <_fflush_r+0x70>)
 800bf2e:	429c      	cmp	r4, r3
 800bf30:	d101      	bne.n	800bf36 <_fflush_r+0x62>
 800bf32:	68ac      	ldr	r4, [r5, #8]
 800bf34:	e7df      	b.n	800bef6 <_fflush_r+0x22>
 800bf36:	4b04      	ldr	r3, [pc, #16]	; (800bf48 <_fflush_r+0x74>)
 800bf38:	429c      	cmp	r4, r3
 800bf3a:	bf08      	it	eq
 800bf3c:	68ec      	ldreq	r4, [r5, #12]
 800bf3e:	e7da      	b.n	800bef6 <_fflush_r+0x22>
 800bf40:	0800c83c 	.word	0x0800c83c
 800bf44:	0800c85c 	.word	0x0800c85c
 800bf48:	0800c81c 	.word	0x0800c81c

0800bf4c <std>:
 800bf4c:	2300      	movs	r3, #0
 800bf4e:	b510      	push	{r4, lr}
 800bf50:	4604      	mov	r4, r0
 800bf52:	e9c0 3300 	strd	r3, r3, [r0]
 800bf56:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800bf5a:	6083      	str	r3, [r0, #8]
 800bf5c:	8181      	strh	r1, [r0, #12]
 800bf5e:	6643      	str	r3, [r0, #100]	; 0x64
 800bf60:	81c2      	strh	r2, [r0, #14]
 800bf62:	6183      	str	r3, [r0, #24]
 800bf64:	4619      	mov	r1, r3
 800bf66:	2208      	movs	r2, #8
 800bf68:	305c      	adds	r0, #92	; 0x5c
 800bf6a:	f7fd fb5b 	bl	8009624 <memset>
 800bf6e:	4b05      	ldr	r3, [pc, #20]	; (800bf84 <std+0x38>)
 800bf70:	6263      	str	r3, [r4, #36]	; 0x24
 800bf72:	4b05      	ldr	r3, [pc, #20]	; (800bf88 <std+0x3c>)
 800bf74:	62a3      	str	r3, [r4, #40]	; 0x28
 800bf76:	4b05      	ldr	r3, [pc, #20]	; (800bf8c <std+0x40>)
 800bf78:	62e3      	str	r3, [r4, #44]	; 0x2c
 800bf7a:	4b05      	ldr	r3, [pc, #20]	; (800bf90 <std+0x44>)
 800bf7c:	6224      	str	r4, [r4, #32]
 800bf7e:	6323      	str	r3, [r4, #48]	; 0x30
 800bf80:	bd10      	pop	{r4, pc}
 800bf82:	bf00      	nop
 800bf84:	0800c2a1 	.word	0x0800c2a1
 800bf88:	0800c2c3 	.word	0x0800c2c3
 800bf8c:	0800c2fb 	.word	0x0800c2fb
 800bf90:	0800c31f 	.word	0x0800c31f

0800bf94 <_cleanup_r>:
 800bf94:	4901      	ldr	r1, [pc, #4]	; (800bf9c <_cleanup_r+0x8>)
 800bf96:	f000 b8af 	b.w	800c0f8 <_fwalk_reent>
 800bf9a:	bf00      	nop
 800bf9c:	0800bed5 	.word	0x0800bed5

0800bfa0 <__sfmoreglue>:
 800bfa0:	b570      	push	{r4, r5, r6, lr}
 800bfa2:	2268      	movs	r2, #104	; 0x68
 800bfa4:	1e4d      	subs	r5, r1, #1
 800bfa6:	4355      	muls	r5, r2
 800bfa8:	460e      	mov	r6, r1
 800bfaa:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800bfae:	f7ff fa65 	bl	800b47c <_malloc_r>
 800bfb2:	4604      	mov	r4, r0
 800bfb4:	b140      	cbz	r0, 800bfc8 <__sfmoreglue+0x28>
 800bfb6:	2100      	movs	r1, #0
 800bfb8:	e9c0 1600 	strd	r1, r6, [r0]
 800bfbc:	300c      	adds	r0, #12
 800bfbe:	60a0      	str	r0, [r4, #8]
 800bfc0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800bfc4:	f7fd fb2e 	bl	8009624 <memset>
 800bfc8:	4620      	mov	r0, r4
 800bfca:	bd70      	pop	{r4, r5, r6, pc}

0800bfcc <__sfp_lock_acquire>:
 800bfcc:	4801      	ldr	r0, [pc, #4]	; (800bfd4 <__sfp_lock_acquire+0x8>)
 800bfce:	f000 b8b3 	b.w	800c138 <__retarget_lock_acquire_recursive>
 800bfd2:	bf00      	nop
 800bfd4:	2000181d 	.word	0x2000181d

0800bfd8 <__sfp_lock_release>:
 800bfd8:	4801      	ldr	r0, [pc, #4]	; (800bfe0 <__sfp_lock_release+0x8>)
 800bfda:	f000 b8ae 	b.w	800c13a <__retarget_lock_release_recursive>
 800bfde:	bf00      	nop
 800bfe0:	2000181d 	.word	0x2000181d

0800bfe4 <__sinit_lock_acquire>:
 800bfe4:	4801      	ldr	r0, [pc, #4]	; (800bfec <__sinit_lock_acquire+0x8>)
 800bfe6:	f000 b8a7 	b.w	800c138 <__retarget_lock_acquire_recursive>
 800bfea:	bf00      	nop
 800bfec:	2000181e 	.word	0x2000181e

0800bff0 <__sinit_lock_release>:
 800bff0:	4801      	ldr	r0, [pc, #4]	; (800bff8 <__sinit_lock_release+0x8>)
 800bff2:	f000 b8a2 	b.w	800c13a <__retarget_lock_release_recursive>
 800bff6:	bf00      	nop
 800bff8:	2000181e 	.word	0x2000181e

0800bffc <__sinit>:
 800bffc:	b510      	push	{r4, lr}
 800bffe:	4604      	mov	r4, r0
 800c000:	f7ff fff0 	bl	800bfe4 <__sinit_lock_acquire>
 800c004:	69a3      	ldr	r3, [r4, #24]
 800c006:	b11b      	cbz	r3, 800c010 <__sinit+0x14>
 800c008:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c00c:	f7ff bff0 	b.w	800bff0 <__sinit_lock_release>
 800c010:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800c014:	6523      	str	r3, [r4, #80]	; 0x50
 800c016:	4b13      	ldr	r3, [pc, #76]	; (800c064 <__sinit+0x68>)
 800c018:	4a13      	ldr	r2, [pc, #76]	; (800c068 <__sinit+0x6c>)
 800c01a:	681b      	ldr	r3, [r3, #0]
 800c01c:	62a2      	str	r2, [r4, #40]	; 0x28
 800c01e:	42a3      	cmp	r3, r4
 800c020:	bf04      	itt	eq
 800c022:	2301      	moveq	r3, #1
 800c024:	61a3      	streq	r3, [r4, #24]
 800c026:	4620      	mov	r0, r4
 800c028:	f000 f820 	bl	800c06c <__sfp>
 800c02c:	6060      	str	r0, [r4, #4]
 800c02e:	4620      	mov	r0, r4
 800c030:	f000 f81c 	bl	800c06c <__sfp>
 800c034:	60a0      	str	r0, [r4, #8]
 800c036:	4620      	mov	r0, r4
 800c038:	f000 f818 	bl	800c06c <__sfp>
 800c03c:	2200      	movs	r2, #0
 800c03e:	60e0      	str	r0, [r4, #12]
 800c040:	2104      	movs	r1, #4
 800c042:	6860      	ldr	r0, [r4, #4]
 800c044:	f7ff ff82 	bl	800bf4c <std>
 800c048:	68a0      	ldr	r0, [r4, #8]
 800c04a:	2201      	movs	r2, #1
 800c04c:	2109      	movs	r1, #9
 800c04e:	f7ff ff7d 	bl	800bf4c <std>
 800c052:	68e0      	ldr	r0, [r4, #12]
 800c054:	2202      	movs	r2, #2
 800c056:	2112      	movs	r1, #18
 800c058:	f7ff ff78 	bl	800bf4c <std>
 800c05c:	2301      	movs	r3, #1
 800c05e:	61a3      	str	r3, [r4, #24]
 800c060:	e7d2      	b.n	800c008 <__sinit+0xc>
 800c062:	bf00      	nop
 800c064:	0800c4a4 	.word	0x0800c4a4
 800c068:	0800bf95 	.word	0x0800bf95

0800c06c <__sfp>:
 800c06c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c06e:	4607      	mov	r7, r0
 800c070:	f7ff ffac 	bl	800bfcc <__sfp_lock_acquire>
 800c074:	4b1e      	ldr	r3, [pc, #120]	; (800c0f0 <__sfp+0x84>)
 800c076:	681e      	ldr	r6, [r3, #0]
 800c078:	69b3      	ldr	r3, [r6, #24]
 800c07a:	b913      	cbnz	r3, 800c082 <__sfp+0x16>
 800c07c:	4630      	mov	r0, r6
 800c07e:	f7ff ffbd 	bl	800bffc <__sinit>
 800c082:	3648      	adds	r6, #72	; 0x48
 800c084:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800c088:	3b01      	subs	r3, #1
 800c08a:	d503      	bpl.n	800c094 <__sfp+0x28>
 800c08c:	6833      	ldr	r3, [r6, #0]
 800c08e:	b30b      	cbz	r3, 800c0d4 <__sfp+0x68>
 800c090:	6836      	ldr	r6, [r6, #0]
 800c092:	e7f7      	b.n	800c084 <__sfp+0x18>
 800c094:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800c098:	b9d5      	cbnz	r5, 800c0d0 <__sfp+0x64>
 800c09a:	4b16      	ldr	r3, [pc, #88]	; (800c0f4 <__sfp+0x88>)
 800c09c:	60e3      	str	r3, [r4, #12]
 800c09e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800c0a2:	6665      	str	r5, [r4, #100]	; 0x64
 800c0a4:	f000 f847 	bl	800c136 <__retarget_lock_init_recursive>
 800c0a8:	f7ff ff96 	bl	800bfd8 <__sfp_lock_release>
 800c0ac:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800c0b0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800c0b4:	6025      	str	r5, [r4, #0]
 800c0b6:	61a5      	str	r5, [r4, #24]
 800c0b8:	2208      	movs	r2, #8
 800c0ba:	4629      	mov	r1, r5
 800c0bc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800c0c0:	f7fd fab0 	bl	8009624 <memset>
 800c0c4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800c0c8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800c0cc:	4620      	mov	r0, r4
 800c0ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c0d0:	3468      	adds	r4, #104	; 0x68
 800c0d2:	e7d9      	b.n	800c088 <__sfp+0x1c>
 800c0d4:	2104      	movs	r1, #4
 800c0d6:	4638      	mov	r0, r7
 800c0d8:	f7ff ff62 	bl	800bfa0 <__sfmoreglue>
 800c0dc:	4604      	mov	r4, r0
 800c0de:	6030      	str	r0, [r6, #0]
 800c0e0:	2800      	cmp	r0, #0
 800c0e2:	d1d5      	bne.n	800c090 <__sfp+0x24>
 800c0e4:	f7ff ff78 	bl	800bfd8 <__sfp_lock_release>
 800c0e8:	230c      	movs	r3, #12
 800c0ea:	603b      	str	r3, [r7, #0]
 800c0ec:	e7ee      	b.n	800c0cc <__sfp+0x60>
 800c0ee:	bf00      	nop
 800c0f0:	0800c4a4 	.word	0x0800c4a4
 800c0f4:	ffff0001 	.word	0xffff0001

0800c0f8 <_fwalk_reent>:
 800c0f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c0fc:	4606      	mov	r6, r0
 800c0fe:	4688      	mov	r8, r1
 800c100:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800c104:	2700      	movs	r7, #0
 800c106:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800c10a:	f1b9 0901 	subs.w	r9, r9, #1
 800c10e:	d505      	bpl.n	800c11c <_fwalk_reent+0x24>
 800c110:	6824      	ldr	r4, [r4, #0]
 800c112:	2c00      	cmp	r4, #0
 800c114:	d1f7      	bne.n	800c106 <_fwalk_reent+0xe>
 800c116:	4638      	mov	r0, r7
 800c118:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c11c:	89ab      	ldrh	r3, [r5, #12]
 800c11e:	2b01      	cmp	r3, #1
 800c120:	d907      	bls.n	800c132 <_fwalk_reent+0x3a>
 800c122:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800c126:	3301      	adds	r3, #1
 800c128:	d003      	beq.n	800c132 <_fwalk_reent+0x3a>
 800c12a:	4629      	mov	r1, r5
 800c12c:	4630      	mov	r0, r6
 800c12e:	47c0      	blx	r8
 800c130:	4307      	orrs	r7, r0
 800c132:	3568      	adds	r5, #104	; 0x68
 800c134:	e7e9      	b.n	800c10a <_fwalk_reent+0x12>

0800c136 <__retarget_lock_init_recursive>:
 800c136:	4770      	bx	lr

0800c138 <__retarget_lock_acquire_recursive>:
 800c138:	4770      	bx	lr

0800c13a <__retarget_lock_release_recursive>:
 800c13a:	4770      	bx	lr

0800c13c <__swhatbuf_r>:
 800c13c:	b570      	push	{r4, r5, r6, lr}
 800c13e:	460e      	mov	r6, r1
 800c140:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c144:	2900      	cmp	r1, #0
 800c146:	b096      	sub	sp, #88	; 0x58
 800c148:	4614      	mov	r4, r2
 800c14a:	461d      	mov	r5, r3
 800c14c:	da08      	bge.n	800c160 <__swhatbuf_r+0x24>
 800c14e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800c152:	2200      	movs	r2, #0
 800c154:	602a      	str	r2, [r5, #0]
 800c156:	061a      	lsls	r2, r3, #24
 800c158:	d410      	bmi.n	800c17c <__swhatbuf_r+0x40>
 800c15a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c15e:	e00e      	b.n	800c17e <__swhatbuf_r+0x42>
 800c160:	466a      	mov	r2, sp
 800c162:	f000 f903 	bl	800c36c <_fstat_r>
 800c166:	2800      	cmp	r0, #0
 800c168:	dbf1      	blt.n	800c14e <__swhatbuf_r+0x12>
 800c16a:	9a01      	ldr	r2, [sp, #4]
 800c16c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800c170:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800c174:	425a      	negs	r2, r3
 800c176:	415a      	adcs	r2, r3
 800c178:	602a      	str	r2, [r5, #0]
 800c17a:	e7ee      	b.n	800c15a <__swhatbuf_r+0x1e>
 800c17c:	2340      	movs	r3, #64	; 0x40
 800c17e:	2000      	movs	r0, #0
 800c180:	6023      	str	r3, [r4, #0]
 800c182:	b016      	add	sp, #88	; 0x58
 800c184:	bd70      	pop	{r4, r5, r6, pc}
	...

0800c188 <__smakebuf_r>:
 800c188:	898b      	ldrh	r3, [r1, #12]
 800c18a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800c18c:	079d      	lsls	r5, r3, #30
 800c18e:	4606      	mov	r6, r0
 800c190:	460c      	mov	r4, r1
 800c192:	d507      	bpl.n	800c1a4 <__smakebuf_r+0x1c>
 800c194:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800c198:	6023      	str	r3, [r4, #0]
 800c19a:	6123      	str	r3, [r4, #16]
 800c19c:	2301      	movs	r3, #1
 800c19e:	6163      	str	r3, [r4, #20]
 800c1a0:	b002      	add	sp, #8
 800c1a2:	bd70      	pop	{r4, r5, r6, pc}
 800c1a4:	ab01      	add	r3, sp, #4
 800c1a6:	466a      	mov	r2, sp
 800c1a8:	f7ff ffc8 	bl	800c13c <__swhatbuf_r>
 800c1ac:	9900      	ldr	r1, [sp, #0]
 800c1ae:	4605      	mov	r5, r0
 800c1b0:	4630      	mov	r0, r6
 800c1b2:	f7ff f963 	bl	800b47c <_malloc_r>
 800c1b6:	b948      	cbnz	r0, 800c1cc <__smakebuf_r+0x44>
 800c1b8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c1bc:	059a      	lsls	r2, r3, #22
 800c1be:	d4ef      	bmi.n	800c1a0 <__smakebuf_r+0x18>
 800c1c0:	f023 0303 	bic.w	r3, r3, #3
 800c1c4:	f043 0302 	orr.w	r3, r3, #2
 800c1c8:	81a3      	strh	r3, [r4, #12]
 800c1ca:	e7e3      	b.n	800c194 <__smakebuf_r+0xc>
 800c1cc:	4b0d      	ldr	r3, [pc, #52]	; (800c204 <__smakebuf_r+0x7c>)
 800c1ce:	62b3      	str	r3, [r6, #40]	; 0x28
 800c1d0:	89a3      	ldrh	r3, [r4, #12]
 800c1d2:	6020      	str	r0, [r4, #0]
 800c1d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c1d8:	81a3      	strh	r3, [r4, #12]
 800c1da:	9b00      	ldr	r3, [sp, #0]
 800c1dc:	6163      	str	r3, [r4, #20]
 800c1de:	9b01      	ldr	r3, [sp, #4]
 800c1e0:	6120      	str	r0, [r4, #16]
 800c1e2:	b15b      	cbz	r3, 800c1fc <__smakebuf_r+0x74>
 800c1e4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c1e8:	4630      	mov	r0, r6
 800c1ea:	f000 f8d1 	bl	800c390 <_isatty_r>
 800c1ee:	b128      	cbz	r0, 800c1fc <__smakebuf_r+0x74>
 800c1f0:	89a3      	ldrh	r3, [r4, #12]
 800c1f2:	f023 0303 	bic.w	r3, r3, #3
 800c1f6:	f043 0301 	orr.w	r3, r3, #1
 800c1fa:	81a3      	strh	r3, [r4, #12]
 800c1fc:	89a0      	ldrh	r0, [r4, #12]
 800c1fe:	4305      	orrs	r5, r0
 800c200:	81a5      	strh	r5, [r4, #12]
 800c202:	e7cd      	b.n	800c1a0 <__smakebuf_r+0x18>
 800c204:	0800bf95 	.word	0x0800bf95

0800c208 <_malloc_usable_size_r>:
 800c208:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c20c:	1f18      	subs	r0, r3, #4
 800c20e:	2b00      	cmp	r3, #0
 800c210:	bfbc      	itt	lt
 800c212:	580b      	ldrlt	r3, [r1, r0]
 800c214:	18c0      	addlt	r0, r0, r3
 800c216:	4770      	bx	lr

0800c218 <_raise_r>:
 800c218:	291f      	cmp	r1, #31
 800c21a:	b538      	push	{r3, r4, r5, lr}
 800c21c:	4604      	mov	r4, r0
 800c21e:	460d      	mov	r5, r1
 800c220:	d904      	bls.n	800c22c <_raise_r+0x14>
 800c222:	2316      	movs	r3, #22
 800c224:	6003      	str	r3, [r0, #0]
 800c226:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c22a:	bd38      	pop	{r3, r4, r5, pc}
 800c22c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800c22e:	b112      	cbz	r2, 800c236 <_raise_r+0x1e>
 800c230:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800c234:	b94b      	cbnz	r3, 800c24a <_raise_r+0x32>
 800c236:	4620      	mov	r0, r4
 800c238:	f000 f830 	bl	800c29c <_getpid_r>
 800c23c:	462a      	mov	r2, r5
 800c23e:	4601      	mov	r1, r0
 800c240:	4620      	mov	r0, r4
 800c242:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c246:	f000 b817 	b.w	800c278 <_kill_r>
 800c24a:	2b01      	cmp	r3, #1
 800c24c:	d00a      	beq.n	800c264 <_raise_r+0x4c>
 800c24e:	1c59      	adds	r1, r3, #1
 800c250:	d103      	bne.n	800c25a <_raise_r+0x42>
 800c252:	2316      	movs	r3, #22
 800c254:	6003      	str	r3, [r0, #0]
 800c256:	2001      	movs	r0, #1
 800c258:	e7e7      	b.n	800c22a <_raise_r+0x12>
 800c25a:	2400      	movs	r4, #0
 800c25c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800c260:	4628      	mov	r0, r5
 800c262:	4798      	blx	r3
 800c264:	2000      	movs	r0, #0
 800c266:	e7e0      	b.n	800c22a <_raise_r+0x12>

0800c268 <raise>:
 800c268:	4b02      	ldr	r3, [pc, #8]	; (800c274 <raise+0xc>)
 800c26a:	4601      	mov	r1, r0
 800c26c:	6818      	ldr	r0, [r3, #0]
 800c26e:	f7ff bfd3 	b.w	800c218 <_raise_r>
 800c272:	bf00      	nop
 800c274:	2000000c 	.word	0x2000000c

0800c278 <_kill_r>:
 800c278:	b538      	push	{r3, r4, r5, lr}
 800c27a:	4d07      	ldr	r5, [pc, #28]	; (800c298 <_kill_r+0x20>)
 800c27c:	2300      	movs	r3, #0
 800c27e:	4604      	mov	r4, r0
 800c280:	4608      	mov	r0, r1
 800c282:	4611      	mov	r1, r2
 800c284:	602b      	str	r3, [r5, #0]
 800c286:	f7f5 ff99 	bl	80021bc <_kill>
 800c28a:	1c43      	adds	r3, r0, #1
 800c28c:	d102      	bne.n	800c294 <_kill_r+0x1c>
 800c28e:	682b      	ldr	r3, [r5, #0]
 800c290:	b103      	cbz	r3, 800c294 <_kill_r+0x1c>
 800c292:	6023      	str	r3, [r4, #0]
 800c294:	bd38      	pop	{r3, r4, r5, pc}
 800c296:	bf00      	nop
 800c298:	20001818 	.word	0x20001818

0800c29c <_getpid_r>:
 800c29c:	f7f5 bf86 	b.w	80021ac <_getpid>

0800c2a0 <__sread>:
 800c2a0:	b510      	push	{r4, lr}
 800c2a2:	460c      	mov	r4, r1
 800c2a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c2a8:	f000 f894 	bl	800c3d4 <_read_r>
 800c2ac:	2800      	cmp	r0, #0
 800c2ae:	bfab      	itete	ge
 800c2b0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800c2b2:	89a3      	ldrhlt	r3, [r4, #12]
 800c2b4:	181b      	addge	r3, r3, r0
 800c2b6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800c2ba:	bfac      	ite	ge
 800c2bc:	6563      	strge	r3, [r4, #84]	; 0x54
 800c2be:	81a3      	strhlt	r3, [r4, #12]
 800c2c0:	bd10      	pop	{r4, pc}

0800c2c2 <__swrite>:
 800c2c2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c2c6:	461f      	mov	r7, r3
 800c2c8:	898b      	ldrh	r3, [r1, #12]
 800c2ca:	05db      	lsls	r3, r3, #23
 800c2cc:	4605      	mov	r5, r0
 800c2ce:	460c      	mov	r4, r1
 800c2d0:	4616      	mov	r6, r2
 800c2d2:	d505      	bpl.n	800c2e0 <__swrite+0x1e>
 800c2d4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c2d8:	2302      	movs	r3, #2
 800c2da:	2200      	movs	r2, #0
 800c2dc:	f000 f868 	bl	800c3b0 <_lseek_r>
 800c2e0:	89a3      	ldrh	r3, [r4, #12]
 800c2e2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c2e6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800c2ea:	81a3      	strh	r3, [r4, #12]
 800c2ec:	4632      	mov	r2, r6
 800c2ee:	463b      	mov	r3, r7
 800c2f0:	4628      	mov	r0, r5
 800c2f2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c2f6:	f000 b817 	b.w	800c328 <_write_r>

0800c2fa <__sseek>:
 800c2fa:	b510      	push	{r4, lr}
 800c2fc:	460c      	mov	r4, r1
 800c2fe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c302:	f000 f855 	bl	800c3b0 <_lseek_r>
 800c306:	1c43      	adds	r3, r0, #1
 800c308:	89a3      	ldrh	r3, [r4, #12]
 800c30a:	bf15      	itete	ne
 800c30c:	6560      	strne	r0, [r4, #84]	; 0x54
 800c30e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800c312:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800c316:	81a3      	strheq	r3, [r4, #12]
 800c318:	bf18      	it	ne
 800c31a:	81a3      	strhne	r3, [r4, #12]
 800c31c:	bd10      	pop	{r4, pc}

0800c31e <__sclose>:
 800c31e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c322:	f000 b813 	b.w	800c34c <_close_r>
	...

0800c328 <_write_r>:
 800c328:	b538      	push	{r3, r4, r5, lr}
 800c32a:	4d07      	ldr	r5, [pc, #28]	; (800c348 <_write_r+0x20>)
 800c32c:	4604      	mov	r4, r0
 800c32e:	4608      	mov	r0, r1
 800c330:	4611      	mov	r1, r2
 800c332:	2200      	movs	r2, #0
 800c334:	602a      	str	r2, [r5, #0]
 800c336:	461a      	mov	r2, r3
 800c338:	f7f5 ff77 	bl	800222a <_write>
 800c33c:	1c43      	adds	r3, r0, #1
 800c33e:	d102      	bne.n	800c346 <_write_r+0x1e>
 800c340:	682b      	ldr	r3, [r5, #0]
 800c342:	b103      	cbz	r3, 800c346 <_write_r+0x1e>
 800c344:	6023      	str	r3, [r4, #0]
 800c346:	bd38      	pop	{r3, r4, r5, pc}
 800c348:	20001818 	.word	0x20001818

0800c34c <_close_r>:
 800c34c:	b538      	push	{r3, r4, r5, lr}
 800c34e:	4d06      	ldr	r5, [pc, #24]	; (800c368 <_close_r+0x1c>)
 800c350:	2300      	movs	r3, #0
 800c352:	4604      	mov	r4, r0
 800c354:	4608      	mov	r0, r1
 800c356:	602b      	str	r3, [r5, #0]
 800c358:	f7f5 ff83 	bl	8002262 <_close>
 800c35c:	1c43      	adds	r3, r0, #1
 800c35e:	d102      	bne.n	800c366 <_close_r+0x1a>
 800c360:	682b      	ldr	r3, [r5, #0]
 800c362:	b103      	cbz	r3, 800c366 <_close_r+0x1a>
 800c364:	6023      	str	r3, [r4, #0]
 800c366:	bd38      	pop	{r3, r4, r5, pc}
 800c368:	20001818 	.word	0x20001818

0800c36c <_fstat_r>:
 800c36c:	b538      	push	{r3, r4, r5, lr}
 800c36e:	4d07      	ldr	r5, [pc, #28]	; (800c38c <_fstat_r+0x20>)
 800c370:	2300      	movs	r3, #0
 800c372:	4604      	mov	r4, r0
 800c374:	4608      	mov	r0, r1
 800c376:	4611      	mov	r1, r2
 800c378:	602b      	str	r3, [r5, #0]
 800c37a:	f7f5 ff7e 	bl	800227a <_fstat>
 800c37e:	1c43      	adds	r3, r0, #1
 800c380:	d102      	bne.n	800c388 <_fstat_r+0x1c>
 800c382:	682b      	ldr	r3, [r5, #0]
 800c384:	b103      	cbz	r3, 800c388 <_fstat_r+0x1c>
 800c386:	6023      	str	r3, [r4, #0]
 800c388:	bd38      	pop	{r3, r4, r5, pc}
 800c38a:	bf00      	nop
 800c38c:	20001818 	.word	0x20001818

0800c390 <_isatty_r>:
 800c390:	b538      	push	{r3, r4, r5, lr}
 800c392:	4d06      	ldr	r5, [pc, #24]	; (800c3ac <_isatty_r+0x1c>)
 800c394:	2300      	movs	r3, #0
 800c396:	4604      	mov	r4, r0
 800c398:	4608      	mov	r0, r1
 800c39a:	602b      	str	r3, [r5, #0]
 800c39c:	f7f5 ff7d 	bl	800229a <_isatty>
 800c3a0:	1c43      	adds	r3, r0, #1
 800c3a2:	d102      	bne.n	800c3aa <_isatty_r+0x1a>
 800c3a4:	682b      	ldr	r3, [r5, #0]
 800c3a6:	b103      	cbz	r3, 800c3aa <_isatty_r+0x1a>
 800c3a8:	6023      	str	r3, [r4, #0]
 800c3aa:	bd38      	pop	{r3, r4, r5, pc}
 800c3ac:	20001818 	.word	0x20001818

0800c3b0 <_lseek_r>:
 800c3b0:	b538      	push	{r3, r4, r5, lr}
 800c3b2:	4d07      	ldr	r5, [pc, #28]	; (800c3d0 <_lseek_r+0x20>)
 800c3b4:	4604      	mov	r4, r0
 800c3b6:	4608      	mov	r0, r1
 800c3b8:	4611      	mov	r1, r2
 800c3ba:	2200      	movs	r2, #0
 800c3bc:	602a      	str	r2, [r5, #0]
 800c3be:	461a      	mov	r2, r3
 800c3c0:	f7f5 ff76 	bl	80022b0 <_lseek>
 800c3c4:	1c43      	adds	r3, r0, #1
 800c3c6:	d102      	bne.n	800c3ce <_lseek_r+0x1e>
 800c3c8:	682b      	ldr	r3, [r5, #0]
 800c3ca:	b103      	cbz	r3, 800c3ce <_lseek_r+0x1e>
 800c3cc:	6023      	str	r3, [r4, #0]
 800c3ce:	bd38      	pop	{r3, r4, r5, pc}
 800c3d0:	20001818 	.word	0x20001818

0800c3d4 <_read_r>:
 800c3d4:	b538      	push	{r3, r4, r5, lr}
 800c3d6:	4d07      	ldr	r5, [pc, #28]	; (800c3f4 <_read_r+0x20>)
 800c3d8:	4604      	mov	r4, r0
 800c3da:	4608      	mov	r0, r1
 800c3dc:	4611      	mov	r1, r2
 800c3de:	2200      	movs	r2, #0
 800c3e0:	602a      	str	r2, [r5, #0]
 800c3e2:	461a      	mov	r2, r3
 800c3e4:	f7f5 ff04 	bl	80021f0 <_read>
 800c3e8:	1c43      	adds	r3, r0, #1
 800c3ea:	d102      	bne.n	800c3f2 <_read_r+0x1e>
 800c3ec:	682b      	ldr	r3, [r5, #0]
 800c3ee:	b103      	cbz	r3, 800c3f2 <_read_r+0x1e>
 800c3f0:	6023      	str	r3, [r4, #0]
 800c3f2:	bd38      	pop	{r3, r4, r5, pc}
 800c3f4:	20001818 	.word	0x20001818

0800c3f8 <_init>:
 800c3f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c3fa:	bf00      	nop
 800c3fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c3fe:	bc08      	pop	{r3}
 800c400:	469e      	mov	lr, r3
 800c402:	4770      	bx	lr

0800c404 <_fini>:
 800c404:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c406:	bf00      	nop
 800c408:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c40a:	bc08      	pop	{r3}
 800c40c:	469e      	mov	lr, r3
 800c40e:	4770      	bx	lr
