
Anemometer_200_F303.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a37c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000474  0800a510  0800a510  0001a510  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a984  0800a984  000201dc  2**0
                  CONTENTS
  4 .ARM          00000000  0800a984  0800a984  000201dc  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800a984  0800a984  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a984  0800a984  0001a984  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a988  0800a988  0001a988  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  0800a98c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000062c  200001e0  0800ab68  000201e0  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  2000080c  0800ab68  0002080c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001b06f  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002df4  00000000  00000000  0003b27b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000014a8  00000000  00000000  0003e070  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001390  00000000  00000000  0003f518  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00020ff4  00000000  00000000  000408a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001a3d9  00000000  00000000  0006189c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c5957  00000000  00000000  0007bc75  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001415cc  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006a68  00000000  00000000  00141620  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001e0 	.word	0x200001e0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800a4f4 	.word	0x0800a4f4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e4 	.word	0x200001e4
 80001cc:	0800a4f4 	.word	0x0800a4f4

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <levelUp>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void levelUp(uint8_t channel, uint8_t lev, bool updn) {
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	b084      	sub	sp, #16
 8000bac:	af00      	add	r7, sp, #0
 8000bae:	4603      	mov	r3, r0
 8000bb0:	71fb      	strb	r3, [r7, #7]
 8000bb2:	460b      	mov	r3, r1
 8000bb4:	71bb      	strb	r3, [r7, #6]
 8000bb6:	4613      	mov	r3, r2
 8000bb8:	717b      	strb	r3, [r7, #5]
	//LED_PULSE
	/* Начальный уровень -- высокий, переключение выполняется переходом в низкий уровень */
	HAL_GPIO_WritePin(INC_GPIO_Port, INC_Pin, GPIO_PIN_SET);
 8000bba:	2201      	movs	r2, #1
 8000bbc:	2110      	movs	r1, #16
 8000bbe:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000bc2:	f003 f881 	bl	8003cc8 <HAL_GPIO_WritePin>
	/* Отключим выбор всех регуляторов */
	HAL_GPIO_WritePin(CS1_GPIO_Port, CS1_Pin, GPIO_PIN_SET);
 8000bc6:	2201      	movs	r2, #1
 8000bc8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000bcc:	4836      	ldr	r0, [pc, #216]	; (8000ca8 <levelUp+0x100>)
 8000bce:	f003 f87b 	bl	8003cc8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(CS2_GPIO_Port, CS2_Pin, GPIO_PIN_SET);
 8000bd2:	2201      	movs	r2, #1
 8000bd4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000bd8:	4833      	ldr	r0, [pc, #204]	; (8000ca8 <levelUp+0x100>)
 8000bda:	f003 f875 	bl	8003cc8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(CS3_GPIO_Port, CS3_Pin, GPIO_PIN_SET);
 8000bde:	2201      	movs	r2, #1
 8000be0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000be4:	4830      	ldr	r0, [pc, #192]	; (8000ca8 <levelUp+0x100>)
 8000be6:	f003 f86f 	bl	8003cc8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(CS4_GPIO_Port, CS4_Pin, GPIO_PIN_SET);
 8000bea:	2201      	movs	r2, #1
 8000bec:	2120      	movs	r1, #32
 8000bee:	482f      	ldr	r0, [pc, #188]	; (8000cac <levelUp+0x104>)
 8000bf0:	f003 f86a 	bl	8003cc8 <HAL_GPIO_WritePin>
	/* Режим повышения уровня сигнала */
	if (updn) {
 8000bf4:	797b      	ldrb	r3, [r7, #5]
 8000bf6:	2b00      	cmp	r3, #0
 8000bf8:	d006      	beq.n	8000c08 <levelUp+0x60>
		HAL_GPIO_WritePin(UD_GPIO_Port, UD_Pin, GPIO_PIN_SET);
 8000bfa:	2201      	movs	r2, #1
 8000bfc:	2120      	movs	r1, #32
 8000bfe:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c02:	f003 f861 	bl	8003cc8 <HAL_GPIO_WritePin>
 8000c06:	e005      	b.n	8000c14 <levelUp+0x6c>
	} else {
		HAL_GPIO_WritePin(UD_GPIO_Port, UD_Pin, GPIO_PIN_RESET);
 8000c08:	2200      	movs	r2, #0
 8000c0a:	2120      	movs	r1, #32
 8000c0c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c10:	f003 f85a 	bl	8003cc8 <HAL_GPIO_WritePin>
	}
	switch(channel) {
 8000c14:	79fb      	ldrb	r3, [r7, #7]
 8000c16:	2b03      	cmp	r3, #3
 8000c18:	d842      	bhi.n	8000ca0 <levelUp+0xf8>
 8000c1a:	a201      	add	r2, pc, #4	; (adr r2, 8000c20 <levelUp+0x78>)
 8000c1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c20:	08000c31 	.word	0x08000c31
 8000c24:	08000c3f 	.word	0x08000c3f
 8000c28:	08000c4d 	.word	0x08000c4d
 8000c2c:	08000c5b 	.word	0x08000c5b
		case 0: {
			HAL_GPIO_WritePin(CS1_GPIO_Port, CS1_Pin, GPIO_PIN_RESET);
 8000c30:	2200      	movs	r2, #0
 8000c32:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000c36:	481c      	ldr	r0, [pc, #112]	; (8000ca8 <levelUp+0x100>)
 8000c38:	f003 f846 	bl	8003cc8 <HAL_GPIO_WritePin>
			break;
 8000c3c:	e013      	b.n	8000c66 <levelUp+0xbe>
		}
		case 1: {
			HAL_GPIO_WritePin(CS2_GPIO_Port, CS2_Pin, GPIO_PIN_RESET);
 8000c3e:	2200      	movs	r2, #0
 8000c40:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000c44:	4818      	ldr	r0, [pc, #96]	; (8000ca8 <levelUp+0x100>)
 8000c46:	f003 f83f 	bl	8003cc8 <HAL_GPIO_WritePin>
			break;
 8000c4a:	e00c      	b.n	8000c66 <levelUp+0xbe>
		}
		case 2: {
			HAL_GPIO_WritePin(CS3_GPIO_Port, CS3_Pin, GPIO_PIN_RESET);
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000c52:	4815      	ldr	r0, [pc, #84]	; (8000ca8 <levelUp+0x100>)
 8000c54:	f003 f838 	bl	8003cc8 <HAL_GPIO_WritePin>
			break;
 8000c58:	e005      	b.n	8000c66 <levelUp+0xbe>
		}
		case 3: {
			HAL_GPIO_WritePin(CS4_GPIO_Port, CS4_Pin, GPIO_PIN_RESET);
 8000c5a:	2200      	movs	r2, #0
 8000c5c:	2120      	movs	r1, #32
 8000c5e:	4813      	ldr	r0, [pc, #76]	; (8000cac <levelUp+0x104>)
 8000c60:	f003 f832 	bl	8003cc8 <HAL_GPIO_WritePin>
			break;
 8000c64:	bf00      	nop
		}
		default: {
			return;
		}
	}
	for (int iii = 0; iii < lev; iii++) {
 8000c66:	2300      	movs	r3, #0
 8000c68:	60fb      	str	r3, [r7, #12]
 8000c6a:	e00e      	b.n	8000c8a <levelUp+0xe2>
		HAL_GPIO_WritePin(INC_GPIO_Port, INC_Pin, GPIO_PIN_RESET);
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	2110      	movs	r1, #16
 8000c70:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c74:	f003 f828 	bl	8003cc8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(INC_GPIO_Port, INC_Pin, GPIO_PIN_SET);
 8000c78:	2201      	movs	r2, #1
 8000c7a:	2110      	movs	r1, #16
 8000c7c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c80:	f003 f822 	bl	8003cc8 <HAL_GPIO_WritePin>
	for (int iii = 0; iii < lev; iii++) {
 8000c84:	68fb      	ldr	r3, [r7, #12]
 8000c86:	3301      	adds	r3, #1
 8000c88:	60fb      	str	r3, [r7, #12]
 8000c8a:	79bb      	ldrb	r3, [r7, #6]
 8000c8c:	68fa      	ldr	r2, [r7, #12]
 8000c8e:	429a      	cmp	r2, r3
 8000c90:	dbec      	blt.n	8000c6c <levelUp+0xc4>
	}
	HAL_GPIO_WritePin(INC_GPIO_Port, INC_Pin, GPIO_PIN_RESET);
 8000c92:	2200      	movs	r2, #0
 8000c94:	2110      	movs	r1, #16
 8000c96:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c9a:	f003 f815 	bl	8003cc8 <HAL_GPIO_WritePin>
 8000c9e:	e000      	b.n	8000ca2 <levelUp+0xfa>
			return;
 8000ca0:	bf00      	nop
}
 8000ca2:	3710      	adds	r7, #16
 8000ca4:	46bd      	mov	sp, r7
 8000ca6:	bd80      	pop	{r7, pc}
 8000ca8:	48000800 	.word	0x48000800
 8000cac:	48000400 	.word	0x48000400

08000cb0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	b084      	sub	sp, #16
 8000cb4:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000cb6:	f001 f939 	bl	8001f2c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000cba:	f000 f8b9 	bl	8000e30 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000cbe:	f000 fc03 	bl	80014c8 <MX_GPIO_Init>
  MX_DMA_Init();
 8000cc2:	f000 fbe3 	bl	800148c <MX_DMA_Init>
  MX_TIM1_Init();
 8000cc6:	f000 fa09 	bl	80010dc <MX_TIM1_Init>
  MX_ADC1_Init();
 8000cca:	f000 f917 	bl	8000efc <MX_ADC1_Init>
  MX_I2C1_Init();
 8000cce:	f000 f987 	bl	8000fe0 <MX_I2C1_Init>
  MX_SPI2_Init();
 8000cd2:	f000 f9c5 	bl	8001060 <MX_SPI2_Init>
  MX_USART1_UART_Init();
 8000cd6:	f000 fb79 	bl	80013cc <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8000cda:	f000 fba7 	bl	800142c <MX_USART2_UART_Init>
  MX_TIM4_Init();
 8000cde:	f000 fb27 	bl	8001330 <MX_TIM4_Init>
  MX_TIM3_Init();
 8000ce2:	f000 fab7 	bl	8001254 <MX_TIM3_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  HAL_UART_Transmit(&huart1, (uint8_t *) START_TEXT, sizeof(START_TEXT), 1000);
 8000ce6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000cea:	2217      	movs	r2, #23
 8000cec:	4940      	ldr	r1, [pc, #256]	; (8000df0 <main+0x140>)
 8000cee:	4841      	ldr	r0, [pc, #260]	; (8000df4 <main+0x144>)
 8000cf0:	f006 f8c6 	bl	8006e80 <HAL_UART_Transmit>
  TIM3->ARR = MEASURMENT_DALAY;
 8000cf4:	4b40      	ldr	r3, [pc, #256]	; (8000df8 <main+0x148>)
 8000cf6:	f648 02b8 	movw	r2, #35000	; 0x88b8
 8000cfa:	62da      	str	r2, [r3, #44]	; 0x2c
  for (int iii = 0; iii < CONVERSION_COUNT; iii++) {
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	607b      	str	r3, [r7, #4]
 8000d00:	e007      	b.n	8000d12 <main+0x62>
	  adcBuffer[iii] = 0;
 8000d02:	4a3e      	ldr	r2, [pc, #248]	; (8000dfc <main+0x14c>)
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	2100      	movs	r1, #0
 8000d08:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
  for (int iii = 0; iii < CONVERSION_COUNT; iii++) {
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	3301      	adds	r3, #1
 8000d10:	607b      	str	r3, [r7, #4]
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	2bc7      	cmp	r3, #199	; 0xc7
 8000d16:	ddf4      	ble.n	8000d02 <main+0x52>
  }
  for (int iii = 0; iii <  REF_COUNT; iii++) {
 8000d18:	2300      	movs	r3, #0
 8000d1a:	603b      	str	r3, [r7, #0]
 8000d1c:	e007      	b.n	8000d2e <main+0x7e>
	  refArray[iii] = 1;
 8000d1e:	4a38      	ldr	r2, [pc, #224]	; (8000e00 <main+0x150>)
 8000d20:	683b      	ldr	r3, [r7, #0]
 8000d22:	2101      	movs	r1, #1
 8000d24:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
  for (int iii = 0; iii <  REF_COUNT; iii++) {
 8000d28:	683b      	ldr	r3, [r7, #0]
 8000d2a:	3301      	adds	r3, #1
 8000d2c:	603b      	str	r3, [r7, #0]
 8000d2e:	683b      	ldr	r3, [r7, #0]
 8000d30:	2b13      	cmp	r3, #19
 8000d32:	ddf4      	ble.n	8000d1e <main+0x6e>
  }
  HAL_GPIO_WritePin(Z1Sel_GPIO_Port, Z1Sel_Pin, GPIO_PIN_SET);
 8000d34:	2201      	movs	r2, #1
 8000d36:	2101      	movs	r1, #1
 8000d38:	4832      	ldr	r0, [pc, #200]	; (8000e04 <main+0x154>)
 8000d3a:	f002 ffc5 	bl	8003cc8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(Z2Sel_GPIO_Port, Z2Sel_Pin, GPIO_PIN_SET);
 8000d3e:	2201      	movs	r2, #1
 8000d40:	2102      	movs	r1, #2
 8000d42:	4830      	ldr	r0, [pc, #192]	; (8000e04 <main+0x154>)
 8000d44:	f002 ffc0 	bl	8003cc8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(Z3Sel_GPIO_Port, Z3Sel_Pin, GPIO_PIN_SET);
 8000d48:	2201      	movs	r2, #1
 8000d4a:	2104      	movs	r1, #4
 8000d4c:	482d      	ldr	r0, [pc, #180]	; (8000e04 <main+0x154>)
 8000d4e:	f002 ffbb 	bl	8003cc8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(Z4Sel_GPIO_Port, Z4Sel_Pin, GPIO_PIN_SET);
 8000d52:	2201      	movs	r2, #1
 8000d54:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000d58:	482a      	ldr	r0, [pc, #168]	; (8000e04 <main+0x154>)
 8000d5a:	f002 ffb5 	bl	8003cc8 <HAL_GPIO_WritePin>

  if ( (HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED) == HAL_OK)
 8000d5e:	2100      	movs	r1, #0
 8000d60:	4829      	ldr	r0, [pc, #164]	; (8000e08 <main+0x158>)
 8000d62:	f001 fce9 	bl	8002738 <HAL_ADCEx_Calibration_Start>
 8000d66:	4603      	mov	r3, r0
 8000d68:	2b00      	cmp	r3, #0
 8000d6a:	d113      	bne.n	8000d94 <main+0xe4>
	&& (HAL_TIM_Base_Start_IT(&htim3) == HAL_OK)
 8000d6c:	4827      	ldr	r0, [pc, #156]	; (8000e0c <main+0x15c>)
 8000d6e:	f004 fcdb 	bl	8005728 <HAL_TIM_Base_Start_IT>
 8000d72:	4603      	mov	r3, r0
 8000d74:	2b00      	cmp	r3, #0
 8000d76:	d10d      	bne.n	8000d94 <main+0xe4>
	&& (HAL_TIM_Base_Start_IT(&htim4) == HAL_OK) ) {
 8000d78:	4825      	ldr	r0, [pc, #148]	; (8000e10 <main+0x160>)
 8000d7a:	f004 fcd5 	bl	8005728 <HAL_TIM_Base_Start_IT>
 8000d7e:	4603      	mov	r3, r0
 8000d80:	2b00      	cmp	r3, #0
 8000d82:	d107      	bne.n	8000d94 <main+0xe4>
	  HAL_UART_Transmit(&huart1, (uint8_t *) FINISH_TEXT, sizeof(FINISH_TEXT), 1000);
 8000d84:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d88:	220a      	movs	r2, #10
 8000d8a:	4922      	ldr	r1, [pc, #136]	; (8000e14 <main+0x164>)
 8000d8c:	4819      	ldr	r0, [pc, #100]	; (8000df4 <main+0x144>)
 8000d8e:	f006 f877 	bl	8006e80 <HAL_UART_Transmit>
 8000d92:	e00c      	b.n	8000dae <main+0xfe>
  } else {
	  HAL_UART_Transmit(&huart1, (uint8_t *) ERROR_TEXT, sizeof(ERROR_TEXT), 1000);
 8000d94:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d98:	221c      	movs	r2, #28
 8000d9a:	491f      	ldr	r1, [pc, #124]	; (8000e18 <main+0x168>)
 8000d9c:	4815      	ldr	r0, [pc, #84]	; (8000df4 <main+0x144>)
 8000d9e:	f006 f86f 	bl	8006e80 <HAL_UART_Transmit>
	  HAL_Delay(1000);
 8000da2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000da6:	f001 f927 	bl	8001ff8 <HAL_Delay>
	  HAL_NVIC_SystemReset();
 8000daa:	f002 fc16 	bl	80035da <HAL_NVIC_SystemReset>
			  adcBuffer[SHOW_DATA+5], adcBuffer[SHOW_DATA+6], adcBuffer[SHOW_DATA+7], adcBuffer[SHOW_DATA+8], adcBuffer[SHOW_DATA+9],
			  adcBuffer[SHOW_DATA+10], adcBuffer[SHOW_DATA+11], adcBuffer[SHOW_DATA+12], adcBuffer[SHOW_DATA+13], adcBuffer[SHOW_DATA+14],
			  adcBuffer[SHOW_DATA+15], adcBuffer[SHOW_DATA+16], adcBuffer[SHOW_DATA+17], adcBuffer[SHOW_DATA+18], adcBuffer[SHOW_DATA+19]);
	*/

	  if (readyData) {
 8000dae:	4b1b      	ldr	r3, [pc, #108]	; (8000e1c <main+0x16c>)
 8000db0:	781b      	ldrb	r3, [r3, #0]
 8000db2:	2b00      	cmp	r3, #0
 8000db4:	d0fb      	beq.n	8000dae <main+0xfe>
				  cnt++;
			  }
			  adcBuffer[i] = 0;
		  }
		  */
		  memset(SndBuffer, 0, sizeof(SndBuffer));
 8000db6:	22c8      	movs	r2, #200	; 0xc8
 8000db8:	2100      	movs	r1, #0
 8000dba:	4819      	ldr	r0, [pc, #100]	; (8000e20 <main+0x170>)
 8000dbc:	f006 fcfc 	bl	80077b8 <memset>
		  sprintf(SndBuffer, "Idx:%4.1u, Lev: %6.0f  \r", maxIndex, maxLev);
 8000dc0:	4b18      	ldr	r3, [pc, #96]	; (8000e24 <main+0x174>)
 8000dc2:	881b      	ldrh	r3, [r3, #0]
 8000dc4:	4619      	mov	r1, r3
 8000dc6:	4b18      	ldr	r3, [pc, #96]	; (8000e28 <main+0x178>)
 8000dc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000dcc:	e9cd 2300 	strd	r2, r3, [sp]
 8000dd0:	460a      	mov	r2, r1
 8000dd2:	4916      	ldr	r1, [pc, #88]	; (8000e2c <main+0x17c>)
 8000dd4:	4812      	ldr	r0, [pc, #72]	; (8000e20 <main+0x170>)
 8000dd6:	f007 f961 	bl	800809c <siprintf>
	  	  HAL_UART_Transmit(&huart1, (uint8_t *) SndBuffer, sizeof(SndBuffer), 1000);
 8000dda:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000dde:	22c8      	movs	r2, #200	; 0xc8
 8000de0:	490f      	ldr	r1, [pc, #60]	; (8000e20 <main+0x170>)
 8000de2:	4804      	ldr	r0, [pc, #16]	; (8000df4 <main+0x144>)
 8000de4:	f006 f84c 	bl	8006e80 <HAL_UART_Transmit>
	  	  readyData = false;
 8000de8:	4b0c      	ldr	r3, [pc, #48]	; (8000e1c <main+0x16c>)
 8000dea:	2200      	movs	r2, #0
 8000dec:	701a      	strb	r2, [r3, #0]
	  if (readyData) {
 8000dee:	e7de      	b.n	8000dae <main+0xfe>
 8000df0:	0800a510 	.word	0x0800a510
 8000df4:	20000648 	.word	0x20000648
 8000df8:	40000400 	.word	0x40000400
 8000dfc:	200002e4 	.word	0x200002e4
 8000e00:	2000057c 	.word	0x2000057c
 8000e04:	48000400 	.word	0x48000400
 8000e08:	200005f8 	.word	0x200005f8
 8000e0c:	200005a8 	.word	0x200005a8
 8000e10:	200004d8 	.word	0x200004d8
 8000e14:	0800a528 	.word	0x0800a528
 8000e18:	0800a534 	.word	0x0800a534
 8000e1c:	20000578 	.word	0x20000578
 8000e20:	2000021c 	.word	0x2000021c
 8000e24:	20000714 	.word	0x20000714
 8000e28:	20000210 	.word	0x20000210
 8000e2c:	0800a550 	.word	0x0800a550

08000e30 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e30:	b580      	push	{r7, lr}
 8000e32:	b09e      	sub	sp, #120	; 0x78
 8000e34:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e36:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000e3a:	2228      	movs	r2, #40	; 0x28
 8000e3c:	2100      	movs	r1, #0
 8000e3e:	4618      	mov	r0, r3
 8000e40:	f006 fcba 	bl	80077b8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e44:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000e48:	2200      	movs	r2, #0
 8000e4a:	601a      	str	r2, [r3, #0]
 8000e4c:	605a      	str	r2, [r3, #4]
 8000e4e:	609a      	str	r2, [r3, #8]
 8000e50:	60da      	str	r2, [r3, #12]
 8000e52:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000e54:	463b      	mov	r3, r7
 8000e56:	223c      	movs	r2, #60	; 0x3c
 8000e58:	2100      	movs	r1, #0
 8000e5a:	4618      	mov	r0, r3
 8000e5c:	f006 fcac 	bl	80077b8 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000e60:	2301      	movs	r3, #1
 8000e62:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000e64:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000e68:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV2;
 8000e6a:	2301      	movs	r3, #1
 8000e6c:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000e6e:	2301      	movs	r3, #1
 8000e70:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000e72:	2302      	movs	r3, #2
 8000e74:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000e76:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000e7a:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000e7c:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000e80:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e82:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000e86:	4618      	mov	r0, r3
 8000e88:	f003 f85c 	bl	8003f44 <HAL_RCC_OscConfig>
 8000e8c:	4603      	mov	r3, r0
 8000e8e:	2b00      	cmp	r3, #0
 8000e90:	d001      	beq.n	8000e96 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000e92:	f000 fb9d 	bl	80015d0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e96:	230f      	movs	r3, #15
 8000e98:	63fb      	str	r3, [r7, #60]	; 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e9a:	2302      	movs	r3, #2
 8000e9c:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e9e:	2300      	movs	r3, #0
 8000ea0:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000ea2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000ea6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000ea8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000eac:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000eae:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000eb2:	2102      	movs	r1, #2
 8000eb4:	4618      	mov	r0, r3
 8000eb6:	f003 ff4d 	bl	8004d54 <HAL_RCC_ClockConfig>
 8000eba:	4603      	mov	r3, r0
 8000ebc:	2b00      	cmp	r3, #0
 8000ebe:	d001      	beq.n	8000ec4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000ec0:	f000 fb86 	bl	80015d0 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_USART2
 8000ec4:	f241 03a3 	movw	r3, #4259	; 0x10a3
 8000ec8:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_I2C1|RCC_PERIPHCLK_TIM1
                              |RCC_PERIPHCLK_ADC12;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000eca:	2300      	movs	r3, #0
 8000ecc:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000ece:	2300      	movs	r3, #0
 8000ed0:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12PLLCLK_DIV1;
 8000ed2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000ed6:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_SYSCLK;
 8000ed8:	2310      	movs	r3, #16
 8000eda:	61fb      	str	r3, [r7, #28]
  PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLK_HCLK;
 8000edc:	2300      	movs	r3, #0
 8000ede:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000ee0:	463b      	mov	r3, r7
 8000ee2:	4618      	mov	r0, r3
 8000ee4:	f004 f96e 	bl	80051c4 <HAL_RCCEx_PeriphCLKConfig>
 8000ee8:	4603      	mov	r3, r0
 8000eea:	2b00      	cmp	r3, #0
 8000eec:	d001      	beq.n	8000ef2 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000eee:	f000 fb6f 	bl	80015d0 <Error_Handler>
  }
}
 8000ef2:	bf00      	nop
 8000ef4:	3778      	adds	r7, #120	; 0x78
 8000ef6:	46bd      	mov	sp, r7
 8000ef8:	bd80      	pop	{r7, pc}
	...

08000efc <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000efc:	b580      	push	{r7, lr}
 8000efe:	b08a      	sub	sp, #40	; 0x28
 8000f00:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000f02:	f107 031c 	add.w	r3, r7, #28
 8000f06:	2200      	movs	r2, #0
 8000f08:	601a      	str	r2, [r3, #0]
 8000f0a:	605a      	str	r2, [r3, #4]
 8000f0c:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000f0e:	1d3b      	adds	r3, r7, #4
 8000f10:	2200      	movs	r2, #0
 8000f12:	601a      	str	r2, [r3, #0]
 8000f14:	605a      	str	r2, [r3, #4]
 8000f16:	609a      	str	r2, [r3, #8]
 8000f18:	60da      	str	r2, [r3, #12]
 8000f1a:	611a      	str	r2, [r3, #16]
 8000f1c:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 8000f1e:	4b2f      	ldr	r3, [pc, #188]	; (8000fdc <MX_ADC1_Init+0xe0>)
 8000f20:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000f24:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000f26:	4b2d      	ldr	r3, [pc, #180]	; (8000fdc <MX_ADC1_Init+0xe0>)
 8000f28:	2200      	movs	r2, #0
 8000f2a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000f2c:	4b2b      	ldr	r3, [pc, #172]	; (8000fdc <MX_ADC1_Init+0xe0>)
 8000f2e:	2200      	movs	r2, #0
 8000f30:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000f32:	4b2a      	ldr	r3, [pc, #168]	; (8000fdc <MX_ADC1_Init+0xe0>)
 8000f34:	2200      	movs	r2, #0
 8000f36:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000f38:	4b28      	ldr	r3, [pc, #160]	; (8000fdc <MX_ADC1_Init+0xe0>)
 8000f3a:	2201      	movs	r2, #1
 8000f3c:	765a      	strb	r2, [r3, #25]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000f3e:	4b27      	ldr	r3, [pc, #156]	; (8000fdc <MX_ADC1_Init+0xe0>)
 8000f40:	2200      	movs	r2, #0
 8000f42:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8000f46:	4b25      	ldr	r3, [pc, #148]	; (8000fdc <MX_ADC1_Init+0xe0>)
 8000f48:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000f4c:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T3_TRGO;
 8000f4e:	4b23      	ldr	r3, [pc, #140]	; (8000fdc <MX_ADC1_Init+0xe0>)
 8000f50:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000f54:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000f56:	4b21      	ldr	r3, [pc, #132]	; (8000fdc <MX_ADC1_Init+0xe0>)
 8000f58:	2200      	movs	r2, #0
 8000f5a:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000f5c:	4b1f      	ldr	r3, [pc, #124]	; (8000fdc <MX_ADC1_Init+0xe0>)
 8000f5e:	2201      	movs	r2, #1
 8000f60:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000f62:	4b1e      	ldr	r3, [pc, #120]	; (8000fdc <MX_ADC1_Init+0xe0>)
 8000f64:	2201      	movs	r2, #1
 8000f66:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8000f6a:	4b1c      	ldr	r3, [pc, #112]	; (8000fdc <MX_ADC1_Init+0xe0>)
 8000f6c:	2208      	movs	r2, #8
 8000f6e:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000f70:	4b1a      	ldr	r3, [pc, #104]	; (8000fdc <MX_ADC1_Init+0xe0>)
 8000f72:	2200      	movs	r2, #0
 8000f74:	761a      	strb	r2, [r3, #24]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000f76:	4b19      	ldr	r3, [pc, #100]	; (8000fdc <MX_ADC1_Init+0xe0>)
 8000f78:	2200      	movs	r2, #0
 8000f7a:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000f7c:	4817      	ldr	r0, [pc, #92]	; (8000fdc <MX_ADC1_Init+0xe0>)
 8000f7e:	f001 f87d 	bl	800207c <HAL_ADC_Init>
 8000f82:	4603      	mov	r3, r0
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	d001      	beq.n	8000f8c <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000f88:	f000 fb22 	bl	80015d0 <Error_Handler>
  }
  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000f8c:	2300      	movs	r3, #0
 8000f8e:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000f90:	f107 031c 	add.w	r3, r7, #28
 8000f94:	4619      	mov	r1, r3
 8000f96:	4811      	ldr	r0, [pc, #68]	; (8000fdc <MX_ADC1_Init+0xe0>)
 8000f98:	f001 ff2c 	bl	8002df4 <HAL_ADCEx_MultiModeConfigChannel>
 8000f9c:	4603      	mov	r3, r0
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	d001      	beq.n	8000fa6 <MX_ADC1_Init+0xaa>
  {
    Error_Handler();
 8000fa2:	f000 fb15 	bl	80015d0 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000fa6:	2301      	movs	r3, #1
 8000fa8:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000faa:	2301      	movs	r3, #1
 8000fac:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000fae:	2300      	movs	r3, #0
 8000fb0:	613b      	str	r3, [r7, #16]
  sConfig.SamplingTime = ADC_SAMPLETIME_61CYCLES_5;
 8000fb2:	2305      	movs	r3, #5
 8000fb4:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000fba:	2300      	movs	r3, #0
 8000fbc:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000fbe:	1d3b      	adds	r3, r7, #4
 8000fc0:	4619      	mov	r1, r3
 8000fc2:	4806      	ldr	r0, [pc, #24]	; (8000fdc <MX_ADC1_Init+0xe0>)
 8000fc4:	f001 fc2a 	bl	800281c <HAL_ADC_ConfigChannel>
 8000fc8:	4603      	mov	r3, r0
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	d001      	beq.n	8000fd2 <MX_ADC1_Init+0xd6>
  {
    Error_Handler();
 8000fce:	f000 faff 	bl	80015d0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000fd2:	bf00      	nop
 8000fd4:	3728      	adds	r7, #40	; 0x28
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	bd80      	pop	{r7, pc}
 8000fda:	bf00      	nop
 8000fdc:	200005f8 	.word	0x200005f8

08000fe0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000fe4:	4b1b      	ldr	r3, [pc, #108]	; (8001054 <MX_I2C1_Init+0x74>)
 8000fe6:	4a1c      	ldr	r2, [pc, #112]	; (8001058 <MX_I2C1_Init+0x78>)
 8000fe8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10808DD3;
 8000fea:	4b1a      	ldr	r3, [pc, #104]	; (8001054 <MX_I2C1_Init+0x74>)
 8000fec:	4a1b      	ldr	r2, [pc, #108]	; (800105c <MX_I2C1_Init+0x7c>)
 8000fee:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000ff0:	4b18      	ldr	r3, [pc, #96]	; (8001054 <MX_I2C1_Init+0x74>)
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000ff6:	4b17      	ldr	r3, [pc, #92]	; (8001054 <MX_I2C1_Init+0x74>)
 8000ff8:	2201      	movs	r2, #1
 8000ffa:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000ffc:	4b15      	ldr	r3, [pc, #84]	; (8001054 <MX_I2C1_Init+0x74>)
 8000ffe:	2200      	movs	r2, #0
 8001000:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001002:	4b14      	ldr	r3, [pc, #80]	; (8001054 <MX_I2C1_Init+0x74>)
 8001004:	2200      	movs	r2, #0
 8001006:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001008:	4b12      	ldr	r3, [pc, #72]	; (8001054 <MX_I2C1_Init+0x74>)
 800100a:	2200      	movs	r2, #0
 800100c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800100e:	4b11      	ldr	r3, [pc, #68]	; (8001054 <MX_I2C1_Init+0x74>)
 8001010:	2200      	movs	r2, #0
 8001012:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001014:	4b0f      	ldr	r3, [pc, #60]	; (8001054 <MX_I2C1_Init+0x74>)
 8001016:	2200      	movs	r2, #0
 8001018:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800101a:	480e      	ldr	r0, [pc, #56]	; (8001054 <MX_I2C1_Init+0x74>)
 800101c:	f002 fe6c 	bl	8003cf8 <HAL_I2C_Init>
 8001020:	4603      	mov	r3, r0
 8001022:	2b00      	cmp	r3, #0
 8001024:	d001      	beq.n	800102a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001026:	f000 fad3 	bl	80015d0 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800102a:	2100      	movs	r1, #0
 800102c:	4809      	ldr	r0, [pc, #36]	; (8001054 <MX_I2C1_Init+0x74>)
 800102e:	f002 fef2 	bl	8003e16 <HAL_I2CEx_ConfigAnalogFilter>
 8001032:	4603      	mov	r3, r0
 8001034:	2b00      	cmp	r3, #0
 8001036:	d001      	beq.n	800103c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001038:	f000 faca 	bl	80015d0 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800103c:	2100      	movs	r1, #0
 800103e:	4805      	ldr	r0, [pc, #20]	; (8001054 <MX_I2C1_Init+0x74>)
 8001040:	f002 ff34 	bl	8003eac <HAL_I2CEx_ConfigDigitalFilter>
 8001044:	4603      	mov	r3, r0
 8001046:	2b00      	cmp	r3, #0
 8001048:	d001      	beq.n	800104e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800104a:	f000 fac1 	bl	80015d0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800104e:	bf00      	nop
 8001050:	bd80      	pop	{r7, pc}
 8001052:	bf00      	nop
 8001054:	20000524 	.word	0x20000524
 8001058:	40005400 	.word	0x40005400
 800105c:	10808dd3 	.word	0x10808dd3

08001060 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001060:	b580      	push	{r7, lr}
 8001062:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001064:	4b1b      	ldr	r3, [pc, #108]	; (80010d4 <MX_SPI2_Init+0x74>)
 8001066:	4a1c      	ldr	r2, [pc, #112]	; (80010d8 <MX_SPI2_Init+0x78>)
 8001068:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800106a:	4b1a      	ldr	r3, [pc, #104]	; (80010d4 <MX_SPI2_Init+0x74>)
 800106c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001070:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001072:	4b18      	ldr	r3, [pc, #96]	; (80010d4 <MX_SPI2_Init+0x74>)
 8001074:	2200      	movs	r2, #0
 8001076:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 8001078:	4b16      	ldr	r3, [pc, #88]	; (80010d4 <MX_SPI2_Init+0x74>)
 800107a:	f44f 7240 	mov.w	r2, #768	; 0x300
 800107e:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001080:	4b14      	ldr	r3, [pc, #80]	; (80010d4 <MX_SPI2_Init+0x74>)
 8001082:	2200      	movs	r2, #0
 8001084:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001086:	4b13      	ldr	r3, [pc, #76]	; (80010d4 <MX_SPI2_Init+0x74>)
 8001088:	2200      	movs	r2, #0
 800108a:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_HARD_OUTPUT;
 800108c:	4b11      	ldr	r3, [pc, #68]	; (80010d4 <MX_SPI2_Init+0x74>)
 800108e:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8001092:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001094:	4b0f      	ldr	r3, [pc, #60]	; (80010d4 <MX_SPI2_Init+0x74>)
 8001096:	2200      	movs	r2, #0
 8001098:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800109a:	4b0e      	ldr	r3, [pc, #56]	; (80010d4 <MX_SPI2_Init+0x74>)
 800109c:	2200      	movs	r2, #0
 800109e:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80010a0:	4b0c      	ldr	r3, [pc, #48]	; (80010d4 <MX_SPI2_Init+0x74>)
 80010a2:	2200      	movs	r2, #0
 80010a4:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80010a6:	4b0b      	ldr	r3, [pc, #44]	; (80010d4 <MX_SPI2_Init+0x74>)
 80010a8:	2200      	movs	r2, #0
 80010aa:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 80010ac:	4b09      	ldr	r3, [pc, #36]	; (80010d4 <MX_SPI2_Init+0x74>)
 80010ae:	2207      	movs	r2, #7
 80010b0:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80010b2:	4b08      	ldr	r3, [pc, #32]	; (80010d4 <MX_SPI2_Init+0x74>)
 80010b4:	2200      	movs	r2, #0
 80010b6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80010b8:	4b06      	ldr	r3, [pc, #24]	; (80010d4 <MX_SPI2_Init+0x74>)
 80010ba:	2208      	movs	r2, #8
 80010bc:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80010be:	4805      	ldr	r0, [pc, #20]	; (80010d4 <MX_SPI2_Init+0x74>)
 80010c0:	f004 fa30 	bl	8005524 <HAL_SPI_Init>
 80010c4:	4603      	mov	r3, r0
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	d001      	beq.n	80010ce <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 80010ca:	f000 fa81 	bl	80015d0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80010ce:	bf00      	nop
 80010d0:	bd80      	pop	{r7, pc}
 80010d2:	bf00      	nop
 80010d4:	20000474 	.word	0x20000474
 80010d8:	40003800 	.word	0x40003800

080010dc <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	b096      	sub	sp, #88	; 0x58
 80010e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80010e2:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80010e6:	2200      	movs	r2, #0
 80010e8:	601a      	str	r2, [r3, #0]
 80010ea:	605a      	str	r2, [r3, #4]
 80010ec:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80010ee:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80010f2:	2200      	movs	r2, #0
 80010f4:	601a      	str	r2, [r3, #0]
 80010f6:	605a      	str	r2, [r3, #4]
 80010f8:	609a      	str	r2, [r3, #8]
 80010fa:	60da      	str	r2, [r3, #12]
 80010fc:	611a      	str	r2, [r3, #16]
 80010fe:	615a      	str	r2, [r3, #20]
 8001100:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001102:	1d3b      	adds	r3, r7, #4
 8001104:	222c      	movs	r2, #44	; 0x2c
 8001106:	2100      	movs	r1, #0
 8001108:	4618      	mov	r0, r3
 800110a:	f006 fb55 	bl	80077b8 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800110e:	4b4f      	ldr	r3, [pc, #316]	; (800124c <MX_TIM1_Init+0x170>)
 8001110:	4a4f      	ldr	r2, [pc, #316]	; (8001250 <MX_TIM1_Init+0x174>)
 8001112:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001114:	4b4d      	ldr	r3, [pc, #308]	; (800124c <MX_TIM1_Init+0x170>)
 8001116:	2200      	movs	r2, #0
 8001118:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800111a:	4b4c      	ldr	r3, [pc, #304]	; (800124c <MX_TIM1_Init+0x170>)
 800111c:	2200      	movs	r2, #0
 800111e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 179;
 8001120:	4b4a      	ldr	r3, [pc, #296]	; (800124c <MX_TIM1_Init+0x170>)
 8001122:	22b3      	movs	r2, #179	; 0xb3
 8001124:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001126:	4b49      	ldr	r3, [pc, #292]	; (800124c <MX_TIM1_Init+0x170>)
 8001128:	2200      	movs	r2, #0
 800112a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 13;
 800112c:	4b47      	ldr	r3, [pc, #284]	; (800124c <MX_TIM1_Init+0x170>)
 800112e:	220d      	movs	r2, #13
 8001130:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001132:	4b46      	ldr	r3, [pc, #280]	; (800124c <MX_TIM1_Init+0x170>)
 8001134:	2200      	movs	r2, #0
 8001136:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_OC_Init(&htim1) != HAL_OK)
 8001138:	4844      	ldr	r0, [pc, #272]	; (800124c <MX_TIM1_Init+0x170>)
 800113a:	f004 fb5f 	bl	80057fc <HAL_TIM_OC_Init>
 800113e:	4603      	mov	r3, r0
 8001140:	2b00      	cmp	r3, #0
 8001142:	d001      	beq.n	8001148 <MX_TIM1_Init+0x6c>
  {
    Error_Handler();
 8001144:	f000 fa44 	bl	80015d0 <Error_Handler>
  }
  if (HAL_TIM_OnePulse_Init(&htim1, TIM_OPMODE_SINGLE) != HAL_OK)
 8001148:	2108      	movs	r1, #8
 800114a:	4840      	ldr	r0, [pc, #256]	; (800124c <MX_TIM1_Init+0x170>)
 800114c:	f004 fd44 	bl	8005bd8 <HAL_TIM_OnePulse_Init>
 8001150:	4603      	mov	r3, r0
 8001152:	2b00      	cmp	r3, #0
 8001154:	d001      	beq.n	800115a <MX_TIM1_Init+0x7e>
  {
    Error_Handler();
 8001156:	f000 fa3b 	bl	80015d0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800115a:	2320      	movs	r3, #32
 800115c:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800115e:	2300      	movs	r3, #0
 8001160:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001162:	2300      	movs	r3, #0
 8001164:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001166:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800116a:	4619      	mov	r1, r3
 800116c:	4837      	ldr	r0, [pc, #220]	; (800124c <MX_TIM1_Init+0x170>)
 800116e:	f005 fd1d 	bl	8006bac <HAL_TIMEx_MasterConfigSynchronization>
 8001172:	4603      	mov	r3, r0
 8001174:	2b00      	cmp	r3, #0
 8001176:	d001      	beq.n	800117c <MX_TIM1_Init+0xa0>
  {
    Error_Handler();
 8001178:	f000 fa2a 	bl	80015d0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TOGGLE;
 800117c:	2330      	movs	r3, #48	; 0x30
 800117e:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 8001180:	2300      	movs	r3, #0
 8001182:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001184:	2300      	movs	r3, #0
 8001186:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001188:	2300      	movs	r3, #0
 800118a:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800118c:	2300      	movs	r3, #0
 800118e:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001190:	2300      	movs	r3, #0
 8001192:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001194:	2300      	movs	r3, #0
 8001196:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001198:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800119c:	2200      	movs	r2, #0
 800119e:	4619      	mov	r1, r3
 80011a0:	482a      	ldr	r0, [pc, #168]	; (800124c <MX_TIM1_Init+0x170>)
 80011a2:	f004 fe93 	bl	8005ecc <HAL_TIM_OC_ConfigChannel>
 80011a6:	4603      	mov	r3, r0
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d001      	beq.n	80011b0 <MX_TIM1_Init+0xd4>
  {
    Error_Handler();
 80011ac:	f000 fa10 	bl	80015d0 <Error_Handler>
  }
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80011b0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80011b4:	2204      	movs	r2, #4
 80011b6:	4619      	mov	r1, r3
 80011b8:	4824      	ldr	r0, [pc, #144]	; (800124c <MX_TIM1_Init+0x170>)
 80011ba:	f004 fe87 	bl	8005ecc <HAL_TIM_OC_ConfigChannel>
 80011be:	4603      	mov	r3, r0
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d001      	beq.n	80011c8 <MX_TIM1_Init+0xec>
  {
    Error_Handler();
 80011c4:	f000 fa04 	bl	80015d0 <Error_Handler>
  }
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80011c8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80011cc:	2208      	movs	r2, #8
 80011ce:	4619      	mov	r1, r3
 80011d0:	481e      	ldr	r0, [pc, #120]	; (800124c <MX_TIM1_Init+0x170>)
 80011d2:	f004 fe7b 	bl	8005ecc <HAL_TIM_OC_ConfigChannel>
 80011d6:	4603      	mov	r3, r0
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d001      	beq.n	80011e0 <MX_TIM1_Init+0x104>
  {
    Error_Handler();
 80011dc:	f000 f9f8 	bl	80015d0 <Error_Handler>
  }
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80011e0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80011e4:	220c      	movs	r2, #12
 80011e6:	4619      	mov	r1, r3
 80011e8:	4818      	ldr	r0, [pc, #96]	; (800124c <MX_TIM1_Init+0x170>)
 80011ea:	f004 fe6f 	bl	8005ecc <HAL_TIM_OC_ConfigChannel>
 80011ee:	4603      	mov	r3, r0
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d001      	beq.n	80011f8 <MX_TIM1_Init+0x11c>
  {
    Error_Handler();
 80011f4:	f000 f9ec 	bl	80015d0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80011f8:	2300      	movs	r3, #0
 80011fa:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80011fc:	2300      	movs	r3, #0
 80011fe:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001200:	2300      	movs	r3, #0
 8001202:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001204:	2300      	movs	r3, #0
 8001206:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001208:	2300      	movs	r3, #0
 800120a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800120c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001210:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001212:	2300      	movs	r3, #0
 8001214:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001216:	2300      	movs	r3, #0
 8001218:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800121a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800121e:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001220:	2300      	movs	r3, #0
 8001222:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001224:	2300      	movs	r3, #0
 8001226:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001228:	1d3b      	adds	r3, r7, #4
 800122a:	4619      	mov	r1, r3
 800122c:	4807      	ldr	r0, [pc, #28]	; (800124c <MX_TIM1_Init+0x170>)
 800122e:	f005 fd3d 	bl	8006cac <HAL_TIMEx_ConfigBreakDeadTime>
 8001232:	4603      	mov	r3, r0
 8001234:	2b00      	cmp	r3, #0
 8001236:	d001      	beq.n	800123c <MX_TIM1_Init+0x160>
  {
    Error_Handler();
 8001238:	f000 f9ca 	bl	80015d0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800123c:	4803      	ldr	r0, [pc, #12]	; (800124c <MX_TIM1_Init+0x170>)
 800123e:	f000 fb45 	bl	80018cc <HAL_TIM_MspPostInit>

}
 8001242:	bf00      	nop
 8001244:	3758      	adds	r7, #88	; 0x58
 8001246:	46bd      	mov	sp, r7
 8001248:	bd80      	pop	{r7, pc}
 800124a:	bf00      	nop
 800124c:	20000718 	.word	0x20000718
 8001250:	40012c00 	.word	0x40012c00

08001254 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001254:	b580      	push	{r7, lr}
 8001256:	b08c      	sub	sp, #48	; 0x30
 8001258:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800125a:	f107 0320 	add.w	r3, r7, #32
 800125e:	2200      	movs	r2, #0
 8001260:	601a      	str	r2, [r3, #0]
 8001262:	605a      	str	r2, [r3, #4]
 8001264:	609a      	str	r2, [r3, #8]
 8001266:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8001268:	f107 030c 	add.w	r3, r7, #12
 800126c:	2200      	movs	r2, #0
 800126e:	601a      	str	r2, [r3, #0]
 8001270:	605a      	str	r2, [r3, #4]
 8001272:	609a      	str	r2, [r3, #8]
 8001274:	60da      	str	r2, [r3, #12]
 8001276:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001278:	463b      	mov	r3, r7
 800127a:	2200      	movs	r2, #0
 800127c:	601a      	str	r2, [r3, #0]
 800127e:	605a      	str	r2, [r3, #4]
 8001280:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001282:	4b29      	ldr	r3, [pc, #164]	; (8001328 <MX_TIM3_Init+0xd4>)
 8001284:	4a29      	ldr	r2, [pc, #164]	; (800132c <MX_TIM3_Init+0xd8>)
 8001286:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001288:	4b27      	ldr	r3, [pc, #156]	; (8001328 <MX_TIM3_Init+0xd4>)
 800128a:	2200      	movs	r2, #0
 800128c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800128e:	4b26      	ldr	r3, [pc, #152]	; (8001328 <MX_TIM3_Init+0xd4>)
 8001290:	2200      	movs	r2, #0
 8001292:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 38000;
 8001294:	4b24      	ldr	r3, [pc, #144]	; (8001328 <MX_TIM3_Init+0xd4>)
 8001296:	f249 4270 	movw	r2, #38000	; 0x9470
 800129a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800129c:	4b22      	ldr	r3, [pc, #136]	; (8001328 <MX_TIM3_Init+0xd4>)
 800129e:	2200      	movs	r2, #0
 80012a0:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80012a2:	4b21      	ldr	r3, [pc, #132]	; (8001328 <MX_TIM3_Init+0xd4>)
 80012a4:	2280      	movs	r2, #128	; 0x80
 80012a6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80012a8:	481f      	ldr	r0, [pc, #124]	; (8001328 <MX_TIM3_Init+0xd4>)
 80012aa:	f004 f9e6 	bl	800567a <HAL_TIM_Base_Init>
 80012ae:	4603      	mov	r3, r0
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d001      	beq.n	80012b8 <MX_TIM3_Init+0x64>
  {
    Error_Handler();
 80012b4:	f000 f98c 	bl	80015d0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80012b8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80012bc:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80012be:	f107 0320 	add.w	r3, r7, #32
 80012c2:	4619      	mov	r1, r3
 80012c4:	4818      	ldr	r0, [pc, #96]	; (8001328 <MX_TIM3_Init+0xd4>)
 80012c6:	f004 fe7b 	bl	8005fc0 <HAL_TIM_ConfigClockSource>
 80012ca:	4603      	mov	r3, r0
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	d001      	beq.n	80012d4 <MX_TIM3_Init+0x80>
  {
    Error_Handler();
 80012d0:	f000 f97e 	bl	80015d0 <Error_Handler>
  }
  if (HAL_TIM_OnePulse_Init(&htim3, TIM_OPMODE_SINGLE) != HAL_OK)
 80012d4:	2108      	movs	r1, #8
 80012d6:	4814      	ldr	r0, [pc, #80]	; (8001328 <MX_TIM3_Init+0xd4>)
 80012d8:	f004 fc7e 	bl	8005bd8 <HAL_TIM_OnePulse_Init>
 80012dc:	4603      	mov	r3, r0
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d001      	beq.n	80012e6 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 80012e2:	f000 f975 	bl	80015d0 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_TRIGGER;
 80012e6:	2306      	movs	r3, #6
 80012e8:	60fb      	str	r3, [r7, #12]
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 80012ea:	2300      	movs	r3, #0
 80012ec:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_SlaveConfigSynchro(&htim3, &sSlaveConfig) != HAL_OK)
 80012ee:	f107 030c 	add.w	r3, r7, #12
 80012f2:	4619      	mov	r1, r3
 80012f4:	480c      	ldr	r0, [pc, #48]	; (8001328 <MX_TIM3_Init+0xd4>)
 80012f6:	f004 ff2c 	bl	8006152 <HAL_TIM_SlaveConfigSynchro>
 80012fa:	4603      	mov	r3, r0
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d001      	beq.n	8001304 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8001300:	f000 f966 	bl	80015d0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001304:	2320      	movs	r3, #32
 8001306:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001308:	2300      	movs	r3, #0
 800130a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800130c:	463b      	mov	r3, r7
 800130e:	4619      	mov	r1, r3
 8001310:	4805      	ldr	r0, [pc, #20]	; (8001328 <MX_TIM3_Init+0xd4>)
 8001312:	f005 fc4b 	bl	8006bac <HAL_TIMEx_MasterConfigSynchronization>
 8001316:	4603      	mov	r3, r0
 8001318:	2b00      	cmp	r3, #0
 800131a:	d001      	beq.n	8001320 <MX_TIM3_Init+0xcc>
  {
    Error_Handler();
 800131c:	f000 f958 	bl	80015d0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001320:	bf00      	nop
 8001322:	3730      	adds	r7, #48	; 0x30
 8001324:	46bd      	mov	sp, r7
 8001326:	bd80      	pop	{r7, pc}
 8001328:	200005a8 	.word	0x200005a8
 800132c:	40000400 	.word	0x40000400

08001330 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001330:	b580      	push	{r7, lr}
 8001332:	b088      	sub	sp, #32
 8001334:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001336:	f107 0310 	add.w	r3, r7, #16
 800133a:	2200      	movs	r2, #0
 800133c:	601a      	str	r2, [r3, #0]
 800133e:	605a      	str	r2, [r3, #4]
 8001340:	609a      	str	r2, [r3, #8]
 8001342:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001344:	1d3b      	adds	r3, r7, #4
 8001346:	2200      	movs	r2, #0
 8001348:	601a      	str	r2, [r3, #0]
 800134a:	605a      	str	r2, [r3, #4]
 800134c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800134e:	4b1d      	ldr	r3, [pc, #116]	; (80013c4 <MX_TIM4_Init+0x94>)
 8001350:	4a1d      	ldr	r2, [pc, #116]	; (80013c8 <MX_TIM4_Init+0x98>)
 8001352:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 12;
 8001354:	4b1b      	ldr	r3, [pc, #108]	; (80013c4 <MX_TIM4_Init+0x94>)
 8001356:	220c      	movs	r2, #12
 8001358:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800135a:	4b1a      	ldr	r3, [pc, #104]	; (80013c4 <MX_TIM4_Init+0x94>)
 800135c:	2200      	movs	r2, #0
 800135e:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8001360:	4b18      	ldr	r3, [pc, #96]	; (80013c4 <MX_TIM4_Init+0x94>)
 8001362:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001366:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001368:	4b16      	ldr	r3, [pc, #88]	; (80013c4 <MX_TIM4_Init+0x94>)
 800136a:	2200      	movs	r2, #0
 800136c:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800136e:	4b15      	ldr	r3, [pc, #84]	; (80013c4 <MX_TIM4_Init+0x94>)
 8001370:	2200      	movs	r2, #0
 8001372:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001374:	4813      	ldr	r0, [pc, #76]	; (80013c4 <MX_TIM4_Init+0x94>)
 8001376:	f004 f980 	bl	800567a <HAL_TIM_Base_Init>
 800137a:	4603      	mov	r3, r0
 800137c:	2b00      	cmp	r3, #0
 800137e:	d001      	beq.n	8001384 <MX_TIM4_Init+0x54>
  {
    Error_Handler();
 8001380:	f000 f926 	bl	80015d0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001384:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001388:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 800138a:	f107 0310 	add.w	r3, r7, #16
 800138e:	4619      	mov	r1, r3
 8001390:	480c      	ldr	r0, [pc, #48]	; (80013c4 <MX_TIM4_Init+0x94>)
 8001392:	f004 fe15 	bl	8005fc0 <HAL_TIM_ConfigClockSource>
 8001396:	4603      	mov	r3, r0
 8001398:	2b00      	cmp	r3, #0
 800139a:	d001      	beq.n	80013a0 <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 800139c:	f000 f918 	bl	80015d0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80013a0:	2300      	movs	r3, #0
 80013a2:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80013a4:	2300      	movs	r3, #0
 80013a6:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80013a8:	1d3b      	adds	r3, r7, #4
 80013aa:	4619      	mov	r1, r3
 80013ac:	4805      	ldr	r0, [pc, #20]	; (80013c4 <MX_TIM4_Init+0x94>)
 80013ae:	f005 fbfd 	bl	8006bac <HAL_TIMEx_MasterConfigSynchronization>
 80013b2:	4603      	mov	r3, r0
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d001      	beq.n	80013bc <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 80013b8:	f000 f90a 	bl	80015d0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80013bc:	bf00      	nop
 80013be:	3720      	adds	r7, #32
 80013c0:	46bd      	mov	sp, r7
 80013c2:	bd80      	pop	{r7, pc}
 80013c4:	200004d8 	.word	0x200004d8
 80013c8:	40000800 	.word	0x40000800

080013cc <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80013cc:	b580      	push	{r7, lr}
 80013ce:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80013d0:	4b14      	ldr	r3, [pc, #80]	; (8001424 <MX_USART1_UART_Init+0x58>)
 80013d2:	4a15      	ldr	r2, [pc, #84]	; (8001428 <MX_USART1_UART_Init+0x5c>)
 80013d4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80013d6:	4b13      	ldr	r3, [pc, #76]	; (8001424 <MX_USART1_UART_Init+0x58>)
 80013d8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80013dc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80013de:	4b11      	ldr	r3, [pc, #68]	; (8001424 <MX_USART1_UART_Init+0x58>)
 80013e0:	2200      	movs	r2, #0
 80013e2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80013e4:	4b0f      	ldr	r3, [pc, #60]	; (8001424 <MX_USART1_UART_Init+0x58>)
 80013e6:	2200      	movs	r2, #0
 80013e8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80013ea:	4b0e      	ldr	r3, [pc, #56]	; (8001424 <MX_USART1_UART_Init+0x58>)
 80013ec:	2200      	movs	r2, #0
 80013ee:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80013f0:	4b0c      	ldr	r3, [pc, #48]	; (8001424 <MX_USART1_UART_Init+0x58>)
 80013f2:	220c      	movs	r2, #12
 80013f4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80013f6:	4b0b      	ldr	r3, [pc, #44]	; (8001424 <MX_USART1_UART_Init+0x58>)
 80013f8:	2200      	movs	r2, #0
 80013fa:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80013fc:	4b09      	ldr	r3, [pc, #36]	; (8001424 <MX_USART1_UART_Init+0x58>)
 80013fe:	2200      	movs	r2, #0
 8001400:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001402:	4b08      	ldr	r3, [pc, #32]	; (8001424 <MX_USART1_UART_Init+0x58>)
 8001404:	2200      	movs	r2, #0
 8001406:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001408:	4b06      	ldr	r3, [pc, #24]	; (8001424 <MX_USART1_UART_Init+0x58>)
 800140a:	2200      	movs	r2, #0
 800140c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800140e:	4805      	ldr	r0, [pc, #20]	; (8001424 <MX_USART1_UART_Init+0x58>)
 8001410:	f005 fce8 	bl	8006de4 <HAL_UART_Init>
 8001414:	4603      	mov	r3, r0
 8001416:	2b00      	cmp	r3, #0
 8001418:	d001      	beq.n	800141e <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 800141a:	f000 f8d9 	bl	80015d0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800141e:	bf00      	nop
 8001420:	bd80      	pop	{r7, pc}
 8001422:	bf00      	nop
 8001424:	20000648 	.word	0x20000648
 8001428:	40013800 	.word	0x40013800

0800142c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800142c:	b580      	push	{r7, lr}
 800142e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001430:	4b14      	ldr	r3, [pc, #80]	; (8001484 <MX_USART2_UART_Init+0x58>)
 8001432:	4a15      	ldr	r2, [pc, #84]	; (8001488 <MX_USART2_UART_Init+0x5c>)
 8001434:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001436:	4b13      	ldr	r3, [pc, #76]	; (8001484 <MX_USART2_UART_Init+0x58>)
 8001438:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800143c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800143e:	4b11      	ldr	r3, [pc, #68]	; (8001484 <MX_USART2_UART_Init+0x58>)
 8001440:	2200      	movs	r2, #0
 8001442:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001444:	4b0f      	ldr	r3, [pc, #60]	; (8001484 <MX_USART2_UART_Init+0x58>)
 8001446:	2200      	movs	r2, #0
 8001448:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800144a:	4b0e      	ldr	r3, [pc, #56]	; (8001484 <MX_USART2_UART_Init+0x58>)
 800144c:	2200      	movs	r2, #0
 800144e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001450:	4b0c      	ldr	r3, [pc, #48]	; (8001484 <MX_USART2_UART_Init+0x58>)
 8001452:	220c      	movs	r2, #12
 8001454:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001456:	4b0b      	ldr	r3, [pc, #44]	; (8001484 <MX_USART2_UART_Init+0x58>)
 8001458:	2200      	movs	r2, #0
 800145a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800145c:	4b09      	ldr	r3, [pc, #36]	; (8001484 <MX_USART2_UART_Init+0x58>)
 800145e:	2200      	movs	r2, #0
 8001460:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001462:	4b08      	ldr	r3, [pc, #32]	; (8001484 <MX_USART2_UART_Init+0x58>)
 8001464:	2200      	movs	r2, #0
 8001466:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001468:	4b06      	ldr	r3, [pc, #24]	; (8001484 <MX_USART2_UART_Init+0x58>)
 800146a:	2200      	movs	r2, #0
 800146c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800146e:	4805      	ldr	r0, [pc, #20]	; (8001484 <MX_USART2_UART_Init+0x58>)
 8001470:	f005 fcb8 	bl	8006de4 <HAL_UART_Init>
 8001474:	4603      	mov	r3, r0
 8001476:	2b00      	cmp	r3, #0
 8001478:	d001      	beq.n	800147e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800147a:	f000 f8a9 	bl	80015d0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800147e:	bf00      	nop
 8001480:	bd80      	pop	{r7, pc}
 8001482:	bf00      	nop
 8001484:	20000770 	.word	0x20000770
 8001488:	40004400 	.word	0x40004400

0800148c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800148c:	b580      	push	{r7, lr}
 800148e:	b082      	sub	sp, #8
 8001490:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001492:	4b0c      	ldr	r3, [pc, #48]	; (80014c4 <MX_DMA_Init+0x38>)
 8001494:	695b      	ldr	r3, [r3, #20]
 8001496:	4a0b      	ldr	r2, [pc, #44]	; (80014c4 <MX_DMA_Init+0x38>)
 8001498:	f043 0301 	orr.w	r3, r3, #1
 800149c:	6153      	str	r3, [r2, #20]
 800149e:	4b09      	ldr	r3, [pc, #36]	; (80014c4 <MX_DMA_Init+0x38>)
 80014a0:	695b      	ldr	r3, [r3, #20]
 80014a2:	f003 0301 	and.w	r3, r3, #1
 80014a6:	607b      	str	r3, [r7, #4]
 80014a8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80014aa:	2200      	movs	r2, #0
 80014ac:	2100      	movs	r1, #0
 80014ae:	200b      	movs	r0, #11
 80014b0:	f002 f869 	bl	8003586 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80014b4:	200b      	movs	r0, #11
 80014b6:	f002 f882 	bl	80035be <HAL_NVIC_EnableIRQ>

}
 80014ba:	bf00      	nop
 80014bc:	3708      	adds	r7, #8
 80014be:	46bd      	mov	sp, r7
 80014c0:	bd80      	pop	{r7, pc}
 80014c2:	bf00      	nop
 80014c4:	40021000 	.word	0x40021000

080014c8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80014c8:	b580      	push	{r7, lr}
 80014ca:	b08a      	sub	sp, #40	; 0x28
 80014cc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014ce:	f107 0314 	add.w	r3, r7, #20
 80014d2:	2200      	movs	r2, #0
 80014d4:	601a      	str	r2, [r3, #0]
 80014d6:	605a      	str	r2, [r3, #4]
 80014d8:	609a      	str	r2, [r3, #8]
 80014da:	60da      	str	r2, [r3, #12]
 80014dc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80014de:	4b39      	ldr	r3, [pc, #228]	; (80015c4 <MX_GPIO_Init+0xfc>)
 80014e0:	695b      	ldr	r3, [r3, #20]
 80014e2:	4a38      	ldr	r2, [pc, #224]	; (80015c4 <MX_GPIO_Init+0xfc>)
 80014e4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80014e8:	6153      	str	r3, [r2, #20]
 80014ea:	4b36      	ldr	r3, [pc, #216]	; (80015c4 <MX_GPIO_Init+0xfc>)
 80014ec:	695b      	ldr	r3, [r3, #20]
 80014ee:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80014f2:	613b      	str	r3, [r7, #16]
 80014f4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80014f6:	4b33      	ldr	r3, [pc, #204]	; (80015c4 <MX_GPIO_Init+0xfc>)
 80014f8:	695b      	ldr	r3, [r3, #20]
 80014fa:	4a32      	ldr	r2, [pc, #200]	; (80015c4 <MX_GPIO_Init+0xfc>)
 80014fc:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001500:	6153      	str	r3, [r2, #20]
 8001502:	4b30      	ldr	r3, [pc, #192]	; (80015c4 <MX_GPIO_Init+0xfc>)
 8001504:	695b      	ldr	r3, [r3, #20]
 8001506:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800150a:	60fb      	str	r3, [r7, #12]
 800150c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800150e:	4b2d      	ldr	r3, [pc, #180]	; (80015c4 <MX_GPIO_Init+0xfc>)
 8001510:	695b      	ldr	r3, [r3, #20]
 8001512:	4a2c      	ldr	r2, [pc, #176]	; (80015c4 <MX_GPIO_Init+0xfc>)
 8001514:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001518:	6153      	str	r3, [r2, #20]
 800151a:	4b2a      	ldr	r3, [pc, #168]	; (80015c4 <MX_GPIO_Init+0xfc>)
 800151c:	695b      	ldr	r3, [r3, #20]
 800151e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001522:	60bb      	str	r3, [r7, #8]
 8001524:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001526:	4b27      	ldr	r3, [pc, #156]	; (80015c4 <MX_GPIO_Init+0xfc>)
 8001528:	695b      	ldr	r3, [r3, #20]
 800152a:	4a26      	ldr	r2, [pc, #152]	; (80015c4 <MX_GPIO_Init+0xfc>)
 800152c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001530:	6153      	str	r3, [r2, #20]
 8001532:	4b24      	ldr	r3, [pc, #144]	; (80015c4 <MX_GPIO_Init+0xfc>)
 8001534:	695b      	ldr	r3, [r3, #20]
 8001536:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800153a:	607b      	str	r3, [r7, #4]
 800153c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, CS1_Pin|CS2_Pin|CS3_Pin, GPIO_PIN_RESET);
 800153e:	2200      	movs	r2, #0
 8001540:	f44f 4160 	mov.w	r1, #57344	; 0xe000
 8001544:	4820      	ldr	r0, [pc, #128]	; (80015c8 <MX_GPIO_Init+0x100>)
 8001546:	f002 fbbf 	bl	8003cc8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, INC_Pin|UD_Pin|LED_Pin, GPIO_PIN_RESET);
 800154a:	2200      	movs	r2, #0
 800154c:	2170      	movs	r1, #112	; 0x70
 800154e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001552:	f002 fbb9 	bl	8003cc8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, Z1Sel_Pin|Z2Sel_Pin|Z3Sel_Pin|Z4Sel_Pin
 8001556:	2200      	movs	r2, #0
 8001558:	f640 4127 	movw	r1, #3111	; 0xc27
 800155c:	481b      	ldr	r0, [pc, #108]	; (80015cc <MX_GPIO_Init+0x104>)
 800155e:	f002 fbb3 	bl	8003cc8 <HAL_GPIO_WritePin>
                          |EthRst_Pin|CS4_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : CS1_Pin CS2_Pin CS3_Pin */
  GPIO_InitStruct.Pin = CS1_Pin|CS2_Pin|CS3_Pin;
 8001562:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8001566:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001568:	2301      	movs	r3, #1
 800156a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800156c:	2300      	movs	r3, #0
 800156e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001570:	2300      	movs	r3, #0
 8001572:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001574:	f107 0314 	add.w	r3, r7, #20
 8001578:	4619      	mov	r1, r3
 800157a:	4813      	ldr	r0, [pc, #76]	; (80015c8 <MX_GPIO_Init+0x100>)
 800157c:	f002 fa2a 	bl	80039d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : INC_Pin UD_Pin LED_Pin */
  GPIO_InitStruct.Pin = INC_Pin|UD_Pin|LED_Pin;
 8001580:	2370      	movs	r3, #112	; 0x70
 8001582:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001584:	2301      	movs	r3, #1
 8001586:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001588:	2300      	movs	r3, #0
 800158a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800158c:	2300      	movs	r3, #0
 800158e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001590:	f107 0314 	add.w	r3, r7, #20
 8001594:	4619      	mov	r1, r3
 8001596:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800159a:	f002 fa1b 	bl	80039d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : Z1Sel_Pin Z2Sel_Pin Z3Sel_Pin Z4Sel_Pin
                           EthRst_Pin CS4_Pin */
  GPIO_InitStruct.Pin = Z1Sel_Pin|Z2Sel_Pin|Z3Sel_Pin|Z4Sel_Pin
 800159e:	f640 4327 	movw	r3, #3111	; 0xc27
 80015a2:	617b      	str	r3, [r7, #20]
                          |EthRst_Pin|CS4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015a4:	2301      	movs	r3, #1
 80015a6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015a8:	2300      	movs	r3, #0
 80015aa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015ac:	2300      	movs	r3, #0
 80015ae:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015b0:	f107 0314 	add.w	r3, r7, #20
 80015b4:	4619      	mov	r1, r3
 80015b6:	4805      	ldr	r0, [pc, #20]	; (80015cc <MX_GPIO_Init+0x104>)
 80015b8:	f002 fa0c 	bl	80039d4 <HAL_GPIO_Init>

}
 80015bc:	bf00      	nop
 80015be:	3728      	adds	r7, #40	; 0x28
 80015c0:	46bd      	mov	sp, r7
 80015c2:	bd80      	pop	{r7, pc}
 80015c4:	40021000 	.word	0x40021000
 80015c8:	48000800 	.word	0x48000800
 80015cc:	48000400 	.word	0x48000400

080015d0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80015d0:	b480      	push	{r7}
 80015d2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80015d4:	b672      	cpsid	i
}
 80015d6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80015d8:	e7fe      	b.n	80015d8 <Error_Handler+0x8>
	...

080015dc <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80015dc:	b480      	push	{r7}
 80015de:	b083      	sub	sp, #12
 80015e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015e2:	4b0f      	ldr	r3, [pc, #60]	; (8001620 <HAL_MspInit+0x44>)
 80015e4:	699b      	ldr	r3, [r3, #24]
 80015e6:	4a0e      	ldr	r2, [pc, #56]	; (8001620 <HAL_MspInit+0x44>)
 80015e8:	f043 0301 	orr.w	r3, r3, #1
 80015ec:	6193      	str	r3, [r2, #24]
 80015ee:	4b0c      	ldr	r3, [pc, #48]	; (8001620 <HAL_MspInit+0x44>)
 80015f0:	699b      	ldr	r3, [r3, #24]
 80015f2:	f003 0301 	and.w	r3, r3, #1
 80015f6:	607b      	str	r3, [r7, #4]
 80015f8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80015fa:	4b09      	ldr	r3, [pc, #36]	; (8001620 <HAL_MspInit+0x44>)
 80015fc:	69db      	ldr	r3, [r3, #28]
 80015fe:	4a08      	ldr	r2, [pc, #32]	; (8001620 <HAL_MspInit+0x44>)
 8001600:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001604:	61d3      	str	r3, [r2, #28]
 8001606:	4b06      	ldr	r3, [pc, #24]	; (8001620 <HAL_MspInit+0x44>)
 8001608:	69db      	ldr	r3, [r3, #28]
 800160a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800160e:	603b      	str	r3, [r7, #0]
 8001610:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001612:	bf00      	nop
 8001614:	370c      	adds	r7, #12
 8001616:	46bd      	mov	sp, r7
 8001618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800161c:	4770      	bx	lr
 800161e:	bf00      	nop
 8001620:	40021000 	.word	0x40021000

08001624 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001624:	b580      	push	{r7, lr}
 8001626:	b08a      	sub	sp, #40	; 0x28
 8001628:	af00      	add	r7, sp, #0
 800162a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800162c:	f107 0314 	add.w	r3, r7, #20
 8001630:	2200      	movs	r2, #0
 8001632:	601a      	str	r2, [r3, #0]
 8001634:	605a      	str	r2, [r3, #4]
 8001636:	609a      	str	r2, [r3, #8]
 8001638:	60da      	str	r2, [r3, #12]
 800163a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001644:	d14d      	bne.n	80016e2 <HAL_ADC_MspInit+0xbe>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8001646:	4b29      	ldr	r3, [pc, #164]	; (80016ec <HAL_ADC_MspInit+0xc8>)
 8001648:	695b      	ldr	r3, [r3, #20]
 800164a:	4a28      	ldr	r2, [pc, #160]	; (80016ec <HAL_ADC_MspInit+0xc8>)
 800164c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001650:	6153      	str	r3, [r2, #20]
 8001652:	4b26      	ldr	r3, [pc, #152]	; (80016ec <HAL_ADC_MspInit+0xc8>)
 8001654:	695b      	ldr	r3, [r3, #20]
 8001656:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800165a:	613b      	str	r3, [r7, #16]
 800165c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800165e:	4b23      	ldr	r3, [pc, #140]	; (80016ec <HAL_ADC_MspInit+0xc8>)
 8001660:	695b      	ldr	r3, [r3, #20]
 8001662:	4a22      	ldr	r2, [pc, #136]	; (80016ec <HAL_ADC_MspInit+0xc8>)
 8001664:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001668:	6153      	str	r3, [r2, #20]
 800166a:	4b20      	ldr	r3, [pc, #128]	; (80016ec <HAL_ADC_MspInit+0xc8>)
 800166c:	695b      	ldr	r3, [r3, #20]
 800166e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001672:	60fb      	str	r3, [r7, #12]
 8001674:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = AnIn1_Pin;
 8001676:	2301      	movs	r3, #1
 8001678:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800167a:	2303      	movs	r3, #3
 800167c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800167e:	2300      	movs	r3, #0
 8001680:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(AnIn1_GPIO_Port, &GPIO_InitStruct);
 8001682:	f107 0314 	add.w	r3, r7, #20
 8001686:	4619      	mov	r1, r3
 8001688:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800168c:	f002 f9a2 	bl	80039d4 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8001690:	4b17      	ldr	r3, [pc, #92]	; (80016f0 <HAL_ADC_MspInit+0xcc>)
 8001692:	4a18      	ldr	r2, [pc, #96]	; (80016f4 <HAL_ADC_MspInit+0xd0>)
 8001694:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001696:	4b16      	ldr	r3, [pc, #88]	; (80016f0 <HAL_ADC_MspInit+0xcc>)
 8001698:	2200      	movs	r2, #0
 800169a:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800169c:	4b14      	ldr	r3, [pc, #80]	; (80016f0 <HAL_ADC_MspInit+0xcc>)
 800169e:	2200      	movs	r2, #0
 80016a0:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80016a2:	4b13      	ldr	r3, [pc, #76]	; (80016f0 <HAL_ADC_MspInit+0xcc>)
 80016a4:	2280      	movs	r2, #128	; 0x80
 80016a6:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80016a8:	4b11      	ldr	r3, [pc, #68]	; (80016f0 <HAL_ADC_MspInit+0xcc>)
 80016aa:	f44f 7280 	mov.w	r2, #256	; 0x100
 80016ae:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80016b0:	4b0f      	ldr	r3, [pc, #60]	; (80016f0 <HAL_ADC_MspInit+0xcc>)
 80016b2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80016b6:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 80016b8:	4b0d      	ldr	r3, [pc, #52]	; (80016f0 <HAL_ADC_MspInit+0xcc>)
 80016ba:	2200      	movs	r2, #0
 80016bc:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_HIGH;
 80016be:	4b0c      	ldr	r3, [pc, #48]	; (80016f0 <HAL_ADC_MspInit+0xcc>)
 80016c0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80016c4:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80016c6:	480a      	ldr	r0, [pc, #40]	; (80016f0 <HAL_ADC_MspInit+0xcc>)
 80016c8:	f001 ff97 	bl	80035fa <HAL_DMA_Init>
 80016cc:	4603      	mov	r3, r0
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d001      	beq.n	80016d6 <HAL_ADC_MspInit+0xb2>
    {
      Error_Handler();
 80016d2:	f7ff ff7d 	bl	80015d0 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	4a05      	ldr	r2, [pc, #20]	; (80016f0 <HAL_ADC_MspInit+0xcc>)
 80016da:	639a      	str	r2, [r3, #56]	; 0x38
 80016dc:	4a04      	ldr	r2, [pc, #16]	; (80016f0 <HAL_ADC_MspInit+0xcc>)
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80016e2:	bf00      	nop
 80016e4:	3728      	adds	r7, #40	; 0x28
 80016e6:	46bd      	mov	sp, r7
 80016e8:	bd80      	pop	{r7, pc}
 80016ea:	bf00      	nop
 80016ec:	40021000 	.word	0x40021000
 80016f0:	200006d0 	.word	0x200006d0
 80016f4:	40020008 	.word	0x40020008

080016f8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80016f8:	b580      	push	{r7, lr}
 80016fa:	b08a      	sub	sp, #40	; 0x28
 80016fc:	af00      	add	r7, sp, #0
 80016fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001700:	f107 0314 	add.w	r3, r7, #20
 8001704:	2200      	movs	r2, #0
 8001706:	601a      	str	r2, [r3, #0]
 8001708:	605a      	str	r2, [r3, #4]
 800170a:	609a      	str	r2, [r3, #8]
 800170c:	60da      	str	r2, [r3, #12]
 800170e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	4a17      	ldr	r2, [pc, #92]	; (8001774 <HAL_I2C_MspInit+0x7c>)
 8001716:	4293      	cmp	r3, r2
 8001718:	d128      	bne.n	800176c <HAL_I2C_MspInit+0x74>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800171a:	4b17      	ldr	r3, [pc, #92]	; (8001778 <HAL_I2C_MspInit+0x80>)
 800171c:	695b      	ldr	r3, [r3, #20]
 800171e:	4a16      	ldr	r2, [pc, #88]	; (8001778 <HAL_I2C_MspInit+0x80>)
 8001720:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001724:	6153      	str	r3, [r2, #20]
 8001726:	4b14      	ldr	r3, [pc, #80]	; (8001778 <HAL_I2C_MspInit+0x80>)
 8001728:	695b      	ldr	r3, [r3, #20]
 800172a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800172e:	613b      	str	r3, [r7, #16]
 8001730:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001732:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001736:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001738:	2312      	movs	r3, #18
 800173a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800173c:	2301      	movs	r3, #1
 800173e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001740:	2303      	movs	r3, #3
 8001742:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001744:	2304      	movs	r3, #4
 8001746:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001748:	f107 0314 	add.w	r3, r7, #20
 800174c:	4619      	mov	r1, r3
 800174e:	480b      	ldr	r0, [pc, #44]	; (800177c <HAL_I2C_MspInit+0x84>)
 8001750:	f002 f940 	bl	80039d4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001754:	4b08      	ldr	r3, [pc, #32]	; (8001778 <HAL_I2C_MspInit+0x80>)
 8001756:	69db      	ldr	r3, [r3, #28]
 8001758:	4a07      	ldr	r2, [pc, #28]	; (8001778 <HAL_I2C_MspInit+0x80>)
 800175a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800175e:	61d3      	str	r3, [r2, #28]
 8001760:	4b05      	ldr	r3, [pc, #20]	; (8001778 <HAL_I2C_MspInit+0x80>)
 8001762:	69db      	ldr	r3, [r3, #28]
 8001764:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001768:	60fb      	str	r3, [r7, #12]
 800176a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800176c:	bf00      	nop
 800176e:	3728      	adds	r7, #40	; 0x28
 8001770:	46bd      	mov	sp, r7
 8001772:	bd80      	pop	{r7, pc}
 8001774:	40005400 	.word	0x40005400
 8001778:	40021000 	.word	0x40021000
 800177c:	48000400 	.word	0x48000400

08001780 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001780:	b580      	push	{r7, lr}
 8001782:	b08a      	sub	sp, #40	; 0x28
 8001784:	af00      	add	r7, sp, #0
 8001786:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001788:	f107 0314 	add.w	r3, r7, #20
 800178c:	2200      	movs	r2, #0
 800178e:	601a      	str	r2, [r3, #0]
 8001790:	605a      	str	r2, [r3, #4]
 8001792:	609a      	str	r2, [r3, #8]
 8001794:	60da      	str	r2, [r3, #12]
 8001796:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	4a17      	ldr	r2, [pc, #92]	; (80017fc <HAL_SPI_MspInit+0x7c>)
 800179e:	4293      	cmp	r3, r2
 80017a0:	d128      	bne.n	80017f4 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80017a2:	4b17      	ldr	r3, [pc, #92]	; (8001800 <HAL_SPI_MspInit+0x80>)
 80017a4:	69db      	ldr	r3, [r3, #28]
 80017a6:	4a16      	ldr	r2, [pc, #88]	; (8001800 <HAL_SPI_MspInit+0x80>)
 80017a8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80017ac:	61d3      	str	r3, [r2, #28]
 80017ae:	4b14      	ldr	r3, [pc, #80]	; (8001800 <HAL_SPI_MspInit+0x80>)
 80017b0:	69db      	ldr	r3, [r3, #28]
 80017b2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80017b6:	613b      	str	r3, [r7, #16]
 80017b8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80017ba:	4b11      	ldr	r3, [pc, #68]	; (8001800 <HAL_SPI_MspInit+0x80>)
 80017bc:	695b      	ldr	r3, [r3, #20]
 80017be:	4a10      	ldr	r2, [pc, #64]	; (8001800 <HAL_SPI_MspInit+0x80>)
 80017c0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80017c4:	6153      	str	r3, [r2, #20]
 80017c6:	4b0e      	ldr	r3, [pc, #56]	; (8001800 <HAL_SPI_MspInit+0x80>)
 80017c8:	695b      	ldr	r3, [r3, #20]
 80017ca:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80017ce:	60fb      	str	r3, [r7, #12]
 80017d0:	68fb      	ldr	r3, [r7, #12]
    PB12     ------> SPI2_NSS
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 80017d2:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 80017d6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017d8:	2302      	movs	r3, #2
 80017da:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017dc:	2300      	movs	r3, #0
 80017de:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80017e0:	2303      	movs	r3, #3
 80017e2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80017e4:	2305      	movs	r3, #5
 80017e6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017e8:	f107 0314 	add.w	r3, r7, #20
 80017ec:	4619      	mov	r1, r3
 80017ee:	4805      	ldr	r0, [pc, #20]	; (8001804 <HAL_SPI_MspInit+0x84>)
 80017f0:	f002 f8f0 	bl	80039d4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 80017f4:	bf00      	nop
 80017f6:	3728      	adds	r7, #40	; 0x28
 80017f8:	46bd      	mov	sp, r7
 80017fa:	bd80      	pop	{r7, pc}
 80017fc:	40003800 	.word	0x40003800
 8001800:	40021000 	.word	0x40021000
 8001804:	48000400 	.word	0x48000400

08001808 <HAL_TIM_OC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_oc: TIM_OC handle pointer
* @retval None
*/
void HAL_TIM_OC_MspInit(TIM_HandleTypeDef* htim_oc)
{
 8001808:	b480      	push	{r7}
 800180a:	b085      	sub	sp, #20
 800180c:	af00      	add	r7, sp, #0
 800180e:	6078      	str	r0, [r7, #4]
  if(htim_oc->Instance==TIM1)
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	4a0a      	ldr	r2, [pc, #40]	; (8001840 <HAL_TIM_OC_MspInit+0x38>)
 8001816:	4293      	cmp	r3, r2
 8001818:	d10b      	bne.n	8001832 <HAL_TIM_OC_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800181a:	4b0a      	ldr	r3, [pc, #40]	; (8001844 <HAL_TIM_OC_MspInit+0x3c>)
 800181c:	699b      	ldr	r3, [r3, #24]
 800181e:	4a09      	ldr	r2, [pc, #36]	; (8001844 <HAL_TIM_OC_MspInit+0x3c>)
 8001820:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001824:	6193      	str	r3, [r2, #24]
 8001826:	4b07      	ldr	r3, [pc, #28]	; (8001844 <HAL_TIM_OC_MspInit+0x3c>)
 8001828:	699b      	ldr	r3, [r3, #24]
 800182a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800182e:	60fb      	str	r3, [r7, #12]
 8001830:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8001832:	bf00      	nop
 8001834:	3714      	adds	r7, #20
 8001836:	46bd      	mov	sp, r7
 8001838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800183c:	4770      	bx	lr
 800183e:	bf00      	nop
 8001840:	40012c00 	.word	0x40012c00
 8001844:	40021000 	.word	0x40021000

08001848 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001848:	b580      	push	{r7, lr}
 800184a:	b084      	sub	sp, #16
 800184c:	af00      	add	r7, sp, #0
 800184e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	4a1a      	ldr	r2, [pc, #104]	; (80018c0 <HAL_TIM_Base_MspInit+0x78>)
 8001856:	4293      	cmp	r3, r2
 8001858:	d114      	bne.n	8001884 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800185a:	4b1a      	ldr	r3, [pc, #104]	; (80018c4 <HAL_TIM_Base_MspInit+0x7c>)
 800185c:	69db      	ldr	r3, [r3, #28]
 800185e:	4a19      	ldr	r2, [pc, #100]	; (80018c4 <HAL_TIM_Base_MspInit+0x7c>)
 8001860:	f043 0302 	orr.w	r3, r3, #2
 8001864:	61d3      	str	r3, [r2, #28]
 8001866:	4b17      	ldr	r3, [pc, #92]	; (80018c4 <HAL_TIM_Base_MspInit+0x7c>)
 8001868:	69db      	ldr	r3, [r3, #28]
 800186a:	f003 0302 	and.w	r3, r3, #2
 800186e:	60fb      	str	r3, [r7, #12]
 8001870:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001872:	2200      	movs	r2, #0
 8001874:	2100      	movs	r1, #0
 8001876:	201d      	movs	r0, #29
 8001878:	f001 fe85 	bl	8003586 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800187c:	201d      	movs	r0, #29
 800187e:	f001 fe9e 	bl	80035be <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8001882:	e018      	b.n	80018b6 <HAL_TIM_Base_MspInit+0x6e>
  else if(htim_base->Instance==TIM4)
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	4a0f      	ldr	r2, [pc, #60]	; (80018c8 <HAL_TIM_Base_MspInit+0x80>)
 800188a:	4293      	cmp	r3, r2
 800188c:	d113      	bne.n	80018b6 <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800188e:	4b0d      	ldr	r3, [pc, #52]	; (80018c4 <HAL_TIM_Base_MspInit+0x7c>)
 8001890:	69db      	ldr	r3, [r3, #28]
 8001892:	4a0c      	ldr	r2, [pc, #48]	; (80018c4 <HAL_TIM_Base_MspInit+0x7c>)
 8001894:	f043 0304 	orr.w	r3, r3, #4
 8001898:	61d3      	str	r3, [r2, #28]
 800189a:	4b0a      	ldr	r3, [pc, #40]	; (80018c4 <HAL_TIM_Base_MspInit+0x7c>)
 800189c:	69db      	ldr	r3, [r3, #28]
 800189e:	f003 0304 	and.w	r3, r3, #4
 80018a2:	60bb      	str	r3, [r7, #8]
 80018a4:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 80018a6:	2200      	movs	r2, #0
 80018a8:	2100      	movs	r1, #0
 80018aa:	201e      	movs	r0, #30
 80018ac:	f001 fe6b 	bl	8003586 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80018b0:	201e      	movs	r0, #30
 80018b2:	f001 fe84 	bl	80035be <HAL_NVIC_EnableIRQ>
}
 80018b6:	bf00      	nop
 80018b8:	3710      	adds	r7, #16
 80018ba:	46bd      	mov	sp, r7
 80018bc:	bd80      	pop	{r7, pc}
 80018be:	bf00      	nop
 80018c0:	40000400 	.word	0x40000400
 80018c4:	40021000 	.word	0x40021000
 80018c8:	40000800 	.word	0x40000800

080018cc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80018cc:	b580      	push	{r7, lr}
 80018ce:	b088      	sub	sp, #32
 80018d0:	af00      	add	r7, sp, #0
 80018d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018d4:	f107 030c 	add.w	r3, r7, #12
 80018d8:	2200      	movs	r2, #0
 80018da:	601a      	str	r2, [r3, #0]
 80018dc:	605a      	str	r2, [r3, #4]
 80018de:	609a      	str	r2, [r3, #8]
 80018e0:	60da      	str	r2, [r3, #12]
 80018e2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	4a1b      	ldr	r2, [pc, #108]	; (8001958 <HAL_TIM_MspPostInit+0x8c>)
 80018ea:	4293      	cmp	r3, r2
 80018ec:	d12f      	bne.n	800194e <HAL_TIM_MspPostInit+0x82>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018ee:	4b1b      	ldr	r3, [pc, #108]	; (800195c <HAL_TIM_MspPostInit+0x90>)
 80018f0:	695b      	ldr	r3, [r3, #20]
 80018f2:	4a1a      	ldr	r2, [pc, #104]	; (800195c <HAL_TIM_MspPostInit+0x90>)
 80018f4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80018f8:	6153      	str	r3, [r2, #20]
 80018fa:	4b18      	ldr	r3, [pc, #96]	; (800195c <HAL_TIM_MspPostInit+0x90>)
 80018fc:	695b      	ldr	r3, [r3, #20]
 80018fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001902:	60bb      	str	r3, [r7, #8]
 8001904:	68bb      	ldr	r3, [r7, #8]
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    PA11     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = Z1_Pin|Z2_Pin|Z3_Pin;
 8001906:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 800190a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800190c:	2302      	movs	r3, #2
 800190e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001910:	2300      	movs	r3, #0
 8001912:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001914:	2300      	movs	r3, #0
 8001916:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8001918:	2306      	movs	r3, #6
 800191a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800191c:	f107 030c 	add.w	r3, r7, #12
 8001920:	4619      	mov	r1, r3
 8001922:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001926:	f002 f855 	bl	80039d4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = Z4_Pin;
 800192a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800192e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001930:	2302      	movs	r3, #2
 8001932:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001934:	2300      	movs	r3, #0
 8001936:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001938:	2300      	movs	r3, #0
 800193a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF11_TIM1;
 800193c:	230b      	movs	r3, #11
 800193e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(Z4_GPIO_Port, &GPIO_InitStruct);
 8001940:	f107 030c 	add.w	r3, r7, #12
 8001944:	4619      	mov	r1, r3
 8001946:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800194a:	f002 f843 	bl	80039d4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 800194e:	bf00      	nop
 8001950:	3720      	adds	r7, #32
 8001952:	46bd      	mov	sp, r7
 8001954:	bd80      	pop	{r7, pc}
 8001956:	bf00      	nop
 8001958:	40012c00 	.word	0x40012c00
 800195c:	40021000 	.word	0x40021000

08001960 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001960:	b580      	push	{r7, lr}
 8001962:	b08c      	sub	sp, #48	; 0x30
 8001964:	af00      	add	r7, sp, #0
 8001966:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001968:	f107 031c 	add.w	r3, r7, #28
 800196c:	2200      	movs	r2, #0
 800196e:	601a      	str	r2, [r3, #0]
 8001970:	605a      	str	r2, [r3, #4]
 8001972:	609a      	str	r2, [r3, #8]
 8001974:	60da      	str	r2, [r3, #12]
 8001976:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	4a2e      	ldr	r2, [pc, #184]	; (8001a38 <HAL_UART_MspInit+0xd8>)
 800197e:	4293      	cmp	r3, r2
 8001980:	d128      	bne.n	80019d4 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001982:	4b2e      	ldr	r3, [pc, #184]	; (8001a3c <HAL_UART_MspInit+0xdc>)
 8001984:	699b      	ldr	r3, [r3, #24]
 8001986:	4a2d      	ldr	r2, [pc, #180]	; (8001a3c <HAL_UART_MspInit+0xdc>)
 8001988:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800198c:	6193      	str	r3, [r2, #24]
 800198e:	4b2b      	ldr	r3, [pc, #172]	; (8001a3c <HAL_UART_MspInit+0xdc>)
 8001990:	699b      	ldr	r3, [r3, #24]
 8001992:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001996:	61bb      	str	r3, [r7, #24]
 8001998:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800199a:	4b28      	ldr	r3, [pc, #160]	; (8001a3c <HAL_UART_MspInit+0xdc>)
 800199c:	695b      	ldr	r3, [r3, #20]
 800199e:	4a27      	ldr	r2, [pc, #156]	; (8001a3c <HAL_UART_MspInit+0xdc>)
 80019a0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80019a4:	6153      	str	r3, [r2, #20]
 80019a6:	4b25      	ldr	r3, [pc, #148]	; (8001a3c <HAL_UART_MspInit+0xdc>)
 80019a8:	695b      	ldr	r3, [r3, #20]
 80019aa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80019ae:	617b      	str	r3, [r7, #20]
 80019b0:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80019b2:	23c0      	movs	r3, #192	; 0xc0
 80019b4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019b6:	2302      	movs	r3, #2
 80019b8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019ba:	2300      	movs	r3, #0
 80019bc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80019be:	2303      	movs	r3, #3
 80019c0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80019c2:	2307      	movs	r3, #7
 80019c4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019c6:	f107 031c 	add.w	r3, r7, #28
 80019ca:	4619      	mov	r1, r3
 80019cc:	481c      	ldr	r0, [pc, #112]	; (8001a40 <HAL_UART_MspInit+0xe0>)
 80019ce:	f002 f801 	bl	80039d4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80019d2:	e02c      	b.n	8001a2e <HAL_UART_MspInit+0xce>
  else if(huart->Instance==USART2)
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	4a1a      	ldr	r2, [pc, #104]	; (8001a44 <HAL_UART_MspInit+0xe4>)
 80019da:	4293      	cmp	r3, r2
 80019dc:	d127      	bne.n	8001a2e <HAL_UART_MspInit+0xce>
    __HAL_RCC_USART2_CLK_ENABLE();
 80019de:	4b17      	ldr	r3, [pc, #92]	; (8001a3c <HAL_UART_MspInit+0xdc>)
 80019e0:	69db      	ldr	r3, [r3, #28]
 80019e2:	4a16      	ldr	r2, [pc, #88]	; (8001a3c <HAL_UART_MspInit+0xdc>)
 80019e4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80019e8:	61d3      	str	r3, [r2, #28]
 80019ea:	4b14      	ldr	r3, [pc, #80]	; (8001a3c <HAL_UART_MspInit+0xdc>)
 80019ec:	69db      	ldr	r3, [r3, #28]
 80019ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019f2:	613b      	str	r3, [r7, #16]
 80019f4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80019f6:	4b11      	ldr	r3, [pc, #68]	; (8001a3c <HAL_UART_MspInit+0xdc>)
 80019f8:	695b      	ldr	r3, [r3, #20]
 80019fa:	4a10      	ldr	r2, [pc, #64]	; (8001a3c <HAL_UART_MspInit+0xdc>)
 80019fc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001a00:	6153      	str	r3, [r2, #20]
 8001a02:	4b0e      	ldr	r3, [pc, #56]	; (8001a3c <HAL_UART_MspInit+0xdc>)
 8001a04:	695b      	ldr	r3, [r3, #20]
 8001a06:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001a0a:	60fb      	str	r3, [r7, #12]
 8001a0c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 8001a0e:	2318      	movs	r3, #24
 8001a10:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a12:	2302      	movs	r3, #2
 8001a14:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a16:	2300      	movs	r3, #0
 8001a18:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001a1a:	2303      	movs	r3, #3
 8001a1c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001a1e:	2307      	movs	r3, #7
 8001a20:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a22:	f107 031c 	add.w	r3, r7, #28
 8001a26:	4619      	mov	r1, r3
 8001a28:	4805      	ldr	r0, [pc, #20]	; (8001a40 <HAL_UART_MspInit+0xe0>)
 8001a2a:	f001 ffd3 	bl	80039d4 <HAL_GPIO_Init>
}
 8001a2e:	bf00      	nop
 8001a30:	3730      	adds	r7, #48	; 0x30
 8001a32:	46bd      	mov	sp, r7
 8001a34:	bd80      	pop	{r7, pc}
 8001a36:	bf00      	nop
 8001a38:	40013800 	.word	0x40013800
 8001a3c:	40021000 	.word	0x40021000
 8001a40:	48000400 	.word	0x48000400
 8001a44:	40004400 	.word	0x40004400

08001a48 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001a48:	b480      	push	{r7}
 8001a4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001a4c:	e7fe      	b.n	8001a4c <NMI_Handler+0x4>

08001a4e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001a4e:	b480      	push	{r7}
 8001a50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001a52:	e7fe      	b.n	8001a52 <HardFault_Handler+0x4>

08001a54 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001a54:	b480      	push	{r7}
 8001a56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001a58:	e7fe      	b.n	8001a58 <MemManage_Handler+0x4>

08001a5a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001a5a:	b480      	push	{r7}
 8001a5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001a5e:	e7fe      	b.n	8001a5e <BusFault_Handler+0x4>

08001a60 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001a60:	b480      	push	{r7}
 8001a62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001a64:	e7fe      	b.n	8001a64 <UsageFault_Handler+0x4>

08001a66 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001a66:	b480      	push	{r7}
 8001a68:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001a6a:	bf00      	nop
 8001a6c:	46bd      	mov	sp, r7
 8001a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a72:	4770      	bx	lr

08001a74 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001a74:	b480      	push	{r7}
 8001a76:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001a78:	bf00      	nop
 8001a7a:	46bd      	mov	sp, r7
 8001a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a80:	4770      	bx	lr

08001a82 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001a82:	b480      	push	{r7}
 8001a84:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001a86:	bf00      	nop
 8001a88:	46bd      	mov	sp, r7
 8001a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a8e:	4770      	bx	lr

08001a90 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001a90:	b580      	push	{r7, lr}
 8001a92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001a94:	f000 fa90 	bl	8001fb8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001a98:	bf00      	nop
 8001a9a:	bd80      	pop	{r7, pc}

08001a9c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001a9c:	b580      	push	{r7, lr}
 8001a9e:	b084      	sub	sp, #16
 8001aa0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */
	if ( (haftConf--) == 0) { // Половина преобразования
 8001aa2:	4b75      	ldr	r3, [pc, #468]	; (8001c78 <DMA1_Channel1_IRQHandler+0x1dc>)
 8001aa4:	881b      	ldrh	r3, [r3, #0]
 8001aa6:	1e5a      	subs	r2, r3, #1
 8001aa8:	b291      	uxth	r1, r2
 8001aaa:	4a73      	ldr	r2, [pc, #460]	; (8001c78 <DMA1_Channel1_IRQHandler+0x1dc>)
 8001aac:	8011      	strh	r1, [r2, #0]
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	f040 80db 	bne.w	8001c6a <DMA1_Channel1_IRQHandler+0x1ce>
			LED_PULSE
 8001ab4:	2201      	movs	r2, #1
 8001ab6:	2140      	movs	r1, #64	; 0x40
 8001ab8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001abc:	f002 f904 	bl	8003cc8 <HAL_GPIO_WritePin>
 8001ac0:	2200      	movs	r2, #0
 8001ac2:	2140      	movs	r1, #64	; 0x40
 8001ac4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001ac8:	f002 f8fe 	bl	8003cc8 <HAL_GPIO_WritePin>
		HAL_ADC_Stop_DMA(&hadc1);
 8001acc:	486b      	ldr	r0, [pc, #428]	; (8001c7c <DMA1_Channel1_IRQHandler+0x1e0>)
 8001ace:	f000 fdd1 	bl	8002674 <HAL_ADC_Stop_DMA>
		if (ajustCount++ > AJUST_DELAY) {
 8001ad2:	4b6b      	ldr	r3, [pc, #428]	; (8001c80 <DMA1_Channel1_IRQHandler+0x1e4>)
 8001ad4:	881b      	ldrh	r3, [r3, #0]
 8001ad6:	1c5a      	adds	r2, r3, #1
 8001ad8:	b291      	uxth	r1, r2
 8001ada:	4a69      	ldr	r2, [pc, #420]	; (8001c80 <DMA1_Channel1_IRQHandler+0x1e4>)
 8001adc:	8011      	strh	r1, [r2, #0]
 8001ade:	2b05      	cmp	r3, #5
 8001ae0:	f240 80c3 	bls.w	8001c6a <DMA1_Channel1_IRQHandler+0x1ce>
			/* Автоматическая регулировка уровня сигнала */
			ajustCount = 0;
 8001ae4:	4b66      	ldr	r3, [pc, #408]	; (8001c80 <DMA1_Channel1_IRQHandler+0x1e4>)
 8001ae6:	2200      	movs	r2, #0
 8001ae8:	801a      	strh	r2, [r3, #0]
			maxLevel = 0, minLevel = 4096;
 8001aea:	4b66      	ldr	r3, [pc, #408]	; (8001c84 <DMA1_Channel1_IRQHandler+0x1e8>)
 8001aec:	2200      	movs	r2, #0
 8001aee:	801a      	strh	r2, [r3, #0]
 8001af0:	4b65      	ldr	r3, [pc, #404]	; (8001c88 <DMA1_Channel1_IRQHandler+0x1ec>)
 8001af2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001af6:	801a      	strh	r2, [r3, #0]
			for (int ii = 0; ii < CONVERSION_COUNT; ii++) {
 8001af8:	2300      	movs	r3, #0
 8001afa:	60fb      	str	r3, [r7, #12]
 8001afc:	e01e      	b.n	8001b3c <DMA1_Channel1_IRQHandler+0xa0>
				if (maxLevel < adcBuffer[ii]) {
 8001afe:	4a63      	ldr	r2, [pc, #396]	; (8001c8c <DMA1_Channel1_IRQHandler+0x1f0>)
 8001b00:	68fb      	ldr	r3, [r7, #12]
 8001b02:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8001b06:	4b5f      	ldr	r3, [pc, #380]	; (8001c84 <DMA1_Channel1_IRQHandler+0x1e8>)
 8001b08:	881b      	ldrh	r3, [r3, #0]
 8001b0a:	429a      	cmp	r2, r3
 8001b0c:	d905      	bls.n	8001b1a <DMA1_Channel1_IRQHandler+0x7e>
					maxLevel = adcBuffer[ii];
 8001b0e:	4a5f      	ldr	r2, [pc, #380]	; (8001c8c <DMA1_Channel1_IRQHandler+0x1f0>)
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8001b16:	4b5b      	ldr	r3, [pc, #364]	; (8001c84 <DMA1_Channel1_IRQHandler+0x1e8>)
 8001b18:	801a      	strh	r2, [r3, #0]
				}
				if (minLevel > adcBuffer[ii]) {
 8001b1a:	4a5c      	ldr	r2, [pc, #368]	; (8001c8c <DMA1_Channel1_IRQHandler+0x1f0>)
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8001b22:	4b59      	ldr	r3, [pc, #356]	; (8001c88 <DMA1_Channel1_IRQHandler+0x1ec>)
 8001b24:	881b      	ldrh	r3, [r3, #0]
 8001b26:	429a      	cmp	r2, r3
 8001b28:	d205      	bcs.n	8001b36 <DMA1_Channel1_IRQHandler+0x9a>
					minLevel = adcBuffer[ii];
 8001b2a:	4a58      	ldr	r2, [pc, #352]	; (8001c8c <DMA1_Channel1_IRQHandler+0x1f0>)
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8001b32:	4b55      	ldr	r3, [pc, #340]	; (8001c88 <DMA1_Channel1_IRQHandler+0x1ec>)
 8001b34:	801a      	strh	r2, [r3, #0]
			for (int ii = 0; ii < CONVERSION_COUNT; ii++) {
 8001b36:	68fb      	ldr	r3, [r7, #12]
 8001b38:	3301      	adds	r3, #1
 8001b3a:	60fb      	str	r3, [r7, #12]
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	2bc7      	cmp	r3, #199	; 0xc7
 8001b40:	dddd      	ble.n	8001afe <DMA1_Channel1_IRQHandler+0x62>
				}
			}

			if (abs(minLevel - AVG_LEVEL) > abs(maxLevel - AVG_LEVEL)) {
 8001b42:	4b51      	ldr	r3, [pc, #324]	; (8001c88 <DMA1_Channel1_IRQHandler+0x1ec>)
 8001b44:	881b      	ldrh	r3, [r3, #0]
 8001b46:	f2a3 73b2 	subw	r3, r3, #1970	; 0x7b2
 8001b4a:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8001b4e:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8001b52:	4b4c      	ldr	r3, [pc, #304]	; (8001c84 <DMA1_Channel1_IRQHandler+0x1e8>)
 8001b54:	881b      	ldrh	r3, [r3, #0]
 8001b56:	f2a3 73b2 	subw	r3, r3, #1970	; 0x7b2
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	bfb8      	it	lt
 8001b5e:	425b      	neglt	r3, r3
 8001b60:	429a      	cmp	r2, r3
 8001b62:	dd0a      	ble.n	8001b7a <DMA1_Channel1_IRQHandler+0xde>
				maxLevel = abs(minLevel - AVG_LEVEL);
 8001b64:	4b48      	ldr	r3, [pc, #288]	; (8001c88 <DMA1_Channel1_IRQHandler+0x1ec>)
 8001b66:	881b      	ldrh	r3, [r3, #0]
 8001b68:	f2a3 73b2 	subw	r3, r3, #1970	; 0x7b2
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	bfb8      	it	lt
 8001b70:	425b      	neglt	r3, r3
 8001b72:	b29a      	uxth	r2, r3
 8001b74:	4b43      	ldr	r3, [pc, #268]	; (8001c84 <DMA1_Channel1_IRQHandler+0x1e8>)
 8001b76:	801a      	strh	r2, [r3, #0]
 8001b78:	e009      	b.n	8001b8e <DMA1_Channel1_IRQHandler+0xf2>
			} else {
				maxLevel = abs(maxLevel - AVG_LEVEL);
 8001b7a:	4b42      	ldr	r3, [pc, #264]	; (8001c84 <DMA1_Channel1_IRQHandler+0x1e8>)
 8001b7c:	881b      	ldrh	r3, [r3, #0]
 8001b7e:	f2a3 73b2 	subw	r3, r3, #1970	; 0x7b2
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	bfb8      	it	lt
 8001b86:	425b      	neglt	r3, r3
 8001b88:	b29a      	uxth	r2, r3
 8001b8a:	4b3e      	ldr	r3, [pc, #248]	; (8001c84 <DMA1_Channel1_IRQHandler+0x1e8>)
 8001b8c:	801a      	strh	r2, [r3, #0]
			}
			if (abs(maxLevel - NOMINAL_LEVEL) > ACURACY_LEVEL) {
 8001b8e:	4b3d      	ldr	r3, [pc, #244]	; (8001c84 <DMA1_Channel1_IRQHandler+0x1e8>)
 8001b90:	881b      	ldrh	r3, [r3, #0]
 8001b92:	f5a3 63e1 	sub.w	r3, r3, #1800	; 0x708
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	bfb8      	it	lt
 8001b9a:	425b      	neglt	r3, r3
 8001b9c:	2b64      	cmp	r3, #100	; 0x64
 8001b9e:	dd10      	ble.n	8001bc2 <DMA1_Channel1_IRQHandler+0x126>
				if (maxLevel - NOMINAL_LEVEL > 0) {
 8001ba0:	4b38      	ldr	r3, [pc, #224]	; (8001c84 <DMA1_Channel1_IRQHandler+0x1e8>)
 8001ba2:	881b      	ldrh	r3, [r3, #0]
 8001ba4:	f5b3 6fe1 	cmp.w	r3, #1800	; 0x708
 8001ba8:	d905      	bls.n	8001bb6 <DMA1_Channel1_IRQHandler+0x11a>
					/* Сигнал сильный, понижаем уровень */
					levelUp(0, 1, DOWN);
 8001baa:	2200      	movs	r2, #0
 8001bac:	2101      	movs	r1, #1
 8001bae:	2000      	movs	r0, #0
 8001bb0:	f7fe fffa 	bl	8000ba8 <levelUp>
 8001bb4:	e059      	b.n	8001c6a <DMA1_Channel1_IRQHandler+0x1ce>
				} else {
					/* Сигнал слабый, повышаем уровень */
					levelUp(0, 1, UP);
 8001bb6:	2201      	movs	r2, #1
 8001bb8:	2101      	movs	r1, #1
 8001bba:	2000      	movs	r0, #0
 8001bbc:	f7fe fff4 	bl	8000ba8 <levelUp>
 8001bc0:	e053      	b.n	8001c6a <DMA1_Channel1_IRQHandler+0x1ce>
				}
			} else {  /* Можно выполнять свертку */
				maxLev = 1;
 8001bc2:	4933      	ldr	r1, [pc, #204]	; (8001c90 <DMA1_Channel1_IRQHandler+0x1f4>)
 8001bc4:	f04f 0200 	mov.w	r2, #0
 8001bc8:	4b32      	ldr	r3, [pc, #200]	; (8001c94 <DMA1_Channel1_IRQHandler+0x1f8>)
 8001bca:	e9c1 2300 	strd	r2, r3, [r1]
				maxIndex = 0;
 8001bce:	4b32      	ldr	r3, [pc, #200]	; (8001c98 <DMA1_Channel1_IRQHandler+0x1fc>)
 8001bd0:	2200      	movs	r2, #0
 8001bd2:	801a      	strh	r2, [r3, #0]
				for (int ii = 0; ii < CONVERSION_COUNT - REF_COUNT; ii++) {
 8001bd4:	2300      	movs	r3, #0
 8001bd6:	60bb      	str	r3, [r7, #8]
 8001bd8:	e041      	b.n	8001c5e <DMA1_Channel1_IRQHandler+0x1c2>
					curLev = 0;
 8001bda:	4930      	ldr	r1, [pc, #192]	; (8001c9c <DMA1_Channel1_IRQHandler+0x200>)
 8001bdc:	f04f 0200 	mov.w	r2, #0
 8001be0:	f04f 0300 	mov.w	r3, #0
 8001be4:	e9c1 2300 	strd	r2, r3, [r1]
					for (int jj = 0; jj < REF_COUNT; jj++ ) {
 8001be8:	2300      	movs	r3, #0
 8001bea:	607b      	str	r3, [r7, #4]
 8001bec:	e01c      	b.n	8001c28 <DMA1_Channel1_IRQHandler+0x18c>
						curLev = curLev + (double) (adcBuffer[ii + jj] * refArray[jj]);
 8001bee:	68ba      	ldr	r2, [r7, #8]
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	4413      	add	r3, r2
 8001bf4:	4a25      	ldr	r2, [pc, #148]	; (8001c8c <DMA1_Channel1_IRQHandler+0x1f0>)
 8001bf6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001bfa:	4619      	mov	r1, r3
 8001bfc:	4a28      	ldr	r2, [pc, #160]	; (8001ca0 <DMA1_Channel1_IRQHandler+0x204>)
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001c04:	fb03 f301 	mul.w	r3, r3, r1
 8001c08:	4618      	mov	r0, r3
 8001c0a:	f7fe fc8b 	bl	8000524 <__aeabi_i2d>
 8001c0e:	4b23      	ldr	r3, [pc, #140]	; (8001c9c <DMA1_Channel1_IRQHandler+0x200>)
 8001c10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c14:	f7fe fb3a 	bl	800028c <__adddf3>
 8001c18:	4602      	mov	r2, r0
 8001c1a:	460b      	mov	r3, r1
 8001c1c:	491f      	ldr	r1, [pc, #124]	; (8001c9c <DMA1_Channel1_IRQHandler+0x200>)
 8001c1e:	e9c1 2300 	strd	r2, r3, [r1]
					for (int jj = 0; jj < REF_COUNT; jj++ ) {
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	3301      	adds	r3, #1
 8001c26:	607b      	str	r3, [r7, #4]
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	2b13      	cmp	r3, #19
 8001c2c:	dddf      	ble.n	8001bee <DMA1_Channel1_IRQHandler+0x152>
					}
					if (curLev > maxLev) {
 8001c2e:	4b1b      	ldr	r3, [pc, #108]	; (8001c9c <DMA1_Channel1_IRQHandler+0x200>)
 8001c30:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001c34:	4b16      	ldr	r3, [pc, #88]	; (8001c90 <DMA1_Channel1_IRQHandler+0x1f4>)
 8001c36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c3a:	f7fe ff6d 	bl	8000b18 <__aeabi_dcmpgt>
 8001c3e:	4603      	mov	r3, r0
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d009      	beq.n	8001c58 <DMA1_Channel1_IRQHandler+0x1bc>
						maxLev = curLev;
 8001c44:	4b15      	ldr	r3, [pc, #84]	; (8001c9c <DMA1_Channel1_IRQHandler+0x200>)
 8001c46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c4a:	4911      	ldr	r1, [pc, #68]	; (8001c90 <DMA1_Channel1_IRQHandler+0x1f4>)
 8001c4c:	e9c1 2300 	strd	r2, r3, [r1]
						maxIndex = ii;
 8001c50:	68bb      	ldr	r3, [r7, #8]
 8001c52:	b29a      	uxth	r2, r3
 8001c54:	4b10      	ldr	r3, [pc, #64]	; (8001c98 <DMA1_Channel1_IRQHandler+0x1fc>)
 8001c56:	801a      	strh	r2, [r3, #0]
				for (int ii = 0; ii < CONVERSION_COUNT - REF_COUNT; ii++) {
 8001c58:	68bb      	ldr	r3, [r7, #8]
 8001c5a:	3301      	adds	r3, #1
 8001c5c:	60bb      	str	r3, [r7, #8]
 8001c5e:	68bb      	ldr	r3, [r7, #8]
 8001c60:	2bb3      	cmp	r3, #179	; 0xb3
 8001c62:	ddba      	ble.n	8001bda <DMA1_Channel1_IRQHandler+0x13e>
					}
				}
				readyData = true;
 8001c64:	4b0f      	ldr	r3, [pc, #60]	; (8001ca4 <DMA1_Channel1_IRQHandler+0x208>)
 8001c66:	2201      	movs	r2, #1
 8001c68:	701a      	strb	r2, [r3, #0]
			}
		}
	}
  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001c6a:	480f      	ldr	r0, [pc, #60]	; (8001ca8 <DMA1_Channel1_IRQHandler+0x20c>)
 8001c6c:	f001 fda4 	bl	80037b8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001c70:	bf00      	nop
 8001c72:	3710      	adds	r7, #16
 8001c74:	46bd      	mov	sp, r7
 8001c76:	bd80      	pop	{r7, pc}
 8001c78:	200005a4 	.word	0x200005a4
 8001c7c:	200005f8 	.word	0x200005f8
 8001c80:	200005f4 	.word	0x200005f4
 8001c84:	20000218 	.word	0x20000218
 8001c88:	20000208 	.word	0x20000208
 8001c8c:	200002e4 	.word	0x200002e4
 8001c90:	20000210 	.word	0x20000210
 8001c94:	3ff00000 	.word	0x3ff00000
 8001c98:	20000714 	.word	0x20000714
 8001c9c:	20000768 	.word	0x20000768
 8001ca0:	2000057c 	.word	0x2000057c
 8001ca4:	20000578 	.word	0x20000578
 8001ca8:	200006d0 	.word	0x200006d0

08001cac <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001cac:	b580      	push	{r7, lr}
 8001cae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */
	LED_PULSE
 8001cb0:	2201      	movs	r2, #1
 8001cb2:	2140      	movs	r1, #64	; 0x40
 8001cb4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001cb8:	f002 f806 	bl	8003cc8 <HAL_GPIO_WritePin>
 8001cbc:	2200      	movs	r2, #0
 8001cbe:	2140      	movs	r1, #64	; 0x40
 8001cc0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001cc4:	f002 f800 	bl	8003cc8 <HAL_GPIO_WritePin>
  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001cc8:	4802      	ldr	r0, [pc, #8]	; (8001cd4 <TIM3_IRQHandler+0x28>)
 8001cca:	f003 ffdf 	bl	8005c8c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001cce:	bf00      	nop
 8001cd0:	bd80      	pop	{r7, pc}
 8001cd2:	bf00      	nop
 8001cd4:	200005a8 	.word	0x200005a8

08001cd8 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8001cd8:	b580      	push	{r7, lr}
 8001cda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */
	HAL_TIM_OC_Stop(&htim1, TIM_CHANNEL_1);
 8001cdc:	2100      	movs	r1, #0
 8001cde:	480c      	ldr	r0, [pc, #48]	; (8001d10 <TIM4_IRQHandler+0x38>)
 8001ce0:	f003 fee4 	bl	8005aac <HAL_TIM_OC_Stop>
	HAL_TIM_OC_Start(&htim1, TIM_CHANNEL_1);
 8001ce4:	2100      	movs	r1, #0
 8001ce6:	480a      	ldr	r0, [pc, #40]	; (8001d10 <TIM4_IRQHandler+0x38>)
 8001ce8:	f003 fde0 	bl	80058ac <HAL_TIM_OC_Start>
	HAL_GPIO_WritePin(Z1Sel_GPIO_Port, Z1Sel_Pin, GPIO_PIN_RESET);
 8001cec:	2200      	movs	r2, #0
 8001cee:	2101      	movs	r1, #1
 8001cf0:	4808      	ldr	r0, [pc, #32]	; (8001d14 <TIM4_IRQHandler+0x3c>)
 8001cf2:	f001 ffe9 	bl	8003cc8 <HAL_GPIO_WritePin>
	haftConf = 1;
 8001cf6:	4b08      	ldr	r3, [pc, #32]	; (8001d18 <TIM4_IRQHandler+0x40>)
 8001cf8:	2201      	movs	r2, #1
 8001cfa:	801a      	strh	r2, [r3, #0]
	HAL_ADC_Start_DMA(&hadc1, (uint32_t*) adcBuffer, CONVERSION_COUNT);
 8001cfc:	22c8      	movs	r2, #200	; 0xc8
 8001cfe:	4907      	ldr	r1, [pc, #28]	; (8001d1c <TIM4_IRQHandler+0x44>)
 8001d00:	4807      	ldr	r0, [pc, #28]	; (8001d20 <TIM4_IRQHandler+0x48>)
 8001d02:	f000 fb9b 	bl	800243c <HAL_ADC_Start_DMA>
  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001d06:	4807      	ldr	r0, [pc, #28]	; (8001d24 <TIM4_IRQHandler+0x4c>)
 8001d08:	f003 ffc0 	bl	8005c8c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8001d0c:	bf00      	nop
 8001d0e:	bd80      	pop	{r7, pc}
 8001d10:	20000718 	.word	0x20000718
 8001d14:	48000400 	.word	0x48000400
 8001d18:	200005a4 	.word	0x200005a4
 8001d1c:	200002e4 	.word	0x200002e4
 8001d20:	200005f8 	.word	0x200005f8
 8001d24:	200004d8 	.word	0x200004d8

08001d28 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001d28:	b480      	push	{r7}
 8001d2a:	af00      	add	r7, sp, #0
	return 1;
 8001d2c:	2301      	movs	r3, #1
}
 8001d2e:	4618      	mov	r0, r3
 8001d30:	46bd      	mov	sp, r7
 8001d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d36:	4770      	bx	lr

08001d38 <_kill>:

int _kill(int pid, int sig)
{
 8001d38:	b580      	push	{r7, lr}
 8001d3a:	b082      	sub	sp, #8
 8001d3c:	af00      	add	r7, sp, #0
 8001d3e:	6078      	str	r0, [r7, #4]
 8001d40:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001d42:	f005 fd0f 	bl	8007764 <__errno>
 8001d46:	4603      	mov	r3, r0
 8001d48:	2216      	movs	r2, #22
 8001d4a:	601a      	str	r2, [r3, #0]
	return -1;
 8001d4c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001d50:	4618      	mov	r0, r3
 8001d52:	3708      	adds	r7, #8
 8001d54:	46bd      	mov	sp, r7
 8001d56:	bd80      	pop	{r7, pc}

08001d58 <_exit>:

void _exit (int status)
{
 8001d58:	b580      	push	{r7, lr}
 8001d5a:	b082      	sub	sp, #8
 8001d5c:	af00      	add	r7, sp, #0
 8001d5e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001d60:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001d64:	6878      	ldr	r0, [r7, #4]
 8001d66:	f7ff ffe7 	bl	8001d38 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001d6a:	e7fe      	b.n	8001d6a <_exit+0x12>

08001d6c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001d6c:	b580      	push	{r7, lr}
 8001d6e:	b086      	sub	sp, #24
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	60f8      	str	r0, [r7, #12]
 8001d74:	60b9      	str	r1, [r7, #8]
 8001d76:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d78:	2300      	movs	r3, #0
 8001d7a:	617b      	str	r3, [r7, #20]
 8001d7c:	e00a      	b.n	8001d94 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001d7e:	f3af 8000 	nop.w
 8001d82:	4601      	mov	r1, r0
 8001d84:	68bb      	ldr	r3, [r7, #8]
 8001d86:	1c5a      	adds	r2, r3, #1
 8001d88:	60ba      	str	r2, [r7, #8]
 8001d8a:	b2ca      	uxtb	r2, r1
 8001d8c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d8e:	697b      	ldr	r3, [r7, #20]
 8001d90:	3301      	adds	r3, #1
 8001d92:	617b      	str	r3, [r7, #20]
 8001d94:	697a      	ldr	r2, [r7, #20]
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	429a      	cmp	r2, r3
 8001d9a:	dbf0      	blt.n	8001d7e <_read+0x12>
	}

return len;
 8001d9c:	687b      	ldr	r3, [r7, #4]
}
 8001d9e:	4618      	mov	r0, r3
 8001da0:	3718      	adds	r7, #24
 8001da2:	46bd      	mov	sp, r7
 8001da4:	bd80      	pop	{r7, pc}

08001da6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001da6:	b580      	push	{r7, lr}
 8001da8:	b086      	sub	sp, #24
 8001daa:	af00      	add	r7, sp, #0
 8001dac:	60f8      	str	r0, [r7, #12]
 8001dae:	60b9      	str	r1, [r7, #8]
 8001db0:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001db2:	2300      	movs	r3, #0
 8001db4:	617b      	str	r3, [r7, #20]
 8001db6:	e009      	b.n	8001dcc <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001db8:	68bb      	ldr	r3, [r7, #8]
 8001dba:	1c5a      	adds	r2, r3, #1
 8001dbc:	60ba      	str	r2, [r7, #8]
 8001dbe:	781b      	ldrb	r3, [r3, #0]
 8001dc0:	4618      	mov	r0, r3
 8001dc2:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001dc6:	697b      	ldr	r3, [r7, #20]
 8001dc8:	3301      	adds	r3, #1
 8001dca:	617b      	str	r3, [r7, #20]
 8001dcc:	697a      	ldr	r2, [r7, #20]
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	429a      	cmp	r2, r3
 8001dd2:	dbf1      	blt.n	8001db8 <_write+0x12>
	}
	return len;
 8001dd4:	687b      	ldr	r3, [r7, #4]
}
 8001dd6:	4618      	mov	r0, r3
 8001dd8:	3718      	adds	r7, #24
 8001dda:	46bd      	mov	sp, r7
 8001ddc:	bd80      	pop	{r7, pc}

08001dde <_close>:

int _close(int file)
{
 8001dde:	b480      	push	{r7}
 8001de0:	b083      	sub	sp, #12
 8001de2:	af00      	add	r7, sp, #0
 8001de4:	6078      	str	r0, [r7, #4]
	return -1;
 8001de6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001dea:	4618      	mov	r0, r3
 8001dec:	370c      	adds	r7, #12
 8001dee:	46bd      	mov	sp, r7
 8001df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df4:	4770      	bx	lr

08001df6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001df6:	b480      	push	{r7}
 8001df8:	b083      	sub	sp, #12
 8001dfa:	af00      	add	r7, sp, #0
 8001dfc:	6078      	str	r0, [r7, #4]
 8001dfe:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001e00:	683b      	ldr	r3, [r7, #0]
 8001e02:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001e06:	605a      	str	r2, [r3, #4]
	return 0;
 8001e08:	2300      	movs	r3, #0
}
 8001e0a:	4618      	mov	r0, r3
 8001e0c:	370c      	adds	r7, #12
 8001e0e:	46bd      	mov	sp, r7
 8001e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e14:	4770      	bx	lr

08001e16 <_isatty>:

int _isatty(int file)
{
 8001e16:	b480      	push	{r7}
 8001e18:	b083      	sub	sp, #12
 8001e1a:	af00      	add	r7, sp, #0
 8001e1c:	6078      	str	r0, [r7, #4]
	return 1;
 8001e1e:	2301      	movs	r3, #1
}
 8001e20:	4618      	mov	r0, r3
 8001e22:	370c      	adds	r7, #12
 8001e24:	46bd      	mov	sp, r7
 8001e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e2a:	4770      	bx	lr

08001e2c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001e2c:	b480      	push	{r7}
 8001e2e:	b085      	sub	sp, #20
 8001e30:	af00      	add	r7, sp, #0
 8001e32:	60f8      	str	r0, [r7, #12]
 8001e34:	60b9      	str	r1, [r7, #8]
 8001e36:	607a      	str	r2, [r7, #4]
	return 0;
 8001e38:	2300      	movs	r3, #0
}
 8001e3a:	4618      	mov	r0, r3
 8001e3c:	3714      	adds	r7, #20
 8001e3e:	46bd      	mov	sp, r7
 8001e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e44:	4770      	bx	lr
	...

08001e48 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001e48:	b580      	push	{r7, lr}
 8001e4a:	b086      	sub	sp, #24
 8001e4c:	af00      	add	r7, sp, #0
 8001e4e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001e50:	4a14      	ldr	r2, [pc, #80]	; (8001ea4 <_sbrk+0x5c>)
 8001e52:	4b15      	ldr	r3, [pc, #84]	; (8001ea8 <_sbrk+0x60>)
 8001e54:	1ad3      	subs	r3, r2, r3
 8001e56:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001e58:	697b      	ldr	r3, [r7, #20]
 8001e5a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001e5c:	4b13      	ldr	r3, [pc, #76]	; (8001eac <_sbrk+0x64>)
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d102      	bne.n	8001e6a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001e64:	4b11      	ldr	r3, [pc, #68]	; (8001eac <_sbrk+0x64>)
 8001e66:	4a12      	ldr	r2, [pc, #72]	; (8001eb0 <_sbrk+0x68>)
 8001e68:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001e6a:	4b10      	ldr	r3, [pc, #64]	; (8001eac <_sbrk+0x64>)
 8001e6c:	681a      	ldr	r2, [r3, #0]
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	4413      	add	r3, r2
 8001e72:	693a      	ldr	r2, [r7, #16]
 8001e74:	429a      	cmp	r2, r3
 8001e76:	d207      	bcs.n	8001e88 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001e78:	f005 fc74 	bl	8007764 <__errno>
 8001e7c:	4603      	mov	r3, r0
 8001e7e:	220c      	movs	r2, #12
 8001e80:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001e82:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001e86:	e009      	b.n	8001e9c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001e88:	4b08      	ldr	r3, [pc, #32]	; (8001eac <_sbrk+0x64>)
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001e8e:	4b07      	ldr	r3, [pc, #28]	; (8001eac <_sbrk+0x64>)
 8001e90:	681a      	ldr	r2, [r3, #0]
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	4413      	add	r3, r2
 8001e96:	4a05      	ldr	r2, [pc, #20]	; (8001eac <_sbrk+0x64>)
 8001e98:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001e9a:	68fb      	ldr	r3, [r7, #12]
}
 8001e9c:	4618      	mov	r0, r3
 8001e9e:	3718      	adds	r7, #24
 8001ea0:	46bd      	mov	sp, r7
 8001ea2:	bd80      	pop	{r7, pc}
 8001ea4:	2000a000 	.word	0x2000a000
 8001ea8:	00000400 	.word	0x00000400
 8001eac:	200001fc 	.word	0x200001fc
 8001eb0:	20000810 	.word	0x20000810

08001eb4 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001eb4:	b480      	push	{r7}
 8001eb6:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001eb8:	4b06      	ldr	r3, [pc, #24]	; (8001ed4 <SystemInit+0x20>)
 8001eba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001ebe:	4a05      	ldr	r2, [pc, #20]	; (8001ed4 <SystemInit+0x20>)
 8001ec0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001ec4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001ec8:	bf00      	nop
 8001eca:	46bd      	mov	sp, r7
 8001ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed0:	4770      	bx	lr
 8001ed2:	bf00      	nop
 8001ed4:	e000ed00 	.word	0xe000ed00

08001ed8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001ed8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001f10 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8001edc:	f7ff ffea 	bl	8001eb4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001ee0:	480c      	ldr	r0, [pc, #48]	; (8001f14 <LoopForever+0x6>)
  ldr r1, =_edata
 8001ee2:	490d      	ldr	r1, [pc, #52]	; (8001f18 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001ee4:	4a0d      	ldr	r2, [pc, #52]	; (8001f1c <LoopForever+0xe>)
  movs r3, #0
 8001ee6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001ee8:	e002      	b.n	8001ef0 <LoopCopyDataInit>

08001eea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001eea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001eec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001eee:	3304      	adds	r3, #4

08001ef0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001ef0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001ef2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001ef4:	d3f9      	bcc.n	8001eea <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001ef6:	4a0a      	ldr	r2, [pc, #40]	; (8001f20 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001ef8:	4c0a      	ldr	r4, [pc, #40]	; (8001f24 <LoopForever+0x16>)
  movs r3, #0
 8001efa:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001efc:	e001      	b.n	8001f02 <LoopFillZerobss>

08001efe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001efe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001f00:	3204      	adds	r2, #4

08001f02 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001f02:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001f04:	d3fb      	bcc.n	8001efe <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001f06:	f005 fc33 	bl	8007770 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001f0a:	f7fe fed1 	bl	8000cb0 <main>

08001f0e <LoopForever>:

LoopForever:
    b LoopForever
 8001f0e:	e7fe      	b.n	8001f0e <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001f10:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 8001f14:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001f18:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 8001f1c:	0800a98c 	.word	0x0800a98c
  ldr r2, =_sbss
 8001f20:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 8001f24:	2000080c 	.word	0x2000080c

08001f28 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001f28:	e7fe      	b.n	8001f28 <ADC1_2_IRQHandler>
	...

08001f2c <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001f2c:	b580      	push	{r7, lr}
 8001f2e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001f30:	4b08      	ldr	r3, [pc, #32]	; (8001f54 <HAL_Init+0x28>)
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	4a07      	ldr	r2, [pc, #28]	; (8001f54 <HAL_Init+0x28>)
 8001f36:	f043 0310 	orr.w	r3, r3, #16
 8001f3a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001f3c:	2003      	movs	r0, #3
 8001f3e:	f001 fb17 	bl	8003570 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001f42:	2000      	movs	r0, #0
 8001f44:	f000 f808 	bl	8001f58 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001f48:	f7ff fb48 	bl	80015dc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001f4c:	2300      	movs	r3, #0
}
 8001f4e:	4618      	mov	r0, r3
 8001f50:	bd80      	pop	{r7, pc}
 8001f52:	bf00      	nop
 8001f54:	40022000 	.word	0x40022000

08001f58 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001f58:	b580      	push	{r7, lr}
 8001f5a:	b082      	sub	sp, #8
 8001f5c:	af00      	add	r7, sp, #0
 8001f5e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001f60:	4b12      	ldr	r3, [pc, #72]	; (8001fac <HAL_InitTick+0x54>)
 8001f62:	681a      	ldr	r2, [r3, #0]
 8001f64:	4b12      	ldr	r3, [pc, #72]	; (8001fb0 <HAL_InitTick+0x58>)
 8001f66:	781b      	ldrb	r3, [r3, #0]
 8001f68:	4619      	mov	r1, r3
 8001f6a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001f6e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001f72:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f76:	4618      	mov	r0, r3
 8001f78:	f001 fb33 	bl	80035e2 <HAL_SYSTICK_Config>
 8001f7c:	4603      	mov	r3, r0
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d001      	beq.n	8001f86 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001f82:	2301      	movs	r3, #1
 8001f84:	e00e      	b.n	8001fa4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	2b0f      	cmp	r3, #15
 8001f8a:	d80a      	bhi.n	8001fa2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001f8c:	2200      	movs	r2, #0
 8001f8e:	6879      	ldr	r1, [r7, #4]
 8001f90:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001f94:	f001 faf7 	bl	8003586 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001f98:	4a06      	ldr	r2, [pc, #24]	; (8001fb4 <HAL_InitTick+0x5c>)
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8001f9e:	2300      	movs	r3, #0
 8001fa0:	e000      	b.n	8001fa4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001fa2:	2301      	movs	r3, #1
}
 8001fa4:	4618      	mov	r0, r3
 8001fa6:	3708      	adds	r7, #8
 8001fa8:	46bd      	mov	sp, r7
 8001faa:	bd80      	pop	{r7, pc}
 8001fac:	20000000 	.word	0x20000000
 8001fb0:	20000008 	.word	0x20000008
 8001fb4:	20000004 	.word	0x20000004

08001fb8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001fb8:	b480      	push	{r7}
 8001fba:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001fbc:	4b06      	ldr	r3, [pc, #24]	; (8001fd8 <HAL_IncTick+0x20>)
 8001fbe:	781b      	ldrb	r3, [r3, #0]
 8001fc0:	461a      	mov	r2, r3
 8001fc2:	4b06      	ldr	r3, [pc, #24]	; (8001fdc <HAL_IncTick+0x24>)
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	4413      	add	r3, r2
 8001fc8:	4a04      	ldr	r2, [pc, #16]	; (8001fdc <HAL_IncTick+0x24>)
 8001fca:	6013      	str	r3, [r2, #0]
}
 8001fcc:	bf00      	nop
 8001fce:	46bd      	mov	sp, r7
 8001fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd4:	4770      	bx	lr
 8001fd6:	bf00      	nop
 8001fd8:	20000008 	.word	0x20000008
 8001fdc:	200007f8 	.word	0x200007f8

08001fe0 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001fe0:	b480      	push	{r7}
 8001fe2:	af00      	add	r7, sp, #0
  return uwTick;  
 8001fe4:	4b03      	ldr	r3, [pc, #12]	; (8001ff4 <HAL_GetTick+0x14>)
 8001fe6:	681b      	ldr	r3, [r3, #0]
}
 8001fe8:	4618      	mov	r0, r3
 8001fea:	46bd      	mov	sp, r7
 8001fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff0:	4770      	bx	lr
 8001ff2:	bf00      	nop
 8001ff4:	200007f8 	.word	0x200007f8

08001ff8 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001ff8:	b580      	push	{r7, lr}
 8001ffa:	b084      	sub	sp, #16
 8001ffc:	af00      	add	r7, sp, #0
 8001ffe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002000:	f7ff ffee 	bl	8001fe0 <HAL_GetTick>
 8002004:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002010:	d005      	beq.n	800201e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002012:	4b0a      	ldr	r3, [pc, #40]	; (800203c <HAL_Delay+0x44>)
 8002014:	781b      	ldrb	r3, [r3, #0]
 8002016:	461a      	mov	r2, r3
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	4413      	add	r3, r2
 800201c:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 800201e:	bf00      	nop
 8002020:	f7ff ffde 	bl	8001fe0 <HAL_GetTick>
 8002024:	4602      	mov	r2, r0
 8002026:	68bb      	ldr	r3, [r7, #8]
 8002028:	1ad3      	subs	r3, r2, r3
 800202a:	68fa      	ldr	r2, [r7, #12]
 800202c:	429a      	cmp	r2, r3
 800202e:	d8f7      	bhi.n	8002020 <HAL_Delay+0x28>
  {
  }
}
 8002030:	bf00      	nop
 8002032:	bf00      	nop
 8002034:	3710      	adds	r7, #16
 8002036:	46bd      	mov	sp, r7
 8002038:	bd80      	pop	{r7, pc}
 800203a:	bf00      	nop
 800203c:	20000008 	.word	0x20000008

08002040 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002040:	b480      	push	{r7}
 8002042:	b083      	sub	sp, #12
 8002044:	af00      	add	r7, sp, #0
 8002046:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8002048:	bf00      	nop
 800204a:	370c      	adds	r7, #12
 800204c:	46bd      	mov	sp, r7
 800204e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002052:	4770      	bx	lr

08002054 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002054:	b480      	push	{r7}
 8002056:	b083      	sub	sp, #12
 8002058:	af00      	add	r7, sp, #0
 800205a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 800205c:	bf00      	nop
 800205e:	370c      	adds	r7, #12
 8002060:	46bd      	mov	sp, r7
 8002062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002066:	4770      	bx	lr

08002068 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002068:	b480      	push	{r7}
 800206a:	b083      	sub	sp, #12
 800206c:	af00      	add	r7, sp, #0
 800206e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8002070:	bf00      	nop
 8002072:	370c      	adds	r7, #12
 8002074:	46bd      	mov	sp, r7
 8002076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800207a:	4770      	bx	lr

0800207c <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800207c:	b580      	push	{r7, lr}
 800207e:	b09a      	sub	sp, #104	; 0x68
 8002080:	af00      	add	r7, sp, #0
 8002082:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002084:	2300      	movs	r3, #0
 8002086:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 800208a:	2300      	movs	r3, #0
 800208c:	663b      	str	r3, [r7, #96]	; 0x60
  __IO uint32_t wait_loop_index = 0U;
 800208e:	2300      	movs	r3, #0
 8002090:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	2b00      	cmp	r3, #0
 8002096:	d101      	bne.n	800209c <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 8002098:	2301      	movs	r3, #1
 800209a:	e1c9      	b.n	8002430 <HAL_ADC_Init+0x3b4>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	691b      	ldr	r3, [r3, #16]
 80020a0:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020a6:	f003 0310 	and.w	r3, r3, #16
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d176      	bne.n	800219c <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d152      	bne.n	800215c <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	2200      	movs	r2, #0
 80020ba:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	2200      	movs	r2, #0
 80020c0:	64da      	str	r2, [r3, #76]	; 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	2200      	movs	r2, #0
 80020c6:	649a      	str	r2, [r3, #72]	; 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	2200      	movs	r2, #0
 80020cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80020d0:	6878      	ldr	r0, [r7, #4]
 80020d2:	f7ff faa7 	bl	8001624 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	689b      	ldr	r3, [r3, #8]
 80020dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d13b      	bne.n	800215c <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 80020e4:	6878      	ldr	r0, [r7, #4]
 80020e6:	f001 f841 	bl	800316c <ADC_Disable>
 80020ea:	4603      	mov	r3, r0
 80020ec:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020f4:	f003 0310 	and.w	r3, r3, #16
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d12f      	bne.n	800215c <HAL_ADC_Init+0xe0>
 80020fc:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8002100:	2b00      	cmp	r3, #0
 8002102:	d12b      	bne.n	800215c <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002108:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800210c:	f023 0302 	bic.w	r3, r3, #2
 8002110:	f043 0202 	orr.w	r2, r3, #2
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	641a      	str	r2, [r3, #64]	; 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	689a      	ldr	r2, [r3, #8]
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002126:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	689a      	ldr	r2, [r3, #8]
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002136:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002138:	4b86      	ldr	r3, [pc, #536]	; (8002354 <HAL_ADC_Init+0x2d8>)
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	4a86      	ldr	r2, [pc, #536]	; (8002358 <HAL_ADC_Init+0x2dc>)
 800213e:	fba2 2303 	umull	r2, r3, r2, r3
 8002142:	0c9a      	lsrs	r2, r3, #18
 8002144:	4613      	mov	r3, r2
 8002146:	009b      	lsls	r3, r3, #2
 8002148:	4413      	add	r3, r2
 800214a:	005b      	lsls	r3, r3, #1
 800214c:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800214e:	e002      	b.n	8002156 <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 8002150:	68bb      	ldr	r3, [r7, #8]
 8002152:	3b01      	subs	r3, #1
 8002154:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002156:	68bb      	ldr	r3, [r7, #8]
 8002158:	2b00      	cmp	r3, #0
 800215a:	d1f9      	bne.n	8002150 <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	689b      	ldr	r3, [r3, #8]
 8002162:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002166:	2b00      	cmp	r3, #0
 8002168:	d007      	beq.n	800217a <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	689b      	ldr	r3, [r3, #8]
 8002170:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8002174:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002178:	d110      	bne.n	800219c <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800217e:	f023 0312 	bic.w	r3, r3, #18
 8002182:	f043 0210 	orr.w	r2, r3, #16
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800218e:	f043 0201 	orr.w	r2, r3, #1
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	645a      	str	r2, [r3, #68]	; 0x44
      
      tmp_hal_status = HAL_ERROR;
 8002196:	2301      	movs	r3, #1
 8002198:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021a0:	f003 0310 	and.w	r3, r3, #16
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	f040 8136 	bne.w	8002416 <HAL_ADC_Init+0x39a>
 80021aa:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	f040 8131 	bne.w	8002416 <HAL_ADC_Init+0x39a>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	689b      	ldr	r3, [r3, #8]
 80021ba:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 80021be:	2b00      	cmp	r3, #0
 80021c0:	f040 8129 	bne.w	8002416 <HAL_ADC_Init+0x39a>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021c8:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80021cc:	f043 0202 	orr.w	r2, r3, #2
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	641a      	str	r2, [r3, #64]	; 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80021dc:	d004      	beq.n	80021e8 <HAL_ADC_Init+0x16c>
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	4a5e      	ldr	r2, [pc, #376]	; (800235c <HAL_ADC_Init+0x2e0>)
 80021e4:	4293      	cmp	r3, r2
 80021e6:	d101      	bne.n	80021ec <HAL_ADC_Init+0x170>
 80021e8:	4b5d      	ldr	r3, [pc, #372]	; (8002360 <HAL_ADC_Init+0x2e4>)
 80021ea:	e000      	b.n	80021ee <HAL_ADC_Init+0x172>
 80021ec:	4b5d      	ldr	r3, [pc, #372]	; (8002364 <HAL_ADC_Init+0x2e8>)
 80021ee:	65fb      	str	r3, [r7, #92]	; 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80021f8:	d102      	bne.n	8002200 <HAL_ADC_Init+0x184>
 80021fa:	4b58      	ldr	r3, [pc, #352]	; (800235c <HAL_ADC_Init+0x2e0>)
 80021fc:	60fb      	str	r3, [r7, #12]
 80021fe:	e01a      	b.n	8002236 <HAL_ADC_Init+0x1ba>
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	4a55      	ldr	r2, [pc, #340]	; (800235c <HAL_ADC_Init+0x2e0>)
 8002206:	4293      	cmp	r3, r2
 8002208:	d103      	bne.n	8002212 <HAL_ADC_Init+0x196>
 800220a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800220e:	60fb      	str	r3, [r7, #12]
 8002210:	e011      	b.n	8002236 <HAL_ADC_Init+0x1ba>
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	4a54      	ldr	r2, [pc, #336]	; (8002368 <HAL_ADC_Init+0x2ec>)
 8002218:	4293      	cmp	r3, r2
 800221a:	d102      	bne.n	8002222 <HAL_ADC_Init+0x1a6>
 800221c:	4b53      	ldr	r3, [pc, #332]	; (800236c <HAL_ADC_Init+0x2f0>)
 800221e:	60fb      	str	r3, [r7, #12]
 8002220:	e009      	b.n	8002236 <HAL_ADC_Init+0x1ba>
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	4a51      	ldr	r2, [pc, #324]	; (800236c <HAL_ADC_Init+0x2f0>)
 8002228:	4293      	cmp	r3, r2
 800222a:	d102      	bne.n	8002232 <HAL_ADC_Init+0x1b6>
 800222c:	4b4e      	ldr	r3, [pc, #312]	; (8002368 <HAL_ADC_Init+0x2ec>)
 800222e:	60fb      	str	r3, [r7, #12]
 8002230:	e001      	b.n	8002236 <HAL_ADC_Init+0x1ba>
 8002232:	2300      	movs	r3, #0
 8002234:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	689b      	ldr	r3, [r3, #8]
 800223c:	f003 0303 	and.w	r3, r3, #3
 8002240:	2b01      	cmp	r3, #1
 8002242:	d108      	bne.n	8002256 <HAL_ADC_Init+0x1da>
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	f003 0301 	and.w	r3, r3, #1
 800224e:	2b01      	cmp	r3, #1
 8002250:	d101      	bne.n	8002256 <HAL_ADC_Init+0x1da>
 8002252:	2301      	movs	r3, #1
 8002254:	e000      	b.n	8002258 <HAL_ADC_Init+0x1dc>
 8002256:	2300      	movs	r3, #0
 8002258:	2b00      	cmp	r3, #0
 800225a:	d11c      	bne.n	8002296 <HAL_ADC_Init+0x21a>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 800225c:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 800225e:	2b00      	cmp	r3, #0
 8002260:	d010      	beq.n	8002284 <HAL_ADC_Init+0x208>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	689b      	ldr	r3, [r3, #8]
 8002266:	f003 0303 	and.w	r3, r3, #3
 800226a:	2b01      	cmp	r3, #1
 800226c:	d107      	bne.n	800227e <HAL_ADC_Init+0x202>
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	f003 0301 	and.w	r3, r3, #1
 8002276:	2b01      	cmp	r3, #1
 8002278:	d101      	bne.n	800227e <HAL_ADC_Init+0x202>
 800227a:	2301      	movs	r3, #1
 800227c:	e000      	b.n	8002280 <HAL_ADC_Init+0x204>
 800227e:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8002280:	2b00      	cmp	r3, #0
 8002282:	d108      	bne.n	8002296 <HAL_ADC_Init+0x21a>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 8002284:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002286:	689b      	ldr	r3, [r3, #8]
 8002288:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	685b      	ldr	r3, [r3, #4]
 8002290:	431a      	orrs	r2, r3
 8002292:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002294:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	7e5b      	ldrb	r3, [r3, #25]
 800229a:	035b      	lsls	r3, r3, #13
 800229c:	687a      	ldr	r2, [r7, #4]
 800229e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80022a0:	2a01      	cmp	r2, #1
 80022a2:	d002      	beq.n	80022aa <HAL_ADC_Init+0x22e>
 80022a4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80022a8:	e000      	b.n	80022ac <HAL_ADC_Init+0x230>
 80022aa:	2200      	movs	r2, #0
 80022ac:	431a      	orrs	r2, r3
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	68db      	ldr	r3, [r3, #12]
 80022b2:	431a      	orrs	r2, r3
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	689b      	ldr	r3, [r3, #8]
 80022b8:	4313      	orrs	r3, r2
 80022ba:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80022bc:	4313      	orrs	r3, r2
 80022be:	663b      	str	r3, [r7, #96]	; 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80022c6:	2b01      	cmp	r3, #1
 80022c8:	d11b      	bne.n	8002302 <HAL_ADC_Init+0x286>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	7e5b      	ldrb	r3, [r3, #25]
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d109      	bne.n	80022e6 <HAL_ADC_Init+0x26a>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022d6:	3b01      	subs	r3, #1
 80022d8:	045a      	lsls	r2, r3, #17
 80022da:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80022dc:	4313      	orrs	r3, r2
 80022de:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80022e2:	663b      	str	r3, [r7, #96]	; 0x60
 80022e4:	e00d      	b.n	8002302 <HAL_ADC_Init+0x286>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022ea:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 80022ee:	f043 0220 	orr.w	r2, r3, #32
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022fa:	f043 0201 	orr.w	r2, r3, #1
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	645a      	str	r2, [r3, #68]	; 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002306:	2b01      	cmp	r3, #1
 8002308:	d03a      	beq.n	8002380 <HAL_ADC_Init+0x304>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	4a16      	ldr	r2, [pc, #88]	; (8002368 <HAL_ADC_Init+0x2ec>)
 8002310:	4293      	cmp	r3, r2
 8002312:	d004      	beq.n	800231e <HAL_ADC_Init+0x2a2>
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	4a14      	ldr	r2, [pc, #80]	; (800236c <HAL_ADC_Init+0x2f0>)
 800231a:	4293      	cmp	r3, r2
 800231c:	d128      	bne.n	8002370 <HAL_ADC_Init+0x2f4>
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002322:	f5b3 7f30 	cmp.w	r3, #704	; 0x2c0
 8002326:	d012      	beq.n	800234e <HAL_ADC_Init+0x2d2>
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800232c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002330:	d00a      	beq.n	8002348 <HAL_ADC_Init+0x2cc>
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002336:	f5b3 7fe0 	cmp.w	r3, #448	; 0x1c0
 800233a:	d002      	beq.n	8002342 <HAL_ADC_Init+0x2c6>
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002340:	e018      	b.n	8002374 <HAL_ADC_Init+0x2f8>
 8002342:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002346:	e015      	b.n	8002374 <HAL_ADC_Init+0x2f8>
 8002348:	f44f 7330 	mov.w	r3, #704	; 0x2c0
 800234c:	e012      	b.n	8002374 <HAL_ADC_Init+0x2f8>
 800234e:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 8002352:	e00f      	b.n	8002374 <HAL_ADC_Init+0x2f8>
 8002354:	20000000 	.word	0x20000000
 8002358:	431bde83 	.word	0x431bde83
 800235c:	50000100 	.word	0x50000100
 8002360:	50000300 	.word	0x50000300
 8002364:	50000700 	.word	0x50000700
 8002368:	50000400 	.word	0x50000400
 800236c:	50000500 	.word	0x50000500
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002374:	687a      	ldr	r2, [r7, #4]
 8002376:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8002378:	4313      	orrs	r3, r2
 800237a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800237c:	4313      	orrs	r3, r2
 800237e:	663b      	str	r3, [r7, #96]	; 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	689b      	ldr	r3, [r3, #8]
 8002386:	f003 030c 	and.w	r3, r3, #12
 800238a:	2b00      	cmp	r3, #0
 800238c:	d114      	bne.n	80023b8 <HAL_ADC_Init+0x33c>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	68db      	ldr	r3, [r3, #12]
 8002394:	687a      	ldr	r2, [r7, #4]
 8002396:	6812      	ldr	r2, [r2, #0]
 8002398:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800239c:	f023 0302 	bic.w	r3, r3, #2
 80023a0:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	7e1b      	ldrb	r3, [r3, #24]
 80023a6:	039a      	lsls	r2, r3, #14
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80023ae:	005b      	lsls	r3, r3, #1
 80023b0:	4313      	orrs	r3, r2
 80023b2:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80023b4:	4313      	orrs	r3, r2
 80023b6:	663b      	str	r3, [r7, #96]	; 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	68da      	ldr	r2, [r3, #12]
 80023be:	4b1e      	ldr	r3, [pc, #120]	; (8002438 <HAL_ADC_Init+0x3bc>)
 80023c0:	4013      	ands	r3, r2
 80023c2:	687a      	ldr	r2, [r7, #4]
 80023c4:	6812      	ldr	r2, [r2, #0]
 80023c6:	6e39      	ldr	r1, [r7, #96]	; 0x60
 80023c8:	430b      	orrs	r3, r1
 80023ca:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	691b      	ldr	r3, [r3, #16]
 80023d0:	2b01      	cmp	r3, #1
 80023d2:	d10c      	bne.n	80023ee <HAL_ADC_Init+0x372>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023da:	f023 010f 	bic.w	r1, r3, #15
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	69db      	ldr	r3, [r3, #28]
 80023e2:	1e5a      	subs	r2, r3, #1
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	430a      	orrs	r2, r1
 80023ea:	631a      	str	r2, [r3, #48]	; 0x30
 80023ec:	e007      	b.n	80023fe <HAL_ADC_Init+0x382>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	f022 020f 	bic.w	r2, r2, #15
 80023fc:	631a      	str	r2, [r3, #48]	; 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	2200      	movs	r2, #0
 8002402:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002408:	f023 0303 	bic.w	r3, r3, #3
 800240c:	f043 0201 	orr.w	r2, r3, #1
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	641a      	str	r2, [r3, #64]	; 0x40
 8002414:	e00a      	b.n	800242c <HAL_ADC_Init+0x3b0>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800241a:	f023 0312 	bic.w	r3, r3, #18
 800241e:	f043 0210 	orr.w	r2, r3, #16
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 8002426:	2301      	movs	r3, #1
 8002428:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 800242c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8002430:	4618      	mov	r0, r3
 8002432:	3768      	adds	r7, #104	; 0x68
 8002434:	46bd      	mov	sp, r7
 8002436:	bd80      	pop	{r7, pc}
 8002438:	fff0c007 	.word	0xfff0c007

0800243c <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 800243c:	b580      	push	{r7, lr}
 800243e:	b086      	sub	sp, #24
 8002440:	af00      	add	r7, sp, #0
 8002442:	60f8      	str	r0, [r7, #12]
 8002444:	60b9      	str	r1, [r7, #8]
 8002446:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002448:	2300      	movs	r3, #0
 800244a:	75fb      	strb	r3, [r7, #23]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	689b      	ldr	r3, [r3, #8]
 8002452:	f003 0304 	and.w	r3, r3, #4
 8002456:	2b00      	cmp	r3, #0
 8002458:	f040 80f7 	bne.w	800264a <HAL_ADC_Start_DMA+0x20e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002462:	2b01      	cmp	r3, #1
 8002464:	d101      	bne.n	800246a <HAL_ADC_Start_DMA+0x2e>
 8002466:	2302      	movs	r3, #2
 8002468:	e0f2      	b.n	8002650 <HAL_ADC_Start_DMA+0x214>
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	2201      	movs	r2, #1
 800246e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Verification if multimode is disabled (for devices with several ADC)   */
    /* If multimode is enabled, dedicated function multimode conversion       */
    /* start DMA must be used.                                                */
    if(ADC_COMMON_CCR_MULTI(hadc) == RESET)
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800247a:	d004      	beq.n	8002486 <HAL_ADC_Start_DMA+0x4a>
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	4a75      	ldr	r2, [pc, #468]	; (8002658 <HAL_ADC_Start_DMA+0x21c>)
 8002482:	4293      	cmp	r3, r2
 8002484:	d109      	bne.n	800249a <HAL_ADC_Start_DMA+0x5e>
 8002486:	4b75      	ldr	r3, [pc, #468]	; (800265c <HAL_ADC_Start_DMA+0x220>)
 8002488:	689b      	ldr	r3, [r3, #8]
 800248a:	f003 031f 	and.w	r3, r3, #31
 800248e:	2b00      	cmp	r3, #0
 8002490:	bf0c      	ite	eq
 8002492:	2301      	moveq	r3, #1
 8002494:	2300      	movne	r3, #0
 8002496:	b2db      	uxtb	r3, r3
 8002498:	e008      	b.n	80024ac <HAL_ADC_Start_DMA+0x70>
 800249a:	4b71      	ldr	r3, [pc, #452]	; (8002660 <HAL_ADC_Start_DMA+0x224>)
 800249c:	689b      	ldr	r3, [r3, #8]
 800249e:	f003 031f 	and.w	r3, r3, #31
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	bf0c      	ite	eq
 80024a6:	2301      	moveq	r3, #1
 80024a8:	2300      	movne	r3, #0
 80024aa:	b2db      	uxtb	r3, r3
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	f000 80c5 	beq.w	800263c <HAL_ADC_Start_DMA+0x200>
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 80024b2:	68f8      	ldr	r0, [r7, #12]
 80024b4:	f000 fdf6 	bl	80030a4 <ADC_Enable>
 80024b8:	4603      	mov	r3, r0
 80024ba:	75fb      	strb	r3, [r7, #23]
      
      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 80024bc:	7dfb      	ldrb	r3, [r7, #23]
 80024be:	2b00      	cmp	r3, #0
 80024c0:	f040 80b7 	bne.w	8002632 <HAL_ADC_Start_DMA+0x1f6>
      {
        /* Set ADC state                                                      */
        /* - Clear state bitfield related to regular group conversion results */
        /* - Set state bitfield related to regular operation                  */
        ADC_STATE_CLR_SET(hadc->State,
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024c8:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80024cc:	f023 0301 	bic.w	r3, r3, #1
 80024d0:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_REG_BUSY);
        
        /* Set group injected state (from auto-injection) and multimode state */
        /* for all cases of multimode: independent mode, multimode ADC master */
        /* or multimode ADC slave (for devices with several ADCs):            */
        if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80024e0:	d004      	beq.n	80024ec <HAL_ADC_Start_DMA+0xb0>
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	4a5c      	ldr	r2, [pc, #368]	; (8002658 <HAL_ADC_Start_DMA+0x21c>)
 80024e8:	4293      	cmp	r3, r2
 80024ea:	d106      	bne.n	80024fa <HAL_ADC_Start_DMA+0xbe>
 80024ec:	4b5b      	ldr	r3, [pc, #364]	; (800265c <HAL_ADC_Start_DMA+0x220>)
 80024ee:	689b      	ldr	r3, [r3, #8]
 80024f0:	f003 031f 	and.w	r3, r3, #31
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d010      	beq.n	800251a <HAL_ADC_Start_DMA+0xde>
 80024f8:	e005      	b.n	8002506 <HAL_ADC_Start_DMA+0xca>
 80024fa:	4b59      	ldr	r3, [pc, #356]	; (8002660 <HAL_ADC_Start_DMA+0x224>)
 80024fc:	689b      	ldr	r3, [r3, #8]
 80024fe:	f003 031f 	and.w	r3, r3, #31
 8002502:	2b00      	cmp	r3, #0
 8002504:	d009      	beq.n	800251a <HAL_ADC_Start_DMA+0xde>
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800250e:	d004      	beq.n	800251a <HAL_ADC_Start_DMA+0xde>
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	4a53      	ldr	r2, [pc, #332]	; (8002664 <HAL_ADC_Start_DMA+0x228>)
 8002516:	4293      	cmp	r3, r2
 8002518:	d115      	bne.n	8002546 <HAL_ADC_Start_DMA+0x10a>
        {
          /* Set ADC state (ADC independent or master) */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800251e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* If conversions on group regular are also triggering group injected,*/
          /* update ADC state.                                                  */
          if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	68db      	ldr	r3, [r3, #12]
 800252c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002530:	2b00      	cmp	r3, #0
 8002532:	d036      	beq.n	80025a2 <HAL_ADC_Start_DMA+0x166>
          {
            ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002538:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800253c:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	641a      	str	r2, [r3, #64]	; 0x40
          if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8002544:	e02d      	b.n	80025a2 <HAL_ADC_Start_DMA+0x166>
          }
        }
        else
        {
          /* Set ADC state (ADC slave) */
          SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800254a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* If conversions on group regular are also triggering group injected,*/
          /* update ADC state.                                                  */
          if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800255a:	d004      	beq.n	8002566 <HAL_ADC_Start_DMA+0x12a>
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	4a3d      	ldr	r2, [pc, #244]	; (8002658 <HAL_ADC_Start_DMA+0x21c>)
 8002562:	4293      	cmp	r3, r2
 8002564:	d10a      	bne.n	800257c <HAL_ADC_Start_DMA+0x140>
 8002566:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800256a:	68db      	ldr	r3, [r3, #12]
 800256c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002570:	2b00      	cmp	r3, #0
 8002572:	bf14      	ite	ne
 8002574:	2301      	movne	r3, #1
 8002576:	2300      	moveq	r3, #0
 8002578:	b2db      	uxtb	r3, r3
 800257a:	e008      	b.n	800258e <HAL_ADC_Start_DMA+0x152>
 800257c:	4b39      	ldr	r3, [pc, #228]	; (8002664 <HAL_ADC_Start_DMA+0x228>)
 800257e:	68db      	ldr	r3, [r3, #12]
 8002580:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002584:	2b00      	cmp	r3, #0
 8002586:	bf14      	ite	ne
 8002588:	2301      	movne	r3, #1
 800258a:	2300      	moveq	r3, #0
 800258c:	b2db      	uxtb	r3, r3
 800258e:	2b00      	cmp	r3, #0
 8002590:	d007      	beq.n	80025a2 <HAL_ADC_Start_DMA+0x166>
          {
            ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002596:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800259a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	641a      	str	r2, [r3, #64]	; 0x40
          }
        }
        
        /* State machine update: Check if an injected conversion is ongoing */
        if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025a6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80025aa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80025ae:	d106      	bne.n	80025be <HAL_ADC_Start_DMA+0x182>
        {
          /* Reset ADC error code fields related to conversions on group regular*/
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025b4:	f023 0206 	bic.w	r2, r3, #6
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	645a      	str	r2, [r3, #68]	; 0x44
 80025bc:	e002      	b.n	80025c4 <HAL_ADC_Start_DMA+0x188>
        }
        else
        {
          /* Reset ADC all error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	2200      	movs	r2, #0
 80025c2:	645a      	str	r2, [r3, #68]	; 0x44
        }
        
        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	2200      	movs	r2, #0
 80025c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        
        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025d0:	4a25      	ldr	r2, [pc, #148]	; (8002668 <HAL_ADC_Start_DMA+0x22c>)
 80025d2:	629a      	str	r2, [r3, #40]	; 0x28

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025d8:	4a24      	ldr	r2, [pc, #144]	; (800266c <HAL_ADC_Start_DMA+0x230>)
 80025da:	62da      	str	r2, [r3, #44]	; 0x2c
        
        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025e0:	4a23      	ldr	r2, [pc, #140]	; (8002670 <HAL_ADC_Start_DMA+0x234>)
 80025e2:	631a      	str	r2, [r3, #48]	; 0x30
        /* start (in case of SW start):                                       */
        
        /* Clear regular group conversion flag and overrun flag */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	221c      	movs	r2, #28
 80025ea:	601a      	str	r2, [r3, #0]
        
        /* Enable ADC overrun interrupt */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	685a      	ldr	r2, [r3, #4]
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	f042 0210 	orr.w	r2, r2, #16
 80025fa:	605a      	str	r2, [r3, #4]
        
        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	68da      	ldr	r2, [r3, #12]
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	f042 0201 	orr.w	r2, r2, #1
 800260a:	60da      	str	r2, [r3, #12]
        
        /* Start the DMA channel */
        HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	3340      	adds	r3, #64	; 0x40
 8002616:	4619      	mov	r1, r3
 8002618:	68ba      	ldr	r2, [r7, #8]
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	f001 f834 	bl	8003688 <HAL_DMA_Start_IT>
                 
        /* Enable conversion of regular group.                                */
        /* If software start has been selected, conversion starts immediately.*/
        /* If external trigger has been selected, conversion will start at    */
        /* next trigger event.                                                */
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	689a      	ldr	r2, [r3, #8]
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	f042 0204 	orr.w	r2, r2, #4
 800262e:	609a      	str	r2, [r3, #8]
 8002630:	e00d      	b.n	800264e <HAL_ADC_Start_DMA+0x212>
        
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	2200      	movs	r2, #0
 8002636:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800263a:	e008      	b.n	800264e <HAL_ADC_Start_DMA+0x212>
      }
    }
    else
    {
      tmp_hal_status = HAL_ERROR;
 800263c:	2301      	movs	r3, #1
 800263e:	75fb      	strb	r3, [r7, #23]
      
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	2200      	movs	r2, #0
 8002644:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8002648:	e001      	b.n	800264e <HAL_ADC_Start_DMA+0x212>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800264a:	2302      	movs	r3, #2
 800264c:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 800264e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002650:	4618      	mov	r0, r3
 8002652:	3718      	adds	r7, #24
 8002654:	46bd      	mov	sp, r7
 8002656:	bd80      	pop	{r7, pc}
 8002658:	50000100 	.word	0x50000100
 800265c:	50000300 	.word	0x50000300
 8002660:	50000700 	.word	0x50000700
 8002664:	50000400 	.word	0x50000400
 8002668:	08002fd9 	.word	0x08002fd9
 800266c:	08003053 	.word	0x08003053
 8002670:	0800306f 	.word	0x0800306f

08002674 <HAL_ADC_Stop_DMA>:
  *         dedicated MultimodeStop function.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef* hadc)
{  
 8002674:	b580      	push	{r7, lr}
 8002676:	b084      	sub	sp, #16
 8002678:	af00      	add	r7, sp, #0
 800267a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800267c:	2300      	movs	r3, #0
 800267e:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002686:	2b01      	cmp	r3, #1
 8002688:	d101      	bne.n	800268e <HAL_ADC_Stop_DMA+0x1a>
 800268a:	2302      	movs	r3, #2
 800268c:	e050      	b.n	8002730 <HAL_ADC_Stop_DMA+0xbc>
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	2201      	movs	r2, #1
 8002692:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* 1. Stop potential conversion on going, on regular and injected groups */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 8002696:	216c      	movs	r1, #108	; 0x6c
 8002698:	6878      	ldr	r0, [r7, #4]
 800269a:	f000 fdcd 	bl	8003238 <ADC_ConversionStop>
 800269e:	4603      	mov	r3, r0
 80026a0:	73fb      	strb	r3, [r7, #15]
  
  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 80026a2:	7bfb      	ldrb	r3, [r7, #15]
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d13e      	bne.n	8002726 <HAL_ADC_Stop_DMA+0xb2>
  {
    /* Disable ADC DMA (ADC DMA configuration ADC_CFGR_DMACFG is kept) */
    CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	68da      	ldr	r2, [r3, #12]
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	f022 0201 	bic.w	r2, r2, #1
 80026b6:	60da      	str	r2, [r3, #12]
    
    /* Disable the DMA channel (in case of DMA in circular mode or stop while */
    /* while DMA transfer is on going)                                        */
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026bc:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80026c0:	2b02      	cmp	r3, #2
 80026c2:	d10f      	bne.n	80026e4 <HAL_ADC_Stop_DMA+0x70>
    {
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);   
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026c8:	4618      	mov	r0, r3
 80026ca:	f001 f83c 	bl	8003746 <HAL_DMA_Abort>
 80026ce:	4603      	mov	r3, r0
 80026d0:	73fb      	strb	r3, [r7, #15]
      
      /* Check if DMA channel effectively disabled */
      if (tmp_hal_status != HAL_OK)
 80026d2:	7bfb      	ldrb	r3, [r7, #15]
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d005      	beq.n	80026e4 <HAL_ADC_Stop_DMA+0x70>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);     
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026dc:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }

    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	685a      	ldr	r2, [r3, #4]
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	f022 0210 	bic.w	r2, r2, #16
 80026f2:	605a      	str	r2, [r3, #4]
    
    /* 2. Disable the ADC peripheral */
    /* Update "tmp_hal_status" only if DMA channel disabling passed,          */
    /* to retain a potential failing status.                                  */
    if (tmp_hal_status == HAL_OK)
 80026f4:	7bfb      	ldrb	r3, [r7, #15]
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d105      	bne.n	8002706 <HAL_ADC_Stop_DMA+0x92>
    {
      tmp_hal_status = ADC_Disable(hadc);
 80026fa:	6878      	ldr	r0, [r7, #4]
 80026fc:	f000 fd36 	bl	800316c <ADC_Disable>
 8002700:	4603      	mov	r3, r0
 8002702:	73fb      	strb	r3, [r7, #15]
 8002704:	e002      	b.n	800270c <HAL_ADC_Stop_DMA+0x98>
    }
    else
    {
      ADC_Disable(hadc);
 8002706:	6878      	ldr	r0, [r7, #4]
 8002708:	f000 fd30 	bl	800316c <ADC_Disable>
    }
    
    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 800270c:	7bfb      	ldrb	r3, [r7, #15]
 800270e:	2b00      	cmp	r3, #0
 8002710:	d109      	bne.n	8002726 <HAL_ADC_Stop_DMA+0xb2>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002716:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800271a:	f023 0301 	bic.w	r3, r3, #1
 800271e:	f043 0201 	orr.w	r2, r3, #1
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	2200      	movs	r2, #0
 800272a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 800272e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002730:	4618      	mov	r0, r3
 8002732:	3710      	adds	r7, #16
 8002734:	46bd      	mov	sp, r7
 8002736:	bd80      	pop	{r7, pc}

08002738 <HAL_ADCEx_Calibration_Start>:
  *            @arg ADC_SINGLE_ENDED: Channel in mode input single ended
  *            @arg ADC_DIFFERENTIAL_ENDED: Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc, uint32_t SingleDiff)
{
 8002738:	b580      	push	{r7, lr}
 800273a:	b084      	sub	sp, #16
 800273c:	af00      	add	r7, sp, #0
 800273e:	6078      	str	r0, [r7, #4]
 8002740:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002742:	2300      	movs	r3, #0
 8002744:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800274c:	2b01      	cmp	r3, #1
 800274e:	d101      	bne.n	8002754 <HAL_ADCEx_Calibration_Start+0x1c>
 8002750:	2302      	movs	r3, #2
 8002752:	e05f      	b.n	8002814 <HAL_ADCEx_Calibration_Start+0xdc>
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	2201      	movs	r2, #1
 8002758:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
   
  /* Calibration prerequisite: ADC must be disabled. */
   
  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 800275c:	6878      	ldr	r0, [r7, #4]
 800275e:	f000 fd05 	bl	800316c <ADC_Disable>
 8002762:	4603      	mov	r3, r0
 8002764:	73fb      	strb	r3, [r7, #15]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8002766:	7bfb      	ldrb	r3, [r7, #15]
 8002768:	2b00      	cmp	r3, #0
 800276a:	d14e      	bne.n	800280a <HAL_ADCEx_Calibration_Start+0xd2>
  {
    /* Change ADC state */
    hadc->State = HAL_ADC_STATE_READY;
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	2201      	movs	r2, #1
 8002770:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Select calibration mode single ended or differential ended */
    hadc->Instance->CR &= (~ADC_CR_ADCALDIF);
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	689a      	ldr	r2, [r3, #8]
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	f022 4280 	bic.w	r2, r2, #1073741824	; 0x40000000
 8002780:	609a      	str	r2, [r3, #8]
    if (SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002782:	683b      	ldr	r3, [r7, #0]
 8002784:	2b01      	cmp	r3, #1
 8002786:	d107      	bne.n	8002798 <HAL_ADCEx_Calibration_Start+0x60>
    {
      hadc->Instance->CR |= ADC_CR_ADCALDIF;
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	689a      	ldr	r2, [r3, #8]
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002796:	609a      	str	r2, [r3, #8]
    }

    /* Start ADC calibration */
    hadc->Instance->CR |= ADC_CR_ADCAL;
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	689a      	ldr	r2, [r3, #8]
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80027a6:	609a      	str	r2, [r3, #8]

    tickstart = HAL_GetTick();  
 80027a8:	f7ff fc1a 	bl	8001fe0 <HAL_GetTick>
 80027ac:	60b8      	str	r0, [r7, #8]

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 80027ae:	e01c      	b.n	80027ea <HAL_ADCEx_Calibration_Start+0xb2>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 80027b0:	f7ff fc16 	bl	8001fe0 <HAL_GetTick>
 80027b4:	4602      	mov	r2, r0
 80027b6:	68bb      	ldr	r3, [r7, #8]
 80027b8:	1ad3      	subs	r3, r2, r3
 80027ba:	2b0a      	cmp	r3, #10
 80027bc:	d915      	bls.n	80027ea <HAL_ADCEx_Calibration_Start+0xb2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	689b      	ldr	r3, [r3, #8]
 80027c4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80027c8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80027cc:	d10d      	bne.n	80027ea <HAL_ADCEx_Calibration_Start+0xb2>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027d2:	f023 0312 	bic.w	r3, r3, #18
 80027d6:	f043 0210 	orr.w	r2, r3, #16
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	641a      	str	r2, [r3, #64]	; 0x40
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	2200      	movs	r2, #0
 80027e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80027e6:	2301      	movs	r3, #1
 80027e8:	e014      	b.n	8002814 <HAL_ADCEx_Calibration_Start+0xdc>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	689b      	ldr	r3, [r3, #8]
 80027f0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80027f4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80027f8:	d0da      	beq.n	80027b0 <HAL_ADCEx_Calibration_Start+0x78>
        }
      }
    }
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027fe:	f023 0303 	bic.w	r3, r3, #3
 8002802:	f043 0201 	orr.w	r2, r3, #1
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	2200      	movs	r2, #0
 800280e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8002812:	7bfb      	ldrb	r3, [r7, #15]
}
 8002814:	4618      	mov	r0, r3
 8002816:	3710      	adds	r7, #16
 8002818:	46bd      	mov	sp, r7
 800281a:	bd80      	pop	{r7, pc}

0800281c <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800281c:	b480      	push	{r7}
 800281e:	b09b      	sub	sp, #108	; 0x6c
 8002820:	af00      	add	r7, sp, #0
 8002822:	6078      	str	r0, [r7, #4]
 8002824:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002826:	2300      	movs	r3, #0
 8002828:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 800282c:	2300      	movs	r3, #0
 800282e:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002836:	2b01      	cmp	r3, #1
 8002838:	d101      	bne.n	800283e <HAL_ADC_ConfigChannel+0x22>
 800283a:	2302      	movs	r3, #2
 800283c:	e2cb      	b.n	8002dd6 <HAL_ADC_ConfigChannel+0x5ba>
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	2201      	movs	r2, #1
 8002842:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	689b      	ldr	r3, [r3, #8]
 800284c:	f003 0304 	and.w	r3, r3, #4
 8002850:	2b00      	cmp	r3, #0
 8002852:	f040 82af 	bne.w	8002db4 <HAL_ADC_ConfigChannel+0x598>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 8002856:	683b      	ldr	r3, [r7, #0]
 8002858:	685b      	ldr	r3, [r3, #4]
 800285a:	2b04      	cmp	r3, #4
 800285c:	d81c      	bhi.n	8002898 <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002864:	683b      	ldr	r3, [r7, #0]
 8002866:	685a      	ldr	r2, [r3, #4]
 8002868:	4613      	mov	r3, r2
 800286a:	005b      	lsls	r3, r3, #1
 800286c:	4413      	add	r3, r2
 800286e:	005b      	lsls	r3, r3, #1
 8002870:	461a      	mov	r2, r3
 8002872:	231f      	movs	r3, #31
 8002874:	4093      	lsls	r3, r2
 8002876:	43db      	mvns	r3, r3
 8002878:	4019      	ands	r1, r3
 800287a:	683b      	ldr	r3, [r7, #0]
 800287c:	6818      	ldr	r0, [r3, #0]
 800287e:	683b      	ldr	r3, [r7, #0]
 8002880:	685a      	ldr	r2, [r3, #4]
 8002882:	4613      	mov	r3, r2
 8002884:	005b      	lsls	r3, r3, #1
 8002886:	4413      	add	r3, r2
 8002888:	005b      	lsls	r3, r3, #1
 800288a:	fa00 f203 	lsl.w	r2, r0, r3
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	430a      	orrs	r2, r1
 8002894:	631a      	str	r2, [r3, #48]	; 0x30
 8002896:	e063      	b.n	8002960 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 8002898:	683b      	ldr	r3, [r7, #0]
 800289a:	685b      	ldr	r3, [r3, #4]
 800289c:	2b09      	cmp	r3, #9
 800289e:	d81e      	bhi.n	80028de <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80028a6:	683b      	ldr	r3, [r7, #0]
 80028a8:	685a      	ldr	r2, [r3, #4]
 80028aa:	4613      	mov	r3, r2
 80028ac:	005b      	lsls	r3, r3, #1
 80028ae:	4413      	add	r3, r2
 80028b0:	005b      	lsls	r3, r3, #1
 80028b2:	3b1e      	subs	r3, #30
 80028b4:	221f      	movs	r2, #31
 80028b6:	fa02 f303 	lsl.w	r3, r2, r3
 80028ba:	43db      	mvns	r3, r3
 80028bc:	4019      	ands	r1, r3
 80028be:	683b      	ldr	r3, [r7, #0]
 80028c0:	6818      	ldr	r0, [r3, #0]
 80028c2:	683b      	ldr	r3, [r7, #0]
 80028c4:	685a      	ldr	r2, [r3, #4]
 80028c6:	4613      	mov	r3, r2
 80028c8:	005b      	lsls	r3, r3, #1
 80028ca:	4413      	add	r3, r2
 80028cc:	005b      	lsls	r3, r3, #1
 80028ce:	3b1e      	subs	r3, #30
 80028d0:	fa00 f203 	lsl.w	r2, r0, r3
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	430a      	orrs	r2, r1
 80028da:	635a      	str	r2, [r3, #52]	; 0x34
 80028dc:	e040      	b.n	8002960 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 80028de:	683b      	ldr	r3, [r7, #0]
 80028e0:	685b      	ldr	r3, [r3, #4]
 80028e2:	2b0e      	cmp	r3, #14
 80028e4:	d81e      	bhi.n	8002924 <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	6b99      	ldr	r1, [r3, #56]	; 0x38
 80028ec:	683b      	ldr	r3, [r7, #0]
 80028ee:	685a      	ldr	r2, [r3, #4]
 80028f0:	4613      	mov	r3, r2
 80028f2:	005b      	lsls	r3, r3, #1
 80028f4:	4413      	add	r3, r2
 80028f6:	005b      	lsls	r3, r3, #1
 80028f8:	3b3c      	subs	r3, #60	; 0x3c
 80028fa:	221f      	movs	r2, #31
 80028fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002900:	43db      	mvns	r3, r3
 8002902:	4019      	ands	r1, r3
 8002904:	683b      	ldr	r3, [r7, #0]
 8002906:	6818      	ldr	r0, [r3, #0]
 8002908:	683b      	ldr	r3, [r7, #0]
 800290a:	685a      	ldr	r2, [r3, #4]
 800290c:	4613      	mov	r3, r2
 800290e:	005b      	lsls	r3, r3, #1
 8002910:	4413      	add	r3, r2
 8002912:	005b      	lsls	r3, r3, #1
 8002914:	3b3c      	subs	r3, #60	; 0x3c
 8002916:	fa00 f203 	lsl.w	r2, r0, r3
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	430a      	orrs	r2, r1
 8002920:	639a      	str	r2, [r3, #56]	; 0x38
 8002922:	e01d      	b.n	8002960 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 800292a:	683b      	ldr	r3, [r7, #0]
 800292c:	685a      	ldr	r2, [r3, #4]
 800292e:	4613      	mov	r3, r2
 8002930:	005b      	lsls	r3, r3, #1
 8002932:	4413      	add	r3, r2
 8002934:	005b      	lsls	r3, r3, #1
 8002936:	3b5a      	subs	r3, #90	; 0x5a
 8002938:	221f      	movs	r2, #31
 800293a:	fa02 f303 	lsl.w	r3, r2, r3
 800293e:	43db      	mvns	r3, r3
 8002940:	4019      	ands	r1, r3
 8002942:	683b      	ldr	r3, [r7, #0]
 8002944:	6818      	ldr	r0, [r3, #0]
 8002946:	683b      	ldr	r3, [r7, #0]
 8002948:	685a      	ldr	r2, [r3, #4]
 800294a:	4613      	mov	r3, r2
 800294c:	005b      	lsls	r3, r3, #1
 800294e:	4413      	add	r3, r2
 8002950:	005b      	lsls	r3, r3, #1
 8002952:	3b5a      	subs	r3, #90	; 0x5a
 8002954:	fa00 f203 	lsl.w	r2, r0, r3
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	430a      	orrs	r2, r1
 800295e:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	689b      	ldr	r3, [r3, #8]
 8002966:	f003 030c 	and.w	r3, r3, #12
 800296a:	2b00      	cmp	r3, #0
 800296c:	f040 80e5 	bne.w	8002b3a <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 8002970:	683b      	ldr	r3, [r7, #0]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	2b09      	cmp	r3, #9
 8002976:	d91c      	bls.n	80029b2 <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	6999      	ldr	r1, [r3, #24]
 800297e:	683b      	ldr	r3, [r7, #0]
 8002980:	681a      	ldr	r2, [r3, #0]
 8002982:	4613      	mov	r3, r2
 8002984:	005b      	lsls	r3, r3, #1
 8002986:	4413      	add	r3, r2
 8002988:	3b1e      	subs	r3, #30
 800298a:	2207      	movs	r2, #7
 800298c:	fa02 f303 	lsl.w	r3, r2, r3
 8002990:	43db      	mvns	r3, r3
 8002992:	4019      	ands	r1, r3
 8002994:	683b      	ldr	r3, [r7, #0]
 8002996:	6898      	ldr	r0, [r3, #8]
 8002998:	683b      	ldr	r3, [r7, #0]
 800299a:	681a      	ldr	r2, [r3, #0]
 800299c:	4613      	mov	r3, r2
 800299e:	005b      	lsls	r3, r3, #1
 80029a0:	4413      	add	r3, r2
 80029a2:	3b1e      	subs	r3, #30
 80029a4:	fa00 f203 	lsl.w	r2, r0, r3
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	430a      	orrs	r2, r1
 80029ae:	619a      	str	r2, [r3, #24]
 80029b0:	e019      	b.n	80029e6 <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	6959      	ldr	r1, [r3, #20]
 80029b8:	683b      	ldr	r3, [r7, #0]
 80029ba:	681a      	ldr	r2, [r3, #0]
 80029bc:	4613      	mov	r3, r2
 80029be:	005b      	lsls	r3, r3, #1
 80029c0:	4413      	add	r3, r2
 80029c2:	2207      	movs	r2, #7
 80029c4:	fa02 f303 	lsl.w	r3, r2, r3
 80029c8:	43db      	mvns	r3, r3
 80029ca:	4019      	ands	r1, r3
 80029cc:	683b      	ldr	r3, [r7, #0]
 80029ce:	6898      	ldr	r0, [r3, #8]
 80029d0:	683b      	ldr	r3, [r7, #0]
 80029d2:	681a      	ldr	r2, [r3, #0]
 80029d4:	4613      	mov	r3, r2
 80029d6:	005b      	lsls	r3, r3, #1
 80029d8:	4413      	add	r3, r2
 80029da:	fa00 f203 	lsl.w	r2, r0, r3
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	430a      	orrs	r2, r1
 80029e4:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 80029e6:	683b      	ldr	r3, [r7, #0]
 80029e8:	695a      	ldr	r2, [r3, #20]
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	68db      	ldr	r3, [r3, #12]
 80029f0:	08db      	lsrs	r3, r3, #3
 80029f2:	f003 0303 	and.w	r3, r3, #3
 80029f6:	005b      	lsls	r3, r3, #1
 80029f8:	fa02 f303 	lsl.w	r3, r2, r3
 80029fc:	663b      	str	r3, [r7, #96]	; 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 80029fe:	683b      	ldr	r3, [r7, #0]
 8002a00:	691b      	ldr	r3, [r3, #16]
 8002a02:	3b01      	subs	r3, #1
 8002a04:	2b03      	cmp	r3, #3
 8002a06:	d84f      	bhi.n	8002aa8 <HAL_ADC_ConfigChannel+0x28c>
 8002a08:	a201      	add	r2, pc, #4	; (adr r2, 8002a10 <HAL_ADC_ConfigChannel+0x1f4>)
 8002a0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a0e:	bf00      	nop
 8002a10:	08002a21 	.word	0x08002a21
 8002a14:	08002a43 	.word	0x08002a43
 8002a18:	08002a65 	.word	0x08002a65
 8002a1c:	08002a87 	.word	0x08002a87
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002a26:	4b9f      	ldr	r3, [pc, #636]	; (8002ca4 <HAL_ADC_ConfigChannel+0x488>)
 8002a28:	4013      	ands	r3, r2
 8002a2a:	683a      	ldr	r2, [r7, #0]
 8002a2c:	6812      	ldr	r2, [r2, #0]
 8002a2e:	0691      	lsls	r1, r2, #26
 8002a30:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002a32:	430a      	orrs	r2, r1
 8002a34:	431a      	orrs	r2, r3
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8002a3e:	661a      	str	r2, [r3, #96]	; 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8002a40:	e07e      	b.n	8002b40 <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8002a48:	4b96      	ldr	r3, [pc, #600]	; (8002ca4 <HAL_ADC_ConfigChannel+0x488>)
 8002a4a:	4013      	ands	r3, r2
 8002a4c:	683a      	ldr	r2, [r7, #0]
 8002a4e:	6812      	ldr	r2, [r2, #0]
 8002a50:	0691      	lsls	r1, r2, #26
 8002a52:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002a54:	430a      	orrs	r2, r1
 8002a56:	431a      	orrs	r2, r3
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8002a60:	665a      	str	r2, [r3, #100]	; 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8002a62:	e06d      	b.n	8002b40 <HAL_ADC_ConfigChannel+0x324>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8002a6a:	4b8e      	ldr	r3, [pc, #568]	; (8002ca4 <HAL_ADC_ConfigChannel+0x488>)
 8002a6c:	4013      	ands	r3, r2
 8002a6e:	683a      	ldr	r2, [r7, #0]
 8002a70:	6812      	ldr	r2, [r2, #0]
 8002a72:	0691      	lsls	r1, r2, #26
 8002a74:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002a76:	430a      	orrs	r2, r1
 8002a78:	431a      	orrs	r2, r3
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8002a82:	669a      	str	r2, [r3, #104]	; 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8002a84:	e05c      	b.n	8002b40 <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8002a8c:	4b85      	ldr	r3, [pc, #532]	; (8002ca4 <HAL_ADC_ConfigChannel+0x488>)
 8002a8e:	4013      	ands	r3, r2
 8002a90:	683a      	ldr	r2, [r7, #0]
 8002a92:	6812      	ldr	r2, [r2, #0]
 8002a94:	0691      	lsls	r1, r2, #26
 8002a96:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002a98:	430a      	orrs	r2, r1
 8002a9a:	431a      	orrs	r2, r3
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8002aa4:	66da      	str	r2, [r3, #108]	; 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8002aa6:	e04b      	b.n	8002b40 <HAL_ADC_ConfigChannel+0x324>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002aae:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002ab2:	683b      	ldr	r3, [r7, #0]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	069b      	lsls	r3, r3, #26
 8002ab8:	429a      	cmp	r2, r3
 8002aba:	d107      	bne.n	8002acc <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002aca:	661a      	str	r2, [r3, #96]	; 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002ad2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002ad6:	683b      	ldr	r3, [r7, #0]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	069b      	lsls	r3, r3, #26
 8002adc:	429a      	cmp	r2, r3
 8002ade:	d107      	bne.n	8002af0 <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002aee:	665a      	str	r2, [r3, #100]	; 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002af6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002afa:	683b      	ldr	r3, [r7, #0]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	069b      	lsls	r3, r3, #26
 8002b00:	429a      	cmp	r2, r3
 8002b02:	d107      	bne.n	8002b14 <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002b12:	669a      	str	r2, [r3, #104]	; 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002b1a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002b1e:	683b      	ldr	r3, [r7, #0]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	069b      	lsls	r3, r3, #26
 8002b24:	429a      	cmp	r2, r3
 8002b26:	d10a      	bne.n	8002b3e <HAL_ADC_ConfigChannel+0x322>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002b36:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      break;
 8002b38:	e001      	b.n	8002b3e <HAL_ADC_ConfigChannel+0x322>
    }

  }
 8002b3a:	bf00      	nop
 8002b3c:	e000      	b.n	8002b40 <HAL_ADC_ConfigChannel+0x324>
      break;
 8002b3e:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	689b      	ldr	r3, [r3, #8]
 8002b46:	f003 0303 	and.w	r3, r3, #3
 8002b4a:	2b01      	cmp	r3, #1
 8002b4c:	d108      	bne.n	8002b60 <HAL_ADC_ConfigChannel+0x344>
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	f003 0301 	and.w	r3, r3, #1
 8002b58:	2b01      	cmp	r3, #1
 8002b5a:	d101      	bne.n	8002b60 <HAL_ADC_ConfigChannel+0x344>
 8002b5c:	2301      	movs	r3, #1
 8002b5e:	e000      	b.n	8002b62 <HAL_ADC_ConfigChannel+0x346>
 8002b60:	2300      	movs	r3, #0
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	f040 8131 	bne.w	8002dca <HAL_ADC_ConfigChannel+0x5ae>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8002b68:	683b      	ldr	r3, [r7, #0]
 8002b6a:	68db      	ldr	r3, [r3, #12]
 8002b6c:	2b01      	cmp	r3, #1
 8002b6e:	d00f      	beq.n	8002b90 <HAL_ADC_ConfigChannel+0x374>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8002b78:	683b      	ldr	r3, [r7, #0]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	2201      	movs	r2, #1
 8002b7e:	fa02 f303 	lsl.w	r3, r2, r3
 8002b82:	43da      	mvns	r2, r3
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	400a      	ands	r2, r1
 8002b8a:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 8002b8e:	e049      	b.n	8002c24 <HAL_ADC_ConfigChannel+0x408>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8002b98:	683b      	ldr	r3, [r7, #0]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	2201      	movs	r2, #1
 8002b9e:	409a      	lsls	r2, r3
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	430a      	orrs	r2, r1
 8002ba6:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 8002baa:	683b      	ldr	r3, [r7, #0]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	2b09      	cmp	r3, #9
 8002bb0:	d91c      	bls.n	8002bec <HAL_ADC_ConfigChannel+0x3d0>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	6999      	ldr	r1, [r3, #24]
 8002bb8:	683b      	ldr	r3, [r7, #0]
 8002bba:	681a      	ldr	r2, [r3, #0]
 8002bbc:	4613      	mov	r3, r2
 8002bbe:	005b      	lsls	r3, r3, #1
 8002bc0:	4413      	add	r3, r2
 8002bc2:	3b1b      	subs	r3, #27
 8002bc4:	2207      	movs	r2, #7
 8002bc6:	fa02 f303 	lsl.w	r3, r2, r3
 8002bca:	43db      	mvns	r3, r3
 8002bcc:	4019      	ands	r1, r3
 8002bce:	683b      	ldr	r3, [r7, #0]
 8002bd0:	6898      	ldr	r0, [r3, #8]
 8002bd2:	683b      	ldr	r3, [r7, #0]
 8002bd4:	681a      	ldr	r2, [r3, #0]
 8002bd6:	4613      	mov	r3, r2
 8002bd8:	005b      	lsls	r3, r3, #1
 8002bda:	4413      	add	r3, r2
 8002bdc:	3b1b      	subs	r3, #27
 8002bde:	fa00 f203 	lsl.w	r2, r0, r3
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	430a      	orrs	r2, r1
 8002be8:	619a      	str	r2, [r3, #24]
 8002bea:	e01b      	b.n	8002c24 <HAL_ADC_ConfigChannel+0x408>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	6959      	ldr	r1, [r3, #20]
 8002bf2:	683b      	ldr	r3, [r7, #0]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	1c5a      	adds	r2, r3, #1
 8002bf8:	4613      	mov	r3, r2
 8002bfa:	005b      	lsls	r3, r3, #1
 8002bfc:	4413      	add	r3, r2
 8002bfe:	2207      	movs	r2, #7
 8002c00:	fa02 f303 	lsl.w	r3, r2, r3
 8002c04:	43db      	mvns	r3, r3
 8002c06:	4019      	ands	r1, r3
 8002c08:	683b      	ldr	r3, [r7, #0]
 8002c0a:	6898      	ldr	r0, [r3, #8]
 8002c0c:	683b      	ldr	r3, [r7, #0]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	1c5a      	adds	r2, r3, #1
 8002c12:	4613      	mov	r3, r2
 8002c14:	005b      	lsls	r3, r3, #1
 8002c16:	4413      	add	r3, r2
 8002c18:	fa00 f203 	lsl.w	r2, r0, r3
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	430a      	orrs	r2, r1
 8002c22:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002c2c:	d004      	beq.n	8002c38 <HAL_ADC_ConfigChannel+0x41c>
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	4a1d      	ldr	r2, [pc, #116]	; (8002ca8 <HAL_ADC_ConfigChannel+0x48c>)
 8002c34:	4293      	cmp	r3, r2
 8002c36:	d101      	bne.n	8002c3c <HAL_ADC_ConfigChannel+0x420>
 8002c38:	4b1c      	ldr	r3, [pc, #112]	; (8002cac <HAL_ADC_ConfigChannel+0x490>)
 8002c3a:	e000      	b.n	8002c3e <HAL_ADC_ConfigChannel+0x422>
 8002c3c:	4b1c      	ldr	r3, [pc, #112]	; (8002cb0 <HAL_ADC_ConfigChannel+0x494>)
 8002c3e:	65fb      	str	r3, [r7, #92]	; 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8002c40:	683b      	ldr	r3, [r7, #0]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	2b10      	cmp	r3, #16
 8002c46:	d105      	bne.n	8002c54 <HAL_ADC_ConfigChannel+0x438>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8002c48:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002c4a:	689b      	ldr	r3, [r3, #8]
 8002c4c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d015      	beq.n	8002c80 <HAL_ADC_ConfigChannel+0x464>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8002c54:	683b      	ldr	r3, [r7, #0]
 8002c56:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8002c58:	2b11      	cmp	r3, #17
 8002c5a:	d105      	bne.n	8002c68 <HAL_ADC_ConfigChannel+0x44c>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8002c5c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002c5e:	689b      	ldr	r3, [r3, #8]
 8002c60:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d00b      	beq.n	8002c80 <HAL_ADC_ConfigChannel+0x464>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8002c68:	683b      	ldr	r3, [r7, #0]
 8002c6a:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8002c6c:	2b12      	cmp	r3, #18
 8002c6e:	f040 80ac 	bne.w	8002dca <HAL_ADC_ConfigChannel+0x5ae>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 8002c72:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002c74:	689b      	ldr	r3, [r3, #8]
 8002c76:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	f040 80a5 	bne.w	8002dca <HAL_ADC_ConfigChannel+0x5ae>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002c88:	d102      	bne.n	8002c90 <HAL_ADC_ConfigChannel+0x474>
 8002c8a:	4b07      	ldr	r3, [pc, #28]	; (8002ca8 <HAL_ADC_ConfigChannel+0x48c>)
 8002c8c:	60fb      	str	r3, [r7, #12]
 8002c8e:	e023      	b.n	8002cd8 <HAL_ADC_ConfigChannel+0x4bc>
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	4a04      	ldr	r2, [pc, #16]	; (8002ca8 <HAL_ADC_ConfigChannel+0x48c>)
 8002c96:	4293      	cmp	r3, r2
 8002c98:	d10c      	bne.n	8002cb4 <HAL_ADC_ConfigChannel+0x498>
 8002c9a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002c9e:	60fb      	str	r3, [r7, #12]
 8002ca0:	e01a      	b.n	8002cd8 <HAL_ADC_ConfigChannel+0x4bc>
 8002ca2:	bf00      	nop
 8002ca4:	83fff000 	.word	0x83fff000
 8002ca8:	50000100 	.word	0x50000100
 8002cac:	50000300 	.word	0x50000300
 8002cb0:	50000700 	.word	0x50000700
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	4a4a      	ldr	r2, [pc, #296]	; (8002de4 <HAL_ADC_ConfigChannel+0x5c8>)
 8002cba:	4293      	cmp	r3, r2
 8002cbc:	d102      	bne.n	8002cc4 <HAL_ADC_ConfigChannel+0x4a8>
 8002cbe:	4b4a      	ldr	r3, [pc, #296]	; (8002de8 <HAL_ADC_ConfigChannel+0x5cc>)
 8002cc0:	60fb      	str	r3, [r7, #12]
 8002cc2:	e009      	b.n	8002cd8 <HAL_ADC_ConfigChannel+0x4bc>
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	4a47      	ldr	r2, [pc, #284]	; (8002de8 <HAL_ADC_ConfigChannel+0x5cc>)
 8002cca:	4293      	cmp	r3, r2
 8002ccc:	d102      	bne.n	8002cd4 <HAL_ADC_ConfigChannel+0x4b8>
 8002cce:	4b45      	ldr	r3, [pc, #276]	; (8002de4 <HAL_ADC_ConfigChannel+0x5c8>)
 8002cd0:	60fb      	str	r3, [r7, #12]
 8002cd2:	e001      	b.n	8002cd8 <HAL_ADC_ConfigChannel+0x4bc>
 8002cd4:	2300      	movs	r3, #0
 8002cd6:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	689b      	ldr	r3, [r3, #8]
 8002cde:	f003 0303 	and.w	r3, r3, #3
 8002ce2:	2b01      	cmp	r3, #1
 8002ce4:	d108      	bne.n	8002cf8 <HAL_ADC_ConfigChannel+0x4dc>
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	f003 0301 	and.w	r3, r3, #1
 8002cf0:	2b01      	cmp	r3, #1
 8002cf2:	d101      	bne.n	8002cf8 <HAL_ADC_ConfigChannel+0x4dc>
 8002cf4:	2301      	movs	r3, #1
 8002cf6:	e000      	b.n	8002cfa <HAL_ADC_ConfigChannel+0x4de>
 8002cf8:	2300      	movs	r3, #0
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d150      	bne.n	8002da0 <HAL_ADC_ConfigChannel+0x584>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8002cfe:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d010      	beq.n	8002d26 <HAL_ADC_ConfigChannel+0x50a>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	689b      	ldr	r3, [r3, #8]
 8002d08:	f003 0303 	and.w	r3, r3, #3
 8002d0c:	2b01      	cmp	r3, #1
 8002d0e:	d107      	bne.n	8002d20 <HAL_ADC_ConfigChannel+0x504>
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	f003 0301 	and.w	r3, r3, #1
 8002d18:	2b01      	cmp	r3, #1
 8002d1a:	d101      	bne.n	8002d20 <HAL_ADC_ConfigChannel+0x504>
 8002d1c:	2301      	movs	r3, #1
 8002d1e:	e000      	b.n	8002d22 <HAL_ADC_ConfigChannel+0x506>
 8002d20:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d13c      	bne.n	8002da0 <HAL_ADC_ConfigChannel+0x584>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002d26:	683b      	ldr	r3, [r7, #0]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	2b10      	cmp	r3, #16
 8002d2c:	d11d      	bne.n	8002d6a <HAL_ADC_ConfigChannel+0x54e>
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002d36:	d118      	bne.n	8002d6a <HAL_ADC_ConfigChannel+0x54e>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 8002d38:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002d3a:	689b      	ldr	r3, [r3, #8]
 8002d3c:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002d40:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002d42:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002d44:	4b29      	ldr	r3, [pc, #164]	; (8002dec <HAL_ADC_ConfigChannel+0x5d0>)
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	4a29      	ldr	r2, [pc, #164]	; (8002df0 <HAL_ADC_ConfigChannel+0x5d4>)
 8002d4a:	fba2 2303 	umull	r2, r3, r2, r3
 8002d4e:	0c9a      	lsrs	r2, r3, #18
 8002d50:	4613      	mov	r3, r2
 8002d52:	009b      	lsls	r3, r3, #2
 8002d54:	4413      	add	r3, r2
 8002d56:	005b      	lsls	r3, r3, #1
 8002d58:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002d5a:	e002      	b.n	8002d62 <HAL_ADC_ConfigChannel+0x546>
          {
            wait_loop_index--;
 8002d5c:	68bb      	ldr	r3, [r7, #8]
 8002d5e:	3b01      	subs	r3, #1
 8002d60:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002d62:	68bb      	ldr	r3, [r7, #8]
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d1f9      	bne.n	8002d5c <HAL_ADC_ConfigChannel+0x540>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002d68:	e02e      	b.n	8002dc8 <HAL_ADC_ConfigChannel+0x5ac>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 8002d6a:	683b      	ldr	r3, [r7, #0]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	2b11      	cmp	r3, #17
 8002d70:	d10b      	bne.n	8002d8a <HAL_ADC_ConfigChannel+0x56e>
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002d7a:	d106      	bne.n	8002d8a <HAL_ADC_ConfigChannel+0x56e>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 8002d7c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002d7e:	689b      	ldr	r3, [r3, #8]
 8002d80:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 8002d84:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002d86:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002d88:	e01e      	b.n	8002dc8 <HAL_ADC_ConfigChannel+0x5ac>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 8002d8a:	683b      	ldr	r3, [r7, #0]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	2b12      	cmp	r3, #18
 8002d90:	d11a      	bne.n	8002dc8 <HAL_ADC_ConfigChannel+0x5ac>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 8002d92:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002d94:	689b      	ldr	r3, [r3, #8]
 8002d96:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002d9a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002d9c:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002d9e:	e013      	b.n	8002dc8 <HAL_ADC_ConfigChannel+0x5ac>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002da4:	f043 0220 	orr.w	r2, r3, #32
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	641a      	str	r2, [r3, #64]	; 0x40
        
        tmp_hal_status = HAL_ERROR;
 8002dac:	2301      	movs	r3, #1
 8002dae:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8002db2:	e00a      	b.n	8002dca <HAL_ADC_ConfigChannel+0x5ae>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002db8:	f043 0220 	orr.w	r2, r3, #32
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 8002dc0:	2301      	movs	r3, #1
 8002dc2:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8002dc6:	e000      	b.n	8002dca <HAL_ADC_ConfigChannel+0x5ae>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002dc8:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	2200      	movs	r2, #0
 8002dce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8002dd2:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8002dd6:	4618      	mov	r0, r3
 8002dd8:	376c      	adds	r7, #108	; 0x6c
 8002dda:	46bd      	mov	sp, r7
 8002ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de0:	4770      	bx	lr
 8002de2:	bf00      	nop
 8002de4:	50000400 	.word	0x50000400
 8002de8:	50000500 	.word	0x50000500
 8002dec:	20000000 	.word	0x20000000
 8002df0:	431bde83 	.word	0x431bde83

08002df4 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param  hadc ADC handle
  * @param  multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef* hadc, ADC_MultiModeTypeDef* multimode)
{
 8002df4:	b480      	push	{r7}
 8002df6:	b099      	sub	sp, #100	; 0x64
 8002df8:	af00      	add	r7, sp, #0
 8002dfa:	6078      	str	r0, [r7, #4]
 8002dfc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002dfe:	2300      	movs	r3, #0
 8002e00:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    assert_param(IS_ADC_DMA_ACCESS_MODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }
  
  /* Set handle of the other ADC sharing the same common register             */
  ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002e0c:	d102      	bne.n	8002e14 <HAL_ADCEx_MultiModeConfigChannel+0x20>
 8002e0e:	4b6d      	ldr	r3, [pc, #436]	; (8002fc4 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 8002e10:	60bb      	str	r3, [r7, #8]
 8002e12:	e01a      	b.n	8002e4a <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	4a6a      	ldr	r2, [pc, #424]	; (8002fc4 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 8002e1a:	4293      	cmp	r3, r2
 8002e1c:	d103      	bne.n	8002e26 <HAL_ADCEx_MultiModeConfigChannel+0x32>
 8002e1e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002e22:	60bb      	str	r3, [r7, #8]
 8002e24:	e011      	b.n	8002e4a <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	4a67      	ldr	r2, [pc, #412]	; (8002fc8 <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 8002e2c:	4293      	cmp	r3, r2
 8002e2e:	d102      	bne.n	8002e36 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8002e30:	4b66      	ldr	r3, [pc, #408]	; (8002fcc <HAL_ADCEx_MultiModeConfigChannel+0x1d8>)
 8002e32:	60bb      	str	r3, [r7, #8]
 8002e34:	e009      	b.n	8002e4a <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	4a64      	ldr	r2, [pc, #400]	; (8002fcc <HAL_ADCEx_MultiModeConfigChannel+0x1d8>)
 8002e3c:	4293      	cmp	r3, r2
 8002e3e:	d102      	bne.n	8002e46 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8002e40:	4b61      	ldr	r3, [pc, #388]	; (8002fc8 <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 8002e42:	60bb      	str	r3, [r7, #8]
 8002e44:	e001      	b.n	8002e4a <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8002e46:	2300      	movs	r3, #0
 8002e48:	60bb      	str	r3, [r7, #8]
  if (tmphadcSharingSameCommonRegister.Instance == NULL)
 8002e4a:	68bb      	ldr	r3, [r7, #8]
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d101      	bne.n	8002e54 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Return function status */
    return HAL_ERROR;
 8002e50:	2301      	movs	r3, #1
 8002e52:	e0b0      	b.n	8002fb6 <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002e5a:	2b01      	cmp	r3, #1
 8002e5c:	d101      	bne.n	8002e62 <HAL_ADCEx_MultiModeConfigChannel+0x6e>
 8002e5e:	2302      	movs	r3, #2
 8002e60:	e0a9      	b.n	8002fb6 <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	2201      	movs	r2, #1
 8002e66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  if ( (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET) 
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	689b      	ldr	r3, [r3, #8]
 8002e70:	f003 0304 	and.w	r3, r3, #4
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	f040 808d 	bne.w	8002f94 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
    && (ADC_IS_CONVERSION_ONGOING_REGULAR(&tmphadcSharingSameCommonRegister) == RESET) )
 8002e7a:	68bb      	ldr	r3, [r7, #8]
 8002e7c:	689b      	ldr	r3, [r3, #8]
 8002e7e:	f003 0304 	and.w	r3, r3, #4
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	f040 8086 	bne.w	8002f94 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
  {
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002e90:	d004      	beq.n	8002e9c <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	4a4b      	ldr	r2, [pc, #300]	; (8002fc4 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 8002e98:	4293      	cmp	r3, r2
 8002e9a:	d101      	bne.n	8002ea0 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 8002e9c:	4b4c      	ldr	r3, [pc, #304]	; (8002fd0 <HAL_ADCEx_MultiModeConfigChannel+0x1dc>)
 8002e9e:	e000      	b.n	8002ea2 <HAL_ADCEx_MultiModeConfigChannel+0xae>
 8002ea0:	4b4c      	ldr	r3, [pc, #304]	; (8002fd4 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>)
 8002ea2:	65bb      	str	r3, [r7, #88]	; 0x58
    
    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8002ea4:	683b      	ldr	r3, [r7, #0]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d040      	beq.n	8002f2e <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    {
      /* Configuration of ADC common group ADC1&ADC2, ADC3&ADC4 if available    */
      /* (ADC2, ADC3, ADC4 availability depends on STM32 product)               */
      /*  - DMA access mode                                                     */
      MODIFY_REG(tmpADC_Common->CCR                                          ,
 8002eac:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002eae:	689b      	ldr	r3, [r3, #8]
 8002eb0:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002eb4:	683b      	ldr	r3, [r7, #0]
 8002eb6:	6859      	ldr	r1, [r3, #4]
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002ebe:	035b      	lsls	r3, r3, #13
 8002ec0:	430b      	orrs	r3, r1
 8002ec2:	431a      	orrs	r2, r3
 8002ec4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002ec6:	609a      	str	r2, [r3, #8]
      /*       parameters, their setting is bypassed without error reporting    */
      /*       (as it can be the expected behaviour in case of intended action  */
      /*       to update parameter above (which fulfills the ADC state          */
      /*       condition: no conversion on going on group regular)              */
      /*       on the fly).                                                     */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	689b      	ldr	r3, [r3, #8]
 8002ece:	f003 0303 	and.w	r3, r3, #3
 8002ed2:	2b01      	cmp	r3, #1
 8002ed4:	d108      	bne.n	8002ee8 <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	f003 0301 	and.w	r3, r3, #1
 8002ee0:	2b01      	cmp	r3, #1
 8002ee2:	d101      	bne.n	8002ee8 <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 8002ee4:	2301      	movs	r3, #1
 8002ee6:	e000      	b.n	8002eea <HAL_ADCEx_MultiModeConfigChannel+0xf6>
 8002ee8:	2300      	movs	r3, #0
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d15c      	bne.n	8002fa8 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8002eee:	68bb      	ldr	r3, [r7, #8]
 8002ef0:	689b      	ldr	r3, [r3, #8]
 8002ef2:	f003 0303 	and.w	r3, r3, #3
 8002ef6:	2b01      	cmp	r3, #1
 8002ef8:	d107      	bne.n	8002f0a <HAL_ADCEx_MultiModeConfigChannel+0x116>
 8002efa:	68bb      	ldr	r3, [r7, #8]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	f003 0301 	and.w	r3, r3, #1
 8002f02:	2b01      	cmp	r3, #1
 8002f04:	d101      	bne.n	8002f0a <HAL_ADCEx_MultiModeConfigChannel+0x116>
 8002f06:	2301      	movs	r3, #1
 8002f08:	e000      	b.n	8002f0c <HAL_ADCEx_MultiModeConfigChannel+0x118>
 8002f0a:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d14b      	bne.n	8002fa8 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        MODIFY_REG(tmpADC_Common->CCR                                          ,
 8002f10:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002f12:	689b      	ldr	r3, [r3, #8]
 8002f14:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8002f18:	f023 030f 	bic.w	r3, r3, #15
 8002f1c:	683a      	ldr	r2, [r7, #0]
 8002f1e:	6811      	ldr	r1, [r2, #0]
 8002f20:	683a      	ldr	r2, [r7, #0]
 8002f22:	6892      	ldr	r2, [r2, #8]
 8002f24:	430a      	orrs	r2, r1
 8002f26:	431a      	orrs	r2, r3
 8002f28:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002f2a:	609a      	str	r2, [r3, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8002f2c:	e03c      	b.n	8002fa8 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
                   multimode->TwoSamplingDelay                                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8002f2e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002f30:	689b      	ldr	r3, [r3, #8]
 8002f32:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002f36:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002f38:	609a      	str	r2, [r3, #8]
      
      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	689b      	ldr	r3, [r3, #8]
 8002f40:	f003 0303 	and.w	r3, r3, #3
 8002f44:	2b01      	cmp	r3, #1
 8002f46:	d108      	bne.n	8002f5a <HAL_ADCEx_MultiModeConfigChannel+0x166>
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	f003 0301 	and.w	r3, r3, #1
 8002f52:	2b01      	cmp	r3, #1
 8002f54:	d101      	bne.n	8002f5a <HAL_ADCEx_MultiModeConfigChannel+0x166>
 8002f56:	2301      	movs	r3, #1
 8002f58:	e000      	b.n	8002f5c <HAL_ADCEx_MultiModeConfigChannel+0x168>
 8002f5a:	2300      	movs	r3, #0
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d123      	bne.n	8002fa8 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8002f60:	68bb      	ldr	r3, [r7, #8]
 8002f62:	689b      	ldr	r3, [r3, #8]
 8002f64:	f003 0303 	and.w	r3, r3, #3
 8002f68:	2b01      	cmp	r3, #1
 8002f6a:	d107      	bne.n	8002f7c <HAL_ADCEx_MultiModeConfigChannel+0x188>
 8002f6c:	68bb      	ldr	r3, [r7, #8]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	f003 0301 	and.w	r3, r3, #1
 8002f74:	2b01      	cmp	r3, #1
 8002f76:	d101      	bne.n	8002f7c <HAL_ADCEx_MultiModeConfigChannel+0x188>
 8002f78:	2301      	movs	r3, #1
 8002f7a:	e000      	b.n	8002f7e <HAL_ADCEx_MultiModeConfigChannel+0x18a>
 8002f7c:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d112      	bne.n	8002fa8 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI | ADC_CCR_DELAY);
 8002f82:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002f84:	689b      	ldr	r3, [r3, #8]
 8002f86:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8002f8a:	f023 030f 	bic.w	r3, r3, #15
 8002f8e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002f90:	6093      	str	r3, [r2, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8002f92:	e009      	b.n	8002fa8 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f98:	f043 0220 	orr.w	r2, r3, #32
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 8002fa0:	2301      	movs	r3, #1
 8002fa2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8002fa6:	e000      	b.n	8002faa <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8002fa8:	bf00      	nop
  }
    
    
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	2200      	movs	r2, #0
 8002fae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8002fb2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
} 
 8002fb6:	4618      	mov	r0, r3
 8002fb8:	3764      	adds	r7, #100	; 0x64
 8002fba:	46bd      	mov	sp, r7
 8002fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc0:	4770      	bx	lr
 8002fc2:	bf00      	nop
 8002fc4:	50000100 	.word	0x50000100
 8002fc8:	50000400 	.word	0x50000400
 8002fcc:	50000500 	.word	0x50000500
 8002fd0:	50000300 	.word	0x50000300
 8002fd4:	50000700 	.word	0x50000700

08002fd8 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8002fd8:	b580      	push	{r7, lr}
 8002fda:	b084      	sub	sp, #16
 8002fdc:	af00      	add	r7, sp, #0
 8002fde:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fe4:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fea:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d126      	bne.n	8003040 <ADC_DMAConvCplt+0x68>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ff6:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	641a      	str	r2, [r3, #64]	; 0x40
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F3 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	68db      	ldr	r3, [r3, #12]
 8003004:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003008:	2b00      	cmp	r3, #0
 800300a:	d115      	bne.n	8003038 <ADC_DMAConvCplt+0x60>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	7e5b      	ldrb	r3, [r3, #25]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8003010:	2b00      	cmp	r3, #0
 8003012:	d111      	bne.n	8003038 <ADC_DMAConvCplt+0x60>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003018:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003024:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003028:	2b00      	cmp	r3, #0
 800302a:	d105      	bne.n	8003038 <ADC_DMAConvCplt+0x60>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003030:	f043 0201 	orr.w	r2, r3, #1
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 8003038:	68f8      	ldr	r0, [r7, #12]
 800303a:	f7ff f801 	bl	8002040 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 800303e:	e004      	b.n	800304a <ADC_DMAConvCplt+0x72>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003044:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003046:	6878      	ldr	r0, [r7, #4]
 8003048:	4798      	blx	r3
}
 800304a:	bf00      	nop
 800304c:	3710      	adds	r7, #16
 800304e:	46bd      	mov	sp, r7
 8003050:	bd80      	pop	{r7, pc}

08003052 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8003052:	b580      	push	{r7, lr}
 8003054:	b084      	sub	sp, #16
 8003056:	af00      	add	r7, sp, #0
 8003058:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800305e:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8003060:	68f8      	ldr	r0, [r7, #12]
 8003062:	f7fe fff7 	bl	8002054 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */ 
}
 8003066:	bf00      	nop
 8003068:	3710      	adds	r7, #16
 800306a:	46bd      	mov	sp, r7
 800306c:	bd80      	pop	{r7, pc}

0800306e <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 800306e:	b580      	push	{r7, lr}
 8003070:	b084      	sub	sp, #16
 8003072:	af00      	add	r7, sp, #0
 8003074:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800307a:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003080:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	641a      	str	r2, [r3, #64]	; 0x40
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800308c:	f043 0204 	orr.w	r2, r3, #4
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	645a      	str	r2, [r3, #68]	; 0x44
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8003094:	68f8      	ldr	r0, [r7, #12]
 8003096:	f7fe ffe7 	bl	8002068 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800309a:	bf00      	nop
 800309c:	3710      	adds	r7, #16
 800309e:	46bd      	mov	sp, r7
 80030a0:	bd80      	pop	{r7, pc}
	...

080030a4 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80030a4:	b580      	push	{r7, lr}
 80030a6:	b084      	sub	sp, #16
 80030a8:	af00      	add	r7, sp, #0
 80030aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80030ac:	2300      	movs	r3, #0
 80030ae:	60fb      	str	r3, [r7, #12]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	689b      	ldr	r3, [r3, #8]
 80030b6:	f003 0303 	and.w	r3, r3, #3
 80030ba:	2b01      	cmp	r3, #1
 80030bc:	d108      	bne.n	80030d0 <ADC_Enable+0x2c>
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	f003 0301 	and.w	r3, r3, #1
 80030c8:	2b01      	cmp	r3, #1
 80030ca:	d101      	bne.n	80030d0 <ADC_Enable+0x2c>
 80030cc:	2301      	movs	r3, #1
 80030ce:	e000      	b.n	80030d2 <ADC_Enable+0x2e>
 80030d0:	2300      	movs	r3, #0
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d143      	bne.n	800315e <ADC_Enable+0xba>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	689a      	ldr	r2, [r3, #8]
 80030dc:	4b22      	ldr	r3, [pc, #136]	; (8003168 <ADC_Enable+0xc4>)
 80030de:	4013      	ands	r3, r2
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d00d      	beq.n	8003100 <ADC_Enable+0x5c>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030e8:	f043 0210 	orr.w	r2, r3, #16
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030f4:	f043 0201 	orr.w	r2, r3, #1
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	645a      	str	r2, [r3, #68]	; 0x44
      
      return HAL_ERROR;
 80030fc:	2301      	movs	r3, #1
 80030fe:	e02f      	b.n	8003160 <ADC_Enable+0xbc>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	689a      	ldr	r2, [r3, #8]
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	f042 0201 	orr.w	r2, r2, #1
 800310e:	609a      	str	r2, [r3, #8]
    
    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();  
 8003110:	f7fe ff66 	bl	8001fe0 <HAL_GetTick>
 8003114:	60f8      	str	r0, [r7, #12]
    
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8003116:	e01b      	b.n	8003150 <ADC_Enable+0xac>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003118:	f7fe ff62 	bl	8001fe0 <HAL_GetTick>
 800311c:	4602      	mov	r2, r0
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	1ad3      	subs	r3, r2, r3
 8003122:	2b02      	cmp	r3, #2
 8003124:	d914      	bls.n	8003150 <ADC_Enable+0xac>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	f003 0301 	and.w	r3, r3, #1
 8003130:	2b01      	cmp	r3, #1
 8003132:	d00d      	beq.n	8003150 <ADC_Enable+0xac>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003138:	f043 0210 	orr.w	r2, r3, #16
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003144:	f043 0201 	orr.w	r2, r3, #1
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 800314c:	2301      	movs	r3, #1
 800314e:	e007      	b.n	8003160 <ADC_Enable+0xbc>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	f003 0301 	and.w	r3, r3, #1
 800315a:	2b01      	cmp	r3, #1
 800315c:	d1dc      	bne.n	8003118 <ADC_Enable+0x74>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 800315e:	2300      	movs	r3, #0
}
 8003160:	4618      	mov	r0, r3
 8003162:	3710      	adds	r7, #16
 8003164:	46bd      	mov	sp, r7
 8003166:	bd80      	pop	{r7, pc}
 8003168:	8000003f 	.word	0x8000003f

0800316c <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 800316c:	b580      	push	{r7, lr}
 800316e:	b084      	sub	sp, #16
 8003170:	af00      	add	r7, sp, #0
 8003172:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003174:	2300      	movs	r3, #0
 8003176:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	689b      	ldr	r3, [r3, #8]
 800317e:	f003 0303 	and.w	r3, r3, #3
 8003182:	2b01      	cmp	r3, #1
 8003184:	d108      	bne.n	8003198 <ADC_Disable+0x2c>
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	f003 0301 	and.w	r3, r3, #1
 8003190:	2b01      	cmp	r3, #1
 8003192:	d101      	bne.n	8003198 <ADC_Disable+0x2c>
 8003194:	2301      	movs	r3, #1
 8003196:	e000      	b.n	800319a <ADC_Disable+0x2e>
 8003198:	2300      	movs	r3, #0
 800319a:	2b00      	cmp	r3, #0
 800319c:	d047      	beq.n	800322e <ADC_Disable+0xc2>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	689b      	ldr	r3, [r3, #8]
 80031a4:	f003 030d 	and.w	r3, r3, #13
 80031a8:	2b01      	cmp	r3, #1
 80031aa:	d10f      	bne.n	80031cc <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	689a      	ldr	r2, [r3, #8]
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	f042 0202 	orr.w	r2, r2, #2
 80031ba:	609a      	str	r2, [r3, #8]
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	2203      	movs	r2, #3
 80031c2:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 80031c4:	f7fe ff0c 	bl	8001fe0 <HAL_GetTick>
 80031c8:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80031ca:	e029      	b.n	8003220 <ADC_Disable+0xb4>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031d0:	f043 0210 	orr.w	r2, r3, #16
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	641a      	str	r2, [r3, #64]	; 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031dc:	f043 0201 	orr.w	r2, r3, #1
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	645a      	str	r2, [r3, #68]	; 0x44
      return HAL_ERROR;
 80031e4:	2301      	movs	r3, #1
 80031e6:	e023      	b.n	8003230 <ADC_Disable+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80031e8:	f7fe fefa 	bl	8001fe0 <HAL_GetTick>
 80031ec:	4602      	mov	r2, r0
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	1ad3      	subs	r3, r2, r3
 80031f2:	2b02      	cmp	r3, #2
 80031f4:	d914      	bls.n	8003220 <ADC_Disable+0xb4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	689b      	ldr	r3, [r3, #8]
 80031fc:	f003 0301 	and.w	r3, r3, #1
 8003200:	2b01      	cmp	r3, #1
 8003202:	d10d      	bne.n	8003220 <ADC_Disable+0xb4>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003208:	f043 0210 	orr.w	r2, r3, #16
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003214:	f043 0201 	orr.w	r2, r3, #1
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 800321c:	2301      	movs	r3, #1
 800321e:	e007      	b.n	8003230 <ADC_Disable+0xc4>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	689b      	ldr	r3, [r3, #8]
 8003226:	f003 0301 	and.w	r3, r3, #1
 800322a:	2b01      	cmp	r3, #1
 800322c:	d0dc      	beq.n	80031e8 <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 800322e:	2300      	movs	r3, #0
}
 8003230:	4618      	mov	r0, r3
 8003232:	3710      	adds	r7, #16
 8003234:	46bd      	mov	sp, r7
 8003236:	bd80      	pop	{r7, pc}

08003238 <ADC_ConversionStop>:
  *            @arg ADC_INJECTED_GROUP: ADC injected conversion type.
  *            @arg ADC_REGULAR_INJECTED_GROUP: ADC regular and injected conversion type.
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef* hadc, uint32_t ConversionGroup)
{
 8003238:	b580      	push	{r7, lr}
 800323a:	b086      	sub	sp, #24
 800323c:	af00      	add	r7, sp, #0
 800323e:	6078      	str	r0, [r7, #4]
 8003240:	6039      	str	r1, [r7, #0]
  uint32_t tmp_ADC_CR_ADSTART_JADSTART = 0U;
 8003242:	2300      	movs	r3, #0
 8003244:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 8003246:	2300      	movs	r3, #0
 8003248:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles = 0U;
 800324a:	2300      	movs	r3, #0
 800324c:	613b      	str	r3, [r7, #16]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));
    
  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc))
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	689b      	ldr	r3, [r3, #8]
 8003254:	f003 030c 	and.w	r3, r3, #12
 8003258:	2b00      	cmp	r3, #0
 800325a:	f000 809b 	beq.w	8003394 <ADC_ConversionStop+0x15c>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1U, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if ((HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_JAUTO)) &&
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	68db      	ldr	r3, [r3, #12]
 8003264:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003268:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800326c:	d12a      	bne.n	80032c4 <ADC_ConversionStop+0x8c>
         (hadc->Init.ContinuousConvMode==ENABLE)               &&
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	7e5b      	ldrb	r3, [r3, #25]
    if ((HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_JAUTO)) &&
 8003272:	2b01      	cmp	r3, #1
 8003274:	d126      	bne.n	80032c4 <ADC_ConversionStop+0x8c>
         (hadc->Init.LowPowerAutoWait==ENABLE)                   )
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	7e1b      	ldrb	r3, [r3, #24]
         (hadc->Init.ContinuousConvMode==ENABLE)               &&
 800327a:	2b01      	cmp	r3, #1
 800327c:	d122      	bne.n	80032c4 <ADC_ConversionStop+0x8c>
    {
      /* Use stop of regular group */
      ConversionGroup = ADC_REGULAR_GROUP;
 800327e:	230c      	movs	r3, #12
 8003280:	603b      	str	r3, [r7, #0]
      
      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == RESET)
 8003282:	e014      	b.n	80032ae <ADC_ConversionStop+0x76>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES *4U))
 8003284:	693b      	ldr	r3, [r7, #16]
 8003286:	4a46      	ldr	r2, [pc, #280]	; (80033a0 <ADC_ConversionStop+0x168>)
 8003288:	4293      	cmp	r3, r2
 800328a:	d90d      	bls.n	80032a8 <ADC_ConversionStop+0x70>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003290:	f043 0210 	orr.w	r2, r3, #16
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800329c:	f043 0201 	orr.w	r2, r3, #1
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	645a      	str	r2, [r3, #68]	; 0x44
          
          return HAL_ERROR;
 80032a4:	2301      	movs	r3, #1
 80032a6:	e076      	b.n	8003396 <ADC_ConversionStop+0x15e>
        }
        Conversion_Timeout_CPU_cycles ++;
 80032a8:	693b      	ldr	r3, [r7, #16]
 80032aa:	3301      	adds	r3, #1
 80032ac:	613b      	str	r3, [r7, #16]
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == RESET)
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032b8:	2b40      	cmp	r3, #64	; 0x40
 80032ba:	d1e3      	bne.n	8003284 <ADC_ConversionStop+0x4c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	2240      	movs	r2, #64	; 0x40
 80032c2:	601a      	str	r2, [r3, #0]
    }
    
    /* Stop potential conversion on going on regular group */
    if (ConversionGroup != ADC_INJECTED_GROUP)
 80032c4:	683b      	ldr	r3, [r7, #0]
 80032c6:	2b60      	cmp	r3, #96	; 0x60
 80032c8:	d015      	beq.n	80032f6 <ADC_ConversionStop+0xbe>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0U */
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	689b      	ldr	r3, [r3, #8]
 80032d0:	f003 0304 	and.w	r3, r3, #4
 80032d4:	2b04      	cmp	r3, #4
 80032d6:	d10e      	bne.n	80032f6 <ADC_ConversionStop+0xbe>
          HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS)     )
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	689b      	ldr	r3, [r3, #8]
 80032de:	f003 0302 	and.w	r3, r3, #2
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d107      	bne.n	80032f6 <ADC_ConversionStop+0xbe>
      {
        /* Stop conversions on regular group */
        hadc->Instance->CR |= ADC_CR_ADSTP;
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	689a      	ldr	r2, [r3, #8]
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	f042 0210 	orr.w	r2, r2, #16
 80032f4:	609a      	str	r2, [r3, #8]
      }
    }

    /* Stop potential conversion on going on injected group */
    if (ConversionGroup != ADC_REGULAR_GROUP)
 80032f6:	683b      	ldr	r3, [r7, #0]
 80032f8:	2b0c      	cmp	r3, #12
 80032fa:	d015      	beq.n	8003328 <ADC_ConversionStop+0xf0>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0U */
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_JADSTART) && 
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	689b      	ldr	r3, [r3, #8]
 8003302:	f003 0308 	and.w	r3, r3, #8
 8003306:	2b08      	cmp	r3, #8
 8003308:	d10e      	bne.n	8003328 <ADC_ConversionStop+0xf0>
          HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS)      )
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	689b      	ldr	r3, [r3, #8]
 8003310:	f003 0302 	and.w	r3, r3, #2
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_JADSTART) && 
 8003314:	2b00      	cmp	r3, #0
 8003316:	d107      	bne.n	8003328 <ADC_ConversionStop+0xf0>
      {
        /* Stop conversions on injected group */
        hadc->Instance->CR |= ADC_CR_JADSTP;
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	689a      	ldr	r2, [r3, #8]
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	f042 0220 	orr.w	r2, r2, #32
 8003326:	609a      	str	r2, [r3, #8]
      }
    }

    /* Selection of start and stop bits in function of regular or injected group */
    switch(ConversionGroup)
 8003328:	683b      	ldr	r3, [r7, #0]
 800332a:	2b60      	cmp	r3, #96	; 0x60
 800332c:	d005      	beq.n	800333a <ADC_ConversionStop+0x102>
 800332e:	683b      	ldr	r3, [r7, #0]
 8003330:	2b6c      	cmp	r3, #108	; 0x6c
 8003332:	d105      	bne.n	8003340 <ADC_ConversionStop+0x108>
    {
    case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 8003334:	230c      	movs	r3, #12
 8003336:	617b      	str	r3, [r7, #20]
        break;
 8003338:	e005      	b.n	8003346 <ADC_ConversionStop+0x10e>
    case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 800333a:	2308      	movs	r3, #8
 800333c:	617b      	str	r3, [r7, #20]
        break;
 800333e:	e002      	b.n	8003346 <ADC_ConversionStop+0x10e>
    /* Case ADC_REGULAR_GROUP */
    default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 8003340:	2304      	movs	r3, #4
 8003342:	617b      	str	r3, [r7, #20]
        break;
 8003344:	bf00      	nop
    }
    
    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 8003346:	f7fe fe4b 	bl	8001fe0 <HAL_GetTick>
 800334a:	60f8      	str	r0, [r7, #12]
      
    while((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != RESET)
 800334c:	e01b      	b.n	8003386 <ADC_ConversionStop+0x14e>
    {
      if((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 800334e:	f7fe fe47 	bl	8001fe0 <HAL_GetTick>
 8003352:	4602      	mov	r2, r0
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	1ad3      	subs	r3, r2, r3
 8003358:	2b0b      	cmp	r3, #11
 800335a:	d914      	bls.n	8003386 <ADC_ConversionStop+0x14e>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != RESET)
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	689a      	ldr	r2, [r3, #8]
 8003362:	697b      	ldr	r3, [r7, #20]
 8003364:	4013      	ands	r3, r2
 8003366:	2b00      	cmp	r3, #0
 8003368:	d00d      	beq.n	8003386 <ADC_ConversionStop+0x14e>
        {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800336e:	f043 0210 	orr.w	r2, r3, #16
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800337a:	f043 0201 	orr.w	r2, r3, #1
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	645a      	str	r2, [r3, #68]	; 0x44
        
        return HAL_ERROR;
 8003382:	2301      	movs	r3, #1
 8003384:	e007      	b.n	8003396 <ADC_ConversionStop+0x15e>
    while((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != RESET)
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	689a      	ldr	r2, [r3, #8]
 800338c:	697b      	ldr	r3, [r7, #20]
 800338e:	4013      	ands	r3, r2
 8003390:	2b00      	cmp	r3, #0
 8003392:	d1dc      	bne.n	800334e <ADC_ConversionStop+0x116>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8003394:	2300      	movs	r3, #0
}
 8003396:	4618      	mov	r0, r3
 8003398:	3718      	adds	r7, #24
 800339a:	46bd      	mov	sp, r7
 800339c:	bd80      	pop	{r7, pc}
 800339e:	bf00      	nop
 80033a0:	000993ff 	.word	0x000993ff

080033a4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80033a4:	b480      	push	{r7}
 80033a6:	b085      	sub	sp, #20
 80033a8:	af00      	add	r7, sp, #0
 80033aa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	f003 0307 	and.w	r3, r3, #7
 80033b2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80033b4:	4b0c      	ldr	r3, [pc, #48]	; (80033e8 <__NVIC_SetPriorityGrouping+0x44>)
 80033b6:	68db      	ldr	r3, [r3, #12]
 80033b8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80033ba:	68ba      	ldr	r2, [r7, #8]
 80033bc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80033c0:	4013      	ands	r3, r2
 80033c2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80033c8:	68bb      	ldr	r3, [r7, #8]
 80033ca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80033cc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80033d0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80033d4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80033d6:	4a04      	ldr	r2, [pc, #16]	; (80033e8 <__NVIC_SetPriorityGrouping+0x44>)
 80033d8:	68bb      	ldr	r3, [r7, #8]
 80033da:	60d3      	str	r3, [r2, #12]
}
 80033dc:	bf00      	nop
 80033de:	3714      	adds	r7, #20
 80033e0:	46bd      	mov	sp, r7
 80033e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e6:	4770      	bx	lr
 80033e8:	e000ed00 	.word	0xe000ed00

080033ec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80033ec:	b480      	push	{r7}
 80033ee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80033f0:	4b04      	ldr	r3, [pc, #16]	; (8003404 <__NVIC_GetPriorityGrouping+0x18>)
 80033f2:	68db      	ldr	r3, [r3, #12]
 80033f4:	0a1b      	lsrs	r3, r3, #8
 80033f6:	f003 0307 	and.w	r3, r3, #7
}
 80033fa:	4618      	mov	r0, r3
 80033fc:	46bd      	mov	sp, r7
 80033fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003402:	4770      	bx	lr
 8003404:	e000ed00 	.word	0xe000ed00

08003408 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003408:	b480      	push	{r7}
 800340a:	b083      	sub	sp, #12
 800340c:	af00      	add	r7, sp, #0
 800340e:	4603      	mov	r3, r0
 8003410:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003412:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003416:	2b00      	cmp	r3, #0
 8003418:	db0b      	blt.n	8003432 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800341a:	79fb      	ldrb	r3, [r7, #7]
 800341c:	f003 021f 	and.w	r2, r3, #31
 8003420:	4907      	ldr	r1, [pc, #28]	; (8003440 <__NVIC_EnableIRQ+0x38>)
 8003422:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003426:	095b      	lsrs	r3, r3, #5
 8003428:	2001      	movs	r0, #1
 800342a:	fa00 f202 	lsl.w	r2, r0, r2
 800342e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003432:	bf00      	nop
 8003434:	370c      	adds	r7, #12
 8003436:	46bd      	mov	sp, r7
 8003438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800343c:	4770      	bx	lr
 800343e:	bf00      	nop
 8003440:	e000e100 	.word	0xe000e100

08003444 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003444:	b480      	push	{r7}
 8003446:	b083      	sub	sp, #12
 8003448:	af00      	add	r7, sp, #0
 800344a:	4603      	mov	r3, r0
 800344c:	6039      	str	r1, [r7, #0]
 800344e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003450:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003454:	2b00      	cmp	r3, #0
 8003456:	db0a      	blt.n	800346e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003458:	683b      	ldr	r3, [r7, #0]
 800345a:	b2da      	uxtb	r2, r3
 800345c:	490c      	ldr	r1, [pc, #48]	; (8003490 <__NVIC_SetPriority+0x4c>)
 800345e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003462:	0112      	lsls	r2, r2, #4
 8003464:	b2d2      	uxtb	r2, r2
 8003466:	440b      	add	r3, r1
 8003468:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800346c:	e00a      	b.n	8003484 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800346e:	683b      	ldr	r3, [r7, #0]
 8003470:	b2da      	uxtb	r2, r3
 8003472:	4908      	ldr	r1, [pc, #32]	; (8003494 <__NVIC_SetPriority+0x50>)
 8003474:	79fb      	ldrb	r3, [r7, #7]
 8003476:	f003 030f 	and.w	r3, r3, #15
 800347a:	3b04      	subs	r3, #4
 800347c:	0112      	lsls	r2, r2, #4
 800347e:	b2d2      	uxtb	r2, r2
 8003480:	440b      	add	r3, r1
 8003482:	761a      	strb	r2, [r3, #24]
}
 8003484:	bf00      	nop
 8003486:	370c      	adds	r7, #12
 8003488:	46bd      	mov	sp, r7
 800348a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800348e:	4770      	bx	lr
 8003490:	e000e100 	.word	0xe000e100
 8003494:	e000ed00 	.word	0xe000ed00

08003498 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003498:	b480      	push	{r7}
 800349a:	b089      	sub	sp, #36	; 0x24
 800349c:	af00      	add	r7, sp, #0
 800349e:	60f8      	str	r0, [r7, #12]
 80034a0:	60b9      	str	r1, [r7, #8]
 80034a2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	f003 0307 	and.w	r3, r3, #7
 80034aa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80034ac:	69fb      	ldr	r3, [r7, #28]
 80034ae:	f1c3 0307 	rsb	r3, r3, #7
 80034b2:	2b04      	cmp	r3, #4
 80034b4:	bf28      	it	cs
 80034b6:	2304      	movcs	r3, #4
 80034b8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80034ba:	69fb      	ldr	r3, [r7, #28]
 80034bc:	3304      	adds	r3, #4
 80034be:	2b06      	cmp	r3, #6
 80034c0:	d902      	bls.n	80034c8 <NVIC_EncodePriority+0x30>
 80034c2:	69fb      	ldr	r3, [r7, #28]
 80034c4:	3b03      	subs	r3, #3
 80034c6:	e000      	b.n	80034ca <NVIC_EncodePriority+0x32>
 80034c8:	2300      	movs	r3, #0
 80034ca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80034cc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80034d0:	69bb      	ldr	r3, [r7, #24]
 80034d2:	fa02 f303 	lsl.w	r3, r2, r3
 80034d6:	43da      	mvns	r2, r3
 80034d8:	68bb      	ldr	r3, [r7, #8]
 80034da:	401a      	ands	r2, r3
 80034dc:	697b      	ldr	r3, [r7, #20]
 80034de:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80034e0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80034e4:	697b      	ldr	r3, [r7, #20]
 80034e6:	fa01 f303 	lsl.w	r3, r1, r3
 80034ea:	43d9      	mvns	r1, r3
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80034f0:	4313      	orrs	r3, r2
         );
}
 80034f2:	4618      	mov	r0, r3
 80034f4:	3724      	adds	r7, #36	; 0x24
 80034f6:	46bd      	mov	sp, r7
 80034f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034fc:	4770      	bx	lr
	...

08003500 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8003500:	b480      	push	{r7}
 8003502:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8003504:	f3bf 8f4f 	dsb	sy
}
 8003508:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 800350a:	4b06      	ldr	r3, [pc, #24]	; (8003524 <__NVIC_SystemReset+0x24>)
 800350c:	68db      	ldr	r3, [r3, #12]
 800350e:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8003512:	4904      	ldr	r1, [pc, #16]	; (8003524 <__NVIC_SystemReset+0x24>)
 8003514:	4b04      	ldr	r3, [pc, #16]	; (8003528 <__NVIC_SystemReset+0x28>)
 8003516:	4313      	orrs	r3, r2
 8003518:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 800351a:	f3bf 8f4f 	dsb	sy
}
 800351e:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8003520:	bf00      	nop
 8003522:	e7fd      	b.n	8003520 <__NVIC_SystemReset+0x20>
 8003524:	e000ed00 	.word	0xe000ed00
 8003528:	05fa0004 	.word	0x05fa0004

0800352c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800352c:	b580      	push	{r7, lr}
 800352e:	b082      	sub	sp, #8
 8003530:	af00      	add	r7, sp, #0
 8003532:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	3b01      	subs	r3, #1
 8003538:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800353c:	d301      	bcc.n	8003542 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800353e:	2301      	movs	r3, #1
 8003540:	e00f      	b.n	8003562 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003542:	4a0a      	ldr	r2, [pc, #40]	; (800356c <SysTick_Config+0x40>)
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	3b01      	subs	r3, #1
 8003548:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800354a:	210f      	movs	r1, #15
 800354c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003550:	f7ff ff78 	bl	8003444 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003554:	4b05      	ldr	r3, [pc, #20]	; (800356c <SysTick_Config+0x40>)
 8003556:	2200      	movs	r2, #0
 8003558:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800355a:	4b04      	ldr	r3, [pc, #16]	; (800356c <SysTick_Config+0x40>)
 800355c:	2207      	movs	r2, #7
 800355e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003560:	2300      	movs	r3, #0
}
 8003562:	4618      	mov	r0, r3
 8003564:	3708      	adds	r7, #8
 8003566:	46bd      	mov	sp, r7
 8003568:	bd80      	pop	{r7, pc}
 800356a:	bf00      	nop
 800356c:	e000e010 	.word	0xe000e010

08003570 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003570:	b580      	push	{r7, lr}
 8003572:	b082      	sub	sp, #8
 8003574:	af00      	add	r7, sp, #0
 8003576:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003578:	6878      	ldr	r0, [r7, #4]
 800357a:	f7ff ff13 	bl	80033a4 <__NVIC_SetPriorityGrouping>
}
 800357e:	bf00      	nop
 8003580:	3708      	adds	r7, #8
 8003582:	46bd      	mov	sp, r7
 8003584:	bd80      	pop	{r7, pc}

08003586 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003586:	b580      	push	{r7, lr}
 8003588:	b086      	sub	sp, #24
 800358a:	af00      	add	r7, sp, #0
 800358c:	4603      	mov	r3, r0
 800358e:	60b9      	str	r1, [r7, #8]
 8003590:	607a      	str	r2, [r7, #4]
 8003592:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003594:	2300      	movs	r3, #0
 8003596:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003598:	f7ff ff28 	bl	80033ec <__NVIC_GetPriorityGrouping>
 800359c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800359e:	687a      	ldr	r2, [r7, #4]
 80035a0:	68b9      	ldr	r1, [r7, #8]
 80035a2:	6978      	ldr	r0, [r7, #20]
 80035a4:	f7ff ff78 	bl	8003498 <NVIC_EncodePriority>
 80035a8:	4602      	mov	r2, r0
 80035aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80035ae:	4611      	mov	r1, r2
 80035b0:	4618      	mov	r0, r3
 80035b2:	f7ff ff47 	bl	8003444 <__NVIC_SetPriority>
}
 80035b6:	bf00      	nop
 80035b8:	3718      	adds	r7, #24
 80035ba:	46bd      	mov	sp, r7
 80035bc:	bd80      	pop	{r7, pc}

080035be <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80035be:	b580      	push	{r7, lr}
 80035c0:	b082      	sub	sp, #8
 80035c2:	af00      	add	r7, sp, #0
 80035c4:	4603      	mov	r3, r0
 80035c6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80035c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035cc:	4618      	mov	r0, r3
 80035ce:	f7ff ff1b 	bl	8003408 <__NVIC_EnableIRQ>
}
 80035d2:	bf00      	nop
 80035d4:	3708      	adds	r7, #8
 80035d6:	46bd      	mov	sp, r7
 80035d8:	bd80      	pop	{r7, pc}

080035da <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiates a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 80035da:	b580      	push	{r7, lr}
 80035dc:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 80035de:	f7ff ff8f 	bl	8003500 <__NVIC_SystemReset>

080035e2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80035e2:	b580      	push	{r7, lr}
 80035e4:	b082      	sub	sp, #8
 80035e6:	af00      	add	r7, sp, #0
 80035e8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80035ea:	6878      	ldr	r0, [r7, #4]
 80035ec:	f7ff ff9e 	bl	800352c <SysTick_Config>
 80035f0:	4603      	mov	r3, r0
}
 80035f2:	4618      	mov	r0, r3
 80035f4:	3708      	adds	r7, #8
 80035f6:	46bd      	mov	sp, r7
 80035f8:	bd80      	pop	{r7, pc}

080035fa <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 80035fa:	b580      	push	{r7, lr}
 80035fc:	b084      	sub	sp, #16
 80035fe:	af00      	add	r7, sp, #0
 8003600:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003602:	2300      	movs	r3, #0
 8003604:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	2b00      	cmp	r3, #0
 800360a:	d101      	bne.n	8003610 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 800360c:	2301      	movs	r3, #1
 800360e:	e037      	b.n	8003680 <HAL_DMA_Init+0x86>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	2202      	movs	r2, #2
 8003614:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8003626:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 800362a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8003634:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	68db      	ldr	r3, [r3, #12]
 800363a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003640:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	695b      	ldr	r3, [r3, #20]
 8003646:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800364c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	69db      	ldr	r3, [r3, #28]
 8003652:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003654:	68fa      	ldr	r2, [r7, #12]
 8003656:	4313      	orrs	r3, r2
 8003658:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	68fa      	ldr	r2, [r7, #12]
 8003660:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 8003662:	6878      	ldr	r0, [r7, #4]
 8003664:	f000 f97a 	bl	800395c <DMA_CalcBaseAndBitshift>
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	2200      	movs	r2, #0
 800366c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	2201      	movs	r2, #1
 8003672:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	2200      	movs	r2, #0
 800367a:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 800367e:	2300      	movs	r3, #0
}  
 8003680:	4618      	mov	r0, r3
 8003682:	3710      	adds	r7, #16
 8003684:	46bd      	mov	sp, r7
 8003686:	bd80      	pop	{r7, pc}

08003688 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003688:	b580      	push	{r7, lr}
 800368a:	b086      	sub	sp, #24
 800368c:	af00      	add	r7, sp, #0
 800368e:	60f8      	str	r0, [r7, #12]
 8003690:	60b9      	str	r1, [r7, #8]
 8003692:	607a      	str	r2, [r7, #4]
 8003694:	603b      	str	r3, [r7, #0]
	HAL_StatusTypeDef status = HAL_OK;
 8003696:	2300      	movs	r3, #0
 8003698:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Process locked */
  __HAL_LOCK(hdma);
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	f893 3020 	ldrb.w	r3, [r3, #32]
 80036a0:	2b01      	cmp	r3, #1
 80036a2:	d101      	bne.n	80036a8 <HAL_DMA_Start_IT+0x20>
 80036a4:	2302      	movs	r3, #2
 80036a6:	e04a      	b.n	800373e <HAL_DMA_Start_IT+0xb6>
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	2201      	movs	r2, #1
 80036ac:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80036b6:	2b01      	cmp	r3, #1
 80036b8:	d13a      	bne.n	8003730 <HAL_DMA_Start_IT+0xa8>
  {
  	/* Change DMA peripheral state */  
  	hdma->State = HAL_DMA_STATE_BUSY;
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	2202      	movs	r2, #2
 80036be:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	2200      	movs	r2, #0
 80036c6:	639a      	str	r2, [r3, #56]	; 0x38
  	
  	/* Disable the peripheral */
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	681a      	ldr	r2, [r3, #0]
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	f022 0201 	bic.w	r2, r2, #1
 80036d6:	601a      	str	r2, [r3, #0]
  	
  	/* Configure the source, destination address and the data length */  
  	DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80036d8:	683b      	ldr	r3, [r7, #0]
 80036da:	687a      	ldr	r2, [r7, #4]
 80036dc:	68b9      	ldr	r1, [r7, #8]
 80036de:	68f8      	ldr	r0, [r7, #12]
 80036e0:	f000 f90d 	bl	80038fe <DMA_SetConfig>
  	
  	/* Enable the transfer complete, & transfer error interrupts */
  	/* Half transfer interrupt is optional: enable it only if associated callback is available */
    if(NULL != hdma->XferHalfCpltCallback )
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d008      	beq.n	80036fe <HAL_DMA_Start_IT+0x76>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	681a      	ldr	r2, [r3, #0]
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	f042 020e 	orr.w	r2, r2, #14
 80036fa:	601a      	str	r2, [r3, #0]
 80036fc:	e00f      	b.n	800371e <HAL_DMA_Start_IT+0x96>
    }
  	else
  	{
  		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	681a      	ldr	r2, [r3, #0]
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	f042 020a 	orr.w	r2, r2, #10
 800370c:	601a      	str	r2, [r3, #0]
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	681a      	ldr	r2, [r3, #0]
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	f022 0204 	bic.w	r2, r2, #4
 800371c:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Enable the Peripheral */
  	hdma->Instance->CCR |= DMA_CCR_EN;
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	681a      	ldr	r2, [r3, #0]
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	f042 0201 	orr.w	r2, r2, #1
 800372c:	601a      	str	r2, [r3, #0]
 800372e:	e005      	b.n	800373c <HAL_DMA_Start_IT+0xb4>
  }
  else
  {
  	/* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	2200      	movs	r2, #0
 8003734:	f883 2020 	strb.w	r2, [r3, #32]
  
    /* Remain BUSY */
    status = HAL_BUSY;
 8003738:	2302      	movs	r3, #2
 800373a:	75fb      	strb	r3, [r7, #23]
  }     
  
  return status;    
 800373c:	7dfb      	ldrb	r3, [r7, #23]
} 
 800373e:	4618      	mov	r0, r3
 8003740:	3718      	adds	r7, #24
 8003742:	46bd      	mov	sp, r7
 8003744:	bd80      	pop	{r7, pc}

08003746 <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003746:	b480      	push	{r7}
 8003748:	b083      	sub	sp, #12
 800374a:	af00      	add	r7, sp, #0
 800374c:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003754:	2b02      	cmp	r3, #2
 8003756:	d008      	beq.n	800376a <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	2204      	movs	r2, #4
 800375c:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	2200      	movs	r2, #0
 8003762:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8003766:	2301      	movs	r3, #1
 8003768:	e020      	b.n	80037ac <HAL_DMA_Abort+0x66>
  }
  else
  {
    /* Disable DMA IT */
     hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	681a      	ldr	r2, [r3, #0]
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	f022 020e 	bic.w	r2, r2, #14
 8003778:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	681a      	ldr	r2, [r3, #0]
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	f022 0201 	bic.w	r2, r2, #1
 8003788:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003792:	2101      	movs	r1, #1
 8003794:	fa01 f202 	lsl.w	r2, r1, r2
 8003798:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	2201      	movs	r2, #1
 800379e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	2200      	movs	r2, #0
 80037a6:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 80037aa:	2300      	movs	r3, #0
}
 80037ac:	4618      	mov	r0, r3
 80037ae:	370c      	adds	r7, #12
 80037b0:	46bd      	mov	sp, r7
 80037b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b6:	4770      	bx	lr

080037b8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80037b8:	b580      	push	{r7, lr}
 80037ba:	b084      	sub	sp, #16
 80037bc:	af00      	add	r7, sp, #0
 80037be:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037d4:	2204      	movs	r2, #4
 80037d6:	409a      	lsls	r2, r3
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	4013      	ands	r3, r2
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d024      	beq.n	800382a <HAL_DMA_IRQHandler+0x72>
 80037e0:	68bb      	ldr	r3, [r7, #8]
 80037e2:	f003 0304 	and.w	r3, r3, #4
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d01f      	beq.n	800382a <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	f003 0320 	and.w	r3, r3, #32
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d107      	bne.n	8003808 <HAL_DMA_IRQHandler+0x50>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	681a      	ldr	r2, [r3, #0]
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	f022 0204 	bic.w	r2, r2, #4
 8003806:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003810:	2104      	movs	r1, #4
 8003812:	fa01 f202 	lsl.w	r2, r1, r2
 8003816:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800381c:	2b00      	cmp	r3, #0
 800381e:	d06a      	beq.n	80038f6 <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003824:	6878      	ldr	r0, [r7, #4]
 8003826:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 8003828:	e065      	b.n	80038f6 <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800382e:	2202      	movs	r2, #2
 8003830:	409a      	lsls	r2, r3
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	4013      	ands	r3, r2
 8003836:	2b00      	cmp	r3, #0
 8003838:	d02c      	beq.n	8003894 <HAL_DMA_IRQHandler+0xdc>
 800383a:	68bb      	ldr	r3, [r7, #8]
 800383c:	f003 0302 	and.w	r3, r3, #2
 8003840:	2b00      	cmp	r3, #0
 8003842:	d027      	beq.n	8003894 <HAL_DMA_IRQHandler+0xdc>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	f003 0320 	and.w	r3, r3, #32
 800384e:	2b00      	cmp	r3, #0
 8003850:	d10b      	bne.n	800386a <HAL_DMA_IRQHandler+0xb2>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	681a      	ldr	r2, [r3, #0]
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	f022 020a 	bic.w	r2, r2, #10
 8003860:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	2201      	movs	r2, #1
 8003866:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003872:	2102      	movs	r1, #2
 8003874:	fa01 f202 	lsl.w	r2, r1, r2
 8003878:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	2200      	movs	r2, #0
 800387e:	f883 2020 	strb.w	r2, [r3, #32]
  	
  	if(hdma->XferCpltCallback != NULL)
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003886:	2b00      	cmp	r3, #0
 8003888:	d035      	beq.n	80038f6 <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800388e:	6878      	ldr	r0, [r7, #4]
 8003890:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 8003892:	e030      	b.n	80038f6 <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003898:	2208      	movs	r2, #8
 800389a:	409a      	lsls	r2, r3
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	4013      	ands	r3, r2
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d028      	beq.n	80038f6 <HAL_DMA_IRQHandler+0x13e>
 80038a4:	68bb      	ldr	r3, [r7, #8]
 80038a6:	f003 0308 	and.w	r3, r3, #8
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d023      	beq.n	80038f6 <HAL_DMA_IRQHandler+0x13e>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	681a      	ldr	r2, [r3, #0]
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	f022 020e 	bic.w	r2, r2, #14
 80038bc:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038c6:	2101      	movs	r1, #1
 80038c8:	fa01 f202 	lsl.w	r2, r1, r2
 80038cc:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	2201      	movs	r2, #1
 80038d2:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	2201      	movs	r2, #1
 80038d8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	2200      	movs	r2, #0
 80038e0:	f883 2020 	strb.w	r2, [r3, #32]
    
    if(hdma->XferErrorCallback != NULL)
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d004      	beq.n	80038f6 <HAL_DMA_IRQHandler+0x13e>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038f0:	6878      	ldr	r0, [r7, #4]
 80038f2:	4798      	blx	r3
    }
  }
}  
 80038f4:	e7ff      	b.n	80038f6 <HAL_DMA_IRQHandler+0x13e>
 80038f6:	bf00      	nop
 80038f8:	3710      	adds	r7, #16
 80038fa:	46bd      	mov	sp, r7
 80038fc:	bd80      	pop	{r7, pc}

080038fe <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80038fe:	b480      	push	{r7}
 8003900:	b085      	sub	sp, #20
 8003902:	af00      	add	r7, sp, #0
 8003904:	60f8      	str	r0, [r7, #12]
 8003906:	60b9      	str	r1, [r7, #8]
 8003908:	607a      	str	r2, [r7, #4]
 800390a:	603b      	str	r3, [r7, #0]
	/* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003914:	2101      	movs	r1, #1
 8003916:	fa01 f202 	lsl.w	r2, r1, r2
 800391a:	605a      	str	r2, [r3, #4]
  
  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	683a      	ldr	r2, [r7, #0]
 8003922:	605a      	str	r2, [r3, #4]
  
  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	685b      	ldr	r3, [r3, #4]
 8003928:	2b10      	cmp	r3, #16
 800392a:	d108      	bne.n	800393e <DMA_SetConfig+0x40>
  {   
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	687a      	ldr	r2, [r7, #4]
 8003932:	609a      	str	r2, [r3, #8]
    
    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	68ba      	ldr	r2, [r7, #8]
 800393a:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;
    
    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800393c:	e007      	b.n	800394e <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	68ba      	ldr	r2, [r7, #8]
 8003944:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	687a      	ldr	r2, [r7, #4]
 800394c:	60da      	str	r2, [r3, #12]
}
 800394e:	bf00      	nop
 8003950:	3714      	adds	r7, #20
 8003952:	46bd      	mov	sp, r7
 8003954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003958:	4770      	bx	lr
	...

0800395c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800395c:	b480      	push	{r7}
 800395e:	b083      	sub	sp, #12
 8003960:	af00      	add	r7, sp, #0
 8003962:	6078      	str	r0, [r7, #4]
#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	461a      	mov	r2, r3
 800396a:	4b14      	ldr	r3, [pc, #80]	; (80039bc <DMA_CalcBaseAndBitshift+0x60>)
 800396c:	429a      	cmp	r2, r3
 800396e:	d80f      	bhi.n	8003990 <DMA_CalcBaseAndBitshift+0x34>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	461a      	mov	r2, r3
 8003976:	4b12      	ldr	r3, [pc, #72]	; (80039c0 <DMA_CalcBaseAndBitshift+0x64>)
 8003978:	4413      	add	r3, r2
 800397a:	4a12      	ldr	r2, [pc, #72]	; (80039c4 <DMA_CalcBaseAndBitshift+0x68>)
 800397c:	fba2 2303 	umull	r2, r3, r2, r3
 8003980:	091b      	lsrs	r3, r3, #4
 8003982:	009a      	lsls	r2, r3, #2
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA1;
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	4a0f      	ldr	r2, [pc, #60]	; (80039c8 <DMA_CalcBaseAndBitshift+0x6c>)
 800398c:	63da      	str	r2, [r3, #60]	; 0x3c
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif
}
 800398e:	e00e      	b.n	80039ae <DMA_CalcBaseAndBitshift+0x52>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	461a      	mov	r2, r3
 8003996:	4b0d      	ldr	r3, [pc, #52]	; (80039cc <DMA_CalcBaseAndBitshift+0x70>)
 8003998:	4413      	add	r3, r2
 800399a:	4a0a      	ldr	r2, [pc, #40]	; (80039c4 <DMA_CalcBaseAndBitshift+0x68>)
 800399c:	fba2 2303 	umull	r2, r3, r2, r3
 80039a0:	091b      	lsrs	r3, r3, #4
 80039a2:	009a      	lsls	r2, r3, #2
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA2;
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	4a09      	ldr	r2, [pc, #36]	; (80039d0 <DMA_CalcBaseAndBitshift+0x74>)
 80039ac:	63da      	str	r2, [r3, #60]	; 0x3c
}
 80039ae:	bf00      	nop
 80039b0:	370c      	adds	r7, #12
 80039b2:	46bd      	mov	sp, r7
 80039b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039b8:	4770      	bx	lr
 80039ba:	bf00      	nop
 80039bc:	40020407 	.word	0x40020407
 80039c0:	bffdfff8 	.word	0xbffdfff8
 80039c4:	cccccccd 	.word	0xcccccccd
 80039c8:	40020000 	.word	0x40020000
 80039cc:	bffdfbf8 	.word	0xbffdfbf8
 80039d0:	40020400 	.word	0x40020400

080039d4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80039d4:	b480      	push	{r7}
 80039d6:	b087      	sub	sp, #28
 80039d8:	af00      	add	r7, sp, #0
 80039da:	6078      	str	r0, [r7, #4]
 80039dc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80039de:	2300      	movs	r3, #0
 80039e0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80039e2:	e154      	b.n	8003c8e <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80039e4:	683b      	ldr	r3, [r7, #0]
 80039e6:	681a      	ldr	r2, [r3, #0]
 80039e8:	2101      	movs	r1, #1
 80039ea:	697b      	ldr	r3, [r7, #20]
 80039ec:	fa01 f303 	lsl.w	r3, r1, r3
 80039f0:	4013      	ands	r3, r2
 80039f2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	f000 8146 	beq.w	8003c88 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80039fc:	683b      	ldr	r3, [r7, #0]
 80039fe:	685b      	ldr	r3, [r3, #4]
 8003a00:	f003 0303 	and.w	r3, r3, #3
 8003a04:	2b01      	cmp	r3, #1
 8003a06:	d005      	beq.n	8003a14 <HAL_GPIO_Init+0x40>
 8003a08:	683b      	ldr	r3, [r7, #0]
 8003a0a:	685b      	ldr	r3, [r3, #4]
 8003a0c:	f003 0303 	and.w	r3, r3, #3
 8003a10:	2b02      	cmp	r3, #2
 8003a12:	d130      	bne.n	8003a76 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	689b      	ldr	r3, [r3, #8]
 8003a18:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8003a1a:	697b      	ldr	r3, [r7, #20]
 8003a1c:	005b      	lsls	r3, r3, #1
 8003a1e:	2203      	movs	r2, #3
 8003a20:	fa02 f303 	lsl.w	r3, r2, r3
 8003a24:	43db      	mvns	r3, r3
 8003a26:	693a      	ldr	r2, [r7, #16]
 8003a28:	4013      	ands	r3, r2
 8003a2a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003a2c:	683b      	ldr	r3, [r7, #0]
 8003a2e:	68da      	ldr	r2, [r3, #12]
 8003a30:	697b      	ldr	r3, [r7, #20]
 8003a32:	005b      	lsls	r3, r3, #1
 8003a34:	fa02 f303 	lsl.w	r3, r2, r3
 8003a38:	693a      	ldr	r2, [r7, #16]
 8003a3a:	4313      	orrs	r3, r2
 8003a3c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	693a      	ldr	r2, [r7, #16]
 8003a42:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	685b      	ldr	r3, [r3, #4]
 8003a48:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003a4a:	2201      	movs	r2, #1
 8003a4c:	697b      	ldr	r3, [r7, #20]
 8003a4e:	fa02 f303 	lsl.w	r3, r2, r3
 8003a52:	43db      	mvns	r3, r3
 8003a54:	693a      	ldr	r2, [r7, #16]
 8003a56:	4013      	ands	r3, r2
 8003a58:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003a5a:	683b      	ldr	r3, [r7, #0]
 8003a5c:	685b      	ldr	r3, [r3, #4]
 8003a5e:	091b      	lsrs	r3, r3, #4
 8003a60:	f003 0201 	and.w	r2, r3, #1
 8003a64:	697b      	ldr	r3, [r7, #20]
 8003a66:	fa02 f303 	lsl.w	r3, r2, r3
 8003a6a:	693a      	ldr	r2, [r7, #16]
 8003a6c:	4313      	orrs	r3, r2
 8003a6e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	693a      	ldr	r2, [r7, #16]
 8003a74:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003a76:	683b      	ldr	r3, [r7, #0]
 8003a78:	685b      	ldr	r3, [r3, #4]
 8003a7a:	f003 0303 	and.w	r3, r3, #3
 8003a7e:	2b03      	cmp	r3, #3
 8003a80:	d017      	beq.n	8003ab2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	68db      	ldr	r3, [r3, #12]
 8003a86:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8003a88:	697b      	ldr	r3, [r7, #20]
 8003a8a:	005b      	lsls	r3, r3, #1
 8003a8c:	2203      	movs	r2, #3
 8003a8e:	fa02 f303 	lsl.w	r3, r2, r3
 8003a92:	43db      	mvns	r3, r3
 8003a94:	693a      	ldr	r2, [r7, #16]
 8003a96:	4013      	ands	r3, r2
 8003a98:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8003a9a:	683b      	ldr	r3, [r7, #0]
 8003a9c:	689a      	ldr	r2, [r3, #8]
 8003a9e:	697b      	ldr	r3, [r7, #20]
 8003aa0:	005b      	lsls	r3, r3, #1
 8003aa2:	fa02 f303 	lsl.w	r3, r2, r3
 8003aa6:	693a      	ldr	r2, [r7, #16]
 8003aa8:	4313      	orrs	r3, r2
 8003aaa:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	693a      	ldr	r2, [r7, #16]
 8003ab0:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003ab2:	683b      	ldr	r3, [r7, #0]
 8003ab4:	685b      	ldr	r3, [r3, #4]
 8003ab6:	f003 0303 	and.w	r3, r3, #3
 8003aba:	2b02      	cmp	r3, #2
 8003abc:	d123      	bne.n	8003b06 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003abe:	697b      	ldr	r3, [r7, #20]
 8003ac0:	08da      	lsrs	r2, r3, #3
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	3208      	adds	r2, #8
 8003ac6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003aca:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003acc:	697b      	ldr	r3, [r7, #20]
 8003ace:	f003 0307 	and.w	r3, r3, #7
 8003ad2:	009b      	lsls	r3, r3, #2
 8003ad4:	220f      	movs	r2, #15
 8003ad6:	fa02 f303 	lsl.w	r3, r2, r3
 8003ada:	43db      	mvns	r3, r3
 8003adc:	693a      	ldr	r2, [r7, #16]
 8003ade:	4013      	ands	r3, r2
 8003ae0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003ae2:	683b      	ldr	r3, [r7, #0]
 8003ae4:	691a      	ldr	r2, [r3, #16]
 8003ae6:	697b      	ldr	r3, [r7, #20]
 8003ae8:	f003 0307 	and.w	r3, r3, #7
 8003aec:	009b      	lsls	r3, r3, #2
 8003aee:	fa02 f303 	lsl.w	r3, r2, r3
 8003af2:	693a      	ldr	r2, [r7, #16]
 8003af4:	4313      	orrs	r3, r2
 8003af6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003af8:	697b      	ldr	r3, [r7, #20]
 8003afa:	08da      	lsrs	r2, r3, #3
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	3208      	adds	r2, #8
 8003b00:	6939      	ldr	r1, [r7, #16]
 8003b02:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8003b0c:	697b      	ldr	r3, [r7, #20]
 8003b0e:	005b      	lsls	r3, r3, #1
 8003b10:	2203      	movs	r2, #3
 8003b12:	fa02 f303 	lsl.w	r3, r2, r3
 8003b16:	43db      	mvns	r3, r3
 8003b18:	693a      	ldr	r2, [r7, #16]
 8003b1a:	4013      	ands	r3, r2
 8003b1c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003b1e:	683b      	ldr	r3, [r7, #0]
 8003b20:	685b      	ldr	r3, [r3, #4]
 8003b22:	f003 0203 	and.w	r2, r3, #3
 8003b26:	697b      	ldr	r3, [r7, #20]
 8003b28:	005b      	lsls	r3, r3, #1
 8003b2a:	fa02 f303 	lsl.w	r3, r2, r3
 8003b2e:	693a      	ldr	r2, [r7, #16]
 8003b30:	4313      	orrs	r3, r2
 8003b32:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	693a      	ldr	r2, [r7, #16]
 8003b38:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003b3a:	683b      	ldr	r3, [r7, #0]
 8003b3c:	685b      	ldr	r3, [r3, #4]
 8003b3e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	f000 80a0 	beq.w	8003c88 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003b48:	4b58      	ldr	r3, [pc, #352]	; (8003cac <HAL_GPIO_Init+0x2d8>)
 8003b4a:	699b      	ldr	r3, [r3, #24]
 8003b4c:	4a57      	ldr	r2, [pc, #348]	; (8003cac <HAL_GPIO_Init+0x2d8>)
 8003b4e:	f043 0301 	orr.w	r3, r3, #1
 8003b52:	6193      	str	r3, [r2, #24]
 8003b54:	4b55      	ldr	r3, [pc, #340]	; (8003cac <HAL_GPIO_Init+0x2d8>)
 8003b56:	699b      	ldr	r3, [r3, #24]
 8003b58:	f003 0301 	and.w	r3, r3, #1
 8003b5c:	60bb      	str	r3, [r7, #8]
 8003b5e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003b60:	4a53      	ldr	r2, [pc, #332]	; (8003cb0 <HAL_GPIO_Init+0x2dc>)
 8003b62:	697b      	ldr	r3, [r7, #20]
 8003b64:	089b      	lsrs	r3, r3, #2
 8003b66:	3302      	adds	r3, #2
 8003b68:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003b6c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003b6e:	697b      	ldr	r3, [r7, #20]
 8003b70:	f003 0303 	and.w	r3, r3, #3
 8003b74:	009b      	lsls	r3, r3, #2
 8003b76:	220f      	movs	r2, #15
 8003b78:	fa02 f303 	lsl.w	r3, r2, r3
 8003b7c:	43db      	mvns	r3, r3
 8003b7e:	693a      	ldr	r2, [r7, #16]
 8003b80:	4013      	ands	r3, r2
 8003b82:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003b8a:	d019      	beq.n	8003bc0 <HAL_GPIO_Init+0x1ec>
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	4a49      	ldr	r2, [pc, #292]	; (8003cb4 <HAL_GPIO_Init+0x2e0>)
 8003b90:	4293      	cmp	r3, r2
 8003b92:	d013      	beq.n	8003bbc <HAL_GPIO_Init+0x1e8>
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	4a48      	ldr	r2, [pc, #288]	; (8003cb8 <HAL_GPIO_Init+0x2e4>)
 8003b98:	4293      	cmp	r3, r2
 8003b9a:	d00d      	beq.n	8003bb8 <HAL_GPIO_Init+0x1e4>
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	4a47      	ldr	r2, [pc, #284]	; (8003cbc <HAL_GPIO_Init+0x2e8>)
 8003ba0:	4293      	cmp	r3, r2
 8003ba2:	d007      	beq.n	8003bb4 <HAL_GPIO_Init+0x1e0>
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	4a46      	ldr	r2, [pc, #280]	; (8003cc0 <HAL_GPIO_Init+0x2ec>)
 8003ba8:	4293      	cmp	r3, r2
 8003baa:	d101      	bne.n	8003bb0 <HAL_GPIO_Init+0x1dc>
 8003bac:	2304      	movs	r3, #4
 8003bae:	e008      	b.n	8003bc2 <HAL_GPIO_Init+0x1ee>
 8003bb0:	2305      	movs	r3, #5
 8003bb2:	e006      	b.n	8003bc2 <HAL_GPIO_Init+0x1ee>
 8003bb4:	2303      	movs	r3, #3
 8003bb6:	e004      	b.n	8003bc2 <HAL_GPIO_Init+0x1ee>
 8003bb8:	2302      	movs	r3, #2
 8003bba:	e002      	b.n	8003bc2 <HAL_GPIO_Init+0x1ee>
 8003bbc:	2301      	movs	r3, #1
 8003bbe:	e000      	b.n	8003bc2 <HAL_GPIO_Init+0x1ee>
 8003bc0:	2300      	movs	r3, #0
 8003bc2:	697a      	ldr	r2, [r7, #20]
 8003bc4:	f002 0203 	and.w	r2, r2, #3
 8003bc8:	0092      	lsls	r2, r2, #2
 8003bca:	4093      	lsls	r3, r2
 8003bcc:	693a      	ldr	r2, [r7, #16]
 8003bce:	4313      	orrs	r3, r2
 8003bd0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003bd2:	4937      	ldr	r1, [pc, #220]	; (8003cb0 <HAL_GPIO_Init+0x2dc>)
 8003bd4:	697b      	ldr	r3, [r7, #20]
 8003bd6:	089b      	lsrs	r3, r3, #2
 8003bd8:	3302      	adds	r3, #2
 8003bda:	693a      	ldr	r2, [r7, #16]
 8003bdc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003be0:	4b38      	ldr	r3, [pc, #224]	; (8003cc4 <HAL_GPIO_Init+0x2f0>)
 8003be2:	689b      	ldr	r3, [r3, #8]
 8003be4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	43db      	mvns	r3, r3
 8003bea:	693a      	ldr	r2, [r7, #16]
 8003bec:	4013      	ands	r3, r2
 8003bee:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003bf0:	683b      	ldr	r3, [r7, #0]
 8003bf2:	685b      	ldr	r3, [r3, #4]
 8003bf4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d003      	beq.n	8003c04 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8003bfc:	693a      	ldr	r2, [r7, #16]
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	4313      	orrs	r3, r2
 8003c02:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8003c04:	4a2f      	ldr	r2, [pc, #188]	; (8003cc4 <HAL_GPIO_Init+0x2f0>)
 8003c06:	693b      	ldr	r3, [r7, #16]
 8003c08:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003c0a:	4b2e      	ldr	r3, [pc, #184]	; (8003cc4 <HAL_GPIO_Init+0x2f0>)
 8003c0c:	68db      	ldr	r3, [r3, #12]
 8003c0e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	43db      	mvns	r3, r3
 8003c14:	693a      	ldr	r2, [r7, #16]
 8003c16:	4013      	ands	r3, r2
 8003c18:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003c1a:	683b      	ldr	r3, [r7, #0]
 8003c1c:	685b      	ldr	r3, [r3, #4]
 8003c1e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d003      	beq.n	8003c2e <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8003c26:	693a      	ldr	r2, [r7, #16]
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	4313      	orrs	r3, r2
 8003c2c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8003c2e:	4a25      	ldr	r2, [pc, #148]	; (8003cc4 <HAL_GPIO_Init+0x2f0>)
 8003c30:	693b      	ldr	r3, [r7, #16]
 8003c32:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003c34:	4b23      	ldr	r3, [pc, #140]	; (8003cc4 <HAL_GPIO_Init+0x2f0>)
 8003c36:	685b      	ldr	r3, [r3, #4]
 8003c38:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	43db      	mvns	r3, r3
 8003c3e:	693a      	ldr	r2, [r7, #16]
 8003c40:	4013      	ands	r3, r2
 8003c42:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003c44:	683b      	ldr	r3, [r7, #0]
 8003c46:	685b      	ldr	r3, [r3, #4]
 8003c48:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d003      	beq.n	8003c58 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8003c50:	693a      	ldr	r2, [r7, #16]
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	4313      	orrs	r3, r2
 8003c56:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8003c58:	4a1a      	ldr	r2, [pc, #104]	; (8003cc4 <HAL_GPIO_Init+0x2f0>)
 8003c5a:	693b      	ldr	r3, [r7, #16]
 8003c5c:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003c5e:	4b19      	ldr	r3, [pc, #100]	; (8003cc4 <HAL_GPIO_Init+0x2f0>)
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	43db      	mvns	r3, r3
 8003c68:	693a      	ldr	r2, [r7, #16]
 8003c6a:	4013      	ands	r3, r2
 8003c6c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003c6e:	683b      	ldr	r3, [r7, #0]
 8003c70:	685b      	ldr	r3, [r3, #4]
 8003c72:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d003      	beq.n	8003c82 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8003c7a:	693a      	ldr	r2, [r7, #16]
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	4313      	orrs	r3, r2
 8003c80:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8003c82:	4a10      	ldr	r2, [pc, #64]	; (8003cc4 <HAL_GPIO_Init+0x2f0>)
 8003c84:	693b      	ldr	r3, [r7, #16]
 8003c86:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003c88:	697b      	ldr	r3, [r7, #20]
 8003c8a:	3301      	adds	r3, #1
 8003c8c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003c8e:	683b      	ldr	r3, [r7, #0]
 8003c90:	681a      	ldr	r2, [r3, #0]
 8003c92:	697b      	ldr	r3, [r7, #20]
 8003c94:	fa22 f303 	lsr.w	r3, r2, r3
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	f47f aea3 	bne.w	80039e4 <HAL_GPIO_Init+0x10>
  }
}
 8003c9e:	bf00      	nop
 8003ca0:	bf00      	nop
 8003ca2:	371c      	adds	r7, #28
 8003ca4:	46bd      	mov	sp, r7
 8003ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003caa:	4770      	bx	lr
 8003cac:	40021000 	.word	0x40021000
 8003cb0:	40010000 	.word	0x40010000
 8003cb4:	48000400 	.word	0x48000400
 8003cb8:	48000800 	.word	0x48000800
 8003cbc:	48000c00 	.word	0x48000c00
 8003cc0:	48001000 	.word	0x48001000
 8003cc4:	40010400 	.word	0x40010400

08003cc8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003cc8:	b480      	push	{r7}
 8003cca:	b083      	sub	sp, #12
 8003ccc:	af00      	add	r7, sp, #0
 8003cce:	6078      	str	r0, [r7, #4]
 8003cd0:	460b      	mov	r3, r1
 8003cd2:	807b      	strh	r3, [r7, #2]
 8003cd4:	4613      	mov	r3, r2
 8003cd6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003cd8:	787b      	ldrb	r3, [r7, #1]
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d003      	beq.n	8003ce6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003cde:	887a      	ldrh	r2, [r7, #2]
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003ce4:	e002      	b.n	8003cec <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003ce6:	887a      	ldrh	r2, [r7, #2]
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003cec:	bf00      	nop
 8003cee:	370c      	adds	r7, #12
 8003cf0:	46bd      	mov	sp, r7
 8003cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf6:	4770      	bx	lr

08003cf8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003cf8:	b580      	push	{r7, lr}
 8003cfa:	b082      	sub	sp, #8
 8003cfc:	af00      	add	r7, sp, #0
 8003cfe:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d101      	bne.n	8003d0a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003d06:	2301      	movs	r3, #1
 8003d08:	e081      	b.n	8003e0e <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003d10:	b2db      	uxtb	r3, r3
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d106      	bne.n	8003d24 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	2200      	movs	r2, #0
 8003d1a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003d1e:	6878      	ldr	r0, [r7, #4]
 8003d20:	f7fd fcea 	bl	80016f8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	2224      	movs	r2, #36	; 0x24
 8003d28:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	681a      	ldr	r2, [r3, #0]
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	f022 0201 	bic.w	r2, r2, #1
 8003d3a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	685a      	ldr	r2, [r3, #4]
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003d48:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	689a      	ldr	r2, [r3, #8]
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003d58:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	68db      	ldr	r3, [r3, #12]
 8003d5e:	2b01      	cmp	r3, #1
 8003d60:	d107      	bne.n	8003d72 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	689a      	ldr	r2, [r3, #8]
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003d6e:	609a      	str	r2, [r3, #8]
 8003d70:	e006      	b.n	8003d80 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	689a      	ldr	r2, [r3, #8]
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8003d7e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	68db      	ldr	r3, [r3, #12]
 8003d84:	2b02      	cmp	r3, #2
 8003d86:	d104      	bne.n	8003d92 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003d90:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	685b      	ldr	r3, [r3, #4]
 8003d98:	687a      	ldr	r2, [r7, #4]
 8003d9a:	6812      	ldr	r2, [r2, #0]
 8003d9c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003da0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003da4:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	68da      	ldr	r2, [r3, #12]
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003db4:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	691a      	ldr	r2, [r3, #16]
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	695b      	ldr	r3, [r3, #20]
 8003dbe:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	699b      	ldr	r3, [r3, #24]
 8003dc6:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	430a      	orrs	r2, r1
 8003dce:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	69d9      	ldr	r1, [r3, #28]
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	6a1a      	ldr	r2, [r3, #32]
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	430a      	orrs	r2, r1
 8003dde:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	681a      	ldr	r2, [r3, #0]
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	f042 0201 	orr.w	r2, r2, #1
 8003dee:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	2200      	movs	r2, #0
 8003df4:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	2220      	movs	r2, #32
 8003dfa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	2200      	movs	r2, #0
 8003e02:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	2200      	movs	r2, #0
 8003e08:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8003e0c:	2300      	movs	r3, #0
}
 8003e0e:	4618      	mov	r0, r3
 8003e10:	3708      	adds	r7, #8
 8003e12:	46bd      	mov	sp, r7
 8003e14:	bd80      	pop	{r7, pc}

08003e16 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003e16:	b480      	push	{r7}
 8003e18:	b083      	sub	sp, #12
 8003e1a:	af00      	add	r7, sp, #0
 8003e1c:	6078      	str	r0, [r7, #4]
 8003e1e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003e26:	b2db      	uxtb	r3, r3
 8003e28:	2b20      	cmp	r3, #32
 8003e2a:	d138      	bne.n	8003e9e <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003e32:	2b01      	cmp	r3, #1
 8003e34:	d101      	bne.n	8003e3a <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003e36:	2302      	movs	r3, #2
 8003e38:	e032      	b.n	8003ea0 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	2201      	movs	r2, #1
 8003e3e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	2224      	movs	r2, #36	; 0x24
 8003e46:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	681a      	ldr	r2, [r3, #0]
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	f022 0201 	bic.w	r2, r2, #1
 8003e58:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	681a      	ldr	r2, [r3, #0]
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003e68:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	6819      	ldr	r1, [r3, #0]
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	683a      	ldr	r2, [r7, #0]
 8003e76:	430a      	orrs	r2, r1
 8003e78:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	681a      	ldr	r2, [r3, #0]
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	f042 0201 	orr.w	r2, r2, #1
 8003e88:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	2220      	movs	r2, #32
 8003e8e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	2200      	movs	r2, #0
 8003e96:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003e9a:	2300      	movs	r3, #0
 8003e9c:	e000      	b.n	8003ea0 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003e9e:	2302      	movs	r3, #2
  }
}
 8003ea0:	4618      	mov	r0, r3
 8003ea2:	370c      	adds	r7, #12
 8003ea4:	46bd      	mov	sp, r7
 8003ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eaa:	4770      	bx	lr

08003eac <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003eac:	b480      	push	{r7}
 8003eae:	b085      	sub	sp, #20
 8003eb0:	af00      	add	r7, sp, #0
 8003eb2:	6078      	str	r0, [r7, #4]
 8003eb4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003ebc:	b2db      	uxtb	r3, r3
 8003ebe:	2b20      	cmp	r3, #32
 8003ec0:	d139      	bne.n	8003f36 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003ec8:	2b01      	cmp	r3, #1
 8003eca:	d101      	bne.n	8003ed0 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003ecc:	2302      	movs	r3, #2
 8003ece:	e033      	b.n	8003f38 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	2201      	movs	r2, #1
 8003ed4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	2224      	movs	r2, #36	; 0x24
 8003edc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	681a      	ldr	r2, [r3, #0]
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	f022 0201 	bic.w	r2, r2, #1
 8003eee:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003efe:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003f00:	683b      	ldr	r3, [r7, #0]
 8003f02:	021b      	lsls	r3, r3, #8
 8003f04:	68fa      	ldr	r2, [r7, #12]
 8003f06:	4313      	orrs	r3, r2
 8003f08:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	68fa      	ldr	r2, [r7, #12]
 8003f10:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	681a      	ldr	r2, [r3, #0]
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	f042 0201 	orr.w	r2, r2, #1
 8003f20:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	2220      	movs	r2, #32
 8003f26:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	2200      	movs	r2, #0
 8003f2e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003f32:	2300      	movs	r3, #0
 8003f34:	e000      	b.n	8003f38 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003f36:	2302      	movs	r3, #2
  }
}
 8003f38:	4618      	mov	r0, r3
 8003f3a:	3714      	adds	r7, #20
 8003f3c:	46bd      	mov	sp, r7
 8003f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f42:	4770      	bx	lr

08003f44 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003f44:	b580      	push	{r7, lr}
 8003f46:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8003f4a:	af00      	add	r7, sp, #0
 8003f4c:	1d3b      	adds	r3, r7, #4
 8003f4e:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003f50:	1d3b      	adds	r3, r7, #4
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d102      	bne.n	8003f5e <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8003f58:	2301      	movs	r3, #1
 8003f5a:	f000 bef4 	b.w	8004d46 <HAL_RCC_OscConfig+0xe02>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003f5e:	1d3b      	adds	r3, r7, #4
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	f003 0301 	and.w	r3, r3, #1
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	f000 816a 	beq.w	8004242 <HAL_RCC_OscConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8003f6e:	4bb3      	ldr	r3, [pc, #716]	; (800423c <HAL_RCC_OscConfig+0x2f8>)
 8003f70:	685b      	ldr	r3, [r3, #4]
 8003f72:	f003 030c 	and.w	r3, r3, #12
 8003f76:	2b04      	cmp	r3, #4
 8003f78:	d00c      	beq.n	8003f94 <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003f7a:	4bb0      	ldr	r3, [pc, #704]	; (800423c <HAL_RCC_OscConfig+0x2f8>)
 8003f7c:	685b      	ldr	r3, [r3, #4]
 8003f7e:	f003 030c 	and.w	r3, r3, #12
 8003f82:	2b08      	cmp	r3, #8
 8003f84:	d159      	bne.n	800403a <HAL_RCC_OscConfig+0xf6>
 8003f86:	4bad      	ldr	r3, [pc, #692]	; (800423c <HAL_RCC_OscConfig+0x2f8>)
 8003f88:	685b      	ldr	r3, [r3, #4]
 8003f8a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003f8e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003f92:	d152      	bne.n	800403a <HAL_RCC_OscConfig+0xf6>
 8003f94:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003f98:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f9c:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8003fa0:	fa93 f3a3 	rbit	r3, r3
 8003fa4:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003fa8:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003fac:	fab3 f383 	clz	r3, r3
 8003fb0:	b2db      	uxtb	r3, r3
 8003fb2:	095b      	lsrs	r3, r3, #5
 8003fb4:	b2db      	uxtb	r3, r3
 8003fb6:	f043 0301 	orr.w	r3, r3, #1
 8003fba:	b2db      	uxtb	r3, r3
 8003fbc:	2b01      	cmp	r3, #1
 8003fbe:	d102      	bne.n	8003fc6 <HAL_RCC_OscConfig+0x82>
 8003fc0:	4b9e      	ldr	r3, [pc, #632]	; (800423c <HAL_RCC_OscConfig+0x2f8>)
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	e015      	b.n	8003ff2 <HAL_RCC_OscConfig+0xae>
 8003fc6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003fca:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003fce:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8003fd2:	fa93 f3a3 	rbit	r3, r3
 8003fd6:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8003fda:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003fde:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8003fe2:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8003fe6:	fa93 f3a3 	rbit	r3, r3
 8003fea:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8003fee:	4b93      	ldr	r3, [pc, #588]	; (800423c <HAL_RCC_OscConfig+0x2f8>)
 8003ff0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ff2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003ff6:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8003ffa:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8003ffe:	fa92 f2a2 	rbit	r2, r2
 8004002:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8004006:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 800400a:	fab2 f282 	clz	r2, r2
 800400e:	b2d2      	uxtb	r2, r2
 8004010:	f042 0220 	orr.w	r2, r2, #32
 8004014:	b2d2      	uxtb	r2, r2
 8004016:	f002 021f 	and.w	r2, r2, #31
 800401a:	2101      	movs	r1, #1
 800401c:	fa01 f202 	lsl.w	r2, r1, r2
 8004020:	4013      	ands	r3, r2
 8004022:	2b00      	cmp	r3, #0
 8004024:	f000 810c 	beq.w	8004240 <HAL_RCC_OscConfig+0x2fc>
 8004028:	1d3b      	adds	r3, r7, #4
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	685b      	ldr	r3, [r3, #4]
 800402e:	2b00      	cmp	r3, #0
 8004030:	f040 8106 	bne.w	8004240 <HAL_RCC_OscConfig+0x2fc>
      {
        return HAL_ERROR;
 8004034:	2301      	movs	r3, #1
 8004036:	f000 be86 	b.w	8004d46 <HAL_RCC_OscConfig+0xe02>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800403a:	1d3b      	adds	r3, r7, #4
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	685b      	ldr	r3, [r3, #4]
 8004040:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004044:	d106      	bne.n	8004054 <HAL_RCC_OscConfig+0x110>
 8004046:	4b7d      	ldr	r3, [pc, #500]	; (800423c <HAL_RCC_OscConfig+0x2f8>)
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	4a7c      	ldr	r2, [pc, #496]	; (800423c <HAL_RCC_OscConfig+0x2f8>)
 800404c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004050:	6013      	str	r3, [r2, #0]
 8004052:	e030      	b.n	80040b6 <HAL_RCC_OscConfig+0x172>
 8004054:	1d3b      	adds	r3, r7, #4
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	685b      	ldr	r3, [r3, #4]
 800405a:	2b00      	cmp	r3, #0
 800405c:	d10c      	bne.n	8004078 <HAL_RCC_OscConfig+0x134>
 800405e:	4b77      	ldr	r3, [pc, #476]	; (800423c <HAL_RCC_OscConfig+0x2f8>)
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	4a76      	ldr	r2, [pc, #472]	; (800423c <HAL_RCC_OscConfig+0x2f8>)
 8004064:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004068:	6013      	str	r3, [r2, #0]
 800406a:	4b74      	ldr	r3, [pc, #464]	; (800423c <HAL_RCC_OscConfig+0x2f8>)
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	4a73      	ldr	r2, [pc, #460]	; (800423c <HAL_RCC_OscConfig+0x2f8>)
 8004070:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004074:	6013      	str	r3, [r2, #0]
 8004076:	e01e      	b.n	80040b6 <HAL_RCC_OscConfig+0x172>
 8004078:	1d3b      	adds	r3, r7, #4
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	685b      	ldr	r3, [r3, #4]
 800407e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004082:	d10c      	bne.n	800409e <HAL_RCC_OscConfig+0x15a>
 8004084:	4b6d      	ldr	r3, [pc, #436]	; (800423c <HAL_RCC_OscConfig+0x2f8>)
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	4a6c      	ldr	r2, [pc, #432]	; (800423c <HAL_RCC_OscConfig+0x2f8>)
 800408a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800408e:	6013      	str	r3, [r2, #0]
 8004090:	4b6a      	ldr	r3, [pc, #424]	; (800423c <HAL_RCC_OscConfig+0x2f8>)
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	4a69      	ldr	r2, [pc, #420]	; (800423c <HAL_RCC_OscConfig+0x2f8>)
 8004096:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800409a:	6013      	str	r3, [r2, #0]
 800409c:	e00b      	b.n	80040b6 <HAL_RCC_OscConfig+0x172>
 800409e:	4b67      	ldr	r3, [pc, #412]	; (800423c <HAL_RCC_OscConfig+0x2f8>)
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	4a66      	ldr	r2, [pc, #408]	; (800423c <HAL_RCC_OscConfig+0x2f8>)
 80040a4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80040a8:	6013      	str	r3, [r2, #0]
 80040aa:	4b64      	ldr	r3, [pc, #400]	; (800423c <HAL_RCC_OscConfig+0x2f8>)
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	4a63      	ldr	r2, [pc, #396]	; (800423c <HAL_RCC_OscConfig+0x2f8>)
 80040b0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80040b4:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80040b6:	4b61      	ldr	r3, [pc, #388]	; (800423c <HAL_RCC_OscConfig+0x2f8>)
 80040b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040ba:	f023 020f 	bic.w	r2, r3, #15
 80040be:	1d3b      	adds	r3, r7, #4
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	689b      	ldr	r3, [r3, #8]
 80040c4:	495d      	ldr	r1, [pc, #372]	; (800423c <HAL_RCC_OscConfig+0x2f8>)
 80040c6:	4313      	orrs	r3, r2
 80040c8:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80040ca:	1d3b      	adds	r3, r7, #4
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	685b      	ldr	r3, [r3, #4]
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d059      	beq.n	8004188 <HAL_RCC_OscConfig+0x244>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80040d4:	f7fd ff84 	bl	8001fe0 <HAL_GetTick>
 80040d8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80040dc:	e00a      	b.n	80040f4 <HAL_RCC_OscConfig+0x1b0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80040de:	f7fd ff7f 	bl	8001fe0 <HAL_GetTick>
 80040e2:	4602      	mov	r2, r0
 80040e4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80040e8:	1ad3      	subs	r3, r2, r3
 80040ea:	2b64      	cmp	r3, #100	; 0x64
 80040ec:	d902      	bls.n	80040f4 <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 80040ee:	2303      	movs	r3, #3
 80040f0:	f000 be29 	b.w	8004d46 <HAL_RCC_OscConfig+0xe02>
 80040f4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80040f8:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80040fc:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8004100:	fa93 f3a3 	rbit	r3, r3
 8004104:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8004108:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800410c:	fab3 f383 	clz	r3, r3
 8004110:	b2db      	uxtb	r3, r3
 8004112:	095b      	lsrs	r3, r3, #5
 8004114:	b2db      	uxtb	r3, r3
 8004116:	f043 0301 	orr.w	r3, r3, #1
 800411a:	b2db      	uxtb	r3, r3
 800411c:	2b01      	cmp	r3, #1
 800411e:	d102      	bne.n	8004126 <HAL_RCC_OscConfig+0x1e2>
 8004120:	4b46      	ldr	r3, [pc, #280]	; (800423c <HAL_RCC_OscConfig+0x2f8>)
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	e015      	b.n	8004152 <HAL_RCC_OscConfig+0x20e>
 8004126:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800412a:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800412e:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8004132:	fa93 f3a3 	rbit	r3, r3
 8004136:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 800413a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800413e:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8004142:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8004146:	fa93 f3a3 	rbit	r3, r3
 800414a:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 800414e:	4b3b      	ldr	r3, [pc, #236]	; (800423c <HAL_RCC_OscConfig+0x2f8>)
 8004150:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004152:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004156:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 800415a:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 800415e:	fa92 f2a2 	rbit	r2, r2
 8004162:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8004166:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 800416a:	fab2 f282 	clz	r2, r2
 800416e:	b2d2      	uxtb	r2, r2
 8004170:	f042 0220 	orr.w	r2, r2, #32
 8004174:	b2d2      	uxtb	r2, r2
 8004176:	f002 021f 	and.w	r2, r2, #31
 800417a:	2101      	movs	r1, #1
 800417c:	fa01 f202 	lsl.w	r2, r1, r2
 8004180:	4013      	ands	r3, r2
 8004182:	2b00      	cmp	r3, #0
 8004184:	d0ab      	beq.n	80040de <HAL_RCC_OscConfig+0x19a>
 8004186:	e05c      	b.n	8004242 <HAL_RCC_OscConfig+0x2fe>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004188:	f7fd ff2a 	bl	8001fe0 <HAL_GetTick>
 800418c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004190:	e00a      	b.n	80041a8 <HAL_RCC_OscConfig+0x264>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004192:	f7fd ff25 	bl	8001fe0 <HAL_GetTick>
 8004196:	4602      	mov	r2, r0
 8004198:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800419c:	1ad3      	subs	r3, r2, r3
 800419e:	2b64      	cmp	r3, #100	; 0x64
 80041a0:	d902      	bls.n	80041a8 <HAL_RCC_OscConfig+0x264>
          {
            return HAL_TIMEOUT;
 80041a2:	2303      	movs	r3, #3
 80041a4:	f000 bdcf 	b.w	8004d46 <HAL_RCC_OscConfig+0xe02>
 80041a8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80041ac:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041b0:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 80041b4:	fa93 f3a3 	rbit	r3, r3
 80041b8:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 80041bc:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80041c0:	fab3 f383 	clz	r3, r3
 80041c4:	b2db      	uxtb	r3, r3
 80041c6:	095b      	lsrs	r3, r3, #5
 80041c8:	b2db      	uxtb	r3, r3
 80041ca:	f043 0301 	orr.w	r3, r3, #1
 80041ce:	b2db      	uxtb	r3, r3
 80041d0:	2b01      	cmp	r3, #1
 80041d2:	d102      	bne.n	80041da <HAL_RCC_OscConfig+0x296>
 80041d4:	4b19      	ldr	r3, [pc, #100]	; (800423c <HAL_RCC_OscConfig+0x2f8>)
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	e015      	b.n	8004206 <HAL_RCC_OscConfig+0x2c2>
 80041da:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80041de:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041e2:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 80041e6:	fa93 f3a3 	rbit	r3, r3
 80041ea:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 80041ee:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80041f2:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 80041f6:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 80041fa:	fa93 f3a3 	rbit	r3, r3
 80041fe:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8004202:	4b0e      	ldr	r3, [pc, #56]	; (800423c <HAL_RCC_OscConfig+0x2f8>)
 8004204:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004206:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800420a:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 800420e:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8004212:	fa92 f2a2 	rbit	r2, r2
 8004216:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 800421a:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 800421e:	fab2 f282 	clz	r2, r2
 8004222:	b2d2      	uxtb	r2, r2
 8004224:	f042 0220 	orr.w	r2, r2, #32
 8004228:	b2d2      	uxtb	r2, r2
 800422a:	f002 021f 	and.w	r2, r2, #31
 800422e:	2101      	movs	r1, #1
 8004230:	fa01 f202 	lsl.w	r2, r1, r2
 8004234:	4013      	ands	r3, r2
 8004236:	2b00      	cmp	r3, #0
 8004238:	d1ab      	bne.n	8004192 <HAL_RCC_OscConfig+0x24e>
 800423a:	e002      	b.n	8004242 <HAL_RCC_OscConfig+0x2fe>
 800423c:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004240:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004242:	1d3b      	adds	r3, r7, #4
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	f003 0302 	and.w	r3, r3, #2
 800424c:	2b00      	cmp	r3, #0
 800424e:	f000 816f 	beq.w	8004530 <HAL_RCC_OscConfig+0x5ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8004252:	4bd0      	ldr	r3, [pc, #832]	; (8004594 <HAL_RCC_OscConfig+0x650>)
 8004254:	685b      	ldr	r3, [r3, #4]
 8004256:	f003 030c 	and.w	r3, r3, #12
 800425a:	2b00      	cmp	r3, #0
 800425c:	d00b      	beq.n	8004276 <HAL_RCC_OscConfig+0x332>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 800425e:	4bcd      	ldr	r3, [pc, #820]	; (8004594 <HAL_RCC_OscConfig+0x650>)
 8004260:	685b      	ldr	r3, [r3, #4]
 8004262:	f003 030c 	and.w	r3, r3, #12
 8004266:	2b08      	cmp	r3, #8
 8004268:	d16c      	bne.n	8004344 <HAL_RCC_OscConfig+0x400>
 800426a:	4bca      	ldr	r3, [pc, #808]	; (8004594 <HAL_RCC_OscConfig+0x650>)
 800426c:	685b      	ldr	r3, [r3, #4]
 800426e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004272:	2b00      	cmp	r3, #0
 8004274:	d166      	bne.n	8004344 <HAL_RCC_OscConfig+0x400>
 8004276:	2302      	movs	r3, #2
 8004278:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800427c:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8004280:	fa93 f3a3 	rbit	r3, r3
 8004284:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8004288:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800428c:	fab3 f383 	clz	r3, r3
 8004290:	b2db      	uxtb	r3, r3
 8004292:	095b      	lsrs	r3, r3, #5
 8004294:	b2db      	uxtb	r3, r3
 8004296:	f043 0301 	orr.w	r3, r3, #1
 800429a:	b2db      	uxtb	r3, r3
 800429c:	2b01      	cmp	r3, #1
 800429e:	d102      	bne.n	80042a6 <HAL_RCC_OscConfig+0x362>
 80042a0:	4bbc      	ldr	r3, [pc, #752]	; (8004594 <HAL_RCC_OscConfig+0x650>)
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	e013      	b.n	80042ce <HAL_RCC_OscConfig+0x38a>
 80042a6:	2302      	movs	r3, #2
 80042a8:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80042ac:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 80042b0:	fa93 f3a3 	rbit	r3, r3
 80042b4:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 80042b8:	2302      	movs	r3, #2
 80042ba:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 80042be:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80042c2:	fa93 f3a3 	rbit	r3, r3
 80042c6:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 80042ca:	4bb2      	ldr	r3, [pc, #712]	; (8004594 <HAL_RCC_OscConfig+0x650>)
 80042cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042ce:	2202      	movs	r2, #2
 80042d0:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 80042d4:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 80042d8:	fa92 f2a2 	rbit	r2, r2
 80042dc:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 80042e0:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 80042e4:	fab2 f282 	clz	r2, r2
 80042e8:	b2d2      	uxtb	r2, r2
 80042ea:	f042 0220 	orr.w	r2, r2, #32
 80042ee:	b2d2      	uxtb	r2, r2
 80042f0:	f002 021f 	and.w	r2, r2, #31
 80042f4:	2101      	movs	r1, #1
 80042f6:	fa01 f202 	lsl.w	r2, r1, r2
 80042fa:	4013      	ands	r3, r2
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d007      	beq.n	8004310 <HAL_RCC_OscConfig+0x3cc>
 8004300:	1d3b      	adds	r3, r7, #4
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	691b      	ldr	r3, [r3, #16]
 8004306:	2b01      	cmp	r3, #1
 8004308:	d002      	beq.n	8004310 <HAL_RCC_OscConfig+0x3cc>
      {
        return HAL_ERROR;
 800430a:	2301      	movs	r3, #1
 800430c:	f000 bd1b 	b.w	8004d46 <HAL_RCC_OscConfig+0xe02>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004310:	4ba0      	ldr	r3, [pc, #640]	; (8004594 <HAL_RCC_OscConfig+0x650>)
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004318:	1d3b      	adds	r3, r7, #4
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	695b      	ldr	r3, [r3, #20]
 800431e:	21f8      	movs	r1, #248	; 0xf8
 8004320:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004324:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8004328:	fa91 f1a1 	rbit	r1, r1
 800432c:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8004330:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8004334:	fab1 f181 	clz	r1, r1
 8004338:	b2c9      	uxtb	r1, r1
 800433a:	408b      	lsls	r3, r1
 800433c:	4995      	ldr	r1, [pc, #596]	; (8004594 <HAL_RCC_OscConfig+0x650>)
 800433e:	4313      	orrs	r3, r2
 8004340:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004342:	e0f5      	b.n	8004530 <HAL_RCC_OscConfig+0x5ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004344:	1d3b      	adds	r3, r7, #4
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	691b      	ldr	r3, [r3, #16]
 800434a:	2b00      	cmp	r3, #0
 800434c:	f000 8085 	beq.w	800445a <HAL_RCC_OscConfig+0x516>
 8004350:	2301      	movs	r3, #1
 8004352:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004356:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 800435a:	fa93 f3a3 	rbit	r3, r3
 800435e:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8004362:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004366:	fab3 f383 	clz	r3, r3
 800436a:	b2db      	uxtb	r3, r3
 800436c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8004370:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8004374:	009b      	lsls	r3, r3, #2
 8004376:	461a      	mov	r2, r3
 8004378:	2301      	movs	r3, #1
 800437a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800437c:	f7fd fe30 	bl	8001fe0 <HAL_GetTick>
 8004380:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004384:	e00a      	b.n	800439c <HAL_RCC_OscConfig+0x458>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004386:	f7fd fe2b 	bl	8001fe0 <HAL_GetTick>
 800438a:	4602      	mov	r2, r0
 800438c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004390:	1ad3      	subs	r3, r2, r3
 8004392:	2b02      	cmp	r3, #2
 8004394:	d902      	bls.n	800439c <HAL_RCC_OscConfig+0x458>
          {
            return HAL_TIMEOUT;
 8004396:	2303      	movs	r3, #3
 8004398:	f000 bcd5 	b.w	8004d46 <HAL_RCC_OscConfig+0xe02>
 800439c:	2302      	movs	r3, #2
 800439e:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80043a2:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 80043a6:	fa93 f3a3 	rbit	r3, r3
 80043aa:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 80043ae:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80043b2:	fab3 f383 	clz	r3, r3
 80043b6:	b2db      	uxtb	r3, r3
 80043b8:	095b      	lsrs	r3, r3, #5
 80043ba:	b2db      	uxtb	r3, r3
 80043bc:	f043 0301 	orr.w	r3, r3, #1
 80043c0:	b2db      	uxtb	r3, r3
 80043c2:	2b01      	cmp	r3, #1
 80043c4:	d102      	bne.n	80043cc <HAL_RCC_OscConfig+0x488>
 80043c6:	4b73      	ldr	r3, [pc, #460]	; (8004594 <HAL_RCC_OscConfig+0x650>)
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	e013      	b.n	80043f4 <HAL_RCC_OscConfig+0x4b0>
 80043cc:	2302      	movs	r3, #2
 80043ce:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80043d2:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 80043d6:	fa93 f3a3 	rbit	r3, r3
 80043da:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 80043de:	2302      	movs	r3, #2
 80043e0:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 80043e4:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 80043e8:	fa93 f3a3 	rbit	r3, r3
 80043ec:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 80043f0:	4b68      	ldr	r3, [pc, #416]	; (8004594 <HAL_RCC_OscConfig+0x650>)
 80043f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043f4:	2202      	movs	r2, #2
 80043f6:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 80043fa:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 80043fe:	fa92 f2a2 	rbit	r2, r2
 8004402:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8004406:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 800440a:	fab2 f282 	clz	r2, r2
 800440e:	b2d2      	uxtb	r2, r2
 8004410:	f042 0220 	orr.w	r2, r2, #32
 8004414:	b2d2      	uxtb	r2, r2
 8004416:	f002 021f 	and.w	r2, r2, #31
 800441a:	2101      	movs	r1, #1
 800441c:	fa01 f202 	lsl.w	r2, r1, r2
 8004420:	4013      	ands	r3, r2
 8004422:	2b00      	cmp	r3, #0
 8004424:	d0af      	beq.n	8004386 <HAL_RCC_OscConfig+0x442>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004426:	4b5b      	ldr	r3, [pc, #364]	; (8004594 <HAL_RCC_OscConfig+0x650>)
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800442e:	1d3b      	adds	r3, r7, #4
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	695b      	ldr	r3, [r3, #20]
 8004434:	21f8      	movs	r1, #248	; 0xf8
 8004436:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800443a:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 800443e:	fa91 f1a1 	rbit	r1, r1
 8004442:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8004446:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 800444a:	fab1 f181 	clz	r1, r1
 800444e:	b2c9      	uxtb	r1, r1
 8004450:	408b      	lsls	r3, r1
 8004452:	4950      	ldr	r1, [pc, #320]	; (8004594 <HAL_RCC_OscConfig+0x650>)
 8004454:	4313      	orrs	r3, r2
 8004456:	600b      	str	r3, [r1, #0]
 8004458:	e06a      	b.n	8004530 <HAL_RCC_OscConfig+0x5ec>
 800445a:	2301      	movs	r3, #1
 800445c:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004460:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8004464:	fa93 f3a3 	rbit	r3, r3
 8004468:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 800446c:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004470:	fab3 f383 	clz	r3, r3
 8004474:	b2db      	uxtb	r3, r3
 8004476:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800447a:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800447e:	009b      	lsls	r3, r3, #2
 8004480:	461a      	mov	r2, r3
 8004482:	2300      	movs	r3, #0
 8004484:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004486:	f7fd fdab 	bl	8001fe0 <HAL_GetTick>
 800448a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800448e:	e00a      	b.n	80044a6 <HAL_RCC_OscConfig+0x562>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004490:	f7fd fda6 	bl	8001fe0 <HAL_GetTick>
 8004494:	4602      	mov	r2, r0
 8004496:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800449a:	1ad3      	subs	r3, r2, r3
 800449c:	2b02      	cmp	r3, #2
 800449e:	d902      	bls.n	80044a6 <HAL_RCC_OscConfig+0x562>
          {
            return HAL_TIMEOUT;
 80044a0:	2303      	movs	r3, #3
 80044a2:	f000 bc50 	b.w	8004d46 <HAL_RCC_OscConfig+0xe02>
 80044a6:	2302      	movs	r3, #2
 80044a8:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80044ac:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80044b0:	fa93 f3a3 	rbit	r3, r3
 80044b4:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 80044b8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80044bc:	fab3 f383 	clz	r3, r3
 80044c0:	b2db      	uxtb	r3, r3
 80044c2:	095b      	lsrs	r3, r3, #5
 80044c4:	b2db      	uxtb	r3, r3
 80044c6:	f043 0301 	orr.w	r3, r3, #1
 80044ca:	b2db      	uxtb	r3, r3
 80044cc:	2b01      	cmp	r3, #1
 80044ce:	d102      	bne.n	80044d6 <HAL_RCC_OscConfig+0x592>
 80044d0:	4b30      	ldr	r3, [pc, #192]	; (8004594 <HAL_RCC_OscConfig+0x650>)
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	e013      	b.n	80044fe <HAL_RCC_OscConfig+0x5ba>
 80044d6:	2302      	movs	r3, #2
 80044d8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80044dc:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80044e0:	fa93 f3a3 	rbit	r3, r3
 80044e4:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80044e8:	2302      	movs	r3, #2
 80044ea:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80044ee:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80044f2:	fa93 f3a3 	rbit	r3, r3
 80044f6:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80044fa:	4b26      	ldr	r3, [pc, #152]	; (8004594 <HAL_RCC_OscConfig+0x650>)
 80044fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044fe:	2202      	movs	r2, #2
 8004500:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8004504:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8004508:	fa92 f2a2 	rbit	r2, r2
 800450c:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8004510:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8004514:	fab2 f282 	clz	r2, r2
 8004518:	b2d2      	uxtb	r2, r2
 800451a:	f042 0220 	orr.w	r2, r2, #32
 800451e:	b2d2      	uxtb	r2, r2
 8004520:	f002 021f 	and.w	r2, r2, #31
 8004524:	2101      	movs	r1, #1
 8004526:	fa01 f202 	lsl.w	r2, r1, r2
 800452a:	4013      	ands	r3, r2
 800452c:	2b00      	cmp	r3, #0
 800452e:	d1af      	bne.n	8004490 <HAL_RCC_OscConfig+0x54c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004530:	1d3b      	adds	r3, r7, #4
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	f003 0308 	and.w	r3, r3, #8
 800453a:	2b00      	cmp	r3, #0
 800453c:	f000 80da 	beq.w	80046f4 <HAL_RCC_OscConfig+0x7b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004540:	1d3b      	adds	r3, r7, #4
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	699b      	ldr	r3, [r3, #24]
 8004546:	2b00      	cmp	r3, #0
 8004548:	d069      	beq.n	800461e <HAL_RCC_OscConfig+0x6da>
 800454a:	2301      	movs	r3, #1
 800454c:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004550:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8004554:	fa93 f3a3 	rbit	r3, r3
 8004558:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 800455c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004560:	fab3 f383 	clz	r3, r3
 8004564:	b2db      	uxtb	r3, r3
 8004566:	461a      	mov	r2, r3
 8004568:	4b0b      	ldr	r3, [pc, #44]	; (8004598 <HAL_RCC_OscConfig+0x654>)
 800456a:	4413      	add	r3, r2
 800456c:	009b      	lsls	r3, r3, #2
 800456e:	461a      	mov	r2, r3
 8004570:	2301      	movs	r3, #1
 8004572:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004574:	f7fd fd34 	bl	8001fe0 <HAL_GetTick>
 8004578:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800457c:	e00e      	b.n	800459c <HAL_RCC_OscConfig+0x658>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800457e:	f7fd fd2f 	bl	8001fe0 <HAL_GetTick>
 8004582:	4602      	mov	r2, r0
 8004584:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004588:	1ad3      	subs	r3, r2, r3
 800458a:	2b02      	cmp	r3, #2
 800458c:	d906      	bls.n	800459c <HAL_RCC_OscConfig+0x658>
        {
          return HAL_TIMEOUT;
 800458e:	2303      	movs	r3, #3
 8004590:	e3d9      	b.n	8004d46 <HAL_RCC_OscConfig+0xe02>
 8004592:	bf00      	nop
 8004594:	40021000 	.word	0x40021000
 8004598:	10908120 	.word	0x10908120
 800459c:	2302      	movs	r3, #2
 800459e:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80045a2:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80045a6:	fa93 f3a3 	rbit	r3, r3
 80045aa:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80045ae:	f507 7380 	add.w	r3, r7, #256	; 0x100
 80045b2:	2202      	movs	r2, #2
 80045b4:	601a      	str	r2, [r3, #0]
 80045b6:	f507 7380 	add.w	r3, r7, #256	; 0x100
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	fa93 f2a3 	rbit	r2, r3
 80045c0:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 80045c4:	601a      	str	r2, [r3, #0]
 80045c6:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 80045ca:	2202      	movs	r2, #2
 80045cc:	601a      	str	r2, [r3, #0]
 80045ce:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	fa93 f2a3 	rbit	r2, r3
 80045d8:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 80045dc:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80045de:	4ba5      	ldr	r3, [pc, #660]	; (8004874 <HAL_RCC_OscConfig+0x930>)
 80045e0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80045e2:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 80045e6:	2102      	movs	r1, #2
 80045e8:	6019      	str	r1, [r3, #0]
 80045ea:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	fa93 f1a3 	rbit	r1, r3
 80045f4:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 80045f8:	6019      	str	r1, [r3, #0]
  return result;
 80045fa:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	fab3 f383 	clz	r3, r3
 8004604:	b2db      	uxtb	r3, r3
 8004606:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800460a:	b2db      	uxtb	r3, r3
 800460c:	f003 031f 	and.w	r3, r3, #31
 8004610:	2101      	movs	r1, #1
 8004612:	fa01 f303 	lsl.w	r3, r1, r3
 8004616:	4013      	ands	r3, r2
 8004618:	2b00      	cmp	r3, #0
 800461a:	d0b0      	beq.n	800457e <HAL_RCC_OscConfig+0x63a>
 800461c:	e06a      	b.n	80046f4 <HAL_RCC_OscConfig+0x7b0>
 800461e:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8004622:	2201      	movs	r2, #1
 8004624:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004626:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	fa93 f2a3 	rbit	r2, r3
 8004630:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8004634:	601a      	str	r2, [r3, #0]
  return result;
 8004636:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 800463a:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800463c:	fab3 f383 	clz	r3, r3
 8004640:	b2db      	uxtb	r3, r3
 8004642:	461a      	mov	r2, r3
 8004644:	4b8c      	ldr	r3, [pc, #560]	; (8004878 <HAL_RCC_OscConfig+0x934>)
 8004646:	4413      	add	r3, r2
 8004648:	009b      	lsls	r3, r3, #2
 800464a:	461a      	mov	r2, r3
 800464c:	2300      	movs	r3, #0
 800464e:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004650:	f7fd fcc6 	bl	8001fe0 <HAL_GetTick>
 8004654:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004658:	e009      	b.n	800466e <HAL_RCC_OscConfig+0x72a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800465a:	f7fd fcc1 	bl	8001fe0 <HAL_GetTick>
 800465e:	4602      	mov	r2, r0
 8004660:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004664:	1ad3      	subs	r3, r2, r3
 8004666:	2b02      	cmp	r3, #2
 8004668:	d901      	bls.n	800466e <HAL_RCC_OscConfig+0x72a>
        {
          return HAL_TIMEOUT;
 800466a:	2303      	movs	r3, #3
 800466c:	e36b      	b.n	8004d46 <HAL_RCC_OscConfig+0xe02>
 800466e:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8004672:	2202      	movs	r2, #2
 8004674:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004676:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	fa93 f2a3 	rbit	r2, r3
 8004680:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8004684:	601a      	str	r2, [r3, #0]
 8004686:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 800468a:	2202      	movs	r2, #2
 800468c:	601a      	str	r2, [r3, #0]
 800468e:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	fa93 f2a3 	rbit	r2, r3
 8004698:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800469c:	601a      	str	r2, [r3, #0]
 800469e:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 80046a2:	2202      	movs	r2, #2
 80046a4:	601a      	str	r2, [r3, #0]
 80046a6:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	fa93 f2a3 	rbit	r2, r3
 80046b0:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80046b4:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80046b6:	4b6f      	ldr	r3, [pc, #444]	; (8004874 <HAL_RCC_OscConfig+0x930>)
 80046b8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80046ba:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 80046be:	2102      	movs	r1, #2
 80046c0:	6019      	str	r1, [r3, #0]
 80046c2:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	fa93 f1a3 	rbit	r1, r3
 80046cc:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80046d0:	6019      	str	r1, [r3, #0]
  return result;
 80046d2:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	fab3 f383 	clz	r3, r3
 80046dc:	b2db      	uxtb	r3, r3
 80046de:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80046e2:	b2db      	uxtb	r3, r3
 80046e4:	f003 031f 	and.w	r3, r3, #31
 80046e8:	2101      	movs	r1, #1
 80046ea:	fa01 f303 	lsl.w	r3, r1, r3
 80046ee:	4013      	ands	r3, r2
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d1b2      	bne.n	800465a <HAL_RCC_OscConfig+0x716>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80046f4:	1d3b      	adds	r3, r7, #4
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	f003 0304 	and.w	r3, r3, #4
 80046fe:	2b00      	cmp	r3, #0
 8004700:	f000 8158 	beq.w	80049b4 <HAL_RCC_OscConfig+0xa70>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004704:	2300      	movs	r3, #0
 8004706:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800470a:	4b5a      	ldr	r3, [pc, #360]	; (8004874 <HAL_RCC_OscConfig+0x930>)
 800470c:	69db      	ldr	r3, [r3, #28]
 800470e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004712:	2b00      	cmp	r3, #0
 8004714:	d112      	bne.n	800473c <HAL_RCC_OscConfig+0x7f8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004716:	4b57      	ldr	r3, [pc, #348]	; (8004874 <HAL_RCC_OscConfig+0x930>)
 8004718:	69db      	ldr	r3, [r3, #28]
 800471a:	4a56      	ldr	r2, [pc, #344]	; (8004874 <HAL_RCC_OscConfig+0x930>)
 800471c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004720:	61d3      	str	r3, [r2, #28]
 8004722:	4b54      	ldr	r3, [pc, #336]	; (8004874 <HAL_RCC_OscConfig+0x930>)
 8004724:	69db      	ldr	r3, [r3, #28]
 8004726:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 800472a:	f107 0308 	add.w	r3, r7, #8
 800472e:	601a      	str	r2, [r3, #0]
 8004730:	f107 0308 	add.w	r3, r7, #8
 8004734:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8004736:	2301      	movs	r3, #1
 8004738:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800473c:	4b4f      	ldr	r3, [pc, #316]	; (800487c <HAL_RCC_OscConfig+0x938>)
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004744:	2b00      	cmp	r3, #0
 8004746:	d11a      	bne.n	800477e <HAL_RCC_OscConfig+0x83a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004748:	4b4c      	ldr	r3, [pc, #304]	; (800487c <HAL_RCC_OscConfig+0x938>)
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	4a4b      	ldr	r2, [pc, #300]	; (800487c <HAL_RCC_OscConfig+0x938>)
 800474e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004752:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004754:	f7fd fc44 	bl	8001fe0 <HAL_GetTick>
 8004758:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800475c:	e009      	b.n	8004772 <HAL_RCC_OscConfig+0x82e>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800475e:	f7fd fc3f 	bl	8001fe0 <HAL_GetTick>
 8004762:	4602      	mov	r2, r0
 8004764:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004768:	1ad3      	subs	r3, r2, r3
 800476a:	2b64      	cmp	r3, #100	; 0x64
 800476c:	d901      	bls.n	8004772 <HAL_RCC_OscConfig+0x82e>
        {
          return HAL_TIMEOUT;
 800476e:	2303      	movs	r3, #3
 8004770:	e2e9      	b.n	8004d46 <HAL_RCC_OscConfig+0xe02>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004772:	4b42      	ldr	r3, [pc, #264]	; (800487c <HAL_RCC_OscConfig+0x938>)
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800477a:	2b00      	cmp	r3, #0
 800477c:	d0ef      	beq.n	800475e <HAL_RCC_OscConfig+0x81a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800477e:	1d3b      	adds	r3, r7, #4
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	68db      	ldr	r3, [r3, #12]
 8004784:	2b01      	cmp	r3, #1
 8004786:	d106      	bne.n	8004796 <HAL_RCC_OscConfig+0x852>
 8004788:	4b3a      	ldr	r3, [pc, #232]	; (8004874 <HAL_RCC_OscConfig+0x930>)
 800478a:	6a1b      	ldr	r3, [r3, #32]
 800478c:	4a39      	ldr	r2, [pc, #228]	; (8004874 <HAL_RCC_OscConfig+0x930>)
 800478e:	f043 0301 	orr.w	r3, r3, #1
 8004792:	6213      	str	r3, [r2, #32]
 8004794:	e02f      	b.n	80047f6 <HAL_RCC_OscConfig+0x8b2>
 8004796:	1d3b      	adds	r3, r7, #4
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	68db      	ldr	r3, [r3, #12]
 800479c:	2b00      	cmp	r3, #0
 800479e:	d10c      	bne.n	80047ba <HAL_RCC_OscConfig+0x876>
 80047a0:	4b34      	ldr	r3, [pc, #208]	; (8004874 <HAL_RCC_OscConfig+0x930>)
 80047a2:	6a1b      	ldr	r3, [r3, #32]
 80047a4:	4a33      	ldr	r2, [pc, #204]	; (8004874 <HAL_RCC_OscConfig+0x930>)
 80047a6:	f023 0301 	bic.w	r3, r3, #1
 80047aa:	6213      	str	r3, [r2, #32]
 80047ac:	4b31      	ldr	r3, [pc, #196]	; (8004874 <HAL_RCC_OscConfig+0x930>)
 80047ae:	6a1b      	ldr	r3, [r3, #32]
 80047b0:	4a30      	ldr	r2, [pc, #192]	; (8004874 <HAL_RCC_OscConfig+0x930>)
 80047b2:	f023 0304 	bic.w	r3, r3, #4
 80047b6:	6213      	str	r3, [r2, #32]
 80047b8:	e01d      	b.n	80047f6 <HAL_RCC_OscConfig+0x8b2>
 80047ba:	1d3b      	adds	r3, r7, #4
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	68db      	ldr	r3, [r3, #12]
 80047c0:	2b05      	cmp	r3, #5
 80047c2:	d10c      	bne.n	80047de <HAL_RCC_OscConfig+0x89a>
 80047c4:	4b2b      	ldr	r3, [pc, #172]	; (8004874 <HAL_RCC_OscConfig+0x930>)
 80047c6:	6a1b      	ldr	r3, [r3, #32]
 80047c8:	4a2a      	ldr	r2, [pc, #168]	; (8004874 <HAL_RCC_OscConfig+0x930>)
 80047ca:	f043 0304 	orr.w	r3, r3, #4
 80047ce:	6213      	str	r3, [r2, #32]
 80047d0:	4b28      	ldr	r3, [pc, #160]	; (8004874 <HAL_RCC_OscConfig+0x930>)
 80047d2:	6a1b      	ldr	r3, [r3, #32]
 80047d4:	4a27      	ldr	r2, [pc, #156]	; (8004874 <HAL_RCC_OscConfig+0x930>)
 80047d6:	f043 0301 	orr.w	r3, r3, #1
 80047da:	6213      	str	r3, [r2, #32]
 80047dc:	e00b      	b.n	80047f6 <HAL_RCC_OscConfig+0x8b2>
 80047de:	4b25      	ldr	r3, [pc, #148]	; (8004874 <HAL_RCC_OscConfig+0x930>)
 80047e0:	6a1b      	ldr	r3, [r3, #32]
 80047e2:	4a24      	ldr	r2, [pc, #144]	; (8004874 <HAL_RCC_OscConfig+0x930>)
 80047e4:	f023 0301 	bic.w	r3, r3, #1
 80047e8:	6213      	str	r3, [r2, #32]
 80047ea:	4b22      	ldr	r3, [pc, #136]	; (8004874 <HAL_RCC_OscConfig+0x930>)
 80047ec:	6a1b      	ldr	r3, [r3, #32]
 80047ee:	4a21      	ldr	r2, [pc, #132]	; (8004874 <HAL_RCC_OscConfig+0x930>)
 80047f0:	f023 0304 	bic.w	r3, r3, #4
 80047f4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80047f6:	1d3b      	adds	r3, r7, #4
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	68db      	ldr	r3, [r3, #12]
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d06b      	beq.n	80048d8 <HAL_RCC_OscConfig+0x994>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004800:	f7fd fbee 	bl	8001fe0 <HAL_GetTick>
 8004804:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004808:	e00b      	b.n	8004822 <HAL_RCC_OscConfig+0x8de>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800480a:	f7fd fbe9 	bl	8001fe0 <HAL_GetTick>
 800480e:	4602      	mov	r2, r0
 8004810:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004814:	1ad3      	subs	r3, r2, r3
 8004816:	f241 3288 	movw	r2, #5000	; 0x1388
 800481a:	4293      	cmp	r3, r2
 800481c:	d901      	bls.n	8004822 <HAL_RCC_OscConfig+0x8de>
        {
          return HAL_TIMEOUT;
 800481e:	2303      	movs	r3, #3
 8004820:	e291      	b.n	8004d46 <HAL_RCC_OscConfig+0xe02>
 8004822:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8004826:	2202      	movs	r2, #2
 8004828:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800482a:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	fa93 f2a3 	rbit	r2, r3
 8004834:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8004838:	601a      	str	r2, [r3, #0]
 800483a:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 800483e:	2202      	movs	r2, #2
 8004840:	601a      	str	r2, [r3, #0]
 8004842:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	fa93 f2a3 	rbit	r2, r3
 800484c:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8004850:	601a      	str	r2, [r3, #0]
  return result;
 8004852:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8004856:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004858:	fab3 f383 	clz	r3, r3
 800485c:	b2db      	uxtb	r3, r3
 800485e:	095b      	lsrs	r3, r3, #5
 8004860:	b2db      	uxtb	r3, r3
 8004862:	f043 0302 	orr.w	r3, r3, #2
 8004866:	b2db      	uxtb	r3, r3
 8004868:	2b02      	cmp	r3, #2
 800486a:	d109      	bne.n	8004880 <HAL_RCC_OscConfig+0x93c>
 800486c:	4b01      	ldr	r3, [pc, #4]	; (8004874 <HAL_RCC_OscConfig+0x930>)
 800486e:	6a1b      	ldr	r3, [r3, #32]
 8004870:	e014      	b.n	800489c <HAL_RCC_OscConfig+0x958>
 8004872:	bf00      	nop
 8004874:	40021000 	.word	0x40021000
 8004878:	10908120 	.word	0x10908120
 800487c:	40007000 	.word	0x40007000
 8004880:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8004884:	2202      	movs	r2, #2
 8004886:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004888:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	fa93 f2a3 	rbit	r2, r3
 8004892:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8004896:	601a      	str	r2, [r3, #0]
 8004898:	4bbb      	ldr	r3, [pc, #748]	; (8004b88 <HAL_RCC_OscConfig+0xc44>)
 800489a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800489c:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 80048a0:	2102      	movs	r1, #2
 80048a2:	6011      	str	r1, [r2, #0]
 80048a4:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 80048a8:	6812      	ldr	r2, [r2, #0]
 80048aa:	fa92 f1a2 	rbit	r1, r2
 80048ae:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 80048b2:	6011      	str	r1, [r2, #0]
  return result;
 80048b4:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 80048b8:	6812      	ldr	r2, [r2, #0]
 80048ba:	fab2 f282 	clz	r2, r2
 80048be:	b2d2      	uxtb	r2, r2
 80048c0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80048c4:	b2d2      	uxtb	r2, r2
 80048c6:	f002 021f 	and.w	r2, r2, #31
 80048ca:	2101      	movs	r1, #1
 80048cc:	fa01 f202 	lsl.w	r2, r1, r2
 80048d0:	4013      	ands	r3, r2
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d099      	beq.n	800480a <HAL_RCC_OscConfig+0x8c6>
 80048d6:	e063      	b.n	80049a0 <HAL_RCC_OscConfig+0xa5c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80048d8:	f7fd fb82 	bl	8001fe0 <HAL_GetTick>
 80048dc:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80048e0:	e00b      	b.n	80048fa <HAL_RCC_OscConfig+0x9b6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80048e2:	f7fd fb7d 	bl	8001fe0 <HAL_GetTick>
 80048e6:	4602      	mov	r2, r0
 80048e8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80048ec:	1ad3      	subs	r3, r2, r3
 80048ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80048f2:	4293      	cmp	r3, r2
 80048f4:	d901      	bls.n	80048fa <HAL_RCC_OscConfig+0x9b6>
        {
          return HAL_TIMEOUT;
 80048f6:	2303      	movs	r3, #3
 80048f8:	e225      	b.n	8004d46 <HAL_RCC_OscConfig+0xe02>
 80048fa:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80048fe:	2202      	movs	r2, #2
 8004900:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004902:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	fa93 f2a3 	rbit	r2, r3
 800490c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8004910:	601a      	str	r2, [r3, #0]
 8004912:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8004916:	2202      	movs	r2, #2
 8004918:	601a      	str	r2, [r3, #0]
 800491a:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	fa93 f2a3 	rbit	r2, r3
 8004924:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8004928:	601a      	str	r2, [r3, #0]
  return result;
 800492a:	f107 0394 	add.w	r3, r7, #148	; 0x94
 800492e:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004930:	fab3 f383 	clz	r3, r3
 8004934:	b2db      	uxtb	r3, r3
 8004936:	095b      	lsrs	r3, r3, #5
 8004938:	b2db      	uxtb	r3, r3
 800493a:	f043 0302 	orr.w	r3, r3, #2
 800493e:	b2db      	uxtb	r3, r3
 8004940:	2b02      	cmp	r3, #2
 8004942:	d102      	bne.n	800494a <HAL_RCC_OscConfig+0xa06>
 8004944:	4b90      	ldr	r3, [pc, #576]	; (8004b88 <HAL_RCC_OscConfig+0xc44>)
 8004946:	6a1b      	ldr	r3, [r3, #32]
 8004948:	e00d      	b.n	8004966 <HAL_RCC_OscConfig+0xa22>
 800494a:	f107 0390 	add.w	r3, r7, #144	; 0x90
 800494e:	2202      	movs	r2, #2
 8004950:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004952:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	fa93 f2a3 	rbit	r2, r3
 800495c:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8004960:	601a      	str	r2, [r3, #0]
 8004962:	4b89      	ldr	r3, [pc, #548]	; (8004b88 <HAL_RCC_OscConfig+0xc44>)
 8004964:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004966:	f107 0288 	add.w	r2, r7, #136	; 0x88
 800496a:	2102      	movs	r1, #2
 800496c:	6011      	str	r1, [r2, #0]
 800496e:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8004972:	6812      	ldr	r2, [r2, #0]
 8004974:	fa92 f1a2 	rbit	r1, r2
 8004978:	f107 0284 	add.w	r2, r7, #132	; 0x84
 800497c:	6011      	str	r1, [r2, #0]
  return result;
 800497e:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8004982:	6812      	ldr	r2, [r2, #0]
 8004984:	fab2 f282 	clz	r2, r2
 8004988:	b2d2      	uxtb	r2, r2
 800498a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800498e:	b2d2      	uxtb	r2, r2
 8004990:	f002 021f 	and.w	r2, r2, #31
 8004994:	2101      	movs	r1, #1
 8004996:	fa01 f202 	lsl.w	r2, r1, r2
 800499a:	4013      	ands	r3, r2
 800499c:	2b00      	cmp	r3, #0
 800499e:	d1a0      	bne.n	80048e2 <HAL_RCC_OscConfig+0x99e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80049a0:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 80049a4:	2b01      	cmp	r3, #1
 80049a6:	d105      	bne.n	80049b4 <HAL_RCC_OscConfig+0xa70>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80049a8:	4b77      	ldr	r3, [pc, #476]	; (8004b88 <HAL_RCC_OscConfig+0xc44>)
 80049aa:	69db      	ldr	r3, [r3, #28]
 80049ac:	4a76      	ldr	r2, [pc, #472]	; (8004b88 <HAL_RCC_OscConfig+0xc44>)
 80049ae:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80049b2:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80049b4:	1d3b      	adds	r3, r7, #4
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	69db      	ldr	r3, [r3, #28]
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	f000 81c2 	beq.w	8004d44 <HAL_RCC_OscConfig+0xe00>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80049c0:	4b71      	ldr	r3, [pc, #452]	; (8004b88 <HAL_RCC_OscConfig+0xc44>)
 80049c2:	685b      	ldr	r3, [r3, #4]
 80049c4:	f003 030c 	and.w	r3, r3, #12
 80049c8:	2b08      	cmp	r3, #8
 80049ca:	f000 819c 	beq.w	8004d06 <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80049ce:	1d3b      	adds	r3, r7, #4
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	69db      	ldr	r3, [r3, #28]
 80049d4:	2b02      	cmp	r3, #2
 80049d6:	f040 8114 	bne.w	8004c02 <HAL_RCC_OscConfig+0xcbe>
 80049da:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80049de:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80049e2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80049e4:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	fa93 f2a3 	rbit	r2, r3
 80049ee:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80049f2:	601a      	str	r2, [r3, #0]
  return result;
 80049f4:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80049f8:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80049fa:	fab3 f383 	clz	r3, r3
 80049fe:	b2db      	uxtb	r3, r3
 8004a00:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8004a04:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8004a08:	009b      	lsls	r3, r3, #2
 8004a0a:	461a      	mov	r2, r3
 8004a0c:	2300      	movs	r3, #0
 8004a0e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a10:	f7fd fae6 	bl	8001fe0 <HAL_GetTick>
 8004a14:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004a18:	e009      	b.n	8004a2e <HAL_RCC_OscConfig+0xaea>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004a1a:	f7fd fae1 	bl	8001fe0 <HAL_GetTick>
 8004a1e:	4602      	mov	r2, r0
 8004a20:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004a24:	1ad3      	subs	r3, r2, r3
 8004a26:	2b02      	cmp	r3, #2
 8004a28:	d901      	bls.n	8004a2e <HAL_RCC_OscConfig+0xaea>
          {
            return HAL_TIMEOUT;
 8004a2a:	2303      	movs	r3, #3
 8004a2c:	e18b      	b.n	8004d46 <HAL_RCC_OscConfig+0xe02>
 8004a2e:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8004a32:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004a36:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a38:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	fa93 f2a3 	rbit	r2, r3
 8004a42:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8004a46:	601a      	str	r2, [r3, #0]
  return result;
 8004a48:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8004a4c:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004a4e:	fab3 f383 	clz	r3, r3
 8004a52:	b2db      	uxtb	r3, r3
 8004a54:	095b      	lsrs	r3, r3, #5
 8004a56:	b2db      	uxtb	r3, r3
 8004a58:	f043 0301 	orr.w	r3, r3, #1
 8004a5c:	b2db      	uxtb	r3, r3
 8004a5e:	2b01      	cmp	r3, #1
 8004a60:	d102      	bne.n	8004a68 <HAL_RCC_OscConfig+0xb24>
 8004a62:	4b49      	ldr	r3, [pc, #292]	; (8004b88 <HAL_RCC_OscConfig+0xc44>)
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	e01b      	b.n	8004aa0 <HAL_RCC_OscConfig+0xb5c>
 8004a68:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8004a6c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004a70:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a72:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	fa93 f2a3 	rbit	r2, r3
 8004a7c:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8004a80:	601a      	str	r2, [r3, #0]
 8004a82:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8004a86:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004a8a:	601a      	str	r2, [r3, #0]
 8004a8c:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	fa93 f2a3 	rbit	r2, r3
 8004a96:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8004a9a:	601a      	str	r2, [r3, #0]
 8004a9c:	4b3a      	ldr	r3, [pc, #232]	; (8004b88 <HAL_RCC_OscConfig+0xc44>)
 8004a9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004aa0:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8004aa4:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8004aa8:	6011      	str	r1, [r2, #0]
 8004aaa:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8004aae:	6812      	ldr	r2, [r2, #0]
 8004ab0:	fa92 f1a2 	rbit	r1, r2
 8004ab4:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8004ab8:	6011      	str	r1, [r2, #0]
  return result;
 8004aba:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8004abe:	6812      	ldr	r2, [r2, #0]
 8004ac0:	fab2 f282 	clz	r2, r2
 8004ac4:	b2d2      	uxtb	r2, r2
 8004ac6:	f042 0220 	orr.w	r2, r2, #32
 8004aca:	b2d2      	uxtb	r2, r2
 8004acc:	f002 021f 	and.w	r2, r2, #31
 8004ad0:	2101      	movs	r1, #1
 8004ad2:	fa01 f202 	lsl.w	r2, r1, r2
 8004ad6:	4013      	ands	r3, r2
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d19e      	bne.n	8004a1a <HAL_RCC_OscConfig+0xad6>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004adc:	4b2a      	ldr	r3, [pc, #168]	; (8004b88 <HAL_RCC_OscConfig+0xc44>)
 8004ade:	685b      	ldr	r3, [r3, #4]
 8004ae0:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8004ae4:	1d3b      	adds	r3, r7, #4
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8004aea:	1d3b      	adds	r3, r7, #4
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	6a1b      	ldr	r3, [r3, #32]
 8004af0:	430b      	orrs	r3, r1
 8004af2:	4925      	ldr	r1, [pc, #148]	; (8004b88 <HAL_RCC_OscConfig+0xc44>)
 8004af4:	4313      	orrs	r3, r2
 8004af6:	604b      	str	r3, [r1, #4]
 8004af8:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8004afc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004b00:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b02:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	fa93 f2a3 	rbit	r2, r3
 8004b0c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8004b10:	601a      	str	r2, [r3, #0]
  return result;
 8004b12:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8004b16:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004b18:	fab3 f383 	clz	r3, r3
 8004b1c:	b2db      	uxtb	r3, r3
 8004b1e:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8004b22:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8004b26:	009b      	lsls	r3, r3, #2
 8004b28:	461a      	mov	r2, r3
 8004b2a:	2301      	movs	r3, #1
 8004b2c:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b2e:	f7fd fa57 	bl	8001fe0 <HAL_GetTick>
 8004b32:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004b36:	e009      	b.n	8004b4c <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004b38:	f7fd fa52 	bl	8001fe0 <HAL_GetTick>
 8004b3c:	4602      	mov	r2, r0
 8004b3e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004b42:	1ad3      	subs	r3, r2, r3
 8004b44:	2b02      	cmp	r3, #2
 8004b46:	d901      	bls.n	8004b4c <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 8004b48:	2303      	movs	r3, #3
 8004b4a:	e0fc      	b.n	8004d46 <HAL_RCC_OscConfig+0xe02>
 8004b4c:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8004b50:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004b54:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b56:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	fa93 f2a3 	rbit	r2, r3
 8004b60:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8004b64:	601a      	str	r2, [r3, #0]
  return result;
 8004b66:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8004b6a:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004b6c:	fab3 f383 	clz	r3, r3
 8004b70:	b2db      	uxtb	r3, r3
 8004b72:	095b      	lsrs	r3, r3, #5
 8004b74:	b2db      	uxtb	r3, r3
 8004b76:	f043 0301 	orr.w	r3, r3, #1
 8004b7a:	b2db      	uxtb	r3, r3
 8004b7c:	2b01      	cmp	r3, #1
 8004b7e:	d105      	bne.n	8004b8c <HAL_RCC_OscConfig+0xc48>
 8004b80:	4b01      	ldr	r3, [pc, #4]	; (8004b88 <HAL_RCC_OscConfig+0xc44>)
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	e01e      	b.n	8004bc4 <HAL_RCC_OscConfig+0xc80>
 8004b86:	bf00      	nop
 8004b88:	40021000 	.word	0x40021000
 8004b8c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8004b90:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004b94:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b96:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	fa93 f2a3 	rbit	r2, r3
 8004ba0:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8004ba4:	601a      	str	r2, [r3, #0]
 8004ba6:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8004baa:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004bae:	601a      	str	r2, [r3, #0]
 8004bb0:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	fa93 f2a3 	rbit	r2, r3
 8004bba:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8004bbe:	601a      	str	r2, [r3, #0]
 8004bc0:	4b63      	ldr	r3, [pc, #396]	; (8004d50 <HAL_RCC_OscConfig+0xe0c>)
 8004bc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bc4:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8004bc8:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8004bcc:	6011      	str	r1, [r2, #0]
 8004bce:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8004bd2:	6812      	ldr	r2, [r2, #0]
 8004bd4:	fa92 f1a2 	rbit	r1, r2
 8004bd8:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8004bdc:	6011      	str	r1, [r2, #0]
  return result;
 8004bde:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8004be2:	6812      	ldr	r2, [r2, #0]
 8004be4:	fab2 f282 	clz	r2, r2
 8004be8:	b2d2      	uxtb	r2, r2
 8004bea:	f042 0220 	orr.w	r2, r2, #32
 8004bee:	b2d2      	uxtb	r2, r2
 8004bf0:	f002 021f 	and.w	r2, r2, #31
 8004bf4:	2101      	movs	r1, #1
 8004bf6:	fa01 f202 	lsl.w	r2, r1, r2
 8004bfa:	4013      	ands	r3, r2
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d09b      	beq.n	8004b38 <HAL_RCC_OscConfig+0xbf4>
 8004c00:	e0a0      	b.n	8004d44 <HAL_RCC_OscConfig+0xe00>
 8004c02:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8004c06:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004c0a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c0c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	fa93 f2a3 	rbit	r2, r3
 8004c16:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004c1a:	601a      	str	r2, [r3, #0]
  return result;
 8004c1c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004c20:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004c22:	fab3 f383 	clz	r3, r3
 8004c26:	b2db      	uxtb	r3, r3
 8004c28:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8004c2c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8004c30:	009b      	lsls	r3, r3, #2
 8004c32:	461a      	mov	r2, r3
 8004c34:	2300      	movs	r3, #0
 8004c36:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c38:	f7fd f9d2 	bl	8001fe0 <HAL_GetTick>
 8004c3c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004c40:	e009      	b.n	8004c56 <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004c42:	f7fd f9cd 	bl	8001fe0 <HAL_GetTick>
 8004c46:	4602      	mov	r2, r0
 8004c48:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004c4c:	1ad3      	subs	r3, r2, r3
 8004c4e:	2b02      	cmp	r3, #2
 8004c50:	d901      	bls.n	8004c56 <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 8004c52:	2303      	movs	r3, #3
 8004c54:	e077      	b.n	8004d46 <HAL_RCC_OscConfig+0xe02>
 8004c56:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004c5a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004c5e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c60:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	fa93 f2a3 	rbit	r2, r3
 8004c6a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004c6e:	601a      	str	r2, [r3, #0]
  return result;
 8004c70:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004c74:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004c76:	fab3 f383 	clz	r3, r3
 8004c7a:	b2db      	uxtb	r3, r3
 8004c7c:	095b      	lsrs	r3, r3, #5
 8004c7e:	b2db      	uxtb	r3, r3
 8004c80:	f043 0301 	orr.w	r3, r3, #1
 8004c84:	b2db      	uxtb	r3, r3
 8004c86:	2b01      	cmp	r3, #1
 8004c88:	d102      	bne.n	8004c90 <HAL_RCC_OscConfig+0xd4c>
 8004c8a:	4b31      	ldr	r3, [pc, #196]	; (8004d50 <HAL_RCC_OscConfig+0xe0c>)
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	e01b      	b.n	8004cc8 <HAL_RCC_OscConfig+0xd84>
 8004c90:	f107 0320 	add.w	r3, r7, #32
 8004c94:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004c98:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c9a:	f107 0320 	add.w	r3, r7, #32
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	fa93 f2a3 	rbit	r2, r3
 8004ca4:	f107 031c 	add.w	r3, r7, #28
 8004ca8:	601a      	str	r2, [r3, #0]
 8004caa:	f107 0318 	add.w	r3, r7, #24
 8004cae:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004cb2:	601a      	str	r2, [r3, #0]
 8004cb4:	f107 0318 	add.w	r3, r7, #24
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	fa93 f2a3 	rbit	r2, r3
 8004cbe:	f107 0314 	add.w	r3, r7, #20
 8004cc2:	601a      	str	r2, [r3, #0]
 8004cc4:	4b22      	ldr	r3, [pc, #136]	; (8004d50 <HAL_RCC_OscConfig+0xe0c>)
 8004cc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cc8:	f107 0210 	add.w	r2, r7, #16
 8004ccc:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8004cd0:	6011      	str	r1, [r2, #0]
 8004cd2:	f107 0210 	add.w	r2, r7, #16
 8004cd6:	6812      	ldr	r2, [r2, #0]
 8004cd8:	fa92 f1a2 	rbit	r1, r2
 8004cdc:	f107 020c 	add.w	r2, r7, #12
 8004ce0:	6011      	str	r1, [r2, #0]
  return result;
 8004ce2:	f107 020c 	add.w	r2, r7, #12
 8004ce6:	6812      	ldr	r2, [r2, #0]
 8004ce8:	fab2 f282 	clz	r2, r2
 8004cec:	b2d2      	uxtb	r2, r2
 8004cee:	f042 0220 	orr.w	r2, r2, #32
 8004cf2:	b2d2      	uxtb	r2, r2
 8004cf4:	f002 021f 	and.w	r2, r2, #31
 8004cf8:	2101      	movs	r1, #1
 8004cfa:	fa01 f202 	lsl.w	r2, r1, r2
 8004cfe:	4013      	ands	r3, r2
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d19e      	bne.n	8004c42 <HAL_RCC_OscConfig+0xcfe>
 8004d04:	e01e      	b.n	8004d44 <HAL_RCC_OscConfig+0xe00>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004d06:	1d3b      	adds	r3, r7, #4
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	69db      	ldr	r3, [r3, #28]
 8004d0c:	2b01      	cmp	r3, #1
 8004d0e:	d101      	bne.n	8004d14 <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 8004d10:	2301      	movs	r3, #1
 8004d12:	e018      	b.n	8004d46 <HAL_RCC_OscConfig+0xe02>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004d14:	4b0e      	ldr	r3, [pc, #56]	; (8004d50 <HAL_RCC_OscConfig+0xe0c>)
 8004d16:	685b      	ldr	r3, [r3, #4]
 8004d18:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8004d1c:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8004d20:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8004d24:	1d3b      	adds	r3, r7, #4
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	6a1b      	ldr	r3, [r3, #32]
 8004d2a:	429a      	cmp	r2, r3
 8004d2c:	d108      	bne.n	8004d40 <HAL_RCC_OscConfig+0xdfc>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8004d2e:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8004d32:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8004d36:	1d3b      	adds	r3, r7, #4
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8004d3c:	429a      	cmp	r2, r3
 8004d3e:	d001      	beq.n	8004d44 <HAL_RCC_OscConfig+0xe00>
#endif
        {
          return HAL_ERROR;
 8004d40:	2301      	movs	r3, #1
 8004d42:	e000      	b.n	8004d46 <HAL_RCC_OscConfig+0xe02>
        }
      }
    }
  }

  return HAL_OK;
 8004d44:	2300      	movs	r3, #0
}
 8004d46:	4618      	mov	r0, r3
 8004d48:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8004d4c:	46bd      	mov	sp, r7
 8004d4e:	bd80      	pop	{r7, pc}
 8004d50:	40021000 	.word	0x40021000

08004d54 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004d54:	b580      	push	{r7, lr}
 8004d56:	b09e      	sub	sp, #120	; 0x78
 8004d58:	af00      	add	r7, sp, #0
 8004d5a:	6078      	str	r0, [r7, #4]
 8004d5c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8004d5e:	2300      	movs	r3, #0
 8004d60:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d101      	bne.n	8004d6c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004d68:	2301      	movs	r3, #1
 8004d6a:	e162      	b.n	8005032 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004d6c:	4b90      	ldr	r3, [pc, #576]	; (8004fb0 <HAL_RCC_ClockConfig+0x25c>)
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	f003 0307 	and.w	r3, r3, #7
 8004d74:	683a      	ldr	r2, [r7, #0]
 8004d76:	429a      	cmp	r2, r3
 8004d78:	d910      	bls.n	8004d9c <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004d7a:	4b8d      	ldr	r3, [pc, #564]	; (8004fb0 <HAL_RCC_ClockConfig+0x25c>)
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	f023 0207 	bic.w	r2, r3, #7
 8004d82:	498b      	ldr	r1, [pc, #556]	; (8004fb0 <HAL_RCC_ClockConfig+0x25c>)
 8004d84:	683b      	ldr	r3, [r7, #0]
 8004d86:	4313      	orrs	r3, r2
 8004d88:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004d8a:	4b89      	ldr	r3, [pc, #548]	; (8004fb0 <HAL_RCC_ClockConfig+0x25c>)
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	f003 0307 	and.w	r3, r3, #7
 8004d92:	683a      	ldr	r2, [r7, #0]
 8004d94:	429a      	cmp	r2, r3
 8004d96:	d001      	beq.n	8004d9c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004d98:	2301      	movs	r3, #1
 8004d9a:	e14a      	b.n	8005032 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	f003 0302 	and.w	r3, r3, #2
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	d008      	beq.n	8004dba <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004da8:	4b82      	ldr	r3, [pc, #520]	; (8004fb4 <HAL_RCC_ClockConfig+0x260>)
 8004daa:	685b      	ldr	r3, [r3, #4]
 8004dac:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	689b      	ldr	r3, [r3, #8]
 8004db4:	497f      	ldr	r1, [pc, #508]	; (8004fb4 <HAL_RCC_ClockConfig+0x260>)
 8004db6:	4313      	orrs	r3, r2
 8004db8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	f003 0301 	and.w	r3, r3, #1
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	f000 80dc 	beq.w	8004f80 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	685b      	ldr	r3, [r3, #4]
 8004dcc:	2b01      	cmp	r3, #1
 8004dce:	d13c      	bne.n	8004e4a <HAL_RCC_ClockConfig+0xf6>
 8004dd0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004dd4:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004dd6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004dd8:	fa93 f3a3 	rbit	r3, r3
 8004ddc:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8004dde:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004de0:	fab3 f383 	clz	r3, r3
 8004de4:	b2db      	uxtb	r3, r3
 8004de6:	095b      	lsrs	r3, r3, #5
 8004de8:	b2db      	uxtb	r3, r3
 8004dea:	f043 0301 	orr.w	r3, r3, #1
 8004dee:	b2db      	uxtb	r3, r3
 8004df0:	2b01      	cmp	r3, #1
 8004df2:	d102      	bne.n	8004dfa <HAL_RCC_ClockConfig+0xa6>
 8004df4:	4b6f      	ldr	r3, [pc, #444]	; (8004fb4 <HAL_RCC_ClockConfig+0x260>)
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	e00f      	b.n	8004e1a <HAL_RCC_ClockConfig+0xc6>
 8004dfa:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004dfe:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e00:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004e02:	fa93 f3a3 	rbit	r3, r3
 8004e06:	667b      	str	r3, [r7, #100]	; 0x64
 8004e08:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004e0c:	663b      	str	r3, [r7, #96]	; 0x60
 8004e0e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004e10:	fa93 f3a3 	rbit	r3, r3
 8004e14:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004e16:	4b67      	ldr	r3, [pc, #412]	; (8004fb4 <HAL_RCC_ClockConfig+0x260>)
 8004e18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e1a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004e1e:	65ba      	str	r2, [r7, #88]	; 0x58
 8004e20:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004e22:	fa92 f2a2 	rbit	r2, r2
 8004e26:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8004e28:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8004e2a:	fab2 f282 	clz	r2, r2
 8004e2e:	b2d2      	uxtb	r2, r2
 8004e30:	f042 0220 	orr.w	r2, r2, #32
 8004e34:	b2d2      	uxtb	r2, r2
 8004e36:	f002 021f 	and.w	r2, r2, #31
 8004e3a:	2101      	movs	r1, #1
 8004e3c:	fa01 f202 	lsl.w	r2, r1, r2
 8004e40:	4013      	ands	r3, r2
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d17b      	bne.n	8004f3e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8004e46:	2301      	movs	r3, #1
 8004e48:	e0f3      	b.n	8005032 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	685b      	ldr	r3, [r3, #4]
 8004e4e:	2b02      	cmp	r3, #2
 8004e50:	d13c      	bne.n	8004ecc <HAL_RCC_ClockConfig+0x178>
 8004e52:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004e56:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e58:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004e5a:	fa93 f3a3 	rbit	r3, r3
 8004e5e:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8004e60:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004e62:	fab3 f383 	clz	r3, r3
 8004e66:	b2db      	uxtb	r3, r3
 8004e68:	095b      	lsrs	r3, r3, #5
 8004e6a:	b2db      	uxtb	r3, r3
 8004e6c:	f043 0301 	orr.w	r3, r3, #1
 8004e70:	b2db      	uxtb	r3, r3
 8004e72:	2b01      	cmp	r3, #1
 8004e74:	d102      	bne.n	8004e7c <HAL_RCC_ClockConfig+0x128>
 8004e76:	4b4f      	ldr	r3, [pc, #316]	; (8004fb4 <HAL_RCC_ClockConfig+0x260>)
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	e00f      	b.n	8004e9c <HAL_RCC_ClockConfig+0x148>
 8004e7c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004e80:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e82:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004e84:	fa93 f3a3 	rbit	r3, r3
 8004e88:	647b      	str	r3, [r7, #68]	; 0x44
 8004e8a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004e8e:	643b      	str	r3, [r7, #64]	; 0x40
 8004e90:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004e92:	fa93 f3a3 	rbit	r3, r3
 8004e96:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004e98:	4b46      	ldr	r3, [pc, #280]	; (8004fb4 <HAL_RCC_ClockConfig+0x260>)
 8004e9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e9c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004ea0:	63ba      	str	r2, [r7, #56]	; 0x38
 8004ea2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004ea4:	fa92 f2a2 	rbit	r2, r2
 8004ea8:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8004eaa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004eac:	fab2 f282 	clz	r2, r2
 8004eb0:	b2d2      	uxtb	r2, r2
 8004eb2:	f042 0220 	orr.w	r2, r2, #32
 8004eb6:	b2d2      	uxtb	r2, r2
 8004eb8:	f002 021f 	and.w	r2, r2, #31
 8004ebc:	2101      	movs	r1, #1
 8004ebe:	fa01 f202 	lsl.w	r2, r1, r2
 8004ec2:	4013      	ands	r3, r2
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	d13a      	bne.n	8004f3e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8004ec8:	2301      	movs	r3, #1
 8004eca:	e0b2      	b.n	8005032 <HAL_RCC_ClockConfig+0x2de>
 8004ecc:	2302      	movs	r3, #2
 8004ece:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ed0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ed2:	fa93 f3a3 	rbit	r3, r3
 8004ed6:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8004ed8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004eda:	fab3 f383 	clz	r3, r3
 8004ede:	b2db      	uxtb	r3, r3
 8004ee0:	095b      	lsrs	r3, r3, #5
 8004ee2:	b2db      	uxtb	r3, r3
 8004ee4:	f043 0301 	orr.w	r3, r3, #1
 8004ee8:	b2db      	uxtb	r3, r3
 8004eea:	2b01      	cmp	r3, #1
 8004eec:	d102      	bne.n	8004ef4 <HAL_RCC_ClockConfig+0x1a0>
 8004eee:	4b31      	ldr	r3, [pc, #196]	; (8004fb4 <HAL_RCC_ClockConfig+0x260>)
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	e00d      	b.n	8004f10 <HAL_RCC_ClockConfig+0x1bc>
 8004ef4:	2302      	movs	r3, #2
 8004ef6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ef8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004efa:	fa93 f3a3 	rbit	r3, r3
 8004efe:	627b      	str	r3, [r7, #36]	; 0x24
 8004f00:	2302      	movs	r3, #2
 8004f02:	623b      	str	r3, [r7, #32]
 8004f04:	6a3b      	ldr	r3, [r7, #32]
 8004f06:	fa93 f3a3 	rbit	r3, r3
 8004f0a:	61fb      	str	r3, [r7, #28]
 8004f0c:	4b29      	ldr	r3, [pc, #164]	; (8004fb4 <HAL_RCC_ClockConfig+0x260>)
 8004f0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f10:	2202      	movs	r2, #2
 8004f12:	61ba      	str	r2, [r7, #24]
 8004f14:	69ba      	ldr	r2, [r7, #24]
 8004f16:	fa92 f2a2 	rbit	r2, r2
 8004f1a:	617a      	str	r2, [r7, #20]
  return result;
 8004f1c:	697a      	ldr	r2, [r7, #20]
 8004f1e:	fab2 f282 	clz	r2, r2
 8004f22:	b2d2      	uxtb	r2, r2
 8004f24:	f042 0220 	orr.w	r2, r2, #32
 8004f28:	b2d2      	uxtb	r2, r2
 8004f2a:	f002 021f 	and.w	r2, r2, #31
 8004f2e:	2101      	movs	r1, #1
 8004f30:	fa01 f202 	lsl.w	r2, r1, r2
 8004f34:	4013      	ands	r3, r2
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d101      	bne.n	8004f3e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8004f3a:	2301      	movs	r3, #1
 8004f3c:	e079      	b.n	8005032 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004f3e:	4b1d      	ldr	r3, [pc, #116]	; (8004fb4 <HAL_RCC_ClockConfig+0x260>)
 8004f40:	685b      	ldr	r3, [r3, #4]
 8004f42:	f023 0203 	bic.w	r2, r3, #3
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	685b      	ldr	r3, [r3, #4]
 8004f4a:	491a      	ldr	r1, [pc, #104]	; (8004fb4 <HAL_RCC_ClockConfig+0x260>)
 8004f4c:	4313      	orrs	r3, r2
 8004f4e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004f50:	f7fd f846 	bl	8001fe0 <HAL_GetTick>
 8004f54:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004f56:	e00a      	b.n	8004f6e <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004f58:	f7fd f842 	bl	8001fe0 <HAL_GetTick>
 8004f5c:	4602      	mov	r2, r0
 8004f5e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004f60:	1ad3      	subs	r3, r2, r3
 8004f62:	f241 3288 	movw	r2, #5000	; 0x1388
 8004f66:	4293      	cmp	r3, r2
 8004f68:	d901      	bls.n	8004f6e <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8004f6a:	2303      	movs	r3, #3
 8004f6c:	e061      	b.n	8005032 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004f6e:	4b11      	ldr	r3, [pc, #68]	; (8004fb4 <HAL_RCC_ClockConfig+0x260>)
 8004f70:	685b      	ldr	r3, [r3, #4]
 8004f72:	f003 020c 	and.w	r2, r3, #12
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	685b      	ldr	r3, [r3, #4]
 8004f7a:	009b      	lsls	r3, r3, #2
 8004f7c:	429a      	cmp	r2, r3
 8004f7e:	d1eb      	bne.n	8004f58 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004f80:	4b0b      	ldr	r3, [pc, #44]	; (8004fb0 <HAL_RCC_ClockConfig+0x25c>)
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	f003 0307 	and.w	r3, r3, #7
 8004f88:	683a      	ldr	r2, [r7, #0]
 8004f8a:	429a      	cmp	r2, r3
 8004f8c:	d214      	bcs.n	8004fb8 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004f8e:	4b08      	ldr	r3, [pc, #32]	; (8004fb0 <HAL_RCC_ClockConfig+0x25c>)
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	f023 0207 	bic.w	r2, r3, #7
 8004f96:	4906      	ldr	r1, [pc, #24]	; (8004fb0 <HAL_RCC_ClockConfig+0x25c>)
 8004f98:	683b      	ldr	r3, [r7, #0]
 8004f9a:	4313      	orrs	r3, r2
 8004f9c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004f9e:	4b04      	ldr	r3, [pc, #16]	; (8004fb0 <HAL_RCC_ClockConfig+0x25c>)
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	f003 0307 	and.w	r3, r3, #7
 8004fa6:	683a      	ldr	r2, [r7, #0]
 8004fa8:	429a      	cmp	r2, r3
 8004faa:	d005      	beq.n	8004fb8 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8004fac:	2301      	movs	r3, #1
 8004fae:	e040      	b.n	8005032 <HAL_RCC_ClockConfig+0x2de>
 8004fb0:	40022000 	.word	0x40022000
 8004fb4:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	f003 0304 	and.w	r3, r3, #4
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d008      	beq.n	8004fd6 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004fc4:	4b1d      	ldr	r3, [pc, #116]	; (800503c <HAL_RCC_ClockConfig+0x2e8>)
 8004fc6:	685b      	ldr	r3, [r3, #4]
 8004fc8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	68db      	ldr	r3, [r3, #12]
 8004fd0:	491a      	ldr	r1, [pc, #104]	; (800503c <HAL_RCC_ClockConfig+0x2e8>)
 8004fd2:	4313      	orrs	r3, r2
 8004fd4:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	f003 0308 	and.w	r3, r3, #8
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d009      	beq.n	8004ff6 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004fe2:	4b16      	ldr	r3, [pc, #88]	; (800503c <HAL_RCC_ClockConfig+0x2e8>)
 8004fe4:	685b      	ldr	r3, [r3, #4]
 8004fe6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	691b      	ldr	r3, [r3, #16]
 8004fee:	00db      	lsls	r3, r3, #3
 8004ff0:	4912      	ldr	r1, [pc, #72]	; (800503c <HAL_RCC_ClockConfig+0x2e8>)
 8004ff2:	4313      	orrs	r3, r2
 8004ff4:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8004ff6:	f000 f829 	bl	800504c <HAL_RCC_GetSysClockFreq>
 8004ffa:	4601      	mov	r1, r0
 8004ffc:	4b0f      	ldr	r3, [pc, #60]	; (800503c <HAL_RCC_ClockConfig+0x2e8>)
 8004ffe:	685b      	ldr	r3, [r3, #4]
 8005000:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005004:	22f0      	movs	r2, #240	; 0xf0
 8005006:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005008:	693a      	ldr	r2, [r7, #16]
 800500a:	fa92 f2a2 	rbit	r2, r2
 800500e:	60fa      	str	r2, [r7, #12]
  return result;
 8005010:	68fa      	ldr	r2, [r7, #12]
 8005012:	fab2 f282 	clz	r2, r2
 8005016:	b2d2      	uxtb	r2, r2
 8005018:	40d3      	lsrs	r3, r2
 800501a:	4a09      	ldr	r2, [pc, #36]	; (8005040 <HAL_RCC_ClockConfig+0x2ec>)
 800501c:	5cd3      	ldrb	r3, [r2, r3]
 800501e:	fa21 f303 	lsr.w	r3, r1, r3
 8005022:	4a08      	ldr	r2, [pc, #32]	; (8005044 <HAL_RCC_ClockConfig+0x2f0>)
 8005024:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8005026:	4b08      	ldr	r3, [pc, #32]	; (8005048 <HAL_RCC_ClockConfig+0x2f4>)
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	4618      	mov	r0, r3
 800502c:	f7fc ff94 	bl	8001f58 <HAL_InitTick>
  
  return HAL_OK;
 8005030:	2300      	movs	r3, #0
}
 8005032:	4618      	mov	r0, r3
 8005034:	3778      	adds	r7, #120	; 0x78
 8005036:	46bd      	mov	sp, r7
 8005038:	bd80      	pop	{r7, pc}
 800503a:	bf00      	nop
 800503c:	40021000 	.word	0x40021000
 8005040:	0800a56c 	.word	0x0800a56c
 8005044:	20000000 	.word	0x20000000
 8005048:	20000004 	.word	0x20000004

0800504c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800504c:	b480      	push	{r7}
 800504e:	b08b      	sub	sp, #44	; 0x2c
 8005050:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8005052:	2300      	movs	r3, #0
 8005054:	61fb      	str	r3, [r7, #28]
 8005056:	2300      	movs	r3, #0
 8005058:	61bb      	str	r3, [r7, #24]
 800505a:	2300      	movs	r3, #0
 800505c:	627b      	str	r3, [r7, #36]	; 0x24
 800505e:	2300      	movs	r3, #0
 8005060:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8005062:	2300      	movs	r3, #0
 8005064:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8005066:	4b29      	ldr	r3, [pc, #164]	; (800510c <HAL_RCC_GetSysClockFreq+0xc0>)
 8005068:	685b      	ldr	r3, [r3, #4]
 800506a:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800506c:	69fb      	ldr	r3, [r7, #28]
 800506e:	f003 030c 	and.w	r3, r3, #12
 8005072:	2b04      	cmp	r3, #4
 8005074:	d002      	beq.n	800507c <HAL_RCC_GetSysClockFreq+0x30>
 8005076:	2b08      	cmp	r3, #8
 8005078:	d003      	beq.n	8005082 <HAL_RCC_GetSysClockFreq+0x36>
 800507a:	e03c      	b.n	80050f6 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800507c:	4b24      	ldr	r3, [pc, #144]	; (8005110 <HAL_RCC_GetSysClockFreq+0xc4>)
 800507e:	623b      	str	r3, [r7, #32]
      break;
 8005080:	e03c      	b.n	80050fc <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8005082:	69fb      	ldr	r3, [r7, #28]
 8005084:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8005088:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 800508c:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800508e:	68ba      	ldr	r2, [r7, #8]
 8005090:	fa92 f2a2 	rbit	r2, r2
 8005094:	607a      	str	r2, [r7, #4]
  return result;
 8005096:	687a      	ldr	r2, [r7, #4]
 8005098:	fab2 f282 	clz	r2, r2
 800509c:	b2d2      	uxtb	r2, r2
 800509e:	40d3      	lsrs	r3, r2
 80050a0:	4a1c      	ldr	r2, [pc, #112]	; (8005114 <HAL_RCC_GetSysClockFreq+0xc8>)
 80050a2:	5cd3      	ldrb	r3, [r2, r3]
 80050a4:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 80050a6:	4b19      	ldr	r3, [pc, #100]	; (800510c <HAL_RCC_GetSysClockFreq+0xc0>)
 80050a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050aa:	f003 030f 	and.w	r3, r3, #15
 80050ae:	220f      	movs	r2, #15
 80050b0:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80050b2:	693a      	ldr	r2, [r7, #16]
 80050b4:	fa92 f2a2 	rbit	r2, r2
 80050b8:	60fa      	str	r2, [r7, #12]
  return result;
 80050ba:	68fa      	ldr	r2, [r7, #12]
 80050bc:	fab2 f282 	clz	r2, r2
 80050c0:	b2d2      	uxtb	r2, r2
 80050c2:	40d3      	lsrs	r3, r2
 80050c4:	4a14      	ldr	r2, [pc, #80]	; (8005118 <HAL_RCC_GetSysClockFreq+0xcc>)
 80050c6:	5cd3      	ldrb	r3, [r2, r3]
 80050c8:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 80050ca:	69fb      	ldr	r3, [r7, #28]
 80050cc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d008      	beq.n	80050e6 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80050d4:	4a0e      	ldr	r2, [pc, #56]	; (8005110 <HAL_RCC_GetSysClockFreq+0xc4>)
 80050d6:	69bb      	ldr	r3, [r7, #24]
 80050d8:	fbb2 f2f3 	udiv	r2, r2, r3
 80050dc:	697b      	ldr	r3, [r7, #20]
 80050de:	fb02 f303 	mul.w	r3, r2, r3
 80050e2:	627b      	str	r3, [r7, #36]	; 0x24
 80050e4:	e004      	b.n	80050f0 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 80050e6:	697b      	ldr	r3, [r7, #20]
 80050e8:	4a0c      	ldr	r2, [pc, #48]	; (800511c <HAL_RCC_GetSysClockFreq+0xd0>)
 80050ea:	fb02 f303 	mul.w	r3, r2, r3
 80050ee:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 80050f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050f2:	623b      	str	r3, [r7, #32]
      break;
 80050f4:	e002      	b.n	80050fc <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80050f6:	4b0a      	ldr	r3, [pc, #40]	; (8005120 <HAL_RCC_GetSysClockFreq+0xd4>)
 80050f8:	623b      	str	r3, [r7, #32]
      break;
 80050fa:	bf00      	nop
    }
  }
  return sysclockfreq;
 80050fc:	6a3b      	ldr	r3, [r7, #32]
}
 80050fe:	4618      	mov	r0, r3
 8005100:	372c      	adds	r7, #44	; 0x2c
 8005102:	46bd      	mov	sp, r7
 8005104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005108:	4770      	bx	lr
 800510a:	bf00      	nop
 800510c:	40021000 	.word	0x40021000
 8005110:	00f42400 	.word	0x00f42400
 8005114:	0800a584 	.word	0x0800a584
 8005118:	0800a594 	.word	0x0800a594
 800511c:	003d0900 	.word	0x003d0900
 8005120:	007a1200 	.word	0x007a1200

08005124 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005124:	b480      	push	{r7}
 8005126:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005128:	4b03      	ldr	r3, [pc, #12]	; (8005138 <HAL_RCC_GetHCLKFreq+0x14>)
 800512a:	681b      	ldr	r3, [r3, #0]
}
 800512c:	4618      	mov	r0, r3
 800512e:	46bd      	mov	sp, r7
 8005130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005134:	4770      	bx	lr
 8005136:	bf00      	nop
 8005138:	20000000 	.word	0x20000000

0800513c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800513c:	b580      	push	{r7, lr}
 800513e:	b082      	sub	sp, #8
 8005140:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8005142:	f7ff ffef 	bl	8005124 <HAL_RCC_GetHCLKFreq>
 8005146:	4601      	mov	r1, r0
 8005148:	4b0b      	ldr	r3, [pc, #44]	; (8005178 <HAL_RCC_GetPCLK1Freq+0x3c>)
 800514a:	685b      	ldr	r3, [r3, #4]
 800514c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005150:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8005154:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005156:	687a      	ldr	r2, [r7, #4]
 8005158:	fa92 f2a2 	rbit	r2, r2
 800515c:	603a      	str	r2, [r7, #0]
  return result;
 800515e:	683a      	ldr	r2, [r7, #0]
 8005160:	fab2 f282 	clz	r2, r2
 8005164:	b2d2      	uxtb	r2, r2
 8005166:	40d3      	lsrs	r3, r2
 8005168:	4a04      	ldr	r2, [pc, #16]	; (800517c <HAL_RCC_GetPCLK1Freq+0x40>)
 800516a:	5cd3      	ldrb	r3, [r2, r3]
 800516c:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8005170:	4618      	mov	r0, r3
 8005172:	3708      	adds	r7, #8
 8005174:	46bd      	mov	sp, r7
 8005176:	bd80      	pop	{r7, pc}
 8005178:	40021000 	.word	0x40021000
 800517c:	0800a57c 	.word	0x0800a57c

08005180 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005180:	b580      	push	{r7, lr}
 8005182:	b082      	sub	sp, #8
 8005184:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8005186:	f7ff ffcd 	bl	8005124 <HAL_RCC_GetHCLKFreq>
 800518a:	4601      	mov	r1, r0
 800518c:	4b0b      	ldr	r3, [pc, #44]	; (80051bc <HAL_RCC_GetPCLK2Freq+0x3c>)
 800518e:	685b      	ldr	r3, [r3, #4]
 8005190:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8005194:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8005198:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800519a:	687a      	ldr	r2, [r7, #4]
 800519c:	fa92 f2a2 	rbit	r2, r2
 80051a0:	603a      	str	r2, [r7, #0]
  return result;
 80051a2:	683a      	ldr	r2, [r7, #0]
 80051a4:	fab2 f282 	clz	r2, r2
 80051a8:	b2d2      	uxtb	r2, r2
 80051aa:	40d3      	lsrs	r3, r2
 80051ac:	4a04      	ldr	r2, [pc, #16]	; (80051c0 <HAL_RCC_GetPCLK2Freq+0x40>)
 80051ae:	5cd3      	ldrb	r3, [r2, r3]
 80051b0:	fa21 f303 	lsr.w	r3, r1, r3
} 
 80051b4:	4618      	mov	r0, r3
 80051b6:	3708      	adds	r7, #8
 80051b8:	46bd      	mov	sp, r7
 80051ba:	bd80      	pop	{r7, pc}
 80051bc:	40021000 	.word	0x40021000
 80051c0:	0800a57c 	.word	0x0800a57c

080051c4 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80051c4:	b580      	push	{r7, lr}
 80051c6:	b092      	sub	sp, #72	; 0x48
 80051c8:	af00      	add	r7, sp, #0
 80051ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80051cc:	2300      	movs	r3, #0
 80051ce:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 80051d0:	2300      	movs	r3, #0
 80051d2:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 80051d4:	2300      	movs	r3, #0
 80051d6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	f000 80d4 	beq.w	8005390 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80051e8:	4b4e      	ldr	r3, [pc, #312]	; (8005324 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80051ea:	69db      	ldr	r3, [r3, #28]
 80051ec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	d10e      	bne.n	8005212 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80051f4:	4b4b      	ldr	r3, [pc, #300]	; (8005324 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80051f6:	69db      	ldr	r3, [r3, #28]
 80051f8:	4a4a      	ldr	r2, [pc, #296]	; (8005324 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80051fa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80051fe:	61d3      	str	r3, [r2, #28]
 8005200:	4b48      	ldr	r3, [pc, #288]	; (8005324 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005202:	69db      	ldr	r3, [r3, #28]
 8005204:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005208:	60bb      	str	r3, [r7, #8]
 800520a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800520c:	2301      	movs	r3, #1
 800520e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005212:	4b45      	ldr	r3, [pc, #276]	; (8005328 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800521a:	2b00      	cmp	r3, #0
 800521c:	d118      	bne.n	8005250 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800521e:	4b42      	ldr	r3, [pc, #264]	; (8005328 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	4a41      	ldr	r2, [pc, #260]	; (8005328 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005224:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005228:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800522a:	f7fc fed9 	bl	8001fe0 <HAL_GetTick>
 800522e:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005230:	e008      	b.n	8005244 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005232:	f7fc fed5 	bl	8001fe0 <HAL_GetTick>
 8005236:	4602      	mov	r2, r0
 8005238:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800523a:	1ad3      	subs	r3, r2, r3
 800523c:	2b64      	cmp	r3, #100	; 0x64
 800523e:	d901      	bls.n	8005244 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8005240:	2303      	movs	r3, #3
 8005242:	e169      	b.n	8005518 <HAL_RCCEx_PeriphCLKConfig+0x354>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005244:	4b38      	ldr	r3, [pc, #224]	; (8005328 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800524c:	2b00      	cmp	r3, #0
 800524e:	d0f0      	beq.n	8005232 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005250:	4b34      	ldr	r3, [pc, #208]	; (8005324 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005252:	6a1b      	ldr	r3, [r3, #32]
 8005254:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005258:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800525a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800525c:	2b00      	cmp	r3, #0
 800525e:	f000 8084 	beq.w	800536a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	685b      	ldr	r3, [r3, #4]
 8005266:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800526a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800526c:	429a      	cmp	r2, r3
 800526e:	d07c      	beq.n	800536a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005270:	4b2c      	ldr	r3, [pc, #176]	; (8005324 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005272:	6a1b      	ldr	r3, [r3, #32]
 8005274:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005278:	63fb      	str	r3, [r7, #60]	; 0x3c
 800527a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800527e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005280:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005282:	fa93 f3a3 	rbit	r3, r3
 8005286:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8005288:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800528a:	fab3 f383 	clz	r3, r3
 800528e:	b2db      	uxtb	r3, r3
 8005290:	461a      	mov	r2, r3
 8005292:	4b26      	ldr	r3, [pc, #152]	; (800532c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8005294:	4413      	add	r3, r2
 8005296:	009b      	lsls	r3, r3, #2
 8005298:	461a      	mov	r2, r3
 800529a:	2301      	movs	r3, #1
 800529c:	6013      	str	r3, [r2, #0]
 800529e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80052a2:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80052a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052a6:	fa93 f3a3 	rbit	r3, r3
 80052aa:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80052ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 80052ae:	fab3 f383 	clz	r3, r3
 80052b2:	b2db      	uxtb	r3, r3
 80052b4:	461a      	mov	r2, r3
 80052b6:	4b1d      	ldr	r3, [pc, #116]	; (800532c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80052b8:	4413      	add	r3, r2
 80052ba:	009b      	lsls	r3, r3, #2
 80052bc:	461a      	mov	r2, r3
 80052be:	2300      	movs	r3, #0
 80052c0:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80052c2:	4a18      	ldr	r2, [pc, #96]	; (8005324 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80052c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80052c6:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80052c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80052ca:	f003 0301 	and.w	r3, r3, #1
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d04b      	beq.n	800536a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80052d2:	f7fc fe85 	bl	8001fe0 <HAL_GetTick>
 80052d6:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80052d8:	e00a      	b.n	80052f0 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80052da:	f7fc fe81 	bl	8001fe0 <HAL_GetTick>
 80052de:	4602      	mov	r2, r0
 80052e0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80052e2:	1ad3      	subs	r3, r2, r3
 80052e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80052e8:	4293      	cmp	r3, r2
 80052ea:	d901      	bls.n	80052f0 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 80052ec:	2303      	movs	r3, #3
 80052ee:	e113      	b.n	8005518 <HAL_RCCEx_PeriphCLKConfig+0x354>
 80052f0:	2302      	movs	r3, #2
 80052f2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80052f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052f6:	fa93 f3a3 	rbit	r3, r3
 80052fa:	627b      	str	r3, [r7, #36]	; 0x24
 80052fc:	2302      	movs	r3, #2
 80052fe:	623b      	str	r3, [r7, #32]
 8005300:	6a3b      	ldr	r3, [r7, #32]
 8005302:	fa93 f3a3 	rbit	r3, r3
 8005306:	61fb      	str	r3, [r7, #28]
  return result;
 8005308:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800530a:	fab3 f383 	clz	r3, r3
 800530e:	b2db      	uxtb	r3, r3
 8005310:	095b      	lsrs	r3, r3, #5
 8005312:	b2db      	uxtb	r3, r3
 8005314:	f043 0302 	orr.w	r3, r3, #2
 8005318:	b2db      	uxtb	r3, r3
 800531a:	2b02      	cmp	r3, #2
 800531c:	d108      	bne.n	8005330 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 800531e:	4b01      	ldr	r3, [pc, #4]	; (8005324 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005320:	6a1b      	ldr	r3, [r3, #32]
 8005322:	e00d      	b.n	8005340 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8005324:	40021000 	.word	0x40021000
 8005328:	40007000 	.word	0x40007000
 800532c:	10908100 	.word	0x10908100
 8005330:	2302      	movs	r3, #2
 8005332:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005334:	69bb      	ldr	r3, [r7, #24]
 8005336:	fa93 f3a3 	rbit	r3, r3
 800533a:	617b      	str	r3, [r7, #20]
 800533c:	4b78      	ldr	r3, [pc, #480]	; (8005520 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800533e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005340:	2202      	movs	r2, #2
 8005342:	613a      	str	r2, [r7, #16]
 8005344:	693a      	ldr	r2, [r7, #16]
 8005346:	fa92 f2a2 	rbit	r2, r2
 800534a:	60fa      	str	r2, [r7, #12]
  return result;
 800534c:	68fa      	ldr	r2, [r7, #12]
 800534e:	fab2 f282 	clz	r2, r2
 8005352:	b2d2      	uxtb	r2, r2
 8005354:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005358:	b2d2      	uxtb	r2, r2
 800535a:	f002 021f 	and.w	r2, r2, #31
 800535e:	2101      	movs	r1, #1
 8005360:	fa01 f202 	lsl.w	r2, r1, r2
 8005364:	4013      	ands	r3, r2
 8005366:	2b00      	cmp	r3, #0
 8005368:	d0b7      	beq.n	80052da <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 800536a:	4b6d      	ldr	r3, [pc, #436]	; (8005520 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800536c:	6a1b      	ldr	r3, [r3, #32]
 800536e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	685b      	ldr	r3, [r3, #4]
 8005376:	496a      	ldr	r1, [pc, #424]	; (8005520 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005378:	4313      	orrs	r3, r2
 800537a:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800537c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8005380:	2b01      	cmp	r3, #1
 8005382:	d105      	bne.n	8005390 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005384:	4b66      	ldr	r3, [pc, #408]	; (8005520 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005386:	69db      	ldr	r3, [r3, #28]
 8005388:	4a65      	ldr	r2, [pc, #404]	; (8005520 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800538a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800538e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	f003 0301 	and.w	r3, r3, #1
 8005398:	2b00      	cmp	r3, #0
 800539a:	d008      	beq.n	80053ae <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800539c:	4b60      	ldr	r3, [pc, #384]	; (8005520 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800539e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053a0:	f023 0203 	bic.w	r2, r3, #3
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	689b      	ldr	r3, [r3, #8]
 80053a8:	495d      	ldr	r1, [pc, #372]	; (8005520 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80053aa:	4313      	orrs	r3, r2
 80053ac:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	f003 0302 	and.w	r3, r3, #2
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d008      	beq.n	80053cc <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80053ba:	4b59      	ldr	r3, [pc, #356]	; (8005520 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80053bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053be:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	68db      	ldr	r3, [r3, #12]
 80053c6:	4956      	ldr	r1, [pc, #344]	; (8005520 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80053c8:	4313      	orrs	r3, r2
 80053ca:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	f003 0304 	and.w	r3, r3, #4
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	d008      	beq.n	80053ea <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80053d8:	4b51      	ldr	r3, [pc, #324]	; (8005520 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80053da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053dc:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	691b      	ldr	r3, [r3, #16]
 80053e4:	494e      	ldr	r1, [pc, #312]	; (8005520 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80053e6:	4313      	orrs	r3, r2
 80053e8:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	f003 0320 	and.w	r3, r3, #32
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d008      	beq.n	8005408 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80053f6:	4b4a      	ldr	r3, [pc, #296]	; (8005520 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80053f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053fa:	f023 0210 	bic.w	r2, r3, #16
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	69db      	ldr	r3, [r3, #28]
 8005402:	4947      	ldr	r1, [pc, #284]	; (8005520 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005404:	4313      	orrs	r3, r2
 8005406:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005410:	2b00      	cmp	r3, #0
 8005412:	d008      	beq.n	8005426 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8005414:	4b42      	ldr	r3, [pc, #264]	; (8005520 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005416:	685b      	ldr	r3, [r3, #4]
 8005418:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005420:	493f      	ldr	r1, [pc, #252]	; (8005520 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005422:	4313      	orrs	r3, r2
 8005424:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800542e:	2b00      	cmp	r3, #0
 8005430:	d008      	beq.n	8005444 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005432:	4b3b      	ldr	r3, [pc, #236]	; (8005520 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005434:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005436:	f023 0220 	bic.w	r2, r3, #32
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	6a1b      	ldr	r3, [r3, #32]
 800543e:	4938      	ldr	r1, [pc, #224]	; (8005520 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005440:	4313      	orrs	r3, r2
 8005442:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	f003 0308 	and.w	r3, r3, #8
 800544c:	2b00      	cmp	r3, #0
 800544e:	d008      	beq.n	8005462 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005450:	4b33      	ldr	r3, [pc, #204]	; (8005520 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005452:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005454:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	695b      	ldr	r3, [r3, #20]
 800545c:	4930      	ldr	r1, [pc, #192]	; (8005520 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800545e:	4313      	orrs	r3, r2
 8005460:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	f003 0310 	and.w	r3, r3, #16
 800546a:	2b00      	cmp	r3, #0
 800546c:	d008      	beq.n	8005480 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800546e:	4b2c      	ldr	r3, [pc, #176]	; (8005520 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005470:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005472:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	699b      	ldr	r3, [r3, #24]
 800547a:	4929      	ldr	r1, [pc, #164]	; (8005520 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800547c:	4313      	orrs	r3, r2
 800547e:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005488:	2b00      	cmp	r3, #0
 800548a:	d008      	beq.n	800549e <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800548c:	4b24      	ldr	r3, [pc, #144]	; (8005520 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800548e:	685b      	ldr	r3, [r3, #4]
 8005490:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005498:	4921      	ldr	r1, [pc, #132]	; (8005520 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800549a:	4313      	orrs	r3, r2
 800549c:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d008      	beq.n	80054bc <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80054aa:	4b1d      	ldr	r3, [pc, #116]	; (8005520 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80054ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054ae:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054b6:	491a      	ldr	r1, [pc, #104]	; (8005520 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80054b8:	4313      	orrs	r3, r2
 80054ba:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d008      	beq.n	80054da <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 80054c8:	4b15      	ldr	r3, [pc, #84]	; (8005520 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80054ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054cc:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054d4:	4912      	ldr	r1, [pc, #72]	; (8005520 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80054d6:	4313      	orrs	r3, r2
 80054d8:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d008      	beq.n	80054f8 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80054e6:	4b0e      	ldr	r3, [pc, #56]	; (8005520 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80054e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054ea:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054f2:	490b      	ldr	r1, [pc, #44]	; (8005520 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80054f4:	4313      	orrs	r3, r2
 80054f6:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005500:	2b00      	cmp	r3, #0
 8005502:	d008      	beq.n	8005516 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8005504:	4b06      	ldr	r3, [pc, #24]	; (8005520 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005506:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005508:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005510:	4903      	ldr	r1, [pc, #12]	; (8005520 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005512:	4313      	orrs	r3, r2
 8005514:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8005516:	2300      	movs	r3, #0
}
 8005518:	4618      	mov	r0, r3
 800551a:	3748      	adds	r7, #72	; 0x48
 800551c:	46bd      	mov	sp, r7
 800551e:	bd80      	pop	{r7, pc}
 8005520:	40021000 	.word	0x40021000

08005524 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005524:	b580      	push	{r7, lr}
 8005526:	b084      	sub	sp, #16
 8005528:	af00      	add	r7, sp, #0
 800552a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	2b00      	cmp	r3, #0
 8005530:	d101      	bne.n	8005536 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005532:	2301      	movs	r3, #1
 8005534:	e09d      	b.n	8005672 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800553a:	2b00      	cmp	r3, #0
 800553c:	d108      	bne.n	8005550 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	685b      	ldr	r3, [r3, #4]
 8005542:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005546:	d009      	beq.n	800555c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	2200      	movs	r2, #0
 800554c:	61da      	str	r2, [r3, #28]
 800554e:	e005      	b.n	800555c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	2200      	movs	r2, #0
 8005554:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	2200      	movs	r2, #0
 800555a:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	2200      	movs	r2, #0
 8005560:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005568:	b2db      	uxtb	r3, r3
 800556a:	2b00      	cmp	r3, #0
 800556c:	d106      	bne.n	800557c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	2200      	movs	r2, #0
 8005572:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005576:	6878      	ldr	r0, [r7, #4]
 8005578:	f7fc f902 	bl	8001780 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	2202      	movs	r2, #2
 8005580:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	681a      	ldr	r2, [r3, #0]
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005592:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	68db      	ldr	r3, [r3, #12]
 8005598:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800559c:	d902      	bls.n	80055a4 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800559e:	2300      	movs	r3, #0
 80055a0:	60fb      	str	r3, [r7, #12]
 80055a2:	e002      	b.n	80055aa <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80055a4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80055a8:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	68db      	ldr	r3, [r3, #12]
 80055ae:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80055b2:	d007      	beq.n	80055c4 <HAL_SPI_Init+0xa0>
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	68db      	ldr	r3, [r3, #12]
 80055b8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80055bc:	d002      	beq.n	80055c4 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	2200      	movs	r2, #0
 80055c2:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	685b      	ldr	r3, [r3, #4]
 80055c8:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	689b      	ldr	r3, [r3, #8]
 80055d0:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80055d4:	431a      	orrs	r2, r3
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	691b      	ldr	r3, [r3, #16]
 80055da:	f003 0302 	and.w	r3, r3, #2
 80055de:	431a      	orrs	r2, r3
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	695b      	ldr	r3, [r3, #20]
 80055e4:	f003 0301 	and.w	r3, r3, #1
 80055e8:	431a      	orrs	r2, r3
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	699b      	ldr	r3, [r3, #24]
 80055ee:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80055f2:	431a      	orrs	r2, r3
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	69db      	ldr	r3, [r3, #28]
 80055f8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80055fc:	431a      	orrs	r2, r3
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	6a1b      	ldr	r3, [r3, #32]
 8005602:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005606:	ea42 0103 	orr.w	r1, r2, r3
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800560e:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	430a      	orrs	r2, r1
 8005618:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	699b      	ldr	r3, [r3, #24]
 800561e:	0c1b      	lsrs	r3, r3, #16
 8005620:	f003 0204 	and.w	r2, r3, #4
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005628:	f003 0310 	and.w	r3, r3, #16
 800562c:	431a      	orrs	r2, r3
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005632:	f003 0308 	and.w	r3, r3, #8
 8005636:	431a      	orrs	r2, r3
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	68db      	ldr	r3, [r3, #12]
 800563c:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8005640:	ea42 0103 	orr.w	r1, r2, r3
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	430a      	orrs	r2, r1
 8005650:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	69da      	ldr	r2, [r3, #28]
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005660:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	2200      	movs	r2, #0
 8005666:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	2201      	movs	r2, #1
 800566c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8005670:	2300      	movs	r3, #0
}
 8005672:	4618      	mov	r0, r3
 8005674:	3710      	adds	r7, #16
 8005676:	46bd      	mov	sp, r7
 8005678:	bd80      	pop	{r7, pc}

0800567a <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800567a:	b580      	push	{r7, lr}
 800567c:	b082      	sub	sp, #8
 800567e:	af00      	add	r7, sp, #0
 8005680:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	2b00      	cmp	r3, #0
 8005686:	d101      	bne.n	800568c <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005688:	2301      	movs	r3, #1
 800568a:	e049      	b.n	8005720 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005692:	b2db      	uxtb	r3, r3
 8005694:	2b00      	cmp	r3, #0
 8005696:	d106      	bne.n	80056a6 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	2200      	movs	r2, #0
 800569c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80056a0:	6878      	ldr	r0, [r7, #4]
 80056a2:	f7fc f8d1 	bl	8001848 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	2202      	movs	r2, #2
 80056aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	681a      	ldr	r2, [r3, #0]
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	3304      	adds	r3, #4
 80056b6:	4619      	mov	r1, r3
 80056b8:	4610      	mov	r0, r2
 80056ba:	f000 fdbf 	bl	800623c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	2201      	movs	r2, #1
 80056c2:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	2201      	movs	r2, #1
 80056ca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	2201      	movs	r2, #1
 80056d2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	2201      	movs	r2, #1
 80056da:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	2201      	movs	r2, #1
 80056e2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	2201      	movs	r2, #1
 80056ea:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	2201      	movs	r2, #1
 80056f2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	2201      	movs	r2, #1
 80056fa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	2201      	movs	r2, #1
 8005702:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	2201      	movs	r2, #1
 800570a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	2201      	movs	r2, #1
 8005712:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	2201      	movs	r2, #1
 800571a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800571e:	2300      	movs	r3, #0
}
 8005720:	4618      	mov	r0, r3
 8005722:	3708      	adds	r7, #8
 8005724:	46bd      	mov	sp, r7
 8005726:	bd80      	pop	{r7, pc}

08005728 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005728:	b480      	push	{r7}
 800572a:	b085      	sub	sp, #20
 800572c:	af00      	add	r7, sp, #0
 800572e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005736:	b2db      	uxtb	r3, r3
 8005738:	2b01      	cmp	r3, #1
 800573a:	d001      	beq.n	8005740 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800573c:	2301      	movs	r3, #1
 800573e:	e04a      	b.n	80057d6 <HAL_TIM_Base_Start_IT+0xae>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	2202      	movs	r2, #2
 8005744:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	68da      	ldr	r2, [r3, #12]
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	f042 0201 	orr.w	r2, r2, #1
 8005756:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	4a21      	ldr	r2, [pc, #132]	; (80057e4 <HAL_TIM_Base_Start_IT+0xbc>)
 800575e:	4293      	cmp	r3, r2
 8005760:	d018      	beq.n	8005794 <HAL_TIM_Base_Start_IT+0x6c>
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800576a:	d013      	beq.n	8005794 <HAL_TIM_Base_Start_IT+0x6c>
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	4a1d      	ldr	r2, [pc, #116]	; (80057e8 <HAL_TIM_Base_Start_IT+0xc0>)
 8005772:	4293      	cmp	r3, r2
 8005774:	d00e      	beq.n	8005794 <HAL_TIM_Base_Start_IT+0x6c>
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	4a1c      	ldr	r2, [pc, #112]	; (80057ec <HAL_TIM_Base_Start_IT+0xc4>)
 800577c:	4293      	cmp	r3, r2
 800577e:	d009      	beq.n	8005794 <HAL_TIM_Base_Start_IT+0x6c>
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	4a1a      	ldr	r2, [pc, #104]	; (80057f0 <HAL_TIM_Base_Start_IT+0xc8>)
 8005786:	4293      	cmp	r3, r2
 8005788:	d004      	beq.n	8005794 <HAL_TIM_Base_Start_IT+0x6c>
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	4a19      	ldr	r2, [pc, #100]	; (80057f4 <HAL_TIM_Base_Start_IT+0xcc>)
 8005790:	4293      	cmp	r3, r2
 8005792:	d115      	bne.n	80057c0 <HAL_TIM_Base_Start_IT+0x98>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	689a      	ldr	r2, [r3, #8]
 800579a:	4b17      	ldr	r3, [pc, #92]	; (80057f8 <HAL_TIM_Base_Start_IT+0xd0>)
 800579c:	4013      	ands	r3, r2
 800579e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	2b06      	cmp	r3, #6
 80057a4:	d015      	beq.n	80057d2 <HAL_TIM_Base_Start_IT+0xaa>
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80057ac:	d011      	beq.n	80057d2 <HAL_TIM_Base_Start_IT+0xaa>
    {
      __HAL_TIM_ENABLE(htim);
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	681a      	ldr	r2, [r3, #0]
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	f042 0201 	orr.w	r2, r2, #1
 80057bc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80057be:	e008      	b.n	80057d2 <HAL_TIM_Base_Start_IT+0xaa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	681a      	ldr	r2, [r3, #0]
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	f042 0201 	orr.w	r2, r2, #1
 80057ce:	601a      	str	r2, [r3, #0]
 80057d0:	e000      	b.n	80057d4 <HAL_TIM_Base_Start_IT+0xac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80057d2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80057d4:	2300      	movs	r3, #0
}
 80057d6:	4618      	mov	r0, r3
 80057d8:	3714      	adds	r7, #20
 80057da:	46bd      	mov	sp, r7
 80057dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057e0:	4770      	bx	lr
 80057e2:	bf00      	nop
 80057e4:	40012c00 	.word	0x40012c00
 80057e8:	40000400 	.word	0x40000400
 80057ec:	40000800 	.word	0x40000800
 80057f0:	40013400 	.word	0x40013400
 80057f4:	40014000 	.word	0x40014000
 80057f8:	00010007 	.word	0x00010007

080057fc <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 80057fc:	b580      	push	{r7, lr}
 80057fe:	b082      	sub	sp, #8
 8005800:	af00      	add	r7, sp, #0
 8005802:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	2b00      	cmp	r3, #0
 8005808:	d101      	bne.n	800580e <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 800580a:	2301      	movs	r3, #1
 800580c:	e049      	b.n	80058a2 <HAL_TIM_OC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005814:	b2db      	uxtb	r3, r3
 8005816:	2b00      	cmp	r3, #0
 8005818:	d106      	bne.n	8005828 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	2200      	movs	r2, #0
 800581e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8005822:	6878      	ldr	r0, [r7, #4]
 8005824:	f7fb fff0 	bl	8001808 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	2202      	movs	r2, #2
 800582c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	681a      	ldr	r2, [r3, #0]
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	3304      	adds	r3, #4
 8005838:	4619      	mov	r1, r3
 800583a:	4610      	mov	r0, r2
 800583c:	f000 fcfe 	bl	800623c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	2201      	movs	r2, #1
 8005844:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	2201      	movs	r2, #1
 800584c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	2201      	movs	r2, #1
 8005854:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	2201      	movs	r2, #1
 800585c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	2201      	movs	r2, #1
 8005864:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	2201      	movs	r2, #1
 800586c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	2201      	movs	r2, #1
 8005874:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	2201      	movs	r2, #1
 800587c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	2201      	movs	r2, #1
 8005884:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	2201      	movs	r2, #1
 800588c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	2201      	movs	r2, #1
 8005894:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	2201      	movs	r2, #1
 800589c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80058a0:	2300      	movs	r3, #0
}
 80058a2:	4618      	mov	r0, r3
 80058a4:	3708      	adds	r7, #8
 80058a6:	46bd      	mov	sp, r7
 80058a8:	bd80      	pop	{r7, pc}
	...

080058ac <HAL_TIM_OC_Start>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80058ac:	b580      	push	{r7, lr}
 80058ae:	b084      	sub	sp, #16
 80058b0:	af00      	add	r7, sp, #0
 80058b2:	6078      	str	r0, [r7, #4]
 80058b4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80058b6:	683b      	ldr	r3, [r7, #0]
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	d109      	bne.n	80058d0 <HAL_TIM_OC_Start+0x24>
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80058c2:	b2db      	uxtb	r3, r3
 80058c4:	2b01      	cmp	r3, #1
 80058c6:	bf14      	ite	ne
 80058c8:	2301      	movne	r3, #1
 80058ca:	2300      	moveq	r3, #0
 80058cc:	b2db      	uxtb	r3, r3
 80058ce:	e03c      	b.n	800594a <HAL_TIM_OC_Start+0x9e>
 80058d0:	683b      	ldr	r3, [r7, #0]
 80058d2:	2b04      	cmp	r3, #4
 80058d4:	d109      	bne.n	80058ea <HAL_TIM_OC_Start+0x3e>
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80058dc:	b2db      	uxtb	r3, r3
 80058de:	2b01      	cmp	r3, #1
 80058e0:	bf14      	ite	ne
 80058e2:	2301      	movne	r3, #1
 80058e4:	2300      	moveq	r3, #0
 80058e6:	b2db      	uxtb	r3, r3
 80058e8:	e02f      	b.n	800594a <HAL_TIM_OC_Start+0x9e>
 80058ea:	683b      	ldr	r3, [r7, #0]
 80058ec:	2b08      	cmp	r3, #8
 80058ee:	d109      	bne.n	8005904 <HAL_TIM_OC_Start+0x58>
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80058f6:	b2db      	uxtb	r3, r3
 80058f8:	2b01      	cmp	r3, #1
 80058fa:	bf14      	ite	ne
 80058fc:	2301      	movne	r3, #1
 80058fe:	2300      	moveq	r3, #0
 8005900:	b2db      	uxtb	r3, r3
 8005902:	e022      	b.n	800594a <HAL_TIM_OC_Start+0x9e>
 8005904:	683b      	ldr	r3, [r7, #0]
 8005906:	2b0c      	cmp	r3, #12
 8005908:	d109      	bne.n	800591e <HAL_TIM_OC_Start+0x72>
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005910:	b2db      	uxtb	r3, r3
 8005912:	2b01      	cmp	r3, #1
 8005914:	bf14      	ite	ne
 8005916:	2301      	movne	r3, #1
 8005918:	2300      	moveq	r3, #0
 800591a:	b2db      	uxtb	r3, r3
 800591c:	e015      	b.n	800594a <HAL_TIM_OC_Start+0x9e>
 800591e:	683b      	ldr	r3, [r7, #0]
 8005920:	2b10      	cmp	r3, #16
 8005922:	d109      	bne.n	8005938 <HAL_TIM_OC_Start+0x8c>
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800592a:	b2db      	uxtb	r3, r3
 800592c:	2b01      	cmp	r3, #1
 800592e:	bf14      	ite	ne
 8005930:	2301      	movne	r3, #1
 8005932:	2300      	moveq	r3, #0
 8005934:	b2db      	uxtb	r3, r3
 8005936:	e008      	b.n	800594a <HAL_TIM_OC_Start+0x9e>
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800593e:	b2db      	uxtb	r3, r3
 8005940:	2b01      	cmp	r3, #1
 8005942:	bf14      	ite	ne
 8005944:	2301      	movne	r3, #1
 8005946:	2300      	moveq	r3, #0
 8005948:	b2db      	uxtb	r3, r3
 800594a:	2b00      	cmp	r3, #0
 800594c:	d001      	beq.n	8005952 <HAL_TIM_OC_Start+0xa6>
  {
    return HAL_ERROR;
 800594e:	2301      	movs	r3, #1
 8005950:	e097      	b.n	8005a82 <HAL_TIM_OC_Start+0x1d6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005952:	683b      	ldr	r3, [r7, #0]
 8005954:	2b00      	cmp	r3, #0
 8005956:	d104      	bne.n	8005962 <HAL_TIM_OC_Start+0xb6>
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	2202      	movs	r2, #2
 800595c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005960:	e023      	b.n	80059aa <HAL_TIM_OC_Start+0xfe>
 8005962:	683b      	ldr	r3, [r7, #0]
 8005964:	2b04      	cmp	r3, #4
 8005966:	d104      	bne.n	8005972 <HAL_TIM_OC_Start+0xc6>
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	2202      	movs	r2, #2
 800596c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005970:	e01b      	b.n	80059aa <HAL_TIM_OC_Start+0xfe>
 8005972:	683b      	ldr	r3, [r7, #0]
 8005974:	2b08      	cmp	r3, #8
 8005976:	d104      	bne.n	8005982 <HAL_TIM_OC_Start+0xd6>
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	2202      	movs	r2, #2
 800597c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005980:	e013      	b.n	80059aa <HAL_TIM_OC_Start+0xfe>
 8005982:	683b      	ldr	r3, [r7, #0]
 8005984:	2b0c      	cmp	r3, #12
 8005986:	d104      	bne.n	8005992 <HAL_TIM_OC_Start+0xe6>
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	2202      	movs	r2, #2
 800598c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005990:	e00b      	b.n	80059aa <HAL_TIM_OC_Start+0xfe>
 8005992:	683b      	ldr	r3, [r7, #0]
 8005994:	2b10      	cmp	r3, #16
 8005996:	d104      	bne.n	80059a2 <HAL_TIM_OC_Start+0xf6>
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	2202      	movs	r2, #2
 800599c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80059a0:	e003      	b.n	80059aa <HAL_TIM_OC_Start+0xfe>
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	2202      	movs	r2, #2
 80059a6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Output compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	2201      	movs	r2, #1
 80059b0:	6839      	ldr	r1, [r7, #0]
 80059b2:	4618      	mov	r0, r3
 80059b4:	f001 f8d5 	bl	8006b62 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	4a33      	ldr	r2, [pc, #204]	; (8005a8c <HAL_TIM_OC_Start+0x1e0>)
 80059be:	4293      	cmp	r3, r2
 80059c0:	d013      	beq.n	80059ea <HAL_TIM_OC_Start+0x13e>
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	4a32      	ldr	r2, [pc, #200]	; (8005a90 <HAL_TIM_OC_Start+0x1e4>)
 80059c8:	4293      	cmp	r3, r2
 80059ca:	d00e      	beq.n	80059ea <HAL_TIM_OC_Start+0x13e>
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	4a30      	ldr	r2, [pc, #192]	; (8005a94 <HAL_TIM_OC_Start+0x1e8>)
 80059d2:	4293      	cmp	r3, r2
 80059d4:	d009      	beq.n	80059ea <HAL_TIM_OC_Start+0x13e>
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	4a2f      	ldr	r2, [pc, #188]	; (8005a98 <HAL_TIM_OC_Start+0x1ec>)
 80059dc:	4293      	cmp	r3, r2
 80059de:	d004      	beq.n	80059ea <HAL_TIM_OC_Start+0x13e>
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	4a2d      	ldr	r2, [pc, #180]	; (8005a9c <HAL_TIM_OC_Start+0x1f0>)
 80059e6:	4293      	cmp	r3, r2
 80059e8:	d101      	bne.n	80059ee <HAL_TIM_OC_Start+0x142>
 80059ea:	2301      	movs	r3, #1
 80059ec:	e000      	b.n	80059f0 <HAL_TIM_OC_Start+0x144>
 80059ee:	2300      	movs	r3, #0
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	d007      	beq.n	8005a04 <HAL_TIM_OC_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005a02:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	4a20      	ldr	r2, [pc, #128]	; (8005a8c <HAL_TIM_OC_Start+0x1e0>)
 8005a0a:	4293      	cmp	r3, r2
 8005a0c:	d018      	beq.n	8005a40 <HAL_TIM_OC_Start+0x194>
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005a16:	d013      	beq.n	8005a40 <HAL_TIM_OC_Start+0x194>
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	4a20      	ldr	r2, [pc, #128]	; (8005aa0 <HAL_TIM_OC_Start+0x1f4>)
 8005a1e:	4293      	cmp	r3, r2
 8005a20:	d00e      	beq.n	8005a40 <HAL_TIM_OC_Start+0x194>
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	4a1f      	ldr	r2, [pc, #124]	; (8005aa4 <HAL_TIM_OC_Start+0x1f8>)
 8005a28:	4293      	cmp	r3, r2
 8005a2a:	d009      	beq.n	8005a40 <HAL_TIM_OC_Start+0x194>
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	4a17      	ldr	r2, [pc, #92]	; (8005a90 <HAL_TIM_OC_Start+0x1e4>)
 8005a32:	4293      	cmp	r3, r2
 8005a34:	d004      	beq.n	8005a40 <HAL_TIM_OC_Start+0x194>
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	4a16      	ldr	r2, [pc, #88]	; (8005a94 <HAL_TIM_OC_Start+0x1e8>)
 8005a3c:	4293      	cmp	r3, r2
 8005a3e:	d115      	bne.n	8005a6c <HAL_TIM_OC_Start+0x1c0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	689a      	ldr	r2, [r3, #8]
 8005a46:	4b18      	ldr	r3, [pc, #96]	; (8005aa8 <HAL_TIM_OC_Start+0x1fc>)
 8005a48:	4013      	ands	r3, r2
 8005a4a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	2b06      	cmp	r3, #6
 8005a50:	d015      	beq.n	8005a7e <HAL_TIM_OC_Start+0x1d2>
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005a58:	d011      	beq.n	8005a7e <HAL_TIM_OC_Start+0x1d2>
    {
      __HAL_TIM_ENABLE(htim);
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	681a      	ldr	r2, [r3, #0]
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	f042 0201 	orr.w	r2, r2, #1
 8005a68:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005a6a:	e008      	b.n	8005a7e <HAL_TIM_OC_Start+0x1d2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	681a      	ldr	r2, [r3, #0]
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	f042 0201 	orr.w	r2, r2, #1
 8005a7a:	601a      	str	r2, [r3, #0]
 8005a7c:	e000      	b.n	8005a80 <HAL_TIM_OC_Start+0x1d4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005a7e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005a80:	2300      	movs	r3, #0
}
 8005a82:	4618      	mov	r0, r3
 8005a84:	3710      	adds	r7, #16
 8005a86:	46bd      	mov	sp, r7
 8005a88:	bd80      	pop	{r7, pc}
 8005a8a:	bf00      	nop
 8005a8c:	40012c00 	.word	0x40012c00
 8005a90:	40013400 	.word	0x40013400
 8005a94:	40014000 	.word	0x40014000
 8005a98:	40014400 	.word	0x40014400
 8005a9c:	40014800 	.word	0x40014800
 8005aa0:	40000400 	.word	0x40000400
 8005aa4:	40000800 	.word	0x40000800
 8005aa8:	00010007 	.word	0x00010007

08005aac <HAL_TIM_OC_Stop>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005aac:	b580      	push	{r7, lr}
 8005aae:	b082      	sub	sp, #8
 8005ab0:	af00      	add	r7, sp, #0
 8005ab2:	6078      	str	r0, [r7, #4]
 8005ab4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Output compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	2200      	movs	r2, #0
 8005abc:	6839      	ldr	r1, [r7, #0]
 8005abe:	4618      	mov	r0, r3
 8005ac0:	f001 f84f 	bl	8006b62 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	4a3e      	ldr	r2, [pc, #248]	; (8005bc4 <HAL_TIM_OC_Stop+0x118>)
 8005aca:	4293      	cmp	r3, r2
 8005acc:	d013      	beq.n	8005af6 <HAL_TIM_OC_Stop+0x4a>
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	4a3d      	ldr	r2, [pc, #244]	; (8005bc8 <HAL_TIM_OC_Stop+0x11c>)
 8005ad4:	4293      	cmp	r3, r2
 8005ad6:	d00e      	beq.n	8005af6 <HAL_TIM_OC_Stop+0x4a>
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	4a3b      	ldr	r2, [pc, #236]	; (8005bcc <HAL_TIM_OC_Stop+0x120>)
 8005ade:	4293      	cmp	r3, r2
 8005ae0:	d009      	beq.n	8005af6 <HAL_TIM_OC_Stop+0x4a>
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	4a3a      	ldr	r2, [pc, #232]	; (8005bd0 <HAL_TIM_OC_Stop+0x124>)
 8005ae8:	4293      	cmp	r3, r2
 8005aea:	d004      	beq.n	8005af6 <HAL_TIM_OC_Stop+0x4a>
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	4a38      	ldr	r2, [pc, #224]	; (8005bd4 <HAL_TIM_OC_Stop+0x128>)
 8005af2:	4293      	cmp	r3, r2
 8005af4:	d101      	bne.n	8005afa <HAL_TIM_OC_Stop+0x4e>
 8005af6:	2301      	movs	r3, #1
 8005af8:	e000      	b.n	8005afc <HAL_TIM_OC_Stop+0x50>
 8005afa:	2300      	movs	r3, #0
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	d017      	beq.n	8005b30 <HAL_TIM_OC_Stop+0x84>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	6a1a      	ldr	r2, [r3, #32]
 8005b06:	f241 1311 	movw	r3, #4369	; 0x1111
 8005b0a:	4013      	ands	r3, r2
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	d10f      	bne.n	8005b30 <HAL_TIM_OC_Stop+0x84>
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	6a1a      	ldr	r2, [r3, #32]
 8005b16:	f240 4344 	movw	r3, #1092	; 0x444
 8005b1a:	4013      	ands	r3, r2
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	d107      	bne.n	8005b30 <HAL_TIM_OC_Stop+0x84>
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005b2e:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	6a1a      	ldr	r2, [r3, #32]
 8005b36:	f241 1311 	movw	r3, #4369	; 0x1111
 8005b3a:	4013      	ands	r3, r2
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	d10f      	bne.n	8005b60 <HAL_TIM_OC_Stop+0xb4>
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	6a1a      	ldr	r2, [r3, #32]
 8005b46:	f240 4344 	movw	r3, #1092	; 0x444
 8005b4a:	4013      	ands	r3, r2
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	d107      	bne.n	8005b60 <HAL_TIM_OC_Stop+0xb4>
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	681a      	ldr	r2, [r3, #0]
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	f022 0201 	bic.w	r2, r2, #1
 8005b5e:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8005b60:	683b      	ldr	r3, [r7, #0]
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	d104      	bne.n	8005b70 <HAL_TIM_OC_Stop+0xc4>
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	2201      	movs	r2, #1
 8005b6a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005b6e:	e023      	b.n	8005bb8 <HAL_TIM_OC_Stop+0x10c>
 8005b70:	683b      	ldr	r3, [r7, #0]
 8005b72:	2b04      	cmp	r3, #4
 8005b74:	d104      	bne.n	8005b80 <HAL_TIM_OC_Stop+0xd4>
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	2201      	movs	r2, #1
 8005b7a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005b7e:	e01b      	b.n	8005bb8 <HAL_TIM_OC_Stop+0x10c>
 8005b80:	683b      	ldr	r3, [r7, #0]
 8005b82:	2b08      	cmp	r3, #8
 8005b84:	d104      	bne.n	8005b90 <HAL_TIM_OC_Stop+0xe4>
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	2201      	movs	r2, #1
 8005b8a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005b8e:	e013      	b.n	8005bb8 <HAL_TIM_OC_Stop+0x10c>
 8005b90:	683b      	ldr	r3, [r7, #0]
 8005b92:	2b0c      	cmp	r3, #12
 8005b94:	d104      	bne.n	8005ba0 <HAL_TIM_OC_Stop+0xf4>
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	2201      	movs	r2, #1
 8005b9a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005b9e:	e00b      	b.n	8005bb8 <HAL_TIM_OC_Stop+0x10c>
 8005ba0:	683b      	ldr	r3, [r7, #0]
 8005ba2:	2b10      	cmp	r3, #16
 8005ba4:	d104      	bne.n	8005bb0 <HAL_TIM_OC_Stop+0x104>
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	2201      	movs	r2, #1
 8005baa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005bae:	e003      	b.n	8005bb8 <HAL_TIM_OC_Stop+0x10c>
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	2201      	movs	r2, #1
 8005bb4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Return function status */
  return HAL_OK;
 8005bb8:	2300      	movs	r3, #0
}
 8005bba:	4618      	mov	r0, r3
 8005bbc:	3708      	adds	r7, #8
 8005bbe:	46bd      	mov	sp, r7
 8005bc0:	bd80      	pop	{r7, pc}
 8005bc2:	bf00      	nop
 8005bc4:	40012c00 	.word	0x40012c00
 8005bc8:	40013400 	.word	0x40013400
 8005bcc:	40014000 	.word	0x40014000
 8005bd0:	40014400 	.word	0x40014400
 8005bd4:	40014800 	.word	0x40014800

08005bd8 <HAL_TIM_OnePulse_Init>:
  *            @arg TIM_OPMODE_SINGLE: Only one pulse will be generated.
  *            @arg TIM_OPMODE_REPETITIVE: Repetitive pulses will be generated.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Init(TIM_HandleTypeDef *htim, uint32_t OnePulseMode)
{
 8005bd8:	b580      	push	{r7, lr}
 8005bda:	b082      	sub	sp, #8
 8005bdc:	af00      	add	r7, sp, #0
 8005bde:	6078      	str	r0, [r7, #4]
 8005be0:	6039      	str	r1, [r7, #0]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	d101      	bne.n	8005bec <HAL_TIM_OnePulse_Init+0x14>
  {
    return HAL_ERROR;
 8005be8:	2301      	movs	r3, #1
 8005bea:	e041      	b.n	8005c70 <HAL_TIM_OnePulse_Init+0x98>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_OPM_MODE(OnePulseMode));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005bf2:	b2db      	uxtb	r3, r3
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	d106      	bne.n	8005c06 <HAL_TIM_OnePulse_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	2200      	movs	r2, #0
 8005bfc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OnePulse_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OnePulse_MspInit(htim);
 8005c00:	6878      	ldr	r0, [r7, #4]
 8005c02:	f000 f839 	bl	8005c78 <HAL_TIM_OnePulse_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	2202      	movs	r2, #2
 8005c0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Configure the Time base in the One Pulse Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	681a      	ldr	r2, [r3, #0]
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	3304      	adds	r3, #4
 8005c16:	4619      	mov	r1, r3
 8005c18:	4610      	mov	r0, r2
 8005c1a:	f000 fb0f 	bl	800623c <TIM_Base_SetConfig>

  /* Reset the OPM Bit */
  htim->Instance->CR1 &= ~TIM_CR1_OPM;
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	681a      	ldr	r2, [r3, #0]
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	f022 0208 	bic.w	r2, r2, #8
 8005c2c:	601a      	str	r2, [r3, #0]

  /* Configure the OPM Mode */
  htim->Instance->CR1 |= OnePulseMode;
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	6819      	ldr	r1, [r3, #0]
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	683a      	ldr	r2, [r7, #0]
 8005c3a:	430a      	orrs	r2, r1
 8005c3c:	601a      	str	r2, [r3, #0]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	2201      	movs	r2, #1
 8005c42:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	2201      	movs	r2, #1
 8005c4a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	2201      	movs	r2, #1
 8005c52:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	2201      	movs	r2, #1
 8005c5a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	2201      	movs	r2, #1
 8005c62:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	2201      	movs	r2, #1
 8005c6a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005c6e:	2300      	movs	r3, #0
}
 8005c70:	4618      	mov	r0, r3
 8005c72:	3708      	adds	r7, #8
 8005c74:	46bd      	mov	sp, r7
 8005c76:	bd80      	pop	{r7, pc}

08005c78 <HAL_TIM_OnePulse_MspInit>:
  * @brief  Initializes the TIM One Pulse MSP.
  * @param  htim TIM One Pulse handle
  * @retval None
  */
__weak void HAL_TIM_OnePulse_MspInit(TIM_HandleTypeDef *htim)
{
 8005c78:	b480      	push	{r7}
 8005c7a:	b083      	sub	sp, #12
 8005c7c:	af00      	add	r7, sp, #0
 8005c7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OnePulse_MspInit could be implemented in the user file
   */
}
 8005c80:	bf00      	nop
 8005c82:	370c      	adds	r7, #12
 8005c84:	46bd      	mov	sp, r7
 8005c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c8a:	4770      	bx	lr

08005c8c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005c8c:	b580      	push	{r7, lr}
 8005c8e:	b082      	sub	sp, #8
 8005c90:	af00      	add	r7, sp, #0
 8005c92:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	691b      	ldr	r3, [r3, #16]
 8005c9a:	f003 0302 	and.w	r3, r3, #2
 8005c9e:	2b02      	cmp	r3, #2
 8005ca0:	d122      	bne.n	8005ce8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	68db      	ldr	r3, [r3, #12]
 8005ca8:	f003 0302 	and.w	r3, r3, #2
 8005cac:	2b02      	cmp	r3, #2
 8005cae:	d11b      	bne.n	8005ce8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	f06f 0202 	mvn.w	r2, #2
 8005cb8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	2201      	movs	r2, #1
 8005cbe:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	699b      	ldr	r3, [r3, #24]
 8005cc6:	f003 0303 	and.w	r3, r3, #3
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	d003      	beq.n	8005cd6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005cce:	6878      	ldr	r0, [r7, #4]
 8005cd0:	f000 fa95 	bl	80061fe <HAL_TIM_IC_CaptureCallback>
 8005cd4:	e005      	b.n	8005ce2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005cd6:	6878      	ldr	r0, [r7, #4]
 8005cd8:	f000 fa87 	bl	80061ea <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005cdc:	6878      	ldr	r0, [r7, #4]
 8005cde:	f000 fa98 	bl	8006212 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	2200      	movs	r2, #0
 8005ce6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	691b      	ldr	r3, [r3, #16]
 8005cee:	f003 0304 	and.w	r3, r3, #4
 8005cf2:	2b04      	cmp	r3, #4
 8005cf4:	d122      	bne.n	8005d3c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	68db      	ldr	r3, [r3, #12]
 8005cfc:	f003 0304 	and.w	r3, r3, #4
 8005d00:	2b04      	cmp	r3, #4
 8005d02:	d11b      	bne.n	8005d3c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	f06f 0204 	mvn.w	r2, #4
 8005d0c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	2202      	movs	r2, #2
 8005d12:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	699b      	ldr	r3, [r3, #24]
 8005d1a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	d003      	beq.n	8005d2a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005d22:	6878      	ldr	r0, [r7, #4]
 8005d24:	f000 fa6b 	bl	80061fe <HAL_TIM_IC_CaptureCallback>
 8005d28:	e005      	b.n	8005d36 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005d2a:	6878      	ldr	r0, [r7, #4]
 8005d2c:	f000 fa5d 	bl	80061ea <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005d30:	6878      	ldr	r0, [r7, #4]
 8005d32:	f000 fa6e 	bl	8006212 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	2200      	movs	r2, #0
 8005d3a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	691b      	ldr	r3, [r3, #16]
 8005d42:	f003 0308 	and.w	r3, r3, #8
 8005d46:	2b08      	cmp	r3, #8
 8005d48:	d122      	bne.n	8005d90 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	68db      	ldr	r3, [r3, #12]
 8005d50:	f003 0308 	and.w	r3, r3, #8
 8005d54:	2b08      	cmp	r3, #8
 8005d56:	d11b      	bne.n	8005d90 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	f06f 0208 	mvn.w	r2, #8
 8005d60:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	2204      	movs	r2, #4
 8005d66:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	69db      	ldr	r3, [r3, #28]
 8005d6e:	f003 0303 	and.w	r3, r3, #3
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	d003      	beq.n	8005d7e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005d76:	6878      	ldr	r0, [r7, #4]
 8005d78:	f000 fa41 	bl	80061fe <HAL_TIM_IC_CaptureCallback>
 8005d7c:	e005      	b.n	8005d8a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005d7e:	6878      	ldr	r0, [r7, #4]
 8005d80:	f000 fa33 	bl	80061ea <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005d84:	6878      	ldr	r0, [r7, #4]
 8005d86:	f000 fa44 	bl	8006212 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	2200      	movs	r2, #0
 8005d8e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	691b      	ldr	r3, [r3, #16]
 8005d96:	f003 0310 	and.w	r3, r3, #16
 8005d9a:	2b10      	cmp	r3, #16
 8005d9c:	d122      	bne.n	8005de4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	68db      	ldr	r3, [r3, #12]
 8005da4:	f003 0310 	and.w	r3, r3, #16
 8005da8:	2b10      	cmp	r3, #16
 8005daa:	d11b      	bne.n	8005de4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	f06f 0210 	mvn.w	r2, #16
 8005db4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	2208      	movs	r2, #8
 8005dba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	69db      	ldr	r3, [r3, #28]
 8005dc2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	d003      	beq.n	8005dd2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005dca:	6878      	ldr	r0, [r7, #4]
 8005dcc:	f000 fa17 	bl	80061fe <HAL_TIM_IC_CaptureCallback>
 8005dd0:	e005      	b.n	8005dde <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005dd2:	6878      	ldr	r0, [r7, #4]
 8005dd4:	f000 fa09 	bl	80061ea <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005dd8:	6878      	ldr	r0, [r7, #4]
 8005dda:	f000 fa1a 	bl	8006212 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	2200      	movs	r2, #0
 8005de2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	691b      	ldr	r3, [r3, #16]
 8005dea:	f003 0301 	and.w	r3, r3, #1
 8005dee:	2b01      	cmp	r3, #1
 8005df0:	d10e      	bne.n	8005e10 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	68db      	ldr	r3, [r3, #12]
 8005df8:	f003 0301 	and.w	r3, r3, #1
 8005dfc:	2b01      	cmp	r3, #1
 8005dfe:	d107      	bne.n	8005e10 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	f06f 0201 	mvn.w	r2, #1
 8005e08:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005e0a:	6878      	ldr	r0, [r7, #4]
 8005e0c:	f000 f9e3 	bl	80061d6 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	691b      	ldr	r3, [r3, #16]
 8005e16:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005e1a:	2b80      	cmp	r3, #128	; 0x80
 8005e1c:	d10e      	bne.n	8005e3c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	68db      	ldr	r3, [r3, #12]
 8005e24:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005e28:	2b80      	cmp	r3, #128	; 0x80
 8005e2a:	d107      	bne.n	8005e3c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005e34:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005e36:	6878      	ldr	r0, [r7, #4]
 8005e38:	f000 ffc0 	bl	8006dbc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	691b      	ldr	r3, [r3, #16]
 8005e42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e46:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005e4a:	d10e      	bne.n	8005e6a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	68db      	ldr	r3, [r3, #12]
 8005e52:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005e56:	2b80      	cmp	r3, #128	; 0x80
 8005e58:	d107      	bne.n	8005e6a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8005e62:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005e64:	6878      	ldr	r0, [r7, #4]
 8005e66:	f000 ffb3 	bl	8006dd0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	691b      	ldr	r3, [r3, #16]
 8005e70:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e74:	2b40      	cmp	r3, #64	; 0x40
 8005e76:	d10e      	bne.n	8005e96 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	68db      	ldr	r3, [r3, #12]
 8005e7e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e82:	2b40      	cmp	r3, #64	; 0x40
 8005e84:	d107      	bne.n	8005e96 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005e8e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005e90:	6878      	ldr	r0, [r7, #4]
 8005e92:	f000 f9c8 	bl	8006226 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	691b      	ldr	r3, [r3, #16]
 8005e9c:	f003 0320 	and.w	r3, r3, #32
 8005ea0:	2b20      	cmp	r3, #32
 8005ea2:	d10e      	bne.n	8005ec2 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	68db      	ldr	r3, [r3, #12]
 8005eaa:	f003 0320 	and.w	r3, r3, #32
 8005eae:	2b20      	cmp	r3, #32
 8005eb0:	d107      	bne.n	8005ec2 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	f06f 0220 	mvn.w	r2, #32
 8005eba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005ebc:	6878      	ldr	r0, [r7, #4]
 8005ebe:	f000 ff73 	bl	8006da8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005ec2:	bf00      	nop
 8005ec4:	3708      	adds	r7, #8
 8005ec6:	46bd      	mov	sp, r7
 8005ec8:	bd80      	pop	{r7, pc}
	...

08005ecc <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8005ecc:	b580      	push	{r7, lr}
 8005ece:	b086      	sub	sp, #24
 8005ed0:	af00      	add	r7, sp, #0
 8005ed2:	60f8      	str	r0, [r7, #12]
 8005ed4:	60b9      	str	r1, [r7, #8]
 8005ed6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005ed8:	2300      	movs	r3, #0
 8005eda:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005ee2:	2b01      	cmp	r3, #1
 8005ee4:	d101      	bne.n	8005eea <HAL_TIM_OC_ConfigChannel+0x1e>
 8005ee6:	2302      	movs	r3, #2
 8005ee8:	e066      	b.n	8005fb8 <HAL_TIM_OC_ConfigChannel+0xec>
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	2201      	movs	r2, #1
 8005eee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	2b14      	cmp	r3, #20
 8005ef6:	d857      	bhi.n	8005fa8 <HAL_TIM_OC_ConfigChannel+0xdc>
 8005ef8:	a201      	add	r2, pc, #4	; (adr r2, 8005f00 <HAL_TIM_OC_ConfigChannel+0x34>)
 8005efa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005efe:	bf00      	nop
 8005f00:	08005f55 	.word	0x08005f55
 8005f04:	08005fa9 	.word	0x08005fa9
 8005f08:	08005fa9 	.word	0x08005fa9
 8005f0c:	08005fa9 	.word	0x08005fa9
 8005f10:	08005f63 	.word	0x08005f63
 8005f14:	08005fa9 	.word	0x08005fa9
 8005f18:	08005fa9 	.word	0x08005fa9
 8005f1c:	08005fa9 	.word	0x08005fa9
 8005f20:	08005f71 	.word	0x08005f71
 8005f24:	08005fa9 	.word	0x08005fa9
 8005f28:	08005fa9 	.word	0x08005fa9
 8005f2c:	08005fa9 	.word	0x08005fa9
 8005f30:	08005f7f 	.word	0x08005f7f
 8005f34:	08005fa9 	.word	0x08005fa9
 8005f38:	08005fa9 	.word	0x08005fa9
 8005f3c:	08005fa9 	.word	0x08005fa9
 8005f40:	08005f8d 	.word	0x08005f8d
 8005f44:	08005fa9 	.word	0x08005fa9
 8005f48:	08005fa9 	.word	0x08005fa9
 8005f4c:	08005fa9 	.word	0x08005fa9
 8005f50:	08005f9b 	.word	0x08005f9b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	68b9      	ldr	r1, [r7, #8]
 8005f5a:	4618      	mov	r0, r3
 8005f5c:	f000 f9fe 	bl	800635c <TIM_OC1_SetConfig>
      break;
 8005f60:	e025      	b.n	8005fae <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	68b9      	ldr	r1, [r7, #8]
 8005f68:	4618      	mov	r0, r3
 8005f6a:	f000 fa87 	bl	800647c <TIM_OC2_SetConfig>
      break;
 8005f6e:	e01e      	b.n	8005fae <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	68b9      	ldr	r1, [r7, #8]
 8005f76:	4618      	mov	r0, r3
 8005f78:	f000 fb0a 	bl	8006590 <TIM_OC3_SetConfig>
      break;
 8005f7c:	e017      	b.n	8005fae <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	68b9      	ldr	r1, [r7, #8]
 8005f84:	4618      	mov	r0, r3
 8005f86:	f000 fb8b 	bl	80066a0 <TIM_OC4_SetConfig>
      break;
 8005f8a:	e010      	b.n	8005fae <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	68b9      	ldr	r1, [r7, #8]
 8005f92:	4618      	mov	r0, r3
 8005f94:	f000 fbee 	bl	8006774 <TIM_OC5_SetConfig>
      break;
 8005f98:	e009      	b.n	8005fae <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	68b9      	ldr	r1, [r7, #8]
 8005fa0:	4618      	mov	r0, r3
 8005fa2:	f000 fc4b 	bl	800683c <TIM_OC6_SetConfig>
      break;
 8005fa6:	e002      	b.n	8005fae <HAL_TIM_OC_ConfigChannel+0xe2>
    }
#endif /* TIM_CCER_CC6E */

    default:
      status = HAL_ERROR;
 8005fa8:	2301      	movs	r3, #1
 8005faa:	75fb      	strb	r3, [r7, #23]
      break;
 8005fac:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	2200      	movs	r2, #0
 8005fb2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005fb6:	7dfb      	ldrb	r3, [r7, #23]
}
 8005fb8:	4618      	mov	r0, r3
 8005fba:	3718      	adds	r7, #24
 8005fbc:	46bd      	mov	sp, r7
 8005fbe:	bd80      	pop	{r7, pc}

08005fc0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005fc0:	b580      	push	{r7, lr}
 8005fc2:	b084      	sub	sp, #16
 8005fc4:	af00      	add	r7, sp, #0
 8005fc6:	6078      	str	r0, [r7, #4]
 8005fc8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005fca:	2300      	movs	r3, #0
 8005fcc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005fd4:	2b01      	cmp	r3, #1
 8005fd6:	d101      	bne.n	8005fdc <HAL_TIM_ConfigClockSource+0x1c>
 8005fd8:	2302      	movs	r3, #2
 8005fda:	e0b6      	b.n	800614a <HAL_TIM_ConfigClockSource+0x18a>
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	2201      	movs	r2, #1
 8005fe0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	2202      	movs	r2, #2
 8005fe8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	689b      	ldr	r3, [r3, #8]
 8005ff2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005ff4:	68bb      	ldr	r3, [r7, #8]
 8005ff6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005ffa:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005ffe:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006000:	68bb      	ldr	r3, [r7, #8]
 8006002:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006006:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	68ba      	ldr	r2, [r7, #8]
 800600e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006010:	683b      	ldr	r3, [r7, #0]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006018:	d03e      	beq.n	8006098 <HAL_TIM_ConfigClockSource+0xd8>
 800601a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800601e:	f200 8087 	bhi.w	8006130 <HAL_TIM_ConfigClockSource+0x170>
 8006022:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006026:	f000 8086 	beq.w	8006136 <HAL_TIM_ConfigClockSource+0x176>
 800602a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800602e:	d87f      	bhi.n	8006130 <HAL_TIM_ConfigClockSource+0x170>
 8006030:	2b70      	cmp	r3, #112	; 0x70
 8006032:	d01a      	beq.n	800606a <HAL_TIM_ConfigClockSource+0xaa>
 8006034:	2b70      	cmp	r3, #112	; 0x70
 8006036:	d87b      	bhi.n	8006130 <HAL_TIM_ConfigClockSource+0x170>
 8006038:	2b60      	cmp	r3, #96	; 0x60
 800603a:	d050      	beq.n	80060de <HAL_TIM_ConfigClockSource+0x11e>
 800603c:	2b60      	cmp	r3, #96	; 0x60
 800603e:	d877      	bhi.n	8006130 <HAL_TIM_ConfigClockSource+0x170>
 8006040:	2b50      	cmp	r3, #80	; 0x50
 8006042:	d03c      	beq.n	80060be <HAL_TIM_ConfigClockSource+0xfe>
 8006044:	2b50      	cmp	r3, #80	; 0x50
 8006046:	d873      	bhi.n	8006130 <HAL_TIM_ConfigClockSource+0x170>
 8006048:	2b40      	cmp	r3, #64	; 0x40
 800604a:	d058      	beq.n	80060fe <HAL_TIM_ConfigClockSource+0x13e>
 800604c:	2b40      	cmp	r3, #64	; 0x40
 800604e:	d86f      	bhi.n	8006130 <HAL_TIM_ConfigClockSource+0x170>
 8006050:	2b30      	cmp	r3, #48	; 0x30
 8006052:	d064      	beq.n	800611e <HAL_TIM_ConfigClockSource+0x15e>
 8006054:	2b30      	cmp	r3, #48	; 0x30
 8006056:	d86b      	bhi.n	8006130 <HAL_TIM_ConfigClockSource+0x170>
 8006058:	2b20      	cmp	r3, #32
 800605a:	d060      	beq.n	800611e <HAL_TIM_ConfigClockSource+0x15e>
 800605c:	2b20      	cmp	r3, #32
 800605e:	d867      	bhi.n	8006130 <HAL_TIM_ConfigClockSource+0x170>
 8006060:	2b00      	cmp	r3, #0
 8006062:	d05c      	beq.n	800611e <HAL_TIM_ConfigClockSource+0x15e>
 8006064:	2b10      	cmp	r3, #16
 8006066:	d05a      	beq.n	800611e <HAL_TIM_ConfigClockSource+0x15e>
 8006068:	e062      	b.n	8006130 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	6818      	ldr	r0, [r3, #0]
 800606e:	683b      	ldr	r3, [r7, #0]
 8006070:	6899      	ldr	r1, [r3, #8]
 8006072:	683b      	ldr	r3, [r7, #0]
 8006074:	685a      	ldr	r2, [r3, #4]
 8006076:	683b      	ldr	r3, [r7, #0]
 8006078:	68db      	ldr	r3, [r3, #12]
 800607a:	f000 fd52 	bl	8006b22 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	689b      	ldr	r3, [r3, #8]
 8006084:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006086:	68bb      	ldr	r3, [r7, #8]
 8006088:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800608c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	68ba      	ldr	r2, [r7, #8]
 8006094:	609a      	str	r2, [r3, #8]
      break;
 8006096:	e04f      	b.n	8006138 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	6818      	ldr	r0, [r3, #0]
 800609c:	683b      	ldr	r3, [r7, #0]
 800609e:	6899      	ldr	r1, [r3, #8]
 80060a0:	683b      	ldr	r3, [r7, #0]
 80060a2:	685a      	ldr	r2, [r3, #4]
 80060a4:	683b      	ldr	r3, [r7, #0]
 80060a6:	68db      	ldr	r3, [r3, #12]
 80060a8:	f000 fd3b 	bl	8006b22 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	689a      	ldr	r2, [r3, #8]
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80060ba:	609a      	str	r2, [r3, #8]
      break;
 80060bc:	e03c      	b.n	8006138 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	6818      	ldr	r0, [r3, #0]
 80060c2:	683b      	ldr	r3, [r7, #0]
 80060c4:	6859      	ldr	r1, [r3, #4]
 80060c6:	683b      	ldr	r3, [r7, #0]
 80060c8:	68db      	ldr	r3, [r3, #12]
 80060ca:	461a      	mov	r2, r3
 80060cc:	f000 fcaf 	bl	8006a2e <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	2150      	movs	r1, #80	; 0x50
 80060d6:	4618      	mov	r0, r3
 80060d8:	f000 fd08 	bl	8006aec <TIM_ITRx_SetConfig>
      break;
 80060dc:	e02c      	b.n	8006138 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	6818      	ldr	r0, [r3, #0]
 80060e2:	683b      	ldr	r3, [r7, #0]
 80060e4:	6859      	ldr	r1, [r3, #4]
 80060e6:	683b      	ldr	r3, [r7, #0]
 80060e8:	68db      	ldr	r3, [r3, #12]
 80060ea:	461a      	mov	r2, r3
 80060ec:	f000 fcce 	bl	8006a8c <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	2160      	movs	r1, #96	; 0x60
 80060f6:	4618      	mov	r0, r3
 80060f8:	f000 fcf8 	bl	8006aec <TIM_ITRx_SetConfig>
      break;
 80060fc:	e01c      	b.n	8006138 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	6818      	ldr	r0, [r3, #0]
 8006102:	683b      	ldr	r3, [r7, #0]
 8006104:	6859      	ldr	r1, [r3, #4]
 8006106:	683b      	ldr	r3, [r7, #0]
 8006108:	68db      	ldr	r3, [r3, #12]
 800610a:	461a      	mov	r2, r3
 800610c:	f000 fc8f 	bl	8006a2e <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	2140      	movs	r1, #64	; 0x40
 8006116:	4618      	mov	r0, r3
 8006118:	f000 fce8 	bl	8006aec <TIM_ITRx_SetConfig>
      break;
 800611c:	e00c      	b.n	8006138 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	681a      	ldr	r2, [r3, #0]
 8006122:	683b      	ldr	r3, [r7, #0]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	4619      	mov	r1, r3
 8006128:	4610      	mov	r0, r2
 800612a:	f000 fcdf 	bl	8006aec <TIM_ITRx_SetConfig>
      break;
 800612e:	e003      	b.n	8006138 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8006130:	2301      	movs	r3, #1
 8006132:	73fb      	strb	r3, [r7, #15]
      break;
 8006134:	e000      	b.n	8006138 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8006136:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	2201      	movs	r2, #1
 800613c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	2200      	movs	r2, #0
 8006144:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006148:	7bfb      	ldrb	r3, [r7, #15]
}
 800614a:	4618      	mov	r0, r3
 800614c:	3710      	adds	r7, #16
 800614e:	46bd      	mov	sp, r7
 8006150:	bd80      	pop	{r7, pc}

08006152 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8006152:	b580      	push	{r7, lr}
 8006154:	b082      	sub	sp, #8
 8006156:	af00      	add	r7, sp, #0
 8006158:	6078      	str	r0, [r7, #4]
 800615a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006162:	2b01      	cmp	r3, #1
 8006164:	d101      	bne.n	800616a <HAL_TIM_SlaveConfigSynchro+0x18>
 8006166:	2302      	movs	r3, #2
 8006168:	e031      	b.n	80061ce <HAL_TIM_SlaveConfigSynchro+0x7c>
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	2201      	movs	r2, #1
 800616e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	2202      	movs	r2, #2
 8006176:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 800617a:	6839      	ldr	r1, [r7, #0]
 800617c:	6878      	ldr	r0, [r7, #4]
 800617e:	f000 fbc3 	bl	8006908 <TIM_SlaveTimer_SetConfig>
 8006182:	4603      	mov	r3, r0
 8006184:	2b00      	cmp	r3, #0
 8006186:	d009      	beq.n	800619c <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	2201      	movs	r2, #1
 800618c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	2200      	movs	r2, #0
 8006194:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 8006198:	2301      	movs	r3, #1
 800619a:	e018      	b.n	80061ce <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	68da      	ldr	r2, [r3, #12]
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80061aa:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	68da      	ldr	r2, [r3, #12]
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80061ba:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	2201      	movs	r2, #1
 80061c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	2200      	movs	r2, #0
 80061c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80061cc:	2300      	movs	r3, #0
}
 80061ce:	4618      	mov	r0, r3
 80061d0:	3708      	adds	r7, #8
 80061d2:	46bd      	mov	sp, r7
 80061d4:	bd80      	pop	{r7, pc}

080061d6 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80061d6:	b480      	push	{r7}
 80061d8:	b083      	sub	sp, #12
 80061da:	af00      	add	r7, sp, #0
 80061dc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80061de:	bf00      	nop
 80061e0:	370c      	adds	r7, #12
 80061e2:	46bd      	mov	sp, r7
 80061e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061e8:	4770      	bx	lr

080061ea <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80061ea:	b480      	push	{r7}
 80061ec:	b083      	sub	sp, #12
 80061ee:	af00      	add	r7, sp, #0
 80061f0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80061f2:	bf00      	nop
 80061f4:	370c      	adds	r7, #12
 80061f6:	46bd      	mov	sp, r7
 80061f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061fc:	4770      	bx	lr

080061fe <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80061fe:	b480      	push	{r7}
 8006200:	b083      	sub	sp, #12
 8006202:	af00      	add	r7, sp, #0
 8006204:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006206:	bf00      	nop
 8006208:	370c      	adds	r7, #12
 800620a:	46bd      	mov	sp, r7
 800620c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006210:	4770      	bx	lr

08006212 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006212:	b480      	push	{r7}
 8006214:	b083      	sub	sp, #12
 8006216:	af00      	add	r7, sp, #0
 8006218:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800621a:	bf00      	nop
 800621c:	370c      	adds	r7, #12
 800621e:	46bd      	mov	sp, r7
 8006220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006224:	4770      	bx	lr

08006226 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006226:	b480      	push	{r7}
 8006228:	b083      	sub	sp, #12
 800622a:	af00      	add	r7, sp, #0
 800622c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800622e:	bf00      	nop
 8006230:	370c      	adds	r7, #12
 8006232:	46bd      	mov	sp, r7
 8006234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006238:	4770      	bx	lr
	...

0800623c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800623c:	b480      	push	{r7}
 800623e:	b085      	sub	sp, #20
 8006240:	af00      	add	r7, sp, #0
 8006242:	6078      	str	r0, [r7, #4]
 8006244:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	4a3c      	ldr	r2, [pc, #240]	; (8006340 <TIM_Base_SetConfig+0x104>)
 8006250:	4293      	cmp	r3, r2
 8006252:	d00f      	beq.n	8006274 <TIM_Base_SetConfig+0x38>
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800625a:	d00b      	beq.n	8006274 <TIM_Base_SetConfig+0x38>
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	4a39      	ldr	r2, [pc, #228]	; (8006344 <TIM_Base_SetConfig+0x108>)
 8006260:	4293      	cmp	r3, r2
 8006262:	d007      	beq.n	8006274 <TIM_Base_SetConfig+0x38>
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	4a38      	ldr	r2, [pc, #224]	; (8006348 <TIM_Base_SetConfig+0x10c>)
 8006268:	4293      	cmp	r3, r2
 800626a:	d003      	beq.n	8006274 <TIM_Base_SetConfig+0x38>
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	4a37      	ldr	r2, [pc, #220]	; (800634c <TIM_Base_SetConfig+0x110>)
 8006270:	4293      	cmp	r3, r2
 8006272:	d108      	bne.n	8006286 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800627a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800627c:	683b      	ldr	r3, [r7, #0]
 800627e:	685b      	ldr	r3, [r3, #4]
 8006280:	68fa      	ldr	r2, [r7, #12]
 8006282:	4313      	orrs	r3, r2
 8006284:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	4a2d      	ldr	r2, [pc, #180]	; (8006340 <TIM_Base_SetConfig+0x104>)
 800628a:	4293      	cmp	r3, r2
 800628c:	d01b      	beq.n	80062c6 <TIM_Base_SetConfig+0x8a>
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006294:	d017      	beq.n	80062c6 <TIM_Base_SetConfig+0x8a>
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	4a2a      	ldr	r2, [pc, #168]	; (8006344 <TIM_Base_SetConfig+0x108>)
 800629a:	4293      	cmp	r3, r2
 800629c:	d013      	beq.n	80062c6 <TIM_Base_SetConfig+0x8a>
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	4a29      	ldr	r2, [pc, #164]	; (8006348 <TIM_Base_SetConfig+0x10c>)
 80062a2:	4293      	cmp	r3, r2
 80062a4:	d00f      	beq.n	80062c6 <TIM_Base_SetConfig+0x8a>
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	4a28      	ldr	r2, [pc, #160]	; (800634c <TIM_Base_SetConfig+0x110>)
 80062aa:	4293      	cmp	r3, r2
 80062ac:	d00b      	beq.n	80062c6 <TIM_Base_SetConfig+0x8a>
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	4a27      	ldr	r2, [pc, #156]	; (8006350 <TIM_Base_SetConfig+0x114>)
 80062b2:	4293      	cmp	r3, r2
 80062b4:	d007      	beq.n	80062c6 <TIM_Base_SetConfig+0x8a>
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	4a26      	ldr	r2, [pc, #152]	; (8006354 <TIM_Base_SetConfig+0x118>)
 80062ba:	4293      	cmp	r3, r2
 80062bc:	d003      	beq.n	80062c6 <TIM_Base_SetConfig+0x8a>
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	4a25      	ldr	r2, [pc, #148]	; (8006358 <TIM_Base_SetConfig+0x11c>)
 80062c2:	4293      	cmp	r3, r2
 80062c4:	d108      	bne.n	80062d8 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80062cc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80062ce:	683b      	ldr	r3, [r7, #0]
 80062d0:	68db      	ldr	r3, [r3, #12]
 80062d2:	68fa      	ldr	r2, [r7, #12]
 80062d4:	4313      	orrs	r3, r2
 80062d6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80062de:	683b      	ldr	r3, [r7, #0]
 80062e0:	695b      	ldr	r3, [r3, #20]
 80062e2:	4313      	orrs	r3, r2
 80062e4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	68fa      	ldr	r2, [r7, #12]
 80062ea:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80062ec:	683b      	ldr	r3, [r7, #0]
 80062ee:	689a      	ldr	r2, [r3, #8]
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80062f4:	683b      	ldr	r3, [r7, #0]
 80062f6:	681a      	ldr	r2, [r3, #0]
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	4a10      	ldr	r2, [pc, #64]	; (8006340 <TIM_Base_SetConfig+0x104>)
 8006300:	4293      	cmp	r3, r2
 8006302:	d00f      	beq.n	8006324 <TIM_Base_SetConfig+0xe8>
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	4a11      	ldr	r2, [pc, #68]	; (800634c <TIM_Base_SetConfig+0x110>)
 8006308:	4293      	cmp	r3, r2
 800630a:	d00b      	beq.n	8006324 <TIM_Base_SetConfig+0xe8>
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	4a10      	ldr	r2, [pc, #64]	; (8006350 <TIM_Base_SetConfig+0x114>)
 8006310:	4293      	cmp	r3, r2
 8006312:	d007      	beq.n	8006324 <TIM_Base_SetConfig+0xe8>
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	4a0f      	ldr	r2, [pc, #60]	; (8006354 <TIM_Base_SetConfig+0x118>)
 8006318:	4293      	cmp	r3, r2
 800631a:	d003      	beq.n	8006324 <TIM_Base_SetConfig+0xe8>
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	4a0e      	ldr	r2, [pc, #56]	; (8006358 <TIM_Base_SetConfig+0x11c>)
 8006320:	4293      	cmp	r3, r2
 8006322:	d103      	bne.n	800632c <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006324:	683b      	ldr	r3, [r7, #0]
 8006326:	691a      	ldr	r2, [r3, #16]
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	2201      	movs	r2, #1
 8006330:	615a      	str	r2, [r3, #20]
}
 8006332:	bf00      	nop
 8006334:	3714      	adds	r7, #20
 8006336:	46bd      	mov	sp, r7
 8006338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800633c:	4770      	bx	lr
 800633e:	bf00      	nop
 8006340:	40012c00 	.word	0x40012c00
 8006344:	40000400 	.word	0x40000400
 8006348:	40000800 	.word	0x40000800
 800634c:	40013400 	.word	0x40013400
 8006350:	40014000 	.word	0x40014000
 8006354:	40014400 	.word	0x40014400
 8006358:	40014800 	.word	0x40014800

0800635c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800635c:	b480      	push	{r7}
 800635e:	b087      	sub	sp, #28
 8006360:	af00      	add	r7, sp, #0
 8006362:	6078      	str	r0, [r7, #4]
 8006364:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	6a1b      	ldr	r3, [r3, #32]
 800636a:	f023 0201 	bic.w	r2, r3, #1
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	6a1b      	ldr	r3, [r3, #32]
 8006376:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	685b      	ldr	r3, [r3, #4]
 800637c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	699b      	ldr	r3, [r3, #24]
 8006382:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800638a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800638e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	f023 0303 	bic.w	r3, r3, #3
 8006396:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006398:	683b      	ldr	r3, [r7, #0]
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	68fa      	ldr	r2, [r7, #12]
 800639e:	4313      	orrs	r3, r2
 80063a0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80063a2:	697b      	ldr	r3, [r7, #20]
 80063a4:	f023 0302 	bic.w	r3, r3, #2
 80063a8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80063aa:	683b      	ldr	r3, [r7, #0]
 80063ac:	689b      	ldr	r3, [r3, #8]
 80063ae:	697a      	ldr	r2, [r7, #20]
 80063b0:	4313      	orrs	r3, r2
 80063b2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	4a2c      	ldr	r2, [pc, #176]	; (8006468 <TIM_OC1_SetConfig+0x10c>)
 80063b8:	4293      	cmp	r3, r2
 80063ba:	d00f      	beq.n	80063dc <TIM_OC1_SetConfig+0x80>
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	4a2b      	ldr	r2, [pc, #172]	; (800646c <TIM_OC1_SetConfig+0x110>)
 80063c0:	4293      	cmp	r3, r2
 80063c2:	d00b      	beq.n	80063dc <TIM_OC1_SetConfig+0x80>
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	4a2a      	ldr	r2, [pc, #168]	; (8006470 <TIM_OC1_SetConfig+0x114>)
 80063c8:	4293      	cmp	r3, r2
 80063ca:	d007      	beq.n	80063dc <TIM_OC1_SetConfig+0x80>
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	4a29      	ldr	r2, [pc, #164]	; (8006474 <TIM_OC1_SetConfig+0x118>)
 80063d0:	4293      	cmp	r3, r2
 80063d2:	d003      	beq.n	80063dc <TIM_OC1_SetConfig+0x80>
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	4a28      	ldr	r2, [pc, #160]	; (8006478 <TIM_OC1_SetConfig+0x11c>)
 80063d8:	4293      	cmp	r3, r2
 80063da:	d10c      	bne.n	80063f6 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80063dc:	697b      	ldr	r3, [r7, #20]
 80063de:	f023 0308 	bic.w	r3, r3, #8
 80063e2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80063e4:	683b      	ldr	r3, [r7, #0]
 80063e6:	68db      	ldr	r3, [r3, #12]
 80063e8:	697a      	ldr	r2, [r7, #20]
 80063ea:	4313      	orrs	r3, r2
 80063ec:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80063ee:	697b      	ldr	r3, [r7, #20]
 80063f0:	f023 0304 	bic.w	r3, r3, #4
 80063f4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	4a1b      	ldr	r2, [pc, #108]	; (8006468 <TIM_OC1_SetConfig+0x10c>)
 80063fa:	4293      	cmp	r3, r2
 80063fc:	d00f      	beq.n	800641e <TIM_OC1_SetConfig+0xc2>
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	4a1a      	ldr	r2, [pc, #104]	; (800646c <TIM_OC1_SetConfig+0x110>)
 8006402:	4293      	cmp	r3, r2
 8006404:	d00b      	beq.n	800641e <TIM_OC1_SetConfig+0xc2>
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	4a19      	ldr	r2, [pc, #100]	; (8006470 <TIM_OC1_SetConfig+0x114>)
 800640a:	4293      	cmp	r3, r2
 800640c:	d007      	beq.n	800641e <TIM_OC1_SetConfig+0xc2>
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	4a18      	ldr	r2, [pc, #96]	; (8006474 <TIM_OC1_SetConfig+0x118>)
 8006412:	4293      	cmp	r3, r2
 8006414:	d003      	beq.n	800641e <TIM_OC1_SetConfig+0xc2>
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	4a17      	ldr	r2, [pc, #92]	; (8006478 <TIM_OC1_SetConfig+0x11c>)
 800641a:	4293      	cmp	r3, r2
 800641c:	d111      	bne.n	8006442 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800641e:	693b      	ldr	r3, [r7, #16]
 8006420:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006424:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006426:	693b      	ldr	r3, [r7, #16]
 8006428:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800642c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800642e:	683b      	ldr	r3, [r7, #0]
 8006430:	695b      	ldr	r3, [r3, #20]
 8006432:	693a      	ldr	r2, [r7, #16]
 8006434:	4313      	orrs	r3, r2
 8006436:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006438:	683b      	ldr	r3, [r7, #0]
 800643a:	699b      	ldr	r3, [r3, #24]
 800643c:	693a      	ldr	r2, [r7, #16]
 800643e:	4313      	orrs	r3, r2
 8006440:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	693a      	ldr	r2, [r7, #16]
 8006446:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	68fa      	ldr	r2, [r7, #12]
 800644c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800644e:	683b      	ldr	r3, [r7, #0]
 8006450:	685a      	ldr	r2, [r3, #4]
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	697a      	ldr	r2, [r7, #20]
 800645a:	621a      	str	r2, [r3, #32]
}
 800645c:	bf00      	nop
 800645e:	371c      	adds	r7, #28
 8006460:	46bd      	mov	sp, r7
 8006462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006466:	4770      	bx	lr
 8006468:	40012c00 	.word	0x40012c00
 800646c:	40013400 	.word	0x40013400
 8006470:	40014000 	.word	0x40014000
 8006474:	40014400 	.word	0x40014400
 8006478:	40014800 	.word	0x40014800

0800647c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800647c:	b480      	push	{r7}
 800647e:	b087      	sub	sp, #28
 8006480:	af00      	add	r7, sp, #0
 8006482:	6078      	str	r0, [r7, #4]
 8006484:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	6a1b      	ldr	r3, [r3, #32]
 800648a:	f023 0210 	bic.w	r2, r3, #16
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	6a1b      	ldr	r3, [r3, #32]
 8006496:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	685b      	ldr	r3, [r3, #4]
 800649c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	699b      	ldr	r3, [r3, #24]
 80064a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80064aa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80064ae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80064b0:	68fb      	ldr	r3, [r7, #12]
 80064b2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80064b6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80064b8:	683b      	ldr	r3, [r7, #0]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	021b      	lsls	r3, r3, #8
 80064be:	68fa      	ldr	r2, [r7, #12]
 80064c0:	4313      	orrs	r3, r2
 80064c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80064c4:	697b      	ldr	r3, [r7, #20]
 80064c6:	f023 0320 	bic.w	r3, r3, #32
 80064ca:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80064cc:	683b      	ldr	r3, [r7, #0]
 80064ce:	689b      	ldr	r3, [r3, #8]
 80064d0:	011b      	lsls	r3, r3, #4
 80064d2:	697a      	ldr	r2, [r7, #20]
 80064d4:	4313      	orrs	r3, r2
 80064d6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	4a28      	ldr	r2, [pc, #160]	; (800657c <TIM_OC2_SetConfig+0x100>)
 80064dc:	4293      	cmp	r3, r2
 80064de:	d003      	beq.n	80064e8 <TIM_OC2_SetConfig+0x6c>
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	4a27      	ldr	r2, [pc, #156]	; (8006580 <TIM_OC2_SetConfig+0x104>)
 80064e4:	4293      	cmp	r3, r2
 80064e6:	d10d      	bne.n	8006504 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80064e8:	697b      	ldr	r3, [r7, #20]
 80064ea:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80064ee:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80064f0:	683b      	ldr	r3, [r7, #0]
 80064f2:	68db      	ldr	r3, [r3, #12]
 80064f4:	011b      	lsls	r3, r3, #4
 80064f6:	697a      	ldr	r2, [r7, #20]
 80064f8:	4313      	orrs	r3, r2
 80064fa:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80064fc:	697b      	ldr	r3, [r7, #20]
 80064fe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006502:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	4a1d      	ldr	r2, [pc, #116]	; (800657c <TIM_OC2_SetConfig+0x100>)
 8006508:	4293      	cmp	r3, r2
 800650a:	d00f      	beq.n	800652c <TIM_OC2_SetConfig+0xb0>
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	4a1c      	ldr	r2, [pc, #112]	; (8006580 <TIM_OC2_SetConfig+0x104>)
 8006510:	4293      	cmp	r3, r2
 8006512:	d00b      	beq.n	800652c <TIM_OC2_SetConfig+0xb0>
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	4a1b      	ldr	r2, [pc, #108]	; (8006584 <TIM_OC2_SetConfig+0x108>)
 8006518:	4293      	cmp	r3, r2
 800651a:	d007      	beq.n	800652c <TIM_OC2_SetConfig+0xb0>
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	4a1a      	ldr	r2, [pc, #104]	; (8006588 <TIM_OC2_SetConfig+0x10c>)
 8006520:	4293      	cmp	r3, r2
 8006522:	d003      	beq.n	800652c <TIM_OC2_SetConfig+0xb0>
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	4a19      	ldr	r2, [pc, #100]	; (800658c <TIM_OC2_SetConfig+0x110>)
 8006528:	4293      	cmp	r3, r2
 800652a:	d113      	bne.n	8006554 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800652c:	693b      	ldr	r3, [r7, #16]
 800652e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006532:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006534:	693b      	ldr	r3, [r7, #16]
 8006536:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800653a:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800653c:	683b      	ldr	r3, [r7, #0]
 800653e:	695b      	ldr	r3, [r3, #20]
 8006540:	009b      	lsls	r3, r3, #2
 8006542:	693a      	ldr	r2, [r7, #16]
 8006544:	4313      	orrs	r3, r2
 8006546:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006548:	683b      	ldr	r3, [r7, #0]
 800654a:	699b      	ldr	r3, [r3, #24]
 800654c:	009b      	lsls	r3, r3, #2
 800654e:	693a      	ldr	r2, [r7, #16]
 8006550:	4313      	orrs	r3, r2
 8006552:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	693a      	ldr	r2, [r7, #16]
 8006558:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	68fa      	ldr	r2, [r7, #12]
 800655e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006560:	683b      	ldr	r3, [r7, #0]
 8006562:	685a      	ldr	r2, [r3, #4]
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	697a      	ldr	r2, [r7, #20]
 800656c:	621a      	str	r2, [r3, #32]
}
 800656e:	bf00      	nop
 8006570:	371c      	adds	r7, #28
 8006572:	46bd      	mov	sp, r7
 8006574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006578:	4770      	bx	lr
 800657a:	bf00      	nop
 800657c:	40012c00 	.word	0x40012c00
 8006580:	40013400 	.word	0x40013400
 8006584:	40014000 	.word	0x40014000
 8006588:	40014400 	.word	0x40014400
 800658c:	40014800 	.word	0x40014800

08006590 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006590:	b480      	push	{r7}
 8006592:	b087      	sub	sp, #28
 8006594:	af00      	add	r7, sp, #0
 8006596:	6078      	str	r0, [r7, #4]
 8006598:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	6a1b      	ldr	r3, [r3, #32]
 800659e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	6a1b      	ldr	r3, [r3, #32]
 80065aa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	685b      	ldr	r3, [r3, #4]
 80065b0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	69db      	ldr	r3, [r3, #28]
 80065b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80065be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80065c2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	f023 0303 	bic.w	r3, r3, #3
 80065ca:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80065cc:	683b      	ldr	r3, [r7, #0]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	68fa      	ldr	r2, [r7, #12]
 80065d2:	4313      	orrs	r3, r2
 80065d4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80065d6:	697b      	ldr	r3, [r7, #20]
 80065d8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80065dc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80065de:	683b      	ldr	r3, [r7, #0]
 80065e0:	689b      	ldr	r3, [r3, #8]
 80065e2:	021b      	lsls	r3, r3, #8
 80065e4:	697a      	ldr	r2, [r7, #20]
 80065e6:	4313      	orrs	r3, r2
 80065e8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	4a27      	ldr	r2, [pc, #156]	; (800668c <TIM_OC3_SetConfig+0xfc>)
 80065ee:	4293      	cmp	r3, r2
 80065f0:	d003      	beq.n	80065fa <TIM_OC3_SetConfig+0x6a>
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	4a26      	ldr	r2, [pc, #152]	; (8006690 <TIM_OC3_SetConfig+0x100>)
 80065f6:	4293      	cmp	r3, r2
 80065f8:	d10d      	bne.n	8006616 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80065fa:	697b      	ldr	r3, [r7, #20]
 80065fc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006600:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006602:	683b      	ldr	r3, [r7, #0]
 8006604:	68db      	ldr	r3, [r3, #12]
 8006606:	021b      	lsls	r3, r3, #8
 8006608:	697a      	ldr	r2, [r7, #20]
 800660a:	4313      	orrs	r3, r2
 800660c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800660e:	697b      	ldr	r3, [r7, #20]
 8006610:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006614:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	4a1c      	ldr	r2, [pc, #112]	; (800668c <TIM_OC3_SetConfig+0xfc>)
 800661a:	4293      	cmp	r3, r2
 800661c:	d00f      	beq.n	800663e <TIM_OC3_SetConfig+0xae>
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	4a1b      	ldr	r2, [pc, #108]	; (8006690 <TIM_OC3_SetConfig+0x100>)
 8006622:	4293      	cmp	r3, r2
 8006624:	d00b      	beq.n	800663e <TIM_OC3_SetConfig+0xae>
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	4a1a      	ldr	r2, [pc, #104]	; (8006694 <TIM_OC3_SetConfig+0x104>)
 800662a:	4293      	cmp	r3, r2
 800662c:	d007      	beq.n	800663e <TIM_OC3_SetConfig+0xae>
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	4a19      	ldr	r2, [pc, #100]	; (8006698 <TIM_OC3_SetConfig+0x108>)
 8006632:	4293      	cmp	r3, r2
 8006634:	d003      	beq.n	800663e <TIM_OC3_SetConfig+0xae>
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	4a18      	ldr	r2, [pc, #96]	; (800669c <TIM_OC3_SetConfig+0x10c>)
 800663a:	4293      	cmp	r3, r2
 800663c:	d113      	bne.n	8006666 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800663e:	693b      	ldr	r3, [r7, #16]
 8006640:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006644:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006646:	693b      	ldr	r3, [r7, #16]
 8006648:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800664c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800664e:	683b      	ldr	r3, [r7, #0]
 8006650:	695b      	ldr	r3, [r3, #20]
 8006652:	011b      	lsls	r3, r3, #4
 8006654:	693a      	ldr	r2, [r7, #16]
 8006656:	4313      	orrs	r3, r2
 8006658:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800665a:	683b      	ldr	r3, [r7, #0]
 800665c:	699b      	ldr	r3, [r3, #24]
 800665e:	011b      	lsls	r3, r3, #4
 8006660:	693a      	ldr	r2, [r7, #16]
 8006662:	4313      	orrs	r3, r2
 8006664:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	693a      	ldr	r2, [r7, #16]
 800666a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	68fa      	ldr	r2, [r7, #12]
 8006670:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006672:	683b      	ldr	r3, [r7, #0]
 8006674:	685a      	ldr	r2, [r3, #4]
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	697a      	ldr	r2, [r7, #20]
 800667e:	621a      	str	r2, [r3, #32]
}
 8006680:	bf00      	nop
 8006682:	371c      	adds	r7, #28
 8006684:	46bd      	mov	sp, r7
 8006686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800668a:	4770      	bx	lr
 800668c:	40012c00 	.word	0x40012c00
 8006690:	40013400 	.word	0x40013400
 8006694:	40014000 	.word	0x40014000
 8006698:	40014400 	.word	0x40014400
 800669c:	40014800 	.word	0x40014800

080066a0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80066a0:	b480      	push	{r7}
 80066a2:	b087      	sub	sp, #28
 80066a4:	af00      	add	r7, sp, #0
 80066a6:	6078      	str	r0, [r7, #4]
 80066a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	6a1b      	ldr	r3, [r3, #32]
 80066ae:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	6a1b      	ldr	r3, [r3, #32]
 80066ba:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	685b      	ldr	r3, [r3, #4]
 80066c0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	69db      	ldr	r3, [r3, #28]
 80066c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80066c8:	68fb      	ldr	r3, [r7, #12]
 80066ca:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80066ce:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80066d2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80066da:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80066dc:	683b      	ldr	r3, [r7, #0]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	021b      	lsls	r3, r3, #8
 80066e2:	68fa      	ldr	r2, [r7, #12]
 80066e4:	4313      	orrs	r3, r2
 80066e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80066e8:	693b      	ldr	r3, [r7, #16]
 80066ea:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80066ee:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80066f0:	683b      	ldr	r3, [r7, #0]
 80066f2:	689b      	ldr	r3, [r3, #8]
 80066f4:	031b      	lsls	r3, r3, #12
 80066f6:	693a      	ldr	r2, [r7, #16]
 80066f8:	4313      	orrs	r3, r2
 80066fa:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	4a18      	ldr	r2, [pc, #96]	; (8006760 <TIM_OC4_SetConfig+0xc0>)
 8006700:	4293      	cmp	r3, r2
 8006702:	d00f      	beq.n	8006724 <TIM_OC4_SetConfig+0x84>
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	4a17      	ldr	r2, [pc, #92]	; (8006764 <TIM_OC4_SetConfig+0xc4>)
 8006708:	4293      	cmp	r3, r2
 800670a:	d00b      	beq.n	8006724 <TIM_OC4_SetConfig+0x84>
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	4a16      	ldr	r2, [pc, #88]	; (8006768 <TIM_OC4_SetConfig+0xc8>)
 8006710:	4293      	cmp	r3, r2
 8006712:	d007      	beq.n	8006724 <TIM_OC4_SetConfig+0x84>
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	4a15      	ldr	r2, [pc, #84]	; (800676c <TIM_OC4_SetConfig+0xcc>)
 8006718:	4293      	cmp	r3, r2
 800671a:	d003      	beq.n	8006724 <TIM_OC4_SetConfig+0x84>
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	4a14      	ldr	r2, [pc, #80]	; (8006770 <TIM_OC4_SetConfig+0xd0>)
 8006720:	4293      	cmp	r3, r2
 8006722:	d109      	bne.n	8006738 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006724:	697b      	ldr	r3, [r7, #20]
 8006726:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800672a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800672c:	683b      	ldr	r3, [r7, #0]
 800672e:	695b      	ldr	r3, [r3, #20]
 8006730:	019b      	lsls	r3, r3, #6
 8006732:	697a      	ldr	r2, [r7, #20]
 8006734:	4313      	orrs	r3, r2
 8006736:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	697a      	ldr	r2, [r7, #20]
 800673c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	68fa      	ldr	r2, [r7, #12]
 8006742:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006744:	683b      	ldr	r3, [r7, #0]
 8006746:	685a      	ldr	r2, [r3, #4]
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	693a      	ldr	r2, [r7, #16]
 8006750:	621a      	str	r2, [r3, #32]
}
 8006752:	bf00      	nop
 8006754:	371c      	adds	r7, #28
 8006756:	46bd      	mov	sp, r7
 8006758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800675c:	4770      	bx	lr
 800675e:	bf00      	nop
 8006760:	40012c00 	.word	0x40012c00
 8006764:	40013400 	.word	0x40013400
 8006768:	40014000 	.word	0x40014000
 800676c:	40014400 	.word	0x40014400
 8006770:	40014800 	.word	0x40014800

08006774 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006774:	b480      	push	{r7}
 8006776:	b087      	sub	sp, #28
 8006778:	af00      	add	r7, sp, #0
 800677a:	6078      	str	r0, [r7, #4]
 800677c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	6a1b      	ldr	r3, [r3, #32]
 8006782:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	6a1b      	ldr	r3, [r3, #32]
 800678e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	685b      	ldr	r3, [r3, #4]
 8006794:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800679a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800679c:	68fb      	ldr	r3, [r7, #12]
 800679e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80067a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80067a6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80067a8:	683b      	ldr	r3, [r7, #0]
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	68fa      	ldr	r2, [r7, #12]
 80067ae:	4313      	orrs	r3, r2
 80067b0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80067b2:	693b      	ldr	r3, [r7, #16]
 80067b4:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80067b8:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80067ba:	683b      	ldr	r3, [r7, #0]
 80067bc:	689b      	ldr	r3, [r3, #8]
 80067be:	041b      	lsls	r3, r3, #16
 80067c0:	693a      	ldr	r2, [r7, #16]
 80067c2:	4313      	orrs	r3, r2
 80067c4:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	4a17      	ldr	r2, [pc, #92]	; (8006828 <TIM_OC5_SetConfig+0xb4>)
 80067ca:	4293      	cmp	r3, r2
 80067cc:	d00f      	beq.n	80067ee <TIM_OC5_SetConfig+0x7a>
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	4a16      	ldr	r2, [pc, #88]	; (800682c <TIM_OC5_SetConfig+0xb8>)
 80067d2:	4293      	cmp	r3, r2
 80067d4:	d00b      	beq.n	80067ee <TIM_OC5_SetConfig+0x7a>
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	4a15      	ldr	r2, [pc, #84]	; (8006830 <TIM_OC5_SetConfig+0xbc>)
 80067da:	4293      	cmp	r3, r2
 80067dc:	d007      	beq.n	80067ee <TIM_OC5_SetConfig+0x7a>
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	4a14      	ldr	r2, [pc, #80]	; (8006834 <TIM_OC5_SetConfig+0xc0>)
 80067e2:	4293      	cmp	r3, r2
 80067e4:	d003      	beq.n	80067ee <TIM_OC5_SetConfig+0x7a>
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	4a13      	ldr	r2, [pc, #76]	; (8006838 <TIM_OC5_SetConfig+0xc4>)
 80067ea:	4293      	cmp	r3, r2
 80067ec:	d109      	bne.n	8006802 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80067ee:	697b      	ldr	r3, [r7, #20]
 80067f0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80067f4:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80067f6:	683b      	ldr	r3, [r7, #0]
 80067f8:	695b      	ldr	r3, [r3, #20]
 80067fa:	021b      	lsls	r3, r3, #8
 80067fc:	697a      	ldr	r2, [r7, #20]
 80067fe:	4313      	orrs	r3, r2
 8006800:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	697a      	ldr	r2, [r7, #20]
 8006806:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	68fa      	ldr	r2, [r7, #12]
 800680c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800680e:	683b      	ldr	r3, [r7, #0]
 8006810:	685a      	ldr	r2, [r3, #4]
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	693a      	ldr	r2, [r7, #16]
 800681a:	621a      	str	r2, [r3, #32]
}
 800681c:	bf00      	nop
 800681e:	371c      	adds	r7, #28
 8006820:	46bd      	mov	sp, r7
 8006822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006826:	4770      	bx	lr
 8006828:	40012c00 	.word	0x40012c00
 800682c:	40013400 	.word	0x40013400
 8006830:	40014000 	.word	0x40014000
 8006834:	40014400 	.word	0x40014400
 8006838:	40014800 	.word	0x40014800

0800683c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800683c:	b480      	push	{r7}
 800683e:	b087      	sub	sp, #28
 8006840:	af00      	add	r7, sp, #0
 8006842:	6078      	str	r0, [r7, #4]
 8006844:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	6a1b      	ldr	r3, [r3, #32]
 800684a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	6a1b      	ldr	r3, [r3, #32]
 8006856:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	685b      	ldr	r3, [r3, #4]
 800685c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006862:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800686a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800686e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006870:	683b      	ldr	r3, [r7, #0]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	021b      	lsls	r3, r3, #8
 8006876:	68fa      	ldr	r2, [r7, #12]
 8006878:	4313      	orrs	r3, r2
 800687a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800687c:	693b      	ldr	r3, [r7, #16]
 800687e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006882:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8006884:	683b      	ldr	r3, [r7, #0]
 8006886:	689b      	ldr	r3, [r3, #8]
 8006888:	051b      	lsls	r3, r3, #20
 800688a:	693a      	ldr	r2, [r7, #16]
 800688c:	4313      	orrs	r3, r2
 800688e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	4a18      	ldr	r2, [pc, #96]	; (80068f4 <TIM_OC6_SetConfig+0xb8>)
 8006894:	4293      	cmp	r3, r2
 8006896:	d00f      	beq.n	80068b8 <TIM_OC6_SetConfig+0x7c>
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	4a17      	ldr	r2, [pc, #92]	; (80068f8 <TIM_OC6_SetConfig+0xbc>)
 800689c:	4293      	cmp	r3, r2
 800689e:	d00b      	beq.n	80068b8 <TIM_OC6_SetConfig+0x7c>
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	4a16      	ldr	r2, [pc, #88]	; (80068fc <TIM_OC6_SetConfig+0xc0>)
 80068a4:	4293      	cmp	r3, r2
 80068a6:	d007      	beq.n	80068b8 <TIM_OC6_SetConfig+0x7c>
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	4a15      	ldr	r2, [pc, #84]	; (8006900 <TIM_OC6_SetConfig+0xc4>)
 80068ac:	4293      	cmp	r3, r2
 80068ae:	d003      	beq.n	80068b8 <TIM_OC6_SetConfig+0x7c>
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	4a14      	ldr	r2, [pc, #80]	; (8006904 <TIM_OC6_SetConfig+0xc8>)
 80068b4:	4293      	cmp	r3, r2
 80068b6:	d109      	bne.n	80068cc <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80068b8:	697b      	ldr	r3, [r7, #20]
 80068ba:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80068be:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80068c0:	683b      	ldr	r3, [r7, #0]
 80068c2:	695b      	ldr	r3, [r3, #20]
 80068c4:	029b      	lsls	r3, r3, #10
 80068c6:	697a      	ldr	r2, [r7, #20]
 80068c8:	4313      	orrs	r3, r2
 80068ca:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	697a      	ldr	r2, [r7, #20]
 80068d0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	68fa      	ldr	r2, [r7, #12]
 80068d6:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80068d8:	683b      	ldr	r3, [r7, #0]
 80068da:	685a      	ldr	r2, [r3, #4]
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	693a      	ldr	r2, [r7, #16]
 80068e4:	621a      	str	r2, [r3, #32]
}
 80068e6:	bf00      	nop
 80068e8:	371c      	adds	r7, #28
 80068ea:	46bd      	mov	sp, r7
 80068ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068f0:	4770      	bx	lr
 80068f2:	bf00      	nop
 80068f4:	40012c00 	.word	0x40012c00
 80068f8:	40013400 	.word	0x40013400
 80068fc:	40014000 	.word	0x40014000
 8006900:	40014400 	.word	0x40014400
 8006904:	40014800 	.word	0x40014800

08006908 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8006908:	b580      	push	{r7, lr}
 800690a:	b086      	sub	sp, #24
 800690c:	af00      	add	r7, sp, #0
 800690e:	6078      	str	r0, [r7, #4]
 8006910:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006912:	2300      	movs	r3, #0
 8006914:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	689b      	ldr	r3, [r3, #8]
 800691c:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800691e:	693b      	ldr	r3, [r7, #16]
 8006920:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006924:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8006926:	683b      	ldr	r3, [r7, #0]
 8006928:	685b      	ldr	r3, [r3, #4]
 800692a:	693a      	ldr	r2, [r7, #16]
 800692c:	4313      	orrs	r3, r2
 800692e:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8006930:	693b      	ldr	r3, [r7, #16]
 8006932:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006936:	f023 0307 	bic.w	r3, r3, #7
 800693a:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 800693c:	683b      	ldr	r3, [r7, #0]
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	693a      	ldr	r2, [r7, #16]
 8006942:	4313      	orrs	r3, r2
 8006944:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	693a      	ldr	r2, [r7, #16]
 800694c:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 800694e:	683b      	ldr	r3, [r7, #0]
 8006950:	685b      	ldr	r3, [r3, #4]
 8006952:	2b70      	cmp	r3, #112	; 0x70
 8006954:	d01a      	beq.n	800698c <TIM_SlaveTimer_SetConfig+0x84>
 8006956:	2b70      	cmp	r3, #112	; 0x70
 8006958:	d860      	bhi.n	8006a1c <TIM_SlaveTimer_SetConfig+0x114>
 800695a:	2b60      	cmp	r3, #96	; 0x60
 800695c:	d054      	beq.n	8006a08 <TIM_SlaveTimer_SetConfig+0x100>
 800695e:	2b60      	cmp	r3, #96	; 0x60
 8006960:	d85c      	bhi.n	8006a1c <TIM_SlaveTimer_SetConfig+0x114>
 8006962:	2b50      	cmp	r3, #80	; 0x50
 8006964:	d046      	beq.n	80069f4 <TIM_SlaveTimer_SetConfig+0xec>
 8006966:	2b50      	cmp	r3, #80	; 0x50
 8006968:	d858      	bhi.n	8006a1c <TIM_SlaveTimer_SetConfig+0x114>
 800696a:	2b40      	cmp	r3, #64	; 0x40
 800696c:	d019      	beq.n	80069a2 <TIM_SlaveTimer_SetConfig+0x9a>
 800696e:	2b40      	cmp	r3, #64	; 0x40
 8006970:	d854      	bhi.n	8006a1c <TIM_SlaveTimer_SetConfig+0x114>
 8006972:	2b30      	cmp	r3, #48	; 0x30
 8006974:	d055      	beq.n	8006a22 <TIM_SlaveTimer_SetConfig+0x11a>
 8006976:	2b30      	cmp	r3, #48	; 0x30
 8006978:	d850      	bhi.n	8006a1c <TIM_SlaveTimer_SetConfig+0x114>
 800697a:	2b20      	cmp	r3, #32
 800697c:	d051      	beq.n	8006a22 <TIM_SlaveTimer_SetConfig+0x11a>
 800697e:	2b20      	cmp	r3, #32
 8006980:	d84c      	bhi.n	8006a1c <TIM_SlaveTimer_SetConfig+0x114>
 8006982:	2b00      	cmp	r3, #0
 8006984:	d04d      	beq.n	8006a22 <TIM_SlaveTimer_SetConfig+0x11a>
 8006986:	2b10      	cmp	r3, #16
 8006988:	d04b      	beq.n	8006a22 <TIM_SlaveTimer_SetConfig+0x11a>
 800698a:	e047      	b.n	8006a1c <TIM_SlaveTimer_SetConfig+0x114>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	6818      	ldr	r0, [r3, #0]
 8006990:	683b      	ldr	r3, [r7, #0]
 8006992:	68d9      	ldr	r1, [r3, #12]
 8006994:	683b      	ldr	r3, [r7, #0]
 8006996:	689a      	ldr	r2, [r3, #8]
 8006998:	683b      	ldr	r3, [r7, #0]
 800699a:	691b      	ldr	r3, [r3, #16]
 800699c:	f000 f8c1 	bl	8006b22 <TIM_ETR_SetConfig>
                        sSlaveConfig->TriggerPrescaler,
                        sSlaveConfig->TriggerPolarity,
                        sSlaveConfig->TriggerFilter);
      break;
 80069a0:	e040      	b.n	8006a24 <TIM_SlaveTimer_SetConfig+0x11c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 80069a2:	683b      	ldr	r3, [r7, #0]
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	2b05      	cmp	r3, #5
 80069a8:	d101      	bne.n	80069ae <TIM_SlaveTimer_SetConfig+0xa6>
      {
        return HAL_ERROR;
 80069aa:	2301      	movs	r3, #1
 80069ac:	e03b      	b.n	8006a26 <TIM_SlaveTimer_SetConfig+0x11e>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	6a1b      	ldr	r3, [r3, #32]
 80069b4:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	6a1a      	ldr	r2, [r3, #32]
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	f022 0201 	bic.w	r2, r2, #1
 80069c4:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	699b      	ldr	r3, [r3, #24]
 80069cc:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80069ce:	68bb      	ldr	r3, [r7, #8]
 80069d0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80069d4:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 80069d6:	683b      	ldr	r3, [r7, #0]
 80069d8:	691b      	ldr	r3, [r3, #16]
 80069da:	011b      	lsls	r3, r3, #4
 80069dc:	68ba      	ldr	r2, [r7, #8]
 80069de:	4313      	orrs	r3, r2
 80069e0:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	68ba      	ldr	r2, [r7, #8]
 80069e8:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	68fa      	ldr	r2, [r7, #12]
 80069f0:	621a      	str	r2, [r3, #32]
      break;
 80069f2:	e017      	b.n	8006a24 <TIM_SlaveTimer_SetConfig+0x11c>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	6818      	ldr	r0, [r3, #0]
 80069f8:	683b      	ldr	r3, [r7, #0]
 80069fa:	6899      	ldr	r1, [r3, #8]
 80069fc:	683b      	ldr	r3, [r7, #0]
 80069fe:	691b      	ldr	r3, [r3, #16]
 8006a00:	461a      	mov	r2, r3
 8006a02:	f000 f814 	bl	8006a2e <TIM_TI1_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 8006a06:	e00d      	b.n	8006a24 <TIM_SlaveTimer_SetConfig+0x11c>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	6818      	ldr	r0, [r3, #0]
 8006a0c:	683b      	ldr	r3, [r7, #0]
 8006a0e:	6899      	ldr	r1, [r3, #8]
 8006a10:	683b      	ldr	r3, [r7, #0]
 8006a12:	691b      	ldr	r3, [r3, #16]
 8006a14:	461a      	mov	r2, r3
 8006a16:	f000 f839 	bl	8006a8c <TIM_TI2_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 8006a1a:	e003      	b.n	8006a24 <TIM_SlaveTimer_SetConfig+0x11c>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 8006a1c:	2301      	movs	r3, #1
 8006a1e:	75fb      	strb	r3, [r7, #23]
      break;
 8006a20:	e000      	b.n	8006a24 <TIM_SlaveTimer_SetConfig+0x11c>
      break;
 8006a22:	bf00      	nop
  }

  return status;
 8006a24:	7dfb      	ldrb	r3, [r7, #23]
}
 8006a26:	4618      	mov	r0, r3
 8006a28:	3718      	adds	r7, #24
 8006a2a:	46bd      	mov	sp, r7
 8006a2c:	bd80      	pop	{r7, pc}

08006a2e <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006a2e:	b480      	push	{r7}
 8006a30:	b087      	sub	sp, #28
 8006a32:	af00      	add	r7, sp, #0
 8006a34:	60f8      	str	r0, [r7, #12]
 8006a36:	60b9      	str	r1, [r7, #8]
 8006a38:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006a3a:	68fb      	ldr	r3, [r7, #12]
 8006a3c:	6a1b      	ldr	r3, [r3, #32]
 8006a3e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006a40:	68fb      	ldr	r3, [r7, #12]
 8006a42:	6a1b      	ldr	r3, [r3, #32]
 8006a44:	f023 0201 	bic.w	r2, r3, #1
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006a4c:	68fb      	ldr	r3, [r7, #12]
 8006a4e:	699b      	ldr	r3, [r3, #24]
 8006a50:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006a52:	693b      	ldr	r3, [r7, #16]
 8006a54:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006a58:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	011b      	lsls	r3, r3, #4
 8006a5e:	693a      	ldr	r2, [r7, #16]
 8006a60:	4313      	orrs	r3, r2
 8006a62:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006a64:	697b      	ldr	r3, [r7, #20]
 8006a66:	f023 030a 	bic.w	r3, r3, #10
 8006a6a:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006a6c:	697a      	ldr	r2, [r7, #20]
 8006a6e:	68bb      	ldr	r3, [r7, #8]
 8006a70:	4313      	orrs	r3, r2
 8006a72:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006a74:	68fb      	ldr	r3, [r7, #12]
 8006a76:	693a      	ldr	r2, [r7, #16]
 8006a78:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006a7a:	68fb      	ldr	r3, [r7, #12]
 8006a7c:	697a      	ldr	r2, [r7, #20]
 8006a7e:	621a      	str	r2, [r3, #32]
}
 8006a80:	bf00      	nop
 8006a82:	371c      	adds	r7, #28
 8006a84:	46bd      	mov	sp, r7
 8006a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a8a:	4770      	bx	lr

08006a8c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006a8c:	b480      	push	{r7}
 8006a8e:	b087      	sub	sp, #28
 8006a90:	af00      	add	r7, sp, #0
 8006a92:	60f8      	str	r0, [r7, #12]
 8006a94:	60b9      	str	r1, [r7, #8]
 8006a96:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006a98:	68fb      	ldr	r3, [r7, #12]
 8006a9a:	6a1b      	ldr	r3, [r3, #32]
 8006a9c:	f023 0210 	bic.w	r2, r3, #16
 8006aa0:	68fb      	ldr	r3, [r7, #12]
 8006aa2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006aa4:	68fb      	ldr	r3, [r7, #12]
 8006aa6:	699b      	ldr	r3, [r3, #24]
 8006aa8:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006aaa:	68fb      	ldr	r3, [r7, #12]
 8006aac:	6a1b      	ldr	r3, [r3, #32]
 8006aae:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006ab0:	697b      	ldr	r3, [r7, #20]
 8006ab2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006ab6:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	031b      	lsls	r3, r3, #12
 8006abc:	697a      	ldr	r2, [r7, #20]
 8006abe:	4313      	orrs	r3, r2
 8006ac0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006ac2:	693b      	ldr	r3, [r7, #16]
 8006ac4:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006ac8:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006aca:	68bb      	ldr	r3, [r7, #8]
 8006acc:	011b      	lsls	r3, r3, #4
 8006ace:	693a      	ldr	r2, [r7, #16]
 8006ad0:	4313      	orrs	r3, r2
 8006ad2:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	697a      	ldr	r2, [r7, #20]
 8006ad8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006ada:	68fb      	ldr	r3, [r7, #12]
 8006adc:	693a      	ldr	r2, [r7, #16]
 8006ade:	621a      	str	r2, [r3, #32]
}
 8006ae0:	bf00      	nop
 8006ae2:	371c      	adds	r7, #28
 8006ae4:	46bd      	mov	sp, r7
 8006ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aea:	4770      	bx	lr

08006aec <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006aec:	b480      	push	{r7}
 8006aee:	b085      	sub	sp, #20
 8006af0:	af00      	add	r7, sp, #0
 8006af2:	6078      	str	r0, [r7, #4]
 8006af4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	689b      	ldr	r3, [r3, #8]
 8006afa:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006b02:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006b04:	683a      	ldr	r2, [r7, #0]
 8006b06:	68fb      	ldr	r3, [r7, #12]
 8006b08:	4313      	orrs	r3, r2
 8006b0a:	f043 0307 	orr.w	r3, r3, #7
 8006b0e:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	68fa      	ldr	r2, [r7, #12]
 8006b14:	609a      	str	r2, [r3, #8]
}
 8006b16:	bf00      	nop
 8006b18:	3714      	adds	r7, #20
 8006b1a:	46bd      	mov	sp, r7
 8006b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b20:	4770      	bx	lr

08006b22 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006b22:	b480      	push	{r7}
 8006b24:	b087      	sub	sp, #28
 8006b26:	af00      	add	r7, sp, #0
 8006b28:	60f8      	str	r0, [r7, #12]
 8006b2a:	60b9      	str	r1, [r7, #8]
 8006b2c:	607a      	str	r2, [r7, #4]
 8006b2e:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006b30:	68fb      	ldr	r3, [r7, #12]
 8006b32:	689b      	ldr	r3, [r3, #8]
 8006b34:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006b36:	697b      	ldr	r3, [r7, #20]
 8006b38:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006b3c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006b3e:	683b      	ldr	r3, [r7, #0]
 8006b40:	021a      	lsls	r2, r3, #8
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	431a      	orrs	r2, r3
 8006b46:	68bb      	ldr	r3, [r7, #8]
 8006b48:	4313      	orrs	r3, r2
 8006b4a:	697a      	ldr	r2, [r7, #20]
 8006b4c:	4313      	orrs	r3, r2
 8006b4e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006b50:	68fb      	ldr	r3, [r7, #12]
 8006b52:	697a      	ldr	r2, [r7, #20]
 8006b54:	609a      	str	r2, [r3, #8]
}
 8006b56:	bf00      	nop
 8006b58:	371c      	adds	r7, #28
 8006b5a:	46bd      	mov	sp, r7
 8006b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b60:	4770      	bx	lr

08006b62 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006b62:	b480      	push	{r7}
 8006b64:	b087      	sub	sp, #28
 8006b66:	af00      	add	r7, sp, #0
 8006b68:	60f8      	str	r0, [r7, #12]
 8006b6a:	60b9      	str	r1, [r7, #8]
 8006b6c:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006b6e:	68bb      	ldr	r3, [r7, #8]
 8006b70:	f003 031f 	and.w	r3, r3, #31
 8006b74:	2201      	movs	r2, #1
 8006b76:	fa02 f303 	lsl.w	r3, r2, r3
 8006b7a:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006b7c:	68fb      	ldr	r3, [r7, #12]
 8006b7e:	6a1a      	ldr	r2, [r3, #32]
 8006b80:	697b      	ldr	r3, [r7, #20]
 8006b82:	43db      	mvns	r3, r3
 8006b84:	401a      	ands	r2, r3
 8006b86:	68fb      	ldr	r3, [r7, #12]
 8006b88:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006b8a:	68fb      	ldr	r3, [r7, #12]
 8006b8c:	6a1a      	ldr	r2, [r3, #32]
 8006b8e:	68bb      	ldr	r3, [r7, #8]
 8006b90:	f003 031f 	and.w	r3, r3, #31
 8006b94:	6879      	ldr	r1, [r7, #4]
 8006b96:	fa01 f303 	lsl.w	r3, r1, r3
 8006b9a:	431a      	orrs	r2, r3
 8006b9c:	68fb      	ldr	r3, [r7, #12]
 8006b9e:	621a      	str	r2, [r3, #32]
}
 8006ba0:	bf00      	nop
 8006ba2:	371c      	adds	r7, #28
 8006ba4:	46bd      	mov	sp, r7
 8006ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006baa:	4770      	bx	lr

08006bac <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006bac:	b480      	push	{r7}
 8006bae:	b085      	sub	sp, #20
 8006bb0:	af00      	add	r7, sp, #0
 8006bb2:	6078      	str	r0, [r7, #4]
 8006bb4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006bbc:	2b01      	cmp	r3, #1
 8006bbe:	d101      	bne.n	8006bc4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006bc0:	2302      	movs	r3, #2
 8006bc2:	e063      	b.n	8006c8c <HAL_TIMEx_MasterConfigSynchronization+0xe0>
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	2201      	movs	r2, #1
 8006bc8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	2202      	movs	r2, #2
 8006bd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	685b      	ldr	r3, [r3, #4]
 8006bda:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	689b      	ldr	r3, [r3, #8]
 8006be2:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	4a2b      	ldr	r2, [pc, #172]	; (8006c98 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8006bea:	4293      	cmp	r3, r2
 8006bec:	d004      	beq.n	8006bf8 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	4a2a      	ldr	r2, [pc, #168]	; (8006c9c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006bf4:	4293      	cmp	r3, r2
 8006bf6:	d108      	bne.n	8006c0a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006bf8:	68fb      	ldr	r3, [r7, #12]
 8006bfa:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8006bfe:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006c00:	683b      	ldr	r3, [r7, #0]
 8006c02:	685b      	ldr	r3, [r3, #4]
 8006c04:	68fa      	ldr	r2, [r7, #12]
 8006c06:	4313      	orrs	r3, r2
 8006c08:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006c0a:	68fb      	ldr	r3, [r7, #12]
 8006c0c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006c10:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006c12:	683b      	ldr	r3, [r7, #0]
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	68fa      	ldr	r2, [r7, #12]
 8006c18:	4313      	orrs	r3, r2
 8006c1a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	68fa      	ldr	r2, [r7, #12]
 8006c22:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	4a1b      	ldr	r2, [pc, #108]	; (8006c98 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8006c2a:	4293      	cmp	r3, r2
 8006c2c:	d018      	beq.n	8006c60 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006c36:	d013      	beq.n	8006c60 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	4a18      	ldr	r2, [pc, #96]	; (8006ca0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8006c3e:	4293      	cmp	r3, r2
 8006c40:	d00e      	beq.n	8006c60 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	4a17      	ldr	r2, [pc, #92]	; (8006ca4 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8006c48:	4293      	cmp	r3, r2
 8006c4a:	d009      	beq.n	8006c60 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	4a12      	ldr	r2, [pc, #72]	; (8006c9c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006c52:	4293      	cmp	r3, r2
 8006c54:	d004      	beq.n	8006c60 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	4a13      	ldr	r2, [pc, #76]	; (8006ca8 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8006c5c:	4293      	cmp	r3, r2
 8006c5e:	d10c      	bne.n	8006c7a <HAL_TIMEx_MasterConfigSynchronization+0xce>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006c60:	68bb      	ldr	r3, [r7, #8]
 8006c62:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006c66:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006c68:	683b      	ldr	r3, [r7, #0]
 8006c6a:	689b      	ldr	r3, [r3, #8]
 8006c6c:	68ba      	ldr	r2, [r7, #8]
 8006c6e:	4313      	orrs	r3, r2
 8006c70:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	68ba      	ldr	r2, [r7, #8]
 8006c78:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	2201      	movs	r2, #1
 8006c7e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	2200      	movs	r2, #0
 8006c86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006c8a:	2300      	movs	r3, #0
}
 8006c8c:	4618      	mov	r0, r3
 8006c8e:	3714      	adds	r7, #20
 8006c90:	46bd      	mov	sp, r7
 8006c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c96:	4770      	bx	lr
 8006c98:	40012c00 	.word	0x40012c00
 8006c9c:	40013400 	.word	0x40013400
 8006ca0:	40000400 	.word	0x40000400
 8006ca4:	40000800 	.word	0x40000800
 8006ca8:	40014000 	.word	0x40014000

08006cac <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8006cac:	b480      	push	{r7}
 8006cae:	b085      	sub	sp, #20
 8006cb0:	af00      	add	r7, sp, #0
 8006cb2:	6078      	str	r0, [r7, #4]
 8006cb4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8006cb6:	2300      	movs	r3, #0
 8006cb8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
#endif /* TIM_BDTR_BKF */
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006cc0:	2b01      	cmp	r3, #1
 8006cc2:	d101      	bne.n	8006cc8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8006cc4:	2302      	movs	r3, #2
 8006cc6:	e065      	b.n	8006d94 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	2201      	movs	r2, #1
 8006ccc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8006cd0:	68fb      	ldr	r3, [r7, #12]
 8006cd2:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8006cd6:	683b      	ldr	r3, [r7, #0]
 8006cd8:	68db      	ldr	r3, [r3, #12]
 8006cda:	4313      	orrs	r3, r2
 8006cdc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8006cde:	68fb      	ldr	r3, [r7, #12]
 8006ce0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006ce4:	683b      	ldr	r3, [r7, #0]
 8006ce6:	689b      	ldr	r3, [r3, #8]
 8006ce8:	4313      	orrs	r3, r2
 8006cea:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006cec:	68fb      	ldr	r3, [r7, #12]
 8006cee:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8006cf2:	683b      	ldr	r3, [r7, #0]
 8006cf4:	685b      	ldr	r3, [r3, #4]
 8006cf6:	4313      	orrs	r3, r2
 8006cf8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8006cfa:	68fb      	ldr	r3, [r7, #12]
 8006cfc:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8006d00:	683b      	ldr	r3, [r7, #0]
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	4313      	orrs	r3, r2
 8006d06:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006d08:	68fb      	ldr	r3, [r7, #12]
 8006d0a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006d0e:	683b      	ldr	r3, [r7, #0]
 8006d10:	691b      	ldr	r3, [r3, #16]
 8006d12:	4313      	orrs	r3, r2
 8006d14:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8006d16:	68fb      	ldr	r3, [r7, #12]
 8006d18:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8006d1c:	683b      	ldr	r3, [r7, #0]
 8006d1e:	695b      	ldr	r3, [r3, #20]
 8006d20:	4313      	orrs	r3, r2
 8006d22:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006d24:	68fb      	ldr	r3, [r7, #12]
 8006d26:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8006d2a:	683b      	ldr	r3, [r7, #0]
 8006d2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d2e:	4313      	orrs	r3, r2
 8006d30:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKF)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8006d32:	68fb      	ldr	r3, [r7, #12]
 8006d34:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8006d38:	683b      	ldr	r3, [r7, #0]
 8006d3a:	699b      	ldr	r3, [r3, #24]
 8006d3c:	041b      	lsls	r3, r3, #16
 8006d3e:	4313      	orrs	r3, r2
 8006d40:	60fb      	str	r3, [r7, #12]
#endif /* TIM_BDTR_BKF */

#if defined(TIM_BDTR_BK2E)
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	4a16      	ldr	r2, [pc, #88]	; (8006da0 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 8006d48:	4293      	cmp	r3, r2
 8006d4a:	d004      	beq.n	8006d56 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	4a14      	ldr	r2, [pc, #80]	; (8006da4 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 8006d52:	4293      	cmp	r3, r2
 8006d54:	d115      	bne.n	8006d82 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8006d56:	68fb      	ldr	r3, [r7, #12]
 8006d58:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8006d5c:	683b      	ldr	r3, [r7, #0]
 8006d5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d60:	051b      	lsls	r3, r3, #20
 8006d62:	4313      	orrs	r3, r2
 8006d64:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8006d66:	68fb      	ldr	r3, [r7, #12]
 8006d68:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8006d6c:	683b      	ldr	r3, [r7, #0]
 8006d6e:	69db      	ldr	r3, [r3, #28]
 8006d70:	4313      	orrs	r3, r2
 8006d72:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8006d74:	68fb      	ldr	r3, [r7, #12]
 8006d76:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8006d7a:	683b      	ldr	r3, [r7, #0]
 8006d7c:	6a1b      	ldr	r3, [r3, #32]
 8006d7e:	4313      	orrs	r3, r2
 8006d80:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_BDTR_BK2E */

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	68fa      	ldr	r2, [r7, #12]
 8006d88:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	2200      	movs	r2, #0
 8006d8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006d92:	2300      	movs	r3, #0
}
 8006d94:	4618      	mov	r0, r3
 8006d96:	3714      	adds	r7, #20
 8006d98:	46bd      	mov	sp, r7
 8006d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d9e:	4770      	bx	lr
 8006da0:	40012c00 	.word	0x40012c00
 8006da4:	40013400 	.word	0x40013400

08006da8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006da8:	b480      	push	{r7}
 8006daa:	b083      	sub	sp, #12
 8006dac:	af00      	add	r7, sp, #0
 8006dae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006db0:	bf00      	nop
 8006db2:	370c      	adds	r7, #12
 8006db4:	46bd      	mov	sp, r7
 8006db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dba:	4770      	bx	lr

08006dbc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006dbc:	b480      	push	{r7}
 8006dbe:	b083      	sub	sp, #12
 8006dc0:	af00      	add	r7, sp, #0
 8006dc2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006dc4:	bf00      	nop
 8006dc6:	370c      	adds	r7, #12
 8006dc8:	46bd      	mov	sp, r7
 8006dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dce:	4770      	bx	lr

08006dd0 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006dd0:	b480      	push	{r7}
 8006dd2:	b083      	sub	sp, #12
 8006dd4:	af00      	add	r7, sp, #0
 8006dd6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006dd8:	bf00      	nop
 8006dda:	370c      	adds	r7, #12
 8006ddc:	46bd      	mov	sp, r7
 8006dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006de2:	4770      	bx	lr

08006de4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006de4:	b580      	push	{r7, lr}
 8006de6:	b082      	sub	sp, #8
 8006de8:	af00      	add	r7, sp, #0
 8006dea:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	2b00      	cmp	r3, #0
 8006df0:	d101      	bne.n	8006df6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006df2:	2301      	movs	r3, #1
 8006df4:	e040      	b.n	8006e78 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006dfa:	2b00      	cmp	r3, #0
 8006dfc:	d106      	bne.n	8006e0c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	2200      	movs	r2, #0
 8006e02:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006e06:	6878      	ldr	r0, [r7, #4]
 8006e08:	f7fa fdaa 	bl	8001960 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	2224      	movs	r2, #36	; 0x24
 8006e10:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	681a      	ldr	r2, [r3, #0]
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	f022 0201 	bic.w	r2, r2, #1
 8006e20:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006e22:	6878      	ldr	r0, [r7, #4]
 8006e24:	f000 f8b6 	bl	8006f94 <UART_SetConfig>
 8006e28:	4603      	mov	r3, r0
 8006e2a:	2b01      	cmp	r3, #1
 8006e2c:	d101      	bne.n	8006e32 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8006e2e:	2301      	movs	r3, #1
 8006e30:	e022      	b.n	8006e78 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e36:	2b00      	cmp	r3, #0
 8006e38:	d002      	beq.n	8006e40 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8006e3a:	6878      	ldr	r0, [r7, #4]
 8006e3c:	f000 fa7c 	bl	8007338 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	685a      	ldr	r2, [r3, #4]
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006e4e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	689a      	ldr	r2, [r3, #8]
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006e5e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	681a      	ldr	r2, [r3, #0]
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	f042 0201 	orr.w	r2, r2, #1
 8006e6e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006e70:	6878      	ldr	r0, [r7, #4]
 8006e72:	f000 fb03 	bl	800747c <UART_CheckIdleState>
 8006e76:	4603      	mov	r3, r0
}
 8006e78:	4618      	mov	r0, r3
 8006e7a:	3708      	adds	r7, #8
 8006e7c:	46bd      	mov	sp, r7
 8006e7e:	bd80      	pop	{r7, pc}

08006e80 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006e80:	b580      	push	{r7, lr}
 8006e82:	b08a      	sub	sp, #40	; 0x28
 8006e84:	af02      	add	r7, sp, #8
 8006e86:	60f8      	str	r0, [r7, #12]
 8006e88:	60b9      	str	r1, [r7, #8]
 8006e8a:	603b      	str	r3, [r7, #0]
 8006e8c:	4613      	mov	r3, r2
 8006e8e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006e90:	68fb      	ldr	r3, [r7, #12]
 8006e92:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006e94:	2b20      	cmp	r3, #32
 8006e96:	d178      	bne.n	8006f8a <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 8006e98:	68bb      	ldr	r3, [r7, #8]
 8006e9a:	2b00      	cmp	r3, #0
 8006e9c:	d002      	beq.n	8006ea4 <HAL_UART_Transmit+0x24>
 8006e9e:	88fb      	ldrh	r3, [r7, #6]
 8006ea0:	2b00      	cmp	r3, #0
 8006ea2:	d101      	bne.n	8006ea8 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8006ea4:	2301      	movs	r3, #1
 8006ea6:	e071      	b.n	8006f8c <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006ea8:	68fb      	ldr	r3, [r7, #12]
 8006eaa:	2200      	movs	r2, #0
 8006eac:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006eb0:	68fb      	ldr	r3, [r7, #12]
 8006eb2:	2221      	movs	r2, #33	; 0x21
 8006eb4:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006eb6:	f7fb f893 	bl	8001fe0 <HAL_GetTick>
 8006eba:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8006ebc:	68fb      	ldr	r3, [r7, #12]
 8006ebe:	88fa      	ldrh	r2, [r7, #6]
 8006ec0:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8006ec4:	68fb      	ldr	r3, [r7, #12]
 8006ec6:	88fa      	ldrh	r2, [r7, #6]
 8006ec8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006ecc:	68fb      	ldr	r3, [r7, #12]
 8006ece:	689b      	ldr	r3, [r3, #8]
 8006ed0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006ed4:	d108      	bne.n	8006ee8 <HAL_UART_Transmit+0x68>
 8006ed6:	68fb      	ldr	r3, [r7, #12]
 8006ed8:	691b      	ldr	r3, [r3, #16]
 8006eda:	2b00      	cmp	r3, #0
 8006edc:	d104      	bne.n	8006ee8 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8006ede:	2300      	movs	r3, #0
 8006ee0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006ee2:	68bb      	ldr	r3, [r7, #8]
 8006ee4:	61bb      	str	r3, [r7, #24]
 8006ee6:	e003      	b.n	8006ef0 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8006ee8:	68bb      	ldr	r3, [r7, #8]
 8006eea:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006eec:	2300      	movs	r3, #0
 8006eee:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006ef0:	e030      	b.n	8006f54 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006ef2:	683b      	ldr	r3, [r7, #0]
 8006ef4:	9300      	str	r3, [sp, #0]
 8006ef6:	697b      	ldr	r3, [r7, #20]
 8006ef8:	2200      	movs	r2, #0
 8006efa:	2180      	movs	r1, #128	; 0x80
 8006efc:	68f8      	ldr	r0, [r7, #12]
 8006efe:	f000 fb65 	bl	80075cc <UART_WaitOnFlagUntilTimeout>
 8006f02:	4603      	mov	r3, r0
 8006f04:	2b00      	cmp	r3, #0
 8006f06:	d004      	beq.n	8006f12 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8006f08:	68fb      	ldr	r3, [r7, #12]
 8006f0a:	2220      	movs	r2, #32
 8006f0c:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8006f0e:	2303      	movs	r3, #3
 8006f10:	e03c      	b.n	8006f8c <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 8006f12:	69fb      	ldr	r3, [r7, #28]
 8006f14:	2b00      	cmp	r3, #0
 8006f16:	d10b      	bne.n	8006f30 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006f18:	69bb      	ldr	r3, [r7, #24]
 8006f1a:	881a      	ldrh	r2, [r3, #0]
 8006f1c:	68fb      	ldr	r3, [r7, #12]
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006f24:	b292      	uxth	r2, r2
 8006f26:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8006f28:	69bb      	ldr	r3, [r7, #24]
 8006f2a:	3302      	adds	r3, #2
 8006f2c:	61bb      	str	r3, [r7, #24]
 8006f2e:	e008      	b.n	8006f42 <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006f30:	69fb      	ldr	r3, [r7, #28]
 8006f32:	781a      	ldrb	r2, [r3, #0]
 8006f34:	68fb      	ldr	r3, [r7, #12]
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	b292      	uxth	r2, r2
 8006f3a:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8006f3c:	69fb      	ldr	r3, [r7, #28]
 8006f3e:	3301      	adds	r3, #1
 8006f40:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006f42:	68fb      	ldr	r3, [r7, #12]
 8006f44:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006f48:	b29b      	uxth	r3, r3
 8006f4a:	3b01      	subs	r3, #1
 8006f4c:	b29a      	uxth	r2, r3
 8006f4e:	68fb      	ldr	r3, [r7, #12]
 8006f50:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8006f54:	68fb      	ldr	r3, [r7, #12]
 8006f56:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006f5a:	b29b      	uxth	r3, r3
 8006f5c:	2b00      	cmp	r3, #0
 8006f5e:	d1c8      	bne.n	8006ef2 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006f60:	683b      	ldr	r3, [r7, #0]
 8006f62:	9300      	str	r3, [sp, #0]
 8006f64:	697b      	ldr	r3, [r7, #20]
 8006f66:	2200      	movs	r2, #0
 8006f68:	2140      	movs	r1, #64	; 0x40
 8006f6a:	68f8      	ldr	r0, [r7, #12]
 8006f6c:	f000 fb2e 	bl	80075cc <UART_WaitOnFlagUntilTimeout>
 8006f70:	4603      	mov	r3, r0
 8006f72:	2b00      	cmp	r3, #0
 8006f74:	d004      	beq.n	8006f80 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8006f76:	68fb      	ldr	r3, [r7, #12]
 8006f78:	2220      	movs	r2, #32
 8006f7a:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 8006f7c:	2303      	movs	r3, #3
 8006f7e:	e005      	b.n	8006f8c <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006f80:	68fb      	ldr	r3, [r7, #12]
 8006f82:	2220      	movs	r2, #32
 8006f84:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8006f86:	2300      	movs	r3, #0
 8006f88:	e000      	b.n	8006f8c <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 8006f8a:	2302      	movs	r3, #2
  }
}
 8006f8c:	4618      	mov	r0, r3
 8006f8e:	3720      	adds	r7, #32
 8006f90:	46bd      	mov	sp, r7
 8006f92:	bd80      	pop	{r7, pc}

08006f94 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006f94:	b580      	push	{r7, lr}
 8006f96:	b088      	sub	sp, #32
 8006f98:	af00      	add	r7, sp, #0
 8006f9a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006f9c:	2300      	movs	r3, #0
 8006f9e:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	689a      	ldr	r2, [r3, #8]
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	691b      	ldr	r3, [r3, #16]
 8006fa8:	431a      	orrs	r2, r3
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	695b      	ldr	r3, [r3, #20]
 8006fae:	431a      	orrs	r2, r3
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	69db      	ldr	r3, [r3, #28]
 8006fb4:	4313      	orrs	r3, r2
 8006fb6:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8006fc2:	f023 030c 	bic.w	r3, r3, #12
 8006fc6:	687a      	ldr	r2, [r7, #4]
 8006fc8:	6812      	ldr	r2, [r2, #0]
 8006fca:	6979      	ldr	r1, [r7, #20]
 8006fcc:	430b      	orrs	r3, r1
 8006fce:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	685b      	ldr	r3, [r3, #4]
 8006fd6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	68da      	ldr	r2, [r3, #12]
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	430a      	orrs	r2, r1
 8006fe4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	699b      	ldr	r3, [r3, #24]
 8006fea:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	6a1b      	ldr	r3, [r3, #32]
 8006ff0:	697a      	ldr	r2, [r7, #20]
 8006ff2:	4313      	orrs	r3, r2
 8006ff4:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	689b      	ldr	r3, [r3, #8]
 8006ffc:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	697a      	ldr	r2, [r7, #20]
 8007006:	430a      	orrs	r2, r1
 8007008:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	4aad      	ldr	r2, [pc, #692]	; (80072c4 <UART_SetConfig+0x330>)
 8007010:	4293      	cmp	r3, r2
 8007012:	d120      	bne.n	8007056 <UART_SetConfig+0xc2>
 8007014:	4bac      	ldr	r3, [pc, #688]	; (80072c8 <UART_SetConfig+0x334>)
 8007016:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007018:	f003 0303 	and.w	r3, r3, #3
 800701c:	2b03      	cmp	r3, #3
 800701e:	d817      	bhi.n	8007050 <UART_SetConfig+0xbc>
 8007020:	a201      	add	r2, pc, #4	; (adr r2, 8007028 <UART_SetConfig+0x94>)
 8007022:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007026:	bf00      	nop
 8007028:	08007039 	.word	0x08007039
 800702c:	08007045 	.word	0x08007045
 8007030:	0800704b 	.word	0x0800704b
 8007034:	0800703f 	.word	0x0800703f
 8007038:	2301      	movs	r3, #1
 800703a:	77fb      	strb	r3, [r7, #31]
 800703c:	e0b5      	b.n	80071aa <UART_SetConfig+0x216>
 800703e:	2302      	movs	r3, #2
 8007040:	77fb      	strb	r3, [r7, #31]
 8007042:	e0b2      	b.n	80071aa <UART_SetConfig+0x216>
 8007044:	2304      	movs	r3, #4
 8007046:	77fb      	strb	r3, [r7, #31]
 8007048:	e0af      	b.n	80071aa <UART_SetConfig+0x216>
 800704a:	2308      	movs	r3, #8
 800704c:	77fb      	strb	r3, [r7, #31]
 800704e:	e0ac      	b.n	80071aa <UART_SetConfig+0x216>
 8007050:	2310      	movs	r3, #16
 8007052:	77fb      	strb	r3, [r7, #31]
 8007054:	e0a9      	b.n	80071aa <UART_SetConfig+0x216>
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	4a9c      	ldr	r2, [pc, #624]	; (80072cc <UART_SetConfig+0x338>)
 800705c:	4293      	cmp	r3, r2
 800705e:	d124      	bne.n	80070aa <UART_SetConfig+0x116>
 8007060:	4b99      	ldr	r3, [pc, #612]	; (80072c8 <UART_SetConfig+0x334>)
 8007062:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007064:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8007068:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800706c:	d011      	beq.n	8007092 <UART_SetConfig+0xfe>
 800706e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8007072:	d817      	bhi.n	80070a4 <UART_SetConfig+0x110>
 8007074:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007078:	d011      	beq.n	800709e <UART_SetConfig+0x10a>
 800707a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800707e:	d811      	bhi.n	80070a4 <UART_SetConfig+0x110>
 8007080:	2b00      	cmp	r3, #0
 8007082:	d003      	beq.n	800708c <UART_SetConfig+0xf8>
 8007084:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007088:	d006      	beq.n	8007098 <UART_SetConfig+0x104>
 800708a:	e00b      	b.n	80070a4 <UART_SetConfig+0x110>
 800708c:	2300      	movs	r3, #0
 800708e:	77fb      	strb	r3, [r7, #31]
 8007090:	e08b      	b.n	80071aa <UART_SetConfig+0x216>
 8007092:	2302      	movs	r3, #2
 8007094:	77fb      	strb	r3, [r7, #31]
 8007096:	e088      	b.n	80071aa <UART_SetConfig+0x216>
 8007098:	2304      	movs	r3, #4
 800709a:	77fb      	strb	r3, [r7, #31]
 800709c:	e085      	b.n	80071aa <UART_SetConfig+0x216>
 800709e:	2308      	movs	r3, #8
 80070a0:	77fb      	strb	r3, [r7, #31]
 80070a2:	e082      	b.n	80071aa <UART_SetConfig+0x216>
 80070a4:	2310      	movs	r3, #16
 80070a6:	77fb      	strb	r3, [r7, #31]
 80070a8:	e07f      	b.n	80071aa <UART_SetConfig+0x216>
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	4a88      	ldr	r2, [pc, #544]	; (80072d0 <UART_SetConfig+0x33c>)
 80070b0:	4293      	cmp	r3, r2
 80070b2:	d124      	bne.n	80070fe <UART_SetConfig+0x16a>
 80070b4:	4b84      	ldr	r3, [pc, #528]	; (80072c8 <UART_SetConfig+0x334>)
 80070b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80070b8:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 80070bc:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80070c0:	d011      	beq.n	80070e6 <UART_SetConfig+0x152>
 80070c2:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80070c6:	d817      	bhi.n	80070f8 <UART_SetConfig+0x164>
 80070c8:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80070cc:	d011      	beq.n	80070f2 <UART_SetConfig+0x15e>
 80070ce:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80070d2:	d811      	bhi.n	80070f8 <UART_SetConfig+0x164>
 80070d4:	2b00      	cmp	r3, #0
 80070d6:	d003      	beq.n	80070e0 <UART_SetConfig+0x14c>
 80070d8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80070dc:	d006      	beq.n	80070ec <UART_SetConfig+0x158>
 80070de:	e00b      	b.n	80070f8 <UART_SetConfig+0x164>
 80070e0:	2300      	movs	r3, #0
 80070e2:	77fb      	strb	r3, [r7, #31]
 80070e4:	e061      	b.n	80071aa <UART_SetConfig+0x216>
 80070e6:	2302      	movs	r3, #2
 80070e8:	77fb      	strb	r3, [r7, #31]
 80070ea:	e05e      	b.n	80071aa <UART_SetConfig+0x216>
 80070ec:	2304      	movs	r3, #4
 80070ee:	77fb      	strb	r3, [r7, #31]
 80070f0:	e05b      	b.n	80071aa <UART_SetConfig+0x216>
 80070f2:	2308      	movs	r3, #8
 80070f4:	77fb      	strb	r3, [r7, #31]
 80070f6:	e058      	b.n	80071aa <UART_SetConfig+0x216>
 80070f8:	2310      	movs	r3, #16
 80070fa:	77fb      	strb	r3, [r7, #31]
 80070fc:	e055      	b.n	80071aa <UART_SetConfig+0x216>
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	4a74      	ldr	r2, [pc, #464]	; (80072d4 <UART_SetConfig+0x340>)
 8007104:	4293      	cmp	r3, r2
 8007106:	d124      	bne.n	8007152 <UART_SetConfig+0x1be>
 8007108:	4b6f      	ldr	r3, [pc, #444]	; (80072c8 <UART_SetConfig+0x334>)
 800710a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800710c:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8007110:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8007114:	d011      	beq.n	800713a <UART_SetConfig+0x1a6>
 8007116:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800711a:	d817      	bhi.n	800714c <UART_SetConfig+0x1b8>
 800711c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007120:	d011      	beq.n	8007146 <UART_SetConfig+0x1b2>
 8007122:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007126:	d811      	bhi.n	800714c <UART_SetConfig+0x1b8>
 8007128:	2b00      	cmp	r3, #0
 800712a:	d003      	beq.n	8007134 <UART_SetConfig+0x1a0>
 800712c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007130:	d006      	beq.n	8007140 <UART_SetConfig+0x1ac>
 8007132:	e00b      	b.n	800714c <UART_SetConfig+0x1b8>
 8007134:	2300      	movs	r3, #0
 8007136:	77fb      	strb	r3, [r7, #31]
 8007138:	e037      	b.n	80071aa <UART_SetConfig+0x216>
 800713a:	2302      	movs	r3, #2
 800713c:	77fb      	strb	r3, [r7, #31]
 800713e:	e034      	b.n	80071aa <UART_SetConfig+0x216>
 8007140:	2304      	movs	r3, #4
 8007142:	77fb      	strb	r3, [r7, #31]
 8007144:	e031      	b.n	80071aa <UART_SetConfig+0x216>
 8007146:	2308      	movs	r3, #8
 8007148:	77fb      	strb	r3, [r7, #31]
 800714a:	e02e      	b.n	80071aa <UART_SetConfig+0x216>
 800714c:	2310      	movs	r3, #16
 800714e:	77fb      	strb	r3, [r7, #31]
 8007150:	e02b      	b.n	80071aa <UART_SetConfig+0x216>
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	4a60      	ldr	r2, [pc, #384]	; (80072d8 <UART_SetConfig+0x344>)
 8007158:	4293      	cmp	r3, r2
 800715a:	d124      	bne.n	80071a6 <UART_SetConfig+0x212>
 800715c:	4b5a      	ldr	r3, [pc, #360]	; (80072c8 <UART_SetConfig+0x334>)
 800715e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007160:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8007164:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8007168:	d011      	beq.n	800718e <UART_SetConfig+0x1fa>
 800716a:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800716e:	d817      	bhi.n	80071a0 <UART_SetConfig+0x20c>
 8007170:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007174:	d011      	beq.n	800719a <UART_SetConfig+0x206>
 8007176:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800717a:	d811      	bhi.n	80071a0 <UART_SetConfig+0x20c>
 800717c:	2b00      	cmp	r3, #0
 800717e:	d003      	beq.n	8007188 <UART_SetConfig+0x1f4>
 8007180:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007184:	d006      	beq.n	8007194 <UART_SetConfig+0x200>
 8007186:	e00b      	b.n	80071a0 <UART_SetConfig+0x20c>
 8007188:	2300      	movs	r3, #0
 800718a:	77fb      	strb	r3, [r7, #31]
 800718c:	e00d      	b.n	80071aa <UART_SetConfig+0x216>
 800718e:	2302      	movs	r3, #2
 8007190:	77fb      	strb	r3, [r7, #31]
 8007192:	e00a      	b.n	80071aa <UART_SetConfig+0x216>
 8007194:	2304      	movs	r3, #4
 8007196:	77fb      	strb	r3, [r7, #31]
 8007198:	e007      	b.n	80071aa <UART_SetConfig+0x216>
 800719a:	2308      	movs	r3, #8
 800719c:	77fb      	strb	r3, [r7, #31]
 800719e:	e004      	b.n	80071aa <UART_SetConfig+0x216>
 80071a0:	2310      	movs	r3, #16
 80071a2:	77fb      	strb	r3, [r7, #31]
 80071a4:	e001      	b.n	80071aa <UART_SetConfig+0x216>
 80071a6:	2310      	movs	r3, #16
 80071a8:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	69db      	ldr	r3, [r3, #28]
 80071ae:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80071b2:	d15b      	bne.n	800726c <UART_SetConfig+0x2d8>
  {
    switch (clocksource)
 80071b4:	7ffb      	ldrb	r3, [r7, #31]
 80071b6:	2b08      	cmp	r3, #8
 80071b8:	d827      	bhi.n	800720a <UART_SetConfig+0x276>
 80071ba:	a201      	add	r2, pc, #4	; (adr r2, 80071c0 <UART_SetConfig+0x22c>)
 80071bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80071c0:	080071e5 	.word	0x080071e5
 80071c4:	080071ed 	.word	0x080071ed
 80071c8:	080071f5 	.word	0x080071f5
 80071cc:	0800720b 	.word	0x0800720b
 80071d0:	080071fb 	.word	0x080071fb
 80071d4:	0800720b 	.word	0x0800720b
 80071d8:	0800720b 	.word	0x0800720b
 80071dc:	0800720b 	.word	0x0800720b
 80071e0:	08007203 	.word	0x08007203
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80071e4:	f7fd ffaa 	bl	800513c <HAL_RCC_GetPCLK1Freq>
 80071e8:	61b8      	str	r0, [r7, #24]
        break;
 80071ea:	e013      	b.n	8007214 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80071ec:	f7fd ffc8 	bl	8005180 <HAL_RCC_GetPCLK2Freq>
 80071f0:	61b8      	str	r0, [r7, #24]
        break;
 80071f2:	e00f      	b.n	8007214 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80071f4:	4b39      	ldr	r3, [pc, #228]	; (80072dc <UART_SetConfig+0x348>)
 80071f6:	61bb      	str	r3, [r7, #24]
        break;
 80071f8:	e00c      	b.n	8007214 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80071fa:	f7fd ff27 	bl	800504c <HAL_RCC_GetSysClockFreq>
 80071fe:	61b8      	str	r0, [r7, #24]
        break;
 8007200:	e008      	b.n	8007214 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007202:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007206:	61bb      	str	r3, [r7, #24]
        break;
 8007208:	e004      	b.n	8007214 <UART_SetConfig+0x280>
      default:
        pclk = 0U;
 800720a:	2300      	movs	r3, #0
 800720c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800720e:	2301      	movs	r3, #1
 8007210:	77bb      	strb	r3, [r7, #30]
        break;
 8007212:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007214:	69bb      	ldr	r3, [r7, #24]
 8007216:	2b00      	cmp	r3, #0
 8007218:	f000 8083 	beq.w	8007322 <UART_SetConfig+0x38e>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800721c:	69bb      	ldr	r3, [r7, #24]
 800721e:	005a      	lsls	r2, r3, #1
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	685b      	ldr	r3, [r3, #4]
 8007224:	085b      	lsrs	r3, r3, #1
 8007226:	441a      	add	r2, r3
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	685b      	ldr	r3, [r3, #4]
 800722c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007230:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007232:	693b      	ldr	r3, [r7, #16]
 8007234:	2b0f      	cmp	r3, #15
 8007236:	d916      	bls.n	8007266 <UART_SetConfig+0x2d2>
 8007238:	693b      	ldr	r3, [r7, #16]
 800723a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800723e:	d212      	bcs.n	8007266 <UART_SetConfig+0x2d2>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007240:	693b      	ldr	r3, [r7, #16]
 8007242:	b29b      	uxth	r3, r3
 8007244:	f023 030f 	bic.w	r3, r3, #15
 8007248:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800724a:	693b      	ldr	r3, [r7, #16]
 800724c:	085b      	lsrs	r3, r3, #1
 800724e:	b29b      	uxth	r3, r3
 8007250:	f003 0307 	and.w	r3, r3, #7
 8007254:	b29a      	uxth	r2, r3
 8007256:	89fb      	ldrh	r3, [r7, #14]
 8007258:	4313      	orrs	r3, r2
 800725a:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	89fa      	ldrh	r2, [r7, #14]
 8007262:	60da      	str	r2, [r3, #12]
 8007264:	e05d      	b.n	8007322 <UART_SetConfig+0x38e>
      }
      else
      {
        ret = HAL_ERROR;
 8007266:	2301      	movs	r3, #1
 8007268:	77bb      	strb	r3, [r7, #30]
 800726a:	e05a      	b.n	8007322 <UART_SetConfig+0x38e>
      }
    }
  }
  else
  {
    switch (clocksource)
 800726c:	7ffb      	ldrb	r3, [r7, #31]
 800726e:	2b08      	cmp	r3, #8
 8007270:	d836      	bhi.n	80072e0 <UART_SetConfig+0x34c>
 8007272:	a201      	add	r2, pc, #4	; (adr r2, 8007278 <UART_SetConfig+0x2e4>)
 8007274:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007278:	0800729d 	.word	0x0800729d
 800727c:	080072a5 	.word	0x080072a5
 8007280:	080072ad 	.word	0x080072ad
 8007284:	080072e1 	.word	0x080072e1
 8007288:	080072b3 	.word	0x080072b3
 800728c:	080072e1 	.word	0x080072e1
 8007290:	080072e1 	.word	0x080072e1
 8007294:	080072e1 	.word	0x080072e1
 8007298:	080072bb 	.word	0x080072bb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800729c:	f7fd ff4e 	bl	800513c <HAL_RCC_GetPCLK1Freq>
 80072a0:	61b8      	str	r0, [r7, #24]
        break;
 80072a2:	e022      	b.n	80072ea <UART_SetConfig+0x356>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80072a4:	f7fd ff6c 	bl	8005180 <HAL_RCC_GetPCLK2Freq>
 80072a8:	61b8      	str	r0, [r7, #24]
        break;
 80072aa:	e01e      	b.n	80072ea <UART_SetConfig+0x356>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80072ac:	4b0b      	ldr	r3, [pc, #44]	; (80072dc <UART_SetConfig+0x348>)
 80072ae:	61bb      	str	r3, [r7, #24]
        break;
 80072b0:	e01b      	b.n	80072ea <UART_SetConfig+0x356>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80072b2:	f7fd fecb 	bl	800504c <HAL_RCC_GetSysClockFreq>
 80072b6:	61b8      	str	r0, [r7, #24]
        break;
 80072b8:	e017      	b.n	80072ea <UART_SetConfig+0x356>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80072ba:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80072be:	61bb      	str	r3, [r7, #24]
        break;
 80072c0:	e013      	b.n	80072ea <UART_SetConfig+0x356>
 80072c2:	bf00      	nop
 80072c4:	40013800 	.word	0x40013800
 80072c8:	40021000 	.word	0x40021000
 80072cc:	40004400 	.word	0x40004400
 80072d0:	40004800 	.word	0x40004800
 80072d4:	40004c00 	.word	0x40004c00
 80072d8:	40005000 	.word	0x40005000
 80072dc:	007a1200 	.word	0x007a1200
      default:
        pclk = 0U;
 80072e0:	2300      	movs	r3, #0
 80072e2:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80072e4:	2301      	movs	r3, #1
 80072e6:	77bb      	strb	r3, [r7, #30]
        break;
 80072e8:	bf00      	nop
    }

    if (pclk != 0U)
 80072ea:	69bb      	ldr	r3, [r7, #24]
 80072ec:	2b00      	cmp	r3, #0
 80072ee:	d018      	beq.n	8007322 <UART_SetConfig+0x38e>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	685b      	ldr	r3, [r3, #4]
 80072f4:	085a      	lsrs	r2, r3, #1
 80072f6:	69bb      	ldr	r3, [r7, #24]
 80072f8:	441a      	add	r2, r3
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	685b      	ldr	r3, [r3, #4]
 80072fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8007302:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007304:	693b      	ldr	r3, [r7, #16]
 8007306:	2b0f      	cmp	r3, #15
 8007308:	d909      	bls.n	800731e <UART_SetConfig+0x38a>
 800730a:	693b      	ldr	r3, [r7, #16]
 800730c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007310:	d205      	bcs.n	800731e <UART_SetConfig+0x38a>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007312:	693b      	ldr	r3, [r7, #16]
 8007314:	b29a      	uxth	r2, r3
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	60da      	str	r2, [r3, #12]
 800731c:	e001      	b.n	8007322 <UART_SetConfig+0x38e>
      }
      else
      {
        ret = HAL_ERROR;
 800731e:	2301      	movs	r3, #1
 8007320:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	2200      	movs	r2, #0
 8007326:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	2200      	movs	r2, #0
 800732c:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 800732e:	7fbb      	ldrb	r3, [r7, #30]
}
 8007330:	4618      	mov	r0, r3
 8007332:	3720      	adds	r7, #32
 8007334:	46bd      	mov	sp, r7
 8007336:	bd80      	pop	{r7, pc}

08007338 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007338:	b480      	push	{r7}
 800733a:	b083      	sub	sp, #12
 800733c:	af00      	add	r7, sp, #0
 800733e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007344:	f003 0301 	and.w	r3, r3, #1
 8007348:	2b00      	cmp	r3, #0
 800734a:	d00a      	beq.n	8007362 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	685b      	ldr	r3, [r3, #4]
 8007352:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	430a      	orrs	r2, r1
 8007360:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007366:	f003 0302 	and.w	r3, r3, #2
 800736a:	2b00      	cmp	r3, #0
 800736c:	d00a      	beq.n	8007384 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	685b      	ldr	r3, [r3, #4]
 8007374:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	430a      	orrs	r2, r1
 8007382:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007388:	f003 0304 	and.w	r3, r3, #4
 800738c:	2b00      	cmp	r3, #0
 800738e:	d00a      	beq.n	80073a6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	685b      	ldr	r3, [r3, #4]
 8007396:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	430a      	orrs	r2, r1
 80073a4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073aa:	f003 0308 	and.w	r3, r3, #8
 80073ae:	2b00      	cmp	r3, #0
 80073b0:	d00a      	beq.n	80073c8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	685b      	ldr	r3, [r3, #4]
 80073b8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	430a      	orrs	r2, r1
 80073c6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073cc:	f003 0310 	and.w	r3, r3, #16
 80073d0:	2b00      	cmp	r3, #0
 80073d2:	d00a      	beq.n	80073ea <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	689b      	ldr	r3, [r3, #8]
 80073da:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	681b      	ldr	r3, [r3, #0]
 80073e6:	430a      	orrs	r2, r1
 80073e8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073ee:	f003 0320 	and.w	r3, r3, #32
 80073f2:	2b00      	cmp	r3, #0
 80073f4:	d00a      	beq.n	800740c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	689b      	ldr	r3, [r3, #8]
 80073fc:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	430a      	orrs	r2, r1
 800740a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007410:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007414:	2b00      	cmp	r3, #0
 8007416:	d01a      	beq.n	800744e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	685b      	ldr	r3, [r3, #4]
 800741e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	430a      	orrs	r2, r1
 800742c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007432:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007436:	d10a      	bne.n	800744e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	685b      	ldr	r3, [r3, #4]
 800743e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	430a      	orrs	r2, r1
 800744c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007452:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007456:	2b00      	cmp	r3, #0
 8007458:	d00a      	beq.n	8007470 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	685b      	ldr	r3, [r3, #4]
 8007460:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	430a      	orrs	r2, r1
 800746e:	605a      	str	r2, [r3, #4]
  }
}
 8007470:	bf00      	nop
 8007472:	370c      	adds	r7, #12
 8007474:	46bd      	mov	sp, r7
 8007476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800747a:	4770      	bx	lr

0800747c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800747c:	b580      	push	{r7, lr}
 800747e:	b098      	sub	sp, #96	; 0x60
 8007480:	af02      	add	r7, sp, #8
 8007482:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	2200      	movs	r2, #0
 8007488:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800748c:	f7fa fda8 	bl	8001fe0 <HAL_GetTick>
 8007490:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	681b      	ldr	r3, [r3, #0]
 8007498:	f003 0308 	and.w	r3, r3, #8
 800749c:	2b08      	cmp	r3, #8
 800749e:	d12e      	bne.n	80074fe <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80074a0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80074a4:	9300      	str	r3, [sp, #0]
 80074a6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80074a8:	2200      	movs	r2, #0
 80074aa:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80074ae:	6878      	ldr	r0, [r7, #4]
 80074b0:	f000 f88c 	bl	80075cc <UART_WaitOnFlagUntilTimeout>
 80074b4:	4603      	mov	r3, r0
 80074b6:	2b00      	cmp	r3, #0
 80074b8:	d021      	beq.n	80074fe <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80074c2:	e853 3f00 	ldrex	r3, [r3]
 80074c6:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80074c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80074ca:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80074ce:	653b      	str	r3, [r7, #80]	; 0x50
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	461a      	mov	r2, r3
 80074d6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80074d8:	647b      	str	r3, [r7, #68]	; 0x44
 80074da:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074dc:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80074de:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80074e0:	e841 2300 	strex	r3, r2, [r1]
 80074e4:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80074e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80074e8:	2b00      	cmp	r3, #0
 80074ea:	d1e6      	bne.n	80074ba <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	2220      	movs	r2, #32
 80074f0:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	2200      	movs	r2, #0
 80074f6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80074fa:	2303      	movs	r3, #3
 80074fc:	e062      	b.n	80075c4 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	681b      	ldr	r3, [r3, #0]
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	f003 0304 	and.w	r3, r3, #4
 8007508:	2b04      	cmp	r3, #4
 800750a:	d149      	bne.n	80075a0 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800750c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007510:	9300      	str	r3, [sp, #0]
 8007512:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007514:	2200      	movs	r2, #0
 8007516:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800751a:	6878      	ldr	r0, [r7, #4]
 800751c:	f000 f856 	bl	80075cc <UART_WaitOnFlagUntilTimeout>
 8007520:	4603      	mov	r3, r0
 8007522:	2b00      	cmp	r3, #0
 8007524:	d03c      	beq.n	80075a0 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800752c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800752e:	e853 3f00 	ldrex	r3, [r3]
 8007532:	623b      	str	r3, [r7, #32]
   return(result);
 8007534:	6a3b      	ldr	r3, [r7, #32]
 8007536:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800753a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	461a      	mov	r2, r3
 8007542:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007544:	633b      	str	r3, [r7, #48]	; 0x30
 8007546:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007548:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800754a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800754c:	e841 2300 	strex	r3, r2, [r1]
 8007550:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007552:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007554:	2b00      	cmp	r3, #0
 8007556:	d1e6      	bne.n	8007526 <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	681b      	ldr	r3, [r3, #0]
 800755c:	3308      	adds	r3, #8
 800755e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007560:	693b      	ldr	r3, [r7, #16]
 8007562:	e853 3f00 	ldrex	r3, [r3]
 8007566:	60fb      	str	r3, [r7, #12]
   return(result);
 8007568:	68fb      	ldr	r3, [r7, #12]
 800756a:	f023 0301 	bic.w	r3, r3, #1
 800756e:	64bb      	str	r3, [r7, #72]	; 0x48
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	3308      	adds	r3, #8
 8007576:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007578:	61fa      	str	r2, [r7, #28]
 800757a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800757c:	69b9      	ldr	r1, [r7, #24]
 800757e:	69fa      	ldr	r2, [r7, #28]
 8007580:	e841 2300 	strex	r3, r2, [r1]
 8007584:	617b      	str	r3, [r7, #20]
   return(result);
 8007586:	697b      	ldr	r3, [r7, #20]
 8007588:	2b00      	cmp	r3, #0
 800758a:	d1e5      	bne.n	8007558 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	2220      	movs	r2, #32
 8007590:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	2200      	movs	r2, #0
 8007598:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800759c:	2303      	movs	r3, #3
 800759e:	e011      	b.n	80075c4 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	2220      	movs	r2, #32
 80075a4:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	2220      	movs	r2, #32
 80075aa:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	2200      	movs	r2, #0
 80075b2:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	2200      	movs	r2, #0
 80075b8:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	2200      	movs	r2, #0
 80075be:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 80075c2:	2300      	movs	r3, #0
}
 80075c4:	4618      	mov	r0, r3
 80075c6:	3758      	adds	r7, #88	; 0x58
 80075c8:	46bd      	mov	sp, r7
 80075ca:	bd80      	pop	{r7, pc}

080075cc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80075cc:	b580      	push	{r7, lr}
 80075ce:	b084      	sub	sp, #16
 80075d0:	af00      	add	r7, sp, #0
 80075d2:	60f8      	str	r0, [r7, #12]
 80075d4:	60b9      	str	r1, [r7, #8]
 80075d6:	603b      	str	r3, [r7, #0]
 80075d8:	4613      	mov	r3, r2
 80075da:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80075dc:	e049      	b.n	8007672 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80075de:	69bb      	ldr	r3, [r7, #24]
 80075e0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80075e4:	d045      	beq.n	8007672 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80075e6:	f7fa fcfb 	bl	8001fe0 <HAL_GetTick>
 80075ea:	4602      	mov	r2, r0
 80075ec:	683b      	ldr	r3, [r7, #0]
 80075ee:	1ad3      	subs	r3, r2, r3
 80075f0:	69ba      	ldr	r2, [r7, #24]
 80075f2:	429a      	cmp	r2, r3
 80075f4:	d302      	bcc.n	80075fc <UART_WaitOnFlagUntilTimeout+0x30>
 80075f6:	69bb      	ldr	r3, [r7, #24]
 80075f8:	2b00      	cmp	r3, #0
 80075fa:	d101      	bne.n	8007600 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80075fc:	2303      	movs	r3, #3
 80075fe:	e048      	b.n	8007692 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007600:	68fb      	ldr	r3, [r7, #12]
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	681b      	ldr	r3, [r3, #0]
 8007606:	f003 0304 	and.w	r3, r3, #4
 800760a:	2b00      	cmp	r3, #0
 800760c:	d031      	beq.n	8007672 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800760e:	68fb      	ldr	r3, [r7, #12]
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	69db      	ldr	r3, [r3, #28]
 8007614:	f003 0308 	and.w	r3, r3, #8
 8007618:	2b08      	cmp	r3, #8
 800761a:	d110      	bne.n	800763e <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800761c:	68fb      	ldr	r3, [r7, #12]
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	2208      	movs	r2, #8
 8007622:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8007624:	68f8      	ldr	r0, [r7, #12]
 8007626:	f000 f838 	bl	800769a <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 800762a:	68fb      	ldr	r3, [r7, #12]
 800762c:	2208      	movs	r2, #8
 800762e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8007632:	68fb      	ldr	r3, [r7, #12]
 8007634:	2200      	movs	r2, #0
 8007636:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

           return HAL_ERROR;
 800763a:	2301      	movs	r3, #1
 800763c:	e029      	b.n	8007692 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800763e:	68fb      	ldr	r3, [r7, #12]
 8007640:	681b      	ldr	r3, [r3, #0]
 8007642:	69db      	ldr	r3, [r3, #28]
 8007644:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007648:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800764c:	d111      	bne.n	8007672 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800764e:	68fb      	ldr	r3, [r7, #12]
 8007650:	681b      	ldr	r3, [r3, #0]
 8007652:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007656:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007658:	68f8      	ldr	r0, [r7, #12]
 800765a:	f000 f81e 	bl	800769a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800765e:	68fb      	ldr	r3, [r7, #12]
 8007660:	2220      	movs	r2, #32
 8007662:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007666:	68fb      	ldr	r3, [r7, #12]
 8007668:	2200      	movs	r2, #0
 800766a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 800766e:	2303      	movs	r3, #3
 8007670:	e00f      	b.n	8007692 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007672:	68fb      	ldr	r3, [r7, #12]
 8007674:	681b      	ldr	r3, [r3, #0]
 8007676:	69da      	ldr	r2, [r3, #28]
 8007678:	68bb      	ldr	r3, [r7, #8]
 800767a:	4013      	ands	r3, r2
 800767c:	68ba      	ldr	r2, [r7, #8]
 800767e:	429a      	cmp	r2, r3
 8007680:	bf0c      	ite	eq
 8007682:	2301      	moveq	r3, #1
 8007684:	2300      	movne	r3, #0
 8007686:	b2db      	uxtb	r3, r3
 8007688:	461a      	mov	r2, r3
 800768a:	79fb      	ldrb	r3, [r7, #7]
 800768c:	429a      	cmp	r2, r3
 800768e:	d0a6      	beq.n	80075de <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007690:	2300      	movs	r3, #0
}
 8007692:	4618      	mov	r0, r3
 8007694:	3710      	adds	r7, #16
 8007696:	46bd      	mov	sp, r7
 8007698:	bd80      	pop	{r7, pc}

0800769a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800769a:	b480      	push	{r7}
 800769c:	b095      	sub	sp, #84	; 0x54
 800769e:	af00      	add	r7, sp, #0
 80076a0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	681b      	ldr	r3, [r3, #0]
 80076a6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80076aa:	e853 3f00 	ldrex	r3, [r3]
 80076ae:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80076b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076b2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80076b6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	461a      	mov	r2, r3
 80076be:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80076c0:	643b      	str	r3, [r7, #64]	; 0x40
 80076c2:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076c4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80076c6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80076c8:	e841 2300 	strex	r3, r2, [r1]
 80076cc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80076ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80076d0:	2b00      	cmp	r3, #0
 80076d2:	d1e6      	bne.n	80076a2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	681b      	ldr	r3, [r3, #0]
 80076d8:	3308      	adds	r3, #8
 80076da:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076dc:	6a3b      	ldr	r3, [r7, #32]
 80076de:	e853 3f00 	ldrex	r3, [r3]
 80076e2:	61fb      	str	r3, [r7, #28]
   return(result);
 80076e4:	69fb      	ldr	r3, [r7, #28]
 80076e6:	f023 0301 	bic.w	r3, r3, #1
 80076ea:	64bb      	str	r3, [r7, #72]	; 0x48
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	3308      	adds	r3, #8
 80076f2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80076f4:	62fa      	str	r2, [r7, #44]	; 0x2c
 80076f6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076f8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80076fa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80076fc:	e841 2300 	strex	r3, r2, [r1]
 8007700:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007702:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007704:	2b00      	cmp	r3, #0
 8007706:	d1e5      	bne.n	80076d4 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800770c:	2b01      	cmp	r3, #1
 800770e:	d118      	bne.n	8007742 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007716:	68fb      	ldr	r3, [r7, #12]
 8007718:	e853 3f00 	ldrex	r3, [r3]
 800771c:	60bb      	str	r3, [r7, #8]
   return(result);
 800771e:	68bb      	ldr	r3, [r7, #8]
 8007720:	f023 0310 	bic.w	r3, r3, #16
 8007724:	647b      	str	r3, [r7, #68]	; 0x44
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	681b      	ldr	r3, [r3, #0]
 800772a:	461a      	mov	r2, r3
 800772c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800772e:	61bb      	str	r3, [r7, #24]
 8007730:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007732:	6979      	ldr	r1, [r7, #20]
 8007734:	69ba      	ldr	r2, [r7, #24]
 8007736:	e841 2300 	strex	r3, r2, [r1]
 800773a:	613b      	str	r3, [r7, #16]
   return(result);
 800773c:	693b      	ldr	r3, [r7, #16]
 800773e:	2b00      	cmp	r3, #0
 8007740:	d1e6      	bne.n	8007710 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	2220      	movs	r2, #32
 8007746:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	2200      	movs	r2, #0
 800774e:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	2200      	movs	r2, #0
 8007754:	669a      	str	r2, [r3, #104]	; 0x68
}
 8007756:	bf00      	nop
 8007758:	3754      	adds	r7, #84	; 0x54
 800775a:	46bd      	mov	sp, r7
 800775c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007760:	4770      	bx	lr
	...

08007764 <__errno>:
 8007764:	4b01      	ldr	r3, [pc, #4]	; (800776c <__errno+0x8>)
 8007766:	6818      	ldr	r0, [r3, #0]
 8007768:	4770      	bx	lr
 800776a:	bf00      	nop
 800776c:	2000000c 	.word	0x2000000c

08007770 <__libc_init_array>:
 8007770:	b570      	push	{r4, r5, r6, lr}
 8007772:	4d0d      	ldr	r5, [pc, #52]	; (80077a8 <__libc_init_array+0x38>)
 8007774:	4c0d      	ldr	r4, [pc, #52]	; (80077ac <__libc_init_array+0x3c>)
 8007776:	1b64      	subs	r4, r4, r5
 8007778:	10a4      	asrs	r4, r4, #2
 800777a:	2600      	movs	r6, #0
 800777c:	42a6      	cmp	r6, r4
 800777e:	d109      	bne.n	8007794 <__libc_init_array+0x24>
 8007780:	4d0b      	ldr	r5, [pc, #44]	; (80077b0 <__libc_init_array+0x40>)
 8007782:	4c0c      	ldr	r4, [pc, #48]	; (80077b4 <__libc_init_array+0x44>)
 8007784:	f002 feb6 	bl	800a4f4 <_init>
 8007788:	1b64      	subs	r4, r4, r5
 800778a:	10a4      	asrs	r4, r4, #2
 800778c:	2600      	movs	r6, #0
 800778e:	42a6      	cmp	r6, r4
 8007790:	d105      	bne.n	800779e <__libc_init_array+0x2e>
 8007792:	bd70      	pop	{r4, r5, r6, pc}
 8007794:	f855 3b04 	ldr.w	r3, [r5], #4
 8007798:	4798      	blx	r3
 800779a:	3601      	adds	r6, #1
 800779c:	e7ee      	b.n	800777c <__libc_init_array+0xc>
 800779e:	f855 3b04 	ldr.w	r3, [r5], #4
 80077a2:	4798      	blx	r3
 80077a4:	3601      	adds	r6, #1
 80077a6:	e7f2      	b.n	800778e <__libc_init_array+0x1e>
 80077a8:	0800a984 	.word	0x0800a984
 80077ac:	0800a984 	.word	0x0800a984
 80077b0:	0800a984 	.word	0x0800a984
 80077b4:	0800a988 	.word	0x0800a988

080077b8 <memset>:
 80077b8:	4402      	add	r2, r0
 80077ba:	4603      	mov	r3, r0
 80077bc:	4293      	cmp	r3, r2
 80077be:	d100      	bne.n	80077c2 <memset+0xa>
 80077c0:	4770      	bx	lr
 80077c2:	f803 1b01 	strb.w	r1, [r3], #1
 80077c6:	e7f9      	b.n	80077bc <memset+0x4>

080077c8 <__cvt>:
 80077c8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80077cc:	ec55 4b10 	vmov	r4, r5, d0
 80077d0:	2d00      	cmp	r5, #0
 80077d2:	460e      	mov	r6, r1
 80077d4:	4619      	mov	r1, r3
 80077d6:	462b      	mov	r3, r5
 80077d8:	bfbb      	ittet	lt
 80077da:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80077de:	461d      	movlt	r5, r3
 80077e0:	2300      	movge	r3, #0
 80077e2:	232d      	movlt	r3, #45	; 0x2d
 80077e4:	700b      	strb	r3, [r1, #0]
 80077e6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80077e8:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80077ec:	4691      	mov	r9, r2
 80077ee:	f023 0820 	bic.w	r8, r3, #32
 80077f2:	bfbc      	itt	lt
 80077f4:	4622      	movlt	r2, r4
 80077f6:	4614      	movlt	r4, r2
 80077f8:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80077fc:	d005      	beq.n	800780a <__cvt+0x42>
 80077fe:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8007802:	d100      	bne.n	8007806 <__cvt+0x3e>
 8007804:	3601      	adds	r6, #1
 8007806:	2102      	movs	r1, #2
 8007808:	e000      	b.n	800780c <__cvt+0x44>
 800780a:	2103      	movs	r1, #3
 800780c:	ab03      	add	r3, sp, #12
 800780e:	9301      	str	r3, [sp, #4]
 8007810:	ab02      	add	r3, sp, #8
 8007812:	9300      	str	r3, [sp, #0]
 8007814:	ec45 4b10 	vmov	d0, r4, r5
 8007818:	4653      	mov	r3, sl
 800781a:	4632      	mov	r2, r6
 800781c:	f000 fcec 	bl	80081f8 <_dtoa_r>
 8007820:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8007824:	4607      	mov	r7, r0
 8007826:	d102      	bne.n	800782e <__cvt+0x66>
 8007828:	f019 0f01 	tst.w	r9, #1
 800782c:	d022      	beq.n	8007874 <__cvt+0xac>
 800782e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8007832:	eb07 0906 	add.w	r9, r7, r6
 8007836:	d110      	bne.n	800785a <__cvt+0x92>
 8007838:	783b      	ldrb	r3, [r7, #0]
 800783a:	2b30      	cmp	r3, #48	; 0x30
 800783c:	d10a      	bne.n	8007854 <__cvt+0x8c>
 800783e:	2200      	movs	r2, #0
 8007840:	2300      	movs	r3, #0
 8007842:	4620      	mov	r0, r4
 8007844:	4629      	mov	r1, r5
 8007846:	f7f9 f93f 	bl	8000ac8 <__aeabi_dcmpeq>
 800784a:	b918      	cbnz	r0, 8007854 <__cvt+0x8c>
 800784c:	f1c6 0601 	rsb	r6, r6, #1
 8007850:	f8ca 6000 	str.w	r6, [sl]
 8007854:	f8da 3000 	ldr.w	r3, [sl]
 8007858:	4499      	add	r9, r3
 800785a:	2200      	movs	r2, #0
 800785c:	2300      	movs	r3, #0
 800785e:	4620      	mov	r0, r4
 8007860:	4629      	mov	r1, r5
 8007862:	f7f9 f931 	bl	8000ac8 <__aeabi_dcmpeq>
 8007866:	b108      	cbz	r0, 800786c <__cvt+0xa4>
 8007868:	f8cd 900c 	str.w	r9, [sp, #12]
 800786c:	2230      	movs	r2, #48	; 0x30
 800786e:	9b03      	ldr	r3, [sp, #12]
 8007870:	454b      	cmp	r3, r9
 8007872:	d307      	bcc.n	8007884 <__cvt+0xbc>
 8007874:	9b03      	ldr	r3, [sp, #12]
 8007876:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007878:	1bdb      	subs	r3, r3, r7
 800787a:	4638      	mov	r0, r7
 800787c:	6013      	str	r3, [r2, #0]
 800787e:	b004      	add	sp, #16
 8007880:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007884:	1c59      	adds	r1, r3, #1
 8007886:	9103      	str	r1, [sp, #12]
 8007888:	701a      	strb	r2, [r3, #0]
 800788a:	e7f0      	b.n	800786e <__cvt+0xa6>

0800788c <__exponent>:
 800788c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800788e:	4603      	mov	r3, r0
 8007890:	2900      	cmp	r1, #0
 8007892:	bfb8      	it	lt
 8007894:	4249      	neglt	r1, r1
 8007896:	f803 2b02 	strb.w	r2, [r3], #2
 800789a:	bfb4      	ite	lt
 800789c:	222d      	movlt	r2, #45	; 0x2d
 800789e:	222b      	movge	r2, #43	; 0x2b
 80078a0:	2909      	cmp	r1, #9
 80078a2:	7042      	strb	r2, [r0, #1]
 80078a4:	dd2a      	ble.n	80078fc <__exponent+0x70>
 80078a6:	f10d 0407 	add.w	r4, sp, #7
 80078aa:	46a4      	mov	ip, r4
 80078ac:	270a      	movs	r7, #10
 80078ae:	46a6      	mov	lr, r4
 80078b0:	460a      	mov	r2, r1
 80078b2:	fb91 f6f7 	sdiv	r6, r1, r7
 80078b6:	fb07 1516 	mls	r5, r7, r6, r1
 80078ba:	3530      	adds	r5, #48	; 0x30
 80078bc:	2a63      	cmp	r2, #99	; 0x63
 80078be:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 80078c2:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80078c6:	4631      	mov	r1, r6
 80078c8:	dcf1      	bgt.n	80078ae <__exponent+0x22>
 80078ca:	3130      	adds	r1, #48	; 0x30
 80078cc:	f1ae 0502 	sub.w	r5, lr, #2
 80078d0:	f804 1c01 	strb.w	r1, [r4, #-1]
 80078d4:	1c44      	adds	r4, r0, #1
 80078d6:	4629      	mov	r1, r5
 80078d8:	4561      	cmp	r1, ip
 80078da:	d30a      	bcc.n	80078f2 <__exponent+0x66>
 80078dc:	f10d 0209 	add.w	r2, sp, #9
 80078e0:	eba2 020e 	sub.w	r2, r2, lr
 80078e4:	4565      	cmp	r5, ip
 80078e6:	bf88      	it	hi
 80078e8:	2200      	movhi	r2, #0
 80078ea:	4413      	add	r3, r2
 80078ec:	1a18      	subs	r0, r3, r0
 80078ee:	b003      	add	sp, #12
 80078f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80078f2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80078f6:	f804 2f01 	strb.w	r2, [r4, #1]!
 80078fa:	e7ed      	b.n	80078d8 <__exponent+0x4c>
 80078fc:	2330      	movs	r3, #48	; 0x30
 80078fe:	3130      	adds	r1, #48	; 0x30
 8007900:	7083      	strb	r3, [r0, #2]
 8007902:	70c1      	strb	r1, [r0, #3]
 8007904:	1d03      	adds	r3, r0, #4
 8007906:	e7f1      	b.n	80078ec <__exponent+0x60>

08007908 <_printf_float>:
 8007908:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800790c:	ed2d 8b02 	vpush	{d8}
 8007910:	b08d      	sub	sp, #52	; 0x34
 8007912:	460c      	mov	r4, r1
 8007914:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8007918:	4616      	mov	r6, r2
 800791a:	461f      	mov	r7, r3
 800791c:	4605      	mov	r5, r0
 800791e:	f001 fa57 	bl	8008dd0 <_localeconv_r>
 8007922:	f8d0 a000 	ldr.w	sl, [r0]
 8007926:	4650      	mov	r0, sl
 8007928:	f7f8 fc52 	bl	80001d0 <strlen>
 800792c:	2300      	movs	r3, #0
 800792e:	930a      	str	r3, [sp, #40]	; 0x28
 8007930:	6823      	ldr	r3, [r4, #0]
 8007932:	9305      	str	r3, [sp, #20]
 8007934:	f8d8 3000 	ldr.w	r3, [r8]
 8007938:	f894 b018 	ldrb.w	fp, [r4, #24]
 800793c:	3307      	adds	r3, #7
 800793e:	f023 0307 	bic.w	r3, r3, #7
 8007942:	f103 0208 	add.w	r2, r3, #8
 8007946:	f8c8 2000 	str.w	r2, [r8]
 800794a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800794e:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8007952:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8007956:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800795a:	9307      	str	r3, [sp, #28]
 800795c:	f8cd 8018 	str.w	r8, [sp, #24]
 8007960:	ee08 0a10 	vmov	s16, r0
 8007964:	4b9f      	ldr	r3, [pc, #636]	; (8007be4 <_printf_float+0x2dc>)
 8007966:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800796a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800796e:	f7f9 f8dd 	bl	8000b2c <__aeabi_dcmpun>
 8007972:	bb88      	cbnz	r0, 80079d8 <_printf_float+0xd0>
 8007974:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007978:	4b9a      	ldr	r3, [pc, #616]	; (8007be4 <_printf_float+0x2dc>)
 800797a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800797e:	f7f9 f8b7 	bl	8000af0 <__aeabi_dcmple>
 8007982:	bb48      	cbnz	r0, 80079d8 <_printf_float+0xd0>
 8007984:	2200      	movs	r2, #0
 8007986:	2300      	movs	r3, #0
 8007988:	4640      	mov	r0, r8
 800798a:	4649      	mov	r1, r9
 800798c:	f7f9 f8a6 	bl	8000adc <__aeabi_dcmplt>
 8007990:	b110      	cbz	r0, 8007998 <_printf_float+0x90>
 8007992:	232d      	movs	r3, #45	; 0x2d
 8007994:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007998:	4b93      	ldr	r3, [pc, #588]	; (8007be8 <_printf_float+0x2e0>)
 800799a:	4894      	ldr	r0, [pc, #592]	; (8007bec <_printf_float+0x2e4>)
 800799c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80079a0:	bf94      	ite	ls
 80079a2:	4698      	movls	r8, r3
 80079a4:	4680      	movhi	r8, r0
 80079a6:	2303      	movs	r3, #3
 80079a8:	6123      	str	r3, [r4, #16]
 80079aa:	9b05      	ldr	r3, [sp, #20]
 80079ac:	f023 0204 	bic.w	r2, r3, #4
 80079b0:	6022      	str	r2, [r4, #0]
 80079b2:	f04f 0900 	mov.w	r9, #0
 80079b6:	9700      	str	r7, [sp, #0]
 80079b8:	4633      	mov	r3, r6
 80079ba:	aa0b      	add	r2, sp, #44	; 0x2c
 80079bc:	4621      	mov	r1, r4
 80079be:	4628      	mov	r0, r5
 80079c0:	f000 f9d8 	bl	8007d74 <_printf_common>
 80079c4:	3001      	adds	r0, #1
 80079c6:	f040 8090 	bne.w	8007aea <_printf_float+0x1e2>
 80079ca:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80079ce:	b00d      	add	sp, #52	; 0x34
 80079d0:	ecbd 8b02 	vpop	{d8}
 80079d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80079d8:	4642      	mov	r2, r8
 80079da:	464b      	mov	r3, r9
 80079dc:	4640      	mov	r0, r8
 80079de:	4649      	mov	r1, r9
 80079e0:	f7f9 f8a4 	bl	8000b2c <__aeabi_dcmpun>
 80079e4:	b140      	cbz	r0, 80079f8 <_printf_float+0xf0>
 80079e6:	464b      	mov	r3, r9
 80079e8:	2b00      	cmp	r3, #0
 80079ea:	bfbc      	itt	lt
 80079ec:	232d      	movlt	r3, #45	; 0x2d
 80079ee:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80079f2:	487f      	ldr	r0, [pc, #508]	; (8007bf0 <_printf_float+0x2e8>)
 80079f4:	4b7f      	ldr	r3, [pc, #508]	; (8007bf4 <_printf_float+0x2ec>)
 80079f6:	e7d1      	b.n	800799c <_printf_float+0x94>
 80079f8:	6863      	ldr	r3, [r4, #4]
 80079fa:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80079fe:	9206      	str	r2, [sp, #24]
 8007a00:	1c5a      	adds	r2, r3, #1
 8007a02:	d13f      	bne.n	8007a84 <_printf_float+0x17c>
 8007a04:	2306      	movs	r3, #6
 8007a06:	6063      	str	r3, [r4, #4]
 8007a08:	9b05      	ldr	r3, [sp, #20]
 8007a0a:	6861      	ldr	r1, [r4, #4]
 8007a0c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8007a10:	2300      	movs	r3, #0
 8007a12:	9303      	str	r3, [sp, #12]
 8007a14:	ab0a      	add	r3, sp, #40	; 0x28
 8007a16:	e9cd b301 	strd	fp, r3, [sp, #4]
 8007a1a:	ab09      	add	r3, sp, #36	; 0x24
 8007a1c:	ec49 8b10 	vmov	d0, r8, r9
 8007a20:	9300      	str	r3, [sp, #0]
 8007a22:	6022      	str	r2, [r4, #0]
 8007a24:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8007a28:	4628      	mov	r0, r5
 8007a2a:	f7ff fecd 	bl	80077c8 <__cvt>
 8007a2e:	9b06      	ldr	r3, [sp, #24]
 8007a30:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007a32:	2b47      	cmp	r3, #71	; 0x47
 8007a34:	4680      	mov	r8, r0
 8007a36:	d108      	bne.n	8007a4a <_printf_float+0x142>
 8007a38:	1cc8      	adds	r0, r1, #3
 8007a3a:	db02      	blt.n	8007a42 <_printf_float+0x13a>
 8007a3c:	6863      	ldr	r3, [r4, #4]
 8007a3e:	4299      	cmp	r1, r3
 8007a40:	dd41      	ble.n	8007ac6 <_printf_float+0x1be>
 8007a42:	f1ab 0b02 	sub.w	fp, fp, #2
 8007a46:	fa5f fb8b 	uxtb.w	fp, fp
 8007a4a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8007a4e:	d820      	bhi.n	8007a92 <_printf_float+0x18a>
 8007a50:	3901      	subs	r1, #1
 8007a52:	465a      	mov	r2, fp
 8007a54:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8007a58:	9109      	str	r1, [sp, #36]	; 0x24
 8007a5a:	f7ff ff17 	bl	800788c <__exponent>
 8007a5e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007a60:	1813      	adds	r3, r2, r0
 8007a62:	2a01      	cmp	r2, #1
 8007a64:	4681      	mov	r9, r0
 8007a66:	6123      	str	r3, [r4, #16]
 8007a68:	dc02      	bgt.n	8007a70 <_printf_float+0x168>
 8007a6a:	6822      	ldr	r2, [r4, #0]
 8007a6c:	07d2      	lsls	r2, r2, #31
 8007a6e:	d501      	bpl.n	8007a74 <_printf_float+0x16c>
 8007a70:	3301      	adds	r3, #1
 8007a72:	6123      	str	r3, [r4, #16]
 8007a74:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8007a78:	2b00      	cmp	r3, #0
 8007a7a:	d09c      	beq.n	80079b6 <_printf_float+0xae>
 8007a7c:	232d      	movs	r3, #45	; 0x2d
 8007a7e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007a82:	e798      	b.n	80079b6 <_printf_float+0xae>
 8007a84:	9a06      	ldr	r2, [sp, #24]
 8007a86:	2a47      	cmp	r2, #71	; 0x47
 8007a88:	d1be      	bne.n	8007a08 <_printf_float+0x100>
 8007a8a:	2b00      	cmp	r3, #0
 8007a8c:	d1bc      	bne.n	8007a08 <_printf_float+0x100>
 8007a8e:	2301      	movs	r3, #1
 8007a90:	e7b9      	b.n	8007a06 <_printf_float+0xfe>
 8007a92:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8007a96:	d118      	bne.n	8007aca <_printf_float+0x1c2>
 8007a98:	2900      	cmp	r1, #0
 8007a9a:	6863      	ldr	r3, [r4, #4]
 8007a9c:	dd0b      	ble.n	8007ab6 <_printf_float+0x1ae>
 8007a9e:	6121      	str	r1, [r4, #16]
 8007aa0:	b913      	cbnz	r3, 8007aa8 <_printf_float+0x1a0>
 8007aa2:	6822      	ldr	r2, [r4, #0]
 8007aa4:	07d0      	lsls	r0, r2, #31
 8007aa6:	d502      	bpl.n	8007aae <_printf_float+0x1a6>
 8007aa8:	3301      	adds	r3, #1
 8007aaa:	440b      	add	r3, r1
 8007aac:	6123      	str	r3, [r4, #16]
 8007aae:	65a1      	str	r1, [r4, #88]	; 0x58
 8007ab0:	f04f 0900 	mov.w	r9, #0
 8007ab4:	e7de      	b.n	8007a74 <_printf_float+0x16c>
 8007ab6:	b913      	cbnz	r3, 8007abe <_printf_float+0x1b6>
 8007ab8:	6822      	ldr	r2, [r4, #0]
 8007aba:	07d2      	lsls	r2, r2, #31
 8007abc:	d501      	bpl.n	8007ac2 <_printf_float+0x1ba>
 8007abe:	3302      	adds	r3, #2
 8007ac0:	e7f4      	b.n	8007aac <_printf_float+0x1a4>
 8007ac2:	2301      	movs	r3, #1
 8007ac4:	e7f2      	b.n	8007aac <_printf_float+0x1a4>
 8007ac6:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8007aca:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007acc:	4299      	cmp	r1, r3
 8007ace:	db05      	blt.n	8007adc <_printf_float+0x1d4>
 8007ad0:	6823      	ldr	r3, [r4, #0]
 8007ad2:	6121      	str	r1, [r4, #16]
 8007ad4:	07d8      	lsls	r0, r3, #31
 8007ad6:	d5ea      	bpl.n	8007aae <_printf_float+0x1a6>
 8007ad8:	1c4b      	adds	r3, r1, #1
 8007ada:	e7e7      	b.n	8007aac <_printf_float+0x1a4>
 8007adc:	2900      	cmp	r1, #0
 8007ade:	bfd4      	ite	le
 8007ae0:	f1c1 0202 	rsble	r2, r1, #2
 8007ae4:	2201      	movgt	r2, #1
 8007ae6:	4413      	add	r3, r2
 8007ae8:	e7e0      	b.n	8007aac <_printf_float+0x1a4>
 8007aea:	6823      	ldr	r3, [r4, #0]
 8007aec:	055a      	lsls	r2, r3, #21
 8007aee:	d407      	bmi.n	8007b00 <_printf_float+0x1f8>
 8007af0:	6923      	ldr	r3, [r4, #16]
 8007af2:	4642      	mov	r2, r8
 8007af4:	4631      	mov	r1, r6
 8007af6:	4628      	mov	r0, r5
 8007af8:	47b8      	blx	r7
 8007afa:	3001      	adds	r0, #1
 8007afc:	d12c      	bne.n	8007b58 <_printf_float+0x250>
 8007afe:	e764      	b.n	80079ca <_printf_float+0xc2>
 8007b00:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8007b04:	f240 80e0 	bls.w	8007cc8 <_printf_float+0x3c0>
 8007b08:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007b0c:	2200      	movs	r2, #0
 8007b0e:	2300      	movs	r3, #0
 8007b10:	f7f8 ffda 	bl	8000ac8 <__aeabi_dcmpeq>
 8007b14:	2800      	cmp	r0, #0
 8007b16:	d034      	beq.n	8007b82 <_printf_float+0x27a>
 8007b18:	4a37      	ldr	r2, [pc, #220]	; (8007bf8 <_printf_float+0x2f0>)
 8007b1a:	2301      	movs	r3, #1
 8007b1c:	4631      	mov	r1, r6
 8007b1e:	4628      	mov	r0, r5
 8007b20:	47b8      	blx	r7
 8007b22:	3001      	adds	r0, #1
 8007b24:	f43f af51 	beq.w	80079ca <_printf_float+0xc2>
 8007b28:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007b2c:	429a      	cmp	r2, r3
 8007b2e:	db02      	blt.n	8007b36 <_printf_float+0x22e>
 8007b30:	6823      	ldr	r3, [r4, #0]
 8007b32:	07d8      	lsls	r0, r3, #31
 8007b34:	d510      	bpl.n	8007b58 <_printf_float+0x250>
 8007b36:	ee18 3a10 	vmov	r3, s16
 8007b3a:	4652      	mov	r2, sl
 8007b3c:	4631      	mov	r1, r6
 8007b3e:	4628      	mov	r0, r5
 8007b40:	47b8      	blx	r7
 8007b42:	3001      	adds	r0, #1
 8007b44:	f43f af41 	beq.w	80079ca <_printf_float+0xc2>
 8007b48:	f04f 0800 	mov.w	r8, #0
 8007b4c:	f104 091a 	add.w	r9, r4, #26
 8007b50:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007b52:	3b01      	subs	r3, #1
 8007b54:	4543      	cmp	r3, r8
 8007b56:	dc09      	bgt.n	8007b6c <_printf_float+0x264>
 8007b58:	6823      	ldr	r3, [r4, #0]
 8007b5a:	079b      	lsls	r3, r3, #30
 8007b5c:	f100 8105 	bmi.w	8007d6a <_printf_float+0x462>
 8007b60:	68e0      	ldr	r0, [r4, #12]
 8007b62:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007b64:	4298      	cmp	r0, r3
 8007b66:	bfb8      	it	lt
 8007b68:	4618      	movlt	r0, r3
 8007b6a:	e730      	b.n	80079ce <_printf_float+0xc6>
 8007b6c:	2301      	movs	r3, #1
 8007b6e:	464a      	mov	r2, r9
 8007b70:	4631      	mov	r1, r6
 8007b72:	4628      	mov	r0, r5
 8007b74:	47b8      	blx	r7
 8007b76:	3001      	adds	r0, #1
 8007b78:	f43f af27 	beq.w	80079ca <_printf_float+0xc2>
 8007b7c:	f108 0801 	add.w	r8, r8, #1
 8007b80:	e7e6      	b.n	8007b50 <_printf_float+0x248>
 8007b82:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007b84:	2b00      	cmp	r3, #0
 8007b86:	dc39      	bgt.n	8007bfc <_printf_float+0x2f4>
 8007b88:	4a1b      	ldr	r2, [pc, #108]	; (8007bf8 <_printf_float+0x2f0>)
 8007b8a:	2301      	movs	r3, #1
 8007b8c:	4631      	mov	r1, r6
 8007b8e:	4628      	mov	r0, r5
 8007b90:	47b8      	blx	r7
 8007b92:	3001      	adds	r0, #1
 8007b94:	f43f af19 	beq.w	80079ca <_printf_float+0xc2>
 8007b98:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007b9c:	4313      	orrs	r3, r2
 8007b9e:	d102      	bne.n	8007ba6 <_printf_float+0x29e>
 8007ba0:	6823      	ldr	r3, [r4, #0]
 8007ba2:	07d9      	lsls	r1, r3, #31
 8007ba4:	d5d8      	bpl.n	8007b58 <_printf_float+0x250>
 8007ba6:	ee18 3a10 	vmov	r3, s16
 8007baa:	4652      	mov	r2, sl
 8007bac:	4631      	mov	r1, r6
 8007bae:	4628      	mov	r0, r5
 8007bb0:	47b8      	blx	r7
 8007bb2:	3001      	adds	r0, #1
 8007bb4:	f43f af09 	beq.w	80079ca <_printf_float+0xc2>
 8007bb8:	f04f 0900 	mov.w	r9, #0
 8007bbc:	f104 0a1a 	add.w	sl, r4, #26
 8007bc0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007bc2:	425b      	negs	r3, r3
 8007bc4:	454b      	cmp	r3, r9
 8007bc6:	dc01      	bgt.n	8007bcc <_printf_float+0x2c4>
 8007bc8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007bca:	e792      	b.n	8007af2 <_printf_float+0x1ea>
 8007bcc:	2301      	movs	r3, #1
 8007bce:	4652      	mov	r2, sl
 8007bd0:	4631      	mov	r1, r6
 8007bd2:	4628      	mov	r0, r5
 8007bd4:	47b8      	blx	r7
 8007bd6:	3001      	adds	r0, #1
 8007bd8:	f43f aef7 	beq.w	80079ca <_printf_float+0xc2>
 8007bdc:	f109 0901 	add.w	r9, r9, #1
 8007be0:	e7ee      	b.n	8007bc0 <_printf_float+0x2b8>
 8007be2:	bf00      	nop
 8007be4:	7fefffff 	.word	0x7fefffff
 8007be8:	0800a5a8 	.word	0x0800a5a8
 8007bec:	0800a5ac 	.word	0x0800a5ac
 8007bf0:	0800a5b4 	.word	0x0800a5b4
 8007bf4:	0800a5b0 	.word	0x0800a5b0
 8007bf8:	0800a5b8 	.word	0x0800a5b8
 8007bfc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007bfe:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007c00:	429a      	cmp	r2, r3
 8007c02:	bfa8      	it	ge
 8007c04:	461a      	movge	r2, r3
 8007c06:	2a00      	cmp	r2, #0
 8007c08:	4691      	mov	r9, r2
 8007c0a:	dc37      	bgt.n	8007c7c <_printf_float+0x374>
 8007c0c:	f04f 0b00 	mov.w	fp, #0
 8007c10:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007c14:	f104 021a 	add.w	r2, r4, #26
 8007c18:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007c1a:	9305      	str	r3, [sp, #20]
 8007c1c:	eba3 0309 	sub.w	r3, r3, r9
 8007c20:	455b      	cmp	r3, fp
 8007c22:	dc33      	bgt.n	8007c8c <_printf_float+0x384>
 8007c24:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007c28:	429a      	cmp	r2, r3
 8007c2a:	db3b      	blt.n	8007ca4 <_printf_float+0x39c>
 8007c2c:	6823      	ldr	r3, [r4, #0]
 8007c2e:	07da      	lsls	r2, r3, #31
 8007c30:	d438      	bmi.n	8007ca4 <_printf_float+0x39c>
 8007c32:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007c34:	9b05      	ldr	r3, [sp, #20]
 8007c36:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007c38:	1ad3      	subs	r3, r2, r3
 8007c3a:	eba2 0901 	sub.w	r9, r2, r1
 8007c3e:	4599      	cmp	r9, r3
 8007c40:	bfa8      	it	ge
 8007c42:	4699      	movge	r9, r3
 8007c44:	f1b9 0f00 	cmp.w	r9, #0
 8007c48:	dc35      	bgt.n	8007cb6 <_printf_float+0x3ae>
 8007c4a:	f04f 0800 	mov.w	r8, #0
 8007c4e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007c52:	f104 0a1a 	add.w	sl, r4, #26
 8007c56:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007c5a:	1a9b      	subs	r3, r3, r2
 8007c5c:	eba3 0309 	sub.w	r3, r3, r9
 8007c60:	4543      	cmp	r3, r8
 8007c62:	f77f af79 	ble.w	8007b58 <_printf_float+0x250>
 8007c66:	2301      	movs	r3, #1
 8007c68:	4652      	mov	r2, sl
 8007c6a:	4631      	mov	r1, r6
 8007c6c:	4628      	mov	r0, r5
 8007c6e:	47b8      	blx	r7
 8007c70:	3001      	adds	r0, #1
 8007c72:	f43f aeaa 	beq.w	80079ca <_printf_float+0xc2>
 8007c76:	f108 0801 	add.w	r8, r8, #1
 8007c7a:	e7ec      	b.n	8007c56 <_printf_float+0x34e>
 8007c7c:	4613      	mov	r3, r2
 8007c7e:	4631      	mov	r1, r6
 8007c80:	4642      	mov	r2, r8
 8007c82:	4628      	mov	r0, r5
 8007c84:	47b8      	blx	r7
 8007c86:	3001      	adds	r0, #1
 8007c88:	d1c0      	bne.n	8007c0c <_printf_float+0x304>
 8007c8a:	e69e      	b.n	80079ca <_printf_float+0xc2>
 8007c8c:	2301      	movs	r3, #1
 8007c8e:	4631      	mov	r1, r6
 8007c90:	4628      	mov	r0, r5
 8007c92:	9205      	str	r2, [sp, #20]
 8007c94:	47b8      	blx	r7
 8007c96:	3001      	adds	r0, #1
 8007c98:	f43f ae97 	beq.w	80079ca <_printf_float+0xc2>
 8007c9c:	9a05      	ldr	r2, [sp, #20]
 8007c9e:	f10b 0b01 	add.w	fp, fp, #1
 8007ca2:	e7b9      	b.n	8007c18 <_printf_float+0x310>
 8007ca4:	ee18 3a10 	vmov	r3, s16
 8007ca8:	4652      	mov	r2, sl
 8007caa:	4631      	mov	r1, r6
 8007cac:	4628      	mov	r0, r5
 8007cae:	47b8      	blx	r7
 8007cb0:	3001      	adds	r0, #1
 8007cb2:	d1be      	bne.n	8007c32 <_printf_float+0x32a>
 8007cb4:	e689      	b.n	80079ca <_printf_float+0xc2>
 8007cb6:	9a05      	ldr	r2, [sp, #20]
 8007cb8:	464b      	mov	r3, r9
 8007cba:	4442      	add	r2, r8
 8007cbc:	4631      	mov	r1, r6
 8007cbe:	4628      	mov	r0, r5
 8007cc0:	47b8      	blx	r7
 8007cc2:	3001      	adds	r0, #1
 8007cc4:	d1c1      	bne.n	8007c4a <_printf_float+0x342>
 8007cc6:	e680      	b.n	80079ca <_printf_float+0xc2>
 8007cc8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007cca:	2a01      	cmp	r2, #1
 8007ccc:	dc01      	bgt.n	8007cd2 <_printf_float+0x3ca>
 8007cce:	07db      	lsls	r3, r3, #31
 8007cd0:	d538      	bpl.n	8007d44 <_printf_float+0x43c>
 8007cd2:	2301      	movs	r3, #1
 8007cd4:	4642      	mov	r2, r8
 8007cd6:	4631      	mov	r1, r6
 8007cd8:	4628      	mov	r0, r5
 8007cda:	47b8      	blx	r7
 8007cdc:	3001      	adds	r0, #1
 8007cde:	f43f ae74 	beq.w	80079ca <_printf_float+0xc2>
 8007ce2:	ee18 3a10 	vmov	r3, s16
 8007ce6:	4652      	mov	r2, sl
 8007ce8:	4631      	mov	r1, r6
 8007cea:	4628      	mov	r0, r5
 8007cec:	47b8      	blx	r7
 8007cee:	3001      	adds	r0, #1
 8007cf0:	f43f ae6b 	beq.w	80079ca <_printf_float+0xc2>
 8007cf4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007cf8:	2200      	movs	r2, #0
 8007cfa:	2300      	movs	r3, #0
 8007cfc:	f7f8 fee4 	bl	8000ac8 <__aeabi_dcmpeq>
 8007d00:	b9d8      	cbnz	r0, 8007d3a <_printf_float+0x432>
 8007d02:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007d04:	f108 0201 	add.w	r2, r8, #1
 8007d08:	3b01      	subs	r3, #1
 8007d0a:	4631      	mov	r1, r6
 8007d0c:	4628      	mov	r0, r5
 8007d0e:	47b8      	blx	r7
 8007d10:	3001      	adds	r0, #1
 8007d12:	d10e      	bne.n	8007d32 <_printf_float+0x42a>
 8007d14:	e659      	b.n	80079ca <_printf_float+0xc2>
 8007d16:	2301      	movs	r3, #1
 8007d18:	4652      	mov	r2, sl
 8007d1a:	4631      	mov	r1, r6
 8007d1c:	4628      	mov	r0, r5
 8007d1e:	47b8      	blx	r7
 8007d20:	3001      	adds	r0, #1
 8007d22:	f43f ae52 	beq.w	80079ca <_printf_float+0xc2>
 8007d26:	f108 0801 	add.w	r8, r8, #1
 8007d2a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007d2c:	3b01      	subs	r3, #1
 8007d2e:	4543      	cmp	r3, r8
 8007d30:	dcf1      	bgt.n	8007d16 <_printf_float+0x40e>
 8007d32:	464b      	mov	r3, r9
 8007d34:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8007d38:	e6dc      	b.n	8007af4 <_printf_float+0x1ec>
 8007d3a:	f04f 0800 	mov.w	r8, #0
 8007d3e:	f104 0a1a 	add.w	sl, r4, #26
 8007d42:	e7f2      	b.n	8007d2a <_printf_float+0x422>
 8007d44:	2301      	movs	r3, #1
 8007d46:	4642      	mov	r2, r8
 8007d48:	e7df      	b.n	8007d0a <_printf_float+0x402>
 8007d4a:	2301      	movs	r3, #1
 8007d4c:	464a      	mov	r2, r9
 8007d4e:	4631      	mov	r1, r6
 8007d50:	4628      	mov	r0, r5
 8007d52:	47b8      	blx	r7
 8007d54:	3001      	adds	r0, #1
 8007d56:	f43f ae38 	beq.w	80079ca <_printf_float+0xc2>
 8007d5a:	f108 0801 	add.w	r8, r8, #1
 8007d5e:	68e3      	ldr	r3, [r4, #12]
 8007d60:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007d62:	1a5b      	subs	r3, r3, r1
 8007d64:	4543      	cmp	r3, r8
 8007d66:	dcf0      	bgt.n	8007d4a <_printf_float+0x442>
 8007d68:	e6fa      	b.n	8007b60 <_printf_float+0x258>
 8007d6a:	f04f 0800 	mov.w	r8, #0
 8007d6e:	f104 0919 	add.w	r9, r4, #25
 8007d72:	e7f4      	b.n	8007d5e <_printf_float+0x456>

08007d74 <_printf_common>:
 8007d74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007d78:	4616      	mov	r6, r2
 8007d7a:	4699      	mov	r9, r3
 8007d7c:	688a      	ldr	r2, [r1, #8]
 8007d7e:	690b      	ldr	r3, [r1, #16]
 8007d80:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007d84:	4293      	cmp	r3, r2
 8007d86:	bfb8      	it	lt
 8007d88:	4613      	movlt	r3, r2
 8007d8a:	6033      	str	r3, [r6, #0]
 8007d8c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007d90:	4607      	mov	r7, r0
 8007d92:	460c      	mov	r4, r1
 8007d94:	b10a      	cbz	r2, 8007d9a <_printf_common+0x26>
 8007d96:	3301      	adds	r3, #1
 8007d98:	6033      	str	r3, [r6, #0]
 8007d9a:	6823      	ldr	r3, [r4, #0]
 8007d9c:	0699      	lsls	r1, r3, #26
 8007d9e:	bf42      	ittt	mi
 8007da0:	6833      	ldrmi	r3, [r6, #0]
 8007da2:	3302      	addmi	r3, #2
 8007da4:	6033      	strmi	r3, [r6, #0]
 8007da6:	6825      	ldr	r5, [r4, #0]
 8007da8:	f015 0506 	ands.w	r5, r5, #6
 8007dac:	d106      	bne.n	8007dbc <_printf_common+0x48>
 8007dae:	f104 0a19 	add.w	sl, r4, #25
 8007db2:	68e3      	ldr	r3, [r4, #12]
 8007db4:	6832      	ldr	r2, [r6, #0]
 8007db6:	1a9b      	subs	r3, r3, r2
 8007db8:	42ab      	cmp	r3, r5
 8007dba:	dc26      	bgt.n	8007e0a <_printf_common+0x96>
 8007dbc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007dc0:	1e13      	subs	r3, r2, #0
 8007dc2:	6822      	ldr	r2, [r4, #0]
 8007dc4:	bf18      	it	ne
 8007dc6:	2301      	movne	r3, #1
 8007dc8:	0692      	lsls	r2, r2, #26
 8007dca:	d42b      	bmi.n	8007e24 <_printf_common+0xb0>
 8007dcc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007dd0:	4649      	mov	r1, r9
 8007dd2:	4638      	mov	r0, r7
 8007dd4:	47c0      	blx	r8
 8007dd6:	3001      	adds	r0, #1
 8007dd8:	d01e      	beq.n	8007e18 <_printf_common+0xa4>
 8007dda:	6823      	ldr	r3, [r4, #0]
 8007ddc:	68e5      	ldr	r5, [r4, #12]
 8007dde:	6832      	ldr	r2, [r6, #0]
 8007de0:	f003 0306 	and.w	r3, r3, #6
 8007de4:	2b04      	cmp	r3, #4
 8007de6:	bf08      	it	eq
 8007de8:	1aad      	subeq	r5, r5, r2
 8007dea:	68a3      	ldr	r3, [r4, #8]
 8007dec:	6922      	ldr	r2, [r4, #16]
 8007dee:	bf0c      	ite	eq
 8007df0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007df4:	2500      	movne	r5, #0
 8007df6:	4293      	cmp	r3, r2
 8007df8:	bfc4      	itt	gt
 8007dfa:	1a9b      	subgt	r3, r3, r2
 8007dfc:	18ed      	addgt	r5, r5, r3
 8007dfe:	2600      	movs	r6, #0
 8007e00:	341a      	adds	r4, #26
 8007e02:	42b5      	cmp	r5, r6
 8007e04:	d11a      	bne.n	8007e3c <_printf_common+0xc8>
 8007e06:	2000      	movs	r0, #0
 8007e08:	e008      	b.n	8007e1c <_printf_common+0xa8>
 8007e0a:	2301      	movs	r3, #1
 8007e0c:	4652      	mov	r2, sl
 8007e0e:	4649      	mov	r1, r9
 8007e10:	4638      	mov	r0, r7
 8007e12:	47c0      	blx	r8
 8007e14:	3001      	adds	r0, #1
 8007e16:	d103      	bne.n	8007e20 <_printf_common+0xac>
 8007e18:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007e1c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007e20:	3501      	adds	r5, #1
 8007e22:	e7c6      	b.n	8007db2 <_printf_common+0x3e>
 8007e24:	18e1      	adds	r1, r4, r3
 8007e26:	1c5a      	adds	r2, r3, #1
 8007e28:	2030      	movs	r0, #48	; 0x30
 8007e2a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007e2e:	4422      	add	r2, r4
 8007e30:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007e34:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007e38:	3302      	adds	r3, #2
 8007e3a:	e7c7      	b.n	8007dcc <_printf_common+0x58>
 8007e3c:	2301      	movs	r3, #1
 8007e3e:	4622      	mov	r2, r4
 8007e40:	4649      	mov	r1, r9
 8007e42:	4638      	mov	r0, r7
 8007e44:	47c0      	blx	r8
 8007e46:	3001      	adds	r0, #1
 8007e48:	d0e6      	beq.n	8007e18 <_printf_common+0xa4>
 8007e4a:	3601      	adds	r6, #1
 8007e4c:	e7d9      	b.n	8007e02 <_printf_common+0x8e>
	...

08007e50 <_printf_i>:
 8007e50:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007e54:	460c      	mov	r4, r1
 8007e56:	4691      	mov	r9, r2
 8007e58:	7e27      	ldrb	r7, [r4, #24]
 8007e5a:	990c      	ldr	r1, [sp, #48]	; 0x30
 8007e5c:	2f78      	cmp	r7, #120	; 0x78
 8007e5e:	4680      	mov	r8, r0
 8007e60:	469a      	mov	sl, r3
 8007e62:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007e66:	d807      	bhi.n	8007e78 <_printf_i+0x28>
 8007e68:	2f62      	cmp	r7, #98	; 0x62
 8007e6a:	d80a      	bhi.n	8007e82 <_printf_i+0x32>
 8007e6c:	2f00      	cmp	r7, #0
 8007e6e:	f000 80d8 	beq.w	8008022 <_printf_i+0x1d2>
 8007e72:	2f58      	cmp	r7, #88	; 0x58
 8007e74:	f000 80a3 	beq.w	8007fbe <_printf_i+0x16e>
 8007e78:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8007e7c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007e80:	e03a      	b.n	8007ef8 <_printf_i+0xa8>
 8007e82:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007e86:	2b15      	cmp	r3, #21
 8007e88:	d8f6      	bhi.n	8007e78 <_printf_i+0x28>
 8007e8a:	a001      	add	r0, pc, #4	; (adr r0, 8007e90 <_printf_i+0x40>)
 8007e8c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8007e90:	08007ee9 	.word	0x08007ee9
 8007e94:	08007efd 	.word	0x08007efd
 8007e98:	08007e79 	.word	0x08007e79
 8007e9c:	08007e79 	.word	0x08007e79
 8007ea0:	08007e79 	.word	0x08007e79
 8007ea4:	08007e79 	.word	0x08007e79
 8007ea8:	08007efd 	.word	0x08007efd
 8007eac:	08007e79 	.word	0x08007e79
 8007eb0:	08007e79 	.word	0x08007e79
 8007eb4:	08007e79 	.word	0x08007e79
 8007eb8:	08007e79 	.word	0x08007e79
 8007ebc:	08008009 	.word	0x08008009
 8007ec0:	08007f2d 	.word	0x08007f2d
 8007ec4:	08007feb 	.word	0x08007feb
 8007ec8:	08007e79 	.word	0x08007e79
 8007ecc:	08007e79 	.word	0x08007e79
 8007ed0:	0800802b 	.word	0x0800802b
 8007ed4:	08007e79 	.word	0x08007e79
 8007ed8:	08007f2d 	.word	0x08007f2d
 8007edc:	08007e79 	.word	0x08007e79
 8007ee0:	08007e79 	.word	0x08007e79
 8007ee4:	08007ff3 	.word	0x08007ff3
 8007ee8:	680b      	ldr	r3, [r1, #0]
 8007eea:	1d1a      	adds	r2, r3, #4
 8007eec:	681b      	ldr	r3, [r3, #0]
 8007eee:	600a      	str	r2, [r1, #0]
 8007ef0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8007ef4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007ef8:	2301      	movs	r3, #1
 8007efa:	e0a3      	b.n	8008044 <_printf_i+0x1f4>
 8007efc:	6825      	ldr	r5, [r4, #0]
 8007efe:	6808      	ldr	r0, [r1, #0]
 8007f00:	062e      	lsls	r6, r5, #24
 8007f02:	f100 0304 	add.w	r3, r0, #4
 8007f06:	d50a      	bpl.n	8007f1e <_printf_i+0xce>
 8007f08:	6805      	ldr	r5, [r0, #0]
 8007f0a:	600b      	str	r3, [r1, #0]
 8007f0c:	2d00      	cmp	r5, #0
 8007f0e:	da03      	bge.n	8007f18 <_printf_i+0xc8>
 8007f10:	232d      	movs	r3, #45	; 0x2d
 8007f12:	426d      	negs	r5, r5
 8007f14:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007f18:	485e      	ldr	r0, [pc, #376]	; (8008094 <_printf_i+0x244>)
 8007f1a:	230a      	movs	r3, #10
 8007f1c:	e019      	b.n	8007f52 <_printf_i+0x102>
 8007f1e:	f015 0f40 	tst.w	r5, #64	; 0x40
 8007f22:	6805      	ldr	r5, [r0, #0]
 8007f24:	600b      	str	r3, [r1, #0]
 8007f26:	bf18      	it	ne
 8007f28:	b22d      	sxthne	r5, r5
 8007f2a:	e7ef      	b.n	8007f0c <_printf_i+0xbc>
 8007f2c:	680b      	ldr	r3, [r1, #0]
 8007f2e:	6825      	ldr	r5, [r4, #0]
 8007f30:	1d18      	adds	r0, r3, #4
 8007f32:	6008      	str	r0, [r1, #0]
 8007f34:	0628      	lsls	r0, r5, #24
 8007f36:	d501      	bpl.n	8007f3c <_printf_i+0xec>
 8007f38:	681d      	ldr	r5, [r3, #0]
 8007f3a:	e002      	b.n	8007f42 <_printf_i+0xf2>
 8007f3c:	0669      	lsls	r1, r5, #25
 8007f3e:	d5fb      	bpl.n	8007f38 <_printf_i+0xe8>
 8007f40:	881d      	ldrh	r5, [r3, #0]
 8007f42:	4854      	ldr	r0, [pc, #336]	; (8008094 <_printf_i+0x244>)
 8007f44:	2f6f      	cmp	r7, #111	; 0x6f
 8007f46:	bf0c      	ite	eq
 8007f48:	2308      	moveq	r3, #8
 8007f4a:	230a      	movne	r3, #10
 8007f4c:	2100      	movs	r1, #0
 8007f4e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007f52:	6866      	ldr	r6, [r4, #4]
 8007f54:	60a6      	str	r6, [r4, #8]
 8007f56:	2e00      	cmp	r6, #0
 8007f58:	bfa2      	ittt	ge
 8007f5a:	6821      	ldrge	r1, [r4, #0]
 8007f5c:	f021 0104 	bicge.w	r1, r1, #4
 8007f60:	6021      	strge	r1, [r4, #0]
 8007f62:	b90d      	cbnz	r5, 8007f68 <_printf_i+0x118>
 8007f64:	2e00      	cmp	r6, #0
 8007f66:	d04d      	beq.n	8008004 <_printf_i+0x1b4>
 8007f68:	4616      	mov	r6, r2
 8007f6a:	fbb5 f1f3 	udiv	r1, r5, r3
 8007f6e:	fb03 5711 	mls	r7, r3, r1, r5
 8007f72:	5dc7      	ldrb	r7, [r0, r7]
 8007f74:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007f78:	462f      	mov	r7, r5
 8007f7a:	42bb      	cmp	r3, r7
 8007f7c:	460d      	mov	r5, r1
 8007f7e:	d9f4      	bls.n	8007f6a <_printf_i+0x11a>
 8007f80:	2b08      	cmp	r3, #8
 8007f82:	d10b      	bne.n	8007f9c <_printf_i+0x14c>
 8007f84:	6823      	ldr	r3, [r4, #0]
 8007f86:	07df      	lsls	r7, r3, #31
 8007f88:	d508      	bpl.n	8007f9c <_printf_i+0x14c>
 8007f8a:	6923      	ldr	r3, [r4, #16]
 8007f8c:	6861      	ldr	r1, [r4, #4]
 8007f8e:	4299      	cmp	r1, r3
 8007f90:	bfde      	ittt	le
 8007f92:	2330      	movle	r3, #48	; 0x30
 8007f94:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007f98:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 8007f9c:	1b92      	subs	r2, r2, r6
 8007f9e:	6122      	str	r2, [r4, #16]
 8007fa0:	f8cd a000 	str.w	sl, [sp]
 8007fa4:	464b      	mov	r3, r9
 8007fa6:	aa03      	add	r2, sp, #12
 8007fa8:	4621      	mov	r1, r4
 8007faa:	4640      	mov	r0, r8
 8007fac:	f7ff fee2 	bl	8007d74 <_printf_common>
 8007fb0:	3001      	adds	r0, #1
 8007fb2:	d14c      	bne.n	800804e <_printf_i+0x1fe>
 8007fb4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007fb8:	b004      	add	sp, #16
 8007fba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007fbe:	4835      	ldr	r0, [pc, #212]	; (8008094 <_printf_i+0x244>)
 8007fc0:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8007fc4:	6823      	ldr	r3, [r4, #0]
 8007fc6:	680e      	ldr	r6, [r1, #0]
 8007fc8:	061f      	lsls	r7, r3, #24
 8007fca:	f856 5b04 	ldr.w	r5, [r6], #4
 8007fce:	600e      	str	r6, [r1, #0]
 8007fd0:	d514      	bpl.n	8007ffc <_printf_i+0x1ac>
 8007fd2:	07d9      	lsls	r1, r3, #31
 8007fd4:	bf44      	itt	mi
 8007fd6:	f043 0320 	orrmi.w	r3, r3, #32
 8007fda:	6023      	strmi	r3, [r4, #0]
 8007fdc:	b91d      	cbnz	r5, 8007fe6 <_printf_i+0x196>
 8007fde:	6823      	ldr	r3, [r4, #0]
 8007fe0:	f023 0320 	bic.w	r3, r3, #32
 8007fe4:	6023      	str	r3, [r4, #0]
 8007fe6:	2310      	movs	r3, #16
 8007fe8:	e7b0      	b.n	8007f4c <_printf_i+0xfc>
 8007fea:	6823      	ldr	r3, [r4, #0]
 8007fec:	f043 0320 	orr.w	r3, r3, #32
 8007ff0:	6023      	str	r3, [r4, #0]
 8007ff2:	2378      	movs	r3, #120	; 0x78
 8007ff4:	4828      	ldr	r0, [pc, #160]	; (8008098 <_printf_i+0x248>)
 8007ff6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007ffa:	e7e3      	b.n	8007fc4 <_printf_i+0x174>
 8007ffc:	065e      	lsls	r6, r3, #25
 8007ffe:	bf48      	it	mi
 8008000:	b2ad      	uxthmi	r5, r5
 8008002:	e7e6      	b.n	8007fd2 <_printf_i+0x182>
 8008004:	4616      	mov	r6, r2
 8008006:	e7bb      	b.n	8007f80 <_printf_i+0x130>
 8008008:	680b      	ldr	r3, [r1, #0]
 800800a:	6826      	ldr	r6, [r4, #0]
 800800c:	6960      	ldr	r0, [r4, #20]
 800800e:	1d1d      	adds	r5, r3, #4
 8008010:	600d      	str	r5, [r1, #0]
 8008012:	0635      	lsls	r5, r6, #24
 8008014:	681b      	ldr	r3, [r3, #0]
 8008016:	d501      	bpl.n	800801c <_printf_i+0x1cc>
 8008018:	6018      	str	r0, [r3, #0]
 800801a:	e002      	b.n	8008022 <_printf_i+0x1d2>
 800801c:	0671      	lsls	r1, r6, #25
 800801e:	d5fb      	bpl.n	8008018 <_printf_i+0x1c8>
 8008020:	8018      	strh	r0, [r3, #0]
 8008022:	2300      	movs	r3, #0
 8008024:	6123      	str	r3, [r4, #16]
 8008026:	4616      	mov	r6, r2
 8008028:	e7ba      	b.n	8007fa0 <_printf_i+0x150>
 800802a:	680b      	ldr	r3, [r1, #0]
 800802c:	1d1a      	adds	r2, r3, #4
 800802e:	600a      	str	r2, [r1, #0]
 8008030:	681e      	ldr	r6, [r3, #0]
 8008032:	6862      	ldr	r2, [r4, #4]
 8008034:	2100      	movs	r1, #0
 8008036:	4630      	mov	r0, r6
 8008038:	f7f8 f8d2 	bl	80001e0 <memchr>
 800803c:	b108      	cbz	r0, 8008042 <_printf_i+0x1f2>
 800803e:	1b80      	subs	r0, r0, r6
 8008040:	6060      	str	r0, [r4, #4]
 8008042:	6863      	ldr	r3, [r4, #4]
 8008044:	6123      	str	r3, [r4, #16]
 8008046:	2300      	movs	r3, #0
 8008048:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800804c:	e7a8      	b.n	8007fa0 <_printf_i+0x150>
 800804e:	6923      	ldr	r3, [r4, #16]
 8008050:	4632      	mov	r2, r6
 8008052:	4649      	mov	r1, r9
 8008054:	4640      	mov	r0, r8
 8008056:	47d0      	blx	sl
 8008058:	3001      	adds	r0, #1
 800805a:	d0ab      	beq.n	8007fb4 <_printf_i+0x164>
 800805c:	6823      	ldr	r3, [r4, #0]
 800805e:	079b      	lsls	r3, r3, #30
 8008060:	d413      	bmi.n	800808a <_printf_i+0x23a>
 8008062:	68e0      	ldr	r0, [r4, #12]
 8008064:	9b03      	ldr	r3, [sp, #12]
 8008066:	4298      	cmp	r0, r3
 8008068:	bfb8      	it	lt
 800806a:	4618      	movlt	r0, r3
 800806c:	e7a4      	b.n	8007fb8 <_printf_i+0x168>
 800806e:	2301      	movs	r3, #1
 8008070:	4632      	mov	r2, r6
 8008072:	4649      	mov	r1, r9
 8008074:	4640      	mov	r0, r8
 8008076:	47d0      	blx	sl
 8008078:	3001      	adds	r0, #1
 800807a:	d09b      	beq.n	8007fb4 <_printf_i+0x164>
 800807c:	3501      	adds	r5, #1
 800807e:	68e3      	ldr	r3, [r4, #12]
 8008080:	9903      	ldr	r1, [sp, #12]
 8008082:	1a5b      	subs	r3, r3, r1
 8008084:	42ab      	cmp	r3, r5
 8008086:	dcf2      	bgt.n	800806e <_printf_i+0x21e>
 8008088:	e7eb      	b.n	8008062 <_printf_i+0x212>
 800808a:	2500      	movs	r5, #0
 800808c:	f104 0619 	add.w	r6, r4, #25
 8008090:	e7f5      	b.n	800807e <_printf_i+0x22e>
 8008092:	bf00      	nop
 8008094:	0800a5ba 	.word	0x0800a5ba
 8008098:	0800a5cb 	.word	0x0800a5cb

0800809c <siprintf>:
 800809c:	b40e      	push	{r1, r2, r3}
 800809e:	b500      	push	{lr}
 80080a0:	b09c      	sub	sp, #112	; 0x70
 80080a2:	ab1d      	add	r3, sp, #116	; 0x74
 80080a4:	9002      	str	r0, [sp, #8]
 80080a6:	9006      	str	r0, [sp, #24]
 80080a8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80080ac:	4809      	ldr	r0, [pc, #36]	; (80080d4 <siprintf+0x38>)
 80080ae:	9107      	str	r1, [sp, #28]
 80080b0:	9104      	str	r1, [sp, #16]
 80080b2:	4909      	ldr	r1, [pc, #36]	; (80080d8 <siprintf+0x3c>)
 80080b4:	f853 2b04 	ldr.w	r2, [r3], #4
 80080b8:	9105      	str	r1, [sp, #20]
 80080ba:	6800      	ldr	r0, [r0, #0]
 80080bc:	9301      	str	r3, [sp, #4]
 80080be:	a902      	add	r1, sp, #8
 80080c0:	f001 fb34 	bl	800972c <_svfiprintf_r>
 80080c4:	9b02      	ldr	r3, [sp, #8]
 80080c6:	2200      	movs	r2, #0
 80080c8:	701a      	strb	r2, [r3, #0]
 80080ca:	b01c      	add	sp, #112	; 0x70
 80080cc:	f85d eb04 	ldr.w	lr, [sp], #4
 80080d0:	b003      	add	sp, #12
 80080d2:	4770      	bx	lr
 80080d4:	2000000c 	.word	0x2000000c
 80080d8:	ffff0208 	.word	0xffff0208

080080dc <quorem>:
 80080dc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80080e0:	6903      	ldr	r3, [r0, #16]
 80080e2:	690c      	ldr	r4, [r1, #16]
 80080e4:	42a3      	cmp	r3, r4
 80080e6:	4607      	mov	r7, r0
 80080e8:	f2c0 8081 	blt.w	80081ee <quorem+0x112>
 80080ec:	3c01      	subs	r4, #1
 80080ee:	f101 0814 	add.w	r8, r1, #20
 80080f2:	f100 0514 	add.w	r5, r0, #20
 80080f6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80080fa:	9301      	str	r3, [sp, #4]
 80080fc:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8008100:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008104:	3301      	adds	r3, #1
 8008106:	429a      	cmp	r2, r3
 8008108:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800810c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8008110:	fbb2 f6f3 	udiv	r6, r2, r3
 8008114:	d331      	bcc.n	800817a <quorem+0x9e>
 8008116:	f04f 0e00 	mov.w	lr, #0
 800811a:	4640      	mov	r0, r8
 800811c:	46ac      	mov	ip, r5
 800811e:	46f2      	mov	sl, lr
 8008120:	f850 2b04 	ldr.w	r2, [r0], #4
 8008124:	b293      	uxth	r3, r2
 8008126:	fb06 e303 	mla	r3, r6, r3, lr
 800812a:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800812e:	b29b      	uxth	r3, r3
 8008130:	ebaa 0303 	sub.w	r3, sl, r3
 8008134:	0c12      	lsrs	r2, r2, #16
 8008136:	f8dc a000 	ldr.w	sl, [ip]
 800813a:	fb06 e202 	mla	r2, r6, r2, lr
 800813e:	fa13 f38a 	uxtah	r3, r3, sl
 8008142:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8008146:	fa1f fa82 	uxth.w	sl, r2
 800814a:	f8dc 2000 	ldr.w	r2, [ip]
 800814e:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8008152:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008156:	b29b      	uxth	r3, r3
 8008158:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800815c:	4581      	cmp	r9, r0
 800815e:	f84c 3b04 	str.w	r3, [ip], #4
 8008162:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8008166:	d2db      	bcs.n	8008120 <quorem+0x44>
 8008168:	f855 300b 	ldr.w	r3, [r5, fp]
 800816c:	b92b      	cbnz	r3, 800817a <quorem+0x9e>
 800816e:	9b01      	ldr	r3, [sp, #4]
 8008170:	3b04      	subs	r3, #4
 8008172:	429d      	cmp	r5, r3
 8008174:	461a      	mov	r2, r3
 8008176:	d32e      	bcc.n	80081d6 <quorem+0xfa>
 8008178:	613c      	str	r4, [r7, #16]
 800817a:	4638      	mov	r0, r7
 800817c:	f001 f8c0 	bl	8009300 <__mcmp>
 8008180:	2800      	cmp	r0, #0
 8008182:	db24      	blt.n	80081ce <quorem+0xf2>
 8008184:	3601      	adds	r6, #1
 8008186:	4628      	mov	r0, r5
 8008188:	f04f 0c00 	mov.w	ip, #0
 800818c:	f858 2b04 	ldr.w	r2, [r8], #4
 8008190:	f8d0 e000 	ldr.w	lr, [r0]
 8008194:	b293      	uxth	r3, r2
 8008196:	ebac 0303 	sub.w	r3, ip, r3
 800819a:	0c12      	lsrs	r2, r2, #16
 800819c:	fa13 f38e 	uxtah	r3, r3, lr
 80081a0:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80081a4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80081a8:	b29b      	uxth	r3, r3
 80081aa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80081ae:	45c1      	cmp	r9, r8
 80081b0:	f840 3b04 	str.w	r3, [r0], #4
 80081b4:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80081b8:	d2e8      	bcs.n	800818c <quorem+0xb0>
 80081ba:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80081be:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80081c2:	b922      	cbnz	r2, 80081ce <quorem+0xf2>
 80081c4:	3b04      	subs	r3, #4
 80081c6:	429d      	cmp	r5, r3
 80081c8:	461a      	mov	r2, r3
 80081ca:	d30a      	bcc.n	80081e2 <quorem+0x106>
 80081cc:	613c      	str	r4, [r7, #16]
 80081ce:	4630      	mov	r0, r6
 80081d0:	b003      	add	sp, #12
 80081d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80081d6:	6812      	ldr	r2, [r2, #0]
 80081d8:	3b04      	subs	r3, #4
 80081da:	2a00      	cmp	r2, #0
 80081dc:	d1cc      	bne.n	8008178 <quorem+0x9c>
 80081de:	3c01      	subs	r4, #1
 80081e0:	e7c7      	b.n	8008172 <quorem+0x96>
 80081e2:	6812      	ldr	r2, [r2, #0]
 80081e4:	3b04      	subs	r3, #4
 80081e6:	2a00      	cmp	r2, #0
 80081e8:	d1f0      	bne.n	80081cc <quorem+0xf0>
 80081ea:	3c01      	subs	r4, #1
 80081ec:	e7eb      	b.n	80081c6 <quorem+0xea>
 80081ee:	2000      	movs	r0, #0
 80081f0:	e7ee      	b.n	80081d0 <quorem+0xf4>
 80081f2:	0000      	movs	r0, r0
 80081f4:	0000      	movs	r0, r0
	...

080081f8 <_dtoa_r>:
 80081f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80081fc:	ed2d 8b02 	vpush	{d8}
 8008200:	ec57 6b10 	vmov	r6, r7, d0
 8008204:	b095      	sub	sp, #84	; 0x54
 8008206:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8008208:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800820c:	9105      	str	r1, [sp, #20]
 800820e:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8008212:	4604      	mov	r4, r0
 8008214:	9209      	str	r2, [sp, #36]	; 0x24
 8008216:	930f      	str	r3, [sp, #60]	; 0x3c
 8008218:	b975      	cbnz	r5, 8008238 <_dtoa_r+0x40>
 800821a:	2010      	movs	r0, #16
 800821c:	f000 fddc 	bl	8008dd8 <malloc>
 8008220:	4602      	mov	r2, r0
 8008222:	6260      	str	r0, [r4, #36]	; 0x24
 8008224:	b920      	cbnz	r0, 8008230 <_dtoa_r+0x38>
 8008226:	4bb2      	ldr	r3, [pc, #712]	; (80084f0 <_dtoa_r+0x2f8>)
 8008228:	21ea      	movs	r1, #234	; 0xea
 800822a:	48b2      	ldr	r0, [pc, #712]	; (80084f4 <_dtoa_r+0x2fc>)
 800822c:	f001 fb8e 	bl	800994c <__assert_func>
 8008230:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8008234:	6005      	str	r5, [r0, #0]
 8008236:	60c5      	str	r5, [r0, #12]
 8008238:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800823a:	6819      	ldr	r1, [r3, #0]
 800823c:	b151      	cbz	r1, 8008254 <_dtoa_r+0x5c>
 800823e:	685a      	ldr	r2, [r3, #4]
 8008240:	604a      	str	r2, [r1, #4]
 8008242:	2301      	movs	r3, #1
 8008244:	4093      	lsls	r3, r2
 8008246:	608b      	str	r3, [r1, #8]
 8008248:	4620      	mov	r0, r4
 800824a:	f000 fe1b 	bl	8008e84 <_Bfree>
 800824e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008250:	2200      	movs	r2, #0
 8008252:	601a      	str	r2, [r3, #0]
 8008254:	1e3b      	subs	r3, r7, #0
 8008256:	bfb9      	ittee	lt
 8008258:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800825c:	9303      	strlt	r3, [sp, #12]
 800825e:	2300      	movge	r3, #0
 8008260:	f8c8 3000 	strge.w	r3, [r8]
 8008264:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8008268:	4ba3      	ldr	r3, [pc, #652]	; (80084f8 <_dtoa_r+0x300>)
 800826a:	bfbc      	itt	lt
 800826c:	2201      	movlt	r2, #1
 800826e:	f8c8 2000 	strlt.w	r2, [r8]
 8008272:	ea33 0309 	bics.w	r3, r3, r9
 8008276:	d11b      	bne.n	80082b0 <_dtoa_r+0xb8>
 8008278:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800827a:	f242 730f 	movw	r3, #9999	; 0x270f
 800827e:	6013      	str	r3, [r2, #0]
 8008280:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008284:	4333      	orrs	r3, r6
 8008286:	f000 857a 	beq.w	8008d7e <_dtoa_r+0xb86>
 800828a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800828c:	b963      	cbnz	r3, 80082a8 <_dtoa_r+0xb0>
 800828e:	4b9b      	ldr	r3, [pc, #620]	; (80084fc <_dtoa_r+0x304>)
 8008290:	e024      	b.n	80082dc <_dtoa_r+0xe4>
 8008292:	4b9b      	ldr	r3, [pc, #620]	; (8008500 <_dtoa_r+0x308>)
 8008294:	9300      	str	r3, [sp, #0]
 8008296:	3308      	adds	r3, #8
 8008298:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800829a:	6013      	str	r3, [r2, #0]
 800829c:	9800      	ldr	r0, [sp, #0]
 800829e:	b015      	add	sp, #84	; 0x54
 80082a0:	ecbd 8b02 	vpop	{d8}
 80082a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80082a8:	4b94      	ldr	r3, [pc, #592]	; (80084fc <_dtoa_r+0x304>)
 80082aa:	9300      	str	r3, [sp, #0]
 80082ac:	3303      	adds	r3, #3
 80082ae:	e7f3      	b.n	8008298 <_dtoa_r+0xa0>
 80082b0:	ed9d 7b02 	vldr	d7, [sp, #8]
 80082b4:	2200      	movs	r2, #0
 80082b6:	ec51 0b17 	vmov	r0, r1, d7
 80082ba:	2300      	movs	r3, #0
 80082bc:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 80082c0:	f7f8 fc02 	bl	8000ac8 <__aeabi_dcmpeq>
 80082c4:	4680      	mov	r8, r0
 80082c6:	b158      	cbz	r0, 80082e0 <_dtoa_r+0xe8>
 80082c8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80082ca:	2301      	movs	r3, #1
 80082cc:	6013      	str	r3, [r2, #0]
 80082ce:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80082d0:	2b00      	cmp	r3, #0
 80082d2:	f000 8551 	beq.w	8008d78 <_dtoa_r+0xb80>
 80082d6:	488b      	ldr	r0, [pc, #556]	; (8008504 <_dtoa_r+0x30c>)
 80082d8:	6018      	str	r0, [r3, #0]
 80082da:	1e43      	subs	r3, r0, #1
 80082dc:	9300      	str	r3, [sp, #0]
 80082de:	e7dd      	b.n	800829c <_dtoa_r+0xa4>
 80082e0:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 80082e4:	aa12      	add	r2, sp, #72	; 0x48
 80082e6:	a913      	add	r1, sp, #76	; 0x4c
 80082e8:	4620      	mov	r0, r4
 80082ea:	f001 f8ad 	bl	8009448 <__d2b>
 80082ee:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80082f2:	4683      	mov	fp, r0
 80082f4:	2d00      	cmp	r5, #0
 80082f6:	d07c      	beq.n	80083f2 <_dtoa_r+0x1fa>
 80082f8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80082fa:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 80082fe:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008302:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 8008306:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800830a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800830e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8008312:	4b7d      	ldr	r3, [pc, #500]	; (8008508 <_dtoa_r+0x310>)
 8008314:	2200      	movs	r2, #0
 8008316:	4630      	mov	r0, r6
 8008318:	4639      	mov	r1, r7
 800831a:	f7f7 ffb5 	bl	8000288 <__aeabi_dsub>
 800831e:	a36e      	add	r3, pc, #440	; (adr r3, 80084d8 <_dtoa_r+0x2e0>)
 8008320:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008324:	f7f8 f968 	bl	80005f8 <__aeabi_dmul>
 8008328:	a36d      	add	r3, pc, #436	; (adr r3, 80084e0 <_dtoa_r+0x2e8>)
 800832a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800832e:	f7f7 ffad 	bl	800028c <__adddf3>
 8008332:	4606      	mov	r6, r0
 8008334:	4628      	mov	r0, r5
 8008336:	460f      	mov	r7, r1
 8008338:	f7f8 f8f4 	bl	8000524 <__aeabi_i2d>
 800833c:	a36a      	add	r3, pc, #424	; (adr r3, 80084e8 <_dtoa_r+0x2f0>)
 800833e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008342:	f7f8 f959 	bl	80005f8 <__aeabi_dmul>
 8008346:	4602      	mov	r2, r0
 8008348:	460b      	mov	r3, r1
 800834a:	4630      	mov	r0, r6
 800834c:	4639      	mov	r1, r7
 800834e:	f7f7 ff9d 	bl	800028c <__adddf3>
 8008352:	4606      	mov	r6, r0
 8008354:	460f      	mov	r7, r1
 8008356:	f7f8 fbff 	bl	8000b58 <__aeabi_d2iz>
 800835a:	2200      	movs	r2, #0
 800835c:	4682      	mov	sl, r0
 800835e:	2300      	movs	r3, #0
 8008360:	4630      	mov	r0, r6
 8008362:	4639      	mov	r1, r7
 8008364:	f7f8 fbba 	bl	8000adc <__aeabi_dcmplt>
 8008368:	b148      	cbz	r0, 800837e <_dtoa_r+0x186>
 800836a:	4650      	mov	r0, sl
 800836c:	f7f8 f8da 	bl	8000524 <__aeabi_i2d>
 8008370:	4632      	mov	r2, r6
 8008372:	463b      	mov	r3, r7
 8008374:	f7f8 fba8 	bl	8000ac8 <__aeabi_dcmpeq>
 8008378:	b908      	cbnz	r0, 800837e <_dtoa_r+0x186>
 800837a:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800837e:	f1ba 0f16 	cmp.w	sl, #22
 8008382:	d854      	bhi.n	800842e <_dtoa_r+0x236>
 8008384:	4b61      	ldr	r3, [pc, #388]	; (800850c <_dtoa_r+0x314>)
 8008386:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800838a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800838e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8008392:	f7f8 fba3 	bl	8000adc <__aeabi_dcmplt>
 8008396:	2800      	cmp	r0, #0
 8008398:	d04b      	beq.n	8008432 <_dtoa_r+0x23a>
 800839a:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800839e:	2300      	movs	r3, #0
 80083a0:	930e      	str	r3, [sp, #56]	; 0x38
 80083a2:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80083a4:	1b5d      	subs	r5, r3, r5
 80083a6:	1e6b      	subs	r3, r5, #1
 80083a8:	9304      	str	r3, [sp, #16]
 80083aa:	bf43      	ittte	mi
 80083ac:	2300      	movmi	r3, #0
 80083ae:	f1c5 0801 	rsbmi	r8, r5, #1
 80083b2:	9304      	strmi	r3, [sp, #16]
 80083b4:	f04f 0800 	movpl.w	r8, #0
 80083b8:	f1ba 0f00 	cmp.w	sl, #0
 80083bc:	db3b      	blt.n	8008436 <_dtoa_r+0x23e>
 80083be:	9b04      	ldr	r3, [sp, #16]
 80083c0:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 80083c4:	4453      	add	r3, sl
 80083c6:	9304      	str	r3, [sp, #16]
 80083c8:	2300      	movs	r3, #0
 80083ca:	9306      	str	r3, [sp, #24]
 80083cc:	9b05      	ldr	r3, [sp, #20]
 80083ce:	2b09      	cmp	r3, #9
 80083d0:	d869      	bhi.n	80084a6 <_dtoa_r+0x2ae>
 80083d2:	2b05      	cmp	r3, #5
 80083d4:	bfc4      	itt	gt
 80083d6:	3b04      	subgt	r3, #4
 80083d8:	9305      	strgt	r3, [sp, #20]
 80083da:	9b05      	ldr	r3, [sp, #20]
 80083dc:	f1a3 0302 	sub.w	r3, r3, #2
 80083e0:	bfcc      	ite	gt
 80083e2:	2500      	movgt	r5, #0
 80083e4:	2501      	movle	r5, #1
 80083e6:	2b03      	cmp	r3, #3
 80083e8:	d869      	bhi.n	80084be <_dtoa_r+0x2c6>
 80083ea:	e8df f003 	tbb	[pc, r3]
 80083ee:	4e2c      	.short	0x4e2c
 80083f0:	5a4c      	.short	0x5a4c
 80083f2:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 80083f6:	441d      	add	r5, r3
 80083f8:	f205 4332 	addw	r3, r5, #1074	; 0x432
 80083fc:	2b20      	cmp	r3, #32
 80083fe:	bfc1      	itttt	gt
 8008400:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8008404:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8008408:	fa09 f303 	lslgt.w	r3, r9, r3
 800840c:	fa26 f000 	lsrgt.w	r0, r6, r0
 8008410:	bfda      	itte	le
 8008412:	f1c3 0320 	rsble	r3, r3, #32
 8008416:	fa06 f003 	lslle.w	r0, r6, r3
 800841a:	4318      	orrgt	r0, r3
 800841c:	f7f8 f872 	bl	8000504 <__aeabi_ui2d>
 8008420:	2301      	movs	r3, #1
 8008422:	4606      	mov	r6, r0
 8008424:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8008428:	3d01      	subs	r5, #1
 800842a:	9310      	str	r3, [sp, #64]	; 0x40
 800842c:	e771      	b.n	8008312 <_dtoa_r+0x11a>
 800842e:	2301      	movs	r3, #1
 8008430:	e7b6      	b.n	80083a0 <_dtoa_r+0x1a8>
 8008432:	900e      	str	r0, [sp, #56]	; 0x38
 8008434:	e7b5      	b.n	80083a2 <_dtoa_r+0x1aa>
 8008436:	f1ca 0300 	rsb	r3, sl, #0
 800843a:	9306      	str	r3, [sp, #24]
 800843c:	2300      	movs	r3, #0
 800843e:	eba8 080a 	sub.w	r8, r8, sl
 8008442:	930d      	str	r3, [sp, #52]	; 0x34
 8008444:	e7c2      	b.n	80083cc <_dtoa_r+0x1d4>
 8008446:	2300      	movs	r3, #0
 8008448:	9308      	str	r3, [sp, #32]
 800844a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800844c:	2b00      	cmp	r3, #0
 800844e:	dc39      	bgt.n	80084c4 <_dtoa_r+0x2cc>
 8008450:	f04f 0901 	mov.w	r9, #1
 8008454:	f8cd 9004 	str.w	r9, [sp, #4]
 8008458:	464b      	mov	r3, r9
 800845a:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 800845e:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8008460:	2200      	movs	r2, #0
 8008462:	6042      	str	r2, [r0, #4]
 8008464:	2204      	movs	r2, #4
 8008466:	f102 0614 	add.w	r6, r2, #20
 800846a:	429e      	cmp	r6, r3
 800846c:	6841      	ldr	r1, [r0, #4]
 800846e:	d92f      	bls.n	80084d0 <_dtoa_r+0x2d8>
 8008470:	4620      	mov	r0, r4
 8008472:	f000 fcc7 	bl	8008e04 <_Balloc>
 8008476:	9000      	str	r0, [sp, #0]
 8008478:	2800      	cmp	r0, #0
 800847a:	d14b      	bne.n	8008514 <_dtoa_r+0x31c>
 800847c:	4b24      	ldr	r3, [pc, #144]	; (8008510 <_dtoa_r+0x318>)
 800847e:	4602      	mov	r2, r0
 8008480:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8008484:	e6d1      	b.n	800822a <_dtoa_r+0x32>
 8008486:	2301      	movs	r3, #1
 8008488:	e7de      	b.n	8008448 <_dtoa_r+0x250>
 800848a:	2300      	movs	r3, #0
 800848c:	9308      	str	r3, [sp, #32]
 800848e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008490:	eb0a 0903 	add.w	r9, sl, r3
 8008494:	f109 0301 	add.w	r3, r9, #1
 8008498:	2b01      	cmp	r3, #1
 800849a:	9301      	str	r3, [sp, #4]
 800849c:	bfb8      	it	lt
 800849e:	2301      	movlt	r3, #1
 80084a0:	e7dd      	b.n	800845e <_dtoa_r+0x266>
 80084a2:	2301      	movs	r3, #1
 80084a4:	e7f2      	b.n	800848c <_dtoa_r+0x294>
 80084a6:	2501      	movs	r5, #1
 80084a8:	2300      	movs	r3, #0
 80084aa:	9305      	str	r3, [sp, #20]
 80084ac:	9508      	str	r5, [sp, #32]
 80084ae:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
 80084b2:	2200      	movs	r2, #0
 80084b4:	f8cd 9004 	str.w	r9, [sp, #4]
 80084b8:	2312      	movs	r3, #18
 80084ba:	9209      	str	r2, [sp, #36]	; 0x24
 80084bc:	e7cf      	b.n	800845e <_dtoa_r+0x266>
 80084be:	2301      	movs	r3, #1
 80084c0:	9308      	str	r3, [sp, #32]
 80084c2:	e7f4      	b.n	80084ae <_dtoa_r+0x2b6>
 80084c4:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 80084c8:	f8cd 9004 	str.w	r9, [sp, #4]
 80084cc:	464b      	mov	r3, r9
 80084ce:	e7c6      	b.n	800845e <_dtoa_r+0x266>
 80084d0:	3101      	adds	r1, #1
 80084d2:	6041      	str	r1, [r0, #4]
 80084d4:	0052      	lsls	r2, r2, #1
 80084d6:	e7c6      	b.n	8008466 <_dtoa_r+0x26e>
 80084d8:	636f4361 	.word	0x636f4361
 80084dc:	3fd287a7 	.word	0x3fd287a7
 80084e0:	8b60c8b3 	.word	0x8b60c8b3
 80084e4:	3fc68a28 	.word	0x3fc68a28
 80084e8:	509f79fb 	.word	0x509f79fb
 80084ec:	3fd34413 	.word	0x3fd34413
 80084f0:	0800a5e9 	.word	0x0800a5e9
 80084f4:	0800a600 	.word	0x0800a600
 80084f8:	7ff00000 	.word	0x7ff00000
 80084fc:	0800a5e5 	.word	0x0800a5e5
 8008500:	0800a5dc 	.word	0x0800a5dc
 8008504:	0800a5b9 	.word	0x0800a5b9
 8008508:	3ff80000 	.word	0x3ff80000
 800850c:	0800a6f8 	.word	0x0800a6f8
 8008510:	0800a65f 	.word	0x0800a65f
 8008514:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008516:	9a00      	ldr	r2, [sp, #0]
 8008518:	601a      	str	r2, [r3, #0]
 800851a:	9b01      	ldr	r3, [sp, #4]
 800851c:	2b0e      	cmp	r3, #14
 800851e:	f200 80ad 	bhi.w	800867c <_dtoa_r+0x484>
 8008522:	2d00      	cmp	r5, #0
 8008524:	f000 80aa 	beq.w	800867c <_dtoa_r+0x484>
 8008528:	f1ba 0f00 	cmp.w	sl, #0
 800852c:	dd36      	ble.n	800859c <_dtoa_r+0x3a4>
 800852e:	4ac3      	ldr	r2, [pc, #780]	; (800883c <_dtoa_r+0x644>)
 8008530:	f00a 030f 	and.w	r3, sl, #15
 8008534:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8008538:	ed93 7b00 	vldr	d7, [r3]
 800853c:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8008540:	ea4f 172a 	mov.w	r7, sl, asr #4
 8008544:	eeb0 8a47 	vmov.f32	s16, s14
 8008548:	eef0 8a67 	vmov.f32	s17, s15
 800854c:	d016      	beq.n	800857c <_dtoa_r+0x384>
 800854e:	4bbc      	ldr	r3, [pc, #752]	; (8008840 <_dtoa_r+0x648>)
 8008550:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8008554:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8008558:	f7f8 f978 	bl	800084c <__aeabi_ddiv>
 800855c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008560:	f007 070f 	and.w	r7, r7, #15
 8008564:	2503      	movs	r5, #3
 8008566:	4eb6      	ldr	r6, [pc, #728]	; (8008840 <_dtoa_r+0x648>)
 8008568:	b957      	cbnz	r7, 8008580 <_dtoa_r+0x388>
 800856a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800856e:	ec53 2b18 	vmov	r2, r3, d8
 8008572:	f7f8 f96b 	bl	800084c <__aeabi_ddiv>
 8008576:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800857a:	e029      	b.n	80085d0 <_dtoa_r+0x3d8>
 800857c:	2502      	movs	r5, #2
 800857e:	e7f2      	b.n	8008566 <_dtoa_r+0x36e>
 8008580:	07f9      	lsls	r1, r7, #31
 8008582:	d508      	bpl.n	8008596 <_dtoa_r+0x39e>
 8008584:	ec51 0b18 	vmov	r0, r1, d8
 8008588:	e9d6 2300 	ldrd	r2, r3, [r6]
 800858c:	f7f8 f834 	bl	80005f8 <__aeabi_dmul>
 8008590:	ec41 0b18 	vmov	d8, r0, r1
 8008594:	3501      	adds	r5, #1
 8008596:	107f      	asrs	r7, r7, #1
 8008598:	3608      	adds	r6, #8
 800859a:	e7e5      	b.n	8008568 <_dtoa_r+0x370>
 800859c:	f000 80a6 	beq.w	80086ec <_dtoa_r+0x4f4>
 80085a0:	f1ca 0600 	rsb	r6, sl, #0
 80085a4:	4ba5      	ldr	r3, [pc, #660]	; (800883c <_dtoa_r+0x644>)
 80085a6:	4fa6      	ldr	r7, [pc, #664]	; (8008840 <_dtoa_r+0x648>)
 80085a8:	f006 020f 	and.w	r2, r6, #15
 80085ac:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80085b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085b4:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80085b8:	f7f8 f81e 	bl	80005f8 <__aeabi_dmul>
 80085bc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80085c0:	1136      	asrs	r6, r6, #4
 80085c2:	2300      	movs	r3, #0
 80085c4:	2502      	movs	r5, #2
 80085c6:	2e00      	cmp	r6, #0
 80085c8:	f040 8085 	bne.w	80086d6 <_dtoa_r+0x4de>
 80085cc:	2b00      	cmp	r3, #0
 80085ce:	d1d2      	bne.n	8008576 <_dtoa_r+0x37e>
 80085d0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80085d2:	2b00      	cmp	r3, #0
 80085d4:	f000 808c 	beq.w	80086f0 <_dtoa_r+0x4f8>
 80085d8:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80085dc:	4b99      	ldr	r3, [pc, #612]	; (8008844 <_dtoa_r+0x64c>)
 80085de:	2200      	movs	r2, #0
 80085e0:	4630      	mov	r0, r6
 80085e2:	4639      	mov	r1, r7
 80085e4:	f7f8 fa7a 	bl	8000adc <__aeabi_dcmplt>
 80085e8:	2800      	cmp	r0, #0
 80085ea:	f000 8081 	beq.w	80086f0 <_dtoa_r+0x4f8>
 80085ee:	9b01      	ldr	r3, [sp, #4]
 80085f0:	2b00      	cmp	r3, #0
 80085f2:	d07d      	beq.n	80086f0 <_dtoa_r+0x4f8>
 80085f4:	f1b9 0f00 	cmp.w	r9, #0
 80085f8:	dd3c      	ble.n	8008674 <_dtoa_r+0x47c>
 80085fa:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 80085fe:	9307      	str	r3, [sp, #28]
 8008600:	2200      	movs	r2, #0
 8008602:	4b91      	ldr	r3, [pc, #580]	; (8008848 <_dtoa_r+0x650>)
 8008604:	4630      	mov	r0, r6
 8008606:	4639      	mov	r1, r7
 8008608:	f7f7 fff6 	bl	80005f8 <__aeabi_dmul>
 800860c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008610:	3501      	adds	r5, #1
 8008612:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 8008616:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800861a:	4628      	mov	r0, r5
 800861c:	f7f7 ff82 	bl	8000524 <__aeabi_i2d>
 8008620:	4632      	mov	r2, r6
 8008622:	463b      	mov	r3, r7
 8008624:	f7f7 ffe8 	bl	80005f8 <__aeabi_dmul>
 8008628:	4b88      	ldr	r3, [pc, #544]	; (800884c <_dtoa_r+0x654>)
 800862a:	2200      	movs	r2, #0
 800862c:	f7f7 fe2e 	bl	800028c <__adddf3>
 8008630:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8008634:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008638:	9303      	str	r3, [sp, #12]
 800863a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800863c:	2b00      	cmp	r3, #0
 800863e:	d15c      	bne.n	80086fa <_dtoa_r+0x502>
 8008640:	4b83      	ldr	r3, [pc, #524]	; (8008850 <_dtoa_r+0x658>)
 8008642:	2200      	movs	r2, #0
 8008644:	4630      	mov	r0, r6
 8008646:	4639      	mov	r1, r7
 8008648:	f7f7 fe1e 	bl	8000288 <__aeabi_dsub>
 800864c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008650:	4606      	mov	r6, r0
 8008652:	460f      	mov	r7, r1
 8008654:	f7f8 fa60 	bl	8000b18 <__aeabi_dcmpgt>
 8008658:	2800      	cmp	r0, #0
 800865a:	f040 8296 	bne.w	8008b8a <_dtoa_r+0x992>
 800865e:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8008662:	4630      	mov	r0, r6
 8008664:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008668:	4639      	mov	r1, r7
 800866a:	f7f8 fa37 	bl	8000adc <__aeabi_dcmplt>
 800866e:	2800      	cmp	r0, #0
 8008670:	f040 8288 	bne.w	8008b84 <_dtoa_r+0x98c>
 8008674:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8008678:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800867c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800867e:	2b00      	cmp	r3, #0
 8008680:	f2c0 8158 	blt.w	8008934 <_dtoa_r+0x73c>
 8008684:	f1ba 0f0e 	cmp.w	sl, #14
 8008688:	f300 8154 	bgt.w	8008934 <_dtoa_r+0x73c>
 800868c:	4b6b      	ldr	r3, [pc, #428]	; (800883c <_dtoa_r+0x644>)
 800868e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8008692:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008696:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008698:	2b00      	cmp	r3, #0
 800869a:	f280 80e3 	bge.w	8008864 <_dtoa_r+0x66c>
 800869e:	9b01      	ldr	r3, [sp, #4]
 80086a0:	2b00      	cmp	r3, #0
 80086a2:	f300 80df 	bgt.w	8008864 <_dtoa_r+0x66c>
 80086a6:	f040 826d 	bne.w	8008b84 <_dtoa_r+0x98c>
 80086aa:	4b69      	ldr	r3, [pc, #420]	; (8008850 <_dtoa_r+0x658>)
 80086ac:	2200      	movs	r2, #0
 80086ae:	4640      	mov	r0, r8
 80086b0:	4649      	mov	r1, r9
 80086b2:	f7f7 ffa1 	bl	80005f8 <__aeabi_dmul>
 80086b6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80086ba:	f7f8 fa23 	bl	8000b04 <__aeabi_dcmpge>
 80086be:	9e01      	ldr	r6, [sp, #4]
 80086c0:	4637      	mov	r7, r6
 80086c2:	2800      	cmp	r0, #0
 80086c4:	f040 8243 	bne.w	8008b4e <_dtoa_r+0x956>
 80086c8:	9d00      	ldr	r5, [sp, #0]
 80086ca:	2331      	movs	r3, #49	; 0x31
 80086cc:	f805 3b01 	strb.w	r3, [r5], #1
 80086d0:	f10a 0a01 	add.w	sl, sl, #1
 80086d4:	e23f      	b.n	8008b56 <_dtoa_r+0x95e>
 80086d6:	07f2      	lsls	r2, r6, #31
 80086d8:	d505      	bpl.n	80086e6 <_dtoa_r+0x4ee>
 80086da:	e9d7 2300 	ldrd	r2, r3, [r7]
 80086de:	f7f7 ff8b 	bl	80005f8 <__aeabi_dmul>
 80086e2:	3501      	adds	r5, #1
 80086e4:	2301      	movs	r3, #1
 80086e6:	1076      	asrs	r6, r6, #1
 80086e8:	3708      	adds	r7, #8
 80086ea:	e76c      	b.n	80085c6 <_dtoa_r+0x3ce>
 80086ec:	2502      	movs	r5, #2
 80086ee:	e76f      	b.n	80085d0 <_dtoa_r+0x3d8>
 80086f0:	9b01      	ldr	r3, [sp, #4]
 80086f2:	f8cd a01c 	str.w	sl, [sp, #28]
 80086f6:	930c      	str	r3, [sp, #48]	; 0x30
 80086f8:	e78d      	b.n	8008616 <_dtoa_r+0x41e>
 80086fa:	9900      	ldr	r1, [sp, #0]
 80086fc:	980c      	ldr	r0, [sp, #48]	; 0x30
 80086fe:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008700:	4b4e      	ldr	r3, [pc, #312]	; (800883c <_dtoa_r+0x644>)
 8008702:	ed9d 7b02 	vldr	d7, [sp, #8]
 8008706:	4401      	add	r1, r0
 8008708:	9102      	str	r1, [sp, #8]
 800870a:	9908      	ldr	r1, [sp, #32]
 800870c:	eeb0 8a47 	vmov.f32	s16, s14
 8008710:	eef0 8a67 	vmov.f32	s17, s15
 8008714:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008718:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800871c:	2900      	cmp	r1, #0
 800871e:	d045      	beq.n	80087ac <_dtoa_r+0x5b4>
 8008720:	494c      	ldr	r1, [pc, #304]	; (8008854 <_dtoa_r+0x65c>)
 8008722:	2000      	movs	r0, #0
 8008724:	f7f8 f892 	bl	800084c <__aeabi_ddiv>
 8008728:	ec53 2b18 	vmov	r2, r3, d8
 800872c:	f7f7 fdac 	bl	8000288 <__aeabi_dsub>
 8008730:	9d00      	ldr	r5, [sp, #0]
 8008732:	ec41 0b18 	vmov	d8, r0, r1
 8008736:	4639      	mov	r1, r7
 8008738:	4630      	mov	r0, r6
 800873a:	f7f8 fa0d 	bl	8000b58 <__aeabi_d2iz>
 800873e:	900c      	str	r0, [sp, #48]	; 0x30
 8008740:	f7f7 fef0 	bl	8000524 <__aeabi_i2d>
 8008744:	4602      	mov	r2, r0
 8008746:	460b      	mov	r3, r1
 8008748:	4630      	mov	r0, r6
 800874a:	4639      	mov	r1, r7
 800874c:	f7f7 fd9c 	bl	8000288 <__aeabi_dsub>
 8008750:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008752:	3330      	adds	r3, #48	; 0x30
 8008754:	f805 3b01 	strb.w	r3, [r5], #1
 8008758:	ec53 2b18 	vmov	r2, r3, d8
 800875c:	4606      	mov	r6, r0
 800875e:	460f      	mov	r7, r1
 8008760:	f7f8 f9bc 	bl	8000adc <__aeabi_dcmplt>
 8008764:	2800      	cmp	r0, #0
 8008766:	d165      	bne.n	8008834 <_dtoa_r+0x63c>
 8008768:	4632      	mov	r2, r6
 800876a:	463b      	mov	r3, r7
 800876c:	4935      	ldr	r1, [pc, #212]	; (8008844 <_dtoa_r+0x64c>)
 800876e:	2000      	movs	r0, #0
 8008770:	f7f7 fd8a 	bl	8000288 <__aeabi_dsub>
 8008774:	ec53 2b18 	vmov	r2, r3, d8
 8008778:	f7f8 f9b0 	bl	8000adc <__aeabi_dcmplt>
 800877c:	2800      	cmp	r0, #0
 800877e:	f040 80b9 	bne.w	80088f4 <_dtoa_r+0x6fc>
 8008782:	9b02      	ldr	r3, [sp, #8]
 8008784:	429d      	cmp	r5, r3
 8008786:	f43f af75 	beq.w	8008674 <_dtoa_r+0x47c>
 800878a:	4b2f      	ldr	r3, [pc, #188]	; (8008848 <_dtoa_r+0x650>)
 800878c:	ec51 0b18 	vmov	r0, r1, d8
 8008790:	2200      	movs	r2, #0
 8008792:	f7f7 ff31 	bl	80005f8 <__aeabi_dmul>
 8008796:	4b2c      	ldr	r3, [pc, #176]	; (8008848 <_dtoa_r+0x650>)
 8008798:	ec41 0b18 	vmov	d8, r0, r1
 800879c:	2200      	movs	r2, #0
 800879e:	4630      	mov	r0, r6
 80087a0:	4639      	mov	r1, r7
 80087a2:	f7f7 ff29 	bl	80005f8 <__aeabi_dmul>
 80087a6:	4606      	mov	r6, r0
 80087a8:	460f      	mov	r7, r1
 80087aa:	e7c4      	b.n	8008736 <_dtoa_r+0x53e>
 80087ac:	ec51 0b17 	vmov	r0, r1, d7
 80087b0:	f7f7 ff22 	bl	80005f8 <__aeabi_dmul>
 80087b4:	9b02      	ldr	r3, [sp, #8]
 80087b6:	9d00      	ldr	r5, [sp, #0]
 80087b8:	930c      	str	r3, [sp, #48]	; 0x30
 80087ba:	ec41 0b18 	vmov	d8, r0, r1
 80087be:	4639      	mov	r1, r7
 80087c0:	4630      	mov	r0, r6
 80087c2:	f7f8 f9c9 	bl	8000b58 <__aeabi_d2iz>
 80087c6:	9011      	str	r0, [sp, #68]	; 0x44
 80087c8:	f7f7 feac 	bl	8000524 <__aeabi_i2d>
 80087cc:	4602      	mov	r2, r0
 80087ce:	460b      	mov	r3, r1
 80087d0:	4630      	mov	r0, r6
 80087d2:	4639      	mov	r1, r7
 80087d4:	f7f7 fd58 	bl	8000288 <__aeabi_dsub>
 80087d8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80087da:	3330      	adds	r3, #48	; 0x30
 80087dc:	f805 3b01 	strb.w	r3, [r5], #1
 80087e0:	9b02      	ldr	r3, [sp, #8]
 80087e2:	429d      	cmp	r5, r3
 80087e4:	4606      	mov	r6, r0
 80087e6:	460f      	mov	r7, r1
 80087e8:	f04f 0200 	mov.w	r2, #0
 80087ec:	d134      	bne.n	8008858 <_dtoa_r+0x660>
 80087ee:	4b19      	ldr	r3, [pc, #100]	; (8008854 <_dtoa_r+0x65c>)
 80087f0:	ec51 0b18 	vmov	r0, r1, d8
 80087f4:	f7f7 fd4a 	bl	800028c <__adddf3>
 80087f8:	4602      	mov	r2, r0
 80087fa:	460b      	mov	r3, r1
 80087fc:	4630      	mov	r0, r6
 80087fe:	4639      	mov	r1, r7
 8008800:	f7f8 f98a 	bl	8000b18 <__aeabi_dcmpgt>
 8008804:	2800      	cmp	r0, #0
 8008806:	d175      	bne.n	80088f4 <_dtoa_r+0x6fc>
 8008808:	ec53 2b18 	vmov	r2, r3, d8
 800880c:	4911      	ldr	r1, [pc, #68]	; (8008854 <_dtoa_r+0x65c>)
 800880e:	2000      	movs	r0, #0
 8008810:	f7f7 fd3a 	bl	8000288 <__aeabi_dsub>
 8008814:	4602      	mov	r2, r0
 8008816:	460b      	mov	r3, r1
 8008818:	4630      	mov	r0, r6
 800881a:	4639      	mov	r1, r7
 800881c:	f7f8 f95e 	bl	8000adc <__aeabi_dcmplt>
 8008820:	2800      	cmp	r0, #0
 8008822:	f43f af27 	beq.w	8008674 <_dtoa_r+0x47c>
 8008826:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008828:	1e6b      	subs	r3, r5, #1
 800882a:	930c      	str	r3, [sp, #48]	; 0x30
 800882c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8008830:	2b30      	cmp	r3, #48	; 0x30
 8008832:	d0f8      	beq.n	8008826 <_dtoa_r+0x62e>
 8008834:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8008838:	e04a      	b.n	80088d0 <_dtoa_r+0x6d8>
 800883a:	bf00      	nop
 800883c:	0800a6f8 	.word	0x0800a6f8
 8008840:	0800a6d0 	.word	0x0800a6d0
 8008844:	3ff00000 	.word	0x3ff00000
 8008848:	40240000 	.word	0x40240000
 800884c:	401c0000 	.word	0x401c0000
 8008850:	40140000 	.word	0x40140000
 8008854:	3fe00000 	.word	0x3fe00000
 8008858:	4baf      	ldr	r3, [pc, #700]	; (8008b18 <_dtoa_r+0x920>)
 800885a:	f7f7 fecd 	bl	80005f8 <__aeabi_dmul>
 800885e:	4606      	mov	r6, r0
 8008860:	460f      	mov	r7, r1
 8008862:	e7ac      	b.n	80087be <_dtoa_r+0x5c6>
 8008864:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8008868:	9d00      	ldr	r5, [sp, #0]
 800886a:	4642      	mov	r2, r8
 800886c:	464b      	mov	r3, r9
 800886e:	4630      	mov	r0, r6
 8008870:	4639      	mov	r1, r7
 8008872:	f7f7 ffeb 	bl	800084c <__aeabi_ddiv>
 8008876:	f7f8 f96f 	bl	8000b58 <__aeabi_d2iz>
 800887a:	9002      	str	r0, [sp, #8]
 800887c:	f7f7 fe52 	bl	8000524 <__aeabi_i2d>
 8008880:	4642      	mov	r2, r8
 8008882:	464b      	mov	r3, r9
 8008884:	f7f7 feb8 	bl	80005f8 <__aeabi_dmul>
 8008888:	4602      	mov	r2, r0
 800888a:	460b      	mov	r3, r1
 800888c:	4630      	mov	r0, r6
 800888e:	4639      	mov	r1, r7
 8008890:	f7f7 fcfa 	bl	8000288 <__aeabi_dsub>
 8008894:	9e02      	ldr	r6, [sp, #8]
 8008896:	9f01      	ldr	r7, [sp, #4]
 8008898:	3630      	adds	r6, #48	; 0x30
 800889a:	f805 6b01 	strb.w	r6, [r5], #1
 800889e:	9e00      	ldr	r6, [sp, #0]
 80088a0:	1bae      	subs	r6, r5, r6
 80088a2:	42b7      	cmp	r7, r6
 80088a4:	4602      	mov	r2, r0
 80088a6:	460b      	mov	r3, r1
 80088a8:	d137      	bne.n	800891a <_dtoa_r+0x722>
 80088aa:	f7f7 fcef 	bl	800028c <__adddf3>
 80088ae:	4642      	mov	r2, r8
 80088b0:	464b      	mov	r3, r9
 80088b2:	4606      	mov	r6, r0
 80088b4:	460f      	mov	r7, r1
 80088b6:	f7f8 f92f 	bl	8000b18 <__aeabi_dcmpgt>
 80088ba:	b9c8      	cbnz	r0, 80088f0 <_dtoa_r+0x6f8>
 80088bc:	4642      	mov	r2, r8
 80088be:	464b      	mov	r3, r9
 80088c0:	4630      	mov	r0, r6
 80088c2:	4639      	mov	r1, r7
 80088c4:	f7f8 f900 	bl	8000ac8 <__aeabi_dcmpeq>
 80088c8:	b110      	cbz	r0, 80088d0 <_dtoa_r+0x6d8>
 80088ca:	9b02      	ldr	r3, [sp, #8]
 80088cc:	07d9      	lsls	r1, r3, #31
 80088ce:	d40f      	bmi.n	80088f0 <_dtoa_r+0x6f8>
 80088d0:	4620      	mov	r0, r4
 80088d2:	4659      	mov	r1, fp
 80088d4:	f000 fad6 	bl	8008e84 <_Bfree>
 80088d8:	2300      	movs	r3, #0
 80088da:	702b      	strb	r3, [r5, #0]
 80088dc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80088de:	f10a 0001 	add.w	r0, sl, #1
 80088e2:	6018      	str	r0, [r3, #0]
 80088e4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80088e6:	2b00      	cmp	r3, #0
 80088e8:	f43f acd8 	beq.w	800829c <_dtoa_r+0xa4>
 80088ec:	601d      	str	r5, [r3, #0]
 80088ee:	e4d5      	b.n	800829c <_dtoa_r+0xa4>
 80088f0:	f8cd a01c 	str.w	sl, [sp, #28]
 80088f4:	462b      	mov	r3, r5
 80088f6:	461d      	mov	r5, r3
 80088f8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80088fc:	2a39      	cmp	r2, #57	; 0x39
 80088fe:	d108      	bne.n	8008912 <_dtoa_r+0x71a>
 8008900:	9a00      	ldr	r2, [sp, #0]
 8008902:	429a      	cmp	r2, r3
 8008904:	d1f7      	bne.n	80088f6 <_dtoa_r+0x6fe>
 8008906:	9a07      	ldr	r2, [sp, #28]
 8008908:	9900      	ldr	r1, [sp, #0]
 800890a:	3201      	adds	r2, #1
 800890c:	9207      	str	r2, [sp, #28]
 800890e:	2230      	movs	r2, #48	; 0x30
 8008910:	700a      	strb	r2, [r1, #0]
 8008912:	781a      	ldrb	r2, [r3, #0]
 8008914:	3201      	adds	r2, #1
 8008916:	701a      	strb	r2, [r3, #0]
 8008918:	e78c      	b.n	8008834 <_dtoa_r+0x63c>
 800891a:	4b7f      	ldr	r3, [pc, #508]	; (8008b18 <_dtoa_r+0x920>)
 800891c:	2200      	movs	r2, #0
 800891e:	f7f7 fe6b 	bl	80005f8 <__aeabi_dmul>
 8008922:	2200      	movs	r2, #0
 8008924:	2300      	movs	r3, #0
 8008926:	4606      	mov	r6, r0
 8008928:	460f      	mov	r7, r1
 800892a:	f7f8 f8cd 	bl	8000ac8 <__aeabi_dcmpeq>
 800892e:	2800      	cmp	r0, #0
 8008930:	d09b      	beq.n	800886a <_dtoa_r+0x672>
 8008932:	e7cd      	b.n	80088d0 <_dtoa_r+0x6d8>
 8008934:	9a08      	ldr	r2, [sp, #32]
 8008936:	2a00      	cmp	r2, #0
 8008938:	f000 80c4 	beq.w	8008ac4 <_dtoa_r+0x8cc>
 800893c:	9a05      	ldr	r2, [sp, #20]
 800893e:	2a01      	cmp	r2, #1
 8008940:	f300 80a8 	bgt.w	8008a94 <_dtoa_r+0x89c>
 8008944:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8008946:	2a00      	cmp	r2, #0
 8008948:	f000 80a0 	beq.w	8008a8c <_dtoa_r+0x894>
 800894c:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8008950:	9e06      	ldr	r6, [sp, #24]
 8008952:	4645      	mov	r5, r8
 8008954:	9a04      	ldr	r2, [sp, #16]
 8008956:	2101      	movs	r1, #1
 8008958:	441a      	add	r2, r3
 800895a:	4620      	mov	r0, r4
 800895c:	4498      	add	r8, r3
 800895e:	9204      	str	r2, [sp, #16]
 8008960:	f000 fb4c 	bl	8008ffc <__i2b>
 8008964:	4607      	mov	r7, r0
 8008966:	2d00      	cmp	r5, #0
 8008968:	dd0b      	ble.n	8008982 <_dtoa_r+0x78a>
 800896a:	9b04      	ldr	r3, [sp, #16]
 800896c:	2b00      	cmp	r3, #0
 800896e:	dd08      	ble.n	8008982 <_dtoa_r+0x78a>
 8008970:	42ab      	cmp	r3, r5
 8008972:	9a04      	ldr	r2, [sp, #16]
 8008974:	bfa8      	it	ge
 8008976:	462b      	movge	r3, r5
 8008978:	eba8 0803 	sub.w	r8, r8, r3
 800897c:	1aed      	subs	r5, r5, r3
 800897e:	1ad3      	subs	r3, r2, r3
 8008980:	9304      	str	r3, [sp, #16]
 8008982:	9b06      	ldr	r3, [sp, #24]
 8008984:	b1fb      	cbz	r3, 80089c6 <_dtoa_r+0x7ce>
 8008986:	9b08      	ldr	r3, [sp, #32]
 8008988:	2b00      	cmp	r3, #0
 800898a:	f000 809f 	beq.w	8008acc <_dtoa_r+0x8d4>
 800898e:	2e00      	cmp	r6, #0
 8008990:	dd11      	ble.n	80089b6 <_dtoa_r+0x7be>
 8008992:	4639      	mov	r1, r7
 8008994:	4632      	mov	r2, r6
 8008996:	4620      	mov	r0, r4
 8008998:	f000 fbec 	bl	8009174 <__pow5mult>
 800899c:	465a      	mov	r2, fp
 800899e:	4601      	mov	r1, r0
 80089a0:	4607      	mov	r7, r0
 80089a2:	4620      	mov	r0, r4
 80089a4:	f000 fb40 	bl	8009028 <__multiply>
 80089a8:	4659      	mov	r1, fp
 80089aa:	9007      	str	r0, [sp, #28]
 80089ac:	4620      	mov	r0, r4
 80089ae:	f000 fa69 	bl	8008e84 <_Bfree>
 80089b2:	9b07      	ldr	r3, [sp, #28]
 80089b4:	469b      	mov	fp, r3
 80089b6:	9b06      	ldr	r3, [sp, #24]
 80089b8:	1b9a      	subs	r2, r3, r6
 80089ba:	d004      	beq.n	80089c6 <_dtoa_r+0x7ce>
 80089bc:	4659      	mov	r1, fp
 80089be:	4620      	mov	r0, r4
 80089c0:	f000 fbd8 	bl	8009174 <__pow5mult>
 80089c4:	4683      	mov	fp, r0
 80089c6:	2101      	movs	r1, #1
 80089c8:	4620      	mov	r0, r4
 80089ca:	f000 fb17 	bl	8008ffc <__i2b>
 80089ce:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80089d0:	2b00      	cmp	r3, #0
 80089d2:	4606      	mov	r6, r0
 80089d4:	dd7c      	ble.n	8008ad0 <_dtoa_r+0x8d8>
 80089d6:	461a      	mov	r2, r3
 80089d8:	4601      	mov	r1, r0
 80089da:	4620      	mov	r0, r4
 80089dc:	f000 fbca 	bl	8009174 <__pow5mult>
 80089e0:	9b05      	ldr	r3, [sp, #20]
 80089e2:	2b01      	cmp	r3, #1
 80089e4:	4606      	mov	r6, r0
 80089e6:	dd76      	ble.n	8008ad6 <_dtoa_r+0x8de>
 80089e8:	2300      	movs	r3, #0
 80089ea:	9306      	str	r3, [sp, #24]
 80089ec:	6933      	ldr	r3, [r6, #16]
 80089ee:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80089f2:	6918      	ldr	r0, [r3, #16]
 80089f4:	f000 fab2 	bl	8008f5c <__hi0bits>
 80089f8:	f1c0 0020 	rsb	r0, r0, #32
 80089fc:	9b04      	ldr	r3, [sp, #16]
 80089fe:	4418      	add	r0, r3
 8008a00:	f010 001f 	ands.w	r0, r0, #31
 8008a04:	f000 8086 	beq.w	8008b14 <_dtoa_r+0x91c>
 8008a08:	f1c0 0320 	rsb	r3, r0, #32
 8008a0c:	2b04      	cmp	r3, #4
 8008a0e:	dd7f      	ble.n	8008b10 <_dtoa_r+0x918>
 8008a10:	f1c0 001c 	rsb	r0, r0, #28
 8008a14:	9b04      	ldr	r3, [sp, #16]
 8008a16:	4403      	add	r3, r0
 8008a18:	4480      	add	r8, r0
 8008a1a:	4405      	add	r5, r0
 8008a1c:	9304      	str	r3, [sp, #16]
 8008a1e:	f1b8 0f00 	cmp.w	r8, #0
 8008a22:	dd05      	ble.n	8008a30 <_dtoa_r+0x838>
 8008a24:	4659      	mov	r1, fp
 8008a26:	4642      	mov	r2, r8
 8008a28:	4620      	mov	r0, r4
 8008a2a:	f000 fbfd 	bl	8009228 <__lshift>
 8008a2e:	4683      	mov	fp, r0
 8008a30:	9b04      	ldr	r3, [sp, #16]
 8008a32:	2b00      	cmp	r3, #0
 8008a34:	dd05      	ble.n	8008a42 <_dtoa_r+0x84a>
 8008a36:	4631      	mov	r1, r6
 8008a38:	461a      	mov	r2, r3
 8008a3a:	4620      	mov	r0, r4
 8008a3c:	f000 fbf4 	bl	8009228 <__lshift>
 8008a40:	4606      	mov	r6, r0
 8008a42:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008a44:	2b00      	cmp	r3, #0
 8008a46:	d069      	beq.n	8008b1c <_dtoa_r+0x924>
 8008a48:	4631      	mov	r1, r6
 8008a4a:	4658      	mov	r0, fp
 8008a4c:	f000 fc58 	bl	8009300 <__mcmp>
 8008a50:	2800      	cmp	r0, #0
 8008a52:	da63      	bge.n	8008b1c <_dtoa_r+0x924>
 8008a54:	2300      	movs	r3, #0
 8008a56:	4659      	mov	r1, fp
 8008a58:	220a      	movs	r2, #10
 8008a5a:	4620      	mov	r0, r4
 8008a5c:	f000 fa34 	bl	8008ec8 <__multadd>
 8008a60:	9b08      	ldr	r3, [sp, #32]
 8008a62:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8008a66:	4683      	mov	fp, r0
 8008a68:	2b00      	cmp	r3, #0
 8008a6a:	f000 818f 	beq.w	8008d8c <_dtoa_r+0xb94>
 8008a6e:	4639      	mov	r1, r7
 8008a70:	2300      	movs	r3, #0
 8008a72:	220a      	movs	r2, #10
 8008a74:	4620      	mov	r0, r4
 8008a76:	f000 fa27 	bl	8008ec8 <__multadd>
 8008a7a:	f1b9 0f00 	cmp.w	r9, #0
 8008a7e:	4607      	mov	r7, r0
 8008a80:	f300 808e 	bgt.w	8008ba0 <_dtoa_r+0x9a8>
 8008a84:	9b05      	ldr	r3, [sp, #20]
 8008a86:	2b02      	cmp	r3, #2
 8008a88:	dc50      	bgt.n	8008b2c <_dtoa_r+0x934>
 8008a8a:	e089      	b.n	8008ba0 <_dtoa_r+0x9a8>
 8008a8c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008a8e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8008a92:	e75d      	b.n	8008950 <_dtoa_r+0x758>
 8008a94:	9b01      	ldr	r3, [sp, #4]
 8008a96:	1e5e      	subs	r6, r3, #1
 8008a98:	9b06      	ldr	r3, [sp, #24]
 8008a9a:	42b3      	cmp	r3, r6
 8008a9c:	bfbf      	itttt	lt
 8008a9e:	9b06      	ldrlt	r3, [sp, #24]
 8008aa0:	9606      	strlt	r6, [sp, #24]
 8008aa2:	1af2      	sublt	r2, r6, r3
 8008aa4:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 8008aa6:	bfb6      	itet	lt
 8008aa8:	189b      	addlt	r3, r3, r2
 8008aaa:	1b9e      	subge	r6, r3, r6
 8008aac:	930d      	strlt	r3, [sp, #52]	; 0x34
 8008aae:	9b01      	ldr	r3, [sp, #4]
 8008ab0:	bfb8      	it	lt
 8008ab2:	2600      	movlt	r6, #0
 8008ab4:	2b00      	cmp	r3, #0
 8008ab6:	bfb5      	itete	lt
 8008ab8:	eba8 0503 	sublt.w	r5, r8, r3
 8008abc:	9b01      	ldrge	r3, [sp, #4]
 8008abe:	2300      	movlt	r3, #0
 8008ac0:	4645      	movge	r5, r8
 8008ac2:	e747      	b.n	8008954 <_dtoa_r+0x75c>
 8008ac4:	9e06      	ldr	r6, [sp, #24]
 8008ac6:	9f08      	ldr	r7, [sp, #32]
 8008ac8:	4645      	mov	r5, r8
 8008aca:	e74c      	b.n	8008966 <_dtoa_r+0x76e>
 8008acc:	9a06      	ldr	r2, [sp, #24]
 8008ace:	e775      	b.n	80089bc <_dtoa_r+0x7c4>
 8008ad0:	9b05      	ldr	r3, [sp, #20]
 8008ad2:	2b01      	cmp	r3, #1
 8008ad4:	dc18      	bgt.n	8008b08 <_dtoa_r+0x910>
 8008ad6:	9b02      	ldr	r3, [sp, #8]
 8008ad8:	b9b3      	cbnz	r3, 8008b08 <_dtoa_r+0x910>
 8008ada:	9b03      	ldr	r3, [sp, #12]
 8008adc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008ae0:	b9a3      	cbnz	r3, 8008b0c <_dtoa_r+0x914>
 8008ae2:	9b03      	ldr	r3, [sp, #12]
 8008ae4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008ae8:	0d1b      	lsrs	r3, r3, #20
 8008aea:	051b      	lsls	r3, r3, #20
 8008aec:	b12b      	cbz	r3, 8008afa <_dtoa_r+0x902>
 8008aee:	9b04      	ldr	r3, [sp, #16]
 8008af0:	3301      	adds	r3, #1
 8008af2:	9304      	str	r3, [sp, #16]
 8008af4:	f108 0801 	add.w	r8, r8, #1
 8008af8:	2301      	movs	r3, #1
 8008afa:	9306      	str	r3, [sp, #24]
 8008afc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008afe:	2b00      	cmp	r3, #0
 8008b00:	f47f af74 	bne.w	80089ec <_dtoa_r+0x7f4>
 8008b04:	2001      	movs	r0, #1
 8008b06:	e779      	b.n	80089fc <_dtoa_r+0x804>
 8008b08:	2300      	movs	r3, #0
 8008b0a:	e7f6      	b.n	8008afa <_dtoa_r+0x902>
 8008b0c:	9b02      	ldr	r3, [sp, #8]
 8008b0e:	e7f4      	b.n	8008afa <_dtoa_r+0x902>
 8008b10:	d085      	beq.n	8008a1e <_dtoa_r+0x826>
 8008b12:	4618      	mov	r0, r3
 8008b14:	301c      	adds	r0, #28
 8008b16:	e77d      	b.n	8008a14 <_dtoa_r+0x81c>
 8008b18:	40240000 	.word	0x40240000
 8008b1c:	9b01      	ldr	r3, [sp, #4]
 8008b1e:	2b00      	cmp	r3, #0
 8008b20:	dc38      	bgt.n	8008b94 <_dtoa_r+0x99c>
 8008b22:	9b05      	ldr	r3, [sp, #20]
 8008b24:	2b02      	cmp	r3, #2
 8008b26:	dd35      	ble.n	8008b94 <_dtoa_r+0x99c>
 8008b28:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8008b2c:	f1b9 0f00 	cmp.w	r9, #0
 8008b30:	d10d      	bne.n	8008b4e <_dtoa_r+0x956>
 8008b32:	4631      	mov	r1, r6
 8008b34:	464b      	mov	r3, r9
 8008b36:	2205      	movs	r2, #5
 8008b38:	4620      	mov	r0, r4
 8008b3a:	f000 f9c5 	bl	8008ec8 <__multadd>
 8008b3e:	4601      	mov	r1, r0
 8008b40:	4606      	mov	r6, r0
 8008b42:	4658      	mov	r0, fp
 8008b44:	f000 fbdc 	bl	8009300 <__mcmp>
 8008b48:	2800      	cmp	r0, #0
 8008b4a:	f73f adbd 	bgt.w	80086c8 <_dtoa_r+0x4d0>
 8008b4e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008b50:	9d00      	ldr	r5, [sp, #0]
 8008b52:	ea6f 0a03 	mvn.w	sl, r3
 8008b56:	f04f 0800 	mov.w	r8, #0
 8008b5a:	4631      	mov	r1, r6
 8008b5c:	4620      	mov	r0, r4
 8008b5e:	f000 f991 	bl	8008e84 <_Bfree>
 8008b62:	2f00      	cmp	r7, #0
 8008b64:	f43f aeb4 	beq.w	80088d0 <_dtoa_r+0x6d8>
 8008b68:	f1b8 0f00 	cmp.w	r8, #0
 8008b6c:	d005      	beq.n	8008b7a <_dtoa_r+0x982>
 8008b6e:	45b8      	cmp	r8, r7
 8008b70:	d003      	beq.n	8008b7a <_dtoa_r+0x982>
 8008b72:	4641      	mov	r1, r8
 8008b74:	4620      	mov	r0, r4
 8008b76:	f000 f985 	bl	8008e84 <_Bfree>
 8008b7a:	4639      	mov	r1, r7
 8008b7c:	4620      	mov	r0, r4
 8008b7e:	f000 f981 	bl	8008e84 <_Bfree>
 8008b82:	e6a5      	b.n	80088d0 <_dtoa_r+0x6d8>
 8008b84:	2600      	movs	r6, #0
 8008b86:	4637      	mov	r7, r6
 8008b88:	e7e1      	b.n	8008b4e <_dtoa_r+0x956>
 8008b8a:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8008b8c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8008b90:	4637      	mov	r7, r6
 8008b92:	e599      	b.n	80086c8 <_dtoa_r+0x4d0>
 8008b94:	9b08      	ldr	r3, [sp, #32]
 8008b96:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8008b9a:	2b00      	cmp	r3, #0
 8008b9c:	f000 80fd 	beq.w	8008d9a <_dtoa_r+0xba2>
 8008ba0:	2d00      	cmp	r5, #0
 8008ba2:	dd05      	ble.n	8008bb0 <_dtoa_r+0x9b8>
 8008ba4:	4639      	mov	r1, r7
 8008ba6:	462a      	mov	r2, r5
 8008ba8:	4620      	mov	r0, r4
 8008baa:	f000 fb3d 	bl	8009228 <__lshift>
 8008bae:	4607      	mov	r7, r0
 8008bb0:	9b06      	ldr	r3, [sp, #24]
 8008bb2:	2b00      	cmp	r3, #0
 8008bb4:	d05c      	beq.n	8008c70 <_dtoa_r+0xa78>
 8008bb6:	6879      	ldr	r1, [r7, #4]
 8008bb8:	4620      	mov	r0, r4
 8008bba:	f000 f923 	bl	8008e04 <_Balloc>
 8008bbe:	4605      	mov	r5, r0
 8008bc0:	b928      	cbnz	r0, 8008bce <_dtoa_r+0x9d6>
 8008bc2:	4b80      	ldr	r3, [pc, #512]	; (8008dc4 <_dtoa_r+0xbcc>)
 8008bc4:	4602      	mov	r2, r0
 8008bc6:	f240 21ea 	movw	r1, #746	; 0x2ea
 8008bca:	f7ff bb2e 	b.w	800822a <_dtoa_r+0x32>
 8008bce:	693a      	ldr	r2, [r7, #16]
 8008bd0:	3202      	adds	r2, #2
 8008bd2:	0092      	lsls	r2, r2, #2
 8008bd4:	f107 010c 	add.w	r1, r7, #12
 8008bd8:	300c      	adds	r0, #12
 8008bda:	f000 f905 	bl	8008de8 <memcpy>
 8008bde:	2201      	movs	r2, #1
 8008be0:	4629      	mov	r1, r5
 8008be2:	4620      	mov	r0, r4
 8008be4:	f000 fb20 	bl	8009228 <__lshift>
 8008be8:	9b00      	ldr	r3, [sp, #0]
 8008bea:	3301      	adds	r3, #1
 8008bec:	9301      	str	r3, [sp, #4]
 8008bee:	9b00      	ldr	r3, [sp, #0]
 8008bf0:	444b      	add	r3, r9
 8008bf2:	9307      	str	r3, [sp, #28]
 8008bf4:	9b02      	ldr	r3, [sp, #8]
 8008bf6:	f003 0301 	and.w	r3, r3, #1
 8008bfa:	46b8      	mov	r8, r7
 8008bfc:	9306      	str	r3, [sp, #24]
 8008bfe:	4607      	mov	r7, r0
 8008c00:	9b01      	ldr	r3, [sp, #4]
 8008c02:	4631      	mov	r1, r6
 8008c04:	3b01      	subs	r3, #1
 8008c06:	4658      	mov	r0, fp
 8008c08:	9302      	str	r3, [sp, #8]
 8008c0a:	f7ff fa67 	bl	80080dc <quorem>
 8008c0e:	4603      	mov	r3, r0
 8008c10:	3330      	adds	r3, #48	; 0x30
 8008c12:	9004      	str	r0, [sp, #16]
 8008c14:	4641      	mov	r1, r8
 8008c16:	4658      	mov	r0, fp
 8008c18:	9308      	str	r3, [sp, #32]
 8008c1a:	f000 fb71 	bl	8009300 <__mcmp>
 8008c1e:	463a      	mov	r2, r7
 8008c20:	4681      	mov	r9, r0
 8008c22:	4631      	mov	r1, r6
 8008c24:	4620      	mov	r0, r4
 8008c26:	f000 fb87 	bl	8009338 <__mdiff>
 8008c2a:	68c2      	ldr	r2, [r0, #12]
 8008c2c:	9b08      	ldr	r3, [sp, #32]
 8008c2e:	4605      	mov	r5, r0
 8008c30:	bb02      	cbnz	r2, 8008c74 <_dtoa_r+0xa7c>
 8008c32:	4601      	mov	r1, r0
 8008c34:	4658      	mov	r0, fp
 8008c36:	f000 fb63 	bl	8009300 <__mcmp>
 8008c3a:	9b08      	ldr	r3, [sp, #32]
 8008c3c:	4602      	mov	r2, r0
 8008c3e:	4629      	mov	r1, r5
 8008c40:	4620      	mov	r0, r4
 8008c42:	e9cd 3208 	strd	r3, r2, [sp, #32]
 8008c46:	f000 f91d 	bl	8008e84 <_Bfree>
 8008c4a:	9b05      	ldr	r3, [sp, #20]
 8008c4c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008c4e:	9d01      	ldr	r5, [sp, #4]
 8008c50:	ea43 0102 	orr.w	r1, r3, r2
 8008c54:	9b06      	ldr	r3, [sp, #24]
 8008c56:	430b      	orrs	r3, r1
 8008c58:	9b08      	ldr	r3, [sp, #32]
 8008c5a:	d10d      	bne.n	8008c78 <_dtoa_r+0xa80>
 8008c5c:	2b39      	cmp	r3, #57	; 0x39
 8008c5e:	d029      	beq.n	8008cb4 <_dtoa_r+0xabc>
 8008c60:	f1b9 0f00 	cmp.w	r9, #0
 8008c64:	dd01      	ble.n	8008c6a <_dtoa_r+0xa72>
 8008c66:	9b04      	ldr	r3, [sp, #16]
 8008c68:	3331      	adds	r3, #49	; 0x31
 8008c6a:	9a02      	ldr	r2, [sp, #8]
 8008c6c:	7013      	strb	r3, [r2, #0]
 8008c6e:	e774      	b.n	8008b5a <_dtoa_r+0x962>
 8008c70:	4638      	mov	r0, r7
 8008c72:	e7b9      	b.n	8008be8 <_dtoa_r+0x9f0>
 8008c74:	2201      	movs	r2, #1
 8008c76:	e7e2      	b.n	8008c3e <_dtoa_r+0xa46>
 8008c78:	f1b9 0f00 	cmp.w	r9, #0
 8008c7c:	db06      	blt.n	8008c8c <_dtoa_r+0xa94>
 8008c7e:	9905      	ldr	r1, [sp, #20]
 8008c80:	ea41 0909 	orr.w	r9, r1, r9
 8008c84:	9906      	ldr	r1, [sp, #24]
 8008c86:	ea59 0101 	orrs.w	r1, r9, r1
 8008c8a:	d120      	bne.n	8008cce <_dtoa_r+0xad6>
 8008c8c:	2a00      	cmp	r2, #0
 8008c8e:	ddec      	ble.n	8008c6a <_dtoa_r+0xa72>
 8008c90:	4659      	mov	r1, fp
 8008c92:	2201      	movs	r2, #1
 8008c94:	4620      	mov	r0, r4
 8008c96:	9301      	str	r3, [sp, #4]
 8008c98:	f000 fac6 	bl	8009228 <__lshift>
 8008c9c:	4631      	mov	r1, r6
 8008c9e:	4683      	mov	fp, r0
 8008ca0:	f000 fb2e 	bl	8009300 <__mcmp>
 8008ca4:	2800      	cmp	r0, #0
 8008ca6:	9b01      	ldr	r3, [sp, #4]
 8008ca8:	dc02      	bgt.n	8008cb0 <_dtoa_r+0xab8>
 8008caa:	d1de      	bne.n	8008c6a <_dtoa_r+0xa72>
 8008cac:	07da      	lsls	r2, r3, #31
 8008cae:	d5dc      	bpl.n	8008c6a <_dtoa_r+0xa72>
 8008cb0:	2b39      	cmp	r3, #57	; 0x39
 8008cb2:	d1d8      	bne.n	8008c66 <_dtoa_r+0xa6e>
 8008cb4:	9a02      	ldr	r2, [sp, #8]
 8008cb6:	2339      	movs	r3, #57	; 0x39
 8008cb8:	7013      	strb	r3, [r2, #0]
 8008cba:	462b      	mov	r3, r5
 8008cbc:	461d      	mov	r5, r3
 8008cbe:	3b01      	subs	r3, #1
 8008cc0:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8008cc4:	2a39      	cmp	r2, #57	; 0x39
 8008cc6:	d050      	beq.n	8008d6a <_dtoa_r+0xb72>
 8008cc8:	3201      	adds	r2, #1
 8008cca:	701a      	strb	r2, [r3, #0]
 8008ccc:	e745      	b.n	8008b5a <_dtoa_r+0x962>
 8008cce:	2a00      	cmp	r2, #0
 8008cd0:	dd03      	ble.n	8008cda <_dtoa_r+0xae2>
 8008cd2:	2b39      	cmp	r3, #57	; 0x39
 8008cd4:	d0ee      	beq.n	8008cb4 <_dtoa_r+0xabc>
 8008cd6:	3301      	adds	r3, #1
 8008cd8:	e7c7      	b.n	8008c6a <_dtoa_r+0xa72>
 8008cda:	9a01      	ldr	r2, [sp, #4]
 8008cdc:	9907      	ldr	r1, [sp, #28]
 8008cde:	f802 3c01 	strb.w	r3, [r2, #-1]
 8008ce2:	428a      	cmp	r2, r1
 8008ce4:	d02a      	beq.n	8008d3c <_dtoa_r+0xb44>
 8008ce6:	4659      	mov	r1, fp
 8008ce8:	2300      	movs	r3, #0
 8008cea:	220a      	movs	r2, #10
 8008cec:	4620      	mov	r0, r4
 8008cee:	f000 f8eb 	bl	8008ec8 <__multadd>
 8008cf2:	45b8      	cmp	r8, r7
 8008cf4:	4683      	mov	fp, r0
 8008cf6:	f04f 0300 	mov.w	r3, #0
 8008cfa:	f04f 020a 	mov.w	r2, #10
 8008cfe:	4641      	mov	r1, r8
 8008d00:	4620      	mov	r0, r4
 8008d02:	d107      	bne.n	8008d14 <_dtoa_r+0xb1c>
 8008d04:	f000 f8e0 	bl	8008ec8 <__multadd>
 8008d08:	4680      	mov	r8, r0
 8008d0a:	4607      	mov	r7, r0
 8008d0c:	9b01      	ldr	r3, [sp, #4]
 8008d0e:	3301      	adds	r3, #1
 8008d10:	9301      	str	r3, [sp, #4]
 8008d12:	e775      	b.n	8008c00 <_dtoa_r+0xa08>
 8008d14:	f000 f8d8 	bl	8008ec8 <__multadd>
 8008d18:	4639      	mov	r1, r7
 8008d1a:	4680      	mov	r8, r0
 8008d1c:	2300      	movs	r3, #0
 8008d1e:	220a      	movs	r2, #10
 8008d20:	4620      	mov	r0, r4
 8008d22:	f000 f8d1 	bl	8008ec8 <__multadd>
 8008d26:	4607      	mov	r7, r0
 8008d28:	e7f0      	b.n	8008d0c <_dtoa_r+0xb14>
 8008d2a:	f1b9 0f00 	cmp.w	r9, #0
 8008d2e:	9a00      	ldr	r2, [sp, #0]
 8008d30:	bfcc      	ite	gt
 8008d32:	464d      	movgt	r5, r9
 8008d34:	2501      	movle	r5, #1
 8008d36:	4415      	add	r5, r2
 8008d38:	f04f 0800 	mov.w	r8, #0
 8008d3c:	4659      	mov	r1, fp
 8008d3e:	2201      	movs	r2, #1
 8008d40:	4620      	mov	r0, r4
 8008d42:	9301      	str	r3, [sp, #4]
 8008d44:	f000 fa70 	bl	8009228 <__lshift>
 8008d48:	4631      	mov	r1, r6
 8008d4a:	4683      	mov	fp, r0
 8008d4c:	f000 fad8 	bl	8009300 <__mcmp>
 8008d50:	2800      	cmp	r0, #0
 8008d52:	dcb2      	bgt.n	8008cba <_dtoa_r+0xac2>
 8008d54:	d102      	bne.n	8008d5c <_dtoa_r+0xb64>
 8008d56:	9b01      	ldr	r3, [sp, #4]
 8008d58:	07db      	lsls	r3, r3, #31
 8008d5a:	d4ae      	bmi.n	8008cba <_dtoa_r+0xac2>
 8008d5c:	462b      	mov	r3, r5
 8008d5e:	461d      	mov	r5, r3
 8008d60:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008d64:	2a30      	cmp	r2, #48	; 0x30
 8008d66:	d0fa      	beq.n	8008d5e <_dtoa_r+0xb66>
 8008d68:	e6f7      	b.n	8008b5a <_dtoa_r+0x962>
 8008d6a:	9a00      	ldr	r2, [sp, #0]
 8008d6c:	429a      	cmp	r2, r3
 8008d6e:	d1a5      	bne.n	8008cbc <_dtoa_r+0xac4>
 8008d70:	f10a 0a01 	add.w	sl, sl, #1
 8008d74:	2331      	movs	r3, #49	; 0x31
 8008d76:	e779      	b.n	8008c6c <_dtoa_r+0xa74>
 8008d78:	4b13      	ldr	r3, [pc, #76]	; (8008dc8 <_dtoa_r+0xbd0>)
 8008d7a:	f7ff baaf 	b.w	80082dc <_dtoa_r+0xe4>
 8008d7e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008d80:	2b00      	cmp	r3, #0
 8008d82:	f47f aa86 	bne.w	8008292 <_dtoa_r+0x9a>
 8008d86:	4b11      	ldr	r3, [pc, #68]	; (8008dcc <_dtoa_r+0xbd4>)
 8008d88:	f7ff baa8 	b.w	80082dc <_dtoa_r+0xe4>
 8008d8c:	f1b9 0f00 	cmp.w	r9, #0
 8008d90:	dc03      	bgt.n	8008d9a <_dtoa_r+0xba2>
 8008d92:	9b05      	ldr	r3, [sp, #20]
 8008d94:	2b02      	cmp	r3, #2
 8008d96:	f73f aec9 	bgt.w	8008b2c <_dtoa_r+0x934>
 8008d9a:	9d00      	ldr	r5, [sp, #0]
 8008d9c:	4631      	mov	r1, r6
 8008d9e:	4658      	mov	r0, fp
 8008da0:	f7ff f99c 	bl	80080dc <quorem>
 8008da4:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8008da8:	f805 3b01 	strb.w	r3, [r5], #1
 8008dac:	9a00      	ldr	r2, [sp, #0]
 8008dae:	1aaa      	subs	r2, r5, r2
 8008db0:	4591      	cmp	r9, r2
 8008db2:	ddba      	ble.n	8008d2a <_dtoa_r+0xb32>
 8008db4:	4659      	mov	r1, fp
 8008db6:	2300      	movs	r3, #0
 8008db8:	220a      	movs	r2, #10
 8008dba:	4620      	mov	r0, r4
 8008dbc:	f000 f884 	bl	8008ec8 <__multadd>
 8008dc0:	4683      	mov	fp, r0
 8008dc2:	e7eb      	b.n	8008d9c <_dtoa_r+0xba4>
 8008dc4:	0800a65f 	.word	0x0800a65f
 8008dc8:	0800a5b8 	.word	0x0800a5b8
 8008dcc:	0800a5dc 	.word	0x0800a5dc

08008dd0 <_localeconv_r>:
 8008dd0:	4800      	ldr	r0, [pc, #0]	; (8008dd4 <_localeconv_r+0x4>)
 8008dd2:	4770      	bx	lr
 8008dd4:	20000160 	.word	0x20000160

08008dd8 <malloc>:
 8008dd8:	4b02      	ldr	r3, [pc, #8]	; (8008de4 <malloc+0xc>)
 8008dda:	4601      	mov	r1, r0
 8008ddc:	6818      	ldr	r0, [r3, #0]
 8008dde:	f000 bbef 	b.w	80095c0 <_malloc_r>
 8008de2:	bf00      	nop
 8008de4:	2000000c 	.word	0x2000000c

08008de8 <memcpy>:
 8008de8:	440a      	add	r2, r1
 8008dea:	4291      	cmp	r1, r2
 8008dec:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8008df0:	d100      	bne.n	8008df4 <memcpy+0xc>
 8008df2:	4770      	bx	lr
 8008df4:	b510      	push	{r4, lr}
 8008df6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008dfa:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008dfe:	4291      	cmp	r1, r2
 8008e00:	d1f9      	bne.n	8008df6 <memcpy+0xe>
 8008e02:	bd10      	pop	{r4, pc}

08008e04 <_Balloc>:
 8008e04:	b570      	push	{r4, r5, r6, lr}
 8008e06:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8008e08:	4604      	mov	r4, r0
 8008e0a:	460d      	mov	r5, r1
 8008e0c:	b976      	cbnz	r6, 8008e2c <_Balloc+0x28>
 8008e0e:	2010      	movs	r0, #16
 8008e10:	f7ff ffe2 	bl	8008dd8 <malloc>
 8008e14:	4602      	mov	r2, r0
 8008e16:	6260      	str	r0, [r4, #36]	; 0x24
 8008e18:	b920      	cbnz	r0, 8008e24 <_Balloc+0x20>
 8008e1a:	4b18      	ldr	r3, [pc, #96]	; (8008e7c <_Balloc+0x78>)
 8008e1c:	4818      	ldr	r0, [pc, #96]	; (8008e80 <_Balloc+0x7c>)
 8008e1e:	2166      	movs	r1, #102	; 0x66
 8008e20:	f000 fd94 	bl	800994c <__assert_func>
 8008e24:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008e28:	6006      	str	r6, [r0, #0]
 8008e2a:	60c6      	str	r6, [r0, #12]
 8008e2c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8008e2e:	68f3      	ldr	r3, [r6, #12]
 8008e30:	b183      	cbz	r3, 8008e54 <_Balloc+0x50>
 8008e32:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008e34:	68db      	ldr	r3, [r3, #12]
 8008e36:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8008e3a:	b9b8      	cbnz	r0, 8008e6c <_Balloc+0x68>
 8008e3c:	2101      	movs	r1, #1
 8008e3e:	fa01 f605 	lsl.w	r6, r1, r5
 8008e42:	1d72      	adds	r2, r6, #5
 8008e44:	0092      	lsls	r2, r2, #2
 8008e46:	4620      	mov	r0, r4
 8008e48:	f000 fb5a 	bl	8009500 <_calloc_r>
 8008e4c:	b160      	cbz	r0, 8008e68 <_Balloc+0x64>
 8008e4e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8008e52:	e00e      	b.n	8008e72 <_Balloc+0x6e>
 8008e54:	2221      	movs	r2, #33	; 0x21
 8008e56:	2104      	movs	r1, #4
 8008e58:	4620      	mov	r0, r4
 8008e5a:	f000 fb51 	bl	8009500 <_calloc_r>
 8008e5e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008e60:	60f0      	str	r0, [r6, #12]
 8008e62:	68db      	ldr	r3, [r3, #12]
 8008e64:	2b00      	cmp	r3, #0
 8008e66:	d1e4      	bne.n	8008e32 <_Balloc+0x2e>
 8008e68:	2000      	movs	r0, #0
 8008e6a:	bd70      	pop	{r4, r5, r6, pc}
 8008e6c:	6802      	ldr	r2, [r0, #0]
 8008e6e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8008e72:	2300      	movs	r3, #0
 8008e74:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008e78:	e7f7      	b.n	8008e6a <_Balloc+0x66>
 8008e7a:	bf00      	nop
 8008e7c:	0800a5e9 	.word	0x0800a5e9
 8008e80:	0800a670 	.word	0x0800a670

08008e84 <_Bfree>:
 8008e84:	b570      	push	{r4, r5, r6, lr}
 8008e86:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8008e88:	4605      	mov	r5, r0
 8008e8a:	460c      	mov	r4, r1
 8008e8c:	b976      	cbnz	r6, 8008eac <_Bfree+0x28>
 8008e8e:	2010      	movs	r0, #16
 8008e90:	f7ff ffa2 	bl	8008dd8 <malloc>
 8008e94:	4602      	mov	r2, r0
 8008e96:	6268      	str	r0, [r5, #36]	; 0x24
 8008e98:	b920      	cbnz	r0, 8008ea4 <_Bfree+0x20>
 8008e9a:	4b09      	ldr	r3, [pc, #36]	; (8008ec0 <_Bfree+0x3c>)
 8008e9c:	4809      	ldr	r0, [pc, #36]	; (8008ec4 <_Bfree+0x40>)
 8008e9e:	218a      	movs	r1, #138	; 0x8a
 8008ea0:	f000 fd54 	bl	800994c <__assert_func>
 8008ea4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008ea8:	6006      	str	r6, [r0, #0]
 8008eaa:	60c6      	str	r6, [r0, #12]
 8008eac:	b13c      	cbz	r4, 8008ebe <_Bfree+0x3a>
 8008eae:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8008eb0:	6862      	ldr	r2, [r4, #4]
 8008eb2:	68db      	ldr	r3, [r3, #12]
 8008eb4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008eb8:	6021      	str	r1, [r4, #0]
 8008eba:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8008ebe:	bd70      	pop	{r4, r5, r6, pc}
 8008ec0:	0800a5e9 	.word	0x0800a5e9
 8008ec4:	0800a670 	.word	0x0800a670

08008ec8 <__multadd>:
 8008ec8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008ecc:	690e      	ldr	r6, [r1, #16]
 8008ece:	4607      	mov	r7, r0
 8008ed0:	4698      	mov	r8, r3
 8008ed2:	460c      	mov	r4, r1
 8008ed4:	f101 0014 	add.w	r0, r1, #20
 8008ed8:	2300      	movs	r3, #0
 8008eda:	6805      	ldr	r5, [r0, #0]
 8008edc:	b2a9      	uxth	r1, r5
 8008ede:	fb02 8101 	mla	r1, r2, r1, r8
 8008ee2:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 8008ee6:	0c2d      	lsrs	r5, r5, #16
 8008ee8:	fb02 c505 	mla	r5, r2, r5, ip
 8008eec:	b289      	uxth	r1, r1
 8008eee:	3301      	adds	r3, #1
 8008ef0:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8008ef4:	429e      	cmp	r6, r3
 8008ef6:	f840 1b04 	str.w	r1, [r0], #4
 8008efa:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8008efe:	dcec      	bgt.n	8008eda <__multadd+0x12>
 8008f00:	f1b8 0f00 	cmp.w	r8, #0
 8008f04:	d022      	beq.n	8008f4c <__multadd+0x84>
 8008f06:	68a3      	ldr	r3, [r4, #8]
 8008f08:	42b3      	cmp	r3, r6
 8008f0a:	dc19      	bgt.n	8008f40 <__multadd+0x78>
 8008f0c:	6861      	ldr	r1, [r4, #4]
 8008f0e:	4638      	mov	r0, r7
 8008f10:	3101      	adds	r1, #1
 8008f12:	f7ff ff77 	bl	8008e04 <_Balloc>
 8008f16:	4605      	mov	r5, r0
 8008f18:	b928      	cbnz	r0, 8008f26 <__multadd+0x5e>
 8008f1a:	4602      	mov	r2, r0
 8008f1c:	4b0d      	ldr	r3, [pc, #52]	; (8008f54 <__multadd+0x8c>)
 8008f1e:	480e      	ldr	r0, [pc, #56]	; (8008f58 <__multadd+0x90>)
 8008f20:	21b5      	movs	r1, #181	; 0xb5
 8008f22:	f000 fd13 	bl	800994c <__assert_func>
 8008f26:	6922      	ldr	r2, [r4, #16]
 8008f28:	3202      	adds	r2, #2
 8008f2a:	f104 010c 	add.w	r1, r4, #12
 8008f2e:	0092      	lsls	r2, r2, #2
 8008f30:	300c      	adds	r0, #12
 8008f32:	f7ff ff59 	bl	8008de8 <memcpy>
 8008f36:	4621      	mov	r1, r4
 8008f38:	4638      	mov	r0, r7
 8008f3a:	f7ff ffa3 	bl	8008e84 <_Bfree>
 8008f3e:	462c      	mov	r4, r5
 8008f40:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8008f44:	3601      	adds	r6, #1
 8008f46:	f8c3 8014 	str.w	r8, [r3, #20]
 8008f4a:	6126      	str	r6, [r4, #16]
 8008f4c:	4620      	mov	r0, r4
 8008f4e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008f52:	bf00      	nop
 8008f54:	0800a65f 	.word	0x0800a65f
 8008f58:	0800a670 	.word	0x0800a670

08008f5c <__hi0bits>:
 8008f5c:	0c03      	lsrs	r3, r0, #16
 8008f5e:	041b      	lsls	r3, r3, #16
 8008f60:	b9d3      	cbnz	r3, 8008f98 <__hi0bits+0x3c>
 8008f62:	0400      	lsls	r0, r0, #16
 8008f64:	2310      	movs	r3, #16
 8008f66:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8008f6a:	bf04      	itt	eq
 8008f6c:	0200      	lsleq	r0, r0, #8
 8008f6e:	3308      	addeq	r3, #8
 8008f70:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8008f74:	bf04      	itt	eq
 8008f76:	0100      	lsleq	r0, r0, #4
 8008f78:	3304      	addeq	r3, #4
 8008f7a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8008f7e:	bf04      	itt	eq
 8008f80:	0080      	lsleq	r0, r0, #2
 8008f82:	3302      	addeq	r3, #2
 8008f84:	2800      	cmp	r0, #0
 8008f86:	db05      	blt.n	8008f94 <__hi0bits+0x38>
 8008f88:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8008f8c:	f103 0301 	add.w	r3, r3, #1
 8008f90:	bf08      	it	eq
 8008f92:	2320      	moveq	r3, #32
 8008f94:	4618      	mov	r0, r3
 8008f96:	4770      	bx	lr
 8008f98:	2300      	movs	r3, #0
 8008f9a:	e7e4      	b.n	8008f66 <__hi0bits+0xa>

08008f9c <__lo0bits>:
 8008f9c:	6803      	ldr	r3, [r0, #0]
 8008f9e:	f013 0207 	ands.w	r2, r3, #7
 8008fa2:	4601      	mov	r1, r0
 8008fa4:	d00b      	beq.n	8008fbe <__lo0bits+0x22>
 8008fa6:	07da      	lsls	r2, r3, #31
 8008fa8:	d424      	bmi.n	8008ff4 <__lo0bits+0x58>
 8008faa:	0798      	lsls	r0, r3, #30
 8008fac:	bf49      	itett	mi
 8008fae:	085b      	lsrmi	r3, r3, #1
 8008fb0:	089b      	lsrpl	r3, r3, #2
 8008fb2:	2001      	movmi	r0, #1
 8008fb4:	600b      	strmi	r3, [r1, #0]
 8008fb6:	bf5c      	itt	pl
 8008fb8:	600b      	strpl	r3, [r1, #0]
 8008fba:	2002      	movpl	r0, #2
 8008fbc:	4770      	bx	lr
 8008fbe:	b298      	uxth	r0, r3
 8008fc0:	b9b0      	cbnz	r0, 8008ff0 <__lo0bits+0x54>
 8008fc2:	0c1b      	lsrs	r3, r3, #16
 8008fc4:	2010      	movs	r0, #16
 8008fc6:	f013 0fff 	tst.w	r3, #255	; 0xff
 8008fca:	bf04      	itt	eq
 8008fcc:	0a1b      	lsreq	r3, r3, #8
 8008fce:	3008      	addeq	r0, #8
 8008fd0:	071a      	lsls	r2, r3, #28
 8008fd2:	bf04      	itt	eq
 8008fd4:	091b      	lsreq	r3, r3, #4
 8008fd6:	3004      	addeq	r0, #4
 8008fd8:	079a      	lsls	r2, r3, #30
 8008fda:	bf04      	itt	eq
 8008fdc:	089b      	lsreq	r3, r3, #2
 8008fde:	3002      	addeq	r0, #2
 8008fe0:	07da      	lsls	r2, r3, #31
 8008fe2:	d403      	bmi.n	8008fec <__lo0bits+0x50>
 8008fe4:	085b      	lsrs	r3, r3, #1
 8008fe6:	f100 0001 	add.w	r0, r0, #1
 8008fea:	d005      	beq.n	8008ff8 <__lo0bits+0x5c>
 8008fec:	600b      	str	r3, [r1, #0]
 8008fee:	4770      	bx	lr
 8008ff0:	4610      	mov	r0, r2
 8008ff2:	e7e8      	b.n	8008fc6 <__lo0bits+0x2a>
 8008ff4:	2000      	movs	r0, #0
 8008ff6:	4770      	bx	lr
 8008ff8:	2020      	movs	r0, #32
 8008ffa:	4770      	bx	lr

08008ffc <__i2b>:
 8008ffc:	b510      	push	{r4, lr}
 8008ffe:	460c      	mov	r4, r1
 8009000:	2101      	movs	r1, #1
 8009002:	f7ff feff 	bl	8008e04 <_Balloc>
 8009006:	4602      	mov	r2, r0
 8009008:	b928      	cbnz	r0, 8009016 <__i2b+0x1a>
 800900a:	4b05      	ldr	r3, [pc, #20]	; (8009020 <__i2b+0x24>)
 800900c:	4805      	ldr	r0, [pc, #20]	; (8009024 <__i2b+0x28>)
 800900e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8009012:	f000 fc9b 	bl	800994c <__assert_func>
 8009016:	2301      	movs	r3, #1
 8009018:	6144      	str	r4, [r0, #20]
 800901a:	6103      	str	r3, [r0, #16]
 800901c:	bd10      	pop	{r4, pc}
 800901e:	bf00      	nop
 8009020:	0800a65f 	.word	0x0800a65f
 8009024:	0800a670 	.word	0x0800a670

08009028 <__multiply>:
 8009028:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800902c:	4614      	mov	r4, r2
 800902e:	690a      	ldr	r2, [r1, #16]
 8009030:	6923      	ldr	r3, [r4, #16]
 8009032:	429a      	cmp	r2, r3
 8009034:	bfb8      	it	lt
 8009036:	460b      	movlt	r3, r1
 8009038:	460d      	mov	r5, r1
 800903a:	bfbc      	itt	lt
 800903c:	4625      	movlt	r5, r4
 800903e:	461c      	movlt	r4, r3
 8009040:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8009044:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8009048:	68ab      	ldr	r3, [r5, #8]
 800904a:	6869      	ldr	r1, [r5, #4]
 800904c:	eb0a 0709 	add.w	r7, sl, r9
 8009050:	42bb      	cmp	r3, r7
 8009052:	b085      	sub	sp, #20
 8009054:	bfb8      	it	lt
 8009056:	3101      	addlt	r1, #1
 8009058:	f7ff fed4 	bl	8008e04 <_Balloc>
 800905c:	b930      	cbnz	r0, 800906c <__multiply+0x44>
 800905e:	4602      	mov	r2, r0
 8009060:	4b42      	ldr	r3, [pc, #264]	; (800916c <__multiply+0x144>)
 8009062:	4843      	ldr	r0, [pc, #268]	; (8009170 <__multiply+0x148>)
 8009064:	f240 115d 	movw	r1, #349	; 0x15d
 8009068:	f000 fc70 	bl	800994c <__assert_func>
 800906c:	f100 0614 	add.w	r6, r0, #20
 8009070:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8009074:	4633      	mov	r3, r6
 8009076:	2200      	movs	r2, #0
 8009078:	4543      	cmp	r3, r8
 800907a:	d31e      	bcc.n	80090ba <__multiply+0x92>
 800907c:	f105 0c14 	add.w	ip, r5, #20
 8009080:	f104 0314 	add.w	r3, r4, #20
 8009084:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8009088:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 800908c:	9202      	str	r2, [sp, #8]
 800908e:	ebac 0205 	sub.w	r2, ip, r5
 8009092:	3a15      	subs	r2, #21
 8009094:	f022 0203 	bic.w	r2, r2, #3
 8009098:	3204      	adds	r2, #4
 800909a:	f105 0115 	add.w	r1, r5, #21
 800909e:	458c      	cmp	ip, r1
 80090a0:	bf38      	it	cc
 80090a2:	2204      	movcc	r2, #4
 80090a4:	9201      	str	r2, [sp, #4]
 80090a6:	9a02      	ldr	r2, [sp, #8]
 80090a8:	9303      	str	r3, [sp, #12]
 80090aa:	429a      	cmp	r2, r3
 80090ac:	d808      	bhi.n	80090c0 <__multiply+0x98>
 80090ae:	2f00      	cmp	r7, #0
 80090b0:	dc55      	bgt.n	800915e <__multiply+0x136>
 80090b2:	6107      	str	r7, [r0, #16]
 80090b4:	b005      	add	sp, #20
 80090b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80090ba:	f843 2b04 	str.w	r2, [r3], #4
 80090be:	e7db      	b.n	8009078 <__multiply+0x50>
 80090c0:	f8b3 a000 	ldrh.w	sl, [r3]
 80090c4:	f1ba 0f00 	cmp.w	sl, #0
 80090c8:	d020      	beq.n	800910c <__multiply+0xe4>
 80090ca:	f105 0e14 	add.w	lr, r5, #20
 80090ce:	46b1      	mov	r9, r6
 80090d0:	2200      	movs	r2, #0
 80090d2:	f85e 4b04 	ldr.w	r4, [lr], #4
 80090d6:	f8d9 b000 	ldr.w	fp, [r9]
 80090da:	b2a1      	uxth	r1, r4
 80090dc:	fa1f fb8b 	uxth.w	fp, fp
 80090e0:	fb0a b101 	mla	r1, sl, r1, fp
 80090e4:	4411      	add	r1, r2
 80090e6:	f8d9 2000 	ldr.w	r2, [r9]
 80090ea:	0c24      	lsrs	r4, r4, #16
 80090ec:	0c12      	lsrs	r2, r2, #16
 80090ee:	fb0a 2404 	mla	r4, sl, r4, r2
 80090f2:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 80090f6:	b289      	uxth	r1, r1
 80090f8:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 80090fc:	45f4      	cmp	ip, lr
 80090fe:	f849 1b04 	str.w	r1, [r9], #4
 8009102:	ea4f 4214 	mov.w	r2, r4, lsr #16
 8009106:	d8e4      	bhi.n	80090d2 <__multiply+0xaa>
 8009108:	9901      	ldr	r1, [sp, #4]
 800910a:	5072      	str	r2, [r6, r1]
 800910c:	9a03      	ldr	r2, [sp, #12]
 800910e:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8009112:	3304      	adds	r3, #4
 8009114:	f1b9 0f00 	cmp.w	r9, #0
 8009118:	d01f      	beq.n	800915a <__multiply+0x132>
 800911a:	6834      	ldr	r4, [r6, #0]
 800911c:	f105 0114 	add.w	r1, r5, #20
 8009120:	46b6      	mov	lr, r6
 8009122:	f04f 0a00 	mov.w	sl, #0
 8009126:	880a      	ldrh	r2, [r1, #0]
 8009128:	f8be b002 	ldrh.w	fp, [lr, #2]
 800912c:	fb09 b202 	mla	r2, r9, r2, fp
 8009130:	4492      	add	sl, r2
 8009132:	b2a4      	uxth	r4, r4
 8009134:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8009138:	f84e 4b04 	str.w	r4, [lr], #4
 800913c:	f851 4b04 	ldr.w	r4, [r1], #4
 8009140:	f8be 2000 	ldrh.w	r2, [lr]
 8009144:	0c24      	lsrs	r4, r4, #16
 8009146:	fb09 2404 	mla	r4, r9, r4, r2
 800914a:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 800914e:	458c      	cmp	ip, r1
 8009150:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8009154:	d8e7      	bhi.n	8009126 <__multiply+0xfe>
 8009156:	9a01      	ldr	r2, [sp, #4]
 8009158:	50b4      	str	r4, [r6, r2]
 800915a:	3604      	adds	r6, #4
 800915c:	e7a3      	b.n	80090a6 <__multiply+0x7e>
 800915e:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8009162:	2b00      	cmp	r3, #0
 8009164:	d1a5      	bne.n	80090b2 <__multiply+0x8a>
 8009166:	3f01      	subs	r7, #1
 8009168:	e7a1      	b.n	80090ae <__multiply+0x86>
 800916a:	bf00      	nop
 800916c:	0800a65f 	.word	0x0800a65f
 8009170:	0800a670 	.word	0x0800a670

08009174 <__pow5mult>:
 8009174:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009178:	4615      	mov	r5, r2
 800917a:	f012 0203 	ands.w	r2, r2, #3
 800917e:	4606      	mov	r6, r0
 8009180:	460f      	mov	r7, r1
 8009182:	d007      	beq.n	8009194 <__pow5mult+0x20>
 8009184:	4c25      	ldr	r4, [pc, #148]	; (800921c <__pow5mult+0xa8>)
 8009186:	3a01      	subs	r2, #1
 8009188:	2300      	movs	r3, #0
 800918a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800918e:	f7ff fe9b 	bl	8008ec8 <__multadd>
 8009192:	4607      	mov	r7, r0
 8009194:	10ad      	asrs	r5, r5, #2
 8009196:	d03d      	beq.n	8009214 <__pow5mult+0xa0>
 8009198:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800919a:	b97c      	cbnz	r4, 80091bc <__pow5mult+0x48>
 800919c:	2010      	movs	r0, #16
 800919e:	f7ff fe1b 	bl	8008dd8 <malloc>
 80091a2:	4602      	mov	r2, r0
 80091a4:	6270      	str	r0, [r6, #36]	; 0x24
 80091a6:	b928      	cbnz	r0, 80091b4 <__pow5mult+0x40>
 80091a8:	4b1d      	ldr	r3, [pc, #116]	; (8009220 <__pow5mult+0xac>)
 80091aa:	481e      	ldr	r0, [pc, #120]	; (8009224 <__pow5mult+0xb0>)
 80091ac:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80091b0:	f000 fbcc 	bl	800994c <__assert_func>
 80091b4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80091b8:	6004      	str	r4, [r0, #0]
 80091ba:	60c4      	str	r4, [r0, #12]
 80091bc:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80091c0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80091c4:	b94c      	cbnz	r4, 80091da <__pow5mult+0x66>
 80091c6:	f240 2171 	movw	r1, #625	; 0x271
 80091ca:	4630      	mov	r0, r6
 80091cc:	f7ff ff16 	bl	8008ffc <__i2b>
 80091d0:	2300      	movs	r3, #0
 80091d2:	f8c8 0008 	str.w	r0, [r8, #8]
 80091d6:	4604      	mov	r4, r0
 80091d8:	6003      	str	r3, [r0, #0]
 80091da:	f04f 0900 	mov.w	r9, #0
 80091de:	07eb      	lsls	r3, r5, #31
 80091e0:	d50a      	bpl.n	80091f8 <__pow5mult+0x84>
 80091e2:	4639      	mov	r1, r7
 80091e4:	4622      	mov	r2, r4
 80091e6:	4630      	mov	r0, r6
 80091e8:	f7ff ff1e 	bl	8009028 <__multiply>
 80091ec:	4639      	mov	r1, r7
 80091ee:	4680      	mov	r8, r0
 80091f0:	4630      	mov	r0, r6
 80091f2:	f7ff fe47 	bl	8008e84 <_Bfree>
 80091f6:	4647      	mov	r7, r8
 80091f8:	106d      	asrs	r5, r5, #1
 80091fa:	d00b      	beq.n	8009214 <__pow5mult+0xa0>
 80091fc:	6820      	ldr	r0, [r4, #0]
 80091fe:	b938      	cbnz	r0, 8009210 <__pow5mult+0x9c>
 8009200:	4622      	mov	r2, r4
 8009202:	4621      	mov	r1, r4
 8009204:	4630      	mov	r0, r6
 8009206:	f7ff ff0f 	bl	8009028 <__multiply>
 800920a:	6020      	str	r0, [r4, #0]
 800920c:	f8c0 9000 	str.w	r9, [r0]
 8009210:	4604      	mov	r4, r0
 8009212:	e7e4      	b.n	80091de <__pow5mult+0x6a>
 8009214:	4638      	mov	r0, r7
 8009216:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800921a:	bf00      	nop
 800921c:	0800a7c0 	.word	0x0800a7c0
 8009220:	0800a5e9 	.word	0x0800a5e9
 8009224:	0800a670 	.word	0x0800a670

08009228 <__lshift>:
 8009228:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800922c:	460c      	mov	r4, r1
 800922e:	6849      	ldr	r1, [r1, #4]
 8009230:	6923      	ldr	r3, [r4, #16]
 8009232:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8009236:	68a3      	ldr	r3, [r4, #8]
 8009238:	4607      	mov	r7, r0
 800923a:	4691      	mov	r9, r2
 800923c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009240:	f108 0601 	add.w	r6, r8, #1
 8009244:	42b3      	cmp	r3, r6
 8009246:	db0b      	blt.n	8009260 <__lshift+0x38>
 8009248:	4638      	mov	r0, r7
 800924a:	f7ff fddb 	bl	8008e04 <_Balloc>
 800924e:	4605      	mov	r5, r0
 8009250:	b948      	cbnz	r0, 8009266 <__lshift+0x3e>
 8009252:	4602      	mov	r2, r0
 8009254:	4b28      	ldr	r3, [pc, #160]	; (80092f8 <__lshift+0xd0>)
 8009256:	4829      	ldr	r0, [pc, #164]	; (80092fc <__lshift+0xd4>)
 8009258:	f240 11d9 	movw	r1, #473	; 0x1d9
 800925c:	f000 fb76 	bl	800994c <__assert_func>
 8009260:	3101      	adds	r1, #1
 8009262:	005b      	lsls	r3, r3, #1
 8009264:	e7ee      	b.n	8009244 <__lshift+0x1c>
 8009266:	2300      	movs	r3, #0
 8009268:	f100 0114 	add.w	r1, r0, #20
 800926c:	f100 0210 	add.w	r2, r0, #16
 8009270:	4618      	mov	r0, r3
 8009272:	4553      	cmp	r3, sl
 8009274:	db33      	blt.n	80092de <__lshift+0xb6>
 8009276:	6920      	ldr	r0, [r4, #16]
 8009278:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800927c:	f104 0314 	add.w	r3, r4, #20
 8009280:	f019 091f 	ands.w	r9, r9, #31
 8009284:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009288:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800928c:	d02b      	beq.n	80092e6 <__lshift+0xbe>
 800928e:	f1c9 0e20 	rsb	lr, r9, #32
 8009292:	468a      	mov	sl, r1
 8009294:	2200      	movs	r2, #0
 8009296:	6818      	ldr	r0, [r3, #0]
 8009298:	fa00 f009 	lsl.w	r0, r0, r9
 800929c:	4302      	orrs	r2, r0
 800929e:	f84a 2b04 	str.w	r2, [sl], #4
 80092a2:	f853 2b04 	ldr.w	r2, [r3], #4
 80092a6:	459c      	cmp	ip, r3
 80092a8:	fa22 f20e 	lsr.w	r2, r2, lr
 80092ac:	d8f3      	bhi.n	8009296 <__lshift+0x6e>
 80092ae:	ebac 0304 	sub.w	r3, ip, r4
 80092b2:	3b15      	subs	r3, #21
 80092b4:	f023 0303 	bic.w	r3, r3, #3
 80092b8:	3304      	adds	r3, #4
 80092ba:	f104 0015 	add.w	r0, r4, #21
 80092be:	4584      	cmp	ip, r0
 80092c0:	bf38      	it	cc
 80092c2:	2304      	movcc	r3, #4
 80092c4:	50ca      	str	r2, [r1, r3]
 80092c6:	b10a      	cbz	r2, 80092cc <__lshift+0xa4>
 80092c8:	f108 0602 	add.w	r6, r8, #2
 80092cc:	3e01      	subs	r6, #1
 80092ce:	4638      	mov	r0, r7
 80092d0:	612e      	str	r6, [r5, #16]
 80092d2:	4621      	mov	r1, r4
 80092d4:	f7ff fdd6 	bl	8008e84 <_Bfree>
 80092d8:	4628      	mov	r0, r5
 80092da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80092de:	f842 0f04 	str.w	r0, [r2, #4]!
 80092e2:	3301      	adds	r3, #1
 80092e4:	e7c5      	b.n	8009272 <__lshift+0x4a>
 80092e6:	3904      	subs	r1, #4
 80092e8:	f853 2b04 	ldr.w	r2, [r3], #4
 80092ec:	f841 2f04 	str.w	r2, [r1, #4]!
 80092f0:	459c      	cmp	ip, r3
 80092f2:	d8f9      	bhi.n	80092e8 <__lshift+0xc0>
 80092f4:	e7ea      	b.n	80092cc <__lshift+0xa4>
 80092f6:	bf00      	nop
 80092f8:	0800a65f 	.word	0x0800a65f
 80092fc:	0800a670 	.word	0x0800a670

08009300 <__mcmp>:
 8009300:	b530      	push	{r4, r5, lr}
 8009302:	6902      	ldr	r2, [r0, #16]
 8009304:	690c      	ldr	r4, [r1, #16]
 8009306:	1b12      	subs	r2, r2, r4
 8009308:	d10e      	bne.n	8009328 <__mcmp+0x28>
 800930a:	f100 0314 	add.w	r3, r0, #20
 800930e:	3114      	adds	r1, #20
 8009310:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8009314:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8009318:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800931c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8009320:	42a5      	cmp	r5, r4
 8009322:	d003      	beq.n	800932c <__mcmp+0x2c>
 8009324:	d305      	bcc.n	8009332 <__mcmp+0x32>
 8009326:	2201      	movs	r2, #1
 8009328:	4610      	mov	r0, r2
 800932a:	bd30      	pop	{r4, r5, pc}
 800932c:	4283      	cmp	r3, r0
 800932e:	d3f3      	bcc.n	8009318 <__mcmp+0x18>
 8009330:	e7fa      	b.n	8009328 <__mcmp+0x28>
 8009332:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009336:	e7f7      	b.n	8009328 <__mcmp+0x28>

08009338 <__mdiff>:
 8009338:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800933c:	460c      	mov	r4, r1
 800933e:	4606      	mov	r6, r0
 8009340:	4611      	mov	r1, r2
 8009342:	4620      	mov	r0, r4
 8009344:	4617      	mov	r7, r2
 8009346:	f7ff ffdb 	bl	8009300 <__mcmp>
 800934a:	1e05      	subs	r5, r0, #0
 800934c:	d110      	bne.n	8009370 <__mdiff+0x38>
 800934e:	4629      	mov	r1, r5
 8009350:	4630      	mov	r0, r6
 8009352:	f7ff fd57 	bl	8008e04 <_Balloc>
 8009356:	b930      	cbnz	r0, 8009366 <__mdiff+0x2e>
 8009358:	4b39      	ldr	r3, [pc, #228]	; (8009440 <__mdiff+0x108>)
 800935a:	4602      	mov	r2, r0
 800935c:	f240 2132 	movw	r1, #562	; 0x232
 8009360:	4838      	ldr	r0, [pc, #224]	; (8009444 <__mdiff+0x10c>)
 8009362:	f000 faf3 	bl	800994c <__assert_func>
 8009366:	2301      	movs	r3, #1
 8009368:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800936c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009370:	bfa4      	itt	ge
 8009372:	463b      	movge	r3, r7
 8009374:	4627      	movge	r7, r4
 8009376:	4630      	mov	r0, r6
 8009378:	6879      	ldr	r1, [r7, #4]
 800937a:	bfa6      	itte	ge
 800937c:	461c      	movge	r4, r3
 800937e:	2500      	movge	r5, #0
 8009380:	2501      	movlt	r5, #1
 8009382:	f7ff fd3f 	bl	8008e04 <_Balloc>
 8009386:	b920      	cbnz	r0, 8009392 <__mdiff+0x5a>
 8009388:	4b2d      	ldr	r3, [pc, #180]	; (8009440 <__mdiff+0x108>)
 800938a:	4602      	mov	r2, r0
 800938c:	f44f 7110 	mov.w	r1, #576	; 0x240
 8009390:	e7e6      	b.n	8009360 <__mdiff+0x28>
 8009392:	693e      	ldr	r6, [r7, #16]
 8009394:	60c5      	str	r5, [r0, #12]
 8009396:	6925      	ldr	r5, [r4, #16]
 8009398:	f107 0114 	add.w	r1, r7, #20
 800939c:	f104 0914 	add.w	r9, r4, #20
 80093a0:	f100 0e14 	add.w	lr, r0, #20
 80093a4:	f107 0210 	add.w	r2, r7, #16
 80093a8:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 80093ac:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 80093b0:	46f2      	mov	sl, lr
 80093b2:	2700      	movs	r7, #0
 80093b4:	f859 3b04 	ldr.w	r3, [r9], #4
 80093b8:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80093bc:	fa1f f883 	uxth.w	r8, r3
 80093c0:	fa17 f78b 	uxtah	r7, r7, fp
 80093c4:	0c1b      	lsrs	r3, r3, #16
 80093c6:	eba7 0808 	sub.w	r8, r7, r8
 80093ca:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80093ce:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80093d2:	fa1f f888 	uxth.w	r8, r8
 80093d6:	141f      	asrs	r7, r3, #16
 80093d8:	454d      	cmp	r5, r9
 80093da:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80093de:	f84a 3b04 	str.w	r3, [sl], #4
 80093e2:	d8e7      	bhi.n	80093b4 <__mdiff+0x7c>
 80093e4:	1b2b      	subs	r3, r5, r4
 80093e6:	3b15      	subs	r3, #21
 80093e8:	f023 0303 	bic.w	r3, r3, #3
 80093ec:	3304      	adds	r3, #4
 80093ee:	3415      	adds	r4, #21
 80093f0:	42a5      	cmp	r5, r4
 80093f2:	bf38      	it	cc
 80093f4:	2304      	movcc	r3, #4
 80093f6:	4419      	add	r1, r3
 80093f8:	4473      	add	r3, lr
 80093fa:	469e      	mov	lr, r3
 80093fc:	460d      	mov	r5, r1
 80093fe:	4565      	cmp	r5, ip
 8009400:	d30e      	bcc.n	8009420 <__mdiff+0xe8>
 8009402:	f10c 0203 	add.w	r2, ip, #3
 8009406:	1a52      	subs	r2, r2, r1
 8009408:	f022 0203 	bic.w	r2, r2, #3
 800940c:	3903      	subs	r1, #3
 800940e:	458c      	cmp	ip, r1
 8009410:	bf38      	it	cc
 8009412:	2200      	movcc	r2, #0
 8009414:	441a      	add	r2, r3
 8009416:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800941a:	b17b      	cbz	r3, 800943c <__mdiff+0x104>
 800941c:	6106      	str	r6, [r0, #16]
 800941e:	e7a5      	b.n	800936c <__mdiff+0x34>
 8009420:	f855 8b04 	ldr.w	r8, [r5], #4
 8009424:	fa17 f488 	uxtah	r4, r7, r8
 8009428:	1422      	asrs	r2, r4, #16
 800942a:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 800942e:	b2a4      	uxth	r4, r4
 8009430:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8009434:	f84e 4b04 	str.w	r4, [lr], #4
 8009438:	1417      	asrs	r7, r2, #16
 800943a:	e7e0      	b.n	80093fe <__mdiff+0xc6>
 800943c:	3e01      	subs	r6, #1
 800943e:	e7ea      	b.n	8009416 <__mdiff+0xde>
 8009440:	0800a65f 	.word	0x0800a65f
 8009444:	0800a670 	.word	0x0800a670

08009448 <__d2b>:
 8009448:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800944c:	4689      	mov	r9, r1
 800944e:	2101      	movs	r1, #1
 8009450:	ec57 6b10 	vmov	r6, r7, d0
 8009454:	4690      	mov	r8, r2
 8009456:	f7ff fcd5 	bl	8008e04 <_Balloc>
 800945a:	4604      	mov	r4, r0
 800945c:	b930      	cbnz	r0, 800946c <__d2b+0x24>
 800945e:	4602      	mov	r2, r0
 8009460:	4b25      	ldr	r3, [pc, #148]	; (80094f8 <__d2b+0xb0>)
 8009462:	4826      	ldr	r0, [pc, #152]	; (80094fc <__d2b+0xb4>)
 8009464:	f240 310a 	movw	r1, #778	; 0x30a
 8009468:	f000 fa70 	bl	800994c <__assert_func>
 800946c:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8009470:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8009474:	bb35      	cbnz	r5, 80094c4 <__d2b+0x7c>
 8009476:	2e00      	cmp	r6, #0
 8009478:	9301      	str	r3, [sp, #4]
 800947a:	d028      	beq.n	80094ce <__d2b+0x86>
 800947c:	4668      	mov	r0, sp
 800947e:	9600      	str	r6, [sp, #0]
 8009480:	f7ff fd8c 	bl	8008f9c <__lo0bits>
 8009484:	9900      	ldr	r1, [sp, #0]
 8009486:	b300      	cbz	r0, 80094ca <__d2b+0x82>
 8009488:	9a01      	ldr	r2, [sp, #4]
 800948a:	f1c0 0320 	rsb	r3, r0, #32
 800948e:	fa02 f303 	lsl.w	r3, r2, r3
 8009492:	430b      	orrs	r3, r1
 8009494:	40c2      	lsrs	r2, r0
 8009496:	6163      	str	r3, [r4, #20]
 8009498:	9201      	str	r2, [sp, #4]
 800949a:	9b01      	ldr	r3, [sp, #4]
 800949c:	61a3      	str	r3, [r4, #24]
 800949e:	2b00      	cmp	r3, #0
 80094a0:	bf14      	ite	ne
 80094a2:	2202      	movne	r2, #2
 80094a4:	2201      	moveq	r2, #1
 80094a6:	6122      	str	r2, [r4, #16]
 80094a8:	b1d5      	cbz	r5, 80094e0 <__d2b+0x98>
 80094aa:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80094ae:	4405      	add	r5, r0
 80094b0:	f8c9 5000 	str.w	r5, [r9]
 80094b4:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80094b8:	f8c8 0000 	str.w	r0, [r8]
 80094bc:	4620      	mov	r0, r4
 80094be:	b003      	add	sp, #12
 80094c0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80094c4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80094c8:	e7d5      	b.n	8009476 <__d2b+0x2e>
 80094ca:	6161      	str	r1, [r4, #20]
 80094cc:	e7e5      	b.n	800949a <__d2b+0x52>
 80094ce:	a801      	add	r0, sp, #4
 80094d0:	f7ff fd64 	bl	8008f9c <__lo0bits>
 80094d4:	9b01      	ldr	r3, [sp, #4]
 80094d6:	6163      	str	r3, [r4, #20]
 80094d8:	2201      	movs	r2, #1
 80094da:	6122      	str	r2, [r4, #16]
 80094dc:	3020      	adds	r0, #32
 80094de:	e7e3      	b.n	80094a8 <__d2b+0x60>
 80094e0:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80094e4:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80094e8:	f8c9 0000 	str.w	r0, [r9]
 80094ec:	6918      	ldr	r0, [r3, #16]
 80094ee:	f7ff fd35 	bl	8008f5c <__hi0bits>
 80094f2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80094f6:	e7df      	b.n	80094b8 <__d2b+0x70>
 80094f8:	0800a65f 	.word	0x0800a65f
 80094fc:	0800a670 	.word	0x0800a670

08009500 <_calloc_r>:
 8009500:	b513      	push	{r0, r1, r4, lr}
 8009502:	434a      	muls	r2, r1
 8009504:	4611      	mov	r1, r2
 8009506:	9201      	str	r2, [sp, #4]
 8009508:	f000 f85a 	bl	80095c0 <_malloc_r>
 800950c:	4604      	mov	r4, r0
 800950e:	b118      	cbz	r0, 8009518 <_calloc_r+0x18>
 8009510:	9a01      	ldr	r2, [sp, #4]
 8009512:	2100      	movs	r1, #0
 8009514:	f7fe f950 	bl	80077b8 <memset>
 8009518:	4620      	mov	r0, r4
 800951a:	b002      	add	sp, #8
 800951c:	bd10      	pop	{r4, pc}
	...

08009520 <_free_r>:
 8009520:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009522:	2900      	cmp	r1, #0
 8009524:	d048      	beq.n	80095b8 <_free_r+0x98>
 8009526:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800952a:	9001      	str	r0, [sp, #4]
 800952c:	2b00      	cmp	r3, #0
 800952e:	f1a1 0404 	sub.w	r4, r1, #4
 8009532:	bfb8      	it	lt
 8009534:	18e4      	addlt	r4, r4, r3
 8009536:	f000 fa65 	bl	8009a04 <__malloc_lock>
 800953a:	4a20      	ldr	r2, [pc, #128]	; (80095bc <_free_r+0x9c>)
 800953c:	9801      	ldr	r0, [sp, #4]
 800953e:	6813      	ldr	r3, [r2, #0]
 8009540:	4615      	mov	r5, r2
 8009542:	b933      	cbnz	r3, 8009552 <_free_r+0x32>
 8009544:	6063      	str	r3, [r4, #4]
 8009546:	6014      	str	r4, [r2, #0]
 8009548:	b003      	add	sp, #12
 800954a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800954e:	f000 ba5f 	b.w	8009a10 <__malloc_unlock>
 8009552:	42a3      	cmp	r3, r4
 8009554:	d90b      	bls.n	800956e <_free_r+0x4e>
 8009556:	6821      	ldr	r1, [r4, #0]
 8009558:	1862      	adds	r2, r4, r1
 800955a:	4293      	cmp	r3, r2
 800955c:	bf04      	itt	eq
 800955e:	681a      	ldreq	r2, [r3, #0]
 8009560:	685b      	ldreq	r3, [r3, #4]
 8009562:	6063      	str	r3, [r4, #4]
 8009564:	bf04      	itt	eq
 8009566:	1852      	addeq	r2, r2, r1
 8009568:	6022      	streq	r2, [r4, #0]
 800956a:	602c      	str	r4, [r5, #0]
 800956c:	e7ec      	b.n	8009548 <_free_r+0x28>
 800956e:	461a      	mov	r2, r3
 8009570:	685b      	ldr	r3, [r3, #4]
 8009572:	b10b      	cbz	r3, 8009578 <_free_r+0x58>
 8009574:	42a3      	cmp	r3, r4
 8009576:	d9fa      	bls.n	800956e <_free_r+0x4e>
 8009578:	6811      	ldr	r1, [r2, #0]
 800957a:	1855      	adds	r5, r2, r1
 800957c:	42a5      	cmp	r5, r4
 800957e:	d10b      	bne.n	8009598 <_free_r+0x78>
 8009580:	6824      	ldr	r4, [r4, #0]
 8009582:	4421      	add	r1, r4
 8009584:	1854      	adds	r4, r2, r1
 8009586:	42a3      	cmp	r3, r4
 8009588:	6011      	str	r1, [r2, #0]
 800958a:	d1dd      	bne.n	8009548 <_free_r+0x28>
 800958c:	681c      	ldr	r4, [r3, #0]
 800958e:	685b      	ldr	r3, [r3, #4]
 8009590:	6053      	str	r3, [r2, #4]
 8009592:	4421      	add	r1, r4
 8009594:	6011      	str	r1, [r2, #0]
 8009596:	e7d7      	b.n	8009548 <_free_r+0x28>
 8009598:	d902      	bls.n	80095a0 <_free_r+0x80>
 800959a:	230c      	movs	r3, #12
 800959c:	6003      	str	r3, [r0, #0]
 800959e:	e7d3      	b.n	8009548 <_free_r+0x28>
 80095a0:	6825      	ldr	r5, [r4, #0]
 80095a2:	1961      	adds	r1, r4, r5
 80095a4:	428b      	cmp	r3, r1
 80095a6:	bf04      	itt	eq
 80095a8:	6819      	ldreq	r1, [r3, #0]
 80095aa:	685b      	ldreq	r3, [r3, #4]
 80095ac:	6063      	str	r3, [r4, #4]
 80095ae:	bf04      	itt	eq
 80095b0:	1949      	addeq	r1, r1, r5
 80095b2:	6021      	streq	r1, [r4, #0]
 80095b4:	6054      	str	r4, [r2, #4]
 80095b6:	e7c7      	b.n	8009548 <_free_r+0x28>
 80095b8:	b003      	add	sp, #12
 80095ba:	bd30      	pop	{r4, r5, pc}
 80095bc:	20000200 	.word	0x20000200

080095c0 <_malloc_r>:
 80095c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80095c2:	1ccd      	adds	r5, r1, #3
 80095c4:	f025 0503 	bic.w	r5, r5, #3
 80095c8:	3508      	adds	r5, #8
 80095ca:	2d0c      	cmp	r5, #12
 80095cc:	bf38      	it	cc
 80095ce:	250c      	movcc	r5, #12
 80095d0:	2d00      	cmp	r5, #0
 80095d2:	4606      	mov	r6, r0
 80095d4:	db01      	blt.n	80095da <_malloc_r+0x1a>
 80095d6:	42a9      	cmp	r1, r5
 80095d8:	d903      	bls.n	80095e2 <_malloc_r+0x22>
 80095da:	230c      	movs	r3, #12
 80095dc:	6033      	str	r3, [r6, #0]
 80095de:	2000      	movs	r0, #0
 80095e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80095e2:	f000 fa0f 	bl	8009a04 <__malloc_lock>
 80095e6:	4921      	ldr	r1, [pc, #132]	; (800966c <_malloc_r+0xac>)
 80095e8:	680a      	ldr	r2, [r1, #0]
 80095ea:	4614      	mov	r4, r2
 80095ec:	b99c      	cbnz	r4, 8009616 <_malloc_r+0x56>
 80095ee:	4f20      	ldr	r7, [pc, #128]	; (8009670 <_malloc_r+0xb0>)
 80095f0:	683b      	ldr	r3, [r7, #0]
 80095f2:	b923      	cbnz	r3, 80095fe <_malloc_r+0x3e>
 80095f4:	4621      	mov	r1, r4
 80095f6:	4630      	mov	r0, r6
 80095f8:	f000 f998 	bl	800992c <_sbrk_r>
 80095fc:	6038      	str	r0, [r7, #0]
 80095fe:	4629      	mov	r1, r5
 8009600:	4630      	mov	r0, r6
 8009602:	f000 f993 	bl	800992c <_sbrk_r>
 8009606:	1c43      	adds	r3, r0, #1
 8009608:	d123      	bne.n	8009652 <_malloc_r+0x92>
 800960a:	230c      	movs	r3, #12
 800960c:	6033      	str	r3, [r6, #0]
 800960e:	4630      	mov	r0, r6
 8009610:	f000 f9fe 	bl	8009a10 <__malloc_unlock>
 8009614:	e7e3      	b.n	80095de <_malloc_r+0x1e>
 8009616:	6823      	ldr	r3, [r4, #0]
 8009618:	1b5b      	subs	r3, r3, r5
 800961a:	d417      	bmi.n	800964c <_malloc_r+0x8c>
 800961c:	2b0b      	cmp	r3, #11
 800961e:	d903      	bls.n	8009628 <_malloc_r+0x68>
 8009620:	6023      	str	r3, [r4, #0]
 8009622:	441c      	add	r4, r3
 8009624:	6025      	str	r5, [r4, #0]
 8009626:	e004      	b.n	8009632 <_malloc_r+0x72>
 8009628:	6863      	ldr	r3, [r4, #4]
 800962a:	42a2      	cmp	r2, r4
 800962c:	bf0c      	ite	eq
 800962e:	600b      	streq	r3, [r1, #0]
 8009630:	6053      	strne	r3, [r2, #4]
 8009632:	4630      	mov	r0, r6
 8009634:	f000 f9ec 	bl	8009a10 <__malloc_unlock>
 8009638:	f104 000b 	add.w	r0, r4, #11
 800963c:	1d23      	adds	r3, r4, #4
 800963e:	f020 0007 	bic.w	r0, r0, #7
 8009642:	1ac2      	subs	r2, r0, r3
 8009644:	d0cc      	beq.n	80095e0 <_malloc_r+0x20>
 8009646:	1a1b      	subs	r3, r3, r0
 8009648:	50a3      	str	r3, [r4, r2]
 800964a:	e7c9      	b.n	80095e0 <_malloc_r+0x20>
 800964c:	4622      	mov	r2, r4
 800964e:	6864      	ldr	r4, [r4, #4]
 8009650:	e7cc      	b.n	80095ec <_malloc_r+0x2c>
 8009652:	1cc4      	adds	r4, r0, #3
 8009654:	f024 0403 	bic.w	r4, r4, #3
 8009658:	42a0      	cmp	r0, r4
 800965a:	d0e3      	beq.n	8009624 <_malloc_r+0x64>
 800965c:	1a21      	subs	r1, r4, r0
 800965e:	4630      	mov	r0, r6
 8009660:	f000 f964 	bl	800992c <_sbrk_r>
 8009664:	3001      	adds	r0, #1
 8009666:	d1dd      	bne.n	8009624 <_malloc_r+0x64>
 8009668:	e7cf      	b.n	800960a <_malloc_r+0x4a>
 800966a:	bf00      	nop
 800966c:	20000200 	.word	0x20000200
 8009670:	20000204 	.word	0x20000204

08009674 <__ssputs_r>:
 8009674:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009678:	688e      	ldr	r6, [r1, #8]
 800967a:	429e      	cmp	r6, r3
 800967c:	4682      	mov	sl, r0
 800967e:	460c      	mov	r4, r1
 8009680:	4690      	mov	r8, r2
 8009682:	461f      	mov	r7, r3
 8009684:	d838      	bhi.n	80096f8 <__ssputs_r+0x84>
 8009686:	898a      	ldrh	r2, [r1, #12]
 8009688:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800968c:	d032      	beq.n	80096f4 <__ssputs_r+0x80>
 800968e:	6825      	ldr	r5, [r4, #0]
 8009690:	6909      	ldr	r1, [r1, #16]
 8009692:	eba5 0901 	sub.w	r9, r5, r1
 8009696:	6965      	ldr	r5, [r4, #20]
 8009698:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800969c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80096a0:	3301      	adds	r3, #1
 80096a2:	444b      	add	r3, r9
 80096a4:	106d      	asrs	r5, r5, #1
 80096a6:	429d      	cmp	r5, r3
 80096a8:	bf38      	it	cc
 80096aa:	461d      	movcc	r5, r3
 80096ac:	0553      	lsls	r3, r2, #21
 80096ae:	d531      	bpl.n	8009714 <__ssputs_r+0xa0>
 80096b0:	4629      	mov	r1, r5
 80096b2:	f7ff ff85 	bl	80095c0 <_malloc_r>
 80096b6:	4606      	mov	r6, r0
 80096b8:	b950      	cbnz	r0, 80096d0 <__ssputs_r+0x5c>
 80096ba:	230c      	movs	r3, #12
 80096bc:	f8ca 3000 	str.w	r3, [sl]
 80096c0:	89a3      	ldrh	r3, [r4, #12]
 80096c2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80096c6:	81a3      	strh	r3, [r4, #12]
 80096c8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80096cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80096d0:	6921      	ldr	r1, [r4, #16]
 80096d2:	464a      	mov	r2, r9
 80096d4:	f7ff fb88 	bl	8008de8 <memcpy>
 80096d8:	89a3      	ldrh	r3, [r4, #12]
 80096da:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80096de:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80096e2:	81a3      	strh	r3, [r4, #12]
 80096e4:	6126      	str	r6, [r4, #16]
 80096e6:	6165      	str	r5, [r4, #20]
 80096e8:	444e      	add	r6, r9
 80096ea:	eba5 0509 	sub.w	r5, r5, r9
 80096ee:	6026      	str	r6, [r4, #0]
 80096f0:	60a5      	str	r5, [r4, #8]
 80096f2:	463e      	mov	r6, r7
 80096f4:	42be      	cmp	r6, r7
 80096f6:	d900      	bls.n	80096fa <__ssputs_r+0x86>
 80096f8:	463e      	mov	r6, r7
 80096fa:	4632      	mov	r2, r6
 80096fc:	6820      	ldr	r0, [r4, #0]
 80096fe:	4641      	mov	r1, r8
 8009700:	f000 f966 	bl	80099d0 <memmove>
 8009704:	68a3      	ldr	r3, [r4, #8]
 8009706:	6822      	ldr	r2, [r4, #0]
 8009708:	1b9b      	subs	r3, r3, r6
 800970a:	4432      	add	r2, r6
 800970c:	60a3      	str	r3, [r4, #8]
 800970e:	6022      	str	r2, [r4, #0]
 8009710:	2000      	movs	r0, #0
 8009712:	e7db      	b.n	80096cc <__ssputs_r+0x58>
 8009714:	462a      	mov	r2, r5
 8009716:	f000 f981 	bl	8009a1c <_realloc_r>
 800971a:	4606      	mov	r6, r0
 800971c:	2800      	cmp	r0, #0
 800971e:	d1e1      	bne.n	80096e4 <__ssputs_r+0x70>
 8009720:	6921      	ldr	r1, [r4, #16]
 8009722:	4650      	mov	r0, sl
 8009724:	f7ff fefc 	bl	8009520 <_free_r>
 8009728:	e7c7      	b.n	80096ba <__ssputs_r+0x46>
	...

0800972c <_svfiprintf_r>:
 800972c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009730:	4698      	mov	r8, r3
 8009732:	898b      	ldrh	r3, [r1, #12]
 8009734:	061b      	lsls	r3, r3, #24
 8009736:	b09d      	sub	sp, #116	; 0x74
 8009738:	4607      	mov	r7, r0
 800973a:	460d      	mov	r5, r1
 800973c:	4614      	mov	r4, r2
 800973e:	d50e      	bpl.n	800975e <_svfiprintf_r+0x32>
 8009740:	690b      	ldr	r3, [r1, #16]
 8009742:	b963      	cbnz	r3, 800975e <_svfiprintf_r+0x32>
 8009744:	2140      	movs	r1, #64	; 0x40
 8009746:	f7ff ff3b 	bl	80095c0 <_malloc_r>
 800974a:	6028      	str	r0, [r5, #0]
 800974c:	6128      	str	r0, [r5, #16]
 800974e:	b920      	cbnz	r0, 800975a <_svfiprintf_r+0x2e>
 8009750:	230c      	movs	r3, #12
 8009752:	603b      	str	r3, [r7, #0]
 8009754:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009758:	e0d1      	b.n	80098fe <_svfiprintf_r+0x1d2>
 800975a:	2340      	movs	r3, #64	; 0x40
 800975c:	616b      	str	r3, [r5, #20]
 800975e:	2300      	movs	r3, #0
 8009760:	9309      	str	r3, [sp, #36]	; 0x24
 8009762:	2320      	movs	r3, #32
 8009764:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009768:	f8cd 800c 	str.w	r8, [sp, #12]
 800976c:	2330      	movs	r3, #48	; 0x30
 800976e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8009918 <_svfiprintf_r+0x1ec>
 8009772:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009776:	f04f 0901 	mov.w	r9, #1
 800977a:	4623      	mov	r3, r4
 800977c:	469a      	mov	sl, r3
 800977e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009782:	b10a      	cbz	r2, 8009788 <_svfiprintf_r+0x5c>
 8009784:	2a25      	cmp	r2, #37	; 0x25
 8009786:	d1f9      	bne.n	800977c <_svfiprintf_r+0x50>
 8009788:	ebba 0b04 	subs.w	fp, sl, r4
 800978c:	d00b      	beq.n	80097a6 <_svfiprintf_r+0x7a>
 800978e:	465b      	mov	r3, fp
 8009790:	4622      	mov	r2, r4
 8009792:	4629      	mov	r1, r5
 8009794:	4638      	mov	r0, r7
 8009796:	f7ff ff6d 	bl	8009674 <__ssputs_r>
 800979a:	3001      	adds	r0, #1
 800979c:	f000 80aa 	beq.w	80098f4 <_svfiprintf_r+0x1c8>
 80097a0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80097a2:	445a      	add	r2, fp
 80097a4:	9209      	str	r2, [sp, #36]	; 0x24
 80097a6:	f89a 3000 	ldrb.w	r3, [sl]
 80097aa:	2b00      	cmp	r3, #0
 80097ac:	f000 80a2 	beq.w	80098f4 <_svfiprintf_r+0x1c8>
 80097b0:	2300      	movs	r3, #0
 80097b2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80097b6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80097ba:	f10a 0a01 	add.w	sl, sl, #1
 80097be:	9304      	str	r3, [sp, #16]
 80097c0:	9307      	str	r3, [sp, #28]
 80097c2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80097c6:	931a      	str	r3, [sp, #104]	; 0x68
 80097c8:	4654      	mov	r4, sl
 80097ca:	2205      	movs	r2, #5
 80097cc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80097d0:	4851      	ldr	r0, [pc, #324]	; (8009918 <_svfiprintf_r+0x1ec>)
 80097d2:	f7f6 fd05 	bl	80001e0 <memchr>
 80097d6:	9a04      	ldr	r2, [sp, #16]
 80097d8:	b9d8      	cbnz	r0, 8009812 <_svfiprintf_r+0xe6>
 80097da:	06d0      	lsls	r0, r2, #27
 80097dc:	bf44      	itt	mi
 80097de:	2320      	movmi	r3, #32
 80097e0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80097e4:	0711      	lsls	r1, r2, #28
 80097e6:	bf44      	itt	mi
 80097e8:	232b      	movmi	r3, #43	; 0x2b
 80097ea:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80097ee:	f89a 3000 	ldrb.w	r3, [sl]
 80097f2:	2b2a      	cmp	r3, #42	; 0x2a
 80097f4:	d015      	beq.n	8009822 <_svfiprintf_r+0xf6>
 80097f6:	9a07      	ldr	r2, [sp, #28]
 80097f8:	4654      	mov	r4, sl
 80097fa:	2000      	movs	r0, #0
 80097fc:	f04f 0c0a 	mov.w	ip, #10
 8009800:	4621      	mov	r1, r4
 8009802:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009806:	3b30      	subs	r3, #48	; 0x30
 8009808:	2b09      	cmp	r3, #9
 800980a:	d94e      	bls.n	80098aa <_svfiprintf_r+0x17e>
 800980c:	b1b0      	cbz	r0, 800983c <_svfiprintf_r+0x110>
 800980e:	9207      	str	r2, [sp, #28]
 8009810:	e014      	b.n	800983c <_svfiprintf_r+0x110>
 8009812:	eba0 0308 	sub.w	r3, r0, r8
 8009816:	fa09 f303 	lsl.w	r3, r9, r3
 800981a:	4313      	orrs	r3, r2
 800981c:	9304      	str	r3, [sp, #16]
 800981e:	46a2      	mov	sl, r4
 8009820:	e7d2      	b.n	80097c8 <_svfiprintf_r+0x9c>
 8009822:	9b03      	ldr	r3, [sp, #12]
 8009824:	1d19      	adds	r1, r3, #4
 8009826:	681b      	ldr	r3, [r3, #0]
 8009828:	9103      	str	r1, [sp, #12]
 800982a:	2b00      	cmp	r3, #0
 800982c:	bfbb      	ittet	lt
 800982e:	425b      	neglt	r3, r3
 8009830:	f042 0202 	orrlt.w	r2, r2, #2
 8009834:	9307      	strge	r3, [sp, #28]
 8009836:	9307      	strlt	r3, [sp, #28]
 8009838:	bfb8      	it	lt
 800983a:	9204      	strlt	r2, [sp, #16]
 800983c:	7823      	ldrb	r3, [r4, #0]
 800983e:	2b2e      	cmp	r3, #46	; 0x2e
 8009840:	d10c      	bne.n	800985c <_svfiprintf_r+0x130>
 8009842:	7863      	ldrb	r3, [r4, #1]
 8009844:	2b2a      	cmp	r3, #42	; 0x2a
 8009846:	d135      	bne.n	80098b4 <_svfiprintf_r+0x188>
 8009848:	9b03      	ldr	r3, [sp, #12]
 800984a:	1d1a      	adds	r2, r3, #4
 800984c:	681b      	ldr	r3, [r3, #0]
 800984e:	9203      	str	r2, [sp, #12]
 8009850:	2b00      	cmp	r3, #0
 8009852:	bfb8      	it	lt
 8009854:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8009858:	3402      	adds	r4, #2
 800985a:	9305      	str	r3, [sp, #20]
 800985c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8009928 <_svfiprintf_r+0x1fc>
 8009860:	7821      	ldrb	r1, [r4, #0]
 8009862:	2203      	movs	r2, #3
 8009864:	4650      	mov	r0, sl
 8009866:	f7f6 fcbb 	bl	80001e0 <memchr>
 800986a:	b140      	cbz	r0, 800987e <_svfiprintf_r+0x152>
 800986c:	2340      	movs	r3, #64	; 0x40
 800986e:	eba0 000a 	sub.w	r0, r0, sl
 8009872:	fa03 f000 	lsl.w	r0, r3, r0
 8009876:	9b04      	ldr	r3, [sp, #16]
 8009878:	4303      	orrs	r3, r0
 800987a:	3401      	adds	r4, #1
 800987c:	9304      	str	r3, [sp, #16]
 800987e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009882:	4826      	ldr	r0, [pc, #152]	; (800991c <_svfiprintf_r+0x1f0>)
 8009884:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009888:	2206      	movs	r2, #6
 800988a:	f7f6 fca9 	bl	80001e0 <memchr>
 800988e:	2800      	cmp	r0, #0
 8009890:	d038      	beq.n	8009904 <_svfiprintf_r+0x1d8>
 8009892:	4b23      	ldr	r3, [pc, #140]	; (8009920 <_svfiprintf_r+0x1f4>)
 8009894:	bb1b      	cbnz	r3, 80098de <_svfiprintf_r+0x1b2>
 8009896:	9b03      	ldr	r3, [sp, #12]
 8009898:	3307      	adds	r3, #7
 800989a:	f023 0307 	bic.w	r3, r3, #7
 800989e:	3308      	adds	r3, #8
 80098a0:	9303      	str	r3, [sp, #12]
 80098a2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80098a4:	4433      	add	r3, r6
 80098a6:	9309      	str	r3, [sp, #36]	; 0x24
 80098a8:	e767      	b.n	800977a <_svfiprintf_r+0x4e>
 80098aa:	fb0c 3202 	mla	r2, ip, r2, r3
 80098ae:	460c      	mov	r4, r1
 80098b0:	2001      	movs	r0, #1
 80098b2:	e7a5      	b.n	8009800 <_svfiprintf_r+0xd4>
 80098b4:	2300      	movs	r3, #0
 80098b6:	3401      	adds	r4, #1
 80098b8:	9305      	str	r3, [sp, #20]
 80098ba:	4619      	mov	r1, r3
 80098bc:	f04f 0c0a 	mov.w	ip, #10
 80098c0:	4620      	mov	r0, r4
 80098c2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80098c6:	3a30      	subs	r2, #48	; 0x30
 80098c8:	2a09      	cmp	r2, #9
 80098ca:	d903      	bls.n	80098d4 <_svfiprintf_r+0x1a8>
 80098cc:	2b00      	cmp	r3, #0
 80098ce:	d0c5      	beq.n	800985c <_svfiprintf_r+0x130>
 80098d0:	9105      	str	r1, [sp, #20]
 80098d2:	e7c3      	b.n	800985c <_svfiprintf_r+0x130>
 80098d4:	fb0c 2101 	mla	r1, ip, r1, r2
 80098d8:	4604      	mov	r4, r0
 80098da:	2301      	movs	r3, #1
 80098dc:	e7f0      	b.n	80098c0 <_svfiprintf_r+0x194>
 80098de:	ab03      	add	r3, sp, #12
 80098e0:	9300      	str	r3, [sp, #0]
 80098e2:	462a      	mov	r2, r5
 80098e4:	4b0f      	ldr	r3, [pc, #60]	; (8009924 <_svfiprintf_r+0x1f8>)
 80098e6:	a904      	add	r1, sp, #16
 80098e8:	4638      	mov	r0, r7
 80098ea:	f7fe f80d 	bl	8007908 <_printf_float>
 80098ee:	1c42      	adds	r2, r0, #1
 80098f0:	4606      	mov	r6, r0
 80098f2:	d1d6      	bne.n	80098a2 <_svfiprintf_r+0x176>
 80098f4:	89ab      	ldrh	r3, [r5, #12]
 80098f6:	065b      	lsls	r3, r3, #25
 80098f8:	f53f af2c 	bmi.w	8009754 <_svfiprintf_r+0x28>
 80098fc:	9809      	ldr	r0, [sp, #36]	; 0x24
 80098fe:	b01d      	add	sp, #116	; 0x74
 8009900:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009904:	ab03      	add	r3, sp, #12
 8009906:	9300      	str	r3, [sp, #0]
 8009908:	462a      	mov	r2, r5
 800990a:	4b06      	ldr	r3, [pc, #24]	; (8009924 <_svfiprintf_r+0x1f8>)
 800990c:	a904      	add	r1, sp, #16
 800990e:	4638      	mov	r0, r7
 8009910:	f7fe fa9e 	bl	8007e50 <_printf_i>
 8009914:	e7eb      	b.n	80098ee <_svfiprintf_r+0x1c2>
 8009916:	bf00      	nop
 8009918:	0800a7cc 	.word	0x0800a7cc
 800991c:	0800a7d6 	.word	0x0800a7d6
 8009920:	08007909 	.word	0x08007909
 8009924:	08009675 	.word	0x08009675
 8009928:	0800a7d2 	.word	0x0800a7d2

0800992c <_sbrk_r>:
 800992c:	b538      	push	{r3, r4, r5, lr}
 800992e:	4d06      	ldr	r5, [pc, #24]	; (8009948 <_sbrk_r+0x1c>)
 8009930:	2300      	movs	r3, #0
 8009932:	4604      	mov	r4, r0
 8009934:	4608      	mov	r0, r1
 8009936:	602b      	str	r3, [r5, #0]
 8009938:	f7f8 fa86 	bl	8001e48 <_sbrk>
 800993c:	1c43      	adds	r3, r0, #1
 800993e:	d102      	bne.n	8009946 <_sbrk_r+0x1a>
 8009940:	682b      	ldr	r3, [r5, #0]
 8009942:	b103      	cbz	r3, 8009946 <_sbrk_r+0x1a>
 8009944:	6023      	str	r3, [r4, #0]
 8009946:	bd38      	pop	{r3, r4, r5, pc}
 8009948:	200007fc 	.word	0x200007fc

0800994c <__assert_func>:
 800994c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800994e:	4614      	mov	r4, r2
 8009950:	461a      	mov	r2, r3
 8009952:	4b09      	ldr	r3, [pc, #36]	; (8009978 <__assert_func+0x2c>)
 8009954:	681b      	ldr	r3, [r3, #0]
 8009956:	4605      	mov	r5, r0
 8009958:	68d8      	ldr	r0, [r3, #12]
 800995a:	b14c      	cbz	r4, 8009970 <__assert_func+0x24>
 800995c:	4b07      	ldr	r3, [pc, #28]	; (800997c <__assert_func+0x30>)
 800995e:	9100      	str	r1, [sp, #0]
 8009960:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009964:	4906      	ldr	r1, [pc, #24]	; (8009980 <__assert_func+0x34>)
 8009966:	462b      	mov	r3, r5
 8009968:	f000 f80e 	bl	8009988 <fiprintf>
 800996c:	f000 faa4 	bl	8009eb8 <abort>
 8009970:	4b04      	ldr	r3, [pc, #16]	; (8009984 <__assert_func+0x38>)
 8009972:	461c      	mov	r4, r3
 8009974:	e7f3      	b.n	800995e <__assert_func+0x12>
 8009976:	bf00      	nop
 8009978:	2000000c 	.word	0x2000000c
 800997c:	0800a7dd 	.word	0x0800a7dd
 8009980:	0800a7ea 	.word	0x0800a7ea
 8009984:	0800a818 	.word	0x0800a818

08009988 <fiprintf>:
 8009988:	b40e      	push	{r1, r2, r3}
 800998a:	b503      	push	{r0, r1, lr}
 800998c:	4601      	mov	r1, r0
 800998e:	ab03      	add	r3, sp, #12
 8009990:	4805      	ldr	r0, [pc, #20]	; (80099a8 <fiprintf+0x20>)
 8009992:	f853 2b04 	ldr.w	r2, [r3], #4
 8009996:	6800      	ldr	r0, [r0, #0]
 8009998:	9301      	str	r3, [sp, #4]
 800999a:	f000 f88f 	bl	8009abc <_vfiprintf_r>
 800999e:	b002      	add	sp, #8
 80099a0:	f85d eb04 	ldr.w	lr, [sp], #4
 80099a4:	b003      	add	sp, #12
 80099a6:	4770      	bx	lr
 80099a8:	2000000c 	.word	0x2000000c

080099ac <__ascii_mbtowc>:
 80099ac:	b082      	sub	sp, #8
 80099ae:	b901      	cbnz	r1, 80099b2 <__ascii_mbtowc+0x6>
 80099b0:	a901      	add	r1, sp, #4
 80099b2:	b142      	cbz	r2, 80099c6 <__ascii_mbtowc+0x1a>
 80099b4:	b14b      	cbz	r3, 80099ca <__ascii_mbtowc+0x1e>
 80099b6:	7813      	ldrb	r3, [r2, #0]
 80099b8:	600b      	str	r3, [r1, #0]
 80099ba:	7812      	ldrb	r2, [r2, #0]
 80099bc:	1e10      	subs	r0, r2, #0
 80099be:	bf18      	it	ne
 80099c0:	2001      	movne	r0, #1
 80099c2:	b002      	add	sp, #8
 80099c4:	4770      	bx	lr
 80099c6:	4610      	mov	r0, r2
 80099c8:	e7fb      	b.n	80099c2 <__ascii_mbtowc+0x16>
 80099ca:	f06f 0001 	mvn.w	r0, #1
 80099ce:	e7f8      	b.n	80099c2 <__ascii_mbtowc+0x16>

080099d0 <memmove>:
 80099d0:	4288      	cmp	r0, r1
 80099d2:	b510      	push	{r4, lr}
 80099d4:	eb01 0402 	add.w	r4, r1, r2
 80099d8:	d902      	bls.n	80099e0 <memmove+0x10>
 80099da:	4284      	cmp	r4, r0
 80099dc:	4623      	mov	r3, r4
 80099de:	d807      	bhi.n	80099f0 <memmove+0x20>
 80099e0:	1e43      	subs	r3, r0, #1
 80099e2:	42a1      	cmp	r1, r4
 80099e4:	d008      	beq.n	80099f8 <memmove+0x28>
 80099e6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80099ea:	f803 2f01 	strb.w	r2, [r3, #1]!
 80099ee:	e7f8      	b.n	80099e2 <memmove+0x12>
 80099f0:	4402      	add	r2, r0
 80099f2:	4601      	mov	r1, r0
 80099f4:	428a      	cmp	r2, r1
 80099f6:	d100      	bne.n	80099fa <memmove+0x2a>
 80099f8:	bd10      	pop	{r4, pc}
 80099fa:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80099fe:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009a02:	e7f7      	b.n	80099f4 <memmove+0x24>

08009a04 <__malloc_lock>:
 8009a04:	4801      	ldr	r0, [pc, #4]	; (8009a0c <__malloc_lock+0x8>)
 8009a06:	f000 bc17 	b.w	800a238 <__retarget_lock_acquire_recursive>
 8009a0a:	bf00      	nop
 8009a0c:	20000804 	.word	0x20000804

08009a10 <__malloc_unlock>:
 8009a10:	4801      	ldr	r0, [pc, #4]	; (8009a18 <__malloc_unlock+0x8>)
 8009a12:	f000 bc12 	b.w	800a23a <__retarget_lock_release_recursive>
 8009a16:	bf00      	nop
 8009a18:	20000804 	.word	0x20000804

08009a1c <_realloc_r>:
 8009a1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009a1e:	4607      	mov	r7, r0
 8009a20:	4614      	mov	r4, r2
 8009a22:	460e      	mov	r6, r1
 8009a24:	b921      	cbnz	r1, 8009a30 <_realloc_r+0x14>
 8009a26:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8009a2a:	4611      	mov	r1, r2
 8009a2c:	f7ff bdc8 	b.w	80095c0 <_malloc_r>
 8009a30:	b922      	cbnz	r2, 8009a3c <_realloc_r+0x20>
 8009a32:	f7ff fd75 	bl	8009520 <_free_r>
 8009a36:	4625      	mov	r5, r4
 8009a38:	4628      	mov	r0, r5
 8009a3a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009a3c:	f000 fc62 	bl	800a304 <_malloc_usable_size_r>
 8009a40:	42a0      	cmp	r0, r4
 8009a42:	d20f      	bcs.n	8009a64 <_realloc_r+0x48>
 8009a44:	4621      	mov	r1, r4
 8009a46:	4638      	mov	r0, r7
 8009a48:	f7ff fdba 	bl	80095c0 <_malloc_r>
 8009a4c:	4605      	mov	r5, r0
 8009a4e:	2800      	cmp	r0, #0
 8009a50:	d0f2      	beq.n	8009a38 <_realloc_r+0x1c>
 8009a52:	4631      	mov	r1, r6
 8009a54:	4622      	mov	r2, r4
 8009a56:	f7ff f9c7 	bl	8008de8 <memcpy>
 8009a5a:	4631      	mov	r1, r6
 8009a5c:	4638      	mov	r0, r7
 8009a5e:	f7ff fd5f 	bl	8009520 <_free_r>
 8009a62:	e7e9      	b.n	8009a38 <_realloc_r+0x1c>
 8009a64:	4635      	mov	r5, r6
 8009a66:	e7e7      	b.n	8009a38 <_realloc_r+0x1c>

08009a68 <__sfputc_r>:
 8009a68:	6893      	ldr	r3, [r2, #8]
 8009a6a:	3b01      	subs	r3, #1
 8009a6c:	2b00      	cmp	r3, #0
 8009a6e:	b410      	push	{r4}
 8009a70:	6093      	str	r3, [r2, #8]
 8009a72:	da08      	bge.n	8009a86 <__sfputc_r+0x1e>
 8009a74:	6994      	ldr	r4, [r2, #24]
 8009a76:	42a3      	cmp	r3, r4
 8009a78:	db01      	blt.n	8009a7e <__sfputc_r+0x16>
 8009a7a:	290a      	cmp	r1, #10
 8009a7c:	d103      	bne.n	8009a86 <__sfputc_r+0x1e>
 8009a7e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009a82:	f000 b94b 	b.w	8009d1c <__swbuf_r>
 8009a86:	6813      	ldr	r3, [r2, #0]
 8009a88:	1c58      	adds	r0, r3, #1
 8009a8a:	6010      	str	r0, [r2, #0]
 8009a8c:	7019      	strb	r1, [r3, #0]
 8009a8e:	4608      	mov	r0, r1
 8009a90:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009a94:	4770      	bx	lr

08009a96 <__sfputs_r>:
 8009a96:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009a98:	4606      	mov	r6, r0
 8009a9a:	460f      	mov	r7, r1
 8009a9c:	4614      	mov	r4, r2
 8009a9e:	18d5      	adds	r5, r2, r3
 8009aa0:	42ac      	cmp	r4, r5
 8009aa2:	d101      	bne.n	8009aa8 <__sfputs_r+0x12>
 8009aa4:	2000      	movs	r0, #0
 8009aa6:	e007      	b.n	8009ab8 <__sfputs_r+0x22>
 8009aa8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009aac:	463a      	mov	r2, r7
 8009aae:	4630      	mov	r0, r6
 8009ab0:	f7ff ffda 	bl	8009a68 <__sfputc_r>
 8009ab4:	1c43      	adds	r3, r0, #1
 8009ab6:	d1f3      	bne.n	8009aa0 <__sfputs_r+0xa>
 8009ab8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08009abc <_vfiprintf_r>:
 8009abc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009ac0:	460d      	mov	r5, r1
 8009ac2:	b09d      	sub	sp, #116	; 0x74
 8009ac4:	4614      	mov	r4, r2
 8009ac6:	4698      	mov	r8, r3
 8009ac8:	4606      	mov	r6, r0
 8009aca:	b118      	cbz	r0, 8009ad4 <_vfiprintf_r+0x18>
 8009acc:	6983      	ldr	r3, [r0, #24]
 8009ace:	b90b      	cbnz	r3, 8009ad4 <_vfiprintf_r+0x18>
 8009ad0:	f000 fb14 	bl	800a0fc <__sinit>
 8009ad4:	4b89      	ldr	r3, [pc, #548]	; (8009cfc <_vfiprintf_r+0x240>)
 8009ad6:	429d      	cmp	r5, r3
 8009ad8:	d11b      	bne.n	8009b12 <_vfiprintf_r+0x56>
 8009ada:	6875      	ldr	r5, [r6, #4]
 8009adc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009ade:	07d9      	lsls	r1, r3, #31
 8009ae0:	d405      	bmi.n	8009aee <_vfiprintf_r+0x32>
 8009ae2:	89ab      	ldrh	r3, [r5, #12]
 8009ae4:	059a      	lsls	r2, r3, #22
 8009ae6:	d402      	bmi.n	8009aee <_vfiprintf_r+0x32>
 8009ae8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009aea:	f000 fba5 	bl	800a238 <__retarget_lock_acquire_recursive>
 8009aee:	89ab      	ldrh	r3, [r5, #12]
 8009af0:	071b      	lsls	r3, r3, #28
 8009af2:	d501      	bpl.n	8009af8 <_vfiprintf_r+0x3c>
 8009af4:	692b      	ldr	r3, [r5, #16]
 8009af6:	b9eb      	cbnz	r3, 8009b34 <_vfiprintf_r+0x78>
 8009af8:	4629      	mov	r1, r5
 8009afa:	4630      	mov	r0, r6
 8009afc:	f000 f96e 	bl	8009ddc <__swsetup_r>
 8009b00:	b1c0      	cbz	r0, 8009b34 <_vfiprintf_r+0x78>
 8009b02:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009b04:	07dc      	lsls	r4, r3, #31
 8009b06:	d50e      	bpl.n	8009b26 <_vfiprintf_r+0x6a>
 8009b08:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009b0c:	b01d      	add	sp, #116	; 0x74
 8009b0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009b12:	4b7b      	ldr	r3, [pc, #492]	; (8009d00 <_vfiprintf_r+0x244>)
 8009b14:	429d      	cmp	r5, r3
 8009b16:	d101      	bne.n	8009b1c <_vfiprintf_r+0x60>
 8009b18:	68b5      	ldr	r5, [r6, #8]
 8009b1a:	e7df      	b.n	8009adc <_vfiprintf_r+0x20>
 8009b1c:	4b79      	ldr	r3, [pc, #484]	; (8009d04 <_vfiprintf_r+0x248>)
 8009b1e:	429d      	cmp	r5, r3
 8009b20:	bf08      	it	eq
 8009b22:	68f5      	ldreq	r5, [r6, #12]
 8009b24:	e7da      	b.n	8009adc <_vfiprintf_r+0x20>
 8009b26:	89ab      	ldrh	r3, [r5, #12]
 8009b28:	0598      	lsls	r0, r3, #22
 8009b2a:	d4ed      	bmi.n	8009b08 <_vfiprintf_r+0x4c>
 8009b2c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009b2e:	f000 fb84 	bl	800a23a <__retarget_lock_release_recursive>
 8009b32:	e7e9      	b.n	8009b08 <_vfiprintf_r+0x4c>
 8009b34:	2300      	movs	r3, #0
 8009b36:	9309      	str	r3, [sp, #36]	; 0x24
 8009b38:	2320      	movs	r3, #32
 8009b3a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009b3e:	f8cd 800c 	str.w	r8, [sp, #12]
 8009b42:	2330      	movs	r3, #48	; 0x30
 8009b44:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8009d08 <_vfiprintf_r+0x24c>
 8009b48:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009b4c:	f04f 0901 	mov.w	r9, #1
 8009b50:	4623      	mov	r3, r4
 8009b52:	469a      	mov	sl, r3
 8009b54:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009b58:	b10a      	cbz	r2, 8009b5e <_vfiprintf_r+0xa2>
 8009b5a:	2a25      	cmp	r2, #37	; 0x25
 8009b5c:	d1f9      	bne.n	8009b52 <_vfiprintf_r+0x96>
 8009b5e:	ebba 0b04 	subs.w	fp, sl, r4
 8009b62:	d00b      	beq.n	8009b7c <_vfiprintf_r+0xc0>
 8009b64:	465b      	mov	r3, fp
 8009b66:	4622      	mov	r2, r4
 8009b68:	4629      	mov	r1, r5
 8009b6a:	4630      	mov	r0, r6
 8009b6c:	f7ff ff93 	bl	8009a96 <__sfputs_r>
 8009b70:	3001      	adds	r0, #1
 8009b72:	f000 80aa 	beq.w	8009cca <_vfiprintf_r+0x20e>
 8009b76:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009b78:	445a      	add	r2, fp
 8009b7a:	9209      	str	r2, [sp, #36]	; 0x24
 8009b7c:	f89a 3000 	ldrb.w	r3, [sl]
 8009b80:	2b00      	cmp	r3, #0
 8009b82:	f000 80a2 	beq.w	8009cca <_vfiprintf_r+0x20e>
 8009b86:	2300      	movs	r3, #0
 8009b88:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009b8c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009b90:	f10a 0a01 	add.w	sl, sl, #1
 8009b94:	9304      	str	r3, [sp, #16]
 8009b96:	9307      	str	r3, [sp, #28]
 8009b98:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009b9c:	931a      	str	r3, [sp, #104]	; 0x68
 8009b9e:	4654      	mov	r4, sl
 8009ba0:	2205      	movs	r2, #5
 8009ba2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009ba6:	4858      	ldr	r0, [pc, #352]	; (8009d08 <_vfiprintf_r+0x24c>)
 8009ba8:	f7f6 fb1a 	bl	80001e0 <memchr>
 8009bac:	9a04      	ldr	r2, [sp, #16]
 8009bae:	b9d8      	cbnz	r0, 8009be8 <_vfiprintf_r+0x12c>
 8009bb0:	06d1      	lsls	r1, r2, #27
 8009bb2:	bf44      	itt	mi
 8009bb4:	2320      	movmi	r3, #32
 8009bb6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009bba:	0713      	lsls	r3, r2, #28
 8009bbc:	bf44      	itt	mi
 8009bbe:	232b      	movmi	r3, #43	; 0x2b
 8009bc0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009bc4:	f89a 3000 	ldrb.w	r3, [sl]
 8009bc8:	2b2a      	cmp	r3, #42	; 0x2a
 8009bca:	d015      	beq.n	8009bf8 <_vfiprintf_r+0x13c>
 8009bcc:	9a07      	ldr	r2, [sp, #28]
 8009bce:	4654      	mov	r4, sl
 8009bd0:	2000      	movs	r0, #0
 8009bd2:	f04f 0c0a 	mov.w	ip, #10
 8009bd6:	4621      	mov	r1, r4
 8009bd8:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009bdc:	3b30      	subs	r3, #48	; 0x30
 8009bde:	2b09      	cmp	r3, #9
 8009be0:	d94e      	bls.n	8009c80 <_vfiprintf_r+0x1c4>
 8009be2:	b1b0      	cbz	r0, 8009c12 <_vfiprintf_r+0x156>
 8009be4:	9207      	str	r2, [sp, #28]
 8009be6:	e014      	b.n	8009c12 <_vfiprintf_r+0x156>
 8009be8:	eba0 0308 	sub.w	r3, r0, r8
 8009bec:	fa09 f303 	lsl.w	r3, r9, r3
 8009bf0:	4313      	orrs	r3, r2
 8009bf2:	9304      	str	r3, [sp, #16]
 8009bf4:	46a2      	mov	sl, r4
 8009bf6:	e7d2      	b.n	8009b9e <_vfiprintf_r+0xe2>
 8009bf8:	9b03      	ldr	r3, [sp, #12]
 8009bfa:	1d19      	adds	r1, r3, #4
 8009bfc:	681b      	ldr	r3, [r3, #0]
 8009bfe:	9103      	str	r1, [sp, #12]
 8009c00:	2b00      	cmp	r3, #0
 8009c02:	bfbb      	ittet	lt
 8009c04:	425b      	neglt	r3, r3
 8009c06:	f042 0202 	orrlt.w	r2, r2, #2
 8009c0a:	9307      	strge	r3, [sp, #28]
 8009c0c:	9307      	strlt	r3, [sp, #28]
 8009c0e:	bfb8      	it	lt
 8009c10:	9204      	strlt	r2, [sp, #16]
 8009c12:	7823      	ldrb	r3, [r4, #0]
 8009c14:	2b2e      	cmp	r3, #46	; 0x2e
 8009c16:	d10c      	bne.n	8009c32 <_vfiprintf_r+0x176>
 8009c18:	7863      	ldrb	r3, [r4, #1]
 8009c1a:	2b2a      	cmp	r3, #42	; 0x2a
 8009c1c:	d135      	bne.n	8009c8a <_vfiprintf_r+0x1ce>
 8009c1e:	9b03      	ldr	r3, [sp, #12]
 8009c20:	1d1a      	adds	r2, r3, #4
 8009c22:	681b      	ldr	r3, [r3, #0]
 8009c24:	9203      	str	r2, [sp, #12]
 8009c26:	2b00      	cmp	r3, #0
 8009c28:	bfb8      	it	lt
 8009c2a:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8009c2e:	3402      	adds	r4, #2
 8009c30:	9305      	str	r3, [sp, #20]
 8009c32:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8009d18 <_vfiprintf_r+0x25c>
 8009c36:	7821      	ldrb	r1, [r4, #0]
 8009c38:	2203      	movs	r2, #3
 8009c3a:	4650      	mov	r0, sl
 8009c3c:	f7f6 fad0 	bl	80001e0 <memchr>
 8009c40:	b140      	cbz	r0, 8009c54 <_vfiprintf_r+0x198>
 8009c42:	2340      	movs	r3, #64	; 0x40
 8009c44:	eba0 000a 	sub.w	r0, r0, sl
 8009c48:	fa03 f000 	lsl.w	r0, r3, r0
 8009c4c:	9b04      	ldr	r3, [sp, #16]
 8009c4e:	4303      	orrs	r3, r0
 8009c50:	3401      	adds	r4, #1
 8009c52:	9304      	str	r3, [sp, #16]
 8009c54:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009c58:	482c      	ldr	r0, [pc, #176]	; (8009d0c <_vfiprintf_r+0x250>)
 8009c5a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009c5e:	2206      	movs	r2, #6
 8009c60:	f7f6 fabe 	bl	80001e0 <memchr>
 8009c64:	2800      	cmp	r0, #0
 8009c66:	d03f      	beq.n	8009ce8 <_vfiprintf_r+0x22c>
 8009c68:	4b29      	ldr	r3, [pc, #164]	; (8009d10 <_vfiprintf_r+0x254>)
 8009c6a:	bb1b      	cbnz	r3, 8009cb4 <_vfiprintf_r+0x1f8>
 8009c6c:	9b03      	ldr	r3, [sp, #12]
 8009c6e:	3307      	adds	r3, #7
 8009c70:	f023 0307 	bic.w	r3, r3, #7
 8009c74:	3308      	adds	r3, #8
 8009c76:	9303      	str	r3, [sp, #12]
 8009c78:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009c7a:	443b      	add	r3, r7
 8009c7c:	9309      	str	r3, [sp, #36]	; 0x24
 8009c7e:	e767      	b.n	8009b50 <_vfiprintf_r+0x94>
 8009c80:	fb0c 3202 	mla	r2, ip, r2, r3
 8009c84:	460c      	mov	r4, r1
 8009c86:	2001      	movs	r0, #1
 8009c88:	e7a5      	b.n	8009bd6 <_vfiprintf_r+0x11a>
 8009c8a:	2300      	movs	r3, #0
 8009c8c:	3401      	adds	r4, #1
 8009c8e:	9305      	str	r3, [sp, #20]
 8009c90:	4619      	mov	r1, r3
 8009c92:	f04f 0c0a 	mov.w	ip, #10
 8009c96:	4620      	mov	r0, r4
 8009c98:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009c9c:	3a30      	subs	r2, #48	; 0x30
 8009c9e:	2a09      	cmp	r2, #9
 8009ca0:	d903      	bls.n	8009caa <_vfiprintf_r+0x1ee>
 8009ca2:	2b00      	cmp	r3, #0
 8009ca4:	d0c5      	beq.n	8009c32 <_vfiprintf_r+0x176>
 8009ca6:	9105      	str	r1, [sp, #20]
 8009ca8:	e7c3      	b.n	8009c32 <_vfiprintf_r+0x176>
 8009caa:	fb0c 2101 	mla	r1, ip, r1, r2
 8009cae:	4604      	mov	r4, r0
 8009cb0:	2301      	movs	r3, #1
 8009cb2:	e7f0      	b.n	8009c96 <_vfiprintf_r+0x1da>
 8009cb4:	ab03      	add	r3, sp, #12
 8009cb6:	9300      	str	r3, [sp, #0]
 8009cb8:	462a      	mov	r2, r5
 8009cba:	4b16      	ldr	r3, [pc, #88]	; (8009d14 <_vfiprintf_r+0x258>)
 8009cbc:	a904      	add	r1, sp, #16
 8009cbe:	4630      	mov	r0, r6
 8009cc0:	f7fd fe22 	bl	8007908 <_printf_float>
 8009cc4:	4607      	mov	r7, r0
 8009cc6:	1c78      	adds	r0, r7, #1
 8009cc8:	d1d6      	bne.n	8009c78 <_vfiprintf_r+0x1bc>
 8009cca:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009ccc:	07d9      	lsls	r1, r3, #31
 8009cce:	d405      	bmi.n	8009cdc <_vfiprintf_r+0x220>
 8009cd0:	89ab      	ldrh	r3, [r5, #12]
 8009cd2:	059a      	lsls	r2, r3, #22
 8009cd4:	d402      	bmi.n	8009cdc <_vfiprintf_r+0x220>
 8009cd6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009cd8:	f000 faaf 	bl	800a23a <__retarget_lock_release_recursive>
 8009cdc:	89ab      	ldrh	r3, [r5, #12]
 8009cde:	065b      	lsls	r3, r3, #25
 8009ce0:	f53f af12 	bmi.w	8009b08 <_vfiprintf_r+0x4c>
 8009ce4:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009ce6:	e711      	b.n	8009b0c <_vfiprintf_r+0x50>
 8009ce8:	ab03      	add	r3, sp, #12
 8009cea:	9300      	str	r3, [sp, #0]
 8009cec:	462a      	mov	r2, r5
 8009cee:	4b09      	ldr	r3, [pc, #36]	; (8009d14 <_vfiprintf_r+0x258>)
 8009cf0:	a904      	add	r1, sp, #16
 8009cf2:	4630      	mov	r0, r6
 8009cf4:	f7fe f8ac 	bl	8007e50 <_printf_i>
 8009cf8:	e7e4      	b.n	8009cc4 <_vfiprintf_r+0x208>
 8009cfa:	bf00      	nop
 8009cfc:	0800a944 	.word	0x0800a944
 8009d00:	0800a964 	.word	0x0800a964
 8009d04:	0800a924 	.word	0x0800a924
 8009d08:	0800a7cc 	.word	0x0800a7cc
 8009d0c:	0800a7d6 	.word	0x0800a7d6
 8009d10:	08007909 	.word	0x08007909
 8009d14:	08009a97 	.word	0x08009a97
 8009d18:	0800a7d2 	.word	0x0800a7d2

08009d1c <__swbuf_r>:
 8009d1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009d1e:	460e      	mov	r6, r1
 8009d20:	4614      	mov	r4, r2
 8009d22:	4605      	mov	r5, r0
 8009d24:	b118      	cbz	r0, 8009d2e <__swbuf_r+0x12>
 8009d26:	6983      	ldr	r3, [r0, #24]
 8009d28:	b90b      	cbnz	r3, 8009d2e <__swbuf_r+0x12>
 8009d2a:	f000 f9e7 	bl	800a0fc <__sinit>
 8009d2e:	4b21      	ldr	r3, [pc, #132]	; (8009db4 <__swbuf_r+0x98>)
 8009d30:	429c      	cmp	r4, r3
 8009d32:	d12b      	bne.n	8009d8c <__swbuf_r+0x70>
 8009d34:	686c      	ldr	r4, [r5, #4]
 8009d36:	69a3      	ldr	r3, [r4, #24]
 8009d38:	60a3      	str	r3, [r4, #8]
 8009d3a:	89a3      	ldrh	r3, [r4, #12]
 8009d3c:	071a      	lsls	r2, r3, #28
 8009d3e:	d52f      	bpl.n	8009da0 <__swbuf_r+0x84>
 8009d40:	6923      	ldr	r3, [r4, #16]
 8009d42:	b36b      	cbz	r3, 8009da0 <__swbuf_r+0x84>
 8009d44:	6923      	ldr	r3, [r4, #16]
 8009d46:	6820      	ldr	r0, [r4, #0]
 8009d48:	1ac0      	subs	r0, r0, r3
 8009d4a:	6963      	ldr	r3, [r4, #20]
 8009d4c:	b2f6      	uxtb	r6, r6
 8009d4e:	4283      	cmp	r3, r0
 8009d50:	4637      	mov	r7, r6
 8009d52:	dc04      	bgt.n	8009d5e <__swbuf_r+0x42>
 8009d54:	4621      	mov	r1, r4
 8009d56:	4628      	mov	r0, r5
 8009d58:	f000 f93c 	bl	8009fd4 <_fflush_r>
 8009d5c:	bb30      	cbnz	r0, 8009dac <__swbuf_r+0x90>
 8009d5e:	68a3      	ldr	r3, [r4, #8]
 8009d60:	3b01      	subs	r3, #1
 8009d62:	60a3      	str	r3, [r4, #8]
 8009d64:	6823      	ldr	r3, [r4, #0]
 8009d66:	1c5a      	adds	r2, r3, #1
 8009d68:	6022      	str	r2, [r4, #0]
 8009d6a:	701e      	strb	r6, [r3, #0]
 8009d6c:	6963      	ldr	r3, [r4, #20]
 8009d6e:	3001      	adds	r0, #1
 8009d70:	4283      	cmp	r3, r0
 8009d72:	d004      	beq.n	8009d7e <__swbuf_r+0x62>
 8009d74:	89a3      	ldrh	r3, [r4, #12]
 8009d76:	07db      	lsls	r3, r3, #31
 8009d78:	d506      	bpl.n	8009d88 <__swbuf_r+0x6c>
 8009d7a:	2e0a      	cmp	r6, #10
 8009d7c:	d104      	bne.n	8009d88 <__swbuf_r+0x6c>
 8009d7e:	4621      	mov	r1, r4
 8009d80:	4628      	mov	r0, r5
 8009d82:	f000 f927 	bl	8009fd4 <_fflush_r>
 8009d86:	b988      	cbnz	r0, 8009dac <__swbuf_r+0x90>
 8009d88:	4638      	mov	r0, r7
 8009d8a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009d8c:	4b0a      	ldr	r3, [pc, #40]	; (8009db8 <__swbuf_r+0x9c>)
 8009d8e:	429c      	cmp	r4, r3
 8009d90:	d101      	bne.n	8009d96 <__swbuf_r+0x7a>
 8009d92:	68ac      	ldr	r4, [r5, #8]
 8009d94:	e7cf      	b.n	8009d36 <__swbuf_r+0x1a>
 8009d96:	4b09      	ldr	r3, [pc, #36]	; (8009dbc <__swbuf_r+0xa0>)
 8009d98:	429c      	cmp	r4, r3
 8009d9a:	bf08      	it	eq
 8009d9c:	68ec      	ldreq	r4, [r5, #12]
 8009d9e:	e7ca      	b.n	8009d36 <__swbuf_r+0x1a>
 8009da0:	4621      	mov	r1, r4
 8009da2:	4628      	mov	r0, r5
 8009da4:	f000 f81a 	bl	8009ddc <__swsetup_r>
 8009da8:	2800      	cmp	r0, #0
 8009daa:	d0cb      	beq.n	8009d44 <__swbuf_r+0x28>
 8009dac:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8009db0:	e7ea      	b.n	8009d88 <__swbuf_r+0x6c>
 8009db2:	bf00      	nop
 8009db4:	0800a944 	.word	0x0800a944
 8009db8:	0800a964 	.word	0x0800a964
 8009dbc:	0800a924 	.word	0x0800a924

08009dc0 <__ascii_wctomb>:
 8009dc0:	b149      	cbz	r1, 8009dd6 <__ascii_wctomb+0x16>
 8009dc2:	2aff      	cmp	r2, #255	; 0xff
 8009dc4:	bf85      	ittet	hi
 8009dc6:	238a      	movhi	r3, #138	; 0x8a
 8009dc8:	6003      	strhi	r3, [r0, #0]
 8009dca:	700a      	strbls	r2, [r1, #0]
 8009dcc:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 8009dd0:	bf98      	it	ls
 8009dd2:	2001      	movls	r0, #1
 8009dd4:	4770      	bx	lr
 8009dd6:	4608      	mov	r0, r1
 8009dd8:	4770      	bx	lr
	...

08009ddc <__swsetup_r>:
 8009ddc:	4b32      	ldr	r3, [pc, #200]	; (8009ea8 <__swsetup_r+0xcc>)
 8009dde:	b570      	push	{r4, r5, r6, lr}
 8009de0:	681d      	ldr	r5, [r3, #0]
 8009de2:	4606      	mov	r6, r0
 8009de4:	460c      	mov	r4, r1
 8009de6:	b125      	cbz	r5, 8009df2 <__swsetup_r+0x16>
 8009de8:	69ab      	ldr	r3, [r5, #24]
 8009dea:	b913      	cbnz	r3, 8009df2 <__swsetup_r+0x16>
 8009dec:	4628      	mov	r0, r5
 8009dee:	f000 f985 	bl	800a0fc <__sinit>
 8009df2:	4b2e      	ldr	r3, [pc, #184]	; (8009eac <__swsetup_r+0xd0>)
 8009df4:	429c      	cmp	r4, r3
 8009df6:	d10f      	bne.n	8009e18 <__swsetup_r+0x3c>
 8009df8:	686c      	ldr	r4, [r5, #4]
 8009dfa:	89a3      	ldrh	r3, [r4, #12]
 8009dfc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009e00:	0719      	lsls	r1, r3, #28
 8009e02:	d42c      	bmi.n	8009e5e <__swsetup_r+0x82>
 8009e04:	06dd      	lsls	r5, r3, #27
 8009e06:	d411      	bmi.n	8009e2c <__swsetup_r+0x50>
 8009e08:	2309      	movs	r3, #9
 8009e0a:	6033      	str	r3, [r6, #0]
 8009e0c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8009e10:	81a3      	strh	r3, [r4, #12]
 8009e12:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009e16:	e03e      	b.n	8009e96 <__swsetup_r+0xba>
 8009e18:	4b25      	ldr	r3, [pc, #148]	; (8009eb0 <__swsetup_r+0xd4>)
 8009e1a:	429c      	cmp	r4, r3
 8009e1c:	d101      	bne.n	8009e22 <__swsetup_r+0x46>
 8009e1e:	68ac      	ldr	r4, [r5, #8]
 8009e20:	e7eb      	b.n	8009dfa <__swsetup_r+0x1e>
 8009e22:	4b24      	ldr	r3, [pc, #144]	; (8009eb4 <__swsetup_r+0xd8>)
 8009e24:	429c      	cmp	r4, r3
 8009e26:	bf08      	it	eq
 8009e28:	68ec      	ldreq	r4, [r5, #12]
 8009e2a:	e7e6      	b.n	8009dfa <__swsetup_r+0x1e>
 8009e2c:	0758      	lsls	r0, r3, #29
 8009e2e:	d512      	bpl.n	8009e56 <__swsetup_r+0x7a>
 8009e30:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009e32:	b141      	cbz	r1, 8009e46 <__swsetup_r+0x6a>
 8009e34:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009e38:	4299      	cmp	r1, r3
 8009e3a:	d002      	beq.n	8009e42 <__swsetup_r+0x66>
 8009e3c:	4630      	mov	r0, r6
 8009e3e:	f7ff fb6f 	bl	8009520 <_free_r>
 8009e42:	2300      	movs	r3, #0
 8009e44:	6363      	str	r3, [r4, #52]	; 0x34
 8009e46:	89a3      	ldrh	r3, [r4, #12]
 8009e48:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8009e4c:	81a3      	strh	r3, [r4, #12]
 8009e4e:	2300      	movs	r3, #0
 8009e50:	6063      	str	r3, [r4, #4]
 8009e52:	6923      	ldr	r3, [r4, #16]
 8009e54:	6023      	str	r3, [r4, #0]
 8009e56:	89a3      	ldrh	r3, [r4, #12]
 8009e58:	f043 0308 	orr.w	r3, r3, #8
 8009e5c:	81a3      	strh	r3, [r4, #12]
 8009e5e:	6923      	ldr	r3, [r4, #16]
 8009e60:	b94b      	cbnz	r3, 8009e76 <__swsetup_r+0x9a>
 8009e62:	89a3      	ldrh	r3, [r4, #12]
 8009e64:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009e68:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009e6c:	d003      	beq.n	8009e76 <__swsetup_r+0x9a>
 8009e6e:	4621      	mov	r1, r4
 8009e70:	4630      	mov	r0, r6
 8009e72:	f000 fa07 	bl	800a284 <__smakebuf_r>
 8009e76:	89a0      	ldrh	r0, [r4, #12]
 8009e78:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009e7c:	f010 0301 	ands.w	r3, r0, #1
 8009e80:	d00a      	beq.n	8009e98 <__swsetup_r+0xbc>
 8009e82:	2300      	movs	r3, #0
 8009e84:	60a3      	str	r3, [r4, #8]
 8009e86:	6963      	ldr	r3, [r4, #20]
 8009e88:	425b      	negs	r3, r3
 8009e8a:	61a3      	str	r3, [r4, #24]
 8009e8c:	6923      	ldr	r3, [r4, #16]
 8009e8e:	b943      	cbnz	r3, 8009ea2 <__swsetup_r+0xc6>
 8009e90:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8009e94:	d1ba      	bne.n	8009e0c <__swsetup_r+0x30>
 8009e96:	bd70      	pop	{r4, r5, r6, pc}
 8009e98:	0781      	lsls	r1, r0, #30
 8009e9a:	bf58      	it	pl
 8009e9c:	6963      	ldrpl	r3, [r4, #20]
 8009e9e:	60a3      	str	r3, [r4, #8]
 8009ea0:	e7f4      	b.n	8009e8c <__swsetup_r+0xb0>
 8009ea2:	2000      	movs	r0, #0
 8009ea4:	e7f7      	b.n	8009e96 <__swsetup_r+0xba>
 8009ea6:	bf00      	nop
 8009ea8:	2000000c 	.word	0x2000000c
 8009eac:	0800a944 	.word	0x0800a944
 8009eb0:	0800a964 	.word	0x0800a964
 8009eb4:	0800a924 	.word	0x0800a924

08009eb8 <abort>:
 8009eb8:	b508      	push	{r3, lr}
 8009eba:	2006      	movs	r0, #6
 8009ebc:	f000 fa52 	bl	800a364 <raise>
 8009ec0:	2001      	movs	r0, #1
 8009ec2:	f7f7 ff49 	bl	8001d58 <_exit>
	...

08009ec8 <__sflush_r>:
 8009ec8:	898a      	ldrh	r2, [r1, #12]
 8009eca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009ece:	4605      	mov	r5, r0
 8009ed0:	0710      	lsls	r0, r2, #28
 8009ed2:	460c      	mov	r4, r1
 8009ed4:	d458      	bmi.n	8009f88 <__sflush_r+0xc0>
 8009ed6:	684b      	ldr	r3, [r1, #4]
 8009ed8:	2b00      	cmp	r3, #0
 8009eda:	dc05      	bgt.n	8009ee8 <__sflush_r+0x20>
 8009edc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8009ede:	2b00      	cmp	r3, #0
 8009ee0:	dc02      	bgt.n	8009ee8 <__sflush_r+0x20>
 8009ee2:	2000      	movs	r0, #0
 8009ee4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009ee8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009eea:	2e00      	cmp	r6, #0
 8009eec:	d0f9      	beq.n	8009ee2 <__sflush_r+0x1a>
 8009eee:	2300      	movs	r3, #0
 8009ef0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009ef4:	682f      	ldr	r7, [r5, #0]
 8009ef6:	602b      	str	r3, [r5, #0]
 8009ef8:	d032      	beq.n	8009f60 <__sflush_r+0x98>
 8009efa:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009efc:	89a3      	ldrh	r3, [r4, #12]
 8009efe:	075a      	lsls	r2, r3, #29
 8009f00:	d505      	bpl.n	8009f0e <__sflush_r+0x46>
 8009f02:	6863      	ldr	r3, [r4, #4]
 8009f04:	1ac0      	subs	r0, r0, r3
 8009f06:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009f08:	b10b      	cbz	r3, 8009f0e <__sflush_r+0x46>
 8009f0a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009f0c:	1ac0      	subs	r0, r0, r3
 8009f0e:	2300      	movs	r3, #0
 8009f10:	4602      	mov	r2, r0
 8009f12:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009f14:	6a21      	ldr	r1, [r4, #32]
 8009f16:	4628      	mov	r0, r5
 8009f18:	47b0      	blx	r6
 8009f1a:	1c43      	adds	r3, r0, #1
 8009f1c:	89a3      	ldrh	r3, [r4, #12]
 8009f1e:	d106      	bne.n	8009f2e <__sflush_r+0x66>
 8009f20:	6829      	ldr	r1, [r5, #0]
 8009f22:	291d      	cmp	r1, #29
 8009f24:	d82c      	bhi.n	8009f80 <__sflush_r+0xb8>
 8009f26:	4a2a      	ldr	r2, [pc, #168]	; (8009fd0 <__sflush_r+0x108>)
 8009f28:	40ca      	lsrs	r2, r1
 8009f2a:	07d6      	lsls	r6, r2, #31
 8009f2c:	d528      	bpl.n	8009f80 <__sflush_r+0xb8>
 8009f2e:	2200      	movs	r2, #0
 8009f30:	6062      	str	r2, [r4, #4]
 8009f32:	04d9      	lsls	r1, r3, #19
 8009f34:	6922      	ldr	r2, [r4, #16]
 8009f36:	6022      	str	r2, [r4, #0]
 8009f38:	d504      	bpl.n	8009f44 <__sflush_r+0x7c>
 8009f3a:	1c42      	adds	r2, r0, #1
 8009f3c:	d101      	bne.n	8009f42 <__sflush_r+0x7a>
 8009f3e:	682b      	ldr	r3, [r5, #0]
 8009f40:	b903      	cbnz	r3, 8009f44 <__sflush_r+0x7c>
 8009f42:	6560      	str	r0, [r4, #84]	; 0x54
 8009f44:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009f46:	602f      	str	r7, [r5, #0]
 8009f48:	2900      	cmp	r1, #0
 8009f4a:	d0ca      	beq.n	8009ee2 <__sflush_r+0x1a>
 8009f4c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009f50:	4299      	cmp	r1, r3
 8009f52:	d002      	beq.n	8009f5a <__sflush_r+0x92>
 8009f54:	4628      	mov	r0, r5
 8009f56:	f7ff fae3 	bl	8009520 <_free_r>
 8009f5a:	2000      	movs	r0, #0
 8009f5c:	6360      	str	r0, [r4, #52]	; 0x34
 8009f5e:	e7c1      	b.n	8009ee4 <__sflush_r+0x1c>
 8009f60:	6a21      	ldr	r1, [r4, #32]
 8009f62:	2301      	movs	r3, #1
 8009f64:	4628      	mov	r0, r5
 8009f66:	47b0      	blx	r6
 8009f68:	1c41      	adds	r1, r0, #1
 8009f6a:	d1c7      	bne.n	8009efc <__sflush_r+0x34>
 8009f6c:	682b      	ldr	r3, [r5, #0]
 8009f6e:	2b00      	cmp	r3, #0
 8009f70:	d0c4      	beq.n	8009efc <__sflush_r+0x34>
 8009f72:	2b1d      	cmp	r3, #29
 8009f74:	d001      	beq.n	8009f7a <__sflush_r+0xb2>
 8009f76:	2b16      	cmp	r3, #22
 8009f78:	d101      	bne.n	8009f7e <__sflush_r+0xb6>
 8009f7a:	602f      	str	r7, [r5, #0]
 8009f7c:	e7b1      	b.n	8009ee2 <__sflush_r+0x1a>
 8009f7e:	89a3      	ldrh	r3, [r4, #12]
 8009f80:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009f84:	81a3      	strh	r3, [r4, #12]
 8009f86:	e7ad      	b.n	8009ee4 <__sflush_r+0x1c>
 8009f88:	690f      	ldr	r7, [r1, #16]
 8009f8a:	2f00      	cmp	r7, #0
 8009f8c:	d0a9      	beq.n	8009ee2 <__sflush_r+0x1a>
 8009f8e:	0793      	lsls	r3, r2, #30
 8009f90:	680e      	ldr	r6, [r1, #0]
 8009f92:	bf08      	it	eq
 8009f94:	694b      	ldreq	r3, [r1, #20]
 8009f96:	600f      	str	r7, [r1, #0]
 8009f98:	bf18      	it	ne
 8009f9a:	2300      	movne	r3, #0
 8009f9c:	eba6 0807 	sub.w	r8, r6, r7
 8009fa0:	608b      	str	r3, [r1, #8]
 8009fa2:	f1b8 0f00 	cmp.w	r8, #0
 8009fa6:	dd9c      	ble.n	8009ee2 <__sflush_r+0x1a>
 8009fa8:	6a21      	ldr	r1, [r4, #32]
 8009faa:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8009fac:	4643      	mov	r3, r8
 8009fae:	463a      	mov	r2, r7
 8009fb0:	4628      	mov	r0, r5
 8009fb2:	47b0      	blx	r6
 8009fb4:	2800      	cmp	r0, #0
 8009fb6:	dc06      	bgt.n	8009fc6 <__sflush_r+0xfe>
 8009fb8:	89a3      	ldrh	r3, [r4, #12]
 8009fba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009fbe:	81a3      	strh	r3, [r4, #12]
 8009fc0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009fc4:	e78e      	b.n	8009ee4 <__sflush_r+0x1c>
 8009fc6:	4407      	add	r7, r0
 8009fc8:	eba8 0800 	sub.w	r8, r8, r0
 8009fcc:	e7e9      	b.n	8009fa2 <__sflush_r+0xda>
 8009fce:	bf00      	nop
 8009fd0:	20400001 	.word	0x20400001

08009fd4 <_fflush_r>:
 8009fd4:	b538      	push	{r3, r4, r5, lr}
 8009fd6:	690b      	ldr	r3, [r1, #16]
 8009fd8:	4605      	mov	r5, r0
 8009fda:	460c      	mov	r4, r1
 8009fdc:	b913      	cbnz	r3, 8009fe4 <_fflush_r+0x10>
 8009fde:	2500      	movs	r5, #0
 8009fe0:	4628      	mov	r0, r5
 8009fe2:	bd38      	pop	{r3, r4, r5, pc}
 8009fe4:	b118      	cbz	r0, 8009fee <_fflush_r+0x1a>
 8009fe6:	6983      	ldr	r3, [r0, #24]
 8009fe8:	b90b      	cbnz	r3, 8009fee <_fflush_r+0x1a>
 8009fea:	f000 f887 	bl	800a0fc <__sinit>
 8009fee:	4b14      	ldr	r3, [pc, #80]	; (800a040 <_fflush_r+0x6c>)
 8009ff0:	429c      	cmp	r4, r3
 8009ff2:	d11b      	bne.n	800a02c <_fflush_r+0x58>
 8009ff4:	686c      	ldr	r4, [r5, #4]
 8009ff6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009ffa:	2b00      	cmp	r3, #0
 8009ffc:	d0ef      	beq.n	8009fde <_fflush_r+0xa>
 8009ffe:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800a000:	07d0      	lsls	r0, r2, #31
 800a002:	d404      	bmi.n	800a00e <_fflush_r+0x3a>
 800a004:	0599      	lsls	r1, r3, #22
 800a006:	d402      	bmi.n	800a00e <_fflush_r+0x3a>
 800a008:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a00a:	f000 f915 	bl	800a238 <__retarget_lock_acquire_recursive>
 800a00e:	4628      	mov	r0, r5
 800a010:	4621      	mov	r1, r4
 800a012:	f7ff ff59 	bl	8009ec8 <__sflush_r>
 800a016:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a018:	07da      	lsls	r2, r3, #31
 800a01a:	4605      	mov	r5, r0
 800a01c:	d4e0      	bmi.n	8009fe0 <_fflush_r+0xc>
 800a01e:	89a3      	ldrh	r3, [r4, #12]
 800a020:	059b      	lsls	r3, r3, #22
 800a022:	d4dd      	bmi.n	8009fe0 <_fflush_r+0xc>
 800a024:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a026:	f000 f908 	bl	800a23a <__retarget_lock_release_recursive>
 800a02a:	e7d9      	b.n	8009fe0 <_fflush_r+0xc>
 800a02c:	4b05      	ldr	r3, [pc, #20]	; (800a044 <_fflush_r+0x70>)
 800a02e:	429c      	cmp	r4, r3
 800a030:	d101      	bne.n	800a036 <_fflush_r+0x62>
 800a032:	68ac      	ldr	r4, [r5, #8]
 800a034:	e7df      	b.n	8009ff6 <_fflush_r+0x22>
 800a036:	4b04      	ldr	r3, [pc, #16]	; (800a048 <_fflush_r+0x74>)
 800a038:	429c      	cmp	r4, r3
 800a03a:	bf08      	it	eq
 800a03c:	68ec      	ldreq	r4, [r5, #12]
 800a03e:	e7da      	b.n	8009ff6 <_fflush_r+0x22>
 800a040:	0800a944 	.word	0x0800a944
 800a044:	0800a964 	.word	0x0800a964
 800a048:	0800a924 	.word	0x0800a924

0800a04c <std>:
 800a04c:	2300      	movs	r3, #0
 800a04e:	b510      	push	{r4, lr}
 800a050:	4604      	mov	r4, r0
 800a052:	e9c0 3300 	strd	r3, r3, [r0]
 800a056:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a05a:	6083      	str	r3, [r0, #8]
 800a05c:	8181      	strh	r1, [r0, #12]
 800a05e:	6643      	str	r3, [r0, #100]	; 0x64
 800a060:	81c2      	strh	r2, [r0, #14]
 800a062:	6183      	str	r3, [r0, #24]
 800a064:	4619      	mov	r1, r3
 800a066:	2208      	movs	r2, #8
 800a068:	305c      	adds	r0, #92	; 0x5c
 800a06a:	f7fd fba5 	bl	80077b8 <memset>
 800a06e:	4b05      	ldr	r3, [pc, #20]	; (800a084 <std+0x38>)
 800a070:	6263      	str	r3, [r4, #36]	; 0x24
 800a072:	4b05      	ldr	r3, [pc, #20]	; (800a088 <std+0x3c>)
 800a074:	62a3      	str	r3, [r4, #40]	; 0x28
 800a076:	4b05      	ldr	r3, [pc, #20]	; (800a08c <std+0x40>)
 800a078:	62e3      	str	r3, [r4, #44]	; 0x2c
 800a07a:	4b05      	ldr	r3, [pc, #20]	; (800a090 <std+0x44>)
 800a07c:	6224      	str	r4, [r4, #32]
 800a07e:	6323      	str	r3, [r4, #48]	; 0x30
 800a080:	bd10      	pop	{r4, pc}
 800a082:	bf00      	nop
 800a084:	0800a39d 	.word	0x0800a39d
 800a088:	0800a3bf 	.word	0x0800a3bf
 800a08c:	0800a3f7 	.word	0x0800a3f7
 800a090:	0800a41b 	.word	0x0800a41b

0800a094 <_cleanup_r>:
 800a094:	4901      	ldr	r1, [pc, #4]	; (800a09c <_cleanup_r+0x8>)
 800a096:	f000 b8af 	b.w	800a1f8 <_fwalk_reent>
 800a09a:	bf00      	nop
 800a09c:	08009fd5 	.word	0x08009fd5

0800a0a0 <__sfmoreglue>:
 800a0a0:	b570      	push	{r4, r5, r6, lr}
 800a0a2:	1e4a      	subs	r2, r1, #1
 800a0a4:	2568      	movs	r5, #104	; 0x68
 800a0a6:	4355      	muls	r5, r2
 800a0a8:	460e      	mov	r6, r1
 800a0aa:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800a0ae:	f7ff fa87 	bl	80095c0 <_malloc_r>
 800a0b2:	4604      	mov	r4, r0
 800a0b4:	b140      	cbz	r0, 800a0c8 <__sfmoreglue+0x28>
 800a0b6:	2100      	movs	r1, #0
 800a0b8:	e9c0 1600 	strd	r1, r6, [r0]
 800a0bc:	300c      	adds	r0, #12
 800a0be:	60a0      	str	r0, [r4, #8]
 800a0c0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800a0c4:	f7fd fb78 	bl	80077b8 <memset>
 800a0c8:	4620      	mov	r0, r4
 800a0ca:	bd70      	pop	{r4, r5, r6, pc}

0800a0cc <__sfp_lock_acquire>:
 800a0cc:	4801      	ldr	r0, [pc, #4]	; (800a0d4 <__sfp_lock_acquire+0x8>)
 800a0ce:	f000 b8b3 	b.w	800a238 <__retarget_lock_acquire_recursive>
 800a0d2:	bf00      	nop
 800a0d4:	20000808 	.word	0x20000808

0800a0d8 <__sfp_lock_release>:
 800a0d8:	4801      	ldr	r0, [pc, #4]	; (800a0e0 <__sfp_lock_release+0x8>)
 800a0da:	f000 b8ae 	b.w	800a23a <__retarget_lock_release_recursive>
 800a0de:	bf00      	nop
 800a0e0:	20000808 	.word	0x20000808

0800a0e4 <__sinit_lock_acquire>:
 800a0e4:	4801      	ldr	r0, [pc, #4]	; (800a0ec <__sinit_lock_acquire+0x8>)
 800a0e6:	f000 b8a7 	b.w	800a238 <__retarget_lock_acquire_recursive>
 800a0ea:	bf00      	nop
 800a0ec:	20000803 	.word	0x20000803

0800a0f0 <__sinit_lock_release>:
 800a0f0:	4801      	ldr	r0, [pc, #4]	; (800a0f8 <__sinit_lock_release+0x8>)
 800a0f2:	f000 b8a2 	b.w	800a23a <__retarget_lock_release_recursive>
 800a0f6:	bf00      	nop
 800a0f8:	20000803 	.word	0x20000803

0800a0fc <__sinit>:
 800a0fc:	b510      	push	{r4, lr}
 800a0fe:	4604      	mov	r4, r0
 800a100:	f7ff fff0 	bl	800a0e4 <__sinit_lock_acquire>
 800a104:	69a3      	ldr	r3, [r4, #24]
 800a106:	b11b      	cbz	r3, 800a110 <__sinit+0x14>
 800a108:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a10c:	f7ff bff0 	b.w	800a0f0 <__sinit_lock_release>
 800a110:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800a114:	6523      	str	r3, [r4, #80]	; 0x50
 800a116:	4b13      	ldr	r3, [pc, #76]	; (800a164 <__sinit+0x68>)
 800a118:	4a13      	ldr	r2, [pc, #76]	; (800a168 <__sinit+0x6c>)
 800a11a:	681b      	ldr	r3, [r3, #0]
 800a11c:	62a2      	str	r2, [r4, #40]	; 0x28
 800a11e:	42a3      	cmp	r3, r4
 800a120:	bf04      	itt	eq
 800a122:	2301      	moveq	r3, #1
 800a124:	61a3      	streq	r3, [r4, #24]
 800a126:	4620      	mov	r0, r4
 800a128:	f000 f820 	bl	800a16c <__sfp>
 800a12c:	6060      	str	r0, [r4, #4]
 800a12e:	4620      	mov	r0, r4
 800a130:	f000 f81c 	bl	800a16c <__sfp>
 800a134:	60a0      	str	r0, [r4, #8]
 800a136:	4620      	mov	r0, r4
 800a138:	f000 f818 	bl	800a16c <__sfp>
 800a13c:	2200      	movs	r2, #0
 800a13e:	60e0      	str	r0, [r4, #12]
 800a140:	2104      	movs	r1, #4
 800a142:	6860      	ldr	r0, [r4, #4]
 800a144:	f7ff ff82 	bl	800a04c <std>
 800a148:	68a0      	ldr	r0, [r4, #8]
 800a14a:	2201      	movs	r2, #1
 800a14c:	2109      	movs	r1, #9
 800a14e:	f7ff ff7d 	bl	800a04c <std>
 800a152:	68e0      	ldr	r0, [r4, #12]
 800a154:	2202      	movs	r2, #2
 800a156:	2112      	movs	r1, #18
 800a158:	f7ff ff78 	bl	800a04c <std>
 800a15c:	2301      	movs	r3, #1
 800a15e:	61a3      	str	r3, [r4, #24]
 800a160:	e7d2      	b.n	800a108 <__sinit+0xc>
 800a162:	bf00      	nop
 800a164:	0800a5a4 	.word	0x0800a5a4
 800a168:	0800a095 	.word	0x0800a095

0800a16c <__sfp>:
 800a16c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a16e:	4607      	mov	r7, r0
 800a170:	f7ff ffac 	bl	800a0cc <__sfp_lock_acquire>
 800a174:	4b1e      	ldr	r3, [pc, #120]	; (800a1f0 <__sfp+0x84>)
 800a176:	681e      	ldr	r6, [r3, #0]
 800a178:	69b3      	ldr	r3, [r6, #24]
 800a17a:	b913      	cbnz	r3, 800a182 <__sfp+0x16>
 800a17c:	4630      	mov	r0, r6
 800a17e:	f7ff ffbd 	bl	800a0fc <__sinit>
 800a182:	3648      	adds	r6, #72	; 0x48
 800a184:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800a188:	3b01      	subs	r3, #1
 800a18a:	d503      	bpl.n	800a194 <__sfp+0x28>
 800a18c:	6833      	ldr	r3, [r6, #0]
 800a18e:	b30b      	cbz	r3, 800a1d4 <__sfp+0x68>
 800a190:	6836      	ldr	r6, [r6, #0]
 800a192:	e7f7      	b.n	800a184 <__sfp+0x18>
 800a194:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800a198:	b9d5      	cbnz	r5, 800a1d0 <__sfp+0x64>
 800a19a:	4b16      	ldr	r3, [pc, #88]	; (800a1f4 <__sfp+0x88>)
 800a19c:	60e3      	str	r3, [r4, #12]
 800a19e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800a1a2:	6665      	str	r5, [r4, #100]	; 0x64
 800a1a4:	f000 f847 	bl	800a236 <__retarget_lock_init_recursive>
 800a1a8:	f7ff ff96 	bl	800a0d8 <__sfp_lock_release>
 800a1ac:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800a1b0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800a1b4:	6025      	str	r5, [r4, #0]
 800a1b6:	61a5      	str	r5, [r4, #24]
 800a1b8:	2208      	movs	r2, #8
 800a1ba:	4629      	mov	r1, r5
 800a1bc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800a1c0:	f7fd fafa 	bl	80077b8 <memset>
 800a1c4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800a1c8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800a1cc:	4620      	mov	r0, r4
 800a1ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a1d0:	3468      	adds	r4, #104	; 0x68
 800a1d2:	e7d9      	b.n	800a188 <__sfp+0x1c>
 800a1d4:	2104      	movs	r1, #4
 800a1d6:	4638      	mov	r0, r7
 800a1d8:	f7ff ff62 	bl	800a0a0 <__sfmoreglue>
 800a1dc:	4604      	mov	r4, r0
 800a1de:	6030      	str	r0, [r6, #0]
 800a1e0:	2800      	cmp	r0, #0
 800a1e2:	d1d5      	bne.n	800a190 <__sfp+0x24>
 800a1e4:	f7ff ff78 	bl	800a0d8 <__sfp_lock_release>
 800a1e8:	230c      	movs	r3, #12
 800a1ea:	603b      	str	r3, [r7, #0]
 800a1ec:	e7ee      	b.n	800a1cc <__sfp+0x60>
 800a1ee:	bf00      	nop
 800a1f0:	0800a5a4 	.word	0x0800a5a4
 800a1f4:	ffff0001 	.word	0xffff0001

0800a1f8 <_fwalk_reent>:
 800a1f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a1fc:	4606      	mov	r6, r0
 800a1fe:	4688      	mov	r8, r1
 800a200:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800a204:	2700      	movs	r7, #0
 800a206:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a20a:	f1b9 0901 	subs.w	r9, r9, #1
 800a20e:	d505      	bpl.n	800a21c <_fwalk_reent+0x24>
 800a210:	6824      	ldr	r4, [r4, #0]
 800a212:	2c00      	cmp	r4, #0
 800a214:	d1f7      	bne.n	800a206 <_fwalk_reent+0xe>
 800a216:	4638      	mov	r0, r7
 800a218:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a21c:	89ab      	ldrh	r3, [r5, #12]
 800a21e:	2b01      	cmp	r3, #1
 800a220:	d907      	bls.n	800a232 <_fwalk_reent+0x3a>
 800a222:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a226:	3301      	adds	r3, #1
 800a228:	d003      	beq.n	800a232 <_fwalk_reent+0x3a>
 800a22a:	4629      	mov	r1, r5
 800a22c:	4630      	mov	r0, r6
 800a22e:	47c0      	blx	r8
 800a230:	4307      	orrs	r7, r0
 800a232:	3568      	adds	r5, #104	; 0x68
 800a234:	e7e9      	b.n	800a20a <_fwalk_reent+0x12>

0800a236 <__retarget_lock_init_recursive>:
 800a236:	4770      	bx	lr

0800a238 <__retarget_lock_acquire_recursive>:
 800a238:	4770      	bx	lr

0800a23a <__retarget_lock_release_recursive>:
 800a23a:	4770      	bx	lr

0800a23c <__swhatbuf_r>:
 800a23c:	b570      	push	{r4, r5, r6, lr}
 800a23e:	460e      	mov	r6, r1
 800a240:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a244:	2900      	cmp	r1, #0
 800a246:	b096      	sub	sp, #88	; 0x58
 800a248:	4614      	mov	r4, r2
 800a24a:	461d      	mov	r5, r3
 800a24c:	da07      	bge.n	800a25e <__swhatbuf_r+0x22>
 800a24e:	2300      	movs	r3, #0
 800a250:	602b      	str	r3, [r5, #0]
 800a252:	89b3      	ldrh	r3, [r6, #12]
 800a254:	061a      	lsls	r2, r3, #24
 800a256:	d410      	bmi.n	800a27a <__swhatbuf_r+0x3e>
 800a258:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a25c:	e00e      	b.n	800a27c <__swhatbuf_r+0x40>
 800a25e:	466a      	mov	r2, sp
 800a260:	f000 f902 	bl	800a468 <_fstat_r>
 800a264:	2800      	cmp	r0, #0
 800a266:	dbf2      	blt.n	800a24e <__swhatbuf_r+0x12>
 800a268:	9a01      	ldr	r2, [sp, #4]
 800a26a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800a26e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800a272:	425a      	negs	r2, r3
 800a274:	415a      	adcs	r2, r3
 800a276:	602a      	str	r2, [r5, #0]
 800a278:	e7ee      	b.n	800a258 <__swhatbuf_r+0x1c>
 800a27a:	2340      	movs	r3, #64	; 0x40
 800a27c:	2000      	movs	r0, #0
 800a27e:	6023      	str	r3, [r4, #0]
 800a280:	b016      	add	sp, #88	; 0x58
 800a282:	bd70      	pop	{r4, r5, r6, pc}

0800a284 <__smakebuf_r>:
 800a284:	898b      	ldrh	r3, [r1, #12]
 800a286:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a288:	079d      	lsls	r5, r3, #30
 800a28a:	4606      	mov	r6, r0
 800a28c:	460c      	mov	r4, r1
 800a28e:	d507      	bpl.n	800a2a0 <__smakebuf_r+0x1c>
 800a290:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800a294:	6023      	str	r3, [r4, #0]
 800a296:	6123      	str	r3, [r4, #16]
 800a298:	2301      	movs	r3, #1
 800a29a:	6163      	str	r3, [r4, #20]
 800a29c:	b002      	add	sp, #8
 800a29e:	bd70      	pop	{r4, r5, r6, pc}
 800a2a0:	ab01      	add	r3, sp, #4
 800a2a2:	466a      	mov	r2, sp
 800a2a4:	f7ff ffca 	bl	800a23c <__swhatbuf_r>
 800a2a8:	9900      	ldr	r1, [sp, #0]
 800a2aa:	4605      	mov	r5, r0
 800a2ac:	4630      	mov	r0, r6
 800a2ae:	f7ff f987 	bl	80095c0 <_malloc_r>
 800a2b2:	b948      	cbnz	r0, 800a2c8 <__smakebuf_r+0x44>
 800a2b4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a2b8:	059a      	lsls	r2, r3, #22
 800a2ba:	d4ef      	bmi.n	800a29c <__smakebuf_r+0x18>
 800a2bc:	f023 0303 	bic.w	r3, r3, #3
 800a2c0:	f043 0302 	orr.w	r3, r3, #2
 800a2c4:	81a3      	strh	r3, [r4, #12]
 800a2c6:	e7e3      	b.n	800a290 <__smakebuf_r+0xc>
 800a2c8:	4b0d      	ldr	r3, [pc, #52]	; (800a300 <__smakebuf_r+0x7c>)
 800a2ca:	62b3      	str	r3, [r6, #40]	; 0x28
 800a2cc:	89a3      	ldrh	r3, [r4, #12]
 800a2ce:	6020      	str	r0, [r4, #0]
 800a2d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a2d4:	81a3      	strh	r3, [r4, #12]
 800a2d6:	9b00      	ldr	r3, [sp, #0]
 800a2d8:	6163      	str	r3, [r4, #20]
 800a2da:	9b01      	ldr	r3, [sp, #4]
 800a2dc:	6120      	str	r0, [r4, #16]
 800a2de:	b15b      	cbz	r3, 800a2f8 <__smakebuf_r+0x74>
 800a2e0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a2e4:	4630      	mov	r0, r6
 800a2e6:	f000 f8d1 	bl	800a48c <_isatty_r>
 800a2ea:	b128      	cbz	r0, 800a2f8 <__smakebuf_r+0x74>
 800a2ec:	89a3      	ldrh	r3, [r4, #12]
 800a2ee:	f023 0303 	bic.w	r3, r3, #3
 800a2f2:	f043 0301 	orr.w	r3, r3, #1
 800a2f6:	81a3      	strh	r3, [r4, #12]
 800a2f8:	89a0      	ldrh	r0, [r4, #12]
 800a2fa:	4305      	orrs	r5, r0
 800a2fc:	81a5      	strh	r5, [r4, #12]
 800a2fe:	e7cd      	b.n	800a29c <__smakebuf_r+0x18>
 800a300:	0800a095 	.word	0x0800a095

0800a304 <_malloc_usable_size_r>:
 800a304:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a308:	1f18      	subs	r0, r3, #4
 800a30a:	2b00      	cmp	r3, #0
 800a30c:	bfbc      	itt	lt
 800a30e:	580b      	ldrlt	r3, [r1, r0]
 800a310:	18c0      	addlt	r0, r0, r3
 800a312:	4770      	bx	lr

0800a314 <_raise_r>:
 800a314:	291f      	cmp	r1, #31
 800a316:	b538      	push	{r3, r4, r5, lr}
 800a318:	4604      	mov	r4, r0
 800a31a:	460d      	mov	r5, r1
 800a31c:	d904      	bls.n	800a328 <_raise_r+0x14>
 800a31e:	2316      	movs	r3, #22
 800a320:	6003      	str	r3, [r0, #0]
 800a322:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a326:	bd38      	pop	{r3, r4, r5, pc}
 800a328:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800a32a:	b112      	cbz	r2, 800a332 <_raise_r+0x1e>
 800a32c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a330:	b94b      	cbnz	r3, 800a346 <_raise_r+0x32>
 800a332:	4620      	mov	r0, r4
 800a334:	f000 f830 	bl	800a398 <_getpid_r>
 800a338:	462a      	mov	r2, r5
 800a33a:	4601      	mov	r1, r0
 800a33c:	4620      	mov	r0, r4
 800a33e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a342:	f000 b817 	b.w	800a374 <_kill_r>
 800a346:	2b01      	cmp	r3, #1
 800a348:	d00a      	beq.n	800a360 <_raise_r+0x4c>
 800a34a:	1c59      	adds	r1, r3, #1
 800a34c:	d103      	bne.n	800a356 <_raise_r+0x42>
 800a34e:	2316      	movs	r3, #22
 800a350:	6003      	str	r3, [r0, #0]
 800a352:	2001      	movs	r0, #1
 800a354:	e7e7      	b.n	800a326 <_raise_r+0x12>
 800a356:	2400      	movs	r4, #0
 800a358:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800a35c:	4628      	mov	r0, r5
 800a35e:	4798      	blx	r3
 800a360:	2000      	movs	r0, #0
 800a362:	e7e0      	b.n	800a326 <_raise_r+0x12>

0800a364 <raise>:
 800a364:	4b02      	ldr	r3, [pc, #8]	; (800a370 <raise+0xc>)
 800a366:	4601      	mov	r1, r0
 800a368:	6818      	ldr	r0, [r3, #0]
 800a36a:	f7ff bfd3 	b.w	800a314 <_raise_r>
 800a36e:	bf00      	nop
 800a370:	2000000c 	.word	0x2000000c

0800a374 <_kill_r>:
 800a374:	b538      	push	{r3, r4, r5, lr}
 800a376:	4d07      	ldr	r5, [pc, #28]	; (800a394 <_kill_r+0x20>)
 800a378:	2300      	movs	r3, #0
 800a37a:	4604      	mov	r4, r0
 800a37c:	4608      	mov	r0, r1
 800a37e:	4611      	mov	r1, r2
 800a380:	602b      	str	r3, [r5, #0]
 800a382:	f7f7 fcd9 	bl	8001d38 <_kill>
 800a386:	1c43      	adds	r3, r0, #1
 800a388:	d102      	bne.n	800a390 <_kill_r+0x1c>
 800a38a:	682b      	ldr	r3, [r5, #0]
 800a38c:	b103      	cbz	r3, 800a390 <_kill_r+0x1c>
 800a38e:	6023      	str	r3, [r4, #0]
 800a390:	bd38      	pop	{r3, r4, r5, pc}
 800a392:	bf00      	nop
 800a394:	200007fc 	.word	0x200007fc

0800a398 <_getpid_r>:
 800a398:	f7f7 bcc6 	b.w	8001d28 <_getpid>

0800a39c <__sread>:
 800a39c:	b510      	push	{r4, lr}
 800a39e:	460c      	mov	r4, r1
 800a3a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a3a4:	f000 f894 	bl	800a4d0 <_read_r>
 800a3a8:	2800      	cmp	r0, #0
 800a3aa:	bfab      	itete	ge
 800a3ac:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800a3ae:	89a3      	ldrhlt	r3, [r4, #12]
 800a3b0:	181b      	addge	r3, r3, r0
 800a3b2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800a3b6:	bfac      	ite	ge
 800a3b8:	6563      	strge	r3, [r4, #84]	; 0x54
 800a3ba:	81a3      	strhlt	r3, [r4, #12]
 800a3bc:	bd10      	pop	{r4, pc}

0800a3be <__swrite>:
 800a3be:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a3c2:	461f      	mov	r7, r3
 800a3c4:	898b      	ldrh	r3, [r1, #12]
 800a3c6:	05db      	lsls	r3, r3, #23
 800a3c8:	4605      	mov	r5, r0
 800a3ca:	460c      	mov	r4, r1
 800a3cc:	4616      	mov	r6, r2
 800a3ce:	d505      	bpl.n	800a3dc <__swrite+0x1e>
 800a3d0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a3d4:	2302      	movs	r3, #2
 800a3d6:	2200      	movs	r2, #0
 800a3d8:	f000 f868 	bl	800a4ac <_lseek_r>
 800a3dc:	89a3      	ldrh	r3, [r4, #12]
 800a3de:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a3e2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a3e6:	81a3      	strh	r3, [r4, #12]
 800a3e8:	4632      	mov	r2, r6
 800a3ea:	463b      	mov	r3, r7
 800a3ec:	4628      	mov	r0, r5
 800a3ee:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a3f2:	f000 b817 	b.w	800a424 <_write_r>

0800a3f6 <__sseek>:
 800a3f6:	b510      	push	{r4, lr}
 800a3f8:	460c      	mov	r4, r1
 800a3fa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a3fe:	f000 f855 	bl	800a4ac <_lseek_r>
 800a402:	1c43      	adds	r3, r0, #1
 800a404:	89a3      	ldrh	r3, [r4, #12]
 800a406:	bf15      	itete	ne
 800a408:	6560      	strne	r0, [r4, #84]	; 0x54
 800a40a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800a40e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800a412:	81a3      	strheq	r3, [r4, #12]
 800a414:	bf18      	it	ne
 800a416:	81a3      	strhne	r3, [r4, #12]
 800a418:	bd10      	pop	{r4, pc}

0800a41a <__sclose>:
 800a41a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a41e:	f000 b813 	b.w	800a448 <_close_r>
	...

0800a424 <_write_r>:
 800a424:	b538      	push	{r3, r4, r5, lr}
 800a426:	4d07      	ldr	r5, [pc, #28]	; (800a444 <_write_r+0x20>)
 800a428:	4604      	mov	r4, r0
 800a42a:	4608      	mov	r0, r1
 800a42c:	4611      	mov	r1, r2
 800a42e:	2200      	movs	r2, #0
 800a430:	602a      	str	r2, [r5, #0]
 800a432:	461a      	mov	r2, r3
 800a434:	f7f7 fcb7 	bl	8001da6 <_write>
 800a438:	1c43      	adds	r3, r0, #1
 800a43a:	d102      	bne.n	800a442 <_write_r+0x1e>
 800a43c:	682b      	ldr	r3, [r5, #0]
 800a43e:	b103      	cbz	r3, 800a442 <_write_r+0x1e>
 800a440:	6023      	str	r3, [r4, #0]
 800a442:	bd38      	pop	{r3, r4, r5, pc}
 800a444:	200007fc 	.word	0x200007fc

0800a448 <_close_r>:
 800a448:	b538      	push	{r3, r4, r5, lr}
 800a44a:	4d06      	ldr	r5, [pc, #24]	; (800a464 <_close_r+0x1c>)
 800a44c:	2300      	movs	r3, #0
 800a44e:	4604      	mov	r4, r0
 800a450:	4608      	mov	r0, r1
 800a452:	602b      	str	r3, [r5, #0]
 800a454:	f7f7 fcc3 	bl	8001dde <_close>
 800a458:	1c43      	adds	r3, r0, #1
 800a45a:	d102      	bne.n	800a462 <_close_r+0x1a>
 800a45c:	682b      	ldr	r3, [r5, #0]
 800a45e:	b103      	cbz	r3, 800a462 <_close_r+0x1a>
 800a460:	6023      	str	r3, [r4, #0]
 800a462:	bd38      	pop	{r3, r4, r5, pc}
 800a464:	200007fc 	.word	0x200007fc

0800a468 <_fstat_r>:
 800a468:	b538      	push	{r3, r4, r5, lr}
 800a46a:	4d07      	ldr	r5, [pc, #28]	; (800a488 <_fstat_r+0x20>)
 800a46c:	2300      	movs	r3, #0
 800a46e:	4604      	mov	r4, r0
 800a470:	4608      	mov	r0, r1
 800a472:	4611      	mov	r1, r2
 800a474:	602b      	str	r3, [r5, #0]
 800a476:	f7f7 fcbe 	bl	8001df6 <_fstat>
 800a47a:	1c43      	adds	r3, r0, #1
 800a47c:	d102      	bne.n	800a484 <_fstat_r+0x1c>
 800a47e:	682b      	ldr	r3, [r5, #0]
 800a480:	b103      	cbz	r3, 800a484 <_fstat_r+0x1c>
 800a482:	6023      	str	r3, [r4, #0]
 800a484:	bd38      	pop	{r3, r4, r5, pc}
 800a486:	bf00      	nop
 800a488:	200007fc 	.word	0x200007fc

0800a48c <_isatty_r>:
 800a48c:	b538      	push	{r3, r4, r5, lr}
 800a48e:	4d06      	ldr	r5, [pc, #24]	; (800a4a8 <_isatty_r+0x1c>)
 800a490:	2300      	movs	r3, #0
 800a492:	4604      	mov	r4, r0
 800a494:	4608      	mov	r0, r1
 800a496:	602b      	str	r3, [r5, #0]
 800a498:	f7f7 fcbd 	bl	8001e16 <_isatty>
 800a49c:	1c43      	adds	r3, r0, #1
 800a49e:	d102      	bne.n	800a4a6 <_isatty_r+0x1a>
 800a4a0:	682b      	ldr	r3, [r5, #0]
 800a4a2:	b103      	cbz	r3, 800a4a6 <_isatty_r+0x1a>
 800a4a4:	6023      	str	r3, [r4, #0]
 800a4a6:	bd38      	pop	{r3, r4, r5, pc}
 800a4a8:	200007fc 	.word	0x200007fc

0800a4ac <_lseek_r>:
 800a4ac:	b538      	push	{r3, r4, r5, lr}
 800a4ae:	4d07      	ldr	r5, [pc, #28]	; (800a4cc <_lseek_r+0x20>)
 800a4b0:	4604      	mov	r4, r0
 800a4b2:	4608      	mov	r0, r1
 800a4b4:	4611      	mov	r1, r2
 800a4b6:	2200      	movs	r2, #0
 800a4b8:	602a      	str	r2, [r5, #0]
 800a4ba:	461a      	mov	r2, r3
 800a4bc:	f7f7 fcb6 	bl	8001e2c <_lseek>
 800a4c0:	1c43      	adds	r3, r0, #1
 800a4c2:	d102      	bne.n	800a4ca <_lseek_r+0x1e>
 800a4c4:	682b      	ldr	r3, [r5, #0]
 800a4c6:	b103      	cbz	r3, 800a4ca <_lseek_r+0x1e>
 800a4c8:	6023      	str	r3, [r4, #0]
 800a4ca:	bd38      	pop	{r3, r4, r5, pc}
 800a4cc:	200007fc 	.word	0x200007fc

0800a4d0 <_read_r>:
 800a4d0:	b538      	push	{r3, r4, r5, lr}
 800a4d2:	4d07      	ldr	r5, [pc, #28]	; (800a4f0 <_read_r+0x20>)
 800a4d4:	4604      	mov	r4, r0
 800a4d6:	4608      	mov	r0, r1
 800a4d8:	4611      	mov	r1, r2
 800a4da:	2200      	movs	r2, #0
 800a4dc:	602a      	str	r2, [r5, #0]
 800a4de:	461a      	mov	r2, r3
 800a4e0:	f7f7 fc44 	bl	8001d6c <_read>
 800a4e4:	1c43      	adds	r3, r0, #1
 800a4e6:	d102      	bne.n	800a4ee <_read_r+0x1e>
 800a4e8:	682b      	ldr	r3, [r5, #0]
 800a4ea:	b103      	cbz	r3, 800a4ee <_read_r+0x1e>
 800a4ec:	6023      	str	r3, [r4, #0]
 800a4ee:	bd38      	pop	{r3, r4, r5, pc}
 800a4f0:	200007fc 	.word	0x200007fc

0800a4f4 <_init>:
 800a4f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a4f6:	bf00      	nop
 800a4f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a4fa:	bc08      	pop	{r3}
 800a4fc:	469e      	mov	lr, r3
 800a4fe:	4770      	bx	lr

0800a500 <_fini>:
 800a500:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a502:	bf00      	nop
 800a504:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a506:	bc08      	pop	{r3}
 800a508:	469e      	mov	lr, r3
 800a50a:	4770      	bx	lr
