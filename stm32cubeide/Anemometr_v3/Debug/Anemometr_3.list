
Anemometr_3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005240  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000e8  0800534c  0800534c  0001534c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005434  08005434  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08005434  08005434  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005434  08005434  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005434  08005434  00015434  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005438  08005438  00015438  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  0800543c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004a0  20000070  080054ac  00020070  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000510  080054ac  00020510  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00015222  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002c1b  00000000  00000000  000352bb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000012d0  00000000  00000000  00037ed8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001200  00000000  00000000  000391a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019f70  00000000  00000000  0003a3a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00014ca7  00000000  00000000  00054318  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000944fd  00000000  00000000  00068fbf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000fd4bc  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000054c8  00000000  00000000  000fd510  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000070 	.word	0x20000070
 8000128:	00000000 	.word	0x00000000
 800012c:	08005334 	.word	0x08005334

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000074 	.word	0x20000074
 8000148:	08005334 	.word	0x08005334

0800014c <__aeabi_drsub>:
 800014c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000150:	e002      	b.n	8000158 <__adddf3>
 8000152:	bf00      	nop

08000154 <__aeabi_dsub>:
 8000154:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000158 <__adddf3>:
 8000158:	b530      	push	{r4, r5, lr}
 800015a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800015e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000162:	ea94 0f05 	teq	r4, r5
 8000166:	bf08      	it	eq
 8000168:	ea90 0f02 	teqeq	r0, r2
 800016c:	bf1f      	itttt	ne
 800016e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000172:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000176:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800017e:	f000 80e2 	beq.w	8000346 <__adddf3+0x1ee>
 8000182:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000186:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018a:	bfb8      	it	lt
 800018c:	426d      	neglt	r5, r5
 800018e:	dd0c      	ble.n	80001aa <__adddf3+0x52>
 8000190:	442c      	add	r4, r5
 8000192:	ea80 0202 	eor.w	r2, r0, r2
 8000196:	ea81 0303 	eor.w	r3, r1, r3
 800019a:	ea82 0000 	eor.w	r0, r2, r0
 800019e:	ea83 0101 	eor.w	r1, r3, r1
 80001a2:	ea80 0202 	eor.w	r2, r0, r2
 80001a6:	ea81 0303 	eor.w	r3, r1, r3
 80001aa:	2d36      	cmp	r5, #54	; 0x36
 80001ac:	bf88      	it	hi
 80001ae:	bd30      	pophi	{r4, r5, pc}
 80001b0:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001b4:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001b8:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001bc:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c0:	d002      	beq.n	80001c8 <__adddf3+0x70>
 80001c2:	4240      	negs	r0, r0
 80001c4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001c8:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001cc:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x84>
 80001d6:	4252      	negs	r2, r2
 80001d8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001dc:	ea94 0f05 	teq	r4, r5
 80001e0:	f000 80a7 	beq.w	8000332 <__adddf3+0x1da>
 80001e4:	f1a4 0401 	sub.w	r4, r4, #1
 80001e8:	f1d5 0e20 	rsbs	lr, r5, #32
 80001ec:	db0d      	blt.n	800020a <__adddf3+0xb2>
 80001ee:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f2:	fa22 f205 	lsr.w	r2, r2, r5
 80001f6:	1880      	adds	r0, r0, r2
 80001f8:	f141 0100 	adc.w	r1, r1, #0
 80001fc:	fa03 f20e 	lsl.w	r2, r3, lr
 8000200:	1880      	adds	r0, r0, r2
 8000202:	fa43 f305 	asr.w	r3, r3, r5
 8000206:	4159      	adcs	r1, r3
 8000208:	e00e      	b.n	8000228 <__adddf3+0xd0>
 800020a:	f1a5 0520 	sub.w	r5, r5, #32
 800020e:	f10e 0e20 	add.w	lr, lr, #32
 8000212:	2a01      	cmp	r2, #1
 8000214:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000218:	bf28      	it	cs
 800021a:	f04c 0c02 	orrcs.w	ip, ip, #2
 800021e:	fa43 f305 	asr.w	r3, r3, r5
 8000222:	18c0      	adds	r0, r0, r3
 8000224:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000228:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800022c:	d507      	bpl.n	800023e <__adddf3+0xe6>
 800022e:	f04f 0e00 	mov.w	lr, #0
 8000232:	f1dc 0c00 	rsbs	ip, ip, #0
 8000236:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023a:	eb6e 0101 	sbc.w	r1, lr, r1
 800023e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000242:	d31b      	bcc.n	800027c <__adddf3+0x124>
 8000244:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000248:	d30c      	bcc.n	8000264 <__adddf3+0x10c>
 800024a:	0849      	lsrs	r1, r1, #1
 800024c:	ea5f 0030 	movs.w	r0, r0, rrx
 8000250:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000254:	f104 0401 	add.w	r4, r4, #1
 8000258:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800025c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000260:	f080 809a 	bcs.w	8000398 <__adddf3+0x240>
 8000264:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000268:	bf08      	it	eq
 800026a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800026e:	f150 0000 	adcs.w	r0, r0, #0
 8000272:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000276:	ea41 0105 	orr.w	r1, r1, r5
 800027a:	bd30      	pop	{r4, r5, pc}
 800027c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000280:	4140      	adcs	r0, r0
 8000282:	eb41 0101 	adc.w	r1, r1, r1
 8000286:	3c01      	subs	r4, #1
 8000288:	bf28      	it	cs
 800028a:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800028e:	d2e9      	bcs.n	8000264 <__adddf3+0x10c>
 8000290:	f091 0f00 	teq	r1, #0
 8000294:	bf04      	itt	eq
 8000296:	4601      	moveq	r1, r0
 8000298:	2000      	moveq	r0, #0
 800029a:	fab1 f381 	clz	r3, r1
 800029e:	bf08      	it	eq
 80002a0:	3320      	addeq	r3, #32
 80002a2:	f1a3 030b 	sub.w	r3, r3, #11
 80002a6:	f1b3 0220 	subs.w	r2, r3, #32
 80002aa:	da0c      	bge.n	80002c6 <__adddf3+0x16e>
 80002ac:	320c      	adds	r2, #12
 80002ae:	dd08      	ble.n	80002c2 <__adddf3+0x16a>
 80002b0:	f102 0c14 	add.w	ip, r2, #20
 80002b4:	f1c2 020c 	rsb	r2, r2, #12
 80002b8:	fa01 f00c 	lsl.w	r0, r1, ip
 80002bc:	fa21 f102 	lsr.w	r1, r1, r2
 80002c0:	e00c      	b.n	80002dc <__adddf3+0x184>
 80002c2:	f102 0214 	add.w	r2, r2, #20
 80002c6:	bfd8      	it	le
 80002c8:	f1c2 0c20 	rsble	ip, r2, #32
 80002cc:	fa01 f102 	lsl.w	r1, r1, r2
 80002d0:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d4:	bfdc      	itt	le
 80002d6:	ea41 010c 	orrle.w	r1, r1, ip
 80002da:	4090      	lslle	r0, r2
 80002dc:	1ae4      	subs	r4, r4, r3
 80002de:	bfa2      	ittt	ge
 80002e0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e4:	4329      	orrge	r1, r5
 80002e6:	bd30      	popge	{r4, r5, pc}
 80002e8:	ea6f 0404 	mvn.w	r4, r4
 80002ec:	3c1f      	subs	r4, #31
 80002ee:	da1c      	bge.n	800032a <__adddf3+0x1d2>
 80002f0:	340c      	adds	r4, #12
 80002f2:	dc0e      	bgt.n	8000312 <__adddf3+0x1ba>
 80002f4:	f104 0414 	add.w	r4, r4, #20
 80002f8:	f1c4 0220 	rsb	r2, r4, #32
 80002fc:	fa20 f004 	lsr.w	r0, r0, r4
 8000300:	fa01 f302 	lsl.w	r3, r1, r2
 8000304:	ea40 0003 	orr.w	r0, r0, r3
 8000308:	fa21 f304 	lsr.w	r3, r1, r4
 800030c:	ea45 0103 	orr.w	r1, r5, r3
 8000310:	bd30      	pop	{r4, r5, pc}
 8000312:	f1c4 040c 	rsb	r4, r4, #12
 8000316:	f1c4 0220 	rsb	r2, r4, #32
 800031a:	fa20 f002 	lsr.w	r0, r0, r2
 800031e:	fa01 f304 	lsl.w	r3, r1, r4
 8000322:	ea40 0003 	orr.w	r0, r0, r3
 8000326:	4629      	mov	r1, r5
 8000328:	bd30      	pop	{r4, r5, pc}
 800032a:	fa21 f004 	lsr.w	r0, r1, r4
 800032e:	4629      	mov	r1, r5
 8000330:	bd30      	pop	{r4, r5, pc}
 8000332:	f094 0f00 	teq	r4, #0
 8000336:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800033a:	bf06      	itte	eq
 800033c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000340:	3401      	addeq	r4, #1
 8000342:	3d01      	subne	r5, #1
 8000344:	e74e      	b.n	80001e4 <__adddf3+0x8c>
 8000346:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034a:	bf18      	it	ne
 800034c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000350:	d029      	beq.n	80003a6 <__adddf3+0x24e>
 8000352:	ea94 0f05 	teq	r4, r5
 8000356:	bf08      	it	eq
 8000358:	ea90 0f02 	teqeq	r0, r2
 800035c:	d005      	beq.n	800036a <__adddf3+0x212>
 800035e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000362:	bf04      	itt	eq
 8000364:	4619      	moveq	r1, r3
 8000366:	4610      	moveq	r0, r2
 8000368:	bd30      	pop	{r4, r5, pc}
 800036a:	ea91 0f03 	teq	r1, r3
 800036e:	bf1e      	ittt	ne
 8000370:	2100      	movne	r1, #0
 8000372:	2000      	movne	r0, #0
 8000374:	bd30      	popne	{r4, r5, pc}
 8000376:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037a:	d105      	bne.n	8000388 <__adddf3+0x230>
 800037c:	0040      	lsls	r0, r0, #1
 800037e:	4149      	adcs	r1, r1
 8000380:	bf28      	it	cs
 8000382:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000386:	bd30      	pop	{r4, r5, pc}
 8000388:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 800038c:	bf3c      	itt	cc
 800038e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000392:	bd30      	popcc	{r4, r5, pc}
 8000394:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000398:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 800039c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a0:	f04f 0000 	mov.w	r0, #0
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003aa:	bf1a      	itte	ne
 80003ac:	4619      	movne	r1, r3
 80003ae:	4610      	movne	r0, r2
 80003b0:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b4:	bf1c      	itt	ne
 80003b6:	460b      	movne	r3, r1
 80003b8:	4602      	movne	r2, r0
 80003ba:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003be:	bf06      	itte	eq
 80003c0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c4:	ea91 0f03 	teqeq	r1, r3
 80003c8:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	bf00      	nop

080003d0 <__aeabi_ui2d>:
 80003d0:	f090 0f00 	teq	r0, #0
 80003d4:	bf04      	itt	eq
 80003d6:	2100      	moveq	r1, #0
 80003d8:	4770      	bxeq	lr
 80003da:	b530      	push	{r4, r5, lr}
 80003dc:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003e0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003e4:	f04f 0500 	mov.w	r5, #0
 80003e8:	f04f 0100 	mov.w	r1, #0
 80003ec:	e750      	b.n	8000290 <__adddf3+0x138>
 80003ee:	bf00      	nop

080003f0 <__aeabi_i2d>:
 80003f0:	f090 0f00 	teq	r0, #0
 80003f4:	bf04      	itt	eq
 80003f6:	2100      	moveq	r1, #0
 80003f8:	4770      	bxeq	lr
 80003fa:	b530      	push	{r4, r5, lr}
 80003fc:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000400:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000404:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000408:	bf48      	it	mi
 800040a:	4240      	negmi	r0, r0
 800040c:	f04f 0100 	mov.w	r1, #0
 8000410:	e73e      	b.n	8000290 <__adddf3+0x138>
 8000412:	bf00      	nop

08000414 <__aeabi_f2d>:
 8000414:	0042      	lsls	r2, r0, #1
 8000416:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041a:	ea4f 0131 	mov.w	r1, r1, rrx
 800041e:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000422:	bf1f      	itttt	ne
 8000424:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000428:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 800042c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000430:	4770      	bxne	lr
 8000432:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000436:	bf08      	it	eq
 8000438:	4770      	bxeq	lr
 800043a:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800043e:	bf04      	itt	eq
 8000440:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000444:	4770      	bxeq	lr
 8000446:	b530      	push	{r4, r5, lr}
 8000448:	f44f 7460 	mov.w	r4, #896	; 0x380
 800044c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000450:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000454:	e71c      	b.n	8000290 <__adddf3+0x138>
 8000456:	bf00      	nop

08000458 <__aeabi_ul2d>:
 8000458:	ea50 0201 	orrs.w	r2, r0, r1
 800045c:	bf08      	it	eq
 800045e:	4770      	bxeq	lr
 8000460:	b530      	push	{r4, r5, lr}
 8000462:	f04f 0500 	mov.w	r5, #0
 8000466:	e00a      	b.n	800047e <__aeabi_l2d+0x16>

08000468 <__aeabi_l2d>:
 8000468:	ea50 0201 	orrs.w	r2, r0, r1
 800046c:	bf08      	it	eq
 800046e:	4770      	bxeq	lr
 8000470:	b530      	push	{r4, r5, lr}
 8000472:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000476:	d502      	bpl.n	800047e <__aeabi_l2d+0x16>
 8000478:	4240      	negs	r0, r0
 800047a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800047e:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000482:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000486:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048a:	f43f aed8 	beq.w	800023e <__adddf3+0xe6>
 800048e:	f04f 0203 	mov.w	r2, #3
 8000492:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000496:	bf18      	it	ne
 8000498:	3203      	addne	r2, #3
 800049a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049e:	bf18      	it	ne
 80004a0:	3203      	addne	r2, #3
 80004a2:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004a6:	f1c2 0320 	rsb	r3, r2, #32
 80004aa:	fa00 fc03 	lsl.w	ip, r0, r3
 80004ae:	fa20 f002 	lsr.w	r0, r0, r2
 80004b2:	fa01 fe03 	lsl.w	lr, r1, r3
 80004b6:	ea40 000e 	orr.w	r0, r0, lr
 80004ba:	fa21 f102 	lsr.w	r1, r1, r2
 80004be:	4414      	add	r4, r2
 80004c0:	e6bd      	b.n	800023e <__adddf3+0xe6>
 80004c2:	bf00      	nop

080004c4 <DHCP_time_handler>:
	dhcp_tick_next = DHCP_WAIT_TIME;
	dhcp_retry_count = 0;
}

void DHCP_time_handler(void)
{
 80004c4:	b480      	push	{r7}
 80004c6:	af00      	add	r7, sp, #0
	dhcp_tick_1s++;
 80004c8:	4b04      	ldr	r3, [pc, #16]	; (80004dc <DHCP_time_handler+0x18>)
 80004ca:	681b      	ldr	r3, [r3, #0]
 80004cc:	3301      	adds	r3, #1
 80004ce:	4a03      	ldr	r2, [pc, #12]	; (80004dc <DHCP_time_handler+0x18>)
 80004d0:	6013      	str	r3, [r2, #0]
}
 80004d2:	bf00      	nop
 80004d4:	46bd      	mov	sp, r7
 80004d6:	bc80      	pop	{r7}
 80004d8:	4770      	bx	lr
 80004da:	bf00      	nop
 80004dc:	2000008c 	.word	0x2000008c

080004e0 <rwFlash>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void rwFlash(uint8_t rwFlag) {
 80004e0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80004e4:	b092      	sub	sp, #72	; 0x48
 80004e6:	af06      	add	r7, sp, #24
 80004e8:	4603      	mov	r3, r0
 80004ea:	71fb      	strb	r3, [r7, #7]
	uint32_t pageAdr = 0x800FC00; //.
 80004ec:	4b7a      	ldr	r3, [pc, #488]	; (80006d8 <rwFlash+0x1f8>)
 80004ee:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint32_t magicKey;
	uint64_t dataForSave;
	magicKey = *(__IO uint32_t*) pageAdr;
 80004f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80004f2:	681b      	ldr	r3, [r3, #0]
 80004f4:	62bb      	str	r3, [r7, #40]	; 0x28
	if ((magicKey != 0x12349876) || (rwFlag == 1)) { // rwFlag == 1 for wrtite data to flash
 80004f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80004f8:	4a78      	ldr	r2, [pc, #480]	; (80006dc <rwFlash+0x1fc>)
 80004fa:	4293      	cmp	r3, r2
 80004fc:	d103      	bne.n	8000506 <rwFlash+0x26>
 80004fe:	79fb      	ldrb	r3, [r7, #7]
 8000500:	2b01      	cmp	r3, #1
 8000502:	f040 80fb 	bne.w	80006fc <rwFlash+0x21c>
		magicKey = 0x12349876;
 8000506:	4b75      	ldr	r3, [pc, #468]	; (80006dc <rwFlash+0x1fc>)
 8000508:	62bb      	str	r3, [r7, #40]	; 0x28
		if (rwFlag == 0) { // For first initial
 800050a:	79fb      	ldrb	r3, [r7, #7]
 800050c:	2b00      	cmp	r3, #0
 800050e:	d117      	bne.n	8000540 <rwFlash+0x60>
			C_13 = CALIBRATE_START;
 8000510:	4b73      	ldr	r3, [pc, #460]	; (80006e0 <rwFlash+0x200>)
 8000512:	f649 4240 	movw	r2, #40000	; 0x9c40
 8000516:	801a      	strh	r2, [r3, #0]
			C_24 = CALIBRATE_START;
 8000518:	4b72      	ldr	r3, [pc, #456]	; (80006e4 <rwFlash+0x204>)
 800051a:	f649 4240 	movw	r2, #40000	; 0x9c40
 800051e:	801a      	strh	r2, [r3, #0]
			DX1.f = 1;
 8000520:	4b71      	ldr	r3, [pc, #452]	; (80006e8 <rwFlash+0x208>)
 8000522:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8000526:	601a      	str	r2, [r3, #0]
			DX2.f = 1;
 8000528:	4b70      	ldr	r3, [pc, #448]	; (80006ec <rwFlash+0x20c>)
 800052a:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800052e:	601a      	str	r2, [r3, #0]
			DY1.f = 1;
 8000530:	4b6f      	ldr	r3, [pc, #444]	; (80006f0 <rwFlash+0x210>)
 8000532:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8000536:	601a      	str	r2, [r3, #0]
			DY2.f = 1;
 8000538:	4b6e      	ldr	r3, [pc, #440]	; (80006f4 <rwFlash+0x214>)
 800053a:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800053e:	601a      	str	r2, [r3, #0]
		}
		FLASH_EraseInitTypeDef EraseInitStruct;
		uint32_t PAGEError = 0;
 8000540:	2300      	movs	r3, #0
 8000542:	60fb      	str	r3, [r7, #12]
		EraseInitStruct.TypeErase   = FLASH_TYPEERASE_PAGES;
 8000544:	2300      	movs	r3, #0
 8000546:	613b      	str	r3, [r7, #16]
		EraseInitStruct.PageAddress = pageAdr; //
 8000548:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800054a:	61bb      	str	r3, [r7, #24]
		EraseInitStruct.NbPages     = 1;
 800054c:	2301      	movs	r3, #1
 800054e:	61fb      	str	r3, [r7, #28]

		flash_ok = HAL_ERROR;
 8000550:	4b69      	ldr	r3, [pc, #420]	; (80006f8 <rwFlash+0x218>)
 8000552:	2201      	movs	r2, #1
 8000554:	701a      	strb	r2, [r3, #0]
		// Unlock flash
		while(flash_ok != HAL_OK) {
 8000556:	e005      	b.n	8000564 <rwFlash+0x84>
		  flash_ok = HAL_FLASH_Unlock();
 8000558:	f001 faf6 	bl	8001b48 <HAL_FLASH_Unlock>
 800055c:	4603      	mov	r3, r0
 800055e:	461a      	mov	r2, r3
 8000560:	4b65      	ldr	r3, [pc, #404]	; (80006f8 <rwFlash+0x218>)
 8000562:	701a      	strb	r2, [r3, #0]
		while(flash_ok != HAL_OK) {
 8000564:	4b64      	ldr	r3, [pc, #400]	; (80006f8 <rwFlash+0x218>)
 8000566:	781b      	ldrb	r3, [r3, #0]
 8000568:	2b00      	cmp	r3, #0
 800056a:	d1f5      	bne.n	8000558 <rwFlash+0x78>
		}
		if (HAL_FLASHEx_Erase(&EraseInitStruct, &PAGEError) == HAL_OK) {
 800056c:	f107 020c 	add.w	r2, r7, #12
 8000570:	f107 0310 	add.w	r3, r7, #16
 8000574:	4611      	mov	r1, r2
 8000576:	4618      	mov	r0, r3
 8000578:	f001 fbce 	bl	8001d18 <HAL_FLASHEx_Erase>
 800057c:	4603      	mov	r3, r0
 800057e:	2b00      	cmp	r3, #0
 8000580:	f040 809a 	bne.w	80006b8 <rwFlash+0x1d8>
			dataForSave = (uint64_t) magicKey;
 8000584:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000586:	461a      	mov	r2, r3
 8000588:	f04f 0300 	mov.w	r3, #0
 800058c:	e9c7 2308 	strd	r2, r3, [r7, #32]
			flash_ok = HAL_ERROR;
 8000590:	4b59      	ldr	r3, [pc, #356]	; (80006f8 <rwFlash+0x218>)
 8000592:	2201      	movs	r2, #1
 8000594:	701a      	strb	r2, [r3, #0]
			while(flash_ok != HAL_OK){
 8000596:	e009      	b.n	80005ac <rwFlash+0xcc>
				flash_ok = HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, pageAdr, dataForSave); // Write  magic key
 8000598:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800059c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800059e:	2003      	movs	r0, #3
 80005a0:	f001 fa62 	bl	8001a68 <HAL_FLASH_Program>
 80005a4:	4603      	mov	r3, r0
 80005a6:	461a      	mov	r2, r3
 80005a8:	4b53      	ldr	r3, [pc, #332]	; (80006f8 <rwFlash+0x218>)
 80005aa:	701a      	strb	r2, [r3, #0]
			while(flash_ok != HAL_OK){
 80005ac:	4b52      	ldr	r3, [pc, #328]	; (80006f8 <rwFlash+0x218>)
 80005ae:	781b      	ldrb	r3, [r3, #0]
 80005b0:	2b00      	cmp	r3, #0
 80005b2:	d1f1      	bne.n	8000598 <rwFlash+0xb8>
			}
			dataForSave = (uint64_t) (C_13 | ((uint64_t) C_24 << 16));
 80005b4:	4b4a      	ldr	r3, [pc, #296]	; (80006e0 <rwFlash+0x200>)
 80005b6:	881b      	ldrh	r3, [r3, #0]
 80005b8:	b29a      	uxth	r2, r3
 80005ba:	f04f 0300 	mov.w	r3, #0
 80005be:	4949      	ldr	r1, [pc, #292]	; (80006e4 <rwFlash+0x204>)
 80005c0:	8809      	ldrh	r1, [r1, #0]
 80005c2:	b288      	uxth	r0, r1
 80005c4:	f04f 0100 	mov.w	r1, #0
 80005c8:	0c05      	lsrs	r5, r0, #16
 80005ca:	0404      	lsls	r4, r0, #16
 80005cc:	ea42 0804 	orr.w	r8, r2, r4
 80005d0:	ea43 0905 	orr.w	r9, r3, r5
 80005d4:	e9c7 8908 	strd	r8, r9, [r7, #32]
			flash_ok = HAL_ERROR;
 80005d8:	4b47      	ldr	r3, [pc, #284]	; (80006f8 <rwFlash+0x218>)
 80005da:	2201      	movs	r2, #1
 80005dc:	701a      	strb	r2, [r3, #0]
			while(flash_ok != HAL_OK){
 80005de:	e00b      	b.n	80005f8 <rwFlash+0x118>
				flash_ok = HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, pageAdr + 16, dataForSave); // Write C_12 C_34 C_14 C_23
 80005e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80005e2:	f103 0110 	add.w	r1, r3, #16
 80005e6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80005ea:	2003      	movs	r0, #3
 80005ec:	f001 fa3c 	bl	8001a68 <HAL_FLASH_Program>
 80005f0:	4603      	mov	r3, r0
 80005f2:	461a      	mov	r2, r3
 80005f4:	4b40      	ldr	r3, [pc, #256]	; (80006f8 <rwFlash+0x218>)
 80005f6:	701a      	strb	r2, [r3, #0]
			while(flash_ok != HAL_OK){
 80005f8:	4b3f      	ldr	r3, [pc, #252]	; (80006f8 <rwFlash+0x218>)
 80005fa:	781b      	ldrb	r3, [r3, #0]
 80005fc:	2b00      	cmp	r3, #0
 80005fe:	d1ef      	bne.n	80005e0 <rwFlash+0x100>
			}
			flash_ok = HAL_ERROR;
 8000600:	4b3d      	ldr	r3, [pc, #244]	; (80006f8 <rwFlash+0x218>)
 8000602:	2201      	movs	r2, #1
 8000604:	701a      	strb	r2, [r3, #0]
			while(flash_ok != HAL_OK){
 8000606:	e00e      	b.n	8000626 <rwFlash+0x146>
				flash_ok = HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, pageAdr + 24, DX1.u); // Write DX1
 8000608:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800060a:	f103 0118 	add.w	r1, r3, #24
 800060e:	4b36      	ldr	r3, [pc, #216]	; (80006e8 <rwFlash+0x208>)
 8000610:	681b      	ldr	r3, [r3, #0]
 8000612:	461a      	mov	r2, r3
 8000614:	f04f 0300 	mov.w	r3, #0
 8000618:	2002      	movs	r0, #2
 800061a:	f001 fa25 	bl	8001a68 <HAL_FLASH_Program>
 800061e:	4603      	mov	r3, r0
 8000620:	461a      	mov	r2, r3
 8000622:	4b35      	ldr	r3, [pc, #212]	; (80006f8 <rwFlash+0x218>)
 8000624:	701a      	strb	r2, [r3, #0]
			while(flash_ok != HAL_OK){
 8000626:	4b34      	ldr	r3, [pc, #208]	; (80006f8 <rwFlash+0x218>)
 8000628:	781b      	ldrb	r3, [r3, #0]
 800062a:	2b00      	cmp	r3, #0
 800062c:	d1ec      	bne.n	8000608 <rwFlash+0x128>
			}
			flash_ok = HAL_ERROR;
 800062e:	4b32      	ldr	r3, [pc, #200]	; (80006f8 <rwFlash+0x218>)
 8000630:	2201      	movs	r2, #1
 8000632:	701a      	strb	r2, [r3, #0]
			while(flash_ok != HAL_OK){
 8000634:	e00e      	b.n	8000654 <rwFlash+0x174>
				flash_ok = HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, pageAdr + 28, DX2.u); // Write DX2
 8000636:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000638:	f103 011c 	add.w	r1, r3, #28
 800063c:	4b2b      	ldr	r3, [pc, #172]	; (80006ec <rwFlash+0x20c>)
 800063e:	681b      	ldr	r3, [r3, #0]
 8000640:	461a      	mov	r2, r3
 8000642:	f04f 0300 	mov.w	r3, #0
 8000646:	2002      	movs	r0, #2
 8000648:	f001 fa0e 	bl	8001a68 <HAL_FLASH_Program>
 800064c:	4603      	mov	r3, r0
 800064e:	461a      	mov	r2, r3
 8000650:	4b29      	ldr	r3, [pc, #164]	; (80006f8 <rwFlash+0x218>)
 8000652:	701a      	strb	r2, [r3, #0]
			while(flash_ok != HAL_OK){
 8000654:	4b28      	ldr	r3, [pc, #160]	; (80006f8 <rwFlash+0x218>)
 8000656:	781b      	ldrb	r3, [r3, #0]
 8000658:	2b00      	cmp	r3, #0
 800065a:	d1ec      	bne.n	8000636 <rwFlash+0x156>
			}
			flash_ok = HAL_ERROR;
 800065c:	4b26      	ldr	r3, [pc, #152]	; (80006f8 <rwFlash+0x218>)
 800065e:	2201      	movs	r2, #1
 8000660:	701a      	strb	r2, [r3, #0]
			while(flash_ok != HAL_OK){
 8000662:	e00e      	b.n	8000682 <rwFlash+0x1a2>
				flash_ok = HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, pageAdr + 32, DY1.u); // Write DY1
 8000664:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000666:	f103 0120 	add.w	r1, r3, #32
 800066a:	4b21      	ldr	r3, [pc, #132]	; (80006f0 <rwFlash+0x210>)
 800066c:	681b      	ldr	r3, [r3, #0]
 800066e:	461a      	mov	r2, r3
 8000670:	f04f 0300 	mov.w	r3, #0
 8000674:	2002      	movs	r0, #2
 8000676:	f001 f9f7 	bl	8001a68 <HAL_FLASH_Program>
 800067a:	4603      	mov	r3, r0
 800067c:	461a      	mov	r2, r3
 800067e:	4b1e      	ldr	r3, [pc, #120]	; (80006f8 <rwFlash+0x218>)
 8000680:	701a      	strb	r2, [r3, #0]
			while(flash_ok != HAL_OK){
 8000682:	4b1d      	ldr	r3, [pc, #116]	; (80006f8 <rwFlash+0x218>)
 8000684:	781b      	ldrb	r3, [r3, #0]
 8000686:	2b00      	cmp	r3, #0
 8000688:	d1ec      	bne.n	8000664 <rwFlash+0x184>
			}
			flash_ok = HAL_ERROR;
 800068a:	4b1b      	ldr	r3, [pc, #108]	; (80006f8 <rwFlash+0x218>)
 800068c:	2201      	movs	r2, #1
 800068e:	701a      	strb	r2, [r3, #0]
			while(flash_ok != HAL_OK){
 8000690:	e00e      	b.n	80006b0 <rwFlash+0x1d0>
				flash_ok = HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, pageAdr + 36, DY2.u); // Write DY2
 8000692:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000694:	f103 0124 	add.w	r1, r3, #36	; 0x24
 8000698:	4b16      	ldr	r3, [pc, #88]	; (80006f4 <rwFlash+0x214>)
 800069a:	681b      	ldr	r3, [r3, #0]
 800069c:	461a      	mov	r2, r3
 800069e:	f04f 0300 	mov.w	r3, #0
 80006a2:	2002      	movs	r0, #2
 80006a4:	f001 f9e0 	bl	8001a68 <HAL_FLASH_Program>
 80006a8:	4603      	mov	r3, r0
 80006aa:	461a      	mov	r2, r3
 80006ac:	4b12      	ldr	r3, [pc, #72]	; (80006f8 <rwFlash+0x218>)
 80006ae:	701a      	strb	r2, [r3, #0]
			while(flash_ok != HAL_OK){
 80006b0:	4b11      	ldr	r3, [pc, #68]	; (80006f8 <rwFlash+0x218>)
 80006b2:	781b      	ldrb	r3, [r3, #0]
 80006b4:	2b00      	cmp	r3, #0
 80006b6:	d1ec      	bne.n	8000692 <rwFlash+0x1b2>
			}
		}
		// Lock flash
		flash_ok = HAL_ERROR;
 80006b8:	4b0f      	ldr	r3, [pc, #60]	; (80006f8 <rwFlash+0x218>)
 80006ba:	2201      	movs	r2, #1
 80006bc:	701a      	strb	r2, [r3, #0]
		while(flash_ok != HAL_OK){
 80006be:	e005      	b.n	80006cc <rwFlash+0x1ec>
			flash_ok = HAL_FLASH_Lock();
 80006c0:	f001 fa68 	bl	8001b94 <HAL_FLASH_Lock>
 80006c4:	4603      	mov	r3, r0
 80006c6:	461a      	mov	r2, r3
 80006c8:	4b0b      	ldr	r3, [pc, #44]	; (80006f8 <rwFlash+0x218>)
 80006ca:	701a      	strb	r2, [r3, #0]
		while(flash_ok != HAL_OK){
 80006cc:	4b0a      	ldr	r3, [pc, #40]	; (80006f8 <rwFlash+0x218>)
 80006ce:	781b      	ldrb	r3, [r3, #0]
 80006d0:	2b00      	cmp	r3, #0
 80006d2:	d1f5      	bne.n	80006c0 <rwFlash+0x1e0>
	if ((magicKey != 0x12349876) || (rwFlag == 1)) { // rwFlag == 1 for wrtite data to flash
 80006d4:	e07c      	b.n	80007d0 <rwFlash+0x2f0>
 80006d6:	bf00      	nop
 80006d8:	0800fc00 	.word	0x0800fc00
 80006dc:	12349876 	.word	0x12349876
 80006e0:	200001ae 	.word	0x200001ae
 80006e4:	20000174 	.word	0x20000174
 80006e8:	20000168 	.word	0x20000168
 80006ec:	200001a4 	.word	0x200001a4
 80006f0:	20000170 	.word	0x20000170
 80006f4:	20000178 	.word	0x20000178
 80006f8:	200004d4 	.word	0x200004d4
		}
	} else {
		/* Задержки измерения в каналах */
		C_13 = *(__IO uint16_t*) (pageAdr + 16);
 80006fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80006fe:	3310      	adds	r3, #16
 8000700:	881b      	ldrh	r3, [r3, #0]
 8000702:	b29a      	uxth	r2, r3
 8000704:	4b35      	ldr	r3, [pc, #212]	; (80007dc <rwFlash+0x2fc>)
 8000706:	801a      	strh	r2, [r3, #0]
		C_24 = *(__IO uint16_t*) (pageAdr + 18);
 8000708:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800070a:	3312      	adds	r3, #18
 800070c:	881b      	ldrh	r3, [r3, #0]
 800070e:	b29a      	uxth	r2, r3
 8000710:	4b33      	ldr	r3, [pc, #204]	; (80007e0 <rwFlash+0x300>)
 8000712:	801a      	strh	r2, [r3, #0]
		//C_14 = *(__IO uint16_t*) (pageAdr + 20);
		//C_23 = *(__IO uint16_t*) (pageAdr + 22);
		memset(SndBuffer, 0, sizeof(SndBuffer));
 8000714:	22c8      	movs	r2, #200	; 0xc8
 8000716:	2100      	movs	r1, #0
 8000718:	4832      	ldr	r0, [pc, #200]	; (80007e4 <rwFlash+0x304>)
 800071a:	f004 f9c9 	bl	8004ab0 <memset>
		sprintf(SndBuffer, "C_13: %5d, C_24: %5d\r\n", C_13, C_24);
 800071e:	4b2f      	ldr	r3, [pc, #188]	; (80007dc <rwFlash+0x2fc>)
 8000720:	881b      	ldrh	r3, [r3, #0]
 8000722:	461a      	mov	r2, r3
 8000724:	4b2e      	ldr	r3, [pc, #184]	; (80007e0 <rwFlash+0x300>)
 8000726:	881b      	ldrh	r3, [r3, #0]
 8000728:	492f      	ldr	r1, [pc, #188]	; (80007e8 <rwFlash+0x308>)
 800072a:	482e      	ldr	r0, [pc, #184]	; (80007e4 <rwFlash+0x304>)
 800072c:	f004 f9c8 	bl	8004ac0 <siprintf>
		HAL_UART_Transmit(&huart1, (uint8_t *) SndBuffer, sizeof(SndBuffer), 1000);
 8000730:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000734:	22c8      	movs	r2, #200	; 0xc8
 8000736:	492b      	ldr	r1, [pc, #172]	; (80007e4 <rwFlash+0x304>)
 8000738:	482c      	ldr	r0, [pc, #176]	; (80007ec <rwFlash+0x30c>)
 800073a:	f004 f825 	bl	8004788 <HAL_UART_Transmit>

		/* Поправочные коэффициенты */
		DX1.u = *(__IO uint32_t*) (pageAdr + 24);
 800073e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000740:	3318      	adds	r3, #24
 8000742:	681b      	ldr	r3, [r3, #0]
 8000744:	4a2a      	ldr	r2, [pc, #168]	; (80007f0 <rwFlash+0x310>)
 8000746:	6013      	str	r3, [r2, #0]
		DX2.u = *(__IO uint32_t*) (pageAdr + 28);
 8000748:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800074a:	331c      	adds	r3, #28
 800074c:	681b      	ldr	r3, [r3, #0]
 800074e:	4a29      	ldr	r2, [pc, #164]	; (80007f4 <rwFlash+0x314>)
 8000750:	6013      	str	r3, [r2, #0]
		DY1.u = *(__IO uint32_t*) (pageAdr + 32);
 8000752:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000754:	3320      	adds	r3, #32
 8000756:	681b      	ldr	r3, [r3, #0]
 8000758:	4a27      	ldr	r2, [pc, #156]	; (80007f8 <rwFlash+0x318>)
 800075a:	6013      	str	r3, [r2, #0]
		DY2.u = *(__IO uint32_t*) (pageAdr + 36);
 800075c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800075e:	3324      	adds	r3, #36	; 0x24
 8000760:	681b      	ldr	r3, [r3, #0]
 8000762:	4a26      	ldr	r2, [pc, #152]	; (80007fc <rwFlash+0x31c>)
 8000764:	6013      	str	r3, [r2, #0]
		memset(SndBuffer, 0, sizeof(SndBuffer));
 8000766:	22c8      	movs	r2, #200	; 0xc8
 8000768:	2100      	movs	r1, #0
 800076a:	481e      	ldr	r0, [pc, #120]	; (80007e4 <rwFlash+0x304>)
 800076c:	f004 f9a0 	bl	8004ab0 <memset>
		sprintf(SndBuffer, "DX1: %7.6f, DX2: %7.6f, DY1: %7.6f, DY2: %7.6f\r\n", DX1.f, DX2.f, DY1.f, DY2.f);
 8000770:	4b1f      	ldr	r3, [pc, #124]	; (80007f0 <rwFlash+0x310>)
 8000772:	681b      	ldr	r3, [r3, #0]
 8000774:	4618      	mov	r0, r3
 8000776:	f7ff fe4d 	bl	8000414 <__aeabi_f2d>
 800077a:	4682      	mov	sl, r0
 800077c:	468b      	mov	fp, r1
 800077e:	4b1d      	ldr	r3, [pc, #116]	; (80007f4 <rwFlash+0x314>)
 8000780:	681b      	ldr	r3, [r3, #0]
 8000782:	4618      	mov	r0, r3
 8000784:	f7ff fe46 	bl	8000414 <__aeabi_f2d>
 8000788:	4604      	mov	r4, r0
 800078a:	460d      	mov	r5, r1
 800078c:	4b1a      	ldr	r3, [pc, #104]	; (80007f8 <rwFlash+0x318>)
 800078e:	681b      	ldr	r3, [r3, #0]
 8000790:	4618      	mov	r0, r3
 8000792:	f7ff fe3f 	bl	8000414 <__aeabi_f2d>
 8000796:	4680      	mov	r8, r0
 8000798:	4689      	mov	r9, r1
 800079a:	4b18      	ldr	r3, [pc, #96]	; (80007fc <rwFlash+0x31c>)
 800079c:	681b      	ldr	r3, [r3, #0]
 800079e:	4618      	mov	r0, r3
 80007a0:	f7ff fe38 	bl	8000414 <__aeabi_f2d>
 80007a4:	4602      	mov	r2, r0
 80007a6:	460b      	mov	r3, r1
 80007a8:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80007ac:	e9cd 8902 	strd	r8, r9, [sp, #8]
 80007b0:	e9cd 4500 	strd	r4, r5, [sp]
 80007b4:	4652      	mov	r2, sl
 80007b6:	465b      	mov	r3, fp
 80007b8:	4911      	ldr	r1, [pc, #68]	; (8000800 <rwFlash+0x320>)
 80007ba:	480a      	ldr	r0, [pc, #40]	; (80007e4 <rwFlash+0x304>)
 80007bc:	f004 f980 	bl	8004ac0 <siprintf>
		HAL_UART_Transmit(&huart1, (uint8_t *) SndBuffer, sizeof(SndBuffer), 1000);
 80007c0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80007c4:	22c8      	movs	r2, #200	; 0xc8
 80007c6:	4907      	ldr	r1, [pc, #28]	; (80007e4 <rwFlash+0x304>)
 80007c8:	4808      	ldr	r0, [pc, #32]	; (80007ec <rwFlash+0x30c>)
 80007ca:	f003 ffdd 	bl	8004788 <HAL_UART_Transmit>
	}
}
 80007ce:	bf00      	nop
 80007d0:	bf00      	nop
 80007d2:	3730      	adds	r7, #48	; 0x30
 80007d4:	46bd      	mov	sp, r7
 80007d6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80007da:	bf00      	nop
 80007dc:	200001ae 	.word	0x200001ae
 80007e0:	20000174 	.word	0x20000174
 80007e4:	20000090 	.word	0x20000090
 80007e8:	0800534c 	.word	0x0800534c
 80007ec:	200003f8 	.word	0x200003f8
 80007f0:	20000168 	.word	0x20000168
 80007f4:	200001a4 	.word	0x200001a4
 80007f8:	20000170 	.word	0x20000170
 80007fc:	20000178 	.word	0x20000178
 8000800:	08005364 	.word	0x08005364

08000804 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000804:	b580      	push	{r7, lr}
 8000806:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000808:	f000 ffbe 	bl	8001788 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800080c:	f000 f8b0 	bl	8000970 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000810:	f000 fbb6 	bl	8000f80 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8000814:	f000 fb8a 	bl	8000f2c <MX_USART1_UART_Init>
  MX_TIM1_Init();
 8000818:	f000 f950 	bl	8000abc <MX_TIM1_Init>
  MX_TIM4_Init();
 800081c:	f000 fb38 	bl	8000e90 <MX_TIM4_Init>
  MX_TIM3_Init();
 8000820:	f000 fac8 	bl	8000db4 <MX_TIM3_Init>
  MX_TIM2_Init();
 8000824:	f000 fa30 	bl	8000c88 <MX_TIM2_Init>
  MX_I2C1_Init();
 8000828:	f000 f8e4 	bl	80009f4 <MX_I2C1_Init>
  MX_SPI2_Init();
 800082c:	f000 f910 	bl	8000a50 <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 8000830:	2201      	movs	r2, #1
 8000832:	2180      	movs	r1, #128	; 0x80
 8000834:	483d      	ldr	r0, [pc, #244]	; (800092c <main+0x128>)
 8000836:	f001 fc9b 	bl	8002170 <HAL_GPIO_WritePin>
  HAL_UART_Transmit(&huart1, (uint8_t *) INIT_START_TEXT, sizeof(INIT_START_TEXT), HAL_MAX_DELAY);
 800083a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800083e:	2212      	movs	r2, #18
 8000840:	493b      	ldr	r1, [pc, #236]	; (8000930 <main+0x12c>)
 8000842:	483c      	ldr	r0, [pc, #240]	; (8000934 <main+0x130>)
 8000844:	f003 ffa0 	bl	8004788 <HAL_UART_Transmit>
  HAL_GPIO_WritePin(nRst_GPIO_Port, nRst_Pin, GPIO_PIN_SET);
  HAL_GPIO_WritePin(SCSN_GPIO_Port, SCSN_Pin, GPIO_PIN_SET);
  HAL_Delay(2000);
  init_w5500();
#else
  HAL_GPIO_WritePin(nRst_GPIO_Port, nRst_Pin, GPIO_PIN_RESET);	// Reset W5500
 8000848:	2200      	movs	r2, #0
 800084a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800084e:	4837      	ldr	r0, [pc, #220]	; (800092c <main+0x128>)
 8000850:	f001 fc8e 	bl	8002170 <HAL_GPIO_WritePin>
#endif
  rwFlash(0);		// Чтение параметров калибровки из Flash.
 8000854:	2000      	movs	r0, #0
 8000856:	f7ff fe43 	bl	80004e0 <rwFlash>

  /* Таймер задержки запуска измерения */
  C_13 = CALIBRATE_START;
 800085a:	4b37      	ldr	r3, [pc, #220]	; (8000938 <main+0x134>)
 800085c:	f649 4240 	movw	r2, #40000	; 0x9c40
 8000860:	801a      	strh	r2, [r3, #0]
  TIM3->ARR = C_13; 		// Коррекция для таймера запуска измерения Z13
 8000862:	4b35      	ldr	r3, [pc, #212]	; (8000938 <main+0x134>)
 8000864:	881a      	ldrh	r2, [r3, #0]
 8000866:	4b35      	ldr	r3, [pc, #212]	; (800093c <main+0x138>)
 8000868:	62da      	str	r2, [r3, #44]	; 0x2c

  //HAL_GPIO_WritePin(Z34_GPIO_Port, Z34_Pin, GPIO_PIN_SET);    // Выключение компаратора 34
  //HAL_GPIO_WritePin(Z12_GPIO_Port, Z12_Pin, GPIO_PIN_RESET);  // Включение компаратора 12

  HAL_UART_Transmit(&huart1, (uint8_t *) INIT_FINISH_TEXT, sizeof(INIT_FINISH_TEXT), HAL_MAX_DELAY);
 800086a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800086e:	2213      	movs	r2, #19
 8000870:	4933      	ldr	r1, [pc, #204]	; (8000940 <main+0x13c>)
 8000872:	4830      	ldr	r0, [pc, #192]	; (8000934 <main+0x130>)
 8000874:	f003 ff88 	bl	8004788 <HAL_UART_Transmit>
  //HAL_TIM_OC_Start(&htim1, TIM_CHANNEL_3);


  HAL_TIM_Base_Start_IT(&htim3);
 8000878:	4832      	ldr	r0, [pc, #200]	; (8000944 <main+0x140>)
 800087a:	f002 fac5 	bl	8002e08 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim4);
 800087e:	4832      	ldr	r0, [pc, #200]	; (8000948 <main+0x144>)
 8000880:	f002 fac2 	bl	8002e08 <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  errMax = 0;
 8000884:	4b31      	ldr	r3, [pc, #196]	; (800094c <main+0x148>)
 8000886:	2200      	movs	r2, #0
 8000888:	601a      	str	r2, [r3, #0]
  errMin = 65565;
 800088a:	4b31      	ldr	r3, [pc, #196]	; (8000950 <main+0x14c>)
 800088c:	4a31      	ldr	r2, [pc, #196]	; (8000954 <main+0x150>)
 800088e:	601a      	str	r2, [r3, #0]
  while (1)
  {
	  if (readyFlag) {
 8000890:	4b31      	ldr	r3, [pc, #196]	; (8000958 <main+0x154>)
 8000892:	781b      	ldrb	r3, [r3, #0]
 8000894:	2b00      	cmp	r3, #0
 8000896:	d0fb      	beq.n	8000890 <main+0x8c>
		  if (errCnt++ > 100) {
 8000898:	4b30      	ldr	r3, [pc, #192]	; (800095c <main+0x158>)
 800089a:	681b      	ldr	r3, [r3, #0]
 800089c:	1c5a      	adds	r2, r3, #1
 800089e:	492f      	ldr	r1, [pc, #188]	; (800095c <main+0x158>)
 80008a0:	600a      	str	r2, [r1, #0]
 80008a2:	2b64      	cmp	r3, #100	; 0x64
 80008a4:	d910      	bls.n	80008c8 <main+0xc4>
		    errCnt = 0;
 80008a6:	4b2d      	ldr	r3, [pc, #180]	; (800095c <main+0x158>)
 80008a8:	2200      	movs	r2, #0
 80008aa:	601a      	str	r2, [r3, #0]
		    err = errMax - errMin;
 80008ac:	4b27      	ldr	r3, [pc, #156]	; (800094c <main+0x148>)
 80008ae:	681a      	ldr	r2, [r3, #0]
 80008b0:	4b27      	ldr	r3, [pc, #156]	; (8000950 <main+0x14c>)
 80008b2:	681b      	ldr	r3, [r3, #0]
 80008b4:	1ad3      	subs	r3, r2, r3
 80008b6:	4a2a      	ldr	r2, [pc, #168]	; (8000960 <main+0x15c>)
 80008b8:	6013      	str	r3, [r2, #0]
		    errMax = 0;
 80008ba:	4b24      	ldr	r3, [pc, #144]	; (800094c <main+0x148>)
 80008bc:	2200      	movs	r2, #0
 80008be:	601a      	str	r2, [r3, #0]
		    errMin = 65565;
 80008c0:	4b23      	ldr	r3, [pc, #140]	; (8000950 <main+0x14c>)
 80008c2:	4a24      	ldr	r2, [pc, #144]	; (8000954 <main+0x150>)
 80008c4:	601a      	str	r2, [r3, #0]
 80008c6:	e017      	b.n	80008f8 <main+0xf4>
		  }
		  else {
			  if (errMax < resulMeass) {
 80008c8:	4b26      	ldr	r3, [pc, #152]	; (8000964 <main+0x160>)
 80008ca:	881b      	ldrh	r3, [r3, #0]
 80008cc:	461a      	mov	r2, r3
 80008ce:	4b1f      	ldr	r3, [pc, #124]	; (800094c <main+0x148>)
 80008d0:	681b      	ldr	r3, [r3, #0]
 80008d2:	429a      	cmp	r2, r3
 80008d4:	d904      	bls.n	80008e0 <main+0xdc>
				  errMax = resulMeass;
 80008d6:	4b23      	ldr	r3, [pc, #140]	; (8000964 <main+0x160>)
 80008d8:	881b      	ldrh	r3, [r3, #0]
 80008da:	461a      	mov	r2, r3
 80008dc:	4b1b      	ldr	r3, [pc, #108]	; (800094c <main+0x148>)
 80008de:	601a      	str	r2, [r3, #0]
			  }
			  if (errMin > resulMeass) {
 80008e0:	4b20      	ldr	r3, [pc, #128]	; (8000964 <main+0x160>)
 80008e2:	881b      	ldrh	r3, [r3, #0]
 80008e4:	461a      	mov	r2, r3
 80008e6:	4b1a      	ldr	r3, [pc, #104]	; (8000950 <main+0x14c>)
 80008e8:	681b      	ldr	r3, [r3, #0]
 80008ea:	429a      	cmp	r2, r3
 80008ec:	d204      	bcs.n	80008f8 <main+0xf4>
				  errMin = resulMeass;
 80008ee:	4b1d      	ldr	r3, [pc, #116]	; (8000964 <main+0x160>)
 80008f0:	881b      	ldrh	r3, [r3, #0]
 80008f2:	461a      	mov	r2, r3
 80008f4:	4b16      	ldr	r3, [pc, #88]	; (8000950 <main+0x14c>)
 80008f6:	601a      	str	r2, [r3, #0]
			  }
		  }
		  readyFlag = FALSE;
 80008f8:	4b17      	ldr	r3, [pc, #92]	; (8000958 <main+0x154>)
 80008fa:	2200      	movs	r2, #0
 80008fc:	701a      	strb	r2, [r3, #0]
		  memset(SndBuffer, 0, sizeof(SndBuffer));
 80008fe:	22c8      	movs	r2, #200	; 0xc8
 8000900:	2100      	movs	r1, #0
 8000902:	4819      	ldr	r0, [pc, #100]	; (8000968 <main+0x164>)
 8000904:	f004 f8d4 	bl	8004ab0 <memset>
		  sprintf(SndBuffer, "Cap:%lu, Err:%lu   \r", (uint32_t) resulMeass, err);
 8000908:	4b16      	ldr	r3, [pc, #88]	; (8000964 <main+0x160>)
 800090a:	881b      	ldrh	r3, [r3, #0]
 800090c:	461a      	mov	r2, r3
 800090e:	4b14      	ldr	r3, [pc, #80]	; (8000960 <main+0x15c>)
 8000910:	681b      	ldr	r3, [r3, #0]
 8000912:	4916      	ldr	r1, [pc, #88]	; (800096c <main+0x168>)
 8000914:	4814      	ldr	r0, [pc, #80]	; (8000968 <main+0x164>)
 8000916:	f004 f8d3 	bl	8004ac0 <siprintf>
		  HAL_UART_Transmit(&huart1, (uint8_t *) SndBuffer, sizeof(SndBuffer), 1000);
 800091a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800091e:	22c8      	movs	r2, #200	; 0xc8
 8000920:	4911      	ldr	r1, [pc, #68]	; (8000968 <main+0x164>)
 8000922:	4804      	ldr	r0, [pc, #16]	; (8000934 <main+0x130>)
 8000924:	f003 ff30 	bl	8004788 <HAL_UART_Transmit>
	  if (readyFlag) {
 8000928:	e7b2      	b.n	8000890 <main+0x8c>
 800092a:	bf00      	nop
 800092c:	40010800 	.word	0x40010800
 8000930:	08005398 	.word	0x08005398
 8000934:	200003f8 	.word	0x200003f8
 8000938:	200001ae 	.word	0x200001ae
 800093c:	40000400 	.word	0x40000400
 8000940:	080053ac 	.word	0x080053ac
 8000944:	200003b0 	.word	0x200003b0
 8000948:	2000030c 	.word	0x2000030c
 800094c:	200003a8 	.word	0x200003a8
 8000950:	200003ac 	.word	0x200003ac
 8000954:	0001001d 	.word	0x0001001d
 8000958:	2000016c 	.word	0x2000016c
 800095c:	200004d0 	.word	0x200004d0
 8000960:	2000043c 	.word	0x2000043c
 8000964:	200001ac 	.word	0x200001ac
 8000968:	20000090 	.word	0x20000090
 800096c:	080053c0 	.word	0x080053c0

08000970 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000970:	b580      	push	{r7, lr}
 8000972:	b090      	sub	sp, #64	; 0x40
 8000974:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000976:	f107 0318 	add.w	r3, r7, #24
 800097a:	2228      	movs	r2, #40	; 0x28
 800097c:	2100      	movs	r1, #0
 800097e:	4618      	mov	r0, r3
 8000980:	f004 f896 	bl	8004ab0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000984:	1d3b      	adds	r3, r7, #4
 8000986:	2200      	movs	r2, #0
 8000988:	601a      	str	r2, [r3, #0]
 800098a:	605a      	str	r2, [r3, #4]
 800098c:	609a      	str	r2, [r3, #8]
 800098e:	60da      	str	r2, [r3, #12]
 8000990:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000992:	2302      	movs	r3, #2
 8000994:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000996:	2301      	movs	r3, #1
 8000998:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800099a:	2310      	movs	r3, #16
 800099c:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800099e:	2302      	movs	r3, #2
 80009a0:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 80009a2:	2300      	movs	r3, #0
 80009a4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 80009a6:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 80009aa:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009ac:	f107 0318 	add.w	r3, r7, #24
 80009b0:	4618      	mov	r0, r3
 80009b2:	f001 fd39 	bl	8002428 <HAL_RCC_OscConfig>
 80009b6:	4603      	mov	r3, r0
 80009b8:	2b00      	cmp	r3, #0
 80009ba:	d001      	beq.n	80009c0 <SystemClock_Config+0x50>
  {
    Error_Handler();
 80009bc:	f000 fbca 	bl	8001154 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80009c0:	230f      	movs	r3, #15
 80009c2:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80009c4:	2302      	movs	r3, #2
 80009c6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80009c8:	2300      	movs	r3, #0
 80009ca:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80009cc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80009d0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80009d2:	2300      	movs	r3, #0
 80009d4:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80009d6:	1d3b      	adds	r3, r7, #4
 80009d8:	2102      	movs	r1, #2
 80009da:	4618      	mov	r0, r3
 80009dc:	f001 ffa4 	bl	8002928 <HAL_RCC_ClockConfig>
 80009e0:	4603      	mov	r3, r0
 80009e2:	2b00      	cmp	r3, #0
 80009e4:	d001      	beq.n	80009ea <SystemClock_Config+0x7a>
  {
    Error_Handler();
 80009e6:	f000 fbb5 	bl	8001154 <Error_Handler>
  }
}
 80009ea:	bf00      	nop
 80009ec:	3740      	adds	r7, #64	; 0x40
 80009ee:	46bd      	mov	sp, r7
 80009f0:	bd80      	pop	{r7, pc}
	...

080009f4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80009f4:	b580      	push	{r7, lr}
 80009f6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80009f8:	4b12      	ldr	r3, [pc, #72]	; (8000a44 <MX_I2C1_Init+0x50>)
 80009fa:	4a13      	ldr	r2, [pc, #76]	; (8000a48 <MX_I2C1_Init+0x54>)
 80009fc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80009fe:	4b11      	ldr	r3, [pc, #68]	; (8000a44 <MX_I2C1_Init+0x50>)
 8000a00:	4a12      	ldr	r2, [pc, #72]	; (8000a4c <MX_I2C1_Init+0x58>)
 8000a02:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000a04:	4b0f      	ldr	r3, [pc, #60]	; (8000a44 <MX_I2C1_Init+0x50>)
 8000a06:	2200      	movs	r2, #0
 8000a08:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000a0a:	4b0e      	ldr	r3, [pc, #56]	; (8000a44 <MX_I2C1_Init+0x50>)
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000a10:	4b0c      	ldr	r3, [pc, #48]	; (8000a44 <MX_I2C1_Init+0x50>)
 8000a12:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000a16:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000a18:	4b0a      	ldr	r3, [pc, #40]	; (8000a44 <MX_I2C1_Init+0x50>)
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000a1e:	4b09      	ldr	r3, [pc, #36]	; (8000a44 <MX_I2C1_Init+0x50>)
 8000a20:	2200      	movs	r2, #0
 8000a22:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000a24:	4b07      	ldr	r3, [pc, #28]	; (8000a44 <MX_I2C1_Init+0x50>)
 8000a26:	2200      	movs	r2, #0
 8000a28:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000a2a:	4b06      	ldr	r3, [pc, #24]	; (8000a44 <MX_I2C1_Init+0x50>)
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000a30:	4804      	ldr	r0, [pc, #16]	; (8000a44 <MX_I2C1_Init+0x50>)
 8000a32:	f001 fbb5 	bl	80021a0 <HAL_I2C_Init>
 8000a36:	4603      	mov	r3, r0
 8000a38:	2b00      	cmp	r3, #0
 8000a3a:	d001      	beq.n	8000a40 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000a3c:	f000 fb8a 	bl	8001154 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000a40:	bf00      	nop
 8000a42:	bd80      	pop	{r7, pc}
 8000a44:	20000354 	.word	0x20000354
 8000a48:	40005400 	.word	0x40005400
 8000a4c:	000186a0 	.word	0x000186a0

08000a50 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000a50:	b580      	push	{r7, lr}
 8000a52:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000a54:	4b17      	ldr	r3, [pc, #92]	; (8000ab4 <MX_SPI2_Init+0x64>)
 8000a56:	4a18      	ldr	r2, [pc, #96]	; (8000ab8 <MX_SPI2_Init+0x68>)
 8000a58:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000a5a:	4b16      	ldr	r3, [pc, #88]	; (8000ab4 <MX_SPI2_Init+0x64>)
 8000a5c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000a60:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000a62:	4b14      	ldr	r3, [pc, #80]	; (8000ab4 <MX_SPI2_Init+0x64>)
 8000a64:	2200      	movs	r2, #0
 8000a66:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000a68:	4b12      	ldr	r3, [pc, #72]	; (8000ab4 <MX_SPI2_Init+0x64>)
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000a6e:	4b11      	ldr	r3, [pc, #68]	; (8000ab4 <MX_SPI2_Init+0x64>)
 8000a70:	2200      	movs	r2, #0
 8000a72:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000a74:	4b0f      	ldr	r3, [pc, #60]	; (8000ab4 <MX_SPI2_Init+0x64>)
 8000a76:	2200      	movs	r2, #0
 8000a78:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000a7a:	4b0e      	ldr	r3, [pc, #56]	; (8000ab4 <MX_SPI2_Init+0x64>)
 8000a7c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000a80:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000a82:	4b0c      	ldr	r3, [pc, #48]	; (8000ab4 <MX_SPI2_Init+0x64>)
 8000a84:	2200      	movs	r2, #0
 8000a86:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000a88:	4b0a      	ldr	r3, [pc, #40]	; (8000ab4 <MX_SPI2_Init+0x64>)
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000a8e:	4b09      	ldr	r3, [pc, #36]	; (8000ab4 <MX_SPI2_Init+0x64>)
 8000a90:	2200      	movs	r2, #0
 8000a92:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000a94:	4b07      	ldr	r3, [pc, #28]	; (8000ab4 <MX_SPI2_Init+0x64>)
 8000a96:	2200      	movs	r2, #0
 8000a98:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8000a9a:	4b06      	ldr	r3, [pc, #24]	; (8000ab4 <MX_SPI2_Init+0x64>)
 8000a9c:	220a      	movs	r2, #10
 8000a9e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000aa0:	4804      	ldr	r0, [pc, #16]	; (8000ab4 <MX_SPI2_Init+0x64>)
 8000aa2:	f002 f8dd 	bl	8002c60 <HAL_SPI_Init>
 8000aa6:	4603      	mov	r3, r0
 8000aa8:	2b00      	cmp	r3, #0
 8000aaa:	d001      	beq.n	8000ab0 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8000aac:	f000 fb52 	bl	8001154 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000ab0:	bf00      	nop
 8000ab2:	bd80      	pop	{r7, pc}
 8000ab4:	200002b4 	.word	0x200002b4
 8000ab8:	40003800 	.word	0x40003800

08000abc <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000abc:	b580      	push	{r7, lr}
 8000abe:	b096      	sub	sp, #88	; 0x58
 8000ac0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000ac2:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	601a      	str	r2, [r3, #0]
 8000aca:	605a      	str	r2, [r3, #4]
 8000acc:	609a      	str	r2, [r3, #8]
 8000ace:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ad0:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	601a      	str	r2, [r3, #0]
 8000ad8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000ada:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ade:	2200      	movs	r2, #0
 8000ae0:	601a      	str	r2, [r3, #0]
 8000ae2:	605a      	str	r2, [r3, #4]
 8000ae4:	609a      	str	r2, [r3, #8]
 8000ae6:	60da      	str	r2, [r3, #12]
 8000ae8:	611a      	str	r2, [r3, #16]
 8000aea:	615a      	str	r2, [r3, #20]
 8000aec:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000aee:	1d3b      	adds	r3, r7, #4
 8000af0:	2220      	movs	r2, #32
 8000af2:	2100      	movs	r1, #0
 8000af4:	4618      	mov	r0, r3
 8000af6:	f003 ffdb 	bl	8004ab0 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000afa:	4b61      	ldr	r3, [pc, #388]	; (8000c80 <MX_TIM1_Init+0x1c4>)
 8000afc:	4a61      	ldr	r2, [pc, #388]	; (8000c84 <MX_TIM1_Init+0x1c8>)
 8000afe:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000b00:	4b5f      	ldr	r3, [pc, #380]	; (8000c80 <MX_TIM1_Init+0x1c4>)
 8000b02:	2200      	movs	r2, #0
 8000b04:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b06:	4b5e      	ldr	r3, [pc, #376]	; (8000c80 <MX_TIM1_Init+0x1c4>)
 8000b08:	2200      	movs	r2, #0
 8000b0a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 799;
 8000b0c:	4b5c      	ldr	r3, [pc, #368]	; (8000c80 <MX_TIM1_Init+0x1c4>)
 8000b0e:	f240 321f 	movw	r2, #799	; 0x31f
 8000b12:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b14:	4b5a      	ldr	r3, [pc, #360]	; (8000c80 <MX_TIM1_Init+0x1c4>)
 8000b16:	2200      	movs	r2, #0
 8000b18:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 91;
 8000b1a:	4b59      	ldr	r3, [pc, #356]	; (8000c80 <MX_TIM1_Init+0x1c4>)
 8000b1c:	225b      	movs	r2, #91	; 0x5b
 8000b1e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000b20:	4b57      	ldr	r3, [pc, #348]	; (8000c80 <MX_TIM1_Init+0x1c4>)
 8000b22:	2280      	movs	r2, #128	; 0x80
 8000b24:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000b26:	4856      	ldr	r0, [pc, #344]	; (8000c80 <MX_TIM1_Init+0x1c4>)
 8000b28:	f002 f91e 	bl	8002d68 <HAL_TIM_Base_Init>
 8000b2c:	4603      	mov	r3, r0
 8000b2e:	2b00      	cmp	r3, #0
 8000b30:	d001      	beq.n	8000b36 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8000b32:	f000 fb0f 	bl	8001154 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000b36:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b3a:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000b3c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000b40:	4619      	mov	r1, r3
 8000b42:	484f      	ldr	r0, [pc, #316]	; (8000c80 <MX_TIM1_Init+0x1c4>)
 8000b44:	f002 ff64 	bl	8003a10 <HAL_TIM_ConfigClockSource>
 8000b48:	4603      	mov	r3, r0
 8000b4a:	2b00      	cmp	r3, #0
 8000b4c:	d001      	beq.n	8000b52 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8000b4e:	f000 fb01 	bl	8001154 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim1) != HAL_OK)
 8000b52:	484b      	ldr	r0, [pc, #300]	; (8000c80 <MX_TIM1_Init+0x1c4>)
 8000b54:	f002 f9aa 	bl	8002eac <HAL_TIM_OC_Init>
 8000b58:	4603      	mov	r3, r0
 8000b5a:	2b00      	cmp	r3, #0
 8000b5c:	d001      	beq.n	8000b62 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8000b5e:	f000 faf9 	bl	8001154 <Error_Handler>
  }
  if (HAL_TIM_OnePulse_Init(&htim1, TIM_OPMODE_SINGLE) != HAL_OK)
 8000b62:	2108      	movs	r1, #8
 8000b64:	4846      	ldr	r0, [pc, #280]	; (8000c80 <MX_TIM1_Init+0x1c4>)
 8000b66:	f002 fd05 	bl	8003574 <HAL_TIM_OnePulse_Init>
 8000b6a:	4603      	mov	r3, r0
 8000b6c:	2b00      	cmp	r3, #0
 8000b6e:	d001      	beq.n	8000b74 <MX_TIM1_Init+0xb8>
  {
    Error_Handler();
 8000b70:	f000 faf0 	bl	8001154 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC1;
 8000b74:	2330      	movs	r3, #48	; 0x30
 8000b76:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b78:	2300      	movs	r3, #0
 8000b7a:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000b7c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000b80:	4619      	mov	r1, r3
 8000b82:	483f      	ldr	r0, [pc, #252]	; (8000c80 <MX_TIM1_Init+0x1c4>)
 8000b84:	f003 fcf2 	bl	800456c <HAL_TIMEx_MasterConfigSynchronization>
 8000b88:	4603      	mov	r3, r0
 8000b8a:	2b00      	cmp	r3, #0
 8000b8c:	d001      	beq.n	8000b92 <MX_TIM1_Init+0xd6>
  {
    Error_Handler();
 8000b8e:	f000 fae1 	bl	8001154 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TOGGLE;
 8000b92:	2330      	movs	r3, #48	; 0x30
 8000b94:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8000b96:	2300      	movs	r3, #0
 8000b98:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000b9a:	2300      	movs	r3, #0
 8000b9c:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000b9e:	2300      	movs	r3, #0
 8000ba0:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000ba2:	2300      	movs	r3, #0
 8000ba4:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000ba6:	2300      	movs	r3, #0
 8000ba8:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000baa:	2300      	movs	r3, #0
 8000bac:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000bae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	4619      	mov	r1, r3
 8000bb6:	4832      	ldr	r0, [pc, #200]	; (8000c80 <MX_TIM1_Init+0x1c4>)
 8000bb8:	f002 fe3e 	bl	8003838 <HAL_TIM_OC_ConfigChannel>
 8000bbc:	4603      	mov	r3, r0
 8000bbe:	2b00      	cmp	r3, #0
 8000bc0:	d001      	beq.n	8000bc6 <MX_TIM1_Init+0x10a>
  {
    Error_Handler();
 8000bc2:	f000 fac7 	bl	8001154 <Error_Handler>
  }
  __HAL_TIM_ENABLE_OCxPRELOAD(&htim1, TIM_CHANNEL_1);
 8000bc6:	4b2e      	ldr	r3, [pc, #184]	; (8000c80 <MX_TIM1_Init+0x1c4>)
 8000bc8:	681b      	ldr	r3, [r3, #0]
 8000bca:	699a      	ldr	r2, [r3, #24]
 8000bcc:	4b2c      	ldr	r3, [pc, #176]	; (8000c80 <MX_TIM1_Init+0x1c4>)
 8000bce:	681b      	ldr	r3, [r3, #0]
 8000bd0:	f042 0208 	orr.w	r2, r2, #8
 8000bd4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000bd6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bda:	2204      	movs	r2, #4
 8000bdc:	4619      	mov	r1, r3
 8000bde:	4828      	ldr	r0, [pc, #160]	; (8000c80 <MX_TIM1_Init+0x1c4>)
 8000be0:	f002 fe2a 	bl	8003838 <HAL_TIM_OC_ConfigChannel>
 8000be4:	4603      	mov	r3, r0
 8000be6:	2b00      	cmp	r3, #0
 8000be8:	d001      	beq.n	8000bee <MX_TIM1_Init+0x132>
  {
    Error_Handler();
 8000bea:	f000 fab3 	bl	8001154 <Error_Handler>
  }
  __HAL_TIM_ENABLE_OCxPRELOAD(&htim1, TIM_CHANNEL_2);
 8000bee:	4b24      	ldr	r3, [pc, #144]	; (8000c80 <MX_TIM1_Init+0x1c4>)
 8000bf0:	681b      	ldr	r3, [r3, #0]
 8000bf2:	699a      	ldr	r2, [r3, #24]
 8000bf4:	4b22      	ldr	r3, [pc, #136]	; (8000c80 <MX_TIM1_Init+0x1c4>)
 8000bf6:	681b      	ldr	r3, [r3, #0]
 8000bf8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8000bfc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000bfe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c02:	2208      	movs	r2, #8
 8000c04:	4619      	mov	r1, r3
 8000c06:	481e      	ldr	r0, [pc, #120]	; (8000c80 <MX_TIM1_Init+0x1c4>)
 8000c08:	f002 fe16 	bl	8003838 <HAL_TIM_OC_ConfigChannel>
 8000c0c:	4603      	mov	r3, r0
 8000c0e:	2b00      	cmp	r3, #0
 8000c10:	d001      	beq.n	8000c16 <MX_TIM1_Init+0x15a>
  {
    Error_Handler();
 8000c12:	f000 fa9f 	bl	8001154 <Error_Handler>
  }
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000c16:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c1a:	220c      	movs	r2, #12
 8000c1c:	4619      	mov	r1, r3
 8000c1e:	4818      	ldr	r0, [pc, #96]	; (8000c80 <MX_TIM1_Init+0x1c4>)
 8000c20:	f002 fe0a 	bl	8003838 <HAL_TIM_OC_ConfigChannel>
 8000c24:	4603      	mov	r3, r0
 8000c26:	2b00      	cmp	r3, #0
 8000c28:	d001      	beq.n	8000c2e <MX_TIM1_Init+0x172>
  {
    Error_Handler();
 8000c2a:	f000 fa93 	bl	8001154 <Error_Handler>
  }
  __HAL_TIM_ENABLE_OCxPRELOAD(&htim1, TIM_CHANNEL_4);
 8000c2e:	4b14      	ldr	r3, [pc, #80]	; (8000c80 <MX_TIM1_Init+0x1c4>)
 8000c30:	681b      	ldr	r3, [r3, #0]
 8000c32:	69da      	ldr	r2, [r3, #28]
 8000c34:	4b12      	ldr	r3, [pc, #72]	; (8000c80 <MX_TIM1_Init+0x1c4>)
 8000c36:	681b      	ldr	r3, [r3, #0]
 8000c38:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8000c3c:	61da      	str	r2, [r3, #28]
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000c3e:	2300      	movs	r3, #0
 8000c40:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000c42:	2300      	movs	r3, #0
 8000c44:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000c46:	2300      	movs	r3, #0
 8000c48:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000c4e:	2300      	movs	r3, #0
 8000c50:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000c52:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000c56:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000c58:	2300      	movs	r3, #0
 8000c5a:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000c5c:	1d3b      	adds	r3, r7, #4
 8000c5e:	4619      	mov	r1, r3
 8000c60:	4807      	ldr	r0, [pc, #28]	; (8000c80 <MX_TIM1_Init+0x1c4>)
 8000c62:	f003 fce1 	bl	8004628 <HAL_TIMEx_ConfigBreakDeadTime>
 8000c66:	4603      	mov	r3, r0
 8000c68:	2b00      	cmp	r3, #0
 8000c6a:	d001      	beq.n	8000c70 <MX_TIM1_Init+0x1b4>
  {
    Error_Handler();
 8000c6c:	f000 fa72 	bl	8001154 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000c70:	4803      	ldr	r0, [pc, #12]	; (8000c80 <MX_TIM1_Init+0x1c4>)
 8000c72:	f000 fbd3 	bl	800141c <HAL_TIM_MspPostInit>

}
 8000c76:	bf00      	nop
 8000c78:	3758      	adds	r7, #88	; 0x58
 8000c7a:	46bd      	mov	sp, r7
 8000c7c:	bd80      	pop	{r7, pc}
 8000c7e:	bf00      	nop
 8000c80:	20000440 	.word	0x20000440
 8000c84:	40012c00 	.word	0x40012c00

08000c88 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	b090      	sub	sp, #64	; 0x40
 8000c8c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000c8e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000c92:	2200      	movs	r2, #0
 8000c94:	601a      	str	r2, [r3, #0]
 8000c96:	605a      	str	r2, [r3, #4]
 8000c98:	609a      	str	r2, [r3, #8]
 8000c9a:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8000c9c:	f107 031c 	add.w	r3, r7, #28
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	601a      	str	r2, [r3, #0]
 8000ca4:	605a      	str	r2, [r3, #4]
 8000ca6:	609a      	str	r2, [r3, #8]
 8000ca8:	60da      	str	r2, [r3, #12]
 8000caa:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000cac:	f107 0314 	add.w	r3, r7, #20
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	601a      	str	r2, [r3, #0]
 8000cb4:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8000cb6:	1d3b      	adds	r3, r7, #4
 8000cb8:	2200      	movs	r2, #0
 8000cba:	601a      	str	r2, [r3, #0]
 8000cbc:	605a      	str	r2, [r3, #4]
 8000cbe:	609a      	str	r2, [r3, #8]
 8000cc0:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000cc2:	4b3b      	ldr	r3, [pc, #236]	; (8000db0 <MX_TIM2_Init+0x128>)
 8000cc4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000cc8:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000cca:	4b39      	ldr	r3, [pc, #228]	; (8000db0 <MX_TIM2_Init+0x128>)
 8000ccc:	2200      	movs	r2, #0
 8000cce:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000cd0:	4b37      	ldr	r3, [pc, #220]	; (8000db0 <MX_TIM2_Init+0x128>)
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8000cd6:	4b36      	ldr	r3, [pc, #216]	; (8000db0 <MX_TIM2_Init+0x128>)
 8000cd8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000cdc:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000cde:	4b34      	ldr	r3, [pc, #208]	; (8000db0 <MX_TIM2_Init+0x128>)
 8000ce0:	2200      	movs	r2, #0
 8000ce2:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000ce4:	4b32      	ldr	r3, [pc, #200]	; (8000db0 <MX_TIM2_Init+0x128>)
 8000ce6:	2280      	movs	r2, #128	; 0x80
 8000ce8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000cea:	4831      	ldr	r0, [pc, #196]	; (8000db0 <MX_TIM2_Init+0x128>)
 8000cec:	f002 f83c 	bl	8002d68 <HAL_TIM_Base_Init>
 8000cf0:	4603      	mov	r3, r0
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	d001      	beq.n	8000cfa <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8000cf6:	f000 fa2d 	bl	8001154 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000cfa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000cfe:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000d00:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000d04:	4619      	mov	r1, r3
 8000d06:	482a      	ldr	r0, [pc, #168]	; (8000db0 <MX_TIM2_Init+0x128>)
 8000d08:	f002 fe82 	bl	8003a10 <HAL_TIM_ConfigClockSource>
 8000d0c:	4603      	mov	r3, r0
 8000d0e:	2b00      	cmp	r3, #0
 8000d10:	d001      	beq.n	8000d16 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8000d12:	f000 fa1f 	bl	8001154 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 8000d16:	4826      	ldr	r0, [pc, #152]	; (8000db0 <MX_TIM2_Init+0x128>)
 8000d18:	f002 fa26 	bl	8003168 <HAL_TIM_IC_Init>
 8000d1c:	4603      	mov	r3, r0
 8000d1e:	2b00      	cmp	r3, #0
 8000d20:	d001      	beq.n	8000d26 <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 8000d22:	f000 fa17 	bl	8001154 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 8000d26:	2304      	movs	r3, #4
 8000d28:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.InputTrigger = TIM_TS_ITR2;
 8000d2a:	2320      	movs	r3, #32
 8000d2c:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_SlaveConfigSynchro(&htim2, &sSlaveConfig) != HAL_OK)
 8000d2e:	f107 031c 	add.w	r3, r7, #28
 8000d32:	4619      	mov	r1, r3
 8000d34:	481e      	ldr	r0, [pc, #120]	; (8000db0 <MX_TIM2_Init+0x128>)
 8000d36:	f002 ff2f 	bl	8003b98 <HAL_TIM_SlaveConfigSynchro>
 8000d3a:	4603      	mov	r3, r0
 8000d3c:	2b00      	cmp	r3, #0
 8000d3e:	d001      	beq.n	8000d44 <MX_TIM2_Init+0xbc>
  {
    Error_Handler();
 8000d40:	f000 fa08 	bl	8001154 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d44:	2300      	movs	r3, #0
 8000d46:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d48:	2300      	movs	r3, #0
 8000d4a:	61bb      	str	r3, [r7, #24]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000d4c:	f107 0314 	add.w	r3, r7, #20
 8000d50:	4619      	mov	r1, r3
 8000d52:	4817      	ldr	r0, [pc, #92]	; (8000db0 <MX_TIM2_Init+0x128>)
 8000d54:	f003 fc0a 	bl	800456c <HAL_TIMEx_MasterConfigSynchronization>
 8000d58:	4603      	mov	r3, r0
 8000d5a:	2b00      	cmp	r3, #0
 8000d5c:	d001      	beq.n	8000d62 <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 8000d5e:	f000 f9f9 	bl	8001154 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000d62:	2300      	movs	r3, #0
 8000d64:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000d66:	2301      	movs	r3, #1
 8000d68:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8000d6a:	2300      	movs	r3, #0
 8000d6c:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 8000d6e:	2300      	movs	r3, #0
 8000d70:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8000d72:	1d3b      	adds	r3, r7, #4
 8000d74:	2200      	movs	r2, #0
 8000d76:	4619      	mov	r1, r3
 8000d78:	480d      	ldr	r0, [pc, #52]	; (8000db0 <MX_TIM2_Init+0x128>)
 8000d7a:	f002 fdb5 	bl	80038e8 <HAL_TIM_IC_ConfigChannel>
 8000d7e:	4603      	mov	r3, r0
 8000d80:	2b00      	cmp	r3, #0
 8000d82:	d001      	beq.n	8000d88 <MX_TIM2_Init+0x100>
  {
    Error_Handler();
 8000d84:	f000 f9e6 	bl	8001154 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8000d88:	2302      	movs	r3, #2
 8000d8a:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 8000d8c:	2302      	movs	r3, #2
 8000d8e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8000d90:	1d3b      	adds	r3, r7, #4
 8000d92:	2204      	movs	r2, #4
 8000d94:	4619      	mov	r1, r3
 8000d96:	4806      	ldr	r0, [pc, #24]	; (8000db0 <MX_TIM2_Init+0x128>)
 8000d98:	f002 fda6 	bl	80038e8 <HAL_TIM_IC_ConfigChannel>
 8000d9c:	4603      	mov	r3, r0
 8000d9e:	2b00      	cmp	r3, #0
 8000da0:	d001      	beq.n	8000da6 <MX_TIM2_Init+0x11e>
  {
    Error_Handler();
 8000da2:	f000 f9d7 	bl	8001154 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000da6:	bf00      	nop
 8000da8:	3740      	adds	r7, #64	; 0x40
 8000daa:	46bd      	mov	sp, r7
 8000dac:	bd80      	pop	{r7, pc}
 8000dae:	bf00      	nop
 8000db0:	20000488 	.word	0x20000488

08000db4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000db4:	b580      	push	{r7, lr}
 8000db6:	b08c      	sub	sp, #48	; 0x30
 8000db8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000dba:	f107 0320 	add.w	r3, r7, #32
 8000dbe:	2200      	movs	r2, #0
 8000dc0:	601a      	str	r2, [r3, #0]
 8000dc2:	605a      	str	r2, [r3, #4]
 8000dc4:	609a      	str	r2, [r3, #8]
 8000dc6:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8000dc8:	f107 030c 	add.w	r3, r7, #12
 8000dcc:	2200      	movs	r2, #0
 8000dce:	601a      	str	r2, [r3, #0]
 8000dd0:	605a      	str	r2, [r3, #4]
 8000dd2:	609a      	str	r2, [r3, #8]
 8000dd4:	60da      	str	r2, [r3, #12]
 8000dd6:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000dd8:	1d3b      	adds	r3, r7, #4
 8000dda:	2200      	movs	r2, #0
 8000ddc:	601a      	str	r2, [r3, #0]
 8000dde:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000de0:	4b29      	ldr	r3, [pc, #164]	; (8000e88 <MX_TIM3_Init+0xd4>)
 8000de2:	4a2a      	ldr	r2, [pc, #168]	; (8000e8c <MX_TIM3_Init+0xd8>)
 8000de4:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000de6:	4b28      	ldr	r3, [pc, #160]	; (8000e88 <MX_TIM3_Init+0xd4>)
 8000de8:	2200      	movs	r2, #0
 8000dea:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000dec:	4b26      	ldr	r3, [pc, #152]	; (8000e88 <MX_TIM3_Init+0xd4>)
 8000dee:	2200      	movs	r2, #0
 8000df0:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 40000;
 8000df2:	4b25      	ldr	r3, [pc, #148]	; (8000e88 <MX_TIM3_Init+0xd4>)
 8000df4:	f649 4240 	movw	r2, #40000	; 0x9c40
 8000df8:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000dfa:	4b23      	ldr	r3, [pc, #140]	; (8000e88 <MX_TIM3_Init+0xd4>)
 8000dfc:	2200      	movs	r2, #0
 8000dfe:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000e00:	4b21      	ldr	r3, [pc, #132]	; (8000e88 <MX_TIM3_Init+0xd4>)
 8000e02:	2280      	movs	r2, #128	; 0x80
 8000e04:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000e06:	4820      	ldr	r0, [pc, #128]	; (8000e88 <MX_TIM3_Init+0xd4>)
 8000e08:	f001 ffae 	bl	8002d68 <HAL_TIM_Base_Init>
 8000e0c:	4603      	mov	r3, r0
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	d001      	beq.n	8000e16 <MX_TIM3_Init+0x62>
  {
    Error_Handler();
 8000e12:	f000 f99f 	bl	8001154 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000e16:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e1a:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000e1c:	f107 0320 	add.w	r3, r7, #32
 8000e20:	4619      	mov	r1, r3
 8000e22:	4819      	ldr	r0, [pc, #100]	; (8000e88 <MX_TIM3_Init+0xd4>)
 8000e24:	f002 fdf4 	bl	8003a10 <HAL_TIM_ConfigClockSource>
 8000e28:	4603      	mov	r3, r0
 8000e2a:	2b00      	cmp	r3, #0
 8000e2c:	d001      	beq.n	8000e32 <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 8000e2e:	f000 f991 	bl	8001154 <Error_Handler>
  }
  if (HAL_TIM_OnePulse_Init(&htim3, TIM_OPMODE_SINGLE) != HAL_OK)
 8000e32:	2108      	movs	r1, #8
 8000e34:	4814      	ldr	r0, [pc, #80]	; (8000e88 <MX_TIM3_Init+0xd4>)
 8000e36:	f002 fb9d 	bl	8003574 <HAL_TIM_OnePulse_Init>
 8000e3a:	4603      	mov	r3, r0
 8000e3c:	2b00      	cmp	r3, #0
 8000e3e:	d001      	beq.n	8000e44 <MX_TIM3_Init+0x90>
  {
    Error_Handler();
 8000e40:	f000 f988 	bl	8001154 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_TRIGGER;
 8000e44:	2306      	movs	r3, #6
 8000e46:	60fb      	str	r3, [r7, #12]
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 8000e48:	2300      	movs	r3, #0
 8000e4a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_SlaveConfigSynchro(&htim3, &sSlaveConfig) != HAL_OK)
 8000e4c:	f107 030c 	add.w	r3, r7, #12
 8000e50:	4619      	mov	r1, r3
 8000e52:	480d      	ldr	r0, [pc, #52]	; (8000e88 <MX_TIM3_Init+0xd4>)
 8000e54:	f002 fea0 	bl	8003b98 <HAL_TIM_SlaveConfigSynchro>
 8000e58:	4603      	mov	r3, r0
 8000e5a:	2b00      	cmp	r3, #0
 8000e5c:	d001      	beq.n	8000e62 <MX_TIM3_Init+0xae>
  {
    Error_Handler();
 8000e5e:	f000 f979 	bl	8001154 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC1;
 8000e62:	2330      	movs	r3, #48	; 0x30
 8000e64:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e66:	2300      	movs	r3, #0
 8000e68:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000e6a:	1d3b      	adds	r3, r7, #4
 8000e6c:	4619      	mov	r1, r3
 8000e6e:	4806      	ldr	r0, [pc, #24]	; (8000e88 <MX_TIM3_Init+0xd4>)
 8000e70:	f003 fb7c 	bl	800456c <HAL_TIMEx_MasterConfigSynchronization>
 8000e74:	4603      	mov	r3, r0
 8000e76:	2b00      	cmp	r3, #0
 8000e78:	d001      	beq.n	8000e7e <MX_TIM3_Init+0xca>
  {
    Error_Handler();
 8000e7a:	f000 f96b 	bl	8001154 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000e7e:	bf00      	nop
 8000e80:	3730      	adds	r7, #48	; 0x30
 8000e82:	46bd      	mov	sp, r7
 8000e84:	bd80      	pop	{r7, pc}
 8000e86:	bf00      	nop
 8000e88:	200003b0 	.word	0x200003b0
 8000e8c:	40000400 	.word	0x40000400

08000e90 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000e90:	b580      	push	{r7, lr}
 8000e92:	b086      	sub	sp, #24
 8000e94:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000e96:	f107 0308 	add.w	r3, r7, #8
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	601a      	str	r2, [r3, #0]
 8000e9e:	605a      	str	r2, [r3, #4]
 8000ea0:	609a      	str	r2, [r3, #8]
 8000ea2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ea4:	463b      	mov	r3, r7
 8000ea6:	2200      	movs	r2, #0
 8000ea8:	601a      	str	r2, [r3, #0]
 8000eaa:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000eac:	4b1d      	ldr	r3, [pc, #116]	; (8000f24 <MX_TIM4_Init+0x94>)
 8000eae:	4a1e      	ldr	r2, [pc, #120]	; (8000f28 <MX_TIM4_Init+0x98>)
 8000eb0:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 1;
 8000eb2:	4b1c      	ldr	r3, [pc, #112]	; (8000f24 <MX_TIM4_Init+0x94>)
 8000eb4:	2201      	movs	r2, #1
 8000eb6:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000eb8:	4b1a      	ldr	r3, [pc, #104]	; (8000f24 <MX_TIM4_Init+0x94>)
 8000eba:	2200      	movs	r2, #0
 8000ebc:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8000ebe:	4b19      	ldr	r3, [pc, #100]	; (8000f24 <MX_TIM4_Init+0x94>)
 8000ec0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000ec4:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ec6:	4b17      	ldr	r3, [pc, #92]	; (8000f24 <MX_TIM4_Init+0x94>)
 8000ec8:	2200      	movs	r2, #0
 8000eca:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000ecc:	4b15      	ldr	r3, [pc, #84]	; (8000f24 <MX_TIM4_Init+0x94>)
 8000ece:	2280      	movs	r2, #128	; 0x80
 8000ed0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8000ed2:	4814      	ldr	r0, [pc, #80]	; (8000f24 <MX_TIM4_Init+0x94>)
 8000ed4:	f001 ff48 	bl	8002d68 <HAL_TIM_Base_Init>
 8000ed8:	4603      	mov	r3, r0
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	d001      	beq.n	8000ee2 <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 8000ede:	f000 f939 	bl	8001154 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000ee2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ee6:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8000ee8:	f107 0308 	add.w	r3, r7, #8
 8000eec:	4619      	mov	r1, r3
 8000eee:	480d      	ldr	r0, [pc, #52]	; (8000f24 <MX_TIM4_Init+0x94>)
 8000ef0:	f002 fd8e 	bl	8003a10 <HAL_TIM_ConfigClockSource>
 8000ef4:	4603      	mov	r3, r0
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	d001      	beq.n	8000efe <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 8000efa:	f000 f92b 	bl	8001154 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000efe:	2320      	movs	r3, #32
 8000f00:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f02:	2300      	movs	r3, #0
 8000f04:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000f06:	463b      	mov	r3, r7
 8000f08:	4619      	mov	r1, r3
 8000f0a:	4806      	ldr	r0, [pc, #24]	; (8000f24 <MX_TIM4_Init+0x94>)
 8000f0c:	f003 fb2e 	bl	800456c <HAL_TIMEx_MasterConfigSynchronization>
 8000f10:	4603      	mov	r3, r0
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	d001      	beq.n	8000f1a <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 8000f16:	f000 f91d 	bl	8001154 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8000f1a:	bf00      	nop
 8000f1c:	3718      	adds	r7, #24
 8000f1e:	46bd      	mov	sp, r7
 8000f20:	bd80      	pop	{r7, pc}
 8000f22:	bf00      	nop
 8000f24:	2000030c 	.word	0x2000030c
 8000f28:	40000800 	.word	0x40000800

08000f2c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000f30:	4b11      	ldr	r3, [pc, #68]	; (8000f78 <MX_USART1_UART_Init+0x4c>)
 8000f32:	4a12      	ldr	r2, [pc, #72]	; (8000f7c <MX_USART1_UART_Init+0x50>)
 8000f34:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000f36:	4b10      	ldr	r3, [pc, #64]	; (8000f78 <MX_USART1_UART_Init+0x4c>)
 8000f38:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000f3c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000f3e:	4b0e      	ldr	r3, [pc, #56]	; (8000f78 <MX_USART1_UART_Init+0x4c>)
 8000f40:	2200      	movs	r2, #0
 8000f42:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000f44:	4b0c      	ldr	r3, [pc, #48]	; (8000f78 <MX_USART1_UART_Init+0x4c>)
 8000f46:	2200      	movs	r2, #0
 8000f48:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000f4a:	4b0b      	ldr	r3, [pc, #44]	; (8000f78 <MX_USART1_UART_Init+0x4c>)
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000f50:	4b09      	ldr	r3, [pc, #36]	; (8000f78 <MX_USART1_UART_Init+0x4c>)
 8000f52:	220c      	movs	r2, #12
 8000f54:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f56:	4b08      	ldr	r3, [pc, #32]	; (8000f78 <MX_USART1_UART_Init+0x4c>)
 8000f58:	2200      	movs	r2, #0
 8000f5a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f5c:	4b06      	ldr	r3, [pc, #24]	; (8000f78 <MX_USART1_UART_Init+0x4c>)
 8000f5e:	2200      	movs	r2, #0
 8000f60:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000f62:	4805      	ldr	r0, [pc, #20]	; (8000f78 <MX_USART1_UART_Init+0x4c>)
 8000f64:	f003 fbc3 	bl	80046ee <HAL_UART_Init>
 8000f68:	4603      	mov	r3, r0
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	d001      	beq.n	8000f72 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000f6e:	f000 f8f1 	bl	8001154 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000f72:	bf00      	nop
 8000f74:	bd80      	pop	{r7, pc}
 8000f76:	bf00      	nop
 8000f78:	200003f8 	.word	0x200003f8
 8000f7c:	40013800 	.word	0x40013800

08000f80 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000f80:	b580      	push	{r7, lr}
 8000f82:	b088      	sub	sp, #32
 8000f84:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f86:	f107 0310 	add.w	r3, r7, #16
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	601a      	str	r2, [r3, #0]
 8000f8e:	605a      	str	r2, [r3, #4]
 8000f90:	609a      	str	r2, [r3, #8]
 8000f92:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f94:	4b28      	ldr	r3, [pc, #160]	; (8001038 <MX_GPIO_Init+0xb8>)
 8000f96:	699b      	ldr	r3, [r3, #24]
 8000f98:	4a27      	ldr	r2, [pc, #156]	; (8001038 <MX_GPIO_Init+0xb8>)
 8000f9a:	f043 0320 	orr.w	r3, r3, #32
 8000f9e:	6193      	str	r3, [r2, #24]
 8000fa0:	4b25      	ldr	r3, [pc, #148]	; (8001038 <MX_GPIO_Init+0xb8>)
 8000fa2:	699b      	ldr	r3, [r3, #24]
 8000fa4:	f003 0320 	and.w	r3, r3, #32
 8000fa8:	60fb      	str	r3, [r7, #12]
 8000faa:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fac:	4b22      	ldr	r3, [pc, #136]	; (8001038 <MX_GPIO_Init+0xb8>)
 8000fae:	699b      	ldr	r3, [r3, #24]
 8000fb0:	4a21      	ldr	r2, [pc, #132]	; (8001038 <MX_GPIO_Init+0xb8>)
 8000fb2:	f043 0304 	orr.w	r3, r3, #4
 8000fb6:	6193      	str	r3, [r2, #24]
 8000fb8:	4b1f      	ldr	r3, [pc, #124]	; (8001038 <MX_GPIO_Init+0xb8>)
 8000fba:	699b      	ldr	r3, [r3, #24]
 8000fbc:	f003 0304 	and.w	r3, r3, #4
 8000fc0:	60bb      	str	r3, [r7, #8]
 8000fc2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fc4:	4b1c      	ldr	r3, [pc, #112]	; (8001038 <MX_GPIO_Init+0xb8>)
 8000fc6:	699b      	ldr	r3, [r3, #24]
 8000fc8:	4a1b      	ldr	r2, [pc, #108]	; (8001038 <MX_GPIO_Init+0xb8>)
 8000fca:	f043 0308 	orr.w	r3, r3, #8
 8000fce:	6193      	str	r3, [r2, #24]
 8000fd0:	4b19      	ldr	r3, [pc, #100]	; (8001038 <MX_GPIO_Init+0xb8>)
 8000fd2:	699b      	ldr	r3, [r3, #24]
 8000fd4:	f003 0308 	and.w	r3, r3, #8
 8000fd8:	607b      	str	r3, [r7, #4]
 8000fda:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_Pin|nRst_Pin, GPIO_PIN_RESET);
 8000fdc:	2200      	movs	r2, #0
 8000fde:	f44f 5184 	mov.w	r1, #4224	; 0x1080
 8000fe2:	4816      	ldr	r0, [pc, #88]	; (800103c <MX_GPIO_Init+0xbc>)
 8000fe4:	f001 f8c4 	bl	8002170 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, Z1_Pin|Z2_Pin|SCSN_Pin|Z3_Pin
 8000fe8:	2200      	movs	r2, #0
 8000fea:	f241 011e 	movw	r1, #4126	; 0x101e
 8000fee:	4814      	ldr	r0, [pc, #80]	; (8001040 <MX_GPIO_Init+0xc0>)
 8000ff0:	f001 f8be 	bl	8002170 <HAL_GPIO_WritePin>
                          |Z4_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : LED_Pin nRst_Pin */
  GPIO_InitStruct.Pin = LED_Pin|nRst_Pin;
 8000ff4:	f44f 5384 	mov.w	r3, #4224	; 0x1080
 8000ff8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ffa:	2301      	movs	r3, #1
 8000ffc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ffe:	2300      	movs	r3, #0
 8001000:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001002:	2302      	movs	r3, #2
 8001004:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001006:	f107 0310 	add.w	r3, r7, #16
 800100a:	4619      	mov	r1, r3
 800100c:	480b      	ldr	r0, [pc, #44]	; (800103c <MX_GPIO_Init+0xbc>)
 800100e:	f000 ff2b 	bl	8001e68 <HAL_GPIO_Init>

  /*Configure GPIO pins : Z1_Pin Z2_Pin SCSN_Pin Z3_Pin
                           Z4_Pin */
  GPIO_InitStruct.Pin = Z1_Pin|Z2_Pin|SCSN_Pin|Z3_Pin
 8001012:	f241 031e 	movw	r3, #4126	; 0x101e
 8001016:	613b      	str	r3, [r7, #16]
                          |Z4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001018:	2301      	movs	r3, #1
 800101a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800101c:	2300      	movs	r3, #0
 800101e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001020:	2302      	movs	r3, #2
 8001022:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001024:	f107 0310 	add.w	r3, r7, #16
 8001028:	4619      	mov	r1, r3
 800102a:	4805      	ldr	r0, [pc, #20]	; (8001040 <MX_GPIO_Init+0xc0>)
 800102c:	f000 ff1c 	bl	8001e68 <HAL_GPIO_Init>

}
 8001030:	bf00      	nop
 8001032:	3720      	adds	r7, #32
 8001034:	46bd      	mov	sp, r7
 8001036:	bd80      	pop	{r7, pc}
 8001038:	40021000 	.word	0x40021000
 800103c:	40010800 	.word	0x40010800
 8001040:	40010c00 	.word	0x40010c00

08001044 <HAL_TIM_IC_CaptureCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef* htim) {
 8001044:	b580      	push	{r7, lr}
 8001046:	b082      	sub	sp, #8
 8001048:	af00      	add	r7, sp, #0
 800104a:	6078      	str	r0, [r7, #4]
	if (runFlag > 0) {								// Разрешено измерение ?
 800104c:	4b38      	ldr	r3, [pc, #224]	; (8001130 <HAL_TIM_IC_CaptureCallback+0xec>)
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	2b00      	cmp	r3, #0
 8001052:	d069      	beq.n	8001128 <HAL_TIM_IC_CaptureCallback+0xe4>
		if ((htim->Instance == TIM2) && (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1 || htim->Channel == HAL_TIM_ACTIVE_CHANNEL_2)) {
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800105c:	d164      	bne.n	8001128 <HAL_TIM_IC_CaptureCallback+0xe4>
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	7f1b      	ldrb	r3, [r3, #28]
 8001062:	2b01      	cmp	r3, #1
 8001064:	d003      	beq.n	800106e <HAL_TIM_IC_CaptureCallback+0x2a>
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	7f1b      	ldrb	r3, [r3, #28]
 800106a:	2b02      	cmp	r3, #2
 800106c:	d15c      	bne.n	8001128 <HAL_TIM_IC_CaptureCallback+0xe4>
			if ((runFlag < COUNT_FRONT) || ((GPIOA->IDR & GPIO_PIN_0) != 0) ) {  // Ждем фронт первого импульса, дальше обрабатываем все импульсы.
 800106e:	4b30      	ldr	r3, [pc, #192]	; (8001130 <HAL_TIM_IC_CaptureCallback+0xec>)
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	2b27      	cmp	r3, #39	; 0x27
 8001074:	d905      	bls.n	8001082 <HAL_TIM_IC_CaptureCallback+0x3e>
 8001076:	4b2f      	ldr	r3, [pc, #188]	; (8001134 <HAL_TIM_IC_CaptureCallback+0xf0>)
 8001078:	689b      	ldr	r3, [r3, #8]
 800107a:	f003 0301 	and.w	r3, r3, #1
 800107e:	2b00      	cmp	r3, #0
 8001080:	d052      	beq.n	8001128 <HAL_TIM_IC_CaptureCallback+0xe4>
				if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1 ) {  // Активен фронт
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	7f1b      	ldrb	r3, [r3, #28]
 8001086:	2b01      	cmp	r3, #1
 8001088:	d10c      	bne.n	80010a4 <HAL_TIM_IC_CaptureCallback+0x60>
					front_sum = front_sum + (uint16_t) (HAL_TIM_ReadCapturedValue(&htim2, TIM_CHANNEL_1) & 0x0FFFF);
 800108a:	2100      	movs	r1, #0
 800108c:	482a      	ldr	r0, [pc, #168]	; (8001138 <HAL_TIM_IC_CaptureCallback+0xf4>)
 800108e:	f002 fdc5 	bl	8003c1c <HAL_TIM_ReadCapturedValue>
 8001092:	4603      	mov	r3, r0
 8001094:	b29a      	uxth	r2, r3
 8001096:	4b29      	ldr	r3, [pc, #164]	; (800113c <HAL_TIM_IC_CaptureCallback+0xf8>)
 8001098:	881b      	ldrh	r3, [r3, #0]
 800109a:	4413      	add	r3, r2
 800109c:	b29a      	uxth	r2, r3
 800109e:	4b27      	ldr	r3, [pc, #156]	; (800113c <HAL_TIM_IC_CaptureCallback+0xf8>)
 80010a0:	801a      	strh	r2, [r3, #0]
 80010a2:	e00b      	b.n	80010bc <HAL_TIM_IC_CaptureCallback+0x78>
				} else {   // Активен спад
					front_sum = front_sum + (uint16_t) (HAL_TIM_ReadCapturedValue(&htim2, TIM_CHANNEL_2) & 0x0FFFF);
 80010a4:	2104      	movs	r1, #4
 80010a6:	4824      	ldr	r0, [pc, #144]	; (8001138 <HAL_TIM_IC_CaptureCallback+0xf4>)
 80010a8:	f002 fdb8 	bl	8003c1c <HAL_TIM_ReadCapturedValue>
 80010ac:	4603      	mov	r3, r0
 80010ae:	b29a      	uxth	r2, r3
 80010b0:	4b22      	ldr	r3, [pc, #136]	; (800113c <HAL_TIM_IC_CaptureCallback+0xf8>)
 80010b2:	881b      	ldrh	r3, [r3, #0]
 80010b4:	4413      	add	r3, r2
 80010b6:	b29a      	uxth	r2, r3
 80010b8:	4b20      	ldr	r3, [pc, #128]	; (800113c <HAL_TIM_IC_CaptureCallback+0xf8>)
 80010ba:	801a      	strh	r2, [r3, #0]
				}
				runFlag--;
 80010bc:	4b1c      	ldr	r3, [pc, #112]	; (8001130 <HAL_TIM_IC_CaptureCallback+0xec>)
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	3b01      	subs	r3, #1
 80010c2:	4a1b      	ldr	r2, [pc, #108]	; (8001130 <HAL_TIM_IC_CaptureCallback+0xec>)
 80010c4:	6013      	str	r3, [r2, #0]
				if (runFlag == 0) {
 80010c6:	4b1a      	ldr	r3, [pc, #104]	; (8001130 <HAL_TIM_IC_CaptureCallback+0xec>)
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d12c      	bne.n	8001128 <HAL_TIM_IC_CaptureCallback+0xe4>
					LED_PULSE
 80010ce:	2201      	movs	r2, #1
 80010d0:	2180      	movs	r1, #128	; 0x80
 80010d2:	4818      	ldr	r0, [pc, #96]	; (8001134 <HAL_TIM_IC_CaptureCallback+0xf0>)
 80010d4:	f001 f84c 	bl	8002170 <HAL_GPIO_WritePin>
 80010d8:	2200      	movs	r2, #0
 80010da:	2180      	movs	r1, #128	; 0x80
 80010dc:	4815      	ldr	r0, [pc, #84]	; (8001134 <HAL_TIM_IC_CaptureCallback+0xf0>)
 80010de:	f001 f847 	bl	8002170 <HAL_GPIO_WritePin>
					STOP_CAPTURE
 80010e2:	2100      	movs	r1, #0
 80010e4:	4814      	ldr	r0, [pc, #80]	; (8001138 <HAL_TIM_IC_CaptureCallback+0xf4>)
 80010e6:	f002 f99d 	bl	8003424 <HAL_TIM_IC_Stop_IT>
 80010ea:	2104      	movs	r1, #4
 80010ec:	4812      	ldr	r0, [pc, #72]	; (8001138 <HAL_TIM_IC_CaptureCallback+0xf4>)
 80010ee:	f002 f999 	bl	8003424 <HAL_TIM_IC_Stop_IT>
					/* Отключим все мультиплексоры */
					receiversOff
 80010f2:	4b13      	ldr	r3, [pc, #76]	; (8001140 <HAL_TIM_IC_CaptureCallback+0xfc>)
 80010f4:	68db      	ldr	r3, [r3, #12]
 80010f6:	4a12      	ldr	r2, [pc, #72]	; (8001140 <HAL_TIM_IC_CaptureCallback+0xfc>)
 80010f8:	f043 031e 	orr.w	r3, r3, #30
 80010fc:	60d3      	str	r3, [r2, #12]
					//GPIOB->ODR &= ~((1 << Z1Receive) | (1 << Z2Receive) | (1 << Z3Receive) | (1 << Z4Receive));
					runFlag = 0;
 80010fe:	4b0c      	ldr	r3, [pc, #48]	; (8001130 <HAL_TIM_IC_CaptureCallback+0xec>)
 8001100:	2200      	movs	r2, #0
 8001102:	601a      	str	r2, [r3, #0]
					#ifdef SYSTICK_DISABLE
						SysTick->CTRL |= SysTick_CTRL_ENABLE_Msk;  // Включение SysTick
 8001104:	4b0f      	ldr	r3, [pc, #60]	; (8001144 <HAL_TIM_IC_CaptureCallback+0x100>)
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	4a0e      	ldr	r2, [pc, #56]	; (8001144 <HAL_TIM_IC_CaptureCallback+0x100>)
 800110a:	f043 0301 	orr.w	r3, r3, #1
 800110e:	6013      	str	r3, [r2, #0]
					#endif
					resulMeass = front_sum / COUNT_FRONT;  // Расчитываем задержку от средины импульсов
 8001110:	4b0a      	ldr	r3, [pc, #40]	; (800113c <HAL_TIM_IC_CaptureCallback+0xf8>)
 8001112:	881b      	ldrh	r3, [r3, #0]
 8001114:	4a0c      	ldr	r2, [pc, #48]	; (8001148 <HAL_TIM_IC_CaptureCallback+0x104>)
 8001116:	fba2 2303 	umull	r2, r3, r2, r3
 800111a:	095b      	lsrs	r3, r3, #5
 800111c:	b29a      	uxth	r2, r3
 800111e:	4b0b      	ldr	r3, [pc, #44]	; (800114c <HAL_TIM_IC_CaptureCallback+0x108>)
 8001120:	801a      	strh	r2, [r3, #0]
					readyFlag = TRUE;
 8001122:	4b0b      	ldr	r3, [pc, #44]	; (8001150 <HAL_TIM_IC_CaptureCallback+0x10c>)
 8001124:	2201      	movs	r2, #1
 8001126:	701a      	strb	r2, [r3, #0]
				}
			}
		}
	}
}
 8001128:	bf00      	nop
 800112a:	3708      	adds	r7, #8
 800112c:	46bd      	mov	sp, r7
 800112e:	bd80      	pop	{r7, pc}
 8001130:	200001a8 	.word	0x200001a8
 8001134:	40010800 	.word	0x40010800
 8001138:	20000488 	.word	0x20000488
 800113c:	200001a0 	.word	0x200001a0
 8001140:	40010c00 	.word	0x40010c00
 8001144:	e000e010 	.word	0xe000e010
 8001148:	cccccccd 	.word	0xcccccccd
 800114c:	200001ac 	.word	0x200001ac
 8001150:	2000016c 	.word	0x2000016c

08001154 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001154:	b480      	push	{r7}
 8001156:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001158:	b672      	cpsid	i
}
 800115a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800115c:	e7fe      	b.n	800115c <Error_Handler+0x8>
	...

08001160 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001160:	b480      	push	{r7}
 8001162:	b085      	sub	sp, #20
 8001164:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001166:	4b15      	ldr	r3, [pc, #84]	; (80011bc <HAL_MspInit+0x5c>)
 8001168:	699b      	ldr	r3, [r3, #24]
 800116a:	4a14      	ldr	r2, [pc, #80]	; (80011bc <HAL_MspInit+0x5c>)
 800116c:	f043 0301 	orr.w	r3, r3, #1
 8001170:	6193      	str	r3, [r2, #24]
 8001172:	4b12      	ldr	r3, [pc, #72]	; (80011bc <HAL_MspInit+0x5c>)
 8001174:	699b      	ldr	r3, [r3, #24]
 8001176:	f003 0301 	and.w	r3, r3, #1
 800117a:	60bb      	str	r3, [r7, #8]
 800117c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800117e:	4b0f      	ldr	r3, [pc, #60]	; (80011bc <HAL_MspInit+0x5c>)
 8001180:	69db      	ldr	r3, [r3, #28]
 8001182:	4a0e      	ldr	r2, [pc, #56]	; (80011bc <HAL_MspInit+0x5c>)
 8001184:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001188:	61d3      	str	r3, [r2, #28]
 800118a:	4b0c      	ldr	r3, [pc, #48]	; (80011bc <HAL_MspInit+0x5c>)
 800118c:	69db      	ldr	r3, [r3, #28]
 800118e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001192:	607b      	str	r3, [r7, #4]
 8001194:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 8001196:	4b0a      	ldr	r3, [pc, #40]	; (80011c0 <HAL_MspInit+0x60>)
 8001198:	685b      	ldr	r3, [r3, #4]
 800119a:	60fb      	str	r3, [r7, #12]
 800119c:	68fb      	ldr	r3, [r7, #12]
 800119e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80011a2:	60fb      	str	r3, [r7, #12]
 80011a4:	68fb      	ldr	r3, [r7, #12]
 80011a6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80011aa:	60fb      	str	r3, [r7, #12]
 80011ac:	4a04      	ldr	r2, [pc, #16]	; (80011c0 <HAL_MspInit+0x60>)
 80011ae:	68fb      	ldr	r3, [r7, #12]
 80011b0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80011b2:	bf00      	nop
 80011b4:	3714      	adds	r7, #20
 80011b6:	46bd      	mov	sp, r7
 80011b8:	bc80      	pop	{r7}
 80011ba:	4770      	bx	lr
 80011bc:	40021000 	.word	0x40021000
 80011c0:	40010000 	.word	0x40010000

080011c4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80011c4:	b580      	push	{r7, lr}
 80011c6:	b08a      	sub	sp, #40	; 0x28
 80011c8:	af00      	add	r7, sp, #0
 80011ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011cc:	f107 0314 	add.w	r3, r7, #20
 80011d0:	2200      	movs	r2, #0
 80011d2:	601a      	str	r2, [r3, #0]
 80011d4:	605a      	str	r2, [r3, #4]
 80011d6:	609a      	str	r2, [r3, #8]
 80011d8:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	4a1d      	ldr	r2, [pc, #116]	; (8001254 <HAL_I2C_MspInit+0x90>)
 80011e0:	4293      	cmp	r3, r2
 80011e2:	d132      	bne.n	800124a <HAL_I2C_MspInit+0x86>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80011e4:	4b1c      	ldr	r3, [pc, #112]	; (8001258 <HAL_I2C_MspInit+0x94>)
 80011e6:	699b      	ldr	r3, [r3, #24]
 80011e8:	4a1b      	ldr	r2, [pc, #108]	; (8001258 <HAL_I2C_MspInit+0x94>)
 80011ea:	f043 0308 	orr.w	r3, r3, #8
 80011ee:	6193      	str	r3, [r2, #24]
 80011f0:	4b19      	ldr	r3, [pc, #100]	; (8001258 <HAL_I2C_MspInit+0x94>)
 80011f2:	699b      	ldr	r3, [r3, #24]
 80011f4:	f003 0308 	and.w	r3, r3, #8
 80011f8:	613b      	str	r3, [r7, #16]
 80011fa:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80011fc:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001200:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001202:	2312      	movs	r3, #18
 8001204:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001206:	2303      	movs	r3, #3
 8001208:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800120a:	f107 0314 	add.w	r3, r7, #20
 800120e:	4619      	mov	r1, r3
 8001210:	4812      	ldr	r0, [pc, #72]	; (800125c <HAL_I2C_MspInit+0x98>)
 8001212:	f000 fe29 	bl	8001e68 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_I2C1_ENABLE();
 8001216:	4b12      	ldr	r3, [pc, #72]	; (8001260 <HAL_I2C_MspInit+0x9c>)
 8001218:	685b      	ldr	r3, [r3, #4]
 800121a:	627b      	str	r3, [r7, #36]	; 0x24
 800121c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800121e:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8001222:	627b      	str	r3, [r7, #36]	; 0x24
 8001224:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001226:	f043 0302 	orr.w	r3, r3, #2
 800122a:	627b      	str	r3, [r7, #36]	; 0x24
 800122c:	4a0c      	ldr	r2, [pc, #48]	; (8001260 <HAL_I2C_MspInit+0x9c>)
 800122e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001230:	6053      	str	r3, [r2, #4]

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001232:	4b09      	ldr	r3, [pc, #36]	; (8001258 <HAL_I2C_MspInit+0x94>)
 8001234:	69db      	ldr	r3, [r3, #28]
 8001236:	4a08      	ldr	r2, [pc, #32]	; (8001258 <HAL_I2C_MspInit+0x94>)
 8001238:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800123c:	61d3      	str	r3, [r2, #28]
 800123e:	4b06      	ldr	r3, [pc, #24]	; (8001258 <HAL_I2C_MspInit+0x94>)
 8001240:	69db      	ldr	r3, [r3, #28]
 8001242:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001246:	60fb      	str	r3, [r7, #12]
 8001248:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800124a:	bf00      	nop
 800124c:	3728      	adds	r7, #40	; 0x28
 800124e:	46bd      	mov	sp, r7
 8001250:	bd80      	pop	{r7, pc}
 8001252:	bf00      	nop
 8001254:	40005400 	.word	0x40005400
 8001258:	40021000 	.word	0x40021000
 800125c:	40010c00 	.word	0x40010c00
 8001260:	40010000 	.word	0x40010000

08001264 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001264:	b580      	push	{r7, lr}
 8001266:	b088      	sub	sp, #32
 8001268:	af00      	add	r7, sp, #0
 800126a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800126c:	f107 0310 	add.w	r3, r7, #16
 8001270:	2200      	movs	r2, #0
 8001272:	601a      	str	r2, [r3, #0]
 8001274:	605a      	str	r2, [r3, #4]
 8001276:	609a      	str	r2, [r3, #8]
 8001278:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI2)
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	4a1c      	ldr	r2, [pc, #112]	; (80012f0 <HAL_SPI_MspInit+0x8c>)
 8001280:	4293      	cmp	r3, r2
 8001282:	d131      	bne.n	80012e8 <HAL_SPI_MspInit+0x84>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001284:	4b1b      	ldr	r3, [pc, #108]	; (80012f4 <HAL_SPI_MspInit+0x90>)
 8001286:	69db      	ldr	r3, [r3, #28]
 8001288:	4a1a      	ldr	r2, [pc, #104]	; (80012f4 <HAL_SPI_MspInit+0x90>)
 800128a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800128e:	61d3      	str	r3, [r2, #28]
 8001290:	4b18      	ldr	r3, [pc, #96]	; (80012f4 <HAL_SPI_MspInit+0x90>)
 8001292:	69db      	ldr	r3, [r3, #28]
 8001294:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001298:	60fb      	str	r3, [r7, #12]
 800129a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800129c:	4b15      	ldr	r3, [pc, #84]	; (80012f4 <HAL_SPI_MspInit+0x90>)
 800129e:	699b      	ldr	r3, [r3, #24]
 80012a0:	4a14      	ldr	r2, [pc, #80]	; (80012f4 <HAL_SPI_MspInit+0x90>)
 80012a2:	f043 0308 	orr.w	r3, r3, #8
 80012a6:	6193      	str	r3, [r2, #24]
 80012a8:	4b12      	ldr	r3, [pc, #72]	; (80012f4 <HAL_SPI_MspInit+0x90>)
 80012aa:	699b      	ldr	r3, [r3, #24]
 80012ac:	f003 0308 	and.w	r3, r3, #8
 80012b0:	60bb      	str	r3, [r7, #8]
 80012b2:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 80012b4:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 80012b8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012ba:	2302      	movs	r3, #2
 80012bc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80012be:	2303      	movs	r3, #3
 80012c0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012c2:	f107 0310 	add.w	r3, r7, #16
 80012c6:	4619      	mov	r1, r3
 80012c8:	480b      	ldr	r0, [pc, #44]	; (80012f8 <HAL_SPI_MspInit+0x94>)
 80012ca:	f000 fdcd 	bl	8001e68 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_14;
 80012ce:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80012d2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80012d4:	2300      	movs	r3, #0
 80012d6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012d8:	2300      	movs	r3, #0
 80012da:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012dc:	f107 0310 	add.w	r3, r7, #16
 80012e0:	4619      	mov	r1, r3
 80012e2:	4805      	ldr	r0, [pc, #20]	; (80012f8 <HAL_SPI_MspInit+0x94>)
 80012e4:	f000 fdc0 	bl	8001e68 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 80012e8:	bf00      	nop
 80012ea:	3720      	adds	r7, #32
 80012ec:	46bd      	mov	sp, r7
 80012ee:	bd80      	pop	{r7, pc}
 80012f0:	40003800 	.word	0x40003800
 80012f4:	40021000 	.word	0x40021000
 80012f8:	40010c00 	.word	0x40010c00

080012fc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80012fc:	b580      	push	{r7, lr}
 80012fe:	b08c      	sub	sp, #48	; 0x30
 8001300:	af00      	add	r7, sp, #0
 8001302:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001304:	f107 0320 	add.w	r3, r7, #32
 8001308:	2200      	movs	r2, #0
 800130a:	601a      	str	r2, [r3, #0]
 800130c:	605a      	str	r2, [r3, #4]
 800130e:	609a      	str	r2, [r3, #8]
 8001310:	60da      	str	r2, [r3, #12]
  if(htim_base->Instance==TIM1)
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	4a3c      	ldr	r2, [pc, #240]	; (8001408 <HAL_TIM_Base_MspInit+0x10c>)
 8001318:	4293      	cmp	r3, r2
 800131a:	d10c      	bne.n	8001336 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800131c:	4b3b      	ldr	r3, [pc, #236]	; (800140c <HAL_TIM_Base_MspInit+0x110>)
 800131e:	699b      	ldr	r3, [r3, #24]
 8001320:	4a3a      	ldr	r2, [pc, #232]	; (800140c <HAL_TIM_Base_MspInit+0x110>)
 8001322:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001326:	6193      	str	r3, [r2, #24]
 8001328:	4b38      	ldr	r3, [pc, #224]	; (800140c <HAL_TIM_Base_MspInit+0x110>)
 800132a:	699b      	ldr	r3, [r3, #24]
 800132c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001330:	61fb      	str	r3, [r7, #28]
 8001332:	69fb      	ldr	r3, [r7, #28]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8001334:	e064      	b.n	8001400 <HAL_TIM_Base_MspInit+0x104>
  else if(htim_base->Instance==TIM2)
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800133e:	d12c      	bne.n	800139a <HAL_TIM_Base_MspInit+0x9e>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001340:	4b32      	ldr	r3, [pc, #200]	; (800140c <HAL_TIM_Base_MspInit+0x110>)
 8001342:	69db      	ldr	r3, [r3, #28]
 8001344:	4a31      	ldr	r2, [pc, #196]	; (800140c <HAL_TIM_Base_MspInit+0x110>)
 8001346:	f043 0301 	orr.w	r3, r3, #1
 800134a:	61d3      	str	r3, [r2, #28]
 800134c:	4b2f      	ldr	r3, [pc, #188]	; (800140c <HAL_TIM_Base_MspInit+0x110>)
 800134e:	69db      	ldr	r3, [r3, #28]
 8001350:	f003 0301 	and.w	r3, r3, #1
 8001354:	61bb      	str	r3, [r7, #24]
 8001356:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001358:	4b2c      	ldr	r3, [pc, #176]	; (800140c <HAL_TIM_Base_MspInit+0x110>)
 800135a:	699b      	ldr	r3, [r3, #24]
 800135c:	4a2b      	ldr	r2, [pc, #172]	; (800140c <HAL_TIM_Base_MspInit+0x110>)
 800135e:	f043 0304 	orr.w	r3, r3, #4
 8001362:	6193      	str	r3, [r2, #24]
 8001364:	4b29      	ldr	r3, [pc, #164]	; (800140c <HAL_TIM_Base_MspInit+0x110>)
 8001366:	699b      	ldr	r3, [r3, #24]
 8001368:	f003 0304 	and.w	r3, r3, #4
 800136c:	617b      	str	r3, [r7, #20]
 800136e:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001370:	2301      	movs	r3, #1
 8001372:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001374:	2300      	movs	r3, #0
 8001376:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001378:	2300      	movs	r3, #0
 800137a:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800137c:	f107 0320 	add.w	r3, r7, #32
 8001380:	4619      	mov	r1, r3
 8001382:	4823      	ldr	r0, [pc, #140]	; (8001410 <HAL_TIM_Base_MspInit+0x114>)
 8001384:	f000 fd70 	bl	8001e68 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001388:	2200      	movs	r2, #0
 800138a:	2100      	movs	r1, #0
 800138c:	201c      	movs	r0, #28
 800138e:	f000 fb34 	bl	80019fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001392:	201c      	movs	r0, #28
 8001394:	f000 fb4d 	bl	8001a32 <HAL_NVIC_EnableIRQ>
}
 8001398:	e032      	b.n	8001400 <HAL_TIM_Base_MspInit+0x104>
  else if(htim_base->Instance==TIM3)
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	4a1d      	ldr	r2, [pc, #116]	; (8001414 <HAL_TIM_Base_MspInit+0x118>)
 80013a0:	4293      	cmp	r3, r2
 80013a2:	d114      	bne.n	80013ce <HAL_TIM_Base_MspInit+0xd2>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80013a4:	4b19      	ldr	r3, [pc, #100]	; (800140c <HAL_TIM_Base_MspInit+0x110>)
 80013a6:	69db      	ldr	r3, [r3, #28]
 80013a8:	4a18      	ldr	r2, [pc, #96]	; (800140c <HAL_TIM_Base_MspInit+0x110>)
 80013aa:	f043 0302 	orr.w	r3, r3, #2
 80013ae:	61d3      	str	r3, [r2, #28]
 80013b0:	4b16      	ldr	r3, [pc, #88]	; (800140c <HAL_TIM_Base_MspInit+0x110>)
 80013b2:	69db      	ldr	r3, [r3, #28]
 80013b4:	f003 0302 	and.w	r3, r3, #2
 80013b8:	613b      	str	r3, [r7, #16]
 80013ba:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80013bc:	2200      	movs	r2, #0
 80013be:	2100      	movs	r1, #0
 80013c0:	201d      	movs	r0, #29
 80013c2:	f000 fb1a 	bl	80019fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80013c6:	201d      	movs	r0, #29
 80013c8:	f000 fb33 	bl	8001a32 <HAL_NVIC_EnableIRQ>
}
 80013cc:	e018      	b.n	8001400 <HAL_TIM_Base_MspInit+0x104>
  else if(htim_base->Instance==TIM4)
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	4a11      	ldr	r2, [pc, #68]	; (8001418 <HAL_TIM_Base_MspInit+0x11c>)
 80013d4:	4293      	cmp	r3, r2
 80013d6:	d113      	bne.n	8001400 <HAL_TIM_Base_MspInit+0x104>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80013d8:	4b0c      	ldr	r3, [pc, #48]	; (800140c <HAL_TIM_Base_MspInit+0x110>)
 80013da:	69db      	ldr	r3, [r3, #28]
 80013dc:	4a0b      	ldr	r2, [pc, #44]	; (800140c <HAL_TIM_Base_MspInit+0x110>)
 80013de:	f043 0304 	orr.w	r3, r3, #4
 80013e2:	61d3      	str	r3, [r2, #28]
 80013e4:	4b09      	ldr	r3, [pc, #36]	; (800140c <HAL_TIM_Base_MspInit+0x110>)
 80013e6:	69db      	ldr	r3, [r3, #28]
 80013e8:	f003 0304 	and.w	r3, r3, #4
 80013ec:	60fb      	str	r3, [r7, #12]
 80013ee:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 80013f0:	2200      	movs	r2, #0
 80013f2:	2100      	movs	r1, #0
 80013f4:	201e      	movs	r0, #30
 80013f6:	f000 fb00 	bl	80019fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80013fa:	201e      	movs	r0, #30
 80013fc:	f000 fb19 	bl	8001a32 <HAL_NVIC_EnableIRQ>
}
 8001400:	bf00      	nop
 8001402:	3730      	adds	r7, #48	; 0x30
 8001404:	46bd      	mov	sp, r7
 8001406:	bd80      	pop	{r7, pc}
 8001408:	40012c00 	.word	0x40012c00
 800140c:	40021000 	.word	0x40021000
 8001410:	40010800 	.word	0x40010800
 8001414:	40000400 	.word	0x40000400
 8001418:	40000800 	.word	0x40000800

0800141c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800141c:	b580      	push	{r7, lr}
 800141e:	b088      	sub	sp, #32
 8001420:	af00      	add	r7, sp, #0
 8001422:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001424:	f107 0310 	add.w	r3, r7, #16
 8001428:	2200      	movs	r2, #0
 800142a:	601a      	str	r2, [r3, #0]
 800142c:	605a      	str	r2, [r3, #4]
 800142e:	609a      	str	r2, [r3, #8]
 8001430:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM1)
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	4a10      	ldr	r2, [pc, #64]	; (8001478 <HAL_TIM_MspPostInit+0x5c>)
 8001438:	4293      	cmp	r3, r2
 800143a:	d118      	bne.n	800146e <HAL_TIM_MspPostInit+0x52>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800143c:	4b0f      	ldr	r3, [pc, #60]	; (800147c <HAL_TIM_MspPostInit+0x60>)
 800143e:	699b      	ldr	r3, [r3, #24]
 8001440:	4a0e      	ldr	r2, [pc, #56]	; (800147c <HAL_TIM_MspPostInit+0x60>)
 8001442:	f043 0304 	orr.w	r3, r3, #4
 8001446:	6193      	str	r3, [r2, #24]
 8001448:	4b0c      	ldr	r3, [pc, #48]	; (800147c <HAL_TIM_MspPostInit+0x60>)
 800144a:	699b      	ldr	r3, [r3, #24]
 800144c:	f003 0304 	and.w	r3, r3, #4
 8001450:	60fb      	str	r3, [r7, #12]
 8001452:	68fb      	ldr	r3, [r7, #12]
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    PA11     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = OUTZ1_Pin|OUTZ2_Pin|OUTZ3_Pin|OUTZ4_Pin;
 8001454:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8001458:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800145a:	2302      	movs	r3, #2
 800145c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800145e:	2303      	movs	r3, #3
 8001460:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001462:	f107 0310 	add.w	r3, r7, #16
 8001466:	4619      	mov	r1, r3
 8001468:	4805      	ldr	r0, [pc, #20]	; (8001480 <HAL_TIM_MspPostInit+0x64>)
 800146a:	f000 fcfd 	bl	8001e68 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 800146e:	bf00      	nop
 8001470:	3720      	adds	r7, #32
 8001472:	46bd      	mov	sp, r7
 8001474:	bd80      	pop	{r7, pc}
 8001476:	bf00      	nop
 8001478:	40012c00 	.word	0x40012c00
 800147c:	40021000 	.word	0x40021000
 8001480:	40010800 	.word	0x40010800

08001484 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001484:	b580      	push	{r7, lr}
 8001486:	b08a      	sub	sp, #40	; 0x28
 8001488:	af00      	add	r7, sp, #0
 800148a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800148c:	f107 0314 	add.w	r3, r7, #20
 8001490:	2200      	movs	r2, #0
 8001492:	601a      	str	r2, [r3, #0]
 8001494:	605a      	str	r2, [r3, #4]
 8001496:	609a      	str	r2, [r3, #8]
 8001498:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	4a22      	ldr	r2, [pc, #136]	; (8001528 <HAL_UART_MspInit+0xa4>)
 80014a0:	4293      	cmp	r3, r2
 80014a2:	d13d      	bne.n	8001520 <HAL_UART_MspInit+0x9c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80014a4:	4b21      	ldr	r3, [pc, #132]	; (800152c <HAL_UART_MspInit+0xa8>)
 80014a6:	699b      	ldr	r3, [r3, #24]
 80014a8:	4a20      	ldr	r2, [pc, #128]	; (800152c <HAL_UART_MspInit+0xa8>)
 80014aa:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80014ae:	6193      	str	r3, [r2, #24]
 80014b0:	4b1e      	ldr	r3, [pc, #120]	; (800152c <HAL_UART_MspInit+0xa8>)
 80014b2:	699b      	ldr	r3, [r3, #24]
 80014b4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80014b8:	613b      	str	r3, [r7, #16]
 80014ba:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80014bc:	4b1b      	ldr	r3, [pc, #108]	; (800152c <HAL_UART_MspInit+0xa8>)
 80014be:	699b      	ldr	r3, [r3, #24]
 80014c0:	4a1a      	ldr	r2, [pc, #104]	; (800152c <HAL_UART_MspInit+0xa8>)
 80014c2:	f043 0308 	orr.w	r3, r3, #8
 80014c6:	6193      	str	r3, [r2, #24]
 80014c8:	4b18      	ldr	r3, [pc, #96]	; (800152c <HAL_UART_MspInit+0xa8>)
 80014ca:	699b      	ldr	r3, [r3, #24]
 80014cc:	f003 0308 	and.w	r3, r3, #8
 80014d0:	60fb      	str	r3, [r7, #12]
 80014d2:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80014d4:	2340      	movs	r3, #64	; 0x40
 80014d6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014d8:	2302      	movs	r3, #2
 80014da:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80014dc:	2303      	movs	r3, #3
 80014de:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014e0:	f107 0314 	add.w	r3, r7, #20
 80014e4:	4619      	mov	r1, r3
 80014e6:	4812      	ldr	r0, [pc, #72]	; (8001530 <HAL_UART_MspInit+0xac>)
 80014e8:	f000 fcbe 	bl	8001e68 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80014ec:	2380      	movs	r3, #128	; 0x80
 80014ee:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80014f0:	2300      	movs	r3, #0
 80014f2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014f4:	2300      	movs	r3, #0
 80014f6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014f8:	f107 0314 	add.w	r3, r7, #20
 80014fc:	4619      	mov	r1, r3
 80014fe:	480c      	ldr	r0, [pc, #48]	; (8001530 <HAL_UART_MspInit+0xac>)
 8001500:	f000 fcb2 	bl	8001e68 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_USART1_ENABLE();
 8001504:	4b0b      	ldr	r3, [pc, #44]	; (8001534 <HAL_UART_MspInit+0xb0>)
 8001506:	685b      	ldr	r3, [r3, #4]
 8001508:	627b      	str	r3, [r7, #36]	; 0x24
 800150a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800150c:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8001510:	627b      	str	r3, [r7, #36]	; 0x24
 8001512:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001514:	f043 0304 	orr.w	r3, r3, #4
 8001518:	627b      	str	r3, [r7, #36]	; 0x24
 800151a:	4a06      	ldr	r2, [pc, #24]	; (8001534 <HAL_UART_MspInit+0xb0>)
 800151c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800151e:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001520:	bf00      	nop
 8001522:	3728      	adds	r7, #40	; 0x28
 8001524:	46bd      	mov	sp, r7
 8001526:	bd80      	pop	{r7, pc}
 8001528:	40013800 	.word	0x40013800
 800152c:	40021000 	.word	0x40021000
 8001530:	40010c00 	.word	0x40010c00
 8001534:	40010000 	.word	0x40010000

08001538 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001538:	b480      	push	{r7}
 800153a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800153c:	e7fe      	b.n	800153c <NMI_Handler+0x4>

0800153e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800153e:	b480      	push	{r7}
 8001540:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001542:	e7fe      	b.n	8001542 <HardFault_Handler+0x4>

08001544 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001544:	b480      	push	{r7}
 8001546:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001548:	e7fe      	b.n	8001548 <MemManage_Handler+0x4>

0800154a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800154a:	b480      	push	{r7}
 800154c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800154e:	e7fe      	b.n	800154e <BusFault_Handler+0x4>

08001550 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001550:	b480      	push	{r7}
 8001552:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001554:	e7fe      	b.n	8001554 <UsageFault_Handler+0x4>

08001556 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001556:	b480      	push	{r7}
 8001558:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800155a:	bf00      	nop
 800155c:	46bd      	mov	sp, r7
 800155e:	bc80      	pop	{r7}
 8001560:	4770      	bx	lr

08001562 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001562:	b480      	push	{r7}
 8001564:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001566:	bf00      	nop
 8001568:	46bd      	mov	sp, r7
 800156a:	bc80      	pop	{r7}
 800156c:	4770      	bx	lr

0800156e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800156e:	b480      	push	{r7}
 8001570:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001572:	bf00      	nop
 8001574:	46bd      	mov	sp, r7
 8001576:	bc80      	pop	{r7}
 8001578:	4770      	bx	lr
	...

0800157c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800157c:	b580      	push	{r7, lr}
 800157e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	static uint16_t ticks = 0;
	ticks++;
 8001580:	4b09      	ldr	r3, [pc, #36]	; (80015a8 <SysTick_Handler+0x2c>)
 8001582:	881b      	ldrh	r3, [r3, #0]
 8001584:	3301      	adds	r3, #1
 8001586:	b29a      	uxth	r2, r3
 8001588:	4b07      	ldr	r3, [pc, #28]	; (80015a8 <SysTick_Handler+0x2c>)
 800158a:	801a      	strh	r2, [r3, #0]
	if(ticks >= 1000) {
 800158c:	4b06      	ldr	r3, [pc, #24]	; (80015a8 <SysTick_Handler+0x2c>)
 800158e:	881b      	ldrh	r3, [r3, #0]
 8001590:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001594:	d304      	bcc.n	80015a0 <SysTick_Handler+0x24>
		DHCP_time_handler();
 8001596:	f7fe ff95 	bl	80004c4 <DHCP_time_handler>
		ticks = 0;
 800159a:	4b03      	ldr	r3, [pc, #12]	; (80015a8 <SysTick_Handler+0x2c>)
 800159c:	2200      	movs	r2, #0
 800159e:	801a      	strh	r2, [r3, #0]
	}

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80015a0:	f000 f938 	bl	8001814 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80015a4:	bf00      	nop
 80015a6:	bd80      	pop	{r7, pc}
 80015a8:	20000158 	.word	0x20000158

080015ac <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80015ac:	b580      	push	{r7, lr}
 80015ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80015b0:	4802      	ldr	r0, [pc, #8]	; (80015bc <TIM2_IRQHandler+0x10>)
 80015b2:	f002 f838 	bl	8003626 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80015b6:	bf00      	nop
 80015b8:	bd80      	pop	{r7, pc}
 80015ba:	bf00      	nop
 80015bc:	20000488 	.word	0x20000488

080015c0 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80015c0:	b580      	push	{r7, lr}
 80015c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */
	//HAL_TIM_Base_Stop_IT(&htim3);
	runFlag = COUNT_FRONT;		// Сработал таймер сброса таймера захвата, начинаем измерение.
 80015c4:	4b08      	ldr	r3, [pc, #32]	; (80015e8 <TIM3_IRQHandler+0x28>)
 80015c6:	2228      	movs	r2, #40	; 0x28
 80015c8:	601a      	str	r2, [r3, #0]
	LED_PULSE
 80015ca:	2201      	movs	r2, #1
 80015cc:	2180      	movs	r1, #128	; 0x80
 80015ce:	4807      	ldr	r0, [pc, #28]	; (80015ec <TIM3_IRQHandler+0x2c>)
 80015d0:	f000 fdce 	bl	8002170 <HAL_GPIO_WritePin>
 80015d4:	2200      	movs	r2, #0
 80015d6:	2180      	movs	r1, #128	; 0x80
 80015d8:	4804      	ldr	r0, [pc, #16]	; (80015ec <TIM3_IRQHandler+0x2c>)
 80015da:	f000 fdc9 	bl	8002170 <HAL_GPIO_WritePin>
  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80015de:	4804      	ldr	r0, [pc, #16]	; (80015f0 <TIM3_IRQHandler+0x30>)
 80015e0:	f002 f821 	bl	8003626 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80015e4:	bf00      	nop
 80015e6:	bd80      	pop	{r7, pc}
 80015e8:	200001a8 	.word	0x200001a8
 80015ec:	40010800 	.word	0x40010800
 80015f0:	200003b0 	.word	0x200003b0

080015f4 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80015f4:	b580      	push	{r7, lr}
 80015f6:	af00      	add	r7, sp, #0
	* 3 - Z4 >> Z2
	*/

	//captureStart = 0;
	//runFlag = COUNT_FRONT;
	front_sum = 0;
 80015f8:	4b28      	ldr	r3, [pc, #160]	; (800169c <TIM4_IRQHandler+0xa8>)
 80015fa:	2200      	movs	r2, #0
 80015fc:	801a      	strh	r2, [r3, #0]
	runFlag = 0;
 80015fe:	4b28      	ldr	r3, [pc, #160]	; (80016a0 <TIM4_IRQHandler+0xac>)
 8001600:	2200      	movs	r2, #0
 8001602:	601a      	str	r2, [r3, #0]
	#ifdef SYSTICK_DISABLE
	  SysTick->CTRL &= ~SysTick_CTRL_ENABLE_Msk;  // Выключение SysTick
 8001604:	4b27      	ldr	r3, [pc, #156]	; (80016a4 <TIM4_IRQHandler+0xb0>)
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	4a26      	ldr	r2, [pc, #152]	; (80016a4 <TIM4_IRQHandler+0xb0>)
 800160a:	f023 0301 	bic.w	r3, r3, #1
 800160e:	6013      	str	r3, [r2, #0]
	#endif
	HAL_TIM_OC_Stop(&htim1, TIM_CHANNEL_1);
 8001610:	2100      	movs	r1, #0
 8001612:	4825      	ldr	r0, [pc, #148]	; (80016a8 <TIM4_IRQHandler+0xb4>)
 8001614:	f001 fd44 	bl	80030a0 <HAL_TIM_OC_Stop>
	HAL_TIM_OC_Stop(&htim1, TIM_CHANNEL_2);
 8001618:	2104      	movs	r1, #4
 800161a:	4823      	ldr	r0, [pc, #140]	; (80016a8 <TIM4_IRQHandler+0xb4>)
 800161c:	f001 fd40 	bl	80030a0 <HAL_TIM_OC_Stop>
	HAL_TIM_OC_Stop(&htim1, TIM_CHANNEL_3);
 8001620:	2108      	movs	r1, #8
 8001622:	4821      	ldr	r0, [pc, #132]	; (80016a8 <TIM4_IRQHandler+0xb4>)
 8001624:	f001 fd3c 	bl	80030a0 <HAL_TIM_OC_Stop>
	HAL_TIM_OC_Stop(&htim1, TIM_CHANNEL_4);
 8001628:	210c      	movs	r1, #12
 800162a:	481f      	ldr	r0, [pc, #124]	; (80016a8 <TIM4_IRQHandler+0xb4>)
 800162c:	f001 fd38 	bl	80030a0 <HAL_TIM_OC_Stop>

	/* Отключим все мультиплексоры */
	receiversOff
 8001630:	4b1e      	ldr	r3, [pc, #120]	; (80016ac <TIM4_IRQHandler+0xb8>)
 8001632:	68db      	ldr	r3, [r3, #12]
 8001634:	4a1d      	ldr	r2, [pc, #116]	; (80016ac <TIM4_IRQHandler+0xb8>)
 8001636:	f043 031e 	orr.w	r3, r3, #30
 800163a:	60d3      	str	r3, [r2, #12]
	/* Set all timer channels for output mode */
	GPIOA->CRH = (GPIOA->CRH & ~(GPIO_CRH_CNF8_0 | GPIO_CRH_CNF9_0 | GPIO_CRH_CNF10_0 | GPIO_CRH_CNF11_0))
 800163c:	4b1c      	ldr	r3, [pc, #112]	; (80016b0 <TIM4_IRQHandler+0xbc>)
 800163e:	685b      	ldr	r3, [r3, #4]
			| (GPIO_CRH_CNF8_1 | GPIO_CRH_MODE8_1 | GPIO_CRH_CNF9_1 | GPIO_CRH_MODE9_1 | GPIO_CRH_CNF10_1 | GPIO_CRH_MODE10_1 | GPIO_CRH_CNF11_1 | GPIO_CRH_MODE11_1);
 8001640:	f423 436e 	bic.w	r3, r3, #60928	; 0xee00
 8001644:	f023 03ee 	bic.w	r3, r3, #238	; 0xee
	GPIOA->CRH = (GPIOA->CRH & ~(GPIO_CRH_CNF8_0 | GPIO_CRH_CNF9_0 | GPIO_CRH_CNF10_0 | GPIO_CRH_CNF11_0))
 8001648:	4a19      	ldr	r2, [pc, #100]	; (80016b0 <TIM4_IRQHandler+0xbc>)
			| (GPIO_CRH_CNF8_1 | GPIO_CRH_MODE8_1 | GPIO_CRH_CNF9_1 | GPIO_CRH_MODE9_1 | GPIO_CRH_CNF10_1 | GPIO_CRH_MODE10_1 | GPIO_CRH_CNF11_1 | GPIO_CRH_MODE11_1);
 800164a:	f443 432a 	orr.w	r3, r3, #43520	; 0xaa00
 800164e:	f043 03aa 	orr.w	r3, r3, #170	; 0xaa
	GPIOA->CRH = (GPIOA->CRH & ~(GPIO_CRH_CNF8_0 | GPIO_CRH_CNF9_0 | GPIO_CRH_CNF10_0 | GPIO_CRH_CNF11_0))
 8001652:	6053      	str	r3, [r2, #4]

	TIM3->ARR = C_13; 		// Коррекция для таймера запуска измерения Z13
 8001654:	4b17      	ldr	r3, [pc, #92]	; (80016b4 <TIM4_IRQHandler+0xc0>)
 8001656:	881a      	ldrh	r2, [r3, #0]
 8001658:	4b17      	ldr	r3, [pc, #92]	; (80016b8 <TIM4_IRQHandler+0xc4>)
 800165a:	62da      	str	r2, [r3, #44]	; 0x2c
	setZ3receive
 800165c:	4b13      	ldr	r3, [pc, #76]	; (80016ac <TIM4_IRQHandler+0xb8>)
 800165e:	68db      	ldr	r3, [r3, #12]
 8001660:	4a12      	ldr	r2, [pc, #72]	; (80016ac <TIM4_IRQHandler+0xb8>)
 8001662:	f023 0308 	bic.w	r3, r3, #8
 8001666:	60d3      	str	r3, [r2, #12]
 8001668:	4b11      	ldr	r3, [pc, #68]	; (80016b0 <TIM4_IRQHandler+0xbc>)
 800166a:	685b      	ldr	r3, [r3, #4]
 800166c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001670:	4a0f      	ldr	r2, [pc, #60]	; (80016b0 <TIM4_IRQHandler+0xbc>)
 8001672:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001676:	6053      	str	r3, [r2, #4]
	HAL_TIM_OC_Start(&htim1, TIM_CHANNEL_1);
 8001678:	2100      	movs	r1, #0
 800167a:	480b      	ldr	r0, [pc, #44]	; (80016a8 <TIM4_IRQHandler+0xb4>)
 800167c:	f001 fc6e 	bl	8002f5c <HAL_TIM_OC_Start>

	START_CAPTURE
 8001680:	2100      	movs	r1, #0
 8001682:	480e      	ldr	r0, [pc, #56]	; (80016bc <TIM4_IRQHandler+0xc8>)
 8001684:	f001 fdc8 	bl	8003218 <HAL_TIM_IC_Start_IT>
 8001688:	2104      	movs	r1, #4
 800168a:	480c      	ldr	r0, [pc, #48]	; (80016bc <TIM4_IRQHandler+0xc8>)
 800168c:	f001 fdc4 	bl	8003218 <HAL_TIM_IC_Start_IT>
  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001690:	480b      	ldr	r0, [pc, #44]	; (80016c0 <TIM4_IRQHandler+0xcc>)
 8001692:	f001 ffc8 	bl	8003626 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8001696:	bf00      	nop
 8001698:	bd80      	pop	{r7, pc}
 800169a:	bf00      	nop
 800169c:	200001a0 	.word	0x200001a0
 80016a0:	200001a8 	.word	0x200001a8
 80016a4:	e000e010 	.word	0xe000e010
 80016a8:	20000440 	.word	0x20000440
 80016ac:	40010c00 	.word	0x40010c00
 80016b0:	40010800 	.word	0x40010800
 80016b4:	200001ae 	.word	0x200001ae
 80016b8:	40000400 	.word	0x40000400
 80016bc:	20000488 	.word	0x20000488
 80016c0:	2000030c 	.word	0x2000030c

080016c4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80016c4:	b580      	push	{r7, lr}
 80016c6:	b086      	sub	sp, #24
 80016c8:	af00      	add	r7, sp, #0
 80016ca:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80016cc:	4a14      	ldr	r2, [pc, #80]	; (8001720 <_sbrk+0x5c>)
 80016ce:	4b15      	ldr	r3, [pc, #84]	; (8001724 <_sbrk+0x60>)
 80016d0:	1ad3      	subs	r3, r2, r3
 80016d2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80016d4:	697b      	ldr	r3, [r7, #20]
 80016d6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80016d8:	4b13      	ldr	r3, [pc, #76]	; (8001728 <_sbrk+0x64>)
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d102      	bne.n	80016e6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80016e0:	4b11      	ldr	r3, [pc, #68]	; (8001728 <_sbrk+0x64>)
 80016e2:	4a12      	ldr	r2, [pc, #72]	; (800172c <_sbrk+0x68>)
 80016e4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80016e6:	4b10      	ldr	r3, [pc, #64]	; (8001728 <_sbrk+0x64>)
 80016e8:	681a      	ldr	r2, [r3, #0]
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	4413      	add	r3, r2
 80016ee:	693a      	ldr	r2, [r7, #16]
 80016f0:	429a      	cmp	r2, r3
 80016f2:	d207      	bcs.n	8001704 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80016f4:	f003 f9b2 	bl	8004a5c <__errno>
 80016f8:	4603      	mov	r3, r0
 80016fa:	220c      	movs	r2, #12
 80016fc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80016fe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001702:	e009      	b.n	8001718 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001704:	4b08      	ldr	r3, [pc, #32]	; (8001728 <_sbrk+0x64>)
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800170a:	4b07      	ldr	r3, [pc, #28]	; (8001728 <_sbrk+0x64>)
 800170c:	681a      	ldr	r2, [r3, #0]
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	4413      	add	r3, r2
 8001712:	4a05      	ldr	r2, [pc, #20]	; (8001728 <_sbrk+0x64>)
 8001714:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001716:	68fb      	ldr	r3, [r7, #12]
}
 8001718:	4618      	mov	r0, r3
 800171a:	3718      	adds	r7, #24
 800171c:	46bd      	mov	sp, r7
 800171e:	bd80      	pop	{r7, pc}
 8001720:	20005000 	.word	0x20005000
 8001724:	00000400 	.word	0x00000400
 8001728:	2000015c 	.word	0x2000015c
 800172c:	20000510 	.word	0x20000510

08001730 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001730:	b480      	push	{r7}
 8001732:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001734:	bf00      	nop
 8001736:	46bd      	mov	sp, r7
 8001738:	bc80      	pop	{r7}
 800173a:	4770      	bx	lr

0800173c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800173c:	480c      	ldr	r0, [pc, #48]	; (8001770 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800173e:	490d      	ldr	r1, [pc, #52]	; (8001774 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001740:	4a0d      	ldr	r2, [pc, #52]	; (8001778 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001742:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001744:	e002      	b.n	800174c <LoopCopyDataInit>

08001746 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001746:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001748:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800174a:	3304      	adds	r3, #4

0800174c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800174c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800174e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001750:	d3f9      	bcc.n	8001746 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001752:	4a0a      	ldr	r2, [pc, #40]	; (800177c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001754:	4c0a      	ldr	r4, [pc, #40]	; (8001780 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001756:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001758:	e001      	b.n	800175e <LoopFillZerobss>

0800175a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800175a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800175c:	3204      	adds	r2, #4

0800175e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800175e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001760:	d3fb      	bcc.n	800175a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001762:	f7ff ffe5 	bl	8001730 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001766:	f003 f97f 	bl	8004a68 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800176a:	f7ff f84b 	bl	8000804 <main>
  bx lr
 800176e:	4770      	bx	lr
  ldr r0, =_sdata
 8001770:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001774:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8001778:	0800543c 	.word	0x0800543c
  ldr r2, =_sbss
 800177c:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8001780:	20000510 	.word	0x20000510

08001784 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001784:	e7fe      	b.n	8001784 <ADC1_2_IRQHandler>
	...

08001788 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001788:	b580      	push	{r7, lr}
 800178a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800178c:	4b08      	ldr	r3, [pc, #32]	; (80017b0 <HAL_Init+0x28>)
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	4a07      	ldr	r2, [pc, #28]	; (80017b0 <HAL_Init+0x28>)
 8001792:	f043 0310 	orr.w	r3, r3, #16
 8001796:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001798:	2003      	movs	r0, #3
 800179a:	f000 f923 	bl	80019e4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800179e:	2000      	movs	r0, #0
 80017a0:	f000 f808 	bl	80017b4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80017a4:	f7ff fcdc 	bl	8001160 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80017a8:	2300      	movs	r3, #0
}
 80017aa:	4618      	mov	r0, r3
 80017ac:	bd80      	pop	{r7, pc}
 80017ae:	bf00      	nop
 80017b0:	40022000 	.word	0x40022000

080017b4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80017b4:	b580      	push	{r7, lr}
 80017b6:	b082      	sub	sp, #8
 80017b8:	af00      	add	r7, sp, #0
 80017ba:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80017bc:	4b12      	ldr	r3, [pc, #72]	; (8001808 <HAL_InitTick+0x54>)
 80017be:	681a      	ldr	r2, [r3, #0]
 80017c0:	4b12      	ldr	r3, [pc, #72]	; (800180c <HAL_InitTick+0x58>)
 80017c2:	781b      	ldrb	r3, [r3, #0]
 80017c4:	4619      	mov	r1, r3
 80017c6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80017ca:	fbb3 f3f1 	udiv	r3, r3, r1
 80017ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80017d2:	4618      	mov	r0, r3
 80017d4:	f000 f93b 	bl	8001a4e <HAL_SYSTICK_Config>
 80017d8:	4603      	mov	r3, r0
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d001      	beq.n	80017e2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80017de:	2301      	movs	r3, #1
 80017e0:	e00e      	b.n	8001800 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	2b0f      	cmp	r3, #15
 80017e6:	d80a      	bhi.n	80017fe <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80017e8:	2200      	movs	r2, #0
 80017ea:	6879      	ldr	r1, [r7, #4]
 80017ec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80017f0:	f000 f903 	bl	80019fa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80017f4:	4a06      	ldr	r2, [pc, #24]	; (8001810 <HAL_InitTick+0x5c>)
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80017fa:	2300      	movs	r3, #0
 80017fc:	e000      	b.n	8001800 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80017fe:	2301      	movs	r3, #1
}
 8001800:	4618      	mov	r0, r3
 8001802:	3708      	adds	r7, #8
 8001804:	46bd      	mov	sp, r7
 8001806:	bd80      	pop	{r7, pc}
 8001808:	20000000 	.word	0x20000000
 800180c:	20000008 	.word	0x20000008
 8001810:	20000004 	.word	0x20000004

08001814 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001814:	b480      	push	{r7}
 8001816:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001818:	4b05      	ldr	r3, [pc, #20]	; (8001830 <HAL_IncTick+0x1c>)
 800181a:	781b      	ldrb	r3, [r3, #0]
 800181c:	461a      	mov	r2, r3
 800181e:	4b05      	ldr	r3, [pc, #20]	; (8001834 <HAL_IncTick+0x20>)
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	4413      	add	r3, r2
 8001824:	4a03      	ldr	r2, [pc, #12]	; (8001834 <HAL_IncTick+0x20>)
 8001826:	6013      	str	r3, [r2, #0]
}
 8001828:	bf00      	nop
 800182a:	46bd      	mov	sp, r7
 800182c:	bc80      	pop	{r7}
 800182e:	4770      	bx	lr
 8001830:	20000008 	.word	0x20000008
 8001834:	200004d8 	.word	0x200004d8

08001838 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001838:	b480      	push	{r7}
 800183a:	af00      	add	r7, sp, #0
  return uwTick;
 800183c:	4b02      	ldr	r3, [pc, #8]	; (8001848 <HAL_GetTick+0x10>)
 800183e:	681b      	ldr	r3, [r3, #0]
}
 8001840:	4618      	mov	r0, r3
 8001842:	46bd      	mov	sp, r7
 8001844:	bc80      	pop	{r7}
 8001846:	4770      	bx	lr
 8001848:	200004d8 	.word	0x200004d8

0800184c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800184c:	b480      	push	{r7}
 800184e:	b085      	sub	sp, #20
 8001850:	af00      	add	r7, sp, #0
 8001852:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	f003 0307 	and.w	r3, r3, #7
 800185a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800185c:	4b0c      	ldr	r3, [pc, #48]	; (8001890 <__NVIC_SetPriorityGrouping+0x44>)
 800185e:	68db      	ldr	r3, [r3, #12]
 8001860:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001862:	68ba      	ldr	r2, [r7, #8]
 8001864:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001868:	4013      	ands	r3, r2
 800186a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800186c:	68fb      	ldr	r3, [r7, #12]
 800186e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001870:	68bb      	ldr	r3, [r7, #8]
 8001872:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001874:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001878:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800187c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800187e:	4a04      	ldr	r2, [pc, #16]	; (8001890 <__NVIC_SetPriorityGrouping+0x44>)
 8001880:	68bb      	ldr	r3, [r7, #8]
 8001882:	60d3      	str	r3, [r2, #12]
}
 8001884:	bf00      	nop
 8001886:	3714      	adds	r7, #20
 8001888:	46bd      	mov	sp, r7
 800188a:	bc80      	pop	{r7}
 800188c:	4770      	bx	lr
 800188e:	bf00      	nop
 8001890:	e000ed00 	.word	0xe000ed00

08001894 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001894:	b480      	push	{r7}
 8001896:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001898:	4b04      	ldr	r3, [pc, #16]	; (80018ac <__NVIC_GetPriorityGrouping+0x18>)
 800189a:	68db      	ldr	r3, [r3, #12]
 800189c:	0a1b      	lsrs	r3, r3, #8
 800189e:	f003 0307 	and.w	r3, r3, #7
}
 80018a2:	4618      	mov	r0, r3
 80018a4:	46bd      	mov	sp, r7
 80018a6:	bc80      	pop	{r7}
 80018a8:	4770      	bx	lr
 80018aa:	bf00      	nop
 80018ac:	e000ed00 	.word	0xe000ed00

080018b0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80018b0:	b480      	push	{r7}
 80018b2:	b083      	sub	sp, #12
 80018b4:	af00      	add	r7, sp, #0
 80018b6:	4603      	mov	r3, r0
 80018b8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80018ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018be:	2b00      	cmp	r3, #0
 80018c0:	db0b      	blt.n	80018da <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80018c2:	79fb      	ldrb	r3, [r7, #7]
 80018c4:	f003 021f 	and.w	r2, r3, #31
 80018c8:	4906      	ldr	r1, [pc, #24]	; (80018e4 <__NVIC_EnableIRQ+0x34>)
 80018ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018ce:	095b      	lsrs	r3, r3, #5
 80018d0:	2001      	movs	r0, #1
 80018d2:	fa00 f202 	lsl.w	r2, r0, r2
 80018d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80018da:	bf00      	nop
 80018dc:	370c      	adds	r7, #12
 80018de:	46bd      	mov	sp, r7
 80018e0:	bc80      	pop	{r7}
 80018e2:	4770      	bx	lr
 80018e4:	e000e100 	.word	0xe000e100

080018e8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80018e8:	b480      	push	{r7}
 80018ea:	b083      	sub	sp, #12
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	4603      	mov	r3, r0
 80018f0:	6039      	str	r1, [r7, #0]
 80018f2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80018f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	db0a      	blt.n	8001912 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018fc:	683b      	ldr	r3, [r7, #0]
 80018fe:	b2da      	uxtb	r2, r3
 8001900:	490c      	ldr	r1, [pc, #48]	; (8001934 <__NVIC_SetPriority+0x4c>)
 8001902:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001906:	0112      	lsls	r2, r2, #4
 8001908:	b2d2      	uxtb	r2, r2
 800190a:	440b      	add	r3, r1
 800190c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001910:	e00a      	b.n	8001928 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001912:	683b      	ldr	r3, [r7, #0]
 8001914:	b2da      	uxtb	r2, r3
 8001916:	4908      	ldr	r1, [pc, #32]	; (8001938 <__NVIC_SetPriority+0x50>)
 8001918:	79fb      	ldrb	r3, [r7, #7]
 800191a:	f003 030f 	and.w	r3, r3, #15
 800191e:	3b04      	subs	r3, #4
 8001920:	0112      	lsls	r2, r2, #4
 8001922:	b2d2      	uxtb	r2, r2
 8001924:	440b      	add	r3, r1
 8001926:	761a      	strb	r2, [r3, #24]
}
 8001928:	bf00      	nop
 800192a:	370c      	adds	r7, #12
 800192c:	46bd      	mov	sp, r7
 800192e:	bc80      	pop	{r7}
 8001930:	4770      	bx	lr
 8001932:	bf00      	nop
 8001934:	e000e100 	.word	0xe000e100
 8001938:	e000ed00 	.word	0xe000ed00

0800193c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800193c:	b480      	push	{r7}
 800193e:	b089      	sub	sp, #36	; 0x24
 8001940:	af00      	add	r7, sp, #0
 8001942:	60f8      	str	r0, [r7, #12]
 8001944:	60b9      	str	r1, [r7, #8]
 8001946:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001948:	68fb      	ldr	r3, [r7, #12]
 800194a:	f003 0307 	and.w	r3, r3, #7
 800194e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001950:	69fb      	ldr	r3, [r7, #28]
 8001952:	f1c3 0307 	rsb	r3, r3, #7
 8001956:	2b04      	cmp	r3, #4
 8001958:	bf28      	it	cs
 800195a:	2304      	movcs	r3, #4
 800195c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800195e:	69fb      	ldr	r3, [r7, #28]
 8001960:	3304      	adds	r3, #4
 8001962:	2b06      	cmp	r3, #6
 8001964:	d902      	bls.n	800196c <NVIC_EncodePriority+0x30>
 8001966:	69fb      	ldr	r3, [r7, #28]
 8001968:	3b03      	subs	r3, #3
 800196a:	e000      	b.n	800196e <NVIC_EncodePriority+0x32>
 800196c:	2300      	movs	r3, #0
 800196e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001970:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001974:	69bb      	ldr	r3, [r7, #24]
 8001976:	fa02 f303 	lsl.w	r3, r2, r3
 800197a:	43da      	mvns	r2, r3
 800197c:	68bb      	ldr	r3, [r7, #8]
 800197e:	401a      	ands	r2, r3
 8001980:	697b      	ldr	r3, [r7, #20]
 8001982:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001984:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001988:	697b      	ldr	r3, [r7, #20]
 800198a:	fa01 f303 	lsl.w	r3, r1, r3
 800198e:	43d9      	mvns	r1, r3
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001994:	4313      	orrs	r3, r2
         );
}
 8001996:	4618      	mov	r0, r3
 8001998:	3724      	adds	r7, #36	; 0x24
 800199a:	46bd      	mov	sp, r7
 800199c:	bc80      	pop	{r7}
 800199e:	4770      	bx	lr

080019a0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80019a0:	b580      	push	{r7, lr}
 80019a2:	b082      	sub	sp, #8
 80019a4:	af00      	add	r7, sp, #0
 80019a6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	3b01      	subs	r3, #1
 80019ac:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80019b0:	d301      	bcc.n	80019b6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80019b2:	2301      	movs	r3, #1
 80019b4:	e00f      	b.n	80019d6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80019b6:	4a0a      	ldr	r2, [pc, #40]	; (80019e0 <SysTick_Config+0x40>)
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	3b01      	subs	r3, #1
 80019bc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80019be:	210f      	movs	r1, #15
 80019c0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80019c4:	f7ff ff90 	bl	80018e8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80019c8:	4b05      	ldr	r3, [pc, #20]	; (80019e0 <SysTick_Config+0x40>)
 80019ca:	2200      	movs	r2, #0
 80019cc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80019ce:	4b04      	ldr	r3, [pc, #16]	; (80019e0 <SysTick_Config+0x40>)
 80019d0:	2207      	movs	r2, #7
 80019d2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80019d4:	2300      	movs	r3, #0
}
 80019d6:	4618      	mov	r0, r3
 80019d8:	3708      	adds	r7, #8
 80019da:	46bd      	mov	sp, r7
 80019dc:	bd80      	pop	{r7, pc}
 80019de:	bf00      	nop
 80019e0:	e000e010 	.word	0xe000e010

080019e4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019e4:	b580      	push	{r7, lr}
 80019e6:	b082      	sub	sp, #8
 80019e8:	af00      	add	r7, sp, #0
 80019ea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80019ec:	6878      	ldr	r0, [r7, #4]
 80019ee:	f7ff ff2d 	bl	800184c <__NVIC_SetPriorityGrouping>
}
 80019f2:	bf00      	nop
 80019f4:	3708      	adds	r7, #8
 80019f6:	46bd      	mov	sp, r7
 80019f8:	bd80      	pop	{r7, pc}

080019fa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80019fa:	b580      	push	{r7, lr}
 80019fc:	b086      	sub	sp, #24
 80019fe:	af00      	add	r7, sp, #0
 8001a00:	4603      	mov	r3, r0
 8001a02:	60b9      	str	r1, [r7, #8]
 8001a04:	607a      	str	r2, [r7, #4]
 8001a06:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001a08:	2300      	movs	r3, #0
 8001a0a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001a0c:	f7ff ff42 	bl	8001894 <__NVIC_GetPriorityGrouping>
 8001a10:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001a12:	687a      	ldr	r2, [r7, #4]
 8001a14:	68b9      	ldr	r1, [r7, #8]
 8001a16:	6978      	ldr	r0, [r7, #20]
 8001a18:	f7ff ff90 	bl	800193c <NVIC_EncodePriority>
 8001a1c:	4602      	mov	r2, r0
 8001a1e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a22:	4611      	mov	r1, r2
 8001a24:	4618      	mov	r0, r3
 8001a26:	f7ff ff5f 	bl	80018e8 <__NVIC_SetPriority>
}
 8001a2a:	bf00      	nop
 8001a2c:	3718      	adds	r7, #24
 8001a2e:	46bd      	mov	sp, r7
 8001a30:	bd80      	pop	{r7, pc}

08001a32 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a32:	b580      	push	{r7, lr}
 8001a34:	b082      	sub	sp, #8
 8001a36:	af00      	add	r7, sp, #0
 8001a38:	4603      	mov	r3, r0
 8001a3a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001a3c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a40:	4618      	mov	r0, r3
 8001a42:	f7ff ff35 	bl	80018b0 <__NVIC_EnableIRQ>
}
 8001a46:	bf00      	nop
 8001a48:	3708      	adds	r7, #8
 8001a4a:	46bd      	mov	sp, r7
 8001a4c:	bd80      	pop	{r7, pc}

08001a4e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001a4e:	b580      	push	{r7, lr}
 8001a50:	b082      	sub	sp, #8
 8001a52:	af00      	add	r7, sp, #0
 8001a54:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001a56:	6878      	ldr	r0, [r7, #4]
 8001a58:	f7ff ffa2 	bl	80019a0 <SysTick_Config>
 8001a5c:	4603      	mov	r3, r0
}
 8001a5e:	4618      	mov	r0, r3
 8001a60:	3708      	adds	r7, #8
 8001a62:	46bd      	mov	sp, r7
 8001a64:	bd80      	pop	{r7, pc}
	...

08001a68 <HAL_FLASH_Program>:
  * @param  Data:         Specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8001a68:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001a6a:	b087      	sub	sp, #28
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	60f8      	str	r0, [r7, #12]
 8001a70:	60b9      	str	r1, [r7, #8]
 8001a72:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 8001a76:	2301      	movs	r3, #1
 8001a78:	75fb      	strb	r3, [r7, #23]
  uint8_t index = 0;
 8001a7a:	2300      	movs	r3, #0
 8001a7c:	75bb      	strb	r3, [r7, #22]
  uint8_t nbiterations = 0;
 8001a7e:	2300      	movs	r3, #0
 8001a80:	757b      	strb	r3, [r7, #21]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8001a82:	4b2f      	ldr	r3, [pc, #188]	; (8001b40 <HAL_FLASH_Program+0xd8>)
 8001a84:	7e1b      	ldrb	r3, [r3, #24]
 8001a86:	2b01      	cmp	r3, #1
 8001a88:	d101      	bne.n	8001a8e <HAL_FLASH_Program+0x26>
 8001a8a:	2302      	movs	r3, #2
 8001a8c:	e054      	b.n	8001b38 <HAL_FLASH_Program+0xd0>
 8001a8e:	4b2c      	ldr	r3, [pc, #176]	; (8001b40 <HAL_FLASH_Program+0xd8>)
 8001a90:	2201      	movs	r2, #1
 8001a92:	761a      	strb	r2, [r3, #24]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8001a94:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001a98:	f000 f8a8 	bl	8001bec <FLASH_WaitForLastOperation>
 8001a9c:	4603      	mov	r3, r0
 8001a9e:	75fb      	strb	r3, [r7, #23]
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperationBank2(FLASH_TIMEOUT_VALUE);
  }
#endif /* FLASH_BANK2_END */
  
  if(status == HAL_OK)
 8001aa0:	7dfb      	ldrb	r3, [r7, #23]
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d144      	bne.n	8001b30 <HAL_FLASH_Program+0xc8>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8001aa6:	68fb      	ldr	r3, [r7, #12]
 8001aa8:	2b01      	cmp	r3, #1
 8001aaa:	d102      	bne.n	8001ab2 <HAL_FLASH_Program+0x4a>
    {
      /* Program halfword (16-bit) at a specified address. */
      nbiterations = 1U;
 8001aac:	2301      	movs	r3, #1
 8001aae:	757b      	strb	r3, [r7, #21]
 8001ab0:	e007      	b.n	8001ac2 <HAL_FLASH_Program+0x5a>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8001ab2:	68fb      	ldr	r3, [r7, #12]
 8001ab4:	2b02      	cmp	r3, #2
 8001ab6:	d102      	bne.n	8001abe <HAL_FLASH_Program+0x56>
    {
      /* Program word (32-bit = 2*16-bit) at a specified address. */
      nbiterations = 2U;
 8001ab8:	2302      	movs	r3, #2
 8001aba:	757b      	strb	r3, [r7, #21]
 8001abc:	e001      	b.n	8001ac2 <HAL_FLASH_Program+0x5a>
    }
    else
    {
      /* Program double word (64-bit = 4*16-bit) at a specified address. */
      nbiterations = 4U;
 8001abe:	2304      	movs	r3, #4
 8001ac0:	757b      	strb	r3, [r7, #21]
    }

    for (index = 0U; index < nbiterations; index++)
 8001ac2:	2300      	movs	r3, #0
 8001ac4:	75bb      	strb	r3, [r7, #22]
 8001ac6:	e02d      	b.n	8001b24 <HAL_FLASH_Program+0xbc>
    {
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 8001ac8:	7dbb      	ldrb	r3, [r7, #22]
 8001aca:	005a      	lsls	r2, r3, #1
 8001acc:	68bb      	ldr	r3, [r7, #8]
 8001ace:	eb02 0c03 	add.w	ip, r2, r3
 8001ad2:	7dbb      	ldrb	r3, [r7, #22]
 8001ad4:	0119      	lsls	r1, r3, #4
 8001ad6:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001ada:	f1c1 0620 	rsb	r6, r1, #32
 8001ade:	f1a1 0020 	sub.w	r0, r1, #32
 8001ae2:	fa22 f401 	lsr.w	r4, r2, r1
 8001ae6:	fa03 f606 	lsl.w	r6, r3, r6
 8001aea:	4334      	orrs	r4, r6
 8001aec:	fa23 f000 	lsr.w	r0, r3, r0
 8001af0:	4304      	orrs	r4, r0
 8001af2:	fa23 f501 	lsr.w	r5, r3, r1
 8001af6:	b2a3      	uxth	r3, r4
 8001af8:	4619      	mov	r1, r3
 8001afa:	4660      	mov	r0, ip
 8001afc:	f000 f85a 	bl	8001bb4 <FLASH_Program_HalfWord>
#if defined(FLASH_BANK2_END)
      if(Address <= FLASH_BANK1_END)
      {
#endif /* FLASH_BANK2_END */
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8001b00:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001b04:	f000 f872 	bl	8001bec <FLASH_WaitForLastOperation>
 8001b08:	4603      	mov	r3, r0
 8001b0a:	75fb      	strb	r3, [r7, #23]
    
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 8001b0c:	4b0d      	ldr	r3, [pc, #52]	; (8001b44 <HAL_FLASH_Program+0xdc>)
 8001b0e:	691b      	ldr	r3, [r3, #16]
 8001b10:	4a0c      	ldr	r2, [pc, #48]	; (8001b44 <HAL_FLASH_Program+0xdc>)
 8001b12:	f023 0301 	bic.w	r3, r3, #1
 8001b16:	6113      	str	r3, [r2, #16]
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR2, FLASH_CR2_PG);
      }
#endif /* FLASH_BANK2_END */
      /* In case of error, stop programation procedure */
      if (status != HAL_OK)
 8001b18:	7dfb      	ldrb	r3, [r7, #23]
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d107      	bne.n	8001b2e <HAL_FLASH_Program+0xc6>
    for (index = 0U; index < nbiterations; index++)
 8001b1e:	7dbb      	ldrb	r3, [r7, #22]
 8001b20:	3301      	adds	r3, #1
 8001b22:	75bb      	strb	r3, [r7, #22]
 8001b24:	7dba      	ldrb	r2, [r7, #22]
 8001b26:	7d7b      	ldrb	r3, [r7, #21]
 8001b28:	429a      	cmp	r2, r3
 8001b2a:	d3cd      	bcc.n	8001ac8 <HAL_FLASH_Program+0x60>
 8001b2c:	e000      	b.n	8001b30 <HAL_FLASH_Program+0xc8>
      {
        break;
 8001b2e:	bf00      	nop
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8001b30:	4b03      	ldr	r3, [pc, #12]	; (8001b40 <HAL_FLASH_Program+0xd8>)
 8001b32:	2200      	movs	r2, #0
 8001b34:	761a      	strb	r2, [r3, #24]

  return status;
 8001b36:	7dfb      	ldrb	r3, [r7, #23]
}
 8001b38:	4618      	mov	r0, r3
 8001b3a:	371c      	adds	r7, #28
 8001b3c:	46bd      	mov	sp, r7
 8001b3e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001b40:	200004e0 	.word	0x200004e0
 8001b44:	40022000 	.word	0x40022000

08001b48 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8001b48:	b480      	push	{r7}
 8001b4a:	b083      	sub	sp, #12
 8001b4c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8001b4e:	2300      	movs	r3, #0
 8001b50:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8001b52:	4b0d      	ldr	r3, [pc, #52]	; (8001b88 <HAL_FLASH_Unlock+0x40>)
 8001b54:	691b      	ldr	r3, [r3, #16]
 8001b56:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d00d      	beq.n	8001b7a <HAL_FLASH_Unlock+0x32>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8001b5e:	4b0a      	ldr	r3, [pc, #40]	; (8001b88 <HAL_FLASH_Unlock+0x40>)
 8001b60:	4a0a      	ldr	r2, [pc, #40]	; (8001b8c <HAL_FLASH_Unlock+0x44>)
 8001b62:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8001b64:	4b08      	ldr	r3, [pc, #32]	; (8001b88 <HAL_FLASH_Unlock+0x40>)
 8001b66:	4a0a      	ldr	r2, [pc, #40]	; (8001b90 <HAL_FLASH_Unlock+0x48>)
 8001b68:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8001b6a:	4b07      	ldr	r3, [pc, #28]	; (8001b88 <HAL_FLASH_Unlock+0x40>)
 8001b6c:	691b      	ldr	r3, [r3, #16]
 8001b6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d001      	beq.n	8001b7a <HAL_FLASH_Unlock+0x32>
    {
      status = HAL_ERROR;
 8001b76:	2301      	movs	r3, #1
 8001b78:	71fb      	strb	r3, [r7, #7]
      status = HAL_ERROR;
    }
  }
#endif /* FLASH_BANK2_END */

  return status;
 8001b7a:	79fb      	ldrb	r3, [r7, #7]
}
 8001b7c:	4618      	mov	r0, r3
 8001b7e:	370c      	adds	r7, #12
 8001b80:	46bd      	mov	sp, r7
 8001b82:	bc80      	pop	{r7}
 8001b84:	4770      	bx	lr
 8001b86:	bf00      	nop
 8001b88:	40022000 	.word	0x40022000
 8001b8c:	45670123 	.word	0x45670123
 8001b90:	cdef89ab 	.word	0xcdef89ab

08001b94 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8001b94:	b480      	push	{r7}
 8001b96:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8001b98:	4b05      	ldr	r3, [pc, #20]	; (8001bb0 <HAL_FLASH_Lock+0x1c>)
 8001b9a:	691b      	ldr	r3, [r3, #16]
 8001b9c:	4a04      	ldr	r2, [pc, #16]	; (8001bb0 <HAL_FLASH_Lock+0x1c>)
 8001b9e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001ba2:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  /* Set the LOCK Bit to lock the FLASH BANK2 Registers access */
  SET_BIT(FLASH->CR2, FLASH_CR2_LOCK);

#endif /* FLASH_BANK2_END */
  return HAL_OK;  
 8001ba4:	2300      	movs	r3, #0
}
 8001ba6:	4618      	mov	r0, r3
 8001ba8:	46bd      	mov	sp, r7
 8001baa:	bc80      	pop	{r7}
 8001bac:	4770      	bx	lr
 8001bae:	bf00      	nop
 8001bb0:	40022000 	.word	0x40022000

08001bb4 <FLASH_Program_HalfWord>:
  * @param  Address specify the address to be programmed.
  * @param  Data    specify the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8001bb4:	b480      	push	{r7}
 8001bb6:	b083      	sub	sp, #12
 8001bb8:	af00      	add	r7, sp, #0
 8001bba:	6078      	str	r0, [r7, #4]
 8001bbc:	460b      	mov	r3, r1
 8001bbe:	807b      	strh	r3, [r7, #2]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8001bc0:	4b08      	ldr	r3, [pc, #32]	; (8001be4 <FLASH_Program_HalfWord+0x30>)
 8001bc2:	2200      	movs	r2, #0
 8001bc4:	61da      	str	r2, [r3, #28]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to program the new data */
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 8001bc6:	4b08      	ldr	r3, [pc, #32]	; (8001be8 <FLASH_Program_HalfWord+0x34>)
 8001bc8:	691b      	ldr	r3, [r3, #16]
 8001bca:	4a07      	ldr	r2, [pc, #28]	; (8001be8 <FLASH_Program_HalfWord+0x34>)
 8001bcc:	f043 0301 	orr.w	r3, r3, #1
 8001bd0:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR2, FLASH_CR2_PG);
  }
#endif /* FLASH_BANK2_END */

  /* Write data in the address */
  *(__IO uint16_t*)Address = Data;
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	887a      	ldrh	r2, [r7, #2]
 8001bd6:	801a      	strh	r2, [r3, #0]
}
 8001bd8:	bf00      	nop
 8001bda:	370c      	adds	r7, #12
 8001bdc:	46bd      	mov	sp, r7
 8001bde:	bc80      	pop	{r7}
 8001be0:	4770      	bx	lr
 8001be2:	bf00      	nop
 8001be4:	200004e0 	.word	0x200004e0
 8001be8:	40022000 	.word	0x40022000

08001bec <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout  maximum flash operation timeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8001bec:	b580      	push	{r7, lr}
 8001bee:	b084      	sub	sp, #16
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
     
  uint32_t tickstart = HAL_GetTick();
 8001bf4:	f7ff fe20 	bl	8001838 <HAL_GetTick>
 8001bf8:	60f8      	str	r0, [r7, #12]
     
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8001bfa:	e010      	b.n	8001c1e <FLASH_WaitForLastOperation+0x32>
  { 
    if (Timeout != HAL_MAX_DELAY)
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001c02:	d00c      	beq.n	8001c1e <FLASH_WaitForLastOperation+0x32>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d007      	beq.n	8001c1a <FLASH_WaitForLastOperation+0x2e>
 8001c0a:	f7ff fe15 	bl	8001838 <HAL_GetTick>
 8001c0e:	4602      	mov	r2, r0
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	1ad3      	subs	r3, r2, r3
 8001c14:	687a      	ldr	r2, [r7, #4]
 8001c16:	429a      	cmp	r2, r3
 8001c18:	d201      	bcs.n	8001c1e <FLASH_WaitForLastOperation+0x32>
      {
        return HAL_TIMEOUT;
 8001c1a:	2303      	movs	r3, #3
 8001c1c:	e025      	b.n	8001c6a <FLASH_WaitForLastOperation+0x7e>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8001c1e:	4b15      	ldr	r3, [pc, #84]	; (8001c74 <FLASH_WaitForLastOperation+0x88>)
 8001c20:	68db      	ldr	r3, [r3, #12]
 8001c22:	f003 0301 	and.w	r3, r3, #1
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d1e8      	bne.n	8001bfc <FLASH_WaitForLastOperation+0x10>
      }
    }
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8001c2a:	4b12      	ldr	r3, [pc, #72]	; (8001c74 <FLASH_WaitForLastOperation+0x88>)
 8001c2c:	68db      	ldr	r3, [r3, #12]
 8001c2e:	f003 0320 	and.w	r3, r3, #32
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d002      	beq.n	8001c3c <FLASH_WaitForLastOperation+0x50>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8001c36:	4b0f      	ldr	r3, [pc, #60]	; (8001c74 <FLASH_WaitForLastOperation+0x88>)
 8001c38:	2220      	movs	r2, #32
 8001c3a:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8001c3c:	4b0d      	ldr	r3, [pc, #52]	; (8001c74 <FLASH_WaitForLastOperation+0x88>)
 8001c3e:	68db      	ldr	r3, [r3, #12]
 8001c40:	f003 0310 	and.w	r3, r3, #16
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d10b      	bne.n	8001c60 <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 8001c48:	4b0a      	ldr	r3, [pc, #40]	; (8001c74 <FLASH_WaitForLastOperation+0x88>)
 8001c4a:	69db      	ldr	r3, [r3, #28]
 8001c4c:	f003 0301 	and.w	r3, r3, #1
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d105      	bne.n	8001c60 <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8001c54:	4b07      	ldr	r3, [pc, #28]	; (8001c74 <FLASH_WaitForLastOperation+0x88>)
 8001c56:	68db      	ldr	r3, [r3, #12]
 8001c58:	f003 0304 	and.w	r3, r3, #4
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d003      	beq.n	8001c68 <FLASH_WaitForLastOperation+0x7c>
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8001c60:	f000 f80a 	bl	8001c78 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8001c64:	2301      	movs	r3, #1
 8001c66:	e000      	b.n	8001c6a <FLASH_WaitForLastOperation+0x7e>
  }

  /* There is no error flag set */
  return HAL_OK;
 8001c68:	2300      	movs	r3, #0
}
 8001c6a:	4618      	mov	r0, r3
 8001c6c:	3710      	adds	r7, #16
 8001c6e:	46bd      	mov	sp, r7
 8001c70:	bd80      	pop	{r7, pc}
 8001c72:	bf00      	nop
 8001c74:	40022000 	.word	0x40022000

08001c78 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 8001c78:	b480      	push	{r7}
 8001c7a:	b083      	sub	sp, #12
 8001c7c:	af00      	add	r7, sp, #0
  uint32_t flags = 0U;
 8001c7e:	2300      	movs	r3, #0
 8001c80:	607b      	str	r3, [r7, #4]
  
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 8001c82:	4b23      	ldr	r3, [pc, #140]	; (8001d10 <FLASH_SetErrorCode+0x98>)
 8001c84:	68db      	ldr	r3, [r3, #12]
 8001c86:	f003 0310 	and.w	r3, r3, #16
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d009      	beq.n	8001ca2 <FLASH_SetErrorCode+0x2a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8001c8e:	4b21      	ldr	r3, [pc, #132]	; (8001d14 <FLASH_SetErrorCode+0x9c>)
 8001c90:	69db      	ldr	r3, [r3, #28]
 8001c92:	f043 0302 	orr.w	r3, r3, #2
 8001c96:	4a1f      	ldr	r2, [pc, #124]	; (8001d14 <FLASH_SetErrorCode+0x9c>)
 8001c98:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_WRPERR | FLASH_FLAG_WRPERR_BANK2;
#else
    flags |= FLASH_FLAG_WRPERR;
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	f043 0310 	orr.w	r3, r3, #16
 8001ca0:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8001ca2:	4b1b      	ldr	r3, [pc, #108]	; (8001d10 <FLASH_SetErrorCode+0x98>)
 8001ca4:	68db      	ldr	r3, [r3, #12]
 8001ca6:	f003 0304 	and.w	r3, r3, #4
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d009      	beq.n	8001cc2 <FLASH_SetErrorCode+0x4a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 8001cae:	4b19      	ldr	r3, [pc, #100]	; (8001d14 <FLASH_SetErrorCode+0x9c>)
 8001cb0:	69db      	ldr	r3, [r3, #28]
 8001cb2:	f043 0301 	orr.w	r3, r3, #1
 8001cb6:	4a17      	ldr	r2, [pc, #92]	; (8001d14 <FLASH_SetErrorCode+0x9c>)
 8001cb8:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_PGERR | FLASH_FLAG_PGERR_BANK2;
#else
    flags |= FLASH_FLAG_PGERR;
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	f043 0304 	orr.w	r3, r3, #4
 8001cc0:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR))
 8001cc2:	4b13      	ldr	r3, [pc, #76]	; (8001d10 <FLASH_SetErrorCode+0x98>)
 8001cc4:	69db      	ldr	r3, [r3, #28]
 8001cc6:	f003 0301 	and.w	r3, r3, #1
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d00b      	beq.n	8001ce6 <FLASH_SetErrorCode+0x6e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 8001cce:	4b11      	ldr	r3, [pc, #68]	; (8001d14 <FLASH_SetErrorCode+0x9c>)
 8001cd0:	69db      	ldr	r3, [r3, #28]
 8001cd2:	f043 0304 	orr.w	r3, r3, #4
 8001cd6:	4a0f      	ldr	r2, [pc, #60]	; (8001d14 <FLASH_SetErrorCode+0x9c>)
 8001cd8:	61d3      	str	r3, [r2, #28]
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 8001cda:	4b0d      	ldr	r3, [pc, #52]	; (8001d10 <FLASH_SetErrorCode+0x98>)
 8001cdc:	69db      	ldr	r3, [r3, #28]
 8001cde:	4a0c      	ldr	r2, [pc, #48]	; (8001d10 <FLASH_SetErrorCode+0x98>)
 8001ce0:	f023 0301 	bic.w	r3, r3, #1
 8001ce4:	61d3      	str	r3, [r2, #28]
  }

  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	f240 1201 	movw	r2, #257	; 0x101
 8001cec:	4293      	cmp	r3, r2
 8001cee:	d106      	bne.n	8001cfe <FLASH_SetErrorCode+0x86>
 8001cf0:	4b07      	ldr	r3, [pc, #28]	; (8001d10 <FLASH_SetErrorCode+0x98>)
 8001cf2:	69db      	ldr	r3, [r3, #28]
 8001cf4:	4a06      	ldr	r2, [pc, #24]	; (8001d10 <FLASH_SetErrorCode+0x98>)
 8001cf6:	f023 0301 	bic.w	r3, r3, #1
 8001cfa:	61d3      	str	r3, [r2, #28]
}  
 8001cfc:	e002      	b.n	8001d04 <FLASH_SetErrorCode+0x8c>
  __HAL_FLASH_CLEAR_FLAG(flags);
 8001cfe:	4a04      	ldr	r2, [pc, #16]	; (8001d10 <FLASH_SetErrorCode+0x98>)
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	60d3      	str	r3, [r2, #12]
}  
 8001d04:	bf00      	nop
 8001d06:	370c      	adds	r7, #12
 8001d08:	46bd      	mov	sp, r7
 8001d0a:	bc80      	pop	{r7}
 8001d0c:	4770      	bx	lr
 8001d0e:	bf00      	nop
 8001d10:	40022000 	.word	0x40022000
 8001d14:	200004e0 	.word	0x200004e0

08001d18 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFF means that all the pages have been correctly erased)
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 8001d18:	b580      	push	{r7, lr}
 8001d1a:	b084      	sub	sp, #16
 8001d1c:	af00      	add	r7, sp, #0
 8001d1e:	6078      	str	r0, [r7, #4]
 8001d20:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8001d22:	2301      	movs	r3, #1
 8001d24:	73fb      	strb	r3, [r7, #15]
  uint32_t address = 0U;
 8001d26:	2300      	movs	r3, #0
 8001d28:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8001d2a:	4b2f      	ldr	r3, [pc, #188]	; (8001de8 <HAL_FLASHEx_Erase+0xd0>)
 8001d2c:	7e1b      	ldrb	r3, [r3, #24]
 8001d2e:	2b01      	cmp	r3, #1
 8001d30:	d101      	bne.n	8001d36 <HAL_FLASHEx_Erase+0x1e>
 8001d32:	2302      	movs	r3, #2
 8001d34:	e053      	b.n	8001dde <HAL_FLASHEx_Erase+0xc6>
 8001d36:	4b2c      	ldr	r3, [pc, #176]	; (8001de8 <HAL_FLASHEx_Erase+0xd0>)
 8001d38:	2201      	movs	r2, #1
 8001d3a:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	2b02      	cmp	r3, #2
 8001d42:	d116      	bne.n	8001d72 <HAL_FLASHEx_Erase+0x5a>
    else 
#endif /* FLASH_BANK2_END */
    {
      /* Mass Erase requested for Bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8001d44:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001d48:	f7ff ff50 	bl	8001bec <FLASH_WaitForLastOperation>
 8001d4c:	4603      	mov	r3, r0
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d141      	bne.n	8001dd6 <HAL_FLASHEx_Erase+0xbe>
      {
        /*Mass erase to be done*/
        FLASH_MassErase(FLASH_BANK_1);
 8001d52:	2001      	movs	r0, #1
 8001d54:	f000 f84c 	bl	8001df0 <FLASH_MassErase>
        
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001d58:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001d5c:	f7ff ff46 	bl	8001bec <FLASH_WaitForLastOperation>
 8001d60:	4603      	mov	r3, r0
 8001d62:	73fb      	strb	r3, [r7, #15]
        
        /* If the erase operation is completed, disable the MER Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 8001d64:	4b21      	ldr	r3, [pc, #132]	; (8001dec <HAL_FLASHEx_Erase+0xd4>)
 8001d66:	691b      	ldr	r3, [r3, #16]
 8001d68:	4a20      	ldr	r2, [pc, #128]	; (8001dec <HAL_FLASHEx_Erase+0xd4>)
 8001d6a:	f023 0304 	bic.w	r3, r3, #4
 8001d6e:	6113      	str	r3, [r2, #16]
 8001d70:	e031      	b.n	8001dd6 <HAL_FLASHEx_Erase+0xbe>
    else
#endif /* FLASH_BANK2_END */
   {
      /* Page Erase requested on address located on bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8001d72:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001d76:	f7ff ff39 	bl	8001bec <FLASH_WaitForLastOperation>
 8001d7a:	4603      	mov	r3, r0
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d12a      	bne.n	8001dd6 <HAL_FLASHEx_Erase+0xbe>
      {
        /*Initialization of PageError variable*/
        *PageError = 0xFFFFFFFFU;
 8001d80:	683b      	ldr	r3, [r7, #0]
 8001d82:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001d86:	601a      	str	r2, [r3, #0]
        
        /* Erase page by page to be done*/
        for(address = pEraseInit->PageAddress;
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	689b      	ldr	r3, [r3, #8]
 8001d8c:	60bb      	str	r3, [r7, #8]
 8001d8e:	e019      	b.n	8001dc4 <HAL_FLASHEx_Erase+0xac>
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
            address += FLASH_PAGE_SIZE)
        {
          FLASH_PageErase(address);
 8001d90:	68b8      	ldr	r0, [r7, #8]
 8001d92:	f000 f849 	bl	8001e28 <FLASH_PageErase>
          
          /* Wait for last operation to be completed */
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001d96:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001d9a:	f7ff ff27 	bl	8001bec <FLASH_WaitForLastOperation>
 8001d9e:	4603      	mov	r3, r0
 8001da0:	73fb      	strb	r3, [r7, #15]
          
          /* If the erase operation is completed, disable the PER Bit */
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 8001da2:	4b12      	ldr	r3, [pc, #72]	; (8001dec <HAL_FLASHEx_Erase+0xd4>)
 8001da4:	691b      	ldr	r3, [r3, #16]
 8001da6:	4a11      	ldr	r2, [pc, #68]	; (8001dec <HAL_FLASHEx_Erase+0xd4>)
 8001da8:	f023 0302 	bic.w	r3, r3, #2
 8001dac:	6113      	str	r3, [r2, #16]
          
          if (status != HAL_OK)
 8001dae:	7bfb      	ldrb	r3, [r7, #15]
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d003      	beq.n	8001dbc <HAL_FLASHEx_Erase+0xa4>
          {
            /* In case of error, stop erase procedure and return the faulty address */
            *PageError = address;
 8001db4:	683b      	ldr	r3, [r7, #0]
 8001db6:	68ba      	ldr	r2, [r7, #8]
 8001db8:	601a      	str	r2, [r3, #0]
            break;
 8001dba:	e00c      	b.n	8001dd6 <HAL_FLASHEx_Erase+0xbe>
            address += FLASH_PAGE_SIZE)
 8001dbc:	68bb      	ldr	r3, [r7, #8]
 8001dbe:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001dc2:	60bb      	str	r3, [r7, #8]
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	68db      	ldr	r3, [r3, #12]
 8001dc8:	029a      	lsls	r2, r3, #10
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	689b      	ldr	r3, [r3, #8]
 8001dce:	4413      	add	r3, r2
        for(address = pEraseInit->PageAddress;
 8001dd0:	68ba      	ldr	r2, [r7, #8]
 8001dd2:	429a      	cmp	r2, r3
 8001dd4:	d3dc      	bcc.n	8001d90 <HAL_FLASHEx_Erase+0x78>
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8001dd6:	4b04      	ldr	r3, [pc, #16]	; (8001de8 <HAL_FLASHEx_Erase+0xd0>)
 8001dd8:	2200      	movs	r2, #0
 8001dda:	761a      	strb	r2, [r3, #24]

  return status;
 8001ddc:	7bfb      	ldrb	r3, [r7, #15]
}
 8001dde:	4618      	mov	r0, r3
 8001de0:	3710      	adds	r7, #16
 8001de2:	46bd      	mov	sp, r7
 8001de4:	bd80      	pop	{r7, pc}
 8001de6:	bf00      	nop
 8001de8:	200004e0 	.word	0x200004e0
 8001dec:	40022000 	.word	0x40022000

08001df0 <FLASH_MassErase>:
  @endif
  *
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 8001df0:	b480      	push	{r7}
 8001df2:	b083      	sub	sp, #12
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_FLASH_BANK(Banks));

  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8001df8:	4b09      	ldr	r3, [pc, #36]	; (8001e20 <FLASH_MassErase+0x30>)
 8001dfa:	2200      	movs	r2, #0
 8001dfc:	61da      	str	r2, [r3, #28]
#if !defined(FLASH_BANK2_END)
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Banks);
#endif /* FLASH_BANK2_END */  
    /* Only bank1 will be erased*/
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 8001dfe:	4b09      	ldr	r3, [pc, #36]	; (8001e24 <FLASH_MassErase+0x34>)
 8001e00:	691b      	ldr	r3, [r3, #16]
 8001e02:	4a08      	ldr	r2, [pc, #32]	; (8001e24 <FLASH_MassErase+0x34>)
 8001e04:	f043 0304 	orr.w	r3, r3, #4
 8001e08:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8001e0a:	4b06      	ldr	r3, [pc, #24]	; (8001e24 <FLASH_MassErase+0x34>)
 8001e0c:	691b      	ldr	r3, [r3, #16]
 8001e0e:	4a05      	ldr	r2, [pc, #20]	; (8001e24 <FLASH_MassErase+0x34>)
 8001e10:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001e14:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 8001e16:	bf00      	nop
 8001e18:	370c      	adds	r7, #12
 8001e1a:	46bd      	mov	sp, r7
 8001e1c:	bc80      	pop	{r7}
 8001e1e:	4770      	bx	lr
 8001e20:	200004e0 	.word	0x200004e0
 8001e24:	40022000 	.word	0x40022000

08001e28 <FLASH_PageErase>:
  *         The value of this parameter depend on device used within the same series      
  * 
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
 8001e28:	b480      	push	{r7}
 8001e2a:	b083      	sub	sp, #12
 8001e2c:	af00      	add	r7, sp, #0
 8001e2e:	6078      	str	r0, [r7, #4]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8001e30:	4b0b      	ldr	r3, [pc, #44]	; (8001e60 <FLASH_PageErase+0x38>)
 8001e32:	2200      	movs	r2, #0
 8001e34:	61da      	str	r2, [r3, #28]
  }
  else
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 8001e36:	4b0b      	ldr	r3, [pc, #44]	; (8001e64 <FLASH_PageErase+0x3c>)
 8001e38:	691b      	ldr	r3, [r3, #16]
 8001e3a:	4a0a      	ldr	r2, [pc, #40]	; (8001e64 <FLASH_PageErase+0x3c>)
 8001e3c:	f043 0302 	orr.w	r3, r3, #2
 8001e40:	6113      	str	r3, [r2, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 8001e42:	4a08      	ldr	r2, [pc, #32]	; (8001e64 <FLASH_PageErase+0x3c>)
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8001e48:	4b06      	ldr	r3, [pc, #24]	; (8001e64 <FLASH_PageErase+0x3c>)
 8001e4a:	691b      	ldr	r3, [r3, #16]
 8001e4c:	4a05      	ldr	r2, [pc, #20]	; (8001e64 <FLASH_PageErase+0x3c>)
 8001e4e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001e52:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 8001e54:	bf00      	nop
 8001e56:	370c      	adds	r7, #12
 8001e58:	46bd      	mov	sp, r7
 8001e5a:	bc80      	pop	{r7}
 8001e5c:	4770      	bx	lr
 8001e5e:	bf00      	nop
 8001e60:	200004e0 	.word	0x200004e0
 8001e64:	40022000 	.word	0x40022000

08001e68 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001e68:	b480      	push	{r7}
 8001e6a:	b08b      	sub	sp, #44	; 0x2c
 8001e6c:	af00      	add	r7, sp, #0
 8001e6e:	6078      	str	r0, [r7, #4]
 8001e70:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001e72:	2300      	movs	r3, #0
 8001e74:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001e76:	2300      	movs	r3, #0
 8001e78:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001e7a:	e169      	b.n	8002150 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001e7c:	2201      	movs	r2, #1
 8001e7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e80:	fa02 f303 	lsl.w	r3, r2, r3
 8001e84:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001e86:	683b      	ldr	r3, [r7, #0]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	69fa      	ldr	r2, [r7, #28]
 8001e8c:	4013      	ands	r3, r2
 8001e8e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001e90:	69ba      	ldr	r2, [r7, #24]
 8001e92:	69fb      	ldr	r3, [r7, #28]
 8001e94:	429a      	cmp	r2, r3
 8001e96:	f040 8158 	bne.w	800214a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001e9a:	683b      	ldr	r3, [r7, #0]
 8001e9c:	685b      	ldr	r3, [r3, #4]
 8001e9e:	4a9a      	ldr	r2, [pc, #616]	; (8002108 <HAL_GPIO_Init+0x2a0>)
 8001ea0:	4293      	cmp	r3, r2
 8001ea2:	d05e      	beq.n	8001f62 <HAL_GPIO_Init+0xfa>
 8001ea4:	4a98      	ldr	r2, [pc, #608]	; (8002108 <HAL_GPIO_Init+0x2a0>)
 8001ea6:	4293      	cmp	r3, r2
 8001ea8:	d875      	bhi.n	8001f96 <HAL_GPIO_Init+0x12e>
 8001eaa:	4a98      	ldr	r2, [pc, #608]	; (800210c <HAL_GPIO_Init+0x2a4>)
 8001eac:	4293      	cmp	r3, r2
 8001eae:	d058      	beq.n	8001f62 <HAL_GPIO_Init+0xfa>
 8001eb0:	4a96      	ldr	r2, [pc, #600]	; (800210c <HAL_GPIO_Init+0x2a4>)
 8001eb2:	4293      	cmp	r3, r2
 8001eb4:	d86f      	bhi.n	8001f96 <HAL_GPIO_Init+0x12e>
 8001eb6:	4a96      	ldr	r2, [pc, #600]	; (8002110 <HAL_GPIO_Init+0x2a8>)
 8001eb8:	4293      	cmp	r3, r2
 8001eba:	d052      	beq.n	8001f62 <HAL_GPIO_Init+0xfa>
 8001ebc:	4a94      	ldr	r2, [pc, #592]	; (8002110 <HAL_GPIO_Init+0x2a8>)
 8001ebe:	4293      	cmp	r3, r2
 8001ec0:	d869      	bhi.n	8001f96 <HAL_GPIO_Init+0x12e>
 8001ec2:	4a94      	ldr	r2, [pc, #592]	; (8002114 <HAL_GPIO_Init+0x2ac>)
 8001ec4:	4293      	cmp	r3, r2
 8001ec6:	d04c      	beq.n	8001f62 <HAL_GPIO_Init+0xfa>
 8001ec8:	4a92      	ldr	r2, [pc, #584]	; (8002114 <HAL_GPIO_Init+0x2ac>)
 8001eca:	4293      	cmp	r3, r2
 8001ecc:	d863      	bhi.n	8001f96 <HAL_GPIO_Init+0x12e>
 8001ece:	4a92      	ldr	r2, [pc, #584]	; (8002118 <HAL_GPIO_Init+0x2b0>)
 8001ed0:	4293      	cmp	r3, r2
 8001ed2:	d046      	beq.n	8001f62 <HAL_GPIO_Init+0xfa>
 8001ed4:	4a90      	ldr	r2, [pc, #576]	; (8002118 <HAL_GPIO_Init+0x2b0>)
 8001ed6:	4293      	cmp	r3, r2
 8001ed8:	d85d      	bhi.n	8001f96 <HAL_GPIO_Init+0x12e>
 8001eda:	2b12      	cmp	r3, #18
 8001edc:	d82a      	bhi.n	8001f34 <HAL_GPIO_Init+0xcc>
 8001ede:	2b12      	cmp	r3, #18
 8001ee0:	d859      	bhi.n	8001f96 <HAL_GPIO_Init+0x12e>
 8001ee2:	a201      	add	r2, pc, #4	; (adr r2, 8001ee8 <HAL_GPIO_Init+0x80>)
 8001ee4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ee8:	08001f63 	.word	0x08001f63
 8001eec:	08001f3d 	.word	0x08001f3d
 8001ef0:	08001f4f 	.word	0x08001f4f
 8001ef4:	08001f91 	.word	0x08001f91
 8001ef8:	08001f97 	.word	0x08001f97
 8001efc:	08001f97 	.word	0x08001f97
 8001f00:	08001f97 	.word	0x08001f97
 8001f04:	08001f97 	.word	0x08001f97
 8001f08:	08001f97 	.word	0x08001f97
 8001f0c:	08001f97 	.word	0x08001f97
 8001f10:	08001f97 	.word	0x08001f97
 8001f14:	08001f97 	.word	0x08001f97
 8001f18:	08001f97 	.word	0x08001f97
 8001f1c:	08001f97 	.word	0x08001f97
 8001f20:	08001f97 	.word	0x08001f97
 8001f24:	08001f97 	.word	0x08001f97
 8001f28:	08001f97 	.word	0x08001f97
 8001f2c:	08001f45 	.word	0x08001f45
 8001f30:	08001f59 	.word	0x08001f59
 8001f34:	4a79      	ldr	r2, [pc, #484]	; (800211c <HAL_GPIO_Init+0x2b4>)
 8001f36:	4293      	cmp	r3, r2
 8001f38:	d013      	beq.n	8001f62 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001f3a:	e02c      	b.n	8001f96 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001f3c:	683b      	ldr	r3, [r7, #0]
 8001f3e:	68db      	ldr	r3, [r3, #12]
 8001f40:	623b      	str	r3, [r7, #32]
          break;
 8001f42:	e029      	b.n	8001f98 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001f44:	683b      	ldr	r3, [r7, #0]
 8001f46:	68db      	ldr	r3, [r3, #12]
 8001f48:	3304      	adds	r3, #4
 8001f4a:	623b      	str	r3, [r7, #32]
          break;
 8001f4c:	e024      	b.n	8001f98 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001f4e:	683b      	ldr	r3, [r7, #0]
 8001f50:	68db      	ldr	r3, [r3, #12]
 8001f52:	3308      	adds	r3, #8
 8001f54:	623b      	str	r3, [r7, #32]
          break;
 8001f56:	e01f      	b.n	8001f98 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001f58:	683b      	ldr	r3, [r7, #0]
 8001f5a:	68db      	ldr	r3, [r3, #12]
 8001f5c:	330c      	adds	r3, #12
 8001f5e:	623b      	str	r3, [r7, #32]
          break;
 8001f60:	e01a      	b.n	8001f98 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001f62:	683b      	ldr	r3, [r7, #0]
 8001f64:	689b      	ldr	r3, [r3, #8]
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d102      	bne.n	8001f70 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001f6a:	2304      	movs	r3, #4
 8001f6c:	623b      	str	r3, [r7, #32]
          break;
 8001f6e:	e013      	b.n	8001f98 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001f70:	683b      	ldr	r3, [r7, #0]
 8001f72:	689b      	ldr	r3, [r3, #8]
 8001f74:	2b01      	cmp	r3, #1
 8001f76:	d105      	bne.n	8001f84 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001f78:	2308      	movs	r3, #8
 8001f7a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	69fa      	ldr	r2, [r7, #28]
 8001f80:	611a      	str	r2, [r3, #16]
          break;
 8001f82:	e009      	b.n	8001f98 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001f84:	2308      	movs	r3, #8
 8001f86:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	69fa      	ldr	r2, [r7, #28]
 8001f8c:	615a      	str	r2, [r3, #20]
          break;
 8001f8e:	e003      	b.n	8001f98 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001f90:	2300      	movs	r3, #0
 8001f92:	623b      	str	r3, [r7, #32]
          break;
 8001f94:	e000      	b.n	8001f98 <HAL_GPIO_Init+0x130>
          break;
 8001f96:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001f98:	69bb      	ldr	r3, [r7, #24]
 8001f9a:	2bff      	cmp	r3, #255	; 0xff
 8001f9c:	d801      	bhi.n	8001fa2 <HAL_GPIO_Init+0x13a>
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	e001      	b.n	8001fa6 <HAL_GPIO_Init+0x13e>
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	3304      	adds	r3, #4
 8001fa6:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001fa8:	69bb      	ldr	r3, [r7, #24]
 8001faa:	2bff      	cmp	r3, #255	; 0xff
 8001fac:	d802      	bhi.n	8001fb4 <HAL_GPIO_Init+0x14c>
 8001fae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fb0:	009b      	lsls	r3, r3, #2
 8001fb2:	e002      	b.n	8001fba <HAL_GPIO_Init+0x152>
 8001fb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fb6:	3b08      	subs	r3, #8
 8001fb8:	009b      	lsls	r3, r3, #2
 8001fba:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001fbc:	697b      	ldr	r3, [r7, #20]
 8001fbe:	681a      	ldr	r2, [r3, #0]
 8001fc0:	210f      	movs	r1, #15
 8001fc2:	693b      	ldr	r3, [r7, #16]
 8001fc4:	fa01 f303 	lsl.w	r3, r1, r3
 8001fc8:	43db      	mvns	r3, r3
 8001fca:	401a      	ands	r2, r3
 8001fcc:	6a39      	ldr	r1, [r7, #32]
 8001fce:	693b      	ldr	r3, [r7, #16]
 8001fd0:	fa01 f303 	lsl.w	r3, r1, r3
 8001fd4:	431a      	orrs	r2, r3
 8001fd6:	697b      	ldr	r3, [r7, #20]
 8001fd8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001fda:	683b      	ldr	r3, [r7, #0]
 8001fdc:	685b      	ldr	r3, [r3, #4]
 8001fde:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	f000 80b1 	beq.w	800214a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001fe8:	4b4d      	ldr	r3, [pc, #308]	; (8002120 <HAL_GPIO_Init+0x2b8>)
 8001fea:	699b      	ldr	r3, [r3, #24]
 8001fec:	4a4c      	ldr	r2, [pc, #304]	; (8002120 <HAL_GPIO_Init+0x2b8>)
 8001fee:	f043 0301 	orr.w	r3, r3, #1
 8001ff2:	6193      	str	r3, [r2, #24]
 8001ff4:	4b4a      	ldr	r3, [pc, #296]	; (8002120 <HAL_GPIO_Init+0x2b8>)
 8001ff6:	699b      	ldr	r3, [r3, #24]
 8001ff8:	f003 0301 	and.w	r3, r3, #1
 8001ffc:	60bb      	str	r3, [r7, #8]
 8001ffe:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002000:	4a48      	ldr	r2, [pc, #288]	; (8002124 <HAL_GPIO_Init+0x2bc>)
 8002002:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002004:	089b      	lsrs	r3, r3, #2
 8002006:	3302      	adds	r3, #2
 8002008:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800200c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800200e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002010:	f003 0303 	and.w	r3, r3, #3
 8002014:	009b      	lsls	r3, r3, #2
 8002016:	220f      	movs	r2, #15
 8002018:	fa02 f303 	lsl.w	r3, r2, r3
 800201c:	43db      	mvns	r3, r3
 800201e:	68fa      	ldr	r2, [r7, #12]
 8002020:	4013      	ands	r3, r2
 8002022:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	4a40      	ldr	r2, [pc, #256]	; (8002128 <HAL_GPIO_Init+0x2c0>)
 8002028:	4293      	cmp	r3, r2
 800202a:	d013      	beq.n	8002054 <HAL_GPIO_Init+0x1ec>
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	4a3f      	ldr	r2, [pc, #252]	; (800212c <HAL_GPIO_Init+0x2c4>)
 8002030:	4293      	cmp	r3, r2
 8002032:	d00d      	beq.n	8002050 <HAL_GPIO_Init+0x1e8>
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	4a3e      	ldr	r2, [pc, #248]	; (8002130 <HAL_GPIO_Init+0x2c8>)
 8002038:	4293      	cmp	r3, r2
 800203a:	d007      	beq.n	800204c <HAL_GPIO_Init+0x1e4>
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	4a3d      	ldr	r2, [pc, #244]	; (8002134 <HAL_GPIO_Init+0x2cc>)
 8002040:	4293      	cmp	r3, r2
 8002042:	d101      	bne.n	8002048 <HAL_GPIO_Init+0x1e0>
 8002044:	2303      	movs	r3, #3
 8002046:	e006      	b.n	8002056 <HAL_GPIO_Init+0x1ee>
 8002048:	2304      	movs	r3, #4
 800204a:	e004      	b.n	8002056 <HAL_GPIO_Init+0x1ee>
 800204c:	2302      	movs	r3, #2
 800204e:	e002      	b.n	8002056 <HAL_GPIO_Init+0x1ee>
 8002050:	2301      	movs	r3, #1
 8002052:	e000      	b.n	8002056 <HAL_GPIO_Init+0x1ee>
 8002054:	2300      	movs	r3, #0
 8002056:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002058:	f002 0203 	and.w	r2, r2, #3
 800205c:	0092      	lsls	r2, r2, #2
 800205e:	4093      	lsls	r3, r2
 8002060:	68fa      	ldr	r2, [r7, #12]
 8002062:	4313      	orrs	r3, r2
 8002064:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002066:	492f      	ldr	r1, [pc, #188]	; (8002124 <HAL_GPIO_Init+0x2bc>)
 8002068:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800206a:	089b      	lsrs	r3, r3, #2
 800206c:	3302      	adds	r3, #2
 800206e:	68fa      	ldr	r2, [r7, #12]
 8002070:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002074:	683b      	ldr	r3, [r7, #0]
 8002076:	685b      	ldr	r3, [r3, #4]
 8002078:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800207c:	2b00      	cmp	r3, #0
 800207e:	d006      	beq.n	800208e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002080:	4b2d      	ldr	r3, [pc, #180]	; (8002138 <HAL_GPIO_Init+0x2d0>)
 8002082:	681a      	ldr	r2, [r3, #0]
 8002084:	492c      	ldr	r1, [pc, #176]	; (8002138 <HAL_GPIO_Init+0x2d0>)
 8002086:	69bb      	ldr	r3, [r7, #24]
 8002088:	4313      	orrs	r3, r2
 800208a:	600b      	str	r3, [r1, #0]
 800208c:	e006      	b.n	800209c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800208e:	4b2a      	ldr	r3, [pc, #168]	; (8002138 <HAL_GPIO_Init+0x2d0>)
 8002090:	681a      	ldr	r2, [r3, #0]
 8002092:	69bb      	ldr	r3, [r7, #24]
 8002094:	43db      	mvns	r3, r3
 8002096:	4928      	ldr	r1, [pc, #160]	; (8002138 <HAL_GPIO_Init+0x2d0>)
 8002098:	4013      	ands	r3, r2
 800209a:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800209c:	683b      	ldr	r3, [r7, #0]
 800209e:	685b      	ldr	r3, [r3, #4]
 80020a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d006      	beq.n	80020b6 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80020a8:	4b23      	ldr	r3, [pc, #140]	; (8002138 <HAL_GPIO_Init+0x2d0>)
 80020aa:	685a      	ldr	r2, [r3, #4]
 80020ac:	4922      	ldr	r1, [pc, #136]	; (8002138 <HAL_GPIO_Init+0x2d0>)
 80020ae:	69bb      	ldr	r3, [r7, #24]
 80020b0:	4313      	orrs	r3, r2
 80020b2:	604b      	str	r3, [r1, #4]
 80020b4:	e006      	b.n	80020c4 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80020b6:	4b20      	ldr	r3, [pc, #128]	; (8002138 <HAL_GPIO_Init+0x2d0>)
 80020b8:	685a      	ldr	r2, [r3, #4]
 80020ba:	69bb      	ldr	r3, [r7, #24]
 80020bc:	43db      	mvns	r3, r3
 80020be:	491e      	ldr	r1, [pc, #120]	; (8002138 <HAL_GPIO_Init+0x2d0>)
 80020c0:	4013      	ands	r3, r2
 80020c2:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80020c4:	683b      	ldr	r3, [r7, #0]
 80020c6:	685b      	ldr	r3, [r3, #4]
 80020c8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d006      	beq.n	80020de <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80020d0:	4b19      	ldr	r3, [pc, #100]	; (8002138 <HAL_GPIO_Init+0x2d0>)
 80020d2:	689a      	ldr	r2, [r3, #8]
 80020d4:	4918      	ldr	r1, [pc, #96]	; (8002138 <HAL_GPIO_Init+0x2d0>)
 80020d6:	69bb      	ldr	r3, [r7, #24]
 80020d8:	4313      	orrs	r3, r2
 80020da:	608b      	str	r3, [r1, #8]
 80020dc:	e006      	b.n	80020ec <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80020de:	4b16      	ldr	r3, [pc, #88]	; (8002138 <HAL_GPIO_Init+0x2d0>)
 80020e0:	689a      	ldr	r2, [r3, #8]
 80020e2:	69bb      	ldr	r3, [r7, #24]
 80020e4:	43db      	mvns	r3, r3
 80020e6:	4914      	ldr	r1, [pc, #80]	; (8002138 <HAL_GPIO_Init+0x2d0>)
 80020e8:	4013      	ands	r3, r2
 80020ea:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80020ec:	683b      	ldr	r3, [r7, #0]
 80020ee:	685b      	ldr	r3, [r3, #4]
 80020f0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d021      	beq.n	800213c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80020f8:	4b0f      	ldr	r3, [pc, #60]	; (8002138 <HAL_GPIO_Init+0x2d0>)
 80020fa:	68da      	ldr	r2, [r3, #12]
 80020fc:	490e      	ldr	r1, [pc, #56]	; (8002138 <HAL_GPIO_Init+0x2d0>)
 80020fe:	69bb      	ldr	r3, [r7, #24]
 8002100:	4313      	orrs	r3, r2
 8002102:	60cb      	str	r3, [r1, #12]
 8002104:	e021      	b.n	800214a <HAL_GPIO_Init+0x2e2>
 8002106:	bf00      	nop
 8002108:	10320000 	.word	0x10320000
 800210c:	10310000 	.word	0x10310000
 8002110:	10220000 	.word	0x10220000
 8002114:	10210000 	.word	0x10210000
 8002118:	10120000 	.word	0x10120000
 800211c:	10110000 	.word	0x10110000
 8002120:	40021000 	.word	0x40021000
 8002124:	40010000 	.word	0x40010000
 8002128:	40010800 	.word	0x40010800
 800212c:	40010c00 	.word	0x40010c00
 8002130:	40011000 	.word	0x40011000
 8002134:	40011400 	.word	0x40011400
 8002138:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800213c:	4b0b      	ldr	r3, [pc, #44]	; (800216c <HAL_GPIO_Init+0x304>)
 800213e:	68da      	ldr	r2, [r3, #12]
 8002140:	69bb      	ldr	r3, [r7, #24]
 8002142:	43db      	mvns	r3, r3
 8002144:	4909      	ldr	r1, [pc, #36]	; (800216c <HAL_GPIO_Init+0x304>)
 8002146:	4013      	ands	r3, r2
 8002148:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800214a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800214c:	3301      	adds	r3, #1
 800214e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002150:	683b      	ldr	r3, [r7, #0]
 8002152:	681a      	ldr	r2, [r3, #0]
 8002154:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002156:	fa22 f303 	lsr.w	r3, r2, r3
 800215a:	2b00      	cmp	r3, #0
 800215c:	f47f ae8e 	bne.w	8001e7c <HAL_GPIO_Init+0x14>
  }
}
 8002160:	bf00      	nop
 8002162:	bf00      	nop
 8002164:	372c      	adds	r7, #44	; 0x2c
 8002166:	46bd      	mov	sp, r7
 8002168:	bc80      	pop	{r7}
 800216a:	4770      	bx	lr
 800216c:	40010400 	.word	0x40010400

08002170 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002170:	b480      	push	{r7}
 8002172:	b083      	sub	sp, #12
 8002174:	af00      	add	r7, sp, #0
 8002176:	6078      	str	r0, [r7, #4]
 8002178:	460b      	mov	r3, r1
 800217a:	807b      	strh	r3, [r7, #2]
 800217c:	4613      	mov	r3, r2
 800217e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002180:	787b      	ldrb	r3, [r7, #1]
 8002182:	2b00      	cmp	r3, #0
 8002184:	d003      	beq.n	800218e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002186:	887a      	ldrh	r2, [r7, #2]
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800218c:	e003      	b.n	8002196 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800218e:	887b      	ldrh	r3, [r7, #2]
 8002190:	041a      	lsls	r2, r3, #16
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	611a      	str	r2, [r3, #16]
}
 8002196:	bf00      	nop
 8002198:	370c      	adds	r7, #12
 800219a:	46bd      	mov	sp, r7
 800219c:	bc80      	pop	{r7}
 800219e:	4770      	bx	lr

080021a0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80021a0:	b580      	push	{r7, lr}
 80021a2:	b084      	sub	sp, #16
 80021a4:	af00      	add	r7, sp, #0
 80021a6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d101      	bne.n	80021b2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80021ae:	2301      	movs	r3, #1
 80021b0:	e12b      	b.n	800240a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80021b8:	b2db      	uxtb	r3, r3
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d106      	bne.n	80021cc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	2200      	movs	r2, #0
 80021c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80021c6:	6878      	ldr	r0, [r7, #4]
 80021c8:	f7fe fffc 	bl	80011c4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	2224      	movs	r2, #36	; 0x24
 80021d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	681a      	ldr	r2, [r3, #0]
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	f022 0201 	bic.w	r2, r2, #1
 80021e2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	681a      	ldr	r2, [r3, #0]
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80021f2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	681a      	ldr	r2, [r3, #0]
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002202:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002204:	f000 fce6 	bl	8002bd4 <HAL_RCC_GetPCLK1Freq>
 8002208:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	685b      	ldr	r3, [r3, #4]
 800220e:	4a81      	ldr	r2, [pc, #516]	; (8002414 <HAL_I2C_Init+0x274>)
 8002210:	4293      	cmp	r3, r2
 8002212:	d807      	bhi.n	8002224 <HAL_I2C_Init+0x84>
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	4a80      	ldr	r2, [pc, #512]	; (8002418 <HAL_I2C_Init+0x278>)
 8002218:	4293      	cmp	r3, r2
 800221a:	bf94      	ite	ls
 800221c:	2301      	movls	r3, #1
 800221e:	2300      	movhi	r3, #0
 8002220:	b2db      	uxtb	r3, r3
 8002222:	e006      	b.n	8002232 <HAL_I2C_Init+0x92>
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	4a7d      	ldr	r2, [pc, #500]	; (800241c <HAL_I2C_Init+0x27c>)
 8002228:	4293      	cmp	r3, r2
 800222a:	bf94      	ite	ls
 800222c:	2301      	movls	r3, #1
 800222e:	2300      	movhi	r3, #0
 8002230:	b2db      	uxtb	r3, r3
 8002232:	2b00      	cmp	r3, #0
 8002234:	d001      	beq.n	800223a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002236:	2301      	movs	r3, #1
 8002238:	e0e7      	b.n	800240a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	4a78      	ldr	r2, [pc, #480]	; (8002420 <HAL_I2C_Init+0x280>)
 800223e:	fba2 2303 	umull	r2, r3, r2, r3
 8002242:	0c9b      	lsrs	r3, r3, #18
 8002244:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	685b      	ldr	r3, [r3, #4]
 800224c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	68ba      	ldr	r2, [r7, #8]
 8002256:	430a      	orrs	r2, r1
 8002258:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	6a1b      	ldr	r3, [r3, #32]
 8002260:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	685b      	ldr	r3, [r3, #4]
 8002268:	4a6a      	ldr	r2, [pc, #424]	; (8002414 <HAL_I2C_Init+0x274>)
 800226a:	4293      	cmp	r3, r2
 800226c:	d802      	bhi.n	8002274 <HAL_I2C_Init+0xd4>
 800226e:	68bb      	ldr	r3, [r7, #8]
 8002270:	3301      	adds	r3, #1
 8002272:	e009      	b.n	8002288 <HAL_I2C_Init+0xe8>
 8002274:	68bb      	ldr	r3, [r7, #8]
 8002276:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800227a:	fb02 f303 	mul.w	r3, r2, r3
 800227e:	4a69      	ldr	r2, [pc, #420]	; (8002424 <HAL_I2C_Init+0x284>)
 8002280:	fba2 2303 	umull	r2, r3, r2, r3
 8002284:	099b      	lsrs	r3, r3, #6
 8002286:	3301      	adds	r3, #1
 8002288:	687a      	ldr	r2, [r7, #4]
 800228a:	6812      	ldr	r2, [r2, #0]
 800228c:	430b      	orrs	r3, r1
 800228e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	69db      	ldr	r3, [r3, #28]
 8002296:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800229a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	685b      	ldr	r3, [r3, #4]
 80022a2:	495c      	ldr	r1, [pc, #368]	; (8002414 <HAL_I2C_Init+0x274>)
 80022a4:	428b      	cmp	r3, r1
 80022a6:	d819      	bhi.n	80022dc <HAL_I2C_Init+0x13c>
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	1e59      	subs	r1, r3, #1
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	685b      	ldr	r3, [r3, #4]
 80022b0:	005b      	lsls	r3, r3, #1
 80022b2:	fbb1 f3f3 	udiv	r3, r1, r3
 80022b6:	1c59      	adds	r1, r3, #1
 80022b8:	f640 73fc 	movw	r3, #4092	; 0xffc
 80022bc:	400b      	ands	r3, r1
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d00a      	beq.n	80022d8 <HAL_I2C_Init+0x138>
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	1e59      	subs	r1, r3, #1
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	685b      	ldr	r3, [r3, #4]
 80022ca:	005b      	lsls	r3, r3, #1
 80022cc:	fbb1 f3f3 	udiv	r3, r1, r3
 80022d0:	3301      	adds	r3, #1
 80022d2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80022d6:	e051      	b.n	800237c <HAL_I2C_Init+0x1dc>
 80022d8:	2304      	movs	r3, #4
 80022da:	e04f      	b.n	800237c <HAL_I2C_Init+0x1dc>
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	689b      	ldr	r3, [r3, #8]
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d111      	bne.n	8002308 <HAL_I2C_Init+0x168>
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	1e58      	subs	r0, r3, #1
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	6859      	ldr	r1, [r3, #4]
 80022ec:	460b      	mov	r3, r1
 80022ee:	005b      	lsls	r3, r3, #1
 80022f0:	440b      	add	r3, r1
 80022f2:	fbb0 f3f3 	udiv	r3, r0, r3
 80022f6:	3301      	adds	r3, #1
 80022f8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	bf0c      	ite	eq
 8002300:	2301      	moveq	r3, #1
 8002302:	2300      	movne	r3, #0
 8002304:	b2db      	uxtb	r3, r3
 8002306:	e012      	b.n	800232e <HAL_I2C_Init+0x18e>
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	1e58      	subs	r0, r3, #1
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	6859      	ldr	r1, [r3, #4]
 8002310:	460b      	mov	r3, r1
 8002312:	009b      	lsls	r3, r3, #2
 8002314:	440b      	add	r3, r1
 8002316:	0099      	lsls	r1, r3, #2
 8002318:	440b      	add	r3, r1
 800231a:	fbb0 f3f3 	udiv	r3, r0, r3
 800231e:	3301      	adds	r3, #1
 8002320:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002324:	2b00      	cmp	r3, #0
 8002326:	bf0c      	ite	eq
 8002328:	2301      	moveq	r3, #1
 800232a:	2300      	movne	r3, #0
 800232c:	b2db      	uxtb	r3, r3
 800232e:	2b00      	cmp	r3, #0
 8002330:	d001      	beq.n	8002336 <HAL_I2C_Init+0x196>
 8002332:	2301      	movs	r3, #1
 8002334:	e022      	b.n	800237c <HAL_I2C_Init+0x1dc>
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	689b      	ldr	r3, [r3, #8]
 800233a:	2b00      	cmp	r3, #0
 800233c:	d10e      	bne.n	800235c <HAL_I2C_Init+0x1bc>
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	1e58      	subs	r0, r3, #1
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	6859      	ldr	r1, [r3, #4]
 8002346:	460b      	mov	r3, r1
 8002348:	005b      	lsls	r3, r3, #1
 800234a:	440b      	add	r3, r1
 800234c:	fbb0 f3f3 	udiv	r3, r0, r3
 8002350:	3301      	adds	r3, #1
 8002352:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002356:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800235a:	e00f      	b.n	800237c <HAL_I2C_Init+0x1dc>
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	1e58      	subs	r0, r3, #1
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	6859      	ldr	r1, [r3, #4]
 8002364:	460b      	mov	r3, r1
 8002366:	009b      	lsls	r3, r3, #2
 8002368:	440b      	add	r3, r1
 800236a:	0099      	lsls	r1, r3, #2
 800236c:	440b      	add	r3, r1
 800236e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002372:	3301      	adds	r3, #1
 8002374:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002378:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800237c:	6879      	ldr	r1, [r7, #4]
 800237e:	6809      	ldr	r1, [r1, #0]
 8002380:	4313      	orrs	r3, r2
 8002382:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	69da      	ldr	r2, [r3, #28]
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	6a1b      	ldr	r3, [r3, #32]
 8002396:	431a      	orrs	r2, r3
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	430a      	orrs	r2, r1
 800239e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	689b      	ldr	r3, [r3, #8]
 80023a6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80023aa:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80023ae:	687a      	ldr	r2, [r7, #4]
 80023b0:	6911      	ldr	r1, [r2, #16]
 80023b2:	687a      	ldr	r2, [r7, #4]
 80023b4:	68d2      	ldr	r2, [r2, #12]
 80023b6:	4311      	orrs	r1, r2
 80023b8:	687a      	ldr	r2, [r7, #4]
 80023ba:	6812      	ldr	r2, [r2, #0]
 80023bc:	430b      	orrs	r3, r1
 80023be:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	68db      	ldr	r3, [r3, #12]
 80023c6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	695a      	ldr	r2, [r3, #20]
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	699b      	ldr	r3, [r3, #24]
 80023d2:	431a      	orrs	r2, r3
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	430a      	orrs	r2, r1
 80023da:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	681a      	ldr	r2, [r3, #0]
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	f042 0201 	orr.w	r2, r2, #1
 80023ea:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	2200      	movs	r2, #0
 80023f0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	2220      	movs	r2, #32
 80023f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	2200      	movs	r2, #0
 80023fe:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	2200      	movs	r2, #0
 8002404:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002408:	2300      	movs	r3, #0
}
 800240a:	4618      	mov	r0, r3
 800240c:	3710      	adds	r7, #16
 800240e:	46bd      	mov	sp, r7
 8002410:	bd80      	pop	{r7, pc}
 8002412:	bf00      	nop
 8002414:	000186a0 	.word	0x000186a0
 8002418:	001e847f 	.word	0x001e847f
 800241c:	003d08ff 	.word	0x003d08ff
 8002420:	431bde83 	.word	0x431bde83
 8002424:	10624dd3 	.word	0x10624dd3

08002428 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002428:	b580      	push	{r7, lr}
 800242a:	b086      	sub	sp, #24
 800242c:	af00      	add	r7, sp, #0
 800242e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	2b00      	cmp	r3, #0
 8002434:	d101      	bne.n	800243a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002436:	2301      	movs	r3, #1
 8002438:	e26c      	b.n	8002914 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	f003 0301 	and.w	r3, r3, #1
 8002442:	2b00      	cmp	r3, #0
 8002444:	f000 8087 	beq.w	8002556 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002448:	4b92      	ldr	r3, [pc, #584]	; (8002694 <HAL_RCC_OscConfig+0x26c>)
 800244a:	685b      	ldr	r3, [r3, #4]
 800244c:	f003 030c 	and.w	r3, r3, #12
 8002450:	2b04      	cmp	r3, #4
 8002452:	d00c      	beq.n	800246e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002454:	4b8f      	ldr	r3, [pc, #572]	; (8002694 <HAL_RCC_OscConfig+0x26c>)
 8002456:	685b      	ldr	r3, [r3, #4]
 8002458:	f003 030c 	and.w	r3, r3, #12
 800245c:	2b08      	cmp	r3, #8
 800245e:	d112      	bne.n	8002486 <HAL_RCC_OscConfig+0x5e>
 8002460:	4b8c      	ldr	r3, [pc, #560]	; (8002694 <HAL_RCC_OscConfig+0x26c>)
 8002462:	685b      	ldr	r3, [r3, #4]
 8002464:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002468:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800246c:	d10b      	bne.n	8002486 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800246e:	4b89      	ldr	r3, [pc, #548]	; (8002694 <HAL_RCC_OscConfig+0x26c>)
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002476:	2b00      	cmp	r3, #0
 8002478:	d06c      	beq.n	8002554 <HAL_RCC_OscConfig+0x12c>
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	685b      	ldr	r3, [r3, #4]
 800247e:	2b00      	cmp	r3, #0
 8002480:	d168      	bne.n	8002554 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002482:	2301      	movs	r3, #1
 8002484:	e246      	b.n	8002914 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	685b      	ldr	r3, [r3, #4]
 800248a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800248e:	d106      	bne.n	800249e <HAL_RCC_OscConfig+0x76>
 8002490:	4b80      	ldr	r3, [pc, #512]	; (8002694 <HAL_RCC_OscConfig+0x26c>)
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	4a7f      	ldr	r2, [pc, #508]	; (8002694 <HAL_RCC_OscConfig+0x26c>)
 8002496:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800249a:	6013      	str	r3, [r2, #0]
 800249c:	e02e      	b.n	80024fc <HAL_RCC_OscConfig+0xd4>
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	685b      	ldr	r3, [r3, #4]
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d10c      	bne.n	80024c0 <HAL_RCC_OscConfig+0x98>
 80024a6:	4b7b      	ldr	r3, [pc, #492]	; (8002694 <HAL_RCC_OscConfig+0x26c>)
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	4a7a      	ldr	r2, [pc, #488]	; (8002694 <HAL_RCC_OscConfig+0x26c>)
 80024ac:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80024b0:	6013      	str	r3, [r2, #0]
 80024b2:	4b78      	ldr	r3, [pc, #480]	; (8002694 <HAL_RCC_OscConfig+0x26c>)
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	4a77      	ldr	r2, [pc, #476]	; (8002694 <HAL_RCC_OscConfig+0x26c>)
 80024b8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80024bc:	6013      	str	r3, [r2, #0]
 80024be:	e01d      	b.n	80024fc <HAL_RCC_OscConfig+0xd4>
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	685b      	ldr	r3, [r3, #4]
 80024c4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80024c8:	d10c      	bne.n	80024e4 <HAL_RCC_OscConfig+0xbc>
 80024ca:	4b72      	ldr	r3, [pc, #456]	; (8002694 <HAL_RCC_OscConfig+0x26c>)
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	4a71      	ldr	r2, [pc, #452]	; (8002694 <HAL_RCC_OscConfig+0x26c>)
 80024d0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80024d4:	6013      	str	r3, [r2, #0]
 80024d6:	4b6f      	ldr	r3, [pc, #444]	; (8002694 <HAL_RCC_OscConfig+0x26c>)
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	4a6e      	ldr	r2, [pc, #440]	; (8002694 <HAL_RCC_OscConfig+0x26c>)
 80024dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80024e0:	6013      	str	r3, [r2, #0]
 80024e2:	e00b      	b.n	80024fc <HAL_RCC_OscConfig+0xd4>
 80024e4:	4b6b      	ldr	r3, [pc, #428]	; (8002694 <HAL_RCC_OscConfig+0x26c>)
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	4a6a      	ldr	r2, [pc, #424]	; (8002694 <HAL_RCC_OscConfig+0x26c>)
 80024ea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80024ee:	6013      	str	r3, [r2, #0]
 80024f0:	4b68      	ldr	r3, [pc, #416]	; (8002694 <HAL_RCC_OscConfig+0x26c>)
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	4a67      	ldr	r2, [pc, #412]	; (8002694 <HAL_RCC_OscConfig+0x26c>)
 80024f6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80024fa:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	685b      	ldr	r3, [r3, #4]
 8002500:	2b00      	cmp	r3, #0
 8002502:	d013      	beq.n	800252c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002504:	f7ff f998 	bl	8001838 <HAL_GetTick>
 8002508:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800250a:	e008      	b.n	800251e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800250c:	f7ff f994 	bl	8001838 <HAL_GetTick>
 8002510:	4602      	mov	r2, r0
 8002512:	693b      	ldr	r3, [r7, #16]
 8002514:	1ad3      	subs	r3, r2, r3
 8002516:	2b64      	cmp	r3, #100	; 0x64
 8002518:	d901      	bls.n	800251e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800251a:	2303      	movs	r3, #3
 800251c:	e1fa      	b.n	8002914 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800251e:	4b5d      	ldr	r3, [pc, #372]	; (8002694 <HAL_RCC_OscConfig+0x26c>)
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002526:	2b00      	cmp	r3, #0
 8002528:	d0f0      	beq.n	800250c <HAL_RCC_OscConfig+0xe4>
 800252a:	e014      	b.n	8002556 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800252c:	f7ff f984 	bl	8001838 <HAL_GetTick>
 8002530:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002532:	e008      	b.n	8002546 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002534:	f7ff f980 	bl	8001838 <HAL_GetTick>
 8002538:	4602      	mov	r2, r0
 800253a:	693b      	ldr	r3, [r7, #16]
 800253c:	1ad3      	subs	r3, r2, r3
 800253e:	2b64      	cmp	r3, #100	; 0x64
 8002540:	d901      	bls.n	8002546 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002542:	2303      	movs	r3, #3
 8002544:	e1e6      	b.n	8002914 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002546:	4b53      	ldr	r3, [pc, #332]	; (8002694 <HAL_RCC_OscConfig+0x26c>)
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800254e:	2b00      	cmp	r3, #0
 8002550:	d1f0      	bne.n	8002534 <HAL_RCC_OscConfig+0x10c>
 8002552:	e000      	b.n	8002556 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002554:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	f003 0302 	and.w	r3, r3, #2
 800255e:	2b00      	cmp	r3, #0
 8002560:	d063      	beq.n	800262a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002562:	4b4c      	ldr	r3, [pc, #304]	; (8002694 <HAL_RCC_OscConfig+0x26c>)
 8002564:	685b      	ldr	r3, [r3, #4]
 8002566:	f003 030c 	and.w	r3, r3, #12
 800256a:	2b00      	cmp	r3, #0
 800256c:	d00b      	beq.n	8002586 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800256e:	4b49      	ldr	r3, [pc, #292]	; (8002694 <HAL_RCC_OscConfig+0x26c>)
 8002570:	685b      	ldr	r3, [r3, #4]
 8002572:	f003 030c 	and.w	r3, r3, #12
 8002576:	2b08      	cmp	r3, #8
 8002578:	d11c      	bne.n	80025b4 <HAL_RCC_OscConfig+0x18c>
 800257a:	4b46      	ldr	r3, [pc, #280]	; (8002694 <HAL_RCC_OscConfig+0x26c>)
 800257c:	685b      	ldr	r3, [r3, #4]
 800257e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002582:	2b00      	cmp	r3, #0
 8002584:	d116      	bne.n	80025b4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002586:	4b43      	ldr	r3, [pc, #268]	; (8002694 <HAL_RCC_OscConfig+0x26c>)
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	f003 0302 	and.w	r3, r3, #2
 800258e:	2b00      	cmp	r3, #0
 8002590:	d005      	beq.n	800259e <HAL_RCC_OscConfig+0x176>
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	691b      	ldr	r3, [r3, #16]
 8002596:	2b01      	cmp	r3, #1
 8002598:	d001      	beq.n	800259e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800259a:	2301      	movs	r3, #1
 800259c:	e1ba      	b.n	8002914 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800259e:	4b3d      	ldr	r3, [pc, #244]	; (8002694 <HAL_RCC_OscConfig+0x26c>)
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	695b      	ldr	r3, [r3, #20]
 80025aa:	00db      	lsls	r3, r3, #3
 80025ac:	4939      	ldr	r1, [pc, #228]	; (8002694 <HAL_RCC_OscConfig+0x26c>)
 80025ae:	4313      	orrs	r3, r2
 80025b0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80025b2:	e03a      	b.n	800262a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	691b      	ldr	r3, [r3, #16]
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d020      	beq.n	80025fe <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80025bc:	4b36      	ldr	r3, [pc, #216]	; (8002698 <HAL_RCC_OscConfig+0x270>)
 80025be:	2201      	movs	r2, #1
 80025c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025c2:	f7ff f939 	bl	8001838 <HAL_GetTick>
 80025c6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80025c8:	e008      	b.n	80025dc <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80025ca:	f7ff f935 	bl	8001838 <HAL_GetTick>
 80025ce:	4602      	mov	r2, r0
 80025d0:	693b      	ldr	r3, [r7, #16]
 80025d2:	1ad3      	subs	r3, r2, r3
 80025d4:	2b02      	cmp	r3, #2
 80025d6:	d901      	bls.n	80025dc <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80025d8:	2303      	movs	r3, #3
 80025da:	e19b      	b.n	8002914 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80025dc:	4b2d      	ldr	r3, [pc, #180]	; (8002694 <HAL_RCC_OscConfig+0x26c>)
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	f003 0302 	and.w	r3, r3, #2
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d0f0      	beq.n	80025ca <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80025e8:	4b2a      	ldr	r3, [pc, #168]	; (8002694 <HAL_RCC_OscConfig+0x26c>)
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	695b      	ldr	r3, [r3, #20]
 80025f4:	00db      	lsls	r3, r3, #3
 80025f6:	4927      	ldr	r1, [pc, #156]	; (8002694 <HAL_RCC_OscConfig+0x26c>)
 80025f8:	4313      	orrs	r3, r2
 80025fa:	600b      	str	r3, [r1, #0]
 80025fc:	e015      	b.n	800262a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80025fe:	4b26      	ldr	r3, [pc, #152]	; (8002698 <HAL_RCC_OscConfig+0x270>)
 8002600:	2200      	movs	r2, #0
 8002602:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002604:	f7ff f918 	bl	8001838 <HAL_GetTick>
 8002608:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800260a:	e008      	b.n	800261e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800260c:	f7ff f914 	bl	8001838 <HAL_GetTick>
 8002610:	4602      	mov	r2, r0
 8002612:	693b      	ldr	r3, [r7, #16]
 8002614:	1ad3      	subs	r3, r2, r3
 8002616:	2b02      	cmp	r3, #2
 8002618:	d901      	bls.n	800261e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800261a:	2303      	movs	r3, #3
 800261c:	e17a      	b.n	8002914 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800261e:	4b1d      	ldr	r3, [pc, #116]	; (8002694 <HAL_RCC_OscConfig+0x26c>)
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	f003 0302 	and.w	r3, r3, #2
 8002626:	2b00      	cmp	r3, #0
 8002628:	d1f0      	bne.n	800260c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	f003 0308 	and.w	r3, r3, #8
 8002632:	2b00      	cmp	r3, #0
 8002634:	d03a      	beq.n	80026ac <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	699b      	ldr	r3, [r3, #24]
 800263a:	2b00      	cmp	r3, #0
 800263c:	d019      	beq.n	8002672 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800263e:	4b17      	ldr	r3, [pc, #92]	; (800269c <HAL_RCC_OscConfig+0x274>)
 8002640:	2201      	movs	r2, #1
 8002642:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002644:	f7ff f8f8 	bl	8001838 <HAL_GetTick>
 8002648:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800264a:	e008      	b.n	800265e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800264c:	f7ff f8f4 	bl	8001838 <HAL_GetTick>
 8002650:	4602      	mov	r2, r0
 8002652:	693b      	ldr	r3, [r7, #16]
 8002654:	1ad3      	subs	r3, r2, r3
 8002656:	2b02      	cmp	r3, #2
 8002658:	d901      	bls.n	800265e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800265a:	2303      	movs	r3, #3
 800265c:	e15a      	b.n	8002914 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800265e:	4b0d      	ldr	r3, [pc, #52]	; (8002694 <HAL_RCC_OscConfig+0x26c>)
 8002660:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002662:	f003 0302 	and.w	r3, r3, #2
 8002666:	2b00      	cmp	r3, #0
 8002668:	d0f0      	beq.n	800264c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800266a:	2001      	movs	r0, #1
 800266c:	f000 fada 	bl	8002c24 <RCC_Delay>
 8002670:	e01c      	b.n	80026ac <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002672:	4b0a      	ldr	r3, [pc, #40]	; (800269c <HAL_RCC_OscConfig+0x274>)
 8002674:	2200      	movs	r2, #0
 8002676:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002678:	f7ff f8de 	bl	8001838 <HAL_GetTick>
 800267c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800267e:	e00f      	b.n	80026a0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002680:	f7ff f8da 	bl	8001838 <HAL_GetTick>
 8002684:	4602      	mov	r2, r0
 8002686:	693b      	ldr	r3, [r7, #16]
 8002688:	1ad3      	subs	r3, r2, r3
 800268a:	2b02      	cmp	r3, #2
 800268c:	d908      	bls.n	80026a0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800268e:	2303      	movs	r3, #3
 8002690:	e140      	b.n	8002914 <HAL_RCC_OscConfig+0x4ec>
 8002692:	bf00      	nop
 8002694:	40021000 	.word	0x40021000
 8002698:	42420000 	.word	0x42420000
 800269c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80026a0:	4b9e      	ldr	r3, [pc, #632]	; (800291c <HAL_RCC_OscConfig+0x4f4>)
 80026a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026a4:	f003 0302 	and.w	r3, r3, #2
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d1e9      	bne.n	8002680 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	f003 0304 	and.w	r3, r3, #4
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	f000 80a6 	beq.w	8002806 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80026ba:	2300      	movs	r3, #0
 80026bc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80026be:	4b97      	ldr	r3, [pc, #604]	; (800291c <HAL_RCC_OscConfig+0x4f4>)
 80026c0:	69db      	ldr	r3, [r3, #28]
 80026c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d10d      	bne.n	80026e6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80026ca:	4b94      	ldr	r3, [pc, #592]	; (800291c <HAL_RCC_OscConfig+0x4f4>)
 80026cc:	69db      	ldr	r3, [r3, #28]
 80026ce:	4a93      	ldr	r2, [pc, #588]	; (800291c <HAL_RCC_OscConfig+0x4f4>)
 80026d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80026d4:	61d3      	str	r3, [r2, #28]
 80026d6:	4b91      	ldr	r3, [pc, #580]	; (800291c <HAL_RCC_OscConfig+0x4f4>)
 80026d8:	69db      	ldr	r3, [r3, #28]
 80026da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026de:	60bb      	str	r3, [r7, #8]
 80026e0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80026e2:	2301      	movs	r3, #1
 80026e4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026e6:	4b8e      	ldr	r3, [pc, #568]	; (8002920 <HAL_RCC_OscConfig+0x4f8>)
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d118      	bne.n	8002724 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80026f2:	4b8b      	ldr	r3, [pc, #556]	; (8002920 <HAL_RCC_OscConfig+0x4f8>)
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	4a8a      	ldr	r2, [pc, #552]	; (8002920 <HAL_RCC_OscConfig+0x4f8>)
 80026f8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80026fc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80026fe:	f7ff f89b 	bl	8001838 <HAL_GetTick>
 8002702:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002704:	e008      	b.n	8002718 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002706:	f7ff f897 	bl	8001838 <HAL_GetTick>
 800270a:	4602      	mov	r2, r0
 800270c:	693b      	ldr	r3, [r7, #16]
 800270e:	1ad3      	subs	r3, r2, r3
 8002710:	2b64      	cmp	r3, #100	; 0x64
 8002712:	d901      	bls.n	8002718 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002714:	2303      	movs	r3, #3
 8002716:	e0fd      	b.n	8002914 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002718:	4b81      	ldr	r3, [pc, #516]	; (8002920 <HAL_RCC_OscConfig+0x4f8>)
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002720:	2b00      	cmp	r3, #0
 8002722:	d0f0      	beq.n	8002706 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	68db      	ldr	r3, [r3, #12]
 8002728:	2b01      	cmp	r3, #1
 800272a:	d106      	bne.n	800273a <HAL_RCC_OscConfig+0x312>
 800272c:	4b7b      	ldr	r3, [pc, #492]	; (800291c <HAL_RCC_OscConfig+0x4f4>)
 800272e:	6a1b      	ldr	r3, [r3, #32]
 8002730:	4a7a      	ldr	r2, [pc, #488]	; (800291c <HAL_RCC_OscConfig+0x4f4>)
 8002732:	f043 0301 	orr.w	r3, r3, #1
 8002736:	6213      	str	r3, [r2, #32]
 8002738:	e02d      	b.n	8002796 <HAL_RCC_OscConfig+0x36e>
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	68db      	ldr	r3, [r3, #12]
 800273e:	2b00      	cmp	r3, #0
 8002740:	d10c      	bne.n	800275c <HAL_RCC_OscConfig+0x334>
 8002742:	4b76      	ldr	r3, [pc, #472]	; (800291c <HAL_RCC_OscConfig+0x4f4>)
 8002744:	6a1b      	ldr	r3, [r3, #32]
 8002746:	4a75      	ldr	r2, [pc, #468]	; (800291c <HAL_RCC_OscConfig+0x4f4>)
 8002748:	f023 0301 	bic.w	r3, r3, #1
 800274c:	6213      	str	r3, [r2, #32]
 800274e:	4b73      	ldr	r3, [pc, #460]	; (800291c <HAL_RCC_OscConfig+0x4f4>)
 8002750:	6a1b      	ldr	r3, [r3, #32]
 8002752:	4a72      	ldr	r2, [pc, #456]	; (800291c <HAL_RCC_OscConfig+0x4f4>)
 8002754:	f023 0304 	bic.w	r3, r3, #4
 8002758:	6213      	str	r3, [r2, #32]
 800275a:	e01c      	b.n	8002796 <HAL_RCC_OscConfig+0x36e>
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	68db      	ldr	r3, [r3, #12]
 8002760:	2b05      	cmp	r3, #5
 8002762:	d10c      	bne.n	800277e <HAL_RCC_OscConfig+0x356>
 8002764:	4b6d      	ldr	r3, [pc, #436]	; (800291c <HAL_RCC_OscConfig+0x4f4>)
 8002766:	6a1b      	ldr	r3, [r3, #32]
 8002768:	4a6c      	ldr	r2, [pc, #432]	; (800291c <HAL_RCC_OscConfig+0x4f4>)
 800276a:	f043 0304 	orr.w	r3, r3, #4
 800276e:	6213      	str	r3, [r2, #32]
 8002770:	4b6a      	ldr	r3, [pc, #424]	; (800291c <HAL_RCC_OscConfig+0x4f4>)
 8002772:	6a1b      	ldr	r3, [r3, #32]
 8002774:	4a69      	ldr	r2, [pc, #420]	; (800291c <HAL_RCC_OscConfig+0x4f4>)
 8002776:	f043 0301 	orr.w	r3, r3, #1
 800277a:	6213      	str	r3, [r2, #32]
 800277c:	e00b      	b.n	8002796 <HAL_RCC_OscConfig+0x36e>
 800277e:	4b67      	ldr	r3, [pc, #412]	; (800291c <HAL_RCC_OscConfig+0x4f4>)
 8002780:	6a1b      	ldr	r3, [r3, #32]
 8002782:	4a66      	ldr	r2, [pc, #408]	; (800291c <HAL_RCC_OscConfig+0x4f4>)
 8002784:	f023 0301 	bic.w	r3, r3, #1
 8002788:	6213      	str	r3, [r2, #32]
 800278a:	4b64      	ldr	r3, [pc, #400]	; (800291c <HAL_RCC_OscConfig+0x4f4>)
 800278c:	6a1b      	ldr	r3, [r3, #32]
 800278e:	4a63      	ldr	r2, [pc, #396]	; (800291c <HAL_RCC_OscConfig+0x4f4>)
 8002790:	f023 0304 	bic.w	r3, r3, #4
 8002794:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	68db      	ldr	r3, [r3, #12]
 800279a:	2b00      	cmp	r3, #0
 800279c:	d015      	beq.n	80027ca <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800279e:	f7ff f84b 	bl	8001838 <HAL_GetTick>
 80027a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80027a4:	e00a      	b.n	80027bc <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80027a6:	f7ff f847 	bl	8001838 <HAL_GetTick>
 80027aa:	4602      	mov	r2, r0
 80027ac:	693b      	ldr	r3, [r7, #16]
 80027ae:	1ad3      	subs	r3, r2, r3
 80027b0:	f241 3288 	movw	r2, #5000	; 0x1388
 80027b4:	4293      	cmp	r3, r2
 80027b6:	d901      	bls.n	80027bc <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80027b8:	2303      	movs	r3, #3
 80027ba:	e0ab      	b.n	8002914 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80027bc:	4b57      	ldr	r3, [pc, #348]	; (800291c <HAL_RCC_OscConfig+0x4f4>)
 80027be:	6a1b      	ldr	r3, [r3, #32]
 80027c0:	f003 0302 	and.w	r3, r3, #2
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d0ee      	beq.n	80027a6 <HAL_RCC_OscConfig+0x37e>
 80027c8:	e014      	b.n	80027f4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80027ca:	f7ff f835 	bl	8001838 <HAL_GetTick>
 80027ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80027d0:	e00a      	b.n	80027e8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80027d2:	f7ff f831 	bl	8001838 <HAL_GetTick>
 80027d6:	4602      	mov	r2, r0
 80027d8:	693b      	ldr	r3, [r7, #16]
 80027da:	1ad3      	subs	r3, r2, r3
 80027dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80027e0:	4293      	cmp	r3, r2
 80027e2:	d901      	bls.n	80027e8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80027e4:	2303      	movs	r3, #3
 80027e6:	e095      	b.n	8002914 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80027e8:	4b4c      	ldr	r3, [pc, #304]	; (800291c <HAL_RCC_OscConfig+0x4f4>)
 80027ea:	6a1b      	ldr	r3, [r3, #32]
 80027ec:	f003 0302 	and.w	r3, r3, #2
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d1ee      	bne.n	80027d2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80027f4:	7dfb      	ldrb	r3, [r7, #23]
 80027f6:	2b01      	cmp	r3, #1
 80027f8:	d105      	bne.n	8002806 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80027fa:	4b48      	ldr	r3, [pc, #288]	; (800291c <HAL_RCC_OscConfig+0x4f4>)
 80027fc:	69db      	ldr	r3, [r3, #28]
 80027fe:	4a47      	ldr	r2, [pc, #284]	; (800291c <HAL_RCC_OscConfig+0x4f4>)
 8002800:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002804:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	69db      	ldr	r3, [r3, #28]
 800280a:	2b00      	cmp	r3, #0
 800280c:	f000 8081 	beq.w	8002912 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002810:	4b42      	ldr	r3, [pc, #264]	; (800291c <HAL_RCC_OscConfig+0x4f4>)
 8002812:	685b      	ldr	r3, [r3, #4]
 8002814:	f003 030c 	and.w	r3, r3, #12
 8002818:	2b08      	cmp	r3, #8
 800281a:	d061      	beq.n	80028e0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	69db      	ldr	r3, [r3, #28]
 8002820:	2b02      	cmp	r3, #2
 8002822:	d146      	bne.n	80028b2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002824:	4b3f      	ldr	r3, [pc, #252]	; (8002924 <HAL_RCC_OscConfig+0x4fc>)
 8002826:	2200      	movs	r2, #0
 8002828:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800282a:	f7ff f805 	bl	8001838 <HAL_GetTick>
 800282e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002830:	e008      	b.n	8002844 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002832:	f7ff f801 	bl	8001838 <HAL_GetTick>
 8002836:	4602      	mov	r2, r0
 8002838:	693b      	ldr	r3, [r7, #16]
 800283a:	1ad3      	subs	r3, r2, r3
 800283c:	2b02      	cmp	r3, #2
 800283e:	d901      	bls.n	8002844 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002840:	2303      	movs	r3, #3
 8002842:	e067      	b.n	8002914 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002844:	4b35      	ldr	r3, [pc, #212]	; (800291c <HAL_RCC_OscConfig+0x4f4>)
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800284c:	2b00      	cmp	r3, #0
 800284e:	d1f0      	bne.n	8002832 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	6a1b      	ldr	r3, [r3, #32]
 8002854:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002858:	d108      	bne.n	800286c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800285a:	4b30      	ldr	r3, [pc, #192]	; (800291c <HAL_RCC_OscConfig+0x4f4>)
 800285c:	685b      	ldr	r3, [r3, #4]
 800285e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	689b      	ldr	r3, [r3, #8]
 8002866:	492d      	ldr	r1, [pc, #180]	; (800291c <HAL_RCC_OscConfig+0x4f4>)
 8002868:	4313      	orrs	r3, r2
 800286a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800286c:	4b2b      	ldr	r3, [pc, #172]	; (800291c <HAL_RCC_OscConfig+0x4f4>)
 800286e:	685b      	ldr	r3, [r3, #4]
 8002870:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	6a19      	ldr	r1, [r3, #32]
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800287c:	430b      	orrs	r3, r1
 800287e:	4927      	ldr	r1, [pc, #156]	; (800291c <HAL_RCC_OscConfig+0x4f4>)
 8002880:	4313      	orrs	r3, r2
 8002882:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002884:	4b27      	ldr	r3, [pc, #156]	; (8002924 <HAL_RCC_OscConfig+0x4fc>)
 8002886:	2201      	movs	r2, #1
 8002888:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800288a:	f7fe ffd5 	bl	8001838 <HAL_GetTick>
 800288e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002890:	e008      	b.n	80028a4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002892:	f7fe ffd1 	bl	8001838 <HAL_GetTick>
 8002896:	4602      	mov	r2, r0
 8002898:	693b      	ldr	r3, [r7, #16]
 800289a:	1ad3      	subs	r3, r2, r3
 800289c:	2b02      	cmp	r3, #2
 800289e:	d901      	bls.n	80028a4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80028a0:	2303      	movs	r3, #3
 80028a2:	e037      	b.n	8002914 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80028a4:	4b1d      	ldr	r3, [pc, #116]	; (800291c <HAL_RCC_OscConfig+0x4f4>)
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d0f0      	beq.n	8002892 <HAL_RCC_OscConfig+0x46a>
 80028b0:	e02f      	b.n	8002912 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80028b2:	4b1c      	ldr	r3, [pc, #112]	; (8002924 <HAL_RCC_OscConfig+0x4fc>)
 80028b4:	2200      	movs	r2, #0
 80028b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028b8:	f7fe ffbe 	bl	8001838 <HAL_GetTick>
 80028bc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80028be:	e008      	b.n	80028d2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80028c0:	f7fe ffba 	bl	8001838 <HAL_GetTick>
 80028c4:	4602      	mov	r2, r0
 80028c6:	693b      	ldr	r3, [r7, #16]
 80028c8:	1ad3      	subs	r3, r2, r3
 80028ca:	2b02      	cmp	r3, #2
 80028cc:	d901      	bls.n	80028d2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80028ce:	2303      	movs	r3, #3
 80028d0:	e020      	b.n	8002914 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80028d2:	4b12      	ldr	r3, [pc, #72]	; (800291c <HAL_RCC_OscConfig+0x4f4>)
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d1f0      	bne.n	80028c0 <HAL_RCC_OscConfig+0x498>
 80028de:	e018      	b.n	8002912 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	69db      	ldr	r3, [r3, #28]
 80028e4:	2b01      	cmp	r3, #1
 80028e6:	d101      	bne.n	80028ec <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80028e8:	2301      	movs	r3, #1
 80028ea:	e013      	b.n	8002914 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80028ec:	4b0b      	ldr	r3, [pc, #44]	; (800291c <HAL_RCC_OscConfig+0x4f4>)
 80028ee:	685b      	ldr	r3, [r3, #4]
 80028f0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	6a1b      	ldr	r3, [r3, #32]
 80028fc:	429a      	cmp	r2, r3
 80028fe:	d106      	bne.n	800290e <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800290a:	429a      	cmp	r2, r3
 800290c:	d001      	beq.n	8002912 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 800290e:	2301      	movs	r3, #1
 8002910:	e000      	b.n	8002914 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8002912:	2300      	movs	r3, #0
}
 8002914:	4618      	mov	r0, r3
 8002916:	3718      	adds	r7, #24
 8002918:	46bd      	mov	sp, r7
 800291a:	bd80      	pop	{r7, pc}
 800291c:	40021000 	.word	0x40021000
 8002920:	40007000 	.word	0x40007000
 8002924:	42420060 	.word	0x42420060

08002928 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002928:	b580      	push	{r7, lr}
 800292a:	b084      	sub	sp, #16
 800292c:	af00      	add	r7, sp, #0
 800292e:	6078      	str	r0, [r7, #4]
 8002930:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	2b00      	cmp	r3, #0
 8002936:	d101      	bne.n	800293c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002938:	2301      	movs	r3, #1
 800293a:	e0d0      	b.n	8002ade <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800293c:	4b6a      	ldr	r3, [pc, #424]	; (8002ae8 <HAL_RCC_ClockConfig+0x1c0>)
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	f003 0307 	and.w	r3, r3, #7
 8002944:	683a      	ldr	r2, [r7, #0]
 8002946:	429a      	cmp	r2, r3
 8002948:	d910      	bls.n	800296c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800294a:	4b67      	ldr	r3, [pc, #412]	; (8002ae8 <HAL_RCC_ClockConfig+0x1c0>)
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	f023 0207 	bic.w	r2, r3, #7
 8002952:	4965      	ldr	r1, [pc, #404]	; (8002ae8 <HAL_RCC_ClockConfig+0x1c0>)
 8002954:	683b      	ldr	r3, [r7, #0]
 8002956:	4313      	orrs	r3, r2
 8002958:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800295a:	4b63      	ldr	r3, [pc, #396]	; (8002ae8 <HAL_RCC_ClockConfig+0x1c0>)
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	f003 0307 	and.w	r3, r3, #7
 8002962:	683a      	ldr	r2, [r7, #0]
 8002964:	429a      	cmp	r2, r3
 8002966:	d001      	beq.n	800296c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002968:	2301      	movs	r3, #1
 800296a:	e0b8      	b.n	8002ade <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	f003 0302 	and.w	r3, r3, #2
 8002974:	2b00      	cmp	r3, #0
 8002976:	d020      	beq.n	80029ba <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	f003 0304 	and.w	r3, r3, #4
 8002980:	2b00      	cmp	r3, #0
 8002982:	d005      	beq.n	8002990 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002984:	4b59      	ldr	r3, [pc, #356]	; (8002aec <HAL_RCC_ClockConfig+0x1c4>)
 8002986:	685b      	ldr	r3, [r3, #4]
 8002988:	4a58      	ldr	r2, [pc, #352]	; (8002aec <HAL_RCC_ClockConfig+0x1c4>)
 800298a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800298e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	f003 0308 	and.w	r3, r3, #8
 8002998:	2b00      	cmp	r3, #0
 800299a:	d005      	beq.n	80029a8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800299c:	4b53      	ldr	r3, [pc, #332]	; (8002aec <HAL_RCC_ClockConfig+0x1c4>)
 800299e:	685b      	ldr	r3, [r3, #4]
 80029a0:	4a52      	ldr	r2, [pc, #328]	; (8002aec <HAL_RCC_ClockConfig+0x1c4>)
 80029a2:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80029a6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80029a8:	4b50      	ldr	r3, [pc, #320]	; (8002aec <HAL_RCC_ClockConfig+0x1c4>)
 80029aa:	685b      	ldr	r3, [r3, #4]
 80029ac:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	689b      	ldr	r3, [r3, #8]
 80029b4:	494d      	ldr	r1, [pc, #308]	; (8002aec <HAL_RCC_ClockConfig+0x1c4>)
 80029b6:	4313      	orrs	r3, r2
 80029b8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	f003 0301 	and.w	r3, r3, #1
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d040      	beq.n	8002a48 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	685b      	ldr	r3, [r3, #4]
 80029ca:	2b01      	cmp	r3, #1
 80029cc:	d107      	bne.n	80029de <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80029ce:	4b47      	ldr	r3, [pc, #284]	; (8002aec <HAL_RCC_ClockConfig+0x1c4>)
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d115      	bne.n	8002a06 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80029da:	2301      	movs	r3, #1
 80029dc:	e07f      	b.n	8002ade <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	685b      	ldr	r3, [r3, #4]
 80029e2:	2b02      	cmp	r3, #2
 80029e4:	d107      	bne.n	80029f6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80029e6:	4b41      	ldr	r3, [pc, #260]	; (8002aec <HAL_RCC_ClockConfig+0x1c4>)
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d109      	bne.n	8002a06 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80029f2:	2301      	movs	r3, #1
 80029f4:	e073      	b.n	8002ade <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80029f6:	4b3d      	ldr	r3, [pc, #244]	; (8002aec <HAL_RCC_ClockConfig+0x1c4>)
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	f003 0302 	and.w	r3, r3, #2
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d101      	bne.n	8002a06 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a02:	2301      	movs	r3, #1
 8002a04:	e06b      	b.n	8002ade <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002a06:	4b39      	ldr	r3, [pc, #228]	; (8002aec <HAL_RCC_ClockConfig+0x1c4>)
 8002a08:	685b      	ldr	r3, [r3, #4]
 8002a0a:	f023 0203 	bic.w	r2, r3, #3
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	685b      	ldr	r3, [r3, #4]
 8002a12:	4936      	ldr	r1, [pc, #216]	; (8002aec <HAL_RCC_ClockConfig+0x1c4>)
 8002a14:	4313      	orrs	r3, r2
 8002a16:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002a18:	f7fe ff0e 	bl	8001838 <HAL_GetTick>
 8002a1c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a1e:	e00a      	b.n	8002a36 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002a20:	f7fe ff0a 	bl	8001838 <HAL_GetTick>
 8002a24:	4602      	mov	r2, r0
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	1ad3      	subs	r3, r2, r3
 8002a2a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a2e:	4293      	cmp	r3, r2
 8002a30:	d901      	bls.n	8002a36 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002a32:	2303      	movs	r3, #3
 8002a34:	e053      	b.n	8002ade <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a36:	4b2d      	ldr	r3, [pc, #180]	; (8002aec <HAL_RCC_ClockConfig+0x1c4>)
 8002a38:	685b      	ldr	r3, [r3, #4]
 8002a3a:	f003 020c 	and.w	r2, r3, #12
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	685b      	ldr	r3, [r3, #4]
 8002a42:	009b      	lsls	r3, r3, #2
 8002a44:	429a      	cmp	r2, r3
 8002a46:	d1eb      	bne.n	8002a20 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002a48:	4b27      	ldr	r3, [pc, #156]	; (8002ae8 <HAL_RCC_ClockConfig+0x1c0>)
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	f003 0307 	and.w	r3, r3, #7
 8002a50:	683a      	ldr	r2, [r7, #0]
 8002a52:	429a      	cmp	r2, r3
 8002a54:	d210      	bcs.n	8002a78 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a56:	4b24      	ldr	r3, [pc, #144]	; (8002ae8 <HAL_RCC_ClockConfig+0x1c0>)
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	f023 0207 	bic.w	r2, r3, #7
 8002a5e:	4922      	ldr	r1, [pc, #136]	; (8002ae8 <HAL_RCC_ClockConfig+0x1c0>)
 8002a60:	683b      	ldr	r3, [r7, #0]
 8002a62:	4313      	orrs	r3, r2
 8002a64:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a66:	4b20      	ldr	r3, [pc, #128]	; (8002ae8 <HAL_RCC_ClockConfig+0x1c0>)
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	f003 0307 	and.w	r3, r3, #7
 8002a6e:	683a      	ldr	r2, [r7, #0]
 8002a70:	429a      	cmp	r2, r3
 8002a72:	d001      	beq.n	8002a78 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002a74:	2301      	movs	r3, #1
 8002a76:	e032      	b.n	8002ade <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	f003 0304 	and.w	r3, r3, #4
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d008      	beq.n	8002a96 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002a84:	4b19      	ldr	r3, [pc, #100]	; (8002aec <HAL_RCC_ClockConfig+0x1c4>)
 8002a86:	685b      	ldr	r3, [r3, #4]
 8002a88:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	68db      	ldr	r3, [r3, #12]
 8002a90:	4916      	ldr	r1, [pc, #88]	; (8002aec <HAL_RCC_ClockConfig+0x1c4>)
 8002a92:	4313      	orrs	r3, r2
 8002a94:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	f003 0308 	and.w	r3, r3, #8
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d009      	beq.n	8002ab6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002aa2:	4b12      	ldr	r3, [pc, #72]	; (8002aec <HAL_RCC_ClockConfig+0x1c4>)
 8002aa4:	685b      	ldr	r3, [r3, #4]
 8002aa6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	691b      	ldr	r3, [r3, #16]
 8002aae:	00db      	lsls	r3, r3, #3
 8002ab0:	490e      	ldr	r1, [pc, #56]	; (8002aec <HAL_RCC_ClockConfig+0x1c4>)
 8002ab2:	4313      	orrs	r3, r2
 8002ab4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002ab6:	f000 f821 	bl	8002afc <HAL_RCC_GetSysClockFreq>
 8002aba:	4602      	mov	r2, r0
 8002abc:	4b0b      	ldr	r3, [pc, #44]	; (8002aec <HAL_RCC_ClockConfig+0x1c4>)
 8002abe:	685b      	ldr	r3, [r3, #4]
 8002ac0:	091b      	lsrs	r3, r3, #4
 8002ac2:	f003 030f 	and.w	r3, r3, #15
 8002ac6:	490a      	ldr	r1, [pc, #40]	; (8002af0 <HAL_RCC_ClockConfig+0x1c8>)
 8002ac8:	5ccb      	ldrb	r3, [r1, r3]
 8002aca:	fa22 f303 	lsr.w	r3, r2, r3
 8002ace:	4a09      	ldr	r2, [pc, #36]	; (8002af4 <HAL_RCC_ClockConfig+0x1cc>)
 8002ad0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002ad2:	4b09      	ldr	r3, [pc, #36]	; (8002af8 <HAL_RCC_ClockConfig+0x1d0>)
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	4618      	mov	r0, r3
 8002ad8:	f7fe fe6c 	bl	80017b4 <HAL_InitTick>

  return HAL_OK;
 8002adc:	2300      	movs	r3, #0
}
 8002ade:	4618      	mov	r0, r3
 8002ae0:	3710      	adds	r7, #16
 8002ae2:	46bd      	mov	sp, r7
 8002ae4:	bd80      	pop	{r7, pc}
 8002ae6:	bf00      	nop
 8002ae8:	40022000 	.word	0x40022000
 8002aec:	40021000 	.word	0x40021000
 8002af0:	080053e8 	.word	0x080053e8
 8002af4:	20000000 	.word	0x20000000
 8002af8:	20000004 	.word	0x20000004

08002afc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002afc:	b490      	push	{r4, r7}
 8002afe:	b08a      	sub	sp, #40	; 0x28
 8002b00:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002b02:	4b2a      	ldr	r3, [pc, #168]	; (8002bac <HAL_RCC_GetSysClockFreq+0xb0>)
 8002b04:	1d3c      	adds	r4, r7, #4
 8002b06:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002b08:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002b0c:	f240 2301 	movw	r3, #513	; 0x201
 8002b10:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002b12:	2300      	movs	r3, #0
 8002b14:	61fb      	str	r3, [r7, #28]
 8002b16:	2300      	movs	r3, #0
 8002b18:	61bb      	str	r3, [r7, #24]
 8002b1a:	2300      	movs	r3, #0
 8002b1c:	627b      	str	r3, [r7, #36]	; 0x24
 8002b1e:	2300      	movs	r3, #0
 8002b20:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002b22:	2300      	movs	r3, #0
 8002b24:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002b26:	4b22      	ldr	r3, [pc, #136]	; (8002bb0 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002b28:	685b      	ldr	r3, [r3, #4]
 8002b2a:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002b2c:	69fb      	ldr	r3, [r7, #28]
 8002b2e:	f003 030c 	and.w	r3, r3, #12
 8002b32:	2b04      	cmp	r3, #4
 8002b34:	d002      	beq.n	8002b3c <HAL_RCC_GetSysClockFreq+0x40>
 8002b36:	2b08      	cmp	r3, #8
 8002b38:	d003      	beq.n	8002b42 <HAL_RCC_GetSysClockFreq+0x46>
 8002b3a:	e02d      	b.n	8002b98 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002b3c:	4b1d      	ldr	r3, [pc, #116]	; (8002bb4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002b3e:	623b      	str	r3, [r7, #32]
      break;
 8002b40:	e02d      	b.n	8002b9e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002b42:	69fb      	ldr	r3, [r7, #28]
 8002b44:	0c9b      	lsrs	r3, r3, #18
 8002b46:	f003 030f 	and.w	r3, r3, #15
 8002b4a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002b4e:	4413      	add	r3, r2
 8002b50:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002b54:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002b56:	69fb      	ldr	r3, [r7, #28]
 8002b58:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d013      	beq.n	8002b88 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002b60:	4b13      	ldr	r3, [pc, #76]	; (8002bb0 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002b62:	685b      	ldr	r3, [r3, #4]
 8002b64:	0c5b      	lsrs	r3, r3, #17
 8002b66:	f003 0301 	and.w	r3, r3, #1
 8002b6a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002b6e:	4413      	add	r3, r2
 8002b70:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002b74:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002b76:	697b      	ldr	r3, [r7, #20]
 8002b78:	4a0e      	ldr	r2, [pc, #56]	; (8002bb4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002b7a:	fb02 f203 	mul.w	r2, r2, r3
 8002b7e:	69bb      	ldr	r3, [r7, #24]
 8002b80:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b84:	627b      	str	r3, [r7, #36]	; 0x24
 8002b86:	e004      	b.n	8002b92 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002b88:	697b      	ldr	r3, [r7, #20]
 8002b8a:	4a0b      	ldr	r2, [pc, #44]	; (8002bb8 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002b8c:	fb02 f303 	mul.w	r3, r2, r3
 8002b90:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8002b92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b94:	623b      	str	r3, [r7, #32]
      break;
 8002b96:	e002      	b.n	8002b9e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002b98:	4b08      	ldr	r3, [pc, #32]	; (8002bbc <HAL_RCC_GetSysClockFreq+0xc0>)
 8002b9a:	623b      	str	r3, [r7, #32]
      break;
 8002b9c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002b9e:	6a3b      	ldr	r3, [r7, #32]
}
 8002ba0:	4618      	mov	r0, r3
 8002ba2:	3728      	adds	r7, #40	; 0x28
 8002ba4:	46bd      	mov	sp, r7
 8002ba6:	bc90      	pop	{r4, r7}
 8002ba8:	4770      	bx	lr
 8002baa:	bf00      	nop
 8002bac:	080053d8 	.word	0x080053d8
 8002bb0:	40021000 	.word	0x40021000
 8002bb4:	00f42400 	.word	0x00f42400
 8002bb8:	003d0900 	.word	0x003d0900
 8002bbc:	007a1200 	.word	0x007a1200

08002bc0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002bc0:	b480      	push	{r7}
 8002bc2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002bc4:	4b02      	ldr	r3, [pc, #8]	; (8002bd0 <HAL_RCC_GetHCLKFreq+0x10>)
 8002bc6:	681b      	ldr	r3, [r3, #0]
}
 8002bc8:	4618      	mov	r0, r3
 8002bca:	46bd      	mov	sp, r7
 8002bcc:	bc80      	pop	{r7}
 8002bce:	4770      	bx	lr
 8002bd0:	20000000 	.word	0x20000000

08002bd4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002bd4:	b580      	push	{r7, lr}
 8002bd6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002bd8:	f7ff fff2 	bl	8002bc0 <HAL_RCC_GetHCLKFreq>
 8002bdc:	4602      	mov	r2, r0
 8002bde:	4b05      	ldr	r3, [pc, #20]	; (8002bf4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002be0:	685b      	ldr	r3, [r3, #4]
 8002be2:	0a1b      	lsrs	r3, r3, #8
 8002be4:	f003 0307 	and.w	r3, r3, #7
 8002be8:	4903      	ldr	r1, [pc, #12]	; (8002bf8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002bea:	5ccb      	ldrb	r3, [r1, r3]
 8002bec:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002bf0:	4618      	mov	r0, r3
 8002bf2:	bd80      	pop	{r7, pc}
 8002bf4:	40021000 	.word	0x40021000
 8002bf8:	080053f8 	.word	0x080053f8

08002bfc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002bfc:	b580      	push	{r7, lr}
 8002bfe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002c00:	f7ff ffde 	bl	8002bc0 <HAL_RCC_GetHCLKFreq>
 8002c04:	4602      	mov	r2, r0
 8002c06:	4b05      	ldr	r3, [pc, #20]	; (8002c1c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002c08:	685b      	ldr	r3, [r3, #4]
 8002c0a:	0adb      	lsrs	r3, r3, #11
 8002c0c:	f003 0307 	and.w	r3, r3, #7
 8002c10:	4903      	ldr	r1, [pc, #12]	; (8002c20 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002c12:	5ccb      	ldrb	r3, [r1, r3]
 8002c14:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002c18:	4618      	mov	r0, r3
 8002c1a:	bd80      	pop	{r7, pc}
 8002c1c:	40021000 	.word	0x40021000
 8002c20:	080053f8 	.word	0x080053f8

08002c24 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002c24:	b480      	push	{r7}
 8002c26:	b085      	sub	sp, #20
 8002c28:	af00      	add	r7, sp, #0
 8002c2a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002c2c:	4b0a      	ldr	r3, [pc, #40]	; (8002c58 <RCC_Delay+0x34>)
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	4a0a      	ldr	r2, [pc, #40]	; (8002c5c <RCC_Delay+0x38>)
 8002c32:	fba2 2303 	umull	r2, r3, r2, r3
 8002c36:	0a5b      	lsrs	r3, r3, #9
 8002c38:	687a      	ldr	r2, [r7, #4]
 8002c3a:	fb02 f303 	mul.w	r3, r2, r3
 8002c3e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002c40:	bf00      	nop
  }
  while (Delay --);
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	1e5a      	subs	r2, r3, #1
 8002c46:	60fa      	str	r2, [r7, #12]
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d1f9      	bne.n	8002c40 <RCC_Delay+0x1c>
}
 8002c4c:	bf00      	nop
 8002c4e:	bf00      	nop
 8002c50:	3714      	adds	r7, #20
 8002c52:	46bd      	mov	sp, r7
 8002c54:	bc80      	pop	{r7}
 8002c56:	4770      	bx	lr
 8002c58:	20000000 	.word	0x20000000
 8002c5c:	10624dd3 	.word	0x10624dd3

08002c60 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002c60:	b580      	push	{r7, lr}
 8002c62:	b082      	sub	sp, #8
 8002c64:	af00      	add	r7, sp, #0
 8002c66:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d101      	bne.n	8002c72 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002c6e:	2301      	movs	r3, #1
 8002c70:	e076      	b.n	8002d60 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d108      	bne.n	8002c8c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	685b      	ldr	r3, [r3, #4]
 8002c7e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002c82:	d009      	beq.n	8002c98 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	2200      	movs	r2, #0
 8002c88:	61da      	str	r2, [r3, #28]
 8002c8a:	e005      	b.n	8002c98 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	2200      	movs	r2, #0
 8002c90:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	2200      	movs	r2, #0
 8002c96:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	2200      	movs	r2, #0
 8002c9c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002ca4:	b2db      	uxtb	r3, r3
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d106      	bne.n	8002cb8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	2200      	movs	r2, #0
 8002cae:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002cb2:	6878      	ldr	r0, [r7, #4]
 8002cb4:	f7fe fad6 	bl	8001264 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	2202      	movs	r2, #2
 8002cbc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	681a      	ldr	r2, [r3, #0]
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002cce:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	685b      	ldr	r3, [r3, #4]
 8002cd4:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	689b      	ldr	r3, [r3, #8]
 8002cdc:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8002ce0:	431a      	orrs	r2, r3
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	68db      	ldr	r3, [r3, #12]
 8002ce6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002cea:	431a      	orrs	r2, r3
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	691b      	ldr	r3, [r3, #16]
 8002cf0:	f003 0302 	and.w	r3, r3, #2
 8002cf4:	431a      	orrs	r2, r3
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	695b      	ldr	r3, [r3, #20]
 8002cfa:	f003 0301 	and.w	r3, r3, #1
 8002cfe:	431a      	orrs	r2, r3
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	699b      	ldr	r3, [r3, #24]
 8002d04:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002d08:	431a      	orrs	r2, r3
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	69db      	ldr	r3, [r3, #28]
 8002d0e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002d12:	431a      	orrs	r2, r3
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	6a1b      	ldr	r3, [r3, #32]
 8002d18:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d1c:	ea42 0103 	orr.w	r1, r2, r3
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d24:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	430a      	orrs	r2, r1
 8002d2e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	699b      	ldr	r3, [r3, #24]
 8002d34:	0c1a      	lsrs	r2, r3, #16
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	f002 0204 	and.w	r2, r2, #4
 8002d3e:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	69da      	ldr	r2, [r3, #28]
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002d4e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	2200      	movs	r2, #0
 8002d54:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	2201      	movs	r2, #1
 8002d5a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8002d5e:	2300      	movs	r3, #0
}
 8002d60:	4618      	mov	r0, r3
 8002d62:	3708      	adds	r7, #8
 8002d64:	46bd      	mov	sp, r7
 8002d66:	bd80      	pop	{r7, pc}

08002d68 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002d68:	b580      	push	{r7, lr}
 8002d6a:	b082      	sub	sp, #8
 8002d6c:	af00      	add	r7, sp, #0
 8002d6e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d101      	bne.n	8002d7a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002d76:	2301      	movs	r3, #1
 8002d78:	e041      	b.n	8002dfe <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d80:	b2db      	uxtb	r3, r3
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d106      	bne.n	8002d94 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	2200      	movs	r2, #0
 8002d8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002d8e:	6878      	ldr	r0, [r7, #4]
 8002d90:	f7fe fab4 	bl	80012fc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	2202      	movs	r2, #2
 8002d98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681a      	ldr	r2, [r3, #0]
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	3304      	adds	r3, #4
 8002da4:	4619      	mov	r1, r3
 8002da6:	4610      	mov	r0, r2
 8002da8:	f000 ffa0 	bl	8003cec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	2201      	movs	r2, #1
 8002db0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	2201      	movs	r2, #1
 8002db8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	2201      	movs	r2, #1
 8002dc0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	2201      	movs	r2, #1
 8002dc8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	2201      	movs	r2, #1
 8002dd0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	2201      	movs	r2, #1
 8002dd8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	2201      	movs	r2, #1
 8002de0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	2201      	movs	r2, #1
 8002de8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	2201      	movs	r2, #1
 8002df0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	2201      	movs	r2, #1
 8002df8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002dfc:	2300      	movs	r3, #0
}
 8002dfe:	4618      	mov	r0, r3
 8002e00:	3708      	adds	r7, #8
 8002e02:	46bd      	mov	sp, r7
 8002e04:	bd80      	pop	{r7, pc}
	...

08002e08 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002e08:	b480      	push	{r7}
 8002e0a:	b085      	sub	sp, #20
 8002e0c:	af00      	add	r7, sp, #0
 8002e0e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e16:	b2db      	uxtb	r3, r3
 8002e18:	2b01      	cmp	r3, #1
 8002e1a:	d001      	beq.n	8002e20 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002e1c:	2301      	movs	r3, #1
 8002e1e:	e03a      	b.n	8002e96 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	2202      	movs	r2, #2
 8002e24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	68da      	ldr	r2, [r3, #12]
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	f042 0201 	orr.w	r2, r2, #1
 8002e36:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	4a18      	ldr	r2, [pc, #96]	; (8002ea0 <HAL_TIM_Base_Start_IT+0x98>)
 8002e3e:	4293      	cmp	r3, r2
 8002e40:	d00e      	beq.n	8002e60 <HAL_TIM_Base_Start_IT+0x58>
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002e4a:	d009      	beq.n	8002e60 <HAL_TIM_Base_Start_IT+0x58>
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	4a14      	ldr	r2, [pc, #80]	; (8002ea4 <HAL_TIM_Base_Start_IT+0x9c>)
 8002e52:	4293      	cmp	r3, r2
 8002e54:	d004      	beq.n	8002e60 <HAL_TIM_Base_Start_IT+0x58>
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	4a13      	ldr	r2, [pc, #76]	; (8002ea8 <HAL_TIM_Base_Start_IT+0xa0>)
 8002e5c:	4293      	cmp	r3, r2
 8002e5e:	d111      	bne.n	8002e84 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	689b      	ldr	r3, [r3, #8]
 8002e66:	f003 0307 	and.w	r3, r3, #7
 8002e6a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	2b06      	cmp	r3, #6
 8002e70:	d010      	beq.n	8002e94 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	681a      	ldr	r2, [r3, #0]
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	f042 0201 	orr.w	r2, r2, #1
 8002e80:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002e82:	e007      	b.n	8002e94 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	681a      	ldr	r2, [r3, #0]
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	f042 0201 	orr.w	r2, r2, #1
 8002e92:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002e94:	2300      	movs	r3, #0
}
 8002e96:	4618      	mov	r0, r3
 8002e98:	3714      	adds	r7, #20
 8002e9a:	46bd      	mov	sp, r7
 8002e9c:	bc80      	pop	{r7}
 8002e9e:	4770      	bx	lr
 8002ea0:	40012c00 	.word	0x40012c00
 8002ea4:	40000400 	.word	0x40000400
 8002ea8:	40000800 	.word	0x40000800

08002eac <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8002eac:	b580      	push	{r7, lr}
 8002eae:	b082      	sub	sp, #8
 8002eb0:	af00      	add	r7, sp, #0
 8002eb2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d101      	bne.n	8002ebe <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8002eba:	2301      	movs	r3, #1
 8002ebc:	e041      	b.n	8002f42 <HAL_TIM_OC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ec4:	b2db      	uxtb	r3, r3
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d106      	bne.n	8002ed8 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	2200      	movs	r2, #0
 8002ece:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8002ed2:	6878      	ldr	r0, [r7, #4]
 8002ed4:	f000 f839 	bl	8002f4a <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	2202      	movs	r2, #2
 8002edc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681a      	ldr	r2, [r3, #0]
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	3304      	adds	r3, #4
 8002ee8:	4619      	mov	r1, r3
 8002eea:	4610      	mov	r0, r2
 8002eec:	f000 fefe 	bl	8003cec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	2201      	movs	r2, #1
 8002ef4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	2201      	movs	r2, #1
 8002efc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	2201      	movs	r2, #1
 8002f04:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	2201      	movs	r2, #1
 8002f0c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	2201      	movs	r2, #1
 8002f14:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	2201      	movs	r2, #1
 8002f1c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	2201      	movs	r2, #1
 8002f24:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	2201      	movs	r2, #1
 8002f2c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	2201      	movs	r2, #1
 8002f34:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	2201      	movs	r2, #1
 8002f3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002f40:	2300      	movs	r3, #0
}
 8002f42:	4618      	mov	r0, r3
 8002f44:	3708      	adds	r7, #8
 8002f46:	46bd      	mov	sp, r7
 8002f48:	bd80      	pop	{r7, pc}

08002f4a <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8002f4a:	b480      	push	{r7}
 8002f4c:	b083      	sub	sp, #12
 8002f4e:	af00      	add	r7, sp, #0
 8002f50:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8002f52:	bf00      	nop
 8002f54:	370c      	adds	r7, #12
 8002f56:	46bd      	mov	sp, r7
 8002f58:	bc80      	pop	{r7}
 8002f5a:	4770      	bx	lr

08002f5c <HAL_TIM_OC_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002f5c:	b580      	push	{r7, lr}
 8002f5e:	b084      	sub	sp, #16
 8002f60:	af00      	add	r7, sp, #0
 8002f62:	6078      	str	r0, [r7, #4]
 8002f64:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002f66:	683b      	ldr	r3, [r7, #0]
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d109      	bne.n	8002f80 <HAL_TIM_OC_Start+0x24>
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002f72:	b2db      	uxtb	r3, r3
 8002f74:	2b01      	cmp	r3, #1
 8002f76:	bf14      	ite	ne
 8002f78:	2301      	movne	r3, #1
 8002f7a:	2300      	moveq	r3, #0
 8002f7c:	b2db      	uxtb	r3, r3
 8002f7e:	e022      	b.n	8002fc6 <HAL_TIM_OC_Start+0x6a>
 8002f80:	683b      	ldr	r3, [r7, #0]
 8002f82:	2b04      	cmp	r3, #4
 8002f84:	d109      	bne.n	8002f9a <HAL_TIM_OC_Start+0x3e>
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002f8c:	b2db      	uxtb	r3, r3
 8002f8e:	2b01      	cmp	r3, #1
 8002f90:	bf14      	ite	ne
 8002f92:	2301      	movne	r3, #1
 8002f94:	2300      	moveq	r3, #0
 8002f96:	b2db      	uxtb	r3, r3
 8002f98:	e015      	b.n	8002fc6 <HAL_TIM_OC_Start+0x6a>
 8002f9a:	683b      	ldr	r3, [r7, #0]
 8002f9c:	2b08      	cmp	r3, #8
 8002f9e:	d109      	bne.n	8002fb4 <HAL_TIM_OC_Start+0x58>
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002fa6:	b2db      	uxtb	r3, r3
 8002fa8:	2b01      	cmp	r3, #1
 8002faa:	bf14      	ite	ne
 8002fac:	2301      	movne	r3, #1
 8002fae:	2300      	moveq	r3, #0
 8002fb0:	b2db      	uxtb	r3, r3
 8002fb2:	e008      	b.n	8002fc6 <HAL_TIM_OC_Start+0x6a>
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002fba:	b2db      	uxtb	r3, r3
 8002fbc:	2b01      	cmp	r3, #1
 8002fbe:	bf14      	ite	ne
 8002fc0:	2301      	movne	r3, #1
 8002fc2:	2300      	moveq	r3, #0
 8002fc4:	b2db      	uxtb	r3, r3
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d001      	beq.n	8002fce <HAL_TIM_OC_Start+0x72>
  {
    return HAL_ERROR;
 8002fca:	2301      	movs	r3, #1
 8002fcc:	e05e      	b.n	800308c <HAL_TIM_OC_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002fce:	683b      	ldr	r3, [r7, #0]
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d104      	bne.n	8002fde <HAL_TIM_OC_Start+0x82>
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	2202      	movs	r2, #2
 8002fd8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002fdc:	e013      	b.n	8003006 <HAL_TIM_OC_Start+0xaa>
 8002fde:	683b      	ldr	r3, [r7, #0]
 8002fe0:	2b04      	cmp	r3, #4
 8002fe2:	d104      	bne.n	8002fee <HAL_TIM_OC_Start+0x92>
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	2202      	movs	r2, #2
 8002fe8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002fec:	e00b      	b.n	8003006 <HAL_TIM_OC_Start+0xaa>
 8002fee:	683b      	ldr	r3, [r7, #0]
 8002ff0:	2b08      	cmp	r3, #8
 8002ff2:	d104      	bne.n	8002ffe <HAL_TIM_OC_Start+0xa2>
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	2202      	movs	r2, #2
 8002ff8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002ffc:	e003      	b.n	8003006 <HAL_TIM_OC_Start+0xaa>
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	2202      	movs	r2, #2
 8003002:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Output compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	2201      	movs	r2, #1
 800300c:	6839      	ldr	r1, [r7, #0]
 800300e:	4618      	mov	r0, r3
 8003010:	f001 fa87 	bl	8004522 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	4a1e      	ldr	r2, [pc, #120]	; (8003094 <HAL_TIM_OC_Start+0x138>)
 800301a:	4293      	cmp	r3, r2
 800301c:	d107      	bne.n	800302e <HAL_TIM_OC_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800302c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	4a18      	ldr	r2, [pc, #96]	; (8003094 <HAL_TIM_OC_Start+0x138>)
 8003034:	4293      	cmp	r3, r2
 8003036:	d00e      	beq.n	8003056 <HAL_TIM_OC_Start+0xfa>
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003040:	d009      	beq.n	8003056 <HAL_TIM_OC_Start+0xfa>
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	4a14      	ldr	r2, [pc, #80]	; (8003098 <HAL_TIM_OC_Start+0x13c>)
 8003048:	4293      	cmp	r3, r2
 800304a:	d004      	beq.n	8003056 <HAL_TIM_OC_Start+0xfa>
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	4a12      	ldr	r2, [pc, #72]	; (800309c <HAL_TIM_OC_Start+0x140>)
 8003052:	4293      	cmp	r3, r2
 8003054:	d111      	bne.n	800307a <HAL_TIM_OC_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	689b      	ldr	r3, [r3, #8]
 800305c:	f003 0307 	and.w	r3, r3, #7
 8003060:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	2b06      	cmp	r3, #6
 8003066:	d010      	beq.n	800308a <HAL_TIM_OC_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	681a      	ldr	r2, [r3, #0]
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	f042 0201 	orr.w	r2, r2, #1
 8003076:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003078:	e007      	b.n	800308a <HAL_TIM_OC_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	681a      	ldr	r2, [r3, #0]
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	f042 0201 	orr.w	r2, r2, #1
 8003088:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800308a:	2300      	movs	r3, #0
}
 800308c:	4618      	mov	r0, r3
 800308e:	3710      	adds	r7, #16
 8003090:	46bd      	mov	sp, r7
 8003092:	bd80      	pop	{r7, pc}
 8003094:	40012c00 	.word	0x40012c00
 8003098:	40000400 	.word	0x40000400
 800309c:	40000800 	.word	0x40000800

080030a0 <HAL_TIM_OC_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80030a0:	b580      	push	{r7, lr}
 80030a2:	b082      	sub	sp, #8
 80030a4:	af00      	add	r7, sp, #0
 80030a6:	6078      	str	r0, [r7, #4]
 80030a8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Output compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	2200      	movs	r2, #0
 80030b0:	6839      	ldr	r1, [r7, #0]
 80030b2:	4618      	mov	r0, r3
 80030b4:	f001 fa35 	bl	8004522 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	4a29      	ldr	r2, [pc, #164]	; (8003164 <HAL_TIM_OC_Stop+0xc4>)
 80030be:	4293      	cmp	r3, r2
 80030c0:	d117      	bne.n	80030f2 <HAL_TIM_OC_Stop+0x52>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	6a1a      	ldr	r2, [r3, #32]
 80030c8:	f241 1311 	movw	r3, #4369	; 0x1111
 80030cc:	4013      	ands	r3, r2
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d10f      	bne.n	80030f2 <HAL_TIM_OC_Stop+0x52>
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	6a1a      	ldr	r2, [r3, #32]
 80030d8:	f240 4344 	movw	r3, #1092	; 0x444
 80030dc:	4013      	ands	r3, r2
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d107      	bne.n	80030f2 <HAL_TIM_OC_Stop+0x52>
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80030f0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	6a1a      	ldr	r2, [r3, #32]
 80030f8:	f241 1311 	movw	r3, #4369	; 0x1111
 80030fc:	4013      	ands	r3, r2
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d10f      	bne.n	8003122 <HAL_TIM_OC_Stop+0x82>
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	6a1a      	ldr	r2, [r3, #32]
 8003108:	f240 4344 	movw	r3, #1092	; 0x444
 800310c:	4013      	ands	r3, r2
 800310e:	2b00      	cmp	r3, #0
 8003110:	d107      	bne.n	8003122 <HAL_TIM_OC_Stop+0x82>
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	681a      	ldr	r2, [r3, #0]
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	f022 0201 	bic.w	r2, r2, #1
 8003120:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8003122:	683b      	ldr	r3, [r7, #0]
 8003124:	2b00      	cmp	r3, #0
 8003126:	d104      	bne.n	8003132 <HAL_TIM_OC_Stop+0x92>
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	2201      	movs	r2, #1
 800312c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003130:	e013      	b.n	800315a <HAL_TIM_OC_Stop+0xba>
 8003132:	683b      	ldr	r3, [r7, #0]
 8003134:	2b04      	cmp	r3, #4
 8003136:	d104      	bne.n	8003142 <HAL_TIM_OC_Stop+0xa2>
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	2201      	movs	r2, #1
 800313c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003140:	e00b      	b.n	800315a <HAL_TIM_OC_Stop+0xba>
 8003142:	683b      	ldr	r3, [r7, #0]
 8003144:	2b08      	cmp	r3, #8
 8003146:	d104      	bne.n	8003152 <HAL_TIM_OC_Stop+0xb2>
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	2201      	movs	r2, #1
 800314c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003150:	e003      	b.n	800315a <HAL_TIM_OC_Stop+0xba>
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	2201      	movs	r2, #1
 8003156:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Return function status */
  return HAL_OK;
 800315a:	2300      	movs	r3, #0
}
 800315c:	4618      	mov	r0, r3
 800315e:	3708      	adds	r7, #8
 8003160:	46bd      	mov	sp, r7
 8003162:	bd80      	pop	{r7, pc}
 8003164:	40012c00 	.word	0x40012c00

08003168 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8003168:	b580      	push	{r7, lr}
 800316a:	b082      	sub	sp, #8
 800316c:	af00      	add	r7, sp, #0
 800316e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	2b00      	cmp	r3, #0
 8003174:	d101      	bne.n	800317a <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8003176:	2301      	movs	r3, #1
 8003178:	e041      	b.n	80031fe <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003180:	b2db      	uxtb	r3, r3
 8003182:	2b00      	cmp	r3, #0
 8003184:	d106      	bne.n	8003194 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	2200      	movs	r2, #0
 800318a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 800318e:	6878      	ldr	r0, [r7, #4]
 8003190:	f000 f839 	bl	8003206 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	2202      	movs	r2, #2
 8003198:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681a      	ldr	r2, [r3, #0]
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	3304      	adds	r3, #4
 80031a4:	4619      	mov	r1, r3
 80031a6:	4610      	mov	r0, r2
 80031a8:	f000 fda0 	bl	8003cec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	2201      	movs	r2, #1
 80031b0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	2201      	movs	r2, #1
 80031b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	2201      	movs	r2, #1
 80031c0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	2201      	movs	r2, #1
 80031c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	2201      	movs	r2, #1
 80031d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	2201      	movs	r2, #1
 80031d8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	2201      	movs	r2, #1
 80031e0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	2201      	movs	r2, #1
 80031e8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	2201      	movs	r2, #1
 80031f0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	2201      	movs	r2, #1
 80031f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80031fc:	2300      	movs	r3, #0
}
 80031fe:	4618      	mov	r0, r3
 8003200:	3708      	adds	r7, #8
 8003202:	46bd      	mov	sp, r7
 8003204:	bd80      	pop	{r7, pc}

08003206 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8003206:	b480      	push	{r7}
 8003208:	b083      	sub	sp, #12
 800320a:	af00      	add	r7, sp, #0
 800320c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 800320e:	bf00      	nop
 8003210:	370c      	adds	r7, #12
 8003212:	46bd      	mov	sp, r7
 8003214:	bc80      	pop	{r7}
 8003216:	4770      	bx	lr

08003218 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003218:	b580      	push	{r7, lr}
 800321a:	b084      	sub	sp, #16
 800321c:	af00      	add	r7, sp, #0
 800321e:	6078      	str	r0, [r7, #4]
 8003220:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8003222:	683b      	ldr	r3, [r7, #0]
 8003224:	2b00      	cmp	r3, #0
 8003226:	d104      	bne.n	8003232 <HAL_TIM_IC_Start_IT+0x1a>
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800322e:	b2db      	uxtb	r3, r3
 8003230:	e013      	b.n	800325a <HAL_TIM_IC_Start_IT+0x42>
 8003232:	683b      	ldr	r3, [r7, #0]
 8003234:	2b04      	cmp	r3, #4
 8003236:	d104      	bne.n	8003242 <HAL_TIM_IC_Start_IT+0x2a>
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800323e:	b2db      	uxtb	r3, r3
 8003240:	e00b      	b.n	800325a <HAL_TIM_IC_Start_IT+0x42>
 8003242:	683b      	ldr	r3, [r7, #0]
 8003244:	2b08      	cmp	r3, #8
 8003246:	d104      	bne.n	8003252 <HAL_TIM_IC_Start_IT+0x3a>
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800324e:	b2db      	uxtb	r3, r3
 8003250:	e003      	b.n	800325a <HAL_TIM_IC_Start_IT+0x42>
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003258:	b2db      	uxtb	r3, r3
 800325a:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 800325c:	683b      	ldr	r3, [r7, #0]
 800325e:	2b00      	cmp	r3, #0
 8003260:	d104      	bne.n	800326c <HAL_TIM_IC_Start_IT+0x54>
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003268:	b2db      	uxtb	r3, r3
 800326a:	e013      	b.n	8003294 <HAL_TIM_IC_Start_IT+0x7c>
 800326c:	683b      	ldr	r3, [r7, #0]
 800326e:	2b04      	cmp	r3, #4
 8003270:	d104      	bne.n	800327c <HAL_TIM_IC_Start_IT+0x64>
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8003278:	b2db      	uxtb	r3, r3
 800327a:	e00b      	b.n	8003294 <HAL_TIM_IC_Start_IT+0x7c>
 800327c:	683b      	ldr	r3, [r7, #0]
 800327e:	2b08      	cmp	r3, #8
 8003280:	d104      	bne.n	800328c <HAL_TIM_IC_Start_IT+0x74>
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003288:	b2db      	uxtb	r3, r3
 800328a:	e003      	b.n	8003294 <HAL_TIM_IC_Start_IT+0x7c>
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003292:	b2db      	uxtb	r3, r3
 8003294:	73bb      	strb	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8003296:	7bfb      	ldrb	r3, [r7, #15]
 8003298:	2b01      	cmp	r3, #1
 800329a:	d102      	bne.n	80032a2 <HAL_TIM_IC_Start_IT+0x8a>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 800329c:	7bbb      	ldrb	r3, [r7, #14]
 800329e:	2b01      	cmp	r3, #1
 80032a0:	d001      	beq.n	80032a6 <HAL_TIM_IC_Start_IT+0x8e>
  {
    return HAL_ERROR;
 80032a2:	2301      	movs	r3, #1
 80032a4:	e0b3      	b.n	800340e <HAL_TIM_IC_Start_IT+0x1f6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80032a6:	683b      	ldr	r3, [r7, #0]
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d104      	bne.n	80032b6 <HAL_TIM_IC_Start_IT+0x9e>
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	2202      	movs	r2, #2
 80032b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80032b4:	e013      	b.n	80032de <HAL_TIM_IC_Start_IT+0xc6>
 80032b6:	683b      	ldr	r3, [r7, #0]
 80032b8:	2b04      	cmp	r3, #4
 80032ba:	d104      	bne.n	80032c6 <HAL_TIM_IC_Start_IT+0xae>
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	2202      	movs	r2, #2
 80032c0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80032c4:	e00b      	b.n	80032de <HAL_TIM_IC_Start_IT+0xc6>
 80032c6:	683b      	ldr	r3, [r7, #0]
 80032c8:	2b08      	cmp	r3, #8
 80032ca:	d104      	bne.n	80032d6 <HAL_TIM_IC_Start_IT+0xbe>
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	2202      	movs	r2, #2
 80032d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80032d4:	e003      	b.n	80032de <HAL_TIM_IC_Start_IT+0xc6>
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	2202      	movs	r2, #2
 80032da:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80032de:	683b      	ldr	r3, [r7, #0]
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d104      	bne.n	80032ee <HAL_TIM_IC_Start_IT+0xd6>
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	2202      	movs	r2, #2
 80032e8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80032ec:	e013      	b.n	8003316 <HAL_TIM_IC_Start_IT+0xfe>
 80032ee:	683b      	ldr	r3, [r7, #0]
 80032f0:	2b04      	cmp	r3, #4
 80032f2:	d104      	bne.n	80032fe <HAL_TIM_IC_Start_IT+0xe6>
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	2202      	movs	r2, #2
 80032f8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80032fc:	e00b      	b.n	8003316 <HAL_TIM_IC_Start_IT+0xfe>
 80032fe:	683b      	ldr	r3, [r7, #0]
 8003300:	2b08      	cmp	r3, #8
 8003302:	d104      	bne.n	800330e <HAL_TIM_IC_Start_IT+0xf6>
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	2202      	movs	r2, #2
 8003308:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800330c:	e003      	b.n	8003316 <HAL_TIM_IC_Start_IT+0xfe>
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	2202      	movs	r2, #2
 8003312:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003316:	683b      	ldr	r3, [r7, #0]
 8003318:	2b0c      	cmp	r3, #12
 800331a:	d841      	bhi.n	80033a0 <HAL_TIM_IC_Start_IT+0x188>
 800331c:	a201      	add	r2, pc, #4	; (adr r2, 8003324 <HAL_TIM_IC_Start_IT+0x10c>)
 800331e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003322:	bf00      	nop
 8003324:	08003359 	.word	0x08003359
 8003328:	080033a1 	.word	0x080033a1
 800332c:	080033a1 	.word	0x080033a1
 8003330:	080033a1 	.word	0x080033a1
 8003334:	0800336b 	.word	0x0800336b
 8003338:	080033a1 	.word	0x080033a1
 800333c:	080033a1 	.word	0x080033a1
 8003340:	080033a1 	.word	0x080033a1
 8003344:	0800337d 	.word	0x0800337d
 8003348:	080033a1 	.word	0x080033a1
 800334c:	080033a1 	.word	0x080033a1
 8003350:	080033a1 	.word	0x080033a1
 8003354:	0800338f 	.word	0x0800338f
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	68da      	ldr	r2, [r3, #12]
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	f042 0202 	orr.w	r2, r2, #2
 8003366:	60da      	str	r2, [r3, #12]
      break;
 8003368:	e01b      	b.n	80033a2 <HAL_TIM_IC_Start_IT+0x18a>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	68da      	ldr	r2, [r3, #12]
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	f042 0204 	orr.w	r2, r2, #4
 8003378:	60da      	str	r2, [r3, #12]
      break;
 800337a:	e012      	b.n	80033a2 <HAL_TIM_IC_Start_IT+0x18a>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	68da      	ldr	r2, [r3, #12]
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	f042 0208 	orr.w	r2, r2, #8
 800338a:	60da      	str	r2, [r3, #12]
      break;
 800338c:	e009      	b.n	80033a2 <HAL_TIM_IC_Start_IT+0x18a>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	68da      	ldr	r2, [r3, #12]
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	f042 0210 	orr.w	r2, r2, #16
 800339c:	60da      	str	r2, [r3, #12]
      break;
 800339e:	e000      	b.n	80033a2 <HAL_TIM_IC_Start_IT+0x18a>
    }

    default:
      break;
 80033a0:	bf00      	nop
  }
  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	2201      	movs	r2, #1
 80033a8:	6839      	ldr	r1, [r7, #0]
 80033aa:	4618      	mov	r0, r3
 80033ac:	f001 f8b9 	bl	8004522 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	4a18      	ldr	r2, [pc, #96]	; (8003418 <HAL_TIM_IC_Start_IT+0x200>)
 80033b6:	4293      	cmp	r3, r2
 80033b8:	d00e      	beq.n	80033d8 <HAL_TIM_IC_Start_IT+0x1c0>
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80033c2:	d009      	beq.n	80033d8 <HAL_TIM_IC_Start_IT+0x1c0>
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	4a14      	ldr	r2, [pc, #80]	; (800341c <HAL_TIM_IC_Start_IT+0x204>)
 80033ca:	4293      	cmp	r3, r2
 80033cc:	d004      	beq.n	80033d8 <HAL_TIM_IC_Start_IT+0x1c0>
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	4a13      	ldr	r2, [pc, #76]	; (8003420 <HAL_TIM_IC_Start_IT+0x208>)
 80033d4:	4293      	cmp	r3, r2
 80033d6:	d111      	bne.n	80033fc <HAL_TIM_IC_Start_IT+0x1e4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	689b      	ldr	r3, [r3, #8]
 80033de:	f003 0307 	and.w	r3, r3, #7
 80033e2:	60bb      	str	r3, [r7, #8]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80033e4:	68bb      	ldr	r3, [r7, #8]
 80033e6:	2b06      	cmp	r3, #6
 80033e8:	d010      	beq.n	800340c <HAL_TIM_IC_Start_IT+0x1f4>
    {
      __HAL_TIM_ENABLE(htim);
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	681a      	ldr	r2, [r3, #0]
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	f042 0201 	orr.w	r2, r2, #1
 80033f8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80033fa:	e007      	b.n	800340c <HAL_TIM_IC_Start_IT+0x1f4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	681a      	ldr	r2, [r3, #0]
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	f042 0201 	orr.w	r2, r2, #1
 800340a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800340c:	2300      	movs	r3, #0
}
 800340e:	4618      	mov	r0, r3
 8003410:	3710      	adds	r7, #16
 8003412:	46bd      	mov	sp, r7
 8003414:	bd80      	pop	{r7, pc}
 8003416:	bf00      	nop
 8003418:	40012c00 	.word	0x40012c00
 800341c:	40000400 	.word	0x40000400
 8003420:	40000800 	.word	0x40000800

08003424 <HAL_TIM_IC_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003424:	b580      	push	{r7, lr}
 8003426:	b082      	sub	sp, #8
 8003428:	af00      	add	r7, sp, #0
 800342a:	6078      	str	r0, [r7, #4]
 800342c:	6039      	str	r1, [r7, #0]
 800342e:	683b      	ldr	r3, [r7, #0]
 8003430:	2b0c      	cmp	r3, #12
 8003432:	d841      	bhi.n	80034b8 <HAL_TIM_IC_Stop_IT+0x94>
 8003434:	a201      	add	r2, pc, #4	; (adr r2, 800343c <HAL_TIM_IC_Stop_IT+0x18>)
 8003436:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800343a:	bf00      	nop
 800343c:	08003471 	.word	0x08003471
 8003440:	080034b9 	.word	0x080034b9
 8003444:	080034b9 	.word	0x080034b9
 8003448:	080034b9 	.word	0x080034b9
 800344c:	08003483 	.word	0x08003483
 8003450:	080034b9 	.word	0x080034b9
 8003454:	080034b9 	.word	0x080034b9
 8003458:	080034b9 	.word	0x080034b9
 800345c:	08003495 	.word	0x08003495
 8003460:	080034b9 	.word	0x080034b9
 8003464:	080034b9 	.word	0x080034b9
 8003468:	080034b9 	.word	0x080034b9
 800346c:	080034a7 	.word	0x080034a7
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	68da      	ldr	r2, [r3, #12]
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	f022 0202 	bic.w	r2, r2, #2
 800347e:	60da      	str	r2, [r3, #12]
      break;
 8003480:	e01b      	b.n	80034ba <HAL_TIM_IC_Stop_IT+0x96>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	68da      	ldr	r2, [r3, #12]
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	f022 0204 	bic.w	r2, r2, #4
 8003490:	60da      	str	r2, [r3, #12]
      break;
 8003492:	e012      	b.n	80034ba <HAL_TIM_IC_Stop_IT+0x96>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	68da      	ldr	r2, [r3, #12]
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	f022 0208 	bic.w	r2, r2, #8
 80034a2:	60da      	str	r2, [r3, #12]
      break;
 80034a4:	e009      	b.n	80034ba <HAL_TIM_IC_Stop_IT+0x96>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	68da      	ldr	r2, [r3, #12]
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	f022 0210 	bic.w	r2, r2, #16
 80034b4:	60da      	str	r2, [r3, #12]
      break;
 80034b6:	e000      	b.n	80034ba <HAL_TIM_IC_Stop_IT+0x96>
    }

    default:
      break;
 80034b8:	bf00      	nop
  }

  /* Disable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	2200      	movs	r2, #0
 80034c0:	6839      	ldr	r1, [r7, #0]
 80034c2:	4618      	mov	r0, r3
 80034c4:	f001 f82d 	bl	8004522 <TIM_CCxChannelCmd>

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	6a1a      	ldr	r2, [r3, #32]
 80034ce:	f241 1311 	movw	r3, #4369	; 0x1111
 80034d2:	4013      	ands	r3, r2
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d10f      	bne.n	80034f8 <HAL_TIM_IC_Stop_IT+0xd4>
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	6a1a      	ldr	r2, [r3, #32]
 80034de:	f240 4344 	movw	r3, #1092	; 0x444
 80034e2:	4013      	ands	r3, r2
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d107      	bne.n	80034f8 <HAL_TIM_IC_Stop_IT+0xd4>
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	681a      	ldr	r2, [r3, #0]
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	f022 0201 	bic.w	r2, r2, #1
 80034f6:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80034f8:	683b      	ldr	r3, [r7, #0]
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d104      	bne.n	8003508 <HAL_TIM_IC_Stop_IT+0xe4>
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	2201      	movs	r2, #1
 8003502:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003506:	e013      	b.n	8003530 <HAL_TIM_IC_Stop_IT+0x10c>
 8003508:	683b      	ldr	r3, [r7, #0]
 800350a:	2b04      	cmp	r3, #4
 800350c:	d104      	bne.n	8003518 <HAL_TIM_IC_Stop_IT+0xf4>
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	2201      	movs	r2, #1
 8003512:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003516:	e00b      	b.n	8003530 <HAL_TIM_IC_Stop_IT+0x10c>
 8003518:	683b      	ldr	r3, [r7, #0]
 800351a:	2b08      	cmp	r3, #8
 800351c:	d104      	bne.n	8003528 <HAL_TIM_IC_Stop_IT+0x104>
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	2201      	movs	r2, #1
 8003522:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003526:	e003      	b.n	8003530 <HAL_TIM_IC_Stop_IT+0x10c>
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	2201      	movs	r2, #1
 800352c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8003530:	683b      	ldr	r3, [r7, #0]
 8003532:	2b00      	cmp	r3, #0
 8003534:	d104      	bne.n	8003540 <HAL_TIM_IC_Stop_IT+0x11c>
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	2201      	movs	r2, #1
 800353a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800353e:	e013      	b.n	8003568 <HAL_TIM_IC_Stop_IT+0x144>
 8003540:	683b      	ldr	r3, [r7, #0]
 8003542:	2b04      	cmp	r3, #4
 8003544:	d104      	bne.n	8003550 <HAL_TIM_IC_Stop_IT+0x12c>
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	2201      	movs	r2, #1
 800354a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800354e:	e00b      	b.n	8003568 <HAL_TIM_IC_Stop_IT+0x144>
 8003550:	683b      	ldr	r3, [r7, #0]
 8003552:	2b08      	cmp	r3, #8
 8003554:	d104      	bne.n	8003560 <HAL_TIM_IC_Stop_IT+0x13c>
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	2201      	movs	r2, #1
 800355a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800355e:	e003      	b.n	8003568 <HAL_TIM_IC_Stop_IT+0x144>
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	2201      	movs	r2, #1
 8003564:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Return function status */
  return HAL_OK;
 8003568:	2300      	movs	r3, #0
}
 800356a:	4618      	mov	r0, r3
 800356c:	3708      	adds	r7, #8
 800356e:	46bd      	mov	sp, r7
 8003570:	bd80      	pop	{r7, pc}
 8003572:	bf00      	nop

08003574 <HAL_TIM_OnePulse_Init>:
  *            @arg TIM_OPMODE_SINGLE: Only one pulse will be generated.
  *            @arg TIM_OPMODE_REPETITIVE: Repetitive pulses will be generated.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Init(TIM_HandleTypeDef *htim, uint32_t OnePulseMode)
{
 8003574:	b580      	push	{r7, lr}
 8003576:	b082      	sub	sp, #8
 8003578:	af00      	add	r7, sp, #0
 800357a:	6078      	str	r0, [r7, #4]
 800357c:	6039      	str	r1, [r7, #0]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	2b00      	cmp	r3, #0
 8003582:	d101      	bne.n	8003588 <HAL_TIM_OnePulse_Init+0x14>
  {
    return HAL_ERROR;
 8003584:	2301      	movs	r3, #1
 8003586:	e041      	b.n	800360c <HAL_TIM_OnePulse_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_OPM_MODE(OnePulseMode));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800358e:	b2db      	uxtb	r3, r3
 8003590:	2b00      	cmp	r3, #0
 8003592:	d106      	bne.n	80035a2 <HAL_TIM_OnePulse_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	2200      	movs	r2, #0
 8003598:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OnePulse_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OnePulse_MspInit(htim);
 800359c:	6878      	ldr	r0, [r7, #4]
 800359e:	f000 f839 	bl	8003614 <HAL_TIM_OnePulse_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	2202      	movs	r2, #2
 80035a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Configure the Time base in the One Pulse Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681a      	ldr	r2, [r3, #0]
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	3304      	adds	r3, #4
 80035b2:	4619      	mov	r1, r3
 80035b4:	4610      	mov	r0, r2
 80035b6:	f000 fb99 	bl	8003cec <TIM_Base_SetConfig>

  /* Reset the OPM Bit */
  htim->Instance->CR1 &= ~TIM_CR1_OPM;
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	681a      	ldr	r2, [r3, #0]
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	f022 0208 	bic.w	r2, r2, #8
 80035c8:	601a      	str	r2, [r3, #0]

  /* Configure the OPM Mode */
  htim->Instance->CR1 |= OnePulseMode;
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	6819      	ldr	r1, [r3, #0]
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	683a      	ldr	r2, [r7, #0]
 80035d6:	430a      	orrs	r2, r1
 80035d8:	601a      	str	r2, [r3, #0]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	2201      	movs	r2, #1
 80035de:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	2201      	movs	r2, #1
 80035e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	2201      	movs	r2, #1
 80035ee:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	2201      	movs	r2, #1
 80035f6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	2201      	movs	r2, #1
 80035fe:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	2201      	movs	r2, #1
 8003606:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800360a:	2300      	movs	r3, #0
}
 800360c:	4618      	mov	r0, r3
 800360e:	3708      	adds	r7, #8
 8003610:	46bd      	mov	sp, r7
 8003612:	bd80      	pop	{r7, pc}

08003614 <HAL_TIM_OnePulse_MspInit>:
  * @brief  Initializes the TIM One Pulse MSP.
  * @param  htim TIM One Pulse handle
  * @retval None
  */
__weak void HAL_TIM_OnePulse_MspInit(TIM_HandleTypeDef *htim)
{
 8003614:	b480      	push	{r7}
 8003616:	b083      	sub	sp, #12
 8003618:	af00      	add	r7, sp, #0
 800361a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OnePulse_MspInit could be implemented in the user file
   */
}
 800361c:	bf00      	nop
 800361e:	370c      	adds	r7, #12
 8003620:	46bd      	mov	sp, r7
 8003622:	bc80      	pop	{r7}
 8003624:	4770      	bx	lr

08003626 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003626:	b580      	push	{r7, lr}
 8003628:	b082      	sub	sp, #8
 800362a:	af00      	add	r7, sp, #0
 800362c:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	691b      	ldr	r3, [r3, #16]
 8003634:	f003 0302 	and.w	r3, r3, #2
 8003638:	2b02      	cmp	r3, #2
 800363a:	d122      	bne.n	8003682 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	68db      	ldr	r3, [r3, #12]
 8003642:	f003 0302 	and.w	r3, r3, #2
 8003646:	2b02      	cmp	r3, #2
 8003648:	d11b      	bne.n	8003682 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	f06f 0202 	mvn.w	r2, #2
 8003652:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	2201      	movs	r2, #1
 8003658:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	699b      	ldr	r3, [r3, #24]
 8003660:	f003 0303 	and.w	r3, r3, #3
 8003664:	2b00      	cmp	r3, #0
 8003666:	d003      	beq.n	8003670 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003668:	6878      	ldr	r0, [r7, #4]
 800366a:	f7fd fceb 	bl	8001044 <HAL_TIM_IC_CaptureCallback>
 800366e:	e005      	b.n	800367c <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003670:	6878      	ldr	r0, [r7, #4]
 8003672:	f000 fb20 	bl	8003cb6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003676:	6878      	ldr	r0, [r7, #4]
 8003678:	f000 fb26 	bl	8003cc8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	2200      	movs	r2, #0
 8003680:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	691b      	ldr	r3, [r3, #16]
 8003688:	f003 0304 	and.w	r3, r3, #4
 800368c:	2b04      	cmp	r3, #4
 800368e:	d122      	bne.n	80036d6 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	68db      	ldr	r3, [r3, #12]
 8003696:	f003 0304 	and.w	r3, r3, #4
 800369a:	2b04      	cmp	r3, #4
 800369c:	d11b      	bne.n	80036d6 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	f06f 0204 	mvn.w	r2, #4
 80036a6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	2202      	movs	r2, #2
 80036ac:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	699b      	ldr	r3, [r3, #24]
 80036b4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d003      	beq.n	80036c4 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80036bc:	6878      	ldr	r0, [r7, #4]
 80036be:	f7fd fcc1 	bl	8001044 <HAL_TIM_IC_CaptureCallback>
 80036c2:	e005      	b.n	80036d0 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80036c4:	6878      	ldr	r0, [r7, #4]
 80036c6:	f000 faf6 	bl	8003cb6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80036ca:	6878      	ldr	r0, [r7, #4]
 80036cc:	f000 fafc 	bl	8003cc8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	2200      	movs	r2, #0
 80036d4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	691b      	ldr	r3, [r3, #16]
 80036dc:	f003 0308 	and.w	r3, r3, #8
 80036e0:	2b08      	cmp	r3, #8
 80036e2:	d122      	bne.n	800372a <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	68db      	ldr	r3, [r3, #12]
 80036ea:	f003 0308 	and.w	r3, r3, #8
 80036ee:	2b08      	cmp	r3, #8
 80036f0:	d11b      	bne.n	800372a <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	f06f 0208 	mvn.w	r2, #8
 80036fa:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	2204      	movs	r2, #4
 8003700:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	69db      	ldr	r3, [r3, #28]
 8003708:	f003 0303 	and.w	r3, r3, #3
 800370c:	2b00      	cmp	r3, #0
 800370e:	d003      	beq.n	8003718 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003710:	6878      	ldr	r0, [r7, #4]
 8003712:	f7fd fc97 	bl	8001044 <HAL_TIM_IC_CaptureCallback>
 8003716:	e005      	b.n	8003724 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003718:	6878      	ldr	r0, [r7, #4]
 800371a:	f000 facc 	bl	8003cb6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800371e:	6878      	ldr	r0, [r7, #4]
 8003720:	f000 fad2 	bl	8003cc8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	2200      	movs	r2, #0
 8003728:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	691b      	ldr	r3, [r3, #16]
 8003730:	f003 0310 	and.w	r3, r3, #16
 8003734:	2b10      	cmp	r3, #16
 8003736:	d122      	bne.n	800377e <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	68db      	ldr	r3, [r3, #12]
 800373e:	f003 0310 	and.w	r3, r3, #16
 8003742:	2b10      	cmp	r3, #16
 8003744:	d11b      	bne.n	800377e <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	f06f 0210 	mvn.w	r2, #16
 800374e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	2208      	movs	r2, #8
 8003754:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	69db      	ldr	r3, [r3, #28]
 800375c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003760:	2b00      	cmp	r3, #0
 8003762:	d003      	beq.n	800376c <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003764:	6878      	ldr	r0, [r7, #4]
 8003766:	f7fd fc6d 	bl	8001044 <HAL_TIM_IC_CaptureCallback>
 800376a:	e005      	b.n	8003778 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800376c:	6878      	ldr	r0, [r7, #4]
 800376e:	f000 faa2 	bl	8003cb6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003772:	6878      	ldr	r0, [r7, #4]
 8003774:	f000 faa8 	bl	8003cc8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	2200      	movs	r2, #0
 800377c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	691b      	ldr	r3, [r3, #16]
 8003784:	f003 0301 	and.w	r3, r3, #1
 8003788:	2b01      	cmp	r3, #1
 800378a:	d10e      	bne.n	80037aa <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	68db      	ldr	r3, [r3, #12]
 8003792:	f003 0301 	and.w	r3, r3, #1
 8003796:	2b01      	cmp	r3, #1
 8003798:	d107      	bne.n	80037aa <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	f06f 0201 	mvn.w	r2, #1
 80037a2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80037a4:	6878      	ldr	r0, [r7, #4]
 80037a6:	f000 fa7d 	bl	8003ca4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	691b      	ldr	r3, [r3, #16]
 80037b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80037b4:	2b80      	cmp	r3, #128	; 0x80
 80037b6:	d10e      	bne.n	80037d6 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	68db      	ldr	r3, [r3, #12]
 80037be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80037c2:	2b80      	cmp	r3, #128	; 0x80
 80037c4:	d107      	bne.n	80037d6 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80037ce:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80037d0:	6878      	ldr	r0, [r7, #4]
 80037d2:	f000 ff83 	bl	80046dc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	691b      	ldr	r3, [r3, #16]
 80037dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037e0:	2b40      	cmp	r3, #64	; 0x40
 80037e2:	d10e      	bne.n	8003802 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	68db      	ldr	r3, [r3, #12]
 80037ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037ee:	2b40      	cmp	r3, #64	; 0x40
 80037f0:	d107      	bne.n	8003802 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80037fa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80037fc:	6878      	ldr	r0, [r7, #4]
 80037fe:	f000 fa6c 	bl	8003cda <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	691b      	ldr	r3, [r3, #16]
 8003808:	f003 0320 	and.w	r3, r3, #32
 800380c:	2b20      	cmp	r3, #32
 800380e:	d10e      	bne.n	800382e <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	68db      	ldr	r3, [r3, #12]
 8003816:	f003 0320 	and.w	r3, r3, #32
 800381a:	2b20      	cmp	r3, #32
 800381c:	d107      	bne.n	800382e <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	f06f 0220 	mvn.w	r2, #32
 8003826:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003828:	6878      	ldr	r0, [r7, #4]
 800382a:	f000 ff4e 	bl	80046ca <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800382e:	bf00      	nop
 8003830:	3708      	adds	r7, #8
 8003832:	46bd      	mov	sp, r7
 8003834:	bd80      	pop	{r7, pc}
	...

08003838 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8003838:	b580      	push	{r7, lr}
 800383a:	b084      	sub	sp, #16
 800383c:	af00      	add	r7, sp, #0
 800383e:	60f8      	str	r0, [r7, #12]
 8003840:	60b9      	str	r1, [r7, #8]
 8003842:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800384a:	2b01      	cmp	r3, #1
 800384c:	d101      	bne.n	8003852 <HAL_TIM_OC_ConfigChannel+0x1a>
 800384e:	2302      	movs	r3, #2
 8003850:	e046      	b.n	80038e0 <HAL_TIM_OC_ConfigChannel+0xa8>
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	2201      	movs	r2, #1
 8003856:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	2b0c      	cmp	r3, #12
 800385e:	d839      	bhi.n	80038d4 <HAL_TIM_OC_ConfigChannel+0x9c>
 8003860:	a201      	add	r2, pc, #4	; (adr r2, 8003868 <HAL_TIM_OC_ConfigChannel+0x30>)
 8003862:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003866:	bf00      	nop
 8003868:	0800389d 	.word	0x0800389d
 800386c:	080038d5 	.word	0x080038d5
 8003870:	080038d5 	.word	0x080038d5
 8003874:	080038d5 	.word	0x080038d5
 8003878:	080038ab 	.word	0x080038ab
 800387c:	080038d5 	.word	0x080038d5
 8003880:	080038d5 	.word	0x080038d5
 8003884:	080038d5 	.word	0x080038d5
 8003888:	080038b9 	.word	0x080038b9
 800388c:	080038d5 	.word	0x080038d5
 8003890:	080038d5 	.word	0x080038d5
 8003894:	080038d5 	.word	0x080038d5
 8003898:	080038c7 	.word	0x080038c7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	68b9      	ldr	r1, [r7, #8]
 80038a2:	4618      	mov	r0, r3
 80038a4:	f000 fa84 	bl	8003db0 <TIM_OC1_SetConfig>
      break;
 80038a8:	e015      	b.n	80038d6 <HAL_TIM_OC_ConfigChannel+0x9e>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	68b9      	ldr	r1, [r7, #8]
 80038b0:	4618      	mov	r0, r3
 80038b2:	f000 fae3 	bl	8003e7c <TIM_OC2_SetConfig>
      break;
 80038b6:	e00e      	b.n	80038d6 <HAL_TIM_OC_ConfigChannel+0x9e>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	68b9      	ldr	r1, [r7, #8]
 80038be:	4618      	mov	r0, r3
 80038c0:	f000 fb46 	bl	8003f50 <TIM_OC3_SetConfig>
      break;
 80038c4:	e007      	b.n	80038d6 <HAL_TIM_OC_ConfigChannel+0x9e>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	68b9      	ldr	r1, [r7, #8]
 80038cc:	4618      	mov	r0, r3
 80038ce:	f000 fba9 	bl	8004024 <TIM_OC4_SetConfig>
      break;
 80038d2:	e000      	b.n	80038d6 <HAL_TIM_OC_ConfigChannel+0x9e>
    }

    default:
      break;
 80038d4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	2200      	movs	r2, #0
 80038da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80038de:	2300      	movs	r3, #0
}
 80038e0:	4618      	mov	r0, r3
 80038e2:	3710      	adds	r7, #16
 80038e4:	46bd      	mov	sp, r7
 80038e6:	bd80      	pop	{r7, pc}

080038e8 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 80038e8:	b580      	push	{r7, lr}
 80038ea:	b084      	sub	sp, #16
 80038ec:	af00      	add	r7, sp, #0
 80038ee:	60f8      	str	r0, [r7, #12]
 80038f0:	60b9      	str	r1, [r7, #8]
 80038f2:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80038fa:	2b01      	cmp	r3, #1
 80038fc:	d101      	bne.n	8003902 <HAL_TIM_IC_ConfigChannel+0x1a>
 80038fe:	2302      	movs	r3, #2
 8003900:	e082      	b.n	8003a08 <HAL_TIM_IC_ConfigChannel+0x120>
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	2201      	movs	r2, #1
 8003906:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	2b00      	cmp	r3, #0
 800390e:	d11b      	bne.n	8003948 <HAL_TIM_IC_ConfigChannel+0x60>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	6818      	ldr	r0, [r3, #0]
 8003914:	68bb      	ldr	r3, [r7, #8]
 8003916:	6819      	ldr	r1, [r3, #0]
 8003918:	68bb      	ldr	r3, [r7, #8]
 800391a:	685a      	ldr	r2, [r3, #4]
 800391c:	68bb      	ldr	r3, [r7, #8]
 800391e:	68db      	ldr	r3, [r3, #12]
 8003920:	f000 fc5c 	bl	80041dc <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	699a      	ldr	r2, [r3, #24]
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	f022 020c 	bic.w	r2, r2, #12
 8003932:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	6999      	ldr	r1, [r3, #24]
 800393a:	68bb      	ldr	r3, [r7, #8]
 800393c:	689a      	ldr	r2, [r3, #8]
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	430a      	orrs	r2, r1
 8003944:	619a      	str	r2, [r3, #24]
 8003946:	e05a      	b.n	80039fe <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_2)
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	2b04      	cmp	r3, #4
 800394c:	d11c      	bne.n	8003988 <HAL_TIM_IC_ConfigChannel+0xa0>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	6818      	ldr	r0, [r3, #0]
 8003952:	68bb      	ldr	r3, [r7, #8]
 8003954:	6819      	ldr	r1, [r3, #0]
 8003956:	68bb      	ldr	r3, [r7, #8]
 8003958:	685a      	ldr	r2, [r3, #4]
 800395a:	68bb      	ldr	r3, [r7, #8]
 800395c:	68db      	ldr	r3, [r3, #12]
 800395e:	f000 fcc5 	bl	80042ec <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	699a      	ldr	r2, [r3, #24]
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8003970:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	6999      	ldr	r1, [r3, #24]
 8003978:	68bb      	ldr	r3, [r7, #8]
 800397a:	689b      	ldr	r3, [r3, #8]
 800397c:	021a      	lsls	r2, r3, #8
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	430a      	orrs	r2, r1
 8003984:	619a      	str	r2, [r3, #24]
 8003986:	e03a      	b.n	80039fe <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_3)
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	2b08      	cmp	r3, #8
 800398c:	d11b      	bne.n	80039c6 <HAL_TIM_IC_ConfigChannel+0xde>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	6818      	ldr	r0, [r3, #0]
 8003992:	68bb      	ldr	r3, [r7, #8]
 8003994:	6819      	ldr	r1, [r3, #0]
 8003996:	68bb      	ldr	r3, [r7, #8]
 8003998:	685a      	ldr	r2, [r3, #4]
 800399a:	68bb      	ldr	r3, [r7, #8]
 800399c:	68db      	ldr	r3, [r3, #12]
 800399e:	f000 fd10 	bl	80043c2 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	69da      	ldr	r2, [r3, #28]
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	f022 020c 	bic.w	r2, r2, #12
 80039b0:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	69d9      	ldr	r1, [r3, #28]
 80039b8:	68bb      	ldr	r3, [r7, #8]
 80039ba:	689a      	ldr	r2, [r3, #8]
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	430a      	orrs	r2, r1
 80039c2:	61da      	str	r2, [r3, #28]
 80039c4:	e01b      	b.n	80039fe <HAL_TIM_IC_ConfigChannel+0x116>
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	6818      	ldr	r0, [r3, #0]
 80039ca:	68bb      	ldr	r3, [r7, #8]
 80039cc:	6819      	ldr	r1, [r3, #0]
 80039ce:	68bb      	ldr	r3, [r7, #8]
 80039d0:	685a      	ldr	r2, [r3, #4]
 80039d2:	68bb      	ldr	r3, [r7, #8]
 80039d4:	68db      	ldr	r3, [r3, #12]
 80039d6:	f000 fd2f 	bl	8004438 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	69da      	ldr	r2, [r3, #28]
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80039e8:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	69d9      	ldr	r1, [r3, #28]
 80039f0:	68bb      	ldr	r3, [r7, #8]
 80039f2:	689b      	ldr	r3, [r3, #8]
 80039f4:	021a      	lsls	r2, r3, #8
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	430a      	orrs	r2, r1
 80039fc:	61da      	str	r2, [r3, #28]
  }

  __HAL_UNLOCK(htim);
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	2200      	movs	r2, #0
 8003a02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003a06:	2300      	movs	r3, #0
}
 8003a08:	4618      	mov	r0, r3
 8003a0a:	3710      	adds	r7, #16
 8003a0c:	46bd      	mov	sp, r7
 8003a0e:	bd80      	pop	{r7, pc}

08003a10 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003a10:	b580      	push	{r7, lr}
 8003a12:	b084      	sub	sp, #16
 8003a14:	af00      	add	r7, sp, #0
 8003a16:	6078      	str	r0, [r7, #4]
 8003a18:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003a20:	2b01      	cmp	r3, #1
 8003a22:	d101      	bne.n	8003a28 <HAL_TIM_ConfigClockSource+0x18>
 8003a24:	2302      	movs	r3, #2
 8003a26:	e0b3      	b.n	8003b90 <HAL_TIM_ConfigClockSource+0x180>
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	2201      	movs	r2, #1
 8003a2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	2202      	movs	r2, #2
 8003a34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	689b      	ldr	r3, [r3, #8]
 8003a3e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003a46:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003a4e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	68fa      	ldr	r2, [r7, #12]
 8003a56:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003a58:	683b      	ldr	r3, [r7, #0]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003a60:	d03e      	beq.n	8003ae0 <HAL_TIM_ConfigClockSource+0xd0>
 8003a62:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003a66:	f200 8087 	bhi.w	8003b78 <HAL_TIM_ConfigClockSource+0x168>
 8003a6a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003a6e:	f000 8085 	beq.w	8003b7c <HAL_TIM_ConfigClockSource+0x16c>
 8003a72:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003a76:	d87f      	bhi.n	8003b78 <HAL_TIM_ConfigClockSource+0x168>
 8003a78:	2b70      	cmp	r3, #112	; 0x70
 8003a7a:	d01a      	beq.n	8003ab2 <HAL_TIM_ConfigClockSource+0xa2>
 8003a7c:	2b70      	cmp	r3, #112	; 0x70
 8003a7e:	d87b      	bhi.n	8003b78 <HAL_TIM_ConfigClockSource+0x168>
 8003a80:	2b60      	cmp	r3, #96	; 0x60
 8003a82:	d050      	beq.n	8003b26 <HAL_TIM_ConfigClockSource+0x116>
 8003a84:	2b60      	cmp	r3, #96	; 0x60
 8003a86:	d877      	bhi.n	8003b78 <HAL_TIM_ConfigClockSource+0x168>
 8003a88:	2b50      	cmp	r3, #80	; 0x50
 8003a8a:	d03c      	beq.n	8003b06 <HAL_TIM_ConfigClockSource+0xf6>
 8003a8c:	2b50      	cmp	r3, #80	; 0x50
 8003a8e:	d873      	bhi.n	8003b78 <HAL_TIM_ConfigClockSource+0x168>
 8003a90:	2b40      	cmp	r3, #64	; 0x40
 8003a92:	d058      	beq.n	8003b46 <HAL_TIM_ConfigClockSource+0x136>
 8003a94:	2b40      	cmp	r3, #64	; 0x40
 8003a96:	d86f      	bhi.n	8003b78 <HAL_TIM_ConfigClockSource+0x168>
 8003a98:	2b30      	cmp	r3, #48	; 0x30
 8003a9a:	d064      	beq.n	8003b66 <HAL_TIM_ConfigClockSource+0x156>
 8003a9c:	2b30      	cmp	r3, #48	; 0x30
 8003a9e:	d86b      	bhi.n	8003b78 <HAL_TIM_ConfigClockSource+0x168>
 8003aa0:	2b20      	cmp	r3, #32
 8003aa2:	d060      	beq.n	8003b66 <HAL_TIM_ConfigClockSource+0x156>
 8003aa4:	2b20      	cmp	r3, #32
 8003aa6:	d867      	bhi.n	8003b78 <HAL_TIM_ConfigClockSource+0x168>
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d05c      	beq.n	8003b66 <HAL_TIM_ConfigClockSource+0x156>
 8003aac:	2b10      	cmp	r3, #16
 8003aae:	d05a      	beq.n	8003b66 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8003ab0:	e062      	b.n	8003b78 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	6818      	ldr	r0, [r3, #0]
 8003ab6:	683b      	ldr	r3, [r7, #0]
 8003ab8:	6899      	ldr	r1, [r3, #8]
 8003aba:	683b      	ldr	r3, [r7, #0]
 8003abc:	685a      	ldr	r2, [r3, #4]
 8003abe:	683b      	ldr	r3, [r7, #0]
 8003ac0:	68db      	ldr	r3, [r3, #12]
 8003ac2:	f000 fd0f 	bl	80044e4 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	689b      	ldr	r3, [r3, #8]
 8003acc:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003ad4:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	68fa      	ldr	r2, [r7, #12]
 8003adc:	609a      	str	r2, [r3, #8]
      break;
 8003ade:	e04e      	b.n	8003b7e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	6818      	ldr	r0, [r3, #0]
 8003ae4:	683b      	ldr	r3, [r7, #0]
 8003ae6:	6899      	ldr	r1, [r3, #8]
 8003ae8:	683b      	ldr	r3, [r7, #0]
 8003aea:	685a      	ldr	r2, [r3, #4]
 8003aec:	683b      	ldr	r3, [r7, #0]
 8003aee:	68db      	ldr	r3, [r3, #12]
 8003af0:	f000 fcf8 	bl	80044e4 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	689a      	ldr	r2, [r3, #8]
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003b02:	609a      	str	r2, [r3, #8]
      break;
 8003b04:	e03b      	b.n	8003b7e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	6818      	ldr	r0, [r3, #0]
 8003b0a:	683b      	ldr	r3, [r7, #0]
 8003b0c:	6859      	ldr	r1, [r3, #4]
 8003b0e:	683b      	ldr	r3, [r7, #0]
 8003b10:	68db      	ldr	r3, [r3, #12]
 8003b12:	461a      	mov	r2, r3
 8003b14:	f000 fbbc 	bl	8004290 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	2150      	movs	r1, #80	; 0x50
 8003b1e:	4618      	mov	r0, r3
 8003b20:	f000 fcc6 	bl	80044b0 <TIM_ITRx_SetConfig>
      break;
 8003b24:	e02b      	b.n	8003b7e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	6818      	ldr	r0, [r3, #0]
 8003b2a:	683b      	ldr	r3, [r7, #0]
 8003b2c:	6859      	ldr	r1, [r3, #4]
 8003b2e:	683b      	ldr	r3, [r7, #0]
 8003b30:	68db      	ldr	r3, [r3, #12]
 8003b32:	461a      	mov	r2, r3
 8003b34:	f000 fc16 	bl	8004364 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	2160      	movs	r1, #96	; 0x60
 8003b3e:	4618      	mov	r0, r3
 8003b40:	f000 fcb6 	bl	80044b0 <TIM_ITRx_SetConfig>
      break;
 8003b44:	e01b      	b.n	8003b7e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	6818      	ldr	r0, [r3, #0]
 8003b4a:	683b      	ldr	r3, [r7, #0]
 8003b4c:	6859      	ldr	r1, [r3, #4]
 8003b4e:	683b      	ldr	r3, [r7, #0]
 8003b50:	68db      	ldr	r3, [r3, #12]
 8003b52:	461a      	mov	r2, r3
 8003b54:	f000 fb9c 	bl	8004290 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	2140      	movs	r1, #64	; 0x40
 8003b5e:	4618      	mov	r0, r3
 8003b60:	f000 fca6 	bl	80044b0 <TIM_ITRx_SetConfig>
      break;
 8003b64:	e00b      	b.n	8003b7e <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681a      	ldr	r2, [r3, #0]
 8003b6a:	683b      	ldr	r3, [r7, #0]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	4619      	mov	r1, r3
 8003b70:	4610      	mov	r0, r2
 8003b72:	f000 fc9d 	bl	80044b0 <TIM_ITRx_SetConfig>
        break;
 8003b76:	e002      	b.n	8003b7e <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8003b78:	bf00      	nop
 8003b7a:	e000      	b.n	8003b7e <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8003b7c:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	2201      	movs	r2, #1
 8003b82:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	2200      	movs	r2, #0
 8003b8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003b8e:	2300      	movs	r3, #0
}
 8003b90:	4618      	mov	r0, r3
 8003b92:	3710      	adds	r7, #16
 8003b94:	46bd      	mov	sp, r7
 8003b96:	bd80      	pop	{r7, pc}

08003b98 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8003b98:	b580      	push	{r7, lr}
 8003b9a:	b082      	sub	sp, #8
 8003b9c:	af00      	add	r7, sp, #0
 8003b9e:	6078      	str	r0, [r7, #4]
 8003ba0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003ba8:	2b01      	cmp	r3, #1
 8003baa:	d101      	bne.n	8003bb0 <HAL_TIM_SlaveConfigSynchro+0x18>
 8003bac:	2302      	movs	r3, #2
 8003bae:	e031      	b.n	8003c14 <HAL_TIM_SlaveConfigSynchro+0x7c>
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	2201      	movs	r2, #1
 8003bb4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	2202      	movs	r2, #2
 8003bbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8003bc0:	6839      	ldr	r1, [r7, #0]
 8003bc2:	6878      	ldr	r0, [r7, #4]
 8003bc4:	f000 fa7c 	bl	80040c0 <TIM_SlaveTimer_SetConfig>
 8003bc8:	4603      	mov	r3, r0
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d009      	beq.n	8003be2 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	2201      	movs	r2, #1
 8003bd2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	2200      	movs	r2, #0
 8003bda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 8003bde:	2301      	movs	r3, #1
 8003be0:	e018      	b.n	8003c14 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	68da      	ldr	r2, [r3, #12]
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003bf0:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	68da      	ldr	r2, [r3, #12]
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003c00:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	2201      	movs	r2, #1
 8003c06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	2200      	movs	r2, #0
 8003c0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003c12:	2300      	movs	r3, #0
}
 8003c14:	4618      	mov	r0, r3
 8003c16:	3708      	adds	r7, #8
 8003c18:	46bd      	mov	sp, r7
 8003c1a:	bd80      	pop	{r7, pc}

08003c1c <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003c1c:	b480      	push	{r7}
 8003c1e:	b085      	sub	sp, #20
 8003c20:	af00      	add	r7, sp, #0
 8003c22:	6078      	str	r0, [r7, #4]
 8003c24:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8003c26:	2300      	movs	r3, #0
 8003c28:	60fb      	str	r3, [r7, #12]
 8003c2a:	683b      	ldr	r3, [r7, #0]
 8003c2c:	2b0c      	cmp	r3, #12
 8003c2e:	d831      	bhi.n	8003c94 <HAL_TIM_ReadCapturedValue+0x78>
 8003c30:	a201      	add	r2, pc, #4	; (adr r2, 8003c38 <HAL_TIM_ReadCapturedValue+0x1c>)
 8003c32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c36:	bf00      	nop
 8003c38:	08003c6d 	.word	0x08003c6d
 8003c3c:	08003c95 	.word	0x08003c95
 8003c40:	08003c95 	.word	0x08003c95
 8003c44:	08003c95 	.word	0x08003c95
 8003c48:	08003c77 	.word	0x08003c77
 8003c4c:	08003c95 	.word	0x08003c95
 8003c50:	08003c95 	.word	0x08003c95
 8003c54:	08003c95 	.word	0x08003c95
 8003c58:	08003c81 	.word	0x08003c81
 8003c5c:	08003c95 	.word	0x08003c95
 8003c60:	08003c95 	.word	0x08003c95
 8003c64:	08003c95 	.word	0x08003c95
 8003c68:	08003c8b 	.word	0x08003c8b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c72:	60fb      	str	r3, [r7, #12]

      break;
 8003c74:	e00f      	b.n	8003c96 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c7c:	60fb      	str	r3, [r7, #12]

      break;
 8003c7e:	e00a      	b.n	8003c96 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c86:	60fb      	str	r3, [r7, #12]

      break;
 8003c88:	e005      	b.n	8003c96 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c90:	60fb      	str	r3, [r7, #12]

      break;
 8003c92:	e000      	b.n	8003c96 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8003c94:	bf00      	nop
  }

  return tmpreg;
 8003c96:	68fb      	ldr	r3, [r7, #12]
}
 8003c98:	4618      	mov	r0, r3
 8003c9a:	3714      	adds	r7, #20
 8003c9c:	46bd      	mov	sp, r7
 8003c9e:	bc80      	pop	{r7}
 8003ca0:	4770      	bx	lr
 8003ca2:	bf00      	nop

08003ca4 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003ca4:	b480      	push	{r7}
 8003ca6:	b083      	sub	sp, #12
 8003ca8:	af00      	add	r7, sp, #0
 8003caa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8003cac:	bf00      	nop
 8003cae:	370c      	adds	r7, #12
 8003cb0:	46bd      	mov	sp, r7
 8003cb2:	bc80      	pop	{r7}
 8003cb4:	4770      	bx	lr

08003cb6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003cb6:	b480      	push	{r7}
 8003cb8:	b083      	sub	sp, #12
 8003cba:	af00      	add	r7, sp, #0
 8003cbc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003cbe:	bf00      	nop
 8003cc0:	370c      	adds	r7, #12
 8003cc2:	46bd      	mov	sp, r7
 8003cc4:	bc80      	pop	{r7}
 8003cc6:	4770      	bx	lr

08003cc8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003cc8:	b480      	push	{r7}
 8003cca:	b083      	sub	sp, #12
 8003ccc:	af00      	add	r7, sp, #0
 8003cce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003cd0:	bf00      	nop
 8003cd2:	370c      	adds	r7, #12
 8003cd4:	46bd      	mov	sp, r7
 8003cd6:	bc80      	pop	{r7}
 8003cd8:	4770      	bx	lr

08003cda <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003cda:	b480      	push	{r7}
 8003cdc:	b083      	sub	sp, #12
 8003cde:	af00      	add	r7, sp, #0
 8003ce0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003ce2:	bf00      	nop
 8003ce4:	370c      	adds	r7, #12
 8003ce6:	46bd      	mov	sp, r7
 8003ce8:	bc80      	pop	{r7}
 8003cea:	4770      	bx	lr

08003cec <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003cec:	b480      	push	{r7}
 8003cee:	b085      	sub	sp, #20
 8003cf0:	af00      	add	r7, sp, #0
 8003cf2:	6078      	str	r0, [r7, #4]
 8003cf4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	4a29      	ldr	r2, [pc, #164]	; (8003da4 <TIM_Base_SetConfig+0xb8>)
 8003d00:	4293      	cmp	r3, r2
 8003d02:	d00b      	beq.n	8003d1c <TIM_Base_SetConfig+0x30>
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d0a:	d007      	beq.n	8003d1c <TIM_Base_SetConfig+0x30>
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	4a26      	ldr	r2, [pc, #152]	; (8003da8 <TIM_Base_SetConfig+0xbc>)
 8003d10:	4293      	cmp	r3, r2
 8003d12:	d003      	beq.n	8003d1c <TIM_Base_SetConfig+0x30>
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	4a25      	ldr	r2, [pc, #148]	; (8003dac <TIM_Base_SetConfig+0xc0>)
 8003d18:	4293      	cmp	r3, r2
 8003d1a:	d108      	bne.n	8003d2e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d22:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003d24:	683b      	ldr	r3, [r7, #0]
 8003d26:	685b      	ldr	r3, [r3, #4]
 8003d28:	68fa      	ldr	r2, [r7, #12]
 8003d2a:	4313      	orrs	r3, r2
 8003d2c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	4a1c      	ldr	r2, [pc, #112]	; (8003da4 <TIM_Base_SetConfig+0xb8>)
 8003d32:	4293      	cmp	r3, r2
 8003d34:	d00b      	beq.n	8003d4e <TIM_Base_SetConfig+0x62>
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d3c:	d007      	beq.n	8003d4e <TIM_Base_SetConfig+0x62>
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	4a19      	ldr	r2, [pc, #100]	; (8003da8 <TIM_Base_SetConfig+0xbc>)
 8003d42:	4293      	cmp	r3, r2
 8003d44:	d003      	beq.n	8003d4e <TIM_Base_SetConfig+0x62>
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	4a18      	ldr	r2, [pc, #96]	; (8003dac <TIM_Base_SetConfig+0xc0>)
 8003d4a:	4293      	cmp	r3, r2
 8003d4c:	d108      	bne.n	8003d60 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003d54:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003d56:	683b      	ldr	r3, [r7, #0]
 8003d58:	68db      	ldr	r3, [r3, #12]
 8003d5a:	68fa      	ldr	r2, [r7, #12]
 8003d5c:	4313      	orrs	r3, r2
 8003d5e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003d66:	683b      	ldr	r3, [r7, #0]
 8003d68:	695b      	ldr	r3, [r3, #20]
 8003d6a:	4313      	orrs	r3, r2
 8003d6c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	68fa      	ldr	r2, [r7, #12]
 8003d72:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003d74:	683b      	ldr	r3, [r7, #0]
 8003d76:	689a      	ldr	r2, [r3, #8]
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003d7c:	683b      	ldr	r3, [r7, #0]
 8003d7e:	681a      	ldr	r2, [r3, #0]
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	4a07      	ldr	r2, [pc, #28]	; (8003da4 <TIM_Base_SetConfig+0xb8>)
 8003d88:	4293      	cmp	r3, r2
 8003d8a:	d103      	bne.n	8003d94 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003d8c:	683b      	ldr	r3, [r7, #0]
 8003d8e:	691a      	ldr	r2, [r3, #16]
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	2201      	movs	r2, #1
 8003d98:	615a      	str	r2, [r3, #20]
}
 8003d9a:	bf00      	nop
 8003d9c:	3714      	adds	r7, #20
 8003d9e:	46bd      	mov	sp, r7
 8003da0:	bc80      	pop	{r7}
 8003da2:	4770      	bx	lr
 8003da4:	40012c00 	.word	0x40012c00
 8003da8:	40000400 	.word	0x40000400
 8003dac:	40000800 	.word	0x40000800

08003db0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003db0:	b480      	push	{r7}
 8003db2:	b087      	sub	sp, #28
 8003db4:	af00      	add	r7, sp, #0
 8003db6:	6078      	str	r0, [r7, #4]
 8003db8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	6a1b      	ldr	r3, [r3, #32]
 8003dbe:	f023 0201 	bic.w	r2, r3, #1
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	6a1b      	ldr	r3, [r3, #32]
 8003dca:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	685b      	ldr	r3, [r3, #4]
 8003dd0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	699b      	ldr	r3, [r3, #24]
 8003dd6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003dde:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	f023 0303 	bic.w	r3, r3, #3
 8003de6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003de8:	683b      	ldr	r3, [r7, #0]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	68fa      	ldr	r2, [r7, #12]
 8003dee:	4313      	orrs	r3, r2
 8003df0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003df2:	697b      	ldr	r3, [r7, #20]
 8003df4:	f023 0302 	bic.w	r3, r3, #2
 8003df8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003dfa:	683b      	ldr	r3, [r7, #0]
 8003dfc:	689b      	ldr	r3, [r3, #8]
 8003dfe:	697a      	ldr	r2, [r7, #20]
 8003e00:	4313      	orrs	r3, r2
 8003e02:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	4a1c      	ldr	r2, [pc, #112]	; (8003e78 <TIM_OC1_SetConfig+0xc8>)
 8003e08:	4293      	cmp	r3, r2
 8003e0a:	d10c      	bne.n	8003e26 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003e0c:	697b      	ldr	r3, [r7, #20]
 8003e0e:	f023 0308 	bic.w	r3, r3, #8
 8003e12:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003e14:	683b      	ldr	r3, [r7, #0]
 8003e16:	68db      	ldr	r3, [r3, #12]
 8003e18:	697a      	ldr	r2, [r7, #20]
 8003e1a:	4313      	orrs	r3, r2
 8003e1c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003e1e:	697b      	ldr	r3, [r7, #20]
 8003e20:	f023 0304 	bic.w	r3, r3, #4
 8003e24:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	4a13      	ldr	r2, [pc, #76]	; (8003e78 <TIM_OC1_SetConfig+0xc8>)
 8003e2a:	4293      	cmp	r3, r2
 8003e2c:	d111      	bne.n	8003e52 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003e2e:	693b      	ldr	r3, [r7, #16]
 8003e30:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003e34:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003e36:	693b      	ldr	r3, [r7, #16]
 8003e38:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003e3c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003e3e:	683b      	ldr	r3, [r7, #0]
 8003e40:	695b      	ldr	r3, [r3, #20]
 8003e42:	693a      	ldr	r2, [r7, #16]
 8003e44:	4313      	orrs	r3, r2
 8003e46:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003e48:	683b      	ldr	r3, [r7, #0]
 8003e4a:	699b      	ldr	r3, [r3, #24]
 8003e4c:	693a      	ldr	r2, [r7, #16]
 8003e4e:	4313      	orrs	r3, r2
 8003e50:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	693a      	ldr	r2, [r7, #16]
 8003e56:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	68fa      	ldr	r2, [r7, #12]
 8003e5c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003e5e:	683b      	ldr	r3, [r7, #0]
 8003e60:	685a      	ldr	r2, [r3, #4]
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	697a      	ldr	r2, [r7, #20]
 8003e6a:	621a      	str	r2, [r3, #32]
}
 8003e6c:	bf00      	nop
 8003e6e:	371c      	adds	r7, #28
 8003e70:	46bd      	mov	sp, r7
 8003e72:	bc80      	pop	{r7}
 8003e74:	4770      	bx	lr
 8003e76:	bf00      	nop
 8003e78:	40012c00 	.word	0x40012c00

08003e7c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003e7c:	b480      	push	{r7}
 8003e7e:	b087      	sub	sp, #28
 8003e80:	af00      	add	r7, sp, #0
 8003e82:	6078      	str	r0, [r7, #4]
 8003e84:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	6a1b      	ldr	r3, [r3, #32]
 8003e8a:	f023 0210 	bic.w	r2, r3, #16
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	6a1b      	ldr	r3, [r3, #32]
 8003e96:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	685b      	ldr	r3, [r3, #4]
 8003e9c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	699b      	ldr	r3, [r3, #24]
 8003ea2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003eaa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003eb2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003eb4:	683b      	ldr	r3, [r7, #0]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	021b      	lsls	r3, r3, #8
 8003eba:	68fa      	ldr	r2, [r7, #12]
 8003ebc:	4313      	orrs	r3, r2
 8003ebe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003ec0:	697b      	ldr	r3, [r7, #20]
 8003ec2:	f023 0320 	bic.w	r3, r3, #32
 8003ec6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003ec8:	683b      	ldr	r3, [r7, #0]
 8003eca:	689b      	ldr	r3, [r3, #8]
 8003ecc:	011b      	lsls	r3, r3, #4
 8003ece:	697a      	ldr	r2, [r7, #20]
 8003ed0:	4313      	orrs	r3, r2
 8003ed2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	4a1d      	ldr	r2, [pc, #116]	; (8003f4c <TIM_OC2_SetConfig+0xd0>)
 8003ed8:	4293      	cmp	r3, r2
 8003eda:	d10d      	bne.n	8003ef8 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003edc:	697b      	ldr	r3, [r7, #20]
 8003ede:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003ee2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003ee4:	683b      	ldr	r3, [r7, #0]
 8003ee6:	68db      	ldr	r3, [r3, #12]
 8003ee8:	011b      	lsls	r3, r3, #4
 8003eea:	697a      	ldr	r2, [r7, #20]
 8003eec:	4313      	orrs	r3, r2
 8003eee:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003ef0:	697b      	ldr	r3, [r7, #20]
 8003ef2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003ef6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	4a14      	ldr	r2, [pc, #80]	; (8003f4c <TIM_OC2_SetConfig+0xd0>)
 8003efc:	4293      	cmp	r3, r2
 8003efe:	d113      	bne.n	8003f28 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003f00:	693b      	ldr	r3, [r7, #16]
 8003f02:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003f06:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003f08:	693b      	ldr	r3, [r7, #16]
 8003f0a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003f0e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003f10:	683b      	ldr	r3, [r7, #0]
 8003f12:	695b      	ldr	r3, [r3, #20]
 8003f14:	009b      	lsls	r3, r3, #2
 8003f16:	693a      	ldr	r2, [r7, #16]
 8003f18:	4313      	orrs	r3, r2
 8003f1a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003f1c:	683b      	ldr	r3, [r7, #0]
 8003f1e:	699b      	ldr	r3, [r3, #24]
 8003f20:	009b      	lsls	r3, r3, #2
 8003f22:	693a      	ldr	r2, [r7, #16]
 8003f24:	4313      	orrs	r3, r2
 8003f26:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	693a      	ldr	r2, [r7, #16]
 8003f2c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	68fa      	ldr	r2, [r7, #12]
 8003f32:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003f34:	683b      	ldr	r3, [r7, #0]
 8003f36:	685a      	ldr	r2, [r3, #4]
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	697a      	ldr	r2, [r7, #20]
 8003f40:	621a      	str	r2, [r3, #32]
}
 8003f42:	bf00      	nop
 8003f44:	371c      	adds	r7, #28
 8003f46:	46bd      	mov	sp, r7
 8003f48:	bc80      	pop	{r7}
 8003f4a:	4770      	bx	lr
 8003f4c:	40012c00 	.word	0x40012c00

08003f50 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003f50:	b480      	push	{r7}
 8003f52:	b087      	sub	sp, #28
 8003f54:	af00      	add	r7, sp, #0
 8003f56:	6078      	str	r0, [r7, #4]
 8003f58:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	6a1b      	ldr	r3, [r3, #32]
 8003f5e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	6a1b      	ldr	r3, [r3, #32]
 8003f6a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	685b      	ldr	r3, [r3, #4]
 8003f70:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	69db      	ldr	r3, [r3, #28]
 8003f76:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f7e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	f023 0303 	bic.w	r3, r3, #3
 8003f86:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003f88:	683b      	ldr	r3, [r7, #0]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	68fa      	ldr	r2, [r7, #12]
 8003f8e:	4313      	orrs	r3, r2
 8003f90:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003f92:	697b      	ldr	r3, [r7, #20]
 8003f94:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003f98:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003f9a:	683b      	ldr	r3, [r7, #0]
 8003f9c:	689b      	ldr	r3, [r3, #8]
 8003f9e:	021b      	lsls	r3, r3, #8
 8003fa0:	697a      	ldr	r2, [r7, #20]
 8003fa2:	4313      	orrs	r3, r2
 8003fa4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	4a1d      	ldr	r2, [pc, #116]	; (8004020 <TIM_OC3_SetConfig+0xd0>)
 8003faa:	4293      	cmp	r3, r2
 8003fac:	d10d      	bne.n	8003fca <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003fae:	697b      	ldr	r3, [r7, #20]
 8003fb0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003fb4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003fb6:	683b      	ldr	r3, [r7, #0]
 8003fb8:	68db      	ldr	r3, [r3, #12]
 8003fba:	021b      	lsls	r3, r3, #8
 8003fbc:	697a      	ldr	r2, [r7, #20]
 8003fbe:	4313      	orrs	r3, r2
 8003fc0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003fc2:	697b      	ldr	r3, [r7, #20]
 8003fc4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003fc8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	4a14      	ldr	r2, [pc, #80]	; (8004020 <TIM_OC3_SetConfig+0xd0>)
 8003fce:	4293      	cmp	r3, r2
 8003fd0:	d113      	bne.n	8003ffa <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003fd2:	693b      	ldr	r3, [r7, #16]
 8003fd4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003fd8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003fda:	693b      	ldr	r3, [r7, #16]
 8003fdc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003fe0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003fe2:	683b      	ldr	r3, [r7, #0]
 8003fe4:	695b      	ldr	r3, [r3, #20]
 8003fe6:	011b      	lsls	r3, r3, #4
 8003fe8:	693a      	ldr	r2, [r7, #16]
 8003fea:	4313      	orrs	r3, r2
 8003fec:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003fee:	683b      	ldr	r3, [r7, #0]
 8003ff0:	699b      	ldr	r3, [r3, #24]
 8003ff2:	011b      	lsls	r3, r3, #4
 8003ff4:	693a      	ldr	r2, [r7, #16]
 8003ff6:	4313      	orrs	r3, r2
 8003ff8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	693a      	ldr	r2, [r7, #16]
 8003ffe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	68fa      	ldr	r2, [r7, #12]
 8004004:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004006:	683b      	ldr	r3, [r7, #0]
 8004008:	685a      	ldr	r2, [r3, #4]
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	697a      	ldr	r2, [r7, #20]
 8004012:	621a      	str	r2, [r3, #32]
}
 8004014:	bf00      	nop
 8004016:	371c      	adds	r7, #28
 8004018:	46bd      	mov	sp, r7
 800401a:	bc80      	pop	{r7}
 800401c:	4770      	bx	lr
 800401e:	bf00      	nop
 8004020:	40012c00 	.word	0x40012c00

08004024 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004024:	b480      	push	{r7}
 8004026:	b087      	sub	sp, #28
 8004028:	af00      	add	r7, sp, #0
 800402a:	6078      	str	r0, [r7, #4]
 800402c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	6a1b      	ldr	r3, [r3, #32]
 8004032:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	6a1b      	ldr	r3, [r3, #32]
 800403e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	685b      	ldr	r3, [r3, #4]
 8004044:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	69db      	ldr	r3, [r3, #28]
 800404a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004052:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800405a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800405c:	683b      	ldr	r3, [r7, #0]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	021b      	lsls	r3, r3, #8
 8004062:	68fa      	ldr	r2, [r7, #12]
 8004064:	4313      	orrs	r3, r2
 8004066:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004068:	693b      	ldr	r3, [r7, #16]
 800406a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800406e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004070:	683b      	ldr	r3, [r7, #0]
 8004072:	689b      	ldr	r3, [r3, #8]
 8004074:	031b      	lsls	r3, r3, #12
 8004076:	693a      	ldr	r2, [r7, #16]
 8004078:	4313      	orrs	r3, r2
 800407a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	4a0f      	ldr	r2, [pc, #60]	; (80040bc <TIM_OC4_SetConfig+0x98>)
 8004080:	4293      	cmp	r3, r2
 8004082:	d109      	bne.n	8004098 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004084:	697b      	ldr	r3, [r7, #20]
 8004086:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800408a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800408c:	683b      	ldr	r3, [r7, #0]
 800408e:	695b      	ldr	r3, [r3, #20]
 8004090:	019b      	lsls	r3, r3, #6
 8004092:	697a      	ldr	r2, [r7, #20]
 8004094:	4313      	orrs	r3, r2
 8004096:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	697a      	ldr	r2, [r7, #20]
 800409c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	68fa      	ldr	r2, [r7, #12]
 80040a2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80040a4:	683b      	ldr	r3, [r7, #0]
 80040a6:	685a      	ldr	r2, [r3, #4]
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	693a      	ldr	r2, [r7, #16]
 80040b0:	621a      	str	r2, [r3, #32]
}
 80040b2:	bf00      	nop
 80040b4:	371c      	adds	r7, #28
 80040b6:	46bd      	mov	sp, r7
 80040b8:	bc80      	pop	{r7}
 80040ba:	4770      	bx	lr
 80040bc:	40012c00 	.word	0x40012c00

080040c0 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 80040c0:	b580      	push	{r7, lr}
 80040c2:	b086      	sub	sp, #24
 80040c4:	af00      	add	r7, sp, #0
 80040c6:	6078      	str	r0, [r7, #4]
 80040c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	689b      	ldr	r3, [r3, #8]
 80040d0:	617b      	str	r3, [r7, #20]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80040d2:	697b      	ldr	r3, [r7, #20]
 80040d4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80040d8:	617b      	str	r3, [r7, #20]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 80040da:	683b      	ldr	r3, [r7, #0]
 80040dc:	685b      	ldr	r3, [r3, #4]
 80040de:	697a      	ldr	r2, [r7, #20]
 80040e0:	4313      	orrs	r3, r2
 80040e2:	617b      	str	r3, [r7, #20]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 80040e4:	697b      	ldr	r3, [r7, #20]
 80040e6:	f023 0307 	bic.w	r3, r3, #7
 80040ea:	617b      	str	r3, [r7, #20]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 80040ec:	683b      	ldr	r3, [r7, #0]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	697a      	ldr	r2, [r7, #20]
 80040f2:	4313      	orrs	r3, r2
 80040f4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	697a      	ldr	r2, [r7, #20]
 80040fc:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 80040fe:	683b      	ldr	r3, [r7, #0]
 8004100:	685b      	ldr	r3, [r3, #4]
 8004102:	2b70      	cmp	r3, #112	; 0x70
 8004104:	d01a      	beq.n	800413c <TIM_SlaveTimer_SetConfig+0x7c>
 8004106:	2b70      	cmp	r3, #112	; 0x70
 8004108:	d860      	bhi.n	80041cc <TIM_SlaveTimer_SetConfig+0x10c>
 800410a:	2b60      	cmp	r3, #96	; 0x60
 800410c:	d054      	beq.n	80041b8 <TIM_SlaveTimer_SetConfig+0xf8>
 800410e:	2b60      	cmp	r3, #96	; 0x60
 8004110:	d85c      	bhi.n	80041cc <TIM_SlaveTimer_SetConfig+0x10c>
 8004112:	2b50      	cmp	r3, #80	; 0x50
 8004114:	d046      	beq.n	80041a4 <TIM_SlaveTimer_SetConfig+0xe4>
 8004116:	2b50      	cmp	r3, #80	; 0x50
 8004118:	d858      	bhi.n	80041cc <TIM_SlaveTimer_SetConfig+0x10c>
 800411a:	2b40      	cmp	r3, #64	; 0x40
 800411c:	d019      	beq.n	8004152 <TIM_SlaveTimer_SetConfig+0x92>
 800411e:	2b40      	cmp	r3, #64	; 0x40
 8004120:	d854      	bhi.n	80041cc <TIM_SlaveTimer_SetConfig+0x10c>
 8004122:	2b30      	cmp	r3, #48	; 0x30
 8004124:	d054      	beq.n	80041d0 <TIM_SlaveTimer_SetConfig+0x110>
 8004126:	2b30      	cmp	r3, #48	; 0x30
 8004128:	d850      	bhi.n	80041cc <TIM_SlaveTimer_SetConfig+0x10c>
 800412a:	2b20      	cmp	r3, #32
 800412c:	d050      	beq.n	80041d0 <TIM_SlaveTimer_SetConfig+0x110>
 800412e:	2b20      	cmp	r3, #32
 8004130:	d84c      	bhi.n	80041cc <TIM_SlaveTimer_SetConfig+0x10c>
 8004132:	2b00      	cmp	r3, #0
 8004134:	d04c      	beq.n	80041d0 <TIM_SlaveTimer_SetConfig+0x110>
 8004136:	2b10      	cmp	r3, #16
 8004138:	d04a      	beq.n	80041d0 <TIM_SlaveTimer_SetConfig+0x110>
        assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
        break;
      }

    default:
      break;
 800413a:	e047      	b.n	80041cc <TIM_SlaveTimer_SetConfig+0x10c>
      TIM_ETR_SetConfig(htim->Instance,
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	6818      	ldr	r0, [r3, #0]
 8004140:	683b      	ldr	r3, [r7, #0]
 8004142:	68d9      	ldr	r1, [r3, #12]
 8004144:	683b      	ldr	r3, [r7, #0]
 8004146:	689a      	ldr	r2, [r3, #8]
 8004148:	683b      	ldr	r3, [r7, #0]
 800414a:	691b      	ldr	r3, [r3, #16]
 800414c:	f000 f9ca 	bl	80044e4 <TIM_ETR_SetConfig>
      break;
 8004150:	e03f      	b.n	80041d2 <TIM_SlaveTimer_SetConfig+0x112>
      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 8004152:	683b      	ldr	r3, [r7, #0]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	2b05      	cmp	r3, #5
 8004158:	d101      	bne.n	800415e <TIM_SlaveTimer_SetConfig+0x9e>
        return HAL_ERROR;
 800415a:	2301      	movs	r3, #1
 800415c:	e03a      	b.n	80041d4 <TIM_SlaveTimer_SetConfig+0x114>
      tmpccer = htim->Instance->CCER;
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	6a1b      	ldr	r3, [r3, #32]
 8004164:	613b      	str	r3, [r7, #16]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	6a1a      	ldr	r2, [r3, #32]
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	f022 0201 	bic.w	r2, r2, #1
 8004174:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	699b      	ldr	r3, [r3, #24]
 800417c:	60fb      	str	r3, [r7, #12]
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004184:	60fb      	str	r3, [r7, #12]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8004186:	683b      	ldr	r3, [r7, #0]
 8004188:	691b      	ldr	r3, [r3, #16]
 800418a:	011b      	lsls	r3, r3, #4
 800418c:	68fa      	ldr	r2, [r7, #12]
 800418e:	4313      	orrs	r3, r2
 8004190:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCMR1 = tmpccmr1;
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	68fa      	ldr	r2, [r7, #12]
 8004198:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	693a      	ldr	r2, [r7, #16]
 80041a0:	621a      	str	r2, [r3, #32]
      break;
 80041a2:	e016      	b.n	80041d2 <TIM_SlaveTimer_SetConfig+0x112>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	6818      	ldr	r0, [r3, #0]
 80041a8:	683b      	ldr	r3, [r7, #0]
 80041aa:	6899      	ldr	r1, [r3, #8]
 80041ac:	683b      	ldr	r3, [r7, #0]
 80041ae:	691b      	ldr	r3, [r3, #16]
 80041b0:	461a      	mov	r2, r3
 80041b2:	f000 f86d 	bl	8004290 <TIM_TI1_ConfigInputStage>
      break;
 80041b6:	e00c      	b.n	80041d2 <TIM_SlaveTimer_SetConfig+0x112>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	6818      	ldr	r0, [r3, #0]
 80041bc:	683b      	ldr	r3, [r7, #0]
 80041be:	6899      	ldr	r1, [r3, #8]
 80041c0:	683b      	ldr	r3, [r7, #0]
 80041c2:	691b      	ldr	r3, [r3, #16]
 80041c4:	461a      	mov	r2, r3
 80041c6:	f000 f8cd 	bl	8004364 <TIM_TI2_ConfigInputStage>
      break;
 80041ca:	e002      	b.n	80041d2 <TIM_SlaveTimer_SetConfig+0x112>
      break;
 80041cc:	bf00      	nop
 80041ce:	e000      	b.n	80041d2 <TIM_SlaveTimer_SetConfig+0x112>
        break;
 80041d0:	bf00      	nop
  }
  return HAL_OK;
 80041d2:	2300      	movs	r3, #0
}
 80041d4:	4618      	mov	r0, r3
 80041d6:	3718      	adds	r7, #24
 80041d8:	46bd      	mov	sp, r7
 80041da:	bd80      	pop	{r7, pc}

080041dc <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 80041dc:	b480      	push	{r7}
 80041de:	b087      	sub	sp, #28
 80041e0:	af00      	add	r7, sp, #0
 80041e2:	60f8      	str	r0, [r7, #12]
 80041e4:	60b9      	str	r1, [r7, #8]
 80041e6:	607a      	str	r2, [r7, #4]
 80041e8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	6a1b      	ldr	r3, [r3, #32]
 80041ee:	f023 0201 	bic.w	r2, r3, #1
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	699b      	ldr	r3, [r3, #24]
 80041fa:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	6a1b      	ldr	r3, [r3, #32]
 8004200:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	4a1f      	ldr	r2, [pc, #124]	; (8004284 <TIM_TI1_SetConfig+0xa8>)
 8004206:	4293      	cmp	r3, r2
 8004208:	d00b      	beq.n	8004222 <TIM_TI1_SetConfig+0x46>
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004210:	d007      	beq.n	8004222 <TIM_TI1_SetConfig+0x46>
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	4a1c      	ldr	r2, [pc, #112]	; (8004288 <TIM_TI1_SetConfig+0xac>)
 8004216:	4293      	cmp	r3, r2
 8004218:	d003      	beq.n	8004222 <TIM_TI1_SetConfig+0x46>
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	4a1b      	ldr	r2, [pc, #108]	; (800428c <TIM_TI1_SetConfig+0xb0>)
 800421e:	4293      	cmp	r3, r2
 8004220:	d101      	bne.n	8004226 <TIM_TI1_SetConfig+0x4a>
 8004222:	2301      	movs	r3, #1
 8004224:	e000      	b.n	8004228 <TIM_TI1_SetConfig+0x4c>
 8004226:	2300      	movs	r3, #0
 8004228:	2b00      	cmp	r3, #0
 800422a:	d008      	beq.n	800423e <TIM_TI1_SetConfig+0x62>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 800422c:	697b      	ldr	r3, [r7, #20]
 800422e:	f023 0303 	bic.w	r3, r3, #3
 8004232:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8004234:	697a      	ldr	r2, [r7, #20]
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	4313      	orrs	r3, r2
 800423a:	617b      	str	r3, [r7, #20]
 800423c:	e003      	b.n	8004246 <TIM_TI1_SetConfig+0x6a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800423e:	697b      	ldr	r3, [r7, #20]
 8004240:	f043 0301 	orr.w	r3, r3, #1
 8004244:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004246:	697b      	ldr	r3, [r7, #20]
 8004248:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800424c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800424e:	683b      	ldr	r3, [r7, #0]
 8004250:	011b      	lsls	r3, r3, #4
 8004252:	b2db      	uxtb	r3, r3
 8004254:	697a      	ldr	r2, [r7, #20]
 8004256:	4313      	orrs	r3, r2
 8004258:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800425a:	693b      	ldr	r3, [r7, #16]
 800425c:	f023 030a 	bic.w	r3, r3, #10
 8004260:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8004262:	68bb      	ldr	r3, [r7, #8]
 8004264:	f003 030a 	and.w	r3, r3, #10
 8004268:	693a      	ldr	r2, [r7, #16]
 800426a:	4313      	orrs	r3, r2
 800426c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	697a      	ldr	r2, [r7, #20]
 8004272:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	693a      	ldr	r2, [r7, #16]
 8004278:	621a      	str	r2, [r3, #32]
}
 800427a:	bf00      	nop
 800427c:	371c      	adds	r7, #28
 800427e:	46bd      	mov	sp, r7
 8004280:	bc80      	pop	{r7}
 8004282:	4770      	bx	lr
 8004284:	40012c00 	.word	0x40012c00
 8004288:	40000400 	.word	0x40000400
 800428c:	40000800 	.word	0x40000800

08004290 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004290:	b480      	push	{r7}
 8004292:	b087      	sub	sp, #28
 8004294:	af00      	add	r7, sp, #0
 8004296:	60f8      	str	r0, [r7, #12]
 8004298:	60b9      	str	r1, [r7, #8]
 800429a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	6a1b      	ldr	r3, [r3, #32]
 80042a0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	6a1b      	ldr	r3, [r3, #32]
 80042a6:	f023 0201 	bic.w	r2, r3, #1
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	699b      	ldr	r3, [r3, #24]
 80042b2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80042b4:	693b      	ldr	r3, [r7, #16]
 80042b6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80042ba:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	011b      	lsls	r3, r3, #4
 80042c0:	693a      	ldr	r2, [r7, #16]
 80042c2:	4313      	orrs	r3, r2
 80042c4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80042c6:	697b      	ldr	r3, [r7, #20]
 80042c8:	f023 030a 	bic.w	r3, r3, #10
 80042cc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80042ce:	697a      	ldr	r2, [r7, #20]
 80042d0:	68bb      	ldr	r3, [r7, #8]
 80042d2:	4313      	orrs	r3, r2
 80042d4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	693a      	ldr	r2, [r7, #16]
 80042da:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	697a      	ldr	r2, [r7, #20]
 80042e0:	621a      	str	r2, [r3, #32]
}
 80042e2:	bf00      	nop
 80042e4:	371c      	adds	r7, #28
 80042e6:	46bd      	mov	sp, r7
 80042e8:	bc80      	pop	{r7}
 80042ea:	4770      	bx	lr

080042ec <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80042ec:	b480      	push	{r7}
 80042ee:	b087      	sub	sp, #28
 80042f0:	af00      	add	r7, sp, #0
 80042f2:	60f8      	str	r0, [r7, #12]
 80042f4:	60b9      	str	r1, [r7, #8]
 80042f6:	607a      	str	r2, [r7, #4]
 80042f8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	6a1b      	ldr	r3, [r3, #32]
 80042fe:	f023 0210 	bic.w	r2, r3, #16
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	699b      	ldr	r3, [r3, #24]
 800430a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	6a1b      	ldr	r3, [r3, #32]
 8004310:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8004312:	697b      	ldr	r3, [r7, #20]
 8004314:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004318:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	021b      	lsls	r3, r3, #8
 800431e:	697a      	ldr	r2, [r7, #20]
 8004320:	4313      	orrs	r3, r2
 8004322:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004324:	697b      	ldr	r3, [r7, #20]
 8004326:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800432a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800432c:	683b      	ldr	r3, [r7, #0]
 800432e:	031b      	lsls	r3, r3, #12
 8004330:	b29b      	uxth	r3, r3
 8004332:	697a      	ldr	r2, [r7, #20]
 8004334:	4313      	orrs	r3, r2
 8004336:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004338:	693b      	ldr	r3, [r7, #16]
 800433a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800433e:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8004340:	68bb      	ldr	r3, [r7, #8]
 8004342:	011b      	lsls	r3, r3, #4
 8004344:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8004348:	693a      	ldr	r2, [r7, #16]
 800434a:	4313      	orrs	r3, r2
 800434c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	697a      	ldr	r2, [r7, #20]
 8004352:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	693a      	ldr	r2, [r7, #16]
 8004358:	621a      	str	r2, [r3, #32]
}
 800435a:	bf00      	nop
 800435c:	371c      	adds	r7, #28
 800435e:	46bd      	mov	sp, r7
 8004360:	bc80      	pop	{r7}
 8004362:	4770      	bx	lr

08004364 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004364:	b480      	push	{r7}
 8004366:	b087      	sub	sp, #28
 8004368:	af00      	add	r7, sp, #0
 800436a:	60f8      	str	r0, [r7, #12]
 800436c:	60b9      	str	r1, [r7, #8]
 800436e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	6a1b      	ldr	r3, [r3, #32]
 8004374:	f023 0210 	bic.w	r2, r3, #16
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	699b      	ldr	r3, [r3, #24]
 8004380:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	6a1b      	ldr	r3, [r3, #32]
 8004386:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004388:	697b      	ldr	r3, [r7, #20]
 800438a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800438e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	031b      	lsls	r3, r3, #12
 8004394:	697a      	ldr	r2, [r7, #20]
 8004396:	4313      	orrs	r3, r2
 8004398:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800439a:	693b      	ldr	r3, [r7, #16]
 800439c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80043a0:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80043a2:	68bb      	ldr	r3, [r7, #8]
 80043a4:	011b      	lsls	r3, r3, #4
 80043a6:	693a      	ldr	r2, [r7, #16]
 80043a8:	4313      	orrs	r3, r2
 80043aa:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	697a      	ldr	r2, [r7, #20]
 80043b0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	693a      	ldr	r2, [r7, #16]
 80043b6:	621a      	str	r2, [r3, #32]
}
 80043b8:	bf00      	nop
 80043ba:	371c      	adds	r7, #28
 80043bc:	46bd      	mov	sp, r7
 80043be:	bc80      	pop	{r7}
 80043c0:	4770      	bx	lr

080043c2 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80043c2:	b480      	push	{r7}
 80043c4:	b087      	sub	sp, #28
 80043c6:	af00      	add	r7, sp, #0
 80043c8:	60f8      	str	r0, [r7, #12]
 80043ca:	60b9      	str	r1, [r7, #8]
 80043cc:	607a      	str	r2, [r7, #4]
 80043ce:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	6a1b      	ldr	r3, [r3, #32]
 80043d4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	69db      	ldr	r3, [r3, #28]
 80043e0:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	6a1b      	ldr	r3, [r3, #32]
 80043e6:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 80043e8:	697b      	ldr	r3, [r7, #20]
 80043ea:	f023 0303 	bic.w	r3, r3, #3
 80043ee:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 80043f0:	697a      	ldr	r2, [r7, #20]
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	4313      	orrs	r3, r2
 80043f6:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 80043f8:	697b      	ldr	r3, [r7, #20]
 80043fa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80043fe:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8004400:	683b      	ldr	r3, [r7, #0]
 8004402:	011b      	lsls	r3, r3, #4
 8004404:	b2db      	uxtb	r3, r3
 8004406:	697a      	ldr	r2, [r7, #20]
 8004408:	4313      	orrs	r3, r2
 800440a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P);
 800440c:	693b      	ldr	r3, [r7, #16]
 800440e:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004412:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & TIM_CCER_CC3P);
 8004414:	68bb      	ldr	r3, [r7, #8]
 8004416:	021b      	lsls	r3, r3, #8
 8004418:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800441c:	693a      	ldr	r2, [r7, #16]
 800441e:	4313      	orrs	r3, r2
 8004420:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	697a      	ldr	r2, [r7, #20]
 8004426:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	693a      	ldr	r2, [r7, #16]
 800442c:	621a      	str	r2, [r3, #32]
}
 800442e:	bf00      	nop
 8004430:	371c      	adds	r7, #28
 8004432:	46bd      	mov	sp, r7
 8004434:	bc80      	pop	{r7}
 8004436:	4770      	bx	lr

08004438 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004438:	b480      	push	{r7}
 800443a:	b087      	sub	sp, #28
 800443c:	af00      	add	r7, sp, #0
 800443e:	60f8      	str	r0, [r7, #12]
 8004440:	60b9      	str	r1, [r7, #8]
 8004442:	607a      	str	r2, [r7, #4]
 8004444:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	6a1b      	ldr	r3, [r3, #32]
 800444a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	69db      	ldr	r3, [r3, #28]
 8004456:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	6a1b      	ldr	r3, [r3, #32]
 800445c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800445e:	697b      	ldr	r3, [r7, #20]
 8004460:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004464:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	021b      	lsls	r3, r3, #8
 800446a:	697a      	ldr	r2, [r7, #20]
 800446c:	4313      	orrs	r3, r2
 800446e:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8004470:	697b      	ldr	r3, [r7, #20]
 8004472:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004476:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8004478:	683b      	ldr	r3, [r7, #0]
 800447a:	031b      	lsls	r3, r3, #12
 800447c:	b29b      	uxth	r3, r3
 800447e:	697a      	ldr	r2, [r7, #20]
 8004480:	4313      	orrs	r3, r2
 8004482:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P);
 8004484:	693b      	ldr	r3, [r7, #16]
 8004486:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800448a:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & TIM_CCER_CC4P);
 800448c:	68bb      	ldr	r3, [r7, #8]
 800448e:	031b      	lsls	r3, r3, #12
 8004490:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004494:	693a      	ldr	r2, [r7, #16]
 8004496:	4313      	orrs	r3, r2
 8004498:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	697a      	ldr	r2, [r7, #20]
 800449e:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	693a      	ldr	r2, [r7, #16]
 80044a4:	621a      	str	r2, [r3, #32]
}
 80044a6:	bf00      	nop
 80044a8:	371c      	adds	r7, #28
 80044aa:	46bd      	mov	sp, r7
 80044ac:	bc80      	pop	{r7}
 80044ae:	4770      	bx	lr

080044b0 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80044b0:	b480      	push	{r7}
 80044b2:	b085      	sub	sp, #20
 80044b4:	af00      	add	r7, sp, #0
 80044b6:	6078      	str	r0, [r7, #4]
 80044b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	689b      	ldr	r3, [r3, #8]
 80044be:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80044c6:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80044c8:	683a      	ldr	r2, [r7, #0]
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	4313      	orrs	r3, r2
 80044ce:	f043 0307 	orr.w	r3, r3, #7
 80044d2:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	68fa      	ldr	r2, [r7, #12]
 80044d8:	609a      	str	r2, [r3, #8]
}
 80044da:	bf00      	nop
 80044dc:	3714      	adds	r7, #20
 80044de:	46bd      	mov	sp, r7
 80044e0:	bc80      	pop	{r7}
 80044e2:	4770      	bx	lr

080044e4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80044e4:	b480      	push	{r7}
 80044e6:	b087      	sub	sp, #28
 80044e8:	af00      	add	r7, sp, #0
 80044ea:	60f8      	str	r0, [r7, #12]
 80044ec:	60b9      	str	r1, [r7, #8]
 80044ee:	607a      	str	r2, [r7, #4]
 80044f0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	689b      	ldr	r3, [r3, #8]
 80044f6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80044f8:	697b      	ldr	r3, [r7, #20]
 80044fa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80044fe:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004500:	683b      	ldr	r3, [r7, #0]
 8004502:	021a      	lsls	r2, r3, #8
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	431a      	orrs	r2, r3
 8004508:	68bb      	ldr	r3, [r7, #8]
 800450a:	4313      	orrs	r3, r2
 800450c:	697a      	ldr	r2, [r7, #20]
 800450e:	4313      	orrs	r3, r2
 8004510:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	697a      	ldr	r2, [r7, #20]
 8004516:	609a      	str	r2, [r3, #8]
}
 8004518:	bf00      	nop
 800451a:	371c      	adds	r7, #28
 800451c:	46bd      	mov	sp, r7
 800451e:	bc80      	pop	{r7}
 8004520:	4770      	bx	lr

08004522 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004522:	b480      	push	{r7}
 8004524:	b087      	sub	sp, #28
 8004526:	af00      	add	r7, sp, #0
 8004528:	60f8      	str	r0, [r7, #12]
 800452a:	60b9      	str	r1, [r7, #8]
 800452c:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800452e:	68bb      	ldr	r3, [r7, #8]
 8004530:	f003 031f 	and.w	r3, r3, #31
 8004534:	2201      	movs	r2, #1
 8004536:	fa02 f303 	lsl.w	r3, r2, r3
 800453a:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	6a1a      	ldr	r2, [r3, #32]
 8004540:	697b      	ldr	r3, [r7, #20]
 8004542:	43db      	mvns	r3, r3
 8004544:	401a      	ands	r2, r3
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	6a1a      	ldr	r2, [r3, #32]
 800454e:	68bb      	ldr	r3, [r7, #8]
 8004550:	f003 031f 	and.w	r3, r3, #31
 8004554:	6879      	ldr	r1, [r7, #4]
 8004556:	fa01 f303 	lsl.w	r3, r1, r3
 800455a:	431a      	orrs	r2, r3
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	621a      	str	r2, [r3, #32]
}
 8004560:	bf00      	nop
 8004562:	371c      	adds	r7, #28
 8004564:	46bd      	mov	sp, r7
 8004566:	bc80      	pop	{r7}
 8004568:	4770      	bx	lr
	...

0800456c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800456c:	b480      	push	{r7}
 800456e:	b085      	sub	sp, #20
 8004570:	af00      	add	r7, sp, #0
 8004572:	6078      	str	r0, [r7, #4]
 8004574:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800457c:	2b01      	cmp	r3, #1
 800457e:	d101      	bne.n	8004584 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004580:	2302      	movs	r3, #2
 8004582:	e046      	b.n	8004612 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	2201      	movs	r2, #1
 8004588:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	2202      	movs	r2, #2
 8004590:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	685b      	ldr	r3, [r3, #4]
 800459a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	689b      	ldr	r3, [r3, #8]
 80045a2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80045aa:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80045ac:	683b      	ldr	r3, [r7, #0]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	68fa      	ldr	r2, [r7, #12]
 80045b2:	4313      	orrs	r3, r2
 80045b4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	68fa      	ldr	r2, [r7, #12]
 80045bc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	4a16      	ldr	r2, [pc, #88]	; (800461c <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80045c4:	4293      	cmp	r3, r2
 80045c6:	d00e      	beq.n	80045e6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80045d0:	d009      	beq.n	80045e6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	4a12      	ldr	r2, [pc, #72]	; (8004620 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80045d8:	4293      	cmp	r3, r2
 80045da:	d004      	beq.n	80045e6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	4a10      	ldr	r2, [pc, #64]	; (8004624 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80045e2:	4293      	cmp	r3, r2
 80045e4:	d10c      	bne.n	8004600 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80045e6:	68bb      	ldr	r3, [r7, #8]
 80045e8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80045ec:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80045ee:	683b      	ldr	r3, [r7, #0]
 80045f0:	685b      	ldr	r3, [r3, #4]
 80045f2:	68ba      	ldr	r2, [r7, #8]
 80045f4:	4313      	orrs	r3, r2
 80045f6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	68ba      	ldr	r2, [r7, #8]
 80045fe:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	2201      	movs	r2, #1
 8004604:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	2200      	movs	r2, #0
 800460c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004610:	2300      	movs	r3, #0
}
 8004612:	4618      	mov	r0, r3
 8004614:	3714      	adds	r7, #20
 8004616:	46bd      	mov	sp, r7
 8004618:	bc80      	pop	{r7}
 800461a:	4770      	bx	lr
 800461c:	40012c00 	.word	0x40012c00
 8004620:	40000400 	.word	0x40000400
 8004624:	40000800 	.word	0x40000800

08004628 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004628:	b480      	push	{r7}
 800462a:	b085      	sub	sp, #20
 800462c:	af00      	add	r7, sp, #0
 800462e:	6078      	str	r0, [r7, #4]
 8004630:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8004632:	2300      	movs	r3, #0
 8004634:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800463c:	2b01      	cmp	r3, #1
 800463e:	d101      	bne.n	8004644 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004640:	2302      	movs	r3, #2
 8004642:	e03d      	b.n	80046c0 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	2201      	movs	r2, #1
 8004648:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8004652:	683b      	ldr	r3, [r7, #0]
 8004654:	68db      	ldr	r3, [r3, #12]
 8004656:	4313      	orrs	r3, r2
 8004658:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004660:	683b      	ldr	r3, [r7, #0]
 8004662:	689b      	ldr	r3, [r3, #8]
 8004664:	4313      	orrs	r3, r2
 8004666:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800466e:	683b      	ldr	r3, [r7, #0]
 8004670:	685b      	ldr	r3, [r3, #4]
 8004672:	4313      	orrs	r3, r2
 8004674:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800467c:	683b      	ldr	r3, [r7, #0]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	4313      	orrs	r3, r2
 8004682:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800468a:	683b      	ldr	r3, [r7, #0]
 800468c:	691b      	ldr	r3, [r3, #16]
 800468e:	4313      	orrs	r3, r2
 8004690:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8004698:	683b      	ldr	r3, [r7, #0]
 800469a:	695b      	ldr	r3, [r3, #20]
 800469c:	4313      	orrs	r3, r2
 800469e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80046a6:	683b      	ldr	r3, [r7, #0]
 80046a8:	69db      	ldr	r3, [r3, #28]
 80046aa:	4313      	orrs	r3, r2
 80046ac:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	68fa      	ldr	r2, [r7, #12]
 80046b4:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	2200      	movs	r2, #0
 80046ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80046be:	2300      	movs	r3, #0
}
 80046c0:	4618      	mov	r0, r3
 80046c2:	3714      	adds	r7, #20
 80046c4:	46bd      	mov	sp, r7
 80046c6:	bc80      	pop	{r7}
 80046c8:	4770      	bx	lr

080046ca <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80046ca:	b480      	push	{r7}
 80046cc:	b083      	sub	sp, #12
 80046ce:	af00      	add	r7, sp, #0
 80046d0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80046d2:	bf00      	nop
 80046d4:	370c      	adds	r7, #12
 80046d6:	46bd      	mov	sp, r7
 80046d8:	bc80      	pop	{r7}
 80046da:	4770      	bx	lr

080046dc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80046dc:	b480      	push	{r7}
 80046de:	b083      	sub	sp, #12
 80046e0:	af00      	add	r7, sp, #0
 80046e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80046e4:	bf00      	nop
 80046e6:	370c      	adds	r7, #12
 80046e8:	46bd      	mov	sp, r7
 80046ea:	bc80      	pop	{r7}
 80046ec:	4770      	bx	lr

080046ee <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80046ee:	b580      	push	{r7, lr}
 80046f0:	b082      	sub	sp, #8
 80046f2:	af00      	add	r7, sp, #0
 80046f4:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d101      	bne.n	8004700 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80046fc:	2301      	movs	r3, #1
 80046fe:	e03f      	b.n	8004780 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004706:	b2db      	uxtb	r3, r3
 8004708:	2b00      	cmp	r3, #0
 800470a:	d106      	bne.n	800471a <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	2200      	movs	r2, #0
 8004710:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004714:	6878      	ldr	r0, [r7, #4]
 8004716:	f7fc feb5 	bl	8001484 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	2224      	movs	r2, #36	; 0x24
 800471e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	68da      	ldr	r2, [r3, #12]
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004730:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004732:	6878      	ldr	r0, [r7, #4]
 8004734:	f000 f904 	bl	8004940 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	691a      	ldr	r2, [r3, #16]
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004746:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	695a      	ldr	r2, [r3, #20]
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004756:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	68da      	ldr	r2, [r3, #12]
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004766:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	2200      	movs	r2, #0
 800476c:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	2220      	movs	r2, #32
 8004772:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	2220      	movs	r2, #32
 800477a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800477e:	2300      	movs	r3, #0
}
 8004780:	4618      	mov	r0, r3
 8004782:	3708      	adds	r7, #8
 8004784:	46bd      	mov	sp, r7
 8004786:	bd80      	pop	{r7, pc}

08004788 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004788:	b580      	push	{r7, lr}
 800478a:	b08a      	sub	sp, #40	; 0x28
 800478c:	af02      	add	r7, sp, #8
 800478e:	60f8      	str	r0, [r7, #12]
 8004790:	60b9      	str	r1, [r7, #8]
 8004792:	603b      	str	r3, [r7, #0]
 8004794:	4613      	mov	r3, r2
 8004796:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004798:	2300      	movs	r3, #0
 800479a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80047a2:	b2db      	uxtb	r3, r3
 80047a4:	2b20      	cmp	r3, #32
 80047a6:	d17c      	bne.n	80048a2 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80047a8:	68bb      	ldr	r3, [r7, #8]
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d002      	beq.n	80047b4 <HAL_UART_Transmit+0x2c>
 80047ae:	88fb      	ldrh	r3, [r7, #6]
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d101      	bne.n	80047b8 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80047b4:	2301      	movs	r3, #1
 80047b6:	e075      	b.n	80048a4 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80047be:	2b01      	cmp	r3, #1
 80047c0:	d101      	bne.n	80047c6 <HAL_UART_Transmit+0x3e>
 80047c2:	2302      	movs	r3, #2
 80047c4:	e06e      	b.n	80048a4 <HAL_UART_Transmit+0x11c>
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	2201      	movs	r2, #1
 80047ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	2200      	movs	r2, #0
 80047d2:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	2221      	movs	r2, #33	; 0x21
 80047d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80047dc:	f7fd f82c 	bl	8001838 <HAL_GetTick>
 80047e0:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	88fa      	ldrh	r2, [r7, #6]
 80047e6:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	88fa      	ldrh	r2, [r7, #6]
 80047ec:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	689b      	ldr	r3, [r3, #8]
 80047f2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80047f6:	d108      	bne.n	800480a <HAL_UART_Transmit+0x82>
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	691b      	ldr	r3, [r3, #16]
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d104      	bne.n	800480a <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8004800:	2300      	movs	r3, #0
 8004802:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004804:	68bb      	ldr	r3, [r7, #8]
 8004806:	61bb      	str	r3, [r7, #24]
 8004808:	e003      	b.n	8004812 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800480a:	68bb      	ldr	r3, [r7, #8]
 800480c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800480e:	2300      	movs	r3, #0
 8004810:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	2200      	movs	r2, #0
 8004816:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800481a:	e02a      	b.n	8004872 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800481c:	683b      	ldr	r3, [r7, #0]
 800481e:	9300      	str	r3, [sp, #0]
 8004820:	697b      	ldr	r3, [r7, #20]
 8004822:	2200      	movs	r2, #0
 8004824:	2180      	movs	r1, #128	; 0x80
 8004826:	68f8      	ldr	r0, [r7, #12]
 8004828:	f000 f840 	bl	80048ac <UART_WaitOnFlagUntilTimeout>
 800482c:	4603      	mov	r3, r0
 800482e:	2b00      	cmp	r3, #0
 8004830:	d001      	beq.n	8004836 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8004832:	2303      	movs	r3, #3
 8004834:	e036      	b.n	80048a4 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8004836:	69fb      	ldr	r3, [r7, #28]
 8004838:	2b00      	cmp	r3, #0
 800483a:	d10b      	bne.n	8004854 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800483c:	69bb      	ldr	r3, [r7, #24]
 800483e:	881b      	ldrh	r3, [r3, #0]
 8004840:	461a      	mov	r2, r3
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800484a:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800484c:	69bb      	ldr	r3, [r7, #24]
 800484e:	3302      	adds	r3, #2
 8004850:	61bb      	str	r3, [r7, #24]
 8004852:	e007      	b.n	8004864 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004854:	69fb      	ldr	r3, [r7, #28]
 8004856:	781a      	ldrb	r2, [r3, #0]
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800485e:	69fb      	ldr	r3, [r7, #28]
 8004860:	3301      	adds	r3, #1
 8004862:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004868:	b29b      	uxth	r3, r3
 800486a:	3b01      	subs	r3, #1
 800486c:	b29a      	uxth	r2, r3
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004876:	b29b      	uxth	r3, r3
 8004878:	2b00      	cmp	r3, #0
 800487a:	d1cf      	bne.n	800481c <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800487c:	683b      	ldr	r3, [r7, #0]
 800487e:	9300      	str	r3, [sp, #0]
 8004880:	697b      	ldr	r3, [r7, #20]
 8004882:	2200      	movs	r2, #0
 8004884:	2140      	movs	r1, #64	; 0x40
 8004886:	68f8      	ldr	r0, [r7, #12]
 8004888:	f000 f810 	bl	80048ac <UART_WaitOnFlagUntilTimeout>
 800488c:	4603      	mov	r3, r0
 800488e:	2b00      	cmp	r3, #0
 8004890:	d001      	beq.n	8004896 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8004892:	2303      	movs	r3, #3
 8004894:	e006      	b.n	80048a4 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	2220      	movs	r2, #32
 800489a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800489e:	2300      	movs	r3, #0
 80048a0:	e000      	b.n	80048a4 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80048a2:	2302      	movs	r3, #2
  }
}
 80048a4:	4618      	mov	r0, r3
 80048a6:	3720      	adds	r7, #32
 80048a8:	46bd      	mov	sp, r7
 80048aa:	bd80      	pop	{r7, pc}

080048ac <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80048ac:	b580      	push	{r7, lr}
 80048ae:	b084      	sub	sp, #16
 80048b0:	af00      	add	r7, sp, #0
 80048b2:	60f8      	str	r0, [r7, #12]
 80048b4:	60b9      	str	r1, [r7, #8]
 80048b6:	603b      	str	r3, [r7, #0]
 80048b8:	4613      	mov	r3, r2
 80048ba:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80048bc:	e02c      	b.n	8004918 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80048be:	69bb      	ldr	r3, [r7, #24]
 80048c0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80048c4:	d028      	beq.n	8004918 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80048c6:	69bb      	ldr	r3, [r7, #24]
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d007      	beq.n	80048dc <UART_WaitOnFlagUntilTimeout+0x30>
 80048cc:	f7fc ffb4 	bl	8001838 <HAL_GetTick>
 80048d0:	4602      	mov	r2, r0
 80048d2:	683b      	ldr	r3, [r7, #0]
 80048d4:	1ad3      	subs	r3, r2, r3
 80048d6:	69ba      	ldr	r2, [r7, #24]
 80048d8:	429a      	cmp	r2, r3
 80048da:	d21d      	bcs.n	8004918 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	68da      	ldr	r2, [r3, #12]
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80048ea:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	695a      	ldr	r2, [r3, #20]
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	f022 0201 	bic.w	r2, r2, #1
 80048fa:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	2220      	movs	r2, #32
 8004900:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	2220      	movs	r2, #32
 8004908:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	2200      	movs	r2, #0
 8004910:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8004914:	2303      	movs	r3, #3
 8004916:	e00f      	b.n	8004938 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	681a      	ldr	r2, [r3, #0]
 800491e:	68bb      	ldr	r3, [r7, #8]
 8004920:	4013      	ands	r3, r2
 8004922:	68ba      	ldr	r2, [r7, #8]
 8004924:	429a      	cmp	r2, r3
 8004926:	bf0c      	ite	eq
 8004928:	2301      	moveq	r3, #1
 800492a:	2300      	movne	r3, #0
 800492c:	b2db      	uxtb	r3, r3
 800492e:	461a      	mov	r2, r3
 8004930:	79fb      	ldrb	r3, [r7, #7]
 8004932:	429a      	cmp	r2, r3
 8004934:	d0c3      	beq.n	80048be <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004936:	2300      	movs	r3, #0
}
 8004938:	4618      	mov	r0, r3
 800493a:	3710      	adds	r7, #16
 800493c:	46bd      	mov	sp, r7
 800493e:	bd80      	pop	{r7, pc}

08004940 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004940:	b580      	push	{r7, lr}
 8004942:	b084      	sub	sp, #16
 8004944:	af00      	add	r7, sp, #0
 8004946:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	691b      	ldr	r3, [r3, #16]
 800494e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	68da      	ldr	r2, [r3, #12]
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	430a      	orrs	r2, r1
 800495c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	689a      	ldr	r2, [r3, #8]
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	691b      	ldr	r3, [r3, #16]
 8004966:	431a      	orrs	r2, r3
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	695b      	ldr	r3, [r3, #20]
 800496c:	4313      	orrs	r3, r2
 800496e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	68db      	ldr	r3, [r3, #12]
 8004976:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800497a:	f023 030c 	bic.w	r3, r3, #12
 800497e:	687a      	ldr	r2, [r7, #4]
 8004980:	6812      	ldr	r2, [r2, #0]
 8004982:	68b9      	ldr	r1, [r7, #8]
 8004984:	430b      	orrs	r3, r1
 8004986:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	695b      	ldr	r3, [r3, #20]
 800498e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	699a      	ldr	r2, [r3, #24]
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	430a      	orrs	r2, r1
 800499c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	4a2c      	ldr	r2, [pc, #176]	; (8004a54 <UART_SetConfig+0x114>)
 80049a4:	4293      	cmp	r3, r2
 80049a6:	d103      	bne.n	80049b0 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80049a8:	f7fe f928 	bl	8002bfc <HAL_RCC_GetPCLK2Freq>
 80049ac:	60f8      	str	r0, [r7, #12]
 80049ae:	e002      	b.n	80049b6 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80049b0:	f7fe f910 	bl	8002bd4 <HAL_RCC_GetPCLK1Freq>
 80049b4:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80049b6:	68fa      	ldr	r2, [r7, #12]
 80049b8:	4613      	mov	r3, r2
 80049ba:	009b      	lsls	r3, r3, #2
 80049bc:	4413      	add	r3, r2
 80049be:	009a      	lsls	r2, r3, #2
 80049c0:	441a      	add	r2, r3
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	685b      	ldr	r3, [r3, #4]
 80049c6:	009b      	lsls	r3, r3, #2
 80049c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80049cc:	4a22      	ldr	r2, [pc, #136]	; (8004a58 <UART_SetConfig+0x118>)
 80049ce:	fba2 2303 	umull	r2, r3, r2, r3
 80049d2:	095b      	lsrs	r3, r3, #5
 80049d4:	0119      	lsls	r1, r3, #4
 80049d6:	68fa      	ldr	r2, [r7, #12]
 80049d8:	4613      	mov	r3, r2
 80049da:	009b      	lsls	r3, r3, #2
 80049dc:	4413      	add	r3, r2
 80049de:	009a      	lsls	r2, r3, #2
 80049e0:	441a      	add	r2, r3
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	685b      	ldr	r3, [r3, #4]
 80049e6:	009b      	lsls	r3, r3, #2
 80049e8:	fbb2 f2f3 	udiv	r2, r2, r3
 80049ec:	4b1a      	ldr	r3, [pc, #104]	; (8004a58 <UART_SetConfig+0x118>)
 80049ee:	fba3 0302 	umull	r0, r3, r3, r2
 80049f2:	095b      	lsrs	r3, r3, #5
 80049f4:	2064      	movs	r0, #100	; 0x64
 80049f6:	fb00 f303 	mul.w	r3, r0, r3
 80049fa:	1ad3      	subs	r3, r2, r3
 80049fc:	011b      	lsls	r3, r3, #4
 80049fe:	3332      	adds	r3, #50	; 0x32
 8004a00:	4a15      	ldr	r2, [pc, #84]	; (8004a58 <UART_SetConfig+0x118>)
 8004a02:	fba2 2303 	umull	r2, r3, r2, r3
 8004a06:	095b      	lsrs	r3, r3, #5
 8004a08:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004a0c:	4419      	add	r1, r3
 8004a0e:	68fa      	ldr	r2, [r7, #12]
 8004a10:	4613      	mov	r3, r2
 8004a12:	009b      	lsls	r3, r3, #2
 8004a14:	4413      	add	r3, r2
 8004a16:	009a      	lsls	r2, r3, #2
 8004a18:	441a      	add	r2, r3
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	685b      	ldr	r3, [r3, #4]
 8004a1e:	009b      	lsls	r3, r3, #2
 8004a20:	fbb2 f2f3 	udiv	r2, r2, r3
 8004a24:	4b0c      	ldr	r3, [pc, #48]	; (8004a58 <UART_SetConfig+0x118>)
 8004a26:	fba3 0302 	umull	r0, r3, r3, r2
 8004a2a:	095b      	lsrs	r3, r3, #5
 8004a2c:	2064      	movs	r0, #100	; 0x64
 8004a2e:	fb00 f303 	mul.w	r3, r0, r3
 8004a32:	1ad3      	subs	r3, r2, r3
 8004a34:	011b      	lsls	r3, r3, #4
 8004a36:	3332      	adds	r3, #50	; 0x32
 8004a38:	4a07      	ldr	r2, [pc, #28]	; (8004a58 <UART_SetConfig+0x118>)
 8004a3a:	fba2 2303 	umull	r2, r3, r2, r3
 8004a3e:	095b      	lsrs	r3, r3, #5
 8004a40:	f003 020f 	and.w	r2, r3, #15
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	440a      	add	r2, r1
 8004a4a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8004a4c:	bf00      	nop
 8004a4e:	3710      	adds	r7, #16
 8004a50:	46bd      	mov	sp, r7
 8004a52:	bd80      	pop	{r7, pc}
 8004a54:	40013800 	.word	0x40013800
 8004a58:	51eb851f 	.word	0x51eb851f

08004a5c <__errno>:
 8004a5c:	4b01      	ldr	r3, [pc, #4]	; (8004a64 <__errno+0x8>)
 8004a5e:	6818      	ldr	r0, [r3, #0]
 8004a60:	4770      	bx	lr
 8004a62:	bf00      	nop
 8004a64:	2000000c 	.word	0x2000000c

08004a68 <__libc_init_array>:
 8004a68:	b570      	push	{r4, r5, r6, lr}
 8004a6a:	2600      	movs	r6, #0
 8004a6c:	4d0c      	ldr	r5, [pc, #48]	; (8004aa0 <__libc_init_array+0x38>)
 8004a6e:	4c0d      	ldr	r4, [pc, #52]	; (8004aa4 <__libc_init_array+0x3c>)
 8004a70:	1b64      	subs	r4, r4, r5
 8004a72:	10a4      	asrs	r4, r4, #2
 8004a74:	42a6      	cmp	r6, r4
 8004a76:	d109      	bne.n	8004a8c <__libc_init_array+0x24>
 8004a78:	f000 fc5c 	bl	8005334 <_init>
 8004a7c:	2600      	movs	r6, #0
 8004a7e:	4d0a      	ldr	r5, [pc, #40]	; (8004aa8 <__libc_init_array+0x40>)
 8004a80:	4c0a      	ldr	r4, [pc, #40]	; (8004aac <__libc_init_array+0x44>)
 8004a82:	1b64      	subs	r4, r4, r5
 8004a84:	10a4      	asrs	r4, r4, #2
 8004a86:	42a6      	cmp	r6, r4
 8004a88:	d105      	bne.n	8004a96 <__libc_init_array+0x2e>
 8004a8a:	bd70      	pop	{r4, r5, r6, pc}
 8004a8c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004a90:	4798      	blx	r3
 8004a92:	3601      	adds	r6, #1
 8004a94:	e7ee      	b.n	8004a74 <__libc_init_array+0xc>
 8004a96:	f855 3b04 	ldr.w	r3, [r5], #4
 8004a9a:	4798      	blx	r3
 8004a9c:	3601      	adds	r6, #1
 8004a9e:	e7f2      	b.n	8004a86 <__libc_init_array+0x1e>
 8004aa0:	08005434 	.word	0x08005434
 8004aa4:	08005434 	.word	0x08005434
 8004aa8:	08005434 	.word	0x08005434
 8004aac:	08005438 	.word	0x08005438

08004ab0 <memset>:
 8004ab0:	4603      	mov	r3, r0
 8004ab2:	4402      	add	r2, r0
 8004ab4:	4293      	cmp	r3, r2
 8004ab6:	d100      	bne.n	8004aba <memset+0xa>
 8004ab8:	4770      	bx	lr
 8004aba:	f803 1b01 	strb.w	r1, [r3], #1
 8004abe:	e7f9      	b.n	8004ab4 <memset+0x4>

08004ac0 <siprintf>:
 8004ac0:	b40e      	push	{r1, r2, r3}
 8004ac2:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004ac6:	b500      	push	{lr}
 8004ac8:	b09c      	sub	sp, #112	; 0x70
 8004aca:	ab1d      	add	r3, sp, #116	; 0x74
 8004acc:	9002      	str	r0, [sp, #8]
 8004ace:	9006      	str	r0, [sp, #24]
 8004ad0:	9107      	str	r1, [sp, #28]
 8004ad2:	9104      	str	r1, [sp, #16]
 8004ad4:	4808      	ldr	r0, [pc, #32]	; (8004af8 <siprintf+0x38>)
 8004ad6:	4909      	ldr	r1, [pc, #36]	; (8004afc <siprintf+0x3c>)
 8004ad8:	f853 2b04 	ldr.w	r2, [r3], #4
 8004adc:	9105      	str	r1, [sp, #20]
 8004ade:	6800      	ldr	r0, [r0, #0]
 8004ae0:	a902      	add	r1, sp, #8
 8004ae2:	9301      	str	r3, [sp, #4]
 8004ae4:	f000 f868 	bl	8004bb8 <_svfiprintf_r>
 8004ae8:	2200      	movs	r2, #0
 8004aea:	9b02      	ldr	r3, [sp, #8]
 8004aec:	701a      	strb	r2, [r3, #0]
 8004aee:	b01c      	add	sp, #112	; 0x70
 8004af0:	f85d eb04 	ldr.w	lr, [sp], #4
 8004af4:	b003      	add	sp, #12
 8004af6:	4770      	bx	lr
 8004af8:	2000000c 	.word	0x2000000c
 8004afc:	ffff0208 	.word	0xffff0208

08004b00 <__ssputs_r>:
 8004b00:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004b04:	688e      	ldr	r6, [r1, #8]
 8004b06:	4682      	mov	sl, r0
 8004b08:	429e      	cmp	r6, r3
 8004b0a:	460c      	mov	r4, r1
 8004b0c:	4690      	mov	r8, r2
 8004b0e:	461f      	mov	r7, r3
 8004b10:	d838      	bhi.n	8004b84 <__ssputs_r+0x84>
 8004b12:	898a      	ldrh	r2, [r1, #12]
 8004b14:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004b18:	d032      	beq.n	8004b80 <__ssputs_r+0x80>
 8004b1a:	6825      	ldr	r5, [r4, #0]
 8004b1c:	6909      	ldr	r1, [r1, #16]
 8004b1e:	3301      	adds	r3, #1
 8004b20:	eba5 0901 	sub.w	r9, r5, r1
 8004b24:	6965      	ldr	r5, [r4, #20]
 8004b26:	444b      	add	r3, r9
 8004b28:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004b2c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004b30:	106d      	asrs	r5, r5, #1
 8004b32:	429d      	cmp	r5, r3
 8004b34:	bf38      	it	cc
 8004b36:	461d      	movcc	r5, r3
 8004b38:	0553      	lsls	r3, r2, #21
 8004b3a:	d531      	bpl.n	8004ba0 <__ssputs_r+0xa0>
 8004b3c:	4629      	mov	r1, r5
 8004b3e:	f000 fb53 	bl	80051e8 <_malloc_r>
 8004b42:	4606      	mov	r6, r0
 8004b44:	b950      	cbnz	r0, 8004b5c <__ssputs_r+0x5c>
 8004b46:	230c      	movs	r3, #12
 8004b48:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004b4c:	f8ca 3000 	str.w	r3, [sl]
 8004b50:	89a3      	ldrh	r3, [r4, #12]
 8004b52:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004b56:	81a3      	strh	r3, [r4, #12]
 8004b58:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004b5c:	464a      	mov	r2, r9
 8004b5e:	6921      	ldr	r1, [r4, #16]
 8004b60:	f000 face 	bl	8005100 <memcpy>
 8004b64:	89a3      	ldrh	r3, [r4, #12]
 8004b66:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004b6a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004b6e:	81a3      	strh	r3, [r4, #12]
 8004b70:	6126      	str	r6, [r4, #16]
 8004b72:	444e      	add	r6, r9
 8004b74:	6026      	str	r6, [r4, #0]
 8004b76:	463e      	mov	r6, r7
 8004b78:	6165      	str	r5, [r4, #20]
 8004b7a:	eba5 0509 	sub.w	r5, r5, r9
 8004b7e:	60a5      	str	r5, [r4, #8]
 8004b80:	42be      	cmp	r6, r7
 8004b82:	d900      	bls.n	8004b86 <__ssputs_r+0x86>
 8004b84:	463e      	mov	r6, r7
 8004b86:	4632      	mov	r2, r6
 8004b88:	4641      	mov	r1, r8
 8004b8a:	6820      	ldr	r0, [r4, #0]
 8004b8c:	f000 fac6 	bl	800511c <memmove>
 8004b90:	68a3      	ldr	r3, [r4, #8]
 8004b92:	6822      	ldr	r2, [r4, #0]
 8004b94:	1b9b      	subs	r3, r3, r6
 8004b96:	4432      	add	r2, r6
 8004b98:	2000      	movs	r0, #0
 8004b9a:	60a3      	str	r3, [r4, #8]
 8004b9c:	6022      	str	r2, [r4, #0]
 8004b9e:	e7db      	b.n	8004b58 <__ssputs_r+0x58>
 8004ba0:	462a      	mov	r2, r5
 8004ba2:	f000 fb7b 	bl	800529c <_realloc_r>
 8004ba6:	4606      	mov	r6, r0
 8004ba8:	2800      	cmp	r0, #0
 8004baa:	d1e1      	bne.n	8004b70 <__ssputs_r+0x70>
 8004bac:	4650      	mov	r0, sl
 8004bae:	6921      	ldr	r1, [r4, #16]
 8004bb0:	f000 face 	bl	8005150 <_free_r>
 8004bb4:	e7c7      	b.n	8004b46 <__ssputs_r+0x46>
	...

08004bb8 <_svfiprintf_r>:
 8004bb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004bbc:	4698      	mov	r8, r3
 8004bbe:	898b      	ldrh	r3, [r1, #12]
 8004bc0:	4607      	mov	r7, r0
 8004bc2:	061b      	lsls	r3, r3, #24
 8004bc4:	460d      	mov	r5, r1
 8004bc6:	4614      	mov	r4, r2
 8004bc8:	b09d      	sub	sp, #116	; 0x74
 8004bca:	d50e      	bpl.n	8004bea <_svfiprintf_r+0x32>
 8004bcc:	690b      	ldr	r3, [r1, #16]
 8004bce:	b963      	cbnz	r3, 8004bea <_svfiprintf_r+0x32>
 8004bd0:	2140      	movs	r1, #64	; 0x40
 8004bd2:	f000 fb09 	bl	80051e8 <_malloc_r>
 8004bd6:	6028      	str	r0, [r5, #0]
 8004bd8:	6128      	str	r0, [r5, #16]
 8004bda:	b920      	cbnz	r0, 8004be6 <_svfiprintf_r+0x2e>
 8004bdc:	230c      	movs	r3, #12
 8004bde:	603b      	str	r3, [r7, #0]
 8004be0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004be4:	e0d1      	b.n	8004d8a <_svfiprintf_r+0x1d2>
 8004be6:	2340      	movs	r3, #64	; 0x40
 8004be8:	616b      	str	r3, [r5, #20]
 8004bea:	2300      	movs	r3, #0
 8004bec:	9309      	str	r3, [sp, #36]	; 0x24
 8004bee:	2320      	movs	r3, #32
 8004bf0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004bf4:	2330      	movs	r3, #48	; 0x30
 8004bf6:	f04f 0901 	mov.w	r9, #1
 8004bfa:	f8cd 800c 	str.w	r8, [sp, #12]
 8004bfe:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8004da4 <_svfiprintf_r+0x1ec>
 8004c02:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004c06:	4623      	mov	r3, r4
 8004c08:	469a      	mov	sl, r3
 8004c0a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004c0e:	b10a      	cbz	r2, 8004c14 <_svfiprintf_r+0x5c>
 8004c10:	2a25      	cmp	r2, #37	; 0x25
 8004c12:	d1f9      	bne.n	8004c08 <_svfiprintf_r+0x50>
 8004c14:	ebba 0b04 	subs.w	fp, sl, r4
 8004c18:	d00b      	beq.n	8004c32 <_svfiprintf_r+0x7a>
 8004c1a:	465b      	mov	r3, fp
 8004c1c:	4622      	mov	r2, r4
 8004c1e:	4629      	mov	r1, r5
 8004c20:	4638      	mov	r0, r7
 8004c22:	f7ff ff6d 	bl	8004b00 <__ssputs_r>
 8004c26:	3001      	adds	r0, #1
 8004c28:	f000 80aa 	beq.w	8004d80 <_svfiprintf_r+0x1c8>
 8004c2c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004c2e:	445a      	add	r2, fp
 8004c30:	9209      	str	r2, [sp, #36]	; 0x24
 8004c32:	f89a 3000 	ldrb.w	r3, [sl]
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	f000 80a2 	beq.w	8004d80 <_svfiprintf_r+0x1c8>
 8004c3c:	2300      	movs	r3, #0
 8004c3e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004c42:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004c46:	f10a 0a01 	add.w	sl, sl, #1
 8004c4a:	9304      	str	r3, [sp, #16]
 8004c4c:	9307      	str	r3, [sp, #28]
 8004c4e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004c52:	931a      	str	r3, [sp, #104]	; 0x68
 8004c54:	4654      	mov	r4, sl
 8004c56:	2205      	movs	r2, #5
 8004c58:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004c5c:	4851      	ldr	r0, [pc, #324]	; (8004da4 <_svfiprintf_r+0x1ec>)
 8004c5e:	f000 fa41 	bl	80050e4 <memchr>
 8004c62:	9a04      	ldr	r2, [sp, #16]
 8004c64:	b9d8      	cbnz	r0, 8004c9e <_svfiprintf_r+0xe6>
 8004c66:	06d0      	lsls	r0, r2, #27
 8004c68:	bf44      	itt	mi
 8004c6a:	2320      	movmi	r3, #32
 8004c6c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004c70:	0711      	lsls	r1, r2, #28
 8004c72:	bf44      	itt	mi
 8004c74:	232b      	movmi	r3, #43	; 0x2b
 8004c76:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004c7a:	f89a 3000 	ldrb.w	r3, [sl]
 8004c7e:	2b2a      	cmp	r3, #42	; 0x2a
 8004c80:	d015      	beq.n	8004cae <_svfiprintf_r+0xf6>
 8004c82:	4654      	mov	r4, sl
 8004c84:	2000      	movs	r0, #0
 8004c86:	f04f 0c0a 	mov.w	ip, #10
 8004c8a:	9a07      	ldr	r2, [sp, #28]
 8004c8c:	4621      	mov	r1, r4
 8004c8e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004c92:	3b30      	subs	r3, #48	; 0x30
 8004c94:	2b09      	cmp	r3, #9
 8004c96:	d94e      	bls.n	8004d36 <_svfiprintf_r+0x17e>
 8004c98:	b1b0      	cbz	r0, 8004cc8 <_svfiprintf_r+0x110>
 8004c9a:	9207      	str	r2, [sp, #28]
 8004c9c:	e014      	b.n	8004cc8 <_svfiprintf_r+0x110>
 8004c9e:	eba0 0308 	sub.w	r3, r0, r8
 8004ca2:	fa09 f303 	lsl.w	r3, r9, r3
 8004ca6:	4313      	orrs	r3, r2
 8004ca8:	46a2      	mov	sl, r4
 8004caa:	9304      	str	r3, [sp, #16]
 8004cac:	e7d2      	b.n	8004c54 <_svfiprintf_r+0x9c>
 8004cae:	9b03      	ldr	r3, [sp, #12]
 8004cb0:	1d19      	adds	r1, r3, #4
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	9103      	str	r1, [sp, #12]
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	bfbb      	ittet	lt
 8004cba:	425b      	neglt	r3, r3
 8004cbc:	f042 0202 	orrlt.w	r2, r2, #2
 8004cc0:	9307      	strge	r3, [sp, #28]
 8004cc2:	9307      	strlt	r3, [sp, #28]
 8004cc4:	bfb8      	it	lt
 8004cc6:	9204      	strlt	r2, [sp, #16]
 8004cc8:	7823      	ldrb	r3, [r4, #0]
 8004cca:	2b2e      	cmp	r3, #46	; 0x2e
 8004ccc:	d10c      	bne.n	8004ce8 <_svfiprintf_r+0x130>
 8004cce:	7863      	ldrb	r3, [r4, #1]
 8004cd0:	2b2a      	cmp	r3, #42	; 0x2a
 8004cd2:	d135      	bne.n	8004d40 <_svfiprintf_r+0x188>
 8004cd4:	9b03      	ldr	r3, [sp, #12]
 8004cd6:	3402      	adds	r4, #2
 8004cd8:	1d1a      	adds	r2, r3, #4
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	9203      	str	r2, [sp, #12]
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	bfb8      	it	lt
 8004ce2:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8004ce6:	9305      	str	r3, [sp, #20]
 8004ce8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8004db4 <_svfiprintf_r+0x1fc>
 8004cec:	2203      	movs	r2, #3
 8004cee:	4650      	mov	r0, sl
 8004cf0:	7821      	ldrb	r1, [r4, #0]
 8004cf2:	f000 f9f7 	bl	80050e4 <memchr>
 8004cf6:	b140      	cbz	r0, 8004d0a <_svfiprintf_r+0x152>
 8004cf8:	2340      	movs	r3, #64	; 0x40
 8004cfa:	eba0 000a 	sub.w	r0, r0, sl
 8004cfe:	fa03 f000 	lsl.w	r0, r3, r0
 8004d02:	9b04      	ldr	r3, [sp, #16]
 8004d04:	3401      	adds	r4, #1
 8004d06:	4303      	orrs	r3, r0
 8004d08:	9304      	str	r3, [sp, #16]
 8004d0a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004d0e:	2206      	movs	r2, #6
 8004d10:	4825      	ldr	r0, [pc, #148]	; (8004da8 <_svfiprintf_r+0x1f0>)
 8004d12:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004d16:	f000 f9e5 	bl	80050e4 <memchr>
 8004d1a:	2800      	cmp	r0, #0
 8004d1c:	d038      	beq.n	8004d90 <_svfiprintf_r+0x1d8>
 8004d1e:	4b23      	ldr	r3, [pc, #140]	; (8004dac <_svfiprintf_r+0x1f4>)
 8004d20:	bb1b      	cbnz	r3, 8004d6a <_svfiprintf_r+0x1b2>
 8004d22:	9b03      	ldr	r3, [sp, #12]
 8004d24:	3307      	adds	r3, #7
 8004d26:	f023 0307 	bic.w	r3, r3, #7
 8004d2a:	3308      	adds	r3, #8
 8004d2c:	9303      	str	r3, [sp, #12]
 8004d2e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004d30:	4433      	add	r3, r6
 8004d32:	9309      	str	r3, [sp, #36]	; 0x24
 8004d34:	e767      	b.n	8004c06 <_svfiprintf_r+0x4e>
 8004d36:	460c      	mov	r4, r1
 8004d38:	2001      	movs	r0, #1
 8004d3a:	fb0c 3202 	mla	r2, ip, r2, r3
 8004d3e:	e7a5      	b.n	8004c8c <_svfiprintf_r+0xd4>
 8004d40:	2300      	movs	r3, #0
 8004d42:	f04f 0c0a 	mov.w	ip, #10
 8004d46:	4619      	mov	r1, r3
 8004d48:	3401      	adds	r4, #1
 8004d4a:	9305      	str	r3, [sp, #20]
 8004d4c:	4620      	mov	r0, r4
 8004d4e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004d52:	3a30      	subs	r2, #48	; 0x30
 8004d54:	2a09      	cmp	r2, #9
 8004d56:	d903      	bls.n	8004d60 <_svfiprintf_r+0x1a8>
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d0c5      	beq.n	8004ce8 <_svfiprintf_r+0x130>
 8004d5c:	9105      	str	r1, [sp, #20]
 8004d5e:	e7c3      	b.n	8004ce8 <_svfiprintf_r+0x130>
 8004d60:	4604      	mov	r4, r0
 8004d62:	2301      	movs	r3, #1
 8004d64:	fb0c 2101 	mla	r1, ip, r1, r2
 8004d68:	e7f0      	b.n	8004d4c <_svfiprintf_r+0x194>
 8004d6a:	ab03      	add	r3, sp, #12
 8004d6c:	9300      	str	r3, [sp, #0]
 8004d6e:	462a      	mov	r2, r5
 8004d70:	4638      	mov	r0, r7
 8004d72:	4b0f      	ldr	r3, [pc, #60]	; (8004db0 <_svfiprintf_r+0x1f8>)
 8004d74:	a904      	add	r1, sp, #16
 8004d76:	f3af 8000 	nop.w
 8004d7a:	1c42      	adds	r2, r0, #1
 8004d7c:	4606      	mov	r6, r0
 8004d7e:	d1d6      	bne.n	8004d2e <_svfiprintf_r+0x176>
 8004d80:	89ab      	ldrh	r3, [r5, #12]
 8004d82:	065b      	lsls	r3, r3, #25
 8004d84:	f53f af2c 	bmi.w	8004be0 <_svfiprintf_r+0x28>
 8004d88:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004d8a:	b01d      	add	sp, #116	; 0x74
 8004d8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004d90:	ab03      	add	r3, sp, #12
 8004d92:	9300      	str	r3, [sp, #0]
 8004d94:	462a      	mov	r2, r5
 8004d96:	4638      	mov	r0, r7
 8004d98:	4b05      	ldr	r3, [pc, #20]	; (8004db0 <_svfiprintf_r+0x1f8>)
 8004d9a:	a904      	add	r1, sp, #16
 8004d9c:	f000 f87c 	bl	8004e98 <_printf_i>
 8004da0:	e7eb      	b.n	8004d7a <_svfiprintf_r+0x1c2>
 8004da2:	bf00      	nop
 8004da4:	08005400 	.word	0x08005400
 8004da8:	0800540a 	.word	0x0800540a
 8004dac:	00000000 	.word	0x00000000
 8004db0:	08004b01 	.word	0x08004b01
 8004db4:	08005406 	.word	0x08005406

08004db8 <_printf_common>:
 8004db8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004dbc:	4616      	mov	r6, r2
 8004dbe:	4699      	mov	r9, r3
 8004dc0:	688a      	ldr	r2, [r1, #8]
 8004dc2:	690b      	ldr	r3, [r1, #16]
 8004dc4:	4607      	mov	r7, r0
 8004dc6:	4293      	cmp	r3, r2
 8004dc8:	bfb8      	it	lt
 8004dca:	4613      	movlt	r3, r2
 8004dcc:	6033      	str	r3, [r6, #0]
 8004dce:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004dd2:	460c      	mov	r4, r1
 8004dd4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004dd8:	b10a      	cbz	r2, 8004dde <_printf_common+0x26>
 8004dda:	3301      	adds	r3, #1
 8004ddc:	6033      	str	r3, [r6, #0]
 8004dde:	6823      	ldr	r3, [r4, #0]
 8004de0:	0699      	lsls	r1, r3, #26
 8004de2:	bf42      	ittt	mi
 8004de4:	6833      	ldrmi	r3, [r6, #0]
 8004de6:	3302      	addmi	r3, #2
 8004de8:	6033      	strmi	r3, [r6, #0]
 8004dea:	6825      	ldr	r5, [r4, #0]
 8004dec:	f015 0506 	ands.w	r5, r5, #6
 8004df0:	d106      	bne.n	8004e00 <_printf_common+0x48>
 8004df2:	f104 0a19 	add.w	sl, r4, #25
 8004df6:	68e3      	ldr	r3, [r4, #12]
 8004df8:	6832      	ldr	r2, [r6, #0]
 8004dfa:	1a9b      	subs	r3, r3, r2
 8004dfc:	42ab      	cmp	r3, r5
 8004dfe:	dc28      	bgt.n	8004e52 <_printf_common+0x9a>
 8004e00:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004e04:	1e13      	subs	r3, r2, #0
 8004e06:	6822      	ldr	r2, [r4, #0]
 8004e08:	bf18      	it	ne
 8004e0a:	2301      	movne	r3, #1
 8004e0c:	0692      	lsls	r2, r2, #26
 8004e0e:	d42d      	bmi.n	8004e6c <_printf_common+0xb4>
 8004e10:	4649      	mov	r1, r9
 8004e12:	4638      	mov	r0, r7
 8004e14:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004e18:	47c0      	blx	r8
 8004e1a:	3001      	adds	r0, #1
 8004e1c:	d020      	beq.n	8004e60 <_printf_common+0xa8>
 8004e1e:	6823      	ldr	r3, [r4, #0]
 8004e20:	68e5      	ldr	r5, [r4, #12]
 8004e22:	f003 0306 	and.w	r3, r3, #6
 8004e26:	2b04      	cmp	r3, #4
 8004e28:	bf18      	it	ne
 8004e2a:	2500      	movne	r5, #0
 8004e2c:	6832      	ldr	r2, [r6, #0]
 8004e2e:	f04f 0600 	mov.w	r6, #0
 8004e32:	68a3      	ldr	r3, [r4, #8]
 8004e34:	bf08      	it	eq
 8004e36:	1aad      	subeq	r5, r5, r2
 8004e38:	6922      	ldr	r2, [r4, #16]
 8004e3a:	bf08      	it	eq
 8004e3c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004e40:	4293      	cmp	r3, r2
 8004e42:	bfc4      	itt	gt
 8004e44:	1a9b      	subgt	r3, r3, r2
 8004e46:	18ed      	addgt	r5, r5, r3
 8004e48:	341a      	adds	r4, #26
 8004e4a:	42b5      	cmp	r5, r6
 8004e4c:	d11a      	bne.n	8004e84 <_printf_common+0xcc>
 8004e4e:	2000      	movs	r0, #0
 8004e50:	e008      	b.n	8004e64 <_printf_common+0xac>
 8004e52:	2301      	movs	r3, #1
 8004e54:	4652      	mov	r2, sl
 8004e56:	4649      	mov	r1, r9
 8004e58:	4638      	mov	r0, r7
 8004e5a:	47c0      	blx	r8
 8004e5c:	3001      	adds	r0, #1
 8004e5e:	d103      	bne.n	8004e68 <_printf_common+0xb0>
 8004e60:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004e64:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004e68:	3501      	adds	r5, #1
 8004e6a:	e7c4      	b.n	8004df6 <_printf_common+0x3e>
 8004e6c:	2030      	movs	r0, #48	; 0x30
 8004e6e:	18e1      	adds	r1, r4, r3
 8004e70:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004e74:	1c5a      	adds	r2, r3, #1
 8004e76:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004e7a:	4422      	add	r2, r4
 8004e7c:	3302      	adds	r3, #2
 8004e7e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004e82:	e7c5      	b.n	8004e10 <_printf_common+0x58>
 8004e84:	2301      	movs	r3, #1
 8004e86:	4622      	mov	r2, r4
 8004e88:	4649      	mov	r1, r9
 8004e8a:	4638      	mov	r0, r7
 8004e8c:	47c0      	blx	r8
 8004e8e:	3001      	adds	r0, #1
 8004e90:	d0e6      	beq.n	8004e60 <_printf_common+0xa8>
 8004e92:	3601      	adds	r6, #1
 8004e94:	e7d9      	b.n	8004e4a <_printf_common+0x92>
	...

08004e98 <_printf_i>:
 8004e98:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004e9c:	460c      	mov	r4, r1
 8004e9e:	7e27      	ldrb	r7, [r4, #24]
 8004ea0:	4691      	mov	r9, r2
 8004ea2:	2f78      	cmp	r7, #120	; 0x78
 8004ea4:	4680      	mov	r8, r0
 8004ea6:	469a      	mov	sl, r3
 8004ea8:	990c      	ldr	r1, [sp, #48]	; 0x30
 8004eaa:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004eae:	d807      	bhi.n	8004ec0 <_printf_i+0x28>
 8004eb0:	2f62      	cmp	r7, #98	; 0x62
 8004eb2:	d80a      	bhi.n	8004eca <_printf_i+0x32>
 8004eb4:	2f00      	cmp	r7, #0
 8004eb6:	f000 80d9 	beq.w	800506c <_printf_i+0x1d4>
 8004eba:	2f58      	cmp	r7, #88	; 0x58
 8004ebc:	f000 80a4 	beq.w	8005008 <_printf_i+0x170>
 8004ec0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004ec4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004ec8:	e03a      	b.n	8004f40 <_printf_i+0xa8>
 8004eca:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004ece:	2b15      	cmp	r3, #21
 8004ed0:	d8f6      	bhi.n	8004ec0 <_printf_i+0x28>
 8004ed2:	a001      	add	r0, pc, #4	; (adr r0, 8004ed8 <_printf_i+0x40>)
 8004ed4:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8004ed8:	08004f31 	.word	0x08004f31
 8004edc:	08004f45 	.word	0x08004f45
 8004ee0:	08004ec1 	.word	0x08004ec1
 8004ee4:	08004ec1 	.word	0x08004ec1
 8004ee8:	08004ec1 	.word	0x08004ec1
 8004eec:	08004ec1 	.word	0x08004ec1
 8004ef0:	08004f45 	.word	0x08004f45
 8004ef4:	08004ec1 	.word	0x08004ec1
 8004ef8:	08004ec1 	.word	0x08004ec1
 8004efc:	08004ec1 	.word	0x08004ec1
 8004f00:	08004ec1 	.word	0x08004ec1
 8004f04:	08005053 	.word	0x08005053
 8004f08:	08004f75 	.word	0x08004f75
 8004f0c:	08005035 	.word	0x08005035
 8004f10:	08004ec1 	.word	0x08004ec1
 8004f14:	08004ec1 	.word	0x08004ec1
 8004f18:	08005075 	.word	0x08005075
 8004f1c:	08004ec1 	.word	0x08004ec1
 8004f20:	08004f75 	.word	0x08004f75
 8004f24:	08004ec1 	.word	0x08004ec1
 8004f28:	08004ec1 	.word	0x08004ec1
 8004f2c:	0800503d 	.word	0x0800503d
 8004f30:	680b      	ldr	r3, [r1, #0]
 8004f32:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004f36:	1d1a      	adds	r2, r3, #4
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	600a      	str	r2, [r1, #0]
 8004f3c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004f40:	2301      	movs	r3, #1
 8004f42:	e0a4      	b.n	800508e <_printf_i+0x1f6>
 8004f44:	6825      	ldr	r5, [r4, #0]
 8004f46:	6808      	ldr	r0, [r1, #0]
 8004f48:	062e      	lsls	r6, r5, #24
 8004f4a:	f100 0304 	add.w	r3, r0, #4
 8004f4e:	d50a      	bpl.n	8004f66 <_printf_i+0xce>
 8004f50:	6805      	ldr	r5, [r0, #0]
 8004f52:	600b      	str	r3, [r1, #0]
 8004f54:	2d00      	cmp	r5, #0
 8004f56:	da03      	bge.n	8004f60 <_printf_i+0xc8>
 8004f58:	232d      	movs	r3, #45	; 0x2d
 8004f5a:	426d      	negs	r5, r5
 8004f5c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004f60:	230a      	movs	r3, #10
 8004f62:	485e      	ldr	r0, [pc, #376]	; (80050dc <_printf_i+0x244>)
 8004f64:	e019      	b.n	8004f9a <_printf_i+0x102>
 8004f66:	f015 0f40 	tst.w	r5, #64	; 0x40
 8004f6a:	6805      	ldr	r5, [r0, #0]
 8004f6c:	600b      	str	r3, [r1, #0]
 8004f6e:	bf18      	it	ne
 8004f70:	b22d      	sxthne	r5, r5
 8004f72:	e7ef      	b.n	8004f54 <_printf_i+0xbc>
 8004f74:	680b      	ldr	r3, [r1, #0]
 8004f76:	6825      	ldr	r5, [r4, #0]
 8004f78:	1d18      	adds	r0, r3, #4
 8004f7a:	6008      	str	r0, [r1, #0]
 8004f7c:	0628      	lsls	r0, r5, #24
 8004f7e:	d501      	bpl.n	8004f84 <_printf_i+0xec>
 8004f80:	681d      	ldr	r5, [r3, #0]
 8004f82:	e002      	b.n	8004f8a <_printf_i+0xf2>
 8004f84:	0669      	lsls	r1, r5, #25
 8004f86:	d5fb      	bpl.n	8004f80 <_printf_i+0xe8>
 8004f88:	881d      	ldrh	r5, [r3, #0]
 8004f8a:	2f6f      	cmp	r7, #111	; 0x6f
 8004f8c:	bf0c      	ite	eq
 8004f8e:	2308      	moveq	r3, #8
 8004f90:	230a      	movne	r3, #10
 8004f92:	4852      	ldr	r0, [pc, #328]	; (80050dc <_printf_i+0x244>)
 8004f94:	2100      	movs	r1, #0
 8004f96:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004f9a:	6866      	ldr	r6, [r4, #4]
 8004f9c:	2e00      	cmp	r6, #0
 8004f9e:	bfa8      	it	ge
 8004fa0:	6821      	ldrge	r1, [r4, #0]
 8004fa2:	60a6      	str	r6, [r4, #8]
 8004fa4:	bfa4      	itt	ge
 8004fa6:	f021 0104 	bicge.w	r1, r1, #4
 8004faa:	6021      	strge	r1, [r4, #0]
 8004fac:	b90d      	cbnz	r5, 8004fb2 <_printf_i+0x11a>
 8004fae:	2e00      	cmp	r6, #0
 8004fb0:	d04d      	beq.n	800504e <_printf_i+0x1b6>
 8004fb2:	4616      	mov	r6, r2
 8004fb4:	fbb5 f1f3 	udiv	r1, r5, r3
 8004fb8:	fb03 5711 	mls	r7, r3, r1, r5
 8004fbc:	5dc7      	ldrb	r7, [r0, r7]
 8004fbe:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004fc2:	462f      	mov	r7, r5
 8004fc4:	42bb      	cmp	r3, r7
 8004fc6:	460d      	mov	r5, r1
 8004fc8:	d9f4      	bls.n	8004fb4 <_printf_i+0x11c>
 8004fca:	2b08      	cmp	r3, #8
 8004fcc:	d10b      	bne.n	8004fe6 <_printf_i+0x14e>
 8004fce:	6823      	ldr	r3, [r4, #0]
 8004fd0:	07df      	lsls	r7, r3, #31
 8004fd2:	d508      	bpl.n	8004fe6 <_printf_i+0x14e>
 8004fd4:	6923      	ldr	r3, [r4, #16]
 8004fd6:	6861      	ldr	r1, [r4, #4]
 8004fd8:	4299      	cmp	r1, r3
 8004fda:	bfde      	ittt	le
 8004fdc:	2330      	movle	r3, #48	; 0x30
 8004fde:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004fe2:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 8004fe6:	1b92      	subs	r2, r2, r6
 8004fe8:	6122      	str	r2, [r4, #16]
 8004fea:	464b      	mov	r3, r9
 8004fec:	4621      	mov	r1, r4
 8004fee:	4640      	mov	r0, r8
 8004ff0:	f8cd a000 	str.w	sl, [sp]
 8004ff4:	aa03      	add	r2, sp, #12
 8004ff6:	f7ff fedf 	bl	8004db8 <_printf_common>
 8004ffa:	3001      	adds	r0, #1
 8004ffc:	d14c      	bne.n	8005098 <_printf_i+0x200>
 8004ffe:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005002:	b004      	add	sp, #16
 8005004:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005008:	4834      	ldr	r0, [pc, #208]	; (80050dc <_printf_i+0x244>)
 800500a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800500e:	680e      	ldr	r6, [r1, #0]
 8005010:	6823      	ldr	r3, [r4, #0]
 8005012:	f856 5b04 	ldr.w	r5, [r6], #4
 8005016:	061f      	lsls	r7, r3, #24
 8005018:	600e      	str	r6, [r1, #0]
 800501a:	d514      	bpl.n	8005046 <_printf_i+0x1ae>
 800501c:	07d9      	lsls	r1, r3, #31
 800501e:	bf44      	itt	mi
 8005020:	f043 0320 	orrmi.w	r3, r3, #32
 8005024:	6023      	strmi	r3, [r4, #0]
 8005026:	b91d      	cbnz	r5, 8005030 <_printf_i+0x198>
 8005028:	6823      	ldr	r3, [r4, #0]
 800502a:	f023 0320 	bic.w	r3, r3, #32
 800502e:	6023      	str	r3, [r4, #0]
 8005030:	2310      	movs	r3, #16
 8005032:	e7af      	b.n	8004f94 <_printf_i+0xfc>
 8005034:	6823      	ldr	r3, [r4, #0]
 8005036:	f043 0320 	orr.w	r3, r3, #32
 800503a:	6023      	str	r3, [r4, #0]
 800503c:	2378      	movs	r3, #120	; 0x78
 800503e:	4828      	ldr	r0, [pc, #160]	; (80050e0 <_printf_i+0x248>)
 8005040:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005044:	e7e3      	b.n	800500e <_printf_i+0x176>
 8005046:	065e      	lsls	r6, r3, #25
 8005048:	bf48      	it	mi
 800504a:	b2ad      	uxthmi	r5, r5
 800504c:	e7e6      	b.n	800501c <_printf_i+0x184>
 800504e:	4616      	mov	r6, r2
 8005050:	e7bb      	b.n	8004fca <_printf_i+0x132>
 8005052:	680b      	ldr	r3, [r1, #0]
 8005054:	6826      	ldr	r6, [r4, #0]
 8005056:	1d1d      	adds	r5, r3, #4
 8005058:	6960      	ldr	r0, [r4, #20]
 800505a:	600d      	str	r5, [r1, #0]
 800505c:	0635      	lsls	r5, r6, #24
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	d501      	bpl.n	8005066 <_printf_i+0x1ce>
 8005062:	6018      	str	r0, [r3, #0]
 8005064:	e002      	b.n	800506c <_printf_i+0x1d4>
 8005066:	0671      	lsls	r1, r6, #25
 8005068:	d5fb      	bpl.n	8005062 <_printf_i+0x1ca>
 800506a:	8018      	strh	r0, [r3, #0]
 800506c:	2300      	movs	r3, #0
 800506e:	4616      	mov	r6, r2
 8005070:	6123      	str	r3, [r4, #16]
 8005072:	e7ba      	b.n	8004fea <_printf_i+0x152>
 8005074:	680b      	ldr	r3, [r1, #0]
 8005076:	1d1a      	adds	r2, r3, #4
 8005078:	600a      	str	r2, [r1, #0]
 800507a:	681e      	ldr	r6, [r3, #0]
 800507c:	2100      	movs	r1, #0
 800507e:	4630      	mov	r0, r6
 8005080:	6862      	ldr	r2, [r4, #4]
 8005082:	f000 f82f 	bl	80050e4 <memchr>
 8005086:	b108      	cbz	r0, 800508c <_printf_i+0x1f4>
 8005088:	1b80      	subs	r0, r0, r6
 800508a:	6060      	str	r0, [r4, #4]
 800508c:	6863      	ldr	r3, [r4, #4]
 800508e:	6123      	str	r3, [r4, #16]
 8005090:	2300      	movs	r3, #0
 8005092:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005096:	e7a8      	b.n	8004fea <_printf_i+0x152>
 8005098:	4632      	mov	r2, r6
 800509a:	4649      	mov	r1, r9
 800509c:	4640      	mov	r0, r8
 800509e:	6923      	ldr	r3, [r4, #16]
 80050a0:	47d0      	blx	sl
 80050a2:	3001      	adds	r0, #1
 80050a4:	d0ab      	beq.n	8004ffe <_printf_i+0x166>
 80050a6:	6823      	ldr	r3, [r4, #0]
 80050a8:	079b      	lsls	r3, r3, #30
 80050aa:	d413      	bmi.n	80050d4 <_printf_i+0x23c>
 80050ac:	68e0      	ldr	r0, [r4, #12]
 80050ae:	9b03      	ldr	r3, [sp, #12]
 80050b0:	4298      	cmp	r0, r3
 80050b2:	bfb8      	it	lt
 80050b4:	4618      	movlt	r0, r3
 80050b6:	e7a4      	b.n	8005002 <_printf_i+0x16a>
 80050b8:	2301      	movs	r3, #1
 80050ba:	4632      	mov	r2, r6
 80050bc:	4649      	mov	r1, r9
 80050be:	4640      	mov	r0, r8
 80050c0:	47d0      	blx	sl
 80050c2:	3001      	adds	r0, #1
 80050c4:	d09b      	beq.n	8004ffe <_printf_i+0x166>
 80050c6:	3501      	adds	r5, #1
 80050c8:	68e3      	ldr	r3, [r4, #12]
 80050ca:	9903      	ldr	r1, [sp, #12]
 80050cc:	1a5b      	subs	r3, r3, r1
 80050ce:	42ab      	cmp	r3, r5
 80050d0:	dcf2      	bgt.n	80050b8 <_printf_i+0x220>
 80050d2:	e7eb      	b.n	80050ac <_printf_i+0x214>
 80050d4:	2500      	movs	r5, #0
 80050d6:	f104 0619 	add.w	r6, r4, #25
 80050da:	e7f5      	b.n	80050c8 <_printf_i+0x230>
 80050dc:	08005411 	.word	0x08005411
 80050e0:	08005422 	.word	0x08005422

080050e4 <memchr>:
 80050e4:	4603      	mov	r3, r0
 80050e6:	b510      	push	{r4, lr}
 80050e8:	b2c9      	uxtb	r1, r1
 80050ea:	4402      	add	r2, r0
 80050ec:	4293      	cmp	r3, r2
 80050ee:	4618      	mov	r0, r3
 80050f0:	d101      	bne.n	80050f6 <memchr+0x12>
 80050f2:	2000      	movs	r0, #0
 80050f4:	e003      	b.n	80050fe <memchr+0x1a>
 80050f6:	7804      	ldrb	r4, [r0, #0]
 80050f8:	3301      	adds	r3, #1
 80050fa:	428c      	cmp	r4, r1
 80050fc:	d1f6      	bne.n	80050ec <memchr+0x8>
 80050fe:	bd10      	pop	{r4, pc}

08005100 <memcpy>:
 8005100:	440a      	add	r2, r1
 8005102:	4291      	cmp	r1, r2
 8005104:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8005108:	d100      	bne.n	800510c <memcpy+0xc>
 800510a:	4770      	bx	lr
 800510c:	b510      	push	{r4, lr}
 800510e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005112:	4291      	cmp	r1, r2
 8005114:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005118:	d1f9      	bne.n	800510e <memcpy+0xe>
 800511a:	bd10      	pop	{r4, pc}

0800511c <memmove>:
 800511c:	4288      	cmp	r0, r1
 800511e:	b510      	push	{r4, lr}
 8005120:	eb01 0402 	add.w	r4, r1, r2
 8005124:	d902      	bls.n	800512c <memmove+0x10>
 8005126:	4284      	cmp	r4, r0
 8005128:	4623      	mov	r3, r4
 800512a:	d807      	bhi.n	800513c <memmove+0x20>
 800512c:	1e43      	subs	r3, r0, #1
 800512e:	42a1      	cmp	r1, r4
 8005130:	d008      	beq.n	8005144 <memmove+0x28>
 8005132:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005136:	f803 2f01 	strb.w	r2, [r3, #1]!
 800513a:	e7f8      	b.n	800512e <memmove+0x12>
 800513c:	4601      	mov	r1, r0
 800513e:	4402      	add	r2, r0
 8005140:	428a      	cmp	r2, r1
 8005142:	d100      	bne.n	8005146 <memmove+0x2a>
 8005144:	bd10      	pop	{r4, pc}
 8005146:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800514a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800514e:	e7f7      	b.n	8005140 <memmove+0x24>

08005150 <_free_r>:
 8005150:	b538      	push	{r3, r4, r5, lr}
 8005152:	4605      	mov	r5, r0
 8005154:	2900      	cmp	r1, #0
 8005156:	d043      	beq.n	80051e0 <_free_r+0x90>
 8005158:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800515c:	1f0c      	subs	r4, r1, #4
 800515e:	2b00      	cmp	r3, #0
 8005160:	bfb8      	it	lt
 8005162:	18e4      	addlt	r4, r4, r3
 8005164:	f000 f8d0 	bl	8005308 <__malloc_lock>
 8005168:	4a1e      	ldr	r2, [pc, #120]	; (80051e4 <_free_r+0x94>)
 800516a:	6813      	ldr	r3, [r2, #0]
 800516c:	4610      	mov	r0, r2
 800516e:	b933      	cbnz	r3, 800517e <_free_r+0x2e>
 8005170:	6063      	str	r3, [r4, #4]
 8005172:	6014      	str	r4, [r2, #0]
 8005174:	4628      	mov	r0, r5
 8005176:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800517a:	f000 b8cb 	b.w	8005314 <__malloc_unlock>
 800517e:	42a3      	cmp	r3, r4
 8005180:	d90a      	bls.n	8005198 <_free_r+0x48>
 8005182:	6821      	ldr	r1, [r4, #0]
 8005184:	1862      	adds	r2, r4, r1
 8005186:	4293      	cmp	r3, r2
 8005188:	bf01      	itttt	eq
 800518a:	681a      	ldreq	r2, [r3, #0]
 800518c:	685b      	ldreq	r3, [r3, #4]
 800518e:	1852      	addeq	r2, r2, r1
 8005190:	6022      	streq	r2, [r4, #0]
 8005192:	6063      	str	r3, [r4, #4]
 8005194:	6004      	str	r4, [r0, #0]
 8005196:	e7ed      	b.n	8005174 <_free_r+0x24>
 8005198:	461a      	mov	r2, r3
 800519a:	685b      	ldr	r3, [r3, #4]
 800519c:	b10b      	cbz	r3, 80051a2 <_free_r+0x52>
 800519e:	42a3      	cmp	r3, r4
 80051a0:	d9fa      	bls.n	8005198 <_free_r+0x48>
 80051a2:	6811      	ldr	r1, [r2, #0]
 80051a4:	1850      	adds	r0, r2, r1
 80051a6:	42a0      	cmp	r0, r4
 80051a8:	d10b      	bne.n	80051c2 <_free_r+0x72>
 80051aa:	6820      	ldr	r0, [r4, #0]
 80051ac:	4401      	add	r1, r0
 80051ae:	1850      	adds	r0, r2, r1
 80051b0:	4283      	cmp	r3, r0
 80051b2:	6011      	str	r1, [r2, #0]
 80051b4:	d1de      	bne.n	8005174 <_free_r+0x24>
 80051b6:	6818      	ldr	r0, [r3, #0]
 80051b8:	685b      	ldr	r3, [r3, #4]
 80051ba:	4401      	add	r1, r0
 80051bc:	6011      	str	r1, [r2, #0]
 80051be:	6053      	str	r3, [r2, #4]
 80051c0:	e7d8      	b.n	8005174 <_free_r+0x24>
 80051c2:	d902      	bls.n	80051ca <_free_r+0x7a>
 80051c4:	230c      	movs	r3, #12
 80051c6:	602b      	str	r3, [r5, #0]
 80051c8:	e7d4      	b.n	8005174 <_free_r+0x24>
 80051ca:	6820      	ldr	r0, [r4, #0]
 80051cc:	1821      	adds	r1, r4, r0
 80051ce:	428b      	cmp	r3, r1
 80051d0:	bf01      	itttt	eq
 80051d2:	6819      	ldreq	r1, [r3, #0]
 80051d4:	685b      	ldreq	r3, [r3, #4]
 80051d6:	1809      	addeq	r1, r1, r0
 80051d8:	6021      	streq	r1, [r4, #0]
 80051da:	6063      	str	r3, [r4, #4]
 80051dc:	6054      	str	r4, [r2, #4]
 80051de:	e7c9      	b.n	8005174 <_free_r+0x24>
 80051e0:	bd38      	pop	{r3, r4, r5, pc}
 80051e2:	bf00      	nop
 80051e4:	20000160 	.word	0x20000160

080051e8 <_malloc_r>:
 80051e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80051ea:	1ccd      	adds	r5, r1, #3
 80051ec:	f025 0503 	bic.w	r5, r5, #3
 80051f0:	3508      	adds	r5, #8
 80051f2:	2d0c      	cmp	r5, #12
 80051f4:	bf38      	it	cc
 80051f6:	250c      	movcc	r5, #12
 80051f8:	2d00      	cmp	r5, #0
 80051fa:	4606      	mov	r6, r0
 80051fc:	db01      	blt.n	8005202 <_malloc_r+0x1a>
 80051fe:	42a9      	cmp	r1, r5
 8005200:	d903      	bls.n	800520a <_malloc_r+0x22>
 8005202:	230c      	movs	r3, #12
 8005204:	6033      	str	r3, [r6, #0]
 8005206:	2000      	movs	r0, #0
 8005208:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800520a:	f000 f87d 	bl	8005308 <__malloc_lock>
 800520e:	4921      	ldr	r1, [pc, #132]	; (8005294 <_malloc_r+0xac>)
 8005210:	680a      	ldr	r2, [r1, #0]
 8005212:	4614      	mov	r4, r2
 8005214:	b99c      	cbnz	r4, 800523e <_malloc_r+0x56>
 8005216:	4f20      	ldr	r7, [pc, #128]	; (8005298 <_malloc_r+0xb0>)
 8005218:	683b      	ldr	r3, [r7, #0]
 800521a:	b923      	cbnz	r3, 8005226 <_malloc_r+0x3e>
 800521c:	4621      	mov	r1, r4
 800521e:	4630      	mov	r0, r6
 8005220:	f000 f862 	bl	80052e8 <_sbrk_r>
 8005224:	6038      	str	r0, [r7, #0]
 8005226:	4629      	mov	r1, r5
 8005228:	4630      	mov	r0, r6
 800522a:	f000 f85d 	bl	80052e8 <_sbrk_r>
 800522e:	1c43      	adds	r3, r0, #1
 8005230:	d123      	bne.n	800527a <_malloc_r+0x92>
 8005232:	230c      	movs	r3, #12
 8005234:	4630      	mov	r0, r6
 8005236:	6033      	str	r3, [r6, #0]
 8005238:	f000 f86c 	bl	8005314 <__malloc_unlock>
 800523c:	e7e3      	b.n	8005206 <_malloc_r+0x1e>
 800523e:	6823      	ldr	r3, [r4, #0]
 8005240:	1b5b      	subs	r3, r3, r5
 8005242:	d417      	bmi.n	8005274 <_malloc_r+0x8c>
 8005244:	2b0b      	cmp	r3, #11
 8005246:	d903      	bls.n	8005250 <_malloc_r+0x68>
 8005248:	6023      	str	r3, [r4, #0]
 800524a:	441c      	add	r4, r3
 800524c:	6025      	str	r5, [r4, #0]
 800524e:	e004      	b.n	800525a <_malloc_r+0x72>
 8005250:	6863      	ldr	r3, [r4, #4]
 8005252:	42a2      	cmp	r2, r4
 8005254:	bf0c      	ite	eq
 8005256:	600b      	streq	r3, [r1, #0]
 8005258:	6053      	strne	r3, [r2, #4]
 800525a:	4630      	mov	r0, r6
 800525c:	f000 f85a 	bl	8005314 <__malloc_unlock>
 8005260:	f104 000b 	add.w	r0, r4, #11
 8005264:	1d23      	adds	r3, r4, #4
 8005266:	f020 0007 	bic.w	r0, r0, #7
 800526a:	1ac2      	subs	r2, r0, r3
 800526c:	d0cc      	beq.n	8005208 <_malloc_r+0x20>
 800526e:	1a1b      	subs	r3, r3, r0
 8005270:	50a3      	str	r3, [r4, r2]
 8005272:	e7c9      	b.n	8005208 <_malloc_r+0x20>
 8005274:	4622      	mov	r2, r4
 8005276:	6864      	ldr	r4, [r4, #4]
 8005278:	e7cc      	b.n	8005214 <_malloc_r+0x2c>
 800527a:	1cc4      	adds	r4, r0, #3
 800527c:	f024 0403 	bic.w	r4, r4, #3
 8005280:	42a0      	cmp	r0, r4
 8005282:	d0e3      	beq.n	800524c <_malloc_r+0x64>
 8005284:	1a21      	subs	r1, r4, r0
 8005286:	4630      	mov	r0, r6
 8005288:	f000 f82e 	bl	80052e8 <_sbrk_r>
 800528c:	3001      	adds	r0, #1
 800528e:	d1dd      	bne.n	800524c <_malloc_r+0x64>
 8005290:	e7cf      	b.n	8005232 <_malloc_r+0x4a>
 8005292:	bf00      	nop
 8005294:	20000160 	.word	0x20000160
 8005298:	20000164 	.word	0x20000164

0800529c <_realloc_r>:
 800529c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800529e:	4607      	mov	r7, r0
 80052a0:	4614      	mov	r4, r2
 80052a2:	460e      	mov	r6, r1
 80052a4:	b921      	cbnz	r1, 80052b0 <_realloc_r+0x14>
 80052a6:	4611      	mov	r1, r2
 80052a8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80052ac:	f7ff bf9c 	b.w	80051e8 <_malloc_r>
 80052b0:	b922      	cbnz	r2, 80052bc <_realloc_r+0x20>
 80052b2:	f7ff ff4d 	bl	8005150 <_free_r>
 80052b6:	4625      	mov	r5, r4
 80052b8:	4628      	mov	r0, r5
 80052ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80052bc:	f000 f830 	bl	8005320 <_malloc_usable_size_r>
 80052c0:	42a0      	cmp	r0, r4
 80052c2:	d20f      	bcs.n	80052e4 <_realloc_r+0x48>
 80052c4:	4621      	mov	r1, r4
 80052c6:	4638      	mov	r0, r7
 80052c8:	f7ff ff8e 	bl	80051e8 <_malloc_r>
 80052cc:	4605      	mov	r5, r0
 80052ce:	2800      	cmp	r0, #0
 80052d0:	d0f2      	beq.n	80052b8 <_realloc_r+0x1c>
 80052d2:	4631      	mov	r1, r6
 80052d4:	4622      	mov	r2, r4
 80052d6:	f7ff ff13 	bl	8005100 <memcpy>
 80052da:	4631      	mov	r1, r6
 80052dc:	4638      	mov	r0, r7
 80052de:	f7ff ff37 	bl	8005150 <_free_r>
 80052e2:	e7e9      	b.n	80052b8 <_realloc_r+0x1c>
 80052e4:	4635      	mov	r5, r6
 80052e6:	e7e7      	b.n	80052b8 <_realloc_r+0x1c>

080052e8 <_sbrk_r>:
 80052e8:	b538      	push	{r3, r4, r5, lr}
 80052ea:	2300      	movs	r3, #0
 80052ec:	4d05      	ldr	r5, [pc, #20]	; (8005304 <_sbrk_r+0x1c>)
 80052ee:	4604      	mov	r4, r0
 80052f0:	4608      	mov	r0, r1
 80052f2:	602b      	str	r3, [r5, #0]
 80052f4:	f7fc f9e6 	bl	80016c4 <_sbrk>
 80052f8:	1c43      	adds	r3, r0, #1
 80052fa:	d102      	bne.n	8005302 <_sbrk_r+0x1a>
 80052fc:	682b      	ldr	r3, [r5, #0]
 80052fe:	b103      	cbz	r3, 8005302 <_sbrk_r+0x1a>
 8005300:	6023      	str	r3, [r4, #0]
 8005302:	bd38      	pop	{r3, r4, r5, pc}
 8005304:	20000500 	.word	0x20000500

08005308 <__malloc_lock>:
 8005308:	4801      	ldr	r0, [pc, #4]	; (8005310 <__malloc_lock+0x8>)
 800530a:	f000 b811 	b.w	8005330 <__retarget_lock_acquire_recursive>
 800530e:	bf00      	nop
 8005310:	20000508 	.word	0x20000508

08005314 <__malloc_unlock>:
 8005314:	4801      	ldr	r0, [pc, #4]	; (800531c <__malloc_unlock+0x8>)
 8005316:	f000 b80c 	b.w	8005332 <__retarget_lock_release_recursive>
 800531a:	bf00      	nop
 800531c:	20000508 	.word	0x20000508

08005320 <_malloc_usable_size_r>:
 8005320:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005324:	1f18      	subs	r0, r3, #4
 8005326:	2b00      	cmp	r3, #0
 8005328:	bfbc      	itt	lt
 800532a:	580b      	ldrlt	r3, [r1, r0]
 800532c:	18c0      	addlt	r0, r0, r3
 800532e:	4770      	bx	lr

08005330 <__retarget_lock_acquire_recursive>:
 8005330:	4770      	bx	lr

08005332 <__retarget_lock_release_recursive>:
 8005332:	4770      	bx	lr

08005334 <_init>:
 8005334:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005336:	bf00      	nop
 8005338:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800533a:	bc08      	pop	{r3}
 800533c:	469e      	mov	lr, r3
 800533e:	4770      	bx	lr

08005340 <_fini>:
 8005340:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005342:	bf00      	nop
 8005344:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005346:	bc08      	pop	{r3}
 8005348:	469e      	mov	lr, r3
 800534a:	4770      	bx	lr
